{"custom_id": "flask#d05862574f1ea19d99526ca893be2888389eab1c", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 367 | Contributors (this commit): 20 | Commits (past 90d): 3 | Contributors (cumulative): 20 | DMM Complexity: None\n\nDIFF:\n@@ -74,7 +74,7 @@ setup(\n         'Werkzeug>=0.7',\n         'Jinja2>=2.4',\n         'itsdangerous>=0.21',\n-        'click>=2.0',\n+        'click>=4.0',\n     ],\n     classifiers=[\n         'Development Status :: 4 - Beta',\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#38df3df7357a152ae8e6fa8c596a7c9c595b2fc3", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 11 | Lines Deleted: 13 | Files Changed: 1 | Hunks: 5 | Methods Changed: 4 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 24 | Churn Cumulative: 1617 | Contributors (this commit): 22 | Commits (past 90d): 10 | Contributors (cumulative): 22 | DMM Complexity: 0.3333333333333333\n\nDIFF:\n@@ -61,8 +61,7 @@ def find_best_app(script_info, module):\n \n         if callable(app_factory):\n             try:\n-                app = check_factory_for_script_info_and_call(app_factory,\n-                                                             script_info)\n+                app = call_factory(app_factory, script_info)\n                 if isinstance(app, Flask):\n                     return app\n             except TypeError:\n@@ -80,19 +79,18 @@ def find_best_app(script_info, module):\n     )\n \n \n-def check_factory_for_script_info_and_call(func, script_info):\n-    \"\"\"Given a function this checks if the function has an argument named \n-    script_info or just a single argument and calls the function with \n-    script_info if so. Otherwise calls the function without any arguments and \n-    returns the result.\"\"\"\n+def call_factory(func, script_info):\n+    \"\"\"Checks if the given app factory function has an argument named \n+    ``script_info`` or just a single argument and calls the function passing \n+    ``script_info`` if so. Otherwise, calls the function without any arguments\n+    and returns the result.\n+    \"\"\"\n     arguments = getargspec(func).args\n     if 'script_info' in arguments:\n-        result = func(script_info=script_info)\n+        return func(script_info=script_info)\n     elif len(arguments) == 1:\n-        result = func(script_info)\n-    else:\n-        result = func()\n-    return result\n+        return func(script_info)\n+    return func()\n \n \n def prepare_exec_for_file(filename):\n@@ -275,7 +273,7 @@ class ScriptInfo(object):\n         if self._loaded_app is not None:\n             return self._loaded_app\n         if self.create_app is not None:\n-            rv = check_factory_for_script_info_and_call(self.create_app, self)\n+            rv = call_factory(self.create_app, self)\n         else:\n             if not self.app_import_path:\n                 raise NoAppException(\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#3fce4898f84531142c6fa8ab34cf9dc4d0cc4e85", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 27 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 5 | Complexity Δ (Sum/Max): 5/5 | Churn Δ: 27 | Churn Cumulative: 747 | Contributors (this commit): 5 | Commits (past 90d): 7 | Contributors (cumulative): 5 | DMM Complexity: 1.0\n\nDIFF:\n@@ -791,3 +791,30 @@ def test_app_request_processing():\n     resp = app.test_client().get('/').data\n     assert resp == b'request|after'\n     assert evts == ['first'] + ['before', 'after', 'teardown'] * 2\n+\n+\n+def test_app_url_processors(app, client):\n+    bp = flask.Blueprint('bp', __name__)\n+\n+    # Register app-wide url defaults and preprocessor on blueprint\n+    @bp.app_url_defaults\n+    def add_language_code(endpoint, values):\n+        values.setdefault('lang_code', flask.g.lang_code)\n+\n+    @bp.app_url_value_preprocessor\n+    def pull_lang_code(endpoint, values):\n+        flask.g.lang_code = values.pop('lang_code')\n+\n+    # Register route rules at the app level\n+    @app.route('/<lang_code>/')\n+    def index():\n+        return flask.url_for('about')\n+\n+    @app.route('/<lang_code>/about')\n+    def about():\n+        return flask.url_for('index')\n+\n+    app.register_blueprint(bp)\n+\n+    assert client.get('/de/').data == b'/de/about'\n+    assert client.get('/de/about').data == b'/de/'\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#c03a82713a8fe4d256a2d2cf1b1f3ab36d5a5916", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 10 | Lines Deleted: 18 | Files Changed: 1 | Hunks: 9 | Methods Changed: 10 | Complexity Δ (Sum/Max): -5/0 | Churn Δ: 28 | Churn Cumulative: 775 | Contributors (this commit): 5 | Commits (past 90d): 8 | Contributors (cumulative): 5 | DMM Complexity: 0.0\n\nDIFF:\n@@ -202,9 +202,7 @@ def test_templates_and_static(test_apps):\n         assert flask.render_template('nested/nested.txt') == 'I\\'m nested'\n \n \n-def test_default_static_cache_timeout():\n-    app = flask.Flask(__name__)\n-\n+def test_default_static_cache_timeout(app):\n     class MyBlueprint(flask.Blueprint):\n         def get_send_file_max_age(self, filename):\n             return 100\n@@ -660,8 +658,7 @@ def test_add_template_test_with_name_and_template(app, client):\n     assert b'Success!' in rv.data\n \n \n-def test_context_processing():\n-    app = flask.Flask(__name__)\n+def test_context_processing(app, client):\n     answer_bp = flask.Blueprint('answer_bp', __name__)\n \n     template_string = lambda: flask.render_template_string(\n@@ -691,10 +688,8 @@ def test_context_processing():\n     # Register the blueprint\n     app.register_blueprint(answer_bp)\n \n-    c = app.test_client()\n-\n-    app_page_bytes = c.get('/').data\n-    answer_page_bytes = c.get('/bp').data\n+    app_page_bytes = client.get('/').data\n+    answer_page_bytes = client.get('/bp').data\n \n     assert b'43' in app_page_bytes\n     assert b'42' not in app_page_bytes\n@@ -703,8 +698,7 @@ def test_context_processing():\n     assert b'43' in answer_page_bytes\n \n \n-def test_template_global():\n-    app = flask.Flask(__name__)\n+def test_template_global(app):\n     bp = flask.Blueprint('bp', __name__)\n \n     @bp.app_template_global()\n@@ -724,8 +718,7 @@ def test_template_global():\n         rv = flask.render_template_string('{{ get_answer() }}')\n         assert rv == '42'\n \n-def test_request_processing():\n-    app = flask.Flask(__name__)\n+def test_request_processing(app, client):\n     bp = flask.Blueprint('bp', __name__)\n     evts = []\n     @bp.before_request\n@@ -748,12 +741,11 @@ def test_request_processing():\n     app.register_blueprint(bp)\n \n     assert evts == []\n-    rv = app.test_client().get('/bp')\n+    rv = client.get('/bp')\n     assert rv.data == b'request|after'\n     assert evts == ['before', 'after', 'teardown']\n \n-def test_app_request_processing():\n-    app = flask.Flask(__name__)\n+def test_app_request_processing(app, client):\n     bp = flask.Blueprint('bp', __name__)\n     evts = []\n \n@@ -783,11 +775,11 @@ def test_app_request_processing():\n     assert evts == []\n \n     # first request\n-    resp = app.test_client().get('/').data\n+    resp = client.get('/').data\n     assert resp == b'request|after'\n     assert evts == ['first', 'before', 'after', 'teardown']\n \n     # second request\n-    resp = app.test_client().get('/').data\n+    resp = client.get('/').data\n     assert resp == b'request|after'\n     assert evts == ['first'] + ['before', 'after', 'teardown'] * 2\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#2eb28165a9f5610aba2dea24086a53ad89dc66ce", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 2 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 232 | Contributors (this commit): 7 | Commits (past 90d): 3 | Contributors (cumulative): 7 | DMM Complexity: None\n\nDIFF:\n@@ -149,6 +149,8 @@ def test_manual_context_binding(app):\n \n \n @pytest.mark.skipif(greenlet is None, reason='greenlet not installed')\n+class GreenletContextCopying():\n+\n     def test_greenlet_context_copying(app, client):\n         greenlets = []\n \n@@ -176,8 +178,6 @@ def test_greenlet_context_copying(app, client):\n         result = greenlets[0].run()\n         assert result == 42\n \n-\n-@pytest.mark.skipif(greenlet is None, reason='greenlet not installed')\n     def test_greenlet_context_copying_api(app, client):\n         greenlets = []\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#d29dbe14cfc6737378ef01868b89ee154a777a48", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 3 | Lines Deleted: 3 | Files Changed: 1 | Hunks: 3 | Methods Changed: 4 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 6 | Churn Cumulative: 238 | Contributors (this commit): 7 | Commits (past 90d): 4 | Contributors (cumulative): 7 | DMM Complexity: None\n\nDIFF:\n@@ -149,9 +149,9 @@ def test_manual_context_binding(app):\n \n \n @pytest.mark.skipif(greenlet is None, reason='greenlet not installed')\n-class GreenletContextCopying():\n+class TestGreenletContextCopying(object):\n \n-    def test_greenlet_context_copying(app, client):\n+    def test_greenlet_context_copying(self, app, client):\n         greenlets = []\n \n         @app.route('/')\n@@ -178,7 +178,7 @@ class GreenletContextCopying():\n         result = greenlets[0].run()\n         assert result == 42\n \n-    def test_greenlet_context_copying_api(app, client):\n+    def test_greenlet_context_copying_api(self, app, client):\n         greenlets = []\n \n         @app.route('/')\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#65b22926f7673b419a9da82f3213d7243c968af1", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 369 | Contributors (this commit): 21 | Commits (past 90d): 4 | Contributors (cumulative): 21 | DMM Complexity: None\n\nDIFF:\n@@ -71,7 +71,7 @@ setup(\n     zip_safe=False,\n     platforms='any',\n     install_requires=[\n-        'Werkzeug>=0.7',\n+        'Werkzeug>=0.9',\n         'Jinja2>=2.4',\n         'itsdangerous>=0.21',\n         'click>=4.0',\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#4ec1fbc9f52b4b3997a1978ab3390a5a1157ad6a", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 174 | Lines Deleted: 227 | Files Changed: 10 | Hunks: 187 | Methods Changed: 120 | Complexity Δ (Sum/Max): 5/5 | Churn Δ: 401 | Churn Cumulative: 6662 | Contributors (this commit): 64 | Commits (past 90d): 56 | Contributors (cumulative): 99 | DMM Complexity: 0.0\n\nDIFF:\n@@ -951,18 +951,16 @@ def test_http_error_subclass_handling(app, client):\n     assert client.get('/3').data == b'apple'\n \n \n-def test_trapping_of_bad_request_key_errors(app):\n+def test_trapping_of_bad_request_key_errors(app, client):\n     @app.route('/fail')\n     def fail():\n         flask.request.form['missing_key']\n \n-    c = app.test_client()\n-    assert c.get('/fail').status_code == 400\n+    assert client.get('/fail').status_code == 400\n \n     app.config['TRAP_BAD_REQUEST_ERRORS'] = True\n-    c = app.test_client()\n     with pytest.raises(KeyError) as e:\n-        c.get(\"/fail\")\n+        client.get(\"/fail\")\n     assert e.errisinstance(BadRequest)\n \n \n@@ -988,17 +986,14 @@ def test_enctype_debug_helper(app, client):\n     # with statement is important because we leave an exception on the\n     # stack otherwise and we want to ensure that this is not the case\n     # to not negatively affect other tests.\n-    with client as c:\n+    with client:\n         with pytest.raises(DebugFilesKeyError) as e:\n-            c.post('/fail', data={'foo': 'index.txt'})\n+            client.post('/fail', data={'foo': 'index.txt'})\n         assert 'no file contents were transmitted' in str(e.value)\n         assert 'This was submitted: \"index.txt\"' in str(e.value)\n \n \n-def test_response_types():\n-    app = flask.Flask(__name__)\n-    app.testing = True\n-\n+def test_response_types(app, client):\n     @app.route('/text')\n     def from_text():\n         return u'Hällo Wörld'\n@@ -1040,39 +1035,37 @@ def test_response_types():\n     def from_wsgi():\n         return NotFound()\n \n-    c = app.test_client()\n+    assert client.get('/text').data == u'Hällo Wörld'.encode('utf-8')\n+    assert client.get('/bytes').data == u'Hällo Wörld'.encode('utf-8')\n \n-    assert c.get('/text').data == u'Hällo Wörld'.encode('utf-8')\n-    assert c.get('/bytes').data == u'Hällo Wörld'.encode('utf-8')\n-\n-    rv = c.get('/full_tuple')\n+    rv = client.get('/full_tuple')\n     assert rv.data == b'Meh'\n     assert rv.headers['X-Foo'] == 'Testing'\n     assert rv.status_code == 400\n     assert rv.mimetype == 'text/plain'\n \n-    rv = c.get('/text_headers')\n+    rv = client.get('/text_headers')\n     assert rv.data == b'Hello'\n     assert rv.headers['X-Foo'] == 'Test'\n     assert rv.status_code == 200\n     assert rv.mimetype == 'text/plain'\n \n-    rv = c.get('/text_status')\n+    rv = client.get('/text_status')\n     assert rv.data == b'Hi, status!'\n     assert rv.status_code == 400\n     assert rv.mimetype == 'text/html'\n \n-    rv = c.get('/response_headers')\n+    rv = client.get('/response_headers')\n     assert rv.data == b'Hello world'\n     assert rv.headers.getlist('X-Foo') == ['Baz', 'Bar']\n     assert rv.headers['X-Bar'] == 'Foo'\n     assert rv.status_code == 404\n \n-    rv = c.get('/response_status')\n+    rv = client.get('/response_status')\n     assert rv.data == b'Hello world'\n     assert rv.status_code == 500\n \n-    rv = c.get('/wsgi')\n+    rv = client.get('/wsgi')\n     assert b'Not Found' in rv.data\n     assert rv.status_code == 404\n \n@@ -1120,9 +1113,7 @@ def test_response_type_errors():\n     pytest.raises(TypeError, c.get, '/bad_wsgi')\n \n \n-def test_make_response():\n-    app = flask.Flask(__name__)\n-    with app.test_request_context():\n+def test_make_response(app, req_ctx):\n     rv = flask.make_response()\n     assert rv.status_code == 200\n     assert rv.data == b''\n@@ -1139,9 +1130,7 @@ def test_make_response():\n     assert rv.mimetype == 'text/html'\n \n \n-def test_make_response_with_response_instance():\n-    app = flask.Flask(__name__)\n-    with app.test_request_context():\n+def test_make_response_with_response_instance(app, req_ctx):\n     rv = flask.make_response(\n         flask.jsonify({'msg': 'W00t'}), 400)\n     assert rv.status_code == 400\n@@ -1162,10 +1151,8 @@ def test_make_response_with_response_instance():\n     assert rv.headers['X-Foo'] == 'bar'\n \n \n-def test_jsonify_no_prettyprint():\n-    app = flask.Flask(__name__)\n+def test_jsonify_no_prettyprint(app, req_ctx):\n     app.config.update({\"JSONIFY_PRETTYPRINT_REGULAR\": False})\n-    with app.test_request_context():\n     compressed_msg = b'{\"msg\":{\"submsg\":\"W00t\"},\"msg2\":\"foobar\"}\\n'\n     uncompressed_msg = {\n         \"msg\": {\n@@ -1179,10 +1166,8 @@ def test_jsonify_no_prettyprint():\n     assert rv.data == compressed_msg\n \n \n-def test_jsonify_prettyprint():\n-    app = flask.Flask(__name__)\n+def test_jsonify_prettyprint(app, req_ctx):\n     app.config.update({\"JSONIFY_PRETTYPRINT_REGULAR\": True})\n-    with app.test_request_context():\n     compressed_msg = {\"msg\": {\"submsg\": \"W00t\"}, \"msg2\": \"foobar\"}\n     pretty_response = \\\n         b'{\\n  \"msg\": {\\n    \"submsg\": \"W00t\"\\n  }, \\n  \"msg2\": \"foobar\"\\n}\\n'\n@@ -1192,10 +1177,8 @@ def test_jsonify_prettyprint():\n     assert rv.data == pretty_response\n \n \n-def test_jsonify_mimetype():\n-    app = flask.Flask(__name__)\n+def test_jsonify_mimetype(app, req_ctx):\n     app.config.update({\"JSONIFY_MIMETYPE\": 'application/vnd.api+json'})\n-    with app.test_request_context():\n     msg = {\n         \"msg\": {\"submsg\": \"W00t\"},\n     }\n@@ -1204,30 +1187,23 @@ def test_jsonify_mimetype():\n     assert rv.mimetype == 'application/vnd.api+json'\n \n \n-def test_jsonify_args_and_kwargs_check():\n-    app = flask.Flask(__name__)\n-    with app.test_request_context():\n+def test_jsonify_args_and_kwargs_check(app, req_ctx):\n     with pytest.raises(TypeError) as e:\n         flask.jsonify('fake args', kwargs='fake')\n     assert 'behavior undefined' in str(e.value)\n \n \n-def test_url_generation():\n-    app = flask.Flask(__name__)\n-\n+def test_url_generation(app, req_ctx):\n     @app.route('/hello/<name>', methods=['POST'])\n     def hello():\n         pass\n \n-    with app.test_request_context():\n     assert flask.url_for('hello', name='test x') == '/hello/test%20x'\n     assert flask.url_for('hello', name='test x', _external=True) == \\\n            'http://localhost/hello/test%20x'\n \n \n-def test_build_error_handler():\n-    app = flask.Flask(__name__)\n-\n+def test_build_error_handler(app):\n     # Test base case, a URL which results in a BuildError.\n     with app.test_request_context():\n         pytest.raises(BuildError, flask.url_for, 'spam')\n@@ -1254,9 +1230,7 @@ def test_build_error_handler():\n         assert flask.url_for('spam') == '/test_handler/'\n \n \n-def test_build_error_handler_reraise():\n-    app = flask.Flask(__name__)\n-\n+def test_build_error_handler_reraise(app):\n     # Test a custom handler which reraises the BuildError\n     def handler_raises_build_error(error, endpoint, values):\n         raise error\n@@ -1267,9 +1241,7 @@ def test_build_error_handler_reraise():\n         pytest.raises(BuildError, flask.url_for, 'not.existing')\n \n \n-def test_url_for_passes_special_values_to_build_error_handler():\n-    app = flask.Flask(__name__)\n-\n+def test_url_for_passes_special_values_to_build_error_handler(app):\n     @app.url_build_error_handlers.append\n     def handler(error, endpoint, values):\n         assert values == {\n@@ -1284,7 +1256,7 @@ def test_url_for_passes_special_values_to_build_error_handler():\n         flask.url_for('/')\n \n \n-def test_custom_converters():\n+def test_custom_converters(app, client):\n     from werkzeug.routing import BaseConverter\n \n     class ListConverter(BaseConverter):\n@@ -1295,21 +1267,17 @@ def test_custom_converters():\n             base_to_url = super(ListConverter, self).to_url\n             return ','.join(base_to_url(x) for x in value)\n \n-    app = flask.Flask(__name__)\n     app.url_map.converters['list'] = ListConverter\n \n     @app.route('/<list:args>')\n     def index(args):\n         return '|'.join(args)\n \n-    c = app.test_client()\n-    assert c.get('/1,2,3').data == b'1|2|3'\n+    assert client.get('/1,2,3').data == b'1|2|3'\n \n \n-def test_static_files():\n-    app = flask.Flask(__name__)\n-    app.testing = True\n-    rv = app.test_client().get('/static/index.html')\n+def test_static_files(app, client):\n+    rv = client.get('/static/index.html')\n     assert rv.status_code == 200\n     assert rv.data.strip() == b'<h1>Hello World!</h1>'\n     with app.test_request_context():\n@@ -1366,8 +1334,7 @@ def test_request_locals():\n     assert not flask.g\n \n \n-def test_test_app_proper_environ():\n-    app = flask.Flask(__name__)\n+def test_test_app_proper_environ(app, client):\n     app.config.update(\n         SERVER_NAME='localhost.localdomain:5000'\n     )\n@@ -1380,22 +1347,22 @@ def test_test_app_proper_environ():\n     def subdomain():\n         return 'Foo SubDomain'\n \n-    rv = app.test_client().get('/')\n+    rv = client.get('/')\n     assert rv.data == b'Foo'\n \n-    rv = app.test_client().get('/', 'http://localhost.localdomain:5000')\n+    rv = client.get('/', 'http://localhost.localdomain:5000')\n     assert rv.data == b'Foo'\n \n-    rv = app.test_client().get('/', 'https://localhost.localdomain:5000')\n+    rv = client.get('/', 'https://localhost.localdomain:5000')\n     assert rv.data == b'Foo'\n \n     app.config.update(SERVER_NAME='localhost.localdomain')\n-    rv = app.test_client().get('/', 'https://localhost.localdomain')\n+    rv = client.get('/', 'https://localhost.localdomain')\n     assert rv.data == b'Foo'\n \n     try:\n         app.config.update(SERVER_NAME='localhost.localdomain:443')\n-        rv = app.test_client().get('/', 'https://localhost.localdomain')\n+        rv = client.get('/', 'https://localhost.localdomain')\n         # Werkzeug 0.8\n         assert rv.status_code == 404\n     except ValueError as e:\n@@ -1408,7 +1375,7 @@ def test_test_app_proper_environ():\n \n     try:\n         app.config.update(SERVER_NAME='localhost.localdomain')\n-        rv = app.test_client().get('/', 'http://foo.localhost')\n+        rv = client.get('/', 'http://foo.localhost')\n         # Werkzeug 0.8\n         assert rv.status_code == 404\n     except ValueError as e:\n@@ -1419,26 +1386,24 @@ def test_test_app_proper_environ():\n             \"server name from the WSGI environment ('foo.localhost')\"\n         )\n \n-    rv = app.test_client().get('/', 'http://foo.localhost.localdomain')\n+    rv = client.get('/', 'http://foo.localhost.localdomain')\n     assert rv.data == b'Foo SubDomain'\n \n \n-def test_exception_propagation():\n+def test_exception_propagation(app, client):\n     def apprunner(config_key):\n-        app = flask.Flask(__name__)\n         app.config['LOGGER_HANDLER_POLICY'] = 'never'\n \n         @app.route('/')\n         def index():\n             1 // 0\n \n-        c = app.test_client()\n         if config_key is not None:\n             app.config[config_key] = True\n             with pytest.raises(Exception):\n-                c.get('/')\n+                client.get('/')\n         else:\n-            assert c.get('/').status_code == 500\n+            assert client.get('/').status_code == 500\n \n     # we have to run this test in an isolated thread because if the\n     # debug flag is set to true and an exception happens the context is\n@@ -1455,21 +1420,19 @@ def test_exception_propagation():\n @pytest.mark.parametrize('use_reloader', [True, False])\n @pytest.mark.parametrize('propagate_exceptions', [None, True, False])\n def test_werkzeug_passthrough_errors(monkeypatch, debug, use_debugger,\n-                                     use_reloader, propagate_exceptions):\n+                                     use_reloader, propagate_exceptions, app):\n     rv = {}\n \n     # Mocks werkzeug.serving.run_simple method\n     def run_simple_mock(*args, **kwargs):\n         rv['passthrough_errors'] = kwargs.get('passthrough_errors')\n \n-    app = flask.Flask(__name__)\n     monkeypatch.setattr(werkzeug.serving, 'run_simple', run_simple_mock)\n     app.config['PROPAGATE_EXCEPTIONS'] = propagate_exceptions\n     app.run(debug=debug, use_debugger=use_debugger, use_reloader=use_reloader)\n \n \n-def test_max_content_length():\n-    app = flask.Flask(__name__)\n+def test_max_content_length(app, client):\n     app.config['MAX_CONTENT_LENGTH'] = 64\n \n     @app.before_request\n@@ -1486,13 +1449,11 @@ def test_max_content_length():\n     def catcher(error):\n         return '42'\n \n-    c = app.test_client()\n-    rv = c.post('/accept', data={'myfile': 'foo' * 100})\n+    rv = client.post('/accept', data={'myfile': 'foo' * 100})\n     assert rv.data == b'42'\n \n \n-def test_url_processors():\n-    app = flask.Flask(__name__)\n+def test_url_processors(app, client):\n \n     @app.url_defaults\n     def add_language_code(endpoint, values):\n@@ -1516,15 +1477,12 @@ def test_url_processors():\n     def something_else():\n         return flask.url_for('about', lang_code='en')\n \n-    c = app.test_client()\n-\n-    assert c.get('/de/').data == b'/de/about'\n-    assert c.get('/de/about').data == b'/foo'\n-    assert c.get('/foo').data == b'/en/about'\n+    assert client.get('/de/').data == b'/de/about'\n+    assert client.get('/de/about').data == b'/foo'\n+    assert client.get('/foo').data == b'/en/about'\n \n \n-def test_inject_blueprint_url_defaults():\n-    app = flask.Flask(__name__)\n+def test_inject_blueprint_url_defaults(app):\n     bp = flask.Blueprint('foo.bar.baz', __name__,\n                          template_folder='template')\n \n@@ -1549,21 +1507,16 @@ def test_inject_blueprint_url_defaults():\n     assert url == expected\n \n \n-def test_nonascii_pathinfo():\n-    app = flask.Flask(__name__)\n-    app.testing = True\n-\n+def test_nonascii_pathinfo(app, client):\n     @app.route(u'/киртест')\n     def index():\n         return 'Hello World!'\n \n-    c = app.test_client()\n-    rv = c.get(u'/киртест')\n+    rv = client.get(u'/киртест')\n     assert rv.data == b'Hello World!'\n \n \n-def test_debug_mode_complains_after_first_request():\n-    app = flask.Flask(__name__)\n+def test_debug_mode_complains_after_first_request(app, client):\n     app.debug = True\n \n     @app.route('/')\n@@ -1571,7 +1524,7 @@ def test_debug_mode_complains_after_first_request():\n         return 'Awesome'\n \n     assert not app.got_first_request\n-    assert app.test_client().get('/').data == b'Awesome'\n+    assert client.get('/').data == b'Awesome'\n     with pytest.raises(AssertionError) as e:\n         @app.route('/foo')\n         def broken():\n@@ -1584,39 +1537,34 @@ def test_debug_mode_complains_after_first_request():\n     def working():\n         return 'Meh'\n \n-    assert app.test_client().get('/foo').data == b'Meh'\n+    assert client.get('/foo').data == b'Meh'\n     assert app.got_first_request\n \n \n-def test_before_first_request_functions():\n+def test_before_first_request_functions(app, client):\n     got = []\n-    app = flask.Flask(__name__)\n \n     @app.before_first_request\n     def foo():\n         got.append(42)\n \n-    c = app.test_client()\n-    c.get('/')\n+    client.get('/')\n     assert got == [42]\n-    c.get('/')\n+    client.get('/')\n     assert got == [42]\n     assert app.got_first_request\n \n \n-def test_before_first_request_functions_concurrent():\n+def test_before_first_request_functions_concurrent(app, client):\n     got = []\n-    app = flask.Flask(__name__)\n \n     @app.before_first_request\n     def foo():\n         time.sleep(0.2)\n         got.append(42)\n \n-    c = app.test_client()\n-\n     def get_and_assert():\n-        c.get(\"/\")\n+        client.get(\"/\")\n         assert got == [42]\n \n     t = Thread(target=get_and_assert)\n@@ -1626,32 +1574,30 @@ def test_before_first_request_functions_concurrent():\n     assert app.got_first_request\n \n \n-def test_routing_redirect_debugging():\n-    app = flask.Flask(__name__)\n+def test_routing_redirect_debugging(app, client):\n     app.debug = True\n \n     @app.route('/foo/', methods=['GET', 'POST'])\n     def foo():\n         return 'success'\n \n-    with app.test_client() as c:\n+    with client:\n         with pytest.raises(AssertionError) as e:\n-            c.post('/foo', data={})\n+            client.post('/foo', data={})\n         assert 'http://localhost/foo/' in str(e)\n         assert ('Make sure to directly send '\n                 'your POST-request to this URL') in str(e)\n \n-        rv = c.get('/foo', data={}, follow_redirects=True)\n+        rv = client.get('/foo', data={}, follow_redirects=True)\n         assert rv.data == b'success'\n \n     app.debug = False\n-    with app.test_client() as c:\n-        rv = c.post('/foo', data={}, follow_redirects=True)\n+    with client:\n+        rv = client.post('/foo', data={}, follow_redirects=True)\n         assert rv.data == b'success'\n \n \n-def test_route_decorator_custom_endpoint():\n-    app = flask.Flask(__name__)\n+def test_route_decorator_custom_endpoint(app, client):\n     app.debug = True\n \n     @app.route('/foo/')\n@@ -1671,24 +1617,21 @@ def test_route_decorator_custom_endpoint():\n         assert flask.url_for('bar') == '/bar/'\n         assert flask.url_for('123') == '/bar/123'\n \n-    c = app.test_client()\n-    assert c.get('/foo/').data == b'foo'\n-    assert c.get('/bar/').data == b'bar'\n-    assert c.get('/bar/123').data == b'123'\n+    assert client.get('/foo/').data == b'foo'\n+    assert client.get('/bar/').data == b'bar'\n+    assert client.get('/bar/123').data == b'123'\n \n \n-def test_preserve_only_once():\n-    app = flask.Flask(__name__)\n+def test_preserve_only_once(app, client):\n     app.debug = True\n \n     @app.route('/fail')\n     def fail_func():\n         1 // 0\n \n-    c = app.test_client()\n     for x in range(3):\n         with pytest.raises(ZeroDivisionError):\n-            c.get('/fail')\n+            client.get('/fail')\n \n     assert flask._request_ctx_stack.top is not None\n     assert flask._app_ctx_stack.top is not None\n\n@@ -718,17 +718,21 @@ def test_template_global(app):\n         rv = flask.render_template_string('{{ get_answer() }}')\n         assert rv == '42'\n \n+\n def test_request_processing(app, client):\n     bp = flask.Blueprint('bp', __name__)\n     evts = []\n+\n     @bp.before_request\n     def before_bp():\n         evts.append('before')\n+\n     @bp.after_request\n     def after_bp(response):\n         response.data += b'|after'\n         evts.append('after')\n         return response\n+\n     @bp.teardown_request\n     def teardown_bp(exc):\n         evts.append('teardown')\n@@ -745,6 +749,7 @@ def test_request_processing(app, client):\n     assert rv.data == b'request|after'\n     assert evts == ['before', 'after', 'teardown']\n \n+\n def test_app_request_processing(app, client):\n     bp = flask.Blueprint('bp', __name__)\n     evts = []\n@@ -752,14 +757,17 @@ def test_app_request_processing(app, client):\n     @bp.before_app_first_request\n     def before_first_request():\n         evts.append('first')\n+\n     @bp.before_app_request\n     def before_app():\n         evts.append('before')\n+\n     @bp.after_app_request\n     def after_app(response):\n         response.data += b'|after'\n         evts.append('after')\n         return response\n+\n     @bp.teardown_app_request\n     def teardown_app(exc):\n         evts.append('teardown')\n\n@@ -40,22 +40,27 @@ def test_cli_name(test_apps):\n def test_find_best_app(test_apps):\n     \"\"\"Test if `find_best_app` behaves as expected with different combinations of input.\"\"\"\n     script_info = ScriptInfo()\n+\n     class Module:\n         app = Flask('appname')\n+\n     assert find_best_app(script_info, Module) == Module.app\n \n     class Module:\n         application = Flask('appname')\n+\n     assert find_best_app(script_info, Module) == Module.application\n \n     class Module:\n         myapp = Flask('appname')\n+\n     assert find_best_app(script_info, Module) == Module.myapp\n \n     class Module:\n         @staticmethod\n         def create_app():\n             return Flask('appname')\n+\n     assert isinstance(find_best_app(script_info, Module), Flask)\n     assert find_best_app(script_info, Module).name == 'appname'\n \n@@ -63,6 +68,7 @@ def test_find_best_app(test_apps):\n         @staticmethod\n         def create_app(foo):\n             return Flask('appname')\n+\n     assert isinstance(find_best_app(script_info, Module), Flask)\n     assert find_best_app(script_info, Module).name == 'appname'\n \n@@ -70,6 +76,7 @@ def test_find_best_app(test_apps):\n         @staticmethod\n         def create_app(foo=None, script_info=None):\n             return Flask('appname')\n+\n     assert isinstance(find_best_app(script_info, Module), Flask)\n     assert find_best_app(script_info, Module).name == 'appname'\n \n@@ -77,36 +84,44 @@ def test_find_best_app(test_apps):\n         @staticmethod\n         def make_app():\n             return Flask('appname')\n+\n     assert isinstance(find_best_app(script_info, Module), Flask)\n     assert find_best_app(script_info, Module).name == 'appname'\n \n     class Module:\n         myapp = Flask('appname1')\n+\n         @staticmethod\n         def create_app():\n             return Flask('appname2')\n+\n     assert find_best_app(script_info, Module) == Module.myapp\n \n     class Module:\n         myapp = Flask('appname1')\n+\n         @staticmethod\n         def create_app():\n             return Flask('appname2')\n+\n     assert find_best_app(script_info, Module) == Module.myapp\n \n     class Module:\n         pass\n+\n     pytest.raises(NoAppException, find_best_app, script_info, Module)\n \n     class Module:\n         myapp1 = Flask('appname1')\n         myapp2 = Flask('appname2')\n+\n     pytest.raises(NoAppException, find_best_app, script_info, Module)\n \n     class Module:\n         @staticmethod\n         def create_app(foo, bar):\n             return Flask('appname2')\n+\n     pytest.raises(NoAppException, find_best_app, script_info, Module)\n \n \n@@ -163,10 +178,13 @@ def test_get_version(test_apps, capsys):\n     \"\"\"Test of get_version.\"\"\"\n     from flask import __version__ as flask_ver\n     from sys import version as py_ver\n+\n     class MockCtx(object):\n         resilient_parsing = False\n         color = None\n+\n         def exit(self): return\n+\n     ctx = MockCtx()\n     get_version(ctx, None, \"test\")\n     out, err = capsys.readouterr()\n@@ -191,6 +209,7 @@ def test_scriptinfo(test_apps):\n \n def test_with_appcontext(runner):\n     \"\"\"Test of with_appcontext.\"\"\"\n+\n     @click.command()\n     @with_appcontext\n     def testcmd():\n@@ -205,6 +224,7 @@ def test_with_appcontext(runner):\n \n def test_appgroup(runner):\n     \"\"\"Test of with_appcontext.\"\"\"\n+\n     @click.group(cls=AppGroup)\n     def cli():\n         pass\n@@ -234,6 +254,7 @@ def test_appgroup(runner):\n \n def test_flaskgroup(runner):\n     \"\"\"Test FlaskGroup.\"\"\"\n+\n     def create_app(info):\n         return Flask(\"flaskgroup\")\n \n@@ -252,6 +273,7 @@ def test_flaskgroup(runner):\n \n def test_print_exceptions(runner):\n     \"\"\"Print the stacktrace if the CLI.\"\"\"\n+\n     def create_app(info):\n         raise Exception(\"oh no\")\n         return Flask(\"flaskgroup\")\n\n@@ -17,7 +17,6 @@ import flask\n class TestRequestDeprecation(object):\n     def test_request_json(self, recwarn, app, client):\n         \"\"\"Request.json is deprecated\"\"\"\n-        app.testing = True\n \n         @app.route('/', methods=['POST'])\n         def index():\n@@ -30,7 +29,6 @@ class TestRequestDeprecation(object):\n \n     def test_request_module(self, recwarn, app, client):\n         \"\"\"Request.module is deprecated\"\"\"\n-        app.testing = True\n \n         @app.route('/')\n         def index():\n\n@@ -85,7 +85,6 @@ class TestJSON(object):\n         assert rv.data == b'foo'\n \n     def test_json_body_encoding(self, app, client):\n-        app.testing = True\n \n         @app.route('/')\n         def index():\n@@ -241,7 +240,6 @@ class TestJSON(object):\n                     return X(obj['_foo'])\n                 return obj\n \n-        app.testing = True\n         app.json_encoder = MyEncoder\n         app.json_decoder = MyDecoder\n \n@@ -285,7 +283,6 @@ class TestJSON(object):\n         def index():\n             return flask.json.dumps(flask.request.get_json()['x'])\n \n-        app.testing = True\n         app.register_blueprint(bp)\n \n         rv = client.post('/bp', data=flask.json.dumps({\n@@ -293,11 +290,10 @@ class TestJSON(object):\n         }), content_type='application/json')\n         assert rv.data == b'\"<42>\"'\n \n-    def test_modified_url_encoding(self, app):\n+    def test_modified_url_encoding(self, app, client):\n         class ModifiedRequest(flask.Request):\n             url_charset = 'euc-kr'\n \n-        app.testing = True\n         app.request_class = ModifiedRequest\n         app.url_map.charset = 'euc-kr'\n \n@@ -305,7 +301,7 @@ class TestJSON(object):\n         def index():\n             return flask.request.args['foo']\n \n-        rv = app.test_client().get(u'/?foo=정상처리'.encode('euc-kr'))\n+        rv = client.get(u'/?foo=정상처리'.encode('euc-kr'))\n         assert rv.status_code == 200\n         assert rv.data == u'정상처리'.encode('utf-8')\n \n@@ -313,7 +309,6 @@ class TestJSON(object):\n         test_modified_url_encoding = None\n \n     def test_json_key_sorting(self, app, client):\n-        app.testing = True\n         app.debug = True\n \n         assert app.config['JSON_SORT_KEYS'] == True\n@@ -538,7 +533,6 @@ class TestSendfile(object):\n         rv.close()\n \n     def test_attachment(self, app, req_ctx):\n-        app = flask.Flask(__name__)\n \n         with open(os.path.join(app.root_path, 'static/index.html')) as f:\n             rv = flask.send_file(f, as_attachment=True,\n@@ -619,7 +613,6 @@ class TestSendfile(object):\n             rv.close()\n \n     def test_send_from_directory(self, app, req_ctx):\n-        app.testing = True\n         app.root_path = os.path.join(os.path.dirname(__file__),\n                                      'test_apps', 'subdomaintestmodule')\n         rv = flask.send_from_directory('static', 'hello.txt')\n@@ -628,7 +621,6 @@ class TestSendfile(object):\n         rv.close()\n \n     def test_send_from_directory_bad_request(self, app, req_ctx):\n-        app.testing = True\n         app.root_path = os.path.join(os.path.dirname(__file__),\n                                      'test_apps', 'subdomaintestmodule')\n \n@@ -645,8 +637,7 @@ class TestLogging(object):\n         app.logger_name = __name__ + '/test_logger_cache'\n         assert app.logger is not logger1\n \n-    def test_debug_log(self, capsys):\n-        app = flask.Flask(__name__)\n+    def test_debug_log(self, capsys, app, client):\n         app.debug = True\n \n         @app.route('/')\n@@ -659,8 +650,8 @@ class TestLogging(object):\n         def exc():\n             1 // 0\n \n-        with app.test_client() as c:\n-            c.get('/')\n+        with client:\n+            client.get('/')\n             out, err = capsys.readouterr()\n             assert 'WARNING in test_helpers [' in err\n             assert os.path.basename(__file__.rsplit('.', 1)[0] + '.py') in err\n@@ -668,7 +659,7 @@ class TestLogging(object):\n             assert 'this is a debug statement' in err\n \n             with pytest.raises(ZeroDivisionError):\n-                c.get('/exc')\n+                client.get('/exc')\n \n     def test_debug_log_override(self, app):\n         app.debug = True\n@@ -676,7 +667,7 @@ class TestLogging(object):\n         app.logger.level = 10\n         assert app.logger.level == 10\n \n-    def test_exception_logging(self, app):\n+    def test_exception_logging(self, app, client):\n         out = StringIO()\n         app.config['LOGGER_HANDLER_POLICY'] = 'never'\n         app.logger_name = 'flask_tests/test_exception_logging'\n@@ -687,7 +678,7 @@ class TestLogging(object):\n         def index():\n             1 // 0\n \n-        rv = app.test_client().get('/')\n+        rv = client.get('/')\n         assert rv.status_code == 500\n         assert b'Internal Server Error' in rv.data\n \n@@ -808,7 +799,6 @@ class TestNoImports(object):\n \n class TestStreaming(object):\n     def test_streaming_with_context(self, app, client):\n-        app.testing = True\n \n         @app.route('/')\n         def index():\n@@ -823,7 +813,6 @@ class TestStreaming(object):\n         assert rv.data == b'Hello World!'\n \n     def test_streaming_with_context_as_decorator(self, app, client):\n-        app.testing = True\n \n         @app.route('/')\n         def index():\n@@ -839,7 +828,6 @@ class TestStreaming(object):\n         assert rv.data == b'Hello World!'\n \n     def test_streaming_with_context_and_custom_close(self, app, client):\n-        app.testing = True\n         called = []\n \n         class Wrapper(object):\n\n@@ -76,11 +76,9 @@ def test_safe_join_toplevel_pardir():\n         safe_join('/foo', '..')\n \n \n-def test_aborting():\n+def test_aborting(app):\n     class Foo(Exception):\n         whatever = 42\n-    app = flask.Flask(__name__)\n-    app.testing = True\n \n     @app.errorhandler(Foo)\n     def handle_foo(e):\n\n@@ -18,15 +18,13 @@ except ImportError:\n \n import flask\n \n-\n pytestmark = pytest.mark.skipif(\n     blinker is None,\n     reason='Signals require the blinker library.'\n )\n \n-def test_template_rendered():\n-    app = flask.Flask(__name__)\n \n+def test_template_rendered(app, client):\n     @app.route('/')\n     def index():\n         return flask.render_template('simple_template.html', whiskey=42)\n@@ -38,7 +36,7 @@ def test_template_rendered():\n \n     flask.template_rendered.connect(record, app)\n     try:\n-        app.test_client().get('/')\n+        client.get('/')\n         assert len(recorded) == 1\n         template, context = recorded[0]\n         assert template.name == 'simple_template.html'\n@@ -46,6 +44,7 @@ def test_template_rendered():\n     finally:\n         flask.template_rendered.disconnect(record, app)\n \n+\n def test_before_render_template():\n     app = flask.Flask(__name__)\n \n@@ -70,6 +69,7 @@ def test_before_render_template():\n     finally:\n         flask.before_render_template.disconnect(record, app)\n \n+\n def test_request_signals():\n     app = flask.Flask(__name__)\n     calls = []\n@@ -109,6 +109,7 @@ def test_request_signals():\n         flask.request_started.disconnect(before_request_signal, app)\n         flask.request_finished.disconnect(after_request_signal, app)\n \n+\n def test_request_exception_signal():\n     app = flask.Flask(__name__)\n     recorded = []\n@@ -128,6 +129,7 @@ def test_request_exception_signal():\n     finally:\n         flask.got_request_exception.disconnect(record, app)\n \n+\n def test_appcontext_signals():\n     app = flask.Flask(__name__)\n     recorded = []\n@@ -154,6 +156,7 @@ def test_appcontext_signals():\n         flask.appcontext_pushed.disconnect(record_push, app)\n         flask.appcontext_popped.disconnect(record_pop, app)\n \n+\n def test_flash_signal():\n     app = flask.Flask(__name__)\n     app.config['SECRET_KEY'] = 'secret'\n@@ -180,6 +183,7 @@ def test_flash_signal():\n     finally:\n         flask.message_flashed.disconnect(record, app)\n \n+\n def test_appcontext_tearing_down_signal():\n     app = flask.Flask(__name__)\n     recorded = []\n\n@@ -16,7 +16,7 @@ import logging\n from jinja2 import TemplateNotFound\n \n \n-def test_context_processing(app):\n+def test_context_processing(app, client):\n     @app.context_processor\n     def context_processor():\n         return {'injected_value': 42}\n@@ -25,7 +25,7 @@ def test_context_processing(app):\n     def index():\n         return flask.render_template('context_template.html', value=23)\n \n-    rv = app.test_client().get('/')\n+    rv = client.get('/')\n     assert rv.data == b'<p>23|42'\n \n \n@@ -253,7 +253,7 @@ def test_add_template_test_with_name(app):\n     assert app.jinja_env.tests['boolean'](False)\n \n \n-def test_template_test_with_template(app):\n+def test_template_test_with_template(app, client):\n     @app.template_test()\n     def boolean(value):\n         return isinstance(value, bool)\n@@ -262,7 +262,7 @@ def test_template_test_with_template(app):\n     def index():\n         return flask.render_template('template_test.html', value=False)\n \n-    rv = app.test_client().get('/')\n+    rv = client.get('/')\n     assert b'Success!' in rv.data\n \n \n\n@@ -38,14 +38,12 @@ def test_environ_defaults(app, client, app_ctx, req_ctx):\n \n     ctx = app.test_request_context()\n     assert ctx.request.url == 'http://localhost/'\n-    with app.test_client() as c:\n-        rv = c.get('/')\n+    with client:\n+        rv = client.get('/')\n         assert rv.data == b'http://localhost/'\n \n \n def test_environ_base_default(app, client, app_ctx):\n-    app.testing = True\n-\n     @app.route('/')\n     def index():\n         flask.g.user_agent = flask.request.headers[\"User-Agent\"]\n@@ -89,39 +87,39 @@ def test_redirect_keep_session(app, client, app_ctx):\n     def get_session():\n         return flask.session.get('data', '<missing>')\n \n-    with client as c:\n-        rv = c.get('/getsession')\n+    with client:\n+        rv = client.get('/getsession')\n         assert rv.data == b'<missing>'\n \n-        rv = c.get('/')\n+        rv = client.get('/')\n         assert rv.data == b'index'\n         assert flask.session.get('data') == 'foo'\n-        rv = c.post('/', data={}, follow_redirects=True)\n+        rv = client.post('/', data={}, follow_redirects=True)\n         assert rv.data == b'foo'\n \n         # This support requires a new Werkzeug version\n-        if not hasattr(c, 'redirect_client'):\n+        if not hasattr(client, 'redirect_client'):\n             assert flask.session.get('data') == 'foo'\n \n-        rv = c.get('/getsession')\n+        rv = client.get('/getsession')\n         assert rv.data == b'foo'\n \n \n-def test_session_transactions(app):\n+def test_session_transactions(app, client):\n     app.secret_key = 'testing'\n \n     @app.route('/')\n     def index():\n         return text_type(flask.session['foo'])\n \n-    with app.test_client() as c:\n-        with c.session_transaction() as sess:\n+    with client:\n+        with client.session_transaction() as sess:\n             assert len(sess) == 0\n             sess['foo'] = [42]\n             assert len(sess) == 1\n-        rv = c.get('/')\n+        rv = client.get('/')\n         assert rv.data == b'[42]'\n-        with c.session_transaction() as sess:\n+        with client.session_transaction() as sess:\n             assert len(sess) == 1\n             assert sess['foo'] == [42]\n \n@@ -146,6 +144,7 @@ def test_session_transactions_keep_context(app, client, req_ctx):\n     with client.session_transaction():\n         assert req is flask.request._get_current_object()\n \n+\n def test_session_transaction_needs_cookies(app):\n     c = app.test_client(use_cookies=False)\n     with pytest.raises(RuntimeError) as e:\n@@ -154,9 +153,9 @@ def test_session_transaction_needs_cookies(app):\n     assert 'cookies' in str(e.value)\n \n \n-def test_test_client_context_binding():\n-    app = flask.Flask(__name__)\n+def test_test_client_context_binding(app, client):\n     app.config['LOGGER_HANDLER_POLICY'] = 'never'\n+    app.testing = False\n \n     @app.route('/')\n     def index():\n@@ -167,13 +166,13 @@ def test_test_client_context_binding():\n     def other():\n         1 // 0\n \n-    with app.test_client() as c:\n-        resp = c.get('/')\n+    with client:\n+        resp = client.get('/')\n         assert flask.g.value == 42\n         assert resp.data == b'Hello World!'\n         assert resp.status_code == 200\n \n-        resp = c.get('/other')\n+        resp = client.get('/other')\n         assert not hasattr(flask.g, 'value')\n         assert b'Internal Server Error' in resp.data\n         assert resp.status_code == 500\n@@ -187,58 +186,52 @@ def test_test_client_context_binding():\n         raise AssertionError('some kind of exception expected')\n \n \n-def test_reuse_client():\n-    app = flask.Flask(__name__)\n-    c = app.test_client()\n+def test_reuse_client(client):\n+    c = client\n \n     with c:\n-        assert c.get('/').status_code == 404\n+        assert client.get('/').status_code == 404\n \n     with c:\n-        assert c.get('/').status_code == 404\n+        assert client.get('/').status_code == 404\n \n \n-def test_test_client_calls_teardown_handlers():\n-    app = flask.Flask(__name__)\n+def test_test_client_calls_teardown_handlers(app, client):\n     called = []\n \n     @app.teardown_request\n     def remember(error):\n         called.append(error)\n \n-    with app.test_client() as c:\n+    with client:\n         assert called == []\n-        c.get('/')\n+        client.get('/')\n         assert called == []\n     assert called == [None]\n \n     del called[:]\n-    with app.test_client() as c:\n+    with client:\n         assert called == []\n-        c.get('/')\n+        client.get('/')\n         assert called == []\n-        c.get('/')\n+        client.get('/')\n         assert called == [None]\n     assert called == [None, None]\n \n \n-def test_full_url_request():\n-    app = flask.Flask(__name__)\n-    app.testing = True\n-\n+def test_full_url_request(app, client):\n     @app.route('/action', methods=['POST'])\n     def action():\n         return 'x'\n \n-    with app.test_client() as c:\n-        rv = c.post('http://domain.com/action?vodka=42', data={'gin': 43})\n+    with client:\n+        rv = client.post('http://domain.com/action?vodka=42', data={'gin': 43})\n         assert rv.status_code == 200\n         assert 'gin' in flask.request.form\n         assert 'vodka' in flask.request.args\n \n \n-def test_subdomain():\n-    app = flask.Flask(__name__)\n+def test_subdomain(app, client):\n     app.config['SERVER_NAME'] = 'example.com'\n \n     @app.route('/', subdomain='<company_id>')\n@@ -248,15 +241,14 @@ def test_subdomain():\n     with app.test_request_context():\n         url = flask.url_for('view', company_id='xxx')\n \n-    with app.test_client() as c:\n-        response = c.get(url)\n+    with client:\n+        response = client.get(url)\n \n     assert 200 == response.status_code\n     assert b'xxx' == response.data\n \n \n-def test_nosubdomain():\n-    app = flask.Flask(__name__)\n+def test_nosubdomain(app, client):\n     app.config['SERVER_NAME'] = 'example.com'\n \n     @app.route('/<company_id>')\n@@ -266,8 +258,8 @@ def test_nosubdomain():\n     with app.test_request_context():\n         url = flask.url_for('view', company_id='xxx')\n \n-    with app.test_client() as c:\n-        response = c.get(url)\n+    with client:\n+        response = client.get(url)\n \n     assert 200 == response.status_code\n     assert b'xxx' == response.data\n\n@@ -72,7 +72,7 @@ def test_view_patching(app):\n     common_test(app)\n \n \n-def test_view_inheritance(app):\n+def test_view_inheritance(app, client):\n     class Index(flask.views.MethodView):\n         def get(self):\n             return 'GET'\n@@ -85,13 +85,12 @@ def test_view_inheritance(app):\n             return 'DELETE'\n \n     app.add_url_rule('/', view_func=BetterIndex.as_view('index'))\n-    c = app.test_client()\n \n-    meths = parse_set_header(c.open('/', method='OPTIONS').headers['Allow'])\n+    meths = parse_set_header(client.open('/', method='OPTIONS').headers['Allow'])\n     assert sorted(meths) == ['DELETE', 'GET', 'HEAD', 'OPTIONS', 'POST']\n \n \n-def test_view_decorators(app):\n+def test_view_decorators(app, client):\n     def add_x_parachute(f):\n         def new_function(*args, **kwargs):\n             resp = flask.make_response(f(*args, **kwargs))\n@@ -107,8 +106,7 @@ def test_view_decorators(app):\n             return 'Awesome'\n \n     app.add_url_rule('/', view_func=Index.as_view('index'))\n-    c = app.test_client()\n-    rv = c.get('/')\n+    rv = client.get('/')\n     assert rv.headers['X-Parachute'] == 'awesome'\n     assert rv.data == b'Awesome'\n \n@@ -153,7 +151,7 @@ def test_view_provide_automatic_options_attr():\n     assert 'OPTIONS' in rv.allow\n \n \n-def test_implicit_head(app):\n+def test_implicit_head(app, client):\n     class Index(flask.views.MethodView):\n         def get(self):\n             return flask.Response('Blub', headers={\n@@ -161,16 +159,15 @@ def test_implicit_head(app):\n             })\n \n     app.add_url_rule('/', view_func=Index.as_view('index'))\n-    c = app.test_client()\n-    rv = c.get('/')\n+    rv = client.get('/')\n     assert rv.data == b'Blub'\n     assert rv.headers['X-Method'] == 'GET'\n-    rv = c.head('/')\n+    rv = client.head('/')\n     assert rv.data == b''\n     assert rv.headers['X-Method'] == 'HEAD'\n \n \n-def test_explicit_head(app):\n+def test_explicit_head(app, client):\n     class Index(flask.views.MethodView):\n         def get(self):\n             return 'GET'\n@@ -179,10 +176,9 @@ def test_explicit_head(app):\n             return flask.Response('', headers={'X-Method': 'HEAD'})\n \n     app.add_url_rule('/', view_func=Index.as_view('index'))\n-    c = app.test_client()\n-    rv = c.get('/')\n+    rv = client.get('/')\n     assert rv.data == b'GET'\n-    rv = c.head('/')\n+    rv = client.head('/')\n     assert rv.data == b''\n     assert rv.headers['X-Method'] == 'HEAD'\n \n@@ -205,7 +201,7 @@ def test_endpoint_override(app):\n     common_test(app)\n \n \n-def test_multiple_inheritance(app):\n+def test_multiple_inheritance(app, client):\n     class GetView(flask.views.MethodView):\n         def get(self):\n             return 'GET'\n@@ -219,13 +215,12 @@ def test_multiple_inheritance(app):\n \n     app.add_url_rule('/', view_func=GetDeleteView.as_view('index'))\n \n-    c = app.test_client()\n-    assert c.get('/').data == b'GET'\n-    assert c.delete('/').data == b'DELETE'\n+    assert client.get('/').data == b'GET'\n+    assert client.delete('/').data == b'DELETE'\n     assert sorted(GetDeleteView.methods) == ['DELETE', 'GET']\n \n \n-def test_remove_method_from_parent(app):\n+def test_remove_method_from_parent(app, client):\n     class GetView(flask.views.MethodView):\n         def get(self):\n             return 'GET'\n@@ -239,7 +234,6 @@ def test_remove_method_from_parent(app):\n \n     app.add_url_rule('/', view_func=View.as_view('index'))\n \n-    c = app.test_client()\n-    assert c.get('/').data == b'GET'\n-    assert c.post('/').status_code == 405\n+    assert client.get('/').data == b'GET'\n+    assert client.post('/').status_code == 405\n     assert sorted(View.methods) == ['GET']\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
