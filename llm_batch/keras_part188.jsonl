{"custom_id": "keras#bac16379a2452f975946a5007304083a1cd3c224", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 2 | Files Changed: 2 | Hunks: 2 | Methods Changed: 2 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 697 | Contributors (this commit): 4 | Commits (past 90d): 6 | Contributors (cumulative): 8 | DMM Complexity: None\n\nDIFF:\n@@ -59,7 +59,7 @@ def VGG16(include_top=True, weights='imagenet',\n         input_shape: optional shape tuple, only to be specified\n             if `include_top` is False (otherwise the input shape\n             has to be `(224, 224, 3)` (with `channels_last` data format)\n-            or `(3, 224, 244)` (with `channels_first` data format).\n+            or `(3, 224, 224)` (with `channels_first` data format).\n             It should have exactly 3 inputs channels,\n             and width and height should be no smaller than 48.\n             E.g. `(200, 200, 3)` would be one valid value.\n\n@@ -59,7 +59,7 @@ def VGG19(include_top=True, weights='imagenet',\n         input_shape: optional shape tuple, only to be specified\n             if `include_top` is False (otherwise the input shape\n             has to be `(224, 224, 3)` (with `channels_last` data format)\n-            or `(3, 224, 244)` (with `channels_first` data format).\n+            or `(3, 224, 224)` (with `channels_first` data format).\n             It should have exactly 3 inputs channels,\n             and width and height should be no smaller than 48.\n             E.g. `(200, 200, 3)` would be one valid value.\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "keras#c1a1c33ef962c6fdf379c3b45fe30bb7f0d9496d", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 440 | Contributors (this commit): 10 | Commits (past 90d): 4 | Contributors (cumulative): 10 | DMM Complexity: None\n\nDIFF:\n@@ -23,7 +23,7 @@ else:\n def text_to_word_sequence(text,\n                           filters='!\"#$%&()*+,-./:;<=>?@[\\\\]^_`{|}~\\t\\n',\n                           lower=True, split=\" \"):\n-    \"\"\"Converts a text to a sequence of word indices.\n+    \"\"\"Converts a text to a sequence of words (or tokens).\n \n     # Arguments\n         text: Input text (string).\n@@ -32,7 +32,7 @@ def text_to_word_sequence(text,\n         split: Sentence split marker (string).\n \n     # Returns\n-        A list of integer word indices.\n+        A list of words (or tokens).\n     \"\"\"\n     if lower:\n         text = text.lower()\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "keras#cf57d28452a901e3400c706685d416037caeadc4", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 20 | Lines Deleted: 10 | Files Changed: 2 | Hunks: 9 | Methods Changed: 7 | Complexity Δ (Sum/Max): 5/3 | Churn Δ: 30 | Churn Cumulative: 1063 | Contributors (this commit): 21 | Commits (past 90d): 14 | Contributors (cumulative): 23 | DMM Complexity: 0.8571428571428571\n\nDIFF:\n@@ -36,8 +36,10 @@ if sys.version_info[0] == 2:\n             data: `data` argument passed to `urlopen`.\n         \"\"\"\n         def chunk_read(response, chunk_size=8192, reporthook=None):\n-            total_size = response.info().get('Content-Length').strip()\n-            total_size = int(total_size)\n+            content_type = response.info().get('Content-Length')\n+            total_size = -1\n+            if content_type is not None:\n+                total_size = int(content_type.strip())\n             count = 0\n             while 1:\n                 chunk = response.read(chunk_size)\n@@ -186,19 +188,24 @@ def get_file(fname,\n \n     if download:\n         print('Downloading data from', origin)\n+\n+        class progress_tracker:\n+            # Maintain progbar for the lifetime of download.\n+            # This design was chosen for Python 2.7 compatibility.\n             progbar = None\n \n-        def dl_progress(count, block_size, total_size, progbar=None):\n-            if progbar is None:\n-                progbar = Progbar(total_size)\n+        def dl_progress(count, block_size, total_size):\n+            if progress_tracker.progbar is None:\n+                if total_size is -1:\n+                    total_size = None\n+                progress_tracker.progbar = Progbar(total_size)\n             else:\n-                progbar.update(count * block_size)\n+                progress_tracker.progbar.update(count * block_size)\n \n         error_msg = 'URL fetch failure on {}: {} -- {}'\n         try:\n             try:\n-                urlretrieve(origin, fpath,\n-                            functools.partial(dl_progress, progbar=progbar))\n+                urlretrieve(origin, fpath, dl_progress)\n             except URLError as e:\n                 raise Exception(error_msg.format(origin, e.errno, e.reason))\n             except HTTPError as e:\n\n@@ -208,12 +208,14 @@ class Progbar(object):\n     \"\"\"Displays a progress bar.\n \n     # Arguments\n-        target: Total number of steps expected.\n+        target: Total number of steps expected, None if unknown.\n         interval: Minimum visual progress update interval (in seconds).\n     \"\"\"\n \n     def __init__(self, target, width=30, verbose=1, interval=0.05):\n         self.width = width\n+        if target is None:\n+            target = -1\n         self.target = target\n         self.sum_values = {}\n         self.unique_values = []\n@@ -253,6 +255,7 @@ class Progbar(object):\n             sys.stdout.write('\\b' * prev_total_width)\n             sys.stdout.write('\\r')\n \n+            if self.target is not -1:\n                 numdigits = int(np.floor(np.log10(self.target))) + 1\n                 barstr = '%%%dd/%%%dd [' % (numdigits, numdigits)\n                 bar = barstr % (current, self.target)\n@@ -275,7 +278,7 @@ class Progbar(object):\n                 time_per_unit = 0\n             eta = time_per_unit * (self.target - current)\n             info = ''\n-            if current < self.target:\n+            if current < self.target and self.target is not -1:\n                 info += ' - ETA: %ds' % eta\n             else:\n                 info += ' - %ds' % (now - self.start)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "keras#e74a37438b5389ae19eb61b431859f9789100874", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 20 | Lines Deleted: 12 | Files Changed: 4 | Hunks: 10 | Methods Changed: 7 | Complexity Δ (Sum/Max): 3/3 | Churn Δ: 32 | Churn Cumulative: 26170 | Contributors (this commit): 168 | Commits (past 90d): 131 | Contributors (cumulative): 258 | DMM Complexity: 0.5\n\nDIFF:\n@@ -7,6 +7,7 @@ from tensorflow.python.ops import ctc_ops as ctc\n from tensorflow.python.ops import variables\n \n from collections import defaultdict\n+import inspect\n import numpy as np\n import os\n import warnings\n@@ -2227,7 +2228,7 @@ class Function(object):\n         name: a name to help users identify what this function does.\n     \"\"\"\n \n-    def __init__(self, inputs, outputs, updates=None, name=None):\n+    def __init__(self, inputs, outputs, updates=None, name=None, **session_kwargs):\n         updates = updates or []\n         if not isinstance(inputs, (list, tuple)):\n             raise TypeError('`inputs` to a TensorFlow backend function '\n@@ -2251,6 +2252,7 @@ class Function(object):\n                     updates_ops.append(update)\n             self.updates_op = tf.group(*updates_ops)\n         self.name = name\n+        self.session_kwargs = session_kwargs\n \n     def __call__(self, inputs):\n         if not isinstance(inputs, (list, tuple)):\n@@ -2265,7 +2267,8 @@ class Function(object):\n             feed_dict[tensor] = value\n         session = get_session()\n         updated = session.run(self.outputs + [self.updates_op],\n-                              feed_dict=feed_dict)\n+                              feed_dict=feed_dict,\n+                              **self.session_kwargs)\n         return updated[:len(self.outputs)]\n \n \n@@ -2276,18 +2279,21 @@ def function(inputs, outputs, updates=None, **kwargs):\n         inputs: List of placeholder tensors.\n         outputs: List of output tensors.\n         updates: List of update ops.\n-        **kwargs: Not used with TensorFlow.\n+        **kwargs: Passed to `tf.Session.run`.\n \n     # Returns\n         Output values as Numpy arrays.\n+\n+    # Raises\n+        ValueError: if invalid kwargs are passed in.\n     \"\"\"\n     if kwargs:\n-        msg = [\n-            'Expected no kwargs, you passed %s' % len(kwargs),\n-            'kwargs passed to function are ignored with Tensorflow backend'\n-        ]\n-        warnings.warn('\\n'.join(msg))\n-    return Function(inputs, outputs, updates=updates)\n+        for key in kwargs.keys():\n+            if (key not in inspect.getargspec(tf.Session.run)[0] and\n+                    key not in inspect.getargspec(Function.__init__)[0]):\n+                msg = 'Invalid argument \"%s\" passed to K.function with Tensorflow backend' % key\n+                raise ValueError(msg)\n+    return Function(inputs, outputs, updates=updates, **kwargs)\n \n \n def gradients(loss, variables):\n\n@@ -1201,7 +1201,7 @@ def function(inputs, outputs, updates=[], **kwargs):\n         function_args = inspect.getargspec(theano.function)[0]\n         for key in kwargs.keys():\n             if key not in function_args:\n-                msg = 'Invalid argument \"%s\" passed to K.function' % key\n+                msg = 'Invalid argument \"%s\" passed to K.function with Theano backend' % key\n                 raise ValueError(msg)\n     return Function(inputs, outputs, updates=updates, **kwargs)\n \n\n@@ -709,7 +709,8 @@ class Model(Container):\n                 `sample_weight_mode` on each output by passing a\n                 dictionary or a list of modes.\n             **kwargs: when using the Theano backend, these arguments\n-                are passed into K.function. Ignored for Tensorflow backend.\n+                are passed into K.function. When using the Tensorflow backend,\n+                these arguments are passed into `tf.Session.run`.\n \n         # Raises\n             ValueError: In case of invalid arguments for\n\n@@ -765,7 +765,8 @@ class Sequential(Model):\n                 sample weighting (2D weights), set this to \"temporal\".\n                 \"None\" defaults to sample-wise weights (1D).\n             **kwargs: for Theano backend, these are passed into K.function.\n-                Ignored for Tensorflow backend.\n+                When using the Tensorflow backend, these are passed into\n+                `tf.Session.run`.\n \n         # Example\n             ```python\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "keras#85fe6427a50f6def7777413a4bc8b286f7ab8f8d", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 16 | Lines Deleted: 1 | Files Changed: 2 | Hunks: 3 | Methods Changed: 2 | Complexity Δ (Sum/Max): 2/1 | Churn Δ: 17 | Churn Cumulative: 80 | Contributors (this commit): 3 | Commits (past 90d): 5 | Contributors (cumulative): 6 | DMM Complexity: 1.0\n\nDIFF:\n@@ -33,6 +33,12 @@ def hinge(y_true, y_pred):\n     return K.mean(K.maximum(1. - y_true * y_pred, 0.), axis=-1)\n \n \n+def categorical_hinge(y_true, y_pred):\n+    pos = K.sum(y_true * y_pred, axis=-1)\n+    neg = K.max((1.0 - y_true) * y_pred, axis=-1)\n+    return K.mean(K.maximum(0.0, neg - pos + 1), axis=-1)\n+\n+\n def logcosh(y_true, y_pred):\n     def cosh(x):\n         return (K.exp(x) + K.exp(-x)) / 2\n\n@@ -10,7 +10,8 @@ allobj = [losses.mean_squared_error,\n           losses.mean_absolute_percentage_error,\n           losses.mean_squared_logarithmic_error,\n           losses.squared_hinge,\n-          losses.hinge, losses.categorical_crossentropy,\n+          losses.hinge,\n+          losses.categorical_crossentropy,\n           losses.binary_crossentropy,\n           losses.kullback_leibler_divergence,\n           losses.poisson,\n@@ -45,5 +46,13 @@ def test_cce_one_hot():\n     assert K.eval(losses.sparse_categorical_crossentropy(y_a, y_b)).shape == (6,)\n \n \n+def test_categorical_hinge():\n+    y_pred = K.variable(np.array([[0.3, 0.2, 0.1], [0.1, 0.2, 0.7]]))\n+    y_true = K.variable(np.array([[0, 1, 0], [1, 0, 0]]))\n+    expected_loss = ((0.3 - 0.2 + 1) + (0.7 - 0.1 + 1)) / 2.0\n+    loss = K.eval(losses.categorical_hinge(y_true, y_pred))\n+    assert np.isclose(expected_loss, loss)\n+\n+\n if __name__ == '__main__':\n     pytest.main([__file__])\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "keras#7f09d45efb7d0d0e8f43b9c2975caa6be0fda00d", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 7930 | Contributors (this commit): 37 | Commits (past 90d): 44 | Contributors (cumulative): 37 | DMM Complexity: None\n\nDIFF:\n@@ -1370,7 +1370,7 @@ def Input(shape=None, batch_shape=None,\n     attributes that allow us to build a Keras model\n     just by knowing the inputs and outputs of the model.\n \n-    For instance, if a, b and c and Keras tensors,\n+    For instance, if a, b and c are Keras tensors,\n     it becomes possible to do:\n     `model = Model(input=[a, b], output=c)`\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "keras#a2c3fa2b96b8727bc060a28b210cabfacc342a83", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 2 | Files Changed: 2 | Hunks: 2 | Methods Changed: 3 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 3 | Churn Cumulative: 8358 | Contributors (this commit): 41 | Commits (past 90d): 48 | Contributors (cumulative): 43 | DMM Complexity: 1.0\n\nDIFF:\n@@ -1672,7 +1672,6 @@ class Container(Layer):\n                 layer = node.inbound_layers[i]\n                 node_index = node.node_indices[i]\n                 tensor_index = node.tensor_indices[i]\n-                next_node = layer.inbound_nodes[node_index]\n                 build_map_of_graph(x, finished_nodes, nodes_in_progress,\n                                    layer, node_index, tensor_index)\n \n\n@@ -214,7 +214,7 @@ def get_file(fname,\n             if os.path.exists(fpath):\n                 os.remove(fpath)\n             raise\n-        progbar = None\n+        progress_tracker.progbar = None\n \n     if untar:\n         if not os.path.exists(untar_fpath):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "keras#7e870a97eca4c8a3301a4686a04fc522997b68e9", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 28 | Lines Deleted: 1 | Files Changed: 2 | Hunks: 6 | Methods Changed: 2 | Complexity Δ (Sum/Max): 2/1 | Churn Δ: 29 | Churn Cumulative: 1119 | Contributors (this commit): 23 | Commits (past 90d): 14 | Contributors (cumulative): 25 | DMM Complexity: 0.85\n\nDIFF:\n@@ -133,16 +133,19 @@ def deserialize_keras_object(identifier, module_objects=None,\n                                  ': ' + class_name)\n         if hasattr(cls, 'from_config'):\n             arg_spec = inspect.getargspec(cls.from_config)\n-            if 'custom_objects' in arg_spec.args:\n             custom_objects = custom_objects or {}\n+            if 'custom_objects' in arg_spec.args:\n                 return cls.from_config(config['config'],\n                                        custom_objects=dict(list(_GLOBAL_CUSTOM_OBJECTS.items()) +\n                                                            list(custom_objects.items())))\n+            with CustomObjectScope(custom_objects):\n                 return cls.from_config(config['config'])\n         else:\n             # Then `cls` may be a function returning a class.\n             # in this case by convention `config` holds\n             # the kwargs of the function.\n+            custom_objects = custom_objects or {}\n+            with CustomObjectScope(custom_objects):\n                 return cls(**config['config'])\n     elif isinstance(identifier, six.string_types):\n         function_name = identifier\n\n@@ -4,6 +4,7 @@ import tempfile\n import numpy as np\n from numpy.testing import assert_allclose\n \n+from keras import backend as K\n from keras.models import Model, Sequential\n from keras.layers import Dense, Lambda, RepeatVector, TimeDistributed\n from keras.layers import Input\n@@ -292,5 +293,28 @@ def test_saving_lambda_custom_objects():\n     assert_allclose(out, out2, atol=1e-05)\n \n \n+@keras_test\n+def test_saving_custom_activation_function():\n+    x = Input(shape=(3,))\n+    output = Dense(3, activation=K.cos)(x)\n+\n+    model = Model(x, output)\n+    model.compile(loss=losses.MSE,\n+                  optimizer=optimizers.RMSprop(lr=0.0001),\n+                  metrics=[metrics.categorical_accuracy])\n+    x = np.random.random((1, 3))\n+    y = np.random.random((1, 3))\n+    model.train_on_batch(x, y)\n+\n+    out = model.predict(x)\n+    _, fname = tempfile.mkstemp('.h5')\n+    save_model(model, fname)\n+\n+    model = load_model(fname, custom_objects={'cos': K.cos})\n+    os.remove(fname)\n+\n+    out2 = model.predict(x)\n+    assert_allclose(out, out2, atol=1e-05)\n+\n if __name__ == '__main__':\n     pytest.main([__file__])\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "keras#ce0f97dbe3da0e173ee182274cc6fb43f442f13c", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 8 | Lines Deleted: 8 | Files Changed: 3 | Hunks: 8 | Methods Changed: 3 | Complexity Δ (Sum/Max): 1/2 | Churn Δ: 16 | Churn Cumulative: 9169 | Contributors (this commit): 43 | Commits (past 90d): 49 | Contributors (cumulative): 50 | DMM Complexity: 0.0\n\nDIFF:\n@@ -384,8 +384,6 @@ def InceptionV3(include_top=True,\n                 cache_subdir='models',\n                 md5_hash='bcbd6486424b2319ff4ef7d526e38f63')\n         model.load_weights(weights_path)\n-        if K.backend() == 'theano':\n-            convert_all_kernels_in_model(model)\n     return model\n \n \n\n@@ -264,15 +264,13 @@ def ResNet50(include_top=True, weights='imagenet',\n         model.load_weights(weights_path)\n         if K.backend() == 'theano':\n             layer_utils.convert_all_kernels_in_model(model)\n-\n-        if K.image_data_format() == 'channels_first':\n             if include_top:\n                 maxpool = model.get_layer(name='avg_pool')\n                 shape = maxpool.output_shape[1:]\n                 dense = model.get_layer(name='fc1000')\n                 layer_utils.convert_dense_weights_data_format(dense, shape, 'channels_first')\n \n-            if K.backend() == 'tensorflow':\n+        if K.image_data_format() == 'channels_first' and K.backend() == 'tensorflow':\n             warnings.warn('You are using the TensorFlow backend, yet you '\n                           'are using the Theano '\n                           'image data format convention '\n\n@@ -2904,16 +2904,20 @@ def preprocess_weights_for_loading(layer, weights,\n                                                     (2, 3, 1, 0))\n                 weights = [kernel, recurrent_kernel, bias]\n \n-    if original_backend and K.backend() != original_backend:\n     conv_layers = ['Conv1D',\n                    'Conv2D',\n                    'Conv3D',\n-                       'Conv2DTranspose']\n+                   'Conv2DTranspose',\n+                   'ConvLSTM2D']\n     if layer.__class__.__name__ in conv_layers:\n+        if original_backend and K.backend() != original_backend:\n             weights[0] = conv_utils.convert_kernel(weights[0])\n             if layer.__class__.__name__ == 'ConvLSTM2D':\n-            weights[0] = conv_utils.convert_kernel(weights[0])\n                 weights[1] = conv_utils.convert_kernel(weights[1])\n+        if K.int_shape(layer.weights[0]) != weights[0].shape:\n+            weights[0] = np.transpose(weights[0], (3, 2, 0, 1))\n+            if layer.__class__.__name__ == 'ConvLSTM2D':\n+                weights[1] = np.transpose(weights[1], (3, 2, 0, 1))\n     return weights\n \n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "keras#7ef13165b7e985b89516023b9608780b0fcbe261", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 60 | Contributors (this commit): 5 | Commits (past 90d): 6 | Contributors (cumulative): 5 | DMM Complexity: None\n\nDIFF:\n@@ -113,7 +113,7 @@ def plot_model(model,\n \n     # Arguments\n         model: A Keras model instance\n-        to_file: File name of the\n+        to_file: File name of the plot image.\n         show_shapes: whether to display shape information.\n         show_layer_names: whether to display layer names.\n         rankdir: `rankdir` argument passed to PyDot,\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "keras#07e0fbc963b7c4240886bd331299a11c4fe41bc9", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 22 | Lines Deleted: 18 | Files Changed: 3 | Hunks: 17 | Methods Changed: 7 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 40 | Churn Cumulative: 8275 | Contributors (this commit): 82 | Commits (past 90d): 44 | Contributors (cumulative): 87 | DMM Complexity: 0.5\n\nDIFF:\n@@ -4,19 +4,20 @@ from tensorflow.python.ops import tensor_array_ops\n from tensorflow.python.ops import control_flow_ops\n from tensorflow.python.ops import functional_ops\n from tensorflow.python.ops import ctc_ops as ctc\n-from tensorflow.python.ops import variables\n+from tensorflow.python.ops import variables as tf_variables\n \n from collections import defaultdict\n import inspect\n import numpy as np\n import os\n-import warnings\n \n from .common import floatx\n from .common import _EPSILON\n from .common import image_data_format\n+\n # Legacy functions\n-from .common import set_image_dim_ordering, image_dim_ordering\n+from .common import set_image_dim_ordering\n+from .common import image_dim_ordering\n \n py_all = all\n py_sum = sum\n@@ -185,11 +186,11 @@ def _convert_string_dtype(dtype):\n     # Arguments\n         dtype: A string representation of a type.\n \n-    # Returns:\n+    # Returns\n         The type requested.\n \n     # Raises\n-        ValueError if `dtype` is not supported\n+        ValueError: if `dtype` is not supported.\n     \"\"\"\n     if dtype == 'float16':\n         return tf.float16\n@@ -386,7 +387,8 @@ def is_keras_tensor(x):\n     ```\n     \"\"\"\n     if not isinstance(x, (tf.Tensor,\n-                          variables.Variable)):\n+                          tf_variables.Variable,\n+                          tf.SparseTensor)):\n         raise ValueError('Unexpectedly found an instance of type `' + str(type(x)) + '`. '\n                          'Expected a symbolic tensor instance.')\n     return hasattr(x, '_keras_history')\n@@ -2288,7 +2290,7 @@ def function(inputs, outputs, updates=None, **kwargs):\n         ValueError: if invalid kwargs are passed in.\n     \"\"\"\n     if kwargs:\n-        for key in kwargs.keys():\n+        for key in kwargs:\n             if (key not in inspect.getargspec(tf.Session.run)[0] and\n                     key not in inspect.getargspec(Function.__init__)[0]):\n                 msg = 'Invalid argument \"%s\" passed to K.function with Tensorflow backend' % key\n\n@@ -2,7 +2,6 @@\n from __future__ import absolute_import\n from __future__ import print_function\n \n-import functools\n import tarfile\n import zipfile\n import os\n@@ -189,18 +188,18 @@ def get_file(fname,\n     if download:\n         print('Downloading data from', origin)\n \n-        class progress_tracker:\n+        class ProgressTracker(object):\n             # Maintain progbar for the lifetime of download.\n             # This design was chosen for Python 2.7 compatibility.\n             progbar = None\n \n         def dl_progress(count, block_size, total_size):\n-            if progress_tracker.progbar is None:\n+            if ProgressTracker.progbar is None:\n                 if total_size is -1:\n                     total_size = None\n-                progress_tracker.progbar = Progbar(total_size)\n+                ProgressTracker.progbar = Progbar(total_size)\n             else:\n-                progress_tracker.progbar.update(count * block_size)\n+                ProgressTracker.progbar.update(count * block_size)\n \n         error_msg = 'URL fetch failure on {}: {} -- {}'\n         try:\n@@ -214,7 +213,7 @@ def get_file(fname,\n             if os.path.exists(fpath):\n                 os.remove(fpath)\n             raise\n-        progress_tracker.progbar = None\n+        ProgressTracker.progbar = None\n \n     if untar:\n         if not os.path.exists(untar_fpath):\n\n@@ -14,9 +14,12 @@ except ImportError:\n \n def _check_pydot():\n     try:\n-        # Attempt to create an image of a blank graph to check the pydot/graphviz installation.\n+        # Attempt to create an image of a blank graph\n+        # to check the pydot/graphviz installation.\n         pydot.Dot.create(pydot.Dot())\n-    except Exception:  # pydot raises a generic Exception here, so no specific class can be caught.\n+    except Exception:\n+        # pydot raises a generic Exception here,\n+        # so no specific class can be caught.\n         raise ImportError('Failed to import pydot. You must install pydot'\n                           ' and graphviz for `pydotprint` to work.')\n \n@@ -85,9 +88,9 @@ def model_to_dot(model,\n                     [str(ishape) for ishape in layer.input_shapes])\n             else:\n                 inputlabels = 'multiple'\n-            label = '%s\\n|{input:|output:}|{{%s}|{%s}}' \\\n-                    % (label, inputlabels, outputlabels)\n-\n+            label = '%s\\n|{input:|output:}|{{%s}|{%s}}' % (label,\n+                                                           inputlabels,\n+                                                           outputlabels)\n         node = pydot.Node(layer_id, label=label)\n         dot.add_node(node)\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "keras#1e09e0a9d4180638b9afcfbb8071cb0e5efc7919", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 1043 | Contributors (this commit): 8 | Commits (past 90d): 11 | Contributors (cumulative): 8 | DMM Complexity: None\n\nDIFF:\n@@ -109,7 +109,7 @@ class ConvRecurrent2D(Recurrent):\n         self.state_spec = None\n \n     def compute_output_shape(self, input_shape):\n-        if type(input_shape) is list:\n+        if isinstance(input_shape, list):\n             input_shape = input_shape[0]\n         if self.data_format == 'channels_first':\n             rows = input_shape[3]\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "keras#0bb4e0fad5b4bb3743c8a7d03c260b62a35e7045", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 0 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 1 | Churn Cumulative: 723 | Contributors (this commit): 5 | Commits (past 90d): 6 | Contributors (cumulative): 5 | DMM Complexity: None\n\nDIFF:\n@@ -27,7 +27,6 @@ from ..layers import AveragePooling2D\n from ..layers import GlobalAveragePooling2D\n from ..layers import GlobalMaxPooling2D\n from ..engine.topology import get_source_inputs\n-from ..utils.layer_utils import convert_all_kernels_in_model\n from ..utils.data_utils import get_file\n from .. import backend as K\n from .imagenet_utils import decode_predictions\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "keras#1b67c59de8c1f61fa785c5192dff4b6a9a409153", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 230 | Contributors (this commit): 5 | Commits (past 90d): 2 | Contributors (cumulative): 5 | DMM Complexity: None\n\nDIFF:\n@@ -24,7 +24,7 @@ print('Loading data...')\n print(len(x_train), 'train sequences')\n print(len(x_test), 'test sequences')\n \n-print(\"Pad sequences (samples x time)\")\n+print('Pad sequences (samples x time)')\n x_train = sequence.pad_sequences(x_train, maxlen=maxlen)\n x_test = sequence.pad_sequences(x_test, maxlen=maxlen)\n print('x_train shape:', x_train.shape)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "keras#fccd4f8055b4f07e88b70d1bd684bec879906c68", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 20 | Lines Deleted: 25 | Files Changed: 4 | Hunks: 13 | Methods Changed: 6 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 45 | Churn Cumulative: 29590 | Contributors (this commit): 166 | Commits (past 90d): 67 | Contributors (cumulative): 223 | DMM Complexity: None\n\nDIFF:\n@@ -164,7 +164,7 @@ def set_image_dim_ordering(dim_ordering):\n     ```\n \n     # Raises\n-        ValueError if invalid `dim_ordering`\n+        ValueError: if `dim_ordering` is invalid.\n     \"\"\"\n     global _IMAGE_DATA_FORMAT\n     if dim_ordering not in {'tf', 'th'}:\n\n@@ -1755,7 +1755,7 @@ def resize_images(x, height_factor, width_factor, data_format):\n         x: Tensor or variable to resize.\n         height_factor: Positive integer.\n         width_factor: Positive integer.\n-        data_format: One of `\"channels_first\"`, `\"channels_last\"`.\n+        data_format: One of `channels_first`, `channels_last`.\n \n     # Returns\n         A tensor.\n@@ -1794,7 +1794,7 @@ def resize_volumes(x, depth_factor, height_factor, width_factor, data_format):\n         depth_factor: Positive integer.\n         height_factor: Positive integer.\n         width_factor: Positive integer.\n-        data_format: One of `\"channels_first\"`, `\"channels_last\"`.\n+        data_format: One of `channels_first`, `channels_last`.\n \n     # Returns\n         A tensor.\n@@ -3019,7 +3019,7 @@ def _preprocess_padding(padding):\n         a string, one of 'SAME', 'VALID'.\n \n     # Raises\n-        ValueError if invalid `padding'`\n+        ValueError: if `padding` is invalid.\n     \"\"\"\n     if padding == 'same':\n         padding = 'SAME'\n@@ -3111,8 +3111,8 @@ def conv2d(x, kernel, strides=(1, 1), padding='valid',\n         x: Tensor or variable.\n         kernel: kernel tensor.\n         strides: strides tuple.\n-        padding: string, `\"same\"` or `\"valid\"`.\n-        data_format: `\"channels_last\"` or `\"channels_first\"`.\n+        padding: string, `same` or `valid`.\n+        data_format: `channels_last` or `channels_first`.\n             Whether to use Theano or TensorFlow data format\n             for inputs/kernels/ouputs.\n         dilation_rate: tuple of 2 integers.\n@@ -3152,8 +3152,8 @@ def conv2d_transpose(x, kernel, output_shape, strides=(1, 1),\n         kernel: kernel tensor.\n         output_shape: 1D int tensor for the output shape.\n         strides: strides tuple.\n-        padding: string, `\"same\"` or `\"valid\"`.\n-        data_format: `\"channels_last\"` or `\"channels_first\"`.\n+        padding: string, `same` or `valid`.\n+        data_format: `channels_last` or `channels_first`.\n             Whether to use Theano or TensorFlow data format\n             for inputs/kernels/ouputs.\n \n@@ -3190,8 +3190,8 @@ def separable_conv2d(x, depthwise_kernel, pointwise_kernel, strides=(1, 1),\n         depthwise_kernel: convolution kernel for the depthwise convolution.\n         pointwise_kernel: kernel for the 1x1 convolution.\n         strides: strides tuple (length 2).\n-        padding: padding mode, \"valid\" or \"same\".\n-        data_format: data format, \"channels_first\" or \"channels_last\".\n+        padding: padding mode, `valid` or `same`.\n+        data_format: data format, `channels_first` or `channels_last`.\n         dilation_rate: tuple of integers,\n             dilation rates for the separable convolution.\n \n@@ -3225,8 +3225,8 @@ def conv3d(x, kernel, strides=(1, 1, 1), padding='valid',\n         x: Tensor or variable.\n         kernel: kernel tensor.\n         strides: strides tuple.\n-        padding: string, `\"same\"` or `\"valid\"`.\n-        data_format: `\"channels_last\"` or `\"channels_first\"`.\n+        padding: string, `same` or `valid`.\n+        data_format: `channels_last` or `channels_first`.\n             Whether to use Theano or TensorFlow data format\n             for inputs/kernels/ouputs.\n         dilation_rate: tuple of 3 integers.\n@@ -3266,9 +3266,9 @@ def pool2d(x, pool_size, strides=(1, 1),\n         x: Tensor or variable.\n         pool_size: tuple of 2 integers.\n         strides: tuple of 2 integers.\n-        padding: one of `\"valid\"`, `\"same\"`.\n-        data_format: one of `\"channels_first\"`, `\"channels_last\"`.\n-        pool_mode: one of `\"max\"`, `\"avg\"`.\n+        padding: one of `valid`, `same`.\n+        data_format: one of `channels_first`, `channels_last`.\n+        pool_mode: one of `max`, `avg`.\n \n     # Returns\n         A tensor, result of 2D pooling.\n@@ -3306,9 +3306,9 @@ def pool3d(x, pool_size, strides=(1, 1, 1), padding='valid',\n         x: Tensor or variable.\n         pool_size: tuple of 3 integers.\n         strides: tuple of 3 integers.\n-        padding: one of `\"valid\"`, `\"same\"`.\n-        data_format: one of `\"channels_first\"`, `\"channels_last\"`.\n-        pool_mode: one of `\"max\"`, `\"avg\"`.\n+        padding: one of `valid`, `same`.\n+        data_format: one of `channels_first`, `channels_last`.\n+        pool_mode: one of `max`, `avg`.\n \n     # Returns\n         A tensor, result of 3D pooling.\n\n@@ -349,13 +349,8 @@ class Reshape(Layer):\n         # Returns\n             The new output shape with a -1 replaced with its computed value.\n \n-            Raises a ValueError if the total array size of the output_shape is\n-            different then the input_shape, or more then one unknown dimension\n-            is specified.\n-\n         # Raises\n-            ValueError: in case of invalid values\n-                for `input_shape` or `input_shape`.\n+            ValueError: if `input_shape` and `output_shape` do not match.\n         \"\"\"\n         output_shape = list(output_shape)\n         msg = 'total size of new array must be unchanged'\n\n@@ -304,7 +304,7 @@ def model_from_config(config, custom_objects=None):\n         A Keras model instance (uncompiled).\n \n     # Raises\n-        TypeError if `config` is not a dictionary\n+        TypeError: if `config` is not a dictionary.\n     \"\"\"\n     if isinstance(config, list):\n         raise TypeError('`model_from_config` expects a dictionary, not a list. '\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "keras#bfa38fb747904d20e4fb73aa233c88bff2151916", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 10 | Lines Deleted: 5 | Files Changed: 2 | Hunks: 4 | Methods Changed: 2 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 15 | Churn Cumulative: 9308 | Contributors (this commit): 39 | Commits (past 90d): 40 | Contributors (cumulative): 44 | DMM Complexity: 0.0\n\nDIFF:\n@@ -1493,13 +1493,19 @@ class Container(Layer):\n             self.outputs = [outputs]\n \n         # Check for redundancy in inputs.\n-        inputs_set = set(self.inputs)\n-        if len(inputs_set) != len(self.inputs):\n+        if len(set(self.inputs)) != len(self.inputs):\n             raise ValueError('The list of inputs passed to the model '\n                              'is redundant. '\n                              'All inputs should only appear once.'\n                              ' Found: ' + str(self.inputs))\n \n+        # Check for redundancy in outputs.\n+        if len(set(self.outputs)) != len(self.outputs):\n+            warnings.warn('The list of outputs passed to the model '\n+                          'is redundant. '\n+                          'All outputs should only appear once.'\n+                          ' Found: ' + str(self.outputs))\n+\n         # List of initial layers (1 to 1 mapping with self.inputs,\n         # hence the same layer might appear twice)\n         self.input_layers = []\n\n@@ -439,12 +439,11 @@ def test_recursion():\n     with pytest.raises(Exception) as e:\n         Model([j], [m, n])\n \n-    # redudant outputs\n+    # redundant outputs\n     j = Input(shape=(32,), name='input_j')\n     k = Input(shape=(32,), name='input_k')\n     m, n = model([j, k])\n-    # this should work lol\n-    # TODO: raise a warning\n+    # this should work with a warning\n     Model([j, k], [m, n, n])\n \n     # redundant inputs\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "keras#60c52ea766b8049c4396ad76c6f4242039c5e974", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 5 | Lines Deleted: 8 | Files Changed: 1 | Hunks: 5 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 13 | Churn Cumulative: 9147 | Contributors (this commit): 69 | Commits (past 90d): 20 | Contributors (cumulative): 69 | DMM Complexity: 1.0\n\nDIFF:\n@@ -233,9 +233,7 @@ def load_model(filepath, custom_objects=None, compile=True):\n         if obj in custom_objects:\n             return custom_objects[obj]\n         return obj\n-\n-    f = h5py.File(filepath, mode='r')\n-\n+    with h5py.File(filepath, mode='r') as f:\n         # instantiate model\n         model_config = f.attrs.get('model_config')\n         if model_config is None:\n@@ -248,7 +246,6 @@ def load_model(filepath, custom_objects=None, compile=True):\n \n         # Early return if compilation is not required.\n         if not compile:\n-        f.close()\n             return model\n \n         # instantiate optimizer\n@@ -256,7 +253,6 @@ def load_model(filepath, custom_objects=None, compile=True):\n         if training_config is None:\n             warnings.warn('No training configuration found in save file: '\n                           'the model was *not* compiled. Compile it manually.')\n-        f.close()\n             return model\n         training_config = json.loads(training_config.decode('utf-8'))\n         optimizer_config = training_config['optimizer_config']\n@@ -284,10 +280,11 @@ def load_model(filepath, custom_objects=None, compile=True):\n             else:\n                 model._make_train_function()\n             optimizer_weights_group = f['optimizer_weights']\n-        optimizer_weight_names = [n.decode('utf8') for n in optimizer_weights_group.attrs['weight_names']]\n-        optimizer_weight_values = [optimizer_weights_group[n] for n in optimizer_weight_names]\n+            optimizer_weight_names = [n.decode('utf8') for n in\n+                                      optimizer_weights_group.attrs['weight_names']]\n+            optimizer_weight_values = [optimizer_weights_group[n] for n in\n+                                       optimizer_weight_names]\n             model.optimizer.set_weights(optimizer_weight_values)\n-    f.close()\n     return model\n \n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "keras#17e073d87e0192abb6192dbfb45a97dc8d63a91e", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 37 | Lines Deleted: 43 | Files Changed: 1 | Hunks: 27 | Methods Changed: 14 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 80 | Churn Cumulative: 7878 | Contributors (this commit): 78 | Commits (past 90d): 31 | Contributors (cumulative): 78 | DMM Complexity: 0.0\n\nDIFF:\n@@ -1755,14 +1755,13 @@ def resize_images(x, height_factor, width_factor, data_format):\n         x: Tensor or variable to resize.\n         height_factor: Positive integer.\n         width_factor: Positive integer.\n-        data_format: One of `channels_first`, `channels_last`.\n+        data_format: string, `\"channels_last\"` or `\"channels_first\"`.\n \n     # Returns\n         A tensor.\n \n     # Raises\n-        ValueError: if `data_format` is neither\n-            `channels_last` or `channels_first`.\n+        ValueError: if `data_format` is neither `\"channels_last\"` or `\"channels_first\"`.\n     \"\"\"\n     if data_format == 'channels_first':\n         original_shape = int_shape(x)\n@@ -1794,14 +1793,13 @@ def resize_volumes(x, depth_factor, height_factor, width_factor, data_format):\n         depth_factor: Positive integer.\n         height_factor: Positive integer.\n         width_factor: Positive integer.\n-        data_format: One of `channels_first`, `channels_last`.\n+        data_format: string, `\"channels_last\"` or `\"channels_first\"`.\n \n     # Returns\n         A tensor.\n \n     # Raises\n-        ValueError: if `data_format` is neither\n-            `channels_last` or `channels_first`.\n+        ValueError: if `data_format` is neither `\"channels_last\"` or `\"channels_first\"`.\n     \"\"\"\n     if data_format == 'channels_first':\n         output = repeat_elements(x, depth_factor, axis=2)\n@@ -1987,14 +1985,13 @@ def spatial_2d_padding(x, padding=((1, 1), (1, 1)), data_format=None):\n     # Arguments\n         x: Tensor or variable.\n         padding: Tuple of 2 tuples, padding pattern.\n-        data_format: One of `channels_last` or `channels_first`.\n+        data_format: string, `\"channels_last\"` or `\"channels_first\"`.\n \n     # Returns\n         A padded 4D tensor.\n \n     # Raises\n-        ValueError: if `data_format` is neither\n-            `channels_last` or `channels_first`.\n+        ValueError: if `data_format` is neither `\"channels_last\"` or `\"channels_first\"`.\n     \"\"\"\n     assert len(padding) == 2\n     assert len(padding[0]) == 2\n@@ -2030,14 +2027,13 @@ def spatial_3d_padding(x, padding=((1, 1), (1, 1), (1, 1)), data_format=None):\n     # Arguments\n         x: Tensor or variable.\n         padding: Tuple of 3 tuples, padding pattern.\n-        data_format: One of `channels_last` or `channels_first`.\n+        data_format: string, `\"channels_last\"` or `\"channels_first\"`.\n \n     # Returns\n         A padded 5D tensor.\n \n     # Raises\n-        ValueError: if `data_format` is neither\n-            `channels_last` or `channels_first`.\n+        ValueError: if `data_format` is neither `\"channels_last\"` or `\"channels_first\"`.\n \n     \"\"\"\n     assert len(padding) == 3\n@@ -2923,7 +2919,7 @@ def _preprocess_deconv_output_shape(x, shape, data_format):\n     # Arguments\n         x: input tensor.\n         shape: output shape.\n-        data_format: string, one of 'channels_last', 'channels_first'.\n+        data_format: string, `\"channels_last\"` or `\"channels_first\"`.\n \n     # Returns\n         The output shape.\n@@ -2942,7 +2938,7 @@ def _preprocess_conv2d_input(x, data_format):\n \n     # Arguments\n         x: input tensor.\n-        data_format: string, one of 'channels_last', 'channels_first'.\n+        data_format: string, `\"channels_last\"` or `\"channels_first\"`.\n \n     # Returns\n         A tensor.\n@@ -2963,7 +2959,7 @@ def _preprocess_conv3d_input(x, data_format):\n \n     # Arguments\n         x: input tensor.\n-        data_format: string, one of 'channels_last', 'channels_first'.\n+        data_format: string, `\"channels_last\"` or `\"channels_first\"`.\n \n     # Returns\n         A tensor.\n@@ -2980,7 +2976,7 @@ def _preprocess_conv2d_kernel(kernel, data_format):\n \n     # Arguments\n         kernel: kernel tensor.\n-        data_format: string, one of 'channels_last', 'channels_first'.\n+        data_format: string, `\"channels_last\"` or `\"channels_first\"`.\n \n     # Returns\n         A tensor.\n@@ -2997,7 +2993,7 @@ def _preprocess_conv3d_kernel(kernel, data_format):\n \n     # Arguments\n         kernel: kernel tensor.\n-        data_format: string, one of 'channels_last', 'channels_first'.\n+        data_format: string, `\"channels_last\"` or `\"channels_first\"`.\n \n     # Returns\n         A tensor.\n@@ -3013,10 +3009,10 @@ def _preprocess_padding(padding):\n     \"\"\"Convert keras' padding to tensorflow's padding.\n \n     # Arguments\n-        padding: string, one of 'same' , 'valid'\n+        padding: string, `\"same\"` or `\"valid\"`.\n \n     # Returns\n-        a string, one of 'SAME', 'VALID'.\n+        a string, `\"SAME\"` or `\"VALID\"`.\n \n     # Raises\n         ValueError: if `padding` is invalid.\n@@ -3035,7 +3031,7 @@ def _postprocess_conv2d_output(x, data_format):\n \n     # Arguments\n         x: A tensor.\n-        data_format: string, one of \"channels_last\", \"channels_first\".\n+        data_format: string, `\"channels_last\"` or `\"channels_first\"`.\n \n     # Returns\n         A tensor.\n@@ -3054,7 +3050,7 @@ def _postprocess_conv3d_output(x, data_format):\n \n     # Arguments\n         x: A tensor.\n-        data_format: string, one of \"channels_last\", \"channels_first\".\n+        data_format: string, `\"channels_last\"` or `\"channels_first\"`.\n \n     # Returns\n         A tensor.\n@@ -3076,7 +3072,7 @@ def conv1d(x, kernel, strides=1, padding='valid',\n         kernel: kernel tensor.\n         strides: stride integer.\n         padding: string, `\"same\"`, `\"causal\"` or `\"valid\"`.\n-        data_format: string, one of \"channels_last\", \"channels_first\".\n+        data_format: string, `\"channels_last\"` or `\"channels_first\"`.\n         dilation_rate: integer dilate rate.\n \n     # Returns\n@@ -3111,8 +3107,8 @@ def conv2d(x, kernel, strides=(1, 1), padding='valid',\n         x: Tensor or variable.\n         kernel: kernel tensor.\n         strides: strides tuple.\n-        padding: string, `same` or `valid`.\n-        data_format: `channels_last` or `channels_first`.\n+        padding: string, `\"same\"` or `\"valid\"`.\n+        data_format: string, `\"channels_last\"` or `\"channels_first\"`.\n             Whether to use Theano or TensorFlow data format\n             for inputs/kernels/ouputs.\n         dilation_rate: tuple of 2 integers.\n@@ -3152,8 +3148,8 @@ def conv2d_transpose(x, kernel, output_shape, strides=(1, 1),\n         kernel: kernel tensor.\n         output_shape: 1D int tensor for the output shape.\n         strides: strides tuple.\n-        padding: string, `same` or `valid`.\n-        data_format: `channels_last` or `channels_first`.\n+        padding: string, `\"same\"` or `\"valid\"`.\n+        data_format: string, `\"channels_last\"` or `\"channels_first\"`.\n             Whether to use Theano or TensorFlow data format\n             for inputs/kernels/ouputs.\n \n@@ -3190,8 +3186,8 @@ def separable_conv2d(x, depthwise_kernel, pointwise_kernel, strides=(1, 1),\n         depthwise_kernel: convolution kernel for the depthwise convolution.\n         pointwise_kernel: kernel for the 1x1 convolution.\n         strides: strides tuple (length 2).\n-        padding: padding mode, `valid` or `same`.\n-        data_format: data format, `channels_first` or `channels_last`.\n+        padding: string, `\"same\"` or `\"valid\"`.\n+        data_format: string, `\"channels_last\"` or `\"channels_first\"`.\n         dilation_rate: tuple of integers,\n             dilation rates for the separable convolution.\n \n@@ -3225,8 +3221,8 @@ def conv3d(x, kernel, strides=(1, 1, 1), padding='valid',\n         x: Tensor or variable.\n         kernel: kernel tensor.\n         strides: strides tuple.\n-        padding: string, `same` or `valid`.\n-        data_format: `channels_last` or `channels_first`.\n+        padding: string, `\"same\"` or `\"valid\"`.\n+        data_format: string, `\"channels_last\"` or `\"channels_first\"`.\n             Whether to use Theano or TensorFlow data format\n             for inputs/kernels/ouputs.\n         dilation_rate: tuple of 3 integers.\n@@ -3266,16 +3262,16 @@ def pool2d(x, pool_size, strides=(1, 1),\n         x: Tensor or variable.\n         pool_size: tuple of 2 integers.\n         strides: tuple of 2 integers.\n-        padding: one of `valid`, `same`.\n-        data_format: one of `channels_first`, `channels_last`.\n-        pool_mode: one of `max`, `avg`.\n+        padding: string, `\"same\"` or `\"valid\"`.\n+        data_format: string, `\"channels_last\"` or `\"channels_first\"`.\n+        pool_mode: string, `\"max\"` or `\"avg\"`.\n \n     # Returns\n         A tensor, result of 2D pooling.\n \n     # Raises\n-        ValueError: if `data_format` is neither `channels_last` or `channels_first`.\n-        ValueError: if `pool_mode` is neither `max` or `avg`.\n+        ValueError: if `data_format` is neither `\"channels_last\"` or `\"channels_first\"`.\n+        ValueError: if `pool_mode` is neither `\"max\"` or `\"avg\"`.\n     \"\"\"\n     if data_format is None:\n         data_format = image_data_format()\n@@ -3306,17 +3302,16 @@ def pool3d(x, pool_size, strides=(1, 1, 1), padding='valid',\n         x: Tensor or variable.\n         pool_size: tuple of 3 integers.\n         strides: tuple of 3 integers.\n-        padding: one of `valid`, `same`.\n-        data_format: one of `channels_first`, `channels_last`.\n-        pool_mode: one of `max`, `avg`.\n+        padding: string, `\"same\"` or `\"valid\"`.\n+        data_format: string, `\"channels_last\"` or `\"channels_first\"`.\n+        pool_mode: string, `\"max\"` or `\"avg\"`.\n \n     # Returns\n         A tensor, result of 3D pooling.\n \n     # Raises\n-        ValueError: if `data_format` is neither\n-            `channels_last` or `channels_first`.\n-        ValueError: if `pool_mode` is neither `max` or `avg`.\n+        ValueError: if `data_format` is neither `\"channels_last\"` or `\"channels_first\"`.\n+        ValueError: if `pool_mode` is neither `\"max\"` or `\"avg\"`.\n     \"\"\"\n     if data_format is None:\n         data_format = image_data_format()\n@@ -3345,8 +3340,7 @@ def bias_add(x, bias, data_format=None):\n     # Arguments\n         x: Tensor or variable.\n         bias: Bias tensor to add.\n-        data_format: Data format for 3D, 4D or 5D tensors:\n-            one of \"channels_first\", \"channels_last\".\n+        data_format: string, `\"channels_last\"` or `\"channels_first\"`.\n \n     # Returns\n         Output tensor.\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
