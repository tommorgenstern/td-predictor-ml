{"custom_id": "fastapi#c43120258fa89bc20d6f8ee671b6ead9ab223fc7", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 38 | Lines Deleted: 24 | Files Changed: 5 | Hunks: 14 | Methods Changed: 7 | Complexity Δ (Sum/Max): 6/3 | Churn Δ: 62 | Churn Cumulative: 6600 | Contributors (this commit): 49 | Commits (past 90d): 12 | Contributors (cumulative): 74 | DMM Complexity: 0.7142857142857143\n\nDIFF:\n@@ -1,3 +1,2 @@\n METHODS_WITH_BODY = {\"GET\", \"HEAD\", \"POST\", \"PUT\", \"DELETE\", \"PATCH\"}\n-STATUS_CODES_WITH_NO_BODY = {100, 101, 102, 103, 204, 304}\n REF_PREFIX = \"#/components/schemas/\"\n\n@@ -9,11 +9,7 @@ from fastapi.datastructures import DefaultPlaceholder\n from fastapi.dependencies.models import Dependant\n from fastapi.dependencies.utils import get_flat_dependant, get_flat_params\n from fastapi.encoders import jsonable_encoder\n-from fastapi.openapi.constants import (\n-    METHODS_WITH_BODY,\n-    REF_PREFIX,\n-    STATUS_CODES_WITH_NO_BODY,\n-)\n+from fastapi.openapi.constants import METHODS_WITH_BODY, REF_PREFIX\n from fastapi.openapi.models import OpenAPI\n from fastapi.params import Body, Param\n from fastapi.responses import Response\n@@ -21,6 +17,7 @@ from fastapi.utils import (\n     deep_dict_update,\n     generate_operation_id_for_path,\n     get_model_definitions,\n+    is_body_allowed_for_status_code,\n )\n from pydantic import BaseModel\n from pydantic.fields import ModelField, Undefined\n@@ -265,9 +262,8 @@ def get_openapi_path(\n             operation.setdefault(\"responses\", {}).setdefault(status_code, {})[\n                 \"description\"\n             ] = route.response_description\n-            if (\n-                route_response_media_type\n-                and route.status_code not in STATUS_CODES_WITH_NO_BODY\n+            if route_response_media_type and is_body_allowed_for_status_code(\n+                route.status_code\n             ):\n                 response_schema = {\"type\": \"string\"}\n                 if lenient_issubclass(current_response_class, JSONResponse):\n\n@@ -29,13 +29,13 @@ from fastapi.dependencies.utils import (\n )\n from fastapi.encoders import DictIntStrAny, SetIntStr, jsonable_encoder\n from fastapi.exceptions import RequestValidationError, WebSocketRequestValidationError\n-from fastapi.openapi.constants import STATUS_CODES_WITH_NO_BODY\n from fastapi.types import DecoratedCallable\n from fastapi.utils import (\n     create_cloned_field,\n     create_response_field,\n     generate_unique_id,\n     get_value_or_default,\n+    is_body_allowed_for_status_code,\n )\n from pydantic import BaseModel\n from pydantic.error_wrappers import ErrorWrapper, ValidationError\n@@ -232,7 +232,17 @@ def get_request_handler(\n                 if raw_response.background is None:\n                     raw_response.background = background_tasks\n                 return raw_response\n-            response_data = await serialize_response(\n+            response_args: Dict[str, Any] = {\"background\": background_tasks}\n+            # If status_code was set, use it, otherwise use the default from the\n+            # response class, in the case of redirect it's 307\n+            current_status_code = (\n+                status_code if status_code else sub_response.status_code\n+            )\n+            if current_status_code is not None:\n+                response_args[\"status_code\"] = current_status_code\n+            if sub_response.status_code:\n+                response_args[\"status_code\"] = sub_response.status_code\n+            content = await serialize_response(\n                 field=response_field,\n                 response_content=raw_response,\n                 include=response_model_include,\n@@ -243,15 +253,10 @@ def get_request_handler(\n                 exclude_none=response_model_exclude_none,\n                 is_coroutine=is_coroutine,\n             )\n-            response_args: Dict[str, Any] = {\"background\": background_tasks}\n-            # If status_code was set, use it, otherwise use the default from the\n-            # response class, in the case of redirect it's 307\n-            if status_code is not None:\n-                response_args[\"status_code\"] = status_code\n-            response = actual_response_class(response_data, **response_args)\n+            response = actual_response_class(content, **response_args)\n+            if not is_body_allowed_for_status_code(status_code):\n+                response.body = b\"\"\n             response.headers.raw.extend(sub_response.headers.raw)\n-            if sub_response.status_code:\n-                response.status_code = sub_response.status_code\n             return response\n \n     return app\n@@ -377,8 +382,8 @@ class APIRoute(routing.Route):\n             status_code = int(status_code)\n         self.status_code = status_code\n         if self.response_model:\n-            assert (\n-                status_code not in STATUS_CODES_WITH_NO_BODY\n+            assert is_body_allowed_for_status_code(\n+                status_code\n             ), f\"Status code {status_code} must not have a response body\"\n             response_name = \"Response_\" + self.unique_id\n             self.response_field = create_response_field(\n@@ -410,8 +415,8 @@ class APIRoute(routing.Route):\n             assert isinstance(response, dict), \"An additional response must be a dict\"\n             model = response.get(\"model\")\n             if model:\n-                assert (\n-                    additional_status_code not in STATUS_CODES_WITH_NO_BODY\n+                assert is_body_allowed_for_status_code(\n+                    additional_status_code\n                 ), f\"Status code {additional_status_code} must not have a response body\"\n                 response_name = f\"Response_{additional_status_code}_{self.unique_id}\"\n                 response_field = create_response_field(name=response_name, type_=model)\n\n@@ -18,6 +18,13 @@ if TYPE_CHECKING:  # pragma: nocover\n     from .routing import APIRoute\n \n \n+def is_body_allowed_for_status_code(status_code: Union[int, str, None]) -> bool:\n+    if status_code is None:\n+        return True\n+    current_status_code = int(status_code)\n+    return not (current_status_code < 200 or current_status_code in {204, 304})\n+\n+\n def get_model_definitions(\n     *,\n     flat_models: Set[Union[Type[BaseModel], Type[Enum]]],\n\n@@ -28,7 +28,7 @@ class JsonApiError(BaseModel):\n     responses={500: {\"description\": \"Error\", \"model\": JsonApiError}},\n )\n async def a():\n-    pass  # pragma: no cover\n+    pass\n \n \n @app.get(\"/b\", responses={204: {\"description\": \"No Content\"}})\n@@ -106,3 +106,10 @@ def test_openapi_schema():\n     response = client.get(\"/openapi.json\")\n     assert response.status_code == 200, response.text\n     assert response.json() == openapi_schema\n+\n+\n+def test_get_response():\n+    response = client.get(\"/a\")\n+    assert response.status_code == 204, response.text\n+    assert \"content-length\" not in response.headers\n+    assert response.content == b\"\"\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#50fb34bf55c1711e3753363ab6427d77be25dbb6", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 366 | Contributors (this commit): 2 | Commits (past 90d): 6 | Contributors (cumulative): 2 | DMM Complexity: None\n\nDIFF:\n@@ -1,6 +1,6 @@\n \"\"\"FastAPI framework, high performance, easy to learn, fast to code, ready for production\"\"\"\n \n-__version__ = \"0.78.0\"\n+__version__ = \"0.79.0\"\n \n from starlette import status as status\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#e88089ec210dadb06311377ab203eabfbda3d830", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 103 | Lines Deleted: 1 | Files Changed: 2 | Hunks: 2 | Methods Changed: 4 | Complexity Δ (Sum/Max): 3/3 | Churn Δ: 104 | Churn Cumulative: 1391 | Contributors (this commit): 26 | Commits (past 90d): 3 | Contributors (cumulative): 27 | DMM Complexity: 0.875\n\nDIFF:\n@@ -223,7 +223,9 @@ def get_openapi_path(\n             parameters.extend(operation_parameters)\n             if parameters:\n                 operation[\"parameters\"] = list(\n-                    {param[\"name\"]: param for param in parameters}.values()\n+                    {\n+                        (param[\"in\"], param[\"name\"]): param for param in parameters\n+                    }.values()\n                 )\n             if method in METHODS_WITH_BODY:\n                 request_body_oai = get_openapi_operation_request_body(\n\n@@ -0,0 +1,100 @@\n+from fastapi import FastAPI, Path, Query, status\n+from fastapi.testclient import TestClient\n+\n+app = FastAPI()\n+\n+\n+@app.get(\"/{repeated_alias}\")\n+def get_parameters_with_repeated_aliases(\n+    path: str = Path(..., alias=\"repeated_alias\"),\n+    query: str = Query(..., alias=\"repeated_alias\"),\n+):\n+    return {\"path\": path, \"query\": query}\n+\n+\n+client = TestClient(app)\n+\n+openapi_schema = {\n+    \"components\": {\n+        \"schemas\": {\n+            \"HTTPValidationError\": {\n+                \"properties\": {\n+                    \"detail\": {\n+                        \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n+                        \"title\": \"Detail\",\n+                        \"type\": \"array\",\n+                    }\n+                },\n+                \"title\": \"HTTPValidationError\",\n+                \"type\": \"object\",\n+            },\n+            \"ValidationError\": {\n+                \"properties\": {\n+                    \"loc\": {\n+                        \"items\": {\"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]},\n+                        \"title\": \"Location\",\n+                        \"type\": \"array\",\n+                    },\n+                    \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n+                    \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n+                },\n+                \"required\": [\"loc\", \"msg\", \"type\"],\n+                \"title\": \"ValidationError\",\n+                \"type\": \"object\",\n+            },\n+        }\n+    },\n+    \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n+    \"openapi\": \"3.0.2\",\n+    \"paths\": {\n+        \"/{repeated_alias}\": {\n+            \"get\": {\n+                \"operationId\": \"get_parameters_with_repeated_aliases__repeated_alias__get\",\n+                \"parameters\": [\n+                    {\n+                        \"in\": \"path\",\n+                        \"name\": \"repeated_alias\",\n+                        \"required\": True,\n+                        \"schema\": {\"title\": \"Repeated Alias\", \"type\": \"string\"},\n+                    },\n+                    {\n+                        \"in\": \"query\",\n+                        \"name\": \"repeated_alias\",\n+                        \"required\": True,\n+                        \"schema\": {\"title\": \"Repeated Alias\", \"type\": \"string\"},\n+                    },\n+                ],\n+                \"responses\": {\n+                    \"200\": {\n+                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                        \"description\": \"Successful Response\",\n+                    },\n+                    \"422\": {\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\n+                                    \"$ref\": \"#/components/schemas/HTTPValidationError\"\n+                                }\n+                            }\n+                        },\n+                        \"description\": \"Validation Error\",\n+                    },\n+                },\n+                \"summary\": \"Get Parameters With Repeated Aliases\",\n+            }\n+        }\n+    },\n+}\n+\n+\n+def test_openapi_schema():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == status.HTTP_200_OK\n+    actual_schema = response.json()\n+    assert actual_schema == openapi_schema\n+\n+\n+def test_get_parameters():\n+    response = client.get(\"/test_path\", params={\"repeated_alias\": \"test_query\"})\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\"path\": \"test_path\", \"query\": \"test_query\"}\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#eb2e1833612e67c9b9ffd2bb446a672d3dffccf4", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 42 | Lines Deleted: 1 | Files Changed: 2 | Hunks: 7 | Methods Changed: 5 | Complexity Δ (Sum/Max): 0/1 | Churn Δ: 43 | Churn Cumulative: 778 | Contributors (this commit): 14 | Commits (past 90d): 2 | Contributors (cumulative): 23 | DMM Complexity: 0.8205128205128205\n\nDIFF:\n@@ -80,6 +80,11 @@ def jsonable_encoder(\n         return obj\n     if isinstance(obj, dict):\n         encoded_dict = {}\n+        allowed_keys = set(obj.keys())\n+        if include is not None:\n+            allowed_keys &= set(include)\n+        if exclude is not None:\n+            allowed_keys -= set(exclude)\n         for key, value in obj.items():\n             if (\n                 (\n@@ -88,7 +93,7 @@ def jsonable_encoder(\n                     or (not key.startswith(\"_sa\"))\n                 )\n                 and (value is not None or not exclude_none)\n-                and ((include and key in include) or not exclude or key not in exclude)\n+                and key in allowed_keys\n             ):\n                 encoded_key = jsonable_encoder(\n                     key,\n@@ -144,6 +149,8 @@ def jsonable_encoder(\n             raise ValueError(errors)\n     return jsonable_encoder(\n         data,\n+        include=include,\n+        exclude=exclude,\n         by_alias=by_alias,\n         exclude_unset=exclude_unset,\n         exclude_defaults=exclude_defaults,\n\n@@ -93,16 +93,42 @@ def fixture_model_with_path(request):\n     return ModelWithPath(path=request.param(\"/foo\", \"bar\"))\n \n \n+def test_encode_dict():\n+    pet = {\"name\": \"Firulais\", \"owner\": {\"name\": \"Foo\"}}\n+    assert jsonable_encoder(pet) == {\"name\": \"Firulais\", \"owner\": {\"name\": \"Foo\"}}\n+    assert jsonable_encoder(pet, include={\"name\"}) == {\"name\": \"Firulais\"}\n+    assert jsonable_encoder(pet, exclude={\"owner\"}) == {\"name\": \"Firulais\"}\n+    assert jsonable_encoder(pet, include={}) == {}\n+    assert jsonable_encoder(pet, exclude={}) == {\n+        \"name\": \"Firulais\",\n+        \"owner\": {\"name\": \"Foo\"},\n+    }\n+\n+\n def test_encode_class():\n     person = Person(name=\"Foo\")\n     pet = Pet(owner=person, name=\"Firulais\")\n     assert jsonable_encoder(pet) == {\"name\": \"Firulais\", \"owner\": {\"name\": \"Foo\"}}\n+    assert jsonable_encoder(pet, include={\"name\"}) == {\"name\": \"Firulais\"}\n+    assert jsonable_encoder(pet, exclude={\"owner\"}) == {\"name\": \"Firulais\"}\n+    assert jsonable_encoder(pet, include={}) == {}\n+    assert jsonable_encoder(pet, exclude={}) == {\n+        \"name\": \"Firulais\",\n+        \"owner\": {\"name\": \"Foo\"},\n+    }\n \n \n def test_encode_dictable():\n     person = DictablePerson(name=\"Foo\")\n     pet = DictablePet(owner=person, name=\"Firulais\")\n     assert jsonable_encoder(pet) == {\"name\": \"Firulais\", \"owner\": {\"name\": \"Foo\"}}\n+    assert jsonable_encoder(pet, include={\"name\"}) == {\"name\": \"Firulais\"}\n+    assert jsonable_encoder(pet, exclude={\"owner\"}) == {\"name\": \"Firulais\"}\n+    assert jsonable_encoder(pet, include={}) == {}\n+    assert jsonable_encoder(pet, exclude={}) == {\n+        \"name\": \"Firulais\",\n+        \"owner\": {\"name\": \"Foo\"},\n+    }\n \n \n def test_encode_unsupported():\n@@ -144,6 +170,14 @@ def test_encode_model_with_default():\n     assert jsonable_encoder(model, exclude_unset=True, exclude_defaults=True) == {\n         \"foo\": \"foo\"\n     }\n+    assert jsonable_encoder(model, include={\"foo\"}) == {\"foo\": \"foo\"}\n+    assert jsonable_encoder(model, exclude={\"bla\"}) == {\"foo\": \"foo\", \"bar\": \"bar\"}\n+    assert jsonable_encoder(model, include={}) == {}\n+    assert jsonable_encoder(model, exclude={}) == {\n+        \"foo\": \"foo\",\n+        \"bar\": \"bar\",\n+        \"bla\": \"bla\",\n+    }\n \n \n def test_custom_encoders():\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#ab8988ff7c5bb2ec25d41ba8c8687114962e0986", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 368 | Contributors (this commit): 2 | Commits (past 90d): 2 | Contributors (cumulative): 2 | DMM Complexity: None\n\nDIFF:\n@@ -1,6 +1,6 @@\n \"\"\"FastAPI framework, high performance, easy to learn, fast to code, ready for production\"\"\"\n \n-__version__ = \"0.79.0\"\n+__version__ = \"0.79.1\"\n \n from starlette import status as status\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#e7b1b96a54af8e6327be1e0cc2172c81d052edda", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 21 | Lines Deleted: 21 | Files Changed: 2 | Hunks: 21 | Methods Changed: 42 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 42 | Churn Cumulative: 7670 | Contributors (this commit): 40 | Commits (past 90d): 3 | Contributors (cumulative): 53 | DMM Complexity: None\n\nDIFF:\n@@ -273,7 +273,7 @@ class FastAPI(Starlette):\n         path: str,\n         endpoint: Callable[..., Coroutine[Any, Any, Response]],\n         *,\n-        response_model: Optional[Type[Any]] = None,\n+        response_model: Any = None,\n         status_code: Optional[int] = None,\n         tags: Optional[List[Union[str, Enum]]] = None,\n         dependencies: Optional[Sequence[Depends]] = None,\n@@ -331,7 +331,7 @@ class FastAPI(Starlette):\n         self,\n         path: str,\n         *,\n-        response_model: Optional[Type[Any]] = None,\n+        response_model: Any = None,\n         status_code: Optional[int] = None,\n         tags: Optional[List[Union[str, Enum]]] = None,\n         dependencies: Optional[Sequence[Depends]] = None,\n@@ -434,7 +434,7 @@ class FastAPI(Starlette):\n         self,\n         path: str,\n         *,\n-        response_model: Optional[Type[Any]] = None,\n+        response_model: Any = None,\n         status_code: Optional[int] = None,\n         tags: Optional[List[Union[str, Enum]]] = None,\n         dependencies: Optional[Sequence[Depends]] = None,\n@@ -489,7 +489,7 @@ class FastAPI(Starlette):\n         self,\n         path: str,\n         *,\n-        response_model: Optional[Type[Any]] = None,\n+        response_model: Any = None,\n         status_code: Optional[int] = None,\n         tags: Optional[List[Union[str, Enum]]] = None,\n         dependencies: Optional[Sequence[Depends]] = None,\n@@ -544,7 +544,7 @@ class FastAPI(Starlette):\n         self,\n         path: str,\n         *,\n-        response_model: Optional[Type[Any]] = None,\n+        response_model: Any = None,\n         status_code: Optional[int] = None,\n         tags: Optional[List[Union[str, Enum]]] = None,\n         dependencies: Optional[Sequence[Depends]] = None,\n@@ -599,7 +599,7 @@ class FastAPI(Starlette):\n         self,\n         path: str,\n         *,\n-        response_model: Optional[Type[Any]] = None,\n+        response_model: Any = None,\n         status_code: Optional[int] = None,\n         tags: Optional[List[Union[str, Enum]]] = None,\n         dependencies: Optional[Sequence[Depends]] = None,\n@@ -654,7 +654,7 @@ class FastAPI(Starlette):\n         self,\n         path: str,\n         *,\n-        response_model: Optional[Type[Any]] = None,\n+        response_model: Any = None,\n         status_code: Optional[int] = None,\n         tags: Optional[List[Union[str, Enum]]] = None,\n         dependencies: Optional[Sequence[Depends]] = None,\n@@ -709,7 +709,7 @@ class FastAPI(Starlette):\n         self,\n         path: str,\n         *,\n-        response_model: Optional[Type[Any]] = None,\n+        response_model: Any = None,\n         status_code: Optional[int] = None,\n         tags: Optional[List[Union[str, Enum]]] = None,\n         dependencies: Optional[Sequence[Depends]] = None,\n@@ -764,7 +764,7 @@ class FastAPI(Starlette):\n         self,\n         path: str,\n         *,\n-        response_model: Optional[Type[Any]] = None,\n+        response_model: Any = None,\n         status_code: Optional[int] = None,\n         tags: Optional[List[Union[str, Enum]]] = None,\n         dependencies: Optional[Sequence[Depends]] = None,\n@@ -819,7 +819,7 @@ class FastAPI(Starlette):\n         self,\n         path: str,\n         *,\n-        response_model: Optional[Type[Any]] = None,\n+        response_model: Any = None,\n         status_code: Optional[int] = None,\n         tags: Optional[List[Union[str, Enum]]] = None,\n         dependencies: Optional[Sequence[Depends]] = None,\n\n@@ -315,7 +315,7 @@ class APIRoute(routing.Route):\n         path: str,\n         endpoint: Callable[..., Any],\n         *,\n-        response_model: Optional[Type[Any]] = None,\n+        response_model: Any = None,\n         status_code: Optional[int] = None,\n         tags: Optional[List[Union[str, Enum]]] = None,\n         dependencies: Optional[Sequence[params.Depends]] = None,\n@@ -511,7 +511,7 @@ class APIRouter(routing.Router):\n         path: str,\n         endpoint: Callable[..., Any],\n         *,\n-        response_model: Optional[Type[Any]] = None,\n+        response_model: Any = None,\n         status_code: Optional[int] = None,\n         tags: Optional[List[Union[str, Enum]]] = None,\n         dependencies: Optional[Sequence[params.Depends]] = None,\n@@ -592,7 +592,7 @@ class APIRouter(routing.Router):\n         self,\n         path: str,\n         *,\n-        response_model: Optional[Type[Any]] = None,\n+        response_model: Any = None,\n         status_code: Optional[int] = None,\n         tags: Optional[List[Union[str, Enum]]] = None,\n         dependencies: Optional[Sequence[params.Depends]] = None,\n@@ -787,7 +787,7 @@ class APIRouter(routing.Router):\n         self,\n         path: str,\n         *,\n-        response_model: Optional[Type[Any]] = None,\n+        response_model: Any = None,\n         status_code: Optional[int] = None,\n         tags: Optional[List[Union[str, Enum]]] = None,\n         dependencies: Optional[Sequence[params.Depends]] = None,\n@@ -843,7 +843,7 @@ class APIRouter(routing.Router):\n         self,\n         path: str,\n         *,\n-        response_model: Optional[Type[Any]] = None,\n+        response_model: Any = None,\n         status_code: Optional[int] = None,\n         tags: Optional[List[Union[str, Enum]]] = None,\n         dependencies: Optional[Sequence[params.Depends]] = None,\n@@ -899,7 +899,7 @@ class APIRouter(routing.Router):\n         self,\n         path: str,\n         *,\n-        response_model: Optional[Type[Any]] = None,\n+        response_model: Any = None,\n         status_code: Optional[int] = None,\n         tags: Optional[List[Union[str, Enum]]] = None,\n         dependencies: Optional[Sequence[params.Depends]] = None,\n@@ -955,7 +955,7 @@ class APIRouter(routing.Router):\n         self,\n         path: str,\n         *,\n-        response_model: Optional[Type[Any]] = None,\n+        response_model: Any = None,\n         status_code: Optional[int] = None,\n         tags: Optional[List[Union[str, Enum]]] = None,\n         dependencies: Optional[Sequence[params.Depends]] = None,\n@@ -1011,7 +1011,7 @@ class APIRouter(routing.Router):\n         self,\n         path: str,\n         *,\n-        response_model: Optional[Type[Any]] = None,\n+        response_model: Any = None,\n         status_code: Optional[int] = None,\n         tags: Optional[List[Union[str, Enum]]] = None,\n         dependencies: Optional[Sequence[params.Depends]] = None,\n@@ -1067,7 +1067,7 @@ class APIRouter(routing.Router):\n         self,\n         path: str,\n         *,\n-        response_model: Optional[Type[Any]] = None,\n+        response_model: Any = None,\n         status_code: Optional[int] = None,\n         tags: Optional[List[Union[str, Enum]]] = None,\n         dependencies: Optional[Sequence[params.Depends]] = None,\n@@ -1123,7 +1123,7 @@ class APIRouter(routing.Router):\n         self,\n         path: str,\n         *,\n-        response_model: Optional[Type[Any]] = None,\n+        response_model: Any = None,\n         status_code: Optional[int] = None,\n         tags: Optional[List[Union[str, Enum]]] = None,\n         dependencies: Optional[Sequence[params.Depends]] = None,\n@@ -1179,7 +1179,7 @@ class APIRouter(routing.Router):\n         self,\n         path: str,\n         *,\n-        response_model: Optional[Type[Any]] = None,\n+        response_model: Any = None,\n         status_code: Optional[int] = None,\n         tags: Optional[List[Union[str, Enum]]] = None,\n         dependencies: Optional[Sequence[params.Depends]] = None,\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#634cf22584fc4fd9ee53cfdf0ad6d48a2830ac34", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 34 | Lines Deleted: 2 | Files Changed: 2 | Hunks: 4 | Methods Changed: 7 | Complexity Δ (Sum/Max): 6/6 | Churn Δ: 36 | Churn Cumulative: 668 | Contributors (this commit): 15 | Commits (past 90d): 3 | Contributors (cumulative): 19 | DMM Complexity: 1.0\n\nDIFF:\n@@ -50,7 +50,7 @@ def create_response_field(\n     type_: Type[Any],\n     class_validators: Optional[Dict[str, Validator]] = None,\n     default: Optional[Any] = None,\n-    required: Union[bool, UndefinedType] = False,\n+    required: Union[bool, UndefinedType] = True,\n     model_config: Type[BaseConfig] = BaseConfig,\n     field_info: Optional[FieldInfo] = None,\n     alias: Optional[str] = None,\n\n@@ -1,4 +1,4 @@\n-from typing import List, Optional\n+from typing import List, Optional, Union\n \n import pytest\n from fastapi import FastAPI\n@@ -19,6 +19,19 @@ def get_invalid():\n     return {\"name\": \"invalid\", \"price\": \"foo\"}\n \n \n+@app.get(\"/items/invalidnone\", response_model=Item)\n+def get_invalid_none():\n+    return None\n+\n+\n+@app.get(\"/items/validnone\", response_model=Union[Item, None])\n+def get_valid_none(send_none: bool = False):\n+    if send_none:\n+        return None\n+    else:\n+        return {\"name\": \"invalid\", \"price\": 3.2}\n+\n+\n @app.get(\"/items/innerinvalid\", response_model=Item)\n def get_innerinvalid():\n     return {\"name\": \"double invalid\", \"price\": \"foo\", \"owner_ids\": [\"foo\", \"bar\"]}\n@@ -41,6 +54,25 @@ def test_invalid():\n         client.get(\"/items/invalid\")\n \n \n+def test_invalid_none():\n+    with pytest.raises(ValidationError):\n+        client.get(\"/items/invalidnone\")\n+\n+\n+def test_valid_none_data():\n+    response = client.get(\"/items/validnone\")\n+    data = response.json()\n+    assert response.status_code == 200\n+    assert data == {\"name\": \"invalid\", \"price\": 3.2, \"owner_ids\": None}\n+\n+\n+def test_valid_none_none():\n+    response = client.get(\"/items/validnone\", params={\"send_none\": \"true\"})\n+    data = response.json()\n+    assert response.status_code == 200\n+    assert data is None\n+\n+\n def test_double_invalid():\n     with pytest.raises(ValidationError):\n         client.get(\"/items/innerinvalid\")\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#b993b4af287e63904b675ba2ee1c232e86f2b072", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 31 | Lines Deleted: 4 | Files Changed: 2 | Hunks: 6 | Methods Changed: 4 | Complexity Δ (Sum/Max): 2/2 | Churn Δ: 35 | Churn Cumulative: 2110 | Contributors (this commit): 26 | Commits (past 90d): 2 | Contributors (cumulative): 28 | DMM Complexity: 0.782608695652174\n\nDIFF:\n@@ -161,7 +161,6 @@ def get_sub_dependant(\n     )\n     if security_requirement:\n         sub_dependant.security_requirements.append(security_requirement)\n-    sub_dependant.security_scopes = security_scopes\n     return sub_dependant\n \n \n@@ -278,7 +277,13 @@ def get_dependant(\n     path_param_names = get_path_param_names(path)\n     endpoint_signature = get_typed_signature(call)\n     signature_params = endpoint_signature.parameters\n-    dependant = Dependant(call=call, name=name, path=path, use_cache=use_cache)\n+    dependant = Dependant(\n+        call=call,\n+        name=name,\n+        path=path,\n+        security_scopes=security_scopes,\n+        use_cache=use_cache,\n+    )\n     for param_name, param in signature_params.items():\n         if isinstance(param.default, params.Depends):\n             sub_dependant = get_param_sub_dependant(\n@@ -495,7 +500,6 @@ async def solve_dependencies(\n                 name=sub_dependant.name,\n                 security_scopes=sub_dependant.security_scopes,\n             )\n-            use_sub_dependant.security_scopes = sub_dependant.security_scopes\n \n         solved_result = await solve_dependencies(\n             request=request,\n\n@@ -1,4 +1,4 @@\n-from fastapi import Depends, FastAPI\n+from fastapi import Depends, FastAPI, Security\n from fastapi.testclient import TestClient\n \n app = FastAPI()\n@@ -35,6 +35,19 @@ async def get_sub_counter_no_cache(\n     return {\"counter\": count, \"subcounter\": subcount}\n \n \n+@app.get(\"/scope-counter\")\n+async def get_scope_counter(\n+    count: int = Security(dep_counter),\n+    scope_count_1: int = Security(dep_counter, scopes=[\"scope\"]),\n+    scope_count_2: int = Security(dep_counter, scopes=[\"scope\"]),\n+):\n+    return {\n+        \"counter\": count,\n+        \"scope_counter_1\": scope_count_1,\n+        \"scope_counter_2\": scope_count_2,\n+    }\n+\n+\n client = TestClient(app)\n \n \n@@ -66,3 +79,13 @@ def test_sub_counter_no_cache():\n     response = client.get(\"/sub-counter-no-cache/\")\n     assert response.status_code == 200, response.text\n     assert response.json() == {\"counter\": 4, \"subcounter\": 3}\n+\n+\n+def test_security_cache():\n+    counter_holder[\"counter\"] = 0\n+    response = client.get(\"/scope-counter/\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\"counter\": 1, \"scope_counter_1\": 2, \"scope_counter_2\": 2}\n+    response = client.get(\"/scope-counter/\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\"counter\": 3, \"scope_counter_1\": 4, \"scope_counter_2\": 4}\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#f6808e76dcb332aefe16abab37b0480b16e7cdb1", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 2 | Files Changed: 2 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 4753 | Contributors (this commit): 33 | Commits (past 90d): 4 | Contributors (cumulative): 35 | DMM Complexity: None\n\nDIFF:\n@@ -409,7 +409,7 @@ class APIRoute(routing.Route):\n         self.description = description or inspect.cleandoc(self.endpoint.__doc__ or \"\")\n         # if a \"form feed\" character (page break) is found in the description text,\n         # truncate description text to the content preceding the first \"form feed\"\n-        self.description = self.description.split(\"\\f\")[0]\n+        self.description = self.description.split(\"\\f\")[0].strip()\n         response_fields = {}\n         for additional_status_code, response in self.responses.items():\n             assert isinstance(response, dict), \"An additional response must be a dict\"\n\n@@ -31,7 +31,7 @@ openapi_schema = {\n                     },\n                 },\n                 \"summary\": \"Create an item\",\n-                \"description\": \"Create an item with all the information:\\n\\n- **name**: each item must have a name\\n- **description**: a long description\\n- **price**: required\\n- **tax**: if the item doesn't have tax, you can omit this\\n- **tags**: a set of unique tag strings for this item\\n\",\n+                \"description\": \"Create an item with all the information:\\n\\n- **name**: each item must have a name\\n- **description**: a long description\\n- **price**: required\\n- **tax**: if the item doesn't have tax, you can omit this\\n- **tags**: a set of unique tag strings for this item\",\n                 \"operationId\": \"create_item_items__post\",\n                 \"requestBody\": {\n                     \"content\": {\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#ec072d75fe0aae16caec3a8aa3f57ca8d6f05de5", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 27 | Lines Deleted: 14 | Files Changed: 1 | Hunks: 14 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 41 | Churn Cumulative: 362 | Contributors (this commit): 11 | Commits (past 90d): 1 | Contributors (cumulative): 11 | DMM Complexity: 1.0\n\nDIFF:\n@@ -115,12 +115,14 @@ def get_redoc_html(\n \n \n def get_swagger_ui_oauth2_redirect_html() -> HTMLResponse:\n+    # copied from https://github.com/swagger-api/swagger-ui/blob/v4.14.0/dist/oauth2-redirect.html\n     html = \"\"\"\n-    <!DOCTYPE html>\n+    <!doctype html>\n     <html lang=\"en-US\">\n-    <body onload=\"run()\">\n-    </body>\n-    </html>\n+    <head>\n+        <title>Swagger UI: OAuth2 Redirect</title>\n+    </head>\n+    <body>\n     <script>\n         'use strict';\n         function run () {\n@@ -130,31 +132,32 @@ def get_swagger_ui_oauth2_redirect_html() -> HTMLResponse:\n             var isValid, qp, arr;\n \n             if (/code|token|error/.test(window.location.hash)) {\n-                qp = window.location.hash.substring(1);\n+                qp = window.location.hash.substring(1).replace('?', '&');\n             } else {\n                 qp = location.search.substring(1);\n             }\n \n-            arr = qp.split(\"&\")\n-            arr.forEach(function (v,i,_arr) { _arr[i] = '\"' + v.replace('=', '\":\"') + '\"';})\n+            arr = qp.split(\"&\");\n+            arr.forEach(function (v,i,_arr) { _arr[i] = '\"' + v.replace('=', '\":\"') + '\"';});\n             qp = qp ? JSON.parse('{' + arr.join() + '}',\n                     function (key, value) {\n-                        return key === \"\" ? value : decodeURIComponent(value)\n+                        return key === \"\" ? value : decodeURIComponent(value);\n                     }\n-            ) : {}\n+            ) : {};\n \n-            isValid = qp.state === sentState\n+            isValid = qp.state === sentState;\n \n             if ((\n               oauth2.auth.schema.get(\"flow\") === \"accessCode\" ||\n-            oauth2.auth.schema.get(\"flow\") === \"authorizationCode\"\n+              oauth2.auth.schema.get(\"flow\") === \"authorizationCode\" ||\n+              oauth2.auth.schema.get(\"flow\") === \"authorization_code\"\n             ) && !oauth2.auth.code) {\n                 if (!isValid) {\n                     oauth2.errCb({\n                         authId: oauth2.auth.name,\n                         source: \"auth\",\n                         level: \"warning\",\n-                        message: \"Authorization may be unsafe, passed state was changed in server Passed state wasn't returned from auth server\"\n+                        message: \"Authorization may be unsafe, passed state was changed in server. The passed state wasn't returned from auth server.\"\n                     });\n                 }\n \n@@ -163,7 +166,7 @@ def get_swagger_ui_oauth2_redirect_html() -> HTMLResponse:\n                     oauth2.auth.code = qp.code;\n                     oauth2.callback({auth: oauth2.auth, redirectUrl: redirectUrl});\n                 } else {\n-                    let oauthErrorMsg\n+                    let oauthErrorMsg;\n                     if (qp.error) {\n                         oauthErrorMsg = \"[\"+qp.error+\"]: \" +\n                             (qp.error_description ? qp.error_description+ \". \" : \"no accessCode received from the server. \") +\n@@ -174,7 +177,7 @@ def get_swagger_ui_oauth2_redirect_html() -> HTMLResponse:\n                         authId: oauth2.auth.name,\n                         source: \"auth\",\n                         level: \"error\",\n-                        message: oauthErrorMsg || \"[Authorization failed]: no accessCode received from the server\"\n+                        message: oauthErrorMsg || \"[Authorization failed]: no accessCode received from the server.\"\n                     });\n                 }\n             } else {\n@@ -182,6 +185,16 @@ def get_swagger_ui_oauth2_redirect_html() -> HTMLResponse:\n             }\n             window.close();\n         }\n+\n+        if (document.readyState !== 'loading') {\n+            run();\n+        } else {\n+            document.addEventListener('DOMContentLoaded', function () {\n+                run();\n+            });\n+        }\n     </script>\n+    </body>\n+    </html>\n         \"\"\"\n     return HTMLResponse(content=html)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#7d6e70791d0d4c5cf271bcd231ba78d1a3c0f582", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 370 | Contributors (this commit): 2 | Commits (past 90d): 3 | Contributors (cumulative): 2 | DMM Complexity: None\n\nDIFF:\n@@ -1,6 +1,6 @@\n \"\"\"FastAPI framework, high performance, easy to learn, fast to code, ready for production\"\"\"\n \n-__version__ = \"0.79.1\"\n+__version__ = \"0.80.0\"\n \n from starlette import status as status\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#8c6ad3561534d69a2ccb0d3d0e9e60afc5b388de", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 11 | Lines Deleted: 3 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 4/4 | Churn Δ: 14 | Churn Cumulative: 14 | Contributors (this commit): 2 | Commits (past 90d): 1 | Contributors (cumulative): 2 | DMM Complexity: 1.0\n\nDIFF:\n@@ -9,9 +9,17 @@ security = HTTPBasic()\n \n \n def get_current_username(credentials: HTTPBasicCredentials = Depends(security)):\n-    correct_username = secrets.compare_digest(credentials.username, \"stanleyjobson\")\n-    correct_password = secrets.compare_digest(credentials.password, \"swordfish\")\n-    if not (correct_username and correct_password):\n+    current_username_bytes = credentials.username.encode(\"utf8\")\n+    correct_username_bytes = b\"stanleyjobson\"\n+    is_correct_username = secrets.compare_digest(\n+        current_username_bytes, correct_username_bytes\n+    )\n+    current_password_bytes = credentials.password.encode(\"utf8\")\n+    correct_password_bytes = b\"swordfish\"\n+    is_correct_password = secrets.compare_digest(\n+        current_password_bytes, correct_password_bytes\n+    )\n+    if not (is_correct_username and is_correct_password):\n         raise HTTPException(\n             status_code=status.HTTP_401_UNAUTHORIZED,\n             detail=\"Incorrect email or password\",\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#9359a8d65fdff4460d01d652ccafd31507c6c426", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 3 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 2 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 4633 | Contributors (this commit): 30 | Commits (past 90d): 4 | Contributors (cumulative): 30 | DMM Complexity: 0.0\n\nDIFF:\n@@ -209,7 +209,9 @@ def get_request_handler(\n                         else:\n                             body = body_bytes\n         except json.JSONDecodeError as e:\n-            raise RequestValidationError([ErrorWrapper(e, (\"body\", e.pos))], body=e.doc)\n+            raise RequestValidationError(\n+                [ErrorWrapper(e, (\"body\", e.pos))], body=e.doc\n+            ) from e\n         except Exception as e:\n             raise HTTPException(\n                 status_code=400, detail=\"There was an error parsing the body\"\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#eb3ab337ab49d1904f027c0a523456cfe40d582d", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 97 | Lines Deleted: 0 | Files Changed: 2 | Hunks: 2 | Methods Changed: 9 | Complexity Δ (Sum/Max): 12/11 | Churn Δ: 97 | Churn Cumulative: 4730 | Contributors (this commit): 31 | Commits (past 90d): 6 | Contributors (cumulative): 32 | DMM Complexity: 0.9649122807017544\n\nDIFF:\n@@ -212,6 +212,8 @@ def get_request_handler(\n             raise RequestValidationError(\n                 [ErrorWrapper(e, (\"body\", e.pos))], body=e.doc\n             ) from e\n+        except HTTPException:\n+            raise\n         except Exception as e:\n             raise HTTPException(\n                 status_code=400, detail=\"There was an error parsing the body\"\n\n@@ -0,0 +1,95 @@\n+from pathlib import Path\n+from typing import Optional\n+\n+from fastapi import APIRouter, FastAPI, File, UploadFile\n+from fastapi.exceptions import HTTPException\n+from fastapi.testclient import TestClient\n+\n+app = FastAPI()\n+\n+router = APIRouter()\n+\n+\n+class ContentSizeLimitMiddleware:\n+    \"\"\"Content size limiting middleware for ASGI applications\n+    Args:\n+      app (ASGI application): ASGI application\n+      max_content_size (optional): the maximum content size allowed in bytes, None for no limit\n+    \"\"\"\n+\n+    def __init__(self, app: APIRouter, max_content_size: Optional[int] = None):\n+        self.app = app\n+        self.max_content_size = max_content_size\n+\n+    def receive_wrapper(self, receive):\n+        received = 0\n+\n+        async def inner():\n+            nonlocal received\n+            message = await receive()\n+            if message[\"type\"] != \"http.request\":\n+                return message  # pragma: no cover\n+\n+            body_len = len(message.get(\"body\", b\"\"))\n+            received += body_len\n+            if received > self.max_content_size:\n+                raise HTTPException(\n+                    422,\n+                    detail={\n+                        \"name\": \"ContentSizeLimitExceeded\",\n+                        \"code\": 999,\n+                        \"message\": \"File limit exceeded\",\n+                    },\n+                )\n+            return message\n+\n+        return inner\n+\n+    async def __call__(self, scope, receive, send):\n+        if scope[\"type\"] != \"http\" or self.max_content_size is None:\n+            await self.app(scope, receive, send)\n+            return\n+\n+        wrapper = self.receive_wrapper(receive)\n+        await self.app(scope, wrapper, send)\n+\n+\n+@router.post(\"/middleware\")\n+def run_middleware(file: UploadFile = File(..., description=\"Big File\")):\n+    return {\"message\": \"OK\"}\n+\n+\n+app.include_router(router)\n+app.add_middleware(ContentSizeLimitMiddleware, max_content_size=2**8)\n+\n+\n+client = TestClient(app)\n+\n+\n+def test_custom_middleware_exception(tmp_path: Path):\n+    default_pydantic_max_size = 2**16\n+    path = tmp_path / \"test.txt\"\n+    path.write_bytes(b\"x\" * (default_pydantic_max_size + 1))\n+\n+    with client:\n+        with open(path, \"rb\") as file:\n+            response = client.post(\"/middleware\", files={\"file\": file})\n+        assert response.status_code == 422, response.text\n+        assert response.json() == {\n+            \"detail\": {\n+                \"name\": \"ContentSizeLimitExceeded\",\n+                \"code\": 999,\n+                \"message\": \"File limit exceeded\",\n+            }\n+        }\n+\n+\n+def test_custom_middleware_exception_not_raised(tmp_path: Path):\n+    path = tmp_path / \"test.txt\"\n+    path.write_bytes(b\"<file content>\")\n+\n+    with client:\n+        with open(path, \"rb\") as file:\n+            response = client.post(\"/middleware\", files={\"file\": file})\n+        assert response.status_code == 200, response.text\n+        assert response.json() == {\"message\": \"OK\"}\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#ca2fae0588260f93f886aa59f689e3018e934a27", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 44 | Lines Deleted: 1 | Files Changed: 4 | Hunks: 6 | Methods Changed: 1 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 45 | Churn Cumulative: 4724 | Contributors (this commit): 32 | Commits (past 90d): 5 | Contributors (cumulative): 42 | DMM Complexity: 1.0\n\nDIFF:\n@@ -34,6 +34,7 @@ from pydantic import BaseModel, create_model\n from pydantic.error_wrappers import ErrorWrapper\n from pydantic.errors import MissingError\n from pydantic.fields import (\n+    SHAPE_FROZENSET,\n     SHAPE_LIST,\n     SHAPE_SEQUENCE,\n     SHAPE_SET,\n@@ -58,6 +59,7 @@ from starlette.websockets import WebSocket\n sequence_shapes = {\n     SHAPE_LIST,\n     SHAPE_SET,\n+    SHAPE_FROZENSET,\n     SHAPE_TUPLE,\n     SHAPE_SEQUENCE,\n     SHAPE_TUPLE_ELLIPSIS,\n\n@@ -1,5 +1,5 @@\n import http\n-from typing import Optional\n+from typing import FrozenSet, Optional\n \n from fastapi import FastAPI, Path, Query\n \n@@ -192,3 +192,8 @@ def get_query_param_required_type(query: int = Query()):\n @app.get(\"/enum-status-code\", status_code=http.HTTPStatus.CREATED)\n def get_enum_status_code():\n     return \"foo bar\"\n+\n+\n+@app.get(\"/query/frozenset\")\n+def get_query_type_frozenset(query: FrozenSet[int] = Query(...)):\n+    return \",\".join(map(str, sorted(query)))\n\n@@ -1090,6 +1090,41 @@ openapi_schema = {\n                 \"operationId\": \"get_enum_status_code_enum_status_code_get\",\n             }\n         },\n+        \"/query/frozenset\": {\n+            \"get\": {\n+                \"summary\": \"Get Query Type Frozenset\",\n+                \"operationId\": \"get_query_type_frozenset_query_frozenset_get\",\n+                \"parameters\": [\n+                    {\n+                        \"required\": True,\n+                        \"schema\": {\n+                            \"title\": \"Query\",\n+                            \"uniqueItems\": True,\n+                            \"type\": \"array\",\n+                            \"items\": {\"type\": \"integer\"},\n+                        },\n+                        \"name\": \"query\",\n+                        \"in\": \"query\",\n+                    }\n+                ],\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                    },\n+                    \"422\": {\n+                        \"description\": \"Validation Error\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\n+                                    \"$ref\": \"#/components/schemas/HTTPValidationError\"\n+                                }\n+                            }\n+                        },\n+                    },\n+                },\n+            }\n+        },\n     },\n     \"components\": {\n         \"schemas\": {\n\n@@ -53,6 +53,7 @@ response_not_valid_int = {\n         (\"/query/param-required/int\", 422, response_missing),\n         (\"/query/param-required/int?query=50\", 200, \"foo bar 50\"),\n         (\"/query/param-required/int?query=foo\", 422, response_not_valid_int),\n+        (\"/query/frozenset/?query=1&query=1&query=2\", 200, \"1,2\"),\n     ],\n )\n def test_get_path(path, expected_status, expected_response):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
