{"custom_id": "flask#b55bc0baa291fb3ac2f62f5852c2469f1dda9bdc", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 0 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 646 | Contributors (this commit): 14 | Commits (past 90d): 1 | Contributors (cumulative): 14 | DMM Complexity: None\n\nDIFF:\n@@ -9,8 +9,6 @@\n     :license: BSD, see LICENSE for more details.\n \"\"\"\n \n-from __future__ import with_statement\n-\n import sys\n from functools import update_wrapper\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#7368a164c7506046a4a0b0ce2113c2aaa7800087", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 6 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 2 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 6 | Churn Cumulative: 353 | Contributors (this commit): 15 | Commits (past 90d): 1 | Contributors (cumulative): 15 | DMM Complexity: None\n\nDIFF:\n@@ -81,7 +81,13 @@ setup(\n         'License :: OSI Approved :: BSD License',\n         'Operating System :: OS Independent',\n         'Programming Language :: Python',\n+        'Programming Language :: Python :: 2',\n+        'Programming Language :: Python :: 2.6',\n+        'Programming Language :: Python :: 2.7',\n         'Programming Language :: Python :: 3',\n+        'Programming Language :: Python :: 3.3',\n+        'Programming Language :: Python :: 3.4',\n+        'Programming Language :: Python :: 3.5',\n         'Topic :: Internet :: WWW/HTTP :: Dynamic Content',\n         'Topic :: Software Development :: Libraries :: Python Modules'\n     ],\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#952a6c8989137bb0c44adaf37df0227b8e426a75", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 23 | Lines Deleted: 1 | Files Changed: 3 | Hunks: 3 | Methods Changed: 4 | Complexity Δ (Sum/Max): 8/9 | Churn Δ: 24 | Churn Cumulative: 6375 | Contributors (this commit): 66 | Commits (past 90d): 6 | Contributors (cumulative): 77 | DMM Complexity: 0.8461538461538461\n\nDIFF:\n@@ -833,6 +833,7 @@ class Flask(_PackageBoundObject):\n             self.debug = bool(debug)\n         options.setdefault('use_reloader', self.debug)\n         options.setdefault('use_debugger', self.debug)\n+        options.setdefault('passthrough_errors', True)\n         try:\n             run_simple(host, port, self, **options)\n         finally:\n\n@@ -422,7 +422,8 @@ def run_command(info, host, port, reload, debugger, eager_loading,\n             print(' * Forcing debug %s' % (info.debug and 'on' or 'off'))\n \n     run_simple(host, port, app, use_reloader=reload,\n-               use_debugger=debugger, threaded=with_threads)\n+               use_debugger=debugger, threaded=with_threads,\n+               passthrough_errors=True)\n \n \n @click.command('shell', short_help='Runs a shell in the app context.')\n\n@@ -1222,6 +1222,26 @@ def test_exception_propagation():\n         t.join()\n \n \n+@pytest.mark.parametrize('debug', [True, False])\n+@pytest.mark.parametrize('use_debugger', [True, False])\n+@pytest.mark.parametrize('use_reloader', [True, False])\n+@pytest.mark.parametrize('propagate_exceptions', [None, True, False])\n+def test_werkzeug_passthrough_errors(monkeypatch, debug, use_debugger,\n+                                     use_reloader, propagate_exceptions):\n+    rv = {}\n+\n+    # Mocks werkzeug.serving.run_simple method\n+    def run_simple_mock(*args, **kwargs):\n+        rv['passthrough_errors'] = kwargs.get('passthrough_errors')\n+\n+    app = flask.Flask(__name__)\n+    monkeypatch.setattr(werkzeug.serving, 'run_simple', run_simple_mock)\n+    app.config['PROPAGATE_EXCEPTIONS'] = propagate_exceptions\n+    app.run(debug=debug, use_debugger=use_debugger, use_reloader=use_reloader)\n+    # make sure werkzeug always passes errors through\n+    assert rv['passthrough_errors']\n+\n+\n def test_max_content_length():\n     app = flask.Flask(__name__)\n     app.config['MAX_CONTENT_LENGTH'] = 64\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#826d7475cdab43b85d79f99e8eae5dabb01baf7b", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 10 | Lines Deleted: 8 | Files Changed: 1 | Hunks: 3 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 18 | Churn Cumulative: 4167 | Contributors (this commit): 59 | Commits (past 90d): 5 | Contributors (cumulative): 59 | DMM Complexity: None\n\nDIFF:\n@@ -1791,16 +1791,18 @@ class Flask(_PackageBoundObject):\n         raise error\n \n     def preprocess_request(self):\n-        \"\"\"Called before the actual request dispatching and will\n-        call each :meth:`before_request` decorated function, passing no\n-        arguments.\n-        If any of these functions returns a value, it's handled as\n-        if it was the return value from the view and further\n-        request handling is stopped.\n+        \"\"\"Called before the request dispatching.\n \n-        This also triggers the :meth:`url_value_processor` functions before\n-        the actual :meth:`before_request` functions are called.\n+        Triggers two set of hook functions that should be invoked prior to request dispatching:\n+        :attr:`url_value_preprocessors` and :attr:`before_request_funcs`\n+        (the latter are functions decorated with :meth:`before_request` decorator).\n+        In both cases, the method triggers only the functions that are either global\n+        or registered to the current blueprint.\n+\n+        If any function in :attr:`before_request_funcs` returns a value, it's handled as if it was\n+        the return value from the view function, and further request handling is stopped.\n         \"\"\"\n+\n         bp = _request_ctx_stack.top.request.blueprint\n \n         funcs = self.url_value_preprocessors.get(None, ())\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#edb65cc0f056bdfb201531066976e1cb8a90ad1f", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 1834 | Contributors (this commit): 37 | Commits (past 90d): 2 | Contributors (cumulative): 37 | DMM Complexity: None\n\nDIFF:\n@@ -540,7 +540,7 @@ def send_file(filename_or_fp, mimetype=None, as_attachment=False,\n \n     if add_etags and filename is not None:\n         try:\n-            rv.set_etag('flask-%s-%s-%s' % (\n+            rv.set_etag('%s-%s-%s' % (\n                 os.path.getmtime(filename),\n                 os.path.getsize(filename),\n                 adler32(\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#daceb3e3a028b4b408c4bbdbdef0047f1de3a7c9", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 101 | Lines Deleted: 37 | Files Changed: 2 | Hunks: 10 | Methods Changed: 9 | Complexity Δ (Sum/Max): 10/6 | Churn Δ: 138 | Churn Cumulative: 855 | Contributors (this commit): 14 | Commits (past 90d): 2 | Contributors (cumulative): 18 | DMM Complexity: 0.5116279069767442\n\nDIFF:\n@@ -199,10 +199,22 @@ def htmlsafe_dump(obj, fp, **kwargs):\n \n \n def jsonify(*args, **kwargs):\n-    \"\"\"Creates a :class:`~flask.Response` with the JSON representation of\n-    the given arguments with an :mimetype:`application/json` mimetype.  The\n-    arguments to this function are the same as to the :class:`dict`\n-    constructor.\n+    \"\"\"This function wraps :func:`dumps` to add a few enhancements that make\n+    life easier.  It turns the JSON output into a :class:`~flask.Response`\n+    object with the :mimetype:`application/json` mimetype.  For convenience, it\n+    also converts multiple arguments into an array or multiple keyword arguments\n+    into a dict.  This means that both ``jsonify(1,2,3)`` and\n+    ``jsonify([1,2,3])`` serialize to ``[1,2,3]``.\n+\n+    For clarity, the JSON serialization behavior has the following differences\n+    from :func:`dumps`:\n+\n+    1. Single argument: Passed straight through to :func:`dumps`.\n+    2. Multiple arguments: Converted to an array before being passed to\n+    :func:`dumps`.\n+    3. Multiple keyword arguments: Converted to a dict before being passed to\n+    :func:`dumps`.\n+    4. Both args and kwargs: Behavior undefined and will throw an exception.\n \n     Example usage::\n \n@@ -222,8 +234,10 @@ def jsonify(*args, **kwargs):\n             \"id\": 42\n         }\n \n-    For security reasons only objects are supported toplevel.  For more\n-    information about this, have a look at :ref:`json-security`.\n+\n+    .. versionchanged:: 1.0\n+       Added support for serializing top-level arrays. This introduces a\n+       security risk in ancient browsers. See :ref:`json_security` for details.\n \n     This function's response will be pretty printed if it was not requested\n     with ``X-Requested-With: XMLHttpRequest`` to simplify debugging unless\n@@ -242,11 +256,21 @@ def jsonify(*args, **kwargs):\n         indent = 2\n         separators = (', ', ': ')\n \n+    if args and kwargs:\n+        raise TypeError(\n+            \"jsonify() behavior undefined when passed both args and kwargs\"\n+        )\n+    elif len(args) == 1: # single args are passed directly to dumps()\n+        data = args[0]\n+    elif args: # convert multiple args into an array\n+        data = list(args)\n+    else: # convert kwargs to a dict\n+        data = dict(kwargs)\n+\n     # Note that we add '\\n' to end of response\n     # (see https://github.com/mitsuhiko/flask/pull/1262)\n     rv = current_app.response_class(\n-        (dumps(dict(*args, **kwargs), indent=indent, separators=separators),\n-         '\\n'),\n+        (dumps(data, indent=indent, separators=separators), '\\n'),\n         mimetype='application/json')\n     return rv\n \n\n@@ -31,24 +31,6 @@ def has_encoding(name):\n \n class TestJSON(object):\n \n-    def test_jsonify_date_types(self):\n-        \"\"\"Test jsonify with datetime.date and datetime.datetime types.\"\"\"\n-\n-        test_dates = (\n-            datetime.datetime(1973, 3, 11, 6, 30, 45),\n-            datetime.date(1975, 1, 5)\n-        )\n-\n-        app = flask.Flask(__name__)\n-        c = app.test_client()\n-\n-        for i, d in enumerate(test_dates):\n-            url = '/datetest{0}'.format(i)\n-            app.add_url_rule(url, str(i), lambda val=d: flask.jsonify(x=val))\n-            rv = c.get(url)\n-            assert rv.mimetype == 'application/json'\n-            assert flask.json.loads(rv.data)['x'] == http_date(d.timetuple())\n-\n     def test_post_empty_json_adds_exception_to_response_content_in_debug(self):\n         app = flask.Flask(__name__)\n         app.config['DEBUG'] = True\n@@ -103,8 +85,41 @@ class TestJSON(object):\n                      content_type='application/json; charset=iso-8859-15')\n         assert resp.data == u'Hällo Wörld'.encode('utf-8')\n \n-    def test_jsonify(self):\n-        d = dict(a=23, b=42, c=[1, 2, 3])\n+    def test_json_as_unicode(self):\n+        app = flask.Flask(__name__)\n+\n+        app.config['JSON_AS_ASCII'] = True\n+        with app.app_context():\n+            rv = flask.json.dumps(u'\\N{SNOWMAN}')\n+            assert rv == '\"\\\\u2603\"'\n+\n+        app.config['JSON_AS_ASCII'] = False\n+        with app.app_context():\n+            rv = flask.json.dumps(u'\\N{SNOWMAN}')\n+            assert rv == u'\"\\u2603\"'\n+\n+    def test_jsonify_basic_types(self):\n+        \"\"\"Test jsonify with basic types.\"\"\"\n+        # Should be able to use pytest parametrize on this, but I couldn't\n+        # figure out the correct syntax\n+        # https://pytest.org/latest/parametrize.html#pytest-mark-parametrize-parametrizing-test-functions\n+        test_data = (0, 1, 23, 3.14, 's', \"longer string\", True, False,)\n+        app = flask.Flask(__name__)\n+        c = app.test_client()\n+        for i, d in enumerate(test_data):\n+            url = '/jsonify_basic_types{0}'.format(i)\n+            app.add_url_rule(url, str(i), lambda x=d: flask.jsonify(x))\n+            rv = c.get(url)\n+            assert rv.mimetype == 'application/json'\n+            assert flask.json.loads(rv.data) == d\n+\n+    def test_jsonify_dicts(self):\n+        \"\"\"Test jsonify with dicts and kwargs unpacking.\"\"\"\n+        d = dict(\n+            a=0, b=23, c=3.14, d='t', e='Hi', f=True, g=False,\n+            h=['test list', 10, False],\n+            i={'test':'dict'}\n+        )\n         app = flask.Flask(__name__)\n         @app.route('/kw')\n         def return_kwargs():\n@@ -118,18 +133,43 @@ class TestJSON(object):\n             assert rv.mimetype == 'application/json'\n             assert flask.json.loads(rv.data) == d\n \n-    def test_json_as_unicode(self):\n+    def test_jsonify_arrays(self):\n+        \"\"\"Test jsonify of lists and args unpacking.\"\"\"\n+        l = [\n+            0, 42, 3.14, 't', 'hello', True, False,\n+            ['test list', 2, False],\n+            {'test':'dict'}\n+        ]\n         app = flask.Flask(__name__)\n+        @app.route('/args_unpack')\n+        def return_args_unpack():\n+            return flask.jsonify(*l)\n+        @app.route('/array')\n+        def return_array():\n+            return flask.jsonify(l)\n+        c = app.test_client()\n+        for url in '/args_unpack', '/array':\n+            rv = c.get(url)\n+            assert rv.mimetype == 'application/json'\n+            assert flask.json.loads(rv.data) == l\n \n-        app.config['JSON_AS_ASCII'] = True\n-        with app.app_context():\n-            rv = flask.json.dumps(u'\\N{SNOWMAN}')\n-            assert rv == '\"\\\\u2603\"'\n+    def test_jsonify_date_types(self):\n+        \"\"\"Test jsonify with datetime.date and datetime.datetime types.\"\"\"\n \n-        app.config['JSON_AS_ASCII'] = False\n-        with app.app_context():\n-            rv = flask.json.dumps(u'\\N{SNOWMAN}')\n-            assert rv == u'\"\\u2603\"'\n+        test_dates = (\n+            datetime.datetime(1973, 3, 11, 6, 30, 45),\n+            datetime.date(1975, 1, 5)\n+        )\n+\n+        app = flask.Flask(__name__)\n+        c = app.test_client()\n+\n+        for i, d in enumerate(test_dates):\n+            url = '/datetest{0}'.format(i)\n+            app.add_url_rule(url, str(i), lambda val=d: flask.jsonify(x=val))\n+            rv = c.get(url)\n+            assert rv.mimetype == 'application/json'\n+            assert flask.json.loads(rv.data)['x'] == http_date(d.timetuple())\n \n     def test_json_attr(self):\n         app = flask.Flask(__name__)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#0edf0a0e3a8b0f3e8309822044631fe7864d3066", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 3 | Lines Deleted: 5 | Files Changed: 1 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 8 | Churn Cumulative: 401 | Contributors (this commit): 13 | Commits (past 90d): 2 | Contributors (cumulative): 13 | DMM Complexity: 1.0\n\nDIFF:\n@@ -237,7 +237,7 @@ def jsonify(*args, **kwargs):\n \n     .. versionchanged:: 1.0\n        Added support for serializing top-level arrays. This introduces a\n-       security risk in ancient browsers. See :ref:`json_security` for details.\n+       security risk in ancient browsers. See :ref:`json-security` for details.\n \n     This function's response will be pretty printed if it was not requested\n     with ``X-Requested-With: XMLHttpRequest`` to simplify debugging unless\n@@ -262,10 +262,8 @@ def jsonify(*args, **kwargs):\n         )\n     elif len(args) == 1:  # single args are passed directly to dumps()\n         data = args[0]\n-    elif args: # convert multiple args into an array\n-        data = list(args)\n-    else: # convert kwargs to a dict\n-        data = dict(kwargs)\n+    else:\n+        data = args or kwargs\n \n     # Note that we add '\\n' to end of response\n     # (see https://github.com/mitsuhiko/flask/pull/1262)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#992d9be96ef0f0d746bd4a77b9081bff3b44524b", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 6 | Lines Deleted: 11 | Files Changed: 1 | Hunks: 5 | Methods Changed: 2 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 17 | Churn Cumulative: 418 | Contributors (this commit): 14 | Commits (past 90d): 3 | Contributors (cumulative): 14 | DMM Complexity: 1.0\n\nDIFF:\n@@ -195,7 +195,7 @@ def htmlsafe_dumps(obj, **kwargs):\n \n def htmlsafe_dump(obj, fp, **kwargs):\n     \"\"\"Like :func:`htmlsafe_dumps` but writes into a file object.\"\"\"\n-    fp.write(unicode(htmlsafe_dumps(obj, **kwargs)))\n+    fp.write(text_type(htmlsafe_dumps(obj, **kwargs)))\n \n \n def jsonify(*args, **kwargs):\n@@ -251,26 +251,21 @@ def jsonify(*args, **kwargs):\n     indent = None\n     separators = (',', ':')\n \n-    if current_app.config['JSONIFY_PRETTYPRINT_REGULAR'] \\\n-       and not request.is_xhr:\n+    if current_app.config['JSONIFY_PRETTYPRINT_REGULAR'] and not request.is_xhr:\n         indent = 2\n         separators = (', ', ': ')\n \n     if args and kwargs:\n-        raise TypeError(\n-            \"jsonify() behavior undefined when passed both args and kwargs\"\n-        )\n+        raise TypeError('jsonify() behavior undefined when passed both args and kwargs')\n     elif len(args) == 1:  # single args are passed directly to dumps()\n         data = args[0]\n     else:\n         data = args or kwargs\n \n-    # Note that we add '\\n' to end of response\n-    # (see https://github.com/mitsuhiko/flask/pull/1262)\n-    rv = current_app.response_class(\n+    return current_app.response_class(\n         (dumps(data, indent=indent, separators=separators), '\\n'),\n-        mimetype='application/json')\n-    return rv\n+        mimetype='application/json'\n+    )\n \n \n def tojson_filter(obj, **kwargs):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#a4df0fbb397e13bd7c6475dbde5f44727474c3c7", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 648 | Contributors (this commit): 14 | Commits (past 90d): 2 | Contributors (cumulative): 14 | DMM Complexity: None\n\nDIFF:\n@@ -36,7 +36,7 @@ class _AppCtxGlobals(object):\n             return self.__dict__.pop(name, default)\n \n     def setdefault(self, name, default=None):\n-        self.__dict__.setdefault(name, default)\n+        return self.__dict__.setdefault(name, default)\n \n     def __contains__(self, item):\n         return item in self.__dict__\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#6d0bbd627c8ff7b6339c894342d00eae11deb7ec", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 2 | Files Changed: 2 | Hunks: 2 | Methods Changed: 2 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 4372 | Contributors (this commit): 64 | Commits (past 90d): 6 | Contributors (cumulative): 72 | DMM Complexity: None\n\nDIFF:\n@@ -421,7 +421,7 @@ class Flask(_PackageBoundObject):\n         #: A dictionary with lists of functions that should be called after\n         #: each request.  The key of the dictionary is the name of the blueprint\n         #: this function is active for, ``None`` for all requests.  This can for\n-        #: example be used to open database connections or getting hold of the\n+        #: example be used to close database connections or getting hold of the\n         #: currently logged in user.  To register a function here, use the\n         #: :meth:`after_request` decorator.\n         self.after_request_funcs = {}\n\n@@ -222,7 +222,7 @@ class Config(dict):\n             app.config['IMAGE_STORE_BASE_URL'] = 'http://img.website.com'\n             image_store_config = app.config.get_namespace('IMAGE_STORE_')\n \n-        The resulting dictionary `image_store` would look like::\n+        The resulting dictionary `image_store_config` would look like::\n \n             {\n                 'type': 'fs',\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#07fdd1930b947b2cc074706ecdfea908ffdb05b9", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 3 | Lines Deleted: 5 | Files Changed: 1 | Hunks: 2 | Methods Changed: 2 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 8 | Churn Cumulative: 4177 | Contributors (this commit): 59 | Commits (past 90d): 6 | Contributors (cumulative): 59 | DMM Complexity: None\n\nDIFF:\n@@ -421,9 +421,8 @@ class Flask(_PackageBoundObject):\n         #: A dictionary with lists of functions that should be called after\n         #: each request.  The key of the dictionary is the name of the blueprint\n         #: this function is active for, ``None`` for all requests.  This can for\n-        #: example be used to close database connections or getting hold of the\n-        #: currently logged in user.  To register a function here, use the\n-        #: :meth:`after_request` decorator.\n+        #: example be used to close database connections. To register a function\n+        #: here, use the :meth:`after_request` decorator.\n         self.after_request_funcs = {}\n \n         #: A dictionary with lists of functions that are called after\n@@ -791,8 +790,7 @@ class Flask(_PackageBoundObject):\n \n         It is not recommended to use this function for development with\n         automatic reloading as this is badly supported.  Instead you should\n-        be using the :command:`flask` command line script's ``runserver``\n-        support.\n+        be using the :command:`flask` command line script's ``run`` support.\n \n         .. admonition:: Keep in Mind\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#4dc2ef19eaa4ced5cb2f4a2a1673e65459c355d2", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 26 | Lines Deleted: 71 | Files Changed: 5 | Hunks: 31 | Methods Changed: 16 | Complexity Δ (Sum/Max): -14/0 | Churn Δ: 97 | Churn Cumulative: 2550 | Contributors (this commit): 14 | Commits (past 90d): 6 | Contributors (cumulative): 26 | DMM Complexity: 0.0\n\nDIFF:\n@@ -307,12 +307,8 @@ def test_missing_session():\n     app = flask.Flask(__name__)\n \n     def expect_exception(f, *args, **kwargs):\n-        try:\n-            f(*args, **kwargs)\n-        except RuntimeError as e:\n-            assert e.args and 'session is unavailable' in e.args[0]\n-        else:\n-            assert False, 'expected exception'\n+        e = pytest.raises(RuntimeError, f, *args, **kwargs)\n+        assert e.value.args and 'session is unavailable' in e.value.args[0]\n     with app.test_request_context():\n         assert flask.session.get('missing_key') is None\n         expect_exception(flask.session.__setitem__, 'foo', 42)\n@@ -853,12 +849,9 @@ def test_trapping_of_bad_request_key_errors():\n \n     app.config['TRAP_BAD_REQUEST_ERRORS'] = True\n     c = app.test_client()\n-    try:\n-        c.get('/fail')\n-    except KeyError as e:\n-        assert isinstance(e, BadRequest)\n-    else:\n-        assert False, 'Expected exception'\n+    with pytest.raises(KeyError) as e:\n+        c.get(\"/fail\")\n+    assert e.errisinstance(BadRequest)\n \n \n def test_trapping_of_all_http_exceptions():\n@@ -888,13 +881,10 @@ def test_enctype_debug_helper():\n     # stack otherwise and we want to ensure that this is not the case\n     # to not negatively affect other tests.\n     with app.test_client() as c:\n-        try:\n+        with pytest.raises(DebugFilesKeyError) as e:\n             c.post('/fail', data={'foo': 'index.txt'})\n-        except DebugFilesKeyError as e:\n-            assert 'no file contents were transmitted' in str(e)\n-            assert 'This was submitted: \"index.txt\"' in str(e)\n-        else:\n-            assert False, 'Expected exception'\n+        assert 'no file contents were transmitted' in str(e.value)\n+        assert 'This was submitted: \"index.txt\"' in str(e.value)\n \n \n def test_response_creation():\n@@ -1203,12 +1193,8 @@ def test_exception_propagation():\n         c = app.test_client()\n         if config_key is not None:\n             app.config[config_key] = True\n-            try:\n+            with pytest.raises(Exception):\n                 c.get('/')\n-            except Exception:\n-                pass\n-            else:\n-                assert False, 'expected exception'\n         else:\n             assert c.get('/').status_code == 500\n \n@@ -1345,14 +1331,11 @@ def test_debug_mode_complains_after_first_request():\n         return 'Awesome'\n     assert not app.got_first_request\n     assert app.test_client().get('/').data == b'Awesome'\n-    try:\n+    with pytest.raises(AssertionError) as e:\n         @app.route('/foo')\n         def broken():\n             return 'Meh'\n-    except AssertionError as e:\n     assert 'A setup function was called' in str(e)\n-    else:\n-        assert False, 'Expected exception'\n \n     app.debug = False\n \n@@ -1408,14 +1391,11 @@ def test_routing_redirect_debugging():\n     def foo():\n         return 'success'\n     with app.test_client() as c:\n-        try:\n+        with pytest.raises(AssertionError) as e:\n             c.post('/foo', data={})\n-        except AssertionError as e:\n         assert 'http://localhost/foo/' in str(e)\n         assert ('Make sure to directly send '\n                 'your POST-request to this URL') in str(e)\n-        else:\n-            assert False, 'Expected exception'\n \n         rv = c.get('/foo', data={}, follow_redirects=True)\n         assert rv.data == b'success'\n\n@@ -174,12 +174,9 @@ def test_templates_and_static(test_apps):\n         assert flask.url_for('admin.static', filename='test.txt') == '/admin/static/test.txt'\n \n     with app.test_request_context():\n-        try:\n+        with pytest.raises(TemplateNotFound) as e:\n             flask.render_template('missing.html')\n-        except TemplateNotFound as e:\n-            assert e.name == 'missing.html'\n-        else:\n-            assert 0, 'expected exception'\n+        assert e.value.name == 'missing.html'\n \n     with flask.Flask(__name__).test_request_context():\n         assert flask.render_template('nested/nested.txt') == 'I\\'m nested'\n\n@@ -89,12 +89,9 @@ def test_config_from_envvar():\n     try:\n         os.environ = {}\n         app = flask.Flask(__name__)\n-        try:\n+        with pytest.raises(RuntimeError) as e:\n             app.config.from_envvar('FOO_SETTINGS')\n-        except RuntimeError as e:\n-            assert \"'FOO_SETTINGS' is not set\" in str(e)\n-        else:\n-            assert 0, 'expected exception'\n+        assert \"'FOO_SETTINGS' is not set\" in str(e.value)\n         assert not app.config.from_envvar('FOO_SETTINGS', silent=True)\n \n         os.environ = {'FOO_SETTINGS': __file__.rsplit('.', 1)[0] + '.py'}\n@@ -108,16 +105,13 @@ def test_config_from_envvar_missing():\n     env = os.environ\n     try:\n         os.environ = {'FOO_SETTINGS': 'missing.cfg'}\n-        try:\n+        with pytest.raises(IOError) as e:\n             app = flask.Flask(__name__)\n             app.config.from_envvar('FOO_SETTINGS')\n-        except IOError as e:\n-            msg = str(e)\n+        msg = str(e.value)\n         assert msg.startswith('[Errno 2] Unable to load configuration '\n                               'file (No such file or directory):')\n         assert msg.endswith(\"missing.cfg'\")\n-        else:\n-            assert False, 'expected IOError'\n         assert not app.config.from_envvar('FOO_SETTINGS', silent=True)\n     finally:\n         os.environ = env\n@@ -125,29 +119,23 @@ def test_config_from_envvar_missing():\n \n def test_config_missing():\n     app = flask.Flask(__name__)\n-    try:\n+    with pytest.raises(IOError) as e:\n         app.config.from_pyfile('missing.cfg')\n-    except IOError as e:\n-        msg = str(e)\n+    msg = str(e.value)\n     assert msg.startswith('[Errno 2] Unable to load configuration '\n                           'file (No such file or directory):')\n     assert msg.endswith(\"missing.cfg'\")\n-    else:\n-        assert 0, 'expected config'\n     assert not app.config.from_pyfile('missing.cfg', silent=True)\n \n \n def test_config_missing_json():\n     app = flask.Flask(__name__)\n-    try:\n+    with pytest.raises(IOError) as e:\n         app.config.from_json('missing.json')\n-    except IOError as e:\n-        msg = str(e)\n+    msg = str(e.value)\n     assert msg.startswith('[Errno 2] Unable to load configuration '\n                           'file (No such file or directory):')\n     assert msg.endswith(\"missing.json'\")\n-    else:\n-        assert 0, 'expected config'\n     assert not app.config.from_json('missing.json', silent=True)\n \n \n\n@@ -140,12 +140,8 @@ def test_manual_context_binding():\n     ctx.push()\n     assert index() == 'Hello World!'\n     ctx.pop()\n-    try:\n+    with pytest.raises(RuntimeError):\n         index()\n-    except RuntimeError:\n-        pass\n-    else:\n-        assert 0, 'expected runtime error'\n \n @pytest.mark.skipif(greenlet is None, reason='greenlet not installed')\n def test_greenlet_context_copying():\n\n@@ -100,13 +100,10 @@ def test_session_transactions_no_null_sessions():\n     app.testing = True\n \n     with app.test_client() as c:\n-        try:\n+        with pytest.raises(RuntimeError) as e:\n             with c.session_transaction() as sess:\n                 pass\n-        except RuntimeError as e:\n-            assert 'Session backend did not open a session' in str(e)\n-        else:\n-            assert False, 'Expected runtime error'\n+        assert 'Session backend did not open a session' in str(e.value)\n \n def test_session_transactions_keep_context():\n     app = flask.Flask(__name__)\n@@ -124,13 +121,10 @@ def test_session_transaction_needs_cookies():\n     app = flask.Flask(__name__)\n     app.testing = True\n     c = app.test_client(use_cookies=False)\n-    try:\n+    with pytest.raises(RuntimeError) as e:\n         with c.session_transaction() as s:\n             pass\n-    except RuntimeError as e:\n-        assert 'cookies' in str(e)\n-    else:\n-        assert False, 'Expected runtime error'\n+    assert 'cookies' in str(e.value)\n \n def test_test_client_context_binding():\n     app = flask.Flask(__name__)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#ce06240851d18ab725d348bce1793aad67349131", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 172 | Contributors (this commit): 5 | Commits (past 90d): 1 | Contributors (cumulative): 5 | DMM Complexity: None\n\nDIFF:\n@@ -86,7 +86,7 @@ def set_setup_version(version):\n \n \n def build_and_upload():\n-    Popen([sys.executable, 'setup.py', 'release', 'sdist', 'upload']).wait()\n+    Popen([sys.executable, 'setup.py', 'release', 'sdist', 'bdist_wheel', 'upload']).wait()\n \n \n def fail(message, *args):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#cc536c8a7b6f61fedb2d0cb1abdd643d8e987afe", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 4 | Lines Deleted: 4 | Files Changed: 2 | Hunks: 3 | Methods Changed: 6 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 8 | Churn Cumulative: 2304 | Contributors (this commit): 40 | Commits (past 90d): 3 | Contributors (cumulative): 44 | DMM Complexity: None\n\nDIFF:\n@@ -101,7 +101,7 @@ def stream_with_context(generator_or_function):\n         gen = iter(generator_or_function)\n     except TypeError:\n         def decorator(*args, **kwargs):\n-            gen = generator_or_function()\n+            gen = generator_or_function(*args, **kwargs)\n             return stream_with_context(gen)\n         return update_wrapper(decorator, generator_or_function)\n \n\n@@ -683,11 +683,11 @@ class TestStreaming(object):\n         @app.route('/')\n         def index():\n             @flask.stream_with_context\n-            def generate():\n-                yield 'Hello '\n+            def generate(hello):\n+                yield hello\n                 yield flask.request.args['name']\n                 yield '!'\n-            return flask.Response(generate())\n+            return flask.Response(generate('Hello '))\n         c = app.test_client()\n         rv = c.get('/?name=World')\n         assert rv.data == b'Hello World!'\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#d3d8a4694a9c1601e213d6b5f27fab34615609b7", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 24 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 6 | Methods Changed: 2 | Complexity Δ (Sum/Max): 2/2 | Churn Δ: 25 | Churn Cumulative: 157 | Contributors (this commit): 7 | Commits (past 90d): 1 | Contributors (cumulative): 7 | DMM Complexity: 0.09090909090909091\n\nDIFF:\n@@ -21,9 +21,16 @@\n \"\"\"\n import sys\n import os\n+import warnings\n from ._compat import reraise\n \n \n+class ExtDeprecationWarning(DeprecationWarning):\n+    pass\n+\n+warnings.simplefilter('always', ExtDeprecationWarning)\n+\n+\n class ExtensionImporter(object):\n     \"\"\"This importer redirects imports from this submodule to other locations.\n     This makes it possible to transition from the old flaskext.name to the\n@@ -49,13 +56,21 @@ class ExtensionImporter(object):\n         sys.meta_path[:] = [x for x in sys.meta_path if self != x] + [self]\n \n     def find_module(self, fullname, path=None):\n-        if fullname.startswith(self.prefix):\n+        if fullname.startswith(self.prefix) and \\\n+           fullname != 'flask.ext.ExtDeprecationWarning':\n             return self\n \n     def load_module(self, fullname):\n         if fullname in sys.modules:\n             return sys.modules[fullname]\n+\n         modname = fullname.split('.', self.prefix_cutoff)[self.prefix_cutoff]\n+\n+        warnings.warn(\n+            \"Importing flask.ext.{x} is deprecated, use flask_{x} instead.\"\n+            .format(x=modname), ExtDeprecationWarning\n+        )\n+\n         for path in self.module_choices:\n             realname = path % modname\n             try:\n@@ -83,6 +98,14 @@ class ExtensionImporter(object):\n             module = sys.modules[fullname] = sys.modules[realname]\n             if '.' not in modname:\n                 setattr(sys.modules[self.wrapper_module], modname, module)\n+\n+            if realname.startswith('flaskext.'):\n+                warnings.warn(\n+                    \"Detected extension named flaskext.{x}, please rename it \"\n+                    \"to flask_{x}. The old form is deprecated.\"\n+                    .format(x=modname), ExtDeprecationWarning\n+                )\n+\n             return module\n         raise ImportError('No module named %s' % fullname)\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#9f1be8e795ace494018689c87d8a5e5601313e4d", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 13 | Lines Deleted: 1 | Files Changed: 2 | Hunks: 5 | Methods Changed: 2 | Complexity Δ (Sum/Max): 2/1 | Churn Δ: 14 | Churn Cumulative: 2318 | Contributors (this commit): 41 | Commits (past 90d): 5 | Contributors (cumulative): 46 | DMM Complexity: 1.0\n\nDIFF:\n@@ -27,7 +27,7 @@ except ImportError:\n     from urlparse import quote as url_quote\n \n from werkzeug.datastructures import Headers\n-from werkzeug.exceptions import NotFound\n+from werkzeug.exceptions import BadRequest, NotFound\n \n # this was moved in 0.7\n try:\n@@ -618,8 +618,11 @@ def send_from_directory(directory, filename, **options):\n     filename = safe_join(directory, filename)\n     if not os.path.isabs(filename):\n         filename = os.path.join(current_app.root_path, filename)\n+    try:\n         if not os.path.isfile(filename):\n             raise NotFound()\n+    except (TypeError, ValueError):\n+        raise BadRequest()\n     options.setdefault('conditional', True)\n     return send_file(filename, **options)\n \n\n@@ -15,6 +15,7 @@ import os\n import datetime\n import flask\n from logging import StreamHandler\n+from werkzeug.exceptions import BadRequest\n from werkzeug.http import parse_cache_control_header, parse_options_header\n from werkzeug.http import http_date\n from flask._compat import StringIO, text_type\n@@ -504,6 +505,14 @@ class TestSendfile(object):\n             assert rv.data.strip() == b'Hello Subdomain'\n             rv.close()\n \n+    def test_send_from_directory_bad_request(self):\n+        app = flask.Flask(__name__)\n+        app.testing = True\n+        app.root_path = os.path.join(os.path.dirname(__file__),\n+                                     'test_apps', 'subdomaintestmodule')\n+        with app.test_request_context():\n+            with pytest.raises(BadRequest):\n+                flask.send_from_directory('static', 'bad\\x00')\n \n class TestLogging(object):\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#567fff9d0d20650743abd8fe17d3dc9d98fa19dc", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 2 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 357 | Contributors (this commit): 16 | Commits (past 90d): 1 | Contributors (cumulative): 16 | DMM Complexity: None\n\nDIFF:\n@@ -39,7 +39,7 @@ Links\n * `website <http://flask.pocoo.org/>`_\n * `documentation <http://flask.pocoo.org/docs/>`_\n * `development version\n-  <http://github.com/mitsuhiko/flask/zipball/master#egg=Flask-dev>`_\n+  <http://github.com/pallets/flask/zipball/master#egg=Flask-dev>`_\n \n \"\"\"\n import re\n@@ -57,7 +57,7 @@ with open('flask/__init__.py', 'rb') as f:\n setup(\n     name='Flask',\n     version=version,\n-    url='http://github.com/mitsuhiko/flask/',\n+    url='http://github.com/pallets/flask/',\n     license='BSD',\n     author='Armin Ronacher',\n     author_email='armin.ronacher@active-4.com',\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#6e91498e64f3081c9d37f8f6e5fd3e3086de9741", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 7 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 9 | Churn Cumulative: 4186 | Contributors (this commit): 60 | Commits (past 90d): 11 | Contributors (cumulative): 60 | DMM Complexity: None\n\nDIFF:\n@@ -770,8 +770,13 @@ class Flask(_PackageBoundObject):\n         return rv\n \n     def run(self, host=None, port=None, debug=None, **options):\n-        \"\"\"Runs the application on a local development server.  If the\n-        :attr:`debug` flag is set the server will automatically reload\n+        \"\"\"Runs the application on a local development server.\n+\n+        Do not use ``run()`` in a production setting. It is not intended to\n+        meet security and performance requirements for a production server.\n+        Instead, see :ref:`deployment` for WSGI server recommendations.\n+\n+        If the :attr:`debug` flag is set the server will automatically reload\n         for code changes and show a debugger in case an exception happened.\n \n         If you want to run the application in debug mode, but disable the\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#1a877fbaa027456cb7eba04f35d7f0a11c075f71", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 0 | Lines Deleted: 238 | Files Changed: 2 | Hunks: 2 | Methods Changed: 22 | Complexity Δ (Sum/Max): -43/0 | Churn Δ: 238 | Churn Cumulative: 682 | Contributors (this commit): 2 | Commits (past 90d): 2 | Contributors (cumulative): 3 | DMM Complexity: 0.2773722627737226\n\nDIFF:\n@@ -1,162 +0,0 @@\n-# Script which modifies source code away from the deprecated \"flask.ext\"\n-# format.\n-#\n-# Run in the terminal by typing: `python flaskext_migrate.py <source_file.py>`\n-#\n-# Author: Keyan Pishdadian 2015\n-\n-from redbaron import RedBaron\n-import sys\n-\n-\n-def read_source(input_file):\n-    \"\"\"Parses the input_file into a RedBaron FST.\"\"\"\n-    with open(input_file, \"r\") as source_code:\n-        red = RedBaron(source_code.read())\n-    return red\n-\n-\n-def write_source(red, input_file):\n-    \"\"\"Overwrites the input_file once the FST has been modified.\"\"\"\n-    with open(input_file, \"w\") as source_code:\n-        source_code.write(red.dumps())\n-\n-\n-def fix_imports(red):\n-    \"\"\"Wrapper which fixes \"from\" style imports and then \"import\" style.\"\"\"\n-    red = fix_standard_imports(red)\n-    red = fix_from_imports(red)\n-    return red\n-\n-\n-def fix_from_imports(red):\n-    \"\"\"\n-    Converts \"from\" style imports to not use \"flask.ext\".\n-\n-    Handles:\n-    Case 1: from flask.ext.foo import bam --> from flask_foo import bam\n-    Case 2: from flask.ext import foo --> import flask_foo as foo\n-    \"\"\"\n-    from_imports = red.find_all(\"FromImport\")\n-    for x, node in enumerate(from_imports):\n-        values = node.value\n-        if len(values) < 2:\n-            continue\n-        if (values[0].value == 'flask') and (values[1].value == 'ext'):\n-            # Case 1\n-            if len(node.value) == 3:\n-                package = values[2].value\n-                modules = node.modules()\n-                module_string = _get_modules(modules)\n-                if len(modules) > 1:\n-                    node.replace(\"from flask_%s import %s\"\n-                                 % (package, module_string))\n-                else:\n-                    name = node.names()[0]\n-                    node.replace(\"from flask_%s import %s as %s\"\n-                                 % (package, module_string, name))\n-            # Case 2\n-            else:\n-                module = node.modules()[0]\n-                node.replace(\"import flask_%s as %s\"\n-                             % (module, module))\n-    return red\n-\n-\n-def fix_standard_imports(red):\n-    \"\"\"\n-    Handles import modification in the form:\n-    import flask.ext.foo\" --> import flask_foo\n-    \"\"\"\n-    imports = red.find_all(\"ImportNode\")\n-    for x, node in enumerate(imports):\n-        try:\n-            if (node.value[0].value[0].value == 'flask' and\n-               node.value[0].value[1].value == 'ext'):\n-                package = node.value[0].value[2].value\n-                name = node.names()[0].split('.')[-1]\n-                if name == package:\n-                    node.replace(\"import flask_%s\" % (package))\n-                else:\n-                    node.replace(\"import flask_%s as %s\" % (package, name))\n-        except IndexError:\n-            pass\n-\n-    return red\n-\n-\n-def _get_modules(module):\n-    \"\"\"\n-    Takes a list of modules and converts into a string.\n-\n-    The module list can include parens, this function checks each element in\n-    the list, if there is a paren then it does not add a comma before the next\n-    element. Otherwise a comma and space is added. This is to preserve module\n-    imports which are multi-line and/or occur within parens. While also not\n-    affecting imports which are not enclosed.\n-    \"\"\"\n-    modules_string = [cur + ', ' if cur.isalnum() and next.isalnum()\n-                      else cur\n-                      for (cur, next) in zip(module, module[1:]+[''])]\n-\n-    return ''.join(modules_string)\n-\n-\n-def fix_function_calls(red):\n-    \"\"\"\n-    Modifies function calls in the source to reflect import changes.\n-\n-    Searches the AST for AtomtrailerNodes and replaces them.\n-    \"\"\"\n-    atoms = red.find_all(\"Atomtrailers\")\n-    for x, node in enumerate(atoms):\n-        try:\n-            if (node.value[0].value == 'flask' and\n-               node.value[1].value == 'ext'):\n-                params = _form_function_call(node)\n-                node.replace(\"flask_%s%s\" % (node.value[2], params))\n-        except IndexError:\n-            pass\n-\n-    return red\n-\n-\n-def _form_function_call(node):\n-    \"\"\"\n-    Reconstructs function call strings when making attribute access calls.\n-    \"\"\"\n-    node_vals = node.value\n-    output = \".\"\n-    for x, param in enumerate(node_vals[3::]):\n-        if param.dumps()[0] == \"(\":\n-            output = output[0:-1] + param.dumps()\n-            return output\n-        else:\n-            output += param.dumps() + \".\"\n-\n-\n-def check_user_input():\n-    \"\"\"Exits and gives error message if no argument is passed in the shell.\"\"\"\n-    if len(sys.argv) < 2:\n-        sys.exit(\"No filename was included, please try again.\")\n-\n-\n-def fix_tester(ast):\n-    \"\"\"Wrapper which allows for testing when not running from shell.\"\"\"\n-    ast = fix_imports(ast)\n-    ast = fix_function_calls(ast)\n-    return ast.dumps()\n-\n-\n-def fix():\n-    \"\"\"Wrapper for user argument checking and import fixing.\"\"\"\n-    check_user_input()\n-    input_file = sys.argv[1]\n-    ast = read_source(input_file)\n-    ast = fix_imports(ast)\n-    ast = fix_function_calls(ast)\n-    write_source(ast, input_file)\n-\n-\n-if __name__ == \"__main__\":\n-    fix()\n\n@@ -1,76 +0,0 @@\n-# Tester for the flaskext_migrate.py module located in flask/scripts/\n-#\n-# Author: Keyan Pishdadian\n-import pytest\n-redbaron = pytest.importorskip(\"redbaron\")\n-import flaskext_migrate as migrate\n-\n-def test_simple_from_import():\n-    red = redbaron.RedBaron(\"from flask.ext import foo\")\n-    output = migrate.fix_tester(red)\n-    assert output == \"import flask_foo as foo\"\n-\n-\n-def test_from_to_from_import():\n-    red = redbaron.RedBaron(\"from flask.ext.foo import bar\")\n-    output = migrate.fix_tester(red)\n-    assert output == \"from flask_foo import bar as bar\"\n-\n-\n-def test_multiple_import():\n-    red = redbaron.RedBaron(\"from flask.ext.foo import bar, foobar, something\")\n-    output = migrate.fix_tester(red)\n-    assert output == \"from flask_foo import bar, foobar, something\"\n-\n-\n-def test_multiline_import():\n-    red = redbaron.RedBaron(\"from flask.ext.foo import \\\n-                    bar,\\\n-                    foobar,\\\n-                    something\")\n-    output = migrate.fix_tester(red)\n-    assert output == \"from flask_foo import bar, foobar, something\"\n-\n-\n-def test_module_import():\n-    red = redbaron.RedBaron(\"import flask.ext.foo\")\n-    output = migrate.fix_tester(red)\n-    assert output == \"import flask_foo\"\n-\n-\n-def test_named_module_import():\n-    red = redbaron.RedBaron(\"import flask.ext.foo as foobar\")\n-    output = migrate.fix_tester(red)\n-    assert output == \"import flask_foo as foobar\"\n-\n-\n-def test_named_from_import():\n-    red = redbaron.RedBaron(\"from flask.ext.foo import bar as baz\")\n-    output = migrate.fix_tester(red)\n-    assert output == \"from flask_foo import bar as baz\"\n-\n-\n-def test_parens_import():\n-    red = redbaron.RedBaron(\"from flask.ext.foo import (bar, foo, foobar)\")\n-    output = migrate.fix_tester(red)\n-    assert output == \"from flask_foo import (bar, foo, foobar)\"\n-\n-\n-def test_function_call_migration():\n-    red = redbaron.RedBaron(\"flask.ext.foo(var)\")\n-    output = migrate.fix_tester(red)\n-    assert output == \"flask_foo(var)\"\n-\n-\n-def test_nested_function_call_migration():\n-    red = redbaron.RedBaron(\"import flask.ext.foo\\n\\n\"\n-                   \"flask.ext.foo.bar(var)\")\n-    output = migrate.fix_tester(red)\n-    assert output == (\"import flask_foo\\n\\n\"\n-                      \"flask_foo.bar(var)\")\n-\n-\n-def test_no_change_to_import():\n-    red = redbaron.RedBaron(\"from flask import Flask\")\n-    output = migrate.fix_tester(red)\n-    assert output == \"from flask import Flask\"\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
