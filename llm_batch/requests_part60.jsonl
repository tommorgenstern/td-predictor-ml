{"custom_id": "requests#8cb904b49d343a4f6ede534bdcfdf7b614ea77e0", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 308 | Contributors (this commit): 3 | Commits (past 90d): 22 | Contributors (cumulative): 3 | DMM Complexity: None\n\nDIFF:\n@@ -75,7 +75,7 @@ class HTTPAdapter(BaseAdapter):\n             conn.ca_certs = None\n \n         if cert:\n-            if len(cert) == 2:\n+            if isinstance(cert, basestring):\n                 conn.cert_file = cert[0]\n                 conn.key_file = cert[1]\n             else:\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#f1ba27faa2b9b1a26e6c935c18acd6fcd9e7e164", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 310 | Contributors (this commit): 3 | Commits (past 90d): 23 | Contributors (cumulative): 3 | DMM Complexity: None\n\nDIFF:\n@@ -75,7 +75,7 @@ class HTTPAdapter(BaseAdapter):\n             conn.ca_certs = None\n \n         if cert:\n-            if isinstance(cert, basestring):\n+            if not isinstance(cert, basestring):\n                 conn.cert_file = cert[0]\n                 conn.key_file = cert[1]\n             else:\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#05de270d7a074999ef3c58fede2b4fae7433aeaf", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 8376 | Contributors (this commit): 92 | Commits (past 90d): 62 | Contributors (cumulative): 92 | DMM Complexity: None\n\nDIFF:\n@@ -195,6 +195,8 @@ class Request(RequestHooksMixin):\n         p.prepare_headers(self.headers)\n         p.prepare_cookies(self.cookies)\n         p.prepare_body(self.data, self.files)\n+        # Note that prepare_auth most be last to enable authentication schemes\n+        # such as OAuth to work on a fully prepared request.\n         p.prepare_auth(self.auth)\n \n         return p\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#09da1921ffbd9cfd4dff83ca440cc49b087c732c", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 312 | Contributors (this commit): 3 | Commits (past 90d): 24 | Contributors (cumulative): 3 | DMM Complexity: None\n\nDIFF:\n@@ -13,7 +13,7 @@ import socket\n from .models import Response\n from .packages.urllib3.poolmanager import PoolManager, proxy_from_url\n from .hooks import dispatch_hook\n-from .compat import urlparse\n+from .compat import urlparse, basestring\n from .utils import DEFAULT_CA_BUNDLE_PATH, get_encoding_from_headers\n from .structures import CaseInsensitiveDict\n from .packages.urllib3.exceptions import MaxRetryError\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#dd271782e82e7cabbf6a4ce5f26c9602780687d2", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 4 | Lines Deleted: 4 | Files Changed: 1 | Hunks: 4 | Methods Changed: 4 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 8 | Churn Cumulative: 1072 | Contributors (this commit): 25 | Commits (past 90d): 9 | Contributors (cumulative): 25 | DMM Complexity: None\n\nDIFF:\n@@ -21,7 +21,7 @@ def request(method, url, **kwargs):\n     :param method: method for the new :class:`Request` object.\n     :param url: URL for the new :class:`Request` object.\n     :param params: (optional) Dictionary or bytes to be sent in the query string for the :class:`Request`.\n-    :param data: (optional) Dictionary or bytes to send in the body of the :class:`Request`.\n+    :param data: (optional) Dictionary, bytes, or file-like object to send in the body of the :class:`Request`.\n     :param headers: (optional) Dictionary of HTTP Headers to send with the :class:`Request`.\n     :param cookies: (optional) Dict or CookieJar object to send with the :class:`Request`.\n     :param files: (optional) Dictionary of 'name': file-like-objects (or {'name': ('filename', fileobj)}) for multipart encoding upload.\n@@ -74,7 +74,7 @@ def post(url, data=None, **kwargs):\n     \"\"\"Sends a POST request. Returns :class:`Response` object.\n \n     :param url: URL for the new :class:`Request` object.\n-    :param data: (optional) Dictionary or bytes to send in the body of the :class:`Request`.\n+    :param data: (optional) Dictionary, bytes, or file-like object to send in the body of the :class:`Request`.\n     :param \\*\\*kwargs: Optional arguments that ``request`` takes.\n     \"\"\"\n \n@@ -85,7 +85,7 @@ def put(url, data=None, **kwargs):\n     \"\"\"Sends a PUT request. Returns :class:`Response` object.\n \n     :param url: URL for the new :class:`Request` object.\n-    :param data: (optional) Dictionary or bytes to send in the body of the :class:`Request`.\n+    :param data: (optional) Dictionary, bytes, or file-like object to send in the body of the :class:`Request`.\n     :param \\*\\*kwargs: Optional arguments that ``request`` takes.\n     \"\"\"\n \n@@ -96,7 +96,7 @@ def patch(url, data=None, **kwargs):\n     \"\"\"Sends a PATCH request. Returns :class:`Response` object.\n \n     :param url: URL for the new :class:`Request` object.\n-    :param data: (optional) Dictionary or bytes to send in the body of the :class:`Request`.\n+    :param data: (optional) Dictionary, bytes, or file-like object to send in the body of the :class:`Request`.\n     :param \\*\\*kwargs: Optional arguments that ``request`` takes.\n     \"\"\"\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#bfef8d99c856b4700f09f16f50cf1ac8818a9e0c", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 3 | Lines Deleted: 3 | Files Changed: 1 | Hunks: 3 | Methods Changed: 3 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 6 | Churn Cumulative: 1773 | Contributors (this commit): 25 | Commits (past 90d): 36 | Contributors (cumulative): 25 | DMM Complexity: None\n\nDIFF:\n@@ -316,7 +316,7 @@ class Session(SessionRedirectMixin):\n         \"\"\"Sends a POST request. Returns :class:`Response` object.\n \n         :param url: URL for the new :class:`Request` object.\n-        :param data: (optional) Dictionary or bytes to send in the body of the :class:`Request`.\n+        :param data: (optional) Dictionary, bytes, or file-like object to send in the body of the :class:`Request`.\n         :param \\*\\*kwargs: Optional arguments that ``request`` takes.\n         \"\"\"\n \n@@ -326,7 +326,7 @@ class Session(SessionRedirectMixin):\n         \"\"\"Sends a PUT request. Returns :class:`Response` object.\n \n         :param url: URL for the new :class:`Request` object.\n-        :param data: (optional) Dictionary or bytes to send in the body of the :class:`Request`.\n+        :param data: (optional) Dictionary, bytes, or file-like object to send in the body of the :class:`Request`.\n         :param \\*\\*kwargs: Optional arguments that ``request`` takes.\n         \"\"\"\n \n@@ -336,7 +336,7 @@ class Session(SessionRedirectMixin):\n         \"\"\"Sends a PATCH request. Returns :class:`Response` object.\n \n         :param url: URL for the new :class:`Request` object.\n-        :param data: (optional) Dictionary or bytes to send in the body of the :class:`Request`.\n+        :param data: (optional) Dictionary, bytes, or file-like object to send in the body of the :class:`Request`.\n         :param \\*\\*kwargs: Optional arguments that ``request`` takes.\n         \"\"\"\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#0b42772663d50fddc4fec9e5fc397eaff00dfe3f", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 8378 | Contributors (this commit): 93 | Commits (past 90d): 63 | Contributors (cumulative): 93 | DMM Complexity: None\n\nDIFF:\n@@ -195,7 +195,7 @@ class Request(RequestHooksMixin):\n         p.prepare_headers(self.headers)\n         p.prepare_cookies(self.cookies)\n         p.prepare_body(self.data, self.files)\n-        # Note that prepare_auth most be last to enable authentication schemes\n+        # Note that prepare_auth must be last to enable authentication schemes\n         # such as OAuth to work on a fully prepared request.\n         p.prepare_auth(self.auth)\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#7d085b188cbf71d2ba9a3124d7acfc57c75fe954", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 6 | Lines Deleted: 5 | Files Changed: 2 | Hunks: 4 | Methods Changed: 3 | Complexity Δ (Sum/Max): 0/1 | Churn Δ: 11 | Churn Cumulative: 4365 | Contributors (this commit): 48 | Commits (past 90d): 44 | Contributors (cumulative): 51 | DMM Complexity: 1.0\n\nDIFF:\n@@ -94,16 +94,13 @@ class SessionRedirectMixin(object):\n                 url = urljoin(resp.url, requote_uri(url))\n \n             # http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.3.4\n-            if resp.status_code is codes.see_other:\n+            if resp.status_code is codes.see_other and req.method != 'HEAD':\n                 method = 'GET'\n \n             # Do what the browsers do, despite standards...\n             if resp.status_code in (codes.moved, codes.found) and req.method == 'POST':\n                 method = 'GET'\n \n-            if (resp.status_code == 303) and req.method != 'HEAD':\n-                method = 'GET'\n-\n             # Remove the cookie headers that were sent.\n             headers = req.headers\n             try:\n@@ -245,7 +242,7 @@ class Session(SessionRedirectMixin):\n \n         # Create the Request.\n         req = Request()\n-        req.method = method\n+        req.method = method.upper()\n         req.url = url\n         req.headers = headers\n         req.files = files\n\n@@ -86,6 +86,10 @@ class RequestsTestCase(unittest.TestCase):\n         r = requests.get(httpbin('redirect', '1'))\n         self.assertEqual(r.status_code, 200)\n \n+    def test_HTTP_302_ALLOW_REDIRECT_POST(self):\n+        r = requests.post(httpbin('status', '302'), data={'some': 'data'})\n+        self.assertEqual(r.status_code, 200)\n+\n     def test_HTTP_200_OK_GET_WITH_PARAMS(self):\n         heads = {'User-agent': 'Mozilla/5.0'}\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#f8a59c3e6fc7a6f1dd5d4f9783ee25c8458bccee", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 14 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 3 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 16 | Churn Cumulative: 8394 | Contributors (this commit): 93 | Commits (past 90d): 64 | Contributors (cumulative): 93 | DMM Complexity: None\n\nDIFF:\n@@ -35,7 +35,6 @@ log = logging.getLogger(__name__)\n \n \n class RequestEncodingMixin(object):\n-\n     @property\n     def path_url(self):\n         \"\"\"Build the path URL to use.\"\"\"\n@@ -147,7 +146,19 @@ class RequestHooksMixin(object):\n \n \n class Request(RequestHooksMixin):\n-    \"\"\"A user-created :class:`Request <Request>` object.\"\"\"\n+    \"\"\"A user-created :class:`Request <Request>` object.\n+\n+    :param method: HTTP method to use.\n+    :param url: URL to send.\n+    :param headers: dictionary of headers to send.\n+    :param files: dictionary of {filename: fileobject} files to multipart upload.\n+    :param data: the body to attach the request. If a dictionary is provided, form-encoding will take place.\n+    :param params: dictionary of URL parameters to append to the URL.\n+    :param auth: Auth handler or (user, pass) tuple.\n+    :param cookies: dictionary or CookieJar of cookies to attach to this request.\n+    :param timeout: REMOVE REMOVE.\n+    :param hooks: dictionary of callback hooks, for internal usage.\n+    \"\"\"\n     def __init__(self,\n         method=None,\n         url=None,\n@@ -160,6 +171,7 @@ class Request(RequestHooksMixin):\n         timeout=None,\n         hooks=None):\n \n+\n         # Default empty dicts for dict params.\n         data = [] if data is None else data\n         files = [] if files is None else files\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#28b706da83fed39a04c05c84b032fbdf35a542e2", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 471 | Contributors (this commit): 5 | Commits (past 90d): 11 | Contributors (cumulative): 5 | DMM Complexity: None\n\nDIFF:\n@@ -42,8 +42,8 @@ is at <http://python-requests.org>.\n \"\"\"\n \n __title__ = 'requests'\n-__version__ = '1.0.3'\n-__build__ = 0x01003\n+__version__ = '1.0.4'\n+__build__ = 0x01004\n __author__ = 'Kenneth Reitz'\n __license__ = 'Apache 2.0'\n __copyright__ = 'Copyright 2012 Kenneth Reitz'\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#6e780fad6d15eea0366103501ed354b92ff28ba7", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 0 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 8396 | Contributors (this commit): 93 | Commits (past 90d): 65 | Contributors (cumulative): 93 | DMM Complexity: 1.0\n\nDIFF:\n@@ -156,7 +156,6 @@ class Request(RequestHooksMixin):\n     :param params: dictionary of URL parameters to append to the URL.\n     :param auth: Auth handler or (user, pass) tuple.\n     :param cookies: dictionary or CookieJar of cookies to attach to this request.\n-    :param timeout: REMOVE REMOVE.\n     :param hooks: dictionary of callback hooks, for internal usage.\n     \"\"\"\n     def __init__(self,\n@@ -168,7 +167,6 @@ class Request(RequestHooksMixin):\n         params=dict(),\n         auth=None,\n         cookies=None,\n-        timeout=None,\n         hooks=None):\n \n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#5f9fecd3aa0ce584eeb1ab7d8211e0f8b510a73e", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 6 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 8 | Churn Cumulative: 8404 | Contributors (this commit): 93 | Commits (past 90d): 66 | Contributors (cumulative): 93 | DMM Complexity: None\n\nDIFF:\n@@ -197,7 +197,7 @@ class Request(RequestHooksMixin):\n         return '<Request [%s]>' % (self.method)\n \n     def prepare(self):\n-        \"\"\"Constructs a PreparedRequest for transmission and returns it.\"\"\"\n+        \"\"\"Constructs a :class:`PreparedRequest <PreparedRequest>` for transmission and returns it.\"\"\"\n         p = PreparedRequest()\n \n         p.prepare_method(self.method)\n@@ -213,7 +213,11 @@ class Request(RequestHooksMixin):\n \n \n class PreparedRequest(RequestEncodingMixin, RequestHooksMixin):\n-    \"\"\"The :class:`PreparedRequest <PreparedRequest>` object.\"\"\"\n+    \"\"\"The fully mutable :class:`PreparedRequest <PreparedRequest>` object,\n+    containing the exact bytes that will be sent to the server.\n+\n+    Generated from a :class:`Request <Request>` object or manually.\n+    \"\"\"\n \n     def __init__(self):\n         self.method = None\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#70faca2a14eda2f0c182f300f1c46fca8560cdc1", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 5 | Lines Deleted: 6 | Files Changed: 1 | Hunks: 6 | Methods Changed: 2 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 11 | Churn Cumulative: 8415 | Contributors (this commit): 93 | Commits (past 90d): 67 | Contributors (cumulative): 93 | DMM Complexity: 0.0\n\nDIFF:\n@@ -189,8 +189,6 @@ class Request(RequestHooksMixin):\n         self.params = params\n         self.auth = auth\n         self.cookies = cookies\n-        # self.allow_redirects = allow_redirects\n-        # self.proxies = proxies\n         self.hooks = hooks\n \n     def __repr__(self):\n@@ -220,14 +218,15 @@ class PreparedRequest(RequestEncodingMixin, RequestHooksMixin):\n     \"\"\"\n \n     def __init__(self):\n+        #: HTTP verb to send to the server.\n         self.method = None\n+        #: HTTP URL to send the request to.\n         self.url = None\n+        #: dictionary of HTTP headers.\n         self.headers = None\n+        #: request body to send to the server.\n         self.body = None\n-        self.params = None\n-        self.auth = None\n-        self.allow_redirects = None\n-        self.proxies = None\n+        #: dictionary of callback hooks, for internal usage.\n         self.hooks = default_hooks()\n \n     def __repr__(self):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#3ddcc99131adc5773ef0a12035580298bee35f5f", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 37 | Lines Deleted: 7 | Files Changed: 2 | Hunks: 8 | Methods Changed: 1 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 44 | Churn Cumulative: 10239 | Contributors (this commit): 104 | Commits (past 90d): 106 | Contributors (cumulative): 119 | DMM Complexity: None\n\nDIFF:\n@@ -157,6 +157,14 @@ class Request(RequestHooksMixin):\n     :param auth: Auth handler or (user, pass) tuple.\n     :param cookies: dictionary or CookieJar of cookies to attach to this request.\n     :param hooks: dictionary of callback hooks, for internal usage.\n+\n+    Usage::\n+\n+      >>> import requests\n+      >>> req = requests.Request('GET', 'http://httpbin.org/get')\n+      >>> req.prepare()\n+      <PreparedRequest [GET]>\n+\n     \"\"\"\n     def __init__(self,\n         method=None,\n@@ -214,7 +222,19 @@ class PreparedRequest(RequestEncodingMixin, RequestHooksMixin):\n     \"\"\"The fully mutable :class:`PreparedRequest <PreparedRequest>` object,\n     containing the exact bytes that will be sent to the server.\n \n-    Generated from a :class:`Request <Request>` object or manually.\n+    Generated from either a :class:`Request <Request>` object or manually.\n+\n+    Usage::\n+\n+      >>> import requests\n+      >>> req = requests.Request('GET', 'http://httpbin.org/get')\n+      >>> r = req.prepare()\n+      <PreparedRequest [GET]>\n+\n+      >>> s = requests.Session()\n+      >>> s.send(r)\n+      <Response [200]>\n+\n     \"\"\"\n \n     def __init__(self):\n\n@@ -131,7 +131,17 @@ class SessionRedirectMixin(object):\n \n \n class Session(SessionRedirectMixin):\n-    \"\"\"A Requests session.\"\"\"\n+    \"\"\"A Requests session.\n+\n+    Provides cookie persistience, connection-pooling, and configuration.\n+\n+    Basic Usage::\n+\n+      >>> import requests\n+      >>> s = requests.Session()\n+      >>> s.get('http://httpbin.org/get')\n+      200\n+    \"\"\"\n \n     def __init__(self):\n \n@@ -140,7 +150,7 @@ class Session(SessionRedirectMixin):\n         #: :class:`Session <Session>`.\n         self.headers = default_headers()\n \n-        #: Authentication tuple or object to attach to\n+        #: Default Authentication tuple or object to attach to\n         #: :class:`Request <Request>`.\n         self.auth = None\n \n@@ -157,19 +167,19 @@ class Session(SessionRedirectMixin):\n         #: representing multivalued query parameters.\n         self.params = {}\n \n-        #: Stream response content.\n+        #: Stream response content default.\n         self.stream = False\n \n-        #: SSL Verification.\n+        #: SSL Verification default.\n         self.verify = True\n \n-        #: SSL certificate.\n+        #: SSL certificate default.\n         self.cert = None\n \n         #: Maximum number of redirects to follow.\n         self.max_redirects = DEFAULT_REDIRECT_LIMIT\n \n-        #: Should we trust the environment\n+        #: Should we trust the environment?\n         self.trust_env = True\n \n         # Set up a CookieJar to be used by default\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#f8e2d0e7328b74e4cc6e60edd1eecaaa1052eb96", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 10 | Lines Deleted: 4 | Files Changed: 2 | Hunks: 3 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 14 | Churn Cumulative: 9523 | Contributors (this commit): 101 | Commits (past 90d): 79 | Contributors (cumulative): 118 | DMM Complexity: None\n\nDIFF:\n@@ -32,6 +32,12 @@ def request(method, url, **kwargs):\n     :param verify: (optional) if ``True``, the SSL cert will be verified. A CA_BUNDLE path can also be provided.\n     :param stream: (optional) if ``False``, the response content will be immediately downloaded.\n     :param cert: (optional) if String, path to ssl client cert file (.pem). If Tuple, ('cert', 'key') pair.\n+\n+    Usage::\n+\n+      >>> import requests\n+      >>> req = requests.request('GET', 'http://httpbin.org/get')\n+      <Response [200]>\n     \"\"\"\n \n     session = sessions.Session()\n\n@@ -148,6 +148,8 @@ class RequestHooksMixin(object):\n class Request(RequestHooksMixin):\n     \"\"\"A user-created :class:`Request <Request>` object.\n \n+    Used to prepare a :class:`PreparedRequest <PreparedRequest>`, which is sent to the server.\n+\n     :param method: HTTP method to use.\n     :param url: URL to send.\n     :param headers: dictionary of headers to send.\n@@ -381,10 +383,8 @@ class PreparedRequest(RequestEncodingMixin, RequestHooksMixin):\n \n \n class Response(object):\n-    \"\"\"The core :class:`Response <Response>` object. All\n-    :class:`Request <Request>` objects contain a\n-    :class:`response <Response>` attribute, which is an instance\n-    of this class.\n+    \"\"\"The :class:`Response <Response>` object, which contains a\n+    server's response to an HTTP request.\n     \"\"\"\n \n     def __init__(self):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#f0fe551dc999c4887767f369951732f04178f45e", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 3 | Churn Cumulative: 8448 | Contributors (this commit): 93 | Commits (past 90d): 70 | Contributors (cumulative): 93 | DMM Complexity: None\n\nDIFF:\n@@ -443,7 +443,8 @@ class Response(object):\n \n     @property\n     def apparent_encoding(self):\n-        \"\"\"The apparent encoding, provided by the lovely Charade library.\"\"\"\n+        \"\"\"The apparent encoding, provided by the lovely Charade library\n+        (Thanks, Ian!).\"\"\"\n         return chardet.detect(self.content)['encoding']\n \n     def iter_content(self, chunk_size=1, decode_unicode=False):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#bbea679ab278f9aa7a12df404fd55f354b0701f1", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 16 | Lines Deleted: 44 | Files Changed: 2 | Hunks: 10 | Methods Changed: 2 | Complexity Δ (Sum/Max): -3/0 | Churn Δ: 60 | Churn Cumulative: 1778 | Contributors (this commit): 37 | Commits (past 90d): 16 | Contributors (cumulative): 39 | DMM Complexity: 0.0\n\nDIFF:\n@@ -2,26 +2,30 @@\n # -*- coding: utf-8 -*-\n \n \"\"\"\n-ceritfi.py\n-~~~~~~~~~~\n+certs.py\n+~~~~~~~~\n \n-This module returns the installation location of cacert.pem.\n+This module returns the preferred default CA certificate bundle.\n+\n+If you are packaging Requests, e.g., for a Linux distribution or a managed\n+environment, you can change the definition of where() to return a separately\n+packaged CA bundle.\n \"\"\"\n \n-import os\n+import os.path\n+\n+certifi = None\n try:\n     import certifi\n except ImportError:\n-    certifi = None\n-\n+    pass\n \n def where():\n-\n+    \"\"\"Return the preferred certificate bundle.\"\"\"\n     if certifi:\n         return certifi.where()\n-    else:\n-        f = os.path.split(__file__)[0]\n-        return os.path.join(f, 'cacert.pem')\n+\n+    return os.path.join(os.path.dirname(__file__), 'cacert.pem')\n \n if __name__ == '__main__':\n     print(where())\n\n@@ -19,50 +19,18 @@ import zlib\n from netrc import netrc, NetrcParseError\n \n from . import __version__\n+from . import certs\n from .compat import parse_http_list as _parse_list_header\n from .compat import quote, urlparse, bytes, str, OrderedDict\n from .cookies import RequestsCookieJar, cookiejar_from_dict\n \n _hush_pyflakes = (RequestsCookieJar,)\n \n-CERTIFI_BUNDLE_PATH = None\n-try:\n-    # see if requests's own CA certificate bundle is installed\n-    from . import certs\n-    path = certs.where()\n-    if os.path.exists(path):\n-        CERTIFI_BUNDLE_PATH = certs.where()\n-except ImportError:\n-    pass\n-\n NETRC_FILES = ('.netrc', '_netrc')\n \n-# common paths for the OS's CA certificate bundle\n-POSSIBLE_CA_BUNDLE_PATHS = [\n-        # Red Hat, CentOS, Fedora and friends (provided by the ca-certificates package):\n-        '/etc/pki/tls/certs/ca-bundle.crt',\n-        # Ubuntu, Debian, and friends (provided by the ca-certificates package):\n-        '/etc/ssl/certs/ca-certificates.crt',\n-        # FreeBSD (provided by the ca_root_nss package):\n-        '/usr/local/share/certs/ca-root-nss.crt',\n-        # openSUSE (provided by the ca-certificates package), the 'certs' directory is the\n-        # preferred way but may not be supported by the SSL module, thus it has 'ca-bundle.pem'\n-        # as a fallback (which is generated from pem files in the 'certs' directory):\n-        '/etc/ssl/ca-bundle.pem',\n-]\n-\n-\n-def get_os_ca_bundle_path():\n-    \"\"\"Try to pick an available CA certificate bundle provided by the OS.\"\"\"\n-    for path in POSSIBLE_CA_BUNDLE_PATHS:\n-        if os.path.exists(path):\n-            return path\n-    return None\n-\n # if certifi is installed, use its CA bundle;\n # otherwise, try and use the OS bundle\n-DEFAULT_CA_BUNDLE_PATH = CERTIFI_BUNDLE_PATH or get_os_ca_bundle_path()\n-\n+DEFAULT_CA_BUNDLE_PATH = certs.where()\n \n def dict_to_sequence(d):\n     \"\"\"Returns an internal sequence dictionary update.\"\"\"\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#b479a62ec2c0a3c64d4a67540263b82afd68f55d", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 8450 | Contributors (this commit): 93 | Commits (past 90d): 71 | Contributors (cumulative): 93 | DMM Complexity: None\n\nDIFF:\n@@ -25,7 +25,7 @@ from .utils import (\n     iter_slices, guess_json_utf)\n from .compat import (\n     cookielib, urlparse, urlunparse, urlsplit, urlencode, str, bytes, StringIO,\n-    is_py2, chardet, json, builtin_str, basestring)\n+    is_py2, chardet, json, builtin_str, basestring, urldefrag)\n \n REDIRECT_STATI = (codes.moved, codes.found, codes.other, codes.temporary_moved)\n CONTENT_CHUNK_SIZE = 10 * 1024\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#702f4039bc2f8543d2b337cb18c7d730afa1cccb", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 19 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 4 | Methods Changed: 2 | Complexity Δ (Sum/Max): 3/3 | Churn Δ: 21 | Churn Cumulative: 333 | Contributors (this commit): 3 | Commits (past 90d): 25 | Contributors (cumulative): 3 | DMM Complexity: 0.8888888888888888\n\nDIFF:\n@@ -13,7 +13,7 @@ import socket\n from .models import Response\n from .packages.urllib3.poolmanager import PoolManager, proxy_from_url\n from .hooks import dispatch_hook\n-from .compat import urlparse, basestring\n+from .compat import urlparse, basestring, urldefrag\n from .utils import DEFAULT_CA_BUNDLE_PATH, get_encoding_from_headers\n from .structures import CaseInsensitiveDict\n from .packages.urllib3.exceptions import MaxRetryError\n@@ -130,6 +130,21 @@ class HTTPAdapter(BaseAdapter):\n         \"\"\"\n         self.poolmanager.clear()\n \n+    def request_url(self, request, proxies):\n+        \"\"\"Obtain the url to use when making the final request.\n+\n+        If the message is being sent through a proxy, the full URL has to be\n+        used. Otherwise, we should only use the path portion of the URL.\"\"\"\n+        proxies = proxies or {}\n+        proxy = proxies.get(urlparse(request.url).scheme)\n+\n+        if proxy:\n+            url, _ = urldefrag(request.url)\n+        else:\n+            url = request.path_url\n+\n+        return url\n+\n     def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):\n         \"\"\"Sends PreparedRequest object. Returns Response object.\"\"\"\n \n@@ -137,11 +152,13 @@ class HTTPAdapter(BaseAdapter):\n \n         self.cert_verify(conn, request.url, verify, cert)\n \n+        url = self.request_url(request, proxies)\n+\n         try:\n             # Send the request.\n             resp = conn.urlopen(\n                 method=request.method,\n-                url=request.path_url,\n+                url=url,\n                 body=request.body,\n                 headers=request.headers,\n                 redirect=False,\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#d675abbd3f3883bc5a45895da2d63ffec5ed4634", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 8452 | Contributors (this commit): 93 | Commits (past 90d): 72 | Contributors (cumulative): 93 | DMM Complexity: None\n\nDIFF:\n@@ -25,7 +25,7 @@ from .utils import (\n     iter_slices, guess_json_utf)\n from .compat import (\n     cookielib, urlparse, urlunparse, urlsplit, urlencode, str, bytes, StringIO,\n-    is_py2, chardet, json, builtin_str, basestring, urldefrag)\n+    is_py2, chardet, json, builtin_str, basestring)\n \n REDIRECT_STATI = (codes.moved, codes.found, codes.other, codes.temporary_moved)\n CONTENT_CHUNK_SIZE = 10 * 1024\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#641f4611b285d8c3b9bee7d6ce62ea1c4d4fc242", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 19 | Lines Deleted: 2 | Files Changed: 2 | Hunks: 4 | Methods Changed: 2 | Complexity Δ (Sum/Max): 2/2 | Churn Δ: 21 | Churn Cumulative: 2081 | Contributors (this commit): 37 | Commits (past 90d): 42 | Contributors (cumulative): 40 | DMM Complexity: 1.0\n\nDIFF:\n@@ -14,7 +14,8 @@ from .models import Response\n from .packages.urllib3.poolmanager import PoolManager, proxy_from_url\n from .hooks import dispatch_hook\n from .compat import urlparse, basestring, urldefrag\n-from .utils import DEFAULT_CA_BUNDLE_PATH, get_encoding_from_headers\n+from .utils import (DEFAULT_CA_BUNDLE_PATH, get_encoding_from_headers,\n+                    prepend_scheme_if_needed)\n from .structures import CaseInsensitiveDict\n from .packages.urllib3.exceptions import MaxRetryError\n from .packages.urllib3.exceptions import TimeoutError\n@@ -116,6 +117,8 @@ class HTTPAdapter(BaseAdapter):\n         proxy = proxies.get(urlparse(url).scheme)\n \n         if proxy:\n+            proxy = prepend_scheme_if_needed(proxy, urlparse(url).scheme)\n+            print proxy\n             conn = proxy_from_url(proxy)\n         else:\n             conn = self.poolmanager.connection_from_url(url)\n\n@@ -21,7 +21,7 @@ from netrc import netrc, NetrcParseError\n from . import __version__\n from . import certs\n from .compat import parse_http_list as _parse_list_header\n-from .compat import quote, urlparse, bytes, str, OrderedDict\n+from .compat import quote, urlparse, bytes, str, OrderedDict, urlunparse\n from .cookies import RequestsCookieJar, cookiejar_from_dict\n \n _hush_pyflakes = (RequestsCookieJar,)\n@@ -561,3 +561,17 @@ def guess_json_utf(data):\n             return 'utf-32-le'\n         # Did not detect a valid UTF-32 ascii-range character\n     return None\n+\n+\n+def prepend_scheme_if_needed(url, new_scheme):\n+    '''Given a URL that may or may not have a scheme, prepend the given scheme.\n+    Does not replace a present scheme with the one provided as an argument.'''\n+    scheme, netloc, path, params, query, fragment = urlparse(url, new_scheme)\n+\n+    # urlparse is a finicky beast, and sometimes decides that there isn't a\n+    # netloc present. Assume that it's being over-cautious, and switch netloc\n+    # and path if urlparse decided there was no netloc.\n+    if not netloc:\n+        netloc, path = path, netloc\n+\n+    return urlunparse((scheme, netloc, path, params, query, fragment))\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#054e1ab3ee4366a9c71a96e121cf88355b5e2f3e", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 0 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 1 | Churn Cumulative: 339 | Contributors (this commit): 3 | Commits (past 90d): 27 | Contributors (cumulative): 3 | DMM Complexity: 0.0\n\nDIFF:\n@@ -118,7 +118,6 @@ class HTTPAdapter(BaseAdapter):\n \n         if proxy:\n             proxy = prepend_scheme_if_needed(proxy, urlparse(url).scheme)\n-            print proxy\n             conn = proxy_from_url(proxy)\n         else:\n             conn = self.poolmanager.connection_from_url(url)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#5264c71d86c078f60b9880cc0f481c7fea2b41db", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 1 | Churn Cumulative: 340 | Contributors (this commit): 3 | Commits (past 90d): 28 | Contributors (cumulative): 3 | DMM Complexity: 1.0\n\nDIFF:\n@@ -94,6 +94,7 @@ class HTTPAdapter(BaseAdapter):\n         # Set encoding.\n         response.encoding = get_encoding_from_headers(response.headers)\n         response.raw = resp\n+        response.reason = response.raw.reason\n \n         if isinstance(req.url, bytes):\n             response.url = req.url.decode('utf-8')\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#20b10aed1bbe277745a74953b6dc73290bfa82fa", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 18 | Lines Deleted: 1 | Files Changed: 2 | Hunks: 5 | Methods Changed: 2 | Complexity Δ (Sum/Max): 3/2 | Churn Δ: 19 | Churn Cumulative: 11056 | Contributors (this commit): 101 | Commits (past 90d): 74 | Contributors (cumulative): 120 | DMM Complexity: 0.5\n\nDIFF:\n@@ -108,8 +108,12 @@ class RequestEncodingMixin(object):\n \n         for (k, v) in files:\n             # support for explicit filename\n+            ft = None\n             if isinstance(v, (tuple, list)):\n+                if len(v) == 2:\n                     fn, fp = v\n+                else:\n+                    fn, fp, ft = v\n             else:\n                 fn = guess_filename(v) or k\n                 fp = v\n@@ -117,7 +121,12 @@ class RequestEncodingMixin(object):\n                 fp = StringIO(fp)\n             if isinstance(fp, bytes):\n                 fp = BytesIO(fp)\n-            new_fields.append((k, (fn, fp.read())))\n+            \n+            if ft:\n+                new_v = (fn, fp.read(), ft)\n+            else:\n+                new_v = (fn, fp.read())\n+            new_fields.append((k, new_v))\n \n         body, content_type = encode_multipart_formdata(new_fields)\n \n\n@@ -255,6 +255,14 @@ class RequestsTestCase(unittest.TestCase):\n                           files={'file': ('test_requests.py', open(__file__, 'rb'))})\n         self.assertEqual(r.status_code, 200)\n \n+    def test_custom_content_type(self):\n+        r = requests.post(httpbin('post'),\n+                          data={'stuff': json.dumps({'a': 123})},\n+                          files={'file1': ('test_requests.py', open(__file__, 'rb')),\n+                                 'file2': ('test_requests', open(__file__, 'rb'),\n+                                           'text/py-content-type')})\n+        self.assertEqual(r.status_code, 200)\n+        self.assertTrue(\"text/py-content-type\" in r.request.body)\n \n \n if __name__ == '__main__':\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#fbc366c1a551c05d8c1ebfdf92608b7062a22622", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 2595 | Contributors (this commit): 26 | Commits (past 90d): 9 | Contributors (cumulative): 26 | DMM Complexity: None\n\nDIFF:\n@@ -262,7 +262,7 @@ class RequestsTestCase(unittest.TestCase):\n                                  'file2': ('test_requests', open(__file__, 'rb'),\n                                            'text/py-content-type')})\n         self.assertEqual(r.status_code, 200)\n-        self.assertTrue(\"text/py-content-type\" in r.request.body)\n+        self.assertTrue(b\"text/py-content-type\" in r.request.body)\n \n \n if __name__ == '__main__':\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#68edcd12b12818f773581397399ec73b055681d7", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 12 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 2 | Methods Changed: 2 | Complexity Δ (Sum/Max): 3/3 | Churn Δ: 14 | Churn Cumulative: 1816 | Contributors (this commit): 27 | Commits (past 90d): 39 | Contributors (cumulative): 27 | DMM Complexity: 0.7142857142857143\n\nDIFF:\n@@ -49,9 +49,19 @@ def merge_kwargs(local_kwarg, default_kwarg):\n     default_kwarg = from_key_val_list(default_kwarg)\n     local_kwarg = from_key_val_list(local_kwarg)\n \n-    # Update new values.\n+    # Update new values in a case-insensitive way\n+    def get_original_key(original_keys, new_key):\n+        \"\"\"\n+        Finds the key from original_keys that case-insensitive matches new_key.\n+        \"\"\"\n+        for original_key in original_keys:\n+            if key.lower() == original_key.lower():\n+                return original_key\n+        return new_key\n+\n     kwargs = default_kwarg.copy()\n-    kwargs.update(local_kwarg)\n+    for key, value in local_kwarg.items():\n+        kwargs[get_original_key(kwargs.keys(), key)] = value\n \n     # Remove keys that are set to None.\n     for (k, v) in local_kwarg.items():\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#4a5b5bc86eeb03e4d2c4914da6c2a258b15537d8", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 3 | Lines Deleted: 3 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): -2/0 | Churn Δ: 6 | Churn Cumulative: 2601 | Contributors (this commit): 26 | Commits (past 90d): 10 | Contributors (cumulative): 26 | DMM Complexity: 0.0\n\nDIFF:\n@@ -86,9 +86,9 @@ class RequestsTestCase(unittest.TestCase):\n         r = requests.get(httpbin('redirect', '1'))\n         self.assertEqual(r.status_code, 200)\n \n-    def test_HTTP_302_ALLOW_REDIRECT_POST(self):\n-        r = requests.post(httpbin('status', '302'), data={'some': 'data'})\n-        self.assertEqual(r.status_code, 200)\n+    # def test_HTTP_302_ALLOW_REDIRECT_POST(self):\n+    #     r = requests.post(httpbin('status', '302'), data={'some': 'data'})\n+    #     self.assertEqual(r.status_code, 200)\n \n     def test_HTTP_200_OK_GET_WITH_PARAMS(self):\n         heads = {'User-agent': 'Mozilla/5.0'}\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#a392a87389d39b5e2ad88f29df334d67f41188e9", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 3 | Churn Cumulative: 1819 | Contributors (this commit): 27 | Commits (past 90d): 40 | Contributors (cumulative): 27 | DMM Complexity: 0.0\n\nDIFF:\n@@ -60,8 +60,9 @@ def merge_kwargs(local_kwarg, default_kwarg):\n         return new_key\n \n     kwargs = default_kwarg.copy()\n+    original_keys = kwargs.keys()\n     for key, value in local_kwarg.items():\n-        kwargs[get_original_key(kwargs.keys(), key)] = value\n+        kwargs[get_original_key(original_keys, key)] = value\n \n     # Remove keys that are set to None.\n     for (k, v) in local_kwarg.items():\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#ef8563ab36c6b52834ee9c35f6f75a424cd9ceef", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 92 | Lines Deleted: 8 | Files Changed: 4 | Hunks: 12 | Methods Changed: 7 | Complexity Δ (Sum/Max): 16/7 | Churn Δ: 100 | Churn Cumulative: 12249 | Contributors (this commit): 114 | Commits (past 90d): 111 | Contributors (cumulative): 141 | DMM Complexity: 0.32786885245901637\n\nDIFF:\n@@ -12,6 +12,7 @@ import socket\n \n from .models import Response\n from .packages.urllib3.poolmanager import PoolManager, proxy_from_url\n+from .packages.urllib3.response import HTTPResponse\n from .hooks import dispatch_hook\n from .compat import urlparse, basestring, urldefrag\n from .utils import (DEFAULT_CA_BUNDLE_PATH, get_encoding_from_headers,\n@@ -154,11 +155,12 @@ class HTTPAdapter(BaseAdapter):\n         conn = self.get_connection(request.url, proxies)\n \n         self.cert_verify(conn, request.url, verify, cert)\n-\n         url = self.request_url(request, proxies)\n \n+        chunked = not (request.body is None or 'Content-Length' in request.headers)\n+\n         try:\n-            # Send the request.\n+            if not chunked:\n                 resp = conn.urlopen(\n                     method=request.method,\n                     url=url,\n@@ -169,7 +171,35 @@ class HTTPAdapter(BaseAdapter):\n                     preload_content=False,\n                     decode_content=False,\n                     retries=self.max_retries,\n-                timeout=timeout,\n+                    timeout=timeout\n+                )\n+\n+            # Send the request.\n+            else:\n+                if hasattr(conn, 'proxy_pool'):\n+                    conn = conn.proxy_pool\n+\n+                low_conn = conn._get_conn(timeout=timeout)\n+                low_conn.putrequest(request.method, url, skip_accept_encoding=True)\n+\n+                for header, value in request.headers.items():\n+                    low_conn.putheader(header, value)\n+\n+                low_conn.endheaders()\n+\n+                for i in request.body:\n+                    low_conn.send(hex(len(i))[2:].encode('utf-8'))\n+                    low_conn.send(b'\\r\\n')\n+                    low_conn.send(i)\n+                    low_conn.send(b'\\r\\n')\n+                low_conn.send(b'0\\r\\n\\r\\n')\n+\n+                r = low_conn.getresponse()\n+                resp = HTTPResponse.from_httplib(r,\n+                    pool=conn,\n+                    connection=low_conn,\n+                    preload_content=False,\n+                    decode_content=False\n                 )\n \n         except socket.error as sockerr:\n\n@@ -22,7 +22,7 @@ from .exceptions import HTTPError, RequestException, MissingSchema, InvalidURL\n from .utils import (\n     stream_untransfer, guess_filename, requote_uri,\n     stream_decode_response_unicode, to_key_val_list, parse_header_links,\n-    iter_slices, guess_json_utf)\n+    iter_slices, guess_json_utf, super_len)\n from .compat import (\n     cookielib, urlparse, urlunparse, urlsplit, urlencode, str, bytes, StringIO,\n     is_py2, chardet, json, builtin_str, basestring)\n@@ -321,20 +321,45 @@ class PreparedRequest(RequestEncodingMixin, RequestHooksMixin):\n     def prepare_body(self, data, files):\n         \"\"\"Prepares the given HTTP body data.\"\"\"\n \n-        # If a generator is provided, error out.\n-        if isinstance(data, type(_ for _ in [])):\n-            raise NotImplementedError('Generator bodies are not supported yet.')\n+        # Check if file, fo, generator, iterator.\n+        # If not, run through normal process.\n \n         # Nottin' on you.\n         body = None\n         content_type = None\n+        length = None\n+        is_stream = False\n \n+        is_stream = all([\n+            hasattr(data, '__iter__'),\n+            not isinstance(data, basestring),\n+            not isinstance(data, dict)\n+        ])\n+\n+        try:\n+            length = super_len(data)\n+        except (TypeError, AttributeError):\n+            length = False\n+\n+        if is_stream:\n+            body = data\n+\n+            if files:\n+                raise NotImplementedError('Streamed bodies and files are mutually exclusive.')\n+\n+            if length:\n+                self.headers['Content-Length'] = length\n+            else:\n+                self.headers['Transfer-Encoding'] = 'chunked'\n+        # Check if file, fo, generator, iterator.\n+        # If not, run through normal process.\n+\n+        else:\n             # Multi-part file uploads.\n             if files:\n                 (body, content_type) = self._encode_files(files, data)\n             else:\n                 if data:\n-\n                     body = self._encode_params(data)\n                     if isinstance(data, str) or isinstance(data, builtin_str) or hasattr(data, 'read'):\n                         content_type = None\n\n@@ -8,6 +8,28 @@ Data structures that power Requests.\n \n \"\"\"\n \n+import os\n+from itertools import islice\n+\n+class IteratorProxy(object):\n+    \"\"\"docstring for IteratorProxy\"\"\"\n+    def __init__(self, i):\n+        self.i = i\n+        # self.i = chain.from_iterable(i)\n+\n+    def __iter__(self):\n+        return self.i\n+\n+    def __len__(self):\n+        if hasattr(self.i, '__len__'):\n+            return len(self.i)\n+        if hasattr(self.i, 'len'):\n+            return self.i.len\n+        if hasattr(self.i, 'fileno'):\n+            return os.fstat(self.i.fileno()).st_size\n+\n+    def read(self, n):\n+        return \"\".join(islice(self.i, None, n))\n \n class CaseInsensitiveDict(dict):\n     \"\"\"Case-insensitive Dictionary\n\n@@ -40,6 +40,13 @@ def dict_to_sequence(d):\n \n     return d\n \n+def super_len(o):\n+    if hasattr(o, '__len__'):\n+        return len(o)\n+    if hasattr(o, 'len'):\n+        return o.len\n+    if hasattr(o, 'fileno'):\n+        return os.fstat(o.fileno()).st_size\n \n def get_netrc_auth(url):\n     \"\"\"Returns the Requests tuple auth for a given url from netrc.\"\"\"\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
