{"custom_id": "fastapi#e170c86412132d31dcba2414baf4fd7ff904ff4e", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 312 | Contributors (this commit): 2 | Commits (past 90d): 4 | Contributors (cumulative): 2 | DMM Complexity: None\n\nDIFF:\n@@ -1,6 +1,6 @@\n \"\"\"FastAPI framework, high performance, easy to learn, fast to code, ready for production\"\"\"\n \n-__version__ = \"0.62.0\"\n+__version__ = \"0.63.0\"\n \n from starlette import status as status\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#a7cc25eb11c48dfd12213eca540fa8ea18452216", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 21 | Lines Deleted: 10 | Files Changed: 1 | Hunks: 8 | Methods Changed: 2 | Complexity Δ (Sum/Max): -1/0 | Churn Δ: 31 | Churn Cumulative: 567 | Contributors (this commit): 1 | Commits (past 90d): 5 | Contributors (cumulative): 1 | DMM Complexity: None\n\nDIFF:\n@@ -1,10 +1,10 @@\n import logging\n import subprocess\n import sys\n-from collections import Counter\n+from collections import Counter, defaultdict\n from datetime import datetime, timedelta, timezone\n from pathlib import Path\n-from typing import Container, Dict, List, Optional, Set\n+from typing import Container, DefaultDict, Dict, List, Optional, Set\n \n import httpx\n import yaml\n@@ -375,7 +375,7 @@ def get_contributors(settings: Settings):\n     return contributors, commentors, reviewers, authors\n \n \n-def get_individual_sponsors(settings: Settings, max_individual_sponsor: int = 5):\n+def get_individual_sponsors(settings: Settings):\n     nodes: List[SponsorshipAsMaintainerNode] = []\n     edges = get_graphql_sponsor_edges(settings=settings)\n \n@@ -385,12 +385,12 @@ def get_individual_sponsors(settings: Settings, max_individual_sponsor: int = 5)\n         last_edge = edges[-1]\n         edges = get_graphql_sponsor_edges(settings=settings, after=last_edge.cursor)\n \n-    entities: Dict[str, SponsorEntity] = {}\n+    tiers: DefaultDict[float, Dict[str, SponsorEntity]] = defaultdict(dict)\n     for node in nodes:\n-        if node.tier.monthlyPriceInDollars > max_individual_sponsor:\n-            continue\n-        entities[node.sponsorEntity.login] = node.sponsorEntity\n-    return entities\n+        tiers[node.tier.monthlyPriceInDollars][\n+            node.sponsorEntity.login\n+        ] = node.sponsorEntity\n+    return tiers\n \n \n def get_top_users(\n@@ -475,9 +475,19 @@ if __name__ == \"__main__\":\n         skip_users=skip_users,\n     )\n \n-    sponsors_by_login = get_individual_sponsors(settings=settings)\n+    tiers = get_individual_sponsors(settings=settings)\n+    sponsors_50 = []\n+    for login, sponsor in tiers[50].items():\n+        sponsors_50.append(\n+            {\"login\": login, \"avatarUrl\": sponsor.avatarUrl, \"url\": sponsor.url}\n+        )\n+    keys = list(tiers.keys())\n+    keys.sort(reverse=True)\n     sponsors = []\n-    for login, sponsor in sponsors_by_login.items():\n+    for key in keys:\n+        if key >= 50:\n+            continue\n+        for login, sponsor in tiers[key].items():\n             sponsors.append(\n                 {\"login\": login, \"avatarUrl\": sponsor.avatarUrl, \"url\": sponsor.url}\n             )\n@@ -488,6 +498,7 @@ if __name__ == \"__main__\":\n         \"last_month_active\": last_month_active,\n         \"top_contributors\": top_contributors,\n         \"top_reviewers\": top_reviewers,\n+        \"sponsors_50\": sponsors_50,\n         \"sponsors\": sponsors,\n     }\n     people_path = Path(\"./docs/en/data/people.yml\")\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#4d208b2b9035e24bdf80505571b5b1bac8f9ae7a", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 5 | Lines Deleted: 5 | Files Changed: 2 | Hunks: 4 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 10 | Churn Cumulative: 1974 | Contributors (this commit): 25 | Commits (past 90d): 3 | Contributors (cumulative): 29 | DMM Complexity: None\n\nDIFF:\n@@ -752,7 +752,7 @@ def get_body_field(*, dependant: Dependant, name: str) -> Optional[ModelField]:\n     for param in flat_dependant.body_params:\n         setattr(param.field_info, \"embed\", True)\n     model_name = \"Body_\" + name\n-    BodyModel = create_model(model_name)\n+    BodyModel: Type[BaseModel] = create_model(model_name)\n     for f in flat_dependant.body_params:\n         BodyModel.__fields__[f.name] = get_schema_compatible_field(field=f)\n     required = any(True for f in flat_dependant.body_params if f.required)\n\n@@ -1,6 +1,6 @@\n-from typing import Any, Dict, Optional, Sequence\n+from typing import Any, Dict, Optional, Sequence, Type\n \n-from pydantic import ValidationError, create_model\n+from pydantic import BaseModel, ValidationError, create_model\n from pydantic.error_wrappers import ErrorList\n from starlette.exceptions import HTTPException as StarletteHTTPException\n \n@@ -16,8 +16,8 @@ class HTTPException(StarletteHTTPException):\n         self.headers = headers\n \n \n-RequestErrorModel = create_model(\"Request\")\n-WebSocketErrorModel = create_model(\"WebSocket\")\n+RequestErrorModel: Type[BaseModel] = create_model(\"Request\")\n+WebSocketErrorModel: Type[BaseModel] = create_model(\"WebSocket\")\n \n \n class FastAPIError(RuntimeError):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#2a673211302e7ea269fa05e06775f76578851591", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 314 | Contributors (this commit): 2 | Commits (past 90d): 1 | Contributors (cumulative): 2 | DMM Complexity: None\n\nDIFF:\n@@ -1,6 +1,6 @@\n \"\"\"FastAPI framework, high performance, easy to learn, fast to code, ready for production\"\"\"\n \n-__version__ = \"0.63.0\"\n+__version__ = \"0.64.0\"\n \n from starlette import status as status\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#da8679122405c42cf6ec85b554b6c15b8ad7e8d5", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 3 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 3 | Churn Cumulative: 588 | Contributors (this commit): 2 | Commits (past 90d): 1 | Contributors (cumulative): 2 | DMM Complexity: 1.0\n\nDIFF:\n@@ -206,6 +206,9 @@ index_sponsors_template = \"\"\"\n {% if sponsors %}\n {% for sponsor in sponsors.gold -%}\n <a href=\"{{ sponsor.url }}\" target=\"_blank\" title=\"{{ sponsor.title }}\"><img src=\"{{ sponsor.img }}\"></a>\n+{% endfor -%}\n+{%- for sponsor in sponsors.silver -%}\n+<a href=\"{{ sponsor.url }}\" target=\"_blank\" title=\"{{ sponsor.title }}\"><img src=\"{{ sponsor.img }}\"></a>\n {% endfor %}\n {% endif %}\n \"\"\"\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#273b2cd6462ef8c3baa38997bb13f5fe4f15c892", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 3 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 3 | Churn Cumulative: 591 | Contributors (this commit): 2 | Commits (past 90d): 2 | Contributors (cumulative): 2 | DMM Complexity: 1.0\n\nDIFF:\n@@ -106,6 +106,9 @@ def new_lang(lang: str = typer.Argument(..., callback=lang_callback)):\n     en_index_content = en_index_path.read_text(encoding=\"utf-8\")\n     new_index_content = f\"{missing_translation_snippet}\\n\\n{en_index_content}\"\n     new_index_path.write_text(new_index_content, encoding=\"utf-8\")\n+    new_overrides_gitignore_path = new_path / \"overrides\" / \".gitignore\"\n+    new_overrides_gitignore_path.parent.mkdir(parents=True, exist_ok=True)\n+    new_overrides_gitignore_path.write_text(\"\")\n     typer.secho(f\"Successfully initialized: {new_path}\", color=typer.colors.GREEN)\n     update_languages(lang=None)\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#4aed0411e9ead36641218319711ea69e2302bbb1", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 48 | Lines Deleted: 1 | Files Changed: 2 | Hunks: 3 | Methods Changed: 3 | Complexity Δ (Sum/Max): 3/2 | Churn Δ: 49 | Churn Cumulative: 166 | Contributors (this commit): 2 | Commits (past 90d): 2 | Contributors (cumulative): 4 | DMM Complexity: 1.0\n\nDIFF:\n@@ -7,7 +7,12 @@ from starlette.responses import PlainTextResponse as PlainTextResponse  # noqa\n from starlette.responses import RedirectResponse as RedirectResponse  # noqa\n from starlette.responses import Response as Response  # noqa\n from starlette.responses import StreamingResponse as StreamingResponse  # noqa\n-from starlette.responses import UJSONResponse as UJSONResponse  # noqa\n+\n+try:\n+    import ujson\n+except ImportError:  # pragma: nocover\n+    ujson = None  # type: ignore\n+\n \n try:\n     import orjson\n@@ -15,6 +20,12 @@ except ImportError:  # pragma: nocover\n     orjson = None  # type: ignore\n \n \n+class UJSONResponse(JSONResponse):\n+    def render(self, content: Any) -> bytes:\n+        assert ujson is not None, \"ujson must be installed to use UJSONResponse\"\n+        return ujson.dumps(content, ensure_ascii=False).encode(\"utf-8\")\n+\n+\n class ORJSONResponse(JSONResponse):\n     media_type = \"application/json\"\n \n\n@@ -0,0 +1,36 @@\n+from fastapi.testclient import TestClient\n+\n+from docs_src.custom_response.tutorial001 import app\n+\n+client = TestClient(app)\n+\n+openapi_schema = {\n+    \"openapi\": \"3.0.2\",\n+    \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n+    \"paths\": {\n+        \"/items/\": {\n+            \"get\": {\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                    }\n+                },\n+                \"summary\": \"Read Items\",\n+                \"operationId\": \"read_items_items__get\",\n+            }\n+        }\n+    },\n+}\n+\n+\n+def test_openapi_schema():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == openapi_schema\n+\n+\n+def test_get_custom_response():\n+    response = client.get(\"/items/\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == [{\"item_id\": \"Foo\"}]\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#b890bd1dc50622ebca8e984c03a055043a882302", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 316 | Contributors (this commit): 2 | Commits (past 90d): 2 | Contributors (cumulative): 2 | DMM Complexity: None\n\nDIFF:\n@@ -1,6 +1,6 @@\n \"\"\"FastAPI framework, high performance, easy to learn, fast to code, ready for production\"\"\"\n \n-__version__ = \"0.64.0\"\n+__version__ = \"0.65.0\"\n \n from starlette import status as status\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#43df5d05edd30fdeb16a9f5b26c02d4f47bdd8cb", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 318 | Contributors (this commit): 2 | Commits (past 90d): 3 | Contributors (cumulative): 2 | DMM Complexity: None\n\nDIFF:\n@@ -1,6 +1,6 @@\n \"\"\"FastAPI framework, high performance, easy to learn, fast to code, ready for production\"\"\"\n \n-__version__ = \"0.65.0\"\n+__version__ = \"0.65.1\"\n \n from starlette import status as status\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#fa7e3c996edf2d5482fff8f9d890ac2390dede4d", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 94 | Lines Deleted: 14 | Files Changed: 3 | Hunks: 9 | Methods Changed: 9 | Complexity Δ (Sum/Max): 10/5 | Churn Δ: 108 | Churn Cumulative: 4676 | Contributors (this commit): 29 | Commits (past 90d): 3 | Contributors (cumulative): 37 | DMM Complexity: 0.8208955223880597\n\nDIFF:\n@@ -1,4 +1,5 @@\n import asyncio\n+import email.message\n import enum\n import inspect\n import json\n@@ -36,7 +37,7 @@ from fastapi.utils import (\n )\n from pydantic import BaseModel\n from pydantic.error_wrappers import ErrorWrapper, ValidationError\n-from pydantic.fields import ModelField\n+from pydantic.fields import ModelField, Undefined\n from starlette import routing\n from starlette.concurrency import run_in_threadpool\n from starlette.exceptions import HTTPException\n@@ -174,14 +175,26 @@ def get_request_handler(\n \n     async def app(request: Request) -> Response:\n         try:\n-            body = None\n+            body: Any = None\n             if body_field:\n                 if is_body_form:\n                     body = await request.form()\n                 else:\n                     body_bytes = await request.body()\n                     if body_bytes:\n-                        body = await request.json()\n+                        json_body: Any = Undefined\n+                        content_type_value = request.headers.get(\"content-type\")\n+                        if content_type_value:\n+                            message = email.message.Message()\n+                            message[\"content-type\"] = content_type_value\n+                            if message.get_content_maintype() == \"application\":\n+                                subtype = message.get_content_subtype()\n+                                if subtype == \"json\" or subtype.endswith(\"+json\"):\n+                                    json_body = await request.json()\n+                        if json_body != Undefined:\n+                            body = json_body\n+                        else:\n+                            body = body_bytes\n         except json.JSONDecodeError as e:\n             raise RequestValidationError([ErrorWrapper(e, (\"body\", e.pos))], body=e.doc)\n         except Exception as e:\n\n@@ -173,25 +173,91 @@ def test_post_body(path, body, expected_status, expected_response):\n \n \n def test_post_broken_body():\n+    response = client.post(\n+        \"/items/\",\n+        headers={\"content-type\": \"application/json\"},\n+        data=\"{some broken json}\",\n+    )\n+    assert response.status_code == 422, response.text\n+    assert response.json() == {\n+        \"detail\": [\n+            {\n+                \"loc\": [\"body\", 1],\n+                \"msg\": \"Expecting property name enclosed in double quotes: line 1 column 2 (char 1)\",\n+                \"type\": \"value_error.jsondecode\",\n+                \"ctx\": {\n+                    \"msg\": \"Expecting property name enclosed in double quotes\",\n+                    \"doc\": \"{some broken json}\",\n+                    \"pos\": 1,\n+                    \"lineno\": 1,\n+                    \"colno\": 2,\n+                },\n+            }\n+        ]\n+    }\n+\n+\n+def test_post_form_for_json():\n     response = client.post(\"/items/\", data={\"name\": \"Foo\", \"price\": 50.5})\n     assert response.status_code == 422, response.text\n     assert response.json() == {\n         \"detail\": [\n             {\n-                \"ctx\": {\n-                    \"colno\": 1,\n-                    \"doc\": \"name=Foo&price=50.5\",\n-                    \"lineno\": 1,\n-                    \"msg\": \"Expecting value\",\n-                    \"pos\": 0,\n-                },\n-                \"loc\": [\"body\", 0],\n-                \"msg\": \"Expecting value: line 1 column 1 (char 0)\",\n-                \"type\": \"value_error.jsondecode\",\n+                \"loc\": [\"body\"],\n+                \"msg\": \"value is not a valid dict\",\n+                \"type\": \"type_error.dict\",\n             }\n         ]\n     }\n+\n+\n+def test_explicit_content_type():\n+    response = client.post(\n+        \"/items/\",\n+        data='{\"name\": \"Foo\", \"price\": 50.5}',\n+        headers={\"Content-Type\": \"application/json\"},\n+    )\n+    assert response.status_code == 200, response.text\n+\n+\n+def test_geo_json():\n+    response = client.post(\n+        \"/items/\",\n+        data='{\"name\": \"Foo\", \"price\": 50.5}',\n+        headers={\"Content-Type\": \"application/geo+json\"},\n+    )\n+    assert response.status_code == 200, response.text\n+\n+\n+def test_wrong_headers():\n+    data = '{\"name\": \"Foo\", \"price\": 50.5}'\n+    invalid_dict = {\n+        \"detail\": [\n+            {\n+                \"loc\": [\"body\"],\n+                \"msg\": \"value is not a valid dict\",\n+                \"type\": \"type_error.dict\",\n+            }\n+        ]\n+    }\n+\n+    response = client.post(\"/items/\", data=data, headers={\"Content-Type\": \"text/plain\"})\n+    assert response.status_code == 422, response.text\n+    assert response.json() == invalid_dict\n+\n+    response = client.post(\n+        \"/items/\", data=data, headers={\"Content-Type\": \"application/geo+json-seq\"}\n+    )\n+    assert response.status_code == 422, response.text\n+    assert response.json() == invalid_dict\n+    response = client.post(\n+        \"/items/\", data=data, headers={\"Content-Type\": \"application/not-really-json\"}\n+    )\n+    assert response.status_code == 422, response.text\n+    assert response.json() == invalid_dict\n+\n+\n+def test_other_exceptions():\n     with patch(\"json.loads\", side_effect=Exception):\n         response = client.post(\"/items/\", json={\"test\": \"test2\"})\n         assert response.status_code == 400, response.text\n-    assert response.json() == {\"detail\": \"There was an error parsing the body\"}\n\n@@ -25,6 +25,7 @@ def test_gzip_request(compress):\n     if compress:\n         data = gzip.compress(data)\n         headers[\"Content-Encoding\"] = \"gzip\"\n+    headers[\"Content-Type\"] = \"application/json\"\n     response = client.post(\"/sum\", data=data, headers=headers)\n     assert response.json() == {\"sum\": n}\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#4d91f978d265a5050baeb3d4b3618c2f5cb7995a", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 320 | Contributors (this commit): 2 | Commits (past 90d): 4 | Contributors (cumulative): 2 | DMM Complexity: None\n\nDIFF:\n@@ -1,6 +1,6 @@\n \"\"\"FastAPI framework, high performance, easy to learn, fast to code, ready for production\"\"\"\n \n-__version__ = \"0.65.1\"\n+__version__ = \"0.65.2\"\n \n from starlette import status as status\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#edf6b2d61ff2645d8fcde30e60421ee9d8f2a4be", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 17 | Lines Deleted: 1 | Files Changed: 2 | Hunks: 2 | Methods Changed: 3 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 18 | Churn Cumulative: 4653 | Contributors (this commit): 29 | Commits (past 90d): 4 | Contributors (cumulative): 33 | DMM Complexity: 0.8571428571428571\n\nDIFF:\n@@ -184,7 +184,9 @@ def get_request_handler(\n                     if body_bytes:\n                         json_body: Any = Undefined\n                         content_type_value = request.headers.get(\"content-type\")\n-                        if content_type_value:\n+                        if not content_type_value:\n+                            json_body = await request.json()\n+                        else:\n                             message = email.message.Message()\n                             message[\"content-type\"] = content_type_value\n                             if message.get_content_maintype() == \"application\":\n\n@@ -229,6 +229,20 @@ def test_geo_json():\n     assert response.status_code == 200, response.text\n \n \n+def test_no_content_type_is_json():\n+    response = client.post(\n+        \"/items/\",\n+        data='{\"name\": \"Foo\", \"price\": 50.5}',\n+    )\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n+        \"name\": \"Foo\",\n+        \"description\": None,\n+        \"price\": 50.5,\n+        \"tax\": None,\n+    }\n+\n+\n def test_wrong_headers():\n     data = '{\"name\": \"Foo\", \"price\": 50.5}'\n     invalid_dict = {\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#79f52c76cf19d1c3f37707049c1cd0c3ca33e7b8", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 322 | Contributors (this commit): 2 | Commits (past 90d): 5 | Contributors (cumulative): 2 | DMM Complexity: None\n\nDIFF:\n@@ -1,6 +1,6 @@\n \"\"\"FastAPI framework, high performance, easy to learn, fast to code, ready for production\"\"\"\n \n-__version__ = \"0.65.2\"\n+__version__ = \"0.65.3\"\n \n from starlette import status as status\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#0ed6c9234186ad61b6e6f21b557c978aed799253", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 54 | Lines Deleted: 0 | Files Changed: 2 | Hunks: 2 | Methods Changed: 3 | Complexity Δ (Sum/Max): 3/3 | Churn Δ: 54 | Churn Cumulative: 693 | Contributors (this commit): 8 | Commits (past 90d): 2 | Contributors (cumulative): 9 | DMM Complexity: 1.0\n\nDIFF:\n@@ -117,6 +117,9 @@ class SchemaBase(BaseModel):\n     example: Optional[Any] = None\n     deprecated: Optional[bool] = None\n \n+    class Config:\n+        extra: str = \"allow\"\n+\n \n class Schema(SchemaBase):\n     allOf: Optional[List[SchemaBase]] = None\n\n@@ -0,0 +1,51 @@\n+from fastapi import FastAPI\n+from fastapi.testclient import TestClient\n+from pydantic import BaseModel\n+\n+app = FastAPI()\n+\n+\n+class Item(BaseModel):\n+    name: str\n+\n+    class Config:\n+        schema_extra = {\n+            \"x-something-internal\": {\"level\": 4},\n+        }\n+\n+\n+@app.get(\"/foo\", response_model=Item)\n+def foo():\n+    return {\"name\": \"Foo item\"}\n+\n+\n+client = TestClient(app)\n+\n+\n+item_schema = {\n+    \"title\": \"Item\",\n+    \"required\": [\"name\"],\n+    \"type\": \"object\",\n+    \"x-something-internal\": {\n+        \"level\": 4,\n+    },\n+    \"properties\": {\n+        \"name\": {\n+            \"title\": \"Name\",\n+            \"type\": \"string\",\n+        }\n+    },\n+}\n+\n+\n+def test_custom_response_schema():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json()[\"components\"][\"schemas\"][\"Item\"] == item_schema\n+\n+\n+def test_response():\n+    # For coverage\n+    response = client.get(\"/foo\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\"name\": \"Foo item\"}\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#0e0931d3082cd44f56f13617b1d76b5dab87eaff", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 176 | Lines Deleted: 2 | Files Changed: 2 | Hunks: 3 | Methods Changed: 13 | Complexity Δ (Sum/Max): 12/12 | Churn Δ: 178 | Churn Cumulative: 667 | Contributors (this commit): 13 | Commits (past 90d): 2 | Contributors (cumulative): 14 | DMM Complexity: 1.0\n\nDIFF:\n@@ -36,9 +36,9 @@ def jsonable_encoder(\n     custom_encoder: Dict[Any, Callable[[Any], Any]] = {},\n     sqlalchemy_safe: bool = True,\n ) -> Any:\n-    if include is not None and not isinstance(include, set):\n+    if include is not None and not isinstance(include, (set, dict)):\n         include = set(include)\n-    if exclude is not None and not isinstance(exclude, set):\n+    if exclude is not None and not isinstance(exclude, (set, dict)):\n         exclude = set(exclude)\n     if isinstance(obj, BaseModel):\n         encoder = getattr(obj.__config__, \"json_encoders\", {})\n\n@@ -0,0 +1,174 @@\n+from fastapi import FastAPI\n+from fastapi.testclient import TestClient\n+from pydantic import BaseModel\n+\n+\n+class Test(BaseModel):\n+    foo: str\n+    bar: str\n+\n+\n+class Test2(BaseModel):\n+    test: Test\n+    baz: str\n+\n+\n+class Test3(BaseModel):\n+    name: str\n+    age: int\n+    test2: Test2\n+\n+\n+app = FastAPI()\n+\n+\n+@app.get(\n+    \"/simple_include\",\n+    response_model=Test2,\n+    response_model_include={\"baz\": ..., \"test\": {\"foo\"}},\n+)\n+def simple_include():\n+    return Test2(\n+        test=Test(foo=\"simple_include test foo\", bar=\"simple_include test bar\"),\n+        baz=\"simple_include test2 baz\",\n+    )\n+\n+\n+@app.get(\n+    \"/simple_include_dict\",\n+    response_model=Test2,\n+    response_model_include={\"baz\": ..., \"test\": {\"foo\"}},\n+)\n+def simple_include_dict():\n+    return {\n+        \"test\": {\n+            \"foo\": \"simple_include_dict test foo\",\n+            \"bar\": \"simple_include_dict test bar\",\n+        },\n+        \"baz\": \"simple_include_dict test2 baz\",\n+    }\n+\n+\n+@app.get(\n+    \"/simple_exclude\",\n+    response_model=Test2,\n+    response_model_exclude={\"test\": {\"bar\"}},\n+)\n+def simple_exclude():\n+    return Test2(\n+        test=Test(foo=\"simple_exclude test foo\", bar=\"simple_exclude test bar\"),\n+        baz=\"simple_exclude test2 baz\",\n+    )\n+\n+\n+@app.get(\n+    \"/simple_exclude_dict\",\n+    response_model=Test2,\n+    response_model_exclude={\"test\": {\"bar\"}},\n+)\n+def simple_exclude_dict():\n+    return {\n+        \"test\": {\n+            \"foo\": \"simple_exclude_dict test foo\",\n+            \"bar\": \"simple_exclude_dict test bar\",\n+        },\n+        \"baz\": \"simple_exclude_dict test2 baz\",\n+    }\n+\n+\n+@app.get(\n+    \"/mixed\",\n+    response_model=Test3,\n+    response_model_include={\"test2\", \"name\"},\n+    response_model_exclude={\"test2\": {\"baz\"}},\n+)\n+def mixed():\n+    return Test3(\n+        name=\"mixed test3 name\",\n+        age=3,\n+        test2=Test2(\n+            test=Test(foo=\"mixed test foo\", bar=\"mixed test bar\"), baz=\"mixed test2 baz\"\n+        ),\n+    )\n+\n+\n+@app.get(\n+    \"/mixed_dict\",\n+    response_model=Test3,\n+    response_model_include={\"test2\", \"name\"},\n+    response_model_exclude={\"test2\": {\"baz\"}},\n+)\n+def mixed_dict():\n+    return {\n+        \"name\": \"mixed_dict test3 name\",\n+        \"age\": 3,\n+        \"test2\": {\n+            \"test\": {\"foo\": \"mixed_dict test foo\", \"bar\": \"mixed_dict test bar\"},\n+            \"baz\": \"mixed_dict test2 baz\",\n+        },\n+    }\n+\n+\n+client = TestClient(app)\n+\n+\n+def test_nested_include_simple():\n+    response = client.get(\"/simple_include\")\n+\n+    assert response.status_code == 200, response.text\n+\n+    assert response.json() == {\n+        \"baz\": \"simple_include test2 baz\",\n+        \"test\": {\"foo\": \"simple_include test foo\"},\n+    }\n+\n+\n+def test_nested_include_simple_dict():\n+    response = client.get(\"/simple_include_dict\")\n+\n+    assert response.status_code == 200, response.text\n+\n+    assert response.json() == {\n+        \"baz\": \"simple_include_dict test2 baz\",\n+        \"test\": {\"foo\": \"simple_include_dict test foo\"},\n+    }\n+\n+\n+def test_nested_exclude_simple():\n+    response = client.get(\"/simple_exclude\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n+        \"baz\": \"simple_exclude test2 baz\",\n+        \"test\": {\"foo\": \"simple_exclude test foo\"},\n+    }\n+\n+\n+def test_nested_exclude_simple_dict():\n+    response = client.get(\"/simple_exclude_dict\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n+        \"baz\": \"simple_exclude_dict test2 baz\",\n+        \"test\": {\"foo\": \"simple_exclude_dict test foo\"},\n+    }\n+\n+\n+def test_nested_include_mixed():\n+    response = client.get(\"/mixed\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n+        \"name\": \"mixed test3 name\",\n+        \"test2\": {\n+            \"test\": {\"foo\": \"mixed test foo\", \"bar\": \"mixed test bar\"},\n+        },\n+    }\n+\n+\n+def test_nested_include_mixed_dict():\n+    response = client.get(\"/mixed_dict\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n+        \"name\": \"mixed_dict test3 name\",\n+        \"test2\": {\n+            \"test\": {\"foo\": \"mixed_dict test foo\", \"bar\": \"mixed_dict test bar\"},\n+        },\n+    }\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#7e9d5aacf8044728e09e6c16e4104fc96b8cea28", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 324 | Contributors (this commit): 2 | Commits (past 90d): 6 | Contributors (cumulative): 2 | DMM Complexity: None\n\nDIFF:\n@@ -1,6 +1,6 @@\n \"\"\"FastAPI framework, high performance, easy to learn, fast to code, ready for production\"\"\"\n \n-__version__ = \"0.65.3\"\n+__version__ = \"0.66.0\"\n \n from starlette import status as status\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#2d296c5d079f9fa29531fe9659581e858771c3ab", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 102 | Lines Deleted: 109 | Files Changed: 5 | Hunks: 48 | Methods Changed: 28 | Complexity Δ (Sum/Max): 2/2 | Churn Δ: 211 | Churn Cumulative: 1099 | Contributors (this commit): 5 | Commits (past 90d): 6 | Contributors (cumulative): 16 | DMM Complexity: None\n\nDIFF:\n@@ -7,5 +7,8 @@ app = FastAPI()\n \n @app.get(\"/\")\n def main():\n-    file_like = open(some_file_path, mode=\"rb\")\n-    return StreamingResponse(file_like, media_type=\"video/mp4\")\n+    def iterfile():  # (1)\n+        with open(some_file_path, mode=\"rb\") as file_like:  # (2)\n+            yield from file_like  # (3)\n+\n+    return StreamingResponse(iterfile(), media_type=\"video/mp4\")\n\n@@ -3,20 +3,20 @@ from fastapi.testclient import TestClient\n from pydantic import BaseModel\n \n \n-class Test(BaseModel):\n+class Model1(BaseModel):\n     foo: str\n     bar: str\n \n \n-class Test2(BaseModel):\n-    test: Test\n+class Model2(BaseModel):\n+    ref: Model1\n     baz: str\n \n \n-class Test3(BaseModel):\n+class Model3(BaseModel):\n     name: str\n     age: int\n-    test2: Test2\n+    ref2: Model2\n \n \n app = FastAPI()\n@@ -24,87 +24,88 @@ app = FastAPI()\n \n @app.get(\n     \"/simple_include\",\n-    response_model=Test2,\n-    response_model_include={\"baz\": ..., \"test\": {\"foo\"}},\n+    response_model=Model2,\n+    response_model_include={\"baz\": ..., \"ref\": {\"foo\"}},\n )\n def simple_include():\n-    return Test2(\n-        test=Test(foo=\"simple_include test foo\", bar=\"simple_include test bar\"),\n-        baz=\"simple_include test2 baz\",\n+    return Model2(\n+        ref=Model1(foo=\"simple_include model foo\", bar=\"simple_include model bar\"),\n+        baz=\"simple_include model2 baz\",\n     )\n \n \n @app.get(\n     \"/simple_include_dict\",\n-    response_model=Test2,\n-    response_model_include={\"baz\": ..., \"test\": {\"foo\"}},\n+    response_model=Model2,\n+    response_model_include={\"baz\": ..., \"ref\": {\"foo\"}},\n )\n def simple_include_dict():\n     return {\n-        \"test\": {\n-            \"foo\": \"simple_include_dict test foo\",\n-            \"bar\": \"simple_include_dict test bar\",\n+        \"ref\": {\n+            \"foo\": \"simple_include_dict model foo\",\n+            \"bar\": \"simple_include_dict model bar\",\n         },\n-        \"baz\": \"simple_include_dict test2 baz\",\n+        \"baz\": \"simple_include_dict model2 baz\",\n     }\n \n \n @app.get(\n     \"/simple_exclude\",\n-    response_model=Test2,\n-    response_model_exclude={\"test\": {\"bar\"}},\n+    response_model=Model2,\n+    response_model_exclude={\"ref\": {\"bar\"}},\n )\n def simple_exclude():\n-    return Test2(\n-        test=Test(foo=\"simple_exclude test foo\", bar=\"simple_exclude test bar\"),\n-        baz=\"simple_exclude test2 baz\",\n+    return Model2(\n+        ref=Model1(foo=\"simple_exclude model foo\", bar=\"simple_exclude model bar\"),\n+        baz=\"simple_exclude model2 baz\",\n     )\n \n \n @app.get(\n     \"/simple_exclude_dict\",\n-    response_model=Test2,\n-    response_model_exclude={\"test\": {\"bar\"}},\n+    response_model=Model2,\n+    response_model_exclude={\"ref\": {\"bar\"}},\n )\n def simple_exclude_dict():\n     return {\n-        \"test\": {\n-            \"foo\": \"simple_exclude_dict test foo\",\n-            \"bar\": \"simple_exclude_dict test bar\",\n+        \"ref\": {\n+            \"foo\": \"simple_exclude_dict model foo\",\n+            \"bar\": \"simple_exclude_dict model bar\",\n         },\n-        \"baz\": \"simple_exclude_dict test2 baz\",\n+        \"baz\": \"simple_exclude_dict model2 baz\",\n     }\n \n \n @app.get(\n     \"/mixed\",\n-    response_model=Test3,\n-    response_model_include={\"test2\", \"name\"},\n-    response_model_exclude={\"test2\": {\"baz\"}},\n+    response_model=Model3,\n+    response_model_include={\"ref2\", \"name\"},\n+    response_model_exclude={\"ref2\": {\"baz\"}},\n )\n def mixed():\n-    return Test3(\n-        name=\"mixed test3 name\",\n+    return Model3(\n+        name=\"mixed model3 name\",\n         age=3,\n-        test2=Test2(\n-            test=Test(foo=\"mixed test foo\", bar=\"mixed test bar\"), baz=\"mixed test2 baz\"\n+        ref2=Model2(\n+            ref=Model1(foo=\"mixed model foo\", bar=\"mixed model bar\"),\n+            baz=\"mixed model2 baz\",\n         ),\n     )\n \n \n @app.get(\n     \"/mixed_dict\",\n-    response_model=Test3,\n-    response_model_include={\"test2\", \"name\"},\n-    response_model_exclude={\"test2\": {\"baz\"}},\n+    response_model=Model3,\n+    response_model_include={\"ref2\", \"name\"},\n+    response_model_exclude={\"ref2\": {\"baz\"}},\n )\n def mixed_dict():\n     return {\n-        \"name\": \"mixed_dict test3 name\",\n+        \"name\": \"mixed_dict model3 name\",\n         \"age\": 3,\n-        \"test2\": {\n-            \"test\": {\"foo\": \"mixed_dict test foo\", \"bar\": \"mixed_dict test bar\"},\n-            \"baz\": \"mixed_dict test2 baz\",\n+        \"ref2\": {\n+            \"ref\": {\"foo\": \"mixed_dict model foo\", \"bar\": \"mixed_dict model bar\"},\n+            \"baz\": \"mixed_dict model2 baz\",\n         },\n     }\n \n@@ -118,8 +119,8 @@ def test_nested_include_simple():\n     assert response.status_code == 200, response.text\n \n     assert response.json() == {\n-        \"baz\": \"simple_include test2 baz\",\n-        \"test\": {\"foo\": \"simple_include test foo\"},\n+        \"baz\": \"simple_include model2 baz\",\n+        \"ref\": {\"foo\": \"simple_include model foo\"},\n     }\n \n \n@@ -129,8 +130,8 @@ def test_nested_include_simple_dict():\n     assert response.status_code == 200, response.text\n \n     assert response.json() == {\n-        \"baz\": \"simple_include_dict test2 baz\",\n-        \"test\": {\"foo\": \"simple_include_dict test foo\"},\n+        \"baz\": \"simple_include_dict model2 baz\",\n+        \"ref\": {\"foo\": \"simple_include_dict model foo\"},\n     }\n \n \n@@ -138,8 +139,8 @@ def test_nested_exclude_simple():\n     response = client.get(\"/simple_exclude\")\n     assert response.status_code == 200, response.text\n     assert response.json() == {\n-        \"baz\": \"simple_exclude test2 baz\",\n-        \"test\": {\"foo\": \"simple_exclude test foo\"},\n+        \"baz\": \"simple_exclude model2 baz\",\n+        \"ref\": {\"foo\": \"simple_exclude model foo\"},\n     }\n \n \n@@ -147,8 +148,8 @@ def test_nested_exclude_simple_dict():\n     response = client.get(\"/simple_exclude_dict\")\n     assert response.status_code == 200, response.text\n     assert response.json() == {\n-        \"baz\": \"simple_exclude_dict test2 baz\",\n-        \"test\": {\"foo\": \"simple_exclude_dict test foo\"},\n+        \"baz\": \"simple_exclude_dict model2 baz\",\n+        \"ref\": {\"foo\": \"simple_exclude_dict model foo\"},\n     }\n \n \n@@ -156,9 +157,9 @@ def test_nested_include_mixed():\n     response = client.get(\"/mixed\")\n     assert response.status_code == 200, response.text\n     assert response.json() == {\n-        \"name\": \"mixed test3 name\",\n-        \"test2\": {\n-            \"test\": {\"foo\": \"mixed test foo\", \"bar\": \"mixed test bar\"},\n+        \"name\": \"mixed model3 name\",\n+        \"ref2\": {\n+            \"ref\": {\"foo\": \"mixed model foo\", \"bar\": \"mixed model bar\"},\n         },\n     }\n \n@@ -167,8 +168,8 @@ def test_nested_include_mixed_dict():\n     response = client.get(\"/mixed_dict\")\n     assert response.status_code == 200, response.text\n     assert response.json() == {\n-        \"name\": \"mixed_dict test3 name\",\n-        \"test2\": {\n-            \"test\": {\"foo\": \"mixed_dict test foo\", \"bar\": \"mixed_dict test bar\"},\n+        \"name\": \"mixed_dict model3 name\",\n+        \"ref2\": {\n+            \"ref\": {\"foo\": \"mixed_dict model foo\", \"bar\": \"mixed_dict model bar\"},\n         },\n     }\n\n@@ -1,5 +1,3 @@\n-import os\n-\n from fastapi.testclient import TestClient\n \n from docs_src.request_files.tutorial001 import app\n@@ -152,35 +150,35 @@ def test_post_body_json():\n     assert response.json() == file_required\n \n \n-def test_post_file(tmpdir):\n-    path = os.path.join(tmpdir, \"test.txt\")\n-    with open(path, \"wb\") as file:\n-        file.write(b\"<file content>\")\n+def test_post_file(tmp_path):\n+    path = tmp_path / \"test.txt\"\n+    path.write_bytes(b\"<file content>\")\n \n     client = TestClient(app)\n-    response = client.post(\"/files/\", files={\"file\": open(path, \"rb\")})\n+    with path.open(\"rb\") as file:\n+        response = client.post(\"/files/\", files={\"file\": file})\n     assert response.status_code == 200, response.text\n     assert response.json() == {\"file_size\": 14}\n \n \n-def test_post_large_file(tmpdir):\n+def test_post_large_file(tmp_path):\n     default_pydantic_max_size = 2 ** 16\n-    path = os.path.join(tmpdir, \"test.txt\")\n-    with open(path, \"wb\") as file:\n-        file.write(b\"x\" * (default_pydantic_max_size + 1))\n+    path = tmp_path / \"test.txt\"\n+    path.write_bytes(b\"x\" * (default_pydantic_max_size + 1))\n \n     client = TestClient(app)\n-    response = client.post(\"/files/\", files={\"file\": open(path, \"rb\")})\n+    with path.open(\"rb\") as file:\n+        response = client.post(\"/files/\", files={\"file\": file})\n     assert response.status_code == 200, response.text\n     assert response.json() == {\"file_size\": default_pydantic_max_size + 1}\n \n \n-def test_post_upload_file(tmpdir):\n-    path = os.path.join(tmpdir, \"test.txt\")\n-    with open(path, \"wb\") as file:\n-        file.write(b\"<file content>\")\n+def test_post_upload_file(tmp_path):\n+    path = tmp_path / \"test.txt\"\n+    path.write_bytes(b\"<file content>\")\n \n     client = TestClient(app)\n-    response = client.post(\"/uploadfile/\", files={\"file\": open(path, \"rb\")})\n+    with path.open(\"rb\") as file:\n+        response = client.post(\"/uploadfile/\", files={\"file\": file})\n     assert response.status_code == 200, response.text\n     assert response.json() == {\"filename\": \"test.txt\"}\n\n@@ -1,5 +1,3 @@\n-import os\n-\n from fastapi.testclient import TestClient\n \n from docs_src.request_files.tutorial002 import app\n@@ -172,40 +170,38 @@ def test_post_body_json():\n     assert response.json() == file_required\n \n \n-def test_post_files(tmpdir):\n-    path = os.path.join(tmpdir, \"test.txt\")\n-    with open(path, \"wb\") as file:\n-        file.write(b\"<file content>\")\n-    path2 = os.path.join(tmpdir, \"test2.txt\")\n-    with open(path2, \"wb\") as file:\n-        file.write(b\"<file content2>\")\n+def test_post_files(tmp_path):\n+    path = tmp_path / \"test.txt\"\n+    path.write_bytes(b\"<file content>\")\n+    path2 = tmp_path / \"test2.txt\"\n+    path2.write_bytes(b\"<file content2>\")\n \n     client = TestClient(app)\n+    with path.open(\"rb\") as file, path2.open(\"rb\") as file2:\n         response = client.post(\n             \"/files/\",\n             files=(\n-            (\"files\", (\"test.txt\", open(path, \"rb\"))),\n-            (\"files\", (\"test2.txt\", open(path2, \"rb\"))),\n+                (\"files\", (\"test.txt\", file)),\n+                (\"files\", (\"test2.txt\", file2)),\n             ),\n         )\n     assert response.status_code == 200, response.text\n     assert response.json() == {\"file_sizes\": [14, 15]}\n \n \n-def test_post_upload_file(tmpdir):\n-    path = os.path.join(tmpdir, \"test.txt\")\n-    with open(path, \"wb\") as file:\n-        file.write(b\"<file content>\")\n-    path2 = os.path.join(tmpdir, \"test2.txt\")\n-    with open(path2, \"wb\") as file:\n-        file.write(b\"<file content2>\")\n+def test_post_upload_file(tmp_path):\n+    path = tmp_path / \"test.txt\"\n+    path.write_bytes(b\"<file content>\")\n+    path2 = tmp_path / \"test2.txt\"\n+    path2.write_bytes(b\"<file content2>\")\n \n     client = TestClient(app)\n+    with path.open(\"rb\") as file, path2.open(\"rb\") as file2:\n         response = client.post(\n             \"/uploadfiles/\",\n             files=(\n-            (\"files\", (\"test.txt\", open(path, \"rb\"))),\n-            (\"files\", (\"test2.txt\", open(path2, \"rb\"))),\n+                (\"files\", (\"test.txt\", file)),\n+                (\"files\", (\"test2.txt\", file2)),\n             ),\n         )\n     assert response.status_code == 200, response.text\n\n@@ -1,6 +1,3 @@\n-import os\n-from pathlib import Path\n-\n from fastapi.testclient import TestClient\n \n from docs_src.request_forms_and_files.tutorial001 import app\n@@ -163,31 +160,29 @@ def test_post_body_json():\n     assert response.json() == file_and_token_required\n \n \n-def test_post_file_no_token(tmpdir):\n-    path = os.path.join(tmpdir, \"test.txt\")\n-    with open(path, \"wb\") as file:\n-        file.write(b\"<file content>\")\n+def test_post_file_no_token(tmp_path):\n+    path = tmp_path / \"test.txt\"\n+    path.write_bytes(b\"<file content>\")\n \n     client = TestClient(app)\n-    response = client.post(\"/files/\", files={\"file\": open(path, \"rb\")})\n+    with path.open(\"rb\") as file:\n+        response = client.post(\"/files/\", files={\"file\": file})\n     assert response.status_code == 422, response.text\n     assert response.json() == token_required\n \n \n-def test_post_files_and_token(tmpdir):\n-    patha = Path(tmpdir) / \"test.txt\"\n-    pathb = Path(tmpdir) / \"testb.txt\"\n+def test_post_files_and_token(tmp_path):\n+    patha = tmp_path / \"test.txt\"\n+    pathb = tmp_path / \"testb.txt\"\n     patha.write_text(\"<file content>\")\n     pathb.write_text(\"<file b content>\")\n \n     client = TestClient(app)\n+    with patha.open(\"rb\") as filea, pathb.open(\"rb\") as fileb:\n         response = client.post(\n             \"/files/\",\n             data={\"token\": \"foo\"},\n-        files={\n-            \"file\": patha.open(\"rb\"),\n-            \"fileb\": (\"testb.txt\", pathb.open(\"rb\"), \"text/plain\"),\n-        },\n+            files={\"file\": filea, \"fileb\": (\"testb.txt\", fileb, \"text/plain\")},\n         )\n     assert response.status_code == 200, response.text\n     assert response.json() == {\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#0a38c51b9edfaec5f1d49d01247dc2b8467f5dc1", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 326 | Contributors (this commit): 2 | Commits (past 90d): 7 | Contributors (cumulative): 2 | DMM Complexity: None\n\nDIFF:\n@@ -1,6 +1,6 @@\n \"\"\"FastAPI framework, high performance, easy to learn, fast to code, ready for production\"\"\"\n \n-__version__ = \"0.66.0\"\n+__version__ = \"0.66.1\"\n \n from starlette import status as status\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#1ce7258a018d0ab190b4b80683f938798aa8577f", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 55 | Contributors (this commit): 2 | Commits (past 90d): 1 | Contributors (cumulative): 2 | DMM Complexity: None\n\nDIFF:\n@@ -21,7 +21,7 @@ class DefaultPlaceholder:\n     You shouldn't use this class directly.\n \n     It's used internally to recognize when a default value has been overwritten, even\n-    if the overriden default value was truthy.\n+    if the overridden default value was truthy.\n     \"\"\"\n \n     def __init__(self, value: Any):\n@@ -42,6 +42,6 @@ def Default(value: DefaultType) -> DefaultType:\n     You shouldn't use this function directly.\n \n     It's used internally to recognize when a default value has been overwritten, even\n-    if the overriden default value was truthy.\n+    if the overridden default value was truthy.\n     \"\"\"\n     return DefaultPlaceholder(value)  # type: ignore\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#96fdfc53cc47f30cff59bb847c2c19b79fd9efcd", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 66 | Lines Deleted: 0 | Files Changed: 3 | Hunks: 8 | Methods Changed: 10 | Complexity Δ (Sum/Max): 10/8 | Churn Δ: 66 | Churn Cumulative: 4982 | Contributors (this commit): 33 | Commits (past 90d): 7 | Contributors (cumulative): 42 | DMM Complexity: 0.9090909090909091\n\nDIFF:\n@@ -1,3 +1,4 @@\n+import dataclasses\n from collections import defaultdict\n from enum import Enum\n from pathlib import PurePath\n@@ -61,6 +62,8 @@ def jsonable_encoder(\n             custom_encoder=encoder,\n             sqlalchemy_safe=sqlalchemy_safe,\n         )\n+    if dataclasses.is_dataclass(obj):\n+        return dataclasses.asdict(obj)\n     if isinstance(obj, Enum):\n         return obj.value\n     if isinstance(obj, PurePath):\n\n@@ -1,4 +1,5 @@\n import asyncio\n+import dataclasses\n import email.message\n import enum\n import inspect\n@@ -90,6 +91,8 @@ def _prepare_response_content(\n             )\n             for k, v in res.items()\n         }\n+    elif dataclasses.is_dataclass(res):\n+        return dataclasses.asdict(res)\n     return res\n \n \n\n@@ -19,6 +19,11 @@ def get_valid():\n     return {\"name\": \"valid\", \"price\": 1.0}\n \n \n+@app.get(\"/items/object\", response_model=Item)\n+def get_object():\n+    return Item(name=\"object\", price=1.0, owner_ids=[1, 2, 3])\n+\n+\n @app.get(\"/items/coerce\", response_model=Item)\n def get_coerce():\n     return {\"name\": \"coerce\", \"price\": \"1.0\"}\n@@ -33,6 +38,29 @@ def get_validlist():\n     ]\n \n \n+@app.get(\"/items/objectlist\", response_model=List[Item])\n+def get_objectlist():\n+    return [\n+        Item(name=\"foo\"),\n+        Item(name=\"bar\", price=1.0),\n+        Item(name=\"baz\", price=2.0, owner_ids=[1, 2, 3]),\n+    ]\n+\n+\n+@app.get(\"/items/no-response-model/object\")\n+def get_no_response_model_object():\n+    return Item(name=\"object\", price=1.0, owner_ids=[1, 2, 3])\n+\n+\n+@app.get(\"/items/no-response-model/objectlist\")\n+def get_no_response_model_objectlist():\n+    return [\n+        Item(name=\"foo\"),\n+        Item(name=\"bar\", price=1.0),\n+        Item(name=\"baz\", price=2.0, owner_ids=[1, 2, 3]),\n+    ]\n+\n+\n client = TestClient(app)\n \n \n@@ -42,6 +70,12 @@ def test_valid():\n     assert response.json() == {\"name\": \"valid\", \"price\": 1.0, \"owner_ids\": None}\n \n \n+def test_object():\n+    response = client.get(\"/items/object\")\n+    response.raise_for_status()\n+    assert response.json() == {\"name\": \"object\", \"price\": 1.0, \"owner_ids\": [1, 2, 3]}\n+\n+\n def test_coerce():\n     response = client.get(\"/items/coerce\")\n     response.raise_for_status()\n@@ -56,3 +90,29 @@ def test_validlist():\n         {\"name\": \"bar\", \"price\": 1.0, \"owner_ids\": None},\n         {\"name\": \"baz\", \"price\": 2.0, \"owner_ids\": [1, 2, 3]},\n     ]\n+\n+\n+def test_objectlist():\n+    response = client.get(\"/items/objectlist\")\n+    response.raise_for_status()\n+    assert response.json() == [\n+        {\"name\": \"foo\", \"price\": None, \"owner_ids\": None},\n+        {\"name\": \"bar\", \"price\": 1.0, \"owner_ids\": None},\n+        {\"name\": \"baz\", \"price\": 2.0, \"owner_ids\": [1, 2, 3]},\n+    ]\n+\n+\n+def test_no_response_model_object():\n+    response = client.get(\"/items/no-response-model/object\")\n+    response.raise_for_status()\n+    assert response.json() == {\"name\": \"object\", \"price\": 1.0, \"owner_ids\": [1, 2, 3]}\n+\n+\n+def test_no_response_model_objectlist():\n+    response = client.get(\"/items/no-response-model/objectlist\")\n+    response.raise_for_status()\n+    assert response.json() == [\n+        {\"name\": \"foo\", \"price\": None, \"owner_ids\": None},\n+        {\"name\": \"bar\", \"price\": 1.0, \"owner_ids\": None},\n+        {\"name\": \"baz\", \"price\": 2.0, \"owner_ids\": [1, 2, 3]},\n+    ]\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
