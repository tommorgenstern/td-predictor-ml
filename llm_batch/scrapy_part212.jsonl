{"custom_id": "scrapy#bf5f54fa339b44fec3451c88a78e4620f56c3bc8", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 5 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 2 | Methods Changed: 2 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 7 | Churn Cumulative: 115 | Contributors (this commit): 5 | Commits (past 90d): 6 | Contributors (cumulative): 5 | DMM Complexity: 1.0\n\nDIFF:\n@@ -30,9 +30,12 @@ else:\n     from twisted.internet.task import deferLater\n \n \n-def getarg(request, name, default=None, type=str):\n+def getarg(request, name, default=None, type=None):\n     if name in request.args:\n-        return type(request.args[name][0])\n+        value = request.args[name][0]\n+        if type is not None:\n+            value = type(value)\n+        return value\n     else:\n         return default\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "scrapy#b6ef1f19fd768243407206a882d689764624b42c", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 53 | Lines Deleted: 10 | Files Changed: 2 | Hunks: 12 | Methods Changed: 8 | Complexity Δ (Sum/Max): 75/68 | Churn Δ: 63 | Churn Cumulative: 69 | Contributors (this commit): 3 | Commits (past 90d): 3 | Contributors (cumulative): 5 | DMM Complexity: 0.6923076923076923\n\nDIFF:\n@@ -38,7 +38,7 @@ class BaseItemExporter(object):\n         raise NotImplementedError\n \n     def serialize_field(self, field, name, value):\n-        serializer = field.get('serializer', self._to_str_if_unicode)\n+        serializer = field.get('serializer', lambda x: x)\n         return serializer(value)\n \n     def start_exporting(self):\n@@ -47,9 +47,6 @@ class BaseItemExporter(object):\n     def finish_exporting(self):\n         pass\n \n-    def _to_str_if_unicode(self, value):\n-        return value.encode(self.encoding) if isinstance(value, unicode) else value\n-\n     def _get_serialized_fields(self, item, default_value=None, include_empty=None):\n         \"\"\"Return the fields to export as an iterable of tuples\n         (name, serialized_value)\n@@ -89,7 +86,7 @@ class JsonLinesItemExporter(BaseItemExporter):\n         self.file.write(self.encoder.encode(itemdict) + '\\n')\n \n \n-class JsonItemExporter(JsonLinesItemExporter):\n+class JsonItemExporter(BaseItemExporter):\n \n     def __init__(self, file, **kwargs):\n         self._configure(kwargs, dont_fail=True)\n@@ -170,13 +167,17 @@ class CsvItemExporter(BaseItemExporter):\n         self._headers_not_written = True\n         self._join_multivalued = join_multivalued\n \n+    def serialize_field(self, field, name, value):\n+        serializer = field.get('serializer', self._to_str_if_unicode)\n+        return serializer(value)\n+\n     def _to_str_if_unicode(self, value):\n         if isinstance(value, (list, tuple)):\n             try:\n                 value = self._join_multivalued.join(value)\n             except TypeError:  # list in value may not contain strings\n                 pass\n-        return super(CsvItemExporter, self)._to_str_if_unicode(value)\n+        return value.encode(self.encoding) if isinstance(value, unicode) else value\n \n     def export_item(self, item):\n         if self._headers_not_written:\n@@ -251,7 +252,7 @@ class PythonItemExporter(BaseItemExporter):\n             return dict(self._serialize_dict(value))\n         if hasattr(value, '__iter__'):\n             return [self._serialize_value(v) for v in value]\n-        return self._to_str_if_unicode(value)\n+        return value.encode(self.encoding) if isinstance(value, unicode) else value\n \n     def _serialize_dict(self, value):\n         for key, val in six.iteritems(value):\n\n@@ -23,7 +23,7 @@ class TestItem(Item):\n class BaseItemExporterTest(unittest.TestCase):\n \n     def setUp(self):\n-        self.i = TestItem(name=u'John\\xa3', age='22')\n+        self.i = TestItem(name=u'John\\xa3', age=u'22')\n         self.output = BytesIO()\n         self.ie = self._get_exporter()\n \n@@ -55,6 +55,42 @@ class BaseItemExporterTest(unittest.TestCase):\n         self.assertItemExportWorks(dict(self.i))\n \n     def test_serialize_field(self):\n+        res = self.ie.serialize_field(self.i.fields['name'], 'name', self.i['name'])\n+        self.assertEqual(res, u'John\\xa3')\n+\n+        res = self.ie.serialize_field(self.i.fields['age'], 'age', self.i['age'])\n+        self.assertEqual(res, u'22')\n+\n+    def test_fields_to_export(self):\n+        ie = self._get_exporter(fields_to_export=['name'])\n+        self.assertEqual(list(ie._get_serialized_fields(self.i)), [('name', u'John\\xa3')])\n+\n+    def test_field_custom_serializer(self):\n+        def custom_serializer(value):\n+            return str(int(value) + 2)\n+\n+        class CustomFieldItem(Item):\n+            name = Field()\n+            age = Field(serializer=custom_serializer)\n+\n+        i = CustomFieldItem(name=u'John\\xa3', age=u'22')\n+\n+        ie = self._get_exporter()\n+        self.assertEqual(ie.serialize_field(i.fields['name'], 'name', i['name']), u'John\\xa3')\n+        self.assertEqual(ie.serialize_field(i.fields['age'], 'age', i['age']), '24')\n+\n+\n+class MidRefactoringBaseItemExporterTest(BaseItemExporterTest):\n+    \"\"\"Class introduced just to keep old behavior of BaseItemExporterTest for the\n+    test cases that inherit from it while we make changes to exporters one by\n+    one -- a needed refactoring trick because the test cases are quite coupled.\n+\n+    When we're done with the changes, we'll have ditched this class.\n+    \"\"\"\n+    def test_serialize_field(self):\n+        if self.ie.__class__ is BaseItemExporter:\n+            return\n+\n         res = self.ie.serialize_field(self.i.fields['name'], 'name', self.i['name'])\n         self.assertEqual(res, 'John\\xc2\\xa3')\n \n@@ -62,6 +98,9 @@ class BaseItemExporterTest(unittest.TestCase):\n         self.assertEqual(res, '22')\n \n     def test_fields_to_export(self):\n+        if self.ie.__class__ is BaseItemExporter:\n+            return\n+\n         ie = self._get_exporter(fields_to_export=['name'])\n         self.assertEqual(list(ie._get_serialized_fields(self.i)), [('name', 'John\\xc2\\xa3')])\n \n@@ -71,6 +110,9 @@ class BaseItemExporterTest(unittest.TestCase):\n         self.assertEqual(name, 'John\\xa3')\n \n     def test_field_custom_serializer(self):\n+        if self.ie.__class__ is BaseItemExporter:\n+            return\n+\n         def custom_serializer(value):\n             return str(int(value) + 2)\n \n@@ -85,7 +127,7 @@ class BaseItemExporterTest(unittest.TestCase):\n         self.assertEqual(ie.serialize_field(i.fields['age'], 'age', i['age']), '24')\n \n \n-class PythonItemExporterTest(BaseItemExporterTest):\n+class PythonItemExporterTest(MidRefactoringBaseItemExporterTest):\n     def _get_exporter(self, **kwargs):\n         return PythonItemExporter(**kwargs)\n \n@@ -152,7 +194,7 @@ class PickleItemExporterTest(BaseItemExporterTest):\n         self.assertEqual(pickle.load(f), i2)\n \n \n-class CsvItemExporterTest(BaseItemExporterTest):\n+class CsvItemExporterTest(MidRefactoringBaseItemExporterTest):\n \n     def _get_exporter(self, **kwargs):\n         return CsvItemExporter(self.output, **kwargs)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "scrapy#c76190d491fca9f35b6758bdc06c34d77f5d9be9", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 63 | Lines Deleted: 46 | Files Changed: 2 | Hunks: 29 | Methods Changed: 15 | Complexity Δ (Sum/Max): 4/4 | Churn Δ: 109 | Churn Cumulative: 178 | Contributors (this commit): 3 | Commits (past 90d): 2 | Contributors (cumulative): 5 | DMM Complexity: 0.0\n\nDIFF:\n@@ -11,7 +11,10 @@ from six.moves import cPickle as pickle\n from xml.sax.saxutils import XMLGenerator\n \n from scrapy.utils.serialize import ScrapyJSONEncoder\n+from scrapy.utils.python import to_bytes, to_unicode\n from scrapy.item import BaseItem\n+import warnings\n+\n \n __all__ = ['BaseItemExporter', 'PprintItemExporter', 'PickleItemExporter',\n            'CsvItemExporter', 'XmlItemExporter', 'JsonLinesItemExporter',\n@@ -83,7 +86,7 @@ class JsonLinesItemExporter(BaseItemExporter):\n \n     def export_item(self, item):\n         itemdict = dict(self._get_serialized_fields(item))\n-        self.file.write(self.encoder.encode(itemdict) + '\\n')\n+        self.file.write(to_bytes(self.encoder.encode(itemdict) + '\\n'))\n \n \n class JsonItemExporter(BaseItemExporter):\n@@ -95,18 +98,18 @@ class JsonItemExporter(BaseItemExporter):\n         self.first_item = True\n \n     def start_exporting(self):\n-        self.file.write(\"[\")\n+        self.file.write(b\"[\")\n \n     def finish_exporting(self):\n-        self.file.write(\"]\")\n+        self.file.write(b\"]\")\n \n     def export_item(self, item):\n         if self.first_item:\n             self.first_item = False\n         else:\n-            self.file.write(',\\n')\n+            self.file.write(b',\\n')\n         itemdict = dict(self._get_serialized_fields(item))\n-        self.file.write(self.encoder.encode(itemdict))\n+        self.file.write(to_bytes(self.encoder.encode(itemdict)))\n \n \n class XmlItemExporter(BaseItemExporter):\n@@ -136,7 +139,8 @@ class XmlItemExporter(BaseItemExporter):\n         if hasattr(serialized_value, 'items'):\n             for subname, value in serialized_value.items():\n                 self._export_xml_field(subname, value)\n-        elif hasattr(serialized_value, '__iter__'):\n+        elif (hasattr(serialized_value, '__iter__')\n+              and not isinstance(serialized_value, six.string_types)):\n               for value in serialized_value:\n                 self._export_xml_field('value', value)\n         else:\n@@ -150,7 +154,7 @@ class XmlItemExporter(BaseItemExporter):\n     # and Python 3.x will require unicode, so \">= 2.7.4\" should be fine.\n     if sys.version_info[:3] >= (2, 7, 4):\n         def _xg_characters(self, serialized_value):\n-            if not isinstance(serialized_value, unicode):\n+            if not isinstance(serialized_value, six.text_type):\n                 serialized_value = serialized_value.decode(self.encoding)\n             return self.xg.characters(serialized_value)\n     else:\n@@ -177,7 +181,7 @@ class CsvItemExporter(BaseItemExporter):\n                 value = self._join_multivalued.join(value)\n             except TypeError:  # list in value may not contain strings\n                 pass\n-        return value.encode(self.encoding) if isinstance(value, unicode) else value\n+        return value.encode(self.encoding) if isinstance(value, six.text_type) else value\n \n     def export_item(self, item):\n         if self._headers_not_written:\n@@ -231,7 +235,7 @@ class PprintItemExporter(BaseItemExporter):\n \n     def export_item(self, item):\n         itemdict = dict(self._get_serialized_fields(item))\n-        self.file.write(pprint.pformat(itemdict) + '\\n')\n+        self.file.write(to_bytes(pprint.pformat(itemdict) + '\\n'))\n \n \n class PythonItemExporter(BaseItemExporter):\n@@ -240,6 +244,13 @@ class PythonItemExporter(BaseItemExporter):\n     json, msgpack, binc, etc) can be used on top of it. Its main goal is to\n     seamless support what BaseItemExporter does plus nested items.\n     \"\"\"\n+    def _configure(self, options, dont_fail=False):\n+        self.binary = options.pop('binary', True)\n+        super(PythonItemExporter, self)._configure(options, dont_fail)\n+        if self.binary:\n+            warnings.warn(\n+                \"PythonItemExporter will drop support for binary export in the future\",\n+                PendingDeprecationWarning)\n \n     def serialize_field(self, field, name, value):\n         serializer = field.get('serializer', self._serialize_value)\n@@ -250,9 +261,13 @@ class PythonItemExporter(BaseItemExporter):\n             return self.export_item(value)\n         if isinstance(value, dict):\n             return dict(self._serialize_dict(value))\n-        if hasattr(value, '__iter__'):\n+        if hasattr(value, '__iter__') \\\n+                and not isinstance(value, six.string_types):\n             return [self._serialize_value(v) for v in value]\n-        return value.encode(self.encoding) if isinstance(value, unicode) else value\n+        if self.binary:\n+            return to_bytes(value, encoding=self.encoding)\n+        else:\n+            return to_unicode(value, encoding=self.encoding)\n \n     def _serialize_dict(self, value):\n         for key, val in six.iteritems(value):\n\n@@ -3,6 +3,7 @@ import re\n import json\n import unittest\n from io import BytesIO\n+import six\n from six.moves import cPickle as pickle\n \n import lxml.etree\n@@ -80,7 +81,7 @@ class BaseItemExporterTest(unittest.TestCase):\n         self.assertEqual(ie.serialize_field(i.fields['age'], 'age', i['age']), '24')\n \n \n-class MidRefactoringBaseItemExporterTest(BaseItemExporterTest):\n+class IntermediateRefactoringBaseItemExporterTest(BaseItemExporterTest):\n     \"\"\"Class introduced just to keep old behavior of BaseItemExporterTest for the\n     test cases that inherit from it while we make changes to exporters one by\n     one -- a needed refactoring trick because the test cases are quite coupled.\n@@ -127,9 +128,9 @@ class MidRefactoringBaseItemExporterTest(BaseItemExporterTest):\n         self.assertEqual(ie.serialize_field(i.fields['age'], 'age', i['age']), '24')\n \n \n-class PythonItemExporterTest(MidRefactoringBaseItemExporterTest):\n+class PythonItemExporterTest(BaseItemExporterTest):\n     def _get_exporter(self, **kwargs):\n-        return PythonItemExporter(**kwargs)\n+        return PythonItemExporter(binary=False, **kwargs)\n \n     def test_nested_item(self):\n         i1 = TestItem(name=u'Joseph', age='22')\n@@ -194,7 +195,8 @@ class PickleItemExporterTest(BaseItemExporterTest):\n         self.assertEqual(pickle.load(f), i2)\n \n \n-class CsvItemExporterTest(MidRefactoringBaseItemExporterTest):\n+@unittest.skipUnless(six.PY2, \"TODO\")\n+class CsvItemExporterTest(IntermediateRefactoringBaseItemExporterTest):\n \n     def _get_exporter(self, **kwargs):\n         return CsvItemExporter(self.output, **kwargs)\n@@ -294,13 +296,13 @@ class XmlItemExporterTest(BaseItemExporterTest):\n         self.assertXmlEquivalent(fp.getvalue(), expected_value)\n \n     def _check_output(self):\n-        expected_value = '<?xml version=\"1.0\" encoding=\"utf-8\"?>\\n<items><item><age>22</age><name>John\\xc2\\xa3</name></item></items>'\n+        expected_value = u'<?xml version=\"1.0\" ?>\\n<items><item><age>22</age><name>John\\xa3</name></item></items>'\n         self.assertXmlEquivalent(self.output.getvalue(), expected_value)\n \n     def test_multivalued_fields(self):\n         self.assertExportResult(\n             TestItem(name=[u'John\\xa3', u'Doe']),\n-            '<?xml version=\"1.0\" encoding=\"utf-8\"?>\\n<items><item><name><value>John\\xc2\\xa3</value><value>Doe</value></name></item></items>'\n+            u'<?xml version=\"1.0\" ?>\\n<items><item><name><value>John\\xa3</value><value>Doe</value></name></item></items>'\n         )\n \n     def test_nested_item(self):\n@@ -309,19 +311,19 @@ class XmlItemExporterTest(BaseItemExporterTest):\n         i3 = TestItem(name=u'buz', age=i2)\n \n         self.assertExportResult(i3,\n-            '<?xml version=\"1.0\" encoding=\"utf-8\"?>\\n'\n-            '<items>'\n-                '<item>'\n-                    '<age>'\n-                        '<age>'\n-                            '<age>22</age>'\n-                            '<name>foo\\xc2\\xa3hoo</name>'\n-                        '</age>'\n-                        '<name>bar</name>'\n-                    '</age>'\n-                    '<name>buz</name>'\n-                '</item>'\n-            '</items>'\n+            u'<?xml version=\"1.0\" ?>\\n'\n+            u'<items>'\n+                u'<item>'\n+                    u'<age>'\n+                        u'<age>'\n+                            u'<age>22</age>'\n+                            u'<name>foo\\xa3hoo</name>'\n+                        u'</age>'\n+                        u'<name>bar</name>'\n+                    u'</age>'\n+                    u'<name>buz</name>'\n+                u'</item>'\n+            u'</items>'\n         )\n \n     def test_nested_list_item(self):\n@@ -330,16 +332,16 @@ class XmlItemExporterTest(BaseItemExporterTest):\n         i3 = TestItem(name=u'buz', age=[i1, i2])\n \n         self.assertExportResult(i3,\n-            '<?xml version=\"1.0\" encoding=\"utf-8\"?>\\n'\n-            '<items>'\n-                '<item>'\n-                    '<age>'\n-                        '<value><name>foo</name></value>'\n-                        '<value><name>bar</name><v2><egg><value>spam</value></egg></v2></value>'\n-                    '</age>'\n-                    '<name>buz</name>'\n-                '</item>'\n-            '</items>'\n+            u'<?xml version=\"1.0\" ?>\\n'\n+            u'<items>'\n+                u'<item>'\n+                    u'<age>'\n+                        u'<value><name>foo</name></value>'\n+                        u'<value><name>bar</name><v2><egg><value>spam</value></egg></v2></value>'\n+                    u'</age>'\n+                    u'<name>buz</name>'\n+                u'</item>'\n+            u'</items>'\n         )\n \n \n@@ -351,7 +353,7 @@ class JsonLinesItemExporterTest(BaseItemExporterTest):\n         return JsonLinesItemExporter(self.output, **kwargs)\n \n     def _check_output(self):\n-        exported = json.loads(self.output.getvalue().strip())\n+        exported = json.loads(to_unicode(self.output.getvalue().strip()))\n         self.assertEqual(exported, dict(self.i))\n \n     def test_nested_item(self):\n@@ -361,7 +363,7 @@ class JsonLinesItemExporterTest(BaseItemExporterTest):\n         self.ie.start_exporting()\n         self.ie.export_item(i3)\n         self.ie.finish_exporting()\n-        exported = json.loads(self.output.getvalue())\n+        exported = json.loads(to_unicode(self.output.getvalue()))\n         self.assertEqual(exported, self._expected_nested)\n \n     def test_extra_keywords(self):\n@@ -379,7 +381,7 @@ class JsonItemExporterTest(JsonLinesItemExporterTest):\n         return JsonItemExporter(self.output, **kwargs)\n \n     def _check_output(self):\n-        exported = json.loads(self.output.getvalue().strip())\n+        exported = json.loads(to_unicode(self.output.getvalue().strip()))\n         self.assertEqual(exported, [dict(self.i)])\n \n     def assertTwoItemsExported(self, item):\n@@ -387,7 +389,7 @@ class JsonItemExporterTest(JsonLinesItemExporterTest):\n         self.ie.export_item(item)\n         self.ie.export_item(item)\n         self.ie.finish_exporting()\n-        exported = json.loads(self.output.getvalue())\n+        exported = json.loads(to_unicode(self.output.getvalue()))\n         self.assertEqual(exported, [dict(item), dict(item)])\n \n     def test_two_items(self):\n@@ -403,7 +405,7 @@ class JsonItemExporterTest(JsonLinesItemExporterTest):\n         self.ie.start_exporting()\n         self.ie.export_item(i3)\n         self.ie.finish_exporting()\n-        exported = json.loads(self.output.getvalue())\n+        exported = json.loads(to_unicode(self.output.getvalue()))\n         expected = {'name': u'Jesus', 'age': {'name': 'Maria', 'age': dict(i1)}}\n         self.assertEqual(exported, [expected])\n \n@@ -414,7 +416,7 @@ class JsonItemExporterTest(JsonLinesItemExporterTest):\n         self.ie.start_exporting()\n         self.ie.export_item(i3)\n         self.ie.finish_exporting()\n-        exported = json.loads(self.output.getvalue())\n+        exported = json.loads(to_unicode(self.output.getvalue()))\n         expected = {'name': u'Jesus', 'age': {'name': 'Maria', 'age': i1}}\n         self.assertEqual(exported, [expected])\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "scrapy#fed7c8b4fca3bb2722eebca97b298b0316ebfbc2", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 3 | Lines Deleted: 5 | Files Changed: 1 | Hunks: 3 | Methods Changed: 2 | Complexity Δ (Sum/Max): -2/0 | Churn Δ: 8 | Churn Cumulative: 60 | Contributors (this commit): 2 | Commits (past 90d): 2 | Contributors (cumulative): 2 | DMM Complexity: 1.0\n\nDIFF:\n@@ -11,7 +11,7 @@ from six.moves import cPickle as pickle\n from xml.sax.saxutils import XMLGenerator\n \n from scrapy.utils.serialize import ScrapyJSONEncoder\n-from scrapy.utils.python import to_bytes, to_unicode\n+from scrapy.utils.python import to_bytes, to_unicode, is_listlike\n from scrapy.item import BaseItem\n import warnings\n \n@@ -139,8 +139,7 @@ class XmlItemExporter(BaseItemExporter):\n         if hasattr(serialized_value, 'items'):\n             for subname, value in serialized_value.items():\n                 self._export_xml_field(subname, value)\n-        elif (hasattr(serialized_value, '__iter__')\n-              and not isinstance(serialized_value, six.string_types)):\n+        elif is_listlike(serialized_value):\n               for value in serialized_value:\n                 self._export_xml_field('value', value)\n         else:\n@@ -261,8 +260,7 @@ class PythonItemExporter(BaseItemExporter):\n             return self.export_item(value)\n         if isinstance(value, dict):\n             return dict(self._serialize_dict(value))\n-        if hasattr(value, '__iter__') \\\n-                and not isinstance(value, six.string_types):\n+        if is_listlike(value):\n             return [self._serialize_value(v) for v in value]\n         if self.binary:\n             return to_bytes(value, encoding=self.encoding)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "scrapy#240ecbf32378a8be9d87c98bec348301fdd05dc4", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 41 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 3 | Methods Changed: 2 | Complexity Δ (Sum/Max): 7/7 | Churn Δ: 41 | Churn Cumulative: 55 | Contributors (this commit): 3 | Commits (past 90d): 2 | Contributors (cumulative): 3 | DMM Complexity: 1.0\n\nDIFF:\n@@ -1,9 +1,14 @@\n+from os.path import join, abspath, dirname, relpath, commonprefix\n+import os\n+\n from twisted.trial import unittest\n from twisted.internet import defer\n \n from scrapy.utils.testsite import SiteTest\n from scrapy.utils.testproc import ProcessTest\n \n+from tests import tests_datadir\n+\n \n class ShellTest(ProcessTest, SiteTest, unittest.TestCase):\n \n@@ -51,3 +56,39 @@ class ShellTest(ProcessTest, SiteTest, unittest.TestCase):\n         code = \"fetch('{0}') or fetch(response.request.replace(method='POST'))\"\n         errcode, out, _ = yield self.execute(['-c', code.format(url)])\n         self.assertEqual(errcode, 0, out)\n+\n+    @defer.inlineCallbacks\n+    def test_local_files(self):\n+        test_file_path = join(tests_datadir, 'test_site/index.html')\n+        valid_paths = [\n+            test_file_path,\n+            relpath(test_file_path),\n+            'file://'+test_file_path,\n+            './tests/sample_data/test_site/index.html',\n+            'tests/sample_data/test_site/index.html',\n+        ]\n+        for filepath in valid_paths:\n+            _, out, _ = yield self.execute([filepath, '-c', 'item'])\n+            assert b'{}' in out\n+\n+    @defer.inlineCallbacks\n+    def test_local_files_invalid(self):\n+        invalid_filepaths = [\n+            '../nothinghere.html',\n+            './tests/sample_data/test_site/nothinghere.html'\n+        ]\n+        for filepath in invalid_filepaths:\n+            errcode, out, err = yield self.execute([filepath, '-c', 'item'],\n+                                           check_code=False)\n+            self.assertEqual(errcode, 1, out or err)\n+            self.assertIn(b'No such file or directory', err)\n+\n+        # currently, this will try to find a host...\n+        invalid_paths = [\n+            'nothinghere.html',\n+        ]\n+        for filepath in invalid_paths:\n+            errcode, out, err = yield self.execute([filepath, '-c', 'item'],\n+                                           check_code=False)\n+            self.assertEqual(errcode, 1, out or err)\n+            self.assertIn(b'DNS lookup failed', err)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "scrapy#8bd5b60889bef67cb32879562d3cc0e751431ed2", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 3 | Files Changed: 1 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 5 | Churn Cumulative: 60 | Contributors (this commit): 3 | Commits (past 90d): 3 | Contributors (cumulative): 3 | DMM Complexity: 0.0\n\nDIFF:\n@@ -1,5 +1,4 @@\n-from os.path import join, abspath, dirname, relpath, commonprefix\n-import os\n+from os.path import join\n \n from twisted.trial import unittest\n from twisted.internet import defer\n@@ -62,7 +61,7 @@ class ShellTest(ProcessTest, SiteTest, unittest.TestCase):\n         test_file_path = join(tests_datadir, 'test_site/index.html')\n         valid_paths = [\n             test_file_path,\n-            relpath(test_file_path),\n+            # relpath(test_file_path),\n             'file://'+test_file_path,\n             './tests/sample_data/test_site/index.html',\n             'tests/sample_data/test_site/index.html',\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "scrapy#b746d85f4ca11f7f0149d06f7a4b58501ad3ee23", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 20 | Lines Deleted: 64 | Files Changed: 2 | Hunks: 19 | Methods Changed: 17 | Complexity Δ (Sum/Max): -6/1 | Churn Δ: 84 | Churn Cumulative: 270 | Contributors (this commit): 3 | Commits (past 90d): 5 | Contributors (cumulative): 5 | DMM Complexity: 0.0\n\nDIFF:\n@@ -3,6 +3,7 @@ Item Exporters are used to export/serialize items into different formats.\n \"\"\"\n \n import csv\n+import io\n import sys\n import pprint\n import marshal\n@@ -11,7 +12,7 @@ from six.moves import cPickle as pickle\n from xml.sax.saxutils import XMLGenerator\n \n from scrapy.utils.serialize import ScrapyJSONEncoder\n-from scrapy.utils.python import to_bytes, to_unicode, is_listlike\n+from scrapy.utils.python import to_bytes, to_unicode, to_native_str, is_listlike\n from scrapy.item import BaseItem\n import warnings\n \n@@ -166,21 +167,22 @@ class CsvItemExporter(BaseItemExporter):\n     def __init__(self, file, include_headers_line=True, join_multivalued=',', **kwargs):\n         self._configure(kwargs, dont_fail=True)\n         self.include_headers_line = include_headers_line\n+        file = file if six.PY2 else io.TextIOWrapper(file, line_buffering=True)\n         self.csv_writer = csv.writer(file, **kwargs)\n         self._headers_not_written = True\n         self._join_multivalued = join_multivalued\n \n     def serialize_field(self, field, name, value):\n-        serializer = field.get('serializer', self._to_str_if_unicode)\n+        serializer = field.get('serializer', self._join_if_needed)\n         return serializer(value)\n \n-    def _to_str_if_unicode(self, value):\n+    def _join_if_needed(self, value):\n         if isinstance(value, (list, tuple)):\n             try:\n-                value = self._join_multivalued.join(value)\n+                return self._join_multivalued.join(value)\n             except TypeError:  # list in value may not contain strings\n                 pass\n-        return value.encode(self.encoding) if isinstance(value, six.text_type) else value\n+        return value\n \n     def export_item(self, item):\n         if self._headers_not_written:\n@@ -189,7 +191,7 @@ class CsvItemExporter(BaseItemExporter):\n \n         fields = self._get_serialized_fields(item, default_value='',\n                                              include_empty=True)\n-        values = [x[1] for x in fields]\n+        values = [to_native_str(x) for _, x in fields]\n         self.csv_writer.writerow(values)\n \n     def _write_headers_and_set_fields_to_export(self, item):\n@@ -201,7 +203,8 @@ class CsvItemExporter(BaseItemExporter):\n                 else:\n                     # use fields declared in Item\n                     self.fields_to_export = list(item.fields.keys())\n-            self.csv_writer.writerow(self.fields_to_export)\n+            row = [to_native_str(s) for s in self.fields_to_export]\n+            self.csv_writer.writerow(row)\n \n \n class PickleItemExporter(BaseItemExporter):\n\n@@ -3,7 +3,6 @@ import re\n import json\n import unittest\n from io import BytesIO\n-import six\n from six.moves import cPickle as pickle\n \n import lxml.etree\n@@ -81,53 +80,6 @@ class BaseItemExporterTest(unittest.TestCase):\n         self.assertEqual(ie.serialize_field(i.fields['age'], 'age', i['age']), '24')\n \n \n-class IntermediateRefactoringBaseItemExporterTest(BaseItemExporterTest):\n-    \"\"\"Class introduced just to keep old behavior of BaseItemExporterTest for the\n-    test cases that inherit from it while we make changes to exporters one by\n-    one -- a needed refactoring trick because the test cases are quite coupled.\n-\n-    When we're done with the changes, we'll have ditched this class.\n-    \"\"\"\n-    def test_serialize_field(self):\n-        if self.ie.__class__ is BaseItemExporter:\n-            return\n-\n-        res = self.ie.serialize_field(self.i.fields['name'], 'name', self.i['name'])\n-        self.assertEqual(res, 'John\\xc2\\xa3')\n-\n-        res = self.ie.serialize_field(self.i.fields['age'], 'age', self.i['age'])\n-        self.assertEqual(res, '22')\n-\n-    def test_fields_to_export(self):\n-        if self.ie.__class__ is BaseItemExporter:\n-            return\n-\n-        ie = self._get_exporter(fields_to_export=['name'])\n-        self.assertEqual(list(ie._get_serialized_fields(self.i)), [('name', 'John\\xc2\\xa3')])\n-\n-        ie = self._get_exporter(fields_to_export=['name'], encoding='latin-1')\n-        name = list(ie._get_serialized_fields(self.i))[0][1]\n-        assert isinstance(name, str)\n-        self.assertEqual(name, 'John\\xa3')\n-\n-    def test_field_custom_serializer(self):\n-        if self.ie.__class__ is BaseItemExporter:\n-            return\n-\n-        def custom_serializer(value):\n-            return str(int(value) + 2)\n-\n-        class CustomFieldItem(Item):\n-            name = Field()\n-            age = Field(serializer=custom_serializer)\n-\n-        i = CustomFieldItem(name=u'John\\xa3', age='22')\n-\n-        ie = self._get_exporter()\n-        self.assertEqual(ie.serialize_field(i.fields['name'], 'name', i['name']), 'John\\xc2\\xa3')\n-        self.assertEqual(ie.serialize_field(i.fields['age'], 'age', i['age']), '24')\n-\n-\n class PythonItemExporterTest(BaseItemExporterTest):\n     def _get_exporter(self, **kwargs):\n         return PythonItemExporter(binary=False, **kwargs)\n@@ -195,19 +147,19 @@ class PickleItemExporterTest(BaseItemExporterTest):\n         self.assertEqual(pickle.load(f), i2)\n \n \n-@unittest.skipUnless(six.PY2, \"TODO\")\n-class CsvItemExporterTest(IntermediateRefactoringBaseItemExporterTest):\n-\n+class CsvItemExporterTest(BaseItemExporterTest):\n     def _get_exporter(self, **kwargs):\n         return CsvItemExporter(self.output, **kwargs)\n \n     def assertCsvEqual(self, first, second, msg=None):\n+        first = to_unicode(first)\n+        second = to_unicode(second)\n         csvsplit = lambda csv: [sorted(re.split(r'(,|\\s+)', line))\n                                 for line in csv.splitlines(True)]\n         return self.assertEqual(csvsplit(first), csvsplit(second), msg)\n \n     def _check_output(self):\n-        self.assertCsvEqual(self.output.getvalue(), 'age,name\\r\\n22,John\\xc2\\xa3\\r\\n')\n+        self.assertCsvEqual(to_unicode(self.output.getvalue()), u'age,name\\r\\n22,John\\xa3\\r\\n')\n \n     def assertExportResult(self, item, expected, **kwargs):\n         fp = BytesIO()\n@@ -221,13 +173,13 @@ class CsvItemExporterTest(IntermediateRefactoringBaseItemExporterTest):\n         self.assertExportResult(\n             item=self.i,\n             fields_to_export=self.i.fields.keys(),\n-            expected='age,name\\r\\n22,John\\xc2\\xa3\\r\\n',\n+            expected=b'age,name\\r\\n22,John\\xc2\\xa3\\r\\n',\n         )\n \n     def test_header_export_all_dict(self):\n         self.assertExportResult(\n             item=dict(self.i),\n-            expected='age,name\\r\\n22,John\\xc2\\xa3\\r\\n',\n+            expected=b'age,name\\r\\n22,John\\xc2\\xa3\\r\\n',\n         )\n \n     def test_header_export_single_field(self):\n@@ -235,7 +187,7 @@ class CsvItemExporterTest(IntermediateRefactoringBaseItemExporterTest):\n             self.assertExportResult(\n                 item=item,\n                 fields_to_export=['age'],\n-                expected='age\\r\\n22\\r\\n',\n+                expected=b'age\\r\\n22\\r\\n',\n             )\n \n     def test_header_export_two_items(self):\n@@ -246,14 +198,15 @@ class CsvItemExporterTest(IntermediateRefactoringBaseItemExporterTest):\n             ie.export_item(item)\n             ie.export_item(item)\n             ie.finish_exporting()\n-            self.assertCsvEqual(output.getvalue(), 'age,name\\r\\n22,John\\xc2\\xa3\\r\\n22,John\\xc2\\xa3\\r\\n')\n+            self.assertCsvEqual(output.getvalue(),\n+                                b'age,name\\r\\n22,John\\xc2\\xa3\\r\\n22,John\\xc2\\xa3\\r\\n')\n \n     def test_header_no_header_line(self):\n         for item in [self.i, dict(self.i)]:\n             self.assertExportResult(\n                 item=item,\n                 include_headers_line=False,\n-                expected='22,John\\xc2\\xa3\\r\\n',\n+                expected=b'22,John\\xc2\\xa3\\r\\n',\n             )\n \n     def test_join_multivalue(self):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "scrapy#2514973242e35831fd90493b3db17227c3c0195e", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 3 | Lines Deleted: 4 | Files Changed: 1 | Hunks: 4 | Methods Changed: 2 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 7 | Churn Cumulative: 77 | Contributors (this commit): 3 | Commits (past 90d): 1 | Contributors (cumulative): 3 | DMM Complexity: None\n\nDIFF:\n@@ -22,6 +22,7 @@ from scrapy.extensions.feedexport import (\n     S3FeedStorage, StdoutFeedStorage\n )\n from scrapy.utils.test import assert_aws_environ\n+from scrapy.utils.python import to_native_str\n \n \n class FileFeedStorageTest(unittest.TestCase):\n@@ -120,8 +121,6 @@ class StdoutFeedStorageTest(unittest.TestCase):\n \n class FeedExportTest(unittest.TestCase):\n \n-    skip = not six.PY2\n-\n     class MyItem(scrapy.Item):\n         foo = scrapy.Field()\n         egg = scrapy.Field()\n@@ -170,7 +169,7 @@ class FeedExportTest(unittest.TestCase):\n         settings.update({'FEED_FORMAT': 'csv'})\n         data = yield self.exported_data(items, settings)\n \n-        reader = csv.DictReader(data.splitlines())\n+        reader = csv.DictReader(to_native_str(data).splitlines())\n         got_rows = list(reader)\n         if ordered:\n             self.assertEqual(reader.fieldnames, header)\n@@ -184,7 +183,7 @@ class FeedExportTest(unittest.TestCase):\n         settings = settings or {}\n         settings.update({'FEED_FORMAT': 'jl'})\n         data = yield self.exported_data(items, settings)\n-        parsed = [json.loads(line) for line in data.splitlines()]\n+        parsed = [json.loads(to_native_str(line)) for line in data.splitlines()]\n         rows = [{k: v for k, v in row.items() if v} for row in rows]\n         self.assertEqual(rows, parsed)\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "scrapy#e938752973b4fc53e0fa0c0bc68a431613b987e4", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 12 | Lines Deleted: 1 | Files Changed: 2 | Hunks: 4 | Methods Changed: 3 | Complexity Δ (Sum/Max): 3/2 | Churn Δ: 13 | Churn Cumulative: 283 | Contributors (this commit): 3 | Commits (past 90d): 7 | Contributors (cumulative): 5 | DMM Complexity: 1.0\n\nDIFF:\n@@ -272,7 +272,11 @@ class PythonItemExporter(BaseItemExporter):\n \n     def _serialize_dict(self, value):\n         for key, val in six.iteritems(value):\n+            key = to_bytes(key) if self.binary else key\n             yield key, self._serialize_value(val)\n \n     def export_item(self, item):\n-        return dict(self._get_serialized_fields(item))\n+        result = dict(self._get_serialized_fields(item))\n+        if self.binary:\n+            result = dict(self._serialize_dict(result))\n+        return result\n\n@@ -2,6 +2,7 @@ from __future__ import absolute_import\n import re\n import json\n import unittest\n+import warnings\n from io import BytesIO\n from six.moves import cPickle as pickle\n \n@@ -115,6 +116,12 @@ class PythonItemExporterTest(BaseItemExporterTest):\n         self.assertEqual(type(exported['age'][0]), dict)\n         self.assertEqual(type(exported['age'][0]['age'][0]), dict)\n \n+    def test_export_binary(self):\n+        exporter = PythonItemExporter(binary=True)\n+        value = TestItem(name=u'John\\xa3', age=u'22')\n+        expected = {b'name': b'John\\xc2\\xa3', b'age': b'22'}\n+        self.assertEqual(expected, exporter.export_item(value))\n+\n \n class PprintItemExporterTest(BaseItemExporterTest):\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "scrapy#35ada107297fc900e48824f9a94da478a5ae1c7a", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 0 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 156 | Contributors (this commit): 5 | Commits (past 90d): 5 | Contributors (cumulative): 5 | DMM Complexity: None\n\nDIFF:\n@@ -205,8 +205,6 @@ from scrapy.spiders import Spider\n \n \n class ParseCommandTest(ProcessTest, SiteTest, CommandTest):\n-    skip = not six.PY2\n-\n     command = 'parse'\n \n     def setUp(self):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "scrapy#d0955fd08320f8402303bb4424e7dfab384068f4", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 6 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 3 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 7 | Churn Cumulative: 207 | Contributors (this commit): 3 | Commits (past 90d): 4 | Contributors (cumulative): 3 | DMM Complexity: 1.0\n\nDIFF:\n@@ -2,11 +2,11 @@ from __future__ import absolute_import\n import re\n import json\n import unittest\n-import warnings\n from io import BytesIO\n from six.moves import cPickle as pickle\n \n import lxml.etree\n+import six\n \n from scrapy.item import Item, Field\n from scrapy.utils.python import to_unicode\n@@ -66,6 +66,11 @@ class BaseItemExporterTest(unittest.TestCase):\n         ie = self._get_exporter(fields_to_export=['name'])\n         self.assertEqual(list(ie._get_serialized_fields(self.i)), [('name', u'John\\xa3')])\n \n+        ie = self._get_exporter(fields_to_export=['name'], encoding='latin-1')\n+        _, name = list(ie._get_serialized_fields(self.i))[0]\n+        assert isinstance(name, six.text_type)\n+        self.assertEqual(name, u'John\\xa3')\n+\n     def test_field_custom_serializer(self):\n         def custom_serializer(value):\n             return str(int(value) + 2)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "scrapy#be239f339c4d4d43ff4f7bd5d3248bb4abd32834", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 212 | Contributors (this commit): 10 | Commits (past 90d): 5 | Contributors (cumulative): 10 | DMM Complexity: None\n\nDIFF:\n@@ -5,7 +5,7 @@ See documentation in docs/topics/shell.rst\n \"\"\"\n \n import re\n-from six.moves.urllib.parse import urlparse, urlunparse\n+from six.moves.urllib.parse import urlparse\n from threading import Thread\n from w3lib.url import any_to_uri\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "scrapy#60052b3c68267eca6c0ed2a178378a2a777b3898", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 0 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 1 | Churn Cumulative: 213 | Contributors (this commit): 10 | Commits (past 90d): 6 | Contributors (cumulative): 10 | DMM Complexity: None\n\nDIFF:\n@@ -4,7 +4,6 @@ Scrapy Shell\n See documentation in docs/topics/shell.rst\n \"\"\"\n \n-import re\n from six.moves.urllib.parse import urlparse\n from threading import Thread\n from w3lib.url import any_to_uri\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "scrapy#7a51d370f3a59bcfe118f3ba079c5ea6eda5af75", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 64 | Lines Deleted: 64 | Files Changed: 2 | Hunks: 11 | Methods Changed: 18 | Complexity Δ (Sum/Max): -11/0 | Churn Δ: 128 | Churn Cumulative: 496 | Contributors (this commit): 11 | Commits (past 90d): 12 | Contributors (cumulative): 13 | DMM Complexity: 0.0\n\nDIFF:\n@@ -3,7 +3,7 @@ Scrapy Shell\n \n See documentation in docs/topics/shell.rst\n \"\"\"\n-\n+import re\n from six.moves.urllib.parse import urlparse\n from threading import Thread\n from w3lib.url import any_to_uri\n@@ -21,16 +21,22 @@ def guess_scheme(url):\n     otherwise returns an HTTP URL\n     \"\"\"\n     parts = urlparse(url)\n-    if not parts.scheme:\n-        if \".\" not in parts.path.split(\"/\", 1)[0]:\n-            url = any_to_uri(url)\n-\n-        for pattern in [\"/\", \"./\", \"../\"]:\n-            if url.startswith(pattern):\n-                url = any_to_uri(url)\n-                break\n-        url = add_http_if_no_scheme(url)\n+    if parts.scheme:\n         return url\n+    # Note: this does not match Windows filepath\n+    if re.match(r'''^                   # start with...\n+                    (\n+                        \\.              # ...a single dot,\n+                        (\n+                            \\. | [^/\\.]+  # optionally followed by\n+                        )?                # either a second dot or some characters\n+                    )?      # optional match of \".\", \"..\" or \".blabla\"\n+                    /       # at least one \"/\" for a file path,\n+                    .       # and something after the \"/\"\n+                    ''', parts.path, flags=re.VERBOSE):\n+        return any_to_uri(url)\n+    else:\n+        return add_http_if_no_scheme(url)\n \n \n class Command(ScrapyCommand):\n\n@@ -11,67 +11,61 @@ from tests import tests_datadir\n \n \n class ShellURLTest(unittest.TestCase):\n+    pass\n \n-    def test_file_uri_relative001(self):\n-        # FIXME: 'index.html' is interpreted as a domain name\n-        #        is this correct?\n-        url = guess_scheme('index.html')\n-        assert url.startswith('http://')\n+def create_guess_scheme_t(args):\n+    def do_expected(self):\n+        url = guess_scheme(args[0])\n+        assert url.startswith(args[1]), \\\n+            'Wrong scheme guessed: for `%s` got `%s`, expected `%s...`' % (\n+                args[0], url, args[1])\n+    return do_expected\n \n-    def test_file_uri_relative002(self):\n-        url = guess_scheme('./index.html')\n-        assert url.startswith('file://')\n+def create_skipped_scheme_t(args):\n+    def do_expected(self):\n+        raise unittest.SkipTest(args[2])\n+        url = guess_scheme(args[0])\n+        assert url.startswith(args[1])\n+    return do_expected\n \n-    def test_file_uri_relative003(self):\n-        url = guess_scheme('../data/index.html')\n-        assert url.startswith('file://')\n+for k, args in enumerate ([\n+            ('/index',                              'file://'),\n+            ('/index.html',                         'file://'),\n+            ('./index.html',                        'file://'),\n+            ('../index.html',                       'file://'),\n+            ('../../index.html',                    'file://'),\n+            ('./data/index.html',                   'file://'),\n+            ('.hidden/data/index.html',             'file://'),\n+            ('/home/user/www/index.html',           'file://'),\n+            ('//home/user/www/index.html',          'file://'),\n+            ('file:///home/user/www/index.html',    'file://'),\n \n-    def test_file_uri_relative004(self):\n-        url = guess_scheme('subdir/index.html')\n-        assert url.startswith('file://')\n+            ('index.html',                          'http://'),\n+            ('example.com',                         'http://'),\n+            ('www.example.com',                     'http://'),\n+            ('www.example.com/index.html',          'http://'),\n+            ('http://example.com',                  'http://'),\n+            ('http://example.com/index.html',       'http://'),\n+            ('localhost',                           'http://'),\n+            ('localhost/index.html',                'http://'),\n \n-    def test_file_uri_absolute001(self):\n-        \"\"\"Absolute file paths get prepended with \"file://\" scheme\"\"\"\n-        iurl = '/home/user/www/index.html'\n-        url = guess_scheme(iurl)\n-        self.assertEquals(url, 'file://'+iurl)\n+            # some corner cases (default to http://)\n+            ('/',                                   'http://'),\n+            ('.../test',                            'http://'),\n \n-    def test_file_uri_scheme(self):\n-        \"\"\"Output File URI does not change if \"file://\" scheme is set\"\"\"\n-        iurl = 'file:///home/user/www/index.html'\n-        url = guess_scheme(iurl)\n-        self.assertEquals(url, iurl)\n+        ], start=1):\n+    t_method = create_guess_scheme_t(args)\n+    t_method.__name__ = 'test_uri_%03d' % k\n+    setattr (ShellURLTest, t_method.__name__, t_method)\n \n-    def test_file_uri_windows(self):\n-        raise unittest.SkipTest(\"Windows filepath are not supported for scrapy shell\")\n-        url = guess_scheme('C:\\absolute\\path\\to\\a\\file.html')\n-        assert url.startswith('file://')\n-\n-    def test_http_url_001(self):\n-        url = guess_scheme('index.html')\n-        assert url.startswith('http://')\n-\n-    def test_http_url_002(self):\n-        url = guess_scheme('example.com')\n-        assert url.startswith('http://')\n-\n-    def test_http_url_003(self):\n-        url = guess_scheme('www.example.com')\n-        assert url.startswith('http://')\n-\n-    def test_http_url_004(self):\n-        url = guess_scheme('www.example.com/index')\n-        assert url.startswith('http://')\n-\n-    def test_http_url_005(self):\n-        url = guess_scheme('www.example.com/index.html')\n-        assert url.startswith('http://')\n-\n-    def test_http_url_scheme(self):\n-        \"\"\"An full HTTP URL is unaltered\"\"\"\n-        iurl = 'http://www.example.com/index.html'\n-        url = guess_scheme(iurl)\n-        self.assertEquals(url, iurl)\n+# TODO: the following tests do not pass with current implementation\n+for k, args in enumerate ([\n+            ('C:\\absolute\\path\\to\\a\\file.html',     'file://',\n+             'Windows filepath are not supported for scrapy shell'),\n+        ], start=1):\n+    t_method = create_skipped_scheme_t(args)\n+    t_method.__name__ = 'test_uri_skipped_%03d' % k\n+    setattr (ShellURLTest, t_method.__name__, t_method)\n \n \n class ShellTest(ProcessTest, SiteTest, unittest.TestCase):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
