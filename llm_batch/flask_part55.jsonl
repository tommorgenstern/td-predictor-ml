{"custom_id": "flask#554c5b965a8b9d702897e5da926312cac22fa86e", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 0 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 1 | Churn Cumulative: 601 | Contributors (this commit): 13 | Commits (past 90d): 2 | Contributors (cumulative): 13 | DMM Complexity: 0.0\n\nDIFF:\n@@ -101,7 +101,6 @@ class Blueprint(_PackageBoundObject):\n         self.static_folder = static_folder\n         self.static_url_path = static_url_path\n         self.deferred_functions = []\n-        self.view_functions = {}\n         if url_defaults is None:\n             url_defaults = {}\n         self.url_values_defaults = url_defaults\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#d53d5c732bf794b965d15458f8e578fe51864a26", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 28 | Lines Deleted: 2 | Files Changed: 4 | Hunks: 5 | Methods Changed: 4 | Complexity Δ (Sum/Max): 4/4 | Churn Δ: 30 | Churn Cumulative: 847 | Contributors (this commit): 17 | Commits (past 90d): 9 | Contributors (cumulative): 29 | DMM Complexity: 1.0\n\nDIFF:\n@@ -34,7 +34,7 @@ from .templating import render_template, render_template_string\n from .signals import signals_available, template_rendered, request_started, \\\n      request_finished, got_request_exception, request_tearing_down, \\\n      appcontext_tearing_down, appcontext_pushed, \\\n-     appcontext_popped, message_flashed\n+     appcontext_popped, message_flashed, before_render_template\n \n # We're not exposing the actual json module but a convenient wrapper around\n # it.\n\n@@ -45,6 +45,7 @@ _signals = Namespace()\n # Core signals.  For usage examples grep the source code or consult\n # the API documentation in docs/api.rst as well as docs/signals.rst\n template_rendered = _signals.signal('template-rendered')\n+before_render_template = _signals.signal('before-render-template')\n request_started = _signals.signal('request-started')\n request_finished = _signals.signal('request-finished')\n request_tearing_down = _signals.signal('request-tearing-down')\n\n@@ -12,7 +12,7 @@ from jinja2 import BaseLoader, Environment as BaseEnvironment, \\\n      TemplateNotFound\n \n from .globals import _request_ctx_stack, _app_ctx_stack\n-from .signals import template_rendered\n+from .signals import template_rendered, before_render_template\n \n \n def _default_template_ctx_processor():\n@@ -102,6 +102,7 @@ class DispatchingJinjaLoader(BaseLoader):\n \n def _render(template, context, app):\n     \"\"\"Renders the template and fires the signal\"\"\"\n+    before_render_template.send(app, template=template, context=context)\n     rv = template.render(context)\n     template_rendered.send(app, template=template, context=context)\n     return rv\n\n@@ -46,6 +46,30 @@ def test_template_rendered():\n     finally:\n         flask.template_rendered.disconnect(record, app)\n \n+def test_before_render_template():\n+    app = flask.Flask(__name__)\n+\n+    @app.route('/')\n+    def index():\n+        return flask.render_template('simple_template.html', whiskey=42)\n+\n+    recorded = []\n+\n+    def record(sender, template, context):\n+        context['whiskey'] = 43\n+        recorded.append((template, context))\n+\n+    flask.before_render_template.connect(record, app)\n+    try:\n+        rv = app.test_client().get('/')\n+        assert len(recorded) == 1\n+        template, context = recorded[0]\n+        assert template.name == 'simple_template.html'\n+        assert context['whiskey'] == 43\n+        assert rv.data == b'<h1>43</h1>'\n+    finally:\n+        flask.before_render_template.disconnect(record, app)\n+\n def test_request_signals():\n     app = flask.Flask(__name__)\n     calls = []\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#1fbeb337c467a2be0f999606373fd1ba0e200908", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 4 | Files Changed: 1 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): -1/0 | Churn Δ: 6 | Churn Cumulative: 135 | Contributors (this commit): 5 | Commits (past 90d): 3 | Contributors (cumulative): 5 | DMM Complexity: 0.0\n\nDIFF:\n@@ -59,16 +59,14 @@ def test_before_render_template():\n         context['whiskey'] = 43\n         recorded.append((template, context))\n \n-    flask.before_render_template.connect(record, app)\n-    try:\n+    with flask.before_render_template.connected_to(record):\n         rv = app.test_client().get('/')\n         assert len(recorded) == 1\n         template, context = recorded[0]\n         assert template.name == 'simple_template.html'\n         assert context['whiskey'] == 43\n         assert rv.data == b'<h1>43</h1>'\n-    finally:\n-        flask.before_render_template.disconnect(record, app)\n+\n \n def test_request_signals():\n     app = flask.Flask(__name__)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#967907ee81cbc671cd8982bdc02a9d3335fdde11", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 29 | Lines Deleted: 2 | Files Changed: 2 | Hunks: 2 | Methods Changed: 4 | Complexity Δ (Sum/Max): 6/3 | Churn Δ: 31 | Churn Cumulative: 569 | Contributors (this commit): 13 | Commits (past 90d): 7 | Contributors (cumulative): 16 | DMM Complexity: 1.0\n\nDIFF:\n@@ -101,8 +101,19 @@ class DispatchingJinjaLoader(BaseLoader):\n \n \n def _render(template, context, app):\n-    \"\"\"Renders the template and fires the signal\"\"\"\n-    before_render_template.send(app, template=template, context=context)\n+    \"\"\"Renders the template and fires signals.\n+\n+    It is possible to override render template in the before_render_template signal.\n+    It can be done only if exactly one receiver and it return not None result.\"\"\"\n+\n+    brt_resp = before_render_template.send(app, template=template, context=context)\n+    \n+    if len(brt_resp) == 1:\n+        first_resp = brt_resp[0]\n+\n+        if len(first_resp) == 2 and first_resp[1] is not None:\n+            return first_resp[1]\n+\n     rv = template.render(context)\n     template_rendered.send(app, template=template, context=context)\n     return rv\n\n@@ -67,6 +67,22 @@ def test_before_render_template():\n         assert context['whiskey'] == 43\n         assert rv.data == b'<h1>43</h1>'\n \n+def test_before_render_template_signal_not_None_result_render_skip_render_template():\n+    app = flask.Flask(__name__)\n+\n+    @app.route('/')\n+    def index():\n+        return flask.render_template('simple_template.html', whiskey=42)\n+\n+    recorded = []\n+\n+    def record(sender, template, context):\n+        recorded.append((template, context))\n+        return 'Not template string'\n+\n+    with flask.before_render_template.connected_to(record):\n+        rv = app.test_client().get('/')\n+        assert rv.data == 'Not template string'\n \n def test_request_signals():\n     app = flask.Flask(__name__)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#e57199e0c4e18da2a87b15ed6d6e35668ae1b763", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 8 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 4 | Methods Changed: 2 | Complexity Δ (Sum/Max): 2/2 | Churn Δ: 10 | Churn Cumulative: 161 | Contributors (this commit): 6 | Commits (past 90d): 5 | Contributors (cumulative): 6 | DMM Complexity: 1.0\n\nDIFF:\n@@ -59,13 +59,16 @@ def test_before_render_template():\n         context['whiskey'] = 43\n         recorded.append((template, context))\n \n-    with flask.before_render_template.connected_to(record):\n+    flask.before_render_template.connect(record, app)\n+    try:\n         rv = app.test_client().get('/')\n         assert len(recorded) == 1\n         template, context = recorded[0]\n         assert template.name == 'simple_template.html'\n         assert context['whiskey'] == 43\n         assert rv.data == b'<h1>43</h1>'\n+    finally:\n+        flask.before_render_template.disconnect(record, app)\n \n def test_before_render_template_signal_not_None_result_render_skip_render_template():\n     app = flask.Flask(__name__)\n@@ -80,9 +83,12 @@ def test_before_render_template_signal_not_None_result_render_skip_render_templa\n         recorded.append((template, context))\n         return 'Not template string'\n \n-    with flask.before_render_template.connected_to(record):\n+    flask.before_render_template.connect(record, app)\n+    try:\n         rv = app.test_client().get('/')\n         assert rv.data == 'Not template string'\n+    finally:\n+       flask.before_render_template.disconnect(record, app) \n \n def test_request_signals():\n     app = flask.Flask(__name__)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#eae37b575d2106ae80edea823d50c0e4ebfebec3", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 163 | Contributors (this commit): 6 | Commits (past 90d): 6 | Contributors (cumulative): 6 | DMM Complexity: None\n\nDIFF:\n@@ -86,7 +86,7 @@ def test_before_render_template_signal_not_None_result_render_skip_render_templa\n     flask.before_render_template.connect(record, app)\n     try:\n         rv = app.test_client().get('/')\n-        assert rv.data == 'Not template string'\n+        assert rv.data == b'Not template string'\n     finally:\n        flask.before_render_template.disconnect(record, app) \n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#883f82f2617f893d024b3fcee8fd9bbe0b0d9341", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 6 | Lines Deleted: 5 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 11 | Churn Cumulative: 429 | Contributors (this commit): 10 | Commits (past 90d): 4 | Contributors (cumulative): 10 | DMM Complexity: 1.0\n\nDIFF:\n@@ -108,11 +108,12 @@ def _render(template, context, app):\n \n     brt_resp = before_render_template.send(app, template=template, context=context)\n     \n-    if len(brt_resp) == 1:\n-        first_resp = brt_resp[0]\n-\n-        if len(first_resp) == 2 and first_resp[1] is not None:\n-            return first_resp[1]\n+    overrides = [rv for _, rv in brt_resp if rv is not None]\n+    if len(overrides) == 1:\n+        return overrides[0]\n+    elif len(overrides) > 1:\n+        raise RuntimeError('More than one before_render_template signal '\n+                           'returned data')\n \n     rv = template.render(context)\n     template_rendered.send(app, template=template, context=context)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#5e12748d0efb5fc3d1f6a68d7bf05fd8980a2fd4", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 33 | Files Changed: 2 | Hunks: 3 | Methods Changed: 4 | Complexity Δ (Sum/Max): -8/0 | Churn Δ: 35 | Churn Cumulative: 627 | Contributors (this commit): 13 | Commits (past 90d): 10 | Contributors (cumulative): 16 | DMM Complexity: 0.0\n\nDIFF:\n@@ -101,20 +101,9 @@ class DispatchingJinjaLoader(BaseLoader):\n \n \n def _render(template, context, app):\n-    \"\"\"Renders the template and fires signals.\n-\n-    It is possible to override render template in the before_render_template signal.\n-    It can be done only if exactly one receiver and it return not None result.\"\"\"\n-\n-    brt_resp = before_render_template.send(app, template=template, context=context)\n-    \n-    overrides = [rv for _, rv in brt_resp if rv is not None]\n-    if len(overrides) == 1:\n-        return overrides[0]\n-    elif len(overrides) > 1:\n-        raise RuntimeError('More than one before_render_template signal '\n-                           'returned data')\n+    \"\"\"Renders the template and fires the signal\"\"\"\n \n+    before_render_template.send(app, template=template, context=context)\n     rv = template.render(context)\n     template_rendered.send(app, template=template, context=context)\n     return rv\n\n@@ -70,26 +70,6 @@ def test_before_render_template():\n     finally:\n         flask.before_render_template.disconnect(record, app)\n \n-def test_before_render_template_signal_not_None_result_render_skip_render_template():\n-    app = flask.Flask(__name__)\n-\n-    @app.route('/')\n-    def index():\n-        return flask.render_template('simple_template.html', whiskey=42)\n-\n-    recorded = []\n-\n-    def record(sender, template, context):\n-        recorded.append((template, context))\n-        return 'Not template string'\n-\n-    flask.before_render_template.connect(record, app)\n-    try:\n-        rv = app.test_client().get('/')\n-        assert rv.data == b'Not template string'\n-    finally:\n-       flask.before_render_template.disconnect(record, app) \n-\n def test_request_signals():\n     app = flask.Flask(__name__)\n     calls = []\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#bbaf20de7c34d533f9b83f20b536342a8c735fb1", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 31 | Lines Deleted: 0 | Files Changed: 2 | Hunks: 2 | Methods Changed: 3 | Complexity Δ (Sum/Max): 4/3 | Churn Δ: 31 | Churn Cumulative: 766 | Contributors (this commit): 15 | Commits (past 90d): 4 | Contributors (cumulative): 18 | DMM Complexity: 1.0\n\nDIFF:\n@@ -31,6 +31,15 @@ class _AppCtxGlobals(object):\n     def get(self, name, default=None):\n         return self.__dict__.get(name, default)\n \n+    def pop(self, name, default=_sentinel):\n+        if default is _sentinel:\n+            return self.__dict__.pop(name)\n+        else:\n+            return self.__dict__.pop(name, default)\n+\n+    def setdefault(self, name, default=None):\n+        self.__dict__.setdefault(name, default)\n+\n     def __contains__(self, item):\n         return item in self.__dict__\n \n\n@@ -93,6 +93,28 @@ def test_app_tearing_down_with_handled_exception():\n \n     assert cleanup_stuff == [None]\n \n+def test_app_ctx_globals_methods():\n+    app = flask.Flask(__name__)\n+    with app.app_context():\n+        # get\n+        assert flask.g.get('foo') is None\n+        assert flask.g.get('foo', 'bar') == 'bar'\n+        # __contains__\n+        assert 'foo' not in flask.g\n+        flask.g.foo = 'bar'\n+        assert 'foo' in flask.g\n+        # setdefault\n+        flask.g.setdefault('bar', 'the cake is a lie')\n+        flask.g.setdefault('bar', 'hello world')\n+        assert flask.g.bar == 'the cake is a lie'\n+        # pop\n+        assert flask.g.pop('bar') == 'the cake is a lie'\n+        with pytest.raises(KeyError):\n+            flask.g.pop('bar')\n+        assert flask.g.pop('bar', 'more cake') == 'more cake'\n+        # __iter__\n+        assert list(flask.g) == ['foo']\n+\n def test_custom_app_ctx_globals_class():\n     class CustomRequestGlobals(object):\n         def __init__(self):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#6af9690ae9800f5a6074c70498cba4b26335ec72", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 0 | Lines Deleted: 7 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): -1/0 | Churn Δ: 7 | Churn Cumulative: 4095 | Contributors (this commit): 51 | Commits (past 90d): 9 | Contributors (cumulative): 51 | DMM Complexity: 0.0\n\nDIFF:\n@@ -1963,13 +1963,6 @@ class Flask(_PackageBoundObject):\n                 error = None\n             ctx.auto_pop(error)\n \n-    @property\n-    def modules(self):\n-        from warnings import warn\n-        warn(DeprecationWarning('Flask.modules is deprecated, use '\n-                                'Flask.blueprints instead'), stacklevel=2)\n-        return self.blueprints\n-\n     def __call__(self, environ, start_response):\n         \"\"\"Shortcut for :attr:`wsgi_app`.\"\"\"\n         return self.wsgi_app(environ, start_response)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#99c99c4c16b1327288fd76c44bc8635a1de452bc", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 23 | Lines Deleted: 4 | Files Changed: 3 | Hunks: 5 | Methods Changed: 5 | Complexity Δ (Sum/Max): 2/2 | Churn Δ: 27 | Churn Cumulative: 4831 | Contributors (this commit): 57 | Commits (past 90d): 14 | Contributors (cumulative): 68 | DMM Complexity: 1.0\n\nDIFF:\n@@ -724,12 +724,12 @@ class Flask(_PackageBoundObject):\n \n     def select_jinja_autoescape(self, filename):\n         \"\"\"Returns ``True`` if autoescaping should be active for the given\n-        template name.\n+        template name. If no template name is given, returns `True`.\n \n         .. versionadded:: 0.5\n         \"\"\"\n         if filename is None:\n-            return False\n+            return True\n         return filename.endswith(('.html', '.htm', '.xml', '.xhtml'))\n \n     def update_template_context(self, context):\n\n@@ -127,7 +127,7 @@ def render_template(template_name_or_list, **context):\n \n def render_template_string(source, **context):\n     \"\"\"Renders a template from the given template source string\n-    with the given context.\n+    with the given context. Template variables will be autoescaped.\n \n     :param source: the source code of the template to be\n                    rendered\n\n@@ -81,10 +81,29 @@ def test_escaping():\n     ]\n \n def test_no_escaping():\n+    text = '<p>Hello World!'\n+    app = flask.Flask(__name__)\n+    @app.route('/')\n+    def index():\n+        return flask.render_template('non_escaping_template.txt', text=text,\n+                                     html=flask.Markup(text))\n+    lines = app.test_client().get('/').data.splitlines()\n+    assert lines == [\n+        b'<p>Hello World!',\n+        b'<p>Hello World!',\n+        b'<p>Hello World!',\n+        b'<p>Hello World!',\n+        b'&lt;p&gt;Hello World!',\n+        b'<p>Hello World!',\n+        b'<p>Hello World!',\n+        b'<p>Hello World!'\n+    ]\n+\n+def test_escaping_without_template_filename():\n     app = flask.Flask(__name__)\n     with app.test_request_context():\n         assert flask.render_template_string(\n-            '{{ foo }}', foo='<test>') == '<test>'\n+            '{{ foo }}', foo='<test>') == '&lt;test&gt;'\n         assert flask.render_template('mail.txt', foo='<test>') == \\\n             '<test> Mail'\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#011b129b6bc615c7a24de626dd63b6a311fa6ce6", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 45 | Lines Deleted: 2 | Files Changed: 2 | Hunks: 2 | Methods Changed: 4 | Complexity Δ (Sum/Max): 5/5 | Churn Δ: 47 | Churn Cumulative: 5180 | Contributors (this commit): 57 | Commits (past 90d): 15 | Contributors (cumulative): 62 | DMM Complexity: 0.9705882352941176\n\nDIFF:\n@@ -1013,8 +1013,10 @@ class Flask(_PackageBoundObject):\n \n         # starting with Flask 0.8 the view_func object can disable and\n         # force-enable the automatic options handling.\n-        provide_automatic_options = getattr(view_func,\n-            'provide_automatic_options', None)\n+        provide_automatic_options = options.pop(\n+            'provide_automatic_options', getattr(view_func,\n+                'provide_automatic_options', None))\n+\n \n         if provide_automatic_options is None:\n             if 'OPTIONS' not in methods:\n\n@@ -1604,3 +1604,44 @@ def test_run_server_port(monkeypatch):\n     hostname, port = 'localhost', 8000\n     app.run(hostname, port, debug=True)\n     assert rv['result'] == 'running on %s:%s ...' % (hostname, port)\n+\n+\n+def test_disable_automatic_options():\n+    # Issue 1488: Add support for a kwarg to add_url_rule to disable the auto OPTIONS response\n+    app = flask.Flask(__name__)\n+\n+    def index():\n+        return flask.request.method\n+\n+    def more():\n+        return flask.request.method\n+\n+    app.add_url_rule('/', 'index', index, provide_automatic_options=False)\n+    app.add_url_rule('/more', 'more', more, methods=['GET', 'POST'], provide_automatic_options=False)\n+\n+    c = app.test_client()\n+    assert c.get('/').data == b'GET'\n+    rv = c.post('/')\n+    assert rv.status_code == 405\n+    assert sorted(rv.allow) == ['GET', 'HEAD']\n+    # Older versions of Werkzeug.test.Client don't have an options method\n+    if hasattr(c, 'options'):\n+        rv = c.options('/')\n+    else:\n+        rv = c.open('/', method='OPTIONS')\n+    assert rv.status_code == 405\n+\n+    rv = c.head('/')\n+    assert rv.status_code == 200\n+    assert not rv.data  # head truncates\n+    assert c.post('/more').data == b'POST'\n+    assert c.get('/more').data == b'GET'\n+    rv = c.delete('/more')\n+    assert rv.status_code == 405\n+    assert sorted(rv.allow) == ['GET', 'HEAD', 'POST']\n+    # Older versions of Werkzeug.test.Client don't have an options method\n+    if hasattr(c, 'options'):\n+        rv = c.options('/more')\n+    else:\n+        rv = c.open('/more', method='OPTIONS')\n+    assert rv.status_code == 405\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#8ba986e45e5b8f73f3f18da9d145b06722e5ceca", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 3 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 3 | Churn Cumulative: 40 | Contributors (this commit): 4 | Commits (past 90d): 1 | Contributors (cumulative): 4 | DMM Complexity: None\n\nDIFF:\n@@ -23,3 +23,6 @@ def add_numbers():\n @app.route('/')\n def index():\n     return render_template('index.html')\n+\n+if __name__ == '__main__':\n+    app.run()\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#93fe1d54bd44b190aa0f58990bc397bf22324452", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 1816 | Contributors (this commit): 35 | Commits (past 90d): 3 | Contributors (cumulative): 35 | DMM Complexity: None\n\nDIFF:\n@@ -219,7 +219,7 @@ def url_for(endpoint, **values):\n                 # Re-raise the BuildError, in context of original traceback.\n                 exc_type, exc_value, tb = sys.exc_info()\n                 if exc_value is error:\n-                    raise exc_type, exc_value, tb\n+                    raise exc_type(exc_value, endpoint, values).with_traceback(tb)\n                 else:\n                     raise error\n             # url_for will use this result, instead of raising BuildError.\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#5da31f8af36012a4f76c3bd0d536ae107e0519b5", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 14 | Lines Deleted: 2 | Files Changed: 2 | Hunks: 2 | Methods Changed: 3 | Complexity Δ (Sum/Max): -20/0 | Churn Δ: 16 | Churn Cumulative: 6617 | Contributors (this commit): 55 | Commits (past 90d): 9 | Contributors (cumulative): 67 | DMM Complexity: 1.0\n\nDIFF:\n@@ -1631,8 +1631,9 @@ class Flask(_PackageBoundObject):\n                 rv = handler(error, endpoint, values)\n                 if rv is not None:\n                     return rv\n-            except BuildError as error:\n-                pass\n+            except BuildError as e:\n+                # make error available outside except block (py3)\n+                error = e\n \n         # At this point we want to reraise the exception.  If the error is\n         # still the same one we can reraise it with the original traceback,\n\n@@ -772,6 +772,17 @@ class BasicFunctionalityTestCase(FlaskTestCase):\n         with app.test_request_context():\n             self.assert_equal(flask.url_for('spam'), '/test_handler/')\n \n+    def test_build_error_handler_reraise(self):\n+        app = flask.Flask(__name__)\n+\n+        # Test a custom handler which reraises the BuildError\n+        def handler_raises_build_error(error, endpoint, values):\n+            raise error\n+        app.url_build_error_handlers.append(handler_raises_build_error)\n+\n+        with app.test_request_context():\n+            self.assertRaises(BuildError, flask.url_for, 'not.existing')\n+\n     def test_custom_converters(self):\n         from werkzeug.routing import BaseConverter\n         class ListConverter(BaseConverter):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#128bc76af0f6c16ba71b41851be800ccdf354752", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 1818 | Contributors (this commit): 35 | Commits (past 90d): 4 | Contributors (cumulative): 35 | DMM Complexity: None\n\nDIFF:\n@@ -219,7 +219,7 @@ def url_for(endpoint, **values):\n                 # Re-raise the BuildError, in context of original traceback.\n                 exc_type, exc_value, tb = sys.exc_info()\n                 if exc_value is error:\n-                    raise exc_type(exc_value, endpoint, values).with_traceback(tb)\n+                    raise exc_type, exc_value, tb\n                 else:\n                     raise error\n             # url_for will use this result, instead of raising BuildError.\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#c8f19f0afc8d49a68ec969097e6127d17706b6dc", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 4 | Lines Deleted: 12 | Files Changed: 1 | Hunks: 2 | Methods Changed: 2 | Complexity Δ (Sum/Max): -2/0 | Churn Δ: 16 | Churn Cumulative: 219 | Contributors (this commit): 6 | Commits (past 90d): 1 | Contributors (cumulative): 6 | DMM Complexity: 0.0\n\nDIFF:\n@@ -56,21 +56,13 @@ else:\n def with_metaclass(meta, *bases):\n     # This requires a bit of explanation: the basic idea is to make a\n     # dummy metaclass for one level of class instantiation that replaces\n-    # itself with the actual metaclass.  Because of internal type checks\n-    # we also need to make sure that we downgrade the custom metaclass\n-    # for one level to something closer to type (that's why __call__ and\n-    # __init__ comes back from type etc.).\n+    # itself with the actual metaclass.\n     #\n     # This has the advantage over six.with_metaclass in that it does not\n     # introduce dummy classes into the final MRO.\n-    class metaclass(meta):\n-        __call__ = type.__call__\n-        __init__ = type.__init__\n-        def __new__(cls, name, this_bases, d):\n-            if this_bases is None:\n-                return type.__new__(cls, name, (), d)\n-            return meta(name, bases, d)\n-    return metaclass('temporary_class', None, {})\n+    constructor = lambda c, name, b, dct: meta(name, bases, dct)\n+    metaclass = type('with_metaclass', (type,), {'__new__': constructor})\n+    return type.__new__(metaclass, 'temporary_class', (object,), {})\n \n \n # Certain versions of pypy have a bug where clearing the exception stack\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#b3767ae59f8d916333ebc2cc04d962fa33f76580", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 5 | Lines Deleted: 6 | Files Changed: 1 | Hunks: 2 | Methods Changed: 2 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 11 | Churn Cumulative: 230 | Contributors (this commit): 6 | Commits (past 90d): 2 | Contributors (cumulative): 6 | DMM Complexity: 1.0\n\nDIFF:\n@@ -54,15 +54,14 @@ else:\n \n \n def with_metaclass(meta, *bases):\n+    \"\"\"Create a base class with a metaclass.\"\"\"\n     # This requires a bit of explanation: the basic idea is to make a\n     # dummy metaclass for one level of class instantiation that replaces\n     # itself with the actual metaclass.\n-    #\n-    # This has the advantage over six.with_metaclass in that it does not\n-    # introduce dummy classes into the final MRO.\n-    constructor = lambda c, name, b, dct: meta(name, bases, dct)\n-    metaclass = type('with_metaclass', (type,), {'__new__': constructor})\n-    return type.__new__(metaclass, 'temporary_class', (object,), {})\n+    class metaclass(type):\n+        def __new__(cls, name, this_bases, d):\n+            return meta(name, bases, d)\n+    return type.__new__(metaclass, 'temporary_class', (), {})\n \n \n # Certain versions of pypy have a bug where clearing the exception stack\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#5505827a4bd759a24696258983ec14c768358af8", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 9 | Lines Deleted: 5 | Files Changed: 1 | Hunks: 3 | Methods Changed: 2 | Complexity Δ (Sum/Max): 10/10 | Churn Δ: 14 | Churn Cumulative: 4124 | Contributors (this commit): 54 | Commits (past 90d): 4 | Contributors (cumulative): 54 | DMM Complexity: 0.0\n\nDIFF:\n@@ -944,7 +944,8 @@ class Flask(_PackageBoundObject):\n         return iter(self._blueprint_order)\n \n     @setupmethod\n-    def add_url_rule(self, rule, endpoint=None, view_func=None, **options):\n+    def add_url_rule(self, rule, endpoint=None, view_func=None,\n+                     provide_automatic_options=None, **options):\n         \"\"\"Connects a URL rule.  Works exactly like the :meth:`route`\n         decorator.  If a view_func is provided it will be registered with the\n         endpoint.\n@@ -984,6 +985,10 @@ class Flask(_PackageBoundObject):\n                          endpoint\n         :param view_func: the function to call when serving a request to the\n                           provided endpoint\n+        :param provide_automatic_options: controls whether ``OPTIONS`` should\n+                                          be provided automatically. If this\n+                                          is not set, will check attributes on\n+                                          the view or list of methods.\n         :param options: the options to be forwarded to the underlying\n                         :class:`~werkzeug.routing.Rule` object.  A change\n                         to Werkzeug is handling of method options.  methods\n@@ -1013,10 +1018,9 @@ class Flask(_PackageBoundObject):\n \n         # starting with Flask 0.8 the view_func object can disable and\n         # force-enable the automatic options handling.\n-        provide_automatic_options = options.pop(\n-            'provide_automatic_options', getattr(view_func,\n-                'provide_automatic_options', None))\n-\n+        if provide_automatic_options is None:\n+            provide_automatic_options = getattr(view_func,\n+                'provide_automatic_options', None)\n \n         if provide_automatic_options is None:\n             if 'OPTIONS' not in methods:\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#1ac4156016a578fdf439ac69bc39b9c6687ea9f9", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 2 | Methods Changed: 0 | Complexity Δ (Sum/Max): -1/0 | Churn Δ: 4 | Churn Cumulative: 4128 | Contributors (this commit): 54 | Commits (past 90d): 3 | Contributors (cumulative): 54 | DMM Complexity: None\n\nDIFF:\n@@ -14,7 +14,7 @@ from threading import Lock\n from datetime import timedelta\n from itertools import chain\n from functools import update_wrapper\n-from collections import Mapping, deque\n+from collections import deque\n \n from werkzeug.datastructures import ImmutableDict\n from werkzeug.routing import Map, Rule, RequestRedirect, BuildError\n@@ -33,7 +33,7 @@ from .templating import DispatchingJinjaLoader, Environment, \\\n      _default_template_ctx_processor\n from .signals import request_started, request_finished, got_request_exception, \\\n      request_tearing_down, appcontext_tearing_down\n-from ._compat import reraise, string_types, text_type, integer_types, iterkeys\n+from ._compat import reraise, string_types, text_type, integer_types\n \n # a lock used for logger initialization\n _logger_lock = Lock()\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#d526932a09557be4aff6d27261cabb7c5c5ebb8d", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 34 | Lines Deleted: 6 | Files Changed: 4 | Hunks: 9 | Methods Changed: 4 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 40 | Churn Cumulative: 7375 | Contributors (this commit): 84 | Commits (past 90d): 6 | Contributors (cumulative): 107 | DMM Complexity: 1.0\n\nDIFF:\n@@ -246,6 +246,16 @@ class Flask(_PackageBoundObject):\n     permanent_session_lifetime = ConfigAttribute('PERMANENT_SESSION_LIFETIME',\n         get_converter=_make_timedelta)\n \n+    #: A :class:`~datetime.timedelta` which is used as default cache_timeout\n+    #: for the :func:`send_file` functions. The default is 12 hours.\n+    #:\n+    #: This attribute can also be configured from the config with the\n+    #: ``SEND_FILE_MAX_AGE_DEFAULT`` configuration key. This configuration\n+    #: variable can also be set with an integer value used as seconds.\n+    #: Defaults to ``timedelta(hours=12)``\n+    send_file_max_age_default = ConfigAttribute('SEND_FILE_MAX_AGE_DEFAULT',\n+        get_converter=_make_timedelta)\n+\n     #: Enable this if you want to use the X-Sendfile feature.  Keep in\n     #: mind that the server has to support this.  This only affects files\n     #: sent with the :func:`send_file` method.\n@@ -297,7 +307,7 @@ class Flask(_PackageBoundObject):\n         'SESSION_COOKIE_SECURE':                False,\n         'SESSION_REFRESH_EACH_REQUEST':         True,\n         'MAX_CONTENT_LENGTH':                   None,\n-        'SEND_FILE_MAX_AGE_DEFAULT':            12 * 60 * 60,  # 12 hours\n+        'SEND_FILE_MAX_AGE_DEFAULT':            timedelta(hours=12),\n         'TRAP_BAD_REQUEST_ERRORS':              False,\n         'TRAP_HTTP_EXCEPTIONS':                 False,\n         'EXPLAIN_TEMPLATE_LOADING':             False,\n\n@@ -14,6 +14,7 @@ import sys\n import pkgutil\n import posixpath\n import mimetypes\n+from datetime import timedelta\n from time import time\n from zlib import adler32\n from threading import RLock\n@@ -856,7 +857,7 @@ class _PackageBoundObject(object):\n \n         .. versionadded:: 0.9\n         \"\"\"\n-        return current_app.config['SEND_FILE_MAX_AGE_DEFAULT']\n+        return total_seconds(current_app.send_file_max_age_default)\n \n     def send_static_file(self, filename):\n         \"\"\"Function used internally to send static files from the static\n@@ -898,3 +899,14 @@ class _PackageBoundObject(object):\n         if mode not in ('r', 'rb'):\n             raise ValueError('Resources can only be opened for reading')\n         return open(os.path.join(self.root_path, resource), mode)\n+\n+\n+def total_seconds(td):\n+    \"\"\"Returns the total seconds from a timedelta object.\n+\n+    :param timedelta td: the timedelta to be converted in seconds\n+\n+    :returns: number of seconds\n+    :rtype: int\n+    \"\"\"\n+    return td.days * 60 * 60 * 24 + td.seconds\n\n@@ -17,14 +17,11 @@ from werkzeug.http import http_date, parse_date\n from werkzeug.datastructures import CallbackDict\n from . import Markup, json\n from ._compat import iteritems, text_type\n+from .helpers import total_seconds\n \n from itsdangerous import URLSafeTimedSerializer, BadSignature\n \n \n-def total_seconds(td):\n-    return td.days * 60 * 60 * 24 + td.seconds\n-\n-\n class SessionMixin(object):\n     \"\"\"Expands a basic dictionary with an accessors that are expected\n     by Flask extensions and users for the session.\n\n@@ -10,6 +10,7 @@\n import pytest\n \n import os\n+from datetime import timedelta\n import flask\n \n \n@@ -168,6 +169,14 @@ def test_session_lifetime():\n     assert app.permanent_session_lifetime.seconds == 42\n \n \n+def test_send_file_max_age():\n+    app = flask.Flask(__name__)\n+    app.config['SEND_FILE_MAX_AGE_DEFAULT'] = 3600\n+    assert app.send_file_max_age_default.seconds == 3600\n+    app.config['SEND_FILE_MAX_AGE_DEFAULT'] = timedelta(hours=2)\n+    assert app.send_file_max_age_default.seconds == 7200\n+\n+\n def test_get_namespace():\n     app = flask.Flask(__name__)\n     app.config['FOO_OPTION_1'] = 'foo option 1'\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#7f678aaf5a066ff71289743a64e5cd685b660428", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 132 | Contributors (this commit): 6 | Commits (past 90d): 1 | Contributors (cumulative): 6 | DMM Complexity: None\n\nDIFF:\n@@ -111,7 +111,7 @@ class ExtensionImporter(object):\n         if module_name == important_module:\n             return True\n \n-        # Some python versions will will clean up modules so early that the\n+        # Some python versions will clean up modules so early that the\n         # module name at that point is no longer set.  Try guessing from\n         # the filename then.\n         filename = os.path.abspath(tb.tb_frame.f_code.co_filename)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#1d49343bb19933f5f8057a548cb69657d8cbd699", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 4142 | Contributors (this commit): 56 | Commits (past 90d): 4 | Contributors (cumulative): 56 | DMM Complexity: None\n\nDIFF:\n@@ -168,7 +168,7 @@ class Flask(_PackageBoundObject):\n     #:\n     #: 1. Store arbitrary attributes on flask.g.\n     #: 2. Add a property for lazy per-request database connectors.\n-    #: 3. Return None instead of AttributeError on expected attributes.\n+    #: 3. Return None instead of AttributeError on unexpected attributes.\n     #: 4. Raise exception if an unexpected attr is set, a \"controlled\" flask.g.\n     #:\n     #: In Flask 0.9 this property was called `request_globals_class` but it\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#daa3f272da477470d23481d409d54f989136ac32", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 51 | Lines Deleted: 4 | Files Changed: 3 | Hunks: 6 | Methods Changed: 7 | Complexity Δ (Sum/Max): 1/6 | Churn Δ: 55 | Churn Cumulative: 4800 | Contributors (this commit): 60 | Commits (past 90d): 7 | Contributors (cumulative): 74 | DMM Complexity: 0.7631578947368421\n\nDIFF:\n@@ -1776,7 +1776,11 @@ class Flask(_PackageBoundObject):\n     def test_request_context(self, *args, **kwargs):\n         \"\"\"Creates a WSGI environment from the given values (see\n         :func:`werkzeug.test.EnvironBuilder` for more information, this\n-        function accepts the same arguments).\n+        function accepts the same arguments plus two additional).\n+\n+        Additional arguments (might be used only if `base_url` is not specified):\n+        :param subdomain: subdomain in case of testing requests handled by blueprint\n+        :param url_scheme: a URL scheme (default scheme is http)\n         \"\"\"\n         from flask.testing import make_test_environ_builder\n         builder = make_test_environ_builder(self, *args, **kwargs)\n\n@@ -20,13 +20,24 @@ except ImportError:\n     from urlparse import urlsplit as url_parse\n \n \n-def make_test_environ_builder(app, path='/', base_url=None, *args, **kwargs):\n+def make_test_environ_builder(app, path='/', base_url=None, subdomain=None,\n+                              url_scheme=None, *args, **kwargs):\n     \"\"\"Creates a new test builder with some application defaults thrown in.\"\"\"\n+    assert not (base_url or subdomain or url_scheme) \\\n+           or (base_url is not None) != bool(subdomain or url_scheme), \\\n+            'If \"base_url\" parameter is passed in, pass of ' \\\n+            '\"subdomain\" and/or \"url_scheme\" is meaningless.'\n+\n+    if base_url is None:\n         http_host = app.config.get('SERVER_NAME')\n         app_root = app.config.get('APPLICATION_ROOT')\n-    if base_url is None:\n+        if subdomain:\n+            http_host = '%s.%s' % (subdomain, http_host)\n+        if url_scheme is None:\n+            url_scheme = 'http'\n+\n         url = url_parse(path)\n-        base_url = 'http://%s/' % (url.netloc or http_host or 'localhost')\n+        base_url = '%s://%s/' % (url_scheme, url.netloc or http_host or 'localhost')\n         if app_root:\n             base_url += app_root.lstrip('/')\n         if url.netloc:\n\n@@ -45,6 +45,38 @@ class TestToolsTestCase(FlaskTestCase):\n             rv = c.get('/')\n             self.assert_equal(rv.data, b'http://localhost/')\n \n+    def test_specify_url_scheme(self):\n+        app = flask.Flask(__name__)\n+        app.testing = True\n+        @app.route('/')\n+        def index():\n+            return flask.request.url\n+\n+        ctx = app.test_request_context(url_scheme='https')\n+        self.assert_equal(ctx.request.url, 'https://localhost/')\n+        with app.test_client() as c:\n+            rv = c.get('/', url_scheme='https')\n+            self.assert_equal(rv.data, b'https://localhost/')\n+\n+    def test_blueprint_with_subdomain(self):\n+        app = flask.Flask(__name__)\n+        app.testing = True\n+        app.config['SERVER_NAME'] = 'example.com:1234'\n+        app.config['APPLICATION_ROOT'] = '/foo'\n+\n+        bp = flask.Blueprint('company', __name__, subdomain='xxx')\n+        @bp.route('/')\n+        def index():\n+            return flask.request.url\n+        app.register_blueprint(bp)\n+\n+        ctx = app.test_request_context('/', subdomain='xxx')\n+        self.assert_equal(ctx.request.url, 'http://xxx.example.com:1234/foo/')\n+        self.assert_equal(ctx.request.blueprint, bp.name)\n+        with app.test_client() as c:\n+            rv = c.get('/', subdomain='xxx')\n+            self.assert_equal(rv.data, b'http://xxx.example.com:1234/foo/')\n+\n     def test_redirect_keep_session(self):\n         app = flask.Flask(__name__)\n         app.secret_key = 'testing'\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#96f7b07caf15a23a67e9e9dfd086d38e400b2db5", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 12 | Lines Deleted: 13 | Files Changed: 1 | Hunks: 13 | Methods Changed: 11 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 25 | Churn Cumulative: 124 | Contributors (this commit): 2 | Commits (past 90d): 1 | Contributors (cumulative): 2 | DMM Complexity: None\n\nDIFF:\n@@ -2,30 +2,29 @@\n #\n # Author: Keyan Pishdadian\n import pytest\n-from redbaron import RedBaron\n+redbaron = pytest.importorskip(\"redbaron\")\n import flaskext_migrate as migrate\n \n-\n def test_simple_from_import():\n-    red = RedBaron(\"from flask.ext import foo\")\n+    red = redbaron.RedBaron(\"from flask.ext import foo\")\n     output = migrate.fix_tester(red)\n     assert output == \"import flask_foo as foo\"\n \n \n def test_from_to_from_import():\n-    red = RedBaron(\"from flask.ext.foo import bar\")\n+    red = redbaron.RedBaron(\"from flask.ext.foo import bar\")\n     output = migrate.fix_tester(red)\n     assert output == \"from flask_foo import bar as bar\"\n \n \n def test_multiple_import():\n-    red = RedBaron(\"from flask.ext.foo import bar, foobar, something\")\n+    red = redbaron.RedBaron(\"from flask.ext.foo import bar, foobar, something\")\n     output = migrate.fix_tester(red)\n     assert output == \"from flask_foo import bar, foobar, something\"\n \n \n def test_multiline_import():\n-    red = RedBaron(\"from flask.ext.foo import \\\n+    red = redbaron.RedBaron(\"from flask.ext.foo import \\\n                     bar,\\\n                     foobar,\\\n                     something\")\n@@ -34,37 +33,37 @@ def test_multiline_import():\n \n \n def test_module_import():\n-    red = RedBaron(\"import flask.ext.foo\")\n+    red = redbaron.RedBaron(\"import flask.ext.foo\")\n     output = migrate.fix_tester(red)\n     assert output == \"import flask_foo\"\n \n \n def test_named_module_import():\n-    red = RedBaron(\"import flask.ext.foo as foobar\")\n+    red = redbaron.RedBaron(\"import flask.ext.foo as foobar\")\n     output = migrate.fix_tester(red)\n     assert output == \"import flask_foo as foobar\"\n \n \n def test_named_from_import():\n-    red = RedBaron(\"from flask.ext.foo import bar as baz\")\n+    red = redbaron.RedBaron(\"from flask.ext.foo import bar as baz\")\n     output = migrate.fix_tester(red)\n     assert output == \"from flask_foo import bar as baz\"\n \n \n def test_parens_import():\n-    red = RedBaron(\"from flask.ext.foo import (bar, foo, foobar)\")\n+    red = redbaron.RedBaron(\"from flask.ext.foo import (bar, foo, foobar)\")\n     output = migrate.fix_tester(red)\n     assert output == \"from flask_foo import (bar, foo, foobar)\"\n \n \n def test_function_call_migration():\n-    red = RedBaron(\"flask.ext.foo(var)\")\n+    red = redbaron.RedBaron(\"flask.ext.foo(var)\")\n     output = migrate.fix_tester(red)\n     assert output == \"flask_foo(var)\"\n \n \n def test_nested_function_call_migration():\n-    red = RedBaron(\"import flask.ext.foo\\n\\n\"\n+    red = redbaron.RedBaron(\"import flask.ext.foo\\n\\n\"\n                    \"flask.ext.foo.bar(var)\")\n     output = migrate.fix_tester(red)\n     assert output == (\"import flask_foo\\n\\n\"\n@@ -72,6 +71,6 @@ def test_nested_function_call_migration():\n \n \n def test_no_change_to_import():\n-    red = RedBaron(\"from flask import Flask\")\n+    red = redbaron.RedBaron(\"from flask import Flask\")\n     output = migrate.fix_tester(red)\n     assert output == \"from flask import Flask\"\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
