{"custom_id": "fastapi#62df41780706161c4e25f854de0b6cc5d2664a39", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 23 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 2 | Complexity Δ (Sum/Max): 2/2 | Churn Δ: 23 | Churn Cumulative: 23 | Contributors (this commit): 1 | Commits (past 90d): 1 | Contributors (cumulative): 1 | DMM Complexity: 1.0\n\nDIFF:\n@@ -0,0 +1,23 @@\n+from fastapi import APIRouter, FastAPI\n+from starlette.testclient import TestClient\n+\n+app = FastAPI()\n+\n+router = APIRouter()\n+\n+\n+@router.get(\"/users/{id}\")\n+def read_user(segment: str, id: str):\n+    return {\"segment\": segment, \"id\": id}\n+\n+\n+app.include_router(router, prefix=\"/{segment}\")\n+\n+\n+client = TestClient(app)\n+\n+\n+def test_get():\n+    response = client.get(\"/seg/users/foo\")\n+    assert response.status_code == 200\n+    assert response.json() == {\"segment\": \"seg\", \"id\": \"foo\"}\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#508f9ce9547972dc4feb997f53ce332716afee88", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 3 | Churn Cumulative: 259 | Contributors (this commit): 4 | Commits (past 90d): 4 | Contributors (cumulative): 4 | DMM Complexity: 1.0\n\nDIFF:\n@@ -40,7 +40,8 @@ def get_swagger_ui_html(\n         SwaggerUIBundle.presets.apis,\n         SwaggerUIBundle.SwaggerUIStandalonePreset\n         ],\n-        layout: \"BaseLayout\"\n+        layout: \"BaseLayout\",\n+        deepLinking: true\n     })\n     </script>\n     </body>\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#9a71672a95d4c38f504177b371ee64aef06d9ac6", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 1 | Files Changed: 2 | Hunks: 2 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 3 | Churn Cumulative: 144 | Contributors (this commit): 1 | Commits (past 90d): 4 | Contributors (cumulative): 2 | DMM Complexity: None\n\nDIFF:\n@@ -3,7 +3,7 @@ from enum import Enum\n from fastapi import FastAPI\n \n \n-class ModelName(Enum):\n+class ModelName(str, Enum):\n     alexnet = \"alexnet\"\n     resnet = \"resnet\"\n     lenet = \"lenet\"\n\n@@ -35,6 +35,7 @@ openapi_schema = {\n                         \"schema\": {\n                             \"title\": \"Model_Name\",\n                             \"enum\": [\"alexnet\", \"resnet\", \"lenet\"],\n+                            \"type\": \"string\",\n                         },\n                         \"name\": \"model_name\",\n                         \"in\": \"path\",\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#3ec43422826339347404cddf371f9ff68973d57b", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 2 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 4 | Contributors (this commit): 2 | Commits (past 90d): 1 | Contributors (cumulative): 2 | DMM Complexity: None\n\nDIFF:\n@@ -6,5 +6,5 @@ fake_items_db = [{\"item_name\": \"Foo\"}, {\"item_name\": \"Bar\"}, {\"item_name\": \"Baz\"\n \n \n @app.get(\"/items/\")\n-async def read_item(skip: int = 0, limit: int = 100):\n+async def read_item(skip: int = 0, limit: int = 10):\n     return fake_items_db[skip : skip + limit]\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#d1e2e46b80eb81308d3ddaf69ab484eab34aca45", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 169 | Contributors (this commit): 1 | Commits (past 90d): 24 | Contributors (cumulative): 1 | DMM Complexity: None\n\nDIFF:\n@@ -1,6 +1,6 @@\n \"\"\"FastAPI framework, high performance, easy to learn, fast to code, ready for production\"\"\"\n \n-__version__ = \"0.31.0\"\n+__version__ = \"0.31.1\"\n \n from starlette.background import BackgroundTasks\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#e620aeb46d8fc832c170d829e3d1c9f62d819b76", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 171 | Contributors (this commit): 1 | Commits (past 90d): 25 | Contributors (cumulative): 1 | DMM Complexity: None\n\nDIFF:\n@@ -1,6 +1,6 @@\n \"\"\"FastAPI framework, high performance, easy to learn, fast to code, ready for production\"\"\"\n \n-__version__ = \"0.31.1\"\n+__version__ = \"0.32.0\"\n \n from starlette.background import BackgroundTasks\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#46a986cacf89d9b5a177daf91edf0ac95ddaa7c0", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 4 | Lines Deleted: 4 | Files Changed: 2 | Hunks: 4 | Methods Changed: 3 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 8 | Churn Cumulative: 958 | Contributors (this commit): 6 | Commits (past 90d): 13 | Contributors (cumulative): 9 | DMM Complexity: None\n\nDIFF:\n@@ -100,7 +100,7 @@ def get_openapi_operation_request_body(\n     if not body_field:\n         return None\n     assert isinstance(body_field, Field)\n-    body_schema, _ = field_schema(\n+    body_schema, _, _ = field_schema(\n         body_field, model_name_map=model_name_map, ref_prefix=REF_PREFIX\n     )\n     body_field.schema = cast(Body, body_field.schema)\n@@ -184,7 +184,7 @@ def get_openapi_path(\n                     ), \"An additional response must be a dict\"\n                     field = route.response_fields.get(additional_status_code)\n                     if field:\n-                        response_schema, _ = field_schema(\n+                        response_schema, _, _ = field_schema(\n                             field, model_name_map=model_name_map, ref_prefix=REF_PREFIX\n                         )\n                         response.setdefault(\"content\", {}).setdefault(\n@@ -201,7 +201,7 @@ def get_openapi_path(\n             response_schema = {\"type\": \"string\"}\n             if lenient_issubclass(route.response_class, JSONResponse):\n                 if route.response_field:\n-                    response_schema, _ = field_schema(\n+                    response_schema, _, _ = field_schema(\n                         route.response_field,\n                         model_name_map=model_name_map,\n                         ref_prefix=REF_PREFIX,\n\n@@ -37,7 +37,7 @@ def get_model_definitions(\n ) -> Dict[str, Any]:\n     definitions: Dict[str, Dict] = {}\n     for model in flat_models:\n-        m_schema, m_definitions = model_process_schema(\n+        m_schema, m_definitions, m_nested_models = model_process_schema(\n             model, model_name_map=model_name_map, ref_prefix=REF_PREFIX\n         )\n         definitions.update(m_definitions)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#6bf3ab3b7aa84b0f4c766284a84fcb9137493ff8", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 173 | Contributors (this commit): 1 | Commits (past 90d): 26 | Contributors (cumulative): 1 | DMM Complexity: None\n\nDIFF:\n@@ -1,6 +1,6 @@\n \"\"\"FastAPI framework, high performance, easy to learn, fast to code, ready for production\"\"\"\n \n-__version__ = \"0.32.0\"\n+__version__ = \"0.33.0\"\n \n from starlette.background import BackgroundTasks\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#25e85c8522e504e8ee3bfa0577e73cc92f91dc60", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 23 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 2 | Complexity Δ (Sum/Max): 2/2 | Churn Δ: 23 | Churn Cumulative: 23 | Contributors (this commit): 1 | Commits (past 90d): 1 | Contributors (cumulative): 1 | DMM Complexity: 1.0\n\nDIFF:\n@@ -0,0 +1,23 @@\n+from fastapi import FastAPI\n+from pydantic import BaseModel\n+\n+\n+def test_get_openapi():\n+    app = FastAPI()\n+\n+    class Model(BaseModel):\n+        pass\n+\n+    class Model2(BaseModel):\n+        a: Model\n+\n+    class Model3(BaseModel):\n+        c: Model\n+        d: Model2\n+\n+    @app.get(\"/\", response_model=Model3)\n+    def f():\n+        pass  # pragma: no cover\n+\n+    openapi = app.openapi()\n+    assert isinstance(openapi, dict)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#bf229ad5d830eb5320f966d51a55e590e8d57008", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 175 | Contributors (this commit): 1 | Commits (past 90d): 21 | Contributors (cumulative): 1 | DMM Complexity: None\n\nDIFF:\n@@ -1,6 +1,6 @@\n \"\"\"FastAPI framework, high performance, easy to learn, fast to code, ready for production\"\"\"\n \n-__version__ = \"0.33.0\"\n+__version__ = \"0.34.0\"\n \n from starlette.background import BackgroundTasks\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#06eb4219345a77d23484528c9d164eb8d2097fec", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 271 | Lines Deleted: 2 | Files Changed: 3 | Hunks: 4 | Methods Changed: 9 | Complexity Δ (Sum/Max): 12/4 | Churn Δ: 273 | Churn Cumulative: 1360 | Contributors (this commit): 4 | Commits (past 90d): 13 | Contributors (cumulative): 6 | DMM Complexity: 0.6363636363636364\n\nDIFF:\n@@ -131,12 +131,17 @@ def get_flat_dependant(dependant: Dependant) -> Dependant:\n \n \n def is_scalar_field(field: Field) -> bool:\n-    return (\n+    if not (\n         field.shape == Shape.SINGLETON\n         and not lenient_issubclass(field.type_, BaseModel)\n         and not lenient_issubclass(field.type_, sequence_types + (dict,))\n         and not isinstance(field.schema, params.Body)\n-    )\n+    ):\n+        return False\n+    if field.sub_fields:\n+        if not all(is_scalar_field(f) for f in field.sub_fields):\n+            return False\n+    return True\n \n \n def is_scalar_sequence_field(field: Field) -> bool:\n\n@@ -0,0 +1,124 @@\n+from typing import Optional, Union\n+\n+from fastapi import FastAPI\n+from pydantic import BaseModel\n+from starlette.testclient import TestClient\n+\n+app = FastAPI()\n+\n+\n+class Item(BaseModel):\n+    name: Optional[str] = None\n+\n+\n+class OtherItem(BaseModel):\n+    price: int\n+\n+\n+@app.post(\"/items/\")\n+def save_union_body(item: Union[OtherItem, Item]):\n+    return {\"item\": item}\n+\n+\n+client = TestClient(app)\n+\n+item_openapi_schema = {\n+    \"openapi\": \"3.0.2\",\n+    \"info\": {\"title\": \"Fast API\", \"version\": \"0.1.0\"},\n+    \"paths\": {\n+        \"/items/\": {\n+            \"post\": {\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                    },\n+                    \"422\": {\n+                        \"description\": \"Validation Error\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\n+                                    \"$ref\": \"#/components/schemas/HTTPValidationError\"\n+                                }\n+                            }\n+                        },\n+                    },\n+                },\n+                \"summary\": \"Save Union Body\",\n+                \"operationId\": \"save_union_body_items__post\",\n+                \"requestBody\": {\n+                    \"content\": {\n+                        \"application/json\": {\n+                            \"schema\": {\n+                                \"title\": \"Item\",\n+                                \"anyOf\": [\n+                                    {\"$ref\": \"#/components/schemas/OtherItem\"},\n+                                    {\"$ref\": \"#/components/schemas/Item\"},\n+                                ],\n+                            }\n+                        }\n+                    },\n+                    \"required\": True,\n+                },\n+            }\n+        }\n+    },\n+    \"components\": {\n+        \"schemas\": {\n+            \"OtherItem\": {\n+                \"title\": \"OtherItem\",\n+                \"required\": [\"price\"],\n+                \"type\": \"object\",\n+                \"properties\": {\"price\": {\"title\": \"Price\", \"type\": \"integer\"}},\n+            },\n+            \"Item\": {\n+                \"title\": \"Item\",\n+                \"type\": \"object\",\n+                \"properties\": {\"name\": {\"title\": \"Name\", \"type\": \"string\"}},\n+            },\n+            \"ValidationError\": {\n+                \"title\": \"ValidationError\",\n+                \"required\": [\"loc\", \"msg\", \"type\"],\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"loc\": {\n+                        \"title\": \"Location\",\n+                        \"type\": \"array\",\n+                        \"items\": {\"type\": \"string\"},\n+                    },\n+                    \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n+                    \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n+                },\n+            },\n+            \"HTTPValidationError\": {\n+                \"title\": \"HTTPValidationError\",\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"detail\": {\n+                        \"title\": \"Detail\",\n+                        \"type\": \"array\",\n+                        \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n+                    }\n+                },\n+            },\n+        }\n+    },\n+}\n+\n+\n+def test_item_openapi_schema():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200\n+    assert response.json() == item_openapi_schema\n+\n+\n+def test_post_other_item():\n+    response = client.post(\"/items/\", json={\"price\": 100})\n+    assert response.status_code == 200\n+    assert response.json() == {\"item\": {\"price\": 100}}\n+\n+\n+def test_post_item():\n+    response = client.post(\"/items/\", json={\"name\": \"Foo\"})\n+    assert response.status_code == 200\n+    assert response.json() == {\"item\": {\"name\": \"Foo\"}}\n\n@@ -0,0 +1,140 @@\n+import sys\n+from typing import Optional, Union\n+\n+import pytest\n+from fastapi import FastAPI\n+from pydantic import BaseModel\n+from starlette.testclient import TestClient\n+\n+# In Python 3.6:\n+# u = Union[ExtendedItem, Item] == __main__.Item\n+\n+# But in Python 3.7:\n+# u = Union[ExtendedItem, Item] == typing.Union[__main__.ExtendedItem, __main__.Item]\n+skip_py36 = pytest.mark.skipif(sys.version_info < (3, 7), reason=\"skip python3.6\")\n+\n+app = FastAPI()\n+\n+\n+class Item(BaseModel):\n+    name: Optional[str] = None\n+\n+\n+class ExtendedItem(Item):\n+    age: int\n+\n+\n+@app.post(\"/items/\")\n+def save_union_different_body(item: Union[ExtendedItem, Item]):\n+    return {\"item\": item}\n+\n+\n+client = TestClient(app)\n+\n+\n+inherited_item_openapi_schema = {\n+    \"openapi\": \"3.0.2\",\n+    \"info\": {\"title\": \"Fast API\", \"version\": \"0.1.0\"},\n+    \"paths\": {\n+        \"/items/\": {\n+            \"post\": {\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                    },\n+                    \"422\": {\n+                        \"description\": \"Validation Error\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\n+                                    \"$ref\": \"#/components/schemas/HTTPValidationError\"\n+                                }\n+                            }\n+                        },\n+                    },\n+                },\n+                \"summary\": \"Save Union Different Body\",\n+                \"operationId\": \"save_union_different_body_items__post\",\n+                \"requestBody\": {\n+                    \"content\": {\n+                        \"application/json\": {\n+                            \"schema\": {\n+                                \"title\": \"Item\",\n+                                \"anyOf\": [\n+                                    {\"$ref\": \"#/components/schemas/ExtendedItem\"},\n+                                    {\"$ref\": \"#/components/schemas/Item\"},\n+                                ],\n+                            }\n+                        }\n+                    },\n+                    \"required\": True,\n+                },\n+            }\n+        }\n+    },\n+    \"components\": {\n+        \"schemas\": {\n+            \"Item\": {\n+                \"title\": \"Item\",\n+                \"type\": \"object\",\n+                \"properties\": {\"name\": {\"title\": \"Name\", \"type\": \"string\"}},\n+            },\n+            \"ExtendedItem\": {\n+                \"title\": \"ExtendedItem\",\n+                \"required\": [\"age\"],\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"name\": {\"title\": \"Name\", \"type\": \"string\"},\n+                    \"age\": {\"title\": \"Age\", \"type\": \"integer\"},\n+                },\n+            },\n+            \"ValidationError\": {\n+                \"title\": \"ValidationError\",\n+                \"required\": [\"loc\", \"msg\", \"type\"],\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"loc\": {\n+                        \"title\": \"Location\",\n+                        \"type\": \"array\",\n+                        \"items\": {\"type\": \"string\"},\n+                    },\n+                    \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n+                    \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n+                },\n+            },\n+            \"HTTPValidationError\": {\n+                \"title\": \"HTTPValidationError\",\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"detail\": {\n+                        \"title\": \"Detail\",\n+                        \"type\": \"array\",\n+                        \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n+                    }\n+                },\n+            },\n+        }\n+    },\n+}\n+\n+\n+@skip_py36\n+def test_inherited_item_openapi_schema():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200\n+    assert response.json() == inherited_item_openapi_schema\n+\n+\n+@skip_py36\n+def test_post_extended_item():\n+    response = client.post(\"/items/\", json={\"name\": \"Foo\", \"age\": 5})\n+    assert response.status_code == 200\n+    assert response.json() == {\"item\": {\"name\": \"Foo\", \"age\": 5}}\n+\n+\n+@skip_py36\n+def test_post_item():\n+    response = client.post(\"/items/\", json={\"name\": \"Foo\"})\n+    assert response.status_code == 200\n+    assert response.json() == {\"item\": {\"name\": \"Foo\"}}\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#0c5555332862a6927427ff3b4d51148ce3cc3ce9", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 2 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 2935 | Contributors (this commit): 9 | Commits (past 90d): 17 | Contributors (cumulative): 9 | DMM Complexity: None\n\nDIFF:\n@@ -147,7 +147,7 @@ def get_websocket_app(\n         if errors:\n             await websocket.close(code=WS_1008_POLICY_VIOLATION)\n             raise WebSocketRequestValidationError(errors)\n-        assert dependant.call is not None, \"dependant.call must me a function\"\n+        assert dependant.call is not None, \"dependant.call must be a function\"\n         await dependant.call(**values)\n \n     return app\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#033bc2a6c9aec3a245eb1f1b4fadb2fbb7a514b8", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 177 | Contributors (this commit): 1 | Commits (past 90d): 22 | Contributors (cumulative): 1 | DMM Complexity: None\n\nDIFF:\n@@ -1,6 +1,6 @@\n \"\"\"FastAPI framework, high performance, easy to learn, fast to code, ready for production\"\"\"\n \n-__version__ = \"0.34.0\"\n+__version__ = \"0.35.0\"\n \n from starlette.background import BackgroundTasks\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#f7f17fcfd6af17f15b7605aa6f6162491a5a6481", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 39 | Lines Deleted: 1 | Files Changed: 2 | Hunks: 3 | Methods Changed: 5 | Complexity Δ (Sum/Max): 5/3 | Churn Δ: 40 | Churn Cumulative: 2975 | Contributors (this commit): 10 | Commits (past 90d): 14 | Contributors (cumulative): 11 | DMM Complexity: 0.6875\n\nDIFF:\n@@ -201,7 +201,6 @@ class APIRoute(routing.Route):\n         response_class: Type[Response] = JSONResponse,\n         dependency_overrides_provider: Any = None,\n     ) -> None:\n-        assert path.startswith(\"/\"), \"Routed paths must always start with '/'\"\n         self.path = path\n         self.endpoint = endpoint\n         self.name = get_name(endpoint) if name is None else name\n@@ -448,6 +447,12 @@ class APIRouter(routing.Router):\n             assert not prefix.endswith(\n                 \"/\"\n             ), \"A path prefix must not end with '/', as the routes will start with '/'\"\n+        else:\n+            for r in router.routes:\n+                if not r.path:\n+                    raise Exception(\n+                        f\"Prefix and path cannot be both empty (operation: {r.name})\"\n+                    )\n         if responses is None:\n             responses = {}\n         for route in router.routes:\n\n@@ -0,0 +1,33 @@\n+import pytest\n+from fastapi import APIRouter, FastAPI\n+from starlette.testclient import TestClient\n+\n+app = FastAPI()\n+\n+router = APIRouter()\n+\n+\n+@router.get(\"\")\n+def get_empty():\n+    return [\"OK\"]\n+\n+\n+app.include_router(router, prefix=\"/prefix\")\n+\n+\n+client = TestClient(app)\n+\n+\n+def test_use_empty():\n+    with client:\n+        response = client.get(\"/prefix\")\n+        assert response.json() == [\"OK\"]\n+\n+        response = client.get(\"/prefix/\")\n+        assert response.status_code == 404\n+\n+\n+def test_include_empty():\n+    # if both include and router.path are empty - it should raise exception\n+    with pytest.raises(Exception):\n+        app.include_router(router)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#e71636e381a297d1825b37f71362ecd36f2fb3fb", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 4 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 6 | Churn Cumulative: 2948 | Contributors (this commit): 10 | Commits (past 90d): 14 | Contributors (cumulative): 10 | DMM Complexity: 0.0\n\nDIFF:\n@@ -449,9 +449,11 @@ class APIRouter(routing.Router):\n             ), \"A path prefix must not end with '/', as the routes will start with '/'\"\n         else:\n             for r in router.routes:\n-                if not r.path:\n+                path = getattr(r, \"path\")\n+                name = getattr(r, \"name\", \"unknown\")\n+                if path is not None and not path:\n                     raise Exception(\n-                        f\"Prefix and path cannot be both empty (operation: {r.name})\"\n+                        f\"Prefix and path cannot be both empty (path operation: {name})\"\n                     )\n         if responses is None:\n             responses = {}\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#483eb73b26ee2313694b890b07bad967d697001f", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 120 | Lines Deleted: 4 | Files Changed: 3 | Hunks: 5 | Methods Changed: 9 | Complexity Δ (Sum/Max): 8/5 | Churn Δ: 124 | Churn Cumulative: 1998 | Contributors (this commit): 9 | Commits (past 90d): 16 | Contributors (cumulative): 13 | DMM Complexity: 1.0\n\nDIFF:\n@@ -108,7 +108,16 @@ def get_sub_dependant(\n     return sub_dependant\n \n \n-def get_flat_dependant(dependant: Dependant) -> Dependant:\n+CacheKey = Tuple[Optional[Callable], Tuple[str, ...]]\n+\n+\n+def get_flat_dependant(\n+    dependant: Dependant, *, skip_repeats: bool = False, visited: List[CacheKey] = None\n+) -> Dependant:\n+    if visited is None:\n+        visited = []\n+    visited.append(dependant.cache_key)\n+\n     flat_dependant = Dependant(\n         path_params=dependant.path_params.copy(),\n         query_params=dependant.query_params.copy(),\n@@ -120,7 +129,11 @@ def get_flat_dependant(dependant: Dependant) -> Dependant:\n         path=dependant.path,\n     )\n     for sub_dependant in dependant.dependencies:\n-        flat_sub = get_flat_dependant(sub_dependant)\n+        if skip_repeats and sub_dependant.cache_key in visited:\n+            continue\n+        flat_sub = get_flat_dependant(\n+            sub_dependant, skip_repeats=skip_repeats, visited=visited\n+        )\n         flat_dependant.path_params.extend(flat_sub.path_params)\n         flat_dependant.query_params.extend(flat_sub.query_params)\n         flat_dependant.header_params.extend(flat_sub.header_params)\n\n@@ -45,7 +45,7 @@ validation_error_response_definition = {\n \n \n def get_openapi_params(dependant: Dependant) -> List[Field]:\n-    flat_dependant = get_flat_dependant(dependant)\n+    flat_dependant = get_flat_dependant(dependant, skip_repeats=True)\n     return (\n         flat_dependant.path_params\n         + flat_dependant.query_params\n@@ -150,7 +150,7 @@ def get_openapi_path(\n         for method in route.methods:\n             operation = get_openapi_operation_metadata(route=route, method=method)\n             parameters: List[Dict] = []\n-            flat_dependant = get_flat_dependant(route.dependant)\n+            flat_dependant = get_flat_dependant(route.dependant, skip_repeats=True)\n             security_definitions, operation_security = get_openapi_security_definitions(\n                 flat_dependant=flat_dependant\n             )\n\n@@ -0,0 +1,103 @@\n+from fastapi import Depends, FastAPI, Header\n+from starlette.status import HTTP_200_OK\n+from starlette.testclient import TestClient\n+\n+app = FastAPI()\n+\n+\n+def get_header(*, someheader: str = Header(...)):\n+    return someheader\n+\n+\n+def get_something_else(*, someheader: str = Depends(get_header)):\n+    return f\"{someheader}123\"\n+\n+\n+@app.get(\"/\")\n+def get_deps(dep1: str = Depends(get_header), dep2: str = Depends(get_something_else)):\n+    return {\"dep1\": dep1, \"dep2\": dep2}\n+\n+\n+client = TestClient(app)\n+\n+schema = {\n+    \"components\": {\n+        \"schemas\": {\n+            \"HTTPValidationError\": {\n+                \"properties\": {\n+                    \"detail\": {\n+                        \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n+                        \"title\": \"Detail\",\n+                        \"type\": \"array\",\n+                    }\n+                },\n+                \"title\": \"HTTPValidationError\",\n+                \"type\": \"object\",\n+            },\n+            \"ValidationError\": {\n+                \"properties\": {\n+                    \"loc\": {\n+                        \"items\": {\"type\": \"string\"},\n+                        \"title\": \"Location\",\n+                        \"type\": \"array\",\n+                    },\n+                    \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n+                    \"type\": {\"title\": \"Error \" \"Type\", \"type\": \"string\"},\n+                },\n+                \"required\": [\"loc\", \"msg\", \"type\"],\n+                \"title\": \"ValidationError\",\n+                \"type\": \"object\",\n+            },\n+        }\n+    },\n+    \"info\": {\"title\": \"Fast API\", \"version\": \"0.1.0\"},\n+    \"openapi\": \"3.0.2\",\n+    \"paths\": {\n+        \"/\": {\n+            \"get\": {\n+                \"operationId\": \"get_deps__get\",\n+                \"parameters\": [\n+                    {\n+                        \"in\": \"header\",\n+                        \"name\": \"someheader\",\n+                        \"required\": True,\n+                        \"schema\": {\"title\": \"Someheader\", \"type\": \"string\"},\n+                    }\n+                ],\n+                \"responses\": {\n+                    \"200\": {\n+                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                        \"description\": \"Successful \" \"Response\",\n+                    },\n+                    \"422\": {\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\n+                                    \"$ref\": \"#/components/schemas/HTTPValidationError\"\n+                                }\n+                            }\n+                        },\n+                        \"description\": \"Validation \" \"Error\",\n+                    },\n+                },\n+                \"summary\": \"Get Deps\",\n+            }\n+        }\n+    },\n+}\n+\n+\n+def test_schema():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == HTTP_200_OK\n+    actual_schema = response.json()\n+    assert actual_schema == schema\n+    assert (\n+        len(actual_schema[\"paths\"][\"/\"][\"get\"][\"parameters\"]) == 1\n+    )  # primary goal of this test\n+\n+\n+def test_response():\n+    response = client.get(\"/\", headers={\"someheader\": \"hello\"})\n+    assert response.status_code == HTTP_200_OK\n+    assert response.json() == {\"dep1\": \"hello\", \"dep2\": \"hello123\"}\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#38495fffa560fa57a8f0e6437d8e43c36c8e5612", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 31 | Lines Deleted: 0 | Files Changed: 2 | Hunks: 2 | Methods Changed: 3 | Complexity Δ (Sum/Max): 4/2 | Churn Δ: 31 | Churn Cumulative: 2979 | Contributors (this commit): 10 | Commits (past 90d): 14 | Contributors (cumulative): 11 | DMM Complexity: 0.0\n\nDIFF:\n@@ -52,6 +52,8 @@ def serialize_response(\n             errors.extend(errors_)\n         if errors:\n             raise ValidationError(errors)\n+        if skip_defaults and isinstance(response, BaseModel):\n+            value = response.dict(skip_defaults=skip_defaults)\n         return jsonable_encoder(\n             value,\n             include=include,\n\n@@ -0,0 +1,29 @@\n+from typing import Optional\n+\n+from fastapi import FastAPI\n+from pydantic import BaseModel\n+from starlette.testclient import TestClient\n+\n+app = FastAPI()\n+\n+\n+class SubModel(BaseModel):\n+    a: Optional[str] = \"foo\"\n+\n+\n+class Model(BaseModel):\n+    x: Optional[int]\n+    sub: SubModel\n+\n+\n+@app.get(\"/\", response_model=Model, response_model_skip_defaults=True)\n+def get() -> Model:\n+    return Model(sub={})\n+\n+\n+client = TestClient(app)\n+\n+\n+def test_return_defaults():\n+    response = client.get(\"/\")\n+    assert response.json() == {\"sub\": {}}\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#417a3ab140b0017b4a4462fa08816e1bd9e629fd", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 179 | Contributors (this commit): 1 | Commits (past 90d): 16 | Contributors (cumulative): 1 | DMM Complexity: None\n\nDIFF:\n@@ -1,6 +1,6 @@\n \"\"\"FastAPI framework, high performance, easy to learn, fast to code, ready for production\"\"\"\n \n-__version__ = \"0.35.0\"\n+__version__ = \"0.36.0\"\n \n from starlette.background import BackgroundTasks\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#73dbbeab554b8d94fffd934d951009f026491015", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 70 | Lines Deleted: 5 | Files Changed: 3 | Hunks: 8 | Methods Changed: 3 | Complexity Δ (Sum/Max): 3/2 | Churn Δ: 75 | Churn Cumulative: 958 | Contributors (this commit): 8 | Commits (past 90d): 8 | Contributors (cumulative): 11 | DMM Complexity: 0.7142857142857143\n\nDIFF:\n@@ -43,6 +43,15 @@ validation_error_response_definition = {\n     },\n }\n \n+status_code_ranges: Dict[str, str] = {\n+    \"1XX\": \"Information\",\n+    \"2XX\": \"Success\",\n+    \"3XX\": \"Redirection\",\n+    \"4XX\": \"Client Error\",\n+    \"5XX\": \"Server Error\",\n+    \"default\": \"Default Response\",\n+}\n+\n \n def get_openapi_params(dependant: Dependant) -> List[Field]:\n     flat_dependant = get_flat_dependant(dependant, skip_repeats=True)\n@@ -190,12 +199,14 @@ def get_openapi_path(\n                         response.setdefault(\"content\", {}).setdefault(\n                             \"application/json\", {}\n                         )[\"schema\"] = response_schema\n-                    status_text = http.client.responses.get(int(additional_status_code))\n+                    status_text: Optional[str] = status_code_ranges.get(\n+                        str(additional_status_code).upper()\n+                    ) or http.client.responses.get(int(additional_status_code))\n                     response.setdefault(\n                         \"description\", status_text or \"Additional Response\"\n                     )\n                     operation.setdefault(\"responses\", {})[\n-                        str(additional_status_code)\n+                        str(additional_status_code).upper()\n                     ] = response\n             status_code = str(route.status_code)\n             response_schema = {\"type\": \"string\"}\n\n@@ -0,0 +1,40 @@\n+import pytest\n+from fastapi import FastAPI\n+from starlette.testclient import TestClient\n+\n+app = FastAPI()\n+\n+\n+@app.get(\"/a\", responses={\"hello\": {\"description\": \"Not a valid additional response\"}})\n+async def a():\n+    pass  # pragma: no cover\n+\n+\n+openapi_schema = {\n+    \"openapi\": \"3.0.2\",\n+    \"info\": {\"title\": \"Fast API\", \"version\": \"0.1.0\"},\n+    \"paths\": {\n+        \"/a\": {\n+            \"get\": {\n+                \"responses\": {\n+                    # this is how one would imagine the openapi schema to be\n+                    # but since the key is not valid, openapi.utils.get_openapi will raise ValueError\n+                    \"hello\": {\"description\": \"Not a valid additional response\"},\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                    },\n+                },\n+                \"summary\": \"A\",\n+                \"operationId\": \"a_a_get\",\n+            }\n+        }\n+    },\n+}\n+\n+client = TestClient(app)\n+\n+\n+def test_openapi_schema():\n+    with pytest.raises(ValueError):\n+        client.get(\"/openapi.json\")\n\n@@ -10,12 +10,24 @@ async def a():\n     return \"a\"\n \n \n-@router.get(\"/b\", responses={502: {\"description\": \"Error 2\"}})\n+@router.get(\n+    \"/b\",\n+    responses={\n+        502: {\"description\": \"Error 2\"},\n+        \"4XX\": {\"description\": \"Error with range, upper\"},\n+    },\n+)\n async def b():\n     return \"b\"\n \n \n-@router.get(\"/c\", responses={501: {\"description\": \"Error 3\"}})\n+@router.get(\n+    \"/c\",\n+    responses={\n+        \"400\": {\"description\": \"Error with str\"},\n+        \"5xx\": {\"description\": \"Error with range, lower\"},\n+    },\n+)\n async def c():\n     return \"c\"\n \n@@ -43,6 +55,7 @@ openapi_schema = {\n             \"get\": {\n                 \"responses\": {\n                     \"502\": {\"description\": \"Error 2\"},\n+                    \"4XX\": {\"description\": \"Error with range, upper\"},\n                     \"200\": {\n                         \"description\": \"Successful Response\",\n                         \"content\": {\"application/json\": {\"schema\": {}}},\n@@ -55,7 +68,8 @@ openapi_schema = {\n         \"/c\": {\n             \"get\": {\n                 \"responses\": {\n-                    \"501\": {\"description\": \"Error 3\"},\n+                    \"400\": {\"description\": \"Error with str\"},\n+                    \"5XX\": {\"description\": \"Error with range, lower\"},\n                     \"200\": {\n                         \"description\": \"Successful Response\",\n                         \"content\": {\"application/json\": {\"schema\": {}}},\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#55c4b5fb0bd260765b6eedbf8c200caa3cdc670e", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 8 | Lines Deleted: 9 | Files Changed: 3 | Hunks: 6 | Methods Changed: 1 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 17 | Churn Cumulative: 1445 | Contributors (this commit): 8 | Commits (past 90d): 11 | Contributors (cumulative): 13 | DMM Complexity: 0.0\n\nDIFF:\n@@ -210,10 +210,6 @@ class Response(BaseModel):\n     links: Optional[Dict[str, Union[Link, Reference]]] = None\n \n \n-class Responses(BaseModel):\n-    default: Response\n-\n-\n class Operation(BaseModel):\n     tags: Optional[List[str]] = None\n     summary: Optional[str] = None\n@@ -222,7 +218,7 @@ class Operation(BaseModel):\n     operationId: Optional[str] = None\n     parameters: Optional[List[Union[Parameter, Reference]]] = None\n     requestBody: Optional[Union[RequestBody, Reference]] = None\n-    responses: Union[Responses, Dict[str, Response]]\n+    responses: Dict[str, Response]\n     # Workaround OpenAPI recursive reference\n     callbacks: Optional[Dict[str, Union[Dict[str, Any], Reference]]] = None\n     deprecated: Optional[bool] = None\n\n@@ -49,7 +49,7 @@ status_code_ranges: Dict[str, str] = {\n     \"3XX\": \"Redirection\",\n     \"4XX\": \"Client Error\",\n     \"5XX\": \"Server Error\",\n-    \"default\": \"Default Response\",\n+    \"DEFAULT\": \"Default Response\",\n }\n \n \n@@ -205,9 +205,10 @@ def get_openapi_path(\n                     response.setdefault(\n                         \"description\", status_text or \"Additional Response\"\n                     )\n-                    operation.setdefault(\"responses\", {})[\n-                        str(additional_status_code).upper()\n-                    ] = response\n+                    status_code_key = str(additional_status_code).upper()\n+                    if status_code_key == \"DEFAULT\":\n+                        status_code_key = \"default\"\n+                    operation.setdefault(\"responses\", {})[status_code_key] = response\n             status_code = str(route.status_code)\n             response_schema = {\"type\": \"string\"}\n             if lenient_issubclass(route.response_class, JSONResponse):\n\n@@ -26,6 +26,7 @@ async def b():\n     responses={\n         \"400\": {\"description\": \"Error with str\"},\n         \"5xx\": {\"description\": \"Error with range, lower\"},\n+        \"default\": {\"description\": \"A default response\"},\n     },\n )\n async def c():\n@@ -74,6 +75,7 @@ openapi_schema = {\n                         \"description\": \"Successful Response\",\n                         \"content\": {\"application/json\": {\"schema\": {}}},\n                     },\n+                    \"default\": {\"description\": \"A default response\"},\n                 },\n                 \"summary\": \"C\",\n                 \"operationId\": \"c_c_get\",\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#19c53b21c19fc193b070281baa9e585d26cec91c", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 322 | Lines Deleted: 18 | Files Changed: 4 | Hunks: 11 | Methods Changed: 9 | Complexity Δ (Sum/Max): 8/3 | Churn Δ: 340 | Churn Cumulative: 1146 | Contributors (this commit): 8 | Commits (past 90d): 11 | Contributors (cumulative): 11 | DMM Complexity: 0.7619047619047619\n\nDIFF:\n@@ -80,15 +80,11 @@ def get_openapi_security_definitions(flat_dependant: Dependant) -> Tuple[Dict, L\n \n def get_openapi_operation_parameters(\n     all_route_params: Sequence[Field]\n-) -> Tuple[Dict[str, Dict], List[Dict[str, Any]]]:\n-    definitions: Dict[str, Dict] = {}\n+) -> List[Dict[str, Any]]:\n     parameters = []\n     for param in all_route_params:\n         schema = param.schema\n         schema = cast(Param, schema)\n-        if \"ValidationError\" not in definitions:\n-            definitions[\"ValidationError\"] = validation_error_definition\n-            definitions[\"HTTPValidationError\"] = validation_error_response_definition\n         parameter = {\n             \"name\": param.alias,\n             \"in\": schema.in_.value,\n@@ -100,7 +96,7 @@ def get_openapi_operation_parameters(\n         if schema.deprecated:\n             parameter[\"deprecated\"] = schema.deprecated\n         parameters.append(parameter)\n-    return definitions, parameters\n+    return parameters\n \n \n def get_openapi_operation_request_body(\n@@ -168,10 +164,7 @@ def get_openapi_path(\n             if security_definitions:\n                 security_schemes.update(security_definitions)\n             all_route_params = get_openapi_params(route.dependant)\n-            validation_definitions, operation_parameters = get_openapi_operation_parameters(\n-                all_route_params=all_route_params\n-            )\n-            definitions.update(validation_definitions)\n+            operation_parameters = get_openapi_operation_parameters(all_route_params)\n             parameters.extend(operation_parameters)\n             if parameters:\n                 operation[\"parameters\"] = parameters\n@@ -181,11 +174,6 @@ def get_openapi_path(\n                 )\n                 if request_body_oai:\n                     operation[\"requestBody\"] = request_body_oai\n-                    if \"ValidationError\" not in definitions:\n-                        definitions[\"ValidationError\"] = validation_error_definition\n-                        definitions[\n-                            \"HTTPValidationError\"\n-                        ] = validation_error_response_definition\n             if route.responses:\n                 for (additional_status_code, response) in route.responses.items():\n                     assert isinstance(\n@@ -197,7 +185,7 @@ def get_openapi_path(\n                             field, model_name_map=model_name_map, ref_prefix=REF_PREFIX\n                         )\n                         response.setdefault(\"content\", {}).setdefault(\n-                            \"application/json\", {}\n+                            route.response_class.media_type, {}\n                         )[\"schema\"] = response_schema\n                     status_text: Optional[str] = status_code_ranges.get(\n                         str(additional_status_code).upper()\n@@ -228,8 +216,15 @@ def get_openapi_path(\n             ).setdefault(\"content\", {}).setdefault(route.response_class.media_type, {})[\n                 \"schema\"\n             ] = response_schema\n-            if all_route_params or route.body_field:\n-                operation[\"responses\"][str(HTTP_422_UNPROCESSABLE_ENTITY)] = {\n+\n+            http422 = str(HTTP_422_UNPROCESSABLE_ENTITY)\n+            if (all_route_params or route.body_field) and not any(\n+                [\n+                    status in operation[\"responses\"]\n+                    for status in [http422, \"4xx\", \"default\"]\n+                ]\n+            ):\n+                operation[\"responses\"][http422] = {\n                     \"description\": \"Validation Error\",\n                     \"content\": {\n                         \"application/json\": {\n@@ -237,6 +232,13 @@ def get_openapi_path(\n                         }\n                     },\n                 }\n+                if \"ValidationError\" not in definitions:\n+                    definitions.update(\n+                        {\n+                            \"ValidationError\": validation_error_definition,\n+                            \"HTTPValidationError\": validation_error_response_definition,\n+                        }\n+                    )\n             path[method.lower()] = operation\n     return path, security_schemes, definitions\n \n\n@@ -0,0 +1,100 @@\n+import typing\n+\n+from fastapi import FastAPI\n+from pydantic import BaseModel\n+from starlette.responses import JSONResponse\n+from starlette.testclient import TestClient\n+\n+app = FastAPI()\n+\n+\n+class JsonApiResponse(JSONResponse):\n+    media_type = \"application/vnd.api+json\"\n+\n+\n+class Error(BaseModel):\n+    status: str\n+    title: str\n+\n+\n+class JsonApiError(BaseModel):\n+    errors: typing.List[Error]\n+\n+\n+@app.get(\n+    \"/a/{id}\",\n+    response_class=JsonApiResponse,\n+    responses={422: {\"description\": \"Error\", \"model\": JsonApiError}},\n+)\n+async def a(id):\n+    pass  # pragma: no cover\n+\n+\n+openapi_schema = {\n+    \"openapi\": \"3.0.2\",\n+    \"info\": {\"title\": \"Fast API\", \"version\": \"0.1.0\"},\n+    \"paths\": {\n+        \"/a/{id}\": {\n+            \"get\": {\n+                \"responses\": {\n+                    \"422\": {\n+                        \"description\": \"Error\",\n+                        \"content\": {\n+                            \"application/vnd.api+json\": {\n+                                \"schema\": {\"$ref\": \"#/components/schemas/JsonApiError\"}\n+                            }\n+                        },\n+                    },\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\"application/vnd.api+json\": {\"schema\": {}}},\n+                    },\n+                },\n+                \"summary\": \"A\",\n+                \"operationId\": \"a_a__id__get\",\n+                \"parameters\": [\n+                    {\n+                        \"required\": True,\n+                        \"schema\": {\"title\": \"Id\"},\n+                        \"name\": \"id\",\n+                        \"in\": \"path\",\n+                    }\n+                ],\n+            }\n+        }\n+    },\n+    \"components\": {\n+        \"schemas\": {\n+            \"Error\": {\n+                \"title\": \"Error\",\n+                \"required\": [\"status\", \"title\"],\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"status\": {\"title\": \"Status\", \"type\": \"string\"},\n+                    \"title\": {\"title\": \"Title\", \"type\": \"string\"},\n+                },\n+            },\n+            \"JsonApiError\": {\n+                \"title\": \"JsonApiError\",\n+                \"required\": [\"errors\"],\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"errors\": {\n+                        \"title\": \"Errors\",\n+                        \"type\": \"array\",\n+                        \"items\": {\"$ref\": \"#/components/schemas/Error\"},\n+                    }\n+                },\n+            },\n+        }\n+    },\n+}\n+\n+\n+client = TestClient(app)\n+\n+\n+def test_openapi_schema():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200\n+    assert response.json() == openapi_schema\n\n@@ -0,0 +1,85 @@\n+from fastapi import FastAPI\n+from starlette.testclient import TestClient\n+\n+app = FastAPI()\n+\n+\n+@app.get(\"/a/{id}\")\n+async def a(id):\n+    pass  # pragma: no cover\n+\n+\n+openapi_schema = {\n+    \"openapi\": \"3.0.2\",\n+    \"info\": {\"title\": \"Fast API\", \"version\": \"0.1.0\"},\n+    \"paths\": {\n+        \"/a/{id}\": {\n+            \"get\": {\n+                \"responses\": {\n+                    \"422\": {\n+                        \"description\": \"Validation Error\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\n+                                    \"$ref\": \"#/components/schemas/HTTPValidationError\"\n+                                }\n+                            }\n+                        },\n+                    },\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                    },\n+                },\n+                \"summary\": \"A\",\n+                \"operationId\": \"a_a__id__get\",\n+                \"parameters\": [\n+                    {\n+                        \"required\": True,\n+                        \"schema\": {\"title\": \"Id\"},\n+                        \"name\": \"id\",\n+                        \"in\": \"path\",\n+                    }\n+                ],\n+            }\n+        }\n+    },\n+    \"components\": {\n+        \"schemas\": {\n+            \"ValidationError\": {\n+                \"title\": \"ValidationError\",\n+                \"required\": [\"loc\", \"msg\", \"type\"],\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"loc\": {\n+                        \"title\": \"Location\",\n+                        \"type\": \"array\",\n+                        \"items\": {\"type\": \"string\"},\n+                    },\n+                    \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n+                    \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n+                },\n+            },\n+            \"HTTPValidationError\": {\n+                \"title\": \"HTTPValidationError\",\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"detail\": {\n+                        \"title\": \"Detail\",\n+                        \"type\": \"array\",\n+                        \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n+                    }\n+                },\n+            },\n+        }\n+    },\n+}\n+\n+\n+client = TestClient(app)\n+\n+\n+def test_openapi_schema():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200\n+    assert response.json() == openapi_schema\n\n@@ -0,0 +1,117 @@\n+import typing\n+\n+from fastapi import FastAPI\n+from pydantic import BaseModel\n+from starlette.responses import JSONResponse\n+from starlette.testclient import TestClient\n+\n+app = FastAPI()\n+\n+\n+class JsonApiResponse(JSONResponse):\n+    media_type = \"application/vnd.api+json\"\n+\n+\n+class Error(BaseModel):\n+    status: str\n+    title: str\n+\n+\n+class JsonApiError(BaseModel):\n+    errors: typing.List[Error]\n+\n+\n+@app.get(\n+    \"/a\",\n+    response_class=JsonApiResponse,\n+    responses={500: {\"description\": \"Error\", \"model\": JsonApiError}},\n+)\n+async def a():\n+    pass  # pragma: no cover\n+\n+\n+@app.get(\"/b\", responses={500: {\"description\": \"Error\", \"model\": Error}})\n+async def b():\n+    pass  # pragma: no cover\n+\n+\n+openapi_schema = {\n+    \"openapi\": \"3.0.2\",\n+    \"info\": {\"title\": \"Fast API\", \"version\": \"0.1.0\"},\n+    \"paths\": {\n+        \"/a\": {\n+            \"get\": {\n+                \"responses\": {\n+                    \"500\": {\n+                        \"description\": \"Error\",\n+                        \"content\": {\n+                            \"application/vnd.api+json\": {\n+                                \"schema\": {\"$ref\": \"#/components/schemas/JsonApiError\"}\n+                            }\n+                        },\n+                    },\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\"application/vnd.api+json\": {\"schema\": {}}},\n+                    },\n+                },\n+                \"summary\": \"A\",\n+                \"operationId\": \"a_a_get\",\n+            }\n+        },\n+        \"/b\": {\n+            \"get\": {\n+                \"responses\": {\n+                    \"500\": {\n+                        \"description\": \"Error\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\"$ref\": \"#/components/schemas/Error\"}\n+                            }\n+                        },\n+                    },\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                    },\n+                },\n+                \"summary\": \"B\",\n+                \"operationId\": \"b_b_get\",\n+            }\n+        },\n+    },\n+    \"components\": {\n+        \"schemas\": {\n+            \"Error\": {\n+                \"title\": \"Error\",\n+                \"required\": [\"status\", \"title\"],\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"status\": {\"title\": \"Status\", \"type\": \"string\"},\n+                    \"title\": {\"title\": \"Title\", \"type\": \"string\"},\n+                },\n+            },\n+            \"JsonApiError\": {\n+                \"title\": \"JsonApiError\",\n+                \"required\": [\"errors\"],\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"errors\": {\n+                        \"title\": \"Errors\",\n+                        \"type\": \"array\",\n+                        \"items\": {\"$ref\": \"#/components/schemas/Error\"},\n+                    }\n+                },\n+            },\n+        }\n+    },\n+}\n+\n+\n+client = TestClient(app)\n+\n+\n+def test_openapi_schema():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200\n+    assert response.json() == openapi_schema\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
