{"custom_id": "flask#7e8f1053bb07f4f73914b5784a87de6dcaea6bcb", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 47 | Contributors (this commit): 1 | Commits (past 90d): 4 | Contributors (cumulative): 1 | DMM Complexity: None\n\nDIFF:\n@@ -111,7 +111,7 @@ class TestAppContext(TestFlask):\n         c = app.test_client()\n         res = c.get('/')\n         assert res.status_code == 200\n-        assert res.data == u''\n+        assert res.data == b''\n         assert called == ['request', 'app']\n \n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#e77bc2d86c215ae0d86981630450988407728c5d", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 13 | Lines Deleted: 21 | Files Changed: 1 | Hunks: 13 | Methods Changed: 19 | Complexity Δ (Sum/Max): -1/0 | Churn Δ: 34 | Churn Cumulative: 76 | Contributors (this commit): 1 | Commits (past 90d): 4 | Contributors (cumulative): 1 | DMM Complexity: 0.0\n\nDIFF:\n@@ -17,9 +17,7 @@ import unittest\n from tests import TestFlask\n from werkzeug.http import parse_set_header\n \n-class TestView(TestFlask):\n-\n-    def common_test(self, app):\n+def common_test(app):\n     c = app.test_client()\n \n     assert c.get('/').data == b'GET'\n@@ -28,7 +26,7 @@ class TestView(TestFlask):\n     meths = parse_set_header(c.open('/', method='OPTIONS').headers['Allow'])\n     assert sorted(meths) == ['GET', 'HEAD', 'OPTIONS', 'POST']\n \n-    def test_basic_view(self):\n+def test_basic_view():\n     app = flask.Flask(__name__)\n \n     class Index(flask.views.View):\n@@ -37,9 +35,9 @@ class TestView(TestFlask):\n             return flask.request.method\n \n     app.add_url_rule('/', view_func=Index.as_view('index'))\n-        self.common_test(app)\n+    common_test(app)\n \n-    def test_method_based_view(self):\n+def test_method_based_view():\n     app = flask.Flask(__name__)\n \n     class Index(flask.views.MethodView):\n@@ -50,9 +48,9 @@ class TestView(TestFlask):\n \n     app.add_url_rule('/', view_func=Index.as_view('index'))\n \n-        self.common_test(app)\n+    common_test(app)\n \n-    def test_view_patching(self):\n+def test_view_patching():\n     app = flask.Flask(__name__)\n \n     class Index(flask.views.MethodView):\n@@ -70,9 +68,9 @@ class TestView(TestFlask):\n     view = Index.as_view('index')\n     view.view_class = Other\n     app.add_url_rule('/', view_func=view)\n-        self.common_test(app)\n+    common_test(app)\n \n-    def test_view_inheritance(self):\n+def test_view_inheritance():\n     app = flask.Flask(__name__)\n \n     class Index(flask.views.MethodView):\n@@ -91,7 +89,7 @@ class TestView(TestFlask):\n     meths = parse_set_header(c.open('/', method='OPTIONS').headers['Allow'])\n     assert sorted(meths) == ['DELETE', 'GET', 'HEAD', 'OPTIONS', 'POST']\n \n-    def test_view_decorators(self):\n+def test_view_decorators():\n     app = flask.Flask(__name__)\n \n     def add_x_parachute(f):\n@@ -112,7 +110,7 @@ class TestView(TestFlask):\n     assert rv.headers['X-Parachute'] == 'awesome'\n     assert rv.data == b'Awesome'\n \n-    def test_implicit_head(self):\n+def test_implicit_head():\n     app = flask.Flask(__name__)\n \n     class Index(flask.views.MethodView):\n@@ -130,7 +128,7 @@ class TestView(TestFlask):\n     assert rv.data == b''\n     assert rv.headers['X-Method'] == 'HEAD'\n \n-    def test_explicit_head(self):\n+def test_explicit_head():\n     app = flask.Flask(__name__)\n \n     class Index(flask.views.MethodView):\n@@ -147,7 +145,7 @@ class TestView(TestFlask):\n     assert rv.data == b''\n     assert rv.headers['X-Method'] == 'HEAD'\n \n-    def test_endpoint_override(self):\n+def test_endpoint_override():\n     app = flask.Flask(__name__)\n     app.debug = True\n \n@@ -162,10 +160,4 @@ class TestView(TestFlask):\n         app.add_url_rule('/', view_func=Index.as_view('index'))\n \n     # But these tests should still pass. We just log a warning.\n-        self.common_test(app)\n-\n-\n-def suite():\n-    suite = unittest.TestSuite()\n-    suite.addTest(unittest.makeSuite(TestView))\n-    return suite\n+    common_test(app)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#d0cf5ef394264faf87729c06517c79b9a4b6f8dd", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 88 | Lines Deleted: 111 | Files Changed: 6 | Hunks: 67 | Methods Changed: 118 | Complexity Δ (Sum/Max): -5/4 | Churn Δ: 199 | Churn Cumulative: 773 | Contributors (this commit): 1 | Commits (past 90d): 24 | Contributors (cumulative): 6 | DMM Complexity: 0.0\n\nDIFF:\n@@ -90,25 +90,6 @@ class TestFlask(object):\n     consistency.\n     \"\"\"\n \n-    @pytest.fixture(autouse=True)\n-    def setup_path(self, monkeypatch):\n-        monkeypatch.syspath_prepend(\n-            os.path.abspath(os.path.join(\n-                os.path.dirname(__file__), 'test_apps'))\n-        )\n-\n-    @pytest.fixture(autouse=True)\n-    def leak_detector(self, request):\n-        request.addfinalizer(self.ensure_clean_request_context)\n-\n-    def ensure_clean_request_context(self):\n-        # make sure we're not leaking a request context since we are\n-        # testing flask internally in debug mode in a few cases\n-        leaks = []\n-        while flask._request_ctx_stack.top is not None:\n-            leaks.append(flask._request_ctx_stack.pop())\n-        assert leaks == []\n-\n     def setup_method(self, method):\n         self.setup()\n \n\n@@ -6,12 +6,34 @@\n     :copyright: (c) 2014 by the Flask Team, see AUTHORS for more details.\n     :license: BSD, see LICENSE for more details.\n \"\"\"\n+import flask\n+import os\n+import sys\n import pkgutil\n import pytest\n-import sys\n import textwrap\n \n \n+@pytest.fixture(autouse=True)\n+def setup_path(monkeypatch):\n+    monkeypatch.syspath_prepend(\n+        os.path.abspath(os.path.join(\n+            os.path.dirname(__file__), 'test_apps'))\n+    )\n+\n+@pytest.fixture(autouse=True)\n+def leak_detector(request):\n+    def ensure_clean_request_context():\n+        # make sure we're not leaking a request context since we are\n+        # testing flask internally in debug mode in a few cases\n+        leaks = []\n+        while flask._request_ctx_stack.top is not None:\n+            leaks.append(flask._request_ctx_stack.pop())\n+        assert leaks == []\n+    request.addfinalizer(ensure_clean_request_context)\n+\n+\n+\n @pytest.fixture(params=(True, False))\n def limit_loader(request, monkeypatch):\n     \"\"\"Patch pkgutil.get_loader to give loader without get_filename or archive.\n\n@@ -16,9 +16,7 @@ import unittest\n from tests import TestFlask\n \n \n-class TestAppContext(TestFlask):\n-\n-    def test_basic_url_generation(self):\n+def test_basic_url_generation():\n     app = flask.Flask(__name__)\n     app.config['SERVER_NAME'] = 'localhost'\n     app.config['PREFERRED_URL_SCHEME'] = 'https'\n@@ -31,29 +29,29 @@ class TestAppContext(TestFlask):\n         rv = flask.url_for('index')\n         assert rv == 'https://localhost/'\n \n-    def test_url_generation_requires_server_name(self):\n+def test_url_generation_requires_server_name():\n     app = flask.Flask(__name__)\n     with app.app_context():\n         with pytest.raises(RuntimeError):\n             flask.url_for('index')\n \n-    def test_url_generation_without_context_fails(self):\n+def test_url_generation_without_context_fails():\n     with pytest.raises(RuntimeError):\n         flask.url_for('index')\n \n-    def test_request_context_means_app_context(self):\n+def test_request_context_means_app_context():\n     app = flask.Flask(__name__)\n     with app.test_request_context():\n         assert flask.current_app._get_current_object() == app\n     assert flask._app_ctx_stack.top == None\n \n-    def test_app_context_provides_current_app(self):\n+def test_app_context_provides_current_app():\n     app = flask.Flask(__name__)\n     with app.app_context():\n         assert flask.current_app._get_current_object() == app\n     assert flask._app_ctx_stack.top == None\n \n-    def test_app_tearing_down(self):\n+def test_app_tearing_down():\n     cleanup_stuff = []\n     app = flask.Flask(__name__)\n     @app.teardown_appcontext\n@@ -65,7 +63,7 @@ class TestAppContext(TestFlask):\n \n     assert cleanup_stuff == [None]\n \n-    def test_app_tearing_down_with_previous_exception(self):\n+def test_app_tearing_down_with_previous_exception():\n     cleanup_stuff = []\n     app = flask.Flask(__name__)\n     @app.teardown_appcontext\n@@ -82,7 +80,7 @@ class TestAppContext(TestFlask):\n \n     assert cleanup_stuff == [None]\n \n-    def test_custom_app_ctx_globals_class(self):\n+def test_custom_app_ctx_globals_class():\n     class CustomRequestGlobals(object):\n         def __init__(self):\n             self.spam = 'eggs'\n@@ -91,7 +89,7 @@ class TestAppContext(TestFlask):\n     with app.app_context():\n         assert flask.render_template_string('{{ g.spam }}') == 'eggs'\n \n-    def test_context_refcounts(self):\n+def test_context_refcounts():\n     called = []\n     app = flask.Flask(__name__)\n     @app.teardown_request\n@@ -113,9 +111,3 @@ class TestAppContext(TestFlask):\n     assert res.status_code == 200\n     assert res.data == b''\n     assert called == ['request', 'app']\n-\n-\n-def suite():\n-    suite = unittest.TestSuite()\n-    suite.addTest(unittest.makeSuite(TestAppContext))\n-    return suite\n\n@@ -20,9 +20,9 @@ except ImportError:\n from tests import TestFlask\n from flask._compat import PY2\n \n-class TestExtImportHook(TestFlask):\n \n-    def setup(self):\n+@pytest.fixture(autouse=True)\n+def importhook_setup(monkeypatch, request):\n     # we clear this out for various reasons.  The most important one is\n     # that a real flaskext could be in there which would disable our\n     # fake package.  Secondly we want to make sure that the flaskext\n@@ -32,7 +32,7 @@ class TestExtImportHook(TestFlask):\n             entry.startswith('flask_') or\n             entry.startswith('flaskext.') or\n             entry == 'flaskext') and value is not None:\n-                sys.modules.pop(entry, None)\n+            monkeypatch.delitem(sys.modules, entry)\n     from flask import ext\n     reload_module(ext)\n \n@@ -45,71 +45,73 @@ class TestExtImportHook(TestFlask):\n             import_hooks += 1\n     assert import_hooks == 1\n \n-    def teardown(self):\n+    def teardown():\n         from flask import ext\n         for key in ext.__dict__:\n             assert '.' not in key\n \n-    def test_flaskext_new_simple_import_normal(self):\n+    request.addfinalizer(teardown)\n+\n+def test_flaskext_new_simple_import_normal():\n     from flask.ext.newext_simple import ext_id\n     assert ext_id == 'newext_simple'\n \n-    def test_flaskext_new_simple_import_module(self):\n+def test_flaskext_new_simple_import_module():\n     from flask.ext import newext_simple\n     assert newext_simple.ext_id == 'newext_simple'\n     assert newext_simple.__name__ == 'flask_newext_simple'\n \n-    def test_flaskext_new_package_import_normal(self):\n+def test_flaskext_new_package_import_normal():\n     from flask.ext.newext_package import ext_id\n     assert ext_id == 'newext_package'\n \n-    def test_flaskext_new_package_import_module(self):\n+def test_flaskext_new_package_import_module():\n     from flask.ext import newext_package\n     assert newext_package.ext_id == 'newext_package'\n     assert newext_package.__name__ == 'flask_newext_package'\n \n-    def test_flaskext_new_package_import_submodule_function(self):\n+def test_flaskext_new_package_import_submodule_function():\n     from flask.ext.newext_package.submodule import test_function\n     assert test_function() == 42\n \n-    def test_flaskext_new_package_import_submodule(self):\n+def test_flaskext_new_package_import_submodule():\n     from flask.ext.newext_package import submodule\n     assert submodule.__name__ == 'flask_newext_package.submodule'\n     assert submodule.test_function() == 42\n \n-    def test_flaskext_old_simple_import_normal(self):\n+def test_flaskext_old_simple_import_normal():\n     from flask.ext.oldext_simple import ext_id\n     assert ext_id == 'oldext_simple'\n \n-    def test_flaskext_old_simple_import_module(self):\n+def test_flaskext_old_simple_import_module():\n     from flask.ext import oldext_simple\n     assert oldext_simple.ext_id == 'oldext_simple'\n     assert oldext_simple.__name__ == 'flaskext.oldext_simple'\n \n-    def test_flaskext_old_package_import_normal(self):\n+def test_flaskext_old_package_import_normal():\n     from flask.ext.oldext_package import ext_id\n     assert ext_id == 'oldext_package'\n \n-    def test_flaskext_old_package_import_module(self):\n+def test_flaskext_old_package_import_module():\n     from flask.ext import oldext_package\n     assert oldext_package.ext_id == 'oldext_package'\n     assert oldext_package.__name__ == 'flaskext.oldext_package'\n \n-    def test_flaskext_old_package_import_submodule(self):\n+def test_flaskext_old_package_import_submodule():\n     from flask.ext.oldext_package import submodule\n     assert submodule.__name__ == 'flaskext.oldext_package.submodule'\n     assert submodule.test_function() == 42\n \n-    def test_flaskext_old_package_import_submodule_function(self):\n+def test_flaskext_old_package_import_submodule_function():\n     from flask.ext.oldext_package.submodule import test_function\n     assert test_function() == 42\n \n-    def test_flaskext_broken_package_no_module_caching(self):\n+def test_flaskext_broken_package_no_module_caching():\n     for x in range(2):\n         with pytest.raises(ImportError):\n             import flask.ext.broken\n \n-    def test_no_error_swallowing(self):\n+def test_no_error_swallowing():\n     try:\n         import flask.ext.broken\n     except ImportError:\n@@ -131,9 +133,5 @@ class TestExtImportHook(TestFlask):\n         import os.path\n         assert os.path.join('flask_broken', '__init__.py') in \\\n             next.tb_frame.f_code.co_filename\n-\n-\n-def suite():\n-    suite = unittest.TestSuite()\n-    suite.addTest(unittest.makeSuite(TestExtImportHook))\n-    return suite\n+    else:\n+        1/0  # XXX\n\n@@ -16,9 +16,7 @@ from tests import TestFlask\n from flask._compat import StringIO\n \n \n-class TestFlaskSubclassing(TestFlask):\n-\n-    def test_suppressed_exception_logging(self):\n+def test_suppressed_exception_logging():\n     class SuppressedFlask(flask.Flask):\n         def log_exception(self, exc_info):\n             pass\n@@ -38,9 +36,3 @@ class TestFlaskSubclassing(TestFlask):\n \n     err = out.getvalue()\n     assert err == ''\n-\n-\n-def suite():\n-    suite = unittest.TestSuite()\n-    suite.addTest(unittest.makeSuite(TestFlaskSubclassing))\n-    return suite\n\n@@ -9,6 +9,8 @@\n     :license: BSD, see LICENSE for more details.\n \"\"\"\n \n+import pytest\n+\n import flask\n import unittest\n import logging\n@@ -17,9 +19,7 @@ from jinja2 import TemplateNotFound\n from tests import TestFlask\n \n \n-class TestTemplating(TestFlask):\n-\n-    def test_context_processing(self):\n+def test_context_processing():\n     app = flask.Flask(__name__)\n     @app.context_processor\n     def context_processor():\n@@ -30,7 +30,7 @@ class TestTemplating(TestFlask):\n     rv = app.test_client().get('/')\n     assert rv.data == b'<p>23|42'\n \n-    def test_original_win(self):\n+def test_original_win():\n     app = flask.Flask(__name__)\n     @app.route('/')\n     def index():\n@@ -38,7 +38,7 @@ class TestTemplating(TestFlask):\n     rv = app.test_client().get('/')\n     assert rv.data == b'42'\n \n-    def test_request_less_rendering(self):\n+def test_request_less_rendering():\n     app = flask.Flask(__name__)\n     app.config['WORLD_NAME'] = 'Special World'\n     @app.context_processor\n@@ -50,7 +50,7 @@ class TestTemplating(TestFlask):\n                                           '{{ foo }}')\n         assert rv == 'Hello Special World 42'\n \n-    def test_standard_context(self):\n+def test_standard_context():\n     app = flask.Flask(__name__)\n     app.secret_key = 'development key'\n     @app.route('/')\n@@ -66,7 +66,7 @@ class TestTemplating(TestFlask):\n     rv = app.test_client().get('/?foo=42')\n     assert rv.data.split() == [b'42', b'23', b'False', b'aha']\n \n-    def test_escaping(self):\n+def test_escaping():\n     text = '<p>Hello World!'\n     app = flask.Flask(__name__)\n     @app.route('/')\n@@ -83,7 +83,7 @@ class TestTemplating(TestFlask):\n         b'<p>Hello World!'\n     ]\n \n-    def test_no_escaping(self):\n+def test_no_escaping():\n     app = flask.Flask(__name__)\n     with app.test_request_context():\n         assert flask.render_template_string(\n@@ -91,13 +91,13 @@ class TestTemplating(TestFlask):\n         assert flask.render_template('mail.txt', foo='<test>') == \\\n             '<test> Mail'\n \n-    def test_macros(self):\n+def test_macros():\n     app = flask.Flask(__name__)\n     with app.test_request_context():\n         macro = flask.get_template_attribute('_macro.html', 'hello')\n         assert macro('World') == 'Hello World!'\n \n-    def test_template_filter(self):\n+def test_template_filter():\n     app = flask.Flask(__name__)\n     @app.template_filter()\n     def my_reverse(s):\n@@ -106,7 +106,7 @@ class TestTemplating(TestFlask):\n     assert app.jinja_env.filters['my_reverse'] == my_reverse\n     assert app.jinja_env.filters['my_reverse']('abcd') == 'dcba'\n \n-    def test_add_template_filter(self):\n+def test_add_template_filter():\n     app = flask.Flask(__name__)\n     def my_reverse(s):\n         return s[::-1]\n@@ -115,7 +115,7 @@ class TestTemplating(TestFlask):\n     assert app.jinja_env.filters['my_reverse'] == my_reverse\n     assert app.jinja_env.filters['my_reverse']('abcd') == 'dcba'\n \n-    def test_template_filter_with_name(self):\n+def test_template_filter_with_name():\n     app = flask.Flask(__name__)\n     @app.template_filter('strrev')\n     def my_reverse(s):\n@@ -124,7 +124,7 @@ class TestTemplating(TestFlask):\n     assert app.jinja_env.filters['strrev'] == my_reverse\n     assert app.jinja_env.filters['strrev']('abcd') == 'dcba'\n \n-    def test_add_template_filter_with_name(self):\n+def test_add_template_filter_with_name():\n     app = flask.Flask(__name__)\n     def my_reverse(s):\n         return s[::-1]\n@@ -133,7 +133,7 @@ class TestTemplating(TestFlask):\n     assert app.jinja_env.filters['strrev'] == my_reverse\n     assert app.jinja_env.filters['strrev']('abcd') == 'dcba'\n \n-    def test_template_filter_with_template(self):\n+def test_template_filter_with_template():\n     app = flask.Flask(__name__)\n     @app.template_filter()\n     def super_reverse(s):\n@@ -144,7 +144,7 @@ class TestTemplating(TestFlask):\n     rv = app.test_client().get('/')\n     assert rv.data == b'dcba'\n \n-    def test_add_template_filter_with_template(self):\n+def test_add_template_filter_with_template():\n     app = flask.Flask(__name__)\n     def super_reverse(s):\n         return s[::-1]\n@@ -155,7 +155,7 @@ class TestTemplating(TestFlask):\n     rv = app.test_client().get('/')\n     assert rv.data == b'dcba'\n \n-    def test_template_filter_with_name_and_template(self):\n+def test_template_filter_with_name_and_template():\n     app = flask.Flask(__name__)\n     @app.template_filter('super_reverse')\n     def my_reverse(s):\n@@ -166,7 +166,7 @@ class TestTemplating(TestFlask):\n     rv = app.test_client().get('/')\n     assert rv.data == b'dcba'\n \n-    def test_add_template_filter_with_name_and_template(self):\n+def test_add_template_filter_with_name_and_template():\n     app = flask.Flask(__name__)\n     def my_reverse(s):\n         return s[::-1]\n@@ -177,7 +177,7 @@ class TestTemplating(TestFlask):\n     rv = app.test_client().get('/')\n     assert rv.data == b'dcba'\n \n-    def test_template_test(self):\n+def test_template_test():\n     app = flask.Flask(__name__)\n     @app.template_test()\n     def boolean(value):\n@@ -186,7 +186,7 @@ class TestTemplating(TestFlask):\n     assert app.jinja_env.tests['boolean'] == boolean\n     assert app.jinja_env.tests['boolean'](False)\n \n-    def test_add_template_test(self):\n+def test_add_template_test():\n     app = flask.Flask(__name__)\n     def boolean(value):\n         return isinstance(value, bool)\n@@ -195,7 +195,7 @@ class TestTemplating(TestFlask):\n     assert app.jinja_env.tests['boolean'] == boolean\n     assert app.jinja_env.tests['boolean'](False)\n \n-    def test_template_test_with_name(self):\n+def test_template_test_with_name():\n     app = flask.Flask(__name__)\n     @app.template_test('boolean')\n     def is_boolean(value):\n@@ -204,7 +204,7 @@ class TestTemplating(TestFlask):\n     assert app.jinja_env.tests['boolean'] == is_boolean\n     assert app.jinja_env.tests['boolean'](False)\n \n-    def test_add_template_test_with_name(self):\n+def test_add_template_test_with_name():\n     app = flask.Flask(__name__)\n     def is_boolean(value):\n         return isinstance(value, bool)\n@@ -213,7 +213,7 @@ class TestTemplating(TestFlask):\n     assert app.jinja_env.tests['boolean'] == is_boolean\n     assert app.jinja_env.tests['boolean'](False)\n \n-    def test_template_test_with_template(self):\n+def test_template_test_with_template():\n     app = flask.Flask(__name__)\n     @app.template_test()\n     def boolean(value):\n@@ -224,7 +224,7 @@ class TestTemplating(TestFlask):\n     rv = app.test_client().get('/')\n     assert b'Success!' in rv.data\n \n-    def test_add_template_test_with_template(self):\n+def test_add_template_test_with_template():\n     app = flask.Flask(__name__)\n     def boolean(value):\n         return isinstance(value, bool)\n@@ -235,7 +235,7 @@ class TestTemplating(TestFlask):\n     rv = app.test_client().get('/')\n     assert b'Success!' in rv.data\n \n-    def test_template_test_with_name_and_template(self):\n+def test_template_test_with_name_and_template():\n     app = flask.Flask(__name__)\n     @app.template_test('boolean')\n     def is_boolean(value):\n@@ -246,7 +246,7 @@ class TestTemplating(TestFlask):\n     rv = app.test_client().get('/')\n     assert b'Success!' in rv.data\n \n-    def test_add_template_test_with_name_and_template(self):\n+def test_add_template_test_with_name_and_template():\n     app = flask.Flask(__name__)\n     def is_boolean(value):\n         return isinstance(value, bool)\n@@ -257,7 +257,7 @@ class TestTemplating(TestFlask):\n     rv = app.test_client().get('/')\n     assert b'Success!' in rv.data\n \n-    def test_add_template_global(self):\n+def test_add_template_global():\n     app = flask.Flask(__name__)\n     @app.template_global()\n     def get_stuff():\n@@ -269,7 +269,7 @@ class TestTemplating(TestFlask):\n         rv = flask.render_template_string('{{ get_stuff() }}')\n         assert rv == '42'\n \n-    def test_custom_template_loader(self):\n+def test_custom_template_loader():\n     class MyFlask(flask.Flask):\n         def create_global_jinja_loader(self):\n             from jinja2 import DictLoader\n@@ -282,7 +282,7 @@ class TestTemplating(TestFlask):\n     rv = c.get('/')\n     assert rv.data == b'Hello Custom World!'\n \n-    def test_iterable_loader(self):\n+def test_iterable_loader():\n     app = flask.Flask(__name__)\n     @app.context_processor\n     def context_processor():\n@@ -298,7 +298,7 @@ class TestTemplating(TestFlask):\n     rv = app.test_client().get('/')\n     assert rv.data == b'<h1>Jameson</h1>'\n \n-    def test_templates_auto_reload(self):\n+def test_templates_auto_reload():\n     app = flask.Flask(__name__)\n     assert app.config['TEMPLATES_AUTO_RELOAD']\n     assert app.jinja_env.auto_reload\n@@ -306,7 +306,7 @@ class TestTemplating(TestFlask):\n     app.config['TEMPLATES_AUTO_RELOAD'] = False\n     assert not app.jinja_env.auto_reload\n \n-    def test_template_loader_debugging(self):\n+def test_template_loader_debugging():\n     from blueprintapp import app\n \n     called = []\n@@ -331,20 +331,12 @@ class TestTemplating(TestFlask):\n             app.logger.handlers = [_TestHandler()]\n             app.config['EXPLAIN_TEMPLATE_LOADING'] = True\n \n-                try:\n+            with pytest.raises(TemplateNotFound) as excinfo:\n                 c.get('/missing')\n-                except TemplateNotFound as e:\n-                    assert 'missing_template.html' in str(e)\n-                else:\n-                    self.fail('Expected template not found exception.')\n+\n+            assert 'missing_template.html' in str(excinfo.value)\n         finally:\n             app.logger.handlers[:] = old_handlers\n             app.config['EXPLAIN_TEMPLATE_LOADING'] = old_load_setting\n \n     assert len(called) == 1\n-\n-\n-def suite():\n-    suite = unittest.TestSuite()\n-    suite.addTest(unittest.makeSuite(TestTemplating))\n-    return suite\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#af41dbe0c479769402c46c0b99b841e781a8fa87", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 59 | Lines Deleted: 138 | Files Changed: 10 | Hunks: 62 | Methods Changed: 92 | Complexity Δ (Sum/Max): -9/0 | Churn Δ: 197 | Churn Cumulative: 2011 | Contributors (this commit): 1 | Commits (past 90d): 42 | Contributors (cumulative): 10 | DMM Complexity: 0.0\n\nDIFF:\n@@ -26,7 +26,7 @@ from werkzeug.http import parse_date\n from werkzeug.routing import BuildError\n \n \n-class TestBasicFunctionality(TestFlask):\n+class TestBasicFunctionality(object):\n \n     def test_options_work(self):\n         app = flask.Flask(__name__)\n@@ -1295,7 +1295,7 @@ class TestBasicFunctionality(TestFlask):\n             assert sorted(flask.g) == ['bar', 'foo']\n \n \n-class TestSubdomain(TestFlask):\n+class TestSubdomain(object):\n \n     def test_basic_support(self):\n         app = flask.Flask(__name__)\n\n@@ -19,9 +19,7 @@ from werkzeug.http import parse_cache_control_header\n from jinja2 import TemplateNotFound\n \n \n-class TestBlueprint(TestFlask):\n-\n-    def test_blueprint_specific_error_handling(self):\n+def test_blueprint_specific_error_handling():\n     frontend = flask.Blueprint('frontend', __name__)\n     backend = flask.Blueprint('backend', __name__)\n     sideend = flask.Blueprint('sideend', __name__)\n@@ -61,7 +59,7 @@ class TestBlueprint(TestFlask):\n     assert c.get('/backend-no').data == b'backend says no'\n     assert c.get('/what-is-a-sideend').data == b'application itself says no'\n \n-    def test_blueprint_specific_user_error_handling(self):\n+def test_blueprint_specific_user_error_handling():\n     class MyDecoratorException(Exception):\n         pass\n     class MyFunctionException(Exception):\n@@ -94,7 +92,7 @@ class TestBlueprint(TestFlask):\n     assert c.get('/decorator').data == b'boom'\n     assert c.get('/function').data == b'bam'\n \n-    def test_blueprint_url_definitions(self):\n+def test_blueprint_url_definitions():\n     bp = flask.Blueprint('test', __name__)\n \n     @bp.route('/foo', defaults={'baz': 42})\n@@ -115,7 +113,7 @@ class TestBlueprint(TestFlask):\n     assert c.get('/1/bar').data == b'23'\n     assert c.get('/2/bar').data == b'19'\n \n-    def test_blueprint_url_processors(self):\n+def test_blueprint_url_processors():\n     bp = flask.Blueprint('frontend', __name__, url_prefix='/<lang_code>')\n \n     @bp.url_defaults\n@@ -142,7 +140,7 @@ class TestBlueprint(TestFlask):\n     assert c.get('/de/').data == b'/de/about'\n     assert c.get('/de/about').data == b'/de/'\n \n-    def test_templates_and_static(self):\n+def test_templates_and_static():\n     from blueprintapp import app\n     c = app.test_client()\n \n@@ -187,7 +185,7 @@ class TestBlueprint(TestFlask):\n     with flask.Flask(__name__).test_request_context():\n         assert flask.render_template('nested/nested.txt') == 'I\\'m nested'\n \n-    def test_default_static_cache_timeout(self):\n+def test_default_static_cache_timeout():\n     app = flask.Flask(__name__)\n     class MyBlueprint(flask.Blueprint):\n         def get_send_file_max_age(self, filename):\n@@ -211,12 +209,12 @@ class TestBlueprint(TestFlask):\n     finally:\n         app.config['SEND_FILE_MAX_AGE_DEFAULT'] = max_age_default\n \n-    def test_templates_list(self):\n+def test_templates_list():\n     from blueprintapp import app\n     templates = sorted(app.jinja_env.list_templates())\n     assert templates == ['admin/index.html', 'frontend/index.html']\n \n-    def test_dotted_names(self):\n+def test_dotted_names():\n     frontend = flask.Blueprint('myapp.frontend', __name__)\n     backend = flask.Blueprint('myapp.backend', __name__)\n \n@@ -241,7 +239,7 @@ class TestBlueprint(TestFlask):\n     assert c.get('/fe2').data.strip() == b'/fe'\n     assert c.get('/be').data.strip() == b'/fe'\n \n-    def test_dotted_names_from_app(self):\n+def test_dotted_names_from_app():\n     app = flask.Flask(__name__)\n     app.testing = True\n     test = flask.Blueprint('test', __name__)\n@@ -260,7 +258,7 @@ class TestBlueprint(TestFlask):\n         rv = c.get('/')\n         assert rv.data == b'/test/'\n \n-    def test_empty_url_defaults(self):\n+def test_empty_url_defaults():\n     bp = flask.Blueprint('bp', __name__)\n \n     @bp.route('/', defaults={'page': 1})\n@@ -275,7 +273,7 @@ class TestBlueprint(TestFlask):\n     assert c.get('/').data == b'1'\n     assert c.get('/page/2').data == b'2'\n \n-    def test_route_decorator_custom_endpoint(self):\n+def test_route_decorator_custom_endpoint():\n \n     bp = flask.Blueprint('bp', __name__)\n \n@@ -309,7 +307,7 @@ class TestBlueprint(TestFlask):\n     assert c.get('/py/bar/123').data == b'bp.123'\n     assert c.get('/py/bar/foo').data == b'bp.bar_foo'\n \n-    def test_route_decorator_custom_endpoint_with_dots(self):\n+def test_route_decorator_custom_endpoint_with_dots():\n     bp = flask.Blueprint('bp', __name__)\n \n     @bp.route('/foo')\n@@ -361,7 +359,7 @@ class TestBlueprint(TestFlask):\n     rv = c.get('/py/bar/123')\n     assert rv.status_code == 404\n \n-    def test_template_filter(self):\n+def test_template_filter():\n     bp = flask.Blueprint('bp', __name__)\n     @bp.app_template_filter()\n     def my_reverse(s):\n@@ -372,7 +370,7 @@ class TestBlueprint(TestFlask):\n     assert app.jinja_env.filters['my_reverse'] == my_reverse\n     assert app.jinja_env.filters['my_reverse']('abcd') == 'dcba'\n \n-    def test_add_template_filter(self):\n+def test_add_template_filter():\n     bp = flask.Blueprint('bp', __name__)\n     def my_reverse(s):\n         return s[::-1]\n@@ -383,7 +381,7 @@ class TestBlueprint(TestFlask):\n     assert app.jinja_env.filters['my_reverse'] == my_reverse\n     assert app.jinja_env.filters['my_reverse']('abcd') == 'dcba'\n \n-    def test_template_filter_with_name(self):\n+def test_template_filter_with_name():\n     bp = flask.Blueprint('bp', __name__)\n     @bp.app_template_filter('strrev')\n     def my_reverse(s):\n@@ -394,7 +392,7 @@ class TestBlueprint(TestFlask):\n     assert app.jinja_env.filters['strrev'] == my_reverse\n     assert app.jinja_env.filters['strrev']('abcd') == 'dcba'\n \n-    def test_add_template_filter_with_name(self):\n+def test_add_template_filter_with_name():\n     bp = flask.Blueprint('bp', __name__)\n     def my_reverse(s):\n         return s[::-1]\n@@ -405,7 +403,7 @@ class TestBlueprint(TestFlask):\n     assert app.jinja_env.filters['strrev'] == my_reverse\n     assert app.jinja_env.filters['strrev']('abcd') == 'dcba'\n \n-    def test_template_filter_with_template(self):\n+def test_template_filter_with_template():\n     bp = flask.Blueprint('bp', __name__)\n     @bp.app_template_filter()\n     def super_reverse(s):\n@@ -418,7 +416,7 @@ class TestBlueprint(TestFlask):\n     rv = app.test_client().get('/')\n     assert rv.data == b'dcba'\n \n-    def test_template_filter_after_route_with_template(self):\n+def test_template_filter_after_route_with_template():\n     app = flask.Flask(__name__)\n     @app.route('/')\n     def index():\n@@ -431,7 +429,7 @@ class TestBlueprint(TestFlask):\n     rv = app.test_client().get('/')\n     assert rv.data == b'dcba'\n \n-    def test_add_template_filter_with_template(self):\n+def test_add_template_filter_with_template():\n     bp = flask.Blueprint('bp', __name__)\n     def super_reverse(s):\n         return s[::-1]\n@@ -444,7 +442,7 @@ class TestBlueprint(TestFlask):\n     rv = app.test_client().get('/')\n     assert rv.data == b'dcba'\n \n-    def test_template_filter_with_name_and_template(self):\n+def test_template_filter_with_name_and_template():\n     bp = flask.Blueprint('bp', __name__)\n     @bp.app_template_filter('super_reverse')\n     def my_reverse(s):\n@@ -457,7 +455,7 @@ class TestBlueprint(TestFlask):\n     rv = app.test_client().get('/')\n     assert rv.data == b'dcba'\n \n-    def test_add_template_filter_with_name_and_template(self):\n+def test_add_template_filter_with_name_and_template():\n     bp = flask.Blueprint('bp', __name__)\n     def my_reverse(s):\n         return s[::-1]\n@@ -470,7 +468,7 @@ class TestBlueprint(TestFlask):\n     rv = app.test_client().get('/')\n     assert rv.data == b'dcba'\n \n-    def test_template_test(self):\n+def test_template_test():\n     bp = flask.Blueprint('bp', __name__)\n     @bp.app_template_test()\n     def is_boolean(value):\n@@ -481,7 +479,7 @@ class TestBlueprint(TestFlask):\n     assert app.jinja_env.tests['is_boolean'] == is_boolean\n     assert app.jinja_env.tests['is_boolean'](False)\n \n-    def test_add_template_test(self):\n+def test_add_template_test():\n     bp = flask.Blueprint('bp', __name__)\n     def is_boolean(value):\n         return isinstance(value, bool)\n@@ -492,7 +490,7 @@ class TestBlueprint(TestFlask):\n     assert app.jinja_env.tests['is_boolean'] == is_boolean\n     assert app.jinja_env.tests['is_boolean'](False)\n \n-    def test_template_test_with_name(self):\n+def test_template_test_with_name():\n     bp = flask.Blueprint('bp', __name__)\n     @bp.app_template_test('boolean')\n     def is_boolean(value):\n@@ -503,7 +501,7 @@ class TestBlueprint(TestFlask):\n     assert app.jinja_env.tests['boolean'] == is_boolean\n     assert app.jinja_env.tests['boolean'](False)\n \n-    def test_add_template_test_with_name(self):\n+def test_add_template_test_with_name():\n     bp = flask.Blueprint('bp', __name__)\n     def is_boolean(value):\n         return isinstance(value, bool)\n@@ -514,7 +512,7 @@ class TestBlueprint(TestFlask):\n     assert app.jinja_env.tests['boolean'] == is_boolean\n     assert app.jinja_env.tests['boolean'](False)\n \n-    def test_template_test_with_template(self):\n+def test_template_test_with_template():\n     bp = flask.Blueprint('bp', __name__)\n     @bp.app_template_test()\n     def boolean(value):\n@@ -527,7 +525,7 @@ class TestBlueprint(TestFlask):\n     rv = app.test_client().get('/')\n     assert b'Success!' in rv.data\n \n-    def test_template_test_after_route_with_template(self):\n+def test_template_test_after_route_with_template():\n     app = flask.Flask(__name__)\n     @app.route('/')\n     def index():\n@@ -540,7 +538,7 @@ class TestBlueprint(TestFlask):\n     rv = app.test_client().get('/')\n     assert b'Success!' in rv.data\n \n-    def test_add_template_test_with_template(self):\n+def test_add_template_test_with_template():\n     bp = flask.Blueprint('bp', __name__)\n     def boolean(value):\n         return isinstance(value, bool)\n@@ -553,7 +551,7 @@ class TestBlueprint(TestFlask):\n     rv = app.test_client().get('/')\n     assert b'Success!' in rv.data\n \n-    def test_template_test_with_name_and_template(self):\n+def test_template_test_with_name_and_template():\n     bp = flask.Blueprint('bp', __name__)\n     @bp.app_template_test('boolean')\n     def is_boolean(value):\n@@ -566,7 +564,7 @@ class TestBlueprint(TestFlask):\n     rv = app.test_client().get('/')\n     assert b'Success!' in rv.data\n \n-    def test_add_template_test_with_name_and_template(self):\n+def test_add_template_test_with_name_and_template():\n     bp = flask.Blueprint('bp', __name__)\n     def is_boolean(value):\n         return isinstance(value, bool)\n@@ -578,8 +576,3 @@ class TestBlueprint(TestFlask):\n         return flask.render_template('template_test.html', value=False)\n     rv = app.test_client().get('/')\n     assert b'Success!' in rv.data\n-\n-def suite():\n-    suite = unittest.TestSuite()\n-    suite.addTest(unittest.makeSuite(TestBlueprint))\n-    return suite\n\n@@ -27,7 +27,7 @@ TEST_KEY = 'foo'\n SECRET_KEY = 'devkey'\n \n \n-class TestConfig(TestFlask):\n+class TestConfig(object):\n \n     def common_object_test(self, app):\n         assert app.secret_key == 'devkey'\n@@ -181,7 +181,7 @@ class TestConfig(TestFlask):\n         assert 'bar stuff 2' == bar_options['STUFF_2']\n \n \n-class TestInstance(TestFlask):\n+class TestInstance(object):\n     def test_explicit_instance_paths(self, apps_tmpdir):\n         with pytest.raises(ValueError) as excinfo:\n             flask.Flask(__name__, instance_path='instance')\n\n@@ -3,7 +3,7 @@\n     tests.deprecations\n     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n \n-    Tests deprecation support.\n+    Tests deprecation support. Not used currently.\n \n     :copyright: (c) 2014 by Armin Ronacher.\n     :license: BSD, see LICENSE for more details.\n@@ -12,13 +12,3 @@\n import flask\n import unittest\n from tests import TestFlask, catch_warnings\n-\n-\n-class TestDeprecations(TestFlask):\n-    \"\"\"not used currently\"\"\"\n-\n-\n-def suite():\n-    suite = unittest.TestSuite()\n-    suite.addTest(unittest.makeSuite(TestDeprecations))\n-    return suite\n\n@@ -1,38 +0,0 @@\n-# -*- coding: utf-8 -*-\n-\"\"\"\n-    tests.examples\n-    ~~~~~~~~~~~~~~~~~~~~~~~~\n-\n-    Tests the examples.\n-\n-    :copyright: (c) 2014 by Armin Ronacher.\n-    :license: BSD, see LICENSE for more details.\n-\"\"\"\n-import os\n-import unittest\n-from tests import add_to_path\n-\n-\n-def setup_path():\n-    example_path = os.path.join(os.path.dirname(__file__),\n-                                os.pardir, os.pardir, 'examples')\n-    add_to_path(os.path.join(example_path, 'flaskr'))\n-    add_to_path(os.path.join(example_path, 'minitwit'))\n-\n-\n-def suite():\n-    setup_path()\n-    suite = unittest.TestSuite()\n-    try:\n-        from minitwit_tests import TestMiniTwit\n-    except ImportError:\n-        pass\n-    else:\n-        suite.addTest(unittest.makeSuite(TestMiniTwit))\n-    try:\n-        from flaskr_tests import TestFlaskr\n-    except ImportError:\n-        pass\n-    else:\n-        suite.addTest(unittest.makeSuite(TestFlaskr))\n-    return suite\n\n@@ -29,7 +29,7 @@ def has_encoding(name):\n         return False\n \n \n-class TestJSON(TestFlask):\n+class TestJSON(object):\n \n     def test_json_bad_requests(self):\n         app = flask.Flask(__name__)\n@@ -241,7 +241,7 @@ class TestJSON(TestFlask):\n         except AssertionError:\n             assert lines == sorted_by_str\n \n-class TestSendfile(TestFlask):\n+class TestSendfile(object):\n \n     def test_send_file_regular(self):\n         app = flask.Flask(__name__)\n@@ -423,7 +423,7 @@ class TestSendfile(TestFlask):\n             rv.close()\n \n \n-class TestLogging(TestFlask):\n+class TestLogging(object):\n \n     def test_logger_cache(self):\n         app = flask.Flask(__name__)\n@@ -566,7 +566,7 @@ class TestLogging(TestFlask):\n             assert flask.url_for('myview', _method='POST') == '/myview/create'\n \n \n-class TestNoImports(TestFlask):\n+class TestNoImports(object):\n     \"\"\"Test Flasks are created without import.\n \n     Avoiding ``__import__`` helps create Flask instances where there are errors\n@@ -584,7 +584,7 @@ class TestNoImports(TestFlask):\n             assert False, 'Flask(import_name) is importing import_name.'\n \n \n-class TestStreaming(TestFlask):\n+class TestStreaming(object):\n \n     def test_streaming_with_context(self):\n         app = flask.Flask(__name__)\n@@ -641,14 +641,3 @@ class TestStreaming(TestFlask):\n         rv = c.get('/?name=World')\n         assert rv.data == b'Hello World!'\n         assert called == [42]\n-\n-\n-def suite():\n-    suite = unittest.TestSuite()\n-    if flask.json_available:\n-        suite.addTest(unittest.makeSuite(TestJSON))\n-    suite.addTest(unittest.makeSuite(TestSendfile))\n-    suite.addTest(unittest.makeSuite(TestLogging))\n-    suite.addTest(unittest.makeSuite(TestNoImports))\n-    suite.addTest(unittest.makeSuite(TestStreaming))\n-    return suite\n\n@@ -54,7 +54,7 @@ class _NoLeakAsserter(object):\n \n @pytest.mark.skipif(os.environ.get('RUN_FLASK_MEMORY_TESTS') != '1',\n                     reason='Turned off due to envvar.')\n-class TestMemory(TestFlask):\n+class TestMemory(object):\n \n     def assert_no_leak(self):\n         return _NoLeakAsserter(self)\n@@ -88,7 +88,7 @@ class TestMemory(TestFlask):\n             safe_join('/foo', '..')\n \n \n-class TestException(TestFlask):\n+class TestException(object):\n \n     def test_aborting(self):\n         class Foo(Exception):\n\n@@ -20,9 +20,7 @@ except ImportError:\n from tests import TestFlask\n \n \n-class TestRequestContext(TestFlask):\n-\n-    def test_teardown_on_pop(self):\n+def test_teardown_on_pop():\n     buffer = []\n     app = flask.Flask(__name__)\n     @app.teardown_request\n@@ -35,7 +33,7 @@ class TestRequestContext(TestFlask):\n     ctx.pop()\n     assert buffer == [None]\n \n-    def test_teardown_with_previous_exception(self):\n+def test_teardown_with_previous_exception():\n     buffer = []\n     app = flask.Flask(__name__)\n     @app.teardown_request\n@@ -51,7 +49,7 @@ class TestRequestContext(TestFlask):\n         assert buffer == []\n     assert buffer == [None]\n \n-    def test_proper_test_request_context(self):\n+def test_proper_test_request_context():\n     app = flask.Flask(__name__)\n     app.config.update(\n         SERVER_NAME='localhost.localdomain:5000'\n@@ -91,7 +89,7 @@ class TestRequestContext(TestFlask):\n     with app.test_request_context('/', environ_overrides={'SERVER_NAME': 'localhost:80'}):\n         pass\n \n-    def test_context_binding(self):\n+def test_context_binding():\n     app = flask.Flask(__name__)\n     @app.route('/')\n     def index():\n@@ -106,7 +104,7 @@ class TestRequestContext(TestFlask):\n         assert meh() == 'http://localhost/meh'\n     assert flask._request_ctx_stack.top is None\n \n-    def test_context_test(self):\n+def test_context_test():\n     app = flask.Flask(__name__)\n     assert not flask.request\n     assert not flask.has_request_context()\n@@ -118,7 +116,7 @@ class TestRequestContext(TestFlask):\n     finally:\n         ctx.pop()\n \n-    def test_manual_context_binding(self):\n+def test_manual_context_binding():\n     app = flask.Flask(__name__)\n     @app.route('/')\n     def index():\n@@ -135,7 +133,8 @@ class TestRequestContext(TestFlask):\n     else:\n         assert 0, 'expected runtime error'\n \n-    def test_greenlet_context_copying(self):\n+@pytest.mark.skipif(greenlet is None, reason='greenlet not installed')\n+def test_greenlet_context_copying():\n     app = flask.Flask(__name__)\n     greenlets = []\n \n@@ -161,7 +160,8 @@ class TestRequestContext(TestFlask):\n     result = greenlets[0].run()\n     assert result == 42\n \n-    def test_greenlet_context_copying_api(self):\n+@pytest.mark.skipif(greenlet is None, reason='greenlet not installed')\n+def test_greenlet_context_copying_api():\n     app = flask.Flask(__name__)\n     greenlets = []\n \n@@ -183,14 +183,3 @@ class TestRequestContext(TestFlask):\n \n     result = greenlets[0].run()\n     assert result == 42\n-\n-    # Disable test if we don't have greenlets available\n-    if greenlet is None:\n-        test_greenlet_context_copying = None\n-        test_greenlet_context_copying_api = None\n-\n-\n-def suite():\n-    suite = unittest.TestSuite()\n-    suite.addTest(unittest.makeSuite(TestRequestContext))\n-    return suite\n\n@@ -25,9 +25,7 @@ pytestmark = pytest.mark.skipif(\n     reason='Signals require the blinker library.'\n )\n \n-class TestSignals(TestFlask):\n-\n-    def test_template_rendered(self):\n+def test_template_rendered():\n     app = flask.Flask(__name__)\n \n     @app.route('/')\n@@ -49,7 +47,7 @@ class TestSignals(TestFlask):\n     finally:\n         flask.template_rendered.disconnect(record, app)\n \n-    def test_request_signals(self):\n+def test_request_signals():\n     app = flask.Flask(__name__)\n     calls = []\n \n@@ -88,7 +86,7 @@ class TestSignals(TestFlask):\n         flask.request_started.disconnect(before_request_signal, app)\n         flask.request_finished.disconnect(after_request_signal, app)\n \n-    def test_request_exception_signal(self):\n+def test_request_exception_signal():\n     app = flask.Flask(__name__)\n     recorded = []\n \n@@ -107,7 +105,7 @@ class TestSignals(TestFlask):\n     finally:\n         flask.got_request_exception.disconnect(record, app)\n \n-    def test_appcontext_signals(self):\n+def test_appcontext_signals():\n     app = flask.Flask(__name__)\n     recorded = []\n \n@@ -133,7 +131,7 @@ class TestSignals(TestFlask):\n         flask.appcontext_pushed.disconnect(record_push, app)\n         flask.appcontext_popped.disconnect(record_pop, app)\n \n-    def test_flash_signal(self):\n+def test_flash_signal():\n     app = flask.Flask(__name__)\n     app.config['SECRET_KEY'] = 'secret'\n \n\n@@ -16,7 +16,7 @@ from tests import TestFlask\n from flask._compat import text_type\n \n \n-class TestTestTools(TestFlask):\n+class TestTestTools(object):\n \n     def test_environ_defaults_from_config(self):\n         app = flask.Flask(__name__)\n@@ -213,7 +213,7 @@ class TestTestTools(TestFlask):\n             assert 'vodka' in flask.request.args\n \n \n-class TestSubdomain(TestFlask):\n+class TestSubdomain(object):\n \n     @pytest.fixture\n     def app(self, request):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#af4cb0ff2bb77c0c2f03227b17cc6ef67f28e63b", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 14 | Lines Deleted: 35 | Files Changed: 15 | Hunks: 17 | Methods Changed: 4 | Complexity Δ (Sum/Max): -4/0 | Churn Δ: 49 | Churn Cumulative: 2730 | Contributors (this commit): 1 | Commits (past 90d): 80 | Contributors (cumulative): 15 | DMM Complexity: 0.0\n\nDIFF:\n@@ -11,11 +11,9 @@\n \"\"\"\n \n from __future__ import print_function\n-import pytest\n \n import os\n import sys\n-import flask\n import warnings\n from functools import update_wrapper\n from contextlib import contextmanager\n@@ -82,22 +80,3 @@ def emits_module_deprecation_warning(f):\n             for entry in log:\n                 assert 'Modules are deprecated' in str(entry['message'])\n     return update_wrapper(new_f, f)\n-\n-\n-class TestFlask(object):\n-    \"\"\"Baseclass for all the tests that Flask uses.  Use these methods\n-    for testing instead of the camelcased ones in the baseclass for\n-    consistency.\n-    \"\"\"\n-\n-    def setup_method(self, method):\n-        self.setup()\n-\n-    def teardown_method(self, method):\n-        self.teardown()\n-\n-    def setup(self):\n-        pass\n-\n-    def teardown(self):\n-        pass\n\n@@ -13,7 +13,7 @@ import pytest\n \n import flask\n import unittest\n-from tests import TestFlask\n+\n \n \n def test_basic_url_generation():\n\n@@ -19,7 +19,7 @@ import pickle\n import unittest\n from datetime import datetime\n from threading import Thread\n-from tests import TestFlask, emits_module_deprecation_warning\n+from tests import emits_module_deprecation_warning\n from flask._compat import text_type\n from werkzeug.exceptions import BadRequest, NotFound, Forbidden\n from werkzeug.http import parse_date\n\n@@ -13,7 +13,7 @@ import pytest\n \n import flask\n import unittest\n-from tests import TestFlask\n+\n from flask._compat import text_type\n from werkzeug.http import parse_cache_control_header\n from jinja2 import TemplateNotFound\n\n@@ -18,7 +18,7 @@ import pkgutil\n import unittest\n import textwrap\n from contextlib import contextmanager\n-from tests import TestFlask\n+\n from flask._compat import PY2\n \n \n\n@@ -11,4 +11,4 @@\n \n import flask\n import unittest\n-from tests import TestFlask, catch_warnings\n+from tests import catch_warnings\n\n@@ -17,7 +17,7 @@ try:\n     from imp import reload as reload_module\n except ImportError:\n     reload_module = reload\n-from tests import TestFlask\n+\n from flask._compat import PY2\n \n \n\n@@ -15,7 +15,7 @@ import os\n import flask\n import unittest\n from logging import StreamHandler\n-from tests import TestFlask, catch_warnings, catch_stderr\n+from tests import catch_warnings, catch_stderr\n from werkzeug.http import parse_cache_control_header, parse_options_header\n from flask._compat import StringIO, text_type\n \n\n@@ -17,7 +17,7 @@ import sys\n import flask\n import threading\n from werkzeug.exceptions import NotFound\n-from tests import TestFlask\n+\n \n \n _gc_lock = threading.Lock()\n\n@@ -17,7 +17,7 @@ try:\n     from greenlet import greenlet\n except ImportError:\n     greenlet = None\n-from tests import TestFlask\n+\n \n \n def test_teardown_on_pop():\n\n@@ -17,7 +17,7 @@ except ImportError:\n     blinker = None\n \n import flask\n-from tests import TestFlask\n+\n \n \n pytestmark = pytest.mark.skipif(\n\n@@ -12,7 +12,7 @@\n import flask\n import unittest\n from logging import StreamHandler\n-from tests import TestFlask\n+\n from flask._compat import StringIO\n \n \n\n@@ -16,7 +16,7 @@ import unittest\n import logging\n from jinja2 import TemplateNotFound\n \n-from tests import TestFlask\n+\n \n \n def test_context_processing():\n\n@@ -12,7 +12,7 @@ import pytest\n \n import flask\n import unittest\n-from tests import TestFlask\n+\n from flask._compat import text_type\n \n \n\n@@ -14,7 +14,7 @@ import pytest\n import flask\n import flask.views\n import unittest\n-from tests import TestFlask\n+\n from werkzeug.http import parse_set_header\n \n def common_test(app):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
