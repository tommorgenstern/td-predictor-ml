{"custom_id": "requests#537def4a4fb284a216f56f3bae308d28ccc67b1f", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 52 | Lines Deleted: 11 | Files Changed: 2 | Hunks: 8 | Methods Changed: 7 | Complexity Δ (Sum/Max): 7/6 | Churn Δ: 63 | Churn Cumulative: 5029 | Contributors (this commit): 78 | Commits (past 90d): 45 | Contributors (cumulative): 86 | DMM Complexity: 1.0\n\nDIFF:\n@@ -8,7 +8,7 @@ requests.utils imports from here, so be careful with imports.\n \n import time\n import collections\n-from .compat import cookielib, urlparse, urlunparse, Morsel\n+from .compat import cookielib, urlparse, urlunparse, Morsel, is_py3\n \n try:\n     import threading\n@@ -198,30 +198,48 @@ class RequestsCookieJar(cookielib.CookieJar, collections.MutableMapping):\n         self.set_cookie(c)\n         return c\n \n+    def iterkeys(self):\n+        \"\"\"Dict-like iterkeys() that returns an iterator of names of cookies from the jar.\n+        See itervalues() and iteritems().\"\"\"\n+        for cookie in iter(self):\n+            yield cookie.name\n+\n     def keys(self):\n         \"\"\"Dict-like keys() that returns a list of names of cookies from the jar.\n         See values() and items().\"\"\"\n-        keys = []\n+        if is_py3:\n+            return self.iterkeys()\n+        else:\n+            return list(self.iterkeys())\n+\n+    def itervalues(self):\n+        \"\"\"Dict-like itervalues() that returns an iterator of values of cookies from the jar.\n+        See iterkeys() and iteritems().\"\"\"\n         for cookie in iter(self):\n-            keys.append(cookie.name)\n-        return keys\n+            yield cookie.value\n \n     def values(self):\n         \"\"\"Dict-like values() that returns a list of values of cookies from the jar.\n         See keys() and items().\"\"\"\n-        values = []\n+        if is_py3:\n+            return self.itervalues()\n+        else:\n+            return list(self.itervalues())\n+\n+    def iteritems(self):\n+        \"\"\"Dict-like iteritems() that returns an iterator of name-value tuples from the jar.\n+        See iterkeys() and itervalues().\"\"\"\n         for cookie in iter(self):\n-            values.append(cookie.value)\n-        return values\n+            yield cookie.name, cookie.value\n \n     def items(self):\n         \"\"\"Dict-like items() that returns a list of name-value tuples from the jar.\n         See keys() and values(). Allows client-code to call \"dict(RequestsCookieJar)\n         and get a vanilla python dict of key value pairs.\"\"\"\n-        items = []\n-        for cookie in iter(self):\n-            items.append((cookie.name, cookie.value))\n-        return items\n+        if is_py3:\n+            return self.iteritems()\n+        else:\n+            return list(self.iteritems())\n \n     def list_domains(self):\n         \"\"\"Utility method to list all the domains in the jar.\"\"\"\n\n@@ -570,6 +570,29 @@ class RequestsTestCase(unittest.TestCase):\n         assert cookie.domain == domain\n         assert cookie._rest['HttpOnly'] == rest['HttpOnly']\n \n+    def test_cookie_as_dict(self):\n+        key = 'some_cookie'\n+        value = 'some_value'\n+\n+        key1 = 'some_cookie1'\n+        value1 = 'some_value1'\n+\n+        jar = requests.cookies.RequestsCookieJar()\n+        jar.set(key, value)\n+        jar.set(key1, value1)\n+\n+        d1 = dict(jar)\n+        d2 = dict(jar.iteritems())\n+        d3 = dict(jar.items())\n+\n+        assert len(d1) == 2\n+        assert len(d2) == 2\n+        assert len(d3) == 2\n+\n+        assert d1['some_cookie'] == 'some_value'\n+        assert d2['some_cookie'] == 'some_value'\n+        assert d3['some_cookie'] == 'some_value'\n+\n     def test_time_elapsed_blank(self):\n         r = requests.get(httpbin('get'))\n         td = r.elapsed\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#642bbf60604d74319bd0e625277d4ac5bfe3cb9b", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 1 | Churn Cumulative: 2615 | Contributors (this commit): 50 | Commits (past 90d): 19 | Contributors (cumulative): 50 | DMM Complexity: 0.0\n\nDIFF:\n@@ -155,6 +155,7 @@ class SessionRedirectMixin(object):\n \n             extract_cookies_to_jar(prepared_request._cookies,\n                                    prepared_request, resp.raw)\n+            prepared_request._cookies.update(self.cookies)\n             prepared_request.prepare_cookies(prepared_request._cookies)\n \n             resp = self.send(\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#e6a32d6283f2c9b98287fb9bf4a071bfcf41a243", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 4 | Lines Deleted: 10 | Files Changed: 2 | Hunks: 5 | Methods Changed: 4 | Complexity Δ (Sum/Max): -3/0 | Churn Δ: 14 | Churn Cumulative: 5043 | Contributors (this commit): 78 | Commits (past 90d): 47 | Contributors (cumulative): 86 | DMM Complexity: 0.0\n\nDIFF:\n@@ -8,7 +8,7 @@ requests.utils imports from here, so be careful with imports.\n \n import time\n import collections\n-from .compat import cookielib, urlparse, urlunparse, Morsel, is_py3\n+from .compat import cookielib, urlparse, urlunparse, Morsel\n \n try:\n     import threading\n@@ -207,9 +207,6 @@ class RequestsCookieJar(cookielib.CookieJar, collections.MutableMapping):\n     def keys(self):\n         \"\"\"Dict-like keys() that returns a list of names of cookies from the jar.\n         See values() and items().\"\"\"\n-        if is_py3:\n-            return self.iterkeys()\n-        else:\n         return list(self.iterkeys())\n \n     def itervalues(self):\n@@ -221,9 +218,6 @@ class RequestsCookieJar(cookielib.CookieJar, collections.MutableMapping):\n     def values(self):\n         \"\"\"Dict-like values() that returns a list of values of cookies from the jar.\n         See keys() and items().\"\"\"\n-        if is_py3:\n-            return self.itervalues()\n-        else:\n         return list(self.itervalues())\n \n     def iteritems(self):\n@@ -236,9 +230,6 @@ class RequestsCookieJar(cookielib.CookieJar, collections.MutableMapping):\n         \"\"\"Dict-like items() that returns a list of name-value tuples from the jar.\n         See keys() and values(). Allows client-code to call \"dict(RequestsCookieJar)\n         and get a vanilla python dict of key value pairs.\"\"\"\n-        if is_py3:\n-            return self.iteritems()\n-        else:\n         return list(self.iteritems())\n \n     def list_domains(self):\n\n@@ -593,6 +593,9 @@ class RequestsTestCase(unittest.TestCase):\n         assert d2['some_cookie'] == 'some_value'\n         assert d3['some_cookie'] == 'some_value'\n \n+        keys = jar.keys()\n+        assert list(keys) == list(keys)\n+\n     def test_time_elapsed_blank(self):\n         r = requests.get(httpbin('get'))\n         td = r.elapsed\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#0bfbacd8b15ddb6e0c3bc86eb81d969ff4bcc0ae", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 59 | Lines Deleted: 52 | Files Changed: 39 | Hunks: 13 | Methods Changed: 7 | Complexity Δ (Sum/Max): 290/42 | Churn Δ: 111 | Churn Cumulative: 15392 | Contributors (this commit): 2 | Commits (past 90d): 40 | Contributors (cumulative): 76 | DMM Complexity: 0.5\n\nDIFF:\n@@ -1,7 +0,0 @@\n-'''\r\n-support ';python -m charade <file1> [file2] ...' package execution syntax (2.7+)\r\n-'''\r\n-\r\n-from charade import charade_cli\r\n-\r\n-charade_cli()\r\n\n@@ -15,7 +15,7 @@\n # 02110-1301  USA\n ######################### END LICENSE BLOCK #########################\n \n-__version__ = \"1.0.3\"\r\n+__version__ = \"2.2.1\"\n from sys import version_info\n \n \n@@ -30,37 +30,3 @@ def detect(aBuf):\n     u.feed(aBuf)\n     u.close()\n     return u.result\n-\r\n-def _description_of(path):\r\n-    \"\"\"Return a string describing the probable encoding of a file.\"\"\"\r\n-    from charade.universaldetector import UniversalDetector\r\n-\r\n-    u = UniversalDetector()\r\n-    for line in open(path, 'rb'):\r\n-        u.feed(line)\r\n-    u.close()\r\n-    result = u.result\r\n-    if result['encoding']:\r\n-        return '%s: %s with confidence %s' % (path,\r\n-                                              result['encoding'],\r\n-                                              result['confidence'])\r\n-    else:\r\n-        return '%s: no result' % path\r\n-\r\n-\r\n-def charade_cli():\r\n-    \"\"\"\r\n-    Script which takes one or more file paths and reports on their detected\r\n-    encodings\r\n-\r\n-    Example::\r\n-\r\n-        % chardetect.py somefile someotherfile\r\n-        somefile: windows-1252 with confidence 0.5\r\n-        someotherfile: ascii with confidence 1.0\r\n-\r\n-    \"\"\"\r\n-    from sys import argv\r\n-    for path in argv[1:]:\r\n-        print(_description_of(path))\r\n-        \n\\ No newline at end of file\n\n\n\n@@ -0,0 +1,46 @@\n+#!/usr/bin/env python\n+\"\"\"\n+Script which takes one or more file paths and reports on their detected\n+encodings\n+\n+Example::\n+\n+    % chardetect somefile someotherfile\n+    somefile: windows-1252 with confidence 0.5\n+    someotherfile: ascii with confidence 1.0\n+\n+If no paths are provided, it takes its input from stdin.\n+\n+\"\"\"\n+from io import open\n+from sys import argv, stdin\n+\n+from chardet.universaldetector import UniversalDetector\n+\n+\n+def description_of(file, name='stdin'):\n+    \"\"\"Return a string describing the probable encoding of a file.\"\"\"\n+    u = UniversalDetector()\n+    for line in file:\n+        u.feed(line)\n+    u.close()\n+    result = u.result\n+    if result['encoding']:\n+        return '%s: %s with confidence %s' % (name,\n+                                              result['encoding'],\n+                                              result['confidence'])\n+    else:\n+        return '%s: no result' % name\n+\n+\n+def main():\n+    if len(argv) <= 1:\n+        print(description_of(stdin))\n+    else:\n+        for path in argv[1:]:\n+            with open(path, 'rb') as f:\n+                print(description_of(f, path))\n+\n+\n+if __name__ == '__main__':\n+    main()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n@@ -169,7 +169,7 @@ class JapaneseContextAnalysis:\n     def get_confidence(self):\n         # This is just one way to calculate confidence. It works well for me.\n         if self._mTotalRel > MINIMUM_DATA_THRESHOLD:\n-            return float(self._mTotalRel - self._mRelSample[0]) / self._mTotalRel\r\n+            return (self._mTotalRel - self._mRelSample[0]) / self._mTotalRel\n         else:\n             return DONT_KNOW\n \n\n\n\n\n\n\n\n@@ -129,7 +129,7 @@ class Latin1Prober(CharSetProber):\n         if total < 0.01:\n             confidence = 0.0\n         else:\n-            confidence = ((float(self._mFreqCounter[3]) / total)\r\n+            confidence = ((self._mFreqCounter[3] / total)\n                           - (self._mFreqCounter[1] * 20.0 / total))\n         if confidence < 0.0:\n             confidence = 0.0\n\n\n\n\n\n\n\n@@ -74,10 +74,12 @@ class UniversalDetector:\n             if aBuf[:3] == codecs.BOM:\n                 # EF BB BF  UTF-8 with BOM\n                 self.result = {'encoding': \"UTF-8\", 'confidence': 1.0}\n-            elif aBuf[:4] in (codecs.BOM_UTF32_LE, codecs.BOM_UTF32_BE):\r\n+            elif aBuf[:4] == codecs.BOM_UTF32_LE:\n                 # FF FE 00 00  UTF-32, little-endian BOM\n+                self.result = {'encoding': \"UTF-32LE\", 'confidence': 1.0}\n+            elif aBuf[:4] == codecs.BOM_UTF32_BE:\n                 # 00 00 FE FF  UTF-32, big-endian BOM\n-                self.result = {'encoding': \"UTF-32\", 'confidence': 1.0}\r\n+                self.result = {'encoding': \"UTF-32BE\", 'confidence': 1.0}\n             elif aBuf[:4] == b'\\xFE\\xFF\\x00\\x00':\n                 # FE FF 00 00  UCS-4, unusual octet order BOM (3412)\n                 self.result = {\n@@ -90,10 +92,12 @@ class UniversalDetector:\n                     'encoding': \"X-ISO-10646-UCS-4-2143\",\n                     'confidence': 1.0\n                 }\n-            elif aBuf[:2] == codecs.BOM_LE or aBuf[:2] == codecs.BOM_BE:\r\n+            elif aBuf[:2] == codecs.BOM_LE:\n                 # FF FE  UTF-16, little endian BOM\n+                self.result = {'encoding': \"UTF-16LE\", 'confidence': 1.0}\n+            elif aBuf[:2] == codecs.BOM_BE:\n                 # FE FF  UTF-16, big endian BOM\n-                self.result = {'encoding': \"UTF-16\", 'confidence': 1.0}\r\n+                self.result = {'encoding': \"UTF-16BE\", 'confidence': 1.0}\n \n         self._mGotData = True\n         if self.result['encoding'] and (self.result['confidence'] > 0.0):\n@@ -113,10 +117,8 @@ class UniversalDetector:\n             if not self._mEscCharSetProber:\n                 self._mEscCharSetProber = EscCharSetProber()\n             if self._mEscCharSetProber.feed(aBuf) == constants.eFoundIt:\n-                self.result = {\r\n-                    'encoding': self._mEscCharSetProber.get_charset_name(),\r\n-                    'confidence': self._mEscCharSetProber.get_confidence()\r\n-                }\r\n+                self.result = {'encoding': self._mEscCharSetProber.get_charset_name(),\n+                               'confidence': self._mEscCharSetProber.get_confidence()}\n                 self.done = True\n         elif self._mInputState == eHighbyte:\n             if not self._mCharSetProbers:\n\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#9379a14cb41916ce71fd94feaa26808b7770511d", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 2 | Files Changed: 2 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 9173 | Contributors (this commit): 129 | Commits (past 90d): 19 | Contributors (cumulative): 137 | DMM Complexity: None\n\nDIFF:\n@@ -4,7 +4,7 @@\n pythoncompat\n \"\"\"\n \n-from .packages import charade as chardet\n+from .packages import chardet\n \n import sys\n \n\n@@ -688,7 +688,7 @@ class Response(object):\n         \"\"\"Content of the response, in unicode.\n \n         If Response.encoding is None, encoding will be guessed using\n-        ``charade``.\n+        ``chardet``.\n         \"\"\"\n \n         # Try charset from content-type\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#d8d9591076a6222bad87c89591b0667180564ec4", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 390 | Contributors (this commit): 14 | Commits (past 90d): 2 | Contributors (cumulative): 14 | DMM Complexity: None\n\nDIFF:\n@@ -17,7 +17,7 @@ if sys.argv[-1] == 'publish':\n packages = [\n     'requests',\n     'requests.packages',\n-    'requests.packages.charade',\n+    'requests.packages.chardet',\n     'requests.packages.urllib3',\n     'requests.packages.urllib3.packages',\n     'requests.packages.urllib3.contrib',\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#b8f1263f16777163baa3437e320a75d881430484", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 64 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 6 | Methods Changed: 6 | Complexity Δ (Sum/Max): 4/4 | Churn Δ: 66 | Churn Cumulative: 4293 | Contributors (this commit): 68 | Commits (past 90d): 31 | Contributors (cumulative): 68 | DMM Complexity: 1.0\n\nDIFF:\n@@ -570,7 +570,7 @@ class RequestsTestCase(unittest.TestCase):\n         assert cookie.domain == domain\n         assert cookie._rest['HttpOnly'] == rest['HttpOnly']\n \n-    def test_cookie_as_dict(self):\n+    def test_cookie_as_dict_keeps_len(self):\n         key = 'some_cookie'\n         value = 'some_value'\n \n@@ -585,17 +585,79 @@ class RequestsTestCase(unittest.TestCase):\n         d2 = dict(jar.iteritems())\n         d3 = dict(jar.items())\n \n+        assert len(jar) == 2\n         assert len(d1) == 2\n         assert len(d2) == 2\n         assert len(d3) == 2\n \n+    def test_cookie_as_dict_keeps_items(self):\n+        key = 'some_cookie'\n+        value = 'some_value'\n+\n+        key1 = 'some_cookie1'\n+        value1 = 'some_value1'\n+\n+        jar = requests.cookies.RequestsCookieJar()\n+        jar.set(key, value)\n+        jar.set(key1, value1)\n+\n+        d1 = dict(jar)\n+        d2 = dict(jar.iteritems())\n+        d3 = dict(jar.items())\n+\n         assert d1['some_cookie'] == 'some_value'\n         assert d2['some_cookie'] == 'some_value'\n-        assert d3['some_cookie'] == 'some_value'\n+        assert d3['some_cookie1'] == 'some_value1'\n+\n+    def test_cookie_as_dict_keys(self):\n+        key = 'some_cookie'\n+        value = 'some_value'\n+\n+        key1 = 'some_cookie1'\n+        value1 = 'some_value1'\n+\n+        jar = requests.cookies.RequestsCookieJar()\n+        jar.set(key, value)\n+        jar.set(key1, value1)\n \n         keys = jar.keys()\n+        assert keys == list(keys)\n+        # make sure one can use keys multiple times\n         assert list(keys) == list(keys)\n \n+    def test_cookie_as_dict_values(self):\n+        key = 'some_cookie'\n+        value = 'some_value'\n+\n+        key1 = 'some_cookie1'\n+        value1 = 'some_value1'\n+\n+        jar = requests.cookies.RequestsCookieJar()\n+        jar.set(key, value)\n+        jar.set(key1, value1)\n+\n+        values = jar.values()\n+        assert values == list(values)\n+        # make sure one can use values multiple times\n+        assert list(values) == list(values)\n+\n+    def test_cookie_as_dict_items(self):\n+        key = 'some_cookie'\n+        value = 'some_value'\n+\n+        key1 = 'some_cookie1'\n+        value1 = 'some_value1'\n+\n+        jar = requests.cookies.RequestsCookieJar()\n+        jar.set(key, value)\n+        jar.set(key1, value1)\n+\n+        items = jar.items()\n+        assert items == list(items)\n+        # make sure one can use items multiple times\n+        assert list(items) == list(items)\n+\n+\n     def test_time_elapsed_blank(self):\n         r = requests.get(httpbin('get'))\n         td = r.elapsed\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#aad828704d1772138dc52a3bebc5964defe8a1e6", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 8 | Lines Deleted: 1 | Files Changed: 2 | Hunks: 4 | Methods Changed: 2 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 9 | Churn Cumulative: 9128 | Contributors (this commit): 125 | Commits (past 90d): 21 | Contributors (cumulative): 137 | DMM Complexity: 0.0\n\nDIFF:\n@@ -61,3 +61,7 @@ class InvalidURL(RequestException, ValueError):\n \n class ChunkedEncodingError(RequestException):\n     \"\"\"The server declared chunked encoding but sent an invalid chunk.\"\"\"\n+\n+\n+class ContentDecodingError(RequestException):\n+    \"\"\"Failed to decode response content\"\"\"\n\n@@ -20,9 +20,10 @@ from .cookies import cookiejar_from_dict, get_cookie_header\n from .packages.urllib3.fields import RequestField\n from .packages.urllib3.filepost import encode_multipart_formdata\n from .packages.urllib3.util import parse_url\n+from .packages.urllib3.exceptions import DecodeError\n from .exceptions import (\n     HTTPError, RequestException, MissingSchema, InvalidURL,\n-    ChunkedEncodingError)\n+    ChunkedEncodingError, ContentDecodingError)\n from .utils import (\n     guess_filename, get_auth_from_url, requote_uri,\n     stream_decode_response_unicode, to_key_val_list, parse_header_links,\n@@ -616,6 +617,8 @@ class Response(object):\n                         yield chunk\n                 except IncompleteRead as e:\n                     raise ChunkedEncodingError(e)\n+                except DecodeError as e:\n+                    raise ContentDecodingError(e)\n             except AttributeError:\n                 # Standard file-like object.\n                 while True:\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#4a6a0c3c65be2033e11130125601a6c810ea5d10", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 5 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 5 | Churn Cumulative: 9022 | Contributors (this commit): 124 | Commits (past 90d): 20 | Contributors (cumulative): 124 | DMM Complexity: None\n\nDIFF:\n@@ -692,6 +692,11 @@ class Response(object):\n \n         If Response.encoding is None, encoding will be guessed using\n         ``chardet``.\n+\n+        The encoding of the response content is determined based soley on HTTP\n+        headers, following RFC 2616 to the letter. If you can take advantage of\n+        non-HTTP knowledge to make a better guess at the encoding, you should\n+        set ``r.encoding`` appropriately before accessing this property.\n         \"\"\"\n \n         # Try charset from content-type\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#9e843468de02cbd393fc144c123ea7465e9114a1", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 4 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 5 | Churn Cumulative: 726 | Contributors (this commit): 19 | Commits (past 90d): 11 | Contributors (cumulative): 19 | DMM Complexity: 1.0\n\nDIFF:\n@@ -202,7 +202,10 @@ class HTTPAdapter(BaseAdapter):\n             if not proxy in self.proxy_manager:\n                 self.proxy_manager[proxy] = proxy_from_url(\n                                                 proxy,\n-                                                proxy_headers=proxy_headers)\n+                                                proxy_headers=proxy_headers,\n+                                                num_pools=self._pool_connections,\n+                                                maxsize=self._pool_maxsize,\n+                                                block=self._pool_block)\n \n             conn = self.proxy_manager[proxy].connection_from_url(url)\n         else:\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#fad8d743b584c874cde320fa9be08192061f7ed8", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 6 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 2 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 7 | Churn Cumulative: 284 | Contributors (this commit): 3 | Commits (past 90d): 1 | Contributors (cumulative): 3 | DMM Complexity: None\n\nDIFF:\n@@ -27,7 +27,10 @@ from requests import __version__\n \n # Add any Sphinx extension module names here, as strings. They can be extensions\n # coming with Sphinx (named 'sphinx.ext.*') or your custom ones.\n-extensions = ['sphinx.ext.autodoc']\n+extensions = [\n+    'sphinx.ext.autodoc',\n+    'sphinx.ext.intersphinx',\n+]\n \n # Add any paths that contain templates here, relative to this directory.\n templates_path = ['_templates']\n@@ -241,3 +244,5 @@ texinfo_appendices = []\n sys.path.append(os.path.abspath('_themes'))\n html_theme_path = ['_themes']\n html_theme = 'kr'\n+\n+intersphinx_mapping = {'urllib3': ('http://urllib3.readthedocs.org/en/latest', None)}\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#a0e77064400ceb75569669d4ff5cdc9c19f98514", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 5 | Lines Deleted: 3 | Files Changed: 2 | Hunks: 3 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 8 | Churn Cumulative: 9756 | Contributors (this commit): 136 | Commits (past 90d): 31 | Contributors (cumulative): 144 | DMM Complexity: None\n\nDIFF:\n@@ -55,14 +55,16 @@ class HTTPAdapter(BaseAdapter):\n \n     :param pool_connections: The number of urllib3 connection pools to cache.\n     :param pool_maxsize: The maximum number of connections to save in the pool.\n-    :param max_retries: The maximum number of retries each connection should attempt.\n+    :param int max_retries: The maximum number of retries each connection\n+        should attempt. Note, this applies only to failed connections and\n+        timeouts, never to requests where the server returns a response.\n     :param pool_block: Whether the connection pool should block for connections.\n \n     Usage::\n \n       >>> import requests\n       >>> s = requests.Session()\n-      >>> a = requests.adapters.HTTPAdapter()\n+      >>> a = requests.adapters.HTTPAdapter(max_retries=3)\n       >>> s.mount('http://', a)\n     \"\"\"\n     __attrs__ = ['max_retries', 'config', '_pool_connections', '_pool_maxsize',\n\n@@ -526,7 +526,7 @@ class Response(object):\n         self.headers = CaseInsensitiveDict()\n \n         #: File-like object representation of response (for advanced usage).\n-        #: Requires that ``stream=True` on the request.\n+        #: Use of ``raw`` requires that ``stream=True`` be set on the request.\n         # This requirement does not apply for use internally to Requests.\n         self.raw = None\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#81f4412e0e8c18aa8cd400237ca44f76f17c5bce", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 2 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 521 | Contributors (this commit): 9 | Commits (past 90d): 4 | Contributors (cumulative): 9 | DMM Complexity: None\n\nDIFF:\n@@ -36,7 +36,7 @@ usage:\n The other HTTP methods are supported - see `requests.api`. Full documentation\n is at <http://python-requests.org>.\n \n-:copyright: (c) 2013 by Kenneth Reitz.\n+:copyright: (c) 2014 by Kenneth Reitz.\n :license: Apache 2.0, see LICENSE for more details.\n \n \"\"\"\n@@ -46,7 +46,7 @@ __version__ = '2.1.0'\n __build__ = 0x020100\n __author__ = 'Kenneth Reitz'\n __license__ = 'Apache 2.0'\n-__copyright__ = 'Copyright 2013 Kenneth Reitz'\n+__copyright__ = 'Copyright 2014 Kenneth Reitz'\n \n # Attempt to enable urllib3's SNI support, if possible\n try:\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#14a1839a454e4867813d9909141520aaf665a789", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 286 | Contributors (this commit): 4 | Commits (past 90d): 2 | Contributors (cumulative): 4 | DMM Complexity: None\n\nDIFF:\n@@ -43,7 +43,7 @@ master_doc = 'index'\n \n # General information about the project.\n project = u'Requests'\n-copyright = u'2013. A <a href=\"http://kennethreitz.com/pages/open-projects.html\">Kenneth Reitz</a> Project'\n+copyright = u'2014. A <a href=\"http://kennethreitz.com/pages/open-projects.html\">Kenneth Reitz</a> Project'\n \n # The version info for the project you're documenting, acts as replacement for\n # |version| and |release|, also used in various other places throughout the\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#e2a36dda0a4bd0b09d76fe6bf30e6fca4d2822ca", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 10 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 15/15 | Churn Δ: 11 | Churn Cumulative: 2072 | Contributors (this commit): 48 | Commits (past 90d): 13 | Contributors (cumulative): 48 | DMM Complexity: 0.0\n\nDIFF:\n@@ -487,7 +487,16 @@ def get_environ_proxies(url):\n \n     # If the system proxy settings indicate that this URL should be bypassed,\n     # don't proxy.\n-    if proxy_bypass(netloc):\n+    # The proxy_bypass function is incredibly buggy on OS X in early versions\n+    # of Python 2.6, so allow this call to fail. Only catch the specific\n+    # exceptions we've seen, though: this call failing in other ways can reveal\n+    # legitimate problems.\n+    try:\n+        bypass = proxy_bypass(netloc)\n+    except (TypeError, socket.gaierror):\n+        bypass = False\n+\n+    if bypass:\n         return {}\n \n     # If we get here, we either didn't have no_proxy set or we're not going\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#0b41cec7a42682da52a24c87ff6b2c341f101005", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 10 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 3 | Methods Changed: 1 | Complexity Δ (Sum/Max): -1/0 | Churn Δ: 12 | Churn Cumulative: 2084 | Contributors (this commit): 48 | Commits (past 90d): 14 | Contributors (cumulative): 48 | DMM Complexity: 0.0\n\nDIFF:\n@@ -64,16 +64,24 @@ def super_len(o):\n         # e.g. BytesIO, cStringIO.StringI\n         return len(o.getvalue())\n \n+\n def get_netrc_auth(url):\n     \"\"\"Returns the Requests tuple auth for a given url from netrc.\"\"\"\n \n     try:\n         from netrc import netrc, NetrcParseError\n \n-        locations = (os.path.expanduser('~/{0}'.format(f)) for f in NETRC_FILES)\n         netrc_path = None\n \n-        for loc in locations:\n+        for f in NETRC_FILES:\n+            try:\n+                loc = os.path.expanduser('~/{0}'.format(f))\n+            except KeyError:\n+                # os.path.expanduser can fail when $HOME is undefined and\n+                # getpwuid fails. See http://bugs.python.org/issue20164 &\n+                # https://github.com/kennethreitz/requests/issues/1846\n+                return\n+\n             if os.path.exists(loc) and not netrc_path:\n                 netrc_path = loc\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#a80bd7708d620ba1797aed1ca0840996fa137517", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 3 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 3 | Methods Changed: 1 | Complexity Δ (Sum/Max): -1/0 | Churn Δ: 5 | Churn Cumulative: 2089 | Contributors (this commit): 48 | Commits (past 90d): 15 | Contributors (cumulative): 48 | DMM Complexity: 0.0\n\nDIFF:\n@@ -82,12 +82,13 @@ def get_netrc_auth(url):\n                 # https://github.com/kennethreitz/requests/issues/1846\n                 return\n \n-            if os.path.exists(loc) and not netrc_path:\n+            if os.path.exists(loc):\n                 netrc_path = loc\n+                break\n \n         # Abort early if there isn't one.\n         if netrc_path is None:\n-            return netrc_path\n+            return\n \n         ri = urlparse(url)\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#e1562afb583ed500e2cce6e7714d69c48ac10bad", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 7 | Lines Deleted: 3 | Files Changed: 3 | Hunks: 5 | Methods Changed: 2 | Complexity Δ (Sum/Max): 2/2 | Churn Δ: 10 | Churn Cumulative: 3221 | Contributors (this commit): 9 | Commits (past 90d): 6 | Contributors (cumulative): 15 | DMM Complexity: 0.0\n\nDIFF:\n@@ -80,7 +80,10 @@ class VerifiedHTTPSConnection(HTTPSConnection):\n         resolved_cert_reqs = resolve_cert_reqs(self.cert_reqs)\n         resolved_ssl_version = resolve_ssl_version(self.ssl_version)\n \n-        if self._tunnel_host:\n+        # the _tunnel_host attribute was added in python 2.6.3 (via\n+        # http://hg.python.org/cpython/rev/0f57b30a152f) so pythons 2.6(0-2) do\n+        # not have them.\n+        if getattr(self, '_tunnel_host', None):\n             self.sock = sock\n             # Calls self._set_hostport(), so self.host is\n             # self._tunnel_host below.\n\n@@ -371,9 +371,11 @@ class HTTPConnectionPool(ConnectionPool, RequestMethods):\n         # TODO: Add optional support for socket.gethostbyname checking.\n         scheme, host, port = get_host(url)\n \n+        # Use explicit default port for comparison when none is given\n         if self.port and not port:\n-            # Use explicit default port for comparison when none is given.\n             port = port_by_scheme.get(scheme)\n+        elif not self.port and port == port_by_scheme.get(scheme):\n+            port = None\n \n         return (scheme, host, port) == (self.scheme, self.host, self.port)\n \n\n@@ -45,7 +45,6 @@ class RequestMethods(object):\n     \"\"\"\n \n     _encode_url_methods = set(['DELETE', 'GET', 'HEAD', 'OPTIONS'])\n-    _encode_body_methods = set(['PATCH', 'POST', 'PUT', 'TRACE'])\n \n     def __init__(self, headers=None):\n         self.headers = headers or {}\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#4862d29a96d83c1503048b0e12de23aa2b8e4aa4", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 2 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 3 | Churn Cumulative: 114 | Contributors (this commit): 13 | Commits (past 90d): 2 | Contributors (cumulative): 13 | DMM Complexity: None\n\nDIFF:\n@@ -7,6 +7,7 @@ requests.exceptions\n This module contains the set of Requests' exceptions.\n \n \"\"\"\n+from .packages.urllib3.exceptions import HTTPError as BaseHTTPError\n \n \n class RequestException(IOError):\n@@ -63,5 +64,5 @@ class ChunkedEncodingError(RequestException):\n     \"\"\"The server declared chunked encoding but sent an invalid chunk.\"\"\"\n \n \n-class ContentDecodingError(RequestException):\n+class ContentDecodingError(RequestException, BaseHTTPError):\n     \"\"\"Failed to decode response content\"\"\"\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#0db1d3d6753d6a1e5bee25b874b4eed757009425", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 525 | Contributors (this commit): 9 | Commits (past 90d): 4 | Contributors (cumulative): 9 | DMM Complexity: None\n\nDIFF:\n@@ -42,8 +42,8 @@ is at <http://python-requests.org>.\n \"\"\"\n \n __title__ = 'requests'\n-__version__ = '2.1.0'\n-__build__ = 0x020100\n+__version__ = '2.2.0'\n+__build__ = 0x020200\n __author__ = 'Kenneth Reitz'\n __license__ = 'Apache 2.0'\n __copyright__ = 'Copyright 2014 Kenneth Reitz'\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#ca187abd13052fee100909076358fca89b473e0f", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 10 | Lines Deleted: 3 | Files Changed: 2 | Hunks: 3 | Methods Changed: 2 | Complexity Δ (Sum/Max): 3/2 | Churn Δ: 13 | Churn Cumulative: 6395 | Contributors (this commit): 100 | Commits (past 90d): 44 | Contributors (cumulative): 116 | DMM Complexity: 1.0\n\nDIFF:\n@@ -635,10 +635,13 @@ def get_auth_from_url(url):\n     \"\"\"Given a url with authentication components, extract them into a tuple of\n     username,password.\"\"\"\n     if url:\n-        url = unquote(url)\n         parsed = urlparse(url)\n-        return (parsed.username, parsed.password)\n-    else:\n+\n+        try:\n+            return (unquote(parsed.username), unquote(parsed.password))\n+        except AttributeError:\n+            pass\n+\n     return ('', '')\n \n \n\n@@ -705,6 +705,10 @@ class RequestsTestCase(unittest.TestCase):\n         url = 'http://user%user:pass@complex.url.com/path?query=yes'\n         assert ('user%user', 'pass') == requests.utils.get_auth_from_url(url)\n \n+    def test_get_auth_from_url_encoded_hashes(self):\n+        url = 'http://user:pass%23pass@complex.url.com/path?query=yes'\n+        assert ('user', 'pass#pass') == requests.utils.get_auth_from_url(url)\n+\n     def test_cannot_send_unprepared_requests(self):\n         r = requests.Request(url=HTTPBIN)\n         with pytest.raises(ValueError):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#dddb41e34906c1b7eff389921c7b1bb6d734a433", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 2100 | Contributors (this commit): 48 | Commits (past 90d): 16 | Contributors (cumulative): 48 | DMM Complexity: None\n\nDIFF:\n@@ -639,7 +639,7 @@ def get_auth_from_url(url):\n \n         try:\n             return (unquote(parsed.username), unquote(parsed.password))\n-        except AttributeError:\n+        except (AttributeError, TypeError):\n             pass\n \n     return ('', '')\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#b4ca6c95b60230ad604f8b89440fef18cfaa3a8c", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 5 | Lines Deleted: 3 | Files Changed: 1 | Hunks: 3 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 8 | Churn Cumulative: 2108 | Contributors (this commit): 48 | Commits (past 90d): 17 | Contributors (cumulative): 48 | DMM Complexity: 1.0\n\nDIFF:\n@@ -638,11 +638,13 @@ def get_auth_from_url(url):\n         parsed = urlparse(url)\n \n         try:\n-            return (unquote(parsed.username), unquote(parsed.password))\n+            auth = (unquote(parsed.username), unquote(parsed.password))\n         except (AttributeError, TypeError):\n-            pass\n+            auth = ('', '')\n+    else:\n+        auth = ('', '')\n \n-    return ('', '')\n+    return auth\n \n \n def to_native_string(string, encoding='ascii'):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#2f98ef17924d296a4871d909e43f5e7e365d05a3", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 0 | Lines Deleted: 3 | Files Changed: 1 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): -1/0 | Churn Δ: 3 | Churn Cumulative: 2111 | Contributors (this commit): 48 | Commits (past 90d): 18 | Contributors (cumulative): 48 | DMM Complexity: 0.0\n\nDIFF:\n@@ -634,15 +634,12 @@ def except_on_missing_scheme(url):\n def get_auth_from_url(url):\n     \"\"\"Given a url with authentication components, extract them into a tuple of\n     username,password.\"\"\"\n-    if url:\n     parsed = urlparse(url)\n \n     try:\n         auth = (unquote(parsed.username), unquote(parsed.password))\n     except (AttributeError, TypeError):\n         auth = ('', '')\n-    else:\n-        auth = ('', '')\n \n     return auth\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#5b4e9aff0ea2d0876de33f57cece4b06fe4bc194", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 0 | Lines Deleted: 4 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 736 | Contributors (this commit): 20 | Commits (past 90d): 9 | Contributors (cumulative): 20 | DMM Complexity: 0.0\n\nDIFF:\n@@ -286,10 +286,6 @@ class HTTPAdapter(BaseAdapter):\n         username, password = get_auth_from_url(proxy)\n \n         if username and password:\n-            # Proxy auth usernames and passwords will be urlencoded, we need\n-            # to decode them.\n-            username = unquote(username)\n-            password = unquote(password)\n             headers['Proxy-Authorization'] = _basic_auth_str(username,\n                                                              password)\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#87abd9c6094f8b682f7457181adbe768d003fd23", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 3 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 5 | Churn Cumulative: 821 | Contributors (this commit): 18 | Commits (past 90d): 13 | Contributors (cumulative): 18 | DMM Complexity: None\n\nDIFF:\n@@ -7,6 +7,7 @@ requests.utils imports from here, so be careful with imports.\n \"\"\"\n \n import time\n+import calendar\n import collections\n from .compat import cookielib, urlparse, urlunparse, Morsel\n \n@@ -393,8 +394,8 @@ def morsel_to_cookie(morsel):\n         expires = time.time() + morsel['max-age']\n     elif morsel['expires']:\n         time_template = '%a, %d-%b-%Y %H:%M:%S GMT'\n-        expires = time.mktime(\n-            time.strptime(morsel['expires'], time_template)) - time.timezone\n+        expires = calendar.timegm(time.strptime(morsel['expires'],\n+                                                time_template))\n     return create_cookie(\n         comment=morsel['comment'],\n         comment_url=bool(morsel['comment']),\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#a6a83420662b4ae2edda6949cf584415d3495c8e", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 18 | Lines Deleted: 3 | Files Changed: 2 | Hunks: 4 | Methods Changed: 3 | Complexity Δ (Sum/Max): 2/2 | Churn Δ: 21 | Churn Cumulative: 6429 | Contributors (this commit): 101 | Commits (past 90d): 49 | Contributors (cumulative): 118 | DMM Complexity: 1.0\n\nDIFF:\n@@ -635,9 +635,15 @@ def get_auth_from_url(url):\n     \"\"\"Given a url with authentication components, extract them into a tuple of\n     username,password.\"\"\"\n     if url:\n-        url = unquote(url)\n         parsed = urlparse(url)\n-        return (parsed.username, parsed.password)\n+        username = \"\"\n+        password = \"\"\n+\n+        if parsed.username is not None:\n+            username = unquote(parsed.username)\n+        if parsed.password is not None:\n+            password = unquote(parsed.password)\n+        return (username, password)\n     else:\n         return ('', '')\n \n\n@@ -702,7 +702,7 @@ class RequestsTestCase(unittest.TestCase):\n         assert ('user', 'pass pass') == requests.utils.get_auth_from_url(url)\n \n     def test_get_auth_from_url_percent_chars(self):\n-        url = 'http://user%user:pass@complex.url.com/path?query=yes'\n+        url = 'http://user%25user:pass@complex.url.com/path?query=yes'\n         assert ('user%user', 'pass') == requests.utils.get_auth_from_url(url)\n \n     def test_cannot_send_unprepared_requests(self):\n@@ -1092,6 +1092,15 @@ class UtilsTestCase(unittest.TestCase):\n         assert address_in_network('192.168.1.1', '192.168.1.0/24')\n         assert not address_in_network('172.16.0.1', '192.168.1.0/24')\n \n+    def test_get_auth_from_url(self):\n+        from requests.utils import get_auth_from_url\n+        from requests.compat import quote\n+        percent_encoding_test_chars = \"%!*'();:@&=+$,/?#[] \"\n+        url_address = \"request.com/url.html#test\"\n+        url = \"http://\" + quote(percent_encoding_test_chars, '') + ':' + quote(percent_encoding_test_chars, '') + '@' + url_address\n+        (username, password) = get_auth_from_url(url)\n+        assert username == percent_encoding_test_chars\n+        assert password == percent_encoding_test_chars\n \n \n class TestMorselToCookieExpires(unittest.TestCase):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#eb124353af330f8e1249e568e521795652fefb11", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 1 | Churn Cumulative: 4309 | Contributors (this commit): 69 | Commits (past 90d): 31 | Contributors (cumulative): 69 | DMM Complexity: None\n\nDIFF:\n@@ -1097,6 +1097,7 @@ class UtilsTestCase(unittest.TestCase):\n         assert not address_in_network('172.16.0.1', '192.168.1.0/24')\n \n     def test_get_auth_from_url(self):\n+        \"\"\" Ensures that username and password in well-encoded URI as per RFC 3986 are correclty extracted \"\"\"\n         from requests.utils import get_auth_from_url\n         from requests.compat import quote\n         percent_encoding_test_chars = \"%!*'();:@&=+$,/?#[] \"\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#33735480f77891754304e7f13e3cdf83aaaa76aa", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 529 | Contributors (this commit): 9 | Commits (past 90d): 4 | Contributors (cumulative): 9 | DMM Complexity: None\n\nDIFF:\n@@ -42,8 +42,8 @@ is at <http://python-requests.org>.\n \"\"\"\n \n __title__ = 'requests'\n-__version__ = '2.2.0'\n-__build__ = 0x020200\n+__version__ = '2.2.1'\n+__build__ = 0x020201\n __author__ = 'Kenneth Reitz'\n __license__ = 'Apache 2.0'\n __copyright__ = 'Copyright 2014 Kenneth Reitz'\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#4c11fb7f04e1f3bc1fcc0901a81c6af99778e904", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 9026 | Contributors (this commit): 124 | Commits (past 90d): 13 | Contributors (cumulative): 124 | DMM Complexity: None\n\nDIFF:\n@@ -693,7 +693,7 @@ class Response(object):\n         If Response.encoding is None, encoding will be guessed using\n         ``chardet``.\n \n-        The encoding of the response content is determined based soley on HTTP\n+        The encoding of the response content is determined based solely on HTTP\n         headers, following RFC 2616 to the letter. If you can take advantage of\n         non-HTTP knowledge to make a better guess at the encoding, you should\n         set ``r.encoding`` appropriately before accessing this property.\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
