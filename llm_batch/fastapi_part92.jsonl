{"custom_id": "fastapi#e157cf4b9625b2ccdd6a3214ba552bcde9452912", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 2 | Files Changed: 2 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 4 | Churn Cumulative: 6 | Contributors (this commit): 2 | Commits (past 90d): 2 | Contributors (cumulative): 4 | DMM Complexity: None\n\nDIFF:\n@@ -1,6 +1,6 @@\n from fastapi import FastAPI\n \n-app = FastAPI(swagger_ui_parameters={\"syntaxHighlight.theme\": \"obsidian\"})\n+app = FastAPI(swagger_ui_parameters={\"syntaxHighlight\": {\"theme\": \"obsidian\"}})\n \n \n @app.get(\"/users/{username}\")\n\n@@ -12,7 +12,7 @@ def test_swagger_ui():\n         '\"syntaxHighlight\": false' not in response.text\n     ), \"not used parameters should not be included\"\n     assert (\n-        '\"syntaxHighlight.theme\": \"obsidian\"' in response.text\n+        '\"syntaxHighlight\": {\"theme\": \"obsidian\"}' in response.text\n     ), \"parameters with middle dots should be included in a JSON compatible way\"\n     assert (\n         '\"dom_id\": \"#swagger-ui\"' in response.text\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#ccc7c8fef9eaab9d74ad142c50847be7e38e250a", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 5 | Lines Deleted: 2 | Files Changed: 2 | Hunks: 3 | Methods Changed: 2 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 7 | Churn Cumulative: 743 | Contributors (this commit): 13 | Commits (past 90d): 2 | Contributors (cumulative): 15 | DMM Complexity: 0.0\n\nDIFF:\n@@ -413,8 +413,11 @@ class HTTPDigest(HTTPBase):\n             else:\n                 return None\n         if scheme.lower() != \"digest\":\n+            if self.auto_error:\n                 raise HTTPException(\n                     status_code=HTTP_403_FORBIDDEN,\n                     detail=\"Invalid authentication credentials\",\n                 )\n+            else:\n+                return None\n         return HTTPAuthorizationCredentials(scheme=scheme, credentials=credentials)\n\n@@ -37,8 +37,8 @@ def test_security_http_digest_incorrect_scheme_credentials():\n     response = client.get(\n         \"/users/me\", headers={\"Authorization\": \"Other invalidauthorization\"}\n     )\n-    assert response.status_code == 403, response.text\n-    assert response.json() == {\"detail\": \"Invalid authentication credentials\"}\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\"msg\": \"Create an account first\"}\n \n \n def test_openapi_schema():\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#7eabff43de6717a366c79ec92b808da988c085a3", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 12 | Lines Deleted: 18 | Files Changed: 1 | Hunks: 6 | Methods Changed: 6 | Complexity Δ (Sum/Max): -2/0 | Churn Δ: 30 | Churn Cumulative: 269 | Contributors (this commit): 4 | Commits (past 90d): 1 | Contributors (cumulative): 4 | DMM Complexity: 0.0\n\nDIFF:\n@@ -1,3 +1,4 @@\n+import pytest\n from fastapi.testclient import TestClient\n \n from .app.main import app\n@@ -5,29 +6,22 @@ from .app.main import app\n client = TestClient(app)\n \n \n-def test_post_a():\n+@pytest.mark.parametrize(\n+    \"path\", [\"/a/compute\", \"/a/compute/\", \"/b/compute\", \"/b/compute/\"]\n+)\n+def test_post(path):\n     data = {\"a\": 2, \"b\": \"foo\"}\n-    response = client.post(\"/a/compute\", json=data)\n+    response = client.post(path, json=data)\n     assert response.status_code == 200, response.text\n-    data = response.json()\n+    assert data == response.json()\n \n \n-def test_post_a_invalid():\n+@pytest.mark.parametrize(\n+    \"path\", [\"/a/compute\", \"/a/compute/\", \"/b/compute\", \"/b/compute/\"]\n+)\n+def test_post_invalid(path):\n     data = {\"a\": \"bar\", \"b\": \"foo\"}\n-    response = client.post(\"/a/compute\", json=data)\n-    assert response.status_code == 422, response.text\n-\n-\n-def test_post_b():\n-    data = {\"a\": 2, \"b\": \"foo\"}\n-    response = client.post(\"/b/compute/\", json=data)\n-    assert response.status_code == 200, response.text\n-    data = response.json()\n-\n-\n-def test_post_b_invalid():\n-    data = {\"a\": \"bar\", \"b\": \"foo\"}\n-    response = client.post(\"/b/compute/\", json=data)\n+    response = client.post(path, json=data)\n     assert response.status_code == 422, response.text\n \n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#d90030c1e242d1e954a097c253734122eec926e3", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 517 | Contributors (this commit): 2 | Commits (past 90d): 4 | Contributors (cumulative): 2 | DMM Complexity: None\n\nDIFF:\n@@ -1,6 +1,6 @@\n \"\"\"FastAPI framework, high performance, easy to learn, fast to code, ready for production\"\"\"\n \n-__version__ = \"0.115.8\"\n+__version__ = \"0.115.9\"\n \n from starlette import status as status\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#15dd2b67d3f8763d5cd523b79a1c901c05d48bd7", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 26 | Lines Deleted: 4 | Files Changed: 2 | Hunks: 5 | Methods Changed: 2 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 30 | Churn Cumulative: 3168 | Contributors (this commit): 35 | Commits (past 90d): 2 | Contributors (cumulative): 36 | DMM Complexity: 1.0\n\nDIFF:\n@@ -449,15 +449,15 @@ def analyze_param(\n             # We might check here that `default_value is RequiredParam`, but the fact is that the same\n             # parameter might sometimes be a path parameter and sometimes not. See\n             # `tests/test_infer_param_optionality.py` for an example.\n-            field_info = params.Path(annotation=use_annotation)\n+            field_info = params.Path(annotation=type_annotation)\n         elif is_uploadfile_or_nonable_uploadfile_annotation(\n             type_annotation\n         ) or is_uploadfile_sequence_annotation(type_annotation):\n-            field_info = params.File(annotation=use_annotation, default=default_value)\n+            field_info = params.File(annotation=type_annotation, default=default_value)\n         elif not field_annotation_is_scalar(annotation=type_annotation):\n-            field_info = params.Body(annotation=use_annotation, default=default_value)\n+            field_info = params.Body(annotation=type_annotation, default=default_value)\n         else:\n-            field_info = params.Query(annotation=use_annotation, default=default_value)\n+            field_info = params.Query(annotation=type_annotation, default=default_value)\n \n     field = None\n     # It's a field_info, not a dependency\n\n@@ -0,0 +1,22 @@\n+from inspect import signature\n+\n+from fastapi.dependencies.utils import ParamDetails, analyze_param\n+from pydantic import Field\n+from typing_extensions import Annotated\n+\n+from .utils import needs_pydanticv2\n+\n+\n+def func(user: Annotated[int, Field(strict=True)]): ...\n+\n+\n+@needs_pydanticv2\n+def test_analyze_param():\n+    result = analyze_param(\n+        param_name=\"user\",\n+        annotation=signature(func).parameters[\"user\"].annotation,\n+        value=object(),\n+        is_path_param=False,\n+    )\n+    assert isinstance(result, ParamDetails)\n+    assert result.field.field_info.annotation is int\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#433837d9cabd4e87367eda9ab6c81cbea2bdf7dc", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 519 | Contributors (this commit): 2 | Commits (past 90d): 5 | Contributors (cumulative): 2 | DMM Complexity: None\n\nDIFF:\n@@ -1,6 +1,6 @@\n \"\"\"FastAPI framework, high performance, easy to learn, fast to code, ready for production\"\"\"\n \n-__version__ = \"0.115.9\"\n+__version__ = \"0.115.10\"\n \n from starlette import status as status\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#74fe89bf35034aae531ca0a527c37d2f545161f5", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 238 | Lines Deleted: 26 | Files Changed: 6 | Hunks: 9 | Methods Changed: 14 | Complexity Δ (Sum/Max): 17/6 | Churn Δ: 264 | Churn Cumulative: 3432 | Contributors (this commit): 35 | Commits (past 90d): 8 | Contributors (cumulative): 41 | DMM Complexity: 1.0\n\nDIFF:\n@@ -0,0 +1,31 @@\n+import random\n+from typing import Union\n+\n+from fastapi import FastAPI\n+from pydantic import AfterValidator\n+from typing_extensions import Annotated\n+\n+app = FastAPI()\n+\n+data = {\n+    \"isbn-9781529046137\": \"The Hitchhiker's Guide to the Galaxy\",\n+    \"imdb-tt0371724\": \"The Hitchhiker's Guide to the Galaxy\",\n+    \"isbn-9781439512982\": \"Isaac Asimov: The Complete Stories, Vol. 2\",\n+}\n+\n+\n+def check_valid_id(id: str):\n+    if not id.startswith((\"isbn-\", \"imdb-\")):\n+        raise ValueError('Invalid ID format, it must start with \"isbn-\" or \"imdb-\"')\n+    return id\n+\n+\n+@app.get(\"/items/\")\n+async def read_items(\n+    id: Annotated[Union[str, None], AfterValidator(check_valid_id)] = None,\n+):\n+    if id:\n+        item = data.get(id)\n+    else:\n+        id, item = random.choice(list(data.items()))\n+    return {\"id\": id, \"name\": item}\n\n@@ -0,0 +1,30 @@\n+import random\n+from typing import Annotated\n+\n+from fastapi import FastAPI\n+from pydantic import AfterValidator\n+\n+app = FastAPI()\n+\n+data = {\n+    \"isbn-9781529046137\": \"The Hitchhiker's Guide to the Galaxy\",\n+    \"imdb-tt0371724\": \"The Hitchhiker's Guide to the Galaxy\",\n+    \"isbn-9781439512982\": \"Isaac Asimov: The Complete Stories, Vol. 2\",\n+}\n+\n+\n+def check_valid_id(id: str):\n+    if not id.startswith((\"isbn-\", \"imdb-\")):\n+        raise ValueError('Invalid ID format, it must start with \"isbn-\" or \"imdb-\"')\n+    return id\n+\n+\n+@app.get(\"/items/\")\n+async def read_items(\n+    id: Annotated[str | None, AfterValidator(check_valid_id)] = None,\n+):\n+    if id:\n+        item = data.get(id)\n+    else:\n+        id, item = random.choice(list(data.items()))\n+    return {\"id\": id, \"name\": item}\n\n@@ -0,0 +1,30 @@\n+import random\n+from typing import Annotated, Union\n+\n+from fastapi import FastAPI\n+from pydantic import AfterValidator\n+\n+app = FastAPI()\n+\n+data = {\n+    \"isbn-9781529046137\": \"The Hitchhiker's Guide to the Galaxy\",\n+    \"imdb-tt0371724\": \"The Hitchhiker's Guide to the Galaxy\",\n+    \"isbn-9781439512982\": \"Isaac Asimov: The Complete Stories, Vol. 2\",\n+}\n+\n+\n+def check_valid_id(id: str):\n+    if not id.startswith((\"isbn-\", \"imdb-\")):\n+        raise ValueError('Invalid ID format, it must start with \"isbn-\" or \"imdb-\"')\n+    return id\n+\n+\n+@app.get(\"/items/\")\n+async def read_items(\n+    id: Annotated[Union[str, None], AfterValidator(check_valid_id)] = None,\n+):\n+    if id:\n+        item = data.get(id)\n+    else:\n+        id, item = random.choice(list(data.items()))\n+    return {\"id\": id, \"name\": item}\n\n@@ -449,15 +449,15 @@ def analyze_param(\n             # We might check here that `default_value is RequiredParam`, but the fact is that the same\n             # parameter might sometimes be a path parameter and sometimes not. See\n             # `tests/test_infer_param_optionality.py` for an example.\n-            field_info = params.Path(annotation=type_annotation)\n+            field_info = params.Path(annotation=use_annotation)\n         elif is_uploadfile_or_nonable_uploadfile_annotation(\n             type_annotation\n         ) or is_uploadfile_sequence_annotation(type_annotation):\n-            field_info = params.File(annotation=type_annotation, default=default_value)\n+            field_info = params.File(annotation=use_annotation, default=default_value)\n         elif not field_annotation_is_scalar(annotation=type_annotation):\n-            field_info = params.Body(annotation=type_annotation, default=default_value)\n+            field_info = params.Body(annotation=use_annotation, default=default_value)\n         else:\n-            field_info = params.Query(annotation=type_annotation, default=default_value)\n+            field_info = params.Query(annotation=use_annotation, default=default_value)\n \n     field = None\n     # It's a field_info, not a dependency\n\n@@ -1,22 +0,0 @@\n-from inspect import signature\n-\n-from fastapi.dependencies.utils import ParamDetails, analyze_param\n-from pydantic import Field\n-from typing_extensions import Annotated\n-\n-from .utils import needs_pydanticv2\n-\n-\n-def func(user: Annotated[int, Field(strict=True)]): ...\n-\n-\n-@needs_pydanticv2\n-def test_analyze_param():\n-    result = analyze_param(\n-        param_name=\"user\",\n-        annotation=signature(func).parameters[\"user\"].annotation,\n-        value=object(),\n-        is_path_param=False,\n-    )\n-    assert isinstance(result, ParamDetails)\n-    assert result.field.field_info.annotation is int\n\n@@ -0,0 +1,143 @@\n+import importlib\n+\n+import pytest\n+from dirty_equals import IsStr\n+from fastapi.testclient import TestClient\n+from inline_snapshot import snapshot\n+\n+from ...utils import needs_py39, needs_py310, needs_pydanticv2\n+\n+\n+@pytest.fixture(\n+    name=\"client\",\n+    params=[\n+        pytest.param(\"tutorial015_an\", marks=needs_pydanticv2),\n+        pytest.param(\"tutorial015_an_py310\", marks=(needs_py310, needs_pydanticv2)),\n+        pytest.param(\"tutorial015_an_py39\", marks=(needs_py39, needs_pydanticv2)),\n+    ],\n+)\n+def get_client(request: pytest.FixtureRequest):\n+    mod = importlib.import_module(\n+        f\"docs_src.query_params_str_validations.{request.param}\"\n+    )\n+\n+    client = TestClient(mod.app)\n+    return client\n+\n+\n+def test_get_random_item(client: TestClient):\n+    response = client.get(\"/items\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\"id\": IsStr(), \"name\": IsStr()}\n+\n+\n+def test_get_item(client: TestClient):\n+    response = client.get(\"/items?id=isbn-9781529046137\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n+        \"id\": \"isbn-9781529046137\",\n+        \"name\": \"The Hitchhiker's Guide to the Galaxy\",\n+    }\n+\n+\n+def test_get_item_does_not_exist(client: TestClient):\n+    response = client.get(\"/items?id=isbn-nope\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\"id\": \"isbn-nope\", \"name\": None}\n+\n+\n+def test_get_invalid_item(client: TestClient):\n+    response = client.get(\"/items?id=wtf-yes\")\n+    assert response.status_code == 422, response.text\n+    assert response.json() == snapshot(\n+        {\n+            \"detail\": [\n+                {\n+                    \"type\": \"value_error\",\n+                    \"loc\": [\"query\", \"id\"],\n+                    \"msg\": 'Value error, Invalid ID format, it must start with \"isbn-\" or \"imdb-\"',\n+                    \"input\": \"wtf-yes\",\n+                    \"ctx\": {\"error\": {}},\n+                }\n+            ]\n+        }\n+    )\n+\n+\n+def test_openapi_schema(client: TestClient):\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == snapshot(\n+        {\n+            \"openapi\": \"3.1.0\",\n+            \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n+            \"paths\": {\n+                \"/items/\": {\n+                    \"get\": {\n+                        \"summary\": \"Read Items\",\n+                        \"operationId\": \"read_items_items__get\",\n+                        \"parameters\": [\n+                            {\n+                                \"name\": \"id\",\n+                                \"in\": \"query\",\n+                                \"required\": False,\n+                                \"schema\": {\n+                                    \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n+                                    \"title\": \"Id\",\n+                                },\n+                            }\n+                        ],\n+                        \"responses\": {\n+                            \"200\": {\n+                                \"description\": \"Successful Response\",\n+                                \"content\": {\"application/json\": {\"schema\": {}}},\n+                            },\n+                            \"422\": {\n+                                \"description\": \"Validation Error\",\n+                                \"content\": {\n+                                    \"application/json\": {\n+                                        \"schema\": {\n+                                            \"$ref\": \"#/components/schemas/HTTPValidationError\"\n+                                        }\n+                                    }\n+                                },\n+                            },\n+                        },\n+                    }\n+                }\n+            },\n+            \"components\": {\n+                \"schemas\": {\n+                    \"HTTPValidationError\": {\n+                        \"properties\": {\n+                            \"detail\": {\n+                                \"items\": {\n+                                    \"$ref\": \"#/components/schemas/ValidationError\"\n+                                },\n+                                \"type\": \"array\",\n+                                \"title\": \"Detail\",\n+                            }\n+                        },\n+                        \"type\": \"object\",\n+                        \"title\": \"HTTPValidationError\",\n+                    },\n+                    \"ValidationError\": {\n+                        \"properties\": {\n+                            \"loc\": {\n+                                \"items\": {\n+                                    \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n+                                },\n+                                \"type\": \"array\",\n+                                \"title\": \"Location\",\n+                            },\n+                            \"msg\": {\"type\": \"string\", \"title\": \"Message\"},\n+                            \"type\": {\"type\": \"string\", \"title\": \"Error Type\"},\n+                        },\n+                        \"type\": \"object\",\n+                        \"required\": [\"loc\", \"msg\", \"type\"],\n+                        \"title\": \"ValidationError\",\n+                    },\n+                }\n+            },\n+        }\n+    )\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#3824664620433f0055125adbf2fc212ced2bdf94", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 521 | Contributors (this commit): 2 | Commits (past 90d): 6 | Contributors (cumulative): 2 | DMM Complexity: None\n\nDIFF:\n@@ -1,6 +1,6 @@\n \"\"\"FastAPI framework, high performance, easy to learn, fast to code, ready for production\"\"\"\n \n-__version__ = \"0.115.10\"\n+__version__ = \"0.115.11\"\n \n from starlette import status as status\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#8c94e97c89f617ad808d8ca24da6e52a238bcee9", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 134 | Lines Deleted: 134 | Files Changed: 11 | Hunks: 30 | Methods Changed: 17 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 268 | Churn Cumulative: 14558 | Contributors (this commit): 85 | Commits (past 90d): 15 | Contributors (cumulative): 130 | DMM Complexity: None\n\nDIFF:\n@@ -133,9 +133,9 @@ def get_param_sub_dependant(\n \n \n def get_parameterless_sub_dependant(*, depends: params.Depends, path: str) -> Dependant:\n-    assert callable(\n-        depends.dependency\n-    ), \"A parameter-less dependency must have a callable dependency\"\n+    assert callable(depends.dependency), (\n+        \"A parameter-less dependency must have a callable dependency\"\n+    )\n     return get_sub_dependant(depends=depends, dependency=depends.dependency, path=path)\n \n \n@@ -302,9 +302,9 @@ def get_dependant(\n             type_annotation=param_details.type_annotation,\n             dependant=dependant,\n         ):\n-            assert (\n-                param_details.field is None\n-            ), f\"Cannot specify multiple FastAPI annotations for {param_name!r}\"\n+            assert param_details.field is None, (\n+                f\"Cannot specify multiple FastAPI annotations for {param_name!r}\"\n+            )\n             continue\n         assert param_details.field is not None\n         if isinstance(param_details.field.field_info, params.Body):\n@@ -439,9 +439,9 @@ def analyze_param(\n         ),\n     ):\n         assert depends is None, f\"Cannot specify `Depends` for type {type_annotation!r}\"\n-        assert (\n-            field_info is None\n-        ), f\"Cannot specify FastAPI annotation for type {type_annotation!r}\"\n+        assert field_info is None, (\n+            f\"Cannot specify FastAPI annotation for type {type_annotation!r}\"\n+        )\n     # Handle default assignations, neither field_info nor depends was not found in Annotated nor default value\n     elif field_info is None and depends is None:\n         default_value = value if value is not inspect.Signature.empty else RequiredParam\n@@ -494,9 +494,9 @@ def analyze_param(\n             field_info=field_info,\n         )\n         if is_path_param:\n-            assert is_scalar_field(\n-                field=field\n-            ), \"Path params must be of one of the supported types\"\n+            assert is_scalar_field(field=field), (\n+                \"Path params must be of one of the supported types\"\n+            )\n         elif isinstance(field_info, params.Query):\n             assert (\n                 is_scalar_field(field)\n@@ -521,9 +521,9 @@ def add_param_to_fields(*, field: ModelField, dependant: Dependant) -> None:\n     elif field_info_in == params.ParamTypes.header:\n         dependant.header_params.append(field)\n     else:\n-        assert (\n-            field_info_in == params.ParamTypes.cookie\n-        ), f\"non-body parameters must be in path, query, header or cookie: {field.name}\"\n+        assert field_info_in == params.ParamTypes.cookie, (\n+            f\"non-body parameters must be in path, query, header or cookie: {field.name}\"\n+        )\n         dependant.cookie_params.append(field)\n \n \n@@ -782,9 +782,9 @@ def request_params_to_args(\n \n     if single_not_embedded_field:\n         field_info = first_field.field_info\n-        assert isinstance(\n-            field_info, params.Param\n-        ), \"Params must be subclasses of Param\"\n+        assert isinstance(field_info, params.Param), (\n+            \"Params must be subclasses of Param\"\n+        )\n         loc: Tuple[str, ...] = (field_info.in_.value,)\n         v_, errors_ = _validate_value_with_model_field(\n             field=first_field, value=params_to_process, values=values, loc=loc\n@@ -794,9 +794,9 @@ def request_params_to_args(\n     for field in fields:\n         value = _get_multidict_value(field, received_params)\n         field_info = field.field_info\n-        assert isinstance(\n-            field_info, params.Param\n-        ), \"Params must be subclasses of Param\"\n+        assert isinstance(field_info, params.Param), (\n+            \"Params must be subclasses of Param\"\n+        )\n         loc = (field_info.in_.value, field.alias)\n         v_, errors_ = _validate_value_with_model_field(\n             field=field, value=value, values=values, loc=loc\n\n@@ -364,9 +364,9 @@ def get_openapi_path(\n                     openapi_response = operation_responses.setdefault(\n                         status_code_key, {}\n                     )\n-                    assert isinstance(\n-                        process_response, dict\n-                    ), \"An additional response must be a dict\"\n+                    assert isinstance(process_response, dict), (\n+                        \"An additional response must be a dict\"\n+                    )\n                     field = route.response_fields.get(additional_status_code)\n                     additional_field_schema: Optional[Dict[str, Any]] = None\n                     if field:\n@@ -434,9 +434,9 @@ def get_fields_from_routes(\n             route, routing.APIRoute\n         ):\n             if route.body_field:\n-                assert isinstance(\n-                    route.body_field, ModelField\n-                ), \"A request body must be a Pydantic Field\"\n+                assert isinstance(route.body_field, ModelField), (\n+                    \"A request body must be a Pydantic Field\"\n+                )\n                 body_fields_from_routes.append(route.body_field)\n             if route.response_field:\n                 responses_from_routes.append(route.response_field)\n\n@@ -504,9 +504,9 @@ class APIRoute(routing.Route):\n             status_code = int(status_code)\n         self.status_code = status_code\n         if self.response_model:\n-            assert is_body_allowed_for_status_code(\n-                status_code\n-            ), f\"Status code {status_code} must not have a response body\"\n+            assert is_body_allowed_for_status_code(status_code), (\n+                f\"Status code {status_code} must not have a response body\"\n+            )\n             response_name = \"Response_\" + self.unique_id\n             self.response_field = create_model_field(\n                 name=response_name,\n@@ -537,9 +537,9 @@ class APIRoute(routing.Route):\n             assert isinstance(response, dict), \"An additional response must be a dict\"\n             model = response.get(\"model\")\n             if model:\n-                assert is_body_allowed_for_status_code(\n-                    additional_status_code\n-                ), f\"Status code {additional_status_code} must not have a response body\"\n+                assert is_body_allowed_for_status_code(additional_status_code), (\n+                    f\"Status code {additional_status_code} must not have a response body\"\n+                )\n                 response_name = f\"Response_{additional_status_code}_{self.unique_id}\"\n                 response_field = create_model_field(\n                     name=response_name, type_=model, mode=\"serialization\"\n@@ -844,9 +844,9 @@ class APIRouter(routing.Router):\n         )\n         if prefix:\n             assert prefix.startswith(\"/\"), \"A path prefix must start with '/'\"\n-            assert not prefix.endswith(\n-                \"/\"\n-            ), \"A path prefix must not end with '/', as the routes will start with '/'\"\n+            assert not prefix.endswith(\"/\"), (\n+                \"A path prefix must not end with '/', as the routes will start with '/'\"\n+            )\n         self.prefix = prefix\n         self.tags: List[Union[str, Enum]] = tags or []\n         self.dependencies = list(dependencies or [])\n@@ -1256,9 +1256,9 @@ class APIRouter(routing.Router):\n         \"\"\"\n         if prefix:\n             assert prefix.startswith(\"/\"), \"A path prefix must start with '/'\"\n-            assert not prefix.endswith(\n-                \"/\"\n-            ), \"A path prefix must not end with '/', as the routes will start with '/'\"\n+            assert not prefix.endswith(\"/\"), (\n+                \"A path prefix must not end with '/', as the routes will start with '/'\"\n+            )\n         else:\n             for r in router.routes:\n                 path = getattr(r, \"path\")  # noqa: B009\n\n@@ -38,9 +38,9 @@ def get_langs() -> dict[str, str]:\n \n def generate_lang_path(*, lang: str, path: Path) -> Path:\n     en_docs_path = Path(\"docs/en/docs\")\n-    assert str(path).startswith(\n-        str(en_docs_path)\n-    ), f\"Path must be inside {en_docs_path}\"\n+    assert str(path).startswith(str(en_docs_path)), (\n+        f\"Path must be inside {en_docs_path}\"\n+    )\n     lang_docs_path = Path(f\"docs/{lang}/docs\")\n     out_path = Path(str(path).replace(str(en_docs_path), str(lang_docs_path)))\n     return out_path\n@@ -56,9 +56,9 @@ def translate_page(*, lang: str, path: Path) -> None:\n     lang_prompt_content = lang_prompt_path.read_text()\n \n     en_docs_path = Path(\"docs/en/docs\")\n-    assert str(path).startswith(\n-        str(en_docs_path)\n-    ), f\"Path must be inside {en_docs_path}\"\n+    assert str(path).startswith(str(en_docs_path)), (\n+        f\"Path must be inside {en_docs_path}\"\n+    )\n     out_path = generate_lang_path(lang=lang, path=path)\n     out_path.parent.mkdir(parents=True, exist_ok=True)\n     original_content = path.read_text()\n\n@@ -48,7 +48,7 @@ expected_schema = {\n                         \"type\": \"array\",\n                     },\n                     \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n-                    \"type\": {\"title\": \"Error \" \"Type\", \"type\": \"string\"},\n+                    \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                 },\n                 \"required\": [\"loc\", \"msg\", \"type\"],\n                 \"title\": \"ValidationError\",\n@@ -73,7 +73,7 @@ expected_schema = {\n                 \"responses\": {\n                     \"200\": {\n                         \"content\": {\"application/json\": {\"schema\": {}}},\n-                        \"description\": \"Successful \" \"Response\",\n+                        \"description\": \"Successful Response\",\n                     },\n                     \"422\": {\n                         \"content\": {\n@@ -83,7 +83,7 @@ expected_schema = {\n                                 }\n                             }\n                         },\n-                        \"description\": \"Validation \" \"Error\",\n+                        \"description\": \"Validation Error\",\n                     },\n                 },\n                 \"summary\": \"Foo Handler\",\n\n@@ -55,7 +55,7 @@ def test_openapi_schema():\n                     \"responses\": {\n                         \"200\": {\n                             \"content\": {\"application/json\": {\"schema\": {}}},\n-                            \"description\": \"Successful \" \"Response\",\n+                            \"description\": \"Successful Response\",\n                         }\n                     },\n                     \"summary\": \"A\",\n@@ -67,7 +67,7 @@ def test_openapi_schema():\n                     \"responses\": {\n                         \"200\": {\n                             \"content\": {\"application/json\": {\"schema\": {}}},\n-                            \"description\": \"Successful \" \"Response\",\n+                            \"description\": \"Successful Response\",\n                         }\n                     },\n                     \"summary\": \"B\",\n\n@@ -41,7 +41,7 @@ schema = {\n                         \"type\": \"array\",\n                     },\n                     \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n-                    \"type\": {\"title\": \"Error \" \"Type\", \"type\": \"string\"},\n+                    \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                 },\n                 \"required\": [\"loc\", \"msg\", \"type\"],\n                 \"title\": \"ValidationError\",\n@@ -66,7 +66,7 @@ schema = {\n                 \"responses\": {\n                     \"200\": {\n                         \"content\": {\"application/json\": {\"schema\": {}}},\n-                        \"description\": \"Successful \" \"Response\",\n+                        \"description\": \"Successful Response\",\n                     },\n                     \"422\": {\n                         \"content\": {\n@@ -76,7 +76,7 @@ schema = {\n                                 }\n                             }\n                         },\n-                        \"description\": \"Validation \" \"Error\",\n+                        \"description\": \"Validation Error\",\n                     },\n                 },\n                 \"summary\": \"Get Deps\",\n\n@@ -8,31 +8,31 @@ client = TestClient(app)\n def test_swagger_ui():\n     response = client.get(\"/docs\")\n     assert response.status_code == 200, response.text\n-    assert (\n-        '\"syntaxHighlight\": false' in response.text\n-    ), \"syntaxHighlight should be included and converted to JSON\"\n-    assert (\n-        '\"dom_id\": \"#swagger-ui\"' in response.text\n-    ), \"default configs should be preserved\"\n+    assert '\"syntaxHighlight\": false' in response.text, (\n+        \"syntaxHighlight should be included and converted to JSON\"\n+    )\n+    assert '\"dom_id\": \"#swagger-ui\"' in response.text, (\n+        \"default configs should be preserved\"\n+    )\n     assert \"presets: [\" in response.text, \"default configs should be preserved\"\n-    assert (\n-        \"SwaggerUIBundle.presets.apis,\" in response.text\n-    ), \"default configs should be preserved\"\n-    assert (\n-        \"SwaggerUIBundle.SwaggerUIStandalonePreset\" in response.text\n-    ), \"default configs should be preserved\"\n-    assert (\n-        '\"layout\": \"BaseLayout\",' in response.text\n-    ), \"default configs should be preserved\"\n-    assert (\n-        '\"deepLinking\": true,' in response.text\n-    ), \"default configs should be preserved\"\n-    assert (\n-        '\"showExtensions\": true,' in response.text\n-    ), \"default configs should be preserved\"\n-    assert (\n-        '\"showCommonExtensions\": true,' in response.text\n-    ), \"default configs should be preserved\"\n+    assert \"SwaggerUIBundle.presets.apis,\" in response.text, (\n+        \"default configs should be preserved\"\n+    )\n+    assert \"SwaggerUIBundle.SwaggerUIStandalonePreset\" in response.text, (\n+        \"default configs should be preserved\"\n+    )\n+    assert '\"layout\": \"BaseLayout\",' in response.text, (\n+        \"default configs should be preserved\"\n+    )\n+    assert '\"deepLinking\": true,' in response.text, (\n+        \"default configs should be preserved\"\n+    )\n+    assert '\"showExtensions\": true,' in response.text, (\n+        \"default configs should be preserved\"\n+    )\n+    assert '\"showCommonExtensions\": true,' in response.text, (\n+        \"default configs should be preserved\"\n+    )\n \n \n def test_get_users():\n\n@@ -8,34 +8,34 @@ client = TestClient(app)\n def test_swagger_ui():\n     response = client.get(\"/docs\")\n     assert response.status_code == 200, response.text\n-    assert (\n-        '\"syntaxHighlight\": false' not in response.text\n-    ), \"not used parameters should not be included\"\n-    assert (\n-        '\"syntaxHighlight\": {\"theme\": \"obsidian\"}' in response.text\n-    ), \"parameters with middle dots should be included in a JSON compatible way\"\n-    assert (\n-        '\"dom_id\": \"#swagger-ui\"' in response.text\n-    ), \"default configs should be preserved\"\n+    assert '\"syntaxHighlight\": false' not in response.text, (\n+        \"not used parameters should not be included\"\n+    )\n+    assert '\"syntaxHighlight\": {\"theme\": \"obsidian\"}' in response.text, (\n+        \"parameters with middle dots should be included in a JSON compatible way\"\n+    )\n+    assert '\"dom_id\": \"#swagger-ui\"' in response.text, (\n+        \"default configs should be preserved\"\n+    )\n     assert \"presets: [\" in response.text, \"default configs should be preserved\"\n-    assert (\n-        \"SwaggerUIBundle.presets.apis,\" in response.text\n-    ), \"default configs should be preserved\"\n-    assert (\n-        \"SwaggerUIBundle.SwaggerUIStandalonePreset\" in response.text\n-    ), \"default configs should be preserved\"\n-    assert (\n-        '\"layout\": \"BaseLayout\",' in response.text\n-    ), \"default configs should be preserved\"\n-    assert (\n-        '\"deepLinking\": true,' in response.text\n-    ), \"default configs should be preserved\"\n-    assert (\n-        '\"showExtensions\": true,' in response.text\n-    ), \"default configs should be preserved\"\n-    assert (\n-        '\"showCommonExtensions\": true,' in response.text\n-    ), \"default configs should be preserved\"\n+    assert \"SwaggerUIBundle.presets.apis,\" in response.text, (\n+        \"default configs should be preserved\"\n+    )\n+    assert \"SwaggerUIBundle.SwaggerUIStandalonePreset\" in response.text, (\n+        \"default configs should be preserved\"\n+    )\n+    assert '\"layout\": \"BaseLayout\",' in response.text, (\n+        \"default configs should be preserved\"\n+    )\n+    assert '\"deepLinking\": true,' in response.text, (\n+        \"default configs should be preserved\"\n+    )\n+    assert '\"showExtensions\": true,' in response.text, (\n+        \"default configs should be preserved\"\n+    )\n+    assert '\"showCommonExtensions\": true,' in response.text, (\n+        \"default configs should be preserved\"\n+    )\n \n \n def test_get_users():\n\n@@ -8,34 +8,34 @@ client = TestClient(app)\n def test_swagger_ui():\n     response = client.get(\"/docs\")\n     assert response.status_code == 200, response.text\n-    assert (\n-        '\"deepLinking\": false,' in response.text\n-    ), \"overridden configs should be preserved\"\n-    assert (\n-        '\"deepLinking\": true' not in response.text\n-    ), \"overridden configs should not include the old value\"\n-    assert (\n-        '\"syntaxHighlight\": false' not in response.text\n-    ), \"not used parameters should not be included\"\n-    assert (\n-        '\"dom_id\": \"#swagger-ui\"' in response.text\n-    ), \"default configs should be preserved\"\n+    assert '\"deepLinking\": false,' in response.text, (\n+        \"overridden configs should be preserved\"\n+    )\n+    assert '\"deepLinking\": true' not in response.text, (\n+        \"overridden configs should not include the old value\"\n+    )\n+    assert '\"syntaxHighlight\": false' not in response.text, (\n+        \"not used parameters should not be included\"\n+    )\n+    assert '\"dom_id\": \"#swagger-ui\"' in response.text, (\n+        \"default configs should be preserved\"\n+    )\n     assert \"presets: [\" in response.text, \"default configs should be preserved\"\n-    assert (\n-        \"SwaggerUIBundle.presets.apis,\" in response.text\n-    ), \"default configs should be preserved\"\n-    assert (\n-        \"SwaggerUIBundle.SwaggerUIStandalonePreset\" in response.text\n-    ), \"default configs should be preserved\"\n-    assert (\n-        '\"layout\": \"BaseLayout\",' in response.text\n-    ), \"default configs should be preserved\"\n-    assert (\n-        '\"showExtensions\": true,' in response.text\n-    ), \"default configs should be preserved\"\n-    assert (\n-        '\"showCommonExtensions\": true,' in response.text\n-    ), \"default configs should be preserved\"\n+    assert \"SwaggerUIBundle.presets.apis,\" in response.text, (\n+        \"default configs should be preserved\"\n+    )\n+    assert \"SwaggerUIBundle.SwaggerUIStandalonePreset\" in response.text, (\n+        \"default configs should be preserved\"\n+    )\n+    assert '\"layout\": \"BaseLayout\",' in response.text, (\n+        \"default configs should be preserved\"\n+    )\n+    assert '\"showExtensions\": true,' in response.text, (\n+        \"default configs should be preserved\"\n+    )\n+    assert '\"showCommonExtensions\": true,' in response.text, (\n+        \"default configs should be preserved\"\n+    )\n \n \n def test_get_users():\n\n@@ -71,9 +71,9 @@ def test_crud_app(client: TestClient):\n         assert response.json() == snapshot(\n             {\"age\": 30, \"id\": IsInt(), \"name\": \"Dead Pond\"}\n         )\n-        assert (\n-            response.json()[\"id\"] != 9000\n-        ), \"The ID should be generated by the database\"\n+        assert response.json()[\"id\"] != 9000, (\n+            \"The ID should be generated by the database\"\n+        )\n \n         # Read a hero\n         hero_id = response.json()[\"id\"]\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#628c34e0cae200564d191c95d7edea78c88c4b5e", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 523 | Contributors (this commit): 2 | Commits (past 90d): 6 | Contributors (cumulative): 2 | DMM Complexity: None\n\nDIFF:\n@@ -1,6 +1,6 @@\n \"\"\"FastAPI framework, high performance, easy to learn, fast to code, ready for production\"\"\"\n \n-__version__ = \"0.115.11\"\n+__version__ = \"0.115.12\"\n \n from starlette import status as status\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#ea42ebda809a06108115dbed1c010ac7e5e7ef1d", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 47 | Lines Deleted: 14 | Files Changed: 3 | Hunks: 13 | Methods Changed: 4 | Complexity Δ (Sum/Max): 2/2 | Churn Δ: 61 | Churn Cumulative: 796 | Contributors (this commit): 4 | Commits (past 90d): 4 | Contributors (cumulative): 8 | DMM Complexity: 1.0\n\nDIFF:\n@@ -5,7 +5,13 @@ from dirty_equals import IsDict\n from fastapi.testclient import TestClient\n from inline_snapshot import snapshot\n \n-from tests.utils import needs_py39, needs_py310, needs_pydanticv1, needs_pydanticv2\n+from tests.utils import (\n+    needs_py39,\n+    needs_py310,\n+    needs_pydanticv1,\n+    needs_pydanticv2,\n+    pydantic_snapshot,\n+)\n \n \n @pytest.fixture(\n@@ -59,8 +65,8 @@ def test_cookie_param_model_defaults(client: TestClient):\n def test_cookie_param_model_invalid(client: TestClient):\n     response = client.get(\"/items/\")\n     assert response.status_code == 422\n-    assert response.json() == snapshot(\n-        IsDict(\n+    assert response.json() == pydantic_snapshot(\n+        v2=snapshot(\n             {\n                 \"detail\": [\n                     {\n@@ -71,9 +77,8 @@ def test_cookie_param_model_invalid(client: TestClient):\n                     }\n                 ]\n             }\n-        )\n-        | IsDict(\n-            # TODO: remove when deprecating Pydantic v1\n+        ),\n+        v1=snapshot(\n             {\n                 \"detail\": [\n                     {\n@@ -83,7 +88,7 @@ def test_cookie_param_model_invalid(client: TestClient):\n                     }\n                 ]\n             }\n-        )\n+        ),\n     )\n \n \n@@ -144,19 +149,24 @@ def test_openapi_schema(client: TestClient):\n                                 \"name\": \"fatebook_tracker\",\n                                 \"in\": \"cookie\",\n                                 \"required\": False,\n-                                \"schema\": IsDict(\n+                                \"schema\": pydantic_snapshot(\n+                                    v2=snapshot(\n                                         {\n-                                        \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n+                                            \"anyOf\": [\n+                                                {\"type\": \"string\"},\n+                                                {\"type\": \"null\"},\n+                                            ],\n                                             \"title\": \"Fatebook Tracker\",\n                                         }\n-                                )\n-                                | IsDict(\n+                                    ),\n+                                    v1=snapshot(\n                                         # TODO: remove when deprecating Pydantic v1\n                                         {\n                                             \"type\": \"string\",\n                                             \"title\": \"Fatebook Tracker\",\n                                         }\n                                     ),\n+                                ),\n                             },\n                             {\n                                 \"name\": \"googall_tracker\",\n\n@@ -4,7 +4,7 @@ import warnings\n import pytest\n from dirty_equals import IsDict, IsInt\n from fastapi.testclient import TestClient\n-from inline_snapshot import snapshot\n+from inline_snapshot import Is, snapshot\n from sqlalchemy import StaticPool\n from sqlmodel import SQLModel, create_engine\n from sqlmodel.main import default_registry\n@@ -117,14 +117,14 @@ def test_crud_app(client: TestClient):\n         )\n         assert response.status_code == 200, response.text\n         assert response.json() == snapshot(\n-            {\"name\": \"Dog Pond\", \"age\": None, \"id\": hero_id}\n+            {\"name\": \"Dog Pond\", \"age\": None, \"id\": Is(hero_id)}\n         )\n \n         # Get updated hero\n         response = client.get(f\"/heroes/{hero_id}\")\n         assert response.status_code == 200, response.text\n         assert response.json() == snapshot(\n-            {\"name\": \"Dog Pond\", \"age\": None, \"id\": hero_id}\n+            {\"name\": \"Dog Pond\", \"age\": None, \"id\": Is(hero_id)}\n         )\n \n         # Delete a hero\n\n@@ -2,6 +2,7 @@ import sys\n \n import pytest\n from fastapi._compat import PYDANTIC_V2\n+from inline_snapshot import Snapshot\n \n needs_py39 = pytest.mark.skipif(sys.version_info < (3, 9), reason=\"requires python3.9+\")\n needs_py310 = pytest.mark.skipif(\n@@ -9,3 +10,25 @@ needs_py310 = pytest.mark.skipif(\n )\n needs_pydanticv2 = pytest.mark.skipif(not PYDANTIC_V2, reason=\"requires Pydantic v2\")\n needs_pydanticv1 = pytest.mark.skipif(PYDANTIC_V2, reason=\"requires Pydantic v1\")\n+\n+\n+def pydantic_snapshot(\n+    *,\n+    v2: Snapshot,\n+    v1: Snapshot,  # TODO: remove v1 argument when deprecating Pydantic v1\n+):\n+    \"\"\"\n+    This function should be used like this:\n+\n+    >>> assert value == pydantic_snapshot(v2=snapshot(),v1=snapshot())\n+\n+    inline-snapshot will create the snapshots when pytest is executed for each versions of pydantic.\n+\n+    It is also possible to use the function inside snapshots for version-specific values.\n+\n+    >>> assert value == snapshot({\n+        \"data\": \"some data\",\n+        \"version_specific\": pydantic_snapshot(v2=snapshot(),v1=snapshot()),\n+    })\n+    \"\"\"\n+    return v2 if PYDANTIC_V2 else v1\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#8fa56b46a16859aaa6dd9d3eef140ef0682253f4", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 4 | Lines Deleted: 4 | Files Changed: 4 | Hunks: 4 | Methods Changed: 5 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 8 | Churn Cumulative: 2319 | Contributors (this commit): 25 | Commits (past 90d): 4 | Contributors (cumulative): 36 | DMM Complexity: None\n\nDIFF:\n@@ -29,7 +29,7 @@ async def redoc_html():\n     return get_redoc_html(\n         openapi_url=app.openapi_url,\n         title=app.title + \" - ReDoc\",\n-        redoc_js_url=\"https://unpkg.com/redoc@next/bundles/redoc.standalone.js\",\n+        redoc_js_url=\"https://unpkg.com/redoc@2/bundles/redoc.standalone.js\",\n     )\n \n \n\n@@ -188,7 +188,7 @@ def get_redoc_html(\n             It is normally set to a CDN URL.\n             \"\"\"\n         ),\n-    ] = \"https://cdn.jsdelivr.net/npm/redoc@next/bundles/redoc.standalone.js\",\n+    ] = \"https://cdn.jsdelivr.net/npm/redoc@2/bundles/redoc.standalone.js\",\n     redoc_favicon_url: Annotated[\n         str,\n         Doc(\n\n@@ -43,7 +43,7 @@ def test_redoc():\n     response = client.get(\"/redoc\")\n     assert response.status_code == 200, response.text\n     assert response.headers[\"content-type\"] == \"text/html; charset=utf-8\"\n-    assert \"redoc@next\" in response.text\n+    assert \"redoc@2\" in response.text\n \n \n def test_enum_status_code_response():\n\n@@ -33,7 +33,7 @@ def test_swagger_ui_oauth2_redirect_html(client: TestClient):\n def test_redoc_html(client: TestClient):\n     response = client.get(\"/redoc\")\n     assert response.status_code == 200, response.text\n-    assert \"https://unpkg.com/redoc@next/bundles/redoc.standalone.js\" in response.text\n+    assert \"https://unpkg.com/redoc@2/bundles/redoc.standalone.js\" in response.text\n \n \n def test_api(client: TestClient):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
