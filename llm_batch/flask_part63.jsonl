{"custom_id": "flask#1d4448abe335741c61b3c8c5f99e1607a13f7e3d", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 20 | Lines Deleted: 0 | Files Changed: 2 | Hunks: 2 | Methods Changed: 3 | Complexity Δ (Sum/Max): 3/2 | Churn Δ: 20 | Churn Cumulative: 5606 | Contributors (this commit): 87 | Commits (past 90d): 11 | Contributors (cumulative): 97 | DMM Complexity: 1.0\n\nDIFF:\n@@ -1991,6 +1991,9 @@ class Flask(_PackageBoundObject):\n             except Exception as e:\n                 error = e\n                 response = self.handle_exception(e)\n+            except:\n+                error = sys.exc_info()[1]\n+                raise\n             return response(environ, start_response)\n         finally:\n             if self.should_ignore_error(error):\n\n@@ -791,6 +791,23 @@ def test_error_handling_processing():\n         assert resp.data == b'internal server error'\n \n \n+def test_baseexception_error_handling():\n+    app = flask.Flask(__name__)\n+    app.config['LOGGER_HANDLER_POLICY'] = 'never'\n+\n+    @app.route('/')\n+    def broken_func():\n+        raise KeyboardInterrupt()\n+\n+    with app.test_client() as c:\n+        with pytest.raises(KeyboardInterrupt):\n+            c.get('/')\n+\n+        ctx = flask._request_ctx_stack.top\n+        assert ctx.preserved\n+        assert type(ctx._preserved_exc) is KeyboardInterrupt\n+\n+\n def test_before_request_and_routing_errors():\n     app = flask.Flask(__name__)\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#12c49c75fbd04cfe81808ef300fcb0858d92c7b7", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 3 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): -2/0 | Churn Δ: 3 | Churn Cumulative: 4351 | Contributors (this commit): 77 | Commits (past 90d): 7 | Contributors (cumulative): 77 | DMM Complexity: 1.0\n\nDIFF:\n@@ -1983,6 +1983,9 @@ class Flask(_PackageBoundObject):\n             except Exception as e:\n                 error = e\n                 response = self.handle_exception(e)\n+            except:\n+                error = sys.exc_info()[1]\n+                raise\n             return response(environ, start_response)\n         finally:\n             if self.should_ignore_error(error):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#d0e2e7b66c2f0a2192ce4b1b54e118345acf7f6e", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 20 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 2 | Complexity Δ (Sum/Max): -1/0 | Churn Δ: 20 | Churn Cumulative: 1278 | Contributors (this commit): 20 | Commits (past 90d): 6 | Contributors (cumulative): 20 | DMM Complexity: 1.0\n\nDIFF:\n@@ -791,6 +791,26 @@ def test_error_handling_processing():\n         assert resp.data == b'internal server error'\n \n \n+def test_baseexception_error_handling():\n+    app = flask.Flask(__name__)\n+    app.config['LOGGER_HANDLER_POLICY'] = 'never'\n+\n+    @app.route('/')\n+    def broken_func():\n+        raise KeyboardInterrupt()\n+\n+    with app.test_client() as c:\n+        try:\n+            c.get('/')\n+            raise AssertionError(\"KeyboardInterrupt should have been raised\")\n+        except KeyboardInterrupt:\n+            pass\n+\n+        ctx = flask._request_ctx_stack.top\n+        assert ctx.preserved\n+        assert type(ctx._preserved_exc) is KeyboardInterrupt\n+\n+\n def test_before_request_and_routing_errors():\n     app = flask.Flask(__name__)\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#6f7847e3c488fccbfd8c8880683cfe8ae8bdcdc3", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 4 | Files Changed: 1 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): -1/0 | Churn Δ: 5 | Churn Cumulative: 1283 | Contributors (this commit): 20 | Commits (past 90d): 7 | Contributors (cumulative): 20 | DMM Complexity: 0.0\n\nDIFF:\n@@ -800,11 +800,8 @@ def test_baseexception_error_handling():\n         raise KeyboardInterrupt()\n \n     with app.test_client() as c:\n-        try:\n+        with pytest.raises(KeyboardInterrupt):\n             c.get('/')\n-            raise AssertionError(\"KeyboardInterrupt should have been raised\")\n-        except KeyboardInterrupt:\n-            pass\n \n         ctx = flask._request_ctx_stack.top\n         assert ctx.preserved\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#a34d0e6878c8c8a5fab05a69785c443f3c17075d", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 261 | Contributors (this commit): 10 | Commits (past 90d): 1 | Contributors (cumulative): 10 | DMM Complexity: None\n\nDIFF:\n@@ -10,7 +10,7 @@\n     :license: BSD, see LICENSE for more details.\n \"\"\"\n \n-__version__ = '0.12.1-dev'\n+__version__ = '0.12.1'\n \n # utilities we import from Werkzeug and Jinja2 that are unused\n # in the module but are exported as public interface.\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#07a705888cbdf2641f3686f6d87575ef99093c7e", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 263 | Contributors (this commit): 10 | Commits (past 90d): 2 | Contributors (cumulative): 10 | DMM Complexity: None\n\nDIFF:\n@@ -10,7 +10,7 @@\n     :license: BSD, see LICENSE for more details.\n \"\"\"\n \n-__version__ = '0.12.1'\n+__version__ = '0.12.2-dev'\n \n # utilities we import from Werkzeug and Jinja2 that are unused\n # in the module but are exported as public interface.\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#c935eaceafebaf167f6422fdbd0de3b6bbb96bdf", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 0 | Lines Deleted: 20 | Files Changed: 2 | Hunks: 2 | Methods Changed: 3 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 20 | Churn Cumulative: 5654 | Contributors (this commit): 87 | Commits (past 90d): 16 | Contributors (cumulative): 97 | DMM Complexity: 0.0\n\nDIFF:\n@@ -1991,9 +1991,6 @@ class Flask(_PackageBoundObject):\n             except Exception as e:\n                 error = e\n                 response = self.handle_exception(e)\n-            except:\n-                error = sys.exc_info()[1]\n-                raise\n             return response(environ, start_response)\n         finally:\n             if self.should_ignore_error(error):\n\n@@ -791,23 +791,6 @@ def test_error_handling_processing():\n         assert resp.data == b'internal server error'\n \n \n-def test_baseexception_error_handling():\n-    app = flask.Flask(__name__)\n-    app.config['LOGGER_HANDLER_POLICY'] = 'never'\n-\n-    @app.route('/')\n-    def broken_func():\n-        raise KeyboardInterrupt()\n-\n-    with app.test_client() as c:\n-        with pytest.raises(KeyboardInterrupt):\n-            c.get('/')\n-\n-        ctx = flask._request_ctx_stack.top\n-        assert ctx.preserved\n-        assert type(ctx._preserved_exc) is KeyboardInterrupt\n-\n-\n def test_before_request_and_routing_errors():\n     app = flask.Flask(__name__)\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#8cf32bca519723c5d97f123127cdec81dba868f6", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 91 | Lines Deleted: 58 | Files Changed: 7 | Hunks: 27 | Methods Changed: 17 | Complexity Δ (Sum/Max): 22/12 | Churn Δ: 149 | Churn Cumulative: 177 | Contributors (this commit): 3 | Commits (past 90d): 7 | Contributors (cumulative): 11 | DMM Complexity: 1.0\n\nDIFF:\n@@ -1 +0,0 @@\n-from .flaskr import app\n\n@@ -0,0 +1,3 @@\n+from flaskr.factory import create_app\n+\n+app = create_app()\n\\ No newline at end of file\n\n\n@@ -10,29 +10,18 @@\n     :license: BSD, see LICENSE for more details.\n \"\"\"\n \n-import os\n from sqlite3 import dbapi2 as sqlite3\n-from flask import Flask, request, session, g, redirect, url_for, abort, \\\n-     render_template, flash\n+from flask import Blueprint, request, session, g, redirect, url_for, abort, \\\n+     render_template, flash, current_app\n \n \n-# create our little application :)\n-app = Flask(__name__)\n-\n-# Load default config and override config from an environment variable\n-app.config.update(dict(\n-    DATABASE=os.path.join(app.root_path, 'flaskr.db'),\n-    DEBUG=True,\n-    SECRET_KEY='development key',\n-    USERNAME='admin',\n-    PASSWORD='default'\n-))\n-app.config.from_envvar('FLASKR_SETTINGS', silent=True)\n+# create our blueprint :)\n+bp = Blueprint('flaskr', __name__)\n \n \n def connect_db():\n     \"\"\"Connects to the specific database.\"\"\"\n-    rv = sqlite3.connect(app.config['DATABASE'])\n+    rv = sqlite3.connect(current_app.config['DATABASE'])\n     rv.row_factory = sqlite3.Row\n     return rv\n \n@@ -40,18 +29,11 @@ def connect_db():\n def init_db():\n     \"\"\"Initializes the database.\"\"\"\n     db = get_db()\n-    with app.open_resource('schema.sql', mode='r') as f:\n+    with current_app.open_resource('schema.sql', mode='r') as f:\n         db.cursor().executescript(f.read())\n     db.commit()\n \n \n-@app.cli.command('initdb')\n-def initdb_command():\n-    \"\"\"Creates the database tables.\"\"\"\n-    init_db()\n-    print('Initialized the database.')\n-\n-\n def get_db():\n     \"\"\"Opens a new database connection if there is none yet for the\n     current application context.\n@@ -61,14 +43,7 @@ def get_db():\n     return g.sqlite_db\n \n \n-@app.teardown_appcontext\n-def close_db(error):\n-    \"\"\"Closes the database again at the end of the request.\"\"\"\n-    if hasattr(g, 'sqlite_db'):\n-        g.sqlite_db.close()\n-\n-\n-@app.route('/')\n+@bp.route('/')\n def show_entries():\n     db = get_db()\n     cur = db.execute('select title, text from entries order by id desc')\n@@ -76,7 +51,7 @@ def show_entries():\n     return render_template('show_entries.html', entries=entries)\n \n \n-@app.route('/add', methods=['POST'])\n+@bp.route('/add', methods=['POST'])\n def add_entry():\n     if not session.get('logged_in'):\n         abort(401)\n@@ -85,26 +60,26 @@ def add_entry():\n                [request.form['title'], request.form['text']])\n     db.commit()\n     flash('New entry was successfully posted')\n-    return redirect(url_for('show_entries'))\n+    return redirect(url_for('flaskr.show_entries'))\n \n \n-@app.route('/login', methods=['GET', 'POST'])\n+@bp.route('/login', methods=['GET', 'POST'])\n def login():\n     error = None\n     if request.method == 'POST':\n-        if request.form['username'] != app.config['USERNAME']:\n+        if request.form['username'] != current_app.config['USERNAME']:\n             error = 'Invalid username'\n-        elif request.form['password'] != app.config['PASSWORD']:\n+        elif request.form['password'] != current_app.config['PASSWORD']:\n             error = 'Invalid password'\n         else:\n             session['logged_in'] = True\n             flash('You were logged in')\n-            return redirect(url_for('show_entries'))\n+            return redirect(url_for('flaskr.show_entries'))\n     return render_template('login.html', error=error)\n \n \n-@app.route('/logout')\n+@bp.route('/logout')\n def logout():\n     session.pop('logged_in', None)\n     flash('You were logged out')\n-    return redirect(url_for('show_entries'))\n+    return redirect(url_for('flaskr.show_entries'))\n\n@@ -0,0 +1,52 @@\n+import os\n+from flask import Flask, g\n+from werkzeug.utils import find_modules, import_string\n+from flaskr.blueprints.flaskr import init_db\n+\n+\n+def create_app(config=None):\n+    app = Flask(__name__)\n+\n+    app.config.update(dict(\n+        DATABASE=os.path.join(app.root_path, 'flaskr.db'),\n+        DEBUG=True,\n+        SECRET_KEY='development key',\n+        USERNAME='admin',\n+        PASSWORD='default'\n+    ))\n+    app.config.update(config or {})\n+    app.config.from_envvar('FLASKR_SETTINGS', silent=True)\n+\n+    register_blueprints(app)\n+    register_cli(app)\n+    register_teardowns(app)\n+\n+    return app\n+\n+\n+def register_blueprints(app):\n+    \"\"\"Register all blueprint modules\n+\n+    Reference: Armin Ronacher, \"Flask for Fun and for Profit\" PyBay 2016.\n+    \"\"\"\n+    for name in find_modules('flaskr.blueprints'):\n+        mod = import_string(name)\n+        if hasattr(mod, 'bp'):\n+            app.register_blueprint(mod.bp)\n+    return None\n+\n+\n+def register_cli(app):\n+    @app.cli.command('initdb')\n+    def initdb_command():\n+        \"\"\"Creates the database tables.\"\"\"\n+        init_db()\n+        print('Initialized the database.')\n+\n+\n+def register_teardowns(app):\n+    @app.teardown_appcontext\n+    def close_db(error):\n+        \"\"\"Closes the database again at the end of the request.\"\"\"\n+        if hasattr(g, 'sqlite_db'):\n+            g.sqlite_db.close()\n\\ No newline at end of file\n\n@@ -1,8 +1,8 @@\n-from setuptools import setup\n+from setuptools import setup, find_packages\n \n setup(\n     name='flaskr',\n-    packages=['flaskr'],\n+    packages=find_packages(),\n     include_package_data=True,\n     install_requires=[\n         'flask',\n\n@@ -12,20 +12,24 @@\n import os\n import tempfile\n import pytest\n-from flaskr import flaskr\n+from flaskr.factory import create_app\n+from flaskr.blueprints.flaskr import init_db\n+\n+\n+test_app = create_app()\n \n \n @pytest.fixture\n def client(request):\n-    db_fd, flaskr.app.config['DATABASE'] = tempfile.mkstemp()\n-    flaskr.app.config['TESTING'] = True\n-    client = flaskr.app.test_client()\n-    with flaskr.app.app_context():\n-        flaskr.init_db()\n+    db_fd, test_app.config['DATABASE'] = tempfile.mkstemp()\n+    test_app.config['TESTING'] = True\n+    client = test_app.test_client()\n+    with test_app.app_context():\n+        init_db()\n \n     def teardown():\n         os.close(db_fd)\n-        os.unlink(flaskr.app.config['DATABASE'])\n+        os.unlink(test_app.config['DATABASE'])\n     request.addfinalizer(teardown)\n \n     return client\n@@ -50,23 +54,23 @@ def test_empty_db(client):\n \n def test_login_logout(client):\n     \"\"\"Make sure login and logout works\"\"\"\n-    rv = login(client, flaskr.app.config['USERNAME'],\n-               flaskr.app.config['PASSWORD'])\n+    rv = login(client, test_app.config['USERNAME'],\n+               test_app.config['PASSWORD'])\n     assert b'You were logged in' in rv.data\n     rv = logout(client)\n     assert b'You were logged out' in rv.data\n-    rv = login(client, flaskr.app.config['USERNAME'] + 'x',\n-               flaskr.app.config['PASSWORD'])\n+    rv = login(client,test_app.config['USERNAME'] + 'x',\n+               test_app.config['PASSWORD'])\n     assert b'Invalid username' in rv.data\n-    rv = login(client, flaskr.app.config['USERNAME'],\n-               flaskr.app.config['PASSWORD'] + 'x')\n+    rv = login(client, test_app.config['USERNAME'],\n+               test_app.config['PASSWORD'] + 'x')\n     assert b'Invalid password' in rv.data\n \n \n def test_messages(client):\n     \"\"\"Test that messages work\"\"\"\n-    login(client, flaskr.app.config['USERNAME'],\n-          flaskr.app.config['PASSWORD'])\n+    login(client, test_app.config['USERNAME'],\n+          test_app.config['PASSWORD'])\n     rv = client.post('/add', data=dict(\n         title='<Hello>',\n         text='<strong>HTML</strong> allowed here'\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#54b6fc8de689a726aa01a0f2a39ce428e7a69712", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 65 | Lines Deleted: 19 | Files Changed: 4 | Hunks: 12 | Methods Changed: 8 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 84 | Churn Cumulative: 200 | Contributors (this commit): 2 | Commits (past 90d): 8 | Contributors (cumulative): 6 | DMM Complexity: 1.0\n\nDIFF:\n@@ -1,3 +1,15 @@\n+# -*- coding: utf-8 -*-\n+\"\"\"\n+    Flaskr\n+    ~~~~~~\n+\n+    A microblog example application written as Flask tutorial with\n+    Flask and sqlite3.\n+\n+    :copyright: (c) 2015 by Armin Ronacher.\n+    :license: BSD, see LICENSE for more details.\n+\"\"\"\n+\n from flaskr.factory import create_app\n \n app = create_app()\n\\ No newline at end of file\n\n@@ -1,3 +1,15 @@\n+# -*- coding: utf-8 -*-\n+\"\"\"\n+    Flaskr\n+    ~~~~~~\n+\n+    A microblog example application written as Flask tutorial with\n+    Flask and sqlite3.\n+\n+    :copyright: (c) 2015 by Armin Ronacher.\n+    :license: BSD, see LICENSE for more details.\n+\"\"\"\n+\n import os\n from flask import Flask, g\n from werkzeug.utils import find_modules, import_string\n\n@@ -1,3 +1,14 @@\n+# -*- coding: utf-8 -*-\n+\"\"\"\n+    Flaskr Tests\n+    ~~~~~~~~~~~~\n+\n+    Tests the Flaskr application.\n+\n+    :copyright: (c) 2015 by Armin Ronacher.\n+    :license: BSD, see LICENSE for more details.\n+\"\"\"\n+\n from setuptools import setup, find_packages\n \n setup(\n\n@@ -16,20 +16,31 @@ from flaskr.factory import create_app\n from flaskr.blueprints.flaskr import init_db\n \n \n-test_app = create_app()\n+@pytest.fixture\n+def app(request):\n+\n+    db_fd, temp_db_location = tempfile.mkstemp()\n+    config = {\n+        'DATABASE': temp_db_location,\n+        'TESTING': True,\n+        'DB_FD': db_fd\n+    }\n+\n+    app = create_app(config=config)\n+\n+    with app.app_context():\n+        init_db()\n+        yield app\n \n \n @pytest.fixture\n-def client(request):\n-    db_fd, test_app.config['DATABASE'] = tempfile.mkstemp()\n-    test_app.config['TESTING'] = True\n-    client = test_app.test_client()\n-    with test_app.app_context():\n-        init_db()\n+def client(request, app):\n+\n+    client = app.test_client()\n \n     def teardown():\n-        os.close(db_fd)\n-        os.unlink(test_app.config['DATABASE'])\n+        os.close(app.config['DB_FD'])\n+        os.unlink(app.config['DATABASE'])\n     request.addfinalizer(teardown)\n \n     return client\n@@ -52,25 +63,25 @@ def test_empty_db(client):\n     assert b'No entries here so far' in rv.data\n \n \n-def test_login_logout(client):\n+def test_login_logout(client, app):\n     \"\"\"Make sure login and logout works\"\"\"\n-    rv = login(client, test_app.config['USERNAME'],\n-               test_app.config['PASSWORD'])\n+    rv = login(client, app.config['USERNAME'],\n+               app.config['PASSWORD'])\n     assert b'You were logged in' in rv.data\n     rv = logout(client)\n     assert b'You were logged out' in rv.data\n-    rv = login(client,test_app.config['USERNAME'] + 'x',\n-               test_app.config['PASSWORD'])\n+    rv = login(client,app.config['USERNAME'] + 'x',\n+               app.config['PASSWORD'])\n     assert b'Invalid username' in rv.data\n-    rv = login(client, test_app.config['USERNAME'],\n-               test_app.config['PASSWORD'] + 'x')\n+    rv = login(client, app.config['USERNAME'],\n+               app.config['PASSWORD'] + 'x')\n     assert b'Invalid password' in rv.data\n \n \n-def test_messages(client):\n+def test_messages(client, app):\n     \"\"\"Test that messages work\"\"\"\n-    login(client, test_app.config['USERNAME'],\n-          test_app.config['PASSWORD'])\n+    login(client, app.config['USERNAME'],\n+          app.config['PASSWORD'])\n     rv = client.post('/add', data=dict(\n         title='<Hello>',\n         text='<strong>HTML</strong> allowed here'\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#d76d68cd381df4a8c3e2e636c98b5bfa02ab37e4", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 4 | Lines Deleted: 5 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 9 | Churn Cumulative: 461 | Contributors (this commit): 21 | Commits (past 90d): 3 | Contributors (cumulative): 21 | DMM Complexity: None\n\nDIFF:\n@@ -236,11 +236,10 @@ def jsonify(*args, **kwargs):\n        Added support for serializing top-level arrays. This introduces a\n        security risk in ancient browsers. See :ref:`json-security` for details.\n \n-    This function's response will be pretty printed if it was not requested\n-    with ``X-Requested-With: XMLHttpRequest`` to simplify debugging unless\n-    the ``JSONIFY_PRETTYPRINT_REGULAR`` config parameter is set to false.\n-    Compressed (not pretty) formatting currently means no indents and no\n-    spaces after separators.\n+    This function's response will be pretty printed if the\n+    ``JSONIFY_PRETTYPRINT_REGULAR`` config parameter is set to True or the\n+    Flask app is running in debug mode. Compressed (not pretty) formatting\n+    currently means no indents and no spaces after separators.\n \n     .. versionadded:: 0.2\n     \"\"\"\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#00d6e339ec789e7b92007297e840a671a5e38a7b", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 40 | Lines Deleted: 7 | Files Changed: 2 | Hunks: 8 | Methods Changed: 3 | Complexity Δ (Sum/Max): 4/3 | Churn Δ: 47 | Churn Cumulative: 5701 | Contributors (this commit): 88 | Commits (past 90d): 18 | Contributors (cumulative): 99 | DMM Complexity: 0.8235294117647058\n\nDIFF:\n@@ -123,6 +123,9 @@ class Flask(_PackageBoundObject):\n     .. versionadded:: 0.11\n        The `root_path` parameter was added.\n \n+    .. versionadded:: 0.13\n+       The `host_matching` and `static_host` parameters were added.\n+\n     :param import_name: the name of the application package\n     :param static_url_path: can be used to specify a different path for the\n                             static files on the web.  Defaults to the name\n@@ -130,6 +133,13 @@ class Flask(_PackageBoundObject):\n     :param static_folder: the folder with static files that should be served\n                           at `static_url_path`.  Defaults to the ``'static'``\n                           folder in the root path of the application.\n+                          folder in the root path of the application. Defaults\n+                          to None.\n+    :param host_matching: sets the app's ``url_map.host_matching`` to the given\n+                          given value. Defaults to False.\n+    :param static_host: the host to use when adding the static route. Defaults\n+                        to None. Required when using ``host_matching=True``\n+                        with a ``static_folder`` configured.\n     :param template_folder: the folder that contains the templates that should\n                             be used by the application.  Defaults to\n                             ``'templates'`` folder in the root path of the\n@@ -337,7 +347,8 @@ class Flask(_PackageBoundObject):\n     session_interface = SecureCookieSessionInterface()\n \n     def __init__(self, import_name, static_path=None, static_url_path=None,\n-                 static_folder='static', template_folder='templates',\n+                 static_folder='static', static_host=None,\n+                 host_matching=False, template_folder='templates',\n                  instance_path=None, instance_relative_config=False,\n                  root_path=None):\n         _PackageBoundObject.__init__(self, import_name,\n@@ -525,19 +536,22 @@ class Flask(_PackageBoundObject):\n         #:    app.url_map.converters['list'] = ListConverter\n         self.url_map = Map()\n \n+        self.url_map.host_matching = host_matching\n+\n         # tracks internally if the application already handled at least one\n         # request.\n         self._got_first_request = False\n         self._before_request_lock = Lock()\n \n-        # register the static folder for the application.  Do that even\n-        # if the folder does not exist.  First of all it might be created\n-        # while the server is running (usually happens during development)\n-        # but also because google appengine stores static files somewhere\n-        # else when mapped with the .yml file.\n+        # Add a static route using the provided static_url_path, static_host,\n+        # and static_folder iff there is a configured static_folder.\n+        # Note we do this without checking if static_folder exists.\n+        # For one, it might be created while the server is running (e.g. during\n+        # development). Also, Google App Engine stores static files somewhere\n         if self.has_static_folder:\n+            assert bool(static_host) == host_matching, 'Invalid static_host/host_matching combination'\n             self.add_url_rule(self.static_url_path + '/<path:filename>',\n-                              endpoint='static',\n+                              endpoint='static', host=static_host,\n                               view_func=self.send_static_file)\n \n         #: The click command line context for this application.  Commands\n\n@@ -1188,6 +1188,25 @@ def test_static_url_path():\n         assert flask.url_for('static', filename='index.html') == '/foo/index.html'\n \n \n+def test_static_route_with_host_matching():\n+    app = flask.Flask(__name__, host_matching=True, static_host='example.com')\n+    c = app.test_client()\n+    rv = c.get('http://example.com/static/index.html')\n+    assert rv.status_code == 200\n+    rv.close()\n+    with app.test_request_context():\n+       rv = flask.url_for('static', filename='index.html', _external=True)\n+       assert rv == 'http://example.com/static/index.html'\n+    # Providing static_host without host_matching=True should error.\n+    with pytest.raises(Exception):\n+        flask.Flask(__name__, static_host='example.com')\n+    # Providing host_matching=True with static_folder but without static_host should error.\n+    with pytest.raises(Exception):\n+        flask.Flask(__name__, host_matching=True)\n+    # Providing host_matching=True without static_host but with static_folder=None should not error.\n+    flask.Flask(__name__, host_matching=True, static_folder=None)\n+\n+\n def test_none_response():\n     app = flask.Flask(__name__)\n     app.testing = True\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#d50a5db5ed07a14733b8cbfc0962b793209014dd", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 16 | Lines Deleted: 7 | Files Changed: 1 | Hunks: 3 | Methods Changed: 1 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 23 | Churn Cumulative: 2071 | Contributors (this commit): 48 | Commits (past 90d): 5 | Contributors (cumulative): 48 | DMM Complexity: 0.0\n\nDIFF:\n@@ -14,7 +14,7 @@ import sys\n import pkgutil\n import posixpath\n import mimetypes\n-import unicodedata\n+from unicodedata import normalize\n from time import time\n from zlib import adler32\n from threading import RLock\n@@ -535,13 +535,22 @@ def send_file(filename_or_fp, mimetype=None, as_attachment=False,\n         if attachment_filename is None:\n             raise TypeError('filename unavailable, required for '\n                             'sending as attachment')\n-        filename_dict = {\n-            'filename': (unicodedata.normalize('NFKD',\n-                         text_type(attachment_filename)).encode('ascii',\n-                                                                'ignore')),\n-            'filename*': \"UTF-8''%s\" % url_quote(attachment_filename)}\n+        normalized = normalize('NFKD', text_type(attachment_filename))\n+\n+        try:\n+            normalized.encode('ascii')\n+        except UnicodeEncodeError:\n+            filenames = {\n+                'filename': normalized.encode('ascii', 'ignore'),\n+                'filename*': \"UTF-8''%s\" % url_quote(attachment_filename),\n+            }\n+        else:\n+            filenames = {\n+                'filename': attachment_filename,\n+            }\n+\n         headers.add('Content-Disposition', 'attachment',\n-                    **filename_dict)\n+                    **filenames)\n \n     if current_app.use_x_sendfile and filename:\n         if file is not None:\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#c1973016eacfb22fdec837394d8b89c0ca35ad15", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 27 | Lines Deleted: 15 | Files Changed: 2 | Hunks: 11 | Methods Changed: 3 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 42 | Churn Cumulative: 3049 | Contributors (this commit): 56 | Commits (past 90d): 10 | Contributors (cumulative): 69 | DMM Complexity: 1.0\n\nDIFF:\n@@ -14,10 +14,10 @@ import sys\n import pkgutil\n import posixpath\n import mimetypes\n-from unicodedata import normalize\n from time import time\n from zlib import adler32\n from threading import RLock\n+import unicodedata\n from werkzeug.routing import BuildError\n from functools import update_wrapper\n \n@@ -479,6 +479,11 @@ def send_file(filename_or_fp, mimetype=None, as_attachment=False,\n        The `attachment_filename` is preferred over `filename` for MIME-type\n        detection.\n        \n+    .. versionchanged:: 0.13\n+        UTF-8 filenames, as specified in `RFC 2231`_, are supported.\n+        \n+    .. _RFC 2231: https://tools.ietf.org/html/rfc2231#section-4\n+\n     :param filename_or_fp: the filename of the file to send in `latin-1`.\n                            This is relative to the :attr:`~Flask.root_path`\n                            if a relative path is specified.\n@@ -535,7 +540,10 @@ def send_file(filename_or_fp, mimetype=None, as_attachment=False,\n         if attachment_filename is None:\n             raise TypeError('filename unavailable, required for '\n                             'sending as attachment')\n-        normalized = normalize('NFKD', text_type(attachment_filename))\n+\n+        normalized = unicodedata.normalize(\n+            'NFKD', text_type(attachment_filename)\n+        )\n \n         try:\n             normalized.encode('ascii')\n@@ -545,12 +553,9 @@ def send_file(filename_or_fp, mimetype=None, as_attachment=False,\n                 'filename*': \"UTF-8''%s\" % url_quote(attachment_filename),\n             }\n         else:\n-            filenames = {\n-                'filename': attachment_filename,\n-            }\n+            filenames = {'filename': attachment_filename}\n \n-        headers.add('Content-Disposition', 'attachment',\n-                    **filenames)\n+        headers.add('Content-Disposition', 'attachment', **filenames)\n \n     if current_app.use_x_sendfile and filename:\n         if file is not None:\n\n@@ -540,10 +540,11 @@ class TestSendfile(object):\n                 value, options = \\\n                     parse_options_header(rv.headers['Content-Disposition'])\n                 assert value == 'attachment'\n+                assert options['filename'] == 'index.html'\n+                assert 'filename*' not in options\n                 rv.close()\n \n         with app.test_request_context():\n-            assert options['filename'] == 'index.html'\n             rv = flask.send_file('static/index.html', as_attachment=True)\n             value, options = parse_options_header(rv.headers['Content-Disposition'])\n             assert value == 'attachment'\n@@ -562,16 +563,22 @@ class TestSendfile(object):\n \n     def test_attachment_with_utf8_filename(self):\n         app = flask.Flask(__name__)\n+\n         with app.test_request_context():\n-            with open(os.path.join(app.root_path, 'static/index.html')) as f:\n-                rv = flask.send_file(f, as_attachment=True,\n-                                     attachment_filename=u'Ñandú／pingüino.txt')\n-                content_disposition = set(rv.headers['Content-Disposition'].split(';'))\n-                assert content_disposition == set(['attachment',\n-                                                   ' filename=\"Nandu/pinguino.txt\"',\n-                                                   \" filename*=UTF-8''%C3%91and%C3%BA%EF%BC%8Fping%C3%BCino.txt\"])\n+            rv = flask.send_file(\n+                'static/index.html', as_attachment=True,\n+                attachment_filename=u'Ñandú／pingüino.txt'\n+            )\n+            value, options = parse_options_header(\n+                rv.headers['Content-Disposition']\n+            )\n             rv.close()\n \n+        assert value == 'attachment'\n+        assert sorted(options.keys()) == ('filename', 'filename*')\n+        assert options['filename'] == 'Nandu/pinguino.txt'\n+        assert options['filename*'] == 'UTF-8''%C3%91and%C3%BA%EF%BC%8Fping%C3%BCino.txt'\n+\n     def test_static_file(self):\n         app = flask.Flask(__name__)\n         # default cache timeout is 12 hours\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#f790ab7177c9959b560d238f4be9c124d635e70a", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 8 | Lines Deleted: 13 | Files Changed: 1 | Hunks: 3 | Methods Changed: 2 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 21 | Churn Cumulative: 980 | Contributors (this commit): 21 | Commits (past 90d): 5 | Contributors (cumulative): 21 | DMM Complexity: 0.0\n\nDIFF:\n@@ -541,7 +541,7 @@ class TestSendfile(object):\n                     parse_options_header(rv.headers['Content-Disposition'])\n                 assert value == 'attachment'\n                 assert options['filename'] == 'index.html'\n-                assert 'filename*' not in options\n+                assert 'filename*' not in rv.headers['Content-Disposition']\n                 rv.close()\n \n         with app.test_request_context():\n@@ -565,20 +565,15 @@ class TestSendfile(object):\n         app = flask.Flask(__name__)\n \n         with app.test_request_context():\n-            rv = flask.send_file(\n-                'static/index.html', as_attachment=True,\n-                attachment_filename=u'Ñandú／pingüino.txt'\n-            )\n-            value, options = parse_options_header(\n-                rv.headers['Content-Disposition']\n-            )\n+            rv = flask.send_file('static/index.html', as_attachment=True, attachment_filename=u'Ñandú／pingüino.txt')\n+            content_disposition = set(rv.headers['Content-Disposition'].split('; '))\n+            assert content_disposition == set((\n+                'attachment',\n+                'filename=\"Nandu/pinguino.txt\"',\n+                \"filename*=UTF-8''%C3%91and%C3%BA%EF%BC%8Fping%C3%BCino.txt\"\n+            ))\n             rv.close()\n \n-        assert value == 'attachment'\n-        assert sorted(options.keys()) == ('filename', 'filename*')\n-        assert options['filename'] == 'Nandu/pinguino.txt'\n-        assert options['filename*'] == 'UTF-8''%C3%91and%C3%BA%EF%BC%8Fping%C3%BCino.txt'\n-\n     def test_static_file(self):\n         app = flask.Flask(__name__)\n         # default cache timeout is 12 hours\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#09b49104f39f111b58d60a819551cca4bde305cc", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 4 | Lines Deleted: 7 | Files Changed: 1 | Hunks: 4 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 11 | Churn Cumulative: 2101 | Contributors (this commit): 48 | Commits (past 90d): 7 | Contributors (cumulative): 48 | DMM Complexity: 1.0\n\nDIFF:\n@@ -484,7 +484,7 @@ def send_file(filename_or_fp, mimetype=None, as_attachment=False,\n         \n     .. _RFC 2231: https://tools.ietf.org/html/rfc2231#section-4\n \n-    :param filename_or_fp: the filename of the file to send in `latin-1`.\n+    :param filename_or_fp: the filename of the file to send.\n                            This is relative to the :attr:`~Flask.root_path`\n                            if a relative path is specified.\n                            Alternatively a file object might be provided in\n@@ -541,15 +541,12 @@ def send_file(filename_or_fp, mimetype=None, as_attachment=False,\n             raise TypeError('filename unavailable, required for '\n                             'sending as attachment')\n \n-        normalized = unicodedata.normalize(\n-            'NFKD', text_type(attachment_filename)\n-        )\n-\n         try:\n-            normalized.encode('ascii')\n+            attachment_filename = attachment_filename.encode('latin-1')\n         except UnicodeEncodeError:\n             filenames = {\n-                'filename': normalized.encode('ascii', 'ignore'),\n+                'filename': unicodedata.normalize(\n+                    'NFKD', attachment_filename).encode('latin-1', 'ignore'),\n                 'filename*': \"UTF-8''%s\" % url_quote(attachment_filename),\n             }\n         else:\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#bf6910a639fffc6896c5aefe362edaf6f6b704fe", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 982 | Contributors (this commit): 21 | Commits (past 90d): 6 | Contributors (cumulative): 21 | DMM Complexity: None\n\nDIFF:\n@@ -517,7 +517,7 @@ class TestSendfile(object):\n         assert rv.status_code == 416\n         rv.close()\n \n-        last_modified = datetime.datetime.fromtimestamp(os.path.getmtime(\n+        last_modified = datetime.datetime.utcfromtimestamp(os.path.getmtime(\n             os.path.join(app.root_path, 'static/index.html'))).replace(\n             microsecond=0)\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#4ff84d537aa386fde36182ed797a79e3b582be75", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): -1/0 | Churn Δ: 2 | Churn Cumulative: 984 | Contributors (this commit): 21 | Commits (past 90d): 7 | Contributors (cumulative): 21 | DMM Complexity: None\n\nDIFF:\n@@ -515,7 +515,7 @@ class TestSendfile(object):\n         assert rv.status_code == 416\n         rv.close()\n \n-        last_modified = datetime.datetime.fromtimestamp(os.path.getmtime(\n+        last_modified = datetime.datetime.utcfromtimestamp(os.path.getmtime(\n             os.path.join(app.root_path, 'static/index.html'))).replace(\n             microsecond=0)\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#7481844c98e4536ae01764aa08eec681c493ef2e", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 4384 | Contributors (this commit): 79 | Commits (past 90d): 9 | Contributors (cumulative): 79 | DMM Complexity: None\n\nDIFF:\n@@ -544,7 +544,7 @@ class Flask(_PackageBoundObject):\n         self._before_request_lock = Lock()\n \n         # Add a static route using the provided static_url_path, static_host,\n-        # and static_folder iff there is a configured static_folder.\n+        # and static_folder if there is a configured static_folder.\n         # Note we do this without checking if static_folder exists.\n         # For one, it might be created while the server is running (e.g. during\n         # development). Also, Google App Engine stores static files somewhere\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#19fbe3a18f36b02f22f8f545e015f60343c844ac", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 1 | Churn Cumulative: 2102 | Contributors (this commit): 49 | Commits (past 90d): 15 | Contributors (cumulative): 49 | DMM Complexity: 0.0\n\nDIFF:\n@@ -331,6 +331,7 @@ def url_for(endpoint, **values):\n         values['_external'] = external\n         values['_anchor'] = anchor\n         values['_method'] = method\n+        values['_scheme'] = scheme\n         return appctx.app.handle_url_build_error(error, endpoint, values)\n \n     if anchor is not None:\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#e50767cfca081681f527c54d3f6652d11e95e758", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 17 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 2 | Complexity Δ (Sum/Max): 2/2 | Churn Δ: 17 | Churn Cumulative: 1336 | Contributors (this commit): 21 | Commits (past 90d): 8 | Contributors (cumulative): 21 | DMM Complexity: 1.0\n\nDIFF:\n@@ -1131,6 +1131,23 @@ def test_build_error_handler_reraise():\n         pytest.raises(BuildError, flask.url_for, 'not.existing')\n \n \n+def test_url_for_passes_special_values_to_build_error_handler():\n+    app = flask.Flask(__name__)\n+\n+    @app.url_build_error_handlers.append\n+    def handler(error, endpoint, values):\n+        assert values == {\n+            '_external': False,\n+            '_anchor': None,\n+            '_method': None,\n+            '_scheme': None,\n+        }\n+        return 'handled'\n+\n+    with app.test_request_context():\n+        flask.url_for('/')\n+\n+\n def test_custom_converters():\n     from werkzeug.routing import BaseConverter\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#97e2cd0a5a5f2b663d7a82edbaede2fe2cfb0679", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 54 | Lines Deleted: 48 | Files Changed: 2 | Hunks: 5 | Methods Changed: 9 | Complexity Δ (Sum/Max): 6/5 | Churn Δ: 102 | Churn Cumulative: 5822 | Contributors (this commit): 89 | Commits (past 90d): 19 | Contributors (cumulative): 101 | DMM Complexity: 1.0\n\nDIFF:\n@@ -980,8 +980,7 @@ class Flask(_PackageBoundObject):\n         return iter(self._blueprint_order)\n \n     @setupmethod\n-    def add_url_rule(self, rule, endpoint=None, view_func=None,\n-                     provide_automatic_options=None, **options):\n+    def add_url_rule(self, rule, endpoint=None, view_func=None, provide_automatic_options=None, **options):\n         \"\"\"Connects a URL rule.  Works exactly like the :meth:`route`\n         decorator.  If a view_func is provided it will be registered with the\n         endpoint.\n@@ -1021,10 +1020,10 @@ class Flask(_PackageBoundObject):\n                          endpoint\n         :param view_func: the function to call when serving a request to the\n                           provided endpoint\n-        :param provide_automatic_options: controls whether ``OPTIONS`` should\n-                                          be provided automatically. If this\n-                                          is not set, will check attributes on\n-                                          the view or list of methods.\n+        :param provide_automatic_options: controls whether the ``OPTIONS``\n+            method should be added automatically. This can also be controlled\n+            by setting the ``view_func.provide_automatic_options = False``\n+            before adding the rule.\n         :param options: the options to be forwarded to the underlying\n                         :class:`~werkzeug.routing.Rule` object.  A change\n                         to Werkzeug is handling of method options.  methods\n\n@@ -50,7 +50,7 @@ def test_options_on_multiple_rules():\n     assert sorted(rv.allow) == ['GET', 'HEAD', 'OPTIONS', 'POST', 'PUT']\n \n \n-def test_options_handling_disabled():\n+def test_provide_automatic_options_attr():\n     app = flask.Flask(__name__)\n \n     def index():\n@@ -70,6 +70,54 @@ def test_options_handling_disabled():\n     assert sorted(rv.allow) == ['OPTIONS']\n \n \n+def test_provide_automatic_options_kwarg():\n+    app = flask.Flask(__name__)\n+\n+    def index():\n+        return flask.request.method\n+\n+    def more():\n+        return flask.request.method\n+\n+    app.add_url_rule('/', view_func=index, provide_automatic_options=False)\n+    app.add_url_rule(\n+        '/more', view_func=more, methods=['GET', 'POST'],\n+        provide_automatic_options=False\n+    )\n+\n+    c = app.test_client()\n+    assert c.get('/').data == b'GET'\n+\n+    rv = c.post('/')\n+    assert rv.status_code == 405\n+    assert sorted(rv.allow) == ['GET', 'HEAD']\n+\n+    # Older versions of Werkzeug.test.Client don't have an options method\n+    if hasattr(c, 'options'):\n+        rv = c.options('/')\n+    else:\n+        rv = c.open('/', method='OPTIONS')\n+\n+    assert rv.status_code == 405\n+\n+    rv = c.head('/')\n+    assert rv.status_code == 200\n+    assert not rv.data  # head truncates\n+    assert c.post('/more').data == b'POST'\n+    assert c.get('/more').data == b'GET'\n+\n+    rv = c.delete('/more')\n+    assert rv.status_code == 405\n+    assert sorted(rv.allow) == ['GET', 'HEAD', 'POST']\n+\n+    if hasattr(c, 'options'):\n+        rv = c.options('/more')\n+    else:\n+        rv = c.open('/more', method='OPTIONS')\n+\n+    assert rv.status_code == 405\n+\n+\n def test_request_dispatching():\n     app = flask.Flask(__name__)\n \n@@ -1751,44 +1799,3 @@ def test_run_from_config(monkeypatch, host, port, expect_host, expect_port):\n     app = flask.Flask(__name__)\n     app.config['SERVER_NAME'] = 'pocoo.org:8080'\n     app.run(host, port)\n-\n-\n-def test_disable_automatic_options():\n-    # Issue 1488: Add support for a kwarg to add_url_rule to disable the auto OPTIONS response\n-    app = flask.Flask(__name__)\n-\n-    def index():\n-        return flask.request.method\n-\n-    def more():\n-        return flask.request.method\n-\n-    app.add_url_rule('/', 'index', index, provide_automatic_options=False)\n-    app.add_url_rule('/more', 'more', more, methods=['GET', 'POST'], provide_automatic_options=False)\n-\n-    c = app.test_client()\n-    assert c.get('/').data == b'GET'\n-    rv = c.post('/')\n-    assert rv.status_code == 405\n-    assert sorted(rv.allow) == ['GET', 'HEAD']\n-    # Older versions of Werkzeug.test.Client don't have an options method\n-    if hasattr(c, 'options'):\n-        rv = c.options('/')\n-    else:\n-        rv = c.open('/', method='OPTIONS')\n-    assert rv.status_code == 405\n-\n-    rv = c.head('/')\n-    assert rv.status_code == 200\n-    assert not rv.data  # head truncates\n-    assert c.post('/more').data == b'POST'\n-    assert c.get('/more').data == b'GET'\n-    rv = c.delete('/more')\n-    assert rv.status_code == 405\n-    assert sorted(rv.allow) == ['GET', 'HEAD', 'POST']\n-    # Older versions of Werkzeug.test.Client don't have an options method\n-    if hasattr(c, 'options'):\n-        rv = c.options('/more')\n-    else:\n-        rv = c.open('/more', method='OPTIONS')\n-    assert rv.status_code == 405\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
