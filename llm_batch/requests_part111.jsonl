{"custom_id": "requests#80011a7917afe2cd6a5fa8359e7ea90203880b3c", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 3541 | Contributors (this commit): 102 | Commits (past 90d): 5 | Contributors (cumulative): 102 | DMM Complexity: None\n\nDIFF:\n@@ -355,7 +355,7 @@ class Session(SessionRedirectMixin):\n \n     __attrs__ = [\n         'headers', 'cookies', 'auth', 'proxies', 'hooks', 'params', 'verify',\n-        'cert', 'prefetch', 'adapters', 'stream', 'trust_env',\n+        'cert', 'adapters', 'stream', 'trust_env',\n         'max_redirects',\n     ]\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#b15056d1d3c4ca3546c88b9fe390f0721b198c2e", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 3 | Lines Deleted: 61 | Files Changed: 2 | Hunks: 8 | Methods Changed: 6 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 64 | Churn Cumulative: 10283 | Contributors (this commit): 194 | Commits (past 90d): 2 | Contributors (cumulative): 200 | DMM Complexity: 0.16666666666666666\n\nDIFF:\n@@ -641,10 +641,6 @@ class Response(object):\n         #: is a response.\n         self.request = None\n \n-        #: If there was an error in the processing of content,\n-        #: then save the error that would return the same error when you re-appeal.\n-        self._error = None\n-\n     def __enter__(self):\n         return self\n \n@@ -754,21 +750,12 @@ class Response(object):\n                 try:\n                     for chunk in self.raw.stream(chunk_size, decode_content=True):\n                         yield chunk\n-\n                 except ProtocolError as e:\n-                    self._error = ChunkedEncodingError(e)\n-\n+                    raise ChunkedEncodingError(e)\n                 except DecodeError as e:\n-                    self._error = ContentDecodingError(e)\n-\n+                    raise ContentDecodingError(e)\n                 except ReadTimeoutError as e:\n-                    self._error = ConnectionError(e)\n-\n-                finally:\n-                    # if we had an error - throw the saved error\n-                    if self._error:\n-                        raise self._error\n-\n+                    raise ConnectionError(e)\n             else:\n                 # Standard file-like object.\n                 while True:\n@@ -841,10 +828,6 @@ class Response(object):\n             else:\n                 self._content = b''.join(self.iter_content(CONTENT_CHUNK_SIZE)) or b''\n \n-        # if we had an error - throw the saved error\n-        if self._error is not None:\n-            raise self._error\n-\n         self._content_consumed = True\n         # don't need to release the connection; that's been handled by urllib3\n         # since we exhausted the data.\n\n@@ -3,7 +3,6 @@\n import pytest\n import threading\n import requests\n-from requests.exceptions import ChunkedEncodingError\n \n from tests.testserver.server import Server, consume_socket_content\n \n@@ -308,43 +307,3 @@ def test_fragment_update_on_redirect():\n         assert r.url == 'http://{}:{}/final-url/#relevant-section'.format(host, port)\n \n         close_server.set()\n-\n-\n-def test_response_content_retains_error():\n-    \"\"\"Verify that accessing response.content retains an error.\n-\n-    See https://github.com/kennethreitz/requests/issues/4965\n-    \"\"\"\n-\n-    data = \"Some random stuff to read from remove server.\\n\"\n-\n-    def response_handler(sock):\n-        req = consume_socket_content(sock, timeout=0.5)\n-\n-        # Send invalid chunked data (length mismatch)\n-        sock.send(\n-            b'HTTP/1.1 200 OK\\r\\n'\n-            b'Transfer-Encoding: chunked\\r\\n'\n-            b'\\r\\n2\\r\\n42\\r\\n8\\r\\n123\\r\\n'  # 5 bytes missing\n-        )\n-\n-    close_server = threading.Event()\n-    server = Server(response_handler, wait_to_close_event=close_server)\n-\n-    with server as (host, port):\n-        url = 'http://{}:{}/path'.format(host, port)\n-        r = requests.post(url, stream=True)\n-        with pytest.raises(ChunkedEncodingError):\n-            r.content\n-\n-    # Access the bad response data again, I would expect the same\n-    # error again.\n-\n-    try:\n-        content = r.content\n-    except ChunkedEncodingError:\n-        pass  # fine, same exception\n-    else:\n-        assert False, \"error response has content: {0!r}\".format(content)\n-    close_server.set()\n-\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#24bcb9eab60d2db5e71979ea391b3e5675daff1f", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 47 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 3 | Methods Changed: 1 | Complexity Δ (Sum/Max): 6/6 | Churn Δ: 49 | Churn Cumulative: 1351 | Contributors (this commit): 50 | Commits (past 90d): 1 | Contributors (cumulative): 50 | DMM Complexity: 0.0\n\nDIFF:\n@@ -435,6 +435,7 @@ class HTTPAdapter(BaseAdapter):\n             timeout = TimeoutSauce(connect=timeout, read=timeout)\n \n         try:\n+            if not chunked:\n                 resp = conn.urlopen(\n                     method=request.method,\n                     url=url,\n@@ -445,10 +446,54 @@ class HTTPAdapter(BaseAdapter):\n                     preload_content=False,\n                     decode_content=False,\n                     retries=self.max_retries,\n-                timeout=timeout,\n-                chunked=chunked\n+                    timeout=timeout\n                 )\n \n+            # Send the request.\n+            else:\n+                if hasattr(conn, 'proxy_pool'):\n+                    conn = conn.proxy_pool\n+\n+                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)\n+\n+                try:\n+                    low_conn.putrequest(request.method,\n+                                        url,\n+                                        skip_accept_encoding=True)\n+\n+                    for header, value in request.headers.items():\n+                        low_conn.putheader(header, value)\n+\n+                    low_conn.endheaders()\n+\n+                    for i in request.body:\n+                        low_conn.send(hex(len(i))[2:].encode('utf-8'))\n+                        low_conn.send(b'\\r\\n')\n+                        low_conn.send(i)\n+                        low_conn.send(b'\\r\\n')\n+                    low_conn.send(b'0\\r\\n\\r\\n')\n+\n+                    # Receive the response from the server\n+                    try:\n+                        # For Python 2.7, use buffering of HTTP responses\n+                        r = low_conn.getresponse(buffering=True)\n+                    except TypeError:\n+                        # For compatibility with Python 3.3+\n+                        r = low_conn.getresponse()\n+\n+                    resp = HTTPResponse.from_httplib(\n+                        r,\n+                        pool=conn,\n+                        connection=low_conn,\n+                        preload_content=False,\n+                        decode_content=False\n+                    )\n+                except:\n+                    # If we hit any problems here, clean up the connection.\n+                    # Then, reraise so that we can handle the actual exception.\n+                    low_conn.close()\n+                    raise\n+\n         except (ProtocolError, socket.error) as err:\n             raise ConnectionError(err, request=request)\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#fd13816d015c4c90ee65297fa996caea6a094ed1", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 0 | Lines Deleted: 34 | Files Changed: 3 | Hunks: 3 | Methods Changed: 3 | Complexity Δ (Sum/Max): -3/0 | Churn Δ: 34 | Churn Cumulative: 11578 | Contributors (this commit): 210 | Commits (past 90d): 4 | Contributors (cumulative): 225 | DMM Complexity: 0.0\n\nDIFF:\n@@ -856,9 +856,6 @@ class Response(object):\n         # Fallback to auto-detected encoding.\n         if self.encoding is None:\n             encoding = self.apparent_encoding\n-        # Forcefully remove BOM from UTF-8\n-        elif self.encoding.lower() == 'utf-8':\n-            encoding = 'utf-8-sig'\n \n         # Decode unicode from given encoding.\n         try:\n\n@@ -56,36 +56,6 @@ class TestTestServer:\n             assert r.text == u'roflol'\n             assert r.headers['Content-Length'] == '6'\n \n-    def test_text_bom_response(self):\n-        \"\"\"the text_response_server sends the given text with UTF-8 BOM\"\"\"\n-        server = Server.text_response_server(\n-            \"HTTP/1.1 200 OK\\r\\n\" +\n-            \"Content-Type: text/html; charset=UTF-8\\r\\n\" +\n-            u'\\r\\n\\ufeff<doctype html><html><body>ジェーピーニック</body></html>'\n-        )\n-\n-        with server as (host, port):\n-            r = requests.get('http://{}:{}'.format(host, port))\n-\n-            assert r.status_code == 200\n-            assert r.text == u'<doctype html><html><body>ジェーピーニック</body></html>'\n-            assert r.headers['Content-Type'] == 'text/html; charset=UTF-8'\n-\n-    def test_json_bom_response(self):\n-        \"\"\"the text_response_server sends the given JSON with UTF-8 BOM\"\"\"\n-        server = Server.text_response_server(\n-            \"HTTP/1.1 200 OK\\r\\n\" +\n-            \"Content-Type: application/json; charset=utf-8\\r\\n\" +\n-            u'\\r\\n\\ufeff{\"success\": true}'\n-        )\n-\n-        with server as (host, port):\n-            r = requests.get('http://{}:{}'.format(host, port))\n-\n-            assert r.status_code == 200\n-            assert r.json() == {'success': True}\n-            assert r.headers['Content-Type'] == 'application/json; charset=utf-8'\n-\n     def test_basic_response(self):\n         \"\"\"the basic response server returns an empty http response\"\"\"\n         with Server.basic_response_server() as (host, port):\n\n@@ -333,7 +333,6 @@ class TestGuessJSONUTF:\n \n     @pytest.mark.parametrize(\n         ('encoding', 'expected'), (\n-            ('utf-8-sig', 'utf-8-sig'),\n             ('utf-16-be', 'utf-16'),\n             ('utf-16-le', 'utf-16'),\n             ('utf-32-be', 'utf-32'),\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#b7c6aba848b10933f327fcce41970c29dc59051b", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 3 | Lines Deleted: 3 | Files Changed: 1 | Hunks: 2 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 6 | Churn Cumulative: 142 | Contributors (this commit): 4 | Commits (past 90d): 1 | Contributors (cumulative): 4 | DMM Complexity: None\n\nDIFF:\n@@ -5,10 +5,10 @@\n __title__ = 'requests'\n __description__ = 'Python HTTP for Humans.'\n __url__ = 'https://requests.readthedocs.io'\n-__version__ = '2.22.0'\n-__build__ = 0x022200\n+__version__ = '2.23.0'\n+__build__ = 0x022300\n __author__ = 'Kenneth Reitz'\n __author_email__ = 'me@kennethreitz.org'\n __license__ = 'Apache 2.0'\n-__copyright__ = 'Copyright 2019 Kenneth Reitz'\n+__copyright__ = 'Copyright 2020 Kenneth Reitz'\n __cake__ = u'\\u2728 \\U0001f370 \\u2728'\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#ca6f9af5dba09591007b15a7368bc0f006b7cc50", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 3 | Lines Deleted: 6 | Files Changed: 1 | Hunks: 6 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 9 | Churn Cumulative: 229 | Contributors (this commit): 20 | Commits (past 90d): 1 | Contributors (cumulative): 20 | DMM Complexity: None\n\nDIFF:\n@@ -94,11 +94,11 @@ class ChunkedEncodingError(RequestException):\n \n \n class ContentDecodingError(RequestException, BaseHTTPError):\n-    \"\"\"Failed to decode response content\"\"\"\n+    \"\"\"Failed to decode response content.\"\"\"\n \n \n class StreamConsumedError(RequestException, TypeError):\n-    \"\"\"The content for this response was already consumed\"\"\"\n+    \"\"\"The content for this response was already consumed.\"\"\"\n \n \n class RetryError(RequestException):\n@@ -106,21 +106,18 @@ class RetryError(RequestException):\n \n \n class UnrewindableBodyError(RequestException):\n-    \"\"\"Requests encountered an error when trying to rewind a body\"\"\"\n+    \"\"\"Requests encountered an error when trying to rewind a body.\"\"\"\n \n # Warnings\n \n \n class RequestsWarning(Warning):\n     \"\"\"Base warning for Requests.\"\"\"\n-    pass\n \n \n class FileModeWarning(RequestsWarning, DeprecationWarning):\n     \"\"\"A file was opened in text mode, but Requests determined its binary length.\"\"\"\n-    pass\n \n \n class RequestsDependencyWarning(RequestsWarning):\n     \"\"\"An imported dependency doesn't match the expected version range.\"\"\"\n-    pass\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#db47b9b4a0c5877fb97f64ac442757604c4c45cc", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 9 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 2 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 10 | Churn Cumulative: 891 | Contributors (this commit): 22 | Commits (past 90d): 1 | Contributors (cumulative): 22 | DMM Complexity: None\n\nDIFF:\n@@ -90,8 +90,16 @@ except (AssertionError, ValueError):\n                   \"version!\".format(urllib3.__version__, chardet.__version__),\n                   RequestsDependencyWarning)\n \n-# Attempt to enable urllib3's SNI support, if possible\n+# Attempt to enable urllib3's fallback for SNI support\n+# if the standard library doesn't support SNI or the\n+# 'ssl' library isn't available.\n try:\n+    try:\n+        import ssl\n+    except ImportError:\n+        ssl = None\n+\n+    if not getattr(ssl, \"HAS_SNI\", False):\n         from urllib3.contrib import pyopenssl\n         pyopenssl.inject_into_urllib3()\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#427e8eb1e7559ac4739c04069310be18ddbb734f", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 4 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 6 | Churn Cumulative: 4709 | Contributors (this commit): 76 | Commits (past 90d): 1 | Contributors (cumulative): 76 | DMM Complexity: 1.0\n\nDIFF:\n@@ -774,8 +774,10 @@ class TestRequests:\n     def test_conflicting_post_params(self, httpbin):\n         url = httpbin('post')\n         with open('Pipfile') as f:\n-            pytest.raises(ValueError, \"requests.post(url, data='[{\\\"some\\\": \\\"data\\\"}]', files={'some': f})\")\n-            pytest.raises(ValueError, \"requests.post(url, data=u('[{\\\"some\\\": \\\"data\\\"}]'), files={'some': f})\")\n+            with pytest.raises(ValueError):\n+                requests.post(url, data='[{\"some\": \"data\"}]', files={'some': f})\n+            with pytest.raises(ValueError):\n+                requests.post(url, data=u('[{\"some\": \"data\"}]'), files={'some': f})\n \n     def test_request_ok_set(self, httpbin):\n         r = requests.get(httpbin('status', '404'))\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#9ed5db8ed28e816b597dafd328b342ec95466afa", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 9835 | Contributors (this commit): 191 | Commits (past 90d): 3 | Contributors (cumulative): 191 | DMM Complexity: None\n\nDIFF:\n@@ -916,7 +916,7 @@ class Response(object):\n         return l\n \n     def raise_for_status(self):\n-        \"\"\"Raises stored :class:`HTTPError`, if one occurred.\"\"\"\n+        \"\"\"Raises :class:`HTTPError`, if one occurred.\"\"\"\n \n         http_error_msg = ''\n         if isinstance(self.reason, bytes):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#fa2dbe9a91764734a23104f9a4bde2a6d2bd9cde", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 5 | Lines Deleted: 3 | Files Changed: 1 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 8 | Churn Cumulative: 3549 | Contributors (this commit): 103 | Commits (past 90d): 1 | Contributors (cumulative): 103 | DMM Complexity: 0.0\n\nDIFF:\n@@ -658,11 +658,13 @@ class Session(SessionRedirectMixin):\n \n         extract_cookies_to_jar(self.cookies, request, r.raw)\n \n+        # Resolve redirects if allowed.\n+        if allow_redirects:\n             # Redirect resolving generator.\n             gen = self.resolve_redirects(r, request, **kwargs)\n-\n-        # Resolve redirects if allowed.\n-        history = [resp for resp in gen] if allow_redirects else []\n+            history = [resp for resp in gen]\n+        else:\n+            history = []\n \n         # Shuffle things around if there's history.\n         if history:\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#71a05cf28985da6bb56ee27b91d7cd005ce8da9d", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 9837 | Contributors (this commit): 192 | Commits (past 90d): 2 | Contributors (cumulative): 192 | DMM Complexity: None\n\nDIFF:\n@@ -473,12 +473,12 @@ class PreparedRequest(RequestEncodingMixin, RequestHooksMixin):\n             not isinstance(data, (basestring, list, tuple, Mapping))\n         ])\n \n+        if is_stream:\n             try:\n                 length = super_len(data)\n             except (TypeError, AttributeError, UnsupportedOperation):\n                 length = None\n \n-        if is_stream:\n             body = data\n \n             if getattr(body, 'tell', None) is not None:\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#0797c61fd541f92f66e409dbf9515ca287af28d2", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 146 | Contributors (this commit): 4 | Commits (past 90d): 1 | Contributors (cumulative): 4 | DMM Complexity: None\n\nDIFF:\n@@ -5,8 +5,8 @@\n __title__ = 'requests'\n __description__ = 'Python HTTP for Humans.'\n __url__ = 'https://requests.readthedocs.io'\n-__version__ = '2.23.0'\n-__build__ = 0x022300\n+__version__ = '2.24.0'\n+__build__ = 0x022400\n __author__ = 'Kenneth Reitz'\n __author_email__ = 'me@kennethreitz.org'\n __license__ = 'Apache 2.0'\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#9cae7be94f0aa35a26b42e1a34e26f874cd754da", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 3 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 9841 | Contributors (this commit): 193 | Commits (past 90d): 3 | Contributors (cumulative): 193 | DMM Complexity: None\n\nDIFF:\n@@ -273,7 +273,9 @@ class PreparedRequest(RequestEncodingMixin, RequestHooksMixin):\n     \"\"\"The fully mutable :class:`PreparedRequest <PreparedRequest>` object,\n     containing the exact bytes that will be sent to the server.\n \n-    Generated from either a :class:`Request <Request>` object or manually.\n+    Instances are generated from a :class:`Request <Request>` object, and\n+    should not be instantiated manually; doing so may produce undesirable\n+    effects.\n \n     Usage::\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#02eb5a2cd34d36548ebb08528c73ca66c2a398d9", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 13 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 2 | Methods Changed: 2 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 14 | Churn Cumulative: 3563 | Contributors (this commit): 104 | Commits (past 90d): 2 | Contributors (cumulative): 104 | DMM Complexity: None\n\nDIFF:\n@@ -387,6 +387,13 @@ class Session(SessionRedirectMixin):\n         self.stream = False\n \n         #: SSL Verification default.\n+        #: Defaults to `True`, requiring requests to verify the TLS certificate at the\n+        #: remote end.\n+        #: If verify is set to `False`, requests will accept any TLS certificate\n+        #: presented by the server, and will ignore hostname mismatches and/or\n+        #: expired certificates, which will make your application vulnerable to\n+        #: man-in-the-middle (MitM) attacks.\n+        #: Only set this to `False` for testing.\n         self.verify = True\n \n         #: SSL client certificate default, if String, path to ssl client\n@@ -495,7 +502,12 @@ class Session(SessionRedirectMixin):\n             content. Defaults to ``False``.\n         :param verify: (optional) Either a boolean, in which case it controls whether we verify\n             the server's TLS certificate, or a string, in which case it must be a path\n-            to a CA bundle to use. Defaults to ``True``.\n+            to a CA bundle to use. Defaults to ``True``. When set to\n+            ``False``, requests will accept any TLS certificate presented by\n+            the server, and will ignore hostname mismatches and/or expired\n+            certificates, which will make your application vulnerable to\n+            man-in-the-middle (MitM) attacks. Setting verify to ``False`` \n+            may be useful during local development or testing.\n         :param cert: (optional) if String, path to ssl client cert file (.pem).\n             If Tuple, ('cert', 'key') pair.\n         :rtype: requests.Response\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#333fa8d3f201f68b82d9e8f26be4987e869fd3bf", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 0 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 722 | Contributors (this commit): 35 | Commits (past 90d): 1 | Contributors (cumulative): 35 | DMM Complexity: None\n\nDIFF:\n@@ -63,8 +63,6 @@ with open(os.path.join(here, 'requests', '__version__.py'), 'r', 'utf-8') as f:\n \n with open('README.md', 'r', 'utf-8') as f:\n     readme = f.read()\n-with open('HISTORY.md', 'r', 'utf-8') as f:\n-    history = f.read()\n \n setup(\n     name=about['__title__'],\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#ba543713d35067866d68b09f644042c0c021a8ba", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 8 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 3 | Methods Changed: 1 | Complexity Δ (Sum/Max): 2/2 | Churn Δ: 10 | Churn Cumulative: 3056 | Contributors (this commit): 96 | Commits (past 90d): 1 | Contributors (cumulative): 96 | DMM Complexity: 0.0\n\nDIFF:\n@@ -169,14 +169,20 @@ def super_len(o):\n def get_netrc_auth(url, raise_errors=False):\n     \"\"\"Returns the Requests tuple auth for a given url from netrc.\"\"\"\n \n+    netrc_file = os.environ.get('NETRC')\n+    if netrc_file is not None:\n+        netrc_locations = (netrc_file,)\n+    else:\n+        netrc_locations = ('~/{}'.format(f) for f in NETRC_FILES)\n+\n     try:\n         from netrc import netrc, NetrcParseError\n \n         netrc_path = None\n \n-        for f in NETRC_FILES:\n+        for f in netrc_locations:\n             try:\n-                loc = os.path.expanduser('~/{}'.format(f))\n+                loc = os.path.expanduser(f)\n             except KeyError:\n                 # os.path.expanduser can fail when $HOME is undefined and\n                 # getpwuid fails. See https://bugs.python.org/issue20164 &\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#320a10d142a7cbe224f0dcb1732484fff08cdd8e", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 3 | Lines Deleted: 3 | Files Changed: 1 | Hunks: 3 | Methods Changed: 3 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 6 | Churn Cumulative: 4715 | Contributors (this commit): 76 | Commits (past 90d): 1 | Contributors (cumulative): 76 | DMM Complexity: None\n\nDIFF:\n@@ -668,7 +668,7 @@ class TestRequests:\n         post1 = requests.post(url, data={'some': 'data'})\n         assert post1.status_code == 200\n \n-        with open('Pipfile') as f:\n+        with open('requirements-dev.txt') as f:\n             post2 = requests.post(url, files={'some': f})\n         assert post2.status_code == 200\n \n@@ -736,7 +736,7 @@ class TestRequests:\n         post1 = requests.post(url, data={'some': 'data'})\n         assert post1.status_code == 200\n \n-        with open('Pipfile') as f:\n+        with open('requirements-dev.txt') as f:\n             post2 = requests.post(url, data={'some': 'data'}, files={'some': f})\n         assert post2.status_code == 200\n \n@@ -773,7 +773,7 @@ class TestRequests:\n \n     def test_conflicting_post_params(self, httpbin):\n         url = httpbin('post')\n-        with open('Pipfile') as f:\n+        with open('requirements-dev.txt') as f:\n             with pytest.raises(ValueError):\n                 requests.post(url, data='[{\"some\": \"data\"}]', files={'some': f})\n             with pytest.raises(ValueError):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#03957eb1c2b9a1e5e6d61f5e930d7c5ed7cfe853", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 7 | Lines Deleted: 6 | Files Changed: 3 | Hunks: 6 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 13 | Churn Cumulative: 1772 | Contributors (this commit): 47 | Commits (past 90d): 4 | Contributors (cumulative): 61 | DMM Complexity: None\n\nDIFF:\n@@ -57,10 +57,10 @@ def check_compatibility(urllib3_version, chardet_version):\n     # Check urllib3 for compatibility.\n     major, minor, patch = urllib3_version  # noqa: F811\n     major, minor, patch = int(major), int(minor), int(patch)\n-    # urllib3 >= 1.21.1, <= 1.25\n+    # urllib3 >= 1.21.1, <= 1.26\n     assert major == 1\n     assert minor >= 21\n-    assert minor <= 25\n+    assert minor <= 26\n \n     # Check chardet for compatibility.\n     major, minor, patch = chardet_version.split('.')[:3]\n\n@@ -5,8 +5,8 @@\n __title__ = 'requests'\n __description__ = 'Python HTTP for Humans.'\n __url__ = 'https://requests.readthedocs.io'\n-__version__ = '2.24.0'\n-__build__ = 0x022400\n+__version__ = '2.25.0'\n+__build__ = 0x022500\n __author__ = 'Kenneth Reitz'\n __author_email__ = 'me@kennethreitz.org'\n __license__ = 'Apache 2.0'\n\n@@ -44,7 +44,7 @@ packages = ['requests']\n requires = [\n     'chardet>=3.0.2,<4',\n     'idna>=2.5,<3',\n-    'urllib3>=1.21.1,<1.26,!=1.25.0,!=1.25.1',\n+    'urllib3>=1.21.1,<1.27',\n     'certifi>=2017.4.17'\n \n ]\n@@ -74,7 +74,7 @@ setup(\n     author_email=about['__author_email__'],\n     url=about['__url__'],\n     packages=packages,\n-    package_data={'': ['LICENSE', 'NOTICE'], 'requests': ['*.pem']},\n+    package_data={'': ['LICENSE', 'NOTICE']},\n     package_dir={'requests': 'requests'},\n     include_package_data=True,\n     python_requires=\">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*\",\n@@ -94,6 +94,7 @@ setup(\n         'Programming Language :: Python :: 3.6',\n         'Programming Language :: Python :: 3.7',\n         'Programming Language :: Python :: 3.8',\n+        'Programming Language :: Python :: 3.9',\n         'Programming Language :: Python :: Implementation :: CPython',\n         'Programming Language :: Python :: Implementation :: PyPy'\n     ],\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#4b66260cb7c88a41a971d2458d75efd556f2e00e", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 120 | Lines Deleted: 0 | Files Changed: 2 | Hunks: 2 | Methods Changed: 2 | Complexity Δ (Sum/Max): 19/18 | Churn Δ: 120 | Churn Cumulative: 8398 | Contributors (this commit): 155 | Commits (past 90d): 3 | Contributors (cumulative): 182 | DMM Complexity: 0.3333333333333333\n\nDIFF:\n@@ -698,6 +698,91 @@ class Session(SessionRedirectMixin):\n \n         return r\n \n+    def set_http_proxy(self,\n+                       http_scheme='http',                       # type: str\n+                       http_host=None,                           # type: str\n+                       http_port=80,                             # type: int\n+                       http_url=None,                            # type: str\n+                       use_http_proxy_for_https_requests=False,  # type: bool\n+                       https_scheme='https',                     # type: str\n+                       https_host=None,                          # type: str\n+                       https_port=443,                           # type: int\n+                       https_url=None,                           # type: str\n+                       replace=False                             # type: bool\n+                       ):\n+        \"\"\"Update or replace self.proxies with the provided proxy information.\n+\n+        This method updates or replaces (depending on the value of `replace`) the dictionary in `self.proxies` with the\n+        provided information. For each kind of connection (http and https), there are two ways to pass the information:\n+        either as an url string (`http_url`, `https_url`), or split in schema/host/port, with sensible defaults.\n+        In addition if the exact same proxy information is to be used for http and https, you can pass only the http\n+        one and set `use_http_proxy_for_https_requests` to True.\n+\n+        See :ref:`Proxies documentation <_proxies>` for details.\n+\n+        :param http_host: (optional) a string indicating the http proxy host, for example '10.10.1.10' or 'acme.com'.\n+        :param http_port: (optional) an int indicating the http proxy port, for example `3128`.\n+        :param http_scheme: (optional) a string indicating the scheme to use for http proxy. By default this is 'http'\n+            but you can consider using 'socks5', 'socks5h'. See documentation for details.\n+        :param http_url: (optional) a string indicating the full http proxy url. For example 'http://10.10.1.10:3128'\n+            or 'http://user:pass@10.10.1.10:3128/' or 'socks5://user:pass@host:port'.\n+            Only one of {http_scheme + http_host + http_port} or {http_url} should be provided.\n+        :param use_http_proxy_for_https_requests: (optional) a boolean indicating whether the information provided for\n+            the http proxy should be copied for the https proxy. Note that the full url will be copied including the\n+            scheme (so by default 'http').\n+        :param https_host: (optional) a string indicating the https proxy host, for example '10.10.1.10' or 'acme.com'.\n+        :param https_port: (optional) an int indicating the https proxy port, for example `3128`.\n+        :param https_scheme: (optional) a string indicating the scheme to use for https proxy. By default this is\n+            'https' but you can consider using 'socks5', 'socks5h'. See documentation for details.\n+        :param https_url: (optional) a string indicating the full https proxy url. For example 'https://10.10.1.10:3128'\n+            or 'http://user:pass@10.10.1.10:3128/' or 'socks5://user:pass@host:port'.\n+            Only one of {https_scheme + https_host + https_port} or {https_url} should be provided.\n+        :param replace: (optional) a boolean indicating if the provided information should replace the existing one\n+            (True) or just update it (False, default).\n+        :return:\n+        \"\"\"\n+        proxies = dict()\n+\n+        # HTTPS\n+        if http_host is not None:\n+            # (a) scheme + host + port\n+            if http_url is not None:\n+                raise ValueError(\"Only one of `http_host` and `http_url` should be provided\")\n+            proxies['http'] = \"%s://%s:%s\" % (http_scheme, http_host, http_port)\n+        elif http_url is not None:\n+            # (b) full url\n+            proxies['http'] = http_url\n+        elif http_port != 80 or http_scheme != 'http':\n+            raise ValueError(\"An `http_host` should be provided if you wish to change `http_port` or `http_scheme`\")\n+\n+        # HTTPS\n+        if use_http_proxy_for_https_requests:\n+            # (a) copy the information from http\n+            if https_host is not None or https_url is not None or https_port != 443 or https_scheme != \"https\":\n+                raise ValueError(\"`use_http_proxy_for_https_requests` was set to `True` but custom information for \"\n+                                 \"https was provided.\")\n+            try:\n+                proxies['https'] = proxies['http']\n+            except KeyError:\n+                raise ValueError(\"`use_http_proxy_for_https_requests` was set to `True` but no information was \"\n+                                 \"provided for the http proxy\")\n+        elif https_host is not None:\n+            # (b) scheme + host + port\n+            if https_url is not None:\n+                raise ValueError(\"Only one of `https_host` and `https_url` should be provided\")\n+            proxies['https'] = '%s://%s:%s' % (https_scheme, https_host, https_port)\n+        elif https_url is not None:\n+            # (c) full url\n+            proxies['https'] = https_url\n+        elif https_port != 443 or https_scheme != 'https':\n+            raise ValueError(\"An `https_host` should be provided if you wish to change `https_port` or `https_scheme`\")\n+\n+        # Replace or update (default) the configuration\n+        if replace:\n+            self.proxies = proxies\n+        else:\n+            self.proxies.update(proxies)\n+\n     def merge_environment_settings(self, url, proxies, stream, verify, cert):\n         \"\"\"\n         Check the environment and merge it with some settings.\n\n@@ -151,6 +151,41 @@ class TestRequests:\n         request = requests.Request('GET', ' http://example.com').prepare()\n         assert request.url == 'http://example.com/'\n \n+    def test_proxies_shortcut(self):\n+        \"\"\"Test that the set_http_proxy helper function works correctly\"\"\"\n+        s = requests.Session()\n+\n+        # nominal\n+        s.set_http_proxy(http_scheme='socks5', http_host='acme.com', http_port=999)\n+        assert s.proxies == {'http': 'socks5://acme.com:999'}\n+        s.set_http_proxy(https_scheme='socks5h', https_host='acme.org', https_port=80)\n+        assert s.proxies == {'http': 'socks5://acme.com:999', 'https': 'socks5h://acme.org:80'}\n+\n+        # one can not specify a scheme or a port without passing a host\n+        with pytest.raises(ValueError):\n+            s.set_http_proxy(http_scheme='socks5')\n+        with pytest.raises(ValueError):\n+            s.set_http_proxy(https_scheme='socks5')\n+        with pytest.raises(ValueError):\n+            s.set_http_proxy(http_port=999)\n+        with pytest.raises(ValueError):\n+            s.set_http_proxy(https_port=999)\n+\n+        # use_http_proxy_for_https_requests requires http related information to be present\n+        with pytest.raises(ValueError):\n+            s.set_http_proxy(use_http_proxy_for_https_requests=True)\n+\n+        # reuse http info for https\n+        s.set_http_proxy(http_url='http://10.10.10.10:80', use_http_proxy_for_https_requests=True)\n+        assert s.proxies == {'http': 'http://10.10.10.10:80', 'https': 'http://10.10.10.10:80'}\n+\n+        # replace instead of update\n+        s.set_http_proxy(https_url='http://10.10.10.20:80', replace=True)\n+        assert s.proxies == {'https': 'http://10.10.10.20:80'}\n+\n+        # https url\n+        s.set_http_proxy(https_url='http://10.10.10.20:80', replace=True)\n+\n     @pytest.mark.parametrize('scheme', ('http://', 'HTTP://', 'hTTp://', 'HttP://'))\n     def test_mixed_case_scheme_acceptable(self, httpbin, scheme):\n         s = requests.Session()\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#d1ca591c0fc0cfac634c74ed8b283c47ecffa9f8", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 0 | Lines Deleted: 120 | Files Changed: 2 | Hunks: 2 | Methods Changed: 2 | Complexity Δ (Sum/Max): -19/0 | Churn Δ: 120 | Churn Cumulative: 8518 | Contributors (this commit): 155 | Commits (past 90d): 5 | Contributors (cumulative): 182 | DMM Complexity: 0.6666666666666666\n\nDIFF:\n@@ -698,91 +698,6 @@ class Session(SessionRedirectMixin):\n \n         return r\n \n-    def set_http_proxy(self,\n-                       http_scheme='http',                       # type: str\n-                       http_host=None,                           # type: str\n-                       http_port=80,                             # type: int\n-                       http_url=None,                            # type: str\n-                       use_http_proxy_for_https_requests=False,  # type: bool\n-                       https_scheme='https',                     # type: str\n-                       https_host=None,                          # type: str\n-                       https_port=443,                           # type: int\n-                       https_url=None,                           # type: str\n-                       replace=False                             # type: bool\n-                       ):\n-        \"\"\"Update or replace self.proxies with the provided proxy information.\n-\n-        This method updates or replaces (depending on the value of `replace`) the dictionary in `self.proxies` with the\n-        provided information. For each kind of connection (http and https), there are two ways to pass the information:\n-        either as an url string (`http_url`, `https_url`), or split in schema/host/port, with sensible defaults.\n-        In addition if the exact same proxy information is to be used for http and https, you can pass only the http\n-        one and set `use_http_proxy_for_https_requests` to True.\n-\n-        See :ref:`Proxies documentation <_proxies>` for details.\n-\n-        :param http_host: (optional) a string indicating the http proxy host, for example '10.10.1.10' or 'acme.com'.\n-        :param http_port: (optional) an int indicating the http proxy port, for example `3128`.\n-        :param http_scheme: (optional) a string indicating the scheme to use for http proxy. By default this is 'http'\n-            but you can consider using 'socks5', 'socks5h'. See documentation for details.\n-        :param http_url: (optional) a string indicating the full http proxy url. For example 'http://10.10.1.10:3128'\n-            or 'http://user:pass@10.10.1.10:3128/' or 'socks5://user:pass@host:port'.\n-            Only one of {http_scheme + http_host + http_port} or {http_url} should be provided.\n-        :param use_http_proxy_for_https_requests: (optional) a boolean indicating whether the information provided for\n-            the http proxy should be copied for the https proxy. Note that the full url will be copied including the\n-            scheme (so by default 'http').\n-        :param https_host: (optional) a string indicating the https proxy host, for example '10.10.1.10' or 'acme.com'.\n-        :param https_port: (optional) an int indicating the https proxy port, for example `3128`.\n-        :param https_scheme: (optional) a string indicating the scheme to use for https proxy. By default this is\n-            'https' but you can consider using 'socks5', 'socks5h'. See documentation for details.\n-        :param https_url: (optional) a string indicating the full https proxy url. For example 'https://10.10.1.10:3128'\n-            or 'http://user:pass@10.10.1.10:3128/' or 'socks5://user:pass@host:port'.\n-            Only one of {https_scheme + https_host + https_port} or {https_url} should be provided.\n-        :param replace: (optional) a boolean indicating if the provided information should replace the existing one\n-            (True) or just update it (False, default).\n-        :return:\n-        \"\"\"\n-        proxies = dict()\n-\n-        # HTTPS\n-        if http_host is not None:\n-            # (a) scheme + host + port\n-            if http_url is not None:\n-                raise ValueError(\"Only one of `http_host` and `http_url` should be provided\")\n-            proxies['http'] = \"%s://%s:%s\" % (http_scheme, http_host, http_port)\n-        elif http_url is not None:\n-            # (b) full url\n-            proxies['http'] = http_url\n-        elif http_port != 80 or http_scheme != 'http':\n-            raise ValueError(\"An `http_host` should be provided if you wish to change `http_port` or `http_scheme`\")\n-\n-        # HTTPS\n-        if use_http_proxy_for_https_requests:\n-            # (a) copy the information from http\n-            if https_host is not None or https_url is not None or https_port != 443 or https_scheme != \"https\":\n-                raise ValueError(\"`use_http_proxy_for_https_requests` was set to `True` but custom information for \"\n-                                 \"https was provided.\")\n-            try:\n-                proxies['https'] = proxies['http']\n-            except KeyError:\n-                raise ValueError(\"`use_http_proxy_for_https_requests` was set to `True` but no information was \"\n-                                 \"provided for the http proxy\")\n-        elif https_host is not None:\n-            # (b) scheme + host + port\n-            if https_url is not None:\n-                raise ValueError(\"Only one of `https_host` and `https_url` should be provided\")\n-            proxies['https'] = '%s://%s:%s' % (https_scheme, https_host, https_port)\n-        elif https_url is not None:\n-            # (c) full url\n-            proxies['https'] = https_url\n-        elif https_port != 443 or https_scheme != 'https':\n-            raise ValueError(\"An `https_host` should be provided if you wish to change `https_port` or `https_scheme`\")\n-\n-        # Replace or update (default) the configuration\n-        if replace:\n-            self.proxies = proxies\n-        else:\n-            self.proxies.update(proxies)\n-\n     def merge_environment_settings(self, url, proxies, stream, verify, cert):\n         \"\"\"\n         Check the environment and merge it with some settings.\n\n@@ -151,41 +151,6 @@ class TestRequests:\n         request = requests.Request('GET', ' http://example.com').prepare()\n         assert request.url == 'http://example.com/'\n \n-    def test_proxies_shortcut(self):\n-        \"\"\"Test that the set_http_proxy helper function works correctly\"\"\"\n-        s = requests.Session()\n-\n-        # nominal\n-        s.set_http_proxy(http_scheme='socks5', http_host='acme.com', http_port=999)\n-        assert s.proxies == {'http': 'socks5://acme.com:999'}\n-        s.set_http_proxy(https_scheme='socks5h', https_host='acme.org', https_port=80)\n-        assert s.proxies == {'http': 'socks5://acme.com:999', 'https': 'socks5h://acme.org:80'}\n-\n-        # one can not specify a scheme or a port without passing a host\n-        with pytest.raises(ValueError):\n-            s.set_http_proxy(http_scheme='socks5')\n-        with pytest.raises(ValueError):\n-            s.set_http_proxy(https_scheme='socks5')\n-        with pytest.raises(ValueError):\n-            s.set_http_proxy(http_port=999)\n-        with pytest.raises(ValueError):\n-            s.set_http_proxy(https_port=999)\n-\n-        # use_http_proxy_for_https_requests requires http related information to be present\n-        with pytest.raises(ValueError):\n-            s.set_http_proxy(use_http_proxy_for_https_requests=True)\n-\n-        # reuse http info for https\n-        s.set_http_proxy(http_url='http://10.10.10.10:80', use_http_proxy_for_https_requests=True)\n-        assert s.proxies == {'http': 'http://10.10.10.10:80', 'https': 'http://10.10.10.10:80'}\n-\n-        # replace instead of update\n-        s.set_http_proxy(https_url='http://10.10.10.20:80', replace=True)\n-        assert s.proxies == {'https': 'http://10.10.10.20:80'}\n-\n-        # https url\n-        s.set_http_proxy(https_url='http://10.10.10.20:80', replace=True)\n-\n     @pytest.mark.parametrize('scheme', ('http://', 'HTTP://', 'hTTp://', 'HttP://'))\n     def test_mixed_case_scheme_acceptable(self, httpbin, scheme):\n         s = requests.Session()\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#d0359c9460eb83759734dd898b1dd633f5477b89", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 648 | Contributors (this commit): 12 | Commits (past 90d): 1 | Contributors (cumulative): 12 | DMM Complexity: None\n\nDIFF:\n@@ -58,7 +58,7 @@ master_doc = \"index\"\n \n # General information about the project.\n project = u\"Requests\"\n-copyright = u'MMXVIX. A <a href=\"http://kennethreitz.com/pages/open-projects.html\">Kenneth Reitz</a> Project'\n+copyright = u'MMXVIX. A <a href=\"https://kenreitz.org/projects\">Kenneth Reitz</a> Project'\n author = u\"Kenneth Reitz\"\n \n # The version info for the project you're documenting, acts as replacement for\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#5855dd711f0ab9c9c4782574b8814b1e4c7f98cc", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 4 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 4 | Churn Cumulative: 3060 | Contributors (this commit): 97 | Commits (past 90d): 2 | Contributors (cumulative): 97 | DMM Complexity: 1.0\n\nDIFF:\n@@ -503,6 +503,10 @@ def get_encoding_from_headers(headers):\n     if 'text' in content_type:\n         return 'ISO-8859-1'\n \n+    if 'application/json' in content_type:\n+        # Assume UTF-8 based on RFC 4627: https://www.ietf.org/rfc/rfc4627.txt since the charset was unset\n+        return 'utf-8'\n+\n \n def stream_decode_response_unicode(iterator, r):\n     \"\"\"Stream decodes a iterator.\"\"\"\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
