{"custom_id": "requests#dac050bf403749524e025b1cae697a61dc592217", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 12 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 3 | Methods Changed: 1 | Complexity Δ (Sum/Max): 6/6 | Churn Δ: 13 | Churn Cumulative: 3254 | Contributors (this commit): 20 | Commits (past 90d): 125 | Contributors (cumulative): 20 | DMM Complexity: 0.0\n\nDIFF:\n@@ -22,7 +22,7 @@ from .packages.poster.encode import multipart_encode\n from .packages.poster.streaminghttp import register_openers, get_handlers\n from .utils import (dict_from_cookiejar, get_unicode_from_response, stream_decode_response_unicode, decode_gzip, stream_decode_gzip)\n from .status_codes import codes\n-from .exceptions import Timeout, URLRequired, TooManyRedirects\n+from .exceptions import Timeout, URLRequired, TooManyRedirects, RequestException\n from .monkeys import Request as _Request\n from .monkeys import HTTPRedirectHandler\n \n@@ -514,6 +514,17 @@ class Response(object):\n \n     def raise_for_status(self):\n         \"\"\"Raises stored :class:`HTTPError` or :class:`URLError`, if one occurred.\"\"\"\n+\n         if self.error:\n             raise self.error\n \n+        if (self.status_code >= 300) and (self.status_code < 400):\n+            raise RequestException('%s Redirection' % self.status_code)\n+\n+        elif (self.status_code >= 400) and (self.status_code < 500):\n+            raise RequestException('%s Client Error' % self.status_code)\n+\n+        elif (self.status_code >= 500) and (self.status_code < 600):\n+            raise RequestException('%s Server Error' % self.status_code)\n+\n+\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#be69529dca2a877b87e1728858eb013d2e76a29c", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 0 | Lines Deleted: 6 | Files Changed: 1 | Hunks: 2 | Methods Changed: 2 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 6 | Churn Cumulative: 171 | Contributors (this commit): 1 | Commits (past 90d): 7 | Contributors (cumulative): 1 | DMM Complexity: 1.0\n\nDIFF:\n@@ -108,13 +108,7 @@ def http_digest(r, username, password):\n             r.request.send(anyway=True)\n             _r = r.request.response\n             _r.history.append(r)\n-            print _r.status_code\n \n-            # r.request.response\n-\n-            print locals()\n-\n-            print _r.headers\n             return _r\n \n         return r\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#0008b035e2204ea7d1df5d62bd009e51df44aa17", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 181 | Contributors (this commit): 2 | Commits (past 90d): 9 | Contributors (cumulative): 2 | DMM Complexity: None\n\nDIFF:\n@@ -15,8 +15,8 @@ requests\n \"\"\"\n \n __title__ = 'requests'\n-__version__ = '0.7.2'\n-__build__ = 0x000702\n+__version__ = '0.7.3'\n+__build__ = 0x000703\n __author__ = 'Kenneth Reitz'\n __license__ = 'ISC'\n __copyright__ = 'Copyright 2011 Kenneth Reitz'\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#c108c5300fa1fb130d6121e5550a04b989e03fed", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 11 | Lines Deleted: 7 | Files Changed: 3 | Hunks: 10 | Methods Changed: 3 | Complexity Δ (Sum/Max): -6/0 | Churn Δ: 18 | Churn Cumulative: 4057 | Contributors (this commit): 20 | Commits (past 90d): 170 | Contributors (cumulative): 25 | DMM Complexity: 0.0\n\nDIFF:\n@@ -23,7 +23,7 @@ __copyright__ = 'Copyright 2011 Kenneth Reitz'\n \n \n from . import utils\n-from .models import HTTPError, Request, Response\n+from .models import Request, Response\n from .api import request, get, head, post, patch, put, delete\n from .sessions import session\n from .status_codes import codes\n\n@@ -12,21 +12,22 @@ import urllib2\n import socket\n import zlib\n \n-from urllib2 import HTTPError\n from urlparse import urlparse, urlunparse, urljoin\n from datetime import datetime\n \n+from .auth import dispatch as auth_dispatch\n from .hooks import dispatch_hook\n from .structures import CaseInsensitiveDict\n from .packages.poster.encode import multipart_encode\n from .packages.poster.streaminghttp import register_openers, get_handlers\n-from .utils import (dict_from_cookiejar, get_unicode_from_response, stream_decode_response_unicode, decode_gzip, stream_decode_gzip)\n from .status_codes import codes\n from .exceptions import Timeout, URLRequired, TooManyRedirects\n from .monkeys import Request as _Request\n from .monkeys import HTTPRedirectHandler\n+from .utils import (\n+    dict_from_cookiejar, get_unicode_from_response,\n+    stream_decode_response_unicode, decode_gzip, stream_decode_gzip)\n \n-from .auth import dispatch as auth_dispatch\n \n REDIRECT_STATI = (codes.moved, codes.found, codes.other, codes.temporary_moved)\n \n\n@@ -51,7 +51,9 @@ def merge_kwargs(local_kwarg, default_kwarg):\n class Session(object):\n     \"\"\"A Requests session.\"\"\"\n \n-    __attrs__ = ['headers', 'cookies', 'auth', 'timeout', 'proxies', 'hooks', 'params', 'config']\n+    __attrs__ = [\n+        'headers', 'cookies', 'auth', 'timeout', 'proxies', 'hooks',\n+        'params', 'config']\n \n \n     def __init__(self,\n@@ -62,7 +64,8 @@ class Session(object):\n         proxies=None,\n         hooks=None,\n         params=None,\n-        config=None):\n+        config=None,\n+        keep_alive=True):\n \n         self.headers = headers or {}\n         self.cookies = cookies or {}\n@@ -72,6 +75,7 @@ class Session(object):\n         self.hooks = hooks or {}\n         self.params = params or {}\n         self.config = config or {}\n+        self.keep_alive = keep_alive\n \n         for (k, v) in defaults.items():\n             self.config.setdefault(k, v)\n@@ -169,7 +173,6 @@ class Session(object):\n         # Send the HTTP Request.\n         r.send()\n \n-\n         return r.response\n \n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#28a9534383ed57c799a58ba57e53e0988ac385aa", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 2 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 3 | Churn Cumulative: 65 | Contributors (this commit): 1 | Commits (past 90d): 5 | Contributors (cumulative): 1 | DMM Complexity: None\n\nDIFF:\n@@ -35,4 +35,5 @@ defaults['max_redirects'] = 30\n defaults['decode_unicode'] = True\n defaults['timeout_fallback'] = True\n # defaults['keep_alive'] = True\n-# defaults['max_connections'] = 10\n\\ No newline at end of file\n+defaults['pool_connections'] = 10\n+defaults['pool_maxsize'] = 1\n\\ No newline at end of file\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#50c39fd95ada7242fc6bb0cbfd68be1e4a32ac3b", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 8 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 3 | Methods Changed: 2 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 9 | Churn Cumulative: 622 | Contributors (this commit): 3 | Commits (past 90d): 35 | Contributors (cumulative): 3 | DMM Complexity: 0.0\n\nDIFF:\n@@ -15,6 +15,7 @@ from .defaults import defaults\n from .models import Request\n from .hooks import dispatch_hook\n from .utils import add_dict_to_cookiejar, cookiejar_from_dict, header_expand\n+from .packages.urllib3.poolmanager import PoolManager\n \n \n def merge_kwargs(local_kwarg, default_kwarg):\n@@ -76,6 +77,11 @@ class Session(object):\n         for (k, v) in defaults.items():\n             self.config.setdefault(k, v)\n \n+        self.poolmanager = PoolManager(\n+            num_pools=self.config.get('pool_connections'),\n+            maxsize=self.config.get('pool_maxsize')\n+        )\n+\n         # Set up a CookieJar to be used by default\n         self.cookies = cookielib.FileCookieJar()\n \n@@ -148,7 +154,8 @@ class Session(object):\n             timeout=timeout,\n             allow_redirects=allow_redirects,\n             proxies=proxies,\n-            config=config\n+            config=config,\n+            _poolmanager=self.poolmanager\n         )\n \n         for attr in self.__attrs__:\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#a548b6249dda248a45f54ce5bf513f9c621d60c3", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 7 | Lines Deleted: 7 | Files Changed: 3 | Hunks: 6 | Methods Changed: 2 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 14 | Churn Cumulative: 3704 | Contributors (this commit): 20 | Commits (past 90d): 149 | Contributors (cumulative): 27 | DMM Complexity: 1.0\n\nDIFF:\n@@ -29,5 +29,5 @@ from .sessions import session\n from .status_codes import codes\n from .exceptions import (\n     RequestException, AuthenticationError, Timeout, URLRequired,\n-    TooManyRedirects\n+    TooManyRedirects, HTTPError\n )\n\n@@ -12,6 +12,9 @@ class RequestException(Exception):\n     \"\"\"There was an ambiguous exception that occurred while handling your\n     request.\"\"\"\n \n+class HTTPError(RequestException):\n+    \"\"\"An HTTP error occured.\"\"\"\n+\n class AuthenticationError(RequestException):\n     \"\"\"The authentication credentials provided were invalid.\"\"\"\n \n\n@@ -354,9 +354,6 @@ class Request(object):\n             if self.data:\n                 body = self._enc_data\n                 content_type = 'application/x-www-form-urlencoded'\n-                print body\n-\n-\n \n         # TODO: Setup cookies.\n \n@@ -548,12 +545,12 @@ class Response(object):\n             raise self.error\n \n         if (self.status_code >= 300) and (self.status_code < 400):\n-            raise RequestException('%s Redirection' % self.status_code)\n+            raise HTTPError('%s Redirection' % self.status_code)\n \n         elif (self.status_code >= 400) and (self.status_code < 500):\n-            raise RequestException('%s Client Error' % self.status_code)\n+            raise HTTPError('%s Client Error' % self.status_code)\n \n         elif (self.status_code >= 500) and (self.status_code < 600):\n-            raise RequestException('%s Server Error' % self.status_code)\n+            raise HTTPError('%s Server Error' % self.status_code)\n \n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#4673d3dfa7c9f97a2b0950066ec53623fd0d0a41", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 189 | Contributors (this commit): 2 | Commits (past 90d): 12 | Contributors (cumulative): 2 | DMM Complexity: None\n\nDIFF:\n@@ -15,8 +15,8 @@ requests\n \"\"\"\n \n __title__ = 'requests'\n-__version__ = '0.7.2'\n-__build__ = 0x000702\n+__version__ = '0.8.0'\n+__build__ = 0x000800\n __author__ = 'Kenneth Reitz'\n __license__ = 'ISC'\n __copyright__ = 'Copyright 2011 Kenneth Reitz'\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#d04f31b302cef097e061bcdf6e1a45d522c72abc", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 13 | Lines Deleted: 4 | Files Changed: 1 | Hunks: 6 | Methods Changed: 2 | Complexity Δ (Sum/Max): 3/3 | Churn Δ: 17 | Churn Cumulative: 3478 | Contributors (this commit): 20 | Commits (past 90d): 130 | Contributors (cumulative): 20 | DMM Complexity: 0.5555555555555556\n\nDIFF:\n@@ -12,7 +12,6 @@ import socket\n import zlib\n from Cookie import SimpleCookie\n \n-from urllib2 import HTTPError\n from urlparse import urlparse, urlunparse, urljoin\n from datetime import datetime\n \n@@ -22,7 +21,7 @@ from .packages.poster.encode import multipart_encode\n from .packages.poster.streaminghttp import register_openers, get_handlers\n from .utils import (dict_from_cookiejar, get_unicode_from_response, stream_decode_response_unicode, decode_gzip, stream_decode_gzip)\n from .status_codes import codes\n-from .exceptions import Timeout, URLRequired, TooManyRedirects, RequestException\n+from .exceptions import Timeout, URLRequired, TooManyRedirects, RequestException, HTTPError\n \n from .auth import dispatch as auth_dispatch\n \n@@ -263,7 +262,13 @@ class Request(object):\n             r.history = history\n \n         self.response = r\n+\n+        try:\n+            r.raise_for_status()\n             self.response.ok = True\n+        except HTTPError:\n+            self.response.ok = False\n+\n         self.response.request = self\n \n \n@@ -475,11 +480,15 @@ class Response(object):\n     def __repr__(self):\n         return '<Response [%s]>' % (self.status_code)\n \n-\n     def __nonzero__(self):\n         \"\"\"Returns true if :attr:`status_code` is 'OK'.\"\"\"\n \n-        return not self.error\n+        try:\n+            self.raise_for_status()\n+        except HTTPError:\n+            return False\n+        finally:\n+            return True\n \n     def iter_content(self, chunk_size=10 * 1024, decode_unicode=None):\n         \"\"\"Iterates over the response data.  This avoids reading the content\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#428fc9c0bd889eb673fcfe0803e7eab0e3712ea6", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 31 | Lines Deleted: 48 | Files Changed: 2 | Hunks: 26 | Methods Changed: 10 | Complexity Δ (Sum/Max): -2/1 | Churn Δ: 79 | Churn Cumulative: 4802 | Contributors (this commit): 26 | Commits (past 90d): 157 | Contributors (cumulative): 35 | DMM Complexity: 0.0\n\nDIFF:\n@@ -262,13 +262,6 @@ class Request(object):\n             r.history = history\n \n         self.response = r\n-\n-        try:\n-            r.raise_for_status()\n-            self.response.ok = True\n-        except HTTPError:\n-            self.response.ok = False\n-\n         self.response.request = self\n \n \n@@ -284,6 +277,9 @@ class Request(object):\n         returns it twice.\n         \"\"\"\n \n+        if hasattr(data, '__iter__'):\n+            data = dict(data)\n+\n         if hasattr(data, 'items'):\n             result = []\n             for k, vs in data.items():\n@@ -298,11 +294,20 @@ class Request(object):\n     def _build_url(self):\n         \"\"\"Build the actual URL to use.\"\"\"\n \n+        if not self.url:\n+            raise URLRequired()\n+\n         # Support for unicode domain names and paths.\n         scheme, netloc, path, params, query, fragment = urlparse(self.url)\n+\n+        if not scheme:\n+            raise ValueError()\n+\n         netloc = netloc.encode('idna')\n+\n         if isinstance(path, unicode):\n             path = path.encode('utf-8')\n+\n         path = urllib.quote(urllib.unquote(path))\n         self.url = str(urlunparse([ scheme, netloc, path, params, query, fragment ]))\n \n@@ -326,10 +331,6 @@ class Request(object):\n         already been sent.\n         \"\"\"\n \n-        # Some people...\n-        if not self.url:\n-            raise URLRequired\n-\n         # Logging\n         if self.config.get('verbose'):\n             self.config.get('verbose').write('%s   %s   %s\\n' % (\n@@ -348,7 +349,12 @@ class Request(object):\n         # Multi-part file uploads.\n         if self.files:\n             if not isinstance(self.data, basestring):\n+\n+                try:\n                     fields = self.data.copy()\n+                except AttributeError:\n+                    fields = dict(self.data)\n+\n                 for (k, v) in self.files.items():\n                     fields.update({k: (k, v.read())})\n                 (body, content_type) = encode_multipart_formdata(fields)\n@@ -379,7 +385,6 @@ class Request(object):\n \n         if not self.sent or anyway:\n \n-            try:\n             if self.cookies:\n \n                 # Skip if 'cookie' header is explicitly set.\n@@ -408,17 +413,7 @@ class Request(object):\n                 decode_content=False\n             )\n \n-                # resp = {}\n-\n-\n-            except ArithmeticError:\n-                pass\n-\n-            else:\n             self._build_response(r)\n-                self.response.ok = True\n-\n-        # self.sent = self.response.ok\n \n             # Response manipulation hook.\n             self.response = dispatch_hook('response', self.hooks, self.response)\n@@ -456,9 +451,6 @@ class Response(object):\n         #: Final URL location of Response.\n         self.url = None\n \n-        #: True if no :attr:`error` occurred.\n-        self.ok = False\n-\n         #: Resulting :class:`HTTPError` of request, if one occurred.\n         self.error = None\n \n@@ -482,14 +474,17 @@ class Response(object):\n \n     def __nonzero__(self):\n         \"\"\"Returns true if :attr:`status_code` is 'OK'.\"\"\"\n+        return self.ok\n \n+    @property\n+    def ok(self):\n         try:\n             self.raise_for_status()\n         except HTTPError:\n             return False\n-        finally:\n         return True\n \n+\n     def iter_content(self, chunk_size=10 * 1024, decode_unicode=None):\n         \"\"\"Iterates over the response data.  This avoids reading the content\n         at once into memory for large responses.  The chunk size is the number\n@@ -497,8 +492,9 @@ class Response(object):\n         length of each item returned as decoding can take place.\n         \"\"\"\n         if self._content_consumed:\n-            raise RuntimeError('The content for this response was '\n-                               'already consumed')\n+            raise RuntimeError(\n+                'The content for this response was already consumed'\n+            )\n \n         def generate():\n             while 1:\n@@ -507,15 +503,21 @@ class Response(object):\n                     break\n                 yield chunk\n             self._content_consumed = True\n+\n         gen = generate()\n+\n         if 'gzip' in self.headers.get('content-encoding', ''):\n             gen = stream_decode_gzip(gen)\n+\n         if decode_unicode is None:\n             decode_unicode = self.config.get('decode_unicode')\n+\n         if decode_unicode:\n             gen = stream_decode_response_unicode(gen, self)\n+\n         return gen\n \n+\n     @property\n     def content(self):\n         \"\"\"Content of the response, in bytes or unicode\n\n@@ -234,6 +234,7 @@ class RequestsTestSuite(unittest.TestCase):\n         for service in SERVICES:\n \n             r = requests.get(service('status', '404'))\n+            print r.status_code\n             self.assertEqual(r.ok, False)\n \n \n@@ -246,26 +247,6 @@ class RequestsTestSuite(unittest.TestCase):\n         r.raise_for_status()\n \n \n-    def test_cookie_jar(self):\n-\n-        jar = cookielib.CookieJar()\n-        self.assertFalse(jar)\n-\n-        url = httpbin('cookies', 'set', 'requests_cookie', 'awesome')\n-        r = requests.get(url, cookies=jar)\n-        self.assertTrue(jar)\n-\n-        cookie_found = False\n-        for cookie in jar:\n-            if cookie.name == 'requests_cookie':\n-                self.assertEquals(cookie.value, 'awesome')\n-                cookie_found = True\n-        self.assertTrue(cookie_found)\n-\n-        r = requests.get(httpbin('cookies'), cookies=jar)\n-        self.assertTrue('awesome' in r.content)\n-\n-\n     def test_decompress_gzip(self):\n \n         r = requests.get(httpbin('gzip'))\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#73ed950e70cdf27c6455845c2ae14de0b0ab0af3", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 3 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 1 | Methods Changed: 2 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 5 | Churn Cumulative: 377 | Contributors (this commit): 3 | Commits (past 90d): 13 | Contributors (cumulative): 3 | DMM Complexity: 0.0\n\nDIFF:\n@@ -32,8 +32,9 @@ def patched(f):\n     \"\"\"Patches a given API function to not send.\"\"\"\n \n     def wrapped(*args, **kwargs):\n-        new_kwargs = dict(kwargs)\n-        new_kwargs['return_response'] = False\n+\n+        kwargs['return_response'] = False\n+\n         return f(*args, **kwargs)\n \n     return wrapped\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#6140fac6aae936fb0ce067c5b278be54e27cf1f3", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 1 | Churn Cumulative: 66 | Contributors (this commit): 1 | Commits (past 90d): 6 | Contributors (cumulative): 1 | DMM Complexity: None\n\nDIFF:\n@@ -26,6 +26,7 @@ defaults = dict()\n defaults['base_headers'] = {\n     'User-Agent': 'python-requests/%s' % __version__,\n     'Accept-Encoding': ', '.join(('identity', 'deflate', 'compress', 'gzip')),\n+    'Accept': '*/*'\n }\n \n defaults['proxies'] = {}\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#6ac1e0269134694fde1236f277760f9b23f633af", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 3 | Churn Cumulative: 625 | Contributors (this commit): 3 | Commits (past 90d): 36 | Contributors (cumulative): 3 | DMM Complexity: None\n\nDIFF:\n@@ -161,8 +161,9 @@ class Session(object):\n \n             args[attr] = merge_kwargs(local_val, session_val)\n \n+\n         # Arguments manipulation hook.\n-        args = dispatch_hook('args', hooks, args)\n+        args = dispatch_hook('args', args['hooks'], args)\n \n         r = Request(**args)\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#3a4f6ba8b3429b233dada1dddb2fe859119ba494", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 193 | Contributors (this commit): 2 | Commits (past 90d): 13 | Contributors (cumulative): 2 | DMM Complexity: None\n\nDIFF:\n@@ -15,8 +15,8 @@ requests\n \"\"\"\n \n __title__ = 'requests'\n-__version__ = '0.7.3'\n-__build__ = 0x000703\n+__version__ = '0.7.4'\n+__build__ = 0x000704\n __author__ = 'Kenneth Reitz'\n __license__ = 'ISC'\n __copyright__ = 'Copyright 2011 Kenneth Reitz'\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#e43b438729b31a1295b372d8668c4f2b3132f016", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): 3/3 | Churn Δ: 3 | Churn Cumulative: 1269 | Contributors (this commit): 15 | Commits (past 90d): 27 | Contributors (cumulative): 15 | DMM Complexity: None\n\nDIFF:\n@@ -10,6 +10,7 @@ import unittest\n \n import requests\n import envoy\n+from urllib2 import HTTPError\n \n try:\n     import omnijson as json\n@@ -239,7 +240,7 @@ class RequestsTestSuite(unittest.TestCase):\n \n     def test_status_raising(self):\n         r = requests.get(httpbin('status', '404'))\n-        self.assertRaises(requests.HTTPError, r.raise_for_status)\n+        self.assertRaises(HTTPError, r.raise_for_status)\n \n         r = requests.get(httpbin('status', '200'))\n         self.assertFalse(r.error)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#b8c55da48d780c3688a5df724d87b8daa739b3f8", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 17 | Lines Deleted: 21 | Files Changed: 3 | Hunks: 11 | Methods Changed: 6 | Complexity Δ (Sum/Max): -3/0 | Churn Δ: 38 | Churn Cumulative: 5468 | Contributors (this commit): 26 | Commits (past 90d): 197 | Contributors (cumulative): 38 | DMM Complexity: 1.0\n\nDIFF:\n@@ -18,16 +18,9 @@ from datetime import datetime\n from .auth import dispatch as auth_dispatch\n from .hooks import dispatch_hook\n from .structures import CaseInsensitiveDict\n-from .packages.poster.encode import multipart_encode\n-from .packages.poster.streaminghttp import register_openers, get_handlers\n from .status_codes import codes\n-from .exceptions import Timeout, URLRequired, TooManyRedirects\n-from .monkeys import Request as _Request\n-from .monkeys import HTTPRedirectHandler\n-from .exceptions import Timeout, URLRequired, TooManyRedirects, RequestException, HTTPError\n-from .exceptions import Timeout, URLRequired, TooManyRedirects\n-from .monkeys import Request as _Request\n-from .monkeys import HTTPRedirectHandler\n+from .exceptions import Timeout, URLRequired, TooManyRedirects, HTTPError\n+\n from .utils import (\n     dict_from_cookiejar, get_unicode_from_response,\n     stream_decode_response_unicode, decode_gzip, stream_decode_gzip)\n@@ -190,6 +183,7 @@ class Request(object):\n \n             # Start off with our local cookies.\n             cookies = self.cookies or dict()\n+            print '  %s' % str(cookies)\n \n             # Add new cookies from the server.\n             if 'set-cookie' in response.headers:\n\n@@ -9,12 +9,10 @@ requests (cookies, auth, proxies).\n \n \"\"\"\n \n-import cookielib\n-\n from .defaults import defaults\n from .models import Request\n from .hooks import dispatch_hook\n-from .utils import add_dict_to_cookiejar, cookiejar_from_dict, header_expand\n+from .utils import header_expand\n from .packages.urllib3.poolmanager import PoolManager\n \n \n@@ -87,7 +85,7 @@ class Session(object):\n         )\n \n         # Set up a CookieJar to be used by default\n-        self.cookies = cookielib.FileCookieJar()\n+        self.cookies = {}\n \n     def __repr__(self):\n         return '<requests-client at 0x%x>' % (id(self))\n@@ -135,11 +133,6 @@ class Session(object):\n         if cookies is None:\n             cookies = {}\n \n-        if isinstance(cookies, dict):\n-            cookies = add_dict_to_cookiejar(self.cookies, cookies)\n-\n-        cookies = cookiejar_from_dict(cookies)\n-\n         # Expand header values\n         if headers:\n             for k, v in headers.items() or {}:\n\n@@ -4,13 +4,12 @@\n from __future__ import with_statement\n \n import time\n-import cookielib\n import os\n import unittest\n \n import requests\n import envoy\n-from urllib2 import HTTPError\n+from requests import HTTPError\n \n try:\n     import omnijson as json\n@@ -235,7 +234,8 @@ class RequestsTestSuite(unittest.TestCase):\n         for service in SERVICES:\n \n             r = requests.get(service('status', '404'))\n-            print r.status_code\n+            # print r.status_code\n+            # r.raise_for_status()\n             self.assertEqual(r.ok, False)\n \n \n@@ -510,6 +510,15 @@ class RequestsTestSuite(unittest.TestCase):\n         assert params3['b'] in r3.content\n         assert params3['c'] in r3.content\n \n+    def test_cookies(self):\n+\n+        s = requests.session()\n+        r = s.get(httpbin('cookies', 'set', 'face', 'book'))\n+        print r.headers\n+        print r.history[0].cookies\n+        print r.content\n+        print r.url\n+\n \n if __name__ == '__main__':\n     unittest.main()\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#e32840f6319eb1879a4828dc410b50352877fb64", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 17 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 17 | Churn Cumulative: 884 | Contributors (this commit): 10 | Commits (past 90d): 46 | Contributors (cumulative): 10 | DMM Complexity: None\n\nDIFF:\n@@ -29,6 +29,23 @@ def request(method, url,\n     hooks=None,\n     return_response=True,\n     config=None):\n+    \"\"\"Constructs and sends a :class:`Request <Request>`.\n+    Returns :class:`Response <Response>` object.\n+\n+    :param method: method for the new :class:`Request` object.\n+    :param url: URL for the new :class:`Request` object.\n+    :param params: (optional) Dictionary or bytes to be sent in the query string for the :class:`Request`.\n+    :param data: (optional) Dictionary or bytes to send in the body of the :class:`Request`.\n+    :param headers: (optional) Dictionary of HTTP Headers to send with the :class:`Request`.\n+    :param cookies: (optional) Dict or CookieJar object to send with the :class:`Request`.\n+    :param files: (optional) Dictionary of 'filename': file-like-objects for multipart encoding upload.\n+    :param auth: (optional) Auth typle to enable Basic/Digest/Custom HTTP Auth.\n+    :param timeout: (optional) Float describing the timeout of the request.\n+    :param allow_redirects: (optional) Boolean. Set to True if POST/PUT/DELETE redirect following is allowed.\n+    :param proxies: (optional) Dictionary mapping protocol to the URL of the proxy.\n+    :param return_response: (optional) If False, an un-sent Request object will returned.\n+    :param config: (optional) A configuration dictionary.\n+    \"\"\"\n \n     s = session()\n     return s.request(\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#eaf1264879d8aebfc160a385889e9e0483810456", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 3/3 | Churn Δ: 1 | Churn Cumulative: 3549 | Contributors (this commit): 21 | Commits (past 90d): 131 | Contributors (cumulative): 21 | DMM Complexity: 0.0\n\nDIFF:\n@@ -338,6 +338,7 @@ class Request(object):\n             r = auth_func(self, *auth_args)\n \n             self.__dict__.update(r.__dict__)\n+            self.auth = auth_args\n \n         # Build the Urllib2 Request.\n         req = _Request(url, data=data, headers=headers, method=self.method)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#3efd5dbab42fb6fe7d4825bbd575d989574c1505", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 3 | Methods Changed: 3 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 3553 | Contributors (this commit): 21 | Commits (past 90d): 132 | Contributors (cumulative): 21 | DMM Complexity: 1.0\n\nDIFF:\n@@ -96,6 +96,7 @@ class Request(object):\n         self.response = Response()\n \n         #: Authentication tuple to attach to :class:`Request <Request>`.\n+        self._auth = auth\n         self.auth = auth_dispatch(auth)\n \n         #: CookieJar to attach to :class:`Request <Request>`.\n@@ -237,7 +238,7 @@ class Request(object):\n                     method=method,\n                     # data=self.data,\n                     # params=self.params,\n-                    auth=self.auth,\n+                    auth=self._auth,\n                     cookies=self.cookies,\n                     redirect=True,\n                     config=self.config\n@@ -338,7 +339,6 @@ class Request(object):\n             r = auth_func(self, *auth_args)\n \n             self.__dict__.update(r.__dict__)\n-            self.auth = auth_args\n \n         # Build the Urllib2 Request.\n         req = _Request(url, data=data, headers=headers, method=self.method)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#f7968b6797a50716a2f177ad23439a3c6bb9f683", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 9 | Lines Deleted: 0 | Files Changed: 2 | Hunks: 3 | Methods Changed: 2 | Complexity Δ (Sum/Max): 4/3 | Churn Δ: 9 | Churn Cumulative: 4846 | Contributors (this commit): 27 | Commits (past 90d): 162 | Contributors (cumulative): 36 | DMM Complexity: 0.5\n\nDIFF:\n@@ -496,7 +496,11 @@ class Response(object):\n                                'already consumed')\n \n         # Read the contents.\n+        try:\n             self._content = self.raw.read()\n+        except AttributeError:\n+            return None\n+\n \n         # Decode GZip'd content.\n         if 'gzip' in self.headers.get('content-encoding', ''):\n\n@@ -529,6 +529,11 @@ class RequestsTestSuite(unittest.TestCase):\n         assert params3['b'] in r3.content\n         assert params3['c'] in r3.content\n \n+    def test_invalid_content(self):\n+\n+        r = requests.get('http://somedomainthatclearlydoesntexistg.com')\n+        assert r.content == None\n+\n \n if __name__ == '__main__':\n     unittest.main()\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#2bae57e0a6c764b1b28b3bbb1b3b0cd1cc9b4f14", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 197 | Contributors (this commit): 2 | Commits (past 90d): 14 | Contributors (cumulative): 2 | DMM Complexity: None\n\nDIFF:\n@@ -15,8 +15,8 @@ requests\n \"\"\"\n \n __title__ = 'requests'\n-__version__ = '0.7.4'\n-__build__ = 0x000704\n+__version__ = '0.7.5'\n+__build__ = 0x000705\n __author__ = 'Kenneth Reitz'\n __license__ = 'ISC'\n __copyright__ = 'Copyright 2011 Kenneth Reitz'\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#6fefffd03ed2a8ebfa882fff48fda41f29251d1f", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 8 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 4 | Methods Changed: 2 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 9 | Churn Cumulative: 386 | Contributors (this commit): 4 | Commits (past 90d): 14 | Contributors (cumulative): 4 | DMM Complexity: 0.0\n\nDIFF:\n@@ -12,6 +12,7 @@ by gevent. All API methods return a ``Request`` instance (as opposed to\n try:\n     import gevent\n     from gevent import monkey as curious_george\n+    from gevent.pool import Pool\n except ImportError:\n     raise RuntimeError('Gevent is required for requests.async.')\n \n@@ -61,13 +62,19 @@ delete = patched(api.delete)\n request = patched(api.request)\n \n \n-def map(requests, prefetch=True):\n+def map(requests, prefetch=True, size=None):\n     \"\"\"Concurrently converts a list of Requests to Responses.\n \n     :param requests: a collection of Request objects.\n     :param prefetch: If False, the content will not be downloaded immediately.\n+    :param size: Specifies the number of requests to make at a time. If None, no throttling occurs.\n     \"\"\"\n \n+    if size:\n+        pool = Pool(size)\n+        pool.map(send, requests)\n+        pool.join()\n+    else:\n         jobs = [gevent.spawn(send, r) for r in requests]\n         gevent.joinall(jobs)\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#12fa108edeeb876d6a5f2a407ebe64dd7ae8339e", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 2 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 3 | Churn Cumulative: 174 | Contributors (this commit): 1 | Commits (past 90d): 8 | Contributors (cumulative): 1 | DMM Complexity: 0.0\n\nDIFF:\n@@ -67,7 +67,8 @@ def http_digest(r, username, password):\n \n             # XXX not implemented yet\n             entdig = None\n-            path = urlparse(r.request.url).path\n+            p_parsed = urlparse(r.request.url)\n+            path = p_parsed.path + p_parsed.query\n \n             A1 = \"%s:%s:%s\" % (username, realm, password)\n             A2 = \"%s:%s\" % (r.request.method, path)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#8c90c610cd15f91ed0cd1738aa73f088496b6af9", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 201 | Contributors (this commit): 2 | Commits (past 90d): 15 | Contributors (cumulative): 2 | DMM Complexity: None\n\nDIFF:\n@@ -15,8 +15,8 @@ requests\n \"\"\"\n \n __title__ = 'requests'\n-__version__ = '0.7.5'\n-__build__ = 0x000705\n+__version__ = '0.7.6'\n+__build__ = 0x000706\n __author__ = 'Kenneth Reitz'\n __license__ = 'ISC'\n __copyright__ = 'Copyright 2011 Kenneth Reitz'\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#73ba48be2e51e2dea2f4e6c924495796c112a9a3", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 26 | Lines Deleted: 3 | Files Changed: 4 | Hunks: 6 | Methods Changed: 2 | Complexity Δ (Sum/Max): 2/2 | Churn Δ: 29 | Churn Cumulative: 2136 | Contributors (this commit): 15 | Commits (past 90d): 115 | Contributors (cumulative): 23 | DMM Complexity: 1.0\n\nDIFF:\n@@ -24,7 +24,7 @@ __copyright__ = 'Copyright 2011 Kenneth Reitz'\n \n from . import utils\n from .models import Request, Response\n-from .api import request, get, head, post, patch, put, delete\n+from .api import request, get, options, head, post, patch, put, delete\n from .sessions import session\n from .status_codes import codes\n from .exceptions import (\n\n@@ -13,7 +13,7 @@ This module implements the Requests API.\n \n from .sessions import session\n \n-__all__ = ('request', 'get', 'head', 'post', 'patch', 'put', 'delete')\n+__all__ = ('request', 'get', 'options', 'head', 'post', 'patch', 'put', 'delete')\n \n \n def request(method, url,\n@@ -67,6 +67,17 @@ def get(url, **kwargs):\n     return request('GET', url, **kwargs)\n \n \n+def options(url, **kwargs):\n+    \"\"\"Sends a OPTIONS request. Returns :class:`Response` object.\n+\n+    :param url: URL for the new :class:`Request` object.\n+    :param **kwargs: Optional arguments that ``request`` takes.\n+    \"\"\"\n+\n+    kwargs.setdefault('allow_redirects', True)\n+    return request('OPTIONS', url, **kwargs)\n+\n+\n def head(url, **kwargs):\n     \"\"\"Sends a HEAD request. Returns :class:`Response` object.\n \n\n@@ -24,7 +24,7 @@ from .hooks import dispatch_hook\n \n __all__ = (\n     'map',\n-    'get', 'head', 'post', 'put', 'patch', 'delete', 'request'\n+    'get', 'options', 'head', 'post', 'put', 'patch', 'delete', 'request'\n )\n \n \n@@ -53,6 +53,7 @@ def send(r, pools=None):\n \n # Patched requests.api functions.\n get = patched(api.get)\n+options = patched(api.options)\n head = patched(api.head)\n post = patched(api.post)\n put = patched(api.put)\n\n@@ -188,6 +188,17 @@ class Session(object):\n         return self.request('GET', url, **kwargs)\n \n \n+    def options(self, url, **kwargs):\n+        \"\"\"Sends a OPTIONS request. Returns :class:`Response` object.\n+\n+        :param url: URL for the new :class:`Request` object.\n+        :param **kwargs: Optional arguments that ``request`` takes.\n+        \"\"\"\n+\n+        kwargs.setdefault('allow_redirects', True)\n+        return self.request('OPTIONS', url, **kwargs)\n+\n+\n     def head(self, url, **kwargs):\n         \"\"\"Sends a HEAD request. Returns :class:`Response` object.\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#f5bbb9714d66103280d0ca10742877f4522787ff", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 4 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 5 | Churn Cumulative: 1294 | Contributors (this commit): 15 | Commits (past 90d): 30 | Contributors (cumulative): 15 | DMM Complexity: None\n\nDIFF:\n@@ -531,7 +531,10 @@ class RequestsTestSuite(unittest.TestCase):\n \n     def test_invalid_content(self):\n \n-        r = requests.get('http://somedomainthatclearlydoesntexistg.com')\n+        # WARNING: if you're using a terrible DNS provider (comcast),\n+        # this will fail.\n+        r = requests.get('http://somedomainthatclearlydoesntexistg.com', allow_redirects=False)\n+\n         assert r.content == None\n \n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#498b446f141675026ae7364b922f03cde1de728c", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 0 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 2 | Methods Changed: 2 | Complexity Δ (Sum/Max): -4/0 | Churn Δ: 2 | Churn Cumulative: 3559 | Contributors (this commit): 21 | Commits (past 90d): 128 | Contributors (cumulative): 21 | DMM Complexity: 0.0\n\nDIFF:\n@@ -8,7 +8,6 @@ requests.models\n \"\"\"\n \n import urllib\n-import socket\n import zlib\n from Cookie import SimpleCookie\n \n@@ -183,7 +182,6 @@ class Request(object):\n \n             # Start off with our local cookies.\n             cookies = self.cookies or dict()\n-            print '  %s' % str(cookies)\n \n             # Add new cookies from the server.\n             if 'set-cookie' in response.headers:\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#358478eb8881e3ebdef6afae09ee8ba934f66ee9", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 8 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 3 | Methods Changed: 2 | Complexity Δ (Sum/Max): -1/0 | Churn Δ: 8 | Churn Cumulative: 655 | Contributors (this commit): 4 | Commits (past 90d): 39 | Contributors (cumulative): 4 | DMM Complexity: 0.0\n\nDIFF:\n@@ -87,6 +87,9 @@ class Session(object):\n         # Set up a CookieJar to be used by default\n         self.cookies = {}\n \n+        if cookies is not None:\n+            self.cookies.update(cookies)\n+\n     def __repr__(self):\n         return '<requests-client at 0x%x>' % (id(self))\n \n@@ -165,6 +168,7 @@ class Session(object):\n         # Arguments manipulation hook.\n         args = dispatch_hook('args', args['hooks'], args)\n \n+        # Create the (empty) response.\n         r = Request(**args)\n \n         # Don't send if asked nicely.\n@@ -174,6 +178,10 @@ class Session(object):\n         # Send the HTTP Request.\n         r.send()\n \n+        # Send any cookies back up the to the session.\n+        self.cookies.update(r.response.cookies)\n+\n+        # Return the response.\n         return r.response\n \n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#e6490039749ae6b1a3305a9bab2b826979b5fb56", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 24 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 2 | Methods Changed: 2 | Complexity Δ (Sum/Max): -2/0 | Churn Δ: 25 | Churn Cumulative: 1319 | Contributors (this commit): 15 | Commits (past 90d): 31 | Contributors (cumulative): 15 | DMM Complexity: 1.0\n\nDIFF:\n@@ -59,7 +59,6 @@ class RequestsTestSuite(unittest.TestCase):\n         # self.httpbin.kill()\n \n     def test_entry_points(self):\n-        import requests\n \n         requests.session\n         requests.session().get\n@@ -482,6 +481,30 @@ class RequestsTestSuite(unittest.TestCase):\n \n         self.assertEqual(r2.status_code, 200)\n \n+    def test_session_persistent_cookies(self):\n+\n+        s = requests.session()\n+\n+        # Internally dispatched cookies are sent.\n+        _c = {'kenneth': 'reitz', 'bessie': 'monke'}\n+        r = s.get(httpbin('cookies'), cookies=_c)\n+        r = s.get(httpbin('cookies'))\n+\n+        # Those cookies persist transparently.\n+        c = json.loads(r.content).get('cookies')\n+        assert c == _c\n+\n+        # Double check.\n+        r = s.get(httpbin('cookies'), cookies={})\n+        c = json.loads(r.content).get('cookies')\n+        assert c == _c\n+\n+        # Remove a cookie by setting it's value to None.\n+        r = s.get(httpbin('cookies'), cookies={'bessie': None})\n+        c = json.loads(r.content).get('cookies')\n+        del _c['bessie']\n+        assert c == _c\n+\n \n     def test_session_persistent_params(self):\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#f9141f51ec937da874aa6799393acb78a0247675", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 6 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 6 | Churn Cumulative: 1325 | Contributors (this commit): 15 | Commits (past 90d): 32 | Contributors (cumulative): 15 | DMM Complexity: 1.0\n\nDIFF:\n@@ -506,6 +506,12 @@ class RequestsTestSuite(unittest.TestCase):\n         assert c == _c\n \n \n+        s = requests.session(cookies=_c)\n+        c = json.loads(r.content).get('cookies')\n+        assert c == _c\n+\n+\n+\n     def test_session_persistent_params(self):\n \n         params = {'a': 'a_test'}\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#6a51f6b2f8af5b3e68a9b3f2edfd4c673dadc3b1", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 13 | Lines Deleted: 38 | Files Changed: 2 | Hunks: 8 | Methods Changed: 2 | Complexity Δ (Sum/Max): 3/3 | Churn Δ: 51 | Churn Cumulative: 3676 | Contributors (this commit): 21 | Commits (past 90d): 136 | Contributors (cumulative): 22 | DMM Complexity: 0.0\n\nDIFF:\n@@ -38,3 +38,4 @@ defaults['timeout_fallback'] = True\n # defaults['keep_alive'] = True\n defaults['pool_connections'] = 10\n defaults['pool_maxsize'] = 1\n+defaults['max_retries'] = 0\n\n@@ -14,12 +14,14 @@ from Cookie import SimpleCookie\n from urlparse import urlparse, urlunparse, urljoin\n from datetime import datetime\n \n+\n from .auth import dispatch as auth_dispatch\n from .hooks import dispatch_hook\n from .structures import CaseInsensitiveDict\n from .status_codes import codes\n-from .exceptions import Timeout, URLRequired, TooManyRedirects, HTTPError\n-\n+from .packages.urllib3.exceptions import MaxRetryError\n+from .exceptions import (\n+    Timeout, URLRequired, TooManyRedirects, HTTPError, ConnectionError)\n from .utils import (\n     dict_from_cookiejar, get_unicode_from_response,\n     stream_decode_response_unicode, decode_gzip, stream_decode_gzip)\n@@ -129,39 +131,6 @@ class Request(object):\n         return '<Request [%s]>' % (self.method)\n \n \n-    # def _get_opener(self):\n-    #     \"\"\"Creates appropriate opener object for urllib2.\"\"\"\n-\n-    #     _handlers = []\n-\n-    #     if self.cookies is not None:\n-    #         _handlers.append(urllib2.HTTPCookieProcessor(self.cookies))\n-\n-    #     if self.proxies:\n-    #         _handlers.append(urllib2.ProxyHandler(self.proxies))\n-\n-    #     _handlers.append(HTTPRedirectHandler)\n-\n-    #     if not _handlers:\n-    #         return urllib2.urlopen\n-\n-    #     if self.data or self.files:\n-    #         _handlers.extend(get_handlers())\n-\n-    #     opener = urllib2.build_opener(*_handlers)\n-\n-    #     if self.headers:\n-    #         # Allow default headers in the opener to be overloaded\n-    #         normal_keys = [k.capitalize() for k in self.headers]\n-    #         for key, val in opener.addheaders[:]:\n-    #             if key not in normal_keys:\n-    #                 continue\n-    #             # Remove it, we have a value to take its place\n-    #             opener.addheaders.remove((key, val))\n-\n-    #     return opener.open\n-\n-\n     def _build_response(self, resp, is_error=False):\n         \"\"\"Build internal :class:`Response <Response>` object\n         from given response.\n@@ -219,8 +188,6 @@ class Request(object):\n                 ((r.status_code is codes.see_other) or (self.allow_redirects))\n             ):\n \n-                # r.raw.close()\n-\n                 if not len(history) < self.config.get('max_redirects'):\n                     raise TooManyRedirects()\n \n@@ -402,6 +369,7 @@ class Request(object):\n                     # Attach Cookie header to request.\n                     self.headers['Cookie'] = cookie_header\n \n+            try:\n                 # Create the connection.\n                 r = conn.urlopen(\n                     method=self.method,\n@@ -411,8 +379,14 @@ class Request(object):\n                     redirect=False,\n                     assert_same_host=False,\n                     preload_content=False,\n-                decode_content=False\n+                    decode_content=False,\n+                    retries=self.config.get('max_retries', 0)\n                 )\n+            except MaxRetryError, e:\n+                if self.config.get('safe_mode', False):\n+                    pass\n+                raise ConnectionError(e)\n+\n \n             self._build_response(r)\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
