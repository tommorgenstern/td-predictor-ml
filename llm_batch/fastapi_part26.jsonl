{"custom_id": "fastapi#7244e4b61290742993e55caaf6f334634e7a9503", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 159 | Contributors (this commit): 1 | Commits (past 90d): 33 | Contributors (cumulative): 1 | DMM Complexity: None\n\nDIFF:\n@@ -1,6 +1,6 @@\n \"\"\"FastAPI framework, high performance, easy to learn, fast to code, ready for production\"\"\"\n \n-__version__ = \"0.28.0\"\n+__version__ = \"0.29.0\"\n \n from starlette.background import BackgroundTasks\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#693962173071ed99cdcdc1fca9b982144a6669bf", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 181 | Lines Deleted: 4 | Files Changed: 2 | Hunks: 5 | Methods Changed: 6 | Complexity Δ (Sum/Max): 3/2 | Churn Δ: 185 | Churn Cumulative: 1253 | Contributors (this commit): 3 | Commits (past 90d): 15 | Contributors (cumulative): 4 | DMM Complexity: 0.6153846153846154\n\nDIFF:\n@@ -297,7 +297,7 @@ async def solve_dependencies(\n     *,\n     request: Union[Request, WebSocket],\n     dependant: Dependant,\n-    body: Dict[str, Any] = None,\n+    body: Optional[Union[Dict[str, Any], FormData]] = None,\n     background_tasks: BackgroundTasks = None,\n     response: Response = None,\n     dependency_overrides_provider: Any = None,\n@@ -388,7 +388,7 @@ async def solve_dependencies(\n     errors += path_errors + query_errors + header_errors + cookie_errors\n     if dependant.body_params:\n         body_values, body_errors = await request_body_to_args(  # type: ignore # body_params checked above\n-            dependant.body_params, body\n+            required_params=dependant.body_params, received_body=body\n         )\n         values.update(body_values)\n         errors.extend(body_errors)\n@@ -447,7 +447,8 @@ def request_params_to_args(\n \n \n async def request_body_to_args(\n-    required_params: List[Field], received_body: Dict[str, Any]\n+    required_params: List[Field],\n+    received_body: Optional[Union[Dict[str, Any], FormData]],\n ) -> Tuple[Dict[str, Any], List[ErrorWrapper]]:\n     values = {}\n     errors = []\n@@ -457,7 +458,11 @@ async def request_body_to_args(\n         if len(required_params) == 1 and not embed:\n             received_body = {field.alias: received_body}\n         for field in required_params:\n-            if field.shape in sequence_shapes and isinstance(received_body, FormData):\n+            value = None\n+            if received_body is not None:\n+                if field.shape in sequence_shapes and isinstance(\n+                    received_body, FormData\n+                ):\n                     value = received_body.getlist(field.alias)\n                 else:\n                     value = received_body.get(field.alias)\n\n@@ -0,0 +1,172 @@\n+import pytest\n+from starlette.testclient import TestClient\n+\n+from body_multiple_params.tutorial003 import app\n+\n+client = TestClient(app)\n+\n+openapi_schema = {\n+    \"openapi\": \"3.0.2\",\n+    \"info\": {\"title\": \"Fast API\", \"version\": \"0.1.0\"},\n+    \"paths\": {\n+        \"/items/{item_id}\": {\n+            \"put\": {\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                    },\n+                    \"422\": {\n+                        \"description\": \"Validation Error\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\n+                                    \"$ref\": \"#/components/schemas/HTTPValidationError\"\n+                                }\n+                            }\n+                        },\n+                    },\n+                },\n+                \"summary\": \"Update Item\",\n+                \"operationId\": \"update_item_items__item_id__put\",\n+                \"parameters\": [\n+                    {\n+                        \"required\": True,\n+                        \"schema\": {\"title\": \"Item_Id\", \"type\": \"integer\"},\n+                        \"name\": \"item_id\",\n+                        \"in\": \"path\",\n+                    }\n+                ],\n+                \"requestBody\": {\n+                    \"content\": {\n+                        \"application/json\": {\n+                            \"schema\": {\"$ref\": \"#/components/schemas/Body_update_item\"}\n+                        }\n+                    },\n+                    \"required\": True,\n+                },\n+            }\n+        }\n+    },\n+    \"components\": {\n+        \"schemas\": {\n+            \"Item\": {\n+                \"title\": \"Item\",\n+                \"required\": [\"name\", \"price\"],\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"name\": {\"title\": \"Name\", \"type\": \"string\"},\n+                    \"price\": {\"title\": \"Price\", \"type\": \"number\"},\n+                    \"description\": {\"title\": \"Description\", \"type\": \"string\"},\n+                    \"tax\": {\"title\": \"Tax\", \"type\": \"number\"},\n+                },\n+            },\n+            \"User\": {\n+                \"title\": \"User\",\n+                \"required\": [\"username\"],\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"username\": {\"title\": \"Username\", \"type\": \"string\"},\n+                    \"full_name\": {\"title\": \"Full_Name\", \"type\": \"string\"},\n+                },\n+            },\n+            \"Body_update_item\": {\n+                \"title\": \"Body_update_item\",\n+                \"required\": [\"item\", \"user\", \"importance\"],\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"item\": {\"$ref\": \"#/components/schemas/Item\"},\n+                    \"user\": {\"$ref\": \"#/components/schemas/User\"},\n+                    \"importance\": {\"title\": \"Importance\", \"type\": \"integer\"},\n+                },\n+            },\n+            \"ValidationError\": {\n+                \"title\": \"ValidationError\",\n+                \"required\": [\"loc\", \"msg\", \"type\"],\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"loc\": {\n+                        \"title\": \"Location\",\n+                        \"type\": \"array\",\n+                        \"items\": {\"type\": \"string\"},\n+                    },\n+                    \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n+                    \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n+                },\n+            },\n+            \"HTTPValidationError\": {\n+                \"title\": \"HTTPValidationError\",\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"detail\": {\n+                        \"title\": \"Detail\",\n+                        \"type\": \"array\",\n+                        \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n+                    }\n+                },\n+            },\n+        }\n+    },\n+}\n+\n+\n+def test_openapi_schema():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200\n+    assert response.json() == openapi_schema\n+\n+\n+# Test required and embedded body parameters with no bodies sent\n+@pytest.mark.parametrize(\n+    \"path,body,expected_status,expected_response\",\n+    [\n+        (\n+            \"/items/5\",\n+            {\n+                \"importance\": 2,\n+                \"item\": {\"name\": \"Foo\", \"price\": 50.5},\n+                \"user\": {\"username\": \"Dave\"},\n+            },\n+            200,\n+            {\n+                \"item_id\": 5,\n+                \"importance\": 2,\n+                \"item\": {\n+                    \"name\": \"Foo\",\n+                    \"price\": 50.5,\n+                    \"description\": None,\n+                    \"tax\": None,\n+                },\n+                \"user\": {\"username\": \"Dave\", \"full_name\": None},\n+            },\n+        ),\n+        (\n+            \"/items/5\",\n+            None,\n+            422,\n+            {\n+                \"detail\": [\n+                    {\n+                        \"loc\": [\"body\", \"item\"],\n+                        \"msg\": \"field required\",\n+                        \"type\": \"value_error.missing\",\n+                    },\n+                    {\n+                        \"loc\": [\"body\", \"user\"],\n+                        \"msg\": \"field required\",\n+                        \"type\": \"value_error.missing\",\n+                    },\n+                    {\n+                        \"loc\": [\"body\", \"importance\"],\n+                        \"msg\": \"field required\",\n+                        \"type\": \"value_error.missing\",\n+                    },\n+                ]\n+            },\n+        ),\n+    ],\n+)\n+def test_post_body(path, body, expected_status, expected_response):\n+    response = client.put(path, json=body)\n+    assert response.status_code == expected_status\n+    assert response.json() == expected_response\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#c26f1760d474f8240d2311ae16a9f17c9fbbae9b", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 161 | Contributors (this commit): 1 | Commits (past 90d): 33 | Contributors (cumulative): 1 | DMM Complexity: None\n\nDIFF:\n@@ -1,6 +1,6 @@\n \"\"\"FastAPI framework, high performance, easy to learn, fast to code, ready for production\"\"\"\n \n-__version__ = \"0.29.0\"\n+__version__ = \"0.29.1\"\n \n from starlette.background import BackgroundTasks\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#f0df79aa918798d466e87c2163b2d3e81c51e854", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 2 | Files Changed: 2 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 210 | Contributors (this commit): 3 | Commits (past 90d): 7 | Contributors (cumulative): 5 | DMM Complexity: None\n\nDIFF:\n@@ -28,7 +28,7 @@ def get_flat_models_from_routes(\n             if route.response_fields:\n                 responses_from_routes.extend(route.response_fields.values())\n     flat_models = get_flat_models_from_fields(\n-        body_fields_from_routes + responses_from_routes\n+        body_fields_from_routes + responses_from_routes, known_models=set()\n     )\n     return flat_models\n \n\n@@ -31,7 +31,7 @@ openapi_schema = {\n                 \"parameters\": [\n                     {\n                         \"required\": False,\n-                        \"schema\": {\"title\": \"Q\", \"type\": \"array\"},\n+                        \"schema\": {\"title\": \"Q\", \"type\": \"array\", \"items\": {}},\n                         \"name\": \"q\",\n                         \"in\": \"query\",\n                     }\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#5b3adfe449f19c487b041d5a571c8869b115c9ed", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 6 | Lines Deleted: 2 | Files Changed: 2 | Hunks: 3 | Methods Changed: 1 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 8 | Churn Cumulative: 876 | Contributors (this commit): 5 | Commits (past 90d): 12 | Contributors (cumulative): 7 | DMM Complexity: 0.0\n\nDIFF:\n@@ -1,3 +1,4 @@\n+import http.client\n from typing import Any, Dict, List, Optional, Sequence, Tuple, Type, cast\n \n from fastapi import routing\n@@ -187,7 +188,10 @@ def get_openapi_path(\n                         response.setdefault(\"content\", {}).setdefault(\n                             \"application/json\", {}\n                         )[\"schema\"] = response_schema\n-                    response.setdefault(\"description\", \"Additional Response\")\n+                    status_text = http.client.responses.get(int(additional_status_code))\n+                    response.setdefault(\n+                        \"description\", status_text or \"Additional Response\"\n+                    )\n                     operation.setdefault(\"responses\", {})[\n                         str(additional_status_code)\n                     ] = response\n\n@@ -12,7 +12,7 @@ openapi_schema = {\n             \"get\": {\n                 \"responses\": {\n                     \"404\": {\n-                        \"description\": \"Additional Response\",\n+                        \"description\": \"Not Found\",\n                         \"content\": {\n                             \"application/json\": {\n                                 \"schema\": {\"$ref\": \"#/components/schemas/Message\"}\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#87b7a63ff2ca86b7f57af9376cd52c12672b6e08", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 0 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 2823 | Contributors (this commit): 8 | Commits (past 90d): 28 | Contributors (cumulative): 8 | DMM Complexity: 0.0\n\nDIFF:\n@@ -180,8 +180,6 @@ class APIWebSocketRoute(routing.WebSocketRoute):\n                 dependency_overrides_provider=dependency_overrides_provider,\n             )\n         )\n-        regex = \"^\" + path + \"$\"\n-        regex = re.sub(\"{([a-zA-Z_][a-zA-Z0-9_]*)}\", r\"(?P<\\1>[^/]+)\", regex)\n         self.path_regex, self.path_format, self.param_convertors = compile_path(path)\n \n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#aa84ac8e3e305d76e71c0c1b31237517948fa12f", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 687 | Lines Deleted: 108 | Files Changed: 16 | Hunks: 29 | Methods Changed: 35 | Complexity Δ (Sum/Max): 34/11 | Churn Δ: 795 | Churn Cumulative: 3823 | Contributors (this commit): 9 | Commits (past 90d): 51 | Contributors (cumulative): 26 | DMM Complexity: 0.7\n\nDIFF:\n@@ -0,0 +1,10 @@\n+from typing import Dict\n+\n+from fastapi import FastAPI\n+\n+app = FastAPI()\n+\n+\n+@app.post(\"/index-weights/\")\n+async def create_index_weights(weights: Dict[int, float]):\n+    return weights\n\n@@ -0,0 +1,10 @@\n+from typing import Dict\n+\n+from fastapi import FastAPI\n+\n+app = FastAPI()\n+\n+\n+@app.get(\"/keyword-weights/\", response_model=Dict[str, float])\n+async def read_keyword_weights():\n+    return {\"foo\": 2.3, \"bar\": 3.4}\n\n\n\n@@ -0,0 +1,36 @@\n+from sqlalchemy.orm import Session\n+\n+from . import models, schemas\n+\n+\n+def get_user(db: Session, user_id: int):\n+    return db.query(models.User).filter(models.User.id == user_id).first()\n+\n+\n+def get_user_by_email(db: Session, email: str):\n+    return db.query(models.User).filter(models.User.email == email).first()\n+\n+\n+def get_users(db: Session, skip: int = 0, limit: int = 100):\n+    return db.query(models.User).offset(skip).limit(limit).all()\n+\n+\n+def create_user(db: Session, user: schemas.UserCreate):\n+    fake_hashed_password = user.password + \"notreallyhashed\"\n+    db_user = models.User(email=user.email, hashed_password=fake_hashed_password)\n+    db.add(db_user)\n+    db.commit()\n+    db.refresh(db_user)\n+    return db_user\n+\n+\n+def get_items(db: Session, skip: int = 0, limit: int = 100):\n+    return db.query(models.Item).offset(skip).limit(limit).all()\n+\n+\n+def create_user_item(db: Session, item: schemas.ItemCreate, user_id: int):\n+    db_item = models.Item(**item.dict(), owner_id=user_id)\n+    db.add(db_item)\n+    db.commit()\n+    db.refresh(db_item)\n+    return db_item\n\n@@ -0,0 +1,13 @@\n+from sqlalchemy import create_engine\n+from sqlalchemy.ext.declarative import declarative_base\n+from sqlalchemy.orm import sessionmaker\n+\n+SQLALCHEMY_DATABASE_URI = \"sqlite:///./test.db\"\n+# SQLALCHEMY_DATABASE_URI = \"postgresql://user:password@postgresserver/db\"\n+\n+engine = create_engine(\n+    SQLALCHEMY_DATABASE_URI, connect_args={\"check_same_thread\": False}\n+)\n+SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\n+\n+Base = declarative_base()\n\n@@ -0,0 +1,64 @@\n+from typing import List\n+\n+from fastapi import Depends, FastAPI, HTTPException\n+from sqlalchemy.orm import Session\n+from starlette.requests import Request\n+from starlette.responses import Response\n+\n+from . import crud, models, schemas\n+from .database import SessionLocal, engine\n+\n+models.Base.metadata.create_all(bind=engine)\n+\n+app = FastAPI()\n+\n+\n+@app.middleware(\"http\")\n+async def db_session_middleware(request: Request, call_next):\n+    response = Response(\"Internal server error\", status_code=500)\n+    try:\n+        request.state.db = SessionLocal()\n+        response = await call_next(request)\n+    finally:\n+        request.state.db.close()\n+    return response\n+\n+\n+# Dependency\n+def get_db(request: Request):\n+    return request.state.db\n+\n+\n+@app.post(\"/users/\", response_model=schemas.User)\n+def create_user(user: schemas.UserCreate, db: Session = Depends(get_db)):\n+    db_user = crud.get_user_by_email(db, email=user.email)\n+    if db_user:\n+        raise HTTPException(status_code=400, detail=\"Email already registered\")\n+    return crud.create_user(db=db, user=user)\n+\n+\n+@app.get(\"/users/\", response_model=List[schemas.User])\n+def read_users(skip: int = 0, limit: int = 100, db: Session = Depends(get_db)):\n+    users = crud.get_users(db, skip=skip, limit=limit)\n+    return users\n+\n+\n+@app.get(\"/users/{user_id}\", response_model=schemas.User)\n+def read_user(user_id: int, db: Session = Depends(get_db)):\n+    db_user = crud.get_user(db, user_id=user_id)\n+    if db_user is None:\n+        raise HTTPException(status_code=404, detail=\"User not found\")\n+    return db_user\n+\n+\n+@app.post(\"/users/{user_id}/items/\", response_model=schemas.Item)\n+def create_item_for_user(\n+    user_id: int, item: schemas.ItemCreate, db: Session = Depends(get_db)\n+):\n+    return crud.create_user_item(db=db, item=item, user_id=user_id)\n+\n+\n+@app.get(\"/items/\", response_model=List[schemas.Item])\n+def read_items(skip: int = 0, limit: int = 100, db: Session = Depends(get_db)):\n+    items = crud.get_items(db, skip=skip, limit=limit)\n+    return items\n\n@@ -0,0 +1,26 @@\n+from sqlalchemy import Boolean, Column, ForeignKey, Integer, String\n+from sqlalchemy.orm import relationship\n+\n+from .database import Base\n+\n+\n+class User(Base):\n+    __tablename__ = \"users\"\n+\n+    id = Column(Integer, primary_key=True, index=True)\n+    email = Column(String, unique=True, index=True)\n+    hashed_password = Column(String)\n+    is_active = Column(Boolean, default=True)\n+\n+    items = relationship(\"Item\", back_populates=\"owner\")\n+\n+\n+class Item(Base):\n+    __tablename__ = \"items\"\n+\n+    id = Column(Integer, primary_key=True, index=True)\n+    title = Column(String, index=True)\n+    description = Column(String, index=True)\n+    owner_id = Column(Integer, ForeignKey(\"users.id\"))\n+\n+    owner = relationship(\"User\", back_populates=\"items\")\n\n@@ -0,0 +1,37 @@\n+from typing import List\n+\n+from pydantic import BaseModel\n+\n+\n+class ItemBase(BaseModel):\n+    title: str\n+    description: str = None\n+\n+\n+class ItemCreate(ItemBase):\n+    pass\n+\n+\n+class Item(ItemBase):\n+    id: int\n+    owner_id: int\n+\n+    class Config:\n+        orm_mode = True\n+\n+\n+class UserBase(BaseModel):\n+    email: str\n+\n+\n+class UserCreate(UserBase):\n+    password: str\n+\n+\n+class User(UserBase):\n+    id: int\n+    is_active: bool\n+    items: List[Item] = []\n+\n+    class Config:\n+        orm_mode = True\n\n@@ -1,76 +0,0 @@\n-from fastapi import Depends, FastAPI\n-from sqlalchemy import Boolean, Column, Integer, String, create_engine\n-from sqlalchemy.ext.declarative import declarative_base, declared_attr\n-from sqlalchemy.orm import Session, sessionmaker\n-from starlette.requests import Request\n-from starlette.responses import Response\n-\n-# SQLAlchemy specific code, as with any other app\n-SQLALCHEMY_DATABASE_URI = \"sqlite:///./test.db\"\n-# SQLALCHEMY_DATABASE_URI = \"postgresql://user:password@postgresserver/db\"\n-\n-engine = create_engine(\n-    SQLALCHEMY_DATABASE_URI, connect_args={\"check_same_thread\": False}\n-)\n-SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\n-\n-\n-class CustomBase:\n-    # Generate __tablename__ automatically\n-    @declared_attr\n-    def __tablename__(cls):\n-        return cls.__name__.lower()\n-\n-\n-Base = declarative_base(cls=CustomBase)\n-\n-\n-class User(Base):\n-    id = Column(Integer, primary_key=True, index=True)\n-    email = Column(String, unique=True, index=True)\n-    hashed_password = Column(String)\n-    is_active = Column(Boolean(), default=True)\n-\n-\n-Base.metadata.create_all(bind=engine)\n-\n-db_session = SessionLocal()\n-\n-first_user = db_session.query(User).first()\n-if not first_user:\n-    u = User(email=\"johndoe@example.com\", hashed_password=\"notreallyhashed\")\n-    db_session.add(u)\n-    db_session.commit()\n-\n-db_session.close()\n-\n-\n-# Utility\n-def get_user(db_session: Session, user_id: int):\n-    return db_session.query(User).filter(User.id == user_id).first()\n-\n-\n-# Dependency\n-def get_db(request: Request):\n-    return request.state.db\n-\n-\n-# FastAPI specific code\n-app = FastAPI()\n-\n-\n-@app.get(\"/users/{user_id}\")\n-def read_user(user_id: int, db: Session = Depends(get_db)):\n-    user = get_user(db, user_id=user_id)\n-    return user\n-\n-\n-@app.middleware(\"http\")\n-async def db_session_middleware(request: Request, call_next):\n-    response = Response(\"Internal server error\", status_code=500)\n-    try:\n-        request.state.db = SessionLocal()\n-        response = await call_next(request)\n-    finally:\n-        request.state.db.close()\n-    return response\n\n@@ -1,7 +1,6 @@\n import asyncio\n import inspect\n import logging\n-import re\n from typing import Any, Callable, Dict, List, Optional, Set, Type, Union\n \n from fastapi import params\n@@ -14,6 +13,7 @@ from fastapi.dependencies.utils import (\n )\n from fastapi.encoders import jsonable_encoder\n from fastapi.exceptions import RequestValidationError, WebSocketRequestValidationError\n+from fastapi.utils import create_cloned_field\n from pydantic import BaseConfig, BaseModel, Schema\n from pydantic.error_wrappers import ErrorWrapper, ValidationError\n from pydantic.fields import Field\n@@ -43,17 +43,9 @@ def serialize_response(\n     by_alias: bool = True,\n     skip_defaults: bool = False,\n ) -> Any:\n-\n-    encoded = jsonable_encoder(\n-        response,\n-        include=include,\n-        exclude=exclude,\n-        by_alias=by_alias,\n-        skip_defaults=skip_defaults,\n-    )\n     if field:\n         errors = []\n-        value, errors_ = field.validate(encoded, {}, loc=(\"response\",))\n+        value, errors_ = field.validate(response, {}, loc=(\"response\",))\n         if isinstance(errors_, ErrorWrapper):\n             errors.append(errors_)\n         elif isinstance(errors_, list):\n@@ -68,7 +60,7 @@ def serialize_response(\n             skip_defaults=skip_defaults,\n         )\n     else:\n-        return encoded\n+        return jsonable_encoder(response)\n \n \n def get_app(\n@@ -228,8 +220,17 @@ class APIRoute(routing.Route):\n                 model_config=BaseConfig,\n                 schema=Schema(None),\n             )\n+            # Create a clone of the field, so that a Pydantic submodel is not returned\n+            # as is just because it's an instance of a subclass of a more limited class\n+            # e.g. UserInDB (containing hashed_password) could be a subclass of User\n+            # that doesn't have the hashed_password. But because it's a subclass, it\n+            # would pass the validation and be returned as is.\n+            # By being a new field, no inheritance will be passed as is. A new model\n+            # will be always created.\n+            self.secure_cloned_response_field = create_cloned_field(self.response_field)\n         else:\n             self.response_field = None\n+            self.secure_cloned_response_field = None\n         self.status_code = status_code\n         self.tags = tags or []\n         self.dependencies = dependencies or []\n@@ -290,7 +291,7 @@ class APIRoute(routing.Route):\n                 body_field=self.body_field,\n                 status_code=self.status_code,\n                 response_class=self.response_class,\n-                response_field=self.response_field,\n+                response_field=self.secure_cloned_response_field,\n                 response_model_include=self.response_model_include,\n                 response_model_exclude=self.response_model_exclude,\n                 response_model_by_alias=self.response_model_by_alias,\n\n@@ -1,11 +1,12 @@\n import re\n-from typing import Any, Dict, List, Sequence, Set, Type\n+from typing import Any, Dict, List, Sequence, Set, Type, cast\n \n from fastapi import routing\n from fastapi.openapi.constants import REF_PREFIX\n-from pydantic import BaseModel\n+from pydantic import BaseConfig, BaseModel, Schema, create_model\n from pydantic.fields import Field\n from pydantic.schema import get_flat_models_from_fields, model_process_schema\n+from pydantic.utils import lenient_issubclass\n from starlette.routing import BaseRoute\n \n \n@@ -49,3 +50,48 @@ def get_model_definitions(\n \n def get_path_param_names(path: str) -> Set[str]:\n     return {item.strip(\"{}\") for item in re.findall(\"{[^}]*}\", path)}\n+\n+\n+def create_cloned_field(field: Field) -> Field:\n+    original_type = field.type_\n+    use_type = original_type\n+    if lenient_issubclass(original_type, BaseModel):\n+        original_type = cast(Type[BaseModel], original_type)\n+        use_type = create_model(  # type: ignore\n+            original_type.__name__,\n+            __config__=original_type.__config__,\n+            __validators__=original_type.__validators__,\n+        )\n+        for f in original_type.__fields__.values():\n+            use_type.__fields__[f.name] = f\n+    new_field = Field(\n+        name=field.name,\n+        type_=use_type,\n+        class_validators={},\n+        default=None,\n+        required=False,\n+        model_config=BaseConfig,\n+        schema=Schema(None),\n+    )\n+    new_field.has_alias = field.has_alias\n+    new_field.alias = field.alias\n+    new_field.class_validators = field.class_validators\n+    new_field.default = field.default\n+    new_field.required = field.required\n+    new_field.model_config = field.model_config\n+    new_field.schema = field.schema\n+    new_field.allow_none = field.allow_none\n+    new_field.validate_always = field.validate_always\n+    if field.sub_fields:\n+        new_field.sub_fields = [\n+            create_cloned_field(sub_field) for sub_field in field.sub_fields\n+        ]\n+    if field.key_field:\n+        new_field.key_field = create_cloned_field(field.key_field)\n+    new_field.validators = field.validators\n+    new_field.whole_pre_validators = field.whole_pre_validators\n+    new_field.whole_post_validators = field.whole_post_validators\n+    new_field.parse_json = field.parse_json\n+    new_field.shape = field.shape\n+    new_field._populate_validators()\n+    return new_field\n\n\n@@ -1,6 +1,6 @@\n from starlette.testclient import TestClient\n \n-from sql_databases.tutorial001 import app\n+from body_nested_models.tutorial009 import app\n \n client = TestClient(app)\n \n@@ -8,8 +8,8 @@ openapi_schema = {\n     \"openapi\": \"3.0.2\",\n     \"info\": {\"title\": \"Fast API\", \"version\": \"0.1.0\"},\n     \"paths\": {\n-        \"/users/{user_id}\": {\n-            \"get\": {\n+        \"/index-weights/\": {\n+            \"post\": {\n                 \"responses\": {\n                     \"200\": {\n                         \"description\": \"Successful Response\",\n@@ -26,16 +26,20 @@ openapi_schema = {\n                         },\n                     },\n                 },\n-                \"summary\": \"Read User\",\n-                \"operationId\": \"read_user_users__user_id__get\",\n-                \"parameters\": [\n-                    {\n-                        \"required\": True,\n-                        \"schema\": {\"title\": \"User_Id\", \"type\": \"integer\"},\n-                        \"name\": \"user_id\",\n-                        \"in\": \"path\",\n+                \"summary\": \"Create Index Weights\",\n+                \"operationId\": \"create_index_weights_index-weights__post\",\n+                \"requestBody\": {\n+                    \"content\": {\n+                        \"application/json\": {\n+                            \"schema\": {\n+                                \"title\": \"Weights\",\n+                                \"type\": \"object\",\n+                                \"additionalProperties\": {\"type\": \"number\"},\n                             }\n-                ],\n+                        }\n+                    },\n+                    \"required\": True,\n+                },\n             }\n         }\n     },\n@@ -77,12 +81,23 @@ def test_openapi_schema():\n     assert response.json() == openapi_schema\n \n \n-def test_first_user():\n-    response = client.get(\"/users/1\")\n+def test_post_body():\n+    data = {\"2\": 2.2, \"3\": 3.3}\n+    response = client.post(\"/index-weights/\", json=data)\n     assert response.status_code == 200\n+    assert response.json() == data\n+\n+\n+def test_post_invalid_body():\n+    data = {\"foo\": 2.2, \"3\": 3.3}\n+    response = client.post(\"/index-weights/\", json=data)\n+    assert response.status_code == 422\n     assert response.json() == {\n-        \"is_active\": True,\n-        \"hashed_password\": \"notreallyhashed\",\n-        \"email\": \"johndoe@example.com\",\n-        \"id\": 1,\n+        \"detail\": [\n+            {\n+                \"loc\": [\"body\", \"weights\", \"__key__\"],\n+                \"msg\": \"value is not a valid integer\",\n+                \"type\": \"type_error.integer\",\n+            }\n+        ]\n     }\n\n@@ -0,0 +1,44 @@\n+from starlette.testclient import TestClient\n+\n+from extra_models.tutorial005 import app\n+\n+client = TestClient(app)\n+\n+openapi_schema = {\n+    \"openapi\": \"3.0.2\",\n+    \"info\": {\"title\": \"Fast API\", \"version\": \"0.1.0\"},\n+    \"paths\": {\n+        \"/keyword-weights/\": {\n+            \"get\": {\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\n+                                    \"title\": \"Response_Read_Keyword_Weights\",\n+                                    \"type\": \"object\",\n+                                    \"additionalProperties\": {\"type\": \"number\"},\n+                                }\n+                            }\n+                        },\n+                    }\n+                },\n+                \"summary\": \"Read Keyword Weights\",\n+                \"operationId\": \"read_keyword_weights_keyword-weights__get\",\n+            }\n+        }\n+    },\n+}\n+\n+\n+def test_openapi_schema():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200\n+    assert response.json() == openapi_schema\n+\n+\n+def test_get_items():\n+    response = client.get(\"/keyword-weights/\")\n+    assert response.status_code == 200\n+    assert response.json() == {\"foo\": 2.3, \"bar\": 3.4}\n\n@@ -0,0 +1,353 @@\n+from starlette.testclient import TestClient\n+\n+from sql_databases.sql_app.main import app\n+\n+client = TestClient(app)\n+\n+openapi_schema = {\n+    \"openapi\": \"3.0.2\",\n+    \"info\": {\"title\": \"Fast API\", \"version\": \"0.1.0\"},\n+    \"paths\": {\n+        \"/users/\": {\n+            \"get\": {\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\n+                                    \"title\": \"Response_Read_Users\",\n+                                    \"type\": \"array\",\n+                                    \"items\": {\"$ref\": \"#/components/schemas/User\"},\n+                                }\n+                            }\n+                        },\n+                    },\n+                    \"422\": {\n+                        \"description\": \"Validation Error\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\n+                                    \"$ref\": \"#/components/schemas/HTTPValidationError\"\n+                                }\n+                            }\n+                        },\n+                    },\n+                },\n+                \"summary\": \"Read Users\",\n+                \"operationId\": \"read_users_users__get\",\n+                \"parameters\": [\n+                    {\n+                        \"required\": False,\n+                        \"schema\": {\"title\": \"Skip\", \"type\": \"integer\", \"default\": 0},\n+                        \"name\": \"skip\",\n+                        \"in\": \"query\",\n+                    },\n+                    {\n+                        \"required\": False,\n+                        \"schema\": {\"title\": \"Limit\", \"type\": \"integer\", \"default\": 100},\n+                        \"name\": \"limit\",\n+                        \"in\": \"query\",\n+                    },\n+                ],\n+            },\n+            \"post\": {\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\"$ref\": \"#/components/schemas/User\"}\n+                            }\n+                        },\n+                    },\n+                    \"422\": {\n+                        \"description\": \"Validation Error\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\n+                                    \"$ref\": \"#/components/schemas/HTTPValidationError\"\n+                                }\n+                            }\n+                        },\n+                    },\n+                },\n+                \"summary\": \"Create User\",\n+                \"operationId\": \"create_user_users__post\",\n+                \"requestBody\": {\n+                    \"content\": {\n+                        \"application/json\": {\n+                            \"schema\": {\"$ref\": \"#/components/schemas/UserCreate\"}\n+                        }\n+                    },\n+                    \"required\": True,\n+                },\n+            },\n+        },\n+        \"/users/{user_id}\": {\n+            \"get\": {\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\"$ref\": \"#/components/schemas/User\"}\n+                            }\n+                        },\n+                    },\n+                    \"422\": {\n+                        \"description\": \"Validation Error\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\n+                                    \"$ref\": \"#/components/schemas/HTTPValidationError\"\n+                                }\n+                            }\n+                        },\n+                    },\n+                },\n+                \"summary\": \"Read User\",\n+                \"operationId\": \"read_user_users__user_id__get\",\n+                \"parameters\": [\n+                    {\n+                        \"required\": True,\n+                        \"schema\": {\"title\": \"User_Id\", \"type\": \"integer\"},\n+                        \"name\": \"user_id\",\n+                        \"in\": \"path\",\n+                    }\n+                ],\n+            }\n+        },\n+        \"/users/{user_id}/items/\": {\n+            \"post\": {\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\"$ref\": \"#/components/schemas/Item\"}\n+                            }\n+                        },\n+                    },\n+                    \"422\": {\n+                        \"description\": \"Validation Error\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\n+                                    \"$ref\": \"#/components/schemas/HTTPValidationError\"\n+                                }\n+                            }\n+                        },\n+                    },\n+                },\n+                \"summary\": \"Create Item For User\",\n+                \"operationId\": \"create_item_for_user_users__user_id__items__post\",\n+                \"parameters\": [\n+                    {\n+                        \"required\": True,\n+                        \"schema\": {\"title\": \"User_Id\", \"type\": \"integer\"},\n+                        \"name\": \"user_id\",\n+                        \"in\": \"path\",\n+                    }\n+                ],\n+                \"requestBody\": {\n+                    \"content\": {\n+                        \"application/json\": {\n+                            \"schema\": {\"$ref\": \"#/components/schemas/ItemCreate\"}\n+                        }\n+                    },\n+                    \"required\": True,\n+                },\n+            }\n+        },\n+        \"/items/\": {\n+            \"get\": {\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\n+                                    \"title\": \"Response_Read_Items\",\n+                                    \"type\": \"array\",\n+                                    \"items\": {\"$ref\": \"#/components/schemas/Item\"},\n+                                }\n+                            }\n+                        },\n+                    },\n+                    \"422\": {\n+                        \"description\": \"Validation Error\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\n+                                    \"$ref\": \"#/components/schemas/HTTPValidationError\"\n+                                }\n+                            }\n+                        },\n+                    },\n+                },\n+                \"summary\": \"Read Items\",\n+                \"operationId\": \"read_items_items__get\",\n+                \"parameters\": [\n+                    {\n+                        \"required\": False,\n+                        \"schema\": {\"title\": \"Skip\", \"type\": \"integer\", \"default\": 0},\n+                        \"name\": \"skip\",\n+                        \"in\": \"query\",\n+                    },\n+                    {\n+                        \"required\": False,\n+                        \"schema\": {\"title\": \"Limit\", \"type\": \"integer\", \"default\": 100},\n+                        \"name\": \"limit\",\n+                        \"in\": \"query\",\n+                    },\n+                ],\n+            }\n+        },\n+    },\n+    \"components\": {\n+        \"schemas\": {\n+            \"ItemCreate\": {\n+                \"title\": \"ItemCreate\",\n+                \"required\": [\"title\"],\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"title\": {\"title\": \"Title\", \"type\": \"string\"},\n+                    \"description\": {\"title\": \"Description\", \"type\": \"string\"},\n+                },\n+            },\n+            \"Item\": {\n+                \"title\": \"Item\",\n+                \"required\": [\"title\", \"id\", \"owner_id\"],\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"title\": {\"title\": \"Title\", \"type\": \"string\"},\n+                    \"description\": {\"title\": \"Description\", \"type\": \"string\"},\n+                    \"id\": {\"title\": \"Id\", \"type\": \"integer\"},\n+                    \"owner_id\": {\"title\": \"Owner_Id\", \"type\": \"integer\"},\n+                },\n+            },\n+            \"User\": {\n+                \"title\": \"User\",\n+                \"required\": [\"email\", \"id\", \"is_active\"],\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"email\": {\"title\": \"Email\", \"type\": \"string\"},\n+                    \"id\": {\"title\": \"Id\", \"type\": \"integer\"},\n+                    \"is_active\": {\"title\": \"Is_Active\", \"type\": \"boolean\"},\n+                    \"items\": {\n+                        \"title\": \"Items\",\n+                        \"type\": \"array\",\n+                        \"items\": {\"$ref\": \"#/components/schemas/Item\"},\n+                        \"default\": [],\n+                    },\n+                },\n+            },\n+            \"UserCreate\": {\n+                \"title\": \"UserCreate\",\n+                \"required\": [\"email\", \"password\"],\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"email\": {\"title\": \"Email\", \"type\": \"string\"},\n+                    \"password\": {\"title\": \"Password\", \"type\": \"string\"},\n+                },\n+            },\n+            \"ValidationError\": {\n+                \"title\": \"ValidationError\",\n+                \"required\": [\"loc\", \"msg\", \"type\"],\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"loc\": {\n+                        \"title\": \"Location\",\n+                        \"type\": \"array\",\n+                        \"items\": {\"type\": \"string\"},\n+                    },\n+                    \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n+                    \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n+                },\n+            },\n+            \"HTTPValidationError\": {\n+                \"title\": \"HTTPValidationError\",\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"detail\": {\n+                        \"title\": \"Detail\",\n+                        \"type\": \"array\",\n+                        \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n+                    }\n+                },\n+            },\n+        }\n+    },\n+}\n+\n+\n+def test_openapi_schema():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200\n+    assert response.json() == openapi_schema\n+\n+\n+def test_create_user():\n+    test_user = {\"email\": \"johndoe@example.com\", \"password\": \"secret\"}\n+    response = client.post(\"/users/\", json=test_user)\n+    assert response.status_code == 200\n+    data = response.json()\n+    assert test_user[\"email\"] == data[\"email\"]\n+    assert \"id\" in data\n+    response = client.post(\"/users/\", json=test_user)\n+    assert response.status_code == 400\n+\n+\n+def test_get_user():\n+    response = client.get(\"/users/1\")\n+    assert response.status_code == 200\n+    data = response.json()\n+    assert \"email\" in data\n+    assert \"id\" in data\n+\n+\n+def test_inexistent_user():\n+    response = client.get(\"/users/999\")\n+    assert response.status_code == 404\n+\n+\n+def test_get_users():\n+    response = client.get(\"/users/\")\n+    assert response.status_code == 200\n+    data = response.json()\n+    assert \"email\" in data[0]\n+    assert \"id\" in data[0]\n+\n+\n+def test_create_item():\n+    item = {\"title\": \"Foo\", \"description\": \"Something that fights\"}\n+    response = client.post(\"/users/1/items/\", json=item)\n+    assert response.status_code == 200\n+    item_data = response.json()\n+    assert item[\"title\"] == item_data[\"title\"]\n+    assert item[\"description\"] == item_data[\"description\"]\n+    assert \"id\" in item_data\n+    assert \"owner_id\" in item_data\n+    response = client.get(\"/users/1\")\n+    assert response.status_code == 200\n+    user_data = response.json()\n+    item_to_check = [it for it in user_data[\"items\"] if it[\"id\"] == item_data[\"id\"]][0]\n+    assert item_to_check[\"title\"] == item[\"title\"]\n+    assert item_to_check[\"description\"] == item[\"description\"]\n+    response = client.get(\"/users/1\")\n+    assert response.status_code == 200\n+    user_data = response.json()\n+    item_to_check = [it for it in user_data[\"items\"] if it[\"id\"] == item_data[\"id\"]][0]\n+    assert item_to_check[\"title\"] == item[\"title\"]\n+    assert item_to_check[\"description\"] == item[\"description\"]\n+\n+\n+def test_read_items():\n+    response = client.get(\"/items/\")\n+    assert response.status_code == 200\n+    data = response.json()\n+    assert data\n+    first_item = data[0]\n+    assert \"title\" in first_item\n+    assert \"description\" in first_item\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#76b6fd5c1880f39d13104574752f9890c636f5f4", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 163 | Contributors (this commit): 1 | Commits (past 90d): 33 | Contributors (cumulative): 1 | DMM Complexity: None\n\nDIFF:\n@@ -1,6 +1,6 @@\n \"\"\"FastAPI framework, high performance, easy to learn, fast to code, ready for production\"\"\"\n \n-__version__ = \"0.29.1\"\n+__version__ = \"0.30.0\"\n \n from starlette.background import BackgroundTasks\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#ab77c069d4d7b40926423ab7a5b7cf2fb884ca9f", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 3 | Lines Deleted: 3 | Files Changed: 1 | Hunks: 2 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 6 | Churn Cumulative: 19 | Contributors (this commit): 2 | Commits (past 90d): 2 | Contributors (cumulative): 2 | DMM Complexity: None\n\nDIFF:\n@@ -2,11 +2,11 @@ from sqlalchemy import create_engine\n from sqlalchemy.ext.declarative import declarative_base\n from sqlalchemy.orm import sessionmaker\n \n-SQLALCHEMY_DATABASE_URI = \"sqlite:///./test.db\"\n-# SQLALCHEMY_DATABASE_URI = \"postgresql://user:password@postgresserver/db\"\n+SQLALCHEMY_DATABASE_URL = \"sqlite:///./test.db\"\n+# SQLALCHEMY_DATABASE_URL = \"postgresql://user:password@postgresserver/db\"\n \n engine = create_engine(\n-    SQLALCHEMY_DATABASE_URI, connect_args={\"check_same_thread\": False}\n+    SQLALCHEMY_DATABASE_URL, connect_args={\"check_same_thread\": False}\n )\n SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
