{"custom_id": "fastapi#08484603ee351d1b72eaa0053bf7ae7231e30e3c", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 111 | Contributors (this commit): 1 | Commits (past 90d): 31 | Contributors (cumulative): 1 | DMM Complexity: None\n\nDIFF:\n@@ -1,6 +1,6 @@\n \"\"\"FastAPI framework, high performance, easy to learn, fast to code, ready for production\"\"\"\n \n-__version__ = \"0.13.0\"\n+__version__ = \"0.14.0\"\n \n from starlette.background import BackgroundTasks\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#84de980977aa998136e60f82066594076b1bfa82", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 37 | Lines Deleted: 0 | Files Changed: 3 | Hunks: 2 | Methods Changed: 3 | Complexity Δ (Sum/Max): 4/2 | Churn Δ: 37 | Churn Cumulative: 37 | Contributors (this commit): 1 | Commits (past 90d): 3 | Contributors (cumulative): 3 | DMM Complexity: 1.0\n\nDIFF:\n@@ -0,0 +1,20 @@\n+from fastapi import Body, FastAPI\n+from starlette.responses import JSONResponse\n+from starlette.status import HTTP_201_CREATED\n+\n+app = FastAPI()\n+\n+items = {\"foo\": {\"name\": \"Fighters\", \"size\": 6}, \"bar\": {\"name\": \"Tenders\", \"size\": 3}}\n+\n+\n+@app.put(\"/items/{item_id}\")\n+async def upsert_item(item_id: str, name: str = Body(None), size: int = Body(None)):\n+    if item_id in items:\n+        item = items[item_id]\n+        item[\"name\"] = name\n+        item[\"size\"] = size\n+        return item\n+    else:\n+        item = {\"name\": name, \"size\": size}\n+        items[item_id] = item\n+        return JSONResponse(status_code=HTTP_201_CREATED, content=item)\n\n\n@@ -0,0 +1,17 @@\n+from starlette.testclient import TestClient\n+\n+from additional_status_codes.tutorial001 import app\n+\n+client = TestClient(app)\n+\n+\n+def test_update():\n+    response = client.put(\"/items/foo\", json={\"name\": \"Wrestlers\"})\n+    assert response.status_code == 200\n+    assert response.json() == {\"name\": \"Wrestlers\", \"size\": None}\n+\n+\n+def test_create():\n+    response = client.put(\"/items/red\", json={\"name\": \"Chillies\"})\n+    assert response.status_code == 201\n+    assert response.json() == {\"name\": \"Chillies\", \"size\": None}\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#aad6b123f7ea83e0cab7eb8b411219db04ef6eb7", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 289 | Lines Deleted: 16 | Files Changed: 4 | Hunks: 15 | Methods Changed: 15 | Complexity Δ (Sum/Max): 19/10 | Churn Δ: 305 | Churn Cumulative: 3340 | Contributors (this commit): 4 | Commits (past 90d): 22 | Contributors (cumulative): 7 | DMM Complexity: 0.8522727272727273\n\nDIFF:\n@@ -0,0 +1,33 @@\n+from typing import List\n+\n+from fastapi import FastAPI, File, UploadFile\n+from starlette.responses import HTMLResponse\n+\n+app = FastAPI()\n+\n+\n+@app.post(\"/files/\")\n+async def create_files(files: List[bytes] = File(...)):\n+    return {\"file_sizes\": [len(file) for file in files]}\n+\n+\n+@app.post(\"/uploadfiles/\")\n+async def create_upload_files(files: List[UploadFile] = File(...)):\n+    return {\"filenames\": [file.filename for file in files]}\n+\n+\n+@app.get(\"/\")\n+async def main():\n+    content = \"\"\"\n+<body>\n+<form action=\"/files/\" enctype=\"multipart/form-data\" method=\"post\">\n+<input name=\"files\" type=\"file\" multiple>\n+<input type=\"submit\">\n+</form>\n+<form action=\"/uploadfiles/\" enctype=\"multipart/form-data\" method=\"post\">\n+<input name=\"files\" type=\"file\" multiple>\n+<input type=\"submit\">\n+</form>\n+</body>\n+    \"\"\"\n+    return HTMLResponse(content=content)\n\n@@ -31,8 +31,8 @@ from pydantic.schema import get_annotation_from_schema\n from pydantic.utils import lenient_issubclass\n from starlette.background import BackgroundTasks\n from starlette.concurrency import run_in_threadpool\n-from starlette.datastructures import UploadFile\n-from starlette.requests import Headers, QueryParams, Request\n+from starlette.datastructures import FormData, Headers, QueryParams, UploadFile\n+from starlette.requests import Request\n \n param_supported_types = (\n     str,\n@@ -47,6 +47,10 @@ param_supported_types = (\n     Decimal,\n )\n \n+sequence_shapes = {Shape.LIST, Shape.SET, Shape.TUPLE}\n+sequence_types = (list, set, tuple)\n+sequence_shape_to_type = {Shape.LIST: list, Shape.SET: set, Shape.TUPLE: tuple}\n+\n \n def get_sub_dependant(\n     *, param: inspect.Parameter, path: str, security_scopes: List[str] = None\n@@ -318,7 +322,7 @@ def request_params_to_args(\n     values = {}\n     errors = []\n     for field in required_params:\n-        if field.shape in {Shape.LIST, Shape.SET, Shape.TUPLE} and isinstance(\n+        if field.shape in sequence_shapes and isinstance(\n             received_params, (QueryParams, Headers)\n         ):\n             value = received_params.getlist(field.alias)\n@@ -358,11 +362,20 @@ async def request_body_to_args(\n         embed = getattr(field.schema, \"embed\", None)\n         if len(required_params) == 1 and not embed:\n             received_body = {field.alias: received_body}\n-        elif received_body is None:\n-            received_body = {}\n         for field in required_params:\n+            if field.shape in sequence_shapes and isinstance(received_body, FormData):\n+                value = received_body.getlist(field.alias)\n+            else:\n                 value = received_body.get(field.alias)\n-            if value is None or (isinstance(field.schema, params.Form) and value == \"\"):\n+            if (\n+                value is None\n+                or (isinstance(field.schema, params.Form) and value == \"\")\n+                or (\n+                    isinstance(field.schema, params.Form)\n+                    and field.shape in sequence_shapes\n+                    and len(value) == 0\n+                )\n+            ):\n                 if field.required:\n                     errors.append(\n                         ErrorWrapper(\n@@ -380,6 +393,15 @@ async def request_body_to_args(\n                 and isinstance(value, UploadFile)\n             ):\n                 value = await value.read()\n+            elif (\n+                field.shape in sequence_shapes\n+                and isinstance(field.schema, params.File)\n+                and lenient_issubclass(field.type_, bytes)\n+                and isinstance(value, sequence_types)\n+            ):\n+                awaitables = [sub_value.read() for sub_value in value]\n+                contents = await asyncio.gather(*awaitables)\n+                value = sequence_shape_to_type[field.shape](contents)\n             v_, errors_ = field.validate(value, values, loc=(\"body\", field.alias))\n             if isinstance(errors_, ErrorWrapper):\n                 errors.append(errors_)\n@@ -391,10 +413,14 @@ async def request_body_to_args(\n \n \n def get_schema_compatible_field(*, field: Field) -> Field:\n+    out_field = field\n     if lenient_issubclass(field.type_, UploadFile):\n-        return Field(\n+        use_type: type = bytes\n+        if field.shape in sequence_shapes:\n+            use_type = List[bytes]\n+        out_field = Field(\n             name=field.name,\n-            type_=bytes,\n+            type_=use_type,\n             class_validators=field.class_validators,\n             model_config=field.model_config,\n             default=field.default,\n@@ -402,10 +428,10 @@ def get_schema_compatible_field(*, field: Field) -> Field:\n             alias=field.alias,\n             schema=field.schema,\n         )\n-    return field\n+    return out_field\n \n \n-def get_body_field(*, dependant: Dependant, name: str) -> Field:\n+def get_body_field(*, dependant: Dependant, name: str) -> Optional[Field]:\n     flat_dependant = get_flat_dependant(dependant)\n     if not flat_dependant.body_params:\n         return None\n\n@@ -53,12 +53,7 @@ def get_app(\n             body = None\n             if body_field:\n                 if is_body_form:\n-                    raw_body = await request.form()\n-                    form_fields = {}\n-                    for field, value in raw_body.items():\n-                        form_fields[field] = value\n-                    if form_fields:\n-                        body = form_fields\n+                    body = await request.form()\n                 else:\n                     body_bytes = await request.body()\n                     if body_bytes:\n\n@@ -0,0 +1,219 @@\n+import os\n+\n+from starlette.testclient import TestClient\n+\n+from request_files.tutorial002 import app\n+\n+client = TestClient(app)\n+\n+openapi_schema = {\n+    \"openapi\": \"3.0.2\",\n+    \"info\": {\"title\": \"Fast API\", \"version\": \"0.1.0\"},\n+    \"paths\": {\n+        \"/files/\": {\n+            \"post\": {\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                    },\n+                    \"422\": {\n+                        \"description\": \"Validation Error\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\n+                                    \"$ref\": \"#/components/schemas/HTTPValidationError\"\n+                                }\n+                            }\n+                        },\n+                    },\n+                },\n+                \"summary\": \"Create Files\",\n+                \"operationId\": \"create_files_files__post\",\n+                \"requestBody\": {\n+                    \"content\": {\n+                        \"multipart/form-data\": {\n+                            \"schema\": {\"$ref\": \"#/components/schemas/Body_create_files\"}\n+                        }\n+                    },\n+                    \"required\": True,\n+                },\n+            }\n+        },\n+        \"/uploadfiles/\": {\n+            \"post\": {\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                    },\n+                    \"422\": {\n+                        \"description\": \"Validation Error\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\n+                                    \"$ref\": \"#/components/schemas/HTTPValidationError\"\n+                                }\n+                            }\n+                        },\n+                    },\n+                },\n+                \"summary\": \"Create Upload Files\",\n+                \"operationId\": \"create_upload_files_uploadfiles__post\",\n+                \"requestBody\": {\n+                    \"content\": {\n+                        \"multipart/form-data\": {\n+                            \"schema\": {\n+                                \"$ref\": \"#/components/schemas/Body_create_upload_files\"\n+                            }\n+                        }\n+                    },\n+                    \"required\": True,\n+                },\n+            }\n+        },\n+        \"/\": {\n+            \"get\": {\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                    }\n+                },\n+                \"summary\": \"Main\",\n+                \"operationId\": \"main__get\",\n+            }\n+        },\n+    },\n+    \"components\": {\n+        \"schemas\": {\n+            \"Body_create_files\": {\n+                \"title\": \"Body_create_files\",\n+                \"required\": [\"files\"],\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"files\": {\n+                        \"title\": \"Files\",\n+                        \"type\": \"array\",\n+                        \"items\": {\"type\": \"string\", \"format\": \"binary\"},\n+                    }\n+                },\n+            },\n+            \"Body_create_upload_files\": {\n+                \"title\": \"Body_create_upload_files\",\n+                \"required\": [\"files\"],\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"files\": {\n+                        \"title\": \"Files\",\n+                        \"type\": \"array\",\n+                        \"items\": {\"type\": \"string\", \"format\": \"binary\"},\n+                    }\n+                },\n+            },\n+            \"ValidationError\": {\n+                \"title\": \"ValidationError\",\n+                \"required\": [\"loc\", \"msg\", \"type\"],\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"loc\": {\n+                        \"title\": \"Location\",\n+                        \"type\": \"array\",\n+                        \"items\": {\"type\": \"string\"},\n+                    },\n+                    \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n+                    \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n+                },\n+            },\n+            \"HTTPValidationError\": {\n+                \"title\": \"HTTPValidationError\",\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"detail\": {\n+                        \"title\": \"Detail\",\n+                        \"type\": \"array\",\n+                        \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n+                    }\n+                },\n+            },\n+        }\n+    },\n+}\n+\n+\n+def test_openapi_schema():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200\n+    assert response.json() == openapi_schema\n+\n+\n+file_required = {\n+    \"detail\": [\n+        {\n+            \"loc\": [\"body\", \"files\"],\n+            \"msg\": \"field required\",\n+            \"type\": \"value_error.missing\",\n+        }\n+    ]\n+}\n+\n+\n+def test_post_form_no_body():\n+    response = client.post(\"/files/\")\n+    assert response.status_code == 422\n+    assert response.json() == file_required\n+\n+\n+def test_post_body_json():\n+    response = client.post(\"/files/\", json={\"file\": \"Foo\"})\n+    print(response)\n+    print(response.content)\n+    assert response.status_code == 422\n+    assert response.json() == file_required\n+\n+\n+def test_post_files(tmpdir):\n+    path = os.path.join(tmpdir, \"test.txt\")\n+    with open(path, \"wb\") as file:\n+        file.write(b\"<file content>\")\n+    path2 = os.path.join(tmpdir, \"test2.txt\")\n+    with open(path2, \"wb\") as file:\n+        file.write(b\"<file content2>\")\n+\n+    client = TestClient(app)\n+    response = client.post(\n+        \"/files/\",\n+        files=(\n+            (\"files\", (\"test.txt\", open(path, \"rb\"))),\n+            (\"files\", (\"test2.txt\", open(path2, \"rb\"))),\n+        ),\n+    )\n+    assert response.status_code == 200\n+    assert response.json() == {\"file_sizes\": [14, 15]}\n+\n+\n+def test_post_upload_file(tmpdir):\n+    path = os.path.join(tmpdir, \"test.txt\")\n+    with open(path, \"wb\") as file:\n+        file.write(b\"<file content>\")\n+    path2 = os.path.join(tmpdir, \"test2.txt\")\n+    with open(path2, \"wb\") as file:\n+        file.write(b\"<file content2>\")\n+\n+    client = TestClient(app)\n+    response = client.post(\n+        \"/uploadfiles/\",\n+        files=(\n+            (\"files\", (\"test.txt\", open(path, \"rb\"))),\n+            (\"files\", (\"test2.txt\", open(path2, \"rb\"))),\n+        ),\n+    )\n+    assert response.status_code == 200\n+    assert response.json() == {\"filenames\": [\"test.txt\", \"test2.txt\"]}\n+\n+\n+def test_get_root():\n+    client = TestClient(app)\n+    response = client.get(\"/\")\n+    assert response.status_code == 200\n+    assert b\"<form\" in response.content\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#4c3cf31730f992522325ca0fc8361b279dd6d49f", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 113 | Contributors (this commit): 1 | Commits (past 90d): 32 | Contributors (cumulative): 1 | DMM Complexity: None\n\nDIFF:\n@@ -1,6 +1,6 @@\n \"\"\"FastAPI framework, high performance, easy to learn, fast to code, ready for production\"\"\"\n \n-__version__ = \"0.14.0\"\n+__version__ = \"0.15.0\"\n \n from starlette.background import BackgroundTasks\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#61dd36a9453f30a9c419eb8e87bd6e8f48074170", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 12 | Lines Deleted: 12 | Files Changed: 4 | Hunks: 4 | Methods Changed: 3 | Complexity Δ (Sum/Max): 3/1 | Churn Δ: 24 | Churn Cumulative: 2540 | Contributors (this commit): 3 | Commits (past 90d): 19 | Contributors (cumulative): 6 | DMM Complexity: None\n\nDIFF:\n@@ -19,10 +19,10 @@ async def create_item(*, item: Item):\n     \"\"\"\n     Create an item with all the information:\n \n-    * name: each item must have a name\n-    * description: a long description\n-    * price: required\n-    * tax: if the item doesn't have tax, you can omit this\n-    * tags: a set of unique tag strings for this item\n+    - **name**: each item must have a name\n+    - **description**: a long description\n+    - **price**: required\n+    - **tax**: if the item doesn't have tax, you can omit this\n+    - **tags**: a set of unique tag strings for this item\n     \"\"\"\n     return item\n\n@@ -24,10 +24,10 @@ async def create_item(*, item: Item):\n     \"\"\"\n     Create an item with all the information:\n \n-    * name: each item must have a name\n-    * description: a long description\n-    * price: required\n-    * tax: if the item doesn't have tax, you can omit this\n-    * tags: a set of unique tag strings for this item\n+    - **name**: each item must have a name\n+    - **description**: a long description\n+    - **price**: required\n+    - **tax**: if the item doesn't have tax, you can omit this\n+    - **tags**: a set of unique tag strings for this item\n     \"\"\"\n     return item\n\n@@ -137,7 +137,7 @@ class APIRoute(routing.Route):\n         self.status_code = status_code\n         self.tags = tags or []\n         self.summary = summary\n-        self.description = description or self.endpoint.__doc__\n+        self.description = description or inspect.cleandoc(self.endpoint.__doc__ or \"\")\n         self.response_description = response_description\n         self.responses = responses or {}\n         response_fields = {}\n\n@@ -31,7 +31,7 @@ openapi_schema = {\n                     },\n                 },\n                 \"summary\": \"Create an item\",\n-                \"description\": \"\\n    Create an item with all the information:\\n    \\n    * name: each item must have a name\\n    * description: a long description\\n    * price: required\\n    * tax: if the item doesn't have tax, you can omit this\\n    * tags: a set of unique tag strings for this item\\n    \",\n+                \"description\": \"Create an item with all the information:\\n\\n- **name**: each item must have a name\\n- **description**: a long description\\n- **price**: required\\n- **tax**: if the item doesn't have tax, you can omit this\\n- **tags**: a set of unique tag strings for this item\",\n                 \"operationId\": \"create_item_items__post\",\n                 \"requestBody\": {\n                     \"content\": {\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#546d233dec3f686f7f1c06f1fc57c82a7c9c45fe", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 16 | Lines Deleted: 24 | Files Changed: 3 | Hunks: 13 | Methods Changed: 8 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 40 | Churn Cumulative: 3238 | Contributors (this commit): 4 | Commits (past 90d): 27 | Contributors (cumulative): 7 | DMM Complexity: 1.0\n\nDIFF:\n@@ -22,8 +22,8 @@ from fastapi.dependencies.models import Dependant, SecurityRequirement\n from fastapi.security.base import SecurityBase\n from fastapi.security.oauth2 import OAuth2, SecurityScopes\n from fastapi.security.open_id_connect_url import OpenIdConnect\n-from fastapi.utils import UnconstrainedConfig, get_path_param_names\n-from pydantic import Schema, create_model\n+from fastapi.utils import get_path_param_names\n+from pydantic import BaseConfig, Schema, create_model\n from pydantic.error_wrappers import ErrorWrapper\n from pydantic.errors import MissingError\n from pydantic.fields import Field, Required, Shape\n@@ -203,8 +203,8 @@ def add_param_to_fields(\n         default=None if required else default_value,\n         alias=alias,\n         required=required,\n-        model_config=UnconstrainedConfig,\n-        class_validators=[],\n+        model_config=BaseConfig,\n+        class_validators={},\n         schema=schema,\n     )\n     if schema.in_ == params.ParamTypes.path:\n@@ -237,8 +237,8 @@ def add_param_to_body_fields(*, param: inspect.Parameter, dependant: Dependant)\n         default=None if required else default_value,\n         alias=schema.alias or param.name,\n         required=required,\n-        model_config=UnconstrainedConfig,\n-        class_validators=[],\n+        model_config=BaseConfig,\n+        class_validators={},\n         schema=schema,\n     )\n     dependant.body_params.append(field)\n@@ -336,7 +336,7 @@ def request_params_to_args(\n                     ErrorWrapper(\n                         MissingError(),\n                         loc=(schema.in_.value, field.alias),\n-                        config=UnconstrainedConfig,\n+                        config=BaseConfig,\n                     )\n                 )\n             else:\n@@ -379,9 +379,7 @@ async def request_body_to_args(\n                 if field.required:\n                     errors.append(\n                         ErrorWrapper(\n-                            MissingError(),\n-                            loc=(\"body\", field.alias),\n-                            config=UnconstrainedConfig,\n+                            MissingError(), loc=(\"body\", field.alias), config=BaseConfig\n                         )\n                     )\n                 else:\n@@ -456,8 +454,8 @@ def get_body_field(*, dependant: Dependant, name: str) -> Optional[Field]:\n         type_=BodyModel,\n         default=None,\n         required=required,\n-        model_config=UnconstrainedConfig,\n-        class_validators=[],\n+        model_config=BaseConfig,\n+        class_validators={},\n         alias=\"body\",\n         schema=BodySchema(None),\n     )\n\n@@ -7,8 +7,7 @@ from fastapi import params\n from fastapi.dependencies.models import Dependant\n from fastapi.dependencies.utils import get_body_field, get_dependant, solve_dependencies\n from fastapi.encoders import jsonable_encoder\n-from fastapi.utils import UnconstrainedConfig\n-from pydantic import BaseModel, Schema\n+from pydantic import BaseConfig, BaseModel, Schema\n from pydantic.error_wrappers import ErrorWrapper, ValidationError\n from pydantic.fields import Field\n from pydantic.utils import lenient_issubclass\n@@ -59,7 +58,7 @@ def get_app(\n                     if body_bytes:\n                         body = await request.json()\n         except Exception as e:\n-            logging.error(\"Error getting request body\", e)\n+            logging.error(f\"Error getting request body: {e}\")\n             raise HTTPException(\n                 status_code=400, detail=\"There was an error parsing the body\"\n             )\n@@ -126,10 +125,10 @@ class APIRoute(routing.Route):\n             self.response_field: Optional[Field] = Field(\n                 name=response_name,\n                 type_=self.response_model,\n-                class_validators=[],\n+                class_validators={},\n                 default=None,\n                 required=False,\n-                model_config=UnconstrainedConfig,\n+                model_config=BaseConfig,\n                 schema=Schema(None),\n             )\n         else:\n@@ -155,7 +154,7 @@ class APIRoute(routing.Route):\n                     class_validators=None,\n                     default=None,\n                     required=False,\n-                    model_config=UnconstrainedConfig,\n+                    model_config=BaseConfig,\n                     schema=Schema(None),\n                 )\n                 response_fields[additional_status_code] = response_field\n\n@@ -3,17 +3,12 @@ from typing import Any, Dict, List, Sequence, Set, Type\n \n from fastapi import routing\n from fastapi.openapi.constants import REF_PREFIX\n-from pydantic import BaseConfig, BaseModel\n+from pydantic import BaseModel\n from pydantic.fields import Field\n from pydantic.schema import get_flat_models_from_fields, model_process_schema\n from starlette.routing import BaseRoute\n \n \n-class UnconstrainedConfig(BaseConfig):\n-    min_anystr_length = None\n-    max_anystr_length = None\n-\n-\n def get_flat_models_from_routes(\n     routes: Sequence[Type[BaseRoute]]\n ) -> Set[Type[BaseModel]]:\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#cefe6cf92c77ebea5d7f4823ee17c64e3900c4fb", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 115 | Contributors (this commit): 1 | Commits (past 90d): 33 | Contributors (cumulative): 1 | DMM Complexity: None\n\nDIFF:\n@@ -1,6 +1,6 @@\n \"\"\"FastAPI framework, high performance, easy to learn, fast to code, ready for production\"\"\"\n \n-__version__ = \"0.15.0\"\n+__version__ = \"0.16.0\"\n \n from starlette.background import BackgroundTasks\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#9e748dbca475778be70287461de8bdb58ff341cf", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 16 | Lines Deleted: 2 | Files Changed: 2 | Hunks: 4 | Methods Changed: 3 | Complexity Δ (Sum/Max): 2/2 | Churn Δ: 18 | Churn Cumulative: 363 | Contributors (this commit): 2 | Commits (past 90d): 7 | Contributors (cumulative): 3 | DMM Complexity: 1.0\n\nDIFF:\n@@ -10,7 +10,7 @@ def jsonable_encoder(\n     obj: Any,\n     include: Set[str] = None,\n     exclude: Set[str] = set(),\n-    by_alias: bool = False,\n+    by_alias: bool = True,\n     include_none: bool = True,\n     custom_encoder: dict = {},\n     sqlalchemy_safe: bool = True,\n\n@@ -3,7 +3,7 @@ from enum import Enum\n \n import pytest\n from fastapi.encoders import jsonable_encoder\n-from pydantic import BaseModel\n+from pydantic import BaseModel, Schema, ValidationError\n \n \n class Person:\n@@ -59,6 +59,10 @@ class ModelWithConfig(BaseModel):\n         use_enum_values = True\n \n \n+class ModelWithAlias(BaseModel):\n+    foo: str = Schema(..., alias=\"Foo\")\n+\n+\n def test_encode_class():\n     person = Person(name=\"Foo\")\n     pet = Pet(owner=person, name=\"Firulais\")\n@@ -85,3 +89,13 @@ def test_encode_custom_json_encoders_model():\n def test_encode_model_with_config():\n     model = ModelWithConfig(role=RoleEnum.admin)\n     assert jsonable_encoder(model) == {\"role\": \"admin\"}\n+\n+\n+def test_encode_model_with_alias_raises():\n+    with pytest.raises(ValidationError):\n+        model = ModelWithAlias(foo=\"Bar\")\n+\n+\n+def test_encode_model_with_alias():\n+    model = ModelWithAlias(Foo=\"Bar\")\n+    assert jsonable_encoder(model) == {\"Foo\": \"Bar\"}\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#596243f4a553ab6288ed2b3a41b66228aafc1d75", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 19 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 19 | Churn Cumulative: 19 | Contributors (this commit): 1 | Commits (past 90d): 1 | Contributors (cumulative): 1 | DMM Complexity: None\n\nDIFF:\n@@ -0,0 +1,19 @@\n+from fastapi import FastAPI\n+from starlette.middleware.cors import CORSMiddleware\n+\n+app = FastAPI()\n+\n+origins = [\n+    \"http://localhost.tiangolo.com\",\n+    \"https://localhost.tiangolo.com\",\n+    \"http:localhost\",\n+    \"http:localhost:8080\",\n+]\n+\n+app.add_middleware(\n+    CORSMiddleware,\n+    allow_origins=origins,\n+    allow_credentials=True,\n+    allow_methods=[\"*\"],\n+    allow_headers=[\"*\"],\n+)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#aa7b4bd1016d46de2015d6d0b9ed90025019a2d2", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 117 | Contributors (this commit): 1 | Commits (past 90d): 34 | Contributors (cumulative): 1 | DMM Complexity: None\n\nDIFF:\n@@ -1,6 +1,6 @@\n \"\"\"FastAPI framework, high performance, easy to learn, fast to code, ready for production\"\"\"\n \n-__version__ = \"0.16.0\"\n+__version__ = \"0.17.0\"\n \n from starlette.background import BackgroundTasks\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#97adadd9e1790f1bc73b65f57f0471e154e19c37", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 15 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 15 | Churn Cumulative: 15 | Contributors (this commit): 1 | Commits (past 90d): 1 | Contributors (cumulative): 1 | DMM Complexity: 1.0\n\nDIFF:\n@@ -0,0 +1,15 @@\n+import time\n+\n+from fastapi import FastAPI\n+from starlette.requests import Request\n+\n+app = FastAPI()\n+\n+\n+@app.middleware(\"http\")\n+async def add_process_time_header(request: Request, call_next):\n+    start_time = time.time()\n+    response = await call_next(request)\n+    process_time = time.time() - start_time\n+    response.headers[\"X-Process-Time\"] = str(process_time)\n+    return response\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#f216d340ec852e72c002d920e68552bf0da7e364", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 102 | Lines Deleted: 12 | Files Changed: 4 | Hunks: 14 | Methods Changed: 14 | Complexity Δ (Sum/Max): 7/6 | Churn Δ: 114 | Churn Cumulative: 484 | Contributors (this commit): 1 | Commits (past 90d): 8 | Contributors (cumulative): 4 | DMM Complexity: 0.813953488372093\n\nDIFF:\n@@ -2,6 +2,7 @@ import binascii\n from base64 import b64decode\n from typing import Optional\n \n+from fastapi.exceptions import HTTPException\n from fastapi.openapi.models import (\n     HTTPBase as HTTPBaseModel,\n     HTTPBearer as HTTPBearerModel,\n@@ -9,9 +10,8 @@ from fastapi.openapi.models import (\n from fastapi.security.base import SecurityBase\n from fastapi.security.utils import get_authorization_scheme_param\n from pydantic import BaseModel\n-from starlette.exceptions import HTTPException\n from starlette.requests import Request\n-from starlette.status import HTTP_403_FORBIDDEN\n+from starlette.status import HTTP_401_UNAUTHORIZED, HTTP_403_FORBIDDEN\n \n \n class HTTPBasicCredentials(BaseModel):\n@@ -59,15 +59,21 @@ class HTTPBasic(HTTPBase):\n     async def __call__(self, request: Request) -> Optional[HTTPBasicCredentials]:\n         authorization: str = request.headers.get(\"Authorization\")\n         scheme, param = get_authorization_scheme_param(authorization)\n-        # before implementing headers with 401 errors, wait for: https://github.com/encode/starlette/issues/295\n-        # unauthorized_headers = {\"WWW-Authenticate\": \"Basic\"}\n+        if self.realm:\n+            unauthorized_headers = {\"WWW-Authenticate\": f'Basic realm=\"{self.realm}\"'}\n+        else:\n+            unauthorized_headers = {\"WWW-Authenticate\": \"Basic\"}\n         invalid_user_credentials_exc = HTTPException(\n-            status_code=HTTP_403_FORBIDDEN, detail=\"Invalid authentication credentials\"\n+            status_code=HTTP_401_UNAUTHORIZED,\n+            detail=\"Invalid authentication credentials\",\n+            headers=unauthorized_headers,\n         )\n         if not authorization or scheme.lower() != \"basic\":\n             if self.auto_error:\n                 raise HTTPException(\n-                    status_code=HTTP_403_FORBIDDEN, detail=\"Not authenticated\"\n+                    status_code=HTTP_401_UNAUTHORIZED,\n+                    detail=\"Not authenticated\",\n+                    headers=unauthorized_headers,\n                 )\n             else:\n                 return None\n@@ -87,7 +93,7 @@ class HTTPBearer(HTTPBase):\n         *,\n         bearerFormat: str = None,\n         scheme_name: str = None,\n-        auto_error: bool = True\n+        auto_error: bool = True,\n     ):\n         self.model = HTTPBearerModel(bearerFormat=bearerFormat)\n         self.scheme_name = scheme_name or self.__class__.__name__\n\n@@ -56,15 +56,17 @@ def test_security_http_basic():\n \n def test_security_http_basic_no_credentials():\n     response = client.get(\"/users/me\")\n-    assert response.status_code == 403\n     assert response.json() == {\"detail\": \"Not authenticated\"}\n+    assert response.status_code == 401\n+    assert response.headers[\"WWW-Authenticate\"] == \"Basic\"\n \n \n def test_security_http_basic_invalid_credentials():\n     response = client.get(\n         \"/users/me\", headers={\"Authorization\": \"Basic notabase64token\"}\n     )\n-    assert response.status_code == 403\n+    assert response.status_code == 401\n+    assert response.headers[\"WWW-Authenticate\"] == \"Basic\"\n     assert response.json() == {\"detail\": \"Invalid authentication credentials\"}\n \n \n@@ -72,5 +74,6 @@ def test_security_http_basic_non_basic_credentials():\n     payload = b64encode(b\"johnsecret\").decode(\"ascii\")\n     auth_header = f\"Basic {payload}\"\n     response = client.get(\"/users/me\", headers={\"Authorization\": auth_header})\n-    assert response.status_code == 403\n+    assert response.status_code == 401\n+    assert response.headers[\"WWW-Authenticate\"] == \"Basic\"\n     assert response.json() == {\"detail\": \"Invalid authentication credentials\"}\n\n@@ -67,7 +67,8 @@ def test_security_http_basic_invalid_credentials():\n     response = client.get(\n         \"/users/me\", headers={\"Authorization\": \"Basic notabase64token\"}\n     )\n-    assert response.status_code == 403\n+    assert response.status_code == 401\n+    assert response.headers[\"WWW-Authenticate\"] == \"Basic\"\n     assert response.json() == {\"detail\": \"Invalid authentication credentials\"}\n \n \n@@ -75,5 +76,6 @@ def test_security_http_basic_non_basic_credentials():\n     payload = b64encode(b\"johnsecret\").decode(\"ascii\")\n     auth_header = f\"Basic {payload}\"\n     response = client.get(\"/users/me\", headers={\"Authorization\": auth_header})\n-    assert response.status_code == 403\n+    assert response.status_code == 401\n+    assert response.headers[\"WWW-Authenticate\"] == \"Basic\"\n     assert response.json() == {\"detail\": \"Invalid authentication credentials\"}\n\n@@ -0,0 +1,79 @@\n+from base64 import b64encode\n+\n+from fastapi import FastAPI, Security\n+from fastapi.security import HTTPBasic, HTTPBasicCredentials\n+from requests.auth import HTTPBasicAuth\n+from starlette.testclient import TestClient\n+\n+app = FastAPI()\n+\n+security = HTTPBasic(realm=\"simple\")\n+\n+\n+@app.get(\"/users/me\")\n+def read_current_user(credentials: HTTPBasicCredentials = Security(security)):\n+    return {\"username\": credentials.username, \"password\": credentials.password}\n+\n+\n+client = TestClient(app)\n+\n+openapi_schema = {\n+    \"openapi\": \"3.0.2\",\n+    \"info\": {\"title\": \"Fast API\", \"version\": \"0.1.0\"},\n+    \"paths\": {\n+        \"/users/me\": {\n+            \"get\": {\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                    }\n+                },\n+                \"summary\": \"Read Current User\",\n+                \"operationId\": \"read_current_user_users_me_get\",\n+                \"security\": [{\"HTTPBasic\": []}],\n+            }\n+        }\n+    },\n+    \"components\": {\n+        \"securitySchemes\": {\"HTTPBasic\": {\"type\": \"http\", \"scheme\": \"basic\"}}\n+    },\n+}\n+\n+\n+def test_openapi_schema():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200\n+    assert response.json() == openapi_schema\n+\n+\n+def test_security_http_basic():\n+    auth = HTTPBasicAuth(username=\"john\", password=\"secret\")\n+    response = client.get(\"/users/me\", auth=auth)\n+    assert response.status_code == 200\n+    assert response.json() == {\"username\": \"john\", \"password\": \"secret\"}\n+\n+\n+def test_security_http_basic_no_credentials():\n+    response = client.get(\"/users/me\")\n+    assert response.json() == {\"detail\": \"Not authenticated\"}\n+    assert response.status_code == 401\n+    assert response.headers[\"WWW-Authenticate\"] == 'Basic realm=\"simple\"'\n+\n+\n+def test_security_http_basic_invalid_credentials():\n+    response = client.get(\n+        \"/users/me\", headers={\"Authorization\": \"Basic notabase64token\"}\n+    )\n+    assert response.status_code == 401\n+    assert response.headers[\"WWW-Authenticate\"] == 'Basic realm=\"simple\"'\n+    assert response.json() == {\"detail\": \"Invalid authentication credentials\"}\n+\n+\n+def test_security_http_basic_non_basic_credentials():\n+    payload = b64encode(b\"johnsecret\").decode(\"ascii\")\n+    auth_header = f\"Basic {payload}\"\n+    response = client.get(\"/users/me\", headers={\"Authorization\": auth_header})\n+    assert response.status_code == 401\n+    assert response.headers[\"WWW-Authenticate\"] == 'Basic realm=\"simple\"'\n+    assert response.json() == {\"detail\": \"Invalid authentication credentials\"}\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#c70568539462199e739a71934ba5857ceab2859a", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 34 | Lines Deleted: 11 | Files Changed: 3 | Hunks: 4 | Methods Changed: 4 | Complexity Δ (Sum/Max): 10/5 | Churn Δ: 45 | Churn Cumulative: 45 | Contributors (this commit): 1 | Commits (past 90d): 3 | Contributors (cumulative): 3 | DMM Complexity: 1.0\n\nDIFF:\n@@ -0,0 +1,11 @@\n+from fastapi import Depends, FastAPI\n+from fastapi.security import HTTPBasic, HTTPBasicCredentials\n+\n+app = FastAPI()\n+\n+security = HTTPBasic()\n+\n+\n+@app.get(\"/users/me\")\n+def read_current_user(credentials: HTTPBasicCredentials = Depends(security)):\n+    return {\"username\": credentials.username, \"password\": credentials.password}\n\n@@ -0,0 +1,22 @@\n+from fastapi import Depends, FastAPI, HTTPException\n+from fastapi.security import HTTPBasic, HTTPBasicCredentials\n+from starlette.status import HTTP_401_UNAUTHORIZED\n+\n+app = FastAPI()\n+\n+security = HTTPBasic()\n+\n+\n+def get_current_username(credentials: HTTPBasicCredentials = Depends(security)):\n+    if credentials.username != \"foo\" or credentials.password != \"password\":\n+        raise HTTPException(\n+            status_code=HTTP_401_UNAUTHORIZED,\n+            detail=\"Incorrect email or password\",\n+            headers={\"WWW-Authenticate\": \"Basic\"},\n+        )\n+    return credentials.username\n+\n+\n+@app.get(\"/users/me\")\n+def read_current_user(username: str = Depends(get_current_username)):\n+    return {\"username\": username}\n\n@@ -1,19 +1,9 @@\n from base64 import b64encode\n \n-from fastapi import FastAPI, Security\n-from fastapi.security import HTTPBasic, HTTPBasicCredentials\n from requests.auth import HTTPBasicAuth\n from starlette.testclient import TestClient\n \n-app = FastAPI()\n-\n-security = HTTPBasic()\n-\n-\n-@app.get(\"/users/me\")\n-def read_current_user(credentials: HTTPBasicCredentials = Security(security)):\n-    return {\"username\": credentials.username, \"password\": credentials.password}\n-\n+from security.tutorial006 import app\n \n client = TestClient(app)\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#8880c4cb033572c9d97c9c79b44fcd15d2128389", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 119 | Contributors (this commit): 1 | Commits (past 90d): 35 | Contributors (cumulative): 1 | DMM Complexity: None\n\nDIFF:\n@@ -1,6 +1,6 @@\n \"\"\"FastAPI framework, high performance, easy to learn, fast to code, ready for production\"\"\"\n \n-__version__ = \"0.17.0\"\n+__version__ = \"0.18.0\"\n \n from starlette.background import BackgroundTasks\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#192ebba2a209627e0dfbccebcd177d3c2e189eb9", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 52 | Lines Deleted: 52 | Files Changed: 6 | Hunks: 52 | Methods Changed: 49 | Complexity Δ (Sum/Max): 4/2 | Churn Δ: 104 | Churn Cumulative: 4762 | Contributors (this commit): 4 | Commits (past 90d): 38 | Contributors (cumulative): 13 | DMM Complexity: None\n\nDIFF:\n@@ -4,6 +4,6 @@ from starlette.responses import UJSONResponse\n app = FastAPI()\n \n \n-@app.get(\"/items/\", content_type=UJSONResponse)\n+@app.get(\"/items/\", response_class=UJSONResponse)\n async def read_items():\n     return [{\"item_id\": \"Foo\"}]\n\n@@ -4,7 +4,7 @@ from starlette.responses import HTMLResponse\n app = FastAPI()\n \n \n-@app.get(\"/items/\", content_type=HTMLResponse)\n+@app.get(\"/items/\", response_class=HTMLResponse)\n async def read_items():\n     return \"\"\"\n     <html>\n\n@@ -18,6 +18,6 @@ def generate_html_response():\n     return HTMLResponse(content=html_content, status_code=200)\n \n \n-@app.get(\"/items/\", content_type=HTMLResponse)\n+@app.get(\"/items/\", response_class=HTMLResponse)\n async def read_items():\n     return generate_html_response()\n\n@@ -119,7 +119,7 @@ class FastAPI(Starlette):\n         methods: List[str] = None,\n         operation_id: str = None,\n         include_in_schema: bool = True,\n-        content_type: Type[Response] = JSONResponse,\n+        response_class: Type[Response] = JSONResponse,\n         name: str = None,\n     ) -> None:\n         self.router.add_api_route(\n@@ -136,7 +136,7 @@ class FastAPI(Starlette):\n             methods=methods,\n             operation_id=operation_id,\n             include_in_schema=include_in_schema,\n-            content_type=content_type,\n+            response_class=response_class,\n             name=name,\n         )\n \n@@ -155,7 +155,7 @@ class FastAPI(Starlette):\n         methods: List[str] = None,\n         operation_id: str = None,\n         include_in_schema: bool = True,\n-        content_type: Type[Response] = JSONResponse,\n+        response_class: Type[Response] = JSONResponse,\n         name: str = None,\n     ) -> Callable:\n         def decorator(func: Callable) -> Callable:\n@@ -173,7 +173,7 @@ class FastAPI(Starlette):\n                 methods=methods,\n                 operation_id=operation_id,\n                 include_in_schema=include_in_schema,\n-                content_type=content_type,\n+                response_class=response_class,\n                 name=name,\n             )\n             return func\n@@ -206,7 +206,7 @@ class FastAPI(Starlette):\n         deprecated: bool = None,\n         operation_id: str = None,\n         include_in_schema: bool = True,\n-        content_type: Type[Response] = JSONResponse,\n+        response_class: Type[Response] = JSONResponse,\n         name: str = None,\n     ) -> Callable:\n         return self.router.get(\n@@ -221,7 +221,7 @@ class FastAPI(Starlette):\n             deprecated=deprecated,\n             operation_id=operation_id,\n             include_in_schema=include_in_schema,\n-            content_type=content_type,\n+            response_class=response_class,\n             name=name,\n         )\n \n@@ -239,7 +239,7 @@ class FastAPI(Starlette):\n         deprecated: bool = None,\n         operation_id: str = None,\n         include_in_schema: bool = True,\n-        content_type: Type[Response] = JSONResponse,\n+        response_class: Type[Response] = JSONResponse,\n         name: str = None,\n     ) -> Callable:\n         return self.router.put(\n@@ -254,7 +254,7 @@ class FastAPI(Starlette):\n             deprecated=deprecated,\n             operation_id=operation_id,\n             include_in_schema=include_in_schema,\n-            content_type=content_type,\n+            response_class=response_class,\n             name=name,\n         )\n \n@@ -272,7 +272,7 @@ class FastAPI(Starlette):\n         deprecated: bool = None,\n         operation_id: str = None,\n         include_in_schema: bool = True,\n-        content_type: Type[Response] = JSONResponse,\n+        response_class: Type[Response] = JSONResponse,\n         name: str = None,\n     ) -> Callable:\n         return self.router.post(\n@@ -287,7 +287,7 @@ class FastAPI(Starlette):\n             deprecated=deprecated,\n             operation_id=operation_id,\n             include_in_schema=include_in_schema,\n-            content_type=content_type,\n+            response_class=response_class,\n             name=name,\n         )\n \n@@ -305,7 +305,7 @@ class FastAPI(Starlette):\n         deprecated: bool = None,\n         operation_id: str = None,\n         include_in_schema: bool = True,\n-        content_type: Type[Response] = JSONResponse,\n+        response_class: Type[Response] = JSONResponse,\n         name: str = None,\n     ) -> Callable:\n         return self.router.delete(\n@@ -320,7 +320,7 @@ class FastAPI(Starlette):\n             deprecated=deprecated,\n             operation_id=operation_id,\n             include_in_schema=include_in_schema,\n-            content_type=content_type,\n+            response_class=response_class,\n             name=name,\n         )\n \n@@ -338,7 +338,7 @@ class FastAPI(Starlette):\n         deprecated: bool = None,\n         operation_id: str = None,\n         include_in_schema: bool = True,\n-        content_type: Type[Response] = JSONResponse,\n+        response_class: Type[Response] = JSONResponse,\n         name: str = None,\n     ) -> Callable:\n         return self.router.options(\n@@ -353,7 +353,7 @@ class FastAPI(Starlette):\n             deprecated=deprecated,\n             operation_id=operation_id,\n             include_in_schema=include_in_schema,\n-            content_type=content_type,\n+            response_class=response_class,\n             name=name,\n         )\n \n@@ -371,7 +371,7 @@ class FastAPI(Starlette):\n         deprecated: bool = None,\n         operation_id: str = None,\n         include_in_schema: bool = True,\n-        content_type: Type[Response] = JSONResponse,\n+        response_class: Type[Response] = JSONResponse,\n         name: str = None,\n     ) -> Callable:\n         return self.router.head(\n@@ -386,7 +386,7 @@ class FastAPI(Starlette):\n             deprecated=deprecated,\n             operation_id=operation_id,\n             include_in_schema=include_in_schema,\n-            content_type=content_type,\n+            response_class=response_class,\n             name=name,\n         )\n \n@@ -404,7 +404,7 @@ class FastAPI(Starlette):\n         deprecated: bool = None,\n         operation_id: str = None,\n         include_in_schema: bool = True,\n-        content_type: Type[Response] = JSONResponse,\n+        response_class: Type[Response] = JSONResponse,\n         name: str = None,\n     ) -> Callable:\n         return self.router.patch(\n@@ -419,7 +419,7 @@ class FastAPI(Starlette):\n             deprecated=deprecated,\n             operation_id=operation_id,\n             include_in_schema=include_in_schema,\n-            content_type=content_type,\n+            response_class=response_class,\n             name=name,\n         )\n \n@@ -437,7 +437,7 @@ class FastAPI(Starlette):\n         deprecated: bool = None,\n         operation_id: str = None,\n         include_in_schema: bool = True,\n-        content_type: Type[Response] = JSONResponse,\n+        response_class: Type[Response] = JSONResponse,\n         name: str = None,\n     ) -> Callable:\n         return self.router.trace(\n@@ -452,6 +452,6 @@ class FastAPI(Starlette):\n             deprecated=deprecated,\n             operation_id=operation_id,\n             include_in_schema=include_in_schema,\n-            content_type=content_type,\n+            response_class=response_class,\n             name=name,\n         )\n\n@@ -197,7 +197,7 @@ def get_openapi_path(\n                     ] = response\n             status_code = str(route.status_code)\n             response_schema = {\"type\": \"string\"}\n-            if lenient_issubclass(route.content_type, JSONResponse):\n+            if lenient_issubclass(route.response_class, JSONResponse):\n                 if route.response_field:\n                     response_schema, _ = field_schema(\n                         route.response_field,\n@@ -211,7 +211,7 @@ def get_openapi_path(\n             ] = route.response_description\n             operation.setdefault(\"responses\", {}).setdefault(\n                 status_code, {}\n-            ).setdefault(\"content\", {}).setdefault(route.content_type.media_type, {})[\n+            ).setdefault(\"content\", {}).setdefault(route.response_class.media_type, {})[\n                 \"schema\"\n             ] = response_schema\n             if all_route_params or route.body_field:\n\n@@ -40,7 +40,7 @@ def get_app(\n     dependant: Dependant,\n     body_field: Field = None,\n     status_code: int = 200,\n-    content_type: Type[Response] = JSONResponse,\n+    response_class: Type[Response] = JSONResponse,\n     response_field: Field = None,\n ) -> Callable:\n     assert dependant.call is not None, \"dependant.call must me a function\"\n@@ -83,7 +83,7 @@ def get_app(\n             response_data = serialize_response(\n                 field=response_field, response=raw_response\n             )\n-            return content_type(\n+            return response_class(\n                 content=response_data,\n                 status_code=status_code,\n                 background=background_tasks,\n@@ -110,7 +110,7 @@ class APIRoute(routing.Route):\n         methods: List[str] = None,\n         operation_id: str = None,\n         include_in_schema: bool = True,\n-        content_type: Type[Response] = JSONResponse,\n+        response_class: Type[Response] = JSONResponse,\n     ) -> None:\n         assert path.startswith(\"/\"), \"Routed paths must always start with '/'\"\n         self.path = path\n@@ -119,7 +119,7 @@ class APIRoute(routing.Route):\n         self.response_model = response_model\n         if self.response_model:\n             assert lenient_issubclass(\n-                content_type, JSONResponse\n+                response_class, JSONResponse\n             ), \"To declare a type the response must be a JSON response\"\n             response_name = \"Response_\" + self.name\n             self.response_field: Optional[Field] = Field(\n@@ -168,7 +168,7 @@ class APIRoute(routing.Route):\n         self.methods = methods\n         self.operation_id = operation_id\n         self.include_in_schema = include_in_schema\n-        self.content_type = content_type\n+        self.response_class = response_class\n \n         self.path_regex, self.path_format, self.param_convertors = compile_path(path)\n         assert inspect.isfunction(endpoint) or inspect.ismethod(\n@@ -181,7 +181,7 @@ class APIRoute(routing.Route):\n                 dependant=self.dependant,\n                 body_field=self.body_field,\n                 status_code=self.status_code,\n-                content_type=self.content_type,\n+                response_class=self.response_class,\n                 response_field=self.response_field,\n             )\n         )\n@@ -204,7 +204,7 @@ class APIRouter(routing.Router):\n         methods: List[str] = None,\n         operation_id: str = None,\n         include_in_schema: bool = True,\n-        content_type: Type[Response] = JSONResponse,\n+        response_class: Type[Response] = JSONResponse,\n         name: str = None,\n     ) -> None:\n         route = APIRoute(\n@@ -221,7 +221,7 @@ class APIRouter(routing.Router):\n             methods=methods,\n             operation_id=operation_id,\n             include_in_schema=include_in_schema,\n-            content_type=content_type,\n+            response_class=response_class,\n             name=name,\n         )\n         self.routes.append(route)\n@@ -241,7 +241,7 @@ class APIRouter(routing.Router):\n         methods: List[str] = None,\n         operation_id: str = None,\n         include_in_schema: bool = True,\n-        content_type: Type[Response] = JSONResponse,\n+        response_class: Type[Response] = JSONResponse,\n         name: str = None,\n     ) -> Callable:\n         def decorator(func: Callable) -> Callable:\n@@ -259,7 +259,7 @@ class APIRouter(routing.Router):\n                 methods=methods,\n                 operation_id=operation_id,\n                 include_in_schema=include_in_schema,\n-                content_type=content_type,\n+                response_class=response_class,\n                 name=name,\n             )\n             return func\n@@ -298,7 +298,7 @@ class APIRouter(routing.Router):\n                     methods=route.methods,\n                     operation_id=route.operation_id,\n                     include_in_schema=route.include_in_schema,\n-                    content_type=route.content_type,\n+                    response_class=route.response_class,\n                     name=route.name,\n                 )\n             elif isinstance(route, routing.Route):\n@@ -328,7 +328,7 @@ class APIRouter(routing.Router):\n         deprecated: bool = None,\n         operation_id: str = None,\n         include_in_schema: bool = True,\n-        content_type: Type[Response] = JSONResponse,\n+        response_class: Type[Response] = JSONResponse,\n         name: str = None,\n     ) -> Callable:\n         return self.api_route(\n@@ -344,7 +344,7 @@ class APIRouter(routing.Router):\n             methods=[\"GET\"],\n             operation_id=operation_id,\n             include_in_schema=include_in_schema,\n-            content_type=content_type,\n+            response_class=response_class,\n             name=name,\n         )\n \n@@ -362,7 +362,7 @@ class APIRouter(routing.Router):\n         deprecated: bool = None,\n         operation_id: str = None,\n         include_in_schema: bool = True,\n-        content_type: Type[Response] = JSONResponse,\n+        response_class: Type[Response] = JSONResponse,\n         name: str = None,\n     ) -> Callable:\n         return self.api_route(\n@@ -378,7 +378,7 @@ class APIRouter(routing.Router):\n             methods=[\"PUT\"],\n             operation_id=operation_id,\n             include_in_schema=include_in_schema,\n-            content_type=content_type,\n+            response_class=response_class,\n             name=name,\n         )\n \n@@ -396,7 +396,7 @@ class APIRouter(routing.Router):\n         deprecated: bool = None,\n         operation_id: str = None,\n         include_in_schema: bool = True,\n-        content_type: Type[Response] = JSONResponse,\n+        response_class: Type[Response] = JSONResponse,\n         name: str = None,\n     ) -> Callable:\n         return self.api_route(\n@@ -412,7 +412,7 @@ class APIRouter(routing.Router):\n             methods=[\"POST\"],\n             operation_id=operation_id,\n             include_in_schema=include_in_schema,\n-            content_type=content_type,\n+            response_class=response_class,\n             name=name,\n         )\n \n@@ -430,7 +430,7 @@ class APIRouter(routing.Router):\n         deprecated: bool = None,\n         operation_id: str = None,\n         include_in_schema: bool = True,\n-        content_type: Type[Response] = JSONResponse,\n+        response_class: Type[Response] = JSONResponse,\n         name: str = None,\n     ) -> Callable:\n         return self.api_route(\n@@ -446,7 +446,7 @@ class APIRouter(routing.Router):\n             methods=[\"DELETE\"],\n             operation_id=operation_id,\n             include_in_schema=include_in_schema,\n-            content_type=content_type,\n+            response_class=response_class,\n             name=name,\n         )\n \n@@ -464,7 +464,7 @@ class APIRouter(routing.Router):\n         deprecated: bool = None,\n         operation_id: str = None,\n         include_in_schema: bool = True,\n-        content_type: Type[Response] = JSONResponse,\n+        response_class: Type[Response] = JSONResponse,\n         name: str = None,\n     ) -> Callable:\n         return self.api_route(\n@@ -480,7 +480,7 @@ class APIRouter(routing.Router):\n             methods=[\"OPTIONS\"],\n             operation_id=operation_id,\n             include_in_schema=include_in_schema,\n-            content_type=content_type,\n+            response_class=response_class,\n             name=name,\n         )\n \n@@ -498,7 +498,7 @@ class APIRouter(routing.Router):\n         deprecated: bool = None,\n         operation_id: str = None,\n         include_in_schema: bool = True,\n-        content_type: Type[Response] = JSONResponse,\n+        response_class: Type[Response] = JSONResponse,\n         name: str = None,\n     ) -> Callable:\n         return self.api_route(\n@@ -514,7 +514,7 @@ class APIRouter(routing.Router):\n             methods=[\"HEAD\"],\n             operation_id=operation_id,\n             include_in_schema=include_in_schema,\n-            content_type=content_type,\n+            response_class=response_class,\n             name=name,\n         )\n \n@@ -532,7 +532,7 @@ class APIRouter(routing.Router):\n         deprecated: bool = None,\n         operation_id: str = None,\n         include_in_schema: bool = True,\n-        content_type: Type[Response] = JSONResponse,\n+        response_class: Type[Response] = JSONResponse,\n         name: str = None,\n     ) -> Callable:\n         return self.api_route(\n@@ -548,7 +548,7 @@ class APIRouter(routing.Router):\n             methods=[\"PATCH\"],\n             operation_id=operation_id,\n             include_in_schema=include_in_schema,\n-            content_type=content_type,\n+            response_class=response_class,\n             name=name,\n         )\n \n@@ -566,7 +566,7 @@ class APIRouter(routing.Router):\n         deprecated: bool = None,\n         operation_id: str = None,\n         include_in_schema: bool = True,\n-        content_type: Type[Response] = JSONResponse,\n+        response_class: Type[Response] = JSONResponse,\n         name: str = None,\n     ) -> Callable:\n         return self.api_route(\n@@ -582,6 +582,6 @@ class APIRouter(routing.Router):\n             methods=[\"TRACE\"],\n             operation_id=operation_id,\n             include_in_schema=include_in_schema,\n-            content_type=content_type,\n+            response_class=response_class,\n             name=name,\n         )\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
