{"custom_id": "fastapi#39698df8069b8cd705dd4cb2194bbf447d3eec49", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 28 | Lines Deleted: 554 | Files Changed: 6 | Hunks: 12 | Methods Changed: 20 | Complexity Δ (Sum/Max): -16/0 | Churn Δ: 582 | Churn Cumulative: 1494 | Contributors (this commit): 2 | Commits (past 90d): 6 | Contributors (cumulative): 12 | DMM Complexity: 0.0\n\nDIFF:\n@@ -1,14 +1,23 @@\n+import importlib\n+\n import pytest\n from fastapi.testclient import TestClient\n \n-from ...utils import needs_pydanticv2\n+from ...utils import needs_py39, needs_py310, needs_pydanticv2\n \n \n-@pytest.fixture(name=\"client\")\n-def get_client() -> TestClient:\n-    from docs_src.separate_openapi_schemas.tutorial001 import app\n+@pytest.fixture(\n+    name=\"client\",\n+    params=[\n+        \"tutorial001\",\n+        pytest.param(\"tutorial001_py310\", marks=needs_py310),\n+        pytest.param(\"tutorial001_py39\", marks=needs_py39),\n+    ],\n+)\n+def get_client(request: pytest.FixtureRequest) -> TestClient:\n+    mod = importlib.import_module(f\"docs_src.separate_openapi_schemas.{request.param}\")\n \n-    client = TestClient(app)\n+    client = TestClient(mod.app)\n     return client\n \n \n\n@@ -1,136 +0,0 @@\n-import pytest\n-from fastapi.testclient import TestClient\n-\n-from ...utils import needs_py310, needs_pydanticv2\n-\n-\n-@pytest.fixture(name=\"client\")\n-def get_client() -> TestClient:\n-    from docs_src.separate_openapi_schemas.tutorial001_py310 import app\n-\n-    client = TestClient(app)\n-    return client\n-\n-\n-@needs_py310\n-def test_create_item(client: TestClient) -> None:\n-    response = client.post(\"/items/\", json={\"name\": \"Foo\"})\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"name\": \"Foo\", \"description\": None}\n-\n-\n-@needs_py310\n-def test_read_items(client: TestClient) -> None:\n-    response = client.get(\"/items/\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == [\n-        {\n-            \"name\": \"Portal Gun\",\n-            \"description\": \"Device to travel through the multi-rick-verse\",\n-        },\n-        {\"name\": \"Plumbus\", \"description\": None},\n-    ]\n-\n-\n-@needs_py310\n-@needs_pydanticv2\n-def test_openapi_schema(client: TestClient) -> None:\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\n-        \"openapi\": \"3.1.0\",\n-        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n-        \"paths\": {\n-            \"/items/\": {\n-                \"get\": {\n-                    \"summary\": \"Read Items\",\n-                    \"operationId\": \"read_items_items__get\",\n-                    \"responses\": {\n-                        \"200\": {\n-                            \"description\": \"Successful Response\",\n-                            \"content\": {\n-                                \"application/json\": {\n-                                    \"schema\": {\n-                                        \"items\": {\"$ref\": \"#/components/schemas/Item\"},\n-                                        \"type\": \"array\",\n-                                        \"title\": \"Response Read Items Items  Get\",\n-                                    }\n-                                }\n-                            },\n-                        }\n-                    },\n-                },\n-                \"post\": {\n-                    \"summary\": \"Create Item\",\n-                    \"operationId\": \"create_item_items__post\",\n-                    \"requestBody\": {\n-                        \"content\": {\n-                            \"application/json\": {\n-                                \"schema\": {\"$ref\": \"#/components/schemas/Item\"}\n-                            }\n-                        },\n-                        \"required\": True,\n-                    },\n-                    \"responses\": {\n-                        \"200\": {\n-                            \"description\": \"Successful Response\",\n-                            \"content\": {\"application/json\": {\"schema\": {}}},\n-                        },\n-                        \"422\": {\n-                            \"description\": \"Validation Error\",\n-                            \"content\": {\n-                                \"application/json\": {\n-                                    \"schema\": {\n-                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n-                                    }\n-                                }\n-                            },\n-                        },\n-                    },\n-                },\n-            }\n-        },\n-        \"components\": {\n-            \"schemas\": {\n-                \"HTTPValidationError\": {\n-                    \"properties\": {\n-                        \"detail\": {\n-                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n-                            \"type\": \"array\",\n-                            \"title\": \"Detail\",\n-                        }\n-                    },\n-                    \"type\": \"object\",\n-                    \"title\": \"HTTPValidationError\",\n-                },\n-                \"Item\": {\n-                    \"properties\": {\n-                        \"name\": {\"type\": \"string\", \"title\": \"Name\"},\n-                        \"description\": {\n-                            \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n-                            \"title\": \"Description\",\n-                        },\n-                    },\n-                    \"type\": \"object\",\n-                    \"required\": [\"name\"],\n-                    \"title\": \"Item\",\n-                },\n-                \"ValidationError\": {\n-                    \"properties\": {\n-                        \"loc\": {\n-                            \"items\": {\n-                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n-                            },\n-                            \"type\": \"array\",\n-                            \"title\": \"Location\",\n-                        },\n-                        \"msg\": {\"type\": \"string\", \"title\": \"Message\"},\n-                        \"type\": {\"type\": \"string\", \"title\": \"Error Type\"},\n-                    },\n-                    \"type\": \"object\",\n-                    \"required\": [\"loc\", \"msg\", \"type\"],\n-                    \"title\": \"ValidationError\",\n-                },\n-            }\n-        },\n-    }\n\n@@ -1,136 +0,0 @@\n-import pytest\n-from fastapi.testclient import TestClient\n-\n-from ...utils import needs_py39, needs_pydanticv2\n-\n-\n-@pytest.fixture(name=\"client\")\n-def get_client() -> TestClient:\n-    from docs_src.separate_openapi_schemas.tutorial001_py39 import app\n-\n-    client = TestClient(app)\n-    return client\n-\n-\n-@needs_py39\n-def test_create_item(client: TestClient) -> None:\n-    response = client.post(\"/items/\", json={\"name\": \"Foo\"})\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"name\": \"Foo\", \"description\": None}\n-\n-\n-@needs_py39\n-def test_read_items(client: TestClient) -> None:\n-    response = client.get(\"/items/\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == [\n-        {\n-            \"name\": \"Portal Gun\",\n-            \"description\": \"Device to travel through the multi-rick-verse\",\n-        },\n-        {\"name\": \"Plumbus\", \"description\": None},\n-    ]\n-\n-\n-@needs_py39\n-@needs_pydanticv2\n-def test_openapi_schema(client: TestClient) -> None:\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\n-        \"openapi\": \"3.1.0\",\n-        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n-        \"paths\": {\n-            \"/items/\": {\n-                \"get\": {\n-                    \"summary\": \"Read Items\",\n-                    \"operationId\": \"read_items_items__get\",\n-                    \"responses\": {\n-                        \"200\": {\n-                            \"description\": \"Successful Response\",\n-                            \"content\": {\n-                                \"application/json\": {\n-                                    \"schema\": {\n-                                        \"items\": {\"$ref\": \"#/components/schemas/Item\"},\n-                                        \"type\": \"array\",\n-                                        \"title\": \"Response Read Items Items  Get\",\n-                                    }\n-                                }\n-                            },\n-                        }\n-                    },\n-                },\n-                \"post\": {\n-                    \"summary\": \"Create Item\",\n-                    \"operationId\": \"create_item_items__post\",\n-                    \"requestBody\": {\n-                        \"content\": {\n-                            \"application/json\": {\n-                                \"schema\": {\"$ref\": \"#/components/schemas/Item\"}\n-                            }\n-                        },\n-                        \"required\": True,\n-                    },\n-                    \"responses\": {\n-                        \"200\": {\n-                            \"description\": \"Successful Response\",\n-                            \"content\": {\"application/json\": {\"schema\": {}}},\n-                        },\n-                        \"422\": {\n-                            \"description\": \"Validation Error\",\n-                            \"content\": {\n-                                \"application/json\": {\n-                                    \"schema\": {\n-                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n-                                    }\n-                                }\n-                            },\n-                        },\n-                    },\n-                },\n-            }\n-        },\n-        \"components\": {\n-            \"schemas\": {\n-                \"HTTPValidationError\": {\n-                    \"properties\": {\n-                        \"detail\": {\n-                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n-                            \"type\": \"array\",\n-                            \"title\": \"Detail\",\n-                        }\n-                    },\n-                    \"type\": \"object\",\n-                    \"title\": \"HTTPValidationError\",\n-                },\n-                \"Item\": {\n-                    \"properties\": {\n-                        \"name\": {\"type\": \"string\", \"title\": \"Name\"},\n-                        \"description\": {\n-                            \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n-                            \"title\": \"Description\",\n-                        },\n-                    },\n-                    \"type\": \"object\",\n-                    \"required\": [\"name\"],\n-                    \"title\": \"Item\",\n-                },\n-                \"ValidationError\": {\n-                    \"properties\": {\n-                        \"loc\": {\n-                            \"items\": {\n-                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n-                            },\n-                            \"type\": \"array\",\n-                            \"title\": \"Location\",\n-                        },\n-                        \"msg\": {\"type\": \"string\", \"title\": \"Message\"},\n-                        \"type\": {\"type\": \"string\", \"title\": \"Error Type\"},\n-                    },\n-                    \"type\": \"object\",\n-                    \"required\": [\"loc\", \"msg\", \"type\"],\n-                    \"title\": \"ValidationError\",\n-                },\n-            }\n-        },\n-    }\n\n@@ -1,14 +1,23 @@\n+import importlib\n+\n import pytest\n from fastapi.testclient import TestClient\n \n-from ...utils import needs_pydanticv2\n+from ...utils import needs_py39, needs_py310, needs_pydanticv2\n \n \n-@pytest.fixture(name=\"client\")\n-def get_client() -> TestClient:\n-    from docs_src.separate_openapi_schemas.tutorial002 import app\n+@pytest.fixture(\n+    name=\"client\",\n+    params=[\n+        \"tutorial002\",\n+        pytest.param(\"tutorial002_py310\", marks=needs_py310),\n+        pytest.param(\"tutorial002_py39\", marks=needs_py39),\n+    ],\n+)\n+def get_client(request: pytest.FixtureRequest) -> TestClient:\n+    mod = importlib.import_module(f\"docs_src.separate_openapi_schemas.{request.param}\")\n \n-    client = TestClient(app)\n+    client = TestClient(mod.app)\n     return client\n \n \n\n@@ -1,136 +0,0 @@\n-import pytest\n-from fastapi.testclient import TestClient\n-\n-from ...utils import needs_py310, needs_pydanticv2\n-\n-\n-@pytest.fixture(name=\"client\")\n-def get_client() -> TestClient:\n-    from docs_src.separate_openapi_schemas.tutorial002_py310 import app\n-\n-    client = TestClient(app)\n-    return client\n-\n-\n-@needs_py310\n-def test_create_item(client: TestClient) -> None:\n-    response = client.post(\"/items/\", json={\"name\": \"Foo\"})\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"name\": \"Foo\", \"description\": None}\n-\n-\n-@needs_py310\n-def test_read_items(client: TestClient) -> None:\n-    response = client.get(\"/items/\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == [\n-        {\n-            \"name\": \"Portal Gun\",\n-            \"description\": \"Device to travel through the multi-rick-verse\",\n-        },\n-        {\"name\": \"Plumbus\", \"description\": None},\n-    ]\n-\n-\n-@needs_py310\n-@needs_pydanticv2\n-def test_openapi_schema(client: TestClient) -> None:\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\n-        \"openapi\": \"3.1.0\",\n-        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n-        \"paths\": {\n-            \"/items/\": {\n-                \"get\": {\n-                    \"summary\": \"Read Items\",\n-                    \"operationId\": \"read_items_items__get\",\n-                    \"responses\": {\n-                        \"200\": {\n-                            \"description\": \"Successful Response\",\n-                            \"content\": {\n-                                \"application/json\": {\n-                                    \"schema\": {\n-                                        \"items\": {\"$ref\": \"#/components/schemas/Item\"},\n-                                        \"type\": \"array\",\n-                                        \"title\": \"Response Read Items Items  Get\",\n-                                    }\n-                                }\n-                            },\n-                        }\n-                    },\n-                },\n-                \"post\": {\n-                    \"summary\": \"Create Item\",\n-                    \"operationId\": \"create_item_items__post\",\n-                    \"requestBody\": {\n-                        \"content\": {\n-                            \"application/json\": {\n-                                \"schema\": {\"$ref\": \"#/components/schemas/Item\"}\n-                            }\n-                        },\n-                        \"required\": True,\n-                    },\n-                    \"responses\": {\n-                        \"200\": {\n-                            \"description\": \"Successful Response\",\n-                            \"content\": {\"application/json\": {\"schema\": {}}},\n-                        },\n-                        \"422\": {\n-                            \"description\": \"Validation Error\",\n-                            \"content\": {\n-                                \"application/json\": {\n-                                    \"schema\": {\n-                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n-                                    }\n-                                }\n-                            },\n-                        },\n-                    },\n-                },\n-            }\n-        },\n-        \"components\": {\n-            \"schemas\": {\n-                \"HTTPValidationError\": {\n-                    \"properties\": {\n-                        \"detail\": {\n-                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n-                            \"type\": \"array\",\n-                            \"title\": \"Detail\",\n-                        }\n-                    },\n-                    \"type\": \"object\",\n-                    \"title\": \"HTTPValidationError\",\n-                },\n-                \"Item\": {\n-                    \"properties\": {\n-                        \"name\": {\"type\": \"string\", \"title\": \"Name\"},\n-                        \"description\": {\n-                            \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n-                            \"title\": \"Description\",\n-                        },\n-                    },\n-                    \"type\": \"object\",\n-                    \"required\": [\"name\"],\n-                    \"title\": \"Item\",\n-                },\n-                \"ValidationError\": {\n-                    \"properties\": {\n-                        \"loc\": {\n-                            \"items\": {\n-                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n-                            },\n-                            \"type\": \"array\",\n-                            \"title\": \"Location\",\n-                        },\n-                        \"msg\": {\"type\": \"string\", \"title\": \"Message\"},\n-                        \"type\": {\"type\": \"string\", \"title\": \"Error Type\"},\n-                    },\n-                    \"type\": \"object\",\n-                    \"required\": [\"loc\", \"msg\", \"type\"],\n-                    \"title\": \"ValidationError\",\n-                },\n-            }\n-        },\n-    }\n\n@@ -1,136 +0,0 @@\n-import pytest\n-from fastapi.testclient import TestClient\n-\n-from ...utils import needs_py39, needs_pydanticv2\n-\n-\n-@pytest.fixture(name=\"client\")\n-def get_client() -> TestClient:\n-    from docs_src.separate_openapi_schemas.tutorial002_py39 import app\n-\n-    client = TestClient(app)\n-    return client\n-\n-\n-@needs_py39\n-def test_create_item(client: TestClient) -> None:\n-    response = client.post(\"/items/\", json={\"name\": \"Foo\"})\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"name\": \"Foo\", \"description\": None}\n-\n-\n-@needs_py39\n-def test_read_items(client: TestClient) -> None:\n-    response = client.get(\"/items/\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == [\n-        {\n-            \"name\": \"Portal Gun\",\n-            \"description\": \"Device to travel through the multi-rick-verse\",\n-        },\n-        {\"name\": \"Plumbus\", \"description\": None},\n-    ]\n-\n-\n-@needs_py39\n-@needs_pydanticv2\n-def test_openapi_schema(client: TestClient) -> None:\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\n-        \"openapi\": \"3.1.0\",\n-        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n-        \"paths\": {\n-            \"/items/\": {\n-                \"get\": {\n-                    \"summary\": \"Read Items\",\n-                    \"operationId\": \"read_items_items__get\",\n-                    \"responses\": {\n-                        \"200\": {\n-                            \"description\": \"Successful Response\",\n-                            \"content\": {\n-                                \"application/json\": {\n-                                    \"schema\": {\n-                                        \"items\": {\"$ref\": \"#/components/schemas/Item\"},\n-                                        \"type\": \"array\",\n-                                        \"title\": \"Response Read Items Items  Get\",\n-                                    }\n-                                }\n-                            },\n-                        }\n-                    },\n-                },\n-                \"post\": {\n-                    \"summary\": \"Create Item\",\n-                    \"operationId\": \"create_item_items__post\",\n-                    \"requestBody\": {\n-                        \"content\": {\n-                            \"application/json\": {\n-                                \"schema\": {\"$ref\": \"#/components/schemas/Item\"}\n-                            }\n-                        },\n-                        \"required\": True,\n-                    },\n-                    \"responses\": {\n-                        \"200\": {\n-                            \"description\": \"Successful Response\",\n-                            \"content\": {\"application/json\": {\"schema\": {}}},\n-                        },\n-                        \"422\": {\n-                            \"description\": \"Validation Error\",\n-                            \"content\": {\n-                                \"application/json\": {\n-                                    \"schema\": {\n-                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n-                                    }\n-                                }\n-                            },\n-                        },\n-                    },\n-                },\n-            }\n-        },\n-        \"components\": {\n-            \"schemas\": {\n-                \"HTTPValidationError\": {\n-                    \"properties\": {\n-                        \"detail\": {\n-                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n-                            \"type\": \"array\",\n-                            \"title\": \"Detail\",\n-                        }\n-                    },\n-                    \"type\": \"object\",\n-                    \"title\": \"HTTPValidationError\",\n-                },\n-                \"Item\": {\n-                    \"properties\": {\n-                        \"name\": {\"type\": \"string\", \"title\": \"Name\"},\n-                        \"description\": {\n-                            \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n-                            \"title\": \"Description\",\n-                        },\n-                    },\n-                    \"type\": \"object\",\n-                    \"required\": [\"name\"],\n-                    \"title\": \"Item\",\n-                },\n-                \"ValidationError\": {\n-                    \"properties\": {\n-                        \"loc\": {\n-                            \"items\": {\n-                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n-                            },\n-                            \"type\": \"array\",\n-                            \"title\": \"Location\",\n-                        },\n-                        \"msg\": {\"type\": \"string\", \"title\": \"Message\"},\n-                        \"type\": {\"type\": \"string\", \"title\": \"Error Type\"},\n-                    },\n-                    \"type\": \"object\",\n-                    \"required\": [\"loc\", \"msg\", \"type\"],\n-                    \"title\": \"ValidationError\",\n-                },\n-            }\n-        },\n-    }\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#182c28e57acace06f9c3e9f11fd5096be5bac781", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 50 | Lines Deleted: 1284 | Files Changed: 9 | Hunks: 25 | Methods Changed: 52 | Complexity Δ (Sum/Max): -46/0 | Churn Δ: 1334 | Churn Cumulative: 4629 | Contributors (this commit): 2 | Commits (past 90d): 9 | Contributors (cumulative): 18 | DMM Complexity: 0.0\n\nDIFF:\n@@ -1,13 +1,24 @@\n+import importlib\n+\n import pytest\n from dirty_equals import IsDict\n from fastapi.testclient import TestClient\n \n+from ...utils import needs_py39\n \n-@pytest.fixture(name=\"client\")\n-def get_client():\n-    from docs_src.request_form_models.tutorial001 import app\n \n-    client = TestClient(app)\n+@pytest.fixture(\n+    name=\"client\",\n+    params=[\n+        \"tutorial001\",\n+        \"tutorial001_an\",\n+        pytest.param(\"tutorial001_an_py39\", marks=needs_py39),\n+    ],\n+)\n+def get_client(request: pytest.FixtureRequest):\n+    mod = importlib.import_module(f\"docs_src.request_form_models.{request.param}\")\n+\n+    client = TestClient(mod.app)\n     return client\n \n \n\n@@ -1,232 +0,0 @@\n-import pytest\n-from dirty_equals import IsDict\n-from fastapi.testclient import TestClient\n-\n-\n-@pytest.fixture(name=\"client\")\n-def get_client():\n-    from docs_src.request_form_models.tutorial001_an import app\n-\n-    client = TestClient(app)\n-    return client\n-\n-\n-def test_post_body_form(client: TestClient):\n-    response = client.post(\"/login/\", data={\"username\": \"Foo\", \"password\": \"secret\"})\n-    assert response.status_code == 200\n-    assert response.json() == {\"username\": \"Foo\", \"password\": \"secret\"}\n-\n-\n-def test_post_body_form_no_password(client: TestClient):\n-    response = client.post(\"/login/\", data={\"username\": \"Foo\"})\n-    assert response.status_code == 422\n-    assert response.json() == IsDict(\n-        {\n-            \"detail\": [\n-                {\n-                    \"type\": \"missing\",\n-                    \"loc\": [\"body\", \"password\"],\n-                    \"msg\": \"Field required\",\n-                    \"input\": {\"username\": \"Foo\"},\n-                }\n-            ]\n-        }\n-    ) | IsDict(\n-        # TODO: remove when deprecating Pydantic v1\n-        {\n-            \"detail\": [\n-                {\n-                    \"loc\": [\"body\", \"password\"],\n-                    \"msg\": \"field required\",\n-                    \"type\": \"value_error.missing\",\n-                }\n-            ]\n-        }\n-    )\n-\n-\n-def test_post_body_form_no_username(client: TestClient):\n-    response = client.post(\"/login/\", data={\"password\": \"secret\"})\n-    assert response.status_code == 422\n-    assert response.json() == IsDict(\n-        {\n-            \"detail\": [\n-                {\n-                    \"type\": \"missing\",\n-                    \"loc\": [\"body\", \"username\"],\n-                    \"msg\": \"Field required\",\n-                    \"input\": {\"password\": \"secret\"},\n-                }\n-            ]\n-        }\n-    ) | IsDict(\n-        # TODO: remove when deprecating Pydantic v1\n-        {\n-            \"detail\": [\n-                {\n-                    \"loc\": [\"body\", \"username\"],\n-                    \"msg\": \"field required\",\n-                    \"type\": \"value_error.missing\",\n-                }\n-            ]\n-        }\n-    )\n-\n-\n-def test_post_body_form_no_data(client: TestClient):\n-    response = client.post(\"/login/\")\n-    assert response.status_code == 422\n-    assert response.json() == IsDict(\n-        {\n-            \"detail\": [\n-                {\n-                    \"type\": \"missing\",\n-                    \"loc\": [\"body\", \"username\"],\n-                    \"msg\": \"Field required\",\n-                    \"input\": {},\n-                },\n-                {\n-                    \"type\": \"missing\",\n-                    \"loc\": [\"body\", \"password\"],\n-                    \"msg\": \"Field required\",\n-                    \"input\": {},\n-                },\n-            ]\n-        }\n-    ) | IsDict(\n-        # TODO: remove when deprecating Pydantic v1\n-        {\n-            \"detail\": [\n-                {\n-                    \"loc\": [\"body\", \"username\"],\n-                    \"msg\": \"field required\",\n-                    \"type\": \"value_error.missing\",\n-                },\n-                {\n-                    \"loc\": [\"body\", \"password\"],\n-                    \"msg\": \"field required\",\n-                    \"type\": \"value_error.missing\",\n-                },\n-            ]\n-        }\n-    )\n-\n-\n-def test_post_body_json(client: TestClient):\n-    response = client.post(\"/login/\", json={\"username\": \"Foo\", \"password\": \"secret\"})\n-    assert response.status_code == 422, response.text\n-    assert response.json() == IsDict(\n-        {\n-            \"detail\": [\n-                {\n-                    \"type\": \"missing\",\n-                    \"loc\": [\"body\", \"username\"],\n-                    \"msg\": \"Field required\",\n-                    \"input\": {},\n-                },\n-                {\n-                    \"type\": \"missing\",\n-                    \"loc\": [\"body\", \"password\"],\n-                    \"msg\": \"Field required\",\n-                    \"input\": {},\n-                },\n-            ]\n-        }\n-    ) | IsDict(\n-        # TODO: remove when deprecating Pydantic v1\n-        {\n-            \"detail\": [\n-                {\n-                    \"loc\": [\"body\", \"username\"],\n-                    \"msg\": \"field required\",\n-                    \"type\": \"value_error.missing\",\n-                },\n-                {\n-                    \"loc\": [\"body\", \"password\"],\n-                    \"msg\": \"field required\",\n-                    \"type\": \"value_error.missing\",\n-                },\n-            ]\n-        }\n-    )\n-\n-\n-def test_openapi_schema(client: TestClient):\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\n-        \"openapi\": \"3.1.0\",\n-        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n-        \"paths\": {\n-            \"/login/\": {\n-                \"post\": {\n-                    \"responses\": {\n-                        \"200\": {\n-                            \"description\": \"Successful Response\",\n-                            \"content\": {\"application/json\": {\"schema\": {}}},\n-                        },\n-                        \"422\": {\n-                            \"description\": \"Validation Error\",\n-                            \"content\": {\n-                                \"application/json\": {\n-                                    \"schema\": {\n-                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n-                                    }\n-                                }\n-                            },\n-                        },\n-                    },\n-                    \"summary\": \"Login\",\n-                    \"operationId\": \"login_login__post\",\n-                    \"requestBody\": {\n-                        \"content\": {\n-                            \"application/x-www-form-urlencoded\": {\n-                                \"schema\": {\"$ref\": \"#/components/schemas/FormData\"}\n-                            }\n-                        },\n-                        \"required\": True,\n-                    },\n-                }\n-            }\n-        },\n-        \"components\": {\n-            \"schemas\": {\n-                \"FormData\": {\n-                    \"properties\": {\n-                        \"username\": {\"type\": \"string\", \"title\": \"Username\"},\n-                        \"password\": {\"type\": \"string\", \"title\": \"Password\"},\n-                    },\n-                    \"type\": \"object\",\n-                    \"required\": [\"username\", \"password\"],\n-                    \"title\": \"FormData\",\n-                },\n-                \"ValidationError\": {\n-                    \"title\": \"ValidationError\",\n-                    \"required\": [\"loc\", \"msg\", \"type\"],\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"loc\": {\n-                            \"title\": \"Location\",\n-                            \"type\": \"array\",\n-                            \"items\": {\n-                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n-                            },\n-                        },\n-                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n-                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n-                    },\n-                },\n-                \"HTTPValidationError\": {\n-                    \"title\": \"HTTPValidationError\",\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"detail\": {\n-                            \"title\": \"Detail\",\n-                            \"type\": \"array\",\n-                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n-                        }\n-                    },\n-                },\n-            }\n-        },\n-    }\n\n@@ -1,240 +0,0 @@\n-import pytest\n-from dirty_equals import IsDict\n-from fastapi.testclient import TestClient\n-\n-from tests.utils import needs_py39\n-\n-\n-@pytest.fixture(name=\"client\")\n-def get_client():\n-    from docs_src.request_form_models.tutorial001_an_py39 import app\n-\n-    client = TestClient(app)\n-    return client\n-\n-\n-@needs_py39\n-def test_post_body_form(client: TestClient):\n-    response = client.post(\"/login/\", data={\"username\": \"Foo\", \"password\": \"secret\"})\n-    assert response.status_code == 200\n-    assert response.json() == {\"username\": \"Foo\", \"password\": \"secret\"}\n-\n-\n-@needs_py39\n-def test_post_body_form_no_password(client: TestClient):\n-    response = client.post(\"/login/\", data={\"username\": \"Foo\"})\n-    assert response.status_code == 422\n-    assert response.json() == IsDict(\n-        {\n-            \"detail\": [\n-                {\n-                    \"type\": \"missing\",\n-                    \"loc\": [\"body\", \"password\"],\n-                    \"msg\": \"Field required\",\n-                    \"input\": {\"username\": \"Foo\"},\n-                }\n-            ]\n-        }\n-    ) | IsDict(\n-        # TODO: remove when deprecating Pydantic v1\n-        {\n-            \"detail\": [\n-                {\n-                    \"loc\": [\"body\", \"password\"],\n-                    \"msg\": \"field required\",\n-                    \"type\": \"value_error.missing\",\n-                }\n-            ]\n-        }\n-    )\n-\n-\n-@needs_py39\n-def test_post_body_form_no_username(client: TestClient):\n-    response = client.post(\"/login/\", data={\"password\": \"secret\"})\n-    assert response.status_code == 422\n-    assert response.json() == IsDict(\n-        {\n-            \"detail\": [\n-                {\n-                    \"type\": \"missing\",\n-                    \"loc\": [\"body\", \"username\"],\n-                    \"msg\": \"Field required\",\n-                    \"input\": {\"password\": \"secret\"},\n-                }\n-            ]\n-        }\n-    ) | IsDict(\n-        # TODO: remove when deprecating Pydantic v1\n-        {\n-            \"detail\": [\n-                {\n-                    \"loc\": [\"body\", \"username\"],\n-                    \"msg\": \"field required\",\n-                    \"type\": \"value_error.missing\",\n-                }\n-            ]\n-        }\n-    )\n-\n-\n-@needs_py39\n-def test_post_body_form_no_data(client: TestClient):\n-    response = client.post(\"/login/\")\n-    assert response.status_code == 422\n-    assert response.json() == IsDict(\n-        {\n-            \"detail\": [\n-                {\n-                    \"type\": \"missing\",\n-                    \"loc\": [\"body\", \"username\"],\n-                    \"msg\": \"Field required\",\n-                    \"input\": {},\n-                },\n-                {\n-                    \"type\": \"missing\",\n-                    \"loc\": [\"body\", \"password\"],\n-                    \"msg\": \"Field required\",\n-                    \"input\": {},\n-                },\n-            ]\n-        }\n-    ) | IsDict(\n-        # TODO: remove when deprecating Pydantic v1\n-        {\n-            \"detail\": [\n-                {\n-                    \"loc\": [\"body\", \"username\"],\n-                    \"msg\": \"field required\",\n-                    \"type\": \"value_error.missing\",\n-                },\n-                {\n-                    \"loc\": [\"body\", \"password\"],\n-                    \"msg\": \"field required\",\n-                    \"type\": \"value_error.missing\",\n-                },\n-            ]\n-        }\n-    )\n-\n-\n-@needs_py39\n-def test_post_body_json(client: TestClient):\n-    response = client.post(\"/login/\", json={\"username\": \"Foo\", \"password\": \"secret\"})\n-    assert response.status_code == 422, response.text\n-    assert response.json() == IsDict(\n-        {\n-            \"detail\": [\n-                {\n-                    \"type\": \"missing\",\n-                    \"loc\": [\"body\", \"username\"],\n-                    \"msg\": \"Field required\",\n-                    \"input\": {},\n-                },\n-                {\n-                    \"type\": \"missing\",\n-                    \"loc\": [\"body\", \"password\"],\n-                    \"msg\": \"Field required\",\n-                    \"input\": {},\n-                },\n-            ]\n-        }\n-    ) | IsDict(\n-        # TODO: remove when deprecating Pydantic v1\n-        {\n-            \"detail\": [\n-                {\n-                    \"loc\": [\"body\", \"username\"],\n-                    \"msg\": \"field required\",\n-                    \"type\": \"value_error.missing\",\n-                },\n-                {\n-                    \"loc\": [\"body\", \"password\"],\n-                    \"msg\": \"field required\",\n-                    \"type\": \"value_error.missing\",\n-                },\n-            ]\n-        }\n-    )\n-\n-\n-@needs_py39\n-def test_openapi_schema(client: TestClient):\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\n-        \"openapi\": \"3.1.0\",\n-        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n-        \"paths\": {\n-            \"/login/\": {\n-                \"post\": {\n-                    \"responses\": {\n-                        \"200\": {\n-                            \"description\": \"Successful Response\",\n-                            \"content\": {\"application/json\": {\"schema\": {}}},\n-                        },\n-                        \"422\": {\n-                            \"description\": \"Validation Error\",\n-                            \"content\": {\n-                                \"application/json\": {\n-                                    \"schema\": {\n-                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n-                                    }\n-                                }\n-                            },\n-                        },\n-                    },\n-                    \"summary\": \"Login\",\n-                    \"operationId\": \"login_login__post\",\n-                    \"requestBody\": {\n-                        \"content\": {\n-                            \"application/x-www-form-urlencoded\": {\n-                                \"schema\": {\"$ref\": \"#/components/schemas/FormData\"}\n-                            }\n-                        },\n-                        \"required\": True,\n-                    },\n-                }\n-            }\n-        },\n-        \"components\": {\n-            \"schemas\": {\n-                \"FormData\": {\n-                    \"properties\": {\n-                        \"username\": {\"type\": \"string\", \"title\": \"Username\"},\n-                        \"password\": {\"type\": \"string\", \"title\": \"Password\"},\n-                    },\n-                    \"type\": \"object\",\n-                    \"required\": [\"username\", \"password\"],\n-                    \"title\": \"FormData\",\n-                },\n-                \"ValidationError\": {\n-                    \"title\": \"ValidationError\",\n-                    \"required\": [\"loc\", \"msg\", \"type\"],\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"loc\": {\n-                            \"title\": \"Location\",\n-                            \"type\": \"array\",\n-                            \"items\": {\n-                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n-                            },\n-                        },\n-                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n-                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n-                    },\n-                },\n-                \"HTTPValidationError\": {\n-                    \"title\": \"HTTPValidationError\",\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"detail\": {\n-                            \"title\": \"Detail\",\n-                            \"type\": \"array\",\n-                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n-                        }\n-                    },\n-                },\n-            }\n-        },\n-    }\n\n@@ -1,14 +1,23 @@\n+import importlib\n+\n import pytest\n from fastapi.testclient import TestClient\n \n-from tests.utils import needs_pydanticv2\n+from ...utils import needs_py39, needs_pydanticv2\n \n \n-@pytest.fixture(name=\"client\")\n-def get_client():\n-    from docs_src.request_form_models.tutorial002 import app\n+@pytest.fixture(\n+    name=\"client\",\n+    params=[\n+        \"tutorial002\",\n+        \"tutorial002_an\",\n+        pytest.param(\"tutorial002_an_py39\", marks=needs_py39),\n+    ],\n+)\n+def get_client(request: pytest.FixtureRequest):\n+    mod = importlib.import_module(f\"docs_src.request_form_models.{request.param}\")\n \n-    client = TestClient(app)\n+    client = TestClient(mod.app)\n     return client\n \n \n\n@@ -1,196 +0,0 @@\n-import pytest\n-from fastapi.testclient import TestClient\n-\n-from tests.utils import needs_pydanticv2\n-\n-\n-@pytest.fixture(name=\"client\")\n-def get_client():\n-    from docs_src.request_form_models.tutorial002_an import app\n-\n-    client = TestClient(app)\n-    return client\n-\n-\n-@needs_pydanticv2\n-def test_post_body_form(client: TestClient):\n-    response = client.post(\"/login/\", data={\"username\": \"Foo\", \"password\": \"secret\"})\n-    assert response.status_code == 200\n-    assert response.json() == {\"username\": \"Foo\", \"password\": \"secret\"}\n-\n-\n-@needs_pydanticv2\n-def test_post_body_extra_form(client: TestClient):\n-    response = client.post(\n-        \"/login/\", data={\"username\": \"Foo\", \"password\": \"secret\", \"extra\": \"extra\"}\n-    )\n-    assert response.status_code == 422\n-    assert response.json() == {\n-        \"detail\": [\n-            {\n-                \"type\": \"extra_forbidden\",\n-                \"loc\": [\"body\", \"extra\"],\n-                \"msg\": \"Extra inputs are not permitted\",\n-                \"input\": \"extra\",\n-            }\n-        ]\n-    }\n-\n-\n-@needs_pydanticv2\n-def test_post_body_form_no_password(client: TestClient):\n-    response = client.post(\"/login/\", data={\"username\": \"Foo\"})\n-    assert response.status_code == 422\n-    assert response.json() == {\n-        \"detail\": [\n-            {\n-                \"type\": \"missing\",\n-                \"loc\": [\"body\", \"password\"],\n-                \"msg\": \"Field required\",\n-                \"input\": {\"username\": \"Foo\"},\n-            }\n-        ]\n-    }\n-\n-\n-@needs_pydanticv2\n-def test_post_body_form_no_username(client: TestClient):\n-    response = client.post(\"/login/\", data={\"password\": \"secret\"})\n-    assert response.status_code == 422\n-    assert response.json() == {\n-        \"detail\": [\n-            {\n-                \"type\": \"missing\",\n-                \"loc\": [\"body\", \"username\"],\n-                \"msg\": \"Field required\",\n-                \"input\": {\"password\": \"secret\"},\n-            }\n-        ]\n-    }\n-\n-\n-@needs_pydanticv2\n-def test_post_body_form_no_data(client: TestClient):\n-    response = client.post(\"/login/\")\n-    assert response.status_code == 422\n-    assert response.json() == {\n-        \"detail\": [\n-            {\n-                \"type\": \"missing\",\n-                \"loc\": [\"body\", \"username\"],\n-                \"msg\": \"Field required\",\n-                \"input\": {},\n-            },\n-            {\n-                \"type\": \"missing\",\n-                \"loc\": [\"body\", \"password\"],\n-                \"msg\": \"Field required\",\n-                \"input\": {},\n-            },\n-        ]\n-    }\n-\n-\n-@needs_pydanticv2\n-def test_post_body_json(client: TestClient):\n-    response = client.post(\"/login/\", json={\"username\": \"Foo\", \"password\": \"secret\"})\n-    assert response.status_code == 422, response.text\n-    assert response.json() == {\n-        \"detail\": [\n-            {\n-                \"type\": \"missing\",\n-                \"loc\": [\"body\", \"username\"],\n-                \"msg\": \"Field required\",\n-                \"input\": {},\n-            },\n-            {\n-                \"type\": \"missing\",\n-                \"loc\": [\"body\", \"password\"],\n-                \"msg\": \"Field required\",\n-                \"input\": {},\n-            },\n-        ]\n-    }\n-\n-\n-@needs_pydanticv2\n-def test_openapi_schema(client: TestClient):\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\n-        \"openapi\": \"3.1.0\",\n-        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n-        \"paths\": {\n-            \"/login/\": {\n-                \"post\": {\n-                    \"responses\": {\n-                        \"200\": {\n-                            \"description\": \"Successful Response\",\n-                            \"content\": {\"application/json\": {\"schema\": {}}},\n-                        },\n-                        \"422\": {\n-                            \"description\": \"Validation Error\",\n-                            \"content\": {\n-                                \"application/json\": {\n-                                    \"schema\": {\n-                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n-                                    }\n-                                }\n-                            },\n-                        },\n-                    },\n-                    \"summary\": \"Login\",\n-                    \"operationId\": \"login_login__post\",\n-                    \"requestBody\": {\n-                        \"content\": {\n-                            \"application/x-www-form-urlencoded\": {\n-                                \"schema\": {\"$ref\": \"#/components/schemas/FormData\"}\n-                            }\n-                        },\n-                        \"required\": True,\n-                    },\n-                }\n-            }\n-        },\n-        \"components\": {\n-            \"schemas\": {\n-                \"FormData\": {\n-                    \"properties\": {\n-                        \"username\": {\"type\": \"string\", \"title\": \"Username\"},\n-                        \"password\": {\"type\": \"string\", \"title\": \"Password\"},\n-                    },\n-                    \"additionalProperties\": False,\n-                    \"type\": \"object\",\n-                    \"required\": [\"username\", \"password\"],\n-                    \"title\": \"FormData\",\n-                },\n-                \"ValidationError\": {\n-                    \"title\": \"ValidationError\",\n-                    \"required\": [\"loc\", \"msg\", \"type\"],\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"loc\": {\n-                            \"title\": \"Location\",\n-                            \"type\": \"array\",\n-                            \"items\": {\n-                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n-                            },\n-                        },\n-                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n-                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n-                    },\n-                },\n-                \"HTTPValidationError\": {\n-                    \"title\": \"HTTPValidationError\",\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"detail\": {\n-                            \"title\": \"Detail\",\n-                            \"type\": \"array\",\n-                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n-                        }\n-                    },\n-                },\n-            }\n-        },\n-    }\n\n@@ -1,203 +0,0 @@\n-import pytest\n-from fastapi.testclient import TestClient\n-\n-from tests.utils import needs_py39, needs_pydanticv2\n-\n-\n-@pytest.fixture(name=\"client\")\n-def get_client():\n-    from docs_src.request_form_models.tutorial002_an_py39 import app\n-\n-    client = TestClient(app)\n-    return client\n-\n-\n-@needs_pydanticv2\n-@needs_py39\n-def test_post_body_form(client: TestClient):\n-    response = client.post(\"/login/\", data={\"username\": \"Foo\", \"password\": \"secret\"})\n-    assert response.status_code == 200\n-    assert response.json() == {\"username\": \"Foo\", \"password\": \"secret\"}\n-\n-\n-@needs_pydanticv2\n-@needs_py39\n-def test_post_body_extra_form(client: TestClient):\n-    response = client.post(\n-        \"/login/\", data={\"username\": \"Foo\", \"password\": \"secret\", \"extra\": \"extra\"}\n-    )\n-    assert response.status_code == 422\n-    assert response.json() == {\n-        \"detail\": [\n-            {\n-                \"type\": \"extra_forbidden\",\n-                \"loc\": [\"body\", \"extra\"],\n-                \"msg\": \"Extra inputs are not permitted\",\n-                \"input\": \"extra\",\n-            }\n-        ]\n-    }\n-\n-\n-@needs_pydanticv2\n-@needs_py39\n-def test_post_body_form_no_password(client: TestClient):\n-    response = client.post(\"/login/\", data={\"username\": \"Foo\"})\n-    assert response.status_code == 422\n-    assert response.json() == {\n-        \"detail\": [\n-            {\n-                \"type\": \"missing\",\n-                \"loc\": [\"body\", \"password\"],\n-                \"msg\": \"Field required\",\n-                \"input\": {\"username\": \"Foo\"},\n-            }\n-        ]\n-    }\n-\n-\n-@needs_pydanticv2\n-@needs_py39\n-def test_post_body_form_no_username(client: TestClient):\n-    response = client.post(\"/login/\", data={\"password\": \"secret\"})\n-    assert response.status_code == 422\n-    assert response.json() == {\n-        \"detail\": [\n-            {\n-                \"type\": \"missing\",\n-                \"loc\": [\"body\", \"username\"],\n-                \"msg\": \"Field required\",\n-                \"input\": {\"password\": \"secret\"},\n-            }\n-        ]\n-    }\n-\n-\n-@needs_pydanticv2\n-@needs_py39\n-def test_post_body_form_no_data(client: TestClient):\n-    response = client.post(\"/login/\")\n-    assert response.status_code == 422\n-    assert response.json() == {\n-        \"detail\": [\n-            {\n-                \"type\": \"missing\",\n-                \"loc\": [\"body\", \"username\"],\n-                \"msg\": \"Field required\",\n-                \"input\": {},\n-            },\n-            {\n-                \"type\": \"missing\",\n-                \"loc\": [\"body\", \"password\"],\n-                \"msg\": \"Field required\",\n-                \"input\": {},\n-            },\n-        ]\n-    }\n-\n-\n-@needs_pydanticv2\n-@needs_py39\n-def test_post_body_json(client: TestClient):\n-    response = client.post(\"/login/\", json={\"username\": \"Foo\", \"password\": \"secret\"})\n-    assert response.status_code == 422, response.text\n-    assert response.json() == {\n-        \"detail\": [\n-            {\n-                \"type\": \"missing\",\n-                \"loc\": [\"body\", \"username\"],\n-                \"msg\": \"Field required\",\n-                \"input\": {},\n-            },\n-            {\n-                \"type\": \"missing\",\n-                \"loc\": [\"body\", \"password\"],\n-                \"msg\": \"Field required\",\n-                \"input\": {},\n-            },\n-        ]\n-    }\n-\n-\n-@needs_pydanticv2\n-@needs_py39\n-def test_openapi_schema(client: TestClient):\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\n-        \"openapi\": \"3.1.0\",\n-        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n-        \"paths\": {\n-            \"/login/\": {\n-                \"post\": {\n-                    \"responses\": {\n-                        \"200\": {\n-                            \"description\": \"Successful Response\",\n-                            \"content\": {\"application/json\": {\"schema\": {}}},\n-                        },\n-                        \"422\": {\n-                            \"description\": \"Validation Error\",\n-                            \"content\": {\n-                                \"application/json\": {\n-                                    \"schema\": {\n-                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n-                                    }\n-                                }\n-                            },\n-                        },\n-                    },\n-                    \"summary\": \"Login\",\n-                    \"operationId\": \"login_login__post\",\n-                    \"requestBody\": {\n-                        \"content\": {\n-                            \"application/x-www-form-urlencoded\": {\n-                                \"schema\": {\"$ref\": \"#/components/schemas/FormData\"}\n-                            }\n-                        },\n-                        \"required\": True,\n-                    },\n-                }\n-            }\n-        },\n-        \"components\": {\n-            \"schemas\": {\n-                \"FormData\": {\n-                    \"properties\": {\n-                        \"username\": {\"type\": \"string\", \"title\": \"Username\"},\n-                        \"password\": {\"type\": \"string\", \"title\": \"Password\"},\n-                    },\n-                    \"additionalProperties\": False,\n-                    \"type\": \"object\",\n-                    \"required\": [\"username\", \"password\"],\n-                    \"title\": \"FormData\",\n-                },\n-                \"ValidationError\": {\n-                    \"title\": \"ValidationError\",\n-                    \"required\": [\"loc\", \"msg\", \"type\"],\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"loc\": {\n-                            \"title\": \"Location\",\n-                            \"type\": \"array\",\n-                            \"items\": {\n-                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n-                            },\n-                        },\n-                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n-                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n-                    },\n-                },\n-                \"HTTPValidationError\": {\n-                    \"title\": \"HTTPValidationError\",\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"detail\": {\n-                            \"title\": \"Detail\",\n-                            \"type\": \"array\",\n-                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n-                        }\n-                    },\n-                },\n-            }\n-        },\n-    }\n\n@@ -1,17 +1,27 @@\n+import importlib\n+\n import pytest\n from fastapi.testclient import TestClient\n \n-from tests.utils import needs_pydanticv1\n+from ...utils import needs_py39, needs_pydanticv1\n \n \n-@pytest.fixture(name=\"client\")\n-def get_client():\n-    from docs_src.request_form_models.tutorial002_pv1 import app\n+@pytest.fixture(\n+    name=\"client\",\n+    params=[\n+        \"tutorial002_pv1\",\n+        \"tutorial002_pv1_an\",\n+        pytest.param(\"tutorial002_pv1_an_py39\", marks=needs_py39),\n+    ],\n+)\n+def get_client(request: pytest.FixtureRequest):\n+    mod = importlib.import_module(f\"docs_src.request_form_models.{request.param}\")\n \n-    client = TestClient(app)\n+    client = TestClient(mod.app)\n     return client\n \n \n+# TODO: remove when deprecating Pydantic v1\n @needs_pydanticv1\n def test_post_body_form(client: TestClient):\n     response = client.post(\"/login/\", data={\"username\": \"Foo\", \"password\": \"secret\"})\n@@ -19,6 +29,7 @@ def test_post_body_form(client: TestClient):\n     assert response.json() == {\"username\": \"Foo\", \"password\": \"secret\"}\n \n \n+# TODO: remove when deprecating Pydantic v1\n @needs_pydanticv1\n def test_post_body_extra_form(client: TestClient):\n     response = client.post(\n@@ -36,6 +47,7 @@ def test_post_body_extra_form(client: TestClient):\n     }\n \n \n+# TODO: remove when deprecating Pydantic v1\n @needs_pydanticv1\n def test_post_body_form_no_password(client: TestClient):\n     response = client.post(\"/login/\", data={\"username\": \"Foo\"})\n@@ -51,6 +63,7 @@ def test_post_body_form_no_password(client: TestClient):\n     }\n \n \n+# TODO: remove when deprecating Pydantic v1\n @needs_pydanticv1\n def test_post_body_form_no_username(client: TestClient):\n     response = client.post(\"/login/\", data={\"password\": \"secret\"})\n@@ -66,6 +79,7 @@ def test_post_body_form_no_username(client: TestClient):\n     }\n \n \n+# TODO: remove when deprecating Pydantic v1\n @needs_pydanticv1\n def test_post_body_form_no_data(client: TestClient):\n     response = client.post(\"/login/\")\n@@ -86,6 +100,7 @@ def test_post_body_form_no_data(client: TestClient):\n     }\n \n \n+# TODO: remove when deprecating Pydantic v1\n @needs_pydanticv1\n def test_post_body_json(client: TestClient):\n     response = client.post(\"/login/\", json={\"username\": \"Foo\", \"password\": \"secret\"})\n@@ -106,6 +121,7 @@ def test_post_body_json(client: TestClient):\n     }\n \n \n+# TODO: remove when deprecating Pydantic v1\n @needs_pydanticv1\n def test_openapi_schema(client: TestClient):\n     response = client.get(\"/openapi.json\")\n\n@@ -1,196 +0,0 @@\n-import pytest\n-from fastapi.testclient import TestClient\n-\n-from tests.utils import needs_pydanticv1\n-\n-\n-@pytest.fixture(name=\"client\")\n-def get_client():\n-    from docs_src.request_form_models.tutorial002_pv1_an import app\n-\n-    client = TestClient(app)\n-    return client\n-\n-\n-# TODO: remove when deprecating Pydantic v1\n-@needs_pydanticv1\n-def test_post_body_form(client: TestClient):\n-    response = client.post(\"/login/\", data={\"username\": \"Foo\", \"password\": \"secret\"})\n-    assert response.status_code == 200\n-    assert response.json() == {\"username\": \"Foo\", \"password\": \"secret\"}\n-\n-\n-# TODO: remove when deprecating Pydantic v1\n-@needs_pydanticv1\n-def test_post_body_extra_form(client: TestClient):\n-    response = client.post(\n-        \"/login/\", data={\"username\": \"Foo\", \"password\": \"secret\", \"extra\": \"extra\"}\n-    )\n-    assert response.status_code == 422\n-    assert response.json() == {\n-        \"detail\": [\n-            {\n-                \"type\": \"value_error.extra\",\n-                \"loc\": [\"body\", \"extra\"],\n-                \"msg\": \"extra fields not permitted\",\n-            }\n-        ]\n-    }\n-\n-\n-# TODO: remove when deprecating Pydantic v1\n-@needs_pydanticv1\n-def test_post_body_form_no_password(client: TestClient):\n-    response = client.post(\"/login/\", data={\"username\": \"Foo\"})\n-    assert response.status_code == 422\n-    assert response.json() == {\n-        \"detail\": [\n-            {\n-                \"type\": \"value_error.missing\",\n-                \"loc\": [\"body\", \"password\"],\n-                \"msg\": \"field required\",\n-            }\n-        ]\n-    }\n-\n-\n-# TODO: remove when deprecating Pydantic v1\n-@needs_pydanticv1\n-def test_post_body_form_no_username(client: TestClient):\n-    response = client.post(\"/login/\", data={\"password\": \"secret\"})\n-    assert response.status_code == 422\n-    assert response.json() == {\n-        \"detail\": [\n-            {\n-                \"type\": \"value_error.missing\",\n-                \"loc\": [\"body\", \"username\"],\n-                \"msg\": \"field required\",\n-            }\n-        ]\n-    }\n-\n-\n-# TODO: remove when deprecating Pydantic v1\n-@needs_pydanticv1\n-def test_post_body_form_no_data(client: TestClient):\n-    response = client.post(\"/login/\")\n-    assert response.status_code == 422\n-    assert response.json() == {\n-        \"detail\": [\n-            {\n-                \"type\": \"value_error.missing\",\n-                \"loc\": [\"body\", \"username\"],\n-                \"msg\": \"field required\",\n-            },\n-            {\n-                \"type\": \"value_error.missing\",\n-                \"loc\": [\"body\", \"password\"],\n-                \"msg\": \"field required\",\n-            },\n-        ]\n-    }\n-\n-\n-# TODO: remove when deprecating Pydantic v1\n-@needs_pydanticv1\n-def test_post_body_json(client: TestClient):\n-    response = client.post(\"/login/\", json={\"username\": \"Foo\", \"password\": \"secret\"})\n-    assert response.status_code == 422, response.text\n-    assert response.json() == {\n-        \"detail\": [\n-            {\n-                \"type\": \"value_error.missing\",\n-                \"loc\": [\"body\", \"username\"],\n-                \"msg\": \"field required\",\n-            },\n-            {\n-                \"type\": \"value_error.missing\",\n-                \"loc\": [\"body\", \"password\"],\n-                \"msg\": \"field required\",\n-            },\n-        ]\n-    }\n-\n-\n-# TODO: remove when deprecating Pydantic v1\n-@needs_pydanticv1\n-def test_openapi_schema(client: TestClient):\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\n-        \"openapi\": \"3.1.0\",\n-        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n-        \"paths\": {\n-            \"/login/\": {\n-                \"post\": {\n-                    \"responses\": {\n-                        \"200\": {\n-                            \"description\": \"Successful Response\",\n-                            \"content\": {\"application/json\": {\"schema\": {}}},\n-                        },\n-                        \"422\": {\n-                            \"description\": \"Validation Error\",\n-                            \"content\": {\n-                                \"application/json\": {\n-                                    \"schema\": {\n-                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n-                                    }\n-                                }\n-                            },\n-                        },\n-                    },\n-                    \"summary\": \"Login\",\n-                    \"operationId\": \"login_login__post\",\n-                    \"requestBody\": {\n-                        \"content\": {\n-                            \"application/x-www-form-urlencoded\": {\n-                                \"schema\": {\"$ref\": \"#/components/schemas/FormData\"}\n-                            }\n-                        },\n-                        \"required\": True,\n-                    },\n-                }\n-            }\n-        },\n-        \"components\": {\n-            \"schemas\": {\n-                \"FormData\": {\n-                    \"properties\": {\n-                        \"username\": {\"type\": \"string\", \"title\": \"Username\"},\n-                        \"password\": {\"type\": \"string\", \"title\": \"Password\"},\n-                    },\n-                    \"additionalProperties\": False,\n-                    \"type\": \"object\",\n-                    \"required\": [\"username\", \"password\"],\n-                    \"title\": \"FormData\",\n-                },\n-                \"ValidationError\": {\n-                    \"title\": \"ValidationError\",\n-                    \"required\": [\"loc\", \"msg\", \"type\"],\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"loc\": {\n-                            \"title\": \"Location\",\n-                            \"type\": \"array\",\n-                            \"items\": {\n-                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n-                            },\n-                        },\n-                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n-                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n-                    },\n-                },\n-                \"HTTPValidationError\": {\n-                    \"title\": \"HTTPValidationError\",\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"detail\": {\n-                            \"title\": \"Detail\",\n-                            \"type\": \"array\",\n-                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n-                        }\n-                    },\n-                },\n-            }\n-        },\n-    }\n\n@@ -1,203 +0,0 @@\n-import pytest\n-from fastapi.testclient import TestClient\n-\n-from tests.utils import needs_py39, needs_pydanticv1\n-\n-\n-@pytest.fixture(name=\"client\")\n-def get_client():\n-    from docs_src.request_form_models.tutorial002_pv1_an_py39 import app\n-\n-    client = TestClient(app)\n-    return client\n-\n-\n-# TODO: remove when deprecating Pydantic v1\n-@needs_pydanticv1\n-@needs_py39\n-def test_post_body_form(client: TestClient):\n-    response = client.post(\"/login/\", data={\"username\": \"Foo\", \"password\": \"secret\"})\n-    assert response.status_code == 200\n-    assert response.json() == {\"username\": \"Foo\", \"password\": \"secret\"}\n-\n-\n-# TODO: remove when deprecating Pydantic v1\n-@needs_pydanticv1\n-@needs_py39\n-def test_post_body_extra_form(client: TestClient):\n-    response = client.post(\n-        \"/login/\", data={\"username\": \"Foo\", \"password\": \"secret\", \"extra\": \"extra\"}\n-    )\n-    assert response.status_code == 422\n-    assert response.json() == {\n-        \"detail\": [\n-            {\n-                \"type\": \"value_error.extra\",\n-                \"loc\": [\"body\", \"extra\"],\n-                \"msg\": \"extra fields not permitted\",\n-            }\n-        ]\n-    }\n-\n-\n-# TODO: remove when deprecating Pydantic v1\n-@needs_pydanticv1\n-@needs_py39\n-def test_post_body_form_no_password(client: TestClient):\n-    response = client.post(\"/login/\", data={\"username\": \"Foo\"})\n-    assert response.status_code == 422\n-    assert response.json() == {\n-        \"detail\": [\n-            {\n-                \"type\": \"value_error.missing\",\n-                \"loc\": [\"body\", \"password\"],\n-                \"msg\": \"field required\",\n-            }\n-        ]\n-    }\n-\n-\n-# TODO: remove when deprecating Pydantic v1\n-@needs_pydanticv1\n-@needs_py39\n-def test_post_body_form_no_username(client: TestClient):\n-    response = client.post(\"/login/\", data={\"password\": \"secret\"})\n-    assert response.status_code == 422\n-    assert response.json() == {\n-        \"detail\": [\n-            {\n-                \"type\": \"value_error.missing\",\n-                \"loc\": [\"body\", \"username\"],\n-                \"msg\": \"field required\",\n-            }\n-        ]\n-    }\n-\n-\n-# TODO: remove when deprecating Pydantic v1\n-@needs_pydanticv1\n-@needs_py39\n-def test_post_body_form_no_data(client: TestClient):\n-    response = client.post(\"/login/\")\n-    assert response.status_code == 422\n-    assert response.json() == {\n-        \"detail\": [\n-            {\n-                \"type\": \"value_error.missing\",\n-                \"loc\": [\"body\", \"username\"],\n-                \"msg\": \"field required\",\n-            },\n-            {\n-                \"type\": \"value_error.missing\",\n-                \"loc\": [\"body\", \"password\"],\n-                \"msg\": \"field required\",\n-            },\n-        ]\n-    }\n-\n-\n-# TODO: remove when deprecating Pydantic v1\n-@needs_pydanticv1\n-@needs_py39\n-def test_post_body_json(client: TestClient):\n-    response = client.post(\"/login/\", json={\"username\": \"Foo\", \"password\": \"secret\"})\n-    assert response.status_code == 422, response.text\n-    assert response.json() == {\n-        \"detail\": [\n-            {\n-                \"type\": \"value_error.missing\",\n-                \"loc\": [\"body\", \"username\"],\n-                \"msg\": \"field required\",\n-            },\n-            {\n-                \"type\": \"value_error.missing\",\n-                \"loc\": [\"body\", \"password\"],\n-                \"msg\": \"field required\",\n-            },\n-        ]\n-    }\n-\n-\n-# TODO: remove when deprecating Pydantic v1\n-@needs_pydanticv1\n-@needs_py39\n-def test_openapi_schema(client: TestClient):\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\n-        \"openapi\": \"3.1.0\",\n-        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n-        \"paths\": {\n-            \"/login/\": {\n-                \"post\": {\n-                    \"responses\": {\n-                        \"200\": {\n-                            \"description\": \"Successful Response\",\n-                            \"content\": {\"application/json\": {\"schema\": {}}},\n-                        },\n-                        \"422\": {\n-                            \"description\": \"Validation Error\",\n-                            \"content\": {\n-                                \"application/json\": {\n-                                    \"schema\": {\n-                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n-                                    }\n-                                }\n-                            },\n-                        },\n-                    },\n-                    \"summary\": \"Login\",\n-                    \"operationId\": \"login_login__post\",\n-                    \"requestBody\": {\n-                        \"content\": {\n-                            \"application/x-www-form-urlencoded\": {\n-                                \"schema\": {\"$ref\": \"#/components/schemas/FormData\"}\n-                            }\n-                        },\n-                        \"required\": True,\n-                    },\n-                }\n-            }\n-        },\n-        \"components\": {\n-            \"schemas\": {\n-                \"FormData\": {\n-                    \"properties\": {\n-                        \"username\": {\"type\": \"string\", \"title\": \"Username\"},\n-                        \"password\": {\"type\": \"string\", \"title\": \"Password\"},\n-                    },\n-                    \"additionalProperties\": False,\n-                    \"type\": \"object\",\n-                    \"required\": [\"username\", \"password\"],\n-                    \"title\": \"FormData\",\n-                },\n-                \"ValidationError\": {\n-                    \"title\": \"ValidationError\",\n-                    \"required\": [\"loc\", \"msg\", \"type\"],\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"loc\": {\n-                            \"title\": \"Location\",\n-                            \"type\": \"array\",\n-                            \"items\": {\n-                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n-                            },\n-                        },\n-                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n-                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n-                    },\n-                },\n-                \"HTTPValidationError\": {\n-                    \"title\": \"HTTPValidationError\",\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"detail\": {\n-                            \"title\": \"Detail\",\n-                            \"type\": \"array\",\n-                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n-                        }\n-                    },\n-                },\n-            }\n-        },\n-    }\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
