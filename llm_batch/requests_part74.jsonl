{"custom_id": "requests#e2961b9f91e55199fac9d67f82180d06b0a7be35", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 3 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 5 | Churn Cumulative: 1940 | Contributors (this commit): 46 | Commits (past 90d): 4 | Contributors (cumulative): 46 | DMM Complexity: 1.0\n\nDIFF:\n@@ -21,8 +21,8 @@ import sys\n from . import __version__\n from . import certs\n from .compat import parse_http_list as _parse_list_header\n-from .compat import (quote, urlparse, bytes, str, OrderedDict, urlunparse,\n-                     is_py2, is_py3, builtin_str, getproxies, proxy_bypass)\n+from .compat import (quote, urlparse, bytes, str, OrderedDict, unquote, is_py2,\n+                     builtin_str, getproxies, proxy_bypass)\n from .cookies import RequestsCookieJar, cookiejar_from_dict\n from .structures import CaseInsensitiveDict\n from .exceptions import MissingSchema, InvalidURL\n@@ -558,6 +558,7 @@ def get_auth_from_url(url):\n     \"\"\"Given a url with authentication components, extract them into a tuple of\n     username,password.\"\"\"\n     if url:\n+        url = unquote(url)\n         parsed = urlparse(url)\n         return (parsed.username, parsed.password)\n     else:\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#2c914126ba0c4865dc37c0a70f481091112a7dac", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 26 | Lines Deleted: 0 | Files Changed: 2 | Hunks: 3 | Methods Changed: 2 | Complexity Δ (Sum/Max): 4/6 | Churn Δ: 26 | Churn Cumulative: 5978 | Contributors (this commit): 97 | Commits (past 90d): 22 | Contributors (cumulative): 113 | DMM Complexity: 0.3181818181818182\n\nDIFF:\n@@ -17,6 +17,7 @@ import os\n import platform\n import re\n import sys\n+import netaddr\n \n from . import __version__\n from . import certs\n@@ -420,6 +421,22 @@ def get_environ_proxies(url):\n         # the end of the netloc, both with and without the port.\n         no_proxy = no_proxy.replace(' ', '').split(',')\n \n+        ip = None\n+        try:\n+            ip = netaddr.IPAddress(netloc.split(':')[0])\n+        except netaddr.AddrFormatError:\n+            pass\n+\n+        if ip:\n+            for proxy_ip in no_proxy:\n+                proxy_ipaddress = None\n+                try:\n+                    proxy_ipaddress = netaddr.IPNetwork(proxy_ip)\n+                except (netaddr.AddrFormatError, ValueError):\n+                    continue\n+                if proxy_ipaddress and ip in proxy_ipaddress:\n+                    return {}\n+        else:\n             for host in no_proxy:\n                 if netloc.endswith(host) or netloc.split(':')[0].endswith(host):\n                     # The URL does match something in no_proxy, so we don't want\n\n@@ -910,5 +910,14 @@ class UtilsTestCase(unittest.TestCase):\n         else:\n             assert super_len(cStringIO.StringIO('but some how, some way...')) == 25\n \n+    def test_get_environ_proxies_ip_ranges(self):\n+        \"\"\" Ensures that IP addresses are correctly matches with ranges in no_proxy variable \"\"\"\n+        from requests.utils import get_environ_proxies\n+        os.environ['no_proxy'] = \"127.0.0.1,localhost.localdomain,192.168.0.0/24,172.16.1.1\"\n+        assert get_environ_proxies('http://192.168.0.1:5000/') == {}\n+        assert get_environ_proxies('http://192.168.0.1/') == {}\n+        assert get_environ_proxies('http://172.16.1.1/') == {}\n+        assert get_environ_proxies('http://192.168.1.1:5000/') == {'no': os.environ['no_proxy']}\n+\n if __name__ == '__main__':\n     unittest.main()\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#9ec222c363b226e908a9d72018e2f467952da52f", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 8 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 2 | Methods Changed: 2 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 8 | Churn Cumulative: 4029 | Contributors (this commit): 66 | Commits (past 90d): 18 | Contributors (cumulative): 66 | DMM Complexity: 1.0\n\nDIFF:\n@@ -917,7 +917,15 @@ class UtilsTestCase(unittest.TestCase):\n         assert get_environ_proxies('http://192.168.0.1:5000/') == {}\n         assert get_environ_proxies('http://192.168.0.1/') == {}\n         assert get_environ_proxies('http://172.16.1.1/') == {}\n+        assert get_environ_proxies('http://172.16.1.1:5000/') == {}\n         assert get_environ_proxies('http://192.168.1.1:5000/') == {'no': os.environ['no_proxy']}\n \n+    def test_get_environ_proxies(self):\n+        \"\"\" Ensures that IP addresses are correctly matches with ranges in no_proxy variable \"\"\"\n+        from requests.utils import get_environ_proxies\n+        os.environ['no_proxy'] = \"127.0.0.1,localhost.localdomain,192.168.0.0/24,172.16.1.1\"\n+        assert get_environ_proxies('http://localhost.localdomain:5000/test/') == {}\n+        assert get_environ_proxies('http://www.requests.com/') == {'no': os.environ['no_proxy']}\n+\n if __name__ == '__main__':\n     unittest.main()\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#8aff6f5ed0aca2dbe5b2eba242f0e3b96285c700", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 50 | Lines Deleted: 16 | Files Changed: 2 | Hunks: 6 | Methods Changed: 7 | Complexity Δ (Sum/Max): 5/5 | Churn Δ: 66 | Churn Cumulative: 6052 | Contributors (this commit): 97 | Commits (past 90d): 23 | Contributors (cumulative): 113 | DMM Complexity: 1.0\n\nDIFF:\n@@ -17,7 +17,8 @@ import os\n import platform\n import re\n import sys\n-import netaddr\n+import socket\n+import struct\n \n from . import __version__\n from . import certs\n@@ -406,6 +407,39 @@ def requote_uri(uri):\n     return quote(unquote_unreserved(uri), safe=\"!#$%&'()*+,/:;=?@[]~\")\n \n \n+def address_in_network(ip,net):\n+    '''This function allows you to check if on IP belogs to a Network'''\n+    ipaddr = struct.unpack('=L', socket.inet_aton(ip))[0]\n+    netaddr, bits = net.split('/')\n+    netmask = struct.unpack('=L', socket.inet_aton(dotted_netmask(int(bits))))[0]\n+    network = struct.unpack('=L', socket.inet_aton(netaddr))[0] & netmask\n+    return (ipaddr & netmask) == (network & netmask)\n+\n+\n+def dotted_netmask(mask):\n+    bits = 0xffffffff ^ (1 << 32 - mask) - 1\n+    return socket.inet_ntoa(struct.pack('>I', bits))\n+\n+\n+def is_ipv4_address(string_ip):\n+    try:\n+        socket.inet_aton(string_ip)\n+    except BaseException:\n+        return False\n+    return True\n+\n+\n+def is_ipv4_network(string_network):\n+    if '/' in string_network:\n+        try:\n+            socket.inet_aton(string_network.split('/')[0])\n+        except OSError:\n+            return False\n+    else:\n+        return False\n+    return True\n+\n+\n def get_environ_proxies(url):\n     \"\"\"Return a dict of environment proxies.\"\"\"\n \n@@ -421,20 +455,11 @@ def get_environ_proxies(url):\n         # the end of the netloc, both with and without the port.\n         no_proxy = no_proxy.replace(' ', '').split(',')\n \n-        ip = None\n-        try:\n-            ip = netaddr.IPAddress(netloc.split(':')[0])\n-        except netaddr.AddrFormatError:\n-            pass\n-\n-        if ip:\n+        ip = netloc.split(':')[0]\n+        if is_ipv4_address(ip):\n             for proxy_ip in no_proxy:\n-                proxy_ipaddress = None\n-                try:\n-                    proxy_ipaddress = netaddr.IPNetwork(proxy_ip)\n-                except (netaddr.AddrFormatError, ValueError):\n-                    continue\n-                if proxy_ipaddress and ip in proxy_ipaddress:\n+                if is_ipv4_network(proxy_ip):\n+                    if address_in_network(ip, proxy_ip):\n                         return {}\n         else:\n             for host in no_proxy:\n\n@@ -913,11 +913,20 @@ class UtilsTestCase(unittest.TestCase):\n     def test_get_environ_proxies_ip_ranges(self):\n         \"\"\" Ensures that IP addresses are correctly matches with ranges in no_proxy variable \"\"\"\n         from requests.utils import get_environ_proxies\n-        os.environ['no_proxy'] = \"127.0.0.1,localhost.localdomain,192.168.0.0/24,172.16.1.1\"\n+        os.environ['no_proxy'] = \"192.168.0.0/24,127.0.0.1,localhost.localdomain,172.16.1.1\"\n         assert get_environ_proxies('http://192.168.0.1:5000/') == {}\n         assert get_environ_proxies('http://192.168.0.1/') == {}\n         assert get_environ_proxies('http://172.16.1.1/') == {}\n-        assert get_environ_proxies('http://192.168.1.1:5000/') == {'no': os.environ['no_proxy']}\n+        assert get_environ_proxies('http://172.16.1.1:5000/') == {}\n+        assert get_environ_proxies('http://192.168.1.1:5000/') != {}\n+        assert get_environ_proxies('http://192.168.1.1/') != {}\n+\n+    def test_get_environ_proxies(self):\n+        \"\"\" Ensures that IP addresses are correctly matches with ranges in no_proxy variable \"\"\"\n+        from requests.utils import get_environ_proxies\n+        os.environ['no_proxy'] = \"127.0.0.1,localhost.localdomain,192.168.0.0/24,172.16.1.1\"\n+        assert get_environ_proxies('http://localhost.localdomain:5000/v1.0/') == {}\n+        assert get_environ_proxies('http://www.requests.com/') != {}\n \n if __name__ == '__main__':\n     unittest.main()\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#f0d3edf4090f3228f576cee665e3135052fbf303", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 1 | Churn Cumulative: 4043 | Contributors (this commit): 66 | Commits (past 90d): 19 | Contributors (cumulative): 66 | DMM Complexity: 1.0\n\nDIFF:\n@@ -926,6 +926,7 @@ class UtilsTestCase(unittest.TestCase):\n         from requests.utils import get_environ_proxies\n         os.environ['no_proxy'] = \"127.0.0.1,localhost.localdomain,192.168.0.0/24,172.16.1.1\"\n         assert get_environ_proxies('http://localhost.localdomain:5000/v1.0/') == {}\n+        assert get_environ_proxies('http://www.requests.com:5000/v1.0/') != {}\n         assert get_environ_proxies('http://www.requests.com/') != {}\n \n if __name__ == '__main__':\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#61313903453ee68677c5afe0a8cb3e26f8215f9c", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 0 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 1 | Churn Cumulative: 4044 | Contributors (this commit): 66 | Commits (past 90d): 20 | Contributors (cumulative): 66 | DMM Complexity: 0.0\n\nDIFF:\n@@ -926,7 +926,6 @@ class UtilsTestCase(unittest.TestCase):\n         from requests.utils import get_environ_proxies\n         os.environ['no_proxy'] = \"127.0.0.1,localhost.localdomain,192.168.0.0/24,172.16.1.1\"\n         assert get_environ_proxies('http://localhost.localdomain:5000/v1.0/') == {}\n-        assert get_environ_proxies('http://www.requests.com:5000/v1.0/') != {}\n         assert get_environ_proxies('http://www.requests.com/') != {}\n \n if __name__ == '__main__':\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#0a4e65c0ed6bab6fbe9cfc4f4c4d349098b6f319", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 11 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 2 | Complexity Δ (Sum/Max): 2/2 | Churn Δ: 11 | Churn Cumulative: 4055 | Contributors (this commit): 66 | Commits (past 90d): 21 | Contributors (cumulative): 66 | DMM Complexity: 1.0\n\nDIFF:\n@@ -928,5 +928,16 @@ class UtilsTestCase(unittest.TestCase):\n         assert get_environ_proxies('http://localhost.localdomain:5000/v1.0/') == {}\n         assert get_environ_proxies('http://www.requests.com/') != {}\n \n+    def test_is_ipv4_address(self):\n+        from requests.utils import is_ipv4_address\n+        assert is_ipv4_address('8.8.8.8')\n+        assert not is_ipv4_address('8.8.8.8.8')\n+        assert not is_ipv4_address('localhost.localdomain')\n+\n+    def test_is_ipv4_network(self):\n+        from requests.utils import is_ipv4_network\n+        assert not is_ipv4_network('8.8.8.8')\n+        assert is_ipv4_network('192.168.1.0/24')\n+\n if __name__ == '__main__':\n     unittest.main()\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#947248129ba3b0917c86c013f24d7499c15cb8ae", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 10 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 3 | Methods Changed: 3 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 11 | Churn Cumulative: 2021 | Contributors (this commit): 47 | Commits (past 90d): 6 | Contributors (cumulative): 47 | DMM Complexity: None\n\nDIFF:\n@@ -408,7 +408,11 @@ def requote_uri(uri):\n \n \n def address_in_network(ip, net):\n-    '''This function allows you to check if on IP belogs to a Network'''\n+    \"\"\"\n+    This function allows you to check if on IP belongs to a Network subnet\n+    Example: returns True if ip = 192.168.1.1 and net = 192.168.1.0/24\n+             returns False if ip = 192.168.1.1 and net = 192.168.100.0/24\n+    \"\"\"\n     ipaddr = struct.unpack('=L', socket.inet_aton(ip))[0]\n     netaddr, bits = net.split('/')\n     netmask = struct.unpack('=L', socket.inet_aton(dotted_netmask(int(bits))))[0]\n@@ -417,6 +421,10 @@ def address_in_network(ip,net):\n \n \n def dotted_netmask(mask):\n+    \"\"\"\n+    Converts mask from /xx format to xxx.xxx.xxx.xxx\n+    Example: if mask is /24 function returns 255.255.255.0\n+    \"\"\"\n     bits = 0xffffffff ^ (1 << 32 - mask) - 1\n     return socket.inet_ntoa(struct.pack('>I', bits))\n \n@@ -430,6 +438,7 @@ def is_ipv4_address(string_ip):\n \n \n def is_ipv4_network(string_network):\n+    \"\"\"Very simple check of the network format in no_proxy variable\"\"\"\n     if '/' in string_network:\n         try:\n             socket.inet_aton(string_network.split('/')[0])\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#5b30e960eb6ebb62f22c52653f4b134e917594a2", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 6 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 4/4 | Churn Δ: 6 | Churn Cumulative: 4061 | Contributors (this commit): 66 | Commits (past 90d): 24 | Contributors (cumulative): 66 | DMM Complexity: 1.0\n\nDIFF:\n@@ -177,6 +177,12 @@ class RequestsTestCase(unittest.TestCase):\n         # Session cookie should not be modified\n         assert s.cookies['foo'] == 'bar'\n \n+    def test_request_cookies_not_persisted(self):\n+        s = requests.session()\n+        s.get(httpbin('cookies'), cookies={'foo': 'baz'})\n+        # Sending a request with cookies should not add cookies to the session\n+        assert not s.cookies\n+\n     def test_generic_cookiejar_works(self):\n         cj = cookielib.CookieJar()\n         cookiejar_from_dict({'foo': 'bar'}, cj)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#8bfe0d873f382ec92e4000084bb7e00505bc29b2", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 12 | Lines Deleted: 9 | Files Changed: 3 | Hunks: 9 | Methods Changed: 6 | Complexity Δ (Sum/Max): 9/5 | Churn Δ: 21 | Churn Cumulative: 12807 | Contributors (this commit): 163 | Commits (past 90d): 46 | Contributors (cumulative): 203 | DMM Complexity: 1.0\n\nDIFF:\n@@ -16,6 +16,7 @@ import logging\n from base64 import b64encode\n \n from .compat import urlparse, str\n+from .cookies import extract_cookies_to_jar\n from .utils import parse_dict_header\n \n log = logging.getLogger(__name__)\n@@ -169,7 +170,8 @@ class HTTPDigestAuth(AuthBase):\n             r.content\n             r.raw.release_conn()\n             prep = r.request.copy()\n-            prep.prepare_cookies(r.cookies)\n+            extract_cookies_to_jar(prep.cookies, r.request, r.raw)\n+            prep.prepare_cookies(prep.cookies)\n \n             prep.headers['Authorization'] = self.build_digest_header(\n                 prep.method, prep.url)\n\n@@ -270,6 +270,9 @@ class PreparedRequest(RequestEncodingMixin, RequestHooksMixin):\n         self.url = None\n         #: dictionary of HTTP headers.\n         self.headers = None\n+        #: The `CookieJar` used to create the Cookie header will be stored here\n+        #: after prepare_cookies is called\n+        self.cookies = None\n         #: request body to send to the server.\n         self.body = None\n         #: dictionary of callback hooks, for internal usage.\n@@ -299,6 +302,7 @@ class PreparedRequest(RequestEncodingMixin, RequestHooksMixin):\n         p.method = self.method\n         p.url = self.url\n         p.headers = self.headers.copy()\n+        p.cookies = self.cookies.copy()\n         p.body = self.body\n         p.hooks = self.hooks\n         return p\n@@ -474,12 +478,11 @@ class PreparedRequest(RequestEncodingMixin, RequestHooksMixin):\n         \"\"\"Prepares the given HTTP cookie data.\"\"\"\n \n         if isinstance(cookies, cookielib.CookieJar):\n-            cookies = cookies\n+            self.cookies = cookies\n         else:\n-            cookies = cookiejar_from_dict(cookies)\n+            self.cookies = cookiejar_from_dict(cookies)\n \n-        if 'cookie' not in self.headers:\n-            cookie_header = get_cookie_header(cookies, self)\n+        cookie_header = get_cookie_header(self.cookies, self)\n         if cookie_header is not None:\n             self.headers['Cookie'] = cookie_header\n \n\n@@ -153,7 +153,8 @@ class SessionRedirectMixin(object):\n             except KeyError:\n                 pass\n \n-            prepared_request.prepare_cookies(self.cookies)\n+            extract_cookies_to_jar(prepared_request.cookies, prepared_request, resp.raw)\n+            prepared_request.prepare_cookies(prepared_request.cookies)\n \n             resp = self.send(\n                 prepared_request,\n@@ -345,9 +346,6 @@ class Session(SessionRedirectMixin):\n         )\n         prep = self.prepare_request(req)\n \n-        # Add param cookies to session cookies\n-        self.cookies = merge_cookies(self.cookies, cookies)\n-\n         proxies = proxies or {}\n \n         # Gather clues from the surrounding environment.\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#e8bdcdb0a754ce3ec46fe167dfbd0e23f22e5ff7", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 12 | Lines Deleted: 11 | Files Changed: 3 | Hunks: 7 | Methods Changed: 5 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 23 | Churn Cumulative: 12830 | Contributors (this commit): 163 | Commits (past 90d): 47 | Contributors (cumulative): 203 | DMM Complexity: 0.0\n\nDIFF:\n@@ -170,8 +170,8 @@ class HTTPDigestAuth(AuthBase):\n             r.content\n             r.raw.release_conn()\n             prep = r.request.copy()\n-            extract_cookies_to_jar(prep.cookies, r.request, r.raw)\n-            prep.prepare_cookies(prep.cookies)\n+            extract_cookies_to_jar(prep._cookies, r.request, r.raw)\n+            prep.prepare_cookies(prep._cookies)\n \n             prep.headers['Authorization'] = self.build_digest_header(\n                 prep.method, prep.url)\n\n@@ -270,9 +270,9 @@ class PreparedRequest(RequestEncodingMixin, RequestHooksMixin):\n         self.url = None\n         #: dictionary of HTTP headers.\n         self.headers = None\n-        #: The `CookieJar` used to create the Cookie header will be stored here\n-        #: after prepare_cookies is called\n-        self.cookies = None\n+        # The `CookieJar` used to create the Cookie header will be stored here\n+        # after prepare_cookies is called\n+        self._cookies = None\n         #: request body to send to the server.\n         self.body = None\n         #: dictionary of callback hooks, for internal usage.\n@@ -302,7 +302,7 @@ class PreparedRequest(RequestEncodingMixin, RequestHooksMixin):\n         p.method = self.method\n         p.url = self.url\n         p.headers = self.headers.copy()\n-        p.cookies = self.cookies.copy()\n+        p._cookies = self._cookies.copy()\n         p.body = self.body\n         p.hooks = self.hooks\n         return p\n@@ -478,11 +478,11 @@ class PreparedRequest(RequestEncodingMixin, RequestHooksMixin):\n         \"\"\"Prepares the given HTTP cookie data.\"\"\"\n \n         if isinstance(cookies, cookielib.CookieJar):\n-            self.cookies = cookies\n+            self._cookies = cookies\n         else:\n-            self.cookies = cookiejar_from_dict(cookies)\n+            self._cookies = cookiejar_from_dict(cookies)\n \n-        cookie_header = get_cookie_header(self.cookies, self)\n+        cookie_header = get_cookie_header(self._cookies, self)\n         if cookie_header is not None:\n             self.headers['Cookie'] = cookie_header\n \n\n@@ -153,8 +153,9 @@ class SessionRedirectMixin(object):\n             except KeyError:\n                 pass\n \n-            extract_cookies_to_jar(prepared_request.cookies, prepared_request, resp.raw)\n-            prepared_request.prepare_cookies(prepared_request.cookies)\n+            extract_cookies_to_jar(prepared_request._cookies,\n+                                   prepared_request, resp.raw)\n+            prepared_request.prepare_cookies(prepared_request._cookies)\n \n             resp = self.send(\n                 prepared_request,\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#0d52ef7084a6839376be182dd91e9e003d3275ff", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 12 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 2 | Complexity Δ (Sum/Max): -2/0 | Churn Δ: 12 | Churn Cumulative: 4073 | Contributors (this commit): 66 | Commits (past 90d): 23 | Contributors (cumulative): 66 | DMM Complexity: 1.0\n\nDIFF:\n@@ -939,5 +939,17 @@ class UtilsTestCase(unittest.TestCase):\n         assert not is_ipv4_network('8.8.8.8')\n         assert is_ipv4_network('192.168.1.0/24')\n \n+    def test_dotted_netmask(self):\n+        from requests.utils import dotted_netmask\n+        assert dotted_netmask(8) == '255.0.0.0'\n+        assert dotted_netmask(24) == '255.255.255.0'\n+        assert dotted_netmask(25) == '255.255.255.128'\n+\n+    def test_address_in_network(self):\n+        from requests.utils import address_in_network\n+        assert address_in_network('192.168.1.1', '192.168.1.0/24')\n+        assert not address_in_network('172.16.0.1', '192.168.1.0/24')\n+\n+\n if __name__ == '__main__':\n     unittest.main()\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#59b29d02f8c4674a9922df53c9df9f960e6eaf34", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 2023 | Contributors (this commit): 47 | Commits (past 90d): 7 | Contributors (cumulative): 47 | DMM Complexity: None\n\nDIFF:\n@@ -423,7 +423,7 @@ def address_in_network(ip, net):\n def dotted_netmask(mask):\n     \"\"\"\n     Converts mask from /xx format to xxx.xxx.xxx.xxx\n-    Example: if mask is /24 function returns 255.255.255.0\n+    Example: if mask is 24 function returns 255.255.255.0\n     \"\"\"\n     bits = 0xffffffff ^ (1 << 32 - mask) - 1\n     return socket.inet_ntoa(struct.pack('>I', bits))\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#6c1be607f134f56bffebb7de71b18fadf918dcaa", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 4 | Lines Deleted: 4 | Files Changed: 1 | Hunks: 2 | Methods Changed: 2 | Complexity Δ (Sum/Max): -11/0 | Churn Δ: 8 | Churn Cumulative: 2031 | Contributors (this commit): 48 | Commits (past 90d): 8 | Contributors (cumulative): 48 | DMM Complexity: None\n\nDIFF:\n@@ -437,7 +437,7 @@ def get_environ_proxies(url):\n     return getproxies()\n \n \n-def default_user_agent():\n+def default_user_agent(name=u\"python-requests\"):\n     \"\"\"Return a string representing the default user agent.\"\"\"\n     _implementation = platform.python_implementation()\n \n@@ -463,9 +463,9 @@ def default_user_agent():\n         p_system = 'Unknown'\n         p_release = 'Unknown'\n \n-    return \" \".join(['python-requests/%s' % __version__,\n-                     '%s/%s' % (_implementation, _implementation_version),\n-                     '%s/%s' % (p_system, p_release)])\n+    return \" \".join([u'%s/%s' % (name, __version__),\n+                     u'%s/%s' % (_implementation, _implementation_version),\n+                     u'%s/%s' % (p_system, p_release)])\n \n \n def default_headers():\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#21c88c829aade9347d74b69546f2541ae2a66caf", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 2 | Methods Changed: 2 | Complexity Δ (Sum/Max): 11/11 | Churn Δ: 4 | Churn Cumulative: 2035 | Contributors (this commit): 48 | Commits (past 90d): 9 | Contributors (cumulative): 48 | DMM Complexity: None\n\nDIFF:\n@@ -432,7 +432,7 @@ def dotted_netmask(mask):\n def is_ipv4_address(string_ip):\n     try:\n         socket.inet_aton(string_ip)\n-    except BaseException:\n+    except socket.error:\n         return False\n     return True\n \n@@ -442,7 +442,7 @@ def is_ipv4_network(string_network):\n     if '/' in string_network:\n         try:\n             socket.inet_aton(string_network.split('/')[0])\n-        except OSError:\n+        except socket.error:\n             return False\n     else:\n         return False\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#f3bc8b6e1f470298467738f1a33c759eeb0474f4", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 2037 | Contributors (this commit): 48 | Commits (past 90d): 10 | Contributors (cumulative): 48 | DMM Complexity: None\n\nDIFF:\n@@ -409,7 +409,7 @@ def requote_uri(uri):\n \n def address_in_network(ip, net):\n     \"\"\"\n-    This function allows you to check if on IP belongs to a Network subnet\n+    This function allows you to check if on IP belongs to a network subnet\n     Example: returns True if ip = 192.168.1.1 and net = 192.168.1.0/24\n              returns False if ip = 192.168.1.1 and net = 192.168.100.0/24\n     \"\"\"\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#1d42d9d2741d36c469fca38bc7e7a5383e3b7bd9", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 16 | Lines Deleted: 8 | Files Changed: 2 | Hunks: 3 | Methods Changed: 5 | Complexity Δ (Sum/Max): 3/3 | Churn Δ: 24 | Churn Cumulative: 6134 | Contributors (this commit): 98 | Commits (past 90d): 35 | Contributors (cumulative): 114 | DMM Complexity: 0.0\n\nDIFF:\n@@ -437,9 +437,17 @@ def is_ipv4_address(string_ip):\n     return True\n \n \n-def is_ipv4_network(string_network):\n-    \"\"\"Very simple check of the network format in no_proxy variable\"\"\"\n-    if '/' in string_network:\n+def is_valid_cidr(string_network):\n+    \"\"\"Very simple check of the cidr format in no_proxy variable\"\"\"\n+    if string_network.count('/') == 1:\n+        try:\n+            mask = int(string_network.split('/')[1])\n+        except ValueError:\n+            return False\n+\n+        if mask < 1 or mask > 32:\n+            return False\n+\n         try:\n             socket.inet_aton(string_network.split('/')[0])\n         except socket.error:\n@@ -467,7 +475,7 @@ def get_environ_proxies(url):\n         ip = netloc.split(':')[0]\n         if is_ipv4_address(ip):\n             for proxy_ip in no_proxy:\n-                if is_ipv4_network(proxy_ip):\n+                if is_valid_cidr(proxy_ip):\n                     if address_in_network(ip, proxy_ip):\n                         return {}\n         else:\n\n@@ -934,10 +934,10 @@ class UtilsTestCase(unittest.TestCase):\n         assert not is_ipv4_address('8.8.8.8.8')\n         assert not is_ipv4_address('localhost.localdomain')\n \n-    def test_is_ipv4_network(self):\n-        from requests.utils import is_ipv4_network\n-        assert not is_ipv4_network('8.8.8.8')\n-        assert is_ipv4_network('192.168.1.0/24')\n+    def test_is_valid_cidr(self):\n+        from requests.utils import is_valid_cidr\n+        assert not is_valid_cidr('8.8.8.8')\n+        assert is_valid_cidr('192.168.1.0/24')\n \n     def test_dotted_netmask(self):\n         from requests.utils import dotted_netmask\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#57c138e59bac910e98df1d6815b121720e58e9a1", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 4 | Lines Deleted: 4 | Files Changed: 1 | Hunks: 2 | Methods Changed: 2 | Complexity Δ (Sum/Max): -14/0 | Churn Δ: 8 | Churn Cumulative: 2061 | Contributors (this commit): 48 | Commits (past 90d): 12 | Contributors (cumulative): 48 | DMM Complexity: None\n\nDIFF:\n@@ -437,7 +437,7 @@ def get_environ_proxies(url):\n     return getproxies()\n \n \n-def default_user_agent(name=u\"python-requests\"):\n+def default_user_agent(name=\"python-requests\"):\n     \"\"\"Return a string representing the default user agent.\"\"\"\n     _implementation = platform.python_implementation()\n \n@@ -463,9 +463,9 @@ def default_user_agent(name=u\"python-requests\"):\n         p_system = 'Unknown'\n         p_release = 'Unknown'\n \n-    return \" \".join([u'%s/%s' % (name, __version__),\n-                     u'%s/%s' % (_implementation, _implementation_version),\n-                     u'%s/%s' % (p_system, p_release)])\n+    return \" \".join(['%s/%s' % (name, __version__),\n+                     '%s/%s' % (_implementation, _implementation_version),\n+                     '%s/%s' % (p_system, p_release)])\n \n \n def default_headers():\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#aae7e39a56d9116c19d51eb086d655892c5adce3", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 517 | Contributors (this commit): 8 | Commits (past 90d): 4 | Contributors (cumulative): 8 | DMM Complexity: None\n\nDIFF:\n@@ -42,8 +42,8 @@ is at <http://python-requests.org>.\n \"\"\"\n \n __title__ = 'requests'\n-__version__ = '2.0.1'\n-__build__ = 0x020001\n+__version__ = '2.1.0'\n+__build__ = 0x020100\n __author__ = 'Kenneth Reitz'\n __license__ = 'Apache 2.0'\n __copyright__ = 'Copyright 2013 Kenneth Reitz'\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#39841562c5a5d34ed6bebbf733f97b95d57977ca", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 23 | Lines Deleted: 4 | Files Changed: 1 | Hunks: 5 | Methods Changed: 1 | Complexity Δ (Sum/Max): 9/9 | Churn Δ: 27 | Churn Cumulative: 4108 | Contributors (this commit): 67 | Commits (past 90d): 25 | Contributors (cumulative): 67 | DMM Complexity: 1.0\n\nDIFF:\n@@ -6,15 +6,16 @@\n from __future__ import division\n import json\n import os\n-import unittest\n import pickle\n+import unittest\n \n import requests\n import pytest\n-from requests.auth import HTTPDigestAuth\n from requests.adapters import HTTPAdapter\n-from requests.compat import str, cookielib, getproxies, urljoin, urlparse\n-from requests.cookies import cookiejar_from_dict\n+from requests.auth import HTTPDigestAuth\n+from requests.compat import (\n+    Morsel, cookielib, getproxies, str, urljoin, urlparse)\n+from requests.cookies import cookiejar_from_dict, morsel_to_cookie\n from requests.exceptions import InvalidURL, MissingSchema\n from requests.structures import CaseInsensitiveDict\n \n@@ -759,6 +760,24 @@ class RequestsTestCase(unittest.TestCase):\n             preq = req.prepare()\n             assert test_url == preq.url\n \n+    def test_morsel_to_cookie_expires_is_converted(self):\n+        morsel = Morsel()\n+\n+        # Test case where we convert from string time\n+        morsel['expires'] = 'Thu, 01-Jan-1970 00:00:01 GMT'\n+        cookie = morsel_to_cookie(morsel)\n+        self.assertEquals(cookie.expires, 18001)\n+\n+        # Test case where no conversion is required\n+        morsel['expires'] = 100\n+        cookie = morsel_to_cookie(morsel)\n+        self.assertEquals(cookie.expires, 100)\n+\n+        # Test case where an invalid string is input\n+        morsel['expires'] = 'woops'\n+        with self.assertRaises(ValueError):\n+            cookie = morsel_to_cookie(morsel)\n+\n \n class TestContentEncodingDetection(unittest.TestCase):\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#6140d082416eb70730940181fe19b723d72e0311", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 3 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 725 | Contributors (this commit): 17 | Commits (past 90d): 13 | Contributors (cumulative): 17 | DMM Complexity: 1.0\n\nDIFF:\n@@ -383,9 +383,11 @@ def morsel_to_cookie(morsel):\n         expires = time.time() + morsel[\"max-age\"]\n     elif morsel['expires']:\n         expires = morsel['expires']\n-        if type(expires) == type(\"\"):\n+        try:\n             time_template = \"%a, %d-%b-%Y %H:%M:%S GMT\"\n             expires = time.mktime(time.strptime(expires, time_template))\n+        except TypeError:\n+            pass\n     c = create_cookie(\n         name=morsel.key,\n         value=morsel.value,\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#ef5875cc19d8ca34a37662f53e196944595874d8", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 73 | Lines Deleted: 38 | Files Changed: 2 | Hunks: 7 | Methods Changed: 8 | Complexity Δ (Sum/Max): 4/5 | Churn Δ: 111 | Churn Cumulative: 4944 | Contributors (this commit): 77 | Commits (past 90d): 40 | Contributors (cumulative): 84 | DMM Complexity: 1.0\n\nDIFF:\n@@ -378,31 +378,28 @@ def create_cookie(name, value, **kwargs):\n \n def morsel_to_cookie(morsel):\n     \"\"\"Convert a Morsel object into a Cookie containing the one k/v pair.\"\"\"\n+\n     expires = None\n-    if morsel[\"max-age\"]:\n-        expires = time.time() + morsel[\"max-age\"]\n+    if morsel['max-age']:\n+        expires = time.time() + morsel['max-age']\n     elif morsel['expires']:\n-        expires = morsel['expires']\n-        try:\n-            time_template = \"%a, %d-%b-%Y %H:%M:%S GMT\"\n-            expires = time.mktime(time.strptime(expires, time_template))\n-        except TypeError:\n-            pass\n-    c = create_cookie(\n-        name=morsel.key,\n-        value=morsel.value,\n-        version=morsel['version'] or 0,\n-        port=None,\n-        domain=morsel['domain'],\n-        path=morsel['path'],\n-        secure=bool(morsel['secure']),\n-        expires=expires,\n-        discard=False,\n+        time_template = '%a, %d-%b-%Y %H:%M:%S GMT'\n+        expires = time.mktime(time.strptime(morsel['expires'], time_template))\n+    return create_cookie(\n         comment=morsel['comment'],\n         comment_url=bool(morsel['comment']),\n+        discard=False,\n+        domain=morsel['domain'],\n+        expires=expires,\n+        name=morsel.key,\n+        path=morsel['path'],\n+        port=None,\n         rest={'HttpOnly': morsel['httponly']},\n-        rfc2109=False,)\n-    return c\n+        rfc2109=False,\n+        secure=bool(morsel['secure']),\n+        value=morsel.value,\n+        version=morsel['version'] or 0,\n+    )\n \n \n def cookiejar_from_dict(cookie_dict, cookiejar=None, overwrite=True):\n\n@@ -760,24 +760,6 @@ class RequestsTestCase(unittest.TestCase):\n             preq = req.prepare()\n             assert test_url == preq.url\n \n-    def test_morsel_to_cookie_expires_is_converted(self):\n-        morsel = Morsel()\n-\n-        # Test case where we convert from string time\n-        morsel['expires'] = 'Thu, 01-Jan-1970 00:00:01 GMT'\n-        cookie = morsel_to_cookie(morsel)\n-        self.assertEquals(cookie.expires, 18001)\n-\n-        # Test case where no conversion is required\n-        morsel['expires'] = 100\n-        cookie = morsel_to_cookie(morsel)\n-        self.assertEquals(cookie.expires, 100)\n-\n-        # Test case where an invalid string is input\n-        morsel['expires'] = 'woops'\n-        with self.assertRaises(ValueError):\n-            cookie = morsel_to_cookie(morsel)\n-\n \n class TestContentEncodingDetection(unittest.TestCase):\n \n@@ -1023,5 +1005,61 @@ class UtilsTestCase(unittest.TestCase):\n         assert not address_in_network('172.16.0.1', '192.168.1.0/24')\n \n \n+\n+class TestMorselToCookieExpires(unittest.TestCase):\n+\n+    \"\"\"Tests for morsel_to_cookie when morsel contains expires.\"\"\"\n+\n+    def test_expires_valid_str(self):\n+        \"\"\"Test case where we convert expires from string time.\"\"\"\n+\n+        morsel = Morsel()\n+        morsel['expires'] = 'Thu, 01-Jan-1970 00:00:01 GMT'\n+        cookie = morsel_to_cookie(morsel)\n+        self.assertEquals(cookie.expires, 18001)\n+\n+    def test_expires_invalid_int(self):\n+        \"\"\"Test case where an invalid type is passed for expires.\"\"\"\n+\n+        morsel = Morsel()\n+        morsel['expires'] = 100\n+        self.assertRaises(TypeError, morsel_to_cookie, (morsel))\n+\n+    def test_expires_invalid_str(self):\n+        \"\"\"Test case where an invalid string is input.\"\"\"\n+\n+        morsel = Morsel()\n+        morsel['expires'] = 'woops'\n+        self.assertRaises(ValueError, morsel_to_cookie, (morsel))\n+\n+    def test_expires_none(self):\n+        \"\"\"Test case where expires is None.\"\"\"\n+\n+        morsel = Morsel()\n+        morsel['expires'] = None\n+        cookie = morsel_to_cookie(morsel)\n+        self.assertEquals(cookie.expires, None)\n+\n+\n+class TestMorselToCookieMaxAge(unittest.TestCase):\n+\n+    \"\"\"Tests for morsel_to_cookie when morsel contains max-age.\"\"\"\n+\n+    def test_max_age_valid_int(self):\n+        \"\"\"Test case where a valid max age in seconds is passed.\"\"\"\n+\n+        morsel = Morsel()\n+        morsel['max-age'] = 60\n+        cookie = morsel_to_cookie(morsel)\n+        self.assertIsInstance(cookie.expires, int)\n+\n+    def test_max_age_invalid_str(self):\n+        \"\"\"Test case where a invalid max age is passed.\"\"\"\n+\n+        morsel = Morsel()\n+        morsel['max-age'] = 'woops'\n+        self.assertRaises(TypeError, morsel_to_cookie, (morsel))\n+\n+\n if __name__ == '__main__':\n     unittest.main()\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#ea4570da5714deac86d6438ebac3f0b2ecea1ee6", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 4 | Lines Deleted: 3 | Files Changed: 2 | Hunks: 3 | Methods Changed: 3 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 7 | Churn Cumulative: 4951 | Contributors (this commit): 77 | Commits (past 90d): 42 | Contributors (cumulative): 84 | DMM Complexity: 1.0\n\nDIFF:\n@@ -384,7 +384,8 @@ def morsel_to_cookie(morsel):\n         expires = time.time() + morsel['max-age']\n     elif morsel['expires']:\n         time_template = '%a, %d-%b-%Y %H:%M:%S GMT'\n-        expires = time.mktime(time.strptime(morsel['expires'], time_template))\n+        expires = time.mktime(\n+            time.strptime(morsel['expires'], time_template)) - time.timezone\n     return create_cookie(\n         comment=morsel['comment'],\n         comment_url=bool(morsel['comment']),\n\n@@ -1016,7 +1016,7 @@ class TestMorselToCookieExpires(unittest.TestCase):\n         morsel = Morsel()\n         morsel['expires'] = 'Thu, 01-Jan-1970 00:00:01 GMT'\n         cookie = morsel_to_cookie(morsel)\n-        self.assertEquals(cookie.expires, 18001)\n+        self.assertEquals(cookie.expires, 1)\n \n     def test_expires_invalid_int(self):\n         \"\"\"Test case where an invalid type is passed for expires.\"\"\"\n@@ -1051,7 +1051,7 @@ class TestMorselToCookieMaxAge(unittest.TestCase):\n         morsel = Morsel()\n         morsel['max-age'] = 60\n         cookie = morsel_to_cookie(morsel)\n-        self.assertIsInstance(cookie.expires, int)\n+        self.assertTrue(isinstance(cookie.expires, int))\n \n     def test_max_age_invalid_str(self):\n         \"\"\"Test case where a invalid max age is passed.\"\"\"\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#837ba94dde2ba0c69ad8bd7a7db02e69ff75a05c", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 9 | Lines Deleted: 6 | Files Changed: 1 | Hunks: 6 | Methods Changed: 6 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 15 | Churn Cumulative: 4201 | Contributors (this commit): 67 | Commits (past 90d): 28 | Contributors (cumulative): 67 | DMM Complexity: 1.0\n\nDIFF:\n@@ -1016,21 +1016,23 @@ class TestMorselToCookieExpires(unittest.TestCase):\n         morsel = Morsel()\n         morsel['expires'] = 'Thu, 01-Jan-1970 00:00:01 GMT'\n         cookie = morsel_to_cookie(morsel)\n-        self.assertEquals(cookie.expires, 1)\n+        assert cookie.expires == 1\n \n     def test_expires_invalid_int(self):\n         \"\"\"Test case where an invalid type is passed for expires.\"\"\"\n \n         morsel = Morsel()\n         morsel['expires'] = 100\n-        self.assertRaises(TypeError, morsel_to_cookie, (morsel))\n+        with pytest.raises(TypeError):\n+            morsel_to_cookie(morsel)\n \n     def test_expires_invalid_str(self):\n         \"\"\"Test case where an invalid string is input.\"\"\"\n \n         morsel = Morsel()\n         morsel['expires'] = 'woops'\n-        self.assertRaises(ValueError, morsel_to_cookie, (morsel))\n+        with pytest.raises(ValueError):\n+            morsel_to_cookie(morsel)\n \n     def test_expires_none(self):\n         \"\"\"Test case where expires is None.\"\"\"\n@@ -1038,7 +1040,7 @@ class TestMorselToCookieExpires(unittest.TestCase):\n         morsel = Morsel()\n         morsel['expires'] = None\n         cookie = morsel_to_cookie(morsel)\n-        self.assertEquals(cookie.expires, None)\n+        assert cookie.expires is None\n \n \n class TestMorselToCookieMaxAge(unittest.TestCase):\n@@ -1051,14 +1053,15 @@ class TestMorselToCookieMaxAge(unittest.TestCase):\n         morsel = Morsel()\n         morsel['max-age'] = 60\n         cookie = morsel_to_cookie(morsel)\n-        self.assertTrue(isinstance(cookie.expires, int))\n+        assert isinstance(cookie.expires, int)\n \n     def test_max_age_invalid_str(self):\n         \"\"\"Test case where a invalid max age is passed.\"\"\"\n \n         morsel = Morsel()\n         morsel['max-age'] = 'woops'\n-        self.assertRaises(TypeError, morsel_to_cookie, (morsel))\n+        with pytest.raises(TypeError):\n+            morsel_to_cookie(morsel)\n \n \n if __name__ == '__main__':\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#cac2077c36ca841bdee8b2978677325e0754eaec", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 3 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 3 | Churn Cumulative: 709 | Contributors (this commit): 17 | Commits (past 90d): 10 | Contributors (cumulative): 17 | DMM Complexity: 1.0\n\nDIFF:\n@@ -88,6 +88,9 @@ class HTTPAdapter(BaseAdapter):\n                     self.__attrs__)\n \n     def __setstate__(self, state):\n+        self.proxy_manager = {}\n+        self.config = {}\n+\n         for attr, value in state.items():\n             setattr(self, attr, value)\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#16f9798208f2ef78e3ba91fc03584a522dd258a9", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 5 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 5 | Churn Cumulative: 714 | Contributors (this commit): 18 | Commits (past 90d): 11 | Contributors (cumulative): 18 | DMM Complexity: 1.0\n\nDIFF:\n@@ -97,6 +97,11 @@ class HTTPAdapter(BaseAdapter):\n         self.init_poolmanager(self._pool_connections, self._pool_maxsize,\n                               block=self._pool_block)\n \n+        # Can't handle by adding 'proxy_manager' to self.__attrs__ because\n+        # because self.poolmanager uses a lambda function, which isn't pickleable.\n+        if not hasattr(self, 'proxy_manager'):\n+            self.proxy_manager = {}\n+\n     def init_poolmanager(self, connections, maxsize, block=DEFAULT_POOLBLOCK):\n         \"\"\"Initializes a urllib3 PoolManager. This method should not be called\n         from user code, and is only exposed for use when subclassing the\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#1500632b602be698bfce682daeb01a2d64fc2d39", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 5 | Files Changed: 1 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): -1/0 | Churn Δ: 7 | Churn Cumulative: 721 | Contributors (this commit): 18 | Commits (past 90d): 12 | Contributors (cumulative): 18 | DMM Complexity: 0.0\n\nDIFF:\n@@ -88,6 +88,8 @@ class HTTPAdapter(BaseAdapter):\n                     self.__attrs__)\n \n     def __setstate__(self, state):\n+        # Can't handle by adding 'proxy_manager' to self.__attrs__ because\n+        # because self.poolmanager uses a lambda function, which isn't pickleable.\n         self.proxy_manager = {}\n         self.config = {}\n \n@@ -97,11 +99,6 @@ class HTTPAdapter(BaseAdapter):\n         self.init_poolmanager(self._pool_connections, self._pool_maxsize,\n                               block=self._pool_block)\n \n-        # Can't handle by adding 'proxy_manager' to self.__attrs__ because\n-        # because self.poolmanager uses a lambda function, which isn't pickleable.\n-        if not hasattr(self, 'proxy_manager'):\n-            self.proxy_manager = {}\n-\n     def init_poolmanager(self, connections, maxsize, block=DEFAULT_POOLBLOCK):\n         \"\"\"Initializes a urllib3 PoolManager. This method should not be called\n         from user code, and is only exposed for use when subclassing the\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
