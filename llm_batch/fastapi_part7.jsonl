{"custom_id": "fastapi#f8f91a1dbbb2e6cf14c8ee7887a1ad7e5eea3364", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 0 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 46 | Contributors (this commit): 1 | Commits (past 90d): 4 | Contributors (cumulative): 1 | DMM Complexity: None\n\nDIFF:\n@@ -2,8 +2,6 @@\n from pathlib import Path, PurePath\n from string import digits\n \n-\n-#%%\n directory = Path(\"./docs/tutorial/src\")\n dirs = sorted([Path(f) for f in directory.iterdir()])\n d: PurePath\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#8d29a28f82a2e8558d731b7fd95eacf3a3c9c883", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 35 | Contributors (this commit): 1 | Commits (past 90d): 13 | Contributors (cumulative): 1 | DMM Complexity: None\n\nDIFF:\n@@ -1,6 +1,6 @@\n \"\"\"FastAPI framework, high performance, easy to learn, fast to code, ready for production\"\"\"\n \n-__version__ = \"0.1.10\"\n+__version__ = \"0.1.11\"\n \n from .applications import FastAPI\n from .routing import APIRouter\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#acc15230ea4794c147795bc485f24305b78450e7", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 7 | Lines Deleted: 3 | Files Changed: 2 | Hunks: 3 | Methods Changed: 1 | Complexity Δ (Sum/Max): 2/2 | Churn Δ: 10 | Churn Cumulative: 1416 | Contributors (this commit): 1 | Commits (past 90d): 11 | Contributors (cumulative): 2 | DMM Complexity: 0.0\n\nDIFF:\n@@ -76,7 +76,7 @@ class FastAPI(Starlette):\n                 lambda req: JSONResponse(self.openapi()),\n                 include_in_schema=False,\n             )\n-        if self.docs_url:\n+        if self.openapi_url and self.docs_url:\n             self.add_route(\n                 self.docs_url,\n                 lambda r: get_swagger_ui_html(\n@@ -84,7 +84,7 @@ class FastAPI(Starlette):\n                 ),\n                 include_in_schema=False,\n             )\n-        if self.redoc_url:\n+        if self.openapi_url and self.redoc_url:\n             self.add_route(\n                 self.redoc_url,\n                 lambda r: get_redoc_html(\n\n@@ -7,7 +7,11 @@ client = TestClient(app)\n \n response_missing = {\n     \"detail\": [\n-        {\"loc\": [\"query\"], \"msg\": \"field required\", \"type\": \"value_error.missing\"}\n+        {\n+            \"loc\": [\"query\", \"query\"],\n+            \"msg\": \"field required\",\n+            \"type\": \"value_error.missing\",\n+        }\n     ]\n }\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#58b69493a92ada5897300a96ef934fe593ffe926", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 6 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 6 | Churn Cumulative: 6 | Contributors (this commit): 1 | Commits (past 90d): 1 | Contributors (cumulative): 1 | DMM Complexity: 1.0\n\nDIFF:\n@@ -0,0 +1,6 @@\n+def get_full_name(first_name, last_name):\n+    full_name = first_name.title() + \" \" + last_name.title()\n+    return full_name\n+\n+\n+print(get_full_name(\"john\", \"doe\"))\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#5bd167e0e7497ced568cf0e34c51df4a1f0a391d", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 6 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 6 | Churn Cumulative: 6 | Contributors (this commit): 1 | Commits (past 90d): 1 | Contributors (cumulative): 1 | DMM Complexity: 1.0\n\nDIFF:\n@@ -0,0 +1,6 @@\n+def get_full_name(first_name: str, last_name: str):\n+    full_name = first_name.title() + \" \" + last_name.title()\n+    return full_name\n+\n+\n+print(get_full_name(\"john\", \"doe\"))\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#2a48b10be3ab433af91540f98923efa0f120780d", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 49 | Lines Deleted: 1 | Files Changed: 9 | Hunks: 9 | Methods Changed: 8 | Complexity Δ (Sum/Max): 10/2 | Churn Δ: 50 | Churn Cumulative: 94 | Contributors (this commit): 1 | Commits (past 90d): 11 | Contributors (cumulative): 9 | DMM Complexity: 1.0\n\nDIFF:\n@@ -0,0 +1,3 @@\n+def get_name_with_age(name: str, age: int):\n+    name_with_age = name + \" is this old: \" + age\n+    return name_with_age\n\n@@ -0,0 +1,3 @@\n+def get_name_with_age(name: str, age: int):\n+    name_with_age = name + \" is this old: \" + str(age)\n+    return name_with_age\n\n@@ -0,0 +1,2 @@\n+def get_items(item_a: str, item_b: int, item_c: float, item_d: bool, item_e: bytes):\n+    return item_a, item_b, item_c, item_d, item_d, item_e\n\n@@ -0,0 +1,6 @@\n+from typing import List\n+\n+\n+def process_items(items: List[str]):\n+    for item in items:\n+        print(item)\n\n@@ -0,0 +1,5 @@\n+from typing import Tuple, Set\n+\n+\n+def process_items(items_t: Tuple[int], items_s: Set[bytes]):\n+    return items_t, items_s\n\n@@ -0,0 +1,7 @@\n+from typing import Dict\n+\n+\n+def process_items(prices: Dict[str, float]):\n+    for item_name, item_price in prices.items():\n+        print(item_name)\n+        print(item_price)\n\n@@ -0,0 +1,7 @@\n+class Person:\n+    def __init__(self, name: str):\n+        self.name = name\n+\n+\n+def get_person_name(one_person: Person):\n+        return one_person.name\n\n@@ -0,0 +1,16 @@\n+from datetime import datetime\n+from typing import List\n+from pydantic import BaseModel\n+\n+class User(BaseModel):\n+    id: int\n+    name = 'John Doe'\n+    signup_ts: datetime = None\n+    friends: List[int] = []\n+\n+external_data = {'id': '123', 'signup_ts': '2017-06-01 12:22', 'friends': [1, '2', b'3']}\n+user = User(**external_data)\n+print(user)\n+# > User id=123 name='John Doe' signup_ts=datetime.datetime(2017, 6, 1, 12, 22) friends=[1, 2, 3]\n+print(user.id)\n+# > 123\n\n@@ -1,5 +1,4 @@\n from fastapi import FastAPI\n-\n from sqlalchemy import Boolean, Column, Integer, String, create_engine\n from sqlalchemy.ext.declarative import declarative_base, declared_attr\n from sqlalchemy.orm import scoped_session, sessionmaker\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#659b8ae8af59a935efdf2461fa348f5d294fb69f", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 13 | Lines Deleted: 8 | Files Changed: 3 | Hunks: 9 | Methods Changed: 2 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 21 | Churn Cumulative: 96 | Contributors (this commit): 1 | Commits (past 90d): 6 | Contributors (cumulative): 3 | DMM Complexity: 1.0\n\nDIFF:\n@@ -11,10 +11,12 @@ USERPROFILE_DOC_TYPE = \"userprofile\"\n \n \n def get_bucket():\n-    cluster = Cluster(\"couchbase://couchbasehost:8091\")\n+    cluster = Cluster(\"couchbase://couchbasehost:8091?fetch_mutation_tokens=1&operation_timeout=30&n1ql_timeout=300\")\n     authenticator = PasswordAuthenticator(\"username\", \"password\")\n     cluster.authenticate(authenticator)\n     bucket: Bucket = cluster.open_bucket(\"bucket_name\", lockmode=LOCKMODE_WAIT)\n+    bucket.timeout = 30\n+    bucket.n1ql_timeout = 300\n     return bucket\n \n \n@@ -29,9 +31,6 @@ class UserInDB(User):\n     type: str = USERPROFILE_DOC_TYPE\n     hashed_password: str\n \n-    class Meta:\n-        key: Optional[str] = None\n-\n \n def get_user(bucket: Bucket, username: str):\n     doc_id = f\"userprofile::{username}\"\n@@ -39,7 +38,6 @@ def get_user(bucket: Bucket, username: str):\n     if not result.value:\n         return None\n     user = UserInDB(**result.value)\n-    user.Meta.key = result.key\n     return user\n \n \n\n@@ -1,4 +1,4 @@\n-from typing import Tuple, Set\n+from typing import Set, Tuple\n \n \n def process_items(items_t: Tuple[int], items_s: Set[bytes]):\n\n@@ -1,14 +1,21 @@\n from datetime import datetime\n from typing import List\n+\n from pydantic import BaseModel\n \n+\n class User(BaseModel):\n     id: int\n-    name = 'John Doe'\n+    name = \"John Doe\"\n     signup_ts: datetime = None\n     friends: List[int] = []\n \n-external_data = {'id': '123', 'signup_ts': '2017-06-01 12:22', 'friends': [1, '2', b'3']}\n+\n+external_data = {\n+    \"id\": \"123\",\n+    \"signup_ts\": \"2017-06-01 12:22\",\n+    \"friends\": [1, \"2\", b\"3\"],\n+}\n user = User(**external_data)\n print(user)\n # > User id=123 name='John Doe' signup_ts=datetime.datetime(2017, 6, 1, 12, 22) friends=[1, 2, 3]\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#dcb076b752e7ca156f60043210cee4fb35686822", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 15 | Lines Deleted: 10 | Files Changed: 2 | Hunks: 7 | Methods Changed: 3 | Complexity Δ (Sum/Max): 3/2 | Churn Δ: 25 | Churn Cumulative: 2322 | Contributors (this commit): 1 | Commits (past 90d): 17 | Contributors (cumulative): 2 | DMM Complexity: 0.0\n\nDIFF:\n@@ -3,10 +3,6 @@ import inspect\n from copy import deepcopy\n from typing import Any, Callable, Dict, List, Mapping, Sequence, Tuple, Type\n \n-from fastapi import params\n-from fastapi.dependencies.models import Dependant, SecurityRequirement\n-from fastapi.security.base import SecurityBase\n-from fastapi.utils import get_path_param_names\n from pydantic import BaseConfig, Schema, create_model\n from pydantic.error_wrappers import ErrorWrapper\n from pydantic.errors import MissingError\n@@ -16,6 +12,11 @@ from pydantic.utils import lenient_issubclass\n from starlette.concurrency import run_in_threadpool\n from starlette.requests import Request\n \n+from fastapi import params\n+from fastapi.dependencies.models import Dependant, SecurityRequirement\n+from fastapi.security.base import SecurityBase\n+from fastapi.utils import get_path_param_names\n+\n param_supported_types = (str, int, float, bool)\n \n \n@@ -283,6 +284,8 @@ async def request_body_to_args(\n         embed = getattr(field.schema, \"embed\", None)\n         if len(required_params) == 1 and not embed:\n             received_body = {field.alias: received_body}\n+        elif received_body is None:\n+            received_body = {}\n         for field in required_params:\n             value = received_body.get(field.alias)\n             if value is None:\n\n@@ -3,10 +3,6 @@ import inspect\n import logging\n from typing import Any, Callable, List, Optional, Type\n \n-from fastapi import params\n-from fastapi.dependencies.models import Dependant\n-from fastapi.dependencies.utils import get_body_field, get_dependant, solve_dependencies\n-from fastapi.encoders import jsonable_encoder\n from pydantic import BaseConfig, BaseModel, Schema\n from pydantic.error_wrappers import ErrorWrapper, ValidationError\n from pydantic.fields import Field\n@@ -20,6 +16,11 @@ from starlette.responses import JSONResponse, Response\n from starlette.routing import get_name, request_response\n from starlette.status import HTTP_422_UNPROCESSABLE_ENTITY\n \n+from fastapi import params\n+from fastapi.dependencies.models import Dependant\n+from fastapi.dependencies.utils import get_body_field, get_dependant, solve_dependencies\n+from fastapi.encoders import jsonable_encoder\n+\n \n def serialize_response(*, field: Field = None, response: Response) -> Any:\n     if field:\n@@ -51,7 +52,8 @@ def get_app(\n         try:\n             body = None\n             if body_field:\n-                if is_body_form:\n+                body_bytes = await request.body()\n+                if body_bytes and is_body_form:\n                     raw_body = await request.form()\n                     body = {}\n                     for field, value in raw_body.items():\n@@ -59,7 +61,7 @@ def get_app(\n                             body[field] = await value.read()\n                         else:\n                             body[field] = value\n-                else:\n+                elif body_bytes:\n                     body = await request.json()\n         except Exception as e:\n             logging.error(\"Error getting request body\", e)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#00e2e544c76cc0a05e96c7a526ef175ac5764525", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1297 | Lines Deleted: 507 | Files Changed: 121 | Hunks: 114 | Methods Changed: 135 | Complexity Δ (Sum/Max): 100/66 | Churn Δ: 1804 | Churn Cumulative: 5329 | Contributors (this commit): 2 | Commits (past 90d): 187 | Contributors (cumulative): 122 | DMM Complexity: 1.0\n\nDIFF:\n\n\n\n@@ -8,11 +8,11 @@ async def read_users():\n     return [{\"username\": \"Foo\"}, {\"username\": \"Bar\"}]\n \n \n-@router.get(\"/users/{username}\")\n-async def read_user(username: str):\n-    return {\"username\": username}\n-\n-\n @router.get(\"/users/me\")\n async def read_user_me():\n     return {\"username\": \"fakecurrentuser\"}\n+\n+\n+@router.get(\"/users/{username}\")\n+async def read_user(username: str):\n+    return {\"username\": username}\n\n\n@@ -1,7 +1,7 @@\n from fastapi import FastAPI\n \n-from .tutorial01 import router as users_router\n-from .tutorial02 import router as items_router\n+from .routers.tutorial001 import router as users_router\n+from .routers.tutorial002 import router as items_router\n \n app = FastAPI()\n \n\n@@ -1,6 +1,7 @@\n-from fastapi import FastAPI\n from pydantic import BaseModel\n \n+from fastapi import FastAPI\n+\n \n class Item(BaseModel):\n     name: str\n\n@@ -1,6 +1,7 @@\n-from fastapi import FastAPI\n from pydantic import BaseModel\n \n+from fastapi import FastAPI\n+\n \n class Item(BaseModel):\n     name: str\n\n@@ -1,6 +1,7 @@\n-from fastapi import FastAPI\n from pydantic import BaseModel\n \n+from fastapi import FastAPI\n+\n \n class Item(BaseModel):\n     name: str\n\n@@ -1,6 +1,7 @@\n-from fastapi import FastAPI\n from pydantic import BaseModel\n \n+from fastapi import FastAPI\n+\n \n class Item(BaseModel):\n     name: str\n\n@@ -1,6 +1,7 @@\n-from fastapi import FastAPI, Path\n from pydantic import BaseModel\n \n+from fastapi import FastAPI, Path\n+\n app = FastAPI()\n \n \n@@ -15,7 +16,7 @@ class Item(BaseModel):\n async def update_item(\n     *,\n     item_id: int = Path(..., title=\"The ID of the item to get\", ge=0, le=1000),\n-    q: str,\n+    q: str = None,\n     item: Item = None,\n ):\n     results = {\"item_id\": item_id}\n\n@@ -1,6 +1,7 @@\n-from fastapi import FastAPI\n from pydantic import BaseModel\n \n+from fastapi import FastAPI\n+\n app = FastAPI()\n \n \n\n@@ -1,6 +1,7 @@\n-from fastapi import Body, FastAPI\n from pydantic import BaseModel\n \n+from fastapi import Body, FastAPI\n+\n app = FastAPI()\n \n \n\n@@ -1,6 +1,7 @@\n-from fastapi import Body, FastAPI\n from pydantic import BaseModel\n \n+from fastapi import Body, FastAPI\n+\n app = FastAPI()\n \n \n\n@@ -1,6 +1,7 @@\n-from fastapi import Body, FastAPI\n from pydantic import BaseModel\n \n+from fastapi import Body, FastAPI\n+\n app = FastAPI()\n \n \n\n@@ -1,6 +1,7 @@\n-from fastapi import FastAPI\n from pydantic import BaseModel\n \n+from fastapi import FastAPI\n+\n app = FastAPI()\n \n \n\n@@ -1,8 +1,9 @@\n from typing import List\n \n-from fastapi import FastAPI\n from pydantic import BaseModel\n \n+from fastapi import FastAPI\n+\n app = FastAPI()\n \n \n\n@@ -1,8 +1,9 @@\n from typing import Set\n \n-from fastapi import FastAPI\n from pydantic import BaseModel\n \n+from fastapi import FastAPI\n+\n app = FastAPI()\n \n \n\n@@ -1,8 +1,9 @@\n from typing import Set\n \n-from fastapi import FastAPI\n from pydantic import BaseModel\n \n+from fastapi import FastAPI\n+\n app = FastAPI()\n \n \n\n@@ -1,9 +1,10 @@\n from typing import Set\n \n-from fastapi import FastAPI\n from pydantic import BaseModel\n from pydantic.types import UrlStr\n \n+from fastapi import FastAPI\n+\n app = FastAPI()\n \n \n\n@@ -1,9 +1,10 @@\n from typing import List, Set\n \n-from fastapi import FastAPI\n from pydantic import BaseModel\n from pydantic.types import UrlStr\n \n+from fastapi import FastAPI\n+\n app = FastAPI()\n \n \n\n@@ -1,9 +1,10 @@\n from typing import List, Set\n \n-from fastapi import FastAPI\n from pydantic import BaseModel\n from pydantic.types import UrlStr\n \n+from fastapi import FastAPI\n+\n app = FastAPI()\n \n \n\n@@ -1,9 +1,10 @@\n from typing import List\n \n-from fastapi import FastAPI\n from pydantic import BaseModel\n from pydantic.types import UrlStr\n \n+from fastapi import FastAPI\n+\n app = FastAPI()\n \n \n\n@@ -1,6 +1,7 @@\n-from fastapi import Body, FastAPI\n from pydantic import BaseModel, Schema\n \n+from fastapi import Body, FastAPI\n+\n app = FastAPI()\n \n \n\n@@ -1,6 +1,7 @@\n-from fastapi import Body, FastAPI\n from pydantic import BaseModel\n \n+from fastapi import Body, FastAPI\n+\n app = FastAPI()\n \n \n\n\n@@ -1,6 +1,7 @@\n-from fastapi import FastAPI\n from starlette.responses import UJSONResponse\n \n+from fastapi import FastAPI\n+\n app = FastAPI()\n \n \n\n@@ -1,6 +1,7 @@\n-from fastapi import FastAPI\n from starlette.responses import HTMLResponse\n \n+from fastapi import FastAPI\n+\n app = FastAPI()\n \n \n\n@@ -1,6 +1,7 @@\n-from fastapi import FastAPI\n from starlette.responses import HTMLResponse\n \n+from fastapi import FastAPI\n+\n app = FastAPI()\n \n \n\n@@ -1,6 +1,7 @@\n-from fastapi import FastAPI\n from starlette.responses import HTMLResponse\n \n+from fastapi import FastAPI\n+\n app = FastAPI()\n \n \n\n@@ -1,6 +1,7 @@\n-from fastapi import Depends, FastAPI\n from pydantic import BaseModel\n \n+from fastapi import Depends, FastAPI\n+\n app = FastAPI()\n \n \n\n@@ -1,8 +1,9 @@\n from typing import List\n \n-from fastapi import Cookie, Depends, FastAPI\n from pydantic import BaseModel\n \n+from fastapi import Cookie, Depends, FastAPI\n+\n app = FastAPI()\n \n \n\n@@ -1,9 +1,10 @@\n from random import choice\n from typing import List\n \n-from fastapi import Cookie, Depends, FastAPI\n from pydantic import BaseModel\n \n+from fastapi import Cookie, Depends, FastAPI\n+\n app = FastAPI()\n \n \n\n@@ -1,7 +1,8 @@\n-from fastapi import FastAPI\n from pydantic import BaseModel\n from pydantic.types import EmailStr\n \n+from fastapi import FastAPI\n+\n app = FastAPI()\n \n \n\n@@ -1,7 +1,8 @@\n-from fastapi import FastAPI\n from pydantic import BaseModel\n from pydantic.types import EmailStr\n \n+from fastapi import FastAPI\n+\n app = FastAPI()\n \n \n\n\n\n\n\n\n@@ -1,17 +1,19 @@\n from typing import Optional\n \n-from fastapi import FastAPI\n from pydantic import BaseModel\n \n from couchbase import LOCKMODE_WAIT\n from couchbase.bucket import Bucket\n from couchbase.cluster import Cluster, PasswordAuthenticator\n+from fastapi import FastAPI\n \n USERPROFILE_DOC_TYPE = \"userprofile\"\n \n \n def get_bucket():\n-    cluster = Cluster(\"couchbase://couchbasehost:8091?fetch_mutation_tokens=1&operation_timeout=30&n1ql_timeout=300\")\n+    cluster = Cluster(\n+        \"couchbase://couchbasehost:8091?fetch_mutation_tokens=1&operation_timeout=30&n1ql_timeout=300\"\n+    )\n     authenticator = PasswordAuthenticator(\"username\", \"password\")\n     cluster.authenticate(authenticator)\n     bucket: Bucket = cluster.open_bucket(\"bucket_name\", lockmode=LOCKMODE_WAIT)\n\n\n\n@@ -1,9 +1,10 @@\n from typing import Set\n \n-from fastapi import FastAPI\n from pydantic import BaseModel\n from starlette.status import HTTP_201_CREATED\n \n+from fastapi import FastAPI\n+\n app = FastAPI()\n \n \n\n@@ -1,8 +1,9 @@\n from typing import Set\n \n-from fastapi import FastAPI\n from pydantic import BaseModel\n \n+from fastapi import FastAPI\n+\n app = FastAPI()\n \n \n\n@@ -1,8 +1,9 @@\n from typing import Set\n \n-from fastapi import FastAPI\n from pydantic import BaseModel\n \n+from fastapi import FastAPI\n+\n app = FastAPI()\n \n \n\n@@ -1,8 +1,9 @@\n from typing import Set\n \n-from fastapi import FastAPI\n from pydantic import BaseModel\n \n+from fastapi import FastAPI\n+\n app = FastAPI()\n \n \n\n@@ -1,8 +1,9 @@\n from typing import Set\n \n-from fastapi import FastAPI\n from pydantic import BaseModel\n \n+from fastapi import FastAPI\n+\n app = FastAPI()\n \n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n@@ -1,8 +1,9 @@\n from typing import Set\n \n-from fastapi import FastAPI\n from pydantic import BaseModel\n \n+from fastapi import FastAPI\n+\n app = FastAPI()\n \n \n\n@@ -1,7 +1,8 @@\n-from fastapi import FastAPI\n from pydantic import BaseModel\n from pydantic.types import EmailStr\n \n+from fastapi import FastAPI\n+\n app = FastAPI()\n \n \n\n@@ -1,7 +1,8 @@\n-from fastapi import FastAPI\n from pydantic import BaseModel\n from pydantic.types import EmailStr\n \n+from fastapi import FastAPI\n+\n app = FastAPI()\n \n \n\n@@ -1,8 +1,9 @@\n from typing import Optional\n \n+from pydantic import BaseModel\n+\n from fastapi import Depends, FastAPI, Security\n from fastapi.security import OAuth2PasswordBearer\n-from pydantic import BaseModel\n \n app = FastAPI()\n \n\n@@ -1,9 +1,10 @@\n from typing import Optional\n \n+from pydantic import BaseModel\n+from starlette.exceptions import HTTPException\n+\n from fastapi import Depends, FastAPI, Security\n from fastapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\n-from pydantic import BaseModel\n-from starlette.exceptions import HTTPException\n \n fake_users_db = {\n     \"johndoe\": {\n\n@@ -2,14 +2,15 @@ from datetime import datetime, timedelta\n from typing import Optional\n \n import jwt\n-from fastapi import Depends, FastAPI, Security\n-from fastapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\n from jwt import PyJWTError\n from passlib.context import CryptContext\n from pydantic import BaseModel\n from starlette.exceptions import HTTPException\n from starlette.status import HTTP_403_FORBIDDEN\n \n+from fastapi import Depends, FastAPI, Security\n+from fastapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\n+\n # to get a string like this run:\n # openssl rand -hex 32\n SECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\n\n\n@@ -1,8 +1,5 @@\n from typing import Any, Callable, Dict, List, Optional, Type\n \n-from fastapi import routing\n-from fastapi.openapi.docs import get_redoc_html, get_swagger_ui_html\n-from fastapi.openapi.utils import get_openapi\n from pydantic import BaseModel\n from starlette.applications import Starlette\n from starlette.exceptions import ExceptionMiddleware, HTTPException\n@@ -11,6 +8,10 @@ from starlette.middleware.lifespan import LifespanMiddleware\n from starlette.requests import Request\n from starlette.responses import JSONResponse, Response\n \n+from fastapi import routing\n+from fastapi.openapi.docs import get_redoc_html, get_swagger_ui_html\n+from fastapi.openapi.utils import get_openapi\n+\n \n async def http_exception(request: Request, exc: HTTPException) -> JSONResponse:\n     return JSONResponse({\"detail\": exc.detail}, status_code=exc.status_code)\n\n@@ -1,8 +1,9 @@\n from typing import Callable, List, Sequence\n \n-from fastapi.security.base import SecurityBase\n from pydantic.fields import Field\n \n+from fastapi.security.base import SecurityBase\n+\n param_supported_types = (str, int, float, bool)\n \n \n\n@@ -7,7 +7,7 @@ from pydantic.types import UrlStr\n \n try:\n     from pydantic.types import EmailStr  # type: ignore\n-except ImportError:\n+except ImportError:  # pragma: no cover\n     logging.warning(\n         \"email-validator not installed, email fields will be treated as str.\\n\"\n         + \"To install, run: pip install email-validator\"\n\n@@ -1,5 +1,12 @@\n from typing import Any, Dict, List, Optional, Sequence, Tuple, Type\n \n+from pydantic.fields import Field\n+from pydantic.schema import Schema, field_schema, get_model_name_map\n+from pydantic.utils import lenient_issubclass\n+from starlette.responses import JSONResponse\n+from starlette.routing import BaseRoute\n+from starlette.status import HTTP_422_UNPROCESSABLE_ENTITY\n+\n from fastapi import routing\n from fastapi.dependencies.models import Dependant\n from fastapi.dependencies.utils import get_flat_dependant\n@@ -8,12 +15,6 @@ from fastapi.openapi.constants import METHODS_WITH_BODY, REF_PREFIX\n from fastapi.openapi.models import OpenAPI\n from fastapi.params import Body, Param\n from fastapi.utils import get_flat_models_from_routes, get_model_definitions\n-from pydantic.fields import Field\n-from pydantic.schema import Schema, field_schema, get_model_name_map\n-from pydantic.utils import lenient_issubclass\n-from starlette.responses import JSONResponse\n-from starlette.routing import BaseRoute\n-from starlette.status import HTTP_422_UNPROCESSABLE_ENTITY\n \n validation_error_definition = {\n     \"title\": \"ValidationError\",\n\n@@ -1,6 +1,7 @@\n+from starlette.requests import Request\n+\n from fastapi.openapi.models import APIKey, APIKeyIn\n from fastapi.security.base import SecurityBase\n-from starlette.requests import Request\n \n \n class APIKeyBase(SecurityBase):\n\n@@ -1,9 +1,10 @@\n+from starlette.requests import Request\n+\n from fastapi.openapi.models import (\n     HTTPBase as HTTPBaseModel,\n     HTTPBearer as HTTPBearerModel,\n )\n from fastapi.security.base import SecurityBase\n-from starlette.requests import Request\n \n \n class HTTPBase(SecurityBase):\n\n@@ -1,12 +1,13 @@\n from typing import List, Optional\n \n-from fastapi.openapi.models import OAuth2 as OAuth2Model, OAuthFlows as OAuthFlowsModel\n-from fastapi.security.base import SecurityBase\n from pydantic import BaseModel, Schema\n from starlette.exceptions import HTTPException\n from starlette.requests import Request\n from starlette.status import HTTP_403_FORBIDDEN\n \n+from fastapi.openapi.models import OAuth2 as OAuth2Model, OAuthFlows as OAuthFlowsModel\n+from fastapi.security.base import SecurityBase\n+\n \n class OAuth2PasswordRequestData(BaseModel):\n     grant_type: str = \"password\"\n\n@@ -1,6 +1,7 @@\n+from starlette.requests import Request\n+\n from fastapi.openapi.models import OpenIdConnect as OpenIdConnectModel\n from fastapi.security.base import SecurityBase\n-from starlette.requests import Request\n \n \n class OpenIdConnect(SecurityBase):\n\n@@ -1,13 +1,14 @@\n import re\n from typing import Any, Dict, List, Sequence, Set, Type\n \n-from fastapi import routing\n-from fastapi.openapi.constants import REF_PREFIX\n from pydantic import BaseModel\n from pydantic.fields import Field\n from pydantic.schema import get_flat_models_from_fields, model_process_schema\n from starlette.routing import BaseRoute\n \n+from fastapi import routing\n+from fastapi.openapi.constants import REF_PREFIX\n+\n \n def get_flat_models_from_routes(\n     routes: Sequence[Type[BaseRoute]]\n\n@@ -1,446 +1,15 @@\n-from fastapi import (\n-    Body,\n-    Cookie,\n-    Depends,\n-    FastAPI,\n-    File,\n-    Form,\n-    Header,\n-    Path,\n-    Query,\n-    Security,\n-)\n-from fastapi.security import (\n-    HTTPBasic,\n-    OAuth2,\n-    OAuth2PasswordBearer,\n-    OAuth2PasswordRequestForm,\n-)\n-from pydantic import BaseModel\n-from starlette.responses import HTMLResponse, JSONResponse, PlainTextResponse\n-from starlette.status import HTTP_202_ACCEPTED\n-\n-from .endpoints.a import router as router_a\n-from .endpoints.b import router as router_b\n+from fastapi import FastAPI\n \n app = FastAPI()\n \n \n-app.include_router(router_a)\n-app.include_router(router_b, prefix=\"/b\")\n+@app.api_route(\"/api_route\")\n+def non_operation():\n+    return {\"message\": \"Hello World\"}\n \n \n-@app.get(\"/text\")\n-def get_text():\n-    return \"Hello World\"\n+def non_decorated_route():\n+    return {\"message\": \"Hello World\"}\n \n \n-@app.get(\"/path/{item_id}\")\n-def get_id(item_id):\n-    return item_id\n-\n-\n-@app.get(\"/path/str/{item_id}\")\n-def get_str_id(item_id: str):\n-    return item_id\n-\n-\n-@app.get(\"/path/int/{item_id}\")\n-def get_int_id(item_id: int):\n-    return item_id\n-\n-\n-@app.get(\"/path/float/{item_id}\")\n-def get_float_id(item_id: float):\n-    return item_id\n-\n-\n-@app.get(\"/path/bool/{item_id}\")\n-def get_bool_id(item_id: bool):\n-    return item_id\n-\n-\n-@app.get(\"/path/param/{item_id}\")\n-def get_path_param_id(item_id: str = Path(None)):\n-    return item_id\n-\n-\n-@app.get(\"/path/param-required/{item_id}\")\n-def get_path_param_required_id(item_id: str = Path(...)):\n-    return item_id\n-\n-\n-@app.get(\"/path/param-minlength/{item_id}\")\n-def get_path_param_min_length(item_id: str = Path(..., min_length=3)):\n-    return item_id\n-\n-\n-@app.get(\"/path/param-maxlength/{item_id}\")\n-def get_path_param_max_length(item_id: str = Path(..., max_length=3)):\n-    return item_id\n-\n-\n-@app.get(\"/path/param-min_maxlength/{item_id}\")\n-def get_path_param_min_max_length(item_id: str = Path(..., max_length=3, min_length=2)):\n-    return item_id\n-\n-\n-@app.get(\"/path/param-gt/{item_id}\")\n-def get_path_param_gt(item_id: float = Path(..., gt=3)):\n-    return item_id\n-\n-\n-@app.get(\"/path/param-gt0/{item_id}\")\n-def get_path_param_gt0(item_id: float = Path(..., gt=0)):\n-    return item_id\n-\n-\n-@app.get(\"/path/param-ge/{item_id}\")\n-def get_path_param_ge(item_id: float = Path(..., ge=3)):\n-    return item_id\n-\n-\n-@app.get(\"/path/param-lt/{item_id}\")\n-def get_path_param_lt(item_id: float = Path(..., lt=3)):\n-    return item_id\n-\n-\n-@app.get(\"/path/param-lt0/{item_id}\")\n-def get_path_param_lt0(item_id: float = Path(..., lt=0)):\n-    return item_id\n-\n-\n-@app.get(\"/path/param-le/{item_id}\")\n-def get_path_param_le(item_id: float = Path(..., le=3)):\n-    return item_id\n-\n-\n-@app.get(\"/path/param-lt-gt/{item_id}\")\n-def get_path_param_lt_gt(item_id: float = Path(..., lt=3, gt=1)):\n-    return item_id\n-\n-\n-@app.get(\"/path/param-le-ge/{item_id}\")\n-def get_path_param_le_ge(item_id: float = Path(..., le=3, ge=1)):\n-    return item_id\n-\n-\n-@app.get(\"/path/param-lt-int/{item_id}\")\n-def get_path_param_lt_int(item_id: int = Path(..., lt=3)):\n-    return item_id\n-\n-\n-@app.get(\"/path/param-gt-int/{item_id}\")\n-def get_path_param_gt_int(item_id: int = Path(..., gt=3)):\n-    return item_id\n-\n-\n-@app.get(\"/path/param-le-int/{item_id}\")\n-def get_path_param_le_int(item_id: int = Path(..., le=3)):\n-    return item_id\n-\n-\n-@app.get(\"/path/param-ge-int/{item_id}\")\n-def get_path_param_ge_int(item_id: int = Path(..., ge=3)):\n-    return item_id\n-\n-\n-@app.get(\"/path/param-lt-gt-int/{item_id}\")\n-def get_path_param_lt_gt_int(item_id: int = Path(..., lt=3, gt=1)):\n-    return item_id\n-\n-\n-@app.get(\"/path/param-le-ge-int/{item_id}\")\n-def get_path_param_le_ge_int(item_id: int = Path(..., le=3, ge=1)):\n-    return item_id\n-\n-\n-@app.get(\"/query\")\n-def get_query(query):\n-    if query is None:\n-        return \"foo bar\"\n-    return f\"foo bar {query}\"\n-\n-\n-@app.get(\"/query/optional\")\n-def get_query_optional(query=None):\n-    if query is None:\n-        return \"foo bar\"\n-    return f\"foo bar {query}\"\n-\n-\n-@app.get(\"/query/int\")\n-def get_query_type(query: int):\n-    if query is None:\n-        return \"foo bar\"\n-    return f\"foo bar {query}\"\n-\n-\n-@app.get(\"/query/int/optional\")\n-def get_query_type_optional(query: int = None):\n-    if query is None:\n-        return \"foo bar\"\n-    return f\"foo bar {query}\"\n-\n-\n-@app.get(\"/query/int/default\")\n-def get_query_type_optional(query: int = 10):\n-    return f\"foo bar {query}\"\n-\n-\n-@app.get(\"/query/param\")\n-def get_query_param(query=Query(None)):\n-    if query is None:\n-        return \"foo bar\"\n-    return f\"foo bar {query}\"\n-\n-\n-@app.get(\"/query/param-required\")\n-def get_query_param_required(query=Query(...)):\n-    if query is None:\n-        return \"foo bar\"\n-    return f\"foo bar {query}\"\n-\n-\n-@app.get(\"/query/param-required/int\")\n-def get_query_param_required_type(query: int = Query(...)):\n-    if query is None:\n-        return \"foo bar\"\n-    return f\"foo bar {query}\"\n-\n-\n-@app.get(\"/cookie\")\n-def get_cookie(coo=Cookie(None)):\n-    return coo\n-\n-\n-@app.get(\"/header\")\n-def get_header(head_name=Header(None)):\n-    return head_name\n-\n-\n-@app.get(\"/header_under\")\n-def get_header(head_name=Header(None, convert_underscores=False)):\n-    return head_name\n-\n-\n-@app.get(\"/security\")\n-def get_security(sec=Security(HTTPBasic())):\n-    return sec\n-\n-\n-reusable_oauth2 = OAuth2(\n-    flows={\n-        \"password\": {\n-            \"tokenUrl\": \"/token\",\n-            \"scopes\": {\"read:user\": \"Read a User\", \"write:user\": \"Create a user\"},\n-        }\n-    }\n-)\n-\n-\n-@app.get(\"/security/oauth2\")\n-def get_security_oauth2(sec=Security(reusable_oauth2, scopes=[\"read:user\"])):\n-    return sec\n-\n-\n-reusable_oauth2b = OAuth2PasswordBearer(tokenUrl=\"/token\")\n-\n-\n-class User(BaseModel):\n-    username: str\n-\n-\n-def get_current_user(oauth_header: str = Security(reusable_oauth2b)):\n-    user = User(username=oauth_header)\n-    return user\n-\n-\n-@app.get(\"/security/oauth2b\")\n-def read_current_user(current_user: User = Depends(get_current_user)):\n-    return current_user\n-\n-\n-@app.post(\"/token\")\n-def post_token(request_data: OAuth2PasswordRequestForm = Form(...)):\n-    data = request_data.parse()\n-    access_token = data.username + \":\" + data.password\n-    return {\"access_token\": access_token}\n-\n-\n-class Item(BaseModel):\n-    name: str\n-    price: float\n-    is_offer: bool\n-\n-\n-@app.put(\"/items/{item_id}\")\n-def put_item(item_id: str, item: Item):\n-    return item\n-\n-\n-@app.post(\"/items/\")\n-def post_item(item: Item):\n-    return item\n-\n-\n-@app.post(\"/items-all-params/{item_id}\")\n-def post_items_all_params(\n-    item_id: str = Path(...),\n-    body: Item = Body(...),\n-    query_a: int = Query(None),\n-    query_b=Query(None),\n-    coo: str = Cookie(None),\n-    x_head: int = Header(None),\n-    x_under: str = Header(None, convert_underscores=False),\n-):\n-    return {\n-        \"item_id\": item_id,\n-        \"body\": body,\n-        \"query_a\": query_a,\n-        \"query_b\": query_b,\n-        \"coo\": coo,\n-        \"x_head\": x_head,\n-        \"x_under\": x_under,\n-    }\n-\n-\n-@app.post(\"/items-all-params-defaults/{item_id}\")\n-def post_items_all_params_default(\n-    item_id: str,\n-    body_item_a: Item,\n-    body_item_b: Item,\n-    query_a: int,\n-    query_b: int,\n-    coo: str = Cookie(None),\n-    x_head: int = Header(None),\n-    x_under: str = Header(None, convert_underscores=False),\n-):\n-    return {\n-        \"item_id\": item_id,\n-        \"body_item_a\": body_item_a,\n-        \"body_item_b\": body_item_b,\n-        \"query_a\": query_a,\n-        \"query_b\": query_b,\n-        \"coo\": coo,\n-        \"x_head\": x_head,\n-        \"x_under\": x_under,\n-    }\n-\n-\n-@app.delete(\"/items/{item_id}\")\n-def delete_item(item_id: str):\n-    return item_id\n-\n-\n-@app.options(\"/options/\")\n-def options():\n-    return JSONResponse(headers={\"x-fastapi\": \"fast\"})\n-\n-\n-@app.head(\"/head/\")\n-def head():\n-    return {\"not sent\": \"nope\"}\n-\n-\n-@app.patch(\"/patch/{user_id}\")\n-def patch(user_id: str, increment: float):\n-    return {\"user_id\": user_id, \"total\": 5 + increment}\n-\n-\n-@app.trace(\"/trace/\")\n-def trace():\n-    return PlainTextResponse(media_type=\"message/http\")\n-\n-\n-@app.get(\"/model\", response_model=Item, status_code=HTTP_202_ACCEPTED)\n-def model():\n-    return {\"name\": \"Foo\", \"price\": \"5.0\", \"password\": \"not sent\"}\n-\n-\n-@app.get(\n-    \"/metadata\",\n-    tags=[\"tag1\", \"tag2\"],\n-    summary=\"The summary\",\n-    description=\"The description\",\n-    response_description=\"Response description\",\n-    deprecated=True,\n-    operation_id=\"a_very_long_and_strange_operation_id\",\n-)\n-def get_meta():\n-    return \"Foo\"\n-\n-\n-@app.get(\"/html\", content_type=HTMLResponse)\n-def get_html():\n-    return \"\"\"\n-    <html>\n-    <body>\n-    <h1>\n-    Some text inside\n-    </h1>\n-    </body>\n-    </html>\n-    \"\"\"\n-\n-\n-class FakeDB:\n-    def __init__(self):\n-        self.data = {\n-            \"johndoe\": {\n-                \"username\": \"johndoe\",\n-                \"password\": \"shouldbehashed\",\n-                \"fist_name\": \"John\",\n-                \"last_name\": \"Doe\",\n-            }\n-        }\n-\n-\n-class DBConnectionManager:\n-    def __init__(self):\n-        self.db = FakeDB()\n-\n-    def __call__(self):\n-        return self.db\n-\n-\n-connection_manager = DBConnectionManager()\n-\n-\n-class TokenUserData(BaseModel):\n-    username: str\n-    password: str\n-\n-\n-class UserInDB(BaseModel):\n-    username: str\n-    password: str\n-    fist_name: str\n-    last_name: str\n-\n-\n-def require_token(\n-    token: str = Security(reusable_oauth2, scopes=[\"read:user\", \"write:user\"])\n-):\n-    raw_token = token.replace(\"Bearer \", \"\")\n-    # Never do this plaintext password usage in production\n-    username, password = raw_token.split(\":\")\n-    return TokenUserData(username=username, password=password)\n-\n-\n-def require_user(\n-    db: FakeDB = Depends(connection_manager),\n-    user_data: TokenUserData = Depends(require_token),\n-):\n-    return db.data[user_data.username]\n-\n-\n-class UserOut(BaseModel):\n-    username: str\n-    fist_name: str\n-    last_name: str\n-\n-\n-@app.get(\"/dependency\", response_model=UserOut)\n-def get_dependency(user: UserInDB = Depends(require_user)):\n-    return user\n+app.add_api_route(\"/non_decorated_route\", non_decorated_route)\n\n@@ -0,0 +1,447 @@\n+from pydantic import BaseModel\n+from starlette.responses import HTMLResponse, JSONResponse, PlainTextResponse\n+from starlette.status import HTTP_202_ACCEPTED\n+\n+from fastapi import (\n+    Body,\n+    Cookie,\n+    Depends,\n+    FastAPI,\n+    File,\n+    Form,\n+    Header,\n+    Path,\n+    Query,\n+    Security,\n+)\n+from fastapi.security import (\n+    HTTPBasic,\n+    OAuth2,\n+    OAuth2PasswordBearer,\n+    OAuth2PasswordRequestForm,\n+)\n+\n+from .endpoints.a import router as router_a\n+from .endpoints.b import router as router_b\n+\n+app = FastAPI()\n+\n+\n+app.include_router(router_a)\n+app.include_router(router_b, prefix=\"/b\")\n+\n+\n+@app.get(\"/text\")\n+def get_text():\n+    return \"Hello World\"\n+\n+\n+@app.get(\"/path/{item_id}\")\n+def get_id(item_id):\n+    return item_id\n+\n+\n+@app.get(\"/path/str/{item_id}\")\n+def get_str_id(item_id: str):\n+    return item_id\n+\n+\n+@app.get(\"/path/int/{item_id}\")\n+def get_int_id(item_id: int):\n+    return item_id\n+\n+\n+@app.get(\"/path/float/{item_id}\")\n+def get_float_id(item_id: float):\n+    return item_id\n+\n+\n+@app.get(\"/path/bool/{item_id}\")\n+def get_bool_id(item_id: bool):\n+    return item_id\n+\n+\n+@app.get(\"/path/param/{item_id}\")\n+def get_path_param_id(item_id: str = Path(None)):\n+    return item_id\n+\n+\n+@app.get(\"/path/param-required/{item_id}\")\n+def get_path_param_required_id(item_id: str = Path(...)):\n+    return item_id\n+\n+\n+@app.get(\"/path/param-minlength/{item_id}\")\n+def get_path_param_min_length(item_id: str = Path(..., min_length=3)):\n+    return item_id\n+\n+\n+@app.get(\"/path/param-maxlength/{item_id}\")\n+def get_path_param_max_length(item_id: str = Path(..., max_length=3)):\n+    return item_id\n+\n+\n+@app.get(\"/path/param-min_maxlength/{item_id}\")\n+def get_path_param_min_max_length(item_id: str = Path(..., max_length=3, min_length=2)):\n+    return item_id\n+\n+\n+@app.get(\"/path/param-gt/{item_id}\")\n+def get_path_param_gt(item_id: float = Path(..., gt=3)):\n+    return item_id\n+\n+\n+@app.get(\"/path/param-gt0/{item_id}\")\n+def get_path_param_gt0(item_id: float = Path(..., gt=0)):\n+    return item_id\n+\n+\n+@app.get(\"/path/param-ge/{item_id}\")\n+def get_path_param_ge(item_id: float = Path(..., ge=3)):\n+    return item_id\n+\n+\n+@app.get(\"/path/param-lt/{item_id}\")\n+def get_path_param_lt(item_id: float = Path(..., lt=3)):\n+    return item_id\n+\n+\n+@app.get(\"/path/param-lt0/{item_id}\")\n+def get_path_param_lt0(item_id: float = Path(..., lt=0)):\n+    return item_id\n+\n+\n+@app.get(\"/path/param-le/{item_id}\")\n+def get_path_param_le(item_id: float = Path(..., le=3)):\n+    return item_id\n+\n+\n+@app.get(\"/path/param-lt-gt/{item_id}\")\n+def get_path_param_lt_gt(item_id: float = Path(..., lt=3, gt=1)):\n+    return item_id\n+\n+\n+@app.get(\"/path/param-le-ge/{item_id}\")\n+def get_path_param_le_ge(item_id: float = Path(..., le=3, ge=1)):\n+    return item_id\n+\n+\n+@app.get(\"/path/param-lt-int/{item_id}\")\n+def get_path_param_lt_int(item_id: int = Path(..., lt=3)):\n+    return item_id\n+\n+\n+@app.get(\"/path/param-gt-int/{item_id}\")\n+def get_path_param_gt_int(item_id: int = Path(..., gt=3)):\n+    return item_id\n+\n+\n+@app.get(\"/path/param-le-int/{item_id}\")\n+def get_path_param_le_int(item_id: int = Path(..., le=3)):\n+    return item_id\n+\n+\n+@app.get(\"/path/param-ge-int/{item_id}\")\n+def get_path_param_ge_int(item_id: int = Path(..., ge=3)):\n+    return item_id\n+\n+\n+@app.get(\"/path/param-lt-gt-int/{item_id}\")\n+def get_path_param_lt_gt_int(item_id: int = Path(..., lt=3, gt=1)):\n+    return item_id\n+\n+\n+@app.get(\"/path/param-le-ge-int/{item_id}\")\n+def get_path_param_le_ge_int(item_id: int = Path(..., le=3, ge=1)):\n+    return item_id\n+\n+\n+@app.get(\"/query\")\n+def get_query(query):\n+    if query is None:\n+        return \"foo bar\"\n+    return f\"foo bar {query}\"\n+\n+\n+@app.get(\"/query/optional\")\n+def get_query_optional(query=None):\n+    if query is None:\n+        return \"foo bar\"\n+    return f\"foo bar {query}\"\n+\n+\n+@app.get(\"/query/int\")\n+def get_query_type(query: int):\n+    if query is None:\n+        return \"foo bar\"\n+    return f\"foo bar {query}\"\n+\n+\n+@app.get(\"/query/int/optional\")\n+def get_query_type_optional(query: int = None):\n+    if query is None:\n+        return \"foo bar\"\n+    return f\"foo bar {query}\"\n+\n+\n+@app.get(\"/query/int/default\")\n+def get_query_type_optional(query: int = 10):\n+    return f\"foo bar {query}\"\n+\n+\n+@app.get(\"/query/param\")\n+def get_query_param(query=Query(None)):\n+    if query is None:\n+        return \"foo bar\"\n+    return f\"foo bar {query}\"\n+\n+\n+@app.get(\"/query/param-required\")\n+def get_query_param_required(query=Query(...)):\n+    if query is None:\n+        return \"foo bar\"\n+    return f\"foo bar {query}\"\n+\n+\n+@app.get(\"/query/param-required/int\")\n+def get_query_param_required_type(query: int = Query(...)):\n+    if query is None:\n+        return \"foo bar\"\n+    return f\"foo bar {query}\"\n+\n+\n+@app.get(\"/cookie\")\n+def get_cookie(coo=Cookie(None)):\n+    return coo\n+\n+\n+@app.get(\"/header\")\n+def get_header(head_name=Header(None)):\n+    return head_name\n+\n+\n+@app.get(\"/header_under\")\n+def get_header(head_name=Header(None, convert_underscores=False)):\n+    return head_name\n+\n+\n+@app.get(\"/security\")\n+def get_security(sec=Security(HTTPBasic())):\n+    return sec\n+\n+\n+reusable_oauth2 = OAuth2(\n+    flows={\n+        \"password\": {\n+            \"tokenUrl\": \"/token\",\n+            \"scopes\": {\"read:user\": \"Read a User\", \"write:user\": \"Create a user\"},\n+        }\n+    }\n+)\n+\n+\n+@app.get(\"/security/oauth2\")\n+def get_security_oauth2(sec=Security(reusable_oauth2, scopes=[\"read:user\"])):\n+    return sec\n+\n+\n+reusable_oauth2b = OAuth2PasswordBearer(tokenUrl=\"/token\")\n+\n+\n+class User(BaseModel):\n+    username: str\n+\n+\n+def get_current_user(oauth_header: str = Security(reusable_oauth2b)):\n+    user = User(username=oauth_header)\n+    return user\n+\n+\n+@app.get(\"/security/oauth2b\")\n+def read_current_user(current_user: User = Depends(get_current_user)):\n+    return current_user\n+\n+\n+@app.post(\"/token\")\n+def post_token(request_data: OAuth2PasswordRequestForm = Form(...)):\n+    data = request_data.parse()\n+    access_token = data.username + \":\" + data.password\n+    return {\"access_token\": access_token}\n+\n+\n+class Item(BaseModel):\n+    name: str\n+    price: float\n+    is_offer: bool\n+\n+\n+@app.put(\"/items/{item_id}\")\n+def put_item(item_id: str, item: Item):\n+    return item\n+\n+\n+@app.post(\"/items/\")\n+def post_item(item: Item):\n+    return item\n+\n+\n+@app.post(\"/items-all-params/{item_id}\")\n+def post_items_all_params(\n+    item_id: str = Path(...),\n+    body: Item = Body(...),\n+    query_a: int = Query(None),\n+    query_b=Query(None),\n+    coo: str = Cookie(None),\n+    x_head: int = Header(None),\n+    x_under: str = Header(None, convert_underscores=False),\n+):\n+    return {\n+        \"item_id\": item_id,\n+        \"body\": body,\n+        \"query_a\": query_a,\n+        \"query_b\": query_b,\n+        \"coo\": coo,\n+        \"x_head\": x_head,\n+        \"x_under\": x_under,\n+    }\n+\n+\n+@app.post(\"/items-all-params-defaults/{item_id}\")\n+def post_items_all_params_default(\n+    item_id: str,\n+    body_item_a: Item,\n+    body_item_b: Item,\n+    query_a: int,\n+    query_b: int,\n+    coo: str = Cookie(None),\n+    x_head: int = Header(None),\n+    x_under: str = Header(None, convert_underscores=False),\n+):\n+    return {\n+        \"item_id\": item_id,\n+        \"body_item_a\": body_item_a,\n+        \"body_item_b\": body_item_b,\n+        \"query_a\": query_a,\n+        \"query_b\": query_b,\n+        \"coo\": coo,\n+        \"x_head\": x_head,\n+        \"x_under\": x_under,\n+    }\n+\n+\n+@app.delete(\"/items/{item_id}\")\n+def delete_item(item_id: str):\n+    return item_id\n+\n+\n+@app.options(\"/options/\")\n+def options():\n+    return JSONResponse(headers={\"x-fastapi\": \"fast\"})\n+\n+\n+@app.head(\"/head/\")\n+def head():\n+    return {\"not sent\": \"nope\"}\n+\n+\n+@app.patch(\"/patch/{user_id}\")\n+def patch(user_id: str, increment: float):\n+    return {\"user_id\": user_id, \"total\": 5 + increment}\n+\n+\n+@app.trace(\"/trace/\")\n+def trace():\n+    return PlainTextResponse(media_type=\"message/http\")\n+\n+\n+@app.get(\"/model\", response_model=Item, status_code=HTTP_202_ACCEPTED)\n+def model():\n+    return {\"name\": \"Foo\", \"price\": \"5.0\", \"password\": \"not sent\"}\n+\n+\n+@app.get(\n+    \"/metadata\",\n+    tags=[\"tag1\", \"tag2\"],\n+    summary=\"The summary\",\n+    description=\"The description\",\n+    response_description=\"Response description\",\n+    deprecated=True,\n+    operation_id=\"a_very_long_and_strange_operation_id\",\n+)\n+def get_meta():\n+    return \"Foo\"\n+\n+\n+@app.get(\"/html\", content_type=HTMLResponse)\n+def get_html():\n+    return \"\"\"\n+    <html>\n+    <body>\n+    <h1>\n+    Some text inside\n+    </h1>\n+    </body>\n+    </html>\n+    \"\"\"\n+\n+\n+class FakeDB:\n+    def __init__(self):\n+        self.data = {\n+            \"johndoe\": {\n+                \"username\": \"johndoe\",\n+                \"password\": \"shouldbehashed\",\n+                \"fist_name\": \"John\",\n+                \"last_name\": \"Doe\",\n+            }\n+        }\n+\n+\n+class DBConnectionManager:\n+    def __init__(self):\n+        self.db = FakeDB()\n+\n+    def __call__(self):\n+        return self.db\n+\n+\n+connection_manager = DBConnectionManager()\n+\n+\n+class TokenUserData(BaseModel):\n+    username: str\n+    password: str\n+\n+\n+class UserInDB(BaseModel):\n+    username: str\n+    password: str\n+    fist_name: str\n+    last_name: str\n+\n+\n+def require_token(\n+    token: str = Security(reusable_oauth2, scopes=[\"read:user\", \"write:user\"])\n+):\n+    raw_token = token.replace(\"Bearer \", \"\")\n+    # Never do this plaintext password usage in production\n+    username, password = raw_token.split(\":\")\n+    return TokenUserData(username=username, password=password)\n+\n+\n+def require_user(\n+    db: FakeDB = Depends(connection_manager),\n+    user_data: TokenUserData = Depends(require_token),\n+):\n+    return db.data[user_data.username]\n+\n+\n+class UserOut(BaseModel):\n+    username: str\n+    fist_name: str\n+    last_name: str\n+\n+\n+@app.get(\"/dependency\", response_model=UserOut)\n+def get_dependency(user: UserInDB = Depends(require_user)):\n+    return user\n\n@@ -0,0 +1,63 @@\n+import pytest\n+from starlette.testclient import TestClient\n+\n+from .main import app\n+\n+client = TestClient(app)\n+\n+openapi_schema = {\n+    \"openapi\": \"3.0.2\",\n+    \"info\": {\"title\": \"Fast API\", \"version\": \"0.1.0\"},\n+    \"paths\": {\n+        \"/api_route\": {\n+            \"get\": {\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                    }\n+                },\n+                \"summary\": \"Non Operation Get\",\n+                \"operationId\": \"non_operation_api_route_get\",\n+            }\n+        },\n+        \"/non_decorated_route\": {\n+            \"get\": {\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                    }\n+                },\n+                \"summary\": \"Non Decorated Route Get\",\n+                \"operationId\": \"non_decorated_route_non_decorated_route_get\",\n+            }\n+        },\n+    },\n+}\n+\n+\n+@pytest.mark.parametrize(\n+    \"path,expected_status,expected_response\",\n+    [\n+        (\"/api_route\", 200, {\"message\": \"Hello World\"}),\n+        (\"/nonexistent\", 404, {\"detail\": \"Not Found\"}),\n+        (\"/openapi.json\", 200, openapi_schema),\n+    ],\n+)\n+def test_get_path(path, expected_status, expected_response):\n+    response = client.get(path)\n+    assert response.status_code == expected_status\n+    assert response.json() == expected_response\n+\n+\n+def test_swagger_ui():\n+    response = client.get(\"/docs\")\n+    assert response.status_code == 200\n+    assert \"swagger-ui-dist\" in response.text\n+\n+\n+def test_redoc():\n+    response = client.get(\"/redoc\")\n+    assert response.status_code == 200\n+    assert \"redoc@next\" in response.text\n\n\n\n@@ -0,0 +1,155 @@\n+import pytest\n+from starlette.testclient import TestClient\n+\n+from bigger_applications.app.tutorial003 import app\n+\n+client = TestClient(app)\n+\n+openapi_schema = {\n+    \"openapi\": \"3.0.2\",\n+    \"info\": {\"title\": \"Fast API\", \"version\": \"0.1.0\"},\n+    \"paths\": {\n+        \"/users/\": {\n+            \"get\": {\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                    }\n+                },\n+                \"summary\": \"Read Users Get\",\n+                \"operationId\": \"read_users_users__get\",\n+            }\n+        },\n+        \"/users/{username}\": {\n+            \"get\": {\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                    },\n+                    \"422\": {\n+                        \"description\": \"Validation Error\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\n+                                    \"$ref\": \"#/components/schemas/HTTPValidationError\"\n+                                }\n+                            }\n+                        },\n+                    },\n+                },\n+                \"summary\": \"Read User Get\",\n+                \"operationId\": \"read_user_users__username__get\",\n+                \"parameters\": [\n+                    {\n+                        \"required\": True,\n+                        \"schema\": {\"title\": \"Username\", \"type\": \"string\"},\n+                        \"name\": \"username\",\n+                        \"in\": \"path\",\n+                    }\n+                ],\n+            }\n+        },\n+        \"/users/me\": {\n+            \"get\": {\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                    }\n+                },\n+                \"summary\": \"Read User Me Get\",\n+                \"operationId\": \"read_user_me_users_me_get\",\n+            }\n+        },\n+        \"/items/\": {\n+            \"get\": {\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                    }\n+                },\n+                \"summary\": \"Read Items Get\",\n+                \"operationId\": \"read_items_items__get\",\n+            }\n+        },\n+        \"/items/{item_id}\": {\n+            \"get\": {\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                    },\n+                    \"422\": {\n+                        \"description\": \"Validation Error\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\n+                                    \"$ref\": \"#/components/schemas/HTTPValidationError\"\n+                                }\n+                            }\n+                        },\n+                    },\n+                },\n+                \"summary\": \"Read Item Get\",\n+                \"operationId\": \"read_item_items__item_id__get\",\n+                \"parameters\": [\n+                    {\n+                        \"required\": True,\n+                        \"schema\": {\"title\": \"Item_Id\", \"type\": \"string\"},\n+                        \"name\": \"item_id\",\n+                        \"in\": \"path\",\n+                    }\n+                ],\n+            }\n+        },\n+    },\n+    \"components\": {\n+        \"schemas\": {\n+            \"ValidationError\": {\n+                \"title\": \"ValidationError\",\n+                \"required\": [\"loc\", \"msg\", \"type\"],\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"loc\": {\n+                        \"title\": \"Location\",\n+                        \"type\": \"array\",\n+                        \"items\": {\"type\": \"string\"},\n+                    },\n+                    \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n+                    \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n+                },\n+            },\n+            \"HTTPValidationError\": {\n+                \"title\": \"HTTPValidationError\",\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"detail\": {\n+                        \"title\": \"Detail\",\n+                        \"type\": \"array\",\n+                        \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n+                    }\n+                },\n+            },\n+        }\n+    },\n+}\n+\n+\n+@pytest.mark.parametrize(\n+    \"path,expected_status,expected_response\",\n+    [\n+        (\"/users\", 200, [{\"username\": \"Foo\"}, {\"username\": \"Bar\"}]),\n+        (\"/users/foo\", 200, {\"username\": \"foo\"}),\n+        (\"/users/me\", 200, {\"username\": \"fakecurrentuser\"}),\n+        (\"/items\", 200, [{\"name\": \"Item Foo\"}, {\"name\": \"item Bar\"}]),\n+        (\"/items/bar\", 200, {\"name\": \"Fake Specific Item\", \"item_id\": \"bar\"}),\n+        (\"/openapi.json\", 200, openapi_schema),\n+    ],\n+)\n+def test_get_path(path, expected_status, expected_response):\n+    response = client.get(path)\n+    assert response.status_code == expected_status\n+    assert response.json() == expected_response\n\n\n@@ -0,0 +1,163 @@\n+import pytest\n+from starlette.testclient import TestClient\n+\n+from body.tutorial001 import app\n+\n+client = TestClient(app)\n+\n+openapi_schema = {\n+    \"openapi\": \"3.0.2\",\n+    \"info\": {\"title\": \"Fast API\", \"version\": \"0.1.0\"},\n+    \"paths\": {\n+        \"/items/\": {\n+            \"post\": {\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                    },\n+                    \"422\": {\n+                        \"description\": \"Validation Error\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\n+                                    \"$ref\": \"#/components/schemas/HTTPValidationError\"\n+                                }\n+                            }\n+                        },\n+                    },\n+                },\n+                \"summary\": \"Create Item Post\",\n+                \"operationId\": \"create_item_items__post\",\n+                \"requestBody\": {\n+                    \"content\": {\n+                        \"application/json\": {\n+                            \"schema\": {\"$ref\": \"#/components/schemas/Item\"}\n+                        }\n+                    },\n+                    \"required\": True,\n+                },\n+            }\n+        }\n+    },\n+    \"components\": {\n+        \"schemas\": {\n+            \"Item\": {\n+                \"title\": \"Item\",\n+                \"required\": [\"name\", \"price\"],\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"name\": {\"title\": \"Name\", \"type\": \"string\"},\n+                    \"price\": {\"title\": \"Price\", \"type\": \"number\"},\n+                    \"description\": {\"title\": \"Description\", \"type\": \"string\"},\n+                    \"tax\": {\"title\": \"Tax\", \"type\": \"number\"},\n+                },\n+            },\n+            \"ValidationError\": {\n+                \"title\": \"ValidationError\",\n+                \"required\": [\"loc\", \"msg\", \"type\"],\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"loc\": {\n+                        \"title\": \"Location\",\n+                        \"type\": \"array\",\n+                        \"items\": {\"type\": \"string\"},\n+                    },\n+                    \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n+                    \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n+                },\n+            },\n+            \"HTTPValidationError\": {\n+                \"title\": \"HTTPValidationError\",\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"detail\": {\n+                        \"title\": \"Detail\",\n+                        \"type\": \"array\",\n+                        \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n+                    }\n+                },\n+            },\n+        }\n+    },\n+}\n+\n+\n+def test_openapi_scheme():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200\n+    assert response.json() == openapi_schema\n+\n+\n+price_missing = {\n+    \"detail\": [\n+        {\n+            \"loc\": [\"body\", \"item\", \"price\"],\n+            \"msg\": \"field required\",\n+            \"type\": \"value_error.missing\",\n+        }\n+    ]\n+}\n+\n+price_not_float = {\n+    \"detail\": [\n+        {\n+            \"loc\": [\"body\", \"item\", \"price\"],\n+            \"msg\": \"value is not a valid float\",\n+            \"type\": \"type_error.float\",\n+        }\n+    ]\n+}\n+\n+name_price_missing = {\n+    \"detail\": [\n+        {\n+            \"loc\": [\"body\", \"item\", \"name\"],\n+            \"msg\": \"field required\",\n+            \"type\": \"value_error.missing\",\n+        },\n+        {\n+            \"loc\": [\"body\", \"item\", \"price\"],\n+            \"msg\": \"field required\",\n+            \"type\": \"value_error.missing\",\n+        },\n+    ]\n+}\n+\n+\n+@pytest.mark.parametrize(\n+    \"path,body,expected_status,expected_response\",\n+    [\n+        (\n+            \"/items/\",\n+            {\"name\": \"Foo\", \"price\": 50.5},\n+            200,\n+            {\"name\": \"Foo\", \"price\": 50.5, \"description\": None, \"tax\": None},\n+        ),\n+        (\n+            \"/items/\",\n+            {\"name\": \"Foo\", \"price\": \"50.5\"},\n+            200,\n+            {\"name\": \"Foo\", \"price\": 50.5, \"description\": None, \"tax\": None},\n+        ),\n+        (\n+            \"/items/\",\n+            {\"name\": \"Foo\", \"price\": \"50.5\", \"description\": \"Some Foo\"},\n+            200,\n+            {\"name\": \"Foo\", \"price\": 50.5, \"description\": \"Some Foo\", \"tax\": None},\n+        ),\n+        (\n+            \"/items/\",\n+            {\"name\": \"Foo\", \"price\": \"50.5\", \"description\": \"Some Foo\", \"tax\": 0.3},\n+            200,\n+            {\"name\": \"Foo\", \"price\": 50.5, \"description\": \"Some Foo\", \"tax\": 0.3},\n+        ),\n+        (\"/items/\", {\"name\": \"Foo\"}, 422, price_missing),\n+        (\"/items/\", {\"name\": \"Foo\", \"price\": \"twenty\"}, 422, price_not_float),\n+        (\"/items/\", {}, 422, name_price_missing),\n+    ],\n+)\n+def test_post_body(path, body, expected_status, expected_response):\n+    response = client.post(path, json=body)\n+    assert response.status_code == expected_status\n+    assert response.json() == expected_response\n\n\n@@ -0,0 +1,148 @@\n+import pytest\n+from starlette.testclient import TestClient\n+\n+from body_multiple_params.tutorial001 import app\n+\n+client = TestClient(app)\n+\n+openapi_schema = {\n+    \"openapi\": \"3.0.2\",\n+    \"info\": {\"title\": \"Fast API\", \"version\": \"0.1.0\"},\n+    \"paths\": {\n+        \"/items/{item_id}\": {\n+            \"put\": {\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                    },\n+                    \"422\": {\n+                        \"description\": \"Validation Error\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\n+                                    \"$ref\": \"#/components/schemas/HTTPValidationError\"\n+                                }\n+                            }\n+                        },\n+                    },\n+                },\n+                \"summary\": \"Update Item Put\",\n+                \"operationId\": \"update_item_items__item_id__put\",\n+                \"parameters\": [\n+                    {\n+                        \"required\": True,\n+                        \"schema\": {\n+                            \"title\": \"The ID of the item to get\",\n+                            \"maximum\": 1000.0,\n+                            \"minimum\": 0.0,\n+                            \"type\": \"integer\",\n+                        },\n+                        \"name\": \"item_id\",\n+                        \"in\": \"path\",\n+                    },\n+                    {\n+                        \"required\": False,\n+                        \"schema\": {\"title\": \"Q\", \"type\": \"string\"},\n+                        \"name\": \"q\",\n+                        \"in\": \"query\",\n+                    },\n+                ],\n+                \"requestBody\": {\n+                    \"content\": {\n+                        \"application/json\": {\n+                            \"schema\": {\"$ref\": \"#/components/schemas/Item\"}\n+                        }\n+                    }\n+                },\n+            }\n+        }\n+    },\n+    \"components\": {\n+        \"schemas\": {\n+            \"Item\": {\n+                \"title\": \"Item\",\n+                \"required\": [\"name\", \"price\"],\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"name\": {\"title\": \"Name\", \"type\": \"string\"},\n+                    \"price\": {\"title\": \"Price\", \"type\": \"number\"},\n+                    \"description\": {\"title\": \"Description\", \"type\": \"string\"},\n+                    \"tax\": {\"title\": \"Tax\", \"type\": \"number\"},\n+                },\n+            },\n+            \"ValidationError\": {\n+                \"title\": \"ValidationError\",\n+                \"required\": [\"loc\", \"msg\", \"type\"],\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"loc\": {\n+                        \"title\": \"Location\",\n+                        \"type\": \"array\",\n+                        \"items\": {\"type\": \"string\"},\n+                    },\n+                    \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n+                    \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n+                },\n+            },\n+            \"HTTPValidationError\": {\n+                \"title\": \"HTTPValidationError\",\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"detail\": {\n+                        \"title\": \"Detail\",\n+                        \"type\": \"array\",\n+                        \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n+                    }\n+                },\n+            },\n+        }\n+    },\n+}\n+\n+\n+def test_openapi_scheme():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200\n+    assert response.json() == openapi_schema\n+\n+\n+item_id_not_int = {\n+    \"detail\": [\n+        {\n+            \"loc\": [\"path\", \"item_id\"],\n+            \"msg\": \"value is not a valid integer\",\n+            \"type\": \"type_error.integer\",\n+        }\n+    ]\n+}\n+\n+\n+@pytest.mark.parametrize(\n+    \"path,body,expected_status,expected_response\",\n+    [\n+        (\n+            \"/items/5?q=bar\",\n+            {\"name\": \"Foo\", \"price\": 50.5},\n+            200,\n+            {\n+                \"item_id\": 5,\n+                \"item\": {\n+                    \"name\": \"Foo\",\n+                    \"price\": 50.5,\n+                    \"description\": None,\n+                    \"tax\": None,\n+                },\n+                \"q\": \"bar\",\n+            },\n+        ),\n+        (\"/items/5?q=bar\", None, 200, {\"item_id\": 5, \"q\": \"bar\"}),\n+        (\"/items/5\", None, 200, {\"item_id\": 5}),\n+        (\"/items/foo\", None, 422, item_id_not_int),\n+    ],\n+)\n+def test_post_body(path, body, expected_status, expected_response):\n+    response = client.put(path, json=body)\n+    print(response.text)\n+    assert response.status_code == expected_status\n+    assert response.json() == expected_response\n\n\n@@ -0,0 +1,100 @@\n+import pytest\n+from starlette.testclient import TestClient\n+\n+from dependencies.tutorial001 import app\n+\n+client = TestClient(app)\n+\n+openapi_schema = {\n+    \"openapi\": \"3.0.2\",\n+    \"info\": {\"title\": \"Fast API\", \"version\": \"0.1.0\"},\n+    \"paths\": {\n+        \"/items/\": {\n+            \"get\": {\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                    },\n+                    \"422\": {\n+                        \"description\": \"Validation Error\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\n+                                    \"$ref\": \"#/components/schemas/HTTPValidationError\"\n+                                }\n+                            }\n+                        },\n+                    },\n+                },\n+                \"summary\": \"Read Items Get\",\n+                \"operationId\": \"read_items_items__get\",\n+                \"parameters\": [\n+                    {\n+                        \"required\": False,\n+                        \"schema\": {\"title\": \"Q\", \"type\": \"string\"},\n+                        \"name\": \"q\",\n+                        \"in\": \"query\",\n+                    },\n+                    {\n+                        \"required\": False,\n+                        \"schema\": {\"title\": \"Skip\", \"type\": \"integer\", \"default\": 0},\n+                        \"name\": \"skip\",\n+                        \"in\": \"query\",\n+                    },\n+                    {\n+                        \"required\": False,\n+                        \"schema\": {\"title\": \"Limit\", \"type\": \"integer\", \"default\": 100},\n+                        \"name\": \"limit\",\n+                        \"in\": \"query\",\n+                    },\n+                ],\n+            }\n+        }\n+    },\n+    \"components\": {\n+        \"schemas\": {\n+            \"ValidationError\": {\n+                \"title\": \"ValidationError\",\n+                \"required\": [\"loc\", \"msg\", \"type\"],\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"loc\": {\n+                        \"title\": \"Location\",\n+                        \"type\": \"array\",\n+                        \"items\": {\"type\": \"string\"},\n+                    },\n+                    \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n+                    \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n+                },\n+            },\n+            \"HTTPValidationError\": {\n+                \"title\": \"HTTPValidationError\",\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"detail\": {\n+                        \"title\": \"Detail\",\n+                        \"type\": \"array\",\n+                        \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n+                    }\n+                },\n+            },\n+        }\n+    },\n+}\n+\n+\n+@pytest.mark.parametrize(\n+    \"path,expected_status,expected_response\",\n+    [\n+        (\"/items\", 200, {\"q\": None, \"skip\": 0, \"limit\": 100}),\n+        (\"/items?q=foo\", 200, {\"q\": \"foo\", \"skip\": 0, \"limit\": 100}),\n+        (\"/items?q=foo&skip=5\", 200, {\"q\": \"foo\", \"skip\": 5, \"limit\": 100}),\n+        (\"/items?q=foo&skip=5&limit=30\", 200, {\"q\": \"foo\", \"skip\": 5, \"limit\": 30}),\n+        (\"/openapi.json\", 200, openapi_schema),\n+    ],\n+)\n+def test_get(path, expected_status, expected_response):\n+    response = client.get(path)\n+    assert response.status_code == expected_status\n+    assert response.json() == expected_response\n\n\n@@ -0,0 +1,39 @@\n+import pytest\n+from starlette.testclient import TestClient\n+\n+from first_steps.tutorial001 import app\n+\n+client = TestClient(app)\n+\n+openapi_schema = {\n+    \"openapi\": \"3.0.2\",\n+    \"info\": {\"title\": \"Fast API\", \"version\": \"0.1.0\"},\n+    \"paths\": {\n+        \"/\": {\n+            \"get\": {\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                    }\n+                },\n+                \"summary\": \"Root Get\",\n+                \"operationId\": \"root__get\",\n+            }\n+        }\n+    },\n+}\n+\n+\n+@pytest.mark.parametrize(\n+    \"path,expected_status,expected_response\",\n+    [\n+        (\"/\", 200, {\"message\": \"Hello World\"}),\n+        (\"/nonexistent\", 404, {\"detail\": \"Not Found\"}),\n+        (\"/openapi.json\", 200, openapi_schema),\n+    ],\n+)\n+def test_get_path(path, expected_status, expected_response):\n+    response = client.get(path)\n+    assert response.status_code == expected_status\n+    assert response.json() == expected_response\n\n\n@@ -0,0 +1,57 @@\n+from starlette.testclient import TestClient\n+\n+from security.tutorial001 import app\n+\n+client = TestClient(app)\n+\n+openapi_schema = {\n+    \"openapi\": \"3.0.2\",\n+    \"info\": {\"title\": \"Fast API\", \"version\": \"0.1.0\"},\n+    \"paths\": {\n+        \"/items/\": {\n+            \"get\": {\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                    }\n+                },\n+                \"summary\": \"Read Items Get\",\n+                \"operationId\": \"read_items_items__get\",\n+                \"security\": [{\"OAuth2PasswordBearer\": []}],\n+            }\n+        }\n+    },\n+    \"components\": {\n+        \"securitySchemes\": {\n+            \"OAuth2PasswordBearer\": {\n+                \"type\": \"oauth2\",\n+                \"flows\": {\"password\": {\"scopes\": {}, \"tokenUrl\": \"/token\"}},\n+            }\n+        }\n+    },\n+}\n+\n+\n+def test_openapi_scheme():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200\n+    assert response.json() == openapi_schema\n+\n+\n+def test_no_token():\n+    response = client.get(\"/items\")\n+    assert response.status_code == 403\n+    assert response.json() == {\"detail\": \"Not authenticated\"}\n+\n+\n+def test_token():\n+    response = client.get(\"/items\", headers={\"Authorization\": \"Bearer testtoken\"})\n+    assert response.status_code == 200\n+    assert response.json() == {\"token\": \"testtoken\"}\n+\n+\n+def test_incorrect_token():\n+    response = client.get(\"/items\", headers={\"Authorization\": \"Notexistent testtoken\"})\n+    assert response.status_code == 403\n+    assert response.json() == {\"detail\": \"Not authenticated\"}\n\n\n\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
