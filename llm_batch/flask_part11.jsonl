{"custom_id": "flask#a3c9494f67a0e89d44f459dac9eb9d0bc9b9025b", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 79 | Lines Deleted: 62 | Files Changed: 4 | Hunks: 7 | Methods Changed: 10 | Complexity Δ (Sum/Max): 0/11 | Churn Δ: 141 | Churn Cumulative: 1686 | Contributors (this commit): 2 | Commits (past 90d): 27 | Contributors (cumulative): 7 | DMM Complexity: 1.0\n\nDIFF:\n@@ -18,7 +18,7 @@ from jinja2 import Markup, escape\n from flask.app import Flask, Request, Response\n from flask.config import Config\n from flask.helpers import url_for, jsonify, json_available, flash, send_file, \\\n-    get_flashed_messages, render_template, render_template, render_template_string, \\\n-    get_template_attribute, json\n+    get_flashed_messages, get_template_attribute, json\n from flask.globals import current_app, g, request, session, _request_ctx_stack\n from flask.module import Module\n+from flask.templating import render_template, render_template_string\n\n@@ -14,7 +14,8 @@ from threading import Lock\n from datetime import timedelta, datetime\n from itertools import chain\n \n-from jinja2 import Environment, BaseLoader, FileSystemLoader, TemplateNotFound\n+from jinja2 import Environment\n+\n from werkzeug import ImmutableDict, create_environ\n from werkzeug.routing import Map, Rule\n from werkzeug.exceptions import HTTPException, InternalServerError, NotFound\n@@ -27,45 +28,12 @@ from flask.ctx import _default_template_ctx_processor, _RequestContext\n from flask.globals import _request_ctx_stack, request\n from flask.session import Session, _NullSession\n from flask.module import _ModuleSetupState\n+from flask.templating import _DispatchingJinjaLoader\n \n # a lock used for logger initialization\n _logger_lock = Lock()\n \n \n-class _DispatchingJinjaLoader(BaseLoader):\n-    \"\"\"A loader that looks for templates in the application and all\n-    the module folders.\n-    \"\"\"\n-\n-    def __init__(self, app):\n-        self.app = app\n-\n-    def get_source(self, environment, template):\n-        name = template\n-        loader = None\n-        try:\n-            module, name = template.split('/', 1)\n-            loader = self.app.modules[module].jinja_loader\n-        except (ValueError, KeyError):\n-            pass\n-        if loader is None:\n-            loader = self.app.jinja_loader\n-        try:\n-            return loader.get_source(environment, name)\n-        except TemplateNotFound:\n-            # re-raise the exception with the correct fileame here.\n-            # (the one that includes the prefix)\n-            raise TemplateNotFound(template)\n-\n-    def list_templates(self):\n-        result = self.app.jinja_loader.list_templates()\n-        for name, module in self.app.modules.iteritems():\n-            if module.jinja_loader is not None:\n-                for template in module.jinja_loader.list_templates():\n-                    result.append('%s/%s' % (name, template))\n-        return result\n-\n-\n class Flask(_PackageBoundObject):\n     \"\"\"The flask object implements a WSGI application and acts as the central\n     object.  It is passed the name of the module or package of the\n\n@@ -290,31 +290,6 @@ def send_file(filename_or_fp, mimetype=None, as_attachment=False,\n     return rv\n \n \n-def render_template(template_name, **context):\n-    \"\"\"Renders a template from the template folder with the given\n-    context.\n-\n-    :param template_name: the name of the template to be rendered\n-    :param context: the variables that should be available in the\n-                    context of the template.\n-    \"\"\"\n-    current_app.update_template_context(context)\n-    return current_app.jinja_env.get_template(template_name).render(context)\n-\n-\n-def render_template_string(source, **context):\n-    \"\"\"Renders a template from the given template source string\n-    with the given context.\n-\n-    :param template_name: the sourcecode of the template to be\n-                          rendered\n-    :param context: the variables that should be available in the\n-                    context of the template.\n-    \"\"\"\n-    current_app.update_template_context(context)\n-    return current_app.jinja_env.from_string(source).render(context)\n-\n-\n def _get_package_path(name):\n     \"\"\"Returns the path to a package or cwd if that cannot be found.\"\"\"\n     try:\n\n@@ -0,0 +1,74 @@\n+# -*- coding: utf-8 -*-\n+\"\"\"\n+    flask.templating\n+    ~~~~~~~~~~~~~~~~\n+\n+    Implements the bridge to Jinja2.\n+\n+    :copyright: (c) 2010 by Armin Ronacher.\n+    :license: BSD, see LICENSE for more details.\n+\"\"\"\n+from jinja2 import BaseLoader, FileSystemLoader, TemplateNotFound\n+\n+from flask.globals import _request_ctx_stack\n+\n+\n+class _DispatchingJinjaLoader(BaseLoader):\n+    \"\"\"A loader that looks for templates in the application and all\n+    the module folders.\n+    \"\"\"\n+\n+    def __init__(self, app):\n+        self.app = app\n+\n+    def get_source(self, environment, template):\n+        name = template\n+        loader = None\n+        try:\n+            module, name = template.split('/', 1)\n+            loader = self.app.modules[module].jinja_loader\n+        except (ValueError, KeyError):\n+            pass\n+        if loader is None:\n+            loader = self.app.jinja_loader\n+        try:\n+            return loader.get_source(environment, name)\n+        except TemplateNotFound:\n+            # re-raise the exception with the correct fileame here.\n+            # (the one that includes the prefix)\n+            raise TemplateNotFound(template)\n+\n+    def list_templates(self):\n+        result = self.app.jinja_loader.list_templates()\n+        for name, module in self.app.modules.iteritems():\n+            if module.jinja_loader is not None:\n+                for template in module.jinja_loader.list_templates():\n+                    result.append('%s/%s' % (name, template))\n+        return result\n+\n+\n+def render_template(template_name, **context):\n+    \"\"\"Renders a template from the template folder with the given\n+    context.\n+\n+    :param template_name: the name of the template to be rendered\n+    :param context: the variables that should be available in the\n+                    context of the template.\n+    \"\"\"\n+    ctx = _request_ctx_stack.top\n+    ctx.app.update_template_context(context)\n+    return ctx.app.jinja_env.get_template(template_name).render(context)\n+\n+\n+def render_template_string(source, **context):\n+    \"\"\"Renders a template from the given template source string\n+    with the given context.\n+\n+    :param template_name: the sourcecode of the template to be\n+                          rendered\n+    :param context: the variables that should be available in the\n+                    context of the template.\n+    \"\"\"\n+    ctx = _request_ctx_stack.top\n+    ctx.app.update_template_context(context)\n+    return ctx.app.jinja_env.from_string(source).render(context)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#665fa2a32b5ff2b1c1887a48ed69329110a555f7", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 15 | Lines Deleted: 14 | Files Changed: 3 | Hunks: 5 | Methods Changed: 2 | Complexity Δ (Sum/Max): 0/1 | Churn Δ: 29 | Churn Cumulative: 1215 | Contributors (this commit): 2 | Commits (past 90d): 18 | Contributors (cumulative): 5 | DMM Complexity: None\n\nDIFF:\n@@ -24,11 +24,12 @@ from flask.helpers import _PackageBoundObject, url_for, get_flashed_messages, \\\n     _tojson_filter\n from flask.wrappers import Request, Response\n from flask.config import ConfigAttribute, Config\n-from flask.ctx import _default_template_ctx_processor, _RequestContext\n+from flask.ctx import _RequestContext\n from flask.globals import _request_ctx_stack, request\n from flask.session import Session, _NullSession\n from flask.module import _ModuleSetupState\n-from flask.templating import _DispatchingJinjaLoader\n+from flask.templating import _DispatchingJinjaLoader, \\\n+     _default_template_ctx_processor\n \n # a lock used for logger initialization\n _logger_lock = Lock()\n@@ -831,4 +832,3 @@ class Flask(_PackageBoundObject):\n     def __call__(self, environ, start_response):\n         \"\"\"Shortcut for :attr:`wsgi_app`.\"\"\"\n         return self.wsgi_app(environ, start_response)\n-\n\n@@ -63,14 +63,3 @@ class _RequestContext(object):\n         if not self.request.environ.get('flask._preserve_context') and \\\n            (tb is None or not self.app.debug):\n             self.pop()\n-            \n-def _default_template_ctx_processor():\n-    \"\"\"Default template context processor.  Injects `request`,\n-    `session` and `g`.\n-    \"\"\"\n-    reqctx = _request_ctx_stack.top\n-    return dict(\n-        request=reqctx.request,\n-        session=reqctx.session,\n-        g=reqctx.g\n-    )\n\n@@ -13,6 +13,18 @@ from jinja2 import BaseLoader, FileSystemLoader, TemplateNotFound\n from flask.globals import _request_ctx_stack\n \n \n+def _default_template_ctx_processor():\n+    \"\"\"Default template context processor.  Injects `request`,\n+    `session` and `g`.\n+    \"\"\"\n+    reqctx = _request_ctx_stack.top\n+    return dict(\n+        request=reqctx.request,\n+        session=reqctx.session,\n+        g=reqctx.g\n+    )\n+\n+\n class _DispatchingJinjaLoader(BaseLoader):\n     \"\"\"A loader that looks for templates in the application and all\n     the module folders.\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#d67a36cbdb20bfd9cd9931bceb8e6e3c27e9263f", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 42 | Lines Deleted: 2 | Files Changed: 6 | Hunks: 6 | Methods Changed: 6 | Complexity Δ (Sum/Max): 3/1 | Churn Δ: 44 | Churn Cumulative: 1276 | Contributors (this commit): 6 | Commits (past 90d): 57 | Contributors (cumulative): 12 | DMM Complexity: 1.0\n\nDIFF:\n@@ -12,7 +12,7 @@\n from flask.helpers import _PackageBoundObject\n \n \n-def _register_module(module):\n+def _register_module(module, static_path):\n     \"\"\"Internal helper function that returns a function for recording\n     that registers the `send_static_file` function for the module on\n     the application of necessary.  It also registers the module on\n@@ -99,7 +99,7 @@ class Module(_PackageBoundObject):\n         _PackageBoundObject.__init__(self, import_name)\n         self.name = name\n         self.url_prefix = url_prefix\n-        self._register_events = [_register_module(self)]\n+        self._register_events = [_register_module(self, static_path)]\n \n     def route(self, rule, **options):\n         \"\"\"Like :meth:`Flask.route` but for a module.  The endpoint for the\n\n@@ -630,6 +630,21 @@ class ModuleTestCase(unittest.TestCase):\n         assert rv.status_code == 500\n         assert 'internal server error' == rv.data\n \n+    def test_templates_and_static(self):\n+        from moduleapp import app\n+        c = app.test_client()\n+\n+        rv = c.get('/')\n+        assert rv.data == 'Hello from the Frontend'\n+        rv = c.get('/admin/')\n+        assert rv.data == 'Hello from the Admin'\n+        rv = c.get('/admin/static/test.txt')\n+        assert rv.data.strip() == 'Admin File'\n+\n+        with app.test_request_context():\n+            assert flask.url_for('admin.static', filename='test.txt') \\\n+                == '/admin/static/test.txt'\n+\n \n class SendfileTestCase(unittest.TestCase):\n \n\n@@ -0,0 +1,7 @@\n+from flask import Flask\n+\n+app = Flask(__name__)\n+from moduleapp.apps.admin import admin\n+from moduleapp.apps.frontend import frontend\n+app.register_module(admin)\n+app.register_module(frontend)\n\n\n@@ -0,0 +1,9 @@\n+from flask import Module, render_template\n+\n+\n+admin = Module(__name__, url_prefix='/admin')\n+\n+\n+@admin.route('/')\n+def index():\n+    return render_template('admin/index.html')\n\n@@ -0,0 +1,9 @@\n+from flask import Module, render_template\n+\n+\n+frontend = Module(__name__)\n+\n+\n+@frontend.route('/')\n+def index():\n+    return render_template('frontend/index.html')\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#b551f15b22c1d7d7749901e8d186246fb12038e8", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 4 | Lines Deleted: 0 | Files Changed: 2 | Hunks: 2 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 1055 | Contributors (this commit): 2 | Commits (past 90d): 15 | Contributors (cumulative): 3 | DMM Complexity: None\n\nDIFF:\n@@ -9,6 +9,8 @@\n     :license: BSD, see LICENSE for more details.\n \"\"\"\n \n+from __future__ import with_statement\n+\n import os\n from threading import Lock\n from datetime import timedelta, datetime\n\n@@ -9,6 +9,8 @@\n     :license: BSD, see LICENSE for more details.\n \"\"\"\n \n+from __future__ import with_statement\n+\n import os\n import sys\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#2b00ec4017ee6b930bb805c294a459f112e4bc80", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 4 | Lines Deleted: 4 | Files Changed: 2 | Hunks: 3 | Methods Changed: 2 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 8 | Churn Cumulative: 1514 | Contributors (this commit): 2 | Commits (past 90d): 24 | Contributors (cumulative): 4 | DMM Complexity: None\n\nDIFF:\n@@ -363,9 +363,9 @@ class Flask(_PackageBoundObject):\n \n         .. admonition:: Keep in Mind\n \n-           Flask will supress any server error with a generic error page\n+           Flask will suppress any server error with a generic error page\n            unless it is in debug mode.  As such to enable just the\n-           interactive debugger without the code reloading, you ahve to\n+           interactive debugger without the code reloading, you have to\n            invoke :meth:`run` with ``debug=True`` and ``use_reloader=False``.\n            Setting ``use_debugger`` to `True` without being in debug mode\n            won't catch any exceptions because there won't be any to\n\n@@ -214,8 +214,8 @@ def send_file(filename_or_fp, mimetype=None, as_attachment=False,\n     .. versionadded:: 0.2\n \n     .. versionadded:: 0.5\n-       The `add_etags`, `cache_timeout` and `conditional` parameters were added.\n-       The default behaviour is now to attach etags.\n+       The `add_etags`, `cache_timeout` and `conditional` parameters were\n+       added.  The default behaviour is now to attach etags.\n \n     :param filename_or_fp: the filename of the file to send.  This is\n                            relative to the :attr:`~Flask.root_path` if a\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#9e1111c2fbc2c7670eb489df0262a90417b96019", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 6 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 2 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 8 | Churn Cumulative: 122 | Contributors (this commit): 2 | Commits (past 90d): 7 | Contributors (cumulative): 2 | DMM Complexity: None\n\nDIFF:\n@@ -17,8 +17,12 @@ from jinja2 import Markup, escape\n \n from flask.app import Flask, Request, Response\n from flask.config import Config\n-from flask.helpers import url_for, jsonify, json_available, flash, send_file, \\\n-    get_flashed_messages, get_template_attribute, json\n+from flask.helpers import url_for, jsonify, json_available, flash, \\\n+    send_file, get_flashed_messages, get_template_attribute\n from flask.globals import current_app, g, request, session, _request_ctx_stack\n from flask.module import Module\n from flask.templating import render_template, render_template_string\n+\n+# only import json if it's available\n+if json_available:\n+    from flask.helpers import json\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#80eb6cfffc3f3fe6e448aa0e26ba1566d4c42917", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 21 | Lines Deleted: 21 | Files Changed: 6 | Hunks: 9 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 42 | Churn Cumulative: 1933 | Contributors (this commit): 2 | Commits (past 90d): 46 | Contributors (cumulative): 11 | DMM Complexity: None\n\nDIFF:\n@@ -15,14 +15,14 @@\n from werkzeug import abort, redirect\n from jinja2 import Markup, escape\n \n-from flask.app import Flask, Request, Response\n-from flask.config import Config\n-from flask.helpers import url_for, jsonify, json_available, flash, \\\n+from .app import Flask, Request, Response\n+from .config import Config\n+from .helpers import url_for, jsonify, json_available, flash, \\\n     send_file, get_flashed_messages, get_template_attribute\n-from flask.globals import current_app, g, request, session, _request_ctx_stack\n-from flask.module import Module\n-from flask.templating import render_template, render_template_string\n+from .globals import current_app, g, request, session, _request_ctx_stack\n+from .module import Module\n+from .templating import render_template, render_template_string\n \n # only import json if it's available\n if json_available:\n-    from flask.helpers import json\n+    from .helpers import json\n\n@@ -22,15 +22,15 @@ from werkzeug import ImmutableDict, create_environ\n from werkzeug.routing import Map, Rule\n from werkzeug.exceptions import HTTPException, InternalServerError, NotFound\n \n-from flask.helpers import _PackageBoundObject, url_for, get_flashed_messages, \\\n+from .helpers import _PackageBoundObject, url_for, get_flashed_messages, \\\n     _tojson_filter\n-from flask.wrappers import Request, Response\n-from flask.config import ConfigAttribute, Config\n-from flask.ctx import _RequestContext\n-from flask.globals import _request_ctx_stack, request\n-from flask.session import Session, _NullSession\n-from flask.module import _ModuleSetupState\n-from flask.templating import _DispatchingJinjaLoader, \\\n+from .wrappers import Request, Response\n+from .config import ConfigAttribute, Config\n+from .ctx import _RequestContext\n+from .globals import _request_ctx_stack, request\n+from .session import Session, _NullSession\n+from .module import _ModuleSetupState\n+from .templating import _DispatchingJinjaLoader, \\\n      _default_template_ctx_processor\n \n # a lock used for logger initialization\n\n@@ -11,8 +11,8 @@\n \n from werkzeug.exceptions import HTTPException\n \n-from flask.globals import _request_ctx_stack\n-from flask.session import _NullSession\n+from .globals import _request_ctx_stack\n+from .session import _NullSession\n \n \n class _RequestGlobals(object):\n\n@@ -31,8 +31,8 @@ from werkzeug import Headers, wrap_file, is_resource_modified, cached_property\n \n from jinja2 import FileSystemLoader\n \n-from flask.globals import session, _request_ctx_stack, current_app, request\n-from flask.wrappers import Response\n+from .globals import session, _request_ctx_stack, current_app, request\n+from .wrappers import Response\n \n \n def _assert_have_json():\n\n@@ -10,7 +10,7 @@\n \"\"\"\n from jinja2 import BaseLoader, FileSystemLoader, TemplateNotFound\n \n-from flask.globals import _request_ctx_stack\n+from .globals import _request_ctx_stack\n \n \n def _default_template_ctx_processor():\n\n@@ -12,7 +12,7 @@\n from werkzeug import Request as RequestBase, Response as ResponseBase, \\\n     cached_property\n \n-from helpers import json\n+from .helpers import json\n \n \n class Request(RequestBase):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#51a89bf35ec6231d55f5caa8e12484e801f593fe", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 7 | Lines Deleted: 4 | Files Changed: 3 | Hunks: 6 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 11 | Churn Cumulative: 776 | Contributors (this commit): 2 | Commits (past 90d): 24 | Contributors (cumulative): 6 | DMM Complexity: 0.0\n\nDIFF:\n@@ -19,6 +19,7 @@ from zlib import adler32\n # try to load the best simplejson implementation available.  If JSON\n # is not installed, we add a failing class.\n json_available = True\n+json = None\n try:\n     import simplejson as json\n except ImportError:\n@@ -32,7 +33,6 @@ from werkzeug import Headers, wrap_file, is_resource_modified, cached_property\n from jinja2 import FileSystemLoader\n \n from .globals import session, _request_ctx_stack, current_app, request\n-from .wrappers import Response\n \n \n def _assert_have_json():\n@@ -364,3 +364,7 @@ class _PackageBoundObject(object):\n                          subfolders use forward slashes as separator.\n         \"\"\"\n         return open(os.path.join(self.root_path, resource), 'rb')\n+\n+\n+# circular dependencies between wrappers and helpers\n+from .wrappers import Response\n\n@@ -9,7 +9,7 @@\n     :license: BSD, see LICENSE for more details.\n \"\"\"\n \n-from flask.helpers import _PackageBoundObject\n+from .helpers import _PackageBoundObject\n \n \n def _register_module(module, static_path):\n\n@@ -12,7 +12,7 @@\n from werkzeug import Request as RequestBase, Response as ResponseBase, \\\n     cached_property\n \n-from .helpers import json\n+from .helpers import json, _assert_have_json\n \n \n class Request(RequestBase):\n@@ -52,7 +52,6 @@ class Request(RequestBase):\n         parsed JSON data.\n         \"\"\"\n         if __debug__:\n-            from flask.helpers import _assert_have_json\n             _assert_have_json()\n         if self.mimetype == 'application/json':\n             return json.loads(self.data)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#f1cde5bbfcb7f0466ad35511ffe2e31ea57756d6", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 24 | Lines Deleted: 0 | Files Changed: 2 | Hunks: 2 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 24 | Churn Cumulative: 1299 | Contributors (this commit): 2 | Commits (past 90d): 24 | Contributors (cumulative): 4 | DMM Complexity: None\n\nDIFF:\n@@ -83,6 +83,15 @@ class Flask(_PackageBoundObject):\n         up, that debugging information is lost.  (For example it would only\n         pick up SQL queries in `yourapplicaiton.app` and not\n         `yourapplication.views.frontend`)\n+\n+    .. versionadded:: 0.5\n+       The `static_path` parameter was added.\n+\n+    :param import_name: the name of the application package\n+    :param static_path: can be used to specify a different path for the\n+                        static files on the web.  Defaults to ``/static``.\n+                        This does not affect the folder the files are served\n+                        *from*.\n     \"\"\"\n \n     #: The class that is used for request objects.  See :class:`~flask.Request`\n\n@@ -88,6 +88,21 @@ class Module(_PackageBoundObject):\n \n     For a gentle introduction into modules, checkout the\n     :ref:`working-with-modules` section.\n+\n+    .. versionadded:: 0.5\n+       The `static_path` parameter was added.\n+\n+    :param import_name: the name of the Python package or module\n+                        implementing this :class:`Module`.\n+    :param name: the internal short name for the module.  Unless specified\n+                 the rightmost part of the import name\n+    :param url_prefix: an optional string that is used to prefix all the\n+                       URL rules of this module.  This can also be specified\n+                       when registering the module with the application.\n+    :param static_path: can be used to specify a different path for the\n+                        static files on the web.  Defaults to ``/static``.\n+                        This does not affect the folder the files are served\n+                        *from*.\n     \"\"\"\n \n     def __init__(self, import_name, name=None, url_prefix=None,\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#8945a97a42d6475b1ee9fcb2689dc65dfce9828f", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 22 | Lines Deleted: 1 | Files Changed: 2 | Hunks: 4 | Methods Changed: 2 | Complexity Δ (Sum/Max): 3/3 | Churn Δ: 23 | Churn Cumulative: 1541 | Contributors (this commit): 6 | Commits (past 90d): 61 | Contributors (cumulative): 8 | DMM Complexity: 1.0\n\nDIFF:\n@@ -29,6 +29,7 @@ except ImportError:\n         json_available = False\n \n from werkzeug import Headers, wrap_file, is_resource_modified, cached_property\n+from werkzeug.exceptions import NotFound\n \n from jinja2 import FileSystemLoader\n \n@@ -334,7 +335,7 @@ class _PackageBoundObject(object):\n         .. versionadded:: 0.5\n         \"\"\"\n         filename = posixpath.normpath(filename)\n-        if filename.startswith('../'):\n+        if filename.startswith(('/', '../')):\n             raise NotFound()\n         filename = os.path.join(self.root_path, 'static', filename)\n         if not os.path.isfile(filename):\n\n@@ -20,6 +20,7 @@ from logging import StreamHandler\n from contextlib import contextmanager\n from datetime import datetime\n from werkzeug import parse_date, parse_options_header\n+from werkzeug.exceptions import NotFound\n from cStringIO import StringIO\n \n example_path = os.path.join(os.path.dirname(__file__), '..', 'examples')\n@@ -645,6 +646,25 @@ class ModuleTestCase(unittest.TestCase):\n             assert flask.url_for('admin.static', filename='test.txt') \\\n                 == '/admin/static/test.txt'\n \n+    def test_safe_access(self):\n+        from moduleapp import app\n+\n+        with app.test_request_context():\n+            f = app.view_functions['admin.static']\n+\n+            try:\n+                rv = f('/etc/passwd')\n+            except NotFound:\n+                pass\n+            else:\n+                assert 0, 'expected exception'\n+            try:\n+                rv = f('../__init__.py')\n+            except NotFound:\n+                pass\n+            else:\n+                assert 0, 'expected exception'\n+\n \n class SendfileTestCase(unittest.TestCase):\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#b7109865a352e6bbee55247731136a46e1bab04d", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 5 | Files Changed: 1 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 6 | Churn Cumulative: 487 | Contributors (this commit): 2 | Commits (past 90d): 14 | Contributors (cumulative): 2 | DMM Complexity: None\n\nDIFF:\n@@ -268,7 +268,7 @@ def send_file(filename_or_fp, mimetype=None, as_attachment=False,\n             file = open(filename, 'rb')\n         data = wrap_file(request.environ, file)\n \n-    rv = Response(data, mimetype=mimetype, headers=headers,\n+    rv = current_app.response_class(data, mimetype=mimetype, headers=headers,\n                                     direct_passthrough=True)\n \n     rv.cache_control.public = True\n@@ -365,7 +365,3 @@ class _PackageBoundObject(object):\n                          subfolders use forward slashes as separator.\n         \"\"\"\n         return open(os.path.join(self.root_path, resource), 'rb')\n-\n-\n-# circular dependencies between wrappers and helpers\n-from .wrappers import Response\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#ac13deff401069c3854acca10c926119c6e1cbe0", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 35 | Lines Deleted: 10 | Files Changed: 5 | Hunks: 6 | Methods Changed: 6 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 45 | Churn Cumulative: 3027 | Contributors (this commit): 6 | Commits (past 90d): 99 | Contributors (cumulative): 14 | DMM Complexity: 1.0\n\nDIFF:\n@@ -18,7 +18,8 @@ from jinja2 import Markup, escape\n from .app import Flask, Request, Response\n from .config import Config\n from .helpers import url_for, jsonify, json_available, flash, \\\n-    send_file, get_flashed_messages, get_template_attribute\n+    send_file, send_from_directory, get_flashed_messages, \\\n+    get_template_attribute\n from .globals import current_app, g, request, session, _request_ctx_stack\n from .module import Module\n from .templating import render_template, render_template_string\n\n@@ -273,7 +273,7 @@ class Flask(_PackageBoundObject):\n \n         # if there is a static folder, register it for the application.\n         if self.has_static_folder:\n-            self.add_url_rule(self.static_path + '/<filename>',\n+            self.add_url_rule(self.static_path + '/<path:filename>',\n                               endpoint='static',\n                               view_func=self.send_static_file)\n \n\n@@ -291,6 +291,33 @@ def send_file(filename_or_fp, mimetype=None, as_attachment=False,\n     return rv\n \n \n+def send_from_directory(directory, filename, **options):\n+    \"\"\"Send a file from a given directory with :func:`send_file`.  This\n+    is a secure way to quickly expose static files from an upload folder\n+    or something similar.\n+\n+    Example usage::\n+\n+        @app.route('/uploads/<path:filename>')\n+        def download_file(filename):\n+            return send_from_directory(app.config['UPLOAD_FOLDER'],\n+                                       filename, as_attachment=True)\n+\n+    :param directory: the directory where all the files are stored.\n+    :param filename: the filename relative to that directory to\n+                     download.\n+    :param options: optional keyword arguments that are directly\n+                    forwarded to :func:`send_file`.\n+    \"\"\"\n+    filename = posixpath.normpath(filename)\n+    if filename.startswith(('/', '../')):\n+        raise NotFound()\n+    filename = os.path.join(directory, filename)\n+    if not os.path.isfile(filename):\n+        raise NotFound()\n+    return send_file(filename, conditional=True, **options)\n+\n+\n def _get_package_path(name):\n     \"\"\"Returns the path to a package or cwd if that cannot be found.\"\"\"\n     try:\n@@ -334,13 +361,8 @@ class _PackageBoundObject(object):\n \n         .. versionadded:: 0.5\n         \"\"\"\n-        filename = posixpath.normpath(filename)\n-        if filename.startswith(('/', '../')):\n-            raise NotFound()\n-        filename = os.path.join(self.root_path, 'static', filename)\n-        if not os.path.isfile(filename):\n-            raise NotFound()\n-        return send_file(filename, conditional=True)\n+        return send_from_directory(os.path.join(self.root_path, 'static'),\n+                                   filename)\n \n     def open_resource(self, resource):\n         \"\"\"Opens a resource from the application's resource folder.  To see\n\n@@ -29,7 +29,7 @@ def _register_module(module, static_path):\n             path = state.app.static_path\n         if state.url_prefix:\n             path = state.url_prefix + path\n-        state.app.add_url_rule(path + '/<filename>',\n+        state.app.add_url_rule(path + '/<path:filename>',\n                                '%s.static' % module.name,\n                                view_func=module.send_static_file)\n     return _register\n\n@@ -641,6 +641,8 @@ class ModuleTestCase(unittest.TestCase):\n         assert rv.data == 'Hello from the Admin'\n         rv = c.get('/admin/static/test.txt')\n         assert rv.data.strip() == 'Admin File'\n+        rv = c.get('/admin/static/css/test.css')\n+        assert rv.data.strip() == '/* nested file */'\n \n         with app.test_request_context():\n             assert flask.url_for('admin.static', filename='test.txt') \\\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#c34b03e9a677e467ea420d4286d4350ed429a4b8", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 9 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 9 | Churn Cumulative: 532 | Contributors (this commit): 2 | Commits (past 90d): 16 | Contributors (cumulative): 2 | DMM Complexity: None\n\nDIFF:\n@@ -303,6 +303,15 @@ def send_from_directory(directory, filename, **options):\n             return send_from_directory(app.config['UPLOAD_FOLDER'],\n                                        filename, as_attachment=True)\n \n+    .. admonition:: Sending files and Performance\n+\n+       It is strongly recommended to activate either `X-Sendfile` support in\n+       your webserver or (if no authentication happens) to tell the webserver\n+       to serve files for the given path on its own without calling into the\n+       web application for improved performance.\n+\n+    .. versionadded:: 0.5\n+\n     :param directory: the directory where all the files are stored.\n     :param filename: the filename relative to that directory to\n                      download.\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#df3f8940c30447f28f2ddf2a5f764cf543755f0d", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 44 | Lines Deleted: 23 | Files Changed: 4 | Hunks: 6 | Methods Changed: 11 | Complexity Δ (Sum/Max): 0/6 | Churn Δ: 67 | Churn Cumulative: 1463 | Contributors (this commit): 2 | Commits (past 90d): 35 | Contributors (cumulative): 7 | DMM Complexity: 0.0\n\nDIFF:\n@@ -18,7 +18,7 @@ from itertools import chain\n \n from jinja2 import Environment\n \n-from werkzeug import ImmutableDict, create_environ\n+from werkzeug import ImmutableDict\n from werkzeug.routing import Map, Rule\n from werkzeug.exceptions import HTTPException, InternalServerError, NotFound\n \n@@ -409,27 +409,7 @@ class Flask(_PackageBoundObject):\n         .. versionchanged:: 0.4\n            added support for `with` block usage for the client.\n         \"\"\"\n-        from werkzeug import Client\n-        class FlaskClient(Client):\n-            preserve_context = context_preserved = False\n-            def open(self, *args, **kwargs):\n-                if self.context_preserved:\n-                    _request_ctx_stack.pop()\n-                    self.context_preserved = False\n-                kwargs.setdefault('environ_overrides', {}) \\\n-                    ['flask._preserve_context'] = self.preserve_context\n-                old = _request_ctx_stack.top\n-                try:\n-                    return Client.open(self, *args, **kwargs)\n-                finally:\n-                    self.context_preserved = _request_ctx_stack.top is not old\n-            def __enter__(self):\n-                self.preserve_context = True\n-                return self\n-            def __exit__(self, exc_type, exc_value, tb):\n-                self.preserve_context = False\n-                if self.context_preserved:\n-                    _request_ctx_stack.pop()\n+        from flask.testing import FlaskClient\n         return FlaskClient(self, self.response_class, use_cookies=True)\n \n     def open_session(self, request):\n@@ -838,6 +818,7 @@ class Flask(_PackageBoundObject):\n         :func:`werkzeug.create_environ` for more information, this\n         function accepts the same arguments).\n         \"\"\"\n+        from werkzeug import create_environ\n         return self.request_context(create_environ(*args, **kwargs))\n \n     def __call__(self, environ, start_response):\n\n@@ -60,6 +60,7 @@ class _RequestContext(object):\n         # exception happened.  This will allow the debugger to still\n         # access the request object in the interactive shell.  Furthermore\n         # the context can be force kept alive for the test client.\n+        # See flask.testing for how this works.\n         if not self.request.environ.get('flask._preserve_context') and \\\n            (tb is None or not self.app.debug):\n             self.pop()\n\n@@ -30,7 +30,7 @@ def _register_module(module, static_path):\n         if state.url_prefix:\n             path = state.url_prefix + path\n         state.app.add_url_rule(path + '/<path:filename>',\n-                               '%s.static' % module.name,\n+                               endpoint='%s.static' % module.name,\n                                view_func=module.send_static_file)\n     return _register\n \n\n@@ -0,0 +1,39 @@\n+# -*- coding: utf-8 -*-\n+\"\"\"\n+    flask.testing\n+    ~~~~~~~~~~~~~\n+\n+    Implements test support helpers.  This module is lazily imported\n+    and usually not used in production environments.\n+\n+    :copyright: (c) 2010 by Armin Ronacher.\n+    :license: BSD, see LICENSE for more details.\n+\"\"\"\n+from werkzeug import Client\n+from flask import _request_ctx_stack\n+\n+\n+class FlaskClient(Client):\n+\n+    preserve_context = context_preserved = False\n+\n+    def open(self, *args, **kwargs):\n+        if self.context_preserved:\n+            _request_ctx_stack.pop()\n+            self.context_preserved = False\n+        kwargs.setdefault('environ_overrides', {}) \\\n+            ['flask._preserve_context'] = self.preserve_context\n+        old = _request_ctx_stack.top\n+        try:\n+            return Client.open(self, *args, **kwargs)\n+        finally:\n+            self.context_preserved = _request_ctx_stack.top is not old\n+\n+    def __enter__(self):\n+        self.preserve_context = True\n+        return self\n+\n+    def __exit__(self, exc_type, exc_value, tb):\n+        self.preserve_context = False\n+        if self.context_preserved:\n+            _request_ctx_stack.pop()\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#e5d82020384ae527c36424b52612bbe625db9268", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 5 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 5 | Churn Cumulative: 44 | Contributors (this commit): 1 | Commits (past 90d): 2 | Contributors (cumulative): 1 | DMM Complexity: None\n\nDIFF:\n@@ -14,6 +14,11 @@ from flask import _request_ctx_stack\n \n \n class FlaskClient(Client):\n+    \"\"\"Works like a regular Werkzeug test client but has some\n+    knowledge about how Flask works to defer the cleanup of the\n+    request context stack to the end of a with body when used\n+    in a with statement.\n+    \"\"\"\n \n     preserve_context = context_preserved = False\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#77e2fbf249031a7adb7e745f15ad5645027b5994", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 46 | Lines Deleted: 16 | Files Changed: 3 | Hunks: 3 | Methods Changed: 6 | Complexity Δ (Sum/Max): 1/5 | Churn Δ: 62 | Churn Cumulative: 1204 | Contributors (this commit): 2 | Commits (past 90d): 23 | Contributors (cumulative): 4 | DMM Complexity: 1.0\n\nDIFF:\n@@ -300,22 +300,9 @@ class Flask(_PackageBoundObject):\n         with _logger_lock:\n             if self._logger and self._logger.name == self.logger_name:\n                 return self._logger\n-            from logging import getLogger, StreamHandler, Formatter, \\\n-                                Logger,  DEBUG\n-            class DebugLogger(Logger):\n-                def getEffectiveLevel(x):\n-                    return DEBUG if self.debug else Logger.getEffectiveLevel(x)\n-            class DebugHandler(StreamHandler):\n-                def emit(x, record):\n-                    StreamHandler.emit(x, record) if self.debug else None\n-            handler = DebugHandler()\n-            handler.setLevel(DEBUG)\n-            handler.setFormatter(Formatter(self.debug_log_format))\n-            logger = getLogger(self.logger_name)\n-            logger.__class__ = DebugLogger\n-            logger.addHandler(handler)\n-            self._logger = logger\n-            return logger\n+            from flask.logging import create_logger\n+            self._logger = rv = create_logger(self)\n+            return rv\n \n     def create_jinja_environment(self):\n         \"\"\"Creates the Jinja2 environment based on :attr:`jinja_options`\n\n@@ -0,0 +1,42 @@\n+# -*- coding: utf-8 -*-\n+\"\"\"\n+    flask.logging\n+    ~~~~~~~~~~~~~\n+\n+    Implements the logging support for Flask.\n+\n+    :copyright: (c) 2010 by Armin Ronacher.\n+    :license: BSD, see LICENSE for more details.\n+\"\"\"\n+\n+from __future__ import absolute_import\n+\n+from logging import getLogger, StreamHandler, Formatter, Logger,  DEBUG\n+\n+\n+def create_logger(app):\n+    \"\"\"Creates a logger for the given application.  This logger works\n+    similar to a regular Python logger but changes the effective logging\n+    level based on the application's debug flag.  Furthermore this\n+    function also removes all attached handlers in case there was a\n+    logger with the log name before.\n+    \"\"\"\n+\n+    class DebugLogger(Logger):\n+        def getEffectiveLevel(x):\n+            return DEBUG if app.debug else Logger.getEffectiveLevel(x)\n+\n+    class DebugHandler(StreamHandler):\n+        def emit(x, record):\n+            StreamHandler.emit(x, record) if app.debug else None\n+\n+    handler = DebugHandler()\n+    handler.setLevel(DEBUG)\n+    handler.setFormatter(Formatter(app.debug_log_format))\n+    logger = getLogger(app.logger_name)\n+    # just in case that was not a new logger, get rid of all the handlers\n+    # already attached to it.\n+    del logger.handlers[:]\n+    logger.__class__ = DebugLogger\n+    logger.addHandler(handler)\n+    return logger\n\n@@ -9,6 +9,7 @@\n     :copyright: (c) 2010 by Armin Ronacher.\n     :license: BSD, see LICENSE for more details.\n \"\"\"\n+\n from werkzeug import Client\n from flask import _request_ctx_stack\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#da514b398429653dbd368c6da48c9863d3c2632f", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 19 | Lines Deleted: 2 | Files Changed: 2 | Hunks: 4 | Methods Changed: 3 | Complexity Δ (Sum/Max): 3/2 | Churn Δ: 21 | Churn Cumulative: 2200 | Contributors (this commit): 6 | Commits (past 90d): 70 | Contributors (cumulative): 8 | DMM Complexity: 1.0\n\nDIFF:\n@@ -420,11 +420,14 @@ class Flask(_PackageBoundObject):\n                         object)\n         :param response: an instance of :attr:`response_class`\n         \"\"\"\n-        expires = None\n+        expires = domain = None\n         if session.permanent:\n             expires = datetime.utcnow() + self.permanent_session_lifetime\n+        if self.config['SERVER_NAME'] is not None:\n+            domain = '.' + self.config['SERVER_NAME']\n         session.save_cookie(response, self.session_cookie_name,\n-                            expires=expires, httponly=True)\n+                            expires=expires, httponly=True,\n+                            domain=domain)\n \n     def register_module(self, module, **options):\n         \"\"\"Registers a module with this application.  The keyword argument\n\n@@ -172,6 +172,20 @@ class BasicFunctionalityTestCase(unittest.TestCase):\n         assert c.post('/set', data={'value': '42'}).data == 'value set'\n         assert c.get('/get').data == '42'\n \n+    def test_session_using_server_name(self):\n+        app = flask.Flask(__name__)\n+        app.config.update(\n+            SECRET_KEY='foo',\n+            SERVER_NAME='example.com'\n+        )\n+        @app.route('/')\n+        def index():\n+            flask.session['testing'] = 42\n+            return 'Hello World'\n+        rv = app.test_client().get('/', 'http://example.com/')\n+        assert 'domain=.example.com' in rv.headers['set-cookie'].lower()\n+        assert 'httponly' in rv.headers['set-cookie'].lower()\n+\n     def test_missing_session(self):\n         app = flask.Flask(__name__)\n         def expect_exception(f, *args, **kwargs):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#77743a5f15ddbc7d826abd4f189217bef88991b6", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 3 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 236 | Contributors (this commit): 2 | Commits (past 90d): 11 | Contributors (cumulative): 2 | DMM Complexity: None\n\nDIFF:\n@@ -90,7 +90,9 @@ class Module(_PackageBoundObject):\n     :ref:`working-with-modules` section.\n \n     .. versionadded:: 0.5\n-       The `static_path` parameter was added.\n+       The `static_path` parameter was added and it's now possible for\n+       modules to refer to their own templates and static files.  See\n+       :ref:`modules-and-resources` for more information.\n \n     :param import_name: the name of the Python package or module\n                         implementing this :class:`Module`.\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#3f7ab1797730b8d07497744878d109baa9b235a5", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 115 | Contributors (this commit): 2 | Commits (past 90d): 14 | Contributors (cumulative): 2 | DMM Complexity: None\n\nDIFF:\n@@ -50,7 +50,7 @@ def run_tests():\n \n setup(\n     name='Flask',\n-    version='0.5',\n+    version='0.6',\n     url='http://github.com/mitsuhiko/flask/',\n     license='BSD',\n     author='Armin Ronacher',\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#98ea6579c80fc7754eef433e3d6a0f232b8be75a", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 117 | Contributors (this commit): 2 | Commits (past 90d): 15 | Contributors (cumulative): 2 | DMM Complexity: None\n\nDIFF:\n@@ -50,7 +50,7 @@ def run_tests():\n \n setup(\n     name='Flask',\n-    version='0.5',\n+    version='0.5.1',\n     url='http://github.com/mitsuhiko/flask/',\n     license='BSD',\n     author='Armin Ronacher',\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#0a93c552cc3318396e44c6ab1282190898ce0012", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 19 | Lines Deleted: 5 | Files Changed: 2 | Hunks: 7 | Methods Changed: 2 | Complexity Δ (Sum/Max): 2/1 | Churn Δ: 24 | Churn Cumulative: 1188 | Contributors (this commit): 6 | Commits (past 90d): 55 | Contributors (cumulative): 7 | DMM Complexity: 1.0\n\nDIFF:\n@@ -34,19 +34,21 @@ class _DispatchingJinjaLoader(BaseLoader):\n         self.app = app\n \n     def get_source(self, environment, template):\n-        name = template\n-        loader = None\n         try:\n             module, name = template.split('/', 1)\n             loader = self.app.modules[module].jinja_loader\n-        except (ValueError, KeyError):\n-            pass\n             if loader is None:\n+                raise ValueError()\n+        except (ValueError, KeyError):\n             loader = self.app.jinja_loader\n+            if loader is not None:\n+                return loader.get_source(environment, template)\n+        else:\n             try:\n                 return loader.get_source(environment, name)\n             except TemplateNotFound:\n-            # re-raise the exception with the correct fileame here.\n+                pass\n+        # raise the exception with the correct fileame here.\n         # (the one that includes the prefix)\n         raise TemplateNotFound(template)\n \n\n@@ -21,6 +21,7 @@ from contextlib import contextmanager\n from datetime import datetime\n from werkzeug import parse_date, parse_options_header\n from werkzeug.exceptions import NotFound\n+from jinja2 import TemplateNotFound\n from cStringIO import StringIO\n \n example_path = os.path.join(os.path.dirname(__file__), '..', 'examples')\n@@ -662,6 +663,17 @@ class ModuleTestCase(unittest.TestCase):\n             assert flask.url_for('admin.static', filename='test.txt') \\\n                 == '/admin/static/test.txt'\n \n+        with app.test_request_context():\n+            try:\n+                flask.render_template('missing.html')\n+            except TemplateNotFound, e:\n+                assert e.name == 'missing.html'\n+            else:\n+                assert 0, 'expected exception'\n+\n+        with flask.Flask(__name__).test_request_context():\n+            assert flask.render_template('nested/nested.txt') == 'I\\'m nested'\n+\n     def test_safe_access(self):\n         from moduleapp import app\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
