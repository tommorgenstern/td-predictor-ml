{"custom_id": "requests#f7596c75dce4e87ab83bdf74e8f120a4b1a5ff03", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 227 | Lines Deleted: 29 | Files Changed: 3 | Hunks: 14 | Methods Changed: 34 | Complexity Δ (Sum/Max): 23/22 | Churn Δ: 256 | Churn Cumulative: 6654 | Contributors (this commit): 75 | Commits (past 90d): 34 | Contributors (cumulative): 96 | DMM Complexity: 1.0\n\nDIFF:\n@@ -9,6 +9,7 @@ Data structures that power Requests.\n \"\"\"\n \n import os\n+import collections\n from itertools import islice\n \n \n@@ -33,43 +34,79 @@ class IteratorProxy(object):\n         return \"\".join(islice(self.i, None, n))\n \n \n-class CaseInsensitiveDict(dict):\n-    \"\"\"Case-insensitive Dictionary\n+class CaseInsensitiveDict(collections.MutableMapping):\n+    \"\"\"\n+    A case-insensitive ``dict``-like object.\n+\n+    Implements all methods and operations of\n+    ``collections.MutableMapping`` as well as dict's ``copy``. Also\n+    provides ``lower_items``.\n+\n+    All keys are expected to be strings. The structure remembers the\n+    case of the last key to be set, and ``iter(instance)``,\n+    ``keys()``, ``items()``, ``iterkeys()``, and ``iteritems()``\n+    will contain case-sensitive keys. However, querying and contains\n+    testing is case insensitive:\n+\n+        cid = CaseInsensitiveDict()\n+        cid['Accept'] = 'application/json'\n+        cid['aCCEPT'] == 'application/json'  # True\n+        list(cid) == ['Accept']  # True\n \n     For example, ``headers['content-encoding']`` will return the\n-    value of a ``'Content-Encoding'`` response header.\"\"\"\n+    value of a ``'Content-Encoding'`` response header, regardless\n+    of how the header name was originally stored.\n \n-    @property\n-    def lower_keys(self):\n-        if not hasattr(self, '_lower_keys') or not self._lower_keys:\n-            self._lower_keys = dict((k.lower(), k) for k in list(self.keys()))\n-        return self._lower_keys\n+    If the constructor, ``.update``, or equality comparison\n+    operations are given keys that have equal ``.lower()``s, the\n+    behavior is undefined.\n \n-    def _clear_lower_keys(self):\n-        if hasattr(self, '_lower_keys'):\n-            self._lower_keys.clear()\n+    \"\"\"\n+    def __init__(self, data=None, **kwargs):\n+        self._store = dict()\n+        if data is None:\n+            data = {}\n+        self.update(data, **kwargs)\n \n     def __setitem__(self, key, value):\n-        dict.__setitem__(self, key, value)\n-        self._clear_lower_keys()\n-\n-    def __delitem__(self, key):\n-        dict.__delitem__(self, self.lower_keys.get(key.lower(), key))\n-        self._lower_keys.clear()\n-\n-    def __contains__(self, key):\n-        return key.lower() in self.lower_keys\n+        # Use the lowercased key for lookups, but store the actual\n+        # key alongside the value.\n+        self._store[key.lower()] = (key, value)\n \n     def __getitem__(self, key):\n-        # We allow fall-through here, so values default to None\n-        if key in self:\n-            return dict.__getitem__(self, self.lower_keys[key.lower()])\n+        return self._store[key.lower()][1]\n \n-    def get(self, key, default=None):\n-        if key in self:\n-            return self[key]\n+    def __delitem__(self, key):\n+        del self._store[key.lower()]\n+\n+    def __iter__(self):\n+        return (casedkey for casedkey, mappedvalue in self._store.values())\n+\n+    def __len__(self):\n+        return len(self._store)\n+\n+    def lower_items(self):\n+        \"\"\"Like iteritems(), but with all lowercase keys.\"\"\"\n+        return (\n+            (lowerkey, keyval[1])\n+            for (lowerkey, keyval)\n+            in self._store.items()\n+        )\n+\n+    def __eq__(self, other):\n+        if isinstance(other, collections.Mapping):\n+            other = CaseInsensitiveDict(other)\n         else:\n-            return default\n+            return NotImplemented\n+        # Compare insensitively\n+        return dict(self.lower_items()) == dict(other.lower_items())\n+\n+    # Copy is required\n+    def copy(self):\n+         return CaseInsensitiveDict(self._store.values())\n+\n+    def __repr__(self):\n+        return '%s(%r)' % (self.__class__.__name__, dict(self.items()))\n \n \n class LookupDict(dict):\n\n@@ -23,6 +23,7 @@ from . import certs\n from .compat import parse_http_list as _parse_list_header\n from .compat import quote, urlparse, bytes, str, OrderedDict, urlunparse\n from .cookies import RequestsCookieJar, cookiejar_from_dict\n+from .structures import CaseInsensitiveDict\n \n _hush_pyflakes = (RequestsCookieJar,)\n \n@@ -449,11 +450,11 @@ def default_user_agent():\n \n \n def default_headers():\n-    return {\n+    return CaseInsensitiveDict({\n         'User-Agent': default_user_agent(),\n         'Accept-Encoding': ', '.join(('gzip', 'deflate', 'compress')),\n         'Accept': '*/*'\n-    }\n+    })\n \n \n def parse_header_links(value):\n\n@@ -13,6 +13,7 @@ import requests\n from requests.auth import HTTPDigestAuth\n from requests.compat import str, cookielib\n from requests.cookies import cookiejar_from_dict\n+from requests.structures import CaseInsensitiveDict\n \n try:\n     import StringIO\n@@ -458,6 +459,165 @@ class RequestsTestCase(unittest.TestCase):\n         r = s.send(r.prepare())\n         self.assertEqual(r.status_code, 200)\n \n+    def test_fixes_1329(self):\n+        s = requests.Session()\n+        s.headers.update({'accept': 'application/json'})\n+        r = s.get(httpbin('get'))\n+        headers = r.request.headers\n+        # ASCII encode because of key comparison changes in py3\n+        self.assertEqual(\n+            headers['accept'.encode('ascii')],\n+            'application/json'\n+        )\n+        self.assertEqual(\n+            headers['Accept'.encode('ascii')],\n+            'application/json'\n+        )\n+\n+\n+class TestCaseInsensitiveDict(unittest.TestCase):\n+\n+    def test_mapping_init(self):\n+        cid = CaseInsensitiveDict({'Foo': 'foo','BAr': 'bar'})\n+        self.assertEqual(len(cid), 2)\n+        self.assertTrue('foo' in cid)\n+        self.assertTrue('bar' in cid)\n+\n+    def test_iterable_init(self):\n+        cid = CaseInsensitiveDict([('Foo', 'foo'), ('BAr', 'bar')])\n+        self.assertEqual(len(cid), 2)\n+        self.assertTrue('foo' in cid)\n+        self.assertTrue('bar' in cid)\n+\n+    def test_kwargs_init(self):\n+        cid = CaseInsensitiveDict(FOO='foo', BAr='bar')\n+        self.assertEqual(len(cid), 2)\n+        self.assertTrue('foo' in cid)\n+        self.assertTrue('bar' in cid)\n+\n+    def test_docstring_example(self):\n+        cid = CaseInsensitiveDict()\n+        cid['Accept'] = 'application/json'\n+        self.assertEqual(cid['aCCEPT'], 'application/json')\n+        self.assertEqual(list(cid), ['Accept'])\n+\n+    def test_len(self):\n+        cid = CaseInsensitiveDict({'a': 'a', 'b': 'b'})\n+        cid['A'] = 'a'\n+        self.assertEqual(len(cid), 2)\n+\n+    def test_getitem(self):\n+        cid = CaseInsensitiveDict({'Spam': 'blueval'})\n+        self.assertEqual(cid['spam'], 'blueval')\n+        self.assertEqual(cid['SPAM'], 'blueval')\n+\n+    def test_fixes_649(self):\n+        cid = CaseInsensitiveDict()\n+        cid['spam'] = 'oneval'\n+        cid['Spam'] = 'twoval'\n+        cid['sPAM'] = 'redval'\n+        cid['SPAM'] = 'blueval'\n+        self.assertEqual(cid['spam'], 'blueval')\n+        self.assertEqual(cid['SPAM'], 'blueval')\n+        self.assertEqual(list(cid.keys()), ['SPAM'])\n+\n+    def test_delitem(self):\n+        cid = CaseInsensitiveDict()\n+        cid['Spam'] = 'someval'\n+        del cid['sPam']\n+        self.assertFalse('spam' in cid)\n+        self.assertEqual(len(cid), 0)\n+\n+    def test_contains(self):\n+        cid = CaseInsensitiveDict()\n+        cid['Spam'] = 'someval'\n+        self.assertTrue('Spam' in cid)\n+        self.assertTrue('spam' in cid)\n+        self.assertTrue('SPAM' in cid)\n+        self.assertTrue('sPam' in cid)\n+        self.assertFalse('notspam' in cid)\n+\n+    def test_get(self):\n+        cid = CaseInsensitiveDict()\n+        cid['spam'] = 'oneval'\n+        cid['SPAM'] = 'blueval'\n+        self.assertEqual(cid.get('spam'), 'blueval')\n+        self.assertEqual(cid.get('SPAM'), 'blueval')\n+        self.assertEqual(cid.get('sPam'), 'blueval')\n+        self.assertEqual(cid.get('notspam', 'default'), 'default')\n+\n+    def test_update(self):\n+        cid = CaseInsensitiveDict()\n+        cid['spam'] = 'blueval'\n+        cid.update({'sPam': 'notblueval'})\n+        self.assertEqual(cid['spam'], 'notblueval')\n+        cid = CaseInsensitiveDict({'Foo': 'foo','BAr': 'bar'})\n+        cid.update({'fOO': 'anotherfoo', 'bAR': 'anotherbar'})\n+        self.assertEqual(len(cid), 2)\n+        self.assertEqual(cid['foo'], 'anotherfoo')\n+        self.assertEqual(cid['bar'], 'anotherbar')\n+\n+    def test_update_retains_unchanged(self):\n+        cid = CaseInsensitiveDict({'foo': 'foo', 'bar': 'bar'})\n+        cid.update({'foo': 'newfoo'})\n+        self.assertEquals(cid['bar'], 'bar')\n+\n+    def test_iter(self):\n+        cid = CaseInsensitiveDict({'Spam': 'spam', 'Eggs': 'eggs'})\n+        keys = frozenset(['Spam', 'Eggs'])\n+        self.assertEqual(frozenset(iter(cid)), keys)\n+\n+    def test_equality(self):\n+        cid = CaseInsensitiveDict({'SPAM': 'blueval', 'Eggs': 'redval'})\n+        othercid = CaseInsensitiveDict({'spam': 'blueval', 'eggs': 'redval'})\n+        self.assertEqual(cid, othercid)\n+        del othercid['spam']\n+        self.assertNotEqual(cid, othercid)\n+        self.assertEqual(cid, {'spam': 'blueval', 'eggs': 'redval'})\n+\n+    def test_setdefault(self):\n+        cid = CaseInsensitiveDict({'Spam': 'blueval'})\n+        self.assertEqual(\n+            cid.setdefault('spam', 'notblueval'),\n+            'blueval'\n+        )\n+        self.assertEqual(\n+            cid.setdefault('notspam', 'notblueval'),\n+            'notblueval'\n+        )\n+\n+    def test_lower_items(self):\n+        cid = CaseInsensitiveDict({\n+            'Accept': 'application/json',\n+            'user-Agent': 'requests',\n+        })\n+        keyset = frozenset(lowerkey for lowerkey, v in cid.lower_items())\n+        lowerkeyset = frozenset(['accept', 'user-agent'])\n+        self.assertEqual(keyset, lowerkeyset)\n+\n+    def test_preserve_key_case(self):\n+        cid = CaseInsensitiveDict({\n+            'Accept': 'application/json',\n+            'user-Agent': 'requests',\n+        })\n+        keyset = frozenset(['Accept', 'user-Agent'])\n+        self.assertEqual(frozenset(i[0] for i in cid.items()), keyset)\n+        self.assertEqual(frozenset(cid.keys()), keyset)\n+        self.assertEqual(frozenset(cid), keyset)\n+\n+    def test_preserve_last_key_case(self):\n+        cid = CaseInsensitiveDict({\n+            'Accept': 'application/json',\n+            'user-Agent': 'requests',\n+        })\n+        cid.update({'ACCEPT': 'application/json'})\n+        cid['USER-AGENT'] = 'requests'\n+        keyset = frozenset(['ACCEPT', 'USER-AGENT'])\n+        self.assertEqual(frozenset(i[0] for i in cid.items()), keyset)\n+        self.assertEqual(frozenset(cid.keys()), keyset)\n+        self.assertEqual(frozenset(cid), keyset)\n+\n+\n \n if __name__ == '__main__':\n     unittest.main()\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#7e825acd9b730632623984f14cd0f3f2c0cbf45f", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 3 | Files Changed: 1 | Hunks: 2 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 374 | Contributors (this commit): 12 | Commits (past 90d): 2 | Contributors (cumulative): 12 | DMM Complexity: None\n\nDIFF:\n@@ -51,9 +51,7 @@ setup(\n         'Programming Language :: Python :: 2.6',\n         'Programming Language :: Python :: 2.7',\n         'Programming Language :: Python :: 3',\n-        # 'Programming Language :: Python :: 3.0',\n-        'Programming Language :: Python :: 3.1',\n-        'Programming Language :: Python :: 3.2',\n         'Programming Language :: Python :: 3.3',\n+\n     ),\n )\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#f93275c47f1557793bec348918013750e6902ff4", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 9 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 4 | Methods Changed: 2 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 9 | Churn Cumulative: 3111 | Contributors (this commit): 46 | Commits (past 90d): 27 | Contributors (cumulative): 46 | DMM Complexity: 1.0\n\nDIFF:\n@@ -460,7 +460,11 @@ class RequestsTestCase(unittest.TestCase):\n         self.assertEqual(r.status_code, 200)\n \n     def test_fixes_1329(self):\n+        \"\"\"\n+        Ensure that header updates are done case-insensitively.\n+        \"\"\"\n         s = requests.Session()\n+        s.headers.update({'ACCEPT': 'BOGUS'})\n         s.headers.update({'accept': 'application/json'})\n         r = s.get(httpbin('get'))\n         headers = r.request.headers\n@@ -473,6 +477,10 @@ class RequestsTestCase(unittest.TestCase):\n             headers['Accept'.encode('ascii')],\n             'application/json'\n         )\n+        self.assertEqual(\n+            headers['ACCEPT'.encode('ascii')],\n+            'application/json'\n+        )\n \n \n class TestCaseInsensitiveDict(unittest.TestCase):\n@@ -512,6 +520,7 @@ class TestCaseInsensitiveDict(unittest.TestCase):\n         self.assertEqual(cid['SPAM'], 'blueval')\n \n     def test_fixes_649(self):\n+        \"\"\"__setitem__ should behave case-insensitively.\"\"\"\n         cid = CaseInsensitiveDict()\n         cid['spam'] = 'oneval'\n         cid['Spam'] = 'twoval'\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#18857a0eedcebbfc40bb1ae431daed935cd51d56", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 7 | Lines Deleted: 0 | Files Changed: 2 | Hunks: 2 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 7 | Churn Cumulative: 864 | Contributors (this commit): 16 | Commits (past 90d): 5 | Contributors (cumulative): 19 | DMM Complexity: None\n\nDIFF:\n@@ -48,6 +48,12 @@ __author__ = 'Kenneth Reitz'\n __license__ = 'Apache 2.0'\n __copyright__ = 'Copyright 2013 Kenneth Reitz'\n \n+# Attempt to enable urllib3's SNI support, if possible\n+try:\n+    from requests.packages.urllib3.contrib import pyopenssl\n+    pyopenssl.inject_into_urllib3()\n+except ImportError:\n+    pass\n \n from . import utils\n from .models import Request, Response, PreparedRequest\n\n@@ -20,6 +20,7 @@ packages = [\n     'requests.packages.charade',\n     'requests.packages.urllib3',\n     'requests.packages.urllib3.packages',\n+    'requests.packages.urllib3.contrib',\n     'requests.packages.urllib3.packages.ssl_match_hostname'\n ]\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#88fda942182517ee5cdb2f42a9e0094c5dcf5864", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 4/4 | Churn Δ: 2 | Churn Cumulative: 8697 | Contributors (this commit): 109 | Commits (past 90d): 20 | Contributors (cumulative): 109 | DMM Complexity: None\n\nDIFF:\n@@ -646,7 +646,7 @@ class Response(object):\n     def links(self):\n         \"\"\"Returns the parsed header links of the response, if any.\"\"\"\n \n-        header = self.headers['link']\n+        header = self.headers.get('link')\n \n         # l = MultiDict()\n         l = {}\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#2eb682671db4cdcc1fceac0240cb57683f9497ba", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 10 | Lines Deleted: 4 | Files Changed: 1 | Hunks: 8 | Methods Changed: 4 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 14 | Churn Cumulative: 569 | Contributors (this commit): 10 | Commits (past 90d): 11 | Contributors (cumulative): 10 | DMM Complexity: 1.0\n\nDIFF:\n@@ -25,6 +25,7 @@ from .cookies import extract_cookies_to_jar\n from .exceptions import ConnectionError, Timeout, SSLError\n from .auth import _basic_auth_str\n \n+DEFAULT_POOLBLOCK = False\n DEFAULT_POOLSIZE = 10\n DEFAULT_RETRIES = 0\n \n@@ -64,7 +65,8 @@ class HTTPAdapter(BaseAdapter):\n     __attrs__ = ['max_retries', 'config', '_pool_connections', '_pool_maxsize']\n \n     def __init__(self, pool_connections=DEFAULT_POOLSIZE,\n-                 pool_maxsize=DEFAULT_POOLSIZE, max_retries=DEFAULT_RETRIES):\n+                 pool_maxsize=DEFAULT_POOLSIZE, pool_block=DEFAULT_POOLBLOCK,\n+                 max_retries=DEFAULT_RETRIES):\n         self.max_retries = max_retries\n         self.config = {}\n \n@@ -72,8 +74,9 @@ class HTTPAdapter(BaseAdapter):\n \n         self._pool_connections = pool_connections\n         self._pool_maxsize = pool_maxsize\n+        self._pool_block = pool_block\n \n-        self.init_poolmanager(pool_connections, pool_maxsize)\n+        self.init_poolmanager(pool_connections, pool_maxsize, block=pool_block)\n \n     def __getstate__(self):\n         return dict((attr, getattr(self, attr, None)) for attr in\n@@ -85,19 +88,22 @@ class HTTPAdapter(BaseAdapter):\n \n         self.init_poolmanager(self._pool_connections, self._pool_maxsize)\n \n-    def init_poolmanager(self, connections, maxsize):\n+    def init_poolmanager(self, connections, maxsize, block=DEFAULT_POOLBLOCK):\n         \"\"\"Initializes a urllib3 PoolManager. This method should not be called\n         from user code, and is only exposed for use when subclassing the\n         :class:`HTTPAdapter <requests.adapters.HTTPAdapter>`.\n \n         :param connections: The number of urllib3 connection pools to cache.\n         :param maxsize: The maximum number of connections to save in the pool.\n+        :param block: Block when no free connections are available.\n         \"\"\"\n         # save these values for pickling\n         self._pool_connections = connections\n         self._pool_maxsize = maxsize\n+        self._pool_block = block\n \n-        self.poolmanager = PoolManager(num_pools=connections, maxsize=maxsize)\n+        self.poolmanager = PoolManager(num_pools=connections, maxsize=maxsize,\n+                                       block=block)\n \n     def cert_verify(self, conn, url, verify, cert):\n         \"\"\"Verify a SSL certificate. This method should not be called from user\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#053613688bcabb05818403014dc594bfdc2cbe22", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 3 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 2 | Methods Changed: 2 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 5 | Churn Cumulative: 574 | Contributors (this commit): 10 | Commits (past 90d): 12 | Contributors (cumulative): 10 | DMM Complexity: None\n\nDIFF:\n@@ -54,6 +54,7 @@ class HTTPAdapter(BaseAdapter):\n     :param pool_connections: The number of urllib3 connection pools to cache.\n     :param pool_maxsize: The maximum number of connections to save in the pool.\n     :param max_retries: The maximum number of retries each connection should attempt.\n+    :param pool_block: Whether the connection pool should block for connections.\n \n     Usage::\n \n@@ -65,8 +66,8 @@ class HTTPAdapter(BaseAdapter):\n     __attrs__ = ['max_retries', 'config', '_pool_connections', '_pool_maxsize']\n \n     def __init__(self, pool_connections=DEFAULT_POOLSIZE,\n-                 pool_maxsize=DEFAULT_POOLSIZE, pool_block=DEFAULT_POOLBLOCK,\n-                 max_retries=DEFAULT_RETRIES):\n+                 pool_maxsize=DEFAULT_POOLSIZE, max_retries=DEFAULT_RETRIES,\n+                 pool_block=DEFAULT_POOLBLOCK):\n         self.max_retries = max_retries\n         self.config = {}\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#9cb3d6444d7c2e2787267874f59c271cd2bcf1be", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 3 | Churn Cumulative: 577 | Contributors (this commit): 10 | Commits (past 90d): 13 | Contributors (cumulative): 10 | DMM Complexity: 1.0\n\nDIFF:\n@@ -87,7 +87,8 @@ class HTTPAdapter(BaseAdapter):\n         for attr, value in state.items():\n             setattr(self, attr, value)\n \n-        self.init_poolmanager(self._pool_connections, self._pool_maxsize)\n+        self.init_poolmanager(self._pool_connections, self._pool_maxsize,\n+                              block=self._pool_block)\n \n     def init_poolmanager(self, connections, maxsize, block=DEFAULT_POOLBLOCK):\n         \"\"\"Initializes a urllib3 PoolManager. This method should not be called\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#c03e14242b4bc65f6a970de100460eb3f1e14cc2", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 3 | Churn Cumulative: 580 | Contributors (this commit): 10 | Commits (past 90d): 14 | Contributors (cumulative): 10 | DMM Complexity: None\n\nDIFF:\n@@ -63,7 +63,8 @@ class HTTPAdapter(BaseAdapter):\n       >>> a = requests.adapters.HTTPAdapter()\n       >>> s.mount('http://', a)\n     \"\"\"\n-    __attrs__ = ['max_retries', 'config', '_pool_connections', '_pool_maxsize']\n+    __attrs__ = ['max_retries', 'config', '_pool_connections', '_pool_maxsize',\n+                 '_pool_block']\n \n     def __init__(self, pool_connections=DEFAULT_POOLSIZE,\n                  pool_maxsize=DEFAULT_POOLSIZE, max_retries=DEFAULT_RETRIES,\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#4c8af1fff47eea5f52c7b333101c221399c8c613", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 48 | Lines Deleted: 6 | Files Changed: 2 | Hunks: 9 | Methods Changed: 3 | Complexity Δ (Sum/Max): 4/3 | Churn Δ: 54 | Churn Cumulative: 5370 | Contributors (this commit): 75 | Commits (past 90d): 46 | Contributors (cumulative): 89 | DMM Complexity: 1.0\n\nDIFF:\n@@ -11,14 +11,13 @@ requests (cookies, auth, proxies).\n import os\n from datetime import datetime\n \n-from .compat import cookielib\n+from .compat import cookielib, OrderedDict, urljoin, urlparse\n from .cookies import cookiejar_from_dict, extract_cookies_to_jar, RequestsCookieJar\n from .models import Request, PreparedRequest\n from .hooks import default_hooks, dispatch_hook\n from .utils import from_key_val_list, default_headers\n from .exceptions import TooManyRedirects, InvalidSchema\n \n-from .compat import urlparse, urljoin\n from .adapters import HTTPAdapter\n \n from .utils import requote_uri, get_environ_proxies, get_netrc_auth\n@@ -223,9 +222,9 @@ class Session(SessionRedirectMixin):\n         self.cookies = cookiejar_from_dict({})\n \n         # Default connection adapters.\n-        self.adapters = {}\n-        self.mount('http://', HTTPAdapter())\n+        self.adapters = OrderedDict()\n         self.mount('https://', HTTPAdapter())\n+        self.mount('http://', HTTPAdapter())\n \n     def __enter__(self):\n         return self\n@@ -490,8 +489,13 @@ class Session(SessionRedirectMixin):\n             v.close()\n \n     def mount(self, prefix, adapter):\n-        \"\"\"Registers a connection adapter to a prefix.\"\"\"\n+        \"\"\"Registers a connection adapter to a prefix.\n+\n+        Adapters are sorted in descending order by key length.\"\"\"\n         self.adapters[prefix] = adapter\n+        keys_to_move = [k for k in self.adapters if len(k) < len(prefix)]\n+        for key in keys_to_move:\n+            self.adapters[key] = self.adapters.pop(key)\n \n     def __getstate__(self):\n         return dict((attr, getattr(self, attr, None)) for attr in self.__attrs__)\n\n@@ -11,6 +11,7 @@ import pickle\n \n import requests\n from requests.auth import HTTPDigestAuth\n+from requests.adapters import HTTPAdapter\n from requests.compat import str, cookielib\n from requests.cookies import cookiejar_from_dict\n from requests.structures import CaseInsensitiveDict\n@@ -482,6 +483,44 @@ class RequestsTestCase(unittest.TestCase):\n             'application/json'\n         )\n \n+    def test_transport_adapter_ordering(self):\n+        s = requests.Session()\n+        order = ['https://', 'http://']\n+        self.assertEqual(order, list(s.adapters))\n+        s.mount('http://git', HTTPAdapter())\n+        s.mount('http://github', HTTPAdapter())\n+        s.mount('http://github.com', HTTPAdapter())\n+        s.mount('http://github.com/about/', HTTPAdapter())\n+        order = [\n+            'http://github.com/about/',\n+            'http://github.com',\n+            'http://github',\n+            'http://git',\n+            'https://',\n+            'http://',\n+        ]\n+        self.assertEqual(order, list(s.adapters))\n+        s.mount('http://gittip', HTTPAdapter())\n+        s.mount('http://gittip.com', HTTPAdapter())\n+        s.mount('http://gittip.com/about/', HTTPAdapter())\n+        order = [\n+            'http://github.com/about/',\n+            'http://gittip.com/about/',\n+            'http://github.com',\n+            'http://gittip.com',\n+            'http://github',\n+            'http://gittip',\n+            'http://git',\n+            'https://',\n+            'http://',\n+        ]\n+        self.assertEqual(order, list(s.adapters))\n+        s2 = requests.Session()\n+        s2.adapters = {'http://': HTTPAdapter()}\n+        s2.mount('https://', HTTPAdapter())\n+        self.assertTrue('http://' in s2.adapters)\n+        self.assertTrue('https://' in s2.adapters)\n+\n \n class TestCaseInsensitiveDict(unittest.TestCase):\n \n@@ -627,6 +666,5 @@ class TestCaseInsensitiveDict(unittest.TestCase):\n         self.assertEqual(frozenset(cid), keyset)\n \n \n-\n if __name__ == '__main__':\n     unittest.main()\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#2b6ebd25215b528c2cad3749973084276d9d74a8", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 3 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 3 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 2223 | Contributors (this commit): 42 | Commits (past 90d): 27 | Contributors (cumulative): 42 | DMM Complexity: 0.0\n\nDIFF:\n@@ -111,9 +111,11 @@ class SessionRedirectMixin(object):\n \n             # Facilitate non-RFC2616-compliant 'location' headers\n             # (e.g. '/path/to/resource' instead of 'http://domain.tld/path/to/resource')\n-            if not urlparse(url).netloc:\n             # Compliant with RFC3986, we percent encode the url.\n+            if not urlparse(url).netloc:\n                 url = urljoin(resp.url, requote_uri(url))\n+            else:\n+                url = requote_uri(url)\n \n             prepared_request.url = url\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#6e76ab7188b2e5f6338b8b15d7d77b69f1627a7b", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 24 | Lines Deleted: 7 | Files Changed: 2 | Hunks: 9 | Methods Changed: 2 | Complexity Δ (Sum/Max): 3/2 | Churn Δ: 31 | Churn Cumulative: 11879 | Contributors (this commit): 127 | Commits (past 90d): 38 | Contributors (cumulative): 158 | DMM Complexity: 0.6666666666666666\n\nDIFF:\n@@ -18,6 +18,7 @@ from .structures import CaseInsensitiveDict\n from .auth import HTTPBasicAuth\n from .cookies import cookiejar_from_dict, get_cookie_header\n from .packages.urllib3.filepost import encode_multipart_formdata\n+from .packages.urllib3.util import parse_url\n from .exceptions import HTTPError, RequestException, MissingSchema, InvalidURL\n from .utils import (\n     guess_filename, get_auth_from_url, requote_uri,\n@@ -284,19 +285,28 @@ class PreparedRequest(RequestEncodingMixin, RequestHooksMixin):\n             pass\n \n         # Support for unicode domain names and paths.\n-        scheme, netloc, path, _params, query, fragment = urlparse(url)\n+        scheme, auth, host, port, path, query, fragment = parse_url(url)\n \n         if not scheme:\n             raise MissingSchema(\"Invalid URL %r: No schema supplied\" % url)\n \n-        if not netloc:\n-            raise InvalidURL(\"Invalid URL %t: No netloc supplied\" % url)\n+        if not host:\n+            raise InvalidURL(\"Invalid URL %t: No host supplied\" % url)\n \n+        # Only want to apply IDNA to the hostname\n         try:\n-            netloc = netloc.encode('idna').decode('utf-8')\n+            host = host.encode('idna').decode('utf-8')\n         except UnicodeError:\n             raise InvalidURL('URL has an invalid label.')\n \n+        # Carefully reconstruct the network location\n+        netloc = auth or ''\n+        if netloc:\n+            netloc += '@'\n+        netloc += host\n+        if port:\n+            netloc += ':' + str(port)\n+\n         # Bare domains aren't valid URLs.\n         if not path:\n             path = '/'\n@@ -308,8 +318,6 @@ class PreparedRequest(RequestEncodingMixin, RequestHooksMixin):\n                 netloc = netloc.encode('utf-8')\n             if isinstance(path, str):\n                 path = path.encode('utf-8')\n-            if isinstance(_params, str):\n-                _params = _params.encode('utf-8')\n             if isinstance(query, str):\n                 query = query.encode('utf-8')\n             if isinstance(fragment, str):\n@@ -322,7 +330,7 @@ class PreparedRequest(RequestEncodingMixin, RequestHooksMixin):\n             else:\n                 query = enc_params\n \n-        url = requote_uri(urlunparse([scheme, netloc, path, _params, query, fragment]))\n+        url = requote_uri(urlunparse([scheme, netloc, path, None, query, fragment]))\n         self.url = url\n \n     def prepare_headers(self, headers):\n\n@@ -521,6 +521,15 @@ class RequestsTestCase(unittest.TestCase):\n         self.assertTrue('http://' in s2.adapters)\n         self.assertTrue('https://' in s2.adapters)\n \n+    def test_long_authinfo_in_url(self):\n+        url = 'http://{0}:{1}@{2}:9000/path?query#frag'.format(\n+            'E8A3BE87-9E3F-4620-8858-95478E385B5B',\n+            'EA770032-DA4D-4D84-8CE9-29C6D910BF1E',\n+            'exactly-------------sixty-----------three------------characters',\n+        )\n+        r = requests.Request('GET', url).prepare()\n+        self.assertEqual(r.url, url)\n+\n \n class TestCaseInsensitiveDict(unittest.TestCase):\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#9ce7f0bf5b3cb7f48f7dea76c420554e037e18b7", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 4 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 4 | Churn Cumulative: 571 | Contributors (this commit): 12 | Commits (past 90d): 1 | Contributors (cumulative): 12 | DMM Complexity: 1.0\n\nDIFF:\n@@ -69,6 +69,10 @@ class MockRequest(object):\n     def unverifiable(self):\n         return self.is_unverifiable()\n \n+    @property\n+    def origin_req_host(self):\n+        return self.get_origin_req_host()\n+\n \n class MockResponse(object):\n     \"\"\"Wraps a `httplib.HTTPMessage` to mimic a `urllib.addinfourl`.\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#569b59f495ec37639b011591bd2b0c11c3e77581", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 493 | Contributors (this commit): 6 | Commits (past 90d): 3 | Contributors (cumulative): 6 | DMM Complexity: None\n\nDIFF:\n@@ -42,8 +42,8 @@ is at <http://python-requests.org>.\n \"\"\"\n \n __title__ = 'requests'\n-__version__ = '1.2.0'\n-__build__ = 0x010200\n+__version__ = '1.2.1'\n+__build__ = 0x010201\n __author__ = 'Kenneth Reitz'\n __license__ = 'Apache 2.0'\n __copyright__ = 'Copyright 2013 Kenneth Reitz'\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#98114245c686ef7cd62c9932071fd972ad3efedb", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 47 | Lines Deleted: 45 | Files Changed: 3 | Hunks: 16 | Methods Changed: 7 | Complexity Δ (Sum/Max): -2/2 | Churn Δ: 92 | Churn Cumulative: 7309 | Contributors (this commit): 99 | Commits (past 90d): 75 | Contributors (cumulative): 131 | DMM Complexity: 1.0\n\nDIFF:\n@@ -9,14 +9,16 @@ requests (cookies, auth, proxies).\n \n \"\"\"\n import os\n+from collections import Mapping\n from datetime import datetime\n \n from .compat import cookielib, OrderedDict, urljoin, urlparse\n from .cookies import cookiejar_from_dict, extract_cookies_to_jar, RequestsCookieJar\n from .models import Request, PreparedRequest\n from .hooks import default_hooks, dispatch_hook\n-from .utils import from_key_val_list, default_headers\n+from .utils import to_key_val_list, default_headers\n from .exceptions import TooManyRedirects, InvalidSchema\n+from .structures import CaseInsensitiveDict\n \n from .adapters import HTTPAdapter\n \n@@ -32,49 +34,35 @@ REDIRECT_STATI = (\n DEFAULT_REDIRECT_LIMIT = 30\n \n \n-def merge_kwargs(local_kwarg, default_kwarg):\n-    \"\"\"Merges kwarg dictionaries.\n-\n-    If a local key in the dictionary is set to None, it will be removed.\n+def merge_setting(request_setting, session_setting, dict_class=OrderedDict):\n+    \"\"\"\n+    Determines appropriate setting for a given request, taking into account the\n+    explicit setting on that request, and the setting in the session. If a\n+    setting is a dictionary, they will be merged together using `dict_class`\n     \"\"\"\n \n-    if default_kwarg is None:\n-        return local_kwarg\n+    if session_setting is None:\n+        return request_setting\n \n-    if isinstance(local_kwarg, str):\n-        return local_kwarg\n+    if request_setting is None:\n+        return session_setting\n \n-    if local_kwarg is None:\n-        return default_kwarg\n+    # Bypass if not a dictionary (e.g. verify)\n+    if not (\n+            isinstance(session_setting, Mapping) and\n+            isinstance(request_setting, Mapping)\n+    ):\n+        return request_setting\n \n-    # Bypass if not a dictionary (e.g. timeout)\n-    if not hasattr(default_kwarg, 'items'):\n-        return local_kwarg\n-\n-    default_kwarg = from_key_val_list(default_kwarg)\n-    local_kwarg = from_key_val_list(local_kwarg)\n-\n-    # Update new values in a case-insensitive way\n-    def get_original_key(original_keys, new_key):\n-        \"\"\"\n-        Finds the key from original_keys that case-insensitive matches new_key.\n-        \"\"\"\n-        for original_key in original_keys:\n-            if key.lower() == original_key.lower():\n-                return original_key\n-        return new_key\n-\n-    kwargs = default_kwarg.copy()\n-    original_keys = kwargs.keys()\n-    for key, value in local_kwarg.items():\n-        kwargs[get_original_key(original_keys, key)] = value\n+    merged_setting = dict_class(to_key_val_list(session_setting))\n+    merged_setting.update(to_key_val_list(request_setting))\n \n     # Remove keys that are set to None.\n-    for (k, v) in local_kwarg.items():\n+    for (k, v) in request_setting.items():\n         if v is None:\n-            del kwargs[k]\n+            del merged_setting[k]\n \n-    return kwargs\n+    return merged_setting\n \n \n class SessionRedirectMixin(object):\n@@ -311,14 +299,14 @@ class Session(SessionRedirectMixin):\n                 verify = os.environ.get('CURL_CA_BUNDLE')\n \n         # Merge all the kwargs.\n-        params = merge_kwargs(params, self.params)\n-        headers = merge_kwargs(headers, self.headers)\n-        auth = merge_kwargs(auth, self.auth)\n-        proxies = merge_kwargs(proxies, self.proxies)\n-        hooks = merge_kwargs(hooks, self.hooks)\n-        stream = merge_kwargs(stream, self.stream)\n-        verify = merge_kwargs(verify, self.verify)\n-        cert = merge_kwargs(cert, self.cert)\n+        params = merge_setting(params, self.params)\n+        headers = merge_setting(headers, self.headers, dict_class=CaseInsensitiveDict)\n+        auth = merge_setting(auth, self.auth)\n+        proxies = merge_setting(proxies, self.proxies)\n+        hooks = merge_setting(hooks, self.hooks)\n+        stream = merge_setting(stream, self.stream)\n+        verify = merge_setting(verify, self.verify)\n+        cert = merge_setting(cert, self.cert)\n \n         # Create the Request.\n         req = Request()\n\n@@ -11,11 +11,11 @@ that are also useful for external consumption.\n \n import cgi\n import codecs\n+import collections\n import os\n import platform\n import re\n import sys\n-import zlib\n from netrc import netrc, NetrcParseError\n \n from . import __version__\n@@ -135,7 +135,7 @@ def to_key_val_list(value):\n     if isinstance(value, (str, bytes, bool, int)):\n         raise ValueError('cannot encode objects that are not 2-tuples')\n \n-    if isinstance(value, dict):\n+    if isinstance(value, collections.Mapping):\n         value = value.items()\n \n     return list(value)\n\n@@ -521,6 +521,20 @@ class RequestsTestCase(unittest.TestCase):\n         self.assertTrue('http://' in s2.adapters)\n         self.assertTrue('https://' in s2.adapters)\n \n+    def test_header_remove_is_case_insensitive(self):\n+        # From issue #1321\n+        s = requests.Session()\n+        s.headers['foo'] = 'bar'\n+        r = s.get(httpbin('get'), headers={'FOO': None})\n+        assert 'foo' not in r.request.headers\n+\n+    def test_params_are_merged_case_sensitive(self):\n+        s = requests.Session()\n+        s.params['foo'] = 'bar'\n+        r = s.get(httpbin('get'), params={'FOO': 'bar'})\n+        assert r.json()['args'] == {'foo': 'bar', 'FOO': 'bar'}\n+\n+\n     def test_long_authinfo_in_url(self):\n         url = 'http://{0}:{1}@{2}:9000/path?query#frag'.format(\n             'E8A3BE87-9E3F-4620-8858-95478E385B5B',\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#003c795afed5f3b12c3ea8af12affbeb1218d7da", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 11 | Lines Deleted: 1 | Files Changed: 2 | Hunks: 2 | Methods Changed: 2 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 12 | Churn Cumulative: 11905 | Contributors (this commit): 127 | Commits (past 90d): 41 | Contributors (cumulative): 159 | DMM Complexity: 1.0\n\nDIFF:\n@@ -105,7 +105,7 @@ class RequestEncodingMixin(object):\n             for v in val:\n                 if v is not None:\n                     new_fields.append(\n-                        (field.encode('utf-8') if isinstance(field, str) else field,\n+                        (field.decode('utf-8') if isinstance(field, bytes) else field,\n                          v.encode('utf-8') if isinstance(v, str) else v))\n \n         for (k, v) in files:\n\n@@ -342,6 +342,16 @@ class RequestsTestCase(unittest.TestCase):\n                           files={'file': ('test_requests.py', open(__file__, 'rb'))})\n         self.assertEqual(r.status_code, 200)\n \n+    def test_unicode_multipart_post_fieldnames(self):\n+        r = requests.Request(method='POST',\n+                             url=httpbin('post'),\n+                             data={'stuff'.encode('utf-8'): 'elixr'},\n+                             files={'file': ('test_requests.py',\n+                                             open(__file__, 'rb'))})\n+        prep = r.prepare()\n+        self.assertTrue(b'name=\"stuff\"' in prep.body)\n+        self.assertFalse(b'name=\"b\\'stuff\\'\"' in prep.body)\n+\n     def test_custom_content_type(self):\n         r = requests.post(httpbin('post'),\n                           data={'stuff': json.dumps({'a': 123})},\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#715a57dec888c850d16b767d7cdab9705fda7292", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 4 | Lines Deleted: 2 | Files Changed: 2 | Hunks: 3 | Methods Changed: 2 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 6 | Churn Cumulative: 11911 | Contributors (this commit): 128 | Commits (past 90d): 43 | Contributors (cumulative): 161 | DMM Complexity: 1.0\n\nDIFF:\n@@ -291,7 +291,7 @@ class PreparedRequest(RequestEncodingMixin, RequestHooksMixin):\n             raise MissingSchema(\"Invalid URL %r: No schema supplied\" % url)\n \n         if not host:\n-            raise InvalidURL(\"Invalid URL %t: No host supplied\" % url)\n+            raise InvalidURL(\"Invalid URL %r: No host supplied\" % url)\n \n         # Only want to apply IDNA to the hostname\n         try:\n\n@@ -14,6 +14,7 @@ from requests.auth import HTTPDigestAuth\n from requests.adapters import HTTPAdapter\n from requests.compat import str, cookielib\n from requests.cookies import cookiejar_from_dict\n+from requests.exceptions import InvalidURL, MissingSchema\n from requests.structures import CaseInsensitiveDict\n \n try:\n@@ -53,7 +54,8 @@ class RequestsTestCase(unittest.TestCase):\n         requests.post\n \n     def test_invalid_url(self):\n-        self.assertRaises(ValueError, requests.get, 'hiwpefhipowhefopw')\n+        self.assertRaises(MissingSchema, requests.get, 'hiwpefhipowhefopw')\n+        self.assertRaises(InvalidURL, requests.get, 'http://')\n \n     def test_basic_building(self):\n         req = requests.Request()\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#3b0d8b8e39c5d7ead5f11276a496378a9676aeb5", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 1077 | Contributors (this commit): 23 | Commits (past 90d): 4 | Contributors (cumulative): 23 | DMM Complexity: None\n\nDIFF:\n@@ -153,7 +153,7 @@ class HTTPDigestAuth(AuthBase):\n \n             setattr(self, 'num_401_calls', num_401_calls + 1)\n             pat = re.compile(r'digest ', flags=re.IGNORECASE)\n-            self.chal = parse_dict_header(pat.sub('', s_auth))\n+            self.chal = parse_dict_header(pat.sub('', s_auth, count=1))\n \n             # Consume content and release the original connection\n             # to allow our new request to reuse the same one.\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#2a34335dc3efacf545171bf81075c556aae49f5d", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 3 | Churn Cumulative: 3191 | Contributors (this commit): 50 | Commits (past 90d): 24 | Contributors (cumulative): 50 | DMM Complexity: 1.0\n\nDIFF:\n@@ -345,11 +345,12 @@ class RequestsTestCase(unittest.TestCase):\n         self.assertEqual(r.status_code, 200)\n \n     def test_unicode_multipart_post_fieldnames(self):\n+        filename = os.path.splitext(__file__)[0] + '.py'\n         r = requests.Request(method='POST',\n                              url=httpbin('post'),\n                              data={'stuff'.encode('utf-8'): 'elixr'},\n                              files={'file': ('test_requests.py',\n-                                             open(__file__, 'rb'))})\n+                                             open(filename, 'rb'))})\n         prep = r.prepare()\n         self.assertTrue(b'name=\"stuff\"' in prep.body)\n         self.assertFalse(b'name=\"b\\'stuff\\'\"' in prep.body)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#786fe94ac43eacc580d93442097cd3fc64090ffd", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 0 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 1 | Churn Cumulative: 376 | Contributors (this commit): 13 | Commits (past 90d): 4 | Contributors (cumulative): 13 | DMM Complexity: None\n\nDIFF:\n@@ -40,7 +40,6 @@ setup(\n     package_dir={'requests': 'requests'},\n     include_package_data=True,\n     install_requires=requires,\n-    setup_requires=['sphinx'],\n     license=open('LICENSE').read(),\n     zip_safe=False,\n     classifiers=(\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#9930c9c737f8d7469fceb3a503f333675123668b", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 497 | Contributors (this commit): 6 | Commits (past 90d): 4 | Contributors (cumulative): 6 | DMM Complexity: None\n\nDIFF:\n@@ -42,8 +42,8 @@ is at <http://python-requests.org>.\n \"\"\"\n \n __title__ = 'requests'\n-__version__ = '1.2.1'\n-__build__ = 0x010201\n+__version__ = '1.2.2'\n+__build__ = 0x010202\n __author__ = 'Kenneth Reitz'\n __license__ = 'Apache 2.0'\n __copyright__ = 'Copyright 2013 Kenneth Reitz'\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#e7c9bbb96f8cebe873e26bf2f5f306c130e98e7d", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 8727 | Contributors (this commit): 112 | Commits (past 90d): 21 | Contributors (cumulative): 112 | DMM Complexity: None\n\nDIFF:\n@@ -364,7 +364,7 @@ class PreparedRequest(RequestEncodingMixin, RequestHooksMixin):\n         try:\n             length = super_len(data)\n         except (TypeError, AttributeError):\n-            length = False\n+            length = None\n \n         if is_stream:\n             body = data\n@@ -372,7 +372,7 @@ class PreparedRequest(RequestEncodingMixin, RequestHooksMixin):\n             if files:\n                 raise NotImplementedError('Streamed bodies and files are mutually exclusive.')\n \n-            if length:\n+            if length is not None:\n                 self.headers['Content-Length'] = str(length)\n             else:\n                 self.headers['Transfer-Encoding'] = 'chunked'\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
