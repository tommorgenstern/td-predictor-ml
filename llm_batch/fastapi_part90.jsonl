{"custom_id": "fastapi#326fec16b9e3d61c584182b212436f88d81d0acb", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 38 | Lines Deleted: 25 | Files Changed: 1 | Hunks: 23 | Methods Changed: 7 | Complexity Δ (Sum/Max): 38/38 | Churn Δ: 63 | Churn Cumulative: 63 | Contributors (this commit): 1 | Commits (past 90d): 1 | Contributors (cumulative): 1 | DMM Complexity: 0.02654867256637168\n\nDIFF:\n@@ -7,12 +7,13 @@ from typing import Any, Dict, List, Union, cast\n \n import httpx\n from github import Github\n-from pydantic import BaseModel, BaseSettings, SecretStr\n+from pydantic import BaseModel, SecretStr\n+from pydantic_settings import BaseSettings\n \n awaiting_label = \"awaiting-review\"\n lang_all_label = \"lang-all\"\n approved_label = \"approved-1\"\n-translations_path = Path(__file__).parent / \"translations.yml\"\n+\n \n github_graphql_url = \"https://api.github.com/graphql\"\n questions_translations_category_id = \"DIC_kwDOCZduT84CT5P9\"\n@@ -176,19 +177,20 @@ class AllDiscussionsResponse(BaseModel):\n \n class Settings(BaseSettings):\n     github_repository: str\n-    input_token: SecretStr\n+    github_token: SecretStr\n     github_event_path: Path\n     github_event_name: Union[str, None] = None\n     httpx_timeout: int = 30\n-    input_debug: Union[bool, None] = False\n+    debug: Union[bool, None] = False\n+    number: int | None = None\n \n \n class PartialGitHubEventIssue(BaseModel):\n-    number: int\n+    number: int | None = None\n \n \n class PartialGitHubEvent(BaseModel):\n-    pull_request: PartialGitHubEventIssue\n+    pull_request: PartialGitHubEventIssue | None = None\n \n \n def get_graphql_response(\n@@ -202,9 +204,7 @@ def get_graphql_response(\n     comment_id: Union[str, None] = None,\n     body: Union[str, None] = None,\n ) -> Dict[str, Any]:\n-    headers = {\"Authorization\": f\"token {settings.input_token.get_secret_value()}\"}\n-    # some fields are only used by one query, but GraphQL allows unused variables, so\n-    # keep them here for simplicity\n+    headers = {\"Authorization\": f\"token {settings.github_token.get_secret_value()}\"}\n     variables = {\n         \"after\": after,\n         \"category_id\": category_id,\n@@ -228,37 +228,40 @@ def get_graphql_response(\n     data = response.json()\n     if \"errors\" in data:\n         logging.error(f\"Errors in response, after: {after}, category_id: {category_id}\")\n+        logging.error(data[\"errors\"])\n         logging.error(response.text)\n         raise RuntimeError(response.text)\n     return cast(Dict[str, Any], data)\n \n \n-def get_graphql_translation_discussions(*, settings: Settings):\n+def get_graphql_translation_discussions(\n+    *, settings: Settings\n+) -> List[AllDiscussionsDiscussionNode]:\n     data = get_graphql_response(\n         settings=settings,\n         query=all_discussions_query,\n         category_id=questions_translations_category_id,\n     )\n-    graphql_response = AllDiscussionsResponse.parse_obj(data)\n+    graphql_response = AllDiscussionsResponse.model_validate(data)\n     return graphql_response.data.repository.discussions.nodes\n \n \n def get_graphql_translation_discussion_comments_edges(\n     *, settings: Settings, discussion_number: int, after: Union[str, None] = None\n-):\n+) -> List[CommentsEdge]:\n     data = get_graphql_response(\n         settings=settings,\n         query=translation_discussion_query,\n         discussion_number=discussion_number,\n         after=after,\n     )\n-    graphql_response = CommentsResponse.parse_obj(data)\n+    graphql_response = CommentsResponse.model_validate(data)\n     return graphql_response.data.repository.discussion.comments.edges\n \n \n def get_graphql_translation_discussion_comments(\n     *, settings: Settings, discussion_number: int\n-):\n+) -> list[Comment]:\n     comment_nodes: List[Comment] = []\n     discussion_edges = get_graphql_translation_discussion_comments_edges(\n         settings=settings, discussion_number=discussion_number\n@@ -276,43 +279,49 @@ def get_graphql_translation_discussion_comments(\n     return comment_nodes\n \n \n-def create_comment(*, settings: Settings, discussion_id: str, body: str):\n+def create_comment(*, settings: Settings, discussion_id: str, body: str) -> Comment:\n     data = get_graphql_response(\n         settings=settings,\n         query=add_comment_mutation,\n         discussion_id=discussion_id,\n         body=body,\n     )\n-    response = AddCommentResponse.parse_obj(data)\n+    response = AddCommentResponse.model_validate(data)\n     return response.data.addDiscussionComment.comment\n \n \n-def update_comment(*, settings: Settings, comment_id: str, body: str):\n+def update_comment(*, settings: Settings, comment_id: str, body: str) -> Comment:\n     data = get_graphql_response(\n         settings=settings,\n         query=update_comment_mutation,\n         comment_id=comment_id,\n         body=body,\n     )\n-    response = UpdateCommentResponse.parse_obj(data)\n+    response = UpdateCommentResponse.model_validate(data)\n     return response.data.updateDiscussionComment.comment\n \n \n-if __name__ == \"__main__\":\n+def main() -> None:\n     settings = Settings()\n-    if settings.input_debug:\n+    if settings.debug:\n         logging.basicConfig(level=logging.DEBUG)\n     else:\n         logging.basicConfig(level=logging.INFO)\n-    logging.debug(f\"Using config: {settings.json()}\")\n-    g = Github(settings.input_token.get_secret_value())\n+    logging.debug(f\"Using config: {settings.model_dump_json()}\")\n+    g = Github(settings.github_token.get_secret_value())\n     repo = g.get_repo(settings.github_repository)\n     if not settings.github_event_path.is_file():\n         raise RuntimeError(\n             f\"No github event file available at: {settings.github_event_path}\"\n         )\n     contents = settings.github_event_path.read_text()\n-    github_event = PartialGitHubEvent.parse_raw(contents)\n+    github_event = PartialGitHubEvent.model_validate_json(contents)\n+    logging.info(f\"Using GitHub event: {github_event}\")\n+    number = (\n+        github_event.pull_request and github_event.pull_request.number\n+    ) or settings.number\n+    if number is None:\n+        raise RuntimeError(\"No PR number available\")\n \n     # Avoid race conditions with multiple labels\n     sleep_time = random.random() * 10  # random number between 0 and 10 seconds\n@@ -323,8 +332,8 @@ if __name__ == \"__main__\":\n     time.sleep(sleep_time)\n \n     # Get PR\n-    logging.debug(f\"Processing PR: #{github_event.pull_request.number}\")\n-    pr = repo.get_pull(github_event.pull_request.number)\n+    logging.debug(f\"Processing PR: #{number}\")\n+    pr = repo.get_pull(number)\n     label_strs = {label.name for label in pr.get_labels()}\n     langs = []\n     for label in label_strs:\n@@ -415,3 +424,7 @@ if __name__ == \"__main__\":\n                 f\"There doesn't seem to be anything to be done about PR #{pr.number}\"\n             )\n     logging.info(\"Finished\")\n+\n+\n+if __name__ == \"__main__\":\n+    main()\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#0a2b24653b2b0e2a4753a1e239013b26fa1516b1", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 65 | Contributors (this commit): 1 | Commits (past 90d): 2 | Contributors (cumulative): 1 | DMM Complexity: None\n\nDIFF:\n@@ -176,6 +176,8 @@ class AllDiscussionsResponse(BaseModel):\n \n \n class Settings(BaseSettings):\n+    model_config = {\"env_ignore_empty\": True}\n+\n     github_repository: str\n     github_token: SecretStr\n     github_event_path: Path\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#c5b5af7c532e66d3ac25bd36630e2cd89f24d049", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 147 | Lines Deleted: 4239 | Files Changed: 24 | Hunks: 69 | Methods Changed: 158 | Complexity Δ (Sum/Max): -94/2 | Churn Δ: 4386 | Churn Cumulative: 14086 | Contributors (this commit): 8 | Commits (past 90d): 24 | Contributors (cumulative): 62 | DMM Complexity: 0.0\n\nDIFF:\n@@ -1,13 +1,26 @@\n+import importlib\n+\n import pytest\n from dirty_equals import IsDict\n from fastapi.testclient import TestClient\n \n+from ...utils import needs_py39, needs_py310\n \n-@pytest.fixture(name=\"client\")\n-def get_client():\n-    from docs_src.body_multiple_params.tutorial003 import app\n \n-    client = TestClient(app)\n+@pytest.fixture(\n+    name=\"client\",\n+    params=[\n+        \"tutorial003\",\n+        pytest.param(\"tutorial003_py310\", marks=needs_py310),\n+        \"tutorial003_an\",\n+        pytest.param(\"tutorial003_an_py39\", marks=needs_py39),\n+        pytest.param(\"tutorial003_an_py310\", marks=needs_py310),\n+    ],\n+)\n+def get_client(request: pytest.FixtureRequest):\n+    mod = importlib.import_module(f\"docs_src.body_multiple_params.{request.param}\")\n+\n+    client = TestClient(mod.app)\n     return client\n \n \n\n@@ -1,273 +0,0 @@\n-import pytest\n-from dirty_equals import IsDict\n-from fastapi.testclient import TestClient\n-\n-\n-@pytest.fixture(name=\"client\")\n-def get_client():\n-    from docs_src.body_multiple_params.tutorial003_an import app\n-\n-    client = TestClient(app)\n-    return client\n-\n-\n-def test_post_body_valid(client: TestClient):\n-    response = client.put(\n-        \"/items/5\",\n-        json={\n-            \"importance\": 2,\n-            \"item\": {\"name\": \"Foo\", \"price\": 50.5},\n-            \"user\": {\"username\": \"Dave\"},\n-        },\n-    )\n-    assert response.status_code == 200\n-    assert response.json() == {\n-        \"item_id\": 5,\n-        \"importance\": 2,\n-        \"item\": {\n-            \"name\": \"Foo\",\n-            \"price\": 50.5,\n-            \"description\": None,\n-            \"tax\": None,\n-        },\n-        \"user\": {\"username\": \"Dave\", \"full_name\": None},\n-    }\n-\n-\n-def test_post_body_no_data(client: TestClient):\n-    response = client.put(\"/items/5\", json=None)\n-    assert response.status_code == 422\n-    assert response.json() == IsDict(\n-        {\n-            \"detail\": [\n-                {\n-                    \"type\": \"missing\",\n-                    \"loc\": [\"body\", \"item\"],\n-                    \"msg\": \"Field required\",\n-                    \"input\": None,\n-                },\n-                {\n-                    \"type\": \"missing\",\n-                    \"loc\": [\"body\", \"user\"],\n-                    \"msg\": \"Field required\",\n-                    \"input\": None,\n-                },\n-                {\n-                    \"type\": \"missing\",\n-                    \"loc\": [\"body\", \"importance\"],\n-                    \"msg\": \"Field required\",\n-                    \"input\": None,\n-                },\n-            ]\n-        }\n-    ) | IsDict(\n-        # TODO: remove when deprecating Pydantic v1\n-        {\n-            \"detail\": [\n-                {\n-                    \"loc\": [\"body\", \"item\"],\n-                    \"msg\": \"field required\",\n-                    \"type\": \"value_error.missing\",\n-                },\n-                {\n-                    \"loc\": [\"body\", \"user\"],\n-                    \"msg\": \"field required\",\n-                    \"type\": \"value_error.missing\",\n-                },\n-                {\n-                    \"loc\": [\"body\", \"importance\"],\n-                    \"msg\": \"field required\",\n-                    \"type\": \"value_error.missing\",\n-                },\n-            ]\n-        }\n-    )\n-\n-\n-def test_post_body_empty_list(client: TestClient):\n-    response = client.put(\"/items/5\", json=[])\n-    assert response.status_code == 422\n-    assert response.json() == IsDict(\n-        {\n-            \"detail\": [\n-                {\n-                    \"type\": \"missing\",\n-                    \"loc\": [\"body\", \"item\"],\n-                    \"msg\": \"Field required\",\n-                    \"input\": None,\n-                },\n-                {\n-                    \"type\": \"missing\",\n-                    \"loc\": [\"body\", \"user\"],\n-                    \"msg\": \"Field required\",\n-                    \"input\": None,\n-                },\n-                {\n-                    \"type\": \"missing\",\n-                    \"loc\": [\"body\", \"importance\"],\n-                    \"msg\": \"Field required\",\n-                    \"input\": None,\n-                },\n-            ]\n-        }\n-    ) | IsDict(\n-        # TODO: remove when deprecating Pydantic v1\n-        {\n-            \"detail\": [\n-                {\n-                    \"loc\": [\"body\", \"item\"],\n-                    \"msg\": \"field required\",\n-                    \"type\": \"value_error.missing\",\n-                },\n-                {\n-                    \"loc\": [\"body\", \"user\"],\n-                    \"msg\": \"field required\",\n-                    \"type\": \"value_error.missing\",\n-                },\n-                {\n-                    \"loc\": [\"body\", \"importance\"],\n-                    \"msg\": \"field required\",\n-                    \"type\": \"value_error.missing\",\n-                },\n-            ]\n-        }\n-    )\n-\n-\n-def test_openapi_schema(client: TestClient):\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\n-        \"openapi\": \"3.1.0\",\n-        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n-        \"paths\": {\n-            \"/items/{item_id}\": {\n-                \"put\": {\n-                    \"responses\": {\n-                        \"200\": {\n-                            \"description\": \"Successful Response\",\n-                            \"content\": {\"application/json\": {\"schema\": {}}},\n-                        },\n-                        \"422\": {\n-                            \"description\": \"Validation Error\",\n-                            \"content\": {\n-                                \"application/json\": {\n-                                    \"schema\": {\n-                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n-                                    }\n-                                }\n-                            },\n-                        },\n-                    },\n-                    \"summary\": \"Update Item\",\n-                    \"operationId\": \"update_item_items__item_id__put\",\n-                    \"parameters\": [\n-                        {\n-                            \"required\": True,\n-                            \"schema\": {\"title\": \"Item Id\", \"type\": \"integer\"},\n-                            \"name\": \"item_id\",\n-                            \"in\": \"path\",\n-                        }\n-                    ],\n-                    \"requestBody\": {\n-                        \"content\": {\n-                            \"application/json\": {\n-                                \"schema\": {\n-                                    \"$ref\": \"#/components/schemas/Body_update_item_items__item_id__put\"\n-                                }\n-                            }\n-                        },\n-                        \"required\": True,\n-                    },\n-                }\n-            }\n-        },\n-        \"components\": {\n-            \"schemas\": {\n-                \"Item\": {\n-                    \"title\": \"Item\",\n-                    \"required\": [\"name\", \"price\"],\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"name\": {\"title\": \"Name\", \"type\": \"string\"},\n-                        \"description\": IsDict(\n-                            {\n-                                \"title\": \"Description\",\n-                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n-                            }\n-                        )\n-                        | IsDict(\n-                            # TODO: remove when deprecating Pydantic v1\n-                            {\"title\": \"Description\", \"type\": \"string\"}\n-                        ),\n-                        \"price\": {\"title\": \"Price\", \"type\": \"number\"},\n-                        \"tax\": IsDict(\n-                            {\n-                                \"title\": \"Tax\",\n-                                \"anyOf\": [{\"type\": \"number\"}, {\"type\": \"null\"}],\n-                            }\n-                        )\n-                        | IsDict(\n-                            # TODO: remove when deprecating Pydantic v1\n-                            {\"title\": \"Tax\", \"type\": \"number\"}\n-                        ),\n-                    },\n-                },\n-                \"User\": {\n-                    \"title\": \"User\",\n-                    \"required\": [\"username\"],\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"username\": {\"title\": \"Username\", \"type\": \"string\"},\n-                        \"full_name\": IsDict(\n-                            {\n-                                \"title\": \"Full Name\",\n-                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n-                            }\n-                        )\n-                        | IsDict(\n-                            # TODO: remove when deprecating Pydantic v1\n-                            {\"title\": \"Full Name\", \"type\": \"string\"}\n-                        ),\n-                    },\n-                },\n-                \"Body_update_item_items__item_id__put\": {\n-                    \"title\": \"Body_update_item_items__item_id__put\",\n-                    \"required\": [\"item\", \"user\", \"importance\"],\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"item\": {\"$ref\": \"#/components/schemas/Item\"},\n-                        \"user\": {\"$ref\": \"#/components/schemas/User\"},\n-                        \"importance\": {\"title\": \"Importance\", \"type\": \"integer\"},\n-                    },\n-                },\n-                \"ValidationError\": {\n-                    \"title\": \"ValidationError\",\n-                    \"required\": [\"loc\", \"msg\", \"type\"],\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"loc\": {\n-                            \"title\": \"Location\",\n-                            \"type\": \"array\",\n-                            \"items\": {\n-                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n-                            },\n-                        },\n-                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n-                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n-                    },\n-                },\n-                \"HTTPValidationError\": {\n-                    \"title\": \"HTTPValidationError\",\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"detail\": {\n-                            \"title\": \"Detail\",\n-                            \"type\": \"array\",\n-                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n-                        }\n-                    },\n-                },\n-            }\n-        },\n-    }\n\n@@ -1,279 +0,0 @@\n-import pytest\n-from dirty_equals import IsDict\n-from fastapi.testclient import TestClient\n-\n-from ...utils import needs_py310\n-\n-\n-@pytest.fixture(name=\"client\")\n-def get_client():\n-    from docs_src.body_multiple_params.tutorial003_an_py310 import app\n-\n-    client = TestClient(app)\n-    return client\n-\n-\n-@needs_py310\n-def test_post_body_valid(client: TestClient):\n-    response = client.put(\n-        \"/items/5\",\n-        json={\n-            \"importance\": 2,\n-            \"item\": {\"name\": \"Foo\", \"price\": 50.5},\n-            \"user\": {\"username\": \"Dave\"},\n-        },\n-    )\n-    assert response.status_code == 200\n-    assert response.json() == {\n-        \"item_id\": 5,\n-        \"importance\": 2,\n-        \"item\": {\n-            \"name\": \"Foo\",\n-            \"price\": 50.5,\n-            \"description\": None,\n-            \"tax\": None,\n-        },\n-        \"user\": {\"username\": \"Dave\", \"full_name\": None},\n-    }\n-\n-\n-@needs_py310\n-def test_post_body_no_data(client: TestClient):\n-    response = client.put(\"/items/5\", json=None)\n-    assert response.status_code == 422\n-    assert response.json() == IsDict(\n-        {\n-            \"detail\": [\n-                {\n-                    \"type\": \"missing\",\n-                    \"loc\": [\"body\", \"item\"],\n-                    \"msg\": \"Field required\",\n-                    \"input\": None,\n-                },\n-                {\n-                    \"type\": \"missing\",\n-                    \"loc\": [\"body\", \"user\"],\n-                    \"msg\": \"Field required\",\n-                    \"input\": None,\n-                },\n-                {\n-                    \"type\": \"missing\",\n-                    \"loc\": [\"body\", \"importance\"],\n-                    \"msg\": \"Field required\",\n-                    \"input\": None,\n-                },\n-            ]\n-        }\n-    ) | IsDict(\n-        # TODO: remove when deprecating Pydantic v1\n-        {\n-            \"detail\": [\n-                {\n-                    \"loc\": [\"body\", \"item\"],\n-                    \"msg\": \"field required\",\n-                    \"type\": \"value_error.missing\",\n-                },\n-                {\n-                    \"loc\": [\"body\", \"user\"],\n-                    \"msg\": \"field required\",\n-                    \"type\": \"value_error.missing\",\n-                },\n-                {\n-                    \"loc\": [\"body\", \"importance\"],\n-                    \"msg\": \"field required\",\n-                    \"type\": \"value_error.missing\",\n-                },\n-            ]\n-        }\n-    )\n-\n-\n-@needs_py310\n-def test_post_body_empty_list(client: TestClient):\n-    response = client.put(\"/items/5\", json=[])\n-    assert response.status_code == 422\n-    assert response.json() == IsDict(\n-        {\n-            \"detail\": [\n-                {\n-                    \"type\": \"missing\",\n-                    \"loc\": [\"body\", \"item\"],\n-                    \"msg\": \"Field required\",\n-                    \"input\": None,\n-                },\n-                {\n-                    \"type\": \"missing\",\n-                    \"loc\": [\"body\", \"user\"],\n-                    \"msg\": \"Field required\",\n-                    \"input\": None,\n-                },\n-                {\n-                    \"type\": \"missing\",\n-                    \"loc\": [\"body\", \"importance\"],\n-                    \"msg\": \"Field required\",\n-                    \"input\": None,\n-                },\n-            ]\n-        }\n-    ) | IsDict(\n-        # TODO: remove when deprecating Pydantic v1\n-        {\n-            \"detail\": [\n-                {\n-                    \"loc\": [\"body\", \"item\"],\n-                    \"msg\": \"field required\",\n-                    \"type\": \"value_error.missing\",\n-                },\n-                {\n-                    \"loc\": [\"body\", \"user\"],\n-                    \"msg\": \"field required\",\n-                    \"type\": \"value_error.missing\",\n-                },\n-                {\n-                    \"loc\": [\"body\", \"importance\"],\n-                    \"msg\": \"field required\",\n-                    \"type\": \"value_error.missing\",\n-                },\n-            ]\n-        }\n-    )\n-\n-\n-@needs_py310\n-def test_openapi_schema(client: TestClient):\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\n-        \"openapi\": \"3.1.0\",\n-        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n-        \"paths\": {\n-            \"/items/{item_id}\": {\n-                \"put\": {\n-                    \"responses\": {\n-                        \"200\": {\n-                            \"description\": \"Successful Response\",\n-                            \"content\": {\"application/json\": {\"schema\": {}}},\n-                        },\n-                        \"422\": {\n-                            \"description\": \"Validation Error\",\n-                            \"content\": {\n-                                \"application/json\": {\n-                                    \"schema\": {\n-                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n-                                    }\n-                                }\n-                            },\n-                        },\n-                    },\n-                    \"summary\": \"Update Item\",\n-                    \"operationId\": \"update_item_items__item_id__put\",\n-                    \"parameters\": [\n-                        {\n-                            \"required\": True,\n-                            \"schema\": {\"title\": \"Item Id\", \"type\": \"integer\"},\n-                            \"name\": \"item_id\",\n-                            \"in\": \"path\",\n-                        }\n-                    ],\n-                    \"requestBody\": {\n-                        \"content\": {\n-                            \"application/json\": {\n-                                \"schema\": {\n-                                    \"$ref\": \"#/components/schemas/Body_update_item_items__item_id__put\"\n-                                }\n-                            }\n-                        },\n-                        \"required\": True,\n-                    },\n-                }\n-            }\n-        },\n-        \"components\": {\n-            \"schemas\": {\n-                \"Item\": {\n-                    \"title\": \"Item\",\n-                    \"required\": [\"name\", \"price\"],\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"name\": {\"title\": \"Name\", \"type\": \"string\"},\n-                        \"description\": IsDict(\n-                            {\n-                                \"title\": \"Description\",\n-                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n-                            }\n-                        )\n-                        | IsDict(\n-                            # TODO: remove when deprecating Pydantic v1\n-                            {\"title\": \"Description\", \"type\": \"string\"}\n-                        ),\n-                        \"price\": {\"title\": \"Price\", \"type\": \"number\"},\n-                        \"tax\": IsDict(\n-                            {\n-                                \"title\": \"Tax\",\n-                                \"anyOf\": [{\"type\": \"number\"}, {\"type\": \"null\"}],\n-                            }\n-                        )\n-                        | IsDict(\n-                            # TODO: remove when deprecating Pydantic v1\n-                            {\"title\": \"Tax\", \"type\": \"number\"}\n-                        ),\n-                    },\n-                },\n-                \"User\": {\n-                    \"title\": \"User\",\n-                    \"required\": [\"username\"],\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"username\": {\"title\": \"Username\", \"type\": \"string\"},\n-                        \"full_name\": IsDict(\n-                            {\n-                                \"title\": \"Full Name\",\n-                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n-                            }\n-                        )\n-                        | IsDict(\n-                            # TODO: remove when deprecating Pydantic v1\n-                            {\"title\": \"Full Name\", \"type\": \"string\"}\n-                        ),\n-                    },\n-                },\n-                \"Body_update_item_items__item_id__put\": {\n-                    \"title\": \"Body_update_item_items__item_id__put\",\n-                    \"required\": [\"item\", \"user\", \"importance\"],\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"item\": {\"$ref\": \"#/components/schemas/Item\"},\n-                        \"user\": {\"$ref\": \"#/components/schemas/User\"},\n-                        \"importance\": {\"title\": \"Importance\", \"type\": \"integer\"},\n-                    },\n-                },\n-                \"ValidationError\": {\n-                    \"title\": \"ValidationError\",\n-                    \"required\": [\"loc\", \"msg\", \"type\"],\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"loc\": {\n-                            \"title\": \"Location\",\n-                            \"type\": \"array\",\n-                            \"items\": {\n-                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n-                            },\n-                        },\n-                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n-                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n-                    },\n-                },\n-                \"HTTPValidationError\": {\n-                    \"title\": \"HTTPValidationError\",\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"detail\": {\n-                            \"title\": \"Detail\",\n-                            \"type\": \"array\",\n-                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n-                        }\n-                    },\n-                },\n-            }\n-        },\n-    }\n\n@@ -1,279 +0,0 @@\n-import pytest\n-from dirty_equals import IsDict\n-from fastapi.testclient import TestClient\n-\n-from ...utils import needs_py39\n-\n-\n-@pytest.fixture(name=\"client\")\n-def get_client():\n-    from docs_src.body_multiple_params.tutorial003_an_py39 import app\n-\n-    client = TestClient(app)\n-    return client\n-\n-\n-@needs_py39\n-def test_post_body_valid(client: TestClient):\n-    response = client.put(\n-        \"/items/5\",\n-        json={\n-            \"importance\": 2,\n-            \"item\": {\"name\": \"Foo\", \"price\": 50.5},\n-            \"user\": {\"username\": \"Dave\"},\n-        },\n-    )\n-    assert response.status_code == 200\n-    assert response.json() == {\n-        \"item_id\": 5,\n-        \"importance\": 2,\n-        \"item\": {\n-            \"name\": \"Foo\",\n-            \"price\": 50.5,\n-            \"description\": None,\n-            \"tax\": None,\n-        },\n-        \"user\": {\"username\": \"Dave\", \"full_name\": None},\n-    }\n-\n-\n-@needs_py39\n-def test_post_body_no_data(client: TestClient):\n-    response = client.put(\"/items/5\", json=None)\n-    assert response.status_code == 422\n-    assert response.json() == IsDict(\n-        {\n-            \"detail\": [\n-                {\n-                    \"type\": \"missing\",\n-                    \"loc\": [\"body\", \"item\"],\n-                    \"msg\": \"Field required\",\n-                    \"input\": None,\n-                },\n-                {\n-                    \"type\": \"missing\",\n-                    \"loc\": [\"body\", \"user\"],\n-                    \"msg\": \"Field required\",\n-                    \"input\": None,\n-                },\n-                {\n-                    \"type\": \"missing\",\n-                    \"loc\": [\"body\", \"importance\"],\n-                    \"msg\": \"Field required\",\n-                    \"input\": None,\n-                },\n-            ]\n-        }\n-    ) | IsDict(\n-        # TODO: remove when deprecating Pydantic v1\n-        {\n-            \"detail\": [\n-                {\n-                    \"loc\": [\"body\", \"item\"],\n-                    \"msg\": \"field required\",\n-                    \"type\": \"value_error.missing\",\n-                },\n-                {\n-                    \"loc\": [\"body\", \"user\"],\n-                    \"msg\": \"field required\",\n-                    \"type\": \"value_error.missing\",\n-                },\n-                {\n-                    \"loc\": [\"body\", \"importance\"],\n-                    \"msg\": \"field required\",\n-                    \"type\": \"value_error.missing\",\n-                },\n-            ]\n-        }\n-    )\n-\n-\n-@needs_py39\n-def test_post_body_empty_list(client: TestClient):\n-    response = client.put(\"/items/5\", json=[])\n-    assert response.status_code == 422\n-    assert response.json() == IsDict(\n-        {\n-            \"detail\": [\n-                {\n-                    \"type\": \"missing\",\n-                    \"loc\": [\"body\", \"item\"],\n-                    \"msg\": \"Field required\",\n-                    \"input\": None,\n-                },\n-                {\n-                    \"type\": \"missing\",\n-                    \"loc\": [\"body\", \"user\"],\n-                    \"msg\": \"Field required\",\n-                    \"input\": None,\n-                },\n-                {\n-                    \"type\": \"missing\",\n-                    \"loc\": [\"body\", \"importance\"],\n-                    \"msg\": \"Field required\",\n-                    \"input\": None,\n-                },\n-            ]\n-        }\n-    ) | IsDict(\n-        # TODO: remove when deprecating Pydantic v1\n-        {\n-            \"detail\": [\n-                {\n-                    \"loc\": [\"body\", \"item\"],\n-                    \"msg\": \"field required\",\n-                    \"type\": \"value_error.missing\",\n-                },\n-                {\n-                    \"loc\": [\"body\", \"user\"],\n-                    \"msg\": \"field required\",\n-                    \"type\": \"value_error.missing\",\n-                },\n-                {\n-                    \"loc\": [\"body\", \"importance\"],\n-                    \"msg\": \"field required\",\n-                    \"type\": \"value_error.missing\",\n-                },\n-            ]\n-        }\n-    )\n-\n-\n-@needs_py39\n-def test_openapi_schema(client: TestClient):\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\n-        \"openapi\": \"3.1.0\",\n-        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n-        \"paths\": {\n-            \"/items/{item_id}\": {\n-                \"put\": {\n-                    \"responses\": {\n-                        \"200\": {\n-                            \"description\": \"Successful Response\",\n-                            \"content\": {\"application/json\": {\"schema\": {}}},\n-                        },\n-                        \"422\": {\n-                            \"description\": \"Validation Error\",\n-                            \"content\": {\n-                                \"application/json\": {\n-                                    \"schema\": {\n-                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n-                                    }\n-                                }\n-                            },\n-                        },\n-                    },\n-                    \"summary\": \"Update Item\",\n-                    \"operationId\": \"update_item_items__item_id__put\",\n-                    \"parameters\": [\n-                        {\n-                            \"required\": True,\n-                            \"schema\": {\"title\": \"Item Id\", \"type\": \"integer\"},\n-                            \"name\": \"item_id\",\n-                            \"in\": \"path\",\n-                        }\n-                    ],\n-                    \"requestBody\": {\n-                        \"content\": {\n-                            \"application/json\": {\n-                                \"schema\": {\n-                                    \"$ref\": \"#/components/schemas/Body_update_item_items__item_id__put\"\n-                                }\n-                            }\n-                        },\n-                        \"required\": True,\n-                    },\n-                }\n-            }\n-        },\n-        \"components\": {\n-            \"schemas\": {\n-                \"Item\": {\n-                    \"title\": \"Item\",\n-                    \"required\": [\"name\", \"price\"],\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"name\": {\"title\": \"Name\", \"type\": \"string\"},\n-                        \"description\": IsDict(\n-                            {\n-                                \"title\": \"Description\",\n-                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n-                            }\n-                        )\n-                        | IsDict(\n-                            # TODO: remove when deprecating Pydantic v1\n-                            {\"title\": \"Description\", \"type\": \"string\"}\n-                        ),\n-                        \"price\": {\"title\": \"Price\", \"type\": \"number\"},\n-                        \"tax\": IsDict(\n-                            {\n-                                \"title\": \"Tax\",\n-                                \"anyOf\": [{\"type\": \"number\"}, {\"type\": \"null\"}],\n-                            }\n-                        )\n-                        | IsDict(\n-                            # TODO: remove when deprecating Pydantic v1\n-                            {\"title\": \"Tax\", \"type\": \"number\"}\n-                        ),\n-                    },\n-                },\n-                \"User\": {\n-                    \"title\": \"User\",\n-                    \"required\": [\"username\"],\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"username\": {\"title\": \"Username\", \"type\": \"string\"},\n-                        \"full_name\": IsDict(\n-                            {\n-                                \"title\": \"Full Name\",\n-                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n-                            }\n-                        )\n-                        | IsDict(\n-                            # TODO: remove when deprecating Pydantic v1\n-                            {\"title\": \"Full Name\", \"type\": \"string\"}\n-                        ),\n-                    },\n-                },\n-                \"Body_update_item_items__item_id__put\": {\n-                    \"title\": \"Body_update_item_items__item_id__put\",\n-                    \"required\": [\"item\", \"user\", \"importance\"],\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"item\": {\"$ref\": \"#/components/schemas/Item\"},\n-                        \"user\": {\"$ref\": \"#/components/schemas/User\"},\n-                        \"importance\": {\"title\": \"Importance\", \"type\": \"integer\"},\n-                    },\n-                },\n-                \"ValidationError\": {\n-                    \"title\": \"ValidationError\",\n-                    \"required\": [\"loc\", \"msg\", \"type\"],\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"loc\": {\n-                            \"title\": \"Location\",\n-                            \"type\": \"array\",\n-                            \"items\": {\n-                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n-                            },\n-                        },\n-                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n-                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n-                    },\n-                },\n-                \"HTTPValidationError\": {\n-                    \"title\": \"HTTPValidationError\",\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"detail\": {\n-                            \"title\": \"Detail\",\n-                            \"type\": \"array\",\n-                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n-                        }\n-                    },\n-                },\n-            }\n-        },\n-    }\n\n@@ -1,279 +0,0 @@\n-import pytest\n-from dirty_equals import IsDict\n-from fastapi.testclient import TestClient\n-\n-from ...utils import needs_py310\n-\n-\n-@pytest.fixture(name=\"client\")\n-def get_client():\n-    from docs_src.body_multiple_params.tutorial003_py310 import app\n-\n-    client = TestClient(app)\n-    return client\n-\n-\n-@needs_py310\n-def test_post_body_valid(client: TestClient):\n-    response = client.put(\n-        \"/items/5\",\n-        json={\n-            \"importance\": 2,\n-            \"item\": {\"name\": \"Foo\", \"price\": 50.5},\n-            \"user\": {\"username\": \"Dave\"},\n-        },\n-    )\n-    assert response.status_code == 200\n-    assert response.json() == {\n-        \"item_id\": 5,\n-        \"importance\": 2,\n-        \"item\": {\n-            \"name\": \"Foo\",\n-            \"price\": 50.5,\n-            \"description\": None,\n-            \"tax\": None,\n-        },\n-        \"user\": {\"username\": \"Dave\", \"full_name\": None},\n-    }\n-\n-\n-@needs_py310\n-def test_post_body_no_data(client: TestClient):\n-    response = client.put(\"/items/5\", json=None)\n-    assert response.status_code == 422\n-    assert response.json() == IsDict(\n-        {\n-            \"detail\": [\n-                {\n-                    \"type\": \"missing\",\n-                    \"loc\": [\"body\", \"item\"],\n-                    \"msg\": \"Field required\",\n-                    \"input\": None,\n-                },\n-                {\n-                    \"type\": \"missing\",\n-                    \"loc\": [\"body\", \"user\"],\n-                    \"msg\": \"Field required\",\n-                    \"input\": None,\n-                },\n-                {\n-                    \"type\": \"missing\",\n-                    \"loc\": [\"body\", \"importance\"],\n-                    \"msg\": \"Field required\",\n-                    \"input\": None,\n-                },\n-            ]\n-        }\n-    ) | IsDict(\n-        # TODO: remove when deprecating Pydantic v1\n-        {\n-            \"detail\": [\n-                {\n-                    \"loc\": [\"body\", \"item\"],\n-                    \"msg\": \"field required\",\n-                    \"type\": \"value_error.missing\",\n-                },\n-                {\n-                    \"loc\": [\"body\", \"user\"],\n-                    \"msg\": \"field required\",\n-                    \"type\": \"value_error.missing\",\n-                },\n-                {\n-                    \"loc\": [\"body\", \"importance\"],\n-                    \"msg\": \"field required\",\n-                    \"type\": \"value_error.missing\",\n-                },\n-            ]\n-        }\n-    )\n-\n-\n-@needs_py310\n-def test_post_body_empty_list(client: TestClient):\n-    response = client.put(\"/items/5\", json=[])\n-    assert response.status_code == 422\n-    assert response.json() == IsDict(\n-        {\n-            \"detail\": [\n-                {\n-                    \"type\": \"missing\",\n-                    \"loc\": [\"body\", \"item\"],\n-                    \"msg\": \"Field required\",\n-                    \"input\": None,\n-                },\n-                {\n-                    \"type\": \"missing\",\n-                    \"loc\": [\"body\", \"user\"],\n-                    \"msg\": \"Field required\",\n-                    \"input\": None,\n-                },\n-                {\n-                    \"type\": \"missing\",\n-                    \"loc\": [\"body\", \"importance\"],\n-                    \"msg\": \"Field required\",\n-                    \"input\": None,\n-                },\n-            ]\n-        }\n-    ) | IsDict(\n-        # TODO: remove when deprecating Pydantic v1\n-        {\n-            \"detail\": [\n-                {\n-                    \"loc\": [\"body\", \"item\"],\n-                    \"msg\": \"field required\",\n-                    \"type\": \"value_error.missing\",\n-                },\n-                {\n-                    \"loc\": [\"body\", \"user\"],\n-                    \"msg\": \"field required\",\n-                    \"type\": \"value_error.missing\",\n-                },\n-                {\n-                    \"loc\": [\"body\", \"importance\"],\n-                    \"msg\": \"field required\",\n-                    \"type\": \"value_error.missing\",\n-                },\n-            ]\n-        }\n-    )\n-\n-\n-@needs_py310\n-def test_openapi_schema(client: TestClient):\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\n-        \"openapi\": \"3.1.0\",\n-        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n-        \"paths\": {\n-            \"/items/{item_id}\": {\n-                \"put\": {\n-                    \"responses\": {\n-                        \"200\": {\n-                            \"description\": \"Successful Response\",\n-                            \"content\": {\"application/json\": {\"schema\": {}}},\n-                        },\n-                        \"422\": {\n-                            \"description\": \"Validation Error\",\n-                            \"content\": {\n-                                \"application/json\": {\n-                                    \"schema\": {\n-                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n-                                    }\n-                                }\n-                            },\n-                        },\n-                    },\n-                    \"summary\": \"Update Item\",\n-                    \"operationId\": \"update_item_items__item_id__put\",\n-                    \"parameters\": [\n-                        {\n-                            \"required\": True,\n-                            \"schema\": {\"title\": \"Item Id\", \"type\": \"integer\"},\n-                            \"name\": \"item_id\",\n-                            \"in\": \"path\",\n-                        }\n-                    ],\n-                    \"requestBody\": {\n-                        \"content\": {\n-                            \"application/json\": {\n-                                \"schema\": {\n-                                    \"$ref\": \"#/components/schemas/Body_update_item_items__item_id__put\"\n-                                }\n-                            }\n-                        },\n-                        \"required\": True,\n-                    },\n-                }\n-            }\n-        },\n-        \"components\": {\n-            \"schemas\": {\n-                \"Item\": {\n-                    \"title\": \"Item\",\n-                    \"required\": [\"name\", \"price\"],\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"name\": {\"title\": \"Name\", \"type\": \"string\"},\n-                        \"description\": IsDict(\n-                            {\n-                                \"title\": \"Description\",\n-                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n-                            }\n-                        )\n-                        | IsDict(\n-                            # TODO: remove when deprecating Pydantic v1\n-                            {\"title\": \"Description\", \"type\": \"string\"}\n-                        ),\n-                        \"price\": {\"title\": \"Price\", \"type\": \"number\"},\n-                        \"tax\": IsDict(\n-                            {\n-                                \"title\": \"Tax\",\n-                                \"anyOf\": [{\"type\": \"number\"}, {\"type\": \"null\"}],\n-                            }\n-                        )\n-                        | IsDict(\n-                            # TODO: remove when deprecating Pydantic v1\n-                            {\"title\": \"Tax\", \"type\": \"number\"}\n-                        ),\n-                    },\n-                },\n-                \"User\": {\n-                    \"title\": \"User\",\n-                    \"required\": [\"username\"],\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"username\": {\"title\": \"Username\", \"type\": \"string\"},\n-                        \"full_name\": IsDict(\n-                            {\n-                                \"title\": \"Full Name\",\n-                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n-                            }\n-                        )\n-                        | IsDict(\n-                            # TODO: remove when deprecating Pydantic v1\n-                            {\"title\": \"Full Name\", \"type\": \"string\"}\n-                        ),\n-                    },\n-                },\n-                \"Body_update_item_items__item_id__put\": {\n-                    \"title\": \"Body_update_item_items__item_id__put\",\n-                    \"required\": [\"item\", \"user\", \"importance\"],\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"item\": {\"$ref\": \"#/components/schemas/Item\"},\n-                        \"user\": {\"$ref\": \"#/components/schemas/User\"},\n-                        \"importance\": {\"title\": \"Importance\", \"type\": \"integer\"},\n-                    },\n-                },\n-                \"ValidationError\": {\n-                    \"title\": \"ValidationError\",\n-                    \"required\": [\"loc\", \"msg\", \"type\"],\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"loc\": {\n-                            \"title\": \"Location\",\n-                            \"type\": \"array\",\n-                            \"items\": {\n-                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n-                            },\n-                        },\n-                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n-                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n-                    },\n-                },\n-                \"HTTPValidationError\": {\n-                    \"title\": \"HTTPValidationError\",\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"detail\": {\n-                            \"title\": \"Detail\",\n-                            \"type\": \"array\",\n-                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n-                        }\n-                    },\n-                },\n-            }\n-        },\n-    }\n\n@@ -1,23 +1,28 @@\n+import importlib\n+\n+import pytest\n from dirty_equals import IsDict\n from fastapi.testclient import TestClient\n \n-from docs_src.request_files.tutorial001 import app\n-\n-client = TestClient(app)\n+from ...utils import needs_py39\n \n \n-file_required = {\n-    \"detail\": [\n-        {\n-            \"loc\": [\"body\", \"file\"],\n-            \"msg\": \"field required\",\n-            \"type\": \"value_error.missing\",\n-        }\n-    ]\n-}\n+@pytest.fixture(\n+    name=\"client\",\n+    params=[\n+        \"tutorial001\",\n+        \"tutorial001_an\",\n+        pytest.param(\"tutorial001_an_py39\", marks=needs_py39),\n+    ],\n+)\n+def get_client(request: pytest.FixtureRequest):\n+    mod = importlib.import_module(f\"docs_src.request_files.{request.param}\")\n+\n+    client = TestClient(mod.app)\n+    return client\n \n \n-def test_post_form_no_body():\n+def test_post_form_no_body(client: TestClient):\n     response = client.post(\"/files/\")\n     assert response.status_code == 422, response.text\n     assert response.json() == IsDict(\n@@ -45,7 +50,7 @@ def test_post_form_no_body():\n     )\n \n \n-def test_post_body_json():\n+def test_post_body_json(client: TestClient):\n     response = client.post(\"/files/\", json={\"file\": \"Foo\"})\n     assert response.status_code == 422, response.text\n     assert response.json() == IsDict(\n@@ -73,41 +78,38 @@ def test_post_body_json():\n     )\n \n \n-def test_post_file(tmp_path):\n+def test_post_file(tmp_path, client: TestClient):\n     path = tmp_path / \"test.txt\"\n     path.write_bytes(b\"<file content>\")\n \n-    client = TestClient(app)\n     with path.open(\"rb\") as file:\n         response = client.post(\"/files/\", files={\"file\": file})\n     assert response.status_code == 200, response.text\n     assert response.json() == {\"file_size\": 14}\n \n \n-def test_post_large_file(tmp_path):\n+def test_post_large_file(tmp_path, client: TestClient):\n     default_pydantic_max_size = 2**16\n     path = tmp_path / \"test.txt\"\n     path.write_bytes(b\"x\" * (default_pydantic_max_size + 1))\n \n-    client = TestClient(app)\n     with path.open(\"rb\") as file:\n         response = client.post(\"/files/\", files={\"file\": file})\n     assert response.status_code == 200, response.text\n     assert response.json() == {\"file_size\": default_pydantic_max_size + 1}\n \n \n-def test_post_upload_file(tmp_path):\n+def test_post_upload_file(tmp_path, client: TestClient):\n     path = tmp_path / \"test.txt\"\n     path.write_bytes(b\"<file content>\")\n \n-    client = TestClient(app)\n     with path.open(\"rb\") as file:\n         response = client.post(\"/uploadfile/\", files={\"file\": file})\n     assert response.status_code == 200, response.text\n     assert response.json() == {\"filename\": \"test.txt\"}\n \n \n-def test_openapi_schema():\n+def test_openapi_schema(client: TestClient):\n     response = client.get(\"/openapi.json\")\n     assert response.status_code == 200, response.text\n     assert response.json() == {\n\n@@ -1,46 +1,63 @@\n+import importlib\n+from pathlib import Path\n+\n+import pytest\n from dirty_equals import IsDict\n from fastapi.testclient import TestClient\n \n-from docs_src.request_files.tutorial001_02 import app\n-\n-client = TestClient(app)\n+from ...utils import needs_py39, needs_py310\n \n \n-def test_post_form_no_body():\n+@pytest.fixture(\n+    name=\"client\",\n+    params=[\n+        \"tutorial001_02\",\n+        pytest.param(\"tutorial001_02_py310\", marks=needs_py310),\n+        \"tutorial001_02_an\",\n+        pytest.param(\"tutorial001_02_an_py39\", marks=needs_py39),\n+        pytest.param(\"tutorial001_02_an_py310\", marks=needs_py310),\n+    ],\n+)\n+def get_client(request: pytest.FixtureRequest):\n+    mod = importlib.import_module(f\"docs_src.request_files.{request.param}\")\n+\n+    client = TestClient(mod.app)\n+    return client\n+\n+\n+def test_post_form_no_body(client: TestClient):\n     response = client.post(\"/files/\")\n     assert response.status_code == 200, response.text\n     assert response.json() == {\"message\": \"No file sent\"}\n \n \n-def test_post_uploadfile_no_body():\n+def test_post_uploadfile_no_body(client: TestClient):\n     response = client.post(\"/uploadfile/\")\n     assert response.status_code == 200, response.text\n     assert response.json() == {\"message\": \"No upload file sent\"}\n \n \n-def test_post_file(tmp_path):\n+def test_post_file(tmp_path: Path, client: TestClient):\n     path = tmp_path / \"test.txt\"\n     path.write_bytes(b\"<file content>\")\n \n-    client = TestClient(app)\n     with path.open(\"rb\") as file:\n         response = client.post(\"/files/\", files={\"file\": file})\n     assert response.status_code == 200, response.text\n     assert response.json() == {\"file_size\": 14}\n \n \n-def test_post_upload_file(tmp_path):\n+def test_post_upload_file(tmp_path: Path, client: TestClient):\n     path = tmp_path / \"test.txt\"\n     path.write_bytes(b\"<file content>\")\n \n-    client = TestClient(app)\n     with path.open(\"rb\") as file:\n         response = client.post(\"/uploadfile/\", files={\"file\": file})\n     assert response.status_code == 200, response.text\n     assert response.json() == {\"filename\": \"test.txt\"}\n \n \n-def test_openapi_schema():\n+def test_openapi_schema(client: TestClient):\n     response = client.get(\"/openapi.json\")\n     assert response.status_code == 200, response.text\n     assert response.json() == {\n\n@@ -1,208 +0,0 @@\n-from dirty_equals import IsDict\n-from fastapi.testclient import TestClient\n-\n-from docs_src.request_files.tutorial001_02_an import app\n-\n-client = TestClient(app)\n-\n-\n-def test_post_form_no_body():\n-    response = client.post(\"/files/\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"message\": \"No file sent\"}\n-\n-\n-def test_post_uploadfile_no_body():\n-    response = client.post(\"/uploadfile/\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"message\": \"No upload file sent\"}\n-\n-\n-def test_post_file(tmp_path):\n-    path = tmp_path / \"test.txt\"\n-    path.write_bytes(b\"<file content>\")\n-\n-    client = TestClient(app)\n-    with path.open(\"rb\") as file:\n-        response = client.post(\"/files/\", files={\"file\": file})\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"file_size\": 14}\n-\n-\n-def test_post_upload_file(tmp_path):\n-    path = tmp_path / \"test.txt\"\n-    path.write_bytes(b\"<file content>\")\n-\n-    client = TestClient(app)\n-    with path.open(\"rb\") as file:\n-        response = client.post(\"/uploadfile/\", files={\"file\": file})\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"filename\": \"test.txt\"}\n-\n-\n-def test_openapi_schema():\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\n-        \"openapi\": \"3.1.0\",\n-        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n-        \"paths\": {\n-            \"/files/\": {\n-                \"post\": {\n-                    \"summary\": \"Create File\",\n-                    \"operationId\": \"create_file_files__post\",\n-                    \"requestBody\": {\n-                        \"content\": {\n-                            \"multipart/form-data\": {\n-                                \"schema\": IsDict(\n-                                    {\n-                                        \"allOf\": [\n-                                            {\n-                                                \"$ref\": \"#/components/schemas/Body_create_file_files__post\"\n-                                            }\n-                                        ],\n-                                        \"title\": \"Body\",\n-                                    }\n-                                )\n-                                | IsDict(\n-                                    # TODO: remove when deprecating Pydantic v1\n-                                    {\n-                                        \"$ref\": \"#/components/schemas/Body_create_file_files__post\"\n-                                    }\n-                                )\n-                            }\n-                        }\n-                    },\n-                    \"responses\": {\n-                        \"200\": {\n-                            \"description\": \"Successful Response\",\n-                            \"content\": {\"application/json\": {\"schema\": {}}},\n-                        },\n-                        \"422\": {\n-                            \"description\": \"Validation Error\",\n-                            \"content\": {\n-                                \"application/json\": {\n-                                    \"schema\": {\n-                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n-                                    }\n-                                }\n-                            },\n-                        },\n-                    },\n-                }\n-            },\n-            \"/uploadfile/\": {\n-                \"post\": {\n-                    \"summary\": \"Create Upload File\",\n-                    \"operationId\": \"create_upload_file_uploadfile__post\",\n-                    \"requestBody\": {\n-                        \"content\": {\n-                            \"multipart/form-data\": {\n-                                \"schema\": IsDict(\n-                                    {\n-                                        \"allOf\": [\n-                                            {\n-                                                \"$ref\": \"#/components/schemas/Body_create_upload_file_uploadfile__post\"\n-                                            }\n-                                        ],\n-                                        \"title\": \"Body\",\n-                                    }\n-                                )\n-                                | IsDict(\n-                                    # TODO: remove when deprecating Pydantic v1\n-                                    {\n-                                        \"$ref\": \"#/components/schemas/Body_create_upload_file_uploadfile__post\"\n-                                    }\n-                                )\n-                            }\n-                        }\n-                    },\n-                    \"responses\": {\n-                        \"200\": {\n-                            \"description\": \"Successful Response\",\n-                            \"content\": {\"application/json\": {\"schema\": {}}},\n-                        },\n-                        \"422\": {\n-                            \"description\": \"Validation Error\",\n-                            \"content\": {\n-                                \"application/json\": {\n-                                    \"schema\": {\n-                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n-                                    }\n-                                }\n-                            },\n-                        },\n-                    },\n-                }\n-            },\n-        },\n-        \"components\": {\n-            \"schemas\": {\n-                \"Body_create_file_files__post\": {\n-                    \"title\": \"Body_create_file_files__post\",\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"file\": IsDict(\n-                            {\n-                                \"title\": \"File\",\n-                                \"anyOf\": [\n-                                    {\"type\": \"string\", \"format\": \"binary\"},\n-                                    {\"type\": \"null\"},\n-                                ],\n-                            }\n-                        )\n-                        | IsDict(\n-                            # TODO: remove when deprecating Pydantic v1\n-                            {\"title\": \"File\", \"type\": \"string\", \"format\": \"binary\"}\n-                        )\n-                    },\n-                },\n-                \"Body_create_upload_file_uploadfile__post\": {\n-                    \"title\": \"Body_create_upload_file_uploadfile__post\",\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"file\": IsDict(\n-                            {\n-                                \"title\": \"File\",\n-                                \"anyOf\": [\n-                                    {\"type\": \"string\", \"format\": \"binary\"},\n-                                    {\"type\": \"null\"},\n-                                ],\n-                            }\n-                        )\n-                        | IsDict(\n-                            # TODO: remove when deprecating Pydantic v1\n-                            {\"title\": \"File\", \"type\": \"string\", \"format\": \"binary\"}\n-                        )\n-                    },\n-                },\n-                \"HTTPValidationError\": {\n-                    \"title\": \"HTTPValidationError\",\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"detail\": {\n-                            \"title\": \"Detail\",\n-                            \"type\": \"array\",\n-                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n-                        }\n-                    },\n-                },\n-                \"ValidationError\": {\n-                    \"title\": \"ValidationError\",\n-                    \"required\": [\"loc\", \"msg\", \"type\"],\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"loc\": {\n-                            \"title\": \"Location\",\n-                            \"type\": \"array\",\n-                            \"items\": {\n-                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n-                            },\n-                        },\n-                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n-                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n-                    },\n-                },\n-            }\n-        },\n-    }\n\n@@ -1,220 +0,0 @@\n-from pathlib import Path\n-\n-import pytest\n-from dirty_equals import IsDict\n-from fastapi.testclient import TestClient\n-\n-from ...utils import needs_py310\n-\n-\n-@pytest.fixture(name=\"client\")\n-def get_client():\n-    from docs_src.request_files.tutorial001_02_an_py310 import app\n-\n-    client = TestClient(app)\n-    return client\n-\n-\n-@needs_py310\n-def test_post_form_no_body(client: TestClient):\n-    response = client.post(\"/files/\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"message\": \"No file sent\"}\n-\n-\n-@needs_py310\n-def test_post_uploadfile_no_body(client: TestClient):\n-    response = client.post(\"/uploadfile/\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"message\": \"No upload file sent\"}\n-\n-\n-@needs_py310\n-def test_post_file(tmp_path: Path, client: TestClient):\n-    path = tmp_path / \"test.txt\"\n-    path.write_bytes(b\"<file content>\")\n-\n-    with path.open(\"rb\") as file:\n-        response = client.post(\"/files/\", files={\"file\": file})\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"file_size\": 14}\n-\n-\n-@needs_py310\n-def test_post_upload_file(tmp_path: Path, client: TestClient):\n-    path = tmp_path / \"test.txt\"\n-    path.write_bytes(b\"<file content>\")\n-\n-    with path.open(\"rb\") as file:\n-        response = client.post(\"/uploadfile/\", files={\"file\": file})\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"filename\": \"test.txt\"}\n-\n-\n-@needs_py310\n-def test_openapi_schema(client: TestClient):\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\n-        \"openapi\": \"3.1.0\",\n-        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n-        \"paths\": {\n-            \"/files/\": {\n-                \"post\": {\n-                    \"summary\": \"Create File\",\n-                    \"operationId\": \"create_file_files__post\",\n-                    \"requestBody\": {\n-                        \"content\": {\n-                            \"multipart/form-data\": {\n-                                \"schema\": IsDict(\n-                                    {\n-                                        \"allOf\": [\n-                                            {\n-                                                \"$ref\": \"#/components/schemas/Body_create_file_files__post\"\n-                                            }\n-                                        ],\n-                                        \"title\": \"Body\",\n-                                    }\n-                                )\n-                                | IsDict(\n-                                    # TODO: remove when deprecating Pydantic v1\n-                                    {\n-                                        \"$ref\": \"#/components/schemas/Body_create_file_files__post\"\n-                                    }\n-                                )\n-                            }\n-                        }\n-                    },\n-                    \"responses\": {\n-                        \"200\": {\n-                            \"description\": \"Successful Response\",\n-                            \"content\": {\"application/json\": {\"schema\": {}}},\n-                        },\n-                        \"422\": {\n-                            \"description\": \"Validation Error\",\n-                            \"content\": {\n-                                \"application/json\": {\n-                                    \"schema\": {\n-                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n-                                    }\n-                                }\n-                            },\n-                        },\n-                    },\n-                }\n-            },\n-            \"/uploadfile/\": {\n-                \"post\": {\n-                    \"summary\": \"Create Upload File\",\n-                    \"operationId\": \"create_upload_file_uploadfile__post\",\n-                    \"requestBody\": {\n-                        \"content\": {\n-                            \"multipart/form-data\": {\n-                                \"schema\": IsDict(\n-                                    {\n-                                        \"allOf\": [\n-                                            {\n-                                                \"$ref\": \"#/components/schemas/Body_create_upload_file_uploadfile__post\"\n-                                            }\n-                                        ],\n-                                        \"title\": \"Body\",\n-                                    }\n-                                )\n-                                | IsDict(\n-                                    # TODO: remove when deprecating Pydantic v1\n-                                    {\n-                                        \"$ref\": \"#/components/schemas/Body_create_upload_file_uploadfile__post\"\n-                                    }\n-                                )\n-                            }\n-                        }\n-                    },\n-                    \"responses\": {\n-                        \"200\": {\n-                            \"description\": \"Successful Response\",\n-                            \"content\": {\"application/json\": {\"schema\": {}}},\n-                        },\n-                        \"422\": {\n-                            \"description\": \"Validation Error\",\n-                            \"content\": {\n-                                \"application/json\": {\n-                                    \"schema\": {\n-                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n-                                    }\n-                                }\n-                            },\n-                        },\n-                    },\n-                }\n-            },\n-        },\n-        \"components\": {\n-            \"schemas\": {\n-                \"Body_create_file_files__post\": {\n-                    \"title\": \"Body_create_file_files__post\",\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"file\": IsDict(\n-                            {\n-                                \"title\": \"File\",\n-                                \"anyOf\": [\n-                                    {\"type\": \"string\", \"format\": \"binary\"},\n-                                    {\"type\": \"null\"},\n-                                ],\n-                            }\n-                        )\n-                        | IsDict(\n-                            # TODO: remove when deprecating Pydantic v1\n-                            {\"title\": \"File\", \"type\": \"string\", \"format\": \"binary\"}\n-                        )\n-                    },\n-                },\n-                \"Body_create_upload_file_uploadfile__post\": {\n-                    \"title\": \"Body_create_upload_file_uploadfile__post\",\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"file\": IsDict(\n-                            {\n-                                \"title\": \"File\",\n-                                \"anyOf\": [\n-                                    {\"type\": \"string\", \"format\": \"binary\"},\n-                                    {\"type\": \"null\"},\n-                                ],\n-                            }\n-                        )\n-                        | IsDict(\n-                            # TODO: remove when deprecating Pydantic v1\n-                            {\"title\": \"File\", \"type\": \"string\", \"format\": \"binary\"}\n-                        )\n-                    },\n-                },\n-                \"HTTPValidationError\": {\n-                    \"title\": \"HTTPValidationError\",\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"detail\": {\n-                            \"title\": \"Detail\",\n-                            \"type\": \"array\",\n-                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n-                        }\n-                    },\n-                },\n-                \"ValidationError\": {\n-                    \"title\": \"ValidationError\",\n-                    \"required\": [\"loc\", \"msg\", \"type\"],\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"loc\": {\n-                            \"title\": \"Location\",\n-                            \"type\": \"array\",\n-                            \"items\": {\n-                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n-                            },\n-                        },\n-                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n-                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n-                    },\n-                },\n-            }\n-        },\n-    }\n\n@@ -1,220 +0,0 @@\n-from pathlib import Path\n-\n-import pytest\n-from dirty_equals import IsDict\n-from fastapi.testclient import TestClient\n-\n-from ...utils import needs_py39\n-\n-\n-@pytest.fixture(name=\"client\")\n-def get_client():\n-    from docs_src.request_files.tutorial001_02_an_py39 import app\n-\n-    client = TestClient(app)\n-    return client\n-\n-\n-@needs_py39\n-def test_post_form_no_body(client: TestClient):\n-    response = client.post(\"/files/\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"message\": \"No file sent\"}\n-\n-\n-@needs_py39\n-def test_post_uploadfile_no_body(client: TestClient):\n-    response = client.post(\"/uploadfile/\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"message\": \"No upload file sent\"}\n-\n-\n-@needs_py39\n-def test_post_file(tmp_path: Path, client: TestClient):\n-    path = tmp_path / \"test.txt\"\n-    path.write_bytes(b\"<file content>\")\n-\n-    with path.open(\"rb\") as file:\n-        response = client.post(\"/files/\", files={\"file\": file})\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"file_size\": 14}\n-\n-\n-@needs_py39\n-def test_post_upload_file(tmp_path: Path, client: TestClient):\n-    path = tmp_path / \"test.txt\"\n-    path.write_bytes(b\"<file content>\")\n-\n-    with path.open(\"rb\") as file:\n-        response = client.post(\"/uploadfile/\", files={\"file\": file})\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"filename\": \"test.txt\"}\n-\n-\n-@needs_py39\n-def test_openapi_schema(client: TestClient):\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\n-        \"openapi\": \"3.1.0\",\n-        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n-        \"paths\": {\n-            \"/files/\": {\n-                \"post\": {\n-                    \"summary\": \"Create File\",\n-                    \"operationId\": \"create_file_files__post\",\n-                    \"requestBody\": {\n-                        \"content\": {\n-                            \"multipart/form-data\": {\n-                                \"schema\": IsDict(\n-                                    {\n-                                        \"allOf\": [\n-                                            {\n-                                                \"$ref\": \"#/components/schemas/Body_create_file_files__post\"\n-                                            }\n-                                        ],\n-                                        \"title\": \"Body\",\n-                                    }\n-                                )\n-                                | IsDict(\n-                                    # TODO: remove when deprecating Pydantic v1\n-                                    {\n-                                        \"$ref\": \"#/components/schemas/Body_create_file_files__post\"\n-                                    }\n-                                )\n-                            }\n-                        }\n-                    },\n-                    \"responses\": {\n-                        \"200\": {\n-                            \"description\": \"Successful Response\",\n-                            \"content\": {\"application/json\": {\"schema\": {}}},\n-                        },\n-                        \"422\": {\n-                            \"description\": \"Validation Error\",\n-                            \"content\": {\n-                                \"application/json\": {\n-                                    \"schema\": {\n-                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n-                                    }\n-                                }\n-                            },\n-                        },\n-                    },\n-                }\n-            },\n-            \"/uploadfile/\": {\n-                \"post\": {\n-                    \"summary\": \"Create Upload File\",\n-                    \"operationId\": \"create_upload_file_uploadfile__post\",\n-                    \"requestBody\": {\n-                        \"content\": {\n-                            \"multipart/form-data\": {\n-                                \"schema\": IsDict(\n-                                    {\n-                                        \"allOf\": [\n-                                            {\n-                                                \"$ref\": \"#/components/schemas/Body_create_upload_file_uploadfile__post\"\n-                                            }\n-                                        ],\n-                                        \"title\": \"Body\",\n-                                    }\n-                                )\n-                                | IsDict(\n-                                    # TODO: remove when deprecating Pydantic v1\n-                                    {\n-                                        \"$ref\": \"#/components/schemas/Body_create_upload_file_uploadfile__post\"\n-                                    }\n-                                )\n-                            }\n-                        }\n-                    },\n-                    \"responses\": {\n-                        \"200\": {\n-                            \"description\": \"Successful Response\",\n-                            \"content\": {\"application/json\": {\"schema\": {}}},\n-                        },\n-                        \"422\": {\n-                            \"description\": \"Validation Error\",\n-                            \"content\": {\n-                                \"application/json\": {\n-                                    \"schema\": {\n-                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n-                                    }\n-                                }\n-                            },\n-                        },\n-                    },\n-                }\n-            },\n-        },\n-        \"components\": {\n-            \"schemas\": {\n-                \"Body_create_file_files__post\": {\n-                    \"title\": \"Body_create_file_files__post\",\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"file\": IsDict(\n-                            {\n-                                \"title\": \"File\",\n-                                \"anyOf\": [\n-                                    {\"type\": \"string\", \"format\": \"binary\"},\n-                                    {\"type\": \"null\"},\n-                                ],\n-                            }\n-                        )\n-                        | IsDict(\n-                            # TODO: remove when deprecating Pydantic v1\n-                            {\"title\": \"File\", \"type\": \"string\", \"format\": \"binary\"}\n-                        )\n-                    },\n-                },\n-                \"Body_create_upload_file_uploadfile__post\": {\n-                    \"title\": \"Body_create_upload_file_uploadfile__post\",\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"file\": IsDict(\n-                            {\n-                                \"title\": \"File\",\n-                                \"anyOf\": [\n-                                    {\"type\": \"string\", \"format\": \"binary\"},\n-                                    {\"type\": \"null\"},\n-                                ],\n-                            }\n-                        )\n-                        | IsDict(\n-                            # TODO: remove when deprecating Pydantic v1\n-                            {\"title\": \"File\", \"type\": \"string\", \"format\": \"binary\"}\n-                        )\n-                    },\n-                },\n-                \"HTTPValidationError\": {\n-                    \"title\": \"HTTPValidationError\",\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"detail\": {\n-                            \"title\": \"Detail\",\n-                            \"type\": \"array\",\n-                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n-                        }\n-                    },\n-                },\n-                \"ValidationError\": {\n-                    \"title\": \"ValidationError\",\n-                    \"required\": [\"loc\", \"msg\", \"type\"],\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"loc\": {\n-                            \"title\": \"Location\",\n-                            \"type\": \"array\",\n-                            \"items\": {\n-                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n-                            },\n-                        },\n-                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n-                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n-                    },\n-                },\n-            }\n-        },\n-    }\n\n@@ -1,220 +0,0 @@\n-from pathlib import Path\n-\n-import pytest\n-from dirty_equals import IsDict\n-from fastapi.testclient import TestClient\n-\n-from ...utils import needs_py310\n-\n-\n-@pytest.fixture(name=\"client\")\n-def get_client():\n-    from docs_src.request_files.tutorial001_02_py310 import app\n-\n-    client = TestClient(app)\n-    return client\n-\n-\n-@needs_py310\n-def test_post_form_no_body(client: TestClient):\n-    response = client.post(\"/files/\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"message\": \"No file sent\"}\n-\n-\n-@needs_py310\n-def test_post_uploadfile_no_body(client: TestClient):\n-    response = client.post(\"/uploadfile/\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"message\": \"No upload file sent\"}\n-\n-\n-@needs_py310\n-def test_post_file(tmp_path: Path, client: TestClient):\n-    path = tmp_path / \"test.txt\"\n-    path.write_bytes(b\"<file content>\")\n-\n-    with path.open(\"rb\") as file:\n-        response = client.post(\"/files/\", files={\"file\": file})\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"file_size\": 14}\n-\n-\n-@needs_py310\n-def test_post_upload_file(tmp_path: Path, client: TestClient):\n-    path = tmp_path / \"test.txt\"\n-    path.write_bytes(b\"<file content>\")\n-\n-    with path.open(\"rb\") as file:\n-        response = client.post(\"/uploadfile/\", files={\"file\": file})\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"filename\": \"test.txt\"}\n-\n-\n-@needs_py310\n-def test_openapi_schema(client: TestClient):\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\n-        \"openapi\": \"3.1.0\",\n-        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n-        \"paths\": {\n-            \"/files/\": {\n-                \"post\": {\n-                    \"summary\": \"Create File\",\n-                    \"operationId\": \"create_file_files__post\",\n-                    \"requestBody\": {\n-                        \"content\": {\n-                            \"multipart/form-data\": {\n-                                \"schema\": IsDict(\n-                                    {\n-                                        \"allOf\": [\n-                                            {\n-                                                \"$ref\": \"#/components/schemas/Body_create_file_files__post\"\n-                                            }\n-                                        ],\n-                                        \"title\": \"Body\",\n-                                    }\n-                                )\n-                                | IsDict(\n-                                    # TODO: remove when deprecating Pydantic v1\n-                                    {\n-                                        \"$ref\": \"#/components/schemas/Body_create_file_files__post\"\n-                                    }\n-                                )\n-                            }\n-                        }\n-                    },\n-                    \"responses\": {\n-                        \"200\": {\n-                            \"description\": \"Successful Response\",\n-                            \"content\": {\"application/json\": {\"schema\": {}}},\n-                        },\n-                        \"422\": {\n-                            \"description\": \"Validation Error\",\n-                            \"content\": {\n-                                \"application/json\": {\n-                                    \"schema\": {\n-                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n-                                    }\n-                                }\n-                            },\n-                        },\n-                    },\n-                }\n-            },\n-            \"/uploadfile/\": {\n-                \"post\": {\n-                    \"summary\": \"Create Upload File\",\n-                    \"operationId\": \"create_upload_file_uploadfile__post\",\n-                    \"requestBody\": {\n-                        \"content\": {\n-                            \"multipart/form-data\": {\n-                                \"schema\": IsDict(\n-                                    {\n-                                        \"allOf\": [\n-                                            {\n-                                                \"$ref\": \"#/components/schemas/Body_create_upload_file_uploadfile__post\"\n-                                            }\n-                                        ],\n-                                        \"title\": \"Body\",\n-                                    }\n-                                )\n-                                | IsDict(\n-                                    # TODO: remove when deprecating Pydantic v1\n-                                    {\n-                                        \"$ref\": \"#/components/schemas/Body_create_upload_file_uploadfile__post\"\n-                                    }\n-                                )\n-                            }\n-                        }\n-                    },\n-                    \"responses\": {\n-                        \"200\": {\n-                            \"description\": \"Successful Response\",\n-                            \"content\": {\"application/json\": {\"schema\": {}}},\n-                        },\n-                        \"422\": {\n-                            \"description\": \"Validation Error\",\n-                            \"content\": {\n-                                \"application/json\": {\n-                                    \"schema\": {\n-                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n-                                    }\n-                                }\n-                            },\n-                        },\n-                    },\n-                }\n-            },\n-        },\n-        \"components\": {\n-            \"schemas\": {\n-                \"Body_create_file_files__post\": {\n-                    \"title\": \"Body_create_file_files__post\",\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"file\": IsDict(\n-                            {\n-                                \"title\": \"File\",\n-                                \"anyOf\": [\n-                                    {\"type\": \"string\", \"format\": \"binary\"},\n-                                    {\"type\": \"null\"},\n-                                ],\n-                            }\n-                        )\n-                        | IsDict(\n-                            # TODO: remove when deprecating Pydantic v1\n-                            {\"title\": \"File\", \"type\": \"string\", \"format\": \"binary\"}\n-                        )\n-                    },\n-                },\n-                \"Body_create_upload_file_uploadfile__post\": {\n-                    \"title\": \"Body_create_upload_file_uploadfile__post\",\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"file\": IsDict(\n-                            {\n-                                \"title\": \"File\",\n-                                \"anyOf\": [\n-                                    {\"type\": \"string\", \"format\": \"binary\"},\n-                                    {\"type\": \"null\"},\n-                                ],\n-                            }\n-                        )\n-                        | IsDict(\n-                            # TODO: remove when deprecating Pydantic v1\n-                            {\"title\": \"File\", \"type\": \"string\", \"format\": \"binary\"}\n-                        )\n-                    },\n-                },\n-                \"HTTPValidationError\": {\n-                    \"title\": \"HTTPValidationError\",\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"detail\": {\n-                            \"title\": \"Detail\",\n-                            \"type\": \"array\",\n-                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n-                        }\n-                    },\n-                },\n-                \"ValidationError\": {\n-                    \"title\": \"ValidationError\",\n-                    \"required\": [\"loc\", \"msg\", \"type\"],\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"loc\": {\n-                            \"title\": \"Location\",\n-                            \"type\": \"array\",\n-                            \"items\": {\n-                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n-                            },\n-                        },\n-                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n-                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n-                    },\n-                },\n-            }\n-        },\n-    }\n\n@@ -1,33 +1,47 @@\n+import importlib\n+\n+import pytest\n from fastapi.testclient import TestClient\n \n-from docs_src.request_files.tutorial001_03 import app\n-\n-client = TestClient(app)\n+from ...utils import needs_py39\n \n \n-def test_post_file(tmp_path):\n+@pytest.fixture(\n+    name=\"client\",\n+    params=[\n+        \"tutorial001_03\",\n+        \"tutorial001_03_an\",\n+        pytest.param(\"tutorial001_03_an_py39\", marks=needs_py39),\n+    ],\n+)\n+def get_client(request: pytest.FixtureRequest):\n+    mod = importlib.import_module(f\"docs_src.request_files.{request.param}\")\n+\n+    client = TestClient(mod.app)\n+    return client\n+\n+\n+def test_post_file(tmp_path, client: TestClient):\n     path = tmp_path / \"test.txt\"\n     path.write_bytes(b\"<file content>\")\n \n-    client = TestClient(app)\n     with path.open(\"rb\") as file:\n         response = client.post(\"/files/\", files={\"file\": file})\n     assert response.status_code == 200, response.text\n     assert response.json() == {\"file_size\": 14}\n \n \n-def test_post_upload_file(tmp_path):\n+def test_post_upload_file(tmp_path, client: TestClient):\n     path = tmp_path / \"test.txt\"\n     path.write_bytes(b\"<file content>\")\n \n-    client = TestClient(app)\n     with path.open(\"rb\") as file:\n         response = client.post(\"/uploadfile/\", files={\"file\": file})\n     assert response.status_code == 200, response.text\n     assert response.json() == {\"filename\": \"test.txt\"}\n \n \n-def test_openapi_schema():\n+def test_openapi_schema(client: TestClient):\n     response = client.get(\"/openapi.json\")\n     assert response.status_code == 200, response.text\n     assert response.json() == {\n\n@@ -1,159 +0,0 @@\n-from fastapi.testclient import TestClient\n-\n-from docs_src.request_files.tutorial001_03_an import app\n-\n-client = TestClient(app)\n-\n-\n-def test_post_file(tmp_path):\n-    path = tmp_path / \"test.txt\"\n-    path.write_bytes(b\"<file content>\")\n-\n-    client = TestClient(app)\n-    with path.open(\"rb\") as file:\n-        response = client.post(\"/files/\", files={\"file\": file})\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"file_size\": 14}\n-\n-\n-def test_post_upload_file(tmp_path):\n-    path = tmp_path / \"test.txt\"\n-    path.write_bytes(b\"<file content>\")\n-\n-    client = TestClient(app)\n-    with path.open(\"rb\") as file:\n-        response = client.post(\"/uploadfile/\", files={\"file\": file})\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"filename\": \"test.txt\"}\n-\n-\n-def test_openapi_schema():\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\n-        \"openapi\": \"3.1.0\",\n-        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n-        \"paths\": {\n-            \"/files/\": {\n-                \"post\": {\n-                    \"summary\": \"Create File\",\n-                    \"operationId\": \"create_file_files__post\",\n-                    \"requestBody\": {\n-                        \"content\": {\n-                            \"multipart/form-data\": {\n-                                \"schema\": {\n-                                    \"$ref\": \"#/components/schemas/Body_create_file_files__post\"\n-                                }\n-                            }\n-                        },\n-                        \"required\": True,\n-                    },\n-                    \"responses\": {\n-                        \"200\": {\n-                            \"description\": \"Successful Response\",\n-                            \"content\": {\"application/json\": {\"schema\": {}}},\n-                        },\n-                        \"422\": {\n-                            \"description\": \"Validation Error\",\n-                            \"content\": {\n-                                \"application/json\": {\n-                                    \"schema\": {\n-                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n-                                    }\n-                                }\n-                            },\n-                        },\n-                    },\n-                }\n-            },\n-            \"/uploadfile/\": {\n-                \"post\": {\n-                    \"summary\": \"Create Upload File\",\n-                    \"operationId\": \"create_upload_file_uploadfile__post\",\n-                    \"requestBody\": {\n-                        \"content\": {\n-                            \"multipart/form-data\": {\n-                                \"schema\": {\n-                                    \"$ref\": \"#/components/schemas/Body_create_upload_file_uploadfile__post\"\n-                                }\n-                            }\n-                        },\n-                        \"required\": True,\n-                    },\n-                    \"responses\": {\n-                        \"200\": {\n-                            \"description\": \"Successful Response\",\n-                            \"content\": {\"application/json\": {\"schema\": {}}},\n-                        },\n-                        \"422\": {\n-                            \"description\": \"Validation Error\",\n-                            \"content\": {\n-                                \"application/json\": {\n-                                    \"schema\": {\n-                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n-                                    }\n-                                }\n-                            },\n-                        },\n-                    },\n-                }\n-            },\n-        },\n-        \"components\": {\n-            \"schemas\": {\n-                \"Body_create_file_files__post\": {\n-                    \"title\": \"Body_create_file_files__post\",\n-                    \"required\": [\"file\"],\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"file\": {\n-                            \"title\": \"File\",\n-                            \"type\": \"string\",\n-                            \"description\": \"A file read as bytes\",\n-                            \"format\": \"binary\",\n-                        }\n-                    },\n-                },\n-                \"Body_create_upload_file_uploadfile__post\": {\n-                    \"title\": \"Body_create_upload_file_uploadfile__post\",\n-                    \"required\": [\"file\"],\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"file\": {\n-                            \"title\": \"File\",\n-                            \"type\": \"string\",\n-                            \"description\": \"A file read as UploadFile\",\n-                            \"format\": \"binary\",\n-                        }\n-                    },\n-                },\n-                \"HTTPValidationError\": {\n-                    \"title\": \"HTTPValidationError\",\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"detail\": {\n-                            \"title\": \"Detail\",\n-                            \"type\": \"array\",\n-                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n-                        }\n-                    },\n-                },\n-                \"ValidationError\": {\n-                    \"title\": \"ValidationError\",\n-                    \"required\": [\"loc\", \"msg\", \"type\"],\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"loc\": {\n-                            \"title\": \"Location\",\n-                            \"type\": \"array\",\n-                            \"items\": {\n-                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n-                            },\n-                        },\n-                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n-                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n-                    },\n-                },\n-            }\n-        },\n-    }\n\n@@ -1,167 +0,0 @@\n-import pytest\n-from fastapi.testclient import TestClient\n-\n-from ...utils import needs_py39\n-\n-\n-@pytest.fixture(name=\"client\")\n-def get_client():\n-    from docs_src.request_files.tutorial001_03_an_py39 import app\n-\n-    client = TestClient(app)\n-    return client\n-\n-\n-@needs_py39\n-def test_post_file(tmp_path, client: TestClient):\n-    path = tmp_path / \"test.txt\"\n-    path.write_bytes(b\"<file content>\")\n-\n-    with path.open(\"rb\") as file:\n-        response = client.post(\"/files/\", files={\"file\": file})\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"file_size\": 14}\n-\n-\n-@needs_py39\n-def test_post_upload_file(tmp_path, client: TestClient):\n-    path = tmp_path / \"test.txt\"\n-    path.write_bytes(b\"<file content>\")\n-\n-    with path.open(\"rb\") as file:\n-        response = client.post(\"/uploadfile/\", files={\"file\": file})\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"filename\": \"test.txt\"}\n-\n-\n-@needs_py39\n-def test_openapi_schema(client: TestClient):\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\n-        \"openapi\": \"3.1.0\",\n-        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n-        \"paths\": {\n-            \"/files/\": {\n-                \"post\": {\n-                    \"summary\": \"Create File\",\n-                    \"operationId\": \"create_file_files__post\",\n-                    \"requestBody\": {\n-                        \"content\": {\n-                            \"multipart/form-data\": {\n-                                \"schema\": {\n-                                    \"$ref\": \"#/components/schemas/Body_create_file_files__post\"\n-                                }\n-                            }\n-                        },\n-                        \"required\": True,\n-                    },\n-                    \"responses\": {\n-                        \"200\": {\n-                            \"description\": \"Successful Response\",\n-                            \"content\": {\"application/json\": {\"schema\": {}}},\n-                        },\n-                        \"422\": {\n-                            \"description\": \"Validation Error\",\n-                            \"content\": {\n-                                \"application/json\": {\n-                                    \"schema\": {\n-                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n-                                    }\n-                                }\n-                            },\n-                        },\n-                    },\n-                }\n-            },\n-            \"/uploadfile/\": {\n-                \"post\": {\n-                    \"summary\": \"Create Upload File\",\n-                    \"operationId\": \"create_upload_file_uploadfile__post\",\n-                    \"requestBody\": {\n-                        \"content\": {\n-                            \"multipart/form-data\": {\n-                                \"schema\": {\n-                                    \"$ref\": \"#/components/schemas/Body_create_upload_file_uploadfile__post\"\n-                                }\n-                            }\n-                        },\n-                        \"required\": True,\n-                    },\n-                    \"responses\": {\n-                        \"200\": {\n-                            \"description\": \"Successful Response\",\n-                            \"content\": {\"application/json\": {\"schema\": {}}},\n-                        },\n-                        \"422\": {\n-                            \"description\": \"Validation Error\",\n-                            \"content\": {\n-                                \"application/json\": {\n-                                    \"schema\": {\n-                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n-                                    }\n-                                }\n-                            },\n-                        },\n-                    },\n-                }\n-            },\n-        },\n-        \"components\": {\n-            \"schemas\": {\n-                \"Body_create_file_files__post\": {\n-                    \"title\": \"Body_create_file_files__post\",\n-                    \"required\": [\"file\"],\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"file\": {\n-                            \"title\": \"File\",\n-                            \"type\": \"string\",\n-                            \"description\": \"A file read as bytes\",\n-                            \"format\": \"binary\",\n-                        }\n-                    },\n-                },\n-                \"Body_create_upload_file_uploadfile__post\": {\n-                    \"title\": \"Body_create_upload_file_uploadfile__post\",\n-                    \"required\": [\"file\"],\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"file\": {\n-                            \"title\": \"File\",\n-                            \"type\": \"string\",\n-                            \"description\": \"A file read as UploadFile\",\n-                            \"format\": \"binary\",\n-                        }\n-                    },\n-                },\n-                \"HTTPValidationError\": {\n-                    \"title\": \"HTTPValidationError\",\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"detail\": {\n-                            \"title\": \"Detail\",\n-                            \"type\": \"array\",\n-                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n-                        }\n-                    },\n-                },\n-                \"ValidationError\": {\n-                    \"title\": \"ValidationError\",\n-                    \"required\": [\"loc\", \"msg\", \"type\"],\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"loc\": {\n-                            \"title\": \"Location\",\n-                            \"type\": \"array\",\n-                            \"items\": {\n-                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n-                            },\n-                        },\n-                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n-                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n-                    },\n-                },\n-            }\n-        },\n-    }\n\n@@ -1,218 +0,0 @@\n-from dirty_equals import IsDict\n-from fastapi.testclient import TestClient\n-\n-from docs_src.request_files.tutorial001_an import app\n-\n-client = TestClient(app)\n-\n-\n-def test_post_form_no_body():\n-    response = client.post(\"/files/\")\n-    assert response.status_code == 422, response.text\n-    assert response.json() == IsDict(\n-        {\n-            \"detail\": [\n-                {\n-                    \"type\": \"missing\",\n-                    \"loc\": [\"body\", \"file\"],\n-                    \"msg\": \"Field required\",\n-                    \"input\": None,\n-                }\n-            ]\n-        }\n-    ) | IsDict(\n-        # TODO: remove when deprecating Pydantic v1\n-        {\n-            \"detail\": [\n-                {\n-                    \"loc\": [\"body\", \"file\"],\n-                    \"msg\": \"field required\",\n-                    \"type\": \"value_error.missing\",\n-                }\n-            ]\n-        }\n-    )\n-\n-\n-def test_post_body_json():\n-    response = client.post(\"/files/\", json={\"file\": \"Foo\"})\n-    assert response.status_code == 422, response.text\n-    assert response.json() == IsDict(\n-        {\n-            \"detail\": [\n-                {\n-                    \"type\": \"missing\",\n-                    \"loc\": [\"body\", \"file\"],\n-                    \"msg\": \"Field required\",\n-                    \"input\": None,\n-                }\n-            ]\n-        }\n-    ) | IsDict(\n-        # TODO: remove when deprecating Pydantic v1\n-        {\n-            \"detail\": [\n-                {\n-                    \"loc\": [\"body\", \"file\"],\n-                    \"msg\": \"field required\",\n-                    \"type\": \"value_error.missing\",\n-                }\n-            ]\n-        }\n-    )\n-\n-\n-def test_post_file(tmp_path):\n-    path = tmp_path / \"test.txt\"\n-    path.write_bytes(b\"<file content>\")\n-\n-    client = TestClient(app)\n-    with path.open(\"rb\") as file:\n-        response = client.post(\"/files/\", files={\"file\": file})\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"file_size\": 14}\n-\n-\n-def test_post_large_file(tmp_path):\n-    default_pydantic_max_size = 2**16\n-    path = tmp_path / \"test.txt\"\n-    path.write_bytes(b\"x\" * (default_pydantic_max_size + 1))\n-\n-    client = TestClient(app)\n-    with path.open(\"rb\") as file:\n-        response = client.post(\"/files/\", files={\"file\": file})\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"file_size\": default_pydantic_max_size + 1}\n-\n-\n-def test_post_upload_file(tmp_path):\n-    path = tmp_path / \"test.txt\"\n-    path.write_bytes(b\"<file content>\")\n-\n-    client = TestClient(app)\n-    with path.open(\"rb\") as file:\n-        response = client.post(\"/uploadfile/\", files={\"file\": file})\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"filename\": \"test.txt\"}\n-\n-\n-def test_openapi_schema():\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\n-        \"openapi\": \"3.1.0\",\n-        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n-        \"paths\": {\n-            \"/files/\": {\n-                \"post\": {\n-                    \"responses\": {\n-                        \"200\": {\n-                            \"description\": \"Successful Response\",\n-                            \"content\": {\"application/json\": {\"schema\": {}}},\n-                        },\n-                        \"422\": {\n-                            \"description\": \"Validation Error\",\n-                            \"content\": {\n-                                \"application/json\": {\n-                                    \"schema\": {\n-                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n-                                    }\n-                                }\n-                            },\n-                        },\n-                    },\n-                    \"summary\": \"Create File\",\n-                    \"operationId\": \"create_file_files__post\",\n-                    \"requestBody\": {\n-                        \"content\": {\n-                            \"multipart/form-data\": {\n-                                \"schema\": {\n-                                    \"$ref\": \"#/components/schemas/Body_create_file_files__post\"\n-                                }\n-                            }\n-                        },\n-                        \"required\": True,\n-                    },\n-                }\n-            },\n-            \"/uploadfile/\": {\n-                \"post\": {\n-                    \"responses\": {\n-                        \"200\": {\n-                            \"description\": \"Successful Response\",\n-                            \"content\": {\"application/json\": {\"schema\": {}}},\n-                        },\n-                        \"422\": {\n-                            \"description\": \"Validation Error\",\n-                            \"content\": {\n-                                \"application/json\": {\n-                                    \"schema\": {\n-                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n-                                    }\n-                                }\n-                            },\n-                        },\n-                    },\n-                    \"summary\": \"Create Upload File\",\n-                    \"operationId\": \"create_upload_file_uploadfile__post\",\n-                    \"requestBody\": {\n-                        \"content\": {\n-                            \"multipart/form-data\": {\n-                                \"schema\": {\n-                                    \"$ref\": \"#/components/schemas/Body_create_upload_file_uploadfile__post\"\n-                                }\n-                            }\n-                        },\n-                        \"required\": True,\n-                    },\n-                }\n-            },\n-        },\n-        \"components\": {\n-            \"schemas\": {\n-                \"Body_create_upload_file_uploadfile__post\": {\n-                    \"title\": \"Body_create_upload_file_uploadfile__post\",\n-                    \"required\": [\"file\"],\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"file\": {\"title\": \"File\", \"type\": \"string\", \"format\": \"binary\"}\n-                    },\n-                },\n-                \"Body_create_file_files__post\": {\n-                    \"title\": \"Body_create_file_files__post\",\n-                    \"required\": [\"file\"],\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"file\": {\"title\": \"File\", \"type\": \"string\", \"format\": \"binary\"}\n-                    },\n-                },\n-                \"ValidationError\": {\n-                    \"title\": \"ValidationError\",\n-                    \"required\": [\"loc\", \"msg\", \"type\"],\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"loc\": {\n-                            \"title\": \"Location\",\n-                            \"type\": \"array\",\n-                            \"items\": {\n-                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n-                            },\n-                        },\n-                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n-                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n-                    },\n-                },\n-                \"HTTPValidationError\": {\n-                    \"title\": \"HTTPValidationError\",\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"detail\": {\n-                            \"title\": \"Detail\",\n-                            \"type\": \"array\",\n-                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n-                        }\n-                    },\n-                },\n-            }\n-        },\n-    }\n\n@@ -1,228 +0,0 @@\n-import pytest\n-from dirty_equals import IsDict\n-from fastapi.testclient import TestClient\n-\n-from ...utils import needs_py39\n-\n-\n-@pytest.fixture(name=\"client\")\n-def get_client():\n-    from docs_src.request_files.tutorial001_an_py39 import app\n-\n-    client = TestClient(app)\n-    return client\n-\n-\n-@needs_py39\n-def test_post_form_no_body(client: TestClient):\n-    response = client.post(\"/files/\")\n-    assert response.status_code == 422, response.text\n-    assert response.json() == IsDict(\n-        {\n-            \"detail\": [\n-                {\n-                    \"type\": \"missing\",\n-                    \"loc\": [\"body\", \"file\"],\n-                    \"msg\": \"Field required\",\n-                    \"input\": None,\n-                }\n-            ]\n-        }\n-    ) | IsDict(\n-        # TODO: remove when deprecating Pydantic v1\n-        {\n-            \"detail\": [\n-                {\n-                    \"loc\": [\"body\", \"file\"],\n-                    \"msg\": \"field required\",\n-                    \"type\": \"value_error.missing\",\n-                }\n-            ]\n-        }\n-    )\n-\n-\n-@needs_py39\n-def test_post_body_json(client: TestClient):\n-    response = client.post(\"/files/\", json={\"file\": \"Foo\"})\n-    assert response.status_code == 422, response.text\n-    assert response.json() == IsDict(\n-        {\n-            \"detail\": [\n-                {\n-                    \"type\": \"missing\",\n-                    \"loc\": [\"body\", \"file\"],\n-                    \"msg\": \"Field required\",\n-                    \"input\": None,\n-                }\n-            ]\n-        }\n-    ) | IsDict(\n-        # TODO: remove when deprecating Pydantic v1\n-        {\n-            \"detail\": [\n-                {\n-                    \"loc\": [\"body\", \"file\"],\n-                    \"msg\": \"field required\",\n-                    \"type\": \"value_error.missing\",\n-                }\n-            ]\n-        }\n-    )\n-\n-\n-@needs_py39\n-def test_post_file(tmp_path, client: TestClient):\n-    path = tmp_path / \"test.txt\"\n-    path.write_bytes(b\"<file content>\")\n-\n-    with path.open(\"rb\") as file:\n-        response = client.post(\"/files/\", files={\"file\": file})\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"file_size\": 14}\n-\n-\n-@needs_py39\n-def test_post_large_file(tmp_path, client: TestClient):\n-    default_pydantic_max_size = 2**16\n-    path = tmp_path / \"test.txt\"\n-    path.write_bytes(b\"x\" * (default_pydantic_max_size + 1))\n-\n-    with path.open(\"rb\") as file:\n-        response = client.post(\"/files/\", files={\"file\": file})\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"file_size\": default_pydantic_max_size + 1}\n-\n-\n-@needs_py39\n-def test_post_upload_file(tmp_path, client: TestClient):\n-    path = tmp_path / \"test.txt\"\n-    path.write_bytes(b\"<file content>\")\n-\n-    with path.open(\"rb\") as file:\n-        response = client.post(\"/uploadfile/\", files={\"file\": file})\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"filename\": \"test.txt\"}\n-\n-\n-@needs_py39\n-def test_openapi_schema(client: TestClient):\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\n-        \"openapi\": \"3.1.0\",\n-        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n-        \"paths\": {\n-            \"/files/\": {\n-                \"post\": {\n-                    \"responses\": {\n-                        \"200\": {\n-                            \"description\": \"Successful Response\",\n-                            \"content\": {\"application/json\": {\"schema\": {}}},\n-                        },\n-                        \"422\": {\n-                            \"description\": \"Validation Error\",\n-                            \"content\": {\n-                                \"application/json\": {\n-                                    \"schema\": {\n-                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n-                                    }\n-                                }\n-                            },\n-                        },\n-                    },\n-                    \"summary\": \"Create File\",\n-                    \"operationId\": \"create_file_files__post\",\n-                    \"requestBody\": {\n-                        \"content\": {\n-                            \"multipart/form-data\": {\n-                                \"schema\": {\n-                                    \"$ref\": \"#/components/schemas/Body_create_file_files__post\"\n-                                }\n-                            }\n-                        },\n-                        \"required\": True,\n-                    },\n-                }\n-            },\n-            \"/uploadfile/\": {\n-                \"post\": {\n-                    \"responses\": {\n-                        \"200\": {\n-                            \"description\": \"Successful Response\",\n-                            \"content\": {\"application/json\": {\"schema\": {}}},\n-                        },\n-                        \"422\": {\n-                            \"description\": \"Validation Error\",\n-                            \"content\": {\n-                                \"application/json\": {\n-                                    \"schema\": {\n-                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n-                                    }\n-                                }\n-                            },\n-                        },\n-                    },\n-                    \"summary\": \"Create Upload File\",\n-                    \"operationId\": \"create_upload_file_uploadfile__post\",\n-                    \"requestBody\": {\n-                        \"content\": {\n-                            \"multipart/form-data\": {\n-                                \"schema\": {\n-                                    \"$ref\": \"#/components/schemas/Body_create_upload_file_uploadfile__post\"\n-                                }\n-                            }\n-                        },\n-                        \"required\": True,\n-                    },\n-                }\n-            },\n-        },\n-        \"components\": {\n-            \"schemas\": {\n-                \"Body_create_upload_file_uploadfile__post\": {\n-                    \"title\": \"Body_create_upload_file_uploadfile__post\",\n-                    \"required\": [\"file\"],\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"file\": {\"title\": \"File\", \"type\": \"string\", \"format\": \"binary\"}\n-                    },\n-                },\n-                \"Body_create_file_files__post\": {\n-                    \"title\": \"Body_create_file_files__post\",\n-                    \"required\": [\"file\"],\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"file\": {\"title\": \"File\", \"type\": \"string\", \"format\": \"binary\"}\n-                    },\n-                },\n-                \"ValidationError\": {\n-                    \"title\": \"ValidationError\",\n-                    \"required\": [\"loc\", \"msg\", \"type\"],\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"loc\": {\n-                            \"title\": \"Location\",\n-                            \"type\": \"array\",\n-                            \"items\": {\n-                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n-                            },\n-                        },\n-                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n-                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n-                    },\n-                },\n-                \"HTTPValidationError\": {\n-                    \"title\": \"HTTPValidationError\",\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"detail\": {\n-                            \"title\": \"Detail\",\n-                            \"type\": \"array\",\n-                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n-                        }\n-                    },\n-                },\n-            }\n-        },\n-    }\n\n@@ -1,12 +1,35 @@\n+import importlib\n+\n+import pytest\n from dirty_equals import IsDict\n+from fastapi import FastAPI\n from fastapi.testclient import TestClient\n \n-from docs_src.request_files.tutorial002 import app\n+from ...utils import needs_py39\n \n+\n+@pytest.fixture(\n+    name=\"app\",\n+    params=[\n+        \"tutorial002\",\n+        \"tutorial002_an\",\n+        pytest.param(\"tutorial002_py39\", marks=needs_py39),\n+        pytest.param(\"tutorial002_an_py39\", marks=needs_py39),\n+    ],\n+)\n+def get_app(request: pytest.FixtureRequest):\n+    mod = importlib.import_module(f\"docs_src.request_files.{request.param}\")\n+\n+    return mod.app\n+\n+\n+@pytest.fixture(name=\"client\")\n+def get_client(app: FastAPI):\n     client = TestClient(app)\n+    return client\n \n \n-def test_post_form_no_body():\n+def test_post_form_no_body(client: TestClient):\n     response = client.post(\"/files/\")\n     assert response.status_code == 422, response.text\n     assert response.json() == IsDict(\n@@ -34,7 +57,7 @@ def test_post_form_no_body():\n     )\n \n \n-def test_post_body_json():\n+def test_post_body_json(client: TestClient):\n     response = client.post(\"/files/\", json={\"file\": \"Foo\"})\n     assert response.status_code == 422, response.text\n     assert response.json() == IsDict(\n@@ -62,7 +85,7 @@ def test_post_body_json():\n     )\n \n \n-def test_post_files(tmp_path):\n+def test_post_files(tmp_path, app: FastAPI):\n     path = tmp_path / \"test.txt\"\n     path.write_bytes(b\"<file content>\")\n     path2 = tmp_path / \"test2.txt\"\n@@ -81,7 +104,7 @@ def test_post_files(tmp_path):\n     assert response.json() == {\"file_sizes\": [14, 15]}\n \n \n-def test_post_upload_file(tmp_path):\n+def test_post_upload_file(tmp_path, app: FastAPI):\n     path = tmp_path / \"test.txt\"\n     path.write_bytes(b\"<file content>\")\n     path2 = tmp_path / \"test2.txt\"\n@@ -100,14 +123,14 @@ def test_post_upload_file(tmp_path):\n     assert response.json() == {\"filenames\": [\"test.txt\", \"test2.txt\"]}\n \n \n-def test_get_root():\n+def test_get_root(app: FastAPI):\n     client = TestClient(app)\n     response = client.get(\"/\")\n     assert response.status_code == 200, response.text\n     assert b\"<form\" in response.content\n \n \n-def test_openapi_schema():\n+def test_openapi_schema(client: TestClient):\n     response = client.get(\"/openapi.json\")\n     assert response.status_code == 200, response.text\n     assert response.json() == {\n\n@@ -1,249 +0,0 @@\n-from dirty_equals import IsDict\n-from fastapi.testclient import TestClient\n-\n-from docs_src.request_files.tutorial002_an import app\n-\n-client = TestClient(app)\n-\n-\n-def test_post_form_no_body():\n-    response = client.post(\"/files/\")\n-    assert response.status_code == 422, response.text\n-    assert response.json() == IsDict(\n-        {\n-            \"detail\": [\n-                {\n-                    \"type\": \"missing\",\n-                    \"loc\": [\"body\", \"files\"],\n-                    \"msg\": \"Field required\",\n-                    \"input\": None,\n-                }\n-            ]\n-        }\n-    ) | IsDict(\n-        # TODO: remove when deprecating Pydantic v1\n-        {\n-            \"detail\": [\n-                {\n-                    \"loc\": [\"body\", \"files\"],\n-                    \"msg\": \"field required\",\n-                    \"type\": \"value_error.missing\",\n-                }\n-            ]\n-        }\n-    )\n-\n-\n-def test_post_body_json():\n-    response = client.post(\"/files/\", json={\"file\": \"Foo\"})\n-    assert response.status_code == 422, response.text\n-    assert response.json() == IsDict(\n-        {\n-            \"detail\": [\n-                {\n-                    \"type\": \"missing\",\n-                    \"loc\": [\"body\", \"files\"],\n-                    \"msg\": \"Field required\",\n-                    \"input\": None,\n-                }\n-            ]\n-        }\n-    ) | IsDict(\n-        # TODO: remove when deprecating Pydantic v1\n-        {\n-            \"detail\": [\n-                {\n-                    \"loc\": [\"body\", \"files\"],\n-                    \"msg\": \"field required\",\n-                    \"type\": \"value_error.missing\",\n-                }\n-            ]\n-        }\n-    )\n-\n-\n-def test_post_files(tmp_path):\n-    path = tmp_path / \"test.txt\"\n-    path.write_bytes(b\"<file content>\")\n-    path2 = tmp_path / \"test2.txt\"\n-    path2.write_bytes(b\"<file content2>\")\n-\n-    client = TestClient(app)\n-    with path.open(\"rb\") as file, path2.open(\"rb\") as file2:\n-        response = client.post(\n-            \"/files/\",\n-            files=(\n-                (\"files\", (\"test.txt\", file)),\n-                (\"files\", (\"test2.txt\", file2)),\n-            ),\n-        )\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"file_sizes\": [14, 15]}\n-\n-\n-def test_post_upload_file(tmp_path):\n-    path = tmp_path / \"test.txt\"\n-    path.write_bytes(b\"<file content>\")\n-    path2 = tmp_path / \"test2.txt\"\n-    path2.write_bytes(b\"<file content2>\")\n-\n-    client = TestClient(app)\n-    with path.open(\"rb\") as file, path2.open(\"rb\") as file2:\n-        response = client.post(\n-            \"/uploadfiles/\",\n-            files=(\n-                (\"files\", (\"test.txt\", file)),\n-                (\"files\", (\"test2.txt\", file2)),\n-            ),\n-        )\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"filenames\": [\"test.txt\", \"test2.txt\"]}\n-\n-\n-def test_get_root():\n-    client = TestClient(app)\n-    response = client.get(\"/\")\n-    assert response.status_code == 200, response.text\n-    assert b\"<form\" in response.content\n-\n-\n-def test_openapi_schema():\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\n-        \"openapi\": \"3.1.0\",\n-        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n-        \"paths\": {\n-            \"/files/\": {\n-                \"post\": {\n-                    \"responses\": {\n-                        \"200\": {\n-                            \"description\": \"Successful Response\",\n-                            \"content\": {\"application/json\": {\"schema\": {}}},\n-                        },\n-                        \"422\": {\n-                            \"description\": \"Validation Error\",\n-                            \"content\": {\n-                                \"application/json\": {\n-                                    \"schema\": {\n-                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n-                                    }\n-                                }\n-                            },\n-                        },\n-                    },\n-                    \"summary\": \"Create Files\",\n-                    \"operationId\": \"create_files_files__post\",\n-                    \"requestBody\": {\n-                        \"content\": {\n-                            \"multipart/form-data\": {\n-                                \"schema\": {\n-                                    \"$ref\": \"#/components/schemas/Body_create_files_files__post\"\n-                                }\n-                            }\n-                        },\n-                        \"required\": True,\n-                    },\n-                }\n-            },\n-            \"/uploadfiles/\": {\n-                \"post\": {\n-                    \"responses\": {\n-                        \"200\": {\n-                            \"description\": \"Successful Response\",\n-                            \"content\": {\"application/json\": {\"schema\": {}}},\n-                        },\n-                        \"422\": {\n-                            \"description\": \"Validation Error\",\n-                            \"content\": {\n-                                \"application/json\": {\n-                                    \"schema\": {\n-                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n-                                    }\n-                                }\n-                            },\n-                        },\n-                    },\n-                    \"summary\": \"Create Upload Files\",\n-                    \"operationId\": \"create_upload_files_uploadfiles__post\",\n-                    \"requestBody\": {\n-                        \"content\": {\n-                            \"multipart/form-data\": {\n-                                \"schema\": {\n-                                    \"$ref\": \"#/components/schemas/Body_create_upload_files_uploadfiles__post\"\n-                                }\n-                            }\n-                        },\n-                        \"required\": True,\n-                    },\n-                }\n-            },\n-            \"/\": {\n-                \"get\": {\n-                    \"responses\": {\n-                        \"200\": {\n-                            \"description\": \"Successful Response\",\n-                            \"content\": {\"application/json\": {\"schema\": {}}},\n-                        }\n-                    },\n-                    \"summary\": \"Main\",\n-                    \"operationId\": \"main__get\",\n-                }\n-            },\n-        },\n-        \"components\": {\n-            \"schemas\": {\n-                \"Body_create_upload_files_uploadfiles__post\": {\n-                    \"title\": \"Body_create_upload_files_uploadfiles__post\",\n-                    \"required\": [\"files\"],\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"files\": {\n-                            \"title\": \"Files\",\n-                            \"type\": \"array\",\n-                            \"items\": {\"type\": \"string\", \"format\": \"binary\"},\n-                        }\n-                    },\n-                },\n-                \"Body_create_files_files__post\": {\n-                    \"title\": \"Body_create_files_files__post\",\n-                    \"required\": [\"files\"],\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"files\": {\n-                            \"title\": \"Files\",\n-                            \"type\": \"array\",\n-                            \"items\": {\"type\": \"string\", \"format\": \"binary\"},\n-                        }\n-                    },\n-                },\n-                \"ValidationError\": {\n-                    \"title\": \"ValidationError\",\n-                    \"required\": [\"loc\", \"msg\", \"type\"],\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"loc\": {\n-                            \"title\": \"Location\",\n-                            \"type\": \"array\",\n-                            \"items\": {\n-                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n-                            },\n-                        },\n-                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n-                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n-                    },\n-                },\n-                \"HTTPValidationError\": {\n-                    \"title\": \"HTTPValidationError\",\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"detail\": {\n-                            \"title\": \"Detail\",\n-                            \"type\": \"array\",\n-                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n-                        }\n-                    },\n-                },\n-            }\n-        },\n-    }\n\n@@ -1,268 +0,0 @@\n-import pytest\n-from dirty_equals import IsDict\n-from fastapi import FastAPI\n-from fastapi.testclient import TestClient\n-\n-from ...utils import needs_py39\n-\n-\n-@pytest.fixture(name=\"app\")\n-def get_app():\n-    from docs_src.request_files.tutorial002_an_py39 import app\n-\n-    return app\n-\n-\n-@pytest.fixture(name=\"client\")\n-def get_client(app: FastAPI):\n-    client = TestClient(app)\n-    return client\n-\n-\n-@needs_py39\n-def test_post_form_no_body(client: TestClient):\n-    response = client.post(\"/files/\")\n-    assert response.status_code == 422, response.text\n-    assert response.json() == IsDict(\n-        {\n-            \"detail\": [\n-                {\n-                    \"type\": \"missing\",\n-                    \"loc\": [\"body\", \"files\"],\n-                    \"msg\": \"Field required\",\n-                    \"input\": None,\n-                }\n-            ]\n-        }\n-    ) | IsDict(\n-        # TODO: remove when deprecating Pydantic v1\n-        {\n-            \"detail\": [\n-                {\n-                    \"loc\": [\"body\", \"files\"],\n-                    \"msg\": \"field required\",\n-                    \"type\": \"value_error.missing\",\n-                }\n-            ]\n-        }\n-    )\n-\n-\n-@needs_py39\n-def test_post_body_json(client: TestClient):\n-    response = client.post(\"/files/\", json={\"file\": \"Foo\"})\n-    assert response.status_code == 422, response.text\n-    assert response.json() == IsDict(\n-        {\n-            \"detail\": [\n-                {\n-                    \"type\": \"missing\",\n-                    \"loc\": [\"body\", \"files\"],\n-                    \"msg\": \"Field required\",\n-                    \"input\": None,\n-                }\n-            ]\n-        }\n-    ) | IsDict(\n-        # TODO: remove when deprecating Pydantic v1\n-        {\n-            \"detail\": [\n-                {\n-                    \"loc\": [\"body\", \"files\"],\n-                    \"msg\": \"field required\",\n-                    \"type\": \"value_error.missing\",\n-                }\n-            ]\n-        }\n-    )\n-\n-\n-@needs_py39\n-def test_post_files(tmp_path, app: FastAPI):\n-    path = tmp_path / \"test.txt\"\n-    path.write_bytes(b\"<file content>\")\n-    path2 = tmp_path / \"test2.txt\"\n-    path2.write_bytes(b\"<file content2>\")\n-\n-    client = TestClient(app)\n-    with path.open(\"rb\") as file, path2.open(\"rb\") as file2:\n-        response = client.post(\n-            \"/files/\",\n-            files=(\n-                (\"files\", (\"test.txt\", file)),\n-                (\"files\", (\"test2.txt\", file2)),\n-            ),\n-        )\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"file_sizes\": [14, 15]}\n-\n-\n-@needs_py39\n-def test_post_upload_file(tmp_path, app: FastAPI):\n-    path = tmp_path / \"test.txt\"\n-    path.write_bytes(b\"<file content>\")\n-    path2 = tmp_path / \"test2.txt\"\n-    path2.write_bytes(b\"<file content2>\")\n-\n-    client = TestClient(app)\n-    with path.open(\"rb\") as file, path2.open(\"rb\") as file2:\n-        response = client.post(\n-            \"/uploadfiles/\",\n-            files=(\n-                (\"files\", (\"test.txt\", file)),\n-                (\"files\", (\"test2.txt\", file2)),\n-            ),\n-        )\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"filenames\": [\"test.txt\", \"test2.txt\"]}\n-\n-\n-@needs_py39\n-def test_get_root(app: FastAPI):\n-    client = TestClient(app)\n-    response = client.get(\"/\")\n-    assert response.status_code == 200, response.text\n-    assert b\"<form\" in response.content\n-\n-\n-@needs_py39\n-def test_openapi_schema(client: TestClient):\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\n-        \"openapi\": \"3.1.0\",\n-        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n-        \"paths\": {\n-            \"/files/\": {\n-                \"post\": {\n-                    \"responses\": {\n-                        \"200\": {\n-                            \"description\": \"Successful Response\",\n-                            \"content\": {\"application/json\": {\"schema\": {}}},\n-                        },\n-                        \"422\": {\n-                            \"description\": \"Validation Error\",\n-                            \"content\": {\n-                                \"application/json\": {\n-                                    \"schema\": {\n-                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n-                                    }\n-                                }\n-                            },\n-                        },\n-                    },\n-                    \"summary\": \"Create Files\",\n-                    \"operationId\": \"create_files_files__post\",\n-                    \"requestBody\": {\n-                        \"content\": {\n-                            \"multipart/form-data\": {\n-                                \"schema\": {\n-                                    \"$ref\": \"#/components/schemas/Body_create_files_files__post\"\n-                                }\n-                            }\n-                        },\n-                        \"required\": True,\n-                    },\n-                }\n-            },\n-            \"/uploadfiles/\": {\n-                \"post\": {\n-                    \"responses\": {\n-                        \"200\": {\n-                            \"description\": \"Successful Response\",\n-                            \"content\": {\"application/json\": {\"schema\": {}}},\n-                        },\n-                        \"422\": {\n-                            \"description\": \"Validation Error\",\n-                            \"content\": {\n-                                \"application/json\": {\n-                                    \"schema\": {\n-                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n-                                    }\n-                                }\n-                            },\n-                        },\n-                    },\n-                    \"summary\": \"Create Upload Files\",\n-                    \"operationId\": \"create_upload_files_uploadfiles__post\",\n-                    \"requestBody\": {\n-                        \"content\": {\n-                            \"multipart/form-data\": {\n-                                \"schema\": {\n-                                    \"$ref\": \"#/components/schemas/Body_create_upload_files_uploadfiles__post\"\n-                                }\n-                            }\n-                        },\n-                        \"required\": True,\n-                    },\n-                }\n-            },\n-            \"/\": {\n-                \"get\": {\n-                    \"responses\": {\n-                        \"200\": {\n-                            \"description\": \"Successful Response\",\n-                            \"content\": {\"application/json\": {\"schema\": {}}},\n-                        }\n-                    },\n-                    \"summary\": \"Main\",\n-                    \"operationId\": \"main__get\",\n-                }\n-            },\n-        },\n-        \"components\": {\n-            \"schemas\": {\n-                \"Body_create_upload_files_uploadfiles__post\": {\n-                    \"title\": \"Body_create_upload_files_uploadfiles__post\",\n-                    \"required\": [\"files\"],\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"files\": {\n-                            \"title\": \"Files\",\n-                            \"type\": \"array\",\n-                            \"items\": {\"type\": \"string\", \"format\": \"binary\"},\n-                        }\n-                    },\n-                },\n-                \"Body_create_files_files__post\": {\n-                    \"title\": \"Body_create_files_files__post\",\n-                    \"required\": [\"files\"],\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"files\": {\n-                            \"title\": \"Files\",\n-                            \"type\": \"array\",\n-                            \"items\": {\"type\": \"string\", \"format\": \"binary\"},\n-                        }\n-                    },\n-                },\n-                \"ValidationError\": {\n-                    \"title\": \"ValidationError\",\n-                    \"required\": [\"loc\", \"msg\", \"type\"],\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"loc\": {\n-                            \"title\": \"Location\",\n-                            \"type\": \"array\",\n-                            \"items\": {\n-                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n-                            },\n-                        },\n-                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n-                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n-                    },\n-                },\n-                \"HTTPValidationError\": {\n-                    \"title\": \"HTTPValidationError\",\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"detail\": {\n-                            \"title\": \"Detail\",\n-                            \"type\": \"array\",\n-                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n-                        }\n-                    },\n-                },\n-            }\n-        },\n-    }\n\n@@ -1,279 +0,0 @@\n-import pytest\n-from dirty_equals import IsDict\n-from fastapi import FastAPI\n-from fastapi.testclient import TestClient\n-\n-from ...utils import needs_py39\n-\n-\n-@pytest.fixture(name=\"app\")\n-def get_app():\n-    from docs_src.request_files.tutorial002_py39 import app\n-\n-    return app\n-\n-\n-@pytest.fixture(name=\"client\")\n-def get_client(app: FastAPI):\n-    client = TestClient(app)\n-    return client\n-\n-\n-file_required = {\n-    \"detail\": [\n-        {\n-            \"loc\": [\"body\", \"files\"],\n-            \"msg\": \"field required\",\n-            \"type\": \"value_error.missing\",\n-        }\n-    ]\n-}\n-\n-\n-@needs_py39\n-def test_post_form_no_body(client: TestClient):\n-    response = client.post(\"/files/\")\n-    assert response.status_code == 422, response.text\n-    assert response.json() == IsDict(\n-        {\n-            \"detail\": [\n-                {\n-                    \"type\": \"missing\",\n-                    \"loc\": [\"body\", \"files\"],\n-                    \"msg\": \"Field required\",\n-                    \"input\": None,\n-                }\n-            ]\n-        }\n-    ) | IsDict(\n-        # TODO: remove when deprecating Pydantic v1\n-        {\n-            \"detail\": [\n-                {\n-                    \"loc\": [\"body\", \"files\"],\n-                    \"msg\": \"field required\",\n-                    \"type\": \"value_error.missing\",\n-                }\n-            ]\n-        }\n-    )\n-\n-\n-@needs_py39\n-def test_post_body_json(client: TestClient):\n-    response = client.post(\"/files/\", json={\"file\": \"Foo\"})\n-    assert response.status_code == 422, response.text\n-    assert response.json() == IsDict(\n-        {\n-            \"detail\": [\n-                {\n-                    \"type\": \"missing\",\n-                    \"loc\": [\"body\", \"files\"],\n-                    \"msg\": \"Field required\",\n-                    \"input\": None,\n-                }\n-            ]\n-        }\n-    ) | IsDict(\n-        # TODO: remove when deprecating Pydantic v1\n-        {\n-            \"detail\": [\n-                {\n-                    \"loc\": [\"body\", \"files\"],\n-                    \"msg\": \"field required\",\n-                    \"type\": \"value_error.missing\",\n-                }\n-            ]\n-        }\n-    )\n-\n-\n-@needs_py39\n-def test_post_files(tmp_path, app: FastAPI):\n-    path = tmp_path / \"test.txt\"\n-    path.write_bytes(b\"<file content>\")\n-    path2 = tmp_path / \"test2.txt\"\n-    path2.write_bytes(b\"<file content2>\")\n-\n-    client = TestClient(app)\n-    with path.open(\"rb\") as file, path2.open(\"rb\") as file2:\n-        response = client.post(\n-            \"/files/\",\n-            files=(\n-                (\"files\", (\"test.txt\", file)),\n-                (\"files\", (\"test2.txt\", file2)),\n-            ),\n-        )\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"file_sizes\": [14, 15]}\n-\n-\n-@needs_py39\n-def test_post_upload_file(tmp_path, app: FastAPI):\n-    path = tmp_path / \"test.txt\"\n-    path.write_bytes(b\"<file content>\")\n-    path2 = tmp_path / \"test2.txt\"\n-    path2.write_bytes(b\"<file content2>\")\n-\n-    client = TestClient(app)\n-    with path.open(\"rb\") as file, path2.open(\"rb\") as file2:\n-        response = client.post(\n-            \"/uploadfiles/\",\n-            files=(\n-                (\"files\", (\"test.txt\", file)),\n-                (\"files\", (\"test2.txt\", file2)),\n-            ),\n-        )\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"filenames\": [\"test.txt\", \"test2.txt\"]}\n-\n-\n-@needs_py39\n-def test_get_root(app: FastAPI):\n-    client = TestClient(app)\n-    response = client.get(\"/\")\n-    assert response.status_code == 200, response.text\n-    assert b\"<form\" in response.content\n-\n-\n-@needs_py39\n-def test_openapi_schema(client: TestClient):\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\n-        \"openapi\": \"3.1.0\",\n-        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n-        \"paths\": {\n-            \"/files/\": {\n-                \"post\": {\n-                    \"responses\": {\n-                        \"200\": {\n-                            \"description\": \"Successful Response\",\n-                            \"content\": {\"application/json\": {\"schema\": {}}},\n-                        },\n-                        \"422\": {\n-                            \"description\": \"Validation Error\",\n-                            \"content\": {\n-                                \"application/json\": {\n-                                    \"schema\": {\n-                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n-                                    }\n-                                }\n-                            },\n-                        },\n-                    },\n-                    \"summary\": \"Create Files\",\n-                    \"operationId\": \"create_files_files__post\",\n-                    \"requestBody\": {\n-                        \"content\": {\n-                            \"multipart/form-data\": {\n-                                \"schema\": {\n-                                    \"$ref\": \"#/components/schemas/Body_create_files_files__post\"\n-                                }\n-                            }\n-                        },\n-                        \"required\": True,\n-                    },\n-                }\n-            },\n-            \"/uploadfiles/\": {\n-                \"post\": {\n-                    \"responses\": {\n-                        \"200\": {\n-                            \"description\": \"Successful Response\",\n-                            \"content\": {\"application/json\": {\"schema\": {}}},\n-                        },\n-                        \"422\": {\n-                            \"description\": \"Validation Error\",\n-                            \"content\": {\n-                                \"application/json\": {\n-                                    \"schema\": {\n-                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n-                                    }\n-                                }\n-                            },\n-                        },\n-                    },\n-                    \"summary\": \"Create Upload Files\",\n-                    \"operationId\": \"create_upload_files_uploadfiles__post\",\n-                    \"requestBody\": {\n-                        \"content\": {\n-                            \"multipart/form-data\": {\n-                                \"schema\": {\n-                                    \"$ref\": \"#/components/schemas/Body_create_upload_files_uploadfiles__post\"\n-                                }\n-                            }\n-                        },\n-                        \"required\": True,\n-                    },\n-                }\n-            },\n-            \"/\": {\n-                \"get\": {\n-                    \"responses\": {\n-                        \"200\": {\n-                            \"description\": \"Successful Response\",\n-                            \"content\": {\"application/json\": {\"schema\": {}}},\n-                        }\n-                    },\n-                    \"summary\": \"Main\",\n-                    \"operationId\": \"main__get\",\n-                }\n-            },\n-        },\n-        \"components\": {\n-            \"schemas\": {\n-                \"Body_create_upload_files_uploadfiles__post\": {\n-                    \"title\": \"Body_create_upload_files_uploadfiles__post\",\n-                    \"required\": [\"files\"],\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"files\": {\n-                            \"title\": \"Files\",\n-                            \"type\": \"array\",\n-                            \"items\": {\"type\": \"string\", \"format\": \"binary\"},\n-                        }\n-                    },\n-                },\n-                \"Body_create_files_files__post\": {\n-                    \"title\": \"Body_create_files_files__post\",\n-                    \"required\": [\"files\"],\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"files\": {\n-                            \"title\": \"Files\",\n-                            \"type\": \"array\",\n-                            \"items\": {\"type\": \"string\", \"format\": \"binary\"},\n-                        }\n-                    },\n-                },\n-                \"ValidationError\": {\n-                    \"title\": \"ValidationError\",\n-                    \"required\": [\"loc\", \"msg\", \"type\"],\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"loc\": {\n-                            \"title\": \"Location\",\n-                            \"type\": \"array\",\n-                            \"items\": {\n-                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n-                            },\n-                        },\n-                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n-                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n-                    },\n-                },\n-                \"HTTPValidationError\": {\n-                    \"title\": \"HTTPValidationError\",\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"detail\": {\n-                            \"title\": \"Detail\",\n-                            \"type\": \"array\",\n-                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n-                        }\n-                    },\n-                },\n-            }\n-        },\n-    }\n\n@@ -1,11 +1,34 @@\n+import importlib\n+\n+import pytest\n+from fastapi import FastAPI\n from fastapi.testclient import TestClient\n \n-from docs_src.request_files.tutorial003 import app\n+from ...utils import needs_py39\n \n+\n+@pytest.fixture(\n+    name=\"app\",\n+    params=[\n+        \"tutorial003\",\n+        \"tutorial003_an\",\n+        pytest.param(\"tutorial003_py39\", marks=needs_py39),\n+        pytest.param(\"tutorial003_an_py39\", marks=needs_py39),\n+    ],\n+)\n+def get_app(request: pytest.FixtureRequest):\n+    mod = importlib.import_module(f\"docs_src.request_files.{request.param}\")\n+\n+    return mod.app\n+\n+\n+@pytest.fixture(name=\"client\")\n+def get_client(app: FastAPI):\n     client = TestClient(app)\n+    return client\n \n \n-def test_post_files(tmp_path):\n+def test_post_files(tmp_path, app: FastAPI):\n     path = tmp_path / \"test.txt\"\n     path.write_bytes(b\"<file content>\")\n     path2 = tmp_path / \"test2.txt\"\n@@ -24,7 +47,7 @@ def test_post_files(tmp_path):\n     assert response.json() == {\"file_sizes\": [14, 15]}\n \n \n-def test_post_upload_file(tmp_path):\n+def test_post_upload_file(tmp_path, app: FastAPI):\n     path = tmp_path / \"test.txt\"\n     path.write_bytes(b\"<file content>\")\n     path2 = tmp_path / \"test2.txt\"\n@@ -43,14 +66,14 @@ def test_post_upload_file(tmp_path):\n     assert response.json() == {\"filenames\": [\"test.txt\", \"test2.txt\"]}\n \n \n-def test_get_root():\n+def test_get_root(app: FastAPI):\n     client = TestClient(app)\n     response = client.get(\"/\")\n     assert response.status_code == 200, response.text\n     assert b\"<form\" in response.content\n \n \n-def test_openapi_schema():\n+def test_openapi_schema(client: TestClient):\n     response = client.get(\"/openapi.json\")\n     assert response.status_code == 200, response.text\n     assert response.json() == {\n\n@@ -1,194 +0,0 @@\n-from fastapi.testclient import TestClient\n-\n-from docs_src.request_files.tutorial003_an import app\n-\n-client = TestClient(app)\n-\n-\n-def test_post_files(tmp_path):\n-    path = tmp_path / \"test.txt\"\n-    path.write_bytes(b\"<file content>\")\n-    path2 = tmp_path / \"test2.txt\"\n-    path2.write_bytes(b\"<file content2>\")\n-\n-    client = TestClient(app)\n-    with path.open(\"rb\") as file, path2.open(\"rb\") as file2:\n-        response = client.post(\n-            \"/files/\",\n-            files=(\n-                (\"files\", (\"test.txt\", file)),\n-                (\"files\", (\"test2.txt\", file2)),\n-            ),\n-        )\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"file_sizes\": [14, 15]}\n-\n-\n-def test_post_upload_file(tmp_path):\n-    path = tmp_path / \"test.txt\"\n-    path.write_bytes(b\"<file content>\")\n-    path2 = tmp_path / \"test2.txt\"\n-    path2.write_bytes(b\"<file content2>\")\n-\n-    client = TestClient(app)\n-    with path.open(\"rb\") as file, path2.open(\"rb\") as file2:\n-        response = client.post(\n-            \"/uploadfiles/\",\n-            files=(\n-                (\"files\", (\"test.txt\", file)),\n-                (\"files\", (\"test2.txt\", file2)),\n-            ),\n-        )\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"filenames\": [\"test.txt\", \"test2.txt\"]}\n-\n-\n-def test_get_root():\n-    client = TestClient(app)\n-    response = client.get(\"/\")\n-    assert response.status_code == 200, response.text\n-    assert b\"<form\" in response.content\n-\n-\n-def test_openapi_schema():\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\n-        \"openapi\": \"3.1.0\",\n-        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n-        \"paths\": {\n-            \"/files/\": {\n-                \"post\": {\n-                    \"summary\": \"Create Files\",\n-                    \"operationId\": \"create_files_files__post\",\n-                    \"requestBody\": {\n-                        \"content\": {\n-                            \"multipart/form-data\": {\n-                                \"schema\": {\n-                                    \"$ref\": \"#/components/schemas/Body_create_files_files__post\"\n-                                }\n-                            }\n-                        },\n-                        \"required\": True,\n-                    },\n-                    \"responses\": {\n-                        \"200\": {\n-                            \"description\": \"Successful Response\",\n-                            \"content\": {\"application/json\": {\"schema\": {}}},\n-                        },\n-                        \"422\": {\n-                            \"description\": \"Validation Error\",\n-                            \"content\": {\n-                                \"application/json\": {\n-                                    \"schema\": {\n-                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n-                                    }\n-                                }\n-                            },\n-                        },\n-                    },\n-                }\n-            },\n-            \"/uploadfiles/\": {\n-                \"post\": {\n-                    \"summary\": \"Create Upload Files\",\n-                    \"operationId\": \"create_upload_files_uploadfiles__post\",\n-                    \"requestBody\": {\n-                        \"content\": {\n-                            \"multipart/form-data\": {\n-                                \"schema\": {\n-                                    \"$ref\": \"#/components/schemas/Body_create_upload_files_uploadfiles__post\"\n-                                }\n-                            }\n-                        },\n-                        \"required\": True,\n-                    },\n-                    \"responses\": {\n-                        \"200\": {\n-                            \"description\": \"Successful Response\",\n-                            \"content\": {\"application/json\": {\"schema\": {}}},\n-                        },\n-                        \"422\": {\n-                            \"description\": \"Validation Error\",\n-                            \"content\": {\n-                                \"application/json\": {\n-                                    \"schema\": {\n-                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n-                                    }\n-                                }\n-                            },\n-                        },\n-                    },\n-                }\n-            },\n-            \"/\": {\n-                \"get\": {\n-                    \"summary\": \"Main\",\n-                    \"operationId\": \"main__get\",\n-                    \"responses\": {\n-                        \"200\": {\n-                            \"description\": \"Successful Response\",\n-                            \"content\": {\"application/json\": {\"schema\": {}}},\n-                        }\n-                    },\n-                }\n-            },\n-        },\n-        \"components\": {\n-            \"schemas\": {\n-                \"Body_create_files_files__post\": {\n-                    \"title\": \"Body_create_files_files__post\",\n-                    \"required\": [\"files\"],\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"files\": {\n-                            \"title\": \"Files\",\n-                            \"type\": \"array\",\n-                            \"items\": {\"type\": \"string\", \"format\": \"binary\"},\n-                            \"description\": \"Multiple files as bytes\",\n-                        }\n-                    },\n-                },\n-                \"Body_create_upload_files_uploadfiles__post\": {\n-                    \"title\": \"Body_create_upload_files_uploadfiles__post\",\n-                    \"required\": [\"files\"],\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"files\": {\n-                            \"title\": \"Files\",\n-                            \"type\": \"array\",\n-                            \"items\": {\"type\": \"string\", \"format\": \"binary\"},\n-                            \"description\": \"Multiple files as UploadFile\",\n-                        }\n-                    },\n-                },\n-                \"HTTPValidationError\": {\n-                    \"title\": \"HTTPValidationError\",\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"detail\": {\n-                            \"title\": \"Detail\",\n-                            \"type\": \"array\",\n-                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n-                        }\n-                    },\n-                },\n-                \"ValidationError\": {\n-                    \"title\": \"ValidationError\",\n-                    \"required\": [\"loc\", \"msg\", \"type\"],\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"loc\": {\n-                            \"title\": \"Location\",\n-                            \"type\": \"array\",\n-                            \"items\": {\n-                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n-                            },\n-                        },\n-                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n-                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n-                    },\n-                },\n-            }\n-        },\n-    }\n\n@@ -1,222 +0,0 @@\n-import pytest\n-from fastapi import FastAPI\n-from fastapi.testclient import TestClient\n-\n-from ...utils import needs_py39\n-\n-\n-@pytest.fixture(name=\"app\")\n-def get_app():\n-    from docs_src.request_files.tutorial003_an_py39 import app\n-\n-    return app\n-\n-\n-@pytest.fixture(name=\"client\")\n-def get_client(app: FastAPI):\n-    client = TestClient(app)\n-    return client\n-\n-\n-file_required = {\n-    \"detail\": [\n-        {\n-            \"loc\": [\"body\", \"files\"],\n-            \"msg\": \"field required\",\n-            \"type\": \"value_error.missing\",\n-        }\n-    ]\n-}\n-\n-\n-@needs_py39\n-def test_post_files(tmp_path, app: FastAPI):\n-    path = tmp_path / \"test.txt\"\n-    path.write_bytes(b\"<file content>\")\n-    path2 = tmp_path / \"test2.txt\"\n-    path2.write_bytes(b\"<file content2>\")\n-\n-    client = TestClient(app)\n-    with path.open(\"rb\") as file, path2.open(\"rb\") as file2:\n-        response = client.post(\n-            \"/files/\",\n-            files=(\n-                (\"files\", (\"test.txt\", file)),\n-                (\"files\", (\"test2.txt\", file2)),\n-            ),\n-        )\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"file_sizes\": [14, 15]}\n-\n-\n-@needs_py39\n-def test_post_upload_file(tmp_path, app: FastAPI):\n-    path = tmp_path / \"test.txt\"\n-    path.write_bytes(b\"<file content>\")\n-    path2 = tmp_path / \"test2.txt\"\n-    path2.write_bytes(b\"<file content2>\")\n-\n-    client = TestClient(app)\n-    with path.open(\"rb\") as file, path2.open(\"rb\") as file2:\n-        response = client.post(\n-            \"/uploadfiles/\",\n-            files=(\n-                (\"files\", (\"test.txt\", file)),\n-                (\"files\", (\"test2.txt\", file2)),\n-            ),\n-        )\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"filenames\": [\"test.txt\", \"test2.txt\"]}\n-\n-\n-@needs_py39\n-def test_get_root(app: FastAPI):\n-    client = TestClient(app)\n-    response = client.get(\"/\")\n-    assert response.status_code == 200, response.text\n-    assert b\"<form\" in response.content\n-\n-\n-@needs_py39\n-def test_openapi_schema(client: TestClient):\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\n-        \"openapi\": \"3.1.0\",\n-        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n-        \"paths\": {\n-            \"/files/\": {\n-                \"post\": {\n-                    \"summary\": \"Create Files\",\n-                    \"operationId\": \"create_files_files__post\",\n-                    \"requestBody\": {\n-                        \"content\": {\n-                            \"multipart/form-data\": {\n-                                \"schema\": {\n-                                    \"$ref\": \"#/components/schemas/Body_create_files_files__post\"\n-                                }\n-                            }\n-                        },\n-                        \"required\": True,\n-                    },\n-                    \"responses\": {\n-                        \"200\": {\n-                            \"description\": \"Successful Response\",\n-                            \"content\": {\"application/json\": {\"schema\": {}}},\n-                        },\n-                        \"422\": {\n-                            \"description\": \"Validation Error\",\n-                            \"content\": {\n-                                \"application/json\": {\n-                                    \"schema\": {\n-                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n-                                    }\n-                                }\n-                            },\n-                        },\n-                    },\n-                }\n-            },\n-            \"/uploadfiles/\": {\n-                \"post\": {\n-                    \"summary\": \"Create Upload Files\",\n-                    \"operationId\": \"create_upload_files_uploadfiles__post\",\n-                    \"requestBody\": {\n-                        \"content\": {\n-                            \"multipart/form-data\": {\n-                                \"schema\": {\n-                                    \"$ref\": \"#/components/schemas/Body_create_upload_files_uploadfiles__post\"\n-                                }\n-                            }\n-                        },\n-                        \"required\": True,\n-                    },\n-                    \"responses\": {\n-                        \"200\": {\n-                            \"description\": \"Successful Response\",\n-                            \"content\": {\"application/json\": {\"schema\": {}}},\n-                        },\n-                        \"422\": {\n-                            \"description\": \"Validation Error\",\n-                            \"content\": {\n-                                \"application/json\": {\n-                                    \"schema\": {\n-                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n-                                    }\n-                                }\n-                            },\n-                        },\n-                    },\n-                }\n-            },\n-            \"/\": {\n-                \"get\": {\n-                    \"summary\": \"Main\",\n-                    \"operationId\": \"main__get\",\n-                    \"responses\": {\n-                        \"200\": {\n-                            \"description\": \"Successful Response\",\n-                            \"content\": {\"application/json\": {\"schema\": {}}},\n-                        }\n-                    },\n-                }\n-            },\n-        },\n-        \"components\": {\n-            \"schemas\": {\n-                \"Body_create_files_files__post\": {\n-                    \"title\": \"Body_create_files_files__post\",\n-                    \"required\": [\"files\"],\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"files\": {\n-                            \"title\": \"Files\",\n-                            \"type\": \"array\",\n-                            \"items\": {\"type\": \"string\", \"format\": \"binary\"},\n-                            \"description\": \"Multiple files as bytes\",\n-                        }\n-                    },\n-                },\n-                \"Body_create_upload_files_uploadfiles__post\": {\n-                    \"title\": \"Body_create_upload_files_uploadfiles__post\",\n-                    \"required\": [\"files\"],\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"files\": {\n-                            \"title\": \"Files\",\n-                            \"type\": \"array\",\n-                            \"items\": {\"type\": \"string\", \"format\": \"binary\"},\n-                            \"description\": \"Multiple files as UploadFile\",\n-                        }\n-                    },\n-                },\n-                \"HTTPValidationError\": {\n-                    \"title\": \"HTTPValidationError\",\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"detail\": {\n-                            \"title\": \"Detail\",\n-                            \"type\": \"array\",\n-                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n-                        }\n-                    },\n-                },\n-                \"ValidationError\": {\n-                    \"title\": \"ValidationError\",\n-                    \"required\": [\"loc\", \"msg\", \"type\"],\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"loc\": {\n-                            \"title\": \"Location\",\n-                            \"type\": \"array\",\n-                            \"items\": {\n-                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n-                            },\n-                        },\n-                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n-                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n-                    },\n-                },\n-            }\n-        },\n-    }\n\n@@ -1,222 +0,0 @@\n-import pytest\n-from fastapi import FastAPI\n-from fastapi.testclient import TestClient\n-\n-from ...utils import needs_py39\n-\n-\n-@pytest.fixture(name=\"app\")\n-def get_app():\n-    from docs_src.request_files.tutorial003_py39 import app\n-\n-    return app\n-\n-\n-@pytest.fixture(name=\"client\")\n-def get_client(app: FastAPI):\n-    client = TestClient(app)\n-    return client\n-\n-\n-file_required = {\n-    \"detail\": [\n-        {\n-            \"loc\": [\"body\", \"files\"],\n-            \"msg\": \"field required\",\n-            \"type\": \"value_error.missing\",\n-        }\n-    ]\n-}\n-\n-\n-@needs_py39\n-def test_post_files(tmp_path, app: FastAPI):\n-    path = tmp_path / \"test.txt\"\n-    path.write_bytes(b\"<file content>\")\n-    path2 = tmp_path / \"test2.txt\"\n-    path2.write_bytes(b\"<file content2>\")\n-\n-    client = TestClient(app)\n-    with path.open(\"rb\") as file, path2.open(\"rb\") as file2:\n-        response = client.post(\n-            \"/files/\",\n-            files=(\n-                (\"files\", (\"test.txt\", file)),\n-                (\"files\", (\"test2.txt\", file2)),\n-            ),\n-        )\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"file_sizes\": [14, 15]}\n-\n-\n-@needs_py39\n-def test_post_upload_file(tmp_path, app: FastAPI):\n-    path = tmp_path / \"test.txt\"\n-    path.write_bytes(b\"<file content>\")\n-    path2 = tmp_path / \"test2.txt\"\n-    path2.write_bytes(b\"<file content2>\")\n-\n-    client = TestClient(app)\n-    with path.open(\"rb\") as file, path2.open(\"rb\") as file2:\n-        response = client.post(\n-            \"/uploadfiles/\",\n-            files=(\n-                (\"files\", (\"test.txt\", file)),\n-                (\"files\", (\"test2.txt\", file2)),\n-            ),\n-        )\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"filenames\": [\"test.txt\", \"test2.txt\"]}\n-\n-\n-@needs_py39\n-def test_get_root(app: FastAPI):\n-    client = TestClient(app)\n-    response = client.get(\"/\")\n-    assert response.status_code == 200, response.text\n-    assert b\"<form\" in response.content\n-\n-\n-@needs_py39\n-def test_openapi_schema(client: TestClient):\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\n-        \"openapi\": \"3.1.0\",\n-        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n-        \"paths\": {\n-            \"/files/\": {\n-                \"post\": {\n-                    \"summary\": \"Create Files\",\n-                    \"operationId\": \"create_files_files__post\",\n-                    \"requestBody\": {\n-                        \"content\": {\n-                            \"multipart/form-data\": {\n-                                \"schema\": {\n-                                    \"$ref\": \"#/components/schemas/Body_create_files_files__post\"\n-                                }\n-                            }\n-                        },\n-                        \"required\": True,\n-                    },\n-                    \"responses\": {\n-                        \"200\": {\n-                            \"description\": \"Successful Response\",\n-                            \"content\": {\"application/json\": {\"schema\": {}}},\n-                        },\n-                        \"422\": {\n-                            \"description\": \"Validation Error\",\n-                            \"content\": {\n-                                \"application/json\": {\n-                                    \"schema\": {\n-                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n-                                    }\n-                                }\n-                            },\n-                        },\n-                    },\n-                }\n-            },\n-            \"/uploadfiles/\": {\n-                \"post\": {\n-                    \"summary\": \"Create Upload Files\",\n-                    \"operationId\": \"create_upload_files_uploadfiles__post\",\n-                    \"requestBody\": {\n-                        \"content\": {\n-                            \"multipart/form-data\": {\n-                                \"schema\": {\n-                                    \"$ref\": \"#/components/schemas/Body_create_upload_files_uploadfiles__post\"\n-                                }\n-                            }\n-                        },\n-                        \"required\": True,\n-                    },\n-                    \"responses\": {\n-                        \"200\": {\n-                            \"description\": \"Successful Response\",\n-                            \"content\": {\"application/json\": {\"schema\": {}}},\n-                        },\n-                        \"422\": {\n-                            \"description\": \"Validation Error\",\n-                            \"content\": {\n-                                \"application/json\": {\n-                                    \"schema\": {\n-                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n-                                    }\n-                                }\n-                            },\n-                        },\n-                    },\n-                }\n-            },\n-            \"/\": {\n-                \"get\": {\n-                    \"summary\": \"Main\",\n-                    \"operationId\": \"main__get\",\n-                    \"responses\": {\n-                        \"200\": {\n-                            \"description\": \"Successful Response\",\n-                            \"content\": {\"application/json\": {\"schema\": {}}},\n-                        }\n-                    },\n-                }\n-            },\n-        },\n-        \"components\": {\n-            \"schemas\": {\n-                \"Body_create_files_files__post\": {\n-                    \"title\": \"Body_create_files_files__post\",\n-                    \"required\": [\"files\"],\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"files\": {\n-                            \"title\": \"Files\",\n-                            \"type\": \"array\",\n-                            \"items\": {\"type\": \"string\", \"format\": \"binary\"},\n-                            \"description\": \"Multiple files as bytes\",\n-                        }\n-                    },\n-                },\n-                \"Body_create_upload_files_uploadfiles__post\": {\n-                    \"title\": \"Body_create_upload_files_uploadfiles__post\",\n-                    \"required\": [\"files\"],\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"files\": {\n-                            \"title\": \"Files\",\n-                            \"type\": \"array\",\n-                            \"items\": {\"type\": \"string\", \"format\": \"binary\"},\n-                            \"description\": \"Multiple files as UploadFile\",\n-                        }\n-                    },\n-                },\n-                \"HTTPValidationError\": {\n-                    \"title\": \"HTTPValidationError\",\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"detail\": {\n-                            \"title\": \"Detail\",\n-                            \"type\": \"array\",\n-                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n-                        }\n-                    },\n-                },\n-                \"ValidationError\": {\n-                    \"title\": \"ValidationError\",\n-                    \"required\": [\"loc\", \"msg\", \"type\"],\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"loc\": {\n-                            \"title\": \"Location\",\n-                            \"type\": \"array\",\n-                            \"items\": {\n-                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n-                            },\n-                        },\n-                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n-                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n-                    },\n-                },\n-            }\n-        },\n-    }\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
