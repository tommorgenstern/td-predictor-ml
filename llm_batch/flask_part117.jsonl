{"custom_id": "flask#bfffe87d4c2ea255b9a51432bebb3d28741245c4", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 1 | Churn Cumulative: 1997 | Contributors (this commit): 16 | Commits (past 90d): 1 | Contributors (cumulative): 16 | DMM Complexity: None\n\nDIFF:\n@@ -26,6 +26,7 @@ autodoc_preserve_defaults = True\n extlinks = {\n     \"issue\": (\"https://github.com/pallets/flask/issues/%s\", \"#%s\"),\n     \"pr\": (\"https://github.com/pallets/flask/pull/%s\", \"#%s\"),\n+    \"ghsa\": (\"https://github.com/pallets/flask/security/advisories/GHSA-%s\", \"GHSA-%s\"),\n }\n intersphinx_mapping = {\n     \"python\": (\"https://docs.python.org/3/\", None),\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#410e5ab7ed0ef326fa8b5164a633863f137ffff5", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 3 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 2 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 3 | Churn Cumulative: 223 | Contributors (this commit): 11 | Commits (past 90d): 2 | Contributors (cumulative): 11 | DMM Complexity: None\n\nDIFF:\n@@ -1,5 +1,6 @@\n from __future__ import annotations\n \n+import collections.abc as cabc\n import typing as t\n \n if t.TYPE_CHECKING:  # pragma: no cover\n@@ -17,6 +18,8 @@ ResponseValue = t.Union[\n     t.Mapping[str, t.Any],\n     t.Iterator[str],\n     t.Iterator[bytes],\n+    cabc.AsyncIterable[str],  # for Quart, until App is generic.\n+    cabc.AsyncIterable[bytes],\n ]\n \n # the possible types for an individual HTTP header\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#11c45eeba3b5bcf06b84f4e864862f1019a3faa3", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 4950 | Contributors (this commit): 28 | Commits (past 90d): 2 | Contributors (cumulative): 28 | DMM Complexity: None\n\nDIFF:\n@@ -1222,7 +1222,7 @@ class Flask(App):\n                 # waiting to do it manually, so that the class can handle any\n                 # special logic\n                 rv = self.response_class(\n-                    rv,\n+                    rv,  # pyright: ignore\n                     status=status,\n                     headers=headers,  # type: ignore[arg-type]\n                 )\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#0109e496f6ca68de29480fe6413e81b1d3f86aa9", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 4952 | Contributors (this commit): 28 | Commits (past 90d): 3 | Contributors (cumulative): 28 | DMM Complexity: None\n\nDIFF:\n@@ -1222,7 +1222,7 @@ class Flask(App):\n                 # waiting to do it manually, so that the class can handle any\n                 # special logic\n                 rv = self.response_class(\n-                    rv,\n+                    rv,  # pyright: ignore\n                     status=status,\n                     headers=headers,  # type: ignore[arg-type]\n                 )\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#fb54159861708558b5f5658ebdc14709d984361c", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 13 | Lines Deleted: 5 | Files Changed: 2 | Hunks: 5 | Methods Changed: 2 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 18 | Churn Cumulative: 5554 | Contributors (this commit): 50 | Commits (past 90d): 2 | Contributors (cumulative): 55 | DMM Complexity: 1.0\n\nDIFF:\n@@ -318,11 +318,12 @@ class SecureCookieSessionInterface(SessionInterface):\n         if not app.secret_key:\n             return None\n \n-        keys: list[str | bytes] = [app.secret_key]\n+        keys: list[str | bytes] = []\n \n         if fallbacks := app.config[\"SECRET_KEY_FALLBACKS\"]:\n             keys.extend(fallbacks)\n \n+        keys.append(app.secret_key)  # itsdangerous expects current key at top\n         return URLSafeTimedSerializer(\n             keys,  # type: ignore[arg-type]\n             salt=self.salt,\n\n@@ -381,14 +381,21 @@ def test_session_secret_key_fallbacks(app, client) -> None:\n     def get_session() -> dict[str, t.Any]:\n         return dict(flask.session)\n \n-    # Set session with initial secret key\n+    # Set session with initial secret key, and two valid expiring keys\n+    app.secret_key, app.config[\"SECRET_KEY_FALLBACKS\"] = (\n+        \"0 key\",\n+        [\"-1 key\", \"-2 key\"],\n+    )\n     client.post()\n     assert client.get().json == {\"a\": 1}\n     # Change secret key, session can't be loaded and appears empty\n-    app.secret_key = \"new test key\"\n+    app.secret_key = \"? key\"\n     assert client.get().json == {}\n-    # Add initial secret key as fallback, session can be loaded\n-    app.config[\"SECRET_KEY_FALLBACKS\"] = [\"test key\"]\n+    # Rotate the valid keys, session can be loaded\n+    app.secret_key, app.config[\"SECRET_KEY_FALLBACKS\"] = (\n+        \"+1 key\",\n+        [\"0 key\", \"-1 key\"],\n+    )\n     assert client.get().json == {\"a\": 1}\n \n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#52df9eed45d0b19c588662ed8492d8fbaa0e7098", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 31 | Lines Deleted: 45 | Files Changed: 5 | Hunks: 10 | Methods Changed: 2 | Complexity Δ (Sum/Max): -1/0 | Churn Δ: 76 | Churn Cumulative: 5604 | Contributors (this commit): 53 | Commits (past 90d): 5 | Contributors (cumulative): 68 | DMM Complexity: 0.0\n\nDIFF:\n@@ -601,15 +601,7 @@ class FlaskGroup(AppGroup):\n         if self._loaded_plugin_commands:\n             return\n \n-        if sys.version_info >= (3, 10):\n-            from importlib import metadata\n-        else:\n-            # Use a backport on Python < 3.10. We technically have\n-            # importlib.metadata on 3.8+, but the API changed in 3.10,\n-            # so use the backport for consistency.\n-            import importlib_metadata as metadata  # pyright: ignore\n-\n-        for ep in metadata.entry_points(group=\"flask.commands\"):\n+        for ep in importlib.metadata.entry_points(group=\"flask.commands\"):\n             self.add_command(ep.load(), ep.name)\n \n         self._loaded_plugin_commands = True\n\n@@ -135,7 +135,7 @@ class DefaultJSONProvider(JSONProvider):\n         method) will call the ``__html__`` method to get a string.\n     \"\"\"\n \n-    default: t.Callable[[t.Any], t.Any] = staticmethod(_default)  # type: ignore[assignment]\n+    default: t.Callable[[t.Any], t.Any] = staticmethod(_default)\n     \"\"\"Apply this function to any object that :meth:`json.dumps` does\n     not know how to serialize. It should return a valid JSON type or\n     raise a ``TypeError``.\n\n@@ -213,7 +213,7 @@ class App(Scaffold):\n     #:\n     #: This attribute can also be configured from the config with the\n     #: :data:`SECRET_KEY` configuration key. Defaults to ``None``.\n-    secret_key = ConfigAttribute[t.Union[str, bytes, None]](\"SECRET_KEY\")\n+    secret_key = ConfigAttribute[str | bytes | None](\"SECRET_KEY\")\n \n     #: A :class:`~datetime.timedelta` which is used to set the expiration\n     #: date of a permanent session.  The default is 31 days which makes a\n\n@@ -23,8 +23,7 @@ ResponseValue = t.Union[\n ]\n \n # the possible types for an individual HTTP header\n-# This should be a Union, but mypy doesn't pass unless it's a TypeVar.\n-HeaderValue = t.Union[str, list[str], tuple[str, ...]]\n+HeaderValue = str | list[str] | tuple[str, ...]\n \n # the possible types for HTTP headers\n HeadersValue = t.Union[\n@@ -47,34 +46,29 @@ ResponseReturnValue = t.Union[\n # callback annotated with flask.Response fail type checking.\n ResponseClass = t.TypeVar(\"ResponseClass\", bound=\"Response\")\n \n-AppOrBlueprintKey = t.Optional[str]  # The App key is None, whereas blueprints are named\n-AfterRequestCallable = t.Union[\n-    t.Callable[[ResponseClass], ResponseClass],\n-    t.Callable[[ResponseClass], t.Awaitable[ResponseClass]],\n-]\n-BeforeFirstRequestCallable = t.Union[\n-    t.Callable[[], None], t.Callable[[], t.Awaitable[None]]\n-]\n-BeforeRequestCallable = t.Union[\n-    t.Callable[[], t.Optional[ResponseReturnValue]],\n-    t.Callable[[], t.Awaitable[t.Optional[ResponseReturnValue]]],\n-]\n+AppOrBlueprintKey = str | None  # The App key is None, whereas blueprints are named\n+AfterRequestCallable = (\n+    t.Callable[[ResponseClass], ResponseClass]\n+    | t.Callable[[ResponseClass], t.Awaitable[ResponseClass]]\n+)\n+BeforeFirstRequestCallable = t.Callable[[], None] | t.Callable[[], t.Awaitable[None]]\n+BeforeRequestCallable = (\n+    t.Callable[[], ResponseReturnValue | None]\n+    | t.Callable[[], t.Awaitable[ResponseReturnValue | None]]\n+)\n ShellContextProcessorCallable = t.Callable[[], dict[str, t.Any]]\n-TeardownCallable = t.Union[\n-    t.Callable[[t.Optional[BaseException]], None],\n-    t.Callable[[t.Optional[BaseException]], t.Awaitable[None]],\n-]\n-TemplateContextProcessorCallable = t.Union[\n-    t.Callable[[], dict[str, t.Any]],\n-    t.Callable[[], t.Awaitable[dict[str, t.Any]]],\n-]\n+TeardownCallable = (\n+    t.Callable[[BaseException | None], None]\n+    | t.Callable[[BaseException | None], t.Awaitable[None]]\n+)\n+TemplateContextProcessorCallable = (\n+    t.Callable[[], dict[str, t.Any]] | t.Callable[[], t.Awaitable[dict[str, t.Any]]]\n+)\n TemplateFilterCallable = t.Callable[..., t.Any]\n TemplateGlobalCallable = t.Callable[..., t.Any]\n TemplateTestCallable = t.Callable[..., bool]\n URLDefaultCallable = t.Callable[[str, dict[str, t.Any]], None]\n-URLValuePreprocessorCallable = t.Callable[\n-    [t.Optional[str], t.Optional[dict[str, t.Any]]], None\n-]\n+URLValuePreprocessorCallable = t.Callable[[str | None, dict[str, t.Any] | None], None]\n \n # This should take Exception, but that either breaks typing the argument\n # with a specific exception, or decorating multiple times with different\n@@ -82,12 +76,12 @@ URLValuePreprocessorCallable = t.Callable[\n # https://github.com/pallets/flask/issues/4095\n # https://github.com/pallets/flask/issues/4295\n # https://github.com/pallets/flask/issues/4297\n-ErrorHandlerCallable = t.Union[\n-    t.Callable[[t.Any], ResponseReturnValue],\n-    t.Callable[[t.Any], t.Awaitable[ResponseReturnValue]],\n-]\n+ErrorHandlerCallable = (\n+    t.Callable[[t.Any], ResponseReturnValue]\n+    | t.Callable[[t.Any], t.Awaitable[ResponseReturnValue]]\n+)\n \n-RouteCallable = t.Union[\n-    t.Callable[..., ResponseReturnValue],\n-    t.Callable[..., t.Awaitable[ResponseReturnValue]],\n-]\n+RouteCallable = (\n+    t.Callable[..., ResponseReturnValue]\n+    | t.Callable[..., t.Awaitable[ResponseReturnValue]]\n+)\n\n@@ -462,7 +462,7 @@ class TestRoutes:\n \n     def expect_order(self, order, output):\n         # skip the header and match the start of each row\n-        for expect, line in zip(order, output.splitlines()[2:]):\n+        for expect, line in zip(order, output.splitlines()[2:], strict=False):\n             # do this instead of startswith for nicer pytest output\n             assert line[: len(expect)] == expect\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#f04c5e696400badaa52b3450ded53e9091c2078a", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 7 | Lines Deleted: 7 | Files Changed: 6 | Hunks: 6 | Methods Changed: 6 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 14 | Churn Cumulative: 5275 | Contributors (this commit): 34 | Commits (past 90d): 8 | Contributors (cumulative): 49 | DMM Complexity: None\n\nDIFF:\n@@ -187,8 +187,8 @@ def copy_current_request_context(f: F) -> F:\n     ctx = ctx.copy()\n \n     def wrapper(*args: t.Any, **kwargs: t.Any) -> t.Any:\n-        with ctx:  # type: ignore[union-attr]\n-            return ctx.app.ensure_sync(f)(*args, **kwargs)  # type: ignore[union-attr]\n+        with ctx:\n+            return ctx.app.ensure_sync(f)(*args, **kwargs)\n \n     return update_wrapper(wrapper, f)  # type: ignore[return-value]\n \n\n@@ -392,7 +392,7 @@ def _prepare_send_file_kwargs(**kwargs: t.Any) -> dict[str, t.Any]:\n         environ=request.environ,\n         use_x_sendfile=current_app.config[\"USE_X_SENDFILE\"],\n         response_class=current_app.response_class,\n-        _root_path=current_app.root_path,  # type: ignore\n+        _root_path=current_app.root_path,\n     )\n     return kwargs\n \n\n@@ -423,7 +423,7 @@ class App(Scaffold):\n             )\n \n     @cached_property\n-    def name(self) -> str:  # type: ignore\n+    def name(self) -> str:\n         \"\"\"The name of the application.  This is usually the import name\n         with the difference that it's guessed from the run file if the\n         import name is main.  This name is used as a display name when\n\n@@ -84,7 +84,7 @@ class Scaffold:\n         #: to. Do not change this once it is set by the constructor.\n         self.import_name = import_name\n \n-        self.static_folder = static_folder  # type: ignore\n+        self.static_folder = static_folder\n         self.static_url_path = static_url_path\n \n         #: The path to the templates folder, relative to\n\n@@ -107,7 +107,7 @@ class NullSession(SecureCookieSession):\n             \"application to something unique and secret.\"\n         )\n \n-    __setitem__ = __delitem__ = clear = pop = popitem = update = setdefault = _fail  # type: ignore # noqa: B950\n+    __setitem__ = __delitem__ = clear = pop = popitem = update = setdefault = _fail  # noqa: B950\n     del _fail\n \n \n\n@@ -85,7 +85,7 @@ class EnvironBuilder(werkzeug.test.EnvironBuilder):\n         self.app = app\n         super().__init__(path, base_url, *args, **kwargs)\n \n-    def json_dumps(self, obj: t.Any, **kwargs: t.Any) -> str:  # type: ignore\n+    def json_dumps(self, obj: t.Any, **kwargs: t.Any) -> str:\n         \"\"\"Serialize ``obj`` to a JSON-formatted string.\n \n         The serialization will be configured according to the config associated\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#a758915893352f5986c6ee101cdf7e3b7a64fa28", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 2001 | Contributors (this commit): 16 | Commits (past 90d): 2 | Contributors (cumulative): 16 | DMM Complexity: None\n\nDIFF:\n@@ -58,8 +58,8 @@ html_sidebars = {\n }\n singlehtml_sidebars = {\"index\": [\"project.html\", \"localtoc.html\", \"ethicalads.html\"]}\n html_static_path = [\"_static\"]\n-html_favicon = \"_static/shortcut-icon.png\"\n-html_logo = \"_static/flask-vertical.png\"\n+html_favicon = \"_static/flask-icon.svg\"\n+html_logo = \"_static/flask-vertical.svg\"\n html_title = f\"Flask Documentation ({version})\"\n html_show_sourcelink = False\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#85cc71046475f9cb3efd17d496356795961249f9", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 2003 | Contributors (this commit): 16 | Commits (past 90d): 3 | Contributors (cumulative): 16 | DMM Complexity: None\n\nDIFF:\n@@ -59,7 +59,7 @@ html_sidebars = {\n singlehtml_sidebars = {\"index\": [\"project.html\", \"localtoc.html\", \"ethicalads.html\"]}\n html_static_path = [\"_static\"]\n html_favicon = \"_static/flask-icon.svg\"\n-html_logo = \"_static/flask-vertical.svg\"\n+html_logo = \"_static/flask-logo.svg\"\n html_title = f\"Flask Documentation ({version})\"\n html_show_sourcelink = False\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
