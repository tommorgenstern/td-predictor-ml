{"custom_id": "flask#727c701686c18c4a27ca523eb0c5862d497be24e", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 242 | Contributors (this commit): 2 | Commits (past 90d): 5 | Contributors (cumulative): 2 | DMM Complexity: None\n\nDIFF:\n@@ -65,7 +65,7 @@ def before_request():\n     \"\"\"Make sure we are connected to the database each request and look\n     up the current user so that we know he's there.\n     \"\"\"\n-    g.db = sqlite3.connect(DATABASE)\n+    g.db = connect_db()\n     if 'user_id' in session:\n         g.user = query_db('select * from user where user_id = ?',\n                           [session['user_id']], one=True)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#7d6b8e9ab3e738d69e39ad53a7c0f6a552d5284a", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 31 | Lines Deleted: 5 | Files Changed: 1 | Hunks: 3 | Methods Changed: 4 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 36 | Churn Cumulative: 597 | Contributors (this commit): 2 | Commits (past 90d): 5 | Contributors (cumulative): 2 | DMM Complexity: 1.0\n\nDIFF:\n@@ -288,6 +288,27 @@ class Flask(object):\n         if session is not None:\n             session.save_cookie(response, self.session_cookie_name)\n \n+    def add_url_rule(self, endpoint, **options):\n+        \"\"\"Connects a URL rule.  Works exactly like the :meth:`route`\n+        decorator but does not register the view function for the endpoint.\n+\n+        Basically this example::\n+\n+            @app.route('/')\n+            def index():\n+                pass\n+\n+        Is equivalent to the following:\n+\n+            def index():\n+                pass\n+            app.add_url_rule('index', '/')\n+            app.view_functions['index'] = index\n+        \"\"\"\n+        options['endpoint'] = f.__name__\n+        options.setdefault('methods', ('GET',))\n+        self.url_map.add(Rule(rule, **options))\n+\n     def route(self, rule, **options):\n         \"\"\"A decorator that is used to register a view function for a\n         given URL rule.  Example::\n@@ -351,11 +372,8 @@ class Flask(object):\n                                setting for this rule.  See above.\n         \"\"\"\n         def decorator(f):\n-            if 'endpoint' not in options:\n-                options['endpoint'] = f.__name__\n-            options.setdefault('methods', ('GET',))\n-            self.url_map.add(Rule(rule, **options))\n-            self.view_functions[options['endpoint']] = f\n+            self.add_url_rule(f.__name__, **options)\n+            self.view_functions[f.__name__] = f\n             return f\n         return decorator\n \n@@ -366,6 +384,14 @@ class Flask(object):\n             @app.errorhandler(404)\n             def page_not_found():\n                 return 'This page does not exist', 404\n+\n+        You can also register a function as error handler without using\n+        the :meth:`errorhandler` decorator.  The following example is\n+        equivalent to the one above::\n+\n+            def page_not_found():\n+                return 'This page does not exist', 404\n+            app.error_handlers[404] = page_not_found\n         \"\"\"\n         def decorator(f):\n             self.error_handlers[code] = f\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#3d719f35f5c1ee4ce3dc01fb2167ef49c0180cf6", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 110 | Lines Deleted: 10 | Files Changed: 3 | Hunks: 11 | Methods Changed: 4 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 120 | Churn Cumulative: 960 | Contributors (this commit): 2 | Commits (past 90d): 10 | Contributors (cumulative): 5 | DMM Complexity: None\n\nDIFF:\n@@ -16,7 +16,7 @@ import sys, os\n # If extensions (or modules to document with autodoc) are in another directory,\n # add these directories to sys.path here. If the directory is relative to the\n # documentation root, use os.path.abspath to make it absolute, like shown here.\n-#sys.path.append(os.path.abspath('.'))\n+sys.path.append(os.path.abspath('.'))\n \n # -- General configuration -----------------------------------------------------\n \n@@ -80,7 +80,7 @@ exclude_patterns = ['_build']\n #show_authors = False\n \n # The name of the Pygments (syntax highlighting) style to use.\n-pygments_style = 'sphinx'\n+pygments_style = 'flaskext.FlaskyStyle'\n \n # A list of ignored prefixes for module index sorting.\n #modindex_common_prefix = []\n@@ -90,7 +90,7 @@ pygments_style = 'sphinx'\n \n # The theme to use for HTML and HTML Help pages.  Major themes that come with\n # Sphinx are currently 'default' and 'sphinxdoc'.\n-html_theme = 'nature'\n+html_theme = 'flasky'\n \n # Theme options are theme-specific and customize the look and feel of a theme\n # further.  For a list of options available for each theme, see the\n@@ -98,7 +98,7 @@ html_theme = 'nature'\n #html_theme_options = {}\n \n # Add any paths that contain custom themes here, relative to this directory.\n-#html_theme_path = []\n+html_theme_path = ['_themes']\n \n # The name for this set of Sphinx documents.  If None, it defaults to\n # \"<project> v<release> documentation\".\n@@ -108,7 +108,7 @@ html_theme = 'nature'\n #html_short_title = None\n \n # The name of an image file (relative to this directory) to place at the top\n-# of the sidebar.\n+# of the sidebar.  Do not set, template magic!\n #html_logo = None\n \n # The name of an image file (within the static path) to use as favicon of the\n@@ -130,7 +130,11 @@ html_static_path = ['_static']\n #html_use_smartypants = True\n \n # Custom sidebar templates, maps document names to template names.\n-#html_sidebars = {}\n+html_sidebars = {\n+    'index':    ['sidebarintro.html', 'sourcelink.html', 'searchbox.html'],\n+    '**':       ['sidebarlogo.html', 'localtoc.html', 'relations.html',\n+                 'sourcelink.html', 'searchbox.html']\n+}\n \n # Additional templates that should be rendered to pages, maps page names to\n # template names.\n\n@@ -0,0 +1,96 @@\n+# flasky extensions.  flasky pygments style based on tango style\n+from pygments.style import Style\n+from pygments.token import Keyword, Name, Comment, String, Error, \\\n+     Number, Operator, Generic, Whitespace, Punctuation, Other, Literal\n+\n+\n+class FlaskyStyle(Style):\n+    background_color = \"#f8f8f8\"\n+    default_style = \"\"\n+\n+    styles = {\n+        # No corresponding class for the following:\n+        #Text:                     \"\", # class:  ''\n+        Whitespace:                \"underline #f8f8f8\",      # class: 'w'\n+        Error:                     \"#a40000 border:#ef2929\", # class: 'err'\n+        Other:                     \"#000000\",                # class 'x'\n+\n+        Comment:                   \"italic #8f5902\", # class: 'c'\n+        Comment.Multiline:         \"italic #8f5902\", # class: 'cm'\n+        Comment.Preproc:           \"italic #8f5902\", # class: 'cp'\n+        Comment.Single:            \"italic #8f5902\", # class: 'c1'\n+        Comment.Special:           \"italic #8f5902\", # class: 'cs'\n+\n+        Keyword:                   \"bold #004461\",   # class: 'k'\n+        Keyword.Constant:          \"bold #004461\",   # class: 'kc'\n+        Keyword.Declaration:       \"bold #004461\",   # class: 'kd'\n+        Keyword.Namespace:         \"bold #004461\",   # class: 'kn'\n+        Keyword.Pseudo:            \"bold #004461\",   # class: 'kp'\n+        Keyword.Reserved:          \"bold #004461\",   # class: 'kr'\n+        Keyword.Type:              \"bold #004461\",   # class: 'kt'\n+\n+        Operator:                  \"#582800\",   # class: 'o'\n+        Operator.Word:             \"bold #004461\",   # class: 'ow' - like keywords\n+\n+        Punctuation:               \"bold #000000\",   # class: 'p'\n+\n+        # because special names such as Name.Class, Name.Function, etc.\n+        # are not recognized as such later in the parsing, we choose them\n+        # to look the same as ordinary variables.\n+        Name:                      \"#000000\",        # class: 'n'\n+        Name.Attribute:            \"#c4a000\",        # class: 'na' - to be revised\n+        Name.Builtin:              \"#004461\",        # class: 'nb'\n+        Name.Builtin.Pseudo:       \"#3465a4\",        # class: 'bp'\n+        Name.Class:                \"#000000\",        # class: 'nc' - to be revised\n+        Name.Constant:             \"#000000\",        # class: 'no' - to be revised\n+        Name.Decorator:            \"#999\",           # class: 'nd' - to be revised\n+        Name.Entity:               \"#ce5c00\",        # class: 'ni'\n+        Name.Exception:            \"bold #cc0000\",   # class: 'ne'\n+        Name.Function:             \"#000000\",        # class: 'nf'\n+        Name.Property:             \"#000000\",        # class: 'py'\n+        Name.Label:                \"#f57900\",        # class: 'nl'\n+        Name.Namespace:            \"#000000\",        # class: 'nn' - to be revised\n+        Name.Other:                \"#000000\",        # class: 'nx'\n+        Name.Tag:                  \"bold #004461\",   # class: 'nt' - like a keyword\n+        Name.Variable:             \"#000000\",        # class: 'nv' - to be revised\n+        Name.Variable.Class:       \"#000000\",        # class: 'vc' - to be revised\n+        Name.Variable.Global:      \"#000000\",        # class: 'vg' - to be revised\n+        Name.Variable.Instance:    \"#000000\",        # class: 'vi' - to be revised\n+\n+        # since the tango light blue does not show up well in text, we choose\n+        # a pure blue instead.\n+        Number:                    \"bold #0000cf\",   # class: 'm'\n+        Number.Float:              \"bold #0000cf\",   # class: 'mf'\n+        Number.Hex:                \"bold #0000cf\",   # class: 'mh'\n+        Number.Integer:            \"bold #0000cf\",   # class: 'mi'\n+        Number.Integer.Long:       \"bold #0000cf\",   # class: 'il'\n+        Number.Oct:                \"bold #0000cf\",   # class: 'mo'\n+\n+        Literal:                   \"#000000\",        # class: 'l'\n+        Literal.Date:              \"#000000\",        # class: 'ld'\n+\n+        String:                    \"#4e9a06\",        # class: 's'\n+        String.Backtick:           \"#4e9a06\",        # class: 'sb'\n+        String.Char:               \"#4e9a06\",        # class: 'sc'\n+        String.Doc:                \"italic #8f5902\", # class: 'sd' - like a comment\n+        String.Double:             \"#4e9a06\",        # class: 's2'\n+        String.Escape:             \"#4e9a06\",        # class: 'se'\n+        String.Heredoc:            \"#4e9a06\",        # class: 'sh'\n+        String.Interpol:           \"#4e9a06\",        # class: 'si'\n+        String.Other:              \"#4e9a06\",        # class: 'sx'\n+        String.Regex:              \"#4e9a06\",        # class: 'sr'\n+        String.Single:             \"#4e9a06\",        # class: 's1'\n+        String.Symbol:             \"#4e9a06\",        # class: 'ss'\n+\n+        Generic:                   \"#000000\",        # class: 'g'\n+        Generic.Deleted:           \"#a40000\",        # class: 'gd'\n+        Generic.Emph:              \"italic #000000\", # class: 'ge'\n+        Generic.Error:             \"#ef2929\",        # class: 'gr'\n+        Generic.Heading:           \"bold #000080\",   # class: 'gh'\n+        Generic.Inserted:          \"#00A000\",        # class: 'gi'\n+        Generic.Output:            \"italic #000000\", # class: 'go'\n+        Generic.Prompt:            \"#8f5902\",        # class: 'gp'\n+        Generic.Strong:            \"bold #000000\",   # class: 'gs'\n+        Generic.Subheading:        \"bold #800080\",   # class: 'gu'\n+        Generic.Traceback:         \"bold #a40000\",   # class: 'gt'\n+    }\n\n@@ -288,7 +288,7 @@ class Flask(object):\n         if session is not None:\n             session.save_cookie(response, self.session_cookie_name)\n \n-    def add_url_rule(self, endpoint, **options):\n+    def add_url_rule(self, rule, endpoint, **options):\n         \"\"\"Connects a URL rule.  Works exactly like the :meth:`route`\n         decorator but does not register the view function for the endpoint.\n \n@@ -298,14 +298,14 @@ class Flask(object):\n             def index():\n                 pass\n \n-        Is equivalent to the following:\n+        Is equivalent to the following::\n \n             def index():\n                 pass\n             app.add_url_rule('index', '/')\n             app.view_functions['index'] = index\n         \"\"\"\n-        options['endpoint'] = f.__name__\n+        options['endpoint'] = endpoint\n         options.setdefault('methods', ('GET',))\n         self.url_map.add(Rule(rule, **options))\n \n@@ -372,7 +372,7 @@ class Flask(object):\n                                setting for this rule.  See above.\n         \"\"\"\n         def decorator(f):\n-            self.add_url_rule(f.__name__, **options)\n+            self.add_url_rule(rule, f.__name__, **options)\n             self.view_functions[f.__name__] = f\n             return f\n         return decorator\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#05f36c7f7e2df36ee28f90d99632162579b1287c", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 77 | Lines Deleted: 16 | Files Changed: 2 | Hunks: 21 | Methods Changed: 16 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 93 | Churn Cumulative: 794 | Contributors (this commit): 2 | Commits (past 90d): 9 | Contributors (cumulative): 3 | DMM Complexity: None\n\nDIFF:\n@@ -16,10 +16,7 @@ class FlaskyStyle(Style):\n         Other:                     \"#000000\",                # class 'x'\n \n         Comment:                   \"italic #8f5902\", # class: 'c'\n-        Comment.Multiline:         \"italic #8f5902\", # class: 'cm'\n-        Comment.Preproc:           \"italic #8f5902\", # class: 'cp'\n-        Comment.Single:            \"italic #8f5902\", # class: 'c1'\n-        Comment.Special:           \"italic #8f5902\", # class: 'cs'\n+        Comment.Preproc:           \"noitalic\",       # class: 'cp'\n \n         Keyword:                   \"bold #004461\",   # class: 'k'\n         Keyword.Constant:          \"bold #004461\",   # class: 'kc'\n@@ -43,7 +40,7 @@ class FlaskyStyle(Style):\n         Name.Builtin.Pseudo:       \"#3465a4\",        # class: 'bp'\n         Name.Class:                \"#000000\",        # class: 'nc' - to be revised\n         Name.Constant:             \"#000000\",        # class: 'no' - to be revised\n-        Name.Decorator:            \"#999\",           # class: 'nd' - to be revised\n+        Name.Decorator:            \"#888\",           # class: 'nd' - to be revised\n         Name.Entity:               \"#ce5c00\",        # class: 'ni'\n         Name.Exception:            \"bold #cc0000\",   # class: 'ne'\n         Name.Function:             \"#000000\",        # class: 'nf'\n@@ -57,14 +54,7 @@ class FlaskyStyle(Style):\n         Name.Variable.Global:      \"#000000\",        # class: 'vg' - to be revised\n         Name.Variable.Instance:    \"#000000\",        # class: 'vi' - to be revised\n \n-        # since the tango light blue does not show up well in text, we choose\n-        # a pure blue instead.\n-        Number:                    \"bold #0000cf\",   # class: 'm'\n-        Number.Float:              \"bold #0000cf\",   # class: 'mf'\n-        Number.Hex:                \"bold #0000cf\",   # class: 'mh'\n-        Number.Integer:            \"bold #0000cf\",   # class: 'mi'\n-        Number.Integer.Long:       \"bold #0000cf\",   # class: 'il'\n-        Number.Oct:                \"bold #0000cf\",   # class: 'mo'\n+        Number:                    \"#990000\",        # class: 'm'\n \n         Literal:                   \"#000000\",        # class: 'l'\n         Literal.Date:              \"#000000\",        # class: 'ld'\n@@ -88,8 +78,8 @@ class FlaskyStyle(Style):\n         Generic.Error:             \"#ef2929\",        # class: 'gr'\n         Generic.Heading:           \"bold #000080\",   # class: 'gh'\n         Generic.Inserted:          \"#00A000\",        # class: 'gi'\n-        Generic.Output:            \"italic #000000\", # class: 'go'\n-        Generic.Prompt:            \"#8f5902\",        # class: 'gp'\n+        Generic.Output:            \"#888\",           # class: 'go'\n+        Generic.Prompt:            \"#745334\",        # class: 'gp'\n         Generic.Strong:            \"bold #000000\",   # class: 'gs'\n         Generic.Subheading:        \"bold #800080\",   # class: 'gu'\n         Generic.Traceback:         \"bold #a40000\",   # class: 'gt'\n\n@@ -79,6 +79,8 @@ def flash(message):\n     \"\"\"Flashes a message to the next request.  In order to remove the\n     flashed message from the session and to display it to the user,\n     the template has to call :func:`get_flashed_messages`.\n+\n+    :param message: the message to be flashed.\n     \"\"\"\n     session['_flashes'] = (session.get('_flashes', [])) + [message]\n \n@@ -98,6 +100,10 @@ def get_flashed_messages():\n def render_template(template_name, **context):\n     \"\"\"Renders a template from the template folder with the given\n     context.\n+\n+    :param template_name: the name of the template to be rendered\n+    :param context: the variables that should be available in the\n+                    context of the template.\n     \"\"\"\n     current_app.update_template_context(context)\n     return current_app.jinja_env.get_template(template_name).render(context)\n@@ -106,6 +112,11 @@ def render_template(template_name, **context):\n def render_template_string(source, **context):\n     \"\"\"Renders a template from the given template source string\n     with the given context.\n+\n+    :param template_name: the sourcecode of the template to be\n+                          rendered\n+    :param context: the variables that should be available in the\n+                    context of the template.\n     \"\"\"\n     current_app.update_template_context(context)\n     return current_app.jinja_env.from_string(source).render(context)\n@@ -222,6 +233,9 @@ class Flask(object):\n     def update_template_context(self, context):\n         \"\"\"Update the template context with some commonly used variables.\n         This injects request, session and g into the template context.\n+\n+        :param context: the context as a dictionary that is updated in place\n+                        to add extra variables.\n         \"\"\"\n         reqctx = _request_ctx_stack.top\n         context['request'] = reqctx.request\n@@ -232,6 +246,13 @@ class Flask(object):\n         \"\"\"Runs the application on a local development server.  If the\n         :attr:`debug` flag is set the server will automatically reload\n         for code changes and show a debugger in case an exception happened.\n+\n+        :param host: the hostname to listen on.  set this to ``'0.0.0.0'``\n+                     to have the server available externally as well.\n+        :param port: the port of the webserver\n+        :param options: the options to be forwarded to the underlying\n+                        Werkzeug server.  See :func:`werkzeug.run_simple`\n+                        for more information.\n         \"\"\"\n         from werkzeug import run_simple\n         if 'debug' in options:\n@@ -268,6 +289,9 @@ class Flask(object):\n             with app.open_resource('schema.sql') as f:\n                 contents = f.read()\n                 do_something_with(contents)\n+\n+        :param resource: the name of the resource.  To access resources within\n+                         subfolders use forward slashes as separator.\n         \"\"\"\n         return pkg_resources.resource_stream(self.package_name, resource)\n \n@@ -275,6 +299,8 @@ class Flask(object):\n         \"\"\"Creates or opens a new session.  Default implementation stores all\n         session data in a signed cookie.  This requires that the\n         :attr:`secret_key` is set.\n+\n+        :param request: an instance of :attr:`request_class`.\n         \"\"\"\n         key = self.secret_key\n         if key is not None:\n@@ -284,6 +310,11 @@ class Flask(object):\n     def save_session(self, session, response):\n         \"\"\"Saves the session if it needs updates.  For the default\n         implementation, check :meth:`open_session`.\n+\n+        :param session: the session to be saved (a\n+                        :class:`~werkzeug.contrib.securecookie.SecureCookie`\n+                        object)\n+        :param request: an instance of :attr:`response_class`\n         \"\"\"\n         if session is not None:\n             session.save_cookie(response, self.session_cookie_name)\n@@ -304,6 +335,13 @@ class Flask(object):\n                 pass\n             app.add_url_rule('index', '/')\n             app.view_functions['index'] = index\n+\n+        :param rule: the URL rule as string\n+        :param endpoint: the endpoint for the registered URL rule.  Flask\n+                         itself assumes the name of the view function as\n+                         endpoint\n+        :param options: the options to be forwarded to the underlying\n+                        :class:`~werkzeug.routing.Rule` object\n         \"\"\"\n         options['endpoint'] = endpoint\n         options.setdefault('methods', ('GET',))\n@@ -363,6 +401,7 @@ class Flask(object):\n         The :meth:`route` decorator accepts a couple of other arguments\n         as well:\n \n+        :param rule: the URL rule as string\n         :param methods: a list of methods this rule should be limited\n                         to (``GET``, ``POST`` etc.).  By default a rule\n                         just listens for ``GET`` (and implicitly ``HEAD``).\n@@ -370,6 +409,8 @@ class Flask(object):\n                           subdomain matching is in use.\n         :param strict_slashes: can be used to disable the strict slashes\n                                setting for this rule.  See above.\n+        :param options: other options to be forwarded to the underlying\n+                        :class:`~werkzeug.routing.Rule` object.\n         \"\"\"\n         def decorator(f):\n             self.add_url_rule(rule, f.__name__, **options)\n@@ -392,6 +433,8 @@ class Flask(object):\n             def page_not_found():\n                 return 'This page does not exist', 404\n             app.error_handlers[404] = page_not_found\n+\n+        :param code: the code as integer for the handler\n         \"\"\"\n         def decorator(f):\n             self.error_handlers[code] = f\n@@ -440,6 +483,22 @@ class Flask(object):\n     def make_response(self, rv):\n         \"\"\"Converts the return value from a view function to a real\n         response object that is an instance of :attr:`response_class`.\n+\n+        The following types are allowd for `rv`:\n+\n+        ======================= ===========================================\n+        :attr:`response_class`  the object is returned unchanged\n+        :class:`str`            a response object is created with the\n+                                string as body\n+        :class:`unicode`        a response object is created with the\n+                                string encoded to utf-8 as body\n+        :class:`tuple`          the response object is created with the\n+                                contents of the tuple as arguments\n+        a WSGI function         the function is called as WSGI application\n+                                and buffered as response object\n+        ======================= ===========================================\n+\n+        :param rv: the return value from the view function\n         \"\"\"\n         if isinstance(rv, self.response_class):\n             return rv\n@@ -464,6 +523,10 @@ class Flask(object):\n     def process_response(self, response):\n         \"\"\"Can be overridden in order to modify the response object\n         before it's sent to the WSGI server.\n+\n+        :param response: a :attr:`response_class` object.\n+        :return: a new response object or the same, has to be an\n+                 instance of :attr:`response_class`.\n         \"\"\"\n         session = _request_ctx_stack.top.session\n         if session is not None:\n@@ -477,6 +540,11 @@ class Flask(object):\n         `__call__` so that middlewares can be applied:\n \n             app.wsgi_app = MyMiddleware(app.wsgi_app)\n+\n+        :param environ: a WSGI environment\n+        :param start_response: a callable accepting a status code,\n+                               a list of headers and an optional\n+                               exception context to start the response\n         \"\"\"\n         with self.request_context(environ):\n             rv = self.preprocess_request()\n@@ -497,6 +565,8 @@ class Flask(object):\n \n             with app.request_context(environ):\n                 do_something_with(request)\n+\n+        :params environ: a WSGI environment\n         \"\"\"\n         _request_ctx_stack.push(_RequestContext(self, environ))\n         try:\n@@ -506,7 +576,8 @@ class Flask(object):\n \n     def test_request_context(self, *args, **kwargs):\n         \"\"\"Creates a WSGI environment from the given values (see\n-        :func:`werkzeug.create_environ` for more information).\n+        :func:`werkzeug.create_environ` for more information, this\n+        function accepts the same arguments).\n         \"\"\"\n         return self.request_context(create_environ(*args, **kwargs))\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#1fff3e598126a084348ec2c112fdd3bc6b9a1ee0", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 4 | Lines Deleted: 3 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 7 | Churn Cumulative: 26 | Contributors (this commit): 1 | Commits (past 90d): 2 | Contributors (cumulative): 1 | DMM Complexity: None\n\nDIFF:\n@@ -12,8 +12,9 @@ setup(\n     modules=['flask'],\n     zip_safe=False,\n     platforms='any',\n-    install_requires=[ # yes, as of now we need the development versions\n-        'Werkzeug==dev',\n-        'Jinja2==dev',\n+    install_requires=[\n+        ## disabled until release, install yourself\n+        # 'Werkzeug',\n+        # 'Jinja2'\n     ]\n )\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#574e81f9c8bbdc41958e1e7a7613633b091101f8", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 28 | Contributors (this commit): 1 | Commits (past 90d): 3 | Contributors (cumulative): 1 | DMM Complexity: None\n\nDIFF:\n@@ -9,7 +9,7 @@ setup(\n     author='Armin Ronacher',\n     author_email='armin.ronacher@active-4.com',\n     description='A microframework based on Werkzeug, Jinja2 and good intentions',\n-    modules=['flask'],\n+    py_modules=['flask'],\n     zip_safe=False,\n     platforms='any',\n     install_requires=[\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#03168a5d53457fdb8676a4ac9fca0f76a23c6852", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 30 | Lines Deleted: 38 | Files Changed: 2 | Hunks: 15 | Methods Changed: 15 | Complexity Δ (Sum/Max): -4/0 | Churn Δ: 68 | Churn Cumulative: 340 | Contributors (this commit): 2 | Commits (past 90d): 8 | Contributors (cumulative): 3 | DMM Complexity: 0.0\n\nDIFF:\n@@ -1,30 +0,0 @@\n-from flask import Flask, abort, redirect, request, session, \\\n-     render_template, url_for\n-\n-#: create a new flask applications.  We pass it the name of our module\n-#: so that flask knows where to look for templates and static files.\n-app = Flask(__name__)\n-\n-\n-@app.route('/', methods=['GET'])\n-def index():\n-    \"\"\"Show an overview page\"\"\"\n-    return render_template('index.html')\n-\n-\n-@app.route('/hello/', methods=['GET', 'POST'])\n-def hello_user():\n-    \"\"\"Ask the user for a name and redirect to :func:`hello`\"\"\"\n-    if request.method == 'POST':\n-        return redirect(url_for('hello', name=request.form['name']))\n-    return render_template('hello.html', name=None)\n-\n-\n-@app.route('/hello/<name>', methods=['GET'])\n-def hello(name):\n-    \"\"\"Greet name friendly\"\"\"\n-    return render_template('hello.html', name=name)\n-\n-\n-if __name__ == '__main__':\n-    app.run(debug=True)\n\n@@ -1,4 +1,13 @@\n # -*- coding: utf-8 -*-\n+\"\"\"\n+    MiniTwit\n+    ~~~~~~~~\n+\n+    A microblogging application written with Flask and sqlite3.\n+\n+    :copyright: (c) 2010 by Armin Ronacher.\n+    :license: BSD, see LICENSE for more details.\n+\"\"\"\n from __future__ import with_statement\n import re\n import time\n@@ -66,21 +75,26 @@ def before_request():\n     up the current user so that we know he's there.\n     \"\"\"\n     g.db = connect_db()\n+    g.user = None\n     if 'user_id' in session:\n         g.user = query_db('select * from user where user_id = ?',\n                           [session['user_id']], one=True)\n \n \n @app.request_shutdown\n-def after_request(request):\n+def after_request(response):\n     \"\"\"Closes the database again at the end of the request.\"\"\"\n     g.db.close()\n-    return request\n+    return response\n \n \n @app.route('/')\n def timeline():\n-    if not 'user_id' in session:\n+    \"\"\"Shows a users timeline or if no user is logged in it will\n+    redirect to the public timeline.  This timeline shows the user's\n+    messages as well as all the messages of followed users.\n+    \"\"\"\n+    if not g.user:\n         return redirect(url_for('public_timeline'))\n     offset = request.args.get('offset', type=int)\n     return render_template('timeline.html', messages=query_db('''\n@@ -95,6 +109,7 @@ def timeline():\n \n @app.route('/public')\n def public_timeline():\n+    \"\"\"Displays the latest messages of all users.\"\"\"\n     return render_template('timeline.html', messages=query_db('''\n         select message.*, user.* from message, user\n         where message.author_id = user.user_id\n@@ -103,12 +118,13 @@ def public_timeline():\n \n @app.route('/<username>')\n def user_timeline(username):\n+    \"\"\"Display's a users tweets.\"\"\"\n     profile_user = query_db('select * from user where username = ?',\n                             [username], one=True)\n     if profile_user is None:\n         abort(404)\n     followd = False\n-    if 'user_id' in session:\n+    if g.user:\n         followed = query_db('''select 1 from follower where\n             follower.who_id = ? and follower.whom_id = ?''',\n             [session['user_id'], profile_user['user_id']], one=True) is not None\n@@ -122,7 +138,8 @@ def user_timeline(username):\n \n @app.route('/<username>/follow')\n def follow_user(username):\n-    if not 'user_id' in session:\n+    \"\"\"Adds the current user as follower of the given user\"\"\"\n+    if not g.user:\n         abort(401)\n     whom_id = get_user_id(username)\n     if whom_id is None:\n@@ -136,7 +153,8 @@ def follow_user(username):\n \n @app.route('/<username>/unfollow')\n def unfollow_user(username):\n-    if not 'user_id' in session:\n+    \"\"\"Removes the current user as follower of the given user\"\"\"\n+    if not g.user:\n         abort(401)\n     whom_id = get_user_id(username)\n     if whom_id is None:\n@@ -150,6 +168,7 @@ def unfollow_user(username):\n \n @app.route('/add_message', methods=['POST'])\n def add_message():\n+    \"\"\"Registers a new message for the user\"\"\"\n     if 'user_id' not in session:\n         abort(401)\n     if request.form['text']:\n@@ -163,7 +182,8 @@ def add_message():\n \n @app.route('/login', methods=['GET', 'POST'])\n def login():\n-    if 'user_id' in session:\n+    \"\"\"Logs the user in\"\"\"\n+    if g.user:\n         return redirect(url_for('timeline'))\n     error = None\n     if request.method == 'POST':\n@@ -183,7 +203,8 @@ def login():\n \n @app.route('/register', methods=['GET', 'POST'])\n def register():\n-    if 'user_id' in session:\n+    \"\"\"Registers the user\"\"\"\n+    if g.user:\n         return redirect(url_for('timeline'))\n     error = None\n     if request.method == 'POST':\n@@ -211,6 +232,7 @@ def register():\n \n @app.route('/logout')\n def logout():\n+    \"\"\"Logs the user out\"\"\"\n     flash('You were logged out')\n     session.pop('user_id', None)\n     return redirect(url_for('public_timeline'))\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#f2dc38cda61f76c64b97ab9f730accc986a4b188", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 148 | Lines Deleted: 4 | Files Changed: 3 | Hunks: 3 | Methods Changed: 13 | Complexity Δ (Sum/Max): 13/13 | Churn Δ: 152 | Churn Cumulative: 1110 | Contributors (this commit): 2 | Commits (past 90d): 16 | Contributors (cumulative): 5 | DMM Complexity: 1.0\n\nDIFF:\n@@ -216,7 +216,7 @@ def register():\n         elif not request.form['password']:\n             error = 'You have to enter a password'\n         elif request.form['password'] != request.form['password2']:\n-            error = 'The two passwords to not match'\n+            error = 'The two passwords do not match'\n         elif get_user_id(request.form['username']) is not None:\n             error = 'The username is already taken'\n         else:\n\n@@ -0,0 +1,145 @@\n+# -*- coding: utf-8 -*-\n+\"\"\"\n+    MiniTwit Tests\n+    ~~~~~~~~~~~~~~\n+\n+    Tests the MiniTwit application.\n+\n+    :copyright: (c) 2010 by Armin Ronacher.\n+    :license: BSD, see LICENSE for more details.\n+\"\"\"\n+import minitwit\n+import unittest\n+import tempfile\n+from contextlib import closing\n+\n+\n+class MiniTwitTestCase(unittest.TestCase):\n+\n+    def setUp(self):\n+        \"\"\"Before each test, set up a blank database\"\"\"\n+        self.db = tempfile.NamedTemporaryFile()\n+        self.app = minitwit.app.test_client()\n+        minitwit.DATABASE = self.db.name\n+        minitwit.init_db()\n+\n+    # helper functions\n+\n+    def register(self, username, password, password2=None, email=None):\n+        \"\"\"Helper function to register a user\"\"\"\n+        if password2 is None:\n+            password2 = password\n+        if email is None:\n+            email = username + '@example.com'\n+        return self.app.post('/register', data={\n+            'username':     username,\n+            'password':     password,\n+            'password2':    password2,\n+            'email':        email,\n+        }, follow_redirects=True)\n+\n+    def login(self, username, password):\n+        \"\"\"Helper function to login\"\"\"\n+        return self.app.post('/login', data={\n+            'username': username,\n+            'password': password\n+        }, follow_redirects=True)\n+\n+    def register_and_login(self, username, password):\n+        \"\"\"Registers and logs in in one go\"\"\"\n+        self.register(username, password)\n+        return self.login(username, password)\n+\n+    def logout(self):\n+        \"\"\"Helper function to logout\"\"\"\n+        return self.app.get('/logout', follow_redirects=True)\n+\n+    def add_message(self, text):\n+        \"\"\"Records a message\"\"\"\n+        rv = self.app.post('/add_message', data={'text': text},\n+                                    follow_redirects=True)\n+        if text:\n+            assert 'Your message was recorded' in rv.data\n+        return rv\n+\n+    # testing functions\n+\n+    def test_register(self):\n+        \"\"\"Make sure registering works\"\"\"\n+        rv = self.register('user1', 'default')\n+        assert 'You were successfully registered ' \\\n+               'and can login now' in rv.data\n+        rv = self.register('user1', 'default')\n+        assert 'The username is already taken' in rv.data\n+        rv = self.register('', 'default')\n+        assert 'You have to enter a username' in rv.data\n+        rv = self.register('meh', '')\n+        assert 'You have to enter a password' in rv.data\n+        rv = self.register('meh', 'x', 'y')\n+        assert 'The two passwords do not match' in rv.data\n+        rv = self.register('meh', 'foo', email='broken')\n+        assert 'You have to enter a valid email address' in rv.data\n+\n+    def test_login_logout(self):\n+        \"\"\"Make sure logging in and logging out works\"\"\"\n+        rv = self.register_and_login('user1', 'default')\n+        assert 'You were logged in' in rv.data\n+        rv = self.logout()\n+        assert 'You were logged out' in rv.data\n+        rv = self.login('user1', 'wrongpassword')\n+        assert 'Invalid password' in rv.data\n+        rv = self.login('user2', 'wrongpassword')\n+        assert 'Invalid username' in rv.data\n+\n+    def test_message_recording(self):\n+        \"\"\"Check if adding messages works\"\"\"\n+        self.register_and_login('foo', 'default')\n+        self.add_message('test message 1')\n+        self.add_message('<test message 2>')\n+        rv = self.app.get('/')\n+        assert 'test message 1' in rv.data\n+        assert '&lt;test message 2&gt;' in rv.data\n+\n+    def test_timelines(self):\n+        \"\"\"Make sure that timelines work\"\"\"\n+        self.register_and_login('foo', 'default')\n+        self.add_message('the message by foo')\n+        self.logout()\n+        self.register_and_login('bar', 'default')\n+        self.add_message('the message by bar')\n+        rv = self.app.get('/public')\n+        assert 'the message by foo' in rv.data\n+        assert 'the message by bar' in rv.data\n+\n+        # bar's timeline should just show bar's message\n+        rv = self.app.get('/')\n+        assert 'the message by foo' not in rv.data\n+        assert 'the message by bar' in rv.data\n+\n+        # now let's follow foo\n+        rv = self.app.get('/foo/follow', follow_redirects=True)\n+        assert 'You are now following &#34;foo&#34;' in rv.data\n+\n+        # we should now see foo's message\n+        rv = self.app.get('/')\n+        assert 'the message by foo' in rv.data\n+        assert 'the message by bar' in rv.data\n+\n+        # but on the user's page we only want the user's message\n+        rv = self.app.get('/bar')\n+        assert 'the message by foo' not in rv.data\n+        assert 'the message by bar' in rv.data\n+        rv = self.app.get('/foo')\n+        assert 'the message by foo' in rv.data\n+        assert 'the message by bar' not in rv.data\n+\n+        # now unfollow and check if that worked\n+        rv = self.app.get('/foo/unfollow', follow_redirects=True)\n+        assert 'You are no longer following &#34;foo&#34;' in rv.data\n+        rv = self.app.get('/')\n+        assert 'the message by foo' not in rv.data\n+        assert 'the message by bar' in rv.data\n+\n+\n+if __name__ == '__main__':\n+    unittest.main()\n\n@@ -265,9 +265,8 @@ class Flask(object):\n         options.setdefault('use_debugger', self.debug)\n         return run_simple(host, port, self, **options)\n \n-    @cached_property\n-    def test(self):\n-        \"\"\"A test client for this application\"\"\"\n+    def test_client(self):\n+        \"\"\"Creates a test client for this application\"\"\"\n         from werkzeug import Client\n         return Client(self, self.response_class, use_cookies=True)\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#ef524f2cfd65377b3b9ce896e7a710472b13c0f6", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 0 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 1 | Churn Cumulative: 146 | Contributors (this commit): 1 | Commits (past 90d): 2 | Contributors (cumulative): 1 | DMM Complexity: None\n\nDIFF:\n@@ -11,7 +11,6 @@\n import minitwit\n import unittest\n import tempfile\n-from contextlib import closing\n \n \n class MiniTwitTestCase(unittest.TestCase):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#03148dba6b26a2694da1d466584f50189c52e7b3", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 24 | Lines Deleted: 12 | Files Changed: 1 | Hunks: 10 | Methods Changed: 3 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 36 | Churn Cumulative: 719 | Contributors (this commit): 2 | Commits (past 90d): 9 | Contributors (cumulative): 2 | DMM Complexity: None\n\nDIFF:\n@@ -15,8 +15,8 @@ import pkg_resources\n from threading import local\n from contextlib import contextmanager\n from jinja2 import Environment, PackageLoader\n-from werkzeug import Request, Response, LocalStack, LocalProxy, \\\n-     create_environ, cached_property\n+from werkzeug import Request as RequestBase, Response as ResponseBase, \\\n+     LocalStack, LocalProxy, create_environ, cached_property\n from werkzeug.routing import Map, Rule\n from werkzeug.exceptions import HTTPException, InternalServerError\n from werkzeug.contrib.securecookie import SecureCookie\n@@ -27,21 +27,29 @@ from werkzeug import abort, redirect\n from jinja2 import Markup, escape\n \n \n-class FlaskRequest(Request):\n+class Request(RequestBase):\n     \"\"\"The request object used by default in flask.  Remembers the\n     matched endpoint and view arguments.\n+\n+    It is what ends up as :class:`~flask.request`.  If you want to replace\n+    the request object used you can subclass this and set\n+    :attr:`~flask.Flask.request_class` to your subclass.\n     \"\"\"\n \n     def __init__(self, environ):\n-        Request.__init__(self, environ)\n+        RequestBase.__init__(self, environ)\n         self.endpoint = None\n         self.view_args = None\n \n \n-class FlaskResponse(Response):\n+class Response(ResponseBase):\n     \"\"\"The response object that is used by default in flask.  Works like the\n     response object from Werkzeug but is set to have a HTML mimetype by\n-    default.\n+    default.  Quite often you don't have to create this object yourself because\n+    :meth:`~flask.Flask.make_response` will take care of that for you.\n+\n+    If you want to replace the response object used you can subclass this and\n+    set :attr:`~flask.Flask.request_class` to your subclass.\n     \"\"\"\n     default_mimetype = 'text/html'\n \n@@ -142,11 +150,13 @@ class Flask(object):\n         app = Flask(__name__)\n     \"\"\"\n \n-    #: the class that is used for request objects\n-    request_class = FlaskRequest\n+    #: the class that is used for request objects.  See :class:`~flask.request`\n+    #: for more information.\n+    request_class = Request\n \n-    #: the class that is used for response objects\n-    response_class = FlaskResponse\n+    #: the class that is used for response objects.  See\n+    #: :class:`~flask.Response` for more information.\n+    response_class = Response\n \n     #: path for the static files.  If you don't want to use static files\n     #: you can set this value to `None` in which case no URL rule is added\n@@ -266,7 +276,9 @@ class Flask(object):\n         return run_simple(host, port, self, **options)\n \n     def test_client(self):\n-        \"\"\"Creates a test client for this application\"\"\"\n+        \"\"\"Creates a test client for this application.  For information\n+        about unit testing head over to :ref:`testing`.\n+        \"\"\"\n         from werkzeug import Client\n         return Client(self, self.response_class, use_cookies=True)\n \n@@ -356,7 +368,7 @@ class Flask(object):\n \n         Variables parts in the route can be specified with angular\n         brackets (``/user/<username>``).  By default a variable part\n-        in the URL accepts any string without a slash however a differnt\n+        in the URL accepts any string without a slash however a different\n         converter can be specified as well by using ``<converter:name>``.\n \n         Variable parts are passed to the view function as keyword\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#2f5a4f8dbc832b0daebcd66ea8b3969589191fa7", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 9 | Lines Deleted: 9 | Files Changed: 1 | Hunks: 9 | Methods Changed: 9 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 18 | Churn Cumulative: 300 | Contributors (this commit): 2 | Commits (past 90d): 8 | Contributors (cumulative): 2 | DMM Complexity: None\n\nDIFF:\n@@ -31,7 +31,7 @@ app = Flask(__name__)\n \n \n def connect_db():\n-    \"\"\"Returns a new database connection to the database.\"\"\"\n+    \"\"\"Returns a new connection to the database.\"\"\"\n     return sqlite3.connect(DATABASE)\n \n \n@@ -52,19 +52,19 @@ def query_db(query, args=(), one=False):\n \n \n def get_user_id(username):\n-    \"\"\"Convenience method to look up the id for a username\"\"\"\n+    \"\"\"Convenience method to look up the id for a username.\"\"\"\n     rv = g.db.execute('select user_id from user where username = ?',\n                        [username]).fetchone()\n     return rv[0] if rv else None\n \n \n def format_datetime(timestamp):\n-    \"\"\"Format a timestamp for display\"\"\"\n+    \"\"\"Format a timestamp for display.\"\"\"\n     return datetime.utcfromtimestamp(timestamp).strftime('%Y-%m-%d @ %H:%M')\n \n \n def gravatar_url(email, size=80):\n-    \"\"\"Return the gravatar image for the given email address\"\"\"\n+    \"\"\"Return the gravatar image for the given email address.\"\"\"\n     return 'http://www.gravatar.com/avatar/%s?d=identicon&s=%d' % \\\n         (md5(email.strip().lower().encode('utf-8')).hexdigest(), size)\n \n@@ -138,7 +138,7 @@ def user_timeline(username):\n \n @app.route('/<username>/follow')\n def follow_user(username):\n-    \"\"\"Adds the current user as follower of the given user\"\"\"\n+    \"\"\"Adds the current user as follower of the given user.\"\"\"\n     if not g.user:\n         abort(401)\n     whom_id = get_user_id(username)\n@@ -153,7 +153,7 @@ def follow_user(username):\n \n @app.route('/<username>/unfollow')\n def unfollow_user(username):\n-    \"\"\"Removes the current user as follower of the given user\"\"\"\n+    \"\"\"Removes the current user as follower of the given user.\"\"\"\n     if not g.user:\n         abort(401)\n     whom_id = get_user_id(username)\n@@ -168,7 +168,7 @@ def unfollow_user(username):\n \n @app.route('/add_message', methods=['POST'])\n def add_message():\n-    \"\"\"Registers a new message for the user\"\"\"\n+    \"\"\"Registers a new message for the user.\"\"\"\n     if 'user_id' not in session:\n         abort(401)\n     if request.form['text']:\n@@ -182,7 +182,7 @@ def add_message():\n \n @app.route('/login', methods=['GET', 'POST'])\n def login():\n-    \"\"\"Logs the user in\"\"\"\n+    \"\"\"Logs the user in.\"\"\"\n     if g.user:\n         return redirect(url_for('timeline'))\n     error = None\n@@ -203,7 +203,7 @@ def login():\n \n @app.route('/register', methods=['GET', 'POST'])\n def register():\n-    \"\"\"Registers the user\"\"\"\n+    \"\"\"Registers the user.\"\"\"\n     if g.user:\n         return redirect(url_for('timeline'))\n     error = None\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#a01e8b49ca66608f0bd46134ff02deeb5724c799", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 28 | Lines Deleted: 4 | Files Changed: 1 | Hunks: 5 | Methods Changed: 5 | Complexity Δ (Sum/Max): 3/3 | Churn Δ: 32 | Churn Cumulative: 751 | Contributors (this commit): 2 | Commits (past 90d): 10 | Contributors (cumulative): 2 | DMM Complexity: 1.0\n\nDIFF:\n@@ -130,6 +130,18 @@ def render_template_string(source, **context):\n     return current_app.jinja_env.from_string(source).render(context)\n \n \n+def _default_template_ctx_processor():\n+    \"\"\"Default template context processor.  Injects `request`,\n+    `session` and `g`.\n+    \"\"\"\n+    reqctx = _request_ctx_stack.top\n+    return dict(\n+        request=reqctx.request,\n+        session=reqctx.session,\n+        g=reqctx.g\n+    )\n+\n+\n class Flask(object):\n     \"\"\"The flask object implements a WSGI application and acts as the central\n     object.  It is passed the name of the module or package of the\n@@ -216,6 +228,14 @@ class Flask(object):\n         #: To register a function here use the :meth:`request_shtdown`\n         #: decorator.\n         self.request_shutdown_funcs = []\n+\n+        #: a list of functions that are called without arguments\n+        #: to populate the template context.  Each returns a dictionary\n+        #: that the template context is updated with.\n+        #: To register a function here, use the :meth:`context_processor`\n+        #: decorator.\n+        self.template_context_processors = [_default_template_ctx_processor]\n+\n         self.url_map = Map()\n \n         if self.static_path is not None:\n@@ -248,9 +268,8 @@ class Flask(object):\n                         to add extra variables.\n         \"\"\"\n         reqctx = _request_ctx_stack.top\n-        context['request'] = reqctx.request\n-        context['session'] = reqctx.session\n-        context['g'] = reqctx.g\n+        for func in self.template_context_processors:\n+            context.update(func())\n \n     def run(self, host='localhost', port=5000, **options):\n         \"\"\"Runs the application on a local development server.  If the\n@@ -325,7 +344,7 @@ class Flask(object):\n         :param session: the session to be saved (a\n                         :class:`~werkzeug.contrib.securecookie.SecureCookie`\n                         object)\n-        :param request: an instance of :attr:`response_class`\n+        :param response: an instance of :attr:`response_class`\n         \"\"\"\n         if session is not None:\n             session.save_cookie(response, self.session_cookie_name)\n@@ -462,6 +481,11 @@ class Flask(object):\n         self.request_shutdown_funcs.append(f)\n         return f\n \n+    def context_processor(self, f):\n+        \"\"\"Registers a template context processor function.\"\"\"\n+        self.template_context_processors.append(f)\n+        return f\n+\n     def match_request(self):\n         \"\"\"Matches the current request against the URL map and also\n         stores the endpoint and view arguments on the request object\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
