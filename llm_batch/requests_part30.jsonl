{"custom_id": "requests#5309ad005f27b5ef4023c464d9f49614b1ee4c19", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 8 | Files Changed: 1 | Hunks: 4 | Methods Changed: 2 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 10 | Churn Cumulative: 3827 | Contributors (this commit): 26 | Commits (past 90d): 109 | Contributors (cumulative): 26 | DMM Complexity: 1.0\n\nDIFF:\n@@ -18,6 +18,7 @@ from .auth import dispatch as auth_dispatch\n from .hooks import dispatch_hook\n from .structures import CaseInsensitiveDict\n from .status_codes import codes\n+from .packages import oreos\n from .packages.urllib3.exceptions import MaxRetryError\n from .packages.urllib3.exceptions import SSLError as _SSLError\n from .packages.urllib3.exceptions import HTTPError as _HTTPError\n@@ -143,7 +144,6 @@ class Request(object):\n         from given response.\n         \"\"\"\n \n-\n         def build(resp):\n \n             response = Response()\n@@ -165,12 +165,7 @@ class Request(object):\n                 # Add new cookies from the server.\n                 if 'set-cookie' in response.headers:\n                     cookie_header = response.headers['set-cookie']\n-\n-                    c = SimpleCookie()\n-                    c.load(cookie_header)\n-\n-                    for k,v in c.items():\n-                        cookies.update({k: v.value})\n+                    cookies = oreos.dict_from_string(cookie_header)\n \n                 # Save cookies in Response.\n                 response.cookies = cookies\n@@ -185,7 +180,6 @@ class Request(object):\n \n             return response\n \n-\n         history = []\n \n         r = build(resp)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#8693fc746f67d6e8a3dee80e7eb287d39da944bb", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 227 | Contributors (this commit): 3 | Commits (past 90d): 22 | Contributors (cumulative): 3 | DMM Complexity: None\n\nDIFF:\n@@ -15,8 +15,8 @@ requests\n \"\"\"\n \n __title__ = 'requests'\n-__version__ = '0.8.1'\n-__build__ = 0x000801\n+__version__ = '0.8.2'\n+__build__ = 0x000802\n __author__ = 'Kenneth Reitz'\n __license__ = 'ISC'\n __copyright__ = 'Copyright 2011 Kenneth Reitz'\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#1da54de5dc1558eaaba0d6fe89eb641ead493cd6", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 2 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 5 | Contributors (this commit): 1 | Commits (past 90d): 2 | Contributors (cumulative): 1 | DMM Complexity: None\n\nDIFF:\n@@ -1,3 +1,3 @@\n # -*- coding: utf-8 -*-\n \n-from .core import *\n\\ No newline at end of file\n+from .core import dict_from_string\n\\ No newline at end of file\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#e17155151b1af8fcd48300e3e5a8f11298fa0fe3", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 3 | Files Changed: 1 | Hunks: 3 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 5 | Churn Cumulative: 30 | Contributors (this commit): 1 | Commits (past 90d): 2 | Contributors (cumulative): 1 | DMM Complexity: None\n\nDIFF:\n@@ -7,19 +7,18 @@ oreos.core\n The creamy white center.\n \"\"\"\n \n-from .structures import MultiDict\n from .monkeys import SimpleCookie\n \n \n def dict_from_string(s):\n     \"\"\"Returns a MultiDict with Cookies.\"\"\"\n \n-    cookies = MultiDict()\n+    cookies = dict()\n \n     c = SimpleCookie()\n     c.load(s)\n \n     for k,v in c.items():\n-        cookies.add(k, v.value)\n+        cookies.update({k: v.value})\n \n     return cookies\n\\ No newline at end of file\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#8ffe17cb09aa1e5a2018248dccab500c33d2fd58", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 3829 | Contributors (this commit): 26 | Commits (past 90d): 110 | Contributors (cumulative): 26 | DMM Complexity: None\n\nDIFF:\n@@ -420,7 +420,7 @@ class Request(object):\n                 if 'cookie' not in self.headers:\n \n                     # Simple cookie with our dict.\n-                    c = SimpleCookie()\n+                    c = oreos.monkeys.SimpleCookie()\n                     for (k, v) in self.cookies.items():\n                         c[k] = v\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#bbf10211566cbad71944f6cc04eae2012e93a82b", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 0 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 1 | Churn Cumulative: 3830 | Contributors (this commit): 26 | Commits (past 90d): 111 | Contributors (cumulative): 26 | DMM Complexity: None\n\nDIFF:\n@@ -10,7 +10,6 @@ This module contains the primary objects that power Requests.\n import urllib\n import zlib\n \n-from Cookie import SimpleCookie\n from urlparse import urlparse, urlunparse, urljoin, urlsplit\n from datetime import datetime\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#296d8cc097b694ec8a9c4d8d7c00abed4755e5d5", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 30 | Lines Deleted: 12 | Files Changed: 1 | Hunks: 10 | Methods Changed: 4 | Complexity Δ (Sum/Max): 3/3 | Churn Δ: 42 | Churn Cumulative: 3872 | Contributors (this commit): 26 | Commits (past 90d): 112 | Contributors (cumulative): 26 | DMM Complexity: 0.2\n\nDIFF:\n@@ -26,7 +26,7 @@ from .packages.urllib3.filepost import encode_multipart_formdata\n from .exceptions import (\n     Timeout, URLRequired, TooManyRedirects, HTTPError, ConnectionError)\n from .utils import (\n-    get_unicode_from_response, stream_decode_response_unicode,\n+    get_encoding_from_headers, stream_decode_response_unicode,\n     decode_gzip, stream_decode_gzip, guess_filename, requote_path)\n \n \n@@ -158,6 +158,9 @@ class Request(object):\n                 # Make headers case-insensitive.\n                 response.headers = CaseInsensitiveDict(getattr(resp, 'headers', None))\n \n+                # Set encoding.\n+                response.encoding = get_encoding_from_headers(response.headers)\n+\n                 # Start off with our local cookies.\n                 cookies = self.cookies or dict()\n \n@@ -500,6 +503,9 @@ class Response(object):\n         #: Resulting :class:`HTTPError` of request, if one occurred.\n         self.error = None\n \n+        #: Encoding to decode with when accessing r.content.\n+        self.encoding = None\n+\n         #: A list of :class:`Response <Response>` objects from\n         #: the history of the Request. Any redirect responses will end\n         #: up here.\n@@ -570,33 +576,45 @@ class Response(object):\n         (if available).\n         \"\"\"\n \n-        if self._content is not None:\n-            return self._content\n-\n-        if self._content_consumed:\n-            raise RuntimeError('The content for this response was '\n-                               'already consumed')\n-\n+        if self._content is None:\n             # Read the contents.\n             try:\n+                if self._content_consumed:\n+                    raise RuntimeError(\n+                        'The content for this response was already consumed')\n+\n                 self._content = self.raw.read()\n             except AttributeError:\n-            return None\n+                self._content = None\n \n+        content = self._content\n \n         # Decode GZip'd content.\n         if 'gzip' in self.headers.get('content-encoding', ''):\n             try:\n-                self._content = decode_gzip(self._content)\n+                content = decode_gzip(self._content)\n             except zlib.error:\n                 pass\n \n         # Decode unicode content.\n         if self.config.get('decode_unicode'):\n-            self._content = get_unicode_from_response(self)\n+\n+            # Try charset from content-type\n+\n+            if self.encoding:\n+                try:\n+                    content = unicode(content, self.encoding)\n+                except UnicodeError:\n+                    pass\n+\n+            # Fall back:\n+            try:\n+                content = unicode(content, self.encoding, errors='replace')\n+            except TypeError:\n+                pass\n \n         self._content_consumed = True\n-        return self._content\n+        return content\n \n \n     def raise_for_status(self):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#6421ec1784642a3e34fb3af4e6a3e05fb2dbc899", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 3 | Lines Deleted: 3 | Files Changed: 1 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 6 | Churn Cumulative: 827 | Contributors (this commit): 8 | Commits (past 90d): 37 | Contributors (cumulative): 8 | DMM Complexity: 1.0\n\nDIFF:\n@@ -296,13 +296,13 @@ def unicode_from_html(content):\n \n def stream_decode_response_unicode(iterator, r):\n     \"\"\"Stream decodes a iterator.\"\"\"\n-    encoding = get_encoding_from_headers(r.headers)\n-    if encoding is None:\n+\n+    if r.encoding is None:\n         for item in iterator:\n             yield item\n         return\n \n-    decoder = codecs.getincrementaldecoder(encoding)(errors='replace')\n+    decoder = codecs.getincrementaldecoder(r.encoding)(errors='replace')\n     for chunk in iterator:\n         rv = decoder.decode(chunk)\n         if rv:\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#9d8d1d14f1aae1933440920953ef7841c449bef0", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 3 | Churn Cumulative: 106 | Contributors (this commit): 2 | Commits (past 90d): 5 | Contributors (cumulative): 2 | DMM Complexity: None\n\nDIFF:\n@@ -37,7 +37,8 @@ setup(\n     packages= [\n         'requests',\n         'requests.packages',\n-        'requests.packages.urllib3'\n+        'requests.packages.urllib3',\n+        'requests.packages.oreos'\n     ],\n     install_requires=required,\n     license='ISC',\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#1933d3c70768db0e8ed509f683f9b830b6bfc44c", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 25 | Lines Deleted: 2 | Files Changed: 2 | Hunks: 5 | Methods Changed: 3 | Complexity Δ (Sum/Max): 1/2 | Churn Δ: 27 | Churn Cumulative: 5313 | Contributors (this commit): 32 | Commits (past 90d): 147 | Contributors (cumulative): 42 | DMM Complexity: 0.8461538461538461\n\nDIFF:\n@@ -17,6 +17,7 @@ from datetime import datetime\n from .hooks import dispatch_hook\n from .structures import CaseInsensitiveDict\n from .status_codes import codes\n+from .auth import HTTPBasicAuth\n from .packages.urllib3.exceptions import MaxRetryError\n from .packages.urllib3.exceptions import SSLError as _SSLError\n from .packages.urllib3.exceptions import HTTPError as _HTTPError\n@@ -97,7 +98,7 @@ class Request(object):\n         #: content and metadata of HTTP Response, once :attr:`sent <send>`.\n         self.response = Response()\n \n-        #: Authentication tuple to attach to :class:`Request <Request>`.\n+        #: Authentication tuple or object to attach to :class:`Request <Request>`.\n         self.auth = auth\n \n         #: CookieJar to attach to :class:`Request <Request>`.\n@@ -388,8 +389,11 @@ class Request(object):\n         if (content_type) and (not 'content-type' in self.headers):\n             self.headers['Content-Type'] = content_type\n \n-\n         if self.auth:\n+            if isinstance(self.auth, tuple) and len(self.auth) == 2:\n+                # special-case basic HTTP auth\n+                self.auth = HTTPBasicAuth(*self.auth)\n+\n             # Allow auth to make its changes.\n             r = self.auth(self)\n \n\n@@ -141,6 +141,25 @@ class RequestsTestSuite(unittest.TestCase):\n         self.assertEqual(r.status_code, 200)\n \n \n+    def test_BASICAUTH_TUPLE_HTTP_200_OK_GET(self):\n+\n+        for service in SERVICES:\n+\n+            auth = ('user', 'pass')\n+            url = service('basic-auth', 'user', 'pass')\n+\n+            r = requests.get(url, auth=auth)\n+            self.assertEqual(r.status_code, 200)\n+\n+            r = requests.get(url)\n+            self.assertEqual(r.status_code, 401)\n+\n+\n+            s = requests.session(auth=auth)\n+            r = s.get(url)\n+            self.assertEqual(r.status_code, 200)\n+\n+\n     def test_BASICAUTH_HTTP_200_OK_GET(self):\n \n         for service in SERVICES:\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#8ae4b440e347a232167caea2a64949efd35a7827", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 4 | Lines Deleted: 4 | Files Changed: 1 | Hunks: 3 | Methods Changed: 1 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 8 | Churn Cumulative: 3888 | Contributors (this commit): 27 | Commits (past 90d): 114 | Contributors (cumulative): 27 | DMM Complexity: None\n\nDIFF:\n@@ -344,15 +344,15 @@ class Request(object):\n         already been sent.\n         \"\"\"\n \n+        # Build the URL\n+        url = self.full_url\n+\n         # Logging\n         if self.config.get('verbose'):\n             self.config.get('verbose').write('%s   %s   %s\\n' % (\n-                datetime.now().isoformat(), self.method, self.url\n+                datetime.now().isoformat(), self.method, url\n             ))\n \n-        # Build the URL\n-        url = self.full_url\n-\n         # Nottin' on you.\n         body = None\n         content_type = None\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#99b6e3594078da14161000ee7eec3985468ee82e", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 393 | Contributors (this commit): 6 | Commits (past 90d): 18 | Contributors (cumulative): 6 | DMM Complexity: 0.0\n\nDIFF:\n@@ -71,6 +71,8 @@ def map(requests, prefetch=True, size=None):\n     :param size: Specifies the number of requests to make at a time. If None, no throttling occurs.\n     \"\"\"\n \n+    requests = list(requests)\n+\n     if size:\n         pool = Pool(size)\n         pool.map(send, requests)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#5c72601599b085985f5b345717e8e8d127091c81", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 3 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 3 | Methods Changed: 2 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 4 | Churn Cumulative: 938 | Contributors (this commit): 13 | Commits (past 90d): 38 | Contributors (cumulative): 13 | DMM Complexity: 1.0\n\nDIFF:\n@@ -27,6 +27,7 @@ def request(method, url,\n     hooks=None,\n     return_response=True,\n     prefetch=False,\n+    use_session=None,\n     config=None):\n     \"\"\"Constructs and sends a :class:`Request <Request>`.\n     Returns :class:`Response <Response>` object.\n@@ -43,10 +44,11 @@ def request(method, url,\n     :param allow_redirects: (optional) Boolean. Set to True if POST/PUT/DELETE redirect following is allowed.\n     :param proxies: (optional) Dictionary mapping protocol to the URL of the proxy.\n     :param return_response: (optional) If False, an un-sent Request object will returned.\n+    :param use_session: (optional) A :class:`Session` object to be used for the request.\n     :param config: (optional) A configuration dictionary.\n     \"\"\"\n \n-    s = session()\n+    s = use_session or session()\n     return s.request(\n         method=method,\n         url=url,\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#a350ceffb934b4bced2eadd1cb7338dcb04fe598", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 4 | Lines Deleted: 4 | Files Changed: 1 | Hunks: 4 | Methods Changed: 2 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 8 | Churn Cumulative: 946 | Contributors (this commit): 13 | Commits (past 90d): 39 | Contributors (cumulative): 13 | DMM Complexity: None\n\nDIFF:\n@@ -11,7 +11,7 @@ This module implements the Requests API.\n \n \"\"\"\n \n-from .sessions import session\n+from . import sessions\n \n \n def request(method, url,\n@@ -27,7 +27,7 @@ def request(method, url,\n     hooks=None,\n     return_response=True,\n     prefetch=False,\n-    use_session=None,\n+    session=None,\n     config=None):\n     \"\"\"Constructs and sends a :class:`Request <Request>`.\n     Returns :class:`Response <Response>` object.\n@@ -44,11 +44,11 @@ def request(method, url,\n     :param allow_redirects: (optional) Boolean. Set to True if POST/PUT/DELETE redirect following is allowed.\n     :param proxies: (optional) Dictionary mapping protocol to the URL of the proxy.\n     :param return_response: (optional) If False, an un-sent Request object will returned.\n-    :param use_session: (optional) A :class:`Session` object to be used for the request.\n+    :param session: (optional) A :class:`Session` object to be used for the request.\n     :param config: (optional) A configuration dictionary.\n     \"\"\"\n \n-    s = use_session or session()\n+    s = session or sessions.session()\n     return s.request(\n         method=method,\n         url=url,\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#356bf42373f16ec9754cc73c63bc116a46e2f239", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 231 | Contributors (this commit): 3 | Commits (past 90d): 23 | Contributors (cumulative): 3 | DMM Complexity: None\n\nDIFF:\n@@ -15,8 +15,8 @@ requests\n \"\"\"\n \n __title__ = 'requests'\n-__version__ = '0.8.2'\n-__build__ = 0x000802\n+__version__ = '0.8.3'\n+__build__ = 0x000803\n __author__ = 'Kenneth Reitz'\n __license__ = 'ISC'\n __copyright__ = 'Copyright 2011 Kenneth Reitz'\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#ee36baf4f346b3d6817a6139840ac3b8b7e42621", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 4 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 1437 | Contributors (this commit): 16 | Commits (past 90d): 34 | Contributors (cumulative): 16 | DMM Complexity: 1.0\n\nDIFF:\n@@ -170,6 +170,10 @@ class RequestsTestSuite(unittest.TestCase):\n             r = requests.get(url, auth=auth)\n             self.assertEqual(r.status_code, 200)\n \n+            auth = ('user', 'pass')\n+            r = requests.get(url, auth=auth)\n+            self.assertEqual(r.status_code, 200)\n+\n             r = requests.get(url)\n             self.assertEqual(r.status_code, 401)\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#6bb4c4ebe628ad1fbb54c673ee4e409ed7376b2e", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 6 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 2 | Methods Changed: 2 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 7 | Churn Cumulative: 1444 | Contributors (this commit): 16 | Commits (past 90d): 34 | Contributors (cumulative): 16 | DMM Complexity: 1.0\n\nDIFF:\n@@ -51,7 +51,7 @@ class RequestsTestSuite(unittest.TestCase):\n \n             self.httpbin = c\n             _httpbin = True\n-            time.sleep(1)\n+            time.sleep(.01)\n \n \n \n@@ -81,6 +81,11 @@ class RequestsTestSuite(unittest.TestCase):\n         r = requests.get(httpbin('/get'))\n         self.assertEqual(r.status_code, 200)\n \n+    def test_response_sent(self):\n+        r = requests.get(httpbin('/get'))\n+\n+        self.assertTrue(r.request.sent)\n+\n     def test_HTTP_302_ALLOW_REDIRECT_GET(self):\n         r = requests.get(httpbin('redirect', '1'))\n         self.assertEqual(r.status_code, 200)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#c7b99f78192bdff62fad4f92039396c0dfbe4fb8", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 2/2 | Churn Δ: 1 | Churn Cumulative: 3889 | Contributors (this commit): 27 | Commits (past 90d): 107 | Contributors (cumulative): 27 | DMM Complexity: 0.0\n\nDIFF:\n@@ -446,6 +446,7 @@ class Request(object):\n                     retries=self.config.get('max_retries', 0),\n                     timeout=self.timeout,\n                 )\n+                self.sent = True\n \n \n             except MaxRetryError, e:\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#a76f4925b512b481375f0886a5b675d3e8522b34", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 1446 | Contributors (this commit): 16 | Commits (past 90d): 35 | Contributors (cumulative): 16 | DMM Complexity: None\n\nDIFF:\n@@ -51,7 +51,7 @@ class RequestsTestSuite(unittest.TestCase):\n \n             self.httpbin = c\n             _httpbin = True\n-            time.sleep(.01)\n+            time.sleep(1)\n \n \n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#a6412b02ba271a7a8e6fc4a74ecf6295cb06ddbe", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 9 | Lines Deleted: 9 | Files Changed: 6 | Hunks: 9 | Methods Changed: 5 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 18 | Churn Cumulative: 6576 | Contributors (this commit): 32 | Commits (past 90d): 226 | Contributors (cumulative): 65 | DMM Complexity: None\n\nDIFF:\n@@ -39,7 +39,7 @@ def request(method, url,\n     :param headers: (optional) Dictionary of HTTP Headers to send with the :class:`Request`.\n     :param cookies: (optional) Dict or CookieJar object to send with the :class:`Request`.\n     :param files: (optional) Dictionary of 'name': file-like-objects (or {'name': ('filename', fileobj)}) for multipart encoding upload.\n-    :param auth: (optional) Auth typle to enable Basic/Digest/Custom HTTP Auth.\n+    :param auth: (optional) Auth tuple to enable Basic/Digest/Custom HTTP Auth.\n     :param timeout: (optional) Float describing the timeout of the request.\n     :param allow_redirects: (optional) Boolean. Set to True if POST/PUT/DELETE redirect following is allowed.\n     :param proxies: (optional) Dictionary mapping protocol to the URL of the proxy.\n\n@@ -11,7 +11,7 @@ Configurations:\n :base_headers: Default HTTP headers.\n :verbose: Stream to write request logging to.\n :timeout: Seconds until request timeout.\n-:max_redirects: Maximum njumber of redirects allowed within a request.\n+:max_redirects: Maximum number of redirects allowed within a request.\n :decode_unicode: Decode unicode responses automatically?\n :keep_alive: Reuse HTTP Connections?\n :max_retries: The number of times a request should be retried in the event of a connection failure.\n\n@@ -13,10 +13,10 @@ class RequestException(Exception):\n     request.\"\"\"\n \n class HTTPError(RequestException):\n-    \"\"\"An HTTP error occured.\"\"\"\n+    \"\"\"An HTTP error occurred.\"\"\"\n \n class ConnectionError(RequestException):\n-    \"\"\"A Connection error occured.\"\"\"\n+    \"\"\"A Connection error occurred.\"\"\"\n \n class Timeout(RequestException):\n     \"\"\"The request timed out.\"\"\"\n\n@@ -151,7 +151,7 @@ class Request(object):\n \n             if resp:\n \n-                # Fallback to None if there's no staus_code, for whatever reason.\n+                # Fallback to None if there's no status_code, for whatever reason.\n                 response.status_code = getattr(resp, 'status', None)\n \n                 # Make headers case-insensitive.\n@@ -171,7 +171,7 @@ class Request(object):\n                 # Save cookies in Response.\n                 response.cookies = cookies\n \n-            # Save original resopnse for later.\n+            # Save original response for later.\n             response.raw = resp\n \n             if is_error:\n\n@@ -123,7 +123,7 @@ class Session(object):\n         :param headers: (optional) Dictionary of HTTP Headers to send with the :class:`Request`.\n         :param cookies: (optional) Dict or CookieJar object to send with the :class:`Request`.\n         :param files: (optional) Dictionary of 'filename': file-like-objects for multipart encoding upload.\n-        :param auth: (optional) Auth typle to enable Basic/Digest/Custom HTTP Auth.\n+        :param auth: (optional) Auth tuple to enable Basic/Digest/Custom HTTP Auth.\n         :param timeout: (optional) Float describing the timeout of the request.\n         :param allow_redirects: (optional) Boolean. Set to True if POST/PUT/DELETE redirect following is allowed.\n         :param proxies: (optional) Dictionary mapping protocol to the URL of the proxy.\n\n@@ -4,7 +4,7 @@\n requests.utils\n ~~~~~~~~~~~~~~\n \n-This module provides utlity functions that are used within Requests\n+This module provides utility functions that are used within Requests\n that are also useful for external consumption.\n \n \"\"\"\n@@ -374,7 +374,7 @@ def requote_path(path):\n     \"\"\"Re-quote the given URL path component.\n \n     This function passes the given path through an unquote/quote cycle to\n-    ensure that it is fully and consistenty quoted.\n+    ensure that it is fully and consistently quoted.\n     \"\"\"\n     parts = path.split(\"/\")\n     parts = (urllib.quote(urllib.unquote(part), safe=\"\") for part in parts)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#c71ac7917aa2718b48121dd2d1ee30ae915a126c", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 8 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 8 | Churn Cumulative: 1454 | Contributors (this commit): 16 | Commits (past 90d): 34 | Contributors (cumulative): 16 | DMM Complexity: 1.0\n\nDIFF:\n@@ -582,6 +582,14 @@ class RequestsTestSuite(unittest.TestCase):\n         r = requests.get(hah, allow_redirects=False, config=config)\n         assert r.content == None\n \n+    def test_cached_response(self):\n+\n+        r1 = requests.get(httpbin('get'), prefetch=False)\n+        assert r1.content\n+        assert r1.content\n+\n+        r2 = requests.get(httpbin('get'), prefetch=True)\n+        assert r2.content\n \n if __name__ == '__main__':\n     unittest.main()\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#a5f79712bb34bee0aed8ac60c954270677710294", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 3 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 5 | Churn Cumulative: 3898 | Contributors (this commit): 28 | Commits (past 90d): 107 | Contributors (cumulative): 28 | DMM Complexity: None\n\nDIFF:\n@@ -441,7 +441,7 @@ class Request(object):\n                     headers=self.headers,\n                     redirect=False,\n                     assert_same_host=False,\n-                    preload_content=prefetch,\n+                    preload_content=False,\n                     decode_content=False,\n                     retries=self.config.get('max_retries', 0),\n                     timeout=self.timeout,\n@@ -470,7 +470,8 @@ class Request(object):\n \n             # If prefetch is True, mark content as consumed.\n             if prefetch:\n-                self.response._content_consumed = True\n+                # Save the response.\n+                self.response.content\n \n             return self.sent\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#10eed6344cf255f48bdee0b665381969ba27bde9", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 9 | Lines Deleted: 6 | Files Changed: 2 | Hunks: 5 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 15 | Churn Cumulative: 352 | Contributors (this commit): 4 | Commits (past 90d): 28 | Contributors (cumulative): 5 | DMM Complexity: None\n\nDIFF:\n@@ -15,13 +15,14 @@ requests\n \"\"\"\n \n __title__ = 'requests'\n-__version__ = '0.8.3'\n-__build__ = 0x000803\n+__version__ = '0.8.4'\n+__build__ = 0x000804\n __author__ = 'Kenneth Reitz'\n __license__ = 'ISC'\n __copyright__ = 'Copyright 2011 Kenneth Reitz'\n \n \n+\n from . import utils\n from .models import Request, Response\n from .api import request, get, head, post, patch, put, delete, options\n\n@@ -12,12 +12,12 @@ except ImportError:\n \n \n \n-if sys.argv[-1] == \"publish\":\n-    os.system(\"python setup.py sdist upload\")\n+if sys.argv[-1] == 'publish':\n+    os.system('python setup.py sdist upload')\n     sys.exit()\n \n-if sys.argv[-1] == \"test\":\n-    os.system(\"python test_requests.py\")\n+if sys.argv[-1] == 'test':\n+    os.system('python test_requests.py')\n     sys.exit()\n \n required = []\n@@ -40,6 +40,8 @@ setup(\n         'requests.packages.urllib3',\n         'requests.packages.oreos'\n     ],\n+    package_data={'': ['LICENSE', 'NOTICE']},\n+    include_package_data=True,\n     install_requires=required,\n     license='ISC',\n     classifiers=(\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#03ddf26596b4c10f12483817550fb4f7feb861ea", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 1 | Churn Cumulative: 1455 | Contributors (this commit): 16 | Commits (past 90d): 35 | Contributors (cumulative): 16 | DMM Complexity: 1.0\n\nDIFF:\n@@ -589,6 +589,7 @@ class RequestsTestSuite(unittest.TestCase):\n         assert r1.content\n \n         r2 = requests.get(httpbin('get'), prefetch=True)\n+        assert r2._content\n         assert r2.content\n \n if __name__ == '__main__':\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#47510486eccc2d06ef7e5de7ce6a79e30780322d", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 1457 | Contributors (this commit): 16 | Commits (past 90d): 35 | Contributors (cumulative): 16 | DMM Complexity: None\n\nDIFF:\n@@ -428,7 +428,7 @@ class RequestsTestSuite(unittest.TestCase):\n             self.assertEquals(r.headers['content-type'], 'application/json')\n             self.assertEquals(r.url, service('post?test=foo&test=baz'))\n             rbody = json.loads(r.content)\n-            self.assertEquals(rbody.get('form'), dict(test2='foobar',test3='foo'))\n+            self.assertEquals(rbody.get('form'), dict(test2='foobar',test3=['foo','baz']))\n             self.assertEquals(rbody.get('data'), '')\n \n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#5a3aae73ba73ac4c72f1944836efc6158893181b", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 11 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 3/3 | Churn Δ: 11 | Churn Cumulative: 1468 | Contributors (this commit): 16 | Commits (past 90d): 36 | Contributors (cumulative): 16 | DMM Complexity: 1.0\n\nDIFF:\n@@ -592,5 +592,16 @@ class RequestsTestSuite(unittest.TestCase):\n         assert r2._content\n         assert r2.content\n \n+    def test_iter_lines(self):\n+\n+        lines = (0, 2, 10, 100)\n+\n+        for i in lines:\n+\n+            r = requests.get(httpbin('stream', str(i)), prefetch=False)\n+            len_lines = len([l for l in r.iter_lines()])\n+\n+            self.assertEqual(i, len_lines)\n+\n if __name__ == '__main__':\n     unittest.main()\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#6fb26744466e38ec701d75ebf3ce3fe1cc5469ca", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 46 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 2 | Complexity Δ (Sum/Max): 10/10 | Churn Δ: 46 | Churn Cumulative: 3944 | Contributors (this commit): 28 | Commits (past 90d): 106 | Contributors (cumulative): 28 | DMM Complexity: 0.42857142857142855\n\nDIFF:\n@@ -572,6 +572,52 @@ class Response(object):\n         return gen\n \n \n+    def iter_lines(self, newlines=None, decode_unicode=None):\n+        \"\"\"Iterates over the response data, one line at a time.  This\n+        avoids reading the content at once into memory for large\n+        responses.\n+\n+        :param newlines: a collection of bytes to seperate lines with.\n+        \"\"\"\n+\n+        if newlines is None:\n+            newlines = ('\\r', '\\n', '\\r\\n')\n+\n+        if self._content_consumed:\n+            raise RuntimeError(\n+                'The content for this response was already consumed'\n+            )\n+\n+        def generate():\n+            chunk = []\n+\n+            while 1:\n+                c = self.raw.read(1)\n+                if not c:\n+                    break\n+\n+                if c in newlines:\n+                    yield ''.join(chunk)\n+                    chunk = []\n+                else:\n+                    chunk.append(c)\n+\n+            self._content_consumed = True\n+\n+        gen = generate()\n+\n+        if 'gzip' in self.headers.get('content-encoding', ''):\n+            gen = stream_decode_gzip(gen)\n+\n+        if decode_unicode is None:\n+            decode_unicode = self.config.get('decode_unicode')\n+\n+        if decode_unicode:\n+            gen = stream_decode_response_unicode(gen, self)\n+\n+        return gen\n+\n+\n     @property\n     def content(self):\n         \"\"\"Content of the response, in bytes or unicode\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#5e60279a1955534c5fc5ed530d9862ecfcbeab35", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 0 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 1 | Churn Cumulative: 949 | Contributors (this commit): 14 | Commits (past 90d): 37 | Contributors (cumulative): 14 | DMM Complexity: None\n\nDIFF:\n@@ -13,7 +13,6 @@ This module implements the Requests API.\n \n from . import sessions\n \n-\n def request(method, url,\n     params=None,\n     data=None,\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#0e711f2f9d6b4ae13091d00ca4e04f6114159149", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 240 | Contributors (this commit): 3 | Commits (past 90d): 25 | Contributors (cumulative): 3 | DMM Complexity: None\n\nDIFF:\n@@ -15,8 +15,8 @@ requests\n \"\"\"\n \n __title__ = 'requests'\n-__version__ = '0.8.4'\n-__build__ = 0x000804\n+__version__ = '0.8.5'\n+__build__ = 0x000805\n __author__ = 'Kenneth Reitz'\n __license__ = 'ISC'\n __copyright__ = 'Copyright 2011 Kenneth Reitz'\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#814e0520ad61387e89b22806d20544adf6ce8ed5", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 15 | Lines Deleted: 1 | Files Changed: 2 | Hunks: 3 | Methods Changed: 2 | Complexity Δ (Sum/Max): 2/1 | Churn Δ: 16 | Churn Cumulative: 4202 | Contributors (this commit): 29 | Commits (past 90d): 109 | Contributors (cumulative): 32 | DMM Complexity: 0.4\n\nDIFF:\n@@ -35,6 +35,14 @@ class HTTPBasicAuth(AuthBase):\n         return r\n \n \n+class HTTPProxyAuth(HTTPBasicAuth):\n+    \"\"\"Attaches HTTP Proxy Authenetication to a given Request object.\"\"\"\n+    def __call__(self, r):\n+        auth_s = b64encode('%s:%s' % (self.username, self.password))\n+        r.headers['Proxy-Authorization'] = ('Basic %s' % auth_s)\n+        return r\n+\n+\n class HTTPDigestAuth(AuthBase):\n     \"\"\"Attaches HTTP Digest Authentication to the given Request object.\"\"\"\n     def __init__(self, username, password):\n\n@@ -17,7 +17,7 @@ from .hooks import dispatch_hook\n from .structures import CaseInsensitiveDict\n from .status_codes import codes\n from .packages import oreos\n-from .auth import HTTPBasicAuth\n+from .auth import HTTPBasicAuth, HTTPProxyAuth\n from .packages.urllib3.exceptions import MaxRetryError\n from .packages.urllib3.exceptions import SSLError as _SSLError\n from .packages.urllib3.exceptions import HTTPError as _HTTPError\n@@ -407,6 +407,12 @@ class Request(object):\n \n         if proxy:\n             conn = poolmanager.proxy_from_url(proxy)\n+            _proxy = urlparse(proxy)\n+            if '@' in _proxy.netloc:\n+\t\t\t    auth, url = _proxy.netloc.split('@', 1)\n+\t\t\t    self.proxy_auth = HTTPProxyAuth(*auth.split(':', 1))\n+\t\t\t    r = self.proxy_auth(self)\n+\t\t\t    self.__dict__.update(r.__dict__)\n         else:\n             # Check to see if keep_alive is allowed.\n             if self.config.get('keep_alive'):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#8f58c095c54a84ad5527e804fcbd506f5b5d1a91", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 30 | Lines Deleted: 9 | Files Changed: 1 | Hunks: 7 | Methods Changed: 3 | Complexity Δ (Sum/Max): 3/3 | Churn Δ: 39 | Churn Cumulative: 1686 | Contributors (this commit): 1 | Commits (past 90d): 15 | Contributors (cumulative): 1 | DMM Complexity: 0.375\n\nDIFF:\n@@ -210,6 +210,8 @@ class HTTPConnectionPool(ConnectionPool, RequestMethods):\n         if timeout is _Default:\n             timeout = self.timeout\n \n+        conn.timeout = timeout # This only does anything in Py26+\n+\n         conn.request(method, url, **httplib_request_kw)\n         conn.sock.settimeout(timeout)\n         httplib_response = conn.getresponse()\n@@ -244,6 +246,13 @@ class HTTPConnectionPool(ConnectionPool, RequestMethods):\n            More commonly, it's appropriate to use a convenience method provided\n            by :class:`.RequestMethods`, such as :meth:`.request`.\n \n+        .. note::\n+\n+           `release_conn` will only behave as expected if\n+           `preload_content=False` because we want to make\n+           `preload_content=False` the default behaviour someday soon without\n+           breaking backwards compatibility.\n+\n         :param method:\n             HTTP request method (such as GET, POST, PUT, etc.)\n \n@@ -279,10 +288,12 @@ class HTTPConnectionPool(ConnectionPool, RequestMethods):\n \n         :param release_conn:\n             If False, then the urlopen call will not release the connection\n-            back into the pool once a response is received. This is useful if\n-            you're not preloading the response's content immediately. You will\n-            need to call ``r.release_conn()`` on the response ``r`` to return\n-            the connection back into the pool. If None, it takes the value of\n+            back into the pool once a response is received (but will release if\n+            you read the entire contents of the response such as when\n+            `preload_content=True`). This is useful if you're not preloading\n+            the response's content immediately. You will need to call\n+            ``r.release_conn()`` on the response ``r`` to return the connection\n+            back into the pool. If None, it takes the value of\n             ``response_kw.get('preload_content', True)``.\n \n         :param \\**response_kw:\n@@ -295,6 +306,9 @@ class HTTPConnectionPool(ConnectionPool, RequestMethods):\n         if retries < 0:\n             raise MaxRetryError(\"Max retries exceeded for url: %s\" % url)\n \n+        if timeout is _Default:\n+            timeout = self.timeout\n+\n         if release_conn is None:\n             release_conn = response_kw.get('preload_content', True)\n \n@@ -336,10 +350,15 @@ class HTTPConnectionPool(ConnectionPool, RequestMethods):\n             #     ``response.release_conn()`` is called (implicitly by\n             #     ``response.read()``)\n \n-        except (SocketTimeout, Empty), e:\n-            # Timed out either by socket or queue\n-            raise TimeoutError(\"Request timed out after %s seconds\" %\n-                               self.timeout)\n+        except (Empty), e:\n+            # Timed out by queue\n+            raise TimeoutError(\"Request timed out. (pool_timeout=%s)\" %\n+                               pool_timeout)\n+\n+        except (SocketTimeout), e:\n+            # Timed out by socket\n+            raise TimeoutError(\"Request timed out. (timeout=%s)\" %\n+                               timeout)\n \n         except (BaseSSLError), e:\n             # SSL certificate error\n@@ -488,10 +507,12 @@ def get_host(url):\n     # simplified for our needs.\n     port = None\n     scheme = 'http'\n-    if '//' in url:\n+    if '://' in url:\n         scheme, url = url.split('://', 1)\n     if '/' in url:\n         url, _path = url.split('/', 1)\n+    if '@' in url:\n+        _auth, url = url.split('@', 1)\n     if ':' in url:\n         url, port = url.split(':', 1)\n         port = int(port)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#8207ed074e2f02bd5d77e7583807039a25fa116b", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 8 | Lines Deleted: 4 | Files Changed: 1 | Hunks: 3 | Methods Changed: 2 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 12 | Churn Cumulative: 262 | Contributors (this commit): 3 | Commits (past 90d): 11 | Contributors (cumulative): 3 | DMM Complexity: None\n\nDIFF:\n@@ -16,6 +16,12 @@ from urlparse import urlparse\n from .utils import randombytes, parse_dict_header\n \n \n+\n+def _basic_auth_str(username, password):\n+    \"\"\"Returns a Basic Auth string.\"\"\"\n+    return 'Basic %s' % b64encode('%s:%s' % (username, password))\n+\n+\n class AuthBase(object):\n     \"\"\"Base class that all auth implementations derive from\"\"\"\n \n@@ -30,16 +36,14 @@ class HTTPBasicAuth(AuthBase):\n         self.password = str(password)\n \n     def __call__(self, r):\n-        auth_s = b64encode('%s:%s' % (self.username, self.password))\n-        r.headers['Authorization'] = ('Basic %s' % auth_s)\n+        r.headers['Authorization'] = _basic_auth_str(self.username, self.password)\n         return r\n \n \n class HTTPProxyAuth(HTTPBasicAuth):\n     \"\"\"Attaches HTTP Proxy Authenetication to a given Request object.\"\"\"\n     def __call__(self, r):\n-        auth_s = b64encode('%s:%s' % (self.username, self.password))\n-        r.headers['Proxy-Authorization'] = ('Basic %s' % auth_s)\n+        r.headers['Proxy-Authorization'] = _basic_auth_str(self.username, self.password)\n         return r\n \n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#6ce4ece8aa452764be26cdb26e5ce72dfd0da53d", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 244 | Contributors (this commit): 3 | Commits (past 90d): 26 | Contributors (cumulative): 3 | DMM Complexity: None\n\nDIFF:\n@@ -15,8 +15,8 @@ requests\n \"\"\"\n \n __title__ = 'requests'\n-__version__ = '0.8.5'\n-__build__ = 0x000805\n+__version__ = '0.8.6'\n+__build__ = 0x000806\n __author__ = 'Kenneth Reitz'\n __license__ = 'ISC'\n __copyright__ = 'Copyright 2011 Kenneth Reitz'\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#c910b958f0694a5e5e7a517cf5b9bdec5f2fef03", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 266 | Contributors (this commit): 3 | Commits (past 90d): 12 | Contributors (cumulative): 3 | DMM Complexity: None\n\nDIFF:\n@@ -88,8 +88,8 @@ class HTTPDigestAuth(AuthBase):\n             p_parsed = urlparse(r.request.url)\n             path = p_parsed.path + p_parsed.query\n \n-            A1 = \"%s:%s:%s\" % (self.username, realm, self.password)\n-            A2 = \"%s:%s\" % (r.request.method, path)\n+            A1 = '%s:%s:%s' % (self.username, realm, self.password)\n+            A2 = '%s:%s' % (r.request.method, path)\n \n             if qop == 'auth':\n                 if nonce == last_nonce:\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
