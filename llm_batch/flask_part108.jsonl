{"custom_id": "flask#52c54b2ce1e392c5d5cd9339a4a069e91edd1d01", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 295 | Contributors (this commit): 5 | Commits (past 90d): 7 | Contributors (cumulative): 5 | DMM Complexity: None\n\nDIFF:\n@@ -42,7 +42,7 @@ from .templating import render_template_string as render_template_string\n from .templating import stream_template as stream_template\n from .templating import stream_template_string as stream_template_string\n \n-__version__ = \"2.2.1.dev\"\n+__version__ = \"2.2.1\"\n \n \n def __getattr__(name):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#4984753dbf5a247f46e2903011c981d0709973ff", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 297 | Contributors (this commit): 5 | Commits (past 90d): 8 | Contributors (cumulative): 5 | DMM Complexity: None\n\nDIFF:\n@@ -42,7 +42,7 @@ from .templating import render_template_string as render_template_string\n from .templating import stream_template as stream_template\n from .templating import stream_template_string as stream_template_string\n \n-__version__ = \"2.2.1\"\n+__version__ = \"2.2.2.dev\"\n \n \n def __getattr__(name):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#a6a7a57380cd8f7410753c3b819ba6d09198d8c9", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 2718 | Contributors (this commit): 24 | Commits (past 90d): 23 | Contributors (cumulative): 24 | DMM Complexity: None\n\nDIFF:\n@@ -827,7 +827,7 @@ class Flask(Scaffold):\n         if instance_relative:\n             root_path = self.instance_path\n         defaults = dict(self.default_config)\n-        defaults[\"ENV\"] = os.environ.get(\"FLASK_ENV\") or \"development\"\n+        defaults[\"ENV\"] = os.environ.get(\"FLASK_ENV\") or \"production\"\n         defaults[\"DEBUG\"] = get_debug_flag()\n         return self.config_class(root_path, defaults)\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#e3df23374cdb9342a823556170c53c9d987d0d33", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 1177 | Contributors (this commit): 13 | Commits (past 90d): 11 | Contributors (cumulative): 13 | DMM Complexity: None\n\nDIFF:\n@@ -954,7 +954,7 @@ def shell_command() -> None:\n \n     banner = (\n         f\"Python {sys.version} on {sys.platform}\\n\"\n-        f\"App: {current_app.import_name} [{current_app.env}]\\n\"\n+        f\"App: {current_app.import_name}\\n\"\n         f\"Instance: {current_app.instance_path}\"\n     )\n     ctx: dict = {}\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#de16718b39e3544688130339a0813997e3790c48", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 8 | Files Changed: 2 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 9 | Churn Cumulative: 2078 | Contributors (this commit): 40 | Commits (past 90d): 15 | Contributors (cumulative): 45 | DMM Complexity: 0.0\n\nDIFF:\n@@ -4,7 +4,7 @@ from setuptools import setup\n setup(\n     name=\"Flask\",\n     install_requires=[\n-        \"Werkzeug >= 2.2.0\",\n+        \"Werkzeug >= 2.2.2\",\n         \"Jinja2 >= 3.0\",\n         \"itsdangerous >= 2.0\",\n         \"click >= 8.0\",\n\n@@ -719,13 +719,6 @@ def show_server_banner(debug, app_import_path):\n     if is_running_from_reloader():\n         return\n \n-    click.secho(\n-        \"WARNING: This is a development server. Do not use it in a production\"\n-        \" deployment. Use a production WSGI server instead.\",\n-        fg=\"red\",\n-        bold=True,\n-    )\n-\n     if app_import_path is not None:\n         click.echo(f\" * Serving Flask app '{app_import_path}'\")\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#43d2fff317aec64a000604a764b8ab2dc751c753", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 299 | Contributors (this commit): 5 | Commits (past 90d): 9 | Contributors (cumulative): 5 | DMM Complexity: None\n\nDIFF:\n@@ -42,7 +42,7 @@ from .templating import render_template_string as render_template_string\n from .templating import stream_template as stream_template\n from .templating import stream_template_string as stream_template_string\n \n-__version__ = \"2.2.2.dev\"\n+__version__ = \"2.2.2\"\n \n \n def __getattr__(name):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#00b07c863ec147256b68f71c3fe9b6b2f9dbe6bc", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 220 | Contributors (this commit): 4 | Commits (past 90d): 4 | Contributors (cumulative): 4 | DMM Complexity: None\n\nDIFF:\n@@ -88,7 +88,7 @@ def __getattr__(name: str) -> t.Any:\n         import warnings\n \n         warnings.warn(\n-            \"'_app_ctx_stack' is deprecated and will be remoevd in Flask 2.3.\",\n+            \"'_app_ctx_stack' is deprecated and will be removed in Flask 2.3.\",\n             DeprecationWarning,\n             stacklevel=2,\n         )\n@@ -98,7 +98,7 @@ def __getattr__(name: str) -> t.Any:\n         import warnings\n \n         warnings.warn(\n-            \"'_request_ctx_stack' is deprecated and will be remoevd in Flask 2.3.\",\n+            \"'_request_ctx_stack' is deprecated and will be removed in Flask 2.3.\",\n             DeprecationWarning,\n             stacklevel=2,\n         )\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#746455d1038fd5479f396cbf2d19b48edfeb8290", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 3 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 5 | Churn Cumulative: 438 | Contributors (this commit): 6 | Commits (past 90d): 1 | Contributors (cumulative): 6 | DMM Complexity: 1.0\n\nDIFF:\n@@ -275,8 +275,9 @@ class Config(dict):\n     def from_mapping(\n         self, mapping: t.Optional[t.Mapping[str, t.Any]] = None, **kwargs: t.Any\n     ) -> bool:\n-        \"\"\"Updates the config like :meth:`update` ignoring items with non-upper\n-        keys.\n+        \"\"\"Updates the config like :meth:`update` ignoring items with\n+        non-upper keys.\n+\n         :return: Always returns ``True``.\n \n         .. versionadded:: 0.11\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#212b72a1feeae69739fb50fc5ab11d1c025350bc", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 301 | Contributors (this commit): 5 | Commits (past 90d): 9 | Contributors (cumulative): 5 | DMM Complexity: None\n\nDIFF:\n@@ -42,7 +42,7 @@ from .templating import render_template_string as render_template_string\n from .templating import stream_template as stream_template\n from .templating import stream_template_string as stream_template_string\n \n-__version__ = \"2.2.2\"\n+__version__ = \"2.2.3\"\n \n \n def __getattr__(name):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#e7b2ce9a50c4a3a1ff5d032f201ed43d8cd39f17", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 303 | Contributors (this commit): 6 | Commits (past 90d): 10 | Contributors (cumulative): 6 | DMM Complexity: None\n\nDIFF:\n@@ -42,7 +42,7 @@ from .templating import render_template_string as render_template_string\n from .templating import stream_template as stream_template\n from .templating import stream_template_string as stream_template_string\n \n-__version__ = \"2.2.3\"\n+__version__ = \"2.2.3.dev\"\n \n \n def __getattr__(name):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#0d8c8ba71bc6362e6ea9af08146dc97e1a0a8abc", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 2720 | Contributors (this commit): 25 | Commits (past 90d): 15 | Contributors (cumulative): 25 | DMM Complexity: None\n\nDIFF:\n@@ -2448,7 +2448,7 @@ class Flask(Scaffold):\n         :data:`request` point at the request for the created\n         environment. ::\n \n-            with test_request_context(...):\n+            with app.test_request_context(...):\n                 generate_report()\n \n         When using the shell, it may be easier to push and pop the\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#cc66213e579d6b35d9951c21b685d0078f373c44", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 4 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 5 | Churn Cumulative: 2725 | Contributors (this commit): 26 | Commits (past 90d): 7 | Contributors (cumulative): 26 | DMM Complexity: 1.0\n\nDIFF:\n@@ -961,11 +961,14 @@ class Flask(Scaffold):\n         \"\"\"Returns ``True`` if autoescaping should be active for the given\n         template name. If no template name is given, returns `True`.\n \n+        .. versionchanged:: 2.2\n+            Autoescaping is now enabled by default for ``.svg`` files.\n+\n         .. versionadded:: 0.5\n         \"\"\"\n         if filename is None:\n             return True\n-        return filename.endswith((\".html\", \".htm\", \".xml\", \".xhtml\"))\n+        return filename.endswith((\".html\", \".htm\", \".xml\", \".xhtml\", \".svg\"))\n \n     def update_template_context(self, context: dict) -> None:\n         \"\"\"Update the template context with some commonly used variables.\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#d178653b5f7a5ee2ba15e215ce60caeeb9ed82e1", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 14 | Lines Deleted: 14 | Files Changed: 7 | Hunks: 12 | Methods Changed: 12 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 28 | Churn Cumulative: 6878 | Contributors (this commit): 40 | Commits (past 90d): 9 | Contributors (cumulative): 70 | DMM Complexity: None\n\nDIFF:\n@@ -384,7 +384,7 @@ class Flask(Scaffold):\n     _json_decoder: t.Union[t.Type[json.JSONDecoder], None] = None\n \n     @property  # type: ignore[override]\n-    def json_encoder(self) -> t.Type[json.JSONEncoder]:  # type: ignore[override]\n+    def json_encoder(self) -> t.Type[json.JSONEncoder]:\n         \"\"\"The JSON encoder class to use. Defaults to\n         :class:`~flask.json.JSONEncoder`.\n \n@@ -423,7 +423,7 @@ class Flask(Scaffold):\n         self._json_encoder = value\n \n     @property  # type: ignore[override]\n-    def json_decoder(self) -> t.Type[json.JSONDecoder]:  # type: ignore[override]\n+    def json_decoder(self) -> t.Type[json.JSONDecoder]:\n         \"\"\"The JSON decoder class to use. Defaults to\n         :class:`~flask.json.JSONDecoder`.\n \n\n@@ -176,8 +176,8 @@ class Blueprint(Scaffold):\n     _json_encoder: t.Union[t.Type[json.JSONEncoder], None] = None\n     _json_decoder: t.Union[t.Type[json.JSONDecoder], None] = None\n \n-    @property  # type: ignore[override]\n-    def json_encoder(  # type: ignore[override]\n+    @property\n+    def json_encoder(\n         self,\n     ) -> t.Union[t.Type[json.JSONEncoder], None]:\n         \"\"\"Blueprint-local JSON encoder class to use. Set to ``None`` to use the app's.\n@@ -210,8 +210,8 @@ class Blueprint(Scaffold):\n         )\n         self._json_encoder = value\n \n-    @property  # type: ignore[override]\n-    def json_decoder(  # type: ignore[override]\n+    @property\n+    def json_decoder(\n         self,\n     ) -> t.Union[t.Type[json.JSONDecoder], None]:\n         \"\"\"Blueprint-local JSON decoder class to use. Set to ``None`` to use the app's.\n\n@@ -307,7 +307,7 @@ class RequestContext:\n         self.app = app\n         if request is None:\n             request = app.request_class(environ)\n-            request.json_module = app.json  # type: ignore[misc]\n+            request.json_module = app.json\n         self.request: Request = request\n         self.url_adapter = None\n         try:\n\n@@ -149,7 +149,7 @@ def stream_with_context(\n                 yield from gen\n             finally:\n                 if hasattr(gen, \"close\"):\n-                    gen.close()  # type: ignore\n+                    gen.close()\n \n     # The trick is to start the generator.  Then the code execution runs until\n     # the first dummy None is yielded at which point the context was already\n@@ -287,7 +287,7 @@ def redirect(\n     return _wz_redirect(location, code=code, Response=Response)\n \n \n-def abort(  # type: ignore[misc]\n+def abort(\n     code: t.Union[int, \"BaseResponse\"], *args: t.Any, **kwargs: t.Any\n ) -> \"te.NoReturn\":\n     \"\"\"Raise an :exc:`~werkzeug.exceptions.HTTPException` for the given\n@@ -617,7 +617,7 @@ def get_root_path(import_name: str) -> str:\n         return os.getcwd()\n \n     if hasattr(loader, \"get_filename\"):\n-        filepath = loader.get_filename(import_name)  # type: ignore\n+        filepath = loader.get_filename(import_name)\n     else:\n         # Fall back to imports.\n         __import__(import_name)\n\n@@ -225,7 +225,7 @@ class FlaskClient(Client):\n             buffered=buffered,\n             follow_redirects=follow_redirects,\n         )\n-        response.json_module = self.application.json  # type: ignore[misc]\n+        response.json_module = self.application.json  # type: ignore[assignment]\n \n         # Re-push contexts that were preserved during the request.\n         while self._new_contexts:\n\n@@ -25,7 +25,7 @@ class Request(RequestBase):\n     specific ones.\n     \"\"\"\n \n-    json_module = json\n+    json_module: t.Any = json\n \n     #: The internal URL rule that matched the request.  This can be\n     #: useful to inspect which methods are allowed for the URL from\n\n@@ -10,12 +10,12 @@ app = Flask(__name__)\n \n @app.after_request\n def after_sync(response: Response) -> Response:\n-    ...\n+    return Response()\n \n \n @app.after_request\n async def after_async(response: Response) -> Response:\n-    ...\n+    return Response()\n \n \n @app.before_request\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#09112cfc477a270f4b2990e1daf39db1dbe30e98", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 3 | Lines Deleted: 3 | Files Changed: 3 | Hunks: 3 | Methods Changed: 6 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 6 | Churn Cumulative: 5725 | Contributors (this commit): 34 | Commits (past 90d): 6 | Contributors (cumulative): 56 | DMM Complexity: None\n\nDIFF:\n@@ -558,7 +558,7 @@ class Flask(Scaffold):\n         static_host: t.Optional[str] = None,\n         host_matching: bool = False,\n         subdomain_matching: bool = False,\n-        template_folder: t.Optional[str] = \"templates\",\n+        template_folder: t.Optional[t.Union[str, os.PathLike]] = \"templates\",\n         instance_path: t.Optional[str] = None,\n         instance_relative_config: bool = False,\n         root_path: t.Optional[str] = None,\n\n@@ -250,7 +250,7 @@ class Blueprint(Scaffold):\n         import_name: str,\n         static_folder: t.Optional[t.Union[str, os.PathLike]] = None,\n         static_url_path: t.Optional[str] = None,\n-        template_folder: t.Optional[str] = None,\n+        template_folder: t.Optional[t.Union[str, os.PathLike]] = None,\n         url_prefix: t.Optional[str] = None,\n         subdomain: t.Optional[str] = None,\n         url_defaults: t.Optional[dict] = None,\n\n@@ -93,7 +93,7 @@ class Scaffold:\n         import_name: str,\n         static_folder: t.Optional[t.Union[str, os.PathLike]] = None,\n         static_url_path: t.Optional[str] = None,\n-        template_folder: t.Optional[str] = None,\n+        template_folder: t.Optional[t.Union[str, os.PathLike]] = None,\n         root_path: t.Optional[str] = None,\n     ):\n         #: The name of the package or module that this object belongs\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#79032ca5f1c4747e5aeaa193bdeb2e4eae410ea6", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 4 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 5 | Churn Cumulative: 2736 | Contributors (this commit): 27 | Commits (past 90d): 10 | Contributors (cumulative): 27 | DMM Complexity: 1.0\n\nDIFF:\n@@ -961,11 +961,14 @@ class Flask(Scaffold):\n         \"\"\"Returns ``True`` if autoescaping should be active for the given\n         template name. If no template name is given, returns `True`.\n \n+        .. versionchanged:: 2.2\n+            Autoescaping is now enabled by default for ``.svg`` files.\n+\n         .. versionadded:: 0.5\n         \"\"\"\n         if filename is None:\n             return True\n-        return filename.endswith((\".html\", \".htm\", \".xml\", \".xhtml\"))\n+        return filename.endswith((\".html\", \".htm\", \".xml\", \".xhtml\", \".svg\"))\n \n     def update_template_context(self, context: dict) -> None:\n         \"\"\"Update the template context with some commonly used variables.\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#4bc0e4943dfa637361aec2bb18dc9e1fabeaad12", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 7 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 3 | Methods Changed: 1 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 7 | Churn Cumulative: 1191 | Contributors (this commit): 13 | Commits (past 90d): 13 | Contributors (cumulative): 13 | DMM Complexity: 0.0\n\nDIFF:\n@@ -837,6 +837,11 @@ class SeparatedPathType(click.Path):\n     expose_value=False,\n     help=\"The key file to use when specifying a certificate.\",\n )\n+@click.option(\n+    \"--debug/--no-debug\",\n+    default=None,\n+    help=\"Enable or disable the debug mode.\",\n+)\n @click.option(\n     \"--reload/--no-reload\",\n     default=None,\n@@ -878,6 +883,7 @@ def run_command(\n     info,\n     host,\n     port,\n+    debug,\n     reload,\n     debugger,\n     with_threads,\n@@ -910,6 +916,7 @@ def run_command(\n             # command fails.\n             raise e from None\n \n+    if debug is None:\n         debug = get_debug_flag()\n \n     if reload is None:\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#bd26928fdb2476fca62f0e621e8f2870250ac2bc", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 3 | Lines Deleted: 7 | Files Changed: 1 | Hunks: 4 | Methods Changed: 1 | Complexity Δ (Sum/Max): -1/0 | Churn Δ: 10 | Churn Cumulative: 1201 | Contributors (this commit): 13 | Commits (past 90d): 13 | Contributors (cumulative): 13 | DMM Complexity: 1.0\n\nDIFF:\n@@ -837,11 +837,6 @@ class SeparatedPathType(click.Path):\n     expose_value=False,\n     help=\"The key file to use when specifying a certificate.\",\n )\n-@click.option(\n-    \"--debug/--no-debug\",\n-    default=None,\n-    help=\"Enable or disable the debug mode.\",\n-)\n @click.option(\n     \"--reload/--no-reload\",\n     default=None,\n@@ -883,7 +878,6 @@ def run_command(\n     info,\n     host,\n     port,\n-    debug,\n     reload,\n     debugger,\n     with_threads,\n@@ -916,7 +910,6 @@ def run_command(\n             # command fails.\n             raise e from None\n \n-    if debug is None:\n     debug = get_debug_flag()\n \n     if reload is None:\n@@ -940,6 +933,9 @@ def run_command(\n     )\n \n \n+run_command.params.insert(0, _debug_option)\n+\n+\n @click.command(\"shell\", short_help=\"Run a shell in the app context.\")\n @with_appcontext\n def shell_command() -> None:\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#d7b6c1f6703df405c69da45e7e0ba3d1aed512ce", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 56 | Lines Deleted: 0 | Files Changed: 2 | Hunks: 2 | Methods Changed: 5 | Complexity Δ (Sum/Max): 8/4 | Churn Δ: 56 | Churn Cumulative: 3060 | Contributors (this commit): 25 | Commits (past 90d): 5 | Contributors (cumulative): 29 | DMM Complexity: 0.825\n\nDIFF:\n@@ -453,6 +453,15 @@ class Blueprint(Scaffold):\n         for blueprint, bp_options in self._blueprints:\n             bp_options = bp_options.copy()\n             bp_url_prefix = bp_options.get(\"url_prefix\")\n+            bp_subdomain = bp_options.get(\"subdomain\")\n+\n+            if bp_subdomain is None:\n+                bp_subdomain = blueprint.subdomain\n+\n+            if state.subdomain is not None and bp_subdomain is None:\n+                bp_options[\"subdomain\"] = state.subdomain\n+            elif bp_subdomain is not None:\n+                bp_options[\"subdomain\"] = bp_subdomain\n \n             if bp_url_prefix is None:\n                 bp_url_prefix = blueprint.url_prefix\n\n@@ -950,6 +950,53 @@ def test_nesting_url_prefixes(\n     assert response.status_code == 200\n \n \n+def test_nesting_subdomains(app, client) -> None:\n+    subdomain = \"api\"\n+    parent = flask.Blueprint(\"parent\", __name__)\n+    child = flask.Blueprint(\"child\", __name__)\n+\n+    @child.route(\"/child/\")\n+    def index():\n+        return \"child\"\n+\n+    parent.register_blueprint(child)\n+    app.register_blueprint(parent, subdomain=subdomain)\n+\n+    client.allow_subdomain_redirects = True\n+\n+    domain_name = \"domain.tld\"\n+    app.config[\"SERVER_NAME\"] = domain_name\n+    response = client.get(\"/child/\", base_url=\"http://api.\" + domain_name)\n+\n+    assert response.status_code == 200\n+\n+\n+def test_child_overrides_parent_subdomain(app, client) -> None:\n+    child_subdomain = \"api\"\n+    parent_subdomain = \"parent\"\n+    parent = flask.Blueprint(\"parent\", __name__)\n+    child = flask.Blueprint(\"child\", __name__, subdomain=child_subdomain)\n+\n+    @child.route(\"/\")\n+    def index():\n+        return \"child\"\n+\n+    parent.register_blueprint(child)\n+    app.register_blueprint(parent, subdomain=parent_subdomain)\n+\n+    client.allow_subdomain_redirects = True\n+\n+    domain_name = \"domain.tld\"\n+    app.config[\"SERVER_NAME\"] = domain_name\n+    response = client.get(\"/\", base_url=f\"http://{child_subdomain}.{domain_name}\")\n+\n+    assert response.status_code == 200\n+\n+    response = client.get(\"/\", base_url=f\"http://{parent_subdomain}.{domain_name}\")\n+\n+    assert response.status_code == 404\n+\n+\n def test_unique_blueprint_names(app, client) -> None:\n     bp = flask.Blueprint(\"bp\", __name__)\n     bp2 = flask.Blueprint(\"bp\", __name__)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#cabda5935322d75e7aedb3ee6d59fb7ab62bd674", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 11 | Lines Deleted: 4 | Files Changed: 2 | Hunks: 5 | Methods Changed: 3 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 15 | Churn Cumulative: 3075 | Contributors (this commit): 25 | Commits (past 90d): 6 | Contributors (cumulative): 29 | DMM Complexity: 0.2857142857142857\n\nDIFF:\n@@ -358,6 +358,9 @@ class Blueprint(Scaffold):\n         :param options: Keyword arguments forwarded from\n             :meth:`~Flask.register_blueprint`.\n \n+        .. versionchanged:: 2.3\n+            Nested blueprints now correctly apply subdomains.\n+\n         .. versionchanged:: 2.0.1\n             Nested blueprints are registered with their dotted name.\n             This allows different blueprints with the same name to be\n@@ -458,10 +461,12 @@ class Blueprint(Scaffold):\n             if bp_subdomain is None:\n                 bp_subdomain = blueprint.subdomain\n \n-            if state.subdomain is not None and bp_subdomain is None:\n-                bp_options[\"subdomain\"] = state.subdomain\n+            if state.subdomain is not None and bp_subdomain is not None:\n+                bp_options[\"subdomain\"] = bp_subdomain + \".\" + state.subdomain\n             elif bp_subdomain is not None:\n                 bp_options[\"subdomain\"] = bp_subdomain\n+            elif state.subdomain is not None:\n+                bp_options[\"subdomain\"] = state.subdomain\n \n             if bp_url_prefix is None:\n                 bp_url_prefix = blueprint.url_prefix\n\n@@ -971,7 +971,7 @@ def test_nesting_subdomains(app, client) -> None:\n     assert response.status_code == 200\n \n \n-def test_child_overrides_parent_subdomain(app, client) -> None:\n+def test_child_and_parent_subdomain(app, client) -> None:\n     child_subdomain = \"api\"\n     parent_subdomain = \"parent\"\n     parent = flask.Blueprint(\"parent\", __name__)\n@@ -988,7 +988,9 @@ def test_child_overrides_parent_subdomain(app, client) -> None:\n \n     domain_name = \"domain.tld\"\n     app.config[\"SERVER_NAME\"] = domain_name\n-    response = client.get(\"/\", base_url=f\"http://{child_subdomain}.{domain_name}\")\n+    response = client.get(\n+        \"/\", base_url=f\"http://{child_subdomain}.{parent_subdomain}.{domain_name}\"\n+    )\n \n     assert response.status_code == 200\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#a7487701999fee55bb76a393e72c96ac8e277fcf", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 270 | Contributors (this commit): 4 | Commits (past 90d): 1 | Contributors (cumulative): 4 | DMM Complexity: None\n\nDIFF:\n@@ -92,8 +92,8 @@ class View:\n         :attr:`init_every_request` to ``False``, the same instance will\n         be used for every request.\n \n-        The arguments passed to this method are forwarded to the view\n-        class ``__init__`` method.\n+        Except for ``name``, all other arguments passed to this method\n+        are forwarded to the view class ``__init__`` method.\n \n         .. versionchanged:: 2.2\n             Added the ``init_every_request`` class attribute.\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#6d6d986fc502c2c24fe3db0ec0dbb062d053e068", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 0 | Lines Deleted: 17 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 17 | Churn Cumulative: 911 | Contributors (this commit): 32 | Commits (past 90d): 1 | Contributors (cumulative): 32 | DMM Complexity: None\n\nDIFF:\n@@ -1,17 +0,0 @@\n-from setuptools import setup\n-\n-# Metadata goes in setup.cfg. These are here for GitHub's dependency graph.\n-setup(\n-    name=\"Flask\",\n-    install_requires=[\n-        \"Werkzeug >= 2.2.2\",\n-        \"Jinja2 >= 3.0\",\n-        \"itsdangerous >= 2.0\",\n-        \"click >= 8.0\",\n-        \"importlib-metadata >= 3.6.0; python_version < '3.10'\",\n-    ],\n-    extras_require={\n-        \"async\": [\"asgiref >= 3.2\"],\n-        \"dotenv\": [\"python-dotenv\"],\n-    },\n-)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#8f13f5b6d672f1ba434f9c8ebe2c1b1dd385962e", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 0 | Lines Deleted: 6 | Files Changed: 2 | Hunks: 2 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 6 | Churn Cumulative: 178 | Contributors (this commit): 3 | Commits (past 90d): 2 | Contributors (cumulative): 6 | DMM Complexity: None\n\nDIFF:\n@@ -1,3 +0,0 @@\n-from setuptools import setup\n-\n-setup()\n\n@@ -1,3 +0,0 @@\n-from setuptools import setup\n-\n-setup()\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#261e4a6cf287180b69c4db407791e43ce90e50ad", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 5 | Lines Deleted: 5 | Files Changed: 2 | Hunks: 5 | Methods Changed: 3 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 10 | Churn Cumulative: 5204 | Contributors (this commit): 51 | Commits (past 90d): 2 | Contributors (cumulative): 57 | DMM Complexity: None\n\nDIFF:\n@@ -120,14 +120,14 @@ def test_app_tearing_down_with_unhandled_exception(app, client):\n \n     @app.route(\"/\")\n     def index():\n-        raise Exception(\"dummy\")\n+        raise ValueError(\"dummy\")\n \n-    with pytest.raises(Exception, match=\"dummy\"):\n+    with pytest.raises(ValueError, match=\"dummy\"):\n         with app.app_context():\n             client.get(\"/\")\n \n     assert len(cleanup_stuff) == 1\n-    assert isinstance(cleanup_stuff[0], Exception)\n+    assert isinstance(cleanup_stuff[0], ValueError)\n     assert str(cleanup_stuff[0]) == \"dummy\"\n \n \n\n@@ -1472,11 +1472,11 @@ def test_static_route_with_host_matching():\n         rv = flask.url_for(\"static\", filename=\"index.html\", _external=True)\n         assert rv == \"http://example.com/static/index.html\"\n     # Providing static_host without host_matching=True should error.\n-    with pytest.raises(Exception):\n+    with pytest.raises(AssertionError):\n         flask.Flask(__name__, static_host=\"example.com\")\n     # Providing host_matching=True with static_folder\n     # but without static_host should error.\n-    with pytest.raises(Exception):\n+    with pytest.raises(AssertionError):\n         flask.Flask(__name__, host_matching=True)\n     # Providing host_matching=True without static_host\n     # but with static_folder=None should not error.\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#3a35977d5fbcc424688d32154d250bc0bae918d6", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 3 | Lines Deleted: 3 | Files Changed: 2 | Hunks: 2 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 6 | Churn Cumulative: 16 | Contributors (this commit): 3 | Commits (past 90d): 2 | Contributors (cumulative): 4 | DMM Complexity: None\n\nDIFF:\n@@ -2,4 +2,4 @@ from flask import Flask\n \n app = Flask(__name__)\n \n-from js_example import views  # noqa: F401\n+from js_example import views  # noqa: E402, F401\n\n@@ -2,8 +2,8 @@ from flask import Flask\n \n app = Flask(__name__)\n app.config[\"DEBUG\"] = True\n-from blueprintapp.apps.admin import admin\n-from blueprintapp.apps.frontend import frontend\n+from blueprintapp.apps.admin import admin  # noqa: E402\n+from blueprintapp.apps.frontend import frontend  # noqa: E402\n \n app.register_blueprint(admin)\n app.register_blueprint(frontend)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#99b34f7148b77d4b1311593590629c2bc8e8e772", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 8 | Lines Deleted: 8 | Files Changed: 4 | Hunks: 7 | Methods Changed: 3 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 16 | Churn Cumulative: 5236 | Contributors (this commit): 51 | Commits (past 90d): 8 | Contributors (cumulative): 61 | DMM Complexity: None\n\nDIFF:\n@@ -2,4 +2,4 @@ from flask import Flask\n \n app = Flask(__name__)\n \n-from js_example import views  # noqa: F401\n+from js_example import views  # noqa: E402, F401\n\n@@ -120,14 +120,14 @@ def test_app_tearing_down_with_unhandled_exception(app, client):\n \n     @app.route(\"/\")\n     def index():\n-        raise Exception(\"dummy\")\n+        raise ValueError(\"dummy\")\n \n-    with pytest.raises(Exception, match=\"dummy\"):\n+    with pytest.raises(ValueError, match=\"dummy\"):\n         with app.app_context():\n             client.get(\"/\")\n \n     assert len(cleanup_stuff) == 1\n-    assert isinstance(cleanup_stuff[0], Exception)\n+    assert isinstance(cleanup_stuff[0], ValueError)\n     assert str(cleanup_stuff[0]) == \"dummy\"\n \n \n\n@@ -2,8 +2,8 @@ from flask import Flask\n \n app = Flask(__name__)\n app.config[\"DEBUG\"] = True\n-from blueprintapp.apps.admin import admin\n-from blueprintapp.apps.frontend import frontend\n+from blueprintapp.apps.admin import admin  # noqa: E402\n+from blueprintapp.apps.frontend import frontend  # noqa: E402\n \n app.register_blueprint(admin)\n app.register_blueprint(frontend)\n\n@@ -1472,11 +1472,11 @@ def test_static_route_with_host_matching():\n         rv = flask.url_for(\"static\", filename=\"index.html\", _external=True)\n         assert rv == \"http://example.com/static/index.html\"\n     # Providing static_host without host_matching=True should error.\n-    with pytest.raises(Exception):\n+    with pytest.raises(AssertionError):\n         flask.Flask(__name__, static_host=\"example.com\")\n     # Providing host_matching=True with static_folder\n     # but without static_host should error.\n-    with pytest.raises(Exception):\n+    with pytest.raises(AssertionError):\n         flask.Flask(__name__, host_matching=True)\n     # Providing host_matching=True without static_host\n     # but with static_folder=None should not error.\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#a15da89dbb4be39be09ed7e5b57a22acfb117e6d", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 0 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 1 | Churn Cumulative: 546 | Contributors (this commit): 14 | Commits (past 90d): 1 | Contributors (cumulative): 14 | DMM Complexity: None\n\nDIFF:\n@@ -227,7 +227,6 @@ def test_session_error_pops_context():\n \n \n def test_session_dynamic_cookie_name():\n-\n     # This session interface will use a cookie with a different name if the\n     # requested url ends with the string \"dynamic_cookie\"\n     class PathAwareSessionInterface(SecureCookieSessionInterface):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#3f195248dcd59f8eb08e282b7980dc04b97d7391", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 104 | Lines Deleted: 0 | Files Changed: 4 | Hunks: 4 | Methods Changed: 11 | Complexity Δ (Sum/Max): 14/6 | Churn Δ: 104 | Churn Cumulative: 104 | Contributors (this commit): 1 | Commits (past 90d): 4 | Contributors (cumulative): 4 | DMM Complexity: 1.0\n\nDIFF:\n@@ -0,0 +1,4 @@\n+from task_app import create_app\n+\n+flask_app = create_app()\n+celery_app = flask_app.extensions[\"celery\"]\n\n@@ -0,0 +1,39 @@\n+from celery import Celery\n+from celery import Task\n+from flask import Flask\n+from flask import render_template\n+\n+\n+def create_app() -> Flask:\n+    app = Flask(__name__)\n+    app.config.from_mapping(\n+        CELERY=dict(\n+            broker_url=\"redis://localhost\",\n+            result_backend=\"redis://localhost\",\n+            task_ignore_result=True,\n+        ),\n+    )\n+    app.config.from_prefixed_env()\n+    celery_init_app(app)\n+\n+    @app.route(\"/\")\n+    def index() -> str:\n+        return render_template(\"index.html\")\n+\n+    from . import views\n+\n+    app.register_blueprint(views.bp)\n+    return app\n+\n+\n+def celery_init_app(app: Flask) -> Celery:\n+    class FlaskTask(Task):\n+        def __call__(self, *args: object, **kwargs: object) -> object:\n+            with app.app_context():\n+                return self.run(*args, **kwargs)\n+\n+    celery_app = Celery(app.name, task_cls=FlaskTask)\n+    celery_app.config_from_object(app.config[\"CELERY\"])\n+    celery_app.set_default()\n+    app.extensions[\"celery\"] = celery_app\n+    return celery_app\n\n@@ -0,0 +1,23 @@\n+import time\n+\n+from celery import shared_task\n+from celery import Task\n+\n+\n+@shared_task(ignore_result=False)\n+def add(a: int, b: int) -> int:\n+    return a + b\n+\n+\n+@shared_task()\n+def block() -> None:\n+    time.sleep(5)\n+\n+\n+@shared_task(bind=True, ignore_result=False)\n+def process(self: Task, total: int) -> object:\n+    for i in range(total):\n+        self.update_state(state=\"PROGRESS\", meta={\"current\": i + 1, \"total\": total})\n+        time.sleep(1)\n+\n+    return {\"current\": total, \"total\": total}\n\n@@ -0,0 +1,38 @@\n+from celery.result import AsyncResult\n+from flask import Blueprint\n+from flask import request\n+\n+from . import tasks\n+\n+bp = Blueprint(\"tasks\", __name__, url_prefix=\"/tasks\")\n+\n+\n+@bp.get(\"/result/<id>\")\n+def result(id: str) -> dict[str, object]:\n+    result = AsyncResult(id)\n+    ready = result.ready()\n+    return {\n+        \"ready\": ready,\n+        \"successful\": result.successful() if ready else None,\n+        \"value\": result.get() if ready else result.result,\n+    }\n+\n+\n+@bp.post(\"/add\")\n+def add() -> dict[str, object]:\n+    a = request.form.get(\"a\", type=int)\n+    b = request.form.get(\"b\", type=int)\n+    result = tasks.add.delay(a, b)\n+    return {\"result_id\": result.id}\n+\n+\n+@bp.post(\"/block\")\n+def block() -> dict[str, object]:\n+    result = tasks.block.delay()\n+    return {\"result_id\": result.id}\n+\n+\n+@bp.post(\"/process\")\n+def process() -> dict[str, object]:\n+    result = tasks.process.delay(total=request.form.get(\"total\", type=int))\n+    return {\"result_id\": result.id}\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#ab93222bd6d4ea26e3aa832a0409489530f3f5e0", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 77 | Lines Deleted: 33 | Files Changed: 2 | Hunks: 22 | Methods Changed: 22 | Complexity Δ (Sum/Max): -5/0 | Churn Δ: 110 | Churn Cumulative: 3122 | Contributors (this commit): 20 | Commits (past 90d): 6 | Contributors (cumulative): 30 | DMM Complexity: 0.9318181818181818\n\nDIFF:\n@@ -478,8 +478,11 @@ class Blueprint(Scaffold):\n         provide_automatic_options: t.Optional[bool] = None,\n         **options: t.Any,\n     ) -> None:\n-        \"\"\"Like :meth:`Flask.add_url_rule` but for a blueprint.  The endpoint for\n-        the :func:`url_for` function is prefixed with the name of the blueprint.\n+        \"\"\"Register a URL rule with the blueprint. See :meth:`.Flask.add_url_rule` for\n+        full documentation.\n+\n+        The URL rule is prefixed with the blueprint's URL prefix. The endpoint name,\n+        used with :func:`url_for`, is prefixed with the blueprint's name.\n         \"\"\"\n         if endpoint and \".\" in endpoint:\n             raise ValueError(\"'endpoint' may not contain a dot '.' character.\")\n@@ -501,8 +504,8 @@ class Blueprint(Scaffold):\n     def app_template_filter(\n         self, name: t.Optional[str] = None\n     ) -> t.Callable[[T_template_filter], T_template_filter]:\n-        \"\"\"Register a custom template filter, available application wide.  Like\n-        :meth:`Flask.template_filter` but for a blueprint.\n+        \"\"\"Register a template filter, available in any template rendered by the\n+        application. Equivalent to :meth:`.Flask.template_filter`.\n \n         :param name: the optional name of the filter, otherwise the\n                      function name will be used.\n@@ -518,9 +521,9 @@ class Blueprint(Scaffold):\n     def add_app_template_filter(\n         self, f: ft.TemplateFilterCallable, name: t.Optional[str] = None\n     ) -> None:\n-        \"\"\"Register a custom template filter, available application wide.  Like\n-        :meth:`Flask.add_template_filter` but for a blueprint.  Works exactly\n-        like the :meth:`app_template_filter` decorator.\n+        \"\"\"Register a template filter, available in any template rendered by the\n+        application. Works like the :meth:`app_template_filter` decorator. Equivalent to\n+        :meth:`.Flask.add_template_filter`.\n \n         :param name: the optional name of the filter, otherwise the\n                      function name will be used.\n@@ -535,8 +538,8 @@ class Blueprint(Scaffold):\n     def app_template_test(\n         self, name: t.Optional[str] = None\n     ) -> t.Callable[[T_template_test], T_template_test]:\n-        \"\"\"Register a custom template test, available application wide.  Like\n-        :meth:`Flask.template_test` but for a blueprint.\n+        \"\"\"Register a template test, available in any template rendered by the\n+        application. Equivalent to :meth:`.Flask.template_test`.\n \n         .. versionadded:: 0.10\n \n@@ -554,9 +557,9 @@ class Blueprint(Scaffold):\n     def add_app_template_test(\n         self, f: ft.TemplateTestCallable, name: t.Optional[str] = None\n     ) -> None:\n-        \"\"\"Register a custom template test, available application wide.  Like\n-        :meth:`Flask.add_template_test` but for a blueprint.  Works exactly\n-        like the :meth:`app_template_test` decorator.\n+        \"\"\"Register a template test, available in any template rendered by the\n+        application. Works like the :meth:`app_template_test` decorator. Equivalent to\n+        :meth:`.Flask.add_template_test`.\n \n         .. versionadded:: 0.10\n \n@@ -573,8 +576,8 @@ class Blueprint(Scaffold):\n     def app_template_global(\n         self, name: t.Optional[str] = None\n     ) -> t.Callable[[T_template_global], T_template_global]:\n-        \"\"\"Register a custom template global, available application wide.  Like\n-        :meth:`Flask.template_global` but for a blueprint.\n+        \"\"\"Register a template global, available in any template rendered by the\n+        application. Equivalent to :meth:`.Flask.template_global`.\n \n         .. versionadded:: 0.10\n \n@@ -592,9 +595,9 @@ class Blueprint(Scaffold):\n     def add_app_template_global(\n         self, f: ft.TemplateGlobalCallable, name: t.Optional[str] = None\n     ) -> None:\n-        \"\"\"Register a custom template global, available application wide.  Like\n-        :meth:`Flask.add_template_global` but for a blueprint.  Works exactly\n-        like the :meth:`app_template_global` decorator.\n+        \"\"\"Register a template global, available in any template rendered by the\n+        application. Works like the :meth:`app_template_global` decorator. Equivalent to\n+        :meth:`.Flask.add_template_global`.\n \n         .. versionadded:: 0.10\n \n@@ -609,8 +612,8 @@ class Blueprint(Scaffold):\n \n     @setupmethod\n     def before_app_request(self, f: T_before_request) -> T_before_request:\n-        \"\"\"Like :meth:`Flask.before_request`.  Such a function is executed\n-        before each request, even if outside of a blueprint.\n+        \"\"\"Like :meth:`before_request`, but before every request, not only those handled\n+        by the blueprint. Equivalent to :meth:`.Flask.before_request`.\n         \"\"\"\n         self.record_once(\n             lambda s: s.app.before_request_funcs.setdefault(None, []).append(f)\n@@ -621,8 +624,8 @@ class Blueprint(Scaffold):\n     def before_app_first_request(\n         self, f: T_before_first_request\n     ) -> T_before_first_request:\n-        \"\"\"Like :meth:`Flask.before_first_request`.  Such a function is\n-        executed before the first request to the application.\n+        \"\"\"Register a function to run before the first request to the application is\n+        handled by the worker. Equivalent to :meth:`.Flask.before_first_request`.\n \n         .. deprecated:: 2.2\n             Will be removed in Flask 2.3. Run setup code when creating\n@@ -642,8 +645,8 @@ class Blueprint(Scaffold):\n \n     @setupmethod\n     def after_app_request(self, f: T_after_request) -> T_after_request:\n-        \"\"\"Like :meth:`Flask.after_request` but for a blueprint.  Such a function\n-        is executed after each request, even if outside of the blueprint.\n+        \"\"\"Like :meth:`after_request`, but after every request, not only those handled\n+        by the blueprint. Equivalent to :meth:`.Flask.after_request`.\n         \"\"\"\n         self.record_once(\n             lambda s: s.app.after_request_funcs.setdefault(None, []).append(f)\n@@ -652,9 +655,8 @@ class Blueprint(Scaffold):\n \n     @setupmethod\n     def teardown_app_request(self, f: T_teardown) -> T_teardown:\n-        \"\"\"Like :meth:`Flask.teardown_request` but for a blueprint.  Such a\n-        function is executed when tearing down each request, even if outside of\n-        the blueprint.\n+        \"\"\"Like :meth:`teardown_request`, but after every request, not only those\n+        handled by the blueprint. Equivalent to :meth:`.Flask.teardown_request`.\n         \"\"\"\n         self.record_once(\n             lambda s: s.app.teardown_request_funcs.setdefault(None, []).append(f)\n@@ -665,8 +667,8 @@ class Blueprint(Scaffold):\n     def app_context_processor(\n         self, f: T_template_context_processor\n     ) -> T_template_context_processor:\n-        \"\"\"Like :meth:`Flask.context_processor` but for a blueprint.  Such a\n-        function is executed each request, even if outside of the blueprint.\n+        \"\"\"Like :meth:`context_processor`, but for templates rendered by every view, not\n+        only by the blueprint. Equivalent to :meth:`.Flask.context_processor`.\n         \"\"\"\n         self.record_once(\n             lambda s: s.app.template_context_processors.setdefault(None, []).append(f)\n@@ -677,8 +679,8 @@ class Blueprint(Scaffold):\n     def app_errorhandler(\n         self, code: t.Union[t.Type[Exception], int]\n     ) -> t.Callable[[T_error_handler], T_error_handler]:\n-        \"\"\"Like :meth:`Flask.errorhandler` but for a blueprint.  This\n-        handler is used for all requests, even if outside of the blueprint.\n+        \"\"\"Like :meth:`errorhandler`, but for every request, not only those handled by\n+        the blueprint. Equivalent to :meth:`.Flask.errorhandler`.\n         \"\"\"\n \n         def decorator(f: T_error_handler) -> T_error_handler:\n@@ -691,7 +693,9 @@ class Blueprint(Scaffold):\n     def app_url_value_preprocessor(\n         self, f: T_url_value_preprocessor\n     ) -> T_url_value_preprocessor:\n-        \"\"\"Same as :meth:`url_value_preprocessor` but application wide.\"\"\"\n+        \"\"\"Like :meth:`url_value_preprocessor`, but for every request, not only those\n+        handled by the blueprint. Equivalent to :meth:`.Flask.url_value_preprocessor`.\n+        \"\"\"\n         self.record_once(\n             lambda s: s.app.url_value_preprocessors.setdefault(None, []).append(f)\n         )\n@@ -699,7 +703,9 @@ class Blueprint(Scaffold):\n \n     @setupmethod\n     def app_url_defaults(self, f: T_url_defaults) -> T_url_defaults:\n-        \"\"\"Same as :meth:`url_defaults` but application wide.\"\"\"\n+        \"\"\"Like :meth:`url_defaults`, but for every request, not only those handled by\n+        the blueprint. Equivalent to :meth:`.Flask.url_defaults`.\n+        \"\"\"\n         self.record_once(\n             lambda s: s.app.url_default_functions.setdefault(None, []).append(f)\n         )\n\n@@ -561,6 +561,11 @@ class Scaffold:\n         a non-``None`` value, the value is handled as if it was the\n         return value from the view, and further request handling is\n         stopped.\n+\n+        This is available on both app and blueprint objects. When used on an app, this\n+        executes before every request. When used on a blueprint, this executes before\n+        every request that the blueprint handles. To register with a blueprint and\n+        execute before every request, use :meth:`.Blueprint.before_app_request`.\n         \"\"\"\n         self.before_request_funcs.setdefault(None, []).append(f)\n         return f\n@@ -577,6 +582,11 @@ class Scaffold:\n         ``after_request`` functions will not be called. Therefore, this\n         should not be used for actions that must execute, such as to\n         close resources. Use :meth:`teardown_request` for that.\n+\n+        This is available on both app and blueprint objects. When used on an app, this\n+        executes after every request. When used on a blueprint, this executes after\n+        every request that the blueprint handles. To register with a blueprint and\n+        execute after every request, use :meth:`.Blueprint.after_app_request`.\n         \"\"\"\n         self.after_request_funcs.setdefault(None, []).append(f)\n         return f\n@@ -606,6 +616,11 @@ class Scaffold:\n         ``try``/``except`` block and log any errors.\n \n         The return values of teardown functions are ignored.\n+\n+        This is available on both app and blueprint objects. When used on an app, this\n+        executes after every request. When used on a blueprint, this executes after\n+        every request that the blueprint handles. To register with a blueprint and\n+        execute after every request, use :meth:`.Blueprint.teardown_app_request`.\n         \"\"\"\n         self.teardown_request_funcs.setdefault(None, []).append(f)\n         return f\n@@ -615,7 +630,15 @@ class Scaffold:\n         self,\n         f: T_template_context_processor,\n     ) -> T_template_context_processor:\n-        \"\"\"Registers a template context processor function.\"\"\"\n+        \"\"\"Registers a template context processor function. These functions run before\n+        rendering a template. The keys of the returned dict are added as variables\n+        available in the template.\n+\n+        This is available on both app and blueprint objects. When used on an app, this\n+        is called for every rendered template. When used on a blueprint, this is called\n+        for templates rendered from the blueprint's views. To register with a blueprint\n+        and affect every template, use :meth:`.Blueprint.app_context_processor`.\n+        \"\"\"\n         self.template_context_processors[None].append(f)\n         return f\n \n@@ -635,6 +658,11 @@ class Scaffold:\n \n         The function is passed the endpoint name and values dict. The return\n         value is ignored.\n+\n+        This is available on both app and blueprint objects. When used on an app, this\n+        is called for every request. When used on a blueprint, this is called for\n+        requests that the blueprint handles. To register with a blueprint and affect\n+        every request, use :meth:`.Blueprint.app_url_value_preprocessor`.\n         \"\"\"\n         self.url_value_preprocessors[None].append(f)\n         return f\n@@ -644,6 +672,11 @@ class Scaffold:\n         \"\"\"Callback function for URL defaults for all view functions of the\n         application.  It's called with the endpoint and values and should\n         update the values passed in place.\n+\n+        This is available on both app and blueprint objects. When used on an app, this\n+        is called for every request. When used on a blueprint, this is called for\n+        requests that the blueprint handles. To register with a blueprint and affect\n+        every request, use :meth:`.Blueprint.app_url_defaults`.\n         \"\"\"\n         self.url_default_functions[None].append(f)\n         return f\n@@ -667,6 +700,11 @@ class Scaffold:\n             def special_exception_handler(error):\n                 return 'Database connection failed', 500\n \n+        This is available on both app and blueprint objects. When used on an app, this\n+        can handle errors from every request. When used on a blueprint, this can handle\n+        errors from requests that the blueprint handles. To register with a blueprint\n+        and affect every request, use :meth:`.Blueprint.app_errorhandler`.\n+\n         .. versionadded:: 0.7\n             Use :meth:`register_error_handler` instead of modifying\n             :attr:`error_handler_spec` directly, for application wide error\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
