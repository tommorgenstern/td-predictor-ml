{"custom_id": "requests#9eaee76c33b5ffb82aa71ed7f3e81013480d06c8", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 375 | Contributors (this commit): 3 | Commits (past 90d): 8 | Contributors (cumulative): 3 | DMM Complexity: None\n\nDIFF:\n@@ -15,8 +15,8 @@ requests\n \"\"\"\n \n __title__ = 'requests'\n-__version__ = '0.13.7'\n-__build__ = 0x001307\n+__version__ = '0.13.8'\n+__build__ = 0x001308\n __author__ = 'Kenneth Reitz'\n __license__ = 'ISC'\n __copyright__ = 'Copyright 2012 Kenneth Reitz'\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#f18733d2be4a9c3d0d3ceea31be9e191c05f21d6", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 11 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 3 | Methods Changed: 1 | Complexity Δ (Sum/Max): 2/2 | Churn Δ: 13 | Churn Cumulative: 1006 | Contributors (this commit): 19 | Commits (past 90d): 6 | Contributors (cumulative): 19 | DMM Complexity: 0.0\n\nDIFF:\n@@ -34,14 +34,23 @@ def merge_kwargs(local_kwarg, default_kwarg):\n     if local_kwarg is None:\n         return default_kwarg\n \n+    kwargs = default_kwarg\n+    # If default_kwargs is a list rather than a dictionary attempt to convert\n+    # to dictionary.  If the check fails, return local_kwargs.\n+    if isinstance(default_kwarg, list):\n+        try:\n+            kwargs = dict(kwargs)\n+        except ValueError:\n+            return local_kwarg\n+\n     # Bypass if not a dictionary (e.g. timeout)\n-    if not hasattr(default_kwarg, 'items'):\n+    if not hasattr(kwargs, 'items'):\n         return local_kwarg\n \n     local_kwarg = to_key_val_list(local_kwarg)\n \n     # Update new values.\n-    kwargs = default_kwarg.copy()\n+    kwargs = kwargs.copy()\n     kwargs.update(local_kwarg)\n \n     # Remove keys that are set to None.\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#b781acc7ab34d1ace2200e52e434ad1b54e54eb6", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 10 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 10 | Churn Cumulative: 1014 | Contributors (this commit): 20 | Commits (past 90d): 30 | Contributors (cumulative): 20 | DMM Complexity: 1.0\n\nDIFF:\n@@ -1113,5 +1113,15 @@ class RequestsTestSuite(TestSetup, TestBaseMixin, unittest.TestCase):\n         Requests.exceptions.InvalidURL instead of UnicodeError.\"\"\"\n         self.assertRaises(InvalidURL, get, 'http://.google.com/')\n \n+    def test_none_vals_in_data_are_deleted(self):\n+        \"\"\"Test that keys with None as the value are removed instead of\n+        being posted.\"\"\"\n+        data = {'key1': 'value1', 'key2': None}\n+        r = post(httpbin('post'), data=data)\n+        vals = r.json['form']\n+        self.assertEqual(vals['key1'], 'value1')\n+        # The 'key2' key should not have been sent.\n+        self.assertTrue(vals.get('key2') is None)\n+\n if __name__ == '__main__':\n     unittest.main()\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#751e7a0a66bc9f57923b8ae039bf2f467e106c60", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 1 | Churn Cumulative: 5674 | Contributors (this commit): 80 | Commits (past 90d): 45 | Contributors (cumulative): 80 | DMM Complexity: 0.0\n\nDIFF:\n@@ -330,6 +330,7 @@ class Request(object):\n             result = []\n             for k, vs in to_key_val_list(data):\n                 for v in isinstance(vs, list) and vs or [vs]:\n+                    if v is not None:\n                         result.append(\n                             (k.encode('utf-8') if isinstance(k, str) else k,\n                              v.encode('utf-8') if isinstance(v, str) else v))\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#217a9d50cd1cceba3455d3d4ffdf08af736e51c8", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 0 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): -1/0 | Churn Δ: 1 | Churn Cumulative: 1015 | Contributors (this commit): 21 | Commits (past 90d): 31 | Contributors (cumulative): 21 | DMM Complexity: None\n\nDIFF:\n@@ -8,7 +8,6 @@ import sys\n import os\n sys.path.insert(0, os.path.abspath('..'))\n import json\n-import os\n import unittest\n import pickle\n import tempfile\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#f65b790e9dcf688ac68024044a60d63004b65cda", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 5 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 7 | Churn Cumulative: 737 | Contributors (this commit): 13 | Commits (past 90d): 10 | Contributors (cumulative): 13 | DMM Complexity: 0.0\n\nDIFF:\n@@ -78,8 +78,11 @@ class OAuth1(AuthBase):\n         # extract_params will not give params unless the body is a properly\n         # formatted string, a dictionary or a list of 2-tuples.\n         decoded_body = extract_params(r.data)\n-        if (contenttype is None or contenttype.lower() == \"application/x-www-form-urlencoded\")\\\n-            and decoded_body != None:\n+\n+        _ct = (contenttype is None)\n+        _ct = _ct or contenttype.lower() == CONTENT_TYPE_FORM_URLENCODED\n+\n+        if _ct and decoded_body != None:\n             # extract_params can only check the present r.data and does not know\n             # of r.files, thus an extra check is performed. We know that\n             # if files are present the request will not have\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#94869e720e4ab808a4f5d23de773b393dc770eb6", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 379 | Contributors (this commit): 3 | Commits (past 90d): 9 | Contributors (cumulative): 3 | DMM Complexity: None\n\nDIFF:\n@@ -15,8 +15,8 @@ requests\n \"\"\"\n \n __title__ = 'requests'\n-__version__ = '0.13.8'\n-__build__ = 0x001308\n+__version__ = '0.13.9'\n+__build__ = 0x001309\n __author__ = 'Kenneth Reitz'\n __license__ = 'ISC'\n __copyright__ = 'Copyright 2012 Kenneth Reitz'\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#fc9b8a02148dd3b41c0323f868d8664e70c49468", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 3 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 3 | Churn Cumulative: 129 | Contributors (this commit): 7 | Commits (past 90d): 6 | Contributors (cumulative): 7 | DMM Complexity: None\n\nDIFF:\n@@ -89,6 +89,9 @@ if is_py2:\n     import cookielib\n     from Cookie import Morsel\n     from StringIO import StringIO\n+    try:\n+        import cchardet as chardet\n+    except ImportError:\n         from .packages import chardet\n \n     builtin_str = str\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#913ef867be5b918aebbbf491e879116963a4fa29", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 7 | Lines Deleted: 5 | Files Changed: 1 | Hunks: 5 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 12 | Churn Cumulative: 899 | Contributors (this commit): 2 | Commits (past 90d): 2 | Contributors (cumulative): 2 | DMM Complexity: None\n\nDIFF:\n@@ -17,6 +17,8 @@ from oauthlib.common import Request, urlencode, generate_nonce\n from oauthlib.common import generate_timestamp\n from . import parameters, signature, utils\n \n+logger = logging.getLogger(__name__)\n+\n SIGNATURE_HMAC = u\"HMAC-SHA1\"\n SIGNATURE_RSA = u\"RSA-SHA1\"\n SIGNATURE_PLAINTEXT = u\"PLAINTEXT\"\n@@ -66,17 +68,17 @@ class Client(object):\n             uri_query=urlparse.urlparse(uri).query,\n             body=body,\n             headers=headers)\n-        logging.debug(\"Collected params: {0}\".format(collected_params))\n+        logger.debug(\"Collected params: {0}\".format(collected_params))\n \n         normalized_params = signature.normalize_parameters(collected_params)\n         normalized_uri = signature.normalize_base_string_uri(request.uri)\n-        logging.debug(\"Normalized params: {0}\".format(normalized_params))\n-        logging.debug(\"Normalized URI: {0}\".format(normalized_uri))\n+        logger.debug(\"Normalized params: {0}\".format(normalized_params))\n+        logger.debug(\"Normalized URI: {0}\".format(normalized_uri))\n \n         base_string = signature.construct_base_string(request.http_method,\n             normalized_uri, normalized_params)\n \n-        logging.debug(\"Base signing string: {0}\".format(base_string))\n+        logger.debug(\"Base signing string: {0}\".format(base_string))\n \n         if self.signature_method == SIGNATURE_HMAC:\n             sig = signature.sign_hmac_sha1(base_string, self.client_secret,\n@@ -87,7 +89,7 @@ class Client(object):\n             sig = signature.sign_plaintext(self.client_secret,\n                 self.resource_owner_secret)\n \n-        logging.debug(\"Signature: {0}\".format(sig))\n+        logger.debug(\"Signature: {0}\".format(sig))\n         return sig\n \n     def get_oauth_params(self):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#f4311269d77dbbfdc1fa84b79146dc8f5eea246e", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 29 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 31 | Churn Cumulative: 410 | Contributors (this commit): 4 | Commits (past 90d): 10 | Contributors (cumulative): 4 | DMM Complexity: None\n\nDIFF:\n@@ -6,8 +6,35 @@\n #          /\n \n \"\"\"\n-requests\n-~~~~~~~~\n+requests HTTP library\n+~~~~~~~~~~~~~~~~~~~~~\n+\n+Requests is an HTTP library, written in Python, for human beings. Basic GET\n+usage:\n+\n+   >>> import requests\n+   >>> r = requests.get('http://python.org')\n+   >>> r.status_code\n+   200\n+   >>> 'Python is a programming language' in r.content\n+   True\n+\n+... or POST:\n+\n+   >>> payload = dict(key1='value1', key2='value2')\n+   >>> r = requests.post(\"http://httpbin.org/post\", data=payload)\n+   >>> print r.text\n+   {\n+     // ...snip... //\n+     \"form\": {\n+       \"key2\": \"value2\",\n+       \"key1\": \"value1\"\n+     },\n+     // ...snip... //\n+   }\n+\n+The other HTTP methods are supported - see `requests.api`. Full documentation\n+is at <http://requests.rtfd.org/>.\n \n :copyright: (c) 2012 by Kenneth Reitz.\n :license: ISC, see LICENSE for more details.\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#8a1d53eb3ac19cabbb85e2bdfae418cd6fa84612", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 11 | Lines Deleted: 10 | Files Changed: 1 | Hunks: 8 | Methods Changed: 1 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 21 | Churn Cumulative: 758 | Contributors (this commit): 13 | Commits (past 90d): 11 | Contributors (cumulative): 13 | DMM Complexity: 0.0\n\nDIFF:\n@@ -33,6 +33,7 @@ except ImportError as exc:\n log = logging.getLogger(__name__)\n \n CONTENT_TYPE_FORM_URLENCODED = 'application/x-www-form-urlencoded'\n+CONTENT_TYPE_MULTI_PART = 'multipart/form-data'\n \n \n def _basic_auth_str(username, password):\n@@ -74,34 +75,34 @@ class OAuth1(AuthBase):\n         Parameters may be included from the body if the content-type is\n         urlencoded, if no content type is set an educated guess is made.\n         \"\"\"\n-        contenttype = r.headers.get('Content-Type', None)\n+        # split(\";\") because Content-Type may be \"multipart/form-data; boundary=xxxxx\"\n+        contenttype = r.headers.get('Content-Type', '').split(\";\")[0].lower()\n         # extract_params will not give params unless the body is a properly\n         # formatted string, a dictionary or a list of 2-tuples.\n         decoded_body = extract_params(r.data)\n \n-        _ct = (contenttype is None)\n-        _ct = _ct or contenttype.lower() == CONTENT_TYPE_FORM_URLENCODED\n-\n-        if _ct and decoded_body != None:\n         # extract_params can only check the present r.data and does not know\n         # of r.files, thus an extra check is performed. We know that\n         # if files are present the request will not have\n         # Content-type: x-www-form-urlencoded. We guess it will have\n         # a mimetype of multipart/form-encoded and if this is not the case\n         # we assume the correct header will be set later.\n-            if r.files:\n+        _cond = True\n+        if r.files and contenttype == CONTENT_TYPE_MULTI_PART:\n             # Omit body data in the signing and since it will always\n             # be empty (cant add paras to body if multipart) and we wish\n             # to preserve body.\n-                r.headers['Content-Type'] = 'multipart/form-encoded'\n+            r.headers['Content-Type'] = CONTENT_TYPE_MULTI_PART\n             r.url, r.headers, _ = self.client.sign(\n                 unicode(r.full_url), unicode(r.method), None, r.headers)\n-            else:\n+        elif decoded_body != None and contenttype in (CONTENT_TYPE_FORM_URLENCODED, ''):\n             # Normal signing\n-                r.headers['Content-Type'] = 'application/x-www-form-urlencoded'\n+            r.headers['Content-Type'] = CONTENT_TYPE_FORM_URLENCODED\n             r.url, r.headers, r.data = self.client.sign(\n                 unicode(r.full_url), unicode(r.method), r.data, r.headers)\n-\n+        else:\n+            _cond = False\n+        if _cond:\n             # Both flows add params to the URL by using r.full_url,\n             # so this prevents adding it again later\n             r.params = {}\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#46ff4b386281f619506c13f8a6548ecd3e4d3559", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 3 | Churn Cumulative: 761 | Contributors (this commit): 13 | Commits (past 90d): 12 | Contributors (cumulative): 13 | DMM Complexity: 1.0\n\nDIFF:\n@@ -85,14 +85,13 @@ class OAuth1(AuthBase):\n         # of r.files, thus an extra check is performed. We know that\n         # if files are present the request will not have\n         # Content-type: x-www-form-urlencoded. We guess it will have\n-        # a mimetype of multipart/form-encoded and if this is not the case\n+        # a mimetype of multipart/form-data and if this is not the case\n         # we assume the correct header will be set later.\n         _cond = True\n         if r.files and contenttype == CONTENT_TYPE_MULTI_PART:\n             # Omit body data in the signing and since it will always\n             # be empty (cant add paras to body if multipart) and we wish\n             # to preserve body.\n-            r.headers['Content-Type'] = CONTENT_TYPE_MULTI_PART\n             r.url, r.headers, _ = self.client.sign(\n                 unicode(r.full_url), unicode(r.method), None, r.headers)\n         elif decoded_body != None and contenttype in (CONTENT_TYPE_FORM_URLENCODED, ''):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#aded42f23247e86495654ddd85ae9e000bbe9c1e", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 1 | Churn Cumulative: 762 | Contributors (this commit): 13 | Commits (past 90d): 13 | Contributors (cumulative): 13 | DMM Complexity: 0.0\n\nDIFF:\n@@ -96,6 +96,7 @@ class OAuth1(AuthBase):\n                 unicode(r.full_url), unicode(r.method), None, r.headers)\n         elif decoded_body != None and contenttype in (CONTENT_TYPE_FORM_URLENCODED, ''):\n             # Normal signing\n+            if not contenttype:\n                 r.headers['Content-Type'] = CONTENT_TYPE_FORM_URLENCODED\n             r.url, r.headers, r.data = self.client.sign(\n                 unicode(r.full_url), unicode(r.method), r.data, r.headers)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#babac7368b9aa34fd1f0e5d29d4f80c2006ad614", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 3 | Lines Deleted: 3 | Files Changed: 1 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 6 | Churn Cumulative: 768 | Contributors (this commit): 13 | Commits (past 90d): 14 | Contributors (cumulative): 13 | DMM Complexity: None\n\nDIFF:\n@@ -87,7 +87,7 @@ class OAuth1(AuthBase):\n         # Content-type: x-www-form-urlencoded. We guess it will have\n         # a mimetype of multipart/form-data and if this is not the case\n         # we assume the correct header will be set later.\n-        _cond = True\n+        _oauth_signed = True\n         if r.files and contenttype == CONTENT_TYPE_MULTI_PART:\n             # Omit body data in the signing and since it will always\n             # be empty (cant add paras to body if multipart) and we wish\n@@ -101,8 +101,8 @@ class OAuth1(AuthBase):\n             r.url, r.headers, r.data = self.client.sign(\n                 unicode(r.full_url), unicode(r.method), r.data, r.headers)\n         else:\n-            _cond = False\n-        if _cond:\n+            _oauth_signed = False\n+        if _oauth_signed:\n             # Both flows add params to the URL by using r.full_url,\n             # so this prevents adding it again later\n             r.params = {}\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#06d9faedc662a3705af0349e12ea27e2b4bbf640", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 15 | Lines Deleted: 15 | Files Changed: 1 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 30 | Churn Cumulative: 5704 | Contributors (this commit): 81 | Commits (past 90d): 43 | Contributors (cumulative): 81 | DMM Complexity: None\n\nDIFF:\n@@ -499,6 +499,21 @@ class Request(object):\n                 datetime.now().isoformat(), self.method, url\n             ))\n \n+        # Use .netrc auth if none was provided.\n+        if not self.auth and self.config.get('trust_env'):\n+            self.auth = get_netrc_auth(url)\n+\n+        if self.auth:\n+            if isinstance(self.auth, tuple) and len(self.auth) == 2:\n+                # special-case basic HTTP auth\n+                self.auth = HTTPBasicAuth(*self.auth)\n+\n+            # Allow auth to make its changes.\n+            r = self.auth(self)\n+\n+            # Update self to reflect the auth changes.\n+            self.__dict__.update(r.__dict__)\n+\n         # Nottin' on you.\n         body = None\n         content_type = None\n@@ -519,21 +534,6 @@ class Request(object):\n         if (content_type) and (not 'content-type' in self.headers):\n             self.headers['Content-Type'] = content_type\n \n-        # Use .netrc auth if none was provided.\n-        if not self.auth and self.config.get('trust_env'):\n-            self.auth = get_netrc_auth(url)\n-\n-        if self.auth:\n-            if isinstance(self.auth, tuple) and len(self.auth) == 2:\n-                # special-case basic HTTP auth\n-                self.auth = HTTPBasicAuth(*self.auth)\n-\n-            # Allow auth to make its changes.\n-            r = self.auth(self)\n-\n-            # Update self to reflect the auth changes.\n-            self.__dict__.update(r.__dict__)\n-\n         _p = urlparse(url)\n         no_proxy = filter(lambda x: x.strip(), self.proxies.get('no', '').split(','))\n         proxy = self.proxies.get(_p.scheme)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#77cf9951656c84a02213a23d384f6c11327cdb74", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 27 | Lines Deleted: 4 | Files Changed: 3 | Hunks: 4 | Methods Changed: 3 | Complexity Δ (Sum/Max): 6/4 | Churn Δ: 31 | Churn Cumulative: 8224 | Contributors (this commit): 92 | Commits (past 90d): 91 | Contributors (cumulative): 130 | DMM Complexity: 1.0\n\nDIFF:\n@@ -31,7 +31,7 @@ from .exceptions import (\n from .utils import (\n     get_encoding_from_headers, stream_untransfer, guess_filename, requote_uri,\n     stream_decode_response_unicode, get_netrc_auth, get_environ_proxies,\n-    to_key_val_list, DEFAULT_CA_BUNDLE_PATH, parse_header_links)\n+    to_key_val_list, DEFAULT_CA_BUNDLE_PATH, parse_header_links, iter_slices)\n from .compat import (\n     cookielib, urlparse, urlunparse, urljoin, urlsplit, urlencode, str, bytes,\n     StringIO, is_py2, chardet, json, builtin_str, numeric_types)\n@@ -730,9 +730,8 @@ class Response(object):\n         length of each item returned as decoding can take place.\n         \"\"\"\n         if self._content_consumed:\n-            raise RuntimeError(\n-                'The content for this response was already consumed'\n-            )\n+            # simulate reading small chunks of the content\n+            return iter_slices(self._content, chunk_size)\n \n         def generate():\n             while 1:\n\n@@ -360,6 +360,12 @@ def stream_decode_response_unicode(iterator, r):\n     if rv:\n         yield rv\n \n+def iter_slices(string, slice_length):\n+    \"\"\"Iterate over slices of a string.\"\"\"\n+    pos = 0\n+    while pos < len(string):\n+        yield string[pos:pos+slice_length]\n+        pos += slice_length\n \n def get_unicode_from_response(r):\n     \"\"\"Returns the requested content back in unicode.\n\n@@ -924,6 +924,24 @@ class RequestsTestSuite(TestSetup, TestBaseMixin, unittest.TestCase):\n         joined = lines[0] + '\\n' + lines[1] + '\\r\\n' + lines[2]\n         self.assertEqual(joined, quote)\n \n+    def test_permissive_iter_content(self):\n+        \"\"\"Test that iter_content and iter_lines work even after the body has been fetched.\"\"\"\n+        r = get(httpbin('stream', '10'), prefetch=True)\n+        assert r._content_consumed\n+        # iter_lines should still work without crashing\n+        self.assertEqual(len(list(r.iter_lines())), 10)\n+\n+        # iter_content should return a one-item iterator over the whole content\n+        iter_content_list = list(r.iter_content(chunk_size=1))\n+        self.assertTrue(all(len(item) == 1 for item in iter_content_list))\n+        # when joined, it should be exactly the original content\n+        self.assertEqual(bytes().join(iter_content_list), r.content)\n+\n+        # test different chunk sizes:\n+        for chunk_size in range(2, 20):\n+            self.assertEqual(bytes().join(r.iter_content(chunk_size=chunk_size)), r.content)\n+\n+\n     # def test_safe_mode(self):\n \n     #     safe = requests.session(config=dict(safe_mode=True))\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#a69cf7e71cc1294fb93cb2d4e7655fab08658dc5", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 5 | Lines Deleted: 5 | Files Changed: 1 | Hunks: 4 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 10 | Churn Cumulative: 420 | Contributors (this commit): 4 | Commits (past 90d): 10 | Contributors (cumulative): 4 | DMM Complexity: None\n\nDIFF:\n@@ -25,16 +25,16 @@ usage:\n    >>> r = requests.post(\"http://httpbin.org/post\", data=payload)\n    >>> print r.text\n    {\n-     // ...snip... //\n+     ...\n      \"form\": {\n        \"key2\": \"value2\",\n        \"key1\": \"value1\"\n      },\n-     // ...snip... //\n+     ...\n    }\n \n The other HTTP methods are supported - see `requests.api`. Full documentation\n-is at <http://requests.rtfd.org/>.\n+is at <http://python-requests.org>.\n \n :copyright: (c) 2012 by Kenneth Reitz.\n :license: ISC, see LICENSE for more details.\n@@ -42,8 +42,8 @@ is at <http://requests.rtfd.org/>.\n \"\"\"\n \n __title__ = 'requests'\n-__version__ = '0.13.9'\n-__build__ = 0x001309\n+__version__ = '0.14.0'\n+__build__ = 0x001400\n __author__ = 'Kenneth Reitz'\n __license__ = 'ISC'\n __copyright__ = 'Copyright 2012 Kenneth Reitz'\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#8081d7b15cf893435c19ea1c0d5e4392a60fe18f", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 59 | Lines Deleted: 46 | Files Changed: 5 | Hunks: 23 | Methods Changed: 5 | Complexity Δ (Sum/Max): 0/2 | Churn Δ: 105 | Churn Cumulative: 10033 | Contributors (this commit): 100 | Commits (past 90d): 71 | Contributors (cumulative): 143 | DMM Complexity: 1.0\n\nDIFF:\n@@ -93,6 +93,7 @@ if is_py2:\n         import cchardet as chardet\n     except ImportError:\n         from .packages import chardet\n+    from .packages.urllib3.packages.ordered_dict import OrderedDict\n \n     builtin_str = str\n     bytes = str\n@@ -109,6 +110,7 @@ elif is_py3:\n     from http.cookies import Morsel\n     from io import StringIO\n     from .packages import chardet2 as chardet\n+    from collections import OrderedDict\n \n     builtin_str = str\n     str = str\n\n@@ -34,7 +34,7 @@ from .utils import (\n     to_key_val_list, DEFAULT_CA_BUNDLE_PATH, parse_header_links, iter_slices)\n from .compat import (\n     cookielib, urlparse, urlunparse, urljoin, urlsplit, urlencode, str, bytes,\n-    StringIO, is_py2, chardet, json, builtin_str, numeric_types)\n+    StringIO, is_py2, chardet, json, builtin_str)\n \n REDIRECT_STATI = (codes.moved, codes.found, codes.other, codes.temporary_moved)\n CONTENT_CHUNK_SIZE = 10 * 1024\n\n@@ -15,7 +15,7 @@ from .cookies import cookiejar_from_dict, remove_cookie_by_name\n from .defaults import defaults\n from .models import Request\n from .hooks import dispatch_hook\n-from .utils import header_expand, to_key_val_list\n+from .utils import header_expand, from_key_val_list\n from .packages.urllib3.poolmanager import PoolManager\n \n \n@@ -34,27 +34,19 @@ def merge_kwargs(local_kwarg, default_kwarg):\n     if local_kwarg is None:\n         return default_kwarg\n \n-    kwargs = default_kwarg\n-    # If default_kwargs is a list rather than a dictionary attempt to convert\n-    # to dictionary.  If the check fails, return local_kwargs.\n-    if isinstance(default_kwarg, list):\n-        try:\n-            kwargs = dict(kwargs)\n-        except ValueError:\n-            return local_kwarg\n-\n     # Bypass if not a dictionary (e.g. timeout)\n-    if not hasattr(kwargs, 'items'):\n+    if not hasattr(default_kwarg, 'items'):\n         return local_kwarg\n \n-    local_kwarg = to_key_val_list(local_kwarg)\n+    default_kwarg = from_key_val_list(default_kwarg)\n+    local_kwarg = from_key_val_list(local_kwarg)\n \n     # Update new values.\n-    kwargs = kwargs.copy()\n+    kwargs = default_kwarg.copy()\n     kwargs.update(local_kwarg)\n \n     # Remove keys that are set to None.\n-    for (k, v) in local_kwarg:\n+    for (k, v) in local_kwarg.items():\n         if v is None:\n             del kwargs[k]\n \n@@ -81,14 +73,13 @@ class Session(object):\n         verify=True,\n         cert=None):\n \n-        #self.headers = to_key_val_list(headers or [])\n-        self.headers = headers or {}\n+        self.headers = from_key_val_list(headers or [])\n         self.auth = auth\n         self.timeout = timeout\n-        self.proxies = to_key_val_list(proxies or [])\n-        self.hooks = hooks or {}\n-        self.params = to_key_val_list(params or [])\n-        self.config = config or {}\n+        self.proxies = from_key_val_list(proxies or [])\n+        self.hooks = from_key_val_list(hooks or {})\n+        self.params = from_key_val_list(params or [])\n+        self.config = from_key_val_list(config or {})\n         self.prefetch = prefetch\n         self.verify = verify\n         self.cert = cert\n@@ -171,7 +162,7 @@ class Session(object):\n         data = [] if data is None else data\n         files = [] if files is None else files\n         headers = {} if headers is None else headers\n-        params = [] if params is None else params\n+        params = {} if params is None else params\n         hooks = {} if hooks is None else hooks\n         prefetch = prefetch if prefetch is not None else self.prefetch\n \n@@ -181,25 +172,23 @@ class Session(object):\n \n         # Expand header values.\n         if headers:\n-            #e = [(k, header_expand(v)) for k, v in to_key_val_list(headers)]\n-            #headers = e\n-            for k, v in list(headers.items()) or {}:\n+            for k, v in list(headers.items() or {}):\n                 headers[k] = header_expand(v)\n \n         args = dict(\n             method=method,\n             url=url,\n             data=data,\n-            params=params,\n-            headers=headers,\n+            params=from_key_val_list(params),\n+            headers=from_key_val_list(headers),\n             cookies=cookies,\n             files=files,\n             auth=auth,\n-            hooks=hooks,\n+            hooks=from_key_val_list(hooks),\n             timeout=timeout,\n             allow_redirects=allow_redirects,\n-            proxies=to_key_val_list(proxies),\n-            config=config,\n+            proxies=from_key_val_list(proxies),\n+            config=from_key_val_list(config),\n             prefetch=prefetch,\n             verify=verify,\n             cert=cert,\n\n@@ -8,6 +8,7 @@ Data structures that power Requests.\n \n \"\"\"\n \n+\n class CaseInsensitiveDict(dict):\n     \"\"\"Case-insensitive Dictionary\n \n\n@@ -20,7 +20,7 @@ from netrc import netrc, NetrcParseError\n \n from . import __version__\n from .compat import parse_http_list as _parse_list_header\n-from .compat import quote, urlparse, basestring, bytes, str\n+from .compat import quote, urlparse, basestring, bytes, str, OrderedDict\n from .cookies import RequestsCookieJar, cookiejar_from_dict\n \n _hush_pyflakes = (RequestsCookieJar,)\n@@ -114,28 +114,49 @@ def guess_filename(obj):\n         return name\n \n \n-def to_key_val_list(value):\n+def from_key_val_list(value):\n     \"\"\"Take an object and test to see if it can be represented as a\n-    dictionary. Unless it can not be represented as such, return a list of\n-    tuples, e.g.,:\n+    dictionary. Unless it can not be represented as such, return an\n+    OrderedDict, e.g.,\n \n-    >>> to_key_val_list([('key', 'val')])\n-    [('key', 'val')]\n-    >>> to_key_val_list('string')\n-    ValueError: ...\n-    >>> to_key_val_list({'key': 'val'})\n-    [('key', 'val')]\n+    ::\n+\n+        >>> from_key_val_list([('key', 'val')])\n+        OrderedDict([('key', 'val')])\n+        >>> from_key_val_list('string')\n+        ValueError: need more than 1 value to unpack\n+        >>> from_key_val_list({'key': 'val'})\n+        OrderedDict([('key', 'val')])\n     \"\"\"\n     if value is None:\n         return None\n \n-    try:\n-        dict(value)\n-    except ValueError:\n-        raise ValueError('Unable to encode lists with elements that are not '\n-                '2-tuples.')\n+    if isinstance(value, (str, bytes, bool, int)):\n+        raise ValueError('cannot encode objects that are not 2-tuples')\n \n-    if isinstance(value, dict) or hasattr(value, 'items'):\n+    return OrderedDict(value)\n+\n+\n+def to_key_val_list(value):\n+    \"\"\"Take an object and test to see if it can be represented as a\n+    dictionary. If it can be, return a list of tuples, e.g.,\n+\n+    ::\n+\n+        >>> to_key_val_list([('key', 'val')])\n+        [('key', 'val')]\n+        >>> to_key_val_list({'key': 'val'})\n+        [('key', 'val')]\n+        >>> to_key_val_list('string')\n+        ValueError: cannot encode objects that are not 2-tuples.\n+    \"\"\"\n+    if value is None:\n+        return None\n+\n+    if isinstance(value, (str, bytes, bool, int)):\n+        raise ValueError('cannot encode objects that are not 2-tuples')\n+\n+    if isinstance(value, dict):\n         value = value.items()\n \n     return list(value)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#c73646da0018063f7ddd03514e6cde55e82bb640", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 5 | Lines Deleted: 4 | Files Changed: 1 | Hunks: 2 | Methods Changed: 2 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 9 | Churn Cumulative: 1042 | Contributors (this commit): 21 | Commits (past 90d): 30 | Contributors (cumulative): 21 | DMM Complexity: 1.0\n\nDIFF:\n@@ -1058,9 +1058,9 @@ class RequestsTestSuite(TestSetup, TestBaseMixin, unittest.TestCase):\n     def test_prefetch_redirect_bug(self):\n         \"\"\"Test that prefetch persists across redirections.\"\"\"\n         res = get(httpbin('redirect/2'), prefetch=False)\n-        # prefetch should persist across the redirect; if it doesn't,\n-        # this attempt to iterate will crash because the content has already\n-        # been read.\n+        # prefetch should persist across the redirect;\n+        # the content should not have been consumed\n+        self.assertFalse(res._content_consumed)\n         first_line = next(res.iter_lines())\n         self.assertTrue(first_line.strip().decode('utf-8').startswith('{'))\n \n@@ -1068,7 +1068,8 @@ class RequestsTestSuite(TestSetup, TestBaseMixin, unittest.TestCase):\n         \"\"\"Test that prefetch can be overridden as a kwarg to `send`.\"\"\"\n         req = requests.get(httpbin('get'), return_response=False)\n         req.send(prefetch=False)\n-        # content should not have been prefetched, and iter_lines should succeed\n+        # content should not have been prefetched\n+        self.assertFalse(req.response._content_consumed)\n         first_line = next(req.response.iter_lines())\n         self.assertTrue(first_line.strip().decode('utf-8').startswith('{'))\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#861e63ce8e4a7c4881b3129edea8f23d730cabf1", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 234 | Contributors (this commit): 6 | Commits (past 90d): 5 | Contributors (cumulative): 6 | DMM Complexity: None\n\nDIFF:\n@@ -20,7 +20,7 @@ Configurations:\n :pool_connections: The number of active HTTP connection pools to use.\n :encode_uri: If true, URIs will automatically be percent-encoded.\n :trust_env: If true, the surrouding environment will be trusted (environ, netrc).\n-:param store_cookies: If false, the received cookies as part of the HTTP response would be ignored.\n+:store_cookies: If false, the received cookies as part of the HTTP response would be ignored.\n \n \"\"\"\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#91a9c397466d22c83688ddd851d7f04d73cd22a8", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 3 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 2 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 3 | Churn Cumulative: 331 | Contributors (this commit): 8 | Commits (past 90d): 8 | Contributors (cumulative): 8 | DMM Complexity: None\n\nDIFF:\n@@ -15,6 +15,7 @@ if sys.argv[-1] == 'publish':\n     os.system('python setup.py sdist upload')\n     sys.exit()\n \n+bytecode = os.getenv('PYTHONDONTWRITEBYTECODE', '0')\n os.environ['PYTHONDONTWRITEBYTECODE'] = '1'\n \n packages = [\n@@ -67,3 +68,5 @@ setup(\n         'Programming Language :: Python :: 3.1',\n     ),\n )\n+\n+os.environ['PYTHONDONTWRITEBYTECODE'] = bytecode\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#aed5bf7cc7440ff1676e14e132f9a1064f2694c9", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 2 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 3 | Churn Cumulative: 334 | Contributors (this commit): 8 | Commits (past 90d): 9 | Contributors (cumulative): 8 | DMM Complexity: None\n\nDIFF:\n@@ -15,7 +15,6 @@ if sys.argv[-1] == 'publish':\n     os.system('python setup.py sdist upload')\n     sys.exit()\n \n-bytecode = os.getenv('PYTHONDONTWRITEBYTECODE', '0')\n os.environ['PYTHONDONTWRITEBYTECODE'] = '1'\n \n packages = [\n@@ -69,4 +68,4 @@ setup(\n     ),\n )\n \n-os.environ['PYTHONDONTWRITEBYTECODE'] = bytecode\n+del os.environ['PYTHONDONTWRITEBYTECODE']\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#fc1d0fedea5c400c539b660f7bf8301d855a1d63", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 2 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 5715 | Contributors (this commit): 81 | Commits (past 90d): 43 | Contributors (cumulative): 81 | DMM Complexity: None\n\nDIFF:\n@@ -193,7 +193,7 @@ class Request(object):\n                 response.status_code = getattr(resp, 'status', None)\n \n                 # Make headers case-insensitive.\n-                response.headers = CaseInsensitiveDict(getattr(resp, 'headers', None))\n+                response.headers = CaseInsensitiveDict(getattr(resp, 'headers', {}))\n \n                 # Set encoding.\n                 response.encoding = get_encoding_from_headers(response.headers)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#65c19bc0e0c44da54ff46d2237264800e2f2238f", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 5721 | Contributors (this commit): 82 | Commits (past 90d): 45 | Contributors (cumulative): 82 | DMM Complexity: None\n\nDIFF:\n@@ -111,7 +111,7 @@ class Request(object):\n         # Dictionary mapping protocol to the URL of the proxy (e.g. {'http': 'foo.bar:3128'})\n         self.proxies = dict(proxies or [])\n \n-        for proxy_type,uri_ref in self.proxies.items():\n+        for proxy_type,uri_ref in list(self.proxies.items()):\n             if not uri_ref:\n                 del self.proxies[proxy_type]\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#4dd3d1a1a2534f2996a368ebe26114bf974e15f9", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 37 | Lines Deleted: 1 | Files Changed: 2 | Hunks: 2 | Methods Changed: 5 | Complexity Δ (Sum/Max): 8/7 | Churn Δ: 38 | Churn Cumulative: 6801 | Contributors (this commit): 85 | Commits (past 90d): 74 | Contributors (cumulative): 103 | DMM Complexity: 1.0\n\nDIFF:\n@@ -462,7 +462,9 @@ class Request(object):\n \n     def register_hook(self, event, hook):\n         \"\"\"Properly register a hook.\"\"\"\n-\n+        if isinstance(hook, (list, tuple, set)):\n+            self.hooks[event].extend(hook)\n+        else:\n             self.hooks[event].append(hook)\n \n     def deregister_hook(self, event, hook):\n\n@@ -744,6 +744,40 @@ class RequestsTestSuite(TestSetup, TestBaseMixin, unittest.TestCase):\n             assert 'foo' in response.text\n             assert 'bar' in response.text\n \n+    def test_allow_list_of_hooks_to_register_hook(self):\n+        \"\"\"Issue 785: https://github.com/kennethreitz/requests/issues/785\"\"\"\n+        def add_foo_header(args):\n+            if not args.get('headers'):\n+                args['headers'] = {}\n+\n+            args['headers'].update({\n+                'X-Foo': 'foo'\n+            })\n+\n+            return args\n+\n+        def add_bar_header(args):\n+            if not args.get('headers'):\n+                args['headers'] = {}\n+\n+            args['headers'].update({\n+                'X-Bar': 'bar'\n+            })\n+\n+            return args\n+\n+        def assert_hooks_are_callable(hooks):\n+            for h in hooks['args']:\n+                assert callable(h) is True\n+\n+        hooks = [add_foo_header, add_bar_header]\n+        r = requests.models.Request()\n+        r.register_hook('args', hooks)\n+        assert_hooks_are_callable(r.hooks)\n+\n+        r = requests.models.Request(hooks={'args': hooks})\n+        assert_hooks_are_callable(r.hooks)\n+\n     def test_session_persistent_cookies(self):\n \n         s = requests.session()\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#1b70385d4ae7540084ef82886df3d943733db0d2", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 236 | Contributors (this commit): 6 | Commits (past 90d): 6 | Contributors (cumulative): 6 | DMM Complexity: None\n\nDIFF:\n@@ -32,7 +32,7 @@ defaults = dict()\n \n defaults['base_headers'] = {\n     'User-Agent': default_user_agent(),\n-    'Accept-Encoding': ', '.join(('identity', 'deflate', 'compress', 'gzip')),\n+    'Accept-Encoding': ', '.join(('gzip', 'deflate', 'compress')),\n     'Accept': '*/*'\n }\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#5ce25688e0a88a892d33cdb23ff6e097ff6829d9", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 9 | Files Changed: 1 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): -1/0 | Churn Δ: 10 | Churn Cumulative: 2160 | Contributors (this commit): 2 | Commits (past 90d): 3 | Contributors (cumulative): 2 | DMM Complexity: 0.0\n\nDIFF:\n@@ -96,17 +96,9 @@ class VerifiedHTTPSConnection(HTTPSConnection):\n \n         # Wrap socket using verification with the root certs in\n         # trusted_root_certs\n-        try:\n         self.sock = ssl.wrap_socket(sock, self.key_file, self.cert_file,\n                                     cert_reqs=self.cert_reqs,\n-                                      ca_certs=self.ca_certs,\n-                                      ssl_version=ssl.PROTOCOL_SSLv3)\n-        except ssl.SSLError:\n-          self.sock = ssl.wrap_socket(sock, self.key_file, self.cert_file,\n-                                      cert_reqs=self.cert_reqs,\n-                                      ca_certs=self.ca_certs,\n-                                      ssl_version=ssl.PROTOCOL_SSLv23)\n-\n+                                    ca_certs=self.ca_certs)\n         if self.ca_certs:\n             match_hostname(self.sock.getpeercert(), self.host)\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#b1610df282c67cd87781be166549643e647704ee", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 5 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 5 | Churn Cumulative: 5730 | Contributors (this commit): 83 | Commits (past 90d): 45 | Contributors (cumulative): 83 | DMM Complexity: 0.0\n\nDIFF:\n@@ -834,6 +834,11 @@ class Response(object):\n             #\n             # So we try blindly encoding.\n             content = str(self.content, errors='replace')\n+        except TypeError:\n+            # A TypeError can be raised if encoding is None\n+            #\n+            # So we try blindly encoding.\n+            content = str(self.content, errors='replace')\n \n         return content\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#38aced9f90cdbcdbda1cf402ef759060b08df6de", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 4 | Files Changed: 1 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): -1/0 | Churn Δ: 5 | Churn Cumulative: 5735 | Contributors (this commit): 83 | Commits (past 90d): 46 | Contributors (cumulative): 83 | DMM Complexity: 1.0\n\nDIFF:\n@@ -828,13 +828,10 @@ class Response(object):\n         # Decode unicode from given encoding.\n         try:\n             content = str(self.content, encoding, errors='replace')\n-        except LookupError:\n+        except (LookupError, TypeError):\n             # A LookupError is raised if the encoding was not found which could\n             # indicate a misspelling or similar mistake.\n             #\n-            # So we try blindly encoding.\n-            content = str(self.content, errors='replace')\n-        except TypeError:\n             # A TypeError can be raised if encoding is None\n             #\n             # So we try blindly encoding.\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#992d1182db9fc9deb1c795ce18ca64f56115e524", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 4 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 2/2 | Churn Δ: 4 | Churn Cumulative: 501 | Contributors (this commit): 6 | Commits (past 90d): 2 | Contributors (cumulative): 6 | DMM Complexity: 1.0\n\nDIFF:\n@@ -67,6 +67,10 @@ class MockRequest(object):\n     def get_new_headers(self):\n         return self._new_headers\n \n+    def __getattr__(self, name):\n+        if name == 'unverifiable':\n+            return self.is_unverifiable()\n+\n \n class MockResponse(object):\n     \"\"\"Wraps a `httplib.HTTPMessage` to mimic a `urllib.addinfourl`.\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
