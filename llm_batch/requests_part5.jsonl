{"custom_id": "requests#32f75585adf97ec4bb9c3b39de409deb5c2795e3", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 22 | Lines Deleted: 8 | Files Changed: 1 | Hunks: 8 | Methods Changed: 4 | Complexity Δ (Sum/Max): 3/3 | Churn Δ: 30 | Churn Cumulative: 1749 | Contributors (this commit): 3 | Commits (past 90d): 72 | Contributors (cumulative): 3 | DMM Complexity: 1.0\n\nDIFF:\n@@ -16,6 +16,7 @@ import urllib\n import urllib2\n \n from urllib2 import HTTPError\n+from urlparse import urlparse\n \n from .packages.poster.encode import multipart_encode\n from .packages.poster.streaminghttp import register_openers, get_handlers\n@@ -42,8 +43,7 @@ class _Request(urllib2.Request):\n     setting of HTTP methods.\n     \"\"\"\n \n-    def __init__(self, url, data=None, headers={}, origin_req_host=None,\n-                 unverifiable=False, method=None):\n+    def __init__(self, url, data=None, headers={}, origin_req_host=None, unverifiable=False, method=None):\n         urllib2.Request.__init__(self, url, data, headers, origin_req_host, unverifiable)\n         self.method = method\n \n@@ -63,13 +63,14 @@ class Request(object):\n \n     def __init__(self, url=None, headers=dict(), files=None, method=None,\n                  data=dict(), auth=None, cookiejar=None):\n+        \n         self.url = url\n         self.headers = headers\n         self.files = files\n         self.method = method\n \n         # url encode data if it's a dict\n-        if isinstance(data, dict):\n+        if hasattr(data, 'items'):\n             self.data = urllib.urlencode(data)\n         else:\n             self.data = data\n@@ -133,6 +134,19 @@ class Request(object):\n         self.response.content = resp.read()\n \n \n+    @staticmethod\n+    def _build_url(url, data):\n+        \"\"\"Build URLs.\"\"\"\n+        \n+        if urlparse(url).query:\n+            return '%s&%s' % (url, data)\n+        else:\n+            if data:\n+                return '%s?%s' % (url, data)\n+            else:\n+                return url\n+\n+\n     def send(self, anyway=False):\n         \"\"\"Sends the request. Returns True of successful, false if not.\n         If there was an HTTPError during transmission,\n@@ -147,7 +161,7 @@ class Request(object):\n         success = False\n \n         if self.method in ('GET', 'HEAD', 'DELETE'):\n-            req = _Request((\"%s?%s\" % (self.url, self.data)), method=self.method)\n+            req = _Request(self._build_url(self.url, self.data), method=self.method)\n         else:\n             if self.files:\n                 register_openers()\n@@ -385,11 +399,11 @@ def request(method, url, **kwargs):\n     :param files: (optional) Dictionary of 'filename': file-like-objects for multipart encoding upload.\n     :param auth: (optional) AuthObject to enable Basic HTTP Auth.\n     \"\"\"\n-    data = kwargs.pop('data', {}) or kwargs.pop('params', {})\n+    data = kwargs.get('data', None) or kwargs.get('params', None)\n \n-    r = Request(method=method, url=url, data=data, headers=kwargs.pop('headers', {}),\n-                cookiejar=kwargs.pop('cookies', None), files=kwargs.pop('files', None),\n-                auth=kwargs.pop('auth', auth_manager.get_auth(url)))\n+    r = Request(method=method, url=url, data=data, headers=kwargs.get('headers', {}),\n+                cookiejar=kwargs.get('cookies', None), files=kwargs.get('files', None),\n+                auth=kwargs.get('auth', auth_manager.get_auth(url)))\n     r.send()\n \n     return r.response\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#b3b2b192127b02984e201176a3eda040d480ee8f", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 18 | Lines Deleted: 11 | Files Changed: 2 | Hunks: 7 | Methods Changed: 4 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 29 | Churn Cumulative: 1951 | Contributors (this commit): 3 | Commits (past 90d): 86 | Contributors (cumulative): 5 | DMM Complexity: 0.0\n\nDIFF:\n@@ -165,6 +165,7 @@ class Request(object):\n         else:\n             if self.files:\n                 register_openers()\n+#                self.files\n                 datagen, headers = multipart_encode(self.files)\n                 req = _Request(self.url, data=datagen, headers=headers, method=self.method)\n             else:\n@@ -399,11 +400,11 @@ def request(method, url, **kwargs):\n     :param files: (optional) Dictionary of 'filename': file-like-objects for multipart encoding upload.\n     :param auth: (optional) AuthObject to enable Basic HTTP Auth.\n     \"\"\"\n-    data = kwargs.get('data', None) or kwargs.get('params', None)\n+    data = kwargs.pop('data', dict()) or kwargs.pop('params', dict())\n \n-    r = Request(method=method, url=url, data=data, headers=kwargs.get('headers', {}),\n-                cookiejar=kwargs.get('cookies', None), files=kwargs.get('files', None),\n-                auth=kwargs.get('auth', auth_manager.get_auth(url)))\n+    r = Request(method=method, url=url, data=data, headers=kwargs.pop('headers', {}),\n+                cookiejar=kwargs.pop('cookies', None), files=kwargs.pop('files', None),\n+                auth=kwargs.pop('auth', auth_manager.get_auth(url)))\n     r.send()\n \n     return r.response\n\n@@ -63,14 +63,20 @@ class RequestsTestSuite(unittest.TestCase):\n         requests.auth_manager.empty()\n \n     def test_POSTBIN_GET_POST_FILES(self):\n-        bin = requests.get('http://www.postbin.org/')\n-        self.assertEqual(bin.status_code, 200)\n+        h = {'Content-type': 'application/x-www-form-urlencoded'}\n         \n-        post = requests.post(bin.url, data={'some': 'data'})\n-        self.assertEqual(post.status_code, 200)\n+        bin = requests.post('http://www.postbin.org/', headers=h)\n+        # self.assertEqual(bin.status_code, 200)\n+        \n+        print bin.url\n+        print bin.status_code\n+    \n+        # post = requests.post(bin.url, data={'some': 'data'})\n+        # self.assertEqual(post.status_code, 200)\n+    \n+        # post2 = requests.post(bin.url, files={'some': open('test_requests.py')})\n+        # self.assertEqual(post2.status_code, 200)\n         \n-        post2 = requests.post(bin.url, files={'some': open('test_requests.py')})\n-        self.assertEqual(post2.status_code, 200)\n         \n     def test_POSTBIN_GET_POST_FILES_WITH_PARAMS(self):\n         # TODO: postbin w/ params\n@@ -80,7 +86,7 @@ class RequestsTestSuite(unittest.TestCase):\n         post = requests.post(bin.url, data={'some': 'data'})\n         self.assertEqual(post.status_code, 200)\n     \n-        # post2 = requests.post(bin.url, files={'some': open('test_requests.py')}, data={'some': 'data'})\n+        post2 = requests.post(bin.url, files={'some': open('test_requests.py')}, data={'some': 'data'})\n         # self.assertEqual(post2.status_code, 200)\n \n     def test_nonzero_evaluation(self):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#b252cd84037053bd7675d1ff41c102ce237cd0ae", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 12 | Lines Deleted: 9 | Files Changed: 1 | Hunks: 7 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 21 | Churn Cumulative: 1779 | Contributors (this commit): 3 | Commits (past 90d): 74 | Contributors (cumulative): 3 | DMM Complexity: None\n\nDIFF:\n@@ -68,12 +68,13 @@ class Request(object):\n         self.headers = headers\n         self.files = files\n         self.method = method\n+        self.data = data\n \n         # url encode data if it's a dict\n         if hasattr(data, 'items'):\n-            self.data = urllib.urlencode(data)\n+            self._enc_data = urllib.urlencode(data)\n         else:\n-            self.data = data\n+            self._enc_data = data\n \n         self.response = Response()\n \n@@ -161,18 +162,20 @@ class Request(object):\n         success = False\n \n         if self.method in ('GET', 'HEAD', 'DELETE'):\n-            req = _Request(self._build_url(self.url, self.data), method=self.method)\n+            req = _Request(self._build_url(self.url, self._enc_data), method=self.method)\n         else:\n+\n             if self.files:\n                 register_openers()\n-#                self.files\n-                datagen, headers = multipart_encode(self.files)\n-                req = _Request(self.url, data=datagen, headers=headers, method=self.method)\n-            else:\n-                req = _Request(self.url, method=self.method)\n \n                 if self.data:\n-                    req.data = self.data\n+                    self.files.update(self.data)\n+                    \n+                datagen, headers = multipart_encode(self.files)\n+                req = _Request(self.url, data=datagen, headers=headers, method=self.method)\n+                \n+            else:\n+                req = _Request(self.url, data=self._enc_data, method=self.method)\n \n         if self.headers:\n             req.headers = self.headers\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#839c8cf150be3ebe80cbcb6e67f955405665c9e2", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 12 | Lines Deleted: 18 | Files Changed: 1 | Hunks: 5 | Methods Changed: 2 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 30 | Churn Cumulative: 223 | Contributors (this commit): 2 | Commits (past 90d): 14 | Contributors (cumulative): 2 | DMM Complexity: 1.0\n\nDIFF:\n@@ -63,31 +63,25 @@ class RequestsTestSuite(unittest.TestCase):\n         requests.auth_manager.empty()\n \n     def test_POSTBIN_GET_POST_FILES(self):\n-        h = {'Content-type': 'application/x-www-form-urlencoded'}\n-        \n-        bin = requests.post('http://www.postbin.org/', headers=h)\n-        # self.assertEqual(bin.status_code, 200)\n \n+        bin = requests.post('http://www.postbin.org/')\n         print bin.url\n-        print bin.status_code\n-    \n-        # post = requests.post(bin.url, data={'some': 'data'})\n-        # self.assertEqual(post.status_code, 200)\n-    \n-        # post2 = requests.post(bin.url, files={'some': open('test_requests.py')})\n-        # self.assertEqual(post2.status_code, 200)\n-        \n-        \n-    def test_POSTBIN_GET_POST_FILES_WITH_PARAMS(self):\n-        # TODO: postbin w/ params\n-        bin = requests.get('http://www.postbin.org/')\n         self.assertEqual(bin.status_code, 200)\n         \n         post = requests.post(bin.url, data={'some': 'data'})\n-        self.assertEqual(post.status_code, 200)\n+        self.assertEqual(post.status_code, 201)\n+\n+        post2 = requests.post(bin.url, files={'some': open('test_requests.py')})\n+        self.assertEqual(post2.status_code, 201)\n+\n+    def test_POSTBIN_GET_POST_FILES_WITH_PARAMS(self):\n+        # TODO: postbin w/ params\n+        bin = requests.post('http://www.postbin.org/')\n+        print bin.url\n+        self.assertEqual(bin.status_code, 200)\n \n         post2 = requests.post(bin.url, files={'some': open('test_requests.py')}, data={'some': 'data'})\n-        # self.assertEqual(post2.status_code, 200)\n+        self.assertEqual(post2.status_code, 201)\n \n     def test_nonzero_evaluation(self):\n         r = requests.get('http://google.com/some-404-url')\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#f8032e08aeeff297ce72d8539be57207b97cf0f7", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 3 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 3 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 5 | Churn Cumulative: 228 | Contributors (this commit): 2 | Commits (past 90d): 15 | Contributors (cumulative): 2 | DMM Complexity: 0.0\n\nDIFF:\n@@ -34,6 +34,7 @@ class RequestsTestSuite(unittest.TestCase):\n         r = requests.get('http://www.google.com/search', params={'q': 'test'}, headers=heads)\n         self.assertEqual(r.status_code, 200)\n \n+\n     def test_HTTP_200_OK_GET_WITH_MIXED_PARAMS(self):\n \n         heads = {'User-agent': 'Mozilla/5.0'}\n@@ -75,9 +76,9 @@ class RequestsTestSuite(unittest.TestCase):\n         self.assertEqual(post2.status_code, 201)\n \n     def test_POSTBIN_GET_POST_FILES_WITH_PARAMS(self):\n-        # TODO: postbin w/ params\n+\n         bin = requests.post('http://www.postbin.org/')\n-        print bin.url\n+        \n         self.assertEqual(bin.status_code, 200)\n \n         post2 = requests.post(bin.url, files={'some': open('test_requests.py')}, data={'some': 'data'})\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#e4c690e7bcf90c78bc052b52b284c1fa599b1f8f", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 18 | Lines Deleted: 2 | Files Changed: 2 | Hunks: 7 | Methods Changed: 4 | Complexity Δ (Sum/Max): 4/3 | Churn Δ: 20 | Churn Cumulative: 2027 | Contributors (this commit): 4 | Commits (past 90d): 91 | Contributors (cumulative): 7 | DMM Complexity: 0.8\n\nDIFF:\n@@ -111,6 +111,9 @@ class Request(object):\n \n         _handlers = []\n \n+        if self.cookiejar != None:\n+            _handlers.append(urllib2.HTTPCookieProcessor(self.cookiejar))\n+\n         if self.auth:\n             if not isinstance(self.auth.handler, (urllib2.AbstractBasicAuthHandler, urllib2.AbstractDigestAuthHandler)):\n                 auth_manager.add_password(self.auth.realm, self.url, self.auth.username, self.auth.password)\n@@ -119,6 +122,7 @@ class Request(object):\n \n             _handlers.append(self.auth.handler)\n \n+        if _handlers:\n             _handlers.extend(get_handlers())\n             opener = urllib2.build_opener(*_handlers)\n             return opener.open\n@@ -184,6 +188,9 @@ class Request(object):\n             try:\n                 opener = self._get_opener()\n                 resp = opener(req)\n+\n+                if self.cookiejar != None:\n+                    self.cookiejar.extract_cookies(resp, req)\n             except urllib2.HTTPError, why:\n                 self._build_response(why)\n                 self.response.error = why\n@@ -195,7 +202,6 @@ class Request(object):\n         else:\n             self.response.cached = True\n \n-\n         self.sent = self.response.ok\n \n         return self.sent\n@@ -406,7 +412,7 @@ def request(method, url, **kwargs):\n     data = kwargs.pop('data', dict()) or kwargs.pop('params', dict())\n \n     r = Request(method=method, url=url, data=data, headers=kwargs.pop('headers', {}),\n-                cookiejar=kwargs.pop('cookies', None), files=kwargs.pop('files', None),\n+                cookiejar=kwargs.pop('cookiejar', None), files=kwargs.pop('files', None),\n                 auth=kwargs.pop('auth', auth_manager.get_auth(url)))\n     r.send()\n \n\n@@ -2,6 +2,7 @@\n # -*- coding: utf-8 -*-\n \n import unittest\n+import cookielib\n \n import requests\n \n@@ -103,6 +104,15 @@ class RequestsTestSuite(unittest.TestCase):\n         self.assertFalse(r.error)\n         r.raise_for_status()\n         \n+    def test_cookie_jar(self):\n+        \"\"\"\n+        .. todo:: This really doesn't test to make sure the cookie is working\n+        \"\"\"\n+        jar = cookielib.CookieJar()\n+        self.assertFalse(jar)\n+\n+        requests.get('http://google.com', cookies=jar)\n+        self.assertTrue(jar)\n \n \n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#9fdee250de7e1aa0c92db5fb435cf1f2f8efe7e7", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): -3/0 | Churn Δ: 2 | Churn Cumulative: 1791 | Contributors (this commit): 4 | Commits (past 90d): 76 | Contributors (cumulative): 4 | DMM Complexity: None\n\nDIFF:\n@@ -178,7 +178,7 @@ class Request(object):\n                 req = _Request(self.url, data=self._enc_data, method=self.method)\n \n         if self.headers:\n-            req.headers = self.headers\n+            req.headers.update(self.headers)\n \n         if not self.sent or anyway:\n             try:\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#e17111a5dd3049a614cbb2ad2db2bf1c4f72edfd", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 11 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 11 | Churn Cumulative: 249 | Contributors (this commit): 3 | Commits (past 90d): 17 | Contributors (cumulative): 3 | DMM Complexity: 1.0\n\nDIFF:\n@@ -84,6 +84,17 @@ class RequestsTestSuite(unittest.TestCase):\n         post2 = requests.post(bin.url, files={'some': open('test_requests.py')}, data={'some': 'data'})\n         self.assertEqual(post2.status_code, 201)\n \n+\n+    def test_POSTBIN_GET_POST_FILES_WITH_HEADERS(self):\n+\n+        bin = requests.post('http://www.postbin.org/')\n+        self.assertEqual(bin.status_code, 200)\n+\n+        post2 = requests.post(bin.url, files={'some': open('test_requests.py')},\n+        headers={'User-Agent': 'requests-tests'})\n+\n+        self.assertEqual(post2.status_code, 201)\n+  \n     def test_nonzero_evaluation(self):\n         r = requests.get('http://google.com/some-404-url')\n         self.assertEqual(bool(r), False)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#a67cc5c5a98e79545caa89f665bf1528c0c832f4", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 9 | Lines Deleted: 8 | Files Changed: 1 | Hunks: 9 | Methods Changed: 8 | Complexity Δ (Sum/Max): 3/3 | Churn Δ: 17 | Churn Cumulative: 1808 | Contributors (this commit): 4 | Commits (past 90d): 77 | Contributors (cumulative): 4 | DMM Complexity: None\n\nDIFF:\n@@ -111,7 +111,7 @@ class Request(object):\n \n         _handlers = []\n \n-        if self.cookiejar != None:\n+        if self.cookiejar:\n             _handlers.append(urllib2.HTTPCookieProcessor(self.cookiejar))\n \n         if self.auth:\n@@ -189,8 +189,9 @@ class Request(object):\n                 opener = self._get_opener()\n                 resp = opener(req)\n \n-                if self.cookiejar != None:\n+                if self.cookiejar:\n                     self.cookiejar.extract_cookies(resp, req)\n+                    \n             except urllib2.HTTPError, why:\n                 self._build_response(why)\n                 self.response.error = why\n@@ -412,7 +413,7 @@ def request(method, url, **kwargs):\n     data = kwargs.pop('data', dict()) or kwargs.pop('params', dict())\n \n     r = Request(method=method, url=url, data=data, headers=kwargs.pop('headers', {}),\n-                cookiejar=kwargs.pop('cookiejar', None), files=kwargs.pop('files', None),\n+                cookiejar=kwargs.pop('cookies', None), files=kwargs.pop('files', None),\n                 auth=kwargs.pop('auth', auth_manager.get_auth(url)))\n     r.send()\n \n@@ -429,7 +430,7 @@ def get(url, params={}, headers={}, cookies=None, auth=None):\n     :param auth: (optional) AuthObject to enable Basic HTTP Auth.\n     \"\"\"\n     \n-    return request('GET', url, params=params, headers=headers, cookiejar=cookies, auth=auth)\n+    return request('GET', url, params=params, headers=headers, cookies=cookies, auth=auth)\n \n \n def head(url, params={}, headers={}, cookies=None, auth=None):\n@@ -442,7 +443,7 @@ def head(url, params={}, headers={}, cookies=None, auth=None):\n     :param auth: (optional) AuthObject to enable Basic HTTP Auth.\n     \"\"\"\n \n-    return request('HEAD', url, params=params, headers=headers, cookiejar=cookies, auth=auth)\n+    return request('HEAD', url, params=params, headers=headers, cookies=cookies, auth=auth)\n \n \n def post(url, data={}, headers={}, files=None, cookies=None, auth=None):\n@@ -456,7 +457,7 @@ def post(url, data={}, headers={}, files=None, cookies=None, auth=None):\n     :param auth: (optional) AuthObject to enable Basic HTTP Auth.\n     \"\"\"\n \n-    return request('POST', url, data=data, headers=headers, files=files, cookiejar=cookies, auth=auth)\n+    return request('POST', url, data=data, headers=headers, files=files, cookies=cookies, auth=auth)\n \n \n def put(url, data='', headers={}, files={}, cookies=None, auth=None):\n@@ -470,7 +471,7 @@ def put(url, data='', headers={}, files={}, cookies=None, auth=None):\n     :param auth: (optional) AuthObject to enable Basic HTTP Auth.\n     \"\"\"\n \n-    return request('PUT', url, data=data, headers=headers, files=files, cookiejar=cookies, auth=auth)\n+    return request('PUT', url, data=data, headers=headers, files=files, cookies=cookies, auth=auth)\n \n \n def delete(url, params={}, headers={}, cookies=None, auth=None):\n@@ -483,7 +484,7 @@ def delete(url, params={}, headers={}, cookies=None, auth=None):\n     :param auth: (optional) AuthObject to enable Basic HTTP Auth.\n     \"\"\"\n \n-    return request('DELETE', url, params=params, headers=headers, cookiejar=cookies, auth=auth)\n+    return request('DELETE', url, params=params, headers=headers, cookies=cookies, auth=auth)\n \n \n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#89192c64f04e9fa49adfc6cf35e10bd98bd64a8e", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 2 | Methods Changed: 2 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 1812 | Contributors (this commit): 5 | Commits (past 90d): 78 | Contributors (cumulative): 5 | DMM Complexity: None\n\nDIFF:\n@@ -111,7 +111,7 @@ class Request(object):\n \n         _handlers = []\n \n-        if self.cookiejar:\n+        if self.cookiejar is not None:\n             _handlers.append(urllib2.HTTPCookieProcessor(self.cookiejar))\n \n         if self.auth:\n@@ -189,7 +189,7 @@ class Request(object):\n                 opener = self._get_opener()\n                 resp = opener(req)\n \n-                if self.cookiejar:\n+                if self.cookiejar is not None:\n                     self.cookiejar.extract_cookies(resp, req)\n                     \n             except urllib2.HTTPError, why:\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#2401f149750337970300383634f3942e9da3c68f", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 22 | Lines Deleted: 11 | Files Changed: 2 | Hunks: 9 | Methods Changed: 7 | Complexity Δ (Sum/Max): 6/4 | Churn Δ: 33 | Churn Cumulative: 2094 | Contributors (this commit): 5 | Commits (past 90d): 97 | Contributors (cumulative): 8 | DMM Complexity: 0.0\n\nDIFF:\n@@ -122,13 +122,22 @@ class Request(object):\n \n             _handlers.append(self.auth.handler)\n \n-        if _handlers:\n-            _handlers.extend(get_handlers())\n-            opener = urllib2.build_opener(*_handlers)\n-            return opener.open\n-        else:\n+        if not _handlers:\n             return urllib2.urlopen\n \n+        _handlers.extend(get_handlers())\n+        opener = urllib2.build_opener(*_handlers)\n+\n+        if self.headers:\n+            # Allow default headers in the opener to be overloaded\n+            normal_keys = [k.capitalize() for k in self.headers]\n+            for key, val in opener.addheaders[:]:\n+                if key not in normal_keys:\n+                    continue\n+                # Remove it, we have a value to take its place\n+                opener.addheaders.remove((key, val))\n+\n+        return opener.open\n \n     def _build_response(self, resp):\n         \"\"\"Build internal Response object from given response.\"\"\"\n\n@@ -29,20 +29,25 @@ class RequestsTestSuite(unittest.TestCase):\n         self.assertEqual(r.status_code, 200)\n \n     def test_HTTP_200_OK_GET_WITH_PARAMS(self):\n-\n         heads = {'User-agent': 'Mozilla/5.0'}\n         \n         r = requests.get('http://www.google.com/search', params={'q': 'test'}, headers=heads)\n         self.assertEqual(r.status_code, 200)\n \n-\n     def test_HTTP_200_OK_GET_WITH_MIXED_PARAMS(self):\n-\n         heads = {'User-agent': 'Mozilla/5.0'}\n \n         r = requests.get('http://google.com/search?test=true', params={'q': 'test'}, headers=heads)\n         self.assertEqual(r.status_code, 200)\n \n+    def test_user_agent_transfers(self):\n+        \"\"\"Issue XX\"\"\"\n+        heads = {'User-agent':\n+                 'Mozilla/5.0 (github.com/kennethreitz/requests)'}\n+\n+        r = requests.get('http://whatsmyua.com', headers=heads);\n+        self.assertTrue(heads['User-agent'] in r.content)\n+        \n     def test_HTTP_200_OK_HEAD(self):\n         r = requests.head('http://google.com')\n         self.assertEqual(r.status_code, 200)\n@@ -65,7 +70,6 @@ class RequestsTestSuite(unittest.TestCase):\n         requests.auth_manager.empty()\n \n     def test_POSTBIN_GET_POST_FILES(self):\n-\n         bin = requests.post('http://www.postbin.org/')\n         print bin.url\n         self.assertEqual(bin.status_code, 200)\n@@ -77,7 +81,6 @@ class RequestsTestSuite(unittest.TestCase):\n         self.assertEqual(post2.status_code, 201)\n \n     def test_POSTBIN_GET_POST_FILES_WITH_PARAMS(self):\n-\n         bin = requests.post('http://www.postbin.org/')\n         \n         self.assertEqual(bin.status_code, 200)\n@@ -87,7 +90,6 @@ class RequestsTestSuite(unittest.TestCase):\n \n \n     def test_POSTBIN_GET_POST_FILES_WITH_HEADERS(self):\n-\n         bin = requests.post('http://www.postbin.org/')\n         self.assertEqual(bin.status_code, 200)\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#e350bea167b0bbbd6bc5da6d42036bc560ccde15", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 3 | Churn Cumulative: 1834 | Contributors (this commit): 5 | Commits (past 90d): 80 | Contributors (cumulative): 5 | DMM Complexity: 1.0\n\nDIFF:\n@@ -160,7 +160,6 @@ class Request(object):\n             else:\n                 return url\n \n-\n     def send(self, anyway=False):\n         \"\"\"Sends the request. Returns True of successful, false if not.\n         If there was an HTTPError during transmission,\n@@ -217,6 +216,8 @@ class Request(object):\n         return self.sent\n \n \n+    def read(self):\n+        return self.content\n     \n class Response(object):\n     \"\"\"The :class:`Request` object. All :class:`Request` objects contain a\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#f2b04f94ca689bb4cc1d9f3c4a85476b17dc5c5d", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 3 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 4 | Churn Cumulative: 1838 | Contributors (this commit): 5 | Commits (past 90d): 81 | Contributors (cumulative): 5 | DMM Complexity: 1.0\n\nDIFF:\n@@ -217,7 +217,7 @@ class Request(object):\n \n \n     def read(self):\n-        return self.content\n+        return self.response.read()\n     \n class Response(object):\n     \"\"\"The :class:`Request` object. All :class:`Request` objects contain a\n@@ -249,6 +249,8 @@ class Response(object):\n         if self.error:\n             raise self.error\n \n+    def read(self):\n+        return self.content\n \n \n class AuthManager(object):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#ed8ff63048a5ccaf304e2a59bfed58c9206cfd69", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 1842 | Contributors (this commit): 5 | Commits (past 90d): 82 | Contributors (cumulative): 5 | DMM Complexity: None\n\nDIFF:\n@@ -24,8 +24,8 @@ from .packages.poster.streaminghttp import register_openers, get_handlers\n \n \n __title__ = 'requests'\n-__version__ = '0.3.0'\n-__build__ = 0x000300\n+__version__ = '0.3.1'\n+__build__ = 0x000301\n __author__ = 'Kenneth Reitz'\n __license__ = 'ISC'\n __copyright__ = 'Copyright 2011 Kenneth Reitz'\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#23d5761bd4676c6bcbe99d4da27b190837330bb7", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 2 | Methods Changed: 2 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 1846 | Contributors (this commit): 5 | Commits (past 90d): 83 | Contributors (cumulative): 5 | DMM Complexity: None\n\nDIFF:\n@@ -216,7 +216,7 @@ class Request(object):\n         return self.sent\n \n \n-    def read(self):\n+    def read(self, *args):\n         return self.response.read()\n \n class Response(object):\n@@ -249,7 +249,7 @@ class Response(object):\n         if self.error:\n             raise self.error\n \n-    def read(self):\n+    def read(self, *args):\n         return self.content\n \n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#7a62b10ff2fb5091d77aaf63d1ab091713ead332", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 8 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 3 | Methods Changed: 1 | Complexity Δ (Sum/Max): 2/2 | Churn Δ: 9 | Churn Cumulative: 1855 | Contributors (this commit): 5 | Commits (past 90d): 84 | Contributors (cumulative): 5 | DMM Complexity: 1.0\n\nDIFF:\n@@ -14,6 +14,7 @@ from __future__ import absolute_import\n \n import urllib\n import urllib2\n+import zlib\n \n from urllib2 import HTTPError\n from urlparse import urlparse\n@@ -144,9 +145,15 @@ class Request(object):\n \n         self.response.status_code = getattr(resp, 'code', None)\n         self.response.headers = getattr(resp.info(), 'dict', None)\n-        self.response.url = getattr(resp, 'url', None)\n         self.response.content = resp.read()\n \n+        if self.response.headers.get('content-encoding', None) == 'gzip':\n+            try:\n+                self.response.content = zlib.decompress(self.response.content, 16+zlib.MAX_WBITS)\n+            except zlib.error:\n+                pass\n+\n+        self.response.url = getattr(resp, 'url', None)\n \n     @staticmethod\n     def _build_url(url, data):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#1359094cc8a46732c146486b3feb0d6fa09ca7f0", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 3 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 3 | Churn Cumulative: 266 | Contributors (this commit): 3 | Commits (past 90d): 19 | Contributors (cumulative): 3 | DMM Complexity: 1.0\n\nDIFF:\n@@ -127,7 +127,10 @@ class RequestsTestSuite(unittest.TestCase):\n         requests.get('http://google.com', cookies=jar)\n         self.assertTrue(jar)\n \n+    def test_decompress_gzip(self):\n \n+        r = requests.get('http://api.stackoverflow.com/1.1/users/495995/top-answer-tags')\n+        r.content.decode('ascii')\n \n if __name__ == '__main__':\n     unittest.main()\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#2814664e91d9a7516f0f5f156fb482b9109a8b5b", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 17 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 3 | Methods Changed: 3 | Complexity Δ (Sum/Max): 6/6 | Churn Δ: 19 | Churn Cumulative: 1874 | Contributors (this commit): 5 | Commits (past 90d): 85 | Contributors (cumulative): 5 | DMM Complexity: 1.0\n\nDIFF:\n@@ -286,6 +286,14 @@ class AuthManager(object):\n         \"\"\"Registers AuthObject to AuthManager.\"\"\"\n \n         uri = self.reduce_uri(uri, False)\n+\n+        # try to make it an AuthObject\n+        if not isinstance(auth, AuthObject):\n+            try:\n+                auth = AuthObject(*auth)\n+            except TypeError:\n+                pass\n+\n         self._auth[uri] = auth\n \n     def add_password(self, realm, uri, user, passwd):\n@@ -312,8 +320,14 @@ class AuthManager(object):\n \n \n     def get_auth(self, uri):\n-        uri = self.reduce_uri(uri, False)\n-        return self._auth.get(uri, None)\n+        (in_domain, in_path) = self.reduce_uri(uri, False)\n+\n+        for domain, path, authority in (\n+            (i[0][0], i[0][1], i[1]) for i in self._auth.iteritems()\n+        ):\n+            if in_domain == domain:\n+                if path in in_path:\n+                    return authority\n \n \n     def reduce_uri(self, uri, default_port=True):\n@@ -337,6 +351,7 @@ class AuthManager(object):\n                      }.get(scheme)\n             if dport is not None:\n                 authority = \"%s:%d\" % (host, dport)\n+\n         return authority, path\n \n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#f494cd9c7283f9f920d04a59ed47efd5ae0c284a", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 8 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 2 | Methods Changed: 2 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 9 | Churn Cumulative: 275 | Contributors (this commit): 3 | Commits (past 90d): 20 | Contributors (cumulative): 3 | DMM Complexity: 1.0\n\nDIFF:\n@@ -71,7 +71,6 @@ class RequestsTestSuite(unittest.TestCase):\n \n     def test_POSTBIN_GET_POST_FILES(self):\n         bin = requests.post('http://www.postbin.org/')\n-        print bin.url\n         self.assertEqual(bin.status_code, 200)\n \n         post = requests.post(bin.url, data={'some': 'data'})\n@@ -132,5 +131,13 @@ class RequestsTestSuite(unittest.TestCase):\n         r = requests.get('http://api.stackoverflow.com/1.1/users/495995/top-answer-tags')\n         r.content.decode('ascii')\n \n+    def test_autoauth(self):\n+\n+        conv_auth = ('requeststest', 'requeststest')\n+        requests.auth_manager.add_auth('convore.com', conv_auth)\n+\n+        r = requests.get('https://convore.com/api/account/verify.json')\n+        self.assertEquals(r.status_code, 200)\n+\n if __name__ == '__main__':\n     unittest.main()\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#6e14d4704d87f572ab3257956bf7f32b0e6dab79", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 4 | Lines Deleted: 4 | Files Changed: 2 | Hunks: 3 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 8 | Churn Cumulative: 2114 | Contributors (this commit): 5 | Commits (past 90d): 88 | Contributors (cumulative): 6 | DMM Complexity: None\n\nDIFF:\n@@ -48,9 +48,9 @@ copyright = u'2011, Kenneth Reitz'\n # built documents.\n #\n # The short X.Y version.\n-version = '0.2.0'\n+version = '0.3.2'\n # The full version, including alpha/beta/rc tags.\n-release = '0.2.0'\n+release = version\n \n # The language for content autogenerated by Sphinx. Refer to documentation\n # for a list of supported languages.\n\n@@ -25,8 +25,8 @@ from .packages.poster.streaminghttp import register_openers, get_handlers\n \n \n __title__ = 'requests'\n-__version__ = '0.3.1'\n-__build__ = 0x000301\n+__version__ = '0.3.2'\n+__build__ = 0x000302\n __author__ = 'Kenneth Reitz'\n __license__ = 'ISC'\n __copyright__ = 'Copyright 2011 Kenneth Reitz'\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#b8b87d416e5e76b5aab322bd38f0b1cfb9218d01", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 3 | Churn Cumulative: 81 | Contributors (this commit): 1 | Commits (past 90d): 10 | Contributors (cumulative): 1 | DMM Complexity: None\n\nDIFF:\n@@ -19,7 +19,8 @@ if sys.argv[-1] == \"test\":\n \n required = []\n \n-# if python > 2.6, require simplejson\n+if sys.version_info[:2] < (2,6):\n+    required.append('simplejson')\n \n setup(\n     name='requests',\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#d3a46c822f635f2278536a8960af029e77f21e4b", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 360 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 28 | Complexity Δ (Sum/Max): 57/57 | Churn Δ: 360 | Churn Cumulative: 360 | Contributors (this commit): 1 | Commits (past 90d): 1 | Contributors (cumulative): 1 | DMM Complexity: 0.8617886178861789\n\nDIFF:\n@@ -0,0 +1,360 @@\n+\n+# from: werkzeug\n+\n+class TypeConversionDict(dict):\n+    \"\"\"Works like a regular dict but the :meth:`get` method can perform\n+    type conversions.  :class:`MultiDict` and :class:`CombinedMultiDict`\n+    are subclasses of this class and provide the same feature.\n+    \"\"\"\n+\n+    def get(self, key, default=None, type=None):\n+        \"\"\"Return the default value if the requested data doesn't exist.\n+        If `type` is provided and is a callable it should convert the value,\n+        return it or raise a :exc:`ValueError` if that is not possible.  In\n+        this case the function will return the default as if the value was not\n+        found:\n+\n+        >>> d = TypeConversionDict(foo='42', bar='blub')\n+        >>> d.get('foo', type=int)\n+        42\n+        >>> d.get('bar', -1, type=int)\n+        -1\n+\n+        :param key: The key to be looked up.\n+        :param default: The default value to be returned if the key can't\n+                        be looked up.  If not further specified `None` is\n+                        returned.\n+        :param type: A callable that is used to cast the value in the\n+                     :class:`MultiDict`.  If a :exc:`ValueError` is raised\n+                     by this callable the default value is returned.\n+        \"\"\"\n+        try:\n+            rv = self[key]\n+            if type is not None:\n+                rv = type(rv)\n+        except (KeyError, ValueError):\n+            rv = default\n+        return rv\n+\n+\n+\n+# from: werkzeug\n+\n+class MultiDict(TypeConversionDict):\n+    \"\"\"A :class:`MultiDict` is a dictionary subclass customized to deal with\n+    multiple values for the same key which is for example used by the parsing\n+    functions in the wrappers.  This is necessary because some HTML form\n+    elements pass multiple values for the same key.\n+\n+    :class:`MultiDict` implements all standard dictionary methods.\n+    Internally, it saves all values for a key as a list, but the standard dict\n+    access methods will only return the first value for a key. If you want to\n+    gain access to the other values, too, you have to use the `list` methods as\n+    explained below.\n+\n+    Basic Usage:\n+\n+    >>> d = MultiDict([('a', 'b'), ('a', 'c')])\n+    >>> d\n+    MultiDict([('a', 'b'), ('a', 'c')])\n+    >>> d['a']\n+    'b'\n+    >>> d.getlist('a')\n+    ['b', 'c']\n+    >>> 'a' in d\n+    True\n+\n+    It behaves like a normal dict thus all dict functions will only return the\n+    first value when multiple values for one key are found.\n+\n+    From Werkzeug 0.3 onwards, the `KeyError` raised by this class is also a\n+    subclass of the :exc:`~exceptions.BadRequest` HTTP exception and will\n+    render a page for a ``400 BAD REQUEST`` if caught in a catch-all for HTTP\n+    exceptions.\n+\n+    A :class:`MultiDict` can be constructed from an iterable of\n+    ``(key, value)`` tuples, a dict, a :class:`MultiDict` or from Werkzeug 0.2\n+    onwards some keyword parameters.\n+\n+    :param mapping: the initial value for the :class:`MultiDict`.  Either a\n+                    regular dict, an iterable of ``(key, value)`` tuples\n+                    or `None`.\n+    \"\"\"\n+\n+    # the key error this class raises.  Because of circular dependencies\n+    # with the http exception module this class is created at the end of\n+    # this module.\n+    KeyError = None\n+\n+    def __init__(self, mapping=None):\n+        if isinstance(mapping, MultiDict):\n+            dict.__init__(self, ((k, l[:]) for k, l in mapping.iterlists()))\n+        elif isinstance(mapping, dict):\n+            tmp = {}\n+            for key, value in mapping.iteritems():\n+                if isinstance(value, (tuple, list)):\n+                    value = list(value)\n+                else:\n+                    value = [value]\n+                tmp[key] = value\n+            dict.__init__(self, tmp)\n+        else:\n+            tmp = {}\n+            for key, value in mapping or ():\n+                tmp.setdefault(key, []).append(value)\n+            dict.__init__(self, tmp)\n+\n+    def __getstate__(self):\n+        return dict(self.lists())\n+\n+    def __setstate__(self, value):\n+        dict.clear(self)\n+        dict.update(self, value)\n+\n+    def __iter__(self):\n+        return self.iterkeys()\n+\n+    def __getitem__(self, key):\n+        \"\"\"Return the first data value for this key;\n+        raises KeyError if not found.\n+\n+        :param key: The key to be looked up.\n+        :raise KeyError: if the key does not exist.\n+        \"\"\"\n+        if key in self:\n+            return dict.__getitem__(self, key)[0]\n+        raise self.KeyError(key)\n+\n+    def __setitem__(self, key, value):\n+        \"\"\"Like :meth:`add` but removes an existing key first.\n+\n+        :param key: the key for the value.\n+        :param value: the value to set.\n+        \"\"\"\n+        dict.__setitem__(self, key, [value])\n+\n+    def add(self, key, value):\n+        \"\"\"Adds a new value for the key.\n+\n+        .. versionadded:: 0.6\n+\n+        :param key: the key for the value.\n+        :param value: the value to add.\n+        \"\"\"\n+        dict.setdefault(self, key, []).append(value)\n+\n+    def getlist(self, key, type=None):\n+        \"\"\"Return the list of items for a given key. If that key is not in the\n+        `MultiDict`, the return value will be an empty list.  Just as `get`\n+        `getlist` accepts a `type` parameter.  All items will be converted\n+        with the callable defined there.\n+\n+        :param key: The key to be looked up.\n+        :param type: A callable that is used to cast the value in the\n+                     :class:`MultiDict`.  If a :exc:`ValueError` is raised\n+                     by this callable the value will be removed from the list.\n+        :return: a :class:`list` of all the values for the key.\n+        \"\"\"\n+        try:\n+            rv = dict.__getitem__(self, key)\n+        except KeyError:\n+            return []\n+        if type is None:\n+            return list(rv)\n+        result = []\n+        for item in rv:\n+            try:\n+                result.append(type(item))\n+            except ValueError:\n+                pass\n+        return result\n+\n+    def setlist(self, key, new_list):\n+        \"\"\"Remove the old values for a key and add new ones.  Note that the list\n+        you pass the values in will be shallow-copied before it is inserted in\n+        the dictionary.\n+\n+        >>> d = MultiDict()\n+        >>> d.setlist('foo', ['1', '2'])\n+        >>> d['foo']\n+        '1'\n+        >>> d.getlist('foo')\n+        ['1', '2']\n+\n+        :param key: The key for which the values are set.\n+        :param new_list: An iterable with the new values for the key.  Old values\n+                         are removed first.\n+        \"\"\"\n+        dict.__setitem__(self, key, list(new_list))\n+\n+    def setdefault(self, key, default=None):\n+        \"\"\"Returns the value for the key if it is in the dict, otherwise it\n+        returns `default` and sets that value for `key`.\n+\n+        :param key: The key to be looked up.\n+        :param default: The default value to be returned if the key is not\n+                        in the dict.  If not further specified it's `None`.\n+        \"\"\"\n+        if key not in self:\n+            self[key] = default\n+        else:\n+            default = self[key]\n+        return default\n+\n+    def setlistdefault(self, key, default_list=None):\n+        \"\"\"Like `setdefault` but sets multiple values.  The list returned\n+        is not a copy, but the list that is actually used internally.  This\n+        means that you can put new values into the dict by appending items\n+        to the list:\n+\n+        >>> d = MultiDict({\"foo\": 1})\n+        >>> d.setlistdefault(\"foo\").extend([2, 3])\n+        >>> d.getlist(\"foo\")\n+        [1, 2, 3]\n+\n+        :param key: The key to be looked up.\n+        :param default: An iterable of default values.  It is either copied\n+                        (in case it was a list) or converted into a list\n+                        before returned.\n+        :return: a :class:`list`\n+        \"\"\"\n+        if key not in self:\n+            default_list = list(default_list or ())\n+            dict.__setitem__(self, key, default_list)\n+        else:\n+            default_list = dict.__getitem__(self, key)\n+        return default_list\n+\n+    def items(self, multi=False):\n+        \"\"\"Return a list of ``(key, value)`` pairs.\n+\n+        :param multi: If set to `True` the list returned will have a\n+                      pair for each value of each key.  Otherwise it\n+                      will only contain pairs for the first value of\n+                      each key.\n+\n+        :return: a :class:`list`\n+        \"\"\"\n+        return list(self.iteritems(multi))\n+\n+    def lists(self):\n+        \"\"\"Return a list of ``(key, values)`` pairs, where values is the list of\n+        all values associated with the key.\n+\n+        :return: a :class:`list`\n+        \"\"\"\n+        return list(self.iterlists())\n+\n+    def values(self):\n+        \"\"\"Returns a list of the first value on every key's value list.\n+\n+        :return: a :class:`list`.\n+        \"\"\"\n+        return [self[key] for key in self.iterkeys()]\n+\n+    def listvalues(self):\n+        \"\"\"Return a list of all values associated with a key.  Zipping\n+        :meth:`keys` and this is the same as calling :meth:`lists`:\n+\n+        >>> d = MultiDict({\"foo\": [1, 2, 3]})\n+        >>> zip(d.keys(), d.listvalues()) == d.lists()\n+        True\n+\n+        :return: a :class:`list`\n+        \"\"\"\n+        return list(self.iterlistvalues())\n+\n+    def iteritems(self, multi=False):\n+        \"\"\"Like :meth:`items` but returns an iterator.\"\"\"\n+        for key, values in dict.iteritems(self):\n+            if multi:\n+                for value in values:\n+                    yield key, value\n+            else:\n+                yield key, values[0]\n+\n+    def iterlists(self):\n+        \"\"\"Like :meth:`items` but returns an iterator.\"\"\"\n+        for key, values in dict.iteritems(self):\n+            yield key, list(values)\n+\n+    def itervalues(self):\n+        \"\"\"Like :meth:`values` but returns an iterator.\"\"\"\n+        for values in dict.itervalues(self):\n+            yield values[0]\n+\n+    def iterlistvalues(self):\n+        \"\"\"Like :meth:`listvalues` but returns an iterator.\"\"\"\n+        return dict.itervalues(self)\n+\n+    def copy(self):\n+        \"\"\"Return a shallow copy of this object.\"\"\"\n+        return self.__class__(self)\n+\n+    def to_dict(self, flat=True):\n+        \"\"\"Return the contents as regular dict.  If `flat` is `True` the\n+        returned dict will only have the first item present, if `flat` is\n+        `False` all values will be returned as lists.\n+\n+        :param flat: If set to `False` the dict returned will have lists\n+                     with all the values in it.  Otherwise it will only\n+                     contain the first value for each key.\n+        :return: a :class:`dict`\n+        \"\"\"\n+        if flat:\n+            return dict(self.iteritems())\n+        return dict(self.lists())\n+\n+    def update(self, other_dict):\n+        \"\"\"update() extends rather than replaces existing key lists.\"\"\"\n+        for key, value in iter_multi_items(other_dict):\n+            MultiDict.add(self, key, value)\n+\n+    def pop(self, key, default=_missing):\n+        \"\"\"Pop the first item for a list on the dict.  Afterwards the\n+        key is removed from the dict, so additional values are discarded:\n+\n+        >>> d = MultiDict({\"foo\": [1, 2, 3]})\n+        >>> d.pop(\"foo\")\n+        1\n+        >>> \"foo\" in d\n+        False\n+\n+        :param key: the key to pop.\n+        :param default: if provided the value to return if the key was\n+                        not in the dictionary.\n+        \"\"\"\n+        try:\n+            return dict.pop(self, key)[0]\n+        except KeyError, e:\n+            if default is not _missing:\n+                return default\n+            raise self.KeyError(str(e))\n+\n+    def popitem(self):\n+        \"\"\"Pop an item from the dict.\"\"\"\n+        try:\n+            item = dict.popitem(self)\n+            return (item[0], item[1][0])\n+        except KeyError, e:\n+            raise self.KeyError(str(e))\n+\n+    def poplist(self, key):\n+        \"\"\"Pop the list for a key from the dict.  If the key is not in the dict\n+        an empty list is returned.\n+\n+        .. versionchanged:: 0.5\n+           If the key does no longer exist a list is returned instead of\n+           raising an error.\n+        \"\"\"\n+        return dict.pop(self, key, [])\n+\n+    def popitemlist(self):\n+        \"\"\"Pop a ``(key, list)`` tuple from the dict.\"\"\"\n+        try:\n+            return dict.popitem(self)\n+        except KeyError, e:\n+            raise self.KeyError(str(e))\n+\n+    def __repr__(self):\n+        return '%s(%r)' % (self.__class__.__name__, self.items(multi=True))\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
