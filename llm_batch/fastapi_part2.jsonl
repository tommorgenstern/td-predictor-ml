{"custom_id": "fastapi#db3c270f8e402627c29a288a2bacd6ac57cfca0c", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 62 | Lines Deleted: 40 | Files Changed: 12 | Hunks: 27 | Methods Changed: 5 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 102 | Churn Cumulative: 4988 | Contributors (this commit): 1 | Commits (past 90d): 49 | Contributors (cumulative): 12 | DMM Complexity: 1.0\n\nDIFF:\n@@ -1,5 +1,8 @@\n from typing import Any, Callable, Dict, List, Optional, Type\n \n+from fastapi import routing\n+from fastapi.openapi.docs import get_redoc_html, get_swagger_ui_html\n+from fastapi.openapi.utils import get_openapi\n from pydantic import BaseModel\n from starlette.applications import Starlette\n from starlette.exceptions import ExceptionMiddleware, HTTPException\n@@ -8,10 +11,6 @@ from starlette.middleware.lifespan import LifespanMiddleware\n from starlette.requests import Request\n from starlette.responses import JSONResponse, Response\n \n-from fastapi import routing\n-from fastapi.openapi.docs import get_redoc_html, get_swagger_ui_html\n-from fastapi.openapi.utils import get_openapi\n-\n \n async def http_exception(request: Request, exc: HTTPException) -> JSONResponse:\n     return JSONResponse({\"detail\": exc.detail}, status_code=exc.status_code)\n\n@@ -1,5 +1,6 @@\n from typing import Any, Callable, Dict, List, Sequence, Tuple\n \n+from fastapi.security.base import SecurityBase\n from pydantic import BaseConfig, Schema\n from pydantic.error_wrappers import ErrorWrapper\n from pydantic.errors import MissingError\n@@ -8,8 +9,6 @@ from pydantic.schema import get_annotation_from_schema\n from starlette.concurrency import run_in_threadpool\n from starlette.requests import Request\n \n-from fastapi.security.base import SecurityBase\n-\n param_supported_types = (str, int, float, bool)\n \n \n\n@@ -3,6 +3,10 @@ import inspect\n from copy import deepcopy\n from typing import Any, Callable, Dict, List, Mapping, Sequence, Tuple, Type\n \n+from fastapi import params\n+from fastapi.dependencies.models import Dependant, SecurityRequirement\n+from fastapi.security.base import SecurityBase\n+from fastapi.utils import get_path_param_names\n from pydantic import BaseConfig, Schema, create_model\n from pydantic.error_wrappers import ErrorWrapper\n from pydantic.errors import MissingError\n@@ -12,11 +16,6 @@ from pydantic.utils import lenient_issubclass\n from starlette.concurrency import run_in_threadpool\n from starlette.requests import Request\n \n-from fastapi import params\n-from fastapi.dependencies.models import Dependant, SecurityRequirement\n-from fastapi.security.base import SecurityBase\n-from fastapi.utils import get_path_param_names\n-\n param_supported_types = (str, int, float, bool)\n \n \n@@ -26,7 +25,6 @@ def get_sub_dependant(*, param: inspect.Parameter, path: str) -> Dependant:\n         dependency = depends.dependency\n     else:\n         dependency = param.annotation\n-    assert callable(dependency)\n     sub_dependant = get_dependant(path=path, call=dependency, name=param.name)\n     if isinstance(depends, params.Security) and isinstance(dependency, SecurityBase):\n         security_requirement = SecurityRequirement(\n@@ -119,18 +117,18 @@ def add_param_to_fields(\n     if isinstance(default_value, params.Param):\n         schema = default_value\n         default_value = schema.default\n-        if schema.in_ is None:\n+        if getattr(schema, \"in_\", None) is None:\n             schema.in_ = default_schema.in_\n         if force_type:\n             schema.in_ = force_type\n     else:\n         schema = default_schema(default_value)\n     required = default_value == Required\n-    annotation: Type = Type[Any]\n+    annotation: Any = Any\n     if not param.annotation == param.empty:\n         annotation = param.annotation\n     annotation = get_annotation_from_schema(annotation, schema)\n-    if not schema.alias and getattr(schema, \"alias_underscore_to_hyphen\", None):\n+    if not schema.alias and getattr(schema, \"convert_underscores\", None):\n         alias = param.name.replace(\"_\", \"-\")\n     else:\n         alias = schema.alias or param.name\n\n@@ -1,2 +1,2 @@\n-METHODS_WITH_BODY = set((\"POST\", \"PUT\"))\n+METHODS_WITH_BODY = set((\"POST\", \"PUT\", \"DELETE\", \"PATCH\"))\n REF_PREFIX = \"#/components/schemas/\"\n\n@@ -1,12 +1,5 @@\n from typing import Any, Dict, List, Optional, Sequence, Tuple, Type\n \n-from pydantic.fields import Field\n-from pydantic.schema import Schema, field_schema, get_model_name_map\n-from pydantic.utils import lenient_issubclass\n-from starlette.responses import HTMLResponse, JSONResponse\n-from starlette.routing import BaseRoute, Route\n-from starlette.status import HTTP_422_UNPROCESSABLE_ENTITY\n-\n from fastapi import routing\n from fastapi.dependencies.models import Dependant\n from fastapi.dependencies.utils import get_flat_dependant\n@@ -15,6 +8,12 @@ from fastapi.openapi.constants import METHODS_WITH_BODY, REF_PREFIX\n from fastapi.openapi.models import OpenAPI\n from fastapi.params import Body, Param\n from fastapi.utils import get_flat_models_from_routes, get_model_definitions\n+from pydantic.fields import Field\n+from pydantic.schema import Schema, field_schema, get_model_name_map\n+from pydantic.utils import lenient_issubclass\n+from starlette.responses import HTMLResponse, JSONResponse\n+from starlette.routing import BaseRoute, Route\n+from starlette.status import HTTP_422_UNPROCESSABLE_ENTITY\n \n validation_error_definition = {\n     \"title\": \"ValidationError\",\n\n@@ -134,7 +134,7 @@ class Header(Param):\n         *,\n         deprecated: bool = None,\n         alias: str = None,\n-        alias_underscore_to_hyphen: bool = True,\n+        convert_underscores: bool = True,\n         title: str = None,\n         description: str = None,\n         gt: float = None,\n@@ -148,7 +148,7 @@ class Header(Param):\n     ):\n         self.description = description\n         self.deprecated = deprecated\n-        self.alias_underscore_to_hyphen = alias_underscore_to_hyphen\n+        self.convert_underscores = convert_underscores\n         super().__init__(\n             default,\n             alias=alias,\n\n@@ -2,6 +2,10 @@ import asyncio\n import inspect\n from typing import Any, Callable, List, Optional, Type\n \n+from fastapi import params\n+from fastapi.dependencies.models import Dependant\n+from fastapi.dependencies.utils import get_body_field, get_dependant, solve_dependencies\n+from fastapi.encoders import jsonable_encoder\n from pydantic import BaseConfig, BaseModel, Schema\n from pydantic.error_wrappers import ErrorWrapper, ValidationError\n from pydantic.fields import Field\n@@ -15,11 +19,6 @@ from starlette.responses import JSONResponse, Response\n from starlette.routing import get_name, request_response\n from starlette.status import HTTP_422_UNPROCESSABLE_ENTITY\n \n-from fastapi import params\n-from fastapi.dependencies.models import Dependant\n-from fastapi.dependencies.utils import get_body_field, get_dependant, solve_dependencies\n-from fastapi.encoders import jsonable_encoder\n-\n \n def serialize_response(*, field: Field = None, response: Response) -> Any:\n     if field:\n\n@@ -1,7 +1,6 @@\n-from starlette.requests import Request\n-\n from fastapi.openapi.models import APIKey, APIKeyIn\n from fastapi.security.base import SecurityBase\n+from starlette.requests import Request\n \n \n class APIKeyBase(SecurityBase):\n\n@@ -1,10 +1,9 @@\n-from starlette.requests import Request\n-\n from fastapi.openapi.models import (\n     HTTPBase as HTTPBaseModel,\n     HTTPBearer as HTTPBearerModel,\n )\n from fastapi.security.base import SecurityBase\n+from starlette.requests import Request\n \n \n class HTTPBase(SecurityBase):\n\n@@ -1,7 +1,39 @@\n-from starlette.requests import Request\n+from typing import List, Optional\n \n from fastapi.openapi.models import OAuth2 as OAuth2Model, OAuthFlows as OAuthFlowsModel\n from fastapi.security.base import SecurityBase\n+from pydantic import BaseModel, Schema\n+from starlette.requests import Request\n+\n+\n+class OAuth2PasswordRequestData(BaseModel):\n+    grant_type: str = \"password\"\n+    username: str\n+    password: str\n+    scope: Optional[List[str]] = None\n+    # Client ID and secret might come from headers\n+    client_id: Optional[str] = None\n+    client_secret: Optional[str] = None\n+\n+\n+class OAuth2PasswordRequestForm(BaseModel):\n+    grant_type: str = Schema(..., regex=\"password\")  # it must have the value \"password\"\n+    username: str\n+    password: str\n+    scope: str = \"\"\n+    # Client ID and secret might come from headers\n+    client_id: Optional[str] = None\n+    client_secret: Optional[str] = None\n+\n+    def parse(self) -> OAuth2PasswordRequestData:\n+        return OAuth2PasswordRequestData(\n+            grant_type=self.grant_type,\n+            username=self.username,\n+            password=self.password,\n+            scope=self.scope.split(),\n+            client_id=self.client_id,\n+            client_secret=self.client_secret,\n+        )\n \n \n class OAuth2(SecurityBase):\n\n@@ -1,7 +1,6 @@\n-from starlette.requests import Request\n-\n from fastapi.openapi.models import OpenIdConnect as OpenIdConnectModel\n from fastapi.security.base import SecurityBase\n+from starlette.requests import Request\n \n \n class OpenIdConnect(SecurityBase):\n\n@@ -1,14 +1,13 @@\n import re\n from typing import Any, Dict, List, Sequence, Set, Type\n \n+from fastapi import routing\n+from fastapi.openapi.constants import REF_PREFIX\n from pydantic import BaseModel\n from pydantic.fields import Field\n from pydantic.schema import get_flat_models_from_fields, model_process_schema\n from starlette.routing import BaseRoute\n \n-from fastapi import routing\n-from fastapi.openapi.constants import REF_PREFIX\n-\n \n def get_flat_models_from_routes(\n     routes: Sequence[Type[BaseRoute]]\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#6d4cc97266d9878c193d5d27c4a18b8c32702d57", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 493 | Lines Deleted: 0 | Files Changed: 7 | Hunks: 5 | Methods Changed: 47 | Complexity Δ (Sum/Max): 55/47 | Churn Δ: 493 | Churn Cumulative: 493 | Contributors (this commit): 1 | Commits (past 90d): 7 | Contributors (cumulative): 7 | DMM Complexity: 1.0\n\nDIFF:\n\n\n@@ -0,0 +1,13 @@\n+from fastapi.routing import APIRouter\n+\n+router = APIRouter()\n+\n+\n+@router.get(\"/dog\")\n+def get_a_dog():\n+    return \"Woof\"\n+\n+\n+@router.get(\"/cat\")\n+def get_a_cat():\n+    return \"Meow\"\n\n@@ -0,0 +1,13 @@\n+from fastapi.routing import APIRouter\n+\n+router = APIRouter()\n+\n+\n+@router.get(\"/dog\")\n+def get_b_dog():\n+    return \"B Woof\"\n+\n+\n+@router.get(\"/cat\")\n+def get_b_cat():\n+    return \"B Meow\"\n\n@@ -0,0 +1,350 @@\n+from fastapi.applications import FastAPI\n+from fastapi.params import (\n+    Body,\n+    Cookie,\n+    Depends,\n+    File,\n+    Form,\n+    Header,\n+    Param,\n+    Path,\n+    Query,\n+    Security,\n+)\n+from fastapi.security.http import HTTPBasic\n+from fastapi.security.oauth2 import (\n+    OAuth2,\n+    OAuth2PasswordRequestData,\n+    OAuth2PasswordRequestForm,\n+)\n+from pydantic import BaseModel\n+from starlette.responses import HTMLResponse, JSONResponse, PlainTextResponse\n+from starlette.status import HTTP_202_ACCEPTED\n+from starlette.testclient import TestClient\n+\n+from .endpoints.a import router as router_a\n+from .endpoints.b import router as router_b\n+\n+app = FastAPI()\n+\n+\n+app.include_router(router_a)\n+app.include_router(router_b, prefix=\"/b\")\n+\n+\n+@app.get(\"/text\")\n+def get_text():\n+    return \"Hello World\"\n+\n+\n+@app.get(\"/path/{item_id}\")\n+def get_id(item_id):\n+    return item_id\n+\n+\n+@app.get(\"/path/str/{item_id}\")\n+def get_str_id(item_id: str):\n+    return item_id\n+\n+\n+@app.get(\"/path/int/{item_id}\")\n+def get_int_id(item_id: int):\n+    return item_id\n+\n+\n+@app.get(\"/path/float/{item_id}\")\n+def get_float_id(item_id: float):\n+    return item_id\n+\n+\n+@app.get(\"/path/bool/{item_id}\")\n+def get_bool_id(item_id: bool):\n+    return item_id\n+\n+\n+@app.get(\"/path/param/{item_id}\")\n+def get_path_param_id(item_id: str = Path(None)):\n+    return item_id\n+\n+\n+@app.get(\"/path/param-required/{item_id}\")\n+def get_path_param_required_id(item_id: str = Path(...)):\n+    return item_id\n+\n+\n+@app.get(\"/query\")\n+def get_query(query):\n+    if query is None:\n+        return \"foo bar\"\n+    return f\"foo bar {query}\"\n+\n+\n+@app.get(\"/query/optional\")\n+def get_query_optional(query=None):\n+    if query is None:\n+        return \"foo bar\"\n+    return f\"foo bar {query}\"\n+\n+\n+@app.get(\"/query/int\")\n+def get_query_type(query: int):\n+    if query is None:\n+        return \"foo bar\"\n+    return f\"foo bar {query}\"\n+\n+\n+@app.get(\"/query/int/optional\")\n+def get_query_type_optional(query: int = None):\n+    if query is None:\n+        return \"foo bar\"\n+    return f\"foo bar {query}\"\n+\n+\n+@app.get(\"/query/param\")\n+def get_query_param(query=Query(None)):\n+    if query is None:\n+        return \"foo bar\"\n+    return f\"foo bar {query}\"\n+\n+\n+@app.get(\"/query/param-required\")\n+def get_query_param_required(query=Query(...)):\n+    if query is None:\n+        return \"foo bar\"\n+    return f\"foo bar {query}\"\n+\n+\n+@app.get(\"/query/param-required/int\")\n+def get_query_param_required_type(query: int = Query(...)):\n+    if query is None:\n+        return \"foo bar\"\n+    return f\"foo bar {query}\"\n+\n+\n+@app.get(\"/cookie\")\n+def get_cookie(coo=Cookie(None)):\n+    return coo\n+\n+\n+@app.get(\"/header\")\n+def get_header(head_name=Header(None)):\n+    return head_name\n+\n+\n+@app.get(\"/header_under\")\n+def get_header(head_name=Header(None, convert_underscores=False)):\n+    return head_name\n+\n+\n+@app.get(\"/param\")\n+def get_param(par=Param(None)):\n+    return par\n+\n+\n+@app.get(\"/security\")\n+def get_security(sec=Security(HTTPBasic())):\n+    return sec\n+\n+\n+reusable_oauth2 = OAuth2(\n+    flows={\n+        \"password\": {\n+            \"tokenUrl\": \"/token\",\n+            \"scopes\": {\"read:user\": \"Read a User\", \"write:user\": \"Create a user\"},\n+        }\n+    }\n+)\n+\n+\n+@app.get(\"/security/oauth2\")\n+def get_security_oauth2(sec=Security(reusable_oauth2, scopes=[\"read:user\"])):\n+    return sec\n+\n+\n+@app.post(\"/token\")\n+def post_token(request_data: OAuth2PasswordRequestForm = Form(...)):\n+    print(request_data)\n+    data = request_data.parse()\n+    print(data)\n+\n+    print(request_data())\n+    access_token = request_data.username + \":\" + request_data.password\n+    return {\"access_token\": access_token}\n+\n+\n+class Item(BaseModel):\n+    name: str\n+    price: float\n+    is_offer: bool\n+\n+\n+@app.put(\"/items/{item_id}\")\n+def put_item(item_id: str, item: Item):\n+    return item\n+\n+\n+@app.post(\"/items/\")\n+def post_item(item: Item):\n+    return item\n+\n+\n+@app.post(\"/items-all-params/{item_id}\")\n+def post_items_all_params(\n+    item_id: str = Path(...),\n+    body: Item = Body(...),\n+    query_a: int = Query(None),\n+    query_b=Query(None),\n+    coo: str = Cookie(None),\n+    x_head: int = Header(None),\n+    x_under: str = Header(None, convert_underscores=False),\n+):\n+    return {\n+        \"item_id\": item_id,\n+        \"body\": body,\n+        \"query_a\": query_a,\n+        \"query_b\": query_b,\n+        \"coo\": coo,\n+        \"x_head\": x_head,\n+        \"x_under\": x_under,\n+    }\n+\n+\n+@app.post(\"/items-all-params-defaults/{item_id}\")\n+def post_items_all_params_default(\n+    item_id: str,\n+    body_item_a: Item,\n+    body_item_b: Item,\n+    query_a: int,\n+    query_b: int,\n+    coo: str = Cookie(None),\n+    x_head: int = Header(None),\n+    x_under: str = Header(None, convert_underscores=False),\n+):\n+    return {\n+        \"item_id\": item_id,\n+        \"body_item_a\": body_item_a,\n+        \"body_item_b\": body_item_b,\n+        \"query_a\": query_a,\n+        \"query_b\": query_b,\n+        \"coo\": coo,\n+        \"x_head\": x_head,\n+        \"x_under\": x_under,\n+    }\n+\n+\n+@app.delete(\"/items/{item_id}\")\n+def delete_item(item_id: str):\n+    return item_id\n+\n+\n+@app.options(\"/options/\")\n+def options():\n+    return JSONResponse(headers={\"x-fastapi\": \"fast\"})\n+\n+\n+@app.head(\"/head/\")\n+def head():\n+    return {\"not sent\": \"nope\"}\n+\n+\n+@app.patch(\"/patch/{user_id}\")\n+def patch(user_id: str, increment: float):\n+    return {\"user_id\": user_id, \"total\": 5 + increment}\n+\n+\n+@app.trace(\"/trace/\")\n+def trace():\n+    return PlainTextResponse(media_type=\"message/http\")\n+\n+\n+@app.get(\"/model\", response_model=Item, status_code=HTTP_202_ACCEPTED)\n+def model():\n+    return {\"name\": \"Foo\", \"price\": \"5.0\", \"password\": \"not sent\"}\n+\n+\n+@app.get(\n+    \"/metadata\",\n+    tags=[\"tag1\", \"tag2\"],\n+    summary=\"The summary\",\n+    description=\"The description\",\n+    response_description=\"Response description\",\n+    deprecated=True,\n+    operation_id=\"a_very_long_and_strange_operation_id\",\n+)\n+def get_meta():\n+    return \"Foo\"\n+\n+\n+@app.get(\"/html\", content_type=HTMLResponse)\n+def get_html():\n+    return \"\"\"\n+    <html>\n+    <body>\n+    <h1>\n+    Some text inside\n+    </h1>\n+    </body>\n+    </html>\n+    \"\"\"\n+\n+\n+class FakeDB:\n+    def __init__(self):\n+        self.data = {\n+            \"johndoe\": {\n+                \"username\": \"johndoe\",\n+                \"password\": \"shouldbehashed\",\n+                \"fist_name\": \"John\",\n+                \"last_name\": \"Doe\",\n+            }\n+        }\n+\n+\n+class DBConnectionManager:\n+    def __init__(self):\n+        self.db = FakeDB()\n+\n+    def __call__(self):\n+        return self.db\n+\n+\n+connection_manager = DBConnectionManager()\n+\n+\n+class TokenUserData(BaseModel):\n+    username: str\n+    password: str\n+\n+\n+class UserInDB(BaseModel):\n+    username: str\n+    password: str\n+    fist_name: str\n+    last_name: str\n+\n+\n+def require_token(\n+    token: str = Security(reusable_oauth2, scopes=[\"read:user\", \"write:user\"])\n+):\n+    raw_token = token.replace(\"Bearer \", \"\")\n+    # Never do this plaintext password usage in production\n+    username, password = raw_token.split(\":\")\n+    return TokenUserData(username=username, password=password)\n+\n+\n+def require_user(\n+    db: FakeDB = Depends(connection_manager),\n+    user_data: TokenUserData = Depends(require_token),\n+):\n+    return db.data[user_data.username]\n+\n+\n+class UserOut(BaseModel):\n+    username: str\n+    fist_name: str\n+    last_name: str\n+\n+\n+@app.get(\"/dependency\", response_model=UserOut)\n+def get_dependency(user: UserInDB = Depends(require_user)):\n+    return user\n\n@@ -0,0 +1,73 @@\n+import pytest\n+from starlette.testclient import TestClient\n+\n+from .main import app\n+\n+client = TestClient(app)\n+\n+\n+def test_text_get():\n+    response = client.get(\"/text\")\n+    assert response.status_code == 200\n+    assert response.json() == \"Hello World\"\n+\n+\n+def test_nonexistent():\n+    response = client.get(\"/nonexistent\")\n+    assert response.status_code == 404\n+    assert response.json() == {\"detail\": \"Not Found\"}\n+\n+\n+response_not_valid_int = {\n+    \"detail\": [\n+        {\n+            \"loc\": [\"path\", \"item_id\"],\n+            \"msg\": \"value is not a valid integer\",\n+            \"type\": \"type_error.integer\",\n+        }\n+    ]\n+}\n+\n+response_not_valid_float = {\n+    \"detail\": [\n+        {\n+            \"loc\": [\"path\", \"item_id\"],\n+            \"msg\": \"value is not a valid float\",\n+            \"type\": \"type_error.float\",\n+        }\n+    ]\n+}\n+\n+\n+@pytest.mark.parametrize(\n+    \"path,expected_status,expected_response\",\n+    [\n+        (\"/path/foobar\", 200, \"foobar\"),\n+        (\"/path/str/foobar\", 200, \"foobar\"),\n+        (\"/path/str/42\", 200, \"42\"),\n+        (\"/path/str/True\", 200, \"True\"),\n+        (\"/path/int/foobar\", 422, response_not_valid_int),\n+        (\"/path/int/True\", 422, response_not_valid_int),\n+        (\"/path/int/42\", 200, 42),\n+        (\"/path/int/42.5\", 422, response_not_valid_int),\n+        (\"/path/float/foobar\", 422, response_not_valid_float),\n+        (\"/path/float/True\", 422, response_not_valid_float),\n+        (\"/path/float/42\", 200, 42),\n+        (\"/path/float/42.5\", 200, 42.5),\n+        (\"/path/bool/foobar\", 200, False),\n+        (\"/path/bool/True\", 200, True),\n+        (\"/path/bool/42\", 200, False),\n+        (\"/path/bool/42.5\", 200, False),\n+        (\"/path/bool/1\", 200, True),\n+        (\"/path/bool/0\", 200, False),\n+        (\"/path/bool/true\", 200, True),\n+        (\"/path/bool/False\", 200, False),\n+        (\"/path/bool/false\", 200, False),\n+        (\"/path/param/foo\", 200, \"foo\"),\n+        (\"/path/param-required/foo\", 200, \"foo\"),\n+    ],\n+)\n+def test_get_path(path, expected_status, expected_response):\n+    response = client.get(path)\n+    assert response.status_code == expected_status\n+    assert response.json() == expected_response\n\n@@ -0,0 +1,44 @@\n+import pytest\n+from starlette.testclient import TestClient\n+\n+from .main import app\n+\n+client = TestClient(app)\n+\n+response_missing = {\n+    \"detail\": [\n+        {\"loc\": [\"query\"], \"msg\": \"field required\", \"type\": \"value_error.missing\"}\n+    ]\n+}\n+\n+response_not_valid_int = {\n+    \"detail\": [\n+        {\n+            \"loc\": [\"query\", \"query\"],\n+            \"msg\": \"value is not a valid integer\",\n+            \"type\": \"type_error.integer\",\n+        }\n+    ]\n+}\n+\n+\n+@pytest.mark.parametrize(\n+    \"path,expected_status,expected_response\",\n+    [\n+        (\"/query\", 422, response_missing),\n+        (\"/query?query=baz\", 200, \"foo bar baz\"),\n+        (\"/query?not_declared=baz\", 422, response_missing),\n+        (\"/query/optional\", 200, \"foo bar\"),\n+        (\"/query/optional?query=baz\", 200, \"foo bar baz\"),\n+        (\"/query/optional?not_declared=baz\", 200, \"foo bar\"),\n+        (\"/query/int\", 422, response_missing),\n+        (\"/query/int?query=42\", 200, \"foo bar 42\"),\n+        (\"/query/int?query=42.5\", 422, response_not_valid_int),\n+        (\"/query/int?query=baz\", 422, response_not_valid_int),\n+        (\"/query/int?not_declared=baz\", 422, response_missing),\n+    ],\n+)\n+def test_get_path(path, expected_status, expected_response):\n+    response = client.get(path)\n+    assert response.status_code == expected_status\n+    assert response.json() == expected_response\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#3e4fc9f182d4a22bfd4d52836e52f5b62ea50dc1", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 2 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 9 | Contributors (this commit): 1 | Commits (past 90d): 3 | Contributors (cumulative): 1 | DMM Complexity: None\n\nDIFF:\n@@ -1,3 +1,3 @@\n-\"\"\"Fast API framework, fast high performance, fast to learn, fast to code\"\"\"\n+\"\"\"Fast API framework, high performance, fast to learn, fast to code, fast to production\"\"\"\n \n-__version__ = \"0.1\"\n+__version__ = \"0.1.0\"\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#246ea37994c8de491d97e05e1e5cc70c8024553a", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 235 | Lines Deleted: 0 | Files Changed: 2 | Hunks: 3 | Methods Changed: 17 | Complexity Δ (Sum/Max): 17/17 | Churn Δ: 235 | Churn Cumulative: 658 | Contributors (this commit): 2 | Commits (past 90d): 4 | Contributors (cumulative): 4 | DMM Complexity: 1.0\n\nDIFF:\n@@ -72,6 +72,91 @@ def get_path_param_required_id(item_id: str = Path(...)):\n     return item_id\n \n \n+@app.get(\"/path/param-minlength/{item_id}\")\n+def get_path_param_min_length(item_id: str = Path(..., min_length = 3)):\n+    return item_id\n+\n+\n+@app.get(\"/path/param-maxlength/{item_id}\")\n+def get_path_param_max_length(item_id: str = Path(..., max_length = 3)):\n+    return item_id\n+\n+\n+@app.get(\"/path/param-min_maxlength/{item_id}\")\n+def get_path_param_min_max_length(item_id: str = Path(..., max_length = 3, min_length = 2)):\n+    return item_id\n+\n+\n+@app.get(\"/path/param-gt/{item_id}\")\n+def get_path_param_gt(item_id: float = Path(..., gt = 3)):\n+    return item_id\n+\n+\n+@app.get(\"/path/param-gt0/{item_id}\")\n+def get_path_param_gt0(item_id: float = Path(..., gt = 0)):\n+    return item_id\n+\n+\n+@app.get(\"/path/param-ge/{item_id}\")\n+def get_path_param_ge(item_id: float = Path(..., ge = 3)):\n+    return item_id\n+\n+\n+@app.get(\"/path/param-lt/{item_id}\")\n+def get_path_param_lt(item_id: float = Path(..., lt = 3)):\n+    return item_id\n+\n+\n+@app.get(\"/path/param-lt0/{item_id}\")\n+def get_path_param_lt0(item_id: float = Path(..., lt = 0)):\n+    return item_id\n+\n+\n+@app.get(\"/path/param-le/{item_id}\")\n+def get_path_param_le(item_id: float = Path(..., le = 3)):\n+    return item_id\n+\n+\n+@app.get(\"/path/param-lt-gt/{item_id}\")\n+def get_path_param_lt_gt(item_id: float = Path(..., lt = 3, gt = 1)):\n+    return item_id\n+\n+\n+@app.get(\"/path/param-le-ge/{item_id}\")\n+def get_path_param_le_ge(item_id: float = Path(..., le = 3, ge = 1)):\n+    return item_id\n+\n+\n+@app.get(\"/path/param-lt-int/{item_id}\")\n+def get_path_param_lt_int(item_id: int = Path(..., lt = 3)):\n+    return item_id\n+\n+\n+@app.get(\"/path/param-gt-int/{item_id}\")\n+def get_path_param_gt_int(item_id: int = Path(..., gt = 3)):\n+    return item_id\n+\n+\n+@app.get(\"/path/param-le-int/{item_id}\")\n+def get_path_param_le_int(item_id: int = Path(..., le = 3)):\n+    return item_id\n+\n+\n+@app.get(\"/path/param-ge-int/{item_id}\")\n+def get_path_param_ge_int(item_id: int = Path(..., ge = 3)):\n+    return item_id\n+\n+\n+@app.get(\"/path/param-lt-gt-int/{item_id}\")\n+def get_path_param_lt_gt_int(item_id: int = Path(..., lt = 3, gt = 1)):\n+    return item_id\n+\n+\n+@app.get(\"/path/param-le-ge-int/{item_id}\")\n+def get_path_param_le_ge_int(item_id: int = Path(..., le = 3, ge = 1)):\n+    return item_id\n+\n+\n @app.get(\"/query\")\n def get_query(query):\n     if query is None:\n\n@@ -38,6 +38,105 @@ response_not_valid_float = {\n     ]\n }\n \n+response_at_least_3 = {\"detail\":[{\"loc\":[\"path\",\"item_id\"],\"msg\":\"ensure this value has at least 3 characters\",\"type\":\"value_error.any_str.min_length\",\"ctx\":{\"limit_value\":3}}]}\n+\n+\n+response_at_least_2 = {\"detail\":[{\"loc\":[\"path\",\"item_id\"],\"msg\":\"ensure this value has at least 2 characters\",\"type\":\"value_error.any_str.min_length\",\"ctx\":{\"limit_value\":2}}]}\n+\n+\n+response_maximum_3 = {\"detail\":[{\"loc\":[\"path\",\"item_id\"],\"msg\":\"ensure this value has at most 3 characters\",\"type\":\"value_error.any_str.max_length\",\"ctx\":{\"limit_value\":3}}]}\n+\n+\n+response_greater_than_3 = {\n+  \"detail\": [\n+    {\n+      \"loc\": [\n+        \"path\",\n+        \"item_id\"\n+      ],\n+      \"msg\": \"ensure this value is greater than 3\",\n+      \"type\": \"value_error.number.not_gt\",\n+      \"ctx\": {\n+        \"limit_value\": 3\n+      }\n+    }\n+  ]\n+}\n+\n+\n+response_greater_than_0 = {\n+  \"detail\": [\n+    {\n+      \"loc\": [\n+        \"path\",\n+        \"item_id\"\n+      ],\n+      \"msg\": \"ensure this value is greater than 0\",\n+      \"type\": \"value_error.number.not_gt\",\n+      \"ctx\": {\n+        \"limit_value\": 0\n+      }\n+    }\n+  ]\n+}\n+\n+\n+response_greater_than_1 = {\n+  \"detail\": [\n+    {\n+      \"loc\": [\n+        \"path\",\n+        \"item_id\"\n+      ],\n+      \"msg\": \"ensure this value is greater than 1\",\n+      \"type\": \"value_error.number.not_gt\",\n+      \"ctx\": {\n+        \"limit_value\": 1\n+      }\n+    }\n+  ]\n+}\n+\n+\n+response_greater_than_equal_3 = {\"detail\":[{\"loc\":[\"path\",\"item_id\"],\"msg\":\"ensure this value is greater than or equal to 3\",\"type\":\"value_error.number.not_ge\",\"ctx\":{\"limit_value\":3}}]}\n+\n+\n+response_less_than_3 = {\n+  \"detail\": [\n+    {\n+      \"loc\": [\n+        \"path\",\n+        \"item_id\"\n+      ],\n+      \"msg\": \"ensure this value is less than 3\",\n+      \"type\": \"value_error.number.not_lt\",\n+      \"ctx\": {\n+        \"limit_value\": 3\n+      }\n+    }\n+  ]\n+}\n+\n+\n+response_less_than_0 = {\n+  \"detail\": [\n+    {\n+      \"loc\": [\n+        \"path\",\n+        \"item_id\"\n+      ],\n+      \"msg\": \"ensure this value is less than 0\",\n+      \"type\": \"value_error.number.not_lt\",\n+      \"ctx\": {\n+        \"limit_value\": 0\n+      }\n+    }\n+  ]\n+}\n+\n+\n+response_less_than_equal_3 = {\"detail\":[{\"loc\":[\"path\",\"item_id\"],\"msg\":\"ensure this value is less than or equal to 3\",\"type\":\"value_error.number.not_le\",\"ctx\":{\"limit_value\":3}}]}\n+\n \n @pytest.mark.parametrize(\n     \"path,expected_status,expected_response\",\n@@ -65,6 +164,57 @@ response_not_valid_float = {\n         (\"/path/bool/false\", 200, False),\n         (\"/path/param/foo\", 200, \"foo\"),\n         (\"/path/param-required/foo\", 200, \"foo\"),\n+        (\"/path/param-minlength/foo\", 200, \"foo\"),\n+        (\"/path/param-minlength/fo\", 422, response_at_least_3),\n+        (\"/path/param-maxlength/foo\", 200, \"foo\"),\n+        (\"/path/param-maxlength/foobar\", 422, response_maximum_3),\n+        (\"/path/param-min_maxlength/foo\", 200, \"foo\"),\n+        (\"/path/param-min_maxlength/foobar\", 422, response_maximum_3),\n+        (\"/path/param-min_maxlength/f\", 422, response_at_least_2),\n+        (\"/path/param-gt/42\", 200, 42),\n+        (\"/path/param-gt/2\", 422, response_greater_than_3),\n+        (\"/path/param-gt0/0.05\", 200, 0.05),\n+        (\"/path/param-gt0/0\", 422, response_greater_than_0),\n+        (\"/path/param-ge/42\", 200, 42),\n+        (\"/path/param-ge/3\", 200, 3),\n+        (\"/path/param-ge/2\", 422, response_greater_than_equal_3),\n+        (\"/path/param-lt/42\", 422, response_less_than_3),\n+        (\"/path/param-lt/2\", 200, 2),\n+        (\"/path/param-lt0/-1\", 200, -1),\n+        (\"/path/param-lt0/0\", 422, response_less_than_0),\n+        (\"/path/param-le/42\", 422, response_less_than_equal_3),\n+        (\"/path/param-le/3\", 200, 3),\n+        (\"/path/param-le/2\", 200, 2),\n+        (\"/path/param-lt-gt/2\", 200, 2),\n+        (\"/path/param-lt-gt/4\", 422, response_less_than_3),\n+        (\"/path/param-lt-gt/0\", 422, response_greater_than_1),\n+        (\"/path/param-le-ge/2\", 200, 2),\n+        (\"/path/param-le-ge/1\", 200, 1),\n+        (\"/path/param-le-ge/3\", 200, 3),\n+        (\"/path/param-le-ge/4\", 422, response_less_than_equal_3),\n+        (\"/path/param-lt-int/2\", 200, 2),\n+        (\"/path/param-lt-int/42\", 422, response_less_than_3),\n+        (\"/path/param-lt-int/2.7\", 422, response_not_valid_int),\n+        (\"/path/param-gt-int/42\", 200, 42),\n+        (\"/path/param-gt-int/2\", 422, response_greater_than_3),\n+        (\"/path/param-gt-int/2.7\", 422, response_not_valid_int),\n+        (\"/path/param-le-int/42\", 422, response_less_than_equal_3),\n+        (\"/path/param-le-int/3\", 200, 3),\n+        (\"/path/param-le-int/2\", 200, 2),\n+        (\"/path/param-le-int/2.7\", 422, response_not_valid_int),\n+        (\"/path/param-ge-int/42\", 200, 42),\n+        (\"/path/param-ge-int/3\", 200, 3),\n+        (\"/path/param-ge-int/2\", 422, response_greater_than_equal_3),\n+        (\"/path/param-ge-int/2.7\", 422, response_not_valid_int),\n+        (\"/path/param-lt-gt-int/2\", 200, 2),\n+        (\"/path/param-lt-gt-int/4\", 422, response_less_than_3),\n+        (\"/path/param-lt-gt-int/0\", 422, response_greater_than_1),\n+        (\"/path/param-lt-gt-int/2.7\", 422, response_not_valid_int),\n+        (\"/path/param-le-ge-int/2\", 200, 2),\n+        (\"/path/param-le-ge-int/1\", 200, 1),\n+        (\"/path/param-le-ge-int/3\", 200, 3),\n+        (\"/path/param-le-ge-int/4\", 422, response_less_than_equal_3),\n+        (\"/path/param-le-ge-int/2.7\", 422, response_not_valid_int),\n     ],\n )\n def test_get_path(path, expected_status, expected_response):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#8cc9ccab92e0de849f344fe895b06c2b7ea6ceac", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 11 | Lines Deleted: 3 | Files Changed: 3 | Hunks: 4 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 14 | Churn Cumulative: 615 | Contributors (this commit): 1 | Commits (past 90d): 11 | Contributors (cumulative): 3 | DMM Complexity: None\n\nDIFF:\n@@ -1,3 +1,7 @@\n-\"\"\"Fast API framework, high performance, fast to learn, fast to code, fast to production\"\"\"\n+\"\"\"FastAPI framework, high performance, easy to learn, fast to code, ready for production\"\"\"\n \n-__version__ = \"0.1.0\"\n+__version__ = \"0.1.2\"\n+\n+from .applications import FastAPI\n+from .routing import APIRouter\n+from .params import Body, Path, Query, Header, Cookie, Form, File, Security, Depends\n\n@@ -124,7 +124,7 @@ def generate_operation_id(*, route: routing.APIRoute, method: str) -> str:\n def generate_operation_summary(*, route: routing.APIRoute, method: str) -> str:\n     if route.summary:\n         return route.summary\n-    return method.title() + \" \" + route.name.replace(\"_\", \" \").title()\n+    return route.name.replace(\"_\", \" \").title() + \" \" + method.title()\n \n \n def get_openapi_operation_metadata(*, route: routing.APIRoute, method: str) -> Dict:\n\n@@ -0,0 +1,4 @@\n+from .api_key import APIKeyQuery, APIKeyHeader, APIKeyCookie\n+from .http import HTTPBasic, HTTPBearer, HTTPDigest\n+from .oauth2 import OAuth2PasswordRequestForm, OAuth2\n+from .open_id_connect_url import OpenIdConnect\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#02dfce95a03e99f174a2dbe0fd003d5b1d11bf37", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 5 | Lines Deleted: 11 | Files Changed: 3 | Hunks: 6 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 16 | Churn Cumulative: 477 | Contributors (this commit): 2 | Commits (past 90d): 7 | Contributors (cumulative): 4 | DMM Complexity: None\n\nDIFF:\n@@ -1,4 +1,4 @@\n-from fastapi.routing import APIRouter\n+from fastapi import APIRouter\n \n router = APIRouter()\n \n\n@@ -1,4 +1,4 @@\n-from fastapi.routing import APIRouter\n+from fastapi import APIRouter\n \n router = APIRouter()\n \n\n@@ -1,22 +1,16 @@\n-from fastapi.applications import FastAPI\n-from fastapi.params import (\n+from fastapi.applications import (\n     Body,\n     Cookie,\n     Depends,\n+    FastAPI,\n     File,\n     Form,\n     Header,\n-    Param,\n     Path,\n     Query,\n     Security,\n )\n-from fastapi.security.http import HTTPBasic\n-from fastapi.security.oauth2 import (\n-    OAuth2,\n-    OAuth2PasswordRequestData,\n-    OAuth2PasswordRequestForm,\n-)\n+from fastapi.security import HTTPBasic, OAuth2, OAuth2PasswordRequestForm\n from pydantic import BaseModel\n from starlette.responses import HTMLResponse, JSONResponse, PlainTextResponse\n from starlette.status import HTTP_202_ACCEPTED\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#ad268bb80e91d2da7ade632ec10c7e5888277165", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 6 | Files Changed: 1 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): -1/0 | Churn Δ: 7 | Churn Cumulative: 454 | Contributors (this commit): 2 | Commits (past 90d): 4 | Contributors (cumulative): 2 | DMM Complexity: 0.0\n\nDIFF:\n@@ -1,4 +1,4 @@\n-from fastapi.applications import (\n+from fastapi import (\n     Body,\n     Cookie,\n     Depends,\n@@ -215,11 +215,6 @@ def get_header(head_name=Header(None, convert_underscores=False)):\n     return head_name\n \n \n-@app.get(\"/param\")\n-def get_param(par=Param(None)):\n-    return par\n-\n-\n @app.get(\"/security\")\n def get_security(sec=Security(HTTPBasic())):\n     return sec\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#da166b7967e7ec404be8053c39147b07887da45d", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 75 | Lines Deleted: 42 | Files Changed: 3 | Hunks: 21 | Methods Changed: 2 | Complexity Δ (Sum/Max): 2/2 | Churn Δ: 117 | Churn Cumulative: 2162 | Contributors (this commit): 2 | Commits (past 90d): 14 | Contributors (cumulative): 4 | DMM Complexity: 0.0\n\nDIFF:\n@@ -1,6 +1,6 @@\n \"\"\"FastAPI framework, high performance, easy to learn, fast to code, ready for production\"\"\"\n \n-__version__ = \"0.1.2\"\n+__version__ = \"0.1.3\"\n \n from .applications import FastAPI\n from .routing import APIRouter\n\n@@ -1,5 +1,6 @@\n import asyncio\n import inspect\n+import logging\n from typing import Any, Callable, List, Optional, Type\n \n from fastapi import params\n@@ -47,6 +48,7 @@ def get_app(\n     is_body_form = body_field and isinstance(body_field.schema, params.Form)\n \n     async def app(request: Request) -> Response:\n+        try:\n             body = None\n             if body_field:\n                 if is_body_form:\n@@ -59,9 +61,17 @@ def get_app(\n                             body[field] = value\n                 else:\n                     body = await request.json()\n+        except Exception:\n+            raise HTTPException(\n+                status_code=400, detail=\"There was an error parsing the body\"\n+            )\n+        try:\n             values, errors = await solve_dependencies(\n                 request=request, dependant=dependant, body=body\n             )\n+        except Exception as e:\n+            logging.error(\"Error solving dependencies\", e)\n+            raise HTTPException(status_code=400, detail=\"Error processing request\")\n         if errors:\n             errors_out = ValidationError(errors)\n             raise HTTPException(\n@@ -77,7 +87,10 @@ def get_app(\n                 return raw_response\n             if isinstance(raw_response, BaseModel):\n                 return content_type(\n-                    content=jsonable_encoder(raw_response), status_code=status_code\n+                    content=serialize_response(\n+                        field=response_field, response=raw_response\n+                    ),\n+                    status_code=status_code,\n                 )\n             errors = []\n             try:\n\n@@ -38,27 +38,49 @@ response_not_valid_float = {\n     ]\n }\n \n-response_at_least_3 = {\"detail\":[{\"loc\":[\"path\",\"item_id\"],\"msg\":\"ensure this value has at least 3 characters\",\"type\":\"value_error.any_str.min_length\",\"ctx\":{\"limit_value\":3}}]}\n+response_at_least_3 = {\n+    \"detail\": [\n+        {\n+            \"loc\": [\"path\", \"item_id\"],\n+            \"msg\": \"ensure this value has at least 3 characters\",\n+            \"type\": \"value_error.any_str.min_length\",\n+            \"ctx\": {\"limit_value\": 3},\n+        }\n+    ]\n+}\n \n \n-response_at_least_2 = {\"detail\":[{\"loc\":[\"path\",\"item_id\"],\"msg\":\"ensure this value has at least 2 characters\",\"type\":\"value_error.any_str.min_length\",\"ctx\":{\"limit_value\":2}}]}\n+response_at_least_2 = {\n+    \"detail\": [\n+        {\n+            \"loc\": [\"path\", \"item_id\"],\n+            \"msg\": \"ensure this value has at least 2 characters\",\n+            \"type\": \"value_error.any_str.min_length\",\n+            \"ctx\": {\"limit_value\": 2},\n+        }\n+    ]\n+}\n \n \n-response_maximum_3 = {\"detail\":[{\"loc\":[\"path\",\"item_id\"],\"msg\":\"ensure this value has at most 3 characters\",\"type\":\"value_error.any_str.max_length\",\"ctx\":{\"limit_value\":3}}]}\n+response_maximum_3 = {\n+    \"detail\": [\n+        {\n+            \"loc\": [\"path\", \"item_id\"],\n+            \"msg\": \"ensure this value has at most 3 characters\",\n+            \"type\": \"value_error.any_str.max_length\",\n+            \"ctx\": {\"limit_value\": 3},\n+        }\n+    ]\n+}\n \n \n response_greater_than_3 = {\n     \"detail\": [\n         {\n-      \"loc\": [\n-        \"path\",\n-        \"item_id\"\n-      ],\n+            \"loc\": [\"path\", \"item_id\"],\n             \"msg\": \"ensure this value is greater than 3\",\n             \"type\": \"value_error.number.not_gt\",\n-      \"ctx\": {\n-        \"limit_value\": 3\n-      }\n+            \"ctx\": {\"limit_value\": 3},\n         }\n     ]\n }\n@@ -67,15 +89,10 @@ response_greater_than_3 = {\n response_greater_than_0 = {\n     \"detail\": [\n         {\n-      \"loc\": [\n-        \"path\",\n-        \"item_id\"\n-      ],\n+            \"loc\": [\"path\", \"item_id\"],\n             \"msg\": \"ensure this value is greater than 0\",\n             \"type\": \"value_error.number.not_gt\",\n-      \"ctx\": {\n-        \"limit_value\": 0\n-      }\n+            \"ctx\": {\"limit_value\": 0},\n         }\n     ]\n }\n@@ -84,35 +101,34 @@ response_greater_than_0 = {\n response_greater_than_1 = {\n     \"detail\": [\n         {\n-      \"loc\": [\n-        \"path\",\n-        \"item_id\"\n-      ],\n+            \"loc\": [\"path\", \"item_id\"],\n             \"msg\": \"ensure this value is greater than 1\",\n             \"type\": \"value_error.number.not_gt\",\n-      \"ctx\": {\n-        \"limit_value\": 1\n-      }\n+            \"ctx\": {\"limit_value\": 1},\n         }\n     ]\n }\n \n \n-response_greater_than_equal_3 = {\"detail\":[{\"loc\":[\"path\",\"item_id\"],\"msg\":\"ensure this value is greater than or equal to 3\",\"type\":\"value_error.number.not_ge\",\"ctx\":{\"limit_value\":3}}]}\n+response_greater_than_equal_3 = {\n+    \"detail\": [\n+        {\n+            \"loc\": [\"path\", \"item_id\"],\n+            \"msg\": \"ensure this value is greater than or equal to 3\",\n+            \"type\": \"value_error.number.not_ge\",\n+            \"ctx\": {\"limit_value\": 3},\n+        }\n+    ]\n+}\n \n \n response_less_than_3 = {\n     \"detail\": [\n         {\n-      \"loc\": [\n-        \"path\",\n-        \"item_id\"\n-      ],\n+            \"loc\": [\"path\", \"item_id\"],\n             \"msg\": \"ensure this value is less than 3\",\n             \"type\": \"value_error.number.not_lt\",\n-      \"ctx\": {\n-        \"limit_value\": 3\n-      }\n+            \"ctx\": {\"limit_value\": 3},\n         }\n     ]\n }\n@@ -121,21 +137,25 @@ response_less_than_3 = {\n response_less_than_0 = {\n     \"detail\": [\n         {\n-      \"loc\": [\n-        \"path\",\n-        \"item_id\"\n-      ],\n+            \"loc\": [\"path\", \"item_id\"],\n             \"msg\": \"ensure this value is less than 0\",\n             \"type\": \"value_error.number.not_lt\",\n-      \"ctx\": {\n-        \"limit_value\": 0\n-      }\n+            \"ctx\": {\"limit_value\": 0},\n         }\n     ]\n }\n \n \n-response_less_than_equal_3 = {\"detail\":[{\"loc\":[\"path\",\"item_id\"],\"msg\":\"ensure this value is less than or equal to 3\",\"type\":\"value_error.number.not_le\",\"ctx\":{\"limit_value\":3}}]}\n+response_less_than_equal_3 = {\n+    \"detail\": [\n+        {\n+            \"loc\": [\"path\", \"item_id\"],\n+            \"msg\": \"ensure this value is less than or equal to 3\",\n+            \"type\": \"value_error.number.not_le\",\n+            \"ctx\": {\"limit_value\": 3},\n+        }\n+    ]\n+}\n \n \n @pytest.mark.parametrize(\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#b763a44328474c986795fa39fff739887437ff73", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 4 | Lines Deleted: 4 | Files Changed: 2 | Hunks: 4 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 8 | Churn Cumulative: 422 | Contributors (this commit): 1 | Commits (past 90d): 9 | Contributors (cumulative): 2 | DMM Complexity: None\n\nDIFF:\n@@ -1,6 +1,6 @@\n \"\"\"FastAPI framework, high performance, easy to learn, fast to code, ready for production\"\"\"\n \n-__version__ = \"0.1.3\"\n+__version__ = \"0.1.4\"\n \n from .applications import FastAPI\n from .routing import APIRouter\n\n@@ -6,13 +6,13 @@ from pydantic import BaseModel, Schema as PSchema\n from pydantic.types import UrlStr\n \n try:\n-    import pydantic.types.EmailStr\n+    import email_validator\n     from pydantic.types import EmailStr  # type: ignore\n except ImportError:\n     logging.warning(\n-        \"email-validator not installed, email fields will be treated as str\"\n+        \"email-validator not installed, email fields will be treated as str.\\n\" +\n+        \"To install, run: pip install email-validator\"\n     )\n-\n     class EmailStr(str):  # type: ignore\n         pass\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#9a6fcdd13c6fed31f09f0843d42094904de63562", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 6 | Lines Deleted: 4 | Files Changed: 3 | Hunks: 4 | Methods Changed: 2 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 10 | Churn Cumulative: 2252 | Contributors (this commit): 1 | Commits (past 90d): 18 | Contributors (cumulative): 3 | DMM Complexity: 0.0\n\nDIFF:\n@@ -1,6 +1,6 @@\n \"\"\"FastAPI framework, high performance, easy to learn, fast to code, ready for production\"\"\"\n \n-__version__ = \"0.1.4\"\n+__version__ = \"0.1.5\"\n \n from .applications import FastAPI\n from .routing import APIRouter\n\n@@ -10,9 +10,10 @@ try:\n     from pydantic.types import EmailStr  # type: ignore\n except ImportError:\n     logging.warning(\n-        \"email-validator not installed, email fields will be treated as str.\\n\" +\n-        \"To install, run: pip install email-validator\"\n+        \"email-validator not installed, email fields will be treated as str.\\n\"\n+        + \"To install, run: pip install email-validator\"\n     )\n+\n     class EmailStr(str):  # type: ignore\n         pass\n \n\n@@ -61,7 +61,8 @@ def get_app(\n                             body[field] = value\n                 else:\n                     body = await request.json()\n-        except Exception:\n+        except Exception as e:\n+            logging.error(\"Error getting request body\", e)\n             raise HTTPException(\n                 status_code=400, detail=\"There was an error parsing the body\"\n             )\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#a2ccb6e31758dc7c9b23c73b97fe2307a8aa6763", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 8 | Lines Deleted: 0 | Files Changed: 2 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 8 | Churn Cumulative: 506 | Contributors (this commit): 2 | Commits (past 90d): 7 | Contributors (cumulative): 3 | DMM Complexity: 1.0\n\nDIFF:\n@@ -179,6 +179,11 @@ def get_query_type_optional(query: int = None):\n     return f\"foo bar {query}\"\n \n \n+@app.get(\"/query/int/default\")\n+def get_query_type_optional(query: int = 10):\n+    return f\"foo bar {query}\"\n+\n+\n @app.get(\"/query/param\")\n def get_query_param(query=Query(None)):\n     if query is None:\n\n@@ -36,6 +36,9 @@ response_not_valid_int = {\n         (\"/query/int?query=42.5\", 422, response_not_valid_int),\n         (\"/query/int?query=baz\", 422, response_not_valid_int),\n         (\"/query/int?not_declared=baz\", 422, response_missing),\n+        (\"/query/int/default\", 200, \"foo bar 10\"),\n+        (\"/query/int/default?query=50\", 200, \"foo bar 50\"),\n+        (\"/query/int/default?query=foo\", 422, response_not_valid_int),\n     ],\n )\n def test_get_path(path, expected_status, expected_response):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#6f68666e0eafefe1d45564f688f33750b4fdfa64", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 6 | Lines Deleted: 2 | Files Changed: 2 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 8 | Churn Cumulative: 439 | Contributors (this commit): 1 | Commits (past 90d): 12 | Contributors (cumulative): 2 | DMM Complexity: 0.0\n\nDIFF:\n@@ -1,6 +1,6 @@\n \"\"\"FastAPI framework, high performance, easy to learn, fast to code, ready for production\"\"\"\n \n-__version__ = \"0.1.5\"\n+__version__ = \"0.1.6\"\n \n from .applications import FastAPI\n from .routing import APIRouter\n\n@@ -82,7 +82,11 @@ def get_dependant(*, path: str, call: Callable, name: str = None) -> Dependant:\n                 default_schema=params.Path,\n                 force_type=params.ParamTypes.path,\n             )\n-        elif (param.default == param.empty or param.default is None) and (\n+        elif (\n+            param.default == param.empty\n+            or param.default is None\n+            or type(param.default) in param_supported_types\n+        ) and (\n             param.annotation == param.empty\n             or lenient_issubclass(param.annotation, param_supported_types)\n         ):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
