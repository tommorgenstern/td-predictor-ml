{"custom_id": "fastapi#9da626eb2cb02595a7c25129fa5afa4ea772581f", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 151 | Contributors (this commit): 1 | Commits (past 90d): 33 | Contributors (cumulative): 1 | DMM Complexity: None\n\nDIFF:\n@@ -1,6 +1,6 @@\n \"\"\"FastAPI framework, high performance, easy to learn, fast to code, ready for production\"\"\"\n \n-__version__ = \"0.26.0\"\n+__version__ = \"0.27.0\"\n \n from starlette.background import BackgroundTasks\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#3ed112e8a93d1b6fdcdf3f9fe9e8df986114cc1c", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 3 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 2 | Methods Changed: 2 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 22 | Contributors (this commit): 1 | Commits (past 90d): 2 | Contributors (cumulative): 1 | DMM Complexity: None\n\nDIFF:\n@@ -1,10 +1,12 @@\n+from typing import Any\n+\n from pydantic import ValidationError\n from starlette.exceptions import HTTPException as StarletteHTTPException\n \n \n class HTTPException(StarletteHTTPException):\n     def __init__(\n-        self, status_code: int, detail: str = None, headers: dict = None\n+        self, status_code: int, detail: Any = None, headers: dict = None\n     ) -> None:\n         super().__init__(status_code=status_code, detail=detail)\n         self.headers = headers\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#d262f6e9296993e528e2327f0a73f7bf5514e7c6", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 5 | Lines Deleted: 2 | Files Changed: 2 | Hunks: 3 | Methods Changed: 2 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 7 | Churn Cumulative: 308 | Contributors (this commit): 1 | Commits (past 90d): 6 | Contributors (cumulative): 2 | DMM Complexity: 0.0\n\nDIFF:\n@@ -112,10 +112,13 @@ class HTTPBearer(HTTPBase):\n             else:\n                 return None\n         if scheme.lower() != \"bearer\":\n+            if self.auto_error:\n                 raise HTTPException(\n                     status_code=HTTP_403_FORBIDDEN,\n                     detail=\"Invalid authentication credentials\",\n                 )\n+            else:\n+                return None\n         return HTTPAuthorizationCredentials(scheme=scheme, credentials=credentials)\n \n \n\n@@ -64,5 +64,5 @@ def test_security_http_bearer_no_credentials():\n \n def test_security_http_bearer_incorrect_scheme_credentials():\n     response = client.get(\"/users/me\", headers={\"Authorization\": \"Basic notreally\"})\n-    assert response.status_code == 403\n-    assert response.json() == {\"detail\": \"Invalid authentication credentials\"}\n+    assert response.status_code == 200\n+    assert response.json() == {\"msg\": \"Create an account first\"}\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#2a7ef5504ac4f6233d1e7f54f968804c6f1934fb", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 153 | Contributors (this commit): 1 | Commits (past 90d): 30 | Contributors (cumulative): 1 | DMM Complexity: None\n\nDIFF:\n@@ -1,6 +1,6 @@\n \"\"\"FastAPI framework, high performance, easy to learn, fast to code, ready for production\"\"\"\n \n-__version__ = \"0.27.0\"\n+__version__ = \"0.27.1\"\n \n from starlette.background import BackgroundTasks\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#c7db2ff8583e0b1962315c55711b1efb68ccdf0d", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 214 | Lines Deleted: 3 | Files Changed: 6 | Hunks: 10 | Methods Changed: 26 | Complexity Δ (Sum/Max): 25/14 | Churn Δ: 217 | Churn Cumulative: 1288 | Contributors (this commit): 3 | Commits (past 90d): 18 | Contributors (cumulative): 8 | DMM Complexity: 0.9795918367346939\n\nDIFF:\n@@ -0,0 +1,9 @@\n+from fastapi import FastAPI, Query\n+\n+app = FastAPI()\n+\n+\n+@app.get(\"/items/\")\n+async def read_items(q: list = Query(None)):\n+    query_items = {\"q\": q}\n+    return query_items\n\n@@ -127,12 +127,13 @@ def is_scalar_field(field: Field) -> bool:\n     return (\n         field.shape == Shape.SINGLETON\n         and not lenient_issubclass(field.type_, BaseModel)\n+        and not lenient_issubclass(field.type_, sequence_types + (dict,))\n         and not isinstance(field.schema, params.Body)\n     )\n \n \n def is_scalar_sequence_field(field: Field) -> bool:\n-    if field.shape in sequence_shapes and not lenient_issubclass(\n+    if (field.shape in sequence_shapes) and not lenient_issubclass(\n         field.type_, BaseModel\n     ):\n         if field.sub_fields is not None:\n@@ -140,6 +141,8 @@ def is_scalar_sequence_field(field: Field) -> bool:\n                 if not is_scalar_field(sub_field):\n                     return False\n         return True\n+    if lenient_issubclass(field.type_, sequence_types):\n+        return True\n     return False\n \n \n@@ -346,7 +349,7 @@ def request_params_to_args(\n     values = {}\n     errors = []\n     for field in required_params:\n-        if field.shape in sequence_shapes and isinstance(\n+        if is_scalar_sequence_field(field) and isinstance(\n             received_params, (QueryParams, Headers)\n         ):\n             value = received_params.getlist(field.alias) or field.default\n\n@@ -0,0 +1,77 @@\n+from typing import Dict, List, Tuple\n+\n+import pytest\n+from fastapi import FastAPI\n+from pydantic import BaseModel\n+\n+\n+def test_invalid_sequence():\n+    with pytest.raises(AssertionError):\n+        app = FastAPI()\n+\n+        class Item(BaseModel):\n+            title: str\n+\n+        @app.get(\"/items/{id}\")\n+        def read_items(id: List[Item]):\n+            pass  # pragma: no cover\n+\n+\n+def test_invalid_tuple():\n+    with pytest.raises(AssertionError):\n+        app = FastAPI()\n+\n+        class Item(BaseModel):\n+            title: str\n+\n+        @app.get(\"/items/{id}\")\n+        def read_items(id: Tuple[Item, Item]):\n+            pass  # pragma: no cover\n+\n+\n+def test_invalid_dict():\n+    with pytest.raises(AssertionError):\n+        app = FastAPI()\n+\n+        class Item(BaseModel):\n+            title: str\n+\n+        @app.get(\"/items/{id}\")\n+        def read_items(id: Dict[str, Item]):\n+            pass  # pragma: no cover\n+\n+\n+def test_invalid_simple_list():\n+    with pytest.raises(AssertionError):\n+        app = FastAPI()\n+\n+        @app.get(\"/items/{id}\")\n+        def read_items(id: list):\n+            pass  # pragma: no cover\n+\n+\n+def test_invalid_simple_tuple():\n+    with pytest.raises(AssertionError):\n+        app = FastAPI()\n+\n+        @app.get(\"/items/{id}\")\n+        def read_items(id: tuple):\n+            pass  # pragma: no cover\n+\n+\n+def test_invalid_simple_set():\n+    with pytest.raises(AssertionError):\n+        app = FastAPI()\n+\n+        @app.get(\"/items/{id}\")\n+        def read_items(id: set):\n+            pass  # pragma: no cover\n+\n+\n+def test_invalid_simple_dict():\n+    with pytest.raises(AssertionError):\n+        app = FastAPI()\n+\n+        @app.get(\"/items/{id}\")\n+        def read_items(id: dict):\n+            pass  # pragma: no cover\n\n@@ -1,4 +1,4 @@\n-from typing import List, Tuple\n+from typing import Dict, List, Tuple\n \n import pytest\n from fastapi import FastAPI, Query\n@@ -27,3 +27,27 @@ def test_invalid_tuple():\n         @app.get(\"/items/\")\n         def read_items(q: Tuple[Item, Item] = Query(None)):\n             pass  # pragma: no cover\n+\n+\n+def test_invalid_dict():\n+    with pytest.raises(AssertionError):\n+        app = FastAPI()\n+\n+        class Item(BaseModel):\n+            title: str\n+\n+        @app.get(\"/items/\")\n+        def read_items(q: Dict[str, Item] = Query(None)):\n+            pass  # pragma: no cover\n+\n+\n+def test_invalid_simple_dict():\n+    with pytest.raises(AssertionError):\n+        app = FastAPI()\n+\n+        class Item(BaseModel):\n+            title: str\n+\n+        @app.get(\"/items/\")\n+        def read_items(q: dict = Query(None)):\n+            pass  # pragma: no cover\n\n@@ -86,3 +86,10 @@ def test_multi_query_values():\n     response = client.get(url)\n     assert response.status_code == 200\n     assert response.json() == {\"q\": [\"foo\", \"bar\"]}\n+\n+\n+def test_query_no_values():\n+    url = \"/items/\"\n+    response = client.get(url)\n+    assert response.status_code == 200\n+    assert response.json() == {\"q\": None}\n\n@@ -0,0 +1,91 @@\n+from starlette.testclient import TestClient\n+\n+from query_params_str_validations.tutorial013 import app\n+\n+client = TestClient(app)\n+\n+openapi_schema = {\n+    \"openapi\": \"3.0.2\",\n+    \"info\": {\"title\": \"Fast API\", \"version\": \"0.1.0\"},\n+    \"paths\": {\n+        \"/items/\": {\n+            \"get\": {\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                    },\n+                    \"422\": {\n+                        \"description\": \"Validation Error\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\n+                                    \"$ref\": \"#/components/schemas/HTTPValidationError\"\n+                                }\n+                            }\n+                        },\n+                    },\n+                },\n+                \"summary\": \"Read Items\",\n+                \"operationId\": \"read_items_items__get\",\n+                \"parameters\": [\n+                    {\n+                        \"required\": False,\n+                        \"schema\": {\"title\": \"Q\", \"type\": \"array\"},\n+                        \"name\": \"q\",\n+                        \"in\": \"query\",\n+                    }\n+                ],\n+            }\n+        }\n+    },\n+    \"components\": {\n+        \"schemas\": {\n+            \"ValidationError\": {\n+                \"title\": \"ValidationError\",\n+                \"required\": [\"loc\", \"msg\", \"type\"],\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"loc\": {\n+                        \"title\": \"Location\",\n+                        \"type\": \"array\",\n+                        \"items\": {\"type\": \"string\"},\n+                    },\n+                    \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n+                    \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n+                },\n+            },\n+            \"HTTPValidationError\": {\n+                \"title\": \"HTTPValidationError\",\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"detail\": {\n+                        \"title\": \"Detail\",\n+                        \"type\": \"array\",\n+                        \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n+                    }\n+                },\n+            },\n+        }\n+    },\n+}\n+\n+\n+def test_openapi_schema():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200\n+    assert response.json() == openapi_schema\n+\n+\n+def test_multi_query_values():\n+    url = \"/items/?q=foo&q=bar\"\n+    response = client.get(url)\n+    assert response.status_code == 200\n+    assert response.json() == {\"q\": [\"foo\", \"bar\"]}\n+\n+\n+def test_query_no_values():\n+    url = \"/items/\"\n+    response = client.get(url)\n+    assert response.status_code == 200\n+    assert response.json() == {\"q\": None}\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#e2fadcbc90fcffadfb4384396cfbd3b121053948", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 155 | Contributors (this commit): 1 | Commits (past 90d): 31 | Contributors (cumulative): 1 | DMM Complexity: None\n\nDIFF:\n@@ -1,6 +1,6 @@\n \"\"\"FastAPI framework, high performance, easy to learn, fast to code, ready for production\"\"\"\n \n-__version__ = \"0.27.1\"\n+__version__ = \"0.27.2\"\n \n from starlette.background import BackgroundTasks\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#09cd7c47a13138842894c359653a051f4f799c31", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 502 | Lines Deleted: 14 | Files Changed: 8 | Hunks: 28 | Methods Changed: 41 | Complexity Δ (Sum/Max): 28/11 | Churn Δ: 516 | Churn Cumulative: 6092 | Contributors (this commit): 11 | Commits (past 90d): 61 | Contributors (cumulative): 24 | DMM Complexity: 0.8269230769230769\n\nDIFF:\n@@ -0,0 +1,55 @@\n+from fastapi import Depends, FastAPI\n+from starlette.testclient import TestClient\n+\n+app = FastAPI()\n+\n+\n+async def common_parameters(q: str = None, skip: int = 0, limit: int = 100):\n+    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n+\n+\n+@app.get(\"/items/\")\n+async def read_items(commons: dict = Depends(common_parameters)):\n+    return {\"message\": \"Hello Items!\", \"params\": commons}\n+\n+\n+@app.get(\"/users/\")\n+async def read_users(commons: dict = Depends(common_parameters)):\n+    return {\"message\": \"Hello Users!\", \"params\": commons}\n+\n+\n+client = TestClient(app)\n+\n+\n+async def override_dependency(q: str = None):\n+    return {\"q\": q, \"skip\": 5, \"limit\": 10}\n+\n+\n+app.dependency_overrides[common_parameters] = override_dependency\n+\n+\n+def test_override_in_items():\n+    response = client.get(\"/items/\")\n+    assert response.status_code == 200\n+    assert response.json() == {\n+        \"message\": \"Hello Items!\",\n+        \"params\": {\"q\": None, \"skip\": 5, \"limit\": 10},\n+    }\n+\n+\n+def test_override_in_items_with_q():\n+    response = client.get(\"/items/?q=foo\")\n+    assert response.status_code == 200\n+    assert response.json() == {\n+        \"message\": \"Hello Items!\",\n+        \"params\": {\"q\": \"foo\", \"skip\": 5, \"limit\": 10},\n+    }\n+\n+\n+def test_override_in_items_with_params():\n+    response = client.get(\"/items/?q=foo&skip=100&limit=200\")\n+    assert response.status_code == 200\n+    assert response.json() == {\n+        \"message\": \"Hello Items!\",\n+        \"params\": {\"q\": \"foo\", \"skip\": 5, \"limit\": 10},\n+    }\n\n@@ -38,7 +38,9 @@ class FastAPI(Starlette):\n         **extra: Dict[str, Any],\n     ) -> None:\n         self._debug = debug\n-        self.router: routing.APIRouter = routing.APIRouter(routes)\n+        self.router: routing.APIRouter = routing.APIRouter(\n+            routes, dependency_overrides_provider=self\n+        )\n         self.exception_middleware = ExceptionMiddleware(self.router, debug=debug)\n         self.error_middleware = ServerErrorMiddleware(\n             self.exception_middleware, debug=debug\n@@ -53,6 +55,7 @@ class FastAPI(Starlette):\n         self.redoc_url = redoc_url\n         self.swagger_ui_oauth2_redirect_url = swagger_ui_oauth2_redirect_url\n         self.extra = extra\n+        self.dependency_overrides: Dict[Callable, Callable] = {}\n \n         self.openapi_version = \"3.0.2\"\n \n\n@@ -30,6 +30,7 @@ class Dependant:\n         background_tasks_param_name: str = None,\n         security_scopes_param_name: str = None,\n         security_scopes: List[str] = None,\n+        path: str = None,\n     ) -> None:\n         self.path_params = path_params or []\n         self.query_params = query_params or []\n@@ -45,3 +46,5 @@ class Dependant:\n         self.security_scopes_param_name = security_scopes_param_name\n         self.name = name\n         self.call = call\n+        # Store the path to be able to re-generate a dependable from it in overrides\n+        self.path = path\n\n@@ -111,6 +111,7 @@ def get_flat_dependant(dependant: Dependant) -> Dependant:\n         cookie_params=dependant.cookie_params.copy(),\n         body_params=dependant.body_params.copy(),\n         security_schemes=dependant.security_requirements.copy(),\n+        path=dependant.path,\n     )\n     for sub_dependant in dependant.dependencies:\n         flat_sub = get_flat_dependant(sub_dependant)\n@@ -152,7 +153,7 @@ def get_dependant(\n     path_param_names = get_path_param_names(path)\n     endpoint_signature = inspect.signature(call)\n     signature_params = endpoint_signature.parameters\n-    dependant = Dependant(call=call, name=name)\n+    dependant = Dependant(call=call, name=name, path=path)\n     for param_name, param in signature_params.items():\n         if isinstance(param.default, params.Depends):\n             sub_dependant = get_param_sub_dependant(\n@@ -284,26 +285,46 @@ async def solve_dependencies(\n     dependant: Dependant,\n     body: Dict[str, Any] = None,\n     background_tasks: BackgroundTasks = None,\n+    dependency_overrides_provider: Any = None,\n ) -> Tuple[Dict[str, Any], List[ErrorWrapper], Optional[BackgroundTasks]]:\n     values: Dict[str, Any] = {}\n     errors: List[ErrorWrapper] = []\n+    sub_dependant: Dependant\n     for sub_dependant in dependant.dependencies:\n+        call: Callable = sub_dependant.call  # type: ignore\n+        use_sub_dependant = sub_dependant\n+        if (\n+            dependency_overrides_provider\n+            and dependency_overrides_provider.dependency_overrides\n+        ):\n+            original_call: Callable = sub_dependant.call  # type: ignore\n+            call = getattr(\n+                dependency_overrides_provider, \"dependency_overrides\", {}\n+            ).get(original_call, original_call)\n+            use_path: str = sub_dependant.path  # type: ignore\n+            use_sub_dependant = get_dependant(\n+                path=use_path,\n+                call=call,\n+                name=sub_dependant.name,\n+                security_scopes=sub_dependant.security_scopes,\n+            )\n+\n         sub_values, sub_errors, background_tasks = await solve_dependencies(\n             request=request,\n-            dependant=sub_dependant,\n+            dependant=use_sub_dependant,\n             body=body,\n             background_tasks=background_tasks,\n+            dependency_overrides_provider=dependency_overrides_provider,\n         )\n         if sub_errors:\n             errors.extend(sub_errors)\n             continue\n-        assert sub_dependant.call is not None, \"sub_dependant.call must be a function\"\n-        if is_coroutine_callable(sub_dependant.call):\n-            solved = await sub_dependant.call(**sub_values)\n+        if is_coroutine_callable(call):\n+            solved = await call(**sub_values)\n         else:\n-            solved = await run_in_threadpool(sub_dependant.call, **sub_values)\n-        if sub_dependant.name is not None:\n-            values[sub_dependant.name] = solved\n+            solved = await run_in_threadpool(call, **sub_values)\n+        if use_sub_dependant.name is not None:\n+            values[use_sub_dependant.name] = solved\n     path_values, path_errors = request_params_to_args(\n         dependant.path_params, request.path_params\n     )\n\n@@ -30,6 +30,7 @@ from starlette.routing import (\n     websocket_session,\n )\n from starlette.status import WS_1008_POLICY_VIOLATION\n+from starlette.types import ASGIApp\n from starlette.websockets import WebSocket\n \n \n@@ -80,6 +81,7 @@ def get_app(\n     response_model_exclude: Set[str] = set(),\n     response_model_by_alias: bool = True,\n     response_model_skip_defaults: bool = False,\n+    dependency_overrides_provider: Any = None,\n ) -> Callable:\n     assert dependant.call is not None, \"dependant.call must be a function\"\n     is_coroutine = asyncio.iscoroutinefunction(dependant.call)\n@@ -101,7 +103,10 @@ def get_app(\n                 status_code=400, detail=\"There was an error parsing the body\"\n             ) from e\n         values, errors, background_tasks = await solve_dependencies(\n-            request=request, dependant=dependant, body=body\n+            request=request,\n+            dependant=dependant,\n+            body=body,\n+            dependency_overrides_provider=dependency_overrides_provider,\n         )\n         if errors:\n             raise RequestValidationError(errors)\n@@ -132,10 +137,14 @@ def get_app(\n     return app\n \n \n-def get_websocket_app(dependant: Dependant) -> Callable:\n+def get_websocket_app(\n+    dependant: Dependant, dependency_overrides_provider: Any = None\n+) -> Callable:\n     async def app(websocket: WebSocket) -> None:\n         values, errors, _ = await solve_dependencies(\n-            request=websocket, dependant=dependant\n+            request=websocket,\n+            dependant=dependant,\n+            dependency_overrides_provider=dependency_overrides_provider,\n         )\n         if errors:\n             await websocket.close(code=WS_1008_POLICY_VIOLATION)\n@@ -147,12 +156,24 @@ def get_websocket_app(dependant: Dependant) -> Callable:\n \n \n class APIWebSocketRoute(routing.WebSocketRoute):\n-    def __init__(self, path: str, endpoint: Callable, *, name: str = None) -> None:\n+    def __init__(\n+        self,\n+        path: str,\n+        endpoint: Callable,\n+        *,\n+        name: str = None,\n+        dependency_overrides_provider: Any = None,\n+    ) -> None:\n         self.path = path\n         self.endpoint = endpoint\n         self.name = get_name(endpoint) if name is None else name\n         self.dependant = get_dependant(path=path, call=self.endpoint)\n-        self.app = websocket_session(get_websocket_app(dependant=self.dependant))\n+        self.app = websocket_session(\n+            get_websocket_app(\n+                dependant=self.dependant,\n+                dependency_overrides_provider=dependency_overrides_provider,\n+            )\n+        )\n         regex = \"^\" + path + \"$\"\n         regex = re.sub(\"{([a-zA-Z_][a-zA-Z0-9_]*)}\", r\"(?P<\\1>[^/]+)\", regex)\n         self.path_regex, self.path_format, self.param_convertors = compile_path(path)\n@@ -182,6 +203,7 @@ class APIRoute(routing.Route):\n         response_model_skip_defaults: bool = False,\n         include_in_schema: bool = True,\n         response_class: Type[Response] = JSONResponse,\n+        dependency_overrides_provider: Any = None,\n     ) -> None:\n         assert path.startswith(\"/\"), \"Routed paths must always start with '/'\"\n         self.path = path\n@@ -257,6 +279,7 @@ class APIRoute(routing.Route):\n                 get_parameterless_sub_dependant(depends=depends, path=self.path_format),\n             )\n         self.body_field = get_body_field(dependant=self.dependant, name=self.name)\n+        self.dependency_overrides_provider = dependency_overrides_provider\n         self.app = request_response(\n             get_app(\n                 dependant=self.dependant,\n@@ -268,11 +291,24 @@ class APIRoute(routing.Route):\n                 response_model_exclude=self.response_model_exclude,\n                 response_model_by_alias=self.response_model_by_alias,\n                 response_model_skip_defaults=self.response_model_skip_defaults,\n+                dependency_overrides_provider=self.dependency_overrides_provider,\n             )\n         )\n \n \n class APIRouter(routing.Router):\n+    def __init__(\n+        self,\n+        routes: List[routing.BaseRoute] = None,\n+        redirect_slashes: bool = True,\n+        default: ASGIApp = None,\n+        dependency_overrides_provider: Any = None,\n+    ) -> None:\n+        super().__init__(\n+            routes=routes, redirect_slashes=redirect_slashes, default=default\n+        )\n+        self.dependency_overrides_provider = dependency_overrides_provider\n+\n     def add_api_route(\n         self,\n         path: str,\n@@ -318,6 +354,7 @@ class APIRouter(routing.Router):\n             include_in_schema=include_in_schema,\n             response_class=response_class,\n             name=name,\n+            dependency_overrides_provider=self.dependency_overrides_provider,\n         )\n         self.routes.append(route)\n \n\n@@ -0,0 +1,313 @@\n+import pytest\n+from fastapi import APIRouter, Depends, FastAPI\n+from starlette.testclient import TestClient\n+\n+app = FastAPI()\n+\n+router = APIRouter()\n+\n+\n+async def common_parameters(q: str, skip: int = 0, limit: int = 100):\n+    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n+\n+\n+@app.get(\"/main-depends/\")\n+async def main_depends(commons: dict = Depends(common_parameters)):\n+    return {\"in\": \"main-depends\", \"params\": commons}\n+\n+\n+@app.get(\"/decorator-depends/\", dependencies=[Depends(common_parameters)])\n+async def decorator_depends():\n+    return {\"in\": \"decorator-depends\"}\n+\n+\n+@router.get(\"/router-depends/\")\n+async def router_depends(commons: dict = Depends(common_parameters)):\n+    return {\"in\": \"router-depends\", \"params\": commons}\n+\n+\n+@router.get(\"/router-decorator-depends/\", dependencies=[Depends(common_parameters)])\n+async def router_decorator_depends():\n+    return {\"in\": \"router-decorator-depends\"}\n+\n+\n+app.include_router(router)\n+\n+client = TestClient(app)\n+\n+\n+async def overrider_dependency_simple(q: str = None):\n+    return {\"q\": q, \"skip\": 5, \"limit\": 10}\n+\n+\n+async def overrider_sub_dependency(k: str):\n+    return {\"k\": k}\n+\n+\n+async def overrider_dependency_with_sub(msg: dict = Depends(overrider_sub_dependency)):\n+    return msg\n+\n+\n+@pytest.mark.parametrize(\n+    \"url,status_code,expected\",\n+    [\n+        (\n+            \"/main-depends/\",\n+            422,\n+            {\n+                \"detail\": [\n+                    {\n+                        \"loc\": [\"query\", \"q\"],\n+                        \"msg\": \"field required\",\n+                        \"type\": \"value_error.missing\",\n+                    }\n+                ]\n+            },\n+        ),\n+        (\n+            \"/main-depends/?q=foo\",\n+            200,\n+            {\"in\": \"main-depends\", \"params\": {\"q\": \"foo\", \"skip\": 0, \"limit\": 100}},\n+        ),\n+        (\n+            \"/main-depends/?q=foo&skip=100&limit=200\",\n+            200,\n+            {\"in\": \"main-depends\", \"params\": {\"q\": \"foo\", \"skip\": 100, \"limit\": 200}},\n+        ),\n+        (\n+            \"/decorator-depends/\",\n+            422,\n+            {\n+                \"detail\": [\n+                    {\n+                        \"loc\": [\"query\", \"q\"],\n+                        \"msg\": \"field required\",\n+                        \"type\": \"value_error.missing\",\n+                    }\n+                ]\n+            },\n+        ),\n+        (\"/decorator-depends/?q=foo\", 200, {\"in\": \"decorator-depends\"}),\n+        (\n+            \"/decorator-depends/?q=foo&skip=100&limit=200\",\n+            200,\n+            {\"in\": \"decorator-depends\"},\n+        ),\n+        (\n+            \"/router-depends/\",\n+            422,\n+            {\n+                \"detail\": [\n+                    {\n+                        \"loc\": [\"query\", \"q\"],\n+                        \"msg\": \"field required\",\n+                        \"type\": \"value_error.missing\",\n+                    }\n+                ]\n+            },\n+        ),\n+        (\n+            \"/router-depends/?q=foo\",\n+            200,\n+            {\"in\": \"router-depends\", \"params\": {\"q\": \"foo\", \"skip\": 0, \"limit\": 100}},\n+        ),\n+        (\n+            \"/router-depends/?q=foo&skip=100&limit=200\",\n+            200,\n+            {\"in\": \"router-depends\", \"params\": {\"q\": \"foo\", \"skip\": 100, \"limit\": 200}},\n+        ),\n+        (\n+            \"/router-decorator-depends/\",\n+            422,\n+            {\n+                \"detail\": [\n+                    {\n+                        \"loc\": [\"query\", \"q\"],\n+                        \"msg\": \"field required\",\n+                        \"type\": \"value_error.missing\",\n+                    }\n+                ]\n+            },\n+        ),\n+        (\"/router-decorator-depends/?q=foo\", 200, {\"in\": \"router-decorator-depends\"}),\n+        (\n+            \"/router-decorator-depends/?q=foo&skip=100&limit=200\",\n+            200,\n+            {\"in\": \"router-decorator-depends\"},\n+        ),\n+    ],\n+)\n+def test_normal_app(url, status_code, expected):\n+    response = client.get(url)\n+    assert response.status_code == status_code\n+    assert response.json() == expected\n+\n+\n+@pytest.mark.parametrize(\n+    \"url,status_code,expected\",\n+    [\n+        (\n+            \"/main-depends/\",\n+            200,\n+            {\"in\": \"main-depends\", \"params\": {\"q\": None, \"skip\": 5, \"limit\": 10}},\n+        ),\n+        (\n+            \"/main-depends/?q=foo\",\n+            200,\n+            {\"in\": \"main-depends\", \"params\": {\"q\": \"foo\", \"skip\": 5, \"limit\": 10}},\n+        ),\n+        (\n+            \"/main-depends/?q=foo&skip=100&limit=200\",\n+            200,\n+            {\"in\": \"main-depends\", \"params\": {\"q\": \"foo\", \"skip\": 5, \"limit\": 10}},\n+        ),\n+        (\"/decorator-depends/\", 200, {\"in\": \"decorator-depends\"}),\n+        (\n+            \"/router-depends/\",\n+            200,\n+            {\"in\": \"router-depends\", \"params\": {\"q\": None, \"skip\": 5, \"limit\": 10}},\n+        ),\n+        (\n+            \"/router-depends/?q=foo\",\n+            200,\n+            {\"in\": \"router-depends\", \"params\": {\"q\": \"foo\", \"skip\": 5, \"limit\": 10}},\n+        ),\n+        (\n+            \"/router-depends/?q=foo&skip=100&limit=200\",\n+            200,\n+            {\"in\": \"router-depends\", \"params\": {\"q\": \"foo\", \"skip\": 5, \"limit\": 10}},\n+        ),\n+        (\"/router-decorator-depends/\", 200, {\"in\": \"router-decorator-depends\"}),\n+    ],\n+)\n+def test_override_simple(url, status_code, expected):\n+    app.dependency_overrides[common_parameters] = overrider_dependency_simple\n+    response = client.get(url)\n+    assert response.status_code == status_code\n+    assert response.json() == expected\n+    app.dependency_overrides = {}\n+\n+\n+@pytest.mark.parametrize(\n+    \"url,status_code,expected\",\n+    [\n+        (\n+            \"/main-depends/\",\n+            422,\n+            {\n+                \"detail\": [\n+                    {\n+                        \"loc\": [\"query\", \"k\"],\n+                        \"msg\": \"field required\",\n+                        \"type\": \"value_error.missing\",\n+                    }\n+                ]\n+            },\n+        ),\n+        (\n+            \"/main-depends/?q=foo\",\n+            422,\n+            {\n+                \"detail\": [\n+                    {\n+                        \"loc\": [\"query\", \"k\"],\n+                        \"msg\": \"field required\",\n+                        \"type\": \"value_error.missing\",\n+                    }\n+                ]\n+            },\n+        ),\n+        (\"/main-depends/?k=bar\", 200, {\"in\": \"main-depends\", \"params\": {\"k\": \"bar\"}}),\n+        (\n+            \"/decorator-depends/\",\n+            422,\n+            {\n+                \"detail\": [\n+                    {\n+                        \"loc\": [\"query\", \"k\"],\n+                        \"msg\": \"field required\",\n+                        \"type\": \"value_error.missing\",\n+                    }\n+                ]\n+            },\n+        ),\n+        (\n+            \"/decorator-depends/?q=foo\",\n+            422,\n+            {\n+                \"detail\": [\n+                    {\n+                        \"loc\": [\"query\", \"k\"],\n+                        \"msg\": \"field required\",\n+                        \"type\": \"value_error.missing\",\n+                    }\n+                ]\n+            },\n+        ),\n+        (\"/decorator-depends/?k=bar\", 200, {\"in\": \"decorator-depends\"}),\n+        (\n+            \"/router-depends/\",\n+            422,\n+            {\n+                \"detail\": [\n+                    {\n+                        \"loc\": [\"query\", \"k\"],\n+                        \"msg\": \"field required\",\n+                        \"type\": \"value_error.missing\",\n+                    }\n+                ]\n+            },\n+        ),\n+        (\n+            \"/router-depends/?q=foo\",\n+            422,\n+            {\n+                \"detail\": [\n+                    {\n+                        \"loc\": [\"query\", \"k\"],\n+                        \"msg\": \"field required\",\n+                        \"type\": \"value_error.missing\",\n+                    }\n+                ]\n+            },\n+        ),\n+        (\n+            \"/router-depends/?k=bar\",\n+            200,\n+            {\"in\": \"router-depends\", \"params\": {\"k\": \"bar\"}},\n+        ),\n+        (\n+            \"/router-decorator-depends/\",\n+            422,\n+            {\n+                \"detail\": [\n+                    {\n+                        \"loc\": [\"query\", \"k\"],\n+                        \"msg\": \"field required\",\n+                        \"type\": \"value_error.missing\",\n+                    }\n+                ]\n+            },\n+        ),\n+        (\n+            \"/router-decorator-depends/?q=foo\",\n+            422,\n+            {\n+                \"detail\": [\n+                    {\n+                        \"loc\": [\"query\", \"k\"],\n+                        \"msg\": \"field required\",\n+                        \"type\": \"value_error.missing\",\n+                    }\n+                ]\n+            },\n+        ),\n+        (\"/router-decorator-depends/?k=bar\", 200, {\"in\": \"router-decorator-depends\"}),\n+    ],\n+)\n+def test_override_with_sub(url, status_code, expected):\n+    app.dependency_overrides[common_parameters] = overrider_dependency_with_sub\n+    response = client.get(url)\n+    assert response.status_code == status_code\n+    assert response.json() == expected\n+    app.dependency_overrides = {}\n\n\n@@ -0,0 +1,56 @@\n+from dependency_testing.tutorial001 import (\n+    app,\n+    client,\n+    test_override_in_items,\n+    test_override_in_items_with_params,\n+    test_override_in_items_with_q,\n+)\n+\n+\n+def test_override_in_items_run():\n+    test_override_in_items()\n+\n+\n+def test_override_in_items_with_q_run():\n+    test_override_in_items_with_q()\n+\n+\n+def test_override_in_items_with_params_run():\n+    test_override_in_items_with_params()\n+\n+\n+def test_override_in_users():\n+    response = client.get(\"/users/\")\n+    assert response.status_code == 200\n+    assert response.json() == {\n+        \"message\": \"Hello Users!\",\n+        \"params\": {\"q\": None, \"skip\": 5, \"limit\": 10},\n+    }\n+\n+\n+def test_override_in_users_with_q():\n+    response = client.get(\"/users/?q=foo\")\n+    assert response.status_code == 200\n+    assert response.json() == {\n+        \"message\": \"Hello Users!\",\n+        \"params\": {\"q\": \"foo\", \"skip\": 5, \"limit\": 10},\n+    }\n+\n+\n+def test_override_in_users_with_params():\n+    response = client.get(\"/users/?q=foo&skip=100&limit=200\")\n+    assert response.status_code == 200\n+    assert response.json() == {\n+        \"message\": \"Hello Users!\",\n+        \"params\": {\"q\": \"foo\", \"skip\": 5, \"limit\": 10},\n+    }\n+\n+\n+def test_normal_app():\n+    app.dependency_overrides = None\n+    response = client.get(\"/items/?q=foo&skip=100&limit=200\")\n+    assert response.status_code == 200\n+    assert response.json() == {\n+        \"message\": \"Hello Items!\",\n+        \"params\": {\"q\": \"foo\", \"skip\": 100, \"limit\": 200},\n+    }\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#bff5dbbf5d95812e129fb2ebfa6323879b33644e", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 128 | Lines Deleted: 20 | Files Changed: 6 | Hunks: 27 | Methods Changed: 27 | Complexity Δ (Sum/Max): -5/8 | Churn Δ: 148 | Churn Cumulative: 4711 | Contributors (this commit): 8 | Commits (past 90d): 48 | Contributors (cumulative): 15 | DMM Complexity: 1.0\n\nDIFF:\n@@ -30,6 +30,7 @@ class Dependant:\n         background_tasks_param_name: str = None,\n         security_scopes_param_name: str = None,\n         security_scopes: List[str] = None,\n+        use_cache: bool = True,\n         path: str = None,\n     ) -> None:\n         self.path_params = path_params or []\n@@ -46,5 +47,8 @@ class Dependant:\n         self.security_scopes_param_name = security_scopes_param_name\n         self.name = name\n         self.call = call\n+        self.use_cache = use_cache\n         # Store the path to be able to re-generate a dependable from it in overrides\n         self.path = path\n+        # Save the cache key at creation to optimize performance\n+        self.cache_key = (self.call, tuple(sorted(set(self.security_scopes or []))))\n\n@@ -95,7 +95,11 @@ def get_sub_dependant(\n             security_scheme=dependency, scopes=use_scopes\n         )\n     sub_dependant = get_dependant(\n-        path=path, call=dependency, name=name, security_scopes=security_scopes\n+        path=path,\n+        call=dependency,\n+        name=name,\n+        security_scopes=security_scopes,\n+        use_cache=depends.use_cache,\n     )\n     if security_requirement:\n         sub_dependant.security_requirements.append(security_requirement)\n@@ -111,6 +115,7 @@ def get_flat_dependant(dependant: Dependant) -> Dependant:\n         cookie_params=dependant.cookie_params.copy(),\n         body_params=dependant.body_params.copy(),\n         security_schemes=dependant.security_requirements.copy(),\n+        use_cache=dependant.use_cache,\n         path=dependant.path,\n     )\n     for sub_dependant in dependant.dependencies:\n@@ -148,12 +153,17 @@ def is_scalar_sequence_field(field: Field) -> bool:\n \n \n def get_dependant(\n-    *, path: str, call: Callable, name: str = None, security_scopes: List[str] = None\n+    *,\n+    path: str,\n+    call: Callable,\n+    name: str = None,\n+    security_scopes: List[str] = None,\n+    use_cache: bool = True,\n ) -> Dependant:\n     path_param_names = get_path_param_names(path)\n     endpoint_signature = inspect.signature(call)\n     signature_params = endpoint_signature.parameters\n-    dependant = Dependant(call=call, name=name, path=path)\n+    dependant = Dependant(call=call, name=name, path=path, use_cache=use_cache)\n     for param_name, param in signature_params.items():\n         if isinstance(param.default, params.Depends):\n             sub_dependant = get_param_sub_dependant(\n@@ -286,18 +296,29 @@ async def solve_dependencies(\n     body: Dict[str, Any] = None,\n     background_tasks: BackgroundTasks = None,\n     dependency_overrides_provider: Any = None,\n-) -> Tuple[Dict[str, Any], List[ErrorWrapper], Optional[BackgroundTasks]]:\n+    dependency_cache: Dict[Tuple[Callable, Tuple[str]], Any] = None,\n+) -> Tuple[\n+    Dict[str, Any],\n+    List[ErrorWrapper],\n+    Optional[BackgroundTasks],\n+    Dict[Tuple[Callable, Tuple[str]], Any],\n+]:\n     values: Dict[str, Any] = {}\n     errors: List[ErrorWrapper] = []\n+    dependency_cache = dependency_cache or {}\n     sub_dependant: Dependant\n     for sub_dependant in dependant.dependencies:\n-        call: Callable = sub_dependant.call  # type: ignore\n+        sub_dependant.call = cast(Callable, sub_dependant.call)\n+        sub_dependant.cache_key = cast(\n+            Tuple[Callable, Tuple[str]], sub_dependant.cache_key\n+        )\n+        call = sub_dependant.call\n         use_sub_dependant = sub_dependant\n         if (\n             dependency_overrides_provider\n             and dependency_overrides_provider.dependency_overrides\n         ):\n-            original_call: Callable = sub_dependant.call  # type: ignore\n+            original_call = sub_dependant.call\n             call = getattr(\n                 dependency_overrides_provider, \"dependency_overrides\", {}\n             ).get(original_call, original_call)\n@@ -309,22 +330,28 @@ async def solve_dependencies(\n                 security_scopes=sub_dependant.security_scopes,\n             )\n \n-        sub_values, sub_errors, background_tasks = await solve_dependencies(\n+        sub_values, sub_errors, background_tasks, sub_dependency_cache = await solve_dependencies(\n             request=request,\n             dependant=use_sub_dependant,\n             body=body,\n             background_tasks=background_tasks,\n             dependency_overrides_provider=dependency_overrides_provider,\n+            dependency_cache=dependency_cache,\n         )\n+        dependency_cache.update(sub_dependency_cache)\n         if sub_errors:\n             errors.extend(sub_errors)\n             continue\n-        if is_coroutine_callable(call):\n+        if sub_dependant.use_cache and sub_dependant.cache_key in dependency_cache:\n+            solved = dependency_cache[sub_dependant.cache_key]\n+        elif is_coroutine_callable(call):\n             solved = await call(**sub_values)\n         else:\n             solved = await run_in_threadpool(call, **sub_values)\n-        if use_sub_dependant.name is not None:\n-            values[use_sub_dependant.name] = solved\n+        if sub_dependant.name is not None:\n+            values[sub_dependant.name] = solved\n+        if sub_dependant.cache_key not in dependency_cache:\n+            dependency_cache[sub_dependant.cache_key] = solved\n     path_values, path_errors = request_params_to_args(\n         dependant.path_params, request.path_params\n     )\n@@ -360,7 +387,7 @@ async def solve_dependencies(\n         values[dependant.security_scopes_param_name] = SecurityScopes(\n             scopes=dependant.security_scopes\n         )\n-    return values, errors, background_tasks\n+    return values, errors, background_tasks, dependency_cache\n \n \n def request_params_to_args(\n\n@@ -238,11 +238,13 @@ def File(  # noqa: N802\n     )\n \n \n-def Depends(dependency: Callable = None) -> Any:  # noqa: N802\n-    return params.Depends(dependency=dependency)\n+def Depends(  # noqa: N802\n+    dependency: Callable = None, *, use_cache: bool = True\n+) -> Any:\n+    return params.Depends(dependency=dependency, use_cache=use_cache)\n \n \n def Security(  # noqa: N802\n-    dependency: Callable = None, scopes: Sequence[str] = None\n+    dependency: Callable = None, *, scopes: Sequence[str] = None, use_cache: bool = True\n ) -> Any:\n-    return params.Security(dependency=dependency, scopes=scopes)\n+    return params.Security(dependency=dependency, scopes=scopes, use_cache=use_cache)\n\n@@ -308,11 +308,18 @@ class File(Form):\n \n \n class Depends:\n-    def __init__(self, dependency: Callable = None):\n+    def __init__(self, dependency: Callable = None, *, use_cache: bool = True):\n         self.dependency = dependency\n+        self.use_cache = use_cache\n \n \n class Security(Depends):\n-    def __init__(self, dependency: Callable = None, scopes: Sequence[str] = None):\n+    def __init__(\n+        self,\n+        dependency: Callable = None,\n+        *,\n+        scopes: Sequence[str] = None,\n+        use_cache: bool = True,\n+    ):\n+        super().__init__(dependency=dependency, use_cache=use_cache)\n         self.scopes = scopes or []\n-        super().__init__(dependency=dependency)\n\n@@ -102,7 +102,7 @@ def get_app(\n             raise HTTPException(\n                 status_code=400, detail=\"There was an error parsing the body\"\n             ) from e\n-        values, errors, background_tasks = await solve_dependencies(\n+        values, errors, background_tasks, _ = await solve_dependencies(\n             request=request,\n             dependant=dependant,\n             body=body,\n@@ -141,7 +141,7 @@ def get_websocket_app(\n     dependant: Dependant, dependency_overrides_provider: Any = None\n ) -> Callable:\n     async def app(websocket: WebSocket) -> None:\n-        values, errors, _ = await solve_dependencies(\n+        values, errors, _, _2 = await solve_dependencies(\n             request=websocket,\n             dependant=dependant,\n             dependency_overrides_provider=dependency_overrides_provider,\n\n@@ -0,0 +1,68 @@\n+from fastapi import Depends, FastAPI\n+from starlette.testclient import TestClient\n+\n+app = FastAPI()\n+\n+counter_holder = {\"counter\": 0}\n+\n+\n+async def dep_counter():\n+    counter_holder[\"counter\"] += 1\n+    return counter_holder[\"counter\"]\n+\n+\n+async def super_dep(count: int = Depends(dep_counter)):\n+    return count\n+\n+\n+@app.get(\"/counter/\")\n+async def get_counter(count: int = Depends(dep_counter)):\n+    return {\"counter\": count}\n+\n+\n+@app.get(\"/sub-counter/\")\n+async def get_sub_counter(\n+    subcount: int = Depends(super_dep), count: int = Depends(dep_counter)\n+):\n+    return {\"counter\": count, \"subcounter\": subcount}\n+\n+\n+@app.get(\"/sub-counter-no-cache/\")\n+async def get_sub_counter_no_cache(\n+    subcount: int = Depends(super_dep),\n+    count: int = Depends(dep_counter, use_cache=False),\n+):\n+    return {\"counter\": count, \"subcounter\": subcount}\n+\n+\n+client = TestClient(app)\n+\n+\n+def test_normal_counter():\n+    counter_holder[\"counter\"] = 0\n+    response = client.get(\"/counter/\")\n+    assert response.status_code == 200\n+    assert response.json() == {\"counter\": 1}\n+    response = client.get(\"/counter/\")\n+    assert response.status_code == 200\n+    assert response.json() == {\"counter\": 2}\n+\n+\n+def test_sub_counter():\n+    counter_holder[\"counter\"] = 0\n+    response = client.get(\"/sub-counter/\")\n+    assert response.status_code == 200\n+    assert response.json() == {\"counter\": 1, \"subcounter\": 1}\n+    response = client.get(\"/sub-counter/\")\n+    assert response.status_code == 200\n+    assert response.json() == {\"counter\": 2, \"subcounter\": 2}\n+\n+\n+def test_sub_counter_no_cache():\n+    counter_holder[\"counter\"] = 0\n+    response = client.get(\"/sub-counter-no-cache/\")\n+    assert response.status_code == 200\n+    assert response.json() == {\"counter\": 2, \"subcounter\": 1}\n+    response = client.get(\"/sub-counter-no-cache/\")\n+    assert response.status_code == 200\n+    assert response.json() == {\"counter\": 4, \"subcounter\": 3}\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#5700d65188caf50bacbec829e90441697480971f", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 157 | Contributors (this commit): 1 | Commits (past 90d): 32 | Contributors (cumulative): 1 | DMM Complexity: None\n\nDIFF:\n@@ -1,6 +1,6 @@\n \"\"\"FastAPI framework, high performance, easy to learn, fast to code, ready for production\"\"\"\n \n-__version__ = \"0.27.2\"\n+__version__ = \"0.28.0\"\n \n from starlette.background import BackgroundTasks\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#5f7fe926abf8b519c3b41199054afca81700a40e", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 133 | Lines Deleted: 5 | Files Changed: 11 | Hunks: 25 | Methods Changed: 17 | Complexity Δ (Sum/Max): 13/4 | Churn Δ: 138 | Churn Cumulative: 4080 | Contributors (this commit): 8 | Commits (past 90d): 55 | Contributors (cumulative): 20 | DMM Complexity: 0.5\n\nDIFF:\n@@ -0,0 +1,15 @@\n+from fastapi import FastAPI\n+from starlette.responses import Response\n+from starlette.status import HTTP_201_CREATED\n+\n+app = FastAPI()\n+\n+tasks = {\"foo\": \"Listen to the Bar Fighters\"}\n+\n+\n+@app.put(\"/get-or-create-task/{task_id}\", status_code=200)\n+def get_or_create_task(task_id: str, response: Response):\n+    if task_id not in tasks:\n+        tasks[task_id] = \"This didn't exist before\"\n+        response.status_code = HTTP_201_CREATED\n+    return tasks[task_id]\n\n@@ -0,0 +1,10 @@\n+from fastapi import FastAPI\n+from starlette.responses import Response\n+\n+app = FastAPI()\n+\n+\n+@app.post(\"/cookie-and-object/\")\n+def create_cookie(response: Response):\n+    response.set_cookie(key=\"fakesession\", value=\"fake-cookie-session-value\")\n+    return {\"message\": \"Come to the dark side, we have cookies\"}\n\n@@ -0,0 +1,10 @@\n+from fastapi import FastAPI\n+from starlette.responses import Response\n+\n+app = FastAPI()\n+\n+\n+@app.get(\"/headers-and-object/\")\n+def get_headers(response: Response):\n+    response.headers[\"X-Cat-Dog\"] = \"alone in the world\"\n+    return {\"message\": \"Hello World\"}\n\n@@ -27,6 +27,7 @@ class Dependant:\n         call: Callable = None,\n         request_param_name: str = None,\n         websocket_param_name: str = None,\n+        response_param_name: str = None,\n         background_tasks_param_name: str = None,\n         security_scopes_param_name: str = None,\n         security_scopes: List[str] = None,\n@@ -42,6 +43,7 @@ class Dependant:\n         self.security_requirements = security_schemes or []\n         self.request_param_name = request_param_name\n         self.websocket_param_name = websocket_param_name\n+        self.response_param_name = response_param_name\n         self.background_tasks_param_name = background_tasks_param_name\n         self.security_scopes = security_scopes\n         self.security_scopes_param_name = security_scopes_param_name\n\n@@ -31,6 +31,7 @@ from starlette.background import BackgroundTasks\n from starlette.concurrency import run_in_threadpool\n from starlette.datastructures import FormData, Headers, QueryParams, UploadFile\n from starlette.requests import Request\n+from starlette.responses import Response\n from starlette.websockets import WebSocket\n \n sequence_shapes = {\n@@ -212,6 +213,9 @@ def add_non_field_param_to_dependency(\n     elif lenient_issubclass(param.annotation, WebSocket):\n         dependant.websocket_param_name = param.name\n         return True\n+    elif lenient_issubclass(param.annotation, Response):\n+        dependant.response_param_name = param.name\n+        return True\n     elif lenient_issubclass(param.annotation, BackgroundTasks):\n         dependant.background_tasks_param_name = param.name\n         return True\n@@ -295,16 +299,21 @@ async def solve_dependencies(\n     dependant: Dependant,\n     body: Dict[str, Any] = None,\n     background_tasks: BackgroundTasks = None,\n+    response: Response = None,\n     dependency_overrides_provider: Any = None,\n     dependency_cache: Dict[Tuple[Callable, Tuple[str]], Any] = None,\n ) -> Tuple[\n     Dict[str, Any],\n     List[ErrorWrapper],\n     Optional[BackgroundTasks],\n+    Response,\n     Dict[Tuple[Callable, Tuple[str]], Any],\n ]:\n     values: Dict[str, Any] = {}\n     errors: List[ErrorWrapper] = []\n+    response = response or Response(  # type: ignore\n+        content=None, status_code=None, headers=None, media_type=None, background=None\n+    )\n     dependency_cache = dependency_cache or {}\n     sub_dependant: Dependant\n     for sub_dependant in dependant.dependencies:\n@@ -330,14 +339,22 @@ async def solve_dependencies(\n                 security_scopes=sub_dependant.security_scopes,\n             )\n \n-        sub_values, sub_errors, background_tasks, sub_dependency_cache = await solve_dependencies(\n+        solved_result = await solve_dependencies(\n             request=request,\n             dependant=use_sub_dependant,\n             body=body,\n             background_tasks=background_tasks,\n+            response=response,\n             dependency_overrides_provider=dependency_overrides_provider,\n             dependency_cache=dependency_cache,\n         )\n+        sub_values, sub_errors, background_tasks, sub_response, sub_dependency_cache = (\n+            solved_result\n+        )\n+        sub_response = cast(Response, sub_response)\n+        response.headers.raw.extend(sub_response.headers.raw)\n+        if sub_response.status_code:\n+            response.status_code = sub_response.status_code\n         dependency_cache.update(sub_dependency_cache)\n         if sub_errors:\n             errors.extend(sub_errors)\n@@ -383,11 +400,13 @@ async def solve_dependencies(\n         if background_tasks is None:\n             background_tasks = BackgroundTasks()\n         values[dependant.background_tasks_param_name] = background_tasks\n+    if dependant.response_param_name:\n+        values[dependant.response_param_name] = response\n     if dependant.security_scopes_param_name:\n         values[dependant.security_scopes_param_name] = SecurityScopes(\n             scopes=dependant.security_scopes\n         )\n-    return values, errors, background_tasks, dependency_cache\n+    return values, errors, background_tasks, response, dependency_cache\n \n \n def request_params_to_args(\n\n@@ -102,12 +102,13 @@ def get_app(\n             raise HTTPException(\n                 status_code=400, detail=\"There was an error parsing the body\"\n             ) from e\n-        values, errors, background_tasks, _ = await solve_dependencies(\n+        solved_result = await solve_dependencies(\n             request=request,\n             dependant=dependant,\n             body=body,\n             dependency_overrides_provider=dependency_overrides_provider,\n         )\n+        values, errors, background_tasks, sub_response, _ = solved_result\n         if errors:\n             raise RequestValidationError(errors)\n         else:\n@@ -128,11 +129,15 @@ def get_app(\n                 by_alias=response_model_by_alias,\n                 skip_defaults=response_model_skip_defaults,\n             )\n-            return response_class(\n+            response = response_class(\n                 content=response_data,\n                 status_code=status_code,\n                 background=background_tasks,\n             )\n+            response.headers.raw.extend(sub_response.headers.raw)\n+            if sub_response.status_code:\n+                response.status_code = sub_response.status_code\n+            return response\n \n     return app\n \n@@ -141,11 +146,12 @@ def get_websocket_app(\n     dependant: Dependant, dependency_overrides_provider: Any = None\n ) -> Callable:\n     async def app(websocket: WebSocket) -> None:\n-        values, errors, _, _2 = await solve_dependencies(\n+        solved_result = await solve_dependencies(\n             request=websocket,\n             dependant=dependant,\n             dependency_overrides_provider=dependency_overrides_provider,\n         )\n+        values, errors, _, _2, _3 = solved_result\n         if errors:\n             await websocket.close(code=WS_1008_POLICY_VIOLATION)\n             raise WebSocketRequestValidationError(errors)\n\n@@ -0,0 +1,27 @@\n+from fastapi import Depends, FastAPI\n+from starlette.responses import Response\n+from starlette.testclient import TestClient\n+\n+app = FastAPI()\n+\n+\n+async def response_status_setter(response: Response):\n+    response.status_code = 201\n+\n+\n+async def parent_dep(result=Depends(response_status_setter)):\n+    return result\n+\n+\n+@app.get(\"/\", dependencies=[Depends(parent_dep)])\n+async def get_main():\n+    return {\"msg\": \"Hello World\"}\n+\n+\n+client = TestClient(app)\n+\n+\n+def test_dependency_set_status_code():\n+    response = client.get(\"/\")\n+    assert response.status_code == 201\n+    assert response.json() == {\"msg\": \"Hello World\"}\n\n\n@@ -0,0 +1,15 @@\n+from starlette.testclient import TestClient\n+\n+from response_change_status_code.tutorial001 import app\n+\n+client = TestClient(app)\n+\n+\n+def test_path_operation():\n+    response = client.put(\"/get-or-create-task/foo\")\n+    print(response.content)\n+    assert response.status_code == 200\n+    assert response.json() == \"Listen to the Bar Fighters\"\n+    response = client.put(\"/get-or-create-task/bar\")\n+    assert response.status_code == 201\n+    assert response.json() == \"This didn't exist before\"\n\n@@ -0,0 +1,12 @@\n+from starlette.testclient import TestClient\n+\n+from response_cookies.tutorial002 import app\n+\n+client = TestClient(app)\n+\n+\n+def test_path_operation():\n+    response = client.post(\"/cookie-and-object/\")\n+    assert response.status_code == 200\n+    assert response.json() == {\"message\": \"Come to the dark side, we have cookies\"}\n+    assert response.cookies[\"fakesession\"] == \"fake-cookie-session-value\"\n\n@@ -0,0 +1,12 @@\n+from starlette.testclient import TestClient\n+\n+from response_headers.tutorial002 import app\n+\n+client = TestClient(app)\n+\n+\n+def test_path_operation():\n+    response = client.get(\"/headers-and-object/\")\n+    assert response.status_code == 200\n+    assert response.json() == {\"message\": \"Hello World\"}\n+    assert response.headers[\"X-Cat-Dog\"] == \"alone in the world\"\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
