{"custom_id": "requests#5962c0ea8609837454e79bad9e0a94ae5099ad23", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 4 | Lines Deleted: 40 | Files Changed: 1 | Hunks: 5 | Methods Changed: 11 | Complexity Δ (Sum/Max): -9/0 | Churn Δ: 44 | Churn Cumulative: 826 | Contributors (this commit): 2 | Commits (past 90d): 6 | Contributors (cumulative): 2 | DMM Complexity: 0.0\n\nDIFF:\n@@ -8,30 +8,14 @@ Datastructures that power Requests.\n \n \"\"\"\n \n-from UserDict import DictMixin\n-\n-\n-class CaseInsensitiveDict(DictMixin):\n+class CaseInsensitiveDict(dict):\n     \"\"\"Case-insensitive Dictionary for :class:`Response <models.Response>` Headers.\n \n     For example, ``headers['content-encoding']`` will return the\n     value of a ``'Content-Encoding'`` response header.\"\"\"\n \n-    def __init__(self, *args, **kwargs):\n-        # super(CaseInsensitiveDict, self).__init__()\n-        self.data = dict(*args, **kwargs)\n-\n-    def __repr__(self):\n-        return self.data.__repr__()\n-\n-    def __getstate__(self):\n-        return self.data.copy()\n-\n-    def __setstate__(self, d):\n-        self.data = d\n-\n     def _lower_keys(self):\n-        return map(str.lower, self.data.keys())\n+        return map(str.lower, self.keys())\n \n \n     def __contains__(self, key):\n@@ -39,26 +23,6 @@ class CaseInsensitiveDict(DictMixin):\n \n \n     def __getitem__(self, key):\n-\n-        if key.lower() in self:\n+        # We allow fall-through here, so values default to None\n+        if key in self:\n             return self.items()[self._lower_keys().index(key.lower())][1]\n-\n-\n-    def __setitem__(self, key, value):\n-        return self.data.__setitem__(key, value)\n-\n-\n-    def __delitem__(self, key):\n-        return self.data.__delitem__(key)\n-\n-\n-    def __keys__(self):\n-        return self.data.__keys__()\n-\n-\n-    def __iter__(self):\n-        return self.data.__iter__()\n-\n-\n-    def iteritems(self):\n-        return self.data.iteritems()\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#52bedf4c0b03a85c7e1361d0c3089b96f623ab10", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 2 | Methods Changed: 4 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 212 | Contributors (this commit): 2 | Commits (past 90d): 12 | Contributors (cumulative): 2 | DMM Complexity: None\n\nDIFF:\n@@ -81,7 +81,7 @@ def head(url, params=None, headers=None, cookies=None, auth=None, timeout=None):\n     return request('HEAD', url, params=params, headers=headers, cookies=cookies, auth=auth, timeout=timeout)\n \n \n-def post(url, data=None, headers=None, files=None, cookies=None, auth=None, timeout=None, allow_redirects=False):\n+def post(url, data='', headers=None, files=None, cookies=None, auth=None, timeout=None, allow_redirects=False):\n     \"\"\"Sends a POST request. Returns :class:`Response` object.\n \n     :param url: URL for the new :class:`Request` object.\n@@ -98,7 +98,7 @@ def post(url, data=None, headers=None, files=None, cookies=None, auth=None, time\n                    timeout=timeout, allow_redirects=allow_redirects)\n \n \n-def put(url, data=None, headers=None, files=None, cookies=None, auth=None, timeout=None, allow_redirects=False):\n+def put(url, data='', headers=None, files=None, cookies=None, auth=None, timeout=None, allow_redirects=False):\n     \"\"\"Sends a PUT request. Returns :class:`Response` object.\n \n     :param url: URL for the new :class:`Request` object.\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#cd0d0a2b1779f38206ec0029f8ed7efd321aa2cc", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 21 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 21 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 21 | Churn Cumulative: 373 | Contributors (this commit): 5 | Commits (past 90d): 15 | Contributors (cumulative): 5 | DMM Complexity: None\n\nDIFF:\n@@ -15,33 +15,40 @@ class RequestsTestSuite(unittest.TestCase):\n     def setUp(self):\n         pass\n \n+        \n     def tearDown(self):\n         \"\"\"Teardown.\"\"\"\n         pass\n \n+        \n     def test_invalid_url(self):\n         self.assertRaises(ValueError, requests.get, 'hiwpefhipowhefopw')\n \n+        \n     def test_HTTP_200_OK_GET(self):\n         r = requests.get('http://google.com')\n         self.assertEqual(r.status_code, 200)\n \n+        \n     def test_HTTPS_200_OK_GET(self):\n         r = requests.get('https://google.com')\n         self.assertEqual(r.status_code, 200)\n \n+        \n     def test_HTTP_200_OK_GET_WITH_PARAMS(self):\n         heads = {'User-agent': 'Mozilla/5.0'}\n \n         r = requests.get('http://www.google.com/search', params={'q': 'test'}, headers=heads)\n         self.assertEqual(r.status_code, 200)\n \n+        \n     def test_HTTP_200_OK_GET_WITH_MIXED_PARAMS(self):\n         heads = {'User-agent': 'Mozilla/5.0'}\n \n         r = requests.get('http://google.com/search?test=true', params={'q': 'test'}, headers=heads)\n         self.assertEqual(r.status_code, 200)\n \n+        \n     def test_user_agent_transfers(self):\n         \"\"\"Issue XX\"\"\"\n         heads = {\n@@ -60,14 +67,17 @@ class RequestsTestSuite(unittest.TestCase):\n         r = requests.get('http://whatsmyua.com', headers=heads);\n         self.assertTrue(heads['user-agent'] in r.content)\n \n+        \n     def test_HTTP_200_OK_HEAD(self):\n         r = requests.head('http://google.com')\n         self.assertEqual(r.status_code, 200)\n \n+        \n     def test_HTTPS_200_OK_HEAD(self):\n         r = requests.head('https://google.com')\n         self.assertEqual(r.status_code, 200)\n \n+        \n     def test_AUTH_HTTPS_200_OK_GET(self):\n         auth = ('requeststest', 'requeststest')\n         url = 'https://convore.com/api/account/verify.json'\n@@ -81,6 +91,7 @@ class RequestsTestSuite(unittest.TestCase):\n         # reset auto authentication\n         requests.auth_manager.empty()\n \n+        \n     def test_POSTBIN_GET_POST_FILES(self):\n         bin = requests.post('http://www.postbin.org/')\n         self.assertEqual(bin.status_code, 302)\n@@ -125,10 +136,12 @@ class RequestsTestSuite(unittest.TestCase):\n         r = requests.get('http://google.com/')\n         self.assertEqual(bool(r), True)\n \n+        \n     def test_request_ok_set(self):\n         r = requests.get('http://google.com/some-404-url')\n         self.assertEqual(r.ok, False)\n \n+        \n     def test_status_raising(self):\n         r = requests.get('http://google.com/some-404-url')\n         self.assertRaises(requests.HTTPError, r.raise_for_status)\n@@ -137,6 +150,7 @@ class RequestsTestSuite(unittest.TestCase):\n         self.assertFalse(r.error)\n         r.raise_for_status()\n \n+        \n     def test_cookie_jar(self):\n         \"\"\"\n         .. todo:: This really doesn't test to make sure the cookie is working\n@@ -148,11 +162,13 @@ class RequestsTestSuite(unittest.TestCase):\n         requests.get('http://google.com', cookies=jar)\n         self.assertTrue(jar)\n \n+        \n     def test_decompress_gzip(self):\n \n         r = requests.get('http://api.stackoverflow.com/1.1/users/495995/top-answer-tags')\n         r.content.decode('ascii')\n \n+        \n     def test_autoauth(self):\n \n         conv_auth = ('requeststest', 'requeststest')\n@@ -161,19 +177,23 @@ class RequestsTestSuite(unittest.TestCase):\n         r = requests.get('https://convore.com/api/account/verify.json')\n         self.assertEquals(r.status_code, 200)\n \n+        \n     def test_unicode_get(self):\n+        \n         requests.get('http://google.com', params={'foo': u'føø'})\n         requests.get('http://google.com', params={u'føø': u'føø'})\n         requests.get('http://google.com', params={'føø': 'føø'})\n         requests.get('http://google.com', params={'foo': u'foo'})\n         requests.get('http://google.com/ø', params={'foo': u'foo'})\n \n+        \n     def test_httpauth_recursion(self):\n         conv_auth = ('requeststest', 'bad_password')\n \n         r = requests.get('https://convore.com/api/account/verify.json', auth=conv_auth)\n         self.assertEquals(r.status_code, 401)\n \n+        \n     def test_settings(self):\n         with requests.settings(timeout=0.0001):\n             self.assertRaises(requests.Timeout, requests.get, 'http://google.com')\n@@ -181,6 +201,7 @@ class RequestsTestSuite(unittest.TestCase):\n         with requests.settings(timeout=10):\n             requests.get('http://google.com')\n \n+\n     def test_nonurlencoded_post_data(self):\n         requests.post('http://google.com', data='foo')\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#74013d751c410ff2157d66de0864c8ed3052f75c", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 375 | Contributors (this commit): 5 | Commits (past 90d): 16 | Contributors (cumulative): 5 | DMM Complexity: None\n\nDIFF:\n@@ -195,7 +195,7 @@ class RequestsTestSuite(unittest.TestCase):\n \n \n     def test_settings(self):\n-        with requests.settings(timeout=0.0001):\n+        with requests.settings(timeout=0.0000001):\n             self.assertRaises(requests.Timeout, requests.get, 'http://google.com')\n \n         with requests.settings(timeout=10):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#54fd24b7575af3c9fb8218aeae4d06c9d0ea3317", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 8 | Lines Deleted: 6 | Files Changed: 1 | Hunks: 3 | Methods Changed: 1 | Complexity Δ (Sum/Max): 2/2 | Churn Δ: 14 | Churn Cumulative: 389 | Contributors (this commit): 6 | Commits (past 90d): 17 | Contributors (cumulative): 6 | DMM Complexity: 1.0\n\nDIFF:\n@@ -152,15 +152,17 @@ class RequestsTestSuite(unittest.TestCase):\n \n \n     def test_cookie_jar(self):\n-        \"\"\"\n-        .. todo:: This really doesn't test to make sure the cookie is working\n-        \"\"\"\n-\n         jar = cookielib.CookieJar()\n         self.assertFalse(jar)\n-\n-        requests.get('http://google.com', cookies=jar)\n+        data = {'cn': 'requests_cookie', 'cv': 'awesome'}\n+        r = requests.post('http://www.html-kit.com/tools/cookietester/', data=data, cookies=jar, allow_redirects=True)\n         self.assertTrue(jar)\n+        cookie_found = False\n+        for cookie in jar:\n+            if cookie.name == 'requests_cookie':\n+                self.assertEquals(cookie.value, 'awesome')\n+                cookie_found = True\n+        self.assertTrue(cookie_found)\n \n \n     def test_decompress_gzip(self):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#3b86c3c0e34e8f986726a5929acd1d45ee184c12", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 6 | Lines Deleted: 4 | Files Changed: 1 | Hunks: 4 | Methods Changed: 4 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 10 | Churn Cumulative: 399 | Contributors (this commit): 6 | Commits (past 90d): 18 | Contributors (cumulative): 6 | DMM Complexity: 1.0\n\nDIFF:\n@@ -26,26 +26,28 @@ class RequestsTestSuite(unittest.TestCase):\n \n \n     def test_HTTP_200_OK_GET(self):\n-        r = requests.get('http://google.com')\n+        r = requests.get('http://httpbin.org/')\n         self.assertEqual(r.status_code, 200)\n \n \n     def test_HTTPS_200_OK_GET(self):\n-        r = requests.get('https://google.com')\n+        r = requests.get('https://httpbin.org/')\n         self.assertEqual(r.status_code, 200)\n \n \n     def test_HTTP_200_OK_GET_WITH_PARAMS(self):\n         heads = {'User-agent': 'Mozilla/5.0'}\n \n-        r = requests.get('http://www.google.com/search', params={'q': 'test'}, headers=heads)\n+        r = requests.get('http://httpbin.org/user-agent', headers=heads)\n+\n+        assert heads['User-agent'] in r.content\n         self.assertEqual(r.status_code, 200)\n \n \n     def test_HTTP_200_OK_GET_WITH_MIXED_PARAMS(self):\n         heads = {'User-agent': 'Mozilla/5.0'}\n \n-        r = requests.get('http://google.com/search?test=true', params={'q': 'test'}, headers=heads)\n+        r = requests.get('http://httpbin.org/get?test=true', params={'q': 'test'}, headers=heads)\n         self.assertEqual(r.status_code, 200)\n \n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#1749260c974265144a811389f47bde54b79c1cb5", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 6 | Lines Deleted: 5 | Files Changed: 1 | Hunks: 6 | Methods Changed: 4 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 11 | Churn Cumulative: 410 | Contributors (this commit): 6 | Commits (past 90d): 19 | Contributors (cumulative): 6 | DMM Complexity: None\n\nDIFF:\n@@ -31,7 +31,7 @@ class RequestsTestSuite(unittest.TestCase):\n \n \n     def test_HTTPS_200_OK_GET(self):\n-        r = requests.get('https://httpbin.org/')\n+        r = requests.get('https://github.com/')\n         self.assertEqual(r.status_code, 200)\n \n \n@@ -53,12 +53,13 @@ class RequestsTestSuite(unittest.TestCase):\n \n     def test_user_agent_transfers(self):\n         \"\"\"Issue XX\"\"\"\n+\n         heads = {\n             'User-agent':\n                 'Mozilla/5.0 (github.com/kennethreitz/requests)'\n         }\n \n-        r = requests.get('http://whatsmyua.com', headers=heads);\n+        r = requests.get('http://httpbin.org/user-agent', headers=heads);\n         self.assertTrue(heads['User-agent'] in r.content)\n \n         heads = {\n@@ -66,17 +67,17 @@ class RequestsTestSuite(unittest.TestCase):\n                 'Mozilla/5.0 (github.com/kennethreitz/requests)'\n         }\n \n-        r = requests.get('http://whatsmyua.com', headers=heads);\n+        r = requests.get('http://httpbin.org/user-agent', headers=heads);\n         self.assertTrue(heads['user-agent'] in r.content)\n \n \n     def test_HTTP_200_OK_HEAD(self):\n-        r = requests.head('http://google.com')\n+        r = requests.head('http://httpbin.org')\n         self.assertEqual(r.status_code, 200)\n \n \n     def test_HTTPS_200_OK_HEAD(self):\n-        r = requests.head('https://google.com')\n+        r = requests.head('https://github.com')\n         self.assertEqual(r.status_code, 200)\n \n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#4d3a9defd25bebae524c15647b897a3459365410", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 5 | Lines Deleted: 6 | Files Changed: 1 | Hunks: 3 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 11 | Churn Cumulative: 544 | Contributors (this commit): 6 | Commits (past 90d): 21 | Contributors (cumulative): 6 | DMM Complexity: 1.0\n\nDIFF:\n@@ -170,15 +170,11 @@ class RequestsTestSuite(unittest.TestCase):\n \n     def test_cookie_jar(self):\n \n-        # TODO: port to httpbin\n-\n         jar = cookielib.CookieJar()\n         self.assertFalse(jar)\n \n-        data = {'cn': 'requests_cookie', 'cv': 'awesome'}\n-\n-        r = requests.post('http://www.html-kit.com/tools/cookietester/', data=data, cookies=jar, allow_redirects=True)\n-\n+        url = httpbin('cookies', 'set', 'requests_cookie', 'awesome')\n+        r = requests.get(url, cookies=jar)\n         self.assertTrue(jar)\n \n         cookie_found = False\n@@ -188,6 +184,9 @@ class RequestsTestSuite(unittest.TestCase):\n                 cookie_found = True\n         self.assertTrue(cookie_found)\n \n+        r = requests.get(httpbin('cookies'), cookies=jar)\n+        self.assertTrue('awesome' in r.content)\n+\n \n     def test_decompress_gzip(self):\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#3d1444b829f63582b0acb6aa53b82b2693c19213", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 3 | Lines Deleted: 3 | Files Changed: 1 | Hunks: 2 | Methods Changed: 2 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 6 | Churn Cumulative: 218 | Contributors (this commit): 3 | Commits (past 90d): 13 | Contributors (cumulative): 3 | DMM Complexity: None\n\nDIFF:\n@@ -85,7 +85,7 @@ def post(url, data='', headers=None, files=None, cookies=None, auth=None, timeou\n     \"\"\"Sends a POST request. Returns :class:`Response` object.\n \n     :param url: URL for the new :class:`Request` object.\n-    :param data: (optional) Dictionary of POST data to send with the :class:`Request`.\n+    :param data: (optional) Dictionary or bytes of POST data to send with the :class:`Request`.\n     :param headers: (optional) Dictionary of HTTP Headers to sent with the :class:`Request`.\n     :param files: (optional) Dictionary of 'filename': file-like-objects for multipart encoding upload.\n     :param cookies: (optional) CookieJar object to send with the :class:`Request`.\n@@ -102,8 +102,8 @@ def put(url, data='', headers=None, files=None, cookies=None, auth=None, timeout\n     \"\"\"Sends a PUT request. Returns :class:`Response` object.\n \n     :param url: URL for the new :class:`Request` object.\n-    :param params: (optional) Bytes of PUT Data to send with the :class:`Request`.\n-    :param headers: (optional) Dictionary of HTTP Headers to sent with the :class:`Request`.\n+    :param data: (optional) Bytes of PUT Data to send with the :class:`Request`.\n+    :param headers: (optional) Dictionary or bytes of HTTP Headers to sent with the :class:`Request`.\n     :param files: (optional) Dictionary of 'filename': file-like-objects for multipart encoding upload.\n     :param cookies: (optional) CookieJar object to send with the :class:`Request`.\n     :param auth: (optional) AuthObject to enable Basic HTTP Auth.\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#4320f81bf4c6a6b6f97dbfb7a6ba667dd71c4977", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 546 | Contributors (this commit): 7 | Commits (past 90d): 22 | Contributors (cumulative): 7 | DMM Complexity: None\n\nDIFF:\n@@ -24,7 +24,7 @@ def httpbin(*suffix):\n def httpsbin(*suffix):\n     \"\"\"Returns url for HTTPSBIN resource.\"\"\"\n \n-    return HTTPBIN_URL + '/'.join(suffix)\n+    return HTTPSBIN_URL + '/'.join(suffix)\n \n \n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#023ab755e5404fe379a22e0b8536aa668792b71a", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 23 | Lines Deleted: 10 | Files Changed: 1 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): 5/5 | Churn Δ: 33 | Churn Cumulative: 670 | Contributors (this commit): 3 | Commits (past 90d): 15 | Contributors (cumulative): 3 | DMM Complexity: 1.0\n\nDIFF:\n@@ -52,16 +52,7 @@ class Request(object):\n         #: Set to True if full redirects are allowed (e.g. re-POST-ing of data at new ``Location``)\n         self.allow_redirects = allow_redirects\n \n-        if hasattr(data, 'items'):\n-            for (k, v) in data.items():\n-                self.data.update({\n-                    k.encode('utf-8') if isinstance(k, unicode) else k:\n-                    v.encode('utf-8') if isinstance(v, unicode) else v\n-                })\n-            self._enc_data = urllib.urlencode(self.data)\n-        else:\n-            self._enc_data = self.data = data\n-\n+        self.data, self._enc_data = self._encode_params(data)\n         #: :class:`Response <models.Response>` instance, containing\n         #: content and metadata of HTTP Response, once :attr:`sent <send>`.\n         self.response = Response()\n@@ -204,6 +195,28 @@ class Request(object):\n         self.response = r\n \n \n+    @staticmethod\n+    def _encode_params(data):\n+        \"\"\"Encode parameters in a piece of data.\n+\n+        If the data supplied is a dictionary, encodes each parameter in it, and\n+        returns the dictionary of encoded parameters, and a urlencoded version\n+        of that.\n+\n+        Otherwise, assumes the data is already encoded appropriately, and\n+        returns it twice.\n+\n+        \"\"\"\n+        if hasattr(data, 'items'):\n+            result = {}\n+            for (k, v) in data.items():\n+                result[k.encode('utf-8') if isinstance(k, unicode) else k] \\\n+                     = v.encode('utf-8') if isinstance(v, unicode) else v\n+            return result, urllib.urlencode(result)\n+        else:\n+            return data, data\n+\n+\n     @staticmethod\n     def _build_url(url, data=None):\n         \"\"\"Build URLs.\"\"\"\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#f31ade335de9df096ba3c67c9507dd4eb32667a8", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 8 | Lines Deleted: 8 | Files Changed: 1 | Hunks: 6 | Methods Changed: 6 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 16 | Churn Cumulative: 234 | Contributors (this commit): 3 | Commits (past 90d): 14 | Contributors (cumulative): 3 | DMM Complexity: None\n\nDIFF:\n@@ -24,8 +24,8 @@ def request(method, url, params=None, data=None, headers=None, cookies=None, fil\n \n     :param method: method for the new :class:`Request` object.\n     :param url: URL for the new :class:`Request` object.\n-    :param params: (optional) Dictionary of GET/HEAD/DELETE Parameters to send with the :class:`Request`.\n-    :param data: (optional) Bytes/Dictionary of PUT/POST Data to send with the :class:`Request`.\n+    :param params: (optional) Dictionary or bytes to be sent in the query string for the :class:`Request`.\n+    :param data: (optional) Dictionary or bytes to send in the body of the :class:`Request`.\n     :param headers: (optional) Dictionary of HTTP Headers to send with the :class:`Request`.\n     :param cookies: (optional) CookieJar object to send with the :class:`Request`.\n     :param files: (optional) Dictionary of 'filename': file-like-objects for multipart encoding upload.\n@@ -57,7 +57,7 @@ def get(url, params=None, headers=None, cookies=None, auth=None, timeout=None):\n     \"\"\"Sends a GET request. Returns :class:`Response` object.\n \n     :param url: URL for the new :class:`Request` object.\n-    :param params: (optional) Dictionary of GET Parameters to send with the :class:`Request`.\n+    :param params: (optional) Dictionary of parameters, or bytes, to be sent in the query string for the :class:`Request`.\n     :param headers: (optional) Dictionary of HTTP Headers to send with the :class:`Request`.\n     :param cookies: (optional) CookieJar object to send with the :class:`Request`.\n     :param auth: (optional) AuthObject to enable Basic HTTP Auth.\n@@ -71,7 +71,7 @@ def head(url, params=None, headers=None, cookies=None, auth=None, timeout=None):\n     \"\"\"Sends a HEAD request. Returns :class:`Response` object.\n \n     :param url: URL for the new :class:`Request` object.\n-    :param params: (optional) Dictionary of GET Parameters to send with the :class:`Request`.\n+    :param params: (optional) Dictionary of parameters, or bytes, to be sent in the query string for the :class:`Request`.\n     :param headers: (optional) Dictionary of HTTP Headers to sent with the :class:`Request`.\n     :param cookies: (optional) CookieJar object to send with the :class:`Request`.\n     :param auth: (optional) AuthObject to enable Basic HTTP Auth.\n@@ -85,7 +85,7 @@ def post(url, data='', headers=None, files=None, cookies=None, auth=None, timeou\n     \"\"\"Sends a POST request. Returns :class:`Response` object.\n \n     :param url: URL for the new :class:`Request` object.\n-    :param data: (optional) Dictionary or bytes of POST data to send with the :class:`Request`.\n+    :param data: (optional) Dictionary or bytes to send in the body of the :class:`Request`.\n     :param headers: (optional) Dictionary of HTTP Headers to sent with the :class:`Request`.\n     :param files: (optional) Dictionary of 'filename': file-like-objects for multipart encoding upload.\n     :param cookies: (optional) CookieJar object to send with the :class:`Request`.\n@@ -102,8 +102,8 @@ def put(url, data='', headers=None, files=None, cookies=None, auth=None, timeout\n     \"\"\"Sends a PUT request. Returns :class:`Response` object.\n \n     :param url: URL for the new :class:`Request` object.\n-    :param data: (optional) Bytes of PUT Data to send with the :class:`Request`.\n-    :param headers: (optional) Dictionary or bytes of HTTP Headers to sent with the :class:`Request`.\n+    :param data: (optional) Dictionary or bytes to send in the body of the :class:`Request`.\n+    :param headers: (optional) Dictionary of HTTP Headers to sent with the :class:`Request`.\n     :param files: (optional) Dictionary of 'filename': file-like-objects for multipart encoding upload.\n     :param cookies: (optional) CookieJar object to send with the :class:`Request`.\n     :param auth: (optional) AuthObject to enable Basic HTTP Auth.\n@@ -119,7 +119,7 @@ def delete(url, params=None, headers=None, cookies=None, auth=None, timeout=None\n     \"\"\"Sends a DELETE request. Returns :class:`Response` object.\n \n     :param url: URL for the new :class:`Request` object.\n-    :param params: (optional) Dictionary of DELETE Parameters to send with the :class:`Request`.\n+    :param params: (optional) Dictionary of parameters, or bytes, to be sent in the query string for the :class:`Request`.\n     :param headers: (optional) Dictionary of HTTP Headers to sent with the :class:`Request`.\n     :param cookies: (optional) CookieJar object to send with the :class:`Request`.\n     :param auth: (optional) AuthObject to enable Basic HTTP Auth.\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#80d860d2d409b6d2a6b4c133ef0eef4de6b32ef2", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 101 | Lines Deleted: 26 | Files Changed: 3 | Hunks: 23 | Methods Changed: 16 | Complexity Δ (Sum/Max): 2/5 | Churn Δ: 127 | Churn Cumulative: 1577 | Contributors (this commit): 7 | Commits (past 90d): 54 | Contributors (cumulative): 13 | DMM Complexity: 1.0\n\nDIFF:\n@@ -34,13 +34,11 @@ def request(method, url, params=None, data=None, headers=None, cookies=None, fil\n     :param allow_redirects: (optional) Boolean. Set to True if POST/PUT/DELETE redirect following is allowed.\n     \"\"\"\n \n-    if params and data:\n-        raise StandardError('You may provide either params or data to a request, but not both.')\n-\n     r = Request(\n         method = method,\n         url = url,\n-        data = params or data,\n+        data = data,\n+        params = params,\n         headers = headers,\n         cookiejar = cookies,\n         files = files,\n@@ -81,7 +79,8 @@ def head(url, params=None, headers=None, cookies=None, auth=None, timeout=None):\n     return request('HEAD', url, params=params, headers=headers, cookies=cookies, auth=auth, timeout=timeout)\n \n \n-def post(url, data='', headers=None, files=None, cookies=None, auth=None, timeout=None, allow_redirects=False):\n+def post(url, data='', headers=None, files=None, cookies=None, auth=None,\n+         timeout=None, allow_redirects=False, params=None):\n     \"\"\"Sends a POST request. Returns :class:`Response` object.\n \n     :param url: URL for the new :class:`Request` object.\n@@ -92,13 +91,16 @@ def post(url, data='', headers=None, files=None, cookies=None, auth=None, timeou\n     :param auth: (optional) AuthObject to enable Basic HTTP Auth.\n     :param timeout: (optional) Float describing the timeout of the request.\n     :param allow_redirects: (optional) Boolean. Set to True if redirect following is allowed.\n+    :param params: (optional) Dictionary of parameters, or bytes, to be sent in the query string for the :class:`Request`.\n     \"\"\"\n \n-    return request('POST', url, data=data, headers=headers, files=files, cookies=cookies, auth=auth,\n-                   timeout=timeout, allow_redirects=allow_redirects)\n+    return request('POST', url, params=params, data=data, headers=headers,\n+                   files=files, cookies=cookies, auth=auth, timeout=timeout,\n+                   allow_redirects=allow_redirects)\n \n \n-def put(url, data='', headers=None, files=None, cookies=None, auth=None, timeout=None, allow_redirects=False):\n+def put(url, data='', headers=None, files=None, cookies=None, auth=None,\n+        timeout=None, allow_redirects=False, params=None):\n     \"\"\"Sends a PUT request. Returns :class:`Response` object.\n \n     :param url: URL for the new :class:`Request` object.\n@@ -109,10 +111,12 @@ def put(url, data='', headers=None, files=None, cookies=None, auth=None, timeout\n     :param auth: (optional) AuthObject to enable Basic HTTP Auth.\n     :param timeout: (optional) Float describing the timeout of the request.\n     :param allow_redirects: (optional) Boolean. Set to True if redirect following is allowed.\n+    :param params: (optional) Dictionary of parameters, or bytes, to be sent in the query string for the :class:`Request`.\n     \"\"\"\n \n-    return request('PUT', url, data=data, headers=headers, files=files, cookies=cookies, auth=auth,\n-                   timeout=timeout, allow_redirects=allow_redirects)\n+    return request('PUT', url, params=params, data=data, headers=headers,\n+                   files=files, cookies=cookies, auth=auth, timeout=timeout,\n+                   allow_redirects=allow_redirects)\n \n \n def delete(url, params=None, headers=None, cookies=None, auth=None, timeout=None, allow_redirects=False):\n\n@@ -31,8 +31,8 @@ class Request(object):\n     _METHODS = ('GET', 'HEAD', 'PUT', 'POST', 'DELETE')\n \n     def __init__(self, url=None, headers=dict(), files=None, method=None,\n-                 data=dict(), auth=None, cookiejar=None, timeout=None,\n-                 redirect=False, allow_redirects=False):\n+                 data=dict(), params=dict(), auth=None, cookiejar=None,\n+                 timeout=None, redirect=False, allow_redirects=False):\n \n         socket.setdefaulttimeout(timeout)\n \n@@ -44,8 +44,12 @@ class Request(object):\n         self.files = files\n         #: HTTP Method to use. Available: GET, HEAD, PUT, POST, DELETE.\n         self.method = method\n-        #: Form or Byte data to attach to the :class:`Request <models.Request>`.\n-        self.data = dict()\n+        #: Dictionary or byte of request body data to attach to the\n+        #: :class:`Request <models.Request>`.\n+        self.data = None\n+        #: Dictionary or byte of querystring data to attach to the\n+        #: :class:`Request <models.Request>`.\n+        self.params = None\n         #: True if :class:`Request <models.Request>` is part of a redirect chain (disables history\n         #: and HTTPError storage).\n         self.redirect = redirect\n@@ -53,6 +57,8 @@ class Request(object):\n         self.allow_redirects = allow_redirects\n \n         self.data, self._enc_data = self._encode_params(data)\n+        self.params, self._enc_params = self._encode_params(params)\n+\n         #: :class:`Response <models.Response>` instance, containing\n         #: content and metadata of HTTP Response, once :attr:`sent <send>`.\n         self.response = Response()\n@@ -185,7 +191,8 @@ class Request(object):\n \n                 request = Request(\n                     url, self.headers, self.files, method,\n-                    self.data, self.auth, self.cookiejar, redirect=False\n+                    self.data, self.params, self.auth, self.cookiejar,\n+                    redirect=False\n                 )\n                 request.send()\n                 r = request.response\n@@ -217,17 +224,16 @@ class Request(object):\n             return data, data\n \n \n-    @staticmethod\n-    def _build_url(url, data=None):\n-        \"\"\"Build URLs.\"\"\"\n+    def _build_url(self):\n+        \"\"\"Build the actual URL to use\"\"\"\n \n-        if urlparse(url).query:\n-            return '%s&%s' % (url, data)\n+        if self._enc_params:\n+            if urlparse(self.url).query:\n+                return '%s&%s' % (self.url, self._enc_params)\n             else:\n-            if data:\n-                return '%s?%s' % (url, data)\n+                return '%s?%s' % (self.url, self._enc_params)\n         else:\n-                return url\n+            return self.url\n \n \n     def send(self, anyway=False):\n@@ -243,8 +249,9 @@ class Request(object):\n         self._checks()\n         success = False\n \n+        url = self._build_url()\n         if self.method in ('GET', 'HEAD', 'DELETE'):\n-            req = _Request(self._build_url(self.url, self._enc_data), method=self.method)\n+            req = _Request(url, method=self.method)\n         else:\n \n             if self.files:\n@@ -254,10 +261,10 @@ class Request(object):\n                     self.files.update(self.data)\n \n                 datagen, headers = multipart_encode(self.files)\n-                req = _Request(self.url, data=datagen, headers=headers, method=self.method)\n+                req = _Request(url, data=datagen, headers=headers, method=self.method)\n \n             else:\n-                req = _Request(self.url, data=self._enc_data, method=self.method)\n+                req = _Request(url, data=self._enc_data, method=self.method)\n \n         if self.headers:\n             req.headers.update(self.headers)\n\n@@ -5,6 +5,10 @@ from __future__ import with_statement\n \n import unittest\n import cookielib\n+try:\n+    import simplejson as json\n+except ImportError:\n+    import json\n \n import requests\n \n@@ -229,8 +233,68 @@ class RequestsTestSuite(unittest.TestCase):\n             requests.get(httpbin(''))\n \n \n+    def test_urlencoded_post_data(self):\n+        r = requests.post(httpbin('post'), data=dict(test='fooaowpeuf'))\n+        self.assertEquals(r.status_code, 200)\n+        self.assertEquals(r.headers['content-type'], 'application/json')\n+        self.assertEquals(r.url, httpbin('post'))\n+        rbody = json.loads(r.content)\n+        self.assertEquals(rbody.get('form'), dict(test='fooaowpeuf'))\n+        self.assertEquals(rbody.get('data'), '')\n+\n+\n     def test_nonurlencoded_post_data(self):\n         r = requests.post(httpbin('post'), data='fooaowpeuf')\n+        self.assertEquals(r.status_code, 200)\n+        self.assertEquals(r.headers['content-type'], 'application/json')\n+        self.assertEquals(r.url, httpbin('post'))\n+        rbody = json.loads(r.content)\n+        # Body wasn't valid url encoded data, so the server returns None as\n+        # \"form\" and the raw body as \"data\".\n+        self.assertEquals(rbody.get('form'), None)\n+        self.assertEquals(rbody.get('data'), 'fooaowpeuf')\n+\n+\n+    def test_urlencoded_post_querystring(self):\n+        r = requests.post(httpbin('post'), params=dict(test='fooaowpeuf'))\n+        self.assertEquals(r.status_code, 200)\n+        self.assertEquals(r.headers['content-type'], 'application/json')\n+        self.assertEquals(r.url, httpbin('post?test=fooaowpeuf'))\n+        rbody = json.loads(r.content)\n+        self.assertEquals(rbody.get('form'), {}) # No form supplied\n+        self.assertEquals(rbody.get('data'), '')\n+\n+\n+    def test_nonurlencoded_post_querystring(self):\n+        r = requests.post(httpbin('post'), params='fooaowpeuf')\n+        self.assertEquals(r.status_code, 200)\n+        self.assertEquals(r.headers['content-type'], 'application/json')\n+        self.assertEquals(r.url, httpbin('post?fooaowpeuf'))\n+        rbody = json.loads(r.content)\n+        self.assertEquals(rbody.get('form'), {}) # No form supplied\n+        self.assertEquals(rbody.get('data'), '')\n+\n+\n+    def test_urlencoded_post_query_and_data(self):\n+        r = requests.post(httpbin('post'), params=dict(test='fooaowpeuf'),\n+                          data=dict(test2=\"foobar\"))\n+        self.assertEquals(r.status_code, 200)\n+        self.assertEquals(r.headers['content-type'], 'application/json')\n+        self.assertEquals(r.url, httpbin('post?test=fooaowpeuf'))\n+        rbody = json.loads(r.content)\n+        self.assertEquals(rbody.get('form'), dict(test2='foobar'))\n+        self.assertEquals(rbody.get('data'), '')\n+\n+\n+    def test_nonurlencoded_post_query_and_data(self):\n+        r = requests.post(httpbin('post'), params='fooaowpeuf',\n+                          data=\"foobar\")\n+        self.assertEquals(r.status_code, 200)\n+        self.assertEquals(r.headers['content-type'], 'application/json')\n+        self.assertEquals(r.url, httpbin('post?fooaowpeuf'))\n+        rbody = json.loads(r.content)\n+        self.assertEquals(rbody.get('form'), None)\n+        self.assertEquals(rbody.get('data'), 'foobar')\n \n \n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#3e7c682e66fb4b276c8343bb718d8b13037cea15", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 28 | Lines Deleted: 13 | Files Changed: 2 | Hunks: 21 | Methods Changed: 14 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 41 | Churn Cumulative: 1008 | Contributors (this commit): 4 | Commits (past 90d): 33 | Contributors (cumulative): 8 | DMM Complexity: 0.7142857142857143\n\nDIFF:\n@@ -19,7 +19,7 @@ from .models import Request, Response, AuthManager, AuthObject, auth_manager\n __all__ = ('request', 'get', 'head', 'post', 'put', 'delete')\n \n def request(method, url, params=None, data=None, headers=None, cookies=None, files=None, auth=None,\n-            timeout=None, allow_redirects=False):\n+            timeout=None, allow_redirects=False, proxies=None):\n     \"\"\"Constructs and sends a :class:`Request <models.Request>`. Returns :class:`Response <models.Response>` object.\n \n     :param method: method for the new :class:`Request` object.\n@@ -32,6 +32,7 @@ def request(method, url, params=None, data=None, headers=None, cookies=None, fil\n     :param auth: (optional) AuthObject to enable Basic HTTP Auth.\n     :param timeout: (optional) Float describing the timeout of the request.\n     :param allow_redirects: (optional) Boolean. Set to True if POST/PUT/DELETE redirect following is allowed.\n+    :param proxies: (optional) Dictionary mapping protocol to the URL of the proxy.\n     \"\"\"\n \n     r = Request(\n@@ -44,14 +45,15 @@ def request(method, url, params=None, data=None, headers=None, cookies=None, fil\n         files = files,\n         auth = auth or auth_manager.get_auth(url),\n         timeout = timeout or config.settings.timeout,\n-        allow_redirects = allow_redirects\n+        allow_redirects = allow_redirects,\n+        proxies = proxies\n     )\n \n     r.send()\n \n     return r.response\n \n-def get(url, params=None, headers=None, cookies=None, auth=None, timeout=None):\n+def get(url, params=None, headers=None, cookies=None, auth=None, timeout=None, proxies=None):\n     \"\"\"Sends a GET request. Returns :class:`Response` object.\n \n     :param url: URL for the new :class:`Request` object.\n@@ -60,12 +62,14 @@ def get(url, params=None, headers=None, cookies=None, auth=None, timeout=None):\n     :param cookies: (optional) CookieJar object to send with the :class:`Request`.\n     :param auth: (optional) AuthObject to enable Basic HTTP Auth.\n     :param timeout: (optional) Float describing the timeout of the request.\n+    :param proxies: (optional) Dictionary mapping protocol to the URL of the proxy.\n     \"\"\"\n \n-    return request('GET', url, params=params, headers=headers, cookies=cookies, auth=auth, timeout=timeout)\n+    return request('GET', url, params=params, headers=headers, cookies=cookies, auth=auth, timeout=timeout,\n+                   proxies=proxies)\n \n \n-def head(url, params=None, headers=None, cookies=None, auth=None, timeout=None):\n+def head(url, params=None, headers=None, cookies=None, auth=None, timeout=None, proxies=None):\n     \"\"\"Sends a HEAD request. Returns :class:`Response` object.\n \n     :param url: URL for the new :class:`Request` object.\n@@ -74,13 +78,15 @@ def head(url, params=None, headers=None, cookies=None, auth=None, timeout=None):\n     :param cookies: (optional) CookieJar object to send with the :class:`Request`.\n     :param auth: (optional) AuthObject to enable Basic HTTP Auth.\n     :param timeout: (optional) Float describing the timeout of the request.\n+    :param proxies: (optional) Dictionary mapping protocol to the URL of the proxy.\n     \"\"\"\n \n-    return request('HEAD', url, params=params, headers=headers, cookies=cookies, auth=auth, timeout=timeout)\n+    return request('HEAD', url, params=params, headers=headers, cookies=cookies, auth=auth, timeout=timeout,\n+                   proxies=proxies)\n \n \n def post(url, data='', headers=None, files=None, cookies=None, auth=None,\n-         timeout=None, allow_redirects=False, params=None):\n+         timeout=None, allow_redirects=False, params=None, proxies=None):\n     \"\"\"Sends a POST request. Returns :class:`Response` object.\n \n     :param url: URL for the new :class:`Request` object.\n@@ -92,15 +98,16 @@ def post(url, data='', headers=None, files=None, cookies=None, auth=None,\n     :param timeout: (optional) Float describing the timeout of the request.\n     :param allow_redirects: (optional) Boolean. Set to True if redirect following is allowed.\n     :param params: (optional) Dictionary of parameters, or bytes, to be sent in the query string for the :class:`Request`.\n+    :param proxies: (optional) Dictionary mapping protocol to the URL of the proxy.\n     \"\"\"\n \n     return request('POST', url, params=params, data=data, headers=headers,\n                    files=files, cookies=cookies, auth=auth, timeout=timeout,\n-                   allow_redirects=allow_redirects)\n+                   allow_redirects=allow_redirects, proxies=proxies)\n \n \n def put(url, data='', headers=None, files=None, cookies=None, auth=None,\n-        timeout=None, allow_redirects=False, params=None):\n+        timeout=None, allow_redirects=False, params=None, proxies=None):\n     \"\"\"Sends a PUT request. Returns :class:`Response` object.\n \n     :param url: URL for the new :class:`Request` object.\n@@ -112,14 +119,16 @@ def put(url, data='', headers=None, files=None, cookies=None, auth=None,\n     :param timeout: (optional) Float describing the timeout of the request.\n     :param allow_redirects: (optional) Boolean. Set to True if redirect following is allowed.\n     :param params: (optional) Dictionary of parameters, or bytes, to be sent in the query string for the :class:`Request`.\n+    :param proxies: (optional) Dictionary mapping protocol to the URL of the proxy.\n     \"\"\"\n \n     return request('PUT', url, params=params, data=data, headers=headers,\n                    files=files, cookies=cookies, auth=auth, timeout=timeout,\n-                   allow_redirects=allow_redirects)\n+                   allow_redirects=allow_redirects, proxies=proxies)\n \n \n-def delete(url, params=None, headers=None, cookies=None, auth=None, timeout=None, allow_redirects=False):\n+def delete(url, params=None, headers=None, cookies=None, auth=None, timeout=None, allow_redirects=False,\n+           proxies=None):\n     \"\"\"Sends a DELETE request. Returns :class:`Response` object.\n \n     :param url: URL for the new :class:`Request` object.\n@@ -129,7 +138,8 @@ def delete(url, params=None, headers=None, cookies=None, auth=None, timeout=None\n     :param auth: (optional) AuthObject to enable Basic HTTP Auth.\n     :param timeout: (optional) Float describing the timeout of the request.\n     :param allow_redirects: (optional) Boolean. Set to True if redirect following is allowed.\n+    :param proxies: (optional) Dictionary mapping protocol to the URL of the proxy.\n     \"\"\"\n \n     return request('DELETE', url, params=params, headers=headers, cookies=cookies, auth=auth,\n-                    timeout=timeout, allow_redirects=allow_redirects)\n+                    timeout=timeout, allow_redirects=allow_redirects, proxies=proxies)\n\n@@ -32,7 +32,8 @@ class Request(object):\n \n     def __init__(self, url=None, headers=dict(), files=None, method=None,\n                  data=dict(), params=dict(), auth=None, cookiejar=None,\n-                 timeout=None, redirect=False, allow_redirects=False):\n+                 timeout=None, redirect=False, allow_redirects=False,\n+                 proxies=None):\n \n         socket.setdefaulttimeout(timeout)\n \n@@ -55,6 +56,8 @@ class Request(object):\n         self.redirect = redirect\n         #: Set to True if full redirects are allowed (e.g. re-POST-ing of data at new ``Location``)\n         self.allow_redirects = allow_redirects\n+        # Dictionary mapping protocol to the URL of the proxy (e.g. {'http': 'foo.bar:3128'})\n+        self.proxies = proxies\n \n         self.data, self._enc_data = self._encode_params(data)\n         self.params, self._enc_params = self._encode_params(params)\n@@ -110,6 +113,8 @@ class Request(object):\n \n             _handlers.append(self.auth.handler)\n \n+        if self.proxies:\n+            _handlers.append(urllib2.ProxyHandler(self.proxies))\n \n         _handlers.append(HTTPRedirectHandler)\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#bcd30f05abfa3295a4189427c4271b6d93b98035", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 3 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 3 | Churn Cumulative: 86 | Contributors (this commit): 2 | Commits (past 90d): 4 | Contributors (cumulative): 2 | DMM Complexity: None\n\nDIFF:\n@@ -5,6 +5,9 @@ import os\n import sys\n import requests\n \n+try:\n+    from setuptools import setup\n+except ImportError:\n     from distutils.core import setup\n \n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#bdf9f90c8a3015ff7b7d03259ce57ec0ee98eb12", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 4 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 6 | Churn Cumulative: 616 | Contributors (this commit): 7 | Commits (past 90d): 24 | Contributors (cumulative): 7 | DMM Complexity: None\n\nDIFF:\n@@ -5,10 +5,8 @@ from __future__ import with_statement\n \n import unittest\n import cookielib\n-try:\n-    import simplejson as json\n-except ImportError:\n-    import json\n+\n+import omnijson as json\n \n import requests\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#00f066a467901bdbb107396c015c17275fb59cc6", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 77 | Lines Deleted: 24 | Files Changed: 3 | Hunks: 16 | Methods Changed: 10 | Complexity Δ (Sum/Max): 4/2 | Churn Δ: 101 | Churn Cumulative: 1725 | Contributors (this commit): 8 | Commits (past 90d): 60 | Contributors (cumulative): 15 | DMM Complexity: 1.0\n\nDIFF:\n@@ -11,15 +11,16 @@ This module impliments the Requests API.\n \n \"\"\"\n \n-import requests\n import config\n from .models import Request, Response, AuthManager, AuthObject, auth_manager\n \n \n-__all__ = ('request', 'get', 'head', 'post', 'put', 'delete')\n+__all__ = ('request', 'get', 'head', 'post', 'patch', 'put', 'delete')\n \n-def request(method, url, params=None, data=None, headers=None, cookies=None, files=None, auth=None,\n+def request(method, url,\n+    params=None, data=None, headers=None, cookies=None, files=None, auth=None,\n     timeout=None, allow_redirects=False, proxies=None):\n+\n     \"\"\"Constructs and sends a :class:`Request <models.Request>`. Returns :class:`Response <models.Response>` object.\n \n     :param method: method for the new :class:`Request` object.\n@@ -53,7 +54,11 @@ def request(method, url, params=None, data=None, headers=None, cookies=None, fil\n \n     return r.response\n \n-def get(url, params=None, headers=None, cookies=None, auth=None, timeout=None, proxies=None):\n+\n+def get(url,\n+    params=None, headers=None, cookies=None, auth=None, timeout=None,\n+    proxies=None):\n+\n     \"\"\"Sends a GET request. Returns :class:`Response` object.\n \n     :param url: URL for the new :class:`Request` object.\n@@ -65,11 +70,15 @@ def get(url, params=None, headers=None, cookies=None, auth=None, timeout=None, p\n     :param proxies: (optional) Dictionary mapping protocol to the URL of the proxy.\n     \"\"\"\n \n-    return request('GET', url, params=params, headers=headers, cookies=cookies, auth=auth, timeout=timeout,\n-                   proxies=proxies)\n+    return request('GET', url,\n+        params=params, headers=headers, cookies=cookies, auth=auth,\n+        timeout=timeout, proxies=proxies)\n \n \n-def head(url, params=None, headers=None, cookies=None, auth=None, timeout=None, proxies=None):\n+def head(url,\n+    params=None, headers=None, cookies=None, auth=None, timeout=None,\n+    proxies=None):\n+\n     \"\"\"Sends a HEAD request. Returns :class:`Response` object.\n \n     :param url: URL for the new :class:`Request` object.\n@@ -81,12 +90,15 @@ def head(url, params=None, headers=None, cookies=None, auth=None, timeout=None,\n     :param proxies: (optional) Dictionary mapping protocol to the URL of the proxy.\n     \"\"\"\n \n-    return request('HEAD', url, params=params, headers=headers, cookies=cookies, auth=auth, timeout=timeout,\n-                   proxies=proxies)\n+    return request('HEAD', url,\n+        params=params, headers=headers, cookies=cookies, auth=auth,\n+        timeout=timeout, proxies=proxies)\n \n \n-def post(url, data='', headers=None, files=None, cookies=None, auth=None,\n-         timeout=None, allow_redirects=False, params=None, proxies=None):\n+def post(url,\n+    data='', headers=None, files=None, cookies=None, auth=None, timeout=None,\n+    allow_redirects=False, params=None, proxies=None):\n+\n     \"\"\"Sends a POST request. Returns :class:`Response` object.\n \n     :param url: URL for the new :class:`Request` object.\n@@ -101,8 +113,9 @@ def post(url, data='', headers=None, files=None, cookies=None, auth=None,\n     :param proxies: (optional) Dictionary mapping protocol to the URL of the proxy.\n     \"\"\"\n \n-    return request('POST', url, params=params, data=data, headers=headers,\n-                   files=files, cookies=cookies, auth=auth, timeout=timeout,\n+    return request('POST', url,\n+        params=params, data=data, headers=headers, files=files,\n+        cookies=cookies, auth=auth, timeout=timeout,\n         allow_redirects=allow_redirects, proxies=proxies)\n \n \n@@ -122,13 +135,38 @@ def put(url, data='', headers=None, files=None, cookies=None, auth=None,\n     :param proxies: (optional) Dictionary mapping protocol to the URL of the proxy.\n     \"\"\"\n \n-    return request('PUT', url, params=params, data=data, headers=headers,\n-                   files=files, cookies=cookies, auth=auth, timeout=timeout,\n+    return request('PUT', url,\n+        params=params, data=data, headers=headers, files=files,\n+        cookies=cookies, auth=auth, timeout=timeout,\n         allow_redirects=allow_redirects, proxies=proxies)\n \n \n-def delete(url, params=None, headers=None, cookies=None, auth=None, timeout=None, allow_redirects=False,\n-           proxies=None):\n+def patch(url, data='', headers=None, files=None, cookies=None, auth=None,\n+        timeout=None, allow_redirects=False, params=None, proxies=None):\n+    \"\"\"Sends a PATCH request. Returns :class:`Response` object.\n+\n+    :param url: URL for the new :class:`Request` object.\n+    :param data: (optional) Dictionary or bytes to send in the body of the :class:`Request`.\n+    :param headers: (optional) Dictionary of HTTP Headers to sent with the :class:`Request`.\n+    :param files: (optional) Dictionary of 'filename': file-like-objects for multipart encoding upload.\n+    :param cookies: (optional) CookieJar object to send with the :class:`Request`.\n+    :param auth: (optional) AuthObject to enable Basic HTTP Auth.\n+    :param timeout: (optional) Float describing the timeout of the request.\n+    :param allow_redirects: (optional) Boolean. Set to True if redirect following is allowed.\n+    :param params: (optional) Dictionary of parameters, or bytes, to be sent in the query string for the :class:`Request`.\n+    :param proxies: (optional) Dictionary mapping protocol to the URL of the proxy.\n+    \"\"\"\n+\n+    return request('PATCH', url,\n+        params=params, data=data, headers=headers, files=files,\n+        cookies=cookies, auth=auth, timeout=timeout,\n+        allow_redirects=allow_redirects, proxies=proxies)\n+\n+\n+def delete(url,\n+    params=None, headers=None, cookies=None, auth=None, timeout=None,\n+    allow_redirects=False, proxies=None):\n+\n     \"\"\"Sends a DELETE request. Returns :class:`Response` object.\n \n     :param url: URL for the new :class:`Request` object.\n@@ -141,5 +179,6 @@ def delete(url, params=None, headers=None, cookies=None, auth=None, timeout=None\n     :param proxies: (optional) Dictionary mapping protocol to the URL of the proxy.\n     \"\"\"\n \n-    return request('DELETE', url, params=params, headers=headers, cookies=cookies, auth=auth,\n+    return request('DELETE', url,\n+        params=params, headers=headers, cookies=cookies, auth=auth,\n         timeout=timeout, allow_redirects=allow_redirects, proxies=proxies)\n\n@@ -28,12 +28,12 @@ class Request(object):\n     Requests. Recommended interface is with the Requests functions.\n     \"\"\"\n \n-    _METHODS = ('GET', 'HEAD', 'PUT', 'POST', 'DELETE')\n+    _METHODS = ('GET', 'HEAD', 'PUT', 'POST', 'DELETE', 'PATCH')\n \n-    def __init__(self, url=None, headers=dict(), files=None, method=None,\n-                 data=dict(), params=dict(), auth=None, cookiejar=None,\n-                 timeout=None, redirect=False, allow_redirects=False,\n-                 proxies=None):\n+    def __init__(self,\n+        url=None, headers=dict(), files=None, method=None, data=dict(),\n+        params=dict(), auth=None, cookiejar=None, timeout=None, redirect=False,\n+        allow_redirects=False, proxies=None):\n \n         socket.setdefaulttimeout(timeout)\n \n\n@@ -128,7 +128,21 @@ class RequestsTestSuite(unittest.TestCase):\n         self.assertEqual(post2.status_code, 200)\n \n         post3 = requests.post(url, data='[{\"some\": \"json\"}]')\n-        self.assertEqual(post.status_code, 200)\n+        self.assertEqual(post3.status_code, 200)\n+\n+\n+    def test_POSTBIN_GET_PATCH_FILES(self):\n+        url = httpbin('patch')\n+        patch = requests.patch(url).raise_for_status()\n+\n+        patch = requests.post(url, data={'some': 'data'})\n+        self.assertEqual(patch.status_code, 200)\n+\n+        patch2 = requests.post(url, files={'some': open('test_requests.py')})\n+        self.assertEqual(patch2.status_code, 200)\n+\n+        patch3 = requests.post(url, data='[{\"some\": \"json\"}]')\n+        self.assertEqual(patch3.status_code, 200)\n \n \n     def test_POSTBIN_GET_POST_FILES_WITH_PARAMS(self):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
