{"custom_id": "requests#52c0daff5f87adb1e89678139fdd054c8005e580", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 3 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 5 | Churn Cumulative: 9452 | Contributors (this commit): 157 | Commits (past 90d): 5 | Contributors (cumulative): 157 | DMM Complexity: None\n\nDIFF:\n@@ -420,9 +420,8 @@ class PreparedRequest(RequestEncodingMixin, RequestHooksMixin):\n         length = None\n \n         if not data and json is not None:\n-            # When urllib3 uses pyOpenSSL, it can only resume large uploads\n-            # properly if receiving a bytes-like object. In Python 2, json.dumps()\n-            # returns just that, but Python 3 returns a Unicode string.\n+            # urllib3 requires a bytes-like body. Python 2's json.dumps\n+            # provides this natively, but Python 3 gives a Unicode string.\n             content_type = 'application/json'\n             body = complexjson.dumps(json)\n             if not isinstance(body, bytes):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#04bb965c87218c74437cd3e1c2fa09866b07b3c0", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 3166 | Contributors (this commit): 36 | Commits (past 90d): 21 | Contributors (cumulative): 36 | DMM Complexity: None\n\nDIFF:\n@@ -1523,7 +1523,7 @@ def test_json_encodes_as_bytes():\n     p.prepare(\n         method='GET',\n         url='https://www.example.com/',\n-        json='body'\n+        json=body\n     )\n     assert isinstance(p.body, bytes)\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#cb4c2c0b6507d0978859cf824ca396902ba81064", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 12 | Lines Deleted: 1 | Files Changed: 2 | Hunks: 2 | Methods Changed: 2 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 13 | Churn Cumulative: 12631 | Contributors (this commit): 170 | Commits (past 90d): 29 | Contributors (cumulative): 195 | DMM Complexity: 0.0\n\nDIFF:\n@@ -792,7 +792,7 @@ class Response(object):\n         :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n         \"\"\"\n \n-        if not self.encoding and len(self.content) > 3:\n+        if not self.encoding and self.content and len(self.content) > 3:\n             # No encoding set. JSON RFC 4627 section 3 states we should expect\n             # UTF-8, -16 or -32. Detect which one to use; If the detection or\n             # decoding fails, fall back to `self.text` (using chardet to make\n\n@@ -1227,6 +1227,17 @@ class TestRequests:\n         proxies['one'].clear.assert_called_once_with()\n         proxies['two'].clear.assert_called_once_with()\n \n+    def test_response_json_when_content_is_None(self, httpbin):\n+        r = requests.get(httpbin('/status/204'))\n+        # Make sure r.content is None\n+        r.status_code = 0\n+        r._content = False\n+        r._content_consumed = False\n+\n+        assert r.content is None\n+        with pytest.raises(ValueError):\n+            r.json()\n+\n \n class TestCaseInsensitiveDict:\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#1121f8b915000d8fd60fb8015286b9c9fd8abebc", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 38 | Lines Deleted: 2 | Files Changed: 2 | Hunks: 3 | Methods Changed: 3 | Complexity Δ (Sum/Max): 5/5 | Churn Δ: 40 | Churn Cumulative: 6362 | Contributors (this commit): 98 | Commits (past 90d): 26 | Contributors (cumulative): 112 | DMM Complexity: 1.0\n\nDIFF:\n@@ -228,10 +228,10 @@ class SessionRedirectMixin(object):\n         if self.trust_env and not should_bypass_proxies(url):\n             environ_proxies = get_environ_proxies(url)\n \n-            proxy = environ_proxies.get(scheme)\n+            proxy = environ_proxies.get('all', environ_proxies.get(scheme))\n \n             if proxy:\n-                new_proxies.setdefault(scheme, environ_proxies[scheme])\n+                new_proxies.setdefault(scheme, proxy)\n \n         if 'Proxy-Authorization' in headers:\n             del headers['Proxy-Authorization']\n\n@@ -1548,6 +1548,42 @@ def test_requests_are_updated_each_time(httpbin):\n         assert session.calls[-1] == send_call\n \n \n+@contextlib.contextmanager\n+def override_environ(**kwargs):\n+    save_env = dict(os.environ)\n+    for key, value in kwargs.items():\n+        if value is None:\n+            del os.environ[key]\n+        else:\n+            os.environ[key] = value\n+    try:\n+        yield\n+    finally:\n+        os.environ.clear()\n+        os.environ.update(save_env)\n+\n+\n+@pytest.mark.parametrize(\"var,url,proxy\", [\n+    ('http_proxy', 'http://example.com', 'socks5://proxy.com:9876'),\n+    ('https_proxy', 'https://example.com', 'socks5://proxy.com:9876'),\n+    ('all_proxy', 'http://example.com', 'socks5://proxy.com:9876'),\n+    ('all_proxy', 'https://example.com', 'socks5://proxy.com:9876'),\n+])\n+def test_proxy_env_vars_override_default(var, url, proxy):\n+    session = requests.Session()\n+    prep = PreparedRequest()\n+    prep.prepare(method='GET', url=url)\n+\n+    kwargs = {\n+        var: proxy\n+    }\n+    scheme = urlparse(url).scheme\n+    with override_environ(**kwargs):\n+        proxies = session.rebuild_proxies(prep, {})\n+        assert scheme in proxies\n+        assert proxies[scheme] == proxy\n+\n+\n @pytest.mark.parametrize(\n     'data', (\n         (('a', 'b'), ('c', 'd')),\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#17b6c5742ca7118858962d73220968a2e281b82e", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 4 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 2407 | Contributors (this commit): 61 | Commits (past 90d): 6 | Contributors (cumulative): 61 | DMM Complexity: 0.0\n\nDIFF:\n@@ -539,6 +539,10 @@ def should_bypass_proxies(url):\n                 if is_valid_cidr(proxy_ip):\n                     if address_in_network(ip, proxy_ip):\n                         return True\n+                elif ip == proxy_ip:\n+                    # If no_proxy ip was defined in plain IP notation instead of cidr notation &\n+                    # matches the IP of the index\n+                    return True\n         else:\n             for host in no_proxy:\n                 if netloc.endswith(host) or netloc.split(':')[0].endswith(host):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#f59a95713ebefcbcf4baf247d9ef193d5e8b83b0", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 37 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): 2/2 | Churn Δ: 38 | Churn Cumulative: 983 | Contributors (this commit): 9 | Commits (past 90d): 11 | Contributors (cumulative): 9 | DMM Complexity: 1.0\n\nDIFF:\n@@ -11,7 +11,7 @@ from requests.utils import (\n     guess_filename, guess_json_utf, is_ipv4_address,\n     is_valid_cidr, iter_slices, parse_dict_header,\n     parse_header_links, prepend_scheme_if_needed,\n-    requote_uri, select_proxy, super_len,\n+    requote_uri, select_proxy, should_bypass_proxies, super_len,\n     to_key_val_list, to_native_string,\n     unquote_header_value, unquote_unreserved,\n     urldefragauth)\n@@ -131,6 +131,42 @@ class TestGetEnvironProxies:\n         assert get_environ_proxies(url) != {}\n \n \n+class TestShouldBypassProxies:\n+    \"\"\"\n+    Tests for should_bypass_proxies function\n+    \"\"\"\n+\n+    @pytest.mark.parametrize(\n+        'url, expected', (\n+                ('http://192.168.0.1:5000/', True),\n+                ('http://192.168.0.1/', True),\n+                ('http://172.16.1.1/', True),\n+                ('http://172.16.1.1:5000/', True),\n+                ('http://localhost.localdomain:5000/v1.0/', True),\n+        ))\n+    def test_should_bypass_proxies(self, url, expected, monkeypatch):\n+        \"\"\"\n+        Test to check if proxy is bypassed\n+        \"\"\"\n+        monkeypatch.setenv('no_proxy', '192.168.0.0/24,127.0.0.1,localhost.localdomain,172.16.1.1')\n+        monkeypatch.setenv('NO_PROXY', '192.168.0.0/24,127.0.0.1,localhost.localdomain,172.16.1.1')\n+        assert should_bypass_proxies(url) == expected\n+\n+    @pytest.mark.parametrize(\n+        'url, expected', (\n+                ('http://172.16.1.12/', False),\n+                ('http://172.16.1.12:5000/', False),\n+                ('http://google.com:5000/v1.0/', False),\n+        ))\n+    def test_should_bypass_proxies(self, url, expected, monkeypatch):\n+        \"\"\"\n+        Test to check if proxy is not bypassed\n+        \"\"\"\n+        monkeypatch.setenv('no_proxy', '192.168.0.0/24,127.0.0.1,localhost.localdomain,172.16.1.1')\n+        monkeypatch.setenv('NO_PROXY', '192.168.0.0/24,127.0.0.1,localhost.localdomain,172.16.1.1')\n+        assert should_bypass_proxies(url) == expected\n+\n+\n class TestIsIPv4Address:\n \n     def test_valid(self):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#b94decc47c1026067b99e4452ddabec1ad139845", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 20 | Lines Deleted: 36 | Files Changed: 1 | Hunks: 2 | Methods Changed: 2 | Complexity Δ (Sum/Max): -1/0 | Churn Δ: 56 | Churn Cumulative: 1039 | Contributors (this commit): 9 | Commits (past 90d): 12 | Contributors (cumulative): 9 | DMM Complexity: 0.0\n\nDIFF:\n@@ -131,42 +131,6 @@ class TestGetEnvironProxies:\n         assert get_environ_proxies(url) != {}\n \n \n-class TestShouldBypassProxies:\n-    \"\"\"\n-    Tests for should_bypass_proxies function\n-    \"\"\"\n-\n-    @pytest.mark.parametrize(\n-        'url, expected', (\n-                ('http://192.168.0.1:5000/', True),\n-                ('http://192.168.0.1/', True),\n-                ('http://172.16.1.1/', True),\n-                ('http://172.16.1.1:5000/', True),\n-                ('http://localhost.localdomain:5000/v1.0/', True),\n-        ))\n-    def test_should_bypass_proxies(self, url, expected, monkeypatch):\n-        \"\"\"\n-        Test to check if proxy is bypassed\n-        \"\"\"\n-        monkeypatch.setenv('no_proxy', '192.168.0.0/24,127.0.0.1,localhost.localdomain,172.16.1.1')\n-        monkeypatch.setenv('NO_PROXY', '192.168.0.0/24,127.0.0.1,localhost.localdomain,172.16.1.1')\n-        assert should_bypass_proxies(url) == expected\n-\n-    @pytest.mark.parametrize(\n-        'url, expected', (\n-                ('http://172.16.1.12/', False),\n-                ('http://172.16.1.12:5000/', False),\n-                ('http://google.com:5000/v1.0/', False),\n-        ))\n-    def test_should_bypass_proxies(self, url, expected, monkeypatch):\n-        \"\"\"\n-        Test to check if proxy is not bypassed\n-        \"\"\"\n-        monkeypatch.setenv('no_proxy', '192.168.0.0/24,127.0.0.1,localhost.localdomain,172.16.1.1')\n-        monkeypatch.setenv('NO_PROXY', '192.168.0.0/24,127.0.0.1,localhost.localdomain,172.16.1.1')\n-        assert should_bypass_proxies(url) == expected\n-\n-\n class TestIsIPv4Address:\n \n     def test_valid(self):\n@@ -464,3 +428,23 @@ def test_to_native_string(value, expected):\n     ))\n def test_urldefragauth(url, expected):\n     assert urldefragauth(url) == expected\n+\n+\n+@pytest.mark.parametrize(\n+    'url, expected', (\n+            ('http://192.168.0.1:5000/', True),\n+            ('http://192.168.0.1/', True),\n+            ('http://172.16.1.1/', True),\n+            ('http://172.16.1.1:5000/', True),\n+            ('http://localhost.localdomain:5000/v1.0/', True),\n+            ('http://172.16.1.12/', False),\n+            ('http://172.16.1.12:5000/', False),\n+            ('http://google.com:5000/v1.0/', False),\n+    ))\n+def test_should_bypass_proxies(url, expected, monkeypatch):\n+    \"\"\"\n+    Tests for function should_bypass_proxies to check if proxy can be bypassed or not\n+    \"\"\"\n+    monkeypatch.setenv('no_proxy', '192.168.0.0/24,127.0.0.1,localhost.localdomain,172.16.1.1')\n+    monkeypatch.setenv('NO_PROXY', '192.168.0.0/24,127.0.0.1,localhost.localdomain,172.16.1.1')\n+    assert should_bypass_proxies(url) == expected\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#35744c3e5d212f8841be3a5ab7de3e3b37dda5bb", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): -1/0 | Churn Δ: 2 | Churn Cumulative: 60 | Contributors (this commit): 2 | Commits (past 90d): 4 | Contributors (cumulative): 2 | DMM Complexity: None\n\nDIFF:\n@@ -12,7 +12,7 @@ def test_chunked_upload():\n     \"\"\"can safely send generators\"\"\"\n     close_server = threading.Event()\n     server = Server.basic_response_server(wait_to_close_event=close_server)\n-    data = (i for i in [b'a', b'b', b'c'])\n+    data = iter([b'a', b'b', b'c'])\n \n     with server as (host, port):\n         url = 'http://{0}:{1}/'.format(host, port)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#b6d6894f539f3568597901be354a54da7606062b", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 52 | Lines Deleted: 6 | Files Changed: 2 | Hunks: 9 | Methods Changed: 8 | Complexity Δ (Sum/Max): 8/6 | Churn Δ: 58 | Churn Cumulative: 367 | Contributors (this commit): 3 | Commits (past 90d): 13 | Contributors (cumulative): 5 | DMM Complexity: 1.0\n\nDIFF:\n@@ -135,3 +135,26 @@ class TestTestServer:\n             sock.close()\n             \n         assert server.handler_results[0] == data\n+\n+    def test_server_finishes_on_error(self):\n+        \"\"\"the server thread exits even if an exception exits the context manager\"\"\"\n+        server = Server.basic_response_server()\n+        with pytest.raises(Exception):\n+            with server:\n+                raise Exception()\n+\n+        assert len(server.handler_results) == 0\n+\n+        # if the server thread fails to finish, the test suite will hang\n+        # and get killed by the jenkins timeout.\n+\n+    def test_server_finishes_when_no_connections(self):\n+        \"\"\"the server thread exits even if there are no connections\"\"\"\n+        server = Server.basic_response_server()\n+        with server:\n+            pass\n+\n+        assert len(server.handler_results) == 0\n+\n+        # if the server thread fails to finish, the test suite will hang\n+        # and get killed by the jenkins timeout.\n\n@@ -60,17 +60,17 @@ class Server(threading.Thread):\n \n     def run(self):\n         try:\n-            sock = self._create_socket_and_bind()\n+            self.server_sock = self._create_socket_and_bind()\n             # in case self.port = 0\n-            self.port = sock.getsockname()[1]\n+            self.port = self.server_sock.getsockname()[1]\n             self.ready_event.set()\n-            self._handle_requests(sock)\n+            self._handle_requests()\n \n             if self.wait_to_close_event:\n                 self.wait_to_close_event.wait(self.WAIT_EVENT_TIMEOUT)\n         finally:\n             self.ready_event.set() # just in case of exception\n-            sock.close()\n+            self._close_server_sock_ignore_errors()\n             self.stop_event.set()\n \n     def _create_socket_and_bind(self):\n@@ -79,13 +79,32 @@ class Server(threading.Thread):\n         sock.listen(0)\n         return sock\n \n-    def _handle_requests(self, server_sock):\n+    def _close_server_sock_ignore_errors(self):\n+        try:\n+            self.server_sock.close()\n+        except IOError:\n+            pass\n+\n+    def _handle_requests(self):\n         for _ in range(self.requests_to_handle):\n-            sock = server_sock.accept()[0]\n+            sock = self._accept_connection()\n+            if not sock:\n+                break\n+\n             handler_result = self.handler(sock)\n \n             self.handler_results.append(handler_result)\n \n+    def _accept_connection(self):\n+        try:\n+            ready, _, _ = select.select([self.server_sock], [], [], self.WAIT_EVENT_TIMEOUT)\n+            if not ready:\n+                return None\n+\n+            return self.server_sock.accept()[0]\n+        except (select.error, socket.error):\n+            return None\n+\n     def __enter__(self):\n         self.start()\n         self.ready_event.wait(self.WAIT_EVENT_TIMEOUT)\n@@ -99,4 +118,8 @@ class Server(threading.Thread):\n                 # avoid server from waiting for event timeouts\n                 # if an exception is found in the main thread\n                 self.wait_to_close_event.set()\n+\n+        # ensure server thread doesn't get stuck waiting for connections\n+        self._close_server_sock_ignore_errors()\n+        self.join()\n         return False # allow exceptions to propagate\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#9e9d2c6521e37e1c4f35e04f95a910ad47e28958", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 15 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 2 | Methods Changed: 3 | Complexity Δ (Sum/Max): 4/4 | Churn Δ: 16 | Churn Cumulative: 1073 | Contributors (this commit): 36 | Commits (past 90d): 3 | Contributors (cumulative): 36 | DMM Complexity: 1.0\n\nDIFF:\n@@ -54,10 +54,24 @@ class BaseAdapter(object):\n     def __init__(self):\n         super(BaseAdapter, self).__init__()\n \n-    def send(self):\n+    def send(self, request, stream=False, timeout=None, verify=True,\n+             cert=None, proxies=None):\n+        \"\"\"Sends PreparedRequest object. Returns Response object.\n+\n+        :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n+        :param stream: (optional) Whether to stream the request content.\n+        :param timeout: (optional) How long to wait for the server to send\n+            data before giving up, as a float, or a :ref:`(connect timeout,\n+            read timeout) <timeouts>` tuple.\n+        :type timeout: float or tuple\n+        :param verify: (optional) Whether to verify SSL certificates.\n+        :param cert: (optional) Any user-provided SSL certificate to be trusted.\n+        :param proxies: (optional) The proxies dictionary to apply to the request.\n+        \"\"\"\n         raise NotImplementedError\n \n     def close(self):\n+        \"\"\"Cleans up adapter specific items.\"\"\"\n         raise NotImplementedError\n \n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#5e86103387b39ec4b9a443e0eaacd994d04adf48", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 1 | Churn Cumulative: 3230 | Contributors (this commit): 39 | Commits (past 90d): 24 | Contributors (cumulative): 39 | DMM Complexity: None\n\nDIFF:\n@@ -1107,6 +1107,7 @@ class TestRequests:\n             preq = req.prepare()\n             assert test_url == preq.url\n \n+    @pytest.mark.xfail(raises=ConnectionError)\n     def test_auth_is_stripped_on_redirect_off_host(self, httpbin):\n         r = requests.get(\n             httpbin('redirect-to'),\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#de4c75bbadeaf68a01bb14e25dd6c86b75404fd6", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 3151 | Contributors (this commit): 74 | Commits (past 90d): 5 | Contributors (cumulative): 74 | DMM Complexity: None\n\nDIFF:\n@@ -329,6 +329,8 @@ class Session(SessionRedirectMixin):\n \n         #: Maximum number of redirects allowed. If the request exceeds this\n         #: limit, a :class:`TooManyRedirects` exception is raised.\n+        #: This defaults to requests.models.DEFAULT_REDIRECT_LIMIT, which is\n+        #: 30.\n         self.max_redirects = DEFAULT_REDIRECT_LIMIT\n \n         #: Trust environment settings for proxy configuration, default\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#400d27f982ff24784388409a70ad8945927ac023", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 56 | Lines Deleted: 0 | Files Changed: 2 | Hunks: 4 | Methods Changed: 1 | Complexity Δ (Sum/Max): 6/6 | Churn Δ: 56 | Churn Cumulative: 3287 | Contributors (this commit): 40 | Commits (past 90d): 15 | Contributors (cumulative): 42 | DMM Complexity: 0.0\n\nDIFF:\n@@ -1 +1,22 @@\n # coding: utf-8\n+\n+\"\"\"Requests test package initialisation.\"\"\"\n+\n+import warnings\n+\n+try:\n+    import urllib3 as urllib3_package\n+except ImportError:\n+    urllib3_package = False\n+\n+from requests.packages import urllib3 as urllib3_bundle\n+\n+if urllib3_package is urllib3_bundle:\n+    from urllib3.exceptions import SNIMissingWarning\n+else:\n+    from requests.packages.urllib3.exceptions import SNIMissingWarning\n+\n+# urllib3 sets SNIMissingWarning to only go off once,\n+# while this test suite requires it to always fire\n+# so that it occurs during test_requests.test_https_warnings\n+warnings.simplefilter('always', SNIMissingWarning)\n\n@@ -9,6 +9,7 @@ import os\n import pickle\n import collections\n import contextlib\n+import warnings\n \n import io\n import requests\n@@ -36,6 +37,19 @@ from .utils import override_environ\n # listening on that port)\n TARPIT = 'http://10.255.255.1'\n \n+try:\n+    from ssl import SSLContext\n+    del SSLContext\n+    HAS_MODERN_SSL = True\n+except ImportError:\n+    HAS_MODERN_SSL = False\n+\n+try:\n+    requests.pyopenssl\n+    HAS_PYOPENSSL = True\n+except AttributeError:\n+    HAS_PYOPENSSL = False\n+\n \n class TestRequests:\n \n@@ -606,6 +620,27 @@ class TestRequests:\n     def test_pyopenssl_redirect(self, httpbin_secure, httpbin_ca_bundle):\n         requests.get(httpbin_secure('status', '301'), verify=httpbin_ca_bundle)\n \n+    def test_https_warnings(self, httpbin_secure, httpbin_ca_bundle):\n+        \"\"\"warnings are emitted with requests.get\"\"\"\n+        if HAS_MODERN_SSL or HAS_PYOPENSSL:\n+            warnings_expected = ('SubjectAltNameWarning', )\n+        else:\n+            warnings_expected = ('SNIMissingWarning',\n+                                 'InsecurePlatformWarning',\n+                                 'SubjectAltNameWarning', )\n+\n+        with pytest.warns(None) as warning_records:\n+            warnings.simplefilter('always')\n+            requests.get(httpbin_secure('status', '200'),\n+                         verify=httpbin_ca_bundle)\n+\n+        warning_records = [item for item in warning_records\n+                           if item.category.__name__ != 'ResourceWarning']\n+\n+        warnings_category = tuple(\n+            item.category.__name__ for item in warning_records)\n+        assert warnings_category == warnings_expected\n+\n     def test_urlencoded_get_query_multivalued_param(self, httpbin):\n \n         r = requests.get(httpbin('get'), params=dict(test=['foo', 'baz']))\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#cf3c99890d73f4bc8605c1cd7fbfa4ff1a28237e", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 16 | Lines Deleted: 0 | Files Changed: 2 | Hunks: 2 | Methods Changed: 2 | Complexity Δ (Sum/Max): 4/2 | Churn Δ: 16 | Churn Cumulative: 12735 | Contributors (this commit): 174 | Commits (past 90d): 21 | Contributors (cumulative): 200 | DMM Complexity: 0.0\n\nDIFF:\n@@ -685,6 +685,8 @@ class Response(object):\n \n         if self._content_consumed and isinstance(self._content, bool):\n             raise StreamConsumedError()\n+        elif not isinstance(chunk_size, int):\n+            raise TypeError(\"chunk_size must be an int, it is instead a %s.\" % type(chunk_size))\n         # simulate reading small chunks of the content\n         reused_chunks = iter_slices(self._content, chunk_size)\n \n\n@@ -980,6 +980,20 @@ class TestRequests:\n         chunks = r.iter_content(decode_unicode=True)\n         assert all(isinstance(chunk, str) for chunk in chunks)\n \n+    def test_response_chunk_size_int(self):\n+        \"\"\"Ensure that chunk_size is passed as an integer, otherwise\n+        raise a TypeError.\n+        \"\"\"\n+        r = requests.Response()\n+        r.raw = io.BytesIO(b'the content')\n+        chunks = r.iter_content(1)\n+        assert all(len(chunk) == 1 for chunk in chunks)\n+\n+        r = requests.Response()\n+        r.raw = io.BytesIO(b'the content')\n+        with pytest.raises(TypeError):\n+            chunks = r.iter_content(\"1024\")\n+\n     def test_request_and_response_are_pickleable(self, httpbin):\n         r = requests.get(httpbin('get'))\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#92fe51c0afd9239388d2c8bb17dc46babdf7881f", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 19 | Lines Deleted: 5 | Files Changed: 2 | Hunks: 4 | Methods Changed: 2 | Complexity Δ (Sum/Max): 2/1 | Churn Δ: 24 | Churn Cumulative: 5710 | Contributors (this commit): 91 | Commits (past 90d): 20 | Contributors (cumulative): 104 | DMM Complexity: 0.7142857142857143\n\nDIFF:\n@@ -358,13 +358,20 @@ def get_encoding_from_headers(headers):\n \n def stream_decode_response_unicode(iterator, r):\n     \"\"\"Stream decodes a iterator.\"\"\"\n+    encoding = r.encoding\n \n-    if r.encoding is None:\n-        for item in iterator:\n-            yield item\n-        return\n+    if encoding is None:\n+        encoding = r.apparent_encoding\n+\n+    try:\n+        decoder = codecs.getincrementaldecoder(encoding)(errors='replace')\n+    except (LookupError, TypeError):\n+        # A LookupError is raised if the encoding was not found which could\n+        # indicate a misspelling or similar mistake.\n+        #\n+        # A TypeError can be raised if encoding is None\n+        raise UnicodeError(\"Unable to decode contents with encoding %s.\" % encoding)\n \n-    decoder = codecs.getincrementaldecoder(r.encoding)(errors='replace')\n     for chunk in iterator:\n         rv = decoder.decode(chunk)\n         if rv:\n\n@@ -980,6 +980,13 @@ class TestRequests:\n         chunks = r.iter_content(decode_unicode=True)\n         assert all(isinstance(chunk, str) for chunk in chunks)\n \n+        # check for encoding value of None\n+        r = requests.Response()\n+        r.raw = io.BytesIO(b'the content')\n+        r.encoding = None\n+        chunks = r.iter_content(decode_unicode=True)\n+        assert all(isinstance(chunk, str) for chunk in chunks)\n+\n     def test_response_chunk_size_int(self):\n         \"\"\"Ensure that chunk_size is passed as an integer, otherwise\n         raise a TypeError.\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#0bcf634135e7038c2aa8b4b8b2490ad5c1db5c23", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 8 | Lines Deleted: 3 | Files Changed: 2 | Hunks: 3 | Methods Changed: 3 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 11 | Churn Cumulative: 12753 | Contributors (this commit): 176 | Commits (past 90d): 24 | Contributors (cumulative): 203 | DMM Complexity: 1.0\n\nDIFF:\n@@ -685,7 +685,7 @@ class Response(object):\n \n         if self._content_consumed and isinstance(self._content, bool):\n             raise StreamConsumedError()\n-        elif not isinstance(chunk_size, int):\n+        elif chunk_size is not None and not isinstance(chunk_size, int):\n             raise TypeError(\"chunk_size must be an int, it is instead a %s.\" % type(chunk_size))\n         # simulate reading small chunks of the content\n         reused_chunks = iter_slices(self._content, chunk_size)\n\n@@ -987,8 +987,8 @@ class TestRequests:\n         chunks = r.iter_content(decode_unicode=True)\n         assert all(isinstance(chunk, str) for chunk in chunks)\n \n-    def test_response_chunk_size_int(self):\n-        \"\"\"Ensure that chunk_size is passed as an integer, otherwise\n+    def test_response_chunk_size_type(self):\n+        \"\"\"Ensure that chunk_size is passed as None or an integer, otherwise\n         raise a TypeError.\n         \"\"\"\n         r = requests.Response()\n@@ -996,6 +996,11 @@ class TestRequests:\n         chunks = r.iter_content(1)\n         assert all(len(chunk) == 1 for chunk in chunks)\n \n+        r = requests.Response()\n+        r.raw = io.BytesIO(b'the content')\n+        chunks = r.iter_content(None)\n+        assert list(chunks) == [b'the content']\n+\n         r = requests.Response()\n         r.raw = io.BytesIO(b'the content')\n         with pytest.raises(TypeError):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#0c08ca715484528b41d6957937f1d7af255d897a", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 6 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 6 | Churn Cumulative: 9464 | Contributors (this commit): 160 | Commits (past 90d): 8 | Contributors (cumulative): 160 | DMM Complexity: None\n\nDIFF:\n@@ -657,6 +657,12 @@ class Response(object):\n         read into memory.  This is not necessarily the length of each item\n         returned as decoding can take place.\n \n+        chunk_size must be of type int or None. A value of None will\n+        function differently depending on the value of `stream`.\n+        stream=True will read data as it arrives in whatever size the\n+        chunks are recieved. If stream=False, data is returned as\n+        a single chunk.\n+\n         If decode_unicode is True, content will be decoded using the best\n         available encoding based on the response.\n         \"\"\"\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#2669ab797ce769ecedf5493b04cb976f33e37210", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 73 | Lines Deleted: 6 | Files Changed: 4 | Hunks: 8 | Methods Changed: 5 | Complexity Δ (Sum/Max): 5/3 | Churn Δ: 79 | Churn Cumulative: 15452 | Contributors (this commit): 209 | Commits (past 90d): 33 | Contributors (cumulative): 283 | DMM Complexity: 1.0\n\nDIFF:\n@@ -83,6 +83,10 @@ class InvalidURL(RequestException, ValueError):\n     \"\"\"The URL provided was somehow invalid.\"\"\"\n \n \n+class InvalidHeader(RequestException, ValueError):\n+    \"\"\"The header value provided was somehow invalid.\"\"\"\n+\n+\n class ChunkedEncodingError(RequestException):\n     \"\"\"The server declared chunked encoding but sent an invalid chunk.\"\"\"\n \n\n@@ -27,7 +27,8 @@ from .exceptions import (\n from .utils import (\n     guess_filename, get_auth_from_url, requote_uri,\n     stream_decode_response_unicode, to_key_val_list, parse_header_links,\n-    iter_slices, guess_json_utf, super_len, to_native_string)\n+    iter_slices, guess_json_utf, super_len, to_native_string, \n+    check_header_validity)\n from .compat import (\n     cookielib, urlunparse, urlsplit, urlencode, str, bytes, StringIO,\n     is_py2, chardet, builtin_str, basestring)\n@@ -403,10 +404,13 @@ class PreparedRequest(RequestEncodingMixin, RequestHooksMixin):\n     def prepare_headers(self, headers):\n         \"\"\"Prepares the given HTTP headers.\"\"\"\n \n-        if headers:\n-            self.headers = CaseInsensitiveDict((to_native_string(name), value) for name, value in headers.items())\n-        else:\n         self.headers = CaseInsensitiveDict()\n+        if headers:\n+            for header in headers.items():\n+                # Raise exception on invalid header value.\n+                check_header_validity(header)\n+                name, value = header\n+                self.headers[to_native_string(name)] = value\n \n     def prepare_body(self, data, files, json=None):\n         \"\"\"Prepares the given HTTP body data.\"\"\"\n\n@@ -27,7 +27,7 @@ from .compat import (quote, urlparse, bytes, str, OrderedDict, unquote, is_py2,\n                      basestring)\n from .cookies import RequestsCookieJar, cookiejar_from_dict\n from .structures import CaseInsensitiveDict\n-from .exceptions import InvalidURL, FileModeWarning\n+from .exceptions import InvalidURL, InvalidHeader, FileModeWarning\n \n _hush_pyflakes = (RequestsCookieJar,)\n \n@@ -732,6 +732,24 @@ def to_native_string(string, encoding='ascii'):\n \n     return out\n \n+# Moved outside of function to avoid recompile every call\n+_CLEAN_HEADER_REGEX_BYTE = re.compile(b'^\\\\S[^\\\\r\\\\n]*$|^$')\n+_CLEAN_HEADER_REGEX_STR = re.compile(r'^\\S[^\\r\\n]*$|^$')\n+\n+def check_header_validity(header):\n+    \"\"\"Verifies that header value doesn't contain leading whitespace or\n+    return characters. This prevents unintended header injection.\n+\n+    :param header: tuple, in the format (name, value).\n+    \"\"\"\n+    name, value = header\n+\n+    if isinstance(value, bytes):\n+        pat = _CLEAN_HEADER_REGEX_BYTE\n+    else:\n+        pat = _CLEAN_HEADER_REGEX_STR\n+    if not pat.match(value):\n+        raise InvalidHeader(\"Invalid return character or leading space in header: %s\" % name)\n \n def urldefragauth(url):\n     \"\"\"\n\n@@ -23,7 +23,7 @@ from requests.cookies import cookiejar_from_dict, morsel_to_cookie\n from requests.exceptions import (\n     ConnectionError, ConnectTimeout, InvalidSchema, InvalidURL,\n     MissingSchema, ReadTimeout, Timeout, RetryError, TooManyRedirects,\n-    ProxyError)\n+    ProxyError, InvalidHeader)\n from requests.models import PreparedRequest\n from requests.structures import CaseInsensitiveDict\n from requests.sessions import SessionRedirectMixin\n@@ -1128,6 +1128,47 @@ class TestRequests:\n         assert 'unicode' in p.headers.keys()\n         assert 'byte' in p.headers.keys()\n \n+    def test_header_validation(self,httpbin):\n+        \"\"\"Ensure prepare_headers regex isn't flagging valid header contents.\"\"\"\n+        headers_ok = {'foo': 'bar baz qux',\n+                      'bar': '1',\n+                      'baz': '',\n+                      'qux': str.encode(u'fbbq')}\n+        r = requests.get(httpbin('get'), headers=headers_ok)\n+        assert r.request.headers['foo'] == headers_ok['foo']\n+\n+    def test_header_no_return_chars(self, httpbin):\n+        \"\"\"Ensure that a header containing return character sequences raise an\n+        exception. Otherwise, multiple headers are created from single string.\n+        \"\"\"\n+        headers_ret = {'foo': 'bar\\r\\nbaz: qux'}\n+        headers_lf = {'foo': 'bar\\nbaz: qux'}\n+        headers_cr = {'foo': 'bar\\rbaz: qux'}\n+\n+        # Test for newline\n+        with pytest.raises(InvalidHeader):\n+            r = requests.get(httpbin('get'), headers=headers_ret)\n+        # Test for line feed\n+        with pytest.raises(InvalidHeader):\n+            r = requests.get(httpbin('get'), headers=headers_lf)\n+        # Test for carriage return\n+        with pytest.raises(InvalidHeader):\n+            r = requests.get(httpbin('get'), headers=headers_cr)\n+\n+    def test_header_no_leading_space(self, httpbin):\n+        \"\"\"Ensure headers containing leading whitespace raise\n+        InvalidHeader Error before sending.\n+        \"\"\"\n+        headers_space = {'foo': ' bar'}\n+        headers_tab = {'foo': '   bar'}\n+\n+        # Test for whitespace\n+        with pytest.raises(InvalidHeader):\n+            r = requests.get(httpbin('get'), headers=headers_space)\n+        # Test for tab\n+        with pytest.raises(InvalidHeader):\n+            r = requests.get(httpbin('get'), headers=headers_tab)\n+\n     @pytest.mark.parametrize('files', ('foo', b'foo', bytearray(b'foo')))\n     def test_can_send_objects_with_files(self, httpbin, files):\n         data = {'a': 'this is a string'}\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#71050e9ab97dda08ca32b2b4754b6d145680c48e", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 9 | Lines Deleted: 1 | Files Changed: 2 | Hunks: 4 | Methods Changed: 2 | Complexity Δ (Sum/Max): 5/3 | Churn Δ: 10 | Churn Cumulative: 3493 | Contributors (this commit): 65 | Commits (past 90d): 11 | Contributors (cumulative): 73 | DMM Complexity: 1.0\n\nDIFF:\n@@ -384,6 +384,8 @@ def stream_decode_response_unicode(iterator, r):\n def iter_slices(string, slice_length):\n     \"\"\"Iterate over slices of a string.\"\"\"\n     pos = 0\n+    if slice_length is None or slice_length <= 0: \n+        slice_length = len(string)\n     while pos < len(string):\n         yield string[pos:pos + slice_length]\n         pos += slice_length\n\n@@ -378,11 +378,17 @@ def test_get_encoding_from_headers(value, expected):\n         ('', 0),\n         ('T', 1),\n         ('Test', 4),\n+        ('Cont', 0),\n+        ('Other', -5),\n+        ('Content', None),\n     ))\n def test_iter_slices(value, length):\n+    if length is None or (length <= 0 and len(value) > 0):\n+        # Reads all content at once\n+        assert len(list(iter_slices(value, length))) == 1\n+    else:\n         assert len(list(iter_slices(value, 1))) == length\n \n-\n @pytest.mark.parametrize(\n     'value, expected', (\n         (\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#7700ecae14930fd078e28e35425661d46778bfa9", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 15 | Lines Deleted: 2 | Files Changed: 2 | Hunks: 4 | Methods Changed: 2 | Complexity Δ (Sum/Max): 3/2 | Churn Δ: 17 | Churn Cumulative: 12831 | Contributors (this commit): 177 | Commits (past 90d): 29 | Contributors (cumulative): 205 | DMM Complexity: 1.0\n\nDIFF:\n@@ -849,12 +849,16 @@ class Response(object):\n         \"\"\"Raises stored :class:`HTTPError`, if one occurred.\"\"\"\n \n         http_error_msg = ''\n+        if isinstance(self.reason, bytes):\n+            reason = self.reason.decode('utf-8', 'ignore')\n+        else:\n+            reason = self.reason\n \n         if 400 <= self.status_code < 500:\n-            http_error_msg = '%s Client Error: %s for url: %s' % (self.status_code, self.reason, self.url)\n+            http_error_msg = u'%s Client Error: %s for url: %s' % (self.status_code, reason, self.url)\n \n         elif 500 <= self.status_code < 600:\n-            http_error_msg = '%s Server Error: %s for url: %s' % (self.status_code, self.reason, self.url)\n+            http_error_msg = u'%s Server Error: %s for url: %s' % (self.status_code, reason, self.url)\n \n         if http_error_msg:\n             raise HTTPError(http_error_msg, response=self)\n\n@@ -987,6 +987,15 @@ class TestRequests:\n         chunks = r.iter_content(decode_unicode=True)\n         assert all(isinstance(chunk, str) for chunk in chunks)\n \n+    def test_response_reason_unicode(self):\n+        # check for unicode HTTP status\n+        r = requests.Response()\n+        r.url = u'unicode URL'\n+        r.reason = u'Komponenttia ei löydy'.encode('utf-8')\n+        r.status_code = 404\n+        r.encoding = None\n+        assert not r.ok # old behaviour - crashes here\n+\n     def test_response_chunk_size_type(self):\n         \"\"\"Ensure that chunk_size is passed as None or an integer, otherwise\n         raise a TypeError.\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#be31a90906deb5553c2e703fb05cf6964ee23ed5", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 27 | Lines Deleted: 4 | Files Changed: 2 | Hunks: 6 | Methods Changed: 3 | Complexity Δ (Sum/Max): 2/1 | Churn Δ: 31 | Churn Cumulative: 5824 | Contributors (this commit): 93 | Commits (past 90d): 27 | Contributors (cumulative): 107 | DMM Complexity: 1.0\n\nDIFF:\n@@ -739,8 +739,9 @@ _CLEAN_HEADER_REGEX_BYTE = re.compile(b'^\\\\S[^\\\\r\\\\n]*$|^$')\n _CLEAN_HEADER_REGEX_STR = re.compile(r'^\\S[^\\r\\n]*$|^$')\n \n def check_header_validity(header):\n-    \"\"\"Verifies that header value doesn't contain leading whitespace or\n-    return characters. This prevents unintended header injection.\n+    \"\"\"Verifies that header value is a string which doesn't contain \n+    leading whitespace or return characters. This prevents unintended\n+    header injection.\n \n     :param header: tuple, in the format (name, value).\n     \"\"\"\n@@ -750,8 +751,12 @@ def check_header_validity(header):\n         pat = _CLEAN_HEADER_REGEX_BYTE\n     else:\n         pat = _CLEAN_HEADER_REGEX_STR\n+    try:\n         if not pat.match(value):\n             raise InvalidHeader(\"Invalid return character or leading space in header: %s\" % name)\n+    except TypeError:\n+        raise InvalidHeader(\"Header value %s must be of type str or bytes, \" \n+                            \"not %s\" % (value, type(value)))\n \n def urldefragauth(url):\n     \"\"\"\n\n@@ -1145,12 +1145,30 @@ class TestRequests:\n     def test_header_validation(self, httpbin):\n         \"\"\"Ensure prepare_headers regex isn't flagging valid header contents.\"\"\"\n         headers_ok = {'foo': 'bar baz qux',\n-                      'bar': '1',\n+                      'bar': u'fbbq'.encode('utf8'),\n                       'baz': '',\n-                      'qux': str.encode(u'fbbq')}\n+                      'qux': '1'}\n         r = requests.get(httpbin('get'), headers=headers_ok)\n         assert r.request.headers['foo'] == headers_ok['foo']\n \n+    def test_header_value_not_str(self, httpbin):\n+        \"\"\"Ensure the header value is of type string or bytes as\n+        per discussion in GH issue #3386\n+        \"\"\"\n+        headers_int = {'foo': 3}\n+        headers_dict = {'bar': {'foo':'bar'}}\n+        headers_list = {'baz': ['foo', 'bar']}\n+\n+        # Test for int\n+        with pytest.raises(InvalidHeader):\n+            r = requests.get(httpbin('get'), headers=headers_int)\n+        # Test for dict\n+        with pytest.raises(InvalidHeader):\n+            r = requests.get(httpbin('get'), headers=headers_dict)\n+        # Test for list\n+        with pytest.raises(InvalidHeader):\n+            r = requests.get(httpbin('get'), headers=headers_list)\n+\n     def test_header_no_return_chars(self, httpbin):\n         \"\"\"Ensure that a header containing return character sequences raise an\n         exception. Otherwise, multiple headers are created from single string.\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#5a3aeedd1824e38ca2fe66752d54dcf22bd3785d", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 0 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 645 | Contributors (this commit): 15 | Commits (past 90d): 3 | Contributors (cumulative): 15 | DMM Complexity: None\n\nDIFF:\n@@ -83,7 +83,5 @@ except ImportError:\n \n logging.getLogger(__name__).addHandler(NullHandler())\n \n-import warnings\n-\n # FileModeWarnings go off per the default.\n warnings.simplefilter('default', FileModeWarning, append=True)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#d262df99bfe0972300ca025e58a2ce1a329e3a22", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 0 | Lines Deleted: 4 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 3373 | Contributors (this commit): 44 | Commits (past 90d): 16 | Contributors (cumulative): 44 | DMM Complexity: None\n\nDIFF:\n@@ -221,10 +221,6 @@ class TestRequests:\n         assert r.history[0].status_code == 303\n         assert r.history[0].is_redirect\n \n-    # def test_HTTP_302_ALLOW_REDIRECT_POST(self):\n-    #     r = requests.post(httpbin('status', '302'), data={'some': 'data'})\n-    #     self.assertEqual(r.status_code, 200)\n-\n     def test_HTTP_200_OK_GET_WITH_PARAMS(self, httpbin):\n         heads = {'User-agent': 'Mozilla/5.0'}\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#15a3869006fa68d7ad34bc315842f2ca5b537311", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 29 | Lines Deleted: 16 | Files Changed: 20 | Hunks: 20 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 45 | Churn Cumulative: 12849 | Contributors (this commit): 174 | Commits (past 90d): 46 | Contributors (cumulative): 316 | DMM Complexity: None\n\nDIFF:\n@@ -38,7 +38,6 @@ is at <http://python-requests.org>.\n \n :copyright: (c) 2016 by Kenneth Reitz.\n :license: Apache 2.0, see LICENSE for more details.\n-\n \"\"\"\n \n __title__ = 'requests'\n\n@@ -8,7 +8,6 @@ This module implements the Requests API.\n \n :copyright: (c) 2012 by Kenneth Reitz.\n :license: Apache2, see LICENSE for more details.\n-\n \"\"\"\n \n from . import sessions\n\n@@ -2,8 +2,8 @@\n # -*- coding: utf-8 -*-\n \n \"\"\"\n-certs.py\n-~~~~~~~~\n+requests.certs\n+~~~~~~~~~~~~~~\n \n This module returns the preferred default CA certificate bundle.\n \n\n@@ -1,7 +1,11 @@\n # -*- coding: utf-8 -*-\n \n \"\"\"\n-pythoncompat\n+requests.compat\n+~~~~~~~~~~~~~~~\n+\n+This module handles import compatibility issues between Python 2 and\n+Python 3.\n \"\"\"\n \n from .packages import chardet\n\n@@ -1,6 +1,9 @@\n # -*- coding: utf-8 -*-\n \n \"\"\"\n+requests.cookies\n+~~~~~~~~~~~~~~~~\n+\n Compatibility code to be able to use `cookielib.CookieJar` with requests.\n \n requests.utils imports from here, so be careful with imports.\n\n@@ -5,7 +5,6 @@ requests.exceptions\n ~~~~~~~~~~~~~~~~~~~\n \n This module contains the set of Requests' exceptions.\n-\n \"\"\"\n from .packages.urllib3.exceptions import HTTPError as BaseHTTPError\n \n\n@@ -10,7 +10,6 @@ Available hooks:\n \n ``response``:\n     The response generated from a Request.\n-\n \"\"\"\n HOOKS = ['response']\n \n\n@@ -6,7 +6,6 @@ requests.session\n \n This module provides a Session object to manage and persist settings across\n requests (cookies, auth, proxies).\n-\n \"\"\"\n import os\n from collections import Mapping\n\n@@ -5,7 +5,6 @@ requests.structures\n ~~~~~~~~~~~~~~~~~~~\n \n Data structures that power Requests.\n-\n \"\"\"\n \n import collections\n\n@@ -6,7 +6,6 @@ requests.utils\n \n This module provides utility functions that are used within Requests\n that are also useful for external consumption.\n-\n \"\"\"\n \n import cgi\n\n@@ -1,4 +1,4 @@\n-# coding: utf-8\n+# -*- coding: utf-8 -*-\n \n \"\"\"Requests test package initialisation.\"\"\"\n \n\n@@ -1,4 +1,5 @@\n-# coding: utf-8\n+# -*- coding: utf-8 -*-\n+\n from requests.compat import is_py3\n \n \n\n@@ -1,4 +1,5 @@\n-# coding: utf-8\n+# -*- coding: utf-8 -*-\n+\n import pytest\n from requests.compat import urljoin\n \n\n@@ -1,4 +1,5 @@\n-# coding: utf-8\n+# -*- coding: utf-8 -*-\n+\n import pytest\n \n from requests import hooks\n\n@@ -1,3 +1,5 @@\n+# -*- coding: utf-8 -*-\n+\n import os\n import pytest\n import threading\n\n@@ -1,4 +1,5 @@\n-# coding: utf-8\n+# -*- coding: utf-8 -*-\n+\n import pytest\n \n from requests.structures import CaseInsensitiveDict, LookupDict\n\n@@ -1,3 +1,5 @@\n+# -*- coding: utf-8 -*-\n+\n import threading\n import socket\n import time\n\n@@ -1,4 +1,5 @@\n-# coding: utf-8\n+# -*- coding: utf-8 -*-\n+\n from io import BytesIO\n \n import pytest\n\n@@ -1,3 +1,5 @@\n+# -*- coding: utf-8 -*-\n+\n import threading\n import socket\n import select\n\n@@ -1,3 +1,5 @@\n+# -*- coding: utf-8 -*-\n+\n import contextlib\n import os\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
