{"custom_id": "scrapy#6beb4f0119619170edfb4579f28da22c9250e84b", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 58 | Lines Deleted: 6 | Files Changed: 1 | Hunks: 9 | Methods Changed: 3 | Complexity Δ (Sum/Max): 16/16 | Churn Δ: 64 | Churn Cumulative: 162 | Contributors (this commit): 7 | Commits (past 90d): 1 | Contributors (cumulative): 7 | DMM Complexity: 0.0\n\nDIFF:\n@@ -1,9 +1,10 @@\n from __future__ import print_function\n import re\n+import os\n import string\n from importlib import import_module\n from os.path import join, exists, abspath\n-from shutil import copytree, ignore_patterns, move\n+from shutil import ignore_patterns, move, copy2, copystat\n \n import scrapy\n from scrapy.commands import ScrapyCommand\n@@ -27,7 +28,7 @@ class Command(ScrapyCommand):\n     default_settings = {'LOG_ENABLED': False}\n \n     def syntax(self):\n-        return \"<project_name>\"\n+        return \"<project_name> [project_dir]\"\n \n     def short_desc(self):\n         return \"Create new project\"\n@@ -51,20 +52,71 @@ class Command(ScrapyCommand):\n             return True\n         return False\n \n+    def _copytree(self, src, dst, symlinks=False, ignore=None):\n+        names = os.listdir(src)\n+        if ignore is not None:\n+            ignored_names = ignore(src, names)\n+        else:\n+            ignored_names = set()\n+\n+        if not os.path.exists(dst):\n+            os.makedirs(dst)\n+\n+        errors = []\n+        for name in names:\n+            if name in ignored_names:\n+                continue\n+            srcname = os.path.join(src, name)\n+            dstname = os.path.join(dst, name)\n+            try:\n+                if symlinks and os.path.islink(srcname):\n+                    linkto = os.readlink(srcname)\n+                    os.symlink(linkto, dstname)\n+                elif os.path.isdir(srcname):\n+                    self._copytree(srcname, dstname, symlinks, ignore)\n+                else:\n+                    # Will raise a SpecialFileError for unsupported file types\n+                    copy2(srcname, dstname)\n+            # catch the Error from the recursive copytree so that we can\n+            # continue with other files\n+            except EnvironmentError, err:\n+                errors.extend(err.args[0])\n+            except EnvironmentError, why:\n+                errors.append((srcname, dstname, str(why)))\n+        try:\n+            copystat(src, dst)\n+        except OSError, why:\n+            if WindowsError is not None and isinstance(why, WindowsError):\n+                # Copying file access times may fail on Windows\n+                pass\n+            else:\n+                errors.append((src, dst, str(why)))\n+        if errors:\n+            raise EnvironmentError(errors)\n+\n     def run(self, args, opts):\n-        if len(args) != 1:\n+        if len(args) not in (1, 2):\n             raise UsageError()\n+\n         project_name = args[0]\n+        project_dir = args[0]\n+\n+        if len(args) == 2:\n+            project_dir = args[1]\n+            if exists(join(project_dir, 'scrapy.cfg')):\n+                self.exitcode = 1\n+                print('Error: scrapy.cfg already exists in %s' % abspath(project_dir))\n+                return\n \n         if not self._is_valid_name(project_name):\n             self.exitcode = 1\n             return\n \n-        copytree(self.templates_dir, project_name, ignore=IGNORE)\n-        move(join(project_name, 'module'), join(project_name, project_name))\n+        self._copytree(self.templates_dir, abspath(project_dir), ignore=IGNORE)\n+        move(join(project_dir, 'module'), join(project_dir, project_name))\n         for paths in TEMPLATES_TO_RENDER:\n             path = join(*paths)\n-            tplfile = join(project_name,\n+            tplfile = join(project_dir,\n                 string.Template(path).substitute(project_name=project_name))\n             render_templatefile(tplfile, project_name=project_name,\n                 ProjectName=string_camelcase(project_name))\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "scrapy#2521f031d6db5c986ab88dc37c793513f771c3b1", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 17 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 17 | Churn Cumulative: 232 | Contributors (this commit): 7 | Commits (past 90d): 1 | Contributors (cumulative): 7 | DMM Complexity: 1.0\n\nDIFF:\n@@ -73,6 +73,23 @@ class StartprojectTest(ProjectTest):\n         self.assertEqual(1, self.call('startproject', 'wrong---project---name'))\n         self.assertEqual(1, self.call('startproject', 'sys'))\n \n+    def test_startproject_with_project_dir(self):\n+        project_dir = mkdtemp()\n+        self.assertEqual(0, self.call('startproject', self.project_name, project_dir))\n+\n+        assert exists(join(abspath(project_dir), 'scrapy.cfg'))\n+        assert exists(join(abspath(project_dir), 'testproject'))\n+        assert exists(join(join(abspath(project_dir), self.project_name), '__init__.py'))\n+        assert exists(join(join(abspath(project_dir), self.project_name), 'items.py'))\n+        assert exists(join(join(abspath(project_dir), self.project_name), 'pipelines.py'))\n+        assert exists(join(join(abspath(project_dir), self.project_name), 'settings.py'))\n+        assert exists(join(join(abspath(project_dir), self.project_name), 'spiders', '__init__.py'))\n+\n+        self.assertEqual(1, self.call('startproject', self.project_name, project_dir))\n+        self.assertEqual(1, self.call('startproject', self.project_name + '2', project_dir))\n+        self.assertEqual(1, self.call('startproject', 'wrong---project---name'))\n+        self.assertEqual(1, self.call('startproject', 'sys'))\n+\n \n class StartprojectTemplatesTest(ProjectTest):\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "scrapy#ffa77e1ac60fb3924ee133ce3358447389827b1d", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 3 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 3 | Churn Cumulative: 7 | Contributors (this commit): 3 | Commits (past 90d): 1 | Contributors (cumulative): 3 | DMM Complexity: 0.0\n\nDIFF:\n@@ -20,6 +20,9 @@ class HttpCompressionMiddleware(object):\n         request.headers.setdefault('Accept-Encoding', 'gzip,deflate')\n \n     def process_response(self, request, response, spider):\n+\n+        if request.method == 'HEAD':\n+            return response\n         if isinstance(response, Response):\n             content_encoding = response.headers.getlist('Content-Encoding')\n             if content_encoding and not is_gzipped(response):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "scrapy#24a45cc6e6d15eab7aafebd4cde5364201d2b133", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 3 | Lines Deleted: 3 | Files Changed: 1 | Hunks: 3 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 6 | Churn Cumulative: 168 | Contributors (this commit): 7 | Commits (past 90d): 2 | Contributors (cumulative): 7 | DMM Complexity: None\n\nDIFF:\n@@ -79,13 +79,13 @@ class Command(ScrapyCommand):\n                     copy2(srcname, dstname)\n             # catch the Error from the recursive copytree so that we can\n             # continue with other files\n-            except EnvironmentError, err:\n+            except EnvironmentError as err:\n                 errors.extend(err.args[0])\n-            except EnvironmentError, why:\n+            except EnvironmentError as why:\n                 errors.append((srcname, dstname, str(why)))\n         try:\n             copystat(src, dst)\n-        except OSError, why:\n+        except OSError as why:\n             if WindowsError is not None and isinstance(why, WindowsError):\n                 # Copying file access times may fail on Windows\n                 pass\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "scrapy#fc9a45ee9129912e4ee138b0a17d8ed8a27a0c9e", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 6 | Lines Deleted: 28 | Files Changed: 1 | Hunks: 10 | Methods Changed: 3 | Complexity Δ (Sum/Max): -9/0 | Churn Δ: 34 | Churn Cumulative: 202 | Contributors (this commit): 7 | Commits (past 90d): 3 | Contributors (cumulative): 7 | DMM Complexity: 1.0\n\nDIFF:\n@@ -52,47 +52,25 @@ class Command(ScrapyCommand):\n             return True\n         return False\n \n-    def _copytree(self, src, dst, symlinks=False, ignore=None):\n+    def _copytree(self, src, dst):\n+        ignore = IGNORE\n         names = os.listdir(src)\n-        if ignore is not None:\n         ignored_names = ignore(src, names)\n-        else:\n-            ignored_names = set()\n \n         if not os.path.exists(dst):\n             os.makedirs(dst)\n \n-        errors = []\n         for name in names:\n             if name in ignored_names:\n                 continue\n+\n             srcname = os.path.join(src, name)\n             dstname = os.path.join(dst, name)\n-            try:\n-                if symlinks and os.path.islink(srcname):\n-                    linkto = os.readlink(srcname)\n-                    os.symlink(linkto, dstname)\n-                elif os.path.isdir(srcname):\n-                    self._copytree(srcname, dstname, symlinks, ignore)\n+            if os.path.isdir(srcname):\n+                self._copytree(srcname, dstname)\n             else:\n-                    # Will raise a SpecialFileError for unsupported file types\n                 copy2(srcname, dstname)\n-            # catch the Error from the recursive copytree so that we can\n-            # continue with other files\n-            except EnvironmentError as err:\n-                errors.extend(err.args[0])\n-            except EnvironmentError as why:\n-                errors.append((srcname, dstname, str(why)))\n-        try:\n         copystat(src, dst)\n-        except OSError as why:\n-            if WindowsError is not None and isinstance(why, WindowsError):\n-                # Copying file access times may fail on Windows\n-                pass\n-            else:\n-                errors.append((src, dst, str(why)))\n-        if errors:\n-            raise EnvironmentError(errors)\n \n     def run(self, args, opts):\n         if len(args) not in (1, 2):\n@@ -112,7 +90,7 @@ class Command(ScrapyCommand):\n             self.exitcode = 1\n             return\n \n-        self._copytree(self.templates_dir, abspath(project_dir), ignore=IGNORE)\n+        self._copytree(self.templates_dir, abspath(project_dir))\n         move(join(project_dir, 'module'), join(project_dir, project_name))\n         for paths in TEMPLATES_TO_RENDER:\n             path = join(*paths)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "scrapy#b8a09d7ab7baad9e8ea2e7a8dd1ed0fe4e4fedc7", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 234 | Contributors (this commit): 7 | Commits (past 90d): 2 | Contributors (cumulative): 7 | DMM Complexity: 1.0\n\nDIFF:\n@@ -89,6 +89,8 @@ class StartprojectTest(ProjectTest):\n         self.assertEqual(1, self.call('startproject', self.project_name + '2', project_dir))\n         self.assertEqual(1, self.call('startproject', 'wrong---project---name'))\n         self.assertEqual(1, self.call('startproject', 'sys'))\n+        self.assertEqual(2, self.call('startproject'))\n+        self.assertEqual(2, self.call('startproject', self.project_name, project_dir, 'another_params'))\n \n \n class StartprojectTemplatesTest(ProjectTest):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "scrapy#85c4ecb92856f7d50f8dbf7c92d629bd5db83f02", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 0 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): -1/0 | Churn Δ: 2 | Churn Cumulative: 204 | Contributors (this commit): 7 | Commits (past 90d): 4 | Contributors (cumulative): 7 | DMM Complexity: 0.0\n\nDIFF:\n@@ -44,8 +44,6 @@ class Command(ScrapyCommand):\n         if not re.search(r'^[_a-zA-Z]\\w*$', project_name):\n             print('Error: Project names must begin with a letter and contain'\\\n                     ' only\\nletters, numbers and underscores')\n-        elif exists(project_name):\n-            print('Error: Directory %r already exists' % project_name)\n         elif _module_exists(project_name):\n             print('Error: Module %r already exists' % project_name)\n         else:\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "scrapy#9ad54b381535eec583e387cb75d7205ccc8d7d3a", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 4 | Lines Deleted: 2 | Files Changed: 2 | Hunks: 3 | Methods Changed: 2 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 6 | Churn Cumulative: 444 | Contributors (this commit): 10 | Commits (past 90d): 8 | Contributors (cumulative): 14 | DMM Complexity: 1.0\n\nDIFF:\n@@ -98,9 +98,9 @@ class Command(ScrapyCommand):\n                 ProjectName=string_camelcase(project_name))\n         print(\"New Scrapy project %r, using template directory %r, created in:\" % \\\n               (project_name, self.templates_dir))\n-        print(\"    %s\\n\" % abspath(project_name))\n+        print(\"    %s\\n\" % abspath(project_dir))\n         print(\"You can start your first spider with:\")\n-        print(\"    cd %s\" % project_name)\n+        print(\"    cd %s\" % project_dir)\n         print(\"    scrapy genspider example example.com\")\n \n     @property\n\n@@ -85,6 +85,8 @@ class StartprojectTest(ProjectTest):\n         assert exists(join(join(abspath(project_dir), self.project_name), 'settings.py'))\n         assert exists(join(join(abspath(project_dir), self.project_name), 'spiders', '__init__.py'))\n \n+        self.assertEqual(0, self.call('startproject', self.project_name, project_dir + '2'))\n+\n         self.assertEqual(1, self.call('startproject', self.project_name, project_dir))\n         self.assertEqual(1, self.call('startproject', self.project_name + '2', project_dir))\n         self.assertEqual(1, self.call('startproject', 'wrong---project---name'))\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "scrapy#c8ec79d95922b4435af47b5ca03e08eccc990432", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 42 | Contributors (this commit): 4 | Commits (past 90d): 2 | Contributors (cumulative): 4 | DMM Complexity: None\n\nDIFF:\n@@ -153,4 +153,4 @@ class HttpCompressionTest(TestCase):\n         response = response.replace(body = None)\n         newresponse = self.mw.process_response(request, response, self.spider)\n         self.assertIs(newresponse, response)\n-        self.assertEquals(response.body, '')\n+        self.assertEquals(response.body, b'')\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "scrapy#1aec5200bc81493623f2a4e077b4e80e104e47d5", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 22 | Lines Deleted: 1 | Files Changed: 2 | Hunks: 3 | Methods Changed: 2 | Complexity Δ (Sum/Max): 2/1 | Churn Δ: 23 | Churn Cumulative: 1187 | Contributors (this commit): 16 | Commits (past 90d): 7 | Contributors (cumulative): 20 | DMM Complexity: 1.0\n\nDIFF:\n@@ -41,9 +41,16 @@ def url_has_any_extension(url, extensions):\n \n \n def _safe_ParseResult(parts, encoding='utf8', path_encoding='utf8'):\n+    # IDNA encoding can fail for too long labels (>63 characters)\n+    # or missing labels (e.g. http://.example.com)\n+    try:\n+        netloc = parts.netloc.encode('idna')\n+    except UnicodeError:\n+        netloc = parts.netloc\n+\n     return (\n         to_native_str(parts.scheme),\n-        to_native_str(parts.netloc.encode('idna')),\n+        to_native_str(netloc),\n \n         # default encoding for path component SHOULD be UTF-8\n         quote(to_bytes(parts.path, path_encoding), _safe_chars),\n\n@@ -265,6 +265,20 @@ class CanonicalizeUrlTest(unittest.TestCase):\n             # without encoding, already canonicalized URL is canonicalized identically\n             self.assertEqual(canonicalize_url(canonicalized), canonicalized)\n \n+    def test_canonicalize_url_idna_exceptions(self):\n+        # missing DNS label\n+        self.assertEqual(\n+            canonicalize_url(u\"http://.example.com/résumé?q=résumé\"),\n+            \"http://.example.com/r%C3%A9sum%C3%A9?q=r%C3%A9sum%C3%A9\")\n+\n+        # DNS label too long\n+        self.assertEqual(\n+            canonicalize_url(\n+                u\"http://www.{label}.com/résumé?q=résumé\".format(\n+                    label=u\"example\"*11)),\n+            \"http://www.{label}.com/r%C3%A9sum%C3%A9?q=r%C3%A9sum%C3%A9\".format(\n+                    label=u\"example\"*11))\n+\n \n class AddHttpIfNoScheme(unittest.TestCase):\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "scrapy#a62d4b081c8eef1e54c6f7399e7a4154e3f330f3", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 37 | Lines Deleted: 8 | Files Changed: 2 | Hunks: 3 | Methods Changed: 5 | Complexity Δ (Sum/Max): 3/2 | Churn Δ: 45 | Churn Cumulative: 231 | Contributors (this commit): 6 | Commits (past 90d): 8 | Contributors (cumulative): 10 | DMM Complexity: 1.0\n\nDIFF:\n@@ -50,12 +50,27 @@ class ImagesPipeline(FilesPipeline):\n         if isinstance(settings, dict) or settings is None:\n             settings = Settings(settings)\n \n-        self.expires = settings.getint('IMAGES_EXPIRES', self.EXPIRES)\n-        self.images_urls_field = settings.get('IMAGES_URLS_FIELD', self.IMAGES_URLS_FIELD)\n-        self.images_result_field = settings.get('IMAGES_RESULT_FIELD', self.IMAGES_RESULT_FIELD)\n-        self.min_width = settings.getint('IMAGES_MIN_WIDTH', self.MIN_WIDTH)\n-        self.min_height = settings.getint('IMAGES_MIN_HEIGHT', self.MIN_HEIGHT)\n-        self.thumbs = settings.get('IMAGES_THUMBS', self.THUMBS)\n+        def key_for_pipe(key):\n+            \"\"\"\n+            Allow setting settings for user defined ImagePipelines that inherit from base.\n+\n+            User can define setting key:\n+\n+            MYPIPELINENAME_IMAGE_SETTING_NAME = <some value>\n+\n+            and it will override default settings and class attributes.\n+            \"\"\"\n+            class_name = self.__class__.__name__\n+            if class_name == \"ImagesPipeline\":\n+                return key\n+            return \"{}_{}\".format(class_name.upper(), key)\n+\n+        self.expires = settings.getint(key_for_pipe('IMAGES_EXPIRES'), self.EXPIRES)\n+        self.images_urls_field = settings.get(key_for_pipe('IMAGES_URLS_FIELD'), self.IMAGES_URLS_FIELD)\n+        self.images_result_field = settings.get(key_for_pipe('IMAGES_RESULT_FIELD'), self.IMAGES_RESULT_FIELD)\n+        self.min_width = settings.getint(key_for_pipe('IMAGES_MIN_WIDTH'), self.MIN_WIDTH)\n+        self.min_height = settings.getint(key_for_pipe('IMAGES_MIN_HEIGHT'), self.MIN_HEIGHT)\n+        self.thumbs = settings.get(key_for_pipe('IMAGES_THUMBS'), self.THUMBS)\n \n     @classmethod\n     def from_settings(cls, settings):\n\n@@ -265,7 +265,7 @@ class ImagesPipelineTestCaseCustomSettings(unittest.TestCase):\n         pipeline = UserDefinedImagePipeline.from_settings(Settings({\"IMAGES_STORE\": self.tempdir}))\n         self.assertEqual(pipeline.min_width, 1000)\n \n-    def test_class_attrs_not_preserved_if_settings_defined(self):\n+    def test_class_attrs_preserved_if_only_global_settings_defined(self):\n \n         class UserDefinedImagePipeline(ImagesPipeline):\n             MIN_WIDTH = 1000\n@@ -277,7 +277,21 @@ class ImagesPipelineTestCaseCustomSettings(unittest.TestCase):\n \n         # If image settings are defined they override class attributes.\n         pipeline = UserDefinedImagePipeline.from_settings(Settings(settings))\n-        self.assertEqual(pipeline.min_width, 90)\n+        self.assertEqual(pipeline.min_width, 1000)\n+\n+    def test_settings_multiple_pipelilines(self):\n+        # If user has multiple pipelines he can define setting keys preceded with\n+        # pipeline class name.\n+        class UserDefinedPipeline(ImagesPipeline):\n+            pass\n+\n+        settings = {\n+            \"IMAGES_MIN_WIDTH\": 10,\n+            \"USERDEFINEDPIPELINE_IMAGES_MIN_WIDTH\": 1999,\n+            \"IMAGES_STORE\": self.tempdir\n+        }\n+        user_pipeline = UserDefinedPipeline.from_settings(Settings(settings))\n+        self.assertEqual(user_pipeline.min_width, 1999)\n \n \n def _create_image(format, *a, **kw):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "scrapy#989f6b8843c949aa2ce3839a37399fcada442ac7", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 15 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 16 | Churn Cumulative: 27 | Contributors (this commit): 3 | Commits (past 90d): 1 | Contributors (cumulative): 3 | DMM Complexity: 1.0\n\nDIFF:\n@@ -1,7 +1,8 @@\n import unittest\n from os.path import join\n \n-from scrapy.utils.gz import gunzip\n+from scrapy.utils.gz import gunzip, is_gzipped\n+from scrapy.http import Response, Headers\n from tests import tests_datadir\n \n SAMPLEDIR = join(tests_datadir, 'compressed')\n@@ -27,3 +28,16 @@ class GunzipTest(unittest.TestCase):\n         with open(join(SAMPLEDIR, 'truncated-crc-error-short.gz'), 'rb') as f:\n             text = gunzip(f.read())\n             assert text.endswith(b'</html>')\n+\n+    def test_is_gzipped(self):\n+        hdrs = Headers({\"Content-Type\": \"application/x-gzip\"})\n+        r1 = Response(\"http://www.example.com\", headers=hdrs)\n+        self.assertTrue(is_gzipped(r1))\n+        r2 = Response(\"http://www.example.com\")\n+        self.assertTrue(not is_gzipped(r2))\n+        hdrs = Headers({\"Content-Type\": \"application/javascript\"})\n+        r3 = Response(\"http://www.example.com\", headers=hdrs)\n+        self.assertTrue(not is_gzipped(r3))\n+        hdrs = Headers({\"Content-Type\": \"application/x-gzip;charset=utf-8\"})\n+        r1 = Response(\"http://www.example.com\", headers=hdrs)\n+        self.assertTrue(is_gzipped(r1))\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "scrapy#db729f5b304212518e3208995f44e66e55af420e", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 2 | Churn Cumulative: 115 | Contributors (this commit): 6 | Commits (past 90d): 1 | Contributors (cumulative): 6 | DMM Complexity: None\n\nDIFF:\n@@ -54,4 +54,4 @@ def gunzip(data):\n def is_gzipped(response):\n     \"\"\"Return True if the response is gzipped, or False otherwise\"\"\"\n     ctype = response.headers.get('Content-Type', b'')\n-    return ctype in (b'application/x-gzip', b'application/gzip')\n+    return b'application/x-gzip' in ctype or b'application/gzip' in ctype\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "scrapy#2c98a88a0e584fff64eb70f48b869494eca1d7ae", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 14 | Lines Deleted: 5 | Files Changed: 1 | Hunks: 3 | Methods Changed: 5 | Complexity Δ (Sum/Max): 3/3 | Churn Δ: 19 | Churn Cumulative: 46 | Contributors (this commit): 3 | Commits (past 90d): 2 | Contributors (cumulative): 3 | DMM Complexity: 1.0\n\nDIFF:\n@@ -29,15 +29,24 @@ class GunzipTest(unittest.TestCase):\n             text = gunzip(f.read())\n             assert text.endswith(b'</html>')\n \n-    def test_is_gzipped(self):\n+    def test_is_gzipped_right(self):\n         hdrs = Headers({\"Content-Type\": \"application/x-gzip\"})\n         r1 = Response(\"http://www.example.com\", headers=hdrs)\n         self.assertTrue(is_gzipped(r1))\n-        r2 = Response(\"http://www.example.com\")\n-        self.assertTrue(not is_gzipped(r2))\n+        hdrs = Headers({\"Content-Type\": \"application/gzip\"})\n+        r1 = Response(\"http://www.example.com\", headers=hdrs)\n+        self.assertTrue(is_gzipped(r1))\n+\n+    def test_is_gzipped_empty(self):\n+        r1 = Response(\"http://www.example.com\")\n+        self.assertTrue(not is_gzipped(r1))\n+\n+    def test_is_gzipped_wrong(self):\n         hdrs = Headers({\"Content-Type\": \"application/javascript\"})\n-        r3 = Response(\"http://www.example.com\", headers=hdrs)\n-        self.assertTrue(not is_gzipped(r3))\n+        r1 = Response(\"http://www.example.com\", headers=hdrs)\n+        self.assertTrue(not is_gzipped(r1))\n+\n+    def test_is_gzipped_with_charset(self):\n         hdrs = Headers({\"Content-Type\": \"application/x-gzip;charset=utf-8\"})\n         r1 = Response(\"http://www.example.com\", headers=hdrs)\n         self.assertTrue(is_gzipped(r1))\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "scrapy#b76b374648bc7736e37574c6e800f0428f014dfa", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 26 | Lines Deleted: 5 | Files Changed: 1 | Hunks: 5 | Methods Changed: 5 | Complexity Δ (Sum/Max): 3/3 | Churn Δ: 31 | Churn Cumulative: 603 | Contributors (this commit): 9 | Commits (past 90d): 2 | Contributors (cumulative): 9 | DMM Complexity: 1.0\n\nDIFF:\n@@ -27,6 +27,7 @@ from scrapy.core.downloader.handlers.s3 import S3DownloadHandler\n \n from scrapy.spiders import Spider\n from scrapy.http import Request\n+from scrapy.http.response.text import TextResponse\n from scrapy.settings import Settings\n from scrapy.utils.test import get_crawler, skip_if_no_boto\n from scrapy.utils.python import to_bytes\n@@ -114,6 +115,16 @@ class ContentLengthHeaderResource(resource.Resource):\n         return request.requestHeaders.getRawHeaders(b\"content-length\")[0]\n \n \n+class EmptyContentTypeHeaderResource(resource.Resource):\n+    \"\"\"\n+    A testing resource which renders itself as the value of request body\n+    without content-type header in response.\n+    \"\"\"\n+    def render(self, request):\n+        request.setHeader(\"content-type\", \"\")\n+        return request.content.read()\n+\n+\n class HttpTestCase(unittest.TestCase):\n \n     scheme = 'http'\n@@ -136,6 +147,7 @@ class HttpTestCase(unittest.TestCase):\n         r.putChild(b\"payload\", PayloadResource())\n         r.putChild(b\"broken\", BrokenDownloadResource())\n         r.putChild(b\"contentlength\", ContentLengthHeaderResource())\n+        r.putChild(b\"nocontenttype\", EmptyContentTypeHeaderResource())\n         self.site = server.Site(r, timeout=None)\n         self.wrapper = WrappingFactory(self.site)\n         self.host = 'localhost'\n@@ -243,11 +255,6 @@ class HttpTestCase(unittest.TestCase):\n         request = Request(self.getURL('contentlength'), method='POST', headers={'Host': 'example.com'})\n         return self.download_request(request, Spider('foo')).addCallback(_test)\n \n-        d = self.download_request(request, Spider('foo'))\n-        d.addCallback(lambda r: r.body)\n-        d.addCallback(self.assertEquals, b'0')\n-        return d\n-\n     def test_payload(self):\n         body = b'1'*100 # PayloadResource requires body length to be 100\n         request = Request(self.getURL('payload'), method='POST', body=body)\n@@ -284,6 +291,20 @@ class Http11TestCase(HttpTestCase):\n         d.addCallback(self.assertEquals, b\"0123456789\")\n         return d\n \n+    def test_response_class_choosing_request(self):\n+        \"\"\"Tests choosing of correct response type\n+         in case of Content-Type is empty but body contains text.\n+        \"\"\"\n+        body = b'Some plain text\\ndata with tabs\\t and null bytes\\0'\n+\n+        def _test_type(response):\n+            self.assertEquals(type(response), TextResponse)\n+\n+        request = Request(self.getURL('nocontenttype'), body=body)\n+        d = self.download_request(request, Spider('foo'))\n+        d.addCallback(_test_type)\n+        return d\n+\n     @defer.inlineCallbacks\n     def test_download_with_maxsize(self):\n         request = Request(self.getURL('file'))\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "scrapy#124e218a3b3d8c5c4f924da5eb8399b205349d19", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 16 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 3 | Methods Changed: 4 | Complexity Δ (Sum/Max): 2/2 | Churn Δ: 18 | Churn Cumulative: 64 | Contributors (this commit): 3 | Commits (past 90d): 3 | Contributors (cumulative): 3 | DMM Complexity: 1.0\n\nDIFF:\n@@ -37,14 +37,28 @@ class GunzipTest(unittest.TestCase):\n         r1 = Response(\"http://www.example.com\", headers=hdrs)\n         self.assertTrue(is_gzipped(r1))\n \n+    def test_is_gzipped_not_quite(self):\n+        hdrs = Headers({\"Content-Type\": \"application/gzippppp\"})\n+        r1 = Response(\"http://www.example.com\", headers=hdrs)\n+        self.assertFalse(is_gzipped(r1))\n+\n+    def test_is_gzipped_case_insensitive(self):\n+        hdrs = Headers({\"Content-Type\": \"Application/X-Gzip\"})\n+        r1 = Response(\"http://www.example.com\", headers=hdrs)\n+        self.assertTrue(is_gzipped(r1))\n+\n+        hdrs = Headers({\"Content-Type\": \"application/X-GZIP ; charset=utf-8\"})\n+        r1 = Response(\"http://www.example.com\", headers=hdrs)\n+        self.assertTrue(is_gzipped(r1))\n+\n     def test_is_gzipped_empty(self):\n         r1 = Response(\"http://www.example.com\")\n-        self.assertTrue(not is_gzipped(r1))\n+        self.assertFalse(is_gzipped(r1))\n \n     def test_is_gzipped_wrong(self):\n         hdrs = Headers({\"Content-Type\": \"application/javascript\"})\n         r1 = Response(\"http://www.example.com\", headers=hdrs)\n-        self.assertTrue(not is_gzipped(r1))\n+        self.assertFalse(is_gzipped(r1))\n \n     def test_is_gzipped_with_charset(self):\n         hdrs = Headers({\"Content-Type\": \"application/x-gzip;charset=utf-8\"})\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "scrapy#259426ec9995da9a5415de9d851febf788160cf3", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 3 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 3 | Methods Changed: 1 | Complexity Δ (Sum/Max): -1/0 | Churn Δ: 5 | Churn Cumulative: 120 | Contributors (this commit): 6 | Commits (past 90d): 2 | Contributors (cumulative): 6 | DMM Complexity: None\n\nDIFF:\n@@ -7,7 +7,7 @@ except ImportError:\n from gzip import GzipFile\n \n import six\n-\n+import re\n \n # - Python>=3.5 GzipFile's read() has issues returning leftover\n #   uncompressed data when input is corrupted\n@@ -50,8 +50,9 @@ def gunzip(data):\n                 raise\n     return output\n \n+_is_gzipped_re = re.compile(br'^application/(x-)?gzip\\b', re.I)\n \n def is_gzipped(response):\n     \"\"\"Return True if the response is gzipped, or False otherwise\"\"\"\n     ctype = response.headers.get('Content-Type', b'')\n-    return b'application/x-gzip' in ctype or b'application/gzip' in ctype\n+    return not _is_gzipped_re.search(ctype) is None\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "scrapy#36928d897ca44b0a62ebcb1c3fb358cbfd07440f", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 122 | Contributors (this commit): 6 | Commits (past 90d): 3 | Contributors (cumulative): 6 | DMM Complexity: None\n\nDIFF:\n@@ -55,4 +55,4 @@ _is_gzipped_re = re.compile(br'^application/(x-)?gzip\\b', re.I)\n def is_gzipped(response):\n     \"\"\"Return True if the response is gzipped, or False otherwise\"\"\"\n     ctype = response.headers.get('Content-Type', b'')\n-    return not _is_gzipped_re.search(ctype) is None\n+    return _is_gzipped_re.search(ctype) is not None\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "scrapy#d715172528925ec0242d29122a0cad6a6f4fd4e2", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 39 | Lines Deleted: 41 | Files Changed: 2 | Hunks: 5 | Methods Changed: 9 | Complexity Δ (Sum/Max): -1/0 | Churn Δ: 80 | Churn Cumulative: 311 | Contributors (this commit): 6 | Commits (past 90d): 10 | Contributors (cumulative): 10 | DMM Complexity: 0.0\n\nDIFF:\n@@ -37,6 +37,9 @@ class ImagesPipeline(FilesPipeline):\n     \"\"\"\n \n     MEDIA_NAME = 'image'\n+\n+    # Uppercase attributes kept for backward compatibility with code that subclasses\n+    # ImagesPipeline. They may be overriden by settings.\n     MIN_WIDTH = 0\n     MIN_HEIGHT = 0\n     EXPIRES = 0\n\n@@ -207,6 +207,7 @@ class ImagesPipelineTestCaseFields(unittest.TestCase):\n \n class ImagesPipelineTestCaseCustomSettings(unittest.TestCase):\n \n+\n     def setUp(self):\n         self.tempdir = mkdtemp()\n         self.pipeline = ImagesPipeline(self.tempdir)\n@@ -215,46 +216,27 @@ class ImagesPipelineTestCaseCustomSettings(unittest.TestCase):\n     def tearDown(self):\n         rmtree(self.tempdir)\n \n-    def test_expires(self):\n-        another_pipeline = ImagesPipeline.from_settings(Settings({'IMAGES_STORE': self.tempdir,\n-                                                                'IMAGES_EXPIRES': 42}))\n-        self.assertEqual(self.pipeline.expires, self.default_settings.getint('IMAGES_EXPIRES'))\n-        self.assertEqual(another_pipeline.expires, 42)\n-\n-    def test_images_urls_field(self):\n-        another_pipeline = ImagesPipeline.from_settings(Settings({'IMAGES_STORE': self.tempdir,\n-                                                                'IMAGES_URLS_FIELD': 'funny_field'}))\n-        default = self.pipeline.IMAGES_URLS_FIELD\n-        self.assertEqual(self.pipeline.images_urls_field, self.default_settings.get('IMAGES_URLS_FIELD', default))\n-        self.assertEqual(another_pipeline.images_urls_field, 'funny_field')\n-\n-    def test_images_result_field(self):\n-        another_pipeline = ImagesPipeline.from_settings(Settings({'IMAGES_STORE': self.tempdir,\n-                                                                'IMAGES_RESULT_FIELD': 'funny_field'}))\n-        default = self.pipeline.IMAGES_RESULT_FIELD\n-        self.assertEqual(self.pipeline.images_result_field, self.default_settings.get('IMAGES_RESULT_FIELD', default))\n-        self.assertEqual(another_pipeline.images_result_field, 'funny_field')\n-\n-    def test_min_width(self):\n-        another_pipeline = ImagesPipeline.from_settings(Settings({'IMAGES_STORE': self.tempdir,\n-                                                                'IMAGES_MIN_WIDTH': 42}))\n-        default = self.pipeline.MIN_WIDTH\n-        self.assertEqual(self.pipeline.min_width, self.default_settings.getint('IMAGES_MIN_WIDTH', default))\n-        self.assertEqual(another_pipeline.min_width, 42)\n-\n-    def test_min_height(self):\n-        another_pipeline = ImagesPipeline.from_settings(Settings({'IMAGES_STORE': self.tempdir,\n-                                                                'IMAGES_MIN_HEIGHT': 42}))\n-        self.assertEqual(self.pipeline.min_height, self.default_settings.getint('IMAGES_MIN_HEIGHT'))\n-        self.assertEqual(another_pipeline.min_height, 42)\n-\n-    def test_thumbs(self):\n-        custom_thumbs = {'small': (50, 50), 'big': (270, 270)}\n-        another_pipeline = ImagesPipeline.from_settings(Settings({'IMAGES_STORE': self.tempdir,\n-                                                                'IMAGES_THUMBS': custom_thumbs}))\n-        default = self.pipeline.THUMBS\n-        self.assertEqual(self.pipeline.thumbs, self.default_settings.get('IMAGES_THUMBS', default))\n-        self.assertEqual(another_pipeline.thumbs, custom_thumbs)\n+    def test_different_settings_for_different_instances(self):\n+        custom_settings = [\n+            # Order is: key name in settings.py, value, name of pipeline attribute.\n+            (\"IMAGES_EXPIRES\", 42, \"EXPIRES\"),\n+            (\"IMAGES_STORE\", self.tempdir, \"IMAGES_STORE\"),\n+            (\"IMAGES_RESULT_FIELD\", \"funny_field\", \"IMAGES_RESULT_FIELD\"),\n+            (\"IMAGES_URLS_FIELD\", \"other_field\", \"IMAGES_URLS_FIELD\"),\n+            (\"IMAGES_MIN_WIDTH\", 99, \"MIN_WIDTH\"),\n+            (\"IMAGES_MIN_HEIGHT\", 112, \"MIN_HEIGHT\"),\n+            (\"IMAGES_THUMBS\", {'small': (50, 50), 'big': (270, 270)}, \"THUMBS\")\n+        ]\n+        default_settings = Settings()\n+        default_sts_pipe = ImagesPipeline(self.tempdir, settings=default_settings)\n+        user_sts_pipe = ImagesPipeline.from_settings(Settings({k: v for k, v, _ in custom_settings}))\n+        for key, custom_value, attr_name in custom_settings:\n+            if attr_name == \"IMAGES_STORE\":\n+                # this is not set as pipeline attribute\n+                continue\n+            expected_default_value = getattr(default_sts_pipe, attr_name)\n+            self.assertEqual(getattr(default_sts_pipe, attr_name), expected_default_value, key)\n+            self.assertEqual(getattr(user_sts_pipe, attr_name.lower()), custom_value, key)\n \n     def test_class_attrs_preserved(self):\n \n@@ -275,7 +257,7 @@ class ImagesPipelineTestCaseCustomSettings(unittest.TestCase):\n             \"IMAGES_MIN_WIDTH\": 90\n         }\n \n-        # If image settings are defined they override class attributes.\n+        # Class attributes for subclass of ImagePipeline override default setting keys.\n         pipeline = UserDefinedImagePipeline.from_settings(Settings(settings))\n         self.assertEqual(pipeline.min_width, 1000)\n \n@@ -293,6 +275,19 @@ class ImagesPipelineTestCaseCustomSettings(unittest.TestCase):\n         user_pipeline = UserDefinedPipeline.from_settings(Settings(settings))\n         self.assertEqual(user_pipeline.min_width, 1999)\n \n+    def test_settings_multiple_pipelilines_and_class_attrs(self):\n+        # Setting keys for user defined pipeline override class attributes.\n+        class UserDefinedPipeline(ImagesPipeline):\n+            MIN_WIDTH = 200\n+\n+        settings = {\n+            \"IMAGES_MIN_WIDTH\": 10,\n+            \"USERDEFINEDPIPELINE_IMAGES_MIN_WIDTH\": 1999,\n+            \"IMAGES_STORE\": self.tempdir\n+        }\n+        user_pipeline = UserDefinedPipeline.from_settings(Settings(settings))\n+        self.assertEqual(user_pipeline.min_width, 1999)\n+\n \n def _create_image(format, *a, **kw):\n     buf = TemporaryFile()\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "scrapy#23f99e98c4cf97891202847f3384a35b6fc57e7c", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 3 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 2 | Methods Changed: 2 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 4 | Churn Cumulative: 68 | Contributors (this commit): 3 | Commits (past 90d): 4 | Contributors (cumulative): 3 | DMM Complexity: 1.0\n\nDIFF:\n@@ -29,10 +29,12 @@ class GunzipTest(unittest.TestCase):\n             text = gunzip(f.read())\n             assert text.endswith(b'</html>')\n \n-    def test_is_gzipped_right(self):\n+    def test_is_x_gzipped_right(self):\n         hdrs = Headers({\"Content-Type\": \"application/x-gzip\"})\n         r1 = Response(\"http://www.example.com\", headers=hdrs)\n         self.assertTrue(is_gzipped(r1))\n+\n+    def test_is_gzipped_right(self):\n         hdrs = Headers({\"Content-Type\": \"application/gzip\"})\n         r1 = Response(\"http://www.example.com\", headers=hdrs)\n         self.assertTrue(is_gzipped(r1))\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "scrapy#ee39d11e45a6ca20a24d28cd08c4b20ea1eae40e", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 125 | Lines Deleted: 65 | Files Changed: 2 | Hunks: 12 | Methods Changed: 13 | Complexity Δ (Sum/Max): 9/9 | Churn Δ: 190 | Churn Cumulative: 501 | Contributors (this commit): 6 | Commits (past 90d): 12 | Contributors (cumulative): 10 | DMM Complexity: 1.0\n\nDIFF:\n@@ -39,7 +39,7 @@ class ImagesPipeline(FilesPipeline):\n     MEDIA_NAME = 'image'\n \n     # Uppercase attributes kept for backward compatibility with code that subclasses\n-    # ImagesPipeline. They may be overriden by settings.\n+    # ImagesPipeline. They may be overridden by settings.\n     MIN_WIDTH = 0\n     MIN_HEIGHT = 0\n     EXPIRES = 0\n\n@@ -1,5 +1,6 @@\n import os\n import hashlib\n+import random\n import warnings\n from tempfile import mkdtemp, TemporaryFile\n from shutil import rmtree\n@@ -206,87 +207,146 @@ class ImagesPipelineTestCaseFields(unittest.TestCase):\n \n \n class ImagesPipelineTestCaseCustomSettings(unittest.TestCase):\n+    img_cls_attribute_names = [\n+        # Pipeline attribute names with corresponding setting names.\n+        (\"EXPIRES\", \"IMAGES_EXPIRES\"),\n+        (\"MIN_WIDTH\", \"IMAGES_MIN_WIDTH\"),\n+        (\"MIN_HEIGHT\", \"IMAGES_MIN_HEIGHT\"),\n+        (\"IMAGES_URLS_FIELD\", \"IMAGES_URLS_FIELD\"),\n+        (\"IMAGES_RESULT_FIELD\", \"IMAGES_RESULT_FIELD\"),\n+        (\"THUMBS\", \"IMAGES_THUMBS\")\n+    ]\n+\n+    # This should match what is defined in ImagesPipeline.\n+    default_pipeline_settings = dict(\n+        MIN_WIDTH=0,\n+        MIN_HEIGHT=0,\n+        EXPIRES=0,\n+        THUMBS={},\n+        IMAGES_URLS_FIELD='image_urls',\n+        IMAGES_RESULT_FIELD='images'\n+    )\n \n \n     def setUp(self):\n         self.tempdir = mkdtemp()\n-        self.pipeline = ImagesPipeline(self.tempdir)\n-        self.default_settings = Settings()\n \n     def tearDown(self):\n         rmtree(self.tempdir)\n \n+    def _generate_fake_settings(self, prefix=None):\n+        \"\"\"\n+        :param prefix: string for setting keys\n+        :return: dictionary of image pipeline settings\n+        \"\"\"\n+\n+        def random_string():\n+            return \"\".join([chr(random.randint(97, 123)) for _ in range(10)])\n+\n+        settings = {\n+            \"IMAGES_EXPIRES\": random.randint(1, 1000),\n+            \"IMAGES_STORE\": self.tempdir,\n+            \"IMAGES_RESULT_FIELD\": random_string(),\n+            \"IMAGES_URLS_FIELD\": random_string(),\n+            \"IMAGES_MIN_WIDTH\": random.randint(1, 1000),\n+            \"IMAGES_MIN_HEIGHT\": random.randint(1, 1000),\n+            \"IMAGES_THUMBS\": {\n+                'small': (random.randint(1, 1000), random.randint(1, 1000)),\n+                'big': (random.randint(1, 1000), random.randint(1, 1000))\n+            }\n+        }\n+        if not prefix:\n+            return settings\n+\n+        return {prefix.upper() + \"_\" + k if k != \"IMAGES_STORE\" else k: v for k, v in settings.items()}\n+\n+    def _generate_fake_pipeline_subclass(self):\n+        \"\"\"\n+        :return: ImagePipeline class will all uppercase attributes set.\n+        \"\"\"\n+        class UserDefinedImagePipeline(ImagesPipeline):\n+            # Values should be in different range than fake_settings.\n+            MIN_WIDTH = random.randint(1000, 2000)\n+            MIN_HEIGHT = random.randint(1000, 2000)\n+            THUMBS = {\n+                'small': (random.randint(1000, 2000), random.randint(1000, 2000)),\n+                'big': (random.randint(1000, 2000), random.randint(1000, 2000))\n+            }\n+            EXPIRES = random.randint(1000, 2000)\n+            IMAGES_URLS_FIELD = \"field_one\"\n+            IMAGES_RESULT_FIELD = \"field_two\"\n+\n+        return UserDefinedImagePipeline\n+\n     def test_different_settings_for_different_instances(self):\n-        custom_settings = [\n-            # Order is: key name in settings.py, value, name of pipeline attribute.\n-            (\"IMAGES_EXPIRES\", 42, \"EXPIRES\"),\n-            (\"IMAGES_STORE\", self.tempdir, \"IMAGES_STORE\"),\n-            (\"IMAGES_RESULT_FIELD\", \"funny_field\", \"IMAGES_RESULT_FIELD\"),\n-            (\"IMAGES_URLS_FIELD\", \"other_field\", \"IMAGES_URLS_FIELD\"),\n-            (\"IMAGES_MIN_WIDTH\", 99, \"MIN_WIDTH\"),\n-            (\"IMAGES_MIN_HEIGHT\", 112, \"MIN_HEIGHT\"),\n-            (\"IMAGES_THUMBS\", {'small': (50, 50), 'big': (270, 270)}, \"THUMBS\")\n-        ]\n+        \"\"\"\n+        If there are two instances of ImagesPipeline class with different settings, they should\n+        have different settings.\n+        \"\"\"\n+        custom_settings = self._generate_fake_settings()\n         default_settings = Settings()\n         default_sts_pipe = ImagesPipeline(self.tempdir, settings=default_settings)\n-        user_sts_pipe = ImagesPipeline.from_settings(Settings({k: v for k, v, _ in custom_settings}))\n-        for key, custom_value, attr_name in custom_settings:\n-            if attr_name == \"IMAGES_STORE\":\n-                # this is not set as pipeline attribute\n-                continue\n-            expected_default_value = getattr(default_sts_pipe, attr_name)\n-            self.assertEqual(getattr(default_sts_pipe, attr_name), expected_default_value, key)\n-            self.assertEqual(getattr(user_sts_pipe, attr_name.lower()), custom_value, key)\n+        user_sts_pipe = ImagesPipeline.from_settings(Settings(custom_settings))\n+        for pipe_attr, settings_attr in self.img_cls_attribute_names:\n+            expected_default_value = self.default_pipeline_settings.get(pipe_attr)\n+            custom_value = custom_settings.get(settings_attr)\n+            self.assertNotEqual(expected_default_value, custom_value)\n+            self.assertEqual(getattr(default_sts_pipe, pipe_attr.lower()), expected_default_value)\n+            self.assertEqual(getattr(user_sts_pipe, pipe_attr.lower()), custom_value)\n \n-    def test_class_attrs_preserved(self):\n+    def test_subclass_attrs_preserved_default_settings(self):\n+        \"\"\"\n+        If image settings are not defined at all subclass of ImagePipeline takes values\n+        from class attributes.\n+        \"\"\"\n+        pipeline_cls = self._generate_fake_pipeline_subclass()\n+        pipeline = pipeline_cls.from_settings(Settings({\"IMAGES_STORE\": self.tempdir}))\n+        for pipe_attr, settings_attr in self.img_cls_attribute_names:\n+            # Instance attribute (lowercase) must be equal to class attribute (uppercase).\n+            attr_value = getattr(pipeline, pipe_attr.lower())\n+            self.assertEqual(attr_value, getattr(pipeline, pipe_attr))\n \n+    def test_subclass_attrs_preserved_custom_settings(self):\n+        \"\"\"\n+        If image settings are defined but they are not defined for subclass class attributes\n+        should be preserved.\n+        \"\"\"\n+        pipeline_cls = self._generate_fake_pipeline_subclass()\n+        settings = self._generate_fake_settings()\n+        pipeline = pipeline_cls.from_settings(Settings(settings))\n+        for pipe_attr, settings_attr in self.img_cls_attribute_names:\n+            # Instance attribute (lowercase) must be equal to class attribute (uppercase).\n+            value = getattr(pipeline, pipe_attr.lower())\n+            self.assertEqual(value, getattr(pipeline, pipe_attr))\n+\n+    def test_custom_settings_for_subclasses(self):\n+        \"\"\"\n+        If there are custom settings for subclass and NO class attributes, pipeline should use custom\n+        settings.\n+        \"\"\"\n         class UserDefinedImagePipeline(ImagesPipeline):\n-            MIN_WIDTH = 1000\n-\n-        # If image settings are not defined values are taken from class attributes.\n-        pipeline = UserDefinedImagePipeline.from_settings(Settings({\"IMAGES_STORE\": self.tempdir}))\n-        self.assertEqual(pipeline.min_width, 1000)\n-\n-    def test_class_attrs_preserved_if_only_global_settings_defined(self):\n-\n-        class UserDefinedImagePipeline(ImagesPipeline):\n-            MIN_WIDTH = 1000\n-\n-        settings = {\n-            \"IMAGES_STORE\": self.tempdir,\n-            \"IMAGES_MIN_WIDTH\": 90\n-        }\n-\n-        # Class attributes for subclass of ImagePipeline override default setting keys.\n-        pipeline = UserDefinedImagePipeline.from_settings(Settings(settings))\n-        self.assertEqual(pipeline.min_width, 1000)\n-\n-    def test_settings_multiple_pipelilines(self):\n-        # If user has multiple pipelines he can define setting keys preceded with\n-        # pipeline class name.\n-        class UserDefinedPipeline(ImagesPipeline):\n             pass\n \n-        settings = {\n-            \"IMAGES_MIN_WIDTH\": 10,\n-            \"USERDEFINEDPIPELINE_IMAGES_MIN_WIDTH\": 1999,\n-            \"IMAGES_STORE\": self.tempdir\n-        }\n-        user_pipeline = UserDefinedPipeline.from_settings(Settings(settings))\n-        self.assertEqual(user_pipeline.min_width, 1999)\n+        prefix = UserDefinedImagePipeline.__name__.upper()\n+        settings = self._generate_fake_settings(prefix=prefix)\n+        user_pipeline = UserDefinedImagePipeline.from_settings(Settings(settings))\n+        for pipe_attr, settings_attr in self.img_cls_attribute_names:\n+            # Values from settings for custom pipeline should be set on pipeline instance.\n+            custom_value = settings.get(prefix + \"_\" + settings_attr)\n+            self.assertEqual(getattr(user_pipeline, pipe_attr.lower()), custom_value)\n \n-    def test_settings_multiple_pipelilines_and_class_attrs(self):\n-        # Setting keys for user defined pipeline override class attributes.\n-        class UserDefinedPipeline(ImagesPipeline):\n-            MIN_WIDTH = 200\n-\n-        settings = {\n-            \"IMAGES_MIN_WIDTH\": 10,\n-            \"USERDEFINEDPIPELINE_IMAGES_MIN_WIDTH\": 1999,\n-            \"IMAGES_STORE\": self.tempdir\n-        }\n-        user_pipeline = UserDefinedPipeline.from_settings(Settings(settings))\n-        self.assertEqual(user_pipeline.min_width, 1999)\n+    def test_custom_settings_and_class_attrs_for_subclasses(self):\n+        \"\"\"\n+        If there are custom settings for subclass AND class attributes\n+        setting keys are preferred and override attributes.\n+        \"\"\"\n+        pipeline_cls = self._generate_fake_pipeline_subclass()\n+        prefix = pipeline_cls.__name__.upper()\n+        settings = self._generate_fake_settings(prefix=prefix)\n+        user_pipeline = pipeline_cls.from_settings(Settings(settings))\n+        for pipe_attr, settings_attr in self.img_cls_attribute_names:\n+            custom_value = settings.get(prefix + \"_\" + settings_attr)\n+            self.assertEqual(getattr(user_pipeline, pipe_attr.lower()), custom_value)\n \n \n def _create_image(format, *a, **kw):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
