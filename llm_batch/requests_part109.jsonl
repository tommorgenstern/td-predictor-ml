{"custom_id": "requests#bbdbcc8f0553f112ff68b0950b4128bd8af000fc", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 16 | Lines Deleted: 1 | Files Changed: 2 | Hunks: 5 | Methods Changed: 2 | Complexity Δ (Sum/Max): 2/1 | Churn Δ: 17 | Churn Cumulative: 5894 | Contributors (this commit): 105 | Commits (past 90d): 3 | Contributors (cumulative): 119 | DMM Complexity: 0.5\n\nDIFF:\n@@ -26,6 +26,7 @@ from urllib3.exceptions import ProtocolError\n from urllib3.exceptions import ReadTimeoutError\n from urllib3.exceptions import SSLError as _SSLError\n from urllib3.exceptions import ResponseError\n+from urllib3.exceptions import LocationValueError\n \n from .models import Response\n from .compat import urlparse, basestring\n@@ -35,7 +36,8 @@ from .utils import (DEFAULT_CA_BUNDLE_PATH, extract_zipped_paths,\n from .structures import CaseInsensitiveDict\n from .cookies import extract_cookies_to_jar\n from .exceptions import (ConnectionError, ConnectTimeout, ReadTimeout, SSLError,\n-                         ProxyError, RetryError, InvalidSchema, InvalidProxyURL)\n+                         ProxyError, RetryError, InvalidSchema, InvalidProxyURL,\n+                         InvalidURL)\n from .auth import _basic_auth_str\n \n try:\n@@ -407,7 +409,10 @@ class HTTPAdapter(BaseAdapter):\n         :rtype: requests.Response\n         \"\"\"\n \n+        try:\n             conn = self.get_connection(request.url, proxies)\n+        except LocationValueError as e:\n+            raise InvalidURL(e, request=request)\n \n         self.cert_verify(conn, request.url, verify, cert)\n         url = self.request_url(request, proxies)\n\n@@ -2426,6 +2426,16 @@ class TestPreparingURLs(object):\n         with pytest.raises(requests.exceptions.InvalidURL):\n             r.prepare()\n \n+    @pytest.mark.parametrize(\n+        'url, exception',\n+        (\n+            ('http://localhost:-1', InvalidURL),\n+        )\n+    )\n+    def test_redirecting_to_bad_url(self, httpbin, url, exception):\n+        with pytest.raises(exception):\n+            r = requests.get(httpbin('redirect-to'), params={'url': url})\n+\n     @pytest.mark.parametrize(\n         'input, expected',\n         (\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#89ab030cdb83a728a30e172bc65d27ba214d2eda", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 22 | Lines Deleted: 25 | Files Changed: 7 | Hunks: 8 | Methods Changed: 8 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 47 | Churn Cumulative: 22271 | Contributors (this commit): 311 | Commits (past 90d): 125 | Contributors (cumulative): 474 | DMM Complexity: 0.0\n\nDIFF:\n@@ -129,8 +129,7 @@ class HTTPAdapter(BaseAdapter):\n         self.init_poolmanager(pool_connections, pool_maxsize, block=pool_block)\n \n     def __getstate__(self):\n-        return dict((attr, getattr(self, attr, None)) for attr in\n-                    self.__attrs__)\n+        return {attr: getattr(self, attr, None) for attr in self.__attrs__}\n \n     def __setstate__(self, state):\n         # Can't handle by adding 'proxy_manager' to self.__attrs__ because\n\n@@ -444,20 +444,21 @@ def create_cookie(name, value, **kwargs):\n     By default, the pair of `name` and `value` will be set for the domain ''\n     and sent on every request (this is sometimes called a \"supercookie\").\n     \"\"\"\n-    result = dict(\n-        version=0,\n-        name=name,\n-        value=value,\n-        port=None,\n-        domain='',\n-        path='/',\n-        secure=False,\n-        expires=None,\n-        discard=True,\n-        comment=None,\n-        comment_url=None,\n-        rest={'HttpOnly': None},\n-        rfc2109=False,)\n+    result = {\n+        'version': 0,\n+        'name': name,\n+        'value': value,\n+        'port': None,\n+        'domain': '',\n+        'path': '/',\n+        'secure': False,\n+        'expires': None,\n+        'discard': True,\n+        'comment': None,\n+        'comment_url': None,\n+        'rest': {'HttpOnly': None},\n+        'rfc2109': False,\n+    }\n \n     badargs = set(kwargs) - set(result)\n     if badargs:\n\n@@ -15,14 +15,14 @@ HOOKS = ['response']\n \n \n def default_hooks():\n-    return dict((event, []) for event in HOOKS)\n+    return {event: [] for event in HOOKS}\n \n # TODO: response is the only one\n \n \n def dispatch_hook(key, hooks, hook_data, **kwargs):\n     \"\"\"Dispatches a hook dictionary on a given piece of data.\"\"\"\n-    hooks = hooks or dict()\n+    hooks = hooks or {}\n     hooks = hooks.get(key)\n     if hooks:\n         if hasattr(hooks, '__call__'):\n\n@@ -652,10 +652,7 @@ class Response(object):\n         if not self._content_consumed:\n             self.content\n \n-        return dict(\n-            (attr, getattr(self, attr, None))\n-            for attr in self.__attrs__\n-        )\n+        return {attr: getattr(self, attr, None) for attr in self.__attrs__}\n \n     def __setstate__(self, state):\n         for name, value in state.items():\n\n@@ -738,7 +738,7 @@ class Session(SessionRedirectMixin):\n             self.adapters[key] = self.adapters.pop(key)\n \n     def __getstate__(self):\n-        state = dict((attr, getattr(self, attr, None)) for attr in self.__attrs__)\n+        state = {attr: getattr(self, attr, None) for attr in self.__attrs__}\n         return state\n \n     def __setstate__(self, state):\n\n@@ -864,7 +864,7 @@ class TestRequests:\n \n     def test_urlencoded_get_query_multivalued_param(self, httpbin):\n \n-        r = requests.get(httpbin('get'), params=dict(test=['foo', 'baz']))\n+        r = requests.get(httpbin('get'), params={'test': ['foo', 'baz']})\n         assert r.status_code == 200\n         assert r.url == httpbin('get?test=foo&test=baz')\n \n\n@@ -665,7 +665,7 @@ def test_add_dict_to_cookiejar(cookiejar):\n     cookiedict = {'test': 'cookies',\n                   'good': 'cookies'}\n     cj = add_dict_to_cookiejar(cookiejar, cookiedict)\n-    cookies = dict((cookie.name, cookie.value) for cookie in cj)\n+    cookies = {cookie.name: cookie.value for cookie in cj}\n     assert cookiedict == cookies\n \n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#7fd9267b3bab1d45f5e4ac0953629c5531ecbc55", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 40 | Lines Deleted: 68 | Files Changed: 11 | Hunks: 46 | Methods Changed: 25 | Complexity Δ (Sum/Max): -2/0 | Churn Δ: 108 | Churn Cumulative: 12981 | Contributors (this commit): 236 | Commits (past 90d): 22 | Contributors (cumulative): 350 | DMM Complexity: 0.0\n\nDIFF:\n@@ -79,14 +79,14 @@ def _check_cryptography(cryptography_version):\n         return\n \n     if cryptography_version < [1, 3, 4]:\n-        warning = 'Old version of cryptography ({0}) may cause slowdown.'.format(cryptography_version)\n+        warning = 'Old version of cryptography ({}) may cause slowdown.'.format(cryptography_version)\n         warnings.warn(warning, RequestsDependencyWarning)\n \n # Check imported dependencies for compatibility.\n try:\n     check_compatibility(urllib3.__version__, chardet.__version__)\n except (AssertionError, ValueError):\n-    warnings.warn(\"urllib3 ({0}) or chardet ({1}) doesn't match a supported \"\n+    warnings.warn(\"urllib3 ({}) or chardet ({}) doesn't match a supported \"\n                   \"version!\".format(urllib3.__version__, chardet.__version__),\n                   RequestsDependencyWarning)\n \n@@ -123,12 +123,7 @@ from .exceptions import (\n \n # Set default logging handler to avoid \"No handler found\" warnings.\n import logging\n-try:  # Python 2.7+\n from logging import NullHandler\n-except ImportError:\n-    class NullHandler(logging.Handler):\n-        def emit(self, record):\n-            pass\n \n logging.getLogger(__name__).addHandler(NullHandler())\n \n\n@@ -225,7 +225,7 @@ class HTTPAdapter(BaseAdapter):\n \n             if not cert_loc or not os.path.exists(cert_loc):\n                 raise IOError(\"Could not find a suitable TLS CA certificate bundle, \"\n-                              \"invalid path: {0}\".format(cert_loc))\n+                              \"invalid path: {}\".format(cert_loc))\n \n             conn.cert_reqs = 'CERT_REQUIRED'\n \n@@ -247,10 +247,10 @@ class HTTPAdapter(BaseAdapter):\n                 conn.key_file = None\n             if conn.cert_file and not os.path.exists(conn.cert_file):\n                 raise IOError(\"Could not find the TLS certificate file, \"\n-                              \"invalid path: {0}\".format(conn.cert_file))\n+                              \"invalid path: {}\".format(conn.cert_file))\n             if conn.key_file and not os.path.exists(conn.key_file):\n                 raise IOError(\"Could not find the TLS key file, \"\n-                              \"invalid path: {0}\".format(conn.key_file))\n+                              \"invalid path: {}\".format(conn.key_file))\n \n     def build_response(self, req, resp):\n         \"\"\"Builds a :class:`Response <requests.Response>` object from a urllib3\n@@ -425,7 +425,7 @@ class HTTPAdapter(BaseAdapter):\n                 timeout = TimeoutSauce(connect=connect, read=read)\n             except ValueError as e:\n                 # this may raise a string formatting error.\n-                err = (\"Invalid timeout {0}. Pass a (connect, read) \"\n+                err = (\"Invalid timeout {}. Pass a (connect, read) \"\n                        \"timeout tuple, or a single float to set \"\n                        \"both timeouts to the same value\".format(timeout))\n                 raise ValueError(err)\n@@ -475,11 +475,10 @@ class HTTPAdapter(BaseAdapter):\n \n                     # Receive the response from the server\n                     try:\n-                        # For Python 2.7+ versions, use buffering of HTTP\n-                        # responses\n+                        # For Python 2.7, use buffering of HTTP responses\n                         r = low_conn.getresponse(buffering=True)\n                     except TypeError:\n-                        # For compatibility with Python 2.6 versions and back\n+                        # For compatibility with Python 3.3+\n                         r = low_conn.getresponse()\n \n                     resp = HTTPResponse.from_httplib(\n\n@@ -38,7 +38,7 @@ def _basic_auth_str(username, password):\n     if not isinstance(username, basestring):\n         warnings.warn(\n             \"Non-string usernames will no longer be supported in Requests \"\n-            \"3.0.0. Please convert the object you've passed in ({0!r}) to \"\n+            \"3.0.0. Please convert the object you've passed in ({!r}) to \"\n             \"a string or bytes object in the near future to avoid \"\n             \"problems.\".format(username),\n             category=DeprecationWarning,\n@@ -48,7 +48,7 @@ def _basic_auth_str(username, password):\n     if not isinstance(password, basestring):\n         warnings.warn(\n             \"Non-string passwords will no longer be supported in Requests \"\n-            \"3.0.0. Please convert the object you've passed in ({0!r}) to \"\n+            \"3.0.0. Please convert the object you've passed in ({!r}) to \"\n             \"a string or bytes object in the near future to avoid \"\n             \"problems.\".format(password),\n             category=DeprecationWarning,\n\n@@ -43,9 +43,8 @@ if is_py2:\n     import cookielib\n     from Cookie import Morsel\n     from StringIO import StringIO\n-    from collections import Callable, Mapping, MutableMapping\n+    from collections import Callable, Mapping, MutableMapping, OrderedDict\n \n-    from urllib3.packages.ordered_dict import OrderedDict\n \n     builtin_str = str\n     bytes = str\n\n@@ -89,8 +89,7 @@ def info():\n         'version': getattr(idna, '__version__', ''),\n     }\n \n-    # OPENSSL_VERSION_NUMBER doesn't exist in the Python 2.6 ssl module.\n-    system_ssl = getattr(ssl, 'OPENSSL_VERSION_NUMBER', None)\n+    system_ssl = ssl.OPENSSL_VERSION_NUMBER\n     system_ssl_info = {\n         'version': '%x' % system_ssl if system_ssl is not None else ''\n     }\n\n@@ -173,7 +173,7 @@ def get_netrc_auth(url, raise_errors=False):\n \n         for f in NETRC_FILES:\n             try:\n-                loc = os.path.expanduser('~/{0}'.format(f))\n+                loc = os.path.expanduser('~/{}'.format(f))\n             except KeyError:\n                 # os.path.expanduser can fail when $HOME is undefined and\n                 # getpwuid fails. See https://bugs.python.org/issue20164 &\n@@ -729,7 +729,7 @@ def should_bypass_proxies(url, no_proxy):\n         else:\n             host_with_port = parsed.hostname\n             if parsed.port:\n-                host_with_port += ':{0}'.format(parsed.port)\n+                host_with_port += ':{}'.format(parsed.port)\n \n             for host in no_proxy:\n                 if parsed.hostname.endswith(host) or host_with_port.endswith(host):\n@@ -737,13 +737,8 @@ def should_bypass_proxies(url, no_proxy):\n                     # to apply the proxies on this URL.\n                     return True\n \n-    # If the system proxy settings indicate that this URL should be bypassed,\n-    # don't proxy.\n-    # The proxy_bypass function is incredibly buggy on OS X in early versions\n-    # of Python 2.6, so allow this call to fail. Only catch the specific\n-    # exceptions we've seen, though: this call failing in other ways can reveal\n-    # legitimate problems.\n     with set_environ('no_proxy', no_proxy_arg):\n+        # parsed.hostname can be `None` in cases such as a file URI.\n         try:\n             bypass = proxy_bypass(parsed.hostname)\n         except (TypeError, socket.gaierror):\n\n@@ -39,12 +39,6 @@ if sys.argv[-1] == 'publish':\n     os.system('twine upload dist/*')\n     sys.exit()\n \n-# pyOpenSSL version 18.0.0 dropped support for Python 2.6\n-if sys.version_info < (2, 7):\n-    PYOPENSSL_VERSION = 'pyOpenSSL >= 0.14, < 18.0.0'\n-else:\n-    PYOPENSSL_VERSION = 'pyOpenSSL >= 0.14'\n-\n packages = ['requests']\n \n requires = [\n@@ -85,7 +79,7 @@ setup(\n     package_data={'': ['LICENSE', 'NOTICE'], 'requests': ['*.pem']},\n     package_dir={'requests': 'requests'},\n     include_package_data=True,\n-    python_requires=\">=2.6, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*\",\n+    python_requires=\">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*\",\n     install_requires=requires,\n     license=about['__license__'],\n     zip_safe=False,\n@@ -108,8 +102,8 @@ setup(\n     cmdclass={'test': PyTest},\n     tests_require=test_requirements,\n     extras_require={\n-        'security': [PYOPENSSL_VERSION, 'cryptography>=1.3.4', 'idna>=2.0.0'],\n+        'security': ['pyOpenSSL >= 0.14', 'cryptography>=1.3.4', 'idna>=2.0.0'],\n         'socks': ['PySocks>=1.5.6, !=1.5.7'],\n-        'socks:sys_platform == \"win32\" and (python_version == \"2.7\" or python_version == \"2.6\")': ['win_inet_pton'],\n+        'socks:sys_platform == \"win32\" and python_version == \"2.7\"': ['win_inet_pton'],\n     },\n )\n\n@@ -7,15 +7,6 @@ import pytest\n from requests.help import info\n \n \n-@pytest.mark.skipif(sys.version_info[:2] != (2,6), reason=\"Only run on Python 2.6\")\n-def test_system_ssl_py26():\n-    \"\"\"OPENSSL_VERSION_NUMBER isn't provided in Python 2.6, verify we don't\n-    blow up in this case.\n-    \"\"\"\n-    assert info()['system_ssl'] == {'version': ''}\n-\n-\n-@pytest.mark.skipif(sys.version_info < (2,7), reason=\"Only run on Python 2.7+\")\n def test_system_ssl():\n     \"\"\"Verify we're actually setting system_ssl when it should be available.\"\"\"\n     assert info()['system_ssl']['version'] != ''\n\n@@ -16,7 +16,7 @@ def test_chunked_upload():\n     data = iter([b'a', b'b', b'c'])\n \n     with server as (host, port):\n-        url = 'http://{0}:{1}/'.format(host, port)\n+        url = 'http://{}:{}/'.format(host, port)\n         r = requests.post(url, data=data, stream=True)\n         close_server.set()  # release server block\n \n@@ -77,7 +77,7 @@ def test_digestauth_401_count_reset_on_redirect():\n     server = Server(digest_response_handler, wait_to_close_event=close_server)\n \n     with server as (host, port):\n-        url = 'http://{0}:{1}/'.format(host, port)\n+        url = 'http://{}:{}/'.format(host, port)\n         r = requests.get(url, auth=auth)\n         # Verify server succeeded in authenticating.\n         assert r.status_code == 200\n@@ -127,7 +127,7 @@ def test_digestauth_401_only_sent_once():\n     server = Server(digest_failed_response_handler, wait_to_close_event=close_server)\n \n     with server as (host, port):\n-        url = 'http://{0}:{1}/'.format(host, port)\n+        url = 'http://{}:{}/'.format(host, port)\n         r = requests.get(url, auth=auth)\n         # Verify server didn't authenticate us.\n         assert r.status_code == 401\n@@ -164,7 +164,7 @@ def test_digestauth_only_on_4xx():\n     server = Server(digest_response_handler, wait_to_close_event=close_server)\n \n     with server as (host, port):\n-        url = 'http://{0}:{1}/'.format(host, port)\n+        url = 'http://{}:{}/'.format(host, port)\n         r = requests.get(url, auth=auth)\n         # Verify server didn't receive auth from us.\n         assert r.status_code == 200\n@@ -181,17 +181,17 @@ _schemes_by_var_prefix = [\n _proxy_combos = []\n for prefix, schemes in _schemes_by_var_prefix:\n     for scheme in schemes:\n-        _proxy_combos.append((\"{0}_proxy\".format(prefix), scheme))\n+        _proxy_combos.append((\"{}_proxy\".format(prefix), scheme))\n \n _proxy_combos += [(var.upper(), scheme) for var, scheme in _proxy_combos]\n \n \n @pytest.mark.parametrize(\"var,scheme\", _proxy_combos)\n def test_use_proxy_from_environment(httpbin, var, scheme):\n-    url = \"{0}://httpbin.org\".format(scheme)\n+    url = \"{}://httpbin.org\".format(scheme)\n     fake_proxy = Server()  # do nothing with the requests; just close the socket\n     with fake_proxy as (host, port):\n-        proxy_url = \"socks5://{0}:{1}\".format(host, port)\n+        proxy_url = \"socks5://{}:{}\".format(host, port)\n         kwargs = {var: proxy_url}\n         with override_environ(**kwargs):\n             # fake proxy's lack of response will cause a ConnectionError\n@@ -212,7 +212,7 @@ def test_redirect_rfc1808_to_non_ascii_location():\n \n     def redirect_resp_handler(sock):\n         consume_socket_content(sock, timeout=0.5)\n-        location = u'//{0}:{1}/{2}'.format(host, port, path)\n+        location = u'//{}:{}/{}'.format(host, port, path)\n         sock.send(\n             b'HTTP/1.1 301 Moved Permanently\\r\\n'\n             b'Content-Length: 0\\r\\n'\n@@ -226,13 +226,13 @@ def test_redirect_rfc1808_to_non_ascii_location():\n     server = Server(redirect_resp_handler, wait_to_close_event=close_server)\n \n     with server as (host, port):\n-        url = u'http://{0}:{1}'.format(host, port)\n+        url = u'http://{}:{}'.format(host, port)\n         r = requests.get(url=url, allow_redirects=True)\n         assert r.status_code == 200\n         assert len(r.history) == 1\n         assert r.history[0].status_code == 301\n         assert redirect_request[0].startswith(b'GET /' + expected_path + b' HTTP/1.1')\n-        assert r.url == u'{0}/{1}'.format(url, expected_path.decode('ascii'))\n+        assert r.url == u'{}/{}'.format(url, expected_path.decode('ascii'))\n \n         close_server.set()\n \n@@ -250,7 +250,7 @@ def test_fragment_not_sent_with_request():\n     server = Server(response_handler, wait_to_close_event=close_server)\n \n     with server as (host, port):\n-        url = 'http://{0}:{1}/path/to/thing/#view=edit&token=hunter2'.format(host, port)\n+        url = 'http://{}:{}/path/to/thing/#view=edit&token=hunter2'.format(host, port)\n         r = requests.get(url)\n         raw_request = r.content\n \n@@ -293,7 +293,7 @@ def test_fragment_update_on_redirect():\n     server = Server(response_handler, wait_to_close_event=close_server)\n \n     with server as (host, port):\n-        url = 'http://{0}:{1}/path/to/thing/#view=edit&token=hunter2'.format(host, port)\n+        url = 'http://{}:{}/path/to/thing/#view=edit&token=hunter2'.format(host, port)\n         r = requests.get(url)\n         raw_request = r.content\n \n@@ -302,8 +302,8 @@ def test_fragment_update_on_redirect():\n         assert r.history[0].request.url == url\n \n         # Verify we haven't overwritten the location with our previous fragment.\n-        assert r.history[1].request.url == 'http://{0}:{1}/get#relevant-section'.format(host, port)\n+        assert r.history[1].request.url == 'http://{}:{}/get#relevant-section'.format(host, port)\n         # Verify previous fragment is used and not the original.\n-        assert r.url == 'http://{0}:{1}/final-url/#relevant-section'.format(host, port)\n+        assert r.url == 'http://{}:{}/final-url/#relevant-section'.format(host, port)\n \n         close_server.set()\n\n@@ -158,7 +158,7 @@ class TestRequests:\n         url = scheme + parts.netloc + parts.path\n         r = requests.Request('GET', url)\n         r = s.send(r.prepare())\n-        assert r.status_code == 200, 'failed for scheme {0}'.format(scheme)\n+        assert r.status_code == 200, 'failed for scheme {}'.format(scheme)\n \n     def test_HTTP_200_OK_GET_ALTERNATIVE(self, httpbin):\n         r = requests.Request('GET', httpbin('get'))\n@@ -816,17 +816,17 @@ class TestRequests:\n         INVALID_PATH = '/garbage'\n         with pytest.raises(IOError) as e:\n             requests.get(httpbin_secure(), verify=INVALID_PATH)\n-        assert str(e.value) == 'Could not find a suitable TLS CA certificate bundle, invalid path: {0}'.format(INVALID_PATH)\n+        assert str(e.value) == 'Could not find a suitable TLS CA certificate bundle, invalid path: {}'.format(INVALID_PATH)\n \n     def test_invalid_ssl_certificate_files(self, httpbin_secure):\n         INVALID_PATH = '/garbage'\n         with pytest.raises(IOError) as e:\n             requests.get(httpbin_secure(), cert=INVALID_PATH)\n-        assert str(e.value) == 'Could not find the TLS certificate file, invalid path: {0}'.format(INVALID_PATH)\n+        assert str(e.value) == 'Could not find the TLS certificate file, invalid path: {}'.format(INVALID_PATH)\n \n         with pytest.raises(IOError) as e:\n             requests.get(httpbin_secure(), cert=('.', INVALID_PATH))\n-        assert str(e.value) == 'Could not find the TLS key file, invalid path: {0}'.format(INVALID_PATH)\n+        assert str(e.value) == 'Could not find the TLS key file, invalid path: {}'.format(INVALID_PATH)\n \n     def test_http_with_certificate(self, httpbin):\n         r = requests.get(httpbin(), cert='.')\n@@ -1458,7 +1458,7 @@ class TestRequests:\n         assert r.json()['args'] == {'foo': 'bar', 'FOO': 'bar'}\n \n     def test_long_authinfo_in_url(self):\n-        url = 'http://{0}:{1}@{2}:9000/path?query#frag'.format(\n+        url = 'http://{}:{}@{}:9000/path?query#frag'.format(\n             'E8A3BE87-9E3F-4620-8858-95478E385B5B',\n             'EA770032-DA4D-4D84-8CE9-29C6D910BF1E',\n             'exactly-------------sixty-----------three------------characters',\n\n@@ -50,7 +50,7 @@ class TestTestServer:\n         )\n \n         with server as (host, port):\n-            r = requests.get('http://{0}:{1}'.format(host, port))\n+            r = requests.get('http://{}:{}'.format(host, port))\n \n             assert r.status_code == 200\n             assert r.text == u'roflol'\n@@ -59,7 +59,7 @@ class TestTestServer:\n     def test_basic_response(self):\n         \"\"\"the basic response server returns an empty http response\"\"\"\n         with Server.basic_response_server() as (host, port):\n-            r = requests.get('http://{0}:{1}'.format(host, port))\n+            r = requests.get('http://{}:{}'.format(host, port))\n             assert r.status_code == 200\n             assert r.text == u''\n             assert r.headers['Content-Length'] == '0'\n@@ -83,7 +83,7 @@ class TestTestServer:\n         server = Server.basic_response_server(requests_to_handle=requests_to_handle)\n \n         with server as (host, port):\n-            server_url = 'http://{0}:{1}'.format(host, port)\n+            server_url = 'http://{}:{}'.format(host, port)\n             for _ in range(requests_to_handle):\n                 r = requests.get(server_url)\n                 assert r.status_code == 200\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#bd840450c0d1e9db3bf62382c15d96378cc3a056", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 5 | Lines Deleted: 5 | Files Changed: 3 | Hunks: 4 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 10 | Churn Cumulative: 1653 | Contributors (this commit): 40 | Commits (past 90d): 10 | Contributors (cumulative): 52 | DMM Complexity: None\n\nDIFF:\n@@ -57,10 +57,10 @@ def check_compatibility(urllib3_version, chardet_version):\n     # Check urllib3 for compatibility.\n     major, minor, patch = urllib3_version  # noqa: F811\n     major, minor, patch = int(major), int(minor), int(patch)\n-    # urllib3 >= 1.21.1, <= 1.23\n+    # urllib3 >= 1.21.1, <= 1.24\n     assert major == 1\n     assert minor >= 21\n-    assert minor <= 23\n+    assert minor <= 24\n \n     # Check chardet for compatibility.\n     major, minor, patch = chardet_version.split('.')[:3]\n\n@@ -5,8 +5,8 @@\n __title__ = 'requests'\n __description__ = 'Python HTTP for Humans.'\n __url__ = 'http://python-requests.org'\n-__version__ = '2.19.1'\n-__build__ = 0x021901\n+__version__ = '2.20.0'\n+__build__ = 0x022000\n __author__ = 'Kenneth Reitz'\n __author_email__ = 'me@kennethreitz.org'\n __license__ = 'Apache 2.0'\n\n@@ -44,7 +44,7 @@ packages = ['requests']\n requires = [\n     'chardet>=3.0.2,<3.1.0',\n     'idna>=2.5,<2.8',\n-    'urllib3>=1.21.1,<1.24',\n+    'urllib3>=1.21.1,<1.25',\n     'certifi>=2017.4.17'\n \n ]\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#ea9436a5d6a5934a906e91202349aabf9af75d15", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 24 | Lines Deleted: 2 | Files Changed: 3 | Hunks: 5 | Methods Changed: 2 | Complexity Δ (Sum/Max): 4/3 | Churn Δ: 26 | Churn Cumulative: 11213 | Contributors (this commit): 204 | Commits (past 90d): 10 | Contributors (cumulative): 261 | DMM Complexity: 0.3333333333333333\n\nDIFF:\n@@ -19,7 +19,7 @@ from .cookies import (\n from .models import Request, PreparedRequest, DEFAULT_REDIRECT_LIMIT\n from .hooks import default_hooks, dispatch_hook\n from ._internal_utils import to_native_string\n-from .utils import to_key_val_list, default_headers\n+from .utils import to_key_val_list, default_headers, DEFAULT_PORTS\n from .exceptions import (\n     TooManyRedirects, InvalidSchema, ChunkedEncodingError, ContentDecodingError)\n \n@@ -128,8 +128,17 @@ class SessionRedirectMixin(object):\n         if (old_parsed.scheme == 'http' and old_parsed.port in (80, None)\n                 and new_parsed.scheme == 'https' and new_parsed.port in (443, None)):\n             return False\n+\n+        # Handle default port usage corresponding to scheme.\n+        changed_port = old_parsed.port != new_parsed.port\n+        changed_scheme = old_parsed.scheme != new_parsed.scheme\n+        default_port = (DEFAULT_PORTS.get(old_parsed.scheme, None), None)\n+        if (not changed_scheme and old_parsed.port in default_port\n+                and new_parsed.port in default_port):\n+            return False\n+\n         # Standard case: root URI must match\n-        return old_parsed.port != new_parsed.port or old_parsed.scheme != new_parsed.scheme\n+        return changed_port or changed_scheme\n \n     def resolve_redirects(self, resp, req, stream=False, timeout=None,\n                           verify=True, cert=None, proxies=None, yield_requests=False, **adapter_kwargs):\n\n@@ -38,6 +38,8 @@ NETRC_FILES = ('.netrc', '_netrc')\n \n DEFAULT_CA_BUNDLE_PATH = certs.where()\n \n+DEFAULT_PORTS = {'http': 80, 'https': 443}\n+\n \n if sys.platform == 'win32':\n     # provide a proxy_bypass version on Windows without DNS lookups\n\n@@ -1611,6 +1611,17 @@ class TestRequests:\n         s = requests.Session()\n         assert s.should_strip_auth('http://example.com:1234/foo', 'https://example.com:4321/bar')\n \n+    @pytest.mark.parametrize(\n+        'old_uri, new_uri', (\n+            ('https://example.com:443/foo', 'https://example.com/bar'),\n+            ('http://example.com:80/foo', 'http://example.com/bar'),\n+            ('https://example.com/foo', 'https://example.com:443/bar'),\n+            ('http://example.com/foo', 'http://example.com:80/bar')\n+        ))\n+    def test_should_strip_auth_default_port(self, old_uri, new_uri):\n+        s = requests.Session()\n+        assert not s.should_strip_auth(old_uri, new_uri)\n+\n     def test_manual_redirect_with_partial_body_read(self, httpbin):\n         s = requests.Session()\n         r1 = s.get(httpbin('redirect/2'), allow_redirects=False, stream=True)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#ccbffe5a533182e721be2e04bb201039e73bbdae", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 3035 | Contributors (this commit): 93 | Commits (past 90d): 4 | Contributors (cumulative): 93 | DMM Complexity: None\n\nDIFF:\n@@ -264,7 +264,7 @@ def from_key_val_list(value):\n         >>> from_key_val_list([('key', 'val')])\n         OrderedDict([('key', 'val')])\n         >>> from_key_val_list('string')\n-        ValueError: need more than 1 value to unpack\n+        ValueError: cannot encode objects that are not 2-tuples\n         >>> from_key_val_list({'key': 'val'})\n         OrderedDict([('key', 'val')])\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#a7aa86a933523a31e426d2e2aab01247c65ea87e", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 2 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 9766 | Contributors (this commit): 185 | Commits (past 90d): 2 | Contributors (cumulative): 185 | DMM Complexity: None\n\nDIFF:\n@@ -781,7 +781,7 @@ class Response(object):\n \n         return chunks\n \n-    def iter_lines(self, chunk_size=ITER_CHUNK_SIZE, decode_unicode=None, delimiter=None):\n+    def iter_lines(self, chunk_size=ITER_CHUNK_SIZE, decode_unicode=False, delimiter=None):\n         \"\"\"Iterates over the response data, one line at a time.  When\n         stream=True is set on the request, this avoids reading the\n         content at once into memory for large responses.\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#6cfbe1aedd56f8c2f9ff8b968efe65b22669795b", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 124 | Contributors (this commit): 3 | Commits (past 90d): 2 | Contributors (cumulative): 3 | DMM Complexity: None\n\nDIFF:\n@@ -5,8 +5,8 @@\n __title__ = 'requests'\n __description__ = 'Python HTTP for Humans.'\n __url__ = 'http://python-requests.org'\n-__version__ = '2.20.0'\n-__build__ = 0x022000\n+__version__ = '2.20.1'\n+__build__ = 0x022001\n __author__ = 'Kenneth Reitz'\n __author_email__ = 'me@kennethreitz.org'\n __license__ = 'Apache 2.0'\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#8761e9736f7d5508a5547cdf3adecbe0b7306278", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 698 | Contributors (this commit): 30 | Commits (past 90d): 5 | Contributors (cumulative): 30 | DMM Complexity: None\n\nDIFF:\n@@ -43,7 +43,7 @@ packages = ['requests']\n \n requires = [\n     'chardet>=3.0.2,<3.1.0',\n-    'idna>=2.5,<2.8',\n+    'idna>=2.5,<2.9',\n     'urllib3>=1.21.1,<1.25',\n     'certifi>=2017.4.17'\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#5a1e738ea9c399c3f59977f2f98b083986d6037a", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 128 | Contributors (this commit): 3 | Commits (past 90d): 3 | Contributors (cumulative): 3 | DMM Complexity: None\n\nDIFF:\n@@ -5,8 +5,8 @@\n __title__ = 'requests'\n __description__ = 'Python HTTP for Humans.'\n __url__ = 'http://python-requests.org'\n-__version__ = '2.20.1'\n-__build__ = 0x022001\n+__version__ = '2.21.0'\n+__build__ = 0x022100\n __author__ = 'Kenneth Reitz'\n __author_email__ = 'me@kennethreitz.org'\n __license__ = 'Apache 2.0'\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#c4d76800e8917c3fda10cb1f2dee22c8219de3e6", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 2 | Methods Changed: 2 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 1239 | Contributors (this commit): 50 | Commits (past 90d): 2 | Contributors (cumulative): 50 | DMM Complexity: None\n\nDIFF:\n@@ -19,7 +19,7 @@ def request(method, url, **kwargs):\n     :param method: method for the new :class:`Request` object.\n     :param url: URL for the new :class:`Request` object.\n     :param params: (optional) Dictionary, list of tuples or bytes to send\n-        in the body of the :class:`Request`.\n+        in the query string for the :class:`Request`.\n     :param data: (optional) Dictionary, list of tuples, bytes, or file-like\n         object to send in the body of the :class:`Request`.\n     :param json: (optional) A JSON serializable Python object to send in the body of the :class:`Request`.\n@@ -65,7 +65,7 @@ def get(url, params=None, **kwargs):\n \n     :param url: URL for the new :class:`Request` object.\n     :param params: (optional) Dictionary, list of tuples or bytes to send\n-        in the body of the :class:`Request`.\n+        in the query string for the :class:`Request`.\n     :param \\*\\*kwargs: Optional arguments that ``request`` takes.\n     :return: :class:`Response <Response>` object\n     :rtype: requests.Response\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#ad9400ecfe75cfb704a7440f2a28055f50a550ca", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 10 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 3 | Methods Changed: 2 | Complexity Δ (Sum/Max): 2/2 | Churn Δ: 11 | Churn Cumulative: 4691 | Contributors (this commit): 73 | Commits (past 90d): 4 | Contributors (cumulative): 73 | DMM Complexity: 1.0\n\nDIFF:\n@@ -9,6 +9,7 @@ import pickle\n import collections\n import contextlib\n import warnings\n+import re\n \n import io\n import requests\n@@ -2418,9 +2419,17 @@ class TestPreparingURLs(object):\n         )\n     )\n     def test_preparing_url(self, url, expected):\n+\n+        def normalize_percent_encode(x):\n+            # Helper function that normalizes equivalent \n+            # percent-encoded bytes before comparisons\n+            for c in re.findall(r'%[a-fA-F0-9]{2}', x):\n+                x = x.replace(c, c.upper())\n+            return x\n+        \n         r = requests.Request('GET', url=url)\n         p = r.prepare()\n-        assert p.url == expected\n+        assert normalize_percent_encode(p.url) == expected\n \n     @pytest.mark.parametrize(\n         'url',\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#2aab9a9a39fdfdfbd37cc8494259cb0ebb36a5e9", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 13 | Lines Deleted: 7 | Files Changed: 5 | Hunks: 11 | Methods Changed: 2 | Complexity Δ (Sum/Max): -2/0 | Churn Δ: 20 | Churn Cumulative: 13459 | Contributors (this commit): 216 | Commits (past 90d): 16 | Contributors (cumulative): 304 | DMM Complexity: None\n\nDIFF:\n@@ -43,6 +43,7 @@ if is_py2:\n     import cookielib\n     from Cookie import Morsel\n     from StringIO import StringIO\n+    # Keep OrderedDict for backwards compatibility.\n     from collections import Callable, Mapping, MutableMapping, OrderedDict\n \n \n@@ -59,6 +60,7 @@ elif is_py3:\n     from http import cookiejar as cookielib\n     from http.cookies import Morsel\n     from io import StringIO\n+    # Keep OrderedDict for backwards compatibility.\n     from collections import OrderedDict\n     from collections.abc import Callable, Mapping, MutableMapping\n \n\n@@ -11,9 +11,10 @@ import os\n import sys\n import time\n from datetime import timedelta\n+from collections import OrderedDict\n \n from .auth import _basic_auth_str\n-from .compat import cookielib, is_py3, OrderedDict, urljoin, urlparse, Mapping\n+from .compat import cookielib, is_py3, urljoin, urlparse, Mapping\n from .cookies import (\n     cookiejar_from_dict, extract_cookies_to_jar, RequestsCookieJar, merge_cookies)\n from .models import Request, PreparedRequest, DEFAULT_REDIRECT_LIMIT\n\n@@ -7,7 +7,9 @@ requests.structures\n Data structures that power Requests.\n \"\"\"\n \n-from .compat import OrderedDict, Mapping, MutableMapping\n+from collections import OrderedDict\n+\n+from .compat import Mapping, MutableMapping\n \n \n class CaseInsensitiveDict(MutableMapping):\n\n@@ -19,6 +19,7 @@ import sys\n import tempfile\n import warnings\n import zipfile\n+from collections import OrderedDict\n \n from .__version__ import __version__\n from . import certs\n@@ -26,7 +27,7 @@ from . import certs\n from ._internal_utils import to_native_string\n from .compat import parse_http_list as _parse_list_header\n from .compat import (\n-    quote, urlparse, bytes, str, OrderedDict, unquote, getproxies,\n+    quote, urlparse, bytes, str, unquote, getproxies,\n     proxy_bypass, urlunparse, basestring, integer_types, is_py3,\n     proxy_bypass_environment, getproxies_environment, Mapping)\n from .cookies import cookiejar_from_dict\n\n@@ -17,7 +17,7 @@ from requests.adapters import HTTPAdapter\n from requests.auth import HTTPDigestAuth, _basic_auth_str\n from requests.compat import (\n     Morsel, cookielib, getproxies, str, urlparse,\n-    builtin_str, OrderedDict)\n+    builtin_str)\n from requests.cookies import (\n     cookiejar_from_dict, morsel_to_cookie)\n from requests.exceptions import (\n@@ -129,7 +129,7 @@ class TestRequests:\n         assert request.url == expected\n \n     def test_params_original_order_is_preserved_by_default(self):\n-        param_ordered_dict = OrderedDict((('z', 1), ('a', 1), ('k', 1), ('d', 1)))\n+        param_ordered_dict = collections.OrderedDict((('z', 1), ('a', 1), ('k', 1), ('d', 1)))\n         session = requests.Session()\n         request = requests.Request('GET', 'http://example.com/', params=param_ordered_dict)\n         prep = session.prepare_request(request)\n@@ -445,11 +445,11 @@ class TestRequests:\n     def test_headers_preserve_order(self, httpbin):\n         \"\"\"Preserve order when headers provided as OrderedDict.\"\"\"\n         ses = requests.Session()\n-        ses.headers = OrderedDict()\n+        ses.headers = collections.OrderedDict()\n         ses.headers['Accept-Encoding'] = 'identity'\n         ses.headers['First'] = '1'\n         ses.headers['Second'] = '2'\n-        headers = OrderedDict([('Third', '3'), ('Fourth', '4')])\n+        headers = collections.OrderedDict([('Third', '3'), ('Fourth', '4')])\n         headers['Fifth'] = '5'\n         headers['Second'] = '222'\n         req = requests.Request('GET', httpbin('get'), headers=headers)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#f507a3ef12ce6e100f68741f68d39bcaf8a70c7a", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 1 | Churn Cumulative: 1461 | Contributors (this commit): 27 | Commits (past 90d): 1 | Contributors (cumulative): 27 | DMM Complexity: None\n\nDIFF:\n@@ -332,6 +332,7 @@ class TestGuessJSONUTF:\n \n     @pytest.mark.parametrize(\n         ('encoding', 'expected'), (\n+            ('utf-8-sig', 'utf-8'),\n             ('utf-16-be', 'utf-16'),\n             ('utf-16-le', 'utf-16'),\n             ('utf-32-be', 'utf-32'),\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#9e27326d6843e7c26e9847776159eeb68a999675", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 31 | Lines Deleted: 1 | Files Changed: 2 | Hunks: 2 | Methods Changed: 2 | Complexity Δ (Sum/Max): 2/2 | Churn Δ: 32 | Churn Cumulative: 1709 | Contributors (this commit): 29 | Commits (past 90d): 3 | Contributors (cumulative): 33 | DMM Complexity: 1.0\n\nDIFF:\n@@ -56,6 +56,36 @@ class TestTestServer:\n             assert r.text == u'roflol'\n             assert r.headers['Content-Length'] == '6'\n \n+    def test_text_bom_response(self):\n+        \"\"\"the text_response_server sends the given text with UTF-8 BOM\"\"\"\n+        server = Server.text_response_server(\n+            \"HTTP/1.1 200 OK\\r\\n\" +\n+            \"Content-Type: text/html; charset=UTF-8\\r\\n\" +\n+            u'\\r\\n\\ufeff<doctype html><html><body>ジェーピーニック</body></html>'\n+        )\n+\n+        with server as (host, port):\n+            r = requests.get('http://{}:{}'.format(host, port))\n+\n+            assert r.status_code == 200\n+            assert r.text == u'<doctype html><html><body>ジェーピーニック</body></html>'\n+            assert r.headers['Content-Type'] == 'text/html; charset=UTF-8'\n+\n+    def test_json_bom_response(self):\n+        \"\"\"the text_response_server sends the given JSON with UTF-8 BOM\"\"\"\n+        server = Server.text_response_server(\n+            \"HTTP/1.1 200 OK\\r\\n\" +\n+            \"Content-Type: application/json; charset=utf-8\\r\\n\" +\n+            u'\\r\\n\\ufeff{\"success\": true}'\n+        )\n+\n+        with server as (host, port):\n+            r = requests.get('http://{}:{}'.format(host, port))\n+\n+            assert r.status_code == 200\n+            assert r.json() == {'success': True}\n+            assert r.headers['Content-Type'] == 'application/json; charset=utf-8'\n+\n     def test_basic_response(self):\n         \"\"\"the basic response server returns an empty http response\"\"\"\n         with Server.basic_response_server() as (host, port):\n\n@@ -332,7 +332,7 @@ class TestGuessJSONUTF:\n \n     @pytest.mark.parametrize(\n         ('encoding', 'expected'), (\n-            ('utf-8-sig', 'utf-8'),\n+            ('utf-8-sig', 'utf-8-sig'),\n             ('utf-16-be', 'utf-16'),\n             ('utf-16-le', 'utf-16'),\n             ('utf-32-be', 'utf-32'),\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#19cff44ec1b8eeec99459b504a681aa440f6344c", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 3 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 3 | Churn Cumulative: 9769 | Contributors (this commit): 186 | Commits (past 90d): 1 | Contributors (cumulative): 186 | DMM Complexity: 1.0\n\nDIFF:\n@@ -855,6 +855,9 @@ class Response(object):\n         # Fallback to auto-detected encoding.\n         if self.encoding is None:\n             encoding = self.apparent_encoding\n+        # Forcefully remove BOM from UTF-8\n+        elif self.encoding.lower() == 'utf-8':\n+            encoding = 'utf-8-sig'\n \n         # Decode unicode from given encoding.\n         try:\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#fbe48fbb7c5b96cde3a16453311e45f723516afd", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 8 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 3 | Methods Changed: 2 | Complexity Δ (Sum/Max): 2/2 | Churn Δ: 9 | Churn Cumulative: 3512 | Contributors (this commit): 98 | Commits (past 90d): 2 | Contributors (cumulative): 98 | DMM Complexity: 0.75\n\nDIFF:\n@@ -94,6 +94,10 @@ def merge_hooks(request_hooks, session_hooks, dict_class=OrderedDict):\n \n class SessionRedirectMixin(object):\n \n+    def __init__(self):\n+        #: A list of domains that will be excluded from auth stripping\n+        self.trusted_domains = []\n+\n     def get_redirect_target(self, resp):\n         \"\"\"Receives a Response. Returns a redirect URI or ``None``\"\"\"\n         # Due to the nature of how requests processes redirects this method will\n@@ -119,7 +123,8 @@ class SessionRedirectMixin(object):\n         \"\"\"Decide whether Authorization header should be removed when redirecting\"\"\"\n         old_parsed = urlparse(old_url)\n         new_parsed = urlparse(new_url)\n-        if old_parsed.hostname != new_parsed.hostname:\n+        if (old_parsed.hostname != new_parsed.hostname\n+                and new_parsed.hostname not in self.trusted_domains):\n             return True\n         # Special case: allow http -> https redirect when using the standard\n         # ports. This isn't specified by RFC 7235, but is kept to avoid\n@@ -417,6 +422,8 @@ class Session(SessionRedirectMixin):\n         self.mount('https://', HTTPAdapter())\n         self.mount('http://', HTTPAdapter())\n \n+        super().__init__()\n+\n     def __enter__(self):\n         return self\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#177f4dd2a497e3db0e9d62ed0958183f4e9609c9", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 15 | Lines Deleted: 16 | Files Changed: 6 | Hunks: 10 | Methods Changed: 3 | Complexity Δ (Sum/Max): -3/0 | Churn Δ: 31 | Churn Cumulative: 18592 | Contributors (this commit): 330 | Commits (past 90d): 11 | Contributors (cumulative): 467 | DMM Complexity: None\n\nDIFF:\n@@ -9,29 +9,22 @@\n Requests HTTP Library\n ~~~~~~~~~~~~~~~~~~~~~\n \n-Requests is an HTTP library, written in Python, for human beings. Basic GET\n-usage:\n+Requests is an HTTP library, written in Python, for human beings.\n+Basic GET usage:\n \n    >>> import requests\n    >>> r = requests.get('https://www.python.org')\n    >>> r.status_code\n    200\n-   >>> 'Python is a programming language' in r.content\n+   >>> b'Python is a programming language' in r.content\n    True\n \n-... or POST:\n+Basic POST usage:\n \n    >>> payload = dict(key1='value1', key2='value2')\n    >>> r = requests.post('https://httpbin.org/post', data=payload)\n-   >>> print(r.text)\n-   {\n-     ...\n-     \"form\": {\n-       \"key2\": \"value2\",\n-       \"key1\": \"value1\"\n-     },\n-     ...\n-   }\n+   >>> r.json()\n+   {'args': {}, 'data': '', 'files': {}, 'form': {'key1': 'value1', 'key2': 'value2'}, 'headers': {'Accept': '*/*', 'Accept-Encoding': 'gzip, deflate', 'Connection': 'close', 'Content-Length': '23', 'Content-Type': 'application/x-www-form-urlencoded', 'Host': 'httpbin.org', 'User-Agent': 'python-requests/...'}, 'json': None, 'origin': '...', 'url': 'https://httpbin.org/post'}\n \n The other HTTP methods are supported - see `requests.api`. Full documentation\n is at <http://python-requests.org>.\n\n@@ -50,6 +50,7 @@ def request(method, url, **kwargs):\n \n       >>> import requests\n       >>> req = requests.request('GET', 'https://httpbin.org/get')\n+      >>> req\n       <Response [200]>\n     \"\"\"\n \n\n@@ -280,6 +280,7 @@ class PreparedRequest(RequestEncodingMixin, RequestHooksMixin):\n       >>> import requests\n       >>> req = requests.Request('GET', 'https://httpbin.org/get')\n       >>> r = req.prepare()\n+      >>> r\n       <PreparedRequest [GET]>\n \n       >>> s = requests.Session()\n\n@@ -352,7 +352,7 @@ class Session(SessionRedirectMixin):\n     Or as a context manager::\n \n       >>> with requests.Session() as s:\n-      >>>     s.get('https://httpbin.org/get')\n+      ...     s.get('https://httpbin.org/get')\n       <Response [200]>\n     \"\"\"\n \n\n@@ -4,7 +4,7 @@ r\"\"\"\n The ``codes`` object defines a mapping from common names for HTTP statuses\n to their numerical codes, accessible either as attributes or as dictionary\n items.\n-\n+>>> import requests\n >>> requests.codes['temporary_redirect']\n 307\n >>> requests.codes.teapot\n\n@@ -266,6 +266,8 @@ def from_key_val_list(value):\n         >>> from_key_val_list([('key', 'val')])\n         OrderedDict([('key', 'val')])\n         >>> from_key_val_list('string')\n+        Traceback (most recent call last):\n+        ...\n         ValueError: cannot encode objects that are not 2-tuples\n         >>> from_key_val_list({'key': 'val'})\n         OrderedDict([('key', 'val')])\n@@ -292,7 +294,9 @@ def to_key_val_list(value):\n         >>> to_key_val_list({'key': 'val'})\n         [('key', 'val')]\n         >>> to_key_val_list('string')\n-        ValueError: cannot encode objects that are not 2-tuples.\n+        Traceback (most recent call last):\n+        ...\n+        ValueError: cannot encode objects that are not 2-tuples\n \n     :rtype: list\n     \"\"\"\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
