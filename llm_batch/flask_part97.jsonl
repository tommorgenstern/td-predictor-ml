{"custom_id": "flask#c2920e2bd98cdb3dcccc2868c25b695d4780c620", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 15 | Lines Deleted: 1 | Files Changed: 2 | Hunks: 2 | Methods Changed: 2 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 16 | Churn Cumulative: 2476 | Contributors (this commit): 17 | Commits (past 90d): 22 | Contributors (cumulative): 20 | DMM Complexity: 0.8888888888888888\n\nDIFF:\n@@ -274,7 +274,8 @@ class Blueprint(Scaffold):\n                 first_registration = False\n \n         name_prefix = options.get(\"name_prefix\", \"\")\n-        name = f\"{name_prefix}.{self.name}\".lstrip(\".\")\n+        self_name = options.get(\"name\", self.name)\n+        name = f\"{name_prefix}.{self_name}\".lstrip(\".\")\n \n         if name in app.blueprints and app.blueprints[name] is not self:\n             raise ValueError(\n\n@@ -866,3 +866,16 @@ def test_nesting_url_prefixes(\n \n     response = client.get(\"/parent/child/\")\n     assert response.status_code == 200\n+\n+\n+def test_unique_blueprint_names(app, client) -> None:\n+    bp = flask.Blueprint(\"bp\", __name__)\n+    bp2 = flask.Blueprint(\"bp\", __name__)\n+\n+    app.register_blueprint(bp)\n+    app.register_blueprint(bp)  # same name, same object, no error\n+\n+    with pytest.raises(ValueError):\n+        app.register_blueprint(bp2)  # same name, different object\n+\n+    app.register_blueprint(bp2, name=\"alt\")  # different name\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#67b0b7e30d2304f628e966896748032022ac0257", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 53 | Lines Deleted: 27 | Files Changed: 3 | Hunks: 13 | Methods Changed: 5 | Complexity Δ (Sum/Max): -78/0 | Churn Δ: 80 | Churn Cumulative: 3137 | Contributors (this commit): 19 | Commits (past 90d): 39 | Contributors (cumulative): 25 | DMM Complexity: 1.0\n\nDIFF:\n@@ -36,6 +36,7 @@ from .globals import _request_ctx_stack\n from .globals import g\n from .globals import request\n from .globals import session\n+from .helpers import _split_blueprint_path\n from .helpers import get_debug_flag\n from .helpers import get_env\n from .helpers import get_flashed_messages\n@@ -1790,13 +1791,11 @@ class Flask(Scaffold):\n         funcs: t.Iterable[URLDefaultCallable] = self.url_default_functions[None]\n \n         if \".\" in endpoint:\n-            bps: t.List[str] = [endpoint.rsplit(\".\", 1)[0]]\n-\n-            while \".\" in bps[-1]:\n-                bps.append(bps[-1].rpartition(\".\")[0])\n-\n-            for bp in bps:\n-                funcs = chain(funcs, self.url_default_functions[bp])\n+            # This is called by url_for, which can be called outside a\n+            # request, can't use request.blueprints.\n+            bps = _split_blueprint_path(endpoint.rpartition(\".\")[0])\n+            bp_funcs = chain.from_iterable(self.url_default_functions[bp] for bp in bps)\n+            funcs = chain(funcs, bp_funcs)\n \n         for func in funcs:\n             func(endpoint, values)\n\n@@ -6,6 +6,7 @@ import typing as t\n import warnings\n from datetime import datetime\n from datetime import timedelta\n+from functools import lru_cache\n from functools import update_wrapper\n from threading import RLock\n \n@@ -821,3 +822,13 @@ def is_ip(value: str) -> bool:\n             return True\n \n     return False\n+\n+\n+@lru_cache(maxsize=None)\n+def _split_blueprint_path(name: str) -> t.List[str]:\n+    out: t.List[str] = [name]\n+\n+    if \".\" in name:\n+        out.extend(_split_blueprint_path(name.rpartition(\".\")[0]))\n+\n+    return out\n\n@@ -1,12 +1,12 @@\n import typing as t\n \n from werkzeug.exceptions import BadRequest\n-from werkzeug.utils import cached_property\n from werkzeug.wrappers import Request as RequestBase\n from werkzeug.wrappers import Response as ResponseBase\n \n from . import json\n from .globals import current_app\n+from .helpers import _split_blueprint_path\n \n if t.TYPE_CHECKING:\n     import typing_extensions as te\n@@ -60,38 +60,54 @@ class Request(RequestBase):\n \n     @property\n     def endpoint(self) -> t.Optional[str]:\n-        \"\"\"The endpoint that matched the request.  This in combination with\n-        :attr:`view_args` can be used to reconstruct the same or a\n-        modified URL.  If an exception happened when matching, this will\n-        be ``None``.\n+        \"\"\"The endpoint that matched the request URL.\n+\n+        This will be ``None`` if matching failed or has not been\n+        performed yet.\n+\n+        This in combination with :attr:`view_args` can be used to\n+        reconstruct the same URL or a modified URL.\n         \"\"\"\n         if self.url_rule is not None:\n             return self.url_rule.endpoint\n-        else:\n+\n         return None\n \n     @property\n     def blueprint(self) -> t.Optional[str]:\n-        \"\"\"The name of the current blueprint\"\"\"\n-        if self.url_rule and \".\" in self.url_rule.endpoint:\n-            return self.url_rule.endpoint.rsplit(\".\", 1)[0]\n-        else:\n+        \"\"\"The registered name of the current blueprint.\n+\n+        This will be ``None`` if the endpoint is not part of a\n+        blueprint, or if URL matching failed or has not been performed\n+        yet.\n+\n+        This does not necessarily match the name the blueprint was\n+        created with. It may have been nested, or registered with a\n+        different name.\n+        \"\"\"\n+        endpoint = self.endpoint\n+\n+        if endpoint is not None and \".\" in endpoint:\n+            return endpoint.rpartition(\".\")[0]\n+\n         return None\n \n-    @cached_property\n+    @property\n     def blueprints(self) -> t.List[str]:\n-        \"\"\"The names of the current blueprint upwards through parent\n-        blueprints.\n+        \"\"\"The registered names of the current blueprint upwards through\n+        parent blueprints.\n+\n+        This will be an empty list if there is no current blueprint, or\n+        if URL matching failed.\n+\n+        .. versionadded:: 2.0.1\n         \"\"\"\n-        if self.blueprint is None:\n+        name = self.blueprint\n+\n+        if name is None:\n             return []\n \n-        bps: t.List[str] = [self.blueprint]\n-\n-        while \".\" in bps[-1]:\n-            bps.append(bps[-1].rpartition(\".\")[0])\n-\n-        return bps\n+        return _split_blueprint_path(name)\n \n     def _load_form_data(self) -> None:\n         RequestBase._load_form_data(self)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#63b306743fccdd52079034e82cbbeee182a4361d", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 23 | Lines Deleted: 0 | Files Changed: 2 | Hunks: 3 | Methods Changed: 3 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 23 | Churn Cumulative: 2259 | Contributors (this commit): 15 | Commits (past 90d): 36 | Contributors (cumulative): 19 | DMM Complexity: 0.5217391304347826\n\nDIFF:\n@@ -1019,6 +1019,12 @@ class Flask(Scaffold):\n             :class:`~flask.blueprints.BlueprintSetupState`. They can be\n             accessed in :meth:`~flask.Blueprint.record` callbacks.\n \n+        .. versionchanged:: 2.0.1\n+            The ``name`` option can be used to change the (pre-dotted)\n+            name the blueprint is registered with. This allows the same\n+            blueprint to be registered multiple times with unique names\n+            for ``url_for``.\n+\n         .. versionadded:: 0.7\n         \"\"\"\n         blueprint.register(self, options)\n\n@@ -252,6 +252,12 @@ class Blueprint(Scaffold):\n         arguments passed to this method will override the defaults set\n         on the blueprint.\n \n+        .. versionchanged:: 2.0.1\n+            The ``name`` option can be used to change the (pre-dotted)\n+            name the blueprint is registered with. This allows the same\n+            blueprint to be registered multiple times with unique names\n+            for ``url_for``.\n+\n         .. versionadded:: 2.0\n         \"\"\"\n         self._blueprints.append((blueprint, options))\n@@ -266,6 +272,17 @@ class Blueprint(Scaffold):\n             with.\n         :param options: Keyword arguments forwarded from\n             :meth:`~Flask.register_blueprint`.\n+\n+        .. versionchanged:: 2.0.1\n+            Nested blueprints are registered with their dotted name.\n+            This allows different blueprints with the same name to be\n+            nested at different locations.\n+\n+        .. versionchanged:: 2.0.1\n+            The ``name`` option can be used to change the (pre-dotted)\n+            name the blueprint is registered with. This allows the same\n+            blueprint to be registered multiple times with unique names\n+            for ``url_for``.\n         \"\"\"\n         first_registration = True\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#9409be6e34e153bfdb0aac2c9eb7f60110109172", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 30 | Lines Deleted: 14 | Files Changed: 2 | Hunks: 8 | Methods Changed: 3 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 44 | Churn Cumulative: 2537 | Contributors (this commit): 17 | Commits (past 90d): 25 | Contributors (cumulative): 20 | DMM Complexity: 0.14285714285714285\n\nDIFF:\n@@ -283,22 +283,34 @@ class Blueprint(Scaffold):\n             name the blueprint is registered with. This allows the same\n             blueprint to be registered multiple times with unique names\n             for ``url_for``.\n+\n+        .. versionchanged:: 2.0.1\n+            Registering the same blueprint with the same name multiple\n+            times is deprecated and will become an error in Flask 2.1.\n         \"\"\"\n-        first_registration = True\n-\n-        for blueprint in app.blueprints.values():\n-            if blueprint is self:\n-                first_registration = False\n-\n+        first_registration = not any(bp is self for bp in app.blueprints.values())\n         name_prefix = options.get(\"name_prefix\", \"\")\n         self_name = options.get(\"name\", self.name)\n         name = f\"{name_prefix}.{self_name}\".lstrip(\".\")\n \n-        if name in app.blueprints and app.blueprints[name] is not self:\n+        if name in app.blueprints:\n+            existing_at = f\" '{name}'\" if self_name != name else \"\"\n+\n+            if app.blueprints[name] is not self:\n                 raise ValueError(\n-                f\"Blueprint name '{self.name}' \"\n-                f\"is already registered by {app.blueprints[self.name]}. \"\n-                \"Blueprints must have unique names.\"\n+                    f\"The name '{self_name}' is already registered for\"\n+                    f\" a different blueprint{existing_at}. Use 'name='\"\n+                    \" to provide a unique name.\"\n+                )\n+            else:\n+                import warnings\n+\n+                warnings.warn(\n+                    f\"The name '{self_name}' is already registered for\"\n+                    f\" this blueprint{existing_at}. Use 'name=' to\"\n+                    \" provide a unique name. This will become an error\"\n+                    \" in Flask 2.1.\",\n+                    stacklevel=4,\n                 )\n \n         app.blueprints[name] = self\n\n@@ -140,7 +140,7 @@ def test_blueprint_url_defaults(app, client):\n         return str(bar)\n \n     app.register_blueprint(bp, url_prefix=\"/1\", url_defaults={\"bar\": 23})\n-    app.register_blueprint(bp, url_prefix=\"/2\", url_defaults={\"bar\": 19})\n+    app.register_blueprint(bp, name=\"test2\", url_prefix=\"/2\", url_defaults={\"bar\": 19})\n \n     assert client.get(\"/1/foo\").data == b\"23/42\"\n     assert client.get(\"/2/foo\").data == b\"19/42\"\n@@ -873,9 +873,13 @@ def test_unique_blueprint_names(app, client) -> None:\n     bp2 = flask.Blueprint(\"bp\", __name__)\n \n     app.register_blueprint(bp)\n-    app.register_blueprint(bp)  # same name, same object, no error\n+\n+    with pytest.warns(UserWarning):\n+        app.register_blueprint(bp)  # same bp, same name, warning\n+\n+    app.register_blueprint(bp, name=\"again\")  # same bp, different name, ok\n \n     with pytest.raises(ValueError):\n-        app.register_blueprint(bp2)  # same name, different object\n+        app.register_blueprint(bp2)  # different bp, same name, error\n \n-    app.register_blueprint(bp2, name=\"alt\")  # different name\n+    app.register_blueprint(bp2, name=\"alt\")  # different bp, different name, ok\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#714b0a467acab54091d8aeb73403d808abfbcf5b", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 8 | Lines Deleted: 0 | Files Changed: 2 | Hunks: 2 | Methods Changed: 2 | Complexity Δ (Sum/Max): 2/1 | Churn Δ: 8 | Churn Cumulative: 2545 | Contributors (this commit): 17 | Commits (past 90d): 27 | Contributors (cumulative): 20 | DMM Complexity: 1.0\n\nDIFF:\n@@ -260,6 +260,8 @@ class Blueprint(Scaffold):\n \n         .. versionadded:: 2.0\n         \"\"\"\n+        if blueprint is self:\n+            raise ValueError(\"Cannot register a blueprint on itself\")\n         self._blueprints.append((blueprint, options))\n \n     def register(self, app: \"Flask\", options: dict) -> None:\n\n@@ -883,3 +883,9 @@ def test_unique_blueprint_names(app, client) -> None:\n         app.register_blueprint(bp2)  # different bp, same name, error\n \n     app.register_blueprint(bp2, name=\"alt\")  # different bp, different name, ok\n+\n+\n+def test_self_registration(app, client) -> None:\n+    bp = flask.Blueprint(\"bp\", __name__)\n+    with pytest.raises(ValueError):\n+        bp.register_blueprint(bp)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#3257b7574e7f010686a617197e0fb4596986f7f7", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 25 | Lines Deleted: 1 | Files Changed: 2 | Hunks: 4 | Methods Changed: 5 | Complexity Δ (Sum/Max): 3/3 | Churn Δ: 26 | Churn Cumulative: 2571 | Contributors (this commit): 17 | Commits (past 90d): 29 | Contributors (cumulative): 20 | DMM Complexity: 1.0\n\nDIFF:\n@@ -67,6 +67,7 @@ class BlueprintSetupState:\n         #: blueprint.\n         self.url_prefix = url_prefix\n \n+        self.name = self.options.get(\"name\", blueprint.name)\n         self.name_prefix = self.options.get(\"name_prefix\", \"\")\n \n         #: A dictionary with URL defaults that is added to each and every\n@@ -96,9 +97,10 @@ class BlueprintSetupState:\n         defaults = self.url_defaults\n         if \"defaults\" in options:\n             defaults = dict(defaults, **options.pop(\"defaults\"))\n+\n         self.app.add_url_rule(\n             rule,\n-            f\"{self.name_prefix}.{self.blueprint.name}.{endpoint}\".lstrip(\".\"),\n+            f\"{self.name_prefix}.{self.name}.{endpoint}\".lstrip(\".\"),\n             view_func,\n             defaults=defaults,\n             **options,\n\n@@ -889,3 +889,25 @@ def test_self_registration(app, client) -> None:\n     bp = flask.Blueprint(\"bp\", __name__)\n     with pytest.raises(ValueError):\n         bp.register_blueprint(bp)\n+\n+\n+def test_blueprint_renaming(app, client) -> None:\n+    bp = flask.Blueprint(\"bp\", __name__)\n+    bp2 = flask.Blueprint(\"bp2\", __name__)\n+\n+    @bp.get(\"/\")\n+    def index():\n+        return flask.request.endpoint\n+\n+    @bp2.get(\"/\")\n+    def index2():\n+        return flask.request.endpoint\n+\n+    bp.register_blueprint(bp2, url_prefix=\"/a\", name=\"sub\")\n+    app.register_blueprint(bp, url_prefix=\"/a\")\n+    app.register_blueprint(bp, url_prefix=\"/b\", name=\"alt\")\n+\n+    assert client.get(\"/a/\").data == b\"bp.index\"\n+    assert client.get(\"/b/\").data == b\"alt.index\"\n+    assert client.get(\"/a/a/\").data == b\"bp.sub.index2\"\n+    assert client.get(\"/b/a/\").data == b\"alt.sub.index2\"\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#7ab934f6bc2380a322c77d92c0b6cfd10b7de991", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 4 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 1 | Methods Changed: 2 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 6 | Churn Cumulative: 1465 | Contributors (this commit): 11 | Commits (past 90d): 18 | Contributors (cumulative): 11 | DMM Complexity: 1.0\n\nDIFF:\n@@ -64,8 +64,10 @@ def get_load_dotenv(default: bool = True) -> bool:\n \n \n def stream_with_context(\n-    generator_or_function: t.Union[t.Generator, t.Callable]\n-) -> t.Generator:\n+    generator_or_function: t.Union[\n+        t.Iterator[t.AnyStr], t.Callable[..., t.Iterator[t.AnyStr]]\n+    ]\n+) -> t.Iterator[t.AnyStr]:\n     \"\"\"Request contexts disappear when the response is started on the server.\n     This is done for efficiency reasons and to make it less likely to encounter\n     memory leaks with badly written WSGI middlewares.  The downside is that if\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#fe2d744b530283094dd0a2ffa4a9d86f1029b2cd", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 232 | Contributors (this commit): 2 | Commits (past 90d): 11 | Contributors (cumulative): 2 | DMM Complexity: None\n\nDIFF:\n@@ -43,4 +43,4 @@ from .signals import template_rendered as template_rendered\n from .templating import render_template as render_template\n from .templating import render_template_string as render_template_string\n \n-__version__ = \"2.0.1.dev0\"\n+__version__ = \"2.0.1\"\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#e22021d531499af87f65d75f1e37e6329e7385ed", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 234 | Contributors (this commit): 2 | Commits (past 90d): 12 | Contributors (cumulative): 2 | DMM Complexity: None\n\nDIFF:\n@@ -43,4 +43,4 @@ from .signals import template_rendered as template_rendered\n from .templating import render_template as render_template\n from .templating import render_template_string as render_template_string\n \n-__version__ = \"2.0.1\"\n+__version__ = \"2.0.2.dev0\"\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#f7adb2c813c5c10dcab5bc81ee173a6f9fbd406a", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 50 | Contributors (this commit): 3 | Commits (past 90d): 3 | Contributors (cumulative): 3 | DMM Complexity: None\n\nDIFF:\n@@ -37,7 +37,7 @@ AppOrBlueprintKey = t.Optional[str]  # The App key is None, whereas blueprints a\n AfterRequestCallable = t.Callable[[\"Response\"], \"Response\"]\n BeforeRequestCallable = t.Callable[[], None]\n ErrorHandlerCallable = t.Callable[[Exception], ResponseReturnValue]\n-TeardownCallable = t.Callable[[t.Optional[BaseException]], \"Response\"]\n+TeardownCallable = t.Callable[[t.Optional[BaseException]], None]\n TemplateContextProcessorCallable = t.Callable[[], t.Dict[str, t.Any]]\n TemplateFilterCallable = t.Callable[[t.Any], str]\n TemplateGlobalCallable = t.Callable[[], t.Any]\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#a960236117442bec67f89c30dfa014e05483da5a", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 10 | Lines Deleted: 5 | Files Changed: 3 | Hunks: 6 | Methods Changed: 5 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 15 | Churn Cumulative: 2362 | Contributors (this commit): 17 | Commits (past 90d): 42 | Contributors (cumulative): 25 | DMM Complexity: 1.0\n\nDIFF:\n@@ -59,6 +59,7 @@ from .signals import request_tearing_down\n from .templating import DispatchingJinjaLoader\n from .templating import Environment\n from .typing import AfterRequestCallable\n+from .typing import BeforeFirstRequestCallable\n from .typing import BeforeRequestCallable\n from .typing import ErrorHandlerCallable\n from .typing import ResponseReturnValue\n@@ -439,7 +440,7 @@ class Flask(Scaffold):\n         #: :meth:`before_first_request` decorator.\n         #:\n         #: .. versionadded:: 0.8\n-        self.before_first_request_funcs: t.List[BeforeRequestCallable] = []\n+        self.before_first_request_funcs: t.List[BeforeFirstRequestCallable] = []\n \n         #: A list of functions that are called when the application context\n         #: is destroyed.  Since the application context is also torn down\n@@ -1211,7 +1212,9 @@ class Flask(Scaffold):\n         self.jinja_env.globals[name or f.__name__] = f\n \n     @setupmethod\n-    def before_first_request(self, f: BeforeRequestCallable) -> BeforeRequestCallable:\n+    def before_first_request(\n+        self, f: BeforeFirstRequestCallable\n+    ) -> BeforeFirstRequestCallable:\n         \"\"\"Registers a function to be run before the first request to this\n         instance of the application.\n \n\n@@ -6,6 +6,7 @@ from .scaffold import _endpoint_from_view_func\n from .scaffold import _sentinel\n from .scaffold import Scaffold\n from .typing import AfterRequestCallable\n+from .typing import BeforeFirstRequestCallable\n from .typing import BeforeRequestCallable\n from .typing import ErrorHandlerCallable\n from .typing import TeardownCallable\n@@ -537,8 +538,8 @@ class Blueprint(Scaffold):\n         return f\n \n     def before_app_first_request(\n-        self, f: BeforeRequestCallable\n-    ) -> BeforeRequestCallable:\n+        self, f: BeforeFirstRequestCallable\n+    ) -> BeforeFirstRequestCallable:\n         \"\"\"Like :meth:`Flask.before_first_request`.  Such a function is\n         executed before the first request to the application.\n         \"\"\"\n\n@@ -35,7 +35,8 @@ ResponseReturnValue = t.Union[\n \n AppOrBlueprintKey = t.Optional[str]  # The App key is None, whereas blueprints are named\n AfterRequestCallable = t.Callable[[\"Response\"], \"Response\"]\n-BeforeRequestCallable = t.Callable[[], None]\n+BeforeFirstRequestCallable = t.Callable[[], None]\n+BeforeRequestCallable = t.Callable[[], t.Optional[ResponseReturnValue]]\n ErrorHandlerCallable = t.Callable[[Exception], ResponseReturnValue]\n TeardownCallable = t.Callable[[t.Optional[BaseException]], None]\n TemplateContextProcessorCallable = t.Callable[[], t.Dict[str, t.Any]]\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#8e589daaf2cec6a10262b8ff88801127f2fa14fd", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 3 | Lines Deleted: 3 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 6 | Churn Cumulative: 59 | Contributors (this commit): 5 | Commits (past 90d): 5 | Contributors (cumulative): 5 | DMM Complexity: None\n\nDIFF:\n@@ -40,8 +40,8 @@ BeforeRequestCallable = t.Callable[[], t.Optional[ResponseReturnValue]]\n ErrorHandlerCallable = t.Callable[[Exception], ResponseReturnValue]\n TeardownCallable = t.Callable[[t.Optional[BaseException]], None]\n TemplateContextProcessorCallable = t.Callable[[], t.Dict[str, t.Any]]\n-TemplateFilterCallable = t.Callable[[t.Any], str]\n-TemplateGlobalCallable = t.Callable[[], t.Any]\n-TemplateTestCallable = t.Callable[[t.Any], bool]\n+TemplateFilterCallable = t.Callable[..., t.Any]\n+TemplateGlobalCallable = t.Callable[..., t.Any]\n+TemplateTestCallable = t.Callable[..., bool]\n URLDefaultCallable = t.Callable[[str, dict], None]\n URLValuePreprocessorCallable = t.Callable[[t.Optional[str], t.Optional[dict]], None]\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#491ea32803cb05fb8fc4dfb81ec6c96f94529eb0", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 2 | Churn Cumulative: 1537 | Contributors (this commit): 14 | Commits (past 90d): 18 | Contributors (cumulative): 14 | DMM Complexity: None\n\nDIFF:\n@@ -1276,7 +1276,7 @@ class Flask(Scaffold):\n         \"\"\"\n         exc_class, code = self._get_exc_class_and_code(type(e))\n \n-        for c in [code, None]:\n+        for c in [code, None] if code is not None else [None]:\n             for name in chain(request.blueprints, [None]):\n                 handler_map = self.error_handler_spec[name][c]\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#270eb2df2a1606383f50ff079a32240966b43fbc", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 27 | Lines Deleted: 3 | Files Changed: 2 | Hunks: 7 | Methods Changed: 7 | Complexity Δ (Sum/Max): 3/3 | Churn Δ: 30 | Churn Cumulative: 243 | Contributors (this commit): 3 | Commits (past 90d): 8 | Contributors (cumulative): 6 | DMM Complexity: 1.0\n\nDIFF:\n@@ -1,5 +1,6 @@\n import typing as t\n \n+from .globals import current_app\n from .globals import request\n from .typing import ResponseReturnValue\n \n@@ -80,7 +81,7 @@ class View:\n \n         def view(*args: t.Any, **kwargs: t.Any) -> ResponseReturnValue:\n             self = view.view_class(*class_args, **class_kwargs)  # type: ignore\n-            return self.dispatch_request(*args, **kwargs)\n+            return current_app.ensure_sync(self.dispatch_request)(*args, **kwargs)\n \n         if cls.decorators:\n             view.__name__ = name\n@@ -154,4 +155,4 @@ class MethodView(View, metaclass=MethodViewType):\n             meth = getattr(self, \"get\", None)\n \n         assert meth is not None, f\"Unimplemented method {request.method!r}\"\n-        return meth(*args, **kwargs)\n+        return current_app.ensure_sync(meth)(*args, **kwargs)\n\n@@ -6,6 +6,8 @@ import pytest\n from flask import Blueprint\n from flask import Flask\n from flask import request\n+from flask.views import MethodView\n+from flask.views import View\n \n pytest.importorskip(\"asgiref\")\n \n@@ -18,6 +20,24 @@ class BlueprintError(Exception):\n     pass\n \n \n+class AsyncView(View):\n+    methods = [\"GET\", \"POST\"]\n+\n+    async def dispatch_request(self):\n+        await asyncio.sleep(0)\n+        return request.method\n+\n+\n+class AsyncMethodView(MethodView):\n+    async def get(self):\n+        await asyncio.sleep(0)\n+        return 'GET'\n+\n+    async def post(self):\n+        await asyncio.sleep(0)\n+        return 'POST'\n+\n+\n @pytest.fixture(name=\"async_app\")\n def _async_app():\n     app = Flask(__name__)\n@@ -53,11 +73,14 @@ def _async_app():\n \n     app.register_blueprint(blueprint, url_prefix=\"/bp\")\n \n+    app.add_url_rule('/view', view_func=AsyncView.as_view('view'))\n+    app.add_url_rule('/methodview', view_func=AsyncMethodView.as_view('methodview'))\n+\n     return app\n \n \n @pytest.mark.skipif(sys.version_info < (3, 7), reason=\"requires Python >= 3.7\")\n-@pytest.mark.parametrize(\"path\", [\"/\", \"/home\", \"/bp/\"])\n+@pytest.mark.parametrize(\"path\", [\"/\", \"/home\", \"/bp/\", \"/view\", \"/methodview\"])\n def test_async_route(path, async_app):\n     test_client = async_app.test_client()\n     response = test_client.get(path)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#5205cd4ea979f6c322e4e6a256a72e7808592818", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 4 | Lines Deleted: 4 | Files Changed: 1 | Hunks: 3 | Methods Changed: 3 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 8 | Churn Cumulative: 195 | Contributors (this commit): 4 | Commits (past 90d): 7 | Contributors (cumulative): 4 | DMM Complexity: None\n\nDIFF:\n@@ -31,11 +31,11 @@ class AsyncView(View):\n class AsyncMethodView(MethodView):\n     async def get(self):\n         await asyncio.sleep(0)\n-        return 'GET'\n+        return \"GET\"\n \n     async def post(self):\n         await asyncio.sleep(0)\n-        return 'POST'\n+        return \"POST\"\n \n \n @pytest.fixture(name=\"async_app\")\n@@ -73,8 +73,8 @@ def _async_app():\n \n     app.register_blueprint(blueprint, url_prefix=\"/bp\")\n \n-    app.add_url_rule('/view', view_func=AsyncView.as_view('view'))\n-    app.add_url_rule('/methodview', view_func=AsyncMethodView.as_view('methodview'))\n+    app.add_url_rule(\"/view\", view_func=AsyncView.as_view(\"view\"))\n+    app.add_url_rule(\"/methodview\", view_func=AsyncMethodView.as_view(\"methodview\"))\n \n     return app\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#6a4e7e948d7e5bd5b2b76c1b7f1a0392644bee1e", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 37 | Lines Deleted: 13 | Files Changed: 4 | Hunks: 16 | Methods Changed: 12 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 50 | Churn Cumulative: 3876 | Contributors (this commit): 19 | Commits (past 90d): 58 | Contributors (cumulative): 36 | DMM Complexity: 0.0\n\nDIFF:\n@@ -61,7 +61,6 @@ from .templating import Environment\n from .typing import AfterRequestCallable\n from .typing import BeforeFirstRequestCallable\n from .typing import BeforeRequestCallable\n-from .typing import ErrorHandlerCallable\n from .typing import ResponseReturnValue\n from .typing import TeardownCallable\n from .typing import TemplateContextProcessorCallable\n@@ -78,6 +77,7 @@ if t.TYPE_CHECKING:\n     from .blueprints import Blueprint\n     from .testing import FlaskClient\n     from .testing import FlaskCliRunner\n+    from .typing import ErrorHandlerCallable\n \n if sys.version_info >= (3, 8):\n     iscoroutinefunction = inspect.iscoroutinefunction\n@@ -1268,7 +1268,9 @@ class Flask(Scaffold):\n         self.shell_context_processors.append(f)\n         return f\n \n-    def _find_error_handler(self, e: Exception) -> t.Optional[ErrorHandlerCallable]:\n+    def _find_error_handler(\n+        self, e: Exception\n+    ) -> t.Optional[\"ErrorHandlerCallable[Exception]\"]:\n         \"\"\"Return a registered error handler for an exception in this order:\n         blueprint handler for a specific code, app handler for a specific code,\n         blueprint handler for an exception class, app handler for an exception\n\n@@ -8,7 +8,6 @@ from .scaffold import Scaffold\n from .typing import AfterRequestCallable\n from .typing import BeforeFirstRequestCallable\n from .typing import BeforeRequestCallable\n-from .typing import ErrorHandlerCallable\n from .typing import TeardownCallable\n from .typing import TemplateContextProcessorCallable\n from .typing import TemplateFilterCallable\n@@ -19,6 +18,7 @@ from .typing import URLValuePreprocessorCallable\n \n if t.TYPE_CHECKING:\n     from .app import Flask\n+    from .typing import ErrorHandlerCallable\n \n DeferredSetupFunction = t.Callable[[\"BlueprintSetupState\"], t.Callable]\n \n@@ -581,7 +581,9 @@ class Blueprint(Scaffold):\n         handler is used for all requests, even if outside of the blueprint.\n         \"\"\"\n \n-        def decorator(f: ErrorHandlerCallable) -> ErrorHandlerCallable:\n+        def decorator(\n+            f: \"ErrorHandlerCallable[Exception]\",\n+        ) -> \"ErrorHandlerCallable[Exception]\":\n             self.record_once(lambda s: s.app.errorhandler(code)(f))\n             return f\n \n\n@@ -21,7 +21,7 @@ from .templating import _default_template_ctx_processor\n from .typing import AfterRequestCallable\n from .typing import AppOrBlueprintKey\n from .typing import BeforeRequestCallable\n-from .typing import ErrorHandlerCallable\n+from .typing import GenericException\n from .typing import TeardownCallable\n from .typing import TemplateContextProcessorCallable\n from .typing import URLDefaultCallable\n@@ -29,6 +29,7 @@ from .typing import URLValuePreprocessorCallable\n \n if t.TYPE_CHECKING:\n     from .wrappers import Response\n+    from .typing import ErrorHandlerCallable\n \n # a singleton sentinel value for parameter defaults\n _sentinel = object()\n@@ -144,7 +145,10 @@ class Scaffold:\n         #: directly and its format may change at any time.\n         self.error_handler_spec: t.Dict[\n             AppOrBlueprintKey,\n-            t.Dict[t.Optional[int], t.Dict[t.Type[Exception], ErrorHandlerCallable]],\n+            t.Dict[\n+                t.Optional[int],\n+                t.Dict[t.Type[Exception], \"ErrorHandlerCallable[Exception]\"],\n+            ],\n         ] = defaultdict(lambda: defaultdict(dict))\n \n         #: A data structure of functions to call at the beginning of\n@@ -643,8 +647,11 @@ class Scaffold:\n \n     @setupmethod\n     def errorhandler(\n-        self, code_or_exception: t.Union[t.Type[Exception], int]\n-    ) -> t.Callable[[ErrorHandlerCallable], ErrorHandlerCallable]:\n+        self, code_or_exception: t.Union[t.Type[GenericException], int]\n+    ) -> t.Callable[\n+        [\"ErrorHandlerCallable[GenericException]\"],\n+        \"ErrorHandlerCallable[GenericException]\",\n+    ]:\n         \"\"\"Register a function to handle errors by code or exception class.\n \n         A decorator that is used to register a function given an\n@@ -674,7 +681,9 @@ class Scaffold:\n                                   an arbitrary exception\n         \"\"\"\n \n-        def decorator(f: ErrorHandlerCallable) -> ErrorHandlerCallable:\n+        def decorator(\n+            f: \"ErrorHandlerCallable[GenericException]\",\n+        ) -> \"ErrorHandlerCallable[GenericException]\":\n             self.register_error_handler(code_or_exception, f)\n             return f\n \n@@ -683,8 +692,8 @@ class Scaffold:\n     @setupmethod\n     def register_error_handler(\n         self,\n-        code_or_exception: t.Union[t.Type[Exception], int],\n-        f: ErrorHandlerCallable,\n+        code_or_exception: t.Union[t.Type[GenericException], int],\n+        f: \"ErrorHandlerCallable[GenericException]\",\n     ) -> None:\n         \"\"\"Alternative error attach function to the :meth:`errorhandler`\n         decorator that is more straightforward to use for non decorator\n@@ -708,7 +717,9 @@ class Scaffold:\n                 \" instead.\"\n             )\n \n-        self.error_handler_spec[None][code][exc_class] = f\n+        self.error_handler_spec[None][code][exc_class] = t.cast(\n+            \"ErrorHandlerCallable[Exception]\", f\n+        )\n \n     @staticmethod\n     def _get_exc_class_and_code(\n\n@@ -33,11 +33,12 @@ ResponseReturnValue = t.Union[\n     \"WSGIApplication\",\n ]\n \n+GenericException = t.TypeVar(\"GenericException\", bound=Exception, contravariant=True)\n+\n AppOrBlueprintKey = t.Optional[str]  # The App key is None, whereas blueprints are named\n AfterRequestCallable = t.Callable[[\"Response\"], \"Response\"]\n BeforeFirstRequestCallable = t.Callable[[], None]\n BeforeRequestCallable = t.Callable[[], t.Optional[ResponseReturnValue]]\n-ErrorHandlerCallable = t.Callable[[Exception], ResponseReturnValue]\n TeardownCallable = t.Callable[[t.Optional[BaseException]], None]\n TemplateContextProcessorCallable = t.Callable[[], t.Dict[str, t.Any]]\n TemplateFilterCallable = t.Callable[..., t.Any]\n@@ -45,3 +46,11 @@ TemplateGlobalCallable = t.Callable[..., t.Any]\n TemplateTestCallable = t.Callable[..., bool]\n URLDefaultCallable = t.Callable[[str, dict], None]\n URLValuePreprocessorCallable = t.Callable[[t.Optional[str], t.Optional[dict]], None]\n+\n+\n+if t.TYPE_CHECKING:\n+    import typing_extensions as te\n+\n+    class ErrorHandlerCallable(te.Protocol[GenericException]):\n+        def __call__(self, error: GenericException) -> ResponseReturnValue:\n+            ...\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#a44c7228600044f530856a33c7da147c528644ff", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 15 | Lines Deleted: 3 | Files Changed: 2 | Hunks: 6 | Methods Changed: 4 | Complexity Δ (Sum/Max): 3/2 | Churn Δ: 18 | Churn Cumulative: 2600 | Contributors (this commit): 19 | Commits (past 90d): 30 | Contributors (cumulative): 22 | DMM Complexity: 0.9090909090909091\n\nDIFF:\n@@ -293,7 +293,6 @@ class Blueprint(Scaffold):\n             Registering the same blueprint with the same name multiple\n             times is deprecated and will become an error in Flask 2.1.\n         \"\"\"\n-        first_registration = not any(bp is self for bp in app.blueprints.values())\n         name_prefix = options.get(\"name_prefix\", \"\")\n         self_name = options.get(\"name\", self.name)\n         name = f\"{name_prefix}.{self_name}\".lstrip(\".\")\n@@ -318,9 +317,12 @@ class Blueprint(Scaffold):\n                     stacklevel=4,\n                 )\n \n+        first_bp_registration = not any(bp is self for bp in app.blueprints.values())\n+        first_name_registration = name not in app.blueprints\n+\n         app.blueprints[name] = self\n         self._got_registered_once = True\n-        state = self.make_setup_state(app, options, first_registration)\n+        state = self.make_setup_state(app, options, first_bp_registration)\n \n         if self.has_static_folder:\n             state.add_url_rule(\n@@ -330,7 +332,7 @@ class Blueprint(Scaffold):\n             )\n \n         # Merge blueprint data into parent.\n-        if first_registration:\n+        if first_bp_registration or first_name_registration:\n \n             def extend(bp_dict, parent_dict):\n                 for key, values in bp_dict.items():\n\n@@ -899,6 +899,14 @@ def test_blueprint_renaming(app, client) -> None:\n     def index():\n         return flask.request.endpoint\n \n+    @bp.get(\"/error\")\n+    def error():\n+        flask.abort(403)\n+\n+    @bp.errorhandler(403)\n+    def forbidden(_: Exception):\n+        return \"Error\", 403\n+\n     @bp2.get(\"/\")\n     def index2():\n         return flask.request.endpoint\n@@ -911,3 +919,5 @@ def test_blueprint_renaming(app, client) -> None:\n     assert client.get(\"/b/\").data == b\"alt.index\"\n     assert client.get(\"/a/a/\").data == b\"bp.sub.index2\"\n     assert client.get(\"/b/a/\").data == b\"alt.sub.index2\"\n+    assert client.get(\"/a/error\").data == b\"Error\"\n+    assert client.get(\"/b/error\").data == b\"Error\"\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#6e1b72096d5ae1e2cc4d8592ff8271b62548d9cf", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 1545 | Contributors (this commit): 15 | Commits (past 90d): 15 | Contributors (cumulative): 15 | DMM Complexity: None\n\nDIFF:\n@@ -1306,7 +1306,7 @@ class Flask(Scaffold):\n \n         .. versionchanged:: 1.0\n             Exceptions are looked up by code *and* by MRO, so\n-            ``HTTPExcpetion`` subclasses can be handled with a catch-all\n+            ``HTTPException`` subclasses can be handled with a catch-all\n             handler for the base ``HTTPException``.\n \n         .. versionadded:: 0.3\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#3127c304ecbc54387792c9ddff3c266645b67b8a", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 123 | Contributors (this commit): 3 | Commits (past 90d): 1 | Contributors (cumulative): 3 | DMM Complexity: None\n\nDIFF:\n@@ -16,7 +16,7 @@ def test_register(client, app):\n     # test that the user was inserted into the database\n     with app.app_context():\n         assert (\n-            get_db().execute(\"select * from user where username = 'a'\").fetchone()\n+            get_db().execute(\"SELECT * FROM user WHERE username = 'a'\").fetchone()\n             is not None\n         )\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#e18ed45c8863ac645f3ce17a155034b8384e726f", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 5 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 5 | Methods Changed: 5 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 6 | Churn Cumulative: 267 | Contributors (this commit): 5 | Commits (past 90d): 2 | Contributors (cumulative): 5 | DMM Complexity: 1.0\n\nDIFF:\n@@ -83,7 +83,7 @@ class Config(dict):\n         :param variable_name: name of the environment variable\n         :param silent: set to ``True`` if you want silent failure for missing\n                        files.\n-        :return: bool. ``True`` if able to load config, ``False`` otherwise.\n+        :return: ``True`` if the file was loaded successfully.\n         \"\"\"\n         rv = os.environ.get(variable_name)\n         if not rv:\n@@ -107,6 +107,7 @@ class Config(dict):\n                          root path.\n         :param silent: set to ``True`` if you want silent failure for missing\n                        files.\n+        :return: ``True`` if the file was loaded successfully.\n \n         .. versionadded:: 0.7\n            `silent` parameter.\n@@ -185,6 +186,7 @@ class Config(dict):\n         :type load: ``Callable[[Reader], Mapping]`` where ``Reader``\n             implements a ``read`` method.\n         :param silent: Ignore the file if it doesn't exist.\n+        :return: ``True`` if the file was loaded successfully.\n \n         .. versionadded:: 2.0\n         \"\"\"\n@@ -209,6 +211,7 @@ class Config(dict):\n         :param filename: The path to the JSON file. This can be an\n             absolute path or relative to the config root path.\n         :param silent: Ignore the file if it doesn't exist.\n+        :return: ``True`` if the file was loaded successfully.\n \n         .. deprecated:: 2.0.0\n             Will be removed in Flask 2.1. Use :meth:`from_file` instead.\n@@ -232,6 +235,7 @@ class Config(dict):\n     ) -> bool:\n         \"\"\"Updates the config like :meth:`update` ignoring items with non-upper\n         keys.\n+        :return: Always returns ``True``.\n \n         .. versionadded:: 0.11\n         \"\"\"\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#51196575479e34c3ea43612e1eb770db3aa5d114", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 7 | Lines Deleted: 7 | Files Changed: 1 | Hunks: 3 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 14 | Churn Cumulative: 224 | Contributors (this commit): 3 | Commits (past 90d): 1 | Contributors (cumulative): 3 | DMM Complexity: 1.0\n\nDIFF:\n@@ -60,20 +60,20 @@ def register():\n             error = \"Username is required.\"\n         elif not password:\n             error = \"Password is required.\"\n-        elif (\n-            db.execute(\"SELECT id FROM user WHERE username = ?\", (username,)).fetchone()\n-            is not None\n-        ):\n-            error = f\"User {username} is already registered.\"\n \n         if error is None:\n-            # the name is available, store it in the database and go to\n-            # the login page\n+            try:\n                 db.execute(\n                     \"INSERT INTO user (username, password) VALUES (?, ?)\",\n                     (username, generate_password_hash(password)),\n                 )\n                 db.commit()\n+            except db.IntegrityError:\n+                # The username was already taken, which caused the\n+                # commit to fail. Show a validation error.\n+                error = f\"User {username} is already registered.\"\n+            else:\n+                # Success, go to the login page.\n                 return redirect(url_for(\"auth.login\"))\n \n         flash(error)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#9a2adfba4d4310b005c222fcdfb85e96e3e6661d", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 6 | Lines Deleted: 5 | Files Changed: 3 | Hunks: 6 | Methods Changed: 8 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 11 | Churn Cumulative: 3827 | Contributors (this commit): 19 | Commits (past 90d): 49 | Contributors (cumulative): 34 | DMM Complexity: None\n\nDIFF:\n@@ -389,7 +389,7 @@ class Flask(Scaffold):\n         self,\n         import_name: str,\n         static_url_path: t.Optional[str] = None,\n-        static_folder: t.Optional[str] = \"static\",\n+        static_folder: t.Optional[t.Union[str, os.PathLike]] = \"static\",\n         static_host: t.Optional[str] = None,\n         host_matching: bool = False,\n         subdomain_matching: bool = False,\n\n@@ -1,3 +1,4 @@\n+import os\n import typing as t\n from collections import defaultdict\n from functools import update_wrapper\n@@ -175,7 +176,7 @@ class Blueprint(Scaffold):\n         self,\n         name: str,\n         import_name: str,\n-        static_folder: t.Optional[str] = None,\n+        static_folder: t.Optional[t.Union[str, os.PathLike]] = None,\n         static_url_path: t.Optional[str] = None,\n         template_folder: t.Optional[str] = None,\n         url_prefix: t.Optional[str] = None,\n\n@@ -92,7 +92,7 @@ class Scaffold:\n     def __init__(\n         self,\n         import_name: str,\n-        static_folder: t.Optional[str] = None,\n+        static_folder: t.Optional[t.Union[str, os.PathLike]] = None,\n         static_url_path: t.Optional[str] = None,\n         template_folder: t.Optional[str] = None,\n         root_path: t.Optional[str] = None,\n@@ -101,7 +101,7 @@ class Scaffold:\n         #: to. Do not change this once it is set by the constructor.\n         self.import_name = import_name\n \n-        self.static_folder = static_folder\n+        self.static_folder = static_folder  # type: ignore\n         self.static_url_path = static_url_path\n \n         #: The path to the templates folder, relative to\n@@ -257,7 +257,7 @@ class Scaffold:\n             return None\n \n     @static_folder.setter\n-    def static_folder(self, value: t.Optional[str]) -> None:\n+    def static_folder(self, value: t.Optional[t.Union[str, os.PathLike]]) -> None:\n         if value is not None:\n             value = os.fspath(value).rstrip(r\"\\/\")\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#892ae955093cc3b7925230ff7bc346a6afb14f5d", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 14 | Lines Deleted: 1 | Files Changed: 2 | Hunks: 6 | Methods Changed: 4 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 15 | Churn Cumulative: 1046 | Contributors (this commit): 5 | Commits (past 90d): 5 | Contributors (cumulative): 8 | DMM Complexity: 0.6666666666666666\n\nDIFF:\n@@ -1,3 +1,4 @@\n+import decimal\n import io\n import json as _json\n import typing as t\n@@ -47,7 +48,7 @@ class JSONEncoder(_json.JSONEncoder):\n         \"\"\"\n         if isinstance(o, date):\n             return http_date(o)\n-        if isinstance(o, uuid.UUID):\n+        if isinstance(o, (decimal.Decimal, uuid.UUID)):\n             return str(o)\n         if dataclasses and dataclasses.is_dataclass(o):\n             return dataclasses.asdict(o)\n@@ -117,6 +118,9 @@ def dumps(obj: t.Any, app: t.Optional[\"Flask\"] = None, **kwargs: t.Any) -> str:\n         or defaults.\n     :param kwargs: Extra arguments passed to :func:`json.dumps`.\n \n+    .. versionchanged:: 2.0.2\n+        :class:`decimal.Decimal` is supported by converting to a string.\n+\n     .. versionchanged:: 2.0\n         ``encoding`` is deprecated and will be removed in Flask 2.1.\n \n@@ -324,6 +328,9 @@ def jsonify(*args: t.Any, **kwargs: t.Any) -> \"Response\":\n     debug mode or if :data:`JSONIFY_PRETTYPRINT_REGULAR` is ``True``,\n     the output will be formatted to be easier to read.\n \n+    .. versionchanged:: 2.0.2\n+        :class:`decimal.Decimal` is supported by converting to a string.\n+\n     .. versionchanged:: 0.11\n         Added support for serializing top-level arrays. This introduces\n         a security risk in ancient browsers. See :ref:`security-json`.\n\n@@ -1,4 +1,5 @@\n import datetime\n+import decimal\n import io\n import uuid\n \n@@ -187,6 +188,11 @@ def test_jsonify_uuid_types(app, client):\n     assert rv_uuid == test_uuid\n \n \n+def test_json_decimal():\n+    rv = flask.json.dumps(decimal.Decimal(\"0.003\"))\n+    assert rv == '\"0.003\"'\n+\n+\n def test_json_attr(app, client):\n     @app.route(\"/add\", methods=[\"POST\"])\n     def add():\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
