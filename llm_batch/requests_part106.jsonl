{"custom_id": "requests#667896c557718114fcb1c365f29e5d04413bff84", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 6 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 6 | Churn Cumulative: 3413 | Contributors (this commit): 88 | Commits (past 90d): 12 | Contributors (cumulative): 88 | DMM Complexity: None\n\nDIFF:\n@@ -97,6 +97,12 @@ class SessionRedirectMixin(object):\n \n     def get_redirect_target(self, resp):\n         \"\"\"Receives a Response. Returns a redirect URI or ``None``\"\"\"\n+        # Due to the nature of how requests processes redirects this method will\n+        # be called at least once upon the original response and at least twice\n+        # on each subsequent redirect response (if any).\n+        # If a custom mixin is used to handle this logic, it may be advantageous\n+        # to cache the redirect location onto the response object as a private\n+        # attribute.\n         if resp.is_redirect:\n             location = resp.headers['location']\n             # Currently the underlying http module on py3 decode headers\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#e2f5a135c3048d7e6d0b2907ea8811c6943740d3", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 0 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 9727 | Contributors (this commit): 177 | Commits (past 90d): 9 | Contributors (cumulative): 177 | DMM Complexity: 0.0\n\nDIFF:\n@@ -586,8 +586,6 @@ class Response(object):\n     ]\n \n     def __init__(self):\n-        super(Response, self).__init__()\n-\n         self._content = False\n         self._content_consumed = False\n         self._next = None\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#39b121d791ddd2f98ecf7b7f7ba5bae89034e422", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 24 | Lines Deleted: 0 | Files Changed: 2 | Hunks: 4 | Methods Changed: 4 | Complexity Δ (Sum/Max): 3/3 | Churn Δ: 24 | Churn Cumulative: 83 | Contributors (this commit): 4 | Commits (past 90d): 10 | Contributors (cumulative): 6 | DMM Complexity: 1.0\n\nDIFF:\n@@ -6,6 +6,7 @@ import platform\n import sys\n import ssl\n \n+import idna\n import urllib3\n import chardet\n \n@@ -84,6 +85,9 @@ def info():\n     cryptography_info = {\n         'version': getattr(cryptography, '__version__', ''),\n     }\n+    idna_info = {\n+        'version': getattr(idna, '__version__', ''),\n+    }\n \n     # OPENSSL_VERSION_NUMBER doesn't exist in the Python 2.6 ssl module.\n     system_ssl = getattr(ssl, 'OPENSSL_VERSION_NUMBER', None)\n@@ -100,6 +104,7 @@ def info():\n         'urllib3': urllib3_info,\n         'chardet': chardet_info,\n         'cryptography': cryptography_info,\n+        'idna': idna_info,\n         'requests': {\n             'version': requests_version,\n         },\n\n@@ -19,3 +19,22 @@ def test_system_ssl_py26():\n def test_system_ssl():\n     \"\"\"Verify we're actually setting system_ssl when it should be available.\"\"\"\n     assert info()['system_ssl']['version'] != ''\n+\n+\n+class VersionedPackage(object):\n+    def __init__(self, version):\n+        self.__version__ = version\n+\n+\n+def test_idna_without_version_attribute(mocker):\n+    \"\"\"Older versions of IDNA don't provide a __version__ attribute, verify\n+    that if we have such a package, we don't blow up.\n+    \"\"\"\n+    mocker.patch('requests.help.idna', new=None)\n+    assert info()['idna'] == {'version': ''}\n+\n+\n+def test_idna_with_version_attribute(mocker):\n+    \"\"\"Verify we're actually setting idna version when it should be available.\"\"\"\n+    mocker.patch('requests.help.idna', new=VersionedPackage('2.6'))\n+    assert info()['idna'] == {'version': '2.6'}\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#8b3f20ca9157f77c6a20bf9b29bba86fec3b04df", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 10 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 11 | Churn Cumulative: 4456 | Contributors (this commit): 61 | Commits (past 90d): 11 | Contributors (cumulative): 61 | DMM Complexity: 1.0\n\nDIFF:\n@@ -23,7 +23,7 @@ from requests.cookies import (\n from requests.exceptions import (\n     ConnectionError, ConnectTimeout, InvalidSchema, InvalidURL,\n     MissingSchema, ReadTimeout, Timeout, RetryError, TooManyRedirects,\n-    ProxyError, InvalidHeader, UnrewindableBodyError)\n+    ProxyError, InvalidHeader, UnrewindableBodyError, SSLError)\n from requests.models import PreparedRequest\n from requests.structures import CaseInsensitiveDict\n from requests.sessions import SessionRedirectMixin\n@@ -812,6 +812,15 @@ class TestRequests:\n             item.category.__name__ for item in warning_records)\n         assert warnings_category == warnings_expected\n \n+    def test_certificate_failure(self, httpbin_secure):\n+        \"\"\"\n+        When underlying SSL problems occur, an SSLError is raised.\n+        \"\"\"\n+        with pytest.raises(SSLError):\n+            # Our local httpbin does not have a trusted CA, so this call will\n+            # fail if we use our default trust bundle.\n+            requests.get(httpbin_secure('status', '200'))\n+\n     def test_urlencoded_get_query_multivalued_param(self, httpbin):\n \n         r = requests.get(httpbin('get'), params=dict(test=['foo', 'baz']))\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#4f49f6b3ed99cf73feaec762f96f44574ac54134", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 5 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 5 | Churn Cumulative: 1211 | Contributors (this commit): 43 | Commits (past 90d): 5 | Contributors (cumulative): 43 | DMM Complexity: 0.0\n\nDIFF:\n@@ -501,6 +501,10 @@ class HTTPAdapter(BaseAdapter):\n             if isinstance(e.reason, _ProxyError):\n                 raise ProxyError(e, request=request)\n \n+            if isinstance(e.reason, _SSLError):\n+                # This branch is for urllib3 v1.22 and later.\n+                raise SSLError(e, request=request)\n+\n             raise ConnectionError(e, request=request)\n \n         except ClosedPoolError as e:\n@@ -511,6 +515,7 @@ class HTTPAdapter(BaseAdapter):\n \n         except (_SSLError, _HTTPError) as e:\n             if isinstance(e, _SSLError):\n+                # This branch is for urllib3 versions earlier than v1.22\n                 raise SSLError(e, request=request)\n             elif isinstance(e, ReadTimeoutError):\n                 raise ReadTimeout(e, request=request)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#7c67c4adf9020fe6e279f1633ca477ef2b89ae44", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 102 | Contributors (this commit): 2 | Commits (past 90d): 21 | Contributors (cumulative): 2 | DMM Complexity: None\n\nDIFF:\n@@ -5,8 +5,8 @@\n __title__ = 'requests'\n __description__ = 'Python HTTP for Humans.'\n __url__ = 'http://python-requests.org'\n-__version__ = '2.18.2'\n-__build__ = 0x021802\n+__version__ = '2.18.3'\n+__build__ = 0x021803\n __author__ = 'Kenneth Reitz'\n __author_email__ = 'me@kennethreitz.org'\n __license__ = 'Apache 2.0'\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#f4ddf00c364e4396e7d941f91a8817311dd79adc", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 638 | Contributors (this commit): 24 | Commits (past 90d): 22 | Contributors (cumulative): 24 | DMM Complexity: None\n\nDIFF:\n@@ -43,7 +43,7 @@ packages = ['requests']\n \n requires = [\n     'chardet>=3.0.2,<3.1.0',\n-    'idna>=2.5,<2.6',\n+    'idna>=2.5,<2.7',\n     'urllib3>=1.21.1,<1.23',\n     'certifi>=2017.4.17'\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#0a2dc74ecbbb375b6d5171eb588ee69ca59b1898", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 0 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 1 | Churn Cumulative: 639 | Contributors (this commit): 24 | Commits (past 90d): 22 | Contributors (cumulative): 24 | DMM Complexity: None\n\nDIFF:\n@@ -83,7 +83,6 @@ setup(\n         'Programming Language :: Python :: 2.6',\n         'Programming Language :: Python :: 2.7',\n         'Programming Language :: Python :: 3',\n-        'Programming Language :: Python :: 3.3',\n         'Programming Language :: Python :: 3.4',\n         'Programming Language :: Python :: 3.5',\n         'Programming Language :: Python :: 3.6',\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#cee8fae65efc1d4557d1b2291963a729444a5f42", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 2822 | Contributors (this commit): 79 | Commits (past 90d): 7 | Contributors (cumulative): 79 | DMM Complexity: None\n\nDIFF:\n@@ -868,8 +868,8 @@ def check_header_validity(header):\n         if not pat.match(value):\n             raise InvalidHeader(\"Invalid return character or leading space in header: %s\" % name)\n     except TypeError:\n-        raise InvalidHeader(\"Header value %s must be of type str or bytes, \"\n-                            \"not %s\" % (value, type(value)))\n+        raise InvalidHeader(\"Header %s value %s must be of type str or bytes, \"\n+                            \"not %s\" % (name, value, type(value)))\n \n \n def urldefragauth(url):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#ba21d149768909ffb63a5d5f9bd35f1f85a3371a", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 2826 | Contributors (this commit): 79 | Commits (past 90d): 8 | Contributors (cumulative): 79 | DMM Complexity: None\n\nDIFF:\n@@ -868,8 +868,8 @@ def check_header_validity(header):\n         if not pat.match(value):\n             raise InvalidHeader(\"Invalid return character or leading space in header: %s\" % name)\n     except TypeError:\n-        raise InvalidHeader(\"Header %s value %s must be of type str or bytes, \"\n-                            \"not %s\" % (name, value, type(value)))\n+        raise InvalidHeader(\"Value for header {%s:%s} must be of type str or \" \n+                            \"bytes, not %s\" % (name, value, type(value)))\n \n \n def urldefragauth(url):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#cbc7c2d1c9ceaa0ae73a1da3ceb3b29ed278d785", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 6 | Lines Deleted: 3 | Files Changed: 1 | Hunks: 6 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 9 | Churn Cumulative: 4465 | Contributors (this commit): 62 | Commits (past 90d): 11 | Contributors (cumulative): 62 | DMM Complexity: 1.0\n\nDIFF:\n@@ -1401,14 +1401,17 @@ class TestRequests:\n         headers_list = {'baz': ['foo', 'bar']}\n \n         # Test for int\n-        with pytest.raises(InvalidHeader):\n+        with pytest.raises(InvalidHeader) as excinfo:\n             r = requests.get(httpbin('get'), headers=headers_int)\n+        assert 'foo' in str(excinfo.value)\n         # Test for dict\n-        with pytest.raises(InvalidHeader):\n+        with pytest.raises(InvalidHeader) as excinfo:\n             r = requests.get(httpbin('get'), headers=headers_dict)\n+        assert 'bar' in str(excinfo.value)\n         # Test for list\n-        with pytest.raises(InvalidHeader):\n+        with pytest.raises(InvalidHeader) as excinfo:\n             r = requests.get(httpbin('get'), headers=headers_list)\n+        assert 'baz' in str(excinfo.value)\n \n     def test_header_no_return_chars(self, httpbin):\n         \"\"\"Ensure that a header containing return character sequences raise an\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#a3d7cf3f27e74c28ef30f01e9f2e483570ab042e", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 106 | Contributors (this commit): 2 | Commits (past 90d): 22 | Contributors (cumulative): 2 | DMM Complexity: None\n\nDIFF:\n@@ -5,8 +5,8 @@\n __title__ = 'requests'\n __description__ = 'Python HTTP for Humans.'\n __url__ = 'http://python-requests.org'\n-__version__ = '2.18.3'\n-__build__ = 0x021803\n+__version__ = '2.18.4'\n+__build__ = 0x021804\n __author__ = 'Kenneth Reitz'\n __author_email__ = 'me@kennethreitz.org'\n __license__ = 'Apache 2.0'\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#965ada6f660a423ec259fe3ad12d24022a55d37b", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 5 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 6 | Churn Cumulative: 2832 | Contributors (this commit): 80 | Commits (past 90d): 9 | Contributors (cumulative): 80 | DMM Complexity: 0.0\n\nDIFF:\n@@ -743,7 +743,7 @@ def default_headers():\n \n \n def parse_header_links(value):\n-    \"\"\"Return a dict of parsed link headers proxies.\n+    \"\"\"Return a list of parsed link headers proxies.\n \n     i.e. Link: <http:/.../front.jpeg>; rel=front; type=\"image/jpeg\",<http://.../back.jpeg>; rel=back;type=\"image/jpeg\"\n \n@@ -754,6 +754,10 @@ def parse_header_links(value):\n \n     replace_chars = ' \\'\"'\n \n+    value = value.strip(replace_chars)\n+    if not value:\n+        return links\n+\n     for val in re.split(', *<', value):\n         try:\n             url, params = val.split(';', 1)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#8e411d0f99310320463254e8a364271f64f14c78", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 4 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 1324 | Contributors (this commit): 19 | Commits (past 90d): 3 | Contributors (cumulative): 19 | DMM Complexity: None\n\nDIFF:\n@@ -498,6 +498,10 @@ def test_iter_slices(value, length):\n                 {'url': 'http://.../back.jpeg'}\n             ]\n         ),\n+        (\n+            '',\n+            []\n+        ),\n     ))\n def test_parse_header_links(value, expected):\n     assert parse_header_links(value) == expected\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#5dcbdb50fc9652cbeffeec22a21d1196e938bfca", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 3 | Lines Deleted: 3 | Files Changed: 1 | Hunks: 3 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 6 | Churn Cumulative: 536 | Contributors (this commit): 8 | Commits (past 90d): 2 | Contributors (cumulative): 8 | DMM Complexity: None\n\nDIFF:\n@@ -58,7 +58,7 @@ master_doc = 'index'\n \n # General information about the project.\n project = u'Requests'\n-copyright = u'MMXVII. A <a href=\"http://kennethreitz.com/pages/open-projects.html\">Kenneth Reitz</a> Project'\n+copyright = u'MMXVII. A <a href=\"http://kennethreitz.com/bitcoin\">Kenneth Reitz</a> Project'\n author = u'Kenneth Reitz'\n \n # The version info for the project you're documenting, acts as replacement for\n@@ -128,7 +128,7 @@ html_theme_options = {\n     'show_powered_by': False,\n     'github_user': 'requests',\n     'github_repo': 'requests',\n-    'github_banner': True,\n+    'github_banner': False,\n     'show_related': False\n }\n \n@@ -167,7 +167,7 @@ html_static_path = ['_static']\n \n # If true, SmartyPants will be used to convert quotes and dashes to\n # typographically correct entities.\n-html_use_smartypants = False\n+html_use_smartypants = True\n \n # Custom sidebar templates, maps document names to template names.\n html_sidebars = {\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#369be8afd07e7a0f38bc4f78d6f3764a800711aa", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 5 | Lines Deleted: 4 | Files Changed: 1 | Hunks: 3 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 9 | Churn Cumulative: 545 | Contributors (this commit): 8 | Commits (past 90d): 2 | Contributors (cumulative): 8 | DMM Complexity: None\n\nDIFF:\n@@ -58,7 +58,7 @@ master_doc = 'index'\n \n # General information about the project.\n project = u'Requests'\n-copyright = u'MMXVII. A <a href=\"http://kennethreitz.com/bitcoin\">Kenneth Reitz</a> Project'\n+copyright = u'MMXVII. A <a href=\"http://kennethreitz.com/pages/open-projects.html\">Kenneth Reitz</a> Project'\n author = u'Kenneth Reitz'\n \n # The version info for the project you're documenting, acts as replacement for\n@@ -128,8 +128,9 @@ html_theme_options = {\n     'show_powered_by': False,\n     'github_user': 'requests',\n     'github_repo': 'requests',\n-    'github_banner': False,\n-    'show_related': False\n+    'github_banner': True,\n+    'show_related': False,\n+    'note_bg': '#FFF59C'\n }\n \n # Add any paths that contain custom themes here, relative to this directory.\n@@ -167,7 +168,7 @@ html_static_path = ['_static']\n \n # If true, SmartyPants will be used to convert quotes and dashes to\n # typographically correct entities.\n-html_use_smartypants = True\n+html_use_smartypants = False\n \n # Custom sidebar templates, maps document names to template names.\n html_sidebars = {\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#96b9a3f0fc7551aa3c2d25b093ba85a49d5b0497", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 1 | Churn Cumulative: 640 | Contributors (this commit): 24 | Commits (past 90d): 4 | Contributors (cumulative): 24 | DMM Complexity: None\n\nDIFF:\n@@ -1,4 +1,5 @@\n #!/usr/bin/env python\n+# Learn more: https://github.com/kennethreitz/setup.py\n \n import os\n import re\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#28ae74dbada502b4d1091dca68a6899a7d2d159d", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 3 | Lines Deleted: 3 | Files Changed: 1 | Hunks: 3 | Methods Changed: 3 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 6 | Churn Cumulative: 4471 | Contributors (this commit): 62 | Commits (past 90d): 3 | Contributors (cumulative): 62 | DMM Complexity: None\n\nDIFF:\n@@ -634,7 +634,7 @@ class TestRequests:\n         post1 = requests.post(url, data={'some': 'data'})\n         assert post1.status_code == 200\n \n-        with open('requirements.txt') as f:\n+        with open('Pipfile') as f:\n             post2 = requests.post(url, files={'some': f})\n         assert post2.status_code == 200\n \n@@ -694,7 +694,7 @@ class TestRequests:\n         post1 = requests.post(url, data={'some': 'data'})\n         assert post1.status_code == 200\n \n-        with open('requirements.txt') as f:\n+        with open('Pipfile') as f:\n             post2 = requests.post(url, data={'some': 'data'}, files={'some': f})\n         assert post2.status_code == 200\n \n@@ -731,7 +731,7 @@ class TestRequests:\n \n     def test_conflicting_post_params(self, httpbin):\n         url = httpbin('post')\n-        with open('requirements.txt') as f:\n+        with open('Pipfile') as f:\n             pytest.raises(ValueError, \"requests.post(url, data='[{\\\"some\\\": \\\"data\\\"}]', files={'some': f})\")\n             pytest.raises(ValueError, \"requests.post(url, data=u('[{\\\"some\\\": \\\"data\\\"}]'), files={'some': f})\")\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#15054aa3909da2383e8cfa9abcd296ba46a7200f", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 15 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): 3/3 | Churn Δ: 15 | Churn Cumulative: 818 | Contributors (this commit): 18 | Commits (past 90d): 2 | Contributors (cumulative): 18 | DMM Complexity: 1.0\n\nDIFF:\n@@ -71,6 +71,17 @@ def check_compatibility(urllib3_version, chardet_version):\n     assert patch >= 2\n \n \n+def _check_cryptography(cryptography_version):\n+    # cryptography < 1.3.4\n+    try:\n+        cryptography_version = list(map(int, cryptography_version.split('.')))\n+    except ValueError:\n+        return\n+\n+    if cryptography_version < [1, 3, 4]:\n+        warning = 'Old version of cryptography ({0}) may cause slowdown.'.format(cryptography_version)\n+        warnings.warn(warning, RequestsDependencyWarning)\n+\n # Check imported dependencies for compatibility.\n try:\n     check_compatibility(urllib3.__version__, chardet.__version__)\n@@ -83,6 +94,10 @@ except (AssertionError, ValueError):\n try:\n     from urllib3.contrib import pyopenssl\n     pyopenssl.inject_into_urllib3()\n+\n+    # Check cryptography version\n+    from cryptography import __version__ as cryptography_version\n+    _check_cryptography(cryptography_version)\n except ImportError:\n     pass\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#ec5804c706fcf2260ff85132b878851ffbbc2a6f", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 3415 | Contributors (this commit): 89 | Commits (past 90d): 3 | Contributors (cumulative): 89 | DMM Complexity: None\n\nDIFF:\n@@ -39,7 +39,7 @@ from .models import REDIRECT_STATI\n \n # Preferred clock, based on which one is more accurate on a given system.\n if platform.system() == 'Windows':\n-    try:  # Python 3.3+\n+    try:  # Python 3.4+\n         preferred_clock = time.perf_counter\n     except AttributeError:  # Earlier than Python 3.\n         preferred_clock = time.clock\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#c14bd018adc715db2810c844258b392870fbc6fe", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 2 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 642 | Contributors (this commit): 25 | Commits (past 90d): 5 | Contributors (cumulative): 25 | DMM Complexity: None\n\nDIFF:\n@@ -81,6 +81,7 @@ setup(\n         'Natural Language :: English',\n         'License :: OSI Approved :: Apache Software License',\n         'Programming Language :: Python',\n+        'Programming Language :: Python :: 2',\n         'Programming Language :: Python :: 2.6',\n         'Programming Language :: Python :: 2.7',\n         'Programming Language :: Python :: 3',\n@@ -98,4 +99,3 @@ setup(\n         'socks:sys_platform == \"win32\" and (python_version == \"2.7\" or python_version == \"2.6\")': ['win_inet_pton'],\n     },\n )\n-\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#d3f14af44d9460a17c79de19ebdb65b3eec2e534", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 3417 | Contributors (this commit): 90 | Commits (past 90d): 3 | Contributors (cumulative): 90 | DMM Complexity: None\n\nDIFF:\n@@ -696,7 +696,7 @@ class Session(SessionRedirectMixin):\n         \"\"\"\n         for (prefix, adapter) in self.adapters.items():\n \n-            if url.lower().startswith(prefix):\n+            if url.lower().startswith(prefix.lower()):\n                 return adapter\n \n         # Nothing matches :-/\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#af88af64e6c5bc026247f18e2e6de20605f51e7f", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 12 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 12 | Churn Cumulative: 4483 | Contributors (this commit): 63 | Commits (past 90d): 4 | Contributors (cumulative): 63 | DMM Complexity: 1.0\n\nDIFF:\n@@ -1351,6 +1351,18 @@ class TestRequests:\n         assert 'http://' in s2.adapters\n         assert 'https://' in s2.adapters\n \n+    def test_session_get_adapter_prefix_matching_is_case_insensitive(self, httpbin):\n+        mixed_case_prefix = 'hTtPs://eXamPle.CoM/MixEd_CAse_PREfix'\n+        url_matching_prefix = mixed_case_prefix + '/full_url'\n+        url_matching_prefix_with_different_case = 'HtTpS://exaMPLe.cOm/MiXeD_caSE_preFIX/another_url'\n+\n+        s = requests.Session()\n+        my_adapter = HTTPAdapter()\n+        s.mount(mixed_case_prefix, my_adapter)\n+\n+        assert s.get_adapter(url_matching_prefix) is my_adapter\n+        assert s.get_adapter(url_matching_prefix_with_different_case) is my_adapter\n+\n     def test_header_remove_is_case_insensitive(self, httpbin):\n         # From issue #1321\n         s = requests.Session()\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#e11989e8ec5885ea36b9be25641fbd4ce9f0c4dd", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 18 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 18 | Churn Cumulative: 4501 | Contributors (this commit): 63 | Commits (past 90d): 5 | Contributors (cumulative): 63 | DMM Complexity: 1.0\n\nDIFF:\n@@ -1351,6 +1351,24 @@ class TestRequests:\n         assert 'http://' in s2.adapters\n         assert 'https://' in s2.adapters\n \n+    def test_session_get_adapter_prefix_matching(self, httpbin):\n+        prefix = 'https://example.com'\n+        more_specific_prefix = prefix + '/some/path'\n+\n+        url_matching_only_prefix = prefix + '/another/path'\n+        url_matching_more_specific_prefix = more_specific_prefix + '/longer/path'\n+        url_not_matching_prefix = 'https://another.example.com/'\n+\n+        s = requests.Session()\n+        prefix_adapter = HTTPAdapter()\n+        more_specific_prefix_adapter = HTTPAdapter()\n+        s.mount(prefix, prefix_adapter)\n+        s.mount(more_specific_prefix, more_specific_prefix_adapter)\n+\n+        assert s.get_adapter(url_matching_only_prefix) is prefix_adapter\n+        assert s.get_adapter(url_matching_more_specific_prefix) is more_specific_prefix_adapter\n+        assert s.get_adapter(url_not_matching_prefix) not in (prefix_adapter, more_specific_prefix_adapter)\n+\n     def test_session_get_adapter_prefix_matching_is_case_insensitive(self, httpbin):\n         mixed_case_prefix = 'hTtPs://eXamPle.CoM/MixEd_CAse_PREfix'\n         url_matching_prefix = mixed_case_prefix + '/full_url'\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#d165b18b6e0c1aaabd8f652f88308008769f6625", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 10 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 3 | Methods Changed: 2 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 12 | Churn Cumulative: 4513 | Contributors (this commit): 63 | Commits (past 90d): 6 | Contributors (cumulative): 63 | DMM Complexity: 1.0\n\nDIFF:\n@@ -1369,16 +1369,24 @@ class TestRequests:\n         assert s.get_adapter(url_matching_more_specific_prefix) is more_specific_prefix_adapter\n         assert s.get_adapter(url_not_matching_prefix) not in (prefix_adapter, more_specific_prefix_adapter)\n \n-    def test_session_get_adapter_prefix_matching_is_case_insensitive(self, httpbin):\n+    def test_session_get_adapter_prefix_matching_mixed_case(self, httpbin):\n         mixed_case_prefix = 'hTtPs://eXamPle.CoM/MixEd_CAse_PREfix'\n         url_matching_prefix = mixed_case_prefix + '/full_url'\n-        url_matching_prefix_with_different_case = 'HtTpS://exaMPLe.cOm/MiXeD_caSE_preFIX/another_url'\n \n         s = requests.Session()\n         my_adapter = HTTPAdapter()\n         s.mount(mixed_case_prefix, my_adapter)\n \n         assert s.get_adapter(url_matching_prefix) is my_adapter\n+\n+    def test_session_get_adapter_prefix_matching_is_case_insensitive(self, httpbin):\n+        mixed_case_prefix = 'hTtPs://eXamPle.CoM/MixEd_CAse_PREfix'\n+        url_matching_prefix_with_different_case = 'HtTpS://exaMPLe.cOm/MiXeD_caSE_preFIX/another_url'\n+\n+        s = requests.Session()\n+        my_adapter = HTTPAdapter()\n+        s.mount(mixed_case_prefix, my_adapter)\n+\n         assert s.get_adapter(url_matching_prefix_with_different_case) is my_adapter\n \n     def test_header_remove_is_case_insensitive(self, httpbin):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#a05aac7007dd802401d59b6380ef95095836ed9b", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 4 | Lines Deleted: 4 | Files Changed: 2 | Hunks: 5 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 8 | Churn Cumulative: 6257 | Contributors (this commit): 147 | Commits (past 90d): 9 | Contributors (cumulative): 172 | DMM Complexity: None\n\nDIFF:\n@@ -8,7 +8,7 @@ This module provides a Session object to manage and persist settings across\n requests (cookies, auth, proxies).\n \"\"\"\n import os\n-import platform\n+import sys\n import time\n from collections import Mapping\n from datetime import timedelta\n@@ -38,7 +38,7 @@ from .status_codes import codes\n from .models import REDIRECT_STATI\n \n # Preferred clock, based on which one is more accurate on a given system.\n-if platform.system() == 'Windows':\n+if sys.platform == 'win32':\n     try:  # Python 3.4+\n         preferred_clock = time.perf_counter\n     except AttributeError:  # Earlier than Python 3.\n\n@@ -14,10 +14,10 @@ import collections\n import contextlib\n import io\n import os\n-import platform\n import re\n import socket\n import struct\n+import sys\n import warnings\n \n from .__version__ import __version__\n@@ -39,7 +39,7 @@ NETRC_FILES = ('.netrc', '_netrc')\n DEFAULT_CA_BUNDLE_PATH = certs.where()\n \n \n-if platform.system() == 'Windows':\n+if sys.platform == 'win32':\n     # provide a proxy_bypass version on Windows without DNS lookups\n \n     def proxy_bypass_registry(host):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#c86b09b3c67a437f8851d3be9232b0a1c8585e20", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 67 | Lines Deleted: 5 | Files Changed: 3 | Hunks: 9 | Methods Changed: 4 | Complexity Δ (Sum/Max): 9/7 | Churn Δ: 72 | Churn Cumulative: 5443 | Contributors (this commit): 117 | Commits (past 90d): 8 | Contributors (cumulative): 146 | DMM Complexity: 0.41379310344827586\n\nDIFF:\n@@ -28,9 +28,9 @@ from urllib3.exceptions import ResponseError\n \n from .models import Response\n from .compat import urlparse, basestring\n-from .utils import (DEFAULT_CA_BUNDLE_PATH, get_encoding_from_headers,\n-                    prepend_scheme_if_needed, get_auth_from_url, urldefragauth,\n-                    select_proxy)\n+from .utils import (DEFAULT_CA_BUNDLE_PATH, extract_zipped_paths,\n+                    get_encoding_from_headers, prepend_scheme_if_needed,\n+                    get_auth_from_url, urldefragauth, select_proxy)\n from .structures import CaseInsensitiveDict\n from .cookies import extract_cookies_to_jar\n from .exceptions import (ConnectionError, ConnectTimeout, ReadTimeout, SSLError,\n@@ -219,7 +219,7 @@ class HTTPAdapter(BaseAdapter):\n                 cert_loc = verify\n \n             if not cert_loc:\n-                cert_loc = DEFAULT_CA_BUNDLE_PATH\n+                cert_loc = extract_zipped_paths(DEFAULT_CA_BUNDLE_PATH)\n \n             if not cert_loc or not os.path.exists(cert_loc):\n                 raise IOError(\"Could not find a suitable TLS CA certificate bundle, \"\n\n@@ -18,7 +18,9 @@ import re\n import socket\n import struct\n import sys\n+import tempfile\n import warnings\n+import zipfile\n \n from .__version__ import __version__\n from . import certs\n@@ -216,6 +218,38 @@ def guess_filename(obj):\n         return os.path.basename(name)\n \n \n+def extract_zipped_paths(path):\n+    \"\"\"Replace nonexistant paths that look like they refer to a member of a zip\n+    archive with the location of an extracted copy of the target, or else\n+    just return the provided path unchanged.\n+    \"\"\"\n+    if os.path.exists(path):\n+        # this is already a valid path, no need to do anything further\n+        return path\n+\n+    # find the first valid part of the provided path and treat that as a zip archive\n+    # assume the rest of the path is the name of a member in the archive\n+    archive, member = os.path.split(path)\n+    while archive and not os.path.exists(archive):\n+        archive, prefix = os.path.split(archive)\n+        member = '/'.join([prefix, member])\n+\n+    if not zipfile.is_zipfile(archive):\n+        return path\n+\n+    zip_file = zipfile.ZipFile(archive)\n+    if member not in zip_file.namelist():\n+        return path\n+\n+    # we have a valid zip archive and a valid member of that archive\n+    tmp = tempfile.gettempdir()\n+    extracted_path = os.path.join(tmp, *member.split('/'))\n+    if not os.path.exists(extracted_path):\n+        extracted_path = zip_file.extract(member, path=tmp)\n+\n+    return extracted_path\n+\n+\n def from_key_val_list(value):\n     \"\"\"Take an object and test to see if it can be represented as a\n     dictionary. Unless it can not be represented as such, return an\n\n@@ -2,14 +2,16 @@\n \n import os\n import copy\n+import filecmp\n from io import BytesIO\n+import zipfile\n \n import pytest\n from requests import compat\n from requests.cookies import RequestsCookieJar\n from requests.structures import CaseInsensitiveDict\n from requests.utils import (\n-    address_in_network, dotted_netmask,\n+    address_in_network, dotted_netmask, extract_zipped_paths,\n     get_auth_from_url, get_encoding_from_headers,\n     get_encodings_from_content, get_environ_proxies,\n     guess_filename, guess_json_utf, is_ipv4_address,\n@@ -256,6 +258,32 @@ class TestGuessFilename:\n         assert isinstance(result, expected_type)\n \n \n+class TestExtractZippedPaths:\n+\n+    @pytest.mark.parametrize(\n+        'path', (\n+            '/',\n+            __file__,\n+            pytest.__file__,\n+            '/etc/invalid/location',\n+        ))\n+    def test_unzipped_paths_unchanged(self, path):\n+        assert path == extract_zipped_paths(path)\n+\n+    def test_zipped_paths_extracted(self, tmpdir):\n+        zipped_py = tmpdir.join('test.zip')\n+        with zipfile.ZipFile(zipped_py.strpath, 'w') as f:\n+            f.write(__file__)\n+\n+        _, name = os.path.splitdrive(__file__)\n+        zipped_path = os.path.join(zipped_py.strpath, name.lstrip(r'\\/'))\n+        extracted_path = extract_zipped_paths(zipped_path)\n+\n+        assert extracted_path != zipped_path\n+        assert os.path.exists(extracted_path)\n+        assert filecmp.cmp(extracted_path, __file__)\n+\n+\n class TestContentEncodingDetection:\n \n     def test_none(self):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#1dbaddd75e04365a822cf4bcf05f332a5f845ed6", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 12 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 3 | Complexity Δ (Sum/Max): 6/6 | Churn Δ: 12 | Churn Cumulative: 1567 | Contributors (this commit): 47 | Commits (past 90d): 1 | Contributors (cumulative): 47 | DMM Complexity: 0.5714285714285714\n\nDIFF:\n@@ -153,6 +153,18 @@ class HTTPDigestAuth(AuthBase):\n                     x = x.encode('utf-8')\n                 return hashlib.sha1(x).hexdigest()\n             hash_utf8 = sha_utf8\n+        elif _algorithm == 'SHA-256':\n+            def sha256_utf8(x):\n+                if isinstance(x, str):\n+                    x = x.encode('utf-8')\n+                return hashlib.sha256(x).hexdigest()\n+            hash_utf8 = sha256_utf8\n+        elif _algorithm == 'SHA-512':\n+            def sha512_utf8(x):\n+                if isinstance(x, str):\n+                    x = x.encode('utf-8')\n+                return hashlib.sha512(x).hexdigest()\n+            hash_utf8 = sha512_utf8\n \n         KD = lambda s, d: hash_utf8(\"%s:%s\" % (s, d))\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#9a8a826f226e6973d72914b4a4fc806e0b5036f4", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 24 | Lines Deleted: 2 | Files Changed: 3 | Hunks: 6 | Methods Changed: 2 | Complexity Δ (Sum/Max): 2/1 | Churn Δ: 26 | Churn Cumulative: 5974 | Contributors (this commit): 105 | Commits (past 90d): 11 | Contributors (cumulative): 128 | DMM Complexity: 1.0\n\nDIFF:\n@@ -13,6 +13,7 @@ import socket\n \n from urllib3.poolmanager import PoolManager, proxy_from_url\n from urllib3.response import HTTPResponse\n+from urllib3.util import parse_url\n from urllib3.util import Timeout as TimeoutSauce\n from urllib3.util.retry import Retry\n from urllib3.exceptions import ClosedPoolError\n@@ -34,7 +35,7 @@ from .utils import (DEFAULT_CA_BUNDLE_PATH, extract_zipped_paths,\n from .structures import CaseInsensitiveDict\n from .cookies import extract_cookies_to_jar\n from .exceptions import (ConnectionError, ConnectTimeout, ReadTimeout, SSLError,\n-                         ProxyError, RetryError, InvalidSchema)\n+                         ProxyError, RetryError, InvalidSchema, InvalidProxyURL)\n from .auth import _basic_auth_str\n \n try:\n@@ -300,6 +301,10 @@ class HTTPAdapter(BaseAdapter):\n \n         if proxy:\n             proxy = prepend_scheme_if_needed(proxy, 'http')\n+            proxy_url = parse_url(proxy)\n+            if not proxy_url.host:\n+                raise InvalidProxyURL(\"Please check proxy URL. It is malformed\"\n+                                      \" and could be missing the host.\")\n             proxy_manager = self.proxy_manager_for(proxy)\n             conn = proxy_manager.connection_from_url(url)\n         else:\n\n@@ -85,6 +85,10 @@ class InvalidHeader(RequestException, ValueError):\n     \"\"\"The header value provided was somehow invalid.\"\"\"\n \n \n+class InvalidProxyURL(InvalidURL):\n+    \"\"\"The proxy URL provided is invalid.\"\"\"\n+\n+\n class ChunkedEncodingError(RequestException):\n     \"\"\"The server declared chunked encoding but sent an invalid chunk.\"\"\"\n \n\n@@ -23,7 +23,7 @@ from requests.cookies import (\n from requests.exceptions import (\n     ConnectionError, ConnectTimeout, InvalidSchema, InvalidURL,\n     MissingSchema, ReadTimeout, Timeout, RetryError, TooManyRedirects,\n-    ProxyError, InvalidHeader, UnrewindableBodyError, SSLError)\n+    ProxyError, InvalidHeader, UnrewindableBodyError, SSLError, InvalidProxyURL)\n from requests.models import PreparedRequest\n from requests.structures import CaseInsensitiveDict\n from requests.sessions import SessionRedirectMixin\n@@ -526,6 +526,19 @@ class TestRequests:\n         with pytest.raises(ProxyError):\n             requests.get('http://localhost:1', proxies={'http': 'non-resolvable-address'})\n \n+    def test_proxy_error_on_bad_url(self, httpbin, httpbin_secure):\n+        with pytest.raises(InvalidProxyURL):\n+            requests.get(httpbin_secure(), proxies={'https': 'http:/badproxyurl:3128'})\n+\n+        with pytest.raises(InvalidProxyURL):\n+            requests.get(httpbin(), proxies={'http': 'http://:8080'})\n+\n+        with pytest.raises(InvalidProxyURL):\n+            requests.get(httpbin_secure(), proxies={'https': 'https://'})\n+\n+        with pytest.raises(InvalidProxyURL):\n+            requests.get(httpbin(), proxies={'http': 'http:///example.com:8080'})\n+\n     def test_basicauth_with_netrc(self, httpbin):\n         auth = ('user', 'pass')\n         wrong_auth = ('wronguser', 'wrongpass')\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#775cde0914265d7dab2bc2501ed7abe6b85c4bae", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 9731 | Contributors (this commit): 178 | Commits (past 90d): 1 | Contributors (cumulative): 178 | DMM Complexity: None\n\nDIFF:\n@@ -686,11 +686,11 @@ class Response(object):\n \n     @property\n     def ok(self):\n-        \"\"\"Returns True if :attr:`status_code` is less than 400.\n+        \"\"\"Returns True if :attr:`status_code` is less than 400, False if not.\n \n         This attribute checks if the status code of the response is between\n         400 and 600 to see if there was a client error or a server error. If\n-        the status code, is between 200 and 400, this will return True. This\n+        the status code is between 200 and 400, this will return True. This\n         is **not** a check to see if the response code is ``200 OK``.\n         \"\"\"\n         try:\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#acd2645444d280ac0c5d2d227fdd222cb1ac609c", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 10 | Lines Deleted: 3 | Files Changed: 2 | Hunks: 5 | Methods Changed: 3 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 13 | Churn Cumulative: 4237 | Contributors (this commit): 85 | Commits (past 90d): 5 | Contributors (cumulative): 104 | DMM Complexity: 1.0\n\nDIFF:\n@@ -52,8 +52,10 @@ if sys.platform == 'win32':\n         try:\n             internetSettings = winreg.OpenKey(winreg.HKEY_CURRENT_USER,\n                 r'Software\\Microsoft\\Windows\\CurrentVersion\\Internet Settings')\n-            proxyEnable = winreg.QueryValueEx(internetSettings,\n-                                              'ProxyEnable')[0]\n+            # ProxyEnable could be REG_SZ or REG_DWORD, normalizing it\n+            proxyEnable = int(winreg.QueryValueEx(internetSettings,\n+                                              'ProxyEnable')[0])\n+            # ProxyOverride is almost always a string\n             proxyOverride = winreg.QueryValueEx(internetSettings,\n                                                 'ProxyOverride')[0]\n         except OSError:\n\n@@ -5,6 +5,7 @@ import copy\n import filecmp\n from io import BytesIO\n import zipfile\n+from collections import deque\n \n import pytest\n from requests import compat\n@@ -666,6 +667,7 @@ def test_should_bypass_proxies_win_registry(url, expected, override,\n             pass\n \n     ie_settings = RegHandle()\n+    proxyEnableValues = deque([1, \"1\"])\n \n     def OpenKey(key, subkey):\n         return ie_settings\n@@ -673,7 +675,9 @@ def test_should_bypass_proxies_win_registry(url, expected, override,\n     def QueryValueEx(key, value_name):\n         if key is ie_settings:\n             if value_name == 'ProxyEnable':\n-                return [1]\n+                # this could be a string (REG_SZ) or a 32-bit number (REG_DWORD)\n+                proxyEnableValues.rotate()\n+                return [proxyEnableValues[0]]\n             elif value_name == 'ProxyOverride':\n                 return [override]\n \n@@ -684,6 +688,7 @@ def test_should_bypass_proxies_win_registry(url, expected, override,\n     monkeypatch.setenv('NO_PROXY', '')\n     monkeypatch.setattr(winreg, 'OpenKey', OpenKey)\n     monkeypatch.setattr(winreg, 'QueryValueEx', QueryValueEx)\n+    assert should_bypass_proxies(url, None) == expected\n \n \n @pytest.mark.parametrize(\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#19919b44c4af95f125704c902acecdf83d70a3e4", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 28 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 3 | Methods Changed: 2 | Complexity Δ (Sum/Max): 7/7 | Churn Δ: 28 | Churn Cumulative: 161 | Contributors (this commit): 13 | Commits (past 90d): 1 | Contributors (cumulative): 13 | DMM Complexity: 1.0\n\nDIFF:\n@@ -1,5 +1,22 @@\n # -*- coding: utf-8 -*-\n \n+\"\"\"\n+The ``codes`` object defines a mapping from common names for HTTP statuses\n+to their numerical codes, accessible either as attributes or as dictionary\n+items.\n+\n+>>> requests.codes['temporary_redirect']\n+307\n+>>> requests.codes.teapot\n+418\n+>>> requests.codes['\\o/']\n+200\n+\n+Some codes have multiple names, and both upper- and lower-case versions of\n+the names are allowed. For example, ``codes.ok``, ``codes.OK``, and\n+``codes.okay`` all correspond to the HTTP status code 200.\n+\"\"\"\n+\n from .structures import LookupDict\n \n _codes = {\n@@ -84,8 +101,19 @@ _codes = {\n \n codes = LookupDict(name='status_codes')\n \n+def _init():\n     for code, titles in _codes.items():\n         for title in titles:\n             setattr(codes, title, code)\n             if not title.startswith(('\\\\', '/')):\n                 setattr(codes, title.upper(), code)\n+\n+    def doc(code):\n+        names = ', '.join('``%s``' % n for n in _codes[code])\n+        return '* %d: %s' % (code, names)\n+\n+    global __doc__\n+    __doc__ = (__doc__ + '\\n' +\n+               '\\n'.join(doc(code) for code in sorted(_codes)))\n+\n+_init()\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
