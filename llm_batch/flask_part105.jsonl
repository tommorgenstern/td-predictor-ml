{"custom_id": "flask#f8cb0b0dd5ea30729db6b131aeeb30915ea4860b", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 6 | Lines Deleted: 4 | Files Changed: 1 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 10 | Churn Cumulative: 2204 | Contributors (this commit): 24 | Commits (past 90d): 17 | Contributors (cumulative): 24 | DMM Complexity: 0.0\n\nDIFF:\n@@ -1924,15 +1924,17 @@ class Flask(Scaffold):\n                     raise TypeError(\n                         f\"{e}\\nThe view function did not return a valid\"\n                         \" response. The return type must be a string,\"\n-                        \" dict, list, tuple, Response instance, or WSGI\"\n-                        f\" callable, but it was a {type(rv).__name__}.\"\n+                        \" dict, list, tuple with headers or status,\"\n+                        \" Response instance, or WSGI callable, but it\"\n+                        f\" was a {type(rv).__name__}.\"\n                     ).with_traceback(sys.exc_info()[2]) from None\n             else:\n                 raise TypeError(\n                     \"The view function did not return a valid\"\n                     \" response. The return type must be a string,\"\n-                    \" dict, list, tuple, Response instance, or WSGI\"\n-                    f\" callable, but it was a {type(rv).__name__}.\"\n+                    \" dict, list, tuple with headers or status,\"\n+                    \" Response instance, or WSGI callable, but it was a\"\n+                    f\" {type(rv).__name__}.\"\n                 )\n \n         rv = t.cast(Response, rv)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#60b845ebabeb77e401186f4b83de21d3f9c6a9d7", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 18 | Lines Deleted: 2 | Files Changed: 2 | Hunks: 2 | Methods Changed: 3 | Complexity Δ (Sum/Max): 2/2 | Churn Δ: 20 | Churn Cumulative: 288 | Contributors (this commit): 10 | Commits (past 90d): 11 | Contributors (cumulative): 12 | DMM Complexity: 1.0\n\nDIFF:\n@@ -7,7 +7,13 @@ if t.TYPE_CHECKING:  # pragma: no cover\n \n # The possible types that are directly convertible or are a Response object.\n ResponseValue = t.Union[\n-    \"Response\", str, bytes, list, t.Dict[str, t.Any], t.Iterator[str], t.Iterator[bytes]\n+    \"Response\",\n+    str,\n+    bytes,\n+    t.List[t.Any],\n+    t.Dict[str, t.Any],\n+    t.Iterator[str],\n+    t.Iterator[bytes],\n ]\n \n # the possible types for an individual HTTP header\n\n@@ -25,7 +25,17 @@ def hello_bytes() -> bytes:\n \n @app.route(\"/json\")\n def hello_json() -> Response:\n-    return jsonify({\"response\": \"Hello, World!\"})\n+    return jsonify(\"Hello, World!\")\n+\n+\n+@app.route(\"/json/dict\")\n+def hello_json_dict() -> t.Dict[str, t.Any]:\n+    return {\"response\": \"Hello, World!\"}\n+\n+\n+@app.route(\"/json/dict\")\n+def hello_json_list() -> t.List[t.Any]:\n+    return [{\"message\": \"Hello\"}, {\"message\": \"World\"}]\n \n \n @app.route(\"/generator\")\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#9dfcb90c92e13f2d92cb723cb834b5e0d666a2f5", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 1 | Churn Cumulative: 665 | Contributors (this commit): 9 | Commits (past 90d): 3 | Contributors (cumulative): 9 | DMM Complexity: None\n\nDIFF:\n@@ -23,6 +23,7 @@ class JSONEncoder(_json.JSONEncoder):\n     -   :class:`datetime.datetime` and :class:`datetime.date` are\n         serialized to :rfc:`822` strings. This is the same as the HTTP\n         date format.\n+    -   :class:`decimal.Decimal` is serialized to a string.\n     -   :class:`uuid.UUID` is serialized to a string.\n     -   :class:`dataclasses.dataclass` is passed to\n         :func:`dataclasses.asdict`.\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#9b44bf2818d8e3cde422ad7f43fb33dfc6737289", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 123 | Lines Deleted: 76 | Files Changed: 6 | Hunks: 55 | Methods Changed: 78 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 199 | Churn Cumulative: 5660 | Contributors (this commit): 36 | Commits (past 90d): 56 | Contributors (cumulative): 66 | DMM Complexity: 0.0\n\nDIFF:\n@@ -74,6 +74,17 @@ if t.TYPE_CHECKING:  # pragma: no cover\n     from .testing import FlaskClient\n     from .testing import FlaskCliRunner\n \n+T_before_first_request = t.TypeVar(\n+    \"T_before_first_request\", bound=ft.BeforeFirstRequestCallable\n+)\n+T_shell_context_processor = t.TypeVar(\n+    \"T_shell_context_processor\", bound=ft.ShellContextProcessorCallable\n+)\n+T_teardown = t.TypeVar(\"T_teardown\", bound=ft.TeardownCallable)\n+T_template_filter = t.TypeVar(\"T_template_filter\", bound=ft.TemplateFilterCallable)\n+T_template_global = t.TypeVar(\"T_template_global\", bound=ft.TemplateGlobalCallable)\n+T_template_test = t.TypeVar(\"T_template_test\", bound=ft.TemplateTestCallable)\n+\n if sys.version_info >= (3, 8):\n     iscoroutinefunction = inspect.iscoroutinefunction\n else:\n@@ -472,7 +483,7 @@ class Flask(Scaffold):\n         #: when a shell context is created.\n         #:\n         #: .. versionadded:: 0.11\n-        self.shell_context_processors: t.List[t.Callable[[], t.Dict[str, t.Any]]] = []\n+        self.shell_context_processors: t.List[ft.ShellContextProcessorCallable] = []\n \n         #: Maps registered blueprint names to blueprint objects. The\n         #: dict retains the order the blueprints were registered in.\n@@ -1075,7 +1086,7 @@ class Flask(Scaffold):\n         self,\n         rule: str,\n         endpoint: t.Optional[str] = None,\n-        view_func: t.Optional[ft.ViewCallable] = None,\n+        view_func: t.Optional[ft.RouteCallable] = None,\n         provide_automatic_options: t.Optional[bool] = None,\n         **options: t.Any,\n     ) -> None:\n@@ -1132,7 +1143,7 @@ class Flask(Scaffold):\n     @setupmethod\n     def template_filter(\n         self, name: t.Optional[str] = None\n-    ) -> t.Callable[[ft.TemplateFilterCallable], ft.TemplateFilterCallable]:\n+    ) -> t.Callable[[T_template_filter], T_template_filter]:\n         \"\"\"A decorator that is used to register custom template filter.\n         You can specify a name for the filter, otherwise the function\n         name will be used. Example::\n@@ -1145,7 +1156,7 @@ class Flask(Scaffold):\n                      function name will be used.\n         \"\"\"\n \n-        def decorator(f: ft.TemplateFilterCallable) -> ft.TemplateFilterCallable:\n+        def decorator(f: T_template_filter) -> T_template_filter:\n             self.add_template_filter(f, name=name)\n             return f\n \n@@ -1166,7 +1177,7 @@ class Flask(Scaffold):\n     @setupmethod\n     def template_test(\n         self, name: t.Optional[str] = None\n-    ) -> t.Callable[[ft.TemplateTestCallable], ft.TemplateTestCallable]:\n+    ) -> t.Callable[[T_template_test], T_template_test]:\n         \"\"\"A decorator that is used to register custom template test.\n         You can specify a name for the test, otherwise the function\n         name will be used. Example::\n@@ -1186,7 +1197,7 @@ class Flask(Scaffold):\n                      function name will be used.\n         \"\"\"\n \n-        def decorator(f: ft.TemplateTestCallable) -> ft.TemplateTestCallable:\n+        def decorator(f: T_template_test) -> T_template_test:\n             self.add_template_test(f, name=name)\n             return f\n \n@@ -1209,7 +1220,7 @@ class Flask(Scaffold):\n     @setupmethod\n     def template_global(\n         self, name: t.Optional[str] = None\n-    ) -> t.Callable[[ft.TemplateGlobalCallable], ft.TemplateGlobalCallable]:\n+    ) -> t.Callable[[T_template_global], T_template_global]:\n         \"\"\"A decorator that is used to register a custom template global function.\n         You can specify a name for the global function, otherwise the function\n         name will be used. Example::\n@@ -1224,7 +1235,7 @@ class Flask(Scaffold):\n                      function name will be used.\n         \"\"\"\n \n-        def decorator(f: ft.TemplateGlobalCallable) -> ft.TemplateGlobalCallable:\n+        def decorator(f: T_template_global) -> T_template_global:\n             self.add_template_global(f, name=name)\n             return f\n \n@@ -1245,9 +1256,7 @@ class Flask(Scaffold):\n         self.jinja_env.globals[name or f.__name__] = f\n \n     @setupmethod\n-    def before_first_request(\n-        self, f: ft.BeforeFirstRequestCallable\n-    ) -> ft.BeforeFirstRequestCallable:\n+    def before_first_request(self, f: T_before_first_request) -> T_before_first_request:\n         \"\"\"Registers a function to be run before the first request to this\n         instance of the application.\n \n@@ -1273,7 +1282,7 @@ class Flask(Scaffold):\n         return f\n \n     @setupmethod\n-    def teardown_appcontext(self, f: ft.TeardownCallable) -> ft.TeardownCallable:\n+    def teardown_appcontext(self, f: T_teardown) -> T_teardown:\n         \"\"\"Registers a function to be called when the application context\n         ends.  These functions are typically also called when the request\n         context is popped.\n@@ -1306,7 +1315,9 @@ class Flask(Scaffold):\n         return f\n \n     @setupmethod\n-    def shell_context_processor(self, f: t.Callable) -> t.Callable:\n+    def shell_context_processor(\n+        self, f: T_shell_context_processor\n+    ) -> T_shell_context_processor:\n         \"\"\"Registers a shell context processor function.\n \n         .. versionadded:: 0.11\n\n@@ -13,6 +13,23 @@ if t.TYPE_CHECKING:  # pragma: no cover\n     from .app import Flask\n \n DeferredSetupFunction = t.Callable[[\"BlueprintSetupState\"], t.Callable]\n+T_after_request = t.TypeVar(\"T_after_request\", bound=ft.AfterRequestCallable)\n+T_before_first_request = t.TypeVar(\n+    \"T_before_first_request\", bound=ft.BeforeFirstRequestCallable\n+)\n+T_before_request = t.TypeVar(\"T_before_request\", bound=ft.BeforeRequestCallable)\n+T_error_handler = t.TypeVar(\"T_error_handler\", bound=ft.ErrorHandlerCallable)\n+T_teardown = t.TypeVar(\"T_teardown\", bound=ft.TeardownCallable)\n+T_template_context_processor = t.TypeVar(\n+    \"T_template_context_processor\", bound=ft.TemplateContextProcessorCallable\n+)\n+T_template_filter = t.TypeVar(\"T_template_filter\", bound=ft.TemplateFilterCallable)\n+T_template_global = t.TypeVar(\"T_template_global\", bound=ft.TemplateGlobalCallable)\n+T_template_test = t.TypeVar(\"T_template_test\", bound=ft.TemplateTestCallable)\n+T_url_defaults = t.TypeVar(\"T_url_defaults\", bound=ft.URLDefaultCallable)\n+T_url_value_preprocessor = t.TypeVar(\n+    \"T_url_value_preprocessor\", bound=ft.URLValuePreprocessorCallable\n+)\n \n \n class BlueprintSetupState:\n@@ -236,7 +253,7 @@ class Blueprint(Scaffold):\n             if state.first_registration:\n                 func(state)\n \n-        return self.record(update_wrapper(wrapper, func))\n+        self.record(update_wrapper(wrapper, func))\n \n     def make_setup_state(\n         self, app: \"Flask\", options: dict, first_registration: bool = False\n@@ -392,7 +409,7 @@ class Blueprint(Scaffold):\n         self,\n         rule: str,\n         endpoint: t.Optional[str] = None,\n-        view_func: t.Optional[ft.ViewCallable] = None,\n+        view_func: t.Optional[ft.RouteCallable] = None,\n         provide_automatic_options: t.Optional[bool] = None,\n         **options: t.Any,\n     ) -> None:\n@@ -418,7 +435,7 @@ class Blueprint(Scaffold):\n     @setupmethod\n     def app_template_filter(\n         self, name: t.Optional[str] = None\n-    ) -> t.Callable[[ft.TemplateFilterCallable], ft.TemplateFilterCallable]:\n+    ) -> t.Callable[[T_template_filter], T_template_filter]:\n         \"\"\"Register a custom template filter, available application wide.  Like\n         :meth:`Flask.template_filter` but for a blueprint.\n \n@@ -426,7 +443,7 @@ class Blueprint(Scaffold):\n                      function name will be used.\n         \"\"\"\n \n-        def decorator(f: ft.TemplateFilterCallable) -> ft.TemplateFilterCallable:\n+        def decorator(f: T_template_filter) -> T_template_filter:\n             self.add_app_template_filter(f, name=name)\n             return f\n \n@@ -452,7 +469,7 @@ class Blueprint(Scaffold):\n     @setupmethod\n     def app_template_test(\n         self, name: t.Optional[str] = None\n-    ) -> t.Callable[[ft.TemplateTestCallable], ft.TemplateTestCallable]:\n+    ) -> t.Callable[[T_template_test], T_template_test]:\n         \"\"\"Register a custom template test, available application wide.  Like\n         :meth:`Flask.template_test` but for a blueprint.\n \n@@ -462,7 +479,7 @@ class Blueprint(Scaffold):\n                      function name will be used.\n         \"\"\"\n \n-        def decorator(f: ft.TemplateTestCallable) -> ft.TemplateTestCallable:\n+        def decorator(f: T_template_test) -> T_template_test:\n             self.add_app_template_test(f, name=name)\n             return f\n \n@@ -490,7 +507,7 @@ class Blueprint(Scaffold):\n     @setupmethod\n     def app_template_global(\n         self, name: t.Optional[str] = None\n-    ) -> t.Callable[[ft.TemplateGlobalCallable], ft.TemplateGlobalCallable]:\n+    ) -> t.Callable[[T_template_global], T_template_global]:\n         \"\"\"Register a custom template global, available application wide.  Like\n         :meth:`Flask.template_global` but for a blueprint.\n \n@@ -500,7 +517,7 @@ class Blueprint(Scaffold):\n                      function name will be used.\n         \"\"\"\n \n-        def decorator(f: ft.TemplateGlobalCallable) -> ft.TemplateGlobalCallable:\n+        def decorator(f: T_template_global) -> T_template_global:\n             self.add_app_template_global(f, name=name)\n             return f\n \n@@ -526,9 +543,7 @@ class Blueprint(Scaffold):\n         self.record_once(register_template)\n \n     @setupmethod\n-    def before_app_request(\n-        self, f: ft.BeforeRequestCallable\n-    ) -> ft.BeforeRequestCallable:\n+    def before_app_request(self, f: T_before_request) -> T_before_request:\n         \"\"\"Like :meth:`Flask.before_request`.  Such a function is executed\n         before each request, even if outside of a blueprint.\n         \"\"\"\n@@ -539,8 +554,8 @@ class Blueprint(Scaffold):\n \n     @setupmethod\n     def before_app_first_request(\n-        self, f: ft.BeforeFirstRequestCallable\n-    ) -> ft.BeforeFirstRequestCallable:\n+        self, f: T_before_first_request\n+    ) -> T_before_first_request:\n         \"\"\"Like :meth:`Flask.before_first_request`.  Such a function is\n         executed before the first request to the application.\n \n@@ -560,7 +575,8 @@ class Blueprint(Scaffold):\n         self.record_once(lambda s: s.app.before_first_request_funcs.append(f))\n         return f\n \n-    def after_app_request(self, f: ft.AfterRequestCallable) -> ft.AfterRequestCallable:\n+    @setupmethod\n+    def after_app_request(self, f: T_after_request) -> T_after_request:\n         \"\"\"Like :meth:`Flask.after_request` but for a blueprint.  Such a function\n         is executed after each request, even if outside of the blueprint.\n         \"\"\"\n@@ -570,7 +586,7 @@ class Blueprint(Scaffold):\n         return f\n \n     @setupmethod\n-    def teardown_app_request(self, f: ft.TeardownCallable) -> ft.TeardownCallable:\n+    def teardown_app_request(self, f: T_teardown) -> T_teardown:\n         \"\"\"Like :meth:`Flask.teardown_request` but for a blueprint.  Such a\n         function is executed when tearing down each request, even if outside of\n         the blueprint.\n@@ -582,8 +598,8 @@ class Blueprint(Scaffold):\n \n     @setupmethod\n     def app_context_processor(\n-        self, f: ft.TemplateContextProcessorCallable\n-    ) -> ft.TemplateContextProcessorCallable:\n+        self, f: T_template_context_processor\n+    ) -> T_template_context_processor:\n         \"\"\"Like :meth:`Flask.context_processor` but for a blueprint.  Such a\n         function is executed each request, even if outside of the blueprint.\n         \"\"\"\n@@ -595,12 +611,12 @@ class Blueprint(Scaffold):\n     @setupmethod\n     def app_errorhandler(\n         self, code: t.Union[t.Type[Exception], int]\n-    ) -> t.Callable[[ft.ErrorHandlerDecorator], ft.ErrorHandlerDecorator]:\n+    ) -> t.Callable[[T_error_handler], T_error_handler]:\n         \"\"\"Like :meth:`Flask.errorhandler` but for a blueprint.  This\n         handler is used for all requests, even if outside of the blueprint.\n         \"\"\"\n \n-        def decorator(f: ft.ErrorHandlerDecorator) -> ft.ErrorHandlerDecorator:\n+        def decorator(f: T_error_handler) -> T_error_handler:\n             self.record_once(lambda s: s.app.errorhandler(code)(f))\n             return f\n \n@@ -608,8 +624,8 @@ class Blueprint(Scaffold):\n \n     @setupmethod\n     def app_url_value_preprocessor(\n-        self, f: ft.URLValuePreprocessorCallable\n-    ) -> ft.URLValuePreprocessorCallable:\n+        self, f: T_url_value_preprocessor\n+    ) -> T_url_value_preprocessor:\n         \"\"\"Same as :meth:`url_value_preprocessor` but application wide.\"\"\"\n         self.record_once(\n             lambda s: s.app.url_value_preprocessors.setdefault(None, []).append(f)\n@@ -617,7 +633,7 @@ class Blueprint(Scaffold):\n         return f\n \n     @setupmethod\n-    def app_url_defaults(self, f: ft.URLDefaultCallable) -> ft.URLDefaultCallable:\n+    def app_url_defaults(self, f: T_url_defaults) -> T_url_defaults:\n         \"\"\"Same as :meth:`url_defaults` but application wide.\"\"\"\n         self.record_once(\n             lambda s: s.app.url_default_functions.setdefault(None, []).append(f)\n\n@@ -28,6 +28,18 @@ if t.TYPE_CHECKING:  # pragma: no cover\n _sentinel = object()\n \n F = t.TypeVar(\"F\", bound=t.Callable[..., t.Any])\n+T_after_request = t.TypeVar(\"T_after_request\", bound=ft.AfterRequestCallable)\n+T_before_request = t.TypeVar(\"T_before_request\", bound=ft.BeforeRequestCallable)\n+T_error_handler = t.TypeVar(\"T_error_handler\", bound=ft.ErrorHandlerCallable)\n+T_teardown = t.TypeVar(\"T_teardown\", bound=ft.TeardownCallable)\n+T_template_context_processor = t.TypeVar(\n+    \"T_template_context_processor\", bound=ft.TemplateContextProcessorCallable\n+)\n+T_url_defaults = t.TypeVar(\"T_url_defaults\", bound=ft.URLDefaultCallable)\n+T_url_value_preprocessor = t.TypeVar(\n+    \"T_url_value_preprocessor\", bound=ft.URLValuePreprocessorCallable\n+)\n+T_route = t.TypeVar(\"T_route\", bound=ft.RouteCallable)\n \n \n def setupmethod(f: F) -> F:\n@@ -352,16 +364,14 @@ class Scaffold:\n         method: str,\n         rule: str,\n         options: dict,\n-    ) -> t.Callable[[ft.RouteDecorator], ft.RouteDecorator]:\n+    ) -> t.Callable[[T_route], T_route]:\n         if \"methods\" in options:\n             raise TypeError(\"Use the 'route' decorator to use the 'methods' argument.\")\n \n         return self.route(rule, methods=[method], **options)\n \n     @setupmethod\n-    def get(\n-        self, rule: str, **options: t.Any\n-    ) -> t.Callable[[ft.RouteDecorator], ft.RouteDecorator]:\n+    def get(self, rule: str, **options: t.Any) -> t.Callable[[T_route], T_route]:\n         \"\"\"Shortcut for :meth:`route` with ``methods=[\"GET\"]``.\n \n         .. versionadded:: 2.0\n@@ -369,9 +379,7 @@ class Scaffold:\n         return self._method_route(\"GET\", rule, options)\n \n     @setupmethod\n-    def post(\n-        self, rule: str, **options: t.Any\n-    ) -> t.Callable[[ft.RouteDecorator], ft.RouteDecorator]:\n+    def post(self, rule: str, **options: t.Any) -> t.Callable[[T_route], T_route]:\n         \"\"\"Shortcut for :meth:`route` with ``methods=[\"POST\"]``.\n \n         .. versionadded:: 2.0\n@@ -379,9 +387,7 @@ class Scaffold:\n         return self._method_route(\"POST\", rule, options)\n \n     @setupmethod\n-    def put(\n-        self, rule: str, **options: t.Any\n-    ) -> t.Callable[[ft.RouteDecorator], ft.RouteDecorator]:\n+    def put(self, rule: str, **options: t.Any) -> t.Callable[[T_route], T_route]:\n         \"\"\"Shortcut for :meth:`route` with ``methods=[\"PUT\"]``.\n \n         .. versionadded:: 2.0\n@@ -389,9 +395,7 @@ class Scaffold:\n         return self._method_route(\"PUT\", rule, options)\n \n     @setupmethod\n-    def delete(\n-        self, rule: str, **options: t.Any\n-    ) -> t.Callable[[ft.RouteDecorator], ft.RouteDecorator]:\n+    def delete(self, rule: str, **options: t.Any) -> t.Callable[[T_route], T_route]:\n         \"\"\"Shortcut for :meth:`route` with ``methods=[\"DELETE\"]``.\n \n         .. versionadded:: 2.0\n@@ -399,9 +403,7 @@ class Scaffold:\n         return self._method_route(\"DELETE\", rule, options)\n \n     @setupmethod\n-    def patch(\n-        self, rule: str, **options: t.Any\n-    ) -> t.Callable[[ft.RouteDecorator], ft.RouteDecorator]:\n+    def patch(self, rule: str, **options: t.Any) -> t.Callable[[T_route], T_route]:\n         \"\"\"Shortcut for :meth:`route` with ``methods=[\"PATCH\"]``.\n \n         .. versionadded:: 2.0\n@@ -409,9 +411,7 @@ class Scaffold:\n         return self._method_route(\"PATCH\", rule, options)\n \n     @setupmethod\n-    def route(\n-        self, rule: str, **options: t.Any\n-    ) -> t.Callable[[ft.RouteDecorator], ft.RouteDecorator]:\n+    def route(self, rule: str, **options: t.Any) -> t.Callable[[T_route], T_route]:\n         \"\"\"Decorate a view function to register it with the given URL\n         rule and options. Calls :meth:`add_url_rule`, which has more\n         details about the implementation.\n@@ -435,7 +435,7 @@ class Scaffold:\n             :class:`~werkzeug.routing.Rule` object.\n         \"\"\"\n \n-        def decorator(f: ft.RouteDecorator) -> ft.RouteDecorator:\n+        def decorator(f: T_route) -> T_route:\n             endpoint = options.pop(\"endpoint\", None)\n             self.add_url_rule(rule, endpoint, f, **options)\n             return f\n@@ -447,7 +447,7 @@ class Scaffold:\n         self,\n         rule: str,\n         endpoint: t.Optional[str] = None,\n-        view_func: t.Optional[ft.ViewCallable] = None,\n+        view_func: t.Optional[ft.RouteCallable] = None,\n         provide_automatic_options: t.Optional[bool] = None,\n         **options: t.Any,\n     ) -> None:\n@@ -511,7 +511,7 @@ class Scaffold:\n         raise NotImplementedError\n \n     @setupmethod\n-    def endpoint(self, endpoint: str) -> t.Callable:\n+    def endpoint(self, endpoint: str) -> t.Callable[[F], F]:\n         \"\"\"Decorate a view function to register it for the given\n         endpoint. Used if a rule is added without a ``view_func`` with\n         :meth:`add_url_rule`.\n@@ -528,14 +528,14 @@ class Scaffold:\n             function.\n         \"\"\"\n \n-        def decorator(f):\n+        def decorator(f: F) -> F:\n             self.view_functions[endpoint] = f\n             return f\n \n         return decorator\n \n     @setupmethod\n-    def before_request(self, f: ft.BeforeRequestCallable) -> ft.BeforeRequestCallable:\n+    def before_request(self, f: T_before_request) -> T_before_request:\n         \"\"\"Register a function to run before each request.\n \n         For example, this can be used to open a database connection, or\n@@ -557,7 +557,7 @@ class Scaffold:\n         return f\n \n     @setupmethod\n-    def after_request(self, f: ft.AfterRequestCallable) -> ft.AfterRequestCallable:\n+    def after_request(self, f: T_after_request) -> T_after_request:\n         \"\"\"Register a function to run after each request to this object.\n \n         The function is called with the response object, and must return\n@@ -573,7 +573,7 @@ class Scaffold:\n         return f\n \n     @setupmethod\n-    def teardown_request(self, f: ft.TeardownCallable) -> ft.TeardownCallable:\n+    def teardown_request(self, f: T_teardown) -> T_teardown:\n         \"\"\"Register a function to be run at the end of each request,\n         regardless of whether there was an exception or not.  These functions\n         are executed when the request context is popped, even if not an\n@@ -606,16 +606,18 @@ class Scaffold:\n \n     @setupmethod\n     def context_processor(\n-        self, f: ft.TemplateContextProcessorCallable\n-    ) -> ft.TemplateContextProcessorCallable:\n+        self,\n+        f: T_template_context_processor,\n+    ) -> T_template_context_processor:\n         \"\"\"Registers a template context processor function.\"\"\"\n         self.template_context_processors[None].append(f)\n         return f\n \n     @setupmethod\n     def url_value_preprocessor(\n-        self, f: ft.URLValuePreprocessorCallable\n-    ) -> ft.URLValuePreprocessorCallable:\n+        self,\n+        f: T_url_value_preprocessor,\n+    ) -> T_url_value_preprocessor:\n         \"\"\"Register a URL value preprocessor function for all view\n         functions in the application. These functions will be called before the\n         :meth:`before_request` functions.\n@@ -632,7 +634,7 @@ class Scaffold:\n         return f\n \n     @setupmethod\n-    def url_defaults(self, f: ft.URLDefaultCallable) -> ft.URLDefaultCallable:\n+    def url_defaults(self, f: T_url_defaults) -> T_url_defaults:\n         \"\"\"Callback function for URL defaults for all view functions of the\n         application.  It's called with the endpoint and values and should\n         update the values passed in place.\n@@ -643,7 +645,7 @@ class Scaffold:\n     @setupmethod\n     def errorhandler(\n         self, code_or_exception: t.Union[t.Type[Exception], int]\n-    ) -> t.Callable[[ft.ErrorHandlerDecorator], ft.ErrorHandlerDecorator]:\n+    ) -> t.Callable[[T_error_handler], T_error_handler]:\n         \"\"\"Register a function to handle errors by code or exception class.\n \n         A decorator that is used to register a function given an\n@@ -673,7 +675,7 @@ class Scaffold:\n                                   an arbitrary exception\n         \"\"\"\n \n-        def decorator(f: ft.ErrorHandlerDecorator) -> ft.ErrorHandlerDecorator:\n+        def decorator(f: T_error_handler) -> T_error_handler:\n             self.register_error_handler(code_or_exception, f)\n             return f\n \n\n@@ -42,10 +42,22 @@ ResponseReturnValue = t.Union[\n ResponseClass = t.TypeVar(\"ResponseClass\", bound=\"Response\")\n \n AppOrBlueprintKey = t.Optional[str]  # The App key is None, whereas blueprints are named\n-AfterRequestCallable = t.Callable[[ResponseClass], ResponseClass]\n-BeforeFirstRequestCallable = t.Callable[[], None]\n-BeforeRequestCallable = t.Callable[[], t.Optional[ResponseReturnValue]]\n-TeardownCallable = t.Callable[[t.Optional[BaseException]], None]\n+AfterRequestCallable = t.Union[\n+    t.Callable[[ResponseClass], ResponseClass],\n+    t.Callable[[ResponseClass], t.Awaitable[ResponseClass]],\n+]\n+BeforeFirstRequestCallable = t.Union[\n+    t.Callable[[], None], t.Callable[[], t.Awaitable[None]]\n+]\n+BeforeRequestCallable = t.Union[\n+    t.Callable[[], t.Optional[ResponseReturnValue]],\n+    t.Callable[[], t.Awaitable[t.Optional[ResponseReturnValue]]],\n+]\n+ShellContextProcessorCallable = t.Callable[[], t.Dict[str, t.Any]]\n+TeardownCallable = t.Union[\n+    t.Callable[[t.Optional[BaseException]], None],\n+    t.Callable[[t.Optional[BaseException]], t.Awaitable[None]],\n+]\n TemplateContextProcessorCallable = t.Callable[[], t.Dict[str, t.Any]]\n TemplateFilterCallable = t.Callable[..., t.Any]\n TemplateGlobalCallable = t.Callable[..., t.Any]\n@@ -60,7 +72,8 @@ URLValuePreprocessorCallable = t.Callable[[t.Optional[str], t.Optional[dict]], N\n # https://github.com/pallets/flask/issues/4295\n # https://github.com/pallets/flask/issues/4297\n ErrorHandlerCallable = t.Callable[[t.Any], ResponseReturnValue]\n-ErrorHandlerDecorator = t.TypeVar(\"ErrorHandlerDecorator\", bound=ErrorHandlerCallable)\n \n-ViewCallable = t.Callable[..., ResponseReturnValue]\n-RouteDecorator = t.TypeVar(\"RouteDecorator\", bound=ViewCallable)\n+RouteCallable = t.Union[\n+    t.Callable[..., ResponseReturnValue],\n+    t.Callable[..., t.Awaitable[ResponseReturnValue]],\n+]\n\n@@ -82,7 +82,7 @@ class View:\n     @classmethod\n     def as_view(\n         cls, name: str, *class_args: t.Any, **class_kwargs: t.Any\n-    ) -> ft.ViewCallable:\n+    ) -> ft.RouteCallable:\n         \"\"\"Convert the class into a view function that can be registered\n         for a route.\n \n\n@@ -84,6 +84,11 @@ def return_template_stream() -> t.Iterator[str]:\n     return stream_template(\"index.html\", name=\"Hello\")\n \n \n+@app.route(\"/async\")\n+async def async_route() -> str:\n+    return \"Hello\"\n+\n+\n class RenderTemplateView(View):\n     def __init__(self: RenderTemplateView, template_name: str) -> None:\n         self.template_name = template_name\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#2f1d1d625697b9eca82dc8b2f46fff24dace63b1", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 38 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 6 | Complexity Δ (Sum/Max): 6/6 | Churn Δ: 38 | Churn Cumulative: 38 | Contributors (this commit): 1 | Commits (past 90d): 1 | Contributors (cumulative): 1 | DMM Complexity: 1.0\n\nDIFF:\n@@ -0,0 +1,38 @@\n+from __future__ import annotations\n+\n+import typing as t\n+\n+from flask import Flask\n+from flask import Response\n+\n+app = Flask(__name__)\n+\n+\n+@app.after_request\n+def after_sync(response: Response) -> Response:\n+    ...\n+\n+\n+@app.after_request\n+async def after_async(response: Response) -> Response:\n+    ...\n+\n+\n+@app.before_request\n+def before_sync() -> None:\n+    ...\n+\n+\n+@app.before_request\n+async def before_async() -> None:\n+    ...\n+\n+\n+@app.teardown_appcontext\n+def teardown_sync(exc: t.Optional[BaseException]) -> None:\n+    ...\n+\n+\n+@app.teardown_appcontext\n+async def teardown_async(exc: t.Optional[BaseException]) -> None:\n+    ...\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#89463cb77c7f3830c308cdfcc250255fd7377d01", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 890 | Contributors (this commit): 32 | Commits (past 90d): 1 | Contributors (cumulative): 32 | DMM Complexity: None\n\nDIFF:\n@@ -4,7 +4,7 @@ from setuptools import setup\n setup(\n     name=\"Flask\",\n     install_requires=[\n-        \"Werkzeug >= 2.0\",\n+        \"Werkzeug >= 2.2.0a1\",\n         \"Jinja2 >= 3.0\",\n         \"itsdangerous >= 2.0\",\n         \"click >= 8.0\",\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#0b2f809f9b56861dae3ae5154d73b4afaf632a0a", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 33 | Lines Deleted: 42 | Files Changed: 1 | Hunks: 6 | Methods Changed: 3 | Complexity Δ (Sum/Max): -6/0 | Churn Δ: 75 | Churn Cumulative: 115 | Contributors (this commit): 3 | Commits (past 90d): 2 | Contributors (cumulative): 3 | DMM Complexity: 0.0\n\nDIFF:\n@@ -1,59 +1,50 @@\n import typing as t\n-from functools import partial\n+from contextvars import ContextVar\n \n-from werkzeug.local import LocalProxy\n from werkzeug.local import LocalStack\n \n if t.TYPE_CHECKING:  # pragma: no cover\n     from .app import Flask\n     from .ctx import _AppCtxGlobals\n+    from .ctx import AppContext\n+    from .ctx import RequestContext\n     from .sessions import SessionMixin\n     from .wrappers import Request\n \n-_request_ctx_err_msg = \"\"\"\\\n+_no_app_msg = \"\"\"\\\n+Working outside of application context.\n+\n+This typically means that you attempted to use functionality that needed\n+the current application. To solve this, set up an application context\n+with app.app_context(). See the documentation for more information.\\\n+\"\"\"\n+_cv_app: ContextVar[t.List[\"AppContext\"]] = ContextVar(\"flask.app_ctx\")\n+_app_ctx_stack: LocalStack[\"AppContext\"] = LocalStack(_cv_app)\n+app_ctx: \"AppContext\" = _app_ctx_stack(  # type: ignore[assignment]\n+    unbound_message=_no_app_msg\n+)\n+current_app: \"Flask\" = _app_ctx_stack(  # type: ignore[assignment]\n+    \"app\", unbound_message=_no_app_msg\n+)\n+g: \"_AppCtxGlobals\" = _app_ctx_stack(  # type: ignore[assignment]\n+    \"g\", unbound_message=_no_app_msg\n+)\n+\n+_no_req_msg = \"\"\"\\\n Working outside of request context.\n \n This typically means that you attempted to use functionality that needed\n an active HTTP request. Consult the documentation on testing for\n information about how to avoid this problem.\\\n \"\"\"\n-_app_ctx_err_msg = \"\"\"\\\n-Working outside of application context.\n-\n-This typically means that you attempted to use functionality that needed\n-to interface with the current application object in some way. To solve\n-this, set up an application context with app.app_context().  See the\n-documentation for more information.\\\n-\"\"\"\n-\n-\n-def _lookup_req_object(name):\n-    top = _request_ctx_stack.top\n-    if top is None:\n-        raise RuntimeError(_request_ctx_err_msg)\n-    return getattr(top, name)\n-\n-\n-def _lookup_app_object(name):\n-    top = _app_ctx_stack.top\n-    if top is None:\n-        raise RuntimeError(_app_ctx_err_msg)\n-    return getattr(top, name)\n-\n-\n-def _find_app():\n-    top = _app_ctx_stack.top\n-    if top is None:\n-        raise RuntimeError(_app_ctx_err_msg)\n-    return top.app\n-\n-\n-# context locals\n-_request_ctx_stack = LocalStack()\n-_app_ctx_stack = LocalStack()\n-current_app: \"Flask\" = LocalProxy(_find_app)  # type: ignore\n-request: \"Request\" = LocalProxy(partial(_lookup_req_object, \"request\"))  # type: ignore\n-session: \"SessionMixin\" = LocalProxy(  # type: ignore\n-    partial(_lookup_req_object, \"session\")\n+_cv_req: ContextVar[t.List[\"RequestContext\"]] = ContextVar(\"flask.request_ctx\")\n+_request_ctx_stack: LocalStack[\"RequestContext\"] = LocalStack(_cv_req)\n+request_ctx: \"RequestContext\" = _request_ctx_stack(  # type: ignore[assignment]\n+    unbound_message=_no_req_msg\n+)\n+request: \"Request\" = _request_ctx_stack(  # type: ignore[assignment]\n+    \"request\", unbound_message=_no_req_msg\n+)\n+session: \"SessionMixin\" = _request_ctx_stack(  # type: ignore[assignment]\n+    \"session\", unbound_message=_no_req_msg\n )\n-g: \"_AppCtxGlobals\" = LocalProxy(partial(_lookup_app_object, \"g\"))  # type: ignore\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#d597db67ded68d4aedf42b9d1d4570573fb79cd6", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 136 | Lines Deleted: 70 | Files Changed: 4 | Hunks: 37 | Methods Changed: 15 | Complexity Δ (Sum/Max): 12/8 | Churn Δ: 206 | Churn Cumulative: 1305 | Contributors (this commit): 11 | Commits (past 90d): 18 | Contributors (cumulative): 19 | DMM Complexity: 1.0\n\nDIFF:\n@@ -11,8 +11,6 @@ from .ctx import after_this_request as after_this_request\n from .ctx import copy_current_request_context as copy_current_request_context\n from .ctx import has_app_context as has_app_context\n from .ctx import has_request_context as has_request_context\n-from .globals import _app_ctx_stack as _app_ctx_stack\n-from .globals import _request_ctx_stack as _request_ctx_stack\n from .globals import current_app as current_app\n from .globals import g as g\n from .globals import request as request\n@@ -45,3 +43,29 @@ from .templating import stream_template as stream_template\n from .templating import stream_template_string as stream_template_string\n \n __version__ = \"2.2.0.dev0\"\n+\n+\n+def __getattr__(name):\n+    if name == \"_app_ctx_stack\":\n+        import warnings\n+        from .globals import __app_ctx_stack\n+\n+        warnings.warn(\n+            \"'_app_ctx_stack' is deprecated and will be removed in Flask 2.3.\",\n+            DeprecationWarning,\n+            stacklevel=2,\n+        )\n+        return __app_ctx_stack\n+\n+    if name == \"_request_ctx_stack\":\n+        import warnings\n+        from .globals import __request_ctx_stack\n+\n+        warnings.warn(\n+            \"'_request_ctx_stack' is deprecated and will be removed in Flask 2.3.\",\n+            DeprecationWarning,\n+            stacklevel=2,\n+        )\n+        return __request_ctx_stack\n+\n+    raise AttributeError(name)\n\n@@ -1,3 +1,4 @@\n+import contextvars\n import sys\n import typing as t\n from functools import update_wrapper\n@@ -7,6 +8,8 @@ from werkzeug.exceptions import HTTPException\n \n from . import typing as ft\n from .globals import _app_ctx_stack\n+from .globals import _cv_app\n+from .globals import _cv_req\n from .globals import _request_ctx_stack\n from .signals import appcontext_popped\n from .signals import appcontext_pushed\n@@ -212,7 +215,7 @@ def has_request_context() -> bool:\n \n     .. versionadded:: 0.7\n     \"\"\"\n-    return _request_ctx_stack.top is not None\n+    return _cv_app.get(None) is not None\n \n \n def has_app_context() -> bool:\n@@ -222,7 +225,7 @@ def has_app_context() -> bool:\n \n     .. versionadded:: 0.9\n     \"\"\"\n-    return _app_ctx_stack.top is not None\n+    return _cv_req.get(None) is not None\n \n \n class AppContext:\n@@ -238,28 +241,29 @@ class AppContext:\n         self.app = app\n         self.url_adapter = app.create_url_adapter(None)\n         self.g = app.app_ctx_globals_class()\n-\n-        # Like request context, app contexts can be pushed multiple times\n-        # but there a basic \"refcount\" is enough to track them.\n-        self._refcnt = 0\n+        self._cv_tokens: t.List[contextvars.Token] = []\n \n     def push(self) -> None:\n         \"\"\"Binds the app context to the current context.\"\"\"\n-        self._refcnt += 1\n-        _app_ctx_stack.push(self)\n+        self._cv_tokens.append(_cv_app.set(self))\n         appcontext_pushed.send(self.app)\n \n     def pop(self, exc: t.Optional[BaseException] = _sentinel) -> None:  # type: ignore\n         \"\"\"Pops the app context.\"\"\"\n         try:\n-            self._refcnt -= 1\n-            if self._refcnt <= 0:\n+            if len(self._cv_tokens) == 1:\n                 if exc is _sentinel:\n                     exc = sys.exc_info()[1]\n                 self.app.do_teardown_appcontext(exc)\n         finally:\n-            rv = _app_ctx_stack.pop()\n-        assert rv is self, f\"Popped wrong app context.  ({rv!r} instead of {self!r})\"\n+            ctx = _cv_app.get()\n+            _cv_app.reset(self._cv_tokens.pop())\n+\n+        if ctx is not self:\n+            raise AssertionError(\n+                f\"Popped wrong app context. ({ctx!r} instead of {self!r})\"\n+            )\n+\n         appcontext_popped.send(self.app)\n \n     def __enter__(self) -> \"AppContext\":\n@@ -315,18 +319,13 @@ class RequestContext:\n             self.request.routing_exception = e\n         self.flashes = None\n         self.session = session\n-\n-        # Request contexts can be pushed multiple times and interleaved with\n-        # other request contexts.  Now only if the last level is popped we\n-        # get rid of them.  Additionally if an application context is missing\n-        # one is created implicitly so for each level we add this information\n-        self._implicit_app_ctx_stack: t.List[t.Optional[\"AppContext\"]] = []\n-\n         # Functions that should be executed after the request on the response\n         # object.  These will be called before the regular \"after_request\"\n         # functions.\n         self._after_request_functions: t.List[ft.AfterRequestCallable] = []\n \n+        self._cv_tokens: t.List[t.Tuple[contextvars.Token, t.Optional[AppContext]]] = []\n+\n     def copy(self) -> \"RequestContext\":\n         \"\"\"Creates a copy of this request context with the same request object.\n         This can be used to move a request context to a different greenlet.\n@@ -360,15 +359,15 @@ class RequestContext:\n     def push(self) -> None:\n         # Before we push the request context we have to ensure that there\n         # is an application context.\n-        app_ctx = _app_ctx_stack.top\n-        if app_ctx is None or app_ctx.app != self.app:\n+        app_ctx = _cv_app.get(None)\n+\n+        if app_ctx is None or app_ctx.app is not self.app:\n             app_ctx = self.app.app_context()\n             app_ctx.push()\n-            self._implicit_app_ctx_stack.append(app_ctx)\n         else:\n-            self._implicit_app_ctx_stack.append(None)\n+            app_ctx = None\n \n-        _request_ctx_stack.push(self)\n+        self._cv_tokens.append((_cv_req.set(self), app_ctx))\n \n         # Open the session at the moment that the request context is available.\n         # This allows a custom open_session method to use the request context.\n@@ -394,11 +393,10 @@ class RequestContext:\n         .. versionchanged:: 0.9\n            Added the `exc` argument.\n         \"\"\"\n-        app_ctx = self._implicit_app_ctx_stack.pop()\n-        clear_request = False\n+        clear_request = len(self._cv_tokens) == 1\n \n         try:\n-            if not self._implicit_app_ctx_stack:\n+            if clear_request:\n                 if exc is _sentinel:\n                     exc = sys.exc_info()[1]\n                 self.app.do_teardown_request(exc)\n@@ -406,36 +404,23 @@ class RequestContext:\n                 request_close = getattr(self.request, \"close\", None)\n                 if request_close is not None:\n                     request_close()\n-                clear_request = True\n         finally:\n-            rv = _request_ctx_stack.pop()\n+            ctx = _cv_req.get()\n+            token, app_ctx = self._cv_tokens.pop()\n+            _cv_req.reset(token)\n \n             # get rid of circular dependencies at the end of the request\n             # so that we don't require the GC to be active.\n             if clear_request:\n-                rv.request.environ[\"werkzeug.request\"] = None\n+                ctx.request.environ[\"werkzeug.request\"] = None\n \n-            # Get rid of the app as well if necessary.\n             if app_ctx is not None:\n                 app_ctx.pop(exc)\n \n-            assert (\n-                rv is self\n-            ), f\"Popped wrong request context. ({rv!r} instead of {self!r})\"\n-\n-    def auto_pop(self, exc: t.Optional[BaseException]) -> None:\n-        \"\"\"\n-        .. deprecated:: 2.2\n-            Will be removed in Flask 2.3.\n-        \"\"\"\n-        import warnings\n-\n-        warnings.warn(\n-            \"'ctx.auto_pop' is deprecated and will be removed in Flask 2.3.\",\n-            DeprecationWarning,\n-            stacklevel=2,\n+            if ctx is not self:\n+                raise AssertionError(\n+                    f\"Popped wrong request context. ({ctx!r} instead of {self!r})\"\n                 )\n-        self.pop(exc)\n \n     def __enter__(self) -> \"RequestContext\":\n         self.push()\n\n@@ -1,7 +1,7 @@\n import typing as t\n from contextvars import ContextVar\n \n-from werkzeug.local import LocalStack\n+from werkzeug.local import LocalProxy\n \n if t.TYPE_CHECKING:  # pragma: no cover\n     from .app import Flask\n@@ -11,6 +11,39 @@ if t.TYPE_CHECKING:  # pragma: no cover\n     from .sessions import SessionMixin\n     from .wrappers import Request\n \n+\n+class _FakeStack:\n+    def __init__(self, name: str, cv: ContextVar[t.Any]) -> None:\n+        self.name = name\n+        self.cv = cv\n+\n+    def _warn(self):\n+        import warnings\n+\n+        warnings.warn(\n+            f\"'_{self.name}_ctx_stack' is deprecated and will be\"\n+            \" removed in Flask 2.3. Use 'g' to store data, or\"\n+            f\" '{self.name}_ctx' to access the current context.\",\n+            DeprecationWarning,\n+            stacklevel=3,\n+        )\n+\n+    def push(self, obj: t.Any) -> None:\n+        self._warn()\n+        self.cv.set(obj)\n+\n+    def pop(self) -> t.Any:\n+        self._warn()\n+        ctx = self.cv.get(None)\n+        self.cv.set(None)\n+        return ctx\n+\n+    @property\n+    def top(self) -> t.Optional[t.Any]:\n+        self._warn()\n+        return self.cv.get(None)\n+\n+\n _no_app_msg = \"\"\"\\\n Working outside of application context.\n \n@@ -18,16 +51,16 @@ This typically means that you attempted to use functionality that needed\n the current application. To solve this, set up an application context\n with app.app_context(). See the documentation for more information.\\\n \"\"\"\n-_cv_app: ContextVar[t.List[\"AppContext\"]] = ContextVar(\"flask.app_ctx\")\n-_app_ctx_stack: LocalStack[\"AppContext\"] = LocalStack(_cv_app)\n-app_ctx: \"AppContext\" = _app_ctx_stack(  # type: ignore[assignment]\n-    unbound_message=_no_app_msg\n+_cv_app: ContextVar[\"AppContext\"] = ContextVar(\"flask.app_ctx\")\n+__app_ctx_stack = _FakeStack(\"app\", _cv_app)\n+app_ctx: \"AppContext\" = LocalProxy(  # type: ignore[assignment]\n+    _cv_app, unbound_message=_no_app_msg\n )\n-current_app: \"Flask\" = _app_ctx_stack(  # type: ignore[assignment]\n-    \"app\", unbound_message=_no_app_msg\n+current_app: \"Flask\" = LocalProxy(  # type: ignore[assignment]\n+    _cv_app, \"app\", unbound_message=_no_app_msg\n )\n-g: \"_AppCtxGlobals\" = _app_ctx_stack(  # type: ignore[assignment]\n-    \"g\", unbound_message=_no_app_msg\n+g: \"_AppCtxGlobals\" = LocalProxy(  # type: ignore[assignment]\n+    _cv_app, \"g\", unbound_message=_no_app_msg\n )\n \n _no_req_msg = \"\"\"\\\n@@ -37,14 +70,38 @@ This typically means that you attempted to use functionality that needed\n an active HTTP request. Consult the documentation on testing for\n information about how to avoid this problem.\\\n \"\"\"\n-_cv_req: ContextVar[t.List[\"RequestContext\"]] = ContextVar(\"flask.request_ctx\")\n-_request_ctx_stack: LocalStack[\"RequestContext\"] = LocalStack(_cv_req)\n-request_ctx: \"RequestContext\" = _request_ctx_stack(  # type: ignore[assignment]\n-    unbound_message=_no_req_msg\n+_cv_req: ContextVar[\"RequestContext\"] = ContextVar(\"flask.request_ctx\")\n+__request_ctx_stack = _FakeStack(\"request\", _cv_req)\n+request_ctx: \"RequestContext\" = LocalProxy(  # type: ignore[assignment]\n+    _cv_req, unbound_message=_no_req_msg\n )\n-request: \"Request\" = _request_ctx_stack(  # type: ignore[assignment]\n-    \"request\", unbound_message=_no_req_msg\n+request: \"Request\" = LocalProxy(  # type: ignore[assignment]\n+    _cv_req, \"request\", unbound_message=_no_req_msg\n )\n-session: \"SessionMixin\" = _request_ctx_stack(  # type: ignore[assignment]\n-    \"session\", unbound_message=_no_req_msg\n+session: \"SessionMixin\" = LocalProxy(  # type: ignore[assignment]\n+    _cv_req, \"session\", unbound_message=_no_req_msg\n )\n+\n+\n+def __getattr__(name: str) -> t.Any:\n+    if name == \"_app_ctx_stack\":\n+        import warnings\n+\n+        warnings.warn(\n+            \"'_app_ctx_stack' is deprecated and will be remoevd in Flask 2.3.\",\n+            DeprecationWarning,\n+            stacklevel=2,\n+        )\n+        return __app_ctx_stack\n+\n+    if name == \"_request_ctx_stack\":\n+        import warnings\n+\n+        warnings.warn(\n+            \"'_request_ctx_stack' is deprecated and will be remoevd in Flask 2.3.\",\n+            DeprecationWarning,\n+            stacklevel=2,\n+        )\n+        return __request_ctx_stack\n+\n+    raise AttributeError(name)\n\n@@ -11,7 +11,7 @@ from werkzeug.urls import url_parse\n from werkzeug.wrappers import Request as BaseRequest\n \n from .cli import ScriptInfo\n-from .globals import _request_ctx_stack\n+from .globals import _cv_req\n from .json import dumps as json_dumps\n from .sessions import SessionMixin\n \n@@ -147,7 +147,7 @@ class FlaskClient(Client):\n         app = self.application\n         environ_overrides = kwargs.setdefault(\"environ_overrides\", {})\n         self.cookie_jar.inject_wsgi(environ_overrides)\n-        outer_reqctx = _request_ctx_stack.top\n+        outer_reqctx = _cv_req.get(None)\n         with app.test_request_context(*args, **kwargs) as c:\n             session_interface = app.session_interface\n             sess = session_interface.open_session(app, c.request)\n@@ -163,11 +163,11 @@ class FlaskClient(Client):\n             # behavior.  It's important to not use the push and pop\n             # methods of the actual request context object since that would\n             # mean that cleanup handlers are called\n-            _request_ctx_stack.push(outer_reqctx)\n+            token = _cv_req.set(outer_reqctx)\n             try:\n                 yield sess\n             finally:\n-                _request_ctx_stack.pop()\n+                _cv_req.reset(token)\n \n             resp = app.response_class()\n             if not session_interface.is_null_session(sess):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
