{"custom_id": "fastapi#7372f6ba11abb515a7f11814dba52a1d1c0925f0", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 235 | Contributors (this commit): 1 | Commits (past 90d): 15 | Contributors (cumulative): 1 | DMM Complexity: None\n\nDIFF:\n@@ -1,6 +1,6 @@\n \"\"\"FastAPI framework, high performance, easy to learn, fast to code, ready for production\"\"\"\n \n-__version__ = \"0.53.2\"\n+__version__ = \"0.54.0\"\n \n from starlette import status\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#483bce3ae1a987f6f248cd4bb5b96955652fb0dd", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 34 | Lines Deleted: 28 | Files Changed: 1 | Hunks: 8 | Methods Changed: 4 | Complexity Δ (Sum/Max): 3/3 | Churn Δ: 62 | Churn Cumulative: 452 | Contributors (this commit): 2 | Commits (past 90d): 6 | Contributors (cumulative): 2 | DMM Complexity: 1.0\n\nDIFF:\n@@ -20,6 +20,12 @@ missing_translation_snippet = \"\"\"\n \"\"\"\n \n docs_path = Path(\"docs\")\n+en_docs_path = Path(\"docs/en\")\n+en_config_path: Path = en_docs_path / mkdocs_name\n+\n+\n+def get_en_config() -> dict:\n+    return mkdocs.utils.yaml_load(en_config_path.read_text(encoding=\"utf-8\"))\n \n \n def get_lang_paths():\n@@ -43,39 +49,15 @@ def complete_existing_lang(incomplete: str):\n             yield lang_path.name\n \n \n-@app.command()\n-def new_lang(lang: str = typer.Argument(..., callback=lang_callback)):\n-    \"\"\"\n-    Generate a new docs translation directory for the language LANG.\n-\n-    LANG should be a 2-letter language code, like: en, es, de, pt, etc.\n-    \"\"\"\n-    new_path: Path = Path(\"docs\") / lang\n-    if new_path.exists():\n-        typer.echo(f\"The language was already created: {lang}\")\n-        raise typer.Abort()\n-    new_path.mkdir()\n-    en_docs_path = Path(\"docs/en\")\n-    en_config_path: Path = en_docs_path / mkdocs_name\n-    en_config: dict = mkdocs.utils.yaml_load(en_config_path.read_text(encoding=\"utf-8\"))\n+def get_base_lang_config(lang: str):\n+    en_config = get_en_config()\n     fastapi_url_base = \"https://fastapi.tiangolo.com/\"\n-    new_config = {}\n-    new_config[\"site_name\"] = en_config[\"site_name\"]\n-    new_config[\"site_description\"] = en_config[\"site_description\"]\n+    new_config = en_config.copy()\n     new_config[\"site_url\"] = en_config[\"site_url\"] + f\"{lang}/\"\n-    new_config[\"theme\"] = en_config[\"theme\"]\n     new_config[\"theme\"][\"logo\"] = fastapi_url_base + en_config[\"theme\"][\"logo\"]\n     new_config[\"theme\"][\"favicon\"] = fastapi_url_base + en_config[\"theme\"][\"favicon\"]\n     new_config[\"theme\"][\"language\"] = lang\n-    new_config[\"repo_name\"] = en_config[\"repo_name\"]\n-    new_config[\"repo_url\"] = en_config[\"repo_url\"]\n-    new_config[\"edit_uri\"] = en_config[\"edit_uri\"]\n-    new_config[\"google_analytics\"] = en_config[\"google_analytics\"]\n     new_config[\"nav\"] = en_config[\"nav\"][:2]\n-\n-    new_config[\"markdown_extensions\"] = en_config[\"markdown_extensions\"]\n-    new_config[\"extra\"] = en_config[\"extra\"]\n-\n     extra_css = []\n     css: str\n     for css in en_config[\"extra_css\"]:\n@@ -93,6 +75,22 @@ def new_lang(lang: str = typer.Argument(..., callback=lang_callback)):\n         else:\n             extra_js.append(fastapi_url_base + js)\n     new_config[\"extra_javascript\"] = extra_js\n+    return new_config\n+\n+\n+@app.command()\n+def new_lang(lang: str = typer.Argument(..., callback=lang_callback)):\n+    \"\"\"\n+    Generate a new docs translation directory for the language LANG.\n+\n+    LANG should be a 2-letter language code, like: en, es, de, pt, etc.\n+    \"\"\"\n+    new_path: Path = Path(\"docs\") / lang\n+    if new_path.exists():\n+        typer.echo(f\"The language was already created: {lang}\")\n+        raise typer.Abort()\n+    new_path.mkdir()\n+    new_config = get_base_lang_config(lang)\n     new_config_path: Path = Path(new_path) / mkdocs_name\n     new_config_path.write_text(\n         yaml.dump(new_config, sort_keys=False, width=200), encoding=\"utf-8\"\n@@ -280,7 +278,15 @@ def live(\n def update_config(lang: str):\n     lang_path: Path = docs_path / lang\n     config_path = lang_path / mkdocs_name\n-    config: dict = mkdocs.utils.yaml_load(config_path.read_text(encoding=\"utf-8\"))\n+    current_config: dict = mkdocs.utils.yaml_load(\n+        config_path.read_text(encoding=\"utf-8\")\n+    )\n+    if lang == \"en\":\n+        config = get_en_config()\n+    else:\n+        config = get_base_lang_config(lang)\n+        config[\"nav\"] = current_config[\"nav\"]\n+        config[\"theme\"][\"language\"] = current_config[\"theme\"][\"language\"]\n     languages = [{\"en\": \"/\"}]\n     for lang in get_lang_paths():\n         if lang.name == \"en\" or not lang.is_dir():\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#e9b189e9f22c70ef6625f67555cc4732ed0f4a88", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 434 | Lines Deleted: 434 | Files Changed: 144 | Hunks: 434 | Methods Changed: 404 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 868 | Churn Cumulative: 17957 | Contributors (this commit): 33 | Commits (past 90d): 301 | Contributors (cumulative): 376 | DMM Complexity: None\n\nDIFF:\n@@ -34,14 +34,14 @@ def test_create_user():\n         \"/users/\",\n         json={\"email\": \"deadpool@example.com\", \"password\": \"chimichangas4life\"},\n     )\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     data = response.json()\n     assert data[\"email\"] == \"deadpool@example.com\"\n     assert \"id\" in data\n     user_id = data[\"id\"]\n \n     response = client.get(f\"/users/{user_id}\")\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     data = response.json()\n     assert data[\"email\"] == \"deadpool@example.com\"\n     assert data[\"id\"] == user_id\n\n@@ -100,11 +100,11 @@ openapi_schema = {\n \n def test_additional_properties_schema():\n     response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert response.json() == openapi_schema\n \n \n def test_additional_properties_post():\n     response = client.post(\"/foo\", json={\"items\": {\"foo\": 1, \"bar\": 2}})\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert response.json() == {\"foo\": 1, \"bar\": 2}\n\n@@ -42,11 +42,11 @@ client = TestClient(app)\n \n def test_openapi_schema():\n     response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert response.json() == openapi_schema\n \n \n def test_path_operation():\n     response = client.get(\"/items/\")\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert response.json() == {\"id\": \"foo\"}\n\n@@ -96,5 +96,5 @@ client = TestClient(app)\n \n def test_openapi_schema():\n     response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert response.json() == openapi_schema\n\n@@ -81,5 +81,5 @@ client = TestClient(app)\n \n def test_openapi_schema():\n     response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert response.json() == openapi_schema\n\n@@ -113,5 +113,5 @@ client = TestClient(app)\n \n def test_openapi_schema():\n     response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert response.json() == openapi_schema\n\n@@ -89,23 +89,23 @@ client = TestClient(app)\n \n def test_openapi_schema():\n     response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert response.json() == openapi_schema\n \n \n def test_a():\n     response = client.get(\"/a\")\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert response.json() == \"a\"\n \n \n def test_b():\n     response = client.get(\"/b\")\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert response.json() == \"b\"\n \n \n def test_c():\n     response = client.get(\"/c\")\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert response.json() == \"c\"\n\n@@ -1128,7 +1128,7 @@ def test_get_path(path, expected_status, expected_response):\n \n def test_swagger_ui():\n     response = client.get(\"/docs\")\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert response.headers[\"content-type\"] == \"text/html; charset=utf-8\"\n     assert \"swagger-ui-dist\" in response.text\n     assert (\n@@ -1139,13 +1139,13 @@ def test_swagger_ui():\n \n def test_swagger_ui_oauth2_redirect():\n     response = client.get(\"/docs/oauth2-redirect\")\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert response.headers[\"content-type\"] == \"text/html; charset=utf-8\"\n     assert \"window.opener.swaggerUIRedirectOauth2\" in response.text\n \n \n def test_redoc():\n     response = client.get(\"/redoc\")\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert response.headers[\"content-type\"] == \"text/html; charset=utf-8\"\n     assert \"redoc@next\" in response.text\n\n@@ -16,7 +16,7 @@ client = TestClient(app)\n \n def test_swagger_ui():\n     response = client.get(\"/docs\")\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert response.headers[\"content-type\"] == \"text/html; charset=utf-8\"\n     assert \"swagger-ui-dist\" in response.text\n     print(client.base_url)\n@@ -28,7 +28,7 @@ def test_swagger_ui():\n \n def test_swagger_ui_oauth2_redirect():\n     response = client.get(swagger_ui_oauth2_redirect_url)\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert response.headers[\"content-type\"] == \"text/html; charset=utf-8\"\n     assert \"window.opener.swaggerUIRedirectOauth2\" in response.text\n \n\n@@ -41,28 +41,28 @@ client = TestClient(app)\n def test_normal_counter():\n     counter_holder[\"counter\"] = 0\n     response = client.get(\"/counter/\")\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert response.json() == {\"counter\": 1}\n     response = client.get(\"/counter/\")\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert response.json() == {\"counter\": 2}\n \n \n def test_sub_counter():\n     counter_holder[\"counter\"] = 0\n     response = client.get(\"/sub-counter/\")\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert response.json() == {\"counter\": 1, \"subcounter\": 1}\n     response = client.get(\"/sub-counter/\")\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert response.json() == {\"counter\": 2, \"subcounter\": 2}\n \n \n def test_sub_counter_no_cache():\n     counter_holder[\"counter\"] = 0\n     response = client.get(\"/sub-counter-no-cache/\")\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert response.json() == {\"counter\": 2, \"subcounter\": 1}\n     response = client.get(\"/sub-counter-no-cache/\")\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert response.json() == {\"counter\": 4, \"subcounter\": 3}\n\n@@ -66,5 +66,5 @@ client = TestClient(app)\n )\n def test_class_dependency(route, value):\n     response = client.get(route, params={\"value\": value})\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert response.json() == value\n\n@@ -206,7 +206,7 @@ client = TestClient(app)\n def test_async_state():\n     assert state[\"/async\"] == f\"asyncgen not started\"\n     response = client.get(\"/async\")\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert response.json() == f\"asyncgen started\"\n     assert state[\"/async\"] == f\"asyncgen completed\"\n \n@@ -214,7 +214,7 @@ def test_async_state():\n def test_sync_state():\n     assert state[\"/sync\"] == f\"generator not started\"\n     response = client.get(\"/sync\")\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert response.json() == f\"generator started\"\n     assert state[\"/sync\"] == f\"generator completed\"\n \n@@ -237,7 +237,7 @@ def test_sync_raise_other():\n \n def test_async_raise():\n     response = client.get(\"/async_raise\")\n-    assert response.status_code == 500\n+    assert response.status_code == 500, response.text\n     assert state[\"/async_raise\"] == \"asyncgen raise finalized\"\n     assert \"/async_raise\" in errors\n     errors.clear()\n@@ -272,7 +272,7 @@ def test_background_tasks():\n \n def test_sync_raise():\n     response = client.get(\"/sync_raise\")\n-    assert response.status_code == 500\n+    assert response.status_code == 500, response.text\n     assert state[\"/sync_raise\"] == \"generator raise finalized\"\n     assert \"/sync_raise\" in errors\n     errors.clear()\n@@ -280,14 +280,14 @@ def test_sync_raise():\n \n def test_sync_async_state():\n     response = client.get(\"/sync_async\")\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert response.json() == f\"asyncgen started\"\n     assert state[\"/async\"] == f\"asyncgen completed\"\n \n \n def test_sync_sync_state():\n     response = client.get(\"/sync_sync\")\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert response.json() == f\"generator started\"\n     assert state[\"/sync\"] == f\"generator completed\"\n \n@@ -308,7 +308,7 @@ def test_sync_sync_raise_other():\n \n def test_sync_async_raise():\n     response = client.get(\"/sync_async_raise\")\n-    assert response.status_code == 500\n+    assert response.status_code == 500, response.text\n     assert state[\"/async_raise\"] == \"asyncgen raise finalized\"\n     assert \"/async_raise\" in errors\n     errors.clear()\n@@ -316,7 +316,7 @@ def test_sync_async_raise():\n \n def test_sync_sync_raise():\n     response = client.get(\"/sync_sync_raise\")\n-    assert response.status_code == 500\n+    assert response.status_code == 500, response.text\n     assert state[\"/sync_raise\"] == \"generator raise finalized\"\n     assert \"/sync_raise\" in errors\n     errors.clear()\n\n@@ -190,13 +190,13 @@ openapi_schema = {\n \n def test_openapi_schema():\n     response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert response.json() == openapi_schema\n \n \n def test_no_duplicates_invalid():\n     response = client.post(\"/no-duplicates\", json={\"item\": {\"data\": \"myitem\"}})\n-    assert response.status_code == 422\n+    assert response.status_code == 422, response.text\n     assert response.json() == {\n         \"detail\": [\n             {\n@@ -213,19 +213,19 @@ def test_no_duplicates():\n         \"/no-duplicates\",\n         json={\"item\": {\"data\": \"myitem\"}, \"item2\": {\"data\": \"myitem2\"}},\n     )\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert response.json() == [{\"data\": \"myitem\"}, {\"data\": \"myitem2\"}]\n \n \n def test_duplicates():\n     response = client.post(\"/with-duplicates\", json={\"data\": \"myitem\"})\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert response.json() == [{\"data\": \"myitem\"}, {\"data\": \"myitem\"}]\n \n \n def test_sub_duplicates():\n     response = client.post(\"/with-duplicates-sub\", json={\"data\": \"myitem\"})\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert response.json() == [\n         {\"data\": \"myitem\"},\n         [{\"data\": \"myitem\"}, {\"data\": \"myitem\"}],\n\n@@ -21,11 +21,11 @@ client = TestClient(app)\n def test_use_empty():\n     with client:\n         response = client.get(\"/prefix\")\n-        assert response.status_code == 200\n+        assert response.status_code == 200, response.text\n         assert response.json() == [\"OK\"]\n \n         response = client.get(\"/prefix/\")\n-        assert response.status_code == 200\n+        assert response.status_code == 200, response.text\n         assert response.json() == [\"OK\"]\n \n \n\n@@ -314,47 +314,47 @@ openapi_schema = {\n \n def test_openapi_schema():\n     response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert response.json() == openapi_schema\n \n \n def test_get_api_route():\n     response = client.get(\"/items/foo\")\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert response.json() == {\"item_id\": \"foo\"}\n \n \n def test_get_api_route_not_decorated():\n     response = client.get(\"/items-not-decorated/foo\")\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert response.json() == {\"item_id\": \"foo\"}\n \n \n def test_delete():\n     response = client.delete(\"/items/foo\", json={\"name\": \"Foo\"})\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert response.json() == {\"item_id\": \"foo\", \"item\": {\"name\": \"Foo\", \"price\": None}}\n \n \n def test_head():\n     response = client.head(\"/items/foo\")\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert response.headers[\"x-fastapi-item-id\"] == \"foo\"\n \n \n def test_options():\n     response = client.options(\"/items/foo\")\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert response.headers[\"x-fastapi-item-id\"] == \"foo\"\n \n \n def test_patch():\n     response = client.patch(\"/items/foo\", json={\"name\": \"Foo\"})\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert response.json() == {\"item_id\": \"foo\", \"item\": {\"name\": \"Foo\", \"price\": None}}\n \n \n def test_trace():\n     response = client.request(\"trace\", \"/items/foo\")\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert response.headers[\"content-type\"] == \"message/http\"\n\n@@ -127,13 +127,13 @@ openapi_schema = {\n \n def test_openapi_schema():\n     response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert response.json() == openapi_schema\n \n \n def test_filter_sub_model():\n     response = client.get(\"/model/modelA\")\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert response.json() == {\n         \"name\": \"modelA\",\n         \"description\": \"model-a-desc\",\n\n@@ -26,7 +26,7 @@ def test_python_list_param_as_form():\n     response = client.post(\n         \"/form/python-list\", data={\"items\": [\"first\", \"second\", \"third\"]}\n     )\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert response.json() == [\"first\", \"second\", \"third\"]\n \n \n@@ -34,7 +34,7 @@ def test_python_set_param_as_form():\n     response = client.post(\n         \"/form/python-set\", data={\"items\": [\"first\", \"second\", \"third\"]}\n     )\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert set(response.json()) == {\"first\", \"second\", \"third\"}\n \n \n@@ -42,5 +42,5 @@ def test_python_tuple_param_as_form():\n     response = client.post(\n         \"/form/python-tuple\", data={\"items\": [\"first\", \"second\", \"third\"]}\n     )\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert response.json() == [\"first\", \"second\", \"third\"]\n\n@@ -18,5 +18,5 @@ client = TestClient(app)\n \n def test_sub_router():\n     response = client.get(\"/items/\")\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert response.json() == {\"hello\": \"world\"}\n\n@@ -46,21 +46,21 @@ client = TestClient(app)\n def test_get_users():\n     \"\"\"Check that /users returns expected data\"\"\"\n     response = client.get(\"/users\")\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert response.json() == [{\"user_id\": \"u1\"}, {\"user_id\": \"u2\"}]\n \n \n def test_get_user():\n     \"\"\"Check that /users/{user_id} returns expected data\"\"\"\n     response = client.get(\"/users/abc123\")\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert response.json() == {\"user_id\": \"abc123\"}\n \n \n def test_get_items_1():\n     \"\"\"Check that /items returns expected data\"\"\"\n     response = client.get(\"/items\")\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert response.json() == [\n         {\"item_id\": \"i1\", \"user_id\": \"u1\"},\n         {\"item_id\": \"i2\", \"user_id\": \"u2\"},\n@@ -70,42 +70,42 @@ def test_get_items_1():\n def test_get_items_2():\n     \"\"\"Check that /items returns expected data with user_id specified\"\"\"\n     response = client.get(\"/items?user_id=abc123\")\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert response.json() == [{\"item_id\": \"i2\", \"user_id\": \"abc123\"}]\n \n \n def test_get_item_1():\n     \"\"\"Check that /items/{item_id} returns expected data\"\"\"\n     response = client.get(\"/items/item01\")\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert response.json() == {\"item_id\": \"item01\"}\n \n \n def test_get_item_2():\n     \"\"\"Check that /items/{item_id} returns expected data with user_id specified\"\"\"\n     response = client.get(\"/items/item01?user_id=abc123\")\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert response.json() == {\"item_id\": \"item01\", \"user_id\": \"abc123\"}\n \n \n def test_get_users_items():\n     \"\"\"Check that /users/{user_id}/items returns expected data\"\"\"\n     response = client.get(\"/users/abc123/items\")\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert response.json() == [{\"item_id\": \"i2\", \"user_id\": \"abc123\"}]\n \n \n def test_get_users_item():\n     \"\"\"Check that /users/{user_id}/items returns expected data\"\"\"\n     response = client.get(\"/users/abc123/items/item01\")\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert response.json() == {\"item_id\": \"item01\", \"user_id\": \"abc123\"}\n \n \n def test_schema_1():\n     \"\"\"Check that the user_id is a required path parameter under /users\"\"\"\n     response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     r = response.json()\n \n     d = {\n@@ -122,7 +122,7 @@ def test_schema_1():\n def test_schema_2():\n     \"\"\"Check that the user_id is an optional query parameter under /items\"\"\"\n     response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     r = response.json()\n \n     d = {\n\n@@ -125,31 +125,31 @@ openapi_schema = {\n \n def test_openapi_schema():\n     response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert response.json() == openapi_schema\n \n \n def test_post_a():\n     data = {\"a\": 2, \"b\": \"foo\"}\n     response = client.post(\"/a/compute\", json=data)\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     data = response.json()\n \n \n def test_post_a_invalid():\n     data = {\"a\": \"bar\", \"b\": \"foo\"}\n     response = client.post(\"/a/compute\", json=data)\n-    assert response.status_code == 422\n+    assert response.status_code == 422, response.text\n \n \n def test_post_b():\n     data = {\"a\": 2, \"b\": \"foo\"}\n     response = client.post(\"/b/compute/\", json=data)\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     data = response.json()\n \n \n def test_post_b_invalid():\n     data = {\"a\": \"bar\", \"b\": \"foo\"}\n     response = client.post(\"/b/compute/\", json=data)\n-    assert response.status_code == 422\n+    assert response.status_code == 422, response.text\n\n@@ -139,23 +139,23 @@ multiple_errors = {\n \n def test_openapi_schema():\n     response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert response.json() == openapi_schema\n \n \n def test_put_correct_body():\n     response = client.post(\"/items/\", json=[{\"name\": \"Foo\", \"age\": 5}])\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert response.json() == {\"item\": [{\"name\": \"Foo\", \"age\": 5}]}\n \n \n def test_jsonable_encoder_requiring_error():\n     response = client.post(\"/items/\", json=[{\"name\": \"Foo\", \"age\": -1.0}])\n-    assert response.status_code == 422\n+    assert response.status_code == 422, response.text\n     assert response.json() == single_error\n \n \n def test_put_incorrect_body_multiple():\n     response = client.post(\"/items/\", json=[{\"age\": \"five\"}, {\"age\": \"six\"}])\n-    assert response.status_code == 422\n+    assert response.status_code == 422, response.text\n     assert response.json() == multiple_errors\n\n@@ -102,17 +102,17 @@ multiple_errors = {\n \n def test_openapi_schema():\n     response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert response.json() == openapi_schema\n \n \n def test_multi_query():\n     response = client.get(\"/items/?q=5&q=6\")\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert response.json() == {\"q\": [5, 6]}\n \n \n def test_multi_query_incorrect():\n     response = client.get(\"/items/?q=five&q=six\")\n-    assert response.status_code == 422\n+    assert response.status_code == 422, response.text\n     assert response.json() == multiple_errors\n\n@@ -14,7 +14,7 @@ client = TestClient(app)\n \n def test_swagger_ui():\n     response = client.get(\"/docs\")\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert response.headers[\"content-type\"] == \"text/html; charset=utf-8\"\n     assert \"swagger-ui-dist\" in response.text\n     print(client.base_url)\n@@ -23,7 +23,7 @@ def test_swagger_ui():\n \n def test_swagger_ui_no_oauth2_redirect():\n     response = client.get(\"/docs/oauth2-redirect\")\n-    assert response.status_code == 404\n+    assert response.status_code == 404, response.text\n \n \n def test_response():\n\n@@ -15,11 +15,11 @@ client = TestClient(app)\n \n def test_default_param_query_none():\n     response = client.get(\"/items/\")\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert response.json() == {\"q\": None}\n \n \n def test_default_param_query():\n     response = client.get(\"/items/?q=foo\")\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert response.json() == {\"q\": \"foo\"}\n\n@@ -90,4 +90,4 @@ def test_reused_param():\n \n def test_read_users():\n     response = client.get(\"/users/42\")\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n\n@@ -8,13 +8,13 @@ client = TestClient(app)\n \n def test_text_get():\n     response = client.get(\"/text\")\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert response.json() == \"Hello World\"\n \n \n def test_nonexistent():\n     response = client.get(\"/nonexistent\")\n-    assert response.status_code == 404\n+    assert response.status_code == 404, response.text\n     assert response.json() == {\"detail\": \"Not Found\"}\n \n \n\n@@ -81,17 +81,17 @@ openapi_schema = {\n \n def test_openapi_schema():\n     response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert response.json() == openapi_schema\n \n \n def test_put_no_body():\n     response = client.put(\"/items/foo\")\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert response.json() == {\"item_id\": \"foo\"}\n \n \n def test_put_no_body_with_body():\n     response = client.put(\"/items/foo\", json={\"name\": \"Foo\"})\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert response.json() == {\"item_id\": \"foo\"}\n\n@@ -55,7 +55,7 @@ client = TestClient(app)\n \n def test_openapi_schema():\n     response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     openapi_schema = response.json()\n     assert (\n         openapi_schema[\"paths\"][\"/products\"][\"post\"][\"requestBody\"]\n\n@@ -22,5 +22,5 @@ client = TestClient(app)\n \n def test_dependency_set_status_code():\n     response = client.get(\"/\")\n-    assert response.status_code == 201\n+    assert response.status_code == 201, response.text\n     assert response.json() == {\"msg\": \"Hello World\"}\n\n@@ -110,5 +110,5 @@ client = TestClient(app)\n \n def test_openapi_schema():\n     response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert response.json() == openapi_schema\n\n@@ -104,5 +104,5 @@ client = TestClient(app)\n \n def test_openapi_schema():\n     response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert response.json() == openapi_schema\n\n@@ -145,16 +145,16 @@ client = TestClient(app)\n \n def test_openapi_schema():\n     response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert response.json() == openapi_schema\n \n \n def test_path_operations():\n     response = client.get(\"/valid1\")\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     response = client.get(\"/valid2\")\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     response = client.get(\"/valid3\")\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     response = client.get(\"/valid4\")\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n\n@@ -77,7 +77,7 @@ def test_router_events():\n         assert state.router_shutdown is False\n         assert state.sub_router_shutdown is False\n         response = client.get(\"/\")\n-        assert response.status_code == 200\n+        assert response.status_code == 200, response.text\n         assert response.json() == {\"message\": \"Hello World\"}\n     assert state.app_startup is True\n     assert state.router_startup is True\n\n@@ -19,5 +19,5 @@ client = TestClient(app)\n \n def test_get():\n     response = client.get(\"/seg/users/foo\")\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert response.json() == {\"segment\": \"seg\", \"id\": \"foo\"}\n\n@@ -52,17 +52,17 @@ openapi_schema = {\n \n def test_openapi_schema():\n     response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert response.json() == openapi_schema\n \n \n def test_security_api_key():\n     response = client.get(\"/users/me\", cookies={\"key\": \"secret\"})\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert response.json() == {\"username\": \"secret\"}\n \n \n def test_security_api_key_no_key():\n     response = client.get(\"/users/me\")\n-    assert response.status_code == 403\n+    assert response.status_code == 403, response.text\n     assert response.json() == {\"detail\": \"Not authenticated\"}\n\n@@ -59,17 +59,17 @@ openapi_schema = {\n \n def test_openapi_schema():\n     response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert response.json() == openapi_schema\n \n \n def test_security_api_key():\n     response = client.get(\"/users/me\", cookies={\"key\": \"secret\"})\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert response.json() == {\"username\": \"secret\"}\n \n \n def test_security_api_key_no_key():\n     response = client.get(\"/users/me\")\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert response.json() == {\"msg\": \"Create an account first\"}\n\n@@ -52,17 +52,17 @@ openapi_schema = {\n \n def test_openapi_schema():\n     response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert response.json() == openapi_schema\n \n \n def test_security_api_key():\n     response = client.get(\"/users/me\", headers={\"key\": \"secret\"})\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert response.json() == {\"username\": \"secret\"}\n \n \n def test_security_api_key_no_key():\n     response = client.get(\"/users/me\")\n-    assert response.status_code == 403\n+    assert response.status_code == 403, response.text\n     assert response.json() == {\"detail\": \"Not authenticated\"}\n\n@@ -58,17 +58,17 @@ openapi_schema = {\n \n def test_openapi_schema():\n     response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert response.json() == openapi_schema\n \n \n def test_security_api_key():\n     response = client.get(\"/users/me\", headers={\"key\": \"secret\"})\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert response.json() == {\"username\": \"secret\"}\n \n \n def test_security_api_key_no_key():\n     response = client.get(\"/users/me\")\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert response.json() == {\"msg\": \"Create an account first\"}\n\n@@ -52,17 +52,17 @@ openapi_schema = {\n \n def test_openapi_schema():\n     response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert response.json() == openapi_schema\n \n \n def test_security_api_key():\n     response = client.get(\"/users/me?key=secret\")\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert response.json() == {\"username\": \"secret\"}\n \n \n def test_security_api_key_no_key():\n     response = client.get(\"/users/me\")\n-    assert response.status_code == 403\n+    assert response.status_code == 403, response.text\n     assert response.json() == {\"detail\": \"Not authenticated\"}\n\n@@ -58,17 +58,17 @@ openapi_schema = {\n \n def test_openapi_schema():\n     response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert response.json() == openapi_schema\n \n \n def test_security_api_key():\n     response = client.get(\"/users/me?key=secret\")\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert response.json() == {\"username\": \"secret\"}\n \n \n def test_security_api_key_no_key():\n     response = client.get(\"/users/me\")\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert response.json() == {\"msg\": \"Create an account first\"}\n\n@@ -40,17 +40,17 @@ openapi_schema = {\n \n def test_openapi_schema():\n     response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert response.json() == openapi_schema\n \n \n def test_security_http_base():\n     response = client.get(\"/users/me\", headers={\"Authorization\": \"Other foobar\"})\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert response.json() == {\"scheme\": \"Other\", \"credentials\": \"foobar\"}\n \n \n def test_security_http_base_no_credentials():\n     response = client.get(\"/users/me\")\n-    assert response.status_code == 403\n+    assert response.status_code == 403, response.text\n     assert response.json() == {\"detail\": \"Not authenticated\"}\n\n@@ -46,17 +46,17 @@ openapi_schema = {\n \n def test_openapi_schema():\n     response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert response.json() == openapi_schema\n \n \n def test_security_http_base():\n     response = client.get(\"/users/me\", headers={\"Authorization\": \"Other foobar\"})\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert response.json() == {\"scheme\": \"Other\", \"credentials\": \"foobar\"}\n \n \n def test_security_http_base_no_credentials():\n     response = client.get(\"/users/me\")\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert response.json() == {\"msg\": \"Create an account first\"}\n\n@@ -46,20 +46,20 @@ openapi_schema = {\n \n def test_openapi_schema():\n     response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert response.json() == openapi_schema\n \n \n def test_security_http_basic():\n     auth = HTTPBasicAuth(username=\"john\", password=\"secret\")\n     response = client.get(\"/users/me\", auth=auth)\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert response.json() == {\"username\": \"john\", \"password\": \"secret\"}\n \n \n def test_security_http_basic_no_credentials():\n     response = client.get(\"/users/me\")\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert response.json() == {\"msg\": \"Create an account first\"}\n \n \n@@ -67,7 +67,7 @@ def test_security_http_basic_invalid_credentials():\n     response = client.get(\n         \"/users/me\", headers={\"Authorization\": \"Basic notabase64token\"}\n     )\n-    assert response.status_code == 401\n+    assert response.status_code == 401, response.text\n     assert response.headers[\"WWW-Authenticate\"] == \"Basic\"\n     assert response.json() == {\"detail\": \"Invalid authentication credentials\"}\n \n@@ -76,6 +76,6 @@ def test_security_http_basic_non_basic_credentials():\n     payload = b64encode(b\"johnsecret\").decode(\"ascii\")\n     auth_header = f\"Basic {payload}\"\n     response = client.get(\"/users/me\", headers={\"Authorization\": auth_header})\n-    assert response.status_code == 401\n+    assert response.status_code == 401, response.text\n     assert response.headers[\"WWW-Authenticate\"] == \"Basic\"\n     assert response.json() == {\"detail\": \"Invalid authentication credentials\"}\n\n@@ -43,21 +43,21 @@ openapi_schema = {\n \n def test_openapi_schema():\n     response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert response.json() == openapi_schema\n \n \n def test_security_http_basic():\n     auth = HTTPBasicAuth(username=\"john\", password=\"secret\")\n     response = client.get(\"/users/me\", auth=auth)\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert response.json() == {\"username\": \"john\", \"password\": \"secret\"}\n \n \n def test_security_http_basic_no_credentials():\n     response = client.get(\"/users/me\")\n     assert response.json() == {\"detail\": \"Not authenticated\"}\n-    assert response.status_code == 401\n+    assert response.status_code == 401, response.text\n     assert response.headers[\"WWW-Authenticate\"] == 'Basic realm=\"simple\"'\n \n \n@@ -65,7 +65,7 @@ def test_security_http_basic_invalid_credentials():\n     response = client.get(\n         \"/users/me\", headers={\"Authorization\": \"Basic notabase64token\"}\n     )\n-    assert response.status_code == 401\n+    assert response.status_code == 401, response.text\n     assert response.headers[\"WWW-Authenticate\"] == 'Basic realm=\"simple\"'\n     assert response.json() == {\"detail\": \"Invalid authentication credentials\"}\n \n@@ -74,6 +74,6 @@ def test_security_http_basic_non_basic_credentials():\n     payload = b64encode(b\"johnsecret\").decode(\"ascii\")\n     auth_header = f\"Basic {payload}\"\n     response = client.get(\"/users/me\", headers={\"Authorization\": auth_header})\n-    assert response.status_code == 401\n+    assert response.status_code == 401, response.text\n     assert response.headers[\"WWW-Authenticate\"] == 'Basic realm=\"simple\"'\n     assert response.json() == {\"detail\": \"Invalid authentication credentials\"}\n\n@@ -40,23 +40,23 @@ openapi_schema = {\n \n def test_openapi_schema():\n     response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert response.json() == openapi_schema\n \n \n def test_security_http_bearer():\n     response = client.get(\"/users/me\", headers={\"Authorization\": \"Bearer foobar\"})\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert response.json() == {\"scheme\": \"Bearer\", \"credentials\": \"foobar\"}\n \n \n def test_security_http_bearer_no_credentials():\n     response = client.get(\"/users/me\")\n-    assert response.status_code == 403\n+    assert response.status_code == 403, response.text\n     assert response.json() == {\"detail\": \"Not authenticated\"}\n \n \n def test_security_http_bearer_incorrect_scheme_credentials():\n     response = client.get(\"/users/me\", headers={\"Authorization\": \"Basic notreally\"})\n-    assert response.status_code == 403\n+    assert response.status_code == 403, response.text\n     assert response.json() == {\"detail\": \"Invalid authentication credentials\"}\n\n@@ -46,23 +46,23 @@ openapi_schema = {\n \n def test_openapi_schema():\n     response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert response.json() == openapi_schema\n \n \n def test_security_http_bearer():\n     response = client.get(\"/users/me\", headers={\"Authorization\": \"Bearer foobar\"})\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert response.json() == {\"scheme\": \"Bearer\", \"credentials\": \"foobar\"}\n \n \n def test_security_http_bearer_no_credentials():\n     response = client.get(\"/users/me\")\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert response.json() == {\"msg\": \"Create an account first\"}\n \n \n def test_security_http_bearer_incorrect_scheme_credentials():\n     response = client.get(\"/users/me\", headers={\"Authorization\": \"Basic notreally\"})\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert response.json() == {\"msg\": \"Create an account first\"}\n\n@@ -40,19 +40,19 @@ openapi_schema = {\n \n def test_openapi_schema():\n     response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert response.json() == openapi_schema\n \n \n def test_security_http_digest():\n     response = client.get(\"/users/me\", headers={\"Authorization\": \"Digest foobar\"})\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert response.json() == {\"scheme\": \"Digest\", \"credentials\": \"foobar\"}\n \n \n def test_security_http_digest_no_credentials():\n     response = client.get(\"/users/me\")\n-    assert response.status_code == 403\n+    assert response.status_code == 403, response.text\n     assert response.json() == {\"detail\": \"Not authenticated\"}\n \n \n@@ -60,5 +60,5 @@ def test_security_http_digest_incorrect_scheme_credentials():\n     response = client.get(\n         \"/users/me\", headers={\"Authorization\": \"Other invalidauthorization\"}\n     )\n-    assert response.status_code == 403\n+    assert response.status_code == 403, response.text\n     assert response.json() == {\"detail\": \"Invalid authentication credentials\"}\n\n@@ -46,19 +46,19 @@ openapi_schema = {\n \n def test_openapi_schema():\n     response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert response.json() == openapi_schema\n \n \n def test_security_http_digest():\n     response = client.get(\"/users/me\", headers={\"Authorization\": \"Digest foobar\"})\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert response.json() == {\"scheme\": \"Digest\", \"credentials\": \"foobar\"}\n \n \n def test_security_http_digest_no_credentials():\n     response = client.get(\"/users/me\")\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert response.json() == {\"msg\": \"Create an account first\"}\n \n \n@@ -66,5 +66,5 @@ def test_security_http_digest_incorrect_scheme_credentials():\n     response = client.get(\n         \"/users/me\", headers={\"Authorization\": \"Other invalidauthorization\"}\n     )\n-    assert response.status_code == 403\n+    assert response.status_code == 403, response.text\n     assert response.json() == {\"detail\": \"Invalid authentication credentials\"}\n\n@@ -156,25 +156,25 @@ openapi_schema = {\n \n def test_openapi_schema():\n     response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert response.json() == openapi_schema\n \n \n def test_security_oauth2():\n     response = client.get(\"/users/me\", headers={\"Authorization\": \"Bearer footokenbar\"})\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert response.json() == {\"username\": \"Bearer footokenbar\"}\n \n \n def test_security_oauth2_password_other_header():\n     response = client.get(\"/users/me\", headers={\"Authorization\": \"Other footokenbar\"})\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert response.json() == {\"username\": \"Other footokenbar\"}\n \n \n def test_security_oauth2_password_bearer_no_header():\n     response = client.get(\"/users/me\")\n-    assert response.status_code == 403\n+    assert response.status_code == 403, response.text\n     assert response.json() == {\"detail\": \"Not authenticated\"}\n \n \n\n@@ -55,23 +55,23 @@ openapi_schema = {\n \n def test_openapi_schema():\n     response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert response.json() == openapi_schema\n \n \n def test_no_token():\n     response = client.get(\"/items\")\n-    assert response.status_code == 401\n+    assert response.status_code == 401, response.text\n     assert response.json() == {\"detail\": \"Not authenticated\"}\n \n \n def test_incorrect_token():\n     response = client.get(\"/items\", headers={\"Authorization\": \"Non-existent testtoken\"})\n-    assert response.status_code == 401\n+    assert response.status_code == 401, response.text\n     assert response.json() == {\"detail\": \"Not authenticated\"}\n \n \n def test_token():\n     response = client.get(\"/items\", headers={\"Authorization\": \"Bearer testtoken\"})\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert response.json() == {\"token\": \"testtoken\"}\n\n@@ -160,25 +160,25 @@ openapi_schema = {\n \n def test_openapi_schema():\n     response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert response.json() == openapi_schema\n \n \n def test_security_oauth2():\n     response = client.get(\"/users/me\", headers={\"Authorization\": \"Bearer footokenbar\"})\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert response.json() == {\"username\": \"Bearer footokenbar\"}\n \n \n def test_security_oauth2_password_other_header():\n     response = client.get(\"/users/me\", headers={\"Authorization\": \"Other footokenbar\"})\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert response.json() == {\"username\": \"Other footokenbar\"}\n \n \n def test_security_oauth2_password_bearer_no_header():\n     response = client.get(\"/users/me\")\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert response.json() == {\"msg\": \"Create an account first\"}\n \n \n\n@@ -49,23 +49,23 @@ openapi_schema = {\n \n def test_openapi_schema():\n     response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert response.json() == openapi_schema\n \n \n def test_no_token():\n     response = client.get(\"/items\")\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert response.json() == {\"msg\": \"Create an account first\"}\n \n \n def test_token():\n     response = client.get(\"/items\", headers={\"Authorization\": \"Bearer testtoken\"})\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert response.json() == {\"token\": \"testtoken\"}\n \n \n def test_incorrect_token():\n     response = client.get(\"/items\", headers={\"Authorization\": \"Notexistent testtoken\"})\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert response.json() == {\"msg\": \"Create an account first\"}\n\n@@ -52,23 +52,23 @@ openapi_schema = {\n \n def test_openapi_schema():\n     response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert response.json() == openapi_schema\n \n \n def test_security_oauth2():\n     response = client.get(\"/users/me\", headers={\"Authorization\": \"Bearer footokenbar\"})\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert response.json() == {\"username\": \"Bearer footokenbar\"}\n \n \n def test_security_oauth2_password_other_header():\n     response = client.get(\"/users/me\", headers={\"Authorization\": \"Other footokenbar\"})\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert response.json() == {\"username\": \"Other footokenbar\"}\n \n \n def test_security_oauth2_password_bearer_no_header():\n     response = client.get(\"/users/me\")\n-    assert response.status_code == 403\n+    assert response.status_code == 403, response.text\n     assert response.json() == {\"detail\": \"Not authenticated\"}\n\n@@ -58,23 +58,23 @@ openapi_schema = {\n \n def test_openapi_schema():\n     response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert response.json() == openapi_schema\n \n \n def test_security_oauth2():\n     response = client.get(\"/users/me\", headers={\"Authorization\": \"Bearer footokenbar\"})\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert response.json() == {\"username\": \"Bearer footokenbar\"}\n \n \n def test_security_oauth2_password_other_header():\n     response = client.get(\"/users/me\", headers={\"Authorization\": \"Other footokenbar\"})\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert response.json() == {\"username\": \"Other footokenbar\"}\n \n \n def test_security_oauth2_password_bearer_no_header():\n     response = client.get(\"/users/me\")\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert response.json() == {\"msg\": \"Create an account first\"}\n\n@@ -126,31 +126,31 @@ openapi_schema = {\n \n def test_openapi_schema():\n     response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert response.json() == openapi_schema\n \n \n def test_get_item():\n     response = client.get(\"/items/foo\")\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert response.json() == {\"item\": \"The Foo Wrestlers\"}\n \n \n def test_get_item_not_found():\n     response = client.get(\"/items/bar\")\n-    assert response.status_code == 404\n+    assert response.status_code == 404, response.text\n     assert response.headers.get(\"x-error\") == \"Some custom header\"\n     assert response.json() == {\"detail\": \"Item not found\"}\n \n \n def test_get_starlette_item():\n     response = client.get(\"/starlette-items/foo\")\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert response.json() == {\"item\": \"The Foo Wrestlers\"}\n \n \n def test_get_starlette_item_not_found():\n     response = client.get(\"/starlette-items/bar\")\n-    assert response.status_code == 404\n+    assert response.status_code == 404, response.text\n     assert response.headers.get(\"x-error\") is None\n     assert response.json() == {\"detail\": \"Item not found\"}\n\n@@ -25,7 +25,7 @@ client = TestClient(app)\n def test_route_converters_int():\n     # Test integer conversion\n     response = client.get(\"/int/5\")\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert response.json() == {\"int\": 5}\n     assert app.url_path_for(\"int_convertor\", param=5) == \"/int/5\"\n \n@@ -33,7 +33,7 @@ def test_route_converters_int():\n def test_route_converters_float():\n     # Test float conversion\n     response = client.get(\"/float/25.5\")\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert response.json() == {\"float\": 25.5}\n     assert app.url_path_for(\"float_convertor\", param=25.5) == \"/float/25.5\"\n \n@@ -41,7 +41,7 @@ def test_route_converters_float():\n def test_route_converters_path():\n     # Test path conversion\n     response = client.get(\"/path/some/example\")\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert response.json() == {\"path\": \"some/example\"}\n \n \n\n@@ -221,7 +221,7 @@ def test_get():\n     response = client.post(\n         \"/invoices/\", json={\"id\": \"fooinvoice\", \"customer\": \"John\", \"total\": 5.3}\n     )\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert response.json() == {\"msg\": \"Invoice received\"}\n \n \n\n@@ -16,7 +16,7 @@ client = TestClient(app)\n \n def test_swagger_ui():\n     response = client.get(\"/docs\")\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     print(response.text)\n     assert f\"ui.initOAuth\" in response.text\n     assert f'\"appName\": \"The Predendapp\"' in response.text\n\n@@ -100,17 +100,17 @@ openapi_schema = {\n \n def test_openapi_schema():\n     response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert response.json() == openapi_schema\n \n \n def test_path_operation():\n     response = client.get(\"/items/foo\")\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert response.json() == {\"id\": \"foo\", \"value\": \"there goes my hero\"}\n \n \n def test_path_operation_not_found():\n     response = client.get(\"/items/bar\")\n-    assert response.status_code == 404\n+    assert response.status_code == 404, response.text\n     assert response.json() == {\"message\": \"Item not found\"}\n\n@@ -96,20 +96,20 @@ openapi_schema = {\n \n def test_openapi_schema():\n     response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert response.json() == openapi_schema\n \n \n def test_path_operation():\n     response = client.get(\"/items/foo\")\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert response.json() == {\"id\": \"foo\", \"value\": \"there goes my hero\"}\n \n \n def test_path_operation_img():\n     shutil.copy(\"./docs/en/docs/img/favicon.png\", \"./image.png\")\n     response = client.get(\"/items/foo?img=1\")\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert response.headers[\"Content-Type\"] == \"image/png\"\n     assert len(response.content)\n     os.remove(\"./image.png\")\n\n@@ -101,17 +101,17 @@ openapi_schema = {\n \n def test_openapi_schema():\n     response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert response.json() == openapi_schema\n \n \n def test_path_operation():\n     response = client.get(\"/items/foo\")\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert response.json() == {\"id\": \"foo\", \"value\": \"there goes my hero\"}\n \n \n def test_path_operation_not_found():\n     response = client.get(\"/items/bar\")\n-    assert response.status_code == 404\n+    assert response.status_code == 404, response.text\n     assert response.json() == {\"message\": \"Item not found\"}\n\n@@ -99,20 +99,20 @@ openapi_schema = {\n \n def test_openapi_schema():\n     response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert response.json() == openapi_schema\n \n \n def test_path_operation():\n     response = client.get(\"/items/foo\")\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert response.json() == {\"id\": \"foo\", \"value\": \"there goes my hero\"}\n \n \n def test_path_operation_img():\n     shutil.copy(\"./docs/en/docs/img/favicon.png\", \"./image.png\")\n     response = client.get(\"/items/foo?img=1\")\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert response.headers[\"Content-Type\"] == \"image/png\"\n     assert len(response.content)\n     os.remove(\"./image.png\")\n\n@@ -7,11 +7,11 @@ client = TestClient(app)\n \n def test_update():\n     response = client.put(\"/items/foo\", json={\"name\": \"Wrestlers\"})\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert response.json() == {\"name\": \"Wrestlers\", \"size\": None}\n \n \n def test_create():\n     response = client.put(\"/items/red\", json={\"name\": \"Chillies\"})\n-    assert response.status_code == 201\n+    assert response.status_code == 201, response.text\n     assert response.json() == {\"name\": \"Chillies\", \"size\": None}\n\n@@ -6,9 +6,9 @@ from advanced_middleware.tutorial001 import app\n def test_middleware():\n     client = TestClient(app, base_url=\"https://testserver\")\n     response = client.get(\"/\")\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n \n     client = TestClient(app)\n     response = client.get(\"/\", allow_redirects=False)\n-    assert response.status_code == 307\n+    assert response.status_code == 307, response.text\n     assert response.headers[\"location\"] == \"https://testserver/\"\n\n@@ -6,10 +6,10 @@ from advanced_middleware.tutorial002 import app\n def test_middleware():\n     client = TestClient(app, base_url=\"http://example.com\")\n     response = client.get(\"/\")\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     client = TestClient(app, base_url=\"http://subdomain.example.com\")\n     response = client.get(\"/\")\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     client = TestClient(app, base_url=\"http://invalidhost\")\n     response = client.get(\"/\")\n-    assert response.status_code == 400\n+    assert response.status_code == 400, response.text\n\n@@ -14,9 +14,9 @@ client = TestClient(app)\n \n def test_middleware():\n     response = client.get(\"/large\", headers={\"accept-encoding\": \"gzip\"})\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert response.text == \"x\" * 4000\n     assert response.headers[\"Content-Encoding\"] == \"gzip\"\n     assert int(response.headers[\"Content-Length\"]) < 4000\n     response = client.get(\"/\")\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n\n@@ -113,7 +113,7 @@ openapi_schema = {\n def test_openapi_schema():\n     with TestClient(app) as client:\n         response = client.get(\"/openapi.json\")\n-        assert response.status_code == 200\n+        assert response.status_code == 200, response.text\n         assert response.json() == openapi_schema\n \n \n@@ -121,11 +121,11 @@ def test_create_read():\n     with TestClient(app) as client:\n         note = {\"text\": \"Foo bar\", \"completed\": False}\n         response = client.post(\"/notes/\", json=note)\n-        assert response.status_code == 200\n+        assert response.status_code == 200, response.text\n         data = response.json()\n         assert data[\"text\"] == note[\"text\"]\n         assert data[\"completed\"] == note[\"completed\"]\n         assert \"id\" in data\n         response = client.get(f\"/notes/\")\n-        assert response.status_code == 200\n+        assert response.status_code == 200, response.text\n         assert data in response.json()\n\n@@ -13,7 +13,7 @@ def test():\n     if log.is_file():\n         os.remove(log)  # pragma: no cover\n     response = client.post(\"/send-notification/foo@example.com\")\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert response.json() == {\"message\": \"Notification sent in the background\"}\n     with open(\"./log.txt\") as f:\n         assert \"notification for foo@example.com: some notification\" in f.read()\n\n@@ -13,7 +13,7 @@ def test():\n     if log.is_file():\n         os.remove(log)  # pragma: no cover\n     response = client.post(\"/send-notification/foo@example.com?q=some-query\")\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert response.json() == {\"message\": \"Message sent\"}\n     with open(\"./log.txt\") as f:\n         assert \"found query: some-query\\nmessage to foo@example.com\" in f.read()\n\n@@ -270,7 +270,7 @@ def test_get_path(path, expected_status, expected_response, headers):\n \n def test_put_no_header():\n     response = client.put(\"/items/foo\")\n-    assert response.status_code == 422\n+    assert response.status_code == 422, response.text\n     assert response.json() == {\n         \"detail\": [\n             {\n@@ -284,17 +284,17 @@ def test_put_no_header():\n \n def test_put_invalid_header():\n     response = client.put(\"/items/foo\", headers={\"X-Token\": \"invalid\"})\n-    assert response.status_code == 400\n+    assert response.status_code == 400, response.text\n     assert response.json() == {\"detail\": \"X-Token header invalid\"}\n \n \n def test_put():\n     response = client.put(\"/items/foo\", headers={\"X-Token\": \"fake-super-secret-token\"})\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert response.json() == {\"item_id\": \"foo\", \"name\": \"The Fighters\"}\n \n \n def test_put_forbidden():\n     response = client.put(\"/items/bar\", headers={\"X-Token\": \"fake-super-secret-token\"})\n-    assert response.status_code == 403\n+    assert response.status_code == 403, response.text\n     assert response.json() == {\"detail\": \"You can only update the item: foo\"}\n\n@@ -85,7 +85,7 @@ openapi_schema = {\n \n def test_openapi_schema():\n     response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert response.json() == openapi_schema\n \n \n@@ -176,5 +176,5 @@ def test_post_body(path, body, expected_status, expected_response):\n \n def test_post_broken_body():\n     response = client.post(\"/items/\", data={\"name\": \"Foo\", \"price\": 50.5})\n-    assert response.status_code == 400\n+    assert response.status_code == 400, response.text\n     assert response.json() == {\"detail\": \"There was an error parsing the body\"}\n\n@@ -120,7 +120,7 @@ openapi_schema = {\n \n def test_openapi_schema():\n     response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert response.json() == openapi_schema\n \n \n\n@@ -103,7 +103,7 @@ openapi_schema = {\n \n def test_openapi_schema():\n     response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert response.json() == openapi_schema\n \n \n\n@@ -114,7 +114,7 @@ openapi_schema = {\n \n def test_openapi_schema():\n     response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert response.json() == openapi_schema\n \n \n\n@@ -77,21 +77,21 @@ openapi_schema = {\n \n def test_openapi_schema():\n     response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert response.json() == openapi_schema\n \n \n def test_post_body():\n     data = {\"2\": 2.2, \"3\": 3.3}\n     response = client.post(\"/index-weights/\", json=data)\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert response.json() == data\n \n \n def test_post_invalid_body():\n     data = {\"foo\": 2.2, \"3\": 3.3}\n     response = client.post(\"/index-weights/\", json=data)\n-    assert response.status_code == 422\n+    assert response.status_code == 422, response.text\n     assert response.json() == {\n         \"detail\": [\n             {\n\n@@ -133,13 +133,13 @@ openapi_schema = {\n \n def test_openapi_schema():\n     response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert response.json() == openapi_schema\n \n \n def test_get():\n     response = client.get(\"/items/baz\")\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert response.json() == {\n         \"name\": \"Baz\",\n         \"description\": None,\n\n@@ -12,7 +12,7 @@ def test_cors():\n         \"Access-Control-Request-Headers\": \"X-Example\",\n     }\n     response = client.options(\"/\", headers=headers)\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert response.text == \"OK\"\n     assert (\n         response.headers[\"access-control-allow-origin\"]\n@@ -23,7 +23,7 @@ def test_cors():\n     # Test standard response\n     headers = {\"Origin\": \"https://localhost.tiangolo.com\"}\n     response = client.get(\"/\", headers=headers)\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert response.json() == {\"message\": \"Hello World\"}\n     assert (\n         response.headers[\"access-control-allow-origin\"]\n@@ -32,6 +32,6 @@ def test_cors():\n \n     # Test non-CORS response\n     response = client.get(\"/\")\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert response.json() == {\"message\": \"Hello World\"}\n     assert \"access-control-allow-origin\" not in response.headers\n\n@@ -26,11 +26,11 @@ openapi_schema = {\n \n def test_openapi_schema():\n     response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert response.json() == openapi_schema\n \n \n def test_get_custom_response():\n     response = client.get(\"/items/\")\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert response.json() == [{\"item_id\": \"Foo\"}]\n\n@@ -37,11 +37,11 @@ html_contents = \"\"\"\n \n def test_openapi_schema():\n     response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert response.json() == openapi_schema\n \n \n def test_get_custom_response():\n     response = client.get(\"/items/\")\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert response.text == html_contents\n\n@@ -26,11 +26,11 @@ openapi_schema = {\n \n def test_openapi_schema():\n     response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert response.json() == openapi_schema\n \n \n def test_get():\n     response = client.get(\"/\")\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert response.text == \"Hello World\"\n\n@@ -7,5 +7,5 @@ client = TestClient(app)\n \n def test_get():\n     response = client.get(\"/typer\", allow_redirects=False)\n-    assert response.status_code == 307\n+    assert response.status_code == 307, response.text\n     assert response.headers[\"location\"] == \"https://typer.tiangolo.com\"\n\n@@ -128,7 +128,7 @@ openapi_schema = {\n \n def test_openapi_schema():\n     response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert response.json() == openapi_schema\n \n \n\n@@ -86,7 +86,7 @@ openapi_schema = {\n \n def test_openapi_schema():\n     response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert response.json() == openapi_schema\n \n \n\n@@ -79,13 +79,13 @@ openapi_schema = {\n \n def test_openapi_schema():\n     response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert response.json() == openapi_schema\n \n \n def test_get_no_headers():\n     response = client.get(\"/items/\")\n-    assert response.status_code == 422\n+    assert response.status_code == 422, response.text\n     assert response.json() == {\n         \"detail\": [\n             {\n@@ -104,7 +104,7 @@ def test_get_no_headers():\n \n def test_get_invalid_one_header():\n     response = client.get(\"/items/\", headers={\"X-Token\": \"invalid\"})\n-    assert response.status_code == 400\n+    assert response.status_code == 400, response.text\n     assert response.json() == {\"detail\": \"X-Token header invalid\"}\n \n \n@@ -112,7 +112,7 @@ def test_get_invalid_second_header():\n     response = client.get(\n         \"/items/\", headers={\"X-Token\": \"fake-super-secret-token\", \"X-Key\": \"invalid\"}\n     )\n-    assert response.status_code == 400\n+    assert response.status_code == 400, response.text\n     assert response.json() == {\"detail\": \"X-Key header invalid\"}\n \n \n@@ -124,5 +124,5 @@ def test_get_valid_headers():\n             \"X-Key\": \"fake-super-secret-key\",\n         },\n     )\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert response.json() == [{\"item\": \"Foo\"}, {\"item\": \"Bar\"}]\n\n@@ -72,8 +72,8 @@ openapi_schema = {\n def test_events():\n     with TestClient(app) as client:\n         response = client.get(\"/openapi.json\")\n-        assert response.status_code == 200\n+        assert response.status_code == 200, response.text\n         assert response.json() == openapi_schema\n         response = client.get(\"/items/foo\")\n-        assert response.status_code == 200\n+        assert response.status_code == 200, response.text\n         assert response.json() == {\"name\": \"Fighters\"}\n\n@@ -25,10 +25,10 @@ openapi_schema = {\n def test_events():\n     with TestClient(app) as client:\n         response = client.get(\"/openapi.json\")\n-        assert response.status_code == 200\n+        assert response.status_code == 200, response.text\n         assert response.json() == openapi_schema\n         response = client.get(\"/items/\")\n-        assert response.status_code == 200\n+        assert response.status_code == 200, response.text\n         assert response.json() == [{\"name\": \"Foo\"}]\n     with open(\"log.txt\") as log:\n         assert \"Application shutdown\" in log.read()\n\n@@ -31,14 +31,14 @@ openapi_schema = {\n \n def test_openapi_schema():\n     response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert response.json() == openapi_schema\n     response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert response.json() == openapi_schema\n \n \n def test():\n     response = client.get(\"/items/\")\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert response.json() == [{\"name\": \"Foo\"}]\n\n@@ -19,24 +19,24 @@ def client():\n \n def test_swagger_ui_html(client: TestClient):\n     response = client.get(\"/docs\")\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert \"/static/swagger-ui-bundle.js\" in response.text\n     assert \"/static/swagger-ui.css\" in response.text\n \n \n def test_swagger_ui_oauth2_redirect_html(client: TestClient):\n     response = client.get(\"/docs/oauth2-redirect\")\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert \"window.opener.swaggerUIRedirectOauth2\" in response.text\n \n \n def test_redoc_html(client: TestClient):\n     response = client.get(\"/redoc\")\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert \"/static/redoc.standalone.js\" in response.text\n \n \n def test_api(client: TestClient):\n     response = client.get(\"/users/john\")\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert response.json()[\"message\"] == \"Hello john\"\n\n@@ -113,7 +113,7 @@ openapi_schema = {\n \n def test_openapi_schema():\n     response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert response.json() == openapi_schema\n \n \n@@ -134,5 +134,5 @@ def test_extra_types():\n         }\n     )\n     response = client.put(f\"/items/{item_id}\", json=data)\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert response.json() == expected_response\n\n@@ -102,13 +102,13 @@ openapi_schema = {\n \n def test_openapi_schema():\n     response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert response.json() == openapi_schema\n \n \n def test_get_car():\n     response = client.get(\"/items/item1\")\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert response.json() == {\n         \"description\": \"All my friends drive a low rider\",\n         \"type\": \"car\",\n@@ -117,7 +117,7 @@ def test_get_car():\n \n def test_get_plane():\n     response = client.get(\"/items/item2\")\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert response.json() == {\n         \"description\": \"Music is my aeroplane, it's my aeroplane\",\n         \"type\": \"plane\",\n\n@@ -47,13 +47,13 @@ openapi_schema = {\n \n def test_openapi_schema():\n     response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert response.json() == openapi_schema\n \n \n def test_get_items():\n     response = client.get(\"/items/\")\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert response.json() == [\n         {\"name\": \"Foo\", \"description\": \"There comes my hero\"},\n         {\"name\": \"Red\", \"description\": \"It's my aeroplane\"},\n\n@@ -34,11 +34,11 @@ openapi_schema = {\n \n def test_openapi_schema():\n     response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert response.json() == openapi_schema\n \n \n def test_get_items():\n     response = client.get(\"/keyword-weights/\")\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert response.json() == {\"foo\": 2.3, \"bar\": 3.4}\n\n@@ -73,18 +73,18 @@ openapi_schema = {\n \n def test_openapi_schema():\n     response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert response.json() == openapi_schema\n \n \n def test_get_item():\n     response = client.get(\"/items/foo\")\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert response.json() == {\"item\": \"The Foo Wrestlers\"}\n \n \n def test_get_item_not_found():\n     response = client.get(\"/items/bar\")\n-    assert response.status_code == 404\n+    assert response.status_code == 404, response.text\n     assert response.headers.get(\"x-error\") is None\n     assert response.json() == {\"detail\": \"Item not found\"}\n\n@@ -73,18 +73,18 @@ openapi_schema = {\n \n def test_openapi_schema():\n     response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert response.json() == openapi_schema\n \n \n def test_get_item_header():\n     response = client.get(\"/items-header/foo\")\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert response.json() == {\"item\": \"The Foo Wrestlers\"}\n \n \n def test_get_item_not_found_header():\n     response = client.get(\"/items-header/bar\")\n-    assert response.status_code == 404\n+    assert response.status_code == 404, response.text\n     assert response.headers.get(\"x-error\") == \"There goes my error\"\n     assert response.json() == {\"detail\": \"Item not found\"}\n\n@@ -73,19 +73,19 @@ openapi_schema = {\n \n def test_openapi_schema():\n     response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert response.json() == openapi_schema\n \n \n def test_get():\n     response = client.get(\"/unicorns/shinny\")\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert response.json() == {\"unicorn_name\": \"shinny\"}\n \n \n def test_get_exception():\n     response = client.get(\"/unicorns/yolo\")\n-    assert response.status_code == 418\n+    assert response.status_code == 418, response.text\n     assert response.json() == {\n         \"message\": \"Oops! yolo did something. There goes a rainbow...\"\n     }\n\n@@ -73,13 +73,13 @@ openapi_schema = {\n \n def test_openapi_schema():\n     response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert response.json() == openapi_schema\n \n \n def test_get_validation_error():\n     response = client.get(\"/items/foo\")\n-    assert response.status_code == 400\n+    assert response.status_code == 400, response.text\n     validation_error_str_lines = [\n         b\"1 validation error for Request\",\n         b\"path -> item_id\",\n@@ -90,11 +90,11 @@ def test_get_validation_error():\n \n def test_get_http_error():\n     response = client.get(\"/items/3\")\n-    assert response.status_code == 418\n+    assert response.status_code == 418, response.text\n     assert response.content == b\"Nope! I don't like 3.\"\n \n \n def test_get():\n     response = client.get(\"/items/2\")\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert response.json() == {\"item_id\": 2}\n\n@@ -82,13 +82,13 @@ openapi_schema = {\n \n def test_openapi_schema():\n     response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert response.json() == openapi_schema\n \n \n def test_post_validation_error():\n     response = client.post(\"/items/\", json={\"title\": \"towel\", \"size\": \"XL\"})\n-    assert response.status_code == 422\n+    assert response.status_code == 422, response.text\n     assert response.json() == {\n         \"detail\": [\n             {\n@@ -104,5 +104,5 @@ def test_post_validation_error():\n def test_post():\n     data = {\"title\": \"towel\", \"size\": 5}\n     response = client.post(\"/items/\", json=data)\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert response.json() == data\n\n@@ -73,13 +73,13 @@ openapi_schema = {\n \n def test_openapi_schema():\n     response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert response.json() == openapi_schema\n \n \n def test_get_validation_error():\n     response = client.get(\"/items/foo\")\n-    assert response.status_code == 422\n+    assert response.status_code == 422, response.text\n     assert response.json() == {\n         \"detail\": [\n             {\n@@ -93,11 +93,11 @@ def test_get_validation_error():\n \n def test_get_http_error():\n     response = client.get(\"/items/3\")\n-    assert response.status_code == 418\n+    assert response.status_code == 418, response.text\n     assert response.json() == {\"detail\": \"Nope! I don't like 3.\"}\n \n \n def test_get():\n     response = client.get(\"/items/2\")\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert response.json() == {\"item_id\": 2}\n\n@@ -30,11 +30,11 @@ openapi_schema = {\n \n def test_openapi_schema():\n     response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert response.json() == openapi_schema\n \n \n def test_items():\n     response = client.get(\"/items/\")\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert response.json() == [{\"name\": \"Foo\"}]\n\n@@ -165,7 +165,7 @@ def test_get():\n     response = client.post(\n         \"/invoices/\", json={\"id\": \"fooinvoice\", \"customer\": \"John\", \"total\": 5.3}\n     )\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert response.json() == {\"msg\": \"Invoice received\"}\n \n \n\n@@ -26,11 +26,11 @@ openapi_schema = {\n \n def test_openapi_schema():\n     response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert response.json() == openapi_schema\n \n \n def test_get():\n     response = client.get(\"/items/\")\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert response.json() == [{\"item_id\": \"Foo\"}]\n\n@@ -26,11 +26,11 @@ openapi_schema = {\n \n def test_openapi_schema():\n     response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert response.json() == openapi_schema\n \n \n def test_get():\n     response = client.get(\"/items/\")\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert response.json() == [{\"item_id\": \"Foo\"}]\n\n@@ -13,11 +13,11 @@ openapi_schema = {\n \n def test_openapi_schema():\n     response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert response.json() == openapi_schema\n \n \n def test_get():\n     response = client.get(\"/items/\")\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert response.json() == [{\"item_id\": \"Foo\"}]\n\n@@ -96,13 +96,13 @@ openapi_schema = {\n \n def test_openapi_schema():\n     response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert response.json() == openapi_schema\n \n \n def test_query_params_str_validations():\n     response = client.post(\"/items/\", json={\"name\": \"Foo\", \"price\": 42})\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert response.json() == {\n         \"name\": \"Foo\",\n         \"price\": 42,\n\n@@ -96,13 +96,13 @@ openapi_schema = {\n \n def test_openapi_schema():\n     response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert response.json() == openapi_schema\n \n \n def test_query_params_str_validations():\n     response = client.post(\"/items/\", json={\"name\": \"Foo\", \"price\": 42})\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert response.json() == {\n         \"name\": \"Foo\",\n         \"price\": 42,\n\n@@ -55,7 +55,7 @@ openapi_schema = {\n \n def test_openapi_schema():\n     response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert response.json() == openapi_schema\n \n \n\n@@ -73,19 +73,19 @@ openapi_schema = {\n \n def test_openapi():\n     response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert response.json() == openapi_schema\n \n \n def test_file_path():\n     response = client.get(\"/files/home/johndoe/myfile.txt\")\n     print(response.content)\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert response.json() == {\"file_path\": \"home/johndoe/myfile.txt\"}\n \n \n def test_root_file_path():\n     response = client.get(\"/files//home/johndoe/myfile.txt\")\n     print(response.content)\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert response.json() == {\"file_path\": \"/home/johndoe/myfile.txt\"}\n\n@@ -78,7 +78,7 @@ openapi_schema = {\n \n def test_openapi():\n     response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert response.json() == openapi_schema\n \n \n\n@@ -79,17 +79,17 @@ openapi_schema = {\n \n def test_openapi():\n     response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert response.json() == openapi_schema\n \n \n def test_read_item():\n     response = client.get(\"/items/foo\")\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert response.json() == {\"item_id\": \"foo\", \"limit\": None}\n \n \n def test_read_item_query():\n     response = client.get(\"/items/foo?limit=5\")\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert response.json() == {\"item_id\": \"foo\", \"limit\": 5}\n\n@@ -83,7 +83,7 @@ openapi_schema = {\n \n def test_openapi_schema():\n     response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert response.json() == openapi_schema\n \n \n\n@@ -77,19 +77,19 @@ openapi_schema = {\n \n def test_openapi_schema():\n     response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert response.json() == openapi_schema\n \n \n def test_multi_query_values():\n     url = \"/items/?q=foo&q=bar\"\n     response = client.get(url)\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert response.json() == {\"q\": [\"foo\", \"bar\"]}\n \n \n def test_query_no_values():\n     url = \"/items/\"\n     response = client.get(url)\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert response.json() == {\"q\": None}\n\n@@ -78,19 +78,19 @@ openapi_schema = {\n \n def test_openapi_schema():\n     response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert response.json() == openapi_schema\n \n \n def test_default_query_values():\n     url = \"/items/\"\n     response = client.get(url)\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert response.json() == {\"q\": [\"foo\", \"bar\"]}\n \n \n def test_multi_query_values():\n     url = \"/items/?q=baz&q=foobar\"\n     response = client.get(url)\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert response.json() == {\"q\": [\"baz\", \"foobar\"]}\n\n@@ -73,19 +73,19 @@ openapi_schema = {\n \n def test_openapi_schema():\n     response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert response.json() == openapi_schema\n \n \n def test_multi_query_values():\n     url = \"/items/?q=foo&q=bar\"\n     response = client.get(url)\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert response.json() == {\"q\": [\"foo\", \"bar\"]}\n \n \n def test_query_no_values():\n     url = \"/items/\"\n     response = client.get(url)\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert response.json() == {\"q\": None}\n\n@@ -125,7 +125,7 @@ openapi_schema = {\n \n def test_openapi_schema():\n     response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert response.json() == openapi_schema\n \n \n@@ -142,13 +142,13 @@ file_required = {\n \n def test_post_form_no_body():\n     response = client.post(\"/files/\")\n-    assert response.status_code == 422\n+    assert response.status_code == 422, response.text\n     assert response.json() == file_required\n \n \n def test_post_body_json():\n     response = client.post(\"/files/\", json={\"file\": \"Foo\"})\n-    assert response.status_code == 422\n+    assert response.status_code == 422, response.text\n     assert response.json() == file_required\n \n \n@@ -159,7 +159,7 @@ def test_post_file(tmpdir):\n \n     client = TestClient(app)\n     response = client.post(\"/files/\", files={\"file\": open(path, \"rb\")})\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert response.json() == {\"file_size\": 14}\n \n \n@@ -171,7 +171,7 @@ def test_post_large_file(tmpdir):\n \n     client = TestClient(app)\n     response = client.post(\"/files/\", files={\"file\": open(path, \"rb\")})\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert response.json() == {\"file_size\": default_pydantic_max_size + 1}\n \n \n@@ -182,5 +182,5 @@ def test_post_upload_file(tmpdir):\n \n     client = TestClient(app)\n     response = client.post(\"/uploadfile/\", files={\"file\": open(path, \"rb\")})\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert response.json() == {\"filename\": \"test.txt\"}\n\n@@ -145,7 +145,7 @@ openapi_schema = {\n \n def test_openapi_schema():\n     response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert response.json() == openapi_schema\n \n \n@@ -162,13 +162,13 @@ file_required = {\n \n def test_post_form_no_body():\n     response = client.post(\"/files/\")\n-    assert response.status_code == 422\n+    assert response.status_code == 422, response.text\n     assert response.json() == file_required\n \n \n def test_post_body_json():\n     response = client.post(\"/files/\", json={\"file\": \"Foo\"})\n-    assert response.status_code == 422\n+    assert response.status_code == 422, response.text\n     assert response.json() == file_required\n \n \n@@ -188,7 +188,7 @@ def test_post_files(tmpdir):\n             (\"files\", (\"test2.txt\", open(path2, \"rb\"))),\n         ),\n     )\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert response.json() == {\"file_sizes\": [14, 15]}\n \n \n@@ -208,12 +208,12 @@ def test_post_upload_file(tmpdir):\n             (\"files\", (\"test2.txt\", open(path2, \"rb\"))),\n         ),\n     )\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert response.json() == {\"filenames\": [\"test.txt\", \"test2.txt\"]}\n \n \n def test_get_root():\n     client = TestClient(app)\n     response = client.get(\"/\")\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert b\"<form\" in response.content\n\n@@ -85,7 +85,7 @@ openapi_schema = {\n \n def test_openapi_schema():\n     response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert response.json() == openapi_schema\n \n \n@@ -145,5 +145,5 @@ def test_post_body_form(path, body, expected_status, expected_response):\n \n def test_post_body_json():\n     response = client.post(\"/login/\", json={\"username\": \"Foo\", \"password\": \"secret\"})\n-    assert response.status_code == 422\n+    assert response.status_code == 422, response.text\n     assert response.json() == username_and_password_required\n\n@@ -88,7 +88,7 @@ openapi_schema = {\n \n def test_openapi_schema():\n     response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert response.json() == openapi_schema\n \n \n@@ -147,19 +147,19 @@ file_and_token_required = {\n \n def test_post_form_no_body():\n     response = client.post(\"/files/\")\n-    assert response.status_code == 422\n+    assert response.status_code == 422, response.text\n     assert response.json() == file_and_token_required\n \n \n def test_post_form_no_file():\n     response = client.post(\"/files/\", data={\"token\": \"foo\"})\n-    assert response.status_code == 422\n+    assert response.status_code == 422, response.text\n     assert response.json() == file_required\n \n \n def test_post_body_json():\n     response = client.post(\"/files/\", json={\"file\": \"Foo\", \"token\": \"Bar\"})\n-    assert response.status_code == 422\n+    assert response.status_code == 422, response.text\n     assert response.json() == file_and_token_required\n \n \n@@ -170,7 +170,7 @@ def test_post_file_no_token(tmpdir):\n \n     client = TestClient(app)\n     response = client.post(\"/files/\", files={\"file\": open(path, \"rb\")})\n-    assert response.status_code == 422\n+    assert response.status_code == 422, response.text\n     assert response.json() == token_required\n \n \n@@ -189,7 +189,7 @@ def test_post_files_and_token(tmpdir):\n             \"fileb\": (\"testb.txt\", pathb.open(\"rb\"), \"text/plain\"),\n         },\n     )\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert response.json() == {\n         \"file_size\": 14,\n         \"token\": \"foo\",\n\n@@ -8,8 +8,8 @@ client = TestClient(app)\n def test_path_operation():\n     response = client.put(\"/get-or-create-task/foo\")\n     print(response.content)\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert response.json() == \"Listen to the Bar Fighters\"\n     response = client.put(\"/get-or-create-task/bar\")\n-    assert response.status_code == 201\n+    assert response.status_code == 201, response.text\n     assert response.json() == \"This didn't exist before\"\n\n@@ -7,6 +7,6 @@ client = TestClient(app)\n \n def test_path_operation():\n     response = client.post(\"/cookie/\")\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert response.json() == {\"message\": \"Come to the dark side, we have cookies\"}\n     assert response.cookies[\"fakesession\"] == \"fake-cookie-session-value\"\n\n@@ -7,6 +7,6 @@ client = TestClient(app)\n \n def test_path_operation():\n     response = client.post(\"/cookie-and-object/\")\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert response.json() == {\"message\": \"Come to the dark side, we have cookies\"}\n     assert response.cookies[\"fakesession\"] == \"fake-cookie-session-value\"\n\n@@ -7,7 +7,7 @@ client = TestClient(app)\n \n def test_path_operation():\n     response = client.get(\"/headers/\")\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert response.json() == {\"message\": \"Hello World\"}\n     assert response.headers[\"X-Cat-Dog\"] == \"alone in the world\"\n     assert response.headers[\"Content-Language\"] == \"en-US\"\n\n@@ -7,6 +7,6 @@ client = TestClient(app)\n \n def test_path_operation():\n     response = client.get(\"/headers-and-object/\")\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert response.json() == {\"message\": \"Hello World\"}\n     assert response.headers[\"X-Cat-Dog\"] == \"alone in the world\"\n\n@@ -98,7 +98,7 @@ openapi_schema = {\n \n def test_openapi_schema():\n     response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert response.json() == openapi_schema\n \n \n@@ -112,7 +112,7 @@ def test_post_user():\n             \"full_name\": \"Grave Dohl\",\n         },\n     )\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert response.json() == {\n         \"username\": \"foo\",\n         \"email\": \"foo@example.com\",\n\n@@ -95,7 +95,7 @@ openapi_schema = {\n \n def test_openapi_schema():\n     response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert response.json() == openapi_schema\n \n \n@@ -121,5 +121,5 @@ def test_openapi_schema():\n )\n def test_get(url, data):\n     response = client.get(url)\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert response.json() == data\n\n@@ -122,19 +122,19 @@ openapi_schema = {\n \n def test_openapi_schema():\n     response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert response.json() == openapi_schema\n \n \n def test_read_item_name():\n     response = client.get(\"/items/bar/name\")\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert response.json() == {\"name\": \"Bar\", \"description\": \"The Bar fighters\"}\n \n \n def test_read_item_public_data():\n     response = client.get(\"/items/bar/public\")\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert response.json() == {\n         \"name\": \"Bar\",\n         \"description\": \"The Bar fighters\",\n\n@@ -122,19 +122,19 @@ openapi_schema = {\n \n def test_openapi_schema():\n     response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert response.json() == openapi_schema\n \n \n def test_read_item_name():\n     response = client.get(\"/items/bar/name\")\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert response.json() == {\"name\": \"Bar\", \"description\": \"The Bar fighters\"}\n \n \n def test_read_item_public_data():\n     response = client.get(\"/items/bar/public\")\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert response.json() == {\n         \"name\": \"Bar\",\n         \"description\": \"The Bar fighters\",\n\n@@ -35,25 +35,25 @@ openapi_schema = {\n \n def test_openapi_schema():\n     response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert response.json() == openapi_schema\n \n \n def test_no_token():\n     response = client.get(\"/items\")\n-    assert response.status_code == 401\n+    assert response.status_code == 401, response.text\n     assert response.json() == {\"detail\": \"Not authenticated\"}\n     assert response.headers[\"WWW-Authenticate\"] == \"Bearer\"\n \n \n def test_token():\n     response = client.get(\"/items\", headers={\"Authorization\": \"Bearer testtoken\"})\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert response.json() == {\"token\": \"testtoken\"}\n \n \n def test_incorrect_token():\n     response = client.get(\"/items\", headers={\"Authorization\": \"Notexistent testtoken\"})\n-    assert response.status_code == 401\n+    assert response.status_code == 401, response.text\n     assert response.json() == {\"detail\": \"Not authenticated\"}\n     assert response.headers[\"WWW-Authenticate\"] == \"Bearer\"\n\n@@ -111,13 +111,13 @@ openapi_schema = {\n \n def test_openapi_schema():\n     response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert response.json() == openapi_schema\n \n \n def test_login():\n     response = client.post(\"/token\", data={\"username\": \"johndoe\", \"password\": \"secret\"})\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert response.json() == {\"access_token\": \"johndoe\", \"token_type\": \"bearer\"}\n \n \n@@ -125,26 +125,26 @@ def test_login_incorrect_password():\n     response = client.post(\n         \"/token\", data={\"username\": \"johndoe\", \"password\": \"incorrect\"}\n     )\n-    assert response.status_code == 400\n+    assert response.status_code == 400, response.text\n     assert response.json() == {\"detail\": \"Incorrect username or password\"}\n \n \n def test_login_incorrect_username():\n     response = client.post(\"/token\", data={\"username\": \"foo\", \"password\": \"secret\"})\n-    assert response.status_code == 400\n+    assert response.status_code == 400, response.text\n     assert response.json() == {\"detail\": \"Incorrect username or password\"}\n \n \n def test_no_token():\n     response = client.get(\"/users/me\")\n-    assert response.status_code == 401\n+    assert response.status_code == 401, response.text\n     assert response.json() == {\"detail\": \"Not authenticated\"}\n     assert response.headers[\"WWW-Authenticate\"] == \"Bearer\"\n \n \n def test_token():\n     response = client.get(\"/users/me\", headers={\"Authorization\": \"Bearer johndoe\"})\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert response.json() == {\n         \"username\": \"johndoe\",\n         \"full_name\": \"John Doe\",\n@@ -156,7 +156,7 @@ def test_token():\n \n def test_incorrect_token():\n     response = client.get(\"/users/me\", headers={\"Authorization\": \"Bearer nonexistent\"})\n-    assert response.status_code == 401\n+    assert response.status_code == 401, response.text\n     assert response.json() == {\"detail\": \"Invalid authentication credentials\"}\n     assert response.headers[\"WWW-Authenticate\"] == \"Bearer\"\n \n@@ -165,12 +165,12 @@ def test_incorrect_token_type():\n     response = client.get(\n         \"/users/me\", headers={\"Authorization\": \"Notexistent testtoken\"}\n     )\n-    assert response.status_code == 401\n+    assert response.status_code == 401, response.text\n     assert response.json() == {\"detail\": \"Not authenticated\"}\n     assert response.headers[\"WWW-Authenticate\"] == \"Bearer\"\n \n \n def test_inactive_user():\n     response = client.get(\"/users/me\", headers={\"Authorization\": \"Bearer alice\"})\n-    assert response.status_code == 400\n+    assert response.status_code == 400, response.text\n     assert response.json() == {\"detail\": \"Inactive user\"}\n\n@@ -179,7 +179,7 @@ openapi_schema = {\n \n def test_openapi_schema():\n     response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert response.json() == openapi_schema\n \n \n@@ -195,7 +195,7 @@ def get_access_token(username=\"johndoe\", password=\"secret\", scope=None):\n \n def test_login():\n     response = client.post(\"/token\", data={\"username\": \"johndoe\", \"password\": \"secret\"})\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     content = response.json()\n     assert \"access_token\" in content\n     assert content[\"token_type\"] == \"bearer\"\n@@ -205,19 +205,19 @@ def test_login_incorrect_password():\n     response = client.post(\n         \"/token\", data={\"username\": \"johndoe\", \"password\": \"incorrect\"}\n     )\n-    assert response.status_code == 400\n+    assert response.status_code == 400, response.text\n     assert response.json() == {\"detail\": \"Incorrect username or password\"}\n \n \n def test_login_incorrect_username():\n     response = client.post(\"/token\", data={\"username\": \"foo\", \"password\": \"secret\"})\n-    assert response.status_code == 400\n+    assert response.status_code == 400, response.text\n     assert response.json() == {\"detail\": \"Incorrect username or password\"}\n \n \n def test_no_token():\n     response = client.get(\"/users/me\")\n-    assert response.status_code == 401\n+    assert response.status_code == 401, response.text\n     assert response.json() == {\"detail\": \"Not authenticated\"}\n     assert response.headers[\"WWW-Authenticate\"] == \"Bearer\"\n \n@@ -227,7 +227,7 @@ def test_token():\n     response = client.get(\n         \"/users/me\", headers={\"Authorization\": f\"Bearer {access_token}\"}\n     )\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert response.json() == {\n         \"username\": \"johndoe\",\n         \"full_name\": \"John Doe\",\n@@ -238,7 +238,7 @@ def test_token():\n \n def test_incorrect_token():\n     response = client.get(\"/users/me\", headers={\"Authorization\": \"Bearer nonexistent\"})\n-    assert response.status_code == 401\n+    assert response.status_code == 401, response.text\n     assert response.json() == {\"detail\": \"Could not validate credentials\"}\n     assert response.headers[\"WWW-Authenticate\"] == 'Bearer scope=\"me\"'\n \n@@ -247,7 +247,7 @@ def test_incorrect_token_type():\n     response = client.get(\n         \"/users/me\", headers={\"Authorization\": \"Notexistent testtoken\"}\n     )\n-    assert response.status_code == 401\n+    assert response.status_code == 401, response.text\n     assert response.json() == {\"detail\": \"Not authenticated\"}\n     assert response.headers[\"WWW-Authenticate\"] == \"Bearer\"\n \n@@ -272,7 +272,7 @@ def test_token_no_sub():\n             \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJkYXRhIjoiZm9vIn0.9ynBhuYb4e6aW3oJr_K_TBgwcMTDpRToQIE25L57rOE\"\n         },\n     )\n-    assert response.status_code == 401\n+    assert response.status_code == 401, response.text\n     assert response.json() == {\"detail\": \"Could not validate credentials\"}\n     assert response.headers[\"WWW-Authenticate\"] == 'Bearer scope=\"me\"'\n \n@@ -284,7 +284,7 @@ def test_token_no_username():\n             \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJmb28ifQ.NnExK_dlNAYyzACrXtXDrcWOgGY2JuPbI4eDaHdfK5Y\"\n         },\n     )\n-    assert response.status_code == 401\n+    assert response.status_code == 401, response.text\n     assert response.json() == {\"detail\": \"Could not validate credentials\"}\n     assert response.headers[\"WWW-Authenticate\"] == 'Bearer scope=\"me\"'\n \n@@ -294,7 +294,7 @@ def test_token_no_scope():\n     response = client.get(\n         \"/users/me\", headers={\"Authorization\": f\"Bearer {access_token}\"}\n     )\n-    assert response.status_code == 401\n+    assert response.status_code == 401, response.text\n     assert response.json() == {\"detail\": \"Not enough permissions\"}\n     assert response.headers[\"WWW-Authenticate\"] == 'Bearer scope=\"me\"'\n \n@@ -306,7 +306,7 @@ def test_token_inexistent_user():\n             \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJ1c2VybmFtZTpib2IifQ.HcfCW67Uda-0gz54ZWTqmtgJnZeNem0Q757eTa9EZuw\"\n         },\n     )\n-    assert response.status_code == 401\n+    assert response.status_code == 401, response.text\n     assert response.json() == {\"detail\": \"Could not validate credentials\"}\n     assert response.headers[\"WWW-Authenticate\"] == 'Bearer scope=\"me\"'\n \n@@ -318,7 +318,7 @@ def test_token_inactive_user():\n     response = client.get(\n         \"/users/me\", headers={\"Authorization\": f\"Bearer {access_token}\"}\n     )\n-    assert response.status_code == 400\n+    assert response.status_code == 400, response.text\n     assert response.json() == {\"detail\": \"Inactive user\"}\n \n \n@@ -327,7 +327,7 @@ def test_read_items():\n     response = client.get(\n         \"/users/me/items/\", headers={\"Authorization\": f\"Bearer {access_token}\"}\n     )\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert response.json() == [{\"item_id\": \"Foo\", \"owner\": \"johndoe\"}]\n \n \n@@ -336,12 +336,12 @@ def test_read_system_status():\n     response = client.get(\n         \"/status/\", headers={\"Authorization\": f\"Bearer {access_token}\"}\n     )\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert response.json() == {\"status\": \"ok\"}\n \n \n def test_read_system_status_no_token():\n     response = client.get(\"/status/\")\n-    assert response.status_code == 401\n+    assert response.status_code == 401, response.text\n     assert response.json() == {\"detail\": \"Not authenticated\"}\n     assert response.headers[\"WWW-Authenticate\"] == \"Bearer\"\n\n@@ -33,21 +33,21 @@ openapi_schema = {\n \n def test_openapi_schema():\n     response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert response.json() == openapi_schema\n \n \n def test_security_http_basic():\n     auth = HTTPBasicAuth(username=\"john\", password=\"secret\")\n     response = client.get(\"/users/me\", auth=auth)\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert response.json() == {\"username\": \"john\", \"password\": \"secret\"}\n \n \n def test_security_http_basic_no_credentials():\n     response = client.get(\"/users/me\")\n     assert response.json() == {\"detail\": \"Not authenticated\"}\n-    assert response.status_code == 401\n+    assert response.status_code == 401, response.text\n     assert response.headers[\"WWW-Authenticate\"] == \"Basic\"\n \n \n@@ -55,7 +55,7 @@ def test_security_http_basic_invalid_credentials():\n     response = client.get(\n         \"/users/me\", headers={\"Authorization\": \"Basic notabase64token\"}\n     )\n-    assert response.status_code == 401\n+    assert response.status_code == 401, response.text\n     assert response.headers[\"WWW-Authenticate\"] == \"Basic\"\n     assert response.json() == {\"detail\": \"Invalid authentication credentials\"}\n \n@@ -64,6 +64,6 @@ def test_security_http_basic_non_basic_credentials():\n     payload = b64encode(b\"johnsecret\").decode(\"ascii\")\n     auth_header = f\"Basic {payload}\"\n     response = client.get(\"/users/me\", headers={\"Authorization\": auth_header})\n-    assert response.status_code == 401\n+    assert response.status_code == 401, response.text\n     assert response.headers[\"WWW-Authenticate\"] == \"Basic\"\n     assert response.json() == {\"detail\": \"Invalid authentication credentials\"}\n\n@@ -294,24 +294,24 @@ def client():\n \n def test_openapi_schema(client):\n     response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert response.json() == openapi_schema\n \n \n def test_create_user(client):\n     test_user = {\"email\": \"johndoe@example.com\", \"password\": \"secret\"}\n     response = client.post(\"/users/\", json=test_user)\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     data = response.json()\n     assert test_user[\"email\"] == data[\"email\"]\n     assert \"id\" in data\n     response = client.post(\"/users/\", json=test_user)\n-    assert response.status_code == 400\n+    assert response.status_code == 400, response.text\n \n \n def test_get_user(client):\n     response = client.get(\"/users/1\")\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     data = response.json()\n     assert \"email\" in data\n     assert \"id\" in data\n@@ -319,12 +319,12 @@ def test_get_user(client):\n \n def test_inexistent_user(client):\n     response = client.get(\"/users/999\")\n-    assert response.status_code == 404\n+    assert response.status_code == 404, response.text\n \n \n def test_get_users(client):\n     response = client.get(\"/users/\")\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     data = response.json()\n     assert \"email\" in data[0]\n     assert \"id\" in data[0]\n@@ -333,20 +333,20 @@ def test_get_users(client):\n def test_create_item(client):\n     item = {\"title\": \"Foo\", \"description\": \"Something that fights\"}\n     response = client.post(\"/users/1/items/\", json=item)\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     item_data = response.json()\n     assert item[\"title\"] == item_data[\"title\"]\n     assert item[\"description\"] == item_data[\"description\"]\n     assert \"id\" in item_data\n     assert \"owner_id\" in item_data\n     response = client.get(\"/users/1\")\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     user_data = response.json()\n     item_to_check = [it for it in user_data[\"items\"] if it[\"id\"] == item_data[\"id\"]][0]\n     assert item_to_check[\"title\"] == item[\"title\"]\n     assert item_to_check[\"description\"] == item[\"description\"]\n     response = client.get(\"/users/1\")\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     user_data = response.json()\n     item_to_check = [it for it in user_data[\"items\"] if it[\"id\"] == item_data[\"id\"]][0]\n     assert item_to_check[\"title\"] == item[\"title\"]\n@@ -355,7 +355,7 @@ def test_create_item(client):\n \n def test_read_items(client):\n     response = client.get(\"/items/\")\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     data = response.json()\n     assert data\n     first_item = data[0]\n\n@@ -294,24 +294,24 @@ def client():\n \n def test_openapi_schema(client):\n     response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert response.json() == openapi_schema\n \n \n def test_create_user(client):\n     test_user = {\"email\": \"johndoe@example.com\", \"password\": \"secret\"}\n     response = client.post(\"/users/\", json=test_user)\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     data = response.json()\n     assert test_user[\"email\"] == data[\"email\"]\n     assert \"id\" in data\n     response = client.post(\"/users/\", json=test_user)\n-    assert response.status_code == 400\n+    assert response.status_code == 400, response.text\n \n \n def test_get_user(client):\n     response = client.get(\"/users/1\")\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     data = response.json()\n     assert \"email\" in data\n     assert \"id\" in data\n@@ -319,12 +319,12 @@ def test_get_user(client):\n \n def test_inexistent_user(client):\n     response = client.get(\"/users/999\")\n-    assert response.status_code == 404\n+    assert response.status_code == 404, response.text\n \n \n def test_get_users(client):\n     response = client.get(\"/users/\")\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     data = response.json()\n     assert \"email\" in data[0]\n     assert \"id\" in data[0]\n@@ -333,20 +333,20 @@ def test_get_users(client):\n def test_create_item(client):\n     item = {\"title\": \"Foo\", \"description\": \"Something that fights\"}\n     response = client.post(\"/users/1/items/\", json=item)\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     item_data = response.json()\n     assert item[\"title\"] == item_data[\"title\"]\n     assert item[\"description\"] == item_data[\"description\"]\n     assert \"id\" in item_data\n     assert \"owner_id\" in item_data\n     response = client.get(\"/users/1\")\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     user_data = response.json()\n     item_to_check = [it for it in user_data[\"items\"] if it[\"id\"] == item_data[\"id\"]][0]\n     assert item_to_check[\"title\"] == item[\"title\"]\n     assert item_to_check[\"description\"] == item[\"description\"]\n     response = client.get(\"/users/1\")\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     user_data = response.json()\n     item_to_check = [it for it in user_data[\"items\"] if it[\"id\"] == item_data[\"id\"]][0]\n     assert item_to_check[\"title\"] == item[\"title\"]\n@@ -355,7 +355,7 @@ def test_create_item(client):\n \n def test_read_items(client):\n     response = client.get(\"/items/\")\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     data = response.json()\n     assert data\n     first_item = data[0]\n\n@@ -343,7 +343,7 @@ def client():\n @skip_py36\n def test_openapi_schema(client):\n     response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert response.json() == openapi_schema\n \n \n@@ -351,18 +351,18 @@ def test_openapi_schema(client):\n def test_create_user(client):\n     test_user = {\"email\": \"johndoe@example.com\", \"password\": \"secret\"}\n     response = client.post(\"/users/\", json=test_user)\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     data = response.json()\n     assert test_user[\"email\"] == data[\"email\"]\n     assert \"id\" in data\n     response = client.post(\"/users/\", json=test_user)\n-    assert response.status_code == 400\n+    assert response.status_code == 400, response.text\n \n \n @skip_py36\n def test_get_user(client):\n     response = client.get(\"/users/1\")\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     data = response.json()\n     assert \"email\" in data\n     assert \"id\" in data\n@@ -371,13 +371,13 @@ def test_get_user(client):\n @skip_py36\n def test_inexistent_user(client):\n     response = client.get(\"/users/999\")\n-    assert response.status_code == 404\n+    assert response.status_code == 404, response.text\n \n \n @skip_py36\n def test_get_users(client):\n     response = client.get(\"/users/\")\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     data = response.json()\n     assert \"email\" in data[0]\n     assert \"id\" in data[0]\n@@ -389,7 +389,7 @@ time.sleep = MagicMock()\n @skip_py36\n def test_get_slowusers(client):\n     response = client.get(\"/slowusers/\")\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     data = response.json()\n     assert \"email\" in data[0]\n     assert \"id\" in data[0]\n@@ -399,20 +399,20 @@ def test_get_slowusers(client):\n def test_create_item(client):\n     item = {\"title\": \"Foo\", \"description\": \"Something that fights\"}\n     response = client.post(\"/users/1/items/\", json=item)\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     item_data = response.json()\n     assert item[\"title\"] == item_data[\"title\"]\n     assert item[\"description\"] == item_data[\"description\"]\n     assert \"id\" in item_data\n     assert \"owner_id\" in item_data\n     response = client.get(\"/users/1\")\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     user_data = response.json()\n     item_to_check = [it for it in user_data[\"items\"] if it[\"id\"] == item_data[\"id\"]][0]\n     assert item_to_check[\"title\"] == item[\"title\"]\n     assert item_to_check[\"description\"] == item[\"description\"]\n     response = client.get(\"/users/1\")\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     user_data = response.json()\n     item_to_check = [it for it in user_data[\"items\"] if it[\"id\"] == item_data[\"id\"]][0]\n     assert item_to_check[\"title\"] == item[\"title\"]\n@@ -422,7 +422,7 @@ def test_create_item(client):\n @skip_py36\n def test_read_items(client):\n     response = client.get(\"/items/\")\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     data = response.json()\n     assert data\n     first_item = data[0]\n\n@@ -44,23 +44,23 @@ openapi_schema_sub = {\n \n def test_openapi_schema_main():\n     response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert response.json() == openapi_schema_main\n \n \n def test_main():\n     response = client.get(\"/app\")\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert response.json() == {\"message\": \"Hello World from main app\"}\n \n \n def test_openapi_schema_sub():\n     response = client.get(\"/subapi/openapi.json\")\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert response.json() == openapi_schema_sub\n \n \n def test_sub():\n     response = client.get(\"/subapi/sub\")\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert response.json() == {\"message\": \"Hello World from sub API\"}\n\n@@ -10,10 +10,10 @@ def test_main():\n \n     client = TestClient(app)\n     response = client.get(\"/items/foo\")\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert b\"<h1>Item ID: foo</h1>\" in response.content\n     response = client.get(\"/static/styles.css\")\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert b\"color: green;\" in response.content\n     shutil.rmtree(\"./templates\")\n     shutil.rmtree(\"./static\")\n\n@@ -22,7 +22,7 @@ openapi_schema = {\n \n def test_openapi_schema():\n     response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert response.json() == openapi_schema\n \n \n\n@@ -22,7 +22,7 @@ openapi_schema = {\n \n def test_openapi_schema():\n     response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert response.json() == openapi_schema\n \n \n\n@@ -21,7 +21,7 @@ def test_override_in_items_with_params_run():\n \n def test_override_in_users():\n     response = client.get(\"/users/\")\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert response.json() == {\n         \"message\": \"Hello Users!\",\n         \"params\": {\"q\": None, \"skip\": 5, \"limit\": 10},\n@@ -30,7 +30,7 @@ def test_override_in_users():\n \n def test_override_in_users_with_q():\n     response = client.get(\"/users/?q=foo\")\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert response.json() == {\n         \"message\": \"Hello Users!\",\n         \"params\": {\"q\": \"foo\", \"skip\": 5, \"limit\": 10},\n@@ -39,7 +39,7 @@ def test_override_in_users_with_q():\n \n def test_override_in_users_with_params():\n     response = client.get(\"/users/?q=foo&skip=100&limit=200\")\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert response.json() == {\n         \"message\": \"Hello Users!\",\n         \"params\": {\"q\": \"foo\", \"skip\": 5, \"limit\": 10},\n@@ -49,7 +49,7 @@ def test_override_in_users_with_params():\n def test_normal_app():\n     app.dependency_overrides = None\n     response = client.get(\"/items/?q=foo&skip=100&limit=200\")\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert response.json() == {\n         \"message\": \"Hello Items!\",\n         \"params\": {\"q\": \"foo\", \"skip\": 100, \"limit\": 200},\n\n@@ -8,7 +8,7 @@ client = TestClient(app)\n \n def test_main():\n     response = client.get(\"/\")\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert b\"<!DOCTYPE html>\" in response.content\n \n \n\n@@ -8,7 +8,7 @@ client = TestClient(app)\n \n def test_main():\n     response = client.get(\"/\")\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert b\"<!DOCTYPE html>\" in response.content\n \n \n\n@@ -7,11 +7,11 @@ client = TestClient(app)\n \n def test_flask():\n     response = client.get(\"/v1/\")\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert response.text == \"Hello, World from Flask!\"\n \n \n def test_app():\n     response = client.get(\"/v2\")\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert response.json() == {\"message\": \"Hello World\"}\n\n@@ -108,17 +108,17 @@ item_openapi_schema = {\n \n def test_item_openapi_schema():\n     response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert response.json() == item_openapi_schema\n \n \n def test_post_other_item():\n     response = client.post(\"/items/\", json={\"price\": 100})\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert response.json() == {\"item\": {\"price\": 100}}\n \n \n def test_post_item():\n     response = client.post(\"/items/\", json={\"name\": \"Foo\"})\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert response.json() == {\"item\": {\"name\": \"Foo\"}}\n\n@@ -121,19 +121,19 @@ inherited_item_openapi_schema = {\n @skip_py36\n def test_inherited_item_openapi_schema():\n     response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert response.json() == inherited_item_openapi_schema\n \n \n @skip_py36\n def test_post_extended_item():\n     response = client.post(\"/items/\", json={\"name\": \"Foo\", \"age\": 5})\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert response.json() == {\"item\": {\"name\": \"Foo\", \"age\": 5}}\n \n \n @skip_py36\n def test_post_item():\n     response = client.post(\"/items/\", json={\"name\": \"Foo\"})\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert response.json() == {\"item\": {\"name\": \"Foo\"}}\n\n@@ -56,14 +56,14 @@ client = TestClient(app)\n \n def test_recursive():\n     response = client.get(\"/items/recursive\")\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert response.json() == {\n         \"sub_items\": [{\"name\": \"subitem\", \"sub_items\": []}],\n         \"name\": \"item\",\n     }\n \n     response = client.get(\"/items/recursive-submodel\")\n-    assert response.status_code == 200\n+    assert response.status_code == 200, response.text\n     assert response.json() == {\n         \"name\": \"item\",\n         \"sub_items1\": [\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
