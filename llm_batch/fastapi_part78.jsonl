{"custom_id": "fastapi#8ae4603d680f86ae1e5f96e58546dee4f543171f", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 16 | Lines Deleted: 16 | Files Changed: 5 | Hunks: 14 | Methods Changed: 7 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 32 | Churn Cumulative: 3868 | Contributors (this commit): 34 | Commits (past 90d): 22 | Contributors (cumulative): 43 | DMM Complexity: 0.0\n\nDIFF:\n@@ -1,11 +1,10 @@\n from fastapi import FastAPI, Query\n-from pydantic import Required\n \n app = FastAPI()\n \n \n @app.get(\"/items/\")\n-async def read_items(q: str = Query(default=Required, min_length=3)):\n+async def read_items(q: str = Query(default=..., min_length=3)):\n     results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n     if q:\n         results.update({\"q\": q})\n\n@@ -1,12 +1,11 @@\n from fastapi import FastAPI, Query\n-from pydantic import Required\n from typing_extensions import Annotated\n \n app = FastAPI()\n \n \n @app.get(\"/items/\")\n-async def read_items(q: Annotated[str, Query(min_length=3)] = Required):\n+async def read_items(q: Annotated[str, Query(min_length=3)] = ...):\n     results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n     if q:\n         results.update({\"q\": q})\n\n@@ -1,13 +1,12 @@\n from typing import Annotated\n \n from fastapi import FastAPI, Query\n-from pydantic import Required\n \n app = FastAPI()\n \n \n @app.get(\"/items/\")\n-async def read_items(q: Annotated[str, Query(min_length=3)] = Required):\n+async def read_items(q: Annotated[str, Query(min_length=3)] = ...):\n     results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n     if q:\n         results.update({\"q\": q})\n\n@@ -71,7 +71,7 @@ if PYDANTIC_V2:\n             general_plain_validator_function as with_info_plain_validator_function,  # noqa: F401\n         )\n \n-    Required = PydanticUndefined\n+    RequiredParam = PydanticUndefined\n     Undefined = PydanticUndefined\n     UndefinedType = PydanticUndefinedType\n     evaluate_forwardref = eval_type_lenient\n@@ -313,9 +313,10 @@ else:\n     from pydantic.fields import (  # type: ignore[no-redef,attr-defined]\n         ModelField as ModelField,  # noqa: F401\n     )\n-    from pydantic.fields import (  # type: ignore[no-redef,attr-defined]\n-        Required as Required,  # noqa: F401\n-    )\n+\n+    # Keeping old \"Required\" functionality from Pydantic V1, without\n+    # shadowing typing.Required.\n+    RequiredParam: Any = Ellipsis  # type: ignore[no-redef]\n     from pydantic.fields import (  # type: ignore[no-redef,attr-defined]\n         Undefined as Undefined,\n     )\n\n@@ -24,7 +24,7 @@ from fastapi._compat import (\n     PYDANTIC_V2,\n     ErrorWrapper,\n     ModelField,\n-    Required,\n+    RequiredParam,\n     Undefined,\n     _regenerate_error_with_loc,\n     copy_field_info,\n@@ -377,7 +377,9 @@ def analyze_param(\n             field_info = copy_field_info(\n                 field_info=fastapi_annotation, annotation=use_annotation\n             )\n-            assert field_info.default is Undefined or field_info.default is Required, (\n+            assert (\n+                field_info.default is Undefined or field_info.default is RequiredParam\n+            ), (\n                 f\"`{field_info.__class__.__name__}` default value cannot be set in\"\n                 f\" `Annotated` for {param_name!r}. Set the default value with `=` instead.\"\n             )\n@@ -385,7 +387,7 @@ def analyze_param(\n                 assert not is_path_param, \"Path parameters cannot have default values\"\n                 field_info.default = value\n             else:\n-                field_info.default = Required\n+                field_info.default = RequiredParam\n         # Get Annotated Depends\n         elif isinstance(fastapi_annotation, params.Depends):\n             depends = fastapi_annotation\n@@ -434,9 +436,9 @@ def analyze_param(\n         ), f\"Cannot specify FastAPI annotation for type {type_annotation!r}\"\n     # Handle default assignations, neither field_info nor depends was not found in Annotated nor default value\n     elif field_info is None and depends is None:\n-        default_value = value if value is not inspect.Signature.empty else Required\n+        default_value = value if value is not inspect.Signature.empty else RequiredParam\n         if is_path_param:\n-            # We might check here that `default_value is Required`, but the fact is that the same\n+            # We might check here that `default_value is RequiredParam`, but the fact is that the same\n             # parameter might sometimes be a path parameter and sometimes not. See\n             # `tests/test_infer_param_optionality.py` for an example.\n             field_info = params.Path(annotation=use_annotation)\n@@ -480,7 +482,7 @@ def analyze_param(\n             type_=use_annotation_from_field_info,\n             default=field_info.default,\n             alias=alias,\n-            required=field_info.default in (Required, Undefined),\n+            required=field_info.default in (RequiredParam, Undefined),\n             field_info=field_info,\n         )\n         if is_path_param:\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#e049fc4ea15a7b844326efa545a7e370713f6612", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 58 | Lines Deleted: 7 | Files Changed: 3 | Hunks: 9 | Methods Changed: 10 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 65 | Churn Cumulative: 9261 | Contributors (this commit): 44 | Commits (past 90d): 8 | Contributors (cumulative): 48 | DMM Complexity: 0.96\n\nDIFF:\n@@ -541,7 +541,9 @@ class APIRoute(routing.Route):\n                     additional_status_code\n                 ), f\"Status code {additional_status_code} must not have a response body\"\n                 response_name = f\"Response_{additional_status_code}_{self.unique_id}\"\n-                response_field = create_model_field(name=response_name, type_=model)\n+                response_field = create_model_field(\n+                    name=response_name, type_=model, mode=\"serialization\"\n+                )\n                 response_fields[additional_status_code] = response_field\n         if response_fields:\n             self.response_fields: Dict[Union[int, str], ModelField] = response_fields\n\n@@ -24,13 +24,18 @@ def get_client():\n     def read_root() -> Rectangle:\n         return Rectangle(width=3, length=4)\n \n+    @app.get(\"/responses\", responses={200: {\"model\": Rectangle}})\n+    def read_responses() -> Rectangle:\n+        return Rectangle(width=3, length=4)\n+\n     client = TestClient(app)\n     return client\n \n \n+@pytest.mark.parametrize(\"path\", [\"/\", \"/responses\"])\n @needs_pydanticv2\n-def test_get(client: TestClient):\n-    response = client.get(\"/\")\n+def test_get(client: TestClient, path: str):\n+    response = client.get(path)\n     assert response.status_code == 200, response.text\n     assert response.json() == {\"width\": 3, \"length\": 4, \"area\": 12}\n \n@@ -58,8 +63,24 @@ def test_openapi_schema(client: TestClient):\n                         }\n                     },\n                 }\n+            },\n+            \"/responses\": {\n+                \"get\": {\n+                    \"summary\": \"Read Responses\",\n+                    \"operationId\": \"read_responses_responses_get\",\n+                    \"responses\": {\n+                        \"200\": {\n+                            \"description\": \"Successful Response\",\n+                            \"content\": {\n+                                \"application/json\": {\n+                                    \"schema\": {\"$ref\": \"#/components/schemas/Rectangle\"}\n                                 }\n                             },\n+                        }\n+                    },\n+                }\n+            },\n+        },\n         \"components\": {\n             \"schemas\": {\n                 \"Rectangle\": {\n\n@@ -26,8 +26,8 @@ class Item(BaseModel):\n def get_app_client(separate_input_output_schemas: bool = True) -> TestClient:\n     app = FastAPI(separate_input_output_schemas=separate_input_output_schemas)\n \n-    @app.post(\"/items/\")\n-    def create_item(item: Item):\n+    @app.post(\"/items/\", responses={402: {\"model\": Item}})\n+    def create_item(item: Item) -> Item:\n         return item\n \n     @app.post(\"/items-list/\")\n@@ -174,7 +174,23 @@ def test_openapi_schema():\n                     \"responses\": {\n                         \"200\": {\n                             \"description\": \"Successful Response\",\n-                            \"content\": {\"application/json\": {\"schema\": {}}},\n+                            \"content\": {\n+                                \"application/json\": {\n+                                    \"schema\": {\n+                                        \"$ref\": \"#/components/schemas/Item-Output\"\n+                                    }\n+                                }\n+                            },\n+                        },\n+                        \"402\": {\n+                            \"description\": \"Payment Required\",\n+                            \"content\": {\n+                                \"application/json\": {\n+                                    \"schema\": {\n+                                        \"$ref\": \"#/components/schemas/Item-Output\"\n+                                    }\n+                                }\n+                            },\n                         },\n                         \"422\": {\n                             \"description\": \"Validation Error\",\n@@ -374,7 +390,19 @@ def test_openapi_schema_no_separate():\n                     \"responses\": {\n                         \"200\": {\n                             \"description\": \"Successful Response\",\n-                            \"content\": {\"application/json\": {\"schema\": {}}},\n+                            \"content\": {\n+                                \"application/json\": {\n+                                    \"schema\": {\"$ref\": \"#/components/schemas/Item\"}\n+                                }\n+                            },\n+                        },\n+                        \"402\": {\n+                            \"description\": \"Payment Required\",\n+                            \"content\": {\n+                                \"application/json\": {\n+                                    \"schema\": {\"$ref\": \"#/components/schemas/Item\"}\n+                                }\n+                            },\n                         },\n                         \"422\": {\n                             \"description\": \"Validation Error\",\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#113da5b0a7f33be300b7fea8dddbe51ee7b96157", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 501 | Contributors (this commit): 2 | Commits (past 90d): 12 | Contributors (cumulative): 2 | DMM Complexity: None\n\nDIFF:\n@@ -1,6 +1,6 @@\n \"\"\"FastAPI framework, high performance, easy to learn, fast to code, ready for production\"\"\"\n \n-__version__ = \"0.115.0\"\n+__version__ = \"0.115.1\"\n \n from starlette import status as status\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#07684aea793d042fb5a12dde46dfe6d1e2196725", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 503 | Contributors (this commit): 2 | Commits (past 90d): 13 | Contributors (cumulative): 2 | DMM Complexity: None\n\nDIFF:\n@@ -1,6 +1,6 @@\n \"\"\"FastAPI framework, high performance, easy to learn, fast to code, ready for production\"\"\"\n \n-__version__ = \"0.115.1\"\n+__version__ = \"0.115.2\"\n \n from starlette import status as status\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#6384f730f7e672d4cea8c951dfa9c9e8bb3481f9", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 60 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 60 | Churn Cumulative: 60 | Contributors (this commit): 1 | Commits (past 90d): 1 | Contributors (cumulative): 1 | DMM Complexity: None\n\nDIFF:\n@@ -0,0 +1,60 @@\n+import logging\n+from typing import Literal\n+\n+from github import Github\n+from github.PullRequestReview import PullRequestReview\n+from pydantic import BaseModel, SecretStr\n+from pydantic_settings import BaseSettings\n+\n+\n+class LabelSettings(BaseModel):\n+    await_label: str | None = None\n+    number: int\n+\n+\n+default_config = {\"approved-2\": LabelSettings(await_label=\"awaiting-review\", number=2)}\n+\n+\n+class Settings(BaseSettings):\n+    github_repository: str\n+    token: SecretStr\n+    debug: bool | None = False\n+    config: dict[str, LabelSettings] | Literal[\"\"] = default_config\n+\n+\n+settings = Settings()\n+if settings.debug:\n+    logging.basicConfig(level=logging.DEBUG)\n+else:\n+    logging.basicConfig(level=logging.INFO)\n+logging.debug(f\"Using config: {settings.json()}\")\n+g = Github(settings.token.get_secret_value())\n+repo = g.get_repo(settings.github_repository)\n+for pr in repo.get_pulls(state=\"open\"):\n+    logging.info(f\"Checking PR: #{pr.number}\")\n+    pr_labels = list(pr.get_labels())\n+    pr_label_by_name = {label.name: label for label in pr_labels}\n+    reviews = list(pr.get_reviews())\n+    review_by_user: dict[str, PullRequestReview] = {}\n+    for review in reviews:\n+        if review.user.login in review_by_user:\n+            stored_review = review_by_user[review.user.login]\n+            if review.submitted_at >= stored_review.submitted_at:\n+                review_by_user[review.user.login] = review\n+        else:\n+            review_by_user[review.user.login] = review\n+    approved_reviews = [\n+        review for review in review_by_user.values() if review.state == \"APPROVED\"\n+    ]\n+    config = settings.config or default_config\n+    for approved_label, conf in config.items():\n+        logging.debug(f\"Processing config: {conf.json()}\")\n+        if conf.await_label is None or (conf.await_label in pr_label_by_name):\n+            logging.debug(f\"Processable PR: {pr.number}\")\n+            if len(approved_reviews) >= conf.number:\n+                logging.info(f\"Adding label to PR: {pr.number}\")\n+                pr.add_to_labels(approved_label)\n+                if conf.await_label:\n+                    logging.info(f\"Removing label from PR: {pr.number}\")\n+                    pr.remove_from_labels(conf.await_label)\n+logging.info(\"Finished\")\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#c519614b45009e7d51f010e82b0ddf77a327e327", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 505 | Contributors (this commit): 2 | Commits (past 90d): 13 | Contributors (cumulative): 2 | DMM Complexity: None\n\nDIFF:\n@@ -1,6 +1,6 @@\n \"\"\"FastAPI framework, high performance, easy to learn, fast to code, ready for production\"\"\"\n \n-__version__ = \"0.115.2\"\n+__version__ = \"0.115.3\"\n \n from starlette import status as status\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#8081d2302ec5cffd5d2a35a6e22980d3f03bb395", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 3 | Lines Deleted: 3 | Files Changed: 2 | Hunks: 3 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 6 | Churn Cumulative: 4148 | Contributors (this commit): 19 | Commits (past 90d): 4 | Contributors (cumulative): 23 | DMM Complexity: None\n\nDIFF:\n@@ -2298,7 +2298,7 @@ def Security(  # noqa: N802\n             dependency.\n \n             The term \"scope\" comes from the OAuth2 specification, it seems to be\n-            intentionaly vague and interpretable. It normally refers to permissions,\n+            intentionally vague and interpretable. It normally refers to permissions,\n             in cases to roles.\n \n             These scopes are integrated with OpenAPI (and the API docs at `/docs`).\n\n@@ -52,7 +52,7 @@ class OAuth2PasswordRequestForm:\n     ```\n \n     Note that for OAuth2 the scope `items:read` is a single scope in an opaque string.\n-    You could have custom internal logic to separate it by colon caracters (`:`) or\n+    You could have custom internal logic to separate it by colon characters (`:`) or\n     similar, and get the two parts `items` and `read`. Many applications do that to\n     group and organize permissions, you could do it as well in your application, just\n     know that that it is application specific, it's not part of the specification.\n@@ -194,7 +194,7 @@ class OAuth2PasswordRequestFormStrict(OAuth2PasswordRequestForm):\n     ```\n \n     Note that for OAuth2 the scope `items:read` is a single scope in an opaque string.\n-    You could have custom internal logic to separate it by colon caracters (`:`) or\n+    You could have custom internal logic to separate it by colon characters (`:`) or\n     similar, and get the two parts `items` and `read`. Many applications do that to\n     group and organize permissions, you could do it as well in your application, just\n     know that that it is application specific, it's not part of the specification.\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#b31cbbf5f5f7680f27c50339ff9fddafadcc3d7a", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 54 | Lines Deleted: 3 | Files Changed: 2 | Hunks: 16 | Methods Changed: 13 | Complexity Δ (Sum/Max): 3/2 | Churn Δ: 57 | Churn Cumulative: 3309 | Contributors (this commit): 35 | Commits (past 90d): 18 | Contributors (cumulative): 36 | DMM Complexity: 1.0\n\nDIFF:\n@@ -89,16 +89,24 @@ multipart_incorrect_install_error = (\n \n \n def ensure_multipart_is_installed() -> None:\n+    try:\n+        from python_multipart import __version__\n+\n+        # Import an attribute that can be mocked/deleted in testing\n+        assert __version__ > \"0.0.12\"\n+    except (ImportError, AssertionError):\n         try:\n             # __version__ is available in both multiparts, and can be mocked\n-        from multipart import __version__\n+            from multipart import __version__  # type: ignore[no-redef,import-untyped]\n \n             assert __version__\n             try:\n                 # parse_options_header is only available in the right multipart\n-            from multipart.multipart import parse_options_header\n+                from multipart.multipart import (  # type: ignore[import-untyped]\n+                    parse_options_header,\n+                )\n \n-            assert parse_options_header  # type: ignore[truthy-function]\n+                assert parse_options_header\n             except ImportError:\n                 logger.error(multipart_incorrect_install_error)\n                 raise RuntimeError(multipart_incorrect_install_error) from None\n\n@@ -1,3 +1,5 @@\n+import warnings\n+\n import pytest\n from fastapi import FastAPI, File, Form, UploadFile\n from fastapi.dependencies.utils import (\n@@ -7,6 +9,9 @@ from fastapi.dependencies.utils import (\n \n \n def test_incorrect_multipart_installed_form(monkeypatch):\n+    monkeypatch.setattr(\"python_multipart.__version__\", \"0.0.12\")\n+    with warnings.catch_warnings(record=True):\n+        warnings.simplefilter(\"always\")\n         monkeypatch.delattr(\"multipart.multipart.parse_options_header\", raising=False)\n     with pytest.raises(RuntimeError, match=multipart_incorrect_install_error):\n         app = FastAPI()\n@@ -17,6 +22,9 @@ def test_incorrect_multipart_installed_form(monkeypatch):\n \n \n def test_incorrect_multipart_installed_file_upload(monkeypatch):\n+    monkeypatch.setattr(\"python_multipart.__version__\", \"0.0.12\")\n+    with warnings.catch_warnings(record=True):\n+        warnings.simplefilter(\"always\")\n         monkeypatch.delattr(\"multipart.multipart.parse_options_header\", raising=False)\n     with pytest.raises(RuntimeError, match=multipart_incorrect_install_error):\n         app = FastAPI()\n@@ -27,6 +35,9 @@ def test_incorrect_multipart_installed_file_upload(monkeypatch):\n \n \n def test_incorrect_multipart_installed_file_bytes(monkeypatch):\n+    monkeypatch.setattr(\"python_multipart.__version__\", \"0.0.12\")\n+    with warnings.catch_warnings(record=True):\n+        warnings.simplefilter(\"always\")\n         monkeypatch.delattr(\"multipart.multipart.parse_options_header\", raising=False)\n     with pytest.raises(RuntimeError, match=multipart_incorrect_install_error):\n         app = FastAPI()\n@@ -37,6 +48,9 @@ def test_incorrect_multipart_installed_file_bytes(monkeypatch):\n \n \n def test_incorrect_multipart_installed_multi_form(monkeypatch):\n+    monkeypatch.setattr(\"python_multipart.__version__\", \"0.0.12\")\n+    with warnings.catch_warnings(record=True):\n+        warnings.simplefilter(\"always\")\n         monkeypatch.delattr(\"multipart.multipart.parse_options_header\", raising=False)\n     with pytest.raises(RuntimeError, match=multipart_incorrect_install_error):\n         app = FastAPI()\n@@ -47,6 +61,9 @@ def test_incorrect_multipart_installed_multi_form(monkeypatch):\n \n \n def test_incorrect_multipart_installed_form_file(monkeypatch):\n+    monkeypatch.setattr(\"python_multipart.__version__\", \"0.0.12\")\n+    with warnings.catch_warnings(record=True):\n+        warnings.simplefilter(\"always\")\n         monkeypatch.delattr(\"multipart.multipart.parse_options_header\", raising=False)\n     with pytest.raises(RuntimeError, match=multipart_incorrect_install_error):\n         app = FastAPI()\n@@ -57,6 +74,9 @@ def test_incorrect_multipart_installed_form_file(monkeypatch):\n \n \n def test_no_multipart_installed(monkeypatch):\n+    monkeypatch.setattr(\"python_multipart.__version__\", \"0.0.12\")\n+    with warnings.catch_warnings(record=True):\n+        warnings.simplefilter(\"always\")\n         monkeypatch.delattr(\"multipart.__version__\", raising=False)\n         with pytest.raises(RuntimeError, match=multipart_not_installed_error):\n             app = FastAPI()\n@@ -67,6 +87,9 @@ def test_no_multipart_installed(monkeypatch):\n \n \n def test_no_multipart_installed_file(monkeypatch):\n+    monkeypatch.setattr(\"python_multipart.__version__\", \"0.0.12\")\n+    with warnings.catch_warnings(record=True):\n+        warnings.simplefilter(\"always\")\n         monkeypatch.delattr(\"multipart.__version__\", raising=False)\n         with pytest.raises(RuntimeError, match=multipart_not_installed_error):\n             app = FastAPI()\n@@ -77,6 +100,9 @@ def test_no_multipart_installed_file(monkeypatch):\n \n \n def test_no_multipart_installed_file_bytes(monkeypatch):\n+    monkeypatch.setattr(\"python_multipart.__version__\", \"0.0.12\")\n+    with warnings.catch_warnings(record=True):\n+        warnings.simplefilter(\"always\")\n         monkeypatch.delattr(\"multipart.__version__\", raising=False)\n         with pytest.raises(RuntimeError, match=multipart_not_installed_error):\n             app = FastAPI()\n@@ -87,6 +113,9 @@ def test_no_multipart_installed_file_bytes(monkeypatch):\n \n \n def test_no_multipart_installed_multi_form(monkeypatch):\n+    monkeypatch.setattr(\"python_multipart.__version__\", \"0.0.12\")\n+    with warnings.catch_warnings(record=True):\n+        warnings.simplefilter(\"always\")\n         monkeypatch.delattr(\"multipart.__version__\", raising=False)\n         with pytest.raises(RuntimeError, match=multipart_not_installed_error):\n             app = FastAPI()\n@@ -97,6 +126,9 @@ def test_no_multipart_installed_multi_form(monkeypatch):\n \n \n def test_no_multipart_installed_form_file(monkeypatch):\n+    monkeypatch.setattr(\"python_multipart.__version__\", \"0.0.12\")\n+    with warnings.catch_warnings(record=True):\n+        warnings.simplefilter(\"always\")\n         monkeypatch.delattr(\"multipart.__version__\", raising=False)\n         with pytest.raises(RuntimeError, match=multipart_not_installed_error):\n             app = FastAPI()\n@@ -104,3 +136,14 @@ def test_no_multipart_installed_form_file(monkeypatch):\n             @app.post(\"/\")\n             async def root(username: str = Form(), f: UploadFile = File()):\n                 return username  # pragma: nocover\n+\n+\n+def test_old_multipart_installed(monkeypatch):\n+    monkeypatch.setattr(\"python_multipart.__version__\", \"0.0.12\")\n+    with warnings.catch_warnings(record=True):\n+        warnings.simplefilter(\"always\")\n+        app = FastAPI()\n+\n+        @app.post(\"/\")\n+        async def root(username: str = Form()):\n+            return username  # pragma: nocover\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#31887b1cc6fb45373b615448627c63410bd37333", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 507 | Contributors (this commit): 2 | Commits (past 90d): 14 | Contributors (cumulative): 2 | DMM Complexity: None\n\nDIFF:\n@@ -1,6 +1,6 @@\n \"\"\"FastAPI framework, high performance, easy to learn, fast to code, ready for production\"\"\"\n \n-__version__ = \"0.115.3\"\n+__version__ = \"0.115.4\"\n \n from starlette import status as status\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#5c080d81ae95d3f7dd0775b1f1789b9249d1bbec", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 2 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 3/3 | Churn Δ: 2 | Churn Cumulative: 2 | Contributors (this commit): 1 | Commits (past 90d): 2 | Contributors (cumulative): 2 | DMM Complexity: None\n\nDIFF:\n\n@@ -6,7 +6,7 @@ from ...utils import needs_py310, needs_pydanticv1\n \n @pytest.fixture(name=\"client\")\n def get_client():\n-    from docs_src.schema_extra_example.tutorial001_py310_pv1 import app\n+    from docs_src.schema_extra_example.tutorial001_pv1_py310 import app\n \n     client = TestClient(app)\n     return client\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#98182d02ce01c0fe074107e55d5f82bea6d35d30", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 27 | Lines Deleted: 9 | Files Changed: 1 | Hunks: 10 | Methods Changed: 1 | Complexity Δ (Sum/Max): 2/2 | Churn Δ: 36 | Churn Cumulative: 159 | Contributors (this commit): 1 | Commits (past 90d): 1 | Contributors (cumulative): 1 | DMM Complexity: 0.0\n\nDIFF:\n@@ -2,7 +2,7 @@ import logging\n import re\n \n from github import Github\n-from pydantic import SecretStr\n+from pydantic import BaseModel, SecretStr\n from pydantic_settings import BaseSettings\n \n \n@@ -15,7 +15,13 @@ class Settings(BaseSettings):\n     is_done: bool = False\n \n \n-def main():\n+class LinkData(BaseModel):\n+    previous_link: str\n+    preview_link: str\n+    en_link: str | None = None\n+\n+\n+def main() -> None:\n     logging.basicConfig(level=logging.INFO)\n     settings = Settings()\n \n@@ -60,7 +66,7 @@ def main():\n     docs_files = [f for f in files if f.filename.startswith(\"docs/\")]\n \n     deploy_url = settings.deploy_url.rstrip(\"/\")\n-    lang_links: dict[str, list[str]] = {}\n+    lang_links: dict[str, list[LinkData]] = {}\n     for f in docs_files:\n         match = re.match(r\"docs/([^/]+)/docs/(.*)\", f.filename)\n         if not match:\n@@ -71,15 +77,22 @@ def main():\n             path = path.replace(\"index.md\", \"\")\n         else:\n             path = path.replace(\".md\", \"/\")\n+        en_path = path\n         if lang == \"en\":\n-            link = f\"{deploy_url}/{path}\"\n+            use_path = en_path\n         else:\n-            link = f\"{deploy_url}/{lang}/{path}\"\n+            use_path = f\"{lang}/{path}\"\n+        link = LinkData(\n+            previous_link=f\"https://fastapi.tiangolo.com/{use_path}\",\n+            preview_link=f\"{deploy_url}/{use_path}\",\n+        )\n+        if lang != \"en\":\n+            link.en_link = f\"https://fastapi.tiangolo.com/{en_path}\"\n         lang_links.setdefault(lang, []).append(link)\n \n-    links: list[str] = []\n+    links: list[LinkData] = []\n     en_links = lang_links.get(\"en\", [])\n-    en_links.sort()\n+    en_links.sort(key=lambda x: x.preview_link)\n     links.extend(en_links)\n \n     langs = list(lang_links.keys())\n@@ -88,14 +101,19 @@ def main():\n         if lang == \"en\":\n             continue\n         current_lang_links = lang_links[lang]\n-        current_lang_links.sort()\n+        current_lang_links.sort(key=lambda x: x.preview_link)\n         links.extend(current_lang_links)\n \n     message = f\"📝 Docs preview for commit {settings.commit_sha} at: {deploy_url}\"\n \n     if links:\n         message += \"\\n\\n### Modified Pages\\n\\n\"\n-        message += \"\\n\".join([f\"* {link}\" for link in links])\n+        for link in links:\n+            message += f\"* {link.preview_link}\"\n+            message += f\" - ([before]({link.previous_link}))\"\n+            if link.en_link:\n+                message += f\" - ([English]({link.en_link}))\"\n+            message += \"\\n\"\n \n     print(message)\n     use_pr.as_issue().create_comment(message)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#8767a31c8012aebc2410135a04c60acb036b50b4", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 1 | Churn Cumulative: 1088 | Contributors (this commit): 4 | Commits (past 90d): 5 | Contributors (cumulative): 4 | DMM Complexity: None\n\nDIFF:\n@@ -35,6 +35,7 @@ non_translated_sections = [\n     \"newsletter.md\",\n     \"management-tasks.md\",\n     \"management.md\",\n+    \"contributing.md\",\n ]\n \n docs_path = Path(\"docs\")\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#91a929319c4ccaa4569d55edcc52ae774b685eda", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 9 | Lines Deleted: 4 | Files Changed: 2 | Hunks: 4 | Methods Changed: 2 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 13 | Churn Cumulative: 1993 | Contributors (this commit): 12 | Commits (past 90d): 8 | Contributors (cumulative): 13 | DMM Complexity: None\n\nDIFF:\n@@ -27,7 +27,8 @@ from typing_extensions import Annotated, Literal, get_args, get_origin\n \n # Reassign variable to make it reexported for mypy\n PYDANTIC_VERSION = P_VERSION\n-PYDANTIC_V2 = PYDANTIC_VERSION.startswith(\"2.\")\n+PYDANTIC_VERSION_MINOR_TUPLE = tuple(int(x) for x in PYDANTIC_VERSION.split(\".\")[:2])\n+PYDANTIC_V2 = PYDANTIC_VERSION_MINOR_TUPLE[0] == 2\n \n \n sequence_annotation_to_type = {\n\n@@ -6,7 +6,11 @@ from fastapi.openapi.models import Example\n from pydantic.fields import FieldInfo\n from typing_extensions import Annotated, deprecated\n \n-from ._compat import PYDANTIC_V2, PYDANTIC_VERSION, Undefined\n+from ._compat import (\n+    PYDANTIC_V2,\n+    PYDANTIC_VERSION_MINOR_TUPLE,\n+    Undefined,\n+)\n \n _Unset: Any = Undefined\n \n@@ -105,7 +109,7 @@ class Param(FieldInfo):\n                 stacklevel=4,\n             )\n         current_json_schema_extra = json_schema_extra or extra\n-        if PYDANTIC_VERSION < \"2.7.0\":\n+        if PYDANTIC_VERSION_MINOR_TUPLE < (2, 7):\n             self.deprecated = deprecated\n         else:\n             kwargs[\"deprecated\"] = deprecated\n@@ -561,7 +565,7 @@ class Body(FieldInfo):\n                 stacklevel=4,\n             )\n         current_json_schema_extra = json_schema_extra or extra\n-        if PYDANTIC_VERSION < \"2.7.0\":\n+        if PYDANTIC_VERSION_MINOR_TUPLE < (2, 7):\n             self.deprecated = deprecated\n         else:\n             kwargs[\"deprecated\"] = deprecated\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#f057f4a0679255a01d79a96f259bc7e6ad2327e2", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 509 | Contributors (this commit): 2 | Commits (past 90d): 14 | Contributors (cumulative): 2 | DMM Complexity: None\n\nDIFF:\n@@ -1,6 +1,6 @@\n \"\"\"FastAPI framework, high performance, easy to learn, fast to code, ready for production\"\"\"\n \n-__version__ = \"0.115.4\"\n+__version__ = \"0.115.5\"\n \n from starlette import status as status\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#1c711e71472a68fd6d6e00068e803104707ed4cc", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 0 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 0 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 0 | Churn Cumulative: 0 | Contributors (this commit): 1 | Commits (past 90d): 1 | Contributors (cumulative): 1 | DMM Complexity: None\n\nDIFF:\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#bf4fad1fda84b5ab23d18e7caca577c1a0b0c4e1", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 38 | Lines Deleted: 3 | Files Changed: 6 | Hunks: 13 | Methods Changed: 5 | Complexity Δ (Sum/Max): 5/1 | Churn Δ: 41 | Churn Cumulative: 2116 | Contributors (this commit): 4 | Commits (past 90d): 10 | Contributors (cumulative): 14 | DMM Complexity: 1.0\n\nDIFF:\n@@ -21,12 +21,10 @@ from typing import (\n from fastapi.exceptions import RequestErrorModel\n from fastapi.types import IncEx, ModelNameMap, UnionType\n from pydantic import BaseModel, create_model\n-from pydantic.version import VERSION as P_VERSION\n+from pydantic.version import VERSION as PYDANTIC_VERSION\n from starlette.datastructures import UploadFile\n from typing_extensions import Annotated, Literal, get_args, get_origin\n \n-# Reassign variable to make it reexported for mypy\n-PYDANTIC_VERSION = P_VERSION\n PYDANTIC_VERSION_MINOR_TUPLE = tuple(int(x) for x in PYDANTIC_VERSION.split(\".\")[:2])\n PYDANTIC_V2 = PYDANTIC_VERSION_MINOR_TUPLE[0] == 2\n \n@@ -47,6 +45,8 @@ sequence_annotation_to_type = {\n \n sequence_types = tuple(sequence_annotation_to_type.keys())\n \n+Url: Type[Any]\n+\n if PYDANTIC_V2:\n     from pydantic import PydanticSchemaGenerationError as PydanticSchemaGenerationError\n     from pydantic import TypeAdapter\n\n@@ -1,5 +1,6 @@\n import pytest\n from dirty_equals import IsDict\n+from fastapi._compat import PYDANTIC_VERSION_MINOR_TUPLE\n from fastapi.testclient import TestClient\n \n \n@@ -107,6 +108,12 @@ def test_openapi_schema(client: TestClient):\n                                     ],\n                                     \"title\": \"Query string\",\n                                     \"description\": \"Query string for the items to search in the database that have a good match\",\n+                                    # See https://github.com/pydantic/pydantic/blob/80353c29a824c55dea4667b328ba8f329879ac9f/tests/test_fastapi.sh#L25-L34.\n+                                    **(\n+                                        {\"deprecated\": True}\n+                                        if PYDANTIC_VERSION_MINOR_TUPLE >= (2, 10)\n+                                        else {}\n+                                    ),\n                                 }\n                             )\n                             | IsDict(\n\n@@ -1,5 +1,6 @@\n import pytest\n from dirty_equals import IsDict\n+from fastapi._compat import PYDANTIC_VERSION_MINOR_TUPLE\n from fastapi.testclient import TestClient\n \n \n@@ -107,6 +108,12 @@ def test_openapi_schema(client: TestClient):\n                                     ],\n                                     \"title\": \"Query string\",\n                                     \"description\": \"Query string for the items to search in the database that have a good match\",\n+                                    # See https://github.com/pydantic/pydantic/blob/80353c29a824c55dea4667b328ba8f329879ac9f/tests/test_fastapi.sh#L25-L34.\n+                                    **(\n+                                        {\"deprecated\": True}\n+                                        if PYDANTIC_VERSION_MINOR_TUPLE >= (2, 10)\n+                                        else {}\n+                                    ),\n                                 }\n                             )\n                             | IsDict(\n\n@@ -1,5 +1,6 @@\n import pytest\n from dirty_equals import IsDict\n+from fastapi._compat import PYDANTIC_VERSION_MINOR_TUPLE\n from fastapi.testclient import TestClient\n \n from ...utils import needs_py310\n@@ -114,6 +115,12 @@ def test_openapi_schema(client: TestClient):\n                                     ],\n                                     \"title\": \"Query string\",\n                                     \"description\": \"Query string for the items to search in the database that have a good match\",\n+                                    # See https://github.com/pydantic/pydantic/blob/80353c29a824c55dea4667b328ba8f329879ac9f/tests/test_fastapi.sh#L25-L34.\n+                                    **(\n+                                        {\"deprecated\": True}\n+                                        if PYDANTIC_VERSION_MINOR_TUPLE >= (2, 10)\n+                                        else {}\n+                                    ),\n                                 }\n                             )\n                             | IsDict(\n\n@@ -1,5 +1,6 @@\n import pytest\n from dirty_equals import IsDict\n+from fastapi._compat import PYDANTIC_VERSION_MINOR_TUPLE\n from fastapi.testclient import TestClient\n \n from ...utils import needs_py39\n@@ -114,6 +115,12 @@ def test_openapi_schema(client: TestClient):\n                                     ],\n                                     \"title\": \"Query string\",\n                                     \"description\": \"Query string for the items to search in the database that have a good match\",\n+                                    # See https://github.com/pydantic/pydantic/blob/80353c29a824c55dea4667b328ba8f329879ac9f/tests/test_fastapi.sh#L25-L34.\n+                                    **(\n+                                        {\"deprecated\": True}\n+                                        if PYDANTIC_VERSION_MINOR_TUPLE >= (2, 10)\n+                                        else {}\n+                                    ),\n                                 }\n                             )\n                             | IsDict(\n\n@@ -1,5 +1,6 @@\n import pytest\n from dirty_equals import IsDict\n+from fastapi._compat import PYDANTIC_VERSION_MINOR_TUPLE\n from fastapi.testclient import TestClient\n \n from ...utils import needs_py310\n@@ -114,6 +115,12 @@ def test_openapi_schema(client: TestClient):\n                                     ],\n                                     \"title\": \"Query string\",\n                                     \"description\": \"Query string for the items to search in the database that have a good match\",\n+                                    # See https://github.com/pydantic/pydantic/blob/80353c29a824c55dea4667b328ba8f329879ac9f/tests/test_fastapi.sh#L25-L34.\n+                                    **(\n+                                        {\"deprecated\": True}\n+                                        if PYDANTIC_VERSION_MINOR_TUPLE >= (2, 10)\n+                                        else {}\n+                                    ),\n                                 }\n                             )\n                             | IsDict(\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#4f8157588e47f909276e0474f6926740a2e55b9c", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 24 | Lines Deleted: 3 | Files Changed: 2 | Hunks: 5 | Methods Changed: 4 | Complexity Δ (Sum/Max): 3/3 | Churn Δ: 27 | Churn Cumulative: 247 | Contributors (this commit): 9 | Commits (past 90d): 2 | Contributors (cumulative): 11 | DMM Complexity: 1.0\n\nDIFF:\n@@ -1,7 +1,7 @@\n from contextlib import asynccontextmanager as asynccontextmanager\n from typing import AsyncGenerator, ContextManager, TypeVar\n \n-import anyio\n+import anyio.to_thread\n from anyio import CapacityLimiter\n from starlette.concurrency import iterate_in_threadpool as iterate_in_threadpool  # noqa\n from starlette.concurrency import run_in_threadpool as run_in_threadpool  # noqa\n@@ -28,7 +28,7 @@ async def contextmanager_in_threadpool(\n     except Exception as e:\n         ok = bool(\n             await anyio.to_thread.run_sync(\n-                cm.__exit__, type(e), e, None, limiter=exit_limiter\n+                cm.__exit__, type(e), e, e.__traceback__, limiter=exit_limiter\n             )\n         )\n         if not ok:\n\n@@ -1,5 +1,5 @@\n import pytest\n-from fastapi import FastAPI, HTTPException\n+from fastapi import Depends, FastAPI, HTTPException\n from fastapi.exceptions import RequestValidationError\n from fastapi.testclient import TestClient\n from starlette.responses import JSONResponse\n@@ -28,6 +28,18 @@ app = FastAPI(\n client = TestClient(app)\n \n \n+def raise_value_error():\n+    raise ValueError()\n+\n+\n+def dependency_with_yield():\n+    yield raise_value_error()\n+\n+\n+@app.get(\"/dependency-with-yield\", dependencies=[Depends(dependency_with_yield)])\n+def with_yield(): ...\n+\n+\n @app.get(\"/http-exception\")\n def route_with_http_exception():\n     raise HTTPException(status_code=400)\n@@ -65,3 +77,12 @@ def test_override_server_error_exception_response():\n     response = client.get(\"/server-error\")\n     assert response.status_code == 500\n     assert response.json() == {\"exception\": \"server-error\"}\n+\n+\n+def test_traceback_for_dependency_with_yield():\n+    client = TestClient(app, raise_server_exceptions=True)\n+    with pytest.raises(ValueError) as exc_info:\n+        client.get(\"/dependency-with-yield\")\n+    last_frame = exc_info.traceback[-1]\n+    assert str(last_frame.path) == __file__\n+    assert last_frame.lineno == raise_value_error.__code__.co_firstlineno\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#bb8c2a64981d3e806575a445115f29eddf014c77", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 511 | Contributors (this commit): 2 | Commits (past 90d): 13 | Contributors (cumulative): 2 | DMM Complexity: None\n\nDIFF:\n@@ -1,6 +1,6 @@\n \"\"\"FastAPI framework, high performance, easy to learn, fast to code, ready for production\"\"\"\n \n-__version__ = \"0.115.5\"\n+__version__ = \"0.115.6\"\n \n from starlette import status as status\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#4881d1e225445faa196f2de58c4ce02dd32f5837", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 34 | Contributors (this commit): 1 | Commits (past 90d): 1 | Contributors (cumulative): 1 | DMM Complexity: None\n\nDIFF:\n@@ -22,7 +22,7 @@ def test_fastapi_cli():\n         encoding=\"utf-8\",\n     )\n     assert result.returncode == 1, result.stdout\n-    assert \"Using path non_existent_file.py\" in result.stdout\n+    assert \"Path does not exist non_existent_file.py\" in result.stdout\n \n \n def test_fastapi_cli_not_installed():\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#acd9c4e1aac6888c462e21dc7f25f1f7d5c228ca", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 162 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 6 | Complexity Δ (Sum/Max): 22/22 | Churn Δ: 162 | Churn Cumulative: 162 | Contributors (this commit): 1 | Commits (past 90d): 1 | Contributors (cumulative): 1 | DMM Complexity: 0.5315315315315315\n\nDIFF:\n@@ -0,0 +1,162 @@\n+from functools import lru_cache\n+from pathlib import Path\n+from typing import Iterable\n+\n+import typer\n+import yaml\n+from pydantic_ai import Agent\n+\n+non_translated_sections = (\n+    \"reference/\",\n+    \"release-notes.md\",\n+    \"fastapi-people.md\",\n+    \"external-links.md\",\n+    \"newsletter.md\",\n+    \"management-tasks.md\",\n+    \"management.md\",\n+    \"contributing.md\",\n+)\n+\n+\n+general_prompt = \"\"\"\n+For technical terms in English that don't have a common translation term use the original term in English.\n+\n+For code snippets or fragments, surrounded by backticks (`), don't translate the content, keep the original in English. For example, `list`, `dict`, keep them as is.\n+\n+The content is written in markdown, write the translation in markdown as well. Don't add triple backticks (`) around the generated translation content.\n+\n+When there's an example of code, the console or a terminal, normally surrounded by triple backticks and a keyword like \"console\" or \"bash\" (e.g. ```console), do not translate the content, keep the original in English.\n+\n+The original content will be surrounded by triple percentage signs (%) and you should translate it to the target language. Do not include the triple percentage signs in the translation.\n+\"\"\"\n+\n+\n+@lru_cache\n+def get_langs() -> dict[str, str]:\n+    return yaml.safe_load(Path(\"docs/language_names.yml\").read_text())\n+\n+\n+def generate_lang_path(*, lang: str, path: Path) -> Path:\n+    en_docs_path = Path(\"docs/en/docs\")\n+    assert str(path).startswith(\n+        str(en_docs_path)\n+    ), f\"Path must be inside {en_docs_path}\"\n+    lang_docs_path = Path(f\"docs/{lang}/docs\")\n+    out_path = Path(str(path).replace(str(en_docs_path), str(lang_docs_path)))\n+    return out_path\n+\n+\n+def translate_page(*, lang: str, path: Path) -> None:\n+    langs = get_langs()\n+    language = langs[lang]\n+    lang_path = Path(f\"docs/{lang}\")\n+    lang_path.mkdir(exist_ok=True)\n+    lang_prompt_path = lang_path / \"llm-prompt.md\"\n+    assert lang_prompt_path.exists(), f\"Prompt file not found: {lang_prompt_path}\"\n+    lang_prompt_content = lang_prompt_path.read_text()\n+\n+    en_docs_path = Path(\"docs/en/docs\")\n+    assert str(path).startswith(\n+        str(en_docs_path)\n+    ), f\"Path must be inside {en_docs_path}\"\n+    out_path = generate_lang_path(lang=lang, path=path)\n+    out_path.parent.mkdir(parents=True, exist_ok=True)\n+    original_content = path.read_text()\n+    old_translation: str | None = None\n+    if out_path.exists():\n+        old_translation = out_path.read_text()\n+    agent = Agent(\"openai:gpt-4o\")\n+\n+    prompt_segments = [\n+        lang_prompt_content,\n+        general_prompt,\n+    ]\n+    if old_translation:\n+        prompt_segments.extend(\n+            [\n+                \"There's an existing previous translation for this content that is probably outdated with old content or old instructions.\",\n+                \"Update the translation given your current instructions and the original content.\",\n+                \"If you have instructions to translate specific terms or phrases in a specific way, please follow those instructions instead of keeping the old and outdated content.\",\n+                \"Previous translation:\",\n+                f\"%%%\\n{old_translation}%%%\",\n+            ]\n+        )\n+    prompt_segments.extend(\n+        [\n+            f\"Translate to {language} ({lang}).\",\n+            \"Original content:\",\n+            f\"%%%\\n{original_content}%%%\",\n+        ]\n+    )\n+    prompt = \"\\n\\n\".join(prompt_segments)\n+\n+    result = agent.run_sync(prompt)\n+    out_content = f\"{result.data.strip()}\\n\"\n+    out_path.write_text(out_content)\n+\n+\n+def iter_paths_to_translate() -> Iterable[Path]:\n+    \"\"\"\n+    Iterate on the markdown files to translate in order of priority.\n+    \"\"\"\n+    first_dirs = [\n+        Path(\"docs/en/docs/learn\"),\n+        Path(\"docs/en/docs/tutorial\"),\n+        Path(\"docs/en/docs/advanced\"),\n+        Path(\"docs/en/docs/about\"),\n+        Path(\"docs/en/docs/how-to\"),\n+    ]\n+    first_parent = Path(\"docs/en/docs\")\n+    yield from first_parent.glob(\"*.md\")\n+    for dir_path in first_dirs:\n+        yield from dir_path.rglob(\"*.md\")\n+    first_dirs_str = tuple(str(d) for d in first_dirs)\n+    for path in Path(\"docs/en/docs\").rglob(\"*.md\"):\n+        if str(path).startswith(first_dirs_str):\n+            continue\n+        if path.parent == first_parent:\n+            continue\n+        yield path\n+\n+\n+def translate_all(lang: str) -> None:\n+    paths_to_process: list[Path] = []\n+    for path in iter_paths_to_translate():\n+        if str(path).replace(\"docs/en/docs/\", \"\").startswith(non_translated_sections):\n+            continue\n+        paths_to_process.append(path)\n+    print(\"Original paths:\")\n+    for p in paths_to_process:\n+        print(f\"  - {p}\")\n+    print(f\"Total original paths: {len(paths_to_process)}\")\n+    missing_paths: list[Path] = []\n+    skipped_paths: list[Path] = []\n+    for p in paths_to_process:\n+        lang_path = generate_lang_path(lang=lang, path=p)\n+        if lang_path.exists():\n+            skipped_paths.append(p)\n+            continue\n+        missing_paths.append(p)\n+    print(\"Paths to skip:\")\n+    for p in skipped_paths:\n+        print(f\"  - {p}\")\n+    print(f\"Total paths to skip: {len(skipped_paths)}\")\n+    print(\"Paths to process:\")\n+    for p in missing_paths:\n+        print(f\"  - {p}\")\n+    print(f\"Total paths to process: {len(missing_paths)}\")\n+    for p in missing_paths:\n+        print(f\"Translating: {p}\")\n+        translate_page(lang=\"es\", path=p)\n+        print(f\"Done translating: {p}\")\n+\n+\n+def main(*, lang: str, path: Path = None) -> None:\n+    if path:\n+        translate_page(lang=lang, path=path)\n+    else:\n+        translate_all(lang=lang)\n+\n+\n+if __name__ == \"__main__\":\n+    typer.run(main)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
