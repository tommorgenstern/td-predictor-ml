{"custom_id": "fastapi#55b9faeb48f9c8676cd56adc8f8d75040e3f1010", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 9 | Lines Deleted: 11 | Files Changed: 5 | Hunks: 7 | Methods Changed: 4 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 20 | Churn Cumulative: 4834 | Contributors (this commit): 41 | Commits (past 90d): 28 | Contributors (cumulative): 61 | DMM Complexity: 1.0\n\nDIFF:\n@@ -117,11 +117,8 @@ class FastAPI(Starlette):\n \n     def setup(self) -> None:\n         if self.openapi_url:\n-            server_urls = set()\n-            for server_data in self.servers:\n-                url = server_data.get(\"url\")\n-                if url:\n-                    server_urls.add(url)\n+            urls = (server_data.get(\"url\") for server_data in self.servers)\n+            server_urls = {url for url in urls if url}\n \n             async def openapi(req: Request) -> JSONResponse:\n                 root_path = req.scope.get(\"root_path\", \"\").rstrip(\"/\")\n\n@@ -746,7 +746,7 @@ def get_body_field(*, dependant: Dependant, name: str) -> Optional[ModelField]:\n     first_param = flat_dependant.body_params[0]\n     field_info = get_field_info(first_param)\n     embed = getattr(field_info, \"embed\", None)\n-    body_param_names_set = set([param.name for param in flat_dependant.body_params])\n+    body_param_names_set = {param.name for param in flat_dependant.body_params}\n     if len(body_param_names_set) == 1 and not embed:\n         return get_schema_compatible_field(field=first_param)\n     # If one field requires to embed, all have to be embedded\n\n@@ -1,3 +1,4 @@\n+from collections import defaultdict\n from enum import Enum\n from pathlib import PurePath\n from types import GeneratorType\n@@ -15,9 +16,9 @@ DictIntStrAny = Dict[Union[int, str], Any]\n def generate_encoders_by_class_tuples(\n     type_encoder_map: Dict[Any, Callable]\n ) -> Dict[Callable, Tuple]:\n-    encoders_by_classes: Dict[Callable, List] = {}\n+    encoders_by_classes: Dict[Callable, List] = defaultdict(list)\n     for type_, encoder in type_encoder_map.items():\n-        encoders_by_classes.setdefault(encoder, []).append(type_)\n+        encoders_by_classes[encoder].append(type_)\n     encoders_by_class_tuples: Dict[Callable, Tuple] = {}\n     for encoder, classes in encoders_by_classes.items():\n         encoders_by_class_tuples[encoder] = tuple(classes)\n\n@@ -1,3 +1,3 @@\n-METHODS_WITH_BODY = set((\"GET\", \"HEAD\", \"POST\", \"PUT\", \"DELETE\", \"PATCH\"))\n-STATUS_CODES_WITH_NO_BODY = set((100, 101, 102, 103, 204, 304))\n+METHODS_WITH_BODY = {\"GET\", \"HEAD\", \"POST\", \"PUT\", \"DELETE\", \"PATCH\"}\n+STATUS_CODES_WITH_NO_BODY = {100, 101, 102, 103, 204, 304}\n REF_PREFIX = \"#/components/schemas/\"\n\n@@ -86,7 +86,7 @@ class HTTPBasic(HTTPBase):\n         except (ValueError, UnicodeDecodeError, binascii.Error):\n             raise invalid_user_credentials_exc\n         username, separator, password = data.partition(\":\")\n-        if not (separator):\n+        if not separator:\n             raise invalid_user_credentials_exc\n         return HTTPBasicCredentials(username=username, password=password)\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#3063ad83ec006a41f2ed8f4168d5d6efbddbee6b", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 5 | Files Changed: 1 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): -1/0 | Churn Δ: 7 | Churn Cumulative: 416 | Contributors (this commit): 11 | Commits (past 90d): 4 | Contributors (cumulative): 11 | DMM Complexity: 0.0\n\nDIFF:\n@@ -16,12 +16,9 @@ DictIntStrAny = Dict[Union[int, str], Any]\n def generate_encoders_by_class_tuples(\n     type_encoder_map: Dict[Any, Callable]\n ) -> Dict[Callable, Tuple]:\n-    encoders_by_classes: Dict[Callable, List] = defaultdict(list)\n+    encoders_by_class_tuples: Dict[Callable, Tuple] = defaultdict(tuple)\n     for type_, encoder in type_encoder_map.items():\n-        encoders_by_classes[encoder].append(type_)\n-    encoders_by_class_tuples: Dict[Callable, Tuple] = {}\n-    for encoder, classes in encoders_by_classes.items():\n-        encoders_by_class_tuples[encoder] = tuple(classes)\n+        encoders_by_class_tuples[encoder] += (type_,)\n     return encoders_by_class_tuples\n \n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#7fbe3737bc0ffcd9228be2a24b4914f8a6ab9e1e", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 11 | Lines Deleted: 1 | Files Changed: 2 | Hunks: 3 | Methods Changed: 2 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 12 | Churn Cumulative: 608 | Contributors (this commit): 12 | Commits (past 90d): 8 | Contributors (cumulative): 19 | DMM Complexity: 1.0\n\nDIFF:\n@@ -48,7 +48,7 @@ def jsonable_encoder(\n     if exclude is not None and not isinstance(exclude, set):\n         exclude = set(exclude)\n     if isinstance(obj, BaseModel):\n-        encoder = getattr(obj.Config, \"json_encoders\", {})\n+        encoder = getattr(obj.__config__, \"json_encoders\", {})\n         if custom_encoder:\n             encoder.update(custom_encoder)\n         if PYDANTIC_1:\n\n@@ -55,6 +55,11 @@ class ModelWithCustomEncoder(BaseModel):\n         }\n \n \n+class ModelWithCustomEncoderSubclass(ModelWithCustomEncoder):\n+    class Config:\n+        pass\n+\n+\n class RoleEnum(Enum):\n     admin = \"admin\"\n     normal = \"normal\"\n@@ -117,6 +122,11 @@ def test_encode_custom_json_encoders_model():\n     assert jsonable_encoder(model) == {\"dt_field\": \"2019-01-01T08:00:00+00:00\"}\n \n \n+def test_encode_custom_json_encoders_model_subclass():\n+    model = ModelWithCustomEncoderSubclass(dt_field=datetime(2019, 1, 1, 8))\n+    assert jsonable_encoder(model) == {\"dt_field\": \"2019-01-01T08:00:00+00:00\"}\n+\n+\n def test_encode_model_with_config():\n     model = ModelWithConfig(role=RoleEnum.admin)\n     assert jsonable_encoder(model) == {\"role\": \"admin\"}\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#aedf5c895abf1bb30c7fdae969101621f01e737c", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 79 | Contributors (this commit): 1 | Commits (past 90d): 2 | Contributors (cumulative): 1 | DMM Complexity: None\n\nDIFF:\n@@ -3,8 +3,8 @@ import os\n \n import requests\n \n-# room_id = \"5c9c9540d73408ce4fbc1403\"  # FastAPI\n-room_id = \"5cc46398d73408ce4fbed233\"  # Gitter development\n+room_id = \"5c9c9540d73408ce4fbc1403\"  # FastAPI\n+# room_id = \"5cc46398d73408ce4fbed233\"  # Gitter development\n \n gitter_token = os.getenv(\"GITTER_TOKEN\")\n assert gitter_token\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#38d8bab770480ec34231b2412eba040f058f7198", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 150 | Lines Deleted: 4 | Files Changed: 2 | Hunks: 8 | Methods Changed: 23 | Complexity Δ (Sum/Max): 23/20 | Churn Δ: 154 | Churn Cumulative: 1854 | Contributors (this commit): 21 | Commits (past 90d): 13 | Contributors (cumulative): 22 | DMM Complexity: 0.9595959595959596\n\nDIFF:\n@@ -24,6 +24,7 @@ from fastapi.concurrency import (\n     contextmanager_in_threadpool,\n )\n from fastapi.dependencies.models import Dependant, SecurityRequirement\n+from fastapi.logger import logger\n from fastapi.security.base import SecurityBase\n from fastapi.security.oauth2 import OAuth2, SecurityScopes\n from fastapi.security.open_id_connect_url import OpenIdConnect\n@@ -96,6 +97,42 @@ sequence_shape_to_type = {\n }\n \n \n+multipart_not_installed_error = (\n+    'Form data requires \"python-multipart\" to be installed. \\n'\n+    'You can install \"python-multipart\" with: \\n\\n'\n+    \"pip install python-multipart\\n\"\n+)\n+multipart_incorrect_install_error = (\n+    'Form data requires \"python-multipart\" to be installed. '\n+    'It seems you installed \"multipart\" instead. \\n'\n+    'You can remove \"multipart\" with: \\n\\n'\n+    \"pip uninstall multipart\\n\\n\"\n+    'And then install \"python-multipart\" with: \\n\\n'\n+    \"pip install python-multipart\\n\"\n+)\n+\n+\n+def check_file_field(field: ModelField) -> None:\n+    field_info = get_field_info(field)\n+    if isinstance(field_info, params.Form):\n+        try:\n+            # __version__ is available in both multiparts, and can be mocked\n+            from multipart import __version__\n+\n+            assert __version__\n+            try:\n+                # parse_options_header is only available in the right multlipart\n+                from multipart.multipart import parse_options_header\n+\n+                assert parse_options_header\n+            except ImportError:\n+                logger.error(multipart_incorrect_install_error)\n+                raise RuntimeError(multipart_incorrect_install_error)\n+        except ImportError:\n+            logger.error(multipart_not_installed_error)\n+            raise RuntimeError(multipart_not_installed_error)\n+\n+\n def get_param_sub_dependant(\n     *, param: inspect.Parameter, path: str, security_scopes: Optional[List[str]] = None\n ) -> Dependant:\n@@ -733,9 +770,8 @@ def get_schema_compatible_field(*, field: ModelField) -> ModelField:\n             default=field.default,\n             required=field.required,\n             alias=field.alias,\n-            field_info=field.field_info if PYDANTIC_1 else field.schema,  # type: ignore\n+            field_info=get_field_info(field),\n         )\n-\n     return out_field\n \n \n@@ -748,7 +784,9 @@ def get_body_field(*, dependant: Dependant, name: str) -> Optional[ModelField]:\n     embed = getattr(field_info, \"embed\", None)\n     body_param_names_set = {param.name for param in flat_dependant.body_params}\n     if len(body_param_names_set) == 1 and not embed:\n-        return get_schema_compatible_field(field=first_param)\n+        final_field = get_schema_compatible_field(field=first_param)\n+        check_file_field(final_field)\n+        return final_field\n     # If one field requires to embed, all have to be embedded\n     # in case a sub-dependency is evaluated with a single unique body field\n     # That is combined (embedded) with other body fields\n@@ -779,10 +817,12 @@ def get_body_field(*, dependant: Dependant, name: str) -> Optional[ModelField]:\n         ]\n         if len(set(body_param_media_types)) == 1:\n             BodyFieldInfo_kwargs[\"media_type\"] = body_param_media_types[0]\n-    return create_response_field(\n+    final_field = create_response_field(\n         name=\"body\",\n         type_=BodyModel,\n         required=required,\n         alias=\"body\",\n         field_info=BodyFieldInfo(**BodyFieldInfo_kwargs),\n     )\n+    check_file_field(final_field)\n+    return final_field\n\n@@ -0,0 +1,106 @@\n+import pytest\n+from fastapi import FastAPI, File, Form, UploadFile\n+from fastapi.dependencies.utils import (\n+    multipart_incorrect_install_error,\n+    multipart_not_installed_error,\n+)\n+\n+\n+def test_incorrect_multipart_installed_form(monkeypatch):\n+    monkeypatch.delattr(\"multipart.multipart.parse_options_header\", raising=False)\n+    with pytest.raises(RuntimeError, match=multipart_incorrect_install_error):\n+        app = FastAPI()\n+\n+        @app.post(\"/\")\n+        async def root(username: str = Form(...)):\n+            return username  # pragma: nocover\n+\n+\n+def test_incorrect_multipart_installed_file_upload(monkeypatch):\n+    monkeypatch.delattr(\"multipart.multipart.parse_options_header\", raising=False)\n+    with pytest.raises(RuntimeError, match=multipart_incorrect_install_error):\n+        app = FastAPI()\n+\n+        @app.post(\"/\")\n+        async def root(f: UploadFile = File(...)):\n+            return f  # pragma: nocover\n+\n+\n+def test_incorrect_multipart_installed_file_bytes(monkeypatch):\n+    monkeypatch.delattr(\"multipart.multipart.parse_options_header\", raising=False)\n+    with pytest.raises(RuntimeError, match=multipart_incorrect_install_error):\n+        app = FastAPI()\n+\n+        @app.post(\"/\")\n+        async def root(f: bytes = File(...)):\n+            return f  # pragma: nocover\n+\n+\n+def test_incorrect_multipart_installed_multi_form(monkeypatch):\n+    monkeypatch.delattr(\"multipart.multipart.parse_options_header\", raising=False)\n+    with pytest.raises(RuntimeError, match=multipart_incorrect_install_error):\n+        app = FastAPI()\n+\n+        @app.post(\"/\")\n+        async def root(username: str = Form(...), pasword: str = Form(...)):\n+            return username  # pragma: nocover\n+\n+\n+def test_incorrect_multipart_installed_form_file(monkeypatch):\n+    monkeypatch.delattr(\"multipart.multipart.parse_options_header\", raising=False)\n+    with pytest.raises(RuntimeError, match=multipart_incorrect_install_error):\n+        app = FastAPI()\n+\n+        @app.post(\"/\")\n+        async def root(username: str = Form(...), f: UploadFile = File(...)):\n+            return username  # pragma: nocover\n+\n+\n+def test_no_multipart_installed(monkeypatch):\n+    monkeypatch.delattr(\"multipart.__version__\", raising=False)\n+    with pytest.raises(RuntimeError, match=multipart_not_installed_error):\n+        app = FastAPI()\n+\n+        @app.post(\"/\")\n+        async def root(username: str = Form(...)):\n+            return username  # pragma: nocover\n+\n+\n+def test_no_multipart_installed_file(monkeypatch):\n+    monkeypatch.delattr(\"multipart.__version__\", raising=False)\n+    with pytest.raises(RuntimeError, match=multipart_not_installed_error):\n+        app = FastAPI()\n+\n+        @app.post(\"/\")\n+        async def root(f: UploadFile = File(...)):\n+            return f  # pragma: nocover\n+\n+\n+def test_no_multipart_installed_file_bytes(monkeypatch):\n+    monkeypatch.delattr(\"multipart.__version__\", raising=False)\n+    with pytest.raises(RuntimeError, match=multipart_not_installed_error):\n+        app = FastAPI()\n+\n+        @app.post(\"/\")\n+        async def root(f: bytes = File(...)):\n+            return f  # pragma: nocover\n+\n+\n+def test_no_multipart_installed_multi_form(monkeypatch):\n+    monkeypatch.delattr(\"multipart.__version__\", raising=False)\n+    with pytest.raises(RuntimeError, match=multipart_not_installed_error):\n+        app = FastAPI()\n+\n+        @app.post(\"/\")\n+        async def root(username: str = Form(...), password: str = Form(...)):\n+            return username  # pragma: nocover\n+\n+\n+def test_no_multipart_installed_form_file(monkeypatch):\n+    monkeypatch.delattr(\"multipart.__version__\", raising=False)\n+    with pytest.raises(RuntimeError, match=multipart_not_installed_error):\n+        app = FastAPI()\n+\n+        @app.post(\"/\")\n+        async def root(username: str = Form(...), f: UploadFile = File(...)):\n+            return username  # pragma: nocover\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#2fd28434dd506fbdd8d85c17b98e9065042dc7ad", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 28 | Lines Deleted: 0 | Files Changed: 5 | Hunks: 3 | Methods Changed: 3 | Complexity Δ (Sum/Max): 3/1 | Churn Δ: 28 | Churn Cumulative: 28 | Contributors (this commit): 1 | Commits (past 90d): 5 | Contributors (cumulative): 5 | DMM Complexity: 1.0\n\nDIFF:\n\n@@ -0,0 +1,8 @@\n+from fastapi import FastAPI\n+\n+app = FastAPI()\n+\n+\n+@app.get(\"/\")\n+async def root():\n+    return {\"message\": \"Tomato\"}\n\n@@ -0,0 +1,12 @@\n+import pytest\n+from httpx import AsyncClient\n+\n+from .main import app\n+\n+\n+@pytest.mark.asyncio\n+async def test_root():\n+    async with AsyncClient(app=app, base_url=\"http://test\") as ac:\n+        response = await ac.get(\"/\")\n+    assert response.status_code == 200\n+    assert response.json() == {\"message\": \"Tomato\"}\n\n\n@@ -0,0 +1,8 @@\n+import pytest\n+\n+from docs_src.async_tests.test_main import test_root\n+\n+\n+@pytest.mark.asyncio\n+async def test_async_testing():\n+    await test_root()\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#79e08a2541e4f20b245e23367b7814ecb4785ed6", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 261 | Contributors (this commit): 1 | Commits (past 90d): 12 | Contributors (cumulative): 1 | DMM Complexity: None\n\nDIFF:\n@@ -1,6 +1,6 @@\n \"\"\"FastAPI framework, high performance, easy to learn, fast to code, ready for production\"\"\"\n \n-__version__ = \"0.60.1\"\n+__version__ = \"0.60.2\"\n \n from starlette import status\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#da9b5201c4a021b04bb3a59247c5b9a57a8c3144", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 63 | Lines Deleted: 61 | Files Changed: 16 | Hunks: 45 | Methods Changed: 37 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 124 | Churn Cumulative: 9015 | Contributors (this commit): 39 | Commits (past 90d): 40 | Contributors (cumulative): 99 | DMM Complexity: 1.0\n\nDIFF:\n@@ -42,10 +42,9 @@ from starlette.types import ASGIApp\n from starlette.websockets import WebSocket\n \n try:\n-    from pydantic.fields import FieldInfo, ModelField\n+    from pydantic.fields import ModelField\n except ImportError:  # pragma: nocover\n     # TODO: remove when removing support for Pydantic < 1.0.0\n-    from pydantic import Schema as FieldInfo  # type: ignore\n     from pydantic.fields import Field as ModelField  # type: ignore\n \n \n\n@@ -168,7 +168,7 @@ def get_query_type_optional(query: Optional[int] = None):\n \n \n @app.get(\"/query/int/default\")\n-def get_query_type_optional(query: int = 10):\n+def get_query_type_int_default(query: int = 10):\n     return f\"foo bar {query}\"\n \n \n\n@@ -976,8 +976,8 @@ openapi_schema = {\n                         },\n                     },\n                 },\n-                \"summary\": \"Get Query Type Optional\",\n-                \"operationId\": \"get_query_type_optional_query_int_default_get\",\n+                \"summary\": \"Get Query Type Int Default\",\n+                \"operationId\": \"get_query_type_int_default_query_int_default_get\",\n                 \"parameters\": [\n                     {\n                         \"required\": False,\n@@ -1144,7 +1144,7 @@ def test_swagger_ui():\n     assert response.headers[\"content-type\"] == \"text/html; charset=utf-8\"\n     assert \"swagger-ui-dist\" in response.text\n     assert (\n-        f\"oauth2RedirectUrl: window.location.origin + '/docs/oauth2-redirect'\"\n+        \"oauth2RedirectUrl: window.location.origin + '/docs/oauth2-redirect'\"\n         in response.text\n     )\n \n\n@@ -59,12 +59,14 @@ async def get_callable_gen_dependency(value: str = Depends(callable_gen_dependen\n \n \n @app.get(\"/async-callable-dependency\")\n-async def get_callable_dependency(value: str = Depends(async_callable_dependency)):\n+async def get_async_callable_dependency(\n+    value: str = Depends(async_callable_dependency),\n+):\n     return value\n \n \n @app.get(\"/async-callable-gen-dependency\")\n-async def get_callable_gen_dependency(\n+async def get_async_callable_gen_dependency(\n     value: str = Depends(async_callable_gen_dependency),\n ):\n     return value\n\n@@ -204,19 +204,19 @@ client = TestClient(app)\n \n \n def test_async_state():\n-    assert state[\"/async\"] == f\"asyncgen not started\"\n+    assert state[\"/async\"] == \"asyncgen not started\"\n     response = client.get(\"/async\")\n     assert response.status_code == 200, response.text\n-    assert response.json() == f\"asyncgen started\"\n-    assert state[\"/async\"] == f\"asyncgen completed\"\n+    assert response.json() == \"asyncgen started\"\n+    assert state[\"/async\"] == \"asyncgen completed\"\n \n \n def test_sync_state():\n-    assert state[\"/sync\"] == f\"generator not started\"\n+    assert state[\"/sync\"] == \"generator not started\"\n     response = client.get(\"/sync\")\n     assert response.status_code == 200, response.text\n-    assert response.json() == f\"generator started\"\n-    assert state[\"/sync\"] == f\"generator completed\"\n+    assert response.json() == \"generator started\"\n+    assert state[\"/sync\"] == \"generator completed\"\n \n \n def test_async_raise_other():\n@@ -281,15 +281,15 @@ def test_sync_raise():\n def test_sync_async_state():\n     response = client.get(\"/sync_async\")\n     assert response.status_code == 200, response.text\n-    assert response.json() == f\"asyncgen started\"\n-    assert state[\"/async\"] == f\"asyncgen completed\"\n+    assert response.json() == \"asyncgen started\"\n+    assert state[\"/async\"] == \"asyncgen completed\"\n \n \n def test_sync_sync_state():\n     response = client.get(\"/sync_sync\")\n     assert response.status_code == 200, response.text\n-    assert response.json() == f\"generator started\"\n-    assert state[\"/sync\"] == f\"generator completed\"\n+    assert response.json() == \"generator started\"\n+    assert state[\"/sync\"] == \"generator completed\"\n \n \n def test_sync_async_raise_other():\n\n@@ -134,7 +134,7 @@ def test_encode_model_with_config():\n \n def test_encode_model_with_alias_raises():\n     with pytest.raises(ValidationError):\n-        model = ModelWithAlias(foo=\"Bar\")\n+        ModelWithAlias(foo=\"Bar\")\n \n \n def test_encode_model_with_alias():\n\n@@ -8,6 +8,7 @@ app = FastAPI()\n \n media_type = \"application/vnd.api+json\"\n \n+\n # NOTE: These are not valid JSON:API resources\n # but they are fine for testing requestBody with custom media_type\n class Product(BaseModel):\n\n@@ -54,17 +54,17 @@ def by_alias_list():\n \n \n @app.get(\"/no-alias/dict\", response_model=ModelNoAlias)\n-def by_alias_dict():\n+def no_alias_dict():\n     return {\"name\": \"Foo\"}\n \n \n @app.get(\"/no-alias/model\", response_model=ModelNoAlias)\n-def by_alias_model():\n+def no_alias_model():\n     return ModelNoAlias(name=\"Foo\")\n \n \n @app.get(\"/no-alias/list\", response_model=List[ModelNoAlias])\n-def by_alias_list():\n+def no_alias_list():\n     return [{\"name\": \"Foo\"}, {\"name\": \"Bar\"}]\n \n \n@@ -178,8 +178,8 @@ openapi_schema = {\n         },\n         \"/no-alias/dict\": {\n             \"get\": {\n-                \"summary\": \"By Alias Dict\",\n-                \"operationId\": \"by_alias_dict_no_alias_dict_get\",\n+                \"summary\": \"No Alias Dict\",\n+                \"operationId\": \"no_alias_dict_no_alias_dict_get\",\n                 \"responses\": {\n                     \"200\": {\n                         \"description\": \"Successful Response\",\n@@ -194,8 +194,8 @@ openapi_schema = {\n         },\n         \"/no-alias/model\": {\n             \"get\": {\n-                \"summary\": \"By Alias Model\",\n-                \"operationId\": \"by_alias_model_no_alias_model_get\",\n+                \"summary\": \"No Alias Model\",\n+                \"operationId\": \"no_alias_model_no_alias_model_get\",\n                 \"responses\": {\n                     \"200\": {\n                         \"description\": \"Successful Response\",\n@@ -210,15 +210,15 @@ openapi_schema = {\n         },\n         \"/no-alias/list\": {\n             \"get\": {\n-                \"summary\": \"By Alias List\",\n-                \"operationId\": \"by_alias_list_no_alias_list_get\",\n+                \"summary\": \"No Alias List\",\n+                \"operationId\": \"no_alias_list_no_alias_list_get\",\n                 \"responses\": {\n                     \"200\": {\n                         \"description\": \"Successful Response\",\n                         \"content\": {\n                             \"application/json\": {\n                                 \"schema\": {\n-                                    \"title\": \"Response By Alias List No Alias List Get\",\n+                                    \"title\": \"Response No Alias List No Alias List Get\",\n                                     \"type\": \"array\",\n                                     \"items\": {\n                                         \"$ref\": \"#/components/schemas/ModelNoAlias\"\n\n@@ -28,7 +28,7 @@ def get_current_user(oauth_header: \"str\" = Security(reusable_oauth2)):\n \n @app.post(\"/login\")\n # Here we use string annotations to test them\n-def read_current_user(form_data: \"OAuth2PasswordRequestFormStrict\" = Depends()):\n+def login(form_data: \"OAuth2PasswordRequestFormStrict\" = Depends()):\n     return form_data\n \n \n@@ -62,13 +62,13 @@ openapi_schema = {\n                         },\n                     },\n                 },\n-                \"summary\": \"Read Current User\",\n-                \"operationId\": \"read_current_user_login_post\",\n+                \"summary\": \"Login\",\n+                \"operationId\": \"login_login_post\",\n                 \"requestBody\": {\n                     \"content\": {\n                         \"application/x-www-form-urlencoded\": {\n                             \"schema\": {\n-                                \"$ref\": \"#/components/schemas/Body_read_current_user_login_post\"\n+                                \"$ref\": \"#/components/schemas/Body_login_login_post\"\n                             }\n                         }\n                     },\n@@ -92,8 +92,8 @@ openapi_schema = {\n     },\n     \"components\": {\n         \"schemas\": {\n-            \"Body_read_current_user_login_post\": {\n-                \"title\": \"Body_read_current_user_login_post\",\n+            \"Body_login_login_post\": {\n+                \"title\": \"Body_login_login_post\",\n                 \"required\": [\"grant_type\", \"username\", \"password\"],\n                 \"type\": \"object\",\n                 \"properties\": {\n\n@@ -31,12 +31,12 @@ def get_current_user(oauth_header: Optional[str] = Security(reusable_oauth2)):\n \n \n @app.post(\"/login\")\n-def read_current_user(form_data: OAuth2PasswordRequestFormStrict = Depends()):\n+def login(form_data: OAuth2PasswordRequestFormStrict = Depends()):\n     return form_data\n \n \n @app.get(\"/users/me\")\n-def read_current_user(current_user: Optional[User] = Depends(get_current_user)):\n+def read_users_me(current_user: Optional[User] = Depends(get_current_user)):\n     if current_user is None:\n         return {\"msg\": \"Create an account first\"}\n     return current_user\n@@ -66,13 +66,13 @@ openapi_schema = {\n                         },\n                     },\n                 },\n-                \"summary\": \"Read Current User\",\n-                \"operationId\": \"read_current_user_login_post\",\n+                \"summary\": \"Login\",\n+                \"operationId\": \"login_login_post\",\n                 \"requestBody\": {\n                     \"content\": {\n                         \"application/x-www-form-urlencoded\": {\n                             \"schema\": {\n-                                \"$ref\": \"#/components/schemas/Body_read_current_user_login_post\"\n+                                \"$ref\": \"#/components/schemas/Body_login_login_post\"\n                             }\n                         }\n                     },\n@@ -88,16 +88,16 @@ openapi_schema = {\n                         \"content\": {\"application/json\": {\"schema\": {}}},\n                     }\n                 },\n-                \"summary\": \"Read Current User\",\n-                \"operationId\": \"read_current_user_users_me_get\",\n+                \"summary\": \"Read Users Me\",\n+                \"operationId\": \"read_users_me_users_me_get\",\n                 \"security\": [{\"OAuth2\": []}],\n             }\n         },\n     },\n     \"components\": {\n         \"schemas\": {\n-            \"Body_read_current_user_login_post\": {\n-                \"title\": \"Body_read_current_user_login_post\",\n+            \"Body_login_login_post\": {\n+                \"title\": \"Body_login_login_post\",\n                 \"required\": [\"grant_type\", \"username\", \"password\"],\n                 \"type\": \"object\",\n                 \"properties\": {\n\n@@ -30,14 +30,14 @@ class ModelDefaults(BaseModel):\n \n \n @app.get(\"/\", response_model=Model, response_model_exclude_unset=True)\n-def get() -> ModelSubclass:\n+def get_root() -> ModelSubclass:\n     return ModelSubclass(sub={}, y=1, z=0)\n \n \n @app.get(\n     \"/exclude_unset\", response_model=ModelDefaults, response_model_exclude_unset=True\n )\n-def get() -> ModelDefaults:\n+def get_exclude_unset() -> ModelDefaults:\n     return ModelDefaults(x=None, y=\"y\")\n \n \n@@ -46,14 +46,14 @@ def get() -> ModelDefaults:\n     response_model=ModelDefaults,\n     response_model_exclude_defaults=True,\n )\n-def get() -> ModelDefaults:\n+def get_exclude_defaults() -> ModelDefaults:\n     return ModelDefaults(x=None, y=\"y\")\n \n \n @app.get(\n     \"/exclude_none\", response_model=ModelDefaults, response_model_exclude_none=True\n )\n-def get() -> ModelDefaults:\n+def get_exclude_none() -> ModelDefaults:\n     return ModelDefaults(x=None, y=\"y\")\n \n \n@@ -63,7 +63,7 @@ def get() -> ModelDefaults:\n     response_model_exclude_unset=True,\n     response_model_exclude_none=True,\n )\n-def get() -> ModelDefaults:\n+def get_exclude_unset_none() -> ModelDefaults:\n     return ModelDefaults(x=None, y=\"y\")\n \n \n\n@@ -8,7 +8,7 @@ items = {\"foo\": \"The Foo Wrestlers\"}\n \n \n @app.get(\"/items/{item_id}\")\n-async def create_item(item_id: str):\n+async def read_item(item_id: str):\n     if item_id not in items:\n         raise HTTPException(\n             status_code=404,\n@@ -19,7 +19,7 @@ async def create_item(item_id: str):\n \n \n @app.get(\"/starlette-items/{item_id}\")\n-async def create_item(item_id: str):\n+async def read_starlette_item(item_id: str):\n     if item_id not in items:\n         raise StarletteHTTPException(status_code=404, detail=\"Item not found\")\n     return {\"item\": items[item_id]}\n@@ -49,8 +49,8 @@ openapi_schema = {\n                         },\n                     },\n                 },\n-                \"summary\": \"Create Item\",\n-                \"operationId\": \"create_item_items__item_id__get\",\n+                \"summary\": \"Read Item\",\n+                \"operationId\": \"read_item_items__item_id__get\",\n                 \"parameters\": [\n                     {\n                         \"required\": True,\n@@ -79,8 +79,8 @@ openapi_schema = {\n                         },\n                     },\n                 },\n-                \"summary\": \"Create Item\",\n-                \"operationId\": \"create_item_starlette_items__item_id__get\",\n+                \"summary\": \"Read Starlette Item\",\n+                \"operationId\": \"read_starlette_item_starlette_items__item_id__get\",\n                 \"parameters\": [\n                     {\n                         \"required\": True,\n\n@@ -18,9 +18,9 @@ def test_swagger_ui():\n     response = client.get(\"/docs\")\n     assert response.status_code == 200, response.text\n     print(response.text)\n-    assert f\"ui.initOAuth\" in response.text\n-    assert f'\"appName\": \"The Predendapp\"' in response.text\n-    assert f'\"clientId\": \"the-foo-clients\"' in response.text\n+    assert \"ui.initOAuth\" in response.text\n+    assert '\"appName\": \"The Predendapp\"' in response.text\n+    assert '\"clientId\": \"the-foo-clients\"' in response.text\n \n \n def test_response():\n\n@@ -126,6 +126,6 @@ def test_create_read():\n         assert data[\"text\"] == note[\"text\"]\n         assert data[\"completed\"] == note[\"completed\"]\n         assert \"id\" in data\n-        response = client.get(f\"/notes/\")\n+        response = client.get(\"/notes/\")\n         assert response.status_code == 200, response.text\n         assert data in response.json()\n\n@@ -128,7 +128,7 @@ name_price_missing = {\n \n body_missing = {\n     \"detail\": [\n-        {\"loc\": [\"body\"], \"msg\": \"field required\", \"type\": \"value_error.missing\",}\n+        {\"loc\": [\"body\"], \"msg\": \"field required\", \"type\": \"value_error.missing\"}\n     ]\n }\n \n\n@@ -28,7 +28,7 @@ async def routerprefixindex(websocket: WebSocket):\n \n \n @router.websocket(\"/router2\")\n-async def routerindex(websocket: WebSocket):\n+async def routerindex2(websocket: WebSocket):\n     await websocket.accept()\n     await websocket.send_text(\"Hello, router!\")\n     await websocket.close()\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#0752c7242dfc86344a9d1acab48b9a2c2209817c", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 4/4 | Churn Δ: 2 | Churn Cumulative: 2 | Contributors (this commit): 2 | Commits (past 90d): 1 | Contributors (cumulative): 2 | DMM Complexity: None\n\nDIFF:\n@@ -11,7 +11,7 @@ app = FastAPI()\n \n @app.exception_handler(StarletteHTTPException)\n async def custom_http_exception_handler(request, exc):\n-    print(f\"OMG! An HTTP error!: {exc}\")\n+    print(f\"OMG! An HTTP error!: {repr(exc)}\")\n     return await http_exception_handler(request, exc)\n \n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#5ed48ccdc8705f1dcffe7044b3980f9d5f7c95b9", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 106 | Lines Deleted: 1 | Files Changed: 3 | Hunks: 3 | Methods Changed: 8 | Complexity Δ (Sum/Max): 11/10 | Churn Δ: 107 | Churn Cumulative: 368 | Contributors (this commit): 2 | Commits (past 90d): 15 | Contributors (cumulative): 4 | DMM Complexity: 1.0\n\nDIFF:\n@@ -0,0 +1,83 @@\n+from typing import List\n+\n+from fastapi import FastAPI, WebSocket, WebSocketDisconnect\n+from fastapi.responses import HTMLResponse\n+\n+app = FastAPI()\n+\n+html = \"\"\"\n+<!DOCTYPE html>\n+<html>\n+    <head>\n+        <title>Chat</title>\n+    </head>\n+    <body>\n+        <h1>WebSocket Chat</h1>\n+        <h2>Your ID: <span id=\"ws-id\"></span></h2>\n+        <form action=\"\" onsubmit=\"sendMessage(event)\">\n+            <input type=\"text\" id=\"messageText\" autocomplete=\"off\"/>\n+            <button>Send</button>\n+        </form>\n+        <ul id='messages'>\n+        </ul>\n+        <script>\n+            var client_id = Date.now()\n+            document.querySelector(\"#ws-id\").textContent = client_id;\n+            var ws = new WebSocket(`ws://localhost:8000/ws/${client_id}`);\n+            ws.onmessage = function(event) {\n+                var messages = document.getElementById('messages')\n+                var message = document.createElement('li')\n+                var content = document.createTextNode(event.data)\n+                message.appendChild(content)\n+                messages.appendChild(message)\n+            };\n+            function sendMessage(event) {\n+                var input = document.getElementById(\"messageText\")\n+                ws.send(input.value)\n+                input.value = ''\n+                event.preventDefault()\n+            }\n+        </script>\n+    </body>\n+</html>\n+\"\"\"\n+\n+\n+class ConnectionManager:\n+    def __init__(self):\n+        self.active_connections: List[WebSocket] = []\n+\n+    async def connect(self, websocket: WebSocket):\n+        await websocket.accept()\n+        self.active_connections.append(websocket)\n+\n+    def disconnect(self, websocket: WebSocket):\n+        self.active_connections.remove(websocket)\n+\n+    async def send_personal_message(self, message: str, websocket: WebSocket):\n+        await websocket.send_text(message)\n+\n+    async def broadcast(self, message: str):\n+        for connection in self.active_connections:\n+            await connection.send_text(message)\n+\n+\n+manager = ConnectionManager()\n+\n+\n+@app.get(\"/\")\n+async def get():\n+    return HTMLResponse(html)\n+\n+\n+@app.websocket(\"/ws/{client_id}\")\n+async def websocket_endpoint(websocket: WebSocket, client_id: int):\n+    await manager.connect(websocket)\n+    try:\n+        while True:\n+            data = await websocket.receive_text()\n+            await manager.send_personal_message(f\"You wrote: {data}\", websocket)\n+            await manager.broadcast(f\"Client #{client_id} says: {data}\")\n+    except WebSocketDisconnect:\n+        manager.disconnect(websocket)\n+        await manager.broadcast(f\"Client #{client_id} left the chat\")\n\n@@ -22,4 +22,4 @@ from .param_functions import (\n from .requests import Request\n from .responses import Response\n from .routing import APIRouter\n-from .websockets import WebSocket\n+from .websockets import WebSocket, WebSocketDisconnect\n\n@@ -0,0 +1,22 @@\n+from fastapi.testclient import TestClient\n+\n+from docs_src.websockets.tutorial003 import app\n+\n+client = TestClient(app)\n+\n+\n+def test_websocket_handle_disconnection():\n+    with client.websocket_connect(\"/ws/1234\") as connection, client.websocket_connect(\n+        \"/ws/5678\"\n+    ) as connection_two:\n+        connection.send_text(\"Hello from 1234\")\n+        data1 = connection.receive_text()\n+        assert data1 == \"You wrote: Hello from 1234\"\n+        data2 = connection_two.receive_text()\n+        client1_says = \"Client #1234 says: Hello from 1234\"\n+        assert data2 == client1_says\n+        data1 = connection.receive_text()\n+        assert data1 == client1_says\n+        connection_two.close()\n+        data1 = connection.receive_text()\n+        assert data1 == \"Client #5678 left the chat\"\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#b9a0179a03b8f7fd4ff396fa37bc05b7f1a39af9", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 48 | Lines Deleted: 2 | Files Changed: 4 | Hunks: 7 | Methods Changed: 7 | Complexity Δ (Sum/Max): 6/5 | Churn Δ: 50 | Churn Cumulative: 1944 | Contributors (this commit): 22 | Commits (past 90d): 17 | Contributors (cumulative): 30 | DMM Complexity: 0.7727272727272727\n\nDIFF:\n@@ -34,6 +34,7 @@ class Dependant:\n         call: Optional[Callable] = None,\n         request_param_name: Optional[str] = None,\n         websocket_param_name: Optional[str] = None,\n+        http_connection_param_name: Optional[str] = None,\n         response_param_name: Optional[str] = None,\n         background_tasks_param_name: Optional[str] = None,\n         security_scopes_param_name: Optional[str] = None,\n@@ -50,6 +51,7 @@ class Dependant:\n         self.security_requirements = security_schemes or []\n         self.request_param_name = request_param_name\n         self.websocket_param_name = websocket_param_name\n+        self.http_connection_param_name = http_connection_param_name\n         self.response_param_name = response_param_name\n         self.background_tasks_param_name = background_tasks_param_name\n         self.security_scopes = security_scopes\n\n@@ -41,7 +41,7 @@ from pydantic.utils import lenient_issubclass\n from starlette.background import BackgroundTasks\n from starlette.concurrency import run_in_threadpool\n from starlette.datastructures import FormData, Headers, QueryParams, UploadFile\n-from starlette.requests import Request\n+from starlette.requests import HTTPConnection, Request\n from starlette.responses import Response\n from starlette.websockets import WebSocket\n \n@@ -371,6 +371,9 @@ def add_non_field_param_to_dependency(\n     elif lenient_issubclass(param.annotation, WebSocket):\n         dependant.websocket_param_name = param.name\n         return True\n+    elif lenient_issubclass(param.annotation, HTTPConnection):\n+        dependant.http_connection_param_name = param.name\n+        return True\n     elif lenient_issubclass(param.annotation, Response):\n         dependant.response_param_name = param.name\n         return True\n@@ -607,6 +610,8 @@ async def solve_dependencies(\n         )\n         values.update(body_values)\n         errors.extend(body_errors)\n+    if dependant.http_connection_param_name:\n+        values[dependant.http_connection_param_name] = request\n     if dependant.request_param_name and isinstance(request, Request):\n         values[dependant.request_param_name] = request\n     elif dependant.websocket_param_name and isinstance(request, WebSocket):\n\n@@ -1 +1 @@\n-from starlette.requests import Request  # noqa\n+from starlette.requests import HTTPConnection, Request  # noqa\n\n@@ -0,0 +1,39 @@\n+from fastapi import Depends, FastAPI\n+from fastapi.requests import HTTPConnection\n+from fastapi.testclient import TestClient\n+from starlette.websockets import WebSocket\n+\n+app = FastAPI()\n+app.state.value = 42\n+\n+\n+async def extract_value_from_http_connection(conn: HTTPConnection):\n+    return conn.app.state.value\n+\n+\n+@app.get(\"/http\")\n+async def get_value_by_http(value: int = Depends(extract_value_from_http_connection)):\n+    return value\n+\n+\n+@app.websocket(\"/ws\")\n+async def get_value_by_ws(\n+    websocket: WebSocket, value: int = Depends(extract_value_from_http_connection)\n+):\n+    await websocket.accept()\n+    await websocket.send_json(value)\n+    await websocket.close()\n+\n+\n+client = TestClient(app)\n+\n+\n+def test_value_extracting_by_http():\n+    response = client.get(\"/http\")\n+    assert response.status_code == 200\n+    assert response.json() == 42\n+\n+\n+def test_value_extracting_by_ws():\n+    with client.websocket_connect(\"/ws\") as websocket:\n+        assert websocket.receive_json() == 42\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#e1758d107ea5eede358cfdbf69ae7829c8e65a92", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 79 | Lines Deleted: 360 | Files Changed: 13 | Hunks: 153 | Methods Changed: 71 | Complexity Δ (Sum/Max): -59/0 | Churn Δ: 439 | Churn Cumulative: 12213 | Contributors (this commit): 66 | Commits (past 90d): 73 | Contributors (cumulative): 149 | DMM Complexity: 1.0\n\nDIFF:\n@@ -16,7 +16,6 @@ from fastapi.openapi.docs import (\n )\n from fastapi.openapi.utils import get_openapi\n from fastapi.params import Depends\n-from fastapi.utils import warning_response_model_skip_defaults_deprecated\n from starlette.applications import Starlette\n from starlette.datastructures import State\n from starlette.exceptions import HTTPException\n@@ -198,9 +197,8 @@ class FastAPI(Starlette):\n         methods: Optional[List[str]] = None,\n         operation_id: Optional[str] = None,\n         response_model_include: Optional[Union[SetIntStr, DictIntStrAny]] = None,\n-        response_model_exclude: Union[SetIntStr, DictIntStrAny] = set(),\n+        response_model_exclude: Optional[Union[SetIntStr, DictIntStrAny]] = None,\n         response_model_by_alias: bool = True,\n-        response_model_skip_defaults: Optional[bool] = None,\n         response_model_exclude_unset: bool = False,\n         response_model_exclude_defaults: bool = False,\n         response_model_exclude_none: bool = False,\n@@ -208,8 +206,6 @@ class FastAPI(Starlette):\n         response_class: Optional[Type[Response]] = None,\n         name: Optional[str] = None,\n     ) -> None:\n-        if response_model_skip_defaults is not None:\n-            warning_response_model_skip_defaults_deprecated()  # pragma: nocover\n         self.router.add_api_route(\n             path,\n             endpoint=endpoint,\n@@ -227,9 +223,7 @@ class FastAPI(Starlette):\n             response_model_include=response_model_include,\n             response_model_exclude=response_model_exclude,\n             response_model_by_alias=response_model_by_alias,\n-            response_model_exclude_unset=bool(\n-                response_model_exclude_unset or response_model_skip_defaults\n-            ),\n+            response_model_exclude_unset=response_model_exclude_unset,\n             response_model_exclude_defaults=response_model_exclude_defaults,\n             response_model_exclude_none=response_model_exclude_none,\n             include_in_schema=include_in_schema,\n@@ -253,9 +247,8 @@ class FastAPI(Starlette):\n         methods: Optional[List[str]] = None,\n         operation_id: Optional[str] = None,\n         response_model_include: Optional[Union[SetIntStr, DictIntStrAny]] = None,\n-        response_model_exclude: Union[SetIntStr, DictIntStrAny] = set(),\n+        response_model_exclude: Optional[Union[SetIntStr, DictIntStrAny]] = None,\n         response_model_by_alias: bool = True,\n-        response_model_skip_defaults: Optional[bool] = None,\n         response_model_exclude_unset: bool = False,\n         response_model_exclude_defaults: bool = False,\n         response_model_exclude_none: bool = False,\n@@ -263,9 +256,6 @@ class FastAPI(Starlette):\n         response_class: Optional[Type[Response]] = None,\n         name: Optional[str] = None,\n     ) -> Callable:\n-        if response_model_skip_defaults is not None:\n-            warning_response_model_skip_defaults_deprecated()  # pragma: nocover\n-\n         def decorator(func: Callable) -> Callable:\n             self.router.add_api_route(\n                 path,\n@@ -284,9 +274,7 @@ class FastAPI(Starlette):\n                 response_model_include=response_model_include,\n                 response_model_exclude=response_model_exclude,\n                 response_model_by_alias=response_model_by_alias,\n-                response_model_exclude_unset=bool(\n-                    response_model_exclude_unset or response_model_skip_defaults\n-                ),\n+                response_model_exclude_unset=response_model_exclude_unset,\n                 response_model_exclude_defaults=response_model_exclude_defaults,\n                 response_model_exclude_none=response_model_exclude_none,\n                 include_in_schema=include_in_schema,\n@@ -344,9 +332,8 @@ class FastAPI(Starlette):\n         deprecated: Optional[bool] = None,\n         operation_id: Optional[str] = None,\n         response_model_include: Optional[Union[SetIntStr, DictIntStrAny]] = None,\n-        response_model_exclude: Union[SetIntStr, DictIntStrAny] = set(),\n+        response_model_exclude: Optional[Union[SetIntStr, DictIntStrAny]] = None,\n         response_model_by_alias: bool = True,\n-        response_model_skip_defaults: Optional[bool] = None,\n         response_model_exclude_unset: bool = False,\n         response_model_exclude_defaults: bool = False,\n         response_model_exclude_none: bool = False,\n@@ -355,8 +342,6 @@ class FastAPI(Starlette):\n         name: Optional[str] = None,\n         callbacks: Optional[List[routing.APIRoute]] = None,\n     ) -> Callable:\n-        if response_model_skip_defaults is not None:\n-            warning_response_model_skip_defaults_deprecated()  # pragma: nocover\n         return self.router.get(\n             path,\n             response_model=response_model,\n@@ -372,9 +357,7 @@ class FastAPI(Starlette):\n             response_model_include=response_model_include,\n             response_model_exclude=response_model_exclude,\n             response_model_by_alias=response_model_by_alias,\n-            response_model_exclude_unset=bool(\n-                response_model_exclude_unset or response_model_skip_defaults\n-            ),\n+            response_model_exclude_unset=response_model_exclude_unset,\n             response_model_exclude_defaults=response_model_exclude_defaults,\n             response_model_exclude_none=response_model_exclude_none,\n             include_in_schema=include_in_schema,\n@@ -398,9 +381,8 @@ class FastAPI(Starlette):\n         deprecated: Optional[bool] = None,\n         operation_id: Optional[str] = None,\n         response_model_include: Optional[Union[SetIntStr, DictIntStrAny]] = None,\n-        response_model_exclude: Union[SetIntStr, DictIntStrAny] = set(),\n+        response_model_exclude: Optional[Union[SetIntStr, DictIntStrAny]] = None,\n         response_model_by_alias: bool = True,\n-        response_model_skip_defaults: Optional[bool] = None,\n         response_model_exclude_unset: bool = False,\n         response_model_exclude_defaults: bool = False,\n         response_model_exclude_none: bool = False,\n@@ -409,8 +391,6 @@ class FastAPI(Starlette):\n         name: Optional[str] = None,\n         callbacks: Optional[List[routing.APIRoute]] = None,\n     ) -> Callable:\n-        if response_model_skip_defaults is not None:\n-            warning_response_model_skip_defaults_deprecated()  # pragma: nocover\n         return self.router.put(\n             path,\n             response_model=response_model,\n@@ -426,9 +406,7 @@ class FastAPI(Starlette):\n             response_model_include=response_model_include,\n             response_model_exclude=response_model_exclude,\n             response_model_by_alias=response_model_by_alias,\n-            response_model_exclude_unset=bool(\n-                response_model_exclude_unset or response_model_skip_defaults\n-            ),\n+            response_model_exclude_unset=response_model_exclude_unset,\n             response_model_exclude_defaults=response_model_exclude_defaults,\n             response_model_exclude_none=response_model_exclude_none,\n             include_in_schema=include_in_schema,\n@@ -452,9 +430,8 @@ class FastAPI(Starlette):\n         deprecated: Optional[bool] = None,\n         operation_id: Optional[str] = None,\n         response_model_include: Optional[Union[SetIntStr, DictIntStrAny]] = None,\n-        response_model_exclude: Union[SetIntStr, DictIntStrAny] = set(),\n+        response_model_exclude: Optional[Union[SetIntStr, DictIntStrAny]] = None,\n         response_model_by_alias: bool = True,\n-        response_model_skip_defaults: Optional[bool] = None,\n         response_model_exclude_unset: bool = False,\n         response_model_exclude_defaults: bool = False,\n         response_model_exclude_none: bool = False,\n@@ -463,8 +440,6 @@ class FastAPI(Starlette):\n         name: Optional[str] = None,\n         callbacks: Optional[List[routing.APIRoute]] = None,\n     ) -> Callable:\n-        if response_model_skip_defaults is not None:\n-            warning_response_model_skip_defaults_deprecated()  # pragma: nocover\n         return self.router.post(\n             path,\n             response_model=response_model,\n@@ -480,9 +455,7 @@ class FastAPI(Starlette):\n             response_model_include=response_model_include,\n             response_model_exclude=response_model_exclude,\n             response_model_by_alias=response_model_by_alias,\n-            response_model_exclude_unset=bool(\n-                response_model_exclude_unset or response_model_skip_defaults\n-            ),\n+            response_model_exclude_unset=response_model_exclude_unset,\n             response_model_exclude_defaults=response_model_exclude_defaults,\n             response_model_exclude_none=response_model_exclude_none,\n             include_in_schema=include_in_schema,\n@@ -506,9 +479,8 @@ class FastAPI(Starlette):\n         deprecated: Optional[bool] = None,\n         operation_id: Optional[str] = None,\n         response_model_include: Optional[Union[SetIntStr, DictIntStrAny]] = None,\n-        response_model_exclude: Union[SetIntStr, DictIntStrAny] = set(),\n+        response_model_exclude: Optional[Union[SetIntStr, DictIntStrAny]] = None,\n         response_model_by_alias: bool = True,\n-        response_model_skip_defaults: Optional[bool] = None,\n         response_model_exclude_unset: bool = False,\n         response_model_exclude_defaults: bool = False,\n         response_model_exclude_none: bool = False,\n@@ -517,8 +489,6 @@ class FastAPI(Starlette):\n         name: Optional[str] = None,\n         callbacks: Optional[List[routing.APIRoute]] = None,\n     ) -> Callable:\n-        if response_model_skip_defaults is not None:\n-            warning_response_model_skip_defaults_deprecated()  # pragma: nocover\n         return self.router.delete(\n             path,\n             response_model=response_model,\n@@ -534,9 +504,7 @@ class FastAPI(Starlette):\n             response_model_exclude=response_model_exclude,\n             response_model_by_alias=response_model_by_alias,\n             operation_id=operation_id,\n-            response_model_exclude_unset=bool(\n-                response_model_exclude_unset or response_model_skip_defaults\n-            ),\n+            response_model_exclude_unset=response_model_exclude_unset,\n             response_model_exclude_defaults=response_model_exclude_defaults,\n             response_model_exclude_none=response_model_exclude_none,\n             include_in_schema=include_in_schema,\n@@ -560,9 +528,8 @@ class FastAPI(Starlette):\n         deprecated: Optional[bool] = None,\n         operation_id: Optional[str] = None,\n         response_model_include: Optional[Union[SetIntStr, DictIntStrAny]] = None,\n-        response_model_exclude: Union[SetIntStr, DictIntStrAny] = set(),\n+        response_model_exclude: Optional[Union[SetIntStr, DictIntStrAny]] = None,\n         response_model_by_alias: bool = True,\n-        response_model_skip_defaults: Optional[bool] = None,\n         response_model_exclude_unset: bool = False,\n         response_model_exclude_defaults: bool = False,\n         response_model_exclude_none: bool = False,\n@@ -571,8 +538,6 @@ class FastAPI(Starlette):\n         name: Optional[str] = None,\n         callbacks: Optional[List[routing.APIRoute]] = None,\n     ) -> Callable:\n-        if response_model_skip_defaults is not None:\n-            warning_response_model_skip_defaults_deprecated()  # pragma: nocover\n         return self.router.options(\n             path,\n             response_model=response_model,\n@@ -588,9 +553,7 @@ class FastAPI(Starlette):\n             response_model_include=response_model_include,\n             response_model_exclude=response_model_exclude,\n             response_model_by_alias=response_model_by_alias,\n-            response_model_exclude_unset=bool(\n-                response_model_exclude_unset or response_model_skip_defaults\n-            ),\n+            response_model_exclude_unset=response_model_exclude_unset,\n             response_model_exclude_defaults=response_model_exclude_defaults,\n             response_model_exclude_none=response_model_exclude_none,\n             include_in_schema=include_in_schema,\n@@ -614,9 +577,8 @@ class FastAPI(Starlette):\n         deprecated: Optional[bool] = None,\n         operation_id: Optional[str] = None,\n         response_model_include: Optional[Union[SetIntStr, DictIntStrAny]] = None,\n-        response_model_exclude: Union[SetIntStr, DictIntStrAny] = set(),\n+        response_model_exclude: Optional[Union[SetIntStr, DictIntStrAny]] = None,\n         response_model_by_alias: bool = True,\n-        response_model_skip_defaults: Optional[bool] = None,\n         response_model_exclude_unset: bool = False,\n         response_model_exclude_defaults: bool = False,\n         response_model_exclude_none: bool = False,\n@@ -625,8 +587,6 @@ class FastAPI(Starlette):\n         name: Optional[str] = None,\n         callbacks: Optional[List[routing.APIRoute]] = None,\n     ) -> Callable:\n-        if response_model_skip_defaults is not None:\n-            warning_response_model_skip_defaults_deprecated()  # pragma: nocover\n         return self.router.head(\n             path,\n             response_model=response_model,\n@@ -642,9 +602,7 @@ class FastAPI(Starlette):\n             response_model_include=response_model_include,\n             response_model_exclude=response_model_exclude,\n             response_model_by_alias=response_model_by_alias,\n-            response_model_exclude_unset=bool(\n-                response_model_exclude_unset or response_model_skip_defaults\n-            ),\n+            response_model_exclude_unset=response_model_exclude_unset,\n             response_model_exclude_defaults=response_model_exclude_defaults,\n             response_model_exclude_none=response_model_exclude_none,\n             include_in_schema=include_in_schema,\n@@ -668,9 +626,8 @@ class FastAPI(Starlette):\n         deprecated: Optional[bool] = None,\n         operation_id: Optional[str] = None,\n         response_model_include: Optional[Union[SetIntStr, DictIntStrAny]] = None,\n-        response_model_exclude: Union[SetIntStr, DictIntStrAny] = set(),\n+        response_model_exclude: Optional[Union[SetIntStr, DictIntStrAny]] = None,\n         response_model_by_alias: bool = True,\n-        response_model_skip_defaults: Optional[bool] = None,\n         response_model_exclude_unset: bool = False,\n         response_model_exclude_defaults: bool = False,\n         response_model_exclude_none: bool = False,\n@@ -679,8 +636,6 @@ class FastAPI(Starlette):\n         name: Optional[str] = None,\n         callbacks: Optional[List[routing.APIRoute]] = None,\n     ) -> Callable:\n-        if response_model_skip_defaults is not None:\n-            warning_response_model_skip_defaults_deprecated()  # pragma: nocover\n         return self.router.patch(\n             path,\n             response_model=response_model,\n@@ -696,9 +651,7 @@ class FastAPI(Starlette):\n             response_model_include=response_model_include,\n             response_model_exclude=response_model_exclude,\n             response_model_by_alias=response_model_by_alias,\n-            response_model_exclude_unset=bool(\n-                response_model_exclude_unset or response_model_skip_defaults\n-            ),\n+            response_model_exclude_unset=response_model_exclude_unset,\n             response_model_exclude_defaults=response_model_exclude_defaults,\n             response_model_exclude_none=response_model_exclude_none,\n             include_in_schema=include_in_schema,\n@@ -722,9 +675,8 @@ class FastAPI(Starlette):\n         deprecated: Optional[bool] = None,\n         operation_id: Optional[str] = None,\n         response_model_include: Optional[Union[SetIntStr, DictIntStrAny]] = None,\n-        response_model_exclude: Union[SetIntStr, DictIntStrAny] = set(),\n+        response_model_exclude: Optional[Union[SetIntStr, DictIntStrAny]] = None,\n         response_model_by_alias: bool = True,\n-        response_model_skip_defaults: Optional[bool] = None,\n         response_model_exclude_unset: bool = False,\n         response_model_exclude_defaults: bool = False,\n         response_model_exclude_none: bool = False,\n@@ -733,8 +685,6 @@ class FastAPI(Starlette):\n         name: Optional[str] = None,\n         callbacks: Optional[List[routing.APIRoute]] = None,\n     ) -> Callable:\n-        if response_model_skip_defaults is not None:\n-            warning_response_model_skip_defaults_deprecated()  # pragma: nocover\n         return self.router.trace(\n             path,\n             response_model=response_model,\n@@ -750,9 +700,7 @@ class FastAPI(Starlette):\n             response_model_include=response_model_include,\n             response_model_exclude=response_model_exclude,\n             response_model_by_alias=response_model_by_alias,\n-            response_model_exclude_unset=bool(\n-                response_model_exclude_unset or response_model_skip_defaults\n-            ),\n+            response_model_exclude_unset=response_model_exclude_unset,\n             response_model_exclude_defaults=response_model_exclude_defaults,\n             response_model_exclude_none=response_model_exclude_none,\n             include_in_schema=include_in_schema,\n\n@@ -1,12 +1,7 @@\n from typing import Callable, List, Optional, Sequence\n \n from fastapi.security.base import SecurityBase\n-\n-try:\n from pydantic.fields import ModelField\n-except ImportError:  # pragma: nocover\n-    # TODO: remove when removing support for Pydantic < 1.0.0\n-    from pydantic.fields import Field as ModelField  # type: ignore\n \n param_supported_types = (str, int, float, bool)\n \n\n@@ -28,24 +28,10 @@ from fastapi.logger import logger\n from fastapi.security.base import SecurityBase\n from fastapi.security.oauth2 import OAuth2, SecurityScopes\n from fastapi.security.open_id_connect_url import OpenIdConnect\n-from fastapi.utils import (\n-    PYDANTIC_1,\n-    create_response_field,\n-    get_field_info,\n-    get_path_param_names,\n-)\n-from pydantic import BaseConfig, BaseModel, create_model\n+from fastapi.utils import create_response_field, get_path_param_names\n+from pydantic import BaseModel, create_model\n from pydantic.error_wrappers import ErrorWrapper\n from pydantic.errors import MissingError\n-from pydantic.utils import lenient_issubclass\n-from starlette.background import BackgroundTasks\n-from starlette.concurrency import run_in_threadpool\n-from starlette.datastructures import FormData, Headers, QueryParams, UploadFile\n-from starlette.requests import HTTPConnection, Request\n-from starlette.responses import Response\n-from starlette.websockets import WebSocket\n-\n-try:\n from pydantic.fields import (\n     SHAPE_LIST,\n     SHAPE_SEQUENCE,\n@@ -59,26 +45,13 @@ try:\n )\n from pydantic.schema import get_annotation_from_field_info\n from pydantic.typing import ForwardRef, evaluate_forwardref\n-except ImportError:  # pragma: nocover\n-    # TODO: remove when removing support for Pydantic < 1.0.0\n-    from pydantic import Schema as FieldInfo  # type: ignore\n-    from pydantic.fields import Field as ModelField  # type: ignore\n-    from pydantic.fields import Required, Shape  # type: ignore\n-    from pydantic.schema import get_annotation_from_schema  # type: ignore\n-    from pydantic.utils import ForwardRef, evaluate_forwardref  # type: ignore\n-\n-    SHAPE_LIST = Shape.LIST\n-    SHAPE_SEQUENCE = Shape.SEQUENCE\n-    SHAPE_SET = Shape.SET\n-    SHAPE_SINGLETON = Shape.SINGLETON\n-    SHAPE_TUPLE = Shape.TUPLE\n-    SHAPE_TUPLE_ELLIPSIS = Shape.TUPLE_ELLIPS\n-\n-    def get_annotation_from_field_info(\n-        annotation: Any, field_info: FieldInfo, field_name: str\n-    ) -> Type[Any]:\n-        return get_annotation_from_schema(annotation, field_info)\n-\n+from pydantic.utils import lenient_issubclass\n+from starlette.background import BackgroundTasks\n+from starlette.concurrency import run_in_threadpool\n+from starlette.datastructures import FormData, Headers, QueryParams, UploadFile\n+from starlette.requests import HTTPConnection, Request\n+from starlette.responses import Response\n+from starlette.websockets import WebSocket\n \n sequence_shapes = {\n     SHAPE_LIST,\n@@ -113,7 +86,7 @@ multipart_incorrect_install_error = (\n \n \n def check_file_field(field: ModelField) -> None:\n-    field_info = get_field_info(field)\n+    field_info = field.field_info\n     if isinstance(field_info, params.Form):\n         try:\n             # __version__ is available in both multiparts, and can be mocked\n@@ -239,7 +212,7 @@ def get_flat_params(dependant: Dependant) -> List[ModelField]:\n \n \n def is_scalar_field(field: ModelField) -> bool:\n-    field_info = get_field_info(field)\n+    field_info = field.field_info\n     if not (\n         field.shape == SHAPE_SINGLETON\n         and not lenient_issubclass(field.type_, BaseModel)\n@@ -354,7 +327,7 @@ def get_dependant(\n         ) and is_scalar_sequence_field(param_field):\n             add_param_to_fields(field=param_field, dependant=dependant)\n         else:\n-            field_info = get_field_info(param_field)\n+            field_info = param_field.field_info\n             assert isinstance(\n                 field_info, params.Body\n             ), f\"Param: {param_field.name} can only be a request body, using Body(...)\"\n@@ -430,16 +403,13 @@ def get_param_field(\n     )\n     field.required = required\n     if not had_schema and not is_scalar_field(field=field):\n-        if PYDANTIC_1:\n         field.field_info = params.Body(field_info.default)\n-        else:\n-            field.schema = params.Body(field_info.default)  # type: ignore  # pragma: nocover\n \n     return field\n \n \n def add_param_to_fields(*, field: ModelField, dependant: Dependant) -> None:\n-    field_info = cast(params.Param, get_field_info(field))\n+    field_info = cast(params.Param, field.field_info)\n     if field_info.in_ == params.ParamTypes.path:\n         dependant.path_params.append(field)\n     elif field_info.in_ == params.ParamTypes.query:\n@@ -642,26 +612,17 @@ def request_params_to_args(\n             value = received_params.getlist(field.alias) or field.default\n         else:\n             value = received_params.get(field.alias)\n-        field_info = get_field_info(field)\n+        field_info = field.field_info\n         assert isinstance(\n             field_info, params.Param\n         ), \"Params must be subclasses of Param\"\n         if value is None:\n             if field.required:\n-                if PYDANTIC_1:\n                 errors.append(\n                     ErrorWrapper(\n                         MissingError(), loc=(field_info.in_.value, field.alias)\n                     )\n                 )\n-                else:  # pragma: nocover\n-                    errors.append(\n-                        ErrorWrapper(  # type: ignore\n-                            MissingError(),\n-                            loc=(field_info.in_.value, field.alias),\n-                            config=BaseConfig,\n-                        )\n-                    )\n             else:\n                 values[field.name] = deepcopy(field.default)\n             continue\n@@ -685,7 +646,7 @@ async def request_body_to_args(\n     errors = []\n     if required_params:\n         field = required_params[0]\n-        field_info = get_field_info(field)\n+        field_info = field.field_info\n         embed = getattr(field_info, \"embed\", None)\n         field_alias_omitted = len(required_params) == 1 and not embed\n         if field_alias_omitted:\n@@ -752,12 +713,7 @@ async def request_body_to_args(\n \n \n def get_missing_field_error(loc: Tuple[str, ...]) -> ErrorWrapper:\n-    if PYDANTIC_1:\n     missing_field_error = ErrorWrapper(MissingError(), loc=loc)\n-    else:  # pragma: no cover\n-        missing_field_error = ErrorWrapper(  # type: ignore\n-            MissingError(), loc=loc, config=BaseConfig,\n-        )\n     return missing_field_error\n \n \n@@ -775,7 +731,7 @@ def get_schema_compatible_field(*, field: ModelField) -> ModelField:\n             default=field.default,\n             required=field.required,\n             alias=field.alias,\n-            field_info=get_field_info(field),\n+            field_info=field.field_info,\n         )\n     return out_field\n \n@@ -785,7 +741,7 @@ def get_body_field(*, dependant: Dependant, name: str) -> Optional[ModelField]:\n     if not flat_dependant.body_params:\n         return None\n     first_param = flat_dependant.body_params[0]\n-    field_info = get_field_info(first_param)\n+    field_info = first_param.field_info\n     embed = getattr(field_info, \"embed\", None)\n     body_param_names_set = {param.name for param in flat_dependant.body_params}\n     if len(body_param_names_set) == 1 and not embed:\n@@ -796,7 +752,7 @@ def get_body_field(*, dependant: Dependant, name: str) -> Optional[ModelField]:\n     # in case a sub-dependency is evaluated with a single unique body field\n     # That is combined (embedded) with other body fields\n     for param in flat_dependant.body_params:\n-        setattr(get_field_info(param), \"embed\", True)\n+        setattr(param.field_info, \"embed\", True)\n     model_name = \"Body_\" + name\n     BodyModel = create_model(model_name)\n     for f in flat_dependant.body_params:\n@@ -804,21 +760,17 @@ def get_body_field(*, dependant: Dependant, name: str) -> Optional[ModelField]:\n     required = any(True for f in flat_dependant.body_params if f.required)\n \n     BodyFieldInfo_kwargs: Dict[str, Any] = dict(default=None)\n-    if any(\n-        isinstance(get_field_info(f), params.File) for f in flat_dependant.body_params\n-    ):\n+    if any(isinstance(f.field_info, params.File) for f in flat_dependant.body_params):\n         BodyFieldInfo: Type[params.Body] = params.File\n-    elif any(\n-        isinstance(get_field_info(f), params.Form) for f in flat_dependant.body_params\n-    ):\n+    elif any(isinstance(f.field_info, params.Form) for f in flat_dependant.body_params):\n         BodyFieldInfo = params.Form\n     else:\n         BodyFieldInfo = params.Body\n \n         body_param_media_types = [\n-            getattr(get_field_info(f), \"media_type\")\n+            getattr(f.field_info, \"media_type\")\n             for f in flat_dependant.body_params\n-            if isinstance(get_field_info(f), params.Body)\n+            if isinstance(f.field_info, params.Body)\n         ]\n         if len(set(body_param_media_types)) == 1:\n             BodyFieldInfo_kwargs[\"media_type\"] = body_param_media_types[0]\n\n@@ -4,8 +4,6 @@ from pathlib import PurePath\n from types import GeneratorType\n from typing import Any, Callable, Dict, List, Optional, Set, Tuple, Union\n \n-from fastapi.logger import logger\n-from fastapi.utils import PYDANTIC_1\n from pydantic import BaseModel\n from pydantic.json import ENCODERS_BY_TYPE\n \n@@ -28,21 +26,14 @@ encoders_by_class_tuples = generate_encoders_by_class_tuples(ENCODERS_BY_TYPE)\n def jsonable_encoder(\n     obj: Any,\n     include: Optional[Union[SetIntStr, DictIntStrAny]] = None,\n-    exclude: Union[SetIntStr, DictIntStrAny] = set(),\n+    exclude: Optional[Union[SetIntStr, DictIntStrAny]] = None,\n     by_alias: bool = True,\n-    skip_defaults: Optional[bool] = None,\n     exclude_unset: bool = False,\n     exclude_defaults: bool = False,\n     exclude_none: bool = False,\n     custom_encoder: dict = {},\n     sqlalchemy_safe: bool = True,\n ) -> Any:\n-    if skip_defaults is not None:\n-        logger.warning(  # pragma: nocover\n-            \"skip_defaults in jsonable_encoder has been deprecated in favor of \"\n-            \"exclude_unset to keep in line with Pydantic v1, support for it will be \"\n-            \"removed soon.\"\n-        )\n     if include is not None and not isinstance(include, set):\n         include = set(include)\n     if exclude is not None and not isinstance(exclude, set):\n@@ -51,24 +42,14 @@ def jsonable_encoder(\n         encoder = getattr(obj.__config__, \"json_encoders\", {})\n         if custom_encoder:\n             encoder.update(custom_encoder)\n-        if PYDANTIC_1:\n         obj_dict = obj.dict(\n             include=include,\n             exclude=exclude,\n             by_alias=by_alias,\n-                exclude_unset=bool(exclude_unset or skip_defaults),\n+            exclude_unset=exclude_unset,\n             exclude_none=exclude_none,\n             exclude_defaults=exclude_defaults,\n         )\n-        else:  # pragma: nocover\n-            if exclude_defaults:\n-                raise ValueError(\"Cannot use exclude_defaults\")\n-            obj_dict = obj.dict(\n-                include=include,\n-                exclude=exclude,\n-                by_alias=by_alias,\n-                skip_defaults=bool(exclude_unset or skip_defaults),\n-            )\n         if \"__root__\" in obj_dict:\n             obj_dict = obj_dict[\"__root__\"]\n         return jsonable_encoder(\n@@ -94,7 +75,7 @@ def jsonable_encoder(\n                     or (not key.startswith(\"_sa\"))\n                 )\n                 and (value is not None or not exclude_none)\n-                and ((include and key in include) or key not in exclude)\n+                and ((include and key in include) or not exclude or key not in exclude)\n             ):\n                 encoded_key = jsonable_encoder(\n                     key,\n\n@@ -1,11 +1,8 @@\n from typing import Any, Dict, Optional, Sequence\n \n-from fastapi.utils import PYDANTIC_1\n from pydantic import ValidationError, create_model\n from pydantic.error_wrappers import ErrorList\n from starlette.exceptions import HTTPException as StarletteHTTPException\n-from starlette.requests import Request\n-from starlette.websockets import WebSocket\n \n \n class HTTPException(StarletteHTTPException):\n@@ -32,15 +29,9 @@ class FastAPIError(RuntimeError):\n class RequestValidationError(ValidationError):\n     def __init__(self, errors: Sequence[ErrorList], *, body: Any = None) -> None:\n         self.body = body\n-        if PYDANTIC_1:\n         super().__init__(errors, RequestErrorModel)\n-        else:\n-            super().__init__(errors, Request)  # type: ignore  # pragma: nocover\n \n \n class WebSocketRequestValidationError(ValidationError):\n     def __init__(self, errors: Sequence[ErrorList]) -> None:\n-        if PYDANTIC_1:\n         super().__init__(errors, WebSocketErrorModel)\n-        else:\n-            super().__init__(errors, WebSocket)  # type: ignore  # pragma: nocover\n\n@@ -2,25 +2,14 @@ from enum import Enum\n from typing import Any, Callable, Dict, Iterable, List, Optional, Union\n \n from fastapi.logger import logger\n-from pydantic import BaseModel\n-\n-try:\n-    from pydantic import AnyUrl, Field\n-except ImportError:  # pragma: nocover\n-    # TODO: remove when removing support for Pydantic < 1.0.0\n-    from pydantic import Schema as Field  # type: ignore\n-    from pydantic import UrlStr as AnyUrl  # type: ignore\n+from pydantic import AnyUrl, BaseModel, Field\n \n try:\n     import email_validator\n \n     assert email_validator  # make autoflake ignore the unused import\n-    try:\n     from pydantic import EmailStr\n except ImportError:  # pragma: no cover\n-        # TODO: remove when removing support for Pydantic < 1.0.0\n-        from pydantic.types import EmailStr  # type: ignore\n-except ImportError:  # pragma: no cover\n \n     class EmailStr(str):  # type: ignore\n         @classmethod\n\n@@ -16,10 +16,10 @@ from fastapi.params import Body, Param\n from fastapi.utils import (\n     deep_dict_update,\n     generate_operation_id_for_path,\n-    get_field_info,\n     get_model_definitions,\n )\n from pydantic import BaseModel\n+from pydantic.fields import ModelField\n from pydantic.schema import (\n     field_schema,\n     get_flat_models_from_fields,\n@@ -30,12 +30,6 @@ from starlette.responses import JSONResponse\n from starlette.routing import BaseRoute\n from starlette.status import HTTP_422_UNPROCESSABLE_ENTITY\n \n-try:\n-    from pydantic.fields import ModelField\n-except ImportError:  # pragma: nocover\n-    # TODO: remove when removing support for Pydantic < 1.0.0\n-    from pydantic.fields import Field as ModelField  # type: ignore\n-\n validation_error_definition = {\n     \"title\": \"ValidationError\",\n     \"type\": \"object\",\n@@ -91,7 +85,7 @@ def get_openapi_operation_parameters(\n ) -> List[Dict[str, Any]]:\n     parameters = []\n     for param in all_route_params:\n-        field_info = get_field_info(param)\n+        field_info = param.field_info\n         field_info = cast(Param, field_info)\n         # ignore mypy error until enum schemas are released\n         parameter = {\n@@ -122,7 +116,7 @@ def get_openapi_operation_request_body(\n     body_schema, _, _ = field_schema(\n         body_field, model_name_map=model_name_map, ref_prefix=REF_PREFIX  # type: ignore\n     )\n-    field_info = cast(Body, get_field_info(body_field))\n+    field_info = cast(Body, body_field.field_info)\n     request_media_type = field_info.media_type\n     required = body_field.required\n     request_body_oai: Dict[str, Any] = {}\n\n@@ -1,11 +1,7 @@\n from enum import Enum\n from typing import Any, Callable, Optional, Sequence\n \n-try:\n from pydantic.fields import FieldInfo\n-except ImportError:  # pragma: nocover\n-    # TODO: remove when removing support for Pydantic < 1.0.0\n-    from pydantic import Schema as FieldInfo  # type: ignore\n \n \n class ParamTypes(Enum):\n\n@@ -1 +1,2 @@\n-from starlette.requests import HTTPConnection, Request  # noqa\n+from starlette.requests import HTTPConnection as HTTPConnection  # noqa: F401\n+from starlette.requests import Request as Request  # noqa: F401\n\n@@ -16,15 +16,13 @@ from fastapi.encoders import DictIntStrAny, SetIntStr, jsonable_encoder\n from fastapi.exceptions import RequestValidationError, WebSocketRequestValidationError\n from fastapi.openapi.constants import STATUS_CODES_WITH_NO_BODY\n from fastapi.utils import (\n-    PYDANTIC_1,\n     create_cloned_field,\n     create_response_field,\n     generate_operation_id_for_path,\n-    get_field_info,\n-    warning_response_model_skip_defaults_deprecated,\n )\n from pydantic import BaseModel\n from pydantic.error_wrappers import ErrorWrapper, ValidationError\n+from pydantic.fields import ModelField\n from starlette import routing\n from starlette.concurrency import run_in_threadpool\n from starlette.exceptions import HTTPException\n@@ -41,12 +39,6 @@ from starlette.status import WS_1008_POLICY_VIOLATION\n from starlette.types import ASGIApp\n from starlette.websockets import WebSocket\n \n-try:\n-    from pydantic.fields import ModelField\n-except ImportError:  # pragma: nocover\n-    # TODO: remove when removing support for Pydantic < 1.0.0\n-    from pydantic.fields import Field as ModelField  # type: ignore\n-\n \n def _prepare_response_content(\n     res: Any,\n@@ -56,17 +48,12 @@ def _prepare_response_content(\n     exclude_none: bool = False,\n ) -> Any:\n     if isinstance(res, BaseModel):\n-        if PYDANTIC_1:\n         return res.dict(\n             by_alias=True,\n             exclude_unset=exclude_unset,\n             exclude_defaults=exclude_defaults,\n             exclude_none=exclude_none,\n         )\n-        else:\n-            return res.dict(\n-                by_alias=True, skip_defaults=exclude_unset,\n-            )  # pragma: nocover\n     elif isinstance(res, list):\n         return [\n             _prepare_response_content(\n@@ -95,7 +82,7 @@ async def serialize_response(\n     field: Optional[ModelField] = None,\n     response_content: Any,\n     include: Optional[Union[SetIntStr, DictIntStrAny]] = None,\n-    exclude: Union[SetIntStr, DictIntStrAny] = set(),\n+    exclude: Optional[Union[SetIntStr, DictIntStrAny]] = None,\n     by_alias: bool = True,\n     exclude_unset: bool = False,\n     exclude_defaults: bool = False,\n@@ -155,7 +142,7 @@ def get_request_handler(\n     response_class: Type[Response] = JSONResponse,\n     response_field: Optional[ModelField] = None,\n     response_model_include: Optional[Union[SetIntStr, DictIntStrAny]] = None,\n-    response_model_exclude: Union[SetIntStr, DictIntStrAny] = set(),\n+    response_model_exclude: Optional[Union[SetIntStr, DictIntStrAny]] = None,\n     response_model_by_alias: bool = True,\n     response_model_exclude_unset: bool = False,\n     response_model_exclude_defaults: bool = False,\n@@ -164,7 +151,7 @@ def get_request_handler(\n ) -> Callable:\n     assert dependant.call is not None, \"dependant.call must be a function\"\n     is_coroutine = asyncio.iscoroutinefunction(dependant.call)\n-    is_body_form = body_field and isinstance(get_field_info(body_field), params.Form)\n+    is_body_form = body_field and isinstance(body_field.field_info, params.Form)\n \n     async def app(request: Request) -> Response:\n         try:\n@@ -284,7 +271,7 @@ class APIRoute(routing.Route):\n         methods: Optional[Union[Set[str], List[str]]] = None,\n         operation_id: Optional[str] = None,\n         response_model_include: Optional[Union[SetIntStr, DictIntStrAny]] = None,\n-        response_model_exclude: Union[SetIntStr, DictIntStrAny] = set(),\n+        response_model_exclude: Optional[Union[SetIntStr, DictIntStrAny]] = None,\n         response_model_by_alias: bool = True,\n         response_model_exclude_unset: bool = False,\n         response_model_exclude_defaults: bool = False,\n@@ -437,9 +424,8 @@ class APIRouter(routing.Router):\n         methods: Optional[Union[Set[str], List[str]]] = None,\n         operation_id: Optional[str] = None,\n         response_model_include: Optional[Union[SetIntStr, DictIntStrAny]] = None,\n-        response_model_exclude: Union[SetIntStr, DictIntStrAny] = set(),\n+        response_model_exclude: Optional[Union[SetIntStr, DictIntStrAny]] = None,\n         response_model_by_alias: bool = True,\n-        response_model_skip_defaults: Optional[bool] = None,\n         response_model_exclude_unset: bool = False,\n         response_model_exclude_defaults: bool = False,\n         response_model_exclude_none: bool = False,\n@@ -449,8 +435,6 @@ class APIRouter(routing.Router):\n         route_class_override: Optional[Type[APIRoute]] = None,\n         callbacks: Optional[List[APIRoute]] = None,\n     ) -> None:\n-        if response_model_skip_defaults is not None:\n-            warning_response_model_skip_defaults_deprecated()  # pragma: nocover\n         route_class = route_class_override or self.route_class\n         route = route_class(\n             path,\n@@ -469,9 +453,7 @@ class APIRouter(routing.Router):\n             response_model_include=response_model_include,\n             response_model_exclude=response_model_exclude,\n             response_model_by_alias=response_model_by_alias,\n-            response_model_exclude_unset=bool(\n-                response_model_exclude_unset or response_model_skip_defaults\n-            ),\n+            response_model_exclude_unset=response_model_exclude_unset,\n             response_model_exclude_defaults=response_model_exclude_defaults,\n             response_model_exclude_none=response_model_exclude_none,\n             include_in_schema=include_in_schema,\n@@ -498,9 +480,8 @@ class APIRouter(routing.Router):\n         methods: Optional[List[str]] = None,\n         operation_id: Optional[str] = None,\n         response_model_include: Optional[Union[SetIntStr, DictIntStrAny]] = None,\n-        response_model_exclude: Union[SetIntStr, DictIntStrAny] = set(),\n+        response_model_exclude: Optional[Union[SetIntStr, DictIntStrAny]] = None,\n         response_model_by_alias: bool = True,\n-        response_model_skip_defaults: Optional[bool] = None,\n         response_model_exclude_unset: bool = False,\n         response_model_exclude_defaults: bool = False,\n         response_model_exclude_none: bool = False,\n@@ -509,9 +490,6 @@ class APIRouter(routing.Router):\n         name: Optional[str] = None,\n         callbacks: Optional[List[APIRoute]] = None,\n     ) -> Callable:\n-        if response_model_skip_defaults is not None:\n-            warning_response_model_skip_defaults_deprecated()  # pragma: nocover\n-\n         def decorator(func: Callable) -> Callable:\n             self.add_api_route(\n                 path,\n@@ -530,9 +508,7 @@ class APIRouter(routing.Router):\n                 response_model_include=response_model_include,\n                 response_model_exclude=response_model_exclude,\n                 response_model_by_alias=response_model_by_alias,\n-                response_model_exclude_unset=bool(\n-                    response_model_exclude_unset or response_model_skip_defaults\n-                ),\n+                response_model_exclude_unset=response_model_exclude_unset,\n                 response_model_exclude_defaults=response_model_exclude_defaults,\n                 response_model_exclude_none=response_model_exclude_none,\n                 include_in_schema=include_in_schema,\n@@ -653,9 +629,8 @@ class APIRouter(routing.Router):\n         deprecated: Optional[bool] = None,\n         operation_id: Optional[str] = None,\n         response_model_include: Optional[Union[SetIntStr, DictIntStrAny]] = None,\n-        response_model_exclude: Union[SetIntStr, DictIntStrAny] = set(),\n+        response_model_exclude: Optional[Union[SetIntStr, DictIntStrAny]] = None,\n         response_model_by_alias: bool = True,\n-        response_model_skip_defaults: Optional[bool] = None,\n         response_model_exclude_unset: bool = False,\n         response_model_exclude_defaults: bool = False,\n         response_model_exclude_none: bool = False,\n@@ -664,8 +639,6 @@ class APIRouter(routing.Router):\n         name: Optional[str] = None,\n         callbacks: Optional[List[APIRoute]] = None,\n     ) -> Callable:\n-        if response_model_skip_defaults is not None:\n-            warning_response_model_skip_defaults_deprecated()  # pragma: nocover\n         return self.api_route(\n             path=path,\n             response_model=response_model,\n@@ -682,9 +655,7 @@ class APIRouter(routing.Router):\n             response_model_include=response_model_include,\n             response_model_exclude=response_model_exclude,\n             response_model_by_alias=response_model_by_alias,\n-            response_model_exclude_unset=bool(\n-                response_model_exclude_unset or response_model_skip_defaults\n-            ),\n+            response_model_exclude_unset=response_model_exclude_unset,\n             response_model_exclude_defaults=response_model_exclude_defaults,\n             response_model_exclude_none=response_model_exclude_none,\n             include_in_schema=include_in_schema,\n@@ -708,9 +679,8 @@ class APIRouter(routing.Router):\n         deprecated: Optional[bool] = None,\n         operation_id: Optional[str] = None,\n         response_model_include: Optional[Union[SetIntStr, DictIntStrAny]] = None,\n-        response_model_exclude: Union[SetIntStr, DictIntStrAny] = set(),\n+        response_model_exclude: Optional[Union[SetIntStr, DictIntStrAny]] = None,\n         response_model_by_alias: bool = True,\n-        response_model_skip_defaults: Optional[bool] = None,\n         response_model_exclude_unset: bool = False,\n         response_model_exclude_defaults: bool = False,\n         response_model_exclude_none: bool = False,\n@@ -719,8 +689,6 @@ class APIRouter(routing.Router):\n         name: Optional[str] = None,\n         callbacks: Optional[List[APIRoute]] = None,\n     ) -> Callable:\n-        if response_model_skip_defaults is not None:\n-            warning_response_model_skip_defaults_deprecated()  # pragma: nocover\n         return self.api_route(\n             path=path,\n             response_model=response_model,\n@@ -737,9 +705,7 @@ class APIRouter(routing.Router):\n             response_model_include=response_model_include,\n             response_model_exclude=response_model_exclude,\n             response_model_by_alias=response_model_by_alias,\n-            response_model_exclude_unset=bool(\n-                response_model_exclude_unset or response_model_skip_defaults\n-            ),\n+            response_model_exclude_unset=response_model_exclude_unset,\n             response_model_exclude_defaults=response_model_exclude_defaults,\n             response_model_exclude_none=response_model_exclude_none,\n             include_in_schema=include_in_schema,\n@@ -763,9 +729,8 @@ class APIRouter(routing.Router):\n         deprecated: Optional[bool] = None,\n         operation_id: Optional[str] = None,\n         response_model_include: Optional[Union[SetIntStr, DictIntStrAny]] = None,\n-        response_model_exclude: Union[SetIntStr, DictIntStrAny] = set(),\n+        response_model_exclude: Optional[Union[SetIntStr, DictIntStrAny]] = None,\n         response_model_by_alias: bool = True,\n-        response_model_skip_defaults: Optional[bool] = None,\n         response_model_exclude_unset: bool = False,\n         response_model_exclude_defaults: bool = False,\n         response_model_exclude_none: bool = False,\n@@ -774,8 +739,6 @@ class APIRouter(routing.Router):\n         name: Optional[str] = None,\n         callbacks: Optional[List[APIRoute]] = None,\n     ) -> Callable:\n-        if response_model_skip_defaults is not None:\n-            warning_response_model_skip_defaults_deprecated()  # pragma: nocover\n         return self.api_route(\n             path=path,\n             response_model=response_model,\n@@ -792,9 +755,7 @@ class APIRouter(routing.Router):\n             response_model_include=response_model_include,\n             response_model_exclude=response_model_exclude,\n             response_model_by_alias=response_model_by_alias,\n-            response_model_exclude_unset=bool(\n-                response_model_exclude_unset or response_model_skip_defaults\n-            ),\n+            response_model_exclude_unset=response_model_exclude_unset,\n             response_model_exclude_defaults=response_model_exclude_defaults,\n             response_model_exclude_none=response_model_exclude_none,\n             include_in_schema=include_in_schema,\n@@ -818,9 +779,8 @@ class APIRouter(routing.Router):\n         deprecated: Optional[bool] = None,\n         operation_id: Optional[str] = None,\n         response_model_include: Optional[Union[SetIntStr, DictIntStrAny]] = None,\n-        response_model_exclude: Union[SetIntStr, DictIntStrAny] = set(),\n+        response_model_exclude: Optional[Union[SetIntStr, DictIntStrAny]] = None,\n         response_model_by_alias: bool = True,\n-        response_model_skip_defaults: Optional[bool] = None,\n         response_model_exclude_unset: bool = False,\n         response_model_exclude_defaults: bool = False,\n         response_model_exclude_none: bool = False,\n@@ -829,8 +789,6 @@ class APIRouter(routing.Router):\n         name: Optional[str] = None,\n         callbacks: Optional[List[APIRoute]] = None,\n     ) -> Callable:\n-        if response_model_skip_defaults is not None:\n-            warning_response_model_skip_defaults_deprecated()  # pragma: nocover\n         return self.api_route(\n             path=path,\n             response_model=response_model,\n@@ -847,9 +805,7 @@ class APIRouter(routing.Router):\n             response_model_include=response_model_include,\n             response_model_exclude=response_model_exclude,\n             response_model_by_alias=response_model_by_alias,\n-            response_model_exclude_unset=bool(\n-                response_model_exclude_unset or response_model_skip_defaults\n-            ),\n+            response_model_exclude_unset=response_model_exclude_unset,\n             response_model_exclude_defaults=response_model_exclude_defaults,\n             response_model_exclude_none=response_model_exclude_none,\n             include_in_schema=include_in_schema,\n@@ -873,9 +829,8 @@ class APIRouter(routing.Router):\n         deprecated: Optional[bool] = None,\n         operation_id: Optional[str] = None,\n         response_model_include: Optional[Union[SetIntStr, DictIntStrAny]] = None,\n-        response_model_exclude: Union[SetIntStr, DictIntStrAny] = set(),\n+        response_model_exclude: Optional[Union[SetIntStr, DictIntStrAny]] = None,\n         response_model_by_alias: bool = True,\n-        response_model_skip_defaults: Optional[bool] = None,\n         response_model_exclude_unset: bool = False,\n         response_model_exclude_defaults: bool = False,\n         response_model_exclude_none: bool = False,\n@@ -884,8 +839,6 @@ class APIRouter(routing.Router):\n         name: Optional[str] = None,\n         callbacks: Optional[List[APIRoute]] = None,\n     ) -> Callable:\n-        if response_model_skip_defaults is not None:\n-            warning_response_model_skip_defaults_deprecated()  # pragma: nocover\n         return self.api_route(\n             path=path,\n             response_model=response_model,\n@@ -902,9 +855,7 @@ class APIRouter(routing.Router):\n             response_model_include=response_model_include,\n             response_model_exclude=response_model_exclude,\n             response_model_by_alias=response_model_by_alias,\n-            response_model_exclude_unset=bool(\n-                response_model_exclude_unset or response_model_skip_defaults\n-            ),\n+            response_model_exclude_unset=response_model_exclude_unset,\n             response_model_exclude_defaults=response_model_exclude_defaults,\n             response_model_exclude_none=response_model_exclude_none,\n             include_in_schema=include_in_schema,\n@@ -928,9 +879,8 @@ class APIRouter(routing.Router):\n         deprecated: Optional[bool] = None,\n         operation_id: Optional[str] = None,\n         response_model_include: Optional[Union[SetIntStr, DictIntStrAny]] = None,\n-        response_model_exclude: Union[SetIntStr, DictIntStrAny] = set(),\n+        response_model_exclude: Optional[Union[SetIntStr, DictIntStrAny]] = None,\n         response_model_by_alias: bool = True,\n-        response_model_skip_defaults: Optional[bool] = None,\n         response_model_exclude_unset: bool = False,\n         response_model_exclude_defaults: bool = False,\n         response_model_exclude_none: bool = False,\n@@ -939,8 +889,6 @@ class APIRouter(routing.Router):\n         name: Optional[str] = None,\n         callbacks: Optional[List[APIRoute]] = None,\n     ) -> Callable:\n-        if response_model_skip_defaults is not None:\n-            warning_response_model_skip_defaults_deprecated()  # pragma: nocover\n         return self.api_route(\n             path=path,\n             response_model=response_model,\n@@ -957,9 +905,7 @@ class APIRouter(routing.Router):\n             response_model_include=response_model_include,\n             response_model_exclude=response_model_exclude,\n             response_model_by_alias=response_model_by_alias,\n-            response_model_exclude_unset=bool(\n-                response_model_exclude_unset or response_model_skip_defaults\n-            ),\n+            response_model_exclude_unset=response_model_exclude_unset,\n             response_model_exclude_defaults=response_model_exclude_defaults,\n             response_model_exclude_none=response_model_exclude_none,\n             include_in_schema=include_in_schema,\n@@ -983,9 +929,8 @@ class APIRouter(routing.Router):\n         deprecated: Optional[bool] = None,\n         operation_id: Optional[str] = None,\n         response_model_include: Optional[Union[SetIntStr, DictIntStrAny]] = None,\n-        response_model_exclude: Union[SetIntStr, DictIntStrAny] = set(),\n+        response_model_exclude: Optional[Union[SetIntStr, DictIntStrAny]] = None,\n         response_model_by_alias: bool = True,\n-        response_model_skip_defaults: Optional[bool] = None,\n         response_model_exclude_unset: bool = False,\n         response_model_exclude_defaults: bool = False,\n         response_model_exclude_none: bool = False,\n@@ -994,8 +939,6 @@ class APIRouter(routing.Router):\n         name: Optional[str] = None,\n         callbacks: Optional[List[APIRoute]] = None,\n     ) -> Callable:\n-        if response_model_skip_defaults is not None:\n-            warning_response_model_skip_defaults_deprecated()  # pragma: nocover\n         return self.api_route(\n             path=path,\n             response_model=response_model,\n@@ -1012,9 +955,7 @@ class APIRouter(routing.Router):\n             response_model_include=response_model_include,\n             response_model_exclude=response_model_exclude,\n             response_model_by_alias=response_model_by_alias,\n-            response_model_exclude_unset=bool(\n-                response_model_exclude_unset or response_model_skip_defaults\n-            ),\n+            response_model_exclude_unset=response_model_exclude_unset,\n             response_model_exclude_defaults=response_model_exclude_defaults,\n             response_model_exclude_none=response_model_exclude_none,\n             include_in_schema=include_in_schema,\n@@ -1038,9 +979,8 @@ class APIRouter(routing.Router):\n         deprecated: Optional[bool] = None,\n         operation_id: Optional[str] = None,\n         response_model_include: Optional[Union[SetIntStr, DictIntStrAny]] = None,\n-        response_model_exclude: Union[SetIntStr, DictIntStrAny] = set(),\n+        response_model_exclude: Optional[Union[SetIntStr, DictIntStrAny]] = None,\n         response_model_by_alias: bool = True,\n-        response_model_skip_defaults: Optional[bool] = None,\n         response_model_exclude_unset: bool = False,\n         response_model_exclude_defaults: bool = False,\n         response_model_exclude_none: bool = False,\n@@ -1049,8 +989,7 @@ class APIRouter(routing.Router):\n         name: Optional[str] = None,\n         callbacks: Optional[List[APIRoute]] = None,\n     ) -> Callable:\n-        if response_model_skip_defaults is not None:\n-            warning_response_model_skip_defaults_deprecated()  # pragma: nocover\n+\n         return self.api_route(\n             path=path,\n             response_model=response_model,\n@@ -1067,9 +1006,7 @@ class APIRouter(routing.Router):\n             response_model_include=response_model_include,\n             response_model_exclude=response_model_exclude,\n             response_model_by_alias=response_model_by_alias,\n-            response_model_exclude_unset=bool(\n-                response_model_exclude_unset or response_model_skip_defaults\n-            ),\n+            response_model_exclude_unset=response_model_exclude_unset,\n             response_model_exclude_defaults=response_model_exclude_defaults,\n             response_model_exclude_none=response_model_exclude_none,\n             include_in_schema=include_in_schema,\n\n@@ -5,49 +5,13 @@ from enum import Enum\n from typing import Any, Dict, Optional, Set, Type, Union, cast\n \n import fastapi\n-from fastapi.logger import logger\n from fastapi.openapi.constants import REF_PREFIX\n from pydantic import BaseConfig, BaseModel, create_model\n from pydantic.class_validators import Validator\n+from pydantic.fields import FieldInfo, ModelField, UndefinedType\n from pydantic.schema import model_process_schema\n from pydantic.utils import lenient_issubclass\n \n-try:\n-    from pydantic.fields import FieldInfo, ModelField, UndefinedType\n-\n-    PYDANTIC_1 = True\n-except ImportError:  # pragma: nocover\n-    # TODO: remove when removing support for Pydantic < 1.0.0\n-    from pydantic import Schema as FieldInfo  # type: ignore\n-    from pydantic.fields import Field as ModelField  # type: ignore\n-\n-    class UndefinedType:  # type: ignore\n-        def __repr__(self) -> str:\n-            return \"PydanticUndefined\"\n-\n-    logger.warning(\n-        \"Pydantic versions < 1.0.0 are deprecated in FastAPI and support will be \"\n-        \"removed soon.\"\n-    )\n-    PYDANTIC_1 = False\n-\n-\n-# TODO: remove when removing support for Pydantic < 1.0.0\n-def get_field_info(field: ModelField) -> FieldInfo:\n-    if PYDANTIC_1:\n-        return field.field_info  # type: ignore\n-    else:\n-        return field.schema  # type: ignore  # pragma: nocover\n-\n-\n-# TODO: remove when removing support for Pydantic < 1.0.0\n-def warning_response_model_skip_defaults_deprecated() -> None:\n-    logger.warning(  # pragma: nocover\n-        \"response_model_skip_defaults has been deprecated in favor of \"\n-        \"response_model_exclude_unset to keep in line with Pydantic v1, support for \"\n-        \"it will be removed soon.\"\n-    )\n-\n \n def get_model_definitions(\n     *,\n@@ -98,10 +62,7 @@ def create_response_field(\n     )\n \n     try:\n-        if PYDANTIC_1:\n         return response_field(field_info=field_info)\n-        else:  # pragma: nocover\n-            return response_field(schema=field_info)\n     except RuntimeError:\n         raise fastapi.exceptions.FastAPIError(\n             f\"Invalid args for response field! Hint: check that {type_} is a valid pydantic field type\"\n@@ -137,10 +98,7 @@ def create_cloned_field(\n     new_field.default = field.default\n     new_field.required = field.required\n     new_field.model_config = field.model_config\n-    if PYDANTIC_1:\n     new_field.field_info = field.field_info\n-    else:  # pragma: nocover\n-        new_field.schema = field.schema  # type: ignore\n     new_field.allow_none = field.allow_none\n     new_field.validate_always = field.validate_always\n     if field.sub_fields:\n@@ -153,19 +111,11 @@ def create_cloned_field(\n             field.key_field, cloned_types=cloned_types\n         )\n     new_field.validators = field.validators\n-    if PYDANTIC_1:\n     new_field.pre_validators = field.pre_validators\n     new_field.post_validators = field.post_validators\n-    else:  # pragma: nocover\n-        new_field.whole_pre_validators = field.whole_pre_validators  # type: ignore\n-        new_field.whole_post_validators = field.whole_post_validators  # type: ignore\n     new_field.parse_json = field.parse_json\n     new_field.shape = field.shape\n-    try:\n     new_field.populate_validators()\n-    except AttributeError:  # pragma: nocover\n-        # TODO: remove when removing support for Pydantic < 1.0.0\n-        new_field._populate_validators()  # type: ignore\n     return new_field\n \n \n\n@@ -5,13 +5,7 @@ from typing import Optional\n \n import pytest\n from fastapi.encoders import jsonable_encoder\n-from pydantic import BaseModel, ValidationError, create_model\n-\n-try:\n-    from pydantic import Field\n-except ImportError:  # pragma: nocover\n-    # TODO: remove when removing support for Pydantic < 1.0.0\n-    from pydantic import Schema as Field\n+from pydantic import BaseModel, Field, ValidationError, create_model\n \n \n class Person:\n\n@@ -3,15 +3,6 @@ from fastapi.testclient import TestClient\n \n from docs_src.body_fields.tutorial001 import app\n \n-# TODO: remove when removing support for Pydantic < 1.0.0\n-try:\n-    from pydantic import Field  # noqa\n-except ImportError:  # pragma: nocover\n-    import pydantic\n-\n-    pydantic.Field = pydantic.Schema\n-\n-\n client = TestClient(app)\n \n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
