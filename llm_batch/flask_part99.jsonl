{"custom_id": "flask#218534a9f20c98600e7c41321edb4063a8e158ca", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 60 | Files Changed: 1 | Hunks: 6 | Methods Changed: 4 | Complexity Δ (Sum/Max): -9/0 | Churn Δ: 61 | Churn Cumulative: 646 | Contributors (this commit): 5 | Commits (past 90d): 2 | Contributors (cumulative): 5 | DMM Complexity: 0.0\n\nDIFF:\n@@ -1,10 +1,8 @@\n import dataclasses\n import decimal\n-import io\n import json as _json\n import typing as t\n import uuid\n-import warnings\n from datetime import date\n \n from jinja2.utils import htmlsafe_json_dumps as _jinja_htmlsafe_dumps\n@@ -124,20 +122,7 @@ def dumps(obj: t.Any, app: t.Optional[\"Flask\"] = None, **kwargs: t.Any) -> str:\n         context for configuration.\n     \"\"\"\n     _dump_arg_defaults(kwargs, app=app)\n-    encoding = kwargs.pop(\"encoding\", None)\n-    rv = _json.dumps(obj, **kwargs)\n-\n-    if encoding is not None:\n-        warnings.warn(\n-            \"'encoding' is deprecated and will be removed in Flask 2.1.\",\n-            DeprecationWarning,\n-            stacklevel=2,\n-        )\n-\n-        if isinstance(rv, str):\n-            return rv.encode(encoding)  # type: ignore\n-\n-    return rv\n+    return _json.dumps(obj, **kwargs)\n \n \n def dump(\n@@ -159,23 +144,6 @@ def dump(\n         deprecated and will be removed in Flask 2.1.\n     \"\"\"\n     _dump_arg_defaults(kwargs, app=app)\n-    encoding = kwargs.pop(\"encoding\", None)\n-    show_warning = encoding is not None\n-\n-    try:\n-        fp.write(\"\")\n-    except TypeError:\n-        show_warning = True\n-        fp = io.TextIOWrapper(fp, encoding or \"utf-8\")  # type: ignore\n-\n-    if show_warning:\n-        warnings.warn(\n-            \"Writing to a binary file, and the 'encoding' argument, is\"\n-            \" deprecated and will be removed in Flask 2.1.\",\n-            DeprecationWarning,\n-            stacklevel=2,\n-        )\n-\n     _json.dump(obj, fp, **kwargs)\n \n \n@@ -199,19 +167,6 @@ def loads(s: str, app: t.Optional[\"Flask\"] = None, **kwargs: t.Any) -> t.Any:\n         context for configuration.\n     \"\"\"\n     _load_arg_defaults(kwargs, app=app)\n-    encoding = kwargs.pop(\"encoding\", None)\n-\n-    if encoding is not None:\n-        warnings.warn(\n-            \"'encoding' is deprecated and will be removed in Flask 2.1.\"\n-            \" The data must be a string or UTF-8 bytes.\",\n-            DeprecationWarning,\n-            stacklevel=2,\n-        )\n-\n-        if isinstance(s, bytes):\n-            s = s.decode(encoding)\n-\n     return _json.loads(s, **kwargs)\n \n \n@@ -231,20 +186,6 @@ def load(fp: t.IO[str], app: t.Optional[\"Flask\"] = None, **kwargs: t.Any) -> t.A\n         file must be text mode, or binary mode with UTF-8 bytes.\n     \"\"\"\n     _load_arg_defaults(kwargs, app=app)\n-    encoding = kwargs.pop(\"encoding\", None)\n-\n-    if encoding is not None:\n-        warnings.warn(\n-            \"'encoding' is deprecated and will be removed in Flask 2.1.\"\n-            \" The file must be text mode, or binary mode with UTF-8\"\n-            \" bytes.\",\n-            DeprecationWarning,\n-            stacklevel=2,\n-        )\n-\n-        if isinstance(fp.read(0), bytes):\n-            fp = io.TextIOWrapper(fp, encoding)  # type: ignore\n-\n     return _json.load(fp, **kwargs)\n \n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#b7501776a12c15e64b6cdac1e3b903a00df7d285", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 0 | Lines Deleted: 25 | Files Changed: 2 | Hunks: 3 | Methods Changed: 1 | Complexity Δ (Sum/Max): -2/0 | Churn Δ: 25 | Churn Cumulative: 1726 | Contributors (this commit): 11 | Commits (past 90d): 3 | Contributors (cumulative): 13 | DMM Complexity: 0.0\n\nDIFF:\n@@ -23,7 +23,6 @@ from .helpers import flash as flash\n from .helpers import get_flashed_messages as get_flashed_messages\n from .helpers import get_template_attribute as get_template_attribute\n from .helpers import make_response as make_response\n-from .helpers import safe_join as safe_join\n from .helpers import send_file as send_file\n from .helpers import send_from_directory as send_from_directory\n from .helpers import stream_with_context as stream_with_context\n\n@@ -11,7 +11,6 @@ from functools import update_wrapper\n from threading import RLock\n \n import werkzeug.utils\n-from werkzeug.exceptions import NotFound\n from werkzeug.routing import BuildError\n from werkzeug.urls import url_quote\n \n@@ -627,29 +626,6 @@ def send_file(\n     )\n \n \n-def safe_join(directory: str, *pathnames: str) -> str:\n-    \"\"\"Safely join zero or more untrusted path components to a base\n-    directory to avoid escaping the base directory.\n-\n-    :param directory: The trusted base directory.\n-    :param pathnames: The untrusted path components relative to the\n-        base directory.\n-    :return: A safe path, otherwise ``None``.\n-    \"\"\"\n-    warnings.warn(\n-        \"'flask.helpers.safe_join' is deprecated and will be removed in\"\n-        \" Flask 2.1. Use 'werkzeug.utils.safe_join' instead.\",\n-        DeprecationWarning,\n-        stacklevel=2,\n-    )\n-    path = werkzeug.utils.safe_join(directory, *pathnames)\n-\n-    if path is None:\n-        raise NotFound()\n-\n-    return path\n-\n-\n def send_from_directory(\n     directory: t.Union[os.PathLike, str],\n     path: t.Union[os.PathLike, str],\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#f8cdc78ce10f32a46390799e7ac16d231fb35803", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 0 | Lines Deleted: 22 | Files Changed: 1 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): -1/0 | Churn Δ: 22 | Churn Cumulative: 1511 | Contributors (this commit): 11 | Commits (past 90d): 2 | Contributors (cumulative): 11 | DMM Complexity: 0.0\n\nDIFF:\n@@ -5,7 +5,6 @@ import sys\n import typing as t\n import warnings\n from datetime import datetime\n-from datetime import timedelta\n from functools import lru_cache\n from functools import update_wrapper\n from threading import RLock\n@@ -761,27 +760,6 @@ class locked_cached_property(werkzeug.utils.cached_property):\n             super().__delete__(obj)\n \n \n-def total_seconds(td: timedelta) -> int:\n-    \"\"\"Returns the total seconds from a timedelta object.\n-\n-    :param timedelta td: the timedelta to be converted in seconds\n-\n-    :returns: number of seconds\n-    :rtype: int\n-\n-    .. deprecated:: 2.0\n-        Will be removed in Flask 2.1. Use\n-        :meth:`timedelta.total_seconds` instead.\n-    \"\"\"\n-    warnings.warn(\n-        \"'total_seconds' is deprecated and will be removed in Flask\"\n-        \" 2.1. Use 'timedelta.total_seconds' instead.\",\n-        DeprecationWarning,\n-        stacklevel=2,\n-    )\n-    return td.days * 60 * 60 * 24 + td.seconds\n-\n-\n def is_ip(value: str) -> bool:\n     \"\"\"Determine if the given string is an IP address.\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#48f2afbf900560af061d50c73e4d3f9422ce4dbe", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 5 | Lines Deleted: 15 | Files Changed: 2 | Hunks: 4 | Methods Changed: 2 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 20 | Churn Cumulative: 2703 | Contributors (this commit): 21 | Commits (past 90d): 2 | Contributors (cumulative): 24 | DMM Complexity: 1.0\n\nDIFF:\n@@ -299,23 +299,13 @@ class Blueprint(Scaffold):\n         name = f\"{name_prefix}.{self_name}\".lstrip(\".\")\n \n         if name in app.blueprints:\n+            bp_desc = \"this\" if app.blueprints[name] is self else \"a different\"\n             existing_at = f\" '{name}'\" if self_name != name else \"\"\n \n-            if app.blueprints[name] is not self:\n             raise ValueError(\n                 f\"The name '{self_name}' is already registered for\"\n-                    f\" a different blueprint{existing_at}. Use 'name='\"\n-                    \" to provide a unique name.\"\n-                )\n-            else:\n-                import warnings\n-\n-                warnings.warn(\n-                    f\"The name '{self_name}' is already registered for\"\n-                    f\" this blueprint{existing_at}. Use 'name=' to\"\n-                    \" provide a unique name. This will become an error\"\n-                    \" in Flask 2.1.\",\n-                    stacklevel=4,\n+                f\" {bp_desc} blueprint{existing_at}. Use 'name=' to\"\n+                f\" provide a unique name.\"\n             )\n \n         first_bp_registration = not any(bp is self for bp in app.blueprints.values())\n\n@@ -954,8 +954,8 @@ def test_unique_blueprint_names(app, client) -> None:\n \n     app.register_blueprint(bp)\n \n-    with pytest.warns(UserWarning):\n-        app.register_blueprint(bp)  # same bp, same name, warning\n+    with pytest.raises(ValueError):\n+        app.register_blueprint(bp)  # same bp, same name, error\n \n     app.register_blueprint(bp, name=\"again\")  # same bp, different name, ok\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#15a3e82823c894185771486510027a65295bcf94", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 4 | Lines Deleted: 4 | Files Changed: 1 | Hunks: 4 | Methods Changed: 2 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 8 | Churn Cumulative: 1519 | Contributors (this commit): 11 | Commits (past 90d): 3 | Contributors (cumulative): 11 | DMM Complexity: None\n\nDIFF:\n@@ -452,7 +452,7 @@ def _prepare_send_file_kwargs(\n         warnings.warn(\n             \"The 'attachment_filename' parameter has been renamed to\"\n             \" 'download_name'. The old name will be removed in Flask\"\n-            \" 2.1.\",\n+            \" 2.2.\",\n             DeprecationWarning,\n             stacklevel=3,\n         )\n@@ -461,7 +461,7 @@ def _prepare_send_file_kwargs(\n     if cache_timeout is not None:\n         warnings.warn(\n             \"The 'cache_timeout' parameter has been renamed to\"\n-            \" 'max_age'. The old name will be removed in Flask 2.1.\",\n+            \" 'max_age'. The old name will be removed in Flask 2.2.\",\n             DeprecationWarning,\n             stacklevel=3,\n         )\n@@ -470,7 +470,7 @@ def _prepare_send_file_kwargs(\n     if add_etags is not None:\n         warnings.warn(\n             \"The 'add_etags' parameter has been renamed to 'etag'. The\"\n-            \" old name will be removed in Flask 2.1.\",\n+            \" old name will be removed in Flask 2.2.\",\n             DeprecationWarning,\n             stacklevel=3,\n         )\n@@ -666,7 +666,7 @@ def send_from_directory(\n     if filename is not None:\n         warnings.warn(\n             \"The 'filename' parameter has been renamed to 'path'. The\"\n-            \" old name will be removed in Flask 2.1.\",\n+            \" old name will be removed in Flask 2.2.\",\n             DeprecationWarning,\n             stacklevel=2,\n         )\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#564bb27efa8638c40e1dcfdccda5832ba42e9929", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 25 | Lines Deleted: 7 | Files Changed: 1 | Hunks: 10 | Methods Changed: 3 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 32 | Churn Cumulative: 223 | Contributors (this commit): 2 | Commits (past 90d): 1 | Contributors (cumulative): 2 | DMM Complexity: 0.0\n\nDIFF:\n@@ -9,14 +9,15 @@ from werkzeug.test import Client\n from werkzeug.urls import url_parse\n from werkzeug.wrappers import Request as BaseRequest\n \n-from . import _request_ctx_stack\n from .cli import ScriptInfo\n+from .globals import _request_ctx_stack\n from .json import dumps as json_dumps\n from .sessions import SessionMixin\n \n if t.TYPE_CHECKING:\n+    from werkzeug.test import TestResponse\n+\n     from .app import Flask\n-    from .wrappers import Response\n \n \n class EnvironBuilder(werkzeug.test.EnvironBuilder):\n@@ -171,14 +172,15 @@ class FlaskClient(Client):\n             headers = resp.get_wsgi_headers(c.request.environ)\n             self.cookie_jar.extract_wsgi(c.request.environ, headers)\n \n-    def open(  # type: ignore\n+    def open(\n         self,\n         *args: t.Any,\n-        as_tuple: bool = False,\n         buffered: bool = False,\n         follow_redirects: bool = False,\n         **kwargs: t.Any,\n-    ) -> \"Response\":\n+    ) -> \"TestResponse\":\n+        as_tuple = kwargs.pop(\"as_tuple\", None)\n+\n         # Same logic as super.open, but apply environ_base and preserve_context.\n         request = None\n \n@@ -213,12 +215,28 @@ class FlaskClient(Client):\n             finally:\n                 builder.close()\n \n-        return super().open(  # type: ignore\n+        if as_tuple is not None:\n+            import warnings\n+\n+            warnings.warn(\n+                \"'as_tuple' is deprecated and will be removed in\"\n+                \" Werkzeug 2.1 and Flask 2.1. Use\"\n+                \" 'response.request.environ' instead.\",\n+                DeprecationWarning,\n+                stacklevel=3,\n+            )\n+            return super().open(\n                 request,\n                 as_tuple=as_tuple,\n                 buffered=buffered,\n                 follow_redirects=follow_redirects,\n             )\n+        else:\n+            return super().open(\n+                request,\n+                buffered=buffered,\n+                follow_redirects=follow_redirects,\n+            )\n \n     def __enter__(self) -> \"FlaskClient\":\n         if self.preserve_context:\n@@ -272,7 +290,7 @@ class FlaskCliRunner(CliRunner):\n         :return: a :class:`~click.testing.Result` object.\n         \"\"\"\n         if cli is None:\n-            cli = self.app.cli\n+            cli = self.app.cli  # type: ignore\n \n         if \"obj\" not in kwargs:\n             kwargs[\"obj\"] = ScriptInfo(create_app=lambda: self.app)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#46b39e2698697408c6f8f8693e526cd1bb085684", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 8 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): -1/0 | Churn Δ: 9 | Churn Cumulative: 79 | Contributors (this commit): 6 | Commits (past 90d): 1 | Contributors (cumulative): 6 | DMM Complexity: 0.0\n\nDIFF:\n@@ -46,11 +46,4 @@ TemplateGlobalCallable = t.Callable[..., t.Any]\n TemplateTestCallable = t.Callable[..., bool]\n URLDefaultCallable = t.Callable[[str, dict], None]\n URLValuePreprocessorCallable = t.Callable[[t.Optional[str], t.Optional[dict]], None]\n-\n-\n-if t.TYPE_CHECKING:\n-    import typing_extensions as te\n-\n-    class ErrorHandlerCallable(te.Protocol[GenericException]):\n-        def __call__(self, error: GenericException) -> ResponseReturnValue:\n-            ...\n+ErrorHandlerCallable = t.Callable[[GenericException], ResponseReturnValue]\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#e679a85b80df354f8632f8ab3e40135f16f5e6d0", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 5 | Lines Deleted: 4 | Files Changed: 1 | Hunks: 3 | Methods Changed: 1 | Complexity Δ (Sum/Max): 9/9 | Churn Δ: 9 | Churn Cumulative: 558 | Contributors (this commit): 9 | Commits (past 90d): 3 | Contributors (cumulative): 9 | DMM Complexity: 1.0\n\nDIFF:\n@@ -258,15 +258,16 @@ def locate_app(script_info, module_name, app_name, raise_if_not_found=True):\n \n     try:\n         __import__(module_name)\n-    except ImportError as e:\n+    except ImportError:\n         # Reraise the ImportError if it occurred within the imported module.\n         # Determine this by checking whether the trace has a depth > 1.\n         if sys.exc_info()[2].tb_next:\n             raise NoAppException(\n-                f\"While importing {module_name!r}, an ImportError was raised.\"\n-            ) from e\n+                f\"While importing {module_name!r}, an ImportError was\"\n+                f\" raised:\\n\\n{traceback.format_exc()}\"\n+            ) from None\n         elif raise_if_not_found:\n-            raise NoAppException(f\"Could not import {module_name!r}.\") from e\n+            raise NoAppException(f\"Could not import {module_name!r}.\") from None\n         else:\n             return\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#282d8621dd4bdc3ee74e0d67b180e03f5f23899f", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 20 | Lines Deleted: 8 | Files Changed: 1 | Hunks: 3 | Methods Changed: 2 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 28 | Churn Cumulative: 177 | Contributors (this commit): 4 | Commits (past 90d): 1 | Contributors (cumulative): 4 | DMM Complexity: 1.0\n\nDIFF:\n@@ -131,6 +131,13 @@ class SessionInterface:\n         app = Flask(__name__)\n         app.session_interface = MySessionInterface()\n \n+    Multiple requests with the same session may be sent and handled\n+    concurrently. When implementing a new session interface, consider\n+    whether reads or writes to the backing store must be synchronized.\n+    There is no guarantee on the order in which the session for each\n+    request is opened or saved, it will occur in the order that requests\n+    begin and end processing.\n+\n     .. versionadded:: 0.8\n     \"\"\"\n \n@@ -292,20 +299,25 @@ class SessionInterface:\n     def open_session(\n         self, app: \"Flask\", request: \"Request\"\n     ) -> t.Optional[SessionMixin]:\n-        \"\"\"This method has to be implemented and must either return ``None``\n-        in case the loading failed because of a configuration error or an\n-        instance of a session object which implements a dictionary like\n-        interface + the methods and attributes on :class:`SessionMixin`.\n+        \"\"\"This is called at the beginning of each request, after\n+        pushing the request context, before matching the URL.\n+\n+        This must return an object which implements a dictionary-like\n+        interface as well as the :class:`SessionMixin` interface.\n+\n+        This will return ``None`` to indicate that loading failed in\n+        some way that is not immediately an error. The request\n+        context will fall back to using :meth:`make_null_session`\n+        in this case.\n         \"\"\"\n         raise NotImplementedError()\n \n     def save_session(\n         self, app: \"Flask\", session: SessionMixin, response: \"Response\"\n     ) -> None:\n-        \"\"\"This is called for actual sessions returned by :meth:`open_session`\n-        at the end of the request.  This is still called during a request\n-        context so if you absolutely need access to the request you can do\n-        that.\n+        \"\"\"This is called at the end of each request, after generating\n+        a response, before removing the request context. It is skipped\n+        if :meth:`is_null_session` returns ``True``.\n         \"\"\"\n         raise NotImplementedError()\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#47e4bd5059fbe1e7f39b56f52c821ba0b39ded1c", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 2 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 214 | Contributors (this commit): 6 | Commits (past 90d): 1 | Contributors (cumulative): 6 | DMM Complexity: None\n\nDIFF:\n@@ -169,7 +169,7 @@ def copy_current_request_context(f: t.Callable) -> t.Callable:\n \n     def wrapper(*args, **kwargs):\n         with reqctx:\n-            return f(*args, **kwargs)\n+            return reqctx.app.ensure_sync(f)(*args, **kwargs)\n \n     return update_wrapper(wrapper, f)\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#c8ddb948f6af35998f99521627396c0ea7fa62c1", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 20 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 2 | Methods Changed: 3 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 22 | Churn Cumulative: 236 | Contributors (this commit): 6 | Commits (past 90d): 2 | Contributors (cumulative): 6 | DMM Complexity: 1.0\n\nDIFF:\n@@ -332,11 +332,29 @@ class RequestContext:\n         self._after_request_functions: t.List[AfterRequestCallable] = []\n \n     @property\n-    def g(self) -> AppContext:\n+    def g(self) -> _AppCtxGlobals:\n+        import warnings\n+\n+        warnings.warn(\n+            \"Accessing 'g' on the request context is deprecated and\"\n+            \" will be removed in Flask 2.2. Access `g` directly or from\"\n+            \"the application context instead.\",\n+            DeprecationWarning,\n+            stacklevel=2,\n+        )\n         return _app_ctx_stack.top.g\n \n     @g.setter\n-    def g(self, value: AppContext) -> None:\n+    def g(self, value: _AppCtxGlobals) -> None:\n+        import warnings\n+\n+        warnings.warn(\n+            \"Setting 'g' on the request context is deprecated and\"\n+            \" will be removed in Flask 2.2. Set it on the application\"\n+            \" context instead.\",\n+            DeprecationWarning,\n+            stacklevel=2,\n+        )\n         _app_ctx_stack.top.g = value\n \n     def copy(self) -> \"RequestContext\":\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#9d36623db1e9535eae7243a807079a54897efcc9", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 4/4 | Churn Δ: 2 | Churn Cumulative: 1521 | Contributors (this commit): 11 | Commits (past 90d): 4 | Contributors (cumulative): 11 | DMM Complexity: None\n\nDIFF:\n@@ -714,7 +714,7 @@ def get_root_path(import_name: str) -> str:\n     # Module already imported and has a file attribute. Use that first.\n     mod = sys.modules.get(import_name)\n \n-    if mod is not None and hasattr(mod, \"__file__\"):\n+    if mod is not None and hasattr(mod, \"__file__\") and mod.__file__ is not None:\n         return os.path.dirname(os.path.abspath(mod.__file__))\n \n     # Next attempt: check the loader.\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#a841cfabb58d3c1ac1d11b09353f458e759a63c2", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 8 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 3 | Methods Changed: 2 | Complexity Δ (Sum/Max): 11/11 | Churn Δ: 10 | Churn Cumulative: 656 | Contributors (this commit): 6 | Commits (past 90d): 3 | Contributors (cumulative): 6 | DMM Complexity: 0.0\n\nDIFF:\n@@ -81,6 +81,11 @@ def _dump_arg_defaults(\n         if bp is not None and bp.json_encoder is not None:\n             cls = bp.json_encoder\n \n+        # Only set a custom encoder if it has custom behavior. This is\n+        # faster on PyPy.\n+        if cls is not _json.JSONEncoder:\n+            kwargs.setdefault(\"cls\", cls)\n+\n         kwargs.setdefault(\"cls\", cls)\n         kwargs.setdefault(\"ensure_ascii\", app.config[\"JSON_AS_ASCII\"])\n         kwargs.setdefault(\"sort_keys\", app.config[\"JSON_SORT_KEYS\"])\n@@ -102,9 +107,10 @@ def _load_arg_defaults(\n         if bp is not None and bp.json_decoder is not None:\n             cls = bp.json_decoder\n \n+        # Only set a custom decoder if it has custom behavior. This is\n+        # faster on PyPy.\n+        if cls not in {JSONDecoder, _json.JSONDecoder}:\n             kwargs.setdefault(\"cls\", cls)\n-    else:\n-        kwargs.setdefault(\"cls\", JSONDecoder)\n \n \n def dumps(obj: t.Any, app: t.Optional[\"Flask\"] = None, **kwargs: t.Any) -> str:\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#633449a36c959d25577799eb3da76005a803d5cd", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 9 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 10 | Churn Cumulative: 246 | Contributors (this commit): 7 | Commits (past 90d): 3 | Contributors (cumulative): 7 | DMM Complexity: 1.0\n\nDIFF:\n@@ -130,7 +130,15 @@ def after_this_request(f: AfterRequestCallable) -> AfterRequestCallable:\n \n     .. versionadded:: 0.9\n     \"\"\"\n-    _request_ctx_stack.top._after_request_functions.append(f)\n+    top = _request_ctx_stack.top\n+    if top is None:\n+        raise RuntimeError(\n+            \"This decorator can only be used at local scopes \"\n+            \"when a request context is on the stack. For instance within \"\n+            \"view functions.\"\n+        )\n+    top._after_request_functions.append(f)\n+\n     return f\n \n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#b1a00ebc4c6f15055ddf15ecb17243a089f52a60", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 8 | Lines Deleted: 7 | Files Changed: 1 | Hunks: 7 | Methods Changed: 2 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 15 | Churn Cumulative: 261 | Contributors (this commit): 7 | Commits (past 90d): 4 | Contributors (cumulative): 7 | DMM Complexity: 0.0\n\nDIFF:\n@@ -131,14 +131,14 @@ def after_this_request(f: AfterRequestCallable) -> AfterRequestCallable:\n     .. versionadded:: 0.9\n     \"\"\"\n     top = _request_ctx_stack.top\n+\n     if top is None:\n         raise RuntimeError(\n-            \"This decorator can only be used at local scopes \"\n-            \"when a request context is on the stack. For instance within \"\n-            \"view functions.\"\n+            \"This decorator can only be used when a request context is\"\n+            \" active, such as within a view function.\"\n         )\n-    top._after_request_functions.append(f)\n \n+    top._after_request_functions.append(f)\n     return f\n \n \n@@ -167,12 +167,13 @@ def copy_current_request_context(f: t.Callable) -> t.Callable:\n     .. versionadded:: 0.10\n     \"\"\"\n     top = _request_ctx_stack.top\n+\n     if top is None:\n         raise RuntimeError(\n-            \"This decorator can only be used at local scopes \"\n-            \"when a request context is on the stack.  For instance within \"\n-            \"view functions.\"\n+            \"This decorator can only be used when a request context is\"\n+            \" active, such as within a view function.\"\n         )\n+\n     reqctx = top.copy()\n \n     def wrapper(*args, **kwargs):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#aab064fee164aa9f0ee35ba3065b031655888ce5", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 0 | Lines Deleted: 19 | Files Changed: 1 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): -1/0 | Churn Δ: 19 | Churn Cumulative: 242 | Contributors (this commit): 2 | Commits (past 90d): 2 | Contributors (cumulative): 2 | DMM Complexity: 1.0\n\nDIFF:\n@@ -179,8 +179,6 @@ class FlaskClient(Client):\n         follow_redirects: bool = False,\n         **kwargs: t.Any,\n     ) -> \"TestResponse\":\n-        as_tuple = kwargs.pop(\"as_tuple\", None)\n-\n         # Same logic as super.open, but apply environ_base and preserve_context.\n         request = None\n \n@@ -215,23 +213,6 @@ class FlaskClient(Client):\n             finally:\n                 builder.close()\n \n-        if as_tuple is not None:\n-            import warnings\n-\n-            warnings.warn(\n-                \"'as_tuple' is deprecated and will be removed in\"\n-                \" Werkzeug 2.1 and Flask 2.1. Use\"\n-                \" 'response.request.environ' instead.\",\n-                DeprecationWarning,\n-                stacklevel=3,\n-            )\n-            return super().open(\n-                request,\n-                as_tuple=as_tuple,\n-                buffered=buffered,\n-                follow_redirects=follow_redirects,\n-            )\n-        else:\n         return super().open(\n             request,\n             buffered=buffered,\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#751d85f3de3f726446bb12e4ddfae885a6645ba1", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 13 | Lines Deleted: 6 | Files Changed: 2 | Hunks: 5 | Methods Changed: 1 | Complexity Δ (Sum/Max): -10/0 | Churn Δ: 19 | Churn Cumulative: 1462 | Contributors (this commit): 37 | Commits (past 90d): 4 | Contributors (cumulative): 42 | DMM Complexity: 0.0\n\nDIFF:\n@@ -8,6 +8,7 @@ setup(\n         \"Jinja2 >= 3.0\",\n         \"itsdangerous >= 2.0\",\n         \"click >= 8.0\",\n+        \"importlib-metadata; python_version < '3.10'\",\n     ],\n     extras_require={\n         \"async\": [\"asgiref >= 3.2\"],\n\n@@ -28,6 +28,16 @@ try:\n except ImportError:\n     ssl = None  # type: ignore\n \n+if sys.version_info >= (3, 10):\n+    from importlib import metadata\n+else:\n+    # Use a backport on Python < 3.10.\n+    #\n+    # We technically have importlib.metadata on 3.8+,\n+    # but the API changed in 3.10, so use the backport\n+    # for consistency.\n+    import importlib_metadata as metadata  # type: ignore\n+\n \n class NoAppException(click.UsageError):\n     \"\"\"Raised if an application cannot be found or loaded.\"\"\"\n@@ -494,14 +504,10 @@ class FlaskGroup(AppGroup):\n     def _load_plugin_commands(self):\n         if self._loaded_plugin_commands:\n             return\n-        try:\n-            import pkg_resources\n-        except ImportError:\n-            self._loaded_plugin_commands = True\n-            return\n \n-        for ep in pkg_resources.iter_entry_points(\"flask.commands\"):\n+        for ep in metadata.entry_points(group=\"flask.commands\"):\n             self.add_command(ep.load(), ep.name)\n+\n         self._loaded_plugin_commands = True\n \n     def get_command(self, ctx, name):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#9a134da31bafc12d31f75474a4b354c80545b9b5", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 2 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 3 | Churn Cumulative: 76 | Contributors (this commit): 3 | Commits (past 90d): 1 | Contributors (cumulative): 3 | DMM Complexity: 1.0\n\nDIFF:\n@@ -131,7 +131,8 @@ def _render(template: Template, context: dict, app: \"Flask\") -> str:\n \n \n def render_template(\n-    template_name_or_list: t.Union[str, t.List[str]], **context: t.Any\n+    template_name_or_list: t.Union[str, Template, t.List[t.Union[str, Template]]],\n+    **context: t.Any\n ) -> str:\n     \"\"\"Renders a template from the template folder with the given\n     context.\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#426a1e25b77e760b4f54bf94aee3e3617850569f", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 16 | Lines Deleted: 4 | Files Changed: 2 | Hunks: 5 | Methods Changed: 3 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 20 | Churn Cumulative: 5049 | Contributors (this commit): 49 | Commits (past 90d): 3 | Contributors (cumulative): 57 | DMM Complexity: 1.0\n\nDIFF:\n@@ -3,6 +3,7 @@ import re\n import sys\n import time\n import uuid\n+import warnings\n import weakref\n from datetime import datetime\n from platform import python_implementation\n@@ -1527,8 +1528,11 @@ def test_server_name_subdomain():\n     rv = client.get(\"/\", \"https://dev.local\")\n     assert rv.data == b\"default\"\n \n-    # suppress Werkzeug 1.0 warning about name mismatch\n-    with pytest.warns(None):\n+    # suppress Werkzeug 0.15 warning about name mismatch\n+    with warnings.catch_warnings():\n+        warnings.filterwarnings(\n+            \"ignore\", \"Current server name\", UserWarning, \"flask.app\"\n+        )\n         rv = client.get(\"/\", \"http://foo.localhost\")\n         assert rv.status_code == 404\n \n@@ -1895,7 +1899,10 @@ def test_subdomain_matching_other_name(matching):\n         return \"\", 204\n \n     # suppress Werkzeug 0.15 warning about name mismatch\n-    with pytest.warns(None):\n+    with warnings.catch_warnings():\n+        warnings.filterwarnings(\n+            \"ignore\", \"Current server name\", UserWarning, \"flask.app\"\n+        )\n         # ip address can't match name\n         rv = client.get(\"/\", \"http://127.0.0.1:3000/\")\n         assert rv.status_code == 404 if matching else 204\n\n@@ -1,3 +1,5 @@\n+import warnings\n+\n import pytest\n \n import flask\n@@ -81,7 +83,10 @@ def test_proper_test_request_context(app):\n         )\n \n     # suppress Werkzeug 0.15 warning about name mismatch\n-    with pytest.warns(None):\n+    with warnings.catch_warnings():\n+        warnings.filterwarnings(\n+            \"ignore\", \"Current server name\", UserWarning, \"flask.app\"\n+        )\n         with app.test_request_context(\n             \"/\", environ_overrides={\"HTTP_HOST\": \"localhost\"}\n         ):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#1be65b1b699b0512e3b38e3e05d42d083cfd12f1", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 31 | Lines Deleted: 30 | Files Changed: 1 | Hunks: 5 | Methods Changed: 4 | Complexity Δ (Sum/Max): -1/0 | Churn Δ: 61 | Churn Cumulative: 303 | Contributors (this commit): 2 | Commits (past 90d): 3 | Contributors (cumulative): 2 | DMM Complexity: 1.0\n\nDIFF:\n@@ -172,6 +172,22 @@ class FlaskClient(Client):\n             headers = resp.get_wsgi_headers(c.request.environ)\n             self.cookie_jar.extract_wsgi(c.request.environ, headers)\n \n+    def _copy_environ(self, other):\n+        return {\n+            **self.environ_base,\n+            **other,\n+            \"flask._preserve_context\": self.preserve_context,\n+        }\n+\n+    def _request_from_builder_args(self, args, kwargs):\n+        kwargs[\"environ_base\"] = self._copy_environ(kwargs.get(\"environ_base\", {}))\n+        builder = EnvironBuilder(self.application, *args, **kwargs)\n+\n+        try:\n+            return builder.get_request()\n+        finally:\n+            builder.close()\n+\n     def open(\n         self,\n         *args: t.Any,\n@@ -179,39 +195,24 @@ class FlaskClient(Client):\n         follow_redirects: bool = False,\n         **kwargs: t.Any,\n     ) -> \"TestResponse\":\n-        # Same logic as super.open, but apply environ_base and preserve_context.\n-        request = None\n-\n-        def copy_environ(other):\n-            return {\n-                **self.environ_base,\n-                **other,\n-                \"flask._preserve_context\": self.preserve_context,\n-            }\n-\n-        if not kwargs and len(args) == 1:\n-            arg = args[0]\n-\n-            if isinstance(arg, werkzeug.test.EnvironBuilder):\n-                builder = copy(arg)\n-                builder.environ_base = copy_environ(builder.environ_base or {})\n+        if args and isinstance(\n+            args[0], (werkzeug.test.EnvironBuilder, dict, BaseRequest)\n+        ):\n+            if isinstance(args[0], werkzeug.test.EnvironBuilder):\n+                builder = copy(args[0])\n+                builder.environ_base = self._copy_environ(builder.environ_base or {})\n                 request = builder.get_request()\n-            elif isinstance(arg, dict):\n+            elif isinstance(args[0], dict):\n                 request = EnvironBuilder.from_environ(\n-                    arg, app=self.application, environ_base=copy_environ({})\n+                    args[0], app=self.application, environ_base=self._copy_environ({})\n                 ).get_request()\n-            elif isinstance(arg, BaseRequest):\n-                request = copy(arg)\n-                request.environ = copy_environ(request.environ)\n-\n-        if request is None:\n-            kwargs[\"environ_base\"] = copy_environ(kwargs.get(\"environ_base\", {}))\n-            builder = EnvironBuilder(self.application, *args, **kwargs)\n-\n-            try:\n-                request = builder.get_request()\n-            finally:\n-                builder.close()\n+            else:\n+                # isinstance(args[0], BaseRequest)\n+                request = copy(args[0])\n+                request.environ = self._copy_environ(request.environ)\n+        else:\n+            # request is None\n+            request = self._request_from_builder_args(args, kwargs)\n \n         return super().open(\n             request,\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#beae1249f7e580779ae18d2d831f7ec51e5aff98", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 21 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 3 | Methods Changed: 2 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 22 | Churn Cumulative: 598 | Contributors (this commit): 11 | Commits (past 90d): 11 | Contributors (cumulative): 11 | DMM Complexity: 1.0\n\nDIFF:\n@@ -796,9 +796,28 @@ class SeparatedPathType(click.Path):\n         f\" are separated by {os.path.pathsep!r}.\"\n     ),\n )\n+@click.option(\n+    \"--exclude-patterns\",\n+    default=None,\n+    type=SeparatedPathType(),\n+    help=(\n+        \"Files matching these fnmatch patterns will not trigger a reload\"\n+        \" on change. Multiple patterns are separated by\"\n+        f\" {os.path.pathsep!r}.\"\n+    ),\n+)\n @pass_script_info\n def run_command(\n-    info, host, port, reload, debugger, eager_loading, with_threads, cert, extra_files\n+    info,\n+    host,\n+    port,\n+    reload,\n+    debugger,\n+    eager_loading,\n+    with_threads,\n+    cert,\n+    extra_files,\n+    exclude_patterns,\n ):\n     \"\"\"Run a local development server.\n \n@@ -830,6 +849,7 @@ def run_command(\n         threaded=with_threads,\n         ssl_context=cert,\n         extra_files=extra_files,\n+        exclude_patterns=exclude_patterns,\n     )\n \n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#702d973b1f55326526d764e3668900383ad8f4ef", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 239 | Contributors (this commit): 2 | Commits (past 90d): 1 | Contributors (cumulative): 2 | DMM Complexity: None\n\nDIFF:\n@@ -43,4 +43,4 @@ from .signals import template_rendered as template_rendered\n from .templating import render_template as render_template\n from .templating import render_template_string as render_template_string\n \n-__version__ = \"2.0.2\"\n+__version__ = \"2.0.3\"\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#6f79cb8a23467aa01f94f6ad53790f468ba77c76", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 2 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 3 | Churn Cumulative: 1706 | Contributors (this commit): 19 | Commits (past 90d): 1 | Contributors (cumulative): 19 | DMM Complexity: None\n\nDIFF:\n@@ -50,6 +50,7 @@ from .scaffold import find_package\n from .scaffold import Scaffold\n from .scaffold import setupmethod\n from .sessions import SecureCookieSessionInterface\n+from .sessions import SessionInterface\n from .signals import appcontext_tearing_down\n from .signals import got_request_exception\n from .signals import request_finished\n@@ -378,7 +379,7 @@ class Flask(Scaffold):\n     #: :class:`~flask.sessions.SecureCookieSessionInterface` is used here.\n     #:\n     #: .. versionadded:: 0.8\n-    session_interface = SecureCookieSessionInterface()\n+    session_interface: SessionInterface = SecureCookieSessionInterface()\n \n     def __init__(\n         self,\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#aa13521d42bfdb66bb0d89005cbe54a84eaa4fda", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 8 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 3 | Methods Changed: 2 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 8 | Churn Cumulative: 606 | Contributors (this commit): 11 | Commits (past 90d): 2 | Contributors (cumulative): 11 | DMM Complexity: 1.0\n\nDIFF:\n@@ -301,9 +301,17 @@ class DispatchingApp:\n             self._load_in_background()\n \n     def _load_in_background(self):\n+        # Store the Click context and push it in the loader thread so\n+        # script_info is still available.\n+        ctx = click.get_current_context(silent=True)\n+\n         def _load_app():\n             __traceback_hide__ = True  # noqa: F841\n+\n             with self._lock:\n+                if ctx is not None:\n+                    click.globals.push_context(ctx)\n+\n                 try:\n                     self._load_unlocked()\n                 except Exception as e:\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#af34b8c9e7adbf0b060738fee12f04c1e46a98fd", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 13 | Lines Deleted: 8 | Files Changed: 1 | Hunks: 8 | Methods Changed: 10 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 21 | Churn Cumulative: 1520 | Contributors (this commit): 10 | Commits (past 90d): 1 | Contributors (cumulative): 10 | DMM Complexity: 1.0\n\nDIFF:\n@@ -369,48 +369,53 @@ class Scaffold:\n \n         return open(os.path.join(self.root_path, resource), mode)\n \n-    def _method_route(self, method: str, rule: str, options: dict) -> t.Callable:\n+    def _method_route(\n+        self,\n+        method: str,\n+        rule: str,\n+        options: dict,\n+    ) -> t.Callable[[F], F]:\n         if \"methods\" in options:\n             raise TypeError(\"Use the 'route' decorator to use the 'methods' argument.\")\n \n         return self.route(rule, methods=[method], **options)\n \n-    def get(self, rule: str, **options: t.Any) -> t.Callable:\n+    def get(self, rule: str, **options: t.Any) -> t.Callable[[F], F]:\n         \"\"\"Shortcut for :meth:`route` with ``methods=[\"GET\"]``.\n \n         .. versionadded:: 2.0\n         \"\"\"\n         return self._method_route(\"GET\", rule, options)\n \n-    def post(self, rule: str, **options: t.Any) -> t.Callable:\n+    def post(self, rule: str, **options: t.Any) -> t.Callable[[F], F]:\n         \"\"\"Shortcut for :meth:`route` with ``methods=[\"POST\"]``.\n \n         .. versionadded:: 2.0\n         \"\"\"\n         return self._method_route(\"POST\", rule, options)\n \n-    def put(self, rule: str, **options: t.Any) -> t.Callable:\n+    def put(self, rule: str, **options: t.Any) -> t.Callable[[F], F]:\n         \"\"\"Shortcut for :meth:`route` with ``methods=[\"PUT\"]``.\n \n         .. versionadded:: 2.0\n         \"\"\"\n         return self._method_route(\"PUT\", rule, options)\n \n-    def delete(self, rule: str, **options: t.Any) -> t.Callable:\n+    def delete(self, rule: str, **options: t.Any) -> t.Callable[[F], F]:\n         \"\"\"Shortcut for :meth:`route` with ``methods=[\"DELETE\"]``.\n \n         .. versionadded:: 2.0\n         \"\"\"\n         return self._method_route(\"DELETE\", rule, options)\n \n-    def patch(self, rule: str, **options: t.Any) -> t.Callable:\n+    def patch(self, rule: str, **options: t.Any) -> t.Callable[[F], F]:\n         \"\"\"Shortcut for :meth:`route` with ``methods=[\"PATCH\"]``.\n \n         .. versionadded:: 2.0\n         \"\"\"\n         return self._method_route(\"PATCH\", rule, options)\n \n-    def route(self, rule: str, **options: t.Any) -> t.Callable:\n+    def route(self, rule: str, **options: t.Any) -> t.Callable[[F], F]:\n         \"\"\"Decorate a view function to register it with the given URL\n         rule and options. Calls :meth:`add_url_rule`, which has more\n         details about the implementation.\n@@ -434,7 +439,7 @@ class Scaffold:\n             :class:`~werkzeug.routing.Rule` object.\n         \"\"\"\n \n-        def decorator(f: t.Callable) -> t.Callable:\n+        def decorator(f: F) -> F:\n             endpoint = options.pop(\"endpoint\", None)\n             self.add_url_rule(rule, endpoint, f, **options)\n             return f\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#b707bf443afe856b77e09b7a41592f10d46e02df", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 7 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 3 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 9 | Churn Cumulative: 186 | Contributors (this commit): 5 | Commits (past 90d): 1 | Contributors (cumulative): 5 | DMM Complexity: 1.0\n\nDIFF:\n@@ -383,13 +383,19 @@ class SecureCookieSessionInterface(SessionInterface):\n         path = self.get_cookie_path(app)\n         secure = self.get_cookie_secure(app)\n         samesite = self.get_cookie_samesite(app)\n+        httponly = self.get_cookie_httponly(app)\n \n         # If the session is modified to be empty, remove the cookie.\n         # If the session is empty, return without setting the cookie.\n         if not session:\n             if session.modified:\n                 response.delete_cookie(\n-                    name, domain=domain, path=path, secure=secure, samesite=samesite\n+                    name,\n+                    domain=domain,\n+                    path=path,\n+                    secure=secure,\n+                    samesite=samesite,\n+                    httponly=httponly,\n                 )\n \n             return\n@@ -401,7 +407,6 @@ class SecureCookieSessionInterface(SessionInterface):\n         if not self.should_set_cookie(app, session):\n             return\n \n-        httponly = self.get_cookie_httponly(app)\n         expires = self.get_expiration_time(app, session)\n         val = self.get_signing_serializer(app).dumps(dict(session))  # type: ignore\n         response.set_cookie(\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
