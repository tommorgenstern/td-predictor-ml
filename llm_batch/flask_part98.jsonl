{"custom_id": "flask#aa6dd09c2cab5eb15a45d73b5ade24b7b4131c5a", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 14 | Lines Deleted: 8 | Files Changed: 2 | Hunks: 6 | Methods Changed: 6 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 22 | Churn Cumulative: 2084 | Contributors (this commit): 33 | Commits (past 90d): 8 | Contributors (cumulative): 37 | DMM Complexity: 1.0\n\nDIFF:\n@@ -312,7 +312,7 @@ class DispatchingApp:\n         self.loader = loader\n         self._app = None\n         self._lock = Lock()\n-        self._bg_loading_exc_info = None\n+        self._bg_loading_exc = None\n \n         if use_eager_loading is None:\n             use_eager_loading = os.environ.get(\"WERKZEUG_RUN_MAIN\") != \"true\"\n@@ -328,23 +328,24 @@ class DispatchingApp:\n             with self._lock:\n                 try:\n                     self._load_unlocked()\n-                except Exception:\n-                    self._bg_loading_exc_info = sys.exc_info()\n+                except Exception as e:\n+                    self._bg_loading_exc = e\n \n         t = Thread(target=_load_app, args=())\n         t.start()\n \n     def _flush_bg_loading_exception(self):\n         __traceback_hide__ = True  # noqa: F841\n-        exc_info = self._bg_loading_exc_info\n-        if exc_info is not None:\n-            self._bg_loading_exc_info = None\n-            raise exc_info\n+        exc = self._bg_loading_exc\n+\n+        if exc is not None:\n+            self._bg_loading_exc = None\n+            raise exc\n \n     def _load_unlocked(self):\n         __traceback_hide__ = True  # noqa: F841\n         self._app = rv = self.loader()\n-        self._bg_loading_exc_info = None\n+        self._bg_loading_exc = None\n         return rv\n \n     def __call__(self, environ, start_response):\n\n@@ -17,6 +17,7 @@ from flask import Blueprint\n from flask import current_app\n from flask import Flask\n from flask.cli import AppGroup\n+from flask.cli import DispatchingApp\n from flask.cli import dotenv\n from flask.cli import find_best_app\n from flask.cli import FlaskGroup\n@@ -659,3 +660,7 @@ def test_click_7_deprecated():\n             pytest.deprecated_call(cli_main, match=\".* Click 7 is deprecated\")\n         else:\n             cli_main()\n+\n+\n+def test_load_in_background():\n+    pytest.raises(Exception, DispatchingApp, \"appname123\")\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#2305b056c3a3161c92ea61e6fceb67262766bc40", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 17 | Lines Deleted: 4 | Files Changed: 1 | Hunks: 2 | Methods Changed: 3 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 21 | Churn Cumulative: 1663 | Contributors (this commit): 30 | Commits (past 90d): 3 | Contributors (cumulative): 30 | DMM Complexity: 1.0\n\nDIFF:\n@@ -311,6 +311,23 @@ def test_scriptinfo(test_apps, monkeypatch):\n     assert app.name == \"testapp\"\n \n \n+def test_lazy_load_error(monkeypatch):\n+    \"\"\"When using lazy loading, the correct exception should be\n+    re-raised.\n+    \"\"\"\n+\n+    class BadExc(Exception):\n+        pass\n+\n+    def bad_load():\n+        raise BadExc\n+\n+    lazy = DispatchingApp(bad_load, use_eager_loading=False)\n+\n+    with pytest.raises(BadExc):\n+        lazy._flush_bg_loading_exception()\n+\n+\n def test_with_appcontext(runner):\n     @click.command()\n     @with_appcontext\n@@ -660,7 +677,3 @@ def test_click_7_deprecated():\n             pytest.deprecated_call(cli_main, match=\".* Click 7 is deprecated\")\n         else:\n             cli_main()\n-\n-\n-def test_load_in_background():\n-    pytest.raises(Exception, DispatchingApp, \"appname123\")\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#9f0da9b770abfe3376ca0bbb09c535b42071feeb", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 15 | Lines Deleted: 3 | Files Changed: 2 | Hunks: 3 | Methods Changed: 3 | Complexity Δ (Sum/Max): 2/1 | Churn Δ: 18 | Churn Cumulative: 2123 | Contributors (this commit): 34 | Commits (past 90d): 11 | Contributors (cumulative): 39 | DMM Complexity: 0.8888888888888888\n\nDIFF:\n@@ -103,10 +103,13 @@ def call_factory(script_info, app_factory, args=None, kwargs=None):\n         )\n         kwargs[\"script_info\"] = script_info\n \n+    if not args and len(sig.parameters) == 1:\n+        first_parameter = next(iter(sig.parameters.values()))\n+\n         if (\n-        not args\n-        and len(sig.parameters) == 1\n-        and next(iter(sig.parameters.values())).default is inspect.Parameter.empty\n+            first_parameter.default is inspect.Parameter.empty\n+            # **kwargs is reported as an empty default, ignore it\n+            and first_parameter.kind is not inspect.Parameter.VAR_KEYWORD\n         ):\n             warnings.warn(\n                 \"Script info is deprecated and will not be passed as the\"\n\n@@ -74,6 +74,15 @@ def test_find_best_app(test_apps):\n     assert isinstance(app, Flask)\n     assert app.name == \"appname\"\n \n+    class Module:\n+        @staticmethod\n+        def create_app(**kwargs):\n+            return Flask(\"appname\")\n+\n+    app = find_best_app(script_info, Module)\n+    assert isinstance(app, Flask)\n+    assert app.name == \"appname\"\n+\n     class Module:\n         @staticmethod\n         def create_app(foo):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#aa1d34dc51fc63dabc46f388822ba73b15d3ef97", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 4 | Lines Deleted: 4 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 8 | Churn Cumulative: 1497 | Contributors (this commit): 9 | Commits (past 90d): 1 | Contributors (cumulative): 9 | DMM Complexity: None\n\nDIFF:\n@@ -589,10 +589,10 @@ class Scaffold:\n         stack of active contexts.  This becomes relevant if you are using\n         such constructs in tests.\n \n-        Teardown functions must avoid raising exceptions, since they . If they\n-        execute code that might fail they\n-        will have to surround the execution of these code by try/except\n-        statements and log occurring errors.\n+        Teardown functions must avoid raising exceptions. If\n+        they execute code that might fail they\n+        will have to surround the execution of that code with try/except\n+        statements and log any errors.\n \n         When a teardown function was called because of an exception it will\n         be passed an error object.\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#6a4bf9eec13e035cf10ecc16e462049b4c967e41", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 21 | Lines Deleted: 20 | Files Changed: 5 | Hunks: 19 | Methods Changed: 10 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 41 | Churn Cumulative: 3672 | Contributors (this commit): 22 | Commits (past 90d): 7 | Contributors (cumulative): 38 | DMM Complexity: 0.0\n\nDIFF:\n@@ -1621,7 +1621,7 @@ class Flask(Scaffold):\n         except ImportError:\n             raise RuntimeError(\n                 \"Install Flask with the 'async' extra in order to use async views.\"\n-            )\n+            ) from None\n \n         # Check that Werkzeug isn't using its fallback ContextVar class.\n         if ContextVar.__module__ == \"werkzeug.local\":\n@@ -1727,7 +1727,7 @@ class Flask(Scaffold):\n                         \" response. The return type must be a string,\"\n                         \" dict, tuple, Response instance, or WSGI\"\n                         f\" callable, but it was a {type(rv).__name__}.\"\n-                    ).with_traceback(sys.exc_info()[2])\n+                    ).with_traceback(sys.exc_info()[2]) from None\n             else:\n                 raise TypeError(\n                     \"The view function did not return a valid\"\n\n@@ -69,15 +69,16 @@ def find_best_app(script_info, module):\n \n                 if isinstance(app, Flask):\n                     return app\n-            except TypeError:\n+            except TypeError as e:\n                 if not _called_with_wrong_args(app_factory):\n                     raise\n+\n                 raise NoAppException(\n                     f\"Detected factory {attr_name!r} in module {module.__name__!r},\"\n                     \" but could not call it without arguments. Use\"\n                     f\" \\\"FLASK_APP='{module.__name__}:{attr_name}(args)'\\\"\"\n                     \" to specify arguments.\"\n-                )\n+                ) from e\n \n     raise NoAppException(\n         \"Failed to find Flask application or factory in module\"\n@@ -161,7 +162,7 @@ def find_app_by_string(script_info, module, app_name):\n     except SyntaxError:\n         raise NoAppException(\n             f\"Failed to parse {app_name!r} as an attribute name or function call.\"\n-        )\n+        ) from None\n \n     if isinstance(expr, ast.Name):\n         name = expr.id\n@@ -184,7 +185,7 @@ def find_app_by_string(script_info, module, app_name):\n             # message with the full expression instead.\n             raise NoAppException(\n                 f\"Failed to parse arguments as literal values: {app_name!r}.\"\n-            )\n+            ) from None\n     else:\n         raise NoAppException(\n             f\"Failed to parse {app_name!r} as an attribute name or function call.\"\n@@ -192,17 +193,17 @@ def find_app_by_string(script_info, module, app_name):\n \n     try:\n         attr = getattr(module, name)\n-    except AttributeError:\n+    except AttributeError as e:\n         raise NoAppException(\n             f\"Failed to find attribute {name!r} in {module.__name__!r}.\"\n-        )\n+        ) from e\n \n     # If the attribute is a function, call it with any args and kwargs\n     # to get the real application.\n     if inspect.isfunction(attr):\n         try:\n             app = call_factory(script_info, attr, args, kwargs)\n-        except TypeError:\n+        except TypeError as e:\n             if not _called_with_wrong_args(attr):\n                 raise\n \n@@ -210,7 +211,7 @@ def find_app_by_string(script_info, module, app_name):\n                 f\"The factory {app_name!r} in module\"\n                 f\" {module.__name__!r} could not be called with the\"\n                 \" specified arguments.\"\n-            )\n+            ) from e\n     else:\n         app = attr\n \n@@ -257,16 +258,15 @@ def locate_app(script_info, module_name, app_name, raise_if_not_found=True):\n \n     try:\n         __import__(module_name)\n-    except ImportError:\n+    except ImportError as e:\n         # Reraise the ImportError if it occurred within the imported module.\n         # Determine this by checking whether the trace has a depth > 1.\n         if sys.exc_info()[2].tb_next:\n             raise NoAppException(\n-                f\"While importing {module_name!r}, an ImportError was\"\n-                f\" raised:\\n\\n{traceback.format_exc()}\"\n-            )\n+                f\"While importing {module_name!r}, an ImportError was raised.\"\n+            ) from e\n         elif raise_if_not_found:\n-            raise NoAppException(f\"Could not import {module_name!r}.\")\n+            raise NoAppException(f\"Could not import {module_name!r}.\") from e\n         else:\n             return\n \n@@ -725,7 +725,7 @@ class CertParamType(click.ParamType):\n                         \"Using ad-hoc certificates requires the cryptography library.\",\n                         ctx,\n                         param,\n-                    )\n+                    ) from None\n \n                 return value\n \n\n@@ -83,10 +83,11 @@ def attach_enctype_error_multidict(request):\n         def __getitem__(self, key):\n             try:\n                 return oldcls.__getitem__(self, key)\n-            except KeyError:\n+            except KeyError as e:\n                 if key not in request.form:\n                     raise\n-                raise DebugFilesKeyError(request, key)\n+\n+                raise DebugFilesKeyError(request, key) from e\n \n     newcls.__name__ = oldcls.__name__\n     newcls.__module__ = oldcls.__module__\n\n@@ -715,7 +715,7 @@ class Scaffold:\n                 f\"'{code_or_exception}' is not a recognized HTTP error\"\n                 \" code. Use a subclass of HTTPException with that code\"\n                 \" instead.\"\n-            )\n+            ) from None\n \n         self.error_handler_spec[None][code][exc_class] = t.cast(\n             \"ErrorHandlerCallable[Exception]\", f\n\n@@ -29,7 +29,7 @@ except ImportError:\n             raise RuntimeError(\n                 \"Signalling support is unavailable because the blinker\"\n                 \" library is not installed.\"\n-            )\n+            ) from None\n \n         connect = connect_via = connected_to = temporarily_connected_to = _fail\n         disconnect = _fail\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#22933a8cb424ffd65f2bec5bbfdbfa7e42105470", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 3 | Churn Cumulative: 1554 | Contributors (this commit): 17 | Commits (past 90d): 3 | Contributors (cumulative): 17 | DMM Complexity: None\n\nDIFF:\n@@ -366,7 +366,8 @@ class Flask(Scaffold):\n     #: .. versionadded:: 1.1.0\n     url_map_class = Map\n \n-    #: the test client that is used with when `test_client` is used.\n+    #: The :meth:`test_client` method creates an instance of this test\n+    #: client class. Defaults to :class:`~flask.testing.FlaskClient`.\n     #:\n     #: .. versionadded:: 0.7\n     test_client_class: t.Optional[t.Type[\"FlaskClient\"]] = None\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#166a2a6207027bff07fdfc5590ce04f9b37e9e8f", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 102 | Lines Deleted: 26 | Files Changed: 2 | Hunks: 8 | Methods Changed: 23 | Complexity Δ (Sum/Max): 18/18 | Churn Δ: 128 | Churn Cumulative: 3494 | Contributors (this commit): 28 | Commits (past 90d): 23 | Contributors (cumulative): 32 | DMM Complexity: 1.0\n\nDIFF:\n@@ -745,12 +745,12 @@ class Flask(Scaffold):\n         :param context: the context as a dictionary that is updated in place\n                         to add extra variables.\n         \"\"\"\n-        funcs: t.Iterable[\n-            TemplateContextProcessorCallable\n-        ] = self.template_context_processors[None]\n+        funcs: t.Iterable[TemplateContextProcessorCallable] = []\n+        if None in self.template_context_processors:\n+            funcs = chain(funcs, self.template_context_processors[None])\n         reqctx = _request_ctx_stack.top\n         if reqctx is not None:\n-            for bp in request.blueprints:\n+            for bp in reversed(request.blueprints):\n                 if bp in self.template_context_processors:\n                     funcs = chain(funcs, self.template_context_processors[bp])\n         orig_ctx = context.copy()\n@@ -1806,7 +1806,9 @@ class Flask(Scaffold):\n             # This is called by url_for, which can be called outside a\n             # request, can't use request.blueprints.\n             bps = _split_blueprint_path(endpoint.rpartition(\".\")[0])\n-            bp_funcs = chain.from_iterable(self.url_default_functions[bp] for bp in bps)\n+            bp_funcs = chain.from_iterable(\n+                self.url_default_functions[bp] for bp in reversed(bps)\n+            )\n             funcs = chain(funcs, bp_funcs)\n \n         for func in funcs:\n@@ -1846,19 +1848,17 @@ class Flask(Scaffold):\n         further request handling is stopped.\n         \"\"\"\n \n-        funcs: t.Iterable[URLValuePreprocessorCallable] = self.url_value_preprocessors[\n-            None\n-        ]\n-        for bp in request.blueprints:\n-            if bp in self.url_value_preprocessors:\n-                funcs = chain(funcs, self.url_value_preprocessors[bp])\n+        funcs: t.Iterable[URLValuePreprocessorCallable] = []\n+        for name in chain([None], reversed(request.blueprints)):\n+            if name in self.url_value_preprocessors:\n+                funcs = chain(funcs, self.url_value_preprocessors[name])\n         for func in funcs:\n             func(request.endpoint, request.view_args)\n \n-        funcs: t.Iterable[BeforeRequestCallable] = self.before_request_funcs[None]\n-        for bp in request.blueprints:\n-            if bp in self.before_request_funcs:\n-                funcs = chain(funcs, self.before_request_funcs[bp])\n+        funcs: t.Iterable[BeforeRequestCallable] = []\n+        for name in chain([None], reversed(request.blueprints)):\n+            if name in self.before_request_funcs:\n+                funcs = chain(funcs, self.before_request_funcs[name])\n         for func in funcs:\n             rv = self.ensure_sync(func)()\n             if rv is not None:\n@@ -1881,11 +1881,9 @@ class Flask(Scaffold):\n         \"\"\"\n         ctx = _request_ctx_stack.top\n         funcs: t.Iterable[AfterRequestCallable] = ctx._after_request_functions\n-        for bp in request.blueprints:\n-            if bp in self.after_request_funcs:\n-                funcs = chain(funcs, reversed(self.after_request_funcs[bp]))\n-        if None in self.after_request_funcs:\n-            funcs = chain(funcs, reversed(self.after_request_funcs[None]))\n+        for name in chain(request.blueprints, [None]):\n+            if name in self.after_request_funcs:\n+                funcs = chain(funcs, reversed(self.after_request_funcs[name]))\n         for handler in funcs:\n             response = self.ensure_sync(handler)(response)\n         if not self.session_interface.is_null_session(ctx.session):\n@@ -1917,12 +1915,10 @@ class Flask(Scaffold):\n         \"\"\"\n         if exc is _sentinel:\n             exc = sys.exc_info()[1]\n-        funcs: t.Iterable[TeardownCallable] = reversed(\n-            self.teardown_request_funcs[None]\n-        )\n-        for bp in request.blueprints:\n-            if bp in self.teardown_request_funcs:\n-                funcs = chain(funcs, reversed(self.teardown_request_funcs[bp]))\n+        funcs: t.Iterable[TeardownCallable] = []\n+        for name in chain(request.blueprints, [None]):\n+            if name in self.teardown_request_funcs:\n+                funcs = chain(funcs, reversed(self.teardown_request_funcs[name]))\n         for func in funcs:\n             self.ensure_sync(func)(exc)\n         request_tearing_down.send(self, exc=exc)\n\n@@ -837,6 +837,86 @@ def test_nested_blueprint(app, client):\n     assert client.get(\"/parent/child/grandchild/no\").data == b\"Grandchild no\"\n \n \n+def test_nested_callback_order(app, client):\n+    parent = flask.Blueprint(\"parent\", __name__)\n+    child = flask.Blueprint(\"child\", __name__)\n+\n+    @app.before_request\n+    def app_before1():\n+        flask.g.setdefault(\"seen\", []).append(\"app_1\")\n+\n+    @app.teardown_request\n+    def app_teardown1(e=None):\n+        assert flask.g.seen.pop() == \"app_1\"\n+\n+    @app.before_request\n+    def app_before2():\n+        flask.g.setdefault(\"seen\", []).append(\"app_2\")\n+\n+    @app.teardown_request\n+    def app_teardown2(e=None):\n+        assert flask.g.seen.pop() == \"app_2\"\n+\n+    @app.context_processor\n+    def app_ctx():\n+        return dict(key=\"app\")\n+\n+    @parent.before_request\n+    def parent_before1():\n+        flask.g.setdefault(\"seen\", []).append(\"parent_1\")\n+\n+    @parent.teardown_request\n+    def parent_teardown1(e=None):\n+        assert flask.g.seen.pop() == \"parent_1\"\n+\n+    @parent.before_request\n+    def parent_before2():\n+        flask.g.setdefault(\"seen\", []).append(\"parent_2\")\n+\n+    @parent.teardown_request\n+    def parent_teardown2(e=None):\n+        assert flask.g.seen.pop() == \"parent_2\"\n+\n+    @parent.context_processor\n+    def parent_ctx():\n+        return dict(key=\"parent\")\n+\n+    @child.before_request\n+    def child_before1():\n+        flask.g.setdefault(\"seen\", []).append(\"child_1\")\n+\n+    @child.teardown_request\n+    def child_teardown1(e=None):\n+        assert flask.g.seen.pop() == \"child_1\"\n+\n+    @child.before_request\n+    def child_before2():\n+        flask.g.setdefault(\"seen\", []).append(\"child_2\")\n+\n+    @child.teardown_request\n+    def child_teardown2(e=None):\n+        assert flask.g.seen.pop() == \"child_2\"\n+\n+    @child.context_processor\n+    def child_ctx():\n+        return dict(key=\"child\")\n+\n+    @child.route(\"/a\")\n+    def a():\n+        return \", \".join(flask.g.seen)\n+\n+    @child.route(\"/b\")\n+    def b():\n+        return flask.render_template_string(\"{{ key }}\")\n+\n+    parent.register_blueprint(child)\n+    app.register_blueprint(parent)\n+    assert (\n+        client.get(\"/a\").data == b\"app_1, app_2, parent_1, parent_2, child_1, child_2\"\n+    )\n+    assert client.get(\"/b\").data == b\"child\"\n+\n+\n @pytest.mark.parametrize(\n     \"parent_init, child_init, parent_registration, child_registration\",\n     [\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#3f6cdbd8b35f2b887dddbdac5ef6461833b6dd3b", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 47 | Lines Deleted: 46 | Files Changed: 1 | Hunks: 27 | Methods Changed: 7 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 93 | Churn Cumulative: 1695 | Contributors (this commit): 18 | Commits (past 90d): 5 | Contributors (cumulative): 18 | DMM Complexity: 0.2857142857142857\n\nDIFF:\n@@ -58,17 +58,12 @@ from .signals import request_started\n from .signals import request_tearing_down\n from .templating import DispatchingJinjaLoader\n from .templating import Environment\n-from .typing import AfterRequestCallable\n from .typing import BeforeFirstRequestCallable\n-from .typing import BeforeRequestCallable\n from .typing import ResponseReturnValue\n from .typing import TeardownCallable\n-from .typing import TemplateContextProcessorCallable\n from .typing import TemplateFilterCallable\n from .typing import TemplateGlobalCallable\n from .typing import TemplateTestCallable\n-from .typing import URLDefaultCallable\n-from .typing import URLValuePreprocessorCallable\n from .wrappers import Request\n from .wrappers import Response\n \n@@ -745,20 +740,21 @@ class Flask(Scaffold):\n         :param context: the context as a dictionary that is updated in place\n                         to add extra variables.\n         \"\"\"\n-        funcs: t.Iterable[TemplateContextProcessorCallable] = []\n-        if None in self.template_context_processors:\n-            funcs = chain(funcs, self.template_context_processors[None])\n-        reqctx = _request_ctx_stack.top\n-        if reqctx is not None:\n-            for bp in reversed(request.blueprints):\n-                if bp in self.template_context_processors:\n-                    funcs = chain(funcs, self.template_context_processors[bp])\n+        names: t.Iterable[t.Optional[str]] = (None,)\n+\n+        # A template may be rendered outside a request context.\n+        if request:\n+            names = chain(names, reversed(request.blueprints))\n+\n+        # The values passed to render_template take precedence. Keep a\n+        # copy to re-apply after all context functions.\n         orig_ctx = context.copy()\n-        for func in funcs:\n+\n+        for name in names:\n+            if name in self.template_context_processors:\n+                for func in self.template_context_processors[name]:\n                     context.update(func())\n-        # make sure the original values win.  This makes it possible to\n-        # easier add new variables in context processors without breaking\n-        # existing views.\n+\n         context.update(orig_ctx)\n \n     def make_shell_context(self) -> dict:\n@@ -1278,9 +1274,10 @@ class Flask(Scaffold):\n         class, or ``None`` if a suitable handler is not found.\n         \"\"\"\n         exc_class, code = self._get_exc_class_and_code(type(e))\n+        names = (*request.blueprints, None)\n \n-        for c in [code, None] if code is not None else [None]:\n-            for name in chain(request.blueprints, [None]):\n+        for c in (code, None) if code is not None else (None,):\n+            for name in names:\n                 handler_map = self.error_handler_spec[name][c]\n \n                 if not handler_map:\n@@ -1800,18 +1797,18 @@ class Flask(Scaffold):\n \n         .. versionadded:: 0.7\n         \"\"\"\n-        funcs: t.Iterable[URLDefaultCallable] = self.url_default_functions[None]\n+        names: t.Iterable[t.Optional[str]] = (None,)\n \n+        # url_for may be called outside a request context, parse the\n+        # passed endpoint instead of using request.blueprints.\n         if \".\" in endpoint:\n-            # This is called by url_for, which can be called outside a\n-            # request, can't use request.blueprints.\n-            bps = _split_blueprint_path(endpoint.rpartition(\".\")[0])\n-            bp_funcs = chain.from_iterable(\n-                self.url_default_functions[bp] for bp in reversed(bps)\n+            names = chain(\n+                names, reversed(_split_blueprint_path(endpoint.rpartition(\".\")[0]))\n             )\n-            funcs = chain(funcs, bp_funcs)\n \n-        for func in funcs:\n+        for name in names:\n+            if name in self.url_default_functions:\n+                for func in self.url_default_functions[name]:\n                     func(endpoint, values)\n \n     def handle_url_build_error(\n@@ -1847,20 +1844,18 @@ class Flask(Scaffold):\n         value is handled as if it was the return value from the view, and\n         further request handling is stopped.\n         \"\"\"\n+        names = (None, *reversed(request.blueprints))\n \n-        funcs: t.Iterable[URLValuePreprocessorCallable] = []\n-        for name in chain([None], reversed(request.blueprints)):\n+        for name in names:\n             if name in self.url_value_preprocessors:\n-                funcs = chain(funcs, self.url_value_preprocessors[name])\n-        for func in funcs:\n-            func(request.endpoint, request.view_args)\n+                for url_func in self.url_value_preprocessors[name]:\n+                    url_func(request.endpoint, request.view_args)\n \n-        funcs: t.Iterable[BeforeRequestCallable] = []\n-        for name in chain([None], reversed(request.blueprints)):\n+        for name in names:\n             if name in self.before_request_funcs:\n-                funcs = chain(funcs, self.before_request_funcs[name])\n-        for func in funcs:\n-            rv = self.ensure_sync(func)()\n+                for before_func in self.before_request_funcs[name]:\n+                    rv = self.ensure_sync(before_func)()\n+\n                     if rv is not None:\n                         return rv\n \n@@ -1880,14 +1875,18 @@ class Flask(Scaffold):\n                  instance of :attr:`response_class`.\n         \"\"\"\n         ctx = _request_ctx_stack.top\n-        funcs: t.Iterable[AfterRequestCallable] = ctx._after_request_functions\n-        for name in chain(request.blueprints, [None]):\n+\n+        for func in ctx._after_request_functions:\n+            response = self.ensure_sync(func)(response)\n+\n+        for name in chain(request.blueprints, (None,)):\n             if name in self.after_request_funcs:\n-                funcs = chain(funcs, reversed(self.after_request_funcs[name]))\n-        for handler in funcs:\n-            response = self.ensure_sync(handler)(response)\n+                for func in reversed(self.after_request_funcs[name]):\n+                    response = self.ensure_sync(func)(response)\n+\n         if not self.session_interface.is_null_session(ctx.session):\n             self.session_interface.save_session(self, ctx.session, response)\n+\n         return response\n \n     def do_teardown_request(\n@@ -1915,12 +1914,12 @@ class Flask(Scaffold):\n         \"\"\"\n         if exc is _sentinel:\n             exc = sys.exc_info()[1]\n-        funcs: t.Iterable[TeardownCallable] = []\n-        for name in chain(request.blueprints, [None]):\n+\n+        for name in chain(request.blueprints, (None,)):\n             if name in self.teardown_request_funcs:\n-                funcs = chain(funcs, reversed(self.teardown_request_funcs[name]))\n-        for func in funcs:\n+                for func in reversed(self.teardown_request_funcs[name]):\n                     self.ensure_sync(func)(exc)\n+\n         request_tearing_down.send(self, exc=exc)\n \n     def do_teardown_appcontext(\n@@ -1942,8 +1941,10 @@ class Flask(Scaffold):\n         \"\"\"\n         if exc is _sentinel:\n             exc = sys.exc_info()[1]\n+\n         for func in reversed(self.teardown_appcontext_funcs):\n             self.ensure_sync(func)(exc)\n+\n         appcontext_tearing_down.send(self, exc=exc)\n \n     def app_context(self) -> AppContext:\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#174fe4453a1a52069d31c9ff4e24f3ef4aa6913e", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 236 | Contributors (this commit): 2 | Commits (past 90d): 1 | Contributors (cumulative): 2 | DMM Complexity: None\n\nDIFF:\n@@ -43,4 +43,4 @@ from .signals import template_rendered as template_rendered\n from .templating import render_template as render_template\n from .templating import render_template_string as render_template_string\n \n-__version__ = \"2.0.2.dev0\"\n+__version__ = \"2.0.2\"\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#6d65595a3c0a02d098c36f7d337e053e07975316", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 1674 | Contributors (this commit): 31 | Commits (past 90d): 2 | Contributors (cumulative): 31 | DMM Complexity: 1.0\n\nDIFF:\n@@ -334,6 +334,8 @@ def test_lazy_load_error(monkeypatch):\n     lazy = DispatchingApp(bad_load, use_eager_loading=False)\n \n     with pytest.raises(BadExc):\n+        # reduce flakiness by waiting for the internal loading lock\n+        with lazy._lock:\n             lazy._flush_bg_loading_exception()\n \n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#b2b60450f7b9fae08bbd22f771f7b973aee6a135", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 2 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 1676 | Contributors (this commit): 31 | Commits (past 90d): 3 | Contributors (cumulative): 31 | DMM Complexity: None\n\nDIFF:\n@@ -1,6 +1,7 @@\n # This file was part of Flask-CLI and was modified under the terms of\n # its Revised BSD License. Copyright © 2015 CERN.\n import os\n+import platform\n import ssl\n import sys\n import types\n@@ -320,6 +321,7 @@ def test_scriptinfo(test_apps, monkeypatch):\n     assert app.name == \"testapp\"\n \n \n+@pytest.mark.xfail(platform.python_implementation() == \"PyPy\", reason=\"flaky on pypy\")\n def test_lazy_load_error(monkeypatch):\n     \"\"\"When using lazy loading, the correct exception should be\n     re-raised.\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#e609dddd604bd8c808145973d91dcb8bb56a9906", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 19 | Files Changed: 3 | Hunks: 9 | Methods Changed: 1 | Complexity Δ (Sum/Max): 3/4 | Churn Δ: 20 | Churn Cumulative: 5287 | Contributors (this commit): 48 | Commits (past 90d): 3 | Contributors (cumulative): 53 | DMM Complexity: 0.0\n\nDIFF:\n@@ -1,3 +1,4 @@\n+import dataclasses\n import decimal\n import io\n import json as _json\n@@ -16,12 +17,6 @@ if t.TYPE_CHECKING:\n     from ..app import Flask\n     from ..wrappers import Response\n \n-try:\n-    import dataclasses\n-except ImportError:\n-    # Python < 3.7\n-    dataclasses = None  # type: ignore\n-\n \n class JSONEncoder(_json.JSONEncoder):\n     \"\"\"The default JSON encoder. Handles extra types compared to the\n\n@@ -1,5 +1,4 @@\n import asyncio\n-import sys\n \n import pytest\n \n@@ -79,7 +78,6 @@ def _async_app():\n     return app\n \n \n-@pytest.mark.skipif(sys.version_info < (3, 7), reason=\"requires Python >= 3.7\")\n @pytest.mark.parametrize(\"path\", [\"/\", \"/home\", \"/bp/\", \"/view\", \"/methodview\"])\n def test_async_route(path, async_app):\n     test_client = async_app.test_client()\n@@ -89,7 +87,6 @@ def test_async_route(path, async_app):\n     assert b\"POST\" in response.get_data()\n \n \n-@pytest.mark.skipif(sys.version_info < (3, 7), reason=\"requires Python >= 3.7\")\n @pytest.mark.parametrize(\"path\", [\"/error\", \"/bp/error\"])\n def test_async_error_handler(path, async_app):\n     test_client = async_app.test_client()\n@@ -97,7 +94,6 @@ def test_async_error_handler(path, async_app):\n     assert response.status_code == 412\n \n \n-@pytest.mark.skipif(sys.version_info < (3, 7), reason=\"requires Python >= 3.7\")\n def test_async_before_after_request():\n     app_first_called = False\n     app_before_called = False\n@@ -154,10 +150,3 @@ def test_async_before_after_request():\n     test_client.get(\"/bp/\")\n     assert bp_before_called\n     assert bp_after_called\n-\n-\n-@pytest.mark.skipif(sys.version_info >= (3, 7), reason=\"should only raise Python < 3.7\")\n-def test_async_runtime_error():\n-    app = Flask(__name__)\n-    with pytest.raises(RuntimeError):\n-        app.async_to_sync(None)\n\n@@ -1,6 +1,5 @@\n import gc\n import re\n-import sys\n import time\n import uuid\n import weakref\n@@ -1323,7 +1322,6 @@ def test_jsonify_mimetype(app, req_ctx):\n     assert rv.mimetype == \"application/vnd.api+json\"\n \n \n-@pytest.mark.skipif(sys.version_info < (3, 7), reason=\"requires Python >= 3.7\")\n def test_json_dump_dataclass(app, req_ctx):\n     from dataclasses import make_dataclass\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#1b552d0b0163e1c1ae3d4895438a9ce2b2bc098e", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 0 | Lines Deleted: 8 | Files Changed: 1 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): -1/0 | Churn Δ: 8 | Churn Cumulative: 1703 | Contributors (this commit): 18 | Commits (past 90d): 4 | Contributors (cumulative): 18 | DMM Complexity: 0.0\n\nDIFF:\n@@ -16,7 +16,6 @@ from werkzeug.exceptions import BadRequest\n from werkzeug.exceptions import BadRequestKeyError\n from werkzeug.exceptions import HTTPException\n from werkzeug.exceptions import InternalServerError\n-from werkzeug.local import ContextVar\n from werkzeug.routing import BuildError\n from werkzeug.routing import Map\n from werkzeug.routing import MapAdapter\n@@ -1621,13 +1620,6 @@ class Flask(Scaffold):\n                 \"Install Flask with the 'async' extra in order to use async views.\"\n             ) from None\n \n-        # Check that Werkzeug isn't using its fallback ContextVar class.\n-        if ContextVar.__module__ == \"werkzeug.local\":\n-            raise RuntimeError(\n-                \"Async cannot be used with this combination of Python \"\n-                \"and Greenlet versions.\"\n-            )\n-\n         return asgiref_async_to_sync(func)\n \n     def make_response(self, rv: ResponseReturnValue) -> Response:\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#e21e003f62b57c35e1832c0bf14e9cd27f4e5bea", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 29 | Lines Deleted: 101 | Files Changed: 2 | Hunks: 32 | Methods Changed: 15 | Complexity Δ (Sum/Max): -11/0 | Churn Δ: 130 | Churn Cumulative: 2285 | Contributors (this commit): 34 | Commits (past 90d): 5 | Contributors (cumulative): 39 | DMM Complexity: 0.4528301886792453\n\nDIFF:\n@@ -5,7 +5,6 @@ import platform\n import re\n import sys\n import traceback\n-import warnings\n from functools import update_wrapper\n from operator import attrgetter\n from threading import Lock\n@@ -34,7 +33,7 @@ class NoAppException(click.UsageError):\n     \"\"\"Raised if an application cannot be found or loaded.\"\"\"\n \n \n-def find_best_app(script_info, module):\n+def find_best_app(module):\n     \"\"\"Given a module instance this tries to find the best possible\n     application in the module or raises an exception.\n     \"\"\"\n@@ -65,7 +64,7 @@ def find_best_app(script_info, module):\n \n         if inspect.isfunction(app_factory):\n             try:\n-                app = call_factory(script_info, app_factory)\n+                app = app_factory()\n \n                 if isinstance(app, Flask):\n                     return app\n@@ -87,42 +86,6 @@ def find_best_app(script_info, module):\n     )\n \n \n-def call_factory(script_info, app_factory, args=None, kwargs=None):\n-    \"\"\"Takes an app factory, a ``script_info` object and  optionally a tuple\n-    of arguments. Checks for the existence of a script_info argument and calls\n-    the app_factory depending on that and the arguments provided.\n-    \"\"\"\n-    sig = inspect.signature(app_factory)\n-    args = [] if args is None else args\n-    kwargs = {} if kwargs is None else kwargs\n-\n-    if \"script_info\" in sig.parameters:\n-        warnings.warn(\n-            \"The 'script_info' argument is deprecated and will not be\"\n-            \" passed to the app factory function in Flask 2.1.\",\n-            DeprecationWarning,\n-        )\n-        kwargs[\"script_info\"] = script_info\n-\n-    if not args and len(sig.parameters) == 1:\n-        first_parameter = next(iter(sig.parameters.values()))\n-\n-        if (\n-            first_parameter.default is inspect.Parameter.empty\n-            # **kwargs is reported as an empty default, ignore it\n-            and first_parameter.kind is not inspect.Parameter.VAR_KEYWORD\n-        ):\n-            warnings.warn(\n-                \"Script info is deprecated and will not be passed as the\"\n-                \" single argument to the app factory function in Flask\"\n-                \" 2.1.\",\n-                DeprecationWarning,\n-            )\n-            args.append(script_info)\n-\n-    return app_factory(*args, **kwargs)\n-\n-\n def _called_with_wrong_args(f):\n     \"\"\"Check whether calling a function raised a ``TypeError`` because\n     the call failed or because something in the factory raised the\n@@ -149,7 +112,7 @@ def _called_with_wrong_args(f):\n         del tb\n \n \n-def find_app_by_string(script_info, module, app_name):\n+def find_app_by_string(module, app_name):\n     \"\"\"Check if the given string is a variable name or a function. Call\n     a function to get the app instance, or return the variable directly.\n     \"\"\"\n@@ -166,7 +129,8 @@ def find_app_by_string(script_info, module, app_name):\n \n     if isinstance(expr, ast.Name):\n         name = expr.id\n-        args = kwargs = None\n+        args = []\n+        kwargs = {}\n     elif isinstance(expr, ast.Call):\n         # Ensure the function name is an attribute name only.\n         if not isinstance(expr.func, ast.Name):\n@@ -202,7 +166,7 @@ def find_app_by_string(script_info, module, app_name):\n     # to get the real application.\n     if inspect.isfunction(attr):\n         try:\n-            app = call_factory(script_info, attr, args, kwargs)\n+            app = attr(*args, **kwargs)\n         except TypeError as e:\n             if not _called_with_wrong_args(attr):\n                 raise\n@@ -253,7 +217,7 @@ def prepare_import(path):\n     return \".\".join(module_name[::-1])\n \n \n-def locate_app(script_info, module_name, app_name, raise_if_not_found=True):\n+def locate_app(module_name, app_name, raise_if_not_found=True):\n     __traceback_hide__ = True  # noqa: F841\n \n     try:\n@@ -273,9 +237,9 @@ def locate_app(script_info, module_name, app_name, raise_if_not_found=True):\n     module = sys.modules[module_name]\n \n     if app_name is None:\n-        return find_best_app(script_info, module)\n+        return find_best_app(module)\n     else:\n-        return find_app_by_string(script_info, module, app_name)\n+        return find_app_by_string(module, app_name)\n \n \n def get_version(ctx, param, value):\n@@ -396,18 +360,18 @@ class ScriptInfo:\n             return self._loaded_app\n \n         if self.create_app is not None:\n-            app = call_factory(self, self.create_app)\n+            app = self.create_app()\n         else:\n             if self.app_import_path:\n                 path, name = (\n                     re.split(r\":(?![\\\\/])\", self.app_import_path, 1) + [None]\n                 )[:2]\n                 import_name = prepare_import(path)\n-                app = locate_app(self, import_name, name)\n+                app = locate_app(import_name, name)\n             else:\n                 for path in (\"wsgi.py\", \"app.py\"):\n                     import_name = prepare_import(path)\n-                    app = locate_app(self, import_name, None, raise_if_not_found=False)\n+                    app = locate_app(import_name, None, raise_if_not_found=False)\n \n                     if app:\n                         break\n@@ -983,15 +947,7 @@ debug mode.\n \n \n def main() -> None:\n-    if int(click.__version__[0]) < 8:\n-        warnings.warn(\n-            \"Using the `flask` cli with Click 7 is deprecated and\"\n-            \" will not be supported starting with Flask 2.1.\"\n-            \" Please upgrade to Click 8 as soon as possible.\",\n-            DeprecationWarning,\n-        )\n-    # TODO omit sys.argv once https://github.com/pallets/click/issues/536 is fixed\n-    cli.main(args=sys.argv[1:])\n+    cli.main()\n \n \n if __name__ == \"__main__\":\n\n@@ -49,29 +49,27 @@ def test_cli_name(test_apps):\n \n \n def test_find_best_app(test_apps):\n-    script_info = ScriptInfo()\n-\n     class Module:\n         app = Flask(\"appname\")\n \n-    assert find_best_app(script_info, Module) == Module.app\n+    assert find_best_app(Module) == Module.app\n \n     class Module:\n         application = Flask(\"appname\")\n \n-    assert find_best_app(script_info, Module) == Module.application\n+    assert find_best_app(Module) == Module.application\n \n     class Module:\n         myapp = Flask(\"appname\")\n \n-    assert find_best_app(script_info, Module) == Module.myapp\n+    assert find_best_app(Module) == Module.myapp\n \n     class Module:\n         @staticmethod\n         def create_app():\n             return Flask(\"appname\")\n \n-    app = find_best_app(script_info, Module)\n+    app = find_best_app(Module)\n     assert isinstance(app, Flask)\n     assert app.name == \"appname\"\n \n@@ -80,29 +78,7 @@ def test_find_best_app(test_apps):\n         def create_app(**kwargs):\n             return Flask(\"appname\")\n \n-    app = find_best_app(script_info, Module)\n-    assert isinstance(app, Flask)\n-    assert app.name == \"appname\"\n-\n-    class Module:\n-        @staticmethod\n-        def create_app(foo):\n-            return Flask(\"appname\")\n-\n-    with pytest.deprecated_call(match=\"Script info\"):\n-        app = find_best_app(script_info, Module)\n-\n-    assert isinstance(app, Flask)\n-    assert app.name == \"appname\"\n-\n-    class Module:\n-        @staticmethod\n-        def create_app(foo=None, script_info=None):\n-            return Flask(\"appname\")\n-\n-    with pytest.deprecated_call(match=\"script_info\"):\n-        app = find_best_app(script_info, Module)\n-\n+    app = find_best_app(Module)\n     assert isinstance(app, Flask)\n     assert app.name == \"appname\"\n \n@@ -111,7 +87,7 @@ def test_find_best_app(test_apps):\n         def make_app():\n             return Flask(\"appname\")\n \n-    app = find_best_app(script_info, Module)\n+    app = find_best_app(Module)\n     assert isinstance(app, Flask)\n     assert app.name == \"appname\"\n \n@@ -122,7 +98,7 @@ def test_find_best_app(test_apps):\n         def create_app():\n             return Flask(\"appname2\")\n \n-    assert find_best_app(script_info, Module) == Module.myapp\n+    assert find_best_app(Module) == Module.myapp\n \n     class Module:\n         myapp = Flask(\"appname1\")\n@@ -131,32 +107,32 @@ def test_find_best_app(test_apps):\n         def create_app():\n             return Flask(\"appname2\")\n \n-    assert find_best_app(script_info, Module) == Module.myapp\n+    assert find_best_app(Module) == Module.myapp\n \n     class Module:\n         pass\n \n-    pytest.raises(NoAppException, find_best_app, script_info, Module)\n+    pytest.raises(NoAppException, find_best_app, Module)\n \n     class Module:\n         myapp1 = Flask(\"appname1\")\n         myapp2 = Flask(\"appname2\")\n \n-    pytest.raises(NoAppException, find_best_app, script_info, Module)\n+    pytest.raises(NoAppException, find_best_app, Module)\n \n     class Module:\n         @staticmethod\n         def create_app(foo, bar):\n             return Flask(\"appname2\")\n \n-    pytest.raises(NoAppException, find_best_app, script_info, Module)\n+    pytest.raises(NoAppException, find_best_app, Module)\n \n     class Module:\n         @staticmethod\n         def create_app():\n             raise TypeError(\"bad bad factory!\")\n \n-    pytest.raises(TypeError, find_best_app, script_info, Module)\n+    pytest.raises(TypeError, find_best_app, Module)\n \n \n @pytest.mark.parametrize(\n@@ -220,8 +196,7 @@ def test_prepare_import(request, value, path, result):\n     ),\n )\n def test_locate_app(test_apps, iname, aname, result):\n-    info = ScriptInfo()\n-    assert locate_app(info, iname, aname).name == result\n+    assert locate_app(iname, aname).name == result\n \n \n @pytest.mark.parametrize(\n@@ -243,20 +218,17 @@ def test_locate_app(test_apps, iname, aname, result):\n     ),\n )\n def test_locate_app_raises(test_apps, iname, aname):\n-    info = ScriptInfo()\n-\n     with pytest.raises(NoAppException):\n-        locate_app(info, iname, aname)\n+        locate_app(iname, aname)\n \n \n def test_locate_app_suppress_raise(test_apps):\n-    info = ScriptInfo()\n-    app = locate_app(info, \"notanapp.py\", None, raise_if_not_found=False)\n+    app = locate_app(\"notanapp.py\", None, raise_if_not_found=False)\n     assert app is None\n \n     # only direct import error is suppressed\n     with pytest.raises(NoAppException):\n-        locate_app(info, \"cliapp.importerrorapp\", None, raise_if_not_found=False)\n+        locate_app(\"cliapp.importerrorapp\", None, raise_if_not_found=False)\n \n \n def test_get_version(test_apps, capsys):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#2bd7aed1a4e257b00df4282b96e7e96edc4567f6", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 3 | Lines Deleted: 26 | Files Changed: 1 | Hunks: 2 | Methods Changed: 2 | Complexity Δ (Sum/Max): -1/0 | Churn Δ: 29 | Churn Cumulative: 296 | Contributors (this commit): 5 | Commits (past 90d): 1 | Contributors (cumulative): 5 | DMM Complexity: 0.0\n\nDIFF:\n@@ -176,6 +176,9 @@ class Config(dict):\n \n         .. code-block:: python\n \n+            import json\n+            app.config.from_file(\"config.json\", load=json.load)\n+\n             import toml\n             app.config.from_file(\"config.toml\", load=toml.load)\n \n@@ -204,32 +207,6 @@ class Config(dict):\n \n         return self.from_mapping(obj)\n \n-    def from_json(self, filename: str, silent: bool = False) -> bool:\n-        \"\"\"Update the values in the config from a JSON file. The loaded\n-        data is passed to the :meth:`from_mapping` method.\n-\n-        :param filename: The path to the JSON file. This can be an\n-            absolute path or relative to the config root path.\n-        :param silent: Ignore the file if it doesn't exist.\n-        :return: ``True`` if the file was loaded successfully.\n-\n-        .. deprecated:: 2.0.0\n-            Will be removed in Flask 2.1. Use :meth:`from_file` instead.\n-            This was removed early in 2.0.0, was added back in 2.0.1.\n-\n-        .. versionadded:: 0.11\n-        \"\"\"\n-        import warnings\n-        from . import json\n-\n-        warnings.warn(\n-            \"'from_json' is deprecated and will be removed in Flask\"\n-            \" 2.1. Use 'from_file(path, json.load)' instead.\",\n-            DeprecationWarning,\n-            stacklevel=2,\n-        )\n-        return self.from_file(filename, json.load, silent=silent)\n-\n     def from_mapping(\n         self, mapping: t.Optional[t.Mapping[str, t.Any]] = None, **kwargs: t.Any\n     ) -> bool:\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
