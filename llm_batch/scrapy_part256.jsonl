{"custom_id": "scrapy#f6485e669772a940c3c319c71dbcca7bd747d57a", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 3 | Lines Deleted: 1 | Files Changed: 2 | Hunks: 3 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 608 | Contributors (this commit): 21 | Commits (past 90d): 8 | Contributors (cumulative): 24 | DMM Complexity: None\n\nDIFF:\n@@ -12,6 +12,7 @@ from w3lib.html import replace_entities\n from scrapy.utils.python import flatten, to_unicode\n from scrapy.item import BaseItem\n \n+\n _ITERABLE_SINGLE_VALUES = dict, BaseItem, six.text_type, bytes\n \n \n\n@@ -3,12 +3,13 @@ import os\n import unittest\n \n from scrapy.item import Item, Field\n-from scrapy.utils.misc import arg_to_iter, create_instance, load_object, walk_modules, set_environ\n+from scrapy.utils.misc import arg_to_iter, create_instance, load_object, set_environ, walk_modules\n \n from tests import mock\n \n __doctests__ = ['scrapy.utils.misc']\n \n+\n class UtilsMiscTestCase(unittest.TestCase):\n \n     def test_load_object(self):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "scrapy#33925a77610293c44a169efd1c274239a75ba968", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 26 | Lines Deleted: 15 | Files Changed: 2 | Hunks: 10 | Methods Changed: 4 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 41 | Churn Cumulative: 910 | Contributors (this commit): 13 | Commits (past 90d): 14 | Contributors (cumulative): 20 | DMM Complexity: 1.0\n\nDIFF:\n@@ -141,7 +141,7 @@ class ImagesPipeline(FilesPipeline):\n             from scrapy.exceptions import ScrapyDeprecationWarning\n             import warnings\n             warnings.warn('ImagesPipeline.convert_image() method overriden in a incompatible way, '\n-                          'overriden method does not accept response_body attribute.',\n+                          'overriden method does not accept response_body argument.',\n                           category=ScrapyDeprecationWarning, stacklevel=1)\n \n         convert_image_overriden = _is_convert_image_overriden()\n@@ -162,6 +162,13 @@ class ImagesPipeline(FilesPipeline):\n             yield thumb_path, thumb_image, thumb_buf\n \n     def convert_image(self, image, size=None, response_body=None):\n+        if not response_body:\n+            from scrapy.exceptions import ScrapyDeprecationWarning\n+            import warnings\n+            warnings.warn('ImagesPipeline.convert_image() method called in a incompatible way, '\n+                          'method called without response_body argument.',\n+                          category=ScrapyDeprecationWarning, stacklevel=1)\n+\n         if image.format == 'PNG' and image.mode == 'RGBA':\n             background = Image.new('RGBA', image.size, (255, 255, 255))\n             background.paste(image, image)\n@@ -177,14 +184,7 @@ class ImagesPipeline(FilesPipeline):\n         if size:\n             image = image.copy()\n             image.thumbnail(size, Image.ANTIALIAS)\n-        else: \n-            if not response_body:\n-                from scrapy.exceptions import ScrapyDeprecationWarning\n-                import warnings\n-                warnings.warn('ImagesPipeline.convert_image() method called in a incompatible way, '\n-                              'method called without response_body attribute.',\n-                              category=ScrapyDeprecationWarning, stacklevel=1)\n-            elif image.format == 'JPEG':\n+        elif response_body and image.format == 'JPEG':\n             return image, response_body\n                 \n         buf = BytesIO()\n\n@@ -76,25 +76,27 @@ class ImagesPipelineTestCase(unittest.TestCase):\n                          'thumbs/50/850233df65a5b83361798f532f1fc549cd13cbe9.jpg')\n \n     def test_convert_image(self):\n+        # tests for old API\n+        with warnings.catch_warnings(record=True) as w:\n+            warnings.simplefilter('always')\n+            \n             SIZE = (100, 100)\n             # straigh forward case: RGB and JPEG\n             COLOUR = (0, 127, 255)\n             im, buf = _create_image('JPEG', 'RGB', SIZE, COLOUR)\n-        converted, converted_buf = self.pipeline.convert_image(im, response_body=buf)\n+            converted, converted_buf = self.pipeline.convert_image(im)\n             self.assertEqual(converted.mode, 'RGB')\n             self.assertEqual(converted.getcolors(), [(10000, COLOUR)])\n-        # check that we don't convert JPEGs again\n-        self.assertEqual(converted_buf, buf)\n \n             # check that thumbnail keep image ratio\n-        thumbnail, _ = self.pipeline.convert_image(converted, size=(10, 25), response_body=converted_buf)\n+            thumbnail, _ = self.pipeline.convert_image(converted, size=(10, 25))\n             self.assertEqual(thumbnail.mode, 'RGB')\n             self.assertEqual(thumbnail.size, (10, 10))\n \n             # transparency case: RGBA and PNG\n             COLOUR = (0, 127, 255, 50)\n             im, buf = _create_image('PNG', 'RGBA', SIZE, COLOUR)\n-        converted, _ = self.pipeline.convert_image(im, response_body=buf)\n+            converted, _ = self.pipeline.convert_image(im)\n             self.assertEqual(converted.mode, 'RGB')\n             self.assertEqual(converted.getcolors(), [(10000, (205, 230, 255))])\n \n@@ -102,10 +104,19 @@ class ImagesPipelineTestCase(unittest.TestCase):\n             COLOUR = (0, 127, 255, 50)\n             im, buf = _create_image('PNG', 'RGBA', SIZE, COLOUR)\n             im = im.convert('P')\n-        converted, _ = self.pipeline.convert_image(im, response_body=buf)\n+            converted, _ = self.pipeline.convert_image(im)\n             self.assertEqual(converted.mode, 'RGB')\n             self.assertEqual(converted.getcolors(), [(10000, (205, 230, 255))])\n \n+            # ensure that we recieved deprecation warnings\n+            self.assertTrue(len(w) >= 4)\n+\n+        # tests for new API\n+        # check that we don't convert JPEGs again\n+        COLOUR = (0, 127, 255)\n+        im, buf = _create_image('JPEG', 'RGB', SIZE, COLOUR)\n+        converted, converted_buf = self.pipeline.convert_image(im, response_body=buf)\n+        self.assertEqual(converted_buf, buf)\n \n class DeprecatedImagesPipeline(ImagesPipeline):\n     def file_key(self, url):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "scrapy#881bade2c1b2d5842f7d0bdf2648455996f814b7", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 29 | Lines Deleted: 6 | Files Changed: 1 | Hunks: 7 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 35 | Churn Cumulative: 653 | Contributors (this commit): 11 | Commits (past 90d): 8 | Contributors (cumulative): 11 | DMM Complexity: 1.0\n\nDIFF:\n@@ -79,12 +79,11 @@ class ImagesPipelineTestCase(unittest.TestCase):\n         # tests for old API\n         with warnings.catch_warnings(record=True) as w:\n             warnings.simplefilter('always')\n-            \n             SIZE = (100, 100)\n             # straigh forward case: RGB and JPEG\n             COLOUR = (0, 127, 255)\n-            im, buf = _create_image('JPEG', 'RGB', SIZE, COLOUR)\n-            converted, converted_buf = self.pipeline.convert_image(im)\n+            im, _ = _create_image('JPEG', 'RGB', SIZE, COLOUR)\n+            converted, _ = self.pipeline.convert_image(im)\n             self.assertEqual(converted.mode, 'RGB')\n             self.assertEqual(converted.getcolors(), [(10000, COLOUR)])\n \n@@ -95,14 +94,14 @@ class ImagesPipelineTestCase(unittest.TestCase):\n \n             # transparency case: RGBA and PNG\n             COLOUR = (0, 127, 255, 50)\n-            im, buf = _create_image('PNG', 'RGBA', SIZE, COLOUR)\n+            im, _ = _create_image('PNG', 'RGBA', SIZE, COLOUR)\n             converted, _ = self.pipeline.convert_image(im)\n             self.assertEqual(converted.mode, 'RGB')\n             self.assertEqual(converted.getcolors(), [(10000, (205, 230, 255))])\n \n             # transparency case with palette: P and PNG\n             COLOUR = (0, 127, 255, 50)\n-            im, buf = _create_image('PNG', 'RGBA', SIZE, COLOUR)\n+            im, _ = _create_image('PNG', 'RGBA', SIZE, COLOUR)\n             im = im.convert('P')\n             converted, _ = self.pipeline.convert_image(im)\n             self.assertEqual(converted.mode, 'RGB')\n@@ -112,12 +111,36 @@ class ImagesPipelineTestCase(unittest.TestCase):\n             self.assertTrue(len(w) >= 4)\n \n         # tests for new API\n-        # check that we don't convert JPEGs again\n+        SIZE = (100, 100)\n+        # straigh forward case: RGB and JPEG\n         COLOUR = (0, 127, 255)\n         im, buf = _create_image('JPEG', 'RGB', SIZE, COLOUR)\n         converted, converted_buf = self.pipeline.convert_image(im, response_body=buf)\n+        self.assertEqual(converted.mode, 'RGB')\n+        self.assertEqual(converted.getcolors(), [(10000, COLOUR)])\n+        # check that we don't convert JPEGs again\n         self.assertEqual(converted_buf, buf)\n \n+        # check that thumbnail keep image ratio\n+        thumbnail, _ = self.pipeline.convert_image(converted, size=(10, 25), response_body=converted_buf)\n+        self.assertEqual(thumbnail.mode, 'RGB')\n+        self.assertEqual(thumbnail.size, (10, 10))\n+\n+        # transparency case: RGBA and PNG\n+        COLOUR = (0, 127, 255, 50)\n+        im, buf = _create_image('PNG', 'RGBA', SIZE, COLOUR)\n+        converted, _ = self.pipeline.convert_image(im, response_body=buf)\n+        self.assertEqual(converted.mode, 'RGB')\n+        self.assertEqual(converted.getcolors(), [(10000, (205, 230, 255))])\n+\n+        # transparency case with palette: P and PNG\n+        COLOUR = (0, 127, 255, 50)\n+        im, buf = _create_image('PNG', 'RGBA', SIZE, COLOUR)\n+        im = im.convert('P')\n+        converted, _ = self.pipeline.convert_image(im, response_body=buf)\n+        self.assertEqual(converted.mode, 'RGB')\n+        self.assertEqual(converted.getcolors(), [(10000, (205, 230, 255))])\n+\n class DeprecatedImagesPipeline(ImagesPipeline):\n     def file_key(self, url):\n         return self.image_key(url)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "scrapy#611249bb7f3a7bb5a92a67d90d6c97f17494768f", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 25 | Lines Deleted: 3 | Files Changed: 4 | Hunks: 6 | Methods Changed: 6 | Complexity Δ (Sum/Max): 2/2 | Churn Δ: 28 | Churn Cumulative: 1121 | Contributors (this commit): 50 | Commits (past 90d): 13 | Contributors (cumulative): 69 | DMM Complexity: 0.95\n\nDIFF:\n@@ -88,6 +88,7 @@ class MetaRefreshMiddleware(BaseRedirectMiddleware):\n \n     def __init__(self, settings):\n         super(MetaRefreshMiddleware, self).__init__(settings)\n+        self._ignore_tags = settings.getlist('METAREFRESH_IGNORE_TAGS')\n         self._maxdelay = settings.getint('REDIRECT_MAX_METAREFRESH_DELAY',\n                                          settings.getint('METAREFRESH_MAXDELAY'))\n \n@@ -96,7 +97,8 @@ class MetaRefreshMiddleware(BaseRedirectMiddleware):\n                 not isinstance(response, HtmlResponse):\n             return response\n \n-        interval, url = get_meta_refresh(response)\n+        interval, url = get_meta_refresh(response,\n+                                         ignore_tags=self._ignore_tags)\n         if url and interval < self._maxdelay:\n             redirected = self._redirect_request_using_get(request, url)\n             return self._redirect(redirected, request, spider, 'meta refresh')\n\n@@ -221,6 +221,7 @@ MEMUSAGE_NOTIFY_MAIL = []\n MEMUSAGE_WARNING_MB = 0\n \n METAREFRESH_ENABLED = True\n+METAREFRESH_IGNORE_TAGS = ['script', 'noscript']\n METAREFRESH_MAXDELAY = 100\n \n NEWSPIDER_MODULE = ''\n\n@@ -31,12 +31,12 @@ def get_base_url(response):\n \n \n _metaref_cache = weakref.WeakKeyDictionary()\n-def get_meta_refresh(response):\n+def get_meta_refresh(response, ignore_tags=('script', 'noscript')):\n     \"\"\"Parse the http-equiv refrsh parameter from the given response\"\"\"\n     if response not in _metaref_cache:\n         text = response.text[0:4096]\n         _metaref_cache[response] = html.get_meta_refresh(text, response.url,\n-            response.encoding, ignore_tags=('script', 'noscript'))\n+            response.encoding, ignore_tags=ignore_tags)\n     return _metaref_cache[response]\n \n \n\n@@ -279,5 +279,24 @@ class MetaRefreshMiddlewareTest(unittest.TestCase):\n         self.assertEqual(req2.meta['redirect_reasons'], ['meta refresh'])\n         self.assertEqual(req3.meta['redirect_reasons'], ['meta refresh', 'meta refresh'])\n \n+    def test_ignore_tags_default(self):\n+        req = Request(url='http://example.org')\n+        body = ('''<noscript><meta http-equiv=\"refresh\" '''\n+                '''content=\"0;URL='http://example.org/newpage'\"></noscript>''')\n+        rsp = HtmlResponse(req.url, body=body.encode())\n+        response = self.mw.process_response(req, rsp, self.spider)\n+        assert isinstance(response, Response)\n+\n+    def test_ignore_tags_empty_list(self):\n+        crawler = get_crawler(Spider, {'METAREFRESH_IGNORE_TAGS': []})\n+        mw = MetaRefreshMiddleware.from_crawler(crawler)\n+        req = Request(url='http://example.org')\n+        body = ('''<noscript><meta http-equiv=\"refresh\" '''\n+                '''content=\"0;URL='http://example.org/newpage'\"></noscript>''')\n+        rsp = HtmlResponse(req.url, body=body.encode())\n+        req2 = mw.process_response(req, rsp, self.spider)\n+        assert isinstance(req2, Request)\n+        self.assertEqual(req2.url, 'http://example.org/newpage')\n+\n if __name__ == \"__main__\":\n     unittest.main()\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "scrapy#653ac3eebe96bdfff8128cdb1e500728215486a2", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 2 | Files Changed: 2 | Hunks: 2 | Methods Changed: 2 | Complexity Δ (Sum/Max): 2/2 | Churn Δ: 3 | Churn Cumulative: 948 | Contributors (this commit): 13 | Commits (past 90d): 15 | Contributors (cumulative): 20 | DMM Complexity: 1.0\n\nDIFF:\n@@ -155,7 +155,6 @@ class ImagesPipeline(FilesPipeline):\n         for thumb_id, size in six.iteritems(self.thumbs):\n             thumb_path = self.thumb_path(request, thumb_id, response=response, info=info)\n             if convert_image_overriden:\n-                _warn()\n                 thumb_image, thumb_buf = self.convert_image(image, size)\n             else:\n                 thumb_image, thumb_buf = self.convert_image(image, size, buf)\n\n@@ -108,7 +108,7 @@ class ImagesPipelineTestCase(unittest.TestCase):\n             self.assertEqual(converted.getcolors(), [(10000, (205, 230, 255))])\n \n             # ensure that we recieved deprecation warnings\n-            self.assertTrue(len(w) >= 4)\n+            self.assertTrue(len([warning for warning in w if 'ImagesPipeline.convert_image() method called in a incompatible way' in str(warning.message)]) == 4)\n \n         # tests for new API\n         SIZE = (100, 100)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "scrapy#2994b624e03ec9a2cba2c024eacf549329c056de", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 6 | Lines Deleted: 17 | Files Changed: 2 | Hunks: 7 | Methods Changed: 5 | Complexity Δ (Sum/Max): -4/0 | Churn Δ: 23 | Churn Cumulative: 971 | Contributors (this commit): 13 | Commits (past 90d): 17 | Contributors (cumulative): 20 | DMM Complexity: 0.18181818181818182\n\nDIFF:\n@@ -15,7 +15,7 @@ except ImportError:\n from PIL import Image\n \n from scrapy.utils.misc import md5sum\n-from scrapy.utils.python import to_bytes\n+from scrapy.utils.python import to_bytes, get_func_args\n from scrapy.http import Request\n from scrapy.settings import Settings\n from scrapy.exceptions import DropItem\n@@ -127,25 +127,14 @@ class ImagesPipeline(FilesPipeline):\n             raise ImageException(\"Image too small (%dx%d < %dx%d)\" %\n                                  (width, height, self.min_width, self.min_height))\n         \n-        def _is_convert_image_overriden():\n-            import inspect\n-            if six.PY2:\n-                convert_image_signature = inspect.getargspec(self.convert_image)\n-            elif six.PY3:\n-                convert_image_signature = inspect.getfullargspec(self.convert_image)\n-            if 'response_body' not in convert_image_signature.args:\n-                return True\n-            return False\n-\n         def _warn():\n             from scrapy.exceptions import ScrapyDeprecationWarning\n             import warnings\n-            warnings.warn('ImagesPipeline.convert_image() method overriden in a incompatible way, '\n+            warnings.warn('ImagesPipeline.convert_image() method overriden in a deprecated way, '\n                           'overriden method does not accept response_body argument.',\n                           category=ScrapyDeprecationWarning, stacklevel=1)\n \n-        convert_image_overriden = _is_convert_image_overriden()\n-        if convert_image_overriden:\n+        if 'response_body' not in get_func_args(self.convert_image):\n             _warn()\n             image, buf = self.convert_image(orig_image)\n         else:\n@@ -154,7 +143,7 @@ class ImagesPipeline(FilesPipeline):\n \n         for thumb_id, size in six.iteritems(self.thumbs):\n             thumb_path = self.thumb_path(request, thumb_id, response=response, info=info)\n-            if convert_image_overriden:\n+            if 'response_body' not in get_func_args(self.convert_image):\n                 thumb_image, thumb_buf = self.convert_image(image, size)\n             else:\n                 thumb_image, thumb_buf = self.convert_image(image, size, buf)\n@@ -164,7 +153,7 @@ class ImagesPipeline(FilesPipeline):\n         if not response_body:\n             from scrapy.exceptions import ScrapyDeprecationWarning\n             import warnings\n-            warnings.warn('ImagesPipeline.convert_image() method called in a incompatible way, '\n+            warnings.warn('ImagesPipeline.convert_image() method called in a deprecated way, '\n                           'method called without response_body argument.',\n                           category=ScrapyDeprecationWarning, stacklevel=1)\n \n\n@@ -108,7 +108,7 @@ class ImagesPipelineTestCase(unittest.TestCase):\n             self.assertEqual(converted.getcolors(), [(10000, (205, 230, 255))])\n \n             # ensure that we recieved deprecation warnings\n-            self.assertTrue(len([warning for warning in w if 'ImagesPipeline.convert_image() method called in a incompatible way' in str(warning.message)]) == 4)\n+            self.assertTrue(len([warning for warning in w if 'ImagesPipeline.convert_image() method called in a deprecated way' in str(warning.message)]) == 4)\n \n         # tests for new API\n         SIZE = (100, 100)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "scrapy#c8e28ec194b3730e7954a18526ac77cb44138feb", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 3 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 5 | Churn Cumulative: 319 | Contributors (this commit): 9 | Commits (past 90d): 8 | Contributors (cumulative): 9 | DMM Complexity: 0.0\n\nDIFF:\n@@ -134,7 +134,8 @@ class ImagesPipeline(FilesPipeline):\n                           'overriden method does not accept response_body argument.',\n                           category=ScrapyDeprecationWarning, stacklevel=1)\n \n-        if 'response_body' not in get_func_args(self.convert_image):\n+        convert_image_overriden = 'response_body' not in get_func_args(self.convert_image)\n+        if convert_image_overriden:\n             _warn()\n             image, buf = self.convert_image(orig_image)\n         else:\n@@ -143,7 +144,7 @@ class ImagesPipeline(FilesPipeline):\n \n         for thumb_id, size in six.iteritems(self.thumbs):\n             thumb_path = self.thumb_path(request, thumb_id, response=response, info=info)\n-            if 'response_body' not in get_func_args(self.convert_image):\n+            if convert_image_overriden:\n                 thumb_image, thumb_buf = self.convert_image(image, size)\n             else:\n                 thumb_image, thumb_buf = self.convert_image(image, size, buf)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "scrapy#e667ca76820a53ac3abf34604fc284761f936bb9", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 14 | Lines Deleted: 1 | Files Changed: 2 | Hunks: 3 | Methods Changed: 3 | Complexity Δ (Sum/Max): 3/2 | Churn Δ: 15 | Churn Cumulative: 170 | Contributors (this commit): 9 | Commits (past 90d): 4 | Contributors (cumulative): 13 | DMM Complexity: 1.0\n\nDIFF:\n@@ -75,7 +75,11 @@ def _find_method(obj, func):\n             pass\n         else:\n             if func_self is obj:\n-                return six.get_method_function(func).__name__\n+                name = six.get_method_function(func).__name__\n+                if name.startswith('__'):\n+                    classname = obj.__class__.__name__.lstrip('_')\n+                    name = '_%s%s' % (classname, name)\n+                return name\n     raise ValueError(\"Function %s is not a method of: %s\" % (func, obj))\n \n \n\n@@ -68,6 +68,12 @@ class RequestSerializationTest(unittest.TestCase):\n                     errback=self.spider.handle_error)\n         self._assert_serializes_ok(r, spider=self.spider)\n \n+    def test_private_callback_serialization(self):\n+        r = Request(\"http://www.example.com\",\n+                    callback=self.spider._TestSpider__parse_item_private,\n+                    errback=self.spider.handle_error)\n+        self._assert_serializes_ok(r, spider=self.spider)\n+\n     def test_unserializable_callback1(self):\n         r = Request(\"http://www.example.com\", callback=lambda x: x)\n         self.assertRaises(ValueError, request_to_dict, r)\n@@ -87,6 +93,9 @@ class TestSpider(Spider):\n     def handle_error(self, failure):\n         pass\n \n+    def __parse_item_private(self, response):\n+        pass\n+\n \n class CustomRequest(Request):\n     pass\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "scrapy#0ee2284fcc23ccb2b8a4da8fb561a232cc328fe0", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 556 | Contributors (this commit): 45 | Commits (past 90d): 3 | Contributors (cumulative): 45 | DMM Complexity: None\n\nDIFF:\n@@ -238,7 +238,7 @@ REFERRER_POLICY = 'scrapy.spidermiddlewares.referer.DefaultReferrerPolicy'\n \n RETRY_ENABLED = True\n RETRY_TIMES = 2  # initial response + 2 retries = 3 requests\n-RETRY_HTTP_CODES = [500, 502, 503, 504, 522, 524, 408]\n+RETRY_HTTP_CODES = [500, 502, 503, 504, 522, 524, 408, 429]\n RETRY_PRIORITY_ADJUST = -1\n \n ROBOTSTXT_OBEY = False\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "scrapy#144afcee7973ab97d6c8d89fec007046cc878e3d", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 5 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 3 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 6 | Churn Cumulative: 122 | Contributors (this commit): 5 | Commits (past 90d): 3 | Contributors (cumulative): 5 | DMM Complexity: None\n\nDIFF:\n@@ -2,12 +2,16 @@\n Helper functions for serializing (and deserializing) requests.\n \"\"\"\n import six\n+import re\n \n from scrapy.http import Request\n from scrapy.utils.python import to_unicode, to_native_str\n from scrapy.utils.misc import load_object\n \n \n+private_name_regex = re.compile('^__[^_](.*[^_])?_?$')\n+\n+\n def request_to_dict(request, spider=None):\n     \"\"\"Convert Request object to a dict.\n \n@@ -76,7 +80,7 @@ def _find_method(obj, func):\n         else:\n             if func_self is obj:\n                 name = six.get_method_function(func).__name__\n-                if name.startswith('__'):\n+                if private_name_regex.search(name):\n                     classname = obj.__class__.__name__.lstrip('_')\n                     name = '_%s%s' % (classname, name)\n                 return name\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "scrapy#461682fc3dca72d9a34ddc22ad1896787c9dc518", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 19 | Lines Deleted: 1 | Files Changed: 2 | Hunks: 3 | Methods Changed: 2 | Complexity Δ (Sum/Max): 16/14 | Churn Δ: 20 | Churn Cumulative: 2104 | Contributors (this commit): 30 | Commits (past 90d): 16 | Contributors (cumulative): 43 | DMM Complexity: 1.0\n\nDIFF:\n@@ -18,6 +18,7 @@ from scrapy.utils.response import get_base_url\n \n \n class FormRequest(Request):\n+    valid_form_methods = ['GET', 'POST', 'DIALOG']\n \n     def __init__(self, *args, **kwargs):\n         formdata = kwargs.pop('formdata', None)\n@@ -48,7 +49,11 @@ class FormRequest(Request):\n         form = _get_form(response, formname, formid, formnumber, formxpath)\n         formdata = _get_inputs(form, formdata, dont_click, clickdata, response)\n         url = _get_form_url(form, kwargs.pop('url', None))\n-        method = kwargs.pop('method', form.method)\n+\n+        method = kwargs.pop('method', form.method).upper()\n+        if method not in cls.valid_form_methods:\n+            raise ValueError('Invalid form method in chosen form')\n+\n         return cls(url=url, method=method, formdata=formdata, **kwargs)\n \n \n\n@@ -1100,6 +1100,19 @@ class FormRequestTest(RequestTest):\n         self.assertRaises(ValueError, self.request_class.from_response,\n                           response, formcss=\"input[name='abc']\")\n \n+    def test_from_response_valid_form_methods(self):\n+        body = \"\"\"<form action=\"post.php\" method=\"%s\">\n+            <input type=\"hidden\" name=\"one\" value=\"1\">\n+            </form>\"\"\"\n+\n+        for method in self.request_class.valid_form_methods:\n+            response = _buildresponse(body % method)\n+            r1 = self.request_class.from_response(response)\n+            self.assertEqual(r1.method, method)\n+\n+        response = _buildresponse(body % 'UNKNOWN')\n+        self.assertRaises(ValueError, self.request_class.from_response, response)\n+\n \n def _buildresponse(body, **kwargs):\n     kwargs.setdefault('body', body)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "scrapy#90fdefcbca89d0ef2cc81955b9fd8b8af1dff392", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 7 | Lines Deleted: 5 | Files Changed: 1 | Hunks: 4 | Methods Changed: 3 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 12 | Churn Cumulative: 331 | Contributors (this commit): 9 | Commits (past 90d): 9 | Contributors (cumulative): 9 | DMM Complexity: 0.0\n\nDIFF:\n@@ -84,6 +84,8 @@ class ImagesPipeline(FilesPipeline):\n             resolve('IMAGES_THUMBS'), self.THUMBS\n         )\n \n+        self._deprecated_convert_image = None\n+\n     @classmethod\n     def from_settings(cls, settings):\n         s3store = cls.STORE_SCHEMES['s3']\n@@ -127,16 +129,16 @@ class ImagesPipeline(FilesPipeline):\n             raise ImageException(\"Image too small (%dx%d < %dx%d)\" %\n                                  (width, height, self.min_width, self.min_height))\n \n-        def _warn():\n+        if self._deprecated_convert_image is None:\n+            self._deprecated_convert_image = 'response_body' not in get_func_args(self.convert_image)\n+            if self._deprecated_convert_image:\n                 from scrapy.exceptions import ScrapyDeprecationWarning\n                 import warnings\n                 warnings.warn('ImagesPipeline.convert_image() method overriden in a deprecated way, '\n                               'overriden method does not accept response_body argument.',\n                               category=ScrapyDeprecationWarning, stacklevel=1)\n \n-        convert_image_overriden = 'response_body' not in get_func_args(self.convert_image)\n-        if convert_image_overriden:\n-            _warn()\n+        if self._deprecated_convert_image:\n             image, buf = self.convert_image(orig_image)\n         else:\n             image, buf = self.convert_image(orig_image, response_body=BytesIO(response.body))\n@@ -144,7 +146,7 @@ class ImagesPipeline(FilesPipeline):\n \n         for thumb_id, size in six.iteritems(self.thumbs):\n             thumb_path = self.thumb_path(request, thumb_id, response=response, info=info)\n-            if convert_image_overriden:\n+            if self._deprecated_convert_image:\n                 thumb_image, thumb_buf = self.convert_image(image, size)\n             else:\n                 thumb_image, thumb_buf = self.convert_image(image, size, buf)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "scrapy#72b7d3e90ac2d21ffdd0c44878ec1a5a5d0fa5ce", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 24 | Lines Deleted: 2 | Files Changed: 2 | Hunks: 3 | Methods Changed: 1 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 26 | Churn Cumulative: 202 | Contributors (this commit): 9 | Commits (past 90d): 7 | Contributors (cumulative): 13 | DMM Complexity: 1.0\n\nDIFF:\n@@ -9,7 +9,7 @@ from scrapy.utils.python import to_unicode, to_native_str\n from scrapy.utils.misc import load_object\n \n \n-private_name_regex = re.compile('^__[^_](.*[^_])?_?$')\n+private_name_regex = re.compile('^__.*[^_]_?$')\n \n \n def request_to_dict(request, spider=None):\n\n@@ -3,7 +3,7 @@ import unittest\n \n from scrapy.http import Request, FormRequest\n from scrapy.spiders import Spider\n-from scrapy.utils.reqser import request_to_dict, request_from_dict\n+from scrapy.utils.reqser import request_to_dict, request_from_dict, private_name_regex\n \n \n class RequestSerializationTest(unittest.TestCase):\n@@ -74,6 +74,28 @@ class RequestSerializationTest(unittest.TestCase):\n                     errback=self.spider.handle_error)\n         self._assert_serializes_ok(r, spider=self.spider)\n \n+    def test_private_callback_name_matching(self):\n+        self.assertTrue(private_name_regex.search('__a'))\n+        self.assertTrue(private_name_regex.search('__a_'))\n+        self.assertTrue(private_name_regex.search('__a_a'))\n+        self.assertTrue(private_name_regex.search('__a_a_'))\n+        self.assertTrue(private_name_regex.search('__a__a'))\n+        self.assertTrue(private_name_regex.search('__a__a_'))\n+        self.assertTrue(private_name_regex.search('__a___a'))\n+        self.assertTrue(private_name_regex.search('__a___a_'))\n+        self.assertTrue(private_name_regex.search('___a'))\n+        self.assertTrue(private_name_regex.search('___a_'))\n+        self.assertTrue(private_name_regex.search('___a_a'))\n+        self.assertTrue(private_name_regex.search('___a_a_'))\n+        self.assertTrue(private_name_regex.search('____a_a_'))\n+\n+        self.assertFalse(private_name_regex.search('_a'))\n+        self.assertFalse(private_name_regex.search('_a_'))\n+        self.assertFalse(private_name_regex.search('__a__'))\n+        self.assertFalse(private_name_regex.search('__'))\n+        self.assertFalse(private_name_regex.search('___'))\n+        self.assertFalse(private_name_regex.search('____'))\n+\n     def test_unserializable_callback1(self):\n         r = Request(\"http://www.example.com\", callback=lambda x: x)\n         self.assertRaises(ValueError, request_to_dict, r)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "scrapy#9af91a26b035a10e9303227ad9ddd5e043725514", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 25 | Lines Deleted: 25 | Files Changed: 2 | Hunks: 7 | Methods Changed: 3 | Complexity Δ (Sum/Max): 2/2 | Churn Δ: 50 | Churn Cumulative: 252 | Contributors (this commit): 9 | Commits (past 90d): 9 | Contributors (cumulative): 13 | DMM Complexity: 1.0\n\nDIFF:\n@@ -2,16 +2,12 @@\n Helper functions for serializing (and deserializing) requests.\n \"\"\"\n import six\n-import re\n \n from scrapy.http import Request\n from scrapy.utils.python import to_unicode, to_native_str\n from scrapy.utils.misc import load_object\n \n \n-private_name_regex = re.compile('^__.*[^_]_?$')\n-\n-\n def request_to_dict(request, spider=None):\n     \"\"\"Convert Request object to a dict.\n \n@@ -71,6 +67,10 @@ def request_from_dict(d, spider=None):\n         flags=d.get('flags'))\n \n \n+def _is_private_method(name):\n+    return name.startswith('__') and not name.endswith('__')\n+\n+\n def _find_method(obj, func):\n     if obj:\n         try:\n@@ -80,7 +80,7 @@ def _find_method(obj, func):\n         else:\n             if func_self is obj:\n                 name = six.get_method_function(func).__name__\n-                if private_name_regex.search(name):\n+                if _is_private_method(name):\n                     classname = obj.__class__.__name__.lstrip('_')\n                     name = '_%s%s' % (classname, name)\n                 return name\n\n@@ -3,7 +3,7 @@ import unittest\n \n from scrapy.http import Request, FormRequest\n from scrapy.spiders import Spider\n-from scrapy.utils.reqser import request_to_dict, request_from_dict, private_name_regex\n+from scrapy.utils.reqser import request_to_dict, request_from_dict, _is_private_method\n \n \n class RequestSerializationTest(unittest.TestCase):\n@@ -75,26 +75,26 @@ class RequestSerializationTest(unittest.TestCase):\n         self._assert_serializes_ok(r, spider=self.spider)\n \n     def test_private_callback_name_matching(self):\n-        self.assertTrue(private_name_regex.search('__a'))\n-        self.assertTrue(private_name_regex.search('__a_'))\n-        self.assertTrue(private_name_regex.search('__a_a'))\n-        self.assertTrue(private_name_regex.search('__a_a_'))\n-        self.assertTrue(private_name_regex.search('__a__a'))\n-        self.assertTrue(private_name_regex.search('__a__a_'))\n-        self.assertTrue(private_name_regex.search('__a___a'))\n-        self.assertTrue(private_name_regex.search('__a___a_'))\n-        self.assertTrue(private_name_regex.search('___a'))\n-        self.assertTrue(private_name_regex.search('___a_'))\n-        self.assertTrue(private_name_regex.search('___a_a'))\n-        self.assertTrue(private_name_regex.search('___a_a_'))\n-        self.assertTrue(private_name_regex.search('____a_a_'))\n+        self.assertTrue(_is_private_method('__a'))\n+        self.assertTrue(_is_private_method('__a_'))\n+        self.assertTrue(_is_private_method('__a_a'))\n+        self.assertTrue(_is_private_method('__a_a_'))\n+        self.assertTrue(_is_private_method('__a__a'))\n+        self.assertTrue(_is_private_method('__a__a_'))\n+        self.assertTrue(_is_private_method('__a___a'))\n+        self.assertTrue(_is_private_method('__a___a_'))\n+        self.assertTrue(_is_private_method('___a'))\n+        self.assertTrue(_is_private_method('___a_'))\n+        self.assertTrue(_is_private_method('___a_a'))\n+        self.assertTrue(_is_private_method('___a_a_'))\n+        self.assertTrue(_is_private_method('____a_a_'))\n \n-        self.assertFalse(private_name_regex.search('_a'))\n-        self.assertFalse(private_name_regex.search('_a_'))\n-        self.assertFalse(private_name_regex.search('__a__'))\n-        self.assertFalse(private_name_regex.search('__'))\n-        self.assertFalse(private_name_regex.search('___'))\n-        self.assertFalse(private_name_regex.search('____'))\n+        self.assertFalse(_is_private_method('_a'))\n+        self.assertFalse(_is_private_method('_a_'))\n+        self.assertFalse(_is_private_method('__a__'))\n+        self.assertFalse(_is_private_method('__'))\n+        self.assertFalse(_is_private_method('___'))\n+        self.assertFalse(_is_private_method('____'))\n \n     def test_unserializable_callback1(self):\n         r = Request(\"http://www.example.com\", callback=lambda x: x)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "scrapy#bcad8947e8192448ab3bd59489444efb567f8793", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 20 | Lines Deleted: 1 | Files Changed: 2 | Hunks: 5 | Methods Changed: 3 | Complexity Δ (Sum/Max): 4/3 | Churn Δ: 21 | Churn Cumulative: 273 | Contributors (this commit): 9 | Commits (past 90d): 11 | Contributors (cumulative): 13 | DMM Complexity: 0.0\n\nDIFF:\n@@ -81,8 +81,13 @@ def _find_method(obj, func):\n             if func_self is obj:\n                 name = six.get_method_function(func).__name__\n                 if _is_private_method(name):\n+                    qualname = getattr(func, '__qualname__', None)\n+                    if qualname is None:\n                         classname = obj.__class__.__name__.lstrip('_')\n                         name = '_%s%s' % (classname, name)\n+                    else:\n+                        splits = qualname.split('.')\n+                        name = '_%s%s' % (splits[-2], splits[-1])\n                 return name\n     raise ValueError(\"Function %s is not a method of: %s\" % (func, obj))\n \n\n@@ -1,5 +1,6 @@\n # -*- coding: utf-8 -*-\n import unittest\n+import sys\n \n from scrapy.http import Request, FormRequest\n from scrapy.spiders import Spider\n@@ -74,6 +75,14 @@ class RequestSerializationTest(unittest.TestCase):\n                     errback=self.spider.handle_error)\n         self._assert_serializes_ok(r, spider=self.spider)\n \n+    def test_mixin_private_callback_serialization(self):\n+        if sys.version_info[0] < 3:\n+            return\n+        r = Request(\"http://www.example.com\",\n+                    callback=self.spider._TestSpiderMixin__mixin_callback,\n+                    errback=self.spider.handle_error)\n+        self._assert_serializes_ok(r, spider=self.spider)\n+\n     def test_private_callback_name_matching(self):\n         self.assertTrue(_is_private_method('__a'))\n         self.assertTrue(_is_private_method('__a_'))\n@@ -106,7 +115,12 @@ class RequestSerializationTest(unittest.TestCase):\n         self.assertRaises(ValueError, request_to_dict, r)\n \n \n-class TestSpider(Spider):\n+class TestSpiderMixin(object):\n+    def __mixin_callback(self, response):\n+        pass\n+\n+\n+class TestSpider(Spider, TestSpiderMixin):\n     name = 'test'\n \n     def parse_item(self, response):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "scrapy#c7b5ad0e20dc736a8a08b62134c9418439fb7077", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 8 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 2 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 9 | Churn Cumulative: 111 | Contributors (this commit): 11 | Commits (past 90d): 1 | Contributors (cumulative): 11 | DMM Complexity: None\n\nDIFF:\n@@ -28,7 +28,8 @@ sys.path.insert(0, path.dirname(path.dirname(__file__)))\n # coming with Sphinx (named 'sphinx.ext.*') or your custom ones.\n extensions = [\n     'scrapydocs',\n-    'sphinx.ext.autodoc'\n+    'sphinx.ext.autodoc',\n+    'sphinx.ext.coverage',\n ]\n \n # Add any paths that contain templates here, relative to this directory.\n@@ -218,3 +219,9 @@ linkcheck_ignore = [\n     'http://localhost:\\d+', 'http://hg.scrapy.org',\n     'http://directory.google.com/'\n ]\n+\n+\n+# Options for the Coverage extension\n+# ----------------------------------\n+coverage_ignore_pyobjects = [\n+]\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "scrapy#9c81721c407ff41ef9dce2c33e26ac477355cf1f", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 26 | Lines Deleted: 8 | Files Changed: 2 | Hunks: 5 | Methods Changed: 4 | Complexity Δ (Sum/Max): 3/2 | Churn Δ: 34 | Churn Cumulative: 307 | Contributors (this commit): 9 | Commits (past 90d): 13 | Contributors (cumulative): 13 | DMM Complexity: 1.0\n\nDIFF:\n@@ -71,6 +71,16 @@ def _is_private_method(name):\n     return name.startswith('__') and not name.endswith('__')\n \n \n+def _mangle_private_name(obj, func, name):\n+    qualname = getattr(func, '__qualname__', None)\n+    if qualname is None:\n+        classname = obj.__class__.__name__.lstrip('_')\n+        return '_%s%s' % (classname, name)\n+    else:\n+        splits = qualname.split('.')\n+        return '_%s%s' % (splits[-2], splits[-1])\n+\n+\n def _find_method(obj, func):\n     if obj:\n         try:\n@@ -81,13 +91,7 @@ def _find_method(obj, func):\n             if func_self is obj:\n                 name = six.get_method_function(func).__name__\n                 if _is_private_method(name):\n-                    qualname = getattr(func, '__qualname__', None)\n-                    if qualname is None:\n-                        classname = obj.__class__.__name__.lstrip('_')\n-                        name = '_%s%s' % (classname, name)\n-                    else:\n-                        splits = qualname.split('.')\n-                        name = '_%s%s' % (splits[-2], splits[-1])\n+                    return _mangle_private_name(obj, func, name)\n                 return name\n     raise ValueError(\"Function %s is not a method of: %s\" % (func, obj))\n \n\n@@ -2,9 +2,11 @@\n import unittest\n import sys\n \n+import six\n+\n from scrapy.http import Request, FormRequest\n from scrapy.spiders import Spider\n-from scrapy.utils.reqser import request_to_dict, request_from_dict, _is_private_method\n+from scrapy.utils.reqser import request_to_dict, request_from_dict, _is_private_method, _mangle_private_name\n \n \n class RequestSerializationTest(unittest.TestCase):\n@@ -105,6 +107,18 @@ class RequestSerializationTest(unittest.TestCase):\n         self.assertFalse(_is_private_method('___'))\n         self.assertFalse(_is_private_method('____'))\n \n+    def _assert_mangles_to(self, obj, name):\n+        self.assertEqual(\n+            _mangle_private_name(obj, getattr(obj, name), name),\n+            name\n+        )\n+\n+    def test_private_name_mangling(self):\n+        self._assert_mangles_to(\n+            self.spider, '_TestSpider__parse_item_private')\n+        self._assert_mangles_to(\n+            self.spider, '_TestSpiderMixin__mixin_callback')\n+\n     def test_unserializable_callback1(self):\n         r = Request(\"http://www.example.com\", callback=lambda x: x)\n         self.assertRaises(ValueError, request_to_dict, r)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "scrapy#3dd3e8c29863683d60f9c4f74aacac3103703061", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 1 | Churn Cumulative: 151 | Contributors (this commit): 8 | Commits (past 90d): 7 | Contributors (cumulative): 8 | DMM Complexity: 1.0\n\nDIFF:\n@@ -116,6 +116,7 @@ class RequestSerializationTest(unittest.TestCase):\n     def test_private_name_mangling(self):\n         self._assert_mangles_to(\n             self.spider, '_TestSpider__parse_item_private')\n+        if sys.version_info[0] >= 3:\n             self._assert_mangles_to(\n                 self.spider, '_TestSpiderMixin__mixin_callback')\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "scrapy#6af1dc89aa5988ebbfbef90afdafa84736f3993c", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 3 | Churn Cumulative: 154 | Contributors (this commit): 8 | Commits (past 90d): 8 | Contributors (cumulative): 8 | DMM Complexity: 1.0\n\nDIFF:\n@@ -108,8 +108,9 @@ class RequestSerializationTest(unittest.TestCase):\n         self.assertFalse(_is_private_method('____'))\n \n     def _assert_mangles_to(self, obj, name):\n+        func = getattr(obj, name)\n         self.assertEqual(\n-            _mangle_private_name(obj, getattr(obj, name), name),\n+            _mangle_private_name(obj, func, func.__name__),\n             name\n         )\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "scrapy#0c50879568dee2363df5cbe25e9bdd7adaed5da4", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 5 | Lines Deleted: 4 | Files Changed: 2 | Hunks: 3 | Methods Changed: 2 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 9 | Churn Cumulative: 2113 | Contributors (this commit): 30 | Commits (past 90d): 12 | Contributors (cumulative): 43 | DMM Complexity: 1.0\n\nDIFF:\n@@ -52,7 +52,7 @@ class FormRequest(Request):\n \n         method = kwargs.pop('method', form.method).upper()\n         if method not in cls.valid_form_methods:\n-            raise ValueError('Invalid form method in chosen form')\n+            method = 'GET'\n \n         return cls(url=url, method=method, formdata=formdata, **kwargs)\n \n\n@@ -1107,11 +1107,12 @@ class FormRequestTest(RequestTest):\n \n         for method in self.request_class.valid_form_methods:\n             response = _buildresponse(body % method)\n-            r1 = self.request_class.from_response(response)\n-            self.assertEqual(r1.method, method)\n+            r = self.request_class.from_response(response)\n+            self.assertEqual(r.method, method)\n \n         response = _buildresponse(body % 'UNKNOWN')\n-        self.assertRaises(ValueError, self.request_class.from_response, response)\n+        r = self.request_class.from_response(response)\n+        self.assertEqual(r.method, 'GET')\n \n \n def _buildresponse(body, **kwargs):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "scrapy#bd8a10384b462dd56b33668e8b92e4a148fd6fba", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 2 | Churn Cumulative: 81 | Contributors (this commit): 6 | Commits (past 90d): 1 | Contributors (cumulative): 6 | DMM Complexity: 1.0\n\nDIFF:\n@@ -35,6 +35,8 @@ class ItemLoader(object):\n         self.parent = parent\n         self._local_item = context['item'] = item\n         self._local_values = defaultdict(list)\n+        for field_name, value in item.items():\n+            self.add_value(field_name, value)\n \n     @property\n     def _values(self):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
