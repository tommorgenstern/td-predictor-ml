{"custom_id": "requests#1722f289711e3d03b0e00fb548f3e8ea92544775", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 45 | Lines Deleted: 42 | Files Changed: 3 | Hunks: 13 | Methods Changed: 6 | Complexity Δ (Sum/Max): -2/5 | Churn Δ: 87 | Churn Cumulative: 7932 | Contributors (this commit): 90 | Commits (past 90d): 50 | Contributors (cumulative): 120 | DMM Complexity: 1.0\n\nDIFF:\n@@ -29,7 +29,7 @@ from .exceptions import (\n from .utils import (\n     get_encoding_from_headers, stream_untransfer, guess_filename, requote_uri,\n     stream_decode_response_unicode, get_netrc_auth, get_environ_proxies,\n-    DEFAULT_CA_BUNDLE_PATH)\n+    to_key_val_list, DEFAULT_CA_BUNDLE_PATH)\n from .compat import (\n     cookielib, urlparse, urlunparse, urljoin, urlsplit, urlencode, str, bytes,\n     StringIO, is_py2, chardet, json, builtin_str)\n@@ -317,15 +317,8 @@ class Request(object):\n         elif hasattr(data, 'read'):\n             return data\n         elif hasattr(data, '__iter__'):\n-            try:\n-                dict(data)\n-            except ValueError:\n-                raise ValueError('Unable to encode lists with elements that '\n-                        'are not 2-tuples.')\n-\n-            params = list(data.items() if isinstance(data, dict) else data)\n             result = []\n-            for k, vs in params:\n+            for k, vs in to_key_val_list(data):\n                 for v in isinstance(vs, list) and vs or [vs]:\n                     result.append(\n                         (k.encode('utf-8') if isinstance(k, str) else k,\n@@ -339,20 +332,8 @@ class Request(object):\n         if (not files) or isinstance(self.data, str):\n             return None\n \n-        try:\n-            fields = list(self.data.items())\n-        except AttributeError:\n-            dict(self.data)\n-            fields = list(self.data)\n-\n-        try:\n-            dict(files)\n-        except ValueError:\n-            raise ValueError('Unable to encode lists with elements that '\n-                    'are not 2-tuples.')\n-\n-        if isinstance(files, dict):\n-            files = files.items()\n+        fields = to_key_val_list(self.data)\n+        files = to_key_val_list(files)\n \n         for (k, v) in files:\n             # support for explicit filename\n\n@@ -15,7 +15,7 @@ from .cookies import cookiejar_from_dict, remove_cookie_by_name\n from .defaults import defaults\n from .models import Request\n from .hooks import dispatch_hook\n-from .utils import header_expand\n+from .utils import header_expand, to_key_val_list\n from .packages.urllib3.poolmanager import PoolManager\n \n \n@@ -38,14 +38,7 @@ def merge_kwargs(local_kwarg, default_kwarg):\n     if not hasattr(default_kwarg, 'items'):\n         return local_kwarg\n \n-    try:\n-        dict(local_kwarg)\n-    except ValueError:\n-        raise ValueError('Unable to encode lists with elements that are not '\n-                '2-tuples.')\n-\n-    if hasattr(local_kwarg, 'items'):\n-        local_kwarg = list(local_kwarg.items())\n+    local_kwarg = to_key_val_list(local_kwarg)\n \n     # Update new values.\n     kwargs = default_kwarg.copy()\n@@ -79,12 +72,12 @@ class Session(object):\n         verify=True,\n         cert=None):\n \n-        self.headers = headers or {}\n+        self.headers = to_key_val_list(headers or [])\n         self.auth = auth\n         self.timeout = timeout\n-        self.proxies = proxies or {}\n+        self.proxies = to_key_val_list(proxies or [])\n         self.hooks = hooks or {}\n-        self.params = params or {}\n+        self.params = to_key_val_list(params or [])\n         self.config = config or {}\n         self.prefetch = prefetch\n         self.verify = verify\n@@ -157,10 +150,10 @@ class Session(object):\n         method = str(method).upper()\n \n         # Default empty dicts for dict params.\n-        data = {} if data is None else data\n-        files = {} if files is None else files\n-        headers = {} if headers is None else headers\n-        params = {} if params is None else params\n+        data = [] if data is None else data\n+        files = [] if files is None else files\n+        headers = [] if headers is None else headers\n+        params = [] if params is None else params\n         hooks = {} if hooks is None else hooks\n         prefetch = self.prefetch or prefetch\n \n@@ -170,8 +163,10 @@ class Session(object):\n \n         # Expand header values.\n         if headers:\n-            for k, v in list(headers.items()) or {}:\n-                headers[k] = header_expand(v)\n+            expanded = []\n+            for k, v in to_key_val_list(headers):\n+                expanded.append((k, header_expand(v)))\n+            headers = expanded\n \n         args = dict(\n             method=method,\n@@ -185,7 +180,7 @@ class Session(object):\n             hooks=hooks,\n             timeout=timeout,\n             allow_redirects=allow_redirects,\n-            proxies=proxies,\n+            proxies=to_key_val_list(proxies),\n             config=config,\n             prefetch=prefetch,\n             verify=verify,\n\n@@ -112,6 +112,33 @@ def guess_filename(obj):\n         return name\n \n \n+def to_key_val_list(value):\n+    \"\"\"Take an object and test to see if it can be represented as a\n+    dictionary. Unless it can not be represented as such, return a list of\n+    tuples, e.g.,:\n+\n+    >>> to_key_val_list([('key', 'val')])\n+    [('key', 'val')]\n+    >>> to_key_val_list('string')\n+    ValueError: ...\n+    >>> to_key_val_list({'key': 'val'})\n+    [('key', 'val')]\n+    \"\"\"\n+    if value is None:\n+        return None\n+\n+    try:\n+        dict(value)\n+    except ValueError:\n+        raise ValueError('Unable to encode lists with elements that are not '\n+                '2-tuples.')\n+\n+    if isinstance(value, dict) or hasattr(value, 'items'):\n+        value = value.items()\n+\n+    return list(value)\n+\n+\n # From mitsuhiko/werkzeug (used with permission).\n def parse_list_header(value):\n     \"\"\"Parse lists as described by RFC 2068 Section 2.\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#3c0b94047c1ccfca4ac4f2fe32afef0ae314094e", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 59 | Lines Deleted: 14 | Files Changed: 5 | Hunks: 13 | Methods Changed: 14 | Complexity Δ (Sum/Max): 9/5 | Churn Δ: 73 | Churn Cumulative: 8414 | Contributors (this commit): 84 | Commits (past 90d): 105 | Contributors (cumulative): 131 | DMM Complexity: 1.0\n\nDIFF:\n@@ -38,10 +38,19 @@ def request(method, url, **kwargs):\n     :param cert: (optional) if String, path to ssl client cert file (.pem). If Tuple, ('cert', 'key') pair.\n     \"\"\"\n \n-    s = kwargs.pop('session') if 'session' in kwargs else sessions.session()\n-    return s.request(method=method, url=url, **kwargs)\n-\n+    # if this session was passed in, leave it open (and retain pooled connections);\n+    # if we're making it just for this call, then close it when we're done.\n+    adhoc_session = False\n+    session = kwargs.pop('session', None)\n+    if session is None:\n+        session = sessions.session()\n+        adhoc_session = True\n \n+    try:\n+        return session.request(method=method, url=url, **kwargs)\n+    finally:\n+        if adhoc_session:\n+            session.close()\n \n def get(url, **kwargs):\n     \"\"\"Sends a GET request. Returns :class:`Response` object.\n\n@@ -57,7 +57,7 @@ class Request(object):\n         proxies=None,\n         hooks=None,\n         config=None,\n-        prefetch=False,\n+        prefetch=True,\n         _poolmanager=None,\n         verify=None,\n         session=None,\n@@ -458,7 +458,7 @@ class Request(object):\n         except ValueError:\n             return False\n \n-    def send(self, anyway=False, prefetch=False):\n+    def send(self, anyway=False, prefetch=True):\n         \"\"\"Sends the request. Returns True if successful, False if not.\n         If there was an HTTPError during transmission,\n         self.response.status_code will contain the HTTPError code.\n@@ -774,6 +774,8 @@ class Response(object):\n                 self._content = None\n \n         self._content_consumed = True\n+        # don't need to release the connection; that's been handled by urllib3\n+        # since we exhausted the data.\n         return self._content\n \n     @property\n\n@@ -66,7 +66,7 @@ class Session(object):\n         hooks=None,\n         params=None,\n         config=None,\n-        prefetch=False,\n+        prefetch=True,\n         verify=True,\n         cert=None):\n \n@@ -105,7 +105,15 @@ class Session(object):\n         return self\n \n     def __exit__(self, *args):\n-        pass\n+        self.close()\n+\n+    def close(self):\n+        \"\"\"Dispose of any internal state.\n+\n+        Currently, this just closes the PoolManager, which closes pooled\n+        connections.\n+        \"\"\"\n+        self.poolmanager.clear()\n \n     def request(self, method, url,\n         params=None,\n@@ -120,7 +128,7 @@ class Session(object):\n         hooks=None,\n         return_response=True,\n         config=None,\n-        prefetch=False,\n+        prefetch=None,\n         verify=None,\n         cert=None):\n \n@@ -140,7 +148,7 @@ class Session(object):\n         :param proxies: (optional) Dictionary mapping protocol to the URL of the proxy.\n         :param return_response: (optional) If False, an un-sent Request object will returned.\n         :param config: (optional) A configuration dictionary. See ``request.defaults`` for allowed keys and their default values.\n-        :param prefetch: (optional) if ``True``, the response content will be immediately downloaded.\n+        :param prefetch: (optional) whether to immediately download the response content. Defaults to ``True``.\n         :param verify: (optional) if ``True``, the SSL cert will be verified. A CA_BUNDLE path can also be provided.\n         :param cert: (optional) if String, path to ssl client cert file (.pem). If Tuple, ('cert', 'key') pair.\n         \"\"\"\n@@ -153,7 +161,7 @@ class Session(object):\n         headers = {} if headers is None else headers\n         params = {} if params is None else params\n         hooks = {} if hooks is None else hooks\n-        prefetch = self.prefetch or prefetch\n+        prefetch = prefetch if prefetch is not None else self.prefetch\n \n         # use session's hooks as defaults\n         for key, cb in list(self.hooks.items()):\n\n@@ -0,0 +1,26 @@\n+\"\"\"\n+This is an informal test originally written by Bluehorn;\n+it verifies that Requests does not leak connections when\n+the body of the request is not read.\n+\"\"\"\n+\n+import gc, os, subprocess, requests, sys\n+\n+def main():\n+    gc.disable()\n+\n+    for x in range(20):\n+        requests.head(\"http://www.google.com/\")\n+\n+    print(\"Open sockets after 20 head requests:\")\n+    pid = os.getpid()\n+    subprocess.call(\"lsof -p%d -a -iTCP\" % (pid,), shell=True)\n+\n+    gcresult = gc.collect()\n+    print(\"Garbage collection result: %s\" % (gcresult,))\n+\n+    print(\"Open sockets after garbage collection:\")\n+    subprocess.call(\"lsof -p%d -a -iTCP\" % (pid,), shell=True)\n+\n+if __name__ == '__main__':\n+    sys.exit(main())\n\n@@ -807,9 +807,9 @@ class RequestsTestSuite(TestSetup, TestBaseMixin, unittest.TestCase):\n         assert 'k' in c\n \n         ds1 = pickle.loads(pickle.dumps(requests.session()))\n-        ds2 = pickle.loads(pickle.dumps(requests.session(prefetch=True)))\n-        assert not ds1.prefetch\n-        assert ds2.prefetch\n+        ds2 = pickle.loads(pickle.dumps(requests.session(prefetch=False)))\n+        assert ds1.prefetch\n+        assert not ds2.prefetch\n \n     # def test_invalid_content(self):\n     #     # WARNING: if you're using a terrible DNS provider (comcast),\n@@ -858,7 +858,7 @@ class RequestsTestSuite(TestSetup, TestBaseMixin, unittest.TestCase):\n         )\n \n         # Make a request and monkey-patch its contents\n-        r = get(httpbin('get'))\n+        r = get(httpbin('get'), prefetch=False)\n         r.raw = StringIO(quote)\n \n         lines = list(r.iter_lines())\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#fc6ddfd78a26afe926c0b5430807d2bbe6d7c874", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 367 | Contributors (this commit): 3 | Commits (past 90d): 6 | Contributors (cumulative): 3 | DMM Complexity: None\n\nDIFF:\n@@ -15,8 +15,8 @@ requests\n \"\"\"\n \n __title__ = 'requests'\n-__version__ = '0.13.5'\n-__build__ = 0x001305\n+__version__ = '0.13.6'\n+__build__ = 0x001306\n __author__ = 'Kenneth Reitz'\n __license__ = 'ISC'\n __copyright__ = 'Copyright 2012 Kenneth Reitz'\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#55bf436f8f6612f627cf0f562dd5d36e26e17c68", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 4 | Lines Deleted: 2 | Files Changed: 2 | Hunks: 4 | Methods Changed: 1 | Complexity Δ (Sum/Max): -1/0 | Churn Δ: 6 | Churn Cumulative: 5676 | Contributors (this commit): 78 | Commits (past 90d): 39 | Contributors (cumulative): 82 | DMM Complexity: None\n\nDIFF:\n@@ -95,6 +95,7 @@ if is_py2:\n     bytes = str\n     str = unicode\n     basestring = basestring\n+    numeric_types = (int, long, float)\n \n \n \n@@ -110,4 +111,5 @@ elif is_py3:\n     str = str\n     bytes = bytes\n     basestring = (str,bytes)\n+    numeric_types = (int, float)\n \n\n@@ -32,7 +32,7 @@ from .utils import (\n     DEFAULT_CA_BUNDLE_PATH)\n from .compat import (\n     cookielib, urlparse, urlunparse, urljoin, urlsplit, urlencode, str, bytes,\n-    StringIO, is_py2, chardet, json, builtin_str)\n+    StringIO, is_py2, chardet, json, builtin_str, numeric_types)\n \n REDIRECT_STATI = (codes.moved, codes.found, codes.other, codes.temporary_moved)\n CONTENT_CHUNK_SIZE = 10 * 1024\n@@ -356,7 +356,7 @@ class Request(object):\n             fields.update({k: (fn, fp.read())})\n \n         for field in fields:\n-            if isinstance(fields[field], float):\n+            if isinstance(fields[field], numeric_types):\n                 fields[field] = str(fields[field])\n             if isinstance(fields[field], list):\n                 newvalue = ', '.join(fields[field])\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#857d8eda3a4055d92626f71ff5b34ce8cc6ec167", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 16 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 2 | Complexity Δ (Sum/Max): 4/4 | Churn Δ: 16 | Churn Cumulative: 853 | Contributors (this commit): 16 | Commits (past 90d): 17 | Contributors (cumulative): 16 | DMM Complexity: 1.0\n\nDIFF:\n@@ -979,6 +979,22 @@ class RequestsTestSuite(TestSetup, TestBaseMixin, unittest.TestCase):\n         t = json.loads(r.text)\n         self.assertEqual(t.get('headers').get('Content-Type'), '')\n \n+    def test_prefetch_redirect_bug(self):\n+        \"\"\"Test that prefetch persists across redirections.\"\"\"\n+        res = get(httpbin('redirect/2'), prefetch=False)\n+        # prefetch should persist across the redirect; if it doesn't,\n+        # this attempt to iterate will crash because the content has already\n+        # been read.\n+        first_line = next(res.iter_lines())\n+        self.assertTrue(first_line.strip().startswith('{'))\n+\n+    def test_prefetch_return_response_interaction(self):\n+        \"\"\"Test that prefetch can be overridden as a kwarg to `send`.\"\"\"\n+        req = requests.get(httpbin('get'), return_response=False)\n+        req.send(prefetch=False)\n+        # content should not have been prefetched, and iter_lines should succeed\n+        first_line = next(req.response.iter_lines())\n+        self.assertTrue(first_line.strip().startswith('{'))\n \n if __name__ == '__main__':\n     unittest.main()\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#030ead9c36b59d2e18f6381f3f8c96c6e4de0090", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 7 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 3 | Methods Changed: 2 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 9 | Churn Cumulative: 5560 | Contributors (this commit): 77 | Commits (past 90d): 36 | Contributors (cumulative): 77 | DMM Complexity: 0.0\n\nDIFF:\n@@ -458,7 +458,7 @@ class Request(object):\n         except ValueError:\n             return False\n \n-    def send(self, anyway=False, prefetch=True):\n+    def send(self, anyway=False, prefetch=None):\n         \"\"\"Sends the request. Returns True if successful, False if not.\n         If there was an HTTPError during transmission,\n         self.response.status_code will contain the HTTPError code.\n@@ -467,6 +467,9 @@ class Request(object):\n \n         :param anyway: If True, request will be sent, even if it has\n         already been sent.\n+\n+        :param prefetch: If not None, will override the request's own setting\n+        for prefetch.\n         \"\"\"\n \n         # Build the URL\n@@ -626,7 +629,9 @@ class Request(object):\n             self.__dict__.update(r.__dict__)\n \n             # If prefetch is True, mark content as consumed.\n-            if prefetch or self.prefetch:\n+            if prefetch is None:\n+                prefetch = self.prefetch\n+            if prefetch:\n                 # Save the response.\n                 self.response.content\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#000c1053035812ee765a4f4a967eb69dba400a04", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 3 | Churn Cumulative: 5563 | Contributors (this commit): 77 | Commits (past 90d): 37 | Contributors (cumulative): 77 | DMM Complexity: 0.0\n\nDIFF:\n@@ -291,7 +291,8 @@ class Request(object):\n                     proxies=self.proxies,\n                     verify=self.verify,\n                     session=self.session,\n-                    cert=self.cert\n+                    cert=self.cert,\n+                    prefetch=self.prefetch,\n                 )\n \n                 request.send()\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#291859c199c481bf1e304e39613ca90b6f55f9f8", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 2 | Methods Changed: 2 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 857 | Contributors (this commit): 16 | Commits (past 90d): 18 | Contributors (cumulative): 16 | DMM Complexity: None\n\nDIFF:\n@@ -986,7 +986,7 @@ class RequestsTestSuite(TestSetup, TestBaseMixin, unittest.TestCase):\n         # this attempt to iterate will crash because the content has already\n         # been read.\n         first_line = next(res.iter_lines())\n-        self.assertTrue(first_line.strip().startswith('{'))\n+        self.assertTrue(first_line.strip().decode('utf-8').startswith('{'))\n \n     def test_prefetch_return_response_interaction(self):\n         \"\"\"Test that prefetch can be overridden as a kwarg to `send`.\"\"\"\n@@ -994,7 +994,7 @@ class RequestsTestSuite(TestSetup, TestBaseMixin, unittest.TestCase):\n         req.send(prefetch=False)\n         # content should not have been prefetched, and iter_lines should succeed\n         first_line = next(req.response.iter_lines())\n-        self.assertTrue(first_line.strip().startswith('{'))\n+        self.assertTrue(first_line.strip().decode('utf-8').startswith('{'))\n \n if __name__ == '__main__':\n     unittest.main()\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#6166ba7e131ef77f9748488a02dc5e699928a17d", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 7 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 2/2 | Churn Δ: 7 | Churn Cumulative: 5570 | Contributors (this commit): 77 | Commits (past 90d): 37 | Contributors (cumulative): 77 | DMM Complexity: 0.0\n\nDIFF:\n@@ -71,6 +71,13 @@ class Request(object):\n         self.timeout = timeout\n \n         #: Request URL.\n+        #: Accept objects that have string representations.\n+        try:\n+            self.url = unicode(url)\n+        except NameError:\n+            # We're on Python 3.\n+            self.url = str(url)\n+        except UnicodeDecodeError:\n             self.url = url\n \n         #: Dictionary of HTTP Headers to attach to the :class:`Request <Request>`.\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#875c9e18ab967464d13a2ea804119316c73277bb", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 18 | Lines Deleted: 0 | Files Changed: 2 | Hunks: 3 | Methods Changed: 3 | Complexity Δ (Sum/Max): -2/0 | Churn Δ: 18 | Churn Cumulative: 6463 | Contributors (this commit): 79 | Commits (past 90d): 58 | Contributors (cumulative): 95 | DMM Complexity: 0.8461538461538461\n\nDIFF:\n@@ -8,6 +8,7 @@ This module contains the primary objects that power Requests.\n \"\"\"\n \n import os\n+import socket\n from datetime import datetime\n \n from .hooks import dispatch_hook, HOOKS\n@@ -608,6 +609,9 @@ class Request(object):\n                 )\n                 self.sent = True\n \n+            except socket.error as sockerr:\n+                raise ConnectionError(sockerr)\n+\n             except MaxRetryError as e:\n                 raise ConnectionError(e)\n \n\n@@ -811,6 +811,20 @@ class RequestsTestSuite(TestSetup, TestBaseMixin, unittest.TestCase):\n         assert ds1.prefetch\n         assert not ds2.prefetch\n \n+    def test_connection_error(self):\n+        try:\n+            get('http://localhost:1/nope')\n+        except requests.ConnectionError:\n+            pass\n+        else:\n+            assert False\n+\n+    def test_connection_error_with_safe_mode(self):\n+        config = {'safe_mode': True}\n+        r = get('http://localhost:1/nope', allow_redirects=False, config=config)\n+        assert r.content == None\n+\n+\n     # def test_invalid_content(self):\n     #     # WARNING: if you're using a terrible DNS provider (comcast),\n     #     # this will fail.\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#4da4792844017b7b7e5f78cf106e34a68a08af96", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 3 | Lines Deleted: 3 | Files Changed: 1 | Hunks: 3 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 6 | Churn Cumulative: 91 | Contributors (this commit): 4 | Commits (past 90d): 1 | Contributors (cumulative): 4 | DMM Complexity: None\n\nDIFF:\n@@ -110,7 +110,7 @@ class RequestsTestSuite(unittest.TestCase):\n         s = requests.session()\n         s.get(url='http://tinyurl.com/preview.php?disable=1')\n         # we should have set a cookie for tinyurl: preview=0\n-        self.assertIn('preview', s.cookies)\n+        self.assertTrue('preview' in s.cookies)\n         self.assertEqual(s.cookies['preview'], '0')\n         self.assertEqual(list(s.cookies)[0].name, 'preview')\n         self.assertEqual(list(s.cookies)[0].domain, 'tinyurl.com')\n@@ -118,13 +118,13 @@ class RequestsTestSuite(unittest.TestCase):\n         # get cookies on another domain\n         r2 = s.get(url='http://httpbin.org/cookies')\n         # the cookie is not there\n-        self.assertNotIn('preview', json.loads(r2.text)['cookies'])\n+        self.assertTrue('preview' not in json.loads(r2.text)['cookies'])\n \n         # this redirects to another domain, httpbin.org\n         # cookies of the first domain should NOT be sent to the next one\n         r3 = s.get(url='http://tinyurl.com/7zp3jnr')\n         assert r3.url == 'http://httpbin.org/cookies'\n-        self.assertNotIn('preview', json.loads(r2.text)['cookies'])\n+        self.assertTrue('preview' not in json.loads(r2.text)['cookies'])\n \n if __name__ == '__main__':\n     unittest.main()\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#cfa627ae62cebff20edf0816ce327c61603ef6a8", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 66 | Lines Deleted: 15 | Files Changed: 2 | Hunks: 12 | Methods Changed: 4 | Complexity Δ (Sum/Max): 10/5 | Churn Δ: 81 | Churn Cumulative: 6544 | Contributors (this commit): 80 | Commits (past 90d): 89 | Contributors (cumulative): 97 | DMM Complexity: 1.0\n\nDIFF:\n@@ -344,16 +344,33 @@ class Request(object):\n             return data\n \n     def _encode_files(self, files):\n+        \"\"\"Build the body for a multipart/form-data request.\n \n+        Will successfully encode files when passed as a dict or a list of\n+        2-tuples. Order is retained if data is a list of 2-tuples but abritrary\n+        if parameters are supplied as a dict.\n+\n+        \"\"\"\n         if (not files) or isinstance(self.data, str):\n             return None\n \n+        def tuples(obj):\n+            \"\"\"Ensure 2-tuples. A dict or a 2-tuples list can be supplied.\"\"\"\n+            if isinstance(obj, dict):\n+                return list(obj.items())\n+            elif hasattr(obj, '__iter__'):\n                 try:\n-            fields = self.data.copy()\n-        except AttributeError:\n-            fields = dict(self.data)\n+                    dict(obj)\n+                except ValueError:\n+                    pass\n+                else:\n+                    return obj\n+            raise ValueError('A dict or a list of 2-tuples required.')\n \n-        for (k, v) in list(files.items()):\n+        # 2-tuples containing both file and data fields.\n+        fields = []\n+\n+        for k, v in tuples(files):\n             # support for explicit filename\n             if isinstance(v, (tuple, list)):\n                 fn, fp = v\n@@ -362,18 +379,18 @@ class Request(object):\n                 fp = v\n             if isinstance(fp, (bytes, str)):\n                 fp = StringIO(fp)\n-            fields.update({k: (fn, fp.read())})\n+            fields.append((k, (fn, fp.read())))\n \n-        for field in fields:\n-            if isinstance(fields[field], numeric_types):\n-                fields[field] = str(fields[field])\n-            if isinstance(fields[field], list):\n-                newvalue = ', '.join(fields[field])\n-                fields[field] = newvalue\n+        for k, vs in tuples(self.data):\n+            if isinstance(vs, list):\n+                for v in vs:\n+                    fields.append((k, str(v)))\n+            else:\n+                fields.append((k, str(vs)))\n \n-        (body, content_type) = encode_multipart_formdata(fields)\n+        body, content_type = encode_multipart_formdata(fields)\n \n-        return (body, content_type)\n+        return body, content_type\n \n     @property\n     def full_url(self):\n\n@@ -981,10 +981,10 @@ class RequestsTestSuite(TestSetup, TestBaseMixin, unittest.TestCase):\n         list for a value in the data argument.\"\"\"\n \n         data = {'field': ['a', 'b']}\n-        files = {'file': 'Garbled data'}\n+        files = {'field': 'Garbled data'}\n         r = post(httpbin('post'), data=data, files=files)\n         t = json.loads(r.text)\n-        self.assertEqual(t.get('form'), {'field': 'a, b'})\n+        self.assertEqual(t.get('form'), {'field': ['a', 'b']})\n         self.assertEqual(t.get('files'), files)\n \n     def test_str_data_content_type(self):\n@@ -1028,5 +1028,39 @@ class RequestsTestSuite(TestSetup, TestBaseMixin, unittest.TestCase):\n         r = get(URL())\n         self.assertEqual(r.status_code, 200)\n \n+    def test_post_fields_with_multiple_values_and_files_as_tuples(self):\n+        \"\"\"Test that it is possible to POST multiple data and file fields\n+        with the same name.\"\"\"\n+\n+        data = [\n+            ('__field__', '__value__'),\n+            ('__field__', '__value__'),\n+        ]\n+        files = [\n+            ('__field__', '__value__'),\n+            ('__field__', '__value__'),\n+        ]\n+\n+        r = post(httpbin('post'), data=data, files=files)\n+        t = json.loads(r.text)\n+\n+        self.assertEqual(t.get('form'), {\n+            '__field__': [\n+                '__value__',\n+                '__value__',\n+            ]\n+        })\n+\n+        # It's not currently possible to test for multiple file fields with\n+        # the same name against httpbin so we need to inspect the encoded\n+        # body manually.\n+        request = r.request\n+        body, content_type = request._encode_files(request.files)\n+        file_field = ('Content-Disposition: form-data;'\n+                      ' name=\"__field__\"; filename=\"__field__\"')\n+        self.assertEqual(body.count('__value__'), 4)\n+        self.assertEqual(body.count(file_field), 2)\n+\n+\n if __name__ == '__main__':\n     unittest.main()\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#dee3693ea004e2f859e4fba4cfedb376e4d0bb2b", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 11 | Lines Deleted: 3 | Files Changed: 2 | Hunks: 6 | Methods Changed: 3 | Complexity Δ (Sum/Max): 2/1 | Churn Δ: 14 | Churn Cumulative: 6558 | Contributors (this commit): 80 | Commits (past 90d): 91 | Contributors (cumulative): 97 | DMM Complexity: 0.5\n\nDIFF:\n@@ -10,6 +10,7 @@ This module contains the primary objects that power Requests.\n import os\n import socket\n from datetime import datetime\n+from io import BytesIO\n \n from .hooks import dispatch_hook, HOOKS\n from .structures import CaseInsensitiveDict\n@@ -377,8 +378,10 @@ class Request(object):\n             else:\n                 fn = guess_filename(v) or k\n                 fp = v\n-            if isinstance(fp, (bytes, str)):\n+            if isinstance(fp, str):\n                 fp = StringIO(fp)\n+            if isinstance(fp, bytes):\n+                fp = BytesIO(fp)\n             fields.append((k, (fn, fp.read())))\n \n         for k, vs in tuples(self.data):\n\n@@ -7,7 +7,6 @@\n import sys\n import os\n sys.path.insert(0, os.path.abspath('..'))\n-\n import json\n import os\n import unittest\n@@ -1030,7 +1029,9 @@ class RequestsTestSuite(TestSetup, TestBaseMixin, unittest.TestCase):\n \n     def test_post_fields_with_multiple_values_and_files_as_tuples(self):\n         \"\"\"Test that it is possible to POST multiple data and file fields\n-        with the same name.\"\"\"\n+        with the same name.\n+        https://github.com/kennethreitz/requests/pull/746\n+        \"\"\"\n \n         data = [\n             ('__field__', '__value__'),\n@@ -1061,6 +1062,10 @@ class RequestsTestSuite(TestSetup, TestBaseMixin, unittest.TestCase):\n         self.assertEqual(body.count('__value__'), 4)\n         self.assertEqual(body.count(file_field), 2)\n \n+    def test_bytes_files(self):\n+        \"\"\"Test that `bytes` can be used as the values of `files`.\"\"\"\n+        post(httpbin('post'), files={'test': b'test'})\n+\n \n if __name__ == '__main__':\n     unittest.main()\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#88c762e256647a03f10a7a8c8707043a1b33aa5b", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 5 | Lines Deleted: 9 | Files Changed: 1 | Hunks: 3 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 14 | Churn Cumulative: 950 | Contributors (this commit): 18 | Commits (past 90d): 23 | Contributors (cumulative): 18 | DMM Complexity: 0.0\n\nDIFF:\n@@ -1033,16 +1033,12 @@ class RequestsTestSuite(TestSetup, TestBaseMixin, unittest.TestCase):\n         https://github.com/kennethreitz/requests/pull/746\n         \"\"\"\n \n-        data = [\n-            ('__field__', '__value__'),\n-            ('__field__', '__value__'),\n-        ]\n-        files = [\n+        fields = [\n             ('__field__', '__value__'),\n             ('__field__', '__value__'),\n         ]\n \n-        r = post(httpbin('post'), data=data, files=files)\n+        r = post(httpbin('post'), data=fields, files=fields)\n         t = json.loads(r.text)\n \n         self.assertEqual(t.get('form'), {\n@@ -1057,9 +1053,9 @@ class RequestsTestSuite(TestSetup, TestBaseMixin, unittest.TestCase):\n         # body manually.\n         request = r.request\n         body, content_type = request._encode_files(request.files)\n-        file_field = ('Content-Disposition: form-data;'\n-                      ' name=\"__field__\"; filename=\"__field__\"')\n-        self.assertEqual(body.count('__value__'), 4)\n+        file_field = (b'Content-Disposition: form-data;'\n+                      b' name=\"__field__\"; filename=\"__field__\"')\n+        self.assertEqual(body.count(b'__value__'), 4)\n         self.assertEqual(body.count(file_field), 2)\n \n     def test_bytes_files(self):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#e08b853a0c001bda8215819c9cbcb7381e8c2c24", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 5 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 5 | Churn Cumulative: 955 | Contributors (this commit): 18 | Commits (past 90d): 24 | Contributors (cumulative): 18 | DMM Complexity: 1.0\n\nDIFF:\n@@ -19,6 +19,7 @@ from requests.compat import str, StringIO\n from requests import HTTPError\n from requests import get, post, head, put\n from requests.auth import HTTPBasicAuth, HTTPDigestAuth\n+from requests.exceptions import InvalidURL\n \n if 'HTTPBIN_URL' not in os.environ:\n     os.environ['HTTPBIN_URL'] = 'http://httpbin.org/'\n@@ -1062,6 +1063,10 @@ class RequestsTestSuite(TestSetup, TestBaseMixin, unittest.TestCase):\n         \"\"\"Test that `bytes` can be used as the values of `files`.\"\"\"\n         post(httpbin('post'), files={'test': b'test'})\n \n+    def test_invalid_urls_throw_requests_exception(self):\n+        \"\"\"Test that URLs with invalid labels throw\n+        Requests.exceptions.InvalidURL instead of UnicodeError.\"\"\"\n+        self.assertRaises(InvalidURL, get, 'http://.google.com/')\n \n if __name__ == '__main__':\n     unittest.main()\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#79d53d3b8acf021203853e12e8fe0eeb0b742b51", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 3 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 3 | Churn Cumulative: 5625 | Contributors (this commit): 79 | Commits (past 90d): 40 | Contributors (cumulative): 79 | DMM Complexity: 0.0\n\nDIFF:\n@@ -413,7 +413,10 @@ class Request(object):\n         if not scheme in SCHEMAS:\n             raise InvalidSchema(\"Invalid scheme %r\" % scheme)\n \n+        try:\n             netloc = netloc.encode('idna').decode('utf-8')\n+        except UnicodeError:\n+            raise InvalidURL('URL has an invalid label.')\n \n         if not path:\n             path = '/'\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#00b4ca3b744fa25d3c4aabf49774eaa40caf9f33", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 5627 | Contributors (this commit): 79 | Commits (past 90d): 39 | Contributors (cumulative): 79 | DMM Complexity: None\n\nDIFF:\n@@ -556,7 +556,7 @@ class Request(object):\n         no_proxy = filter(lambda x:x.strip(), self.proxies.get('no', '').split(','))\n         proxy = self.proxies.get(_p.scheme)\n \n-        if proxy and not any(map(_p.netloc.endswith, no_proxy)):\n+        if proxy and not any(map(_p.hostname.endswith, no_proxy)):\n             conn = poolmanager.proxy_from_url(proxy)\n             _proxy = urlparse(proxy)\n             if '@' in _proxy.netloc:\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#57b4d39749021305a2d5850e642537224d30611f", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 0 | Lines Deleted: 5 | Files Changed: 1 | Hunks: 3 | Methods Changed: 1 | Complexity Δ (Sum/Max): -1/0 | Churn Δ: 5 | Churn Cumulative: 453 | Contributors (this commit): 8 | Commits (past 90d): 2 | Contributors (cumulative): 8 | DMM Complexity: 1.0\n\nDIFF:\n@@ -25,8 +25,6 @@ Available hooks:\n \n \"\"\"\n \n-import traceback\n-\n \n HOOKS = ('args', 'pre_request', 'pre_send', 'post_request', 'response')\n \n@@ -42,12 +40,9 @@ def dispatch_hook(key, hooks, hook_data):\n             hooks = [hooks]\n \n         for hook in hooks:\n-            try:\n             _hook_data = hook(hook_data)\n             if _hook_data is not None:\n                 hook_data = _hook_data\n \n-            except Exception:\n-                traceback.print_exc()\n \n     return hook_data\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#42d0a2169eb894df0fc3c3788925bfd107765597", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 40 | Lines Deleted: 20 | Files Changed: 16 | Hunks: 59 | Methods Changed: 0 | Complexity Δ (Sum/Max): -4/1 | Churn Δ: 60 | Churn Cumulative: 13255 | Contributors (this commit): 106 | Commits (past 90d): 115 | Contributors (cumulative): 228 | DMM Complexity: None\n\nDIFF:\n@@ -14,6 +14,7 @@ This module implements the Requests API.\n from . import sessions\n from .safe_mode import catch_exceptions_if_in_safe_mode\n \n+\n @catch_exceptions_if_in_safe_mode\n def request(method, url, **kwargs):\n     \"\"\"Constructs and sends a :class:`Request <Request>`.\n@@ -52,6 +53,7 @@ def request(method, url, **kwargs):\n         if adhoc_session:\n             session.close()\n \n+\n def get(url, **kwargs):\n     \"\"\"Sends a GET request. Returns :class:`Response` object.\n \n\n@@ -34,6 +34,7 @@ log = logging.getLogger(__name__)\n \n CONTENT_TYPE_FORM_URLENCODED = 'application/x-www-form-urlencoded'\n \n+\n def _basic_auth_str(username, password):\n     \"\"\"Returns a Basic Auth string.\"\"\"\n \n@@ -239,6 +240,7 @@ class HTTPDigestAuth(AuthBase):\n         r.register_hook('response', self.handle_401)\n         return r\n \n+\n def _negotiate_value(r):\n     \"\"\"Extracts the gssapi authentication token from the appropriate header\"\"\"\n \n@@ -252,6 +254,7 @@ def _negotiate_value(r):\n \n     return None\n \n+\n class HTTPKerberosAuth(AuthBase):\n     \"\"\"Attaches HTTP GSSAPI/Kerberos Authentication to the given Request object.\"\"\"\n     def __init__(self, require_mutual_auth=True):\n\n@@ -112,4 +112,3 @@ elif is_py3:\n     bytes = bytes\n     basestring = (str,bytes)\n     numeric_types = (int, float)\n-\n\n@@ -14,6 +14,7 @@ try:\n except ImportError:\n     import dummy_threading as threading\n \n+\n class MockRequest(object):\n     \"\"\"Wraps a `requests.Request` to mimic a `urllib2.Request`.\n \n@@ -66,6 +67,7 @@ class MockRequest(object):\n     def get_new_headers(self):\n         return self._new_headers\n \n+\n class MockResponse(object):\n     \"\"\"Wraps a `httplib.HTTPMessage` to mimic a `urllib.addinfourl`.\n \n@@ -86,6 +88,7 @@ class MockResponse(object):\n     def getheaders(self, name):\n         self._headers.getheaders(name)\n \n+\n def extract_cookies_to_jar(jar, request, response):\n     \"\"\"Extract the cookies from the response into a CookieJar.\n \n@@ -99,12 +102,14 @@ def extract_cookies_to_jar(jar, request, response):\n     res = MockResponse(response._original_response.msg)\n     jar.extract_cookies(res, req)\n \n+\n def get_cookie_header(jar, request):\n     \"\"\"Produce an appropriate Cookie header string to be sent with `request`, or None.\"\"\"\n     r = MockRequest(request)\n     jar.add_cookie_header(r)\n     return r.get_new_headers().get('Cookie')\n \n+\n def remove_cookie_by_name(cookiejar, name, domain=None, path=None):\n     \"\"\"Unsets a cookie by name, by default over all domains and paths.\n \n@@ -120,10 +125,12 @@ def remove_cookie_by_name(cookiejar, name, domain=None, path=None):\n     for domain, path, name in clearables:\n         cookiejar.clear(domain, path, name)\n \n+\n class CookieConflictError(RuntimeError):\n     \"\"\"There are two cookies that meet the criteria specified in the cookie jar.\n     Use .get and .set and include domain and path args in order to be more specific.\"\"\"\n \n+\n class RequestsCookieJar(cookielib.CookieJar, collections.MutableMapping):\n     \"\"\"Compatibility class; is a cookielib.CookieJar, but exposes a dict interface.\n \n@@ -291,6 +298,7 @@ class RequestsCookieJar(cookielib.CookieJar, collections.MutableMapping):\n         \"\"\"This is not implemented. Calling this will throw an exception.\"\"\"\n         raise NotImplementedError\n \n+\n def create_cookie(name, value, **kwargs):\n     \"\"\"Make a cookie from underspecified parameters.\n \n@@ -326,6 +334,7 @@ def create_cookie(name, value, **kwargs):\n \n     return cookielib.Cookie(**result)\n \n+\n def morsel_to_cookie(morsel):\n     \"\"\"Convert a Morsel object into a Cookie containing the one k/v pair.\"\"\"\n     c = create_cookie(\n@@ -349,6 +358,7 @@ def morsel_to_cookie(morsel):\n         )\n     return c\n \n+\n def cookiejar_from_dict(cookie_dict, cookiejar=None):\n     \"\"\"Returns a CookieJar from a key/value dictionary.\n \n\n@@ -8,34 +8,44 @@ This module contains the set of Requests' exceptions.\n \n \"\"\"\n \n+\n class RequestException(RuntimeError):\n     \"\"\"There was an ambiguous exception that occurred while handling your\n     request.\"\"\"\n \n+\n class HTTPError(RequestException):\n     \"\"\"An HTTP error occurred.\"\"\"\n     response = None\n \n+\n class ConnectionError(RequestException):\n     \"\"\"A Connection error occurred.\"\"\"\n \n+\n class SSLError(ConnectionError):\n     \"\"\"An SSL error occurred.\"\"\"\n \n+\n class Timeout(RequestException):\n     \"\"\"The request timed out.\"\"\"\n \n+\n class URLRequired(RequestException):\n     \"\"\"A valid URL is required to make a request.\"\"\"\n \n+\n class TooManyRedirects(RequestException):\n     \"\"\"Too many redirects.\"\"\"\n \n+\n class MissingSchema(RequestException, ValueError):\n     \"\"\"The URL schema (e.g. http or https) is missing.\"\"\"\n \n+\n class InvalidSchema(RequestException, ValueError):\n     \"\"\"See defaults.py for valid schemas.\"\"\"\n \n+\n class InvalidURL(RequestException, ValueError):\n     \"\"\" The URL provided was somehow invalid. \"\"\"\n\n@@ -30,6 +30,7 @@ import traceback\n \n HOOKS = ('args', 'pre_request', 'pre_send', 'post_request', 'response')\n \n+\n def dispatch_hook(key, hooks, hook_data):\n     \"\"\"Dispatches a hook dictionary on a given piece of data.\"\"\"\n \n\n@@ -39,6 +39,7 @@ from .compat import (\n REDIRECT_STATI = (codes.moved, codes.found, codes.other, codes.temporary_moved)\n CONTENT_CHUNK_SIZE = 10 * 1024\n \n+\n class Request(object):\n     \"\"\"The :class:`Request <Request>` object. It carries out all functionality of\n     Requests. Recommended interface is with the Requests functions.\n\n@@ -16,6 +16,7 @@ from .packages.urllib3.response import HTTPResponse\n from .exceptions import RequestException, ConnectionError, HTTPError\n import socket\n \n+\n def catch_exceptions_if_in_safe_mode(function):\n     \"\"\"New implementation of safe_mode. We catch all exceptions at the API level\n     and then return a blank Response object with the error field filled. This decorator\n\n@@ -18,6 +18,7 @@ from .hooks import dispatch_hook\n from .utils import header_expand\n from .packages.urllib3.poolmanager import PoolManager\n \n+\n def merge_kwargs(local_kwarg, default_kwarg):\n     \"\"\"Merges kwarg dictionaries.\n \n@@ -56,7 +57,6 @@ class Session(object):\n         'headers', 'cookies', 'auth', 'timeout', 'proxies', 'hooks',\n         'params', 'config', 'verify', 'cert', 'prefetch']\n \n-\n     def __init__(self,\n         headers=None,\n         cookies=None,\n@@ -240,7 +240,6 @@ class Session(object):\n         # Return the response.\n         return r.response\n \n-\n     def get(self, url, **kwargs):\n         \"\"\"Sends a GET request. Returns :class:`Response` object.\n \n@@ -251,7 +250,6 @@ class Session(object):\n         kwargs.setdefault('allow_redirects', True)\n         return self.request('get', url, **kwargs)\n \n-\n     def options(self, url, **kwargs):\n         \"\"\"Sends a OPTIONS request. Returns :class:`Response` object.\n \n@@ -262,7 +260,6 @@ class Session(object):\n         kwargs.setdefault('allow_redirects', True)\n         return self.request('options', url, **kwargs)\n \n-\n     def head(self, url, **kwargs):\n         \"\"\"Sends a HEAD request. Returns :class:`Response` object.\n \n@@ -273,7 +270,6 @@ class Session(object):\n         kwargs.setdefault('allow_redirects', False)\n         return self.request('head', url, **kwargs)\n \n-\n     def post(self, url, data=None, **kwargs):\n         \"\"\"Sends a POST request. Returns :class:`Response` object.\n \n@@ -284,7 +280,6 @@ class Session(object):\n \n         return self.request('post', url, data=data, **kwargs)\n \n-\n     def put(self, url, data=None, **kwargs):\n         \"\"\"Sends a PUT request. Returns :class:`Response` object.\n \n@@ -295,7 +290,6 @@ class Session(object):\n \n         return self.request('put', url, data=data, **kwargs)\n \n-\n     def patch(self, url, data=None, **kwargs):\n         \"\"\"Sends a PATCH request. Returns :class:`Response` object.\n \n@@ -306,7 +300,6 @@ class Session(object):\n \n         return self.request('patch', url,  data=data, **kwargs)\n \n-\n     def delete(self, url, **kwargs):\n         \"\"\"Sends a DELETE request. Returns :class:`Response` object.\n \n\n@@ -47,6 +47,7 @@ class CaseInsensitiveDict(dict):\n         else:\n             return default\n \n+\n class LookupDict(dict):\n     \"\"\"Dictionary lookup object.\"\"\"\n \n\n@@ -49,6 +49,7 @@ POSSIBLE_CA_BUNDLE_PATHS = [\n         '/etc/ssl/ca-bundle.pem',\n ]\n \n+\n def get_os_ca_bundle_path():\n     \"\"\"Try to pick an available CA certificate bundle provided by the OS.\"\"\"\n     for path in POSSIBLE_CA_BUNDLE_PATHS:\n@@ -60,6 +61,7 @@ def get_os_ca_bundle_path():\n # otherwise, try and use the OS bundle\n DEFAULT_CA_BUNDLE_PATH = CERTIFI_BUNDLE_PATH or get_os_ca_bundle_path()\n \n+\n def dict_to_sequence(d):\n     \"\"\"Returns an internal sequence dictionary update.\"\"\"\n \n@@ -445,6 +447,7 @@ def requote_uri(uri):\n     # or '%')\n     return quote(unquote_unreserved(uri), safe=\"!#$%&'()*+,/:;=?@[]~\")\n \n+\n def get_environ_proxies():\n     \"\"\"Return a dict of environment proxies.\"\"\"\n \n\n@@ -6,6 +6,7 @@ the body of the request is not read.\n \n import gc, os, subprocess, requests, sys\n \n+\n def main():\n     gc.disable()\n \n\n@@ -16,6 +16,7 @@ from requests.compat import cookielib\n sys.path.append('.')\n from test_requests import httpbin, TestBaseMixin\n \n+\n class CookieTests(TestBaseMixin, unittest.TestCase):\n \n     def test_cookies_from_response(self):\n@@ -158,6 +159,7 @@ class CookieTests(TestBaseMixin, unittest.TestCase):\n         self.assertEqual(dictOfCookies, {'myname': 'myvalue'})\n         self.assertEqual(dictOfCookies, r.cookies.get_dict())\n \n+\n class LWPCookieJarTest(TestBaseMixin, unittest.TestCase):\n     \"\"\"Check store/load of cookies to FileCookieJar's, specifically LWPCookieJar's.\"\"\"\n \n@@ -254,6 +256,7 @@ class LWPCookieJarTest(TestBaseMixin, unittest.TestCase):\n         self.assertEqual(len(cookiejar_2), 1)\n         self.assertCookieHas(list(cookiejar_2)[0], name='Persistent', value='CookiesAreScary')\n \n+\n class MozCookieJarTest(LWPCookieJarTest):\n     \"\"\"Same test, but substitute MozillaCookieJar.\"\"\"\n \n\n@@ -52,6 +52,7 @@ class TestSetup(object):\n             # time.sleep(1)\n             _httpbin = True\n \n+\n class TestBaseMixin(object):\n \n     def assertCookieHas(self, cookie, **kwargs):\n@@ -61,6 +62,7 @@ class TestBaseMixin(object):\n             message = 'Failed comparison for %s: %s != %s' % (attr, cookie_attr, expected_value)\n             self.assertEqual(cookie_attr, expected_value, message)\n \n+\n class RequestsTestSuite(TestSetup, TestBaseMixin, unittest.TestCase):\n     \"\"\"Requests test cases.\"\"\"\n \n@@ -377,7 +379,6 @@ class RequestsTestSuite(TestSetup, TestBaseMixin, unittest.TestCase):\n             self.assertTrue(rbody['files'].get('fname.txt'), None)\n             self.assertEqual(rbody['files']['fname.txt'], 'fdata to verify')\n \n-\n     def test_nonzero_evaluation(self):\n \n         for service in SERVICES:\n@@ -824,7 +825,6 @@ class RequestsTestSuite(TestSetup, TestBaseMixin, unittest.TestCase):\n         r = get('http://localhost:1/nope', allow_redirects=False, config=config)\n         assert r.content == None\n \n-\n     # def test_invalid_content(self):\n     #     # WARNING: if you're using a terrible DNS provider (comcast),\n     #     # this will fail.\n@@ -940,7 +940,6 @@ class RequestsTestSuite(TestSetup, TestBaseMixin, unittest.TestCase):\n         s.config['danger_mode'] = True\n         s.get(httpbin('redirect', '4'))\n \n-\n     def test_empty_response(self):\n         r = requests.get(httpbin('status', '404'))\n         r.text\n\n@@ -25,17 +25,14 @@ class RequestsTestSuite(unittest.TestCase):\n     def test_addition(self):\n         assert (1 + 1) == 2\n \n-\n     def test_ssl_hostname_ok(self):\n         requests.get('https://github.com', verify=True)\n \n-\n     def test_ssl_hostname_not_ok(self):\n         requests.get('https://kennethreitz.com', verify=False)\n \n         self.assertRaises(requests.exceptions.SSLError, requests.get, 'https://kennethreitz.com')\n \n-\n     def test_ssl_hostname_session_not_ok(self):\n \n         s = requests.session()\n@@ -44,7 +41,6 @@ class RequestsTestSuite(unittest.TestCase):\n \n         s.get('https://kennethreitz.com', verify=False)\n \n-\n     def test_binary_post(self):\n         '''We need to be careful how we build the utf-8 string since\n         unicode literals are a syntax error in python3\n@@ -59,13 +55,10 @@ class RequestsTestSuite(unittest.TestCase):\n             raise EnvironmentError('Flesh out this test for your environment.')\n         requests.post('http://www.google.com/', data=utf8_string)\n \n-\n-\n     def test_unicode_error(self):\n         url = 'http://blip.fm/~1abvfu'\n         requests.get(url)\n \n-\n     def test_chunked_head_redirect(self):\n         url = \"http://t.co/NFrx0zLG\"\n         r = requests.head(url, allow_redirects=True)\n@@ -128,4 +121,3 @@ class RequestsTestSuite(unittest.TestCase):\n \n if __name__ == '__main__':\n     unittest.main()\n-\n\n@@ -9,6 +9,7 @@ import unittest\n sys.path.insert(0, os.path.abspath('..'))\n import requests\n \n+\n class HTTPSTest(unittest.TestCase):\n     \"\"\"Smoke test for https functionality.\"\"\"\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
