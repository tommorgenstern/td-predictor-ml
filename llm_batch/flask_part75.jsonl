{"custom_id": "flask#310fbfcf64f40f237068fddbbbe45315f9935eca", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 163 | Lines Deleted: 48 | Files Changed: 52 | Hunks: 75 | Methods Changed: 2 | Complexity Δ (Sum/Max): 24/17 | Churn Δ: 211 | Churn Cumulative: 28407 | Contributors (this commit): 235 | Commits (past 90d): 93 | Contributors (cumulative): 583 | DMM Complexity: 1.0\n\nDIFF:\n@@ -17,6 +17,8 @@ import pkg_resources\n import time\n import datetime\n \n+from sphinx.application import Sphinx\n+\n BUILD_DATE = datetime.datetime.utcfromtimestamp(int(os.environ.get('SOURCE_DATE_EPOCH', time.time())))\n \n # If extensions (or modules to document with autodoc) are in another directory,\n@@ -296,3 +298,17 @@ def unwrap_decorators():\n \n unwrap_decorators()\n del unwrap_decorators\n+\n+\n+def setup(app: Sphinx):\n+    def cut_module_meta(app, what, name, obj, options, lines):\n+        \"\"\"Remove metadata from autodoc output.\"\"\"\n+        if what != 'module':\n+            return\n+\n+        lines[:] = [\n+            line for line in lines\n+            if not line.startswith((':copyright:', ':license:'))\n+        ]\n+\n+    app.connect('autodoc-process-docstring', cut_module_meta)\n\n@@ -1,3 +1,12 @@\n+# -*- coding: utf-8 -*-\n+\"\"\"\n+Blueprint Example\n+~~~~~~~~~~~~~~~~~\n+\n+:copyright: © 2010 by the Pallets team.\n+:license: BSD, see LICENSE for more details.\n+\"\"\"\n+\n from flask import Flask\n from simple_page.simple_page import simple_page\n \n\n@@ -1,10 +1,12 @@\n # -*- coding: utf-8 -*-\n \"\"\"\n Blueprint Example Tests\n-    ~~~~~~~~~~~~~~\n+~~~~~~~~~~~~~~~~~~~~~~~\n \n-    Tests the Blueprint example app\n+:copyright: © 2010 by the Pallets team.\n+:license: BSD, see LICENSE for more details.\n \"\"\"\n+\n import pytest\n \n import blueprintexample\n\n@@ -6,7 +6,7 @@\n     A microblog example application written as Flask tutorial with\n     Flask and sqlite3.\n \n-    :copyright: (c) 2015 by Armin Ronacher.\n+    :copyright: © 2010 by the Pallets team.\n     :license: BSD, see LICENSE for more details.\n \"\"\"\n \n\n@@ -6,7 +6,7 @@\n     A microblog example application written as Flask tutorial with\n     Flask and sqlite3.\n \n-    :copyright: (c) 2015 by Armin Ronacher.\n+    :copyright: © 2010 by the Pallets team.\n     :license: BSD, see LICENSE for more details.\n \"\"\"\n \n\n@@ -5,7 +5,7 @@\n \n     Tests the Flaskr application.\n \n-    :copyright: (c) 2015 by Armin Ronacher.\n+    :copyright: © 2010 by the Pallets team.\n     :license: BSD, see LICENSE for more details.\n \"\"\"\n \n\n@@ -5,7 +5,7 @@\n \n     Tests the Flaskr application.\n \n-    :copyright: (c) 2015 by Armin Ronacher.\n+    :copyright: © 2010 by the Pallets team.\n     :license: BSD, see LICENSE for more details.\n \"\"\"\n \n\n@@ -5,9 +5,10 @@\n \n     A simple application that shows how Flask and jQuery get along.\n \n-    :copyright: (c) 2015 by Armin Ronacher.\n+    :copyright: © 2010 by the Pallets team.\n     :license: BSD, see LICENSE for more details.\n \"\"\"\n+\n from flask import Flask, jsonify, render_template, request\n app = Flask(__name__)\n \n\n@@ -5,7 +5,7 @@\n \n     A microblogging application written with Flask and sqlite3.\n \n-    :copyright: (c) 2015 by Armin Ronacher.\n+    :copyright: © 2010 by the Pallets team.\n     :license: BSD, see LICENSE for more details.\n \"\"\"\n \n\n@@ -5,9 +5,10 @@\n \n     Tests the MiniTwit application.\n \n-    :copyright: (c) 2015 by Armin Ronacher.\n+    :copyright: © 2010 by the Pallets team.\n     :license: BSD, see LICENSE for more details.\n \"\"\"\n+\n import os\n import tempfile\n import pytest\n\n@@ -1,3 +1,12 @@\n+# -*- coding: utf-8 -*-\n+\"\"\"\n+Larger App Tests\n+~~~~~~~~~~~~~~~~\n+\n+:copyright: © 2010 by the Pallets team.\n+:license: BSD, see LICENSE for more details.\n+\"\"\"\n+\n from yourapplication import app\n import pytest\n \n\n@@ -1,3 +1,12 @@\n+# -*- coding: utf-8 -*-\n+\"\"\"\n+yourapplication\n+~~~~~~~~~~~~~~~\n+\n+:copyright: © 2010 by the Pallets team.\n+:license: BSD, see LICENSE for more details.\n+\"\"\"\n+\n from flask import Flask\n app = Flask('yourapplication')\n \n\n@@ -1,3 +1,12 @@\n+# -*- coding: utf-8 -*-\n+\"\"\"\n+yourapplication.views\n+~~~~~~~~~~~~~~~~~~~~~\n+\n+:copyright: © 2010 by the Pallets team.\n+:license: BSD, see LICENSE for more details.\n+\"\"\"\n+\n from yourapplication import app\n \n @app.route('/')\n\n@@ -6,7 +6,7 @@\n     A microframework based on Werkzeug.  It's extensively documented\n     and follows best practice patterns.\n \n-    :copyright: (c) 2015 by Armin Ronacher.\n+    :copyright: © 2010 by the Pallets team.\n     :license: BSD, see LICENSE for more details.\n \"\"\"\n \n\n@@ -5,11 +5,10 @@\n \n     Alias for flask.run for the command line.\n \n-    :copyright: (c) 2015 by Armin Ronacher.\n+    :copyright: © 2010 by the Pallets team.\n     :license: BSD, see LICENSE for more details.\n \"\"\"\n \n-\n if __name__ == '__main__':\n     from .cli import main\n     main(as_module=True)\n\n@@ -7,9 +7,10 @@\n     version of six so we don't have to depend on a specific version\n     of it.\n \n-    :copyright: (c) 2015 by Armin Ronacher.\n+    :copyright: © 2010 by the Pallets team.\n     :license: BSD, see LICENSE for more details.\n \"\"\"\n+\n import sys\n \n PY2 = sys.version_info[0] == 2\n\n@@ -5,9 +5,10 @@\n \n     This module implements the central WSGI application object.\n \n-    :copyright: (c) 2015 by Armin Ronacher.\n+    :copyright: © 2010 by the Pallets team.\n     :license: BSD, see LICENSE for more details.\n \"\"\"\n+\n import os\n import sys\n import warnings\n\n@@ -6,9 +6,10 @@\n     Blueprints are the recommended way to implement larger or more\n     pluggable applications in Flask 0.7 and later.\n \n-    :copyright: (c) 2015 by Armin Ronacher.\n+    :copyright: © 2010 by the Pallets team.\n     :license: BSD, see LICENSE for more details.\n \"\"\"\n+\n from functools import update_wrapper\n \n from .helpers import _PackageBoundObject, _endpoint_from_view_func\n\n@@ -5,9 +5,10 @@\n \n     A simple command line application to run flask apps.\n \n-    :copyright: (c) 2015 by Armin Ronacher.\n+    :copyright: © 2010 by the Pallets team.\n     :license: BSD, see LICENSE for more details.\n \"\"\"\n+\n from __future__ import print_function\n \n import ast\n\n@@ -5,7 +5,7 @@\n \n     Implements the configuration related objects.\n \n-    :copyright: (c) 2015 by Armin Ronacher.\n+    :copyright: © 2010 by the Pallets team.\n     :license: BSD, see LICENSE for more details.\n \"\"\"\n \n\n@@ -5,7 +5,7 @@\n \n     Implements the objects required to keep the context.\n \n-    :copyright: (c) 2015 by Armin Ronacher.\n+    :copyright: © 2010 by the Pallets team.\n     :license: BSD, see LICENSE for more details.\n \"\"\"\n \n\n@@ -5,9 +5,10 @@\n \n     Various helpers to make the development experience better.\n \n-    :copyright: (c) 2015 by Armin Ronacher.\n+    :copyright: © 2010 by the Pallets team.\n     :license: BSD, see LICENSE for more details.\n \"\"\"\n+\n import os\n from warnings import warn\n \n\n@@ -6,7 +6,7 @@\n     Defines all the global objects that are proxies to the current\n     active context.\n \n-    :copyright: (c) 2015 by Armin Ronacher.\n+    :copyright: © 2010 by the Pallets team.\n     :license: BSD, see LICENSE for more details.\n \"\"\"\n \n\n@@ -5,7 +5,7 @@\n \n     Implements various helpers.\n \n-    :copyright: (c) 2015 by Armin Ronacher.\n+    :copyright: © 2010 by the Pallets team.\n     :license: BSD, see LICENSE for more details.\n \"\"\"\n \n\n@@ -1,4 +1,12 @@\n # -*- coding: utf-8 -*-\n+\"\"\"\n+flask.json\n+~~~~~~~~~~\n+\n+:copyright: © 2010 by the Pallets team.\n+:license: BSD, see LICENSE for more details.\n+\"\"\"\n+\n import io\n import uuid\n from datetime import date, datetime\n\n@@ -1,3 +1,4 @@\n+# -*- coding: utf-8 -*-\n \"\"\"\n Tagged JSON\n ~~~~~~~~~~~\n@@ -37,6 +38,8 @@ processes dicts first, so insert the new tag at the front of the order since\n \n     app.session_interface.serializer.register(TagOrderedDict, 0)\n \n+:copyright: © 2010 by the Pallets team.\n+:license: BSD, see LICENSE for more details.\n \"\"\"\n \n from base64 import b64decode, b64encode\n\n@@ -1,3 +1,12 @@\n+# -*- coding: utf-8 -*-\n+\"\"\"\n+flask.logging\n+~~~~~~~~~~~~~\n+\n+:copyright: © 2010 by the Pallets team.\n+:license: BSD, see LICENSE for more details.\n+\"\"\"\n+\n from __future__ import absolute_import\n \n import logging\n\n@@ -5,9 +5,10 @@\n \n     Implements cookie based sessions based on itsdangerous.\n \n-    :copyright: (c) 2015 by Armin Ronacher.\n+    :copyright: © 2010 by the Pallets team.\n     :license: BSD, see LICENSE for more details.\n \"\"\"\n+\n import hashlib\n import warnings\n from collections import MutableMapping\n\n@@ -6,9 +6,10 @@\n     Implements signals based on blinker if available, otherwise\n     falls silently back to a noop.\n \n-    :copyright: (c) 2015 by Armin Ronacher.\n+    :copyright: © 2010 by the Pallets team.\n     :license: BSD, see LICENSE for more details.\n \"\"\"\n+\n signals_available = False\n try:\n     from blinker import Namespace\n\n@@ -5,9 +5,10 @@\n \n     Implements the bridge to Jinja2.\n \n-    :copyright: (c) 2015 by Armin Ronacher.\n+    :copyright: © 2010 by the Pallets team.\n     :license: BSD, see LICENSE for more details.\n \"\"\"\n+\n from jinja2 import BaseLoader, Environment as BaseEnvironment, \\\n      TemplateNotFound\n \n\n@@ -6,7 +6,7 @@\n     Implements test support helpers.  This module is lazily imported\n     and usually not used in production environments.\n \n-    :copyright: (c) 2015 by Armin Ronacher.\n+    :copyright: © 2010 by the Pallets team.\n     :license: BSD, see LICENSE for more details.\n \"\"\"\n \n\n@@ -5,9 +5,10 @@\n \n     This module provides class-based views inspired by the ones in Django.\n \n-    :copyright: (c) 2015 by Armin Ronacher.\n+    :copyright: © 2010 by the Pallets team.\n     :license: BSD, see LICENSE for more details.\n \"\"\"\n+\n from .globals import request\n from ._compat import with_metaclass\n \n\n@@ -5,9 +5,10 @@\n \n     Implements the WSGI wrappers (request and response).\n \n-    :copyright: (c) 2015 by Armin Ronacher.\n+    :copyright: © 2010 by the Pallets team.\n     :license: BSD, see LICENSE for more details.\n \"\"\"\n+\n from werkzeug.exceptions import BadRequest\n from werkzeug.wrappers import Request as RequestBase, Response as ResponseBase\n \n\n@@ -1,4 +1,5 @@\n #!/usr/bin/env python\n+# -*- coding: utf-8 -*-\n import io\n import re\n from setuptools import setup\n@@ -16,6 +17,8 @@ setup(\n     license='BSD',\n     author='Armin Ronacher',\n     author_email='armin.ronacher@active-4.com',\n+    maintainer='Pallets team',\n+    maintainer_email='contact@palletsprojects.com',\n     description='A simple framework for building complex web applications.',\n     long_description=readme,\n     packages=['flask', 'flask.json'],\n\n@@ -3,9 +3,10 @@\n     tests.conftest\n     ~~~~~~~~~~~~~~\n \n-    :copyright: (c) 2015 by the Flask Team, see AUTHORS for more details.\n+    :copyright: © 2010 by the Pallets team.\n     :license: BSD, see LICENSE for more details.\n \"\"\"\n+\n import gc\n import os\n import pkgutil\n\n@@ -5,7 +5,7 @@\n \n     Tests the application context.\n \n-    :copyright: (c) 2015 by Armin Ronacher.\n+    :copyright: © 2010 by the Pallets team.\n     :license: BSD, see LICENSE for more details.\n \"\"\"\n \n\n@@ -5,7 +5,7 @@\n \n     The basic functionality.\n \n-    :copyright: (c) 2015 by Armin Ronacher.\n+    :copyright: © 2010 by the Pallets team.\n     :license: BSD, see LICENSE for more details.\n \"\"\"\n \n\n@@ -5,7 +5,7 @@\n \n     Blueprints (and currently modules)\n \n-    :copyright: (c) 2015 by Armin Ronacher.\n+    :copyright: © 2010 by the Pallets team.\n     :license: BSD, see LICENSE for more details.\n \"\"\"\n \n\n@@ -3,14 +3,13 @@\n     tests.test_cli\n     ~~~~~~~~~~~~~~\n \n-    :copyright: (c) 2016 by the Flask Team, see AUTHORS for more details.\n+    :copyright: © 2010 by the Pallets team.\n     :license: BSD, see LICENSE for more details.\n \"\"\"\n-#\n-# This file was part of Flask-CLI and was modified under the terms its license,\n-# the Revised BSD License.\n-# Copyright (C) 2015 CERN.\n-#\n+\n+# This file was part of Flask-CLI and was modified under the terms of\n+# its Revised BSD License. Copyright © 2015 CERN.\n+\n from __future__ import absolute_import\n \n import os\n\n@@ -3,11 +3,10 @@\n     tests.test_config\n     ~~~~~~~~~~~~~~~~~\n \n-    :copyright: (c) 2015 by the Flask Team, see AUTHORS for more details.\n+    :copyright: © 2010 by the Pallets team.\n     :license: BSD, see LICENSE for more details.\n \"\"\"\n \n-\n from datetime import timedelta\n import os\n import textwrap\n\n@@ -5,7 +5,7 @@\n \n     Various helpers.\n \n-    :copyright: (c) 2015 by Armin Ronacher.\n+    :copyright: © 2010 by the Pallets team.\n     :license: BSD, see LICENSE for more details.\n \"\"\"\n \n\n@@ -3,9 +3,10 @@\n     tests.test_instance\n     ~~~~~~~~~~~~~~~~~~~\n \n-    :copyright: (c) 2015 by the Flask Team, see AUTHORS for more details.\n+    :copyright: © 2010 by the Pallets team.\n     :license: BSD, see LICENSE for more details.\n \"\"\"\n+\n import os\n import sys\n \n\n@@ -1,3 +1,12 @@\n+# -*- coding: utf-8 -*-\n+\"\"\"\n+tests.test_json_tag\n+~~~~~~~~~~~~~~~~~~~\n+\n+:copyright: © 2010 by the Pallets team.\n+:license: BSD, see LICENSE for more details.\n+\"\"\"\n+\n from datetime import datetime\n from uuid import uuid4\n \n\n@@ -1,3 +1,12 @@\n+# -*- coding: utf-8 -*-\n+\"\"\"\n+tests.test_logging\n+~~~~~~~~~~~~~~~~~~~\n+\n+:copyright: © 2010 by the Pallets team.\n+:license: BSD, see LICENSE for more details.\n+\"\"\"\n+\n import logging\n import sys\n \n\n@@ -5,7 +5,7 @@\n \n     Tests regressions.\n \n-    :copyright: (c) 2015 by Armin Ronacher.\n+    :copyright: © 2010 by the Pallets team.\n     :license: BSD, see LICENSE for more details.\n \"\"\"\n \n\n@@ -5,7 +5,7 @@\n \n     Tests the request context.\n \n-    :copyright: (c) 2015 by Armin Ronacher.\n+    :copyright: © 2010 by the Pallets team.\n     :license: BSD, see LICENSE for more details.\n \"\"\"\n \n\n@@ -5,7 +5,7 @@\n \n     Signalling.\n \n-    :copyright: (c) 2015 by Armin Ronacher.\n+    :copyright: © 2010 by the Pallets team.\n     :license: BSD, see LICENSE for more details.\n \"\"\"\n \n\n@@ -6,7 +6,7 @@\n     Test that certain behavior of flask can be customized by\n     subclasses.\n \n-    :copyright: (c) 2015 by Armin Ronacher.\n+    :copyright: © 2010 by the Pallets team.\n     :license: BSD, see LICENSE for more details.\n \"\"\"\n \n\n@@ -5,7 +5,7 @@\n \n     Template functionality\n \n-    :copyright: (c) 2015 by Armin Ronacher.\n+    :copyright: © 2010 by the Pallets team.\n     :license: BSD, see LICENSE for more details.\n \"\"\"\n \n\n@@ -5,9 +5,10 @@\n \n     Test client and more.\n \n-    :copyright: (c) 2015 by Armin Ronacher.\n+    :copyright: © 2010 by the Pallets team.\n     :license: BSD, see LICENSE for more details.\n \"\"\"\n+\n import pytest\n \n import flask\n\n@@ -1,4 +1,12 @@\n # -*- coding: utf-8 -*-\n+\"\"\"\n+tests.test_user_error_handler\n+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+:copyright: © 2010 by the Pallets team.\n+:license: BSD, see LICENSE for more details.\n+\"\"\"\n+\n from werkzeug.exceptions import (\n     Forbidden,\n     InternalServerError,\n\n@@ -5,7 +5,7 @@\n \n     Pluggable views.\n \n-    :copyright: (c) 2015 by Armin Ronacher.\n+    :copyright: © 2010 by the Pallets team.\n     :license: BSD, see LICENSE for more details.\n \"\"\"\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#575021c07be6b168ca4c3664ea484248c9ffe960", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 5281 | Contributors (this commit): 89 | Commits (past 90d): 6 | Contributors (cumulative): 89 | DMM Complexity: None\n\nDIFF:\n@@ -2140,8 +2140,8 @@ class Flask(_PackageBoundObject):\n         return RequestContext(self, environ)\n \n     def test_request_context(self, *args, **kwargs):\n-        \"\"\"Creates a WSGI environment from the given values (see\n-        :class:`werkzeug.test.EnvironBuilder` for more information, this\n+        \"\"\"Creates a :class:`~flask.ctx.RequestContext` from the given values\n+        (see :class:`werkzeug.test.EnvironBuilder` for more information, this\n         function accepts the same arguments plus two additional).\n \n         Additional arguments (only if ``base_url`` is not specified):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#cf5525f98a2a9a15f6bb93b050dfd43f2bd90d97", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 108 | Lines Deleted: 2 | Files Changed: 3 | Hunks: 8 | Methods Changed: 9 | Complexity Δ (Sum/Max): 12/6 | Churn Δ: 110 | Churn Cumulative: 6255 | Contributors (this commit): 98 | Commits (past 90d): 12 | Contributors (cumulative): 112 | DMM Complexity: 1.0\n\nDIFF:\n@@ -311,6 +311,14 @@ class Flask(_PackageBoundObject):\n     #: .. versionadded:: 0.7\n     test_client_class = None\n \n+    #: The :class:`~click.testing.CliRunner` subclass, by default\n+    #: :class:`~flask.testing.FlaskCliRunner` that is used by\n+    #: :meth:`test_cli_runner`. Its ``__init__`` method should take a\n+    #: Flask app object as the first argument.\n+    #:\n+    #: .. versionadded:: 1.0\n+    test_cli_runner_class = None\n+\n     #: the session interface to use.  By default an instance of\n     #: :class:`~flask.sessions.SecureCookieSessionInterface` is used here.\n     #:\n@@ -983,6 +991,23 @@ class Flask(_PackageBoundObject):\n             from flask.testing import FlaskClient as cls\n         return cls(self, self.response_class, use_cookies=use_cookies, **kwargs)\n \n+    def test_cli_runner(self, **kwargs):\n+        \"\"\"Create a CLI runner for testing CLI commands.\n+        See :ref:`testing-cli`.\n+\n+        Returns an instance of :attr:`test_cli_runner_class`, by default\n+        :class:`~flask.testing.FlaskCliRunner`. The Flask app object is\n+        passed as the first argument.\n+\n+        .. versionadded:: 1.0\n+        \"\"\"\n+        cls = self.test_cli_runner_class\n+\n+        if cls is None:\n+            from flask.testing import FlaskCliRunner as cls\n+\n+        return cls(self, **kwargs)\n+\n     def open_session(self, request):\n         \"\"\"Creates or opens a new session.  Default implementation stores all\n         session data in a signed cookie.  This requires that the\n\n@@ -12,6 +12,9 @@\n \n import werkzeug\n from contextlib import contextmanager\n+\n+from click.testing import CliRunner\n+from flask.cli import ScriptInfo\n from werkzeug.test import Client, EnvironBuilder\n from flask import _request_ctx_stack\n from flask.json import dumps as json_dumps\n@@ -193,3 +196,36 @@ class FlaskClient(Client):\n         top = _request_ctx_stack.top\n         if top is not None and top.preserved:\n             top.pop()\n+\n+\n+class FlaskCliRunner(CliRunner):\n+    \"\"\"A :class:`~click.testing.CliRunner` for testing a Flask app's\n+    CLI commands. Typically created using\n+    :meth:`~flask.Flask.test_cli_runner`. See :ref:`testing-cli`.\n+    \"\"\"\n+    def __init__(self, app, **kwargs):\n+        self.app = app\n+        super(FlaskCliRunner, self).__init__(**kwargs)\n+\n+    def invoke(self, cli=None, args=None, **kwargs):\n+        \"\"\"Invokes a CLI command in an isolated environment. See\n+        :meth:`CliRunner.invoke <click.testing.CliRunner.invoke>` for\n+        full method documentation. See :ref:`testing-cli` for examples.\n+\n+        If the ``obj`` argument is not given, passes an instance of\n+        :class:`~flask.cli.ScriptInfo` that knows how to load the Flask\n+        app being tested.\n+\n+        :param cli: Command object to invoke. Default is the app's\n+            :attr:`~flask.app.Flask.cli` group.\n+        :param args: List of strings to invoke the command with.\n+\n+        :return: a :class:`~click.testing.Result` object.\n+        \"\"\"\n+        if cli is None:\n+            cli = self.app.cli\n+\n+        if 'obj' not in kwargs:\n+            kwargs['obj'] = ScriptInfo(create_app=lambda: self.app)\n+\n+        return super(FlaskCliRunner, self).invoke(cli, args, **kwargs)\n\n@@ -8,15 +8,16 @@\n     :copyright: © 2010 by the Pallets team.\n     :license: BSD, see LICENSE for more details.\n \"\"\"\n-\n+import click\n import pytest\n \n import flask\n import werkzeug\n \n from flask._compat import text_type\n+from flask.cli import ScriptInfo\n from flask.json import jsonify\n-from flask.testing import make_test_environ_builder\n+from flask.testing import make_test_environ_builder, FlaskCliRunner\n \n \n def test_environ_defaults_from_config(app, client):\n@@ -335,3 +336,47 @@ def test_nosubdomain(app, client):\n \n     assert 200 == response.status_code\n     assert b'xxx' == response.data\n+\n+\n+def test_cli_runner_class(app):\n+    runner = app.test_cli_runner()\n+    assert isinstance(runner, FlaskCliRunner)\n+\n+    class SubRunner(FlaskCliRunner):\n+        pass\n+\n+    app.test_cli_runner_class = SubRunner\n+    runner = app.test_cli_runner()\n+    assert isinstance(runner, SubRunner)\n+\n+\n+def test_cli_invoke(app):\n+    @app.cli.command('hello')\n+    def hello_command():\n+        click.echo('Hello, World!')\n+\n+    runner = app.test_cli_runner()\n+    # invoke with command name\n+    result = runner.invoke(args=['hello'])\n+    assert 'Hello' in result.output\n+    # invoke with command object\n+    result = runner.invoke(hello_command)\n+    assert 'Hello' in result.output\n+\n+\n+def test_cli_custom_obj(app):\n+    class NS(object):\n+        called = False\n+\n+    def create_app():\n+        NS.called = True\n+        return app\n+\n+    @app.cli.command('hello')\n+    def hello_command():\n+        click.echo('Hello, World!')\n+\n+    script_info = ScriptInfo(create_app=create_app)\n+    runner = app.test_cli_runner()\n+    runner.invoke(hello_command, obj=script_info)\n+    assert NS.called\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#8cec2010c0564bbd6e1f9cd8881404f70178247f", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 50 | Lines Deleted: 7 | Files Changed: 3 | Hunks: 17 | Methods Changed: 16 | Complexity Δ (Sum/Max): 5/4 | Churn Δ: 57 | Churn Cumulative: 8446 | Contributors (this commit): 103 | Commits (past 90d): 16 | Contributors (cumulative): 122 | DMM Complexity: 0.9354838709677419\n\nDIFF:\n@@ -126,6 +126,11 @@ class Flask(_PackageBoundObject):\n     .. versionadded:: 0.13\n        The `host_matching` and `static_host` parameters were added.\n \n+    .. versionadded:: 1.0\n+       The `subdomain_matching` parameter was added.  Subdomain matching\n+       needs to be enabled manually now.  Setting `SERVER_NAME` does not\n+       implicitly enable it.\n+\n     :param import_name: the name of the application package\n     :param static_url_path: can be used to specify a different path for the\n                             static files on the web.  Defaults to the name\n@@ -347,6 +352,7 @@ class Flask(_PackageBoundObject):\n         static_folder='static',\n         static_host=None,\n         host_matching=False,\n+        subdomain_matching=False,\n         template_folder='templates',\n         instance_path=None,\n         instance_relative_config=False,\n@@ -530,6 +536,7 @@ class Flask(_PackageBoundObject):\n         self.url_map = Map()\n \n         self.url_map.host_matching = host_matching\n+        self.subdomain_matching = subdomain_matching\n \n         # tracks internally if the application already handled at least one\n         # request.\n@@ -1988,8 +1995,15 @@ class Flask(_PackageBoundObject):\n            URL adapter is created for the application context.\n         \"\"\"\n         if request is not None:\n-            return self.url_map.bind_to_environ(request.environ,\n+            rv = self.url_map.bind_to_environ(request.environ,\n                 server_name=self.config['SERVER_NAME'])\n+            # If subdomain matching is not enabled (which is the default\n+            # we put back the default subdomain in all cases.  This really\n+            # should be the default in Werkzeug but it currently does not\n+            # have that feature.\n+            if not self.subdomain_matching:\n+                rv.subdomain = self.url_map.default_subdomain\n+            return rv\n         # We need at the very least the server name to be set for this\n         # to work.\n         if self.config['SERVER_NAME'] is not None:\n\n@@ -1429,10 +1429,12 @@ def test_request_locals():\n     assert not flask.g\n \n \n-def test_test_app_proper_environ(app, client):\n+def test_test_app_proper_environ():\n+    app = flask.Flask(__name__, subdomain_matching=True)\n     app.config.update(\n         SERVER_NAME='localhost.localdomain:5000'\n     )\n+    client = app.test_client()\n \n     @app.route('/')\n     def index():\n@@ -1783,8 +1785,10 @@ def test_g_iteration_protocol(app_ctx):\n     assert sorted(flask.g) == ['bar', 'foo']\n \n \n-def test_subdomain_basic_support(app, client):\n+def test_subdomain_basic_support():\n+    app = flask.Flask(__name__, subdomain_matching=True)\n     app.config['SERVER_NAME'] = 'localhost.localdomain'\n+    client = app.test_client()\n \n     @app.route('/')\n     def normal_index():\n@@ -1801,7 +1805,9 @@ def test_subdomain_basic_support(app, client):\n     assert rv.data == b'test index'\n \n \n-def test_subdomain_matching(app, client):\n+def test_subdomain_matching():\n+    app = flask.Flask(__name__, subdomain_matching=True)\n+    client = app.test_client()\n     app.config['SERVER_NAME'] = 'localhost.localdomain'\n \n     @app.route('/', subdomain='<user>')\n@@ -1812,8 +1818,10 @@ def test_subdomain_matching(app, client):\n     assert rv.data == b'index for mitsuhiko'\n \n \n-def test_subdomain_matching_with_ports(app, client):\n+def test_subdomain_matching_with_ports():\n+    app = flask.Flask(__name__, subdomain_matching=True)\n     app.config['SERVER_NAME'] = 'localhost.localdomain:3000'\n+    client = app.test_client()\n \n     @app.route('/', subdomain='<user>')\n     def index(user):\n@@ -1823,6 +1831,23 @@ def test_subdomain_matching_with_ports(app, client):\n     assert rv.data == b'index for mitsuhiko'\n \n \n+def test_subdomain_matching_behavior():\n+    for matching in False, True:\n+        app = flask.Flask(__name__, subdomain_matching=matching)\n+        app.config['SERVER_NAME'] = 'localhost.localdomain:3000'\n+        client = app.test_client()\n+\n+        @app.route('/')\n+        def index():\n+            return 'matched without subdomain'\n+\n+        rv = client.get('/', 'http://127.0.0.1:3000/')\n+        if matching:\n+            assert rv.status_code == 404\n+        else:\n+            assert rv.data == b'matched without subdomain'\n+\n+\n def test_multi_route_rules(app, client):\n     @app.route('/')\n     @app.route('/<test>/')\n\n@@ -114,9 +114,11 @@ def test_path_is_url(app):\n     assert eb.path == '/'\n \n \n-def test_blueprint_with_subdomain(app, client):\n+def test_blueprint_with_subdomain():\n+    app = flask.Flask(__name__, subdomain_matching=True)\n     app.config['SERVER_NAME'] = 'example.com:1234'\n     app.config['APPLICATION_ROOT'] = '/foo'\n+    client = app.test_client()\n \n     bp = flask.Blueprint('company', __name__, subdomain='xxx')\n \n@@ -304,8 +306,10 @@ def test_json_request_and_response(app, client):\n         assert rv.get_json() == json_data\n \n \n-def test_subdomain(app, client):\n+def test_subdomain():\n+    app = flask.Flask(__name__, subdomain_matching=True)\n     app.config['SERVER_NAME'] = 'example.com'\n+    client = app.test_client()\n \n     @app.route('/', subdomain='<company_id>')\n     def view(company_id):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#82f0d120deb9ea52237d95a14a4a619b01d06f80", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 35 | Lines Deleted: 27 | Files Changed: 2 | Hunks: 11 | Methods Changed: 5 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 62 | Churn Cumulative: 7971 | Contributors (this commit): 101 | Commits (past 90d): 15 | Contributors (cumulative): 114 | DMM Complexity: 0.0\n\nDIFF:\n@@ -123,13 +123,13 @@ class Flask(_PackageBoundObject):\n     .. versionadded:: 0.11\n        The `root_path` parameter was added.\n \n-    .. versionadded:: 0.13\n-       The `host_matching` and `static_host` parameters were added.\n+    .. versionadded:: 1.0\n+       The ``host_matching`` and ``static_host`` parameters were added.\n \n     .. versionadded:: 1.0\n-       The `subdomain_matching` parameter was added.  Subdomain matching\n-       needs to be enabled manually now.  Setting `SERVER_NAME` does not\n-       implicitly enable it.\n+       The ``subdomain_matching`` parameter was added. Subdomain\n+       matching needs to be enabled manually now. Setting\n+       :data:`SERVER_NAME` does not implicitly enable it.\n \n     :param import_name: the name of the application package\n     :param static_url_path: can be used to specify a different path for the\n@@ -138,11 +138,13 @@ class Flask(_PackageBoundObject):\n     :param static_folder: the folder with static files that should be served\n                           at `static_url_path`.  Defaults to the ``'static'``\n                           folder in the root path of the application.\n-    :param host_matching: sets the app's ``url_map.host_matching`` to the given\n-                          value. Defaults to False.\n-    :param static_host: the host to use when adding the static route. Defaults\n-                        to None. Required when using ``host_matching=True``\n+    :param static_host: the host to use when adding the static route.\n+        Defaults to None. Required when using ``host_matching=True``\n         with a ``static_folder`` configured.\n+    :param host_matching: set ``url_map.host_matching`` attribute.\n+        Defaults to False.\n+    :param subdomain_matching: consider the subdomain relative to\n+        :data:`SERVER_NAME` when matching routes. Defaults to False.\n     :param template_folder: the folder that contains the templates that should\n                             be used by the application.  Defaults to\n                             ``'templates'`` folder in the root path of the\n@@ -1985,25 +1987,29 @@ class Flask(_PackageBoundObject):\n \n     def create_url_adapter(self, request):\n         \"\"\"Creates a URL adapter for the given request. The URL adapter\n-        is created at a point where the request context is not yet set up\n-        so the request is passed explicitly.\n+        is created at a point where the request context is not yet set\n+        up so the request is passed explicitly.\n \n         .. versionadded:: 0.6\n \n         .. versionchanged:: 0.9\n            This can now also be called without a request object when the\n            URL adapter is created for the application context.\n+\n+        .. versionchanged:: 1.0\n+            :data:`SERVER_NAME` no longer implicitly enables subdomain\n+            matching. Use :attr:`subdomain_matching` instead.\n         \"\"\"\n         if request is not None:\n-            rv = self.url_map.bind_to_environ(request.environ,\n-                server_name=self.config['SERVER_NAME'])\n-            # If subdomain matching is not enabled (which is the default\n-            # we put back the default subdomain in all cases.  This really\n-            # should be the default in Werkzeug but it currently does not\n-            # have that feature.\n-            if not self.subdomain_matching:\n-                rv.subdomain = self.url_map.default_subdomain\n-            return rv\n+            # If subdomain matching is disabled (the default), use the\n+            # default subdomain in all cases. This should be the default\n+            # in Werkzeug but it currently does not have that feature.\n+            subdomain = ((self.url_map.default_subdomain or None)\n+                         if not self.subdomain_matching else None)\n+            return self.url_map.bind_to_environ(\n+                request.environ,\n+                server_name=self.config['SERVER_NAME'],\n+                subdomain=subdomain)\n         # We need at the very least the server name to be set for this\n         # to work.\n         if self.config['SERVER_NAME'] is not None:\n\n@@ -1831,21 +1831,23 @@ def test_subdomain_matching_with_ports():\n     assert rv.data == b'index for mitsuhiko'\n \n \n-def test_subdomain_matching_behavior():\n-    for matching in False, True:\n+@pytest.mark.parametrize('matching', (False, True))\n+def test_subdomain_matching_other_name(matching):\n     app = flask.Flask(__name__, subdomain_matching=matching)\n     app.config['SERVER_NAME'] = 'localhost.localdomain:3000'\n     client = app.test_client()\n \n     @app.route('/')\n     def index():\n-            return 'matched without subdomain'\n+        return '', 204\n \n+    # ip address can't match name\n     rv = client.get('/', 'http://127.0.0.1:3000/')\n-        if matching:\n-            assert rv.status_code == 404\n-        else:\n-            assert rv.data == b'matched without subdomain'\n+    assert rv.status_code == 404 if matching else 204\n+\n+    # allow all subdomains if matching is disabled\n+    rv = client.get('/', 'http://www.localhost.localdomain:3000/')\n+    assert rv.status_code == 404 if matching else 204\n \n \n def test_multi_route_rules(app, client):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#0887245bfde8e5d65cc3d807dc574a0a07511eb4", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 659 | Contributors (this commit): 18 | Commits (past 90d): 2 | Contributors (cumulative): 18 | DMM Complexity: 1.0\n\nDIFF:\n@@ -10,6 +10,7 @@\n     :license: BSD, see LICENSE for more details.\n \"\"\"\n \n+import re\n from functools import update_wrapper\n \n from .helpers import _PackageBoundObject, _endpoint_from_view_func\n@@ -67,6 +68,7 @@ class BlueprintSetupState(object):\n         \"\"\"\n         if self.url_prefix:\n             rule = self.url_prefix + rule\n+            rule = re.sub('/+', '/', rule)\n         options.setdefault('subdomain', self.subdomain)\n         if endpoint is None:\n             endpoint = _endpoint_from_view_func(view_func)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#401423df063e82bdac25c5b94ed4edc33e05de5e", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 17 | Lines Deleted: 4 | Files Changed: 2 | Hunks: 4 | Methods Changed: 6 | Complexity Δ (Sum/Max): 4/2 | Churn Δ: 21 | Churn Cumulative: 1474 | Contributors (this commit): 21 | Commits (past 90d): 5 | Contributors (cumulative): 25 | DMM Complexity: 1.0\n\nDIFF:\n@@ -9,8 +9,6 @@\n     :copyright: © 2010 by the Pallets team.\n     :license: BSD, see LICENSE for more details.\n \"\"\"\n-\n-import re\n from functools import update_wrapper\n \n from .helpers import _PackageBoundObject, _endpoint_from_view_func\n@@ -54,6 +52,9 @@ class BlueprintSetupState(object):\n \n         #: The prefix that should be used for all URLs defined on the\n         #: blueprint.\n+        if url_prefix and url_prefix[-1] == '/':\n+            url_prefix = url_prefix[:-1]\n+\n         self.url_prefix = url_prefix\n \n         #: A dictionary with URL defaults that is added to each and every\n@@ -68,7 +69,6 @@ class BlueprintSetupState(object):\n         \"\"\"\n         if self.url_prefix:\n             rule = self.url_prefix + rule\n-            rule = re.sub('/+', '/', rule)\n         options.setdefault('subdomain', self.subdomain)\n         if endpoint is None:\n             endpoint = _endpoint_from_view_func(view_func)\n\n@@ -114,7 +114,20 @@ def test_blueprint_app_error_handling(app, client):\n     assert client.get('/nope').data == b'you shall not pass'\n \n \n-def test_blueprint_url_definitions(app, client):\n+def test_blueprint_prefix_slash(app, client):\n+    bp = flask.Blueprint('test', __name__, url_prefix='/bar/')\n+\n+    @bp.route('/foo')\n+    def foo():\n+        return '', 204\n+\n+    app.register_blueprint(bp)\n+    app.register_blueprint(bp, url_prefix='/spam/')\n+    assert client.get('/bar/foo').status_code == 204\n+    assert client.get('/spam/foo').status_code == 204\n+\n+\n+def test_blueprint_url_defaults(app, client):\n     bp = flask.Blueprint('test', __name__)\n \n     @bp.route('/foo', defaults={'baz': 42})\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#5f42989ce31e90b8de9d733109c7e285de8237c7", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 2 | Files Changed: 2 | Hunks: 2 | Methods Changed: 2 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 568 | Contributors (this commit): 11 | Commits (past 90d): 5 | Contributors (cumulative): 16 | DMM Complexity: None\n\nDIFF:\n@@ -60,7 +60,7 @@ class Flask(_Flask):\n \n @pytest.fixture\n def app():\n-    app = Flask(__name__)\n+    app = Flask('flask_test', root_path=os.path.dirname(__file__))\n     return app\n \n \n\n@@ -215,5 +215,5 @@ def test_clean_pop(app):\n     except ZeroDivisionError:\n         pass\n \n-    assert called == ['conftest', 'TEARDOWN']\n+    assert called == ['flask_test', 'TEARDOWN']\n     assert not flask.current_app\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#08e61ea200d04326f8f40a3130ef613f84cd854d", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 5 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 3/3 | Churn Δ: 5 | Churn Cumulative: 2554 | Contributors (this commit): 28 | Commits (past 90d): 7 | Contributors (cumulative): 28 | DMM Complexity: 0.0\n\nDIFF:\n@@ -585,6 +585,11 @@ def load_dotenv(path=None):\n     \"\"\"\n \n     if dotenv is None:\n+        if path or os.path.exists('.env') or os.path.exists('.flaskenv'):\n+            click.secho(\n+                ' * Tip: There are .env files present.'\n+                ' Do \"pip install python-dotenv\" to use them',\n+                fg='yellow')\n         return\n \n     if path is not None:\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#2411707492d59eff68a3cf6d306eed91fceb6344", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 169 | Lines Deleted: 61 | Files Changed: 4 | Hunks: 23 | Methods Changed: 11 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 230 | Churn Cumulative: 6792 | Contributors (this commit): 98 | Commits (past 90d): 16 | Contributors (cumulative): 125 | DMM Complexity: None\n\nDIFF:\n@@ -2106,15 +2106,25 @@ class Flask(_PackageBoundObject):\n         return response\n \n     def do_teardown_request(self, exc=_sentinel):\n-        \"\"\"Called after the actual request dispatching and will\n-        call every as :meth:`teardown_request` decorated function.  This is\n-        not actually called by the :class:`Flask` object itself but is always\n-        triggered when the request context is popped.  That way we have a\n-        tighter control over certain resources under testing environments.\n+        \"\"\"Called after the request is dispatched and the response is\n+        returned, right before the request context is popped.\n+\n+        This calls all functions decorated with\n+        :meth:`teardown_request`, and :meth:`Blueprint.teardown_request`\n+        if a blueprint handled the request. Finally, the\n+        :data:`request_tearing_down` signal is sent.\n+\n+        This is called by\n+        :meth:`RequestContext.pop() <flask.ctx.RequestContext.pop>`,\n+        which may be delayed during testing to maintain access to\n+        resources.\n+\n+        :param exc: An unhandled exception raised while dispatching the\n+            request. Detected from the current exception information if\n+            not passed. Passed to each teardown function.\n \n         .. versionchanged:: 0.9\n-           Added the `exc` argument.  Previously this was always using the\n-           current exception information.\n+            Added the ``exc`` argument.\n         \"\"\"\n         if exc is _sentinel:\n             exc = sys.exc_info()[1]\n@@ -2127,9 +2137,17 @@ class Flask(_PackageBoundObject):\n         request_tearing_down.send(self, exc=exc)\n \n     def do_teardown_appcontext(self, exc=_sentinel):\n-        \"\"\"Called when an application context is popped.  This works pretty\n-        much the same as :meth:`do_teardown_request` but for the application\n-        context.\n+        \"\"\"Called right before the application context is popped.\n+\n+        When handling a request, the application context is popped\n+        after the request context. See :meth:`do_teardown_request`.\n+\n+        This calls all functions decorated with\n+        :meth:`teardown_appcontext`. Then the\n+        :data:`appcontext_tearing_down` signal is sent.\n+\n+        This is called by\n+        :meth:`AppContext.pop() <flask.ctx.AppContext.pop>`.\n \n         .. versionadded:: 0.9\n         \"\"\"\n@@ -2140,62 +2158,89 @@ class Flask(_PackageBoundObject):\n         appcontext_tearing_down.send(self, exc=exc)\n \n     def app_context(self):\n-        \"\"\"Binds the application only.  For as long as the application is bound\n-        to the current context the :data:`flask.current_app` points to that\n-        application.  An application context is automatically created when a\n-        request context is pushed if necessary.\n+        \"\"\"Create an :class:`~flask.ctx.AppContext`. Use as a ``with``\n+        block to push the context, which will make :data:`current_app`\n+        point at this application.\n \n-        Example usage::\n+        An application context is automatically pushed by\n+        :meth:`RequestContext.push() <flask.ctx.RequestContext.push>`\n+        when handling a request, and when running a CLI command. Use\n+        this to manually create a context outside of these situations.\n+\n+        ::\n \n             with app.app_context():\n-                ...\n+                init_db()\n+\n+        See :doc:`/appcontext`.\n \n         .. versionadded:: 0.9\n         \"\"\"\n         return AppContext(self)\n \n     def request_context(self, environ):\n-        \"\"\"Creates a :class:`~flask.ctx.RequestContext` from the given\n-        environment and binds it to the current context.  This must be used in\n-        combination with the ``with`` statement because the request is only bound\n-        to the current context for the duration of the ``with`` block.\n+        \"\"\"Create a :class:`~flask.ctx.RequestContext` representing a\n+        WSGI environment. Use a ``with`` block to push the context,\n+        which will make :data:`request` point at this request.\n \n-        Example usage::\n+        See :doc:`/reqcontext`.\n \n-            with app.request_context(environ):\n-                do_something_with(request)\n-\n-        The object returned can also be used without the ``with`` statement\n-        which is useful for working in the shell.  The example above is\n-        doing exactly the same as this code::\n-\n-            ctx = app.request_context(environ)\n-            ctx.push()\n-            try:\n-                do_something_with(request)\n-            finally:\n-                ctx.pop()\n-\n-        .. versionchanged:: 0.3\n-           Added support for non-with statement usage and ``with`` statement\n-           is now passed the ctx object.\n+        Typically you should not call this from your own code. A request\n+        context is automatically pushed by the :meth:`wsgi_app` when\n+        handling a request. Use :meth:`test_request_context` to create\n+        an environment and context instead of this method.\n \n         :param environ: a WSGI environment\n         \"\"\"\n         return RequestContext(self, environ)\n \n     def test_request_context(self, *args, **kwargs):\n-        \"\"\"Creates a :class:`~flask.ctx.RequestContext` from the given values\n-        (see :class:`werkzeug.test.EnvironBuilder` for more information, this\n-        function accepts the same arguments plus two additional).\n+        \"\"\"Create a :class:`~flask.ctx.RequestContext` for a WSGI\n+        environment created from the given values. This is mostly useful\n+        during testing, where you may want to run a function that uses\n+        request data without dispatching a full request.\n \n-        Additional arguments (only if ``base_url`` is not specified):\n+        See :doc:`/reqcontext`.\n \n-        :param subdomain: subdomain to use for route matching\n-        :param url_scheme: scheme for the request, default\n-            ``PREFERRED_URL_SCHEME`` or ``http``.\n+        Use a ``with`` block to push the context, which will make\n+        :data:`request` point at the request for the created\n+        environment. ::\n+\n+            with test_request_context(...):\n+                generate_report()\n+\n+        When using the shell, it may be easier to push and pop the\n+        context manually to avoid indentation. ::\n+\n+            ctx = app.test_request_context(...)\n+            ctx.push()\n+            ...\n+            ctx.pop()\n+\n+        Takes the same arguments as Werkzeug's\n+        :class:`~werkzeug.test.EnvironBuilder`, with some defaults from\n+        the application. See the linked Werkzeug docs for most of the\n+        available arguments. Flask-specific behavior is listed here.\n+\n+        :param path: URL path being requested.\n+        :param base_url: Base URL where the app is being served, which\n+            ``path`` is relative to. If not given, built from\n+            :data:`PREFERRED_URL_SCHEME`, ``subdomain``,\n+            :data:`SERVER_NAME`, and :data:`APPLICATION_ROOT`.\n+        :param subdomain: Subdomain name to append to\n+            :data:`SERVER_NAME`.\n+        :param url_scheme: Scheme to use instead of\n+            :data:`PREFERRED_URL_SCHEME`.\n+        :param data: The request body, either as a string or a dict of\n+            form keys and values.\n+        :param json: If given, this is serialized as JSON and passed as\n+            ``data``. Also defaults ``content_type`` to\n+            ``application/json``.\n+        :param args: other positional arguments passed to\n+            :class:`~werkzeug.test.EnvironBuilder`.\n+        :param kwargs: other keyword arguments passed to\n+            :class:`~werkzeug.test.EnvironBuilder`.\n         \"\"\"\n-\n         from flask.testing import make_test_environ_builder\n \n         builder = make_test_environ_builder(self, *args, **kwargs)\n@@ -2207,8 +2252,8 @@ class Flask(_PackageBoundObject):\n \n     def wsgi_app(self, environ, start_response):\n         \"\"\"The actual WSGI application. This is not implemented in\n-        `__call__` so that middlewares can be applied without losing a\n-        reference to the class.  So instead of doing this::\n+        :meth:`__call__` so that middlewares can be applied without\n+        losing a reference to the app object. Instead of doing this::\n \n             app = MyMiddleware(app)\n \n@@ -2220,15 +2265,15 @@ class Flask(_PackageBoundObject):\n         can continue to call methods on it.\n \n         .. versionchanged:: 0.7\n-           The behavior of the before and after request callbacks was changed\n-           under error conditions and a new callback was added that will\n-           always execute at the end of the request, independent on if an\n-           error occurred or not.  See :ref:`callbacks-and-errors`.\n+            Teardown events for the request and app contexts are called\n+            even if an unhandled error occurs. Other events may not be\n+            called depending on when an error occurs during dispatch.\n+            See :ref:`callbacks-and-errors`.\n \n-        :param environ: a WSGI environment\n-        :param start_response: a callable accepting a status code,\n-                               a list of headers and an optional\n-                               exception context to start the response\n+        :param environ: A WSGI environment.\n+        :param start_response: A callable accepting a status code,\n+            a list of headers, and an optional exception context to\n+            start the response.\n         \"\"\"\n         ctx = self.request_context(environ)\n         error = None\n@@ -2249,7 +2294,9 @@ class Flask(_PackageBoundObject):\n             ctx.auto_pop(error)\n \n     def __call__(self, environ, start_response):\n-        \"\"\"Shortcut for :attr:`wsgi_app`.\"\"\"\n+        \"\"\"The WSGI server calls the Flask application object as the\n+        WSGI application. This calls :meth:`wsgi_app` which can be\n+        wrapped to applying middleware.\"\"\"\n         return self.wsgi_app(environ, start_response)\n \n     def __repr__(self):\n\n@@ -24,18 +24,60 @@ _sentinel = object()\n \n \n class _AppCtxGlobals(object):\n-    \"\"\"A plain object.\"\"\"\n+    \"\"\"A plain object. Used as a namespace for storing data during an\n+    application context.\n+\n+    Creating an app context automatically creates this object, which is\n+    made available as the :data:`g` proxy.\n+\n+    .. describe:: 'key' in g\n+\n+        Check whether an attribute is present.\n+\n+        .. versionadded:: 0.10\n+\n+    .. describe:: iter(g)\n+\n+        Return an iterator over the attribute names.\n+\n+        .. versionadded:: 0.10\n+    \"\"\"\n \n     def get(self, name, default=None):\n+        \"\"\"Get an attribute by name, or a default value. Like\n+        :meth:`dict.get`.\n+\n+        :param name: Name of attribute to get.\n+        :param default: Value to return if the attribute is not present.\n+\n+        .. versionadded:: 0.10\n+        \"\"\"\n         return self.__dict__.get(name, default)\n \n     def pop(self, name, default=_sentinel):\n+        \"\"\"Get and remove an attribute by name. Like :meth:`dict.pop`.\n+\n+        :param name: Name of attribute to pop.\n+        :param default: Value to return if the attribute is not present,\n+            instead of raise a ``KeyError``.\n+\n+        .. versionadded:: 0.11\n+        \"\"\"\n         if default is _sentinel:\n             return self.__dict__.pop(name)\n         else:\n             return self.__dict__.pop(name, default)\n \n     def setdefault(self, name, default=None):\n+        \"\"\"Get the value of an attribute if it is present, otherwise\n+        set and return a default value. Like :meth:`dict.setdefault`.\n+\n+        :param name: Name of attribute to get.\n+        :param: default: Value to set and return if the attribute is not\n+            present.\n+\n+        .. versionadded:: 0.11\n+        \"\"\"\n         return self.__dict__.setdefault(name, default)\n \n     def __contains__(self, item):\n\n@@ -25,8 +25,8 @@ _app_ctx_err_msg = '''\\\n Working outside of application context.\n \n This typically means that you attempted to use functionality that needed\n-to interface with the current application object in a way.  To solve\n-this set up an application context with app.app_context().  See the\n+to interface with the current application object in some way. To solve\n+this, set up an application context with app.app_context().  See the\n documentation for more information.\\\n '''\n \n\n@@ -25,7 +25,26 @@ def make_test_environ_builder(\n     app, path='/', base_url=None, subdomain=None, url_scheme=None,\n     *args, **kwargs\n ):\n-    \"\"\"Creates a new test builder with some application defaults thrown in.\"\"\"\n+    \"\"\"Create a :class:`~werkzeug.test.EnvironBuilder`, taking some\n+    defaults from the application.\n+\n+    :param app: The Flask application to configure the environment from.\n+    :param path: URL path being requested.\n+    :param base_url: Base URL where the app is being served, which\n+        ``path`` is relative to. If not given, built from\n+        :data:`PREFERRED_URL_SCHEME`, ``subdomain``,\n+        :data:`SERVER_NAME`, and :data:`APPLICATION_ROOT`.\n+    :param subdomain: Subdomain name to append to :data:`SERVER_NAME`.\n+    :param url_scheme: Scheme to use instead of\n+        :data:`PREFERRED_URL_SCHEME`.\n+    :param json: If given, this is serialized as JSON and passed as\n+        ``data``. Also defaults ``content_type`` to\n+        ``application/json``.\n+    :param args: other positional arguments passed to\n+        :class:`~werkzeug.test.EnvironBuilder`.\n+    :param kwargs: other keyword arguments passed to\n+        :class:`~werkzeug.test.EnvironBuilder`.\n+    \"\"\"\n \n     assert (\n         not (base_url or subdomain or url_scheme)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
