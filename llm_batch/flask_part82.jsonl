{"custom_id": "flask#a12bf290da4e5ccc9cc7bd00a8e1ba8bccb50586", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 16 | Lines Deleted: 1 | Files Changed: 2 | Hunks: 2 | Methods Changed: 3 | Complexity Δ (Sum/Max): 3/2 | Churn Δ: 17 | Churn Cumulative: 6836 | Contributors (this commit): 85 | Commits (past 90d): 13 | Contributors (cumulative): 92 | DMM Complexity: 1.0\n\nDIFF:\n@@ -970,7 +970,8 @@ class _PackageBoundObject(object):\n             return self._static_url_path\n \n         if self.static_folder is not None:\n-            return \"/\" + os.path.basename(self.static_folder)\n+            basename = os.path.basename(self.static_folder)\n+            return \"/\" + basename if basename else \"\"\n \n     def _set_static_url_path(self, value):\n         self._static_url_path = value\n\n@@ -1427,6 +1427,20 @@ def test_static_url_path_with_ending_slash():\n         assert flask.url_for(\"static\", filename=\"index.html\") == \"/foo/index.html\"\n \n \n+def test_static_url_null_path(app):\n+    app = flask.Flask(__name__, static_folder='', static_url_path='')\n+    rv = app.test_client().open('/static/index.html', method='GET')\n+    assert rv.status_code == 200\n+    rv.close()\n+\n+\n+def test_static_url_null_path_defaulting(app):\n+    app = flask.Flask(__name__, static_folder='')\n+    rv = app.test_client().open('/static/index.html', method='GET')\n+    assert rv.status_code == 200\n+    rv.close()\n+\n+\n def test_static_route_with_host_matching():\n     app = flask.Flask(__name__, host_matching=True, static_host=\"example.com\")\n     c = app.test_client()\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#ed9ab2d3b6fc005b3807ddf484e85160233ffc82", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 17 | Lines Deleted: 17 | Files Changed: 4 | Hunks: 10 | Methods Changed: 10 | Complexity Δ (Sum/Max): -2/0 | Churn Δ: 34 | Churn Cumulative: 13848 | Contributors (this commit): 166 | Commits (past 90d): 21 | Contributors (cumulative): 216 | DMM Complexity: 1.0\n\nDIFF:\n@@ -408,10 +408,7 @@ class Flask(_PackageBoundObject):\n             self, import_name, template_folder=template_folder, root_path=root_path\n         )\n \n-        if static_url_path is not None:\n         self.static_url_path = static_url_path\n-\n-        if static_folder is not None:\n         self.static_folder = static_folder\n \n         if instance_path is None:\n@@ -594,7 +591,7 @@ class Flask(_PackageBoundObject):\n                 bool(static_host) == host_matching\n             ), \"Invalid static_host/host_matching combination\"\n             self.add_url_rule(\n-                self.static_url_path.rstrip(\"/\") + \"/<path:filename>\",\n+                self.static_url_path + \"/<path:filename>\",\n                 endpoint=\"static\",\n                 host=static_host,\n                 view_func=self.send_static_file,\n\n@@ -208,7 +208,7 @@ class Blueprint(_PackageBoundObject):\n \n         if self.has_static_folder:\n             state.add_url_rule(\n-                self.static_url_path.rstrip(\"/\") + \"/<path:filename>\",\n+                self.static_url_path + \"/<path:filename>\",\n                 view_func=self.send_static_file,\n                 endpoint=\"static\",\n             )\n\n@@ -965,24 +965,27 @@ class _PackageBoundObject(object):\n     )\n     del _get_static_folder, _set_static_folder\n \n-    def _get_static_url_path(self):\n+    @property\n+    def static_url_path(self):\n+        \"\"\"The URL prefix that the static route will be accessible from.\n+\n+        If it was not configured during init, it is derived from\n+        :attr:`static_folder`.\n+        \"\"\"\n         if self._static_url_path is not None:\n             return self._static_url_path\n \n         if self.static_folder is not None:\n             basename = os.path.basename(self.static_folder)\n-            return \"/\" + basename if basename else \"\"\n+            return (\"/\" + basename).rstrip(\"/\")\n+\n+    @static_url_path.setter\n+    def static_url_path(self, value):\n+        if value is not None:\n+            value = value.rstrip(\"/\")\n \n-    def _set_static_url_path(self, value):\n         self._static_url_path = value\n \n-    static_url_path = property(\n-        _get_static_url_path,\n-        _set_static_url_path,\n-        doc=\"The URL prefix that the static route will be registered for.\",\n-    )\n-    del _get_static_url_path, _set_static_url_path\n-\n     @property\n     def has_static_folder(self):\n         \"\"\"This is ``True`` if the package bound object's container has a\n\n@@ -1427,14 +1427,14 @@ def test_static_url_path_with_ending_slash():\n         assert flask.url_for(\"static\", filename=\"index.html\") == \"/foo/index.html\"\n \n \n-def test_static_url_null_path(app):\n+def test_static_url_empty_path(app):\n     app = flask.Flask(__name__, static_folder='', static_url_path='')\n     rv = app.test_client().open('/static/index.html', method='GET')\n     assert rv.status_code == 200\n     rv.close()\n \n \n-def test_static_url_null_path_defaulting(app):\n+def test_static_url_empty_path_default(app):\n     app = flask.Flask(__name__, static_folder='')\n     rv = app.test_client().open('/static/index.html', method='GET')\n     assert rv.status_code == 200\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#a71c167836c9dd938199fc72292951359948149c", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 23 | Lines Deleted: 3 | Files Changed: 2 | Hunks: 4 | Methods Changed: 3 | Complexity Δ (Sum/Max): 3/2 | Churn Δ: 26 | Churn Cumulative: 1347 | Contributors (this commit): 20 | Commits (past 90d): 6 | Contributors (cumulative): 28 | DMM Complexity: 1.0\n\nDIFF:\n@@ -206,12 +206,17 @@ class FlaskClient(Client):\n     def __exit__(self, exc_type, exc_value, tb):\n         self.preserve_context = False\n \n-        # on exit we want to clean up earlier.  Normally the request context\n-        # stays preserved until the next request in the same thread comes\n-        # in.  See RequestGlobals.push() for the general behavior.\n+        # Normally the request context is preserved until the next\n+        # request in the same thread comes. When the client exits we\n+        # want to clean up earlier. Pop request contexts until the stack\n+        # is empty or a non-preserved one is found.\n+        while True:\n             top = _request_ctx_stack.top\n+\n             if top is not None and top.preserved:\n                 top.pop()\n+            else:\n+                break\n \n \n class FlaskCliRunner(CliRunner):\n\n@@ -411,3 +411,18 @@ def test_cli_custom_obj(app):\n     runner = app.test_cli_runner()\n     runner.invoke(hello_command, obj=script_info)\n     assert NS.called\n+\n+\n+def test_client_pop_all_preserved(app, req_ctx, client):\n+    @app.route(\"/\")\n+    def index():\n+        # stream_with_context pushes a third context, preserved by client\n+        return flask.Response(flask.stream_with_context(\"hello\"))\n+\n+    # req_ctx fixture pushed an initial context, not marked preserved\n+    with client:\n+        # request pushes a second request context, preserved by client\n+        client.get(\"/\")\n+\n+    # only req_ctx fixture should still be pushed\n+    assert flask._request_ctx_stack.top is req_ctx\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#a5ff3cd01b8a78b5ed2961a8095290fed4e2a0d5", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 19 | Lines Deleted: 14 | Files Changed: 4 | Hunks: 11 | Methods Changed: 7 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 33 | Churn Cumulative: 11436 | Contributors (this commit): 93 | Commits (past 90d): 19 | Contributors (cumulative): 131 | DMM Complexity: 0.5\n\nDIFF:\n@@ -660,9 +660,11 @@ def show_server_banner(env, debug, app_import_path, eager_loading):\n \n     if env == \"production\":\n         click.secho(\n-            '   WARNING: This is a development server. '\n-            'Do not use it in a production deployment.', fg='red')\n-        click.secho('   Use a production WSGI server instead.', dim=True)\n+            \"   WARNING: This is a development server. \"\n+            \"Do not use it in a production deployment.\",\n+            fg=\"red\",\n+        )\n+        click.secho(\"   Use a production WSGI server instead.\", dim=True)\n \n     if debug is not None:\n         click.echo(\" * Debug mode: {0}\".format(\"on\" if debug else \"off\"))\n\n@@ -1147,12 +1147,12 @@ def test_response_types(app, client):\n     def from_wsgi():\n         return NotFound()\n \n-    @app.route('/dict')\n+    @app.route(\"/dict\")\n     def from_dict():\n         return {\"foo\": \"bar\"}, 201\n \n-    assert client.get('/text').data == u'Hällo Wörld'.encode('utf-8')\n-    assert client.get('/bytes').data == u'Hällo Wörld'.encode('utf-8')\n+    assert client.get(\"/text\").data == u\"Hällo Wörld\".encode(\"utf-8\")\n+    assert client.get(\"/bytes\").data == u\"Hällo Wörld\".encode(\"utf-8\")\n \n     rv = client.get(\"/full_tuple\")\n     assert rv.data == b\"Meh\"\n@@ -1185,7 +1185,7 @@ def test_response_types(app, client):\n     assert b\"Not Found\" in rv.data\n     assert rv.status_code == 404\n \n-    rv = client.get('/dict')\n+    rv = client.get(\"/dict\")\n     assert rv.json == {\"foo\": \"bar\"}\n     assert rv.status_code == 201\n \n@@ -1301,11 +1301,13 @@ def test_jsonify_mimetype(app, req_ctx):\n @pytest.mark.skipif(sys.version_info < (3, 7), reason=\"requires Python >= 3.7\")\n def test_json_dump_dataclass(app, req_ctx):\n     from dataclasses import make_dataclass\n+\n     Data = make_dataclass(\"Data\", [(\"name\", str)])\n     value = flask.json.dumps(Data(\"Flask\"), app=app)\n     value = flask.json.loads(value, app=app)\n     assert value == {\"name\": \"Flask\"}\n \n+\n def test_jsonify_args_and_kwargs_check(app, req_ctx):\n     with pytest.raises(TypeError) as e:\n         flask.jsonify(\"fake args\", kwargs=\"fake\")\n@@ -1428,15 +1430,15 @@ def test_static_url_path_with_ending_slash():\n \n \n def test_static_url_empty_path(app):\n-    app = flask.Flask(__name__, static_folder='', static_url_path='')\n-    rv = app.test_client().open('/static/index.html', method='GET')\n+    app = flask.Flask(__name__, static_folder=\"\", static_url_path=\"\")\n+    rv = app.test_client().open(\"/static/index.html\", method=\"GET\")\n     assert rv.status_code == 200\n     rv.close()\n \n \n def test_static_url_empty_path_default(app):\n-    app = flask.Flask(__name__, static_folder='')\n-    rv = app.test_client().open('/static/index.html', method='GET')\n+    app = flask.Flask(__name__, static_folder=\"\")\n+    rv = app.test_client().open(\"/static/index.html\", method=\"GET\")\n     assert rv.status_code == 200\n     rv.close()\n \n@@ -1949,7 +1951,9 @@ def test_run_server_port(monkeypatch, app):\n         (None, None, \"localhost:0\", \"localhost\", 0),\n     ),\n )\n-def test_run_from_config(monkeypatch, host, port, server_name, expect_host, expect_port, app):\n+def test_run_from_config(\n+    monkeypatch, host, port, server_name, expect_host, expect_port, app\n+):\n     def run_simple_mock(hostname, port, *args, **kwargs):\n         assert hostname == expect_host\n         assert port == expect_port\n\n@@ -525,7 +525,7 @@ def test_load_dotenv(monkeypatch):\n     assert os.environ[\"EGGS\"] == \"3\"\n \n     # Non existent file should not load\n-    assert not load_dotenv('non-existent-file')\n+    assert not load_dotenv(\"non-existent-file\")\n \n \n @need_dotenv\n\n@@ -976,7 +976,6 @@ class TestSafeJoin(object):\n                 print(flask.safe_join(*args))\n \n \n-\n class TestHelpers(object):\n     @pytest.mark.parametrize(\n         \"debug, expected_flag, expected_default_flag\",\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#cd14adbc1e834b0accc3b593a77d60d3cadddc8b", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 2726 | Contributors (this commit): 62 | Commits (past 90d): 6 | Contributors (cumulative): 62 | DMM Complexity: None\n\nDIFF:\n@@ -23,7 +23,7 @@ from werkzeug.routing import BuildError\n from functools import update_wrapper\n \n from werkzeug.urls import url_quote\n-from werkzeug.datastructures import Headers, Range\n+from werkzeug.datastructures import Headers\n from werkzeug.exceptions import BadRequest, NotFound, RequestedRangeNotSatisfiable\n \n from werkzeug.wsgi import wrap_file\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#2a97d4a706c329b15b9119101254de15c80410cc", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 3094 | Contributors (this commit): 42 | Commits (past 90d): 6 | Contributors (cumulative): 42 | DMM Complexity: None\n\nDIFF:\n@@ -132,6 +132,8 @@ def _called_with_wrong_args(factory):\n         # didn't reach the factory\n         return True\n     finally:\n+        # explicitly delete tb as it is circular referenced\n+        # https://docs.python.org/2/library/sys.html#sys.exc_info\n         del tb\n \n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#f25b5000fd7b85418d8ff85b070821748ef14f19", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 12 | Lines Deleted: 0 | Files Changed: 2 | Hunks: 2 | Methods Changed: 2 | Complexity Δ (Sum/Max): 2/1 | Churn Δ: 12 | Churn Cumulative: 2285 | Contributors (this commit): 43 | Commits (past 90d): 8 | Contributors (cumulative): 49 | DMM Complexity: 0.0\n\nDIFF:\n@@ -218,6 +218,9 @@ class Blueprint(_PackageBoundObject):\n \n         cli_resolved_group = options.get(\"cli_group\", self.cli_group)\n \n+        if not self.cli.commands:\n+            return\n+\n         if cli_resolved_group is None:\n             app.cli.commands.update(self.cli.commands)\n         elif cli_resolved_group is _sentinel:\n\n@@ -652,3 +652,12 @@ def test_cli_blueprints(app):\n \n     result = app_runner.invoke(args=[\"late_registration\", \"late\"])\n     assert \"late_result\" in result.output\n+\n+\n+def test_cli_empty(app):\n+    \"\"\"If a Blueprint's CLI group is empty, do not register it.\"\"\"\n+    bp = Blueprint(\"blue\", __name__, cli_group=\"blue\")\n+    app.register_blueprint(bp)\n+\n+    result = app.test_cli_runner().invoke(args=[\"blue\", \"--help\"])\n+    assert result.exit_code == 2, \"Unexpected success:\\n\\n\" + result.output\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#55ad09c9024d2f0d23123c934e505042516cc796", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 30 | Lines Deleted: 38 | Files Changed: 3 | Hunks: 12 | Methods Changed: 16 | Complexity Δ (Sum/Max): 2/2 | Churn Δ: 68 | Churn Cumulative: 9699 | Contributors (this commit): 152 | Commits (past 90d): 17 | Contributors (cumulative): 185 | DMM Complexity: None\n\nDIFF:\n@@ -727,7 +727,8 @@ class Flask(_PackageBoundObject):\n         \"\"\"\n         return open(os.path.join(self.instance_path, resource), mode)\n \n-    def _get_templates_auto_reload(self):\n+    @property\n+    def templates_auto_reload(self):\n         \"\"\"Reload templates when they are changed. Used by\n         :meth:`create_jinja_environment`.\n \n@@ -741,14 +742,10 @@ class Flask(_PackageBoundObject):\n         rv = self.config[\"TEMPLATES_AUTO_RELOAD\"]\n         return rv if rv is not None else self.debug\n \n-    def _set_templates_auto_reload(self, value):\n+    @templates_auto_reload.setter\n+    def templates_auto_reload(self, value):\n         self.config[\"TEMPLATES_AUTO_RELOAD\"] = value\n \n-    templates_auto_reload = property(\n-        _get_templates_auto_reload, _set_templates_auto_reload\n-    )\n-    del _get_templates_auto_reload, _set_templates_auto_reload\n-\n     def create_jinja_environment(self):\n         \"\"\"Create the Jinja environment based on :attr:`jinja_options`\n         and the various Jinja-related methods of the app. Changing\n@@ -855,28 +852,28 @@ class Flask(_PackageBoundObject):\n     #: Default: ``'production'``\n     env = ConfigAttribute(\"ENV\")\n \n-    def _get_debug(self):\n+    @property\n+    def debug(self):\n+        \"\"\"Whether debug mode is enabled. When using ``flask run`` to start\n+        the development server, an interactive debugger will be shown for\n+        unhandled exceptions, and the server will be reloaded when code\n+        changes. This maps to the :data:`DEBUG` config key. This is\n+        enabled when :attr:`env` is ``'development'`` and is overridden\n+        by the ``FLASK_DEBUG`` environment variable. It may not behave as\n+        expected if set in code.\n+\n+        **Do not enable debug mode when deploying in production.**\n+\n+        Default: ``True`` if :attr:`env` is ``'development'``, or\n+        ``False`` otherwise.\n+        \"\"\"\n         return self.config[\"DEBUG\"]\n \n-    def _set_debug(self, value):\n+    @debug.setter\n+    def debug(self, value):\n         self.config[\"DEBUG\"] = value\n         self.jinja_env.auto_reload = self.templates_auto_reload\n \n-    #: Whether debug mode is enabled. When using ``flask run`` to start\n-    #: the development server, an interactive debugger will be shown for\n-    #: unhandled exceptions, and the server will be reloaded when code\n-    #: changes. This maps to the :data:`DEBUG` config key. This is\n-    #: enabled when :attr:`env` is ``'development'`` and is overridden\n-    #: by the ``FLASK_DEBUG`` environment variable. It may not behave as\n-    #: expected if set in code.\n-    #:\n-    #: **Do not enable debug mode when deploying in production.**\n-    #:\n-    #: Default: ``True`` if :attr:`env` is ``'development'``, or\n-    #: ``False`` otherwise.\n-    debug = property(_get_debug, _set_debug)\n-    del _get_debug, _set_debug\n-\n     def run(self, host=None, port=None, debug=None, load_dotenv=True, **options):\n         \"\"\"Runs the application on a local development server.\n \n\n@@ -315,15 +315,14 @@ class RequestContext(object):\n         if self.url_adapter is not None:\n             self.match_request()\n \n-    def _get_g(self):\n+    @property\n+    def g(self):\n         return _app_ctx_stack.top.g\n \n-    def _set_g(self, value):\n+    @g.setter\n+    def g(self, value):\n         _app_ctx_stack.top.g = value\n \n-    g = property(_get_g, _set_g)\n-    del _get_g, _set_g\n-\n     def copy(self):\n         \"\"\"Creates a copy of this request context with the same request object.\n         This can be used to move a request context to a different greenlet.\n\n@@ -951,20 +951,16 @@ class _PackageBoundObject(object):\n         #: application has been discovered and blueprints registered.\n         self.cli = AppGroup()\n \n-    def _get_static_folder(self):\n+    @property\n+    def static_folder(self):\n+        \"\"\"The absolute path to the configured static folder.\"\"\"\n         if self._static_folder is not None:\n             return os.path.join(self.root_path, self._static_folder)\n \n-    def _set_static_folder(self, value):\n+    @static_folder.setter\n+    def static_folder(self, value):\n         self._static_folder = value\n \n-    static_folder = property(\n-        _get_static_folder,\n-        _set_static_folder,\n-        doc=\"The absolute path to the configured static folder.\",\n-    )\n-    del _get_static_folder, _set_static_folder\n-\n     @property\n     def static_url_path(self):\n         \"\"\"The URL prefix that the static route will be accessible from.\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#8bb71852849907d1b67ba7514cf1812348e11b44", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 14 | Lines Deleted: 2 | Files Changed: 2 | Hunks: 7 | Methods Changed: 2 | Complexity Δ (Sum/Max): 2/2 | Churn Δ: 16 | Churn Cumulative: 10328 | Contributors (this commit): 118 | Commits (past 90d): 16 | Contributors (cumulative): 136 | DMM Complexity: 0.125\n\nDIFF:\n@@ -27,6 +27,7 @@ from werkzeug.exceptions import (\n     default_exceptions,\n )\n from werkzeug.routing import BuildError, Map, RequestRedirect, RoutingException, Rule\n+from werkzeug.wrappers import BaseResponse\n \n from . import cli, json\n from ._compat import integer_types, reraise, string_types, text_type\n@@ -2063,7 +2064,7 @@ class Flask(_PackageBoundObject):\n                 status = headers = None\n             elif isinstance(rv, dict):\n                 rv = jsonify(rv)\n-            else:\n+            elif isinstance(rv, BaseResponse) or callable(rv):\n                 # evaluate a WSGI callable, or coerce a different response\n                 # class to the correct type\n                 try:\n@@ -2071,11 +2072,18 @@ class Flask(_PackageBoundObject):\n                 except TypeError as e:\n                     new_error = TypeError(\n                         \"{e}\\nThe view function did not return a valid\"\n-                        \" response. The return type must be a string, tuple,\"\n+                        \" response. The return type must be a string, dict, tuple,\"\n                         \" Response instance, or WSGI callable, but it was a\"\n                         \" {rv.__class__.__name__}.\".format(e=e, rv=rv)\n                     )\n                     reraise(TypeError, new_error, sys.exc_info()[2])\n+            else:\n+                raise TypeError(\n+                    \"The view function did not return a valid\"\n+                    \" response. The return type must be a string, dict, tuple,\"\n+                    \" Response instance, or WSGI callable, but it was a\"\n+                    \" {rv.__class__.__name__}.\".format(rv=rv)\n+                )\n \n         # prefer the status if it was provided\n         if status is not None:\n\n@@ -1218,16 +1218,20 @@ def test_response_type_errors():\n \n     with pytest.raises(TypeError) as e:\n         c.get(\"/none\")\n+\n     assert \"returned None\" in str(e)\n \n     with pytest.raises(TypeError) as e:\n         c.get(\"/small_tuple\")\n+\n     assert \"tuple must have the form\" in str(e)\n \n     pytest.raises(TypeError, c.get, \"/large_tuple\")\n \n     with pytest.raises(TypeError) as e:\n         c.get(\"/bad_type\")\n+\n+    assert \"object is not callable\" not in str(e)\n     assert \"it was a bool\" in str(e)\n \n     pytest.raises(TypeError, c.get, \"/bad_wsgi\")\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#976dfedaa9efdb566333ea829b12751820268f67", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 72 | Lines Deleted: 21 | Files Changed: 4 | Hunks: 20 | Methods Changed: 12 | Complexity Δ (Sum/Max): 4/3 | Churn Δ: 93 | Churn Cumulative: 8028 | Contributors (this commit): 117 | Commits (past 90d): 19 | Contributors (cumulative): 145 | DMM Complexity: 0.6875\n\nDIFF:\n@@ -2359,9 +2359,9 @@ class Flask(_PackageBoundObject):\n         :param kwargs: other keyword arguments passed to\n             :class:`~werkzeug.test.EnvironBuilder`.\n         \"\"\"\n-        from flask.testing import make_test_environ_builder\n+        from flask.testing import EnvironBuilder\n \n-        builder = make_test_environ_builder(self, *args, **kwargs)\n+        builder = EnvironBuilder(self, *args, **kwargs)\n \n         try:\n             return self.request_context(builder.get_environ())\n\n@@ -9,8 +9,9 @@\n     :copyright: © 2010 by the Pallets team.\n     :license: BSD, see LICENSE for more details.\n \"\"\"\n-\n+import warnings\n import werkzeug\n+import werkzeug.test\n from contextlib import contextmanager\n \n from click.testing import CliRunner\n@@ -21,11 +22,9 @@ from flask.json import dumps as json_dumps\n from werkzeug.urls import url_parse\n \n \n-def make_test_environ_builder(\n-    app, path=\"/\", base_url=None, subdomain=None, url_scheme=None, *args, **kwargs\n-):\n-    \"\"\"Create a :class:`~werkzeug.test.EnvironBuilder`, taking some\n-    defaults from the application.\n+class EnvironBuilder(werkzeug.test.EnvironBuilder):\n+    \"\"\"An :class:`~werkzeug.test.EnvironBuilder`, that takes defaults from the\n+    application.\n \n     :param app: The Flask application to configure the environment from.\n     :param path: URL path being requested.\n@@ -45,7 +44,19 @@ def make_test_environ_builder(\n         :class:`~werkzeug.test.EnvironBuilder`.\n     \"\"\"\n \n-    assert not (base_url or subdomain or url_scheme) or (base_url is not None) != bool(\n+    def __init__(\n+        self,\n+        app,\n+        path=\"/\",\n+        base_url=None,\n+        subdomain=None,\n+        url_scheme=None,\n+        *args,\n+        **kwargs\n+    ):\n+        assert not (base_url or subdomain or url_scheme) or (\n+            base_url is not None\n+        ) != bool(\n             subdomain or url_scheme\n         ), 'Cannot pass \"subdomain\" or \"url_scheme\" with \"base_url\".'\n \n@@ -71,15 +82,34 @@ def make_test_environ_builder(\n                 sep = b\"?\" if isinstance(url.query, bytes) else \"?\"\n                 path += sep + url.query\n \n-    # TODO use EnvironBuilder.json_dumps once we require Werkzeug 0.15\n         if \"json\" in kwargs:\n             assert \"data\" not in kwargs, \"Client cannot provide both 'json' and 'data'.\"\n-        kwargs[\"data\"] = json_dumps(kwargs.pop(\"json\"), app=app)\n+            kwargs[\"data\"] = self.json_dumps(kwargs.pop(\"json\"), app=app)\n \n             if \"content_type\" not in kwargs:\n                 kwargs[\"content_type\"] = \"application/json\"\n \n-    return EnvironBuilder(path, base_url, *args, **kwargs)\n+        super(EnvironBuilder, self).__init__(path, base_url, *args, **kwargs)\n+        self.app = app\n+\n+    json_dumps = staticmethod(json_dumps)\n+\n+\n+def make_test_environ_builder(*args, **kwargs):\n+    \"\"\"Create a :class:`flask.testing.EnvironBuilder`.\n+\n+    .. deprecated: 1.1\n+        Will be removed in 1.2. Construct ``flask.testing.EnvironBuilder``\n+        directly instead.\n+    \"\"\"\n+    warnings.warn(\n+        DeprecationWarning(\n+            '\"make_test_environ_builder()\" is deprecated and will be removed '\n+            'in 1.2. Construct \"flask.testing.EnvironBuilder\" directly '\n+            \"instead.\"\n+        )\n+    )\n+    return EnvironBuilder(*args, **kwargs)\n \n \n class FlaskClient(Client):\n@@ -167,11 +197,11 @@ class FlaskClient(Client):\n         if (\n             not kwargs\n             and len(args) == 1\n-            and isinstance(args[0], (EnvironBuilder, dict))\n+            and isinstance(args[0], (werkzeug.test.EnvironBuilder, dict))\n         ):\n             environ = self.environ_base.copy()\n \n-            if isinstance(args[0], EnvironBuilder):\n+            if isinstance(args[0], werkzeug.test.EnvironBuilder):\n                 environ.update(args[0].get_environ())\n             else:\n                 environ.update(args[0])\n@@ -182,7 +212,7 @@ class FlaskClient(Client):\n                 \"flask._preserve_context\"\n             ] = self.preserve_context\n             kwargs.setdefault(\"environ_base\", self.environ_base)\n-            builder = make_test_environ_builder(self.application, *args, **kwargs)\n+            builder = EnvironBuilder(self.application, *args, **kwargs)\n \n             try:\n                 environ = builder.get_environ()\n\n@@ -243,9 +243,9 @@ def test_bad_environ_raises_bad_request():\n     # because werkzeug enforces latin1 on Python 2.\n     # However it works when actually passed to the server.\n \n-    from flask.testing import make_test_environ_builder\n+    from flask.testing import EnvironBuilder\n \n-    builder = make_test_environ_builder(app)\n+    builder = EnvironBuilder(app)\n     environ = builder.get_environ()\n \n     # use a non-printable character in the Host - this is key to this test\n@@ -267,9 +267,9 @@ def test_environ_for_valid_idna_completes():\n     # because werkzeug enforces latin1 on Python 2.\n     # However it works when actually passed to the server.\n \n-    from flask.testing import make_test_environ_builder\n+    from flask.testing import EnvironBuilder\n \n-    builder = make_test_environ_builder(app)\n+    builder = EnvironBuilder(app)\n     environ = builder.get_environ()\n \n     # these characters are all IDNA-compatible\n\n@@ -18,7 +18,7 @@ from flask import appcontext_popped\n from flask._compat import text_type\n from flask.cli import ScriptInfo\n from flask.json import jsonify\n-from flask.testing import make_test_environ_builder, FlaskCliRunner\n+from flask.testing import make_test_environ_builder, FlaskCliRunner, EnvironBuilder\n \n try:\n     import blinker\n@@ -88,7 +88,7 @@ def test_client_open_environ(app, client, request):\n     def index():\n         return flask.request.remote_addr\n \n-    builder = make_test_environ_builder(app, path=\"/index\", method=\"GET\")\n+    builder = EnvironBuilder(app, path=\"/index\", method=\"GET\")\n     request.addfinalizer(builder.close)\n \n     rv = client.open(builder)\n@@ -113,6 +113,15 @@ def test_specify_url_scheme(app, client):\n \n \n def test_path_is_url(app):\n+    eb = EnvironBuilder(app, \"https://example.com/\")\n+    assert eb.url_scheme == \"https\"\n+    assert eb.host == \"example.com\"\n+    assert eb.script_root == \"\"\n+    assert eb.path == \"/\"\n+\n+\n+def test_make_test_environ_builder(app):\n+    with pytest.deprecated_call():\n         eb = make_test_environ_builder(app, \"https://example.com/\")\n     assert eb.url_scheme == \"https\"\n     assert eb.host == \"example.com\"\n@@ -120,6 +129,18 @@ def test_path_is_url(app):\n     assert eb.path == \"/\"\n \n \n+def test_environbuilder_json_dumps(app):\n+    \"\"\"EnvironBuilder.json_dumps() takes settings from the app.\"\"\"\n+    app.config[\"JSON_AS_ASCII\"] = False\n+    eb = EnvironBuilder(app, json=u\"\\u20ac\")\n+    assert eb.input_stream.read().decode(\"utf8\") == u'\"\\u20ac\"'\n+\n+\n+def test_environbuilder_json_dumps_static():\n+    \"\"\"EnvironBuilder.json_dumps() can be called as a static method.\"\"\"\n+    assert EnvironBuilder.json_dumps(u\"\\u20ac\") == u'\"\\\\u20ac\"'\n+\n+\n def test_blueprint_with_subdomain():\n     app = flask.Flask(__name__, subdomain_matching=True)\n     app.config[\"SERVER_NAME\"] = \"example.com:1234\"\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#c7f56c5a5539143662a04ec8e54aa78777d20730", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 9 | Lines Deleted: 14 | Files Changed: 2 | Hunks: 4 | Methods Changed: 3 | Complexity Δ (Sum/Max): -2/0 | Churn Δ: 23 | Churn Cumulative: 1451 | Contributors (this commit): 21 | Commits (past 90d): 10 | Contributors (cumulative): 30 | DMM Complexity: 1.0\n\nDIFF:\n@@ -82,17 +82,17 @@ class EnvironBuilder(werkzeug.test.EnvironBuilder):\n                 sep = b\"?\" if isinstance(url.query, bytes) else \"?\"\n                 path += sep + url.query\n \n-        if \"json\" in kwargs:\n-            assert \"data\" not in kwargs, \"Client cannot provide both 'json' and 'data'.\"\n-            kwargs[\"data\"] = self.json_dumps(kwargs.pop(\"json\"), app=app)\n-\n-            if \"content_type\" not in kwargs:\n-                kwargs[\"content_type\"] = \"application/json\"\n-\n-        super(EnvironBuilder, self).__init__(path, base_url, *args, **kwargs)\n         self.app = app\n+        super(EnvironBuilder, self).__init__(path, base_url, *args, **kwargs)\n \n-    json_dumps = staticmethod(json_dumps)\n+    def json_dumps(self, obj, **args):\n+        \"\"\"Serialize ``obj`` to a JSON-formatted string.\n+\n+        The serialization will be configured according to the config associated\n+        with this EnvironBuilder's ``app``.\n+        \"\"\"\n+        args.setdefault(\"app\", self.app)\n+        return json_dumps(obj, **args)\n \n \n def make_test_environ_builder(*args, **kwargs):\n\n@@ -136,11 +136,6 @@ def test_environbuilder_json_dumps(app):\n     assert eb.input_stream.read().decode(\"utf8\") == u'\"\\u20ac\"'\n \n \n-def test_environbuilder_json_dumps_static():\n-    \"\"\"EnvironBuilder.json_dumps() can be called as a static method.\"\"\"\n-    assert EnvironBuilder.json_dumps(u\"\\u20ac\") == u'\"\\\\u20ac\"'\n-\n-\n def test_blueprint_with_subdomain():\n     app = flask.Flask(__name__, subdomain_matching=True)\n     app.config[\"SERVER_NAME\"] = \"example.com:1234\"\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#e45370b9940823daae4c3959158ded4a9e3f7f60", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 3 | Lines Deleted: 3 | Files Changed: 1 | Hunks: 2 | Methods Changed: 2 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 6 | Churn Cumulative: 624 | Contributors (this commit): 19 | Commits (past 90d): 6 | Contributors (cumulative): 19 | DMM Complexity: None\n\nDIFF:\n@@ -85,14 +85,14 @@ class EnvironBuilder(werkzeug.test.EnvironBuilder):\n         self.app = app\n         super(EnvironBuilder, self).__init__(path, base_url, *args, **kwargs)\n \n-    def json_dumps(self, obj, **args):\n+    def json_dumps(self, obj, **kwargs):\n         \"\"\"Serialize ``obj`` to a JSON-formatted string.\n \n         The serialization will be configured according to the config associated\n         with this EnvironBuilder's ``app``.\n         \"\"\"\n-        args.setdefault(\"app\", self.app)\n-        return json_dumps(obj, **args)\n+        kwargs.setdefault(\"app\", self.app)\n+        return json_dumps(obj, **kwargs)\n \n \n def make_test_environ_builder(*args, **kwargs):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#a3272941ce76a212e9d8d55722a0b230b963411d", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 3 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 3 | Churn Cumulative: 2743 | Contributors (this commit): 64 | Commits (past 90d): 8 | Contributors (cumulative): 64 | DMM Complexity: None\n\nDIFF:\n@@ -230,6 +230,9 @@ def url_for(endpoint, **values):\n \n     For more information, head over to the :ref:`Quickstart <url-building>`.\n \n+    Configuration values ``APPLICATION_ROOT`` and ``SERVER_NAME`` are only used when \n+    generating URLs outside of a request context.\n+\n     To integrate applications, :class:`Flask` has a hook to intercept URL build\n     errors through :attr:`Flask.url_build_error_handlers`.  The `url_for`\n     function results in a :exc:`~werkzeug.routing.BuildError` when the current\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#1718f1934c4fa709b42230b3ee5d6f803ec65df4", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 18 | Lines Deleted: 1 | Files Changed: 2 | Hunks: 4 | Methods Changed: 2 | Complexity Δ (Sum/Max): 2/1 | Churn Δ: 19 | Churn Cumulative: 4516 | Contributors (this commit): 51 | Commits (past 90d): 11 | Contributors (cumulative): 69 | DMM Complexity: 0.4\n\nDIFF:\n@@ -16,7 +16,6 @@ import inspect\n import os\n import platform\n import re\n-import ssl\n import sys\n import traceback\n from functools import update_wrapper\n@@ -36,6 +35,11 @@ try:\n except ImportError:\n     dotenv = None\n \n+try:\n+    import ssl\n+except ImportError:\n+    ssl = None\n+\n \n class NoAppException(click.UsageError):\n     \"\"\"Raised if an application cannot be found or loaded.\"\"\"\n@@ -684,6 +688,13 @@ class CertParamType(click.ParamType):\n         self.path_type = click.Path(exists=True, dir_okay=False, resolve_path=True)\n \n     def convert(self, value, param, ctx):\n+        if ssl is None:\n+            raise click.BadParameter(\n+                'Using \"--cert\" requires Python to be compiled with SSL support.',\n+                ctx,\n+                param,\n+            )\n+\n         try:\n             return self.path_type(value, param, ctx)\n         except click.BadParameter:\n\n@@ -611,6 +611,12 @@ def test_run_cert_import(monkeypatch):\n         run_command.make_context(\"run\", [\"--cert\", \"ssl_context\", \"--key\", __file__])\n \n \n+def test_run_cert_no_ssl(monkeypatch):\n+    monkeypatch.setattr(\"flask.cli.ssl\", None)\n+    with pytest.raises(click.BadParameter):\n+        run_command.make_context(\"run\", [\"--cert\", \"not_here\"])\n+\n+\n def test_cli_blueprints(app):\n     \"\"\"Test blueprint commands register correctly to the application\"\"\"\n     custom = Blueprint(\"custom\", __name__, cli_group=\"customized\")\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#b46f5942a528053034fecf210572ee04bc4a3284", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 69 | Lines Deleted: 73 | Files Changed: 21 | Hunks: 61 | Methods Changed: 65 | Complexity Δ (Sum/Max): -2/0 | Churn Δ: 142 | Churn Cumulative: 29180 | Contributors (this commit): 232 | Commits (past 90d): 88 | Contributors (cumulative): 477 | DMM Complexity: 0.0\n\nDIFF:\n@@ -64,7 +64,7 @@ def with_metaclass(meta, *bases):\n     # dummy metaclass for one level of class instantiation that replaces\n     # itself with the actual metaclass.\n     class metaclass(type):\n-        def __new__(cls, name, this_bases, d):\n+        def __new__(mcs, name, this_bases, d):\n             return meta(name, bases, d)\n \n     return type.__new__(metaclass, \"temporary_class\", (), {})\n@@ -97,7 +97,7 @@ if hasattr(sys, \"pypy_version_info\"):\n         try:\n             with _Mgr():\n                 raise AssertionError()\n-        except:\n+        except:  # noqa: B001\n             # We intentionally use a bare except here. See the comment above\n             # regarding a pypy bug as to why.\n             raise\n\n@@ -1961,7 +1961,7 @@ class Flask(_PackageBoundObject):\n                 adapter.match(method=\"--\")\n             except MethodNotAllowed as e:\n                 methods = e.valid_methods\n-            except HTTPException as e:\n+            except HTTPException:\n                 pass\n         rv = self.response_class()\n         rv.allow.update(methods)\n@@ -2399,7 +2399,7 @@ class Flask(_PackageBoundObject):\n             except Exception as e:\n                 error = e\n                 response = self.handle_exception(e)\n-            except:\n+            except:  # noqa: B001\n                 error = sys.exc_info()[1]\n                 raise\n             return response(environ, start_response)\n\n@@ -230,7 +230,7 @@ def prepare_import(path):\n \n \n def locate_app(script_info, module_name, app_name, raise_if_not_found=True):\n-    __traceback_hide__ = True\n+    __traceback_hide__ = True  # noqa: F841\n \n     try:\n         __import__(module_name)\n@@ -302,7 +302,7 @@ class DispatchingApp(object):\n \n     def _load_in_background(self):\n         def _load_app():\n-            __traceback_hide__ = True\n+            __traceback_hide__ = True  # noqa: F841\n             with self._lock:\n                 try:\n                     self._load_unlocked()\n@@ -313,20 +313,20 @@ class DispatchingApp(object):\n         t.start()\n \n     def _flush_bg_loading_exception(self):\n-        __traceback_hide__ = True\n+        __traceback_hide__ = True  # noqa: F841\n         exc_info = self._bg_loading_exc_info\n         if exc_info is not None:\n             self._bg_loading_exc_info = None\n             reraise(*exc_info)\n \n     def _load_unlocked(self):\n-        __traceback_hide__ = True\n+        __traceback_hide__ = True  # noqa: F841\n         self._app = rv = self.loader()\n         self._bg_loading_exc_info = None\n         return rv\n \n     def __call__(self, environ, start_response):\n-        __traceback_hide__ = True\n+        __traceback_hide__ = True  # noqa: F841\n         if self._app is not None:\n             return self._app(environ, start_response)\n         self._flush_bg_loading_exception()\n@@ -364,7 +364,7 @@ class ScriptInfo(object):\n         this multiple times will just result in the already loaded app to\n         be returned.\n         \"\"\"\n-        __traceback_hide__ = True\n+        __traceback_hide__ = True  # noqa: F841\n \n         if self._loaded_app is not None:\n             return self._loaded_app\n@@ -702,7 +702,7 @@ class CertParamType(click.ParamType):\n \n             if value == \"adhoc\":\n                 try:\n-                    import OpenSSL\n+                    import OpenSSL  # noqa: F401\n                 except ImportError:\n                     raise click.BadParameter(\n                         \"Using ad-hoc certificates requires pyOpenSSL.\", ctx, param\n\n@@ -418,7 +418,7 @@ def flash(message, category=\"message\"):\n     )\n \n \n-def get_flashed_messages(with_categories=False, category_filter=[]):\n+def get_flashed_messages(with_categories=False, category_filter=()):\n     \"\"\"Pulls all flashed messages from the session and returns them.\n     Further calls in the same request to the function will return\n     the same messages.  By default just the messages are returned,\n\n@@ -78,7 +78,7 @@ class DispatchingJinjaLoader(BaseLoader):\n         raise TemplateNotFound(template)\n \n     def _get_source_fast(self, environment, template):\n-        for srcobj, loader in self._iter_loaders(template):\n+        for _srcobj, loader in self._iter_loaders(template):\n             try:\n                 return loader.get_source(environment, template)\n             except TemplateNotFound:\n\n@@ -16,7 +16,7 @@ from contextlib import contextmanager\n \n from click.testing import CliRunner\n from flask.cli import ScriptInfo\n-from werkzeug.test import Client, EnvironBuilder\n+from werkzeug.test import Client\n from flask import _request_ctx_stack\n from flask.json import dumps as json_dumps\n from werkzeug.urls import url_parse\n\n@@ -45,7 +45,8 @@ class Request(RequestBase, JSONMixin):\n     #: a before/after handler (``request.url_rule.methods``) etc.\n     #: Though if the request's method was invalid for the URL rule,\n     #: the valid list is available in ``routing_exception.valid_methods``\n-    #: instead (an attribute of the Werkzeug exception :exc:`~werkzeug.exceptions.MethodNotAllowed`)\n+    #: instead (an attribute of the Werkzeug exception\n+    #: :exc:`~werkzeug.exceptions.MethodNotAllowed`)\n     #: because the request was never internally bound.\n     #:\n     #: .. versionadded:: 0.6\n\n@@ -14,7 +14,7 @@ def parse_changelog():\n     with open(\"CHANGES.rst\") as f:\n         lineiter = iter(f)\n         for line in lineiter:\n-            match = re.search(\"^Version\\s+(.*)\", line.strip())\n+            match = re.search(r\"^Version\\s+(.*)\", line.strip())\n \n             if match is None:\n                 continue\n\n@@ -1 +1 @@\n-from hello import app\n+from hello import app  # noqa: F401\n\n@@ -163,7 +163,8 @@ def test_url_mapping(app, client):\n     app.add_url_rule(\"/\", \"index\", index)\n     app.add_url_rule(\"/more\", \"more\", more, methods=[\"GET\", \"POST\"])\n \n-    # Issue 1288: Test that automatic options are not added when non-uppercase 'options' in methods\n+    # Issue 1288: Test that automatic options are not added\n+    #             when non-uppercase 'options' in methods\n     app.add_url_rule(\"/options\", \"options\", options, methods=[\"options\"])\n \n     assert client.get(\"/\").data == b\"GET\"\n@@ -779,7 +780,7 @@ def test_teardown_request_handler_error(app, client):\n         # exception.\n         try:\n             raise TypeError()\n-        except:\n+        except Exception:\n             pass\n \n     @app.teardown_request\n@@ -791,7 +792,7 @@ def test_teardown_request_handler_error(app, client):\n         # exception.\n         try:\n             raise TypeError()\n-        except:\n+        except Exception:\n             pass\n \n     @app.route(\"/\")\n@@ -963,7 +964,7 @@ def test_http_error_subclass_handling(app, client):\n         return \"banana\"\n \n     @app.errorhandler(403)\n-    def handle_forbidden_subclass(e):\n+    def handle_403(e):\n         assert not isinstance(e, ForbiddenSubclass)\n         assert isinstance(e, Forbidden)\n         return \"apple\"\n@@ -1065,12 +1066,12 @@ def test_error_handler_after_processor_error(app, client):\n \n     @app.before_request\n     def before_request():\n-        if trigger == \"before\":\n+        if _trigger == \"before\":\n             1 // 0\n \n     @app.after_request\n     def after_request(response):\n-        if trigger == \"after\":\n+        if _trigger == \"after\":\n             1 // 0\n         return response\n \n@@ -1082,7 +1083,7 @@ def test_error_handler_after_processor_error(app, client):\n     def internal_server_error(e):\n         return \"Hello Server Error\", 500\n \n-    for trigger in \"before\", \"after\":\n+    for _trigger in \"before\", \"after\":\n         rv = client.get(\"/\")\n         assert rv.status_code == 500\n         assert rv.data == b\"Hello Server Error\"\n@@ -1459,10 +1460,12 @@ def test_static_route_with_host_matching():\n     # Providing static_host without host_matching=True should error.\n     with pytest.raises(Exception):\n         flask.Flask(__name__, static_host=\"example.com\")\n-    # Providing host_matching=True with static_folder but without static_host should error.\n+    # Providing host_matching=True with static_folder\n+    # but without static_host should error.\n     with pytest.raises(Exception):\n         flask.Flask(__name__, host_matching=True)\n-    # Providing host_matching=True without static_host but with static_folder=None should not error.\n+    # Providing host_matching=True without static_host\n+    # but with static_folder=None should not error.\n     flask.Flask(__name__, host_matching=True, static_folder=None)\n \n \n@@ -1574,12 +1577,12 @@ def test_max_content_length(app, client):\n     @app.before_request\n     def always_first():\n         flask.request.form[\"myfile\"]\n-        assert False\n+        AssertionError()\n \n     @app.route(\"/accept\", methods=[\"POST\"])\n     def accept_file():\n         flask.request.form[\"myfile\"]\n-        assert False\n+        AssertionError()\n \n     @app.errorhandler(413)\n     def catcher(error):\n@@ -1765,7 +1768,7 @@ def test_preserve_only_once(app, client):\n     def fail_func():\n         1 // 0\n \n-    for x in range(3):\n+    for _x in range(3):\n         with pytest.raises(ZeroDivisionError):\n             client.get(\"/fail\")\n \n\n@@ -705,7 +705,7 @@ def test_add_template_test_with_name_and_template(app, client):\n def test_context_processing(app, client):\n     answer_bp = flask.Blueprint(\"answer_bp\", __name__)\n \n-    template_string = lambda: flask.render_template_string(\n+    template_string = lambda: flask.render_template_string(  # noqa: E731\n         \"{% if notanswer %}{{ notanswer }} is not the answer. {% endif %}\"\n         \"{% if answer %}{{ answer }} is the answer.{% endif %}\"\n     )\n\n@@ -56,7 +56,7 @@ def test_cli_name(test_apps):\n \n \n def test_find_best_app(test_apps):\n-    \"\"\"Test if `find_best_app` behaves as expected with different combinations of input.\"\"\"\n+    \"\"\"Test if `find_best_app` behaves as expected with different combinations of input.\"\"\"  # noqa: B950\n     script_info = ScriptInfo()\n \n     class Module:\n\n@@ -76,39 +76,32 @@ def test_config_from_class():\n     common_object_test(app)\n \n \n-def test_config_from_envvar():\n-    env = os.environ\n-    try:\n-        os.environ = {}\n+def test_config_from_envvar(monkeypatch):\n+    monkeypatch.setattr(\"os.environ\", {})\n     app = flask.Flask(__name__)\n     with pytest.raises(RuntimeError) as e:\n         app.config.from_envvar(\"FOO_SETTINGS\")\n         assert \"'FOO_SETTINGS' is not set\" in str(e.value)\n     assert not app.config.from_envvar(\"FOO_SETTINGS\", silent=True)\n \n-        os.environ = {\"FOO_SETTINGS\": __file__.rsplit(\".\", 1)[0] + \".py\"}\n+    monkeypatch.setattr(\n+        \"os.environ\", {\"FOO_SETTINGS\": __file__.rsplit(\".\", 1)[0] + \".py\"}\n+    )\n     assert app.config.from_envvar(\"FOO_SETTINGS\")\n     common_object_test(app)\n-    finally:\n-        os.environ = env\n \n \n-def test_config_from_envvar_missing():\n-    env = os.environ\n-    try:\n-        os.environ = {\"FOO_SETTINGS\": \"missing.cfg\"}\n+def test_config_from_envvar_missing(monkeypatch):\n+    monkeypatch.setattr(\"os.environ\", {\"FOO_SETTINGS\": \"missing.cfg\"})\n     with pytest.raises(IOError) as e:\n         app = flask.Flask(__name__)\n         app.config.from_envvar(\"FOO_SETTINGS\")\n     msg = str(e.value)\n     assert msg.startswith(\n-            \"[Errno 2] Unable to load configuration \"\n-            \"file (No such file or directory):\"\n+        \"[Errno 2] Unable to load configuration \" \"file (No such file or directory):\"\n     )\n     assert msg.endswith(\"missing.cfg'\")\n     assert not app.config.from_envvar(\"FOO_SETTINGS\", silent=True)\n-    finally:\n-        os.environ = env\n \n \n def test_config_missing():\n\n@@ -182,7 +182,7 @@ class TestJSON(object):\n \n     def test_jsonify_arrays(self, app, client):\n         \"\"\"Test jsonify of lists and args unpacking.\"\"\"\n-        l = [\n+        a_list = [\n             0,\n             42,\n             3.14,\n@@ -196,16 +196,16 @@ class TestJSON(object):\n \n         @app.route(\"/args_unpack\")\n         def return_args_unpack():\n-            return flask.jsonify(*l)\n+            return flask.jsonify(*a_list)\n \n         @app.route(\"/array\")\n         def return_array():\n-            return flask.jsonify(l)\n+            return flask.jsonify(a_list)\n \n         for url in \"/args_unpack\", \"/array\":\n             rv = client.get(url)\n             assert rv.mimetype == \"application/json\"\n-            assert flask.json.loads(rv.data) == l\n+            assert flask.json.loads(rv.data) == a_list\n \n     def test_jsonify_date_types(self, app, client):\n         \"\"\"Test jsonify with datetime.date and datetime.datetime types.\"\"\"\n@@ -278,7 +278,7 @@ class TestJSON(object):\n         assert rv == '<a ng-data=\\'{\"x\": [\"foo\", \"bar\", \"baz\\\\u0027\"]}\\'></a>'\n \n     def test_json_customization(self, app, client):\n-        class X(object):\n+        class X(object):  # noqa: B903, for Python2 compatibility\n             def __init__(self, val):\n                 self.val = val\n \n@@ -313,7 +313,7 @@ class TestJSON(object):\n         assert rv.data == b'\"<42>\"'\n \n     def test_blueprint_json_customization(self, app, client):\n-        class X(object):\n+        class X(object):  # noqa: B903, for Python2 compatibility\n             def __init__(self, val):\n                 self.val = val\n \n@@ -352,6 +352,9 @@ class TestJSON(object):\n         )\n         assert rv.data == b'\"<42>\"'\n \n+    @pytest.mark.skipif(\n+        not has_encoding(\"euc-kr\"), reason=\"The euc-kr encoding is required.\"\n+    )\n     def test_modified_url_encoding(self, app, client):\n         class ModifiedRequest(flask.Request):\n             url_charset = \"euc-kr\"\n@@ -367,13 +370,10 @@ class TestJSON(object):\n         assert rv.status_code == 200\n         assert rv.data == u\"정상처리\".encode(\"utf-8\")\n \n-    if not has_encoding(\"euc-kr\"):\n-        test_modified_url_encoding = None\n-\n     def test_json_key_sorting(self, app, client):\n         app.debug = True\n \n-        assert app.config[\"JSON_SORT_KEYS\"] == True\n+        assert app.config[\"JSON_SORT_KEYS\"]\n         d = dict.fromkeys(range(20), \"foo\")\n \n         @app.route(\"/\")\n@@ -858,7 +858,7 @@ class TestNoImports(object):\n         try:\n             flask.Flask(\"importerror\")\n         except NotImplementedError:\n-            assert False, \"Flask(import_name) is importing import_name.\"\n+            AssertionError(\"Flask(import_name) is importing import_name.\")\n \n \n class TestStreaming(object):\n\n@@ -140,4 +140,4 @@ def test_meta_path_loader_without_is_package(request, modules_tmpdir):\n     request.addfinalizer(sys.meta_path.pop)\n \n     with pytest.raises(AttributeError):\n-        import unimportable\n+        import unimportable  # noqa: F401\n\n@@ -48,7 +48,7 @@ def test_duplicate_tag():\n \n \n def test_custom_tag():\n-    class Foo(object):\n+    class Foo(object):  # noqa: B903, for Python2 compatibility\n         def __init__(self, data):\n             self.data = data\n \n\n@@ -64,7 +64,7 @@ def test_memory_consumption():\n     # This test only works on CPython 2.7.\n     if sys.version_info >= (2, 7) and not hasattr(sys, \"pypy_translation_info\"):\n         with assert_no_leak():\n-            for x in range(10):\n+            for _x in range(10):\n                 fire()\n \n \n\n@@ -191,7 +191,6 @@ class TestGreenletContextCopying(object):\n         @app.route(\"/\")\n         def index():\n             flask.session[\"fizz\"] = \"buzz\"\n-            reqctx = flask._request_ctx_stack.top.copy()\n \n             @flask.copy_current_request_context\n             def g():\n@@ -228,7 +227,7 @@ def test_session_error_pops_context():\n     @app.route(\"/\")\n     def index():\n         # shouldn't get here\n-        assert False\n+        AssertionError()\n \n     response = app.test_client().get(\"/\")\n     assert response.status_code == 500\n\n@@ -398,12 +398,12 @@ def test_templates_auto_reload_debug_run(app, monkeypatch):\n     monkeypatch.setattr(werkzeug.serving, \"run_simple\", run_simple_mock)\n \n     app.run()\n-    assert app.templates_auto_reload == False\n-    assert app.jinja_env.auto_reload == False\n+    assert not app.templates_auto_reload\n+    assert not app.jinja_env.auto_reload\n \n     app.run(debug=True)\n-    assert app.templates_auto_reload == True\n-    assert app.jinja_env.auto_reload == True\n+    assert app.templates_auto_reload\n+    assert app.jinja_env.auto_reload\n \n \n def test_template_loader_debugging(test_apps, monkeypatch):\n@@ -412,7 +412,7 @@ def test_template_loader_debugging(test_apps, monkeypatch):\n     called = []\n \n     class _TestHandler(logging.Handler):\n-        def handle(x, record):\n+        def handle(self, record):\n             called.append(True)\n             text = str(record.msg)\n             assert '1: trying loader of application \"blueprintapp\"' in text\n\n@@ -211,13 +211,13 @@ def test_session_transactions_no_null_sessions():\n \n     with app.test_client() as c:\n         with pytest.raises(RuntimeError) as e:\n-            with c.session_transaction() as sess:\n+            with c.session_transaction():\n                 pass\n         assert \"Session backend did not open a session\" in str(e.value)\n \n \n def test_session_transactions_keep_context(app, client, req_ctx):\n-    rv = client.get(\"/\")\n+    client.get(\"/\")\n     req = flask.request._get_current_object()\n     assert req is not None\n     with client.session_transaction():\n@@ -227,7 +227,7 @@ def test_session_transactions_keep_context(app, client, req_ctx):\n def test_session_transaction_needs_cookies(app):\n     c = app.test_client(use_cookies=False)\n     with pytest.raises(RuntimeError) as e:\n-        with c.session_transaction() as s:\n+        with c.session_transaction():\n             pass\n     assert \"cookies\" in str(e.value)\n \n\n@@ -149,7 +149,7 @@ def test_default_error_handler():\n         return \"bp-default\"\n \n     @bp.errorhandler(Forbidden)\n-    def bp_exception_handler(e):\n+    def bp_forbidden_handler(e):\n         assert isinstance(e, Forbidden)\n         return \"bp-forbidden\"\n \n@@ -164,13 +164,13 @@ def test_default_error_handler():\n     app = flask.Flask(__name__)\n \n     @app.errorhandler(HTTPException)\n-    def catchall_errorhandler(e):\n+    def catchall_exception_handler(e):\n         assert isinstance(e, HTTPException)\n         assert isinstance(e, NotFound)\n         return \"default\"\n \n     @app.errorhandler(Forbidden)\n-    def catchall_errorhandler(e):\n+    def catchall_forbidden_handler(e):\n         assert isinstance(e, Forbidden)\n         return \"forbidden\"\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
