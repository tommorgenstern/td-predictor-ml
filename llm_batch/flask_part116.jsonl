{"custom_id": "flask#c7a53888a1a514619b0611fd8b7928592f4ed612", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 144 | Lines Deleted: 26 | Files Changed: 4 | Hunks: 6 | Methods Changed: 14 | Complexity Δ (Sum/Max): 10/10 | Churn Δ: 170 | Churn Cumulative: 10313 | Contributors (this commit): 69 | Commits (past 90d): 7 | Contributors (cumulative): 80 | DMM Complexity: 1.0\n\nDIFF:\n@@ -192,6 +192,8 @@ class Flask(App):\n             \"SESSION_COOKIE_SAMESITE\": None,\n             \"SESSION_REFRESH_EACH_REQUEST\": True,\n             \"MAX_CONTENT_LENGTH\": None,\n+            \"MAX_FORM_MEMORY_SIZE\": 500_000,\n+            \"MAX_FORM_PARTS\": 1_000,\n             \"SEND_FILE_MAX_AGE_DEFAULT\": None,\n             \"TRAP_BAD_REQUEST_ERRORS\": None,\n             \"TRAP_HTTP_EXCEPTIONS\": False,\n\n@@ -52,13 +52,96 @@ class Request(RequestBase):\n     #: something similar.\n     routing_exception: HTTPException | None = None\n \n+    _max_content_length: int | None = None\n+    _max_form_memory_size: int | None = None\n+    _max_form_parts: int | None = None\n+\n     @property\n-    def max_content_length(self) -> int | None:  # type: ignore[override]\n-        \"\"\"Read-only view of the ``MAX_CONTENT_LENGTH`` config key.\"\"\"\n-        if current_app:\n+    def max_content_length(self) -> int | None:\n+        \"\"\"The maximum number of bytes that will be read during this request. If\n+        this limit is exceeded, a 413 :exc:`~werkzeug.exceptions.RequestEntityTooLarge`\n+        error is raised. If it is set to ``None``, no limit is enforced at the\n+        Flask application level. However, if it is ``None`` and the request has\n+        no ``Content-Length`` header and the WSGI server does not indicate that\n+        it terminates the stream, then no data is read to avoid an infinite\n+        stream.\n+\n+        Each request defaults to the :data:`MAX_CONTENT_LENGTH` config, which\n+        defaults to ``None``. It can be set on a specific ``request`` to apply\n+        the limit to that specific view. This should be set appropriately based\n+        on an application's or view's specific needs.\n+\n+        .. versionchanged:: 3.1\n+            This can be set per-request.\n+\n+        .. versionchanged:: 0.6\n+            This is configurable through Flask config.\n+        \"\"\"\n+        if self._max_content_length is not None:\n+            return self._max_content_length\n+\n+        if not current_app:\n+            return super().max_content_length\n+\n         return current_app.config[\"MAX_CONTENT_LENGTH\"]  # type: ignore[no-any-return]\n-        else:\n-            return None\n+\n+    @max_content_length.setter\n+    def max_content_length(self, value: int | None) -> None:\n+        self._max_content_length = value\n+\n+    @property\n+    def max_form_memory_size(self) -> int | None:\n+        \"\"\"The maximum size in bytes any non-file form field may be in a\n+        ``multipart/form-data`` body. If this limit is exceeded, a 413\n+        :exc:`~werkzeug.exceptions.RequestEntityTooLarge` error is raised. If it\n+        is set to ``None``, no limit is enforced at the Flask application level.\n+\n+        Each request defaults to the :data:`MAX_FORM_MEMORY_SIZE` config, which\n+        defaults to ``500_000``. It can be set on a specific ``request`` to\n+        apply the limit to that specific view. This should be set appropriately\n+        based on an application's or view's specific needs.\n+\n+        .. versionchanged:: 3.1\n+            This is configurable through Flask config.\n+        \"\"\"\n+        if self._max_form_memory_size is not None:\n+            return self._max_form_memory_size\n+\n+        if not current_app:\n+            return super().max_form_memory_size\n+\n+        return current_app.config[\"MAX_FORM_MEMORY_SIZE\"]  # type: ignore[no-any-return]\n+\n+    @max_form_memory_size.setter\n+    def max_form_memory_size(self, value: int | None) -> None:\n+        self._max_form_memory_size = value\n+\n+    @property  # type: ignore[override]\n+    def max_form_parts(self) -> int | None:\n+        \"\"\"The maximum number of fields that may be present in a\n+        ``multipart/form-data`` body. If this limit is exceeded, a 413\n+        :exc:`~werkzeug.exceptions.RequestEntityTooLarge` error is raised. If it\n+        is set to ``None``, no limit is enforced at the Flask application level.\n+\n+        Each request defaults to the :data:`MAX_FORM_PARTS` config, which\n+        defaults to ``1_000``. It can be set on a specific ``request`` to apply\n+        the limit to that specific view. This should be set appropriately based\n+        on an application's or view's specific needs.\n+\n+        .. versionchanged:: 3.1\n+            This is configurable through Flask config.\n+        \"\"\"\n+        if self._max_form_parts is not None:\n+            return self._max_form_parts\n+\n+        if not current_app:\n+            return super().max_form_parts\n+\n+        return current_app.config[\"MAX_FORM_PARTS\"]  # type: ignore[no-any-return]\n+\n+    @max_form_parts.setter\n+    def max_form_parts(self, value: int | None) -> None:\n+        self._max_form_parts = value\n \n     @property\n     def endpoint(self) -> str | None:\n\n@@ -1538,27 +1538,6 @@ def test_werkzeug_passthrough_errors(\n     app.run(debug=debug, use_debugger=use_debugger, use_reloader=use_reloader)\n \n \n-def test_max_content_length(app, client):\n-    app.config[\"MAX_CONTENT_LENGTH\"] = 64\n-\n-    @app.before_request\n-    def always_first():\n-        flask.request.form[\"myfile\"]\n-        AssertionError()\n-\n-    @app.route(\"/accept\", methods=[\"POST\"])\n-    def accept_file():\n-        flask.request.form[\"myfile\"]\n-        AssertionError()\n-\n-    @app.errorhandler(413)\n-    def catcher(error):\n-        return \"42\"\n-\n-    rv = client.post(\"/accept\", data={\"myfile\": \"foo\" * 100})\n-    assert rv.data == b\"42\"\n-\n-\n def test_url_processors(app, client):\n     @app.url_defaults\n     def add_language_code(endpoint, values):\n\n@@ -0,0 +1,54 @@\n+from __future__ import annotations\n+\n+from flask import Flask\n+from flask import Request\n+from flask import request\n+from flask.testing import FlaskClient\n+\n+\n+def test_max_content_length(app: Flask, client: FlaskClient) -> None:\n+    app.config[\"MAX_CONTENT_LENGTH\"] = 50\n+\n+    @app.post(\"/\")\n+    def index():\n+        request.form[\"myfile\"]\n+        AssertionError()\n+\n+    @app.errorhandler(413)\n+    def catcher(error):\n+        return \"42\"\n+\n+    rv = client.post(\"/\", data={\"myfile\": \"foo\" * 50})\n+    assert rv.data == b\"42\"\n+\n+\n+def test_limit_config(app: Flask):\n+    app.config[\"MAX_CONTENT_LENGTH\"] = 100\n+    app.config[\"MAX_FORM_MEMORY_SIZE\"] = 50\n+    app.config[\"MAX_FORM_PARTS\"] = 3\n+    r = Request({})\n+\n+    # no app context, use Werkzeug defaults\n+    assert r.max_content_length is None\n+    assert r.max_form_memory_size == 500_000\n+    assert r.max_form_parts == 1_000\n+\n+    # in app context, use config\n+    with app.app_context():\n+        assert r.max_content_length == 100\n+        assert r.max_form_memory_size == 50\n+        assert r.max_form_parts == 3\n+\n+    # regardless of app context, use override\n+    r.max_content_length = 90\n+    r.max_form_memory_size = 30\n+    r.max_form_parts = 4\n+\n+    assert r.max_content_length == 90\n+    assert r.max_form_memory_size == 30\n+    assert r.max_form_parts == 4\n+\n+    with app.app_context():\n+        assert r.max_content_length == 90\n+        assert r.max_form_memory_size == 30\n+        assert r.max_form_parts == 4\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#9efc1ebeeb431769897798cdf8de2c67dcbbc9c0", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 15 | Lines Deleted: 0 | Files Changed: 3 | Hunks: 8 | Methods Changed: 3 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 15 | Churn Cumulative: 10335 | Contributors (this commit): 70 | Commits (past 90d): 12 | Contributors (cumulative): 81 | DMM Complexity: 1.0\n\nDIFF:\n@@ -189,6 +189,7 @@ class Flask(App):\n             \"SESSION_COOKIE_PATH\": None,\n             \"SESSION_COOKIE_HTTPONLY\": True,\n             \"SESSION_COOKIE_SECURE\": False,\n+            \"SESSION_COOKIE_PARTITIONED\": False,\n             \"SESSION_COOKIE_SAMESITE\": None,\n             \"SESSION_REFRESH_EACH_REQUEST\": True,\n             \"MAX_CONTENT_LENGTH\": None,\n\n@@ -224,6 +224,14 @@ class SessionInterface:\n         \"\"\"\n         return app.config[\"SESSION_COOKIE_SAMESITE\"]  # type: ignore[no-any-return]\n \n+    def get_cookie_partitioned(self, app: Flask) -> bool:\n+        \"\"\"Returns True if the cookie should be partitioned. By default, uses\n+        the value of :data:`SESSION_COOKIE_PARTITIONED`.\n+\n+        .. versionadded:: 3.1\n+        \"\"\"\n+        return app.config[\"SESSION_COOKIE_PARTITIONED\"]  # type: ignore[no-any-return]\n+\n     def get_expiration_time(self, app: Flask, session: SessionMixin) -> datetime | None:\n         \"\"\"A helper method that returns an expiration date for the session\n         or ``None`` if the session is linked to the browser session.  The\n@@ -338,6 +346,7 @@ class SecureCookieSessionInterface(SessionInterface):\n         domain = self.get_cookie_domain(app)\n         path = self.get_cookie_path(app)\n         secure = self.get_cookie_secure(app)\n+        partitioned = self.get_cookie_partitioned(app)\n         samesite = self.get_cookie_samesite(app)\n         httponly = self.get_cookie_httponly(app)\n \n@@ -354,6 +363,7 @@ class SecureCookieSessionInterface(SessionInterface):\n                     domain=domain,\n                     path=path,\n                     secure=secure,\n+                    partitioned=partitioned,\n                     samesite=samesite,\n                     httponly=httponly,\n                 )\n@@ -374,6 +384,7 @@ class SecureCookieSessionInterface(SessionInterface):\n             domain=domain,\n             path=path,\n             secure=secure,\n+            partitioned=partitioned,\n             samesite=samesite,\n         )\n         response.vary.add(\"Cookie\")\n\n@@ -293,6 +293,7 @@ def test_session_using_session_settings(app, client):\n         SESSION_COOKIE_DOMAIN=\".example.com\",\n         SESSION_COOKIE_HTTPONLY=False,\n         SESSION_COOKIE_SECURE=True,\n+        SESSION_COOKIE_PARTITIONED=True,\n         SESSION_COOKIE_SAMESITE=\"Lax\",\n         SESSION_COOKIE_PATH=\"/\",\n     )\n@@ -315,6 +316,7 @@ def test_session_using_session_settings(app, client):\n     assert \"secure\" in cookie\n     assert \"httponly\" not in cookie\n     assert \"samesite\" in cookie\n+    assert \"partitioned\" in cookie\n \n     rv = client.get(\"/clear\", \"http://www.example.com:8080/test/\")\n     cookie = rv.headers[\"set-cookie\"].lower()\n@@ -324,6 +326,7 @@ def test_session_using_session_settings(app, client):\n     assert \"path=/\" in cookie\n     assert \"secure\" in cookie\n     assert \"samesite\" in cookie\n+    assert \"partitioned\" in cookie\n \n \n def test_session_using_samesite_attribute(app, client):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#df201ed152b61c439ea1ace179f35b424594ba6c", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 63 | Contributors (this commit): 2 | Commits (past 90d): 1 | Contributors (cumulative): 2 | DMM Complexity: None\n\nDIFF:\n@@ -5,7 +5,7 @@ from flask import template_rendered\n @pytest.mark.parametrize(\n     (\"path\", \"template_name\"),\n     (\n-        (\"/\", \"xhr.html\"),\n+        (\"/\", \"fetch.html\"),\n         (\"/plain\", \"xhr.html\"),\n         (\"/fetch\", \"fetch.html\"),\n         (\"/jquery\", \"jquery.html\"),\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#8aa161a43731795841fa2678d3dff0559cee527e", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 4 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 2 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 78 | Contributors (this commit): 2 | Commits (past 90d): 1 | Contributors (cumulative): 2 | DMM Complexity: None\n\nDIFF:\n@@ -1,4 +1,5 @@\n import sqlite3\n+from datetime import datetime\n \n import click\n from flask import current_app\n@@ -44,6 +45,9 @@ def init_db_command():\n     click.echo(\"Initialized the database.\")\n \n \n+sqlite3.register_converter(\"timestamp\", lambda v: datetime.fromisoformat(v.decode()))\n+\n+\n def init_app(app):\n     \"\"\"Register database functions with the Flask app. This is called by\n     the application factory.\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#98ae71897600a3162f529b1b30c70b8abdf0961b", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): -2/0 | Churn Δ: 2 | Churn Cumulative: 4894 | Contributors (this commit): 28 | Commits (past 90d): 4 | Contributors (cumulative): 28 | DMM Complexity: None\n\nDIFF:\n@@ -1226,7 +1226,7 @@ class Flask(App):\n \n         # extend existing headers with provided headers\n         if headers:\n-            rv.headers.update(headers)  # type: ignore[arg-type]\n+            rv.headers.update(headers)\n \n         return rv\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#6c44dd4bb8e4f2ca5f135f172de4725b2cada155", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 3 | Churn Cumulative: 2196 | Contributors (this commit): 21 | Commits (past 90d): 4 | Contributors (cumulative): 21 | DMM Complexity: 1.0\n\nDIFF:\n@@ -547,7 +547,8 @@ def send_from_directory(\n     raises a 404 :exc:`~werkzeug.exceptions.NotFound` error.\n \n     :param directory: The directory that ``path`` must be located under,\n-        relative to the current application's root path.\n+        relative to the current application's root path. This *must not*\n+        be a value provided by the client, otherwise it becomes insecure.\n     :param path: The path to the file to send, relative to\n         ``directory``.\n     :param kwargs: Arguments to pass to :func:`send_file`.\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#2c3160304278d323da8485057770926d1b582579", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 82 | Lines Deleted: 42 | Files Changed: 2 | Hunks: 25 | Methods Changed: 9 | Complexity Δ (Sum/Max): 8/5 | Churn Δ: 124 | Churn Cumulative: 3511 | Contributors (this commit): 43 | Commits (past 90d): 2 | Contributors (cumulative): 50 | DMM Complexity: 0.6538461538461539\n\nDIFF:\n@@ -297,6 +297,9 @@ class ScriptInfo:\n     a bigger role.  Typically it's created automatically by the\n     :class:`FlaskGroup` but you can also manually create it and pass it\n     onwards as click object.\n+\n+    .. versionchanged:: 3.1\n+        Added the ``load_dotenv_defaults`` parameter and attribute.\n     \"\"\"\n \n     def __init__(\n@@ -304,6 +307,7 @@ class ScriptInfo:\n         app_import_path: str | None = None,\n         create_app: t.Callable[..., Flask] | None = None,\n         set_debug_flag: bool = True,\n+        load_dotenv_defaults: bool = True,\n     ) -> None:\n         #: Optionally the import path for the Flask application.\n         self.app_import_path = app_import_path\n@@ -314,6 +318,16 @@ class ScriptInfo:\n         #: this script info.\n         self.data: dict[t.Any, t.Any] = {}\n         self.set_debug_flag = set_debug_flag\n+\n+        self.load_dotenv_defaults = get_load_dotenv(load_dotenv_defaults)\n+        \"\"\"Whether default ``.flaskenv`` and ``.env`` files should be loaded.\n+\n+        ``ScriptInfo`` doesn't load anything, this is for reference when doing\n+        the load elsewhere during processing.\n+\n+        .. versionadded:: 3.1\n+        \"\"\"\n+\n         self._loaded_app: Flask | None = None\n \n     def load_app(self) -> Flask:\n@@ -479,23 +493,22 @@ _debug_option = click.Option(\n def _env_file_callback(\n     ctx: click.Context, param: click.Option, value: str | None\n ) -> str | None:\n-    if value is None:\n-        return None\n-\n-    import importlib\n-\n     try:\n-        importlib.import_module(\"dotenv\")\n+        import dotenv  # noqa: F401\n     except ImportError:\n+        # Only show an error if a value was passed, otherwise we still want to\n+        # call load_dotenv and show a message without exiting.\n+        if value is not None:\n             raise click.BadParameter(\n                 \"python-dotenv must be installed to load an env file.\",\n                 ctx=ctx,\n                 param=param,\n             ) from None\n \n-    # Don't check FLASK_SKIP_DOTENV, that only disables automatically\n-    # loading .env and .flaskenv files.\n-    load_dotenv(value)\n+    # Load if a value was passed, or we want to load default files, or both.\n+    if value is not None or ctx.obj.load_dotenv_defaults:\n+        load_dotenv(value, load_defaults=ctx.obj.load_dotenv_defaults)\n+\n     return value\n \n \n@@ -504,7 +517,11 @@ def _env_file_callback(\n _env_file_option = click.Option(\n     [\"-e\", \"--env-file\"],\n     type=click.Path(exists=True, dir_okay=False),\n-    help=\"Load environment variables from this file. python-dotenv must be installed.\",\n+    help=(\n+        \"Load environment variables from this file, taking precedence over\"\n+        \" those set by '.env' and '.flaskenv'. Variables set directly in the\"\n+        \" environment take highest precedence. python-dotenv must be installed.\"\n+    ),\n     is_eager=True,\n     expose_value=False,\n     callback=_env_file_callback,\n@@ -528,6 +545,9 @@ class FlaskGroup(AppGroup):\n         directory to the directory containing the first file found.\n     :param set_debug_flag: Set the app's debug flag.\n \n+    .. versionchanged:: 3.1\n+        ``-e path`` takes precedence over default ``.env`` and ``.flaskenv`` files.\n+\n     .. versionchanged:: 2.2\n         Added the ``-A/--app``, ``--debug/--no-debug``, ``-e/--env-file`` options.\n \n@@ -654,14 +674,11 @@ class FlaskGroup(AppGroup):\n         # when importing, blocking whatever command is being called.\n         os.environ[\"FLASK_RUN_FROM_CLI\"] = \"true\"\n \n-        # Attempt to load .env and .flask env files. The --env-file\n-        # option can cause another file to be loaded.\n-        if get_load_dotenv(self.load_dotenv):\n-            load_dotenv()\n-\n         if \"obj\" not in extra and \"obj\" not in self.context_settings:\n             extra[\"obj\"] = ScriptInfo(\n-                create_app=self.create_app, set_debug_flag=self.set_debug_flag\n+                create_app=self.create_app,\n+                set_debug_flag=self.set_debug_flag,\n+                load_dotenv_defaults=self.load_dotenv,\n             )\n \n         return super().make_context(info_name, args, parent=parent, **extra)\n@@ -684,18 +701,26 @@ def _path_is_ancestor(path: str, other: str) -> bool:\n     return os.path.join(path, other[len(path) :].lstrip(os.sep)) == other\n \n \n-def load_dotenv(path: str | os.PathLike[str] | None = None) -> bool:\n-    \"\"\"Load \"dotenv\" files in order of precedence to set environment variables.\n-\n-    If an env var is already set it is not overwritten, so earlier files in the\n-    list are preferred over later files.\n+def load_dotenv(\n+    path: str | os.PathLike[str] | None = None, load_defaults: bool = True\n+) -> bool:\n+    \"\"\"Load \"dotenv\" files to set environment variables. A given path takes\n+    precedence over ``.env``, which takes precedence over ``.flaskenv``. After\n+    loading and combining these files, values are only set if the key is not\n+    already set in ``os.environ``.\n \n     This is a no-op if `python-dotenv`_ is not installed.\n \n     .. _python-dotenv: https://github.com/theskumar/python-dotenv#readme\n \n-    :param path: Load the file at this location instead of searching.\n-    :return: ``True`` if a file was loaded.\n+    :param path: Load the file at this location.\n+    :param load_defaults: Search for and load the default ``.flaskenv`` and\n+        ``.env`` files.\n+    :return: ``True`` if at least one env var was loaded.\n+\n+    .. versionchanged:: 3.1\n+        Added the ``load_defaults`` parameter. A given path takes precedence\n+        over default files.\n \n     .. versionchanged:: 2.0\n         The current directory is not changed to the location of the\n@@ -715,34 +740,33 @@ def load_dotenv(path: str | os.PathLike[str] | None = None) -> bool:\n     except ImportError:\n         if path or os.path.isfile(\".env\") or os.path.isfile(\".flaskenv\"):\n             click.secho(\n-                \" * Tip: There are .env or .flaskenv files present.\"\n-                ' Do \"pip install python-dotenv\" to use them.',\n+                \" * Tip: There are .env files present. Install python-dotenv\"\n+                \" to use them.\",\n                 fg=\"yellow\",\n                 err=True,\n             )\n \n         return False\n \n-    # Always return after attempting to load a given path, don't load\n-    # the default files.\n-    if path is not None:\n-        if os.path.isfile(path):\n-            return dotenv.load_dotenv(path, encoding=\"utf-8\")\n+    data: dict[str, str | None] = {}\n \n-        return False\n-\n-    loaded = False\n-\n-    for name in (\".env\", \".flaskenv\"):\n-        path = dotenv.find_dotenv(name, usecwd=True)\n-\n-        if not path:\n+    if load_defaults:\n+        for default_name in (\".flaskenv\", \".env\"):\n+            if not (default_path := dotenv.find_dotenv(default_name, usecwd=True)):\n                 continue\n \n-        dotenv.load_dotenv(path, encoding=\"utf-8\")\n-        loaded = True\n+            data |= dotenv.dotenv_values(default_path, encoding=\"utf-8\")\n \n-    return loaded  # True if at least one file was located and loaded.\n+    if path is not None and os.path.isfile(path):\n+        data |= dotenv.dotenv_values(path, encoding=\"utf-8\")\n+\n+    for key, value in data.items():\n+        if key in os.environ or value is None:\n+            continue\n+\n+        os.environ[key] = value\n+\n+    return bool(data)  # True if at least one env var was loaded.\n \n \n def show_server_banner(debug: bool, app_import_path: str | None) -> None:\n\n@@ -398,7 +398,12 @@ def test_flaskgroup_nested(app, runner):\n def test_no_command_echo_loading_error():\n     from flask.cli import cli\n \n+    try:\n         runner = CliRunner(mix_stderr=False)\n+    except (DeprecationWarning, TypeError):\n+        # Click >= 8.2\n+        runner = CliRunner()\n+\n     result = runner.invoke(cli, [\"missing\"])\n     assert result.exit_code == 2\n     assert \"FLASK_APP\" in result.stderr\n@@ -408,7 +413,12 @@ def test_no_command_echo_loading_error():\n def test_help_echo_loading_error():\n     from flask.cli import cli\n \n+    try:\n         runner = CliRunner(mix_stderr=False)\n+    except (DeprecationWarning, TypeError):\n+        # Click >= 8.2\n+        runner = CliRunner()\n+\n     result = runner.invoke(cli, [\"--help\"])\n     assert result.exit_code == 0\n     assert \"FLASK_APP\" in result.stderr\n@@ -420,7 +430,13 @@ def test_help_echo_exception():\n         raise Exception(\"oh no\")\n \n     cli = FlaskGroup(create_app=create_app)\n+\n+    try:\n         runner = CliRunner(mix_stderr=False)\n+    except (DeprecationWarning, TypeError):\n+        # Click >= 8.2\n+        runner = CliRunner()\n+\n     result = runner.invoke(cli, [\"--help\"])\n     assert result.exit_code == 0\n     assert \"Exception: oh no\" in result.stderr\n@@ -537,7 +553,7 @@ def test_load_dotenv(monkeypatch):\n     # test env file encoding\n     assert os.environ[\"HAM\"] == \"火腿\"\n     # Non existent file should not load\n-    assert not load_dotenv(\"non-existent-file\")\n+    assert not load_dotenv(\"non-existent-file\", load_defaults=False)\n \n \n @need_dotenv\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#e13373f838ab34027c5a80e16a6cb8262d41eab7", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 34 | Lines Deleted: 5 | Files Changed: 6 | Hunks: 6 | Methods Changed: 4 | Complexity Δ (Sum/Max): 6/3 | Churn Δ: 39 | Churn Cumulative: 10376 | Contributors (this commit): 70 | Commits (past 90d): 10 | Contributors (cumulative): 84 | DMM Complexity: 1.0\n\nDIFF:\n@@ -180,6 +180,7 @@ class Flask(App):\n             \"TESTING\": False,\n             \"PROPAGATE_EXCEPTIONS\": None,\n             \"SECRET_KEY\": None,\n+            \"SECRET_KEY_FALLBACKS\": None,\n             \"PERMANENT_SESSION_LIFETIME\": timedelta(days=31),\n             \"USE_X_SENDFILE\": False,\n             \"SERVER_NAME\": None,\n\n@@ -315,14 +315,20 @@ class SecureCookieSessionInterface(SessionInterface):\n     def get_signing_serializer(self, app: Flask) -> URLSafeTimedSerializer | None:\n         if not app.secret_key:\n             return None\n-        signer_kwargs = dict(\n-            key_derivation=self.key_derivation, digest_method=self.digest_method\n-        )\n+\n+        keys: list[str | bytes] = [app.secret_key]\n+\n+        if fallbacks := app.config[\"SECRET_KEY_FALLBACKS\"]:\n+            keys.extend(fallbacks)\n+\n         return URLSafeTimedSerializer(\n-            app.secret_key,\n+            keys,  # type: ignore[arg-type]\n             salt=self.salt,\n             serializer=self.serializer,\n-            signer_kwargs=signer_kwargs,\n+            signer_kwargs={\n+                \"key_derivation\": self.key_derivation,\n+                \"digest_method\": self.digest_method,\n+            },\n         )\n \n     def open_session(self, app: Flask, request: Request) -> SecureCookieSession | None:\n\n@@ -1,5 +1,6 @@\n import gc\n import re\n+import typing as t\n import uuid\n import warnings\n import weakref\n@@ -369,6 +370,27 @@ def test_missing_session(app):\n         expect_exception(flask.session.pop, \"foo\")\n \n \n+def test_session_secret_key_fallbacks(app, client) -> None:\n+    @app.post(\"/\")\n+    def set_session() -> str:\n+        flask.session[\"a\"] = 1\n+        return \"\"\n+\n+    @app.get(\"/\")\n+    def get_session() -> dict[str, t.Any]:\n+        return dict(flask.session)\n+\n+    # Set session with initial secret key\n+    client.post()\n+    assert client.get().json == {\"a\": 1}\n+    # Change secret key, session can't be loaded and appears empty\n+    app.secret_key = \"new test key\"\n+    assert client.get().json == {}\n+    # Add initial secret key as fallback, session can be loaded\n+    app.config[\"SECRET_KEY_FALLBACKS\"] = [\"test key\"]\n+    assert client.get().json == {\"a\": 1}\n+\n+\n def test_session_expiration(app, client):\n     permanent = True\n \n\n\n\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#4995a775df21a206b529403bc30d71795a994fd4", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 81 | Lines Deleted: 38 | Files Changed: 3 | Hunks: 16 | Methods Changed: 5 | Complexity Δ (Sum/Max): 5/4 | Churn Δ: 119 | Churn Cumulative: 12073 | Contributors (this commit): 72 | Commits (past 90d): 9 | Contributors (cumulative): 90 | DMM Complexity: 0.0\n\nDIFF:\n@@ -425,32 +425,40 @@ class Flask(App):\n         is created at a point where the request context is not yet set\n         up so the request is passed explicitly.\n \n-        .. versionadded:: 0.6\n-\n-        .. versionchanged:: 0.9\n-           This can now also be called without a request object when the\n-           URL adapter is created for the application context.\n+        .. versionchanged:: 3.1\n+            If :data:`SERVER_NAME` is set, it does not restrict requests to\n+            only that domain, for both ``subdomain_matching`` and\n+            ``host_matching``.\n \n         .. versionchanged:: 1.0\n             :data:`SERVER_NAME` no longer implicitly enables subdomain\n             matching. Use :attr:`subdomain_matching` instead.\n+\n+        .. versionchanged:: 0.9\n+           This can be called outside a request when the URL adapter is created\n+           for an application context.\n+\n+        .. versionadded:: 0.6\n         \"\"\"\n         if request is not None:\n-            # If subdomain matching is disabled (the default), use the\n-            # default subdomain in all cases. This should be the default\n-            # in Werkzeug but it currently does not have that feature.\n-            if not self.subdomain_matching:\n-                subdomain = self.url_map.default_subdomain or None\n-            else:\n             subdomain = None\n+            server_name = self.config[\"SERVER_NAME\"]\n+\n+            if self.url_map.host_matching:\n+                # Don't pass SERVER_NAME, otherwise it's used and the actual\n+                # host is ignored, which breaks host matching.\n+                server_name = None\n+            elif not self.subdomain_matching:\n+                # Werkzeug doesn't implement subdomain matching yet. Until then,\n+                # disable it by forcing the current subdomain to the default, or\n+                # the empty string.\n+                subdomain = self.url_map.default_subdomain or \"\"\n \n             return self.url_map.bind_to_environ(\n-                request.environ,\n-                server_name=self.config[\"SERVER_NAME\"],\n-                subdomain=subdomain,\n+                request.environ, server_name=server_name, subdomain=subdomain\n             )\n-        # We need at the very least the server name to be set for this\n-        # to work.\n+\n+        # Need at least SERVER_NAME to match/build outside a request.\n         if self.config[\"SERVER_NAME\"] is not None:\n             return self.url_map.bind(\n                 self.config[\"SERVER_NAME\"],\n\n@@ -4,6 +4,7 @@ import typing as t\n import uuid\n import warnings\n import weakref\n+from contextlib import nullcontext\n from datetime import datetime\n from datetime import timezone\n from platform import python_implementation\n@@ -1483,6 +1484,48 @@ def test_request_locals():\n     assert not flask.g\n \n \n+@pytest.mark.parametrize(\n+    (\"subdomain_matching\", \"host_matching\", \"expect_base\", \"expect_abc\", \"expect_xyz\"),\n+    [\n+        (False, False, \"default\", \"default\", \"default\"),\n+        (True, False, \"default\", \"abc\", \"<invalid>\"),\n+        (False, True, \"default\", \"abc\", \"default\"),\n+    ],\n+)\n+def test_server_name_matching(\n+    subdomain_matching: bool,\n+    host_matching: bool,\n+    expect_base: str,\n+    expect_abc: str,\n+    expect_xyz: str,\n+) -> None:\n+    app = flask.Flask(\n+        __name__,\n+        subdomain_matching=subdomain_matching,\n+        host_matching=host_matching,\n+        static_host=\"example.test\" if host_matching else None,\n+    )\n+    app.config[\"SERVER_NAME\"] = \"example.test\"\n+\n+    @app.route(\"/\", defaults={\"name\": \"default\"}, host=\"<name>\")\n+    @app.route(\"/\", subdomain=\"<name>\", host=\"<name>.example.test\")\n+    def index(name: str) -> str:\n+        return name\n+\n+    client = app.test_client()\n+\n+    r = client.get(base_url=\"http://example.test\")\n+    assert r.text == expect_base\n+\n+    r = client.get(base_url=\"http://abc.example.test\")\n+    assert r.text == expect_abc\n+\n+    with pytest.warns() if subdomain_matching else nullcontext():\n+        r = client.get(base_url=\"http://xyz.other.test\")\n+\n+    assert r.text == expect_xyz\n+\n+\n def test_server_name_subdomain():\n     app = flask.Flask(__name__, subdomain_matching=True)\n     client = app.test_client()\n\n@@ -951,7 +951,10 @@ def test_nesting_url_prefixes(\n \n \n def test_nesting_subdomains(app, client) -> None:\n-    subdomain = \"api\"\n+    app.subdomain_matching = True\n+    app.config[\"SERVER_NAME\"] = \"example.test\"\n+    client.allow_subdomain_redirects = True\n+\n     parent = flask.Blueprint(\"parent\", __name__)\n     child = flask.Blueprint(\"child\", __name__)\n \n@@ -960,42 +963,31 @@ def test_nesting_subdomains(app, client) -> None:\n         return \"child\"\n \n     parent.register_blueprint(child)\n-    app.register_blueprint(parent, subdomain=subdomain)\n-\n-    client.allow_subdomain_redirects = True\n-\n-    domain_name = \"domain.tld\"\n-    app.config[\"SERVER_NAME\"] = domain_name\n-    response = client.get(\"/child/\", base_url=\"http://api.\" + domain_name)\n+    app.register_blueprint(parent, subdomain=\"api\")\n \n+    response = client.get(\"/child/\", base_url=\"http://api.example.test\")\n     assert response.status_code == 200\n \n \n def test_child_and_parent_subdomain(app, client) -> None:\n-    child_subdomain = \"api\"\n-    parent_subdomain = \"parent\"\n+    app.subdomain_matching = True\n+    app.config[\"SERVER_NAME\"] = \"example.test\"\n+    client.allow_subdomain_redirects = True\n+\n     parent = flask.Blueprint(\"parent\", __name__)\n-    child = flask.Blueprint(\"child\", __name__, subdomain=child_subdomain)\n+    child = flask.Blueprint(\"child\", __name__, subdomain=\"api\")\n \n     @child.route(\"/\")\n     def index():\n         return \"child\"\n \n     parent.register_blueprint(child)\n-    app.register_blueprint(parent, subdomain=parent_subdomain)\n-\n-    client.allow_subdomain_redirects = True\n-\n-    domain_name = \"domain.tld\"\n-    app.config[\"SERVER_NAME\"] = domain_name\n-    response = client.get(\n-        \"/\", base_url=f\"http://{child_subdomain}.{parent_subdomain}.{domain_name}\"\n-    )\n+    app.register_blueprint(parent, subdomain=\"parent\")\n \n+    response = client.get(\"/\", base_url=\"http://api.parent.example.test\")\n     assert response.status_code == 200\n \n-    response = client.get(\"/\", base_url=f\"http://{parent_subdomain}.{domain_name}\")\n-\n+    response = client.get(\"/\", base_url=\"http://parent.example.test\")\n     assert response.status_code == 404\n \n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#4f7156f2c3271613b34d04040b502b9d7ae35eb9", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 23 | Lines Deleted: 0 | Files Changed: 2 | Hunks: 4 | Methods Changed: 3 | Complexity Δ (Sum/Max): 3/2 | Churn Δ: 23 | Churn Cumulative: 5012 | Contributors (this commit): 28 | Commits (past 90d): 8 | Contributors (cumulative): 29 | DMM Complexity: 0.8125\n\nDIFF:\n@@ -24,6 +24,7 @@ from werkzeug.routing import RoutingException\n from werkzeug.routing import Rule\n from werkzeug.serving import is_running_from_reloader\n from werkzeug.wrappers import Response as BaseResponse\n+from werkzeug.wsgi import get_host\n \n from . import cli\n from . import typing as ft\n@@ -183,6 +184,7 @@ class Flask(App):\n             \"SECRET_KEY_FALLBACKS\": None,\n             \"PERMANENT_SESSION_LIFETIME\": timedelta(days=31),\n             \"USE_X_SENDFILE\": False,\n+            \"TRUSTED_HOSTS\": None,\n             \"SERVER_NAME\": None,\n             \"APPLICATION_ROOT\": \"/\",\n             \"SESSION_COOKIE_NAME\": \"session\",\n@@ -441,6 +443,11 @@ class Flask(App):\n         .. versionadded:: 0.6\n         \"\"\"\n         if request is not None:\n+            if (trusted_hosts := self.config[\"TRUSTED_HOSTS\"]) is not None:\n+                request.trusted_hosts = trusted_hosts\n+\n+            # Check trusted_hosts here until bind_to_environ does.\n+            request.host = get_host(request.environ, request.trusted_hosts)  # pyright: ignore\n             subdomain = None\n             server_name = self.config[\"SERVER_NAME\"]\n \n\n@@ -52,3 +52,19 @@ def test_limit_config(app: Flask):\n         assert r.max_content_length == 90\n         assert r.max_form_memory_size == 30\n         assert r.max_form_parts == 4\n+\n+\n+def test_trusted_hosts_config(app: Flask) -> None:\n+    app.config[\"TRUSTED_HOSTS\"] = [\"example.test\", \".other.test\"]\n+\n+    @app.get(\"/\")\n+    def index() -> str:\n+        return \"\"\n+\n+    client = app.test_client()\n+    r = client.get(base_url=\"http://example.test\")\n+    assert r.status_code == 200\n+    r = client.get(base_url=\"http://a.other.test\")\n+    assert r.status_code == 200\n+    r = client.get(base_url=\"http://bad.test\")\n+    assert r.status_code == 400\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#f49dbfd3e451006a485e81ebce030495131c4454", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 7 | Lines Deleted: 5 | Files Changed: 1 | Hunks: 4 | Methods Changed: 2 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 12 | Churn Cumulative: 406 | Contributors (this commit): 7 | Commits (past 90d): 2 | Contributors (cumulative): 7 | DMM Complexity: 1.0\n\nDIFF:\n@@ -1,5 +1,6 @@\n from __future__ import annotations\n \n+import collections.abc as c\n import hashlib\n import typing as t\n from collections.abc import MutableMapping\n@@ -20,8 +21,7 @@ if t.TYPE_CHECKING:  # pragma: no cover\n     from .wrappers import Response\n \n \n-# TODO generic when Python > 3.8\n-class SessionMixin(MutableMapping):  # type: ignore[type-arg]\n+class SessionMixin(MutableMapping[str, t.Any]):\n     \"\"\"Expands a basic dictionary with session attributes.\"\"\"\n \n     @property\n@@ -49,8 +49,7 @@ class SessionMixin(MutableMapping):  # type: ignore[type-arg]\n     accessed = True\n \n \n-# TODO generic when Python > 3.8\n-class SecureCookieSession(CallbackDict, SessionMixin):  # type: ignore[type-arg]\n+class SecureCookieSession(CallbackDict[str, t.Any], SessionMixin):\n     \"\"\"Base class for sessions based on signed cookies.\n \n     This session backend will set the :attr:`modified` and\n@@ -72,7 +71,10 @@ class SecureCookieSession(CallbackDict, SessionMixin):  # type: ignore[type-arg]\n     #: different users.\n     accessed = False\n \n-    def __init__(self, initial: t.Any = None) -> None:\n+    def __init__(\n+        self,\n+        initial: c.Mapping[str, t.Any] | c.Iterable[tuple[str, t.Any]] | None = None,\n+    ) -> None:\n         def on_update(self: te.Self) -> None:\n             self.modified = True\n             self.accessed = True\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#18ffe1eaf6c2eeffc898f4e8a590c062c40b30dc", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 3 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 3 | Churn Cumulative: 1996 | Contributors (this commit): 16 | Commits (past 90d): 1 | Contributors (cumulative): 16 | DMM Complexity: None\n\nDIFF:\n@@ -62,6 +62,9 @@ html_logo = \"_static/flask-vertical.png\"\n html_title = f\"Flask Documentation ({version})\"\n html_show_sourcelink = False\n \n+gettext_uuid = True\n+gettext_compact = False\n+\n # Local Extensions -----------------------------------------------------\n \n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#d22bfcd4cfe3b93daddfce8521f77447ca8d6b84", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 0 | Lines Deleted: 21 | Files Changed: 1 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): -2/0 | Churn Δ: 21 | Churn Cumulative: 479 | Contributors (this commit): 7 | Commits (past 90d): 1 | Contributors (cumulative): 7 | DMM Complexity: 0.0\n\nDIFF:\n@@ -1,7 +1,3 @@\n-from __future__ import annotations\n-\n-import typing as t\n-\n from . import json as json\n from .app import Flask as Flask\n from .blueprints import Blueprint as Blueprint\n@@ -41,20 +37,3 @@ from .templating import stream_template as stream_template\n from .templating import stream_template_string as stream_template_string\n from .wrappers import Request as Request\n from .wrappers import Response as Response\n-\n-\n-def __getattr__(name: str) -> t.Any:\n-    if name == \"__version__\":\n-        import importlib.metadata\n-        import warnings\n-\n-        warnings.warn(\n-            \"The '__version__' attribute is deprecated and will be removed in\"\n-            \" Flask 3.1. Use feature detection or\"\n-            \" 'importlib.metadata.version(\\\"flask\\\")' instead.\",\n-            DeprecationWarning,\n-            stacklevel=2,\n-        )\n-        return importlib.metadata.version(\"flask\")\n-\n-    raise AttributeError(name)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#b394a994e6d632643d0061e0e67772f076925951", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 2/2 | Churn Δ: 2 | Churn Cumulative: 481 | Contributors (this commit): 7 | Commits (past 90d): 2 | Contributors (cumulative): 7 | DMM Complexity: None\n\nDIFF:\n@@ -50,7 +50,7 @@ def __getattr__(name: str) -> t.Any:\n \n         warnings.warn(\n             \"The '__version__' attribute is deprecated and will be removed in\"\n-            \" Flask 3.1. Use feature detection or\"\n+            \" Flask 3.2. Use feature detection or\"\n             \" 'importlib.metadata.version(\\\"flask\\\")' instead.\",\n             DeprecationWarning,\n             stacklevel=2,\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#54c3f87af9f6c0d6622cec2c3d9695b0229fb8fa", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 3 | Churn Cumulative: 559 | Contributors (this commit): 5 | Commits (past 90d): 1 | Contributors (cumulative): 5 | DMM Complexity: None\n\nDIFF:\n@@ -10,6 +10,7 @@ from urllib.parse import urlsplit\n \n import werkzeug.test\n from click.testing import CliRunner\n+from click.testing import Result\n from werkzeug.test import Client\n from werkzeug.wrappers import Request as BaseRequest\n \n@@ -273,7 +274,7 @@ class FlaskCliRunner(CliRunner):\n \n     def invoke(  # type: ignore\n         self, cli: t.Any = None, args: t.Any = None, **kwargs: t.Any\n-    ) -> t.Any:\n+    ) -> Result:\n         \"\"\"Invokes a CLI command in an isolated environment. See\n         :meth:`CliRunner.invoke <click.testing.CliRunner.invoke>` for\n         full method documentation. See :ref:`testing-cli` for examples.\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#165af0a090e229e94ccd93896efc15b9fe0488da", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 6 | Lines Deleted: 6 | Files Changed: 2 | Hunks: 2 | Methods Changed: 2 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 12 | Churn Cumulative: 5513 | Contributors (this commit): 29 | Commits (past 90d): 2 | Contributors (cumulative): 33 | DMM Complexity: None\n\nDIFF:\n@@ -265,9 +265,9 @@ class Flask(App):\n         # For one, it might be created while the server is running (e.g. during\n         # development). Also, Google App Engine stores static files somewhere\n         if self.has_static_folder:\n-            assert (\n-                bool(static_host) == host_matching\n-            ), \"Invalid static_host/host_matching combination\"\n+            assert bool(static_host) == host_matching, (\n+                \"Invalid static_host/host_matching combination\"\n+            )\n             # Use a weakref to avoid creating a reference cycle between the app\n             # and the view function (see #3761).\n             self_ref = weakref.ref(self)\n\n@@ -58,9 +58,9 @@ class EnvironBuilder(werkzeug.test.EnvironBuilder):\n     ) -> None:\n         assert not (base_url or subdomain or url_scheme) or (\n             base_url is not None\n-        ) != bool(\n-            subdomain or url_scheme\n-        ), 'Cannot pass \"subdomain\" or \"url_scheme\" with \"base_url\".'\n+        ) != bool(subdomain or url_scheme), (\n+            'Cannot pass \"subdomain\" or \"url_scheme\" with \"base_url\".'\n+        )\n \n         if base_url is None:\n             http_host = app.config.get(\"SERVER_NAME\") or \"localhost\"\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#da600394865c06a4772c433c1a560453dcf4f868", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 3 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 2/2 | Churn Δ: 4 | Churn Cumulative: 1559 | Contributors (this commit): 18 | Commits (past 90d): 2 | Contributors (cumulative): 18 | DMM Complexity: 1.0\n\nDIFF:\n@@ -684,7 +684,9 @@ class FlaskGroup(AppGroup):\n         return super().make_context(info_name, args, parent=parent, **extra)\n \n     def parse_args(self, ctx: click.Context, args: list[str]) -> list[str]:\n-        if not args and self.no_args_is_help:\n+        if (not args and self.no_args_is_help) or (\n+            len(args) == 1 and args[0] in self.get_help_option_names(ctx)\n+        ):\n             # Attempt to load --env-file and --app early in case they\n             # were given as env vars. Otherwise no_args_is_help will not\n             # see commands from app.cli.\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#7d5d1874581209f66ad7bcdfb7f85b2b9a7ca471", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 1 | Churn Cumulative: 482 | Contributors (this commit): 7 | Commits (past 90d): 1 | Contributors (cumulative): 7 | DMM Complexity: None\n\nDIFF:\n@@ -42,6 +42,7 @@ from .templating import stream_template_string as stream_template_string\n from .wrappers import Request as Request\n from .wrappers import Response as Response\n \n+if not t.TYPE_CHECKING:\n \n     def __getattr__(name: str) -> t.Any:\n         if name == \"__version__\":\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#41ec5760a2c55a099c3a1733fdd36fbb1258a02b", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 3 | Lines Deleted: 35 | Files Changed: 2 | Hunks: 5 | Methods Changed: 10 | Complexity Δ (Sum/Max): -6/0 | Churn Δ: 38 | Churn Cumulative: 980 | Contributors (this commit): 10 | Commits (past 90d): 2 | Contributors (cumulative): 14 | DMM Complexity: 0.0\n\nDIFF:\n@@ -1,5 +1,4 @@\n import os\n-import pkgutil\n import sys\n \n import pytest\n@@ -96,37 +95,6 @@ def leak_detector():\n     assert leaks == []\n \n \n-@pytest.fixture(params=(True, False))\n-def limit_loader(request, monkeypatch):\n-    \"\"\"Patch pkgutil.get_loader to give loader without get_filename or archive.\n-\n-    This provides for tests where a system has custom loaders, e.g. Google App\n-    Engine's HardenedModulesHook, which have neither the `get_filename` method\n-    nor the `archive` attribute.\n-\n-    This fixture will run the testcase twice, once with and once without the\n-    limitation/mock.\n-    \"\"\"\n-    if not request.param:\n-        return\n-\n-    class LimitedLoader:\n-        def __init__(self, loader):\n-            self.loader = loader\n-\n-        def __getattr__(self, name):\n-            if name in {\"archive\", \"get_filename\"}:\n-                raise AttributeError(f\"Mocking a loader which does not have {name!r}.\")\n-            return getattr(self.loader, name)\n-\n-    old_get_loader = pkgutil.get_loader\n-\n-    def get_loader(*args, **kwargs):\n-        return LimitedLoader(old_get_loader(*args, **kwargs))\n-\n-    monkeypatch.setattr(pkgutil, \"get_loader\", get_loader)\n-\n-\n @pytest.fixture\n def modules_tmp_path(tmp_path, monkeypatch):\n     \"\"\"A temporary directory added to sys.path.\"\"\"\n\n@@ -63,7 +63,7 @@ def test_uninstalled_namespace_paths(tmp_path, monkeypatch, purge_module):\n \n \n def test_installed_module_paths(\n-    modules_tmp_path, modules_tmp_path_prefix, purge_module, site_packages, limit_loader\n+    modules_tmp_path, modules_tmp_path_prefix, purge_module, site_packages\n ):\n     (site_packages / \"site_app.py\").write_text(\n         \"import flask\\napp = flask.Flask(__name__)\\n\"\n@@ -78,7 +78,7 @@ def test_installed_module_paths(\n \n \n def test_installed_package_paths(\n-    limit_loader, modules_tmp_path, modules_tmp_path_prefix, purge_module, monkeypatch\n+    modules_tmp_path, modules_tmp_path_prefix, purge_module, monkeypatch\n ):\n     installed_path = modules_tmp_path / \"path\"\n     installed_path.mkdir()\n@@ -97,7 +97,7 @@ def test_installed_package_paths(\n \n \n def test_prefix_package_paths(\n-    limit_loader, modules_tmp_path, modules_tmp_path_prefix, purge_module, site_packages\n+    modules_tmp_path, modules_tmp_path_prefix, purge_module, site_packages\n ):\n     app = site_packages / \"site_package\"\n     app.mkdir()\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
