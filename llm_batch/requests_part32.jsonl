{"custom_id": "requests#49140d68809064c6272b714c74414b849d9f75a9", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 4 | Lines Deleted: 4 | Files Changed: 3 | Hunks: 4 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 8 | Churn Cumulative: 1526 | Contributors (this commit): 14 | Commits (past 90d): 63 | Contributors (cumulative): 18 | DMM Complexity: None\n\nDIFF:\n@@ -43,7 +43,7 @@ master_doc = 'index'\n \n # General information about the project.\n project = u'Requests'\n-copyright = u'2011. A <a href=\"http://kennethreitz.com/pages/open-projects.html\">Kenneth Reitz</a> Project'\n+copyright = u'2012. A <a href=\"http://kennethreitz.com/pages/open-projects.html\">Kenneth Reitz</a> Project'\n \n # The version info for the project you're documenting, acts as replacement for\n # |version| and |release|, also used in various other places throughout the\n\n@@ -9,7 +9,7 @@\n requests\n ~~~~~~~~\n \n-:copyright: (c) 2011 by Kenneth Reitz.\n+:copyright: (c) 2012 by Kenneth Reitz.\n :license: ISC, see LICENSE for more details.\n \n \"\"\"\n@@ -19,7 +19,7 @@ __version__ = '0.9.0'\n __build__ = 0x000900\n __author__ = 'Kenneth Reitz'\n __license__ = 'ISC'\n-__copyright__ = 'Copyright 2011 Kenneth Reitz'\n+__copyright__ = 'Copyright 2012 Kenneth Reitz'\n \n \n \n\n@@ -6,7 +6,7 @@ requests.api\n \n This module implements the Requests API.\n \n-:copyright: (c) 2011 by Kenneth Reitz.\n+:copyright: (c) 2012 by Kenneth Reitz.\n :license: ISC, see LICENSE for more details.\n \n \"\"\"\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#95911f059aa76c46f9da002df9724cb41fa7cdce", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 13 | Lines Deleted: 22 | Files Changed: 1 | Hunks: 5 | Methods Changed: 2 | Complexity Δ (Sum/Max): -1/0 | Churn Δ: 35 | Churn Cumulative: 4140 | Contributors (this commit): 31 | Commits (past 90d): 85 | Contributors (cumulative): 31 | DMM Complexity: 1.0\n\nDIFF:\n@@ -9,7 +9,6 @@ This module contains the primary objects that power Requests.\n \n import os\n import urllib\n-import zlib\n \n from urlparse import urlparse, urlunparse, urljoin, urlsplit\n from datetime import datetime\n@@ -627,33 +626,25 @@ class Response(object):\n         return gen\n \n \n-    def iter_lines(self, newlines=None, decode_unicode=None):\n+    def iter_lines(self, chunk_size=10 * 1024, decode_unicode=None):\n         \"\"\"Iterates over the response data, one line at a time.  This\n         avoids reading the content at once into memory for large\n         responses.\n-\n-        :param newlines: a collection of bytes to seperate lines with.\n         \"\"\"\n \n-        if newlines is None:\n-            newlines = ('\\r', '\\n', '\\r\\n')\n+        pending = None\n+        for chunk in self.iter_content(chunk_size, decode_unicode=decode_unicode):\n+            if pending is not None:\n+                chunk = pending + chunk\n+            lines = chunk.splitlines()\n+            for line in lines[:-1]:\n+                yield line\n+            # Save the last part of the chunk for next iteration, to keep full line together\n+            pending = lines[-1]\n \n-        chunk = []\n-\n-        for c in self.iter_content(1, decode_unicode=decode_unicode):\n-            if not c:\n-                break\n-\n-            if c in newlines:\n-                yield ''.join(chunk)\n-                chunk = []\n-            else:\n-                chunk.append(c)\n-\n-        # Yield the remainder, in case the response\n-        # did not terminate with a newline\n-        if chunk:\n-            yield ''.join(chunk)\n+        # Yield the last line\n+        if pending is not None:\n+            yield pending\n \n \n     @property\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#5174ab43257e1675d119335166b40fdbb2d68bf3", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 3 | Lines Deleted: 3 | Files Changed: 1 | Hunks: 3 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 6 | Churn Cumulative: 4146 | Contributors (this commit): 31 | Commits (past 90d): 86 | Contributors (cumulative): 31 | DMM Complexity: None\n\nDIFF:\n@@ -636,15 +636,15 @@ class Response(object):\n         for chunk in self.iter_content(chunk_size, decode_unicode=decode_unicode):\n             if pending is not None:\n                 chunk = pending + chunk\n-            lines = chunk.splitlines()\n+            lines = chunk.splitlines(True)\n             for line in lines[:-1]:\n-                yield line\n+                yield line.rstrip()\n             # Save the last part of the chunk for next iteration, to keep full line together\n             pending = lines[-1]\n \n         # Yield the last line\n         if pending is not None:\n-            yield pending\n+            yield pending.rstrip()\n \n \n     @property\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#115b51e68c95d5aeea10c40719cf770303f4da61", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 15 | Lines Deleted: 0 | Files Changed: 3 | Hunks: 4 | Methods Changed: 2 | Complexity Δ (Sum/Max): 3/2 | Churn Δ: 15 | Churn Cumulative: 5840 | Contributors (this commit): 38 | Commits (past 90d): 143 | Contributors (cumulative): 53 | DMM Complexity: 0.7777777777777778\n\nDIFF:\n@@ -15,6 +15,7 @@ Configurations:\n :decode_unicode: Decode unicode responses automatically?\n :keep_alive: Reuse HTTP Connections?\n :max_retries: The number of times a request should be retried in the event of a connection failure.\n+:eager_mode: If true, Requests will raise errors immediately.\n :safe_mode: If true, Requests will catch all errors.\n :pool_maxsize: The maximium size of an HTTP connection pool.\n :pool_connections: The number of active HTTP connection pools to use.\n@@ -38,5 +39,6 @@ defaults['decode_unicode'] = True\n defaults['pool_connections'] = 10\n defaults['pool_maxsize'] = 10\n defaults['max_retries'] = 0\n+defaults['eager_mode'] = False\n defaults['safe_mode'] = False\n defaults['keep_alive'] = True\n\n@@ -526,6 +526,9 @@ class Request(object):\n                 # Save the response.\n                 self.response.content\n             \n+            if self.config.get('eager_mode'):\n+                self.response.raise_for_status()\n+\n             return self.sent\n \n \n\n@@ -279,6 +279,16 @@ class RequestsTestSuite(unittest.TestCase):\n         r.raise_for_status()\n \n \n+    def test_default_status_raising(self):\n+        config = {'eager_mode': True}\n+        args = [httpbin('status', '404')]\n+        kwargs = dict(config=config)\n+        self.assertRaises(HTTPError, requests.get, *args, **kwargs)\n+\n+        r = requests.get(httpbin('status', '200'))\n+        self.assertEqual(r.status_code, 200)\n+\n+\n     def test_decompress_gzip(self):\n \n         r = requests.get(httpbin('gzip'))\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#459a91c54fc42ef385ca24811ea0833f38fd433b", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 4 | Lines Deleted: 4 | Files Changed: 3 | Hunks: 4 | Methods Changed: 2 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 8 | Churn Cumulative: 5848 | Contributors (this commit): 38 | Commits (past 90d): 146 | Contributors (cumulative): 53 | DMM Complexity: None\n\nDIFF:\n@@ -15,7 +15,7 @@ Configurations:\n :decode_unicode: Decode unicode responses automatically?\n :keep_alive: Reuse HTTP Connections?\n :max_retries: The number of times a request should be retried in the event of a connection failure.\n-:eager_mode: If true, Requests will raise errors immediately.\n+:danger_mode: If true, Requests will raise errors immediately.\n :safe_mode: If true, Requests will catch all errors.\n :pool_maxsize: The maximium size of an HTTP connection pool.\n :pool_connections: The number of active HTTP connection pools to use.\n@@ -39,6 +39,6 @@ defaults['decode_unicode'] = True\n defaults['pool_connections'] = 10\n defaults['pool_maxsize'] = 10\n defaults['max_retries'] = 0\n-defaults['eager_mode'] = False\n+defaults['danger_mode'] = False\n defaults['safe_mode'] = False\n defaults['keep_alive'] = True\n\n@@ -526,7 +526,7 @@ class Request(object):\n                 # Save the response.\n                 self.response.content\n             \n-            if self.config.get('eager_mode'):\n+            if self.config.get('danger_mode'):\n                 self.response.raise_for_status()\n \n             return self.sent\n\n@@ -280,7 +280,7 @@ class RequestsTestSuite(unittest.TestCase):\n \n \n     def test_default_status_raising(self):\n-        config = {'eager_mode': True}\n+        config = {'danger_mode': True}\n         args = [httpbin('status', '404')]\n         kwargs = dict(config=config)\n         self.assertRaises(HTTPError, requests.get, *args, **kwargs)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#638532dd9ae319bef4d2eaa4b905d21bfc035c7e", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 268 | Contributors (this commit): 3 | Commits (past 90d): 32 | Contributors (cumulative): 3 | DMM Complexity: None\n\nDIFF:\n@@ -15,8 +15,8 @@ requests\n \"\"\"\n \n __title__ = 'requests'\n-__version__ = '0.9.0'\n-__build__ = 0x000900\n+__version__ = '0.9.1'\n+__build__ = 0x000901\n __author__ = 'Kenneth Reitz'\n __license__ = 'ISC'\n __copyright__ = 'Copyright 2012 Kenneth Reitz'\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#3415e6de0b4584e9e0ff27f346aac498a8c506b2", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): -1/0 | Churn Δ: 2 | Churn Cumulative: 4153 | Contributors (this commit): 33 | Commits (past 90d): 88 | Contributors (cumulative): 33 | DMM Complexity: None\n\nDIFF:\n@@ -298,7 +298,7 @@ class Request(object):\n         scheme, netloc, path, params, query, fragment = urlparse(self.url)\n \n         if not scheme:\n-            raise ValueError()\n+            raise ValueError(\"Invalid URL %r: No schema supplied\" %r self.url)\n \n         netloc = netloc.encode('idna')\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#a25141f9f42f481a70debbcf20977e7b208c03d9", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 4155 | Contributors (this commit): 34 | Commits (past 90d): 89 | Contributors (cumulative): 34 | DMM Complexity: None\n\nDIFF:\n@@ -298,7 +298,7 @@ class Request(object):\n         scheme, netloc, path, params, query, fragment = urlparse(self.url)\n \n         if not scheme:\n-            raise ValueError(\"Invalid URL %r: No schema supplied\" %r self.url)\n+            raise ValueError(\"Invalid URL %r: No schema supplied\" %self.url)\n \n         netloc = netloc.encode('idna')\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#2b849545ea61f216e0699ad8454d24c609d0e3a4", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 54 | Lines Deleted: 29 | Files Changed: 4 | Hunks: 16 | Methods Changed: 10 | Complexity Δ (Sum/Max): 41/30 | Churn Δ: 83 | Churn Cumulative: 2539 | Contributors (this commit): 1 | Commits (past 90d): 24 | Contributors (cumulative): 4 | DMM Complexity: 1.0\n\nDIFF:\n@@ -306,7 +306,7 @@ class HTTPConnectionPool(ConnectionPool, RequestMethods):\n             headers = self.headers\n \n         if retries < 0:\n-            raise MaxRetryError(\"Max retries exceeded for url: %s\" % url)\n+            raise MaxRetryError(url)\n \n         if timeout is _Default:\n             timeout = self.timeout\n@@ -320,8 +320,7 @@ class HTTPConnectionPool(ConnectionPool, RequestMethods):\n             if self.port:\n                 host = \"%s:%d\" % (host, self.port)\n \n-            raise HostChangedError(\"Connection pool with host '%s' tried to \"\n-                                   \"open a foreign host: %s\" % (host, url))\n+            raise HostChangedError(host, url, retries - 1)\n \n         conn = None\n \n@@ -385,15 +384,12 @@ class HTTPConnectionPool(ConnectionPool, RequestMethods):\n             return self.urlopen(method, url, body, headers, retries - 1,\n                                 redirect, assert_same_host)  # Try again\n \n-        # Handle redirection\n-        if (redirect and\n-            response.status in [301, 302, 303, 307] and\n-            'location' in response.headers):  # Redirect, retry\n-            log.info(\"Redirecting %s -> %s\" %\n-                     (url, response.headers.get('location')))\n-            return self.urlopen(method, response.headers.get('location'), body,\n-                                headers, retries - 1, redirect,\n-                                assert_same_host)\n+        # Handle redirect?\n+        redirect_location = redirect and response.get_redirect_location()\n+        if redirect_location:\n+            log.info(\"Redirecting %s -> %s\" % (url, redirect_location))\n+            return self.urlopen(method, redirect_location, body, headers,\n+                                retries - 1, redirect, assert_same_host)\n \n         return response\n \n\n@@ -18,7 +18,9 @@ class SSLError(Exception):\n \n class MaxRetryError(HTTPError):\n     \"Raised when the maximum number of retries is exceeded.\"\n-    pass\n+    def __init__(self, url):\n+        HTTPError.__init__(self, \"Max retries exceeded for url: %s\" % url)\n+        self.url = url\n \n \n class TimeoutError(HTTPError):\n@@ -28,7 +30,15 @@ class TimeoutError(HTTPError):\n \n class HostChangedError(HTTPError):\n     \"Raised when an existing pool gets a request for a foreign host.\"\n-    pass\n+    def __init__(self, original_host, new_url, retries=3):\n+        HTTPError.__init__(self,\n+            \"Connection pool with host '%s' tried to open a foreign host: %s\" %\n+            (original_host, new_url))\n+\n+        self.original_host = original_host\n+        self.new_url = new_url\n+        self.retries = retries\n+\n \n class EmptyPoolError(HTTPError):\n     \"Raised when a pool runs out of connections and no more are allowed.\"\n\n@@ -4,20 +4,18 @@\n # This module is part of urllib3 and is released under\n # the MIT License: http://www.opensource.org/licenses/mit-license.php\n \n+import logging\n+\n from ._collections import RecentlyUsedContainer\n-from .connectionpool import (\n-    HTTPConnectionPool, HTTPSConnectionPool,\n-    get_host, connection_from_url,\n-)\n+from .connectionpool import HTTPConnectionPool, HTTPSConnectionPool\n+from .connectionpool import get_host, connection_from_url\n+from .exceptions import HostChangedError\n+from .request import RequestMethods\n \n \n __all__ = ['PoolManager', 'ProxyManager', 'proxy_from_url']\n \n \n-from .request import RequestMethods\n-from .connectionpool import HTTPConnectionPool, HTTPSConnectionPool\n-\n-\n pool_classes_by_scheme = {\n     'http': HTTPConnectionPool,\n     'https': HTTPSConnectionPool,\n@@ -28,6 +26,8 @@ port_by_scheme = {\n     'https': 443,\n }\n \n+log = logging.getLogger(__name__)\n+\n \n class PoolManager(RequestMethods):\n     \"\"\"\n@@ -105,7 +105,12 @@ class PoolManager(RequestMethods):\n         :class:`urllib3.connectionpool.ConnectionPool` can be chosen for it.\n         \"\"\"\n         conn = self.connection_from_url(url)\n-        return conn.urlopen(method, url, assert_same_host=False, **kw)\n+        try:\n+            return conn.urlopen(method, url, **kw)\n+\n+        except HostChangedError, e:\n+            kw['retries'] = e.retries # Persist retries countdown\n+            return self.urlopen(method, e.new_url, **kw)\n \n \n class ProxyManager(RequestMethods):\n\n@@ -84,6 +84,19 @@ class HTTPResponse(object):\n         if preload_content:\n             self._body = self.read(decode_content=decode_content)\n \n+    def get_redirect_location(self):\n+        \"\"\"\n+        Should we redirect and where to?\n+\n+        :returns: Truthy redirect location string if we got a redirect status\n+            code and valid location. ``None`` if redirect status and no\n+            location. ``False`` if not a redirect status code.\n+        \"\"\"\n+        if self.status in [301, 302, 303, 307]:\n+            return self.headers.get('location')\n+\n+        return False\n+\n     def release_conn(self):\n         if not self._pool or not self._connection:\n             return\n@@ -98,10 +111,9 @@ class HTTPResponse(object):\n             return self._body\n \n         if self._fp:\n-            return self.read(decode_content=self._decode_content,\n-                             cache_content=True)\n+            return self.read(cache_content=True)\n \n-    def read(self, amt=None, decode_content=True, cache_content=False):\n+    def read(self, amt=None, decode_content=None, cache_content=False):\n         \"\"\"\n         Similar to :meth:`httplib.HTTPResponse.read`, but with two additional\n         parameters: ``decode_content`` and ``cache_content``.\n@@ -124,6 +136,8 @@ class HTTPResponse(object):\n         \"\"\"\n         content_encoding = self.headers.get('content-encoding')\n         decoder = self.CONTENT_DECODERS.get(content_encoding)\n+        if decode_content is None:\n+            decode_content = self._decode_content\n \n         data = self._fp and self._fp.read(amt)\n \n@@ -154,8 +168,8 @@ class HTTPResponse(object):\n             if self._original_response and self._original_response.isclosed():\n                 self.release_conn()\n \n-    @staticmethod\n-    def from_httplib(r, **response_kw):\n+    @classmethod\n+    def from_httplib(ResponseCls, r, **response_kw):\n         \"\"\"\n         Given an :class:`httplib.HTTPResponse` instance ``r``, return a\n         corresponding :class:`urllib3.response.HTTPResponse` object.\n@@ -164,7 +178,7 @@ class HTTPResponse(object):\n         with ``original_response=r``.\n         \"\"\"\n \n-        return HTTPResponse(body=r,\n+        return ResponseCls(body=r,\n                            headers=dict(r.getheaders()),\n                            status=r.status,\n                            version=r.version,\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#53d679edba3a42d648e2b386d9ca725490c7b470", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 990 | Contributors (this commit): 14 | Commits (past 90d): 31 | Contributors (cumulative): 14 | DMM Complexity: None\n\nDIFF:\n@@ -34,7 +34,7 @@ def request(method, url, **kwargs):\n     :param verify: (optional) if ``True``, the SSL cert will be verified. A CA_BUNDLE path can also be provided.\n     \"\"\"\n \n-    s = kwargs.get('session') or sessions.session()\n+    s = kwargs.pop('session') if 'session' in kwargs else sessions.session()\n     return s.request(method=method, url=url, **kwargs)\n \n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#86eba21b8ae7ed3772f5706e1c5799efc127342b", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 3 | Lines Deleted: 3 | Files Changed: 1 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 6 | Churn Cumulative: 425 | Contributors (this commit): 5 | Commits (past 90d): 4 | Contributors (cumulative): 5 | DMM Complexity: None\n\nDIFF:\n@@ -22,7 +22,7 @@ Available hooks:\n \n \"\"\"\n \n-import warnings\n+import traceback\n \n \n def dispatch_hook(key, hooks, hook_data):\n@@ -34,7 +34,7 @@ def dispatch_hook(key, hooks, hook_data):\n         try:\n             return hooks.get(key).__call__(hook_data) or hook_data\n \n-        except Exception, why:\n-            warnings.warn(str(why))\n+        except Exception:\n+            traceback.print_exc()\n \n     return hook_data\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#bbbeedb0a200d41b0fab33880e97a50d566cdbab", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 0 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): -1/0 | Churn Δ: 1 | Churn Cumulative: 4156 | Contributors (this commit): 35 | Commits (past 90d): 85 | Contributors (cumulative): 35 | DMM Complexity: 1.0\n\nDIFF:\n@@ -82,7 +82,6 @@ class Request(object):\n         #: Dictionary or byte of querystring data to attach to the\n         #: :class:`Request <Request>`.\n         self.params = None\n-        self.params = dict(params or [])\n \n         #: True if :class:`Request <Request>` is part of a redirect chain (disables history\n         #: and HTTPError storage).\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#79f5d532c6a9ffcbb32b8cfcae8ec542c2699ff1", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 3 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 4 | Churn Cumulative: 270 | Contributors (this commit): 4 | Commits (past 90d): 13 | Contributors (cumulative): 4 | DMM Complexity: 0.0\n\nDIFF:\n@@ -86,7 +86,9 @@ class HTTPDigestAuth(AuthBase):\n             # XXX not implemented yet\n             entdig = None\n             p_parsed = urlparse(r.request.url)\n-            path = p_parsed.path + p_parsed.query\n+            path = p_parsed.path\n+            if p_parsed.query:\n+                path += '?' + p_parsed.query\n \n             A1 = '%s:%s:%s' % (self.username, realm, self.password)\n             A2 = '%s:%s' % (r.request.method, path)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#0536e5b708bea4e1ef25930bd7b4a8cfe930d6ce", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 1 | Churn Cumulative: 991 | Contributors (this commit): 15 | Commits (past 90d): 25 | Contributors (cumulative): 15 | DMM Complexity: None\n\nDIFF:\n@@ -32,6 +32,7 @@ def request(method, url, **kwargs):\n     :param session: (optional) A :class:`Session` object to be used for the request.\n     :param config: (optional) A configuration dictionary.\n     :param verify: (optional) if ``True``, the SSL cert will be verified. A CA_BUNDLE path can also be provided.\n+    :param prefetch: (optional) if ``True``, the response content will be immediately downloaded.\n     \"\"\"\n \n     s = kwargs.pop('session') if 'session' in kwargs else sessions.session()\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#df0dc2b67a5fcf82f6688af3f26e19c9379373f7", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 272 | Contributors (this commit): 3 | Commits (past 90d): 33 | Contributors (cumulative): 3 | DMM Complexity: None\n\nDIFF:\n@@ -15,8 +15,8 @@ requests\n \"\"\"\n \n __title__ = 'requests'\n-__version__ = '0.9.1'\n-__build__ = 0x000901\n+__version__ = '0.9.2'\n+__build__ = 0x000902\n __author__ = 'Kenneth Reitz'\n __license__ = 'ISC'\n __copyright__ = 'Copyright 2012 Kenneth Reitz'\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#4d38790b5bd076ca38802147a2ad827a958eb767", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 13 | Lines Deleted: 6 | Files Changed: 2 | Hunks: 8 | Methods Changed: 4 | Complexity Δ (Sum/Max): 1/2 | Churn Δ: 19 | Churn Cumulative: 5762 | Contributors (this commit): 42 | Commits (past 90d): 117 | Contributors (cumulative): 55 | DMM Complexity: 0.75\n\nDIFF:\n@@ -615,12 +615,12 @@ class Response(object):\n         def generate_chunked():\n             resp = self.raw._original_response\n             fp = resp.fp\n+            if resp.chunk_left:\n                 yield fp.read(resp.chunk_left)\n+                fp.read(2) #throw away crlf\n             while 1:\n                 #XXX correct line size\n-                pending_bytes = fp.readline(80).strip()\n-                if not pending_bytes:\n-                    break\n+                pending_bytes = fp.readline(40).strip()\n                 pending_bytes = int(pending_bytes, 16)\n                 if pending_bytes == 0:\n                     break\n@@ -628,11 +628,18 @@ class Response(object):\n                     chunk = fp.read(min(chunk_size, pending_bytes))\n                     pending_bytes-=len(chunk)\n                     yield chunk\n+                fp.read(2) # throw away crlf\n             self._content_consumed = True\n \n \n-        if getattr(self.raw._original_response, 'chunked', False):\n+        if getattr(getattr(self.raw, '_original_response', None), 'chunked', False):\n             gen = generate_chunked()\n+\n+            def hack_gen(gen=gen):\n+                for item in gen:\n+                    print repr(item)\n+                    yield item\n+            gen = hack_gen()\n         else:\n             gen = generate()\n \n\n@@ -608,9 +608,9 @@ class RequestsTestSuite(unittest.TestCase):\n         lines = (0, 2, 10, 100)\n \n         for i in lines:\n-\n             r = requests.get(httpbin('stream', str(i)), prefetch=False)\n-            len_lines = len([l for l in r.iter_lines()])\n+            lines = list(r.iter_lines())\n+            len_lines = len(lines)\n \n             self.assertEqual(i, len_lines)\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#1c8a1417115c31ead7891bf89951de194b20b5e1", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 0 | Lines Deleted: 6 | Files Changed: 1 | Hunks: 1 | Methods Changed: 2 | Complexity Δ (Sum/Max): -2/0 | Churn Δ: 6 | Churn Cumulative: 4209 | Contributors (this commit): 36 | Commits (past 90d): 83 | Contributors (cumulative): 36 | DMM Complexity: 0.3333333333333333\n\nDIFF:\n@@ -634,12 +634,6 @@ class Response(object):\n \n         if getattr(getattr(self.raw, '_original_response', None), 'chunked', False):\n             gen = generate_chunked()\n-\n-            def hack_gen(gen=gen):\n-                for item in gen:\n-                    print repr(item)\n-                    yield item\n-            gen = hack_gen()\n         else:\n             gen = generate()\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#8efb6cc870bd23de0d8d87708217d818236a733f", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 5 | Lines Deleted: 3 | Files Changed: 1 | Hunks: 3 | Methods Changed: 2 | Complexity Δ (Sum/Max): -8/0 | Churn Δ: 8 | Churn Cumulative: 4217 | Contributors (this commit): 37 | Commits (past 90d): 84 | Contributors (cumulative): 37 | DMM Complexity: 0.0\n\nDIFF:\n@@ -57,7 +57,8 @@ class Request(object):\n         hooks=None,\n         config=None,\n         _poolmanager=None,\n-        verify=None):\n+        verify=None,\n+        session=None):\n \n         #: Float describes the timeout of the request.\n         #  (Use socket.setdefaulttimeout() as fallback)\n@@ -116,7 +117,7 @@ class Request(object):\n         self.hooks = hooks\n \n         #: Session.\n-        self.session = None\n+        self.session = session\n \n         #: SSL Verification.\n         self.verify = verify\n@@ -246,7 +247,8 @@ class Request(object):\n                     timeout=self.timeout,\n                     _poolmanager=self._poolmanager,\n                     proxies = self.proxies,\n-                    verify = self.verify\n+                    verify = self.verify,\n+                    session = self.session\n                 )\n \n                 request.send()\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#7f9cef011407cd38d618279af04632b982037a17", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 8 | Lines Deleted: 3 | Files Changed: 1 | Hunks: 3 | Methods Changed: 2 | Complexity Δ (Sum/Max): 9/9 | Churn Δ: 11 | Churn Cumulative: 4228 | Contributors (this commit): 37 | Commits (past 90d): 85 | Contributors (cumulative): 37 | DMM Complexity: 0.0\n\nDIFF:\n@@ -615,11 +615,15 @@ class Response(object):\n         def generate_chunked():\n             resp = self.raw._original_response\n             fp = resp.fp\n-            if resp.chunk_left:\n-                yield fp.read(resp.chunk_left)\n+            if resp.chunk_left is not None:\n+                pending_bytes = resp.chunk_left\n+                while pending_bytes:\n+                    chunk = fp.read(min(chunk_size, pending_bytes))\n+                    pending_bytes-=len(chunk)\n+                    yield chunk\n                 fp.read(2) # throw away crlf\n             while 1:\n-                #XXX correct line size\n+                #XXX correct line size? (httplib has 64kb, seems insane)\n                 pending_bytes = fp.readline(40).strip()\n                 pending_bytes = int(pending_bytes, 16)\n                 if pending_bytes == 0:\n@@ -630,6 +634,7 @@ class Response(object):\n                     yield chunk\n                 fp.read(2) # throw away crlf\n             self._content_consumed = True\n+            fp.close()\n \n \n         if getattr(getattr(self.raw, '_original_response', None), 'chunked', False):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#c658b363e38c928a2f7be8e09eece8e11f863b62", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 11 | Lines Deleted: 14 | Files Changed: 1 | Hunks: 6 | Methods Changed: 3 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 25 | Churn Cumulative: 423 | Contributors (this commit): 7 | Commits (past 90d): 10 | Contributors (cumulative): 7 | DMM Complexity: 1.0\n\nDIFF:\n@@ -46,15 +46,16 @@ def patched(f):\n     return wrapped\n \n \n-def send(r, pools=None):\n-    \"\"\"Sends a given Request object.\"\"\"\n+def send(r, pool=None):\n+    \"\"\"Sends the request object using the specified pool. If a pool isn't \n+    specified this method blocks. Pools are useful because you can specify size\n+    and can hence limit concurrency.\"\"\"\n \n-    if pools:\n-        r._pools = pools\n+    if pool != None:\n+        print pool.full()\n+        return pool.spawn(r.send)\n \n-    r.send()\n-\n-    return r.response\n+    return gevent.spawn(r.send)\n \n \n # Patched requests.api functions.\n@@ -80,17 +81,13 @@ def map(requests, prefetch=True, size=None):\n \n     if size:\n         pool = Pool(size)\n-        pool.map(send, requests)\n-        pool.join()\n+        jobs = [pool.spawn(r.send) for r in requests]\n     else:\n-        jobs = [gevent.spawn(send, r) for r in requests]\n+        jobs = [gevent.spawn(r.send) for r in requests]\n+    \n     gevent.joinall(jobs)\n \n     if prefetch:\n         [r.response.content for r in requests]\n \n     return [r.response for r in requests]\n\\ No newline at end of file\n-\n-\n-\n-\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#97be9ee4cd6326bf7551f7a737877ef2e368ef20", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 425 | Contributors (this commit): 7 | Commits (past 90d): 11 | Contributors (cumulative): 7 | DMM Complexity: 0.0\n\nDIFF:\n@@ -52,7 +52,7 @@ def send(r, pool=None):\n     and can hence limit concurrency.\"\"\"\n \n     if pool != None:\n-        print pool.full()\n+\n         return pool.spawn(r.send)\n \n     return gevent.spawn(r.send)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#e38046e6c65b8f03026d13d339a9bacf849b2d85", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 0 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 1 | Churn Cumulative: 426 | Contributors (this commit): 7 | Commits (past 90d): 12 | Contributors (cumulative): 7 | DMM Complexity: None\n\nDIFF:\n@@ -52,7 +52,6 @@ def send(r, pool=None):\n     and can hence limit concurrency.\"\"\"\n \n     if pool != None:\n-\n         return pool.spawn(r.send)\n \n     return gevent.spawn(r.send)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#d9cb18ad2a5dcc54a9c931d094d112be167078ba", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 5 | Lines Deleted: 2 | Files Changed: 2 | Hunks: 3 | Methods Changed: 2 | Complexity Δ (Sum/Max): -9/0 | Churn Δ: 7 | Churn Cumulative: 4284 | Contributors (this commit): 37 | Commits (past 90d): 89 | Contributors (cumulative): 39 | DMM Complexity: 0.0\n\nDIFF:\n@@ -453,6 +453,9 @@ class Request(object):\n \n             conn.cert_reqs = 'CERT_REQUIRED'\n             conn.ca_certs = cert_loc\n+        else:\n+            conn.cert_reqs = 'CERT_NONE'\n+            conn.ca_certs = None\n \n         if not self.sent or anyway:\n \n\n@@ -34,10 +34,10 @@ class RequestsTestSuite(unittest.TestCase):\n \n         s = requests.session()\n \n-        s.get('https://kennethreitz.com', verify=False)\n-\n         self.assertRaises(requests.exceptions.SSLError, s.get, 'https://kennethreitz.com')\n \n+        s.get('https://kennethreitz.com', verify=False)\n+\n \n \n if __name__ == '__main__':\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#c18e6459a80d83c54f787549565eedb3a0210156", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 276 | Contributors (this commit): 3 | Commits (past 90d): 32 | Contributors (cumulative): 3 | DMM Complexity: None\n\nDIFF:\n@@ -15,8 +15,8 @@ requests\n \"\"\"\n \n __title__ = 'requests'\n-__version__ = '0.9.2'\n-__build__ = 0x000902\n+__version__ = '0.9.3'\n+__build__ = 0x000903\n __author__ = 'Kenneth Reitz'\n __license__ = 'ISC'\n __copyright__ = 'Copyright 2012 Kenneth Reitz'\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#b37fbf30a3d47aca184c0d4551832096fc7e7bb0", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 11 | Lines Deleted: 1 | Files Changed: 2 | Hunks: 2 | Methods Changed: 3 | Complexity Δ (Sum/Max): 11/9 | Churn Δ: 12 | Churn Cumulative: 5802 | Contributors (this commit): 43 | Commits (past 90d): 123 | Contributors (cumulative): 56 | DMM Complexity: 1.0\n\nDIFF:\n@@ -187,7 +187,7 @@ class Request(object):\n             if is_error:\n                 response.error = resp\n \n-            response.url = self.full_url\n+            response.url = self.full_url.decode('utf-8')\n \n             return response\n \n\n@@ -294,6 +294,16 @@ class RequestsTestSuite(unittest.TestCase):\n         r = requests.get(httpbin('gzip'))\n         r.content.decode('ascii')\n \n+    def test_response_has_unicode_url(self):\n+\n+        for service in SERVICES:\n+\n+            url = service('get')\n+\n+            response = requests.get(url)\n+\n+            self.assertIsInstance(response.url, unicode)\n+\n \n     def test_unicode_get(self):\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#3873121c01d0081777edb49b90d00e4c0ae777e1", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 6 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): -1/0 | Churn Δ: 8 | Churn Cumulative: 434 | Contributors (this commit): 8 | Commits (past 90d): 13 | Contributors (cumulative): 8 | DMM Complexity: 1.0\n\nDIFF:\n@@ -78,12 +78,8 @@ def map(requests, prefetch=True, size=None):\n \n     requests = list(requests)\n \n-    if size:\n-        pool = Pool(size)\n-        jobs = [pool.spawn(r.send) for r in requests]\n-    else:\n-        jobs = [gevent.spawn(r.send) for r in requests]\n-    \n+    pool = Pool(size) if size else None\n+    jobs = [send(r, pool) for r in requests]\n     gevent.joinall(jobs)\n \n     if prefetch:\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#6d071f43312e6585c32208eeda6918be36d3649c", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 0 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 1 | Churn Cumulative: 143 | Contributors (this commit): 3 | Commits (past 90d): 14 | Contributors (cumulative): 3 | DMM Complexity: None\n\nDIFF:\n@@ -35,7 +35,6 @@ defaults['base_headers'] = {\n \n defaults['verbose'] = None\n defaults['max_redirects'] = 30\n-defaults['decode_unicode'] = True\n defaults['pool_connections'] = 10\n defaults['pool_maxsize'] = 10\n defaults['max_retries'] = 0\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#49a38ac89a7bc7cbbeaa2322d4a5d45fcd590054", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 12 | Lines Deleted: 14 | Files Changed: 1 | Hunks: 9 | Methods Changed: 4 | Complexity Δ (Sum/Max): -2/0 | Churn Δ: 26 | Churn Cumulative: 4259 | Contributors (this commit): 37 | Commits (past 90d): 82 | Contributors (cumulative): 37 | DMM Complexity: 1.0\n\nDIFF:\n@@ -598,7 +598,7 @@ class Response(object):\n         return True\n \n \n-    def iter_content(self, chunk_size=10 * 1024, decode_unicode=None):\n+    def iter_content(self, chunk_size=10 * 1024, decode_unicode=False):\n         \"\"\"Iterates over the response data.  This avoids reading the content\n         at once into memory for large responses.  The chunk size is the number\n         of bytes it should read into memory.  This is not necessarily the\n@@ -652,9 +652,6 @@ class Response(object):\n         elif 'deflate' in self.headers.get('content-encoding', ''):\n             gen = stream_decompress(gen, mode='deflate')\n \n-        if decode_unicode is None:\n-            decode_unicode = self.config.get('decode_unicode')\n-\n         if decode_unicode:\n             gen = stream_decode_response_unicode(gen, self)\n \n@@ -692,9 +689,7 @@ class Response(object):\n \n     @property\n     def content(self):\n-        \"\"\"Content of the response, in bytes or unicode\n-        (if available).\n-        \"\"\"\n+        \"\"\"Content of the response, in bytes.\"\"\"\n \n         if self._content is None:\n             # Read the contents.\n@@ -707,26 +702,29 @@ class Response(object):\n             except AttributeError:\n                 self._content = None\n \n-        content = self._content\n+        self._content_consumed = True\n+        return self._content\n \n-        # Decode unicode content.\n-        if self.config.get('decode_unicode'):\n+\n+    @property\n+    def text(self):\n+        \"\"\"Content of the response, in unicode.\"\"\"\n \n         # Try charset from content-type\n \n-            if self.encoding:\n+        content = u''\n+\n         try:\n-                    content = unicode(content, self.encoding)\n+            content = unicode(self.content, self.encoding)\n         except UnicodeError:\n             pass\n \n-            # Fall back:\n+        # Try to fall back:\n         try:\n             content = unicode(content, self.encoding, errors='replace')\n         except TypeError:\n             pass\n \n-        self._content_consumed = True\n         return content\n \n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#f5a2b75924805f10f8c42945ad96f9e7d9a3f33e", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 2 | Churn Cumulative: 4261 | Contributors (this commit): 37 | Commits (past 90d): 83 | Contributors (cumulative): 37 | DMM Complexity: 1.0\n\nDIFF:\n@@ -711,9 +711,9 @@ class Response(object):\n         \"\"\"Content of the response, in unicode.\"\"\"\n \n         # Try charset from content-type\n-\n         content = u''\n \n+        if self.encoding:\n             try:\n                 content = unicode(self.content, self.encoding)\n             except UnicodeError:\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#47aba0cc20a3d44aa83bdde849ff39fc8b20d094", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 4 | Files Changed: 1 | Hunks: 2 | Methods Changed: 3 | Complexity Δ (Sum/Max): -1/0 | Churn Δ: 5 | Churn Cumulative: 4266 | Contributors (this commit): 37 | Commits (past 90d): 84 | Contributors (cumulative): 37 | DMM Complexity: 0.0\n\nDIFF:\n@@ -144,7 +144,7 @@ class Request(object):\n         return '<Request [%s]>' % (self.method)\n \n \n-    def _build_response(self, resp, is_error=False):\n+    def _build_response(self, resp):\n         \"\"\"Build internal :class:`Response <Response>` object\n         from given response.\n         \"\"\"\n@@ -184,9 +184,6 @@ class Request(object):\n             # Save original response for later.\n             response.raw = resp\n \n-            if is_error:\n-                response.error = resp\n-\n             response.url = self.full_url.decode('utf-8')\n \n             return response\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#efd2b57b920ec5b3dab6eca506bcc82d5090ba08", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 5 | Files Changed: 2 | Hunks: 3 | Methods Changed: 2 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 6 | Churn Cumulative: 4415 | Contributors (this commit): 37 | Commits (past 90d): 100 | Contributors (cumulative): 40 | DMM Complexity: None\n\nDIFF:\n@@ -10,16 +10,13 @@ Configurations:\n \n :base_headers: Default HTTP headers.\n :verbose: Stream to write request logging to.\n-:timeout: Seconds until request timeout.\n-:max_redirects: Maximum number of redirects allowed within a request.\n-:decode_unicode: Decode unicode responses automatically?\n+:max_redirects: Maximum number of redirects allowed within a request.s\n :keep_alive: Reuse HTTP Connections?\n :max_retries: The number of times a request should be retried in the event of a connection failure.\n :danger_mode: If true, Requests will raise errors immediately.\n :safe_mode: If true, Requests will catch all errors.\n :pool_maxsize: The maximium size of an HTTP connection pool.\n :pool_connections: The number of active HTTP connection pools to use.\n-\n \"\"\"\n \n from . import __version__\n\n@@ -183,7 +183,6 @@ class Request(object):\n \n             # Save original response for later.\n             response.raw = resp\n-\n             response.url = self.full_url.decode('utf-8')\n \n             return response\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#a0ae2e6c7b46eaa93fa972623d0fdfc576de242b", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 3 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 3 | Churn Cumulative: 889 | Contributors (this commit): 11 | Commits (past 90d): 8 | Contributors (cumulative): 11 | DMM Complexity: 1.0\n\nDIFF:\n@@ -276,6 +276,9 @@ def get_encoding_from_headers(headers):\n     if 'charset' in params:\n         return params['charset'].strip(\"'\\\"\")\n \n+    if 'text' in content_type:\n+        return 'ISO-8859-1'\n+\n \n def unicode_from_html(content):\n     \"\"\"Attempts to decode an HTML string into unicode.\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#7647e52943ad15da6bc7e52df3dfb744aa949bf8", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 66 | Lines Deleted: 2 | Files Changed: 2 | Hunks: 3 | Methods Changed: 6 | Complexity Δ (Sum/Max): 12/10 | Churn Δ: 68 | Churn Cumulative: 2062 | Contributors (this commit): 23 | Commits (past 90d): 36 | Contributors (cumulative): 25 | DMM Complexity: 0.7551020408163265\n\nDIFF:\n@@ -31,9 +31,14 @@ def dispatch_hook(key, hooks, hook_data):\n     hooks = hooks or dict()\n \n     if key in hooks:\n-        try:\n-            return hooks.get(key).__call__(hook_data) or hook_data\n+        hooks = hooks.get(key)\n \n+        if hasattr(hooks, '__call__'):\n+            hooks = [hooks]\n+\n+        for hook in hooks:\n+            try:\n+                hook_data = hook(hook_data) or hook_data\n             except Exception:\n                 traceback.print_exc()\n \n\n@@ -516,6 +516,65 @@ class RequestsTestSuite(unittest.TestCase):\n \n         self.assertEqual(r2.status_code, 200)\n \n+    def test_single_hook(self):\n+\n+        def add_foo_header(args):\n+            if not args.get('headers'):\n+                args['headers'] = {}\n+\n+            args['headers'].update({\n+                'X-Foo': 'foo'\n+            })\n+\n+            return args\n+\n+        for service in SERVICES:\n+            url = service('headers')\n+\n+            response = requests.get(\n+                url = url,\n+                hooks = {\n+                    'args': add_foo_header\n+                }\n+            )\n+\n+            assert 'foo' in response.content\n+\n+    def test_multiple_hooks(self):\n+\n+        def add_foo_header(args):\n+            if not args.get('headers'):\n+                args['headers'] = {}\n+\n+            args['headers'].update({\n+                'X-Foo': 'foo'\n+            })\n+\n+            return args\n+\n+        def add_bar_header(args):\n+            if not args.get('headers'):\n+                args['headers'] = {}\n+\n+            args['headers'].update({\n+                'X-Bar': 'bar'\n+            })\n+\n+            return args\n+\n+        for service in SERVICES:\n+            url = service('headers')\n+\n+            response = requests.get(\n+                url = url,\n+                hooks = {\n+                    'args': [add_foo_header, add_bar_header]\n+                }\n+            )\n+\n+            assert 'foo' in response.content\n+            assert 'bar' in response.content\n+\n     def test_session_persistent_cookies(self):\n \n         s = requests.session()\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
