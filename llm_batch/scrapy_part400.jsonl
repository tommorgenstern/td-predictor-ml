{"custom_id": "scrapy#87db3f2fd6f9d365208a69a0de31181f1ea70e43", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 29 | Lines Deleted: 10 | Files Changed: 3 | Hunks: 11 | Methods Changed: 8 | Complexity Δ (Sum/Max): 4/4 | Churn Δ: 39 | Churn Cumulative: 3343 | Contributors (this commit): 44 | Commits (past 90d): 9 | Contributors (cumulative): 62 | DMM Complexity: 1.0\n\nDIFF:\n@@ -42,7 +42,7 @@ if TYPE_CHECKING:\n     from collections.abc import Generator, Iterable\n \n     from scrapy.logformatter import LogFormatter\n-    from scrapy.spiderloader import SpiderLoader\n+    from scrapy.spiderloader import SpiderLoaderProtocol\n     from scrapy.statscollectors import StatsCollector\n     from scrapy.utils.request import RequestFingerprinterProtocol\n \n@@ -282,19 +282,21 @@ class CrawlerRunner:\n     )\n \n     @staticmethod\n-    def _get_spider_loader(settings: BaseSettings) -> SpiderLoader:\n+    def _get_spider_loader(settings: BaseSettings) -> SpiderLoaderProtocol:\n         \"\"\"Get SpiderLoader instance from settings\"\"\"\n         cls_path = settings.get(\"SPIDER_LOADER_CLASS\")\n         loader_cls = load_object(cls_path)\n         verifyClass(ISpiderLoader, loader_cls)\n-        return cast(\"SpiderLoader\", loader_cls.from_settings(settings.frozencopy()))\n+        return cast(\n+            \"SpiderLoaderProtocol\", loader_cls.from_settings(settings.frozencopy())\n+        )\n \n     def __init__(self, settings: dict[str, Any] | Settings | None = None):\n         if isinstance(settings, dict) or settings is None:\n             settings = Settings(settings)\n         AddonManager.load_pre_crawler_settings(settings)\n         self.settings: Settings = settings\n-        self.spider_loader: SpiderLoader = self._get_spider_loader(settings)\n+        self.spider_loader: SpiderLoaderProtocol = self._get_spider_loader(settings)\n         self._crawlers: set[Crawler] = set()\n         self._active: set[Deferred[None]] = set()\n         self.bootstrap_failed = False\n\n@@ -3,7 +3,7 @@ from __future__ import annotations\n import traceback\n import warnings\n from collections import defaultdict\n-from typing import TYPE_CHECKING\n+from typing import TYPE_CHECKING, Protocol\n \n from zope.interface import implementer\n \n@@ -21,6 +21,23 @@ if TYPE_CHECKING:\n     from scrapy.settings import BaseSettings\n \n \n+class SpiderLoaderProtocol(Protocol):\n+    @classmethod\n+    def from_settings(cls, settings: BaseSettings) -> Self:\n+        \"\"\"Return an instance of the class for the given settings\"\"\"\n+\n+    def load(self, spider_name: str) -> type[Spider]:\n+        \"\"\"Return the Spider class for the given spider name. If the spider\n+        name is not found, it must raise a KeyError.\"\"\"\n+\n+    def list(self) -> list[str]:\n+        \"\"\"Return a list with the names of all spiders available in the\n+        project\"\"\"\n+\n+    def find_by_request(self, request: Request) -> __builtins__.list[str]:\n+        \"\"\"Return the list of spiders names that can handle the given request\"\"\"\n+\n+\n @implementer(ISpiderLoader)\n class SpiderLoader:\n     \"\"\"\n\n@@ -15,7 +15,7 @@ if TYPE_CHECKING:\n     from twisted.internet.defer import Deferred\n \n     from scrapy import Request\n-    from scrapy.spiderloader import SpiderLoader\n+    from scrapy.spiderloader import SpiderLoaderProtocol\n \n \n logger = logging.getLogger(__name__)\n@@ -64,7 +64,7 @@ def iter_spider_classes(module: ModuleType) -> Iterable[type[Spider]]:\n \n @overload\n def spidercls_for_request(\n-    spider_loader: SpiderLoader,\n+    spider_loader: SpiderLoaderProtocol,\n     request: Request,\n     default_spidercls: type[Spider],\n     log_none: bool = ...,\n@@ -74,7 +74,7 @@ def spidercls_for_request(\n \n @overload\n def spidercls_for_request(\n-    spider_loader: SpiderLoader,\n+    spider_loader: SpiderLoaderProtocol,\n     request: Request,\n     default_spidercls: Literal[None],\n     log_none: bool = ...,\n@@ -84,7 +84,7 @@ def spidercls_for_request(\n \n @overload\n def spidercls_for_request(\n-    spider_loader: SpiderLoader,\n+    spider_loader: SpiderLoaderProtocol,\n     request: Request,\n     *,\n     log_none: bool = ...,\n@@ -93,7 +93,7 @@ def spidercls_for_request(\n \n \n def spidercls_for_request(\n-    spider_loader: SpiderLoader,\n+    spider_loader: SpiderLoaderProtocol,\n     request: Request,\n     default_spidercls: type[Spider] | None = None,\n     log_none: bool = False,\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "scrapy#a5731c1944d8aa7b1921c543b7ad616ad131853e", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 232 | Lines Deleted: 15 | Files Changed: 12 | Hunks: 30 | Methods Changed: 22 | Complexity Δ (Sum/Max): 19/9 | Churn Δ: 247 | Churn Cumulative: 12091 | Contributors (this commit): 73 | Commits (past 90d): 30 | Contributors (cumulative): 174 | DMM Complexity: 1.0\n\nDIFF:\n@@ -34,11 +34,23 @@ _T = TypeVar(\"_T\")\n \n \n def assert_gcs_environ() -> None:\n+    warnings.warn(\n+        \"The assert_gcs_environ() function is deprecated and will be removed in a future version of Scrapy.\"\n+        \" Check GCS_PROJECT_ID directly.\",\n+        category=ScrapyDeprecationWarning,\n+        stacklevel=2,\n+    )\n     if \"GCS_PROJECT_ID\" not in os.environ:\n         raise SkipTest(\"GCS_PROJECT_ID not found\")\n \n \n def skip_if_no_boto() -> None:\n+    warnings.warn(\n+        \"The skip_if_no_boto() function is deprecated and will be removed in a future version of Scrapy.\"\n+        \" Check scrapy.utils.boto.is_botocore_available() directly.\",\n+        category=ScrapyDeprecationWarning,\n+        stacklevel=2,\n+    )\n     if not is_botocore_available():\n         raise SkipTest(\"missing botocore library\")\n \n@@ -48,6 +60,11 @@ def get_gcs_content_and_delete(\n ) -> tuple[bytes, list[dict[str, str]], Any]:\n     from google.cloud import storage\n \n+    warnings.warn(\n+        \"The get_gcs_content_and_delete() function is deprecated and will be removed in a future version of Scrapy.\",\n+        category=ScrapyDeprecationWarning,\n+        stacklevel=2,\n+    )\n     client = storage.Client(project=os.environ.get(\"GCS_PROJECT_ID\"))\n     bucket = client.get_bucket(bucket)\n     blob = bucket.get_blob(path)\n@@ -67,6 +84,11 @@ def get_ftp_content_and_delete(\n ) -> bytes:\n     from ftplib import FTP\n \n+    warnings.warn(\n+        \"The get_ftp_content_and_delete() function is deprecated and will be removed in a future version of Scrapy.\",\n+        category=ScrapyDeprecationWarning,\n+        stacklevel=2,\n+    )\n     ftp = FTP()\n     ftp.connect(host, port)\n     ftp.login(username, password)\n@@ -150,6 +172,12 @@ def mock_google_cloud_storage() -> tuple[Any, Any, Any]:\n     \"\"\"\n     from google.cloud.storage import Blob, Bucket, Client\n \n+    warnings.warn(\n+        \"The mock_google_cloud_storage() function is deprecated and will be removed in a future version of Scrapy.\",\n+        category=ScrapyDeprecationWarning,\n+        stacklevel=2,\n+    )\n+\n     client_mock = mock.create_autospec(Client)\n \n     bucket_mock = mock.create_autospec(Bucket)\n\n@@ -2,18 +2,27 @@ from __future__ import annotations\n \n import os\n import sys\n+import warnings\n from typing import TYPE_CHECKING, cast\n \n from twisted.internet.defer import Deferred\n from twisted.internet.error import ProcessTerminated\n from twisted.internet.protocol import ProcessProtocol\n \n+from scrapy.exceptions import ScrapyDeprecationWarning\n+\n if TYPE_CHECKING:\n     from collections.abc import Iterable\n \n     from twisted.python.failure import Failure\n \n \n+warnings.warn(\n+    \"The scrapy.utils.testproc module is deprecated.\",\n+    ScrapyDeprecationWarning,\n+)\n+\n+\n class ProcessTest:\n     command: str | None = None\n     prefix = [sys.executable, \"-m\", \"scrapy.cmdline\"]\n\n@@ -1,7 +1,15 @@\n+import warnings\n from urllib.parse import urljoin\n \n from twisted.web import resource, server, static, util\n \n+from scrapy.exceptions import ScrapyDeprecationWarning\n+\n+warnings.warn(\n+    \"The scrapy.utils.testsite module is deprecated.\",\n+    ScrapyDeprecationWarning,\n+)\n+\n \n class SiteTest:\n     def setUp(self):\n@@ -48,7 +56,7 @@ def test_site():\n \n \n if __name__ == \"__main__\":\n-    from twisted.internet import reactor\n+    from twisted.internet import reactor  # pylint: disable=ungrouped-imports\n \n     port = reactor.listenTCP(0, test_site(), interface=\"127.0.0.1\")\n     print(f\"http://localhost:{port.getHost().port}/\")\n\n@@ -1,8 +1,8 @@\n from twisted.internet import defer\n from twisted.trial import unittest\n \n-from scrapy.utils.testproc import ProcessTest\n-from scrapy.utils.testsite import SiteTest\n+from tests.utils.testproc import ProcessTest\n+from tests.utils.testsite import SiteTest\n \n \n class FetchTest(ProcessTest, SiteTest, unittest.TestCase):\n\n@@ -7,9 +7,9 @@ from twisted.internet import defer\n from scrapy.commands import parse\n from scrapy.settings import Settings\n from scrapy.utils.python import to_unicode\n-from scrapy.utils.testproc import ProcessTest\n-from scrapy.utils.testsite import SiteTest\n from tests.test_commands import CommandTest\n+from tests.utils.testproc import ProcessTest\n+from tests.utils.testsite import SiteTest\n \n \n def _textmode(bstr):\n\n@@ -7,10 +7,10 @@ from pexpect.popen_spawn import PopenSpawn\n from twisted.internet import defer\n from twisted.trial import unittest\n \n-from scrapy.utils.testproc import ProcessTest\n-from scrapy.utils.testsite import SiteTest\n from tests import NON_EXISTING_RESOLVABLE, tests_datadir\n from tests.mockserver import MockServer\n+from tests.utils.testproc import ProcessTest\n+from tests.utils.testsite import SiteTest\n \n \n class ShellTest(ProcessTest, SiteTest, unittest.TestCase):\n\n@@ -4,7 +4,7 @@ from twisted.internet import defer\n from twisted.trial import unittest\n \n import scrapy\n-from scrapy.utils.testproc import ProcessTest\n+from tests.utils.testproc import ProcessTest\n \n \n class VersionTest(ProcessTest, unittest.TestCase):\n\n@@ -17,7 +17,7 @@ from io import BytesIO\n from logging import getLogger\n from pathlib import Path\n from string import ascii_letters, digits\n-from typing import TYPE_CHECKING\n+from typing import TYPE_CHECKING, Any\n from unittest import mock\n from urllib.parse import quote, urljoin\n from urllib.request import pathname2url\n@@ -48,7 +48,7 @@ from scrapy.extensions.feedexport import (\n )\n from scrapy.settings import Settings\n from scrapy.utils.python import to_unicode\n-from scrapy.utils.test import get_crawler, mock_google_cloud_storage\n+from scrapy.utils.test import get_crawler\n from tests.mockserver import MockFTPServer, MockServer\n from tests.spiders import ItemSpider\n \n@@ -71,6 +71,23 @@ def build_url(path: str | PathLike) -> str:\n     return urljoin(\"file:\", path_str)\n \n \n+def mock_google_cloud_storage() -> tuple[Any, Any, Any]:\n+    \"\"\"Creates autospec mocks for google-cloud-storage Client, Bucket and Blob\n+    classes and set their proper return values.\n+    \"\"\"\n+    from google.cloud.storage import Blob, Bucket, Client\n+\n+    client_mock = mock.create_autospec(Client)\n+\n+    bucket_mock = mock.create_autospec(Bucket)\n+    client_mock.get_bucket.return_value = bucket_mock\n+\n+    blob_mock = mock.create_autospec(Blob)\n+    bucket_mock.blob.return_value = blob_mock\n+\n+    return (client_mock, bucket_mock, blob_mock)\n+\n+\n class FileFeedStorageTest(unittest.TestCase):\n     def test_store_file_uri(self):\n         path = Path(self.mktemp()).resolve()\n\n@@ -6,8 +6,10 @@ import warnings\n from datetime import datetime\n from io import BytesIO\n from pathlib import Path\n+from posixpath import split\n from shutil import rmtree\n from tempfile import mkdtemp\n+from typing import Any\n from unittest import mock\n from urllib.parse import urlparse\n \n@@ -27,16 +29,54 @@ from scrapy.pipelines.files import (\n     S3FilesStore,\n )\n from scrapy.utils.test import (\n-    assert_gcs_environ,\n     get_crawler,\n-    get_ftp_content_and_delete,\n-    get_gcs_content_and_delete,\n )\n from tests.mockserver import MockFTPServer\n \n from .test_pipeline_media import _mocked_download_func\n \n \n+def get_gcs_content_and_delete(\n+    bucket: Any, path: str\n+) -> tuple[bytes, list[dict[str, str]], Any]:\n+    from google.cloud import storage\n+\n+    client = storage.Client(project=os.environ.get(\"GCS_PROJECT_ID\"))\n+    bucket = client.get_bucket(bucket)\n+    blob = bucket.get_blob(path)\n+    content = blob.download_as_string()\n+    acl = list(blob.acl)  # loads acl before it will be deleted\n+    bucket.delete_blob(path)\n+    return content, acl, blob\n+\n+\n+def get_ftp_content_and_delete(\n+    path: str,\n+    host: str,\n+    port: int,\n+    username: str,\n+    password: str,\n+    use_active_mode: bool = False,\n+) -> bytes:\n+    from ftplib import FTP\n+\n+    ftp = FTP()\n+    ftp.connect(host, port)\n+    ftp.login(username, password)\n+    if use_active_mode:\n+        ftp.set_pasv(False)\n+    ftp_data: list[bytes] = []\n+\n+    def buffer_data(data: bytes) -> None:\n+        ftp_data.append(data)\n+\n+    ftp.retrbinary(f\"RETR {path}\", buffer_data)\n+    dirname, filename = split(path)\n+    ftp.cwd(dirname)\n+    ftp.delete(filename)\n+    return b\"\".join(ftp_data)\n+\n+\n class FilesPipelineTestCase(unittest.TestCase):\n     def setUp(self):\n         self.tempdir = mkdtemp()\n@@ -597,10 +637,12 @@ class TestS3FilesStore(unittest.TestCase):\n             stub.assert_no_pending_responses()\n \n \n+@pytest.mark.skipif(\n+    \"GCS_PROJECT_ID\" not in os.environ, reason=\"GCS_PROJECT_ID not found\"\n+)\n class TestGCSFilesStore(unittest.TestCase):\n     @defer.inlineCallbacks\n     def test_persist(self):\n-        assert_gcs_environ()\n         uri = os.environ.get(\"GCS_TEST_FILE_URI\")\n         if not uri:\n             raise unittest.SkipTest(\"No GCS URI available for testing\")\n@@ -629,7 +671,6 @@ class TestGCSFilesStore(unittest.TestCase):\n         \"\"\"Test to make sure that paths used to store files is the same as the one used to get\n         already uploaded files.\n         \"\"\"\n-        assert_gcs_environ()\n         try:\n             import google.cloud.storage  # noqa: F401\n         except ModuleNotFoundError:\n\n\n@@ -0,0 +1,67 @@\n+from __future__ import annotations\n+\n+import os\n+import sys\n+from typing import TYPE_CHECKING, cast\n+\n+from twisted.internet.defer import Deferred\n+from twisted.internet.error import ProcessTerminated\n+from twisted.internet.protocol import ProcessProtocol\n+\n+if TYPE_CHECKING:\n+    from collections.abc import Iterable\n+\n+    from twisted.python.failure import Failure\n+\n+\n+class ProcessTest:\n+    command: str | None = None\n+    prefix = [sys.executable, \"-m\", \"scrapy.cmdline\"]\n+    cwd = os.getcwd()  # trial chdirs to temp dir  # noqa: PTH109\n+\n+    def execute(\n+        self,\n+        args: Iterable[str],\n+        check_code: bool = True,\n+        settings: str | None = None,\n+    ) -> Deferred[TestProcessProtocol]:\n+        from twisted.internet import reactor\n+\n+        env = os.environ.copy()\n+        if settings is not None:\n+            env[\"SCRAPY_SETTINGS_MODULE\"] = settings\n+        assert self.command\n+        cmd = [*self.prefix, self.command, *args]\n+        pp = TestProcessProtocol()\n+        pp.deferred.addCallback(self._process_finished, cmd, check_code)\n+        reactor.spawnProcess(pp, cmd[0], cmd, env=env, path=self.cwd)\n+        return pp.deferred\n+\n+    def _process_finished(\n+        self, pp: TestProcessProtocol, cmd: list[str], check_code: bool\n+    ) -> tuple[int, bytes, bytes]:\n+        if pp.exitcode and check_code:\n+            msg = f\"process {cmd} exit with code {pp.exitcode}\"\n+            msg += f\"\\n>>> stdout <<<\\n{pp.out.decode()}\"\n+            msg += \"\\n\"\n+            msg += f\"\\n>>> stderr <<<\\n{pp.err.decode()}\"\n+            raise RuntimeError(msg)\n+        return cast(int, pp.exitcode), pp.out, pp.err\n+\n+\n+class TestProcessProtocol(ProcessProtocol):\n+    def __init__(self) -> None:\n+        self.deferred: Deferred[TestProcessProtocol] = Deferred()\n+        self.out: bytes = b\"\"\n+        self.err: bytes = b\"\"\n+        self.exitcode: int | None = None\n+\n+    def outReceived(self, data: bytes) -> None:\n+        self.out += data\n+\n+    def errReceived(self, data: bytes) -> None:\n+        self.err += data\n+\n+    def processEnded(self, status: Failure) -> None:\n+        self.exitcode = cast(ProcessTerminated, status.value).exitCode\n+        self.deferred.callback(self)\n\n@@ -0,0 +1,47 @@\n+from urllib.parse import urljoin\n+\n+from twisted.web import resource, server, static, util\n+\n+\n+class SiteTest:\n+    def setUp(self):\n+        from twisted.internet import reactor\n+\n+        super().setUp()\n+        self.site = reactor.listenTCP(0, test_site(), interface=\"127.0.0.1\")\n+        self.baseurl = f\"http://localhost:{self.site.getHost().port}/\"\n+\n+    def tearDown(self):\n+        super().tearDown()\n+        self.site.stopListening()\n+\n+    def url(self, path: str) -> str:\n+        return urljoin(self.baseurl, path)\n+\n+\n+class NoMetaRefreshRedirect(util.Redirect):\n+    def render(self, request: server.Request) -> bytes:\n+        content = util.Redirect.render(self, request)\n+        return content.replace(\n+            b'http-equiv=\"refresh\"', b'http-no-equiv=\"do-not-refresh-me\"'\n+        )\n+\n+\n+def test_site():\n+    r = resource.Resource()\n+    r.putChild(b\"text\", static.Data(b\"Works\", \"text/plain\"))\n+    r.putChild(\n+        b\"html\",\n+        static.Data(\n+            b\"<body><p class='one'>Works</p><p class='two'>World</p></body>\",\n+            \"text/html\",\n+        ),\n+    )\n+    r.putChild(\n+        b\"enc-gb18030\",\n+        static.Data(b\"<p>gb18030 encoding</p>\", \"text/html; charset=gb18030\"),\n+    )\n+    r.putChild(b\"redirect\", util.Redirect(b\"/redirected\"))\n+    r.putChild(b\"redirect-no-meta-refresh\", NoMetaRefreshRedirect(b\"/redirected\"))\n+    r.putChild(b\"redirected\", static.Data(b\"Redirected here\", \"text/plain\"))\n+    return server.Site(r)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "scrapy#93c076047bf5e3169feb2c29aca24e71bab0f8f0", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 1 | Churn Cumulative: 333 | Contributors (this commit): 19 | Commits (past 90d): 3 | Contributors (cumulative): 19 | DMM Complexity: None\n\nDIFF:\n@@ -13,6 +13,7 @@ def _py_files(folder):\n \n collect_ignore = [\n     # not a test, but looks like a test\n+    \"scrapy/utils/testproc.py\",\n     \"scrapy/utils/testsite.py\",\n     \"tests/ftpserver.py\",\n     \"tests/mockserver.py\",\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "scrapy#d161d1d47d445272cba35ed81eec068ed4be8b1a", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 710 | Lines Deleted: 897 | Files Changed: 26 | Hunks: 449 | Methods Changed: 241 | Complexity Δ (Sum/Max): -1/0 | Churn Δ: 1607 | Churn Cumulative: 12566 | Contributors (this commit): 66 | Commits (past 90d): 74 | Contributors (cumulative): 262 | DMM Complexity: 0.0\n\nDIFF:\n@@ -4,15 +4,15 @@ from scrapy.utils.asyncgen import as_async_generator, collect_asyncgen\n from scrapy.utils.defer import deferred_f_from_coro_f\n \n \n-class AsyncgenUtilsTest(unittest.TestCase):\n+class TestAsyncgenUtils(unittest.TestCase):\n     @deferred_f_from_coro_f\n     async def test_as_async_generator(self):\n         ag = as_async_generator(range(42))\n         results = [i async for i in ag]\n-        self.assertEqual(results, list(range(42)))\n+        assert results == list(range(42))\n \n     @deferred_f_from_coro_f\n     async def test_collect_asyncgen(self):\n         ag = as_async_generator(range(42))\n         results = await collect_asyncgen(ag)\n-        self.assertEqual(results, list(range(42)))\n+        assert results == list(range(42))\n\n@@ -2,7 +2,6 @@ import asyncio\n import warnings\n \n import pytest\n-from twisted.trial.unittest import TestCase\n \n from scrapy.utils.defer import deferred_f_from_coro_f\n from scrapy.utils.reactor import (\n@@ -13,19 +12,17 @@ from scrapy.utils.reactor import (\n \n \n @pytest.mark.usefixtures(\"reactor_pytest\")\n-class AsyncioTest(TestCase):\n+class TestAsyncio:\n     def test_is_asyncio_reactor_installed(self):\n         # the result should depend only on the pytest --reactor argument\n-        self.assertEqual(\n-            is_asyncio_reactor_installed(), self.reactor_pytest == \"asyncio\"\n-        )\n+        assert is_asyncio_reactor_installed() == (self.reactor_pytest == \"asyncio\")\n \n     def test_install_asyncio_reactor(self):\n         from twisted.internet import reactor as original_reactor\n \n         with warnings.catch_warnings(record=True) as w:\n             install_reactor(\"twisted.internet.asyncioreactor.AsyncioSelectorReactor\")\n-            self.assertEqual(len(w), 0)\n+            assert len(w) == 0\n         from twisted.internet import reactor  # pylint: disable=reimported\n \n         assert original_reactor == reactor\n\n@@ -1,5 +1,3 @@\n-import unittest\n-\n import pytest\n \n from scrapy.exceptions import UsageError\n@@ -12,26 +10,24 @@ from scrapy.utils.conf import (\n )\n \n \n-class BuildComponentListTest(unittest.TestCase):\n+class TestBuildComponentList:\n     def test_build_dict(self):\n         d = {\"one\": 1, \"two\": None, \"three\": 8, \"four\": 4}\n-        self.assertEqual(\n-            build_component_list(d, convert=lambda x: x), [\"one\", \"four\", \"three\"]\n-        )\n+        assert build_component_list(d, convert=lambda x: x) == [\"one\", \"four\", \"three\"]\n \n     def test_duplicate_components_in_basesettings(self):\n         # Higher priority takes precedence\n         duplicate_bs = BaseSettings({\"one\": 1, \"two\": 2}, priority=0)\n         duplicate_bs.set(\"ONE\", 4, priority=10)\n-        self.assertEqual(\n-            build_component_list(duplicate_bs, convert=lambda x: x.lower()),\n-            [\"two\", \"one\"],\n-        )\n+        assert build_component_list(duplicate_bs, convert=lambda x: x.lower()) == [\n+            \"two\",\n+            \"one\",\n+        ]\n         duplicate_bs.set(\"one\", duplicate_bs[\"one\"], priority=20)\n-        self.assertEqual(\n-            build_component_list(duplicate_bs, convert=lambda x: x.lower()),\n-            [\"one\", \"two\"],\n-        )\n+        assert build_component_list(duplicate_bs, convert=lambda x: x.lower()) == [\n+            \"one\",\n+            \"two\",\n+        ]\n         # Same priority raises ValueError\n         duplicate_bs.set(\"ONE\", duplicate_bs[\"ONE\"], priority=20)\n         with pytest.raises(\n@@ -42,24 +38,24 @@ class BuildComponentListTest(unittest.TestCase):\n     def test_valid_numbers(self):\n         # work well with None and numeric values\n         d = {\"a\": 10, \"b\": None, \"c\": 15, \"d\": 5.0}\n-        self.assertEqual(build_component_list(d, convert=lambda x: x), [\"d\", \"a\", \"c\"])\n+        assert build_component_list(d, convert=lambda x: x) == [\"d\", \"a\", \"c\"]\n         d = {\n             \"a\": 33333333333333333333,\n             \"b\": 11111111111111111111,\n             \"c\": 22222222222222222222,\n         }\n-        self.assertEqual(build_component_list(d, convert=lambda x: x), [\"b\", \"c\", \"a\"])\n+        assert build_component_list(d, convert=lambda x: x) == [\"b\", \"c\", \"a\"]\n \n \n-class UtilsConfTestCase(unittest.TestCase):\n+class TestUtilsConf:\n     def test_arglist_to_dict(self):\n-        self.assertEqual(\n-            arglist_to_dict([\"arg1=val1\", \"arg2=val2\"]),\n-            {\"arg1\": \"val1\", \"arg2\": \"val2\"},\n-        )\n+        assert arglist_to_dict([\"arg1=val1\", \"arg2=val2\"]) == {\n+            \"arg1\": \"val1\",\n+            \"arg2\": \"val2\",\n+        }\n \n \n-class FeedExportConfigTestCase(unittest.TestCase):\n+class TestFeedExportConfig:\n     def test_feed_export_config_invalid_format(self):\n         settings = Settings()\n         with pytest.raises(UsageError):\n@@ -72,44 +68,36 @@ class FeedExportConfigTestCase(unittest.TestCase):\n \n     def test_feed_export_config_explicit_formats(self):\n         settings = Settings()\n-        self.assertEqual(\n-            {\n+        assert {\n             \"items_1.dat\": {\"format\": \"json\"},\n             \"items_2.dat\": {\"format\": \"xml\"},\n             \"items_3.dat\": {\"format\": \"csv\"},\n-            },\n-            feed_process_params_from_cli(\n+        } == feed_process_params_from_cli(\n             settings, [\"items_1.dat:json\", \"items_2.dat:xml\", \"items_3.dat:csv\"]\n-            ),\n         )\n \n     def test_feed_export_config_implicit_formats(self):\n         settings = Settings()\n-        self.assertEqual(\n-            {\n+        assert {\n             \"items_1.json\": {\"format\": \"json\"},\n             \"items_2.xml\": {\"format\": \"xml\"},\n             \"items_3.csv\": {\"format\": \"csv\"},\n-            },\n-            feed_process_params_from_cli(\n+        } == feed_process_params_from_cli(\n             settings, [\"items_1.json\", \"items_2.xml\", \"items_3.csv\"]\n-            ),\n         )\n \n     def test_feed_export_config_stdout(self):\n         settings = Settings()\n-        self.assertEqual(\n-            {\"stdout:\": {\"format\": \"pickle\"}},\n-            feed_process_params_from_cli(settings, [\"-:pickle\"]),\n+        assert {\"stdout:\": {\"format\": \"pickle\"}} == feed_process_params_from_cli(\n+            settings, [\"-:pickle\"]\n         )\n \n     def test_feed_export_config_overwrite(self):\n         settings = Settings()\n-        self.assertEqual(\n-            {\"output.json\": {\"format\": \"json\", \"overwrite\": True}},\n-            feed_process_params_from_cli(\n+        assert {\n+            \"output.json\": {\"format\": \"json\", \"overwrite\": True}\n+        } == feed_process_params_from_cli(\n             settings, [], overwrite_output=[\"output.json\"]\n-            ),\n         )\n \n     def test_output_and_overwrite_output(self):\n@@ -131,9 +119,7 @@ class FeedExportConfigTestCase(unittest.TestCase):\n             }\n         )\n         new_feed = feed_complete_default_values_from_settings(feed, settings)\n-        self.assertEqual(\n-            new_feed,\n-            {\n+        assert new_feed == {\n             \"encoding\": \"custom encoding\",\n             \"fields\": [\"f1\", \"f2\", \"f3\"],\n             \"indent\": 42,\n@@ -141,8 +127,7 @@ class FeedExportConfigTestCase(unittest.TestCase):\n             \"uri_params\": (1, 2, 3, 4),\n             \"batch_item_count\": 2,\n             \"item_export_kwargs\": {},\n-            },\n-        )\n+        }\n \n     def test_feed_complete_default_values_from_settings_non_empty(self):\n         feed = {\n@@ -159,9 +144,7 @@ class FeedExportConfigTestCase(unittest.TestCase):\n             }\n         )\n         new_feed = feed_complete_default_values_from_settings(feed, settings)\n-        self.assertEqual(\n-            new_feed,\n-            {\n+        assert new_feed == {\n             \"encoding\": \"other encoding\",\n             \"fields\": None,\n             \"indent\": 42,\n@@ -169,5 +152,4 @@ class FeedExportConfigTestCase(unittest.TestCase):\n             \"uri_params\": None,\n             \"batch_item_count\": 2,\n             \"item_export_kwargs\": {},\n-            },\n-        )\n+        }\n\n@@ -1,4 +1,4 @@\n-import unittest\n+import pytest\n \n from scrapy.utils.console import get_shell_embed_func\n \n@@ -18,23 +18,23 @@ except ImportError:\n     ipy = False\n \n \n-class UtilsConsoleTestCase(unittest.TestCase):\n+class TestUtilsConsole:\n     def test_get_shell_embed_func(self):\n         shell = get_shell_embed_func([\"invalid\"])\n-        self.assertEqual(shell, None)\n+        assert shell is None\n \n         shell = get_shell_embed_func([\"invalid\", \"python\"])\n-        self.assertTrue(callable(shell))\n-        self.assertEqual(shell.__name__, \"_embed_standard_shell\")\n+        assert callable(shell)\n+        assert shell.__name__ == \"_embed_standard_shell\"\n \n-    @unittest.skipIf(not bpy, \"bpython not available in testenv\")\n+    @pytest.mark.skipif(not bpy, reason=\"bpython not available in testenv\")\n     def test_get_shell_embed_func2(self):\n         shell = get_shell_embed_func([\"bpython\"])\n-        self.assertTrue(callable(shell))\n-        self.assertEqual(shell.__name__, \"_embed_bpython_shell\")\n+        assert callable(shell)\n+        assert shell.__name__ == \"_embed_bpython_shell\"\n \n-    @unittest.skipIf(not ipy, \"IPython not available in testenv\")\n+    @pytest.mark.skipif(not ipy, reason=\"IPython not available in testenv\")\n     def test_get_shell_embed_func3(self):\n         # default shell should be 'ipython'\n         shell = get_shell_embed_func()\n-        self.assertEqual(shell.__name__, \"_embed_ipython_shell\")\n+        assert shell.__name__ == \"_embed_ipython_shell\"\n\n@@ -1,4 +1,3 @@\n-import unittest\n import warnings\n \n import pytest\n@@ -8,16 +7,16 @@ from scrapy import Request\n from scrapy.utils.curl import curl_to_request_kwargs\n \n \n-class CurlToRequestKwargsTest(unittest.TestCase):\n+class TestCurlToRequestKwargs:\n     maxDiff = 5000\n \n     def _test_command(self, curl_command, expected_result):\n         result = curl_to_request_kwargs(curl_command)\n-        self.assertEqual(result, expected_result)\n+        assert result == expected_result\n         try:\n             Request(**result)\n         except TypeError as e:\n-            self.fail(f\"Request kwargs are not correct {e}\")\n+            pytest.fail(f\"Request kwargs are not correct {e}\")\n \n     def test_get(self):\n         curl_command = \"curl http://example.org/\"\n@@ -203,7 +202,7 @@ class CurlToRequestKwargsTest(unittest.TestCase):\n     def test_get_silent(self):\n         curl_command = 'curl --silent \"www.example.com\"'\n         expected_result = {\"method\": \"GET\", \"url\": \"http://www.example.com\"}\n-        self.assertEqual(curl_to_request_kwargs(curl_command), expected_result)\n+        assert curl_to_request_kwargs(curl_command) == expected_result\n \n     def test_too_few_arguments_error(self):\n         with pytest.raises(\n@@ -218,7 +217,7 @@ class CurlToRequestKwargsTest(unittest.TestCase):\n             warnings.simplefilter(\"ignore\")\n             curl_command = \"curl --bar --baz http://www.example.com\"\n             expected_result = {\"method\": \"GET\", \"url\": \"http://www.example.com\"}\n-            self.assertEqual(curl_to_request_kwargs(curl_command), expected_result)\n+            assert curl_to_request_kwargs(curl_command) == expected_result\n \n         # case 2: ignore_unknown_options=False (raise exception):\n         with pytest.raises(ValueError, match=\"Unrecognized options:.*--bar.*--baz\"):\n\n@@ -1,5 +1,4 @@\n import copy\n-import unittest\n import warnings\n from collections.abc import Iterator, Mapping, MutableMapping\n \n@@ -17,18 +16,18 @@ from scrapy.utils.datatypes import (\n from scrapy.utils.python import garbage_collect\n \n \n-class CaseInsensitiveDictMixin:\n+class CaseInsensitiveDictBase:\n     def test_init_dict(self):\n         seq = {\"red\": 1, \"black\": 3}\n         d = self.dict_class(seq)\n-        self.assertEqual(d[\"red\"], 1)\n-        self.assertEqual(d[\"black\"], 3)\n+        assert d[\"red\"] == 1\n+        assert d[\"black\"] == 3\n \n     def test_init_pair_sequence(self):\n         seq = ((\"red\", 1), (\"black\", 3))\n         d = self.dict_class(seq)\n-        self.assertEqual(d[\"red\"], 1)\n-        self.assertEqual(d[\"black\"], 3)\n+        assert d[\"red\"] == 1\n+        assert d[\"black\"] == 3\n \n     def test_init_mapping(self):\n         class MyMapping(Mapping):\n@@ -46,8 +45,8 @@ class CaseInsensitiveDictMixin:\n \n         seq = MyMapping(red=1, black=3)\n         d = self.dict_class(seq)\n-        self.assertEqual(d[\"red\"], 1)\n-        self.assertEqual(d[\"black\"], 3)\n+        assert d[\"red\"] == 1\n+        assert d[\"black\"] == 3\n \n     def test_init_mutable_mapping(self):\n         class MyMutableMapping(MutableMapping):\n@@ -71,18 +70,18 @@ class CaseInsensitiveDictMixin:\n \n         seq = MyMutableMapping(red=1, black=3)\n         d = self.dict_class(seq)\n-        self.assertEqual(d[\"red\"], 1)\n-        self.assertEqual(d[\"black\"], 3)\n+        assert d[\"red\"] == 1\n+        assert d[\"black\"] == 3\n \n     def test_caseless(self):\n         d = self.dict_class()\n         d[\"key_Lower\"] = 1\n-        self.assertEqual(d[\"KEy_loWer\"], 1)\n-        self.assertEqual(d.get(\"KEy_loWer\"), 1)\n+        assert d[\"KEy_loWer\"] == 1\n+        assert d.get(\"KEy_loWer\") == 1\n \n         d[\"KEY_LOWER\"] = 3\n-        self.assertEqual(d[\"key_Lower\"], 3)\n-        self.assertEqual(d.get(\"key_Lower\"), 3)\n+        assert d[\"key_Lower\"] == 3\n+        assert d.get(\"key_Lower\") == 3\n \n     def test_delete(self):\n         d = self.dict_class({\"key_lower\": 1})\n@@ -95,41 +94,41 @@ class CaseInsensitiveDictMixin:\n     @pytest.mark.filterwarnings(\"ignore::scrapy.exceptions.ScrapyDeprecationWarning\")\n     def test_getdefault(self):\n         d = CaselessDict()\n-        self.assertEqual(d.get(\"c\", 5), 5)\n+        assert d.get(\"c\", 5) == 5\n         d[\"c\"] = 10\n-        self.assertEqual(d.get(\"c\", 5), 10)\n+        assert d.get(\"c\", 5) == 10\n \n     @pytest.mark.filterwarnings(\"ignore::scrapy.exceptions.ScrapyDeprecationWarning\")\n     def test_setdefault(self):\n         d = CaselessDict({\"a\": 1, \"b\": 2})\n \n         r = d.setdefault(\"A\", 5)\n-        self.assertEqual(r, 1)\n-        self.assertEqual(d[\"A\"], 1)\n+        assert r == 1\n+        assert d[\"A\"] == 1\n \n         r = d.setdefault(\"c\", 5)\n-        self.assertEqual(r, 5)\n-        self.assertEqual(d[\"C\"], 5)\n+        assert r == 5\n+        assert d[\"C\"] == 5\n \n     def test_fromkeys(self):\n         keys = (\"a\", \"b\")\n \n         d = self.dict_class.fromkeys(keys)\n-        self.assertEqual(d[\"A\"], None)\n-        self.assertEqual(d[\"B\"], None)\n+        assert d[\"A\"] is None\n+        assert d[\"B\"] is None\n \n         d = self.dict_class.fromkeys(keys, 1)\n-        self.assertEqual(d[\"A\"], 1)\n-        self.assertEqual(d[\"B\"], 1)\n+        assert d[\"A\"] == 1\n+        assert d[\"B\"] == 1\n \n         instance = self.dict_class()\n         d = instance.fromkeys(keys)\n-        self.assertEqual(d[\"A\"], None)\n-        self.assertEqual(d[\"B\"], None)\n+        assert d[\"A\"] is None\n+        assert d[\"B\"] is None\n \n         d = instance.fromkeys(keys, 1)\n-        self.assertEqual(d[\"A\"], 1)\n-        self.assertEqual(d[\"B\"], 1)\n+        assert d[\"A\"] == 1\n+        assert d[\"B\"] == 1\n \n     def test_contains(self):\n         d = self.dict_class()\n@@ -139,7 +138,7 @@ class CaseInsensitiveDictMixin:\n     def test_pop(self):\n         d = self.dict_class()\n         d[\"a\"] = 1\n-        self.assertEqual(d.pop(\"A\"), 1)\n+        assert d.pop(\"A\") == 1\n         with pytest.raises(KeyError):\n             d.pop(\"A\")\n \n@@ -152,7 +151,7 @@ class CaseInsensitiveDictMixin:\n \n         d = MyDict()\n         d[\"key-one\"] = 2\n-        self.assertEqual(list(d.keys()), [\"Key-One\"])\n+        assert list(d.keys()) == [\"Key-One\"]\n \n     def test_normvalue(self):\n         class MyDict(self.dict_class):\n@@ -164,62 +163,60 @@ class CaseInsensitiveDictMixin:\n             normvalue = _normvalue  # deprecated CaselessDict class\n \n         d = MyDict({\"key\": 1})\n-        self.assertEqual(d[\"key\"], 2)\n-        self.assertEqual(d.get(\"key\"), 2)\n+        assert d[\"key\"] == 2\n+        assert d.get(\"key\") == 2\n \n         d = MyDict()\n         d[\"key\"] = 1\n-        self.assertEqual(d[\"key\"], 2)\n-        self.assertEqual(d.get(\"key\"), 2)\n+        assert d[\"key\"] == 2\n+        assert d.get(\"key\") == 2\n \n         d = MyDict()\n         d.setdefault(\"key\", 1)\n-        self.assertEqual(d[\"key\"], 2)\n-        self.assertEqual(d.get(\"key\"), 2)\n+        assert d[\"key\"] == 2\n+        assert d.get(\"key\") == 2\n \n         d = MyDict()\n         d.update({\"key\": 1})\n-        self.assertEqual(d[\"key\"], 2)\n-        self.assertEqual(d.get(\"key\"), 2)\n+        assert d[\"key\"] == 2\n+        assert d.get(\"key\") == 2\n \n         d = MyDict.fromkeys((\"key\",), 1)\n-        self.assertEqual(d[\"key\"], 2)\n-        self.assertEqual(d.get(\"key\"), 2)\n+        assert d[\"key\"] == 2\n+        assert d.get(\"key\") == 2\n \n     def test_copy(self):\n         h1 = self.dict_class({\"header1\": \"value\"})\n         h2 = copy.copy(h1)\n         assert isinstance(h2, self.dict_class)\n-        self.assertEqual(h1, h2)\n-        self.assertEqual(h1.get(\"header1\"), h2.get(\"header1\"))\n-        self.assertEqual(h1.get(\"header1\"), h2.get(\"HEADER1\"))\n+        assert h1 == h2\n+        assert h1.get(\"header1\") == h2.get(\"header1\")\n+        assert h1.get(\"header1\") == h2.get(\"HEADER1\")\n         h3 = h1.copy()\n         assert isinstance(h3, self.dict_class)\n-        self.assertEqual(h1, h3)\n-        self.assertEqual(h1.get(\"header1\"), h3.get(\"header1\"))\n-        self.assertEqual(h1.get(\"header1\"), h3.get(\"HEADER1\"))\n+        assert h1 == h3\n+        assert h1.get(\"header1\") == h3.get(\"header1\")\n+        assert h1.get(\"header1\") == h3.get(\"HEADER1\")\n \n \n-class CaseInsensitiveDictTest(CaseInsensitiveDictMixin, unittest.TestCase):\n+class TestCaseInsensitiveDict(CaseInsensitiveDictBase):\n     dict_class = CaseInsensitiveDict\n \n     def test_repr(self):\n         d1 = self.dict_class({\"foo\": \"bar\"})\n-        self.assertEqual(repr(d1), \"<CaseInsensitiveDict: {'foo': 'bar'}>\")\n+        assert repr(d1) == \"<CaseInsensitiveDict: {'foo': 'bar'}>\"\n         d2 = self.dict_class({\"AsDf\": \"QwErTy\", \"FoO\": \"bAr\"})\n-        self.assertEqual(\n-            repr(d2), \"<CaseInsensitiveDict: {'AsDf': 'QwErTy', 'FoO': 'bAr'}>\"\n-        )\n+        assert repr(d2) == \"<CaseInsensitiveDict: {'AsDf': 'QwErTy', 'FoO': 'bAr'}>\"\n \n     def test_iter(self):\n         d = self.dict_class({\"AsDf\": \"QwErTy\", \"FoO\": \"bAr\"})\n         iterkeys = iter(d)\n-        self.assertIsInstance(iterkeys, Iterator)\n-        self.assertEqual(list(iterkeys), [\"AsDf\", \"FoO\"])\n+        assert isinstance(iterkeys, Iterator)\n+        assert list(iterkeys) == [\"AsDf\", \"FoO\"]\n \n \n @pytest.mark.filterwarnings(\"ignore::scrapy.exceptions.ScrapyDeprecationWarning\")\n-class CaselessDictTest(CaseInsensitiveDictMixin, unittest.TestCase):\n+class TestCaselessDict(CaseInsensitiveDictBase):\n     dict_class = CaselessDict\n \n     def test_deprecation_message(self):\n@@ -227,93 +224,93 @@ class CaselessDictTest(CaseInsensitiveDictMixin, unittest.TestCase):\n             warnings.filterwarnings(\"always\", category=ScrapyDeprecationWarning)\n             self.dict_class({\"foo\": \"bar\"})\n \n-            self.assertEqual(len(caught), 1)\n-            self.assertTrue(issubclass(caught[0].category, ScrapyDeprecationWarning))\n-            self.assertEqual(\n-                \"scrapy.utils.datatypes.CaselessDict is deprecated,\"\n-                \" please use scrapy.utils.datatypes.CaseInsensitiveDict instead\",\n-                str(caught[0].message),\n+            assert len(caught) == 1\n+            assert issubclass(caught[0].category, ScrapyDeprecationWarning)\n+            assert (\n+                str(caught[0].message)\n+                == \"scrapy.utils.datatypes.CaselessDict is deprecated,\"\n+                \" please use scrapy.utils.datatypes.CaseInsensitiveDict instead\"\n             )\n \n \n-class SequenceExcludeTest(unittest.TestCase):\n+class TestSequenceExclude:\n     def test_list(self):\n         seq = [1, 2, 3]\n         d = SequenceExclude(seq)\n-        self.assertIn(0, d)\n-        self.assertIn(4, d)\n-        self.assertNotIn(2, d)\n+        assert 0 in d\n+        assert 4 in d\n+        assert 2 not in d\n \n     def test_range(self):\n         seq = range(10, 20)\n         d = SequenceExclude(seq)\n-        self.assertIn(5, d)\n-        self.assertIn(20, d)\n-        self.assertNotIn(15, d)\n+        assert 5 in d\n+        assert 20 in d\n+        assert 15 not in d\n \n     def test_range_step(self):\n         seq = range(10, 20, 3)\n         d = SequenceExclude(seq)\n         are_not_in = [v for v in range(10, 20, 3) if v in d]\n-        self.assertEqual([], are_not_in)\n+        assert are_not_in == []\n \n         are_not_in = [v for v in range(10, 20) if v in d]\n-        self.assertEqual([11, 12, 14, 15, 17, 18], are_not_in)\n+        assert are_not_in == [11, 12, 14, 15, 17, 18]\n \n     def test_string_seq(self):\n         seq = \"cde\"\n         d = SequenceExclude(seq)\n         chars = \"\".join(v for v in \"abcdefg\" if v in d)\n-        self.assertEqual(\"abfg\", chars)\n+        assert chars == \"abfg\"\n \n     def test_stringset_seq(self):\n         seq = set(\"cde\")\n         d = SequenceExclude(seq)\n         chars = \"\".join(v for v in \"abcdefg\" if v in d)\n-        self.assertEqual(\"abfg\", chars)\n+        assert chars == \"abfg\"\n \n     def test_set(self):\n         \"\"\"Anything that is not in the supplied sequence will evaluate as 'in' the container.\"\"\"\n         seq = {-3, \"test\", 1.1}\n         d = SequenceExclude(seq)\n-        self.assertIn(0, d)\n-        self.assertIn(\"foo\", d)\n-        self.assertIn(3.14, d)\n-        self.assertIn(set(\"bar\"), d)\n+        assert 0 in d\n+        assert \"foo\" in d\n+        assert 3.14 in d\n+        assert set(\"bar\") in d\n \n         # supplied sequence is a set, so checking for list (non)inclusion fails\n         with pytest.raises(TypeError):\n             [\"a\", \"b\", \"c\"] in d  # noqa: B015\n \n         for v in [-3, \"test\", 1.1]:\n-            self.assertNotIn(v, d)\n+            assert v not in d\n \n \n-class LocalCacheTest(unittest.TestCase):\n+class TestLocalCache:\n     def test_cache_with_limit(self):\n         cache = LocalCache(limit=2)\n         cache[\"a\"] = 1\n         cache[\"b\"] = 2\n         cache[\"c\"] = 3\n-        self.assertEqual(len(cache), 2)\n-        self.assertNotIn(\"a\", cache)\n-        self.assertIn(\"b\", cache)\n-        self.assertIn(\"c\", cache)\n-        self.assertEqual(cache[\"b\"], 2)\n-        self.assertEqual(cache[\"c\"], 3)\n+        assert len(cache) == 2\n+        assert \"a\" not in cache\n+        assert \"b\" in cache\n+        assert \"c\" in cache\n+        assert cache[\"b\"] == 2\n+        assert cache[\"c\"] == 3\n \n     def test_cache_without_limit(self):\n         maximum = 10**4\n         cache = LocalCache()\n         for x in range(maximum):\n             cache[str(x)] = x\n-        self.assertEqual(len(cache), maximum)\n+        assert len(cache) == maximum\n         for x in range(maximum):\n-            self.assertIn(str(x), cache)\n-            self.assertEqual(cache[str(x)], x)\n+            assert str(x) in cache\n+            assert cache[str(x)] == x\n \n \n-class LocalWeakReferencedCacheTest(unittest.TestCase):\n+class TestLocalWeakReferencedCache:\n     def test_cache_with_limit(self):\n         cache = LocalWeakReferencedCache(limit=2)\n         r1 = Request(\"https://example.org\")\n@@ -322,19 +319,19 @@ class LocalWeakReferencedCacheTest(unittest.TestCase):\n         cache[r1] = 1\n         cache[r2] = 2\n         cache[r3] = 3\n-        self.assertEqual(len(cache), 2)\n-        self.assertNotIn(r1, cache)\n-        self.assertIn(r2, cache)\n-        self.assertIn(r3, cache)\n-        self.assertEqual(cache[r1], None)\n-        self.assertEqual(cache[r2], 2)\n-        self.assertEqual(cache[r3], 3)\n+        assert len(cache) == 2\n+        assert r1 not in cache\n+        assert r2 in cache\n+        assert r3 in cache\n+        assert cache[r1] is None\n+        assert cache[r2] == 2\n+        assert cache[r3] == 3\n         del r2\n \n         # PyPy takes longer to collect dead references\n         garbage_collect()\n \n-        self.assertEqual(len(cache), 1)\n+        assert len(cache) == 1\n \n     def test_cache_non_weak_referenceable_objects(self):\n         cache = LocalWeakReferencedCache()\n@@ -344,10 +341,10 @@ class LocalWeakReferencedCacheTest(unittest.TestCase):\n         cache[k1] = 1\n         cache[k2] = 2\n         cache[k3] = 3\n-        self.assertNotIn(k1, cache)\n-        self.assertNotIn(k2, cache)\n-        self.assertNotIn(k3, cache)\n-        self.assertEqual(len(cache), 0)\n+        assert k1 not in cache\n+        assert k2 not in cache\n+        assert k3 not in cache\n+        assert len(cache) == 0\n \n     def test_cache_without_limit(self):\n         max = 10**4\n@@ -356,10 +353,10 @@ class LocalWeakReferencedCacheTest(unittest.TestCase):\n         for x in range(max):\n             refs.append(Request(f\"https://example.org/{x}\"))\n             cache[refs[-1]] = x\n-        self.assertEqual(len(cache), max)\n+        assert len(cache) == max\n         for i, r in enumerate(refs):\n-            self.assertIn(r, cache)\n-            self.assertEqual(cache[r], i)\n+            assert r in cache\n+            assert cache[r] == i\n         del r  # delete reference to the last object in the list  # pylint: disable=undefined-loop-variable\n \n         # delete half of the objects, make sure that is reflected in the cache\n@@ -369,7 +366,7 @@ class LocalWeakReferencedCacheTest(unittest.TestCase):\n         # PyPy takes longer to collect dead references\n         garbage_collect()\n \n-        self.assertEqual(len(cache), max // 2)\n+        assert len(cache) == max // 2\n         for i, r in enumerate(refs):\n-            self.assertIn(r, cache)\n-            self.assertEqual(cache[r], i)\n+            assert r in cache\n+            assert cache[r] == i\n\n@@ -18,7 +18,7 @@ from scrapy.utils.defer import (\n )\n \n \n-class MustbeDeferredTest(unittest.TestCase):\n+class TestMustbeDeferred(unittest.TestCase):\n     def test_success_function(self):\n         steps = []\n \n@@ -66,23 +66,19 @@ def eb1(failure, arg1, arg2):\n     return f\"(eb1 {failure.value.__class__.__name__} {arg1} {arg2})\"\n \n \n-class DeferUtilsTest(unittest.TestCase):\n+class TestDeferUtils(unittest.TestCase):\n     @defer.inlineCallbacks\n     def test_process_chain(self):\n         x = yield process_chain([cb1, cb2, cb3], \"res\", \"v1\", \"v2\")\n-        self.assertEqual(x, \"(cb3 (cb2 (cb1 res v1 v2) v1 v2) v1 v2)\")\n+        assert x == \"(cb3 (cb2 (cb1 res v1 v2) v1 v2) v1 v2)\"\n \n-        gotexc = False\n-        try:\n+        with pytest.raises(TypeError):\n             yield process_chain([cb1, cb_fail, cb3], \"res\", \"v1\", \"v2\")\n-        except TypeError:\n-            gotexc = True\n-        self.assertTrue(gotexc)\n \n     @defer.inlineCallbacks\n     def test_process_parallel(self):\n         x = yield process_parallel([cb1, cb2, cb3], \"res\", \"v1\", \"v2\")\n-        self.assertEqual(x, [\"(cb1 res v1 v2)\", \"(cb2 res v1 v2)\", \"(cb3 res v1 v2)\"])\n+        assert x == [\"(cb1 res v1 v2)\", \"(cb2 res v1 v2)\", \"(cb3 res v1 v2)\"]\n \n     def test_process_parallel_failure(self):\n         d = process_parallel([cb1, cb_fail, cb3], \"res\", \"v1\", \"v2\")\n@@ -90,15 +86,15 @@ class DeferUtilsTest(unittest.TestCase):\n         return d\n \n \n-class IterErrbackTest(unittest.TestCase):\n+class TestIterErrback:\n     def test_iter_errback_good(self):\n         def itergood():\n             yield from range(10)\n \n         errors = []\n         out = list(iter_errback(itergood(), errors.append))\n-        self.assertEqual(out, list(range(10)))\n-        self.assertFalse(errors)\n+        assert out == list(range(10))\n+        assert not errors\n \n     def test_iter_errback_bad(self):\n         def iterbad():\n@@ -109,12 +105,12 @@ class IterErrbackTest(unittest.TestCase):\n \n         errors = []\n         out = list(iter_errback(iterbad(), errors.append))\n-        self.assertEqual(out, [0, 1, 2, 3, 4])\n-        self.assertEqual(len(errors), 1)\n-        self.assertIsInstance(errors[0].value, ZeroDivisionError)\n+        assert out == [0, 1, 2, 3, 4]\n+        assert len(errors) == 1\n+        assert isinstance(errors[0].value, ZeroDivisionError)\n \n \n-class AiterErrbackTest(unittest.TestCase):\n+class TestAiterErrback(unittest.TestCase):\n     @deferred_f_from_coro_f\n     async def test_aiter_errback_good(self):\n         async def itergood():\n@@ -123,8 +119,8 @@ class AiterErrbackTest(unittest.TestCase):\n \n         errors = []\n         out = await collect_asyncgen(aiter_errback(itergood(), errors.append))\n-        self.assertEqual(out, list(range(10)))\n-        self.assertFalse(errors)\n+        assert out == list(range(10))\n+        assert not errors\n \n     @deferred_f_from_coro_f\n     async def test_iter_errback_bad(self):\n@@ -136,12 +132,12 @@ class AiterErrbackTest(unittest.TestCase):\n \n         errors = []\n         out = await collect_asyncgen(aiter_errback(iterbad(), errors.append))\n-        self.assertEqual(out, [0, 1, 2, 3, 4])\n-        self.assertEqual(len(errors), 1)\n-        self.assertIsInstance(errors[0].value, ZeroDivisionError)\n+        assert out == [0, 1, 2, 3, 4]\n+        assert len(errors) == 1\n+        assert isinstance(errors[0].value, ZeroDivisionError)\n \n \n-class AsyncDefTestsuiteTest(unittest.TestCase):\n+class TestAsyncDefTestsuite(unittest.TestCase):\n     @deferred_f_from_coro_f\n     async def test_deferred_f_from_coro_f(self):\n         pass\n@@ -156,7 +152,7 @@ class AsyncDefTestsuiteTest(unittest.TestCase):\n         raise RuntimeError(\"This is expected to be raised\")\n \n \n-class AsyncCooperatorTest(unittest.TestCase):\n+class TestAsyncCooperator(unittest.TestCase):\n     \"\"\"This tests _AsyncCooperatorAdapter by testing parallel_async which is its only usage.\n \n     parallel_async is called with the results of a callback (so an iterable of items, requests and None,\n@@ -207,7 +203,7 @@ class AsyncCooperatorTest(unittest.TestCase):\n             ait = self.get_async_iterable(length)\n             dl = parallel_async(ait, self.CONCURRENT_ITEMS, self.callable, results)\n             yield dl\n-            self.assertEqual(list(range(length)), sorted(results))\n+            assert list(range(length)) == sorted(results)\n \n     @defer.inlineCallbacks\n     def test_delays(self):\n@@ -216,4 +212,4 @@ class AsyncCooperatorTest(unittest.TestCase):\n             ait = self.get_async_iterable_with_delays(length)\n             dl = parallel_async(ait, self.CONCURRENT_ITEMS, self.callable, results)\n             yield dl\n-            self.assertEqual(list(range(length)), sorted(results))\n+            assert list(range(length)) == sorted(results)\n\n@@ -1,5 +1,4 @@\n import inspect\n-import unittest\n import warnings\n from unittest import mock\n \n@@ -21,7 +20,7 @@ class NewName(SomeBaseClass):\n     pass\n \n \n-class WarnWhenSubclassedTest(unittest.TestCase):\n+class TestWarnWhenSubclassed:\n     def _mywarnings(self, w, category=MyWarning):\n         return [x for x in w if x.category is MyWarning]\n \n@@ -30,7 +29,7 @@ class WarnWhenSubclassedTest(unittest.TestCase):\n             create_deprecated_class(\"Deprecated\", NewName)\n \n         w = self._mywarnings(w)\n-        self.assertEqual(w, [])\n+        assert w == []\n \n     def test_subclassing_warning_message(self):\n         Deprecated = create_deprecated_class(\n@@ -43,15 +42,14 @@ class WarnWhenSubclassedTest(unittest.TestCase):\n                 pass\n \n         w = self._mywarnings(w)\n-        self.assertEqual(len(w), 1)\n-        self.assertEqual(\n-            str(w[0].message),\n-            \"tests.test_utils_deprecate.UserClass inherits from \"\n+        assert len(w) == 1\n+        assert (\n+            str(w[0].message) == \"tests.test_utils_deprecate.UserClass inherits from \"\n             \"deprecated class tests.test_utils_deprecate.Deprecated, \"\n             \"please inherit from tests.test_utils_deprecate.NewName.\"\n-            \" (warning only on first subclass, there may be others)\",\n+            \" (warning only on first subclass, there may be others)\"\n         )\n-        self.assertEqual(w[0].lineno, inspect.getsourcelines(UserClass)[1])\n+        assert w[0].lineno == inspect.getsourcelines(UserClass)[1]\n \n     def test_custom_class_paths(self):\n         Deprecated = create_deprecated_class(\n@@ -70,11 +68,11 @@ class WarnWhenSubclassedTest(unittest.TestCase):\n             _ = Deprecated()\n \n         w = self._mywarnings(w)\n-        self.assertEqual(len(w), 2)\n-        self.assertIn(\"foo.NewClass\", str(w[0].message))\n-        self.assertIn(\"bar.OldClass\", str(w[0].message))\n-        self.assertIn(\"foo.NewClass\", str(w[1].message))\n-        self.assertIn(\"bar.OldClass\", str(w[1].message))\n+        assert len(w) == 2\n+        assert \"foo.NewClass\" in str(w[0].message)\n+        assert \"bar.OldClass\" in str(w[0].message)\n+        assert \"foo.NewClass\" in str(w[1].message)\n+        assert \"bar.OldClass\" in str(w[1].message)\n \n     def test_subclassing_warns_only_on_direct_children(self):\n         Deprecated = create_deprecated_class(\n@@ -90,8 +88,8 @@ class WarnWhenSubclassedTest(unittest.TestCase):\n                 pass\n \n         w = self._mywarnings(w)\n-        self.assertEqual(len(w), 1)\n-        self.assertIn(\"UserClass\", str(w[0].message))\n+        assert len(w) == 1\n+        assert \"UserClass\" in str(w[0].message)\n \n     def test_subclassing_warns_once_by_default(self):\n         Deprecated = create_deprecated_class(\n@@ -110,8 +108,8 @@ class WarnWhenSubclassedTest(unittest.TestCase):\n                 pass\n \n         w = self._mywarnings(w)\n-        self.assertEqual(len(w), 1)\n-        self.assertIn(\"UserClass\", str(w[0].message))\n+        assert len(w) == 1\n+        assert \"UserClass\" in str(w[0].message)\n \n     def test_warning_on_instance(self):\n         Deprecated = create_deprecated_class(\n@@ -130,13 +128,12 @@ class WarnWhenSubclassedTest(unittest.TestCase):\n             _ = UserClass()  # subclass instances don't warn\n \n         w = self._mywarnings(w)\n-        self.assertEqual(len(w), 1)\n-        self.assertEqual(\n-            str(w[0].message),\n-            \"tests.test_utils_deprecate.Deprecated is deprecated, \"\n-            \"instantiate tests.test_utils_deprecate.NewName instead.\",\n+        assert len(w) == 1\n+        assert (\n+            str(w[0].message) == \"tests.test_utils_deprecate.Deprecated is deprecated, \"\n+            \"instantiate tests.test_utils_deprecate.NewName instead.\"\n         )\n-        self.assertEqual(w[0].lineno, lineno)\n+        assert w[0].lineno == lineno\n \n     def test_warning_auto_message(self):\n         with warnings.catch_warnings(record=True) as w:\n@@ -146,8 +143,8 @@ class WarnWhenSubclassedTest(unittest.TestCase):\n                 pass\n \n         msg = str(w[0].message)\n-        self.assertIn(\"tests.test_utils_deprecate.NewName\", msg)\n-        self.assertIn(\"tests.test_utils_deprecate.Deprecated\", msg)\n+        assert \"tests.test_utils_deprecate.NewName\" in msg\n+        assert \"tests.test_utils_deprecate.Deprecated\" in msg\n \n     def test_issubclass(self):\n         with warnings.catch_warnings():\n@@ -225,7 +222,7 @@ class WarnWhenSubclassedTest(unittest.TestCase):\n             warnings.simplefilter(\"ignore\", ScrapyDeprecationWarning)\n             Deprecated = create_deprecated_class(\"Deprecated\", NewName, {\"foo\": \"bar\"})\n \n-        self.assertEqual(Deprecated.foo, \"bar\")\n+        assert Deprecated.foo == \"bar\"\n \n     def test_deprecate_a_class_with_custom_metaclass(self):\n         Meta1 = type(\"Meta1\", (type,), {})\n@@ -246,7 +243,7 @@ class WarnWhenSubclassedTest(unittest.TestCase):\n             )\n \n         w = self._mywarnings(w)\n-        self.assertEqual(len(w), 0, str(map(str, w)))\n+        assert len(w) == 0, str(map(str, w))\n \n         with warnings.catch_warnings(record=True) as w:\n             AlsoDeprecated()\n@@ -255,11 +252,11 @@ class WarnWhenSubclassedTest(unittest.TestCase):\n                 pass\n \n         w = self._mywarnings(w)\n-        self.assertEqual(len(w), 2)\n-        self.assertIn(\"AlsoDeprecated\", str(w[0].message))\n-        self.assertIn(\"foo.Bar\", str(w[0].message))\n-        self.assertIn(\"AlsoDeprecated\", str(w[1].message))\n-        self.assertIn(\"foo.Bar\", str(w[1].message))\n+        assert len(w) == 2\n+        assert \"AlsoDeprecated\" in str(w[0].message)\n+        assert \"foo.Bar\" in str(w[0].message)\n+        assert \"AlsoDeprecated\" in str(w[1].message)\n+        assert \"foo.Bar\" in str(w[1].message)\n \n     def test_inspect_stack(self):\n         with (\n@@ -271,7 +268,7 @@ class WarnWhenSubclassedTest(unittest.TestCase):\n             class SubClass(DeprecatedName):\n                 pass\n \n-        self.assertIn(\"Error detecting parent module\", str(w[0].message))\n+        assert \"Error detecting parent module\" in str(w[0].message)\n \n \n @mock.patch(\n@@ -281,27 +278,27 @@ class WarnWhenSubclassedTest(unittest.TestCase):\n         (\"scrapy.contrib.\", \"scrapy.extensions.\"),\n     ],\n )\n-class UpdateClassPathTest(unittest.TestCase):\n+class TestUpdateClassPath:\n     def test_old_path_gets_fixed(self):\n         with warnings.catch_warnings(record=True) as w:\n             output = update_classpath(\"scrapy.contrib.debug.Debug\")\n-        self.assertEqual(output, \"scrapy.extensions.debug.Debug\")\n-        self.assertEqual(len(w), 1)\n-        self.assertIn(\"scrapy.contrib.debug.Debug\", str(w[0].message))\n-        self.assertIn(\"scrapy.extensions.debug.Debug\", str(w[0].message))\n+        assert output == \"scrapy.extensions.debug.Debug\"\n+        assert len(w) == 1\n+        assert \"scrapy.contrib.debug.Debug\" in str(w[0].message)\n+        assert \"scrapy.extensions.debug.Debug\" in str(w[0].message)\n \n     def test_sorted_replacement(self):\n         with warnings.catch_warnings():\n             warnings.simplefilter(\"ignore\", ScrapyDeprecationWarning)\n             output = update_classpath(\"scrapy.contrib.pipeline.Pipeline\")\n-        self.assertEqual(output, \"scrapy.pipelines.Pipeline\")\n+        assert output == \"scrapy.pipelines.Pipeline\"\n \n     def test_unmatched_path_stays_the_same(self):\n         with warnings.catch_warnings(record=True) as w:\n             output = update_classpath(\"scrapy.unmatched.Path\")\n-        self.assertEqual(output, \"scrapy.unmatched.Path\")\n-        self.assertEqual(len(w), 0)\n+        assert output == \"scrapy.unmatched.Path\"\n+        assert len(w) == 0\n \n     def test_returns_nonstring(self):\n         for notastring in [None, True, [1, 2, 3], object()]:\n-            self.assertEqual(update_classpath(notastring), notastring)\n+            assert update_classpath(notastring) == notastring\n\n@@ -1,10 +1,10 @@\n from io import StringIO\n-from unittest import TestCase, mock\n+from unittest import mock\n \n from scrapy.utils.display import pformat, pprint\n \n \n-class TestDisplay(TestCase):\n+class TestDisplay:\n     object = {\"a\": 1}\n     colorized_strings = {\n         (\n@@ -26,15 +26,15 @@ class TestDisplay(TestCase):\n     @mock.patch(\"sys.stdout.isatty\")\n     def test_pformat(self, isatty):\n         isatty.return_value = True\n-        self.assertIn(pformat(self.object), self.colorized_strings)\n+        assert pformat(self.object) in self.colorized_strings\n \n     @mock.patch(\"sys.stdout.isatty\")\n     def test_pformat_dont_colorize(self, isatty):\n         isatty.return_value = True\n-        self.assertEqual(pformat(self.object, colorize=False), self.plain_string)\n+        assert pformat(self.object, colorize=False) == self.plain_string\n \n     def test_pformat_not_tty(self):\n-        self.assertEqual(pformat(self.object), self.plain_string)\n+        assert pformat(self.object) == self.plain_string\n \n     @mock.patch(\"sys.platform\", \"win32\")\n     @mock.patch(\"platform.version\")\n@@ -42,7 +42,7 @@ class TestDisplay(TestCase):\n     def test_pformat_old_windows(self, isatty, version):\n         isatty.return_value = True\n         version.return_value = \"10.0.14392\"\n-        self.assertIn(pformat(self.object), self.colorized_strings)\n+        assert pformat(self.object) in self.colorized_strings\n \n     @mock.patch(\"sys.platform\", \"win32\")\n     @mock.patch(\"scrapy.utils.display._enable_windows_terminal_processing\")\n@@ -54,7 +54,7 @@ class TestDisplay(TestCase):\n         isatty.return_value = True\n         version.return_value = \"10.0.14393\"\n         terminal_processing.return_value = False\n-        self.assertEqual(pformat(self.object), self.plain_string)\n+        assert pformat(self.object) == self.plain_string\n \n     @mock.patch(\"sys.platform\", \"win32\")\n     @mock.patch(\"scrapy.utils.display._enable_windows_terminal_processing\")\n@@ -64,7 +64,7 @@ class TestDisplay(TestCase):\n         isatty.return_value = True\n         version.return_value = \"10.0.14393\"\n         terminal_processing.return_value = True\n-        self.assertIn(pformat(self.object), self.colorized_strings)\n+        assert pformat(self.object) in self.colorized_strings\n \n     @mock.patch(\"sys.platform\", \"linux\")\n     @mock.patch(\"sys.stdout.isatty\")\n@@ -81,10 +81,10 @@ class TestDisplay(TestCase):\n             return real_import(name, globals, locals, fromlist, level)\n \n         builtins.__import__ = mock_import\n-        self.assertEqual(pformat(self.object), self.plain_string)\n+        assert pformat(self.object) == self.plain_string\n         builtins.__import__ = real_import\n \n     def test_pprint(self):\n         with mock.patch(\"sys.stdout\", new=StringIO()) as mock_out:\n             pprint(self.object)\n-            self.assertEqual(mock_out.getvalue(), \"{'a': 1}\\n\")\n+            assert mock_out.getvalue() == \"{'a': 1}\\n\"\n\n@@ -1,4 +1,3 @@\n-import unittest\n from gzip import BadGzipFile\n from pathlib import Path\n \n@@ -12,17 +11,17 @@ from tests import tests_datadir\n SAMPLEDIR = Path(tests_datadir, \"compressed\")\n \n \n-class GunzipTest(unittest.TestCase):\n+class TestGunzip:\n     def test_gunzip_basic(self):\n         r1 = Response(\n             \"http://www.example.com\",\n             body=(SAMPLEDIR / \"feed-sample1.xml.gz\").read_bytes(),\n         )\n-        self.assertTrue(gzip_magic_number(r1))\n+        assert gzip_magic_number(r1)\n \n         r2 = Response(\"http://www.example.com\", body=gunzip(r1.body))\n-        self.assertFalse(gzip_magic_number(r2))\n-        self.assertEqual(len(r2.body), 9950)\n+        assert not gzip_magic_number(r2)\n+        assert len(r2.body) == 9950\n \n     def test_gunzip_truncated(self):\n         text = gunzip((SAMPLEDIR / \"truncated-crc-error.gz\").read_bytes())\n@@ -37,15 +36,15 @@ class GunzipTest(unittest.TestCase):\n             \"http://www.example.com\",\n             body=(SAMPLEDIR / \"truncated-crc-error-short.gz\").read_bytes(),\n         )\n-        self.assertTrue(gzip_magic_number(r1))\n+        assert gzip_magic_number(r1)\n \n         r2 = Response(\"http://www.example.com\", body=gunzip(r1.body))\n         assert r2.body.endswith(b\"</html>\")\n-        self.assertFalse(gzip_magic_number(r2))\n+        assert not gzip_magic_number(r2)\n \n     def test_is_gzipped_empty(self):\n         r1 = Response(\"http://www.example.com\")\n-        self.assertFalse(gzip_magic_number(r1))\n+        assert not gzip_magic_number(r1)\n \n     def test_gunzip_illegal_eof(self):\n         text = html_to_unicode(\n@@ -54,5 +53,5 @@ class GunzipTest(unittest.TestCase):\n         expected_text = (SAMPLEDIR / \"unexpected-eof-output.txt\").read_text(\n             encoding=\"utf-8\"\n         )\n-        self.assertEqual(len(text), len(expected_text))\n-        self.assertEqual(text, expected_text)\n+        assert len(text) == len(expected_text)\n+        assert text == expected_text\n\n@@ -1,11 +1,10 @@\n-import unittest\n from urllib.parse import urlparse\n \n from scrapy.http import Request\n from scrapy.utils.httpobj import urlparse_cached\n \n \n-class HttpobjUtilsTest(unittest.TestCase):\n+class TestHttpobjUtils:\n     def test_urlparse_cached(self):\n         url = \"http://www.example.com/index.html\"\n         request1 = Request(url)\n\n@@ -1,5 +1,4 @@\n import pytest\n-from twisted.trial import unittest\n \n from scrapy.exceptions import ScrapyDeprecationWarning\n from scrapy.http import Response, TextResponse, XmlResponse\n@@ -7,7 +6,7 @@ from scrapy.utils.iterators import _body_or_str, csviter, xmliter, xmliter_lxml\n from tests import get_testdata\n \n \n-class XmliterBaseTestCase:\n+class XmliterBase:\n     @pytest.mark.filterwarnings(\"ignore::scrapy.exceptions.ScrapyDeprecationWarning\")\n     def test_xmliter(self):\n         body = b\"\"\"\n@@ -35,9 +34,10 @@ class XmliterBaseTestCase:\n             for x in self.xmliter(response, \"product\")\n         ]\n \n-        self.assertEqual(\n-            attrs, [(\"001\", [\"Name 1\"], [\"Type 1\"]), (\"002\", [\"Name 2\"], [\"Type 2\"])]\n-        )\n+        assert attrs == [\n+            (\"001\", [\"Name 1\"], [\"Type 1\"]),\n+            (\"002\", [\"Name 2\"], [\"Type 2\"]),\n+        ]\n \n     @pytest.mark.filterwarnings(\"ignore::scrapy.exceptions.ScrapyDeprecationWarning\")\n     def test_xmliter_unusual_node(self):\n@@ -51,7 +51,7 @@ class XmliterBaseTestCase:\n         nodenames = [\n             e.xpath(\"name()\").getall() for e in self.xmliter(response, \"matchme...\")\n         ]\n-        self.assertEqual(nodenames, [[\"matchme...\"]])\n+        assert nodenames == [[\"matchme...\"]]\n \n     @pytest.mark.filterwarnings(\"ignore::scrapy.exceptions.ScrapyDeprecationWarning\")\n     def test_xmliter_unicode(self):\n@@ -107,10 +107,11 @@ class XmliterBaseTestCase:\n                 for x in self.xmliter(r, \"þingflokkur\")\n             ]\n \n-            self.assertEqual(\n-                attrs,\n-                [(\"26\", [\"-\"], [\"80\"]), (\"21\", [\"Ab\"], [\"76\"]), (\"27\", [\"A\"], [\"27\"])],\n-            )\n+            assert attrs == [\n+                (\"26\", [\"-\"], [\"80\"]),\n+                (\"21\", [\"Ab\"], [\"76\"]),\n+                (\"27\", [\"A\"], [\"27\"]),\n+            ]\n \n     @pytest.mark.filterwarnings(\"ignore::scrapy.exceptions.ScrapyDeprecationWarning\")\n     def test_xmliter_text(self):\n@@ -119,10 +120,10 @@ class XmliterBaseTestCase:\n             \"<products><product>one</product><product>two</product></products>\"\n         )\n \n-        self.assertEqual(\n-            [x.xpath(\"text()\").getall() for x in self.xmliter(body, \"product\")],\n-            [[\"one\"], [\"two\"]],\n-        )\n+        assert [x.xpath(\"text()\").getall() for x in self.xmliter(body, \"product\")] == [\n+            [\"one\"],\n+            [\"two\"],\n+        ]\n \n     @pytest.mark.filterwarnings(\"ignore::scrapy.exceptions.ScrapyDeprecationWarning\")\n     def test_xmliter_namespaces(self):\n@@ -148,21 +149,19 @@ class XmliterBaseTestCase:\n         my_iter = self.xmliter(response, \"item\")\n         node = next(my_iter)\n         node.register_namespace(\"g\", \"http://base.google.com/ns/1.0\")\n-        self.assertEqual(node.xpath(\"title/text()\").getall(), [\"Item 1\"])\n-        self.assertEqual(node.xpath(\"description/text()\").getall(), [\"This is item 1\"])\n-        self.assertEqual(\n-            node.xpath(\"link/text()\").getall(),\n-            [\"http://www.mydummycompany.com/items/1\"],\n-        )\n-        self.assertEqual(\n-            node.xpath(\"g:image_link/text()\").getall(),\n-            [\"http://www.mydummycompany.com/images/item1.jpg\"],\n-        )\n-        self.assertEqual(node.xpath(\"g:id/text()\").getall(), [\"ITEM_1\"])\n-        self.assertEqual(node.xpath(\"g:price/text()\").getall(), [\"400\"])\n-        self.assertEqual(node.xpath(\"image_link/text()\").getall(), [])\n-        self.assertEqual(node.xpath(\"id/text()\").getall(), [])\n-        self.assertEqual(node.xpath(\"price/text()\").getall(), [])\n+        assert node.xpath(\"title/text()\").getall() == [\"Item 1\"]\n+        assert node.xpath(\"description/text()\").getall() == [\"This is item 1\"]\n+        assert node.xpath(\"link/text()\").getall() == [\n+            \"http://www.mydummycompany.com/items/1\"\n+        ]\n+        assert node.xpath(\"g:image_link/text()\").getall() == [\n+            \"http://www.mydummycompany.com/images/item1.jpg\"\n+        ]\n+        assert node.xpath(\"g:id/text()\").getall() == [\"ITEM_1\"]\n+        assert node.xpath(\"g:price/text()\").getall() == [\"400\"]\n+        assert node.xpath(\"image_link/text()\").getall() == []\n+        assert node.xpath(\"id/text()\").getall() == []\n+        assert node.xpath(\"price/text()\").getall() == []\n \n     @pytest.mark.filterwarnings(\"ignore::scrapy.exceptions.ScrapyDeprecationWarning\")\n     def test_xmliter_namespaced_nodename(self):\n@@ -188,10 +187,9 @@ class XmliterBaseTestCase:\n         my_iter = self.xmliter(response, \"g:image_link\")\n         node = next(my_iter)\n         node.register_namespace(\"g\", \"http://base.google.com/ns/1.0\")\n-        self.assertEqual(\n-            node.xpath(\"text()\").extract(),\n-            [\"http://www.mydummycompany.com/images/item1.jpg\"],\n-        )\n+        assert node.xpath(\"text()\").extract() == [\n+            \"http://www.mydummycompany.com/images/item1.jpg\"\n+        ]\n \n     @pytest.mark.filterwarnings(\"ignore::scrapy.exceptions.ScrapyDeprecationWarning\")\n     def test_xmliter_namespaced_nodename_missing(self):\n@@ -246,13 +244,13 @@ class XmliterBaseTestCase:\n             b\"</xml>\\n\\n\"\n         )\n         response = XmlResponse(\"http://www.example.com\", body=body)\n-        self.assertEqual(\n-            next(self.xmliter(response, \"item\")).get(),\n-            \"<item>Some Turkish Characters \\xd6\\xc7\\u015e\\u0130\\u011e\\xdc \\xfc\\u011f\\u0131\\u015f\\xe7\\xf6</item>\",\n+        assert (\n+            next(self.xmliter(response, \"item\")).get()\n+            == \"<item>Some Turkish Characters \\xd6\\xc7\\u015e\\u0130\\u011e\\xdc \\xfc\\u011f\\u0131\\u015f\\xe7\\xf6</item>\"\n         )\n \n \n-class XmliterTestCase(XmliterBaseTestCase, unittest.TestCase):\n+class TestXmliter(XmliterBase):\n     xmliter = staticmethod(xmliter)\n \n     def test_deprecation(self):\n@@ -269,7 +267,7 @@ class XmliterTestCase(XmliterBaseTestCase, unittest.TestCase):\n             next(self.xmliter(body, \"product\"))\n \n \n-class LxmlXmliterTestCase(XmliterBaseTestCase, unittest.TestCase):\n+class TestLxmlXmliter(XmliterBase):\n     xmliter = staticmethod(xmliter_lxml)\n \n     def test_xmliter_iterate_namespace(self):\n@@ -293,21 +291,19 @@ class LxmlXmliterTestCase(XmliterBaseTestCase, unittest.TestCase):\n         response = XmlResponse(url=\"http://mydummycompany.com\", body=body)\n \n         no_namespace_iter = self.xmliter(response, \"image_link\")\n-        self.assertEqual(len(list(no_namespace_iter)), 0)\n+        assert len(list(no_namespace_iter)) == 0\n \n         namespace_iter = self.xmliter(\n             response, \"image_link\", \"http://base.google.com/ns/1.0\"\n         )\n         node = next(namespace_iter)\n-        self.assertEqual(\n-            node.xpath(\"text()\").getall(),\n-            [\"http://www.mydummycompany.com/images/item1.jpg\"],\n-        )\n+        assert node.xpath(\"text()\").getall() == [\n+            \"http://www.mydummycompany.com/images/item1.jpg\"\n+        ]\n         node = next(namespace_iter)\n-        self.assertEqual(\n-            node.xpath(\"text()\").getall(),\n-            [\"http://www.mydummycompany.com/images/item2.jpg\"],\n-        )\n+        assert node.xpath(\"text()\").getall() == [\n+            \"http://www.mydummycompany.com/images/item2.jpg\"\n+        ]\n \n     def test_xmliter_namespaces_prefix(self):\n         body = b\"\"\"\n@@ -332,16 +328,16 @@ class LxmlXmliterTestCase(XmliterBaseTestCase, unittest.TestCase):\n         my_iter = self.xmliter(response, \"table\", \"http://www.w3.org/TR/html4/\", \"h\")\n \n         node = next(my_iter)\n-        self.assertEqual(len(node.xpath(\"h:tr/h:td\").getall()), 2)\n-        self.assertEqual(node.xpath(\"h:tr/h:td[1]/text()\").getall(), [\"Apples\"])\n-        self.assertEqual(node.xpath(\"h:tr/h:td[2]/text()\").getall(), [\"Bananas\"])\n+        assert len(node.xpath(\"h:tr/h:td\").getall()) == 2\n+        assert node.xpath(\"h:tr/h:td[1]/text()\").getall() == [\"Apples\"]\n+        assert node.xpath(\"h:tr/h:td[2]/text()\").getall() == [\"Bananas\"]\n \n         my_iter = self.xmliter(\n             response, \"table\", \"http://www.w3schools.com/furniture\", \"f\"\n         )\n \n         node = next(my_iter)\n-        self.assertEqual(node.xpath(\"f:name/text()\").getall(), [\"African Coffee Table\"])\n+        assert node.xpath(\"f:name/text()\").getall() == [\"African Coffee Table\"]\n \n     def test_xmliter_objtype_exception(self):\n         i = self.xmliter(42, \"product\")\n@@ -349,42 +345,36 @@ class LxmlXmliterTestCase(XmliterBaseTestCase, unittest.TestCase):\n             next(i)\n \n \n-class UtilsCsvTestCase(unittest.TestCase):\n+class TestUtilsCsv:\n     def test_csviter_defaults(self):\n         body = get_testdata(\"feeds\", \"feed-sample3.csv\")\n         response = TextResponse(url=\"http://example.com/\", body=body)\n         csv = csviter(response)\n \n         result = list(csv)\n-        self.assertEqual(\n-            result,\n-            [\n+        assert result == [\n             {\"id\": \"1\", \"name\": \"alpha\", \"value\": \"foobar\"},\n             {\"id\": \"2\", \"name\": \"unicode\", \"value\": \"\\xfan\\xedc\\xf3d\\xe9\\u203d\"},\n             {\"id\": \"3\", \"name\": \"multi\", \"value\": \"foo\\nbar\"},\n             {\"id\": \"4\", \"name\": \"empty\", \"value\": \"\"},\n-            ],\n-        )\n+        ]\n \n         # explicit type check cuz' we no like stinkin' autocasting! yarrr\n         for result_row in result:\n-            self.assertTrue(all(isinstance(k, str) for k in result_row))\n-            self.assertTrue(all(isinstance(v, str) for v in result_row.values()))\n+            assert all(isinstance(k, str) for k in result_row)\n+            assert all(isinstance(v, str) for v in result_row.values())\n \n     def test_csviter_delimiter(self):\n         body = get_testdata(\"feeds\", \"feed-sample3.csv\").replace(b\",\", b\"\\t\")\n         response = TextResponse(url=\"http://example.com/\", body=body)\n         csv = csviter(response, delimiter=\"\\t\")\n \n-        self.assertEqual(\n-            list(csv),\n-            [\n+        assert list(csv) == [\n             {\"id\": \"1\", \"name\": \"alpha\", \"value\": \"foobar\"},\n             {\"id\": \"2\", \"name\": \"unicode\", \"value\": \"\\xfan\\xedc\\xf3d\\xe9\\u203d\"},\n             {\"id\": \"3\", \"name\": \"multi\", \"value\": \"foo\\nbar\"},\n             {\"id\": \"4\", \"name\": \"empty\", \"value\": \"\"},\n-            ],\n-        )\n+        ]\n \n     def test_csviter_quotechar(self):\n         body1 = get_testdata(\"feeds\", \"feed-sample6.csv\")\n@@ -393,37 +383,29 @@ class UtilsCsvTestCase(unittest.TestCase):\n         response1 = TextResponse(url=\"http://example.com/\", body=body1)\n         csv1 = csviter(response1, quotechar=\"'\")\n \n-        self.assertEqual(\n-            list(csv1),\n-            [\n+        assert list(csv1) == [\n             {\"id\": \"1\", \"name\": \"alpha\", \"value\": \"foobar\"},\n             {\"id\": \"2\", \"name\": \"unicode\", \"value\": \"\\xfan\\xedc\\xf3d\\xe9\\u203d\"},\n             {\"id\": \"3\", \"name\": \"multi\", \"value\": \"foo\\nbar\"},\n             {\"id\": \"4\", \"name\": \"empty\", \"value\": \"\"},\n-            ],\n-        )\n+        ]\n \n         response2 = TextResponse(url=\"http://example.com/\", body=body2)\n         csv2 = csviter(response2, delimiter=\"|\", quotechar=\"'\")\n \n-        self.assertEqual(\n-            list(csv2),\n-            [\n+        assert list(csv2) == [\n             {\"id\": \"1\", \"name\": \"alpha\", \"value\": \"foobar\"},\n             {\"id\": \"2\", \"name\": \"unicode\", \"value\": \"\\xfan\\xedc\\xf3d\\xe9\\u203d\"},\n             {\"id\": \"3\", \"name\": \"multi\", \"value\": \"foo\\nbar\"},\n             {\"id\": \"4\", \"name\": \"empty\", \"value\": \"\"},\n-            ],\n-        )\n+        ]\n \n     def test_csviter_wrong_quotechar(self):\n         body = get_testdata(\"feeds\", \"feed-sample6.csv\")\n         response = TextResponse(url=\"http://example.com/\", body=body)\n         csv = csviter(response)\n \n-        self.assertEqual(\n-            list(csv),\n-            [\n+        assert list(csv) == [\n             {\"'id'\": \"1\", \"'name'\": \"'alpha'\", \"'value'\": \"'foobar'\"},\n             {\n                 \"'id'\": \"2\",\n@@ -432,23 +414,19 @@ class UtilsCsvTestCase(unittest.TestCase):\n             },\n             {\"'id'\": \"'3'\", \"'name'\": \"'multi'\", \"'value'\": \"'foo\"},\n             {\"'id'\": \"4\", \"'name'\": \"'empty'\", \"'value'\": \"\"},\n-            ],\n-        )\n+        ]\n \n     def test_csviter_delimiter_binary_response_assume_utf8_encoding(self):\n         body = get_testdata(\"feeds\", \"feed-sample3.csv\").replace(b\",\", b\"\\t\")\n         response = Response(url=\"http://example.com/\", body=body)\n         csv = csviter(response, delimiter=\"\\t\")\n \n-        self.assertEqual(\n-            list(csv),\n-            [\n+        assert list(csv) == [\n             {\"id\": \"1\", \"name\": \"alpha\", \"value\": \"foobar\"},\n             {\"id\": \"2\", \"name\": \"unicode\", \"value\": \"\\xfan\\xedc\\xf3d\\xe9\\u203d\"},\n             {\"id\": \"3\", \"name\": \"multi\", \"value\": \"foo\\nbar\"},\n             {\"id\": \"4\", \"name\": \"empty\", \"value\": \"\"},\n-            ],\n-        )\n+        ]\n \n     def test_csviter_headers(self):\n         sample = get_testdata(\"feeds\", \"feed-sample3.csv\").splitlines()\n@@ -457,15 +435,12 @@ class UtilsCsvTestCase(unittest.TestCase):\n         response = TextResponse(url=\"http://example.com/\", body=body)\n         csv = csviter(response, headers=[h.decode(\"utf-8\") for h in headers])\n \n-        self.assertEqual(\n-            list(csv),\n-            [\n+        assert list(csv) == [\n             {\"id\": \"1\", \"name\": \"alpha\", \"value\": \"foobar\"},\n             {\"id\": \"2\", \"name\": \"unicode\", \"value\": \"\\xfan\\xedc\\xf3d\\xe9\\u203d\"},\n             {\"id\": \"3\", \"name\": \"multi\", \"value\": \"foo\\nbar\"},\n             {\"id\": \"4\", \"name\": \"empty\", \"value\": \"\"},\n-            ],\n-        )\n+        ]\n \n     def test_csviter_falserow(self):\n         body = get_testdata(\"feeds\", \"feed-sample3.csv\")\n@@ -474,15 +449,12 @@ class UtilsCsvTestCase(unittest.TestCase):\n         response = TextResponse(url=\"http://example.com/\", body=body)\n         csv = csviter(response)\n \n-        self.assertEqual(\n-            list(csv),\n-            [\n+        assert list(csv) == [\n             {\"id\": \"1\", \"name\": \"alpha\", \"value\": \"foobar\"},\n             {\"id\": \"2\", \"name\": \"unicode\", \"value\": \"\\xfan\\xedc\\xf3d\\xe9\\u203d\"},\n             {\"id\": \"3\", \"name\": \"multi\", \"value\": \"foo\\nbar\"},\n             {\"id\": \"4\", \"name\": \"empty\", \"value\": \"\"},\n-            ],\n-        )\n+        ]\n \n     def test_csviter_exception(self):\n         body = get_testdata(\"feeds\", \"feed-sample3.csv\")\n@@ -504,30 +476,24 @@ class UtilsCsvTestCase(unittest.TestCase):\n             url=\"http://example.com/\", body=body1, encoding=\"latin1\"\n         )\n         csv = csviter(response)\n-        self.assertEqual(\n-            list(csv),\n-            [\n+        assert list(csv) == [\n             {\"id\": \"1\", \"name\": \"latin1\", \"value\": \"test\"},\n             {\"id\": \"2\", \"name\": \"something\", \"value\": \"\\xf1\\xe1\\xe9\\xf3\"},\n-            ],\n-        )\n+        ]\n \n         response = TextResponse(url=\"http://example.com/\", body=body2, encoding=\"cp852\")\n         csv = csviter(response)\n-        self.assertEqual(\n-            list(csv),\n-            [\n+        assert list(csv) == [\n             {\"id\": \"1\", \"name\": \"cp852\", \"value\": \"test\"},\n             {\n                 \"id\": \"2\",\n                 \"name\": \"something\",\n                 \"value\": \"\\u255a\\u2569\\u2569\\u2569\\u2550\\u2550\\u2557\",\n             },\n-            ],\n-        )\n+        ]\n \n \n-class TestHelper(unittest.TestCase):\n+class TestHelper:\n     bbody = b\"utf8-body\"\n     ubody = bbody.decode(\"utf8\")\n     txtresponse = TextResponse(url=\"http://example.org/\", body=bbody, encoding=\"utf-8\")\n@@ -541,11 +507,9 @@ class TestHelper(unittest.TestCase):\n             self._assert_type_and_value(r2, self.ubody, obj)\n             r3 = _body_or_str(obj, unicode=False)\n             self._assert_type_and_value(r3, self.bbody, obj)\n-            self.assertTrue(type(r1) is type(r2))\n-            self.assertTrue(type(r1) is not type(r3))\n+            assert type(r1) is type(r2)\n+            assert type(r1) is not type(r3)\n \n     def _assert_type_and_value(self, a, b, obj):\n-        self.assertTrue(\n-            type(a) is type(b), f\"Got {type(a)}, expected {type(b)} for {obj!r}\"\n-        )\n-        self.assertEqual(a, b)\n+        assert type(a) is type(b), f\"Got {type(a)}, expected {type(b)} for {obj!r}\"\n+        assert a == b\n\n@@ -7,7 +7,6 @@ import sys\n import unittest\n from io import StringIO\n from typing import TYPE_CHECKING, Any\n-from unittest import TestCase\n \n import pytest\n from testfixtures import LogCapture\n@@ -27,7 +26,7 @@ if TYPE_CHECKING:\n     from collections.abc import Mapping, MutableMapping\n \n \n-class FailureToExcInfoTest(unittest.TestCase):\n+class TestFailureToExcInfo:\n     def test_failure(self):\n         try:\n             0 / 0\n@@ -35,14 +34,14 @@ class FailureToExcInfoTest(unittest.TestCase):\n             exc_info = sys.exc_info()\n             failure = Failure()\n \n-        self.assertTupleEqual(exc_info, failure_to_exc_info(failure))\n+        assert exc_info == failure_to_exc_info(failure)\n \n     def test_non_failure(self):\n-        self.assertIsNone(failure_to_exc_info(\"test\"))\n+        assert failure_to_exc_info(\"test\") is None\n \n \n-class TopLevelFormatterTest(unittest.TestCase):\n-    def setUp(self):\n+class TestTopLevelFormatter:\n+    def setup_method(self):\n         self.handler = LogCapture()\n         self.handler.addFilter(TopLevelFormatter([\"test\"]))\n \n@@ -71,8 +70,8 @@ class TopLevelFormatterTest(unittest.TestCase):\n         log.check((\"different\", \"WARNING\", \"test log msg\"))\n \n \n-class LogCounterHandlerTest(unittest.TestCase):\n-    def setUp(self):\n+class TestLogCounterHandler:\n+    def setup_method(self):\n         settings = {\"LOG_LEVEL\": \"WARNING\"}\n         self.logger = logging.getLogger(\"test\")\n         self.logger.setLevel(logging.NOTSET)\n@@ -81,24 +80,24 @@ class LogCounterHandlerTest(unittest.TestCase):\n         self.handler = LogCounterHandler(self.crawler)\n         self.logger.addHandler(self.handler)\n \n-    def tearDown(self):\n+    def teardown_method(self):\n         self.logger.propagate = True\n         self.logger.removeHandler(self.handler)\n \n     def test_init(self):\n-        self.assertIsNone(self.crawler.stats.get_value(\"log_count/DEBUG\"))\n-        self.assertIsNone(self.crawler.stats.get_value(\"log_count/INFO\"))\n-        self.assertIsNone(self.crawler.stats.get_value(\"log_count/WARNING\"))\n-        self.assertIsNone(self.crawler.stats.get_value(\"log_count/ERROR\"))\n-        self.assertIsNone(self.crawler.stats.get_value(\"log_count/CRITICAL\"))\n+        assert self.crawler.stats.get_value(\"log_count/DEBUG\") is None\n+        assert self.crawler.stats.get_value(\"log_count/INFO\") is None\n+        assert self.crawler.stats.get_value(\"log_count/WARNING\") is None\n+        assert self.crawler.stats.get_value(\"log_count/ERROR\") is None\n+        assert self.crawler.stats.get_value(\"log_count/CRITICAL\") is None\n \n     def test_accepted_level(self):\n         self.logger.error(\"test log msg\")\n-        self.assertEqual(self.crawler.stats.get_value(\"log_count/ERROR\"), 1)\n+        assert self.crawler.stats.get_value(\"log_count/ERROR\") == 1\n \n     def test_filtered_out_level(self):\n         self.logger.debug(\"test log msg\")\n-        self.assertIsNone(self.crawler.stats.get_value(\"log_count/INFO\"))\n+        assert self.crawler.stats.get_value(\"log_count/INFO\") is None\n \n \n class StreamLoggerTest(unittest.TestCase):\n@@ -152,8 +151,8 @@ def test_spider_logger_adapter_process(\n     assert result_kwargs == expected_extra\n \n \n-class LoggingTestCase(TestCase):\n-    def setUp(self):\n+class TestLogging:\n+    def setup_method(self):\n         self.log_stream = StringIO()\n         handler = logging.StreamHandler(self.log_stream)\n         logger = logging.getLogger(\"log_spider\")\n@@ -163,7 +162,7 @@ class LoggingTestCase(TestCase):\n         self.logger = logger\n         self.spider = LogSpider()\n \n-    def tearDown(self):\n+    def teardown_method(self):\n         self.logger.removeHandler(self.handler)\n \n     def test_debug_logging(self):\n@@ -202,8 +201,8 @@ class LoggingTestCase(TestCase):\n         assert log_contents == f\"{log_message}\\n\"\n \n \n-class LoggingWithExtraTestCase(TestCase):\n-    def setUp(self):\n+class TestLoggingWithExtra:\n+    def setup_method(self):\n         self.log_stream = StringIO()\n         handler = logging.StreamHandler(self.log_stream)\n         formatter = logging.Formatter(\n@@ -218,7 +217,7 @@ class LoggingWithExtraTestCase(TestCase):\n         self.spider = LogSpider()\n         self.regex_pattern = re.compile(r\"^<LogSpider\\s'log_spider'\\sat\\s[^>]+>$\")\n \n-    def tearDown(self):\n+    def teardown_method(self):\n         self.logger.removeHandler(self.handler)\n \n     def test_debug_logging(self):\n\n@@ -1,6 +1,5 @@\n import os\n import sys\n-import unittest\n from pathlib import Path\n from unittest import mock\n \n@@ -18,18 +17,18 @@ from scrapy.utils.misc import (\n )\n \n \n-class UtilsMiscTestCase(unittest.TestCase):\n+class TestUtilsMisc:\n     def test_load_object_class(self):\n         obj = load_object(Field)\n-        self.assertIs(obj, Field)\n+        assert obj is Field\n         obj = load_object(\"scrapy.item.Field\")\n-        self.assertIs(obj, Field)\n+        assert obj is Field\n \n     def test_load_object_function(self):\n         obj = load_object(load_object)\n-        self.assertIs(obj, load_object)\n+        assert obj is load_object\n         obj = load_object(\"scrapy.utils.misc.load_object\")\n-        self.assertIs(obj, load_object)\n+        assert obj is load_object\n \n     def test_load_object_exceptions(self):\n         with pytest.raises(ImportError):\n@@ -47,20 +46,20 @@ class UtilsMiscTestCase(unittest.TestCase):\n             \"tests.test_utils_misc.test_walk_modules.mod.mod0\",\n             \"tests.test_utils_misc.test_walk_modules.mod1\",\n         ]\n-        self.assertEqual({m.__name__ for m in mods}, set(expected))\n+        assert {m.__name__ for m in mods} == set(expected)\n \n         mods = walk_modules(\"tests.test_utils_misc.test_walk_modules.mod\")\n         expected = [\n             \"tests.test_utils_misc.test_walk_modules.mod\",\n             \"tests.test_utils_misc.test_walk_modules.mod.mod0\",\n         ]\n-        self.assertEqual({m.__name__ for m in mods}, set(expected))\n+        assert {m.__name__ for m in mods} == set(expected)\n \n         mods = walk_modules(\"tests.test_utils_misc.test_walk_modules.mod1\")\n         expected = [\n             \"tests.test_utils_misc.test_walk_modules.mod1\",\n         ]\n-        self.assertEqual({m.__name__ for m in mods}, set(expected))\n+        assert {m.__name__ for m in mods} == set(expected)\n \n         with pytest.raises(ImportError):\n             walk_modules(\"nomodule999\")\n@@ -76,7 +75,7 @@ class UtilsMiscTestCase(unittest.TestCase):\n                 \"testegg.spiders.b\",\n                 \"testegg\",\n             ]\n-            self.assertEqual({m.__name__ for m in mods}, set(expected))\n+            assert {m.__name__ for m in mods} == set(expected)\n         finally:\n             sys.path.remove(egg)\n \n@@ -90,15 +89,13 @@ class UtilsMiscTestCase(unittest.TestCase):\n         assert hasattr(arg_to_iter([1, 2, 3]), \"__iter__\")\n         assert hasattr(arg_to_iter(c for c in \"abcd\"), \"__iter__\")\n \n-        self.assertEqual(list(arg_to_iter(None)), [])\n-        self.assertEqual(list(arg_to_iter(\"lala\")), [\"lala\"])\n-        self.assertEqual(list(arg_to_iter(100)), [100])\n-        self.assertEqual(list(arg_to_iter(c for c in \"abc\")), [\"a\", \"b\", \"c\"])\n-        self.assertEqual(list(arg_to_iter([1, 2, 3])), [1, 2, 3])\n-        self.assertEqual(list(arg_to_iter({\"a\": 1})), [{\"a\": 1}])\n-        self.assertEqual(\n-            list(arg_to_iter(TestItem(name=\"john\"))), [TestItem(name=\"john\")]\n-        )\n+        assert not list(arg_to_iter(None))\n+        assert list(arg_to_iter(\"lala\")) == [\"lala\"]\n+        assert list(arg_to_iter(100)) == [100]\n+        assert list(arg_to_iter(c for c in \"abc\")) == [\"a\", \"b\", \"c\"]\n+        assert list(arg_to_iter([1, 2, 3])) == [1, 2, 3]\n+        assert list(arg_to_iter({\"a\": 1})) == [{\"a\": 1}]\n+        assert list(arg_to_iter(TestItem(name=\"john\"))) == [TestItem(name=\"john\")]\n \n     @pytest.mark.filterwarnings(\"ignore::scrapy.exceptions.ScrapyDeprecationWarning\")\n     def test_create_instance(self):\n@@ -110,10 +107,10 @@ class UtilsMiscTestCase(unittest.TestCase):\n         def _test_with_settings(mock, settings):\n             create_instance(mock, settings, None, *args, **kwargs)\n             if hasattr(mock, \"from_crawler\"):\n-                self.assertEqual(mock.from_crawler.call_count, 0)\n+                assert mock.from_crawler.call_count == 0\n             if hasattr(mock, \"from_settings\"):\n                 mock.from_settings.assert_called_once_with(settings, *args, **kwargs)\n-                self.assertEqual(mock.call_count, 0)\n+                assert mock.call_count == 0\n             else:\n                 mock.assert_called_once_with(*args, **kwargs)\n \n@@ -122,11 +119,11 @@ class UtilsMiscTestCase(unittest.TestCase):\n             if hasattr(mock, \"from_crawler\"):\n                 mock.from_crawler.assert_called_once_with(crawler, *args, **kwargs)\n                 if hasattr(mock, \"from_settings\"):\n-                    self.assertEqual(mock.from_settings.call_count, 0)\n-                self.assertEqual(mock.call_count, 0)\n+                    assert mock.from_settings.call_count == 0\n+                assert mock.call_count == 0\n             elif hasattr(mock, \"from_settings\"):\n                 mock.from_settings.assert_called_once_with(settings, *args, **kwargs)\n-                self.assertEqual(mock.call_count, 0)\n+                assert mock.call_count == 0\n             else:\n                 mock.assert_called_once_with(*args, **kwargs)\n \n@@ -172,11 +169,11 @@ class UtilsMiscTestCase(unittest.TestCase):\n             if hasattr(mock, \"from_crawler\"):\n                 mock.from_crawler.assert_called_once_with(crawler, *args, **kwargs)\n                 if hasattr(mock, \"from_settings\"):\n-                    self.assertEqual(mock.from_settings.call_count, 0)\n-                self.assertEqual(mock.call_count, 0)\n+                    assert mock.from_settings.call_count == 0\n+                assert mock.call_count == 0\n             elif hasattr(mock, \"from_settings\"):\n                 mock.from_settings.assert_called_once_with(settings, *args, **kwargs)\n-                self.assertEqual(mock.call_count, 0)\n+                assert mock.call_count == 0\n             else:\n                 mock.assert_called_once_with(*args, **kwargs)\n \n\n@@ -1,4 +1,3 @@\n-import unittest\n import warnings\n from functools import partial\n from unittest import mock\n@@ -40,7 +39,7 @@ def generator_that_returns_stuff():\n     return 3\n \n \n-class UtilsMiscPy3TestCase(unittest.TestCase):\n+class TestUtilsMisc:\n     def test_generators_return_something(self):\n         def f1():\n             yield 1\n@@ -77,27 +76,27 @@ https://example.org\n \n         with warnings.catch_warnings(record=True) as w:\n             warn_on_generator_with_return_value(None, top_level_return_something)\n-            self.assertEqual(len(w), 1)\n-            self.assertIn(\n-                'The \"NoneType.top_level_return_something\" method is a generator',\n-                str(w[0].message),\n+            assert len(w) == 1\n+            assert (\n+                'The \"NoneType.top_level_return_something\" method is a generator'\n+                in str(w[0].message)\n             )\n         with warnings.catch_warnings(record=True) as w:\n             warn_on_generator_with_return_value(None, f1)\n-            self.assertEqual(len(w), 1)\n-            self.assertIn('The \"NoneType.f1\" method is a generator', str(w[0].message))\n+            assert len(w) == 1\n+            assert 'The \"NoneType.f1\" method is a generator' in str(w[0].message)\n         with warnings.catch_warnings(record=True) as w:\n             warn_on_generator_with_return_value(None, g1)\n-            self.assertEqual(len(w), 1)\n-            self.assertIn('The \"NoneType.g1\" method is a generator', str(w[0].message))\n+            assert len(w) == 1\n+            assert 'The \"NoneType.g1\" method is a generator' in str(w[0].message)\n         with warnings.catch_warnings(record=True) as w:\n             warn_on_generator_with_return_value(None, h1)\n-            self.assertEqual(len(w), 1)\n-            self.assertIn('The \"NoneType.h1\" method is a generator', str(w[0].message))\n+            assert len(w) == 1\n+            assert 'The \"NoneType.h1\" method is a generator' in str(w[0].message)\n         with warnings.catch_warnings(record=True) as w:\n             warn_on_generator_with_return_value(None, i1)\n-            self.assertEqual(len(w), 1)\n-            self.assertIn('The \"NoneType.i1\" method is a generator', str(w[0].message))\n+            assert len(w) == 1\n+            assert 'The \"NoneType.i1\" method is a generator' in str(w[0].message)\n \n     def test_generators_return_none(self):\n         def f2():\n@@ -144,28 +143,28 @@ https://example.org\n \n         with warnings.catch_warnings(record=True) as w:\n             warn_on_generator_with_return_value(None, top_level_return_none)\n-            self.assertEqual(len(w), 0)\n+            assert len(w) == 0\n         with warnings.catch_warnings(record=True) as w:\n             warn_on_generator_with_return_value(None, f2)\n-            self.assertEqual(len(w), 0)\n+            assert len(w) == 0\n         with warnings.catch_warnings(record=True) as w:\n             warn_on_generator_with_return_value(None, g2)\n-            self.assertEqual(len(w), 0)\n+            assert len(w) == 0\n         with warnings.catch_warnings(record=True) as w:\n             warn_on_generator_with_return_value(None, h2)\n-            self.assertEqual(len(w), 0)\n+            assert len(w) == 0\n         with warnings.catch_warnings(record=True) as w:\n             warn_on_generator_with_return_value(None, i2)\n-            self.assertEqual(len(w), 0)\n+            assert len(w) == 0\n         with warnings.catch_warnings(record=True) as w:\n             warn_on_generator_with_return_value(None, j2)\n-            self.assertEqual(len(w), 0)\n+            assert len(w) == 0\n         with warnings.catch_warnings(record=True) as w:\n             warn_on_generator_with_return_value(None, k2)\n-            self.assertEqual(len(w), 0)\n+            assert len(w) == 0\n         with warnings.catch_warnings(record=True) as w:\n             warn_on_generator_with_return_value(None, l2)\n-            self.assertEqual(len(w), 0)\n+            assert len(w) == 0\n \n     def test_generators_return_none_with_decorator(self):\n         def decorator(func):\n@@ -225,28 +224,28 @@ https://example.org\n \n         with warnings.catch_warnings(record=True) as w:\n             warn_on_generator_with_return_value(None, top_level_return_none)\n-            self.assertEqual(len(w), 0)\n+            assert len(w) == 0\n         with warnings.catch_warnings(record=True) as w:\n             warn_on_generator_with_return_value(None, f3)\n-            self.assertEqual(len(w), 0)\n+            assert len(w) == 0\n         with warnings.catch_warnings(record=True) as w:\n             warn_on_generator_with_return_value(None, g3)\n-            self.assertEqual(len(w), 0)\n+            assert len(w) == 0\n         with warnings.catch_warnings(record=True) as w:\n             warn_on_generator_with_return_value(None, h3)\n-            self.assertEqual(len(w), 0)\n+            assert len(w) == 0\n         with warnings.catch_warnings(record=True) as w:\n             warn_on_generator_with_return_value(None, i3)\n-            self.assertEqual(len(w), 0)\n+            assert len(w) == 0\n         with warnings.catch_warnings(record=True) as w:\n             warn_on_generator_with_return_value(None, j3)\n-            self.assertEqual(len(w), 0)\n+            assert len(w) == 0\n         with warnings.catch_warnings(record=True) as w:\n             warn_on_generator_with_return_value(None, k3)\n-            self.assertEqual(len(w), 0)\n+            assert len(w) == 0\n         with warnings.catch_warnings(record=True) as w:\n             warn_on_generator_with_return_value(None, l3)\n-            self.assertEqual(len(w), 0)\n+            assert len(w) == 0\n \n     @mock.patch(\n         \"scrapy.utils.misc.is_generator_with_return_value\", new=_indentation_error\n@@ -254,8 +253,8 @@ https://example.org\n     def test_indentation_error(self):\n         with warnings.catch_warnings(record=True) as w:\n             warn_on_generator_with_return_value(None, top_level_return_none)\n-            self.assertEqual(len(w), 1)\n-            self.assertIn(\"Unable to determine\", str(w[0].message))\n+            assert len(w) == 1\n+            assert \"Unable to determine\" in str(w[0].message)\n \n     def test_partial(self):\n         def cb(arg1, arg2):\n\n@@ -2,7 +2,6 @@ import contextlib\n import os\n import shutil\n import tempfile\n-import unittest\n import warnings\n from pathlib import Path\n \n@@ -25,21 +24,21 @@ def inside_a_project():\n         shutil.rmtree(project_dir)\n \n \n-class ProjectUtilsTest(unittest.TestCase):\n+class TestProjectUtils:\n     def test_data_path_outside_project(self):\n-        self.assertEqual(str(Path(\".scrapy\", \"somepath\")), data_path(\"somepath\"))\n+        assert str(Path(\".scrapy\", \"somepath\")) == data_path(\"somepath\")\n         abspath = str(Path(os.path.sep, \"absolute\", \"path\"))\n-        self.assertEqual(abspath, data_path(abspath))\n+        assert abspath == data_path(abspath)\n \n     def test_data_path_inside_project(self):\n         with inside_a_project() as proj_path:\n             expected = Path(proj_path, \".scrapy\", \"somepath\")\n-            self.assertEqual(expected.resolve(), Path(data_path(\"somepath\")).resolve())\n+            assert expected.resolve() == Path(data_path(\"somepath\")).resolve()\n             abspath = str(Path(os.path.sep, \"absolute\", \"path\").resolve())\n-            self.assertEqual(abspath, data_path(abspath))\n+            assert abspath == data_path(abspath)\n \n \n-class GetProjectSettingsTestCase(unittest.TestCase):\n+class TestGetProjectSettings:\n     def test_valid_envvar(self):\n         value = \"tests.test_cmdline.settings\"\n         envvars = {\n\n@@ -21,18 +21,18 @@ from scrapy.utils.python import (\n )\n \n \n-class MutableChainTest(unittest.TestCase):\n+class TestMutableChain:\n     def test_mutablechain(self):\n         m = MutableChain(range(2), [2, 3], (4, 5))\n         m.extend(range(6, 7))\n         m.extend([7, 8])\n         m.extend([9, 10], (11, 12))\n-        self.assertEqual(next(m), 0)\n-        self.assertEqual(m.__next__(), 1)\n-        self.assertEqual(list(m), list(range(2, 13)))\n+        assert next(m) == 0\n+        assert m.__next__() == 1\n+        assert list(m) == list(range(2, 13))\n \n \n-class MutableAsyncChainTest(unittest.TestCase):\n+class TestMutableAsyncChain(unittest.TestCase):\n     @staticmethod\n     async def g1():\n         for i in range(3):\n@@ -62,9 +62,9 @@ class MutableAsyncChainTest(unittest.TestCase):\n         m.extend(self.g2())\n         m.extend(self.g3())\n \n-        self.assertEqual(await m.__anext__(), 0)\n+        assert await m.__anext__() == 0\n         results = await collect_asyncgen(m)\n-        self.assertEqual(results, list(range(1, 10)))\n+        assert results == list(range(1, 10))\n \n     @deferred_f_from_coro_f\n     async def test_mutableasyncchain_exc(self):\n@@ -73,46 +73,46 @@ class MutableAsyncChainTest(unittest.TestCase):\n         m.extend(self.g3())\n \n         results = await collect_asyncgen(aiter_errback(m, lambda _: None))\n-        self.assertEqual(results, list(range(5)))\n+        assert results == list(range(5))\n \n \n-class ToUnicodeTest(unittest.TestCase):\n+class TestToUnicode:\n     def test_converting_an_utf8_encoded_string_to_unicode(self):\n-        self.assertEqual(to_unicode(b\"lel\\xc3\\xb1e\"), \"lel\\xf1e\")\n+        assert to_unicode(b\"lel\\xc3\\xb1e\") == \"lel\\xf1e\"\n \n     def test_converting_a_latin_1_encoded_string_to_unicode(self):\n-        self.assertEqual(to_unicode(b\"lel\\xf1e\", \"latin-1\"), \"lel\\xf1e\")\n+        assert to_unicode(b\"lel\\xf1e\", \"latin-1\") == \"lel\\xf1e\"\n \n     def test_converting_a_unicode_to_unicode_should_return_the_same_object(self):\n-        self.assertEqual(to_unicode(\"\\xf1e\\xf1e\\xf1e\"), \"\\xf1e\\xf1e\\xf1e\")\n+        assert to_unicode(\"\\xf1e\\xf1e\\xf1e\") == \"\\xf1e\\xf1e\\xf1e\"\n \n-    def test_converting_a_strange_object_should_raise_TypeError(self):\n+    def test_converting_a_strange_object_should_raise_type_error(self):\n         with pytest.raises(TypeError):\n             to_unicode(423)\n \n     def test_errors_argument(self):\n-        self.assertEqual(to_unicode(b\"a\\xedb\", \"utf-8\", errors=\"replace\"), \"a\\ufffdb\")\n+        assert to_unicode(b\"a\\xedb\", \"utf-8\", errors=\"replace\") == \"a\\ufffdb\"\n \n \n-class ToBytesTest(unittest.TestCase):\n+class TestToBytes:\n     def test_converting_a_unicode_object_to_an_utf_8_encoded_string(self):\n-        self.assertEqual(to_bytes(\"\\xa3 49\"), b\"\\xc2\\xa3 49\")\n+        assert to_bytes(\"\\xa3 49\") == b\"\\xc2\\xa3 49\"\n \n     def test_converting_a_unicode_object_to_a_latin_1_encoded_string(self):\n-        self.assertEqual(to_bytes(\"\\xa3 49\", \"latin-1\"), b\"\\xa3 49\")\n+        assert to_bytes(\"\\xa3 49\", \"latin-1\") == b\"\\xa3 49\"\n \n     def test_converting_a_regular_bytes_to_bytes_should_return_the_same_object(self):\n-        self.assertEqual(to_bytes(b\"lel\\xf1e\"), b\"lel\\xf1e\")\n+        assert to_bytes(b\"lel\\xf1e\") == b\"lel\\xf1e\"\n \n-    def test_converting_a_strange_object_should_raise_TypeError(self):\n+    def test_converting_a_strange_object_should_raise_type_error(self):\n         with pytest.raises(TypeError):\n             to_bytes(pytest)\n \n     def test_errors_argument(self):\n-        self.assertEqual(to_bytes(\"a\\ufffdb\", \"latin-1\", errors=\"replace\"), b\"a?b\")\n+        assert to_bytes(\"a\\ufffdb\", \"latin-1\", errors=\"replace\") == b\"a?b\"\n \n \n-class MemoizedMethodTest(unittest.TestCase):\n+class TestMemoizedMethod:\n     def test_memoizemethod_noargs(self):\n         class A:\n             @memoizemethod_noargs\n@@ -130,7 +130,7 @@ class MemoizedMethodTest(unittest.TestCase):\n         assert one is not three\n \n \n-class BinaryIsTextTest(unittest.TestCase):\n+class TestBinaryIsText:\n     def test_binaryistext(self):\n         assert binary_is_text(b\"hello\")\n \n@@ -144,7 +144,7 @@ class BinaryIsTextTest(unittest.TestCase):\n         assert not binary_is_text(b\"\\x02\\xa3\")\n \n \n-class UtilsPythonTestCase(unittest.TestCase):\n+class TestUtilsPython:\n     @pytest.mark.filterwarnings(\"ignore::scrapy.exceptions.ScrapyDeprecationWarning\")\n     def test_equal_attributes(self):\n         class Obj:\n@@ -153,31 +153,31 @@ class UtilsPythonTestCase(unittest.TestCase):\n         a = Obj()\n         b = Obj()\n         # no attributes given return False\n-        self.assertFalse(equal_attributes(a, b, []))\n+        assert not equal_attributes(a, b, [])\n         # nonexistent attributes\n-        self.assertFalse(equal_attributes(a, b, [\"x\", \"y\"]))\n+        assert not equal_attributes(a, b, [\"x\", \"y\"])\n \n         a.x = 1\n         b.x = 1\n         # equal attribute\n-        self.assertTrue(equal_attributes(a, b, [\"x\"]))\n+        assert equal_attributes(a, b, [\"x\"])\n \n         b.y = 2\n         # obj1 has no attribute y\n-        self.assertFalse(equal_attributes(a, b, [\"x\", \"y\"]))\n+        assert not equal_attributes(a, b, [\"x\", \"y\"])\n \n         a.y = 2\n         # equal attributes\n-        self.assertTrue(equal_attributes(a, b, [\"x\", \"y\"]))\n+        assert equal_attributes(a, b, [\"x\", \"y\"])\n \n         a.y = 1\n         # different attributes\n-        self.assertFalse(equal_attributes(a, b, [\"x\", \"y\"]))\n+        assert not equal_attributes(a, b, [\"x\", \"y\"])\n \n         # test callable\n         a.meta = {}\n         b.meta = {}\n-        self.assertTrue(equal_attributes(a, b, [\"meta\"]))\n+        assert equal_attributes(a, b, [\"meta\"])\n \n         # compare ['meta']['a']\n         a.meta[\"z\"] = 1\n@@ -189,10 +189,10 @@ class UtilsPythonTestCase(unittest.TestCase):\n         def compare_z(obj):\n             return get_z(get_meta(obj))\n \n-        self.assertTrue(equal_attributes(a, b, [compare_z, \"x\"]))\n+        assert equal_attributes(a, b, [compare_z, \"x\"])\n         # fail z equality\n         a.meta[\"z\"] = 2\n-        self.assertFalse(equal_attributes(a, b, [compare_z, \"x\"]))\n+        assert not equal_attributes(a, b, [compare_z, \"x\"])\n \n     def test_get_func_args(self):\n         def f1(a, b, c):\n@@ -221,36 +221,35 @@ class UtilsPythonTestCase(unittest.TestCase):\n         partial_f2 = functools.partial(f1, b=None)\n         partial_f3 = functools.partial(partial_f2, None)\n \n-        self.assertEqual(get_func_args(f1), [\"a\", \"b\", \"c\"])\n-        self.assertEqual(get_func_args(f2), [\"a\", \"b\", \"c\"])\n-        self.assertEqual(get_func_args(f3), [\"a\", \"b\", \"c\"])\n-        self.assertEqual(get_func_args(A), [\"a\", \"b\", \"c\"])\n-        self.assertEqual(get_func_args(a.method), [\"a\", \"b\", \"c\"])\n-        self.assertEqual(get_func_args(partial_f1), [\"b\", \"c\"])\n-        self.assertEqual(get_func_args(partial_f2), [\"a\", \"c\"])\n-        self.assertEqual(get_func_args(partial_f3), [\"c\"])\n-        self.assertEqual(get_func_args(cal), [\"a\", \"b\", \"c\"])\n-        self.assertEqual(get_func_args(object), [])\n-        self.assertEqual(get_func_args(str.split, stripself=True), [\"sep\", \"maxsplit\"])\n-        self.assertEqual(get_func_args(\" \".join, stripself=True), [\"iterable\"])\n+        assert get_func_args(f1) == [\"a\", \"b\", \"c\"]\n+        assert get_func_args(f2) == [\"a\", \"b\", \"c\"]\n+        assert get_func_args(f3) == [\"a\", \"b\", \"c\"]\n+        assert get_func_args(A) == [\"a\", \"b\", \"c\"]\n+        assert get_func_args(a.method) == [\"a\", \"b\", \"c\"]\n+        assert get_func_args(partial_f1) == [\"b\", \"c\"]\n+        assert get_func_args(partial_f2) == [\"a\", \"c\"]\n+        assert get_func_args(partial_f3) == [\"c\"]\n+        assert get_func_args(cal) == [\"a\", \"b\", \"c\"]\n+        assert get_func_args(object) == []\n+        assert get_func_args(str.split, stripself=True) == [\"sep\", \"maxsplit\"]\n+        assert get_func_args(\" \".join, stripself=True) == [\"iterable\"]\n \n         if sys.version_info >= (3, 13) or platform.python_implementation() == \"PyPy\":\n             # the correct and correctly extracted signature\n-            self.assertEqual(\n-                get_func_args(operator.itemgetter(2), stripself=True), [\"obj\"]\n-            )\n+            assert get_func_args(operator.itemgetter(2), stripself=True) == [\"obj\"]\n         elif platform.python_implementation() == \"CPython\":\n             # [\"args\", \"kwargs\"] is a correct result for the pre-3.13 incorrect function signature\n             # [] is an incorrect result on even older CPython (https://github.com/python/cpython/issues/86951)\n-            self.assertIn(\n-                get_func_args(operator.itemgetter(2), stripself=True),\n-                [[], [\"args\", \"kwargs\"]],\n-            )\n+            assert get_func_args(operator.itemgetter(2), stripself=True) in [\n+                [],\n+                [\"args\", \"kwargs\"],\n+            ]\n \n     def test_without_none_values(self):\n-        self.assertEqual(without_none_values([1, None, 3, 4]), [1, 3, 4])\n-        self.assertEqual(without_none_values((1, None, 3, 4)), (1, 3, 4))\n-        self.assertEqual(\n-            without_none_values({\"one\": 1, \"none\": None, \"three\": 3, \"four\": 4}),\n-            {\"one\": 1, \"three\": 3, \"four\": 4},\n-        )\n+        assert without_none_values([1, None, 3, 4]) == [1, 3, 4]\n+        assert without_none_values((1, None, 3, 4)) == (1, 3, 4)\n+        assert without_none_values({\"one\": 1, \"none\": None, \"three\": 3, \"four\": 4}) == {\n+            \"one\": 1,\n+            \"three\": 3,\n+            \"four\": 4,\n+        }\n\n@@ -1,7 +1,6 @@\n from __future__ import annotations\n \n import json\n-import unittest\n import warnings\n from hashlib import sha1\n from weakref import WeakKeyDictionary\n@@ -21,23 +20,23 @@ from scrapy.utils.request import (\n from scrapy.utils.test import get_crawler\n \n \n-class UtilsRequestTest(unittest.TestCase):\n+class TestUtilsRequest:\n     @pytest.mark.filterwarnings(\"ignore::scrapy.exceptions.ScrapyDeprecationWarning\")\n     def test_request_authenticate(self):\n         r = Request(\"http://www.example.com\")\n         request_authenticate(r, \"someuser\", \"somepass\")\n-        self.assertEqual(r.headers[\"Authorization\"], b\"Basic c29tZXVzZXI6c29tZXBhc3M=\")\n+        assert r.headers[\"Authorization\"] == b\"Basic c29tZXVzZXI6c29tZXBhc3M=\"\n \n     def test_request_httprepr(self):\n         r1 = Request(\"http://www.example.com\")\n-        self.assertEqual(\n-            request_httprepr(r1), b\"GET / HTTP/1.1\\r\\nHost: www.example.com\\r\\n\\r\\n\"\n+        assert (\n+            request_httprepr(r1) == b\"GET / HTTP/1.1\\r\\nHost: www.example.com\\r\\n\\r\\n\"\n         )\n \n         r1 = Request(\"http://www.example.com/some/page.html?arg=1\")\n-        self.assertEqual(\n-            request_httprepr(r1),\n-            b\"GET /some/page.html?arg=1 HTTP/1.1\\r\\nHost: www.example.com\\r\\n\\r\\n\",\n+        assert (\n+            request_httprepr(r1)\n+            == b\"GET /some/page.html?arg=1 HTTP/1.1\\r\\nHost: www.example.com\\r\\n\\r\\n\"\n         )\n \n         r1 = Request(\n@@ -46,9 +45,9 @@ class UtilsRequestTest(unittest.TestCase):\n             headers={\"Content-type\": b\"text/html\"},\n             body=b\"Some body\",\n         )\n-        self.assertEqual(\n-            request_httprepr(r1),\n-            b\"POST / HTTP/1.1\\r\\nHost: www.example.com\\r\\nContent-Type: text/html\\r\\n\\r\\nSome body\",\n+        assert (\n+            request_httprepr(r1)\n+            == b\"POST / HTTP/1.1\\r\\nHost: www.example.com\\r\\nContent-Type: text/html\\r\\n\\r\\nSome body\"\n         )\n \n     def test_request_httprepr_for_non_http_request(self):\n@@ -57,7 +56,7 @@ class UtilsRequestTest(unittest.TestCase):\n         request_httprepr(Request(\"ftp://localhost/tmp/foo.txt\"))\n \n \n-class FingerprintTest(unittest.TestCase):\n+class TestFingerprint:\n     maxDiff = None\n \n     function: staticmethod = staticmethod(fingerprint)\n@@ -147,23 +146,23 @@ class FingerprintTest(unittest.TestCase):\n     def test_query_string_key_order(self):\n         r1 = Request(\"http://www.example.com/query?id=111&cat=222\")\n         r2 = Request(\"http://www.example.com/query?cat=222&id=111\")\n-        self.assertEqual(self.function(r1), self.function(r1))\n-        self.assertEqual(self.function(r1), self.function(r2))\n+        assert self.function(r1) == self.function(r1)\n+        assert self.function(r1) == self.function(r2)\n \n     def test_query_string_key_without_value(self):\n         r1 = Request(\"http://www.example.com/hnnoticiaj1.aspx?78132,199\")\n         r2 = Request(\"http://www.example.com/hnnoticiaj1.aspx?78160,199\")\n-        self.assertNotEqual(self.function(r1), self.function(r2))\n+        assert self.function(r1) != self.function(r2)\n \n     def test_caching(self):\n         r1 = Request(\"http://www.example.com/hnnoticiaj1.aspx?78160,199\")\n-        self.assertEqual(self.function(r1), self.cache[r1][self.default_cache_key])\n+        assert self.function(r1) == self.cache[r1][self.default_cache_key]\n \n     def test_header(self):\n         r1 = Request(\"http://www.example.com/members/offers.html\")\n         r2 = Request(\"http://www.example.com/members/offers.html\")\n         r2.headers[\"SESSIONID\"] = b\"somehash\"\n-        self.assertEqual(self.function(r1), self.function(r2))\n+        assert self.function(r1) == self.function(r2)\n \n     def test_headers(self):\n         r1 = Request(\"http://www.example.com/\")\n@@ -173,36 +172,35 @@ class FingerprintTest(unittest.TestCase):\n         r3.headers[\"Accept-Language\"] = b\"en\"\n         r3.headers[\"SESSIONID\"] = b\"somehash\"\n \n-        self.assertEqual(self.function(r1), self.function(r2), self.function(r3))\n+        assert self.function(r1) == self.function(r2) == self.function(r3)\n \n-        self.assertEqual(\n-            self.function(r1), self.function(r1, include_headers=[\"Accept-Language\"])\n+        assert self.function(r1) == self.function(\n+            r1, include_headers=[\"Accept-Language\"]\n         )\n \n-        self.assertNotEqual(\n-            self.function(r1), self.function(r2, include_headers=[\"Accept-Language\"])\n+        assert self.function(r1) != self.function(\n+            r2, include_headers=[\"Accept-Language\"]\n         )\n \n-        self.assertEqual(\n-            self.function(r3, include_headers=[\"accept-language\", \"sessionid\"]),\n-            self.function(r3, include_headers=[\"SESSIONID\", \"Accept-Language\"]),\n-        )\n+        assert self.function(\n+            r3, include_headers=[\"accept-language\", \"sessionid\"]\n+        ) == self.function(r3, include_headers=[\"SESSIONID\", \"Accept-Language\"])\n \n     def test_fragment(self):\n         r1 = Request(\"http://www.example.com/test.html\")\n         r2 = Request(\"http://www.example.com/test.html#fragment\")\n-        self.assertEqual(self.function(r1), self.function(r2))\n-        self.assertEqual(self.function(r1), self.function(r1, keep_fragments=True))\n-        self.assertNotEqual(self.function(r2), self.function(r2, keep_fragments=True))\n-        self.assertNotEqual(self.function(r1), self.function(r2, keep_fragments=True))\n+        assert self.function(r1) == self.function(r2)\n+        assert self.function(r1) == self.function(r1, keep_fragments=True)\n+        assert self.function(r2) != self.function(r2, keep_fragments=True)\n+        assert self.function(r1) != self.function(r2, keep_fragments=True)\n \n     def test_method_and_body(self):\n         r1 = Request(\"http://www.example.com\")\n         r2 = Request(\"http://www.example.com\", method=\"POST\")\n         r3 = Request(\"http://www.example.com\", method=\"POST\", body=b\"request body\")\n \n-        self.assertNotEqual(self.function(r1), self.function(r2))\n-        self.assertNotEqual(self.function(r2), self.function(r3))\n+        assert self.function(r1) != self.function(r2)\n+        assert self.function(r2) != self.function(r3)\n \n     def test_request_replace(self):\n         # cached fingerprint must be cleared on request copy\n@@ -210,7 +208,7 @@ class FingerprintTest(unittest.TestCase):\n         fp1 = self.function(r1)\n         r2 = r1.replace(url=\"http://www.example.com/other\")\n         fp2 = self.function(r2)\n-        self.assertNotEqual(fp1, fp2)\n+        assert fp1 != fp2\n \n     def test_part_separation(self):\n         # An old implementation used to serialize request data in a way that\n@@ -219,7 +217,7 @@ class FingerprintTest(unittest.TestCase):\n         fp1 = self.function(r1)\n         r2 = Request(\"http://www.example.com/f\", body=b\"oo\")\n         fp2 = self.function(r2)\n-        self.assertNotEqual(fp1, fp2)\n+        assert fp1 != fp2\n \n     def test_hashes(self):\n         \"\"\"Test hardcoded hashes, to make sure future changes to not introduce\n@@ -228,7 +226,7 @@ class FingerprintTest(unittest.TestCase):\n             self.function(request, **kwargs) for request, _, kwargs in self.known_hashes\n         ]\n         expected = [_fingerprint for _, _fingerprint, _ in self.known_hashes]\n-        self.assertEqual(actual, expected)\n+        assert actual == expected\n \n \n REQUEST_OBJECTS_TO_TEST = (\n@@ -260,13 +258,12 @@ REQUEST_OBJECTS_TO_TEST = (\n )\n \n \n-class RequestFingerprinterTestCase(unittest.TestCase):\n+class TestRequestFingerprinter:\n     def test_default_implementation(self):\n         crawler = get_crawler()\n         request = Request(\"https://example.com\")\n-        self.assertEqual(\n-            crawler.request_fingerprinter.fingerprint(request),\n-            fingerprint(request),\n+        assert crawler.request_fingerprinter.fingerprint(request) == fingerprint(\n+            request\n         )\n \n     def test_deprecated_implementation(self):\n@@ -276,14 +273,13 @@ class RequestFingerprinterTestCase(unittest.TestCase):\n         with warnings.catch_warnings(record=True) as logged_warnings:\n             crawler = get_crawler(settings_dict=settings)\n         request = Request(\"https://example.com\")\n-        self.assertEqual(\n-            crawler.request_fingerprinter.fingerprint(request),\n-            fingerprint(request),\n+        assert crawler.request_fingerprinter.fingerprint(request) == fingerprint(\n+            request\n         )\n-        self.assertTrue(logged_warnings)\n+        assert logged_warnings\n \n \n-class CustomRequestFingerprinterTestCase(unittest.TestCase):\n+class TestCustomRequestFingerprinter:\n     def test_include_headers(self):\n         class RequestFingerprinter:\n             def fingerprint(self, request):\n@@ -298,7 +294,7 @@ class CustomRequestFingerprinterTestCase(unittest.TestCase):\n         fp1 = crawler.request_fingerprinter.fingerprint(r1)\n         r2 = Request(\"http://www.example.com\", headers={\"X-ID\": \"2\"})\n         fp2 = crawler.request_fingerprinter.fingerprint(r2)\n-        self.assertNotEqual(fp1, fp2)\n+        assert fp1 != fp2\n \n     def test_dont_canonicalize(self):\n         class RequestFingerprinter:\n@@ -320,7 +316,7 @@ class CustomRequestFingerprinterTestCase(unittest.TestCase):\n         fp1 = crawler.request_fingerprinter.fingerprint(r1)\n         r2 = Request(\"http://www.example.com?a=2&a=1\")\n         fp2 = crawler.request_fingerprinter.fingerprint(r2)\n-        self.assertNotEqual(fp1, fp2)\n+        assert fp1 != fp2\n \n     def test_meta(self):\n         class RequestFingerprinter:\n@@ -342,10 +338,10 @@ class CustomRequestFingerprinterTestCase(unittest.TestCase):\n         fp3 = crawler.request_fingerprinter.fingerprint(r3)\n         r4 = Request(\"http://www.example.com\", meta={\"fingerprint\": \"b\"})\n         fp4 = crawler.request_fingerprinter.fingerprint(r4)\n-        self.assertNotEqual(fp1, fp2)\n-        self.assertNotEqual(fp1, fp4)\n-        self.assertNotEqual(fp2, fp4)\n-        self.assertEqual(fp2, fp3)\n+        assert fp1 != fp2\n+        assert fp1 != fp4\n+        assert fp2 != fp4\n+        assert fp2 == fp3\n \n     def test_from_crawler(self):\n         class RequestFingerprinter:\n@@ -367,7 +363,7 @@ class CustomRequestFingerprinterTestCase(unittest.TestCase):\n \n         request = Request(\"http://www.example.com\")\n         fingerprint = crawler.request_fingerprinter.fingerprint(request)\n-        self.assertEqual(fingerprint, settings[\"FINGERPRINT\"])\n+        assert fingerprint == settings[\"FINGERPRINT\"]\n \n     def test_from_settings(self):\n         class RequestFingerprinter:\n@@ -391,7 +387,7 @@ class CustomRequestFingerprinterTestCase(unittest.TestCase):\n \n         request = Request(\"http://www.example.com\")\n         fingerprint = crawler.request_fingerprinter.fingerprint(request)\n-        self.assertEqual(fingerprint, settings[\"FINGERPRINT\"])\n+        assert fingerprint == settings[\"FINGERPRINT\"]\n \n     def test_from_crawler_and_settings(self):\n         class RequestFingerprinter:\n@@ -418,13 +414,13 @@ class CustomRequestFingerprinterTestCase(unittest.TestCase):\n \n         request = Request(\"http://www.example.com\")\n         fingerprint = crawler.request_fingerprinter.fingerprint(request)\n-        self.assertEqual(fingerprint, settings[\"FINGERPRINT\"])\n+        assert fingerprint == settings[\"FINGERPRINT\"]\n \n \n-class RequestToCurlTest(unittest.TestCase):\n+class TestRequestToCurl:\n     def _test_request(self, request_object, expected_curl_command):\n         curl_command = request_to_curl(request_object)\n-        self.assertEqual(curl_command, expected_curl_command)\n+        assert curl_command == expected_curl_command\n \n     def test_get(self):\n         request_object = Request(\"https://www.example.com\")\n\n@@ -1,4 +1,3 @@\n-import unittest\n from pathlib import Path\n from time import process_time\n from urllib.parse import urlparse\n@@ -16,7 +15,7 @@ from scrapy.utils.response import (\n )\n \n \n-class ResponseUtilsTest(unittest.TestCase):\n+class TestResponseUtils:\n     dummy_response = TextResponse(url=\"http://example.org/\", body=b\"dummy_response\")\n \n     def test_open_in_browser(self):\n@@ -28,7 +27,7 @@ class ResponseUtilsTest(unittest.TestCase):\n             if not path or not Path(path).exists():\n                 path = burl.replace(\"file://\", \"\")\n             bbody = Path(path).read_bytes()\n-            self.assertIn(b'<base href=\"' + to_bytes(url) + b'\">', bbody)\n+            assert b'<base href=\"' + to_bytes(url) + b'\">' in bbody\n             return True\n \n         response = HtmlResponse(url, body=body)\n@@ -68,9 +67,9 @@ class ResponseUtilsTest(unittest.TestCase):\n     </script>\n         \"\"\",\n         )\n-        self.assertEqual(get_meta_refresh(r1), (5.0, \"http://example.org/newpage\"))\n-        self.assertEqual(get_meta_refresh(r2), (None, None))\n-        self.assertEqual(get_meta_refresh(r3), (None, None))\n+        assert get_meta_refresh(r1) == (5.0, \"http://example.org/newpage\")\n+        assert get_meta_refresh(r2) == (None, None)\n+        assert get_meta_refresh(r3) == (None, None)\n \n     def test_get_base_url(self):\n         resp = HtmlResponse(\n@@ -81,19 +80,19 @@ class ResponseUtilsTest(unittest.TestCase):\n         <body>blahablsdfsal&amp;</body>\n         </html>\"\"\",\n         )\n-        self.assertEqual(get_base_url(resp), \"http://www.example.com/img/\")\n+        assert get_base_url(resp) == \"http://www.example.com/img/\"\n \n         resp2 = HtmlResponse(\n             \"http://www.example.com\",\n             body=b\"\"\"\n         <html><body>blahablsdfsal&amp;</body></html>\"\"\",\n         )\n-        self.assertEqual(get_base_url(resp2), \"http://www.example.com\")\n+        assert get_base_url(resp2) == \"http://www.example.com\"\n \n     def test_response_status_message(self):\n-        self.assertEqual(response_status_message(200), \"200 OK\")\n-        self.assertEqual(response_status_message(404), \"404 Not Found\")\n-        self.assertEqual(response_status_message(573), \"573 Unknown Status\")\n+        assert response_status_message(200) == \"200 OK\"\n+        assert response_status_message(404) == \"404 Not Found\"\n+        assert response_status_message(573) == \"573 Unknown Status\"\n \n     def test_inject_base_url(self):\n         url = \"http://www.example.com\"\n@@ -103,7 +102,7 @@ class ResponseUtilsTest(unittest.TestCase):\n             if not path or not Path(path).exists():\n                 path = burl.replace(\"file://\", \"\")\n             bbody = Path(path).read_bytes()\n-            self.assertEqual(bbody.count(b'<base href=\"' + to_bytes(url) + b'\">'), 1)\n+            assert bbody.count(b'<base href=\"' + to_bytes(url) + b'\">') == 1\n             return True\n \n         r1 = HtmlResponse(\n@@ -185,7 +184,7 @@ class ResponseUtilsTest(unittest.TestCase):\n         open_in_browser(response, lambda url: True)\n \n         end_time = process_time()\n-        self.assertLess(end_time - start_time, MAX_CPU_TIME)\n+        assert end_time - start_time < MAX_CPU_TIME\n \n     def test_open_in_browser_redos_head(self):\n         MAX_CPU_TIME = 0.02\n@@ -202,7 +201,7 @@ class ResponseUtilsTest(unittest.TestCase):\n         open_in_browser(response, lambda url: True)\n \n         end_time = process_time()\n-        self.assertLess(end_time - start_time, MAX_CPU_TIME)\n+        assert end_time - start_time < MAX_CPU_TIME\n \n \n @pytest.mark.parametrize(\n\n@@ -1,7 +1,6 @@\n import dataclasses\n import datetime\n import json\n-import unittest\n from decimal import Decimal\n \n import attr\n@@ -11,8 +10,8 @@ from scrapy.http import Request, Response\n from scrapy.utils.serialize import ScrapyJSONEncoder\n \n \n-class JsonEncoderTestCase(unittest.TestCase):\n-    def setUp(self):\n+class TestJsonEncoder:\n+    def setup_method(self):\n         self.encoder = ScrapyJSONEncoder(sort_keys=True)\n \n     def test_encode_decode(self):\n@@ -39,24 +38,22 @@ class JsonEncoderTestCase(unittest.TestCase):\n             (s, ss),\n             (dt_set, dt_sets),\n         ]:\n-            self.assertEqual(\n-                self.encoder.encode(input), json.dumps(output, sort_keys=True)\n-            )\n+            assert self.encoder.encode(input) == json.dumps(output, sort_keys=True)\n \n     def test_encode_deferred(self):\n-        self.assertIn(\"Deferred\", self.encoder.encode(defer.Deferred()))\n+        assert \"Deferred\" in self.encoder.encode(defer.Deferred())\n \n     def test_encode_request(self):\n         r = Request(\"http://www.example.com/lala\")\n         rs = self.encoder.encode(r)\n-        self.assertIn(r.method, rs)\n-        self.assertIn(r.url, rs)\n+        assert r.method in rs\n+        assert r.url in rs\n \n     def test_encode_response(self):\n         r = Response(\"http://www.example.com/lala\")\n         rs = self.encoder.encode(r)\n-        self.assertIn(r.url, rs)\n-        self.assertIn(str(r.status), rs)\n+        assert r.url in rs\n+        assert str(r.status) in rs\n \n     def test_encode_dataclass_item(self) -> None:\n         @dataclasses.dataclass\n@@ -67,9 +64,7 @@ class JsonEncoderTestCase(unittest.TestCase):\n \n         item = TestDataClass(name=\"Product\", url=\"http://product.org\", price=1)\n         encoded = self.encoder.encode(item)\n-        self.assertEqual(\n-            encoded, '{\"name\": \"Product\", \"price\": 1, \"url\": \"http://product.org\"}'\n-        )\n+        assert encoded == '{\"name\": \"Product\", \"price\": 1, \"url\": \"http://product.org\"}'\n \n     def test_encode_attrs_item(self):\n         @attr.s\n@@ -80,6 +75,4 @@ class JsonEncoderTestCase(unittest.TestCase):\n \n         item = AttrsItem(name=\"Product\", url=\"http://product.org\", price=1)\n         encoded = self.encoder.encode(item)\n-        self.assertEqual(\n-            encoded, '{\"name\": \"Product\", \"price\": 1, \"url\": \"http://product.org\"}'\n-        )\n+        assert encoded == '{\"name\": \"Product\", \"price\": 1, \"url\": \"http://product.org\"}'\n\n@@ -11,7 +11,7 @@ from scrapy.utils.signal import send_catch_log, send_catch_log_deferred\n from scrapy.utils.test import get_from_asyncio_queue\n \n \n-class SendCatchLogTest(unittest.TestCase):\n+class TestSendCatchLog(unittest.TestCase):\n     @defer.inlineCallbacks\n     def test_send_catch_log(self):\n         test_signal = object()\n@@ -29,13 +29,13 @@ class SendCatchLogTest(unittest.TestCase):\n \n         assert self.error_handler in handlers_called\n         assert self.ok_handler in handlers_called\n-        self.assertEqual(len(log.records), 1)\n+        assert len(log.records) == 1\n         record = log.records[0]\n-        self.assertIn(\"error_handler\", record.getMessage())\n-        self.assertEqual(record.levelname, \"ERROR\")\n-        self.assertEqual(result[0][0], self.error_handler)\n-        self.assertIsInstance(result[0][1], Failure)\n-        self.assertEqual(result[1], (self.ok_handler, \"OK\"))\n+        assert \"error_handler\" in record.getMessage()\n+        assert record.levelname == \"ERROR\"\n+        assert result[0][0] == self.error_handler  # pylint: disable=comparison-with-callable\n+        assert isinstance(result[0][1], Failure)\n+        assert result[1] == (self.ok_handler, \"OK\")\n \n         dispatcher.disconnect(self.error_handler, signal=test_signal)\n         dispatcher.disconnect(self.ok_handler, signal=test_signal)\n@@ -53,7 +53,7 @@ class SendCatchLogTest(unittest.TestCase):\n         return \"OK\"\n \n \n-class SendCatchLogDeferredTest(SendCatchLogTest):\n+class SendCatchLogDeferredTest(TestSendCatchLog):\n     def _get_result(self, signal, *a, **kw):\n         return send_catch_log_deferred(signal, *a, **kw)\n \n@@ -85,7 +85,7 @@ class SendCatchLogDeferredAsyncioTest(SendCatchLogDeferredTest):\n         return await get_from_asyncio_queue(\"OK\")\n \n \n-class SendCatchLogTest2(unittest.TestCase):\n+class TestSendCatchLog2:\n     def test_error_logged_if_deferred_not_supported(self):\n         def test_handler():\n             return defer.Deferred()\n@@ -94,6 +94,6 @@ class SendCatchLogTest2(unittest.TestCase):\n         dispatcher.connect(test_handler, test_signal)\n         with LogCapture() as log:\n             send_catch_log(test_signal)\n-        self.assertEqual(len(log.records), 1)\n-        self.assertIn(\"Cannot return deferreds from signal handler\", str(log))\n+        assert len(log.records) == 1\n+        assert \"Cannot return deferreds from signal handler\" in str(log)\n         dispatcher.disconnect(test_handler, test_signal)\n\n@@ -1,9 +1,7 @@\n-import unittest\n-\n from scrapy.utils.sitemap import Sitemap, sitemap_urls_from_robots\n \n \n-class SitemapTest(unittest.TestCase):\n+class TestSitemap:\n     def test_sitemap(self):\n         s = Sitemap(\n             b\"\"\"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n@@ -23,9 +21,7 @@ class SitemapTest(unittest.TestCase):\n </urlset>\"\"\"\n         )\n         assert s.type == \"urlset\"\n-        self.assertEqual(\n-            list(s),\n-            [\n+        assert list(s) == [\n             {\n                 \"priority\": \"1\",\n                 \"loc\": \"http://www.example.com/\",\n@@ -38,8 +34,7 @@ class SitemapTest(unittest.TestCase):\n                 \"lastmod\": \"2009-08-16\",\n                 \"changefreq\": \"weekly\",\n             },\n-            ],\n-        )\n+        ]\n \n     def test_sitemap_index(self):\n         s = Sitemap(\n@@ -56,9 +51,7 @@ class SitemapTest(unittest.TestCase):\n </sitemapindex>\"\"\"\n         )\n         assert s.type == \"sitemapindex\"\n-        self.assertEqual(\n-            list(s),\n-            [\n+        assert list(s) == [\n             {\n                 \"loc\": \"http://www.example.com/sitemap1.xml.gz\",\n                 \"lastmod\": \"2004-10-01T18:23:17+00:00\",\n@@ -67,8 +60,7 @@ class SitemapTest(unittest.TestCase):\n                 \"loc\": \"http://www.example.com/sitemap2.xml.gz\",\n                 \"lastmod\": \"2005-01-01\",\n             },\n-            ],\n-        )\n+        ]\n \n     def test_sitemap_strip(self):\n         \"\"\"Assert we can deal with trailing spaces inside <loc> tags - we've\n@@ -90,9 +82,7 @@ class SitemapTest(unittest.TestCase):\n </urlset>\n \"\"\"\n         )\n-        self.assertEqual(\n-            list(s),\n-            [\n+        assert list(s) == [\n             {\n                 \"priority\": \"1\",\n                 \"loc\": \"http://www.example.com/\",\n@@ -100,8 +90,7 @@ class SitemapTest(unittest.TestCase):\n                 \"changefreq\": \"daily\",\n             },\n             {\"loc\": \"http://www.example.com/2\", \"lastmod\": \"\"},\n-            ],\n-        )\n+        ]\n \n     def test_sitemap_wrong_ns(self):\n         \"\"\"We have seen sitemaps with wrongs ns. Presumably, Google still works\n@@ -122,9 +111,7 @@ class SitemapTest(unittest.TestCase):\n </urlset>\n \"\"\"\n         )\n-        self.assertEqual(\n-            list(s),\n-            [\n+        assert list(s) == [\n             {\n                 \"priority\": \"1\",\n                 \"loc\": \"http://www.example.com/\",\n@@ -132,8 +119,7 @@ class SitemapTest(unittest.TestCase):\n                 \"changefreq\": \"daily\",\n             },\n             {\"loc\": \"http://www.example.com/2\", \"lastmod\": \"\"},\n-            ],\n-        )\n+        ]\n \n     def test_sitemap_wrong_ns2(self):\n         \"\"\"We have seen sitemaps with wrongs ns. Presumably, Google still works\n@@ -155,9 +141,7 @@ class SitemapTest(unittest.TestCase):\n \"\"\"\n         )\n         assert s.type == \"urlset\"\n-        self.assertEqual(\n-            list(s),\n-            [\n+        assert list(s) == [\n             {\n                 \"priority\": \"1\",\n                 \"loc\": \"http://www.example.com/\",\n@@ -165,8 +149,7 @@ class SitemapTest(unittest.TestCase):\n                 \"changefreq\": \"daily\",\n             },\n             {\"loc\": \"http://www.example.com/2\", \"lastmod\": \"\"},\n-            ],\n-        )\n+        ]\n \n     def test_sitemap_urls_from_robots(self):\n         robots = \"\"\"User-agent: *\n@@ -187,15 +170,14 @@ Sitemap: /sitemap-relative-url.xml\n Disallow: /forum/search/\n Disallow: /forum/active/\n \"\"\"\n-        self.assertEqual(\n-            list(sitemap_urls_from_robots(robots, base_url=\"http://example.com\")),\n-            [\n+        assert list(\n+            sitemap_urls_from_robots(robots, base_url=\"http://example.com\")\n+        ) == [\n             \"http://example.com/sitemap.xml\",\n             \"http://example.com/sitemap-product-index.xml\",\n             \"http://example.com/sitemap-uppercase.xml\",\n             \"http://example.com/sitemap-relative-url.xml\",\n-            ],\n-        )\n+        ]\n \n     def test_sitemap_blanklines(self):\n         \"\"\"Assert we can deal with starting blank lines before <xml> tag\"\"\"\n@@ -224,14 +206,11 @@ Disallow: /forum/active/\n </sitemapindex>\n \"\"\"\n         )\n-        self.assertEqual(\n-            list(s),\n-            [\n+        assert list(s) == [\n             {\"lastmod\": \"2013-07-15\", \"loc\": \"http://www.example.com/sitemap1.xml\"},\n             {\"lastmod\": \"2013-07-15\", \"loc\": \"http://www.example.com/sitemap2.xml\"},\n             {\"lastmod\": \"2013-07-15\", \"loc\": \"http://www.example.com/sitemap3.xml\"},\n-            ],\n-        )\n+        ]\n \n     def test_comment(self):\n         s = Sitemap(\n@@ -245,7 +224,7 @@ Disallow: /forum/active/\n     </urlset>\"\"\"\n         )\n \n-        self.assertEqual(list(s), [{\"loc\": \"http://www.example.com/\"}])\n+        assert list(s) == [{\"loc\": \"http://www.example.com/\"}]\n \n     def test_alternate(self):\n         s = Sitemap(\n@@ -265,9 +244,7 @@ Disallow: /forum/active/\n     </urlset>\"\"\"\n         )\n \n-        self.assertEqual(\n-            list(s),\n-            [\n+        assert list(s) == [\n             {\n                 \"loc\": \"http://www.example.com/english/\",\n                 \"alternate\": [\n@@ -276,8 +253,7 @@ Disallow: /forum/active/\n                     \"http://www.example.com/english/\",\n                 ],\n             }\n-            ],\n-        )\n+        ]\n \n     def test_xml_entity_expansion(self):\n         s = Sitemap(\n@@ -294,4 +270,4 @@ Disallow: /forum/active/\n         \"\"\"\n         )\n \n-        self.assertEqual(list(s), [{\"loc\": \"http://127.0.0.1:8000/\"}])\n+        assert list(s) == [{\"loc\": \"http://127.0.0.1:8000/\"}]\n\n@@ -1,5 +1,3 @@\n-import unittest\n-\n from scrapy import Spider\n from scrapy.http import Request\n from scrapy.item import Item\n@@ -14,19 +12,19 @@ class MySpider2(Spider):\n     name = \"myspider2\"\n \n \n-class UtilsSpidersTestCase(unittest.TestCase):\n+class TestUtilsSpiders:\n     def test_iterate_spider_output(self):\n         i = Item()\n         r = Request(\"http://scrapytest.org\")\n         o = object()\n \n-        self.assertEqual(list(iterate_spider_output(i)), [i])\n-        self.assertEqual(list(iterate_spider_output(r)), [r])\n-        self.assertEqual(list(iterate_spider_output(o)), [o])\n-        self.assertEqual(list(iterate_spider_output([r, i, o])), [r, i, o])\n+        assert list(iterate_spider_output(i)) == [i]\n+        assert list(iterate_spider_output(r)) == [r]\n+        assert list(iterate_spider_output(o)) == [o]\n+        assert list(iterate_spider_output([r, i, o])) == [r, i, o]\n \n     def test_iter_spider_classes(self):\n         import tests.test_utils_spider  # noqa: PLW0406  # pylint: disable=import-self\n \n         it = iter_spider_classes(tests.test_utils_spider)\n-        self.assertEqual(set(it), {MySpider1, MySpider2})\n+        assert set(it) == {MySpider1, MySpider2}\n\n@@ -1,4 +1,3 @@\n-import unittest\n from pathlib import Path\n from shutil import rmtree\n from tempfile import mkdtemp\n@@ -6,11 +5,11 @@ from tempfile import mkdtemp\n from scrapy.utils.template import render_templatefile\n \n \n-class UtilsRenderTemplateFileTestCase(unittest.TestCase):\n-    def setUp(self):\n+class TestUtilsRenderTemplateFile:\n+    def setup_method(self):\n         self.tmp_path = mkdtemp()\n \n-    def tearDown(self):\n+    def teardown_method(self):\n         rmtree(self.tmp_path)\n \n     def test_simple_render(self):\n@@ -26,8 +25,8 @@ class UtilsRenderTemplateFileTestCase(unittest.TestCase):\n \n         render_templatefile(template_path, **context)\n \n-        self.assertFalse(template_path.exists())\n-        self.assertEqual(render_path.read_text(encoding=\"utf8\"), rendered)\n+        assert not template_path.exists()\n+        assert render_path.read_text(encoding=\"utf8\") == rendered\n \n         render_path.unlink()\n         assert not render_path.exists()  # Failure of test itself\n\n@@ -1,4 +1,3 @@\n-import unittest\n from io import StringIO\n from time import sleep, time\n from unittest import mock\n@@ -16,48 +15,48 @@ class Bar(trackref.object_ref):\n     pass\n \n \n-class TrackrefTestCase(unittest.TestCase):\n-    def setUp(self):\n+class TestTrackref:\n+    def setup_method(self):\n         trackref.live_refs.clear()\n \n     def test_format_live_refs(self):\n         o1 = Foo()  # noqa: F841\n         o2 = Bar()  # noqa: F841\n         o3 = Foo()  # noqa: F841\n-        self.assertEqual(\n-            trackref.format_live_refs(),\n-            \"\"\"\\\n+        assert (\n+            trackref.format_live_refs()\n+            == \"\"\"\\\n Live References\n \n Bar                                 1   oldest: 0s ago\n Foo                                 2   oldest: 0s ago\n-\"\"\",\n+\"\"\"\n         )\n \n-        self.assertEqual(\n-            trackref.format_live_refs(ignore=Foo),\n-            \"\"\"\\\n+        assert (\n+            trackref.format_live_refs(ignore=Foo)\n+            == \"\"\"\\\n Live References\n \n Bar                                 1   oldest: 0s ago\n-\"\"\",\n+\"\"\"\n         )\n \n     @mock.patch(\"sys.stdout\", new_callable=StringIO)\n     def test_print_live_refs_empty(self, stdout):\n         trackref.print_live_refs()\n-        self.assertEqual(stdout.getvalue(), \"Live References\\n\\n\\n\")\n+        assert stdout.getvalue() == \"Live References\\n\\n\\n\"\n \n     @mock.patch(\"sys.stdout\", new_callable=StringIO)\n     def test_print_live_refs_with_objects(self, stdout):\n         o1 = Foo()  # noqa: F841\n         trackref.print_live_refs()\n-        self.assertEqual(\n-            stdout.getvalue(),\n-            \"\"\"\\\n+        assert (\n+            stdout.getvalue()\n+            == \"\"\"\\\n Live References\n \n-Foo                                 1   oldest: 0s ago\\n\\n\"\"\",\n+Foo                                 1   oldest: 0s ago\\n\\n\"\"\"\n         )\n \n     def test_get_oldest(self):\n@@ -75,15 +74,12 @@ Foo                                 1   oldest: 0s ago\\n\\n\"\"\",\n             raise SkipTest(\"time.time is not precise enough\")\n \n         o3 = Foo()  # noqa: F841\n-        self.assertIs(trackref.get_oldest(\"Foo\"), o1)\n-        self.assertIs(trackref.get_oldest(\"Bar\"), o2)\n-        self.assertIsNone(trackref.get_oldest(\"XXX\"))\n+        assert trackref.get_oldest(\"Foo\") is o1\n+        assert trackref.get_oldest(\"Bar\") is o2\n+        assert trackref.get_oldest(\"XXX\") is None\n \n     def test_iter_all(self):\n         o1 = Foo()\n         o2 = Bar()  # noqa: F841\n         o3 = Foo()\n-        self.assertEqual(\n-            set(trackref.iter_all(\"Foo\")),\n-            {o1, o3},\n-        )\n+        assert set(trackref.iter_all(\"Foo\")) == {o1, o3}\n\n@@ -18,301 +18,240 @@ from scrapy.utils.url import (  # type: ignore[attr-defined]\n )\n \n \n-class UrlUtilsTest(unittest.TestCase):\n+class TestUrlUtils:\n     def test_url_is_from_any_domain(self):\n         url = \"http://www.wheele-bin-art.co.uk/get/product/123\"\n-        self.assertTrue(url_is_from_any_domain(url, [\"wheele-bin-art.co.uk\"]))\n-        self.assertFalse(url_is_from_any_domain(url, [\"art.co.uk\"]))\n+        assert url_is_from_any_domain(url, [\"wheele-bin-art.co.uk\"])\n+        assert not url_is_from_any_domain(url, [\"art.co.uk\"])\n \n         url = \"http://wheele-bin-art.co.uk/get/product/123\"\n-        self.assertTrue(url_is_from_any_domain(url, [\"wheele-bin-art.co.uk\"]))\n-        self.assertFalse(url_is_from_any_domain(url, [\"art.co.uk\"]))\n+        assert url_is_from_any_domain(url, [\"wheele-bin-art.co.uk\"])\n+        assert not url_is_from_any_domain(url, [\"art.co.uk\"])\n \n         url = \"http://www.Wheele-Bin-Art.co.uk/get/product/123\"\n-        self.assertTrue(url_is_from_any_domain(url, [\"wheele-bin-art.CO.UK\"]))\n-        self.assertTrue(url_is_from_any_domain(url, [\"WHEELE-BIN-ART.CO.UK\"]))\n+        assert url_is_from_any_domain(url, [\"wheele-bin-art.CO.UK\"])\n+        assert url_is_from_any_domain(url, [\"WHEELE-BIN-ART.CO.UK\"])\n \n         url = \"http://192.169.0.15:8080/mypage.html\"\n-        self.assertTrue(url_is_from_any_domain(url, [\"192.169.0.15:8080\"]))\n-        self.assertFalse(url_is_from_any_domain(url, [\"192.169.0.15\"]))\n+        assert url_is_from_any_domain(url, [\"192.169.0.15:8080\"])\n+        assert not url_is_from_any_domain(url, [\"192.169.0.15\"])\n \n         url = (\n             \"javascript:%20document.orderform_2581_1190810811.mode.value=%27add%27;%20\"\n             \"javascript:%20document.orderform_2581_1190810811.submit%28%29\"\n         )\n-        self.assertFalse(url_is_from_any_domain(url, [\"testdomain.com\"]))\n-        self.assertFalse(\n-            url_is_from_any_domain(url + \".testdomain.com\", [\"testdomain.com\"])\n-        )\n+        assert not url_is_from_any_domain(url, [\"testdomain.com\"])\n+        assert not url_is_from_any_domain(url + \".testdomain.com\", [\"testdomain.com\"])\n \n     def test_url_is_from_spider(self):\n         spider = Spider(name=\"example.com\")\n-        self.assertTrue(\n-            url_is_from_spider(\"http://www.example.com/some/page.html\", spider)\n-        )\n-        self.assertTrue(\n-            url_is_from_spider(\"http://sub.example.com/some/page.html\", spider)\n-        )\n-        self.assertFalse(\n-            url_is_from_spider(\"http://www.example.org/some/page.html\", spider)\n-        )\n-        self.assertFalse(\n-            url_is_from_spider(\"http://www.example.net/some/page.html\", spider)\n-        )\n+        assert url_is_from_spider(\"http://www.example.com/some/page.html\", spider)\n+        assert url_is_from_spider(\"http://sub.example.com/some/page.html\", spider)\n+        assert not url_is_from_spider(\"http://www.example.org/some/page.html\", spider)\n+        assert not url_is_from_spider(\"http://www.example.net/some/page.html\", spider)\n \n     def test_url_is_from_spider_class_attributes(self):\n         class MySpider(Spider):\n             name = \"example.com\"\n \n-        self.assertTrue(\n-            url_is_from_spider(\"http://www.example.com/some/page.html\", MySpider)\n-        )\n-        self.assertTrue(\n-            url_is_from_spider(\"http://sub.example.com/some/page.html\", MySpider)\n-        )\n-        self.assertFalse(\n-            url_is_from_spider(\"http://www.example.org/some/page.html\", MySpider)\n-        )\n-        self.assertFalse(\n-            url_is_from_spider(\"http://www.example.net/some/page.html\", MySpider)\n-        )\n+        assert url_is_from_spider(\"http://www.example.com/some/page.html\", MySpider)\n+        assert url_is_from_spider(\"http://sub.example.com/some/page.html\", MySpider)\n+        assert not url_is_from_spider(\"http://www.example.org/some/page.html\", MySpider)\n+        assert not url_is_from_spider(\"http://www.example.net/some/page.html\", MySpider)\n \n     def test_url_is_from_spider_with_allowed_domains(self):\n         spider = Spider(\n             name=\"example.com\", allowed_domains=[\"example.org\", \"example.net\"]\n         )\n-        self.assertTrue(\n-            url_is_from_spider(\"http://www.example.com/some/page.html\", spider)\n-        )\n-        self.assertTrue(\n-            url_is_from_spider(\"http://sub.example.com/some/page.html\", spider)\n-        )\n-        self.assertTrue(url_is_from_spider(\"http://example.com/some/page.html\", spider))\n-        self.assertTrue(\n-            url_is_from_spider(\"http://www.example.org/some/page.html\", spider)\n-        )\n-        self.assertTrue(\n-            url_is_from_spider(\"http://www.example.net/some/page.html\", spider)\n-        )\n-        self.assertFalse(\n-            url_is_from_spider(\"http://www.example.us/some/page.html\", spider)\n-        )\n+        assert url_is_from_spider(\"http://www.example.com/some/page.html\", spider)\n+        assert url_is_from_spider(\"http://sub.example.com/some/page.html\", spider)\n+        assert url_is_from_spider(\"http://example.com/some/page.html\", spider)\n+        assert url_is_from_spider(\"http://www.example.org/some/page.html\", spider)\n+        assert url_is_from_spider(\"http://www.example.net/some/page.html\", spider)\n+        assert not url_is_from_spider(\"http://www.example.us/some/page.html\", spider)\n \n         spider = Spider(\n             name=\"example.com\", allowed_domains={\"example.com\", \"example.net\"}\n         )\n-        self.assertTrue(\n-            url_is_from_spider(\"http://www.example.com/some/page.html\", spider)\n-        )\n+        assert url_is_from_spider(\"http://www.example.com/some/page.html\", spider)\n \n         spider = Spider(\n             name=\"example.com\", allowed_domains=(\"example.com\", \"example.net\")\n         )\n-        self.assertTrue(\n-            url_is_from_spider(\"http://www.example.com/some/page.html\", spider)\n-        )\n+        assert url_is_from_spider(\"http://www.example.com/some/page.html\", spider)\n \n     def test_url_is_from_spider_with_allowed_domains_class_attributes(self):\n         class MySpider(Spider):\n             name = \"example.com\"\n             allowed_domains = (\"example.org\", \"example.net\")\n \n-        self.assertTrue(\n-            url_is_from_spider(\"http://www.example.com/some/page.html\", MySpider)\n-        )\n-        self.assertTrue(\n-            url_is_from_spider(\"http://sub.example.com/some/page.html\", MySpider)\n-        )\n-        self.assertTrue(\n-            url_is_from_spider(\"http://example.com/some/page.html\", MySpider)\n-        )\n-        self.assertTrue(\n-            url_is_from_spider(\"http://www.example.org/some/page.html\", MySpider)\n-        )\n-        self.assertTrue(\n-            url_is_from_spider(\"http://www.example.net/some/page.html\", MySpider)\n-        )\n-        self.assertFalse(\n-            url_is_from_spider(\"http://www.example.us/some/page.html\", MySpider)\n-        )\n+        assert url_is_from_spider(\"http://www.example.com/some/page.html\", MySpider)\n+        assert url_is_from_spider(\"http://sub.example.com/some/page.html\", MySpider)\n+        assert url_is_from_spider(\"http://example.com/some/page.html\", MySpider)\n+        assert url_is_from_spider(\"http://www.example.org/some/page.html\", MySpider)\n+        assert url_is_from_spider(\"http://www.example.net/some/page.html\", MySpider)\n+        assert not url_is_from_spider(\"http://www.example.us/some/page.html\", MySpider)\n \n     def test_url_has_any_extension(self):\n         deny_extensions = {\".\" + e for e in arg_to_iter(IGNORED_EXTENSIONS)}\n-        self.assertTrue(\n-            url_has_any_extension(\n+        assert url_has_any_extension(\n             \"http://www.example.com/archive.tar.gz\", deny_extensions\n         )\n+        assert url_has_any_extension(\"http://www.example.com/page.doc\", deny_extensions)\n+        assert url_has_any_extension(\"http://www.example.com/page.pdf\", deny_extensions)\n+        assert not url_has_any_extension(\n+            \"http://www.example.com/page.htm\", deny_extensions\n         )\n-        self.assertTrue(\n-            url_has_any_extension(\"http://www.example.com/page.doc\", deny_extensions)\n-        )\n-        self.assertTrue(\n-            url_has_any_extension(\"http://www.example.com/page.pdf\", deny_extensions)\n-        )\n-        self.assertFalse(\n-            url_has_any_extension(\"http://www.example.com/page.htm\", deny_extensions)\n-        )\n-        self.assertFalse(\n-            url_has_any_extension(\"http://www.example.com/\", deny_extensions)\n-        )\n-        self.assertFalse(\n-            url_has_any_extension(\n+        assert not url_has_any_extension(\"http://www.example.com/\", deny_extensions)\n+        assert not url_has_any_extension(\n             \"http://www.example.com/page.doc.html\", deny_extensions\n         )\n-        )\n \n \n-class AddHttpIfNoScheme(unittest.TestCase):\n+class TestAddHttpIfNoScheme:\n     def test_add_scheme(self):\n-        self.assertEqual(\n-            add_http_if_no_scheme(\"www.example.com\"), \"http://www.example.com\"\n-        )\n+        assert add_http_if_no_scheme(\"www.example.com\") == \"http://www.example.com\"\n \n     def test_without_subdomain(self):\n-        self.assertEqual(add_http_if_no_scheme(\"example.com\"), \"http://example.com\")\n+        assert add_http_if_no_scheme(\"example.com\") == \"http://example.com\"\n \n     def test_path(self):\n-        self.assertEqual(\n-            add_http_if_no_scheme(\"www.example.com/some/page.html\"),\n-            \"http://www.example.com/some/page.html\",\n+        assert (\n+            add_http_if_no_scheme(\"www.example.com/some/page.html\")\n+            == \"http://www.example.com/some/page.html\"\n         )\n \n     def test_port(self):\n-        self.assertEqual(\n-            add_http_if_no_scheme(\"www.example.com:80\"), \"http://www.example.com:80\"\n+        assert (\n+            add_http_if_no_scheme(\"www.example.com:80\") == \"http://www.example.com:80\"\n         )\n \n     def test_fragment(self):\n-        self.assertEqual(\n-            add_http_if_no_scheme(\"www.example.com/some/page#frag\"),\n-            \"http://www.example.com/some/page#frag\",\n+        assert (\n+            add_http_if_no_scheme(\"www.example.com/some/page#frag\")\n+            == \"http://www.example.com/some/page#frag\"\n         )\n \n     def test_query(self):\n-        self.assertEqual(\n-            add_http_if_no_scheme(\"www.example.com/do?a=1&b=2&c=3\"),\n-            \"http://www.example.com/do?a=1&b=2&c=3\",\n+        assert (\n+            add_http_if_no_scheme(\"www.example.com/do?a=1&b=2&c=3\")\n+            == \"http://www.example.com/do?a=1&b=2&c=3\"\n         )\n \n     def test_username_password(self):\n-        self.assertEqual(\n-            add_http_if_no_scheme(\"username:password@www.example.com\"),\n-            \"http://username:password@www.example.com\",\n+        assert (\n+            add_http_if_no_scheme(\"username:password@www.example.com\")\n+            == \"http://username:password@www.example.com\"\n         )\n \n     def test_complete_url(self):\n-        self.assertEqual(\n+        assert (\n             add_http_if_no_scheme(\n                 \"username:password@www.example.com:80/some/page/do?a=1&b=2&c=3#frag\"\n-            ),\n-            \"http://username:password@www.example.com:80/some/page/do?a=1&b=2&c=3#frag\",\n+            )\n+            == \"http://username:password@www.example.com:80/some/page/do?a=1&b=2&c=3#frag\"\n         )\n \n     def test_preserve_http(self):\n-        self.assertEqual(\n-            add_http_if_no_scheme(\"http://www.example.com\"), \"http://www.example.com\"\n+        assert (\n+            add_http_if_no_scheme(\"http://www.example.com\") == \"http://www.example.com\"\n         )\n \n     def test_preserve_http_without_subdomain(self):\n-        self.assertEqual(\n-            add_http_if_no_scheme(\"http://example.com\"), \"http://example.com\"\n-        )\n+        assert add_http_if_no_scheme(\"http://example.com\") == \"http://example.com\"\n \n     def test_preserve_http_path(self):\n-        self.assertEqual(\n-            add_http_if_no_scheme(\"http://www.example.com/some/page.html\"),\n-            \"http://www.example.com/some/page.html\",\n+        assert (\n+            add_http_if_no_scheme(\"http://www.example.com/some/page.html\")\n+            == \"http://www.example.com/some/page.html\"\n         )\n \n     def test_preserve_http_port(self):\n-        self.assertEqual(\n-            add_http_if_no_scheme(\"http://www.example.com:80\"),\n-            \"http://www.example.com:80\",\n+        assert (\n+            add_http_if_no_scheme(\"http://www.example.com:80\")\n+            == \"http://www.example.com:80\"\n         )\n \n     def test_preserve_http_fragment(self):\n-        self.assertEqual(\n-            add_http_if_no_scheme(\"http://www.example.com/some/page#frag\"),\n-            \"http://www.example.com/some/page#frag\",\n+        assert (\n+            add_http_if_no_scheme(\"http://www.example.com/some/page#frag\")\n+            == \"http://www.example.com/some/page#frag\"\n         )\n \n     def test_preserve_http_query(self):\n-        self.assertEqual(\n-            add_http_if_no_scheme(\"http://www.example.com/do?a=1&b=2&c=3\"),\n-            \"http://www.example.com/do?a=1&b=2&c=3\",\n+        assert (\n+            add_http_if_no_scheme(\"http://www.example.com/do?a=1&b=2&c=3\")\n+            == \"http://www.example.com/do?a=1&b=2&c=3\"\n         )\n \n     def test_preserve_http_username_password(self):\n-        self.assertEqual(\n-            add_http_if_no_scheme(\"http://username:password@www.example.com\"),\n-            \"http://username:password@www.example.com\",\n+        assert (\n+            add_http_if_no_scheme(\"http://username:password@www.example.com\")\n+            == \"http://username:password@www.example.com\"\n         )\n \n     def test_preserve_http_complete_url(self):\n-        self.assertEqual(\n+        assert (\n             add_http_if_no_scheme(\n                 \"http://username:password@www.example.com:80/some/page/do?a=1&b=2&c=3#frag\"\n-            ),\n-            \"http://username:password@www.example.com:80/some/page/do?a=1&b=2&c=3#frag\",\n+            )\n+            == \"http://username:password@www.example.com:80/some/page/do?a=1&b=2&c=3#frag\"\n         )\n \n     def test_protocol_relative(self):\n-        self.assertEqual(\n-            add_http_if_no_scheme(\"//www.example.com\"), \"http://www.example.com\"\n-        )\n+        assert add_http_if_no_scheme(\"//www.example.com\") == \"http://www.example.com\"\n \n     def test_protocol_relative_without_subdomain(self):\n-        self.assertEqual(add_http_if_no_scheme(\"//example.com\"), \"http://example.com\")\n+        assert add_http_if_no_scheme(\"//example.com\") == \"http://example.com\"\n \n     def test_protocol_relative_path(self):\n-        self.assertEqual(\n-            add_http_if_no_scheme(\"//www.example.com/some/page.html\"),\n-            \"http://www.example.com/some/page.html\",\n+        assert (\n+            add_http_if_no_scheme(\"//www.example.com/some/page.html\")\n+            == \"http://www.example.com/some/page.html\"\n         )\n \n     def test_protocol_relative_port(self):\n-        self.assertEqual(\n-            add_http_if_no_scheme(\"//www.example.com:80\"), \"http://www.example.com:80\"\n+        assert (\n+            add_http_if_no_scheme(\"//www.example.com:80\") == \"http://www.example.com:80\"\n         )\n \n     def test_protocol_relative_fragment(self):\n-        self.assertEqual(\n-            add_http_if_no_scheme(\"//www.example.com/some/page#frag\"),\n-            \"http://www.example.com/some/page#frag\",\n+        assert (\n+            add_http_if_no_scheme(\"//www.example.com/some/page#frag\")\n+            == \"http://www.example.com/some/page#frag\"\n         )\n \n     def test_protocol_relative_query(self):\n-        self.assertEqual(\n-            add_http_if_no_scheme(\"//www.example.com/do?a=1&b=2&c=3\"),\n-            \"http://www.example.com/do?a=1&b=2&c=3\",\n+        assert (\n+            add_http_if_no_scheme(\"//www.example.com/do?a=1&b=2&c=3\")\n+            == \"http://www.example.com/do?a=1&b=2&c=3\"\n         )\n \n     def test_protocol_relative_username_password(self):\n-        self.assertEqual(\n-            add_http_if_no_scheme(\"//username:password@www.example.com\"),\n-            \"http://username:password@www.example.com\",\n+        assert (\n+            add_http_if_no_scheme(\"//username:password@www.example.com\")\n+            == \"http://username:password@www.example.com\"\n         )\n \n     def test_protocol_relative_complete_url(self):\n-        self.assertEqual(\n+        assert (\n             add_http_if_no_scheme(\n                 \"//username:password@www.example.com:80/some/page/do?a=1&b=2&c=3#frag\"\n-            ),\n-            \"http://username:password@www.example.com:80/some/page/do?a=1&b=2&c=3#frag\",\n+            )\n+            == \"http://username:password@www.example.com:80/some/page/do?a=1&b=2&c=3#frag\"\n         )\n \n     def test_preserve_https(self):\n-        self.assertEqual(\n-            add_http_if_no_scheme(\"https://www.example.com\"), \"https://www.example.com\"\n+        assert (\n+            add_http_if_no_scheme(\"https://www.example.com\")\n+            == \"https://www.example.com\"\n         )\n \n     def test_preserve_ftp(self):\n-        self.assertEqual(\n-            add_http_if_no_scheme(\"ftp://www.example.com\"), \"ftp://www.example.com\"\n-        )\n+        assert add_http_if_no_scheme(\"ftp://www.example.com\") == \"ftp://www.example.com\"\n \n \n-class GuessSchemeTest(unittest.TestCase):\n+class TestGuessScheme:\n     pass\n \n \n@@ -361,7 +300,7 @@ for k, args in enumerate(\n ):\n     t_method = create_guess_scheme_t(args)\n     t_method.__name__ = f\"test_uri_{k:03}\"\n-    setattr(GuessSchemeTest, t_method.__name__, t_method)\n+    setattr(TestGuessScheme, t_method.__name__, t_method)\n \n # TODO: the following tests do not pass with current implementation\n for k, skip_args in enumerate(\n@@ -376,29 +315,29 @@ for k, skip_args in enumerate(\n ):\n     t_method = create_skipped_scheme_t(skip_args)\n     t_method.__name__ = f\"test_uri_skipped_{k:03}\"\n-    setattr(GuessSchemeTest, t_method.__name__, t_method)\n+    setattr(TestGuessScheme, t_method.__name__, t_method)\n \n \n-class StripUrl(unittest.TestCase):\n+class TestStripUrl:\n     def test_noop(self):\n-        self.assertEqual(\n-            strip_url(\"http://www.example.com/index.html\"),\n-            \"http://www.example.com/index.html\",\n+        assert (\n+            strip_url(\"http://www.example.com/index.html\")\n+            == \"http://www.example.com/index.html\"\n         )\n \n     def test_noop_query_string(self):\n-        self.assertEqual(\n-            strip_url(\"http://www.example.com/index.html?somekey=somevalue\"),\n-            \"http://www.example.com/index.html?somekey=somevalue\",\n+        assert (\n+            strip_url(\"http://www.example.com/index.html?somekey=somevalue\")\n+            == \"http://www.example.com/index.html?somekey=somevalue\"\n         )\n \n     def test_fragments(self):\n-        self.assertEqual(\n+        assert (\n             strip_url(\n                 \"http://www.example.com/index.html?somekey=somevalue#section\",\n                 strip_fragment=False,\n-            ),\n-            \"http://www.example.com/index.html?somekey=somevalue#section\",\n+            )\n+            == \"http://www.example.com/index.html?somekey=somevalue#section\"\n         )\n \n     def test_path(self):\n@@ -407,7 +346,7 @@ class StripUrl(unittest.TestCase):\n             (\"http://www.example.com\", False, \"http://www.example.com\"),\n             (\"http://www.example.com\", True, \"http://www.example.com/\"),\n         ]:\n-            self.assertEqual(strip_url(input_url, origin_only=origin), output_url)\n+            assert strip_url(input_url, origin_only=origin) == output_url\n \n     def test_credentials(self):\n         for i, o in [\n@@ -424,7 +363,7 @@ class StripUrl(unittest.TestCase):\n                 \"ftp://www.example.com/index.html?somekey=somevalue\",\n             ),\n         ]:\n-            self.assertEqual(strip_url(i, strip_credentials=True), o)\n+            assert strip_url(i, strip_credentials=True) == o\n \n     def test_credentials_encoded_delims(self):\n         for i, o in [\n@@ -447,7 +386,7 @@ class StripUrl(unittest.TestCase):\n                 \"ftp://www.example.com/index.html?somekey=somevalue\",\n             ),\n         ]:\n-            self.assertEqual(strip_url(i, strip_credentials=True), o)\n+            assert strip_url(i, strip_credentials=True) == o\n \n     def test_default_ports_creds_off(self):\n         for i, o in [\n@@ -484,7 +423,7 @@ class StripUrl(unittest.TestCase):\n                 \"ftp://www.example.com:221/file.txt\",\n             ),\n         ]:\n-            self.assertEqual(strip_url(i), o)\n+            assert strip_url(i) == o\n \n     def test_default_ports(self):\n         for i, o in [\n@@ -521,9 +460,7 @@ class StripUrl(unittest.TestCase):\n                 \"ftp://username:password@www.example.com:221/file.txt\",\n             ),\n         ]:\n-            self.assertEqual(\n-                strip_url(i, strip_default_port=True, strip_credentials=False), o\n-            )\n+            assert strip_url(i, strip_default_port=True, strip_credentials=False) == o\n \n     def test_default_ports_keep(self):\n         for i, o in [\n@@ -560,9 +497,7 @@ class StripUrl(unittest.TestCase):\n                 \"ftp://username:password@www.example.com:221/file.txt\",\n             ),\n         ]:\n-            self.assertEqual(\n-                strip_url(i, strip_default_port=False, strip_credentials=False), o\n-            )\n+            assert strip_url(i, strip_default_port=False, strip_credentials=False) == o\n \n     def test_origin_only(self):\n         for i, o in [\n@@ -583,10 +518,10 @@ class StripUrl(unittest.TestCase):\n                 \"https://www.example.com/\",\n             ),\n         ]:\n-            self.assertEqual(strip_url(i, origin_only=True), o)\n+            assert strip_url(i, origin_only=True) == o\n \n \n-class IsPathTestCase(unittest.TestCase):\n+class TestIsPath:\n     def test_path(self):\n         for input_value, output_value in (\n             # https://en.wikipedia.org/wiki/Path_(computing)#Representations_of_paths_by_operating_system_and_shell\n@@ -604,9 +539,7 @@ class IsPathTestCase(unittest.TestCase):\n             (r\"C:\\user\\docs\\somefile.ext:alternate_stream_name\", True),\n             (r\"https://example.com\", False),\n         ):\n-            self.assertEqual(\n-                _is_filesystem_path(input_value), output_value, input_value\n-            )\n+            assert _is_filesystem_path(input_value) == output_value, input_value\n \n \n @pytest.mark.parametrize(\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
