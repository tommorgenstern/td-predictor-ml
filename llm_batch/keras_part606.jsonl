{"custom_id": "keras#59876afd28120e7d776566740c89666c8d2aebd7", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 564 | Lines Deleted: 5 | Files Changed: 5 | Hunks: 168 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 569 | Churn Cumulative: 8216 | Contributors (this commit): 13 | Commits (past 90d): 69 | Contributors (cumulative): 25 | DMM Complexity: None\n\nDIFF:\n@@ -3,6 +3,7 @@ scatter\n \"\"\"\n \n from keras_core import backend\n+from keras_core.api_export import keras_core_export\n from keras_core.backend import KerasTensor\n from keras_core.backend import any_symbolic_tensors\n from keras_core.operations.operation import Operation\n@@ -16,6 +17,7 @@ class Scatter(Operation):\n         return KerasTensor(shape, dtype=values.dtype)\n \n \n+@keras_core_export(\"keras_core.operations.scatter\")\n def scatter(indices, values, shape):\n     if any_symbolic_tensors((indices, values, shape)):\n         return Scatter().symbolic_call(indices, values, shape)\n\n@@ -1,4 +1,5 @@\n from keras_core import backend\n+from keras_core.api_export import keras_core_export\n from keras_core.backend import KerasTensor\n from keras_core.backend import any_symbolic_tensors\n from keras_core.operations.operation import Operation\n@@ -50,6 +51,7 @@ class Resize(Operation):\n         )\n \n \n+@keras_core_export(\"keras_core.operations.image.resize\")\n def resize(\n     image, size, method=\"bilinear\", antialias=False, data_format=\"channels_last\"\n ):\n\n@@ -1,9 +1,12 @@\n \"\"\"\n segment_sum\n top_k\n+in_top_k\n+logsumexp\n \"\"\"\n \n from keras_core import backend\n+from keras_core.api_export import keras_core_export\n from keras_core.backend import any_symbolic_tensors\n from keras_core.operations.operation import Operation\n \n@@ -13,6 +16,7 @@ class SegmentSum(Operation):\n         return backend.math.segment_sum(data, segment_ids, num_segments, sorted)\n \n \n+@keras_core_export(\"keras_core.operations.segment_sum\")\n def segment_sum(data, segment_ids, num_segments=None, sorted=False):\n     if any_symbolic_tensors((data,)):\n         return SegmentSum().symbolic_call(\n@@ -26,6 +30,7 @@ class TopK(Operation):\n         return backend.math.top_k(x, k, sorted)\n \n \n+@keras_core_export(\"keras_core.operations.top_k\")\n def top_k(x, k, sorted=True):\n     if any_symbolic_tensors((x,)):\n         return TopK().symbolic_call(x, k, sorted)\n@@ -37,18 +42,20 @@ class InTopK(Operation):\n         return backend.math.in_top_k(targets, predictions, k)\n \n \n+@keras_core_export(\"keras_core.operations.in_top_k\")\n def in_top_k(targets, predictions, k):\n     if any_symbolic_tensors((targets, predictions)):\n         return InTopK().symbolic_call(targets, predictions, k)\n     return backend.math.in_top_k(targets, predictions, k)\n \n \n+class Logsumexp(Operation):\n+    def call(self, x, axis=None, keepdims=False):\n+        return backend.math.logsumexp(x, axis=axis, keepdims=keepdims)\n+\n+\n+@keras_core_export(\"keras_core.operations.logsumexp\")\n def logsumexp(x, axis=None, keepdims=False):\n     if any_symbolic_tensors((x,)):\n         return Logsumexp().symbolic_call(x, axis=axis, keepdims=keepdims)\n     return backend.math.logsumexp(x, axis=axis, keepdims=keepdims)\n-\n-\n-class Logsumexp(Operation):\n-    def call(self, x, axis=None, keepdims=False):\n-        return backend.math.logsumexp(x, axis=axis, keepdims=keepdims)\n\n@@ -30,6 +30,7 @@ ctc ??\n \"\"\"\n \n from keras_core import backend\n+from keras_core.api_export import keras_core_export\n from keras_core.backend import KerasTensor\n from keras_core.backend import any_symbolic_tensors\n from keras_core.backend.common.backend_utils import (\n@@ -47,6 +48,9 @@ class Relu(Operation):\n         return KerasTensor(x.shape, dtype=x.dtype)\n \n \n+@keras_core_export(\n+    [\"keras_core.operations.relu\", \"keras_core.operations.nn.relu\"]\n+)\n def relu(x):\n     if any_symbolic_tensors((x,)):\n         return Relu().symbolic_call(x)\n@@ -61,6 +65,9 @@ class Relu6(Operation):\n         return KerasTensor(x.shape, dtype=x.dtype)\n \n \n+@keras_core_export(\n+    [\"keras_core.operations.relu6\", \"keras_core.operations.nn.relu6\"]\n+)\n def relu6(x):\n     if any_symbolic_tensors((x,)):\n         return Relu6().symbolic_call(x)\n@@ -75,6 +82,9 @@ class Sigmoid(Operation):\n         return KerasTensor(x.shape, dtype=x.dtype)\n \n \n+@keras_core_export(\n+    [\"keras_core.operations.sigmoid\", \"keras_core.operations.nn.sigmoid\"]\n+)\n def sigmoid(x):\n     if any_symbolic_tensors((x,)):\n         return Sigmoid().symbolic_call(x)\n@@ -89,6 +99,9 @@ class Tanh(Operation):\n         return KerasTensor(x.shape, dtype=x.dtype)\n \n \n+@keras_core_export(\n+    [\"keras_core.operations.tanh\", \"keras_core.operations.nn.tanh\"]\n+)\n def tanh(x):\n     if any_symbolic_tensors((x,)):\n         return Tanh().symbolic_call(x)\n@@ -103,6 +116,9 @@ class Softplus(Operation):\n         return KerasTensor(x.shape, dtype=x.dtype)\n \n \n+@keras_core_export(\n+    [\"keras_core.operations.softplus\", \"keras_core.operations.nn.softplus\"]\n+)\n def softplus(x):\n     if any_symbolic_tensors((x,)):\n         return Softplus().symbolic_call(x)\n@@ -117,6 +133,9 @@ class Softsign(Operation):\n         return KerasTensor(x.shape, dtype=x.dtype)\n \n \n+@keras_core_export(\n+    [\"keras_core.operations.softsign\", \"keras_core.operations.nn.softsign\"]\n+)\n def softsign(x):\n     if any_symbolic_tensors((x,)):\n         return Softsign().symbolic_call(x)\n@@ -131,6 +150,9 @@ class Silu(Operation):\n         return KerasTensor(x.shape, dtype=x.dtype)\n \n \n+@keras_core_export(\n+    [\"keras_core.operations.silu\", \"keras_core.operations.nn.silu\"]\n+)\n def silu(x):\n     if any_symbolic_tensors((x,)):\n         return Silu().symbolic_call(x)\n@@ -145,6 +167,9 @@ class Swish(Operation):\n         return KerasTensor(x.shape, dtype=x.dtype)\n \n \n+@keras_core_export(\n+    [\"keras_core.operations.swish\", \"keras_core.operations.nn.swish\"]\n+)\n def swish(x):\n     if any_symbolic_tensors((x,)):\n         return Swish().symbolic_call(x)\n@@ -159,6 +184,12 @@ class LogSigmoid(Operation):\n         return KerasTensor(x.shape, dtype=x.dtype)\n \n \n+@keras_core_export(\n+    [\n+        \"keras_core.operations.log_sigmoid\",\n+        \"keras_core.operations.nn.log_sigmoid\",\n+    ]\n+)\n def log_sigmoid(x):\n     if any_symbolic_tensors((x,)):\n         return LogSigmoid().symbolic_call(x)\n@@ -177,6 +208,9 @@ class LeakyRelu(Operation):\n         return KerasTensor(x.shape, dtype=x.dtype)\n \n \n+@keras_core_export(\n+    [\"keras_core.operations.leaky_relu\", \"keras_core.operations.nn.leaky_relu\"]\n+)\n def leaky_relu(x, negative_slope=0.2):\n     if any_symbolic_tensors((x,)):\n         return LeakyRelu(negative_slope).symbolic_call(x)\n@@ -191,6 +225,12 @@ class HardSigmoid(Operation):\n         return KerasTensor(x.shape, dtype=x.dtype)\n \n \n+@keras_core_export(\n+    [\n+        \"keras_core.operations.hard_sigmoid\",\n+        \"keras_core.operations.nn.hard_sigmoid\",\n+    ]\n+)\n def hard_sigmoid(x):\n     if any_symbolic_tensors((x,)):\n         return HardSigmoid().symbolic_call(x)\n@@ -205,6 +245,9 @@ class Elu(Operation):\n         return KerasTensor(x.shape, dtype=x.dtype)\n \n \n+@keras_core_export(\n+    [\"keras_core.operations.elu\", \"keras_core.operations.nn.elu\"]\n+)\n def elu(x):\n     if any_symbolic_tensors((x,)):\n         return Elu().symbolic_call(x)\n@@ -219,6 +262,9 @@ class Selu(Operation):\n         return KerasTensor(x.shape, dtype=x.dtype)\n \n \n+@keras_core_export(\n+    [\"keras_core.operations.selu\", \"keras_core.operations.nn.selu\"]\n+)\n def selu(x):\n     if any_symbolic_tensors((x,)):\n         return Selu().symbolic_call(x)\n@@ -237,6 +283,9 @@ class Gelu(Operation):\n         return KerasTensor(x.shape, dtype=x.dtype)\n \n \n+@keras_core_export(\n+    [\"keras_core.operations.gelu\", \"keras_core.operations.nn.gelu\"]\n+)\n def gelu(x, approximate=True):\n     if any_symbolic_tensors((x,)):\n         return Gelu(approximate).symbolic_call(x)\n@@ -255,6 +304,9 @@ class Softmax(Operation):\n         return KerasTensor(x.shape, dtype=x.dtype)\n \n \n+@keras_core_export(\n+    [\"keras_core.operations.softmax\", \"keras_core.operations.nn.softmax\"]\n+)\n def softmax(x, axis=None):\n     if any_symbolic_tensors((x,)):\n         return Softmax(axis).symbolic_call(x)\n@@ -273,6 +325,12 @@ class LogSoftmax(Operation):\n         return KerasTensor(x.shape, dtype=x.dtype)\n \n \n+@keras_core_export(\n+    [\n+        \"keras_core.operations.log_softmax\",\n+        \"keras_core.operations.nn.log_softmax\",\n+    ]\n+)\n def log_softmax(x, axis=None):\n     if any_symbolic_tensors((x,)):\n         return LogSoftmax(axis).symbolic_call(x)\n@@ -313,6 +371,9 @@ class MaxPool(Operation):\n         return KerasTensor(output_shape, dtype=inputs.dtype)\n \n \n+@keras_core_export(\n+    [\"keras_core.operations.max_pool\", \"keras_core.operations.nn.max_pool\"]\n+)\n def max_pool(\n     inputs,\n     pool_size,\n@@ -396,6 +457,12 @@ class AveragePool(Operation):\n         return KerasTensor(output_shape, dtype=inputs.dtype)\n \n \n+@keras_core_export(\n+    [\n+        \"keras_core.operations.average_pool\",\n+        \"keras_core.operations.nn.average_pool\",\n+    ]\n+)\n def average_pool(\n     inputs,\n     pool_size,\n@@ -484,6 +551,9 @@ class Conv(Operation):\n         return KerasTensor(output_shape, dtype=inputs.dtype)\n \n \n+@keras_core_export(\n+    [\"keras_core.operations.conv\", \"keras_core.operations.nn.conv\"]\n+)\n def conv(\n     inputs,\n     kernel,\n@@ -575,6 +645,12 @@ class DepthwiseConv(Operation):\n         return KerasTensor(output_shape, dtype=inputs.dtype)\n \n \n+@keras_core_export(\n+    [\n+        \"keras_core.operations.depthwise_conv\",\n+        \"keras_core.operations.nn.depthwise_conv\",\n+    ]\n+)\n def depthwise_conv(\n     inputs,\n     kernel,\n@@ -677,6 +753,12 @@ class SeparableConv(Operation):\n         return KerasTensor(output_shape, dtype=inputs.dtype)\n \n \n+@keras_core_export(\n+    [\n+        \"keras_core.operations.separable_conv\",\n+        \"keras_core.operations.nn.separable_conv\",\n+    ]\n+)\n def separable_conv(\n     inputs,\n     depthwise_kernel,\n@@ -792,6 +874,12 @@ class ConvTranspose(Operation):\n         return KerasTensor(output_shape, dtype=inputs.dtype)\n \n \n+@keras_core_export(\n+    [\n+        \"keras_core.operations.conv_transpose\",\n+        \"keras_core.operations.nn.conv_transpose\",\n+    ]\n+)\n def conv_transpose(\n     inputs,\n     kernel,\n@@ -883,6 +971,9 @@ class OneHot(Operation):\n         return KerasTensor(x_shape)\n \n \n+@keras_core_export(\n+    [\"keras_core.operations.one_hot\", \"keras_core.operations.nn.one_hot\"]\n+)\n def one_hot(x, num_classes, axis=-1):\n     if any_symbolic_tensors((x,)):\n         return OneHot(num_classes, axis=axis).symbolic_call(x)\n@@ -909,6 +1000,12 @@ class BinaryCrossentropy(Operation):\n         return KerasTensor(output.shape, dtype=output.dtype)\n \n \n+@keras_core_export(\n+    [\n+        \"keras_core.operations.binary_crossentropy\",\n+        \"keras_core.operations.nn.binary_crossentropy\",\n+    ]\n+)\n def binary_crossentropy(target, output, from_logits=False):\n     if any_symbolic_tensors((target, output)):\n         return BinaryCrossentropy(from_logits=from_logits).symbolic_call(\n@@ -946,6 +1043,12 @@ class CategoricalCrossentropy(Operation):\n         return KerasTensor(output.shape[:-1], dtype=output.dtype)\n \n \n+@keras_core_export(\n+    [\n+        \"keras_core.operations.categorical_crossentropy\",\n+        \"keras_core.operations.nn.categorical_crossentropy\",\n+    ]\n+)\n def categorical_crossentropy(target, output, from_logits=False, axis=-1):\n     if any_symbolic_tensors((target, output)):\n         return CategoricalCrossentropy(\n@@ -986,6 +1089,12 @@ class SparseCategoricalCrossentropy(Operation):\n         return KerasTensor(output.shape[:-1], dtype=output.dtype)\n \n \n+@keras_core_export(\n+    [\n+        \"keras_core.operations.sparse_categorical_crossentropy\",\n+        \"keras_core.operations.nn.sparse_categorical_crossentropy\",\n+    ]\n+)\n def sparse_categorical_crossentropy(target, output, from_logits=False, axis=-1):\n     if any_symbolic_tensors((target, output)):\n         return SparseCategoricalCrossentropy(\n\n@@ -137,12 +137,19 @@ import re\n import numpy as np\n \n from keras_core import backend\n+from keras_core.api_export import keras_core_export\n from keras_core.backend import KerasTensor\n from keras_core.backend import any_symbolic_tensors\n from keras_core.operations import operation_utils\n from keras_core.operations.operation import Operation\n \n \n+@keras_core_export(\n+    [\n+        \"keras_core.operations.broadcast_shapes\",\n+        \"keras_core.operations.numpy.broadcast_shapes\",\n+    ]\n+)\n def broadcast_shapes(shape1, shape2):\n     # Broadcast input shapes to a unified shape.\n     # Convert to list for mutability.\n@@ -174,6 +181,12 @@ def broadcast_shapes(shape1, shape2):\n     return output_shape\n \n \n+@keras_core_export(\n+    [\n+        \"keras_core.operations.reduce_shape\",\n+        \"keras_core.operations.numpy.reduce_shape\",\n+    ]\n+)\n def reduce_shape(shape, axis=None, keepdims=False):\n     shape = list(shape)\n     if axis is None:\n@@ -194,6 +207,12 @@ def reduce_shape(shape, axis=None, keepdims=False):\n         return output_shape\n \n \n+@keras_core_export(\n+    [\n+        \"keras_core.operations.shape_equal\",\n+        \"keras_core.operations.numpy.shape_equal\",\n+    ]\n+)\n def shape_equal(shape1, shape2, axis=None, allow_none=True):\n     \"\"\"Check if two shapes are equal.\n \n@@ -231,6 +250,9 @@ class Absolute(Operation):\n         return KerasTensor(x.shape, dtype=x.dtype)\n \n \n+@keras_core_export(\n+    [\"keras_core.operations.absolute\", \"keras_core.operations.numpy.absolute\"]\n+)\n def absolute(x):\n     if any_symbolic_tensors((x,)):\n         return Absolute().symbolic_call(x)\n@@ -241,6 +263,9 @@ class Abs(Absolute):\n     pass\n \n \n+@keras_core_export(\n+    [\"keras_core.operations.abs\", \"keras_core.operations.numpy.abs\"]\n+)\n def abs(x):\n     return absolute(x)\n \n@@ -256,6 +281,9 @@ class Add(Operation):\n         return KerasTensor(output_shape, dtype=x1.dtype)\n \n \n+@keras_core_export(\n+    [\"keras_core.operations.add\", \"keras_core.operations.numpy.add\"]\n+)\n def add(x1, x2):\n     if any_symbolic_tensors((x1, x2)):\n         return Add().symbolic_call(x1, x2)\n@@ -289,6 +317,9 @@ class All(Operation):\n         )\n \n \n+@keras_core_export(\n+    [\"keras_core.operations.all\", \"keras_core.operations.numpy.all\"]\n+)\n def all(x, axis=None, keepdims=False):\n     if any_symbolic_tensors((x,)):\n         return All(axis=axis, keepdims=keepdims).symbolic_call(x)\n@@ -322,6 +353,9 @@ class Any(Operation):\n         )\n \n \n+@keras_core_export(\n+    [\"keras_core.operations.any\", \"keras_core.operations.numpy.any\"]\n+)\n def any(x, axis=None, keepdims=False):\n     if any_symbolic_tensors((x,)):\n         return Any(axis=axis, keepdims=keepdims).symbolic_call(x)\n@@ -350,6 +384,9 @@ class Amax(Operation):\n         )\n \n \n+@keras_core_export(\n+    [\"keras_core.operations.amax\", \"keras_core.operations.numpy.amax\"]\n+)\n def amax(x, axis=None, keepdims=False):\n     if any_symbolic_tensors((x,)):\n         return All(axis=axis, keepdims=keepdims).symbolic_call(x)\n@@ -374,6 +411,9 @@ class Amin(Operation):\n         )\n \n \n+@keras_core_export(\n+    [\"keras_core.operations.amin\", \"keras_core.operations.numpy.amin\"]\n+)\n def amin(x, axis=None, keepdims=False):\n     if any_symbolic_tensors((x,)):\n         return All(axis=axis, keepdims=keepdims).symbolic_call(x)\n@@ -410,6 +450,9 @@ class Append(Operation):\n         return KerasTensor(output_shape, dtype=x1.dtype)\n \n \n+@keras_core_export(\n+    [\"keras_core.operations.append\", \"keras_core.operations.numpy.append\"]\n+)\n def append(\n     x1,\n     x2,\n@@ -437,6 +480,9 @@ class Arange(Operation):\n         return KerasTensor(output_shape, dtype=dtype)\n \n \n+@keras_core_export(\n+    [\"keras_core.operations.arange\", \"keras_core.operations.numpy.arange\"]\n+)\n def arange(start, stop=None, step=None, dtype=None):\n     if stop is None:\n         start, stop = 0, start\n@@ -453,6 +499,9 @@ class Arccos(Operation):\n         return KerasTensor(x.shape, dtype=x.dtype)\n \n \n+@keras_core_export(\n+    [\"keras_core.operations.arccos\", \"keras_core.operations.numpy.arccos\"]\n+)\n def arccos(x):\n     if any_symbolic_tensors((x,)):\n         return Arccos().symbolic_call(x)\n@@ -467,6 +516,9 @@ class Arcsin(Operation):\n         return KerasTensor(x.shape, dtype=x.dtype)\n \n \n+@keras_core_export(\n+    [\"keras_core.operations.arcsin\", \"keras_core.operations.numpy.arcsin\"]\n+)\n def arcsin(x):\n     if any_symbolic_tensors((x,)):\n         return Arcsin().symbolic_call(x)\n@@ -481,6 +533,9 @@ class Arctan(Operation):\n         return KerasTensor(x.shape, dtype=x.dtype)\n \n \n+@keras_core_export(\n+    [\"keras_core.operations.arctan\", \"keras_core.operations.numpy.arctan\"]\n+)\n def arctan(x):\n     if any_symbolic_tensors((x,)):\n         return Arctan().symbolic_call(x)\n@@ -498,6 +553,9 @@ class Arctan2(Operation):\n         return KerasTensor(outputs_shape, dtype=x1.dtype)\n \n \n+@keras_core_export(\n+    [\"keras_core.operations.arctan2\", \"keras_core.operations.numpy.arctan2\"]\n+)\n def arctan2(x1, x2):\n     if any_symbolic_tensors((x1, x2)):\n         return Arctan2().symbolic_call(x1, x2)\n@@ -520,6 +578,9 @@ class Argmax(Operation):\n         )\n \n \n+@keras_core_export(\n+    [\"keras_core.operations.argmax\", \"keras_core.operations.numpy.argmax\"]\n+)\n def argmax(x, axis=None):\n     if any_symbolic_tensors((x,)):\n         return Argmax(axis=axis).symbolic_call(x)\n@@ -542,6 +603,9 @@ class Argmin(Operation):\n         )\n \n \n+@keras_core_export(\n+    [\"keras_core.operations.argmin\", \"keras_core.operations.numpy.argmin\"]\n+)\n def argmin(x, axis=None):\n     if any_symbolic_tensors((x,)):\n         return Argmin(axis=axis).symbolic_call(x)\n@@ -562,6 +626,9 @@ class Argsort(Operation):\n         return KerasTensor(x.shape, dtype=\"int32\")\n \n \n+@keras_core_export(\n+    [\"keras_core.operations.argsort\", \"keras_core.operations.numpy.argsort\"]\n+)\n def argsort(x, axis=-1):\n     if any_symbolic_tensors((x,)):\n         return Argsort(axis=axis).symbolic_call(x)\n@@ -576,6 +643,9 @@ class Array(Operation):\n         return KerasTensor(x.shape, dtype=dtype)\n \n \n+@keras_core_export(\n+    [\"keras_core.operations.array\", \"keras_core.operations.numpy.array\"]\n+)\n def array(x, dtype=None):\n     if any_symbolic_tensors((x,)):\n         return Array().symbolic_call(x, dtype=dtype)\n@@ -628,6 +698,9 @@ class Average(Operation):\n             )\n \n \n+@keras_core_export(\n+    [\"keras_core.operations.average\", \"keras_core.operations.numpy.average\"]\n+)\n def average(x, axis=None, weights=None):\n     if any_symbolic_tensors((x,)):\n         return Average(axis=axis).symbolic_call(x, weights=weights)\n@@ -650,6 +723,9 @@ class Bincount(Operation):\n         return KerasTensor(out_shape, dtype=x.dtype)\n \n \n+@keras_core_export(\n+    [\"keras_core.operations.bincount\", \"keras_core.operations.numpy.bincount\"]\n+)\n def bincount(x, weights=None, minlength=0):\n     if any_symbolic_tensors((x,)):\n         return Bincount(weights=weights, minlength=minlength).symbolic_call(x)\n@@ -670,6 +746,12 @@ class BroadcastTo(Operation):\n         return KerasTensor(self.shape, dtype=x.dtype)\n \n \n+@keras_core_export(\n+    [\n+        \"keras_core.operations.broadcast_to\",\n+        \"keras_core.operations.numpy.broadcast_to\",\n+    ]\n+)\n def broadcast_to(x, shape):\n     if any_symbolic_tensors((x,)):\n         return BroadcastTo(shape=shape).symbolic_call(x)\n@@ -684,6 +766,9 @@ class Ceil(Operation):\n         return KerasTensor(x.shape, dtype=x.dtype)\n \n \n+@keras_core_export(\n+    [\"keras_core.operations.ceil\", \"keras_core.operations.numpy.ceil\"]\n+)\n def ceil(x):\n     if any_symbolic_tensors((x,)):\n         return Ceil().symbolic_call(x)\n@@ -703,6 +788,9 @@ class Clip(Operation):\n         return KerasTensor(x.shape, dtype=x.dtype)\n \n \n+@keras_core_export(\n+    [\"keras_core.operations.clip\", \"keras_core.operations.numpy.clip\"]\n+)\n def clip(x, x_min, x_max):\n     if any_symbolic_tensors((x,)):\n         return Clip(x_min, x_max).symbolic_call(x)\n@@ -741,6 +829,12 @@ class Concatenate(Operation):\n         return KerasTensor(output_shape, dtype=x.dtype)\n \n \n+@keras_core_export(\n+    [\n+        \"keras_core.operations.concatenate\",\n+        \"keras_core.operations.numpy.concatenate\",\n+    ]\n+)\n def concatenate(xs, axis=0):\n     if any_symbolic_tensors(xs):\n         return Concatenate(axis=axis).symbolic_call(xs)\n@@ -755,6 +849,9 @@ class Conjugate(Operation):\n         return KerasTensor(x.shape, dtype=x.dtype)\n \n \n+@keras_core_export(\n+    [\"keras_core.operations.conjugate\", \"keras_core.operations.numpy.conjugate\"]\n+)\n def conjugate(x):\n     if any_symbolic_tensors((x,)):\n         return Conjugate().symbolic_call(x)\n@@ -765,6 +862,9 @@ class Conj(Conjugate):\n     pass\n \n \n+@keras_core_export(\n+    [\"keras_core.operations.conj\", \"keras_core.operations.numpy.conj\"]\n+)\n def conj(x):\n     return conjugate(x)\n \n@@ -777,6 +877,9 @@ class Copy(Operation):\n         return KerasTensor(x.shape, dtype=x.dtype)\n \n \n+@keras_core_export(\n+    [\"keras_core.operations.copy\", \"keras_core.operations.numpy.copy\"]\n+)\n def copy(x):\n     if any_symbolic_tensors((x,)):\n         return Copy().symbolic_call(x)\n@@ -791,6 +894,9 @@ class Cos(Operation):\n         return KerasTensor(x.shape, dtype=x.dtype)\n \n \n+@keras_core_export(\n+    [\"keras_core.operations.cos\", \"keras_core.operations.numpy.cos\"]\n+)\n def cos(x):\n     if any_symbolic_tensors((x,)):\n         return Cos().symbolic_call(x)\n@@ -815,6 +921,12 @@ class CountNonzero(Operation):\n         )\n \n \n+@keras_core_export(\n+    [\n+        \"keras_core.operations.count_nonzero\",\n+        \"keras_core.operations.numpy.count_nonzero\",\n+    ]\n+)\n def count_nonzero(x, axis=None):\n     if any_symbolic_tensors((x,)):\n         return CountNonzero(axis=axis).symbolic_call(x)\n@@ -868,6 +980,9 @@ class Cross(Operation):\n         return KerasTensor(output_shape, dtype=x1.dtype)\n \n \n+@keras_core_export(\n+    [\"keras_core.operations.cross\", \"keras_core.operations.numpy.cross\"]\n+)\n def cross(x1, x2, axisa=-1, axisb=-1, axisc=-1, axis=None):\n     if any_symbolic_tensors((x1, x2)):\n         return Cross(\n@@ -901,6 +1016,9 @@ class Cumprod(Operation):\n         return KerasTensor(x.shape, dtype=x.dtype)\n \n \n+@keras_core_export(\n+    [\"keras_core.operations.cumprod\", \"keras_core.operations.numpy.cumprod\"]\n+)\n def cumprod(x, axis=None):\n     if any_symbolic_tensors((x,)):\n         return Cumprod(axis=axis).symbolic_call(x)\n@@ -925,6 +1043,9 @@ class Cumsum(Operation):\n         return KerasTensor(x.shape, dtype=x.dtype)\n \n \n+@keras_core_export(\n+    [\"keras_core.operations.cumsum\", \"keras_core.operations.numpy.cumsum\"]\n+)\n def cumsum(x, axis=None):\n     if any_symbolic_tensors((x,)):\n         return Cumsum(axis=axis).symbolic_call(x)\n@@ -968,6 +1089,9 @@ class Diag(Operation):\n         return KerasTensor(output_shape, dtype=x.dtype)\n \n \n+@keras_core_export(\n+    [\"keras_core.operations.diag\", \"keras_core.operations.numpy.diag\"]\n+)\n def diag(x, k=0):\n     if any_symbolic_tensors((x,)):\n         return Diag(k=k).symbolic_call(x)\n@@ -1016,6 +1140,9 @@ class Diagonal(Operation):\n         return KerasTensor(output_shape, dtype=x.dtype)\n \n \n+@keras_core_export(\n+    [\"keras_core.operations.diagonal\", \"keras_core.operations.numpy.diagonal\"]\n+)\n def diagonal(x, offset=0, axis1=0, axis2=1):\n     if any_symbolic_tensors((x,)):\n         return Diagonal(\n@@ -1067,6 +1194,9 @@ class Dot(Operation):\n         )\n \n \n+@keras_core_export(\n+    [\"keras_core.operations.dot\", \"keras_core.operations.numpy.dot\"]\n+)\n def dot(x1, x2):\n     if any_symbolic_tensors((x1, x2)):\n         return Dot().symbolic_call(x1, x2)\n@@ -1246,6 +1376,9 @@ class Einsum(Operation):\n         return KerasTensor(output_shape, dtype=dtype)\n \n \n+@keras_core_export(\n+    [\"keras_core.operations.einsum\", \"keras_core.operations.numpy.einsum\"]\n+)\n def einsum(subscripts, *operands):\n     if any_symbolic_tensors(operands):\n         return Einsum(subscripts).symbolic_call(*operands)\n@@ -1260,6 +1393,9 @@ class Empty(Operation):\n         return KerasTensor(shape, dtype=dtype)\n \n \n+@keras_core_export(\n+    [\"keras_core.operations.empty\", \"keras_core.operations.numpy.empty\"]\n+)\n def empty(shape, dtype=\"float32\"):\n     return backend.numpy.empty(shape, dtype=dtype)\n \n@@ -1275,6 +1411,9 @@ class Equal(Operation):\n         return KerasTensor(output_shape, dtype=x1.dtype)\n \n \n+@keras_core_export(\n+    [\"keras_core.operations.equal\", \"keras_core.operations.numpy.equal\"]\n+)\n def equal(x1, x2):\n     if any_symbolic_tensors((x1, x2)):\n         return Equal().symbolic_call(x1, x2)\n@@ -1289,6 +1428,9 @@ class Exp(Operation):\n         return KerasTensor(x.shape, dtype=x.dtype)\n \n \n+@keras_core_export(\n+    [\"keras_core.operations.exp\", \"keras_core.operations.numpy.exp\"]\n+)\n def exp(x):\n     if any_symbolic_tensors((x,)):\n         return Exp().symbolic_call(x)\n@@ -1318,6 +1460,12 @@ class ExpandDims(Operation):\n         return KerasTensor(output_shape, dtype=x.dtype)\n \n \n+@keras_core_export(\n+    [\n+        \"keras_core.operations.expand_dims\",\n+        \"keras_core.operations.numpy.expand_dims\",\n+    ]\n+)\n def expand_dims(x, axis):\n     if any_symbolic_tensors((x,)):\n         return ExpandDims(axis=axis).symbolic_call(x)\n@@ -1332,6 +1480,9 @@ class Expm1(Operation):\n         return KerasTensor(x.shape, dtype=x.dtype)\n \n \n+@keras_core_export(\n+    [\"keras_core.operations.expm1\", \"keras_core.operations.numpy.expm1\"]\n+)\n def expm1(x):\n     if any_symbolic_tensors((x,)):\n         return Expm1().symbolic_call(x)\n@@ -1350,6 +1501,9 @@ class Flip(Operation):\n         return KerasTensor(x.shape, dtype=x.dtype)\n \n \n+@keras_core_export(\n+    [\"keras_core.operations.flip\", \"keras_core.operations.numpy.flip\"]\n+)\n def flip(x, axis=None):\n     if any_symbolic_tensors((x,)):\n         return Flip(axis=axis).symbolic_call(x)\n@@ -1364,6 +1518,9 @@ class Floor(Operation):\n         return KerasTensor(x.shape, dtype=x.dtype)\n \n \n+@keras_core_export(\n+    [\"keras_core.operations.floor\", \"keras_core.operations.numpy.floor\"]\n+)\n def floor(x):\n     if any_symbolic_tensors((x,)):\n         return Floor().symbolic_call(x)\n@@ -1378,6 +1535,9 @@ class Full(Operation):\n         return KerasTensor(shape, dtype=dtype)\n \n \n+@keras_core_export(\n+    [\"keras_core.operations.full\", \"keras_core.operations.numpy.full\"]\n+)\n def full(shape, fill_value, dtype=None):\n     return backend.numpy.full(shape, fill_value, dtype=dtype)\n \n@@ -1390,6 +1550,9 @@ class FullLike(Operation):\n         return KerasTensor(x.shape, dtype=dtype)\n \n \n+@keras_core_export(\n+    [\"keras_core.operations.full_like\", \"keras_core.operations.numpy.full_like\"]\n+)\n def full_like(x, fill_value, dtype=None):\n     if any_symbolic_tensors((x,)):\n         return FullLike().symbolic_call(x, fill_value, dtype=dtype)\n@@ -1427,6 +1590,9 @@ class GetItem(Operation):\n         return KerasTensor(x.shape[1:], dtype=x.dtype)\n \n \n+@keras_core_export(\n+    [\"keras_core.operations.get_item\", \"keras_core.operations.numpy.get_item\"]\n+)\n def get_item(x, key):\n     if any_symbolic_tensors((x,)):\n         return GetItem().symbolic_call(x, key)\n@@ -1450,6 +1616,9 @@ class Greater(Operation):\n         return KerasTensor(output_shape, dtype=x1.dtype)\n \n \n+@keras_core_export(\n+    [\"keras_core.operations.greater\", \"keras_core.operations.numpy.greater\"]\n+)\n def greater(x1, x2):\n     if any_symbolic_tensors((x1, x2)):\n         return Greater().symbolic_call(x1, x2)\n@@ -1467,6 +1636,12 @@ class GreaterEqual(Operation):\n         return KerasTensor(output_shape, dtype=x1.dtype)\n \n \n+@keras_core_export(\n+    [\n+        \"keras_core.operations.greater_equal\",\n+        \"keras_core.operations.numpy.greater_equal\",\n+    ]\n+)\n def greater_equal(x1, x2):\n     if any_symbolic_tensors((x1, x2)):\n         return GreaterEqual().symbolic_call(x1, x2)\n@@ -1497,6 +1672,9 @@ class Hstack(Operation):\n         return KerasTensor(output_shape)\n \n \n+@keras_core_export(\n+    [\"keras_core.operations.hstack\", \"keras_core.operations.numpy.hstack\"]\n+)\n def hstack(xs):\n     if any_symbolic_tensors((xs,)):\n         return Hstack().symbolic_call(xs)\n@@ -1511,6 +1689,9 @@ class Identity(Operation):\n         return KerasTensor([n, n], dtype=dtype)\n \n \n+@keras_core_export(\n+    [\"keras_core.operations.identity\", \"keras_core.operations.numpy.identity\"]\n+)\n def identity(n, dtype=\"float32\"):\n     return backend.numpy.identity(n, dtype=dtype)\n \n@@ -1523,6 +1704,9 @@ class Imag(Operation):\n         return KerasTensor(x.shape, dtype=x.dtype)\n \n \n+@keras_core_export(\n+    [\"keras_core.operations.imag\", \"keras_core.operations.numpy.imag\"]\n+)\n def imag(x):\n     if any_symbolic_tensors((x,)):\n         return Imag().symbolic_call(x)\n@@ -1540,6 +1724,9 @@ class Isclose(Operation):\n         return KerasTensor(output_shape, dtype=x1.dtype)\n \n \n+@keras_core_export(\n+    [\"keras_core.operations.isclose\", \"keras_core.operations.numpy.isclose\"]\n+)\n def isclose(x1, x2):\n     if any_symbolic_tensors((x1, x2)):\n         return Isclose().symbolic_call(x1, x2)\n@@ -1554,6 +1741,9 @@ class Isfinite(Operation):\n         return KerasTensor(x.shape, dtype=\"bool\")\n \n \n+@keras_core_export(\n+    [\"keras_core.operations.isfinite\", \"keras_core.operations.numpy.isfinite\"]\n+)\n def isfinite(x):\n     if any_symbolic_tensors((x,)):\n         return Isfinite().symbolic_call(x)\n@@ -1568,6 +1758,9 @@ class Isinf(Operation):\n         return KerasTensor(x.shape, dtype=\"bool\")\n \n \n+@keras_core_export(\n+    [\"keras_core.operations.isinf\", \"keras_core.operations.numpy.isinf\"]\n+)\n def isinf(x):\n     if any_symbolic_tensors((x,)):\n         return Isinf().symbolic_call(x)\n@@ -1582,6 +1775,9 @@ class Isnan(Operation):\n         return KerasTensor(x.shape, dtype=\"bool\")\n \n \n+@keras_core_export(\n+    [\"keras_core.operations.isnan\", \"keras_core.operations.numpy.isnan\"]\n+)\n def isnan(x):\n     if any_symbolic_tensors((x,)):\n         return Isnan().symbolic_call(x)\n@@ -1599,6 +1795,9 @@ class Less(Operation):\n         return KerasTensor(output_shape, dtype=x1.dtype)\n \n \n+@keras_core_export(\n+    [\"keras_core.operations.less\", \"keras_core.operations.numpy.less\"]\n+)\n def less(x1, x2):\n     if any_symbolic_tensors((x1, x2)):\n         return Less().symbolic_call(x1, x2)\n@@ -1616,6 +1815,12 @@ class LessEqual(Operation):\n         return KerasTensor(output_shape, dtype=x1.dtype)\n \n \n+@keras_core_export(\n+    [\n+        \"keras_core.operations.less_equal\",\n+        \"keras_core.operations.numpy.less_equal\",\n+    ]\n+)\n def less_equal(x1, x2):\n     if any_symbolic_tensors((x1, x2)):\n         return LessEqual().symbolic_call(x1, x2)\n@@ -1669,6 +1874,9 @@ class Linspace(Operation):\n         return KerasTensor(output_shape, dtype=dtype)\n \n \n+@keras_core_export(\n+    [\"keras_core.operations.linspace\", \"keras_core.operations.numpy.linspace\"]\n+)\n def linspace(\n     start, stop, num=50, endpoint=True, retstep=False, dtype=None, axis=0\n ):\n@@ -1693,6 +1901,9 @@ class Log(Operation):\n         return KerasTensor(x.shape, dtype=x.dtype)\n \n \n+@keras_core_export(\n+    [\"keras_core.operations.log\", \"keras_core.operations.numpy.log\"]\n+)\n def log(x):\n     if any_symbolic_tensors((x,)):\n         return Log().symbolic_call(x)\n@@ -1707,6 +1918,9 @@ class Log10(Operation):\n         return KerasTensor(x.shape, dtype=x.dtype)\n \n \n+@keras_core_export(\n+    [\"keras_core.operations.log10\", \"keras_core.operations.numpy.log10\"]\n+)\n def log10(x):\n     if any_symbolic_tensors((x,)):\n         return Log10().symbolic_call(x)\n@@ -1721,6 +1935,9 @@ class Log1p(Operation):\n         return KerasTensor(x.shape, dtype=x.dtype)\n \n \n+@keras_core_export(\n+    [\"keras_core.operations.log1p\", \"keras_core.operations.numpy.log1p\"]\n+)\n def log1p(x):\n     if any_symbolic_tensors((x,)):\n         return Log1p().symbolic_call(x)\n@@ -1735,6 +1952,9 @@ class Log2(Operation):\n         return KerasTensor(x.shape, dtype=x.dtype)\n \n \n+@keras_core_export(\n+    [\"keras_core.operations.log2\", \"keras_core.operations.numpy.log2\"]\n+)\n def log2(x):\n     if any_symbolic_tensors((x,)):\n         return Log2().symbolic_call(x)\n@@ -1752,6 +1972,9 @@ class Logaddexp(Operation):\n         return KerasTensor(output_shape, dtype=x1.dtype)\n \n \n+@keras_core_export(\n+    [\"keras_core.operations.logaddexp\", \"keras_core.operations.numpy.logaddexp\"]\n+)\n def logaddexp(x1, x2):\n     if any_symbolic_tensors((x1, x2)):\n         return Logaddexp().symbolic_call(x1, x2)\n@@ -1769,6 +1992,12 @@ class LogicalAnd(Operation):\n         return KerasTensor(output_shape, dtype=x1.dtype)\n \n \n+@keras_core_export(\n+    [\n+        \"keras_core.operations.logical_and\",\n+        \"keras_core.operations.numpy.logical_and\",\n+    ]\n+)\n def logical_and(x1, x2):\n     if any_symbolic_tensors((x1, x2)):\n         return LogicalAnd().symbolic_call(x1, x2)\n@@ -1783,6 +2012,12 @@ class LogicalNot(Operation):\n         return KerasTensor(x.shape, dtype=x.dtype)\n \n \n+@keras_core_export(\n+    [\n+        \"keras_core.operations.logical_not\",\n+        \"keras_core.operations.numpy.logical_not\",\n+    ]\n+)\n def logical_not(x):\n     if any_symbolic_tensors((x,)):\n         return LogicalNot().symbolic_call(x)\n@@ -1800,6 +2035,12 @@ class LogicalOr(Operation):\n         return KerasTensor(output_shape, dtype=x1.dtype)\n \n \n+@keras_core_export(\n+    [\n+        \"keras_core.operations.logical_or\",\n+        \"keras_core.operations.numpy.logical_or\",\n+    ]\n+)\n def logical_or(x1, x2):\n     if any_symbolic_tensors((x1, x2)):\n         return LogicalOr().symbolic_call(x1, x2)\n@@ -1849,6 +2090,9 @@ class Logspace(Operation):\n         return KerasTensor(output_shape, dtype=dtype)\n \n \n+@keras_core_export(\n+    [\"keras_core.operations.logspace\", \"keras_core.operations.numpy.logspace\"]\n+)\n def logspace(start, stop, num=50, endpoint=True, base=10, dtype=None, axis=0):\n     if any_symbolic_tensors((start, stop)):\n         return Logspace(num, endpoint, base, dtype, axis)(start, stop)\n@@ -1895,6 +2139,9 @@ class Matmul(Operation):\n         return KerasTensor(output_shape, dtype=x1.dtype)\n \n \n+@keras_core_export(\n+    [\"keras_core.operations.matmul\", \"keras_core.operations.numpy.matmul\"]\n+)\n def matmul(x1, x2):\n     if any_symbolic_tensors((x1, x2)):\n         return Matmul().symbolic_call(x1, x2)\n@@ -1926,6 +2173,9 @@ class Max(Operation):\n         )\n \n \n+@keras_core_export(\n+    [\"keras_core.operations.max\", \"keras_core.operations.numpy.max\"]\n+)\n def max(x, axis=None, keepdims=False, initial=None):\n     if any_symbolic_tensors((x,)):\n         return Max(axis=axis, keepdims=keepdims, initial=initial).symbolic_call(\n@@ -1945,6 +2195,9 @@ class Maximum(Operation):\n         return KerasTensor(output_shape, dtype=x1.dtype)\n \n \n+@keras_core_export(\n+    [\"keras_core.operations.maximum\", \"keras_core.operations.numpy.maximum\"]\n+)\n def maximum(x1, x2):\n     if any_symbolic_tensors((x1, x2)):\n         return Maximum().symbolic_call(x1, x2)\n@@ -1983,6 +2236,9 @@ class Meshgrid(Operation):\n         return [KerasTensor(output_shape) for _ in range(len(x))]\n \n \n+@keras_core_export(\n+    [\"keras_core.operations.meshgrid\", \"keras_core.operations.numpy.meshgrid\"]\n+)\n def meshgrid(*x, indexing=\"xy\"):\n     if any_symbolic_tensors(x):\n         return Meshgrid(indexing=indexing).symbolic_call(*x)\n@@ -2010,6 +2266,9 @@ class Min(Operation):\n         )\n \n \n+@keras_core_export(\n+    [\"keras_core.operations.min\", \"keras_core.operations.numpy.min\"]\n+)\n def min(x, axis=None, keepdims=False, initial=None):\n     if any_symbolic_tensors((x,)):\n         return Min(axis=axis, keepdims=keepdims, initial=initial).symbolic_call(\n@@ -2029,6 +2288,9 @@ class Minimum(Operation):\n         return KerasTensor(output_shape, dtype=x1.dtype)\n \n \n+@keras_core_export(\n+    [\"keras_core.operations.minimum\", \"keras_core.operations.numpy.minimum\"]\n+)\n def minimum(x1, x2):\n     if any_symbolic_tensors((x1, x2)):\n         return Minimum().symbolic_call(x1, x2)\n@@ -2046,6 +2308,9 @@ class Mod(Operation):\n         return KerasTensor(output_shape, dtype=x1.dtype)\n \n \n+@keras_core_export(\n+    [\"keras_core.operations.mod\", \"keras_core.operations.numpy.mod\"]\n+)\n def mod(x1, x2):\n     if any_symbolic_tensors((x1, x2)):\n         return Mod().symbolic_call(x1, x2)\n@@ -2096,6 +2361,9 @@ class Moveaxis(Operation):\n         return KerasTensor(output_shape, dtype=x.dtype)\n \n \n+@keras_core_export(\n+    [\"keras_core.operations.moveaxis\", \"keras_core.operations.numpy.moveaxis\"]\n+)\n def moveaxis(x, source, destination):\n     if any_symbolic_tensors((x,)):\n         return Moveaxis(source, destination).symbolic_call(x)\n@@ -2107,6 +2375,12 @@ class NanToNum(Operation):\n         return backend.numpy.nan_to_num(x)\n \n \n+@keras_core_export(\n+    [\n+        \"keras_core.operations.nan_to_num\",\n+        \"keras_core.operations.numpy.nan_to_num\",\n+    ]\n+)\n def nan_to_num(x):\n     return backend.numpy.nan_to_num(x)\n \n@@ -2121,6 +2395,9 @@ class Ndim(Operation):\n         return KerasTensor([len(x.shape)])\n \n \n+@keras_core_export(\n+    [\"keras_core.operations.ndim\", \"keras_core.operations.numpy.ndim\"]\n+)\n def ndim(x):\n     if any_symbolic_tensors((x,)):\n         return Ndim().symbolic_call(x)\n@@ -2132,6 +2409,9 @@ class Nonzero(Operation):\n         return backend.numpy.nonzero(x)\n \n \n+@keras_core_export(\n+    [\"keras_core.operations.nonzero\", \"keras_core.operations.numpy.nonzero\"]\n+)\n def nonzero(x):\n     return backend.numpy.nonzero(x)\n \n@@ -2147,6 +2427,9 @@ class NotEqual(Operation):\n         return KerasTensor(output_shape, dtype=x1.dtype)\n \n \n+@keras_core_export(\n+    [\"keras_core.operations.not_equal\", \"keras_core.operations.numpy.not_equal\"]\n+)\n def not_equal(x1, x2):\n     if any_symbolic_tensors((x1, x2)):\n         return NotEqual().symbolic_call(x1, x2)\n@@ -2163,6 +2446,9 @@ class OnesLike(Operation):\n         return KerasTensor(x.shape, dtype=dtype)\n \n \n+@keras_core_export(\n+    [\"keras_core.operations.ones_like\", \"keras_core.operations.numpy.ones_like\"]\n+)\n def ones_like(x, dtype=None):\n     if any_symbolic_tensors((x,)):\n         return OnesLike().symbolic_call(x, dtype=dtype)\n@@ -2179,6 +2465,12 @@ class ZerosLike(Operation):\n         return KerasTensor(x.shape, dtype=dtype)\n \n \n+@keras_core_export(\n+    [\n+        \"keras_core.operations.zeros_like\",\n+        \"keras_core.operations.numpy.zeros_like\",\n+    ]\n+)\n def zeros_like(x, dtype=None):\n     if any_symbolic_tensors((x,)):\n         return ZerosLike().symbolic_call(x, dtype=dtype)\n@@ -2204,6 +2496,9 @@ class Outer(Operation):\n         return KerasTensor(output_shape, dtype=x1.dtype)\n \n \n+@keras_core_export(\n+    [\"keras_core.operations.outer\", \"keras_core.operations.numpy.outer\"]\n+)\n def outer(x1, x2):\n     if any_symbolic_tensors((x1, x2)):\n         return Outer().symbolic_call(x1, x2)\n@@ -2257,6 +2552,9 @@ class Pad(Operation):\n         return KerasTensor(output_shape, dtype=x.dtype)\n \n \n+@keras_core_export(\n+    [\"keras_core.operations.pad\", \"keras_core.operations.numpy.pad\"]\n+)\n def pad(x, pad_width, mode=\"constant\"):\n     if any_symbolic_tensors((x,)):\n         return Pad(pad_width, mode=mode).symbolic_call(x)\n@@ -2288,6 +2586,9 @@ class Prod(Operation):\n         )\n \n \n+@keras_core_export(\n+    [\"keras_core.operations.prod\", \"keras_core.operations.numpy.prod\"]\n+)\n def prod(x, axis=None, keepdims=False, dtype=None):\n     if any_symbolic_tensors((x,)):\n         return Prod(axis=axis, keepdims=keepdims, dtype=dtype).symbolic_call(x)\n@@ -2308,6 +2609,9 @@ class Ravel(Operation):\n         return KerasTensor(output_shape, dtype=x.dtype)\n \n \n+@keras_core_export(\n+    [\"keras_core.operations.ravel\", \"keras_core.operations.numpy.ravel\"]\n+)\n def ravel(x):\n     if any_symbolic_tensors((x,)):\n         return Ravel().symbolic_call(x)\n@@ -2322,6 +2626,9 @@ class Real(Operation):\n         return KerasTensor(x.shape)\n \n \n+@keras_core_export(\n+    [\"keras_core.operations.real\", \"keras_core.operations.numpy.real\"]\n+)\n def real(x):\n     if any_symbolic_tensors((x,)):\n         return Real().symbolic_call(x)\n@@ -2336,6 +2643,12 @@ class Reciprocal(Operation):\n         return KerasTensor(x.shape)\n \n \n+@keras_core_export(\n+    [\n+        \"keras_core.operations.reciprocal\",\n+        \"keras_core.operations.numpy.reciprocal\",\n+    ]\n+)\n def reciprocal(x):\n     if any_symbolic_tensors((x,)):\n         return Reciprocal().symbolic_call(x)\n@@ -2373,6 +2686,9 @@ class Repeat(Operation):\n         return KerasTensor(output_shape, dtype=x.dtype)\n \n \n+@keras_core_export(\n+    [\"keras_core.operations.repeat\", \"keras_core.operations.numpy.repeat\"]\n+)\n def repeat(x, repeats, axis=None):\n     if any_symbolic_tensors((x,)):\n         return Repeat(repeats, axis=axis).symbolic_call(x)\n@@ -2394,6 +2710,9 @@ class Reshape(Operation):\n         return KerasTensor(output_shape, dtype=x.dtype)\n \n \n+@keras_core_export(\n+    [\"keras_core.operations.reshape\", \"keras_core.operations.numpy.reshape\"]\n+)\n def reshape(x, new_shape):\n     if any_symbolic_tensors((x,)):\n         return Reshape(new_shape).symbolic_call(x)\n@@ -2413,6 +2732,9 @@ class Roll(Operation):\n         return KerasTensor(x.shape, dtype=x.dtype)\n \n \n+@keras_core_export(\n+    [\"keras_core.operations.roll\", \"keras_core.operations.numpy.roll\"]\n+)\n def roll(x, shift, axis=None):\n     if any_symbolic_tensors((x,)):\n         return Roll(shift, axis=axis).symbolic_call(x)\n@@ -2431,6 +2753,9 @@ class Round(Operation):\n         return KerasTensor(x.shape, dtype=x.dtype)\n \n \n+@keras_core_export(\n+    [\"keras_core.operations.round\", \"keras_core.operations.numpy.round\"]\n+)\n def round(x, decimals=0):\n     if any_symbolic_tensors((x,)):\n         return Round(decimals).symbolic_call(x)\n@@ -2445,6 +2770,9 @@ class Sign(Operation):\n         return KerasTensor(x.shape, dtype=\"int32\")\n \n \n+@keras_core_export(\n+    [\"keras_core.operations.sign\", \"keras_core.operations.numpy.sign\"]\n+)\n def sign(x):\n     if any_symbolic_tensors((x,)):\n         return Sign().symbolic_call(x)\n@@ -2459,6 +2787,9 @@ class Sin(Operation):\n         return KerasTensor(x.shape)\n \n \n+@keras_core_export(\n+    [\"keras_core.operations.sin\", \"keras_core.operations.numpy.sin\"]\n+)\n def sin(x):\n     if any_symbolic_tensors((x,)):\n         return Sin().symbolic_call(x)\n@@ -2473,6 +2804,9 @@ class Size(Operation):\n         return KerasTensor([], dtype=\"int32\")\n \n \n+@keras_core_export(\n+    [\"keras_core.operations.size\", \"keras_core.operations.numpy.size\"]\n+)\n def size(x):\n     if any_symbolic_tensors((x,)):\n         return Size().symbolic_call(x)\n@@ -2491,6 +2825,9 @@ class Sort(Operation):\n         return KerasTensor(x.shape, x.dtype)\n \n \n+@keras_core_export(\n+    [\"keras_core.operations.sort\", \"keras_core.operations.numpy.sort\"]\n+)\n def sort(x, axis=-1):\n     if any_symbolic_tensors((x,)):\n         return Sort(axis=axis).symbolic_call(x)\n@@ -2540,6 +2877,9 @@ class Split(Operation):\n         return outputs\n \n \n+@keras_core_export(\n+    [\"keras_core.operations.split\", \"keras_core.operations.numpy.split\"]\n+)\n def split(x, indices_or_sections, axis=0):\n     if any_symbolic_tensors((x,)):\n         return Split(indices_or_sections, axis=axis).symbolic_call(x)\n@@ -2575,6 +2915,9 @@ class Stack(Operation):\n         return KerasTensor(output_shape, dtype=x.dtype)\n \n \n+@keras_core_export(\n+    [\"keras_core.operations.stack\", \"keras_core.operations.numpy.stack\"]\n+)\n def stack(x, axis=0):\n     if any_symbolic_tensors((x,)):\n         return Stack(axis=axis).symbolic_call(x)\n@@ -2599,6 +2942,9 @@ class Std(Operation):\n         )\n \n \n+@keras_core_export(\n+    [\"keras_core.operations.std\", \"keras_core.operations.numpy.std\"]\n+)\n def std(x, axis=None, keepdims=False):\n     if any_symbolic_tensors((x,)):\n         return Std(axis=axis, keepdims=keepdims).symbolic_call(x)\n@@ -2623,6 +2969,9 @@ class Swapaxes(Operation):\n         return KerasTensor(x_shape, dtype=x.dtype)\n \n \n+@keras_core_export(\n+    [\"keras_core.operations.swapaxes\", \"keras_core.operations.numpy.swapaxes\"]\n+)\n def swapaxes(x, axis1, axis2):\n     if any_symbolic_tensors((x,)):\n         return Swapaxes(axis1, axis2).symbolic_call(x)\n@@ -2652,6 +3001,9 @@ class Take(Operation):\n         return KerasTensor(output_shape, dtype=x.dtype)\n \n \n+@keras_core_export(\n+    [\"keras_core.operations.take\", \"keras_core.operations.numpy.take\"]\n+)\n def take(x, indices, axis=None):\n     if any_symbolic_tensors((x, indices)):\n         return Take(axis=axis).symbolic_call(x, indices)\n@@ -2692,6 +3044,12 @@ class TakeAlongAxis(Operation):\n         return KerasTensor(output_shape, dtype=x.dtype)\n \n \n+@keras_core_export(\n+    [\n+        \"keras_core.operations.take_along_axis\",\n+        \"keras_core.operations.numpy.take_along_axis\",\n+    ]\n+)\n def take_along_axis(x, indices, axis=None):\n     if any_symbolic_tensors((x, indices)):\n         return TakeAlongAxis(axis=axis).symbolic_call(x, indices)\n@@ -2706,6 +3064,9 @@ class Tan(Operation):\n         return KerasTensor(x.shape)\n \n \n+@keras_core_export(\n+    [\"keras_core.operations.tan\", \"keras_core.operations.numpy.tan\"]\n+)\n def tan(x):\n     if any_symbolic_tensors((x,)):\n         return Tan().symbolic_call(x)\n@@ -2753,6 +3114,9 @@ class Tensordot(Operation):\n         return KerasTensor(output_shape, dtype=x1.dtype)\n \n \n+@keras_core_export(\n+    [\"keras_core.operations.tensordot\", \"keras_core.operations.numpy.tensordot\"]\n+)\n def tensordot(x1, x2, axes=2):\n     if any_symbolic_tensors((x1, x2)):\n         return Tensordot(axes=axes).symbolic_call(x1, x2)\n@@ -2784,6 +3148,9 @@ class Tile(Operation):\n         return KerasTensor(output_shape, dtype=x.dtype)\n \n \n+@keras_core_export(\n+    [\"keras_core.operations.tile\", \"keras_core.operations.numpy.tile\"]\n+)\n def tile(x, repeats):\n     if any_symbolic_tensors((x,)):\n         return Tile(\n@@ -2812,6 +3179,9 @@ class Trace(Operation):\n         return KerasTensor(output_shape, dtype=x.dtype)\n \n \n+@keras_core_export(\n+    [\"keras_core.operations.trace\", \"keras_core.operations.numpy.trace\"]\n+)\n def trace(x, offset=0, axis1=0, axis2=1):\n     if any_symbolic_tensors((x,)):\n         return Trace(offset, axis1, axis2).symbolic_call(x)\n@@ -2828,6 +3198,9 @@ class Tri(Operation):\n         return KerasTensor((N, M), dtype=dtype)\n \n \n+@keras_core_export(\n+    [\"keras_core.operations.tri\", \"keras_core.operations.numpy.tri\"]\n+)\n def tri(N, M=None, k=0, dtype=\"float32\"):\n     return backend.numpy.tri(N, M=M, k=k, dtype=dtype)\n \n@@ -2844,6 +3217,9 @@ class Tril(Operation):\n         return KerasTensor(x.shape, dtype=x.dtype)\n \n \n+@keras_core_export(\n+    [\"keras_core.operations.tril\", \"keras_core.operations.numpy.tril\"]\n+)\n def tril(x, k=0):\n     if any_symbolic_tensors((x,)):\n         return Tril(k=k).symbolic_call(x)\n@@ -2862,6 +3238,9 @@ class Triu(Operation):\n         return KerasTensor(x.shape, dtype=x.dtype)\n \n \n+@keras_core_export(\n+    [\"keras_core.operations.triu\", \"keras_core.operations.numpy.triu\"]\n+)\n def triu(x, k=0):\n     if any_symbolic_tensors((x,)):\n         return Triu(k=k).symbolic_call(x)\n@@ -2876,6 +3255,9 @@ class Vdot(Operation):\n         return KerasTensor([], dtype=x1.dtype)\n \n \n+@keras_core_export(\n+    [\"keras_core.operations.vdot\", \"keras_core.operations.numpy.vdot\"]\n+)\n def vdot(x1, x2):\n     if any_symbolic_tensors((x1, x2)):\n         return Vdot().symbolic_call(x1, x2)\n@@ -2906,6 +3288,9 @@ class Vstack(Operation):\n         return KerasTensor(output_shape)\n \n \n+@keras_core_export(\n+    [\"keras_core.operations.vstack\", \"keras_core.operations.numpy.vstack\"]\n+)\n def vstack(xs):\n     if any_symbolic_tensors((xs,)):\n         return Vstack().symbolic_call(xs)\n@@ -2925,6 +3310,9 @@ class Where(Operation):\n         return KerasTensor(output_shape, dtype=x1.dtype)\n \n \n+@keras_core_export(\n+    [\"keras_core.operations.where\", \"keras_core.operations.numpy.where\"]\n+)\n def where(condition, x1, x2):\n     if any_symbolic_tensors((condition, x1, x2)):\n         return Where().symbolic_call(condition, x1, x2)\n@@ -2942,6 +3330,9 @@ class Subtract(Operation):\n         return KerasTensor(output_shape, dtype=x1.dtype)\n \n \n+@keras_core_export(\n+    [\"keras_core.operations.subtract\", \"keras_core.operations.numpy.subtract\"]\n+)\n def subtract(x1, x2):\n     if any_symbolic_tensors((x1, x2)):\n         return Subtract().symbolic_call(x1, x2)\n@@ -2959,6 +3350,9 @@ class Multiply(Operation):\n         return KerasTensor(output_shape, dtype=x1.dtype)\n \n \n+@keras_core_export(\n+    [\"keras_core.operations.multiply\", \"keras_core.operations.numpy.multiply\"]\n+)\n def multiply(x1, x2):\n     if any_symbolic_tensors((x1, x2)):\n         return Multiply().symbolic_call(x1, x2)\n@@ -2976,6 +3370,9 @@ class Divide(Operation):\n         return KerasTensor(output_shape, dtype=x1.dtype)\n \n \n+@keras_core_export(\n+    [\"keras_core.operations.divide\", \"keras_core.operations.numpy.divide\"]\n+)\n def divide(x1, x2):\n     if any_symbolic_tensors((x1, x2)):\n         return Divide().symbolic_call(x1, x2)\n@@ -2993,6 +3390,12 @@ class TrueDivide(Operation):\n         return KerasTensor(output_shape, dtype=x1.dtype)\n \n \n+@keras_core_export(\n+    [\n+        \"keras_core.operations.true_divide\",\n+        \"keras_core.operations.numpy.true_divide\",\n+    ]\n+)\n def true_divide(x1, x2):\n     if any_symbolic_tensors((x1, x2)):\n         return TrueDivide().symbolic_call(x1, x2)\n@@ -3010,6 +3413,9 @@ class Power(Operation):\n         return KerasTensor(output_shape, dtype=x1.dtype)\n \n \n+@keras_core_export(\n+    [\"keras_core.operations.power\", \"keras_core.operations.numpy.power\"]\n+)\n def power(x1, x2):\n     if any_symbolic_tensors((x1, x2)):\n         return Power().symbolic_call(x1, x2)\n@@ -3024,6 +3430,9 @@ class Negative(Operation):\n         return KerasTensor(x.shape, dtype=x.dtype)\n \n \n+@keras_core_export(\n+    [\"keras_core.operations.negative\", \"keras_core.operations.numpy.negative\"]\n+)\n def negative(x):\n     if any_symbolic_tensors((x,)):\n         return Negative().symbolic_call(x)\n@@ -3038,6 +3447,9 @@ class Square(Operation):\n         return KerasTensor(x.shape, dtype=x.dtype)\n \n \n+@keras_core_export(\n+    [\"keras_core.operations.square\", \"keras_core.operations.numpy.square\"]\n+)\n def square(x):\n     if any_symbolic_tensors((x,)):\n         return Square().symbolic_call(x)\n@@ -3053,6 +3465,9 @@ class Sqrt(Operation):\n         return KerasTensor(x.shape, dtype=x.dtype)\n \n \n+@keras_core_export(\n+    [\"keras_core.operations.sqrt\", \"keras_core.operations.numpy.sqrt\"]\n+)\n def sqrt(x):\n     if any_symbolic_tensors((x,)):\n         return Sqrt().symbolic_call(x)\n@@ -3083,6 +3498,9 @@ class Squeeze(Operation):\n             return KerasTensor(input_shape, dtype=x.dtype)\n \n \n+@keras_core_export(\n+    [\"keras_core.operations.squeeze\", \"keras_core.operations.numpy.squeeze\"]\n+)\n def squeeze(x, axis=None):\n     if any_symbolic_tensors((x,)):\n         return Squeeze().symbolic_call(x, axis=axis)\n@@ -3113,6 +3531,9 @@ class Transpose(Operation):\n         return KerasTensor(output_shape, dtype=x.dtype)\n \n \n+@keras_core_export(\n+    [\"keras_core.operations.transpose\", \"keras_core.operations.numpy.transpose\"]\n+)\n def transpose(x, axes=None):\n     if any_symbolic_tensors((x,)):\n         return Transpose(axes=axes).symbolic_call(x)\n@@ -3137,6 +3558,9 @@ class Mean(Operation):\n         )\n \n \n+@keras_core_export(\n+    [\"keras_core.operations.mean\", \"keras_core.operations.numpy.mean\"]\n+)\n def mean(x, axis=None, keepdims=False):\n     if any_symbolic_tensors((x,)):\n         return Mean(axis=axis, keepdims=keepdims).symbolic_call(x)\n@@ -3161,6 +3585,9 @@ class Var(Operation):\n         )\n \n \n+@keras_core_export(\n+    [\"keras_core.operations.var\", \"keras_core.operations.numpy.var\"]\n+)\n def var(x, axis=None, keepdims=False):\n     if any_symbolic_tensors((x,)):\n         return Var(axis=axis, keepdims=keepdims).symbolic_call(x)\n@@ -3185,6 +3612,9 @@ class Sum(Operation):\n         )\n \n \n+@keras_core_export(\n+    [\"keras_core.operations.sum\", \"keras_core.operations.numpy.sum\"]\n+)\n def sum(x, axis=None, keepdims=False):\n     if any_symbolic_tensors((x,)):\n         return Sum(axis=axis, keepdims=keepdims).symbolic_call(x)\n@@ -3199,6 +3629,9 @@ class Zeros(Operation):\n         return KerasTensor(shape, dtype=dtype)\n \n \n+@keras_core_export(\n+    [\"keras_core.operations.zeros\", \"keras_core.operations.numpy.zeros\"]\n+)\n def zeros(shape, dtype=\"float32\"):\n     return backend.numpy.zeros(shape, dtype=dtype)\n \n@@ -3211,6 +3644,9 @@ class Ones(Operation):\n         return KerasTensor(shape, dtype=dtype)\n \n \n+@keras_core_export(\n+    [\"keras_core.operations.ones\", \"keras_core.operations.numpy.ones\"]\n+)\n def ones(shape, dtype=\"float32\"):\n     return backend.numpy.ones(shape, dtype=dtype)\n \n@@ -3225,5 +3661,8 @@ class Eye(Operation):\n         return KerasTensor((N, M), dtype=dtype)\n \n \n+@keras_core_export(\n+    [\"keras_core.operations.eye\", \"keras_core.operations.numpy.eye\"]\n+)\n def eye(N, M=None, k=0, dtype=\"float32\"):\n     return backend.numpy.eye(N, M=M, k=k, dtype=dtype)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
