{"custom_id": "fastapi#12e087f0b5c0ccd67a65f19c11dba3e0687dabcf", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 4 | Lines Deleted: 4 | Files Changed: 1 | Hunks: 3 | Methods Changed: 3 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 8 | Churn Cumulative: 59 | Contributors (this commit): 1 | Commits (past 90d): 4 | Contributors (cumulative): 1 | DMM Complexity: None\n\nDIFF:\n@@ -55,13 +55,13 @@ app = FastAPI()\n \n @app.get(\"/users/{user_id}\")\n def read_user(request: Request, user_id: int):\n-    user = get_user(request._scope[\"db\"], user_id=user_id)\n+    user = get_user(request.state.db, user_id=user_id)\n     return user\n \n \n @app.middleware(\"http\")\n-async def close_db(request, call_next):\n-    request._scope[\"db\"] = Session()\n+async def close_db(request: Request, call_next):\n+    request.state.db = Session()\n     response = await call_next(request)\n-    request._scope[\"db\"].close()\n+    request.state.db.close()\n     return response\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#0ed55eb7d314b44cf966610300caf0ff5127da65", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 66 | Contributors (this commit): 1 | Commits (past 90d): 29 | Contributors (cumulative): 1 | DMM Complexity: None\n\nDIFF:\n@@ -1,6 +1,6 @@\n \"\"\"FastAPI framework, high performance, easy to learn, fast to code, ready for production\"\"\"\n \n-__version__ = \"0.5.1\"\n+__version__ = \"0.6.0\"\n \n from .applications import FastAPI\n from .routing import APIRouter\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#984dd71d136d6e041c2ba035bb2f3677256fd088", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 14 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 14 | Churn Cumulative: 14 | Contributors (this commit): 1 | Commits (past 90d): 1 | Contributors (cumulative): 1 | DMM Complexity: 1.0\n\nDIFF:\n@@ -0,0 +1,14 @@\n+import graphene\n+from fastapi import FastAPI\n+from starlette.graphql import GraphQLApp\n+\n+\n+class Query(graphene.ObjectType):\n+    hello = graphene.String(name=graphene.String(default_value=\"stranger\"))\n+\n+    def resolve_hello(self, info, name):\n+        return \"Hello \" + name\n+\n+\n+app = FastAPI()\n+app.add_route(\"/\", GraphQLApp(schema=graphene.Schema(query=Query)))\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#4473e6a096ebdd3601147a970e5b7030838f5a0b", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 68 | Contributors (this commit): 1 | Commits (past 90d): 30 | Contributors (cumulative): 1 | DMM Complexity: None\n\nDIFF:\n@@ -1,6 +1,6 @@\n \"\"\"FastAPI framework, high performance, easy to learn, fast to code, ready for production\"\"\"\n \n-__version__ = \"0.6.0\"\n+__version__ = \"0.6.1\"\n \n from .applications import FastAPI\n from .routing import APIRouter\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#9051ec38169baf34d512c730b744ed2d246fc067", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 2 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 61 | Contributors (this commit): 1 | Commits (past 90d): 5 | Contributors (cumulative): 1 | DMM Complexity: None\n\nDIFF:\n@@ -60,7 +60,7 @@ def read_user(request: Request, user_id: int):\n \n \n @app.middleware(\"http\")\n-async def close_db(request: Request, call_next):\n+async def db_session_middleware(request: Request, call_next):\n     request.state.db = Session()\n     response = await call_next(request)\n     request.state.db.close()\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#e3b4019fa36965e9ab50908ad9d3f35603aea24d", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 13 | Lines Deleted: 8 | Files Changed: 1 | Hunks: 8 | Methods Changed: 6 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 21 | Churn Cumulative: 82 | Contributors (this commit): 1 | Commits (past 90d): 6 | Contributors (cumulative): 1 | DMM Complexity: 1.0\n\nDIFF:\n@@ -1,7 +1,7 @@\n-from fastapi import FastAPI\n+from fastapi import Depends, FastAPI\n from sqlalchemy import Boolean, Column, Integer, String, create_engine\n from sqlalchemy.ext.declarative import declarative_base, declared_attr\n-from sqlalchemy.orm import sessionmaker\n+from sqlalchemy.orm import Session, sessionmaker\n from starlette.requests import Request\n \n # SQLAlchemy specific code, as with any other app\n@@ -11,7 +11,7 @@ SQLALCHEMY_DATABASE_URI = \"sqlite:///./test.db\"\n engine = create_engine(\n     SQLALCHEMY_DATABASE_URI, connect_args={\"check_same_thread\": False}\n )\n-Session = sessionmaker(autocommit=False, autoflush=False, bind=engine)\n+SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\n \n \n class CustomBase:\n@@ -33,7 +33,7 @@ class User(Base):\n \n Base.metadata.create_all(bind=engine)\n \n-db_session = Session()\n+db_session = SessionLocal()\n \n first_user = db_session.query(User).first()\n if not first_user:\n@@ -45,23 +45,28 @@ db_session.close()\n \n \n # Utility\n-def get_user(db_session, user_id: int):\n+def get_user(db_session: Session, user_id: int):\n     return db_session.query(User).filter(User.id == user_id).first()\n \n \n+# Dependency\n+def get_db(request: Request):\n+    return request.state.db\n+\n+\n # FastAPI specific code\n app = FastAPI()\n \n \n @app.get(\"/users/{user_id}\")\n-def read_user(request: Request, user_id: int):\n-    user = get_user(request.state.db, user_id=user_id)\n+def read_user(user_id: int, db: Session = Depends(get_db)):\n+    user = get_user(db, user_id=user_id)\n     return user\n \n \n @app.middleware(\"http\")\n async def db_session_middleware(request: Request, call_next):\n-    request.state.db = Session()\n+    request.state.db = SessionLocal()\n     response = await call_next(request)\n     request.state.db.close()\n     return response\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#9940c1511eb0d01f0b1e9ec3b6312e7485d7dbb4", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 70 | Contributors (this commit): 1 | Commits (past 90d): 31 | Contributors (cumulative): 1 | DMM Complexity: None\n\nDIFF:\n@@ -1,6 +1,6 @@\n \"\"\"FastAPI framework, high performance, easy to learn, fast to code, ready for production\"\"\"\n \n-__version__ = \"0.6.1\"\n+__version__ = \"0.6.2\"\n \n from .applications import FastAPI\n from .routing import APIRouter\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#8e1ecaf22130505f0b04e5b0bafc9040a8e886b7", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 2 | Methods Changed: 2 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 95 | Contributors (this commit): 1 | Commits (past 90d): 4 | Contributors (cumulative): 1 | DMM Complexity: 1.0\n\nDIFF:\n@@ -8,6 +8,7 @@ def get_swagger_ui_html(*, openapi_url: str, title: str) -> HTMLResponse:\n     <html>\n     <head>\n     <link type=\"text/css\" rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/swagger-ui-dist@3/swagger-ui.css\">\n+    <link rel=\"shortcut icon\" href=\"https://fastapi.tiangolo.com/img/favicon.png\">\n     <title>\n     \"\"\"\n         + title\n@@ -55,6 +56,7 @@ def get_redoc_html(*, openapi_url: str, title: str) -> HTMLResponse:\n     <meta charset=\"utf-8\"/>\n     <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n     <link href=\"https://fonts.googleapis.com/css?family=Montserrat:300,400,700|Roboto:300,400,700\" rel=\"stylesheet\">\n+    <link rel=\"shortcut icon\" href=\"https://fastapi.tiangolo.com/img/favicon.png\">\n \n     <!--\n     ReDoc doesn't change outer page styles\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#daaf654868636e4439b3b89df40317a989f33de5", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 72 | Contributors (this commit): 1 | Commits (past 90d): 32 | Contributors (cumulative): 1 | DMM Complexity: None\n\nDIFF:\n@@ -1,6 +1,6 @@\n \"\"\"FastAPI framework, high performance, easy to learn, fast to code, ready for production\"\"\"\n \n-__version__ = \"0.6.2\"\n+__version__ = \"0.6.3\"\n \n from .applications import FastAPI\n from .routing import APIRouter\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#01d6aa3dd1e97bac26ee1a3196a5c18019e9ccd7", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 15 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 15 | Churn Cumulative: 15 | Contributors (this commit): 1 | Commits (past 90d): 1 | Contributors (cumulative): 1 | DMM Complexity: 1.0\n\nDIFF:\n@@ -0,0 +1,15 @@\n+import uvicorn\n+from fastapi import FastAPI\n+\n+app = FastAPI()\n+\n+\n+@app.get(\"/\")\n+def root():\n+    a = \"a\"\n+    b = \"b\" + a\n+    return {\"hello world\": b}\n+\n+\n+if __name__ == \"__main__\":\n+    uvicorn.run(app, host=\"0.0.0.0\", port=8000)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#bbd2198fa2c7fa8a61c282553a5e8c5ed49de2ec", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 53 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 2 | Complexity Δ (Sum/Max): 3/3 | Churn Δ: 53 | Churn Cumulative: 53 | Contributors (this commit): 1 | Commits (past 90d): 1 | Contributors (cumulative): 1 | DMM Complexity: 1.0\n\nDIFF:\n@@ -0,0 +1,53 @@\n+from fastapi import FastAPI\n+from starlette.responses import HTMLResponse\n+from starlette.websockets import WebSocket\n+\n+app = FastAPI()\n+\n+html = \"\"\"\n+<!DOCTYPE html>\n+<html>\n+    <head>\n+        <title>Chat</title>\n+    </head>\n+    <body>\n+        <h1>WebSocket Chat</h1>\n+        <form action=\"\" onsubmit=\"sendMessage(event)\">\n+            <input type=\"text\" id=\"messageText\" autocomplete=\"off\"/>\n+            <button>Send</button>\n+        </form>\n+        <ul id='messages'>\n+        </ul>\n+        <script>\n+            var ws = new WebSocket(\"ws://localhost:8000/ws\");\n+            ws.onmessage = function(event) {\n+                var messages = document.getElementById('messages')\n+                var message = document.createElement('li')\n+                var content = document.createTextNode(event.data)\n+                message.appendChild(content)\n+                messages.appendChild(message)\n+            };\n+            function sendMessage(event) {\n+                var input = document.getElementById(\"messageText\")\n+                ws.send(input.value)\n+                input.value = ''\n+                event.preventDefault()\n+            }\n+        </script>\n+    </body>\n+</html>\n+\"\"\"\n+\n+\n+@app.get(\"/\")\n+async def get():\n+    return HTMLResponse(html)\n+\n+\n+@app.websocket_route(\"/ws\")\n+async def websocket_endpoint(websocket: WebSocket):\n+    await websocket.accept()\n+    while True:\n+        data = await websocket.receive_text()\n+        await websocket.send_text(f\"Message text was: {data}\")\n+    await websocket.close()\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#1f03e85f06aa71ad1704a56d56b734fbac5a016f", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 74 | Contributors (this commit): 1 | Commits (past 90d): 33 | Contributors (cumulative): 1 | DMM Complexity: None\n\nDIFF:\n@@ -1,6 +1,6 @@\n \"\"\"FastAPI framework, high performance, easy to learn, fast to code, ready for production\"\"\"\n \n-__version__ = \"0.6.3\"\n+__version__ = \"0.6.4\"\n \n from .applications import FastAPI\n from .routing import APIRouter\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#0b9fe62a10e77daa7471827ff4b4d7459cb72ce5", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 152 | Lines Deleted: 20 | Files Changed: 9 | Hunks: 30 | Methods Changed: 16 | Complexity Δ (Sum/Max): 12/5 | Churn Δ: 172 | Churn Cumulative: 3050 | Contributors (this commit): 2 | Commits (past 90d): 81 | Contributors (cumulative): 10 | DMM Complexity: 0.9411764705882353\n\nDIFF:\n@@ -1,8 +1,13 @@\n-from fastapi import FastAPI, File\n+from fastapi import FastAPI, File, UploadFile\n \n app = FastAPI()\n \n \n @app.post(\"/files/\")\n-async def create_file(*, file: bytes = File(...)):\n+async def create_file(file: bytes = File(...)):\n     return {\"file_size\": len(file)}\n+\n+\n+@app.post(\"/uploadfile/\")\n+async def create_upload_file(file: UploadFile = File(...)):\n+    return {\"filename\": file.filename}\n\n@@ -1,8 +1,14 @@\n-from fastapi import FastAPI, File, Form\n+from fastapi import FastAPI, File, Form, UploadFile\n \n app = FastAPI()\n \n \n @app.post(\"/files/\")\n-async def create_file(*, file: bytes = File(...), token: str = Form(...)):\n-    return {\"file_size\": len(file), \"token\": token}\n+async def create_file(\n+    file: bytes = File(...), fileb: UploadFile = File(...), token: str = Form(...)\n+):\n+    return {\n+        \"file_size\": len(file),\n+        \"token\": token,\n+        \"fileb_content_type\": fileb.content_type,\n+    }\n\n@@ -6,3 +6,4 @@ from .applications import FastAPI\n from .routing import APIRouter\n from .params import Body, Path, Query, Header, Cookie, Form, File, Security, Depends\n from .exceptions import HTTPException\n+from .datastructures import UploadFile\n\n@@ -0,0 +1,15 @@\n+from typing import Any, Callable, Iterable, Type\n+\n+from starlette.datastructures import UploadFile as StarletteUploadFile\n+\n+\n+class UploadFile(StarletteUploadFile):\n+    @classmethod\n+    def __get_validators__(cls: Type[\"UploadFile\"]) -> Iterable[Callable]:\n+        yield cls.validate\n+\n+    @classmethod\n+    def validate(cls: Type[\"UploadFile\"], v: Any) -> Any:\n+        if not isinstance(v, StarletteUploadFile):\n+            raise ValueError(f\"Expected UploadFile, received: {type(v)}\")\n+        return v\n\n@@ -17,6 +17,7 @@ from pydantic.fields import Field, Required, Shape\n from pydantic.schema import get_annotation_from_schema\n from pydantic.utils import lenient_issubclass\n from starlette.concurrency import run_in_threadpool\n+from starlette.datastructures import UploadFile\n from starlette.requests import Headers, QueryParams, Request\n \n param_supported_types = (\n@@ -323,6 +324,12 @@ async def request_body_to_args(\n                 else:\n                     values[field.name] = deepcopy(field.default)\n                 continue\n+            if (\n+                isinstance(field.schema, params.File)\n+                and lenient_issubclass(field.type_, bytes)\n+                and isinstance(value, UploadFile)\n+            ):\n+                value = await value.read()\n             v_, errors_ = field.validate(value, values, loc=(\"body\", field.alias))\n             if isinstance(errors_, ErrorWrapper):\n                 errors.append(errors_)\n@@ -333,6 +340,21 @@ async def request_body_to_args(\n     return values, errors\n \n \n+def get_schema_compatible_field(*, field: Field) -> Field:\n+    if lenient_issubclass(field.type_, UploadFile):\n+        return Field(\n+            name=field.name,\n+            type_=bytes,\n+            class_validators=field.class_validators,\n+            model_config=field.model_config,\n+            default=field.default,\n+            required=field.required,\n+            alias=field.alias,\n+            schema=field.schema,\n+        )\n+    return field\n+\n+\n def get_body_field(*, dependant: Dependant, name: str) -> Field:\n     flat_dependant = get_flat_dependant(dependant)\n     if not flat_dependant.body_params:\n@@ -340,11 +362,11 @@ def get_body_field(*, dependant: Dependant, name: str) -> Field:\n     first_param = flat_dependant.body_params[0]\n     embed = getattr(first_param.schema, \"embed\", None)\n     if len(flat_dependant.body_params) == 1 and not embed:\n-        return first_param\n+        return get_schema_compatible_field(field=first_param)\n     model_name = \"Body_\" + name\n     BodyModel = create_model(model_name)\n     for f in flat_dependant.body_params:\n-        BodyModel.__fields__[f.name] = f\n+        BodyModel.__fields__[f.name] = get_schema_compatible_field(field=f)\n     required = any(True for f in flat_dependant.body_params if f.required)\n     if any(isinstance(f.schema, params.File) for f in flat_dependant.body_params):\n         BodySchema: Type[params.Body] = params.File\n\n@@ -15,7 +15,6 @@ from pydantic.utils import lenient_issubclass\n from starlette import routing\n from starlette.concurrency import run_in_threadpool\n from starlette.exceptions import HTTPException\n-from starlette.formparsers import UploadFile\n from starlette.requests import Request\n from starlette.responses import JSONResponse, Response\n from starlette.routing import compile_path, get_name, request_response\n@@ -57,9 +56,6 @@ def get_app(\n                     raw_body = await request.form()\n                     form_fields = {}\n                     for field, value in raw_body.items():\n-                        if isinstance(value, UploadFile):\n-                            form_fields[field] = await value.read()\n-                        else:\n                         form_fields[field] = value\n                     if form_fields:\n                         body = form_fields\n\n@@ -0,0 +1,7 @@\n+import pytest\n+from fastapi import UploadFile\n+\n+\n+def test_upload_file_invalid():\n+    with pytest.raises(ValueError):\n+        UploadFile.validate(\"not a Starlette UploadFile\")\n\n@@ -39,7 +39,39 @@ openapi_schema = {\n                     \"required\": True,\n                 },\n             }\n+        },\n+        \"/uploadfile/\": {\n+            \"post\": {\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                    },\n+                    \"422\": {\n+                        \"description\": \"Validation Error\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\n+                                    \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                 }\n+                            }\n+                        },\n+                    },\n+                },\n+                \"summary\": \"Create Upload File Post\",\n+                \"operationId\": \"create_upload_file_uploadfile__post\",\n+                \"requestBody\": {\n+                    \"content\": {\n+                        \"multipart/form-data\": {\n+                            \"schema\": {\n+                                \"$ref\": \"#/components/schemas/Body_create_upload_file\"\n+                            }\n+                        }\n+                    },\n+                    \"required\": True,\n+                },\n+            }\n+        },\n     },\n     \"components\": {\n         \"schemas\": {\n@@ -51,6 +83,14 @@ openapi_schema = {\n                     \"file\": {\"title\": \"File\", \"type\": \"string\", \"format\": \"binary\"}\n                 },\n             },\n+            \"Body_create_upload_file\": {\n+                \"title\": \"Body_create_upload_file\",\n+                \"required\": [\"file\"],\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"file\": {\"title\": \"File\", \"type\": \"string\", \"format\": \"binary\"}\n+                },\n+            },\n             \"ValidationError\": {\n                 \"title\": \"ValidationError\",\n                 \"required\": [\"loc\", \"msg\", \"type\"],\n@@ -131,3 +171,14 @@ def test_post_large_file(tmpdir):\n     response = client.post(\"/files/\", files={\"file\": open(path, \"rb\")})\n     assert response.status_code == 200\n     assert response.json() == {\"file_size\": default_pydantic_max_size + 1}\n+\n+\n+def test_post_upload_file(tmpdir):\n+    path = os.path.join(tmpdir, \"test.txt\")\n+    with open(path, \"wb\") as file:\n+        file.write(b\"<file content>\")\n+\n+    client = TestClient(app)\n+    response = client.post(\"/uploadfile/\", files={\"file\": open(path, \"rb\")})\n+    assert response.status_code == 200\n+    assert response.json() == {\"filename\": \"test.txt\"}\n\n@@ -1,4 +1,5 @@\n import os\n+from pathlib import Path\n \n from starlette.testclient import TestClient\n \n@@ -45,10 +46,11 @@ openapi_schema = {\n         \"schemas\": {\n             \"Body_create_file\": {\n                 \"title\": \"Body_create_file\",\n-                \"required\": [\"file\", \"token\"],\n+                \"required\": [\"file\", \"fileb\", \"token\"],\n                 \"type\": \"object\",\n                 \"properties\": {\n                     \"file\": {\"title\": \"File\", \"type\": \"string\", \"format\": \"binary\"},\n+                    \"fileb\": {\"title\": \"Fileb\", \"type\": \"string\", \"format\": \"binary\"},\n                     \"token\": {\"title\": \"Token\", \"type\": \"string\"},\n                 },\n             },\n@@ -94,20 +96,32 @@ file_required = {\n             \"loc\": [\"body\", \"file\"],\n             \"msg\": \"field required\",\n             \"type\": \"value_error.missing\",\n-        }\n+        },\n+        {\n+            \"loc\": [\"body\", \"fileb\"],\n+            \"msg\": \"field required\",\n+            \"type\": \"value_error.missing\",\n+        },\n     ]\n }\n \n token_required = {\n     \"detail\": [\n+        {\n+            \"loc\": [\"body\", \"fileb\"],\n+            \"msg\": \"field required\",\n+            \"type\": \"value_error.missing\",\n+        },\n         {\n             \"loc\": [\"body\", \"token\"],\n             \"msg\": \"field required\",\n             \"type\": \"value_error.missing\",\n-        }\n+        },\n     ]\n }\n \n+# {'detail': [, {'loc': ['body', 'token'], 'msg': 'field required', 'type': 'value_error.missing'}]}\n+\n file_and_token_required = {\n     \"detail\": [\n         {\n@@ -115,6 +129,11 @@ file_and_token_required = {\n             \"msg\": \"field required\",\n             \"type\": \"value_error.missing\",\n         },\n+        {\n+            \"loc\": [\"body\", \"fileb\"],\n+            \"msg\": \"field required\",\n+            \"type\": \"value_error.missing\",\n+        },\n         {\n             \"loc\": [\"body\", \"token\"],\n             \"msg\": \"field required\",\n@@ -153,14 +172,24 @@ def test_post_file_no_token(tmpdir):\n     assert response.json() == token_required\n \n \n-def test_post_file_and_token(tmpdir):\n-    path = os.path.join(tmpdir, \"test.txt\")\n-    with open(path, \"wb\") as file:\n-        file.write(b\"<file content>\")\n+def test_post_files_and_token(tmpdir):\n+    patha = Path(tmpdir) / \"test.txt\"\n+    pathb = Path(tmpdir) / \"testb.txt\"\n+    patha.write_text(\"<file content>\")\n+    pathb.write_text(\"<file b content>\")\n \n     client = TestClient(app)\n     response = client.post(\n-        \"/files/\", data={\"token\": \"foo\"}, files={\"file\": open(path, \"rb\")}\n+        \"/files/\",\n+        data={\"token\": \"foo\"},\n+        files={\n+            \"file\": patha.open(\"rb\"),\n+            \"fileb\": (\"testb.txt\", pathb.open(\"rb\"), \"text/plain\"),\n+        },\n     )\n     assert response.status_code == 200\n-    assert response.json() == {\"file_size\": 14, \"token\": \"foo\"}\n+    assert response.json() == {\n+        \"file_size\": 14,\n+        \"token\": \"foo\",\n+        \"fileb_content_type\": \"text/plain\",\n+    }\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#c14ec50f7386d43b6a731d9448b6f95fd43381ad", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 77 | Contributors (this commit): 1 | Commits (past 90d): 35 | Contributors (cumulative): 1 | DMM Complexity: None\n\nDIFF:\n@@ -1,6 +1,6 @@\n \"\"\"FastAPI framework, high performance, easy to learn, fast to code, ready for production\"\"\"\n \n-__version__ = \"0.6.4\"\n+__version__ = \"0.7.0\"\n \n from .applications import FastAPI\n from .routing import APIRouter\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#ac2b18bf40c3b24ae5f7998d236a342f2888f9ff", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 79 | Contributors (this commit): 1 | Commits (past 90d): 36 | Contributors (cumulative): 1 | DMM Complexity: None\n\nDIFF:\n@@ -1,6 +1,6 @@\n \"\"\"FastAPI framework, high performance, easy to learn, fast to code, ready for production\"\"\"\n \n-__version__ = \"0.7.0\"\n+__version__ = \"0.7.1\"\n \n from .applications import FastAPI\n from .routing import APIRouter\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#1112ac753899ffb03275625047a5404e57c96ffc", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 7 | Lines Deleted: 7 | Files Changed: 2 | Hunks: 7 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 14 | Churn Cumulative: 107 | Contributors (this commit): 1 | Commits (past 90d): 38 | Contributors (cumulative): 2 | DMM Complexity: None\n\nDIFF:\n@@ -3,7 +3,7 @@\n __version__ = \"0.7.1\"\n \n from .applications import FastAPI\n-from .routing import APIRouter\n-from .params import Body, Path, Query, Header, Cookie, Form, File, Security, Depends\n-from .exceptions import HTTPException\n from .datastructures import UploadFile\n+from .exceptions import HTTPException\n+from .params import Body, Cookie, Depends, File, Form, Header, Path, Query, Security\n+from .routing import APIRouter\n\n@@ -1,10 +1,10 @@\n-from .api_key import APIKeyQuery, APIKeyHeader, APIKeyCookie\n+from .api_key import APIKeyCookie, APIKeyHeader, APIKeyQuery\n from .http import (\n+    HTTPAuthorizationCredentials,\n     HTTPBasic,\n+    HTTPBasicCredentials,\n     HTTPBearer,\n     HTTPDigest,\n-    HTTPBasicCredentials,\n-    HTTPAuthorizationCredentials,\n )\n-from .oauth2 import OAuth2PasswordRequestForm, OAuth2, OAuth2PasswordBearer\n+from .oauth2 import OAuth2, OAuth2PasswordBearer, OAuth2PasswordRequestForm\n from .open_id_connect_url import OpenIdConnect\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#11c755bee34ffa9cd0b28e9e04b944c3c8fd1125", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 14 | Lines Deleted: 10 | Files Changed: 4 | Hunks: 7 | Methods Changed: 4 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 24 | Churn Cumulative: 3399 | Contributors (this commit): 3 | Commits (past 90d): 20 | Contributors (cumulative): 9 | DMM Complexity: 0.5\n\nDIFF:\n@@ -1,9 +1,9 @@\n from fastapi import FastAPI\n \n-from .routers.items import router as items_router\n-from .routers.users import router as users_router\n+from .routers import items\n+from .routers import users\n \n app = FastAPI()\n \n-app.include_router(users_router)\n-app.include_router(items_router, prefix=\"/items\")\n+app.include_router(users.router)\n+app.include_router(items.router, prefix=\"/items\", tags=[\"items\"])\n\n@@ -3,11 +3,11 @@ from fastapi import APIRouter\n router = APIRouter()\n \n \n-@router.get(\"/\", tags=[\"items\"])\n+@router.get(\"/\")\n async def read_items():\n     return [{\"name\": \"Item Foo\"}, {\"name\": \"item Bar\"}]\n \n \n-@router.get(\"/{item_id}\", tags=[\"items\"])\n+@router.get(\"/{item_id}\")\n async def read_item(item_id: str):\n     return {\"name\": \"Fake Specific Item\", \"item_id\": item_id}\n\n@@ -176,8 +176,10 @@ class FastAPI(Starlette):\n \n         return decorator\n \n-    def include_router(self, router: routing.APIRouter, *, prefix: str = \"\") -> None:\n-        self.router.include_router(router, prefix=prefix)\n+    def include_router(\n+        self, router: routing.APIRouter, *, prefix: str = \"\", tags: List[str] = None\n+    ) -> None:\n+        self.router.include_router(router, prefix=prefix, tags=tags)\n \n     def get(\n         self,\n\n@@ -237,7 +237,9 @@ class APIRouter(routing.Router):\n \n         return decorator\n \n-    def include_router(self, router: \"APIRouter\", *, prefix: str = \"\") -> None:\n+    def include_router(\n+        self, router: \"APIRouter\", *, prefix: str = \"\", tags: List[str] = None\n+    ) -> None:\n         if prefix:\n             assert prefix.startswith(\"/\"), \"A path prefix must start with '/'\"\n             assert not prefix.endswith(\n@@ -250,7 +252,7 @@ class APIRouter(routing.Router):\n                     route.endpoint,\n                     response_model=route.response_model,\n                     status_code=route.status_code,\n-                    tags=route.tags or [],\n+                    tags=(route.tags or []) + (tags or []),\n                     summary=route.summary,\n                     description=route.description,\n                     response_description=route.response_description,\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#a174f0190120302492b85b8d19955bf677175117", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 87 | Contributors (this commit): 1 | Commits (past 90d): 25 | Contributors (cumulative): 1 | DMM Complexity: None\n\nDIFF:\n@@ -1,6 +1,6 @@\n \"\"\"FastAPI framework, high performance, easy to learn, fast to code, ready for production\"\"\"\n \n-__version__ = \"0.7.1\"\n+__version__ = \"0.8.0\"\n \n from .applications import FastAPI\n from .datastructures import UploadFile\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#b269655b7f37036d332ce458a6042ec1dfffced7", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 5 | Files Changed: 2 | Hunks: 2 | Methods Changed: 0 | Complexity Δ (Sum/Max): 2/1 | Churn Δ: 7 | Churn Cumulative: 7 | Contributors (this commit): 1 | Commits (past 90d): 4 | Contributors (cumulative): 2 | DMM Complexity: None\n\nDIFF:\n@@ -1,7 +1,7 @@\n from fastapi import FastAPI\n \n app = FastAPI(\n-    title=\"My Super Project\", version=\"2.5.0\", openapi_url=\"/api/v1/openapi.json\"\n+    openapi_url=\"/api/v1/openapi.json\"\n )\n \n \n\n@@ -1,10 +1,7 @@\n from fastapi import FastAPI\n \n app = FastAPI(\n-    title=\"My Super Project\",\n-    version=\"2.5.0\",\n-    openapi_url=\"/api/v1/openapi.json\",\n-    docs_url=\"/api/v1/docs\",\n+    docs_url=\"/documentation\",\n     redoc_url=None,\n )\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#108c2f3c0eff512b2bf06e447a1cbf473636bc9a", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 5 | Lines Deleted: 11 | Files Changed: 4 | Hunks: 5 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 16 | Churn Cumulative: 289 | Contributors (this commit): 2 | Commits (past 90d): 15 | Contributors (cumulative): 6 | DMM Complexity: None\n\nDIFF:\n@@ -1,8 +1,6 @@\n from fastapi import FastAPI\n \n-app = FastAPI(\n-    openapi_url=\"/api/v1/openapi.json\"\n-)\n+app = FastAPI(openapi_url=\"/api/v1/openapi.json\")\n \n \n @app.get(\"/items/\")\n\n@@ -1,9 +1,6 @@\n from fastapi import FastAPI\n \n-app = FastAPI(\n-    docs_url=\"/documentation\",\n-    redoc_url=None,\n-)\n+app = FastAPI(docs_url=\"/documentation\", redoc_url=None)\n \n \n @app.get(\"/items/\")\n\n@@ -1,7 +1,6 @@\n from fastapi import FastAPI\n \n-from .routers import items\n-from .routers import users\n+from .routers import items, users\n \n app = FastAPI()\n \n\n@@ -1,6 +1,6 @@\n from enum import Enum\n from types import GeneratorType\n-from typing import Any, Set\n+from typing import Any, List, Set\n \n from pydantic import BaseModel\n from pydantic.json import ENCODERS_BY_TYPE\n@@ -70,7 +70,7 @@ def jsonable_encoder(\n                 )\n             )\n         return encoded_list\n-    errors = []\n+    errors: List[Exception] = []\n     try:\n         if custom_encoder and type(obj) in custom_encoder:\n             encoder = custom_encoder[type(obj)]\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#3f7b7837fbd19014d2737632e4284fdf1fc73121", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 3 | Lines Deleted: 3 | Files Changed: 1 | Hunks: 3 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 6 | Churn Cumulative: 124 | Contributors (this commit): 1 | Commits (past 90d): 2 | Contributors (cumulative): 1 | DMM Complexity: None\n\nDIFF:\n@@ -62,7 +62,7 @@ class FakeDB:\n             \"johndoe\": {\n                 \"username\": \"johndoe\",\n                 \"password\": \"shouldbehashed\",\n-                \"fist_name\": \"John\",\n+                \"first_name\": \"John\",\n                 \"last_name\": \"Doe\",\n             }\n         }\n@@ -87,7 +87,7 @@ class TokenUserData(BaseModel):\n class UserInDB(BaseModel):\n     username: str\n     password: str\n-    fist_name: str\n+    first_name: str\n     last_name: str\n \n \n@@ -109,7 +109,7 @@ def require_user(\n \n class UserOut(BaseModel):\n     username: str\n-    fist_name: str\n+    first_name: str\n     last_name: str\n \n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#4f852878d6fb703487b0df8410b58f7b311ab18e", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 89 | Contributors (this commit): 1 | Commits (past 90d): 25 | Contributors (cumulative): 1 | DMM Complexity: None\n\nDIFF:\n@@ -1,6 +1,6 @@\n \"\"\"FastAPI framework, high performance, easy to learn, fast to code, ready for production\"\"\"\n \n-__version__ = \"0.8.0\"\n+__version__ = \"0.9.0\"\n \n from .applications import FastAPI\n from .datastructures import UploadFile\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#c64f8346ae500450a53b65d32561f93eac16b43e", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 109 | Lines Deleted: 0 | Files Changed: 3 | Hunks: 3 | Methods Changed: 4 | Complexity Δ (Sum/Max): 4/2 | Churn Δ: 109 | Churn Cumulative: 109 | Contributors (this commit): 1 | Commits (past 90d): 3 | Contributors (cumulative): 3 | DMM Complexity: 1.0\n\nDIFF:\n@@ -0,0 +1,10 @@\n+from typing import List\n+\n+from fastapi import FastAPI, Header\n+\n+app = FastAPI()\n+\n+\n+@app.get(\"/items/\")\n+async def read_items(x_token: List[str] = Header(None)):\n+    return {\"X-Token values\": x_token}\n\n@@ -0,0 +1,11 @@\n+from typing import List\n+\n+from fastapi import FastAPI, Query\n+\n+app = FastAPI()\n+\n+\n+@app.get(\"/items/\")\n+async def read_items(q: List[str] = Query(None)):\n+    query_items = {\"q\": q}\n+    return query_items\n\n@@ -0,0 +1,88 @@\n+from starlette.testclient import TestClient\n+\n+from query_params_str_validations.tutorial011 import app\n+\n+client = TestClient(app)\n+\n+openapi_schema = {\n+    \"openapi\": \"3.0.2\",\n+    \"info\": {\"title\": \"Fast API\", \"version\": \"0.1.0\"},\n+    \"paths\": {\n+        \"/items/\": {\n+            \"get\": {\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                    },\n+                    \"422\": {\n+                        \"description\": \"Validation Error\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\n+                                    \"$ref\": \"#/components/schemas/HTTPValidationError\"\n+                                }\n+                            }\n+                        },\n+                    },\n+                },\n+                \"summary\": \"Read Items Get\",\n+                \"operationId\": \"read_items_items__get\",\n+                \"parameters\": [\n+                    {\n+                        \"required\": False,\n+                        \"schema\": {\n+                            \"title\": \"Q\",\n+                            \"type\": \"array\",\n+                            \"items\": {\"type\": \"string\"},\n+                        },\n+                        \"name\": \"q\",\n+                        \"in\": \"query\",\n+                    }\n+                ],\n+            }\n+        }\n+    },\n+    \"components\": {\n+        \"schemas\": {\n+            \"ValidationError\": {\n+                \"title\": \"ValidationError\",\n+                \"required\": [\"loc\", \"msg\", \"type\"],\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"loc\": {\n+                        \"title\": \"Location\",\n+                        \"type\": \"array\",\n+                        \"items\": {\"type\": \"string\"},\n+                    },\n+                    \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n+                    \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n+                },\n+            },\n+            \"HTTPValidationError\": {\n+                \"title\": \"HTTPValidationError\",\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"detail\": {\n+                        \"title\": \"Detail\",\n+                        \"type\": \"array\",\n+                        \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n+                    }\n+                },\n+            },\n+        }\n+    },\n+}\n+\n+\n+def test_openapi_schema():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200\n+    assert response.json() == openapi_schema\n+\n+\n+def test_multi_query_values():\n+    url = \"/items/?q=foo&q=bar\"\n+    response = client.get(url)\n+    assert response.status_code == 200\n+    assert response.json() == {\"q\": [\"foo\", \"bar\"]}\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#9778542ba65a5768fef74624f7d02443e908fab5", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 91 | Contributors (this commit): 1 | Commits (past 90d): 26 | Contributors (cumulative): 1 | DMM Complexity: None\n\nDIFF:\n@@ -1,6 +1,6 @@\n \"\"\"FastAPI framework, high performance, easy to learn, fast to code, ready for production\"\"\"\n \n-__version__ = \"0.9.0\"\n+__version__ = \"0.9.1\"\n \n from .applications import FastAPI\n from .datastructures import UploadFile\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#3984e9b8ac437f063ff5c14f320cca3faf551258", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 594 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 15 | Complexity Δ (Sum/Max): 15/15 | Churn Δ: 594 | Churn Cumulative: 594 | Contributors (this commit): 1 | Commits (past 90d): 1 | Contributors (cumulative): 1 | DMM Complexity: 1.0\n\nDIFF:\n@@ -0,0 +1,594 @@\n+from fastapi import FastAPI\n+from fastapi.openapi.models import AdditionalResponse\n+from pydantic import BaseModel\n+from starlette.responses import JSONResponse\n+from starlette.testclient import TestClient\n+\n+app = FastAPI()\n+\n+\n+class Item(BaseModel):\n+    name: str\n+    price: float = None\n+\n+\n+class Response400(BaseModel):\n+    '''HTTP 4xx Response Schema'''\n+    title: str\n+    detail: str\n+    error_code: int # functional error ref\n+\n+\n+response_403 = AdditionalResponse(\n+    status_code = 403,\n+    description = 'Forbidden',\n+    models = [\n+        Response400,\n+    ],\n+)\n+\n+additional_responses = [\n+    response_403,\n+]\n+\n+@app.api_route(\n+    \"/items/{item_id}\",\n+    methods=[\"GET\"],\n+    additional_responses=additional_responses,\n+)\n+def get_items(item_id: str):\n+    return {\"item_id\": item_id}\n+\n+\n+def get_not_decorated(item_id: str):\n+    return {\"item_id\": item_id}\n+\n+\n+app.add_api_route(\n+    \"/items-not-decorated/{item_id}\",\n+    get_not_decorated,\n+    additional_responses=additional_responses,\n+)\n+\n+\n+@app.delete(\n+    \"/items/{item_id}\",\n+    additional_responses=additional_responses,\n+)\n+def delete_item(item_id: str, item: Item):\n+    return {\"item_id\": item_id, \"item\": item}\n+\n+\n+@app.head(\n+    \"/items/{item_id}\",\n+    additional_responses=additional_responses,\n+)\n+def head_item(item_id: str):\n+    return JSONResponse(headers={\"x-fastapi-item-id\": item_id})\n+\n+\n+@app.options(\n+    \"/items/{item_id}\",\n+    additional_responses=additional_responses,\n+)\n+def options_item(item_id: str):\n+    return JSONResponse(headers={\"x-fastapi-item-id\": item_id})\n+\n+\n+@app.patch(\n+    \"/items/{item_id}\",\n+    additional_responses=additional_responses,\n+)\n+def patch_item(item_id: str, item: Item):\n+    return {\"item_id\": item_id, \"item\": item}\n+\n+\n+@app.trace(\n+    \"/items/{item_id}\",\n+    additional_responses=additional_responses,\n+)\n+def trace_item(item_id: str):\n+    return JSONResponse(media_type=\"message/http\")\n+\n+\n+client = TestClient(app)\n+\n+openapi_schema = {\n+    \"openapi\": \"3.0.2\",\n+    \"info\": {\n+        \"title\": \"Fast API\",\n+        \"version\": \"0.1.0\"\n+    },\n+    \"paths\": {\n+        \"/items/{item_id}\": {\n+            \"get\": {\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {}\n+                            }\n+                        },\n+                    },\n+                    \"403\": {\n+                        \"description\": \"Forbidden\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\n+                                    \"$ref\": \"#/components/schemas/Response400\"\n+                                }\n+                            }\n+                        },\n+                    },\n+                    \"422\": {\n+                        \"description\": \"Validation Error\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\n+                                    \"$ref\":\n+                                    \"#/components/schemas/HTTPValidationError\"\n+                                }\n+                            }\n+                        },\n+                    },\n+                },\n+                \"summary\":\n+                \"Get Items Get\",\n+                \"operationId\":\n+                \"get_items_items__item_id__get\",\n+                \"parameters\": [{\n+                    \"required\": True,\n+                    \"schema\": {\n+                        \"title\": \"Item_Id\",\n+                        \"type\": \"string\"\n+                    },\n+                    \"name\": \"item_id\",\n+                    \"in\": \"path\",\n+                }],\n+            },\n+            \"delete\": {\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {}\n+                            }\n+                        },\n+                    },\n+                    \"403\": {\n+                        \"description\": \"Forbidden\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\n+                                    \"$ref\": \"#/components/schemas/Response400\"\n+                                }\n+                            }\n+                        },\n+                    },\n+                    \"422\": {\n+                        \"description\": \"Validation Error\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\n+                                    \"$ref\":\n+                                    \"#/components/schemas/HTTPValidationError\"\n+                                }\n+                            }\n+                        },\n+                    },\n+                },\n+                \"summary\":\n+                \"Delete Item Delete\",\n+                \"operationId\":\n+                \"delete_item_items__item_id__delete\",\n+                \"parameters\": [{\n+                    \"required\": True,\n+                    \"schema\": {\n+                        \"title\": \"Item_Id\",\n+                        \"type\": \"string\"\n+                    },\n+                    \"name\": \"item_id\",\n+                    \"in\": \"path\",\n+                }],\n+                \"requestBody\": {\n+                    \"content\": {\n+                        \"application/json\": {\n+                            \"schema\": {\n+                                \"$ref\": \"#/components/schemas/Item\"\n+                            }\n+                        }\n+                    },\n+                    \"required\": True,\n+                },\n+            },\n+            \"options\": {\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {}\n+                            }\n+                        },\n+                    },\n+                    \"403\": {\n+                        \"description\": \"Forbidden\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\n+                                    \"$ref\": \"#/components/schemas/Response400\"\n+                                }\n+                            }\n+                        },\n+                    },\n+                    \"403\": {\n+                        \"description\": \"Forbidden\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\n+                                    \"$ref\": \"#/components/schemas/Response400\"\n+                                }\n+                            }\n+                        },\n+                    },\n+                    \"422\": {\n+                        \"description\": \"Validation Error\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\n+                                    \"$ref\":\n+                                    \"#/components/schemas/HTTPValidationError\"\n+                                }\n+                            }\n+                        },\n+                    },\n+                },\n+                \"summary\":\n+                \"Options Item Options\",\n+                \"operationId\":\n+                \"options_item_items__item_id__options\",\n+                \"parameters\": [{\n+                    \"required\": True,\n+                    \"schema\": {\n+                        \"title\": \"Item_Id\",\n+                        \"type\": \"string\"\n+                    },\n+                    \"name\": \"item_id\",\n+                    \"in\": \"path\",\n+                }],\n+            },\n+            \"head\": {\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {}\n+                            }\n+                        },\n+                    },\n+                    \"403\": {\n+                        \"description\": \"Forbidden\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\n+                                    \"$ref\": \"#/components/schemas/Response400\"\n+                                }\n+                            }\n+                        },\n+                    },\n+                    \"422\": {\n+                        \"description\": \"Validation Error\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\n+                                    \"$ref\":\n+                                    \"#/components/schemas/HTTPValidationError\"\n+                                }\n+                            }\n+                        },\n+                    },\n+                },\n+                \"summary\":\n+                \"Head Item Head\",\n+                \"operationId\":\n+                \"head_item_items__item_id__head\",\n+                \"parameters\": [{\n+                    \"required\": True,\n+                    \"schema\": {\n+                        \"title\": \"Item_Id\",\n+                        \"type\": \"string\"\n+                    },\n+                    \"name\": \"item_id\",\n+                    \"in\": \"path\",\n+                }],\n+            },\n+            \"patch\": {\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {}\n+                            }\n+                        },\n+                    },\n+                    \"403\": {\n+                        \"description\": \"Forbidden\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\n+                                    \"$ref\": \"#/components/schemas/Response400\"\n+                                }\n+                            }\n+                        },\n+                    },\n+                    \"422\": {\n+                        \"description\": \"Validation Error\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\n+                                    \"$ref\":\n+                                    \"#/components/schemas/HTTPValidationError\"\n+                                }\n+                            }\n+                        },\n+                    },\n+                },\n+                \"summary\":\n+                \"Patch Item Patch\",\n+                \"operationId\":\n+                \"patch_item_items__item_id__patch\",\n+                \"parameters\": [{\n+                    \"required\": True,\n+                    \"schema\": {\n+                        \"title\": \"Item_Id\",\n+                        \"type\": \"string\"\n+                    },\n+                    \"name\": \"item_id\",\n+                    \"in\": \"path\",\n+                }],\n+                \"requestBody\": {\n+                    \"content\": {\n+                        \"application/json\": {\n+                            \"schema\": {\n+                                \"$ref\": \"#/components/schemas/Item\"\n+                            }\n+                        }\n+                    },\n+                    \"required\": True,\n+                },\n+            },\n+            \"trace\": {\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {}\n+                            }\n+                        },\n+                    },\n+                    \"403\": {\n+                        \"description\": \"Forbidden\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\n+                                    \"$ref\": \"#/components/schemas/Response400\"\n+                                }\n+                            }\n+                        },\n+                    },\n+                    \"422\": {\n+                        \"description\": \"Validation Error\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\n+                                    \"$ref\":\n+                                    \"#/components/schemas/HTTPValidationError\"\n+                                }\n+                            }\n+                        },\n+                    },\n+                },\n+                \"summary\":\n+                \"Trace Item Trace\",\n+                \"operationId\":\n+                \"trace_item_items__item_id__trace\",\n+                \"parameters\": [{\n+                    \"required\": True,\n+                    \"schema\": {\n+                        \"title\": \"Item_Id\",\n+                        \"type\": \"string\"\n+                    },\n+                    \"name\": \"item_id\",\n+                    \"in\": \"path\",\n+                }],\n+            },\n+        },\n+        \"/items-not-decorated/{item_id}\": {\n+            \"get\": {\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {}\n+                            }\n+                        },\n+                    },\n+                    \"403\": {\n+                        \"description\": \"Forbidden\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\n+                                    \"$ref\": \"#/components/schemas/Response400\"\n+                                }\n+                            }\n+                        },\n+                    },\n+                    \"422\": {\n+                        \"description\": \"Validation Error\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\n+                                    \"$ref\":\n+                                    \"#/components/schemas/HTTPValidationError\"\n+                                }\n+                            }\n+                        },\n+                    },\n+                },\n+                \"summary\":\n+                \"Get Not Decorated Get\",\n+                \"operationId\":\n+                \"get_not_decorated_items-not-decorated__item_id__get\",\n+                \"parameters\": [{\n+                    \"required\": True,\n+                    \"schema\": {\n+                        \"title\": \"Item_Id\",\n+                        \"type\": \"string\"\n+                    },\n+                    \"name\": \"item_id\",\n+                    \"in\": \"path\",\n+                }],\n+            }\n+        },\n+    },\n+    \"components\": {\n+        \"schemas\": {\n+            \"Item\": {\n+                \"title\": \"Item\",\n+                \"required\": [\"name\"],\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"name\": {\n+                        \"title\": \"Name\",\n+                        \"type\": \"string\"\n+                    },\n+                    \"price\": {\n+                        \"title\": \"Price\",\n+                        \"type\": \"number\"\n+                    },\n+                },\n+            },\n+            \"Response400\": {\n+                \"title\": \"Response400\",\n+                \"description\": \"HTTP 4xx Response Schema\",\n+                \"required\": [\"title\", \"detail\", \"error_code\"],\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"title\": {\n+                        \"title\": \"Title\",\n+                        \"type\": \"string\"\n+                    },\n+                    \"detail\": {\n+                        \"title\": \"Detail\",\n+                        \"type\": \"string\"\n+                    },\n+                    \"error_code\": {\n+                        \"title\": \"Error_Code\",\n+                        \"type\": \"integer\"\n+                    },\n+                },\n+            },\n+            \"ValidationError\": {\n+                \"title\": \"ValidationError\",\n+                \"required\": [\"loc\", \"msg\", \"type\"],\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"loc\": {\n+                        \"title\": \"Location\",\n+                        \"type\": \"array\",\n+                        \"items\": {\n+                            \"type\": \"string\"\n+                        },\n+                    },\n+                    \"msg\": {\n+                        \"title\": \"Message\",\n+                        \"type\": \"string\"\n+                    },\n+                    \"type\": {\n+                        \"title\": \"Error Type\",\n+                        \"type\": \"string\"\n+                    },\n+                },\n+            },\n+            \"HTTPValidationError\": {\n+                \"title\": \"HTTPValidationError\",\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"detail\": {\n+                        \"title\": \"Detail\",\n+                        \"type\": \"array\",\n+                        \"items\": {\n+                            \"$ref\": \"#/components/schemas/ValidationError\"\n+                        },\n+                    }\n+                },\n+            },\n+        }\n+    },\n+}\n+\n+\n+def test_openapi_schema():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200\n+    assert response.json() == openapi_schema\n+\n+\n+def test_get_api_route():\n+    response = client.get(\"/items/foo\")\n+    assert response.status_code == 200\n+    assert response.json() == {\"item_id\": \"foo\"}\n+\n+\n+def test_get_api_route_not_decorated():\n+    response = client.get(\"/items-not-decorated/foo\")\n+    assert response.status_code == 200\n+    assert response.json() == {\"item_id\": \"foo\"}\n+\n+\n+def test_delete():\n+    response = client.delete(\"/items/foo\", json={\"name\": \"Foo\"})\n+    assert response.status_code == 200\n+    assert response.json() == {\n+        \"item_id\": \"foo\",\n+        \"item\": {\n+            \"name\": \"Foo\",\n+            \"price\": None\n+        }\n+    }\n+\n+\n+def test_head():\n+    response = client.head(\"/items/foo\")\n+    assert response.status_code == 200\n+    assert response.headers[\"x-fastapi-item-id\"] == \"foo\"\n+\n+\n+def test_options():\n+    response = client.options(\"/items/foo\")\n+    assert response.status_code == 200\n+    assert response.headers[\"x-fastapi-item-id\"] == \"foo\"\n+\n+\n+def test_patch():\n+    response = client.patch(\"/items/foo\", json={\"name\": \"Foo\"})\n+    assert response.status_code == 200\n+    assert response.json() == {\n+        \"item_id\": \"foo\",\n+        \"item\": {\n+            \"name\": \"Foo\",\n+            \"price\": None\n+        }\n+    }\n+\n+\n+def test_trace():\n+    response = client.request(\"trace\", \"/items/foo\")\n+    assert response.status_code == 200\n+    assert response.headers[\"content-type\"] == \"message/http\"\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
