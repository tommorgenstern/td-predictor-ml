{"custom_id": "scrapy#51e5aadd1db42d2f1aa4a69df89a57e7e7954a7c", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 5 | Lines Deleted: 6 | Files Changed: 1 | Hunks: 2 | Methods Changed: 2 | Complexity Δ (Sum/Max): -1/0 | Churn Δ: 11 | Churn Cumulative: 491 | Contributors (this commit): 6 | Commits (past 90d): 10 | Contributors (cumulative): 6 | DMM Complexity: 0.0\n\nDIFF:\n@@ -33,12 +33,6 @@ class FormRequest(Request):\n     def from_response(cls, response, formname=None, formnumber=0, formdata=None,\n                       clickdata=None, dont_click=False, **kwargs):\n         from scrapy.selector.lxmldocument import LxmlDocument\n-        if not hasattr(formdata, \"items\"):\n-            try:\n-                formdata = dict(formdata) if formdata else {}\n-            except (ValueError, TypeError):\n-                raise ValueError('formdata should be a dict or iterable of tuples')\n-\n         kwargs.setdefault('encoding', response.encoding)\n         root = LxmlDocument(response, lxml.html.HTMLParser)\n         form = _get_form(root, formname, formnumber, response)\n@@ -78,6 +72,11 @@ def _get_form(root, formname, formnumber, response):\n             return form\n \n def _get_inputs(form, formdata, dont_click, clickdata, response):\n+    try:\n+        formdata = dict(formdata or ())\n+    except (ValueError, TypeError):\n+        raise ValueError('formdata should be a dict or iterable of tuples')\n+\n     inputs = [(n, v) for n, v in form.form_values() if n not in formdata]\n \n     if not dont_click:\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "scrapy#b88bdd05c4ccb6a388069368a0b4965bdafd5906", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 44 | Lines Deleted: 32 | Files Changed: 2 | Hunks: 28 | Methods Changed: 12 | Complexity Δ (Sum/Max): 3/2 | Churn Δ: 76 | Churn Cumulative: 1059 | Contributors (this commit): 6 | Commits (past 90d): 17 | Contributors (cumulative): 12 | DMM Complexity: 0.8\n\nDIFF:\n@@ -80,23 +80,26 @@ def _get_inputs(form, formdata, dont_click, clickdata, response):\n     inputs = [(n, v) for n, v in form.form_values() if n not in formdata]\n \n     if not dont_click:\n-        clickables = [el for el in form.inputs if el.type == 'submit']\n-        if clickables:\n-            clickable = _get_clickable(clickdata, clickables, form)\n+        clickable = _get_clickable(clickdata, form)\n+        if clickable and clickable[0] not in formdata:\n             inputs.append(clickable)\n \n     inputs.extend(formdata.iteritems())\n     return inputs\n \n-def _get_clickable(clickdata, clickables, form):\n+def _get_clickable(clickdata, form):\n     \"\"\"\n     Returns the clickable element specified in clickdata,\n     if the latter is given. If not, it returns the first\n     clickable element found\n     \"\"\"\n+    clickables = [el for el in form.inputs if el.type == 'submit']\n+    if not clickables:\n+        return\n+\n     # If we don't have clickdata, we just use the first clickable element\n     if clickdata is None:\n-        el = clickables.pop(0)\n+        el = clickables[0]\n         return (el.name, el.value)\n \n     # If clickdata is given, we compare it to the clickable elements to find a\n@@ -122,4 +125,4 @@ def _get_clickable(clickdata, clickables, form):\n         raise ValueError(\"Multiple elements found (%r) matching the criteria \"\n                          \"in clickdata: %r\" % (el, clickdata))\n     else:\n-        raise ValueError('No clickeable element matching clickdata: %r' % (clickdata,))\n+        raise ValueError('No clickable element matching clickdata: %r' % (clickdata,))\n\n@@ -271,54 +271,54 @@ class FormRequestTest(RequestTest):\n         self.assertEqual(fs['one'].value, '1')\n         self.assertEqual(fs['two'].value, '2')\n \n-    def test_from_response_submit_first_clickeable(self):\n+    def test_from_response_submit_first_clickable(self):\n         respbody = \"\"\"\n <form action=\"get.php\" method=\"GET\">\n-<input type=\"submit\" name=\"clickeable1\" value=\"clicked1\">\n+<input type=\"submit\" name=\"clickable1\" value=\"clicked1\">\n <input type=\"hidden\" name=\"one\" value=\"1\">\n <input type=\"hidden\" name=\"two\" value=\"3\">\n-<input type=\"submit\" name=\"clickeable2\" value=\"clicked2\">\n+<input type=\"submit\" name=\"clickable2\" value=\"clicked2\">\n </form>\n         \"\"\"\n         response = HtmlResponse(\"http://www.example.com/this/list.html\", body=respbody)\n         r1 = self.request_class.from_response(response, formdata={'two': '2'})\n         urlargs = cgi.parse_qs(urlparse(r1.url).query)\n-        self.assertEqual(urlargs['clickeable1'], ['clicked1'])\n-        self.assertFalse('clickeable2' in urlargs, urlargs)\n+        self.assertEqual(urlargs['clickable1'], ['clicked1'])\n+        self.assertFalse('clickable2' in urlargs, urlargs)\n         self.assertEqual(urlargs['one'], ['1'])\n         self.assertEqual(urlargs['two'], ['2'])\n \n-    def test_from_response_submit_not_first_clickeable(self):\n+    def test_from_response_submit_not_first_clickable(self):\n         respbody = \"\"\"\n <form action=\"get.php\" method=\"GET\">\n-<input type=\"submit\" name=\"clickeable1\" value=\"clicked1\">\n+<input type=\"submit\" name=\"clickable1\" value=\"clicked1\">\n <input type=\"hidden\" name=\"one\" value=\"1\">\n <input type=\"hidden\" name=\"two\" value=\"3\">\n-<input type=\"submit\" name=\"clickeable2\" value=\"clicked2\">\n+<input type=\"submit\" name=\"clickable2\" value=\"clicked2\">\n </form>\n         \"\"\"\n         response = HtmlResponse(\"http://www.example.com/this/list.html\", body=respbody)\n-        r1 = self.request_class.from_response(response, formdata={'two': '2'}, clickdata={'name': 'clickeable2'})\n+        r1 = self.request_class.from_response(response, formdata={'two': '2'}, clickdata={'name': 'clickable2'})\n         urlargs = cgi.parse_qs(urlparse(r1.url).query)\n-        self.assertEqual(urlargs['clickeable2'], ['clicked2'])\n-        self.assertFalse('clickeable1' in urlargs, urlargs)\n+        self.assertEqual(urlargs['clickable2'], ['clicked2'])\n+        self.assertFalse('clickable1' in urlargs, urlargs)\n         self.assertEqual(urlargs['one'], ['1'])\n         self.assertEqual(urlargs['two'], ['2'])\n \n     def test_from_response_multiple_clickdata(self):\n         respbody = \"\"\"\n <form action=\"get.php\" method=\"GET\">\n-<input type=\"submit\" name=\"clickeable\" value=\"clicked1\">\n-<input type=\"submit\" name=\"clickeable\" value=\"clicked2\">\n+<input type=\"submit\" name=\"clickable\" value=\"clicked1\">\n+<input type=\"submit\" name=\"clickable\" value=\"clicked2\">\n <input type=\"hidden\" name=\"one\" value=\"clicked1\">\n <input type=\"hidden\" name=\"two\" value=\"clicked2\">\n </form>\n         \"\"\"\n         response = HtmlResponse(\"http://www.example.com/this/list.html\", body=respbody)\n         r1 = self.request_class.from_response(response, \\\n-                clickdata={'name': 'clickeable', 'value': 'clicked2'})\n+                clickdata={'name': 'clickable', 'value': 'clicked2'})\n         urlargs = cgi.parse_qs(urlparse(r1.url).query)\n-        self.assertEqual(urlargs['clickeable'], ['clicked2'])\n+        self.assertEqual(urlargs['clickable'], ['clicked2'])\n         self.assertEqual(urlargs['one'], ['clicked1'])\n         self.assertEqual(urlargs['two'], ['clicked2'])\n \n@@ -341,45 +341,54 @@ class FormRequestTest(RequestTest):\n     def test_from_response_multiple_forms_clickdata(self):\n         body = u\"\"\"\n         <form name=\"form1\">\n-          <input type=\"submit\" name=\"clickeable\" value=\"clicked\">\n+          <input type=\"submit\" name=\"clickable\" value=\"clicked\">\n           <input type=\"hidden\" name=\"field1\" value=\"value1\">\n         </form>\n         <form name=\"form2\">\n-          <input type=\"submit\" name=\"clickeable\" value=\"clicked\">\n+          <input type=\"submit\" name=\"clickable\" value=\"clicked\">\n           <input type=\"hidden\" name=\"field2\" value=\"value2\">\n         </form>\n         \"\"\"\n         res = HtmlResponse(\"http://example.com\", body=body, encoding='utf-8')\n         req = self.request_class.from_response(res, \\\n                                               formname='form2', \\\n-                                              clickdata={'name': 'clickeable'})\n+                                              clickdata={'name': 'clickable'})\n         urlargs = cgi.parse_qs(urlparse(req.url).query)\n-        self.assertEqual(urlargs['clickeable'], ['clicked'])\n+        self.assertEqual(urlargs['clickable'], ['clicked'])\n         self.assertEqual(urlargs['field2'], ['value2'])\n         self.assertFalse('field1' in urlargs, urlargs)\n \n+    def test_from_response_multiple_forms_clickdata(self):\n+        body = u'<form><input type=\"submit\" name=\"clickme\" value=\"one\"></form>'\n+        res = HtmlResponse(\"http://example.com\", body=body, encoding='utf-8')\n+        req = self.request_class.from_response(res, \\\n+                                               formdata={'clickme': 'two'}, \\\n+                                               clickdata={'name': 'clickme'})\n+        urlargs = cgi.parse_qs(urlparse(req.url).query)\n+        self.assertEqual(urlargs['clickme'], ['two'])\n+\n     def test_from_response_dont_click(self):\n         respbody = \"\"\"\n <form action=\"get.php\" method=\"GET\">\n-<input type=\"submit\" name=\"clickeable1\" value=\"clicked1\">\n+<input type=\"submit\" name=\"clickable1\" value=\"clicked1\">\n <input type=\"hidden\" name=\"one\" value=\"1\">\n <input type=\"hidden\" name=\"two\" value=\"3\">\n-<input type=\"submit\" name=\"clickeable2\" value=\"clicked2\">\n+<input type=\"submit\" name=\"clickable2\" value=\"clicked2\">\n </form>\n         \"\"\"\n         response = HtmlResponse(\"http://www.example.com/this/list.html\", body=respbody)\n         r1 = self.request_class.from_response(response, dont_click=True)\n         urlargs = cgi.parse_qs(urlparse(r1.url).query)\n-        self.assertFalse('clickeable1' in urlargs, urlargs)\n-        self.assertFalse('clickeable2' in urlargs, urlargs)\n+        self.assertFalse('clickable1' in urlargs, urlargs)\n+        self.assertFalse('clickable2' in urlargs, urlargs)\n \n     def test_from_response_ambiguous_clickdata(self):\n         respbody = \"\"\"\n <form action=\"get.php\" method=\"GET\">\n-<input type=\"submit\" name=\"clickeable1\" value=\"clicked1\">\n+<input type=\"submit\" name=\"clickable1\" value=\"clicked1\">\n <input type=\"hidden\" name=\"one\" value=\"1\">\n <input type=\"hidden\" name=\"two\" value=\"3\">\n-<input type=\"submit\" name=\"clickeable2\" value=\"clicked2\">\n+<input type=\"submit\" name=\"clickable2\" value=\"clicked2\">\n </form>\n         \"\"\"\n         response = HtmlResponse(\"http://www.example.com/this/list.html\", body=respbody)\n@@ -391,7 +400,7 @@ class FormRequestTest(RequestTest):\n     def test_from_response_non_matching_clickdata(self):\n         body = \"\"\"\n         <form>\n-          <input type=\"submit\" name=\"clickeable\" value=\"clicked\">\n+          <input type=\"submit\" name=\"clickable\" value=\"clicked\">\n         </form>\n         \"\"\"\n         res = HtmlResponse(\"http://example.com\", body=body)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "scrapy#39395eb4f7b241db91f28e6b98f6f5bb492655b3", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 508 | Contributors (this commit): 6 | Commits (past 90d): 12 | Contributors (cumulative): 6 | DMM Complexity: None\n\nDIFF:\n@@ -117,7 +117,7 @@ def _get_clickable(clickdata, form):\n     # We didn't find it, so now we build an XPath expression out of the other\n     # arguments, because they can be used as such\n     xpath = u'.//*' + \\\n-            u''.join(u'[@%s=\"%s\"]' % tuple(c) for c in clickdata.iteritems())\n+            u''.join(u'[@%s=\"%s\"]' % c for c in clickdata.iteritems())\n     el = form.xpath(xpath)\n     if len(el) == 1:\n         return (el[0].name, el[0].value)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "scrapy#5b0df465e77ffe8be1d04c264449b8e4fada398d", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 18 | Lines Deleted: 7 | Files Changed: 2 | Hunks: 7 | Methods Changed: 4 | Complexity Δ (Sum/Max): 0/1 | Churn Δ: 25 | Churn Cumulative: 1086 | Contributors (this commit): 6 | Commits (past 90d): 20 | Contributors (cumulative): 12 | DMM Complexity: 1.0\n\nDIFF:\n@@ -93,7 +93,7 @@ def _get_clickable(clickdata, form):\n     if the latter is given. If not, it returns the first\n     clickable element found\n     \"\"\"\n-    clickables = [el for el in form.inputs if el.type == 'submit']\n+    clickables = [el for el in form.xpath('.//input[@type=\"submit\"]')]\n     if not clickables:\n         return\n \n\n@@ -338,27 +338,38 @@ class FormRequestTest(RequestTest):\n         urlargs = cgi.parse_qs(urlparse(r1.url).query)\n         self.assertTrue(urlargs[u'price in \\u00a3'.encode('utf-8')])\n \n+    def test_from_response_with_select(self):\n+        body = u\"\"\"\n+        <form name=\"form1\">\n+          <select name=\"inputname\"><option selected=\"selected\" value=\"inputvalue\">text</option></select>\n+          <input type=\"submit\" name=\"clickable\" value=\"clicked\">\n+        </form>\n+        \"\"\"\n+        res = HtmlResponse(\"http://example.com\", body=body, encoding='utf-8')\n+        req = self.request_class.from_response(res)\n+        urlargs = cgi.parse_qs(urlparse(req.url).query)\n+        self.assertEqual(urlargs['inputname'], ['inputvalue'])\n+\n     def test_from_response_multiple_forms_clickdata(self):\n         body = u\"\"\"\n         <form name=\"form1\">\n-          <input type=\"submit\" name=\"clickable\" value=\"clicked\">\n+          <input type=\"submit\" name=\"clickable\" value=\"clicked1\">\n           <input type=\"hidden\" name=\"field1\" value=\"value1\">\n         </form>\n         <form name=\"form2\">\n-          <input type=\"submit\" name=\"clickable\" value=\"clicked\">\n+          <input type=\"submit\" name=\"clickable\" value=\"clicked2\">\n           <input type=\"hidden\" name=\"field2\" value=\"value2\">\n         </form>\n         \"\"\"\n         res = HtmlResponse(\"http://example.com\", body=body, encoding='utf-8')\n-        req = self.request_class.from_response(res, \\\n-                                              formname='form2', \\\n+        req = self.request_class.from_response(res, formname='form2', \\\n                 clickdata={'name': 'clickable'})\n         urlargs = cgi.parse_qs(urlparse(req.url).query)\n-        self.assertEqual(urlargs['clickable'], ['clicked'])\n+        self.assertEqual(urlargs['clickable'], ['clicked2'])\n         self.assertEqual(urlargs['field2'], ['value2'])\n         self.assertFalse('field1' in urlargs, urlargs)\n \n-    def test_from_response_multiple_forms_clickdata(self):\n+    def test_from_response_override_clickable(self):\n         body = u'<form><input type=\"submit\" name=\"clickme\" value=\"one\"></form>'\n         res = HtmlResponse(\"http://example.com\", body=body, encoding='utf-8')\n         req = self.request_class.from_response(res, \\\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "scrapy#e24107feb8f57f232c696120e29a1c6fba2872e2", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 43 | Lines Deleted: 23 | Files Changed: 2 | Hunks: 6 | Methods Changed: 5 | Complexity Δ (Sum/Max): -2/1 | Churn Δ: 66 | Churn Cumulative: 222 | Contributors (this commit): 5 | Commits (past 90d): 2 | Contributors (cumulative): 8 | DMM Complexity: 1.0\n\nDIFF:\n@@ -7,7 +7,7 @@ from urlparse import urljoin\n from scrapy.link import Link\n from scrapy.utils.url import canonicalize_url\n from scrapy.utils.python import unicode_to_str, flatten\n-from scrapy.selector.libxml2sel import XPathSelectorList, HtmlXPathSelector\n+from scrapy.selector import XPathSelectorList, HtmlXPathSelector\n \n class HTMLImageLinkExtractor(object):\n     '''HTMLImageLinkExtractor objects are intended to extract image links from HTML pages\n@@ -25,28 +25,26 @@ class HTMLImageLinkExtractor(object):\n         self.canonicalize = canonicalize\n \n     def extract_from_selector(self, selector, encoding, parent=None):\n-        ret = []\n-        def _add_link(url_sel, alt_sel=None):\n-            url = flatten([url_sel.extract()])\n-            alt = flatten([alt_sel.extract()]) if alt_sel else (u'', )\n-            if url:\n-                ret.append(Link(unicode_to_str(url[0], encoding), alt[0]))\n+        \"\"\"Extract the links of all the images found in the selector given.\"\"\"\n \n-        if selector.xmlNode.type == 'element':\n-            if selector.xmlNode.name == 'img':\n-                _add_link(selector.select('@src'), selector.select('@alt') or \\\n-                          selector.select('@title'))\n-            else:\n-                children = selector.select('child::*')\n-                if len(children):\n-                    for child in children:\n-                        ret.extend(self.extract_from_selector(child, encoding, parent=selector))\n-                elif selector.xmlNode.name == 'a' and not parent:\n-                    _add_link(selector.select('@href'), selector.select('@title'))\n-        else:\n-            _add_link(selector)\n+        selectors = [selector] if selector.select(\"local-name()\").re(\"^img$\") \\\n+                        else selector.select(\".//img\")\n+\n+        def _img_attr(img, attr):\n+            \"\"\"Helper to get the value of the given ``attr`` of the ``img``\n+            selector\"\"\"\n+            res = img.select(\"@%s\" % attr).extract()\n+            return res[0] if res else None\n+\n+        links = []\n+        for img in selectors:\n+            url = _img_attr(img, \"src\")\n+            text = _img_attr(img, \"alt\") or _img_attr(img, \"title\") or \"\"\n+            if not url:\n+                continue\n+            links.append(Link(unicode_to_str(url, encoding), text=text))\n+        return links\n \n-        return ret\n \n     def extract_links(self, response):\n         xs = HtmlXPathSelector(response)\n\n@@ -267,6 +267,7 @@ class HTMLImageLinkExtractorTestCase(unittest.TestCase):\n \n         lx = HTMLImageLinkExtractor(locations=('//img', ), unique=False)\n         links_2 = lx.extract_links(self.response)\n+\n         self.assertEqual(links_2,\n             [ Link(url='http://example.com/sample1.jpg', text=u'sample 1'),\n               Link(url='http://example.com/sample2.jpg', text=u'sample 2'),\n@@ -283,8 +284,29 @@ class HTMLImageLinkExtractorTestCase(unittest.TestCase):\n         lx = HTMLImageLinkExtractor(locations=('//a', ))\n         links_4 = lx.extract_links(self.response)\n         self.assertEqual(links_4,\n-            [ Link(url='http://example.com/sample2.jpg', text=u'sample 2'),\n-              Link(url='http://example.com/sample3.html', text=u'sample 3') ])\n+            [Link(url='http://example.com/sample2.jpg', text=u'sample 2')])\n+\n+    def test_extraction_over_selector(self):\n+        from scrapy.selector import HtmlXPathSelector\n+        body = \"\"\"\n+        <html>\n+          <head>\n+            <base href=\"http://example.com\"/>\n+          </head>\n+        <body>\n+          <b>Image: </b>\n+          <img src=\"/images/items/CH29.jpg\" width=\"270\" height=\"270\" alt=\"CH29\">\n+        </body>\n+        </html>\n+        \"\"\"\n+        response = HtmlResponse(url='http://example.com/mypage.html', body=body)\n+        xp = HtmlXPathSelector(response)\n+        lx = HTMLImageLinkExtractor(locations=[xp.select(\"//img\")], canonicalize=False)\n+\n+        result = lx.extract_links(response)\n+        self.assertTrue(result)\n+        self.assertEquals('http://example.com/images/items/CH29.jpg', result[0].url)\n+\n \n if __name__ == \"__main__\":\n     unittest.main()\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "scrapy#6bb40fe5a8e2f42809c531706ce167786ab71e2e", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 7 | Lines Deleted: 13 | Files Changed: 1 | Hunks: 4 | Methods Changed: 3 | Complexity Δ (Sum/Max): -1/0 | Churn Δ: 20 | Churn Cumulative: 109 | Contributors (this commit): 4 | Commits (past 90d): 2 | Contributors (cumulative): 4 | DMM Complexity: 1.0\n\nDIFF:\n@@ -26,25 +26,19 @@ class HTMLImageLinkExtractor(object):\n \n     def extract_from_selector(self, selector, encoding, parent=None):\n         \"\"\"Extract the links of all the images found in the selector given.\"\"\"\n-\n-        selectors = [selector] if selector.select(\"local-name()\").re(\"^img$\") \\\n-                        else selector.select(\".//img\")\n-\n-        def _img_attr(img, attr):\n-            \"\"\"Helper to get the value of the given ``attr`` of the ``img``\n-            selector\"\"\"\n-            res = img.select(\"@%s\" % attr).extract()\n-            return res[0] if res else None\n-\n         links = []\n-        for img in selectors:\n-            url = _img_attr(img, \"src\")\n-            text = _img_attr(img, \"alt\") or _img_attr(img, \"title\") or \"\"\n+        for img in selector.select('descendant-or-self::img'):\n+            url = self._img_attr(img, \"src\")\n             if not url:\n                 continue\n+            text = self._img_attr(img, \"alt\") or self._img_attr(img, \"title\") or \"\"\n             links.append(Link(unicode_to_str(url, encoding), text=text))\n         return links\n \n+    def _img_attr(self, img, attr):\n+        \"\"\"Get the value of the given ``attr`` of ``img`` tag\"\"\"\n+        res = img.select(\"@%s\" % attr).extract()\n+        return res[0] if res else None\n \n     def extract_links(self, response):\n         xs = HtmlXPathSelector(response)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "scrapy#21e03729a35cb3bd2440cbbc7198ac8508e6eb6e", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 4 | Lines Deleted: 4 | Files Changed: 1 | Hunks: 2 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 8 | Churn Cumulative: 354 | Contributors (this commit): 2 | Commits (past 90d): 2 | Contributors (cumulative): 2 | DMM Complexity: None\n\nDIFF:\n@@ -1,11 +1,11 @@\n \"\"\"\n XPath selectors\n \n-Two backends are currently available: libxml2 and lxml\n-\n To select the backend explicitly use the SELECTORS_BACKEND variable in your\n-project. Otherwise, libxml2 will be tried first. If libxml2 is not available,\n-lxml will be used.\n+project settings.\n+\n+Two backends are currently available: lxml (default) and libxml2.\n+\n \"\"\"\n \n from scrapy.conf import settings\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "scrapy#1c5294bee1eb85dd1d0b752d5c5d588803c0b6d9", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 6 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 8 | Churn Cumulative: 19 | Contributors (this commit): 2 | Commits (past 90d): 1 | Contributors (cumulative): 2 | DMM Complexity: None\n\nDIFF:\n@@ -1,8 +1,4 @@\n # This package will contain the spiders of your Scrapy project\n #\n-# To create the first spider for your project use this command:\n-#\n-#   scrapy genspider myspider myspider-domain.com\n-#\n-# For more info see:\n-# http://doc.scrapy.org/topics/spiders.html\n+# Please refer to the documentation for information on how to create and manage\n+# your spiders.\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "scrapy#1e521a3ff30fbe0a7031aea273f92ffce54bb4da", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 3 | Lines Deleted: 3 | Files Changed: 1 | Hunks: 2 | Methods Changed: 2 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 6 | Churn Cumulative: 437 | Contributors (this commit): 1 | Commits (past 90d): 3 | Contributors (cumulative): 1 | DMM Complexity: None\n\nDIFF:\n@@ -60,6 +60,9 @@ def _print_commands(inproject):\n     cmds = _get_commands_dict(inproject)\n     for cmdname, cmdclass in sorted(cmds.iteritems()):\n         print \"  %-13s %s\" % (cmdname, cmdclass.short_desc())\n+    if not inproject:\n+        print\n+        print \"  [ more ]      More commands available when run from project directory\"\n     print\n     print 'Use \"scrapy <command> -h\" to see more info about a command'\n \n@@ -67,9 +70,6 @@ def _print_unknown_command(cmdname, inproject):\n     _print_header(inproject)\n     print \"Unknown command: %s\\n\" % cmdname\n     print 'Use \"scrapy\" to see available commands' \n-    if not inproject:\n-        print\n-        print \"More commands are available in project mode\"\n \n def _run_print_help(parser, func, *a, **kw):\n     try:\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "scrapy#3a7c28f1557ce386d91bed2e16ea6658af90d0be", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 29 | Lines Deleted: 2 | Files Changed: 2 | Hunks: 3 | Methods Changed: 2 | Complexity Δ (Sum/Max): 3/2 | Churn Δ: 31 | Churn Cumulative: 1117 | Contributors (this commit): 7 | Commits (past 90d): 22 | Contributors (cumulative): 14 | DMM Complexity: 1.0\n\nDIFF:\n@@ -77,11 +77,11 @@ def _get_inputs(form, formdata, dont_click, clickdata, response):\n     except (ValueError, TypeError):\n         raise ValueError('formdata should be a dict or iterable of tuples')\n \n-    inputs = [(n, v) for n, v in form.form_values() if n not in formdata]\n+    inputs = [(n, u'' if v is None else v) for n, v in form.fields.items() if n not in formdata]\n \n     if not dont_click:\n         clickable = _get_clickable(clickdata, form)\n-        if clickable and clickable[0] not in formdata:\n+        if clickable and clickable[0] not in formdata and not clickable[0] is None:\n             inputs.append(clickable)\n \n     inputs.extend(formdata.iteritems())\n\n@@ -496,6 +496,33 @@ class FormRequestTest(RequestTest):\n         response = HtmlResponse(\"http://www.example.com/formname.html\", body=respbody)\n         self.assertRaises(IndexError, self.request_class.from_response, response, formname=\"form3\", formnumber=2)\n \n+    def test_from_response_missed_value(self):\n+        respbody = \"\"\"\n+<form action=\"get.php\" method=\"POST\">\n+    <input type=\"hidden\" name=\"key1\" value=\"val1\">\n+    <input type=\"hidden\" name=\"key2\">\n+    <input type=\"radio\" name=\"key3\" checked>\n+    <input type=\"checkbox\" name=\"key4\" checked>\n+    <textarea name=\"key5\">val5</textarea>\n+    <textarea name=\"key6\"/>\n+    <select name=\"key7\">\n+        <option name=\"opt1\" selected></option>\n+        <option name=\"opt2\">opt2</option>\n+    </select>\n+    <input type=\"submit\" value=\"val8\">\n+</form>\n+        \"\"\"\n+        res = HtmlResponse(\"http://example.com\", body=respbody, encoding='utf-8')\n+        req = self.request_class.from_response(res)\n+        fs = cgi.parse_qs(req.body, True)\n+        self.assertEqual(fs['key1'], ['val1'])\n+        self.assertEqual(fs['key2'], [''])\n+        self.assertEqual(fs['key3'], ['on'])\n+        self.assertEqual(fs['key4'], ['on'])\n+        self.assertEqual(fs['key5'], ['val5'])\n+        self.assertEqual(fs['key6'], [''])\n+        self.assertEqual(fs['key7'], [''])\n+        self.assertEqual(set(fs), set(['key1', 'key2', 'key3', 'key4', 'key5', 'key6', 'key7']))\n \n class XmlRpcRequestTest(RequestTest):\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "scrapy#97f362d64e6f9775477ab72aacc611cbbd26d2ee", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 0 | Lines Deleted: 142 | Files Changed: 2 | Hunks: 3 | Methods Changed: 10 | Complexity Δ (Sum/Max): -26/0 | Churn Δ: 142 | Churn Cumulative: 384 | Contributors (this commit): 5 | Commits (past 90d): 5 | Contributors (cumulative): 8 | DMM Complexity: 0.2708333333333333\n\nDIFF:\n@@ -1,75 +0,0 @@\n-\"\"\"\n-This module implements the HtmlImageLinkExtractor for extracting \n-image links only.\n-\"\"\"\n-\n-from urlparse import urljoin\n-from scrapy.link import Link\n-from scrapy.utils.url import canonicalize_url\n-from scrapy.utils.python import unicode_to_str, flatten\n-from scrapy.selector import XPathSelectorList, HtmlXPathSelector\n-\n-class HTMLImageLinkExtractor(object):\n-    '''HTMLImageLinkExtractor objects are intended to extract image links from HTML pages\n-    given certain xpath locations.\n-\n-    These locations can be passed in a list/tuple either when instanciating the LinkExtractor,\n-    or whenever you call extract_links.\n-    If no locations are specified in any of these places, a default pattern '//img' will be used.\n-    If locations are specified when instanciating the LinkExtractor, and also when calling extract_links,\n-    both locations will be used for that call of extract_links'''\n-\n-    def __init__(self, locations=None, unique=True, canonicalize=True):\n-        self.locations = flatten([locations])\n-        self.unique = unique\n-        self.canonicalize = canonicalize\n-\n-    def extract_from_selector(self, selector, encoding, parent=None):\n-        \"\"\"Extract the links of all the images found in the selector given.\"\"\"\n-        links = []\n-        for img in selector.select('descendant-or-self::img'):\n-            url = self._img_attr(img, \"src\")\n-            if not url:\n-                continue\n-            text = self._img_attr(img, \"alt\") or self._img_attr(img, \"title\") or \"\"\n-            links.append(Link(unicode_to_str(url, encoding), text=text))\n-        return links\n-\n-    def _img_attr(self, img, attr):\n-        \"\"\"Get the value of the given ``attr`` of ``img`` tag\"\"\"\n-        res = img.select(\"@%s\" % attr).extract()\n-        return res[0] if res else None\n-\n-    def extract_links(self, response):\n-        xs = HtmlXPathSelector(response)\n-        base_url = xs.select('//base/@href').extract()\n-        base_url = urljoin(response.url, base_url[0].encode(response.encoding)) if base_url else response.url\n-\n-        links = []\n-        for location in self.locations:\n-            if isinstance(location, basestring):\n-                selectors = xs.select(location)\n-            elif isinstance(location, (XPathSelectorList, HtmlXPathSelector)):\n-                selectors = [location] if isinstance(location, HtmlXPathSelector) else location\n-            else:\n-                continue\n-\n-            for selector in selectors:\n-                links.extend(self.extract_from_selector(selector, response.encoding))\n-\n-        seen, ret = set(), []\n-        for link in links:\n-            link.url = urljoin(base_url, link.url)\n-            if self.unique:\n-                if link.url in seen:\n-                    continue\n-                else:\n-                    seen.add(link.url)\n-            if self.canonicalize:\n-                link.url = canonicalize_url(link.url)\n-            ret.append(link)\n-\n-        return ret\n-\n-    def matches(self, url):\n-        return False\n\n@@ -4,7 +4,6 @@ import unittest\n from scrapy.http import HtmlResponse\n from scrapy.link import Link\n from scrapy.contrib.linkextractors.sgml import SgmlLinkExtractor, BaseSgmlLinkExtractor\n-from scrapy.contrib.linkextractors.image import HTMLImageLinkExtractor\n from scrapy.tests import get_testdata\n \n class LinkExtractorTestCase(unittest.TestCase):\n@@ -241,72 +240,6 @@ class SgmlLinkExtractorTestCase(unittest.TestCase):\n                          [Link(url='http://otherdomain.com/base/item/12.html', text='Item 12')])\n \n \n-class HTMLImageLinkExtractorTestCase(unittest.TestCase):\n-    def setUp(self):\n-        body = get_testdata('link_extractor', 'image_linkextractor.html')\n-        self.response = HtmlResponse(url='http://example.com/index', body=body)\n-\n-    def tearDown(self):\n-        del self.response\n-\n-    def test_urls_type(self):\n-        '''Test that the resulting urls are regular strings and not a unicode objects'''\n-        lx = HTMLImageLinkExtractor()\n-        links = lx.extract_links(self.response)\n-        self.assertTrue(all(isinstance(link.url, str) for link in links))\n-\n-    def test_extraction(self):\n-        '''Test the extractor's behaviour among different situations'''\n-\n-        lx = HTMLImageLinkExtractor(locations=('//img', ))\n-        links_1 = lx.extract_links(self.response)\n-        self.assertEqual(links_1,\n-            [ Link(url='http://example.com/sample1.jpg', text=u'sample 1'),\n-              Link(url='http://example.com/sample2.jpg', text=u'sample 2'),\n-              Link(url='http://example.com/sample4.jpg', text=u'sample 4') ])\n-\n-        lx = HTMLImageLinkExtractor(locations=('//img', ), unique=False)\n-        links_2 = lx.extract_links(self.response)\n-\n-        self.assertEqual(links_2,\n-            [ Link(url='http://example.com/sample1.jpg', text=u'sample 1'),\n-              Link(url='http://example.com/sample2.jpg', text=u'sample 2'),\n-              Link(url='http://example.com/sample4.jpg', text=u'sample 4'),\n-              Link(url='http://example.com/sample4.jpg', text=u'sample 4 repetition') ])\n-\n-        lx = HTMLImageLinkExtractor(locations=('//div[@id=\"wrapper\"]', ))\n-        links_3 = lx.extract_links(self.response)\n-        self.assertEqual(links_3,\n-            [ Link(url='http://example.com/sample1.jpg', text=u'sample 1'),\n-              Link(url='http://example.com/sample2.jpg', text=u'sample 2'),\n-              Link(url='http://example.com/sample4.jpg', text=u'sample 4') ])\n-\n-        lx = HTMLImageLinkExtractor(locations=('//a', ))\n-        links_4 = lx.extract_links(self.response)\n-        self.assertEqual(links_4,\n-            [Link(url='http://example.com/sample2.jpg', text=u'sample 2')])\n-\n-    def test_extraction_over_selector(self):\n-        from scrapy.selector import HtmlXPathSelector\n-        body = \"\"\"\n-        <html>\n-          <head>\n-            <base href=\"http://example.com\"/>\n-          </head>\n-        <body>\n-          <b>Image: </b>\n-          <img src=\"/images/items/CH29.jpg\" width=\"270\" height=\"270\" alt=\"CH29\">\n-        </body>\n-        </html>\n-        \"\"\"\n-        response = HtmlResponse(url='http://example.com/mypage.html', body=body)\n-        xp = HtmlXPathSelector(response)\n-        lx = HTMLImageLinkExtractor(locations=[xp.select(\"//img\")], canonicalize=False)\n-\n-        result = lx.extract_links(response)\n-        self.assertTrue(result)\n-        self.assertEquals('http://example.com/images/items/CH29.jpg', result[0].url)\n-\n \n if __name__ == \"__main__\":\n     unittest.main()\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "scrapy#63e4355fba1ec90bec9cf751b8b6fc3483062377", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 12 | Lines Deleted: 12 | Files Changed: 1 | Hunks: 6 | Methods Changed: 4 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 24 | Churn Cumulative: 538 | Contributors (this commit): 7 | Commits (past 90d): 15 | Contributors (cumulative): 7 | DMM Complexity: 0.0\n\nDIFF:\n@@ -32,10 +32,8 @@ class FormRequest(Request):\n     @classmethod\n     def from_response(cls, response, formname=None, formnumber=0, formdata=None,\n                       clickdata=None, dont_click=False, **kwargs):\n-        from scrapy.selector.lxmldocument import LxmlDocument\n         kwargs.setdefault('encoding', response.encoding)\n-        root = LxmlDocument(response, lxml.html.HTMLParser)\n-        form = _get_form(root, formname, formnumber, response)\n+        form = _get_form(response, formname, formnumber)\n         formdata = _get_inputs(form, formdata, dont_click, clickdata, response)\n         url = form.action or form.base_url\n         return cls(url, method=form.method, formdata=formdata, **kwargs)\n@@ -47,11 +45,10 @@ def _urlencode(seq, enc):\n               for v in (vs if hasattr(vs, '__iter__') else [vs])]\n     return urllib.urlencode(values, doseq=1)\n \n-def _get_form(root, formname, formnumber, response):\n-    \"\"\"\n-    Uses all the passed arguments to get the required form\n-    element\n-    \"\"\"\n+def _get_form(response, formname, formnumber):\n+    \"\"\"Find the form element \"\"\"\n+    from scrapy.selector.lxmldocument import LxmlDocument\n+    root = LxmlDocument(response, lxml.html.HTMLParser)\n     if not root.forms:\n         raise ValueError(\"No <form> element found in %s\" % response)\n \n@@ -77,15 +74,18 @@ def _get_inputs(form, formdata, dont_click, clickdata, response):\n     except (ValueError, TypeError):\n         raise ValueError('formdata should be a dict or iterable of tuples')\n \n-    inputs = [(n, u'' if v is None else v) for n, v in form.fields.items() if n not in formdata]\n+    inputs = form.xpath('descendant::input[@type!=\"submit\"]|descendant::textarea|descendant::select')\n+    values = [(k, u'' if v is None else v) \\\n+              for k, v in ((e.name, e.value) for e in inputs) \\\n+              if k not in formdata]\n \n     if not dont_click:\n         clickable = _get_clickable(clickdata, form)\n         if clickable and clickable[0] not in formdata and not clickable[0] is None:\n-            inputs.append(clickable)\n+            values.append(clickable)\n \n-    inputs.extend(formdata.iteritems())\n-    return inputs\n+    values.extend(formdata.iteritems())\n+    return values\n \n def _get_clickable(clickdata, form):\n     \"\"\"\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "scrapy#84d5f5ea53b77bee08743af7a9fb940687b46adb", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 117 | Lines Deleted: 3 | Files Changed: 2 | Hunks: 4 | Methods Changed: 9 | Complexity Δ (Sum/Max): 15/9 | Churn Δ: 120 | Churn Cumulative: 1261 | Contributors (this commit): 7 | Commits (past 90d): 25 | Contributors (cumulative): 14 | DMM Complexity: 0.9714285714285714\n\nDIFF:\n@@ -74,10 +74,13 @@ def _get_inputs(form, formdata, dont_click, clickdata, response):\n     except (ValueError, TypeError):\n         raise ValueError('formdata should be a dict or iterable of tuples')\n \n-    inputs = form.xpath('descendant::input[@type!=\"submit\"]|descendant::textarea|descendant::select')\n+    inputs = form.xpath('descendant::textarea'\n+                        '|descendant::select'\n+                        '|descendant::input[@type!=\"submit\" '\n+                        'and ((@type!=\"checkbox\" and @type!=\"radio\") or @checked)]')\n     values = [(k, u'' if v is None else v) \\\n-              for k, v in ((e.name, e.value) for e in inputs) \\\n-              if k not in formdata]\n+              for k, v in ((e.name, _value(e)) for e in inputs) \\\n+              if k and k not in formdata]\n \n     if not dont_click:\n         clickable = _get_clickable(clickdata, form)\n@@ -87,6 +90,14 @@ def _get_inputs(form, formdata, dont_click, clickdata, response):\n     values.extend(formdata.iteritems())\n     return values\n \n+def _value(ele):\n+    v = ele.value\n+    if v is None and ele.tag == 'select' and not ele.multiple:\n+        o = ele.value_options\n+        if o:\n+            return o[0]\n+    return v\n+\n def _get_clickable(clickdata, form):\n     \"\"\"\n     Returns the clickable element specified in clickdata,\n\n@@ -524,6 +524,109 @@ class FormRequestTest(RequestTest):\n         self.assertEqual(fs['key7'], [''])\n         self.assertEqual(set(fs), set(['key1', 'key2', 'key3', 'key4', 'key5', 'key6', 'key7']))\n \n+    def test_from_response_select(self):\n+        res = _buildresponse(\n+            '''<form>\n+            <select name=\"i1\">\n+                <option value=\"i1v1\">option 1</option>\n+                <option value=\"i1v2\" selected>option 2</option>\n+            </select>\n+            <select name=\"i2\">\n+                <option value=\"i2v1\">option 1</option>\n+                <option value=\"i2v2\">option 2</option>\n+            </select>\n+            <select>\n+                <option value=\"i3v1\">option 1</option>\n+                <option value=\"i3v2\">option 2</option>\n+            </select>\n+            <select name=\"i4\" multiple>\n+                <option value=\"i4v1\">option 1</option>\n+                <option value=\"i4v2\" selected>option 2</option>\n+                <option value=\"i4v3\" selected>option 3</option>\n+            </select>\n+            <select name=\"i5\" multiple>\n+                <option value=\"i5v1\">option 1</option>\n+                <option value=\"i5v2\">option 2</option>\n+            </select>\n+            </form>''')\n+        req = self.request_class.from_response(res)\n+        fs = _qs(req)\n+        self.assertEqual(fs, {'i1': ['i1v2'], 'i2': ['i2v1'], 'i4': ['i4v2', 'i4v3']})\n+\n+    def test_from_response_radio(self):\n+        res = _buildresponse(\n+            '''<form>\n+            <input type=\"radio\" name=\"i1\" value=\"iv1\">\n+            <input type=\"radio\" name=\"i1\" value=\"iv2\" checked>\n+            <input type=\"radio\" name=\"i2\" checked>\n+            <input type=\"radio\" name=\"i2\">\n+            <input type=\"radio\" name=\"i3\" value=\"i3v1\">\n+            <input type=\"radio\" name=\"i3\">\n+            </form>''')\n+        req = self.request_class.from_response(res)\n+        fs = _qs(req)\n+        self.assertEqual(fs, {'i1': ['iv2'], 'i2': ['on']})\n+\n+    def test_from_response_checkbox(self):\n+        res = _buildresponse(\n+            '''<form>\n+            <input type=\"checkbox\" name=\"i1\" value=\"iv1\">\n+            <input type=\"checkbox\" name=\"i1\" value=\"iv2\" checked>\n+            <input type=\"checkbox\" name=\"i2\" checked>\n+            <input type=\"checkbox\" name=\"i2\">\n+            <input type=\"checkbox\" name=\"i3\" value=\"i3v1\">\n+            <input type=\"checkbox\" name=\"i3\">\n+            </form>''')\n+        req = self.request_class.from_response(res)\n+        fs = _qs(req)\n+        self.assertEqual(fs, {'i1': ['iv2'], 'i2': ['on']})\n+\n+    def test_from_response_input_text(self):\n+        res = _buildresponse(\n+            '''<form>\n+            <input type=\"text\" name=\"i1\" value=\"iv1\">\n+            <input type=\"text\" name=\"i2\">\n+            <input type=\"text\">\n+            </form>''')\n+        req = self.request_class.from_response(res)\n+        fs = _qs(req)\n+        self.assertEqual(fs, {'i1': ['iv1'], 'i2': ['']})\n+\n+    def test_from_response_input_hidden(self):\n+        res = _buildresponse(\n+            '''<form>\n+            <input type=\"hidden\" name=\"i1\" value=\"iv1\">\n+            <input type=\"hidden\" name=\"i2\">\n+            <input type=\"hidden\">\n+            </form>''')\n+        req = self.request_class.from_response(res)\n+        fs = _qs(req)\n+        self.assertEqual(fs, {'i1': ['iv1'], 'i2': ['']})\n+\n+    def test_from_response_input_hidden(self):\n+        res = _buildresponse(\n+            '''<form>\n+            <input type=\"hidden\" name=\"i1\" value=\"iv1\">\n+            <input type=\"hidden\" name=\"i2\">\n+            <input type=\"hidden\">\n+            </form>''')\n+        req = self.request_class.from_response(res)\n+        fs = _qs(req)\n+        self.assertEqual(fs, {'i1': ['iv1'], 'i2': ['']})\n+\n+def _buildresponse(body, **kwargs):\n+    kwargs.setdefault('body', body)\n+    kwargs.setdefault('url', 'http://example.com')\n+    kwargs.setdefault('encoding', 'utf-8')\n+    return HtmlResponse(**kwargs)\n+\n+def _qs(req):\n+    if req.method == 'POST':\n+        qs = req.body\n+    else:\n+        qs = req.url.partition('?')[2]\n+    return cgi.parse_qs(qs, True)\n+\n class XmlRpcRequestTest(RequestTest):\n \n     request_class = XmlRpcRequest\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "scrapy#4340a13db5d5020e4d1f345ab28012ac75705ce2", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 30 | Lines Deleted: 39 | Files Changed: 2 | Hunks: 14 | Methods Changed: 9 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 69 | Churn Cumulative: 1330 | Contributors (this commit): 7 | Commits (past 90d): 27 | Contributors (cumulative): 14 | DMM Complexity: 0.0\n\nDIFF:\n@@ -79,7 +79,7 @@ def _get_inputs(form, formdata, dont_click, clickdata, response):\n                         '|descendant::input[@type!=\"submit\" '\n                         'and ((@type!=\"checkbox\" and @type!=\"radio\") or @checked)]')\n     values = [(k, u'' if v is None else v) \\\n-              for k, v in ((e.name, _value(e)) for e in inputs) \\\n+              for k, v in (_value(e) for e in inputs) \\\n               if k and k not in formdata]\n \n     if not dont_click:\n@@ -91,12 +91,17 @@ def _get_inputs(form, formdata, dont_click, clickdata, response):\n     return values\n \n def _value(ele):\n+    n = ele.name\n     v = ele.value\n+    # Match browser behaviour on simple select tag without options selected\n+    # Or for select tags wihout options\n     if v is None and ele.tag == 'select' and not ele.multiple:\n         o = ele.value_options\n         if o:\n-            return o[0]\n-    return v\n+            return n, o[0]\n+        else:\n+            return None, None\n+    return n, v\n \n def _get_clickable(clickdata, form):\n     \"\"\"\n\n@@ -496,34 +496,6 @@ class FormRequestTest(RequestTest):\n         response = HtmlResponse(\"http://www.example.com/formname.html\", body=respbody)\n         self.assertRaises(IndexError, self.request_class.from_response, response, formname=\"form3\", formnumber=2)\n \n-    def test_from_response_missed_value(self):\n-        respbody = \"\"\"\n-<form action=\"get.php\" method=\"POST\">\n-    <input type=\"hidden\" name=\"key1\" value=\"val1\">\n-    <input type=\"hidden\" name=\"key2\">\n-    <input type=\"radio\" name=\"key3\" checked>\n-    <input type=\"checkbox\" name=\"key4\" checked>\n-    <textarea name=\"key5\">val5</textarea>\n-    <textarea name=\"key6\"/>\n-    <select name=\"key7\">\n-        <option name=\"opt1\" selected></option>\n-        <option name=\"opt2\">opt2</option>\n-    </select>\n-    <input type=\"submit\" value=\"val8\">\n-</form>\n-        \"\"\"\n-        res = HtmlResponse(\"http://example.com\", body=respbody, encoding='utf-8')\n-        req = self.request_class.from_response(res)\n-        fs = cgi.parse_qs(req.body, True)\n-        self.assertEqual(fs['key1'], ['val1'])\n-        self.assertEqual(fs['key2'], [''])\n-        self.assertEqual(fs['key3'], ['on'])\n-        self.assertEqual(fs['key4'], ['on'])\n-        self.assertEqual(fs['key5'], ['val5'])\n-        self.assertEqual(fs['key6'], [''])\n-        self.assertEqual(fs['key7'], [''])\n-        self.assertEqual(set(fs), set(['key1', 'key2', 'key3', 'key4', 'key5', 'key6', 'key7']))\n-\n     def test_from_response_select(self):\n         res = _buildresponse(\n             '''<form>\n@@ -548,6 +520,8 @@ class FormRequestTest(RequestTest):\n                 <option value=\"i5v1\">option 1</option>\n                 <option value=\"i5v2\">option 2</option>\n             </select>\n+            <select name=\"i6\"></select>\n+            <select name=\"i7\"/>\n             </form>''')\n         req = self.request_class.from_response(res)\n         fs = _qs(req)\n@@ -556,7 +530,7 @@ class FormRequestTest(RequestTest):\n     def test_from_response_radio(self):\n         res = _buildresponse(\n             '''<form>\n-            <input type=\"radio\" name=\"i1\" value=\"iv1\">\n+            <input type=\"radio\" name=\"i1\" value=\"i1v1\">\n             <input type=\"radio\" name=\"i1\" value=\"iv2\" checked>\n             <input type=\"radio\" name=\"i2\" checked>\n             <input type=\"radio\" name=\"i2\">\n@@ -570,7 +544,7 @@ class FormRequestTest(RequestTest):\n     def test_from_response_checkbox(self):\n         res = _buildresponse(\n             '''<form>\n-            <input type=\"checkbox\" name=\"i1\" value=\"iv1\">\n+            <input type=\"checkbox\" name=\"i1\" value=\"i1v1\">\n             <input type=\"checkbox\" name=\"i1\" value=\"iv2\" checked>\n             <input type=\"checkbox\" name=\"i2\" checked>\n             <input type=\"checkbox\" name=\"i2\">\n@@ -584,35 +558,47 @@ class FormRequestTest(RequestTest):\n     def test_from_response_input_text(self):\n         res = _buildresponse(\n             '''<form>\n-            <input type=\"text\" name=\"i1\" value=\"iv1\">\n+            <input type=\"text\" name=\"i1\" value=\"i1v1\">\n             <input type=\"text\" name=\"i2\">\n             <input type=\"text\">\n             </form>''')\n         req = self.request_class.from_response(res)\n         fs = _qs(req)\n-        self.assertEqual(fs, {'i1': ['iv1'], 'i2': ['']})\n+        self.assertEqual(fs, {'i1': ['i1v1'], 'i2': ['']})\n \n     def test_from_response_input_hidden(self):\n         res = _buildresponse(\n             '''<form>\n-            <input type=\"hidden\" name=\"i1\" value=\"iv1\">\n+            <input type=\"hidden\" name=\"i1\" value=\"i1v1\">\n             <input type=\"hidden\" name=\"i2\">\n             <input type=\"hidden\">\n             </form>''')\n         req = self.request_class.from_response(res)\n         fs = _qs(req)\n-        self.assertEqual(fs, {'i1': ['iv1'], 'i2': ['']})\n+        self.assertEqual(fs, {'i1': ['i1v1'], 'i2': ['']})\n \n     def test_from_response_input_hidden(self):\n         res = _buildresponse(\n             '''<form>\n-            <input type=\"hidden\" name=\"i1\" value=\"iv1\">\n+            <input type=\"hidden\" name=\"i1\" value=\"i1v1\">\n             <input type=\"hidden\" name=\"i2\">\n             <input type=\"hidden\">\n             </form>''')\n         req = self.request_class.from_response(res)\n         fs = _qs(req)\n-        self.assertEqual(fs, {'i1': ['iv1'], 'i2': ['']})\n+        self.assertEqual(fs, {'i1': ['i1v1'], 'i2': ['']})\n+\n+    def test_from_response_input_textarea(self):\n+        res = _buildresponse(\n+            '''<form>\n+            <textarea name=\"i1\">i1v</textarea>\n+            <textarea name=\"i2\"></textarea>\n+            <textarea name=\"i3\"/>\n+            <textarea>i4v</textarea>\n+            </form>''')\n+        req = self.request_class.from_response(res)\n+        fs = _qs(req)\n+        self.assertEqual(fs, {'i1': ['i1v'], 'i2': [''], 'i3': ['']})\n \n def _buildresponse(body, **kwargs):\n     kwargs.setdefault('body', body)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
