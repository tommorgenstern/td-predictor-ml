{"custom_id": "keras#1904194c7a39640b65ab7877d52bccc035a7e2bf", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 1 | Churn Cumulative: 295 | Contributors (this commit): 1 | Commits (past 90d): 8 | Contributors (cumulative): 1 | DMM Complexity: 1.0\n\nDIFF:\n@@ -6,6 +6,7 @@ class Wrapper(Layer):\n \n     def __init__(self, layer, **kwargs):\n         self.layer = layer\n+        self.uses_learning_phase = layer.uses_learning_phase\n         super(Wrapper, self).__init__(**kwargs)\n \n     def build(self, input_shape=None):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "keras#36eef0dd9ac921d8b9e995f3de6833e8d6213717", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 14 | Lines Deleted: 10 | Files Changed: 1 | Hunks: 9 | Methods Changed: 4 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 24 | Churn Cumulative: 514 | Contributors (this commit): 10 | Commits (past 90d): 15 | Contributors (cumulative): 10 | DMM Complexity: 1.0\n\nDIFF:\n@@ -140,9 +140,9 @@ class ImageDataGenerator(object):\n             (the depth) is at index 1, in 'tf' mode it is at index 3.\n     '''\n     def __init__(self,\n-                 featurewise_center=True,\n+                 featurewise_center=False,\n                  samplewise_center=False,\n-                 featurewise_std_normalization=True,\n+                 featurewise_std_normalization=False,\n                  samplewise_std_normalization=False,\n                  zca_whitening=False,\n                  rotation_range=0.,\n@@ -170,30 +170,34 @@ class ImageDataGenerator(object):\n             self.row_index = 1\n             self.col_index = 2\n \n+        self.batch_index = 0\n+        self.total_batches_seen = 0\n+\n+    def reset(self):\n+        self.batch_index = 0\n+\n     def _flow_index(self, N, batch_size=32, shuffle=False, seed=None):\n-        b = 0\n-        total_b = 0\n         while 1:\n-            if b == 0:\n+            if self.batch_index == 0:\n                 if seed is not None:\n-                    np.random.seed(seed + total_b)\n+                    np.random.seed(seed + self.total_batches_seen)\n \n                 if shuffle:\n                     index_array = np.random.permutation(N)\n                 else:\n                     index_array = np.arange(N)\n \n-            current_index = (b * batch_size) % N\n+            current_index = (self.batch_index * batch_size) % N\n             if N >= current_index + batch_size:\n                 current_batch_size = batch_size\n             else:\n                 current_batch_size = N - current_index\n \n             if current_batch_size == batch_size:\n-                b += 1\n+                self.batch_index += 1\n             else:\n-                b = 0\n-            total_b += 1\n+                self.batch_index = 0\n+            self.total_batches_seen += 1\n             yield (index_array[current_index: current_index + current_batch_size],\n                    current_index, current_batch_size)\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "keras#0ed00e38f095ec7fe14e55c8e3fd7ce242a79df4", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 290 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 290 | Churn Cumulative: 290 | Contributors (this commit): 1 | Commits (past 90d): 1 | Contributors (cumulative): 1 | DMM Complexity: 1.0\n\nDIFF:\n@@ -0,0 +1,290 @@\n+'''This script demonstrates how to build the Inception v3 architecture\n+using the Keras functional API.\n+We are not actually training it here, for lack of appropriate data.\n+\n+For more information about this architecture, see:\n+\n+\"Rethinking the Inception Architecture for Computer Vision\"\n+Christian Szegedy, Vincent Vanhoucke, Sergey Ioffe, Jonathon Shlens, Zbigniew Wojna\n+http://arxiv.org/abs/1512.00567\n+'''\n+from keras.layers import Convolution2D, MaxPooling2D, AveragePooling2D\n+from keras.layers import BatchNormalization, Flatten, Dense, Dropout\n+from keras.layers import Input, merge\n+from keras.models import Model\n+from keras import regularizers\n+\n+\n+# global constants\n+NB_CLASS = 1000  # number of classes\n+DIM_ORDERING = 'th'  # 'th' (channels, width, height) or 'tf' (width, height, channels)\n+WEIGHT_DECAY = 0.  # L2 regularization factor\n+USE_BN = False  # whether to use batch normalization\n+\n+\n+def conv2D_bn(x, nb_filter, nb_row, nb_col,\n+              border_mode='same', subsample=(1, 1),\n+              activation='relu', batch_norm=USE_BN,\n+              weight_decay=WEIGHT_DECAY, dim_ordering=DIM_ORDERING):\n+    '''Utility function to apply to a tensor a module conv + BN\n+    with optional weight decay (L2 weight regularization).\n+    '''\n+    if weight_decay:\n+        W_regularizer = regularizers.l2(weight_decay)\n+        b_regularizer = regularizers.l2(weight_decay)\n+    else:\n+        W_regularizer = None\n+        b_regularizer = None\n+    x = Convolution2D(nb_filter, nb_row, nb_col,\n+                      subsample=subsample,\n+                      activation=activation,\n+                      border_mode=border_mode,\n+                      W_regularizer=W_regularizer,\n+                      b_regularizer=b_regularizer,\n+                      dim_ordering=dim_ordering)(x)\n+    if batch_norm:\n+        x = BatchNormalization()(x)\n+    return x\n+\n+# Define image input layer\n+\n+if DIM_ORDERING == 'th':\n+    img_input = Input(shape=(3, 299, 299))\n+    CONCAT_AXIS = 1\n+elif DIM_ORDERING == 'tf':\n+    img_input = Input(shape=(299, 299, 3))\n+    CONCAT_AXIS = 3\n+else:\n+    raise Exception('Invalid dim ordering: ' + str(DIM_ORDERING))\n+\n+# Entry module\n+\n+x = conv2D_bn(img_input, 32, 3, 3, subsample=(2, 2), border_mode='valid')\n+x = conv2D_bn(x, 32, 3, 3, border_mode='valid')\n+x = conv2D_bn(x, 64, 3, 3)\n+x = MaxPooling2D((3, 3), strides=(2, 2), dim_ordering=DIM_ORDERING)(x)\n+\n+x = conv2D_bn(x, 80, 1, 1, border_mode='valid')\n+x = conv2D_bn(x, 192, 3, 3, border_mode='valid')\n+x = MaxPooling2D((3, 3), strides=(2, 2), dim_ordering=DIM_ORDERING)(x)\n+\n+# mixed: 35 x 35 x 256\n+\n+branch1x1 = conv2D_bn(x, 64, 1, 1)\n+\n+branch5x5 = conv2D_bn(x, 48, 1, 1)\n+branch5x5 = conv2D_bn(branch5x5, 64, 5, 5)\n+\n+branch3x3dbl = conv2D_bn(x, 64, 1, 1)\n+branch3x3dbl = conv2D_bn(branch3x3dbl, 96, 3, 3)\n+branch3x3dbl = conv2D_bn(branch3x3dbl, 96, 3, 3)\n+\n+branch_pool = AveragePooling2D((3, 3), strides=(1, 1), border_mode='same', dim_ordering=DIM_ORDERING)(x)\n+branch_pool = conv2D_bn(branch_pool, 32, 1, 1)\n+x = merge([branch1x1, branch5x5, branch3x3dbl, branch_pool], mode='concat', concat_axis=CONCAT_AXIS)\n+\n+# mixed_1: 35 x 35 x 288\n+\n+branch1x1 = conv2D_bn(x, 64, 1, 1)\n+\n+branch5x5 = conv2D_bn(x, 48, 1, 1)\n+branch5x5 = conv2D_bn(branch5x5, 64, 5, 5)\n+\n+branch3x3dbl = conv2D_bn(x, 64, 1, 1)\n+branch3x3dbl = conv2D_bn(branch3x3dbl, 96, 3, 3)\n+branch3x3dbl = conv2D_bn(branch3x3dbl, 96, 3, 3)\n+\n+branch_pool = AveragePooling2D((3, 3), strides=(1, 1), border_mode='same', dim_ordering=DIM_ORDERING)(x)\n+branch_pool = conv2D_bn(branch_pool, 32, 1, 1)\n+x = merge([branch1x1, branch5x5, branch3x3dbl, branch_pool], mode='concat', concat_axis=CONCAT_AXIS)\n+\n+# mixed2: 35 x 35 x 288\n+\n+branch1x1 = conv2D_bn(x, 64, 1, 1)\n+\n+branch5x5 = conv2D_bn(x, 48, 1, 1)\n+branch5x5 = conv2D_bn(branch5x5, 64, 5, 5)\n+\n+branch3x3dbl = conv2D_bn(x, 64, 1, 1)\n+branch3x3dbl = conv2D_bn(branch3x3dbl, 96, 3, 3)\n+branch3x3dbl = conv2D_bn(branch3x3dbl, 96, 3, 3)\n+\n+branch_pool = AveragePooling2D((3, 3), strides=(1, 1), border_mode='same', dim_ordering=DIM_ORDERING)(x)\n+branch_pool = conv2D_bn(branch_pool, 64, 1, 1)\n+x = merge([branch1x1, branch5x5, branch3x3dbl, branch_pool], mode='concat', concat_axis=CONCAT_AXIS)\n+\n+# mixed3: 17 x 17 x 768\n+\n+branch3x3 = conv2D_bn(x, 384, 3, 3, subsample=(2, 2), border_mode='valid')\n+\n+branch3x3dbl = conv2D_bn(x, 64, 1, 1)\n+branch3x3dbl = conv2D_bn(branch3x3dbl, 96, 3, 3)\n+branch3x3dbl = conv2D_bn(branch3x3dbl, 96, 3, 3, subsample=(2, 2), border_mode='valid')\n+\n+branch_pool = MaxPooling2D((3, 3), strides=(2, 2), dim_ordering=DIM_ORDERING)(x)\n+x = merge([branch3x3, branch3x3dbl, branch_pool], mode='concat', concat_axis=CONCAT_AXIS)\n+\n+# mixed4: 17 x 17 x 768\n+\n+branch1x1 = conv2D_bn(x, 192, 1, 1)\n+\n+branch7x7 = conv2D_bn(x, 128, 1, 1)\n+branch7x7 = conv2D_bn(branch7x7, 128, 1, 7)\n+branch7x7 = conv2D_bn(branch7x7, 192, 7, 1)\n+\n+branch7x7dbl = conv2D_bn(x, 128, 1, 1)\n+branch7x7dbl = conv2D_bn(branch7x7dbl, 128, 7, 1)\n+branch7x7dbl = conv2D_bn(branch7x7dbl, 128, 1, 7)\n+branch7x7dbl = conv2D_bn(branch7x7dbl, 128, 7, 1)\n+branch7x7dbl = conv2D_bn(branch7x7dbl, 128, 1, 7)\n+\n+branch_pool = AveragePooling2D((3, 3), strides=(1, 1), border_mode='same', dim_ordering=DIM_ORDERING)(x)\n+branch_pool = conv2D_bn(branch_pool, 192, 1, 1)\n+x = merge([branch1x1, branch7x7, branch7x7dbl, branch_pool], mode='concat', concat_axis=CONCAT_AXIS)\n+\n+# mixed5: 17 x 17 x 768\n+\n+branch1x1 = conv2D_bn(x, 192, 1, 1)\n+\n+branch7x7 = conv2D_bn(x, 160, 1, 1)\n+branch7x7 = conv2D_bn(branch7x7, 160, 1, 7)\n+branch7x7 = conv2D_bn(branch7x7, 192, 7, 1)\n+\n+branch7x7dbl = conv2D_bn(x, 160, 1, 1)\n+branch7x7dbl = conv2D_bn(branch7x7dbl, 160, 7, 1)\n+branch7x7dbl = conv2D_bn(branch7x7dbl, 192, 1, 7)\n+branch7x7dbl = conv2D_bn(branch7x7dbl, 160, 7, 1)\n+branch7x7dbl = conv2D_bn(branch7x7dbl, 192, 1, 7)\n+\n+branch_pool = AveragePooling2D((3, 3), strides=(1, 1), border_mode='same', dim_ordering=DIM_ORDERING)(x)\n+branch_pool = conv2D_bn(branch_pool, 192, 1, 1)\n+x = merge([branch1x1, branch7x7, branch7x7dbl, branch_pool], mode='concat', concat_axis=CONCAT_AXIS)\n+\n+# mixed5: 17 x 17 x 768\n+\n+branch1x1 = conv2D_bn(x, 192, 1, 1)\n+\n+branch7x7 = conv2D_bn(x, 160, 1, 1)\n+branch7x7 = conv2D_bn(branch7x7, 160, 1, 7)\n+branch7x7 = conv2D_bn(branch7x7, 192, 7, 1)\n+\n+branch7x7dbl = conv2D_bn(x, 160, 1, 1)\n+branch7x7dbl = conv2D_bn(branch7x7dbl, 160, 7, 1)\n+branch7x7dbl = conv2D_bn(branch7x7dbl, 192, 1, 7)\n+branch7x7dbl = conv2D_bn(branch7x7dbl, 160, 7, 1)\n+branch7x7dbl = conv2D_bn(branch7x7dbl, 192, 1, 7)\n+\n+branch_pool = AveragePooling2D((3, 3), strides=(1, 1), border_mode='same', dim_ordering=DIM_ORDERING)(x)\n+branch_pool = conv2D_bn(branch_pool, 192, 1, 1)\n+x = merge([branch1x1, branch7x7, branch7x7dbl, branch_pool], mode='concat', concat_axis=CONCAT_AXIS)\n+\n+# mixed6: 17 x 17 x 768\n+\n+branch1x1 = conv2D_bn(x, 192, 1, 1)\n+\n+branch7x7 = conv2D_bn(x, 160, 1, 1)\n+branch7x7 = conv2D_bn(branch7x7, 160, 1, 7)\n+branch7x7 = conv2D_bn(branch7x7, 192, 7, 1)\n+\n+branch7x7dbl = conv2D_bn(x, 160, 1, 1)\n+branch7x7dbl = conv2D_bn(branch7x7dbl, 160, 7, 1)\n+branch7x7dbl = conv2D_bn(branch7x7dbl, 192, 1, 7)\n+branch7x7dbl = conv2D_bn(branch7x7dbl, 160, 7, 1)\n+branch7x7dbl = conv2D_bn(branch7x7dbl, 192, 1, 7)\n+\n+branch_pool = AveragePooling2D((3, 3), strides=(1, 1), border_mode='same', dim_ordering=DIM_ORDERING)(x)\n+branch_pool = conv2D_bn(branch_pool, 192, 1, 1)\n+x = merge([branch1x1, branch7x7, branch7x7dbl, branch_pool], mode='concat', concat_axis=CONCAT_AXIS)\n+\n+# mixed7: 17 x 17 x 768\n+\n+branch1x1 = conv2D_bn(x, 192, 1, 1)\n+\n+branch7x7 = conv2D_bn(x, 192, 1, 1)\n+branch7x7 = conv2D_bn(branch7x7, 192, 1, 7)\n+branch7x7 = conv2D_bn(branch7x7, 192, 7, 1)\n+\n+branch7x7dbl = conv2D_bn(x, 160, 1, 1)\n+branch7x7dbl = conv2D_bn(branch7x7dbl, 192, 7, 1)\n+branch7x7dbl = conv2D_bn(branch7x7dbl, 192, 1, 7)\n+branch7x7dbl = conv2D_bn(branch7x7dbl, 192, 7, 1)\n+branch7x7dbl = conv2D_bn(branch7x7dbl, 192, 1, 7)\n+\n+branch_pool = AveragePooling2D((3, 3), strides=(1, 1), border_mode='same', dim_ordering=DIM_ORDERING)(x)\n+branch_pool = conv2D_bn(branch_pool, 192, 1, 1)\n+x = merge([branch1x1, branch7x7, branch7x7dbl, branch_pool], mode='concat', concat_axis=CONCAT_AXIS)\n+\n+# Auxiliary head\n+\n+aux_logits = AveragePooling2D((5, 5), strides=(3, 3), dim_ordering=DIM_ORDERING)(x)\n+aux_logits = conv2D_bn(aux_logits, 128, 1, 1)\n+aux_logits = conv2D_bn(aux_logits, 728, 5, 5, border_mode='valid')\n+aux_logits = Flatten()(aux_logits)\n+aux_preds = Dense(NB_CLASS, activation='softmax')(aux_logits)\n+\n+# mixed8: 8 x 8 x 1280\n+\n+branch3x3 = conv2D_bn(x, 192, 1, 1)\n+branch3x3 = conv2D_bn(branch3x3, 192, 3, 3, subsample=(2, 2), border_mode='valid')\n+\n+branch7x7x3 = conv2D_bn(x, 192, 1, 1)\n+branch7x7x3 = conv2D_bn(branch7x7x3, 192, 1, 7)\n+branch7x7x3 = conv2D_bn(branch7x7x3, 192, 7, 1)\n+branch7x7x3 = conv2D_bn(branch7x7x3, 192, 3, 3, subsample=(2, 2), border_mode='valid')\n+\n+branch_pool = AveragePooling2D((3, 3), strides=(2, 2), dim_ordering=DIM_ORDERING)(x)\n+x = merge([branch3x3, branch7x7x3, branch_pool], mode='concat', concat_axis=CONCAT_AXIS)\n+\n+# mixed9: 8 x 8 x 2048\n+\n+branch1x1 = conv2D_bn(x, 320, 1, 1)\n+\n+branch3x3 = conv2D_bn(x, 384, 1, 1)\n+branch3x3_1 = conv2D_bn(branch3x3, 384, 1, 3)\n+branch3x3_2 = conv2D_bn(branch3x3, 384, 3, 1)\n+branch3x3 = merge([branch3x3_1, branch3x3_2], mode='concat', concat_axis=CONCAT_AXIS)\n+\n+branch3x3dbl = conv2D_bn(x, 448, 1, 1)\n+branch3x3dbl = conv2D_bn(branch3x3dbl, 384, 3, 3)\n+branch3x3dbl_1 = conv2D_bn(branch3x3dbl, 384, 1, 3)\n+branch3x3dbl_2 = conv2D_bn(branch3x3dbl, 384, 3, 1)\n+branch3x3dbl = merge([branch3x3dbl_1, branch3x3dbl_2], mode='concat', concat_axis=CONCAT_AXIS)\n+\n+branch_pool = AveragePooling2D((3, 3), strides=(1, 1), border_mode='same', dim_ordering=DIM_ORDERING)(x)\n+branch_pool = conv2D_bn(branch_pool, 192, 1, 1)\n+x = merge([branch1x1, branch3x3, branch3x3dbl, branch_pool], mode='concat', concat_axis=CONCAT_AXIS)\n+\n+# mixed10: 8 x 8 x 2048\n+\n+branch1x1 = conv2D_bn(x, 320, 1, 1)\n+\n+branch3x3 = conv2D_bn(x, 384, 1, 1)\n+branch3x3_1 = conv2D_bn(branch3x3, 384, 1, 3)\n+branch3x3_2 = conv2D_bn(branch3x3, 384, 3, 1)\n+branch3x3 = merge([branch3x3_1, branch3x3_2], mode='concat', concat_axis=CONCAT_AXIS)\n+\n+branch3x3dbl = conv2D_bn(x, 448, 1, 1)\n+branch3x3dbl = conv2D_bn(branch3x3dbl, 384, 3, 3)\n+branch3x3dbl_1 = conv2D_bn(branch3x3dbl, 384, 1, 3)\n+branch3x3dbl_2 = conv2D_bn(branch3x3dbl, 384, 3, 1)\n+branch3x3dbl = merge([branch3x3dbl_1, branch3x3dbl_2], mode='concat', concat_axis=CONCAT_AXIS)\n+\n+branch_pool = AveragePooling2D((3, 3), strides=(1, 1), border_mode='same', dim_ordering=DIM_ORDERING)(x)\n+branch_pool = conv2D_bn(branch_pool, 192, 1, 1)\n+x = merge([branch1x1, branch3x3, branch3x3dbl, branch_pool], mode='concat', concat_axis=CONCAT_AXIS)\n+\n+# Final pooling and prediction\n+\n+x = AveragePooling2D((8, 8), strides=(1, 1), dim_ordering=DIM_ORDERING)(x)\n+x = Dropout(0.5)(x)\n+x = Flatten()(x)\n+preds = Dense(NB_CLASS, activation='softmax')(x)\n+\n+# Define model\n+\n+model = Model(input=img_input, output=[preds, aux_preds])\n+model.compile('rmsprop', 'categorical_crossentropy')\n+\n+# train via e.g. `model.fit(x_train, [y_train] * 2, batch_size=32, nb_epoch=100)`\n+# Note that for a large dataset it would be preferable\n+# to train using `fit_generator` (see Keras docs).\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "keras#b61235b77f87288d62ddd8ce4aae88b76babf887", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 1789 | Contributors (this commit): 5 | Commits (past 90d): 23 | Contributors (cumulative): 5 | DMM Complexity: None\n\nDIFF:\n@@ -153,7 +153,7 @@ def check_array_lengths(X, Y, W):\n         raise Exception('All input arrays (x) should have '\n                         'the same number of samples.')\n     set_y = set(y_lengths)\n-    if len(set_x) != 1:\n+    if len(set_y) != 1:\n         raise Exception('All target arrays (y) should have '\n                         'the same number of samples.')\n     set_w = set(w_lengths)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "keras#ba29cd8e4682bd0265960ea484c23e8e36df8015", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 299 | Contributors (this commit): 2 | Commits (past 90d): 9 | Contributors (cumulative): 2 | DMM Complexity: None\n\nDIFF:\n@@ -122,11 +122,11 @@ class TimeDistributed(Wrapper):\n             # no batch size specified, therefore the layer will be able\n             # to process batches of any size\n             # we can go with reshape-based implementation for performance\n-            X = K.reshape(X, (-1, ) + input_shape[2:])  # (nb_samples * timesteps, ...)\n-            y = self.layer.call(X)  # (nb_samples * timesteps, ...)\n             input_length = input_shape[1]\n             if not input_length:\n                 input_length = K.shape(X)[1]\n+            X = K.reshape(X, (-1, ) + input_shape[2:])  # (nb_samples * timesteps, ...)\n+            y = self.layer.call(X)  # (nb_samples * timesteps, ...)\n             # (nb_samples, timesteps, ...)\n             output_shape = self.get_output_shape_for(input_shape)\n             y = K.reshape(y, (-1, input_length) + output_shape[2:])\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "keras#5ab48ac5d4157eb23540c9a78268757ff5e764c2", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 4 | Lines Deleted: 8 | Files Changed: 1 | Hunks: 7 | Methods Changed: 2 | Complexity Δ (Sum/Max): -1/0 | Churn Δ: 12 | Churn Cumulative: 526 | Contributors (this commit): 10 | Commits (past 90d): 16 | Contributors (cumulative): 10 | DMM Complexity: 1.0\n\nDIFF:\n@@ -178,24 +178,19 @@ class ImageDataGenerator(object):\n \n     def _flow_index(self, N, batch_size=32, shuffle=False, seed=None):\n         while 1:\n+            index_array = np.arange(N)\n             if self.batch_index == 0:\n+                if shuffle:\n                     if seed is not None:\n                         np.random.seed(seed + self.total_batches_seen)\n-\n-                if shuffle:\n                     index_array = np.random.permutation(N)\n-                else:\n-                    index_array = np.arange(N)\n \n             current_index = (self.batch_index * batch_size) % N\n             if N >= current_index + batch_size:\n                 current_batch_size = batch_size\n-            else:\n-                current_batch_size = N - current_index\n-\n-            if current_batch_size == batch_size:\n                 self.batch_index += 1\n             else:\n+                current_batch_size = N - current_index\n                 self.batch_index = 0\n             self.total_batches_seen += 1\n             yield (index_array[current_index: current_index + current_batch_size],\n@@ -209,6 +204,7 @@ class ImageDataGenerator(object):\n         self.save_to_dir = save_to_dir\n         self.save_prefix = save_prefix\n         self.save_format = save_format\n+        self.reset()\n         self.flow_generator = self._flow_index(X.shape[0], batch_size,\n                                                shuffle, seed)\n         return self\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "keras#c398c0891b5677d7f7f35f4ee60a522dfafdaf1c", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 12 | Lines Deleted: 0 | Files Changed: 2 | Hunks: 2 | Methods Changed: 2 | Complexity Δ (Sum/Max): 2/1 | Churn Δ: 12 | Churn Cumulative: 3251 | Contributors (this commit): 24 | Commits (past 90d): 82 | Contributors (cumulative): 35 | DMM Complexity: 1.0\n\nDIFF:\n@@ -136,6 +136,12 @@ def ones(shape, dtype=_FLOATX, name=None):\n     return variable(np.ones(shape), dtype, name)\n \n \n+def eye(size, dtype=_FLOATX, name=None):\n+    '''Instantiate an identity matrix.\n+    '''\n+    return variable(np.eye(size), dtype, name)\n+\n+\n def zeros_like(x, name=None):\n     '''Instantiates an all-zeros tensor\n     of the same shape as another tensor.\n\n@@ -79,6 +79,12 @@ def ones(shape, dtype=_FLOATX, name=None):\n     return variable(np.ones(shape), dtype, name)\n \n \n+def eye(size, dtype=_FLOATX, name=None):\n+    '''Instantiate an identity matrix.\n+    '''\n+    return variable(np.eye(size), dtype, name)\n+\n+\n def ones_like(x):\n     return T.ones_like(x)\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "keras#c525e634dc1ad6ea4815035b059c13d901209a6a", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 2 | Churn Cumulative: 1791 | Contributors (this commit): 5 | Commits (past 90d): 24 | Contributors (cumulative): 5 | DMM Complexity: None\n\nDIFF:\n@@ -195,7 +195,7 @@ def check_loss_and_target_compatibility(targets, losses, output_shapes):\n                                 'Alternatively, you can use the loss function '\n                                 '`sparse_categorical_crossentropy` instead, '\n                                 'which does expect integer targets.')\n-        if loss.__name__ in key_losses and y.shape[1] != shape[1]:\n+        if loss.__name__ in key_losses and shape[1] is not None and y.shape[1] != shape[1]:\n                 raise Exception('A target array with shape ' + str(y.shape) +\n                                 ' was passed for an output of shape ' + str(shape) +\n                                 ' while using as loss `' + loss.__name__ + '`. '\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "keras#85f0448feec3843b587c8674a660462d8b25e1e2", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 34 | Lines Deleted: 5 | Files Changed: 2 | Hunks: 8 | Methods Changed: 4 | Complexity Δ (Sum/Max): 6/6 | Churn Δ: 39 | Churn Cumulative: 3411 | Contributors (this commit): 5 | Commits (past 90d): 31 | Contributors (cumulative): 6 | DMM Complexity: 0.0\n\nDIFF:\n@@ -1128,7 +1128,8 @@ class Merge(Layer):\n             if mode not in {'sum', 'mul', 'concat', 'ave', 'cos', 'dot'}:\n                 raise Exception('Invalid merge mode: ' + str(mode))\n         if type(layers) not in {list, tuple} or len(layers) < 2:\n-            raise Exception('A Merge should only be applied to a list of layers. Not a list: ' + str(layers))\n+            raise Exception('A Merge should only be applied to a list of '\n+                            'layers with at least 2 elements. Found: ' + str(layers))\n \n         if tensor_indices is None:\n             tensor_indices = [None for _ in range(len(layers))]\n@@ -1241,6 +1242,14 @@ class Merge(Layer):\n                             'please use ' +\n                             'the \"merge\" function instead: ' +\n                             '`merged_tensor = merge([tensor_1, tensor2])`.')\n+\n+        all_keras_tensors = True\n+        for x in inputs:\n+            if not hasattr(x, '_keras_history'):\n+                all_keras_tensors = False\n+                break\n+\n+        if all_keras_tensors:\n             layers = []\n             node_indices = []\n             tensor_indices = []\n@@ -1255,6 +1264,8 @@ class Merge(Layer):\n                                        node_indices, tensor_indices)\n             self.built = True\n             self.add_inbound_node(layers, node_indices, tensor_indices)\n+        else:\n+            return self.call(inputs, mask)\n \n     def get_output_shape_for(self, input_shape):\n         assert type(input_shape) is list  # must have mutiple input shape tuples\n@@ -1405,20 +1416,35 @@ def merge(inputs, mode='sum', concat_axis=-1,\n             to consider for merging\n             (in case some input layer node returns multiple tensors).\n     '''\n+    all_keras_tensors = True\n+    for x in inputs:\n+        if not hasattr(x, '_keras_history'):\n+            all_keras_tensors = False\n+            break\n+    if all_keras_tensors:\n         input_layers = []\n         node_indices = []\n         tensor_indices = []\n         for x in inputs:\n-        assert hasattr(x, '_keras_history'), 'Input tensor to \"merge\" was not a Keras tensor: ' + str(x)\n             input_layer, node_index, tensor_index = x._keras_history\n             input_layers.append(input_layer)\n             node_indices.append(node_index)\n             tensor_indices.append(tensor_index)\n-    merge_layer = Merge(input_layers, mode=mode, concat_axis=concat_axis,\n-                        dot_axes=dot_axes, output_shape=output_shape,\n-                        node_indices=node_indices, tensor_indices=tensor_indices,\n+        merge_layer = Merge(input_layers, mode=mode,\n+                            concat_axis=concat_axis,\n+                            dot_axes=dot_axes,\n+                            output_shape=output_shape,\n+                            node_indices=node_indices,\n+                            tensor_indices=tensor_indices,\n                             name=name)\n         return merge_layer.inbound_nodes[0].output_tensors[0]\n+    else:\n+        merge_layer = Merge(mode=mode,\n+                            concat_axis=concat_axis,\n+                            dot_axes=dot_axes,\n+                            output_shape=output_shape,\n+                            name=name)\n+        return merge_layer(inputs)\n \n \n class Container(Layer):\n\n@@ -389,6 +389,9 @@ def test_recursion():\n         assert K.int_shape(m_tf) == (None, 64)\n         assert K.int_shape(n_tf) == (None, 5)\n \n+        # test merge\n+        o_tf = merge([j_tf, k_tf], mode='concat', concat_axis=1)\n+\n \n def test_functional_guide():\n     # MNIST\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "keras#5cac088d982b6035e5a0ff1796a19e32db75d751", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 94 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 2/2 | Churn Δ: 94 | Churn Cumulative: 94 | Contributors (this commit): 1 | Commits (past 90d): 1 | Contributors (cumulative): 1 | DMM Complexity: 1.0\n\nDIFF:\n@@ -0,0 +1,94 @@\n+'''Example of how to use sklearn wrapper\n+\n+Builds simple CNN models on MNIST and uses sklearn's GridSearchCV to find best model\n+'''\n+\n+from __future__ import print_function\n+import numpy as np\n+np.random.seed(1337)  # for reproducibility\n+\n+from keras.datasets import mnist\n+from keras.models import Sequential\n+from keras.layers.core import Dense, Dropout, Activation, Flatten\n+from keras.layers.convolutional import Convolution2D, MaxPooling2D\n+from keras.utils import np_utils\n+from keras.wrappers.scikit_learn import KerasClassifier\n+from sklearn.grid_search import GridSearchCV\n+\n+\n+nb_classes = 10\n+\n+# input image dimensions\n+img_rows, img_cols = 28, 28\n+\n+# load training data and do basic data normalization\n+(X_train, y_train), (X_test, y_test) = mnist.load_data()\n+X_train = X_train.reshape(X_train.shape[0], 1, img_rows, img_cols)\n+X_test = X_test.reshape(X_test.shape[0], 1, img_rows, img_cols)\n+X_train = X_train.astype('float32')\n+X_test = X_test.astype('float32')\n+X_train /= 255\n+X_test /= 255\n+\n+# convert class vectors to binary class matrices\n+y_train = np_utils.to_categorical(y_train, nb_classes)\n+y_test = np_utils.to_categorical(y_test, nb_classes)\n+\n+def make_model(dense_layer_sizes, nb_filters, nb_conv, nb_pool):\n+    '''Creates model comprised of 2 convolutional layers followed by dense layers\n+\n+    dense_layer_sizes: List of layer sizes. This list has one number for each layer\n+    nb_filters: Number of convolutional filters in each convolutional layer\n+    nb_conv: Convolutional kernel size\n+    nb_pool: Size of pooling area for max pooling\n+    '''\n+\n+    model = Sequential()\n+\n+    model.add(Convolution2D(nb_filters, nb_conv, nb_conv,\n+                            border_mode='valid',\n+                            input_shape=(1, img_rows, img_cols)))\n+    model.add(Activation('relu'))\n+    model.add(Convolution2D(nb_filters, nb_conv, nb_conv))\n+    model.add(Activation('relu'))\n+    model.add(MaxPooling2D(pool_size=(nb_pool, nb_pool)))\n+    model.add(Dropout(0.25))\n+\n+    model.add(Flatten())\n+    for layer_size in dense_layer_sizes:\n+        model.add(Dense(layer_size))\n+    model.add(Activation('relu'))\n+    model.add(Dropout(0.5))\n+    model.add(Dense(nb_classes))\n+    model.add(Activation('softmax'))\n+\n+    model.compile(loss='categorical_crossentropy',\n+                  optimizer='adadelta',\n+                  metrics=['accuracy'])\n+\n+    return model\n+\n+dense_size_candidates = [[32], [64], [32, 32], [64, 64]]\n+my_classifier = KerasClassifier(make_model, batch_size=32)\n+validator = GridSearchCV(my_classifier,\n+                         param_grid={'dense_layer_sizes': dense_size_candidates,\n+                                     # nb_epoch is avail for tuning even when not\n+                                     # an argument to model building function\n+                                     'nb_epoch': [3, 6],\n+                                     'nb_filters': [8],\n+                                     'nb_conv': [3],\n+                                     'nb_pool': [2]},\n+                         scoring='log_loss',\n+                         n_jobs=1)\n+validator.fit(X_train, y_train)\n+\n+print('The parameters of the best model are: ')\n+print(validator.best_params_)\n+\n+# validator.best_estimator_ returns sklearn-wrapped version of best model.\n+# validator.best_estimator_.model returns the (unwrapped) keras model\n+best_model = validator.best_estimator_.model\n+metric_names = best_model.metrics_names\n+metric_values = best_model.evaluate(X_test, y_test)\n+for metric, value in zip(metric_names, metric_values):\n+    print(metric, ': ', value)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "keras#0e6e7a41f4ff4e1bc72a4f7f36f94bf3ed7d1237", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 2 | Churn Cumulative: 301 | Contributors (this commit): 3 | Commits (past 90d): 10 | Contributors (cumulative): 3 | DMM Complexity: 1.0\n\nDIFF:\n@@ -98,7 +98,9 @@ class TimeDistributed(Wrapper):\n                                 'an \"input_shape\" or \"batch_input_shape\" '\n                                 'argument, including the time axis.')\n         child_input_shape = (input_shape[0],) + input_shape[2:]\n+        if not self.layer.built:\n             self.layer.build(child_input_shape)\n+            self.layer.built = True\n         super(TimeDistributed, self).build()\n \n     def get_output_shape_for(self, input_shape):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "keras#24f96262ec084f709c42d8a2595dce39c1531220", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 6 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 6 | Churn Cumulative: 1797 | Contributors (this commit): 5 | Commits (past 90d): 25 | Contributors (cumulative): 5 | DMM Complexity: 0.0\n\nDIFF:\n@@ -66,6 +66,12 @@ def standardize_input_data(data, names, shapes=None, check_batch_dim=True,\n                             ': data should be a Numpy array, '\n                             'or list/dict of Numpy arrays. '\n                             'Found: ' + str(data)[:200] + '...')\n+        if len(names) != 1:\n+            # case: model expects multiple inputs but only received\n+            # a single Numpy array\n+            raise Exception('The model expects ' + str(len(names)) +\n+                            ' input arrays, but only received one array. '\n+                            'Found: array with shape ' + str(data.shape))\n         arrays = [data]\n \n     # make arrays at least 2D\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "keras#4680d70a785e07e555a7cba6b48e2aed47ad4aa7", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 4 | Lines Deleted: 4 | Files Changed: 1 | Hunks: 3 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 8 | Churn Cumulative: 1705 | Contributors (this commit): 21 | Commits (past 90d): 39 | Contributors (cumulative): 21 | DMM Complexity: None\n\nDIFF:\n@@ -564,15 +564,15 @@ def rnn(step_function, inputs, initial_states,\n     axes = [1, 0] + list(range(2, ndim))\n     inputs = inputs.dimshuffle(axes)\n \n+    if constants is None:\n+        constants = []\n+\n     if mask is not None:\n         if mask.ndim == ndim-1:\n             mask = expand_dims(mask)\n         assert mask.ndim == ndim\n         mask = mask.dimshuffle(axes)\n \n-        if constants is None:\n-            constants = []\n-\n         if unroll:\n             indices = list(range(input_length))\n             if go_backwards:\n@@ -641,7 +641,7 @@ def rnn(step_function, inputs, initial_states,\n             successive_states = []\n             states = initial_states\n             for i in indices:\n-                output, states = step_function(inputs[i], states)\n+                output, states = step_function(inputs[i], states + constants)\n                 successive_outputs.append(output)\n                 successive_states.append(states)\n             outputs = T.stack(*successive_outputs)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "keras#ad49962ba984536599770277aaf55211faa95014", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 6 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 7 | Churn Cumulative: 2684 | Contributors (this commit): 6 | Commits (past 90d): 27 | Contributors (cumulative): 6 | DMM Complexity: 0.0\n\nDIFF:\n@@ -1672,7 +1672,8 @@ class Container(Layer):\n                 layers_by_depth[depth] = []\n             layers_by_depth[depth].append(layer)\n \n-        depth_keys = list(nodes_by_depth.keys())\n+        # get sorted list of layer depths\n+        depth_keys = list(layers_by_depth.keys())\n         depth_keys.sort(reverse=True)\n \n         # set self.layers and self.layers_by_depth\n@@ -1686,6 +1687,10 @@ class Container(Layer):\n         self.layers = layers\n         self.layers_by_depth = layers_by_depth\n \n+        # get sorted list of node depths\n+        depth_keys = list(nodes_by_depth.keys())\n+        depth_keys.sort(reverse=True)\n+\n         # check that all tensors required are computable.\n         # computable_tensors: all tensors in the graph\n         # that can be computed from the inputs provided\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "keras#256d4ef71b5a311b07d9df878aa9151b3fc4ce53", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 3 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 330 | Contributors (this commit): 9 | Commits (past 90d): 4 | Contributors (cumulative): 9 | DMM Complexity: None\n\nDIFF:\n@@ -37,7 +37,9 @@ def categorical_crossentropy(y_true, y_pred):\n \n \n def sparse_categorical_crossentropy(y_true, y_pred):\n-    '''expects a 1-D or 2-D array of integer classes.\n+    '''expects an array of integer classes.\n+    Note: labels shape must have the same number of dimensions as output shape.\n+    If you get a shape error, add a length-1 dimension to labels.\n     '''\n     return K.sparse_categorical_crossentropy(y_pred, y_true)\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "keras#423a633b5b3663c8e54ef66208dbdf6348d29612", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 3 | Lines Deleted: 3 | Files Changed: 1 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 6 | Churn Cumulative: 1046 | Contributors (this commit): 6 | Commits (past 90d): 10 | Contributors (cumulative): 6 | DMM Complexity: None\n\nDIFF:\n@@ -21,12 +21,12 @@ def test_merge():\n     input_shapes = [(3, 2), (3, 2)]\n     inputs = [np.random.random(shape) for shape in input_shapes]\n \n-    # test graph API\n-    for mode in ['sum', 'mul', 'concat', 'ave', 'cos', 'dot']:\n+    # test functional API\n+    for mode in ['sum', 'mul', 'concat', 'ave']:\n         print(mode)\n         input_a = Input(shape=input_shapes[0][1:])\n         input_b = Input(shape=input_shapes[1][1:])\n-        merged = merge([input_a, input_b], mode='sum')\n+        merged = merge([input_a, input_b], mode=mode)\n         model = Model([input_a, input_b], merged)\n         model.compile('rmsprop', 'mse')\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "keras#61dd53e2621f6a44b90bbe4682eccb1bbf7574e7", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 6 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 3 | Methods Changed: 1 | Complexity Δ (Sum/Max): -1/0 | Churn Δ: 8 | Churn Cumulative: 744 | Contributors (this commit): 4 | Commits (past 90d): 6 | Contributors (cumulative): 4 | DMM Complexity: 1.0\n\nDIFF:\n@@ -53,10 +53,16 @@ Scikit-learn API\n \n '''\n from __future__ import print_function\n+from __future__ import unicode_literals\n+\n import re\n import inspect\n import os\n import shutil\n+import sys\n+if sys.version[0] == '2':\n+    reload(sys)\n+    sys.setdefaultencoding('utf8')\n \n from keras.layers import convolutional\n from keras.layers import recurrent\n@@ -250,8 +256,6 @@ def get_function_signature(function, method=True):\n     for a, v in kwargs:\n         if type(v) == str:\n             v = '\\'' + v + '\\''\n-        elif type(v) == unicode:\n-            v = 'u\\'' + v + '\\''\n         st += str(a) + '=' + str(v) + ', '\n     if kwargs or args:\n         return st[:-2] + ')'\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "keras#d6ab850f455ad64973c617cbd51ac2ac41dba3f5", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 5 | Lines Deleted: 5 | Files Changed: 1 | Hunks: 5 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 10 | Churn Cumulative: 300 | Contributors (this commit): 2 | Commits (past 90d): 2 | Contributors (cumulative): 2 | DMM Complexity: None\n\nDIFF:\n@@ -95,7 +95,7 @@ branch3x3dbl = conv2D_bn(branch3x3dbl, 96, 3, 3)\n branch3x3dbl = conv2D_bn(branch3x3dbl, 96, 3, 3)\n \n branch_pool = AveragePooling2D((3, 3), strides=(1, 1), border_mode='same', dim_ordering=DIM_ORDERING)(x)\n-branch_pool = conv2D_bn(branch_pool, 32, 1, 1)\n+branch_pool = conv2D_bn(branch_pool, 64, 1, 1)\n x = merge([branch1x1, branch5x5, branch3x3dbl, branch_pool], mode='concat', concat_axis=CONCAT_AXIS)\n \n # mixed2: 35 x 35 x 288\n@@ -136,7 +136,7 @@ branch7x7dbl = conv2D_bn(x, 128, 1, 1)\n branch7x7dbl = conv2D_bn(branch7x7dbl, 128, 7, 1)\n branch7x7dbl = conv2D_bn(branch7x7dbl, 128, 1, 7)\n branch7x7dbl = conv2D_bn(branch7x7dbl, 128, 7, 1)\n-branch7x7dbl = conv2D_bn(branch7x7dbl, 128, 1, 7)\n+branch7x7dbl = conv2D_bn(branch7x7dbl, 192, 1, 7)\n \n branch_pool = AveragePooling2D((3, 3), strides=(1, 1), border_mode='same', dim_ordering=DIM_ORDERING)(x)\n branch_pool = conv2D_bn(branch_pool, 192, 1, 1)\n@@ -152,7 +152,7 @@ branch7x7 = conv2D_bn(branch7x7, 192, 7, 1)\n \n branch7x7dbl = conv2D_bn(x, 160, 1, 1)\n branch7x7dbl = conv2D_bn(branch7x7dbl, 160, 7, 1)\n-branch7x7dbl = conv2D_bn(branch7x7dbl, 192, 1, 7)\n+branch7x7dbl = conv2D_bn(branch7x7dbl, 160, 1, 7)\n branch7x7dbl = conv2D_bn(branch7x7dbl, 160, 7, 1)\n branch7x7dbl = conv2D_bn(branch7x7dbl, 192, 1, 7)\n \n@@ -170,7 +170,7 @@ branch7x7 = conv2D_bn(branch7x7, 192, 7, 1)\n \n branch7x7dbl = conv2D_bn(x, 160, 1, 1)\n branch7x7dbl = conv2D_bn(branch7x7dbl, 160, 7, 1)\n-branch7x7dbl = conv2D_bn(branch7x7dbl, 192, 1, 7)\n+branch7x7dbl = conv2D_bn(branch7x7dbl, 160, 1, 7)\n branch7x7dbl = conv2D_bn(branch7x7dbl, 160, 7, 1)\n branch7x7dbl = conv2D_bn(branch7x7dbl, 192, 1, 7)\n \n@@ -225,7 +225,7 @@ aux_preds = Dense(NB_CLASS, activation='softmax')(aux_logits)\n # mixed8: 8 x 8 x 1280\n \n branch3x3 = conv2D_bn(x, 192, 1, 1)\n-branch3x3 = conv2D_bn(branch3x3, 192, 3, 3, subsample=(2, 2), border_mode='valid')\n+branch3x3 = conv2D_bn(branch3x3, 320, 3, 3, subsample=(2, 2), border_mode='valid')\n \n branch7x7x3 = conv2D_bn(x, 192, 1, 1)\n branch7x7x3 = conv2D_bn(branch7x7x3, 192, 1, 7)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "keras#63c1757df519bc5756c0d7d79dabd5ec0420f3c8", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 10 | Lines Deleted: 1 | Files Changed: 2 | Hunks: 3 | Methods Changed: 2 | Complexity Δ (Sum/Max): 2/1 | Churn Δ: 11 | Churn Cumulative: 1823 | Contributors (this commit): 7 | Commits (past 90d): 29 | Contributors (cumulative): 9 | DMM Complexity: 0.5\n\nDIFF:\n@@ -608,8 +608,12 @@ class Model(Container):\n                     if output_shape[-1] == 1:\n                         # case: binary accuracy\n                         self.metrics.append(metrics_module.binary_accuracy(y_true, y_pred))\n+                    elif self.loss_functions[i] == objectives.sparse_categorical_crossentropy:\n+                        # case: categorical accuracy with sparse targets\n+                        self.metrics.append(\n+                            metrics_module.sparse_categorical_accuracy(y_true, y_pred))\n                     else:\n-                        # case: categorical accuracy\n+                        # case: categorical accuracy with dense targets\n                         self.metrics.append(metrics_module.categorical_accuracy(y_true, y_pred))\n                     if len(self.output_names) == 1:\n                         self.metrics_names.append('acc')\n\n@@ -10,6 +10,11 @@ def categorical_accuracy(y_true, y_pred):\n                   K.argmax(y_pred, axis=-1)))\n \n \n+def sparse_categorical_accuracy(y_true, y_pred):\n+    return K.mean(K.equal(K.max(y_true, axis=-1),\n+                          K.argmax(y_pred, axis=-1)))\n+\n+\n from .utils.generic_utils import get_from_module\n def get(identifier):\n     return get_from_module(identifier, globals(), 'metric')\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "keras#f84389da0819d0f549abca0ed2127add3ff04acb", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 4020 | Contributors (this commit): 21 | Commits (past 90d): 30 | Contributors (cumulative): 21 | DMM Complexity: None\n\nDIFF:\n@@ -552,7 +552,7 @@ class GRU(Recurrent):\n             B_U = [K.in_train_phase(K.dropout(ones, self.dropout_U), ones) for _ in range(3)]\n             constants.append(B_U)\n         else:\n-            constants.append([K.cast_to_floatx(1.) for _ in range(4)])\n+            constants.append([K.cast_to_floatx(1.) for _ in range(3)])\n \n         if 0 < self.dropout_W < 1:\n             input_shape = self.input_spec[0].shape\n@@ -562,7 +562,7 @@ class GRU(Recurrent):\n             B_W = [K.in_train_phase(K.dropout(ones, self.dropout_W), ones) for _ in range(3)]\n             constants.append(B_W)\n         else:\n-            constants.append([K.cast_to_floatx(1.) for _ in range(4)])\n+            constants.append([K.cast_to_floatx(1.) for _ in range(3)])\n         return constants\n \n     def get_config(self):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "keras#5f4019d98009dd7ff65926aefbd04dc3b9b8e190", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 14 | Lines Deleted: 1 | Files Changed: 2 | Hunks: 3 | Methods Changed: 2 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 15 | Churn Cumulative: 3745 | Contributors (this commit): 11 | Commits (past 90d): 39 | Contributors (cumulative): 14 | DMM Complexity: 0.75\n\nDIFF:\n@@ -1264,6 +1264,9 @@ class Merge(Layer):\n                                        node_indices, tensor_indices)\n             self.built = True\n             self.add_inbound_node(layers, node_indices, tensor_indices)\n+\n+            outputs = self.inbound_nodes[-1].output_tensors\n+            return outputs[0] # merge only returns a single tensor\n         else:\n             return self.call(inputs, mask)\n \n\n@@ -14,7 +14,7 @@ def test_masking():\n \n \n def test_merge():\n-    from keras.layers import Input, merge\n+    from keras.layers import Input, merge, Merge\n     from keras.models import Model\n \n     # test modes: 'sum', 'mul', 'concat', 'ave', 'cos', 'dot'.\n@@ -38,6 +38,16 @@ def test_merge():\n         model = Model.from_config(config)\n         model.compile('rmsprop', 'mse')\n \n+        # test Merge (#2460)\n+        merged = Merge(mode=mode)([input_a, input_b])\n+        model = Model([input_a, input_b], merged)\n+        model.compile('rmsprop', 'mse')\n+\n+        expected_output_shape = model.get_output_shape_for(input_shapes)\n+        actual_output_shape = model.predict(inputs).shape\n+        assert expected_output_shape == actual_output_shape\n+\n+\n     # test lambda with output_shape lambda\n     input_a = Input(shape=input_shapes[0][1:])\n     input_b = Input(shape=input_shapes[1][1:])\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "keras#59f8d6ca224aa93ffff2ece0e87ca2856a118ce0", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 4 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 6 | Churn Cumulative: 1076 | Contributors (this commit): 13 | Commits (past 90d): 5 | Contributors (cumulative): 13 | DMM Complexity: None\n\nDIFF:\n@@ -116,8 +116,10 @@ class SGD(Optimizer):\n         lr = self.lr * (1. / (1. + self.decay * self.iterations))\n         self.updates = [(self.iterations, self.iterations + 1.)]\n \n-        for p, g in zip(params, grads):\n-            m = K.variable(np.zeros(K.get_value(p).shape))  # momentum\n+        # momentum\n+        self.weights = [K.variable(np.zeros(K.get_value(p).shape)) for p in params]\n+        \n+        for p, g, m in zip(params, grads, self.weights):\n             v = self.momentum * m - lr * g  # velocity\n             self.updates.append((m, v))\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
