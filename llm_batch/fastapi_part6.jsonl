{"custom_id": "fastapi#093bb4cd19c7aad4c524b9084b3f23efe3fc47f3", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 27 | Lines Deleted: 17 | Files Changed: 82 | Hunks: 4 | Methods Changed: 4 | Complexity Δ (Sum/Max): 0/1 | Churn Δ: 44 | Churn Cumulative: 85 | Contributors (this commit): 1 | Commits (past 90d): 85 | Contributors (cumulative): 82 | DMM Complexity: 0.0\n\nDIFF:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n@@ -0,0 +1,8 @@\n+from fastapi import FastAPI\n+\n+my_awesome_api = FastAPI()\n+\n+\n+@my_awesome_api.get(\"/\")\n+async def root():\n+    return {\"message\": \"Hello World\"}\n\n@@ -0,0 +1,8 @@\n+from fastapi import FastAPI\n+\n+app = FastAPI()\n+\n+\n+@app.get(\"/\")\n+def root():\n+    return {\"message\": \"Hello World\"}\n\n\n\n\n\n\n\n\n@@ -0,0 +1,11 @@\n+from fastapi import FastAPI\n+\n+app = FastAPI()\n+\n+\n+@app.get(\"/users/{user_id}/items/{item_id}\")\n+async def read_user_item(\n+    user_id: int, item_id: str, needy: str\n+):\n+    item = {\"item_id\": item_id, \"owner_id\": user_id, \"needy\": needy}\n+    return item\n\n@@ -1,17 +0,0 @@\n-from fastapi import FastAPI\n-\n-app = FastAPI()\n-\n-\n-@app.get(\"/users/{user_id}/items/{item_id}\")\n-async def read_user_item(\n-    user_id: int, item_id: str, needy: str, q: str = None, short: bool = False\n-):\n-    item = {\"item_id\": item_id, \"owner_id\": user_id, \"needy\": needy}\n-    if q:\n-        item.update({\"q\": q})\n-    if not short:\n-        item.update(\n-            {\"description\": \"This is an amazing item that has a long description\"}\n-        )\n-    return item\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#4eb29506267cec07c7c9d45b569b951dfae61355", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 3 | Lines Deleted: 3 | Files Changed: 1 | Hunks: 3 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 6 | Churn Cumulative: 420 | Contributors (this commit): 1 | Commits (past 90d): 5 | Contributors (cumulative): 1 | DMM Complexity: None\n\nDIFF:\n@@ -249,16 +249,16 @@ def request_params_to_args(\n     errors = []\n     for field in required_params:\n         value = received_params.get(field.alias)\n+        schema: params.Param = field.schema\n+        assert isinstance(schema, params.Param), \"Params must be subclasses of Param\"\n         if value is None:\n             if field.required:\n                 errors.append(\n-                    ErrorWrapper(MissingError(), loc=field.alias, config=BaseConfig)\n+                    ErrorWrapper(MissingError(), loc=(schema.in_.value, field.alias), config=BaseConfig)\n                 )\n             else:\n                 values[field.name] = deepcopy(field.default)\n             continue\n-        schema: params.Param = field.schema\n-        assert isinstance(schema, params.Param), \"Params must be subclasses of Param\"\n         v_, errors_ = field.validate(value, values, loc=(schema.in_.value, field.alias))\n         if isinstance(errors_, ErrorWrapper):\n             errors.append(errors_)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#2b64dc699e222a011d5946fd53a2bda4df77d0fe", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 19 | Lines Deleted: 5 | Files Changed: 1 | Hunks: 5 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 24 | Churn Cumulative: 44 | Contributors (this commit): 1 | Commits (past 90d): 3 | Contributors (cumulative): 1 | DMM Complexity: None\n\nDIFF:\n@@ -1,16 +1,30 @@\n #%%\n-from pathlib import Path\n+from pathlib import Path, PurePath\n from string import digits\n \n \n #%%\n directory = Path(\"./docs/tutorial/src\")\n-output_directory = Path(\"./docs/tutorial/out\")\n+dirs = sorted([Path(f) for f in directory.iterdir()])\n+d: PurePath\n+sufix = \"__out__\"\n+for d in dirs:\n+    if d.name.endswith(sufix):\n+        continue\n+    output_dir_name = d.name + \"__out__\"\n+    output_directory = directory / output_dir_name\n     output_directory.mkdir(exist_ok=True)\n-files = sorted([Path(f) for f in directory.iterdir()])\n+    files = sorted([Path(f) for f in d.iterdir()])\n     for i, f in enumerate(files):\n-    f: Path\n-    index = str(i + 1).zfill(2)\n+        index = str(i + 1).zfill(3)\n         new_name = output_directory / f\"tutorial{index}.py\"\n         print(new_name)\n         f.rename(new_name)\n+\n+for d in dirs:\n+    current_dir = Path(str(d) + sufix)\n+    print(current_dir)\n+    current_dir.rename(d)\n+\n+\n+#%%\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#ddf20e8977af073df15c9a0b2076d3bfba938aba", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 7 | Lines Deleted: 5 | Files Changed: 3 | Hunks: 3 | Methods Changed: 2 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 12 | Churn Cumulative: 443 | Contributors (this commit): 1 | Commits (past 90d): 10 | Contributors (cumulative): 3 | DMM Complexity: 0.0\n\nDIFF:\n@@ -1,5 +1,5 @@\n from fastapi import Body, FastAPI\n-from pydantic import BaseModel, Schema\n+from pydantic import BaseModel\n \n app = FastAPI()\n \n\n@@ -4,8 +4,6 @@ app = FastAPI()\n \n \n @app.get(\"/users/{user_id}/items/{item_id}\")\n-async def read_user_item(\n-    user_id: int, item_id: str, needy: str\n-):\n+async def read_user_item(user_id: int, item_id: str, needy: str):\n     item = {\"item_id\": item_id, \"owner_id\": user_id, \"needy\": needy}\n     return item\n\n@@ -254,7 +254,11 @@ def request_params_to_args(\n         if value is None:\n             if field.required:\n                 errors.append(\n-                    ErrorWrapper(MissingError(), loc=(schema.in_.value, field.alias), config=BaseConfig)\n+                    ErrorWrapper(\n+                        MissingError(),\n+                        loc=(schema.in_.value, field.alias),\n+                        config=BaseConfig,\n+                    )\n                 )\n             else:\n                 values[field.name] = deepcopy(field.default)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#1f5762703dc4ce0e69510332461af9364019d3c3", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 130 | Lines Deleted: 0 | Files Changed: 10 | Hunks: 10 | Methods Changed: 10 | Complexity Δ (Sum/Max): 20/2 | Churn Δ: 130 | Churn Cumulative: 130 | Contributors (this commit): 1 | Commits (past 90d): 10 | Contributors (cumulative): 10 | DMM Complexity: 1.0\n\nDIFF:\n@@ -0,0 +1,11 @@\n+from fastapi import FastAPI\n+\n+app = FastAPI()\n+\n+\n+@app.get(\"/items/\")\n+async def read_items(q: str = None):\n+    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n+    if q:\n+        results.update({\"q\": q})\n+    return results\n\n@@ -0,0 +1,11 @@\n+from fastapi import FastAPI, Query\n+\n+app = FastAPI()\n+\n+\n+@app.get(\"/items/\")\n+async def read_items(q: str = Query(None, max_length=50)):\n+    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n+    if q:\n+        results.update({\"q\": q})\n+    return results\n\n@@ -0,0 +1,11 @@\n+from fastapi import FastAPI, Query\n+\n+app = FastAPI()\n+\n+\n+@app.get(\"/items/\")\n+async def read_items(q: str = Query(None, min_length=3, max_length=50)):\n+    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n+    if q:\n+        results.update({\"q\": q})\n+    return results\n\n@@ -0,0 +1,13 @@\n+from fastapi import FastAPI, Query\n+\n+app = FastAPI()\n+\n+\n+@app.get(\"/items/\")\n+async def read_items(\n+    q: str = Query(None, min_length=3, max_length=50, regex=\"^fixedquery$\")\n+):\n+    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n+    if q:\n+        results.update({\"q\": q})\n+    return results\n\n@@ -0,0 +1,11 @@\n+from fastapi import FastAPI, Query\n+\n+app = FastAPI()\n+\n+\n+@app.get(\"/items/\")\n+async def read_items(q: str = Query(\"fixedquery\", min_length=3)):\n+    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n+    if q:\n+        results.update({\"q\": q})\n+    return results\n\n@@ -0,0 +1,11 @@\n+from fastapi import FastAPI, Query\n+\n+app = FastAPI()\n+\n+\n+@app.get(\"/items/\")\n+async def read_items(q: str = Query(..., min_length=3)):\n+    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n+    if q:\n+        results.update({\"q\": q})\n+    return results\n\n@@ -0,0 +1,11 @@\n+from fastapi import FastAPI, Query\n+\n+app = FastAPI()\n+\n+\n+@app.get(\"/items/\")\n+async def read_items(q: str = Query(None, title=\"Query string\", min_length=3)):\n+    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n+    if q:\n+        results.update({\"q\": q})\n+    return results\n\n@@ -0,0 +1,18 @@\n+from fastapi import FastAPI, Query\n+\n+app = FastAPI()\n+\n+\n+@app.get(\"/items/\")\n+async def read_items(\n+    q: str = Query(\n+        None,\n+        title=\"Query string\",\n+        description=\"Query string for the items to search in the database that have a good match\",\n+        min_length=3,\n+    )\n+):\n+    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n+    if q:\n+        results.update({\"q\": q})\n+    return results\n\n@@ -0,0 +1,11 @@\n+from fastapi import FastAPI, Query\n+\n+app = FastAPI()\n+\n+\n+@app.get(\"/items/\")\n+async def read_items(q: str = Query(None, alias=\"item-query\")):\n+    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n+    if q:\n+        results.update({\"q\": q})\n+    return results\n\n@@ -0,0 +1,22 @@\n+from fastapi import FastAPI, Query\n+\n+app = FastAPI()\n+\n+\n+@app.get(\"/items/\")\n+async def read_items(\n+    q: str = Query(\n+        None,\n+        alias=\"item-query\",\n+        title=\"Query string\",\n+        description=\"Query string for the items to search in the database that have a good match\",\n+        min_length=3,\n+        max_length=50,\n+        regex=\"^fixedquery$\",\n+        deprecated=True,\n+    )\n+):\n+    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n+    if q:\n+        results.update({\"q\": q})\n+    return results\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#d79534b015832bc6d7d5434188872d3af8cc6bee", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 0 | Lines Deleted: 0 | Files Changed: 10 | Hunks: 0 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 0 | Churn Cumulative: 0 | Contributors (this commit): 1 | Commits (past 90d): 10 | Contributors (cumulative): 10 | DMM Complexity: None\n\nDIFF:\n\n\n\n\n\n\n\n\n\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#c432fc223cb365518e7ef82bb6df2cb7cda2cda5", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 84 | Lines Deleted: 0 | Files Changed: 6 | Hunks: 6 | Methods Changed: 6 | Complexity Δ (Sum/Max): 12/2 | Churn Δ: 84 | Churn Cumulative: 84 | Contributors (this commit): 1 | Commits (past 90d): 6 | Contributors (cumulative): 6 | DMM Complexity: 1.0\n\nDIFF:\n@@ -0,0 +1,14 @@\n+from fastapi import FastAPI, Path, Query\n+\n+app = FastAPI()\n+\n+\n+@app.get(\"/items/{item_id}\")\n+async def read_items(\n+    item_id: int = Path(..., title=\"The ID of the item to get\"),\n+    q: str = Query(None, alias=\"item-query\"),\n+):\n+    results = {\"item_id\": item_id}\n+    if q:\n+        results.update({\"q\": q})\n+    return results\n\n@@ -0,0 +1,13 @@\n+from fastapi import FastAPI, Path\n+\n+app = FastAPI()\n+\n+\n+@app.get(\"/items/{item_id}\")\n+async def read_items(\n+    q: str, item_id: int = Path(..., title=\"The ID of the item to get\")\n+):\n+    results = {\"item_id\": item_id}\n+    if q:\n+        results.update({\"q\": q})\n+    return results\n\n@@ -0,0 +1,13 @@\n+from fastapi import FastAPI, Path\n+\n+app = FastAPI()\n+\n+\n+@app.get(\"/items/{item_id}\")\n+async def read_items(\n+    *, item_id: int = Path(..., title=\"The ID of the item to get\"), q: str\n+):\n+    results = {\"item_id\": item_id}\n+    if q:\n+        results.update({\"q\": q})\n+    return results\n\n@@ -0,0 +1,13 @@\n+from fastapi import FastAPI, Path\n+\n+app = FastAPI()\n+\n+\n+@app.get(\"/items/{item_id}\")\n+async def read_items(\n+    *, item_id: int = Path(..., title=\"The ID of the item to get\", ge=1), q: str\n+):\n+    results = {\"item_id\": item_id}\n+    if q:\n+        results.update({\"q\": q})\n+    return results\n\n@@ -0,0 +1,15 @@\n+from fastapi import FastAPI, Path\n+\n+app = FastAPI()\n+\n+\n+@app.get(\"/items/{item_id}\")\n+async def read_items(\n+    *,\n+    item_id: int = Path(..., title=\"The ID of the item to get\", gt=0, le=1000),\n+    q: str,\n+):\n+    results = {\"item_id\": item_id}\n+    if q:\n+        results.update({\"q\": q})\n+    return results\n\n@@ -0,0 +1,16 @@\n+from fastapi import FastAPI, Path, Query\n+\n+app = FastAPI()\n+\n+\n+@app.get(\"/items/{item_id}\")\n+async def read_items(\n+    *,\n+    item_id: int = Path(..., title=\"The ID of the item to get\", ge=0, le=1000),\n+    q: str,\n+    size: float = Query(..., gt=0, lt=10.5)\n+):\n+    results = {\"item_id\": item_id}\n+    if q:\n+        results.update({\"q\": q})\n+    return results\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#710df85566a4525d71855f817214e3630f62c366", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 120 | Lines Deleted: 0 | Files Changed: 5 | Hunks: 5 | Methods Changed: 5 | Complexity Δ (Sum/Max): 8/3 | Churn Δ: 120 | Churn Cumulative: 120 | Contributors (this commit): 1 | Commits (past 90d): 5 | Contributors (cumulative): 5 | DMM Complexity: 1.0\n\nDIFF:\n@@ -0,0 +1,26 @@\n+from fastapi import FastAPI, Path\n+from pydantic import BaseModel\n+\n+app = FastAPI()\n+\n+\n+class Item(BaseModel):\n+    name: str\n+    description: str = None\n+    price: float\n+    tax: float = None\n+\n+\n+@app.put(\"/items/{item_id}\")\n+async def update_item(\n+    *,\n+    item_id: int = Path(..., title=\"The ID of the item to get\", ge=0, le=1000),\n+    q: str,\n+    item: Item = None,\n+):\n+    results = {\"item_id\": item_id}\n+    if q:\n+        results.update({\"q\": q})\n+    if item:\n+        results.update({\"item\": item})\n+    return results\n\n@@ -0,0 +1,22 @@\n+from fastapi import FastAPI\n+from pydantic import BaseModel\n+\n+app = FastAPI()\n+\n+\n+class Item(BaseModel):\n+    name: str\n+    description: str = None\n+    price: float\n+    tax: float = None\n+\n+\n+class User(BaseModel):\n+    username: str\n+    full_name: str = None\n+\n+\n+@app.put(\"/items/{item_id}\")\n+async def update_item(*, item_id: int, item: Item, user: User):\n+    results = {\"item_id\": item_id, \"item\": item, \"user\": user}\n+    return results\n\n@@ -0,0 +1,24 @@\n+from fastapi import Body, FastAPI\n+from pydantic import BaseModel\n+\n+app = FastAPI()\n+\n+\n+class Item(BaseModel):\n+    name: str\n+    description: str = None\n+    price: float\n+    tax: float = None\n+\n+\n+class User(BaseModel):\n+    username: str\n+    full_name: str = None\n+\n+\n+@app.put(\"/items/{item_id}\")\n+async def update_item(\n+    *, item_id: int, item: Item, user: User, importance: int = Body(...)\n+):\n+    results = {\"item_id\": item_id, \"item\": item, \"user\": user, \"importance\": importance}\n+    return results\n\n@@ -0,0 +1,31 @@\n+from fastapi import Body, FastAPI\n+from pydantic import BaseModel\n+\n+app = FastAPI()\n+\n+\n+class Item(BaseModel):\n+    name: str\n+    description: str = None\n+    price: float\n+    tax: float = None\n+\n+\n+class User(BaseModel):\n+    username: str\n+    full_name: str = None\n+\n+\n+@app.put(\"/items/{item_id}\")\n+async def update_item(\n+    *,\n+    item_id: int,\n+    item: Item,\n+    user: User,\n+    importance: int = Body(..., gt=0),\n+    q: str = None\n+):\n+    results = {\"item_id\": item_id, \"item\": item, \"user\": user, \"importance\": importance}\n+    if q:\n+        results.update({\"q\": q})\n+    return results\n\n@@ -0,0 +1,17 @@\n+from fastapi import Body, FastAPI\n+from pydantic import BaseModel\n+\n+app = FastAPI()\n+\n+\n+class Item(BaseModel):\n+    name: str\n+    description: str = None\n+    price: float\n+    tax: float = None\n+\n+\n+@app.put(\"/items/{item_id}\")\n+async def update_item(*, item_id: int, item: Item = Body(..., embed=True)):\n+    results = {\"item_id\": item_id, \"item\": item}\n+    return results\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#59cdc76c3e79404229b3add7c696ea7fa7314f79", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 46 | Lines Deleted: 0 | Files Changed: 2 | Hunks: 2 | Methods Changed: 2 | Complexity Δ (Sum/Max): 2/1 | Churn Δ: 46 | Churn Cumulative: 46 | Contributors (this commit): 1 | Commits (past 90d): 2 | Contributors (cumulative): 2 | DMM Complexity: 1.0\n\nDIFF:\n@@ -0,0 +1,17 @@\n+from fastapi import Body, FastAPI\n+from pydantic import BaseModel, Schema\n+\n+app = FastAPI()\n+\n+\n+class Item(BaseModel):\n+    name: str\n+    description: str = Schema(None, title=\"The description of the item\", max_length=300)\n+    price: float = Schema(..., gt=0, description=\"The price must be greater than zero\")\n+    tax: float = None\n+\n+\n+@app.put(\"/items/{item_id}\")\n+async def update_item(*, item_id: int, item: Item = Body(..., embed=True)):\n+    results = {\"item_id\": item_id, \"item\": item}\n+    return results\n\n@@ -0,0 +1,29 @@\n+from fastapi import Body, FastAPI\n+from pydantic import BaseModel\n+\n+app = FastAPI()\n+\n+\n+class Item(BaseModel):\n+    name: str\n+    description: str = None\n+    price: float\n+    tax: float = None\n+\n+\n+@app.put(\"/items/{item_id}\")\n+async def update_item(\n+    *,\n+    item_id: int,\n+    item: Item = Body(\n+        ...,\n+        example={\n+            \"name\": \"Foo\",\n+            \"description\": \"A very nice Item\",\n+            \"price\": 35.4,\n+            \"tax\": 3.2,\n+        },\n+    )\n+):\n+    results = {\"item_id\": item_id, \"item\": item}\n+    return results\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#76f2b67d38ad3ab6634f0a843d029d40f9889301", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 188 | Lines Deleted: 0 | Files Changed: 8 | Hunks: 8 | Methods Changed: 8 | Complexity Δ (Sum/Max): 8/1 | Churn Δ: 188 | Churn Cumulative: 188 | Contributors (this commit): 1 | Commits (past 90d): 8 | Contributors (cumulative): 8 | DMM Complexity: 1.0\n\nDIFF:\n@@ -0,0 +1,18 @@\n+from fastapi import FastAPI\n+from pydantic import BaseModel\n+\n+app = FastAPI()\n+\n+\n+class Item(BaseModel):\n+    name: str\n+    description: str = None\n+    price: float\n+    tax: float = None\n+    tags: list = []\n+\n+\n+@app.put(\"/items/{item_id}\")\n+async def update_item(*, item_id: int, item: Item):\n+    results = {\"item_id\": item_id, \"item\": item}\n+    return results\n\n@@ -0,0 +1,20 @@\n+from typing import List\n+\n+from fastapi import FastAPI\n+from pydantic import BaseModel\n+\n+app = FastAPI()\n+\n+\n+class Item(BaseModel):\n+    name: str\n+    description: str = None\n+    price: float\n+    tax: float = None\n+    tags: List[str] = []\n+\n+\n+@app.put(\"/items/{item_id}\")\n+async def update_item(*, item_id: int, item: Item):\n+    results = {\"item_id\": item_id, \"item\": item}\n+    return results\n\n@@ -0,0 +1,20 @@\n+from typing import Set\n+\n+from fastapi import FastAPI\n+from pydantic import BaseModel\n+\n+app = FastAPI()\n+\n+\n+class Item(BaseModel):\n+    name: str\n+    description: str = None\n+    price: float\n+    tax: float = None\n+    tags: Set[str] = set()\n+\n+\n+@app.put(\"/items/{item_id}\")\n+async def update_item(*, item_id: int, item: Item):\n+    results = {\"item_id\": item_id, \"item\": item}\n+    return results\n\n@@ -0,0 +1,26 @@\n+from typing import Set\n+\n+from fastapi import FastAPI\n+from pydantic import BaseModel\n+\n+app = FastAPI()\n+\n+\n+class Image(BaseModel):\n+    url: str\n+    name: str\n+\n+\n+class Item(BaseModel):\n+    name: str\n+    description: str = None\n+    price: float\n+    tax: float = None\n+    tags: Set[str] = []\n+    image: Image = None\n+\n+\n+@app.put(\"/items/{item_id}\")\n+async def update_item(*, item_id: int, item: Item):\n+    results = {\"item_id\": item_id, \"item\": item}\n+    return results\n\n@@ -0,0 +1,27 @@\n+from typing import Set\n+\n+from fastapi import FastAPI\n+from pydantic import BaseModel\n+from pydantic.types import UrlStr\n+\n+app = FastAPI()\n+\n+\n+class Image(BaseModel):\n+    url: UrlStr\n+    name: str\n+\n+\n+class Item(BaseModel):\n+    name: str\n+    description: str = None\n+    price: float\n+    tax: float = None\n+    tags: Set[str] = []\n+    image: Image = None\n+\n+\n+@app.put(\"/items/{item_id}\")\n+async def update_item(*, item_id: int, item: Item):\n+    results = {\"item_id\": item_id, \"item\": item}\n+    return results\n\n@@ -0,0 +1,27 @@\n+from typing import List, Set\n+\n+from fastapi import FastAPI\n+from pydantic import BaseModel\n+from pydantic.types import UrlStr\n+\n+app = FastAPI()\n+\n+\n+class Image(BaseModel):\n+    url: UrlStr\n+    name: str\n+\n+\n+class Item(BaseModel):\n+    name: str\n+    description: str = None\n+    price: float\n+    tax: float = None\n+    tags: Set[str] = []\n+    image: List[Image] = None\n+\n+\n+@app.put(\"/items/{item_id}\")\n+async def update_item(*, item_id: int, item: Item):\n+    results = {\"item_id\": item_id, \"item\": item}\n+    return results\n\n@@ -0,0 +1,33 @@\n+from typing import List, Set\n+\n+from fastapi import FastAPI\n+from pydantic import BaseModel\n+from pydantic.types import UrlStr\n+\n+app = FastAPI()\n+\n+\n+class Image(BaseModel):\n+    url: UrlStr\n+    name: str\n+\n+\n+class Item(BaseModel):\n+    name: str\n+    description: str = None\n+    price: float\n+    tax: float = None\n+    tags: Set[str] = []\n+    image: List[Image] = None\n+\n+\n+class Offer(BaseModel):\n+    name: str\n+    description: str = None\n+    price: float\n+    items: List[Item]\n+\n+\n+@app.post(\"/offers/\")\n+async def create_offer(*, offer: Offer):\n+    return offer\n\n@@ -0,0 +1,17 @@\n+from typing import List\n+\n+from fastapi import FastAPI\n+from pydantic import BaseModel\n+from pydantic.types import UrlStr\n+\n+app = FastAPI()\n+\n+\n+class Image(BaseModel):\n+    url: UrlStr\n+    name: str\n+\n+\n+@app.post(\"/images/multiple/\")\n+async def create_multiple_images(*, images: List[Image]):\n+    return images\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#0d9519a77107485dff11f306d51c3da816cc0e50", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 8 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 8 | Churn Cumulative: 8 | Contributors (this commit): 1 | Commits (past 90d): 1 | Contributors (cumulative): 1 | DMM Complexity: 1.0\n\nDIFF:\n@@ -0,0 +1,8 @@\n+from fastapi import Cookie, FastAPI\n+\n+app = FastAPI()\n+\n+\n+@app.get(\"/items/\")\n+async def read_items(*, ads_id: str = Cookie(None)):\n+    return {\"ads_id\": ads_id}\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#0fdd807a530de49d75397d3c9e4427c81cbeab96", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 16 | Lines Deleted: 0 | Files Changed: 2 | Hunks: 2 | Methods Changed: 2 | Complexity Δ (Sum/Max): 2/1 | Churn Δ: 16 | Churn Cumulative: 16 | Contributors (this commit): 1 | Commits (past 90d): 2 | Contributors (cumulative): 2 | DMM Complexity: 1.0\n\nDIFF:\n@@ -0,0 +1,8 @@\n+from fastapi import FastAPI, Header\n+\n+app = FastAPI()\n+\n+\n+@app.get(\"/items/\")\n+async def read_items(*, user_agent: str = Header(None)):\n+    return {\"User-Agent\": user_agent}\n\n@@ -0,0 +1,8 @@\n+from fastapi import FastAPI, Header\n+\n+app = FastAPI()\n+\n+\n+@app.get(\"/items/\")\n+async def read_items(*, strange_header: str = Header(None, convert_underscores=False)):\n+    return {\"strange_header\": strange_header}\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#222b75ac0ccdb728a25184fc2f3ac4ac0cc4197c", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 60 | Lines Deleted: 0 | Files Changed: 3 | Hunks: 3 | Methods Changed: 3 | Complexity Δ (Sum/Max): 3/1 | Churn Δ: 60 | Churn Cumulative: 60 | Contributors (this commit): 1 | Commits (past 90d): 3 | Contributors (cumulative): 3 | DMM Complexity: 1.0\n\nDIFF:\n@@ -0,0 +1,19 @@\n+from typing import Set\n+\n+from fastapi import FastAPI\n+from pydantic import BaseModel\n+\n+app = FastAPI()\n+\n+\n+class Item(BaseModel):\n+    name: str\n+    description: str = None\n+    price: float\n+    tax: float = None\n+    tags: Set[str] = []\n+\n+\n+@app.post(\"/items/\", response_model=Item)\n+async def create_item(*, item: Item):\n+    return item\n\n@@ -0,0 +1,18 @@\n+from fastapi import FastAPI\n+from pydantic import BaseModel\n+from pydantic.types import EmailStr\n+\n+app = FastAPI()\n+\n+\n+class UserIn(BaseModel):\n+    username: str\n+    password: str\n+    email: EmailStr\n+    full_name: str = None\n+\n+\n+# Don't do this in production!\n+@app.post(\"/user/\", response_model=UserIn)\n+async def create_user(*, user: UserIn):\n+    return user\n\n@@ -0,0 +1,23 @@\n+from fastapi import FastAPI\n+from pydantic import BaseModel\n+from pydantic.types import EmailStr\n+\n+app = FastAPI()\n+\n+\n+class UserIn(BaseModel):\n+    username: str\n+    password: str\n+    email: EmailStr\n+    full_name: str = None\n+\n+\n+class UserOut(BaseModel):\n+    username: str\n+    email: EmailStr\n+    full_name: str = None\n+\n+\n+@app.post(\"/user/\", response_model=UserOut)\n+async def create_user(*, user: UserIn):\n+    return user\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#99c7ebdb6b2f850d730ac2ea4c61878f690ea9be", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 82 | Lines Deleted: 0 | Files Changed: 2 | Hunks: 2 | Methods Changed: 6 | Complexity Δ (Sum/Max): 6/3 | Churn Δ: 82 | Churn Cumulative: 82 | Contributors (this commit): 1 | Commits (past 90d): 2 | Contributors (cumulative): 2 | DMM Complexity: 1.0\n\nDIFF:\n@@ -0,0 +1,42 @@\n+from fastapi import FastAPI\n+from pydantic import BaseModel\n+from pydantic.types import EmailStr\n+\n+app = FastAPI()\n+\n+\n+class UserIn(BaseModel):\n+    username: str\n+    password: str\n+    email: EmailStr\n+    full_name: str = None\n+\n+\n+class UserOut(BaseModel):\n+    username: str\n+    email: EmailStr\n+    full_name: str = None\n+\n+\n+class UserInDB(BaseModel):\n+    username: str\n+    hashed_password: str\n+    email: EmailStr\n+    full_name: str = None\n+\n+\n+def fake_password_hasher(raw_password: str):\n+    return \"supersecret\" + raw_password\n+\n+\n+def fake_save_user(user_in: UserIn):\n+    hashed_password = fake_password_hasher(user_in.password)\n+    user_in_db = UserInDB(**user_in.dict(), hashed_password=hashed_password)\n+    print(\"User saved! ..not really\")\n+    return user_in_db\n+\n+\n+@app.post(\"/user/\", response_model=UserOut)\n+async def create_user(*, user_in: UserIn):\n+    user_saved = fake_save_user(user_in)\n+    return user_saved\n\n@@ -0,0 +1,40 @@\n+from fastapi import FastAPI\n+from pydantic import BaseModel\n+from pydantic.types import EmailStr\n+\n+app = FastAPI()\n+\n+\n+class UserBase(BaseModel):\n+    username: str\n+    email: EmailStr\n+    full_name: str = None\n+\n+\n+class UserIn(UserBase):\n+    password: str\n+\n+\n+class UserOut(UserBase):\n+    pass\n+\n+\n+class UserInDB(UserBase):\n+    hashed_password: str\n+\n+\n+def fake_password_hasher(raw_password: str):\n+    return \"supersecret\" + raw_password\n+\n+\n+def fake_save_user(user_in: UserIn):\n+    hashed_password = fake_password_hasher(user_in.password)\n+    user_in_db = UserInDB(**user_in.dict(), hashed_password=hashed_password)\n+    print(\"User saved! ..not really\")\n+    return user_in_db\n+\n+\n+@app.post(\"/user/\", response_model=UserOut)\n+async def create_user(*, user_in: UserIn):\n+    user_saved = fake_save_user(user_in)\n+    return user_saved\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#e5725d2af1fd2302af83daa7e19f27e7642e3a5d", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 8 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 8 | Churn Cumulative: 8 | Contributors (this commit): 1 | Commits (past 90d): 1 | Contributors (cumulative): 1 | DMM Complexity: 1.0\n\nDIFF:\n@@ -0,0 +1,8 @@\n+from fastapi import FastAPI, Form\n+\n+app = FastAPI()\n+\n+\n+@app.post(\"/login/\")\n+async def login(*, username: str = Form(...), password: str = Form(...)):\n+    return {\"username\": username}\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#617a260df66c017d1aca7c77a0b92150dfda14f5", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 16 | Lines Deleted: 0 | Files Changed: 3 | Hunks: 2 | Methods Changed: 2 | Complexity Δ (Sum/Max): 2/1 | Churn Δ: 16 | Churn Cumulative: 16 | Contributors (this commit): 1 | Commits (past 90d): 3 | Contributors (cumulative): 3 | DMM Complexity: 1.0\n\nDIFF:\n@@ -0,0 +1,8 @@\n+from fastapi import FastAPI, File\n+\n+app = FastAPI()\n+\n+\n+@app.post(\"/files/\")\n+async def create_file(*, file: bytes = File(...)):\n+    return {\"file_size\": len(file)}\n\n@@ -0,0 +1,8 @@\n+from fastapi import FastAPI, File, Form\n+\n+app = FastAPI()\n+\n+\n+@app.post(\"/files/\")\n+async def create_file(*, file: bytes = File(...), token: str = Form(...)):\n+    return {\"file_size\": len(file), \"token\": token}\n\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#e790bf6f1b908cad140d2ed39d97b4f128c1a137", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 152 | Lines Deleted: 0 | Files Changed: 6 | Hunks: 6 | Methods Changed: 10 | Complexity Δ (Sum/Max): 10/3 | Churn Δ: 152 | Churn Cumulative: 152 | Contributors (this commit): 1 | Commits (past 90d): 6 | Contributors (cumulative): 6 | DMM Complexity: 1.0\n\nDIFF:\n@@ -0,0 +1,20 @@\n+from typing import Set\n+\n+from fastapi import FastAPI\n+from pydantic import BaseModel\n+from starlette.status import HTTP_201_CREATED\n+\n+app = FastAPI()\n+\n+\n+class Item(BaseModel):\n+    name: str\n+    description: str = None\n+    price: float\n+    tax: float = None\n+    tags: Set[str] = []\n+\n+\n+@app.post(\"/items/\", response_model=Item, status_code=HTTP_201_CREATED)\n+async def create_item(*, item: Item):\n+    return item\n\n@@ -0,0 +1,29 @@\n+from typing import Set\n+\n+from fastapi import FastAPI\n+from pydantic import BaseModel\n+\n+app = FastAPI()\n+\n+\n+class Item(BaseModel):\n+    name: str\n+    description: str = None\n+    price: float\n+    tax: float = None\n+    tags: Set[str] = []\n+\n+\n+@app.post(\"/items/\", response_model=Item, tags=[\"items\"])\n+async def create_item(*, item: Item):\n+    return item\n+\n+\n+@app.get(\"/items/\", tags=[\"items\"])\n+async def read_items():\n+    return [{\"name\": \"Foo\", \"price\": 42}]\n+\n+\n+@app.get(\"/users/\", tags=[\"users\"])\n+async def read_users():\n+    return [{\"username\": \"johndoe\"}]\n\n@@ -0,0 +1,24 @@\n+from typing import Set\n+\n+from fastapi import FastAPI\n+from pydantic import BaseModel\n+\n+app = FastAPI()\n+\n+\n+class Item(BaseModel):\n+    name: str\n+    description: str = None\n+    price: float\n+    tax: float = None\n+    tags: Set[str] = []\n+\n+\n+@app.post(\n+    \"/items/\",\n+    response_model=Item,\n+    summary=\"Create an item\",\n+    description=\"Create an item with all the information, name, description, price, tax and a set of unique tags\",\n+)\n+async def create_item(*, item: Item):\n+    return item\n\n@@ -0,0 +1,28 @@\n+from typing import Set\n+\n+from fastapi import FastAPI\n+from pydantic import BaseModel\n+\n+app = FastAPI()\n+\n+\n+class Item(BaseModel):\n+    name: str\n+    description: str = None\n+    price: float\n+    tax: float = None\n+    tags: Set[str] = []\n+\n+\n+@app.post(\"/items/\", response_model=Item, summary=\"Create an item\")\n+async def create_item(*, item: Item):\n+    \"\"\"\n+    Create an item with all the information:\n+    \n+    * name: each item must have a name\n+    * description: a long description\n+    * price: required\n+    * tax: if the item doesn't have tax, you can omit this\n+    * tags: a set of unique tag strings for this item\n+    \"\"\"\n+    return item\n\n@@ -0,0 +1,33 @@\n+from typing import Set\n+\n+from fastapi import FastAPI\n+from pydantic import BaseModel\n+\n+app = FastAPI()\n+\n+\n+class Item(BaseModel):\n+    name: str\n+    description: str = None\n+    price: float\n+    tax: float = None\n+    tags: Set[str] = []\n+\n+\n+@app.post(\n+    \"/items/\",\n+    response_model=Item,\n+    summary=\"Create an item\",\n+    response_description=\"The created item\",\n+)\n+async def create_item(*, item: Item):\n+    \"\"\"\n+    Create an item with all the information:\n+    \n+    * name: each item must have a name\n+    * description: a long description\n+    * price: required\n+    * tax: if the item doesn't have tax, you can omit this\n+    * tags: a set of unique tag strings for this item\n+    \"\"\"\n+    return item\n\n@@ -0,0 +1,18 @@\n+from fastapi import FastAPI\n+\n+app = FastAPI()\n+\n+\n+@app.get(\"/items/\", tags=[\"items\"])\n+async def read_items():\n+    return [{\"name\": \"Foo\", \"price\": 42}]\n+\n+\n+@app.get(\"/users/\", tags=[\"users\"])\n+async def read_users():\n+    return [{\"username\": \"johndoe\"}]\n+\n+\n+@app.get(\"/elements/\", tags=[\"items\"], deprecated=True)\n+async def read_elements():\n+    return [{\"item_id\": \"Foo\"}]\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#0df272049041773ba6b56e8947166b749f2eb84c", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 16 | Lines Deleted: 0 | Files Changed: 2 | Hunks: 2 | Methods Changed: 2 | Complexity Δ (Sum/Max): 2/1 | Churn Δ: 16 | Churn Cumulative: 16 | Contributors (this commit): 1 | Commits (past 90d): 2 | Contributors (cumulative): 2 | DMM Complexity: 1.0\n\nDIFF:\n@@ -0,0 +1,8 @@\n+from fastapi import FastAPI\n+\n+app = FastAPI()\n+\n+\n+@app.get(\"/items/\", operation_id=\"some_specific_id_you_define\")\n+async def read_items():\n+    return [{\"item_id\": \"Foo\"}]\n\n@@ -0,0 +1,8 @@\n+from fastapi import FastAPI\n+\n+app = FastAPI()\n+\n+\n+@app.get(\"/items/\", include_in_schema=False)\n+async def read_items():\n+    return [{\"item_id\": \"Foo\"}]\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#f6667ecfb0999d82c8a21c8625a339702e0113cb", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 69 | Lines Deleted: 0 | Files Changed: 4 | Hunks: 4 | Methods Changed: 5 | Complexity Δ (Sum/Max): 5/2 | Churn Δ: 69 | Churn Cumulative: 69 | Contributors (this commit): 1 | Commits (past 90d): 4 | Contributors (cumulative): 4 | DMM Complexity: 1.0\n\nDIFF:\n@@ -0,0 +1,9 @@\n+from fastapi import FastAPI\n+from starlette.responses import UJSONResponse\n+\n+app = FastAPI()\n+\n+\n+@app.get(\"/items/\", content_type=UJSONResponse)\n+async def read_items():\n+    return [{\"item_id\": \"Foo\"}]\n\n@@ -0,0 +1,18 @@\n+from fastapi import FastAPI\n+from starlette.responses import HTMLResponse\n+\n+app = FastAPI()\n+\n+\n+@app.get(\"/items/\", content_type=HTMLResponse)\n+async def read_items():\n+    return \"\"\"\n+    <html>\n+        <head>\n+            <title>Some HTML in here</title>\n+        </head>\n+        <body>\n+            <h1>Look ma! HTML!</h1>\n+        </body>\n+    </html>\n+    \"\"\"\n\n@@ -0,0 +1,19 @@\n+from fastapi import FastAPI\n+from starlette.responses import HTMLResponse\n+\n+app = FastAPI()\n+\n+\n+@app.get(\"/items/\")\n+async def read_items():\n+    html_content = \"\"\"\n+    <html>\n+        <head>\n+            <title>Some HTML in here</title>\n+        </head>\n+        <body>\n+            <h1>Look ma! HTML!</h1>\n+        </body>\n+    </html>\n+    \"\"\"\n+    return HTMLResponse(content=html_content, status_code=200)\n\n@@ -0,0 +1,23 @@\n+from fastapi import FastAPI\n+from starlette.responses import HTMLResponse\n+\n+app = FastAPI()\n+\n+\n+def generate_html_response():\n+    html_content = \"\"\"\n+    <html>\n+        <head>\n+            <title>Some HTML in here</title>\n+        </head>\n+        <body>\n+            <h1>Look ma! HTML!</h1>\n+        </body>\n+    </html>\n+    \"\"\"\n+    return HTMLResponse(content=html_content, status_code=200)\n+\n+\n+@app.get(\"/items/\", content_type=HTMLResponse)\n+async def read_items():\n+    return generate_html_response()\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#c9758e15a1e6965377009b67b547861bb1971dea", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 122 | Lines Deleted: 0 | Files Changed: 4 | Hunks: 4 | Methods Changed: 10 | Complexity Δ (Sum/Max): 14/6 | Churn Δ: 122 | Churn Cumulative: 122 | Contributors (this commit): 1 | Commits (past 90d): 4 | Contributors (cumulative): 4 | DMM Complexity: 1.0\n\nDIFF:\n@@ -0,0 +1,12 @@\n+from fastapi import Depends, FastAPI\n+\n+app = FastAPI()\n+\n+\n+async def common_parameters(q: str = None, skip: int = 0, limit: int = 100):\n+    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n+\n+\n+@app.get(\"/items/\")\n+async def read_items(commons: dict = Depends(common_parameters)):\n+    return commons\n\n@@ -0,0 +1,27 @@\n+from fastapi import Depends, FastAPI\n+from pydantic import BaseModel\n+\n+app = FastAPI()\n+\n+\n+fake_items_db = [{\"item_name\": \"Foo\"}, {\"item_name\": \"Bar\"}, {\"item_name\": \"Baz\"}]\n+\n+\n+class CommonQueryParams(BaseModel):\n+    q: str = None\n+    skip: int = None\n+    limit: int = None\n+\n+\n+async def common_parameters(q: str = None, skip: int = 0, limit: int = 100):\n+    return CommonQueryParams(q=q, skip=skip, limit=limit)\n+\n+\n+@app.get(\"/items/\")\n+async def read_items(commons: CommonQueryParams = Depends(common_parameters)):\n+    response = {}\n+    if commons.q:\n+        response.update({\"q\": commons.q})\n+    items = fake_items_db[commons.skip : commons.limit]\n+    response.update({\"items\": items})\n+    return response\n\n@@ -0,0 +1,34 @@\n+from typing import List\n+\n+from fastapi import Cookie, Depends, FastAPI\n+from pydantic import BaseModel\n+\n+app = FastAPI()\n+\n+\n+class InterestsTracker(BaseModel):\n+    track_code: str\n+    interests: List[str]\n+\n+\n+fake_tracked_users_db = {\n+    \"Foo\": {\"track_code\": \"Foo\", \"interests\": [\"sports\", \"movies\"]},\n+    \"Bar\": {\"track_code\": \"Bar\", \"interests\": [\"food\", \"shows\"]},\n+    \"Baz\": {\"track_code\": \"Baz\", \"interests\": [\"gaming\", \"virtual reality\"]},\n+}\n+\n+\n+async def get_tracked_interests(track_code: str = Cookie(None)):\n+    if track_code in fake_tracked_users_db:\n+        track_dict = fake_tracked_users_db[track_code]\n+        track = InterestsTracker(**track_dict)\n+        return track\n+    return None\n+\n+\n+@app.get(\"/interests/\")\n+async def read_interests(\n+    tracked_interests: InterestsTracker = Depends(get_tracked_interests)\n+):\n+    response = {\"interests\": tracked_interests.interests}\n+    return response\n\n@@ -0,0 +1,49 @@\n+from random import choice\n+from typing import List\n+\n+from fastapi import Cookie, Depends, FastAPI\n+from pydantic import BaseModel\n+\n+app = FastAPI()\n+\n+\n+class InterestsTracker(BaseModel):\n+    track_code: str\n+    interests: List[str]\n+\n+\n+fake_tracked_users_db = {\n+    \"Foo\": {\"track_code\": \"Foo\", \"interests\": [\"sports\", \"movies\"]},\n+    \"Bar\": {\"track_code\": \"Bar\", \"interests\": [\"food\", \"shows\"]},\n+    \"Baz\": {\"track_code\": \"Baz\", \"interests\": [\"gaming\", \"virtual reality\"]},\n+}\n+\n+\n+async def get_tracked_interests(track_code: str = Cookie(None)):\n+    if track_code in fake_tracked_users_db:\n+        track_dict = fake_tracked_users_db[track_code]\n+        track = InterestsTracker(**track_dict)\n+        return track\n+    return None\n+\n+\n+class ComplexTracker:\n+    def __init__(self, tracker: InterestsTracker = Depends(get_tracked_interests)):\n+        self.tracker = tracker\n+\n+    def random_interest(self):\n+        \"\"\"\n+        Get a random interest from the tracked ones for the current user.\n+        If the user doesn't have tracked interests, return a random one from the ones available.\n+        \"\"\"\n+        if self.tracker.interests:\n+            return choice(self.tracker.interests)\n+        return choice(\n+            [\"sports\", \"movies\", \"food\", \"shows\", \"gaming\", \"virtual reality\"]\n+        )\n+\n+\n+@app.get(\"/suggested-category\")\n+async def read_suggested_category(tracker: ComplexTracker = Depends(None)):\n+    response = {\"category\": tracker.random_interest()}\n+    return response\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#c9e652776874ca738769400ed5db7a59c98232c1", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 43 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 3 | Complexity Δ (Sum/Max): 3/3 | Churn Δ: 43 | Churn Cumulative: 43 | Contributors (this commit): 1 | Commits (past 90d): 1 | Contributors (cumulative): 1 | DMM Complexity: 1.0\n\nDIFF:\n@@ -0,0 +1,43 @@\n+from fastapi import FastAPI\n+\n+from sqlalchemy import Boolean, Column, Integer, String, create_engine\n+from sqlalchemy.ext.declarative import declarative_base, declared_attr\n+from sqlalchemy.orm import scoped_session, sessionmaker\n+\n+# SQLAlchemy specific code, as with any other app\n+SQLALCHEMY_DATABASE_URI = \"postgresql://user:password@postgresserver/db\"\n+\n+engine = create_engine(SQLALCHEMY_DATABASE_URI, convert_unicode=True)\n+db_session = scoped_session(\n+    sessionmaker(autocommit=False, autoflush=False, bind=engine)\n+)\n+\n+class CustomBase:\n+    # Generate __tablename__ automatically\n+    @declared_attr\n+    def __tablename__(cls):\n+        return cls.__name__.lower()\n+\n+\n+Base = declarative_base(cls=CustomBase)\n+\n+\n+class User(Base):\n+    id = Column(Integer, primary_key=True, index=True)\n+    email = Column(String, unique=True, index=True)\n+    hashed_password = Column(String)\n+    is_active = Column(Boolean(), default=True)\n+\n+\n+def get_user(username, db_session):\n+    return db_session.query(User).filter(User.id == username).first()\n+\n+\n+# FastAPI specific code\n+app = FastAPI()\n+\n+\n+@app.get(\"/users/{username}\")\n+def read_user(username: str):\n+    user = get_user(username, db_session)\n+    return user\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#8a95ea23e25c73a8f517804840e17f65ed395979", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 55 | Lines Deleted: 0 | Files Changed: 2 | Hunks: 2 | Methods Changed: 3 | Complexity Δ (Sum/Max): 4/4 | Churn Δ: 55 | Churn Cumulative: 98 | Contributors (this commit): 1 | Commits (past 90d): 3 | Contributors (cumulative): 2 | DMM Complexity: 1.0\n\nDIFF:\n@@ -0,0 +1,54 @@\n+from typing import Optional\n+\n+from fastapi import FastAPI\n+from pydantic import BaseModel\n+\n+from couchbase import LOCKMODE_WAIT\n+from couchbase.bucket import Bucket\n+from couchbase.cluster import Cluster, PasswordAuthenticator\n+\n+USERPROFILE_DOC_TYPE = \"userprofile\"\n+\n+\n+def get_bucket():\n+    cluster = Cluster(\"couchbase://couchbasehost:8091\")\n+    authenticator = PasswordAuthenticator(\"username\", \"password\")\n+    cluster.authenticate(authenticator)\n+    bucket: Bucket = cluster.open_bucket(\"bucket_name\", lockmode=LOCKMODE_WAIT)\n+    return bucket\n+\n+\n+class User(BaseModel):\n+    username: str\n+    email: Optional[str] = None\n+    full_name: Optional[str] = None\n+    disabled: Optional[bool] = None\n+\n+\n+class UserInDB(User):\n+    type: str = USERPROFILE_DOC_TYPE\n+    hashed_password: str\n+\n+    class Meta:\n+        key: Optional[str] = None\n+\n+\n+def get_user(bucket: Bucket, username: str):\n+    doc_id = f\"userprofile::{username}\"\n+    result = bucket.get(doc_id, quiet=True)\n+    if not result.value:\n+        return None\n+    user = UserInDB(**result.value)\n+    user.Meta.key = result.key\n+    return user\n+\n+\n+# FastAPI specific code\n+app = FastAPI()\n+\n+\n+@app.get(\"/users/{username}\", response_model=User)\n+def read_user(username: str):\n+    bucket = get_bucket()\n+    user = get_user(bucket=bucket, username=username)\n+    return user\n\n@@ -12,6 +12,7 @@ db_session = scoped_session(\n     sessionmaker(autocommit=False, autoflush=False, bind=engine)\n )\n \n+\n class CustomBase:\n     # Generate __tablename__ automatically\n     @declared_attr\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#70b0231f64f3cf7a66f4d87fb30e303dcefa18d6", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 1189 | Files Changed: 66 | Hunks: 57 | Methods Changed: 70 | Complexity Δ (Sum/Max): -1/0 | Churn Δ: 1191 | Churn Cumulative: 1193 | Contributors (this commit): 1 | Commits (past 90d): 123 | Contributors (cumulative): 66 | DMM Complexity: 0.0\n\nDIFF:\n@@ -1,11 +0,0 @@\n-from fastapi import FastAPI, Query\n-\n-app = FastAPI()\n-\n-\n-@app.get(\"/items/\")\n-async def read_items(q: str = Query(None, max_length=50)):\n-    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n-    if q:\n-        results.update({\"q\": q})\n-    return results\n\n@@ -1,11 +0,0 @@\n-from fastapi import FastAPI, Query\n-\n-app = FastAPI()\n-\n-\n-@app.get(\"/items/\")\n-async def read_items(q: str = Query(None, min_length=3, max_length=50)):\n-    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n-    if q:\n-        results.update({\"q\": q})\n-    return results\n\n@@ -1,13 +0,0 @@\n-from fastapi import FastAPI, Query\n-\n-app = FastAPI()\n-\n-\n-@app.get(\"/items/\")\n-async def read_items(\n-    q: str = Query(None, min_length=3, max_length=50, regex=\"^fixedquery$\")\n-):\n-    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n-    if q:\n-        results.update({\"q\": q})\n-    return results\n\n@@ -1,15 +0,0 @@\n-from fastapi import FastAPI, Query\n-\n-app = FastAPI()\n-\n-\n-@app.get(\"/items/\")\n-async def read_items(\n-    q: str = Query(\n-        None, title=\"Query string\", min_length=3, max_length=50, regex=\"^fixedquery$\"\n-    )\n-):\n-    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n-    if q:\n-        results.update({\"q\": q})\n-    return results\n\n@@ -1,20 +0,0 @@\n-from fastapi import FastAPI, Query\n-\n-app = FastAPI()\n-\n-\n-@app.get(\"/items/\")\n-async def read_items(\n-    q: str = Query(\n-        None,\n-        title=\"Query string\",\n-        description=\"Query string for the items to search in the database that have a good match\",\n-        min_length=3,\n-        max_length=50,\n-        regex=\"^fixedquery$\",\n-    )\n-):\n-    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n-    if q:\n-        results.update({\"q\": q})\n-    return results\n\n@@ -1,21 +0,0 @@\n-from fastapi import FastAPI, Query\n-\n-app = FastAPI()\n-\n-\n-@app.get(\"/items/\")\n-async def read_items(\n-    q: str = Query(\n-        \"fixedquery\",\n-        alias=\"item-query\",\n-        title=\"Query string\",\n-        description=\"Query string for the items to search in the database that have a good match\",\n-        min_length=3,\n-        max_length=50,\n-        regex=\"^fixedquery$\",\n-    )\n-):\n-    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n-    if q:\n-        results.update({\"q\": q})\n-    return results\n\n@@ -1,21 +0,0 @@\n-from fastapi import FastAPI, Query\n-\n-app = FastAPI()\n-\n-\n-@app.get(\"/items/\")\n-async def read_items(\n-    q: str = Query(\n-        None,\n-        alias=\"item-query\",\n-        title=\"Query string\",\n-        description=\"Query string for the items to search in the database that have a good match\",\n-        min_length=3,\n-        max_length=50,\n-        regex=\"^fixedquery$\",\n-    )\n-):\n-    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n-    if q:\n-        results.update({\"q\": q})\n-    return results\n\n@@ -1,21 +0,0 @@\n-from fastapi import FastAPI, Query\n-\n-app = FastAPI()\n-\n-\n-@app.get(\"/items/\")\n-async def read_items(\n-    q: str = Query(\n-        ...,\n-        alias=\"item-query\",\n-        title=\"Query string\",\n-        description=\"Query string for the items to search in the database that have a good match\",\n-        min_length=3,\n-        max_length=50,\n-        regex=\"^fixedquery$\",\n-    )\n-):\n-    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n-    if q:\n-        results.update({\"q\": q})\n-    return results\n\n@@ -1,22 +0,0 @@\n-from fastapi import FastAPI, Query\n-\n-app = FastAPI()\n-\n-\n-@app.get(\"/items/\")\n-async def read_items(\n-    q: str = Query(\n-        None,\n-        alias=\"item-query\",\n-        title=\"Query string\",\n-        description=\"Query string for the items to search in the database that have a good match\",\n-        min_length=3,\n-        max_length=50,\n-        regex=\"^fixedquery$\",\n-        deprecated=True,\n-    )\n-):\n-    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n-    if q:\n-        results.update({\"q\": q})\n-    return results\n\n@@ -1,14 +0,0 @@\n-from fastapi import FastAPI, Path, Query\n-\n-app = FastAPI()\n-\n-\n-@app.get(\"/items/{item_id}\")\n-async def read_items(\n-    item_id: int = Path(..., title=\"The ID of the item to get\"),\n-    q: str = Query(None, alias=\"item-query\"),\n-):\n-    results = {\"item_id\": item_id}\n-    if q:\n-        results.update({\"q\": q})\n-    return results\n\n@@ -1,13 +0,0 @@\n-from fastapi import FastAPI, Path\n-\n-app = FastAPI()\n-\n-\n-@app.get(\"/items/{item_id}\")\n-async def read_items(\n-    q: str, item_id: int = Path(..., title=\"The ID of the item to get\")\n-):\n-    results = {\"item_id\": item_id}\n-    if q:\n-        results.update({\"q\": q})\n-    return results\n\n@@ -1,13 +0,0 @@\n-from fastapi import FastAPI, Path\n-\n-app = FastAPI()\n-\n-\n-@app.get(\"/items/{item_id}\")\n-async def read_items(\n-    *, item_id: int = Path(..., title=\"The ID of the item to get\"), q: str\n-):\n-    results = {\"item_id\": item_id}\n-    if q:\n-        results.update({\"q\": q})\n-    return results\n\n@@ -1,13 +0,0 @@\n-from fastapi import FastAPI, Path\n-\n-app = FastAPI()\n-\n-\n-@app.get(\"/items/{item_id}\")\n-async def read_items(\n-    *, item_id: int = Path(..., title=\"The ID of the item to get\", ge=1), q: str\n-):\n-    results = {\"item_id\": item_id}\n-    if q:\n-        results.update({\"q\": q})\n-    return results\n\n@@ -1,15 +0,0 @@\n-from fastapi import FastAPI, Path\n-\n-app = FastAPI()\n-\n-\n-@app.get(\"/items/{item_id}\")\n-async def read_items(\n-    *,\n-    item_id: int = Path(..., title=\"The ID of the item to get\", gt=0, le=1000),\n-    q: str,\n-):\n-    results = {\"item_id\": item_id}\n-    if q:\n-        results.update({\"q\": q})\n-    return results\n\n@@ -1,16 +0,0 @@\n-from fastapi import FastAPI, Path, Query\n-\n-app = FastAPI()\n-\n-\n-@app.get(\"/items/{item_id}\")\n-async def read_items(\n-    *,\n-    item_id: int = Path(..., title=\"The ID of the item to get\", ge=0, le=1000),\n-    q: str,\n-    size: float = Query(..., gt=0, lt=10.5)\n-):\n-    results = {\"item_id\": item_id}\n-    if q:\n-        results.update({\"q\": q})\n-    return results\n\n@@ -1,26 +0,0 @@\n-from fastapi import FastAPI, Path\n-from pydantic import BaseModel\n-\n-app = FastAPI()\n-\n-\n-class Item(BaseModel):\n-    name: str\n-    description: str = None\n-    price: float\n-    tax: float = None\n-\n-\n-@app.put(\"/items/{item_id}\")\n-async def update_item(\n-    *,\n-    item_id: int = Path(..., title=\"The ID of the item to get\", ge=0, le=1000),\n-    q: str,\n-    item: Item = None,\n-):\n-    results = {\"item_id\": item_id}\n-    if q:\n-        results.update({\"q\": q})\n-    if item:\n-        results.update({\"item\": item})\n-    return results\n\n@@ -1,22 +0,0 @@\n-from fastapi import FastAPI\n-from pydantic import BaseModel\n-\n-app = FastAPI()\n-\n-\n-class Item(BaseModel):\n-    name: str\n-    description: str = None\n-    price: float\n-    tax: float = None\n-\n-\n-class User(BaseModel):\n-    username: str\n-    full_name: str = None\n-\n-\n-@app.put(\"/items/{item_id}\")\n-async def update_item(*, item_id: int, item: Item, user: User):\n-    results = {\"item_id\": item_id, \"item\": item, \"user\": user}\n-    return results\n\n@@ -1,29 +0,0 @@\n-from fastapi import Body, FastAPI\n-from pydantic import BaseModel\n-\n-app = FastAPI()\n-\n-\n-class Item(BaseModel):\n-    name: str\n-    description: str = None\n-    price: float\n-    tax: float = None\n-\n-\n-class User(BaseModel):\n-    username: str\n-    full_name: str = None\n-\n-\n-@app.put(\"/items/{item_id}\")\n-async def update_item(\n-    *, item_id: int, item: Item, user: User, access_token: str = Body(...)\n-):\n-    results = {\n-        \"item_id\": item_id,\n-        \"item\": item,\n-        \"user\": user,\n-        \"access_token\": access_token,\n-    }\n-    return results\n\n@@ -1,36 +0,0 @@\n-from fastapi import Body, FastAPI\n-from pydantic import BaseModel\n-\n-app = FastAPI()\n-\n-\n-class Item(BaseModel):\n-    name: str\n-    description: str = None\n-    price: float\n-    tax: float = None\n-\n-\n-class User(BaseModel):\n-    username: str\n-    full_name: str = None\n-\n-\n-@app.put(\"/items/{item_id}\")\n-async def update_item(\n-    *,\n-    item_id: int,\n-    item: Item,\n-    user: User,\n-    access_token: str = Body(...),\n-    q: str = None,\n-):\n-    results = {\n-        \"item_id\": item_id,\n-        \"item\": item,\n-        \"user\": user,\n-        \"access_token\": access_token,\n-    }\n-    if q:\n-        results.update({\"q\": q})\n-    return results\n\n@@ -1,17 +0,0 @@\n-from fastapi import Body, FastAPI\n-from pydantic import BaseModel\n-\n-app = FastAPI()\n-\n-\n-class Item(BaseModel):\n-    name: str\n-    description: str = None\n-    price: float\n-    tax: float = None\n-\n-\n-@app.put(\"/items/{item_id}\")\n-async def update_item(*, item_id: int, item: Item = Body(..., embed=True)):\n-    results = {\"item_id\": item_id, \"item\": item}\n-    return results\n\n@@ -1,17 +0,0 @@\n-from fastapi import Body, FastAPI\n-from pydantic import BaseModel, Schema\n-\n-app = FastAPI()\n-\n-\n-class Item(BaseModel):\n-    name: str\n-    description: str = Schema(None, title=\"The description of the item\", max_length=300)\n-    price: float = Schema(..., gt=0, description=\"The price must be greater than zero\")\n-    tax: float = None\n-\n-\n-@app.put(\"/items/{item_id}\")\n-async def update_item(*, item_id: int, item: Item = Body(..., embed=True)):\n-    results = {\"item_id\": item_id, \"item\": item}\n-    return results\n\n@@ -1,29 +0,0 @@\n-from fastapi import Body, FastAPI\n-from pydantic import BaseModel\n-\n-app = FastAPI()\n-\n-\n-class Item(BaseModel):\n-    name: str\n-    description: str = None\n-    price: float\n-    tax: float = None\n-\n-\n-@app.put(\"/items/{item_id}\")\n-async def update_item(\n-    *,\n-    item_id: int,\n-    item: Item = Body(\n-        ...,\n-        example={\n-            \"name\": \"Foo\",\n-            \"description\": \"A very nice Item\",\n-            \"price\": 35.4,\n-            \"tax\": 3.2,\n-        },\n-    )\n-):\n-    results = {\"item_id\": item_id, \"item\": item}\n-    return results\n\n@@ -1,18 +0,0 @@\n-from fastapi import FastAPI\n-from pydantic import BaseModel\n-\n-app = FastAPI()\n-\n-\n-class Item(BaseModel):\n-    name: str\n-    description: str = None\n-    price: float\n-    tax: float = None\n-    tags: list = []\n-\n-\n-@app.put(\"/items/{item_id}\")\n-async def update_item(*, item_id: int, item: Item):\n-    results = {\"item_id\": item_id, \"item\": item}\n-    return results\n\n@@ -1,20 +0,0 @@\n-from typing import List\n-\n-from fastapi import FastAPI\n-from pydantic import BaseModel\n-\n-app = FastAPI()\n-\n-\n-class Item(BaseModel):\n-    name: str\n-    description: str = None\n-    price: float\n-    tax: float = None\n-    tags: List[str] = []\n-\n-\n-@app.put(\"/items/{item_id}\")\n-async def update_item(*, item_id: int, item: Item):\n-    results = {\"item_id\": item_id, \"item\": item}\n-    return results\n\n@@ -1,20 +0,0 @@\n-from typing import Set\n-\n-from fastapi import FastAPI\n-from pydantic import BaseModel\n-\n-app = FastAPI()\n-\n-\n-class Item(BaseModel):\n-    name: str\n-    description: str = None\n-    price: float\n-    tax: float = None\n-    tags: Set[str] = []\n-\n-\n-@app.put(\"/items/{item_id}\")\n-async def update_item(*, item_id: int, item: Item):\n-    results = {\"item_id\": item_id, \"item\": item}\n-    return results\n\n@@ -1,26 +0,0 @@\n-from typing import Set\n-\n-from fastapi import FastAPI\n-from pydantic import BaseModel\n-\n-app = FastAPI()\n-\n-\n-class Image(BaseModel):\n-    url: str\n-    name: str\n-\n-\n-class Item(BaseModel):\n-    name: str\n-    description: str = None\n-    price: float\n-    tax: float = None\n-    tags: Set[str] = []\n-    image: Image = None\n-\n-\n-@app.put(\"/items/{item_id}\")\n-async def update_item(*, item_id: int, item: Item):\n-    results = {\"item_id\": item_id, \"item\": item}\n-    return results\n\n@@ -1,27 +0,0 @@\n-from typing import Set\n-\n-from fastapi import FastAPI\n-from pydantic import BaseModel\n-from pydantic.types import UrlStr\n-\n-app = FastAPI()\n-\n-\n-class Image(BaseModel):\n-    url: UrlStr\n-    name: str\n-\n-\n-class Item(BaseModel):\n-    name: str\n-    description: str = None\n-    price: float\n-    tax: float = None\n-    tags: Set[str] = []\n-    image: Image = None\n-\n-\n-@app.put(\"/items/{item_id}\")\n-async def update_item(*, item_id: int, item: Item):\n-    results = {\"item_id\": item_id, \"item\": item}\n-    return results\n\n@@ -1,27 +0,0 @@\n-from typing import List, Set\n-\n-from fastapi import FastAPI\n-from pydantic import BaseModel\n-from pydantic.types import UrlStr\n-\n-app = FastAPI()\n-\n-\n-class Image(BaseModel):\n-    url: UrlStr\n-    name: str\n-\n-\n-class Item(BaseModel):\n-    name: str\n-    description: str = None\n-    price: float\n-    tax: float = None\n-    tags: Set[str] = []\n-    image: List[Image] = None\n-\n-\n-@app.put(\"/items/{item_id}\")\n-async def update_item(*, item_id: int, item: Item):\n-    results = {\"item_id\": item_id, \"item\": item}\n-    return results\n\n@@ -1,33 +0,0 @@\n-from typing import List, Set\n-\n-from fastapi import FastAPI\n-from pydantic import BaseModel\n-from pydantic.types import UrlStr\n-\n-app = FastAPI()\n-\n-\n-class Image(BaseModel):\n-    url: UrlStr\n-    name: str\n-\n-\n-class Item(BaseModel):\n-    name: str\n-    description: str = None\n-    price: float\n-    tax: float = None\n-    tags: Set[str] = []\n-    image: List[Image] = None\n-\n-\n-class Offer(BaseModel):\n-    name: str\n-    description: str = None\n-    price: float\n-    items: List[Item]\n-\n-\n-@app.post(\"/offers/\")\n-async def create_offer(*, offer: Offer):\n-    return offer\n\n@@ -1,17 +0,0 @@\n-from typing import List\n-\n-from fastapi import FastAPI\n-from pydantic import BaseModel\n-from pydantic.types import UrlStr\n-\n-app = FastAPI()\n-\n-\n-class Image(BaseModel):\n-    url: UrlStr\n-    name: str\n-\n-\n-@app.post(\"/images/multiple/\")\n-async def create_multiple_images(*, images: List[Image]):\n-    return images\n\n@@ -1,8 +0,0 @@\n-from fastapi import Cookie, FastAPI\n-\n-app = FastAPI()\n-\n-\n-@app.get(\"/items/\")\n-async def read_items(*, ads_id: str = Cookie(None)):\n-    return {\"ads_id\": ads_id}\n\n@@ -1,8 +0,0 @@\n-from fastapi import FastAPI, Header\n-\n-app = FastAPI()\n-\n-\n-@app.get(\"/items/\")\n-async def read_items(*, accept_encoding: str = Header(None)):\n-    return {\"Accept-Encoding\": accept_encoding}\n\n@@ -1,8 +0,0 @@\n-from fastapi import FastAPI, Header\n-\n-app = FastAPI()\n-\n-\n-@app.get(\"/items/\")\n-async def read_items(*, strange_header: str = Header(None, convert_underscores=False)):\n-    return {\"strange_header\": strange_header}\n\n@@ -1,19 +0,0 @@\n-from typing import Set\n-\n-from fastapi import FastAPI\n-from pydantic import BaseModel\n-\n-app = FastAPI()\n-\n-\n-class Item(BaseModel):\n-    name: str\n-    description: str = None\n-    price: float\n-    tax: float = None\n-    tags: Set[str] = []\n-\n-\n-@app.post(\"/items/\", response_model=Item)\n-async def create_item(*, item: Item):\n-    return item\n\n@@ -1,18 +0,0 @@\n-from fastapi import FastAPI\n-from pydantic import BaseModel\n-from pydantic.types import EmailStr\n-\n-app = FastAPI()\n-\n-\n-class UserIn(BaseModel):\n-    username: str\n-    password: str\n-    email: EmailStr\n-    full_name: str = None\n-\n-\n-# Don't do this in production!\n-@app.post(\"/user/\", response_model=UserIn)\n-async def create_user(*, user: UserIn):\n-    return user\n\n@@ -1,23 +0,0 @@\n-from fastapi import FastAPI\n-from pydantic import BaseModel\n-from pydantic.types import EmailStr\n-\n-app = FastAPI()\n-\n-\n-class UserIn(BaseModel):\n-    username: str\n-    password: str\n-    email: EmailStr\n-    full_name: str = None\n-\n-\n-class UserOut(BaseModel):\n-    username: str\n-    email: EmailStr\n-    full_name: str = None\n-\n-\n-@app.post(\"/user/\", response_model=UserOut)\n-async def create_user(*, user: UserIn):\n-    return user\n\n@@ -1,42 +0,0 @@\n-from fastapi import FastAPI\n-from pydantic import BaseModel\n-from pydantic.types import EmailStr\n-\n-app = FastAPI()\n-\n-\n-class UserIn(BaseModel):\n-    username: str\n-    password: str\n-    email: EmailStr\n-    full_name: str = None\n-\n-\n-class UserOut(BaseModel):\n-    username: str\n-    email: EmailStr\n-    full_name: str = None\n-\n-\n-class UserInDB(BaseModel):\n-    username: str\n-    hashed_password: str\n-    email: EmailStr\n-    full_name: str = None\n-\n-\n-def fake_password_hasher(raw_password: str):\n-    return \"supersecret\" + raw_password\n-\n-\n-def fake_save_user(user_in: UserIn):\n-    hashed_password = fake_password_hasher(user_in.password)\n-    user_in_db = UserInDB(**user_in.dict(), hashed_password=hashed_password)\n-    print(\"User saved! ..not really\")\n-    return user_in_db\n-\n-\n-@app.post(\"/user/\", response_model=UserOut)\n-async def create_user(*, user_in: UserIn):\n-    user_saved = fake_save_user(user_in)\n-    return user_saved\n\n@@ -1,40 +0,0 @@\n-from fastapi import FastAPI\n-from pydantic import BaseModel\n-from pydantic.types import EmailStr\n-\n-app = FastAPI()\n-\n-\n-class UserBase(BaseModel):\n-    username: str\n-    email: EmailStr\n-    full_name: str = None\n-\n-\n-class UserIn(UserBase):\n-    password: str\n-\n-\n-class UserOut(UserBase):\n-    pass\n-\n-\n-class UserInDB(UserBase):\n-    hashed_password: str\n-\n-\n-def fake_password_hasher(raw_password: str):\n-    return \"supersecret\" + raw_password\n-\n-\n-def fake_save_user(user_in: UserIn):\n-    hashed_password = fake_password_hasher(user_in.password)\n-    user_in_db = UserInDB(**user_in.dict(), hashed_password=hashed_password)\n-    print(\"User saved! ..not really\")\n-    return user_in_db\n-\n-\n-@app.post(\"/user/\", response_model=UserOut)\n-async def create_user(*, user_in: UserIn):\n-    user_saved = fake_save_user(user_in)\n-    return user_saved\n\n@@ -1,8 +0,0 @@\n-from fastapi import FastAPI, Form\n-\n-app = FastAPI()\n-\n-\n-@app.post(\"/login/\")\n-async def login(*, username: str = Form(...), password: str = Form(...)):\n-    return {\"username\": username}\n\n@@ -1,8 +0,0 @@\n-from fastapi import FastAPI, File\n-\n-app = FastAPI()\n-\n-\n-@app.post(\"/files/\")\n-async def create_file(*, file: bytes = File(...)):\n-    return {\"file_size\": len(file)}\n\n@@ -1,8 +0,0 @@\n-from fastapi import FastAPI, File, Form\n-\n-app = FastAPI()\n-\n-\n-@app.post(\"/files/\")\n-async def create_file(*, file: bytes = File(...), token: str = Form(...)):\n-    return {\"file_size\": len(file), \"token\": token}\n\n@@ -1,20 +0,0 @@\n-from typing import Set\n-\n-from fastapi import FastAPI\n-from pydantic import BaseModel\n-from starlette.status import HTTP_201_CREATED\n-\n-app = FastAPI()\n-\n-\n-class Item(BaseModel):\n-    name: str\n-    description: str = None\n-    price: float\n-    tax: float = None\n-    tags: Set[str] = []\n-\n-\n-@app.post(\"/items/\", response_model=Item, status_code=HTTP_201_CREATED)\n-async def create_item(*, item: Item):\n-    return item\n\n@@ -1,19 +0,0 @@\n-from typing import Set\n-\n-from fastapi import FastAPI\n-from pydantic import BaseModel\n-\n-app = FastAPI()\n-\n-\n-class Item(BaseModel):\n-    name: str\n-    description: str = None\n-    price: float\n-    tax: float = None\n-    tags: Set[str] = []\n-\n-\n-@app.post(\"/items/\", response_model=Item, tags=[\"items\"])\n-async def create_item(*, item: Item):\n-    return item\n\n@@ -1,24 +0,0 @@\n-from typing import Set\n-\n-from fastapi import FastAPI\n-from pydantic import BaseModel\n-\n-app = FastAPI()\n-\n-\n-class Item(BaseModel):\n-    name: str\n-    description: str = None\n-    price: float\n-    tax: float = None\n-    tags: Set[str] = []\n-\n-\n-@app.post(\n-    \"/items/\",\n-    response_model=Item,\n-    summary=\"Create an item\",\n-    description=\"Create an item with all the information, name, description, price, tax and a set of unique tags\",\n-)\n-async def create_item(*, item: Item):\n-    return item\n\n@@ -1,28 +0,0 @@\n-from typing import Set\n-\n-from fastapi import FastAPI\n-from pydantic import BaseModel\n-\n-app = FastAPI()\n-\n-\n-class Item(BaseModel):\n-    name: str\n-    description: str = None\n-    price: float\n-    tax: float = None\n-    tags: Set[str] = []\n-\n-\n-@app.post(\"/items/\", response_model=Item, summary=\"Create an item\")\n-async def create_item(*, item: Item):\n-    \"\"\"\n-    Create an item with all the information:\n-    \n-    * name: each item must have a name\n-    * description: a long description\n-    * price: required\n-    * tax: if the item doesn't have tax, you can omit this\n-    * tags: a set of unique tag strings for this item\n-    \"\"\"\n-    return item\n\n@@ -1,33 +0,0 @@\n-from typing import Set\n-\n-from fastapi import FastAPI\n-from pydantic import BaseModel\n-\n-app = FastAPI()\n-\n-\n-class Item(BaseModel):\n-    name: str\n-    description: str = None\n-    price: float\n-    tax: float = None\n-    tags: Set[str] = []\n-\n-\n-@app.post(\n-    \"/items/\",\n-    response_model=Item,\n-    summary=\"Create an item\",\n-    response_description=\"The created item\",\n-)\n-async def create_item(*, item: Item):\n-    \"\"\"\n-    Create an item with all the information:\n-    \n-    * name: each item must have a name\n-    * description: a long description\n-    * price: required\n-    * tax: if the item doesn't have tax, you can omit this\n-    * tags: a set of unique tag strings for this item\n-    \"\"\"\n-    return item\n\n@@ -1,8 +0,0 @@\n-from fastapi import FastAPI\n-\n-app = FastAPI()\n-\n-\n-@app.get(\"/items/\", deprecated=True)\n-async def read_items():\n-    return [{\"item_id\": \"Foo\"}]\n\n@@ -1,8 +0,0 @@\n-from fastapi import FastAPI\n-\n-app = FastAPI()\n-\n-\n-@app.get(\"/items/\", operation_id=\"some_specific_id_you_define\")\n-async def read_items():\n-    return [{\"item_id\": \"Foo\"}]\n\n@@ -1,8 +0,0 @@\n-from fastapi import FastAPI\n-\n-app = FastAPI()\n-\n-\n-@app.get(\"/items/\", include_in_schema=False)\n-async def read_items():\n-    return [{\"item_id\": \"Foo\"}]\n\n@@ -1,9 +0,0 @@\n-from fastapi import FastAPI\n-from starlette.responses import UJSONResponse\n-\n-app = FastAPI()\n-\n-\n-@app.get(\"/items/\", content_type=UJSONResponse)\n-async def read_items():\n-    return [{\"item_id\": \"Foo\"}]\n\n@@ -1,18 +0,0 @@\n-from fastapi import FastAPI\n-from starlette.responses import HTMLResponse\n-\n-app = FastAPI()\n-\n-\n-@app.get(\"/items/\", content_type=HTMLResponse)\n-async def read_items():\n-    return \"\"\"\n-    <html>\n-        <head>\n-            <title>Some HTML in here</title>\n-        </head>\n-        <body>\n-            <h1>Look ma! HTML!</h1>\n-        </body>\n-    </html>\n-    \"\"\"\n\n@@ -1,27 +0,0 @@\n-from fastapi import Depends, FastAPI\n-from pydantic import BaseModel\n-\n-app = FastAPI()\n-\n-\n-fake_items_db = [{\"item_name\": \"Foo\"}, {\"item_name\": \"Bar\"}, {\"item_name\": \"Baz\"}]\n-\n-\n-class CommonQueryParams(BaseModel):\n-    q: str = None\n-    skip: int = None\n-    limit: int = None\n-\n-\n-async def common_parameters(q: str = None, skip: int = 0, limit: int = 100):\n-    return CommonQueryParams(q=q, skip=skip, limit=limit)\n-\n-\n-@app.get(\"/items/\")\n-async def read_items(commons: CommonQueryParams = Depends(common_parameters)):\n-    response = {}\n-    if commons.q:\n-        response.update({\"q\": commons.q})\n-    items = fake_items_db[commons.skip : commons.limit]\n-    response.update({\"items\": items})\n-    return response\n\n@@ -1,34 +0,0 @@\n-from typing import List\n-\n-from fastapi import Cookie, Depends, FastAPI\n-from pydantic import BaseModel\n-\n-app = FastAPI()\n-\n-\n-class InterestsTracker(BaseModel):\n-    track_code: str\n-    interests: List[str]\n-\n-\n-fake_tracked_users_db = {\n-    \"Foo\": {\"track_code\": \"Foo\", \"interests\": [\"sports\", \"movies\"]},\n-    \"Bar\": {\"track_code\": \"Bar\", \"interests\": [\"food\", \"shows\"]},\n-    \"Baz\": {\"track_code\": \"Baz\", \"interests\": [\"gaming\", \"virtual reality\"]},\n-}\n-\n-\n-async def get_tracked_interests(track_code: str = Cookie(None)):\n-    if track_code in fake_tracked_users_db:\n-        track_dict = fake_tracked_users_db[track_code]\n-        track = InterestsTracker(**track_dict)\n-        return track\n-    return None\n-\n-\n-@app.get(\"/interests/\")\n-async def read_interests(\n-    tracked_interests: InterestsTracker = Depends(get_tracked_interests)\n-):\n-    response = {\"interests\": tracked_interests.interests}\n-    return response\n\n@@ -1,49 +0,0 @@\n-from random import choice\n-from typing import List\n-\n-from fastapi import Cookie, Depends, FastAPI\n-from pydantic import BaseModel\n-\n-app = FastAPI()\n-\n-\n-class InterestsTracker(BaseModel):\n-    track_code: str\n-    interests: List[str]\n-\n-\n-fake_tracked_users_db = {\n-    \"Foo\": {\"track_code\": \"Foo\", \"interests\": [\"sports\", \"movies\"]},\n-    \"Bar\": {\"track_code\": \"Bar\", \"interests\": [\"food\", \"shows\"]},\n-    \"Baz\": {\"track_code\": \"Baz\", \"interests\": [\"gaming\", \"virtual reality\"]},\n-}\n-\n-\n-async def get_tracked_interests(track_code: str = Cookie(None)):\n-    if track_code in fake_tracked_users_db:\n-        track_dict = fake_tracked_users_db[track_code]\n-        track = InterestsTracker(**track_dict)\n-        return track\n-    return None\n-\n-\n-class ComplexTracker:\n-    def __init__(self, tracker: InterestsTracker = Depends(get_tracked_interests)):\n-        self.tracker = tracker\n-\n-    def random_interest(self):\n-        \"\"\"\n-        Get a random interest from the tracked ones for the current user.\n-        If the user doesn't have tracked interests, return a random one from the ones available.\n-        \"\"\"\n-        if self.tracker.interests:\n-            return choice(self.tracker.interests)\n-        return choice(\n-            [\"sports\", \"movies\", \"food\", \"shows\", \"gaming\", \"virtual reality\"]\n-        )\n-\n-\n-@app.get(\"/suggested-category\")\n-async def read_suggested_category(tracker: ComplexTracker = Depends(None)):\n-    response = {\"category\": tracker.random_interest()}\n-    return response\n\n@@ -1,52 +0,0 @@\n-from fastapi import FastAPI\n-\n-from sqlalchemy import Boolean, Column, Integer, String, create_engine\n-from sqlalchemy.ext.declarative import declarative_base, declared_attr\n-from sqlalchemy.orm import scoped_session, sessionmaker\n-\n-# SQLAlchemy specific code, as with any other app\n-\n-\n-SQLALCHEMY_DATABASE_URI = \"postgresql://user:password@postgresserver/db\"\n-\n-# By creating this a CustomBase class and inheriting from it, your models will have\n-# automatic __tablename__ attributes. So you don't have to declare them.\n-# So, your models will behave very similarly to, for example, Flask-SQLAlchemy\n-\n-\n-class CustomBase:\n-    # Generate __tablename__ automatically\n-    @declared_attr\n-    def __tablename__(cls):\n-        return cls.__name__.lower()\n-\n-\n-Base = declarative_base(cls=CustomBase)\n-\n-\n-class User(Base):\n-    # Own properties\n-    id = Column(Integer, primary_key=True, index=True)\n-    email = Column(String, unique=True, index=True)\n-    hashed_password = Column(String)\n-    is_active = Column(Boolean(), default=True)\n-\n-\n-engine = create_engine(SQLALCHEMY_DATABASE_URI, convert_unicode=True)\n-db_session = scoped_session(\n-    sessionmaker(autocommit=False, autoflush=False, bind=engine)\n-)\n-\n-\n-def get_user(username, db_session):\n-    return db_session.query(User).filter(User.id == username).first()\n-\n-\n-# FastAPI specific code\n-app = FastAPI()\n-\n-\n-@app.get(\"/users/{username}\")\n-def read_user(username: str):\n-    user = get_user(username, db_session)\n-    return user\n\n@@ -1,57 +0,0 @@\n-from typing import Optional\n-\n-from fastapi import FastAPI\n-from pydantic import BaseModel\n-\n-from app.models.config import USERPROFILE_DOC_TYPE\n-from couchbase import LOCKMODE_WAIT\n-from couchbase.bucket import Bucket\n-from couchbase.cluster import Cluster, PasswordAuthenticator\n-\n-\n-def get_bucket():\n-    cluster = Cluster(\"couchbase://couchbasehost:8091\")\n-    authenticator = PasswordAuthenticator(\"username\", \"password\")\n-    cluster.authenticate(authenticator)\n-    bucket: Bucket = cluster.open_bucket(\"bucket_name\", lockmode=LOCKMODE_WAIT)\n-    return bucket\n-\n-\n-class User(BaseModel):\n-    username: str\n-    email: Optional[str] = None\n-    full_name: Optional[str] = None\n-    disabled: Optional[bool] = None\n-\n-\n-class UserInDB(User):\n-    type: str = USERPROFILE_DOC_TYPE\n-    hashed_password: str\n-\n-    class Meta:\n-        key: Optional[str] = None\n-\n-\n-def get_user_doc_id(username):\n-    return f\"userprofile::{username}\"\n-\n-\n-def get_user(bucket: Bucket, username: str):\n-    doc_id = get_user_doc_id(username)\n-    result = bucket.get(doc_id, quiet=True)\n-    if not result.value:\n-        return None\n-    user = UserInDB(**result.value)\n-    user.Meta.key = result.key\n-    return user\n-\n-\n-# FastAPI specific code\n-app = FastAPI()\n-\n-\n-@app.get(\"/users/{username}\")\n-def read_user(username: str):\n-    bucket = get_bucket()\n-    user = get_user(bucket=bucket, username=username)\n-    return user\n\n\n\n\n\n\n@@ -1,7 +1,7 @@\n from fastapi import FastAPI\n \n-from .tutorial74 import router as users_router\n-from .tutorial75 import router as items_router\n+from .tutorial01 import router as users_router\n+from .tutorial02 import router as items_router\n \n app = FastAPI()\n \n\n\n\n\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
