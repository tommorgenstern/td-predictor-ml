{"custom_id": "flask#171aabc87dd8bff0367d0555c8be6105b00c22ce", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 13 | Lines Deleted: 14 | Files Changed: 6 | Hunks: 9 | Methods Changed: 5 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 27 | Churn Cumulative: 1071 | Contributors (this commit): 8 | Commits (past 90d): 41 | Contributors (cumulative): 13 | DMM Complexity: None\n\nDIFF:\n@@ -868,7 +868,7 @@ class Flask(_PackageBoundObject):\n \n         Do not use ``run()`` in a production setting. It is not intended to\n         meet security and performance requirements for a production server.\n-        Instead, see :ref:`deployment` for WSGI server recommendations.\n+        Instead, see :doc:`/deploying/index` for WSGI server recommendations.\n \n         If the :attr:`debug` flag is set the server will automatically reload\n         for code changes and show a debugger in case an exception happened.\n@@ -980,7 +980,7 @@ class Flask(_PackageBoundObject):\n \n     def test_client(self, use_cookies=True, **kwargs):\n         \"\"\"Creates a test client for this application.  For information\n-        about unit testing head over to :ref:`testing`.\n+        about unit testing head over to :doc:`/testing`.\n \n         Note that if you are testing for assertions or exceptions in your\n         application code, you must set ``app.testing = True`` in order for the\n\n@@ -90,7 +90,7 @@ class Blueprint(_PackageBoundObject):\n     that is called with :class:`~flask.blueprints.BlueprintSetupState`\n     when the blueprint is registered on an application.\n \n-    See :ref:`blueprints` for more information.\n+    See :doc:`/blueprints` for more information.\n \n     .. versionchanged:: 1.1.0\n         Blueprints have a ``cli`` group to register nested CLI commands.\n\n@@ -444,9 +444,7 @@ class FlaskGroup(AppGroup):\n     loading more commands from the configured Flask app.  Normally a\n     developer does not have to interface with this class but there are\n     some very advanced use cases for which it makes sense to create an\n-    instance of this.\n-\n-    For information as of why this is useful see :ref:`custom-scripts`.\n+    instance of this. see :ref:`custom-scripts`.\n \n     :param add_default_commands: if this is True then the default run and\n         shell commands will be added.\n\n@@ -221,7 +221,7 @@ def url_for(endpoint, **values):\n \n         url_for('.index')\n \n-    For more information, head over to the :ref:`Quickstart <url-building>`.\n+    See :ref:`url-building`.\n \n     Configuration values ``APPLICATION_ROOT`` and ``SERVER_NAME`` are only used when\n     generating URLs outside of a request context.\n@@ -278,9 +278,9 @@ def url_for(endpoint, **values):\n     :param _scheme: a string specifying the desired URL scheme. The `_external`\n       parameter must be set to ``True`` or a :exc:`ValueError` is raised. The default\n       behavior uses the same scheme as the current request, or\n-      ``PREFERRED_URL_SCHEME`` from the :ref:`app configuration <config>` if no\n-      request context is available. As of Werkzeug 0.10, this also can be set\n-      to an empty string to build protocol-relative URLs.\n+      :data:`PREFERRED_URL_SCHEME` if no request context is available.\n+      This also can be set to an empty string to build protocol-relative\n+      URLs.\n     :param _anchor: if provided this is added as anchor to the URL.\n     :param _method: if provided this explicitly specifies an HTTP method.\n     \"\"\"\n@@ -428,7 +428,7 @@ def get_flashed_messages(with_categories=False, category_filter=()):\n     * `category_filter` filters the messages down to only those matching the\n       provided categories.\n \n-    See :ref:`message-flashing-pattern` for examples.\n+    See :doc:`/patterns/flashing` for examples.\n \n     .. versionchanged:: 0.3\n        `with_categories` parameter added.\n\n@@ -331,8 +331,9 @@ def jsonify(*args, **kwargs):\n \n \n     .. versionchanged:: 0.11\n-       Added support for serializing top-level arrays. This introduces a\n-       security risk in ancient browsers. See :ref:`json-security` for details.\n+        Added support for serializing top-level arrays. This introduces\n+        a security risk in ancient browsers. See :ref:`security-json`\n+        for details.\n \n     This function's response will be pretty printed if the\n     ``JSONIFY_PRETTYPRINT_REGULAR`` config parameter is set to True or the\n\n@@ -94,7 +94,7 @@ class FlaskClient(Client):\n        set after instantiation of the `app.test_client()` object in\n        `client.environ_base`.\n \n-    Basic usage is outlined in the :ref:`testing` chapter.\n+    Basic usage is outlined in the :doc:`/testing` chapter.\n     \"\"\"\n \n     preserve_context = False\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#024f0d384cf5bb65c76ac59f8ddce464b2dc2ca1", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 5 | Lines Deleted: 81 | Files Changed: 4 | Hunks: 11 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 86 | Churn Cumulative: 1137 | Contributors (this commit): 30 | Commits (past 90d): 16 | Contributors (cumulative): 37 | DMM Complexity: None\n\nDIFF:\n@@ -1,21 +1,3 @@\n-from setuptools import find_packages\n from setuptools import setup\n \n-with open(\"README.rst\", encoding=\"utf8\") as f:\n-    readme = f.read()\n-\n-setup(\n-    name=\"js_example\",\n-    version=\"1.0.0\",\n-    url=\"https://flask.palletsprojects.com/patterns/jquery/\",\n-    license=\"BSD\",\n-    maintainer=\"Pallets team\",\n-    maintainer_email=\"contact@palletsprojects.com\",\n-    description=\"Demonstrates making Ajax requests to Flask.\",\n-    long_description=readme,\n-    packages=find_packages(),\n-    include_package_data=True,\n-    zip_safe=False,\n-    install_requires=[\"flask\"],\n-    extras_require={\"test\": [\"pytest\", \"coverage\", \"blinker\"]},\n-)\n+setup()\n\n@@ -1,21 +1,3 @@\n-from setuptools import find_packages\n from setuptools import setup\n \n-with open(\"README.rst\", encoding=\"utf8\") as f:\n-    readme = f.read()\n-\n-setup(\n-    name=\"flaskr\",\n-    version=\"1.0.0\",\n-    url=\"https://flask.palletsprojects.com/tutorial/\",\n-    license=\"BSD\",\n-    maintainer=\"Pallets team\",\n-    maintainer_email=\"contact@palletsprojects.com\",\n-    description=\"The basic blog app built in the Flask tutorial.\",\n-    long_description=readme,\n-    packages=find_packages(),\n-    include_package_data=True,\n-    zip_safe=False,\n-    install_requires=[\"flask\"],\n-    extras_require={\"test\": [\"pytest\", \"coverage\"]},\n-)\n+setup()\n\n@@ -1,47 +1,14 @@\n import re\n \n-from setuptools import find_packages\n from setuptools import setup\n \n-with open(\"README.rst\", encoding=\"utf8\") as f:\n-    readme = f.read()\n-\n with open(\"src/flask/__init__.py\", encoding=\"utf8\") as f:\n     version = re.search(r'__version__ = \"(.*?)\"', f.read()).group(1)\n \n+# Metadata goes in setup.cfg. These are here for GitHub's dependency graph.\n setup(\n     name=\"Flask\",\n     version=version,\n-    url=\"https://palletsprojects.com/p/flask/\",\n-    project_urls={\n-        \"Documentation\": \"https://flask.palletsprojects.com/\",\n-        \"Code\": \"https://github.com/pallets/flask\",\n-        \"Issue tracker\": \"https://github.com/pallets/flask/issues\",\n-    },\n-    license=\"BSD-3-Clause\",\n-    author=\"Armin Ronacher\",\n-    author_email=\"armin.ronacher@active-4.com\",\n-    maintainer=\"Pallets\",\n-    maintainer_email=\"contact@palletsprojects.com\",\n-    description=\"A simple framework for building complex web applications.\",\n-    long_description=readme,\n-    classifiers=[\n-        \"Development Status :: 5 - Production/Stable\",\n-        \"Environment :: Web Environment\",\n-        \"Framework :: Flask\",\n-        \"Intended Audience :: Developers\",\n-        \"License :: OSI Approved :: BSD License\",\n-        \"Operating System :: OS Independent\",\n-        \"Programming Language :: Python\",\n-        \"Topic :: Internet :: WWW/HTTP :: Dynamic Content\",\n-        \"Topic :: Internet :: WWW/HTTP :: WSGI :: Application\",\n-        \"Topic :: Software Development :: Libraries :: Application Frameworks\",\n-        \"Topic :: Software Development :: Libraries :: Python Modules\",\n-    ],\n-    packages=find_packages(\"src\"),\n-    package_dir={\"\": \"src\"},\n-    include_package_data=True,\n-    python_requires=\">=3.6\",\n     install_requires=[\n         \"Werkzeug>=0.15\",\n         \"Jinja2>=2.10.1\",\n@@ -59,12 +26,5 @@ setup(\n             \"sphinxcontrib-log-cabinet\",\n             \"sphinx-issues\",\n         ],\n-        \"docs\": [\n-            \"sphinx\",\n-            \"pallets-sphinx-themes\",\n-            \"sphinxcontrib-log-cabinet\",\n-            \"sphinx-issues\",\n-        ],\n     },\n-    entry_points={\"console_scripts\": [\"flask = flask.cli:main\"]},\n )\n\n@@ -1,5 +1,5 @@\n-from jinja2 import escape\n-from jinja2 import Markup\n+from markupsafe import escape\n+from markupsafe import Markup\n from werkzeug.exceptions import abort\n from werkzeug.utils import redirect\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#c43edfc7c08b8dbe883761bec14fa75ee7db1bf3", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 19 | Lines Deleted: 89 | Files Changed: 2 | Hunks: 20 | Methods Changed: 7 | Complexity Δ (Sum/Max): -14/0 | Churn Δ: 108 | Churn Cumulative: 3207 | Contributors (this commit): 36 | Commits (past 90d): 12 | Contributors (cumulative): 37 | DMM Complexity: 0.6285714285714286\n\nDIFF:\n@@ -1,10 +1,9 @@\n-import codecs\n import io\n+import json as _json\n import uuid\n from datetime import date\n from datetime import datetime\n \n-from itsdangerous import json as _json\n from jinja2 import Markup\n from werkzeug.http import http_date\n \n@@ -17,10 +16,6 @@ except ImportError:\n     # Python < 3.7\n     dataclasses = None\n \n-# Figure out if simplejson escapes slashes.  This behavior was changed\n-# from one version to another without reason.\n-_slash_escape = \"\\\\/\" not in _json.dumps(\"/\")\n-\n \n __all__ = [\n     \"dump\",\n@@ -93,7 +88,7 @@ class JSONEncoder(_json.JSONEncoder):\n \n class JSONDecoder(_json.JSONDecoder):\n     \"\"\"The default JSON decoder.  This one does not change the behavior from\n-    the default simplejson decoder.  Consult the :mod:`json` documentation\n+    the default decoder.  Consult the :mod:`json` documentation\n     for more information.  This decoder is not only used for the load\n     functions of this module but also :attr:`~flask.Request`.\n     \"\"\"\n@@ -133,49 +128,6 @@ def _load_arg_defaults(kwargs, app=None):\n         kwargs.setdefault(\"cls\", JSONDecoder)\n \n \n-def detect_encoding(data):\n-    \"\"\"Detect which UTF codec was used to encode the given bytes.\n-\n-    The latest JSON standard (:rfc:`8259`) suggests that only UTF-8 is\n-    accepted. Older documents allowed 8, 16, or 32. 16 and 32 can be big\n-    or little endian. Some editors or libraries may prepend a BOM.\n-\n-    :param data: Bytes in unknown UTF encoding.\n-    :return: UTF encoding name\n-    \"\"\"\n-    head = data[:4]\n-\n-    if head[:3] == codecs.BOM_UTF8:\n-        return \"utf-8-sig\"\n-\n-    if b\"\\x00\" not in head:\n-        return \"utf-8\"\n-\n-    if head in (codecs.BOM_UTF32_BE, codecs.BOM_UTF32_LE):\n-        return \"utf-32\"\n-\n-    if head[:2] in (codecs.BOM_UTF16_BE, codecs.BOM_UTF16_LE):\n-        return \"utf-16\"\n-\n-    if len(head) == 4:\n-        if head[:3] == b\"\\x00\\x00\\x00\":\n-            return \"utf-32-be\"\n-\n-        if head[::2] == b\"\\x00\\x00\":\n-            return \"utf-16-be\"\n-\n-        if head[1:] == b\"\\x00\\x00\\x00\":\n-            return \"utf-32-le\"\n-\n-        if head[1::2] == b\"\\x00\\x00\":\n-            return \"utf-16-le\"\n-\n-    if len(head) == 2:\n-        return \"utf-16-be\" if head.startswith(b\"\\x00\") else \"utf-16-le\"\n-\n-    return \"utf-8\"\n-\n-\n def dumps(obj, app=None, **kwargs):\n     \"\"\"Serialize ``obj`` to a JSON-formatted string. If there is an\n     app context pushed, use the current app's configured encoder\n@@ -183,8 +135,7 @@ def dumps(obj, app=None, **kwargs):\n     :class:`JSONEncoder`.\n \n     Takes the same arguments as the built-in :func:`json.dumps`, and\n-    does some extra configuration based on the application. If the\n-    simplejson package is installed, it is preferred.\n+    does some extra configuration based on the application.\n \n     :param obj: Object to serialize to JSON.\n     :param app: App instance to use to configure the JSON encoder.\n@@ -200,8 +151,10 @@ def dumps(obj, app=None, **kwargs):\n     _dump_arg_defaults(kwargs, app=app)\n     encoding = kwargs.pop(\"encoding\", None)\n     rv = _json.dumps(obj, **kwargs)\n+\n     if encoding is not None and isinstance(rv, str):\n         rv = rv.encode(encoding)\n+\n     return rv\n \n \n@@ -209,8 +162,10 @@ def dump(obj, fp, app=None, **kwargs):\n     \"\"\"Like :func:`dumps` but writes into a file object.\"\"\"\n     _dump_arg_defaults(kwargs, app=app)\n     encoding = kwargs.pop(\"encoding\", None)\n+\n     if encoding is not None:\n         fp = _wrap_writer_for_text(fp, encoding)\n+\n     _json.dump(obj, fp, **kwargs)\n \n \n@@ -221,8 +176,7 @@ def loads(s, app=None, **kwargs):\n     default :class:`JSONDecoder`.\n \n     Takes the same arguments as the built-in :func:`json.loads`, and\n-    does some extra configuration based on the application. If the\n-    simplejson package is installed, it is preferred.\n+    does some extra configuration based on the application.\n \n     :param s: JSON string to deserialize.\n     :param app: App instance to use to configure the JSON decoder.\n@@ -236,21 +190,27 @@ def loads(s, app=None, **kwargs):\n         context for configuration.\n     \"\"\"\n     _load_arg_defaults(kwargs, app=app)\n-    if isinstance(s, bytes):\n     encoding = kwargs.pop(\"encoding\", None)\n-        if encoding is None:\n-            encoding = detect_encoding(s)\n+\n+    if encoding is not None and isinstance(s, bytes):\n         s = s.decode(encoding)\n+\n     return _json.loads(s, **kwargs)\n \n \n def load(fp, app=None, **kwargs):\n     \"\"\"Like :func:`loads` but reads from a file object.\"\"\"\n     _load_arg_defaults(kwargs, app=app)\n-    fp = _wrap_reader_for_text(fp, kwargs.pop(\"encoding\", None) or \"utf-8\")\n+    encoding = kwargs.pop(\"encoding\", None)\n+    fp = _wrap_reader_for_text(fp, encoding or \"utf-8\")\n     return _json.load(fp, **kwargs)\n \n \n+_htmlsafe_map = str.maketrans(\n+    {\"<\": \"\\\\u003c\", \">\": \"\\\\u003e\", \"&\": \"\\\\u0026\", \"'\": \"\\\\u0027\"}\n+)\n+\n+\n def htmlsafe_dumps(obj, **kwargs):\n     \"\"\"Works exactly like :func:`dumps` but is safe for use in ``<script>``\n     tags.  It accepts the same arguments and returns a JSON string.  Note that\n@@ -276,16 +236,7 @@ def htmlsafe_dumps(obj, **kwargs):\n        quoted.  Always single quote attributes if you use the ``|tojson``\n        filter.  Alternatively use ``|tojson|forceescape``.\n     \"\"\"\n-    rv = (\n-        dumps(obj, **kwargs)\n-        .replace(\"<\", \"\\\\u003c\")\n-        .replace(\">\", \"\\\\u003e\")\n-        .replace(\"&\", \"\\\\u0026\")\n-        .replace(\"'\", \"\\\\u0027\")\n-    )\n-    if not _slash_escape:\n-        rv = rv.replace(\"\\\\/\", \"/\")\n-    return rv\n+    return dumps(obj, **kwargs).translate(_htmlsafe_map)\n \n \n def htmlsafe_dump(obj, fp, **kwargs):\n\n@@ -13,7 +13,6 @@ from werkzeug.http import parse_cache_control_header\n from werkzeug.http import parse_options_header\n \n import flask\n-from flask import json\n from flask.helpers import get_debug_flag\n from flask.helpers import get_env\n \n@@ -64,26 +63,6 @@ class FixedOffset(datetime.tzinfo):\n \n \n class TestJSON:\n-    @pytest.mark.parametrize(\n-        \"value\", (1, \"t\", True, False, None, [], [1, 2, 3], {}, {\"foo\": \"🐍\"})\n-    )\n-    @pytest.mark.parametrize(\n-        \"encoding\",\n-        (\n-            \"utf-8\",\n-            \"utf-8-sig\",\n-            \"utf-16-le\",\n-            \"utf-16-be\",\n-            \"utf-16\",\n-            \"utf-32-le\",\n-            \"utf-32-be\",\n-            \"utf-32\",\n-        ),\n-    )\n-    def test_detect_encoding(self, value, encoding):\n-        data = json.dumps(value).encode(encoding)\n-        assert json.loads(data) == value\n-\n     @pytest.mark.parametrize(\"debug\", (True, False))\n     def test_bad_request_debug_message(self, app, client, debug):\n         app.config[\"DEBUG\"] = debug\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#8b5f760b7285c863d5c7a4ee10adb5eb7ac60a05", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 53 | Lines Deleted: 48 | Files Changed: 2 | Hunks: 14 | Methods Changed: 12 | Complexity Δ (Sum/Max): -2/0 | Churn Δ: 101 | Churn Cumulative: 3308 | Contributors (this commit): 36 | Commits (past 90d): 14 | Contributors (cumulative): 37 | DMM Complexity: 1.0\n\nDIFF:\n@@ -1,10 +1,11 @@\n import io\n import json as _json\n import uuid\n+import warnings\n from datetime import date\n from datetime import datetime\n \n-from jinja2 import Markup\n+from markupsafe import Markup\n from werkzeug.http import http_date\n \n from ..globals import current_app\n@@ -17,33 +18,6 @@ except ImportError:\n     dataclasses = None\n \n \n-__all__ = [\n-    \"dump\",\n-    \"dumps\",\n-    \"load\",\n-    \"loads\",\n-    \"htmlsafe_dump\",\n-    \"htmlsafe_dumps\",\n-    \"JSONDecoder\",\n-    \"JSONEncoder\",\n-    \"jsonify\",\n-]\n-\n-\n-def _wrap_reader_for_text(fp, encoding):\n-    if isinstance(fp.read(0), bytes):\n-        fp = io.TextIOWrapper(io.BufferedReader(fp), encoding)\n-    return fp\n-\n-\n-def _wrap_writer_for_text(fp, encoding):\n-    try:\n-        fp.write(\"\")\n-    except TypeError:\n-        fp = io.TextIOWrapper(fp, encoding)\n-    return fp\n-\n-\n class JSONEncoder(_json.JSONEncoder):\n     \"\"\"The default Flask JSON encoder. This one extends the default\n     encoder by also supporting ``datetime``, ``UUID``, ``dataclasses``,\n@@ -83,7 +57,7 @@ class JSONEncoder(_json.JSONEncoder):\n             return dataclasses.asdict(o)\n         if hasattr(o, \"__html__\"):\n             return str(o.__html__())\n-        return _json.JSONEncoder.default(self, o)\n+        return super().default(self, o)\n \n \n class JSONDecoder(_json.JSONDecoder):\n@@ -101,13 +75,9 @@ def _dump_arg_defaults(kwargs, app=None):\n \n     if app:\n         bp = app.blueprints.get(request.blueprint) if request else None\n-        kwargs.setdefault(\n-            \"cls\", bp.json_encoder if bp and bp.json_encoder else app.json_encoder\n-        )\n-\n-        if not app.config[\"JSON_AS_ASCII\"]:\n-            kwargs.setdefault(\"ensure_ascii\", False)\n-\n+        cls = bp.json_encoder if bp and bp.json_encoder else app.json_encoder\n+        kwargs.setdefault(\"cls\", cls)\n+        kwargs.setdefault(\"ensure_ascii\", app.config[\"JSON_AS_ASCII\"])\n         kwargs.setdefault(\"sort_keys\", app.config[\"JSON_SORT_KEYS\"])\n     else:\n         kwargs.setdefault(\"sort_keys\", True)\n@@ -121,9 +91,8 @@ def _load_arg_defaults(kwargs, app=None):\n \n     if app:\n         bp = app.blueprints.get(request.blueprint) if request else None\n-        kwargs.setdefault(\n-            \"cls\", bp.json_decoder if bp and bp.json_decoder else app.json_decoder\n-        )\n+        cls = bp.json_decoder if bp and bp.json_decoder else app.json_decoder\n+        kwargs.setdefault(\"cls\", cls)\n     else:\n         kwargs.setdefault(\"cls\", JSONDecoder)\n \n@@ -152,8 +121,15 @@ def dumps(obj, app=None, **kwargs):\n     encoding = kwargs.pop(\"encoding\", None)\n     rv = _json.dumps(obj, **kwargs)\n \n-    if encoding is not None and isinstance(rv, str):\n-        rv = rv.encode(encoding)\n+    if encoding is not None:\n+        warnings.warn(\n+            \"'encoding' is deprecated and will be removed in 2.1.\",\n+            DeprecationWarning,\n+            stacklevel=2,\n+        )\n+\n+        if isinstance(rv, str):\n+            return rv.encode(encoding)\n \n     return rv\n \n@@ -162,9 +138,21 @@ def dump(obj, fp, app=None, **kwargs):\n     \"\"\"Like :func:`dumps` but writes into a file object.\"\"\"\n     _dump_arg_defaults(kwargs, app=app)\n     encoding = kwargs.pop(\"encoding\", None)\n+    show_warning = encoding is not None\n \n-    if encoding is not None:\n-        fp = _wrap_writer_for_text(fp, encoding)\n+    try:\n+        fp.write(\"\")\n+    except TypeError:\n+        show_warning = True\n+        fp = io.TextIOWrapper(fp, encoding or \"utf-8\")\n+\n+    if show_warning:\n+        warnings.warn(\n+            \"Writing to a binary file, and the 'encoding' argument, is\"\n+            \" deprecated and will be removed in 2.1.\",\n+            DeprecationWarning,\n+            stacklevel=2,\n+        )\n \n     _json.dump(obj, fp, **kwargs)\n \n@@ -192,7 +180,15 @@ def loads(s, app=None, **kwargs):\n     _load_arg_defaults(kwargs, app=app)\n     encoding = kwargs.pop(\"encoding\", None)\n \n-    if encoding is not None and isinstance(s, bytes):\n+    if encoding is not None:\n+        warnings.warn(\n+            \"'encoding' is deprecated and will be removed in 2.1. The\"\n+            \" data must be a string or UTF-8 bytes.\",\n+            DeprecationWarning,\n+            stacklevel=2,\n+        )\n+\n+        if isinstance(s, bytes):\n             s = s.decode(encoding)\n \n     return _json.loads(s, **kwargs)\n@@ -202,7 +198,18 @@ def load(fp, app=None, **kwargs):\n     \"\"\"Like :func:`loads` but reads from a file object.\"\"\"\n     _load_arg_defaults(kwargs, app=app)\n     encoding = kwargs.pop(\"encoding\", None)\n-    fp = _wrap_reader_for_text(fp, encoding or \"utf-8\")\n+\n+    if encoding is not None:\n+        warnings.warn(\n+            \"'encoding' is deprecated and will be removed in 2.1. The\"\n+            \" file must be text mode, or binary mode with UTF-8 bytes.\",\n+            DeprecationWarning,\n+            stacklevel=2,\n+        )\n+\n+        if isinstance(fp.read(0), bytes):\n+            fp = io.TextIOWrapper(fp, encoding)\n+\n     return _json.load(fp, **kwargs)\n \n \n@@ -241,7 +248,7 @@ def htmlsafe_dumps(obj, **kwargs):\n \n def htmlsafe_dump(obj, fp, **kwargs):\n     \"\"\"Like :func:`htmlsafe_dumps` but writes into a file object.\"\"\"\n-    fp.write(str(htmlsafe_dumps(obj, **kwargs)))\n+    fp.write(htmlsafe_dumps(obj, **kwargs))\n \n \n def jsonify(*args, **kwargs):\n@@ -293,7 +300,6 @@ def jsonify(*args, **kwargs):\n \n     .. versionadded:: 0.2\n     \"\"\"\n-\n     indent = None\n     separators = (\",\", \":\")\n \n\n@@ -232,7 +232,6 @@ class TestJSON:\n         render = flask.render_template_string\n         rv = flask.json.htmlsafe_dumps(\"</script>\")\n         assert rv == '\"\\\\u003c/script\\\\u003e\"'\n-        assert type(rv) is str\n         rv = render('{{ \"</script>\"|tojson }}')\n         assert rv == '\"\\\\u003c/script\\\\u003e\"'\n         rv = render('{{ \"<\\0/script>\"|tojson }}')\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#756902cca1bab981fbec0ea759d93239d9a711f0", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 117 | Lines Deleted: 100 | Files Changed: 2 | Hunks: 34 | Methods Changed: 8 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 217 | Churn Cumulative: 510 | Contributors (this commit): 1 | Commits (past 90d): 13 | Contributors (cumulative): 2 | DMM Complexity: None\n\nDIFF:\n@@ -19,33 +19,27 @@ except ImportError:\n \n \n class JSONEncoder(_json.JSONEncoder):\n-    \"\"\"The default Flask JSON encoder. This one extends the default\n-    encoder by also supporting ``datetime``, ``UUID``, ``dataclasses``,\n-    and ``Markup`` objects.\n+    \"\"\"The default JSON encoder. Handles extra types compared to the\n+    built-in :class:`json.JSONEncoder`.\n \n-    ``datetime`` objects are serialized as RFC 822 datetime strings.\n-    This is the same as the HTTP date format.\n+    -   :class:`datetime.datetime` and :class:`datetime.date` are\n+        serialized to :rfc:`822` strings. This is the same as the HTTP\n+        date format.\n+    -   :class:`uuid.UUID` is serialized to a string.\n+    -   :class:`dataclasses.dataclass` is passed to\n+        :func:`dataclasses.asdict`.\n+    -   :class:`~markupsafe.Markup` (or any object with a ``__html__``\n+        method) will call the ``__html__`` method to get a string.\n \n-    In order to support more data types, override the :meth:`default`\n-    method.\n+    Assign a subclass of this to :attr:`flask.Flask.json_encoder` or\n+    :attr:`flask.Blueprint.json_encoder` to override the default.\n     \"\"\"\n \n     def default(self, o):\n-        \"\"\"Implement this method in a subclass such that it returns a\n-        serializable object for ``o``, or calls the base implementation (to\n-        raise a :exc:`TypeError`).\n-\n-        For example, to support arbitrary iterators, you could implement\n-        default like this::\n-\n-            def default(self, o):\n-                try:\n-                    iterable = iter(o)\n-                except TypeError:\n-                    pass\n-                else:\n-                    return list(iterable)\n-                return JSONEncoder.default(self, o)\n+        \"\"\"Convert ``o`` to a JSON serializable type. See\n+        :meth:`json.JSONEncoder.default`. Python does not support\n+        overriding how basic types like ``str`` or ``list`` are\n+        serialized, they are handled before this method.\n         \"\"\"\n         if isinstance(o, datetime):\n             return http_date(o.utctimetuple())\n@@ -61,10 +55,13 @@ class JSONEncoder(_json.JSONEncoder):\n \n \n class JSONDecoder(_json.JSONDecoder):\n-    \"\"\"The default JSON decoder.  This one does not change the behavior from\n-    the default decoder.  Consult the :mod:`json` documentation\n-    for more information.  This decoder is not only used for the load\n-    functions of this module but also :attr:`~flask.Request`.\n+    \"\"\"The default JSON decoder.\n+\n+    This does not change any behavior from the built-in\n+    :class:`json.JSONDecoder`.\n+\n+    Assign a subclass of this to :attr:`flask.Flask.json_decoder` or\n+    :attr:`flask.Blueprint.json_decoder` to override the default.\n     \"\"\"\n \n \n@@ -98,22 +95,20 @@ def _load_arg_defaults(kwargs, app=None):\n \n \n def dumps(obj, app=None, **kwargs):\n-    \"\"\"Serialize ``obj`` to a JSON-formatted string. If there is an\n-    app context pushed, use the current app's configured encoder\n-    (:attr:`~flask.Flask.json_encoder`), or fall back to the default\n-    :class:`JSONEncoder`.\n+    \"\"\"Serialize an object to a string of JSON.\n \n-    Takes the same arguments as the built-in :func:`json.dumps`, and\n-    does some extra configuration based on the application.\n+    Takes the same arguments as the built-in :func:`json.dumps`, with\n+    some defaults from application configuration.\n \n     :param obj: Object to serialize to JSON.\n-    :param app: App instance to use to configure the JSON encoder.\n-        Uses ``current_app`` if not given, and falls back to the default\n-        encoder when not in an app context.\n-    :param kwargs: Extra arguments passed to :func:`json.dumps`.\n+    :param app: Use this app's config instead of the active app context\n+        or defaults.\n+    :param kwargs: Extra arguments passed to func:`json.dumps`.\n+\n+    .. versionchanged:: 2.0\n+        ``encoding`` is deprecated and will be removed in 2.1.\n \n     .. versionchanged:: 1.0.3\n-\n         ``app`` can be passed directly, rather than requiring an app\n         context for configuration.\n     \"\"\"\n@@ -135,7 +130,21 @@ def dumps(obj, app=None, **kwargs):\n \n \n def dump(obj, fp, app=None, **kwargs):\n-    \"\"\"Like :func:`dumps` but writes into a file object.\"\"\"\n+    \"\"\"Serialize an object to JSON written to a file object.\n+\n+    Takes the same arguments as the built-in :func:`json.dump`, with\n+    some defaults from application configuration.\n+\n+    :param obj: Object to serialize to JSON.\n+    :param fp: File object to write JSON to.\n+    :param app: Use this app's config instead of the active app context\n+        or defaults.\n+    :param kwargs: Extra arguments passed to func:`json.dump`.\n+\n+    .. versionchanged:: 2.0\n+        Writing to a binary file, and the ``encoding`` argument, is\n+        deprecated and will be removed in 2.1.\n+    \"\"\"\n     _dump_arg_defaults(kwargs, app=app)\n     encoding = kwargs.pop(\"encoding\", None)\n     show_warning = encoding is not None\n@@ -158,22 +167,21 @@ def dump(obj, fp, app=None, **kwargs):\n \n \n def loads(s, app=None, **kwargs):\n-    \"\"\"Deserialize an object from a JSON-formatted string ``s``. If\n-    there is an app context pushed, use the current app's configured\n-    decoder (:attr:`~flask.Flask.json_decoder`), or fall back to the\n-    default :class:`JSONDecoder`.\n+    \"\"\"Deserialize an object from a string of JSON.\n \n-    Takes the same arguments as the built-in :func:`json.loads`, and\n-    does some extra configuration based on the application.\n+    Takes the same arguments as the built-in :func:`json.loads`, with\n+    some defaults from application configuration.\n \n     :param s: JSON string to deserialize.\n-    :param app: App instance to use to configure the JSON decoder.\n-        Uses ``current_app`` if not given, and falls back to the default\n-        encoder when not in an app context.\n-    :param kwargs: Extra arguments passed to :func:`json.dumps`.\n+    :param app: Use this app's config instead of the active app context\n+        or defaults.\n+    :param kwargs: Extra arguments passed to func:`json.dump`.\n+\n+    .. versionchanged:: 2.0\n+        ``encoding`` is deprecated and will be removed in 2.1. The data\n+        must be a string or UTF-8 bytes.\n \n     .. versionchanged:: 1.0.3\n-\n         ``app`` can be passed directly, rather than requiring an app\n         context for configuration.\n     \"\"\"\n@@ -195,7 +203,20 @@ def loads(s, app=None, **kwargs):\n \n \n def load(fp, app=None, **kwargs):\n-    \"\"\"Like :func:`loads` but reads from a file object.\"\"\"\n+    \"\"\"Deserialize an object from JSON read from a file object.\n+\n+    Takes the same arguments as the built-in :func:`json.load`, with\n+    some defaults from application configuration.\n+\n+    :param fp: File object to read JSON from.\n+    :param app: Use this app's config instead of the active app context\n+        or defaults.\n+    :param kwargs: Extra arguments passed to func:`json.load`.\n+\n+    .. versionchanged:: 2.0\n+        ``encoding`` is deprecated and will be removed in 2.1. The file\n+        must be text mode, or binary mode with UTF-8 bytes.\n+    \"\"\"\n     _load_arg_defaults(kwargs, app=app)\n     encoding = kwargs.pop(\"encoding\", None)\n \n@@ -219,67 +240,66 @@ _htmlsafe_map = str.maketrans(\n \n \n def htmlsafe_dumps(obj, **kwargs):\n-    \"\"\"Works exactly like :func:`dumps` but is safe for use in ``<script>``\n-    tags.  It accepts the same arguments and returns a JSON string.  Note that\n-    this is available in templates through the ``|tojson`` filter which will\n-    also mark the result as safe.  Due to how this function escapes certain\n-    characters this is safe even if used outside of ``<script>`` tags.\n+    \"\"\"Serialize an object to a string of JSON, replacing HTML-unsafe\n+    characters with Unicode escapes. Otherwise behaves the same as\n+    :func:`dumps`.\n \n-    The following characters are escaped in strings:\n+    This is available in templates as the ``|tojson`` filter, which will\n+    also mark the result with ``|safe``.\n \n-    -   ``<``\n-    -   ``>``\n-    -   ``&``\n-    -   ``'``\n-\n-    This makes it safe to embed such strings in any place in HTML with the\n-    notable exception of double quoted attributes.  In that case single\n-    quote your attributes or HTML escape it in addition.\n+    The returned string is safe to render in HTML documents and\n+    ``<script>`` tags. The exception is in HTML attributes that are\n+    double quoted; either use single quotes or the ``|forceescape``\n+    filter.\n \n     .. versionchanged:: 0.10\n-       This function's return value is now always safe for HTML usage, even\n-       if outside of script tags or if used in XHTML.  This rule does not\n-       hold true when using this function in HTML attributes that are double\n-       quoted.  Always single quote attributes if you use the ``|tojson``\n-       filter.  Alternatively use ``|tojson|forceescape``.\n+        Single quotes are escaped, making this safe to use in HTML,\n+        ``<script>`` tags, and single-quoted attributes without further\n+        escaping.\n     \"\"\"\n     return dumps(obj, **kwargs).translate(_htmlsafe_map)\n \n \n def htmlsafe_dump(obj, fp, **kwargs):\n-    \"\"\"Like :func:`htmlsafe_dumps` but writes into a file object.\"\"\"\n+    \"\"\"Serialize an object to JSON written to a file object, replacing\n+    HTML-unsafe characters with Unicode escapes. See\n+    :func:`htmlsafe_dumps` and :func:`dumps`.\n+    \"\"\"\n     fp.write(htmlsafe_dumps(obj, **kwargs))\n \n \n def jsonify(*args, **kwargs):\n-    \"\"\"This function wraps :func:`dumps` to add a few enhancements that make\n-    life easier.  It turns the JSON output into a :class:`~flask.Response`\n-    object with the :mimetype:`application/json` mimetype.  For convenience, it\n-    also converts multiple arguments into an array or multiple keyword arguments\n-    into a dict.  This means that both ``jsonify(1,2,3)`` and\n-    ``jsonify([1,2,3])`` serialize to ``[1,2,3]``.\n+    \"\"\"Serialize data to JSON and wrap it in a :class:`~flask.Response`\n+    with the :mimetype:`application/json` mimetype.\n \n-    For clarity, the JSON serialization behavior has the following differences\n-    from :func:`dumps`:\n+    Uses :func:`dumps` to serialize the data, but ``args`` and\n+    ``kwargs`` are treated as data rather than arguments to\n+    :func:`json.dumps`.\n \n-    1. Single argument: Passed straight through to :func:`dumps`.\n-    2. Multiple arguments: Converted to an array before being passed to\n-       :func:`dumps`.\n-    3. Multiple keyword arguments: Converted to a dict before being passed to\n-       :func:`dumps`.\n-    4. Both args and kwargs: Behavior undefined and will throw an exception.\n+    1.  Single argument: Treated as a single value.\n+    2.  Multiple arguments: Treated as a list of values.\n+        ``jsonify(1, 2, 3)`` is the same as ``jsonify([1, 2, 3])``.\n+    3.  Keyword arguments: Treated as a dict of values.\n+        ``jsonify(data=data, errors=errors)`` is the same as\n+        ``jsonify({\"data\": data, \"errors\": errors})``.\n+    4.  Passing both arguments and keyword arguments is not allowed as\n+        it's not clear what should happen.\n \n-    Example usage::\n+    .. code-block:: python\n \n         from flask import jsonify\n \n-        @app.route('/_get_current_user')\n+        @app.route(\"/users/me\")\n         def get_current_user():\n-            return jsonify(username=g.user.username,\n+            return jsonify(\n+                username=g.user.username,\n                 email=g.user.email,\n-                           id=g.user.id)\n+                id=g.user.id,\n+            )\n \n-    This will send a JSON response like this to the browser::\n+    Will return a JSON response like this:\n+\n+    .. code-block:: javascript\n \n         {\n           \"username\": \"admin\",\n@@ -287,16 +307,13 @@ def jsonify(*args, **kwargs):\n           \"id\": 42\n         }\n \n+    The default output omits indents and spaces after separators. In\n+    debug mode or if :data:`JSONIFY_PRETTYPRINT_REGULAR` is ``True``,\n+    the output will be formatted to be easier to read.\n \n     .. versionchanged:: 0.11\n         Added support for serializing top-level arrays. This introduces\n-        a security risk in ancient browsers. See :ref:`security-json`\n-        for details.\n-\n-    This function's response will be pretty printed if the\n-    ``JSONIFY_PRETTYPRINT_REGULAR`` config parameter is set to True or the\n-    Flask app is running in debug mode. Compressed (not pretty) formatting\n-    currently means no indents and no spaces after separators.\n+        a security risk in ancient browsers. See :ref:`security-json`.\n \n     .. versionadded:: 0.2\n     \"\"\"\n\n@@ -45,7 +45,7 @@ from base64 import b64encode\n from datetime import datetime\n from uuid import UUID\n \n-from jinja2 import Markup\n+from markupsafe import Markup\n from werkzeug.http import http_date\n from werkzeug.http import parse_date\n \n@@ -167,9 +167,9 @@ class TagBytes(JSONTag):\n \n \n class TagMarkup(JSONTag):\n-    \"\"\"Serialize anything matching the :class:`~flask.Markup` API by\n+    \"\"\"Serialize anything matching the :class:`~markupsafe.Markup` API by\n     having a ``__html__`` method to the result of that method. Always\n-    deserializes to an instance of :class:`~flask.Markup`.\"\"\"\n+    deserializes to an instance of :class:`~markupsafe.Markup`.\"\"\"\n \n     __slots__ = ()\n     key = \" m\"\n@@ -222,7 +222,7 @@ class TaggedJSONSerializer:\n     * :class:`dict`\n     * :class:`tuple`\n     * :class:`bytes`\n-    * :class:`~flask.Markup`\n+    * :class:`~markupsafe.Markup`\n     * :class:`~uuid.UUID`\n     * :class:`~datetime.datetime`\n     \"\"\"\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#fcac7f11cf5fbdaa43c3a8c305b31cf0a43a70d3", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 39 | Lines Deleted: 31 | Files Changed: 3 | Hunks: 20 | Methods Changed: 25 | Complexity Δ (Sum/Max): -1/0 | Churn Δ: 70 | Churn Cumulative: 1780 | Contributors (this commit): 27 | Commits (past 90d): 16 | Contributors (cumulative): 31 | DMM Complexity: 0.2727272727272727\n\nDIFF:\n@@ -5,6 +5,7 @@ import platform\n import re\n import sys\n import traceback\n+import warnings\n from functools import update_wrapper\n from operator import attrgetter\n from threading import Lock\n@@ -91,14 +92,22 @@ def call_factory(script_info, app_factory, arguments=()):\n     the app_factory depending on that and the arguments provided.\n     \"\"\"\n     args_spec = inspect.getfullargspec(app_factory)\n-    arg_names = args_spec.args\n-    arg_defaults = args_spec.defaults\n \n-    if \"script_info\" in arg_names:\n+    if \"script_info\" in args_spec.args:\n+        warnings.warn(\n+            \"The 'script_info' argument is deprecated and will not be\"\n+            \" passed to the app factory function in 2.1.\",\n+            DeprecationWarning,\n+        )\n         return app_factory(*arguments, script_info=script_info)\n     elif arguments:\n         return app_factory(*arguments)\n-    elif not arguments and len(arg_names) == 1 and arg_defaults is None:\n+    elif not arguments and len(args_spec.args) == 1 and args_spec.defaults is None:\n+        warnings.warn(\n+            \"Script info is deprecated and will not be passed as the\"\n+            \" first argument to the app factory function in 2.1.\",\n+            DeprecationWarning,\n+        )\n         return app_factory(script_info)\n \n     return app_factory()\n@@ -131,10 +140,8 @@ def _called_with_wrong_args(factory):\n \n \n def find_app_by_string(script_info, module, app_name):\n-    \"\"\"Checks if the given string is a variable name or a function. If it is a\n-    function, it checks for specified arguments and whether it takes a\n-    ``script_info`` argument and calls the function with the appropriate\n-    arguments.\n+    \"\"\"Check if the given string is a variable name or a function. Call\n+    a function to get the app instance, or return the variable directly.\n     \"\"\"\n     from . import Flask\n \n\n@@ -9,9 +9,5 @@ def create_app2(foo, bar):\n     return Flask(\"_\".join([\"app2\", foo, bar]))\n \n \n-def create_app3(foo, script_info):\n-    return Flask(\"_\".join([\"app3\", foo, script_info.data[\"test\"]]))\n-\n-\n def no_app():\n     pass\n\n@@ -67,32 +67,40 @@ def test_find_best_app(test_apps):\n         def create_app():\n             return Flask(\"appname\")\n \n-    assert isinstance(find_best_app(script_info, Module), Flask)\n-    assert find_best_app(script_info, Module).name == \"appname\"\n+    app = find_best_app(script_info, Module)\n+    assert isinstance(app, Flask)\n+    assert app.name == \"appname\"\n \n     class Module:\n         @staticmethod\n         def create_app(foo):\n             return Flask(\"appname\")\n \n-    assert isinstance(find_best_app(script_info, Module), Flask)\n-    assert find_best_app(script_info, Module).name == \"appname\"\n+    with pytest.deprecated_call(match=\"Script info\"):\n+        app = find_best_app(script_info, Module)\n+\n+    assert isinstance(app, Flask)\n+    assert app.name == \"appname\"\n \n     class Module:\n         @staticmethod\n         def create_app(foo=None, script_info=None):\n             return Flask(\"appname\")\n \n-    assert isinstance(find_best_app(script_info, Module), Flask)\n-    assert find_best_app(script_info, Module).name == \"appname\"\n+    with pytest.deprecated_call(match=\"script_info\"):\n+        app = find_best_app(script_info, Module)\n+\n+    assert isinstance(app, Flask)\n+    assert app.name == \"appname\"\n \n     class Module:\n         @staticmethod\n         def make_app():\n             return Flask(\"appname\")\n \n-    assert isinstance(find_best_app(script_info, Module), Flask)\n-    assert find_best_app(script_info, Module).name == \"appname\"\n+    app = find_best_app(script_info, Module)\n+    assert isinstance(app, Flask)\n+    assert app.name == \"appname\"\n \n     class Module:\n         myapp = Flask(\"appname1\")\n@@ -199,15 +207,12 @@ def test_prepare_import(request, value, path, result):\n         (\"cliapp.factory\", 'create_app2(\"foo\", \"bar\")', \"app2_foo_bar\"),\n         # trailing comma space\n         (\"cliapp.factory\", 'create_app2(\"foo\", \"bar\", )', \"app2_foo_bar\"),\n-        # takes script_info\n-        (\"cliapp.factory\", 'create_app3(\"foo\")', \"app3_foo_spam\"),\n         # strip whitespace\n         (\"cliapp.factory\", \" create_app () \", \"app\"),\n     ),\n )\n def test_locate_app(test_apps, iname, aname, result):\n     info = ScriptInfo()\n-    info.data[\"test\"] = \"spam\"\n     assert locate_app(info, iname, aname).name == result\n \n \n@@ -286,7 +291,7 @@ def test_scriptinfo(test_apps, monkeypatch):\n     assert app.name == \"testapp\"\n     assert obj.load_app() is app\n \n-    def create_app(info):\n+    def create_app():\n         return Flask(\"createapp\")\n \n     obj = ScriptInfo(create_app=create_app)\n@@ -324,7 +329,7 @@ def test_with_appcontext(runner):\n     def testcmd():\n         click.echo(current_app.name)\n \n-    obj = ScriptInfo(create_app=lambda info: Flask(\"testapp\"))\n+    obj = ScriptInfo(create_app=lambda: Flask(\"testapp\"))\n \n     result = runner.invoke(testcmd, obj=obj)\n     assert result.exit_code == 0\n@@ -350,7 +355,7 @@ def test_appgroup(runner):\n     def test2():\n         click.echo(current_app.name)\n \n-    obj = ScriptInfo(create_app=lambda info: Flask(\"testappgroup\"))\n+    obj = ScriptInfo(create_app=lambda: Flask(\"testappgroup\"))\n \n     result = runner.invoke(cli, [\"test\"], obj=obj)\n     assert result.exit_code == 0\n@@ -364,7 +369,7 @@ def test_appgroup(runner):\n def test_flaskgroup(runner):\n     \"\"\"Test FlaskGroup.\"\"\"\n \n-    def create_app(info):\n+    def create_app():\n         return Flask(\"flaskgroup\")\n \n     @click.group(cls=FlaskGroup, create_app=create_app)\n@@ -384,7 +389,7 @@ def test_flaskgroup(runner):\n def test_flaskgroup_debug(runner, set_debug_flag):\n     \"\"\"Test FlaskGroup debug flag behavior.\"\"\"\n \n-    def create_app(info):\n+    def create_app():\n         app = Flask(\"flaskgroup\")\n         app.debug = True\n         return app\n@@ -405,7 +410,7 @@ def test_flaskgroup_debug(runner, set_debug_flag):\n def test_print_exceptions(runner):\n     \"\"\"Print the stacktrace if the CLI.\"\"\"\n \n-    def create_app(info):\n+    def create_app():\n         raise Exception(\"oh no\")\n         return Flask(\"flaskgroup\")\n \n@@ -422,7 +427,7 @@ def test_print_exceptions(runner):\n class TestRoutes:\n     @pytest.fixture\n     def invoke(self, runner):\n-        def create_app(info):\n+        def create_app():\n             app = Flask(__name__)\n             app.testing = True\n \n@@ -441,7 +446,7 @@ class TestRoutes:\n \n     @pytest.fixture\n     def invoke_no_routes(self, runner):\n-        def create_app(info):\n+        def create_app():\n             app = Flask(__name__, static_folder=None)\n             app.testing = True\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#ff2f71379b719903e462ed6a83801b1736009000", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 63 | Lines Deleted: 38 | Files Changed: 2 | Hunks: 22 | Methods Changed: 6 | Complexity Δ (Sum/Max): 5/5 | Churn Δ: 101 | Churn Cumulative: 1838 | Contributors (this commit): 27 | Commits (past 90d): 16 | Contributors (cumulative): 28 | DMM Complexity: 0.0\n\nDIFF:\n@@ -86,55 +86,60 @@ def find_best_app(script_info, module):\n     )\n \n \n-def call_factory(script_info, app_factory, arguments=()):\n+def call_factory(script_info, app_factory, args=None, kwargs=None):\n     \"\"\"Takes an app factory, a ``script_info` object and  optionally a tuple\n     of arguments. Checks for the existence of a script_info argument and calls\n     the app_factory depending on that and the arguments provided.\n     \"\"\"\n-    args_spec = inspect.getfullargspec(app_factory)\n+    sig = inspect.signature(app_factory)\n+    args = [] if args is None else args\n+    kwargs = {} if kwargs is None else kwargs\n \n-    if \"script_info\" in args_spec.args:\n+    if \"script_info\" in sig.parameters:\n         warnings.warn(\n             \"The 'script_info' argument is deprecated and will not be\"\n             \" passed to the app factory function in 2.1.\",\n             DeprecationWarning,\n         )\n-        return app_factory(*arguments, script_info=script_info)\n-    elif arguments:\n-        return app_factory(*arguments)\n-    elif not arguments and len(args_spec.args) == 1 and args_spec.defaults is None:\n+        kwargs[\"script_info\"] = script_info\n+\n+    if (\n+        not args\n+        and len(sig.parameters) == 1\n+        and next(iter(sig.parameters.values())).default is inspect.Parameter.empty\n+    ):\n         warnings.warn(\n             \"Script info is deprecated and will not be passed as the\"\n-            \" first argument to the app factory function in 2.1.\",\n+            \" single argument to the app factory function in 2.1.\",\n             DeprecationWarning,\n         )\n-        return app_factory(script_info)\n+        args.append(script_info)\n \n-    return app_factory()\n+    return app_factory(*args, **kwargs)\n \n \n-def _called_with_wrong_args(factory):\n+def _called_with_wrong_args(f):\n     \"\"\"Check whether calling a function raised a ``TypeError`` because\n     the call failed or because something in the factory raised the\n     error.\n \n-    :param factory: the factory function that was called\n-    :return: true if the call failed\n+    :param f: The function that was called.\n+    :return: ``True`` if the call failed.\n     \"\"\"\n     tb = sys.exc_info()[2]\n \n     try:\n         while tb is not None:\n-            if tb.tb_frame.f_code is factory.__code__:\n-                # in the factory, it was called successfully\n+            if tb.tb_frame.f_code is f.__code__:\n+                # In the function, it was called successfully.\n                 return False\n \n             tb = tb.tb_next\n \n-        # didn't reach the factory\n+        # Didn't reach the function.\n         return True\n     finally:\n-        # explicitly delete tb as it is circular referenced\n+        # Delete tb to break a circular reference.\n         # https://docs.python.org/2/library/sys.html#sys.exc_info\n         del tb\n \n@@ -145,37 +150,60 @@ def find_app_by_string(script_info, module, app_name):\n     \"\"\"\n     from . import Flask\n \n-    match = re.match(r\"^ *([^ ()]+) *(?:\\((.*?) *,? *\\))? *$\", app_name)\n-\n-    if not match:\n+    # Parse app_name as a single expression to determine if it's a valid\n+    # attribute name or function call.\n+    try:\n+        expr = ast.parse(app_name.strip(), mode=\"eval\").body\n+    except SyntaxError:\n         raise NoAppException(\n-            f\"{app_name!r} is not a valid variable name or function expression.\"\n+            f\"Failed to parse {app_name!r} as an attribute name or function call.\"\n         )\n \n-    name, args = match.groups()\n+    if isinstance(expr, ast.Name):\n+        name = expr.id\n+        args = kwargs = None\n+    elif isinstance(expr, ast.Call):\n+        # Ensure the function name is an attribute name only.\n+        if not isinstance(expr.func, ast.Name):\n+            raise NoAppException(\n+                f\"Function reference must be a simple name: {app_name!r}.\"\n+            )\n+\n+        name = expr.func.id\n+\n+        # Parse the positional and keyword arguments as literals.\n+        try:\n+            args = [ast.literal_eval(arg) for arg in expr.args]\n+            kwargs = {kw.arg: ast.literal_eval(kw.value) for kw in expr.keywords}\n+        except ValueError:\n+            # literal_eval gives cryptic error messages, show a generic\n+            # message with the full expression instead.\n+            raise NoAppException(\n+                f\"Failed to parse arguments as literal values: {app_name!r}.\"\n+            )\n+    else:\n+        raise NoAppException(\n+            f\"Failed to parse {app_name!r} as an attribute name or function call.\"\n+        )\n \n     try:\n         attr = getattr(module, name)\n-    except AttributeError as e:\n-        raise NoAppException(e.args[0])\n+    except AttributeError:\n+        raise NoAppException(\n+            f\"Failed to find attribute {name!r} in {module.__name__!r}.\"\n+        )\n \n+    # If the attribute is a function, call it with any args and kwargs\n+    # to get the real application.\n     if inspect.isfunction(attr):\n-        if args:\n         try:\n-                args = ast.literal_eval(f\"({args},)\")\n-            except (ValueError, SyntaxError):\n-                raise NoAppException(f\"Could not parse the arguments in {app_name!r}.\")\n-        else:\n-            args = ()\n-\n-        try:\n-            app = call_factory(script_info, attr, args)\n-        except TypeError as e:\n+            app = call_factory(script_info, attr, args, kwargs)\n+        except TypeError:\n             if not _called_with_wrong_args(attr):\n                 raise\n \n             raise NoAppException(\n-                f\"{e}\\nThe factory {app_name!r} in module\"\n+                f\"The factory {app_name!r} in module\"\n                 f\" {module.__name__!r} could not be called with the\"\n                 \" specified arguments.\"\n             )\n@@ -362,8 +390,6 @@ class ScriptInfo:\n         if self._loaded_app is not None:\n             return self._loaded_app\n \n-        app = None\n-\n         if self.create_app is not None:\n             app = call_factory(self, self.create_app)\n         else:\n\n@@ -203,7 +203,6 @@ def test_prepare_import(request, value, path, result):\n         (\"cliapp.factory\", None, \"app\"),\n         (\"cliapp.factory\", \"create_app\", \"app\"),\n         (\"cliapp.factory\", \"create_app()\", \"app\"),\n-        # no script_info\n         (\"cliapp.factory\", 'create_app2(\"foo\", \"bar\")', \"app2_foo_bar\"),\n         # trailing comma space\n         (\"cliapp.factory\", 'create_app2(\"foo\", \"bar\", )', \"app2_foo_bar\"),\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
