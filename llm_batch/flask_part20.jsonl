{"custom_id": "flask#7290981cef49058b9c53f8a4465cf85537c0d22d", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 7 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 3 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 7 | Churn Cumulative: 175 | Contributors (this commit): 1 | Commits (past 90d): 2 | Contributors (cumulative): 1 | DMM Complexity: None\n\nDIFF:\n@@ -25,10 +25,17 @@ class SessionMixin(object):\n     def _set_permanent(self, value):\n         self['_permanent'] = bool(value)\n \n+    #: this reflects the ``'_permanent'`` key in the dict.\n     permanent = property(_get_permanent, _set_permanent)\n     del _get_permanent, _set_permanent\n \n+    #: some session backends can tell you if a session is new, but that is\n+    #: not necessarily guaranteed.  Use with caution.\n     new = False\n+\n+    #: for some backends this will always be `True`, but some backends will\n+    #: default this to false and detect changes in the dictionary for as\n+    #: long as changes do not happen on mutable structures in the session.\n     modified = True\n \n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#10f8dc18b8d43c2776c9381f681263778674bf0d", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 3 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 2 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 179 | Contributors (this commit): 1 | Commits (past 90d): 3 | Contributors (cumulative): 1 | DMM Complexity: None\n\nDIFF:\n@@ -30,12 +30,14 @@ class SessionMixin(object):\n     del _get_permanent, _set_permanent\n \n     #: some session backends can tell you if a session is new, but that is\n-    #: not necessarily guaranteed.  Use with caution.\n+    #: not necessarily guaranteed.  Use with caution.  The default mixin\n+    #: implementation just hardcodes `False` in.\n     new = False\n \n     #: for some backends this will always be `True`, but some backends will\n     #: default this to false and detect changes in the dictionary for as\n     #: long as changes do not happen on mutable structures in the session.\n+    #: The default mixin implementation just hardcodes `True` in.\n     modified = True\n \n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#f29ec355e99e052f98df46875aeb8e319b8e1beb", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 3 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 3 | Churn Cumulative: 168 | Contributors (this commit): 3 | Commits (past 90d): 10 | Contributors (cumulative): 3 | DMM Complexity: None\n\nDIFF:\n@@ -35,3 +35,6 @@ from .signals import signals_available, template_rendered, request_started, \\\n # only import json if it's available\n if json_available:\n     from .helpers import json\n+\n+# backwards compat, goes away in 1.0\n+from .sessions import SecureCookieSession as Session\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#deb513c7fe5a285e2bdeff99424e243d7b4f7829", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 181 | Contributors (this commit): 1 | Commits (past 90d): 4 | Contributors (cumulative): 1 | DMM Complexity: None\n\nDIFF:\n@@ -89,7 +89,7 @@ class SessionInterface(object):\n         app = Flask(__name__)\n         app.session_interface = MySessionInterface()\n \n-    .. versionadded:: 0.7\n+    .. versionadded:: 0.8\n     \"\"\"\n \n     #: :meth:`make_null_session` will look here for the class that should\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#585bf02ee0d23d020f8a24db645c308d912b62e0", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 3 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 5 | Churn Cumulative: 186 | Contributors (this commit): 1 | Commits (past 90d): 5 | Contributors (cumulative): 1 | DMM Complexity: 1.0\n\nDIFF:\n@@ -169,9 +169,10 @@ class SecureCookieSessionInterface(SessionInterface):\n     def save_session(self, app, session, response):\n         expires = self.get_expiration_time(app, session)\n         domain = self.get_cookie_domain(app)\n-        if session.modified and not session:\n+        if not session:\n+            if session.modified:\n                 response.delete_cookie(app.session_cookie_name,\n                                        domain=domain)\n-        else:\n+            return\n         session.save_cookie(response, app.session_cookie_name,\n                             expires=expires, httponly=True, domain=domain)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#d90b1f1705b7bda17743406b4eac5511bdbb702a", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 3 | Files Changed: 1 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 5 | Churn Cumulative: 191 | Contributors (this commit): 1 | Commits (past 90d): 6 | Contributors (cumulative): 1 | DMM Complexity: 0.0\n\nDIFF:\n@@ -169,10 +169,9 @@ class SecureCookieSessionInterface(SessionInterface):\n     def save_session(self, app, session, response):\n         expires = self.get_expiration_time(app, session)\n         domain = self.get_cookie_domain(app)\n-        if not session:\n-            if session.modified:\n+        if session.modified and not session:\n             response.delete_cookie(app.session_cookie_name,\n                                    domain=domain)\n-            return\n+        else:\n             session.save_cookie(response, app.session_cookie_name,\n                                 expires=expires, httponly=True, domain=domain)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#ebb65b81e1279060bd75d211e5e32aecf0fa3932", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 2074 | Contributors (this commit): 12 | Commits (past 90d): 20 | Contributors (cumulative): 12 | DMM Complexity: None\n\nDIFF:\n@@ -13,7 +13,7 @@ from __future__ import with_statement\n \n import sys\n from threading import Lock\n-from datetime import timedelta, datetime\n+from datetime import timedelta\n from itertools import chain\n \n from werkzeug import ImmutableDict\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#fd679638ea991fbdd5d7318bc9451f0bd5532224", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 2076 | Contributors (this commit): 13 | Commits (past 90d): 21 | Contributors (cumulative): 13 | DMM Complexity: None\n\nDIFF:\n@@ -112,7 +112,7 @@ class Flask(_PackageBoundObject):\n     #: configuration key.  Defaults to `False`.\n     debug = ConfigAttribute('DEBUG')\n \n-    #: The testing flask.  Set this to `True` to enable the test mode of\n+    #: The testing flag.  Set this to `True` to enable the test mode of\n     #: Flask extensions (and in the future probably also Flask itself).\n     #: For example this might activate unittest helpers that have an\n     #: additional runtime cost which should not be enabled by default.\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#7dcf6cbc3141d100e229b4a781f67ab1286af055", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 0 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 1 | Churn Cumulative: 212 | Contributors (this commit): 4 | Commits (past 90d): 5 | Contributors (cumulative): 4 | DMM Complexity: None\n\nDIFF:\n@@ -12,7 +12,6 @@\n from werkzeug.exceptions import HTTPException\n \n from .globals import _request_ctx_stack\n-from .session import _NullSession\n from .module import blueprint_is_module\n \n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#9d899cd63e539b92262bbc6f101e7b5408bb31fc", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 2078 | Contributors (this commit): 13 | Commits (past 90d): 22 | Contributors (cumulative): 13 | DMM Complexity: None\n\nDIFF:\n@@ -82,7 +82,7 @@ class Flask(_PackageBoundObject):\n         extension will look for the code in your application that triggered\n         an SQL query in debug mode.  If the import name is not properly set\n         up, that debugging information is lost.  (For example it would only\n-        pick up SQL queries in `yourapplicaiton.app` and not\n+        pick up SQL queries in `yourapplication.app` and not\n         `yourapplication.views.frontend`)\n \n     .. versionadded:: 0.5\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#3b31df81aeccb889810b4b49ce6e608e67ebeeea", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 27 | Lines Deleted: 1 | Files Changed: 2 | Hunks: 4 | Methods Changed: 4 | Complexity Δ (Sum/Max): 4/3 | Churn Δ: 28 | Churn Cumulative: 4322 | Contributors (this commit): 17 | Commits (past 90d): 40 | Contributors (cumulative): 24 | DMM Complexity: 0.8095238095238095\n\nDIFF:\n@@ -703,15 +703,24 @@ class Flask(_PackageBoundObject):\n             endpoint = _endpoint_from_view_func(view_func)\n         options['endpoint'] = endpoint\n         methods = options.pop('methods', None)\n+\n         # if the methods are not given and the view_func object knows its\n         # methods we can use that instead.  If neither exists, we go with\n         # a tuple of only `GET` as default.\n         if methods is None:\n             methods = getattr(view_func, 'methods', None) or ('GET',)\n-        provide_automatic_options = False\n+\n+        # starting with Flask 0.8 the view_func object can disable and\n+        # force-enable the automatic options handling.\n+        provide_automatic_options = getattr(view_func,\n+            'provide_automatic_options', None)\n+\n+        if provide_automatic_options is None:\n             if 'OPTIONS' not in methods:\n                 methods = tuple(methods) + ('OPTIONS',)\n                 provide_automatic_options = True\n+            else:\n+                provide_automatic_options = False\n \n         # due to a werkzeug bug we need to make sure that the defaults are\n         # None if they are an empty dictionary.  This should not be necessary\n\n@@ -194,6 +194,23 @@ class BasicFunctionalityTestCase(unittest.TestCase):\n         rv = app.test_client().open('/', method='OPTIONS')\n         assert sorted(rv.allow) == ['GET', 'HEAD', 'OPTIONS', 'POST', 'PUT']\n \n+    def test_options_handling_disabled(self):\n+        app = flask.Flask(__name__)\n+        def index():\n+            return 'Hello World!'\n+        index.provide_automatic_options = False\n+        app.route('/')(index)\n+        rv = app.test_client().open('/', method='OPTIONS')\n+        assert rv.status_code == 405\n+\n+        app = flask.Flask(__name__)\n+        def index2():\n+            return 'Hello World!'\n+        index2.provide_automatic_options = True\n+        app.route('/', methods=['OPTIONS'])(index2)\n+        rv = app.test_client().open('/', method='OPTIONS')\n+        assert sorted(rv.allow) == ['OPTIONS']\n+\n     def test_request_dispatching(self):\n         app = flask.Flask(__name__)\n         @app.route('/')\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#76796c326d9abc243034847c41aa61f80ba3d653", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 4 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 2093 | Contributors (this commit): 13 | Commits (past 90d): 24 | Contributors (cumulative): 13 | DMM Complexity: None\n\nDIFF:\n@@ -678,6 +678,10 @@ class Flask(_PackageBoundObject):\n \n             app.view_functions['index'] = index\n \n+        If a view function is provided some defaults can be specified directly\n+        on the view function.  For more information refer to\n+        :ref:`view-func-options`.\n+\n         .. versionchanged:: 0.2\n            `view_func` parameter added.\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#2866ccda1fe19a42adc735d75abaf304f8aed27b", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 17 | Lines Deleted: 10 | Files Changed: 7 | Hunks: 10 | Methods Changed: 2 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 27 | Churn Cumulative: 3451 | Contributors (this commit): 22 | Commits (past 90d): 56 | Contributors (cumulative): 39 | DMM Complexity: None\n\nDIFF:\n@@ -14,7 +14,8 @@ __version__ = '0.8-dev'\n \n # utilities we import from Werkzeug and Jinja2 that are unused\n # in the module but are exported as public interface.\n-from werkzeug import abort, redirect\n+from werkzeug.exceptions import abort\n+from werkzeug.utils import redirect\n from jinja2 import Markup, escape\n \n from .app import Flask, Request, Response\n\n@@ -16,7 +16,7 @@ from threading import Lock\n from datetime import timedelta\n from itertools import chain\n \n-from werkzeug import ImmutableDict\n+from werkzeug.datastructures import ImmutableDict\n from werkzeug.routing import Map, Rule\n from werkzeug.exceptions import HTTPException, InternalServerError, \\\n      MethodNotAllowed\n@@ -551,7 +551,7 @@ class Flask(_PackageBoundObject):\n                         Werkzeug server.  See :func:`werkzeug.run_simple`\n                         for more information.\n         \"\"\"\n-        from werkzeug import run_simple\n+        from werkzeug.serving import run_simple\n         if 'debug' in options:\n             self.debug = options.pop('debug')\n         options.setdefault('use_reloader', self.debug)\n@@ -1267,7 +1267,7 @@ class Flask(_PackageBoundObject):\n         :func:`werkzeug.create_environ` for more information, this\n         function accepts the same arguments).\n         \"\"\"\n-        from werkzeug import create_environ\n+        from werkzeug.test import create_environ\n         environ_overrides = kwargs.setdefault('environ_overrides', {})\n         if self.config.get('SERVER_NAME'):\n             server_name = self.config.get('SERVER_NAME')\n\n@@ -15,7 +15,7 @@ import imp\n import os\n import errno\n \n-from werkzeug import import_string\n+from werkzeug.utils import import_string\n \n \n class ConfigAttribute(object):\n\n@@ -11,7 +11,7 @@\n \"\"\"\n \n from functools import partial\n-from werkzeug import LocalStack, LocalProxy\n+from werkzeug.local import LocalStack, LocalProxy\n \n def _lookup_object(name):\n     top = _request_ctx_stack.top\n\n@@ -36,9 +36,15 @@ except ImportError:\n             json_available = False\n \n \n-from werkzeug import Headers, wrap_file\n+from werkzeug.datastructures import Headers\n from werkzeug.exceptions import NotFound\n \n+# this was moved in 0.7\n+try:\n+    from werkzeug.wsgi import wrap_file\n+except ImportError:\n+    from werkzeug.utils import wrap_file\n+\n from jinja2 import FileSystemLoader\n \n from .globals import session, _request_ctx_stack, current_app, request\n\n@@ -10,7 +10,7 @@\n     :license: BSD, see LICENSE for more details.\n \"\"\"\n \n-from werkzeug import Client, EnvironBuilder\n+from werkzeug.test import Client, EnvironBuilder\n from flask import _request_ctx_stack\n \n \n\n@@ -9,8 +9,8 @@\n     :license: BSD, see LICENSE for more details.\n \"\"\"\n \n-from werkzeug import Request as RequestBase, Response as ResponseBase, \\\n-    cached_property\n+from werkzeug.wrappers import Request as RequestBase, Response as ResponseBase\n+from werkzeug.utils import cached_property\n \n from .helpers import json, _assert_have_json\n from .globals import _request_ctx_stack\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#c9a2ad2b8d079c0ecca701f4c0b15390437c4843", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 15 | Lines Deleted: 5 | Files Changed: 5 | Hunks: 6 | Methods Changed: 3 | Complexity Δ (Sum/Max): 2/1 | Churn Δ: 20 | Churn Cumulative: 2569 | Contributors (this commit): 12 | Commits (past 90d): 28 | Contributors (cumulative): 17 | DMM Complexity: 0.7142857142857143\n\nDIFF:\n@@ -78,6 +78,8 @@ class DispatchingJinjaLoader(BaseLoader):\n             pass\n \n         for blueprint in self.app.blueprints.itervalues():\n+            if blueprint_is_module(blueprint):\n+                continue\n             loader = blueprint.jinja_loader\n             if loader is not None:\n                 yield loader, template\n@@ -93,7 +95,7 @@ class DispatchingJinjaLoader(BaseLoader):\n             if loader is not None:\n                 for template in loader.list_templates():\n                     prefix = ''\n-                    if not blueprint_is_module(blueprint):\n+                    if blueprint_is_module(blueprint):\n                         prefix = name + '/'\n                     result.add(prefix + template)\n \n\n@@ -1,7 +1,7 @@\n from flask import Flask\n \n app = Flask(__name__)\n-from moduleapp.apps.admin import admin\n-from moduleapp.apps.frontend import frontend\n+from blueprintapp.apps.admin import admin\n+from blueprintapp.apps.frontend import frontend\n app.register_blueprint(admin)\n app.register_blueprint(frontend)\n\n@@ -1,6 +1,8 @@\n from flask import Blueprint, render_template\n \n-admin = Blueprint(__name__, url_prefix='/admin')\n+admin = Blueprint('admin', __name__, url_prefix='/admin',\n+                  template_folder='templates',\n+                  static_folder='static')\n \n \n @admin.route('/')\n\n@@ -1,6 +1,6 @@\n from flask import Blueprint, render_template\n \n-frontend = Blueprint(__name__)\n+frontend = Blueprint('frontend', __name__, template_folder='templates')\n \n \n @frontend.route('/')\n\n@@ -1414,6 +1414,12 @@ class BlueprintTestCase(unittest.TestCase):\n         with flask.Flask(__name__).test_request_context():\n             assert flask.render_template('nested/nested.txt') == 'I\\'m nested'\n \n+    def test_templates_list(self):\n+        from blueprintapp import app\n+        templates = sorted(app.jinja_env.list_templates())\n+        self.assertEqual(templates, ['admin/index.html',\n+                                     'frontend/index.html'])\n+\n     def test_dotted_names(self):\n         frontend = flask.Blueprint('myapp.frontend', __name__)\n         backend = flask.Blueprint('myapp.backend', __name__)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#343e678900a9970857f37b53b5d2f069327cd828", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 2101 | Contributors (this commit): 13 | Commits (past 90d): 26 | Contributors (cumulative): 13 | DMM Complexity: None\n\nDIFF:\n@@ -856,7 +856,7 @@ class Flask(_PackageBoundObject):\n         .. versionadded:: 0.7\n            One can now additionally also register custom exception types\n            that do not necessarily have to be a subclass of the\n-           :class:~`werkzeug.exceptions.HTTPException` class.\n+           :class:`~werkzeug.exceptions.HTTPException` class.\n \n         :param code: the code as integer for the handler\n         \"\"\"\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#290925e13348385cd3508d9ae52ea328ee9990d9", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 852 | Contributors (this commit): 12 | Commits (past 90d): 11 | Contributors (cumulative): 12 | DMM Complexity: None\n\nDIFF:\n@@ -421,7 +421,7 @@ def safe_join(directory, filename):\n \n     :param directory: the base directory.\n     :param filename: the untrusted filename relative to that directory.\n-    :raises: :class:`~werkzeug.exceptions.NotFound` if the retsulting path\n+    :raises: :class:`~werkzeug.exceptions.NotFound` if the resulting path\n              would fall out of `directory`.\n     \"\"\"\n     filename = posixpath.normpath(filename)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#d5cfcfeba7313d80d7ac29adb8c54960cb594079", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 4 | Lines Deleted: 3 | Files Changed: 1 | Hunks: 2 | Methods Changed: 2 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 7 | Churn Cumulative: 2108 | Contributors (this commit): 14 | Commits (past 90d): 27 | Contributors (cumulative): 14 | DMM Complexity: None\n\nDIFF:\n@@ -548,8 +548,9 @@ class Flask(_PackageBoundObject):\n                      to have the server available externally as well.\n         :param port: the port of the webserver\n         :param options: the options to be forwarded to the underlying\n-                        Werkzeug server.  See :func:`werkzeug.run_simple`\n-                        for more information.\n+                        Werkzeug server.  See\n+                        :func:`werkzeug.serving.run_simple` for more\n+                        information.\n         \"\"\"\n         from werkzeug.serving import run_simple\n         if 'debug' in options:\n@@ -1264,7 +1265,7 @@ class Flask(_PackageBoundObject):\n \n     def test_request_context(self, *args, **kwargs):\n         \"\"\"Creates a WSGI environment from the given values (see\n-        :func:`werkzeug.create_environ` for more information, this\n+        :func:`werkzeug.test.EnvironBuilder` for more information, this\n         function accepts the same arguments).\n         \"\"\"\n         from werkzeug.test import create_environ\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#eba2f70c6b95d9d61b5854feea64f0ba1fb620d2", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 4 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 175 | Contributors (this commit): 4 | Commits (past 90d): 5 | Contributors (cumulative): 4 | DMM Complexity: None\n\nDIFF:\n@@ -23,6 +23,10 @@ class Request(RequestBase):\n     It is what ends up as :class:`~flask.request`.  If you want to replace\n     the request object used you can subclass this and set\n     :attr:`~flask.Flask.request_class` to your subclass.\n+\n+    The request object is a :class:`~werkzeug.wrappers.Request` subclass and\n+    provides all of the attributes Werkzeug defines plus a few Flask\n+    specific ones.\n     \"\"\"\n \n     #: the internal URL rule that matched the request.  This can be\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#fafcc02f261e90a006efd5cc4dfa876531af9594", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 12 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 3 | Complexity Δ (Sum/Max): 3/3 | Churn Δ: 12 | Churn Cumulative: 2251 | Contributors (this commit): 11 | Commits (past 90d): 18 | Contributors (cumulative): 11 | DMM Complexity: 1.0\n\nDIFF:\n@@ -564,6 +564,18 @@ class BasicFunctionalityTestCase(unittest.TestCase):\n         assert rv.status_code == 500\n         assert 'internal server error' == rv.data\n \n+    def test_before_request_and_routing_errors(self):\n+        app = flask.Flask(__name__)\n+        @app.before_request\n+        def attach_something():\n+            flask.g.something = 'value'\n+        @app.errorhandler(404)\n+        def return_something(error):\n+            return flask.g.something, 404\n+        rv = app.test_client().get('/')\n+        assert rv.status_code == 404\n+        assert rv.data == 'value'\n+\n     def test_user_error_handling(self):\n         class MyException(Exception):\n             pass\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#7155f11a723695352323d484610b9a1c6798eb69", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 64 | Lines Deleted: 8 | Files Changed: 2 | Hunks: 7 | Methods Changed: 6 | Complexity Δ (Sum/Max): 11/6 | Churn Δ: 72 | Churn Cumulative: 4431 | Contributors (this commit): 17 | Commits (past 90d): 45 | Contributors (cumulative): 25 | DMM Complexity: 0.631578947368421\n\nDIFF:\n@@ -19,7 +19,7 @@ from itertools import chain\n from werkzeug.datastructures import ImmutableDict\n from werkzeug.routing import Map, Rule\n from werkzeug.exceptions import HTTPException, InternalServerError, \\\n-     MethodNotAllowed\n+     MethodNotAllowed, BadRequest\n \n from .helpers import _PackageBoundObject, url_for, get_flashed_messages, \\\n     locked_cached_property, _tojson_filter, _endpoint_from_view_func\n@@ -197,7 +197,9 @@ class Flask(_PackageBoundObject):\n         'USE_X_SENDFILE':                       False,\n         'LOGGER_NAME':                          None,\n         'SERVER_NAME':                          None,\n-        'MAX_CONTENT_LENGTH':                   None\n+        'MAX_CONTENT_LENGTH':                   None,\n+        'TRAP_BAD_REQUEST_KEY_ERRORS':          False,\n+        'TRAP_HTTP_EXCEPTIONS':                 False\n     })\n \n     #: The rule object to use for URL rules created.  This is used by\n@@ -983,6 +985,24 @@ class Flask(_PackageBoundObject):\n             return e\n         return handler(e)\n \n+    def trap_http_exception(self, e):\n+        \"\"\"Checks if an HTTP exception should be trapped or not.  By default\n+        this will return `False` for all exceptions except for a bad request\n+        key error if ``TRAP_BAD_REQUEST_KEY_ERRORS`` is set to `True`.  It\n+        also returns `True` if ``TRAP_HTTP_EXCEPTIONS`` is set to `True`.\n+\n+        This is called for all HTTP exceptions raised by a view function.\n+        If it returns `True` for any exception the error handler for this\n+        exception is not called and it shows up as regular exception in the\n+        traceback.  This is helpful for debugging implicitly raised HTTP\n+        exceptions.\n+        \"\"\"\n+        if self.config['TRAP_HTTP_EXCEPTIONS']:\n+            return True\n+        if self.config['TRAP_BAD_REQUEST_KEY_ERRORS']:\n+            return isinstance(e, BadRequest) and isinstance(e, LookupError)\n+        return False\n+\n     def handle_user_exception(self, e):\n         \"\"\"This method is called whenever an exception occurs that should be\n         handled.  A special case are\n@@ -993,14 +1013,16 @@ class Flask(_PackageBoundObject):\n \n         .. versionadded:: 0.7\n         \"\"\"\n-        # ensure not to trash sys.exc_info() at that point in case someone\n-        # wants the traceback preserved in handle_http_exception.\n-        if isinstance(e, HTTPException):\n-            return self.handle_http_exception(e)\n-\n         exc_type, exc_value, tb = sys.exc_info()\n         assert exc_value is e\n \n+        # ensure not to trash sys.exc_info() at that point in case someone\n+        # wants the traceback preserved in handle_http_exception.  Of course\n+        # we cannot prevent users from trashing it themselves in a custom\n+        # trap_http_exception method so that's their fault then.\n+        if isinstance(e, HTTPException) and not self.trap_http_exception(e):\n+            return self.handle_http_exception(e)\n+\n         blueprint_handlers = ()\n         handlers = self.error_handler_spec.get(request.blueprint)\n         if handlers is not None:\n\n@@ -23,7 +23,7 @@ from contextlib import contextmanager\n from functools import update_wrapper\n from datetime import datetime\n from werkzeug import parse_date, parse_options_header\n-from werkzeug.exceptions import NotFound\n+from werkzeug.exceptions import NotFound, BadRequest\n from werkzeug.http import parse_set_header\n from jinja2 import TemplateNotFound\n from cStringIO import StringIO\n@@ -592,6 +592,40 @@ class BasicFunctionalityTestCase(unittest.TestCase):\n         c = app.test_client()\n         assert c.get('/').data == '42'\n \n+    def test_trapping_of_bad_request_key_errors(self):\n+        app = flask.Flask(__name__)\n+        app.testing = True\n+        @app.route('/fail')\n+        def fail():\n+            flask.request.form['missing_key']\n+        c = app.test_client()\n+        assert c.get('/fail').status_code == 400\n+\n+        app.config['TRAP_BAD_REQUEST_KEY_ERRORS'] = True\n+        c = app.test_client()\n+        try:\n+            c.get('/fail')\n+        except KeyError, e:\n+            assert isinstance(e, BadRequest)\n+        else:\n+            self.fail('Expected exception')\n+\n+    def test_trapping_of_all_http_exceptions(self):\n+        app = flask.Flask(__name__)\n+        app.testing = True\n+        app.config['TRAP_HTTP_EXCEPTIONS'] = True\n+        @app.route('/fail')\n+        def fail():\n+            flask.abort(404)\n+\n+        c = app.test_client()\n+        try:\n+            c.get('/fail')\n+        except NotFound, e:\n+            pass\n+        else:\n+            self.fail('Expected exception')\n+\n     def test_teardown_on_pop(self):\n         buffer = []\n         app = flask.Flask(__name__)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#afe5d3cbd44056893aa8c11f4bf17496cee92022", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 2146 | Contributors (this commit): 14 | Commits (past 90d): 27 | Contributors (cumulative): 14 | DMM Complexity: None\n\nDIFF:\n@@ -996,6 +996,8 @@ class Flask(_PackageBoundObject):\n         exception is not called and it shows up as regular exception in the\n         traceback.  This is helpful for debugging implicitly raised HTTP\n         exceptions.\n+\n+        .. versionadded:: 0.8\n         \"\"\"\n         if self.config['TRAP_HTTP_EXCEPTIONS']:\n             return True\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#a69b437af705dc8fa4e1b38b86ddad77d6dedb54", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 5 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 7 | Churn Cumulative: 182 | Contributors (this commit): 4 | Commits (past 90d): 6 | Contributors (cumulative): 4 | DMM Complexity: 0.0\n\nDIFF:\n@@ -96,11 +96,8 @@ class Request(RequestBase):\n         if self.mimetype == 'application/json':\n             request_charset = self.mimetype_params.get('charset')\n             if request_charset is not None:\n-                j = json.loads(self.data, encoding=request_charset )\n-            else:\n-                j = json.loads(self.data)\n-\n-            return j\n+                return json.loads(self.data, encoding=request_charset)\n+            return json.loads(self.data)\n \n \n class Response(ResponseBase):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#2e022cb2727cfa99355261f2c18d1e0fc56e82ee", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 63 | Lines Deleted: 0 | Files Changed: 2 | Hunks: 3 | Methods Changed: 5 | Complexity Δ (Sum/Max): 12/8 | Churn Δ: 63 | Churn Cumulative: 245 | Contributors (this commit): 4 | Commits (past 90d): 8 | Contributors (cumulative): 5 | DMM Complexity: 1.0\n\nDIFF:\n@@ -0,0 +1,52 @@\n+# -*- coding: utf-8 -*-\n+\"\"\"\n+    flask.debughelpers\n+    ~~~~~~~~~~~~~~~~~~\n+\n+    Various helpers to make the development experience better.\n+\n+    :copyright: (c) 2011 by Armin Ronacher.\n+    :license: BSD, see LICENSE for more details.\n+\"\"\"\n+\n+\n+class DebugFilesKeyError(KeyError, AssertionError):\n+    \"\"\"Raised from request.files during debugging.  The idea is that it can\n+    provide a better error message than just a generic KeyError/BadRequest.\n+    \"\"\"\n+\n+    def __init__(self, request, key):\n+        form_matches = request.form.getlist(key)\n+        buf = ['You tried to access the file \"%s\" in the request.files '\n+               'dictionary but it does not exist.  The mimetype for the request '\n+               'is \"%s\" instead of \"multipart/form-data\" which means that no '\n+               'files were transmitted.  To fix this error you most likely have '\n+               'to provide enctype=\"multipart/form-data\" in your form.' %\n+               (key, request.mimetype)]\n+        if form_matches:\n+            buf.append('\\n\\nThe browser instead most likely submitted the '\n+                       'filenames in the form.  This was submitted: %s' %\n+                       ', '.join('\"%s\"' % x for x in form_matches))\n+        self.msg = ''.join(buf)\n+\n+    def __str__(self):\n+        return self.msg\n+\n+\n+def make_enctype_error_multidict(request):\n+    \"\"\"Since Flask 0.8 we're monkeypatching the files object in case a\n+    request is detected that does not use multipart form data but the files\n+    object is accessed.\n+    \"\"\"\n+    oldcls = request.files.__class__\n+    class newcls(oldcls):\n+        def __getitem__(self, key):\n+            try:\n+                return oldcls.__getitem__(self, key)\n+            except KeyError, e:\n+                if key not in request.form:\n+                    raise\n+                raise DebugFilesKeyError(request, key)\n+    newcls.__name__ = oldcls.__name__\n+    newcls.__module__ = oldcls.__module__\n+    request.files.__class__ = newcls\n\n@@ -12,6 +12,7 @@\n from werkzeug.wrappers import Request as RequestBase, Response as ResponseBase\n from werkzeug.utils import cached_property\n \n+from .debughelpers import make_enctype_error_multidict\n from .helpers import json, _assert_have_json\n from .globals import _request_ctx_stack\n \n@@ -99,6 +100,16 @@ class Request(RequestBase):\n                 return json.loads(self.data, encoding=request_charset)\n             return json.loads(self.data)\n \n+    def _load_form_data(self):\n+        RequestBase._load_form_data(self)\n+\n+        # in debug mode we're replacing the files multidict with an ad-hoc\n+        # subclass that raises a different error for key errors.\n+        ctx = _request_ctx_stack.top\n+        if ctx is not None and ctx.app.debug and \\\n+           self.mimetype != 'multipart/form-data':\n+            make_enctype_error_multidict(self)\n+\n \n class Response(ResponseBase):\n     \"\"\"The response object that is used by default in Flask.  Works like the\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#17a836d49c8d496d50b726132e58749cf2741dd6", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 5 | Lines Deleted: 5 | Files Changed: 1 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 10 | Churn Cumulative: 62 | Contributors (this commit): 1 | Commits (past 90d): 2 | Contributors (cumulative): 1 | DMM Complexity: None\n\nDIFF:\n@@ -20,13 +20,13 @@ class DebugFilesKeyError(KeyError, AssertionError):\n         buf = ['You tried to access the file \"%s\" in the request.files '\n                'dictionary but it does not exist.  The mimetype for the request '\n                'is \"%s\" instead of \"multipart/form-data\" which means that no '\n-               'files were transmitted.  To fix this error you most likely have '\n-               'to provide enctype=\"multipart/form-data\" in your form.' %\n+               'file contents were transmitted.  To fix this error you should '\n+               'provide enctype=\"multipart/form-data\" in your form.' %\n                (key, request.mimetype)]\n         if form_matches:\n-            buf.append('\\n\\nThe browser instead most likely submitted the '\n-                       'filenames in the form.  This was submitted: %s' %\n-                       ', '.join('\"%s\"' % x for x in form_matches))\n+            buf.append('\\n\\nThe browser instead some file names.  This was '\n+                       'submitted: %s' % ', '.join('\"%s\"' % x\n+                            for x in form_matches))\n         self.msg = ''.join(buf)\n \n     def __str__(self):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#23c1dd8db2a8dc028516a57b6dca47733bb82173", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 66 | Contributors (this commit): 1 | Commits (past 90d): 3 | Contributors (cumulative): 1 | DMM Complexity: None\n\nDIFF:\n@@ -24,8 +24,8 @@ class DebugFilesKeyError(KeyError, AssertionError):\n                'provide enctype=\"multipart/form-data\" in your form.' %\n                (key, request.mimetype)]\n         if form_matches:\n-            buf.append('\\n\\nThe browser instead some file names.  This was '\n-                       'submitted: %s' % ', '.join('\"%s\"' % x\n+            buf.append('\\n\\nThe browser instead transmitted some file names. '\n+                       'This was submitted: %s' % ', '.join('\"%s\"' % x\n                             for x in form_matches))\n         self.msg = ''.join(buf)\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#3400b78db23fbd305cb11368946be1bf280e2696", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 2 | Churn Cumulative: 195 | Contributors (this commit): 4 | Commits (past 90d): 8 | Contributors (cumulative): 4 | DMM Complexity: None\n\nDIFF:\n@@ -107,7 +107,7 @@ class Request(RequestBase):\n         # subclass that raises a different error for key errors.\n         ctx = _request_ctx_stack.top\n         if ctx is not None and ctx.app.debug and \\\n-           self.mimetype != 'multipart/form-data':\n+           self.mimetype != 'multipart/form-data' and not self.files:\n             make_enctype_error_multidict(self)\n \n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#f3db68c8cee4f48fbc078e1f5a73bb025b425f91", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 21 | Lines Deleted: 1 | Files Changed: 2 | Hunks: 2 | Methods Changed: 3 | Complexity Δ (Sum/Max): 3/3 | Churn Δ: 22 | Churn Cumulative: 2375 | Contributors (this commit): 11 | Commits (past 90d): 24 | Contributors (cumulative): 12 | DMM Complexity: 1.0\n\nDIFF:\n@@ -27,7 +27,7 @@ class DebugFilesKeyError(KeyError, AssertionError):\n             buf.append('\\n\\nThe browser instead transmitted some file names. '\n                        'This was submitted: %s' % ', '.join('\"%s\"' % x\n                             for x in form_matches))\n-        self.msg = ''.join(buf)\n+        self.msg = ''.join(buf).encode('utf-8')\n \n     def __str__(self):\n         return self.msg\n\n@@ -626,6 +626,26 @@ class BasicFunctionalityTestCase(unittest.TestCase):\n         else:\n             self.fail('Expected exception')\n \n+    def test_enctype_debug_helper(self):\n+        from flask.debughelpers import DebugFilesKeyError\n+        app = flask.Flask(__name__)\n+        app.debug = True\n+        @app.route('/fail', methods=['POST'])\n+        def index():\n+            return flask.request.files['foo'].filename\n+\n+        # with statement is important because we leave an exception on the\n+        # stack otherwise and we want to ensure that this is not the case\n+        # to not negatively affect other tests.\n+        with app.test_client() as c:\n+            try:\n+                c.post('/fail', data={'foo': 'index.txt'})\n+            except DebugFilesKeyError, e:\n+                assert 'no file contents were transmitted' in str(e)\n+                assert 'This was submitted: \"index.txt\"' in str(e)\n+            else:\n+                self.fail('Expected exception')\n+\n     def test_teardown_on_pop(self):\n         buffer = []\n         app = flask.Flask(__name__)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#ac99cd33a827f0694d718dae5f2699430263ed7e", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 3 | Lines Deleted: 3 | Files Changed: 2 | Hunks: 3 | Methods Changed: 3 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 6 | Churn Cumulative: 269 | Contributors (this commit): 4 | Commits (past 90d): 14 | Contributors (cumulative): 5 | DMM Complexity: None\n\nDIFF:\n@@ -33,7 +33,7 @@ class DebugFilesKeyError(KeyError, AssertionError):\n         return self.msg\n \n \n-def make_enctype_error_multidict(request):\n+def attach_enctype_error_multidict(request):\n     \"\"\"Since Flask 0.8 we're monkeypatching the files object in case a\n     request is detected that does not use multipart form data but the files\n     object is accessed.\n\n@@ -12,7 +12,7 @@\n from werkzeug.wrappers import Request as RequestBase, Response as ResponseBase\n from werkzeug.utils import cached_property\n \n-from .debughelpers import make_enctype_error_multidict\n+from .debughelpers import attach_enctype_error_multidict\n from .helpers import json, _assert_have_json\n from .globals import _request_ctx_stack\n \n@@ -108,7 +108,7 @@ class Request(RequestBase):\n         ctx = _request_ctx_stack.top\n         if ctx is not None and ctx.app.debug and \\\n            self.mimetype != 'multipart/form-data' and not self.files:\n-            make_enctype_error_multidict(self)\n+            attach_enctype_error_multidict(self)\n \n \n class Response(ResponseBase):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#5500986971b28f270a27db633acf19984eee609e", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 57 | Lines Deleted: 0 | Files Changed: 2 | Hunks: 17 | Methods Changed: 8 | Complexity Δ (Sum/Max): 9/5 | Churn Δ: 57 | Churn Cumulative: 4510 | Contributors (this commit): 17 | Commits (past 90d): 49 | Contributors (cumulative): 25 | DMM Complexity: 1.0\n\nDIFF:\n@@ -15,6 +15,7 @@ import sys\n from threading import Lock\n from datetime import timedelta\n from itertools import chain\n+from functools import update_wrapper\n \n from werkzeug.datastructures import ImmutableDict\n from werkzeug.routing import Map, Rule\n@@ -38,6 +39,23 @@ from .signals import request_started, request_finished, got_request_exception, \\\n _logger_lock = Lock()\n \n \n+def setupmethod(f):\n+    \"\"\"Wraps a method so that it performs a check in debug mode if the\n+    first request was already handled.\n+    \"\"\"\n+    def wrapper_func(self, *args, **kwargs):\n+        if self.debug and self._got_first_request:\n+            raise AssertionError('A setup function was called after the '\n+                'first request was handled.  This usually indicates a bug '\n+                'in the application where a module was not imported '\n+                'and decorators or other functionality was called too late.\\n'\n+                'To fix this make sure to import all your view modules, '\n+                'database models and everything related at a central place '\n+                'before the application starts serving requests.')\n+        return f(self, *args, **kwargs)\n+    return update_wrapper(wrapper_func, f)\n+\n+\n class Flask(_PackageBoundObject):\n     \"\"\"The flask object implements a WSGI application and acts as the central\n     object.  It is passed the name of the module or package of the\n@@ -365,6 +383,10 @@ class Flask(_PackageBoundObject):\n         #:    app.url_map.converters['list'] = ListConverter\n         self.url_map = Map()\n \n+        # tracks internally if the application already handled at least one\n+        # request.\n+        self._got_first_request = False\n+\n         # register the static folder for the application.  Do that even\n         # if the folder does not exist.  First of all it might be created\n         # while the server is running (usually happens during development)\n@@ -642,6 +664,7 @@ class Flask(_PackageBoundObject):\n \n         self.register_blueprint(module, **options)\n \n+    @setupmethod\n     def register_blueprint(self, blueprint, **options):\n         \"\"\"Registers a blueprint on the application.\n \n@@ -659,6 +682,7 @@ class Flask(_PackageBoundObject):\n             first_registration = True\n         blueprint.register(self, options, first_registration)\n \n+    @setupmethod\n     def add_url_rule(self, rule, endpoint=None, view_func=None, **options):\n         \"\"\"Connects a URL rule.  Works exactly like the :meth:`route`\n         decorator.  If a view_func is provided it will be registered with the\n@@ -812,6 +836,7 @@ class Flask(_PackageBoundObject):\n             return f\n         return decorator\n \n+    @setupmethod\n     def endpoint(self, endpoint):\n         \"\"\"A decorator to register a function as an endpoint.\n         Example::\n@@ -827,6 +852,7 @@ class Flask(_PackageBoundObject):\n             return f\n         return decorator\n \n+    @setupmethod\n     def errorhandler(self, code_or_exception):\n         \"\"\"A decorator that is used to register a function give a given\n         error code.  Example::\n@@ -877,6 +903,7 @@ class Flask(_PackageBoundObject):\n         \"\"\"\n         self._register_error_handler(None, code_or_exception, f)\n \n+    @setupmethod\n     def _register_error_handler(self, key, code_or_exception, f):\n         if isinstance(code_or_exception, HTTPException):\n             code_or_exception = code_or_exception.code\n@@ -889,6 +916,7 @@ class Flask(_PackageBoundObject):\n             self.error_handler_spec.setdefault(key, {}).setdefault(None, []) \\\n                 .append((code_or_exception, f))\n \n+    @setupmethod\n     def template_filter(self, name=None):\n         \"\"\"A decorator that is used to register custom template filter.\n         You can specify a name for the filter, otherwise the function\n@@ -906,11 +934,13 @@ class Flask(_PackageBoundObject):\n             return f\n         return decorator\n \n+    @setupmethod\n     def before_request(self, f):\n         \"\"\"Registers a function to run before each request.\"\"\"\n         self.before_request_funcs.setdefault(None, []).append(f)\n         return f\n \n+    @setupmethod\n     def after_request(self, f):\n         \"\"\"Register a function to be run after each request.  Your function\n         must take one parameter, a :attr:`response_class` object and return\n@@ -922,6 +952,7 @@ class Flask(_PackageBoundObject):\n         self.after_request_funcs.setdefault(None, []).append(f)\n         return f\n \n+    @setupmethod\n     def teardown_request(self, f):\n         \"\"\"Register a function to be run at the end of each request,\n         regardless of whether there was an exception or not.  These functions\n@@ -948,11 +979,13 @@ class Flask(_PackageBoundObject):\n         self.teardown_request_funcs.setdefault(None, []).append(f)\n         return f\n \n+    @setupmethod\n     def context_processor(self, f):\n         \"\"\"Registers a template context processor function.\"\"\"\n         self.template_context_processors[None].append(f)\n         return f\n \n+    @setupmethod\n     def url_value_preprocessor(self, f):\n         \"\"\"Registers a function as URL value preprocessor for all view\n         functions of the application.  It's called before the view functions\n@@ -961,6 +994,7 @@ class Flask(_PackageBoundObject):\n         self.url_value_preprocessors.setdefault(None, []).append(f)\n         return f\n \n+    @setupmethod\n     def url_defaults(self, f):\n         \"\"\"Callback function for URL defaults for all view functions of the\n         application.  It's called with the endpoint and values and should\n@@ -1097,6 +1131,7 @@ class Flask(_PackageBoundObject):\n \n         .. versionadded:: 0.7\n         \"\"\"\n+        self._got_first_request = True\n         try:\n             request_started.send(self)\n             rv = self.preprocess_request()\n\n@@ -944,6 +944,28 @@ class BasicFunctionalityTestCase(unittest.TestCase):\n         self.assertEqual(c.get('/de/about').data, '/foo')\n         self.assertEqual(c.get('/foo').data, '/en/about')\n \n+    def test_debug_mode_complains_after_first_request(self):\n+        app = flask.Flask(__name__)\n+        app.debug = True\n+        @app.route('/')\n+        def index():\n+            return 'Awesome'\n+        self.assertEqual(app.test_client().get('/').data, 'Awesome')\n+        try:\n+            @app.route('/foo')\n+            def broken():\n+                return 'Meh'\n+        except AssertionError, e:\n+            self.assert_('A setup function was called' in str(e))\n+        else:\n+            self.fail('Expected exception')\n+\n+        app.debug = False\n+        @app.route('/foo')\n+        def working():\n+            return 'Meh'\n+        self.assertEqual(app.test_client().get('/foo').data, 'Meh')\n+\n \n class JSONTestCase(unittest.TestCase):\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
