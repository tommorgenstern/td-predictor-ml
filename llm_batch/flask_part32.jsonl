{"custom_id": "flask#3f82d1b68ea6f5bf2970c2df8ff5cf991439a9bf", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 43 | Lines Deleted: 58 | Files Changed: 2 | Hunks: 15 | Methods Changed: 7 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 101 | Churn Cumulative: 643 | Contributors (this commit): 9 | Commits (past 90d): 5 | Contributors (cumulative): 10 | DMM Complexity: 1.0\n\nDIFF:\n@@ -10,13 +10,14 @@\n     :license: BSD, see LICENSE for more details.\n \"\"\"\n \n-import cPickle as pickle\n from datetime import datetime\n-from werkzeug.contrib.securecookie import SecureCookie\n from werkzeug.http import http_date, parse_date\n-from .helpers import json, _assert_have_json\n+from werkzeug.datastructures import CallbackDict\n+from .helpers import json\n from . import Markup\n \n+from itsdangerous import URLSafeTimedSerializer, BadSignature\n+\n \n class SessionMixin(object):\n     \"\"\"Expands a basic dictionary with an accessors that are expected\n@@ -51,8 +52,6 @@ class TaggedJSONSerializer(object):\n     \"\"\"\n \n     def dumps(self, value):\n-        if __debug__:\n-            _assert_have_json()\n         def _tag(value):\n             if isinstance(value, tuple):\n                 return {'##t': [_tag(x) for x in value]}\n@@ -68,8 +67,6 @@ class TaggedJSONSerializer(object):\n         return json.dumps(_tag(value), separators=(',', ':'))\n \n     def loads(self, value):\n-        if __debug__:\n-            _assert_have_json()\n         def object_hook(obj):\n             if len(obj) != 1:\n                 return obj\n@@ -87,32 +84,14 @@ class TaggedJSONSerializer(object):\n session_json_serializer = TaggedJSONSerializer()\n \n \n-class SecureCookieSession(SecureCookie, SessionMixin):\n-    \"\"\"Expands the session with support for switching between permanent\n-    and non-permanent sessions and changes the default pickle based\n-    serialization format to a tagged json one.\n-    \"\"\"\n-    serialization_method = session_json_serializer\n+class SecureCookieSession(CallbackDict, SessionMixin):\n+    \"\"\"Baseclass for sessions based on signed cookies.\"\"\"\n \n-\n-class _UpgradeSerializer(object):\n-    def dumps(self, value):\n-        return session_json_serializer.dumps(value)\n-    def loads(self, value):\n-        try:\n-            return session_json_serializer.loads(value)\n-        except Exception:\n-            return pickle.loads(value)\n-\n-\n-class UpgradeSecureCookieSession(SecureCookieSession):\n-    \"\"\"This cookie sesion implementation tries json first but will also\n-    support pickle based session.  This exists mainly to upgrade existing\n-    pickle based users transparently to json.\n-\n-    .. versionadded:: 0.10\n-    \"\"\"\n-    serialization_method = _UpgradeSerializer()\n+    def __init__(self, initial=None):\n+        def on_update(self):\n+            self.modified = True\n+        CallbackDict.__init__(self, initial, on_update)\n+        self.modified = False\n \n \n class NullSession(SecureCookieSession):\n@@ -246,38 +225,43 @@ class SessionInterface(object):\n \n \n class SecureCookieSessionInterface(SessionInterface):\n-    \"\"\"The cookie session interface that uses the Werkzeug securecookie\n-    as client side session backend.\n-    \"\"\"\n+    salt = 'cookie-session'\n     session_class = SecureCookieSession\n+    serializer = session_json_serializer\n+\n+    def get_serializer(self, app):\n+        if not app.secret_key:\n+            return None\n+        return URLSafeTimedSerializer(app.secret_key,\n+                                      salt=self.salt,\n+                                      serializer=self.serializer)\n \n     def open_session(self, app, request):\n-        key = app.secret_key\n-        if key is not None:\n-            return self.session_class.load_cookie(request,\n-                                                  app.session_cookie_name,\n-                                                  secret_key=key)\n+        s = self.get_serializer(app)\n+        if s is None:\n+            return None\n+        val = request.cookies.get(app.session_cookie_name)\n+        if not val:\n+            return self.session_class()\n+        max_age = app.permanent_session_lifetime.total_seconds()\n+        try:\n+            data = s.loads(val, max_age=max_age)\n+            return self.session_class(data)\n+        except BadSignature:\n+            return self.session_class()\n \n     def save_session(self, app, session, response):\n-        expires = self.get_expiration_time(app, session)\n         domain = self.get_cookie_domain(app)\n         path = self.get_cookie_path(app)\n         httponly = self.get_cookie_httponly(app)\n         secure = self.get_cookie_secure(app)\n-        if session.modified and not session:\n-            response.delete_cookie(app.session_cookie_name, path=path,\n-                                   domain=domain)\n-        else:\n-            session.save_cookie(response, app.session_cookie_name, path=path,\n+        if not session:\n+            if session.modified:\n+                response.delete_cookie(app.session_cookie_name,\n+                                       domain=domain, path=path)\n+            return\n+        expires = self.get_expiration_time(app, session)\n+        val = self.get_serializer(app).dumps(dict(session))\n+        response.set_cookie(app.session_cookie_name, val,\n                             expires=expires, httponly=httponly,\n-                                secure=secure, domain=domain)\n-\n-\n-class UpgradeSecureCookieSessionInterface(SecureCookieSessionInterface):\n-    \"\"\"This session interface works exactly like the regular one but uses\n-    the :class:`UpgradeSecureCookieSession` classes to upgrade from pickle\n-    sessions to JSON sessions.\n-\n-    .. versionadded:: 0.10\n-    \"\"\"\n-    session_class = UpgradeSecureCookieSession\n+                            domain=domain, path=path, secure=secure)\n\n@@ -91,7 +91,8 @@ setup(\n     platforms='any',\n     install_requires=[\n         'Werkzeug>=0.7',\n-        'Jinja2>=2.4'\n+        'Jinja2>=2.4',\n+        'itsdangerous>=0.16'\n     ],\n     classifiers=[\n         'Development Status :: 4 - Beta',\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#c3d38a21c664440fb8284aaaf8fbcce4a1c0849f", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 7 | Lines Deleted: 32 | Files Changed: 3 | Hunks: 10 | Methods Changed: 4 | Complexity Δ (Sum/Max): -5/0 | Churn Δ: 39 | Churn Cumulative: 2022 | Contributors (this commit): 23 | Commits (past 90d): 15 | Contributors (cumulative): 29 | DMM Complexity: 0.0\n\nDIFF:\n@@ -20,7 +20,7 @@ from jinja2 import Markup, escape\n \n from .app import Flask, Request, Response\n from .config import Config\n-from .helpers import url_for, jsonify, json_available, flash, \\\n+from .helpers import url_for, jsonify, flash, \\\n     send_file, send_from_directory, get_flashed_messages, \\\n     get_template_attribute, make_response, safe_join, \\\n     stream_with_context\n@@ -37,8 +37,8 @@ from .signals import signals_available, template_rendered, request_started, \\\n      request_finished, got_request_exception, request_tearing_down\n \n # only import json if it's available\n-if json_available:\n from .helpers import json\n \n # backwards compat, goes away in 1.0\n from .sessions import SecureCookieSession as Session\n+json_available = True\n\n@@ -23,21 +23,9 @@ from werkzeug.routing import BuildError\n from werkzeug.urls import url_quote\n from functools import update_wrapper\n \n-# try to load the best simplejson implementation available.  If JSON\n-# is not installed, we add a failing class.\n-json_available = True\n-json = None\n-try:\n-    import simplejson as json\n-except ImportError:\n-    try:\n-        import json\n-    except ImportError:\n-        try:\n-            # Google Appengine offers simplejson via django\n-            from django.utils import simplejson as json\n-        except ImportError:\n-            json_available = False\n+# Use the same json implementation as itsdangerous on which we\n+# depend anyways.\n+from itsdangerous import simplejson as json\n \n \n from werkzeug.datastructures import Headers\n@@ -55,19 +43,10 @@ from .globals import session, _request_ctx_stack, _app_ctx_stack, \\\n      current_app, request\n \n \n-def _assert_have_json():\n-    \"\"\"Helper function that fails if JSON is unavailable.\"\"\"\n-    if not json_available:\n-        raise RuntimeError('simplejson not installed')\n-\n-\n # figure out if simplejson escapes slashes.  This behavior was changed\n # from one version to another without reason.\n-if not json_available or '\\\\/' not in json.dumps('/'):\n-\n+if '\\\\/' not in json.dumps('/'):\n     def _tojson_filter(*args, **kwargs):\n-        if __debug__:\n-            _assert_have_json()\n         return json.dumps(*args, **kwargs).replace('/', '\\\\/')\n else:\n     _tojson_filter = json.dumps\n@@ -192,8 +171,6 @@ def jsonify(*args, **kwargs):\n \n     .. versionadded:: 0.2\n     \"\"\"\n-    if __debug__:\n-        _assert_have_json()\n     return current_app.response_class(json.dumps(dict(*args, **kwargs),\n         indent=None if request.is_xhr else 2), mimetype='application/json')\n \n\n@@ -14,7 +14,7 @@ from werkzeug.utils import cached_property\n \n from .exceptions import JSONBadRequest\n from .debughelpers import attach_enctype_error_multidict\n-from .helpers import json, _assert_have_json\n+from .helpers import json\n from .globals import _request_ctx_stack\n \n \n@@ -95,8 +95,6 @@ class Request(RequestBase):\n \n         This requires Python 2.6 or an installed version of simplejson.\n         \"\"\"\n-        if __debug__:\n-            _assert_have_json()\n         if self.mimetype == 'application/json':\n             request_charset = self.mimetype_params.get('charset')\n             try:\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#fe85970665ea3a38f9c6a8ef4756ff3a913850b6", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 41 | Lines Deleted: 16 | Files Changed: 2 | Hunks: 18 | Methods Changed: 8 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 57 | Churn Cumulative: 700 | Contributors (this commit): 9 | Commits (past 90d): 7 | Contributors (cumulative): 10 | DMM Complexity: 1.0\n\nDIFF:\n@@ -10,6 +10,7 @@\n     :license: BSD, see LICENSE for more details.\n \"\"\"\n \n+import hashlib\n from datetime import datetime\n from werkzeug.http import http_date, parse_date\n from werkzeug.datastructures import CallbackDict\n@@ -54,13 +55,13 @@ class TaggedJSONSerializer(object):\n     def dumps(self, value):\n         def _tag(value):\n             if isinstance(value, tuple):\n-                return {'##t': [_tag(x) for x in value]}\n+                return {' t': [_tag(x) for x in value]}\n             elif callable(getattr(value, '__html__', None)):\n-                return {'##m': unicode(value.__html__())}\n+                return {' m': unicode(value.__html__())}\n             elif isinstance(value, list):\n                 return [_tag(x) for x in value]\n             elif isinstance(value, datetime):\n-                return {'##d': http_date(value)}\n+                return {' d': http_date(value)}\n             elif isinstance(value, dict):\n                 return dict((k, _tag(v)) for k, v in value.iteritems())\n             return value\n@@ -71,11 +72,11 @@ class TaggedJSONSerializer(object):\n             if len(obj) != 1:\n                 return obj\n             the_key, the_value = obj.iteritems().next()\n-            if the_key == '##t':\n+            if the_key == ' t':\n                 return tuple(the_value)\n-            elif the_key == '##m':\n+            elif the_key == ' m':\n                 return Markup(the_value)\n-            elif the_key == '##d':\n+            elif the_key == ' d':\n                 return parse_date(the_value)\n             return obj\n         return json.loads(value, object_hook=object_hook)\n@@ -145,6 +146,13 @@ class SessionInterface(object):\n     #: this type.\n     null_session_class = NullSession\n \n+    #: A flag that indicates if the session interface is pickle based.\n+    #: This can be used by flask extensions to make a decision in regards\n+    #: to how to deal with the session object.\n+    #:\n+    #: .. versionadded:: 0.10\n+    pickle_based = False\n+\n     def make_null_session(self, app):\n         \"\"\"Creates a null session which acts as a replacement object if the\n         real session support could not be loaded due to a configuration\n@@ -225,19 +233,36 @@ class SessionInterface(object):\n \n \n class SecureCookieSessionInterface(SessionInterface):\n+    \"\"\"The default session interface that stores sessions in signed cookies\n+    through the :mod:`itsdangerous` module.\n+    \"\"\"\n+    #: the salt that should be applied on top of the secret key for the\n+    #: signing of cookie based sessions.\n     salt = 'cookie-session'\n-    session_class = SecureCookieSession\n+    #: the hash function to use for the signature.  The default is sha1\n+    digest_method = staticmethod(hashlib.sha1)\n+    #: the name of the itsdangerous supported key derivation.  The default\n+    #: is hmac.\n+    key_derivation = 'hmac'\n+    #: A python serializer for the payload.  The default is a compact\n+    #: JSON derived serializer with support for some extra Python types\n+    #: such as datetime objects or tuples.\n     serializer = session_json_serializer\n+    session_class = SecureCookieSession\n \n-    def get_serializer(self, app):\n+    def get_signing_serializer(self, app):\n         if not app.secret_key:\n             return None\n-        return URLSafeTimedSerializer(app.secret_key,\n-                                      salt=self.salt,\n-                                      serializer=self.serializer)\n+        signer_kwargs = dict(\n+            key_derivation=self.key_derivation,\n+            digest_method=self.digest_method\n+        )\n+        return URLSafeTimedSerializer(app.secret_key, salt=self.salt,\n+                                      serializer=self.serializer,\n+                                      signer_kwargs=signer_kwargs)\n \n     def open_session(self, app, request):\n-        s = self.get_serializer(app)\n+        s = self.get_signing_serializer(app)\n         if s is None:\n             return None\n         val = request.cookies.get(app.session_cookie_name)\n@@ -253,15 +278,15 @@ class SecureCookieSessionInterface(SessionInterface):\n     def save_session(self, app, session, response):\n         domain = self.get_cookie_domain(app)\n         path = self.get_cookie_path(app)\n-        httponly = self.get_cookie_httponly(app)\n-        secure = self.get_cookie_secure(app)\n         if not session:\n             if session.modified:\n                 response.delete_cookie(app.session_cookie_name,\n                                        domain=domain, path=path)\n             return\n+        httponly = self.get_cookie_httponly(app)\n+        secure = self.get_cookie_secure(app)\n         expires = self.get_expiration_time(app, session)\n-        val = self.get_serializer(app).dumps(dict(session))\n+        val = self.get_signing_serializer(app).dumps(dict(session))\n         response.set_cookie(app.session_cookie_name, val,\n                             expires=expires, httponly=httponly,\n                             domain=domain, path=path, secure=secure)\n\n@@ -92,7 +92,7 @@ setup(\n     install_requires=[\n         'Werkzeug>=0.7',\n         'Jinja2>=2.4',\n-        'itsdangerous>=0.16'\n+        'itsdangerous>=0.17'\n     ],\n     classifiers=[\n         'Development Status :: 4 - Beta',\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#8d330a368a7f0aa6ba8508cb2b4b64f6415a0c7b", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 2 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 257 | Contributors (this commit): 4 | Commits (past 90d): 1 | Contributors (cumulative): 4 | DMM Complexity: None\n\nDIFF:\n@@ -44,7 +44,7 @@ class ExtensionImporter(object):\n     def install(self):\n         sys.meta_path[:] = [x for x in sys.meta_path if self != x] + [self]\n \n-    def find_module(self, fullname, path=None):\n+    def find_module(self, fullname):\n         if fullname.startswith(self.prefix):\n             return self\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#48f7cdd01699fdc4048b18d827fccfbf9f266c9f", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 15 | Lines Deleted: 15 | Files Changed: 4 | Hunks: 12 | Methods Changed: 11 | Complexity Δ (Sum/Max): 5/4 | Churn Δ: 30 | Churn Cumulative: 3510 | Contributors (this commit): 22 | Commits (past 90d): 6 | Contributors (cumulative): 30 | DMM Complexity: None\n\nDIFF:\n@@ -541,8 +541,8 @@ class Flask(_PackageBoundObject):\n         Here some examples::\n \n             app.logger.debug('A value for debugging')\n-            app.logger.warning('A warning ocurred (%d apples)', 42)\n-            app.logger.error('An error occoured')\n+            app.logger.warning('A warning occurred (%d apples)', 42)\n+            app.logger.error('An error occurred')\n \n         .. versionadded:: 0.3\n         \"\"\"\n@@ -846,7 +846,7 @@ class Flask(_PackageBoundObject):\n         first_registration = False\n         if blueprint.name in self.blueprints:\n             assert self.blueprints[blueprint.name] is blueprint, \\\n-                'A blueprint\\'s name collision ocurred between %r and ' \\\n+                'A blueprint\\'s name collision occurred between %r and ' \\\n                 '%r.  Both share the same name \"%s\".  Blueprints that ' \\\n                 'are created on the fly need unique names.' % \\\n                 (blueprint, self.blueprints[blueprint.name], blueprint.name)\n@@ -1108,7 +1108,7 @@ class Flask(_PackageBoundObject):\n         a new response object or the same (see :meth:`process_response`).\n \n         As of Flask 0.7 this function might not be executed at the end of the\n-        request in case an unhandled exception ocurred.\n+        request in case an unhandled exception occurred.\n         \"\"\"\n         self.after_request_funcs.setdefault(None, []).append(f)\n         return f\n@@ -1132,10 +1132,10 @@ class Flask(_PackageBoundObject):\n         stack of active contexts.  This becomes relevant if you are using\n         such constructs in tests.\n \n-        Generally teardown functions must take every necesary step to avoid\n+        Generally teardown functions must take every necessary step to avoid\n         that they will fail.  If they do execute code that might fail they\n         will have to surround the execution of these code by try/except\n-        statements and log ocurring errors.\n+        statements and log occurring errors.\n \n         When a teardown function was called because of a exception it will\n         be passed an error object.\n@@ -1265,7 +1265,7 @@ class Flask(_PackageBoundObject):\n \n     def handle_exception(self, e):\n         \"\"\"Default exception handling that kicks in when an exception\n-        occours that is not caught.  In debug mode the exception will\n+        occurs that is not caught.  In debug mode the exception will\n         be re-raised immediately, otherwise it is logged and the handler\n         for a 500 internal server error is used.  If no such handler\n         exists, a default 500 internal server error message is displayed.\n@@ -1522,7 +1522,7 @@ class Flask(_PackageBoundObject):\n         request handling is stopped.\n \n         This also triggers the :meth:`url_value_processor` functions before\n-        the actualy :meth:`before_request` functions are called.\n+        the actually :meth:`before_request` functions are called.\n         \"\"\"\n         bp = _request_ctx_stack.top.request.blueprint\n \n@@ -1675,7 +1675,7 @@ class Flask(_PackageBoundObject):\n            The behavior of the before and after request callbacks was changed\n            under error conditions and a new callback was added that will\n            always execute at the end of the request, independent on if an\n-           error ocurred or not.  See :ref:`callbacks-and-errors`.\n+           error occurred or not.  See :ref:`callbacks-and-errors`.\n \n         :param environ: a WSGI environment\n         :param start_response: a callable accepting a status code,\n\n@@ -110,7 +110,7 @@ class ExtensionImporter(object):\n         if module_name == important_module:\n             return True\n \n-        # Some python verisons will will clean up modules so early that the\n+        # Some python versions will will clean up modules so early that the\n         # module name at that point is no longer set.  Try guessing from\n         # the filename then.\n         filename = os.path.abspath(tb.tb_frame.f_code.co_filename)\n\n@@ -18,14 +18,14 @@ from flask.testsuite import FlaskTestCase\n \n class FlaskSubclassingTestCase(FlaskTestCase):\n \n-    def test_supressed_exception_logging(self):\n-        class SupressedFlask(flask.Flask):\n+    def test_suppressed_exception_logging(self):\n+        class SuppressedFlask(flask.Flask):\n             def log_exception(self, exc_info):\n                 pass\n \n         out = StringIO()\n-        app = SupressedFlask(__name__)\n-        app.logger_name = 'flask_tests/test_supressed_exception_logging'\n+        app = SuppressedFlask(__name__)\n+        app.logger_name = 'flask_tests/test_suppressed_exception_logging'\n         app.logger.addHandler(StreamHandler(out))\n \n         @app.route('/')\n\n@@ -108,7 +108,7 @@ class Request(RequestBase):\n \n     def on_json_loading_failed(self, e):\n         \"\"\"Called if decoding of the JSON data failed.  The return value of\n-        this method is used by :attr:`json` when an error ocurred.  The default\n+        this method is used by :attr:`json` when an error occurred.  The default\n         implementation raises a :class:`JSONBadRequest`, which is a subclass of\n         :class:`~werkzeug.exceptions.BadRequest` which sets the\n         ``Content-Type`` to ``application/json`` and provides a JSON-formatted\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#e93447f25e5f0cf0c10c32daa10b02e23ba2bc1a", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 3017 | Contributors (this commit): 19 | Commits (past 90d): 3 | Contributors (cumulative): 19 | DMM Complexity: None\n\nDIFF:\n@@ -1522,7 +1522,7 @@ class Flask(_PackageBoundObject):\n         request handling is stopped.\n \n         This also triggers the :meth:`url_value_processor` functions before\n-        the actually :meth:`before_request` functions are called.\n+        the actual :meth:`before_request` functions are called.\n         \"\"\"\n         bp = _request_ctx_stack.top.request.blueprint\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#9ecbd20286aebcd2040cf7463d5288726787c1f3", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 304 | Contributors (this commit): 5 | Commits (past 90d): 1 | Contributors (cumulative): 5 | DMM Complexity: None\n\nDIFF:\n@@ -129,7 +129,7 @@ def render_template_string(source, **context):\n     \"\"\"Renders a template from the given template source string\n     with the given context.\n \n-    :param template_name: the sourcecode of the template to be\n+    :param source: the sourcecode of the template to be\n                    rendered\n     :param context: the variables that should be available in the\n                     context of the template.\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#7233a3e0a223e8d426ff937f5c03d88636b0ade4", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 3019 | Contributors (this commit): 20 | Commits (past 90d): 4 | Contributors (cumulative): 20 | DMM Complexity: None\n\nDIFF:\n@@ -1265,7 +1265,7 @@ class Flask(_PackageBoundObject):\n \n     def handle_exception(self, e):\n         \"\"\"Default exception handling that kicks in when an exception\n-        occours that is not caught.  In debug mode the exception will\n+        occurs that is not caught.  In debug mode the exception will\n         be re-raised immediately, otherwise it is logged and the handler\n         for a 500 internal server error is used.  If no such handler\n         exists, a default 500 internal server error message is displayed.\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#261c4a6aee88361e0de5d86061d873bbad2cb3a9", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 3 | Files Changed: 1 | Hunks: 2 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 5 | Churn Cumulative: 471 | Contributors (this commit): 1 | Commits (past 90d): 4 | Contributors (cumulative): 1 | DMM Complexity: None\n\nDIFF:\n@@ -3,10 +3,9 @@\n     flask.sessions\n     ~~~~~~~~~~~~~~\n \n-    Implements cookie based sessions based on Werkzeug's secure cookie\n-    system.\n+    Implements cookie based sessions based on itsdangerous.\n \n-    :copyright: (c) 2011 by Armin Ronacher.\n+    :copyright: (c) 2012 by Armin Ronacher.\n     :license: BSD, see LICENSE for more details.\n \"\"\"\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#4f1cb4212376acbbe7ab14fb8caa8a5025b4659e", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 44 | Lines Deleted: 1 | Files Changed: 2 | Hunks: 5 | Methods Changed: 8 | Complexity Δ (Sum/Max): 9/7 | Churn Δ: 45 | Churn Cumulative: 493 | Contributors (this commit): 5 | Commits (past 90d): 2 | Contributors (cumulative): 8 | DMM Complexity: 0.6451612903225806\n\nDIFF:\n@@ -15,6 +15,7 @@ from __future__ import with_statement\n from contextlib import contextmanager\n from werkzeug.test import Client, EnvironBuilder\n from flask import _request_ctx_stack\n+from urlparse import urlparse\n \n \n def make_test_environ_builder(app, path='/', base_url=None, *args, **kwargs):\n@@ -22,9 +23,12 @@ def make_test_environ_builder(app, path='/', base_url=None, *args, **kwargs):\n     http_host = app.config.get('SERVER_NAME')\n     app_root = app.config.get('APPLICATION_ROOT')\n     if base_url is None:\n-        base_url = 'http://%s/' % (http_host or 'localhost')\n+        url = urlparse(path)\n+        base_url = 'http://%s/' % (url.netloc or http_host or 'localhost')\n         if app_root:\n             base_url += app_root.lstrip('/')\n+        if url.netloc:\n+            path = url.path\n     return EnvironBuilder(path, base_url, *args, **kwargs)\n \n \n\n@@ -198,7 +198,46 @@ class TestToolsTestCase(FlaskTestCase):\n         self.assert_equal(called, [None, None])\n \n \n+class SubdomainTestCase(FlaskTestCase):\n+\n+    def setUp(self):\n+        self.app = flask.Flask(__name__)\n+        self.app.config['SERVER_NAME'] = 'example.com'\n+        self.client = self.app.test_client()\n+\n+        self._ctx = self.app.test_request_context()\n+        self._ctx.push()\n+\n+    def tearDown(self):\n+        if self._ctx is not None:\n+            self._ctx.pop()\n+\n+    def test_subdomain(self):\n+        @self.app.route('/', subdomain='<company_id>')\n+        def view(company_id):\n+            return company_id\n+\n+        url = flask.url_for('view', company_id='xxx')\n+        response = self.client.get(url)\n+\n+        self.assertEquals(200, response.status_code)\n+        self.assertEquals('xxx', response.data)\n+\n+\n+    def test_nosubdomain(self):\n+        @self.app.route('/<company_id>')\n+        def view(company_id):\n+            return company_id\n+\n+        url = flask.url_for('view', company_id='xxx')\n+        response = self.client.get(url)\n+\n+        self.assertEquals(200, response.status_code)\n+        self.assertEquals('xxx', response.data)\n+\n+\n def suite():\n     suite = unittest.TestSuite()\n     suite.addTest(unittest.makeSuite(TestToolsTestCase))\n+    suite.addTest(unittest.makeSuite(SubdomainTestCase))\n     return suite\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#f034d8d3451f590fca1badeac5da0230bed9b148", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 254 | Lines Deleted: 3 | Files Changed: 4 | Hunks: 6 | Methods Changed: 50 | Complexity Δ (Sum/Max): 52/23 | Churn Δ: 257 | Churn Cumulative: 4674 | Contributors (this commit): 24 | Commits (past 90d): 8 | Contributors (cumulative): 31 | DMM Complexity: 1.0\n\nDIFF:\n@@ -1086,6 +1086,44 @@ class Flask(_PackageBoundObject):\n         \"\"\"\n         self.jinja_env.filters[name or f.__name__] = f\n \n+    @setupmethod\n+    def template_test(self, name=None):\n+        \"\"\"A decorator that is used to register custom template test.\n+        You can specify a name for the test, otherwise the function\n+        name will be used. Example::\n+\n+          @app.template_test()\n+          def is_prime(n):\n+              if n == 2:\n+                  return True\n+              for i in xrange(2, int(math.ceil(math.sqrt(n))) + 1):\n+                  if n % i == 0:\n+                      return False\n+              return True\n+\n+        .. versionadded:: 0.10\n+\n+        :param name: the optional name of the test, otherwise the\n+                     function name will be used.\n+        \"\"\"\n+        def decorator(f):\n+            self.add_template_test(f, name=name)\n+            return f\n+        return decorator\n+\n+    @setupmethod\n+    def add_template_test(self, f, name=None):\n+        \"\"\"Register a custom template test.  Works exactly like the\n+        :meth:`template_test` decorator.\n+\n+        .. versionadded:: 0.10\n+\n+        :param name: the optional name of the test, otherwise the\n+                     function name will be used.\n+        \"\"\"\n+        self.jinja_env.tests[name or f.__name__] = f\n+\n+\n     @setupmethod\n     def before_request(self, f):\n         \"\"\"Registers a function to run before each request.\"\"\"\n\n@@ -209,6 +209,34 @@ class Blueprint(_PackageBoundObject):\n             state.app.jinja_env.filters[name or f.__name__] = f\n         self.record_once(register_template)\n \n+    def app_template_test(self, name=None):\n+        \"\"\"Register a custom template test, available application wide.  Like\n+        :meth:`Flask.template_test` but for a blueprint.\n+\n+        .. versionadded:: 0.10\n+\n+        :param name: the optional name of the test, otherwise the\n+                     function name will be used.\n+        \"\"\"\n+        def decorator(f):\n+            self.add_app_template_test(f, name=name)\n+            return f\n+        return decorator\n+\n+    def add_app_template_test(self, f, name=None):\n+        \"\"\"Register a custom template test, available application wide.  Like\n+        :meth:`Flask.add_template_test` but for a blueprint.  Works exactly\n+        like the :meth:`app_template_test` decorator.\n+\n+        .. versionadded:: 0.10\n+\n+        :param name: the optional name of the test, otherwise the\n+                     function name will be used.\n+        \"\"\"\n+        def register_template(state):\n+            state.app.jinja_env.tests[name or f.__name__] = f\n+        self.record_once(register_template)\n+\n     def before_request(self, f):\n         \"\"\"Like :meth:`Flask.before_request` but for a blueprint.  This function\n         is only executed before each request that is handled by a function of\n\n@@ -650,6 +650,114 @@ class BlueprintTestCase(FlaskTestCase):\n         rv = app.test_client().get('/')\n         self.assert_equal(rv.data, 'dcba')\n \n+    def test_template_test(self):\n+        bp = flask.Blueprint('bp', __name__)\n+        @bp.app_template_test()\n+        def is_boolean(value):\n+            return isinstance(value, bool)\n+        app = flask.Flask(__name__)\n+        app.register_blueprint(bp, url_prefix='/py')\n+        self.assert_('is_boolean' in app.jinja_env.tests.keys())\n+        self.assert_equal(app.jinja_env.tests['is_boolean'], is_boolean)\n+        self.assert_(app.jinja_env.tests['is_boolean'](False))\n+\n+    def test_add_template_test(self):\n+        bp = flask.Blueprint('bp', __name__)\n+        def is_boolean(value):\n+            return isinstance(value, bool)\n+        bp.add_app_template_test(is_boolean)\n+        app = flask.Flask(__name__)\n+        app.register_blueprint(bp, url_prefix='/py')\n+        self.assert_('is_boolean' in app.jinja_env.tests.keys())\n+        self.assert_equal(app.jinja_env.tests['is_boolean'], is_boolean)\n+        self.assert_(app.jinja_env.tests['is_boolean'](False))\n+\n+    def test_template_test_with_name(self):\n+        bp = flask.Blueprint('bp', __name__)\n+        @bp.app_template_test('boolean')\n+        def is_boolean(value):\n+            return isinstance(value, bool)\n+        app = flask.Flask(__name__)\n+        app.register_blueprint(bp, url_prefix='/py')\n+        self.assert_('boolean' in app.jinja_env.tests.keys())\n+        self.assert_equal(app.jinja_env.tests['boolean'], is_boolean)\n+        self.assert_(app.jinja_env.tests['boolean'](False))\n+\n+    def test_add_template_test_with_name(self):\n+        bp = flask.Blueprint('bp', __name__)\n+        def is_boolean(value):\n+            return isinstance(value, bool)\n+        bp.add_app_template_test(is_boolean, 'boolean')\n+        app = flask.Flask(__name__)\n+        app.register_blueprint(bp, url_prefix='/py')\n+        self.assert_('boolean' in app.jinja_env.tests.keys())\n+        self.assert_equal(app.jinja_env.tests['boolean'], is_boolean)\n+        self.assert_(app.jinja_env.tests['boolean'](False))\n+\n+    def test_template_test_with_template(self):\n+        bp = flask.Blueprint('bp', __name__)\n+        @bp.app_template_test()\n+        def boolean(value):\n+            return isinstance(value, bool)\n+        app = flask.Flask(__name__)\n+        app.register_blueprint(bp, url_prefix='/py')\n+        @app.route('/')\n+        def index():\n+            return flask.render_template('template_test.html', value=False)\n+        rv = app.test_client().get('/')\n+        self.assert_('Success!' in rv.data)\n+\n+    def test_template_test_after_route_with_template(self):\n+        app = flask.Flask(__name__)\n+        @app.route('/')\n+        def index():\n+            return flask.render_template('template_test.html', value=False)\n+        bp = flask.Blueprint('bp', __name__)\n+        @bp.app_template_test()\n+        def boolean(value):\n+            return isinstance(value, bool)\n+        app.register_blueprint(bp, url_prefix='/py')\n+        rv = app.test_client().get('/')\n+        self.assert_('Success!' in rv.data)\n+\n+    def test_add_template_test_with_template(self):\n+        bp = flask.Blueprint('bp', __name__)\n+        def boolean(value):\n+            return isinstance(value, bool)\n+        bp.add_app_template_test(boolean)\n+        app = flask.Flask(__name__)\n+        app.register_blueprint(bp, url_prefix='/py')\n+        @app.route('/')\n+        def index():\n+            return flask.render_template('template_test.html', value=False)\n+        rv = app.test_client().get('/')\n+        self.assert_('Success!' in rv.data)\n+\n+    def test_template_test_with_name_and_template(self):\n+        bp = flask.Blueprint('bp', __name__)\n+        @bp.app_template_test('boolean')\n+        def is_boolean(value):\n+            return isinstance(value, bool)\n+        app = flask.Flask(__name__)\n+        app.register_blueprint(bp, url_prefix='/py')\n+        @app.route('/')\n+        def index():\n+            return flask.render_template('template_test.html', value=False)\n+        rv = app.test_client().get('/')\n+        self.assert_('Success!' in rv.data)\n+\n+    def test_add_template_test_with_name_and_template(self):\n+        bp = flask.Blueprint('bp', __name__)\n+        def is_boolean(value):\n+            return isinstance(value, bool)\n+        bp.add_app_template_test(is_boolean, 'boolean')\n+        app = flask.Flask(__name__)\n+        app.register_blueprint(bp, url_prefix='/py')\n+        @app.route('/')\n+        def index():\n+            return flask.render_template('template_test.html', value=False)\n+        rv = app.test_client().get('/')\n+        self.assert_('Success!' in rv.data)\n \n def suite():\n     suite = unittest.TestSuite()\n\n@@ -164,6 +164,86 @@ class TemplatingTestCase(FlaskTestCase):\n         rv = app.test_client().get('/')\n         self.assert_equal(rv.data, 'dcba')\n \n+    def test_template_test(self):\n+        app = flask.Flask(__name__)\n+        @app.template_test()\n+        def boolean(value):\n+            return isinstance(value, bool)\n+        self.assert_('boolean' in app.jinja_env.tests.keys())\n+        self.assert_equal(app.jinja_env.tests['boolean'], boolean)\n+        self.assert_(app.jinja_env.tests['boolean'](False))\n+\n+    def test_add_template_test(self):\n+        app = flask.Flask(__name__)\n+        def boolean(value):\n+            return isinstance(value, bool)\n+        app.add_template_test(boolean)\n+        self.assert_('boolean' in app.jinja_env.tests.keys())\n+        self.assert_equal(app.jinja_env.tests['boolean'], boolean)\n+        self.assert_(app.jinja_env.tests['boolean'](False))\n+\n+    def test_template_test_with_name(self):\n+        app = flask.Flask(__name__)\n+        @app.template_test('boolean')\n+        def is_boolean(value):\n+            return isinstance(value, bool)\n+        self.assert_('boolean' in app.jinja_env.tests.keys())\n+        self.assert_equal(app.jinja_env.tests['boolean'], is_boolean)\n+        self.assert_(app.jinja_env.tests['boolean'](False))\n+\n+    def test_add_template_test_with_name(self):\n+        app = flask.Flask(__name__)\n+        def is_boolean(value):\n+            return isinstance(value, bool)\n+        app.add_template_test(is_boolean, 'boolean')\n+        self.assert_('boolean' in app.jinja_env.tests.keys())\n+        self.assert_equal(app.jinja_env.tests['boolean'], is_boolean)\n+        self.assert_(app.jinja_env.tests['boolean'](False))\n+\n+    def test_template_test_with_template(self):\n+        app = flask.Flask(__name__)\n+        @app.template_test()\n+        def boolean(value):\n+            return isinstance(value, bool)\n+        @app.route('/')\n+        def index():\n+            return flask.render_template('template_test.html', value=False)\n+        rv = app.test_client().get('/')\n+        self.assert_('Success!' in rv.data)\n+\n+    def test_add_template_test_with_template(self):\n+        app = flask.Flask(__name__)\n+        def boolean(value):\n+            return isinstance(value, bool)\n+        app.add_template_test(boolean)\n+        @app.route('/')\n+        def index():\n+            return flask.render_template('template_test.html', value=False)\n+        rv = app.test_client().get('/')\n+        self.assert_('Success!' in rv.data)\n+\n+    def test_template_test_with_name_and_template(self):\n+        app = flask.Flask(__name__)\n+        @app.template_test('boolean')\n+        def is_boolean(value):\n+            return isinstance(value, bool)\n+        @app.route('/')\n+        def index():\n+            return flask.render_template('template_test.html', value=False)\n+        rv = app.test_client().get('/')\n+        self.assert_('Success!' in rv.data)\n+\n+    def test_add_template_test_with_name_and_template(self):\n+        app = flask.Flask(__name__)\n+        def is_boolean(value):\n+            return isinstance(value, bool)\n+        app.add_template_test(is_boolean, 'boolean')\n+        @app.route('/')\n+        def index():\n+            return flask.render_template('template_test.html', value=False)\n+        rv = app.test_client().get('/')\n+        self.assert_('Success!' in rv.data)\n+\n     def test_custom_template_loader(self):\n         class MyFlask(flask.Flask):\n             def create_global_jinja_loader(self):\n@@ -177,7 +257,6 @@ class TemplatingTestCase(FlaskTestCase):\n         rv = c.get('/')\n         self.assert_equal(rv.data, 'Hello Custom World!')\n \n-\n     def test_iterable_loader(self):\n         app = flask.Flask(__name__)\n         @app.context_processor\n@@ -195,8 +274,6 @@ class TemplatingTestCase(FlaskTestCase):\n         self.assert_equal(rv.data, '<h1>Jameson</h1>')\n \n \n-\n-\n def suite():\n     suite = unittest.TestSuite()\n     suite.addTest(unittest.makeSuite(TemplatingTestCase))\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#7f8709147435bea69fa15ae0de9a2326ab5dfc41", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 3 | Churn Cumulative: 201 | Contributors (this commit): 3 | Commits (past 90d): 3 | Contributors (cumulative): 3 | DMM Complexity: None\n\nDIFF:\n@@ -34,7 +34,8 @@ from .templating import render_template, render_template_string\n \n # the signals\n from .signals import signals_available, template_rendered, request_started, \\\n-     request_finished, got_request_exception, request_tearing_down\n+     request_finished, got_request_exception, request_tearing_down, \\\n+     appcontext_tearing_down\n \n # only import json if it's available\n from .helpers import json\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#de5038f2fb25189e6d2ba8bc479d3d940a8ea43b", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 5 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 2 | Methods Changed: 2 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 6 | Churn Cumulative: 477 | Contributors (this commit): 1 | Commits (past 90d): 5 | Contributors (cumulative): 1 | DMM Complexity: 1.0\n\nDIFF:\n@@ -19,6 +19,10 @@ from . import Markup\n from itsdangerous import URLSafeTimedSerializer, BadSignature\n \n \n+def total_seconds(td):\n+    return td.days * 60 * 60 * 24 + td.seconds\n+\n+\n class SessionMixin(object):\n     \"\"\"Expands a basic dictionary with an accessors that are expected\n     by Flask extensions and users for the session.\n@@ -267,7 +271,7 @@ class SecureCookieSessionInterface(SessionInterface):\n         val = request.cookies.get(app.session_cookie_name)\n         if not val:\n             return self.session_class()\n-        max_age = app.permanent_session_lifetime.total_seconds()\n+        max_age = total_seconds(app.permanent_session_lifetime)\n         try:\n             data = s.loads(val, max_age=max_age)\n             return self.session_class(data)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#3bec75d230507335eaf9066605d3893e185b9e11", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 1 | Churn Cumulative: 1507 | Contributors (this commit): 20 | Commits (past 90d): 4 | Contributors (cumulative): 20 | DMM Complexity: 0.0\n\nDIFF:\n@@ -541,6 +541,7 @@ def send_file(filename_or_fp, mimetype=None, as_attachment=False,\n         if file is not None:\n             file.close()\n         headers['X-Sendfile'] = filename\n+        headers['Content-Length'] = os.path.getsize(filename)\n         data = None\n     else:\n         if file is None:\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#c4f2075f4c4c27856fe0af77250fb75c61c0d86b", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 8 | Lines Deleted: 4 | Files Changed: 2 | Hunks: 3 | Methods Changed: 2 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 12 | Churn Cumulative: 2173 | Contributors (this commit): 21 | Commits (past 90d): 6 | Contributors (cumulative): 25 | DMM Complexity: 1.0\n\nDIFF:\n@@ -45,11 +45,13 @@ from .globals import session, _request_ctx_stack, _app_ctx_stack, \\\n \n # figure out if simplejson escapes slashes.  This behavior was changed\n # from one version to another without reason.\n-if '\\\\/' not in json.dumps('/'):\n+_slash_escape = '\\\\/' not in json.dumps('/')\n+\n def _tojson_filter(*args, **kwargs):\n-        return json.dumps(*args, **kwargs).replace('/', '\\\\/')\n-else:\n-    _tojson_filter = json.dumps\n+    rv = json.dumps(*args, **kwargs)\n+    if _slash_escape:\n+        rv = rv.replace('/', '\\\\/')\n+    return rv.replace('<!', '<\\\\u0021')\n \n \n # sentinel\n\n@@ -97,6 +97,8 @@ class JSONTestCase(FlaskTestCase):\n             self.assert_equal(rv, '\"<\\\\/script>\"')\n             rv = render('{{ \"<\\0/script>\"|tojson|safe }}')\n             self.assert_equal(rv, '\"<\\\\u0000\\\\/script>\"')\n+            rv = render('{{ \"<!--<script>\"|tojson|safe }}')\n+            self.assert_equal(rv, '\"<\\\\u0021--<script>\"')\n \n     def test_modified_url_encoding(self):\n         class ModifiedRequest(flask.Request):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#f8b6033a3b86691470a36db57eba17d996c7d5e8", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 4 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 2 | Methods Changed: 2 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 5 | Churn Cumulative: 306 | Contributors (this commit): 3 | Commits (past 90d): 1 | Contributors (cumulative): 3 | DMM Complexity: 1.0\n\nDIFF:\n@@ -32,9 +32,12 @@ def add_to_path(path):\n         raise RuntimeError('Tried to add nonexisting path')\n \n     def _samefile(x, y):\n+        if x == y:\n+            return True\n         try:\n             return os.path.samefile(x, y)\n-        except (IOError, OSError):\n+        except (IOError, OSError, AttributeError):\n+            # Windows has no samefile\n             return False\n     sys.path[:] = [x for x in sys.path if not _samefile(path, x)]\n     sys.path.insert(0, path)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#661ee54bc2bc1ea0763ac9c226f8e14bb0beb5b1", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 23 | Lines Deleted: 1 | Files Changed: 3 | Hunks: 4 | Methods Changed: 6 | Complexity Δ (Sum/Max): 4/2 | Churn Δ: 24 | Churn Cumulative: 4878 | Contributors (this commit): 20 | Commits (past 90d): 9 | Contributors (cumulative): 25 | DMM Complexity: 0.75\n\nDIFF:\n@@ -942,8 +942,13 @@ class Flask(_PackageBoundObject):\n \n         rule = self.url_rule_class(rule, methods=methods, **options)\n         rule.provide_automatic_options = provide_automatic_options\n+\n         self.url_map.add(rule)\n         if view_func is not None:\n+            old_func = self.view_functions.get(endpoint)\n+            if old_func is not None and old_func is not view_func:\n+                raise AssertionError('View function mapping is overwriting an '\n+                                     'existing endpoint function: %s' % endpoint)\n             self.view_functions[endpoint] = view_func\n \n     def route(self, rule, **options):\n\n@@ -387,7 +387,7 @@ class BasicFunctionalityTestCase(FlaskTestCase):\n             return ''\n \n         @app.route('/test_filters_without_returning_categories/')\n-        def test_filters():\n+        def test_filters2():\n             messages = flask.get_flashed_messages(category_filter=['message', 'warning'])\n             self.assert_equal(len(messages), 2)\n             self.assert_equal(messages[0], u'Hello World')\n\n@@ -145,6 +145,23 @@ class ViewTestCase(FlaskTestCase):\n         self.assert_equal(rv.data, '')\n         self.assert_equal(rv.headers['X-Method'], 'HEAD')\n \n+    def test_endpoint_override(self):\n+        app = flask.Flask(__name__)\n+        app.debug = True\n+\n+        class Index(flask.views.View):\n+            methods = ['GET', 'POST']\n+            def dispatch_request(self):\n+                return flask.request.method\n+\n+        app.add_url_rule('/', view_func=Index.as_view('index'))\n+\n+        with self.assert_raises(AssertionError):\n+            app.add_url_rule('/', view_func=Index.as_view('index'))\n+\n+        # But these tests should still pass. We just log a warning.\n+        self.common_test(app)\n+\n \n def suite():\n     suite = unittest.TestSuite()\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
