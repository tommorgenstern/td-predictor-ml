{"custom_id": "requests#2aaf6ac03862d29ef8664aa8650a3c34ac4a0b2d", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 2 | Files Changed: 2 | Hunks: 2 | Methods Changed: 2 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 6957 | Contributors (this commit): 111 | Commits (past 90d): 14 | Contributors (cumulative): 127 | DMM Complexity: None\n\nDIFF:\n@@ -859,7 +859,7 @@ def rewind_body(prepared_request):\n         try:\n             body_seek(prepared_request._body_position)\n         except (IOError, OSError):\n-            raise UnrewindableBodyError(\"An error occured when rewinding request \"\n+            raise UnrewindableBodyError(\"An error occurred when rewinding request \"\n                                         \"body for redirect.\")\n     else:\n         raise UnrewindableBodyError(\"Unable to rewind request body for redirect.\")\n\n@@ -1560,7 +1560,7 @@ class TestRequests:\n         with pytest.raises(UnrewindableBodyError) as e:\n             requests.utils.rewind_body(prep)\n \n-        assert 'error occured when rewinding request body' in str(e)\n+        assert 'error occurred when rewinding request body' in str(e)\n \n     def test_rewind_body_failed_tell(self):\n         class BadFileObj:\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#3d22f9f5ab52a0a58b7ffca13ea5aba9f37b6536", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 4 | Lines Deleted: 4 | Files Changed: 1 | Hunks: 4 | Methods Changed: 4 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 8 | Churn Cumulative: 1187 | Contributors (this commit): 42 | Commits (past 90d): 2 | Contributors (cumulative): 42 | DMM Complexity: None\n\nDIFF:\n@@ -19,7 +19,7 @@ def request(method, url, **kwargs):\n     :param method: method for the new :class:`Request` object.\n     :param url: URL for the new :class:`Request` object.\n     :param params: (optional) Dictionary or bytes to be sent in the query string for the :class:`Request`.\n-    :param data: (optional) Dictionary, bytes, or file-like object to send in the body of the :class:`Request`.\n+    :param data: (optional) Dictionary (will be form-encoded), bytes, or file-like object to send in the body of the :class:`Request`.\n     :param json: (optional) json data to send in the body of the :class:`Request`.\n     :param headers: (optional) Dictionary of HTTP Headers to send with the :class:`Request`.\n     :param cookies: (optional) Dict or CookieJar object to send with the :class:`Request`.\n@@ -100,7 +100,7 @@ def post(url, data=None, json=None, **kwargs):\n     \"\"\"Sends a POST request.\n \n     :param url: URL for the new :class:`Request` object.\n-    :param data: (optional) Dictionary, bytes, or file-like object to send in the body of the :class:`Request`.\n+    :param data: (optional) Dictionary (will be form-encoded), bytes, or file-like object to send in the body of the :class:`Request`.\n     :param json: (optional) json data to send in the body of the :class:`Request`.\n     :param \\*\\*kwargs: Optional arguments that ``request`` takes.\n     :return: :class:`Response <Response>` object\n@@ -114,7 +114,7 @@ def put(url, data=None, **kwargs):\n     \"\"\"Sends a PUT request.\n \n     :param url: URL for the new :class:`Request` object.\n-    :param data: (optional) Dictionary, bytes, or file-like object to send in the body of the :class:`Request`.\n+    :param data: (optional) Dictionary (will be form-encoded), bytes, or file-like object to send in the body of the :class:`Request`.\n     :param json: (optional) json data to send in the body of the :class:`Request`.\n     :param \\*\\*kwargs: Optional arguments that ``request`` takes.\n     :return: :class:`Response <Response>` object\n@@ -128,7 +128,7 @@ def patch(url, data=None, **kwargs):\n     \"\"\"Sends a PATCH request.\n \n     :param url: URL for the new :class:`Request` object.\n-    :param data: (optional) Dictionary, bytes, or file-like object to send in the body of the :class:`Request`.\n+    :param data: (optional) Dictionary (will be form-encoded), bytes, or file-like object to send in the body of the :class:`Request`.\n     :param json: (optional) json data to send in the body of the :class:`Request`.\n     :param \\*\\*kwargs: Optional arguments that ``request`` takes.\n     :return: :class:`Response <Response>` object\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#8e6e47af43d1d89a0201bd58e97c700bebbddd5e", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 4 | Lines Deleted: 4 | Files Changed: 1 | Hunks: 4 | Methods Changed: 4 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 8 | Churn Cumulative: 1864 | Contributors (this commit): 15 | Commits (past 90d): 2 | Contributors (cumulative): 15 | DMM Complexity: None\n\nDIFF:\n@@ -148,10 +148,10 @@ class TimedCache(collections.MutableMapping):\n             (self.maxlen, len(self._dict), self.expiration_secs)\n \n     def __iter__(self):\n-        return map(lambda kv: (kv[0], kv[1][1]), self._dict.items()).__iter__()\n+        return ((key, value[1]) for key, value in self._dict.items())\n \n     def __delitem__(self, item):\n-        return self._dict.__delitem__(item)\n+        del self._dict[item]\n \n     def __getitem__(self, key):\n         \"\"\"\n@@ -166,7 +166,7 @@ class TimedCache(collections.MutableMapping):\n \n         if now - occurred > self.expiration_secs:\n             del self._dict[key]\n-            raise KeyError\n+            raise KeyError(key)\n         else:\n             return value\n \n@@ -183,7 +183,7 @@ class TimedCache(collections.MutableMapping):\n         while len(self._dict) >= self.maxlen:\n             self._dict.popitem(last=False)\n \n-        return self._dict.__setitem__(key, (now, value))\n+        self._dict[key] = (now, value)\n \n     def __len__(self):\n         \"\"\":return: the length of the cache\"\"\"\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#16f6e25176ca8693a4c6aebdc5361ca064e8ef8f", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 1189 | Contributors (this commit): 43 | Commits (past 90d): 3 | Contributors (cumulative): 43 | DMM Complexity: None\n\nDIFF:\n@@ -19,7 +19,7 @@ def request(method, url, **kwargs):\n     :param method: method for the new :class:`Request` object.\n     :param url: URL for the new :class:`Request` object.\n     :param params: (optional) Dictionary or bytes to be sent in the query string for the :class:`Request`.\n-    :param data: (optional) Dictionary (will be form-encoded), bytes, or file-like object to send in the body of the :class:`Request`.\n+    :param data: (optional) Dictionary or list of tuples ``[(key, value)]`` (will be form-encoded), bytes, or file-like object to send in the body of the :class:`Request`. The list of tuple version is to allow duplication of fields.\n     :param json: (optional) json data to send in the body of the :class:`Request`.\n     :param headers: (optional) Dictionary of HTTP Headers to send with the :class:`Request`.\n     :param cookies: (optional) Dict or CookieJar object to send with the :class:`Request`.\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#2e9e944bc16fcf51b9ec4f8fc2f6161fbd2bb194", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 1191 | Contributors (this commit): 43 | Commits (past 90d): 4 | Contributors (cumulative): 43 | DMM Complexity: None\n\nDIFF:\n@@ -19,7 +19,7 @@ def request(method, url, **kwargs):\n     :param method: method for the new :class:`Request` object.\n     :param url: URL for the new :class:`Request` object.\n     :param params: (optional) Dictionary or bytes to be sent in the query string for the :class:`Request`.\n-    :param data: (optional) Dictionary or list of tuples ``[(key, value)]`` (will be form-encoded), bytes, or file-like object to send in the body of the :class:`Request`. The list of tuple version is to allow duplication of fields.\n+    :param data: (optional) Dictionary or list of tuples ``[(key, value)]`` (will be form-encoded), bytes, or file-like object to send in the body of the :class:`Request`.\n     :param json: (optional) json data to send in the body of the :class:`Request`.\n     :param headers: (optional) Dictionary of HTTP Headers to send with the :class:`Request`.\n     :param cookies: (optional) Dict or CookieJar object to send with the :class:`Request`.\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#1cb759a9d97f9f3245ed67facaca1fedff3ca833", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 519 | Contributors (this commit): 8 | Commits (past 90d): 2 | Contributors (cumulative): 8 | DMM Complexity: None\n\nDIFF:\n@@ -59,7 +59,7 @@ master_doc = 'index'\n \n # General information about the project.\n project = u'Requests'\n-copyright = u'2017. A <a href=\"http://kennethreitz.com/pages/open-projects.html\">Kenneth Reitz</a> Project'\n+copyright = u'MMXVII. A <a href=\"http://kennethreitz.com/pages/open-projects.html\">Kenneth Reitz</a> Project'\n author = u'Kenneth Reitz'\n \n # The version info for the project you're documenting, acts as replacement for\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#7d8b87c37f3a5fb993fd83eda6888ac217cd108e", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 31 | Lines Deleted: 8 | Files Changed: 2 | Hunks: 7 | Methods Changed: 3 | Complexity Δ (Sum/Max): 7/5 | Churn Δ: 39 | Churn Cumulative: 5352 | Contributors (this commit): 87 | Commits (past 90d): 7 | Contributors (cumulative): 95 | DMM Complexity: 0.6842105263157895\n\nDIFF:\n@@ -202,7 +202,8 @@ class HTTPAdapter(BaseAdapter):\n \n         :param conn: The urllib3 connection object associated with the cert.\n         :param url: The requested URL.\n-        :param verify: Whether we should actually verify the certificate.\n+        :param verify: Whether we should actually verify the certificate\n+            or it could be a path to a ca bundle\n         :param cert: The SSL certificate to verify.\n         \"\"\"\n         if url.lower().startswith('https') and verify:\n@@ -216,15 +217,16 @@ class HTTPAdapter(BaseAdapter):\n             if not cert_loc:\n                 cert_loc = DEFAULT_CA_BUNDLE_PATH\n \n-            if not cert_loc:\n-                raise Exception(\"Could not find a suitable SSL CA certificate bundle.\")\n+            if not cert_loc or not os.path.exists(cert_loc):\n+                raise IOError(\"Could not find a suitable SSL CA certificate bundle, \"\n+                              \"invalid path: {0}\".format(cert_loc))\n \n             conn.cert_reqs = 'CERT_REQUIRED'\n \n-            if not os.path.isdir(cert_loc):\n-                conn.ca_certs = cert_loc\n-            else:\n+            if os.path.isdir(cert_loc):\n                 conn.ca_cert_dir = cert_loc\n+            else:\n+                conn.ca_certs = cert_loc\n         else:\n             conn.cert_reqs = 'CERT_NONE'\n             conn.ca_certs = None\n@@ -232,10 +234,15 @@ class HTTPAdapter(BaseAdapter):\n \n         if cert:\n             if not isinstance(cert, basestring):\n-                conn.cert_file = cert[0]\n-                conn.key_file = cert[1]\n+                conn.cert_file, conn.key_file = cert\n             else:\n                 conn.cert_file = cert\n+            if conn.cert_file and not os.path.exists(conn.cert_file):\n+                raise IOError(\"Could not find the SSL certificate file, \"\n+                              \"invalid path: {0}\".format(conn.cert_file))\n+            if conn.key_file and not os.path.exists(conn.key_file):\n+                raise IOError(\"Could not find the SSL key file, \"\n+                              \"invalid path: {0}\".format(conn.key_file))\n \n     def build_response(self, req, resp):\n         \"\"\"Builds a :class:`Response <requests.Response>` object from a urllib3\n\n@@ -769,6 +769,22 @@ class TestRequests:\n     def test_pyopenssl_redirect(self, httpbin_secure, httpbin_ca_bundle):\n         requests.get(httpbin_secure('status', '301'), verify=httpbin_ca_bundle)\n \n+    def test_invalid_ca_certificate_path(self):\n+        INVALID_PATH = '/garbage'\n+        with pytest.raises(IOError) as e:\n+            requests.get('http://github.com', verify=INVALID_PATH)\n+        assert str(e.value) == 'Could not find a suitable SSL CA certificate bundle, invalid path: {0}'.format(INVALID_PATH)\n+\n+    def test_invalid_ssl_certificate_files(self):\n+        INVALID_PATH = '/garbage'\n+        with pytest.raises(IOError) as e:\n+            requests.get('http://github.com', cert=INVALID_PATH)\n+        assert str(e.value) == 'Could not find the SSL certificate file, invalid path: {0}'.format(INVALID_PATH)\n+\n+        with pytest.raises(IOError) as e:\n+            requests.get('http://github.com', cert=('.', INVALID_PATH))\n+        assert str(e.value) == 'Could not find the SSL key file, invalid path: {0}'.format(INVALID_PATH)\n+\n     def test_https_warnings(self, httpbin_secure, httpbin_ca_bundle):\n         \"\"\"warnings are emitted with requests.get\"\"\"\n         if HAS_MODERN_SSL or HAS_PYOPENSSL:\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#42ec8b08f2446d0d69cb0c71816f6105dddc814d", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 5 | Lines Deleted: 4 | Files Changed: 1 | Hunks: 3 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 9 | Churn Cumulative: 1113 | Contributors (this commit): 39 | Commits (past 90d): 2 | Contributors (cumulative): 39 | DMM Complexity: 0.0\n\nDIFF:\n@@ -223,10 +223,10 @@ class HTTPAdapter(BaseAdapter):\n \n             conn.cert_reqs = 'CERT_REQUIRED'\n \n-            if os.path.isdir(cert_loc):\n-                conn.ca_cert_dir = cert_loc\n-            else:\n+            if not os.path.isdir(cert_loc):\n                 conn.ca_certs = cert_loc\n+            else:\n+                conn.ca_cert_dir = cert_loc\n         else:\n             conn.cert_reqs = 'CERT_NONE'\n             conn.ca_certs = None\n@@ -234,7 +234,8 @@ class HTTPAdapter(BaseAdapter):\n \n         if cert:\n             if not isinstance(cert, basestring):\n-                conn.cert_file, conn.key_file = cert\n+                conn.cert_file = cert[0]\n+                conn.key_file = cert[1]\n             else:\n                 conn.cert_file = cert\n             if conn.cert_file and not os.path.exists(conn.cert_file):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#4207867aaf917ed8d223064cc5c163dfe027dc00", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 26 | Lines Deleted: 18 | Files Changed: 4 | Hunks: 13 | Methods Changed: 8 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 44 | Churn Cumulative: 9868 | Contributors (this commit): 161 | Commits (past 90d): 17 | Contributors (cumulative): 221 | DMM Complexity: None\n\nDIFF:\n@@ -64,7 +64,9 @@ class BaseAdapter(object):\n             data before giving up, as a float, or a :ref:`(connect timeout,\n             read timeout) <timeouts>` tuple.\n         :type timeout: float or tuple\n-        :param verify: (optional) Whether to verify SSL certificates.\n+        :param verify: (optional) Either a boolean, in which case it controls whether we verify\n+            the server's TLS certificate, or a string, in which case it must be a path\n+            to a CA bundle to use\n         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n         :param proxies: (optional) The proxies dictionary to apply to the request.\n         \"\"\"\n@@ -202,8 +204,9 @@ class HTTPAdapter(BaseAdapter):\n \n         :param conn: The urllib3 connection object associated with the cert.\n         :param url: The requested URL.\n-        :param verify: Whether we should actually verify the certificate\n-            or it could be a path to a ca bundle\n+        :param verify: Either a boolean, in which case it controls whether we verify\n+            the server's TLS certificate, or a string, in which case it must be a path\n+            to a CA bundle to use\n         :param cert: The SSL certificate to verify.\n         \"\"\"\n         if url.lower().startswith('https') and verify:\n@@ -218,7 +221,7 @@ class HTTPAdapter(BaseAdapter):\n                 cert_loc = DEFAULT_CA_BUNDLE_PATH\n \n             if not cert_loc or not os.path.exists(cert_loc):\n-                raise IOError(\"Could not find a suitable SSL CA certificate bundle, \"\n+                raise IOError(\"Could not find a suitable TLS CA certificate bundle, \"\n                               \"invalid path: {0}\".format(cert_loc))\n \n             conn.cert_reqs = 'CERT_REQUIRED'\n@@ -239,10 +242,10 @@ class HTTPAdapter(BaseAdapter):\n             else:\n                 conn.cert_file = cert\n             if conn.cert_file and not os.path.exists(conn.cert_file):\n-                raise IOError(\"Could not find the SSL certificate file, \"\n+                raise IOError(\"Could not find the TLS certificate file, \"\n                               \"invalid path: {0}\".format(conn.cert_file))\n             if conn.key_file and not os.path.exists(conn.key_file):\n-                raise IOError(\"Could not find the SSL key file, \"\n+                raise IOError(\"Could not find the TLS key file, \"\n                               \"invalid path: {0}\".format(conn.key_file))\n \n     def build_response(self, req, resp):\n@@ -389,7 +392,9 @@ class HTTPAdapter(BaseAdapter):\n             data before giving up, as a float, or a :ref:`(connect timeout,\n             read timeout) <timeouts>` tuple.\n         :type timeout: float or tuple\n-        :param verify: (optional) Whether to verify SSL certificates.\n+        :param verify: (optional) Either a boolean, in which case it controls whether\n+            we verify the server's TLS certificate, or a string, in which case it\n+            must be a path to a CA bundle to use\n         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n         :param proxies: (optional) The proxies dictionary to apply to the request.\n         :rtype: requests.Response\n\n@@ -36,7 +36,9 @@ def request(method, url, **kwargs):\n     :param allow_redirects: (optional) Boolean. Enable/disable GET/OPTIONS/POST/PUT/PATCH/DELETE/HEAD redirection. Defaults to ``True``.\n     :type allow_redirects: bool\n     :param proxies: (optional) Dictionary mapping protocol to the URL of the proxy.\n-    :param verify: (optional) whether the SSL cert will be verified. A CA_BUNDLE path can also be provided. Defaults to ``True``.\n+    :param verify: (optional) Either a boolean, in which case it controls whether we verify\n+            the server's TLS certificate, or a string, in which case it must be a path\n+            to a CA bundle to use. Defaults to ``True``.\n     :param stream: (optional) if ``False``, the response content will be immediately downloaded.\n     :param cert: (optional) if String, path to ssl client cert file (.pem). If Tuple, ('cert', 'key') pair.\n     :return: :class:`Response <Response>` object\n\n@@ -460,8 +460,9 @@ class Session(SessionRedirectMixin):\n             hostname to the URL of the proxy.\n         :param stream: (optional) whether to immediately download the response\n             content. Defaults to ``False``.\n-        :param verify: (optional) whether the SSL cert will be verified.\n-            A CA_BUNDLE path can also be provided. Defaults to ``True``.\n+        :param verify: (optional) Either a boolean, in which case it controls whether we verify\n+            the server's TLS certificate, or a string, in which case it must be a path\n+            to a CA bundle to use. Defaults to ``True``.\n         :param cert: (optional) if String, path to ssl client cert file (.pem).\n             If Tuple, ('cert', 'key') pair.\n         :rtype: requests.Response\n\n@@ -769,21 +769,21 @@ class TestRequests:\n     def test_pyopenssl_redirect(self, httpbin_secure, httpbin_ca_bundle):\n         requests.get(httpbin_secure('status', '301'), verify=httpbin_ca_bundle)\n \n-    def test_invalid_ca_certificate_path(self):\n+    def test_invalid_ca_certificate_path(self, httpbin_secure):\n         INVALID_PATH = '/garbage'\n         with pytest.raises(IOError) as e:\n-            requests.get('http://github.com', verify=INVALID_PATH)\n-        assert str(e.value) == 'Could not find a suitable SSL CA certificate bundle, invalid path: {0}'.format(INVALID_PATH)\n+            requests.get(httpbin_secure(), verify=INVALID_PATH)\n+        assert str(e.value) == 'Could not find a suitable TLS CA certificate bundle, invalid path: {0}'.format(INVALID_PATH)\n \n-    def test_invalid_ssl_certificate_files(self):\n+    def test_invalid_ssl_certificate_files(self, httpbin_secure):\n         INVALID_PATH = '/garbage'\n         with pytest.raises(IOError) as e:\n-            requests.get('http://github.com', cert=INVALID_PATH)\n-        assert str(e.value) == 'Could not find the SSL certificate file, invalid path: {0}'.format(INVALID_PATH)\n+            requests.get(httpbin_secure(), cert=INVALID_PATH)\n+        assert str(e.value) == 'Could not find the TLS certificate file, invalid path: {0}'.format(INVALID_PATH)\n \n         with pytest.raises(IOError) as e:\n-            requests.get('http://github.com', cert=('.', INVALID_PATH))\n-        assert str(e.value) == 'Could not find the SSL key file, invalid path: {0}'.format(INVALID_PATH)\n+            requests.get(httpbin_secure(), cert=('.', INVALID_PATH))\n+        assert str(e.value) == 'Could not find the TLS key file, invalid path: {0}'.format(INVALID_PATH)\n \n     def test_https_warnings(self, httpbin_secure, httpbin_ca_bundle):\n         \"\"\"warnings are emitted with requests.get\"\"\"\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#a180db963f08ab1a3b1fd036b3cd5f6bae791a5a", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 10 | Lines Deleted: 4 | Files Changed: 1 | Hunks: 5 | Methods Changed: 1 | Complexity Δ (Sum/Max): 3/3 | Churn Δ: 14 | Churn Cumulative: 1146 | Contributors (this commit): 40 | Commits (past 90d): 4 | Contributors (cumulative): 40 | DMM Complexity: 0.0\n\nDIFF:\n@@ -391,7 +391,7 @@ class HTTPAdapter(BaseAdapter):\n         :param timeout: (optional) How long to wait for the server to send\n             data before giving up, as a float, or a :ref:`(connect timeout,\n             read timeout) <timeouts>` tuple.\n-        :type timeout: float or tuple\n+        :type timeout: float or tuple or urllib3 Timeout object\n         :param verify: (optional) Either a boolean, in which case it controls whether\n             we verify the server's TLS certificate, or a string, in which case it\n             must be a path to a CA bundle to use\n@@ -408,7 +408,10 @@ class HTTPAdapter(BaseAdapter):\n \n         chunked = not (request.body is None or 'Content-Length' in request.headers)\n \n-        if isinstance(timeout, tuple):\n+        \n+        if isinstance(timeout, TimeoutSauce):\n+            pass\n+        elif isinstance(timeout, tuple):\n             try:\n                 connect, read = timeout\n                 timeout = TimeoutSauce(connect=connect, read=read)\n@@ -418,11 +421,14 @@ class HTTPAdapter(BaseAdapter):\n                        \"timeout tuple, or a single float to set \"\n                        \"both timeouts to the same value\".format(timeout))\n                 raise ValueError(err)\n-        else:\n+        elif timeout is not None:\n             timeout = TimeoutSauce(connect=timeout, read=timeout)\n \n         try:\n             if not chunked:\n+                kwargs = {}\n+                if timeout is not None:\n+                    kwargs['timeout'] = timeout\n                 resp = conn.urlopen(\n                     method=request.method,\n                     url=url,\n@@ -433,7 +439,7 @@ class HTTPAdapter(BaseAdapter):\n                     preload_content=False,\n                     decode_content=False,\n                     retries=self.max_retries,\n-                    timeout=timeout\n+                    **kwargs\n                 )\n \n             # Send the request.\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#fe58c6fdd6c476657a2f390d24a6ca9fb7fa4c9b", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 3 | Lines Deleted: 3 | Files Changed: 1 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 6 | Churn Cumulative: 1152 | Contributors (this commit): 40 | Commits (past 90d): 5 | Contributors (cumulative): 40 | DMM Complexity: None\n\nDIFF:\n@@ -409,9 +409,7 @@ class HTTPAdapter(BaseAdapter):\n         chunked = not (request.body is None or 'Content-Length' in request.headers)\n \n         \n-        if isinstance(timeout, TimeoutSauce):\n-            pass\n-        elif isinstance(timeout, tuple):\n+        if isinstance(timeout, tuple):\n             try:\n                 connect, read = timeout\n                 timeout = TimeoutSauce(connect=connect, read=read)\n@@ -421,6 +419,8 @@ class HTTPAdapter(BaseAdapter):\n                        \"timeout tuple, or a single float to set \"\n                        \"both timeouts to the same value\".format(timeout))\n                 raise ValueError(err)\n+        elif isinstance(timeout, TimeoutSauce):\n+            pass\n         elif timeout is not None:\n             timeout = TimeoutSauce(connect=timeout, read=timeout)\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#1e7ae063ce1b2368023baacd90dcb718611bd37d", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 0 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 1 | Churn Cumulative: 1153 | Contributors (this commit): 40 | Commits (past 90d): 6 | Contributors (cumulative): 40 | DMM Complexity: None\n\nDIFF:\n@@ -408,7 +408,6 @@ class HTTPAdapter(BaseAdapter):\n \n         chunked = not (request.body is None or 'Content-Length' in request.headers)\n \n-        \n         if isinstance(timeout, tuple):\n             try:\n                 connect, read = timeout\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#4c13678587f1fa7b23ad5c765ddf3ea056d18eb1", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 5 | Files Changed: 1 | Hunks: 3 | Methods Changed: 1 | Complexity Δ (Sum/Max): -2/0 | Churn Δ: 7 | Churn Cumulative: 1160 | Contributors (this commit): 40 | Commits (past 90d): 7 | Contributors (cumulative): 40 | DMM Complexity: 1.0\n\nDIFF:\n@@ -420,14 +420,11 @@ class HTTPAdapter(BaseAdapter):\n                 raise ValueError(err)\n         elif isinstance(timeout, TimeoutSauce):\n             pass\n-        elif timeout is not None:\n+        else:\n             timeout = TimeoutSauce(connect=timeout, read=timeout)\n \n         try:\n             if not chunked:\n-                kwargs = {}\n-                if timeout is not None:\n-                    kwargs['timeout'] = timeout\n                 resp = conn.urlopen(\n                     method=request.method,\n                     url=url,\n@@ -438,7 +435,7 @@ class HTTPAdapter(BaseAdapter):\n                     preload_content=False,\n                     decode_content=False,\n                     retries=self.max_retries,\n-                    **kwargs\n+                    timeout=timeout\n                 )\n \n             # Send the request.\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#a63ae02e345ef772d96802b1dd3eee730144e16b", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 3 | Churn Cumulative: 3280 | Contributors (this commit): 83 | Commits (past 90d): 3 | Contributors (cumulative): 83 | DMM Complexity: None\n\nDIFF:\n@@ -343,7 +343,8 @@ class Session(SessionRedirectMixin):\n         #: SSL Verification default.\n         self.verify = True\n \n-        #: SSL client certificate default.\n+        #: SSL client certificate default, if String, path to ssl client\n+        #: cert file (.pem). If Tuple, ('cert', 'key') pair.\n         self.cert = None\n \n         #: Maximum number of redirects allowed. If the request exceeds this\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#93cb1ca763a6b1627e216a1f749fe1131f42a377", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 42 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 4 | Methods Changed: 4 | Complexity Δ (Sum/Max): 7/7 | Churn Δ: 42 | Churn Cumulative: 4306 | Contributors (this commit): 57 | Commits (past 90d): 8 | Contributors (cumulative): 57 | DMM Complexity: 1.0\n\nDIFF:\n@@ -2025,6 +2025,20 @@ class TestTimeout:\n         r = requests.get(httpbin('get'), timeout=None)\n         assert r.status_code == 200\n \n+    def test_none_timeout_obj(self, httpbin):\n+        \"\"\"Check that you can set None as a valid timeout value.\n+\n+        To actually test this behavior, we'd want to check that setting the\n+        timeout to None actually lets the request block forever. However, this\n+        would make the test suite unbearably slow.\n+        Instead we verify that setting the timeout to None does not prevent the\n+        request from succeeding.\n+        \"\"\"\n+        from requests.packages.urllib3.util import Timeout\n+        r = requests.get(httpbin('get'),\n+                         timeout=Timeout(connect=None, read=None))\n+        assert r.status_code == 200\n+\n     def test_read_timeout(self, httpbin):\n         try:\n             requests.get(httpbin('delay/10'), timeout=(None, 0.1))\n@@ -2032,6 +2046,15 @@ class TestTimeout:\n         except ReadTimeout:\n             pass\n \n+    def test_read_timeout_obj(self, httpbin):\n+        from requests.packages.urllib3.util import Timeout\n+        try:\n+            requests.get(httpbin('delay/10'),\n+                         timeout=Timeout(connect=None, read=0.1))\n+            pytest.fail('The recv() request should time out.')\n+        except ReadTimeout:\n+            pass\n+\n     def test_connect_timeout(self):\n         try:\n             requests.get(TARPIT, timeout=(0.1, None))\n@@ -2040,6 +2063,16 @@ class TestTimeout:\n             assert isinstance(e, ConnectionError)\n             assert isinstance(e, Timeout)\n \n+    def test_connect_timeout_obj(self):\n+        from requests.packages.urllib3.util import Timeout\n+        try:\n+            requests.get(TARPIT,\n+                         timeout=Timeout(connect=0.1, read=None))\n+            pytest.fail('The connect() request should time out.')\n+        except ConnectTimeout as e:\n+            assert isinstance(e, ConnectionError)\n+            assert isinstance(e, Timeout)\n+\n     def test_total_timeout_connect(self):\n         try:\n             requests.get(TARPIT, timeout=(0.1, 0.1))\n@@ -2047,6 +2080,15 @@ class TestTimeout:\n         except ConnectTimeout:\n             pass\n \n+    def test_total_timeout_connect_obj(self):\n+        from requests.packages.urllib3.util import Timeout\n+        try:\n+            requests.get(TARPIT,\n+                         timeout=Timeout(connect=0.1, read=0.1))\n+            pytest.fail('The connect() request should time out.')\n+        except ConnectTimeout:\n+            pass\n+\n     def test_encoded_methods(self, httpbin):\n         \"\"\"See: https://github.com/kennethreitz/requests/issues/2316\"\"\"\n         r = requests.request(b'GET', httpbin('get'))\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#28768b945c9caaf021e95c3bd82ffc8ea15d1fde", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 29 | Lines Deleted: 50 | Files Changed: 1 | Hunks: 9 | Methods Changed: 12 | Complexity Δ (Sum/Max): -7/0 | Churn Δ: 79 | Churn Cumulative: 4385 | Contributors (this commit): 57 | Commits (past 90d): 9 | Contributors (cumulative): 57 | DMM Complexity: 0.0\n\nDIFF:\n@@ -33,6 +33,7 @@ from requests.hooks import default_hooks\n \n from .compat import StringIO, u\n from .utils import override_environ\n+from requests.packages.urllib3.util import Timeout\n \n # Requests to this URL should always fail with a connection timeout (nothing\n # listening on that port)\n@@ -2013,7 +2014,12 @@ class TestTimeout:\n             requests.get(httpbin('get'), timeout=timeout)\n         assert error_text in str(e)\n \n-    def test_none_timeout(self, httpbin):\n+    @pytest.mark.parametrize(\n+        'timeout', (\n+            None,\n+            Timeout(connect=None, read=None)\n+        ))\n+    def test_none_timeout(self, httpbin, timeout):\n         \"\"\"Check that you can set None as a valid timeout value.\n \n         To actually test this behavior, we'd want to check that setting the\n@@ -2022,69 +2028,42 @@ class TestTimeout:\n         Instead we verify that setting the timeout to None does not prevent the\n         request from succeeding.\n         \"\"\"\n-        r = requests.get(httpbin('get'), timeout=None)\n+        r = requests.get(httpbin('get'), timeout=timeout)\n         assert r.status_code == 200\n \n-    def test_none_timeout_obj(self, httpbin):\n-        \"\"\"Check that you can set None as a valid timeout value.\n-\n-        To actually test this behavior, we'd want to check that setting the\n-        timeout to None actually lets the request block forever. However, this\n-        would make the test suite unbearably slow.\n-        Instead we verify that setting the timeout to None does not prevent the\n-        request from succeeding.\n-        \"\"\"\n-        from requests.packages.urllib3.util import Timeout\n-        r = requests.get(httpbin('get'),\n-                         timeout=Timeout(connect=None, read=None))\n-        assert r.status_code == 200\n-\n-    def test_read_timeout(self, httpbin):\n+    @pytest.mark.parametrize(\n+        'timeout', (\n+            (None, 0.1),\n+            Timeout(connect=None, read=0.1)\n+        ))\n+    def test_read_timeout(self, httpbin, timeout):\n         try:\n-            requests.get(httpbin('delay/10'), timeout=(None, 0.1))\n+            requests.get(httpbin('delay/10'), timeout=timeout)\n             pytest.fail('The recv() request should time out.')\n         except ReadTimeout:\n             pass\n \n-    def test_read_timeout_obj(self, httpbin):\n-        from requests.packages.urllib3.util import Timeout\n+    @pytest.mark.parametrize(\n+        'timeout', (\n+            (0.1, None),\n+            Timeout(connect=0.1, read=None)\n+        ))\n+    def test_connect_timeout(self, timeout):\n         try:\n-            requests.get(httpbin('delay/10'),\n-                         timeout=Timeout(connect=None, read=0.1))\n-            pytest.fail('The recv() request should time out.')\n-        except ReadTimeout:\n-            pass\n-\n-    def test_connect_timeout(self):\n-        try:\n-            requests.get(TARPIT, timeout=(0.1, None))\n+            requests.get(TARPIT, timeout=timeout)\n             pytest.fail('The connect() request should time out.')\n         except ConnectTimeout as e:\n             assert isinstance(e, ConnectionError)\n             assert isinstance(e, Timeout)\n \n-    def test_connect_timeout_obj(self):\n-        from requests.packages.urllib3.util import Timeout\n+    @pytest.mark.parametrize(\n+        'timeout', (\n+            (0.1, 0.1),\n+            Timeout(connect=0.1, read=0.1)\n+        ))\n+    def test_total_timeout_connect(self, timeout):\n         try:\n-            requests.get(TARPIT,\n-                         timeout=Timeout(connect=0.1, read=None))\n-            pytest.fail('The connect() request should time out.')\n-        except ConnectTimeout as e:\n-            assert isinstance(e, ConnectionError)\n-            assert isinstance(e, Timeout)\n-\n-    def test_total_timeout_connect(self):\n-        try:\n-            requests.get(TARPIT, timeout=(0.1, 0.1))\n-            pytest.fail('The connect() request should time out.')\n-        except ConnectTimeout:\n-            pass\n-\n-    def test_total_timeout_connect_obj(self):\n-        from requests.packages.urllib3.util import Timeout\n-        try:\n-            requests.get(TARPIT,\n-                         timeout=Timeout(connect=0.1, read=0.1))\n+            requests.get(TARPIT, timeout=timeout)\n             pytest.fail('The connect() request should time out.')\n         except ConnectTimeout:\n             pass\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#1be6a17edc0580ca9a21bd820d391a5a7b28a96f", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 5 | Lines Deleted: 5 | Files Changed: 1 | Hunks: 5 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 10 | Churn Cumulative: 4395 | Contributors (this commit): 57 | Commits (past 90d): 10 | Contributors (cumulative): 57 | DMM Complexity: None\n\nDIFF:\n@@ -33,7 +33,7 @@ from requests.hooks import default_hooks\n \n from .compat import StringIO, u\n from .utils import override_environ\n-from requests.packages.urllib3.util import Timeout\n+from requests.packages.urllib3.util import Timeout as Urllib3Timeout\n \n # Requests to this URL should always fail with a connection timeout (nothing\n # listening on that port)\n@@ -2017,7 +2017,7 @@ class TestTimeout:\n     @pytest.mark.parametrize(\n         'timeout', (\n             None,\n-            Timeout(connect=None, read=None)\n+            Urllib3Timeout(connect=None, read=None)\n         ))\n     def test_none_timeout(self, httpbin, timeout):\n         \"\"\"Check that you can set None as a valid timeout value.\n@@ -2034,7 +2034,7 @@ class TestTimeout:\n     @pytest.mark.parametrize(\n         'timeout', (\n             (None, 0.1),\n-            Timeout(connect=None, read=0.1)\n+            Urllib3Timeout(connect=None, read=0.1)\n         ))\n     def test_read_timeout(self, httpbin, timeout):\n         try:\n@@ -2046,7 +2046,7 @@ class TestTimeout:\n     @pytest.mark.parametrize(\n         'timeout', (\n             (0.1, None),\n-            Timeout(connect=0.1, read=None)\n+            Urllib3Timeout(connect=0.1, read=None)\n         ))\n     def test_connect_timeout(self, timeout):\n         try:\n@@ -2059,7 +2059,7 @@ class TestTimeout:\n     @pytest.mark.parametrize(\n         'timeout', (\n             (0.1, 0.1),\n-            Timeout(connect=0.1, read=0.1)\n+            Urllib3Timeout(connect=0.1, read=0.1)\n         ))\n     def test_total_timeout_connect(self, timeout):\n         try:\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#ead8fba84b12e7496c65272a07de47d553aa0ca0", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 15 | Lines Deleted: 15 | Files Changed: 3 | Hunks: 15 | Methods Changed: 15 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 30 | Churn Cumulative: 14167 | Contributors (this commit): 235 | Commits (past 90d): 15 | Contributors (cumulative): 303 | DMM Complexity: 0.9532710280373832\n\nDIFF:\n@@ -59,7 +59,7 @@ def request(method, url, **kwargs):\n \n \n def get(url, params=None, **kwargs):\n-    \"\"\"Sends a GET request.\n+    r\"\"\"Sends a GET request.\n \n     :param url: URL for the new :class:`Request` object.\n     :param params: (optional) Dictionary or bytes to be sent in the query string for the :class:`Request`.\n@@ -73,7 +73,7 @@ def get(url, params=None, **kwargs):\n \n \n def options(url, **kwargs):\n-    \"\"\"Sends a OPTIONS request.\n+    r\"\"\"Sends a OPTIONS request.\n \n     :param url: URL for the new :class:`Request` object.\n     :param \\*\\*kwargs: Optional arguments that ``request`` takes.\n@@ -86,7 +86,7 @@ def options(url, **kwargs):\n \n \n def head(url, **kwargs):\n-    \"\"\"Sends a HEAD request.\n+    r\"\"\"Sends a HEAD request.\n \n     :param url: URL for the new :class:`Request` object.\n     :param \\*\\*kwargs: Optional arguments that ``request`` takes.\n@@ -99,7 +99,7 @@ def head(url, **kwargs):\n \n \n def post(url, data=None, json=None, **kwargs):\n-    \"\"\"Sends a POST request.\n+    r\"\"\"Sends a POST request.\n \n     :param url: URL for the new :class:`Request` object.\n     :param data: (optional) Dictionary (will be form-encoded), bytes, or file-like object to send in the body of the :class:`Request`.\n@@ -113,7 +113,7 @@ def post(url, data=None, json=None, **kwargs):\n \n \n def put(url, data=None, **kwargs):\n-    \"\"\"Sends a PUT request.\n+    r\"\"\"Sends a PUT request.\n \n     :param url: URL for the new :class:`Request` object.\n     :param data: (optional) Dictionary (will be form-encoded), bytes, or file-like object to send in the body of the :class:`Request`.\n@@ -127,7 +127,7 @@ def put(url, data=None, **kwargs):\n \n \n def patch(url, data=None, **kwargs):\n-    \"\"\"Sends a PATCH request.\n+    r\"\"\"Sends a PATCH request.\n \n     :param url: URL for the new :class:`Request` object.\n     :param data: (optional) Dictionary (will be form-encoded), bytes, or file-like object to send in the body of the :class:`Request`.\n@@ -141,7 +141,7 @@ def patch(url, data=None, **kwargs):\n \n \n def delete(url, **kwargs):\n-    \"\"\"Sends a DELETE request.\n+    r\"\"\"Sends a DELETE request.\n \n     :param url: URL for the new :class:`Request` object.\n     :param \\*\\*kwargs: Optional arguments that ``request`` takes.\n\n@@ -859,7 +859,7 @@ class Response(object):\n         return content\n \n     def json(self, **kwargs):\n-        \"\"\"Returns the json-encoded content of a response, if any.\n+        r\"\"\"Returns the json-encoded content of a response, if any.\n \n         :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n         :raises ValueError: If the response body does not contain valid json.\n\n@@ -500,7 +500,7 @@ class Session(SessionRedirectMixin):\n         return resp\n \n     def get(self, url, **kwargs):\n-        \"\"\"Sends a GET request. Returns :class:`Response` object.\n+        r\"\"\"Sends a GET request. Returns :class:`Response` object.\n \n         :param url: URL for the new :class:`Request` object.\n         :param \\*\\*kwargs: Optional arguments that ``request`` takes.\n@@ -511,7 +511,7 @@ class Session(SessionRedirectMixin):\n         return self.request('GET', url, **kwargs)\n \n     def options(self, url, **kwargs):\n-        \"\"\"Sends a OPTIONS request. Returns :class:`Response` object.\n+        r\"\"\"Sends a OPTIONS request. Returns :class:`Response` object.\n \n         :param url: URL for the new :class:`Request` object.\n         :param \\*\\*kwargs: Optional arguments that ``request`` takes.\n@@ -522,7 +522,7 @@ class Session(SessionRedirectMixin):\n         return self.request('OPTIONS', url, **kwargs)\n \n     def head(self, url, **kwargs):\n-        \"\"\"Sends a HEAD request. Returns :class:`Response` object.\n+        r\"\"\"Sends a HEAD request. Returns :class:`Response` object.\n \n         :param url: URL for the new :class:`Request` object.\n         :param \\*\\*kwargs: Optional arguments that ``request`` takes.\n@@ -533,7 +533,7 @@ class Session(SessionRedirectMixin):\n         return self.request('HEAD', url, **kwargs)\n \n     def post(self, url, data=None, json=None, **kwargs):\n-        \"\"\"Sends a POST request. Returns :class:`Response` object.\n+        r\"\"\"Sends a POST request. Returns :class:`Response` object.\n \n         :param url: URL for the new :class:`Request` object.\n         :param data: (optional) Dictionary, bytes, or file-like object to send in the body of the :class:`Request`.\n@@ -545,7 +545,7 @@ class Session(SessionRedirectMixin):\n         return self.request('POST', url, data=data, json=json, **kwargs)\n \n     def put(self, url, data=None, **kwargs):\n-        \"\"\"Sends a PUT request. Returns :class:`Response` object.\n+        r\"\"\"Sends a PUT request. Returns :class:`Response` object.\n \n         :param url: URL for the new :class:`Request` object.\n         :param data: (optional) Dictionary, bytes, or file-like object to send in the body of the :class:`Request`.\n@@ -556,7 +556,7 @@ class Session(SessionRedirectMixin):\n         return self.request('PUT', url, data=data, **kwargs)\n \n     def patch(self, url, data=None, **kwargs):\n-        \"\"\"Sends a PATCH request. Returns :class:`Response` object.\n+        r\"\"\"Sends a PATCH request. Returns :class:`Response` object.\n \n         :param url: URL for the new :class:`Request` object.\n         :param data: (optional) Dictionary, bytes, or file-like object to send in the body of the :class:`Request`.\n@@ -567,7 +567,7 @@ class Session(SessionRedirectMixin):\n         return self.request('PATCH', url,  data=data, **kwargs)\n \n     def delete(self, url, **kwargs):\n-        \"\"\"Sends a DELETE request. Returns :class:`Response` object.\n+        r\"\"\"Sends a DELETE request. Returns :class:`Response` object.\n \n         :param url: URL for the new :class:`Request` object.\n         :param \\*\\*kwargs: Optional arguments that ``request`` takes.\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#1cd173a82c6a88d53340775d85a5620bc50955bc", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 2727 | Contributors (this commit): 73 | Commits (past 90d): 4 | Contributors (cumulative): 73 | DMM Complexity: None\n\nDIFF:\n@@ -497,7 +497,7 @@ def requote_uri(uri):\n \n \n def address_in_network(ip, net):\n-    \"\"\"This function allows you to check if on IP belongs to a network subnet\n+    \"\"\"This function allows you to check if an IP belongs to a network subnet\n \n     Example: returns True if ip = 192.168.1.1 and net = 192.168.1.0/24\n              returns False if ip = 192.168.1.1 and net = 192.168.100.0/24\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
