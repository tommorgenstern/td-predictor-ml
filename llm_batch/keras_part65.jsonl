{"custom_id": "keras#58ed77b0d2f1a0223d551c779e624c55a10df296", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 5 | Lines Deleted: 1 | Files Changed: 2 | Hunks: 3 | Methods Changed: 1 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 6 | Churn Cumulative: 111 | Contributors (this commit): 7 | Commits (past 90d): 10 | Contributors (cumulative): 9 | DMM Complexity: 0.0\n\nDIFF:\n@@ -5,11 +5,13 @@ import json\n from .common import epsilon, floatx, set_epsilon, set_floatx\n \n _keras_dir = os.path.expanduser(os.path.join('~', '.keras'))\n+if not os.access(_keras_dir, os.W_OK):\n+    _keras_dir = os.path.join('/tmp', '.keras')\n if not os.path.exists(_keras_dir):\n     os.makedirs(_keras_dir)\n \n _BACKEND = 'theano'\n-_config_path = os.path.expanduser(os.path.join('~', '.keras', 'keras.json'))\n+_config_path = os.path.expanduser(os.path.join(_keras_dir, 'keras.json'))\n if os.path.exists(_config_path):\n     _config = json.load(open(_config_path))\n     _floatx = _config.get('floatx', floatx())\n\n@@ -15,6 +15,8 @@ class ParanoidURLopener(FancyURLopener):\n \n def get_file(fname, origin, untar=False):\n     datadir = os.path.expanduser(os.path.join('~', '.keras', 'datasets'))\n+    if not os.access(datadir, os.W_OK):\n+        datadir = os.path.join('/tmp', '.keras', 'datasets')\n     if not os.path.exists(datadir):\n         os.makedirs(datadir)\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "keras#186d95ae9ce7ce3eb70ecdb715cc510717abaf2d", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 42 | Lines Deleted: 3 | Files Changed: 2 | Hunks: 6 | Methods Changed: 4 | Complexity Δ (Sum/Max): 8/8 | Churn Δ: 45 | Churn Cumulative: 7449 | Contributors (this commit): 36 | Commits (past 90d): 122 | Contributors (cumulative): 38 | DMM Complexity: 0.23076923076923078\n\nDIFF:\n@@ -685,13 +685,43 @@ class Reshape(Layer):\n         super(Reshape, self).__init__(**kwargs)\n         self.dims = tuple(dims)\n \n+    def _fix_unknown_dimension(self, input_shape, output_shape):\n+        \"\"\"\n+        A near direct port of the internal numpy function _fix_unknown_dimension\n+        in numpy/core/src/multiarray/shape.c\n+        \"\"\"\n+\n+        output_shape = list(output_shape)\n+\n+        msg = 'total size of new array must be unchanged'\n+\n+        known, unknown = 1, None\n+        for index, dim in enumerate(output_shape):\n+            if dim < 0:\n+                if unknown is None:\n+                    unknown = index\n+                else:\n+                    raise ValueError('can only specify one unknown dimension')\n+            else:\n+                known *= dim\n+\n+        original = np.prod(input_shape, dtype=int)\n+        if not unknown is None:\n+            if known == 0 or original % known != 0:\n+                raise ValueError(msg)\n+            output_shape[unknown] = original // known\n+        elif original != known:\n+            raise ValueError(msg)\n+\n+        return tuple(output_shape)\n+\n     @property\n     def output_shape(self):\n-        return (self.input_shape[0],) + self.dims\n+        return (self.input_shape[0],) + self._fix_unknown_dimension(self.input_shape[1:], self.dims)\n \n     def get_output(self, train=False):\n         X = self.get_input(train)\n-        return K.reshape(X, (-1,) + self.dims)\n+        return K.reshape(X, (-1,) + self.output_shape[1:])\n \n     def get_config(self):\n         config = {'name': self.__class__.__name__,\n\n@@ -22,10 +22,19 @@ def check_layer_output_shape(layer, input_data):\n # Core #\n ########\n def test_Reshape():\n-    layer = Reshape(dims=(2, 3))\n     input_data = np.random.random((2, 6))\n+\n+    layer = Reshape(dims=(2, 3))\n     check_layer_output_shape(layer, input_data)\n \n+    layer = Reshape(dims=(-1,))\n+    check_layer_output_shape(layer, input_data)\n+\n+    layer = Reshape(dims=(-1, 2))\n+    check_layer_output_shape(layer, input_data)\n+\n+    layer = Reshape(dims=(2, -1))\n+    check_layer_output_shape(layer, input_data)\n \n def test_Permute():\n     layer = Permute(dims=(1, 3, 2))\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "keras#b4eb1d9491cb96d6608fa83869aace06146ae793", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 5 | Lines Deleted: 3 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 8 | Churn Cumulative: 62 | Contributors (this commit): 4 | Commits (past 90d): 8 | Contributors (cumulative): 4 | DMM Complexity: None\n\nDIFF:\n@@ -4,9 +4,11 @@ import os\n import json\n from .common import epsilon, floatx, set_epsilon, set_floatx\n \n-_keras_dir = os.path.expanduser(os.path.join('~', '.keras'))\n-if not os.access(_keras_dir, os.W_OK):\n-    _keras_dir = os.path.join('/tmp', '.keras')\n+_keras_base_dir = os.path.expanduser('~')\n+if not os.access(_keras_base_dir, os.W_OK):\n+    _keras_base_dir = '/tmp'\n+\n+_keras_dir = os.path.join(_keras_base_dir, '.keras')\n if not os.path.exists(_keras_dir):\n     os.makedirs(_keras_dir)\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "keras#a98eec34f7b7df642252733af31f42ec67209071", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 4 | Lines Deleted: 3 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 7 | Churn Cumulative: 64 | Contributors (this commit): 5 | Commits (past 90d): 4 | Contributors (cumulative): 5 | DMM Complexity: 0.0\n\nDIFF:\n@@ -14,9 +14,10 @@ class ParanoidURLopener(FancyURLopener):\n \n \n def get_file(fname, origin, untar=False):\n-    datadir = os.path.expanduser(os.path.join('~', '.keras', 'datasets'))\n-    if not os.access(datadir, os.W_OK):\n-        datadir = os.path.join('/tmp', '.keras', 'datasets')\n+    datadir_base = os.path.expanduser(os.path.join('~', '.keras'))\n+    if not os.access(datadir_base, os.W_OK):\n+        datadir_base = os.path.join('/tmp', '.keras')\n+    datadir = os.path.join(datadir_base, 'datasets')\n     if not os.path.exists(datadir):\n         os.makedirs(datadir)\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "keras#03cd7bf493d5b0c33280ab4be001f4f3cf21514c", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 19 | Lines Deleted: 3 | Files Changed: 1 | Hunks: 3 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 22 | Churn Cumulative: 7189 | Contributors (this commit): 35 | Commits (past 90d): 116 | Contributors (cumulative): 35 | DMM Complexity: None\n\nDIFF:\n@@ -686,10 +686,26 @@ class Reshape(Layer):\n         self.dims = tuple(dims)\n \n     def _fix_unknown_dimension(self, input_shape, output_shape):\n-        \"\"\"\n+        '''Find and replace a single missing dimension in an output shape\n+        given and input shape.\n+        \n         A near direct port of the internal numpy function _fix_unknown_dimension\n         in numpy/core/src/multiarray/shape.c\n-        \"\"\"\n+\n+        # Arguments\n+            input_shape: shape of array being reshaped\n+\n+            output_shape: desired shaped of the array with at most\n+                a single -1 which indicates a dimension that should be\n+                derived from the input shape.\n+\n+        # Returns\n+            The new output shape with a -1 replaced with its computed value.\n+\n+            Raises a ValueError if the total array size of the output_shape is\n+            different then the input_shape, or more then one unknown dimension\n+            is specified.\n+        '''\n \n         output_shape = list(output_shape)\n \n@@ -706,7 +722,7 @@ class Reshape(Layer):\n                 known *= dim\n \n         original = np.prod(input_shape, dtype=int)\n-        if not unknown is None:\n+        if unknown is not None:\n             if known == 0 or original % known != 0:\n                 raise ValueError(msg)\n             output_shape[unknown] = original // known\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "keras#c95f5d10c222c0e596135f6d32ee70f18f2958c6", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 4083 | Contributors (this commit): 30 | Commits (past 90d): 20 | Contributors (cumulative): 30 | DMM Complexity: None\n\nDIFF:\n@@ -399,7 +399,7 @@ class Sequential(Model, containers.Sequential):\n         self.optimizer = optimizers.get(optimizer)\n \n         self.loss = objectives.get(loss)\n-        weighted_loss = weighted_objective(objectives.get(loss))\n+        weighted_loss = weighted_objective(self.loss)\n \n         # input of model\n         self.X_train = self.get_input(train=True)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "keras#643961723c6affe3d561375a2791fb1c7df851a5", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 3 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 388 | Contributors (this commit): 11 | Commits (past 90d): 11 | Contributors (cumulative): 11 | DMM Complexity: 0.0\n\nDIFF:\n@@ -26,12 +26,14 @@ def container_from_config(original_layer_dict, custom_objects={}):\n \n     if name == 'Merge':\n         mode = layer_dict.get('mode')\n+        concat_axis = layer_dict.get('concat_axis')\n+        dot_axes = layer_dict.get('dot_axes')\n         layers = layer_dict.get('layers')\n         layer_list = []\n         for layer in layers:\n             init_layer = container_from_config(layer)\n             layer_list.append(init_layer)\n-        merge_layer = Merge(layer_list, mode)\n+        merge_layer = Merge(layer_list, mode, concat_axis, dot_axes)\n         return merge_layer\n \n     elif name == 'Sequential':\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "keras#729f0765da577a4ebd879331f651b6d241a10632", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 132 | Contributors (this commit): 9 | Commits (past 90d): 5 | Contributors (cumulative): 9 | DMM Complexity: None\n\nDIFF:\n@@ -90,7 +90,7 @@ class Progbar(object):\n                 info += ' - %s:' % k\n                 if type(self.sum_values[k]) is list:\n                     avg = self.sum_values[k][0] / max(1, self.sum_values[k][1])\n-                    if avg > 1e-3:\n+                    if abs(avg) > 1e-3:\n                         info += ' %.4f' % avg\n                     else:\n                         info += ' %.4e' % avg\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "keras#c00cf10ef84273d473bec5cc2bba7d647b2689c7", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 6 | Lines Deleted: 4 | Files Changed: 1 | Hunks: 2 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 10 | Churn Cumulative: 838 | Contributors (this commit): 7 | Commits (past 90d): 20 | Contributors (cumulative): 7 | DMM Complexity: None\n\nDIFF:\n@@ -548,12 +548,14 @@ def conv2d(x, kernel, strides=(1, 1), border_mode='valid', dim_ordering='th',\n     if _on_gpu() and dnn.dnn_available():\n         if border_mode == 'same':\n             assert(strides == (1, 1))\n-            np_kernel = kernel.eval()\n-            pad_x = (np_kernel.shape[2] - strides[0]) // 2\n-            pad_y = (np_kernel.shape[3] - strides[1]) // 2\n             conv_out = dnn.dnn_conv(img=x,\n                                     kerns=kernel,\n-                                    border_mode=(pad_x, pad_y))\n+                                    border_mode='full')\n+            shift_x = (kernel.shape[2] - 1) // 2\n+            shift_y = (kernel.shape[3] - 1) // 2\n+            conv_out = conv_out[:, :,\n+                                shift_x:x.shape[2] + shift_x,\n+                                shift_y:x.shape[3] + shift_y]\n         else:\n             conv_out = dnn.dnn_conv(img=x,\n                                     kerns=kernel,\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "keras#579a219614557b11d3d20fd2ddce42aff1abf63b", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 19 | Lines Deleted: 5 | Files Changed: 2 | Hunks: 4 | Methods Changed: 5 | Complexity Δ (Sum/Max): 2/1 | Churn Δ: 24 | Churn Cumulative: 7714 | Contributors (this commit): 37 | Commits (past 90d): 130 | Contributors (cumulative): 41 | DMM Complexity: 1.0\n\nDIFF:\n@@ -1166,6 +1166,10 @@ class AutoEncoder(Layer):\n \n         self.decoder.set_previous(self.encoder)\n \n+        if weights is not None:\n+            self.set_weights(weights)\n+\n+    def build(self):\n         self.params = []\n         self.regularizers = []\n         self.constraints = []\n@@ -1179,11 +1183,9 @@ class AutoEncoder(Layer):\n                     self.params.append(p)\n                     self.constraints.append(c)\n \n-        if weights is not None:\n-            self.set_weights(weights)\n-\n-    def set_previous(self, node):\n-        self.encoder.set_previous(node)\n+    def set_previous(self, node, connection_map={}):\n+        self.encoder.set_previous(node, connection_map)\n+        super(AutoEncoder, self).set_previous(node, connection_map)\n \n     def get_weights(self):\n         weights = []\n\n@@ -1,5 +1,6 @@\n import pytest\n import numpy as np\n+from keras.models import Sequential\n from numpy.testing import assert_allclose\n \n from keras import backend as K\n@@ -113,6 +114,17 @@ def test_autoencoder():\n     _runner(layer)\n \n \n+def test_autoencoder_second_layer():\n+    # regression test for issue #1275\n+    encoder = core.Dense(input_dim=10, output_dim=2)\n+    decoder = core.Dense(input_dim=2, output_dim=10)\n+    model = Sequential()\n+    model.add(core.Dense(input_dim=20, output_dim=10))\n+    model.add(core.AutoEncoder(encoder=encoder, decoder=decoder,\n+                               output_reconstruction=False))\n+    model.compile(loss='mse', optimizer='sgd')\n+\n+\n def test_maxout_dense():\n     layer = core.MaxoutDense(10, 10, input_shape=(20,))\n     _runner(layer)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "keras#177f7b6b6eb65d783097c78f1cc05b65c202d580", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 31 | Lines Deleted: 11 | Files Changed: 2 | Hunks: 5 | Methods Changed: 3 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 42 | Churn Cumulative: 595 | Contributors (this commit): 8 | Commits (past 90d): 19 | Contributors (cumulative): 10 | DMM Complexity: 1.0\n\nDIFF:\n@@ -57,16 +57,6 @@ class BatchNormalization(Layer):\n         self.running_mean = K.zeros(input_shape)\n         self.running_std = K.ones(input_shape)\n \n-        # initialize self.updates: batch mean/std computation\n-        X = self.get_input(train=True)\n-        m = K.mean(X, axis=0)\n-        std = K.mean(K.square(X - m) + self.epsilon, axis=0)\n-        std = K.sqrt(std)\n-        mean_update = self.momentum * self.running_mean + (1-self.momentum) * m\n-        std_update = self.momentum * self.running_std + (1-self.momentum) * std\n-        self.updates = [(self.running_mean, mean_update),\n-                        (self.running_std, std_update)]\n-\n         if self.initial_weights is not None:\n             self.set_weights(self.initial_weights)\n             del self.initial_weights\n@@ -84,6 +74,13 @@ class BatchNormalization(Layer):\n     def get_output(self, train):\n         X = self.get_input(train)\n         if self.mode == 0:\n+            m = K.mean(X, axis=0)\n+            std = K.mean(K.square(X - m) + self.epsilon, axis=0)\n+            std = K.sqrt(std)\n+            mean_update = self.momentum * self.running_mean + (1-self.momentum) * m\n+            std_update = self.momentum * self.running_std + (1-self.momentum) * std\n+            self.updates = [(self.running_mean, mean_update),\n+                            (self.running_std, std_update)]\n             X_normed = ((X - self.running_mean) /\n                         (self.running_std + self.epsilon))\n         elif self.mode == 1:\n\n@@ -1,9 +1,10 @@\n import pytest\n import numpy as np\n+from keras.layers.core import Dense, Activation\n from numpy.testing import assert_allclose\n \n from keras.layers import normalization\n-from keras.models import Sequential\n+from keras.models import Sequential, Graph\n from keras import backend as K\n \n \n@@ -98,5 +99,27 @@ def test_batchnorm_save_weights():\n     norm.set_weights(weights)\n \n \n+def test_batchnorm_nested():\n+    # regression test for issue #1386\n+    g = Graph()\n+    g.add_input(\"input\", input_shape=[20])\n+    g.add_node(Dense(10), \"dense\", \"input\")\n+    g.add_node(normalization.BatchNormalization(), \"bn\", \"dense\")\n+    g.add_node(Activation('relu'), \"activ\", \"bn\")\n+    g.add_output(\"output\", \"activ\")\n+\n+    g2 = Graph()\n+    g2.add_input(\"input\", input_shape=[10])\n+    g2.add_node(Dense(15), \"dense\", \"input\")\n+    g2.add_node(normalization.BatchNormalization(), \"bn\", \"dense\")\n+    g2.add_node(Activation('relu'), \"activ\", \"bn\")\n+    g2.add_output(\"output\", \"activ\")\n+\n+    model = Sequential()\n+    model.add(g)\n+    model.add(g2)\n+    model.compile(loss=\"mse\", optimizer=\"adadelta\")\n+\n+\n if __name__ == '__main__':\n     pytest.main([__file__])\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "keras#582dfc42336dcb0ac5c5d96ad5b52a6b181dc695", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 2685 | Contributors (this commit): 16 | Commits (past 90d): 27 | Contributors (cumulative): 16 | DMM Complexity: None\n\nDIFF:\n@@ -73,7 +73,7 @@ class Recurrent(MaskedLayer):\n         To enable statefulness:\n             - specify `stateful=True` in the layer constructor.\n             - specify a fixed batch size for your model, by passing\n-                a `batch_input_size=(...)` to the first layer in your model.\n+                a `batch_input_shape=(...)` to the first layer in your model.\n                 This is the expected shape of your inputs *including the batch size*.\n                 It should be a tuple of integers, e.g. `(32, 10, 100)`.\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "keras#421a2cdf04b636a582a1b952332553339e9d70be", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 0 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 0 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 0 | Churn Cumulative: 0 | Contributors (this commit): 1 | Commits (past 90d): 1 | Contributors (cumulative): 1 | DMM Complexity: None\n\nDIFF:\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "keras#d401bb46dd23c8c9dac93c3aded1205da8ce4300", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 3 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 2 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 5 | Churn Cumulative: 7206 | Contributors (this commit): 36 | Commits (past 90d): 114 | Contributors (cumulative): 36 | DMM Complexity: None\n\nDIFF:\n@@ -1791,8 +1791,6 @@ class Highway(Layer):\n     '''Densely connected highway network,\n     a natural extension of LSTMs to feedforward networks.\n \n-    cite: http://arxiv.org/pdf/1505.00387v2.pdf\n-\n     # Input shape\n         2D tensor with shape: `(nb_samples, input_dim)`.\n \n@@ -1826,6 +1824,9 @@ class Highway(Layer):\n         input_dim: dimensionality of the input (integer).\n             This argument (or alternatively, the keyword argument `input_shape`)\n             is required when using this layer as the first layer in a model.\n+\n+    # References\n+        - [Highway Networks](http://arxiv.org/pdf/1505.00387v2.pdf)\n     '''\n     input_ndim = 2\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "keras#5c72e14034eb055482fbbb08e2bc5b48bd93c8c1", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 59 | Lines Deleted: 1 | Files Changed: 2 | Hunks: 4 | Methods Changed: 4 | Complexity Δ (Sum/Max): 12/8 | Churn Δ: 60 | Churn Cumulative: 930 | Contributors (this commit): 13 | Commits (past 90d): 9 | Contributors (cumulative): 14 | DMM Complexity: 1.0\n\nDIFF:\n@@ -275,12 +275,66 @@ class Adam(Optimizer):\n                 \"beta_2\": float(K.get_value(self.beta_2)),\n                 \"epsilon\": self.epsilon}\n \n+class Adamax(Optimizer):\n+    '''Adamax optimizer from Adam paper's Section 7. It is a variant\n+     of Adam based on the infinity norm.\n+\n+    Default parameters follow those provided in the paper.\n+\n+    # Arguments\n+        lr: float >= 0. Learning rate.\n+        beta_1/beta_2: floats, 0 < beta < 1. Generally close to 1.\n+        epsilon: float >= 0. Fuzz factor.\n+\n+    # References\n+        - [Adam - A Method for Stochastic Optimization](http://arxiv.org/abs/1412.6980v8)\n+    '''\n+    def __init__(self, lr=0.002, beta_1=0.9, beta_2=0.999, epsilon=1e-8,\n+                 *args, **kwargs):\n+        super(Adamax, self).__init__(**kwargs)\n+        self.__dict__.update(locals())\n+        self.iterations = K.variable(0)\n+        self.lr = K.variable(lr)\n+        self.beta_1 = K.variable(beta_1)\n+        self.beta_2 = K.variable(beta_2)\n+\n+    def get_updates(self, params, constraints, loss):\n+        grads = self.get_gradients(loss, params)\n+        self.updates = [(self.iterations, self.iterations+1.)]\n+\n+        t = self.iterations + 1\n+        lr_t = self.lr / (1 - K.pow(self.beta_1, t))\n+\n+        for p, g, c in zip(params, grads, constraints):\n+            # zero init of 1st moment\n+            m = K.variable(np.zeros(K.get_value(p).shape))\n+            # zero init of exponentially weighted infinity norm\n+            u = K.variable(np.zeros(K.get_value(p).shape))\n+\n+            m_t = (self.beta_1 * m) + (1 - self.beta_1) * g\n+            u_t = K.maximum(self.beta_2 * u, K.abs(g))\n+            p_t = p - lr_t * m_t / (u_t + self.epsilon)\n+\n+            self.updates.append((m, m_t))\n+            self.updates.append((u, u_t))\n+            self.updates.append((p, c(p_t)))  # apply constraints\n+        return self.updates\n+\n+    def get_config(self):\n+        return {\"name\": self.__class__.__name__,\n+                \"lr\": float(K.get_value(self.lr)),\n+                \"beta_1\": float(K.get_value(self.beta_1)),\n+                \"beta_2\": float(K.get_value(self.beta_2)),\n+                \"epsilon\": self.epsilon}\n+\n+\n # aliases\n sgd = SGD\n rmsprop = RMSprop\n adagrad = Adagrad\n adadelta = Adadelta\n adam = Adam\n+adamax = Adamax\n \n \n def get(identifier, kwargs=None):\n\n@@ -2,7 +2,7 @@ from __future__ import print_function\n import pytest\n \n from keras.utils.test_utils import get_test_data\n-from keras.optimizers import SGD, RMSprop, Adagrad, Adadelta, Adam\n+from keras.optimizers import SGD, RMSprop, Adagrad, Adadelta, Adam, Adamax\n from keras.models import Sequential\n from keras.layers.core import Dense, Activation\n from keras.utils.np_utils import to_categorical\n@@ -56,5 +56,9 @@ def test_adam():\n     assert(_test_optimizer(Adam()))\n \n \n+def test_adamax():\n+    assert(_test_optimizer(Adamax()))\n+\n+\n if __name__ == '__main__':\n     pytest.main([__file__])\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "keras#9d15c9611570bd3ecab52ed924c69a60ac3b2784", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 69 | Lines Deleted: 9 | Files Changed: 4 | Hunks: 9 | Methods Changed: 4 | Complexity Δ (Sum/Max): 10/4 | Churn Δ: 78 | Churn Cumulative: 4231 | Contributors (this commit): 19 | Commits (past 90d): 68 | Contributors (cumulative): 30 | DMM Complexity: 0.075\n\nDIFF:\n@@ -236,6 +236,24 @@ def permute_dimensions(x, pattern):\n     return tf.transpose(x, perm=pattern)\n \n \n+def resize_images(X, height, width, height_factor, width_factor, dim_ordering):\n+    '''Resize the images contained in a 4D tensor of shape\n+    - [batch, channels, height, width] (for 'th' dim_ordering)\n+    - [batch, height, width, channels] (for 'tf' dim_ordering)\n+    by a factor of (height_factor, width_factor)\n+    '''\n+    new_height = height * height_factor\n+    new_width = width * width_factor\n+    if dim_ordering == 'th':\n+        X = permute_dimensions(X, [0, 2, 3, 1])\n+        X = tf.image.resize_nearest_neighbor(X, (new_height, new_width))\n+        return permute_dimensions(X, [0, 3, 1, 2])\n+    elif dim_ordering == 'tf':\n+        return tf.image.resize_nearest_neighbor(X, (new_height, new_width))\n+    else:\n+        raise Exception('Invalid dim_ordering: ' + dim_ordering)\n+\n+\n def repeat_elements(x, rep, axis):\n     '''Repeats the elements of a tensor along an axis, like np.repeat\n \n\n@@ -251,6 +251,23 @@ def repeat_elements(x, rep, axis):\n     '''\n     return T.repeat(x, rep, axis=axis)\n \n+\n+def resize_images(X, height, width, height_factor, width_factor, dim_ordering):\n+    '''Resize the images contained in a 4D tensor of shape\n+    - [batch, channels, height, width] (for 'th' dim_ordering)\n+    - [batch, height, width, channels] (for 'tf' dim_ordering)\n+    by a factor of (height_factor, width_factor)\n+    '''\n+    if self.dim_ordering == 'th':\n+        output = K.repeat_elements(X, height_factor, axis=2)\n+        output = K.repeat_elements(output, width_factor, axis=3)\n+    elif self.dim_ordering == 'tf':\n+        output = K.repeat_elements(X, height_factor, axis=1)\n+        output = K.repeat_elements(output, width_factor, axis=2)\n+    else:\n+        raise Exception('Invalid dim_ordering: ' + dim_ordering)\n+\n+\n def repeat(x, n):\n     '''Repeat a 2D tensor.\n \n\n@@ -668,15 +668,13 @@ class UpSampling2D(Layer):\n \n     def get_output(self, train=False):\n         X = self.get_input(train)\n+        input_shape = self.input_shape\n         if self.dim_ordering == 'th':\n-            output = K.repeat_elements(X, self.size[0], axis=2)\n-            output = K.repeat_elements(output, self.size[1], axis=3)\n+            height, width = input_shape[2], input_shape[3]\n         elif self.dim_ordering == 'tf':\n-            output = K.repeat_elements(X, self.size[0], axis=1)\n-            output = K.repeat_elements(output, self.size[1], axis=2)\n-        else:\n-            raise Exception('Invalid dim_ordering: ' + self.dim_ordering)\n-        return output\n+            height, width = input_shape[1], input_shape[2]\n+        return K.resize_images(X, height, width, self.size[0], self.size[1],\n+                               self.dim_ordering)\n \n     def get_config(self):\n         config = {'name': self.__class__.__name__,\n\n@@ -188,16 +188,43 @@ def test_upsampling_2d():\n     input_nb_row = 11\n     input_nb_col = 12\n \n-    input = np.ones((nb_samples, stack_size, input_nb_row, input_nb_col))\n+\n+    for dim_ordering in ['th', 'tf']:\n+        if dim_ordering == 'th':\n+            input = np.random.rand(nb_samples, stack_size, input_nb_row,\n+                                   input_nb_col)\n+        else:  # tf\n+            input = np.random.rand(nb_samples, input_nb_row, input_nb_col,\n+                                   stack_size)\n \n         for length_row in [2, 3, 9]:\n             for length_col in [2, 3, 9]:\n-            layer = convolutional.UpSampling2D(size=(length_row, length_col))\n+                    layer = convolutional.UpSampling2D(\n+                        size=(length_row, length_col),\n+                        input_shape=input.shape[1:],\n+                        dim_ordering=dim_ordering)\n                     layer.input = K.variable(input)\n                     for train in [True, False]:\n                         out = K.eval(layer.get_output(train))\n+                        if dim_ordering == 'th':\n                             assert out.shape[2] == length_row * input_nb_row\n                             assert out.shape[3] == length_col * input_nb_col\n+                        else:  # tf\n+                            assert out.shape[1] == length_row * input_nb_row\n+                            assert out.shape[2] == length_col * input_nb_col\n+\n+                        # compare with numpy\n+                        if dim_ordering == 'th':\n+                            expected_out = np.repeat(input, length_row, axis=2)\n+                            expected_out = np.repeat(expected_out, length_col,\n+                                                     axis=3)\n+                        else:  # tf\n+                            expected_out = np.repeat(input, length_row, axis=1)\n+                            expected_out = np.repeat(expected_out, length_col,\n+                                                     axis=2)\n+\n+                        assert_allclose(out, expected_out)\n+\n                     layer.get_config()\n \n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "keras#b17e4c5edfa8a82c82054d0ba3c92d568b1f4d20", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 3/3 | Churn Δ: 2 | Churn Cumulative: 1124 | Contributors (this commit): 16 | Commits (past 90d): 37 | Contributors (cumulative): 16 | DMM Complexity: None\n\nDIFF:\n@@ -313,7 +313,7 @@ class Graph(Layer):\n         if dtype == 'float':\n             layer.input = K.placeholder(shape=layer.input_shape, name=name)\n         else:\n-            if len(input_shape) == 1:\n+            if (input_shape and len(input_shape) == 1) or (batch_input_shape and len(batch_input_shape) == 2):\n                 layer.input = K.placeholder(shape=layer.input_shape,\n                                             dtype='int32',\n                                             name=name)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "keras#69e19b1e03492c54179bf98ea3cab7c7d032cf2b", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 9 | Lines Deleted: 7 | Files Changed: 1 | Hunks: 7 | Methods Changed: 7 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 16 | Churn Cumulative: 22 | Contributors (this commit): 3 | Commits (past 90d): 3 | Contributors (cumulative): 3 | DMM Complexity: 1.0\n\nDIFF:\n@@ -32,32 +32,34 @@ def _test_optimizer(optimizer, target=0.9):\n     history = model.fit(X_train, y_train, nb_epoch=12, batch_size=16,\n                         validation_data=(X_test, y_test),\n                         show_accuracy=True, verbose=2)\n-    return history.history['val_acc'][-1] > target\n+    config = optimizer.get_config()\n+    assert type(config) == dict\n+    assert history.history['val_acc'][-1] > target\n \n \n def test_sgd():\n     sgd = SGD(lr=0.01, momentum=0.9, nesterov=True)\n-    assert(_test_optimizer(sgd))\n+    _test_optimizer(sgd)\n \n \n def test_rmsprop():\n-    assert(_test_optimizer(RMSprop()))\n+    _test_optimizer(RMSprop())\n \n \n def test_adagrad():\n-    assert(_test_optimizer(Adagrad()))\n+    _test_optimizer(Adagrad())\n \n \n def test_adadelta():\n-    assert(_test_optimizer(Adadelta()))\n+    _test_optimizer(Adadelta())\n \n \n def test_adam():\n-    assert(_test_optimizer(Adam()))\n+    _test_optimizer(Adam())\n \n \n def test_adamax():\n-    assert(_test_optimizer(Adamax()))\n+    _test_optimizer(Adamax())\n \n \n if __name__ == '__main__':\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "keras#f447644900fd1c7653ce4c9a3728ce20ba20f610", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 3 | Lines Deleted: 3 | Files Changed: 2 | Hunks: 3 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 6 | Churn Cumulative: 142 | Contributors (this commit): 8 | Commits (past 90d): 9 | Contributors (cumulative): 9 | DMM Complexity: None\n\nDIFF:\n@@ -1 +1 @@\n-__version__ = '0.3.0'\r\n+__version__ = '0.3.1'\r\n\n@@ -3,12 +3,12 @@ from setuptools import find_packages\n \n \n setup(name='Keras',\n-      version='0.3.0',\n+      version='0.3.1',\n       description='Theano-based Deep Learning library',\n       author='Francois Chollet',\n       author_email='francois.chollet@gmail.com',\n       url='https://github.com/fchollet/keras',\n-      download_url='https://github.com/fchollet/keras/tarball/0.3.0',\n+      download_url='https://github.com/fchollet/keras/tarball/0.3.1',\n       license='MIT',\n       install_requires=['theano', 'pyyaml', 'six'],\n       extras_require={\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "keras#4330fd78e96ee4974713fcf6988ae8c4c0d96530", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 8 | Lines Deleted: 6 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 14 | Churn Cumulative: 869 | Contributors (this commit): 7 | Commits (past 90d): 22 | Contributors (cumulative): 7 | DMM Complexity: 1.0\n\nDIFF:\n@@ -258,12 +258,14 @@ def resize_images(X, height, width, height_factor, width_factor, dim_ordering):\n     - [batch, height, width, channels] (for 'tf' dim_ordering)\n     by a factor of (height_factor, width_factor)\n     '''\n-    if self.dim_ordering == 'th':\n-        output = K.repeat_elements(X, height_factor, axis=2)\n-        output = K.repeat_elements(output, width_factor, axis=3)\n-    elif self.dim_ordering == 'tf':\n-        output = K.repeat_elements(X, height_factor, axis=1)\n-        output = K.repeat_elements(output, width_factor, axis=2)\n+    if dim_ordering == 'th':\n+        output = repeat_elements(X, height_factor, axis=2)\n+        output = repeat_elements(output, width_factor, axis=3)\n+        return output\n+    elif dim_ordering == 'tf':\n+        output = repeat_elements(X, height_factor, axis=1)\n+        output = repeat_elements(output, width_factor, axis=2)\n+        return output\n     else:\n         raise Exception('Invalid dim_ordering: ' + dim_ordering)\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "keras#01395f13ed75b9b66f8dde757f9865d2a1d4ff87", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 11 | Lines Deleted: 12 | Files Changed: 3 | Hunks: 8 | Methods Changed: 5 | Complexity Δ (Sum/Max): -2/0 | Churn Δ: 23 | Churn Cumulative: 4000 | Contributors (this commit): 19 | Commits (past 90d): 65 | Contributors (cumulative): 27 | DMM Complexity: 0.0\n\nDIFF:\n@@ -236,19 +236,22 @@ def permute_dimensions(x, pattern):\n     return tf.transpose(x, perm=pattern)\n \n \n-def resize_images(X, height, width, height_factor, width_factor, dim_ordering):\n+def resize_images(X, height_factor, width_factor, dim_ordering):\n     '''Resize the images contained in a 4D tensor of shape\n     - [batch, channels, height, width] (for 'th' dim_ordering)\n     - [batch, height, width, channels] (for 'tf' dim_ordering)\n-    by a factor of (height_factor, width_factor)\n+    by a factor of (height_factor, width_factor). Both factors should be\n+    positive integers.\n     '''\n-    new_height = height * height_factor\n-    new_width = width * width_factor\n     if dim_ordering == 'th':\n+        new_height = shape(X)[2].value * height_factor\n+        new_width = shape(X)[3].value * width_factor\n         X = permute_dimensions(X, [0, 2, 3, 1])\n         X = tf.image.resize_nearest_neighbor(X, (new_height, new_width))\n         return permute_dimensions(X, [0, 3, 1, 2])\n     elif dim_ordering == 'tf':\n+        new_height = shape(X)[1].value * height_factor\n+        new_width = shape(X)[2].value * width_factor\n         return tf.image.resize_nearest_neighbor(X, (new_height, new_width))\n     else:\n         raise Exception('Invalid dim_ordering: ' + dim_ordering)\n\n@@ -252,11 +252,12 @@ def repeat_elements(x, rep, axis):\n     return T.repeat(x, rep, axis=axis)\n \n \n-def resize_images(X, height, width, height_factor, width_factor, dim_ordering):\n+def resize_images(X, height_factor, width_factor, dim_ordering):\n     '''Resize the images contained in a 4D tensor of shape\n     - [batch, channels, height, width] (for 'th' dim_ordering)\n     - [batch, height, width, channels] (for 'tf' dim_ordering)\n-    by a factor of (height_factor, width_factor)\n+    by a factor of (height_factor, width_factor). Both factors should be\n+    positive integers.\n     '''\n     if dim_ordering == 'th':\n         output = repeat_elements(X, height_factor, axis=2)\n\n@@ -668,12 +668,7 @@ class UpSampling2D(Layer):\n \n     def get_output(self, train=False):\n         X = self.get_input(train)\n-        input_shape = self.input_shape\n-        if self.dim_ordering == 'th':\n-            height, width = input_shape[2], input_shape[3]\n-        elif self.dim_ordering == 'tf':\n-            height, width = input_shape[1], input_shape[2]\n-        return K.resize_images(X, height, width, self.size[0], self.size[1],\n+        return K.resize_images(X, self.size[0], self.size[1],\n                                self.dim_ordering)\n \n     def get_config(self):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "keras#458641f33aeb4861f011605e8f1b4441f8825651", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 14 | Lines Deleted: 2 | Files Changed: 3 | Hunks: 5 | Methods Changed: 3 | Complexity Δ (Sum/Max): -3/0 | Churn Δ: 16 | Churn Cumulative: 2046 | Contributors (this commit): 9 | Commits (past 90d): 56 | Contributors (cumulative): 16 | DMM Complexity: 1.0\n\nDIFF:\n@@ -510,6 +510,12 @@ def dropout(x, level, seed=None):\n     return tf.nn.dropout(x * 1., retain_prob, seed=seed)\n \n \n+def l2_normalize(x, axis):\n+    if axis < 0:\n+        axis = axis % len(x.get_shape())\n+    return tf.nn.l2_normalize(x, dim=axis)\n+\n+\n # CONVOLUTIONS\n \n \n\n@@ -517,9 +517,13 @@ def dropout(x, level, seed=None):\n     return x\n \n \n-# CONVOLUTIONS\n+def l2_normalize(x, axis):\n+    norm = T.sqrt(T.sum(T.square(x), axis=axis, keepdims=True))\n+    return x / norm\n \n \n+# CONVOLUTIONS\n+\n def conv2d(x, kernel, strides=(1, 1), border_mode='valid', dim_ordering='th',\n            image_shape=None, filter_shape=None):\n     '''\n\n@@ -281,9 +281,11 @@ class TestBackend(object):\n         check_two_tensor_operation('binary_crossentropy', (4, 2), (4, 2), from_logits=True)\n         check_two_tensor_operation('categorical_crossentropy', (4, 2), (4, 2), from_logits=True)\n         check_two_tensor_operation('binary_crossentropy', (4, 2), (4, 2), from_logits=False)\n-\n         check_two_tensor_operation('categorical_crossentropy', (4, 2), (4, 2), from_logits=False)\n \n+        check_single_tensor_operation('l2_normalize', (4, 3), axis=-1)\n+        check_single_tensor_operation('l2_normalize', (4, 3), axis=1)\n+\n     # def test_conv2d(self):\n     #     '''conv2d works \"properly\" with Theano and TF but outputs different\n     #     values in each case. Cause unclear (input / kernel shape format?)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "keras#6cb1172668269be864b57b3cfedb19c9587ecf77", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 11 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 3 | Methods Changed: 3 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 12 | Churn Cumulative: 305 | Contributors (this commit): 8 | Commits (past 90d): 7 | Contributors (cumulative): 8 | DMM Complexity: 1.0\n\nDIFF:\n@@ -44,15 +44,25 @@ def binary_crossentropy(y_true, y_pred):\n     return K.mean(K.binary_crossentropy(y_pred, y_true), axis=-1)\n \n \n-def poisson_loss(y_true, y_pred):\n+def poisson(y_true, y_pred):\n     return K.mean(y_pred - y_true * K.log(y_pred + K.epsilon()), axis=-1)\n \n+\n+def cosine_proximity(y_true, y_pred):\n+    assert K.ndim(y_true) == 2\n+    assert K.ndim(y_pred) == 2\n+    y_true = K.l2_normalize(y_true, axis=1)\n+    y_pred = K.l2_normalize(y_pred, axis=1)\n+    return -K.mean(y_true * y_pred, axis=1)\n+\n+\n # aliases\n mse = MSE = mean_squared_error\n rmse = RMSE = root_mean_squared_error\n mae = MAE = mean_absolute_error\n mape = MAPE = mean_absolute_percentage_error\n msle = MSLE = mean_squared_logarithmic_error\n+cosine = cosine_proximity\n \n from .utils.generic_utils import get_from_module\n def get(identifier):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "keras#13379da81bff3d72d7ade8b662640545f4c1b559", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 3 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 3/3 | Churn Δ: 5 | Churn Cumulative: 885 | Contributors (this commit): 7 | Commits (past 90d): 25 | Contributors (cumulative): 7 | DMM Complexity: None\n\nDIFF:\n@@ -575,8 +575,9 @@ def conv2d(x, kernel, strides=(1, 1), border_mode='valid', dim_ordering='th',\n             conv_out = dnn.dnn_conv(img=x,\n                                     kerns=kernel,\n                                     border_mode='full')\n-            shift_x = (kernel.shape[2] - 1) // 2\n-            shift_y = (kernel.shape[3] - 1) // 2\n+            np_kernel = kernel.eval()\n+            shift_x = (np_kernel.shape[2] - 1) // 2\n+            shift_y = (np_kernel.shape[3] - 1) // 2\n             conv_out = conv_out[:, :,\n                                 shift_x:x.shape[2] + shift_x,\n                                 shift_y:x.shape[3] + shift_y]\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "keras#d02ea0346289418958b241e9a3df7eb6ca560cdd", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 3 | Lines Deleted: 3 | Files Changed: 1 | Hunks: 2 | Methods Changed: 2 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 6 | Churn Cumulative: 4089 | Contributors (this commit): 31 | Commits (past 90d): 19 | Contributors (cumulative): 31 | DMM Complexity: None\n\nDIFF:\n@@ -453,8 +453,8 @@ class Sequential(Model, containers.Sequential):\n         self._train = K.function(train_ins, [train_loss], updates=updates)\n         self._train_with_acc = K.function(train_ins, [train_loss, train_accuracy], updates=updates)\n         self._predict = K.function(predict_ins, [self.y_test], updates=self.state_updates)\n-        self._test = K.function(test_ins, [test_loss])\n-        self._test_with_acc = K.function(test_ins, [test_loss, test_accuracy])\n+        self._test = K.function(test_ins, [test_loss], updates=self.state_updates)\n+        self._test_with_acc = K.function(test_ins, [test_loss, test_accuracy], updates=self.state_updates)\n \n     def fit(self, X, y, batch_size=128, nb_epoch=100, verbose=1, callbacks=[],\n             validation_split=0., validation_data=None, shuffle=True,\n@@ -1049,7 +1049,7 @@ class Graph(Model, containers.Graph):\n         self.loss = loss\n \n         self._train = K.function(train_ins, [train_loss], updates=updates)\n-        self._test = K.function(test_ins, [test_loss])\n+        self._test = K.function(test_ins, [test_loss], updates=self.state_updates)\n         self._predict = K.function(inputs=ins, outputs=ys_test,\n                                    updates=self.state_updates)\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "keras#f8dd6da08df4b79f344a302abe54c7b9df26a1c7", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 3 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 5 | Churn Cumulative: 890 | Contributors (this commit): 7 | Commits (past 90d): 26 | Contributors (cumulative): 7 | DMM Complexity: None\n\nDIFF:\n@@ -601,8 +601,9 @@ def conv2d(x, kernel, strides=(1, 1), border_mode='valid', dim_ordering='th',\n                                       image_shape=image_shape,\n                                       filter_shape=filter_shape)\n         if border_mode == 'same':\n-            shift_x = (kernel.shape[2] - 1) // 2\n-            shift_y = (kernel.shape[3] - 1) // 2\n+            np_kernel = kernel.eval()\n+            shift_x = (np_kernel.shape[2] - 1) // 2\n+            shift_y = (np_kernel.shape[3] - 1) // 2\n             conv_out = conv_out[:, :,\n                                 shift_x:x.shape[2] + shift_x,\n                                 shift_y:x.shape[3] + shift_y]\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "keras#fe18ad8dde6b4d1597cddcadfcf5571e1ec83cd4", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 3 | Lines Deleted: 5 | Files Changed: 1 | Hunks: 3 | Methods Changed: 1 | Complexity Δ (Sum/Max): -1/0 | Churn Δ: 8 | Churn Cumulative: 7214 | Contributors (this commit): 36 | Commits (past 90d): 109 | Contributors (cumulative): 36 | DMM Complexity: 0.0\n\nDIFF:\n@@ -1,6 +1,6 @@\n # -*- coding: utf-8 -*-\n from __future__ import absolute_import\n-from __future__ import division\n+from __future__ import divisionla\n \n import numpy as np\n \n@@ -1382,12 +1382,10 @@ class Lambda(Layer):\n             return tuple(shape)\n \n     def get_output(self, train=False):\n+        X = self.get_input(train)\n         func = marshal.loads(self.function)\n         func = types.FunctionType(func, globals())\n-        if hasattr(self, 'previous'):\n-            return func(self.previous.get_output(train))\n-        else:\n-            return func(self.input)\n+        return func(X)\n \n \n class MaskedLambda(MaskedLayer, Lambda):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
