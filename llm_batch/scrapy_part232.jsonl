{"custom_id": "scrapy#0a0b60a59f75ef1b4976b811011bd50b78f9cec8", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 20 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 2/2 | Churn Δ: 20 | Churn Cumulative: 935 | Contributors (this commit): 6 | Commits (past 90d): 4 | Contributors (cumulative): 6 | DMM Complexity: 1.0\n\nDIFF:\n@@ -290,6 +290,26 @@ class StripUrl(unittest.TestCase):\n             self.assertEqual(strip_url(i, strip_credentials=True), o)\n             self.assertEqual(strip_url(urlparse(i), strip_credentials=True), o)\n \n+    def test_credentials_encoded_delims(self):\n+        for i, o in [\n+            # user: \"username@\"\n+            # password: none\n+            ('http://username%40@www.example.com/index.html?somekey=somevalue#section',\n+             'http://www.example.com/index.html?somekey=somevalue'),\n+\n+            # user: \"username:pass\"\n+            # password: \"\"\n+            ('https://username%3Apass:@www.example.com/index.html?somekey=somevalue#section',\n+             'https://www.example.com/index.html?somekey=somevalue'),\n+\n+            # user: \"me\"\n+            # password: \"user@domain.com\"\n+            ('ftp://me:user%40domain.com@www.example.com/index.html?somekey=somevalue#section',\n+             'ftp://www.example.com/index.html?somekey=somevalue'),\n+            ]:\n+            self.assertEqual(strip_url(i, strip_credentials=True), o)\n+            self.assertEqual(strip_url(urlparse(i), strip_credentials=True), o)\n+\n     def test_default_ports_creds_off(self):\n         for i, o in [\n             ('http://username:password@www.example.com:80/index.html?somekey=somevalue#section',\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "scrapy#c808a97c74718f72f53a3c00eca77f60c26fb6ba", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 49 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 4 | Methods Changed: 1 | Complexity Δ (Sum/Max): 4/4 | Churn Δ: 49 | Churn Cumulative: 628 | Contributors (this commit): 2 | Commits (past 90d): 3 | Contributors (cumulative): 2 | DMM Complexity: 1.0\n\nDIFF:\n@@ -17,7 +17,9 @@ POLICY_NO_REFERRER = \"no-referrer\"\n POLICY_NO_REFERRER_WHEN_DOWNGRADE = \"no-referrer-when-downgrade\"\n POLICY_SAME_ORIGIN = \"same-origin\"\n POLICY_ORIGIN = \"origin\"\n+POLICY_STRICT_ORIGIN = \"strict-origin\"\n POLICY_ORIGIN_WHEN_CROSS_ORIGIN = \"origin-when-cross-origin\"\n+POLICY_STRICT_ORIGIN_WHEN_CROSS_ORIGIN = \"strict-origin-when-cross-origin\"\n POLICY_UNSAFE_URL = \"unsafe-url\"\n POLICY_SCRAPY_DEFAULT = \"scrapy-default\"\n \n@@ -139,6 +141,26 @@ class OriginPolicy(ReferrerPolicy):\n         return self.origin_referrer(response)\n \n \n+class StrictOriginPolicy(ReferrerPolicy):\n+    \"\"\"\n+    https://www.w3.org/TR/referrer-policy/#referrer-policy-strict-origin\n+\n+    The \"strict-origin\" policy sends the ASCII serialization\n+    of the origin of the request client when making requests:\n+    - from a TLS-protected environment settings object to a potentially trustworthy URL, and\n+    - from non-TLS-protected environment settings objects to any origin.\n+\n+    Requests from TLS-protected request clients to non- potentially trustworthy URLs,\n+    on the other hand, will contain no referrer information.\n+    A Referer HTTP header will not be sent.\n+    \"\"\"\n+    name = POLICY_STRICT_ORIGIN\n+\n+    def referrer(self, response, request):\n+        if urlparse_cached(response).scheme == urlparse_cached(request).scheme:\n+            return self.origin_referrer(response)\n+\n+\n class OriginWhenCrossOriginPolicy(ReferrerPolicy):\n     \"\"\"\n     https://www.w3.org/TR/referrer-policy/#referrer-policy-origin-when-cross-origin\n@@ -160,6 +182,33 @@ class OriginWhenCrossOriginPolicy(ReferrerPolicy):\n             return origin\n \n \n+class StrictOriginWhenCrossOriginPolicy(ReferrerPolicy):\n+    \"\"\"\n+    https://www.w3.org/TR/referrer-policy/#referrer-policy-strict-origin-when-cross-origin\n+\n+    The \"strict-origin-when-cross-origin\" policy specifies that a full URL,\n+    stripped for use as a referrer, is sent as referrer information\n+    when making same-origin requests from a particular request client,\n+    and only the ASCII serialization of the origin of the request client\n+    when making cross-origin requests:\n+\n+    - from a TLS-protected environment settings object to a potentially trustworthy URL, and\n+    - from non-TLS-protected environment settings objects to any origin.\n+\n+    Requests from TLS-protected clients to non- potentially trustworthy URLs,\n+    on the other hand, will contain no referrer information.\n+    A Referer HTTP header will not be sent.\n+    \"\"\"\n+    name = POLICY_STRICT_ORIGIN_WHEN_CROSS_ORIGIN\n+\n+    def referrer(self, response, request):\n+        origin = self.origin(response)\n+        if origin == self.origin(request):\n+            return self.stripped_referrer(response)\n+        else:\n+            return origin\n+\n+\n class UnsafeUrlPolicy(ReferrerPolicy):\n     \"\"\"\n     https://www.w3.org/TR/referrer-policy/#referrer-policy-unsafe-url\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "scrapy#5cef67ae75dca229bd1b1f3ac61f52309d1ca5a4", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 74 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 8 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 75 | Churn Cumulative: 663 | Contributors (this commit): 4 | Commits (past 90d): 1 | Contributors (cumulative): 4 | DMM Complexity: None\n\nDIFF:\n@@ -8,6 +8,7 @@ from scrapy.spidermiddlewares.referer import RefererMiddleware, \\\n     POLICY_NO_REFERRER, POLICY_NO_REFERRER_WHEN_DOWNGRADE, \\\n     POLICY_SAME_ORIGIN, POLICY_ORIGIN, POLICY_ORIGIN_WHEN_CROSS_ORIGIN, \\\n     POLICY_SCRAPY_DEFAULT, POLICY_UNSAFE_URL, \\\n+    POLICY_STRICT_ORIGIN, POLICY_STRICT_ORIGIN_WHEN_CROSS_ORIGIN, \\\n     DefaultReferrerPolicy, \\\n     NoReferrerPolicy, NoReferrerWhenDowngradePolicy, \\\n     OriginWhenCrossOriginPolicy, OriginPolicy, \\\n@@ -39,7 +40,6 @@ class TestRefererMiddleware(TestCase):\n         for origin, target, referrer in self.scenarii:\n             response = self.get_response(origin)\n             request = self.get_request(target)\n-\n             out = list(self.mw.process_spider_output(response, [request], self.spider))\n             self.assertEquals(out[0].headers.get('Referer'), referrer)\n \n@@ -154,6 +154,25 @@ class MixinOrigin(object):\n     ]\n \n \n+class MixinStrictOrigin(object):\n+    scenarii = [\n+        # TLS or non-TLS to TLS or non-TLS: referrer origin is sent but not for downgrades\n+        ('https://example.com/page.html',   'https://example.com/not-page.html',    b'https://example.com/'),\n+        ('https://example.com/page.html',   'https://scrapy.org',                   b'https://example.com/'),\n+        ('http://example.com/page.html',    'http://scrapy.org',                    b'http://example.com/'),\n+\n+        # downgrade: send nothing\n+        ('https://example.com/page.html',   'http://scrapy.org',                    None),\n+\n+        # upgrade: send origin\n+        ('http://example.com/page.html',    'https://scrapy.org',                   b'http://example.com/'),\n+\n+        # test for user/password stripping\n+        ('https://user:password@example.com/page.html', 'https://scrapy.org',       b'https://example.com/'),\n+        ('https://user:password@example.com/page.html', 'http://scrapy.org',        None),\n+    ]\n+\n+\n class MixinOriginWhenCrossOrigin(object):\n     scenarii = [\n         # Same origin (protocol, host, port): send referrer\n@@ -189,6 +208,44 @@ class MixinOriginWhenCrossOrigin(object):\n     ]\n \n \n+class MixinStrictOriginWhenCrossOrigin(object):\n+    scenarii = [\n+        # Same origin (protocol, host, port): send referrer\n+        ('https://example.com/page.html',       'https://example.com/not-page.html',        b'https://example.com/page.html'),\n+        ('http://example.com/page.html',        'http://example.com/not-page.html',         b'http://example.com/page.html'),\n+        ('https://example.com:443/page.html',   'https://example.com/not-page.html',        b'https://example.com/page.html'),\n+        ('http://example.com:80/page.html',     'http://example.com/not-page.html',         b'http://example.com/page.html'),\n+        ('http://example.com/page.html',        'http://example.com:80/not-page.html',      b'http://example.com/page.html'),\n+        ('http://example.com:8888/page.html',   'http://example.com:8888/not-page.html',    b'http://example.com:8888/page.html'),\n+\n+        # Different host: send origin as referrer\n+        ('https://example2.com/page.html',  'https://scrapy.org/otherpage.html',        b'https://example2.com/'),\n+        ('https://example2.com/page.html',  'https://not.example2.com/otherpage.html',  b'https://example2.com/'),\n+        ('http://example2.com/page.html',   'http://not.example2.com/otherpage.html',   b'http://example2.com/'),\n+        # exact match required\n+        ('http://example2.com/page.html',   'http://www.example2.com/otherpage.html',   b'http://example2.com/'),\n+\n+        # Different port: send origin as referrer\n+        ('https://example3.com:444/page.html',  'https://example3.com/not-page.html',   b'https://example3.com:444/'),\n+        ('http://example3.com:81/page.html',    'http://example3.com/not-page.html',    b'http://example3.com:81/'),\n+\n+        # downgrade\n+        ('https://example4.com/page.html',  'http://example4.com/not-page.html',    None),\n+        ('https://example4.com/page.html',  'http://not.example4.com/',             None),\n+        ('ftp://example4.com/urls.zip',     'http://example4.com/not-page.html',    None),\n+\n+        # Different protocols: send origin as referrer\n+        ('ftps://example4.com/urls.zip',    'https://example4.com/not-page.html',   b'ftps://example4.com/'),\n+        ('ftps://example4.com/urls.zip',    'https://example4.com/not-page.html',   b'ftps://example4.com/'),\n+\n+        # test for user/password stripping\n+        ('https://user:password@example5.com/page.html', 'https://example5.com/not-page.html',  b'https://example5.com/page.html'),\n+\n+        # TLS to non-TLS downgrade: send nothing\n+        ('https://user:password@example5.com/page.html', 'http://example5.com/not-page.html',   None),\n+    ]\n+\n+\n class MixinUnsafeUrl(object):\n     scenarii = [\n         # TLS to TLS: send referrer\n@@ -241,10 +298,18 @@ class TestRefererMiddlewareSettingsOrigin(MixinOrigin, TestRefererMiddleware):\n     settings = {'REFERER_POLICY': 'scrapy.spidermiddlewares.referer.OriginPolicy'}\n \n \n+class TestRefererMiddlewareSettingsStrictOrigin(MixinStrictOrigin, TestRefererMiddleware):\n+    settings = {'REFERER_POLICY': 'scrapy.spidermiddlewares.referer.StrictOriginPolicy'}\n+\n+\n class TestRefererMiddlewareSettingsOriginWhenCrossOrigin(MixinOriginWhenCrossOrigin, TestRefererMiddleware):\n     settings = {'REFERER_POLICY': 'scrapy.spidermiddlewares.referer.OriginWhenCrossOriginPolicy'}\n \n \n+class TestRefererMiddlewareSettingsStrictOriginWhenCrossOrigin(MixinStrictOriginWhenCrossOrigin, TestRefererMiddleware):\n+    settings = {'REFERER_POLICY': 'scrapy.spidermiddlewares.referer.StrictOriginWhenCrossOriginPolicy'}\n+\n+\n class TestRefererMiddlewareSettingsUnsafeUrl(MixinUnsafeUrl, TestRefererMiddleware):\n     settings = {'REFERER_POLICY': 'scrapy.spidermiddlewares.referer.UnsafeUrlPolicy'}\n \n@@ -297,10 +362,18 @@ class TestRefererMiddlewareOrigin(MixinOrigin, TestRefererMiddleware):\n     req_meta = {'referrer_policy': POLICY_ORIGIN}\n \n \n+class TestRefererMiddlewareSrictOrigin(MixinStrictOrigin, TestRefererMiddleware):\n+    req_meta = {'referrer_policy': POLICY_STRICT_ORIGIN}\n+\n+\n class TestRefererMiddlewareOriginWhenCrossOrigin(MixinOriginWhenCrossOrigin, TestRefererMiddleware):\n     req_meta = {'referrer_policy': POLICY_ORIGIN_WHEN_CROSS_ORIGIN}\n \n \n+class TestRefererMiddlewareStrictOriginWhenCrossOrigin(MixinStrictOriginWhenCrossOrigin, TestRefererMiddleware):\n+    req_meta = {'referrer_policy': POLICY_STRICT_ORIGIN_WHEN_CROSS_ORIGIN}\n+\n+\n class TestRefererMiddlewareUnsafeUrl(MixinUnsafeUrl, TestRefererMiddleware):\n     req_meta = {'referrer_policy': POLICY_UNSAFE_URL}\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "scrapy#77aec5a79681128c0608e65bc77e317252172d98", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 28 | Lines Deleted: 12 | Files Changed: 1 | Hunks: 11 | Methods Changed: 11 | Complexity Δ (Sum/Max): 8/8 | Churn Δ: 40 | Churn Cumulative: 668 | Contributors (this commit): 2 | Commits (past 90d): 3 | Contributors (cumulative): 2 | DMM Complexity: 1.0\n\nDIFF:\n@@ -31,13 +31,13 @@ class ReferrerPolicy(object):\n     def referrer(self, response, request):\n         raise NotImplementedError()\n \n-    def stripped_referrer(self, req_or_resp):\n-        return self.strip_url(req_or_resp)\n+    def stripped_referrer(self, r):\n+        return self.strip_url(r)\n \n-    def origin_referrer(self, req_or_resp):\n-        return self.strip_url(req_or_resp, origin_only=True)\n+    def origin_referrer(self, r):\n+        return self.strip_url(r, origin_only=True)\n \n-    def strip_url(self, req_or_resp, origin_only=False):\n+    def strip_url(self, r, origin_only=False):\n         \"\"\"\n         https://www.w3.org/TR/referrer-policy/#strip-url\n \n@@ -51,9 +51,9 @@ class ReferrerPolicy(object):\n             Set url's query to null.\n         Return url.\n         \"\"\"\n-        if req_or_resp.url is None or not req_or_resp.url:\n+        if r is None or not r.url:\n             return None\n-        parsed_url = urlparse_cached(req_or_resp)\n+        parsed_url = urlparse_cached(r)\n         if parsed_url.scheme not in self.NOREFERRER_SCHEMES:\n             return strip_url(parsed_url,\n                              strip_credentials=True,\n@@ -61,9 +61,19 @@ class ReferrerPolicy(object):\n                              strip_default_port=True,\n                              origin_only=origin_only)\n \n-    def origin(self, req_or_resp):\n+    def origin(self, r):\n         \"\"\"Return serialized origin (scheme, host, path) for a request or response URL.\"\"\"\n-        return self.strip_url(req_or_resp, origin_only=True)\n+        return self.strip_url(r, origin_only=True)\n+\n+    def potentially_trustworthy(self, r):\n+        # Note: this does not follow https://w3c.github.io/webappsec-secure-contexts/#is-url-trustworthy\n+        parsed_url = urlparse_cached(r)\n+        if parsed_url.scheme in ('data',):\n+            return False\n+        return self.tls_protected(r)\n+\n+    def tls_protected(self, r):\n+        return urlparse_cached(r).scheme in ('https', 'ftps')\n \n \n class NoReferrerPolicy(ReferrerPolicy):\n@@ -157,7 +167,9 @@ class StrictOriginPolicy(ReferrerPolicy):\n     name = POLICY_STRICT_ORIGIN\n \n     def referrer(self, response, request):\n-        if urlparse_cached(response).scheme == urlparse_cached(request).scheme:\n+        if ((urlparse_cached(response).scheme == 'https' and\n+             self.potentially_trustworthy(request))\n+             or urlparse_cached(response).scheme == 'http'):\n             return self.origin_referrer(response)\n \n \n@@ -205,8 +217,10 @@ class StrictOriginWhenCrossOriginPolicy(ReferrerPolicy):\n         origin = self.origin(response)\n         if origin == self.origin(request):\n             return self.stripped_referrer(response)\n-        else:\n-            return origin\n+        elif ((urlparse_cached(response).scheme in ('https', 'ftps') and\n+               self.potentially_trustworthy(request))\n+              or urlparse_cached(response).scheme == 'http'):\n+            return self.origin_referrer(response)\n \n \n class UnsafeUrlPolicy(ReferrerPolicy):\n@@ -244,7 +258,9 @@ _policy_classes = {p.name: p for p in (\n     NoReferrerWhenDowngradePolicy,\n     SameOriginPolicy,\n     OriginPolicy,\n+    StrictOriginPolicy,\n     OriginWhenCrossOriginPolicy,\n+    StrictOriginWhenCrossOriginPolicy,\n     UnsafeUrlPolicy,\n     DefaultReferrerPolicy,\n )}\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "scrapy#deb8567116db8488a8f5b890aad975df095ddcfe", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 5 | Lines Deleted: 13 | Files Changed: 1 | Hunks: 3 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 18 | Churn Cumulative: 686 | Contributors (this commit): 2 | Commits (past 90d): 4 | Contributors (cumulative): 2 | DMM Complexity: 0.0\n\nDIFF:\n@@ -94,12 +94,11 @@ class NoReferrerWhenDowngradePolicy(ReferrerPolicy):\n     \"\"\"\n     https://www.w3.org/TR/referrer-policy/#referrer-policy-no-referrer-when-downgrade\n \n-    The \"no-referrer-when-downgrade\" policy sends a full URL\n-    along with requests from a TLS-protected environment settings object\n-    to a a priori authenticated URL,\n-    and requests from request clients which are not TLS-protected to any origin.\n+    The \"no-referrer-when-downgrade\" policy sends a full URL along with requests\n+    from a TLS-protected environment settings object to a potentially trustworthy URL,\n+    and requests from clients which are not TLS-protected to any origin.\n \n-    Requests from TLS-protected request clients to non-a priori authenticated URLs,\n+    Requests from TLS-protected clients to non-potentially trustworthy URLs,\n     on the other hand, will contain no referrer information.\n     A Referer HTTP header will not be sent.\n \n@@ -108,14 +107,7 @@ class NoReferrerWhenDowngradePolicy(ReferrerPolicy):\n     name = POLICY_NO_REFERRER_WHEN_DOWNGRADE\n \n     def referrer(self, response, request):\n-        # https://www.w3.org/TR/referrer-policy/#determine-requests-referrer:\n-        #\n-        # If environment is TLS-protected\n-        # and the origin of request's current URL is not an a priori authenticated URL,\n-        # then return no referrer.\n-        if urlparse_cached(response).scheme in ('https', 'ftps') and \\\n-            urlparse_cached(request).scheme in ('http',):\n-                return None\n+        if not self.tls_protected(response) or self.tls_protected(request):\n             return self.stripped_referrer(response)\n \n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "scrapy#ebcacd3f549de034d05ed946c446e0f71b11bc6f", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 3 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 5 | Churn Cumulative: 691 | Contributors (this commit): 2 | Commits (past 90d): 5 | Contributors (cumulative): 2 | DMM Complexity: 0.0\n\nDIFF:\n@@ -159,9 +159,8 @@ class StrictOriginPolicy(ReferrerPolicy):\n     name = POLICY_STRICT_ORIGIN\n \n     def referrer(self, response, request):\n-        if ((urlparse_cached(response).scheme == 'https' and\n-             self.potentially_trustworthy(request))\n-             or urlparse_cached(response).scheme == 'http'):\n+        if ((self.tls_protected(response) and self.potentially_trustworthy(request))\n+            or not self.tls_protected(response)):\n             return self.origin_referrer(response)\n \n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "scrapy#b6c761d2b4c9cafe94010075ebf39807921dec9c", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 11 | Lines Deleted: 4 | Files Changed: 2 | Hunks: 4 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 15 | Churn Cumulative: 1369 | Contributors (this commit): 4 | Commits (past 90d): 8 | Contributors (cumulative): 6 | DMM Complexity: 1.0\n\nDIFF:\n@@ -159,7 +159,8 @@ class StrictOriginPolicy(ReferrerPolicy):\n     name = POLICY_STRICT_ORIGIN\n \n     def referrer(self, response, request):\n-        if ((self.tls_protected(response) and self.potentially_trustworthy(request))\n+        if ((self.tls_protected(response) and\n+             self.potentially_trustworthy(request))\n             or not self.tls_protected(response)):\n             return self.origin_referrer(response)\n \n@@ -208,9 +209,9 @@ class StrictOriginWhenCrossOriginPolicy(ReferrerPolicy):\n         origin = self.origin(response)\n         if origin == self.origin(request):\n             return self.stripped_referrer(response)\n-        elif ((urlparse_cached(response).scheme in ('https', 'ftps') and\n+        elif ((self.tls_protected(response) and\n                self.potentially_trustworthy(request))\n-              or urlparse_cached(response).scheme == 'http'):\n+              or not self.tls_protected(response)):\n             return self.origin_referrer(response)\n \n \n\n@@ -232,7 +232,13 @@ class MixinStrictOriginWhenCrossOrigin(object):\n         # downgrade\n         ('https://example4.com/page.html',  'http://example4.com/not-page.html',    None),\n         ('https://example4.com/page.html',  'http://not.example4.com/',             None),\n-        ('ftp://example4.com/urls.zip',     'http://example4.com/not-page.html',    None),\n+\n+        # non-TLS to non-TLS\n+        ('ftp://example4.com/urls.zip',     'http://example4.com/not-page.html',    b'ftp://example4.com/'),\n+\n+        # upgrade\n+        ('http://example4.com/page.html',  'https://example4.com/not-page.html',    b'http://example4.com/'),\n+        ('http://example4.com/page.html',  'https://not.example4.com/',             b'http://example4.com/'),\n \n         # Different protocols: send origin as referrer\n         ('ftps://example4.com/urls.zip',    'https://example4.com/not-page.html',   b'ftps://example4.com/'),\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "scrapy#537683f945906ff9865cf4e2704a432612f10eb4", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 5 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 6 | Churn Cumulative: 704 | Contributors (this commit): 2 | Commits (past 90d): 6 | Contributors (cumulative): 2 | DMM Complexity: None\n\nDIFF:\n@@ -240,7 +240,11 @@ class LegacyPolicy(ReferrerPolicy):\n \n \n class DefaultReferrerPolicy(NoReferrerWhenDowngradePolicy):\n-\n+    \"\"\"\n+    A variant of \"no-referrer-when-downgrade\",\n+    with the addition that \"Referer\" is not sent if the parent request was\n+    using ``file://`` or ``s3://`` scheme.\n+    \"\"\"\n     NOREFERRER_SCHEMES = LOCAL_SCHEMES + ('file', 's3')\n     name = POLICY_SCRAPY_DEFAULT\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "scrapy#bc200d1155e0f93f37897ac206aa32945daf89bd", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 20 | Lines Deleted: 20 | Files Changed: 3 | Hunks: 20 | Methods Changed: 4 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 40 | Churn Cumulative: 1920 | Contributors (this commit): 35 | Commits (past 90d): 17 | Contributors (cumulative): 41 | DMM Complexity: None\n\nDIFF:\n@@ -234,7 +234,7 @@ REDIRECT_MAX_TIMES = 20  # uses Firefox default setting\n REDIRECT_PRIORITY_ADJUST = +2\n \n REFERER_ENABLED = True\n-REFERER_POLICY = 'scrapy.spidermiddlewares.referer.DefaultReferrerPolicy'\n+REFERRER_POLICY = 'scrapy.spidermiddlewares.referer.DefaultReferrerPolicy'\n \n RETRY_ENABLED = True\n RETRY_TIMES = 2  # initial response + 2 retries = 3 requests\n\n@@ -266,7 +266,7 @@ class RefererMiddleware(object):\n     def __init__(self, settings=None):\n         self.default_policy = DefaultReferrerPolicy\n         if settings is not None:\n-            policy = settings.get('REFERER_POLICY')\n+            policy = settings.get('REFERRER_POLICY')\n             if policy is not None:\n                 # expect a string for the path to the policy class\n                 try:\n\n@@ -289,35 +289,35 @@ class TestRefererMiddlewareDefault(MixinDefault, TestRefererMiddleware):\n \n # --- Tests using settings to set policy using class path\n class TestRefererMiddlewareSettingsNoReferrer(MixinNoReferrer, TestRefererMiddleware):\n-    settings = {'REFERER_POLICY': 'scrapy.spidermiddlewares.referer.NoReferrerPolicy'}\n+    settings = {'REFERRER_POLICY': 'scrapy.spidermiddlewares.referer.NoReferrerPolicy'}\n \n \n class TestRefererMiddlewareSettingsNoReferrerWhenDowngrade(MixinNoReferrerWhenDowngrade, TestRefererMiddleware):\n-    settings = {'REFERER_POLICY': 'scrapy.spidermiddlewares.referer.NoReferrerWhenDowngradePolicy'}\n+    settings = {'REFERRER_POLICY': 'scrapy.spidermiddlewares.referer.NoReferrerWhenDowngradePolicy'}\n \n \n class TestRefererMiddlewareSettingsSameOrigin(MixinSameOrigin, TestRefererMiddleware):\n-    settings = {'REFERER_POLICY': 'scrapy.spidermiddlewares.referer.SameOriginPolicy'}\n+    settings = {'REFERRER_POLICY': 'scrapy.spidermiddlewares.referer.SameOriginPolicy'}\n \n \n class TestRefererMiddlewareSettingsOrigin(MixinOrigin, TestRefererMiddleware):\n-    settings = {'REFERER_POLICY': 'scrapy.spidermiddlewares.referer.OriginPolicy'}\n+    settings = {'REFERRER_POLICY': 'scrapy.spidermiddlewares.referer.OriginPolicy'}\n \n \n class TestRefererMiddlewareSettingsStrictOrigin(MixinStrictOrigin, TestRefererMiddleware):\n-    settings = {'REFERER_POLICY': 'scrapy.spidermiddlewares.referer.StrictOriginPolicy'}\n+    settings = {'REFERRER_POLICY': 'scrapy.spidermiddlewares.referer.StrictOriginPolicy'}\n \n \n class TestRefererMiddlewareSettingsOriginWhenCrossOrigin(MixinOriginWhenCrossOrigin, TestRefererMiddleware):\n-    settings = {'REFERER_POLICY': 'scrapy.spidermiddlewares.referer.OriginWhenCrossOriginPolicy'}\n+    settings = {'REFERRER_POLICY': 'scrapy.spidermiddlewares.referer.OriginWhenCrossOriginPolicy'}\n \n \n class TestRefererMiddlewareSettingsStrictOriginWhenCrossOrigin(MixinStrictOriginWhenCrossOrigin, TestRefererMiddleware):\n-    settings = {'REFERER_POLICY': 'scrapy.spidermiddlewares.referer.StrictOriginWhenCrossOriginPolicy'}\n+    settings = {'REFERRER_POLICY': 'scrapy.spidermiddlewares.referer.StrictOriginWhenCrossOriginPolicy'}\n \n \n class TestRefererMiddlewareSettingsUnsafeUrl(MixinUnsafeUrl, TestRefererMiddleware):\n-    settings = {'REFERER_POLICY': 'scrapy.spidermiddlewares.referer.UnsafeUrlPolicy'}\n+    settings = {'REFERRER_POLICY': 'scrapy.spidermiddlewares.referer.UnsafeUrlPolicy'}\n \n \n class CustomPythonOrgPolicy(ReferrerPolicy):\n@@ -336,7 +336,7 @@ class CustomPythonOrgPolicy(ReferrerPolicy):\n \n \n class TestRefererMiddlewareSettingsCustomPolicy(TestRefererMiddleware):\n-    settings = {'REFERER_POLICY': 'tests.test_spidermiddleware_referer.CustomPythonOrgPolicy'}\n+    settings = {'REFERRER_POLICY': 'tests.test_spidermiddleware_referer.CustomPythonOrgPolicy'}\n     scenarii = [\n         ('https://example.com/',    'https://scrapy.org/',  b'https://python.org/'),\n         ('http://example.com/',     'http://scrapy.org/',   b'http://python.org/'),\n@@ -385,17 +385,17 @@ class TestRefererMiddlewareUnsafeUrl(MixinUnsafeUrl, TestRefererMiddleware):\n \n \n class TestRefererMiddlewareMetaPredecence001(MixinUnsafeUrl, TestRefererMiddleware):\n-    settings = {'REFERER_POLICY': 'scrapy.spidermiddlewares.referer.SameOriginPolicy'}\n+    settings = {'REFERRER_POLICY': 'scrapy.spidermiddlewares.referer.SameOriginPolicy'}\n     req_meta = {'referrer_policy': POLICY_UNSAFE_URL}\n \n \n class TestRefererMiddlewareMetaPredecence002(MixinNoReferrer, TestRefererMiddleware):\n-    settings = {'REFERER_POLICY': 'scrapy.spidermiddlewares.referer.NoReferrerWhenDowngradePolicy'}\n+    settings = {'REFERRER_POLICY': 'scrapy.spidermiddlewares.referer.NoReferrerWhenDowngradePolicy'}\n     req_meta = {'referrer_policy': POLICY_NO_REFERRER}\n \n \n class TestRefererMiddlewareMetaPredecence003(MixinUnsafeUrl, TestRefererMiddleware):\n-    settings = {'REFERER_POLICY': 'scrapy.spidermiddlewares.referer.OriginWhenCrossOriginPolicy'}\n+    settings = {'REFERRER_POLICY': 'scrapy.spidermiddlewares.referer.OriginWhenCrossOriginPolicy'}\n     req_meta = {'referrer_policy': POLICY_UNSAFE_URL}\n \n \n@@ -411,7 +411,7 @@ class TestRefererMiddlewareSettingsPolicyByName(TestCase):\n                 (POLICY_ORIGIN_WHEN_CROSS_ORIGIN, OriginWhenCrossOriginPolicy),\n                 (POLICY_UNSAFE_URL, UnsafeUrlPolicy),\n             ]:\n-            settings = Settings({'REFERER_POLICY': s})\n+            settings = Settings({'REFERRER_POLICY': s})\n             mw = RefererMiddleware(settings)\n             self.assertEquals(mw.default_policy, p)\n \n@@ -425,24 +425,24 @@ class TestRefererMiddlewareSettingsPolicyByName(TestCase):\n                 (POLICY_ORIGIN_WHEN_CROSS_ORIGIN, OriginWhenCrossOriginPolicy),\n                 (POLICY_UNSAFE_URL, UnsafeUrlPolicy),\n             ]:\n-            settings = Settings({'REFERER_POLICY': s.upper()})\n+            settings = Settings({'REFERRER_POLICY': s.upper()})\n             mw = RefererMiddleware(settings)\n             self.assertEquals(mw.default_policy, p)\n \n     def test_invalid_name(self):\n-        settings = Settings({'REFERER_POLICY': 'some-custom-unknown-policy'})\n+        settings = Settings({'REFERRER_POLICY': 'some-custom-unknown-policy'})\n         with self.assertRaises(NotConfigured):\n             mw = RefererMiddleware(settings)\n \n \n class TestRefererMiddlewarePolicyHeaderPredecence001(MixinUnsafeUrl, TestRefererMiddleware):\n-    settings = {'REFERER_POLICY': 'scrapy.spidermiddlewares.referer.SameOriginPolicy'}\n+    settings = {'REFERRER_POLICY': 'scrapy.spidermiddlewares.referer.SameOriginPolicy'}\n     resp_headers = {'Referrer-Policy': POLICY_UNSAFE_URL.upper()}\n \n class TestRefererMiddlewarePolicyHeaderPredecence002(MixinNoReferrer, TestRefererMiddleware):\n-    settings = {'REFERER_POLICY': 'scrapy.spidermiddlewares.referer.NoReferrerWhenDowngradePolicy'}\n+    settings = {'REFERRER_POLICY': 'scrapy.spidermiddlewares.referer.NoReferrerWhenDowngradePolicy'}\n     resp_headers = {'Referrer-Policy': POLICY_NO_REFERRER.swapcase()}\n \n class TestRefererMiddlewarePolicyHeaderPredecence003(MixinNoReferrerWhenDowngrade, TestRefererMiddleware):\n-    settings = {'REFERER_POLICY': 'scrapy.spidermiddlewares.referer.OriginWhenCrossOriginPolicy'}\n+    settings = {'REFERRER_POLICY': 'scrapy.spidermiddlewares.referer.OriginWhenCrossOriginPolicy'}\n     resp_headers = {'Referrer-Policy': POLICY_NO_REFERRER_WHEN_DOWNGRADE.title()}\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "scrapy#04e4d08612364480c4d72d2b55e1cac161397136", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 24 | Lines Deleted: 22 | Files Changed: 2 | Hunks: 17 | Methods Changed: 14 | Complexity Δ (Sum/Max): -1/1 | Churn Δ: 46 | Churn Cumulative: 1773 | Contributors (this commit): 17 | Commits (past 90d): 11 | Contributors (cumulative): 18 | DMM Complexity: 1.0\n\nDIFF:\n@@ -2,6 +2,8 @@\n RefererMiddleware: populates Request referer field, based on the Response which\n originated it.\n \"\"\"\n+from six.moves.urllib.parse import urlparse\n+\n from scrapy.http import Request, Response\n from scrapy.exceptions import NotConfigured\n from scrapy import signals\n@@ -32,12 +34,14 @@ class ReferrerPolicy(object):\n         raise NotImplementedError()\n \n     def stripped_referrer(self, r):\n+        if urlparse(r).scheme not in self.NOREFERRER_SCHEMES:\n             return self.strip_url(r)\n \n     def origin_referrer(self, r):\n-        return self.strip_url(r, origin_only=True)\n+        if urlparse(r).scheme not in self.NOREFERRER_SCHEMES:\n+            return self.origin(r)\n \n-    def strip_url(self, r, origin_only=False):\n+    def strip_url(self, url, origin_only=False):\n         \"\"\"\n         https://www.w3.org/TR/referrer-policy/#strip-url\n \n@@ -51,11 +55,9 @@ class ReferrerPolicy(object):\n             Set url's query to null.\n         Return url.\n         \"\"\"\n-        if r is None or not r.url:\n+        if not url:\n             return None\n-        parsed_url = urlparse_cached(r)\n-        if parsed_url.scheme not in self.NOREFERRER_SCHEMES:\n-            return strip_url(parsed_url,\n+        return strip_url(url,\n                          strip_credentials=True,\n                          strip_fragment=True,\n                          strip_default_port=True,\n@@ -65,15 +67,15 @@ class ReferrerPolicy(object):\n         \"\"\"Return serialized origin (scheme, host, path) for a request or response URL.\"\"\"\n         return self.strip_url(r, origin_only=True)\n \n-    def potentially_trustworthy(self, r):\n+    def potentially_trustworthy(self, url):\n         # Note: this does not follow https://w3c.github.io/webappsec-secure-contexts/#is-url-trustworthy\n-        parsed_url = urlparse_cached(r)\n+        parsed_url = urlparse(url)\n         if parsed_url.scheme in ('data',):\n             return False\n-        return self.tls_protected(r)\n+        return self.tls_protected(url)\n \n-    def tls_protected(self, r):\n-        return urlparse_cached(r).scheme in ('https', 'ftps')\n+    def tls_protected(self, url):\n+        return urlparse(url).scheme in ('https', 'ftps')\n \n \n class NoReferrerPolicy(ReferrerPolicy):\n@@ -287,12 +289,17 @@ class RefererMiddleware(object):\n         crawler.signals.connect(mw.request_scheduled, signal=signals.request_scheduled)\n         return mw\n \n-    def policy(self, response, request):\n+    def policy(self, resp_or_url, request):\n+        \"\"\"\n+        Determine Referrer-Policy to use from a parent Response (or URL),\n+        and a Request to be sent.\n+        \"\"\"\n         # policy set in request's meta dict takes precedence over default policy\n         policy_name = request.meta.get('referrer_policy')\n         if policy_name is None:\n+            if isinstance(resp_or_url, Response):\n                 policy_name = to_native_str(\n-                response.headers.get('Referrer-Policy', '').decode('latin1'))\n+                    resp_or_url.headers.get('Referrer-Policy', '').decode('latin1'))\n \n         cls = _policy_classes.get(policy_name.lower(), self.default_policy)\n         return cls()\n@@ -300,7 +307,7 @@ class RefererMiddleware(object):\n     def process_spider_output(self, response, result, spider):\n         def _set_referer(r):\n             if isinstance(r, Request):\n-                referrer = self.policy(response, r).referrer(response, r)\n+                referrer = self.policy(response, r).referrer(response.url, r.url)\n                 if referrer is not None:\n                     r.headers.setdefault('Referer', referrer)\n             return r\n@@ -313,9 +320,9 @@ class RefererMiddleware(object):\n             request_referrer = request.headers.get('Referer')\n             # we don't patch the referrer value if there is none\n             if request_referrer is not None:\n-                faked_response = Response(redirected_urls[0])\n-                policy_referrer = self.policy(faked_response,\n-                    request).referrer(faked_response, request)\n+                initial_url = redirected_urls[0]\n+                policy_referrer = self.policy(initial_url,\n+                    request).referrer(orig_url, request.url)\n                 if policy_referrer != request_referrer:\n                     if policy_referrer is None:\n                         request.headers.pop('Referer')\n\n@@ -117,12 +117,7 @@ def strip_url(url, strip_credentials=True, strip_default_port=True, origin_only=\n     - `strip_fragment` drops any #fragment component\n     \"\"\"\n \n-    if url is None:\n-        return None\n-    if not isinstance(url, ParseResult):\n     parsed_url = urlparse(url)\n-    else:\n-        parsed_url = url\n     netloc = parsed_url.netloc\n     if (strip_credentials or origin_only) and (parsed_url.username or parsed_url.password):\n         netloc = netloc.split('@')[-1]\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "scrapy#d2aa51c0fb81b4e264fc351b9184d9ce06855021", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 40 | Lines Deleted: 3 | Files Changed: 1 | Hunks: 3 | Methods Changed: 3 | Complexity Δ (Sum/Max): 3/3 | Churn Δ: 43 | Churn Cumulative: 750 | Contributors (this commit): 4 | Commits (past 90d): 4 | Contributors (cumulative): 4 | DMM Complexity: 1.0\n\nDIFF:\n@@ -1,3 +1,4 @@\n+from six.moves.urllib.parse import urlparse\n from unittest import TestCase\n \n from scrapy.exceptions import NotConfigured\n@@ -326,9 +327,7 @@ class CustomPythonOrgPolicy(ReferrerPolicy):\n     depending on the scheme of the target URL.\n     \"\"\"\n     def referrer(self, response, request):\n-        from scrapy.utils.httpobj import urlparse_cached\n-\n-        scheme = urlparse_cached(request).scheme\n+        scheme = urlparse(request).scheme\n         if scheme == 'https':\n             return b'https://python.org/'\n         elif scheme == 'http':\n@@ -446,3 +445,41 @@ class TestRefererMiddlewarePolicyHeaderPredecence002(MixinNoReferrer, TestRefere\n class TestRefererMiddlewarePolicyHeaderPredecence003(MixinNoReferrerWhenDowngrade, TestRefererMiddleware):\n     settings = {'REFERRER_POLICY': 'scrapy.spidermiddlewares.referer.OriginWhenCrossOriginPolicy'}\n     resp_headers = {'Referrer-Policy': POLICY_NO_REFERRER_WHEN_DOWNGRADE.title()}\n+\n+\n+class TestReferrerPolicyOnRedirect(TestRefererMiddleware):\n+\n+    req_meta = {}\n+    resp_headers = {}\n+    #settings = {}\n+    settings = {'REFERRER_POLICY': 'scrapy.spidermiddlewares.referer.UnsafeUrlPolicy'}\n+    scenarii = [\n+        (   # origin\n+            'http://scrapytest.org/1',\n+\n+            # target + redirection\n+            ['http://scrapytest.org/2',\n+             'http://scrapytest.org/3',],\n+\n+            b'http://scrapytest.org/1', # expected initial referer\n+            b'http://scrapytest.org/1', # expected referer for the redirection request\n+\n+        ),\n+    ]\n+\n+    def setUp(self):\n+        self.spider = Spider('foo')\n+        settings = Settings(self.settings)\n+        self.mw = RefererMiddleware(settings)\n+\n+    def test_(self):\n+\n+        for origin, target_chain, init_referrer, final_referrer in self.scenarii:\n+            response = self.get_response(origin)\n+            request = self.get_request(target_chain.pop())\n+\n+\n+            out = list(self.mw.process_spider_output(response, [request], self.spider))\n+            self.assertEquals(out[0].headers.get('Referer'), init_referrer)\n+\n+            request.meta['redirected_urls'] = target_chain\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "scrapy#8226e77010d79f64c7ec5ebdb9e7cee7803600ed", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 364 | Lines Deleted: 50 | Files Changed: 2 | Hunks: 43 | Methods Changed: 7 | Complexity Δ (Sum/Max): 2/1 | Churn Δ: 414 | Churn Cumulative: 1911 | Contributors (this commit): 4 | Commits (past 90d): 14 | Contributors (cumulative): 6 | DMM Complexity: 1.0\n\nDIFF:\n@@ -4,6 +4,8 @@ originated it.\n \"\"\"\n from six.moves.urllib.parse import urlparse\n \n+from w3lib.url import safe_url_string\n+\n from scrapy.http import Request, Response\n from scrapy.exceptions import NotConfigured\n from scrapy import signals\n@@ -300,8 +302,7 @@ class RefererMiddleware(object):\n             if isinstance(resp_or_url, Response):\n                 policy_name = to_native_str(\n                     resp_or_url.headers.get('Referrer-Policy', '').decode('latin1'))\n-\n-        cls = _policy_classes.get(policy_name.lower(), self.default_policy)\n+        cls = _policy_classes.get(policy_name.lower()) if policy_name else self.default_policy\n         return cls()\n \n     def process_spider_output(self, response, result, spider):\n@@ -320,9 +321,14 @@ class RefererMiddleware(object):\n             request_referrer = request.headers.get('Referer')\n             # we don't patch the referrer value if there is none\n             if request_referrer is not None:\n-                initial_url = redirected_urls[0]\n-                policy_referrer = self.policy(initial_url,\n-                    request).referrer(orig_url, request.url)\n+                # the request's referrer header value acts as a surrogate\n+                # for the parent response URL\n+                #\n+                # Note: if the 3xx response contained a Referrer-Policy header,\n+                #       the information is not available using this hook\n+                parent_url = safe_url_string(request_referrer)\n+                policy_referrer = self.policy(parent_url, request).referrer(\n+                    parent_url, request.url)\n                 if policy_referrer != request_referrer:\n                     if policy_referrer is None:\n                         request.headers.pop('Referer')\n\n@@ -5,6 +5,7 @@ from scrapy.exceptions import NotConfigured\n from scrapy.http import Response, Request\n from scrapy.settings import Settings\n from scrapy.spiders import Spider\n+from scrapy.downloadermiddlewares.redirect import RedirectMiddleware\n from scrapy.spidermiddlewares.referer import RefererMiddleware, \\\n     POLICY_NO_REFERRER, POLICY_NO_REFERRER_WHEN_DOWNGRADE, \\\n     POLICY_SAME_ORIGIN, POLICY_ORIGIN, POLICY_ORIGIN_WHEN_CROSS_ORIGIN, \\\n@@ -13,6 +14,7 @@ from scrapy.spidermiddlewares.referer import RefererMiddleware, \\\n     DefaultReferrerPolicy, \\\n     NoReferrerPolicy, NoReferrerWhenDowngradePolicy, \\\n     OriginWhenCrossOriginPolicy, OriginPolicy, \\\n+    StrictOriginWhenCrossOriginPolicy, StrictOriginPolicy, \\\n     SameOriginPolicy, UnsafeUrlPolicy, ReferrerPolicy\n \n \n@@ -289,35 +291,35 @@ class TestRefererMiddlewareDefault(MixinDefault, TestRefererMiddleware):\n \n \n # --- Tests using settings to set policy using class path\n-class TestRefererMiddlewareSettingsNoReferrer(MixinNoReferrer, TestRefererMiddleware):\n+class TestSettingsNoReferrer(MixinNoReferrer, TestRefererMiddleware):\n     settings = {'REFERRER_POLICY': 'scrapy.spidermiddlewares.referer.NoReferrerPolicy'}\n \n \n-class TestRefererMiddlewareSettingsNoReferrerWhenDowngrade(MixinNoReferrerWhenDowngrade, TestRefererMiddleware):\n+class TestSettingsNoReferrerWhenDowngrade(MixinNoReferrerWhenDowngrade, TestRefererMiddleware):\n     settings = {'REFERRER_POLICY': 'scrapy.spidermiddlewares.referer.NoReferrerWhenDowngradePolicy'}\n \n \n-class TestRefererMiddlewareSettingsSameOrigin(MixinSameOrigin, TestRefererMiddleware):\n+class TestSettingsSameOrigin(MixinSameOrigin, TestRefererMiddleware):\n     settings = {'REFERRER_POLICY': 'scrapy.spidermiddlewares.referer.SameOriginPolicy'}\n \n \n-class TestRefererMiddlewareSettingsOrigin(MixinOrigin, TestRefererMiddleware):\n+class TestSettingsOrigin(MixinOrigin, TestRefererMiddleware):\n     settings = {'REFERRER_POLICY': 'scrapy.spidermiddlewares.referer.OriginPolicy'}\n \n \n-class TestRefererMiddlewareSettingsStrictOrigin(MixinStrictOrigin, TestRefererMiddleware):\n+class TestSettingsStrictOrigin(MixinStrictOrigin, TestRefererMiddleware):\n     settings = {'REFERRER_POLICY': 'scrapy.spidermiddlewares.referer.StrictOriginPolicy'}\n \n \n-class TestRefererMiddlewareSettingsOriginWhenCrossOrigin(MixinOriginWhenCrossOrigin, TestRefererMiddleware):\n+class TestSettingsOriginWhenCrossOrigin(MixinOriginWhenCrossOrigin, TestRefererMiddleware):\n     settings = {'REFERRER_POLICY': 'scrapy.spidermiddlewares.referer.OriginWhenCrossOriginPolicy'}\n \n \n-class TestRefererMiddlewareSettingsStrictOriginWhenCrossOrigin(MixinStrictOriginWhenCrossOrigin, TestRefererMiddleware):\n+class TestSettingsStrictOriginWhenCrossOrigin(MixinStrictOriginWhenCrossOrigin, TestRefererMiddleware):\n     settings = {'REFERRER_POLICY': 'scrapy.spidermiddlewares.referer.StrictOriginWhenCrossOriginPolicy'}\n \n \n-class TestRefererMiddlewareSettingsUnsafeUrl(MixinUnsafeUrl, TestRefererMiddleware):\n+class TestSettingsUnsafeUrl(MixinUnsafeUrl, TestRefererMiddleware):\n     settings = {'REFERRER_POLICY': 'scrapy.spidermiddlewares.referer.UnsafeUrlPolicy'}\n \n \n@@ -334,7 +336,7 @@ class CustomPythonOrgPolicy(ReferrerPolicy):\n             return b'http://python.org/'\n \n \n-class TestRefererMiddlewareSettingsCustomPolicy(TestRefererMiddleware):\n+class TestSettingsCustomPolicy(TestRefererMiddleware):\n     settings = {'REFERRER_POLICY': 'tests.test_spidermiddleware_referer.CustomPythonOrgPolicy'}\n     scenarii = [\n         ('https://example.com/',    'https://scrapy.org/',  b'https://python.org/'),\n@@ -347,58 +349,58 @@ class TestRefererMiddlewareSettingsCustomPolicy(TestRefererMiddleware):\n     ]\n \n # --- Tests using Request meta dict to set policy\n-class TestRefererMiddlewareDefaultMeta(MixinDefault, TestRefererMiddleware):\n+class TestRequestMetaDefault(MixinDefault, TestRefererMiddleware):\n     req_meta = {'referrer_policy': POLICY_SCRAPY_DEFAULT}\n \n \n-class TestRefererMiddlewareNoReferrer(MixinNoReferrer, TestRefererMiddleware):\n+class TestRequestMetaNoReferrer(MixinNoReferrer, TestRefererMiddleware):\n     req_meta = {'referrer_policy': POLICY_NO_REFERRER}\n \n \n-class TestRefererMiddlewareNoReferrerWhenDowngrade(MixinNoReferrerWhenDowngrade, TestRefererMiddleware):\n+class TestRequestMetaNoReferrerWhenDowngrade(MixinNoReferrerWhenDowngrade, TestRefererMiddleware):\n     req_meta = {'referrer_policy': POLICY_NO_REFERRER_WHEN_DOWNGRADE}\n \n \n-class TestRefererMiddlewareSameOrigin(MixinSameOrigin, TestRefererMiddleware):\n+class TestRequestMetaSameOrigin(MixinSameOrigin, TestRefererMiddleware):\n     req_meta = {'referrer_policy': POLICY_SAME_ORIGIN}\n \n \n-class TestRefererMiddlewareOrigin(MixinOrigin, TestRefererMiddleware):\n+class TestRequestMetaOrigin(MixinOrigin, TestRefererMiddleware):\n     req_meta = {'referrer_policy': POLICY_ORIGIN}\n \n \n-class TestRefererMiddlewareSrictOrigin(MixinStrictOrigin, TestRefererMiddleware):\n+class TestRequestMetaSrictOrigin(MixinStrictOrigin, TestRefererMiddleware):\n     req_meta = {'referrer_policy': POLICY_STRICT_ORIGIN}\n \n \n-class TestRefererMiddlewareOriginWhenCrossOrigin(MixinOriginWhenCrossOrigin, TestRefererMiddleware):\n+class TestRequestMetaOriginWhenCrossOrigin(MixinOriginWhenCrossOrigin, TestRefererMiddleware):\n     req_meta = {'referrer_policy': POLICY_ORIGIN_WHEN_CROSS_ORIGIN}\n \n \n-class TestRefererMiddlewareStrictOriginWhenCrossOrigin(MixinStrictOriginWhenCrossOrigin, TestRefererMiddleware):\n+class TestRequestMetaStrictOriginWhenCrossOrigin(MixinStrictOriginWhenCrossOrigin, TestRefererMiddleware):\n     req_meta = {'referrer_policy': POLICY_STRICT_ORIGIN_WHEN_CROSS_ORIGIN}\n \n \n-class TestRefererMiddlewareUnsafeUrl(MixinUnsafeUrl, TestRefererMiddleware):\n+class TestRequestMetaUnsafeUrl(MixinUnsafeUrl, TestRefererMiddleware):\n     req_meta = {'referrer_policy': POLICY_UNSAFE_URL}\n \n \n-class TestRefererMiddlewareMetaPredecence001(MixinUnsafeUrl, TestRefererMiddleware):\n+class TestRequestMetaPredecence001(MixinUnsafeUrl, TestRefererMiddleware):\n     settings = {'REFERRER_POLICY': 'scrapy.spidermiddlewares.referer.SameOriginPolicy'}\n     req_meta = {'referrer_policy': POLICY_UNSAFE_URL}\n \n \n-class TestRefererMiddlewareMetaPredecence002(MixinNoReferrer, TestRefererMiddleware):\n+class TestRequestMetaPredecence002(MixinNoReferrer, TestRefererMiddleware):\n     settings = {'REFERRER_POLICY': 'scrapy.spidermiddlewares.referer.NoReferrerWhenDowngradePolicy'}\n     req_meta = {'referrer_policy': POLICY_NO_REFERRER}\n \n \n-class TestRefererMiddlewareMetaPredecence003(MixinUnsafeUrl, TestRefererMiddleware):\n+class TestRequestMetaPredecence003(MixinUnsafeUrl, TestRefererMiddleware):\n     settings = {'REFERRER_POLICY': 'scrapy.spidermiddlewares.referer.OriginWhenCrossOriginPolicy'}\n     req_meta = {'referrer_policy': POLICY_UNSAFE_URL}\n \n \n-class TestRefererMiddlewareSettingsPolicyByName(TestCase):\n+class TestSettingsPolicyByName(TestCase):\n \n     def test_valid_name(self):\n         for s, p in [\n@@ -407,7 +409,9 @@ class TestRefererMiddlewareSettingsPolicyByName(TestCase):\n                 (POLICY_NO_REFERRER_WHEN_DOWNGRADE, NoReferrerWhenDowngradePolicy),\n                 (POLICY_SAME_ORIGIN, SameOriginPolicy),\n                 (POLICY_ORIGIN, OriginPolicy),\n+                (POLICY_STRICT_ORIGIN, StrictOriginPolicy),\n                 (POLICY_ORIGIN_WHEN_CROSS_ORIGIN, OriginWhenCrossOriginPolicy),\n+                (POLICY_STRICT_ORIGIN_WHEN_CROSS_ORIGIN, StrictOriginWhenCrossOriginPolicy),\n                 (POLICY_UNSAFE_URL, UnsafeUrlPolicy),\n             ]:\n             settings = Settings({'REFERRER_POLICY': s})\n@@ -421,7 +425,9 @@ class TestRefererMiddlewareSettingsPolicyByName(TestCase):\n                 (POLICY_NO_REFERRER_WHEN_DOWNGRADE, NoReferrerWhenDowngradePolicy),\n                 (POLICY_SAME_ORIGIN, SameOriginPolicy),\n                 (POLICY_ORIGIN, OriginPolicy),\n+                (POLICY_STRICT_ORIGIN, StrictOriginPolicy),\n                 (POLICY_ORIGIN_WHEN_CROSS_ORIGIN, OriginWhenCrossOriginPolicy),\n+                (POLICY_STRICT_ORIGIN_WHEN_CROSS_ORIGIN, StrictOriginWhenCrossOriginPolicy),\n                 (POLICY_UNSAFE_URL, UnsafeUrlPolicy),\n             ]:\n             settings = Settings({'REFERRER_POLICY': s.upper()})\n@@ -434,52 +440,354 @@ class TestRefererMiddlewareSettingsPolicyByName(TestCase):\n             mw = RefererMiddleware(settings)\n \n \n-class TestRefererMiddlewarePolicyHeaderPredecence001(MixinUnsafeUrl, TestRefererMiddleware):\n+class TestPolicyHeaderPredecence001(MixinUnsafeUrl, TestRefererMiddleware):\n     settings = {'REFERRER_POLICY': 'scrapy.spidermiddlewares.referer.SameOriginPolicy'}\n     resp_headers = {'Referrer-Policy': POLICY_UNSAFE_URL.upper()}\n \n-class TestRefererMiddlewarePolicyHeaderPredecence002(MixinNoReferrer, TestRefererMiddleware):\n+class TestPolicyHeaderPredecence002(MixinNoReferrer, TestRefererMiddleware):\n     settings = {'REFERRER_POLICY': 'scrapy.spidermiddlewares.referer.NoReferrerWhenDowngradePolicy'}\n     resp_headers = {'Referrer-Policy': POLICY_NO_REFERRER.swapcase()}\n \n-class TestRefererMiddlewarePolicyHeaderPredecence003(MixinNoReferrerWhenDowngrade, TestRefererMiddleware):\n+class TestPolicyHeaderPredecence003(MixinNoReferrerWhenDowngrade, TestRefererMiddleware):\n     settings = {'REFERRER_POLICY': 'scrapy.spidermiddlewares.referer.OriginWhenCrossOriginPolicy'}\n     resp_headers = {'Referrer-Policy': POLICY_NO_REFERRER_WHEN_DOWNGRADE.title()}\n \n \n-class TestReferrerPolicyOnRedirect(TestRefererMiddleware):\n+class TestReferrerOnRedirect(TestRefererMiddleware):\n \n-    req_meta = {}\n-    resp_headers = {}\n-    #settings = {}\n     settings = {'REFERRER_POLICY': 'scrapy.spidermiddlewares.referer.UnsafeUrlPolicy'}\n     scenarii = [\n-        (   # origin\n-            'http://scrapytest.org/1',\n-\n-            # target + redirection\n-            ['http://scrapytest.org/2',\n-             'http://scrapytest.org/3',],\n-\n+        (   'http://scrapytest.org/1',      # parent\n+            'http://scrapytest.org/2',      # target\n+            (\n+                # redirections: code, URL\n+                (301, 'http://scrapytest.org/3'),\n+                (301, 'http://scrapytest.org/4'),\n+            ),\n             b'http://scrapytest.org/1', # expected initial referer\n             b'http://scrapytest.org/1', # expected referer for the redirection request\n-\n+        ),\n+        (   'https://scrapytest.org/1',\n+            'https://scrapytest.org/2',\n+            (\n+                # redirecting to non-secure URL\n+                (301, 'http://scrapytest.org/3'),\n+            ),\n+            b'https://scrapytest.org/1',\n+            b'https://scrapytest.org/1',\n+        ),\n+        (   'https://scrapytest.org/1',\n+            'https://scrapytest.com/2',\n+            (\n+                # redirecting to non-secure URL: different origin\n+                (301, 'http://scrapytest.com/3'),\n+            ),\n+            b'https://scrapytest.org/1',\n+            b'https://scrapytest.org/1',\n         ),\n     ]\n \n     def setUp(self):\n         self.spider = Spider('foo')\n         settings = Settings(self.settings)\n-        self.mw = RefererMiddleware(settings)\n+        self.referrermw = RefererMiddleware(settings)\n+        self.redirectmw = RedirectMiddleware(settings)\n \n-    def test_(self):\n+    def test(self):\n \n-        for origin, target_chain, init_referrer, final_referrer in self.scenarii:\n-            response = self.get_response(origin)\n-            request = self.get_request(target_chain.pop())\n+        for parent, target, redirections, init_referrer, final_referrer in self.scenarii:\n+            response = self.get_response(parent)\n+            request = self.get_request(target)\n \n-\n-            out = list(self.mw.process_spider_output(response, [request], self.spider))\n+            out = list(self.referrermw.process_spider_output(response, [request], self.spider))\n             self.assertEquals(out[0].headers.get('Referer'), init_referrer)\n \n-            request.meta['redirected_urls'] = target_chain\n+            for status, url in redirections:\n+                response = Response(request.url, headers={'Location': url}, status=status)\n+                request = self.redirectmw.process_response(request, response, self.spider)\n+                self.referrermw.request_scheduled(request, self.spider)\n+\n+            assert isinstance(request, Request)\n+            self.assertEquals(request.headers.get('Referer'), final_referrer)\n+\n+\n+class TestReferrerOnRedirectNoReferrer(TestReferrerOnRedirect):\n+    \"\"\"\n+    No Referrer policy never sets the \"Referer\" header.\n+    HTTP redirections should not change that.\n+    \"\"\"\n+    settings = {'REFERRER_POLICY': 'no-referrer'}\n+    scenarii = [\n+        (   'http://scrapytest.org/1',      # parent\n+            'http://scrapytest.org/2',      # target\n+            (\n+                # redirections: code, URL\n+                (301, 'http://scrapytest.org/3'),\n+                (301, 'http://scrapytest.org/4'),\n+            ),\n+            None, # expected initial \"Referer\"\n+            None, # expected \"Referer\" for the redirection request\n+        ),\n+        (   'https://scrapytest.org/1',\n+            'https://scrapytest.org/2',\n+            (\n+                (301, 'http://scrapytest.org/3'),\n+            ),\n+            None,\n+            None,\n+        ),\n+        (   'https://scrapytest.org/1',\n+            'https://example.com/2',    # different origin\n+            (\n+                (301, 'http://scrapytest.com/3'),\n+            ),\n+            None,\n+            None,\n+        ),\n+    ]\n+\n+\n+class TestReferrerOnRedirectSameOrigin(TestReferrerOnRedirect):\n+    \"\"\"\n+    Same Origin policy sends the full URL as \"Referer\" if the target origin\n+    is the same as the parent response (same protocol, same domain, same port).\n+\n+    HTTP redirections to a different domain or a lower secure level\n+    should have the \"Referer\" removed.\n+    \"\"\"\n+    settings = {'REFERRER_POLICY': 'same-origin'}\n+    scenarii = [\n+        (   'http://scrapytest.org/101',      # origin\n+            'http://scrapytest.org/102',      # target\n+            (\n+                # redirections: code, URL\n+                (301, 'http://scrapytest.org/103'),\n+                (301, 'http://scrapytest.org/104'),\n+            ),\n+            b'http://scrapytest.org/101', # expected initial \"Referer\"\n+            b'http://scrapytest.org/101', # expected referer for the redirection request\n+        ),\n+        (   'https://scrapytest.org/201',\n+            'https://scrapytest.org/202',\n+            (\n+                # redirecting from secure to non-secure URL == different origin\n+                (301, 'http://scrapytest.org/203'),\n+            ),\n+            b'https://scrapytest.org/201',\n+            None,\n+        ),\n+        (   'https://scrapytest.org/301',\n+            'https://scrapytest.org/302',\n+            (\n+                # different domain == different origin\n+                (301, 'http://example.com/303'),\n+            ),\n+            b'https://scrapytest.org/301',\n+            None,\n+        ),\n+    ]\n+\n+\n+class TestReferrerOnRedirectStrictOrigin(TestReferrerOnRedirect):\n+    \"\"\"\n+    Strict Origin policy will always send the \"origin\" as referrer\n+    (think of it as the parent URL without the path part),\n+    unless the security level is lower and no \"Referer\" is sent.\n+\n+    Redirections from secure to non-secure URLs should have the\n+    \"Referrer\" header removed if necessary.\n+    \"\"\"\n+    settings = {'REFERRER_POLICY': POLICY_STRICT_ORIGIN}\n+    scenarii = [\n+        (   'http://scrapytest.org/101',\n+            'http://scrapytest.org/102',\n+            (\n+                (301, 'http://scrapytest.org/103'),\n+                (301, 'http://scrapytest.org/104'),\n+            ),\n+            b'http://scrapytest.org/',  # send origin\n+            b'http://scrapytest.org/',  # redirects to same origin: send origin\n+        ),\n+        (   'https://scrapytest.org/201',\n+            'https://scrapytest.org/202',\n+            (\n+                # redirecting to non-secure URL: no referrer\n+                (301, 'http://scrapytest.org/203'),\n+            ),\n+            b'https://scrapytest.org/',\n+            None,\n+        ),\n+        (   'https://scrapytest.org/301',\n+            'https://scrapytest.org/302',\n+            (\n+                # redirecting to non-secure URL (different domain): no referrer\n+                (301, 'http://example.com/303'),\n+            ),\n+            b'https://scrapytest.org/',\n+            None,\n+        ),\n+        (   'http://scrapy.org/401',\n+            'http://example.com/402',\n+            (\n+                (301, 'http://scrapytest.org/403'),\n+            ),\n+            b'http://scrapy.org/',\n+            b'http://scrapy.org/',\n+        ),\n+        (   'https://scrapy.org/501',\n+            'https://example.com/502',\n+            (\n+                # HTTPS all along, so origin referrer is kept as-is\n+                (301, 'https://google.com/503'),\n+                (301, 'https://facebook.com/504'),\n+            ),\n+            b'https://scrapy.org/',\n+            b'https://scrapy.org/',\n+        ),\n+        (   'https://scrapytest.org/601',\n+            'http://scrapytest.org/602',                # TLS to non-TLS: no referrer\n+            (\n+                (301, 'https://scrapytest.org/603'),    # TLS URL again: (still) no referrer\n+            ),\n+            None,\n+            None,\n+        ),\n+    ]\n+\n+\n+class TestReferrerOnRedirectOriginWhenCrossOrigin(TestReferrerOnRedirect):\n+    \"\"\"\n+    Origin When Cross-Origin policy sends the full URL as \"Referer\",\n+    unless the target's origin is different (different domain, different protocol)\n+    in which case only the origin is sent.\n+\n+    Redirections to a different origin should strip the \"Referer\"\n+    to the parent origin.\n+    \"\"\"\n+    settings = {'REFERRER_POLICY': POLICY_ORIGIN_WHEN_CROSS_ORIGIN}\n+    scenarii = [\n+        (   'http://scrapytest.org/101',      # origin\n+            'http://scrapytest.org/102',      # target + redirection\n+            (\n+                # redirections: code, URL\n+                (301, 'http://scrapytest.org/103'),\n+                (301, 'http://scrapytest.org/104'),\n+            ),\n+            b'http://scrapytest.org/101', # expected initial referer\n+            b'http://scrapytest.org/101', # expected referer for the redirection request\n+        ),\n+        (   'https://scrapytest.org/201',\n+            'https://scrapytest.org/202',\n+            (\n+                # redirecting to non-secure URL: send origin\n+                (301, 'http://scrapytest.org/203'),\n+            ),\n+            b'https://scrapytest.org/201',\n+            b'https://scrapytest.org/',\n+        ),\n+        (   'https://scrapytest.org/301',\n+            'https://scrapytest.org/302',\n+            (\n+                # redirecting to non-secure URL (different domain): send origin\n+                (301, 'http://example.com/303'),\n+            ),\n+            b'https://scrapytest.org/301',\n+            b'https://scrapytest.org/',\n+        ),\n+        (   'http://scrapy.org/401',\n+            'http://example.com/402',\n+            (\n+                (301, 'http://scrapytest.org/403'),\n+            ),\n+            b'http://scrapy.org/',\n+            b'http://scrapy.org/',\n+        ),\n+        (   'https://scrapy.org/501',\n+            'https://example.com/502',\n+            (\n+                # all different domains: send origin\n+                (301, 'https://google.com/503'),\n+                (301, 'https://facebook.com/504'),\n+            ),\n+            b'https://scrapy.org/',\n+            b'https://scrapy.org/',\n+        ),\n+        (   'https://scrapytest.org/301',\n+            'http://scrapytest.org/302',                # TLS to non-TLS: send origin\n+            (\n+                (301, 'https://scrapytest.org/303'),    # TLS URL again: send origin (also)\n+            ),\n+            b'https://scrapytest.org/',\n+            b'https://scrapytest.org/',\n+        ),\n+    ]\n+\n+\n+class TestReferrerOnRedirectStrictOriginWhenCrossOrigin(TestReferrerOnRedirect):\n+    \"\"\"\n+    Strict Origin When Cross-Origin policy sends the full URL as \"Referer\",\n+    unless the target's origin is different (different domain, different protocol)\n+    in which case only the origin is sent...\n+    Unless there's also a downgrade in security and then the \"Referer\" header\n+    is not sent.\n+\n+    Redirections to a different origin should strip the \"Referer\" to the parent origin,\n+    and from https:// to http:// will remove the \"Referer\" header.\n+    \"\"\"\n+    settings = {'REFERRER_POLICY': POLICY_STRICT_ORIGIN_WHEN_CROSS_ORIGIN}\n+    scenarii = [\n+        (   'http://scrapytest.org/101',      # origin\n+            'http://scrapytest.org/102',      # target + redirection\n+            (\n+                # redirections: code, URL\n+                (301, 'http://scrapytest.org/103'),\n+                (301, 'http://scrapytest.org/104'),\n+            ),\n+            b'http://scrapytest.org/101', # expected initial referer\n+            b'http://scrapytest.org/101', # expected referer for the redirection request\n+        ),\n+        (   'https://scrapytest.org/201',\n+            'https://scrapytest.org/202',\n+            (\n+                # redirecting to non-secure URL: do not send the \"Referer\" header\n+                (301, 'http://scrapytest.org/203'),\n+            ),\n+            b'https://scrapytest.org/201',\n+            None,\n+        ),\n+        (   'https://scrapytest.org/301',\n+            'https://scrapytest.org/302',\n+            (\n+                # redirecting to non-secure URL (different domain): send origin\n+                (301, 'http://example.com/303'),\n+            ),\n+            b'https://scrapytest.org/301',\n+            None,\n+        ),\n+        (   'http://scrapy.org/401',\n+            'http://example.com/402',\n+            (\n+                (301, 'http://scrapytest.org/403'),\n+            ),\n+            b'http://scrapy.org/',\n+            b'http://scrapy.org/',\n+        ),\n+        (   'https://scrapy.org/501',\n+            'https://example.com/502',\n+            (\n+                # all different domains: send origin\n+                (301, 'https://google.com/503'),\n+                (301, 'https://facebook.com/504'),\n+            ),\n+            b'https://scrapy.org/',\n+            b'https://scrapy.org/',\n+        ),\n+        (   'https://scrapytest.org/601',\n+            'http://scrapytest.org/602',                # TLS to non-TLS: do not send \"Referer\"\n+            (\n+                (301, 'https://scrapytest.org/603'),    # TLS URL again: (still) send nothing\n+            ),\n+            None,\n+            None,\n+        ),\n+    ]\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
