{"custom_id": "requests#1b5bfe681b4c0a987e97ae78b2034db7b7ce3d01", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 141 | Contributors (this commit): 3 | Commits (past 90d): 3 | Contributors (cumulative): 3 | DMM Complexity: None\n\nDIFF:\n@@ -104,4 +104,4 @@ class VendorAlias(object):\n         return module\n \n \n-sys.meta_path.append(VendorAlias([\"urllib3\", \"chardet\"]))\n+sys.meta_path.insert(0, VendorAlias([\"urllib3\", \"chardet\"]))\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#dacf69a16df787c4a4c4b4185b86e597b2414445", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 585 | Contributors (this commit): 12 | Commits (past 90d): 4 | Contributors (cumulative): 12 | DMM Complexity: None\n\nDIFF:\n@@ -43,7 +43,7 @@ is at <http://python-requests.org>.\n \n __title__ = 'requests'\n __version__ = '2.6.0'\n-__build__ = 0x020503\n+__build__ = 0x020600\n __author__ = 'Kenneth Reitz'\n __license__ = 'Apache 2.0'\n __copyright__ = 'Copyright 2015 Kenneth Reitz'\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#36093e69c70b9b24dd1e007befa35ad891313f51", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 19 | Lines Deleted: 3 | Files Changed: 2 | Hunks: 5 | Methods Changed: 3 | Complexity Δ (Sum/Max): 3/4 | Churn Δ: 22 | Churn Cumulative: 10217 | Contributors (this commit): 151 | Commits (past 90d): 6 | Contributors (cumulative): 160 | DMM Complexity: 1.0\n\nDIFF:\n@@ -6,6 +6,7 @@ Compatibility code to be able to use `cookielib.CookieJar` with requests.\n requests.utils imports from here, so be careful with imports.\n \"\"\"\n \n+import copy\n import time\n import collections\n from .compat import cookielib, urlparse, urlunparse, Morsel\n@@ -302,7 +303,7 @@ class RequestsCookieJar(cookielib.CookieJar, collections.MutableMapping):\n         \"\"\"Updates this jar with cookies from another CookieJar or dict-like\"\"\"\n         if isinstance(other, cookielib.CookieJar):\n             for cookie in other:\n-                self.set_cookie(cookie)\n+                self.set_cookie(copy.copy(cookie))\n         else:\n             super(RequestsCookieJar, self).update(other)\n \n@@ -359,6 +360,21 @@ class RequestsCookieJar(cookielib.CookieJar, collections.MutableMapping):\n         return new_cj\n \n \n+def _copy_cookie_jar(jar):\n+    if jar is None:\n+        return None\n+\n+    if hasattr(jar, 'copy'):\n+        # We're dealing with an instane of RequestsCookieJar\n+        return jar.copy()\n+    # We're dealing with a generic CookieJar instance\n+    new_jar = copy.copy(jar)\n+    new_jar.clear()\n+    for cookie in jar:\n+        new_jar.set_cookie(copy.copy(cookie))\n+    return new_jar\n+\n+\n def create_cookie(name, value, **kwargs):\n     \"\"\"Make a cookie from underspecified parameters.\n \n\n@@ -15,7 +15,7 @@ from .hooks import default_hooks\n from .structures import CaseInsensitiveDict\n \n from .auth import HTTPBasicAuth\n-from .cookies import cookiejar_from_dict, get_cookie_header\n+from .cookies import cookiejar_from_dict, get_cookie_header, _copy_cookie_jar\n from .packages.urllib3.fields import RequestField\n from .packages.urllib3.filepost import encode_multipart_formdata\n from .packages.urllib3.util import parse_url\n@@ -320,7 +320,7 @@ class PreparedRequest(RequestEncodingMixin, RequestHooksMixin):\n         p.method = self.method\n         p.url = self.url\n         p.headers = self.headers.copy() if self.headers is not None else None\n-        p._cookies = self._cookies.copy() if self._cookies is not None else None\n+        p._cookies = _copy_cookie_jar(self._cookies)\n         p.body = self.body\n         p.hooks = self.hooks\n         return p\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#e3c7b43fc98aab11bd228498a775a528a06429f0", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 9 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 10 | Churn Cumulative: 9285 | Contributors (this commit): 143 | Commits (past 90d): 6 | Contributors (cumulative): 143 | DMM Complexity: None\n\nDIFF:\n@@ -501,7 +501,15 @@ class PreparedRequest(RequestEncodingMixin, RequestHooksMixin):\n             self.prepare_content_length(self.body)\n \n     def prepare_cookies(self, cookies):\n-        \"\"\"Prepares the given HTTP cookie data.\"\"\"\n+        \"\"\"Prepares the given HTTP cookie data.\n+\n+        This function eventually generates a ``Cookie`` header from the\n+        given cookies using cookielib. Due to cookielib's design, the header\n+        will not be regenerated if it already exists, meaning this function\n+        can only be called once for the life of the\n+        :class:`PreparedRequest <PreparedRequest>` object. Any subsequent calls\n+        to ``prepare_cookies`` will have no actual effect, unless the \"Cookie\"\n+        header is removed beforehand.\"\"\"\n \n         if isinstance(cookies, cookielib.CookieJar):\n             self._cookies = cookies\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#f89b5a5d90d7b45a7f59dbd2bb29ae2f400aba44", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 9287 | Contributors (this commit): 144 | Commits (past 90d): 7 | Contributors (cumulative): 144 | DMM Complexity: None\n\nDIFF:\n@@ -358,7 +358,7 @@ class PreparedRequest(RequestEncodingMixin, RequestHooksMixin):\n \n         if not scheme:\n             raise MissingSchema(\"Invalid URL {0!r}: No schema supplied. \"\n-                                \"Perhaps you meant http://{0}?\".format(url))\n+                                \"Perhaps you meant http://{0}?\".format(url.encode('utf8')))\n \n         if not host:\n             raise InvalidURL(\"Invalid URL %r: No host supplied\" % url)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#f02d0f9e79a3aa3f0b716871f457ceb8f446bdba", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 9289 | Contributors (this commit): 144 | Commits (past 90d): 8 | Contributors (cumulative): 144 | DMM Complexity: None\n\nDIFF:\n@@ -358,7 +358,7 @@ class PreparedRequest(RequestEncodingMixin, RequestHooksMixin):\n \n         if not scheme:\n             raise MissingSchema(\"Invalid URL {0!r}: No schema supplied. \"\n-                                \"Perhaps you meant http://{0}?\".format(url.encode('utf8')))\n+                                \"Perhaps you meant http://{0}?\".format(to_native_string(url,encoding='utf8')))\n \n         if not host:\n             raise InvalidURL(\"Invalid URL %r: No host supplied\" % url)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#599f8343512277671d08e043a0505a82630c641d", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 3 | Churn Cumulative: 9292 | Contributors (this commit): 144 | Commits (past 90d): 9 | Contributors (cumulative): 144 | DMM Complexity: 0.0\n\nDIFF:\n@@ -358,7 +358,8 @@ class PreparedRequest(RequestEncodingMixin, RequestHooksMixin):\n \n         if not scheme:\n             raise MissingSchema(\"Invalid URL {0!r}: No schema supplied. \"\n-                                \"Perhaps you meant http://{0}?\".format(to_native_string(url,encoding='utf8')))\n+                                \"Perhaps you meant http://{0}?\"\n+                                .format(to_native_string(url, 'utf8')))\n \n         if not host:\n             raise InvalidURL(\"Invalid URL %r: No host supplied\" % url)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#a0632d8df045f9e56625a856a14df8941922eced", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 9296 | Contributors (this commit): 144 | Commits (past 90d): 10 | Contributors (cumulative): 144 | DMM Complexity: None\n\nDIFF:\n@@ -358,8 +358,8 @@ class PreparedRequest(RequestEncodingMixin, RequestHooksMixin):\n \n         if not scheme:\n             raise MissingSchema(\"Invalid URL {0!r}: No schema supplied. \"\n-                                \"Perhaps you meant http://{0}?\"\n-                                .format(to_native_string(url, 'utf8')))\n+                                \"Perhaps you meant http://{0}?\".format(\n+                                    to_native_string(url, 'utf8')))\n \n         if not host:\n             raise InvalidURL(\"Invalid URL %r: No host supplied\" % url)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#35045e851a75b23d3d4e50853dfc1c5555110895", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 4 | Lines Deleted: 1 | Files Changed: 2 | Hunks: 2 | Methods Changed: 2 | Complexity Δ (Sum/Max): -2/1 | Churn Δ: 5 | Churn Cumulative: 14311 | Contributors (this commit): 181 | Commits (past 90d): 19 | Contributors (cumulative): 237 | DMM Complexity: None\n\nDIFF:\n@@ -523,6 +523,10 @@ class PreparedRequest(RequestEncodingMixin, RequestHooksMixin):\n \n     def prepare_hooks(self, hooks):\n         \"\"\"Prepares the given hooks.\"\"\"\n+        # hooks can be passed as None to the prepare method and to this\n+        # method. To prevent iterating over None, simply use an empty list\n+        # if hooks is False-y\n+        hooks = hooks or []\n         for event in hooks:\n             self.register_hook(event, hooks[event])\n \n\n@@ -1613,7 +1613,6 @@ def test_prepare_unicode_url():\n     p.prepare(\n         method='GET',\n         url=u('http://www.example.com/üniçø∂é'),\n-        hooks=[]\n     )\n     assert_copy(p, p.copy())\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#cfb9e66b04136f014412a8d638b2d69603557c1d", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 589 | Contributors (this commit): 12 | Commits (past 90d): 5 | Contributors (cumulative): 12 | DMM Complexity: None\n\nDIFF:\n@@ -42,8 +42,8 @@ is at <http://python-requests.org>.\n \"\"\"\n \n __title__ = 'requests'\n-__version__ = '2.6.0'\n-__build__ = 0x020600\n+__version__ = '2.6.1'\n+__build__ = 0x020601\n __author__ = 'Kenneth Reitz'\n __license__ = 'Apache 2.0'\n __copyright__ = 'Copyright 2015 Kenneth Reitz'\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#3d339ed7e61261832347190185113b890b55009e", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 220 | Contributors (this commit): 8 | Commits (past 90d): 3 | Contributors (cumulative): 8 | DMM Complexity: None\n\nDIFF:\n@@ -4,7 +4,7 @@ urllib3 - Thread-safe connection pooling and re-using.\n \n __author__ = 'Andrey Petrov (andrey.petrov@shazow.net)'\n __license__ = 'MIT'\n-__version__ = '1.10.2'\n+__version__ = '1.10.3'\n \n \n from .connectionpool import (\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#3e3fc7683cab2d401981fdf01ae8cdc40c8d6222", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 105 | Files Changed: 1 | Hunks: 2 | Methods Changed: 3 | Complexity Δ (Sum/Max): -17/0 | Churn Δ: 106 | Churn Cumulative: 247 | Contributors (this commit): 4 | Commits (past 90d): 4 | Contributors (cumulative): 4 | DMM Complexity: 0.7959183673469388\n\nDIFF:\n@@ -1,107 +1,3 @@\n-\"\"\"\n-Copyright (c) Donald Stufft, pip, and individual contributors\n-\n-Permission is hereby granted, free of charge, to any person obtaining\n-a copy of this software and associated documentation files (the\n-\"Software\"), to deal in the Software without restriction, including\n-without limitation the rights to use, copy, modify, merge, publish,\n-distribute, sublicense, and/or sell copies of the Software, and to\n-permit persons to whom the Software is furnished to do so, subject to\n-the following conditions:\n-\n-The above copyright notice and this permission notice shall be\n-included in all copies or substantial portions of the Software.\n-\n-THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n-EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n-MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n-NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\n-LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n-OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n-WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n-\"\"\"\n from __future__ import absolute_import\n \n-import sys\n-\n-\n-class VendorAlias(object):\n-\n-    def __init__(self, package_names):\n-        self._package_names = package_names\n-        self._vendor_name = __name__\n-        self._vendor_pkg = self._vendor_name + \".\"\n-        self._vendor_pkgs = [\n-            self._vendor_pkg + name for name in self._package_names\n-        ]\n-\n-    def find_module(self, fullname, path=None):\n-        if fullname.startswith(self._vendor_pkg):\n-            return self\n-\n-    def load_module(self, name):\n-        # Ensure that this only works for the vendored name\n-        if not name.startswith(self._vendor_pkg):\n-            raise ImportError(\n-                \"Cannot import %s, must be a subpackage of '%s'.\" % (\n-                    name, self._vendor_name,\n-                )\n-            )\n-\n-        if not (name == self._vendor_name or\n-                any(name.startswith(pkg) for pkg in self._vendor_pkgs)):\n-            raise ImportError(\n-                \"Cannot import %s, must be one of %s.\" % (\n-                    name, self._vendor_pkgs\n-                )\n-            )\n-\n-        # Check to see if we already have this item in sys.modules, if we do\n-        # then simply return that.\n-        if name in sys.modules:\n-            return sys.modules[name]\n-\n-        # Check to see if we can import the vendor name\n-        try:\n-            # We do this dance here because we want to try and import this\n-            # module without hitting a recursion error because of a bunch of\n-            # VendorAlias instances on sys.meta_path\n-            real_meta_path = sys.meta_path[:]\n-            try:\n-                sys.meta_path = [\n-                    m for m in sys.meta_path\n-                    if not isinstance(m, VendorAlias)\n-                ]\n-                __import__(name)\n-                module = sys.modules[name]\n-            finally:\n-                # Re-add any additions to sys.meta_path that were made while\n-                # during the import we just did, otherwise things like\n-                # requests.packages.urllib3.poolmanager will fail.\n-                for m in sys.meta_path:\n-                    if m not in real_meta_path:\n-                        real_meta_path.append(m)\n-\n-                # Restore sys.meta_path with any new items.\n-                sys.meta_path = real_meta_path\n-        except ImportError:\n-            # We can't import the vendor name, so we'll try to import the\n-            # \"real\" name.\n-            real_name = name[len(self._vendor_pkg):]\n-            try:\n-                __import__(real_name)\n-                module = sys.modules[real_name]\n-            except ImportError:\n-                raise ImportError(\"No module named '%s'\" % (name,))\n-\n-        # If we've gotten here we've found the module we're looking for, either\n-        # as part of our vendored package, or as the real name, so we'll add\n-        # it to sys.modules as the vendored name so that we don't have to do\n-        # the lookup again.\n-        sys.modules[name] = module\n-\n-        # Finally, return the loaded module\n-        return module\n-\n-\n-sys.meta_path.insert(0, VendorAlias([\"urllib3\", \"chardet\"]))\n+from . import urllib3\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#73b9b6906d5cd94bd18751d7c5dce15a5d47eab0", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 34 | Lines Deleted: 18 | Files Changed: 1 | Hunks: 5 | Methods Changed: 4 | Complexity Δ (Sum/Max): 2/2 | Churn Δ: 52 | Churn Cumulative: 943 | Contributors (this commit): 12 | Commits (past 90d): 4 | Contributors (cumulative): 12 | DMM Complexity: 0.8571428571428571\n\nDIFF:\n@@ -172,6 +172,36 @@ class HTTPResponse(io.IOBase):\n         \"\"\"\n         return self._fp_bytes_read\n \n+    def _init_decoder(self):\n+        \"\"\"\n+        Set-up the _decoder attribute if necessar.\n+        \"\"\"\n+        # Note: content-encoding value should be case-insensitive, per RFC 7230\n+        # Section 3.2\n+        content_encoding = self.headers.get('content-encoding', '').lower()\n+        if self._decoder is None:\n+            if content_encoding in self.CONTENT_DECODERS:\n+                self._decoder = _get_decoder(content_encoding)\n+\n+    def _decode(self, data, decode_content, flush_decoder):\n+        \"\"\"\n+        Decode the data passed in and potentially flush the decoder.\n+        \"\"\"\n+        try:\n+            if decode_content and self._decoder:\n+                data = self._decoder.decompress(data)\n+        except (IOError, zlib.error) as e:\n+            content_encoding = self.headers.get('content-encoding', '').lower()\n+            raise DecodeError(\n+                \"Received response with content-encoding: %s, but \"\n+                \"failed to decode it.\" % content_encoding, e)\n+\n+        if flush_decoder and decode_content and self._decoder:\n+            buf = self._decoder.decompress(binary_type())\n+            data += buf + self._decoder.flush()\n+\n+        return data\n+\n     def read(self, amt=None, decode_content=None, cache_content=False):\n         \"\"\"\n         Similar to :meth:`httplib.HTTPResponse.read`, but with two additional\n@@ -193,12 +223,7 @@ class HTTPResponse(io.IOBase):\n             after having ``.read()`` the file object. (Overridden if ``amt`` is\n             set.)\n         \"\"\"\n-        # Note: content-encoding value should be case-insensitive, per RFC 7230\n-        # Section 3.2\n-        content_encoding = self.headers.get('content-encoding', '').lower()\n-        if self._decoder is None:\n-            if content_encoding in self.CONTENT_DECODERS:\n-                self._decoder = _get_decoder(content_encoding)\n+        self._init_decoder()\n         if decode_content is None:\n             decode_content = self.decode_content\n \n@@ -247,17 +272,7 @@ class HTTPResponse(io.IOBase):\n \n             self._fp_bytes_read += len(data)\n \n-            try:\n-                if decode_content and self._decoder:\n-                    data = self._decoder.decompress(data)\n-            except (IOError, zlib.error) as e:\n-                raise DecodeError(\n-                    \"Received response with content-encoding: %s, but \"\n-                    \"failed to decode it.\" % content_encoding, e)\n-\n-            if flush_decoder and decode_content and self._decoder:\n-                buf = self._decoder.decompress(binary_type())\n-                data += buf + self._decoder.flush()\n+            data = self._decode(data, decode_content, flush_decoder)\n \n             if cache_content:\n                 self._body = data\n@@ -284,9 +299,10 @@ class HTTPResponse(io.IOBase):\n             If True, will attempt to decode the body based on the\n             'content-encoding' header.\n         \"\"\"\n+        self._init_decoder()\n         if self.chunked:\n             for line in self.read_chunked(amt):\n-                yield line\n+                yield self._decode(line, decode_content, True)\n         else:\n             while not is_fp_closed(self._fp):\n                 data = self.read(amt=amt, decode_content=decode_content)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#ca66267d2cf8adc67ed8857f3f57b45ffde21e01", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 593 | Contributors (this commit): 12 | Commits (past 90d): 6 | Contributors (cumulative): 12 | DMM Complexity: None\n\nDIFF:\n@@ -42,8 +42,8 @@ is at <http://python-requests.org>.\n \"\"\"\n \n __title__ = 'requests'\n-__version__ = '2.6.1'\n-__build__ = 0x020601\n+__version__ = '2.6.2'\n+__build__ = 0x020602\n __author__ = 'Kenneth Reitz'\n __license__ = 'Apache 2.0'\n __copyright__ = 'Copyright 2015 Kenneth Reitz'\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#b7fc3a1250cb13ed3b55010ccc33f2681f0ffa4a", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 11 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 3 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 11 | Churn Cumulative: 258 | Contributors (this commit): 5 | Commits (past 90d): 5 | Contributors (cumulative): 5 | DMM Complexity: None\n\nDIFF:\n@@ -1,3 +1,14 @@\n from __future__ import absolute_import\n+import sys\n \n+try:\n     from . import urllib3\n+except ImportError:\n+    import urllib3\n+    sys.modules['%s.urllib3' % __name__] = urllib3\n+\n+try:\n+    from . import chardet\n+except ImportError:\n+    import chardet\n+    sys.modules['%s.chardet' % __name__] = chardet\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#93216afbaf09290aa1cadb2f5811f18f4c48f983", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 22 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 22 | Churn Cumulative: 280 | Contributors (this commit): 5 | Commits (past 90d): 6 | Contributors (cumulative): 5 | DMM Complexity: None\n\nDIFF:\n@@ -1,3 +1,25 @@\n+'''\n+Debian and other distributions \"unbundle\" requests' vendored dependencies, and\n+rewrite all imports to use the global versions of ``urllib3`` and ``chardet``.\n+The problem with this is that not only requests itself imports those\n+dependencies, but third-party code outside of the distros' control too.\n+\n+In reaction to these problems, the distro maintainers replaced\n+``requests.packages`` with a magical \"stub module\" that imports the correct\n+modules. The implementations were varying in quality and all had severe\n+problems. For example, a symlink (or hardlink) that links the correct modules\n+into place introduces problems regarding object identity, since you now have\n+two modules in `sys.modules` with the same API, but different identities::\n+\n+    requests.packages.urllib3 is not urllib3\n+\n+With version ``2.5.2``, requests started to maintain its own stub, so that\n+distro-specific breakage would be reduced to a minimum, even though the whole\n+issue is not requests' fault in the first place. See\n+https://github.com/kennethreitz/requests/pull/2375 for the corresponding pull\n+request.\n+'''\n+\n from __future__ import absolute_import\n import sys\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#6e9ebc06d1056d5a488e8d9af75ae82f458bf714", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 3 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 3 | Methods Changed: 2 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 5 | Churn Cumulative: 1148 | Contributors (this commit): 33 | Commits (past 90d): 2 | Contributors (cumulative): 33 | DMM Complexity: None\n\nDIFF:\n@@ -55,17 +55,18 @@ def request(method, url, **kwargs):\n     return response\n \n \n-def get(url, **kwargs):\n+def get(url, params=None, **kwargs):\n     \"\"\"Sends a GET request.\n \n     :param url: URL for the new :class:`Request` object.\n+    :param params: (optional) Dictionary or bytes to be sent in the query string for the :class:`Request`.\n     :param \\*\\*kwargs: Optional arguments that ``request`` takes.\n     :return: :class:`Response <Response>` object\n     :rtype: requests.Response\n     \"\"\"\n \n     kwargs.setdefault('allow_redirects', True)\n-    return request('get', url, **kwargs)\n+    return request('get', url, params=params, **kwargs)\n \n \n def options(url, **kwargs):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#b7bd29734022e634634d908e10bbf7a5ac15e76b", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 597 | Contributors (this commit): 12 | Commits (past 90d): 7 | Contributors (cumulative): 12 | DMM Complexity: None\n\nDIFF:\n@@ -42,8 +42,8 @@ is at <http://python-requests.org>.\n \"\"\"\n \n __title__ = 'requests'\n-__version__ = '2.6.2'\n-__build__ = 0x020602\n+__version__ = '2.7.0'\n+__build__ = 0x020700\n __author__ = 'Kenneth Reitz'\n __license__ = 'Apache 2.0'\n __copyright__ = 'Copyright 2015 Kenneth Reitz'\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#3475399a472ad0813a18d0b1fbeaec773f6cdeab", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 599 | Contributors (this commit): 13 | Commits (past 90d): 8 | Contributors (cumulative): 13 | DMM Complexity: None\n\nDIFF:\n@@ -6,7 +6,7 @@\n #          /\n \n \"\"\"\n-requests HTTP library\n+Requests HTTP library\n ~~~~~~~~~~~~~~~~~~~~~\n \n Requests is an HTTP library, written in Python, for human beings. Basic GET\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#ab84f9be5740d4649d734e73b84f17f85e52ffc9", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 3 | Files Changed: 1 | Hunks: 3 | Methods Changed: 1 | Complexity Δ (Sum/Max): -1/0 | Churn Δ: 5 | Churn Cumulative: 9305 | Contributors (this commit): 145 | Commits (past 90d): 12 | Contributors (cumulative): 145 | DMM Complexity: None\n\nDIFF:\n@@ -42,12 +42,11 @@ REDIRECT_STATI = (\n     codes.temporary_redirect, # 307\n     codes.permanent_redirect, # 308\n )\n+\n DEFAULT_REDIRECT_LIMIT = 30\n CONTENT_CHUNK_SIZE = 10 * 1024\n ITER_CHUNK_SIZE = 512\n \n-json_dumps = json.dumps\n-\n \n class RequestEncodingMixin(object):\n     @property\n@@ -425,7 +424,7 @@ class PreparedRequest(RequestEncodingMixin, RequestHooksMixin):\n \n         if json is not None:\n             content_type = 'application/json'\n-            body = json_dumps(json)\n+            body = json.dumps(json)\n \n         is_stream = all([\n             hasattr(data, '__iter__'),\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#74609c5c8f94cbae3d3fc72e0b0a53cae19cc29c", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 11 | Lines Deleted: 28 | Files Changed: 1 | Hunks: 6 | Methods Changed: 4 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 39 | Churn Cumulative: 9344 | Contributors (this commit): 145 | Commits (past 90d): 13 | Contributors (cumulative): 145 | DMM Complexity: 0.9090909090909091\n\nDIFF:\n@@ -148,8 +148,7 @@ class RequestEncodingMixin(object):\n             else:\n                 fdata = fp.read()\n \n-            rf = RequestField(name=k, data=fdata,\n-                              filename=fn, headers=fh)\n+            rf = RequestField(name=k, data=fdata, filename=fn, headers=fh)\n             rf.make_multipart(content_type=ft)\n             new_fields.append(rf)\n \n@@ -206,17 +205,8 @@ class Request(RequestHooksMixin):\n       <PreparedRequest [GET]>\n \n     \"\"\"\n-    def __init__(self,\n-        method=None,\n-        url=None,\n-        headers=None,\n-        files=None,\n-        data=None,\n-        params=None,\n-        auth=None,\n-        cookies=None,\n-        hooks=None,\n-        json=None):\n+    def __init__(self, method=None, url=None, headers=None, files=None,\n+        data=None, params=None, auth=None, cookies=None, hooks=None, json=None):\n \n         # Default empty dicts for dict params.\n         data = [] if data is None else data\n@@ -295,8 +285,7 @@ class PreparedRequest(RequestEncodingMixin, RequestHooksMixin):\n         self.hooks = default_hooks()\n \n     def prepare(self, method=None, url=None, headers=None, files=None,\n-                data=None, params=None, auth=None, cookies=None, hooks=None,\n-                json=None):\n+        data=None, params=None, auth=None, cookies=None, hooks=None, json=None):\n         \"\"\"Prepares the entire request with the given parameters.\"\"\"\n \n         self.prepare_method(method)\n@@ -305,6 +294,7 @@ class PreparedRequest(RequestEncodingMixin, RequestHooksMixin):\n         self.prepare_cookies(cookies)\n         self.prepare_body(data, files, json)\n         self.prepare_auth(auth, url)\n+\n         # Note that prepare_auth must be last to enable authentication schemes\n         # such as OAuth to work on a fully prepared request.\n \n@@ -356,9 +346,10 @@ class PreparedRequest(RequestEncodingMixin, RequestHooksMixin):\n             raise InvalidURL(*e.args)\n \n         if not scheme:\n-            raise MissingSchema(\"Invalid URL {0!r}: No schema supplied. \"\n-                                \"Perhaps you meant http://{0}?\".format(\n-                                    to_native_string(url, 'utf8')))\n+            error = (\"Invalid URL {0!r}: No schema supplied. Perhaps you meant http://{0}?\")\n+            error = error.format(to_native_string(url, 'utf8'))\n+\n+            raise MissingSchema(error)\n \n         if not host:\n             raise InvalidURL(\"Invalid URL %r: No host supplied\" % url)\n@@ -532,16 +523,8 @@ class Response(object):\n     \"\"\"\n \n     __attrs__ = [\n-        '_content',\n-        'status_code',\n-        'headers',\n-        'url',\n-        'history',\n-        'encoding',\n-        'reason',\n-        'cookies',\n-        'elapsed',\n-        'request',\n+        '_content', 'status_code', 'headers', 'url', 'history',\n+        'encoding', 'reason', 'cookies', 'elapsed', 'request'\n     ]\n \n     def __init__(self):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#c6c8d649af10cd5660b625fca4f44bd00541d518", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 3 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 4 | Methods Changed: 2 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 5 | Churn Cumulative: 9349 | Contributors (this commit): 146 | Commits (past 90d): 14 | Contributors (cumulative): 146 | DMM Complexity: None\n\nDIFF:\n@@ -648,9 +648,10 @@ class Response(object):\n         If decode_unicode is True, content will be decoded using the best\n         available encoding based on the response.\n         \"\"\"\n+\n         def generate():\n-            try:\n             # Special case for urllib3.\n+            if hasattr(self.raw, 'stream'):\n                 try:\n                     for chunk in self.raw.stream(chunk_size, decode_content=True):\n                         yield chunk\n@@ -660,7 +661,7 @@ class Response(object):\n                     raise ContentDecodingError(e)\n                 except ReadTimeoutError as e:\n                     raise ConnectionError(e)\n-            except AttributeError:\n+            else:\n                 # Standard file-like object.\n                 while True:\n                     chunk = self.raw.read(chunk_size)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#86aff09103608fb5cbb11dbfbcf35e5e4927a5da", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): -1/0 | Churn Δ: 2 | Churn Cumulative: 1427 | Contributors (this commit): 35 | Commits (past 90d): 6 | Contributors (cumulative): 35 | DMM Complexity: None\n\nDIFF:\n@@ -179,7 +179,7 @@ class HTTPDigestAuth(AuthBase):\n             # Consume content and release the original connection\n             # to allow our new request to reuse the same one.\n             r.content\n-            r.raw.release_conn()\n+            r.close()\n             prep = r.request.copy()\n             extract_cookies_to_jar(prep._cookies, r.request, r.raw)\n             prep.prepare_cookies(prep._cookies)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#cda95d3cdee339f10d48287395368e31c386f296", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 944 | Contributors (this commit): 19 | Commits (past 90d): 2 | Contributors (cumulative): 19 | DMM Complexity: None\n\nDIFF:\n@@ -415,7 +415,7 @@ def morsel_to_cookie(morsel):\n \n     expires = None\n     if morsel['max-age']:\n-        expires = time.time() + morsel['max-age']\n+        expires = time.time() + float(morsel['max-age'])\n     elif morsel['expires']:\n         time_template = '%a, %d-%b-%Y %H:%M:%S GMT'\n         expires = time.mktime(\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#fb6dade63d967623e5fb7505e05d22995dcec00e", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 3 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 5 | Churn Cumulative: 9354 | Contributors (this commit): 146 | Commits (past 90d): 15 | Contributors (cumulative): 146 | DMM Complexity: None\n\nDIFF:\n@@ -30,7 +30,8 @@ from .utils import (\n     iter_slices, guess_json_utf, super_len, to_native_string)\n from .compat import (\n     cookielib, urlunparse, urlsplit, urlencode, str, bytes, StringIO,\n-    is_py2, chardet, json, builtin_str, basestring)\n+    is_py2, chardet, builtin_str, basestring)\n+from .compat import json as complexjson\n from .status_codes import codes\n \n #: The set of HTTP status codes that indicate an automatically\n@@ -415,7 +416,7 @@ class PreparedRequest(RequestEncodingMixin, RequestHooksMixin):\n \n         if json is not None:\n             content_type = 'application/json'\n-            body = json.dumps(json)\n+            body = complexjson.dumps(json)\n \n         is_stream = all([\n             hasattr(data, '__iter__'),\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#553907aa6b588c6006babdf746e34748d630595d", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 4 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 6 | Churn Cumulative: 9360 | Contributors (this commit): 146 | Commits (past 90d): 16 | Contributors (cumulative): 146 | DMM Complexity: 1.0\n\nDIFF:\n@@ -792,14 +792,16 @@ class Response(object):\n             encoding = guess_json_utf(self.content)\n             if encoding is not None:\n                 try:\n-                    return json.loads(self.content.decode(encoding), **kwargs)\n+                    return complexjson.loads(\n+                        self.content.decode(encoding), **kwargs\n+                    )\n                 except UnicodeDecodeError:\n                     # Wrong UTF codec detected; usually because it's not UTF-8\n                     # but some other 8-bit codec.  This is an RFC violation,\n                     # and the server didn't bother to tell us what codec *was*\n                     # used.\n                     pass\n-        return json.loads(self.text, **kwargs)\n+        return complexjson.loads(self.text, **kwargs)\n \n     @property\n     def links(self):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#d3bd3630ee9599f1bdbc71e0efb3d3b21ee0100e", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 3 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 3 | Churn Cumulative: 947 | Contributors (this commit): 19 | Commits (past 90d): 3 | Contributors (cumulative): 19 | DMM Complexity: 1.0\n\nDIFF:\n@@ -415,7 +415,10 @@ def morsel_to_cookie(morsel):\n \n     expires = None\n     if morsel['max-age']:\n+        try:\n             expires = time.time() + float(morsel['max-age'])\n+        except ValueError:\n+            pass\n     elif morsel['expires']:\n         time_template = '%a, %d-%b-%Y %H:%M:%S GMT'\n         expires = time.mktime(\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#395a3e888506d3713dba030b73adc21ca99a305c", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 3 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 5 | Churn Cumulative: 9365 | Contributors (this commit): 146 | Commits (past 90d): 17 | Contributors (cumulative): 146 | DMM Complexity: None\n\nDIFF:\n@@ -30,7 +30,8 @@ from .utils import (\n     iter_slices, guess_json_utf, super_len, to_native_string)\n from .compat import (\n     cookielib, urlunparse, urlsplit, urlencode, str, bytes, StringIO,\n-    is_py2, chardet, json, builtin_str, basestring)\n+    is_py2, chardet, builtin_str, basestring)\n+from .compat import json as complexjson\n from .status_codes import codes\n \n #: The set of HTTP status codes that indicate an automatically\n@@ -415,7 +416,7 @@ class PreparedRequest(RequestEncodingMixin, RequestHooksMixin):\n \n         if json is not None:\n             content_type = 'application/json'\n-            body = json.dumps(json)\n+            body = complexjson.dumps(json)\n \n         is_stream = all([\n             hasattr(data, '__iter__'),\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#059e105f8f5897ddf2da7c2317bef995ee099ab5", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 4 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 6 | Churn Cumulative: 9371 | Contributors (this commit): 146 | Commits (past 90d): 18 | Contributors (cumulative): 146 | DMM Complexity: 1.0\n\nDIFF:\n@@ -793,14 +793,16 @@ class Response(object):\n             encoding = guess_json_utf(self.content)\n             if encoding is not None:\n                 try:\n-                    return json.loads(self.content.decode(encoding), **kwargs)\n+                    return complexjson.loads(\n+                        self.content.decode(encoding), **kwargs\n+                    )\n                 except UnicodeDecodeError:\n                     # Wrong UTF codec detected; usually because it's not UTF-8\n                     # but some other 8-bit codec.  This is an RFC violation,\n                     # and the server didn't bother to tell us what codec *was*\n                     # used.\n                     pass\n-        return json.loads(self.text, **kwargs)\n+        return complexjson.loads(self.text, **kwargs)\n \n     @property\n     def links(self):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#dd0f164f8ed8e6f936c8af4442f6ddfa4d302fd5", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 4 | Lines Deleted: 4 | Files Changed: 1 | Hunks: 3 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 8 | Churn Cumulative: 955 | Contributors (this commit): 19 | Commits (past 90d): 4 | Contributors (cumulative): 19 | DMM Complexity: None\n\nDIFF:\n@@ -416,13 +416,13 @@ def morsel_to_cookie(morsel):\n     expires = None\n     if morsel['max-age']:\n         try:\n-            expires = time.time() + float(morsel['max-age'])\n+            expires = int(time.time() + int(morsel['max-age']))\n         except ValueError:\n-            pass\n+            raise TypeError('max-age: %s must be integer' % morsel['max-age'])\n     elif morsel['expires']:\n         time_template = '%a, %d-%b-%Y %H:%M:%S GMT'\n-        expires = time.mktime(\n-            time.strptime(morsel['expires'], time_template)) - time.timezone\n+        expires = int(time.mktime(\n+            time.strptime(morsel['expires'], time_template)) - time.timezone)\n     return create_cookie(\n         comment=morsel['comment'],\n         comment_url=bool(morsel['comment']),\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#8d0889b91b7e9d487e69eea00baed666a25259af", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 26 | Lines Deleted: 0 | Files Changed: 2 | Hunks: 3 | Methods Changed: 3 | Complexity Δ (Sum/Max): 4/3 | Churn Δ: 26 | Churn Cumulative: 14408 | Contributors (this commit): 183 | Commits (past 90d): 26 | Contributors (cumulative): 240 | DMM Complexity: 1.0\n\nDIFF:\n@@ -842,4 +842,7 @@ class Response(object):\n \n         *Note: Should not normally need to be called explicitly.*\n         \"\"\"\n+        if not self._content_consumed:\n+            return self.raw.close()\n+\n         return self.raw.release_conn()\n\n@@ -9,6 +9,8 @@ import os\n import pickle\n import unittest\n import collections\n+import contextlib\n+import random\n \n import io\n import requests\n@@ -1252,6 +1254,27 @@ class TestCaseInsensitiveDict(unittest.TestCase):\n         assert frozenset(cid) == keyset\n \n \n+class TestSessionContextClosing(unittest.TestCase):\n+\n+    def _perform_session_without_consuming(self):\n+        session = requests.Session()\n+\n+        urls = [\n+            'http://reddit.com',\n+            'http://github.com',\n+            'http://bitbucket.org',\n+        ]\n+\n+        for _ in range(25):\n+            with contextlib.closing(session.get(random.choice(urls), stream=True)) as r:\n+                pass\n+\n+        return \"OK\"\n+\n+    def test_stream_session_content_not_consumed(self):\n+        self.assertEqual(self._perform_session_without_consuming(), \"OK\")\n+\n+\n class UtilsTestCase(unittest.TestCase):\n \n     def test_super_len_io_streams(self):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#1da62a65d9b28306c3be7ad603b2721374ce7d13", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 13 | Lines Deleted: 0 | Files Changed: 2 | Hunks: 3 | Methods Changed: 2 | Complexity Δ (Sum/Max): -2/0 | Churn Δ: 13 | Churn Cumulative: 14421 | Contributors (this commit): 183 | Commits (past 90d): 28 | Contributors (cumulative): 240 | DMM Complexity: 1.0\n\nDIFF:\n@@ -842,4 +842,7 @@ class Response(object):\n \n         *Note: Should not normally need to be called explicitly.*\n         \"\"\"\n+        if not self._content_consumed:\n+            return self.raw.close()\n+\n         return self.raw.release_conn()\n\n@@ -9,6 +9,7 @@ import os\n import pickle\n import unittest\n import collections\n+import contextlib\n \n import io\n import requests\n@@ -1060,6 +1061,15 @@ class RequestsTestCase(unittest.TestCase):\n         next(it)\n         assert len(list(it)) == 3\n \n+    def test_unconsumed_session_response_closes_connection(self):\n+        s = requests.session()\n+\n+        with contextlib.closing(s.get(httpbin('stream/4'), stream=True)) as response:\n+            pass\n+\n+        self.assertEqual(response._content_consumed, False)\n+        self.assertTrue(response.raw.closed, True)\n+\n     @pytest.mark.xfail\n     def test_response_iter_lines_reentrant(self):\n         \"\"\"Response.iter_lines() is not reentrant safe\"\"\"\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#fd31453aa25f80f04e1ce36de9abff0460bd136a", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 5048 | Contributors (this commit): 93 | Commits (past 90d): 9 | Contributors (cumulative): 93 | DMM Complexity: None\n\nDIFF:\n@@ -1067,8 +1067,8 @@ class RequestsTestCase(unittest.TestCase):\n         with contextlib.closing(s.get(httpbin('stream/4'), stream=True)) as response:\n             pass\n \n-        self.assertEqual(response._content_consumed, False)\n-        self.assertTrue(response.raw.closed, True)\n+        self.assertFalse(response._content_consumed)\n+        self.assertTrue(response.raw.closed)\n \n     @pytest.mark.xfail\n     def test_response_iter_lines_reentrant(self):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
