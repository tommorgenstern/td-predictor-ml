{"custom_id": "requests#e958511df085ace98cfcc45c69129553ba07ee9e", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 6 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 6 | Churn Cumulative: 2868 | Contributors (this commit): 42 | Commits (past 90d): 43 | Contributors (cumulative): 42 | DMM Complexity: 1.0\n\nDIFF:\n@@ -118,6 +118,12 @@ class RequestsTestCase(unittest.TestCase):\n         r = s.get(url)\n         self.assertTrue(s.cookies['foo'] == 'bar')\n \n+    def test_cookie_sent_on_redirect(self):\n+        s = requests.session()\n+        s.get(httpbin('cookies/set?foo=bar'))\n+        r = s.get(httpbin('redirect/1'))  # redirects to httpbin('get')\n+        self.assertTrue(\"Cookie\" in r.json()[\"headers\"])\n+\n     def test_user_agent_transfers(self):\n \n         heads = {\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#5bb2be9a2300ccc3c1901d2f85afb79cfb9e02f1", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 7 | Lines Deleted: 3 | Files Changed: 1 | Hunks: 4 | Methods Changed: 3 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 10 | Churn Cumulative: 2077 | Contributors (this commit): 38 | Commits (past 90d): 66 | Contributors (cumulative): 38 | DMM Complexity: 0.3333333333333333\n\nDIFF:\n@@ -80,7 +80,7 @@ def merge_kwargs(local_kwarg, default_kwarg):\n \n class SessionRedirectMixin(object):\n     def resolve_redirects(self, resp, req, stream=False, timeout=None,\n-                          verify=True, cert=None, proxies=None):\n+                          verify=True, cert=None, proxies=None, cookies=None):\n         \"\"\"Receives a Response. Returns a generator of Responses.\"\"\"\n \n         i = 0\n@@ -90,7 +90,10 @@ class SessionRedirectMixin(object):\n         prepared_request.hooks = req.hooks\n         prepared_request.method = req.method\n         prepared_request.url = req.url\n-        cookiejar = resp.cookies\n+\n+        cookiejar = cookiejar_from_dict({})\n+        cookiejar.update(cookies)\n+        cookiejar.update(resp.cookies)\n \n         # ((resp.status_code is codes.see_other))\n         while (('location' in resp.headers and resp.status_code in REDIRECT_STATI)):\n@@ -408,6 +411,7 @@ class Session(SessionRedirectMixin):\n         cert = kwargs.get('cert')\n         proxies = kwargs.get('proxies')\n         hooks = request.hooks\n+        cookies = self.cookies\n \n         # Get the appropriate adapter to use\n         adapter = self.get_adapter(url=request.url)\n@@ -425,7 +429,7 @@ class Session(SessionRedirectMixin):\n         # Redirect resolving generator.\n         gen = self.resolve_redirects(r, request, stream=stream,\n                                      timeout=timeout, verify=verify, cert=cert,\n-                                     proxies=proxies)\n+                                     proxies=proxies, cookies=cookies)\n \n         # Resolve redirects if allowed.\n         history = [resp for resp in gen] if allow_redirects else []\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#120a2f385a4d1b652451e6a6d8dc618437f72529", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 3 | Lines Deleted: 4 | Files Changed: 1 | Hunks: 4 | Methods Changed: 3 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 7 | Churn Cumulative: 2084 | Contributors (this commit): 38 | Commits (past 90d): 67 | Contributors (cumulative): 38 | DMM Complexity: 0.0\n\nDIFF:\n@@ -80,7 +80,7 @@ def merge_kwargs(local_kwarg, default_kwarg):\n \n class SessionRedirectMixin(object):\n     def resolve_redirects(self, resp, req, stream=False, timeout=None,\n-                          verify=True, cert=None, proxies=None, cookies=None):\n+                          verify=True, cert=None, proxies=None):\n         \"\"\"Receives a Response. Returns a generator of Responses.\"\"\"\n \n         i = 0\n@@ -92,7 +92,7 @@ class SessionRedirectMixin(object):\n         prepared_request.url = req.url\n \n         cookiejar = cookiejar_from_dict({})\n-        cookiejar.update(cookies)\n+        cookiejar.update(self.cookies)\n         cookiejar.update(resp.cookies)\n \n         # ((resp.status_code is codes.see_other))\n@@ -411,7 +411,6 @@ class Session(SessionRedirectMixin):\n         cert = kwargs.get('cert')\n         proxies = kwargs.get('proxies')\n         hooks = request.hooks\n-        cookies = self.cookies\n \n         # Get the appropriate adapter to use\n         adapter = self.get_adapter(url=request.url)\n@@ -429,7 +428,7 @@ class Session(SessionRedirectMixin):\n         # Redirect resolving generator.\n         gen = self.resolve_redirects(r, request, stream=stream,\n                                      timeout=timeout, verify=verify, cert=cert,\n-                                     proxies=proxies, cookies=cookies)\n+                                     proxies=proxies)\n \n         # Resolve redirects if allowed.\n         history = [resp for resp in gen] if allow_redirects else []\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#af791d48c6307988721391f9c594959c72631e47", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 0 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 1 | Churn Cumulative: 277 | Contributors (this commit): 2 | Commits (past 90d): 2 | Contributors (cumulative): 2 | DMM Complexity: None\n\nDIFF:\n@@ -133,7 +133,6 @@ html_static_path = ['_static']\n # typographically correct entities.\n #html_use_smartypants = True\n \n-# Custom sidebar templates, maps document names to template names.\n # Custom sidebar templates, maps document names to template names.\n html_sidebars = {\n     'index':    ['sidebarintro.html', 'sourcelink.html', 'searchbox.html'],\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#7d217bf9bd0689318baff96bf0d11f5f3ddc15e1", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 5 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): 3/3 | Churn Δ: 6 | Churn Cumulative: 8618 | Contributors (this commit): 104 | Commits (past 90d): 37 | Contributors (cumulative): 104 | DMM Complexity: 1.0\n\nDIFF:\n@@ -20,7 +20,7 @@ from .cookies import cookiejar_from_dict, get_cookie_header\n from .packages.urllib3.filepost import encode_multipart_formdata\n from .exceptions import HTTPError, RequestException, MissingSchema, InvalidURL\n from .utils import (\n-    stream_untransfer, guess_filename, requote_uri,\n+    stream_untransfer, guess_filename, get_auth_from_url, requote_uri,\n     stream_decode_response_unicode, to_key_val_list, parse_header_links,\n     iter_slices, guess_json_utf, super_len)\n from .compat import (\n@@ -222,6 +222,10 @@ class Request(RequestHooksMixin):\n         p.prepare_body(self.data, self.files)\n         # Note that prepare_auth must be last to enable authentication schemes\n         # such as OAuth to work on a fully prepared request.\n+        if self.auth is None:\n+            auth = get_auth_from_url(self.url)\n+            if auth[0] is not None and auth[1] is not None:\n+                self.auth = auth\n         p.prepare_auth(self.auth)\n         # This MUST go after prepare_auth. Authenticators could add a hook\n         p.prepare_hooks(self.hooks)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#132540956051e9486ffb3adcee95b47a71a37c80", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 4 | Lines Deleted: 5 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): -2/0 | Churn Δ: 9 | Churn Cumulative: 8627 | Contributors (this commit): 104 | Commits (past 90d): 38 | Contributors (cumulative): 104 | DMM Complexity: 0.0\n\nDIFF:\n@@ -222,11 +222,10 @@ class Request(RequestHooksMixin):\n         p.prepare_body(self.data, self.files)\n         # Note that prepare_auth must be last to enable authentication schemes\n         # such as OAuth to work on a fully prepared request.\n-        if self.auth is None:\n-            auth = get_auth_from_url(self.url)\n-            if auth[0] is not None and auth[1] is not None:\n-                self.auth = auth\n-        p.prepare_auth(self.auth)\n+\n+        embedded_auth = get_auth_from_url(self.url)\n+        p.prepare_auth(self.auth or embedded_auth)\n+\n         # This MUST go after prepare_auth. Authenticators could add a hook\n         p.prepare_hooks(self.hooks)\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#03a3ca500491ed55c90255398fa514be017efe10", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 1785 | Contributors (this commit): 39 | Commits (past 90d): 9 | Contributors (cumulative): 39 | DMM Complexity: None\n\nDIFF:\n@@ -588,4 +588,4 @@ def get_auth_from_url(url):\n         parsed = urlparse(url)\n         return (parsed.username, parsed.password)\n     else:\n-        return ('', '')\n+        return None\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#030b9763b5dd24bbde7938d5aafb63f411d75b6a", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 1787 | Contributors (this commit): 39 | Commits (past 90d): 10 | Contributors (cumulative): 39 | DMM Complexity: None\n\nDIFF:\n@@ -588,4 +588,4 @@ def get_auth_from_url(url):\n         parsed = urlparse(url)\n         return (parsed.username, parsed.password)\n     else:\n-        return None\n+        return ('', '')\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#80a861cb84175cdf444ce3d0c677251635859e22", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 68 | Lines Deleted: 19 | Files Changed: 10 | Hunks: 22 | Methods Changed: 5 | Complexity Δ (Sum/Max): 5/4 | Churn Δ: 87 | Churn Cumulative: 2330 | Contributors (this commit): 1 | Commits (past 90d): 10 | Contributors (cumulative): 10 | DMM Complexity: 1.0\n\nDIFF:\n@@ -15,10 +15,15 @@\n # 02110-1301  USA\r\n ######################### END LICENSE BLOCK #########################\r\n \r\n-__version__ = \"1.0.1\"\r\n+__version__ = \"1.0.3\"\r\n+from sys import version_info\r\n \r\n \r\n def detect(aBuf):\r\n+    if ((version_info < (3, 0) and isinstance(aBuf, unicode)) or\r\n+            (version_info >= (3, 0) and not isinstance(aBuf, bytes))):\r\n+        raise ValueError('Expected a bytes object, not a unicode object')\r\n+\r\n     from . import universaldetector\r\n     u = universaldetector.UniversalDetector()\r\n     u.reset()\r\n\n@@ -40,6 +40,7 @@ from .compat import wrap_ord\n ENOUGH_DATA_THRESHOLD = 1024\r\n SURE_YES = 0.99\r\n SURE_NO = 0.01\r\n+MINIMUM_DATA_THRESHOLD = 3\r\n \r\n \r\n class CharDistributionAnalysis:\r\n@@ -82,7 +83,7 @@ class CharDistributionAnalysis:\n         \"\"\"return confidence based on existing data\"\"\"\r\n         # if we didn't receive any character in our consideration range,\r\n         # return negative answer\r\n-        if self._mTotalChars <= 0:\r\n+        if self._mTotalChars <= 0 or self._mFreqChars <= MINIMUM_DATA_THRESHOLD:\r\n             return SURE_NO\r\n \r\n         if self._mTotalChars != self._mFreqChars:\r\n\n@@ -18,9 +18,17 @@\n # 02110-1301  USA\n ######################### END LICENSE BLOCK #########################\n \n+import sys\n+\n+\n+if sys.version_info < (3, 0):\n+    base_str = (str, unicode)\n+else:\n+    base_str = (bytes, str)\n+\n \n def wrap_ord(a):\n-    if isinstance(a, str):\n+    if sys.version_info < (3, 0) and isinstance(a, base_str):\n         return ord(a)\n-    elif isinstance(a, int):\n+    else:\n         return a\n\n@@ -25,8 +25,6 @@\n # 02110-1301  USA\r\n ######################### END LICENSE BLOCK #########################\r\n \r\n-from . import constants\r\n-\r\n # KOI8-R language model\r\n # Character Mapping Table:\r\n KOI8R_CharToOrderMap = (\r\n\n@@ -25,8 +25,6 @@\n # 02110-1301  USA\r\n ######################### END LICENSE BLOCK #########################\r\n \r\n-from . import constants\r\n-\r\n # 255: Control characters that usually does not exist in any text\r\n # 254: Carriage/Return\r\n # 253: symbol (punctuation) that does not belong to word\r\n\n@@ -27,8 +27,6 @@\n # 02110-1301  USA\r\n ######################### END LICENSE BLOCK #########################\r\n \r\n-from . import constants\r\n-\r\n # 255: Control characters that usually does not exist in any text\r\n # 254: Carriage/Return\r\n # 253: symbol (punctuation) that does not belong to word\r\n\n@@ -25,8 +25,6 @@\n # 02110-1301  USA\r\n ######################### END LICENSE BLOCK #########################\r\n \r\n-from . import constants\r\n-\r\n # 255: Control characters that usually does not exist in any text\r\n # 254: Carriage/Return\r\n # 253: symbol (punctuation) that does not belong to word\r\n\n@@ -33,6 +33,7 @@ from .sjisprober import SJISProber\n from .eucjpprober import EUCJPProber\r\n from .gb2312prober import GB2312Prober\r\n from .euckrprober import EUCKRProber\r\n+from .cp949prober import CP949Prober\r\n from .big5prober import Big5Prober\r\n from .euctwprober import EUCTWProber\r\n \r\n@@ -46,6 +47,7 @@ class MBCSGroupProber(CharSetGroupProber):\n             EUCJPProber(),\r\n             GB2312Prober(),\r\n             EUCKRProber(),\r\n+            CP949Prober(),\r\n             Big5Prober(),\r\n             EUCTWProber()\r\n         ]\r\n\n@@ -78,6 +78,46 @@ Big5SMModel = {'classTable': BIG5_cls,\n                'charLenTable': Big5CharLenTable,\r\n                'name': 'Big5'}\r\n \r\n+# CP949\r\n+\r\n+CP949_cls  = (\r\n+    1,1,1,1,1,1,1,1, 1,1,1,1,1,1,0,0,  # 00 - 0f\r\n+    1,1,1,1,1,1,1,1, 1,1,1,0,1,1,1,1,  # 10 - 1f\r\n+    1,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,1,  # 20 - 2f\r\n+    1,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,1,  # 30 - 3f\r\n+    1,4,4,4,4,4,4,4, 4,4,4,4,4,4,4,4,  # 40 - 4f\r\n+    4,4,5,5,5,5,5,5, 5,5,5,1,1,1,1,1,  # 50 - 5f\r\n+    1,5,5,5,5,5,5,5, 5,5,5,5,5,5,5,5,  # 60 - 6f\r\n+    5,5,5,5,5,5,5,5, 5,5,5,1,1,1,1,1,  # 70 - 7f\r\n+    0,6,6,6,6,6,6,6, 6,6,6,6,6,6,6,6,  # 80 - 8f\r\n+    6,6,6,6,6,6,6,6, 6,6,6,6,6,6,6,6,  # 90 - 9f\r\n+    6,7,7,7,7,7,7,7, 7,7,7,7,7,8,8,8,  # a0 - af\r\n+    7,7,7,7,7,7,7,7, 7,7,7,7,7,7,7,7,  # b0 - bf\r\n+    7,7,7,7,7,7,9,2, 2,3,2,2,2,2,2,2,  # c0 - cf\r\n+    2,2,2,2,2,2,2,2, 2,2,2,2,2,2,2,2,  # d0 - df\r\n+    2,2,2,2,2,2,2,2, 2,2,2,2,2,2,2,2,  # e0 - ef\r\n+    2,2,2,2,2,2,2,2, 2,2,2,2,2,2,2,0,  # f0 - ff\r\n+)\r\n+\r\n+CP949_st = (\r\n+#cls=    0      1      2      3      4      5      6      7      8      9  # previous state =\r\n+    eError,eStart,     3,eError,eStart,eStart,     4,     5,eError,     6, # eStart\r\n+    eError,eError,eError,eError,eError,eError,eError,eError,eError,eError, # eError\r\n+    eItsMe,eItsMe,eItsMe,eItsMe,eItsMe,eItsMe,eItsMe,eItsMe,eItsMe,eItsMe, # eItsMe\r\n+    eError,eError,eStart,eStart,eError,eError,eError,eStart,eStart,eStart, # 3\r\n+    eError,eError,eStart,eStart,eStart,eStart,eStart,eStart,eStart,eStart, # 4\r\n+    eError,eStart,eStart,eStart,eStart,eStart,eStart,eStart,eStart,eStart, # 5\r\n+    eError,eStart,eStart,eStart,eStart,eError,eError,eStart,eStart,eStart, # 6\r\n+)\r\n+\r\n+CP949CharLenTable = (0, 1, 2, 0, 1, 1, 2, 2, 0, 2)\r\n+\r\n+CP949SMModel = {'classTable': CP949_cls,\r\n+                'classFactor': 10,\r\n+                'stateTable': CP949_st,\r\n+                'charLenTable': CP949CharLenTable,\r\n+                'name': 'CP949'}\r\n+\r\n # EUC-JP\r\n \r\n EUCJP_cls = (\r\n\n@@ -28,6 +28,7 @@\n \r\n from . import constants\r\n import sys\r\n+import codecs\r\n from .latin1prober import Latin1Prober  # windows-1252\r\n from .mbcsgroupprober import MBCSGroupProber  # multi-byte character sets\r\n from .sbcsgroupprober import SBCSGroupProber  # single-byte character sets\r\n@@ -70,31 +71,31 @@ class UniversalDetector:\n \r\n         if not self._mGotData:\r\n             # If the data starts with BOM, we know it is UTF\r\n-            if aBuf[:3] == '\\xEF\\xBB\\xBF':\r\n+            if aBuf[:3] == codecs.BOM:\r\n                 # EF BB BF  UTF-8 with BOM\r\n                 self.result = {'encoding': \"UTF-8\", 'confidence': 1.0}\r\n-            elif aBuf[:4] == '\\xFF\\xFE\\x00\\x00':\r\n+            elif aBuf[:4] == codecs.BOM_UTF32_LE:\r\n                 # FF FE 00 00  UTF-32, little-endian BOM\r\n                 self.result = {'encoding': \"UTF-32LE\", 'confidence': 1.0}\r\n-            elif aBuf[:4] == '\\x00\\x00\\xFE\\xFF':\r\n+            elif aBuf[:4] == codecs.BOM_UTF32_BE:\r\n                 # 00 00 FE FF  UTF-32, big-endian BOM\r\n                 self.result = {'encoding': \"UTF-32BE\", 'confidence': 1.0}\r\n-            elif aBuf[:4] == '\\xFE\\xFF\\x00\\x00':\r\n+            elif aBuf[:4] == b'\\xFE\\xFF\\x00\\x00':\r\n                 # FE FF 00 00  UCS-4, unusual octet order BOM (3412)\r\n                 self.result = {\r\n                     'encoding': \"X-ISO-10646-UCS-4-3412\",\r\n                     'confidence': 1.0\r\n                 }\r\n-            elif aBuf[:4] == '\\x00\\x00\\xFF\\xFE':\r\n+            elif aBuf[:4] == b'\\x00\\x00\\xFF\\xFE':\r\n                 # 00 00 FF FE  UCS-4, unusual octet order BOM (2143)\r\n                 self.result = {\r\n                     'encoding': \"X-ISO-10646-UCS-4-2143\",\r\n                     'confidence': 1.0\r\n                 }\r\n-            elif aBuf[:2] == '\\xFF\\xFE':\r\n+            elif aBuf[:2] == codecs.BOM_LE:\r\n                 # FF FE  UTF-16, little endian BOM\r\n                 self.result = {'encoding': \"UTF-16LE\", 'confidence': 1.0}\r\n-            elif aBuf[:2] == '\\xFE\\xFF':\r\n+            elif aBuf[:2] == codecs.BOM_BE:\r\n                 # FE FF  UTF-16, big endian BOM\r\n                 self.result = {'encoding': \"UTF-16BE\", 'confidence': 1.0}\r\n \r\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#a554828931dee19163caa3486560f5e7ee850c9c", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 37 | Lines Deleted: 0 | Files Changed: 2 | Hunks: 2 | Methods Changed: 4 | Complexity Δ (Sum/Max): 4/3 | Churn Δ: 37 | Churn Cumulative: 37 | Contributors (this commit): 1 | Commits (past 90d): 2 | Contributors (cumulative): 2 | DMM Complexity: 1.0\n\nDIFF:\n@@ -0,0 +1,5 @@\n+from invoke import run, task\n+\n+@task\n+def build():\n+    print(\"Building!\")\n\\ No newline at end of file\n\n@@ -0,0 +1,32 @@\n+# -*- coding: utf-8 -*-\n+\n+import requests\n+from invoke import run, task\n+\n+@task\n+def test():\n+    run('py.test', pty=True)\n+\n+@task\n+def deps():\n+    print('Vendoring urllib3...')\n+\n+    run('rm -fr requests/packages/urllib3')\n+    run('git clone https://github.com/shazow/urllib3.git')\n+    run('mv urllib3/urllib3 requests/packages/')\n+    run('rm -fr urllib3')\n+\n+    print('Vendoring Charade...')\n+\n+    run('rm -fr requests/packages/charade')\n+    run('git clone https://github.com/sigmavirus24/charade.git')\n+    run('mv charade/charade requests/packages/')\n+    run('rm -fr charade')\n+\n+@task\n+def certs():\n+    print('Grabbing latest CA Bundle...')\n+    r = requests.get('https://raw.github.com/kennethreitz/certifi/master/certifi/cacert.pem')\n+\n+    with open('requests/cacert.pem', 'w') as f:\n+        f.write(r.content)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#52d328ec3c7f038765df4565d14070a04dc9ea6e", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 44 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 2 | Complexity Δ (Sum/Max): 2/2 | Churn Δ: 44 | Churn Cumulative: 44 | Contributors (this commit): 1 | Commits (past 90d): 1 | Contributors (cumulative): 1 | DMM Complexity: 1.0\n\nDIFF:\n@@ -0,0 +1,44 @@\n+######################## BEGIN LICENSE BLOCK ########################\r\n+# The Original Code is mozilla.org code.\r\n+#\r\n+# The Initial Developer of the Original Code is\r\n+# Netscape Communications Corporation.\r\n+# Portions created by the Initial Developer are Copyright (C) 1998\r\n+# the Initial Developer. All Rights Reserved.\r\n+#\r\n+# Contributor(s):\r\n+#   Mark Pilgrim - port to Python\r\n+#\r\n+# This library is free software; you can redistribute it and/or\r\n+# modify it under the terms of the GNU Lesser General Public\r\n+# License as published by the Free Software Foundation; either\r\n+# version 2.1 of the License, or (at your option) any later version.\r\n+#\r\n+# This library is distributed in the hope that it will be useful,\r\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n+# Lesser General Public License for more details.\r\n+#\r\n+# You should have received a copy of the GNU Lesser General Public\r\n+# License along with this library; if not, write to the Free Software\r\n+# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\r\n+# 02110-1301  USA\r\n+######################### END LICENSE BLOCK #########################\r\n+\r\n+from .mbcharsetprober import MultiByteCharSetProber\r\n+from .codingstatemachine import CodingStateMachine\r\n+from .chardistribution import EUCKRDistributionAnalysis\r\n+from .mbcssm import CP949SMModel\r\n+\r\n+\r\n+class CP949Prober(MultiByteCharSetProber):\r\n+    def __init__(self):\r\n+        MultiByteCharSetProber.__init__(self)\r\n+        self._mCodingSM = CodingStateMachine(CP949SMModel)\r\n+        # NOTE: CP949 is a superset of EUC-KR, so the distribution should be\r\n+        #       not different.\r\n+        self._mDistributionAnalyzer = EUCKRDistributionAnalysis()\r\n+        self.reset()\r\n+\r\n+    def get_charset_name(self):\r\n+        return \"CP949\"\r\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#19d38d502fa606568dcf5eae42a211f1621bda83", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 8 | Lines Deleted: 4 | Files Changed: 1 | Hunks: 4 | Methods Changed: 3 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 12 | Churn Cumulative: 8639 | Contributors (this commit): 104 | Commits (past 90d): 37 | Contributors (cumulative): 104 | DMM Complexity: 0.0\n\nDIFF:\n@@ -220,12 +220,10 @@ class Request(RequestHooksMixin):\n         p.prepare_headers(self.headers)\n         p.prepare_cookies(self.cookies)\n         p.prepare_body(self.data, self.files)\n+        p.prepare_auth(self.auth, self.url)\n         # Note that prepare_auth must be last to enable authentication schemes\n         # such as OAuth to work on a fully prepared request.\n \n-        embedded_auth = get_auth_from_url(self.url)\n-        p.prepare_auth(self.auth or embedded_auth)\n-\n         # This MUST go after prepare_auth. Authenticators could add a hook\n         p.prepare_hooks(self.hooks)\n \n@@ -398,8 +396,14 @@ class PreparedRequest(RequestEncodingMixin, RequestHooksMixin):\n         elif self.method not in ('GET', 'HEAD'):\n             self.headers['Content-Length'] = '0'\n \n-    def prepare_auth(self, auth):\n+    def prepare_auth(self, auth, url=''):\n         \"\"\"Prepares the given HTTP auth data.\"\"\"\n+\n+        # If no Auth is explicitly provided, extract it from the URL.\n+        if auth is None:\n+            url_auth = get_auth_from_url(self.url)\n+            auth = url_auth if any(url_auth) else None\n+\n         if auth:\n             if isinstance(auth, tuple) and len(auth) == 2:\n                 # special-case basic HTTP auth\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#92f747817447ad56d3318e393e222db0f347dfb3", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 8641 | Contributors (this commit): 104 | Commits (past 90d): 38 | Contributors (cumulative): 104 | DMM Complexity: None\n\nDIFF:\n@@ -399,7 +399,7 @@ class PreparedRequest(RequestEncodingMixin, RequestHooksMixin):\n     def prepare_auth(self, auth, url=''):\n         \"\"\"Prepares the given HTTP auth data.\"\"\"\n \n-        # If no Auth is explicitly provided, extract it from the URL.\n+        # If no Auth is explicitly provided, extract it from the URL first.\n         if auth is None:\n             url_auth = get_auth_from_url(self.url)\n             auth = url_auth if any(url_auth) else None\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#9d16c7276791fb7e5e75f2fbcddec95fa8f15b2b", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 3 | Churn Cumulative: 1073 | Contributors (this commit): 21 | Commits (past 90d): 7 | Contributors (cumulative): 21 | DMM Complexity: 1.0\n\nDIFF:\n@@ -152,7 +152,8 @@ class HTTPDigestAuth(AuthBase):\n         if 'digest' in s_auth.lower() and num_401_calls < 2:\n \n             setattr(self, 'num_401_calls', num_401_calls + 1)\n-            self.chal = parse_dict_header(re.sub(r'digest ', '', s_auth, flags=re.IGNORECASE))\n+            pat = re.compile(r'digest ', flags=re.IGNORECASE)\n+            self.chal = parse_dict_header(pat.sub('', s_auth))\n \n             # Consume content and release the original connection\n             # to allow our new request to reuse the same one.\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#6963b8490ca4624f4e46e971b6261861bcfd0902", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 8 | Lines Deleted: 7 | Files Changed: 1 | Hunks: 2 | Methods Changed: 2 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 15 | Churn Cumulative: 8656 | Contributors (this commit): 105 | Commits (past 90d): 32 | Contributors (cumulative): 105 | DMM Complexity: None\n\nDIFF:\n@@ -511,10 +511,11 @@ class Response(object):\n         return chardet.detect(self.content)['encoding']\n \n     def iter_content(self, chunk_size=1, decode_unicode=False):\n-        \"\"\"Iterates over the response data.  This avoids reading the content\n-        at once into memory for large responses.  The chunk size is the number\n-        of bytes it should read into memory.  This is not necessarily the\n-        length of each item returned as decoding can take place.\n+        \"\"\"Iterates over the response data.  When stream=True is set on the\n+        request, this avoids reading the content at once into memory for\n+        large responses.  The chunk size is the number of bytes it should\n+        read into memory.  This is not necessarily the length of each item\n+        returned as decoding can take place.\n         \"\"\"\n         if self._content_consumed:\n             # simulate reading small chunks of the content\n@@ -536,9 +537,9 @@ class Response(object):\n         return gen\n \n     def iter_lines(self, chunk_size=ITER_CHUNK_SIZE, decode_unicode=None):\n-        \"\"\"Iterates over the response data, one line at a time.  This\n-        avoids reading the content at once into memory for large\n-        responses.\n+        \"\"\"Iterates over the response data, one line at a time.  When\n+        stream=True is set on the request, this avoids reading the\n+        content at once into memory for large responses.\n         \"\"\"\n \n         pending = None\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#478d49027fe920e334ae8eacd1182ede39f8b5f7", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 13 | Lines Deleted: 4 | Files Changed: 2 | Hunks: 5 | Methods Changed: 7 | Complexity Δ (Sum/Max): 2/2 | Churn Δ: 17 | Churn Cumulative: 4969 | Contributors (this commit): 68 | Commits (past 90d): 71 | Contributors (cumulative): 80 | DMM Complexity: 1.0\n\nDIFF:\n@@ -316,7 +316,6 @@ class Session(SessionRedirectMixin):\n             'cert': cert,\n             'proxies': proxies,\n             'allow_redirects': allow_redirects,\n-            'req': req,\n         }\n         resp = self.send(prep, **send_kwargs)\n \n@@ -398,14 +397,17 @@ class Session(SessionRedirectMixin):\n         \"\"\"Send a given PreparedRequest.\"\"\"\n         # It's possible that users might accidentally send a Request object.\n         # Guard against that specific failure case.\n+        kwargs.setdefault('stream', False)\n+        kwargs.setdefault('verify', True)\n+        kwargs.setdefault('proxies', {})\n+\n         if getattr(request, 'prepare', None):\n             raise ValueError('You can only send PreparedRequests.')\n \n         # Set up variables needed for resolve_redirects and dispatching of\n         # hooks\n         allow_redirects = kwargs.pop('allow_redirects', True)\n-        req = kwargs.pop('req', None)\n-        stream = kwargs.get('stream', False)\n+        stream = kwargs.get('stream')\n         timeout = kwargs.get('timeout')\n         verify = kwargs.get('verify')\n         cert = kwargs.get('cert')\n\n@@ -295,8 +295,15 @@ class RequestsTestCase(unittest.TestCase):\n         self.assertEqual(r.status_code, 200)\n         self.assertTrue(b\"text/py-content-type\" in r.request.body)\n \n+    def test_hook_receives_request_arguments(self):\n+        def hook(resp, **kwargs):\n+            assert resp is not None\n+            assert kwargs != {}\n+\n+        requests.Request('GET', HTTPBIN, hooks={'response': hook})\n+\n     def test_prepared_request_hook(self):\n-        def hook(resp):\n+        def hook(resp, **kwargs):\n             resp.hook_working = True\n             return resp\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#1d5c4f3f0f49e04165303952ccc5fd1c70aee7c1", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 5 | Lines Deleted: 3 | Files Changed: 1 | Hunks: 3 | Methods Changed: 2 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 8 | Churn Cumulative: 8664 | Contributors (this commit): 105 | Commits (past 90d): 33 | Contributors (cumulative): 105 | DMM Complexity: 0.0\n\nDIFF:\n@@ -349,7 +349,7 @@ class PreparedRequest(RequestEncodingMixin, RequestHooksMixin):\n         ])\n \n         try:\n-            length = str(super_len(data))\n+            length = super_len(data)\n         except (TypeError, AttributeError):\n             length = False\n \n@@ -360,7 +360,7 @@ class PreparedRequest(RequestEncodingMixin, RequestHooksMixin):\n                 raise NotImplementedError('Streamed bodies and files are mutually exclusive.')\n \n             if length:\n-                self.headers['Content-Length'] = length\n+                self.headers['Content-Length'] = str(length)\n             else:\n                 self.headers['Transfer-Encoding'] = 'chunked'\n         # Check if file, fo, generator, iterator.\n@@ -392,7 +392,9 @@ class PreparedRequest(RequestEncodingMixin, RequestHooksMixin):\n             self.headers['Content-Length'] = str(body.tell())\n             body.seek(0, 0)\n         elif body is not None:\n-            self.headers['Content-Length'] = str(len(body))\n+            l = super_len(body)\n+            if l:\n+                self.headers['Content-Length'] = super_len(l)\n         elif self.method not in ('GET', 'HEAD'):\n             self.headers['Content-Length'] = '0'\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#88177ec33fa0846aea0ecb121ffbb041c5f09cdc", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 3 | Churn Cumulative: 2095 | Contributors (this commit): 38 | Commits (past 90d): 35 | Contributors (cumulative): 38 | DMM Complexity: None\n\nDIFF:\n@@ -134,7 +134,8 @@ class SessionRedirectMixin(object):\n \n             prepared_request.method = method\n \n-            if resp.status_code is not codes.temporary:\n+            # https://github.com/kennethreitz/requests/issues/1084\n+            if resp.status_code not in (codes.temporary, codes.resume):\n                 if 'Content-Length' in prepared_request.headers:\n                     del prepared_request.headers['Content-Length']\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#aca91e06f2c83da1553ea8b39814c5c78cb3c433", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 33 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 33 | Churn Cumulative: 2128 | Contributors (this commit): 38 | Commits (past 90d): 36 | Contributors (cumulative): 38 | DMM Complexity: None\n\nDIFF:\n@@ -252,6 +252,39 @@ class Session(SessionRedirectMixin):\n         stream=None,\n         verify=None,\n         cert=None):\n+        \"\"\"Constructs a :class:`Request <Request>`, prepares it and sends it.\n+        Returns :class:`Response <Response>` object.\n+\n+        :param method: method for the new :class:`Request` object.\n+        :param url: URL for the new :class:`Request` object.\n+        :param params: (optional) Dictionary or bytes to be sent in the query\n+            string for the :class:`Request`.\n+        :param data: (optional) Dictionary or bytes to send in the body of the\n+            :class:`Request`.\n+        :param headers: (optional) Dictionary of HTTP Headers to send with the\n+            :class:`Request`.\n+        :param cookies: (optional) Dict or CookieJar object to send with the\n+            :class:`Request`.\n+        :param files: (optional) Dictionary of 'filename': file-like-objects\n+            for multipart encoding upload.\n+        :param auth: (optional) Auth tuple or callable to enable\n+            Basic/Digest/Custom HTTP Auth.\n+        :param timeout: (optional) Float describing the timeout of the\n+            request.\n+        :param allow_redirects: (optional) Boolean. Set to True by default.\n+        :param proxies: (optional) Dictionary mapping protocol to the URL of\n+            the proxy.\n+        :param return_response: (optional) If False, an un-sent Request object\n+            will returned.\n+        :param config: (optional) A configuration dictionary. See\n+            ``request.defaults`` for allowed keys and their default values.\n+        :param prefetch: (optional) whether to immediately download the response\n+            content. Defaults to ``True``.\n+        :param verify: (optional) if ``True``, the SSL cert will be verified.\n+            A CA_BUNDLE path can also be provided.\n+        :param cert: (optional) if String, path to ssl client cert file (.pem).\n+            If Tuple, ('cert', 'key') pair.\n+        \"\"\"\n \n         cookies = cookies or {}\n         proxies = proxies or {}\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#0cd23d8d6e9fee70e4cc51c37e0b6a111411f2c0", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 5 | Lines Deleted: 3 | Files Changed: 2 | Hunks: 3 | Methods Changed: 2 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 8 | Churn Cumulative: 10800 | Contributors (this commit): 124 | Commits (past 90d): 71 | Contributors (cumulative): 143 | DMM Complexity: None\n\nDIFF:\n@@ -394,7 +394,7 @@ class PreparedRequest(RequestEncodingMixin, RequestHooksMixin):\n         elif body is not None:\n             l = super_len(body)\n             if l:\n-                self.headers['Content-Length'] = super_len(l)\n+                self.headers['Content-Length'] = str(l)\n         elif self.method not in ('GET', 'HEAD'):\n             self.headers['Content-Length'] = '0'\n \n\n@@ -429,12 +429,14 @@ class Session(SessionRedirectMixin):\n \n     def send(self, request, **kwargs):\n         \"\"\"Send a given PreparedRequest.\"\"\"\n-        # It's possible that users might accidentally send a Request object.\n-        # Guard against that specific failure case.\n+        # Set defaults that the hooks can utilize to ensure they always have\n+        # the correct parameters to reproduce the previous request.\n         kwargs.setdefault('stream', False)\n         kwargs.setdefault('verify', True)\n         kwargs.setdefault('proxies', {})\n \n+        # It's possible that users might accidentally send a Request object.\n+        # Guard against that specific failure case.\n         if getattr(request, 'prepare', None):\n             raise ValueError('You can only send PreparedRequests.')\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#4ffae38627ea8d4a33fc50bbbed48bd14468972c", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 2136 | Contributors (this commit): 39 | Commits (past 90d): 38 | Contributors (cumulative): 39 | DMM Complexity: None\n\nDIFF:\n@@ -182,7 +182,7 @@ class Session(SessionRedirectMixin):\n     __attrs__ = [\n         'headers', 'cookies', 'auth', 'timeout', 'proxies', 'hooks',\n         'params', 'verify', 'cert', 'prefetch', 'adapters', 'stream',\n-        'trust_env']\n+        'trust_env', 'max_redirects']\n \n     def __init__(self):\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#325ea7b7e209de2cd895e3275bde8378a183c7e7", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 4 | Lines Deleted: 3 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 7 | Churn Cumulative: 2143 | Contributors (this commit): 39 | Commits (past 90d): 39 | Contributors (cumulative): 39 | DMM Complexity: 1.0\n\nDIFF:\n@@ -431,9 +431,10 @@ class Session(SessionRedirectMixin):\n         \"\"\"Send a given PreparedRequest.\"\"\"\n         # Set defaults that the hooks can utilize to ensure they always have\n         # the correct parameters to reproduce the previous request.\n-        kwargs.setdefault('stream', False)\n-        kwargs.setdefault('verify', True)\n-        kwargs.setdefault('proxies', {})\n+        kwargs.setdefault('stream', self.stream)\n+        kwargs.setdefault('verify', self.verify)\n+        kwargs.setdefault('cert', self.cert)\n+        kwargs.setdefault('proxies', self.proxies\n \n         # It's possible that users might accidentally send a Request object.\n         # Guard against that specific failure case.\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#75703d57e66544ff1e6c7cbd54648b051928b1a9", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 2145 | Contributors (this commit): 39 | Commits (past 90d): 40 | Contributors (cumulative): 39 | DMM Complexity: None\n\nDIFF:\n@@ -434,7 +434,7 @@ class Session(SessionRedirectMixin):\n         kwargs.setdefault('stream', self.stream)\n         kwargs.setdefault('verify', self.verify)\n         kwargs.setdefault('cert', self.cert)\n-        kwargs.setdefault('proxies', self.proxies\n+        kwargs.setdefault('proxies', self.proxies)\n \n         # It's possible that users might accidentally send a Request object.\n         # Guard against that specific failure case.\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#d06908d655eca4467521c28d93a68d329d48d524", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 483 | Contributors (this commit): 5 | Commits (past 90d): 2 | Contributors (cumulative): 5 | DMM Complexity: None\n\nDIFF:\n@@ -42,8 +42,8 @@ is at <http://python-requests.org>.\n \"\"\"\n \n __title__ = 'requests'\n-__version__ = '1.1.0'\n-__build__ = 0x010100\n+__version__ = '1.2.0'\n+__build__ = 0x010200\n __author__ = 'Kenneth Reitz'\n __license__ = 'Apache 2.0'\n __copyright__ = 'Copyright 2013 Kenneth Reitz'\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#39acf1dbd250df61ebfa7871384cd73cb6669c6d", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 8668 | Contributors (this commit): 106 | Commits (past 90d): 35 | Contributors (cumulative): 106 | DMM Complexity: None\n\nDIFF:\n@@ -575,7 +575,7 @@ class Response(object):\n                     raise RuntimeError(\n                         'The content for this response was already consumed')\n \n-                if self.status_code is 0:\n+                if self.status_code == 0:\n                     self._content = None\n                 else:\n                     self._content = bytes().join(self.iter_content(CONTENT_CHUNK_SIZE)) or bytes()\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#037b38badb31cd379e985881b8077a4aa148fd58", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 2 | Files Changed: 2 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 9745 | Contributors (this commit): 117 | Commits (past 90d): 44 | Contributors (cumulative): 129 | DMM Complexity: None\n\nDIFF:\n@@ -49,7 +49,7 @@ class HTTPBasicAuth(AuthBase):\n \n \n class HTTPProxyAuth(HTTPBasicAuth):\n-    \"\"\"Attaches HTTP Proxy Authenetication to a given Request object.\"\"\"\n+    \"\"\"Attaches HTTP Proxy Authentication to a given Request object.\"\"\"\n     def __call__(self, r):\n         r.headers['Proxy-Authorization'] = _basic_auth_str(self.username, self.password)\n         return r\n\n@@ -60,7 +60,7 @@ class RequestEncodingMixin(object):\n         \"\"\"Encode parameters in a piece of data.\n \n         Will successfully encode parameters when passed as a dict or a list of\n-        2-tuples. Order is retained if data is a list of 2-tuples but abritrary\n+        2-tuples. Order is retained if data is a list of 2-tuples but arbitrary\n         if parameters are supplied as a dict.\n         \"\"\"\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#f0660e33a268e9517ad15b39457bcf9875f71619", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 6 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 6 | Churn Cumulative: 2883 | Contributors (this commit): 43 | Commits (past 90d): 38 | Contributors (cumulative): 43 | DMM Complexity: 1.0\n\nDIFF:\n@@ -286,6 +286,12 @@ class RequestsTestCase(unittest.TestCase):\n                           files={'file': ('test_requests.py', open(__file__, 'rb'))})\n         self.assertEqual(r.status_code, 200)\n \n+    def test_unicode_multipart_post(self):\n+        r = requests.post(httpbin('post'),\n+                          data={'stuff': u'ëlïxr'},\n+                          files={'file': ('test_requests.py', open(__file__, 'rb'))})\n+        self.assertEqual(r.status_code, 200)\n+\n     def test_custom_content_type(self):\n         r = requests.post(httpbin('post'),\n                           data={'stuff': json.dumps({'a': 123})},\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#f37b9684756b9c495fdcea1db3b6edd6a76b6d47", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 8674 | Contributors (this commit): 108 | Commits (past 90d): 37 | Contributors (cumulative): 108 | DMM Complexity: None\n\nDIFF:\n@@ -101,9 +101,9 @@ class RequestEncodingMixin(object):\n         for field, val in fields:\n             if isinstance(val, list):\n                 for v in val:\n-                    new_fields.append((field, builtin_str(v)))\n+                    new_fields.append((field, str(v)))\n             else:\n-                new_fields.append((field, builtin_str(val)))\n+                new_fields.append((field, str(val)))\n \n         for (k, v) in files:\n             # support for explicit filename\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#ca0aea640d0cce01c126220b74362c9014cabbd6", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 5 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 2 | Methods Changed: 2 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 6 | Churn Cumulative: 2151 | Contributors (this commit): 40 | Commits (past 90d): 41 | Contributors (cumulative): 40 | DMM Complexity: 0.0\n\nDIFF:\n@@ -251,7 +251,8 @@ class Session(SessionRedirectMixin):\n         hooks=None,\n         stream=None,\n         verify=None,\n-        cert=None):\n+        cert=None,\n+        return_response=True):\n         \"\"\"Constructs a :class:`Request <Request>`, prepares it and sends it.\n         Returns :class:`Response <Response>` object.\n \n@@ -339,6 +340,9 @@ class Session(SessionRedirectMixin):\n         req.cookies = cookies\n         req.hooks = hooks\n \n+\tif not return_response:\n+\t  return req\n+\t\n         # Prepare the Request.\n         prep = req.prepare()\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
