{"custom_id": "fastapi#0a882e926e30af050a9557721ec1f726500972ba", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 14 | Lines Deleted: 639 | Files Changed: 3 | Hunks: 6 | Methods Changed: 12 | Complexity Δ (Sum/Max): -10/0 | Churn Δ: 653 | Churn Cumulative: 2314 | Contributors (this commit): 6 | Commits (past 90d): 3 | Contributors (cumulative): 10 | DMM Complexity: 0.0\n\nDIFF:\n@@ -1,14 +1,23 @@\n+import importlib\n+\n import pytest\n from fastapi.testclient import TestClient\n \n-from ...utils import needs_pydanticv1, needs_pydanticv2\n+from ...utils import needs_py39, needs_py310, needs_pydanticv1, needs_pydanticv2\n \n \n-@pytest.fixture(name=\"client\")\n-def get_client():\n-    from docs_src.body_updates.tutorial001 import app\n+@pytest.fixture(\n+    name=\"client\",\n+    params=[\n+        \"tutorial001\",\n+        pytest.param(\"tutorial001_py310\", marks=needs_py310),\n+        pytest.param(\"tutorial001_py39\", marks=needs_py39),\n+    ],\n+)\n+def get_client(request: pytest.FixtureRequest):\n+    mod = importlib.import_module(f\"docs_src.body_updates.{request.param}\")\n \n-    client = TestClient(app)\n+    client = TestClient(mod.app)\n     return client\n \n \n\n@@ -1,317 +0,0 @@\n-import pytest\n-from fastapi.testclient import TestClient\n-\n-from ...utils import needs_py310, needs_pydanticv1, needs_pydanticv2\n-\n-\n-@pytest.fixture(name=\"client\")\n-def get_client():\n-    from docs_src.body_updates.tutorial001_py310 import app\n-\n-    client = TestClient(app)\n-    return client\n-\n-\n-@needs_py310\n-def test_get(client: TestClient):\n-    response = client.get(\"/items/baz\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\n-        \"name\": \"Baz\",\n-        \"description\": None,\n-        \"price\": 50.2,\n-        \"tax\": 10.5,\n-        \"tags\": [],\n-    }\n-\n-\n-@needs_py310\n-def test_put(client: TestClient):\n-    response = client.put(\n-        \"/items/bar\", json={\"name\": \"Barz\", \"price\": 3, \"description\": None}\n-    )\n-    assert response.json() == {\n-        \"name\": \"Barz\",\n-        \"description\": None,\n-        \"price\": 3,\n-        \"tax\": 10.5,\n-        \"tags\": [],\n-    }\n-\n-\n-@needs_py310\n-@needs_pydanticv2\n-def test_openapi_schema(client: TestClient):\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\n-        \"openapi\": \"3.1.0\",\n-        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n-        \"paths\": {\n-            \"/items/{item_id}\": {\n-                \"get\": {\n-                    \"responses\": {\n-                        \"200\": {\n-                            \"description\": \"Successful Response\",\n-                            \"content\": {\n-                                \"application/json\": {\n-                                    \"schema\": {\"$ref\": \"#/components/schemas/Item\"}\n-                                }\n-                            },\n-                        },\n-                        \"422\": {\n-                            \"description\": \"Validation Error\",\n-                            \"content\": {\n-                                \"application/json\": {\n-                                    \"schema\": {\n-                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n-                                    }\n-                                }\n-                            },\n-                        },\n-                    },\n-                    \"summary\": \"Read Item\",\n-                    \"operationId\": \"read_item_items__item_id__get\",\n-                    \"parameters\": [\n-                        {\n-                            \"required\": True,\n-                            \"schema\": {\"title\": \"Item Id\", \"type\": \"string\"},\n-                            \"name\": \"item_id\",\n-                            \"in\": \"path\",\n-                        }\n-                    ],\n-                },\n-                \"put\": {\n-                    \"responses\": {\n-                        \"200\": {\n-                            \"description\": \"Successful Response\",\n-                            \"content\": {\n-                                \"application/json\": {\n-                                    \"schema\": {\"$ref\": \"#/components/schemas/Item\"}\n-                                }\n-                            },\n-                        },\n-                        \"422\": {\n-                            \"description\": \"Validation Error\",\n-                            \"content\": {\n-                                \"application/json\": {\n-                                    \"schema\": {\n-                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n-                                    }\n-                                }\n-                            },\n-                        },\n-                    },\n-                    \"summary\": \"Update Item\",\n-                    \"operationId\": \"update_item_items__item_id__put\",\n-                    \"parameters\": [\n-                        {\n-                            \"required\": True,\n-                            \"schema\": {\"title\": \"Item Id\", \"type\": \"string\"},\n-                            \"name\": \"item_id\",\n-                            \"in\": \"path\",\n-                        }\n-                    ],\n-                    \"requestBody\": {\n-                        \"content\": {\n-                            \"application/json\": {\n-                                \"schema\": {\"$ref\": \"#/components/schemas/Item\"}\n-                            }\n-                        },\n-                        \"required\": True,\n-                    },\n-                },\n-            }\n-        },\n-        \"components\": {\n-            \"schemas\": {\n-                \"Item\": {\n-                    \"type\": \"object\",\n-                    \"title\": \"Item\",\n-                    \"properties\": {\n-                        \"name\": {\n-                            \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n-                            \"title\": \"Name\",\n-                        },\n-                        \"description\": {\n-                            \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n-                            \"title\": \"Description\",\n-                        },\n-                        \"price\": {\n-                            \"anyOf\": [{\"type\": \"number\"}, {\"type\": \"null\"}],\n-                            \"title\": \"Price\",\n-                        },\n-                        \"tax\": {\"title\": \"Tax\", \"type\": \"number\", \"default\": 10.5},\n-                        \"tags\": {\n-                            \"title\": \"Tags\",\n-                            \"type\": \"array\",\n-                            \"items\": {\"type\": \"string\"},\n-                            \"default\": [],\n-                        },\n-                    },\n-                },\n-                \"ValidationError\": {\n-                    \"title\": \"ValidationError\",\n-                    \"required\": [\"loc\", \"msg\", \"type\"],\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"loc\": {\n-                            \"title\": \"Location\",\n-                            \"type\": \"array\",\n-                            \"items\": {\n-                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n-                            },\n-                        },\n-                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n-                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n-                    },\n-                },\n-                \"HTTPValidationError\": {\n-                    \"title\": \"HTTPValidationError\",\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"detail\": {\n-                            \"title\": \"Detail\",\n-                            \"type\": \"array\",\n-                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n-                        }\n-                    },\n-                },\n-            }\n-        },\n-    }\n-\n-\n-# TODO: remove when deprecating Pydantic v1\n-@needs_py310\n-@needs_pydanticv1\n-def test_openapi_schema_pv1(client: TestClient):\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\n-        \"openapi\": \"3.1.0\",\n-        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n-        \"paths\": {\n-            \"/items/{item_id}\": {\n-                \"get\": {\n-                    \"responses\": {\n-                        \"200\": {\n-                            \"description\": \"Successful Response\",\n-                            \"content\": {\n-                                \"application/json\": {\n-                                    \"schema\": {\"$ref\": \"#/components/schemas/Item\"}\n-                                }\n-                            },\n-                        },\n-                        \"422\": {\n-                            \"description\": \"Validation Error\",\n-                            \"content\": {\n-                                \"application/json\": {\n-                                    \"schema\": {\n-                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n-                                    }\n-                                }\n-                            },\n-                        },\n-                    },\n-                    \"summary\": \"Read Item\",\n-                    \"operationId\": \"read_item_items__item_id__get\",\n-                    \"parameters\": [\n-                        {\n-                            \"required\": True,\n-                            \"schema\": {\"title\": \"Item Id\", \"type\": \"string\"},\n-                            \"name\": \"item_id\",\n-                            \"in\": \"path\",\n-                        }\n-                    ],\n-                },\n-                \"put\": {\n-                    \"responses\": {\n-                        \"200\": {\n-                            \"description\": \"Successful Response\",\n-                            \"content\": {\n-                                \"application/json\": {\n-                                    \"schema\": {\"$ref\": \"#/components/schemas/Item\"}\n-                                }\n-                            },\n-                        },\n-                        \"422\": {\n-                            \"description\": \"Validation Error\",\n-                            \"content\": {\n-                                \"application/json\": {\n-                                    \"schema\": {\n-                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n-                                    }\n-                                }\n-                            },\n-                        },\n-                    },\n-                    \"summary\": \"Update Item\",\n-                    \"operationId\": \"update_item_items__item_id__put\",\n-                    \"parameters\": [\n-                        {\n-                            \"required\": True,\n-                            \"schema\": {\"title\": \"Item Id\", \"type\": \"string\"},\n-                            \"name\": \"item_id\",\n-                            \"in\": \"path\",\n-                        }\n-                    ],\n-                    \"requestBody\": {\n-                        \"content\": {\n-                            \"application/json\": {\n-                                \"schema\": {\"$ref\": \"#/components/schemas/Item\"}\n-                            }\n-                        },\n-                        \"required\": True,\n-                    },\n-                },\n-            }\n-        },\n-        \"components\": {\n-            \"schemas\": {\n-                \"Item\": {\n-                    \"title\": \"Item\",\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"name\": {\"title\": \"Name\", \"type\": \"string\"},\n-                        \"description\": {\"title\": \"Description\", \"type\": \"string\"},\n-                        \"price\": {\"title\": \"Price\", \"type\": \"number\"},\n-                        \"tax\": {\"title\": \"Tax\", \"type\": \"number\", \"default\": 10.5},\n-                        \"tags\": {\n-                            \"title\": \"Tags\",\n-                            \"type\": \"array\",\n-                            \"items\": {\"type\": \"string\"},\n-                            \"default\": [],\n-                        },\n-                    },\n-                },\n-                \"ValidationError\": {\n-                    \"title\": \"ValidationError\",\n-                    \"required\": [\"loc\", \"msg\", \"type\"],\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"loc\": {\n-                            \"title\": \"Location\",\n-                            \"type\": \"array\",\n-                            \"items\": {\n-                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n-                            },\n-                        },\n-                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n-                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n-                    },\n-                },\n-                \"HTTPValidationError\": {\n-                    \"title\": \"HTTPValidationError\",\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"detail\": {\n-                            \"title\": \"Detail\",\n-                            \"type\": \"array\",\n-                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n-                        }\n-                    },\n-                },\n-            }\n-        },\n-    }\n\n@@ -1,317 +0,0 @@\n-import pytest\n-from fastapi.testclient import TestClient\n-\n-from ...utils import needs_py39, needs_pydanticv1, needs_pydanticv2\n-\n-\n-@pytest.fixture(name=\"client\")\n-def get_client():\n-    from docs_src.body_updates.tutorial001_py39 import app\n-\n-    client = TestClient(app)\n-    return client\n-\n-\n-@needs_py39\n-def test_get(client: TestClient):\n-    response = client.get(\"/items/baz\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\n-        \"name\": \"Baz\",\n-        \"description\": None,\n-        \"price\": 50.2,\n-        \"tax\": 10.5,\n-        \"tags\": [],\n-    }\n-\n-\n-@needs_py39\n-def test_put(client: TestClient):\n-    response = client.put(\n-        \"/items/bar\", json={\"name\": \"Barz\", \"price\": 3, \"description\": None}\n-    )\n-    assert response.json() == {\n-        \"name\": \"Barz\",\n-        \"description\": None,\n-        \"price\": 3,\n-        \"tax\": 10.5,\n-        \"tags\": [],\n-    }\n-\n-\n-@needs_py39\n-@needs_pydanticv2\n-def test_openapi_schema(client: TestClient):\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\n-        \"openapi\": \"3.1.0\",\n-        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n-        \"paths\": {\n-            \"/items/{item_id}\": {\n-                \"get\": {\n-                    \"responses\": {\n-                        \"200\": {\n-                            \"description\": \"Successful Response\",\n-                            \"content\": {\n-                                \"application/json\": {\n-                                    \"schema\": {\"$ref\": \"#/components/schemas/Item\"}\n-                                }\n-                            },\n-                        },\n-                        \"422\": {\n-                            \"description\": \"Validation Error\",\n-                            \"content\": {\n-                                \"application/json\": {\n-                                    \"schema\": {\n-                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n-                                    }\n-                                }\n-                            },\n-                        },\n-                    },\n-                    \"summary\": \"Read Item\",\n-                    \"operationId\": \"read_item_items__item_id__get\",\n-                    \"parameters\": [\n-                        {\n-                            \"required\": True,\n-                            \"schema\": {\"title\": \"Item Id\", \"type\": \"string\"},\n-                            \"name\": \"item_id\",\n-                            \"in\": \"path\",\n-                        }\n-                    ],\n-                },\n-                \"put\": {\n-                    \"responses\": {\n-                        \"200\": {\n-                            \"description\": \"Successful Response\",\n-                            \"content\": {\n-                                \"application/json\": {\n-                                    \"schema\": {\"$ref\": \"#/components/schemas/Item\"}\n-                                }\n-                            },\n-                        },\n-                        \"422\": {\n-                            \"description\": \"Validation Error\",\n-                            \"content\": {\n-                                \"application/json\": {\n-                                    \"schema\": {\n-                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n-                                    }\n-                                }\n-                            },\n-                        },\n-                    },\n-                    \"summary\": \"Update Item\",\n-                    \"operationId\": \"update_item_items__item_id__put\",\n-                    \"parameters\": [\n-                        {\n-                            \"required\": True,\n-                            \"schema\": {\"title\": \"Item Id\", \"type\": \"string\"},\n-                            \"name\": \"item_id\",\n-                            \"in\": \"path\",\n-                        }\n-                    ],\n-                    \"requestBody\": {\n-                        \"content\": {\n-                            \"application/json\": {\n-                                \"schema\": {\"$ref\": \"#/components/schemas/Item\"}\n-                            }\n-                        },\n-                        \"required\": True,\n-                    },\n-                },\n-            }\n-        },\n-        \"components\": {\n-            \"schemas\": {\n-                \"Item\": {\n-                    \"type\": \"object\",\n-                    \"title\": \"Item\",\n-                    \"properties\": {\n-                        \"name\": {\n-                            \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n-                            \"title\": \"Name\",\n-                        },\n-                        \"description\": {\n-                            \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n-                            \"title\": \"Description\",\n-                        },\n-                        \"price\": {\n-                            \"anyOf\": [{\"type\": \"number\"}, {\"type\": \"null\"}],\n-                            \"title\": \"Price\",\n-                        },\n-                        \"tax\": {\"title\": \"Tax\", \"type\": \"number\", \"default\": 10.5},\n-                        \"tags\": {\n-                            \"title\": \"Tags\",\n-                            \"type\": \"array\",\n-                            \"items\": {\"type\": \"string\"},\n-                            \"default\": [],\n-                        },\n-                    },\n-                },\n-                \"ValidationError\": {\n-                    \"title\": \"ValidationError\",\n-                    \"required\": [\"loc\", \"msg\", \"type\"],\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"loc\": {\n-                            \"title\": \"Location\",\n-                            \"type\": \"array\",\n-                            \"items\": {\n-                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n-                            },\n-                        },\n-                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n-                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n-                    },\n-                },\n-                \"HTTPValidationError\": {\n-                    \"title\": \"HTTPValidationError\",\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"detail\": {\n-                            \"title\": \"Detail\",\n-                            \"type\": \"array\",\n-                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n-                        }\n-                    },\n-                },\n-            }\n-        },\n-    }\n-\n-\n-# TODO: remove when deprecating Pydantic v1\n-@needs_py39\n-@needs_pydanticv1\n-def test_openapi_schema_pv1(client: TestClient):\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\n-        \"openapi\": \"3.1.0\",\n-        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n-        \"paths\": {\n-            \"/items/{item_id}\": {\n-                \"get\": {\n-                    \"responses\": {\n-                        \"200\": {\n-                            \"description\": \"Successful Response\",\n-                            \"content\": {\n-                                \"application/json\": {\n-                                    \"schema\": {\"$ref\": \"#/components/schemas/Item\"}\n-                                }\n-                            },\n-                        },\n-                        \"422\": {\n-                            \"description\": \"Validation Error\",\n-                            \"content\": {\n-                                \"application/json\": {\n-                                    \"schema\": {\n-                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n-                                    }\n-                                }\n-                            },\n-                        },\n-                    },\n-                    \"summary\": \"Read Item\",\n-                    \"operationId\": \"read_item_items__item_id__get\",\n-                    \"parameters\": [\n-                        {\n-                            \"required\": True,\n-                            \"schema\": {\"title\": \"Item Id\", \"type\": \"string\"},\n-                            \"name\": \"item_id\",\n-                            \"in\": \"path\",\n-                        }\n-                    ],\n-                },\n-                \"put\": {\n-                    \"responses\": {\n-                        \"200\": {\n-                            \"description\": \"Successful Response\",\n-                            \"content\": {\n-                                \"application/json\": {\n-                                    \"schema\": {\"$ref\": \"#/components/schemas/Item\"}\n-                                }\n-                            },\n-                        },\n-                        \"422\": {\n-                            \"description\": \"Validation Error\",\n-                            \"content\": {\n-                                \"application/json\": {\n-                                    \"schema\": {\n-                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n-                                    }\n-                                }\n-                            },\n-                        },\n-                    },\n-                    \"summary\": \"Update Item\",\n-                    \"operationId\": \"update_item_items__item_id__put\",\n-                    \"parameters\": [\n-                        {\n-                            \"required\": True,\n-                            \"schema\": {\"title\": \"Item Id\", \"type\": \"string\"},\n-                            \"name\": \"item_id\",\n-                            \"in\": \"path\",\n-                        }\n-                    ],\n-                    \"requestBody\": {\n-                        \"content\": {\n-                            \"application/json\": {\n-                                \"schema\": {\"$ref\": \"#/components/schemas/Item\"}\n-                            }\n-                        },\n-                        \"required\": True,\n-                    },\n-                },\n-            }\n-        },\n-        \"components\": {\n-            \"schemas\": {\n-                \"Item\": {\n-                    \"title\": \"Item\",\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"name\": {\"title\": \"Name\", \"type\": \"string\"},\n-                        \"description\": {\"title\": \"Description\", \"type\": \"string\"},\n-                        \"price\": {\"title\": \"Price\", \"type\": \"number\"},\n-                        \"tax\": {\"title\": \"Tax\", \"type\": \"number\", \"default\": 10.5},\n-                        \"tags\": {\n-                            \"title\": \"Tags\",\n-                            \"type\": \"array\",\n-                            \"items\": {\"type\": \"string\"},\n-                            \"default\": [],\n-                        },\n-                    },\n-                },\n-                \"ValidationError\": {\n-                    \"title\": \"ValidationError\",\n-                    \"required\": [\"loc\", \"msg\", \"type\"],\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"loc\": {\n-                            \"title\": \"Location\",\n-                            \"type\": \"array\",\n-                            \"items\": {\n-                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n-                            },\n-                        },\n-                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n-                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n-                    },\n-                },\n-                \"HTTPValidationError\": {\n-                    \"title\": \"HTTPValidationError\",\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"detail\": {\n-                            \"title\": \"Detail\",\n-                            \"type\": \"array\",\n-                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n-                        }\n-                    },\n-                },\n-            }\n-        },\n-    }\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#920df4d1ac3bba3ac14ac61ccd330d88975d7849", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 169 | Lines Deleted: 2545 | Files Changed: 25 | Hunks: 63 | Methods Changed: 146 | Complexity Δ (Sum/Max): -74/1 | Churn Δ: 2714 | Churn Cumulative: 8124 | Contributors (this commit): 5 | Commits (past 90d): 25 | Contributors (cumulative): 60 | DMM Complexity: 0.0\n\nDIFF:\n@@ -1,10 +1,27 @@\n+import importlib\n+\n import pytest\n from dirty_equals import IsDict\n from fastapi.testclient import TestClient\n \n-from docs_src.dependencies.tutorial001 import app\n+from ...utils import needs_py39, needs_py310\n \n-client = TestClient(app)\n+\n+@pytest.fixture(\n+    name=\"client\",\n+    params=[\n+        \"tutorial001\",\n+        pytest.param(\"tutorial001_py310\", marks=needs_py310),\n+        \"tutorial001_an\",\n+        pytest.param(\"tutorial001_an_py39\", marks=needs_py39),\n+        pytest.param(\"tutorial001_an_py310\", marks=needs_py310),\n+    ],\n+)\n+def get_client(request: pytest.FixtureRequest):\n+    mod = importlib.import_module(f\"docs_src.dependencies.{request.param}\")\n+\n+    client = TestClient(mod.app)\n+    return client\n \n \n @pytest.mark.parametrize(\n@@ -17,13 +34,13 @@ client = TestClient(app)\n         (\"/users\", 200, {\"q\": None, \"skip\": 0, \"limit\": 100}),\n     ],\n )\n-def test_get(path, expected_status, expected_response):\n+def test_get(path, expected_status, expected_response, client: TestClient):\n     response = client.get(path)\n     assert response.status_code == expected_status\n     assert response.json() == expected_response\n \n \n-def test_openapi_schema():\n+def test_openapi_schema(client: TestClient):\n     response = client.get(\"/openapi.json\")\n     assert response.status_code == 200, response.text\n     assert response.json() == {\n\n@@ -1,183 +0,0 @@\n-import pytest\n-from dirty_equals import IsDict\n-from fastapi.testclient import TestClient\n-\n-from docs_src.dependencies.tutorial001_an import app\n-\n-client = TestClient(app)\n-\n-\n-@pytest.mark.parametrize(\n-    \"path,expected_status,expected_response\",\n-    [\n-        (\"/items\", 200, {\"q\": None, \"skip\": 0, \"limit\": 100}),\n-        (\"/items?q=foo\", 200, {\"q\": \"foo\", \"skip\": 0, \"limit\": 100}),\n-        (\"/items?q=foo&skip=5\", 200, {\"q\": \"foo\", \"skip\": 5, \"limit\": 100}),\n-        (\"/items?q=foo&skip=5&limit=30\", 200, {\"q\": \"foo\", \"skip\": 5, \"limit\": 30}),\n-        (\"/users\", 200, {\"q\": None, \"skip\": 0, \"limit\": 100}),\n-    ],\n-)\n-def test_get(path, expected_status, expected_response):\n-    response = client.get(path)\n-    assert response.status_code == expected_status\n-    assert response.json() == expected_response\n-\n-\n-def test_openapi_schema():\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\n-        \"openapi\": \"3.1.0\",\n-        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n-        \"paths\": {\n-            \"/items/\": {\n-                \"get\": {\n-                    \"responses\": {\n-                        \"200\": {\n-                            \"description\": \"Successful Response\",\n-                            \"content\": {\"application/json\": {\"schema\": {}}},\n-                        },\n-                        \"422\": {\n-                            \"description\": \"Validation Error\",\n-                            \"content\": {\n-                                \"application/json\": {\n-                                    \"schema\": {\n-                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n-                                    }\n-                                }\n-                            },\n-                        },\n-                    },\n-                    \"summary\": \"Read Items\",\n-                    \"operationId\": \"read_items_items__get\",\n-                    \"parameters\": [\n-                        {\n-                            \"required\": False,\n-                            \"schema\": IsDict(\n-                                {\n-                                    \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n-                                    \"title\": \"Q\",\n-                                }\n-                            )\n-                            | IsDict(\n-                                # TODO: remove when deprecating Pydantic v1\n-                                {\"title\": \"Q\", \"type\": \"string\"}\n-                            ),\n-                            \"name\": \"q\",\n-                            \"in\": \"query\",\n-                        },\n-                        {\n-                            \"required\": False,\n-                            \"schema\": {\n-                                \"title\": \"Skip\",\n-                                \"type\": \"integer\",\n-                                \"default\": 0,\n-                            },\n-                            \"name\": \"skip\",\n-                            \"in\": \"query\",\n-                        },\n-                        {\n-                            \"required\": False,\n-                            \"schema\": {\n-                                \"title\": \"Limit\",\n-                                \"type\": \"integer\",\n-                                \"default\": 100,\n-                            },\n-                            \"name\": \"limit\",\n-                            \"in\": \"query\",\n-                        },\n-                    ],\n-                }\n-            },\n-            \"/users/\": {\n-                \"get\": {\n-                    \"responses\": {\n-                        \"200\": {\n-                            \"description\": \"Successful Response\",\n-                            \"content\": {\"application/json\": {\"schema\": {}}},\n-                        },\n-                        \"422\": {\n-                            \"description\": \"Validation Error\",\n-                            \"content\": {\n-                                \"application/json\": {\n-                                    \"schema\": {\n-                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n-                                    }\n-                                }\n-                            },\n-                        },\n-                    },\n-                    \"summary\": \"Read Users\",\n-                    \"operationId\": \"read_users_users__get\",\n-                    \"parameters\": [\n-                        {\n-                            \"required\": False,\n-                            \"schema\": IsDict(\n-                                {\n-                                    \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n-                                    \"title\": \"Q\",\n-                                }\n-                            )\n-                            | IsDict(\n-                                # TODO: remove when deprecating Pydantic v1\n-                                {\"title\": \"Q\", \"type\": \"string\"}\n-                            ),\n-                            \"name\": \"q\",\n-                            \"in\": \"query\",\n-                        },\n-                        {\n-                            \"required\": False,\n-                            \"schema\": {\n-                                \"title\": \"Skip\",\n-                                \"type\": \"integer\",\n-                                \"default\": 0,\n-                            },\n-                            \"name\": \"skip\",\n-                            \"in\": \"query\",\n-                        },\n-                        {\n-                            \"required\": False,\n-                            \"schema\": {\n-                                \"title\": \"Limit\",\n-                                \"type\": \"integer\",\n-                                \"default\": 100,\n-                            },\n-                            \"name\": \"limit\",\n-                            \"in\": \"query\",\n-                        },\n-                    ],\n-                }\n-            },\n-        },\n-        \"components\": {\n-            \"schemas\": {\n-                \"ValidationError\": {\n-                    \"title\": \"ValidationError\",\n-                    \"required\": [\"loc\", \"msg\", \"type\"],\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"loc\": {\n-                            \"title\": \"Location\",\n-                            \"type\": \"array\",\n-                            \"items\": {\n-                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n-                            },\n-                        },\n-                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n-                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n-                    },\n-                },\n-                \"HTTPValidationError\": {\n-                    \"title\": \"HTTPValidationError\",\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"detail\": {\n-                            \"title\": \"Detail\",\n-                            \"type\": \"array\",\n-                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n-                        }\n-                    },\n-                },\n-            }\n-        },\n-    }\n\n@@ -1,191 +0,0 @@\n-import pytest\n-from dirty_equals import IsDict\n-from fastapi.testclient import TestClient\n-\n-from ...utils import needs_py310\n-\n-\n-@pytest.fixture(name=\"client\")\n-def get_client():\n-    from docs_src.dependencies.tutorial001_an_py310 import app\n-\n-    client = TestClient(app)\n-    return client\n-\n-\n-@needs_py310\n-@pytest.mark.parametrize(\n-    \"path,expected_status,expected_response\",\n-    [\n-        (\"/items\", 200, {\"q\": None, \"skip\": 0, \"limit\": 100}),\n-        (\"/items?q=foo\", 200, {\"q\": \"foo\", \"skip\": 0, \"limit\": 100}),\n-        (\"/items?q=foo&skip=5\", 200, {\"q\": \"foo\", \"skip\": 5, \"limit\": 100}),\n-        (\"/items?q=foo&skip=5&limit=30\", 200, {\"q\": \"foo\", \"skip\": 5, \"limit\": 30}),\n-        (\"/users\", 200, {\"q\": None, \"skip\": 0, \"limit\": 100}),\n-    ],\n-)\n-def test_get(path, expected_status, expected_response, client: TestClient):\n-    response = client.get(path)\n-    assert response.status_code == expected_status\n-    assert response.json() == expected_response\n-\n-\n-@needs_py310\n-def test_openapi_schema(client: TestClient):\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\n-        \"openapi\": \"3.1.0\",\n-        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n-        \"paths\": {\n-            \"/items/\": {\n-                \"get\": {\n-                    \"responses\": {\n-                        \"200\": {\n-                            \"description\": \"Successful Response\",\n-                            \"content\": {\"application/json\": {\"schema\": {}}},\n-                        },\n-                        \"422\": {\n-                            \"description\": \"Validation Error\",\n-                            \"content\": {\n-                                \"application/json\": {\n-                                    \"schema\": {\n-                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n-                                    }\n-                                }\n-                            },\n-                        },\n-                    },\n-                    \"summary\": \"Read Items\",\n-                    \"operationId\": \"read_items_items__get\",\n-                    \"parameters\": [\n-                        {\n-                            \"required\": False,\n-                            \"schema\": IsDict(\n-                                {\n-                                    \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n-                                    \"title\": \"Q\",\n-                                }\n-                            )\n-                            | IsDict(\n-                                # TODO: remove when deprecating Pydantic v1\n-                                {\"title\": \"Q\", \"type\": \"string\"}\n-                            ),\n-                            \"name\": \"q\",\n-                            \"in\": \"query\",\n-                        },\n-                        {\n-                            \"required\": False,\n-                            \"schema\": {\n-                                \"title\": \"Skip\",\n-                                \"type\": \"integer\",\n-                                \"default\": 0,\n-                            },\n-                            \"name\": \"skip\",\n-                            \"in\": \"query\",\n-                        },\n-                        {\n-                            \"required\": False,\n-                            \"schema\": {\n-                                \"title\": \"Limit\",\n-                                \"type\": \"integer\",\n-                                \"default\": 100,\n-                            },\n-                            \"name\": \"limit\",\n-                            \"in\": \"query\",\n-                        },\n-                    ],\n-                }\n-            },\n-            \"/users/\": {\n-                \"get\": {\n-                    \"responses\": {\n-                        \"200\": {\n-                            \"description\": \"Successful Response\",\n-                            \"content\": {\"application/json\": {\"schema\": {}}},\n-                        },\n-                        \"422\": {\n-                            \"description\": \"Validation Error\",\n-                            \"content\": {\n-                                \"application/json\": {\n-                                    \"schema\": {\n-                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n-                                    }\n-                                }\n-                            },\n-                        },\n-                    },\n-                    \"summary\": \"Read Users\",\n-                    \"operationId\": \"read_users_users__get\",\n-                    \"parameters\": [\n-                        {\n-                            \"required\": False,\n-                            \"schema\": IsDict(\n-                                {\n-                                    \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n-                                    \"title\": \"Q\",\n-                                }\n-                            )\n-                            | IsDict(\n-                                # TODO: remove when deprecating Pydantic v1\n-                                {\"title\": \"Q\", \"type\": \"string\"}\n-                            ),\n-                            \"name\": \"q\",\n-                            \"in\": \"query\",\n-                        },\n-                        {\n-                            \"required\": False,\n-                            \"schema\": {\n-                                \"title\": \"Skip\",\n-                                \"type\": \"integer\",\n-                                \"default\": 0,\n-                            },\n-                            \"name\": \"skip\",\n-                            \"in\": \"query\",\n-                        },\n-                        {\n-                            \"required\": False,\n-                            \"schema\": {\n-                                \"title\": \"Limit\",\n-                                \"type\": \"integer\",\n-                                \"default\": 100,\n-                            },\n-                            \"name\": \"limit\",\n-                            \"in\": \"query\",\n-                        },\n-                    ],\n-                }\n-            },\n-        },\n-        \"components\": {\n-            \"schemas\": {\n-                \"ValidationError\": {\n-                    \"title\": \"ValidationError\",\n-                    \"required\": [\"loc\", \"msg\", \"type\"],\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"loc\": {\n-                            \"title\": \"Location\",\n-                            \"type\": \"array\",\n-                            \"items\": {\n-                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n-                            },\n-                        },\n-                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n-                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n-                    },\n-                },\n-                \"HTTPValidationError\": {\n-                    \"title\": \"HTTPValidationError\",\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"detail\": {\n-                            \"title\": \"Detail\",\n-                            \"type\": \"array\",\n-                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n-                        }\n-                    },\n-                },\n-            }\n-        },\n-    }\n\n@@ -1,191 +0,0 @@\n-import pytest\n-from dirty_equals import IsDict\n-from fastapi.testclient import TestClient\n-\n-from ...utils import needs_py39\n-\n-\n-@pytest.fixture(name=\"client\")\n-def get_client():\n-    from docs_src.dependencies.tutorial001_an_py39 import app\n-\n-    client = TestClient(app)\n-    return client\n-\n-\n-@needs_py39\n-@pytest.mark.parametrize(\n-    \"path,expected_status,expected_response\",\n-    [\n-        (\"/items\", 200, {\"q\": None, \"skip\": 0, \"limit\": 100}),\n-        (\"/items?q=foo\", 200, {\"q\": \"foo\", \"skip\": 0, \"limit\": 100}),\n-        (\"/items?q=foo&skip=5\", 200, {\"q\": \"foo\", \"skip\": 5, \"limit\": 100}),\n-        (\"/items?q=foo&skip=5&limit=30\", 200, {\"q\": \"foo\", \"skip\": 5, \"limit\": 30}),\n-        (\"/users\", 200, {\"q\": None, \"skip\": 0, \"limit\": 100}),\n-    ],\n-)\n-def test_get(path, expected_status, expected_response, client: TestClient):\n-    response = client.get(path)\n-    assert response.status_code == expected_status\n-    assert response.json() == expected_response\n-\n-\n-@needs_py39\n-def test_openapi_schema(client: TestClient):\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\n-        \"openapi\": \"3.1.0\",\n-        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n-        \"paths\": {\n-            \"/items/\": {\n-                \"get\": {\n-                    \"responses\": {\n-                        \"200\": {\n-                            \"description\": \"Successful Response\",\n-                            \"content\": {\"application/json\": {\"schema\": {}}},\n-                        },\n-                        \"422\": {\n-                            \"description\": \"Validation Error\",\n-                            \"content\": {\n-                                \"application/json\": {\n-                                    \"schema\": {\n-                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n-                                    }\n-                                }\n-                            },\n-                        },\n-                    },\n-                    \"summary\": \"Read Items\",\n-                    \"operationId\": \"read_items_items__get\",\n-                    \"parameters\": [\n-                        {\n-                            \"required\": False,\n-                            \"schema\": IsDict(\n-                                {\n-                                    \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n-                                    \"title\": \"Q\",\n-                                }\n-                            )\n-                            | IsDict(\n-                                # TODO: remove when deprecating Pydantic v1\n-                                {\"title\": \"Q\", \"type\": \"string\"}\n-                            ),\n-                            \"name\": \"q\",\n-                            \"in\": \"query\",\n-                        },\n-                        {\n-                            \"required\": False,\n-                            \"schema\": {\n-                                \"title\": \"Skip\",\n-                                \"type\": \"integer\",\n-                                \"default\": 0,\n-                            },\n-                            \"name\": \"skip\",\n-                            \"in\": \"query\",\n-                        },\n-                        {\n-                            \"required\": False,\n-                            \"schema\": {\n-                                \"title\": \"Limit\",\n-                                \"type\": \"integer\",\n-                                \"default\": 100,\n-                            },\n-                            \"name\": \"limit\",\n-                            \"in\": \"query\",\n-                        },\n-                    ],\n-                }\n-            },\n-            \"/users/\": {\n-                \"get\": {\n-                    \"responses\": {\n-                        \"200\": {\n-                            \"description\": \"Successful Response\",\n-                            \"content\": {\"application/json\": {\"schema\": {}}},\n-                        },\n-                        \"422\": {\n-                            \"description\": \"Validation Error\",\n-                            \"content\": {\n-                                \"application/json\": {\n-                                    \"schema\": {\n-                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n-                                    }\n-                                }\n-                            },\n-                        },\n-                    },\n-                    \"summary\": \"Read Users\",\n-                    \"operationId\": \"read_users_users__get\",\n-                    \"parameters\": [\n-                        {\n-                            \"required\": False,\n-                            \"schema\": IsDict(\n-                                {\n-                                    \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n-                                    \"title\": \"Q\",\n-                                }\n-                            )\n-                            | IsDict(\n-                                # TODO: remove when deprecating Pydantic v1\n-                                {\"title\": \"Q\", \"type\": \"string\"}\n-                            ),\n-                            \"name\": \"q\",\n-                            \"in\": \"query\",\n-                        },\n-                        {\n-                            \"required\": False,\n-                            \"schema\": {\n-                                \"title\": \"Skip\",\n-                                \"type\": \"integer\",\n-                                \"default\": 0,\n-                            },\n-                            \"name\": \"skip\",\n-                            \"in\": \"query\",\n-                        },\n-                        {\n-                            \"required\": False,\n-                            \"schema\": {\n-                                \"title\": \"Limit\",\n-                                \"type\": \"integer\",\n-                                \"default\": 100,\n-                            },\n-                            \"name\": \"limit\",\n-                            \"in\": \"query\",\n-                        },\n-                    ],\n-                }\n-            },\n-        },\n-        \"components\": {\n-            \"schemas\": {\n-                \"ValidationError\": {\n-                    \"title\": \"ValidationError\",\n-                    \"required\": [\"loc\", \"msg\", \"type\"],\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"loc\": {\n-                            \"title\": \"Location\",\n-                            \"type\": \"array\",\n-                            \"items\": {\n-                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n-                            },\n-                        },\n-                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n-                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n-                    },\n-                },\n-                \"HTTPValidationError\": {\n-                    \"title\": \"HTTPValidationError\",\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"detail\": {\n-                            \"title\": \"Detail\",\n-                            \"type\": \"array\",\n-                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n-                        }\n-                    },\n-                },\n-            }\n-        },\n-    }\n\n@@ -1,191 +0,0 @@\n-import pytest\n-from dirty_equals import IsDict\n-from fastapi.testclient import TestClient\n-\n-from ...utils import needs_py310\n-\n-\n-@pytest.fixture(name=\"client\")\n-def get_client():\n-    from docs_src.dependencies.tutorial001_py310 import app\n-\n-    client = TestClient(app)\n-    return client\n-\n-\n-@needs_py310\n-@pytest.mark.parametrize(\n-    \"path,expected_status,expected_response\",\n-    [\n-        (\"/items\", 200, {\"q\": None, \"skip\": 0, \"limit\": 100}),\n-        (\"/items?q=foo\", 200, {\"q\": \"foo\", \"skip\": 0, \"limit\": 100}),\n-        (\"/items?q=foo&skip=5\", 200, {\"q\": \"foo\", \"skip\": 5, \"limit\": 100}),\n-        (\"/items?q=foo&skip=5&limit=30\", 200, {\"q\": \"foo\", \"skip\": 5, \"limit\": 30}),\n-        (\"/users\", 200, {\"q\": None, \"skip\": 0, \"limit\": 100}),\n-    ],\n-)\n-def test_get(path, expected_status, expected_response, client: TestClient):\n-    response = client.get(path)\n-    assert response.status_code == expected_status\n-    assert response.json() == expected_response\n-\n-\n-@needs_py310\n-def test_openapi_schema(client: TestClient):\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\n-        \"openapi\": \"3.1.0\",\n-        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n-        \"paths\": {\n-            \"/items/\": {\n-                \"get\": {\n-                    \"responses\": {\n-                        \"200\": {\n-                            \"description\": \"Successful Response\",\n-                            \"content\": {\"application/json\": {\"schema\": {}}},\n-                        },\n-                        \"422\": {\n-                            \"description\": \"Validation Error\",\n-                            \"content\": {\n-                                \"application/json\": {\n-                                    \"schema\": {\n-                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n-                                    }\n-                                }\n-                            },\n-                        },\n-                    },\n-                    \"summary\": \"Read Items\",\n-                    \"operationId\": \"read_items_items__get\",\n-                    \"parameters\": [\n-                        {\n-                            \"required\": False,\n-                            \"schema\": IsDict(\n-                                {\n-                                    \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n-                                    \"title\": \"Q\",\n-                                }\n-                            )\n-                            | IsDict(\n-                                # TODO: remove when deprecating Pydantic v1\n-                                {\"title\": \"Q\", \"type\": \"string\"}\n-                            ),\n-                            \"name\": \"q\",\n-                            \"in\": \"query\",\n-                        },\n-                        {\n-                            \"required\": False,\n-                            \"schema\": {\n-                                \"title\": \"Skip\",\n-                                \"type\": \"integer\",\n-                                \"default\": 0,\n-                            },\n-                            \"name\": \"skip\",\n-                            \"in\": \"query\",\n-                        },\n-                        {\n-                            \"required\": False,\n-                            \"schema\": {\n-                                \"title\": \"Limit\",\n-                                \"type\": \"integer\",\n-                                \"default\": 100,\n-                            },\n-                            \"name\": \"limit\",\n-                            \"in\": \"query\",\n-                        },\n-                    ],\n-                }\n-            },\n-            \"/users/\": {\n-                \"get\": {\n-                    \"responses\": {\n-                        \"200\": {\n-                            \"description\": \"Successful Response\",\n-                            \"content\": {\"application/json\": {\"schema\": {}}},\n-                        },\n-                        \"422\": {\n-                            \"description\": \"Validation Error\",\n-                            \"content\": {\n-                                \"application/json\": {\n-                                    \"schema\": {\n-                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n-                                    }\n-                                }\n-                            },\n-                        },\n-                    },\n-                    \"summary\": \"Read Users\",\n-                    \"operationId\": \"read_users_users__get\",\n-                    \"parameters\": [\n-                        {\n-                            \"required\": False,\n-                            \"schema\": IsDict(\n-                                {\n-                                    \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n-                                    \"title\": \"Q\",\n-                                }\n-                            )\n-                            | IsDict(\n-                                # TODO: remove when deprecating Pydantic v1\n-                                {\"title\": \"Q\", \"type\": \"string\"}\n-                            ),\n-                            \"name\": \"q\",\n-                            \"in\": \"query\",\n-                        },\n-                        {\n-                            \"required\": False,\n-                            \"schema\": {\n-                                \"title\": \"Skip\",\n-                                \"type\": \"integer\",\n-                                \"default\": 0,\n-                            },\n-                            \"name\": \"skip\",\n-                            \"in\": \"query\",\n-                        },\n-                        {\n-                            \"required\": False,\n-                            \"schema\": {\n-                                \"title\": \"Limit\",\n-                                \"type\": \"integer\",\n-                                \"default\": 100,\n-                            },\n-                            \"name\": \"limit\",\n-                            \"in\": \"query\",\n-                        },\n-                    ],\n-                }\n-            },\n-        },\n-        \"components\": {\n-            \"schemas\": {\n-                \"ValidationError\": {\n-                    \"title\": \"ValidationError\",\n-                    \"required\": [\"loc\", \"msg\", \"type\"],\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"loc\": {\n-                            \"title\": \"Location\",\n-                            \"type\": \"array\",\n-                            \"items\": {\n-                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n-                            },\n-                        },\n-                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n-                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n-                    },\n-                },\n-                \"HTTPValidationError\": {\n-                    \"title\": \"HTTPValidationError\",\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"detail\": {\n-                            \"title\": \"Detail\",\n-                            \"type\": \"array\",\n-                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n-                        }\n-                    },\n-                },\n-            }\n-        },\n-    }\n\n@@ -1,10 +1,27 @@\n+import importlib\n+\n import pytest\n from dirty_equals import IsDict\n from fastapi.testclient import TestClient\n \n-from docs_src.dependencies.tutorial004 import app\n+from ...utils import needs_py39, needs_py310\n \n-client = TestClient(app)\n+\n+@pytest.fixture(\n+    name=\"client\",\n+    params=[\n+        \"tutorial004\",\n+        pytest.param(\"tutorial004_py310\", marks=needs_py310),\n+        \"tutorial004_an\",\n+        pytest.param(\"tutorial004_an_py39\", marks=needs_py39),\n+        pytest.param(\"tutorial004_an_py310\", marks=needs_py310),\n+    ],\n+)\n+def get_client(request: pytest.FixtureRequest):\n+    mod = importlib.import_module(f\"docs_src.dependencies.{request.param}\")\n+\n+    client = TestClient(mod.app)\n+    return client\n \n \n @pytest.mark.parametrize(\n@@ -55,13 +72,13 @@ client = TestClient(app)\n         ),\n     ],\n )\n-def test_get(path, expected_status, expected_response):\n+def test_get(path, expected_status, expected_response, client: TestClient):\n     response = client.get(path)\n     assert response.status_code == expected_status\n     assert response.json() == expected_response\n \n \n-def test_openapi_schema():\n+def test_openapi_schema(client: TestClient):\n     response = client.get(\"/openapi.json\")\n     assert response.status_code == 200, response.text\n     assert response.json() == {\n\n@@ -1,162 +0,0 @@\n-import pytest\n-from dirty_equals import IsDict\n-from fastapi.testclient import TestClient\n-\n-from docs_src.dependencies.tutorial004_an import app\n-\n-client = TestClient(app)\n-\n-\n-@pytest.mark.parametrize(\n-    \"path,expected_status,expected_response\",\n-    [\n-        (\n-            \"/items\",\n-            200,\n-            {\n-                \"items\": [\n-                    {\"item_name\": \"Foo\"},\n-                    {\"item_name\": \"Bar\"},\n-                    {\"item_name\": \"Baz\"},\n-                ]\n-            },\n-        ),\n-        (\n-            \"/items?q=foo\",\n-            200,\n-            {\n-                \"items\": [\n-                    {\"item_name\": \"Foo\"},\n-                    {\"item_name\": \"Bar\"},\n-                    {\"item_name\": \"Baz\"},\n-                ],\n-                \"q\": \"foo\",\n-            },\n-        ),\n-        (\n-            \"/items?q=foo&skip=1\",\n-            200,\n-            {\"items\": [{\"item_name\": \"Bar\"}, {\"item_name\": \"Baz\"}], \"q\": \"foo\"},\n-        ),\n-        (\n-            \"/items?q=bar&limit=2\",\n-            200,\n-            {\"items\": [{\"item_name\": \"Foo\"}, {\"item_name\": \"Bar\"}], \"q\": \"bar\"},\n-        ),\n-        (\n-            \"/items?q=bar&skip=1&limit=1\",\n-            200,\n-            {\"items\": [{\"item_name\": \"Bar\"}], \"q\": \"bar\"},\n-        ),\n-        (\n-            \"/items?limit=1&q=bar&skip=1\",\n-            200,\n-            {\"items\": [{\"item_name\": \"Bar\"}], \"q\": \"bar\"},\n-        ),\n-    ],\n-)\n-def test_get(path, expected_status, expected_response):\n-    response = client.get(path)\n-    assert response.status_code == expected_status\n-    assert response.json() == expected_response\n-\n-\n-def test_openapi_schema():\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\n-        \"openapi\": \"3.1.0\",\n-        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n-        \"paths\": {\n-            \"/items/\": {\n-                \"get\": {\n-                    \"responses\": {\n-                        \"200\": {\n-                            \"description\": \"Successful Response\",\n-                            \"content\": {\"application/json\": {\"schema\": {}}},\n-                        },\n-                        \"422\": {\n-                            \"description\": \"Validation Error\",\n-                            \"content\": {\n-                                \"application/json\": {\n-                                    \"schema\": {\n-                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n-                                    }\n-                                }\n-                            },\n-                        },\n-                    },\n-                    \"summary\": \"Read Items\",\n-                    \"operationId\": \"read_items_items__get\",\n-                    \"parameters\": [\n-                        {\n-                            \"required\": False,\n-                            \"schema\": IsDict(\n-                                {\n-                                    \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n-                                    \"title\": \"Q\",\n-                                }\n-                            )\n-                            | IsDict(\n-                                # TODO: remove when deprecating Pydantic v1\n-                                {\"title\": \"Q\", \"type\": \"string\"}\n-                            ),\n-                            \"name\": \"q\",\n-                            \"in\": \"query\",\n-                        },\n-                        {\n-                            \"required\": False,\n-                            \"schema\": {\n-                                \"title\": \"Skip\",\n-                                \"type\": \"integer\",\n-                                \"default\": 0,\n-                            },\n-                            \"name\": \"skip\",\n-                            \"in\": \"query\",\n-                        },\n-                        {\n-                            \"required\": False,\n-                            \"schema\": {\n-                                \"title\": \"Limit\",\n-                                \"type\": \"integer\",\n-                                \"default\": 100,\n-                            },\n-                            \"name\": \"limit\",\n-                            \"in\": \"query\",\n-                        },\n-                    ],\n-                }\n-            }\n-        },\n-        \"components\": {\n-            \"schemas\": {\n-                \"ValidationError\": {\n-                    \"title\": \"ValidationError\",\n-                    \"required\": [\"loc\", \"msg\", \"type\"],\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"loc\": {\n-                            \"title\": \"Location\",\n-                            \"type\": \"array\",\n-                            \"items\": {\n-                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n-                            },\n-                        },\n-                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n-                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n-                    },\n-                },\n-                \"HTTPValidationError\": {\n-                    \"title\": \"HTTPValidationError\",\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"detail\": {\n-                            \"title\": \"Detail\",\n-                            \"type\": \"array\",\n-                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n-                        }\n-                    },\n-                },\n-            }\n-        },\n-    }\n\n@@ -1,170 +0,0 @@\n-import pytest\n-from dirty_equals import IsDict\n-from fastapi.testclient import TestClient\n-\n-from ...utils import needs_py310\n-\n-\n-@pytest.fixture(name=\"client\")\n-def get_client():\n-    from docs_src.dependencies.tutorial004_an_py310 import app\n-\n-    client = TestClient(app)\n-    return client\n-\n-\n-@needs_py310\n-@pytest.mark.parametrize(\n-    \"path,expected_status,expected_response\",\n-    [\n-        (\n-            \"/items\",\n-            200,\n-            {\n-                \"items\": [\n-                    {\"item_name\": \"Foo\"},\n-                    {\"item_name\": \"Bar\"},\n-                    {\"item_name\": \"Baz\"},\n-                ]\n-            },\n-        ),\n-        (\n-            \"/items?q=foo\",\n-            200,\n-            {\n-                \"items\": [\n-                    {\"item_name\": \"Foo\"},\n-                    {\"item_name\": \"Bar\"},\n-                    {\"item_name\": \"Baz\"},\n-                ],\n-                \"q\": \"foo\",\n-            },\n-        ),\n-        (\n-            \"/items?q=foo&skip=1\",\n-            200,\n-            {\"items\": [{\"item_name\": \"Bar\"}, {\"item_name\": \"Baz\"}], \"q\": \"foo\"},\n-        ),\n-        (\n-            \"/items?q=bar&limit=2\",\n-            200,\n-            {\"items\": [{\"item_name\": \"Foo\"}, {\"item_name\": \"Bar\"}], \"q\": \"bar\"},\n-        ),\n-        (\n-            \"/items?q=bar&skip=1&limit=1\",\n-            200,\n-            {\"items\": [{\"item_name\": \"Bar\"}], \"q\": \"bar\"},\n-        ),\n-        (\n-            \"/items?limit=1&q=bar&skip=1\",\n-            200,\n-            {\"items\": [{\"item_name\": \"Bar\"}], \"q\": \"bar\"},\n-        ),\n-    ],\n-)\n-def test_get(path, expected_status, expected_response, client: TestClient):\n-    response = client.get(path)\n-    assert response.status_code == expected_status\n-    assert response.json() == expected_response\n-\n-\n-@needs_py310\n-def test_openapi_schema(client: TestClient):\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\n-        \"openapi\": \"3.1.0\",\n-        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n-        \"paths\": {\n-            \"/items/\": {\n-                \"get\": {\n-                    \"responses\": {\n-                        \"200\": {\n-                            \"description\": \"Successful Response\",\n-                            \"content\": {\"application/json\": {\"schema\": {}}},\n-                        },\n-                        \"422\": {\n-                            \"description\": \"Validation Error\",\n-                            \"content\": {\n-                                \"application/json\": {\n-                                    \"schema\": {\n-                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n-                                    }\n-                                }\n-                            },\n-                        },\n-                    },\n-                    \"summary\": \"Read Items\",\n-                    \"operationId\": \"read_items_items__get\",\n-                    \"parameters\": [\n-                        {\n-                            \"required\": False,\n-                            \"schema\": IsDict(\n-                                {\n-                                    \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n-                                    \"title\": \"Q\",\n-                                }\n-                            )\n-                            | IsDict(\n-                                # TODO: remove when deprecating Pydantic v1\n-                                {\"title\": \"Q\", \"type\": \"string\"}\n-                            ),\n-                            \"name\": \"q\",\n-                            \"in\": \"query\",\n-                        },\n-                        {\n-                            \"required\": False,\n-                            \"schema\": {\n-                                \"title\": \"Skip\",\n-                                \"type\": \"integer\",\n-                                \"default\": 0,\n-                            },\n-                            \"name\": \"skip\",\n-                            \"in\": \"query\",\n-                        },\n-                        {\n-                            \"required\": False,\n-                            \"schema\": {\n-                                \"title\": \"Limit\",\n-                                \"type\": \"integer\",\n-                                \"default\": 100,\n-                            },\n-                            \"name\": \"limit\",\n-                            \"in\": \"query\",\n-                        },\n-                    ],\n-                }\n-            }\n-        },\n-        \"components\": {\n-            \"schemas\": {\n-                \"ValidationError\": {\n-                    \"title\": \"ValidationError\",\n-                    \"required\": [\"loc\", \"msg\", \"type\"],\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"loc\": {\n-                            \"title\": \"Location\",\n-                            \"type\": \"array\",\n-                            \"items\": {\n-                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n-                            },\n-                        },\n-                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n-                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n-                    },\n-                },\n-                \"HTTPValidationError\": {\n-                    \"title\": \"HTTPValidationError\",\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"detail\": {\n-                            \"title\": \"Detail\",\n-                            \"type\": \"array\",\n-                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n-                        }\n-                    },\n-                },\n-            }\n-        },\n-    }\n\n@@ -1,170 +0,0 @@\n-import pytest\n-from dirty_equals import IsDict\n-from fastapi.testclient import TestClient\n-\n-from ...utils import needs_py39\n-\n-\n-@pytest.fixture(name=\"client\")\n-def get_client():\n-    from docs_src.dependencies.tutorial004_an_py39 import app\n-\n-    client = TestClient(app)\n-    return client\n-\n-\n-@needs_py39\n-@pytest.mark.parametrize(\n-    \"path,expected_status,expected_response\",\n-    [\n-        (\n-            \"/items\",\n-            200,\n-            {\n-                \"items\": [\n-                    {\"item_name\": \"Foo\"},\n-                    {\"item_name\": \"Bar\"},\n-                    {\"item_name\": \"Baz\"},\n-                ]\n-            },\n-        ),\n-        (\n-            \"/items?q=foo\",\n-            200,\n-            {\n-                \"items\": [\n-                    {\"item_name\": \"Foo\"},\n-                    {\"item_name\": \"Bar\"},\n-                    {\"item_name\": \"Baz\"},\n-                ],\n-                \"q\": \"foo\",\n-            },\n-        ),\n-        (\n-            \"/items?q=foo&skip=1\",\n-            200,\n-            {\"items\": [{\"item_name\": \"Bar\"}, {\"item_name\": \"Baz\"}], \"q\": \"foo\"},\n-        ),\n-        (\n-            \"/items?q=bar&limit=2\",\n-            200,\n-            {\"items\": [{\"item_name\": \"Foo\"}, {\"item_name\": \"Bar\"}], \"q\": \"bar\"},\n-        ),\n-        (\n-            \"/items?q=bar&skip=1&limit=1\",\n-            200,\n-            {\"items\": [{\"item_name\": \"Bar\"}], \"q\": \"bar\"},\n-        ),\n-        (\n-            \"/items?limit=1&q=bar&skip=1\",\n-            200,\n-            {\"items\": [{\"item_name\": \"Bar\"}], \"q\": \"bar\"},\n-        ),\n-    ],\n-)\n-def test_get(path, expected_status, expected_response, client: TestClient):\n-    response = client.get(path)\n-    assert response.status_code == expected_status\n-    assert response.json() == expected_response\n-\n-\n-@needs_py39\n-def test_openapi_schema(client: TestClient):\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\n-        \"openapi\": \"3.1.0\",\n-        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n-        \"paths\": {\n-            \"/items/\": {\n-                \"get\": {\n-                    \"responses\": {\n-                        \"200\": {\n-                            \"description\": \"Successful Response\",\n-                            \"content\": {\"application/json\": {\"schema\": {}}},\n-                        },\n-                        \"422\": {\n-                            \"description\": \"Validation Error\",\n-                            \"content\": {\n-                                \"application/json\": {\n-                                    \"schema\": {\n-                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n-                                    }\n-                                }\n-                            },\n-                        },\n-                    },\n-                    \"summary\": \"Read Items\",\n-                    \"operationId\": \"read_items_items__get\",\n-                    \"parameters\": [\n-                        {\n-                            \"required\": False,\n-                            \"schema\": IsDict(\n-                                {\n-                                    \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n-                                    \"title\": \"Q\",\n-                                }\n-                            )\n-                            | IsDict(\n-                                # TODO: remove when deprecating Pydantic v1\n-                                {\"title\": \"Q\", \"type\": \"string\"}\n-                            ),\n-                            \"name\": \"q\",\n-                            \"in\": \"query\",\n-                        },\n-                        {\n-                            \"required\": False,\n-                            \"schema\": {\n-                                \"title\": \"Skip\",\n-                                \"type\": \"integer\",\n-                                \"default\": 0,\n-                            },\n-                            \"name\": \"skip\",\n-                            \"in\": \"query\",\n-                        },\n-                        {\n-                            \"required\": False,\n-                            \"schema\": {\n-                                \"title\": \"Limit\",\n-                                \"type\": \"integer\",\n-                                \"default\": 100,\n-                            },\n-                            \"name\": \"limit\",\n-                            \"in\": \"query\",\n-                        },\n-                    ],\n-                }\n-            }\n-        },\n-        \"components\": {\n-            \"schemas\": {\n-                \"ValidationError\": {\n-                    \"title\": \"ValidationError\",\n-                    \"required\": [\"loc\", \"msg\", \"type\"],\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"loc\": {\n-                            \"title\": \"Location\",\n-                            \"type\": \"array\",\n-                            \"items\": {\n-                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n-                            },\n-                        },\n-                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n-                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n-                    },\n-                },\n-                \"HTTPValidationError\": {\n-                    \"title\": \"HTTPValidationError\",\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"detail\": {\n-                            \"title\": \"Detail\",\n-                            \"type\": \"array\",\n-                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n-                        }\n-                    },\n-                },\n-            }\n-        },\n-    }\n\n@@ -1,170 +0,0 @@\n-import pytest\n-from dirty_equals import IsDict\n-from fastapi.testclient import TestClient\n-\n-from ...utils import needs_py310\n-\n-\n-@pytest.fixture(name=\"client\")\n-def get_client():\n-    from docs_src.dependencies.tutorial004_py310 import app\n-\n-    client = TestClient(app)\n-    return client\n-\n-\n-@needs_py310\n-@pytest.mark.parametrize(\n-    \"path,expected_status,expected_response\",\n-    [\n-        (\n-            \"/items\",\n-            200,\n-            {\n-                \"items\": [\n-                    {\"item_name\": \"Foo\"},\n-                    {\"item_name\": \"Bar\"},\n-                    {\"item_name\": \"Baz\"},\n-                ]\n-            },\n-        ),\n-        (\n-            \"/items?q=foo\",\n-            200,\n-            {\n-                \"items\": [\n-                    {\"item_name\": \"Foo\"},\n-                    {\"item_name\": \"Bar\"},\n-                    {\"item_name\": \"Baz\"},\n-                ],\n-                \"q\": \"foo\",\n-            },\n-        ),\n-        (\n-            \"/items?q=foo&skip=1\",\n-            200,\n-            {\"items\": [{\"item_name\": \"Bar\"}, {\"item_name\": \"Baz\"}], \"q\": \"foo\"},\n-        ),\n-        (\n-            \"/items?q=bar&limit=2\",\n-            200,\n-            {\"items\": [{\"item_name\": \"Foo\"}, {\"item_name\": \"Bar\"}], \"q\": \"bar\"},\n-        ),\n-        (\n-            \"/items?q=bar&skip=1&limit=1\",\n-            200,\n-            {\"items\": [{\"item_name\": \"Bar\"}], \"q\": \"bar\"},\n-        ),\n-        (\n-            \"/items?limit=1&q=bar&skip=1\",\n-            200,\n-            {\"items\": [{\"item_name\": \"Bar\"}], \"q\": \"bar\"},\n-        ),\n-    ],\n-)\n-def test_get(path, expected_status, expected_response, client: TestClient):\n-    response = client.get(path)\n-    assert response.status_code == expected_status\n-    assert response.json() == expected_response\n-\n-\n-@needs_py310\n-def test_openapi_schema(client: TestClient):\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\n-        \"openapi\": \"3.1.0\",\n-        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n-        \"paths\": {\n-            \"/items/\": {\n-                \"get\": {\n-                    \"responses\": {\n-                        \"200\": {\n-                            \"description\": \"Successful Response\",\n-                            \"content\": {\"application/json\": {\"schema\": {}}},\n-                        },\n-                        \"422\": {\n-                            \"description\": \"Validation Error\",\n-                            \"content\": {\n-                                \"application/json\": {\n-                                    \"schema\": {\n-                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n-                                    }\n-                                }\n-                            },\n-                        },\n-                    },\n-                    \"summary\": \"Read Items\",\n-                    \"operationId\": \"read_items_items__get\",\n-                    \"parameters\": [\n-                        {\n-                            \"required\": False,\n-                            \"schema\": IsDict(\n-                                {\n-                                    \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n-                                    \"title\": \"Q\",\n-                                }\n-                            )\n-                            | IsDict(\n-                                # TODO: remove when deprecating Pydantic v1\n-                                {\"title\": \"Q\", \"type\": \"string\"}\n-                            ),\n-                            \"name\": \"q\",\n-                            \"in\": \"query\",\n-                        },\n-                        {\n-                            \"required\": False,\n-                            \"schema\": {\n-                                \"title\": \"Skip\",\n-                                \"type\": \"integer\",\n-                                \"default\": 0,\n-                            },\n-                            \"name\": \"skip\",\n-                            \"in\": \"query\",\n-                        },\n-                        {\n-                            \"required\": False,\n-                            \"schema\": {\n-                                \"title\": \"Limit\",\n-                                \"type\": \"integer\",\n-                                \"default\": 100,\n-                            },\n-                            \"name\": \"limit\",\n-                            \"in\": \"query\",\n-                        },\n-                    ],\n-                }\n-            }\n-        },\n-        \"components\": {\n-            \"schemas\": {\n-                \"ValidationError\": {\n-                    \"title\": \"ValidationError\",\n-                    \"required\": [\"loc\", \"msg\", \"type\"],\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"loc\": {\n-                            \"title\": \"Location\",\n-                            \"type\": \"array\",\n-                            \"items\": {\n-                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n-                            },\n-                        },\n-                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n-                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n-                    },\n-                },\n-                \"HTTPValidationError\": {\n-                    \"title\": \"HTTPValidationError\",\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"detail\": {\n-                            \"title\": \"Detail\",\n-                            \"type\": \"array\",\n-                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n-                        }\n-                    },\n-                },\n-            }\n-        },\n-    }\n\n@@ -1,12 +1,28 @@\n+import importlib\n+\n+import pytest\n from dirty_equals import IsDict\n from fastapi.testclient import TestClient\n \n-from docs_src.dependencies.tutorial006 import app\n-\n-client = TestClient(app)\n+from ...utils import needs_py39\n \n \n-def test_get_no_headers():\n+@pytest.fixture(\n+    name=\"client\",\n+    params=[\n+        \"tutorial006\",\n+        \"tutorial006_an\",\n+        pytest.param(\"tutorial006_an_py39\", marks=needs_py39),\n+    ],\n+)\n+def get_client(request: pytest.FixtureRequest):\n+    mod = importlib.import_module(f\"docs_src.dependencies.{request.param}\")\n+\n+    client = TestClient(mod.app)\n+    return client\n+\n+\n+def test_get_no_headers(client: TestClient):\n     response = client.get(\"/items/\")\n     assert response.status_code == 422, response.text\n     assert response.json() == IsDict(\n@@ -45,13 +61,13 @@ def test_get_no_headers():\n     )\n \n \n-def test_get_invalid_one_header():\n+def test_get_invalid_one_header(client: TestClient):\n     response = client.get(\"/items/\", headers={\"X-Token\": \"invalid\"})\n     assert response.status_code == 400, response.text\n     assert response.json() == {\"detail\": \"X-Token header invalid\"}\n \n \n-def test_get_invalid_second_header():\n+def test_get_invalid_second_header(client: TestClient):\n     response = client.get(\n         \"/items/\", headers={\"X-Token\": \"fake-super-secret-token\", \"X-Key\": \"invalid\"}\n     )\n@@ -59,7 +75,7 @@ def test_get_invalid_second_header():\n     assert response.json() == {\"detail\": \"X-Key header invalid\"}\n \n \n-def test_get_valid_headers():\n+def test_get_valid_headers(client: TestClient):\n     response = client.get(\n         \"/items/\",\n         headers={\n@@ -71,7 +87,7 @@ def test_get_valid_headers():\n     assert response.json() == [{\"item\": \"Foo\"}, {\"item\": \"Bar\"}]\n \n \n-def test_openapi_schema():\n+def test_openapi_schema(client: TestClient):\n     response = client.get(\"/openapi.json\")\n     assert response.status_code == 200, response.text\n     assert response.json() == {\n\n@@ -1,149 +0,0 @@\n-from dirty_equals import IsDict\n-from fastapi.testclient import TestClient\n-\n-from docs_src.dependencies.tutorial006_an import app\n-\n-client = TestClient(app)\n-\n-\n-def test_get_no_headers():\n-    response = client.get(\"/items/\")\n-    assert response.status_code == 422, response.text\n-    assert response.json() == IsDict(\n-        {\n-            \"detail\": [\n-                {\n-                    \"type\": \"missing\",\n-                    \"loc\": [\"header\", \"x-token\"],\n-                    \"msg\": \"Field required\",\n-                    \"input\": None,\n-                },\n-                {\n-                    \"type\": \"missing\",\n-                    \"loc\": [\"header\", \"x-key\"],\n-                    \"msg\": \"Field required\",\n-                    \"input\": None,\n-                },\n-            ]\n-        }\n-    ) | IsDict(\n-        # TODO: remove when deprecating Pydantic v1\n-        {\n-            \"detail\": [\n-                {\n-                    \"loc\": [\"header\", \"x-token\"],\n-                    \"msg\": \"field required\",\n-                    \"type\": \"value_error.missing\",\n-                },\n-                {\n-                    \"loc\": [\"header\", \"x-key\"],\n-                    \"msg\": \"field required\",\n-                    \"type\": \"value_error.missing\",\n-                },\n-            ]\n-        }\n-    )\n-\n-\n-def test_get_invalid_one_header():\n-    response = client.get(\"/items/\", headers={\"X-Token\": \"invalid\"})\n-    assert response.status_code == 400, response.text\n-    assert response.json() == {\"detail\": \"X-Token header invalid\"}\n-\n-\n-def test_get_invalid_second_header():\n-    response = client.get(\n-        \"/items/\", headers={\"X-Token\": \"fake-super-secret-token\", \"X-Key\": \"invalid\"}\n-    )\n-    assert response.status_code == 400, response.text\n-    assert response.json() == {\"detail\": \"X-Key header invalid\"}\n-\n-\n-def test_get_valid_headers():\n-    response = client.get(\n-        \"/items/\",\n-        headers={\n-            \"X-Token\": \"fake-super-secret-token\",\n-            \"X-Key\": \"fake-super-secret-key\",\n-        },\n-    )\n-    assert response.status_code == 200, response.text\n-    assert response.json() == [{\"item\": \"Foo\"}, {\"item\": \"Bar\"}]\n-\n-\n-def test_openapi_schema():\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\n-        \"openapi\": \"3.1.0\",\n-        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n-        \"paths\": {\n-            \"/items/\": {\n-                \"get\": {\n-                    \"responses\": {\n-                        \"200\": {\n-                            \"description\": \"Successful Response\",\n-                            \"content\": {\"application/json\": {\"schema\": {}}},\n-                        },\n-                        \"422\": {\n-                            \"description\": \"Validation Error\",\n-                            \"content\": {\n-                                \"application/json\": {\n-                                    \"schema\": {\n-                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n-                                    }\n-                                }\n-                            },\n-                        },\n-                    },\n-                    \"summary\": \"Read Items\",\n-                    \"operationId\": \"read_items_items__get\",\n-                    \"parameters\": [\n-                        {\n-                            \"required\": True,\n-                            \"schema\": {\"title\": \"X-Token\", \"type\": \"string\"},\n-                            \"name\": \"x-token\",\n-                            \"in\": \"header\",\n-                        },\n-                        {\n-                            \"required\": True,\n-                            \"schema\": {\"title\": \"X-Key\", \"type\": \"string\"},\n-                            \"name\": \"x-key\",\n-                            \"in\": \"header\",\n-                        },\n-                    ],\n-                }\n-            }\n-        },\n-        \"components\": {\n-            \"schemas\": {\n-                \"ValidationError\": {\n-                    \"title\": \"ValidationError\",\n-                    \"required\": [\"loc\", \"msg\", \"type\"],\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"loc\": {\n-                            \"title\": \"Location\",\n-                            \"type\": \"array\",\n-                            \"items\": {\n-                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n-                            },\n-                        },\n-                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n-                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n-                    },\n-                },\n-                \"HTTPValidationError\": {\n-                    \"title\": \"HTTPValidationError\",\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"detail\": {\n-                            \"title\": \"Detail\",\n-                            \"type\": \"array\",\n-                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n-                        }\n-                    },\n-                },\n-            }\n-        },\n-    }\n\n@@ -1,161 +0,0 @@\n-import pytest\n-from dirty_equals import IsDict\n-from fastapi.testclient import TestClient\n-\n-from ...utils import needs_py39\n-\n-\n-@pytest.fixture(name=\"client\")\n-def get_client():\n-    from docs_src.dependencies.tutorial006_an_py39 import app\n-\n-    client = TestClient(app)\n-    return client\n-\n-\n-@needs_py39\n-def test_get_no_headers(client: TestClient):\n-    response = client.get(\"/items/\")\n-    assert response.status_code == 422, response.text\n-    assert response.json() == IsDict(\n-        {\n-            \"detail\": [\n-                {\n-                    \"type\": \"missing\",\n-                    \"loc\": [\"header\", \"x-token\"],\n-                    \"msg\": \"Field required\",\n-                    \"input\": None,\n-                },\n-                {\n-                    \"type\": \"missing\",\n-                    \"loc\": [\"header\", \"x-key\"],\n-                    \"msg\": \"Field required\",\n-                    \"input\": None,\n-                },\n-            ]\n-        }\n-    ) | IsDict(\n-        # TODO: remove when deprecating Pydantic v1\n-        {\n-            \"detail\": [\n-                {\n-                    \"loc\": [\"header\", \"x-token\"],\n-                    \"msg\": \"field required\",\n-                    \"type\": \"value_error.missing\",\n-                },\n-                {\n-                    \"loc\": [\"header\", \"x-key\"],\n-                    \"msg\": \"field required\",\n-                    \"type\": \"value_error.missing\",\n-                },\n-            ]\n-        }\n-    )\n-\n-\n-@needs_py39\n-def test_get_invalid_one_header(client: TestClient):\n-    response = client.get(\"/items/\", headers={\"X-Token\": \"invalid\"})\n-    assert response.status_code == 400, response.text\n-    assert response.json() == {\"detail\": \"X-Token header invalid\"}\n-\n-\n-@needs_py39\n-def test_get_invalid_second_header(client: TestClient):\n-    response = client.get(\n-        \"/items/\", headers={\"X-Token\": \"fake-super-secret-token\", \"X-Key\": \"invalid\"}\n-    )\n-    assert response.status_code == 400, response.text\n-    assert response.json() == {\"detail\": \"X-Key header invalid\"}\n-\n-\n-@needs_py39\n-def test_get_valid_headers(client: TestClient):\n-    response = client.get(\n-        \"/items/\",\n-        headers={\n-            \"X-Token\": \"fake-super-secret-token\",\n-            \"X-Key\": \"fake-super-secret-key\",\n-        },\n-    )\n-    assert response.status_code == 200, response.text\n-    assert response.json() == [{\"item\": \"Foo\"}, {\"item\": \"Bar\"}]\n-\n-\n-@needs_py39\n-def test_openapi_schema(client: TestClient):\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\n-        \"openapi\": \"3.1.0\",\n-        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n-        \"paths\": {\n-            \"/items/\": {\n-                \"get\": {\n-                    \"responses\": {\n-                        \"200\": {\n-                            \"description\": \"Successful Response\",\n-                            \"content\": {\"application/json\": {\"schema\": {}}},\n-                        },\n-                        \"422\": {\n-                            \"description\": \"Validation Error\",\n-                            \"content\": {\n-                                \"application/json\": {\n-                                    \"schema\": {\n-                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n-                                    }\n-                                }\n-                            },\n-                        },\n-                    },\n-                    \"summary\": \"Read Items\",\n-                    \"operationId\": \"read_items_items__get\",\n-                    \"parameters\": [\n-                        {\n-                            \"required\": True,\n-                            \"schema\": {\"title\": \"X-Token\", \"type\": \"string\"},\n-                            \"name\": \"x-token\",\n-                            \"in\": \"header\",\n-                        },\n-                        {\n-                            \"required\": True,\n-                            \"schema\": {\"title\": \"X-Key\", \"type\": \"string\"},\n-                            \"name\": \"x-key\",\n-                            \"in\": \"header\",\n-                        },\n-                    ],\n-                }\n-            }\n-        },\n-        \"components\": {\n-            \"schemas\": {\n-                \"ValidationError\": {\n-                    \"title\": \"ValidationError\",\n-                    \"required\": [\"loc\", \"msg\", \"type\"],\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"loc\": {\n-                            \"title\": \"Location\",\n-                            \"type\": \"array\",\n-                            \"items\": {\n-                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n-                            },\n-                        },\n-                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n-                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n-                    },\n-                },\n-                \"HTTPValidationError\": {\n-                    \"title\": \"HTTPValidationError\",\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"detail\": {\n-                            \"title\": \"Detail\",\n-                            \"type\": \"array\",\n-                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n-                        }\n-                    },\n-                },\n-            }\n-        },\n-    }\n\n@@ -1,23 +1,39 @@\n+import importlib\n+\n+import pytest\n from fastapi.testclient import TestClient\n \n-from docs_src.dependencies.tutorial008b import app\n-\n-client = TestClient(app)\n+from ...utils import needs_py39\n \n \n-def test_get_no_item():\n+@pytest.fixture(\n+    name=\"client\",\n+    params=[\n+        \"tutorial008b\",\n+        \"tutorial008b_an\",\n+        pytest.param(\"tutorial008b_an_py39\", marks=needs_py39),\n+    ],\n+)\n+def get_client(request: pytest.FixtureRequest):\n+    mod = importlib.import_module(f\"docs_src.dependencies.{request.param}\")\n+\n+    client = TestClient(mod.app)\n+    return client\n+\n+\n+def test_get_no_item(client: TestClient):\n     response = client.get(\"/items/foo\")\n     assert response.status_code == 404, response.text\n     assert response.json() == {\"detail\": \"Item not found\"}\n \n \n-def test_owner_error():\n+def test_owner_error(client: TestClient):\n     response = client.get(\"/items/plumbus\")\n     assert response.status_code == 400, response.text\n     assert response.json() == {\"detail\": \"Owner error: Rick\"}\n \n \n-def test_get_item():\n+def test_get_item(client: TestClient):\n     response = client.get(\"/items/portal-gun\")\n     assert response.status_code == 200, response.text\n     assert response.json() == {\"description\": \"Gun to create portals\", \"owner\": \"Rick\"}\n\n@@ -1,23 +0,0 @@\n-from fastapi.testclient import TestClient\n-\n-from docs_src.dependencies.tutorial008b_an import app\n-\n-client = TestClient(app)\n-\n-\n-def test_get_no_item():\n-    response = client.get(\"/items/foo\")\n-    assert response.status_code == 404, response.text\n-    assert response.json() == {\"detail\": \"Item not found\"}\n-\n-\n-def test_owner_error():\n-    response = client.get(\"/items/plumbus\")\n-    assert response.status_code == 400, response.text\n-    assert response.json() == {\"detail\": \"Owner error: Rick\"}\n-\n-\n-def test_get_item():\n-    response = client.get(\"/items/portal-gun\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"description\": \"Gun to create portals\", \"owner\": \"Rick\"}\n\n@@ -1,33 +0,0 @@\n-import pytest\n-from fastapi.testclient import TestClient\n-\n-from ...utils import needs_py39\n-\n-\n-@pytest.fixture(name=\"client\")\n-def get_client():\n-    from docs_src.dependencies.tutorial008b_an_py39 import app\n-\n-    client = TestClient(app)\n-    return client\n-\n-\n-@needs_py39\n-def test_get_no_item(client: TestClient):\n-    response = client.get(\"/items/foo\")\n-    assert response.status_code == 404, response.text\n-    assert response.json() == {\"detail\": \"Item not found\"}\n-\n-\n-@needs_py39\n-def test_owner_error(client: TestClient):\n-    response = client.get(\"/items/plumbus\")\n-    assert response.status_code == 400, response.text\n-    assert response.json() == {\"detail\": \"Owner error: Rick\"}\n-\n-\n-@needs_py39\n-def test_get_item(client: TestClient):\n-    response = client.get(\"/items/portal-gun\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"description\": \"Gun to create portals\", \"owner\": \"Rick\"}\n\n@@ -1,38 +1,50 @@\n+import importlib\n+from types import ModuleType\n+\n import pytest\n from fastapi.exceptions import FastAPIError\n from fastapi.testclient import TestClient\n \n-\n-@pytest.fixture(name=\"client\")\n-def get_client():\n-    from docs_src.dependencies.tutorial008c import app\n-\n-    client = TestClient(app)\n-    return client\n+from ...utils import needs_py39\n \n \n-def test_get_no_item(client: TestClient):\n+@pytest.fixture(\n+    name=\"mod\",\n+    params=[\n+        \"tutorial008c\",\n+        \"tutorial008c_an\",\n+        pytest.param(\"tutorial008c_an_py39\", marks=needs_py39),\n+    ],\n+)\n+def get_mod(request: pytest.FixtureRequest):\n+    mod = importlib.import_module(f\"docs_src.dependencies.{request.param}\")\n+\n+    return mod\n+\n+\n+def test_get_no_item(mod: ModuleType):\n+    client = TestClient(mod.app)\n     response = client.get(\"/items/foo\")\n     assert response.status_code == 404, response.text\n     assert response.json() == {\"detail\": \"Item not found, there's only a plumbus here\"}\n \n \n-def test_get(client: TestClient):\n+def test_get(mod: ModuleType):\n+    client = TestClient(mod.app)\n     response = client.get(\"/items/plumbus\")\n     assert response.status_code == 200, response.text\n     assert response.json() == \"plumbus\"\n \n \n-def test_fastapi_error(client: TestClient):\n+def test_fastapi_error(mod: ModuleType):\n+    client = TestClient(mod.app)\n     with pytest.raises(FastAPIError) as exc_info:\n         client.get(\"/items/portal-gun\")\n     assert \"No response object was returned\" in exc_info.value.args[0]\n \n \n-def test_internal_server_error():\n-    from docs_src.dependencies.tutorial008c import app\n-\n-    client = TestClient(app, raise_server_exceptions=False)\n+def test_internal_server_error(mod: ModuleType):\n+    client = TestClient(mod.app, raise_server_exceptions=False)\n     response = client.get(\"/items/portal-gun\")\n     assert response.status_code == 500, response.text\n     assert response.text == \"Internal Server Error\"\n\n@@ -1,38 +0,0 @@\n-import pytest\n-from fastapi.exceptions import FastAPIError\n-from fastapi.testclient import TestClient\n-\n-\n-@pytest.fixture(name=\"client\")\n-def get_client():\n-    from docs_src.dependencies.tutorial008c_an import app\n-\n-    client = TestClient(app)\n-    return client\n-\n-\n-def test_get_no_item(client: TestClient):\n-    response = client.get(\"/items/foo\")\n-    assert response.status_code == 404, response.text\n-    assert response.json() == {\"detail\": \"Item not found, there's only a plumbus here\"}\n-\n-\n-def test_get(client: TestClient):\n-    response = client.get(\"/items/plumbus\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == \"plumbus\"\n-\n-\n-def test_fastapi_error(client: TestClient):\n-    with pytest.raises(FastAPIError) as exc_info:\n-        client.get(\"/items/portal-gun\")\n-    assert \"No response object was returned\" in exc_info.value.args[0]\n-\n-\n-def test_internal_server_error():\n-    from docs_src.dependencies.tutorial008c_an import app\n-\n-    client = TestClient(app, raise_server_exceptions=False)\n-    response = client.get(\"/items/portal-gun\")\n-    assert response.status_code == 500, response.text\n-    assert response.text == \"Internal Server Error\"\n\n@@ -1,44 +0,0 @@\n-import pytest\n-from fastapi.exceptions import FastAPIError\n-from fastapi.testclient import TestClient\n-\n-from ...utils import needs_py39\n-\n-\n-@pytest.fixture(name=\"client\")\n-def get_client():\n-    from docs_src.dependencies.tutorial008c_an_py39 import app\n-\n-    client = TestClient(app)\n-    return client\n-\n-\n-@needs_py39\n-def test_get_no_item(client: TestClient):\n-    response = client.get(\"/items/foo\")\n-    assert response.status_code == 404, response.text\n-    assert response.json() == {\"detail\": \"Item not found, there's only a plumbus here\"}\n-\n-\n-@needs_py39\n-def test_get(client: TestClient):\n-    response = client.get(\"/items/plumbus\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == \"plumbus\"\n-\n-\n-@needs_py39\n-def test_fastapi_error(client: TestClient):\n-    with pytest.raises(FastAPIError) as exc_info:\n-        client.get(\"/items/portal-gun\")\n-    assert \"No response object was returned\" in exc_info.value.args[0]\n-\n-\n-@needs_py39\n-def test_internal_server_error():\n-    from docs_src.dependencies.tutorial008c_an_py39 import app\n-\n-    client = TestClient(app, raise_server_exceptions=False)\n-    response = client.get(\"/items/portal-gun\")\n-    assert response.status_code == 500, response.text\n-    assert response.text == \"Internal Server Error\"\n\n@@ -1,41 +1,51 @@\n+import importlib\n+from types import ModuleType\n+\n import pytest\n from fastapi.testclient import TestClient\n \n-\n-@pytest.fixture(name=\"client\")\n-def get_client():\n-    from docs_src.dependencies.tutorial008d import app\n-\n-    client = TestClient(app)\n-    return client\n+from ...utils import needs_py39\n \n \n-def test_get_no_item(client: TestClient):\n+@pytest.fixture(\n+    name=\"mod\",\n+    params=[\n+        \"tutorial008d\",\n+        \"tutorial008d_an\",\n+        pytest.param(\"tutorial008d_an_py39\", marks=needs_py39),\n+    ],\n+)\n+def get_mod(request: pytest.FixtureRequest):\n+    mod = importlib.import_module(f\"docs_src.dependencies.{request.param}\")\n+\n+    return mod\n+\n+\n+def test_get_no_item(mod: ModuleType):\n+    client = TestClient(mod.app)\n     response = client.get(\"/items/foo\")\n     assert response.status_code == 404, response.text\n     assert response.json() == {\"detail\": \"Item not found, there's only a plumbus here\"}\n \n \n-def test_get(client: TestClient):\n+def test_get(mod: ModuleType):\n+    client = TestClient(mod.app)\n     response = client.get(\"/items/plumbus\")\n     assert response.status_code == 200, response.text\n     assert response.json() == \"plumbus\"\n \n \n-def test_internal_error(client: TestClient):\n-    from docs_src.dependencies.tutorial008d import InternalError\n-\n-    with pytest.raises(InternalError) as exc_info:\n+def test_internal_error(mod: ModuleType):\n+    client = TestClient(mod.app)\n+    with pytest.raises(mod.InternalError) as exc_info:\n         client.get(\"/items/portal-gun\")\n     assert (\n         exc_info.value.args[0] == \"The portal gun is too dangerous to be owned by Rick\"\n     )\n \n \n-def test_internal_server_error():\n-    from docs_src.dependencies.tutorial008d import app\n-\n-    client = TestClient(app, raise_server_exceptions=False)\n+def test_internal_server_error(mod: ModuleType):\n+    client = TestClient(mod.app, raise_server_exceptions=False)\n     response = client.get(\"/items/portal-gun\")\n     assert response.status_code == 500, response.text\n     assert response.text == \"Internal Server Error\"\n\n@@ -1,41 +0,0 @@\n-import pytest\n-from fastapi.testclient import TestClient\n-\n-\n-@pytest.fixture(name=\"client\")\n-def get_client():\n-    from docs_src.dependencies.tutorial008d_an import app\n-\n-    client = TestClient(app)\n-    return client\n-\n-\n-def test_get_no_item(client: TestClient):\n-    response = client.get(\"/items/foo\")\n-    assert response.status_code == 404, response.text\n-    assert response.json() == {\"detail\": \"Item not found, there's only a plumbus here\"}\n-\n-\n-def test_get(client: TestClient):\n-    response = client.get(\"/items/plumbus\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == \"plumbus\"\n-\n-\n-def test_internal_error(client: TestClient):\n-    from docs_src.dependencies.tutorial008d_an import InternalError\n-\n-    with pytest.raises(InternalError) as exc_info:\n-        client.get(\"/items/portal-gun\")\n-    assert (\n-        exc_info.value.args[0] == \"The portal gun is too dangerous to be owned by Rick\"\n-    )\n-\n-\n-def test_internal_server_error():\n-    from docs_src.dependencies.tutorial008d_an import app\n-\n-    client = TestClient(app, raise_server_exceptions=False)\n-    response = client.get(\"/items/portal-gun\")\n-    assert response.status_code == 500, response.text\n-    assert response.text == \"Internal Server Error\"\n\n@@ -1,47 +0,0 @@\n-import pytest\n-from fastapi.testclient import TestClient\n-\n-from ...utils import needs_py39\n-\n-\n-@pytest.fixture(name=\"client\")\n-def get_client():\n-    from docs_src.dependencies.tutorial008d_an_py39 import app\n-\n-    client = TestClient(app)\n-    return client\n-\n-\n-@needs_py39\n-def test_get_no_item(client: TestClient):\n-    response = client.get(\"/items/foo\")\n-    assert response.status_code == 404, response.text\n-    assert response.json() == {\"detail\": \"Item not found, there's only a plumbus here\"}\n-\n-\n-@needs_py39\n-def test_get(client: TestClient):\n-    response = client.get(\"/items/plumbus\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == \"plumbus\"\n-\n-\n-@needs_py39\n-def test_internal_error(client: TestClient):\n-    from docs_src.dependencies.tutorial008d_an_py39 import InternalError\n-\n-    with pytest.raises(InternalError) as exc_info:\n-        client.get(\"/items/portal-gun\")\n-    assert (\n-        exc_info.value.args[0] == \"The portal gun is too dangerous to be owned by Rick\"\n-    )\n-\n-\n-@needs_py39\n-def test_internal_server_error():\n-    from docs_src.dependencies.tutorial008d_an_py39 import app\n-\n-    client = TestClient(app, raise_server_exceptions=False)\n-    response = client.get(\"/items/portal-gun\")\n-    assert response.status_code == 500, response.text\n-    assert response.text == \"Internal Server Error\"\n\n@@ -1,12 +1,28 @@\n+import importlib\n+\n+import pytest\n from dirty_equals import IsDict\n from fastapi.testclient import TestClient\n \n-from docs_src.dependencies.tutorial012 import app\n-\n-client = TestClient(app)\n+from ...utils import needs_py39\n \n \n-def test_get_no_headers_items():\n+@pytest.fixture(\n+    name=\"client\",\n+    params=[\n+        \"tutorial012\",\n+        \"tutorial012_an\",\n+        pytest.param(\"tutorial012_an_py39\", marks=needs_py39),\n+    ],\n+)\n+def get_client(request: pytest.FixtureRequest):\n+    mod = importlib.import_module(f\"docs_src.dependencies.{request.param}\")\n+\n+    client = TestClient(mod.app)\n+    return client\n+\n+\n+def test_get_no_headers_items(client: TestClient):\n     response = client.get(\"/items/\")\n     assert response.status_code == 422, response.text\n     assert response.json() == IsDict(\n@@ -45,7 +61,7 @@ def test_get_no_headers_items():\n     )\n \n \n-def test_get_no_headers_users():\n+def test_get_no_headers_users(client: TestClient):\n     response = client.get(\"/users/\")\n     assert response.status_code == 422, response.text\n     assert response.json() == IsDict(\n@@ -84,19 +100,19 @@ def test_get_no_headers_users():\n     )\n \n \n-def test_get_invalid_one_header_items():\n+def test_get_invalid_one_header_items(client: TestClient):\n     response = client.get(\"/items/\", headers={\"X-Token\": \"invalid\"})\n     assert response.status_code == 400, response.text\n     assert response.json() == {\"detail\": \"X-Token header invalid\"}\n \n \n-def test_get_invalid_one_users():\n+def test_get_invalid_one_users(client: TestClient):\n     response = client.get(\"/users/\", headers={\"X-Token\": \"invalid\"})\n     assert response.status_code == 400, response.text\n     assert response.json() == {\"detail\": \"X-Token header invalid\"}\n \n \n-def test_get_invalid_second_header_items():\n+def test_get_invalid_second_header_items(client: TestClient):\n     response = client.get(\n         \"/items/\", headers={\"X-Token\": \"fake-super-secret-token\", \"X-Key\": \"invalid\"}\n     )\n@@ -104,7 +120,7 @@ def test_get_invalid_second_header_items():\n     assert response.json() == {\"detail\": \"X-Key header invalid\"}\n \n \n-def test_get_invalid_second_header_users():\n+def test_get_invalid_second_header_users(client: TestClient):\n     response = client.get(\n         \"/users/\", headers={\"X-Token\": \"fake-super-secret-token\", \"X-Key\": \"invalid\"}\n     )\n@@ -112,7 +128,7 @@ def test_get_invalid_second_header_users():\n     assert response.json() == {\"detail\": \"X-Key header invalid\"}\n \n \n-def test_get_valid_headers_items():\n+def test_get_valid_headers_items(client: TestClient):\n     response = client.get(\n         \"/items/\",\n         headers={\n@@ -124,7 +140,7 @@ def test_get_valid_headers_items():\n     assert response.json() == [{\"item\": \"Portal Gun\"}, {\"item\": \"Plumbus\"}]\n \n \n-def test_get_valid_headers_users():\n+def test_get_valid_headers_users(client: TestClient):\n     response = client.get(\n         \"/users/\",\n         headers={\n@@ -136,7 +152,7 @@ def test_get_valid_headers_users():\n     assert response.json() == [{\"username\": \"Rick\"}, {\"username\": \"Morty\"}]\n \n \n-def test_openapi_schema():\n+def test_openapi_schema(client: TestClient):\n     response = client.get(\"/openapi.json\")\n     assert response.status_code == 200, response.text\n     assert response.json() == {\n\n@@ -1,250 +0,0 @@\n-from dirty_equals import IsDict\n-from fastapi.testclient import TestClient\n-\n-from docs_src.dependencies.tutorial012_an import app\n-\n-client = TestClient(app)\n-\n-\n-def test_get_no_headers_items():\n-    response = client.get(\"/items/\")\n-    assert response.status_code == 422, response.text\n-    assert response.json() == IsDict(\n-        {\n-            \"detail\": [\n-                {\n-                    \"type\": \"missing\",\n-                    \"loc\": [\"header\", \"x-token\"],\n-                    \"msg\": \"Field required\",\n-                    \"input\": None,\n-                },\n-                {\n-                    \"type\": \"missing\",\n-                    \"loc\": [\"header\", \"x-key\"],\n-                    \"msg\": \"Field required\",\n-                    \"input\": None,\n-                },\n-            ]\n-        }\n-    ) | IsDict(\n-        # TODO: remove when deprecating Pydantic v1\n-        {\n-            \"detail\": [\n-                {\n-                    \"loc\": [\"header\", \"x-token\"],\n-                    \"msg\": \"field required\",\n-                    \"type\": \"value_error.missing\",\n-                },\n-                {\n-                    \"loc\": [\"header\", \"x-key\"],\n-                    \"msg\": \"field required\",\n-                    \"type\": \"value_error.missing\",\n-                },\n-            ]\n-        }\n-    )\n-\n-\n-def test_get_no_headers_users():\n-    response = client.get(\"/users/\")\n-    assert response.status_code == 422, response.text\n-    assert response.json() == IsDict(\n-        {\n-            \"detail\": [\n-                {\n-                    \"type\": \"missing\",\n-                    \"loc\": [\"header\", \"x-token\"],\n-                    \"msg\": \"Field required\",\n-                    \"input\": None,\n-                },\n-                {\n-                    \"type\": \"missing\",\n-                    \"loc\": [\"header\", \"x-key\"],\n-                    \"msg\": \"Field required\",\n-                    \"input\": None,\n-                },\n-            ]\n-        }\n-    ) | IsDict(\n-        # TODO: remove when deprecating Pydantic v1\n-        {\n-            \"detail\": [\n-                {\n-                    \"loc\": [\"header\", \"x-token\"],\n-                    \"msg\": \"field required\",\n-                    \"type\": \"value_error.missing\",\n-                },\n-                {\n-                    \"loc\": [\"header\", \"x-key\"],\n-                    \"msg\": \"field required\",\n-                    \"type\": \"value_error.missing\",\n-                },\n-            ]\n-        }\n-    )\n-\n-\n-def test_get_invalid_one_header_items():\n-    response = client.get(\"/items/\", headers={\"X-Token\": \"invalid\"})\n-    assert response.status_code == 400, response.text\n-    assert response.json() == {\"detail\": \"X-Token header invalid\"}\n-\n-\n-def test_get_invalid_one_users():\n-    response = client.get(\"/users/\", headers={\"X-Token\": \"invalid\"})\n-    assert response.status_code == 400, response.text\n-    assert response.json() == {\"detail\": \"X-Token header invalid\"}\n-\n-\n-def test_get_invalid_second_header_items():\n-    response = client.get(\n-        \"/items/\", headers={\"X-Token\": \"fake-super-secret-token\", \"X-Key\": \"invalid\"}\n-    )\n-    assert response.status_code == 400, response.text\n-    assert response.json() == {\"detail\": \"X-Key header invalid\"}\n-\n-\n-def test_get_invalid_second_header_users():\n-    response = client.get(\n-        \"/users/\", headers={\"X-Token\": \"fake-super-secret-token\", \"X-Key\": \"invalid\"}\n-    )\n-    assert response.status_code == 400, response.text\n-    assert response.json() == {\"detail\": \"X-Key header invalid\"}\n-\n-\n-def test_get_valid_headers_items():\n-    response = client.get(\n-        \"/items/\",\n-        headers={\n-            \"X-Token\": \"fake-super-secret-token\",\n-            \"X-Key\": \"fake-super-secret-key\",\n-        },\n-    )\n-    assert response.status_code == 200, response.text\n-    assert response.json() == [{\"item\": \"Portal Gun\"}, {\"item\": \"Plumbus\"}]\n-\n-\n-def test_get_valid_headers_users():\n-    response = client.get(\n-        \"/users/\",\n-        headers={\n-            \"X-Token\": \"fake-super-secret-token\",\n-            \"X-Key\": \"fake-super-secret-key\",\n-        },\n-    )\n-    assert response.status_code == 200, response.text\n-    assert response.json() == [{\"username\": \"Rick\"}, {\"username\": \"Morty\"}]\n-\n-\n-def test_openapi_schema():\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\n-        \"openapi\": \"3.1.0\",\n-        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n-        \"paths\": {\n-            \"/items/\": {\n-                \"get\": {\n-                    \"summary\": \"Read Items\",\n-                    \"operationId\": \"read_items_items__get\",\n-                    \"parameters\": [\n-                        {\n-                            \"required\": True,\n-                            \"schema\": {\"title\": \"X-Token\", \"type\": \"string\"},\n-                            \"name\": \"x-token\",\n-                            \"in\": \"header\",\n-                        },\n-                        {\n-                            \"required\": True,\n-                            \"schema\": {\"title\": \"X-Key\", \"type\": \"string\"},\n-                            \"name\": \"x-key\",\n-                            \"in\": \"header\",\n-                        },\n-                    ],\n-                    \"responses\": {\n-                        \"200\": {\n-                            \"description\": \"Successful Response\",\n-                            \"content\": {\"application/json\": {\"schema\": {}}},\n-                        },\n-                        \"422\": {\n-                            \"description\": \"Validation Error\",\n-                            \"content\": {\n-                                \"application/json\": {\n-                                    \"schema\": {\n-                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n-                                    }\n-                                }\n-                            },\n-                        },\n-                    },\n-                }\n-            },\n-            \"/users/\": {\n-                \"get\": {\n-                    \"summary\": \"Read Users\",\n-                    \"operationId\": \"read_users_users__get\",\n-                    \"parameters\": [\n-                        {\n-                            \"required\": True,\n-                            \"schema\": {\"title\": \"X-Token\", \"type\": \"string\"},\n-                            \"name\": \"x-token\",\n-                            \"in\": \"header\",\n-                        },\n-                        {\n-                            \"required\": True,\n-                            \"schema\": {\"title\": \"X-Key\", \"type\": \"string\"},\n-                            \"name\": \"x-key\",\n-                            \"in\": \"header\",\n-                        },\n-                    ],\n-                    \"responses\": {\n-                        \"200\": {\n-                            \"description\": \"Successful Response\",\n-                            \"content\": {\"application/json\": {\"schema\": {}}},\n-                        },\n-                        \"422\": {\n-                            \"description\": \"Validation Error\",\n-                            \"content\": {\n-                                \"application/json\": {\n-                                    \"schema\": {\n-                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n-                                    }\n-                                }\n-                            },\n-                        },\n-                    },\n-                }\n-            },\n-        },\n-        \"components\": {\n-            \"schemas\": {\n-                \"HTTPValidationError\": {\n-                    \"title\": \"HTTPValidationError\",\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"detail\": {\n-                            \"title\": \"Detail\",\n-                            \"type\": \"array\",\n-                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n-                        }\n-                    },\n-                },\n-                \"ValidationError\": {\n-                    \"title\": \"ValidationError\",\n-                    \"required\": [\"loc\", \"msg\", \"type\"],\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"loc\": {\n-                            \"title\": \"Location\",\n-                            \"type\": \"array\",\n-                            \"items\": {\n-                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n-                            },\n-                        },\n-                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n-                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n-                    },\n-                },\n-            }\n-        },\n-    }\n\n@@ -1,266 +0,0 @@\n-import pytest\n-from dirty_equals import IsDict\n-from fastapi.testclient import TestClient\n-\n-from ...utils import needs_py39\n-\n-\n-@pytest.fixture(name=\"client\")\n-def get_client():\n-    from docs_src.dependencies.tutorial012_an_py39 import app\n-\n-    client = TestClient(app)\n-    return client\n-\n-\n-@needs_py39\n-def test_get_no_headers_items(client: TestClient):\n-    response = client.get(\"/items/\")\n-    assert response.status_code == 422, response.text\n-    assert response.json() == IsDict(\n-        {\n-            \"detail\": [\n-                {\n-                    \"type\": \"missing\",\n-                    \"loc\": [\"header\", \"x-token\"],\n-                    \"msg\": \"Field required\",\n-                    \"input\": None,\n-                },\n-                {\n-                    \"type\": \"missing\",\n-                    \"loc\": [\"header\", \"x-key\"],\n-                    \"msg\": \"Field required\",\n-                    \"input\": None,\n-                },\n-            ]\n-        }\n-    ) | IsDict(\n-        # TODO: remove when deprecating Pydantic v1\n-        {\n-            \"detail\": [\n-                {\n-                    \"loc\": [\"header\", \"x-token\"],\n-                    \"msg\": \"field required\",\n-                    \"type\": \"value_error.missing\",\n-                },\n-                {\n-                    \"loc\": [\"header\", \"x-key\"],\n-                    \"msg\": \"field required\",\n-                    \"type\": \"value_error.missing\",\n-                },\n-            ]\n-        }\n-    )\n-\n-\n-@needs_py39\n-def test_get_no_headers_users(client: TestClient):\n-    response = client.get(\"/users/\")\n-    assert response.status_code == 422, response.text\n-    assert response.json() == IsDict(\n-        {\n-            \"detail\": [\n-                {\n-                    \"type\": \"missing\",\n-                    \"loc\": [\"header\", \"x-token\"],\n-                    \"msg\": \"Field required\",\n-                    \"input\": None,\n-                },\n-                {\n-                    \"type\": \"missing\",\n-                    \"loc\": [\"header\", \"x-key\"],\n-                    \"msg\": \"Field required\",\n-                    \"input\": None,\n-                },\n-            ]\n-        }\n-    ) | IsDict(\n-        # TODO: remove when deprecating Pydantic v1\n-        {\n-            \"detail\": [\n-                {\n-                    \"loc\": [\"header\", \"x-token\"],\n-                    \"msg\": \"field required\",\n-                    \"type\": \"value_error.missing\",\n-                },\n-                {\n-                    \"loc\": [\"header\", \"x-key\"],\n-                    \"msg\": \"field required\",\n-                    \"type\": \"value_error.missing\",\n-                },\n-            ]\n-        }\n-    )\n-\n-\n-@needs_py39\n-def test_get_invalid_one_header_items(client: TestClient):\n-    response = client.get(\"/items/\", headers={\"X-Token\": \"invalid\"})\n-    assert response.status_code == 400, response.text\n-    assert response.json() == {\"detail\": \"X-Token header invalid\"}\n-\n-\n-@needs_py39\n-def test_get_invalid_one_users(client: TestClient):\n-    response = client.get(\"/users/\", headers={\"X-Token\": \"invalid\"})\n-    assert response.status_code == 400, response.text\n-    assert response.json() == {\"detail\": \"X-Token header invalid\"}\n-\n-\n-@needs_py39\n-def test_get_invalid_second_header_items(client: TestClient):\n-    response = client.get(\n-        \"/items/\", headers={\"X-Token\": \"fake-super-secret-token\", \"X-Key\": \"invalid\"}\n-    )\n-    assert response.status_code == 400, response.text\n-    assert response.json() == {\"detail\": \"X-Key header invalid\"}\n-\n-\n-@needs_py39\n-def test_get_invalid_second_header_users(client: TestClient):\n-    response = client.get(\n-        \"/users/\", headers={\"X-Token\": \"fake-super-secret-token\", \"X-Key\": \"invalid\"}\n-    )\n-    assert response.status_code == 400, response.text\n-    assert response.json() == {\"detail\": \"X-Key header invalid\"}\n-\n-\n-@needs_py39\n-def test_get_valid_headers_items(client: TestClient):\n-    response = client.get(\n-        \"/items/\",\n-        headers={\n-            \"X-Token\": \"fake-super-secret-token\",\n-            \"X-Key\": \"fake-super-secret-key\",\n-        },\n-    )\n-    assert response.status_code == 200, response.text\n-    assert response.json() == [{\"item\": \"Portal Gun\"}, {\"item\": \"Plumbus\"}]\n-\n-\n-@needs_py39\n-def test_get_valid_headers_users(client: TestClient):\n-    response = client.get(\n-        \"/users/\",\n-        headers={\n-            \"X-Token\": \"fake-super-secret-token\",\n-            \"X-Key\": \"fake-super-secret-key\",\n-        },\n-    )\n-    assert response.status_code == 200, response.text\n-    assert response.json() == [{\"username\": \"Rick\"}, {\"username\": \"Morty\"}]\n-\n-\n-@needs_py39\n-def test_openapi_schema(client: TestClient):\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\n-        \"openapi\": \"3.1.0\",\n-        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n-        \"paths\": {\n-            \"/items/\": {\n-                \"get\": {\n-                    \"summary\": \"Read Items\",\n-                    \"operationId\": \"read_items_items__get\",\n-                    \"parameters\": [\n-                        {\n-                            \"required\": True,\n-                            \"schema\": {\"title\": \"X-Token\", \"type\": \"string\"},\n-                            \"name\": \"x-token\",\n-                            \"in\": \"header\",\n-                        },\n-                        {\n-                            \"required\": True,\n-                            \"schema\": {\"title\": \"X-Key\", \"type\": \"string\"},\n-                            \"name\": \"x-key\",\n-                            \"in\": \"header\",\n-                        },\n-                    ],\n-                    \"responses\": {\n-                        \"200\": {\n-                            \"description\": \"Successful Response\",\n-                            \"content\": {\"application/json\": {\"schema\": {}}},\n-                        },\n-                        \"422\": {\n-                            \"description\": \"Validation Error\",\n-                            \"content\": {\n-                                \"application/json\": {\n-                                    \"schema\": {\n-                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n-                                    }\n-                                }\n-                            },\n-                        },\n-                    },\n-                }\n-            },\n-            \"/users/\": {\n-                \"get\": {\n-                    \"summary\": \"Read Users\",\n-                    \"operationId\": \"read_users_users__get\",\n-                    \"parameters\": [\n-                        {\n-                            \"required\": True,\n-                            \"schema\": {\"title\": \"X-Token\", \"type\": \"string\"},\n-                            \"name\": \"x-token\",\n-                            \"in\": \"header\",\n-                        },\n-                        {\n-                            \"required\": True,\n-                            \"schema\": {\"title\": \"X-Key\", \"type\": \"string\"},\n-                            \"name\": \"x-key\",\n-                            \"in\": \"header\",\n-                        },\n-                    ],\n-                    \"responses\": {\n-                        \"200\": {\n-                            \"description\": \"Successful Response\",\n-                            \"content\": {\"application/json\": {\"schema\": {}}},\n-                        },\n-                        \"422\": {\n-                            \"description\": \"Validation Error\",\n-                            \"content\": {\n-                                \"application/json\": {\n-                                    \"schema\": {\n-                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n-                                    }\n-                                }\n-                            },\n-                        },\n-                    },\n-                }\n-            },\n-        },\n-        \"components\": {\n-            \"schemas\": {\n-                \"HTTPValidationError\": {\n-                    \"title\": \"HTTPValidationError\",\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"detail\": {\n-                            \"title\": \"Detail\",\n-                            \"type\": \"array\",\n-                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n-                        }\n-                    },\n-                },\n-                \"ValidationError\": {\n-                    \"title\": \"ValidationError\",\n-                    \"required\": [\"loc\", \"msg\", \"type\"],\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"loc\": {\n-                            \"title\": \"Location\",\n-                            \"type\": \"array\",\n-                            \"items\": {\n-                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n-                            },\n-                        },\n-                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n-                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n-                    },\n-                },\n-            }\n-        },\n-    }\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
