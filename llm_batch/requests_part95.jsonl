{"custom_id": "requests#2d4a89f5dc561dbf062ec5c85d6f6ca32a511042", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 17 | Lines Deleted: 7 | Files Changed: 10 | Hunks: 19 | Methods Changed: 5 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 24 | Churn Cumulative: 24463 | Contributors (this commit): 280 | Commits (past 90d): 58 | Contributors (cumulative): 449 | DMM Complexity: 0.0\n\nDIFF:\n@@ -43,6 +43,7 @@ class AuthBase(object):\n \n class HTTPBasicAuth(AuthBase):\n     \"\"\"Attaches HTTP Basic Authentication to the given Request object.\"\"\"\n+\n     def __init__(self, username, password):\n         self.username = username\n         self.password = password\n@@ -63,6 +64,7 @@ class HTTPBasicAuth(AuthBase):\n \n class HTTPProxyAuth(HTTPBasicAuth):\n     \"\"\"Attaches HTTP Proxy Authentication to a given Request object.\"\"\"\n+\n     def __call__(self, r):\n         r.headers['Proxy-Authorization'] = _basic_auth_str(self.username, self.password)\n         return r\n@@ -70,6 +72,7 @@ class HTTPProxyAuth(HTTPBasicAuth):\n \n class HTTPDigestAuth(AuthBase):\n     \"\"\"Attaches HTTP Digest Authentication to the given Request object.\"\"\"\n+\n     def __init__(self, username, password):\n         self.username = username\n         self.password = password\n\n@@ -178,6 +178,7 @@ class RequestsCookieJar(cookielib.CookieJar, collections.MutableMapping):\n \n     .. warning:: dictionary operations that are normally O(1) may be O(n).\n     \"\"\"\n+\n     def get(self, name, default=None, domain=None, path=None):\n         \"\"\"Dict-like get() that also supports optional domain and path args in\n         order to resolve naming collisions from using one cookie jar over\n\n@@ -14,6 +14,7 @@ Available hooks:\n \"\"\"\n HOOKS = ['response']\n \n+\n def default_hooks():\n     return dict((event, []) for event in HOOKS)\n \n\n@@ -209,6 +209,7 @@ class Request(RequestHooksMixin):\n       <PreparedRequest [GET]>\n \n     \"\"\"\n+\n     def __init__(self, method=None, url=None, headers=None, files=None,\n         data=None, params=None, auth=None, cookies=None, hooks=None, json=None):\n \n\n@@ -195,7 +195,7 @@ class SessionRedirectMixin(object):\n \n         if 'Authorization' in headers:\n             # If we get redirected to a new host, we should strip out any\n-            # authentication headers.\n+            # authentication headers.\n             original_parsed = urlparse(response.request.url)\n             redirect_parsed = urlparse(url)\n \n@@ -376,7 +376,6 @@ class Session(SessionRedirectMixin):\n         merged_cookies = merge_cookies(\n             merge_cookies(RequestsCookieJar(), self.cookies), cookies)\n \n-\n         # Set environment's basic authentication if not explicitly set.\n         auth = request.auth\n         if self.trust_env and not auth and not self.auth:\n\n@@ -41,6 +41,7 @@ class CaseInsensitiveDict(collections.MutableMapping):\n     behavior is undefined.\n \n     \"\"\"\n+\n     def __init__(self, data=None, **kwargs):\n         self._store = OrderedDict()\n         if data is None:\n@@ -87,6 +88,7 @@ class CaseInsensitiveDict(collections.MutableMapping):\n     def __repr__(self):\n         return str(dict(self.items()))\n \n+\n class LookupDict(dict):\n     \"\"\"Dictionary lookup object.\"\"\"\n \n\n@@ -734,6 +734,7 @@ def to_native_string(string, encoding='ascii'):\n \n     return out\n \n+\n # Moved outside of function to avoid recompile every call\n _CLEAN_HEADER_REGEX_BYTE = re.compile(b'^\\\\S[^\\\\r\\\\n]*$|^$')\n _CLEAN_HEADER_REGEX_STR = re.compile(r'^\\S[^\\r\\n]*$|^$')\n@@ -758,6 +759,7 @@ def check_header_validity(header):\n         raise InvalidHeader(\"Header value %s must be of type str or bytes, \"\n                             \"not %s\" % (value, type(value)))\n \n+\n def urldefragauth(url):\n     \"\"\"\n     Given a url remove the fragment and the authentication part\n\n@@ -564,8 +564,7 @@ class TestRequests:\n         assert post1.status_code == 200\n \n         with open('requirements.txt') as f:\n-            post2 = requests.post(url,\n-                data={'some': 'data'}, files={'some': f})\n+            post2 = requests.post(url, data={'some': 'data'}, files={'some': f})\n         assert post2.status_code == 200\n \n         post4 = requests.post(url, data='[{\"some\": \"json\"}]')\n@@ -940,8 +939,7 @@ class TestRequests:\n     def test_time_elapsed_blank(self, httpbin):\n         r = requests.get(httpbin('get'))\n         td = r.elapsed\n-        total_seconds = ((td.microseconds + (td.seconds + td.days * 24 * 3600)\n-                         * 10**6) / 10**6)\n+        total_seconds = ((td.microseconds + (td.seconds + td.days * 24 * 3600) * 10**6) / 10**6)\n         assert total_seconds > 0.0\n \n     def test_response_is_iterable(self):\n\n@@ -6,11 +6,14 @@ import pytest\n import requests\n from tests.testserver.server import Server\n \n+\n class TestTestServer:\n+\n     def test_basic(self):\n         \"\"\"messages are sent and received properly\"\"\"\n         question = b\"sucess?\"\n         answer = b\"yeah, success\"\n+\n         def handler(sock):\n             text = sock.recv(1000)\n             assert text == question\n@@ -121,7 +124,6 @@ class TestTestServer:\n \n         assert server.handler_results[0] == b''\n \n-\n     def test_request_recovery_with_bigger_timeout(self):\n         \"\"\"a biggest timeout can be specified\"\"\"\n         server = Server.basic_response_server(request_timeout=3)\n\n@@ -389,6 +389,7 @@ def test_iter_slices(value, length):\n     else:\n         assert len(list(iter_slices(value, 1))) == length\n \n+\n @pytest.mark.parametrize(\n     'value, expected', (\n         (\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#5453b88f8fa97e5ff0b7e093802eb6a8b2d90a23", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 2 | Files Changed: 2 | Hunks: 2 | Methods Changed: 2 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 9702 | Contributors (this commit): 163 | Commits (past 90d): 16 | Contributors (cumulative): 166 | DMM Complexity: None\n\nDIFF:\n@@ -662,7 +662,7 @@ class Response(object):\n         chunk_size must be of type int or None. A value of None will\n         function differently depending on the value of `stream`.\n         stream=True will read data as it arrives in whatever size the\n-        chunks are recieved. If stream=False, data is returned as\n+        chunks are received. If stream=False, data is returned as\n         a single chunk.\n \n         If decode_unicode is True, content will be decoded using the best\n\n@@ -13,7 +13,7 @@ class TestTestServer:\n \n     def test_basic(self):\n         \"\"\"messages are sent and received properly\"\"\"\n-        question = b\"sucess?\"\n+        question = b\"success?\"\n         answer = b\"yeah, success\"\n \n         def handler(sock):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#c69e3eed312404e469dae250592ea6c5b20ebc64", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 9496 | Contributors (this commit): 162 | Commits (past 90d): 13 | Contributors (cumulative): 162 | DMM Complexity: None\n\nDIFF:\n@@ -868,6 +868,6 @@ class Response(object):\n         *Note: Should not normally need to be called explicitly.*\n         \"\"\"\n         if not self._content_consumed:\n-            return self.raw.close()\n+            self.raw.close()\n \n         return self.raw.release_conn()\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#a2e41ba1f1ae81b2ed224030df908a1432ad435e", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 650 | Contributors (this commit): 16 | Commits (past 90d): 3 | Contributors (cumulative): 16 | DMM Complexity: None\n\nDIFF:\n@@ -41,8 +41,8 @@ is at <http://python-requests.org>.\n \"\"\"\n \n __title__ = 'requests'\n-__version__ = '2.10.0'\n-__build__ = 0x021000\n+__version__ = '2.11.0'\n+__build__ = 0x021100\n __author__ = 'Kenneth Reitz'\n __license__ = 'Apache 2.0'\n __copyright__ = 'Copyright 2016 Kenneth Reitz'\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#542fbbc67fd07819551012295ff5468eb2714f62", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 113 | Lines Deleted: 11 | Files Changed: 5 | Hunks: 48 | Methods Changed: 48 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 124 | Churn Cumulative: 9407 | Contributors (this commit): 179 | Commits (past 90d): 23 | Contributors (cumulative): 243 | DMM Complexity: 1.0\n\nDIFF:\n@@ -168,6 +168,7 @@ class HTTPAdapter(BaseAdapter):\n         :param proxy: The proxy to return a urllib3 ProxyManager for.\n         :param proxy_kwargs: Extra keyword arguments used to configure the Proxy Manager.\n         :returns: ProxyManager\n+        :rtype: requests.packages.urllib3.ProxyManager\n         \"\"\"\n         if proxy in self.proxy_manager:\n             manager = self.proxy_manager[proxy]\n@@ -244,6 +245,7 @@ class HTTPAdapter(BaseAdapter):\n \n         :param req: The :class:`PreparedRequest <PreparedRequest>` used to generate the response.\n         :param resp: The urllib3 response object.\n+        :rtype: requests.Response\n         \"\"\"\n         response = Response()\n \n@@ -279,6 +281,7 @@ class HTTPAdapter(BaseAdapter):\n \n         :param url: The URL to connect to.\n         :param proxies: (optional) A Requests-style dictionary of proxies used on this request.\n+        :rtype: requests.packages.urllib3.ConnectionPool\n         \"\"\"\n         proxy = select_proxy(url, proxies)\n \n@@ -316,6 +319,7 @@ class HTTPAdapter(BaseAdapter):\n \n         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n         :param proxies: A dictionary of schemes or schemes and hosts to proxy URLs.\n+        :rtype: str\n         \"\"\"\n         proxy = select_proxy(request.url, proxies)\n         scheme = urlparse(request.url).scheme\n@@ -357,6 +361,7 @@ class HTTPAdapter(BaseAdapter):\n         :class:`HTTPAdapter <requests.adapters.HTTPAdapter>`.\n \n         :param proxies: The url of the proxy being used for this request.\n+        :rtype: dict\n         \"\"\"\n         headers = {}\n         username, password = get_auth_from_url(proxy)\n@@ -379,6 +384,7 @@ class HTTPAdapter(BaseAdapter):\n         :param verify: (optional) Whether to verify SSL certificates.\n         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n         :param proxies: (optional) The proxies dictionary to apply to the request.\n+        :rtype: requests.Response\n         \"\"\"\n \n         conn = self.get_connection(request.url, proxies)\n\n@@ -90,6 +90,9 @@ class HTTPDigestAuth(AuthBase):\n             self._thread_local.num_401_calls = None\n \n     def build_digest_header(self, method, url):\n+        \"\"\"\n+        :rtype: str\n+        \"\"\"\n \n         realm = self._thread_local.chal['realm']\n         nonce = self._thread_local.chal['nonce']\n@@ -182,7 +185,11 @@ class HTTPDigestAuth(AuthBase):\n             self._thread_local.num_401_calls = 1\n \n     def handle_401(self, r, **kwargs):\n-        \"\"\"Takes the given response and tries digest-auth, if needed.\"\"\"\n+        \"\"\"\n+        Takes the given response and tries digest-auth, if needed.\n+\n+        :rtype: requests.Response\n+        \"\"\"\n \n         if self._thread_local.pos is not None:\n             # Rewind the file position indicator of the body to where\n\n@@ -134,7 +134,11 @@ def extract_cookies_to_jar(jar, request, response):\n \n \n def get_cookie_header(jar, request):\n-    \"\"\"Produce an appropriate Cookie header string to be sent with `request`, or None.\"\"\"\n+    \"\"\"\n+    Produce an appropriate Cookie header string to be sent with `request`, or None.\n+\n+    :rtype: str\n+    \"\"\"\n     r = MockRequest(request)\n     jar.add_cookie_header(r)\n     return r.get_new_headers().get('Cookie')\n@@ -283,6 +287,8 @@ class RequestsCookieJar(cookielib.CookieJar, collections.MutableMapping):\n     def multiple_domains(self):\n         \"\"\"Returns True if there are multiple domains in the jar.\n         Returns False otherwise.\n+\n+        :rtype: bool\n         \"\"\"\n         domains = []\n         for cookie in iter(self):\n@@ -295,6 +301,8 @@ class RequestsCookieJar(cookielib.CookieJar, collections.MutableMapping):\n         \"\"\"Takes as an argument an optional domain and path and returns a plain\n         old Python dict of name-value pairs of cookies that meet the\n         requirements.\n+\n+        :rtype: dict\n         \"\"\"\n         dictionary = {}\n         for cookie in iter(self):\n\n@@ -214,6 +214,8 @@ class SessionRedirectMixin(object):\n \n         This method also replaces the Proxy-Authorization header where\n         necessary.\n+\n+        :rtype: dict\n         \"\"\"\n         headers = prepared_request.headers\n         url = prepared_request.url\n@@ -360,6 +362,7 @@ class Session(SessionRedirectMixin):\n \n         :param request: :class:`Request` instance to prepare with this\n             session's settings.\n+        :rtype: requests.PreparedRequest\n         \"\"\"\n         cookies = request.cookies or {}\n \n@@ -477,6 +480,7 @@ class Session(SessionRedirectMixin):\n \n         :param url: URL for the new :class:`Request` object.\n         :param \\*\\*kwargs: Optional arguments that ``request`` takes.\n+        :rtype: requests.Response\n         \"\"\"\n \n         kwargs.setdefault('allow_redirects', True)\n@@ -487,6 +491,7 @@ class Session(SessionRedirectMixin):\n \n         :param url: URL for the new :class:`Request` object.\n         :param \\*\\*kwargs: Optional arguments that ``request`` takes.\n+        :rtype: requests.Response\n         \"\"\"\n \n         kwargs.setdefault('allow_redirects', True)\n@@ -497,6 +502,7 @@ class Session(SessionRedirectMixin):\n \n         :param url: URL for the new :class:`Request` object.\n         :param \\*\\*kwargs: Optional arguments that ``request`` takes.\n+        :rtype: requests.Response\n         \"\"\"\n \n         kwargs.setdefault('allow_redirects', False)\n@@ -509,6 +515,7 @@ class Session(SessionRedirectMixin):\n         :param data: (optional) Dictionary, bytes, or file-like object to send in the body of the :class:`Request`.\n         :param json: (optional) json to send in the body of the :class:`Request`.\n         :param \\*\\*kwargs: Optional arguments that ``request`` takes.\n+        :rtype: requests.Response\n         \"\"\"\n \n         return self.request('POST', url, data=data, json=json, **kwargs)\n@@ -519,6 +526,7 @@ class Session(SessionRedirectMixin):\n         :param url: URL for the new :class:`Request` object.\n         :param data: (optional) Dictionary, bytes, or file-like object to send in the body of the :class:`Request`.\n         :param \\*\\*kwargs: Optional arguments that ``request`` takes.\n+        :rtype: requests.Response\n         \"\"\"\n \n         return self.request('PUT', url, data=data, **kwargs)\n@@ -529,6 +537,7 @@ class Session(SessionRedirectMixin):\n         :param url: URL for the new :class:`Request` object.\n         :param data: (optional) Dictionary, bytes, or file-like object to send in the body of the :class:`Request`.\n         :param \\*\\*kwargs: Optional arguments that ``request`` takes.\n+        :rtype: requests.Response\n         \"\"\"\n \n         return self.request('PATCH', url,  data=data, **kwargs)\n@@ -538,12 +547,17 @@ class Session(SessionRedirectMixin):\n \n         :param url: URL for the new :class:`Request` object.\n         :param \\*\\*kwargs: Optional arguments that ``request`` takes.\n+        :rtype: requests.Response\n         \"\"\"\n \n         return self.request('DELETE', url, **kwargs)\n \n     def send(self, request, **kwargs):\n-        \"\"\"Send a given PreparedRequest.\"\"\"\n+        \"\"\"\n+        Send a given PreparedRequest.\n+\n+        :rtype: requests.Response\n+        \"\"\"\n         # Set defaults that the hooks can utilize to ensure they always have\n         # the correct parameters to reproduce the previous request.\n         kwargs.setdefault('stream', self.stream)\n@@ -615,7 +629,11 @@ class Session(SessionRedirectMixin):\n         return r\n \n     def merge_environment_settings(self, url, proxies, stream, verify, cert):\n-        \"\"\"Check the environment and merge it with some settings.\"\"\"\n+        \"\"\"\n+        Check the environment and merge it with some settings.\n+\n+        :rtype: dict\n+        \"\"\"\n         # Gather clues from the surrounding environment.\n         if self.trust_env:\n             # Set environment's proxies.\n@@ -639,7 +657,11 @@ class Session(SessionRedirectMixin):\n                 'cert': cert}\n \n     def get_adapter(self, url):\n-        \"\"\"Returns the appropriate connection adapter for the given URL.\"\"\"\n+        \"\"\"\n+        Returns the appropriate connection adapter for the given URL.\n+\n+        :rtype: requests.adapters.BaseAdapter\n+        \"\"\"\n         for (prefix, adapter) in self.adapters.items():\n \n             if url.lower().startswith(prefix):\n@@ -680,6 +702,10 @@ class Session(SessionRedirectMixin):\n \n \n def session():\n-    \"\"\"Returns a :class:`Session` for context-management.\"\"\"\n+    \"\"\"\n+    Returns a :class:`Session` for context-management.\n+\n+    :rtype: Session\n+    \"\"\"\n \n     return Session()\n\n@@ -164,6 +164,8 @@ def from_key_val_list(value):\n         ValueError: need more than 1 value to unpack\n         >>> from_key_val_list({'key': 'val'})\n         OrderedDict([('key', 'val')])\n+\n+    :rtype: OrderedDict\n     \"\"\"\n     if value is None:\n         return None\n@@ -186,6 +188,8 @@ def to_key_val_list(value):\n         [('key', 'val')]\n         >>> to_key_val_list('string')\n         ValueError: cannot encode objects that are not 2-tuples.\n+\n+    :rtype: list\n     \"\"\"\n     if value is None:\n         return None\n@@ -221,6 +225,7 @@ def parse_list_header(value):\n \n     :param value: a string with a list header.\n     :return: :class:`list`\n+    :rtype: list\n     \"\"\"\n     result = []\n     for item in _parse_list_header(value):\n@@ -251,6 +256,7 @@ def parse_dict_header(value):\n \n     :param value: a string with a dict header.\n     :return: :class:`dict`\n+    :rtype: dict\n     \"\"\"\n     result = {}\n     for item in _parse_list_header(value):\n@@ -271,6 +277,7 @@ def unquote_header_value(value, is_filename=False):\n     using for quoting.\n \n     :param value: the header value to unquote.\n+    :rtype: str\n     \"\"\"\n     if value and value[0] == value[-1] == '\"':\n         # this is not the real unquoting, but fixing this so that the\n@@ -293,6 +300,7 @@ def dict_from_cookiejar(cj):\n     \"\"\"Returns a key/value dictionary from a CookieJar.\n \n     :param cj: CookieJar object to extract cookies from.\n+    :rtype: dict\n     \"\"\"\n \n     cookie_dict = {}\n@@ -308,6 +316,7 @@ def add_dict_to_cookiejar(cj, cookie_dict):\n \n     :param cj: CookieJar to insert cookies into.\n     :param cookie_dict: Dict of key/values to insert into CookieJar.\n+    :rtype: CookieJar\n     \"\"\"\n \n     cj2 = cookiejar_from_dict(cookie_dict)\n@@ -339,6 +348,7 @@ def get_encoding_from_headers(headers):\n     \"\"\"Returns encodings from given HTTP Header Dict.\n \n     :param headers: dictionary to extract encoding from.\n+    :rtype: str\n     \"\"\"\n \n     content_type = headers.get('content-type')\n@@ -399,6 +409,8 @@ def get_unicode_from_response(r):\n \n     1. charset from content-type\n     2. fall back and replace all unicode characters\n+\n+    :rtype: str\n     \"\"\"\n     warnings.warn((\n         'In requests 3.0, get_unicode_from_response will be removed. For '\n@@ -433,6 +445,8 @@ UNRESERVED_SET = frozenset(\n def unquote_unreserved(uri):\n     \"\"\"Un-escape any percent-escape sequences in a URI that are unreserved\n     characters. This leaves all reserved, illegal and non-ASCII bytes encoded.\n+\n+    :rtype: str\n     \"\"\"\n     parts = uri.split('%')\n     for i in range(1, len(parts)):\n@@ -457,6 +471,8 @@ def requote_uri(uri):\n \n     This function passes the given URI through an unquote/quote cycle to\n     ensure that it is fully and consistently quoted.\n+\n+    :rtype: str\n     \"\"\"\n     safe_with_percent = \"!#$%&'()*+,/:;=?@[]~\"\n     safe_without_percent = \"!#$&'()*+,/:;=?@[]~\"\n@@ -477,6 +493,8 @@ def address_in_network(ip, net):\n \n     Example: returns True if ip = 192.168.1.1 and net = 192.168.1.0/24\n              returns False if ip = 192.168.1.1 and net = 192.168.100.0/24\n+\n+    :rtype: bool\n     \"\"\"\n     ipaddr = struct.unpack('=L', socket.inet_aton(ip))[0]\n     netaddr, bits = net.split('/')\n@@ -489,12 +507,17 @@ def dotted_netmask(mask):\n     \"\"\"Converts mask from /xx format to xxx.xxx.xxx.xxx\n \n     Example: if mask is 24 function returns 255.255.255.0\n+\n+    :rtype: str\n     \"\"\"\n     bits = 0xffffffff ^ (1 << 32 - mask) - 1\n     return socket.inet_ntoa(struct.pack('>I', bits))\n \n \n def is_ipv4_address(string_ip):\n+    \"\"\"\n+    :rtype: bool\n+    \"\"\"\n     try:\n         socket.inet_aton(string_ip)\n     except socket.error:\n@@ -503,7 +526,11 @@ def is_ipv4_address(string_ip):\n \n \n def is_valid_cidr(string_network):\n-    \"\"\"Very simple check of the cidr format in no_proxy variable\"\"\"\n+    \"\"\"\n+    Very simple check of the cidr format in no_proxy variable.\n+\n+    :rtype: bool\n+    \"\"\"\n     if string_network.count('/') == 1:\n         try:\n             mask = int(string_network.split('/')[1])\n@@ -523,7 +550,11 @@ def is_valid_cidr(string_network):\n \n \n def should_bypass_proxies(url):\n-    \"\"\"Returns whether we should bypass proxies or not.\"\"\"\n+    \"\"\"\n+    Returns whether we should bypass proxies or not.\n+\n+    :rtype: bool\n+    \"\"\"\n     get_proxy = lambda k: os.environ.get(k) or os.environ.get(k.upper())\n \n     # First check whether no_proxy is defined. If it is, check that the URL\n@@ -573,7 +604,11 @@ def should_bypass_proxies(url):\n \n \n def get_environ_proxies(url):\n-    \"\"\"Return a dict of environment proxies.\"\"\"\n+    \"\"\"\n+    Return a dict of environment proxies.\n+\n+    :rtype: dict\n+    \"\"\"\n     if should_bypass_proxies(url):\n         return {}\n     else:\n@@ -607,11 +642,18 @@ def select_proxy(url, proxies):\n \n \n def default_user_agent(name=\"python-requests\"):\n-    \"\"\"Return a string representing the default user agent.\"\"\"\n+    \"\"\"\n+    Return a string representing the default user agent.\n+\n+    :rtype: str\n+    \"\"\"\n     return '%s/%s' % (name, __version__)\n \n \n def default_headers():\n+    \"\"\"\n+    :rtype: requests.structures.CaseInsensitiveDict\n+    \"\"\"\n     return CaseInsensitiveDict({\n         'User-Agent': default_user_agent(),\n         'Accept-Encoding': ', '.join(('gzip', 'deflate')),\n@@ -624,6 +666,8 @@ def parse_header_links(value):\n     \"\"\"Return a dict of parsed link headers proxies.\n \n     i.e. Link: <http:/.../front.jpeg>; rel=front; type=\"image/jpeg\",<http://.../back.jpeg>; rel=back;type=\"image/jpeg\"\n+\n+    :rtype: list\n     \"\"\"\n \n     links = []\n@@ -658,6 +702,9 @@ _null3 = _null * 3\n \n \n def guess_json_utf(data):\n+    \"\"\"\n+    :rtype: str\n+    \"\"\"\n     # JSON always starts with two ASCII characters, so detection is as\n     # easy as counting the nulls and from their location and count\n     # determine the encoding. Also detect a BOM, if present.\n@@ -689,6 +736,8 @@ def guess_json_utf(data):\n def prepend_scheme_if_needed(url, new_scheme):\n     \"\"\"Given a URL that may or may not have a scheme, prepend the given scheme.\n     Does not replace a present scheme with the one provided as an argument.\n+\n+    :rtype: str\n     \"\"\"\n     scheme, netloc, path, params, query, fragment = urlparse(url, new_scheme)\n \n@@ -704,6 +753,8 @@ def prepend_scheme_if_needed(url, new_scheme):\n def get_auth_from_url(url):\n     \"\"\"Given a url with authentication components, extract them into a tuple of\n     username,password.\n+\n+    :rtype: (str,str)\n     \"\"\"\n     parsed = urlparse(url)\n \n@@ -757,7 +808,11 @@ def check_header_validity(header):\n \n \n def urldefragauth(url):\n-    \"\"\"Given a url remove the fragment and the authentication part\"\"\"\n+    \"\"\"\n+    Given a url remove the fragment and the authentication part.\n+\n+    :rtype: str\n+    \"\"\"\n     scheme, netloc, path, params, query, fragment = urlparse(url)\n \n     # see func:`prepend_scheme_if_needed`\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#d7f56ba9383575a6b7d361db0123a93c70a2b42f", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 5 | Lines Deleted: 19 | Files Changed: 2 | Hunks: 4 | Methods Changed: 2 | Complexity Δ (Sum/Max): -1/0 | Churn Δ: 24 | Churn Cumulative: 5964 | Contributors (this commit): 94 | Commits (past 90d): 24 | Contributors (cumulative): 108 | DMM Complexity: 0.2857142857142857\n\nDIFF:\n@@ -367,20 +367,13 @@ def get_encoding_from_headers(headers):\n \n def stream_decode_response_unicode(iterator, r):\n     \"\"\"Stream decodes a iterator.\"\"\"\n-    encoding = r.encoding\n \n-    if encoding is None:\n-        encoding = r.apparent_encoding\n-\n-    try:\n-        decoder = codecs.getincrementaldecoder(encoding)(errors='replace')\n-    except (LookupError, TypeError):\n-        # A LookupError is raised if the encoding was not found which could\n-        # indicate a misspelling or similar mistake.\n-        #\n-        # A TypeError can be raised if encoding is None\n-        raise UnicodeError(\"Unable to decode contents with encoding %s.\" % encoding)\n+    if r.encoding is None:\n+        for item in iterator:\n+            yield item\n+        return\n \n+    decoder = codecs.getincrementaldecoder(r.encoding)(errors='replace')\n     for chunk in iterator:\n         rv = decoder.decode(chunk)\n         if rv:\n\n@@ -973,13 +973,6 @@ class TestRequests:\n         chunks = r.iter_content(decode_unicode=True)\n         assert all(isinstance(chunk, str) for chunk in chunks)\n \n-        # check for encoding value of None\n-        r = requests.Response()\n-        r.raw = io.BytesIO(b'the content')\n-        r.encoding = None\n-        chunks = r.iter_content(decode_unicode=True)\n-        assert all(isinstance(chunk, str) for chunk in chunks)\n-\n     def test_response_reason_unicode(self):\n         # check for unicode HTTP status\n         r = requests.Response()\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#e50c61bc866ff4358e6ef320b4f1f31b979bd45e", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 39 | Lines Deleted: 3 | Files Changed: 2 | Hunks: 2 | Methods Changed: 3 | Complexity Δ (Sum/Max): 5/5 | Churn Δ: 42 | Churn Cumulative: 6642 | Contributors (this commit): 105 | Commits (past 90d): 20 | Contributors (cumulative): 120 | DMM Complexity: 0.9615384615384616\n\nDIFF:\n@@ -140,9 +140,10 @@ class SessionRedirectMixin(object):\n \n             # https://github.com/kennethreitz/requests/issues/1084\n             if resp.status_code not in (codes.temporary_redirect, codes.permanent_redirect):\n-                if 'Content-Length' in prepared_request.headers:\n-                    del prepared_request.headers['Content-Length']\n-\n+                # https://github.com/kennethreitz/requests/issues/3490\n+                purged_headers = ('Content-Length', 'Content-Type', 'Transfer-Encoding')\n+                for header in purged_headers:\n+                    prepared_request.headers.pop(header, None)\n                 prepared_request.body = None\n \n             headers = prepared_request.headers\n\n@@ -221,6 +221,41 @@ class TestRequests:\n         assert r.history[0].status_code == 303\n         assert r.history[0].is_redirect\n \n+    def test_header_and_body_removal_on_redirect(self, httpbin):\n+        purged_headers = ('Content-Length', 'Content-Type')\n+        ses = requests.Session()\n+        req = requests.Request('POST', httpbin('post'), data={'test': 'data'})\n+        prep = ses.prepare_request(req)\n+        resp = ses.send(prep)\n+\n+        # Mimic a redirect response\n+        resp.status_code = 302\n+        resp.headers['location'] = 'get'\n+\n+        # Run request through resolve_redirects\n+        next_resp = next(ses.resolve_redirects(resp, prep))\n+        assert next_resp.request.body is None\n+        for header in purged_headers:\n+            assert header not in next_resp.request.headers\n+\n+    def test_transfer_enc_removal_on_redirect(self, httpbin):\n+        purged_headers = ('Transfer-Encoding', 'Content-Type')\n+        ses = requests.Session()\n+        req = requests.Request('POST', httpbin('post'), data=(b'x' for x in range(1)))\n+        prep = ses.prepare_request(req)\n+        assert 'Transfer-Encoding' in prep.headers\n+        resp = ses.send(prep)\n+\n+        # Mimic a redirect response\n+        resp.status_code = 302\n+        resp.headers['location'] = 'get'\n+\n+        # Run request through resolve_redirect\n+        next_resp = next(ses.resolve_redirects(resp, prep))\n+        assert next_resp.request.body is None\n+        for header in purged_headers:\n+            assert header not in next_resp.request.headers\n+\n     def test_HTTP_200_OK_GET_WITH_PARAMS(self, httpbin):\n         heads = {'User-agent': 'Mozilla/5.0'}\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#4d5091c2875d487c1d5ca958ed8e6f3397e042fe", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 7 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 9 | Churn Cumulative: 3437 | Contributors (this commit): 44 | Commits (past 90d): 14 | Contributors (cumulative): 44 | DMM Complexity: 1.0\n\nDIFF:\n@@ -244,11 +244,16 @@ class TestRequests:\n         req = requests.Request('POST', httpbin('post'), data=(b'x' for x in range(1)))\n         prep = ses.prepare_request(req)\n         assert 'Transfer-Encoding' in prep.headers\n-        resp = ses.send(prep)\n+\n+        # Create Response to avoid https://github.com/kevin1024/pytest-httpbin/issues/33\n+        resp = requests.Response()\n+        resp.raw = io.BytesIO(b'the content')\n+        resp.request = prep\n+        setattr(resp.raw, 'release_conn', lambda *args: args)\n \n         # Mimic a redirect response\n         resp.status_code = 302\n-        resp.headers['location'] = 'get'\n+        resp.headers['location'] = httpbin('get')\n \n         # Run request through resolve_redirect\n         next_resp = next(ses.resolve_redirects(resp, prep))\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#59f12c9669c53c5cb110870cc94e8181831f45ab", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 12 | Lines Deleted: 1 | Files Changed: 2 | Hunks: 2 | Methods Changed: 2 | Complexity Δ (Sum/Max): -3/1 | Churn Δ: 13 | Churn Cumulative: 12946 | Contributors (this commit): 178 | Commits (past 90d): 25 | Contributors (cumulative): 206 | DMM Complexity: 1.0\n\nDIFF:\n@@ -870,4 +870,6 @@ class Response(object):\n         if not self._content_consumed:\n             self.raw.close()\n \n-        return self.raw.release_conn()\n+        release_conn = getattr(self.raw, 'release_conn', None)\n+        if release_conn is not None:\n+            release_conn()\n\n@@ -1353,6 +1353,15 @@ class TestRequests:\n         with pytest.raises(ValueError):\n             r.json()\n \n+    def test_response_without_release_conn(self):\n+        \"\"\"Test `close` call for non-urllib3-like raw objects.\n+        Should work when `release_conn` attr doesn't exist on `response.raw`.\n+        \"\"\"\n+        resp = requests.Response()\n+        resp.raw = StringIO.StringIO('test')\n+        assert not resp.raw.closed\n+        resp.close()\n+        assert resp.raw.closed\n \n class TestCaseInsensitiveDict:\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#532756803d3b2b7155c31a57f1d5e3cf31224b5d", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 654 | Contributors (this commit): 16 | Commits (past 90d): 4 | Contributors (cumulative): 16 | DMM Complexity: None\n\nDIFF:\n@@ -41,8 +41,8 @@ is at <http://python-requests.org>.\n \"\"\"\n \n __title__ = 'requests'\n-__version__ = '2.11.0'\n-__build__ = 0x021100\n+__version__ = '2.11.1'\n+__build__ = 0x021101\n __author__ = 'Kenneth Reitz'\n __license__ = 'Apache 2.0'\n __copyright__ = 'Copyright 2016 Kenneth Reitz'\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#117813ee2ef730d1338d5cd6d55c389089799002", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 37 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 2 | Complexity Δ (Sum/Max): 7/7 | Churn Δ: 37 | Churn Cumulative: 3483 | Contributors (this commit): 45 | Commits (past 90d): 41 | Contributors (cumulative): 45 | DMM Complexity: 1.0\n\nDIFF:\n@@ -1053,6 +1053,43 @@ class TestRequests:\n         assert r.request.url == pr.request.url\n         assert r.request.headers == pr.request.headers\n \n+    def test_prepared_request_is_pickleable(self):\n+        p = requests.Request('GET', httpbin('get')).prepare()\n+\n+        # Verify we can pickle the request.\n+        assert pickle.dumps(p)\n+        r = pickle.dumps(p)\n+\n+        # Verify we can use the pickled request.\n+        assert pickle.loads(r)\n+        r = pickle.loads(r)\n+\n+        # Verify we can use the unpickled request.\n+        s = requests.Session()\n+        r = s.send(r)\n+\n+        assert r.status_code == 200\n+\n+    def test_prepared_request_with_file_is_pickleable(self):\n+        data = {'a': 0.0}\n+        files = {'b': 'foo'}\n+        r = requests.Request('POST', httpbin('post'), data=data, files=files)\n+        p = r.prepare()\n+\n+        # Verify we can pickle the request.\n+        assert pickle.dumps(p)\n+        r = pickle.dumps(p)\n+\n+        # Verify we can use the pickled request.\n+        assert pickle.loads(r)\n+        r = pickle.loads(r)\n+\n+        # Verify we can use the unpickled request.\n+        s = requests.Session()\n+        r = s.send(r)\n+\n+        assert r.status_code == 200\n+\n     def test_cannot_send_unprepared_requests(self, httpbin):\n         r = requests.Request(url=httpbin())\n         with pytest.raises(ValueError):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#647ed5b6de6a71d235eb222fe978899c0447b0f2", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 21 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 2 | Complexity Δ (Sum/Max): 2/2 | Churn Δ: 21 | Churn Cumulative: 3504 | Contributors (this commit): 45 | Commits (past 90d): 42 | Contributors (cumulative): 45 | DMM Complexity: 1.0\n\nDIFF:\n@@ -1090,6 +1090,27 @@ class TestRequests:\n \n         assert r.status_code == 200\n \n+    def test_prepared_request_with_hook_is_pickleable(self):\n+        def print_url(r, *args, **kwargs):\n+            print(r.url)\n+\n+        r = requests.Request('POST', httpbin('post'), hooks=dict(response=print_url))\n+        p = r.prepare()\n+\n+        # Verify we can pickle the request.\n+        assert pickle.dumps(p)\n+        r = pickle.dumps(p)\n+\n+        # Verify we can use the pickled request.\n+        assert pickle.loads(r)\n+        r = pickle.loads(r)\n+\n+        # Verify we can use the unpickled request.\n+        s = requests.Session()\n+        r = s.send(r)\n+\n+        assert r.status_code == 200\n+\n     def test_cannot_send_unprepared_requests(self, httpbin):\n         r = requests.Request(url=httpbin())\n         with pytest.raises(ValueError):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#77b068bb9eb4364ad8c30bedf7654a0d77ebf9ff", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 10 | Lines Deleted: 2 | Files Changed: 2 | Hunks: 4 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 12 | Churn Cumulative: 3648 | Contributors (this commit): 67 | Commits (past 90d): 15 | Contributors (cumulative): 77 | DMM Complexity: None\n\nDIFF:\n@@ -620,10 +620,10 @@ def select_proxy(url, proxies):\n         return proxies.get('all', proxies.get(urlparts.scheme))\n \n     proxy_keys = [\n-        'all://' + urlparts.hostname,\n-        'all',\n         urlparts.scheme + '://' + urlparts.hostname,\n         urlparts.scheme,\n+        'all://' + urlparts.hostname,\n+        'all',\n     ]\n     proxy = None\n     for proxy_key in proxy_keys:\n\n@@ -323,6 +323,9 @@ http_proxies = {'http': 'http://http.proxy',\n                 'http://some.host': 'http://some.host.proxy'}\n all_proxies = {'all': 'socks5://http.proxy',\n                'all://some.host': 'socks5://some.host.proxy'}\n+mixed_proxies = {'http': 'http://http.proxy',\n+                 'http://some.host': 'http://some.host.proxy',\n+                 'all': 'socks5://http.proxy'}\n @pytest.mark.parametrize(\n     'url, expected, proxies', (\n         ('hTTp://u:p@Some.Host/path', 'http://some.host.proxy', http_proxies),\n@@ -336,6 +339,11 @@ all_proxies = {'all': 'socks5://http.proxy',\n         ('hTTp:///path', 'socks5://http.proxy', all_proxies),\n         ('hTTps://Other.Host', 'socks5://http.proxy', all_proxies),\n \n+        ('http://u:p@other.host/path', 'http://http.proxy', mixed_proxies),\n+        ('http://u:p@some.host/path', 'http://some.host.proxy', mixed_proxies),\n+        ('https://u:p@other.host/path', 'socks5://http.proxy', mixed_proxies),\n+        ('https://u:p@some.host/path', 'socks5://http.proxy', mixed_proxies),\n+        \n         # XXX: unsure whether this is reasonable behavior\n         ('file:///etc/motd', 'socks5://http.proxy', all_proxies),\n     ))\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#7c80222afa17e3c02a41eb465f886699dfd56687", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 3 | Lines Deleted: 3 | Files Changed: 3 | Hunks: 3 | Methods Changed: 2 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 6 | Churn Cumulative: 6868 | Contributors (this commit): 122 | Commits (past 90d): 24 | Contributors (cumulative): 154 | DMM Complexity: None\n\nDIFF:\n@@ -226,7 +226,7 @@ class SessionRedirectMixin(object):\n         if self.trust_env and not should_bypass_proxies(url):\n             environ_proxies = get_environ_proxies(url)\n \n-            proxy = environ_proxies.get('all', environ_proxies.get(scheme))\n+            proxy = environ_proxies.get(scheme, environ_proxies.get('all'))\n \n             if proxy:\n                 new_proxies.setdefault(scheme, proxy)\n\n@@ -617,7 +617,7 @@ def select_proxy(url, proxies):\n     proxies = proxies or {}\n     urlparts = urlparse(url)\n     if urlparts.hostname is None:\n-        return proxies.get('all', proxies.get(urlparts.scheme))\n+        return proxies.get(urlparts.scheme, proxies.get('all'))\n \n     proxy_keys = [\n         urlparts.scheme + '://' + urlparts.hostname,\n\n@@ -343,7 +343,7 @@ mixed_proxies = {'http': 'http://http.proxy',\n         ('http://u:p@some.host/path', 'http://some.host.proxy', mixed_proxies),\n         ('https://u:p@other.host/path', 'socks5://http.proxy', mixed_proxies),\n         ('https://u:p@some.host/path', 'socks5://http.proxy', mixed_proxies),\n-        \n+        ('https://', 'socks5://http.proxy', mixed_proxies),\n         # XXX: unsure whether this is reasonable behavior\n         ('file:///etc/motd', 'socks5://http.proxy', all_proxies),\n     ))\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#af7729f64a97ab35e83a1a7971781e69d124d99e", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 8 | Lines Deleted: 5 | Files Changed: 1 | Hunks: 3 | Methods Changed: 1 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 13 | Churn Cumulative: 2590 | Contributors (this commit): 66 | Commits (past 90d): 15 | Contributors (cumulative): 66 | DMM Complexity: 0.0\n\nDIFF:\n@@ -45,7 +45,7 @@ def dict_to_sequence(d):\n \n \n def super_len(o):\n-    total_length = 0\n+    total_length = None\n     current_position = 0\n \n     if hasattr(o, '__len__'):\n@@ -54,10 +54,6 @@ def super_len(o):\n     elif hasattr(o, 'len'):\n         total_length = o.len\n \n-    elif hasattr(o, 'getvalue'):\n-        # e.g. BytesIO, cStringIO.StringIO\n-        total_length = len(o.getvalue())\n-\n     elif hasattr(o, 'fileno'):\n         try:\n             fileno = o.fileno()\n@@ -89,6 +85,13 @@ def super_len(o):\n             # let requests chunk it instead.\n             current_position = total_length\n \n+    if hasattr(o, 'seek') and total_length is None:\n+        # StringIO has a notimplemented fileno\n+        # BytesIO has seek and not fileno\n+        total_length = o.seek(0, 2)\n+        # seek back to current position to support partially read file-like\n+        o.seek(current_position)\n+\n     return max(0, total_length - current_position)\n \n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#d4965a4ec6fc205f6a35aa2ff33514e4903fd3c4", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 7 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): 4/4 | Churn Δ: 8 | Churn Cumulative: 2598 | Contributors (this commit): 66 | Commits (past 90d): 16 | Contributors (cumulative): 66 | DMM Complexity: 0.0\n\nDIFF:\n@@ -89,8 +89,14 @@ def super_len(o):\n         # StringIO has a notimplemented fileno\n         # BytesIO has seek and not fileno\n         total_length = o.seek(0, 2)\n+        # StringIO objects in py2 returns None\n+        if total_length is None and hasattr(o, 'tell'):\n+            total_length = o.tell()\n+        elif total_length is None:\n+            total_length = 0\n+\n         # seek back to current position to support partially read file-like\n-        o.seek(current_position)\n+        o.seek(current_position or 0)\n \n     return max(0, total_length - current_position)\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#8873a090979ffb627b21d54c04e7ddd1943eea03", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 4 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): 2/2 | Churn Δ: 4 | Churn Cumulative: 2602 | Contributors (this commit): 66 | Commits (past 90d): 17 | Contributors (cumulative): 66 | DMM Complexity: 0.0\n\nDIFF:\n@@ -83,6 +83,7 @@ def super_len(o):\n             # is actually a special file descriptor like stdin. In this\n             # instance, we don't know what the length is, so set it to zero and\n             # let requests chunk it instead.\n+            if total_length is not None:\n                 current_position = total_length\n \n     if hasattr(o, 'seek') and total_length is None:\n@@ -98,6 +99,9 @@ def super_len(o):\n         # seek back to current position to support partially read file-like\n         o.seek(current_position or 0)\n \n+    if total_length is None:\n+        total_length = 0\n+\n     return max(0, total_length - current_position)\n \n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#99364b6b0b8d1ce5ac69121040e641db99d562d1", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 7 | Lines Deleted: 9 | Files Changed: 1 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): -3/0 | Churn Δ: 16 | Churn Cumulative: 2618 | Contributors (this commit): 66 | Commits (past 90d): 15 | Contributors (cumulative): 66 | DMM Complexity: 1.0\n\nDIFF:\n@@ -87,16 +87,14 @@ def super_len(o):\n                 current_position = total_length\n \n         if hasattr(o, 'seek') and total_length is None:\n-        # StringIO has a notimplemented fileno\n-        # BytesIO has seek and not fileno\n-        total_length = o.seek(0, 2)\n-        # StringIO objects in py2 returns None\n-        if total_length is None and hasattr(o, 'tell'):\n-            total_length = o.tell()\n-        elif total_length is None:\n-            total_length = 0\n+            # StringIO and BytesIO have seek but no useable fileno\n \n-        # seek back to current position to support partially read file-like\n+            # seek to end of file\n+            o.seek(0, 2)\n+            total_length = o.tell()\n+\n+            # seek back to current position to support\n+            # partially read file-like objects\n             o.seek(current_position or 0)\n \n     if total_length is None:\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#f5c59743e7a45b68eaa82c83baaaed5607348afe", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 28 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 6 | Complexity Δ (Sum/Max): 6/6 | Churn Δ: 28 | Churn Cumulative: 1103 | Contributors (this commit): 12 | Commits (past 90d): 7 | Contributors (cumulative): 12 | DMM Complexity: 1.0\n\nDIFF:\n@@ -66,6 +66,34 @@ class TestSuperLen:\n             assert super_len(fd) == 4\n         assert len(recwarn) == warnings_num\n \n+    def test_super_len_with__len__(self):\n+        foo = [1,2,3,4]\n+        len_foo = super_len(foo)\n+        assert len_foo == 4\n+\n+    def test_super_len_with_no__len__(self):\n+        class LenFile(object):\n+            def __init__(self):\n+                self.len = 5\n+\n+        assert super_len(LenFile()) == 5\n+\n+    def test_super_len_with_tell(self):\n+        foo = StringIO.StringIO('12345')\n+        assert super_len(foo) == 5\n+        foo.read(2)\n+        assert super_len(foo) == 3\n+\n+    def test_super_len_with_fileno(self):\n+        with open(__file__, 'rb') as f:\n+            length = super_len(f)\n+            file_data = f.read()\n+        assert length == len(file_data)\n+\n+    def test_super_len_with_no_matches(self):\n+        \"\"\"Ensure that objects without any length methods default to 0\"\"\"\n+        assert super_len(object()) == 0\n+\n \n class TestToKeyValList:\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
