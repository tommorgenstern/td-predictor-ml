{"custom_id": "requests#f214b91d770ef194f9fad7041a1356ff27097ae5", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 23 | Lines Deleted: 1 | Files Changed: 2 | Hunks: 4 | Methods Changed: 3 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 24 | Churn Cumulative: 5444 | Contributors (this commit): 36 | Commits (past 90d): 137 | Contributors (cumulative): 47 | DMM Complexity: 1.0\n\nDIFF:\n@@ -597,7 +597,7 @@ class Response(object):\n         def generate():\n             chunk = []\n \n-            while 1:\n+            while True:\n                 c = self.raw.read(1)\n                 if not c:\n                     break\n@@ -608,6 +608,11 @@ class Response(object):\n                 else:\n                     chunk.append(c)\n \n+            # Yield the remainder, in case the response\n+            # did not terminate with a newline\n+            if chunk:\n+                yield ''.join(chunk)\n+\n             self._content_consumed = True\n \n         gen = generate()\n\n@@ -3,6 +3,7 @@\n \n from __future__ import with_statement\n \n+import StringIO\n import time\n import os\n import unittest\n@@ -603,5 +604,21 @@ class RequestsTestSuite(unittest.TestCase):\n \n             self.assertEqual(i, len_lines)\n \n+        # Test 'dangling' fragment in responses that do not terminate in\n+        # a newline.\n+        quote = (\n+            '''Why will he not upon our fair request\\n'''\n+            '''Untent his person and share the air with us?'''\n+        )\n+\n+        # Make a request and monkey-patch its contents\n+        r = requests.get(httpbin('get'))\n+        r.raw = StringIO.StringIO(quote)\n+\n+        # Make sure iter_lines doesn't chop the trailing bit\n+        lines = '\\n'.join(r.iter_lines())\n+        self.assertEqual(lines, quote)\n+\n+\n if __name__ == '__main__':\n     unittest.main()\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#f5e421e880761791bbec40556aa9abf15bf7f4f8", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 2 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 3961 | Contributors (this commit): 30 | Commits (past 90d): 99 | Contributors (cumulative): 30 | DMM Complexity: None\n\nDIFF:\n@@ -597,7 +597,7 @@ class Response(object):\n         def generate():\n             chunk = []\n \n-            while True:\n+            while 1:\n                 c = self.raw.read(1)\n                 if not c:\n                     break\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#12f3c65e5a426ce32808cc456387ca7d7e7c5126", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 16 | Lines Deleted: 3 | Files Changed: 2 | Hunks: 4 | Methods Changed: 4 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 19 | Churn Cumulative: 5465 | Contributors (this commit): 36 | Commits (past 90d): 138 | Contributors (cumulative): 47 | DMM Complexity: 1.0\n\nDIFF:\n@@ -438,6 +438,10 @@ class Request(object):\n                     # Attach Cookie header to request.\n                     self.headers['Cookie'] = cookie_header\n \n+            # If the request fails but exceptions are suppressed,\n+            # we'll build a blank response.\n+            r = None\n+\n             try:\n                 # Send the request.\n                 r = conn.urlopen(\n@@ -458,8 +462,6 @@ class Request(object):\n             except MaxRetryError, e:\n                 if not self.config.get('safe_mode', False):\n                     raise ConnectionError(e)\n-                else:\n-                    r = None\n \n             except (_SSLError, _HTTPError), e:\n                 if not self.config.get('safe_mode', False):\n@@ -597,7 +599,7 @@ class Response(object):\n         def generate():\n             chunk = []\n \n-            while 1:\n+            while True:\n                 c = self.raw.read(1)\n                 if not c:\n                     break\n\n@@ -619,6 +619,17 @@ class RequestsTestSuite(unittest.TestCase):\n         lines = '\\n'.join(r.iter_lines())\n         self.assertEqual(lines, quote)\n \n+    def test_timeout(self):\n+\n+        # When not in safe mode, should raise Timeout exception\n+        with self.assertRaises(requests.exceptions.Timeout):\n+            r = requests.get(httpbin('stream', '1000'), timeout=0.0001)\n+\n+        # In safe mode, should return a blank response\n+        r = requests.get(httpbin('stream', '1000'), timeout=0.0001,\n+                config=dict(safe_mode=True))\n+        self.assertIsNone(r.content)\n+\n \n if __name__ == '__main__':\n     unittest.main()\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#91766548d10cd5ebf46aba376f9e000263285875", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 3 | Lines Deleted: 16 | Files Changed: 2 | Hunks: 4 | Methods Changed: 4 | Complexity Δ (Sum/Max): -1/0 | Churn Δ: 19 | Churn Cumulative: 5484 | Contributors (this commit): 36 | Commits (past 90d): 140 | Contributors (cumulative): 47 | DMM Complexity: 0.0\n\nDIFF:\n@@ -438,10 +438,6 @@ class Request(object):\n                     # Attach Cookie header to request.\n                     self.headers['Cookie'] = cookie_header\n \n-            # If the request fails but exceptions are suppressed,\n-            # we'll build a blank response.\n-            r = None\n-\n             try:\n                 # Send the request.\n                 r = conn.urlopen(\n@@ -462,6 +458,8 @@ class Request(object):\n             except MaxRetryError, e:\n                 if not self.config.get('safe_mode', False):\n                     raise ConnectionError(e)\n+                else:\n+                    r = None\n \n             except (_SSLError, _HTTPError), e:\n                 if not self.config.get('safe_mode', False):\n@@ -599,7 +597,7 @@ class Response(object):\n         def generate():\n             chunk = []\n \n-            while True:\n+            while 1:\n                 c = self.raw.read(1)\n                 if not c:\n                     break\n\n@@ -619,17 +619,6 @@ class RequestsTestSuite(unittest.TestCase):\n         lines = '\\n'.join(r.iter_lines())\n         self.assertEqual(lines, quote)\n \n-    def test_timeout(self):\n-\n-        # When not in safe mode, should raise Timeout exception\n-        with self.assertRaises(requests.exceptions.Timeout):\n-            r = requests.get(httpbin('stream', '1000'), timeout=0.0001)\n-\n-        # In safe mode, should return a blank response\n-        r = requests.get(httpbin('stream', '1000'), timeout=0.0001,\n-                config=dict(safe_mode=True))\n-        self.assertIsNone(r.content)\n-\n \n if __name__ == '__main__':\n     unittest.main()\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#2c0ff95d4d8daae7c0624b3a96584d722ebf6c38", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 16 | Lines Deleted: 3 | Files Changed: 2 | Hunks: 4 | Methods Changed: 4 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 19 | Churn Cumulative: 5503 | Contributors (this commit): 36 | Commits (past 90d): 142 | Contributors (cumulative): 47 | DMM Complexity: 1.0\n\nDIFF:\n@@ -438,6 +438,10 @@ class Request(object):\n                     # Attach Cookie header to request.\n                     self.headers['Cookie'] = cookie_header\n \n+            # If the request fails but exceptions are suppressed,\n+            # we'll build a blank response.\n+            r = None\n+\n             try:\n                 # Send the request.\n                 r = conn.urlopen(\n@@ -458,8 +462,6 @@ class Request(object):\n             except MaxRetryError, e:\n                 if not self.config.get('safe_mode', False):\n                     raise ConnectionError(e)\n-                else:\n-                    r = None\n \n             except (_SSLError, _HTTPError), e:\n                 if not self.config.get('safe_mode', False):\n@@ -597,7 +599,7 @@ class Response(object):\n         def generate():\n             chunk = []\n \n-            while 1:\n+            while True:\n                 c = self.raw.read(1)\n                 if not c:\n                     break\n\n@@ -619,6 +619,17 @@ class RequestsTestSuite(unittest.TestCase):\n         lines = '\\n'.join(r.iter_lines())\n         self.assertEqual(lines, quote)\n \n+    def test_timeout(self):\n+\n+        # When not in safe mode, should raise Timeout exception\n+        with self.assertRaises(requests.exceptions.Timeout):\n+            r = requests.get(httpbin('stream', '1000'), timeout=0.0001)\n+\n+        # In safe mode, should return a blank response\n+        r = requests.get(httpbin('stream', '1000'), timeout=0.0001,\n+                config=dict(safe_mode=True))\n+        self.assertIsNone(r.content)\n+\n \n if __name__ == '__main__':\n     unittest.main()\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#a7223f86a976410bb904fb2e983440c94175aa75", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 2 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 3987 | Contributors (this commit): 30 | Commits (past 90d): 103 | Contributors (cumulative): 30 | DMM Complexity: None\n\nDIFF:\n@@ -599,7 +599,7 @@ class Response(object):\n         def generate():\n             chunk = []\n \n-            while True:\n+            while 1:\n                 c = self.raw.read(1)\n                 if not c:\n                     break\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#716d29c49c346106b25fadd1d15d6bd79cd6847a", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 14 | Lines Deleted: 0 | Files Changed: 2 | Hunks: 3 | Methods Changed: 5 | Complexity Δ (Sum/Max): 3/2 | Churn Δ: 14 | Churn Cumulative: 5519 | Contributors (this commit): 36 | Commits (past 90d): 145 | Contributors (cumulative): 47 | DMM Complexity: 0.0\n\nDIFF:\n@@ -559,6 +559,8 @@ class Response(object):\n             )\n \n         def generate():\n+            # self.raw can be None if we're in safe_mode and the request failed\n+            if self.raw is not None:\n                 while 1:\n                     chunk = self.raw.read(chunk_size)\n                     if not chunk:\n@@ -597,6 +599,7 @@ class Response(object):\n             )\n \n         def generate():\n+            if self.raw is not None:\n                 chunk = []\n \n                 while 1:\n\n@@ -619,6 +619,17 @@ class RequestsTestSuite(unittest.TestCase):\n         lines = '\\n'.join(r.iter_lines())\n         self.assertEqual(lines, quote)\n \n+    def test_null_response(self):\n+\n+        # Safe mode creates empty responses for failed requests.\n+\n+        # Iterating on these responses should produce empty sequences\n+        r = requests.get('http://_/', config=dict(safe_mode=True))\n+        self.assertEquals(list(r.iter_lines()), [])\n+\n+        r = requests.get('http://_/', config=dict(safe_mode=True))\n+        self.assertEquals(list(r.iter_content()), [])\n+\n     def test_timeout(self):\n \n         # When not in safe mode, should raise Timeout exception\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#e1615e0f1e342d89d09df8289c0b32d3b0e9fd6a", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 27 | Lines Deleted: 16 | Files Changed: 2 | Hunks: 16 | Methods Changed: 8 | Complexity Δ (Sum/Max): -2/0 | Churn Δ: 43 | Churn Cumulative: 5562 | Contributors (this commit): 36 | Commits (past 90d): 147 | Contributors (cumulative): 47 | DMM Complexity: 0.42857142857142855\n\nDIFF:\n@@ -18,13 +18,15 @@ from .structures import CaseInsensitiveDict\n from .status_codes import codes\n from .packages import oreos\n from .auth import HTTPBasicAuth, HTTPProxyAuth\n+from .packages.urllib3.response import HTTPResponse\n from .packages.urllib3.exceptions import MaxRetryError\n from .packages.urllib3.exceptions import SSLError as _SSLError\n from .packages.urllib3.exceptions import HTTPError as _HTTPError\n from .packages.urllib3 import connectionpool, poolmanager\n from .packages.urllib3.filepost import encode_multipart_formdata\n from .exceptions import (\n-    Timeout, URLRequired, TooManyRedirects, HTTPError, ConnectionError)\n+    ConnectionError, HTTPError, RequestException, Timeout, TooManyRedirects,\n+    URLRequired)\n from .utils import (\n     get_encoding_from_headers, stream_decode_response_unicode,\n     decode_gzip, stream_decode_gzip, guess_filename, requote_path)\n@@ -171,6 +173,9 @@ class Request(object):\n                 # Save cookies in Response.\n                 response.cookies = cookies\n \n+                # No exceptions were harmed in the making of this request.\n+                response.error = getattr(resp, 'error', None)\n+\n             # Save original response for later.\n             response.raw = resp\n \n@@ -438,10 +443,10 @@ class Request(object):\n                     # Attach Cookie header to request.\n                     self.headers['Cookie'] = cookie_header\n \n-            # If the request fails but exceptions are suppressed,\n-            # we'll build a blank response.\n-            r = None\n-\n+            try:\n+                # The inner try .. except re-raises certain exceptions as\n+                # internal exception types; the outer suppresses exceptions\n+                # when safe mode is set.\n                 try:\n                     # Send the request.\n                     r = conn.urlopen(\n@@ -458,15 +463,21 @@ class Request(object):\n                     )\n                     self.sent = True\n \n-\n                 except MaxRetryError, e:\n-                if not self.config.get('safe_mode', False):\n                     raise ConnectionError(e)\n \n                 except (_SSLError, _HTTPError), e:\n-                if not self.config.get('safe_mode', False):\n                     raise Timeout('Request timed out.')\n \n+            except RequestException, e:\n+                if self.config.get('safe_mode', False):\n+                    # In safe mode, catch the exception and attach it to \n+                    # a blank urllib3.HTTPResponse object.\n+                    r = HTTPResponse()\n+                    r.error = e\n+                else:\n+                    raise\n+\n             self._build_response(r)\n \n             # Response manipulation hook.\n@@ -559,8 +570,6 @@ class Response(object):\n             )\n \n         def generate():\n-            # self.raw can be None if we're in safe_mode and the request failed\n-            if self.raw is not None:\n             while 1:\n                 chunk = self.raw.read(chunk_size)\n                 if not chunk:\n\n@@ -619,18 +619,19 @@ class RequestsTestSuite(unittest.TestCase):\n         lines = '\\n'.join(r.iter_lines())\n         self.assertEqual(lines, quote)\n \n-    def test_null_response(self):\n+    def test_safe_mode(self):\n+\n+        safe = requests.session(config=dict(safe_mode=True))\n \n         # Safe mode creates empty responses for failed requests.\n-\n         # Iterating on these responses should produce empty sequences\n-        r = requests.get('http://_/', config=dict(safe_mode=True))\n+        r = safe.get('http://_/')\n         self.assertEquals(list(r.iter_lines()), [])\n+        self.assertIsInstance(r.error, requests.exceptions.ConnectionError)\n \n-        r = requests.get('http://_/', config=dict(safe_mode=True))\n+        r = safe.get('http://_/')\n         self.assertEquals(list(r.iter_content()), [])\n-\n-    def test_timeout(self):\n+        self.assertIsInstance(r.error, requests.exceptions.ConnectionError)\n \n         # When not in safe mode, should raise Timeout exception\n         with self.assertRaises(requests.exceptions.Timeout):\n@@ -640,6 +641,7 @@ class RequestsTestSuite(unittest.TestCase):\n         r = requests.get(httpbin('stream', '1000'), timeout=0.0001,\n                 config=dict(safe_mode=True))\n         self.assertIsNone(r.content)\n+        self.assertIsInstance(r.error, requests.exceptions.Timeout)\n \n \n if __name__ == '__main__':\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#4eb2759400b6bc8a6289a4fd37779c21b6894b3c", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 5 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 2 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 5 | Churn Cumulative: 398 | Contributors (this commit): 6 | Commits (past 90d): 19 | Contributors (cumulative): 6 | DMM Complexity: 1.0\n\nDIFF:\n@@ -36,6 +36,11 @@ def patched(f):\n         kwargs['return_response'] = False\n         kwargs['prefetch'] = True\n \n+        config = kwargs.get('config', {})\n+        config.update(safe_mode=True)\n+\n+        kwargs['config'] = config\n+\n         return f(*args, **kwargs)\n \n     return wrapped\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#0bfc029b5e549cb41b7c4999b96f3dfe892baf84", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 248 | Contributors (this commit): 3 | Commits (past 90d): 27 | Contributors (cumulative): 3 | DMM Complexity: None\n\nDIFF:\n@@ -15,8 +15,8 @@ requests\n \"\"\"\n \n __title__ = 'requests'\n-__version__ = '0.8.6'\n-__build__ = 0x000806\n+__version__ = '0.8.7'\n+__build__ = 0x000807\n __author__ = 'Kenneth Reitz'\n __license__ = 'ISC'\n __copyright__ = 'Copyright 2011 Kenneth Reitz'\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#31d495fb0220ff4bb812f457e03948cbe2b8e3a9", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 3 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 120 | Contributors (this commit): 2 | Commits (past 90d): 5 | Contributors (cumulative): 2 | DMM Complexity: None\n\nDIFF:\n@@ -20,7 +20,9 @@ if sys.argv[-1] == 'test':\n     os.system('python test_requests.py')\n     sys.exit()\n \n-required = []\n+required = [\n+    'certifi>=0.0.1'\n+]\n \n if sys.version_info[:2] < (2,6):\n     required.append('simplejson')\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#a91ac242f3616d3051f2ba28a81d6fc637c58a7c", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 32 | Files Changed: 1 | Hunks: 2 | Methods Changed: 2 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 34 | Churn Cumulative: 983 | Contributors (this commit): 14 | Commits (past 90d): 30 | Contributors (cumulative): 14 | DMM Complexity: 0.0\n\nDIFF:\n@@ -13,21 +13,7 @@ This module implements the Requests API.\n \n from . import sessions\n \n-def request(method, url,\n-    params=None,\n-    data=None,\n-    headers=None,\n-    cookies=None,\n-    files=None,\n-    auth=None,\n-    timeout=None,\n-    allow_redirects=False,\n-    proxies=None,\n-    hooks=None,\n-    return_response=True,\n-    prefetch=False,\n-    session=None,\n-    config=None):\n+def request(method, url, **kwargs):\n     \"\"\"Constructs and sends a :class:`Request <Request>`.\n     Returns :class:`Response <Response>` object.\n \n@@ -48,23 +34,7 @@ def request(method, url,\n     \"\"\"\n \n     s = session or sessions.session()\n-    return s.request(\n-        method=method,\n-        url=url,\n-        params=params,\n-        data=data,\n-        headers=headers,\n-        cookies=cookies,\n-        files=files,\n-        auth=auth,\n-        timeout=timeout,\n-        allow_redirects=allow_redirects,\n-        proxies=proxies,\n-        hooks=hooks,\n-        return_response=return_response,\n-        config=config,\n-        prefetch=prefetch\n-    )\n+    return s.request(method=method, url=url, **kwargs)\n \n \n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#ca26c1a2532b97099e0523a2e4bd70ff1a0922f9", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 985 | Contributors (this commit): 14 | Commits (past 90d): 31 | Contributors (cumulative): 14 | DMM Complexity: None\n\nDIFF:\n@@ -33,7 +33,7 @@ def request(method, url, **kwargs):\n     :param config: (optional) A configuration dictionary.\n     \"\"\"\n \n-    s = session or sessions.session()\n+    s = kwargs.get('session') or sessions.session()\n     return s.request(method=method, url=url, **kwargs)\n \n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#9a1a4136ac69cce55d8d5f27a0ab1caadb0a6e90", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 3 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 3 | Churn Cumulative: 69 | Contributors (this commit): 6 | Commits (past 90d): 7 | Contributors (cumulative): 6 | DMM Complexity: None\n\nDIFF:\n@@ -18,6 +18,9 @@ class HTTPError(RequestException):\n class ConnectionError(RequestException):\n     \"\"\"A Connection error occurred.\"\"\"\n \n+class SSLError(ConnectionError):\n+    \"\"\"An SSL error occurred.\"\"\"\n+\n class Timeout(RequestException):\n     \"\"\"The request timed out.\"\"\"\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#5184f0c5a9e3ec9c573c9e917d265c6204d3d9dd", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 35 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 7 | Methods Changed: 3 | Complexity Δ (Sum/Max): 8/8 | Churn Δ: 37 | Churn Cumulative: 4056 | Contributors (this commit): 30 | Commits (past 90d): 83 | Contributors (cumulative): 30 | DMM Complexity: 0.0\n\nDIFF:\n@@ -7,6 +7,7 @@ requests.models\n This module contains the primary objects that power Requests.\n \"\"\"\n \n+import os\n import urllib\n import zlib\n \n@@ -26,7 +27,7 @@ from .packages.urllib3 import connectionpool, poolmanager\n from .packages.urllib3.filepost import encode_multipart_formdata\n from .exceptions import (\n     ConnectionError, HTTPError, RequestException, Timeout, TooManyRedirects,\n-    URLRequired)\n+    URLRequired, SSLError)\n from .utils import (\n     get_encoding_from_headers, stream_decode_response_unicode,\n     decode_gzip, stream_decode_gzip, guess_filename, requote_path)\n@@ -56,7 +57,8 @@ class Request(object):\n         proxies=None,\n         hooks=None,\n         config=None,\n-        _poolmanager=None):\n+        _poolmanager=None,\n+        verify=None):\n \n         #: Float describes the timeout of the request.\n         #  (Use socket.setdefaulttimeout() as fallback)\n@@ -118,6 +120,9 @@ class Request(object):\n         #: Session.\n         self.session = None\n \n+        #: SSL Verification.\n+        self.verify = verify\n+\n         if headers:\n             headers = CaseInsensitiveDict(self.headers)\n         else:\n@@ -242,6 +247,7 @@ class Request(object):\n                     timeout=self.timeout,\n                     _poolmanager=self._poolmanager,\n                     proxies = self.proxies,\n+                    verify = self.verify\n                 )\n \n                 request.send()\n@@ -425,6 +431,30 @@ class Request(object):\n             else:\n                 conn = connectionpool.connection_from_url(url)\n \n+        if url.startswith('https') and self.verify:\n+\n+            cert_loc = None\n+\n+            # Allow self-specified cert location.\n+            if self.verify is not True:\n+                cert_loc = self.verify\n+\n+\n+            # Look for configuration.\n+            if not cert_loc:\n+                cert_loc = os.environ.get('REQUESTS_CA_BUNDLE')\n+\n+            # Curl compatiblity.\n+            if not cert_loc:\n+                cert_loc = os.environ.get('CURL_CA_BUNDLE')\n+\n+            # Use the awesome certifi list.\n+            if not cert_loc:\n+                cert_loc = __import__('certifi').where()\n+\n+            conn.cert_reqs = 'CERT_REQUIRED'\n+            conn.ca_certs = cert_loc\n+\n         if not self.sent or anyway:\n \n             if self.cookies:\n@@ -467,6 +497,9 @@ class Request(object):\n                     raise ConnectionError(e)\n \n                 except (_SSLError, _HTTPError), e:\n+                    if self.verify and isinstance(e, _SSLError):\n+                        raise SSLError(e)\n+\n                     raise Timeout('Request timed out.')\n \n             except RequestException, e:\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#0a8bb2e1b375cb1538ca54288031e7aff1169ef4", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 8 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 6 | Methods Changed: 4 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 10 | Churn Cumulative: 712 | Contributors (this commit): 6 | Commits (past 90d): 29 | Contributors (cumulative): 6 | DMM Complexity: 0.0\n\nDIFF:\n@@ -63,7 +63,8 @@ class Session(object):\n         proxies=None,\n         hooks=None,\n         params=None,\n-        config=None):\n+        config=None,\n+        verify=None):\n \n         self.headers = headers or {}\n         self.cookies = cookies or {}\n@@ -73,6 +74,7 @@ class Session(object):\n         self.hooks = hooks or {}\n         self.params = params or {}\n         self.config = config or {}\n+        self.verify = verify\n \n         for (k, v) in defaults.items():\n             self.config.setdefault(k, v)\n@@ -111,7 +113,8 @@ class Session(object):\n         hooks=None,\n         return_response=True,\n         config=None,\n-        prefetch=False):\n+        prefetch=False,\n+        verify=None):\n \n         \"\"\"Constructs and sends a :class:`Request <Request>`.\n         Returns :class:`Response <Response>` object.\n@@ -130,6 +133,7 @@ class Session(object):\n         :param return_response: (optional) If False, an un-sent Request object will returned.\n         :param config: (optional) A configuration dictionary.\n         :param prefetch: (optional) if ``True``, the response content will be immediately downloaded.\n+        :param prefetch: (optional) if ``True``, the SSL cert will be verified. A CA_BUNDLE path can also be provided.\n         \"\"\"\n \n         method = str(method).upper()\n@@ -141,6 +145,7 @@ class Session(object):\n         headers = {} if headers is None else headers\n         params = {} if params is None else params\n         hooks = {} if hooks is None else hooks\n+        verify = verify or self.verify\n         # use session's hooks as defaults\n         for key, cb in self.hooks.iteritems():\n             hooks.setdefault(key, cb)\n@@ -164,6 +169,7 @@ class Session(object):\n             allow_redirects=allow_redirects,\n             proxies=proxies,\n             config=config,\n+            verify=verify,\n             _poolmanager=self.poolmanager\n         )\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#544a5fea59f24bc87750d62389a43a42559b49c0", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 1 | Churn Cumulative: 4057 | Contributors (this commit): 30 | Commits (past 90d): 84 | Contributors (cumulative): 30 | DMM Complexity: None\n\nDIFF:\n@@ -128,6 +128,7 @@ class Request(object):\n         else:\n             headers = CaseInsensitiveDict()\n \n+        # Add configured base headers.\n         for (k, v) in self.config.get('base_headers', {}).items():\n             if k not in headers:\n                 headers[k] = v\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#f7e67c01ea750130e407adb6a702d02065125eb8", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 4 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 5 | Churn Cumulative: 717 | Contributors (this commit): 6 | Commits (past 90d): 30 | Contributors (cumulative): 6 | DMM Complexity: 0.0\n\nDIFF:\n@@ -145,7 +145,10 @@ class Session(object):\n         headers = {} if headers is None else headers\n         params = {} if params is None else params\n         hooks = {} if hooks is None else hooks\n-        verify = verify or self.verify\n+\n+        if verify is None:\n+            verify = self.verify\n+\n         # use session's hooks as defaults\n         for key, cb in self.hooks.iteritems():\n             hooks.setdefault(key, cb)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#a1afbfbaa3babf4f31e54cd1920b9c0c845db029", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 45 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 4 | Complexity Δ (Sum/Max): 4/4 | Churn Δ: 45 | Churn Cumulative: 45 | Contributors (this commit): 1 | Commits (past 90d): 1 | Contributors (cumulative): 1 | DMM Complexity: 1.0\n\nDIFF:\n@@ -0,0 +1,45 @@\n+#!/usr/bin/env python\n+# -*- coding: utf-8 -*-\n+\n+from __future__ import with_statement\n+\n+import unittest\n+\n+import requests\n+\n+try:\n+    import omnijson as json\n+except ImportError:\n+    import json\n+\n+\n+class RequestsTestSuite(unittest.TestCase):\n+    \"\"\"Requests test cases.\"\"\"\n+\n+    # It goes to eleven.\n+    _multiprocess_can_split_ = True\n+\n+    def test_addition(self):\n+        assert (1 + 1) == 2\n+\n+    def test_ssl_hostname_ok(self):\n+        requests.get('https://github.com', verify=True)\n+\n+    def test_ssl_hostname_not_ok(self):\n+        requests.get('https://kennethreitz.com', verify=False)\n+\n+        self.assertRaises(requests.exceptions.SSLError, requests.get, 'https://kennethreitz.com', verify=True)\n+\n+    def test_ssl_hostname_session_not_ok(self):\n+\n+        s = requests.session(verify=True)\n+\n+        s.get('https://kennethreitz.com', verify=False)\n+\n+        self.assertRaises(requests.exceptions.SSLError, s.get, 'https://kennethreitz.com')\n+\n+\n+\n+if __name__ == '__main__':\n+    unittest.main()\n+\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#a83268b01b1784799b6c32e725dabbde488f0b76", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 252 | Contributors (this commit): 3 | Commits (past 90d): 28 | Contributors (cumulative): 3 | DMM Complexity: None\n\nDIFF:\n@@ -15,8 +15,8 @@ requests\n \"\"\"\n \n __title__ = 'requests'\n-__version__ = '0.8.7'\n-__build__ = 0x000807\n+__version__ = '0.8.8'\n+__build__ = 0x000808\n __author__ = 'Kenneth Reitz'\n __license__ = 'ISC'\n __copyright__ = 'Copyright 2011 Kenneth Reitz'\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#9fcfec18daf65028b06ab3c32620a21a8ce70f94", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 1 | Files Changed: 2 | Hunks: 2 | Methods Changed: 2 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 3 | Churn Cumulative: 1705 | Contributors (this commit): 15 | Commits (past 90d): 63 | Contributors (cumulative): 20 | DMM Complexity: None\n\nDIFF:\n@@ -31,6 +31,7 @@ def request(method, url, **kwargs):\n     :param return_response: (optional) If False, an un-sent Request object will returned.\n     :param session: (optional) A :class:`Session` object to be used for the request.\n     :param config: (optional) A configuration dictionary.\n+    :param verify: (optional) if ``True``, the SSL cert will be verified. A CA_BUNDLE path can also be provided.\n     \"\"\"\n \n     s = kwargs.get('session') or sessions.session()\n\n@@ -133,7 +133,7 @@ class Session(object):\n         :param return_response: (optional) If False, an un-sent Request object will returned.\n         :param config: (optional) A configuration dictionary.\n         :param prefetch: (optional) if ``True``, the response content will be immediately downloaded.\n-        :param prefetch: (optional) if ``True``, the SSL cert will be verified. A CA_BUNDLE path can also be provided.\n+        :param verify: (optional) if ``True``, the SSL cert will be verified. A CA_BUNDLE path can also be provided.\n         \"\"\"\n \n         method = str(method).upper()\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#d9a9a981bc998fed82c15e5df0fd7de5fd800f40", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 122 | Contributors (this commit): 2 | Commits (past 90d): 6 | Contributors (cumulative): 2 | DMM Complexity: None\n\nDIFF:\n@@ -21,7 +21,7 @@ if sys.argv[-1] == 'test':\n     sys.exit()\n \n required = [\n-    'certifi>=0.0.1'\n+    'certifi>=0.0.2'\n ]\n \n if sys.version_info[:2] < (2,6):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#5f768b191d76a6d582839e9ac0b2b564fdab41e9", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 124 | Contributors (this commit): 2 | Commits (past 90d): 7 | Contributors (cumulative): 2 | DMM Complexity: None\n\nDIFF:\n@@ -21,7 +21,7 @@ if sys.argv[-1] == 'test':\n     sys.exit()\n \n required = [\n-    'certifi>=0.0.2'\n+    'certifi>=0.0.4'\n ]\n \n if sys.version_info[:2] < (2,6):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#cfb1a478acd43aead67acd249ca5caf2480101d6", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 1 | Churn Cumulative: 125 | Contributors (this commit): 2 | Commits (past 90d): 8 | Contributors (cumulative): 2 | DMM Complexity: None\n\nDIFF:\n@@ -40,6 +40,7 @@ setup(\n         'requests',\n         'requests.packages',\n         'requests.packages.urllib3',\n+        'requests.packages.urllib3.packages.ssl_match_hostname',\n         'requests.packages.oreos'\n     ],\n     package_data={'': ['LICENSE', 'NOTICE']},\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#8aa015ffc950a6a290f25bf935f26227ecd2eaa7", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 256 | Contributors (this commit): 3 | Commits (past 90d): 29 | Contributors (cumulative): 3 | DMM Complexity: None\n\nDIFF:\n@@ -15,8 +15,8 @@ requests\n \"\"\"\n \n __title__ = 'requests'\n-__version__ = '0.8.8'\n-__build__ = 0x000808\n+__version__ = '0.8.9'\n+__build__ = 0x000809\n __author__ = 'Kenneth Reitz'\n __license__ = 'ISC'\n __copyright__ = 'Copyright 2011 Kenneth Reitz'\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#082f4d89486e4bfe918fd125431545a6b879155e", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 1 | Churn Cumulative: 126 | Contributors (this commit): 2 | Commits (past 90d): 9 | Contributors (cumulative): 2 | DMM Complexity: None\n\nDIFF:\n@@ -40,6 +40,7 @@ setup(\n         'requests',\n         'requests.packages',\n         'requests.packages.urllib3',\n+        'requests.packages.urllib3.packages',\n         'requests.packages.urllib3.packages.ssl_match_hostname',\n         'requests.packages.oreos'\n     ],\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#7fdb541e2ddea4d955794adf179f10a453326ca4", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 3 | Lines Deleted: 3 | Files Changed: 2 | Hunks: 2 | Methods Changed: 2 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 6 | Churn Cumulative: 981 | Contributors (this commit): 7 | Commits (past 90d): 62 | Contributors (cumulative): 9 | DMM Complexity: None\n\nDIFF:\n@@ -15,8 +15,8 @@ requests\n \"\"\"\n \n __title__ = 'requests'\n-__version__ = '0.8.9'\n-__build__ = 0x000809\n+__version__ = '0.9.0'\n+__build__ = 0x000900\n __author__ = 'Kenneth Reitz'\n __license__ = 'ISC'\n __copyright__ = 'Copyright 2011 Kenneth Reitz'\n\n@@ -64,7 +64,7 @@ class Session(object):\n         hooks=None,\n         params=None,\n         config=None,\n-        verify=None):\n+        verify=True):\n \n         self.headers = headers or {}\n         self.cookies = cookies or {}\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#9c0a0fbd01ce0a07cebc26f0203e17bfccf7e481", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 2 | Methods Changed: 2 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 49 | Contributors (this commit): 1 | Commits (past 90d): 2 | Contributors (cumulative): 1 | DMM Complexity: None\n\nDIFF:\n@@ -28,11 +28,11 @@ class RequestsTestSuite(unittest.TestCase):\n     def test_ssl_hostname_not_ok(self):\n         requests.get('https://kennethreitz.com', verify=False)\n \n-        self.assertRaises(requests.exceptions.SSLError, requests.get, 'https://kennethreitz.com', verify=True)\n+        self.assertRaises(requests.exceptions.SSLError, requests.get, 'https://kennethreitz.com')\n \n     def test_ssl_hostname_session_not_ok(self):\n \n-        s = requests.session(verify=True)\n+        s = requests.session()\n \n         s.get('https://kennethreitz.com', verify=False)\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#f80984f37701003f0f06d86902a60cfd82fa85ef", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 20 | Lines Deleted: 26 | Files Changed: 2 | Hunks: 6 | Methods Changed: 4 | Complexity Δ (Sum/Max): 0/5 | Churn Δ: 46 | Churn Cumulative: 4934 | Contributors (this commit): 32 | Commits (past 90d): 94 | Contributors (cumulative): 41 | DMM Complexity: 0.5\n\nDIFF:\n@@ -29,8 +29,8 @@ from .exceptions import (\n     ConnectionError, HTTPError, RequestException, Timeout, TooManyRedirects,\n     URLRequired, SSLError)\n from .utils import (\n-    get_encoding_from_headers, stream_decode_response_unicode,\n-    decode_gzip, stream_decode_gzip, guess_filename, requote_path)\n+    get_encoding_from_headers, stream_decode_response_unicode, decode_gzip,\n+    stream_decode_gzip, stream_decode_deflate, guess_filename, requote_path)\n \n \n REDIRECT_STATI = (codes.moved, codes.found, codes.other, codes.temporary_moved)\n@@ -615,6 +615,8 @@ class Response(object):\n \n         if 'gzip' in self.headers.get('content-encoding', ''):\n             gen = stream_decode_gzip(gen)\n+        elif 'deflate' in self.headers.get('content-encoding', ''):\n+            gen = stream_decode_deflate(gen)\n \n         if decode_unicode is None:\n             decode_unicode = self.config.get('decode_unicode')\n@@ -636,17 +638,9 @@ class Response(object):\n         if newlines is None:\n             newlines = ('\\r', '\\n', '\\r\\n')\n \n-        if self._content_consumed:\n-            raise RuntimeError(\n-                'The content for this response was already consumed'\n-            )\n-\n-        def generate():\n-            if self.raw is not None:\n         chunk = []\n \n-                while 1:\n-                    c = self.raw.read(1)\n+        for c in self.iter_content(1, decode_unicode=decode_unicode):\n             if not c:\n                 break\n \n@@ -661,21 +655,6 @@ class Response(object):\n         if chunk:\n             yield ''.join(chunk)\n \n-            self._content_consumed = True\n-\n-        gen = generate()\n-\n-        if 'gzip' in self.headers.get('content-encoding', ''):\n-            gen = stream_decode_gzip(gen)\n-\n-        if decode_unicode is None:\n-            decode_unicode = self.config.get('decode_unicode')\n-\n-        if decode_unicode:\n-            gen = stream_decode_response_unicode(gen, self)\n-\n-        return gen\n-\n \n     @property\n     def content(self):\n\n@@ -370,6 +370,21 @@ def stream_decode_gzip(iterator):\n         pass\n \n \n+def stream_decode_deflate(iterator):\n+    \"\"\"Stream decodes a deflate-encoded iterator\"\"\"\n+    try:\n+        dec = zlib.decompressobj(-zlib.MAX_WBITS)\n+        for chunk in iterator:\n+            rv = dec.decompress(chunk)\n+            if rv:\n+                yield rv\n+        buf = dec.decompress('')\n+        rv = buf + dec.flush()\n+        if rv:\n+            yield rv\n+    except zlib.error:\n+        pass\n+\n def requote_path(path):\n     \"\"\"Re-quote the given URL path component.\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#9c6ffc530319d3b6d75bb160267d76f0224b0743", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 26 | Lines Deleted: 31 | Files Changed: 2 | Hunks: 11 | Methods Changed: 6 | Complexity Δ (Sum/Max): -4/0 | Churn Δ: 57 | Churn Cumulative: 4991 | Contributors (this commit): 32 | Commits (past 90d): 96 | Contributors (cumulative): 41 | DMM Complexity: 0.0\n\nDIFF:\n@@ -29,8 +29,8 @@ from .exceptions import (\n     ConnectionError, HTTPError, RequestException, Timeout, TooManyRedirects,\n     URLRequired, SSLError)\n from .utils import (\n-    get_encoding_from_headers, stream_decode_response_unicode, decode_gzip,\n-    stream_decode_gzip, stream_decode_deflate, guess_filename, requote_path)\n+    get_encoding_from_headers, stream_decode_response_unicode,\n+    stream_decompress, guess_filename, requote_path)\n \n \n REDIRECT_STATI = (codes.moved, codes.found, codes.other, codes.temporary_moved)\n@@ -488,7 +488,7 @@ class Request(object):\n                         redirect=False,\n                         assert_same_host=False,\n                         preload_content=False,\n-                        decode_content=False,\n+                        decode_content=True,\n                         retries=self.config.get('max_retries', 0),\n                         timeout=self.timeout,\n                     )\n@@ -614,9 +614,9 @@ class Response(object):\n         gen = generate()\n \n         if 'gzip' in self.headers.get('content-encoding', ''):\n-            gen = stream_decode_gzip(gen)\n+            gen = stream_decompress(gen, mode='gzip')\n         elif 'deflate' in self.headers.get('content-encoding', ''):\n-            gen = stream_decode_deflate(gen)\n+            gen = stream_decompress(gen, mode='deflate')\n \n         if decode_unicode is None:\n             decode_unicode = self.config.get('decode_unicode')\n@@ -675,13 +675,6 @@ class Response(object):\n \n         content = self._content\n \n-        # Decode GZip'd content.\n-        if 'gzip' in self.headers.get('content-encoding', ''):\n-            try:\n-                content = decode_gzip(self._content)\n-            except zlib.error:\n-                pass\n-\n         # Decode unicode content.\n         if self.config.get('decode_unicode'):\n \n\n@@ -354,36 +354,38 @@ def decode_gzip(content):\n     return zlib.decompress(content, 16 + zlib.MAX_WBITS)\n \n \n-def stream_decode_gzip(iterator):\n-    \"\"\"Stream decodes a gzip-encoded iterator\"\"\"\n+def stream_decompress(iterator, mode='gzip'):\n+    \"\"\"\n+    Stream decodes an iterator over compressed data\n+\n+    :param iterator: An iterator over compressed data\n+    :param mode: 'gzip' or 'deflate'\n+    :return: An iterator over decompressed data\n+    \"\"\"\n+\n+    if mode not in ['gzip', 'deflate']:\n+        raise ValueError('stream_decompress mode must be gzip or deflate')\n+\n+    zlib_mode = 16 + zlib.MAX_WBITS if mode == 'gzip' else -zlib.MAX_WBITS\n+    dec = zlib.decompressobj(zlib_mode)\n     try:\n-        dec = zlib.decompressobj(16 + zlib.MAX_WBITS)\n         for chunk in iterator:\n             rv = dec.decompress(chunk)\n             if rv:\n                 yield rv\n-        buf = dec.decompress('')\n-        rv = buf + dec.flush()\n-        if rv:\n-            yield rv\n     except zlib.error:\n-        pass\n-\n-\n-def stream_decode_deflate(iterator):\n-    \"\"\"Stream decodes a deflate-encoded iterator\"\"\"\n-    try:\n-        dec = zlib.decompressobj(-zlib.MAX_WBITS)\n+        # If there was an error decompressing, just return the raw chunk\n+        yield chunk\n+        # Continue to return the rest of the raw data\n         for chunk in iterator:\n-            rv = dec.decompress(chunk)\n-            if rv:\n-                yield rv\n+            yield chunk\n+    else:\n+        # Make sure everything has been returned from the decompression object\n         buf = dec.decompress('')\n         rv = buf + dec.flush()\n         if rv:\n             yield rv\n-    except zlib.error:\n-        pass\n+\n \n def requote_path(path):\n     \"\"\"Re-quote the given URL path component.\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
