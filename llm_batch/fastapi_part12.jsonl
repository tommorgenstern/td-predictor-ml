{"custom_id": "fastapi#4a0316bcfe672564b69d0f45fd55238f38bac44d", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 4 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 5 | Churn Cumulative: 10 | Contributors (this commit): 1 | Commits (past 90d): 2 | Contributors (cumulative): 1 | DMM Complexity: None\n\nDIFF:\n@@ -1,4 +1,7 @@\n-def get_authorization_scheme_param(authorization_header_value: str):\n+from typing import Tuple\n+\n+\n+def get_authorization_scheme_param(authorization_header_value: str) -> Tuple[str, str]:\n     if not authorization_header_value:\n         return \"\", \"\"\n     scheme, _, param = authorization_header_value.partition(\" \")\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#5278314f2fbf95d711e94e14e2a5c8becde7e841", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 43 | Contributors (this commit): 1 | Commits (past 90d): 17 | Contributors (cumulative): 1 | DMM Complexity: None\n\nDIFF:\n@@ -1,6 +1,6 @@\n \"\"\"FastAPI framework, high performance, easy to learn, fast to code, ready for production\"\"\"\n \n-__version__ = \"0.1.14\"\n+__version__ = \"0.1.15\"\n \n from .applications import FastAPI\n from .routing import APIRouter\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#90af86814637a2384fe81fcc7cca394c13d9170a", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 275 | Lines Deleted: 1 | Files Changed: 6 | Hunks: 7 | Methods Changed: 21 | Complexity Δ (Sum/Max): 22/6 | Churn Δ: 276 | Churn Cumulative: 434 | Contributors (this commit): 1 | Commits (past 90d): 17 | Contributors (cumulative): 6 | DMM Complexity: 1.0\n\nDIFF:\n@@ -1,4 +1,10 @@\n from .api_key import APIKeyQuery, APIKeyHeader, APIKeyCookie\n-from .http import HTTPBasic, HTTPBearer, HTTPDigest\n+from .http import (\n+    HTTPBasic,\n+    HTTPBearer,\n+    HTTPDigest,\n+    HTTPBasicCredentials,\n+    HTTPAuthorizationCredentials,\n+)\n from .oauth2 import OAuth2PasswordRequestForm, OAuth2, OAuth2PasswordBearer\n from .open_id_connect_url import OpenIdConnect\n\n@@ -78,6 +78,11 @@ class HTTPBearer(HTTPBase):\n             raise HTTPException(\n                 status_code=HTTP_403_FORBIDDEN, detail=\"Not authenticated\"\n             )\n+        if scheme.lower() != \"bearer\":\n+            raise HTTPException(\n+                status_code=HTTP_403_FORBIDDEN,\n+                detail=\"Invalid authentication credentials\",\n+            )\n         return HTTPAuthorizationCredentials(scheme=scheme, credentials=credentials)\n \n \n@@ -93,4 +98,9 @@ class HTTPDigest(HTTPBase):\n             raise HTTPException(\n                 status_code=HTTP_403_FORBIDDEN, detail=\"Not authenticated\"\n             )\n+        if scheme.lower() != \"digest\":\n+            raise HTTPException(\n+                status_code=HTTP_403_FORBIDDEN,\n+                detail=\"Invalid authentication credentials\",\n+            )\n         return HTTPAuthorizationCredentials(scheme=scheme, credentials=credentials)\n\n@@ -0,0 +1,56 @@\n+from fastapi import FastAPI, Security\n+from fastapi.security.http import HTTPAuthorizationCredentials, HTTPBase\n+from starlette.testclient import TestClient\n+\n+app = FastAPI()\n+\n+security = HTTPBase(scheme=\"Other\")\n+\n+\n+@app.get(\"/users/me\")\n+def read_current_user(credentials: HTTPAuthorizationCredentials = Security(security)):\n+    return {\"scheme\": credentials.scheme, \"credentials\": credentials.credentials}\n+\n+\n+client = TestClient(app)\n+\n+openapi_schema = {\n+    \"openapi\": \"3.0.2\",\n+    \"info\": {\"title\": \"Fast API\", \"version\": \"0.1.0\"},\n+    \"paths\": {\n+        \"/users/me\": {\n+            \"get\": {\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                    }\n+                },\n+                \"summary\": \"Read Current User Get\",\n+                \"operationId\": \"read_current_user_users_me_get\",\n+                \"security\": [{\"HTTPBase\": []}],\n+            }\n+        }\n+    },\n+    \"components\": {\n+        \"securitySchemes\": {\"HTTPBase\": {\"type\": \"http\", \"scheme\": \"Other\"}}\n+    },\n+}\n+\n+\n+def test_openapi_schema():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200\n+    assert response.json() == openapi_schema\n+\n+\n+def test_security_http_base():\n+    response = client.get(\"/users/me\", headers={\"Authorization\": \"Other foobar\"})\n+    assert response.status_code == 200\n+    assert response.json() == {\"scheme\": \"Other\", \"credentials\": \"foobar\"}\n+\n+\n+def test_security_http_base_no_credentials():\n+    response = client.get(\"/users/me\")\n+    assert response.status_code == 403\n+    assert response.json() == {\"detail\": \"Not authenticated\"}\n\n@@ -0,0 +1,76 @@\n+from base64 import b64encode\n+\n+from fastapi import FastAPI, Security\n+from fastapi.security import HTTPBasic, HTTPBasicCredentials\n+from requests.auth import HTTPBasicAuth\n+from starlette.testclient import TestClient\n+\n+app = FastAPI()\n+\n+security = HTTPBasic()\n+\n+\n+@app.get(\"/users/me\")\n+def read_current_user(credentials: HTTPBasicCredentials = Security(security)):\n+    return {\"username\": credentials.username, \"password\": credentials.password}\n+\n+\n+client = TestClient(app)\n+\n+openapi_schema = {\n+    \"openapi\": \"3.0.2\",\n+    \"info\": {\"title\": \"Fast API\", \"version\": \"0.1.0\"},\n+    \"paths\": {\n+        \"/users/me\": {\n+            \"get\": {\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                    }\n+                },\n+                \"summary\": \"Read Current User Get\",\n+                \"operationId\": \"read_current_user_users_me_get\",\n+                \"security\": [{\"HTTPBasic\": []}],\n+            }\n+        }\n+    },\n+    \"components\": {\n+        \"securitySchemes\": {\"HTTPBasic\": {\"type\": \"http\", \"scheme\": \"basic\"}}\n+    },\n+}\n+\n+\n+def test_openapi_schema():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200\n+    assert response.json() == openapi_schema\n+\n+\n+def test_security_http_basic():\n+    auth = HTTPBasicAuth(username=\"john\", password=\"secret\")\n+    response = client.get(\"/users/me\", auth=auth)\n+    assert response.status_code == 200\n+    assert response.json() == {\"username\": \"john\", \"password\": \"secret\"}\n+\n+\n+def test_security_http_basic_no_credentials():\n+    response = client.get(\"/users/me\")\n+    assert response.status_code == 403\n+    assert response.json() == {\"detail\": \"Not authenticated\"}\n+\n+\n+def test_security_http_basic_invalid_credentials():\n+    response = client.get(\n+        \"/users/me\", headers={\"Authorization\": \"Basic notabase64token\"}\n+    )\n+    assert response.status_code == 403\n+    assert response.json() == {\"detail\": \"Invalid authentication credentials\"}\n+\n+\n+def test_security_http_basic_non_basic_credentials():\n+    payload = b64encode(b\"johnsecret\").decode(\"ascii\")\n+    auth_header = f\"Basic {payload}\"\n+    response = client.get(\"/users/me\", headers={\"Authorization\": auth_header})\n+    assert response.status_code == 403\n+    assert response.json() == {\"detail\": \"Invalid authentication credentials\"}\n\n@@ -0,0 +1,62 @@\n+from fastapi import FastAPI, Security\n+from fastapi.security import HTTPAuthorizationCredentials, HTTPBearer\n+from starlette.testclient import TestClient\n+\n+app = FastAPI()\n+\n+security = HTTPBearer()\n+\n+\n+@app.get(\"/users/me\")\n+def read_current_user(credentials: HTTPAuthorizationCredentials = Security(security)):\n+    return {\"scheme\": credentials.scheme, \"credentials\": credentials.credentials}\n+\n+\n+client = TestClient(app)\n+\n+openapi_schema = {\n+    \"openapi\": \"3.0.2\",\n+    \"info\": {\"title\": \"Fast API\", \"version\": \"0.1.0\"},\n+    \"paths\": {\n+        \"/users/me\": {\n+            \"get\": {\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                    }\n+                },\n+                \"summary\": \"Read Current User Get\",\n+                \"operationId\": \"read_current_user_users_me_get\",\n+                \"security\": [{\"HTTPBearer\": []}],\n+            }\n+        }\n+    },\n+    \"components\": {\n+        \"securitySchemes\": {\"HTTPBearer\": {\"type\": \"http\", \"scheme\": \"bearer\"}}\n+    },\n+}\n+\n+\n+def test_openapi_schema():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200\n+    assert response.json() == openapi_schema\n+\n+\n+def test_security_http_bearer():\n+    response = client.get(\"/users/me\", headers={\"Authorization\": \"Bearer foobar\"})\n+    assert response.status_code == 200\n+    assert response.json() == {\"scheme\": \"Bearer\", \"credentials\": \"foobar\"}\n+\n+\n+def test_security_http_bearer_no_credentials():\n+    response = client.get(\"/users/me\")\n+    assert response.status_code == 403\n+    assert response.json() == {\"detail\": \"Not authenticated\"}\n+\n+\n+def test_security_http_bearer_incorrect_scheme_credentials():\n+    response = client.get(\"/users/me\", headers={\"Authorization\": \"Basic notreally\"})\n+    assert response.status_code == 403\n+    assert response.json() == {\"detail\": \"Invalid authentication credentials\"}\n\n@@ -0,0 +1,64 @@\n+from fastapi import FastAPI, Security\n+from fastapi.security import HTTPAuthorizationCredentials, HTTPDigest\n+from starlette.testclient import TestClient\n+\n+app = FastAPI()\n+\n+security = HTTPDigest()\n+\n+\n+@app.get(\"/users/me\")\n+def read_current_user(credentials: HTTPAuthorizationCredentials = Security(security)):\n+    return {\"scheme\": credentials.scheme, \"credentials\": credentials.credentials}\n+\n+\n+client = TestClient(app)\n+\n+openapi_schema = {\n+    \"openapi\": \"3.0.2\",\n+    \"info\": {\"title\": \"Fast API\", \"version\": \"0.1.0\"},\n+    \"paths\": {\n+        \"/users/me\": {\n+            \"get\": {\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                    }\n+                },\n+                \"summary\": \"Read Current User Get\",\n+                \"operationId\": \"read_current_user_users_me_get\",\n+                \"security\": [{\"HTTPDigest\": []}],\n+            }\n+        }\n+    },\n+    \"components\": {\n+        \"securitySchemes\": {\"HTTPDigest\": {\"type\": \"http\", \"scheme\": \"digest\"}}\n+    },\n+}\n+\n+\n+def test_openapi_schema():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200\n+    assert response.json() == openapi_schema\n+\n+\n+def test_security_http_digest():\n+    response = client.get(\"/users/me\", headers={\"Authorization\": \"Digest foobar\"})\n+    assert response.status_code == 200\n+    assert response.json() == {\"scheme\": \"Digest\", \"credentials\": \"foobar\"}\n+\n+\n+def test_security_http_digest_no_credentials():\n+    response = client.get(\"/users/me\")\n+    assert response.status_code == 403\n+    assert response.json() == {\"detail\": \"Not authenticated\"}\n+\n+\n+def test_security_http_digest_incorrect_scheme_credentials():\n+    response = client.get(\n+        \"/users/me\", headers={\"Authorization\": \"Other invalidauthorization\"}\n+    )\n+    assert response.status_code == 403\n+    assert response.json() == {\"detail\": \"Invalid authentication credentials\"}\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#be957e7c99cde01aaddbbbd7d96bc78b92f1605e", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 370 | Lines Deleted: 6 | Files Changed: 4 | Hunks: 9 | Methods Changed: 15 | Complexity Δ (Sum/Max): 14/4 | Churn Δ: 376 | Churn Cumulative: 857 | Contributors (this commit): 1 | Commits (past 90d): 15 | Contributors (cumulative): 4 | DMM Complexity: 0.875\n\nDIFF:\n@@ -3,7 +3,7 @@ import inspect\n from copy import deepcopy\n from datetime import date, datetime, time, timedelta\n from decimal import Decimal\n-from typing import Any, Callable, Dict, List, Mapping, Sequence, Tuple, Type\n+from typing import Any, Callable, Dict, List, Mapping, Sequence, Tuple, Type, Union\n from uuid import UUID\n \n from fastapi import params\n@@ -13,11 +13,11 @@ from fastapi.utils import get_path_param_names\n from pydantic import BaseConfig, Schema, create_model\n from pydantic.error_wrappers import ErrorWrapper\n from pydantic.errors import MissingError\n-from pydantic.fields import Field, Required\n+from pydantic.fields import Field, Required, Shape\n from pydantic.schema import get_annotation_from_schema\n from pydantic.utils import lenient_issubclass\n from starlette.concurrency import run_in_threadpool\n-from starlette.requests import Request\n+from starlette.requests import Headers, QueryParams, Request\n \n param_supported_types = (\n     str,\n@@ -108,8 +108,8 @@ def get_dependant(*, path: str, call: Callable, name: str = None) -> Dependant:\n         elif isinstance(param.default, params.Param):\n             if param.annotation != param.empty:\n                 assert lenient_issubclass(\n-                    param.annotation, param_supported_types\n-                ), f\"Parameters for Path, Query, Header and Cookies must be of type str, int, float or bool: {param}\"\n+                    param.annotation, param_supported_types + (list, tuple, set)\n+                ), f\"Parameters for Path, Query, Header and Cookies must be of type str, int, float, bool, list, tuple or set: {param}\"\n             add_param_to_fields(\n                 param=param, dependant=dependant, default_schema=params.Query\n             )\n@@ -252,11 +252,17 @@ async def solve_dependencies(\n \n \n def request_params_to_args(\n-    required_params: Sequence[Field], received_params: Mapping[str, Any]\n+    required_params: Sequence[Field],\n+    received_params: Union[Mapping[str, Any], QueryParams, Headers],\n ) -> Tuple[Dict[str, Any], List[ErrorWrapper]]:\n     values = {}\n     errors = []\n     for field in required_params:\n+        if field.shape in {Shape.LIST, Shape.SET, Shape.TUPLE} and isinstance(\n+            received_params, (QueryParams, Headers)\n+        ):\n+            value = received_params.getlist(field.alias)\n+        else:\n             value = received_params.get(field.alias)\n         schema: params.Param = field.schema\n         assert isinstance(schema, params.Param), \"Params must be subclasses of Param\"\n\n@@ -0,0 +1,143 @@\n+from typing import List\n+\n+from fastapi import FastAPI\n+from pydantic import BaseModel\n+from starlette.testclient import TestClient\n+\n+app = FastAPI()\n+\n+\n+class Item(BaseModel):\n+    name: str\n+    age: int\n+\n+\n+@app.post(\"/items/\")\n+def save_item_no_body(item: List[Item]):\n+    return {\"item\": item}\n+\n+\n+client = TestClient(app)\n+\n+\n+openapi_schema = {\n+    \"openapi\": \"3.0.2\",\n+    \"info\": {\"title\": \"Fast API\", \"version\": \"0.1.0\"},\n+    \"paths\": {\n+        \"/items/\": {\n+            \"post\": {\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                    },\n+                    \"422\": {\n+                        \"description\": \"Validation Error\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\n+                                    \"$ref\": \"#/components/schemas/HTTPValidationError\"\n+                                }\n+                            }\n+                        },\n+                    },\n+                },\n+                \"summary\": \"Save Item No Body Post\",\n+                \"operationId\": \"save_item_no_body_items__post\",\n+                \"requestBody\": {\n+                    \"content\": {\n+                        \"application/json\": {\n+                            \"schema\": {\n+                                \"title\": \"Item\",\n+                                \"type\": \"array\",\n+                                \"items\": {\"$ref\": \"#/components/schemas/Item\"},\n+                            }\n+                        }\n+                    },\n+                    \"required\": True,\n+                },\n+            }\n+        }\n+    },\n+    \"components\": {\n+        \"schemas\": {\n+            \"Item\": {\n+                \"title\": \"Item\",\n+                \"required\": [\"name\", \"age\"],\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"name\": {\"title\": \"Name\", \"type\": \"string\"},\n+                    \"age\": {\"title\": \"Age\", \"type\": \"integer\"},\n+                },\n+            },\n+            \"ValidationError\": {\n+                \"title\": \"ValidationError\",\n+                \"required\": [\"loc\", \"msg\", \"type\"],\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"loc\": {\n+                        \"title\": \"Location\",\n+                        \"type\": \"array\",\n+                        \"items\": {\"type\": \"string\"},\n+                    },\n+                    \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n+                    \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n+                },\n+            },\n+            \"HTTPValidationError\": {\n+                \"title\": \"HTTPValidationError\",\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"detail\": {\n+                        \"title\": \"Detail\",\n+                        \"type\": \"array\",\n+                        \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n+                    }\n+                },\n+            },\n+        }\n+    },\n+}\n+\n+multiple_errors = {\n+    \"detail\": [\n+        {\n+            \"loc\": [\"body\", \"item\", 0, \"name\"],\n+            \"msg\": \"field required\",\n+            \"type\": \"value_error.missing\",\n+        },\n+        {\n+            \"loc\": [\"body\", \"item\", 0, \"age\"],\n+            \"msg\": \"value is not a valid integer\",\n+            \"type\": \"type_error.integer\",\n+        },\n+        {\n+            \"loc\": [\"body\", \"item\", 1, \"name\"],\n+            \"msg\": \"field required\",\n+            \"type\": \"value_error.missing\",\n+        },\n+        {\n+            \"loc\": [\"body\", \"item\", 1, \"age\"],\n+            \"msg\": \"value is not a valid integer\",\n+            \"type\": \"type_error.integer\",\n+        },\n+    ]\n+}\n+\n+\n+def test_openapi_schema():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200\n+    assert response.json() == openapi_schema\n+\n+\n+def test_put_correct_body():\n+    response = client.post(\"/items/\", json=[{\"name\": \"Foo\", \"age\": 5}])\n+    assert response.status_code == 200\n+    assert response.json() == {\"item\": [{\"name\": \"Foo\", \"age\": 5}]}\n+\n+\n+def test_put_incorrect_body():\n+    response = client.post(\"/items/\", json=[{\"age\": \"five\"}, {\"age\": \"six\"}])\n+    assert response.status_code == 422\n+    assert response.json() == multiple_errors\n\n@@ -0,0 +1,118 @@\n+from typing import List\n+\n+from fastapi import FastAPI, Query\n+from starlette.testclient import TestClient\n+\n+app = FastAPI()\n+\n+\n+@app.get(\"/items/\")\n+def read_items(q: List[int] = Query(None)):\n+    return {\"q\": q}\n+\n+\n+client = TestClient(app)\n+\n+\n+openapi_schema = {\n+    \"openapi\": \"3.0.2\",\n+    \"info\": {\"title\": \"Fast API\", \"version\": \"0.1.0\"},\n+    \"paths\": {\n+        \"/items/\": {\n+            \"get\": {\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                    },\n+                    \"422\": {\n+                        \"description\": \"Validation Error\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\n+                                    \"$ref\": \"#/components/schemas/HTTPValidationError\"\n+                                }\n+                            }\n+                        },\n+                    },\n+                },\n+                \"summary\": \"Read Items Get\",\n+                \"operationId\": \"read_items_items__get\",\n+                \"parameters\": [\n+                    {\n+                        \"required\": False,\n+                        \"schema\": {\n+                            \"title\": \"Q\",\n+                            \"type\": \"array\",\n+                            \"items\": {\"type\": \"integer\"},\n+                        },\n+                        \"name\": \"q\",\n+                        \"in\": \"query\",\n+                    }\n+                ],\n+            }\n+        }\n+    },\n+    \"components\": {\n+        \"schemas\": {\n+            \"ValidationError\": {\n+                \"title\": \"ValidationError\",\n+                \"required\": [\"loc\", \"msg\", \"type\"],\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"loc\": {\n+                        \"title\": \"Location\",\n+                        \"type\": \"array\",\n+                        \"items\": {\"type\": \"string\"},\n+                    },\n+                    \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n+                    \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n+                },\n+            },\n+            \"HTTPValidationError\": {\n+                \"title\": \"HTTPValidationError\",\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"detail\": {\n+                        \"title\": \"Detail\",\n+                        \"type\": \"array\",\n+                        \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n+                    }\n+                },\n+            },\n+        }\n+    },\n+}\n+\n+multiple_errors = {\n+    \"detail\": [\n+        {\n+            \"loc\": [\"query\", \"q\", 0],\n+            \"msg\": \"value is not a valid integer\",\n+            \"type\": \"type_error.integer\",\n+        },\n+        {\n+            \"loc\": [\"query\", \"q\", 1],\n+            \"msg\": \"value is not a valid integer\",\n+            \"type\": \"type_error.integer\",\n+        },\n+    ]\n+}\n+\n+\n+def test_openapi_schema():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200\n+    assert response.json() == openapi_schema\n+\n+\n+def test_multi_query():\n+    response = client.get(\"/items/?q=5&q=6\")\n+    assert response.status_code == 200\n+    assert response.json() == {\"q\": [5, 6]}\n+\n+\n+def test_multi_query_incorrect():\n+    response = client.get(\"/items/?q=five&q=six\")\n+    assert response.status_code == 422\n+    assert response.json() == multiple_errors\n\n@@ -0,0 +1,97 @@\n+from fastapi import FastAPI\n+from starlette.testclient import TestClient\n+\n+app = FastAPI()\n+\n+\n+@app.put(\"/items/{item_id}\")\n+def save_item_no_body(item_id: str):\n+    return {\"item_id\": item_id}\n+\n+\n+client = TestClient(app)\n+\n+\n+openapi_schema = {\n+    \"openapi\": \"3.0.2\",\n+    \"info\": {\"title\": \"Fast API\", \"version\": \"0.1.0\"},\n+    \"paths\": {\n+        \"/items/{item_id}\": {\n+            \"put\": {\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                    },\n+                    \"422\": {\n+                        \"description\": \"Validation Error\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\n+                                    \"$ref\": \"#/components/schemas/HTTPValidationError\"\n+                                }\n+                            }\n+                        },\n+                    },\n+                },\n+                \"summary\": \"Save Item No Body Put\",\n+                \"operationId\": \"save_item_no_body_items__item_id__put\",\n+                \"parameters\": [\n+                    {\n+                        \"required\": True,\n+                        \"schema\": {\"title\": \"Item_Id\", \"type\": \"string\"},\n+                        \"name\": \"item_id\",\n+                        \"in\": \"path\",\n+                    }\n+                ],\n+            }\n+        }\n+    },\n+    \"components\": {\n+        \"schemas\": {\n+            \"ValidationError\": {\n+                \"title\": \"ValidationError\",\n+                \"required\": [\"loc\", \"msg\", \"type\"],\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"loc\": {\n+                        \"title\": \"Location\",\n+                        \"type\": \"array\",\n+                        \"items\": {\"type\": \"string\"},\n+                    },\n+                    \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n+                    \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n+                },\n+            },\n+            \"HTTPValidationError\": {\n+                \"title\": \"HTTPValidationError\",\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"detail\": {\n+                        \"title\": \"Detail\",\n+                        \"type\": \"array\",\n+                        \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n+                    }\n+                },\n+            },\n+        }\n+    },\n+}\n+\n+\n+def test_openapi_schema():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200\n+    assert response.json() == openapi_schema\n+\n+\n+def test_put_no_body():\n+    response = client.put(\"/items/foo\")\n+    assert response.status_code == 200\n+    assert response.json() == {\"item_id\": \"foo\"}\n+\n+\n+def test_put_no_body_with_body():\n+    response = client.put(\"/items/foo\", json={\"name\": \"Foo\"})\n+    assert response.status_code == 200\n+    assert response.json() == {\"item_id\": \"foo\"}\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#ca0652aebf3a1e0b67def32c7c76624cca442c74", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 3 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 5 | Churn Cumulative: 504 | Contributors (this commit): 1 | Commits (past 90d): 13 | Contributors (cumulative): 1 | DMM Complexity: 0.0\n\nDIFF:\n@@ -3,7 +3,7 @@ import inspect\n from copy import deepcopy\n from datetime import date, datetime, time, timedelta\n from decimal import Decimal\n-from typing import Any, Callable, Dict, List, Mapping, Sequence, Tuple, Type, Union\n+from typing import Any, Callable, Dict, List, Mapping, Sequence, Set, Tuple, Type, Union\n from uuid import UUID\n \n from fastapi import params\n@@ -108,7 +108,8 @@ def get_dependant(*, path: str, call: Callable, name: str = None) -> Dependant:\n         elif isinstance(param.default, params.Param):\n             if param.annotation != param.empty:\n                 assert lenient_issubclass(\n-                    param.annotation, param_supported_types + (list, tuple, set)\n+                    param.annotation,\n+                    param_supported_types + (List, Tuple, Set, list, tuple, set),\n                 ), f\"Parameters for Path, Query, Header and Cookies must be of type str, int, float, bool, list, tuple or set: {param}\"\n             add_param_to_fields(\n                 param=param, dependant=dependant, default_schema=params.Query\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#60599bad99dc4e2278c8fcf20c85c4afb4b0ca54", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 13 | Lines Deleted: 5 | Files Changed: 2 | Hunks: 4 | Methods Changed: 1 | Complexity Δ (Sum/Max): 2/2 | Churn Δ: 18 | Churn Cumulative: 934 | Contributors (this commit): 1 | Commits (past 90d): 22 | Contributors (cumulative): 2 | DMM Complexity: 0.0\n\nDIFF:\n@@ -3,7 +3,7 @@ import inspect\n from copy import deepcopy\n from datetime import date, datetime, time, timedelta\n from decimal import Decimal\n-from typing import Any, Callable, Dict, List, Mapping, Sequence, Set, Tuple, Type, Union\n+from typing import Any, Callable, Dict, List, Mapping, Sequence, Tuple, Type, Union\n from uuid import UUID\n \n from fastapi import params\n@@ -107,10 +107,18 @@ def get_dependant(*, path: str, call: Callable, name: str = None) -> Dependant:\n             )\n         elif isinstance(param.default, params.Param):\n             if param.annotation != param.empty:\n+                origin = getattr(param.annotation, \"__origin__\", None)\n+                param_all_types = param_supported_types + (list, tuple, set)\n+                if isinstance(param.default, (params.Query, params.Header)):\n                     assert lenient_issubclass(\n-                    param.annotation,\n-                    param_supported_types + (List, Tuple, Set, list, tuple, set),\n-                ), f\"Parameters for Path, Query, Header and Cookies must be of type str, int, float, bool, list, tuple or set: {param}\"\n+                        param.annotation, param_all_types\n+                    ) or lenient_issubclass(\n+                        origin, param_all_types\n+                    ), f\"Parameters for Query and Header must be of type str, int, float, bool, list, tuple or set: {param}\"\n+                else:\n+                    assert lenient_issubclass(\n+                        param.annotation, param_supported_types\n+                    ), f\"Parameters for Path and Cookies must be of type str, int, float, bool: {param}\"\n             add_param_to_fields(\n                 param=param, dependant=dependant, default_schema=params.Query\n             )\n\n@@ -322,7 +322,7 @@ class OpenIdConnect(SecurityBase):\n     openIdConnectUrl: str\n \n \n-SecurityScheme = Union[APIKey, HTTPBase, HTTPBearer, OAuth2, OpenIdConnect]\n+SecurityScheme = Union[APIKey, HTTPBase, OAuth2, OpenIdConnect, HTTPBearer]\n \n \n class Components(BaseModel):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#3c08b05ea6b58b3e5564c026f071cbb0979a6797", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 45 | Contributors (this commit): 1 | Commits (past 90d): 18 | Contributors (cumulative): 1 | DMM Complexity: None\n\nDIFF:\n@@ -1,6 +1,6 @@\n \"\"\"FastAPI framework, high performance, easy to learn, fast to code, ready for production\"\"\"\n \n-__version__ = \"0.1.15\"\n+__version__ = \"0.1.16\"\n \n from .applications import FastAPI\n from .routing import APIRouter\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#9a8349bf96d350442d7784f7e141b695b1752861", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 48 | Lines Deleted: 0 | Files Changed: 2 | Hunks: 4 | Methods Changed: 1 | Complexity Δ (Sum/Max): 3/3 | Churn Δ: 48 | Churn Cumulative: 154 | Contributors (this commit): 1 | Commits (past 90d): 5 | Contributors (cumulative): 2 | DMM Complexity: 1.0\n\nDIFF:\n@@ -10,3 +10,8 @@ async def common_parameters(q: str = None, skip: int = 0, limit: int = 100):\n @app.get(\"/items/\")\n async def read_items(commons: dict = Depends(common_parameters)):\n     return commons\n+\n+\n+@app.get(\"/users/\")\n+async def read_users(commons: dict = Depends(common_parameters)):\n+    return commons\n\n@@ -50,7 +50,49 @@ openapi_schema = {\n                     },\n                 ],\n             }\n+        },\n+        \"/users/\": {\n+            \"get\": {\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                    },\n+                    \"422\": {\n+                        \"description\": \"Validation Error\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\n+                                    \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                 }\n+                            }\n+                        },\n+                    },\n+                },\n+                \"summary\": \"Read Users Get\",\n+                \"operationId\": \"read_users_users__get\",\n+                \"parameters\": [\n+                    {\n+                        \"required\": False,\n+                        \"schema\": {\"title\": \"Q\", \"type\": \"string\"},\n+                        \"name\": \"q\",\n+                        \"in\": \"query\",\n+                    },\n+                    {\n+                        \"required\": False,\n+                        \"schema\": {\"title\": \"Skip\", \"type\": \"integer\", \"default\": 0},\n+                        \"name\": \"skip\",\n+                        \"in\": \"query\",\n+                    },\n+                    {\n+                        \"required\": False,\n+                        \"schema\": {\"title\": \"Limit\", \"type\": \"integer\", \"default\": 100},\n+                        \"name\": \"limit\",\n+                        \"in\": \"query\",\n+                    },\n+                ],\n+            }\n+        },\n     },\n     \"components\": {\n         \"schemas\": {\n@@ -97,6 +139,7 @@ def test_openapi_schema():\n         (\"/items?q=foo\", 200, {\"q\": \"foo\", \"skip\": 0, \"limit\": 100}),\n         (\"/items?q=foo&skip=5\", 200, {\"q\": \"foo\", \"skip\": 5, \"limit\": 100}),\n         (\"/items?q=foo&skip=5&limit=30\", 200, {\"q\": \"foo\", \"skip\": 5, \"limit\": 30}),\n+        (\"/users\", 200, {\"q\": None, \"skip\": 0, \"limit\": 100}),\n         (\"/openapi.json\", 200, openapi_schema),\n     ],\n )\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#577c5a84db307a13668f328857f8ea593d6048da", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 30 | Lines Deleted: 10 | Files Changed: 4 | Hunks: 11 | Methods Changed: 7 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 40 | Churn Cumulative: 2722 | Contributors (this commit): 1 | Commits (past 90d): 40 | Contributors (cumulative): 4 | DMM Complexity: 0.8181818181818182\n\nDIFF:\n@@ -9,8 +9,8 @@ from uuid import UUID\n from fastapi import params\n from fastapi.dependencies.models import Dependant, SecurityRequirement\n from fastapi.security.base import SecurityBase\n-from fastapi.utils import get_path_param_names\n-from pydantic import BaseConfig, Schema, create_model\n+from fastapi.utils import UnconstrainedConfig, get_path_param_names\n+from pydantic import Schema, create_model\n from pydantic.error_wrappers import ErrorWrapper\n from pydantic.errors import MissingError\n from pydantic.fields import Field, Required, Shape\n@@ -163,7 +163,7 @@ def add_param_to_fields(\n         default=None if required else default_value,\n         alias=alias,\n         required=required,\n-        model_config=BaseConfig(),\n+        model_config=UnconstrainedConfig,\n         class_validators=[],\n         schema=schema,\n     )\n@@ -197,7 +197,7 @@ def add_param_to_body_fields(*, param: inspect.Parameter, dependant: Dependant)\n         default=None if required else default_value,\n         alias=schema.alias or param.name,\n         required=required,\n-        model_config=BaseConfig,\n+        model_config=UnconstrainedConfig,\n         class_validators=[],\n         schema=schema,\n     )\n@@ -281,7 +281,7 @@ def request_params_to_args(\n                     ErrorWrapper(\n                         MissingError(),\n                         loc=(schema.in_.value, field.alias),\n-                        config=BaseConfig,\n+                        config=UnconstrainedConfig,\n                     )\n                 )\n             else:\n@@ -315,7 +315,9 @@ async def request_body_to_args(\n                 if field.required:\n                     errors.append(\n                         ErrorWrapper(\n-                            MissingError(), loc=(\"body\", field.alias), config=BaseConfig\n+                            MissingError(),\n+                            loc=(\"body\", field.alias),\n+                            config=UnconstrainedConfig,\n                         )\n                     )\n                 else:\n@@ -356,7 +358,7 @@ def get_body_field(*, dependant: Dependant, name: str) -> Field:\n         type_=BodyModel,\n         default=None,\n         required=required,\n-        model_config=BaseConfig,\n+        model_config=UnconstrainedConfig,\n         class_validators=[],\n         alias=\"body\",\n         schema=BodySchema(None),\n\n@@ -7,7 +7,8 @@ from fastapi import params\n from fastapi.dependencies.models import Dependant\n from fastapi.dependencies.utils import get_body_field, get_dependant, solve_dependencies\n from fastapi.encoders import jsonable_encoder\n-from pydantic import BaseConfig, BaseModel, Schema\n+from fastapi.utils import UnconstrainedConfig\n+from pydantic import BaseModel, Schema\n from pydantic.error_wrappers import ErrorWrapper, ValidationError\n from pydantic.fields import Field\n from pydantic.utils import lenient_issubclass\n@@ -130,7 +131,7 @@ class APIRoute(routing.Route):\n                 class_validators=[],\n                 default=None,\n                 required=False,\n-                model_config=BaseConfig(),\n+                model_config=UnconstrainedConfig,\n                 schema=Schema(None),\n             )\n         else:\n\n@@ -3,12 +3,17 @@ from typing import Any, Dict, List, Sequence, Set, Type\n \n from fastapi import routing\n from fastapi.openapi.constants import REF_PREFIX\n-from pydantic import BaseModel\n+from pydantic import BaseConfig, BaseModel\n from pydantic.fields import Field\n from pydantic.schema import get_flat_models_from_fields, model_process_schema\n from starlette.routing import BaseRoute\n \n \n+class UnconstrainedConfig(BaseConfig):\n+    min_anystr_length = None\n+    max_anystr_length = None\n+\n+\n def get_flat_models_from_routes(\n     routes: Sequence[Type[BaseRoute]]\n ) -> Set[Type[BaseModel]]:\n\n@@ -119,3 +119,15 @@ def test_post_file(tmpdir):\n     response = client.post(\"/files/\", files={\"file\": open(path, \"rb\")})\n     assert response.status_code == 200\n     assert response.json() == {\"file_size\": 14}\n+\n+\n+def test_post_large_file(tmpdir):\n+    default_pydantic_max_size = 2 ** 16\n+    path = os.path.join(tmpdir, \"test.txt\")\n+    with open(path, \"wb\") as file:\n+        file.write(b\"x\" * (default_pydantic_max_size + 1))\n+\n+    client = TestClient(app)\n+    response = client.post(\"/files/\", files={\"file\": open(path, \"rb\")})\n+    assert response.status_code == 200\n+    assert response.json() == {\"file_size\": default_pydantic_max_size + 1}\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#e5b341c7ddbd085e7203276398bdf10a1d86446b", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 47 | Contributors (this commit): 1 | Commits (past 90d): 19 | Contributors (cumulative): 1 | DMM Complexity: None\n\nDIFF:\n@@ -1,6 +1,6 @@\n \"\"\"FastAPI framework, high performance, easy to learn, fast to code, ready for production\"\"\"\n \n-__version__ = \"0.1.16\"\n+__version__ = \"0.1.17\"\n \n from .applications import FastAPI\n from .routing import APIRouter\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#8568862a192fb53831cd9bb1d546d6d8b1312507", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 17 | Lines Deleted: 0 | Files Changed: 2 | Hunks: 2 | Methods Changed: 2 | Complexity Δ (Sum/Max): 2/1 | Churn Δ: 17 | Churn Cumulative: 17 | Contributors (this commit): 1 | Commits (past 90d): 2 | Contributors (cumulative): 2 | DMM Complexity: 1.0\n\nDIFF:\n@@ -0,0 +1,8 @@\n+from fastapi import FastAPI\n+\n+app = FastAPI()\n+\n+\n+@app.post(\"/items/\", status_code=201)\n+async def create_item(name: str):\n+    return {\"name\": name}\n\n@@ -0,0 +1,9 @@\n+from fastapi import FastAPI\n+from starlette.status import HTTP_201_CREATED\n+\n+app = FastAPI()\n+\n+\n+@app.post(\"/items/\", status_code=HTTP_201_CREATED)\n+async def create_item(name: str):\n+    return {\"name\": name}\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#d692c28f52a5390468bad0f321c24dc0173c08ed", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 25 | Lines Deleted: 20 | Files Changed: 4 | Hunks: 13 | Methods Changed: 0 | Complexity Δ (Sum/Max): 6/3 | Churn Δ: 45 | Churn Cumulative: 45 | Contributors (this commit): 1 | Commits (past 90d): 4 | Contributors (cumulative): 4 | DMM Complexity: None\n\nDIFF:\n@@ -1,7 +1,7 @@\n from fastapi import FastAPI\n \n-from .routers.tutorial001 import router as users_router\n-from .routers.tutorial002 import router as items_router\n+from .routers.items import router as items_router\n+from .routers.users import router as users_router\n \n app = FastAPI()\n \n\n@@ -3,11 +3,11 @@ from fastapi import APIRouter\n router = APIRouter()\n \n \n-@router.get(\"/\")\n+@router.get(\"/\", tags=[\"items\"])\n async def read_items():\n     return [{\"name\": \"Item Foo\"}, {\"name\": \"item Bar\"}]\n \n \n-@router.get(\"/{item_id}\")\n+@router.get(\"/{item_id}\", tags=[\"items\"])\n async def read_item(item_id: str):\n     return {\"name\": \"Fake Specific Item\", \"item_id\": item_id}\n\n@@ -3,16 +3,16 @@ from fastapi import APIRouter\n router = APIRouter()\n \n \n-@router.get(\"/users/\")\n+@router.get(\"/users/\", tags=[\"users\"])\n async def read_users():\n     return [{\"username\": \"Foo\"}, {\"username\": \"Bar\"}]\n \n \n-@router.get(\"/users/me\")\n+@router.get(\"/users/me\", tags=[\"users\"])\n async def read_user_me():\n     return {\"username\": \"fakecurrentuser\"}\n \n \n-@router.get(\"/users/{username}\")\n+@router.get(\"/users/{username}\", tags=[\"users\"])\n async def read_user(username: str):\n     return {\"username\": username}\n\n@@ -1,7 +1,7 @@\n import pytest\n from starlette.testclient import TestClient\n \n-from bigger_applications.app.tutorial003 import app\n+from bigger_applications.app.main import app\n \n client = TestClient(app)\n \n@@ -17,10 +17,24 @@ openapi_schema = {\n                         \"content\": {\"application/json\": {\"schema\": {}}},\n                     }\n                 },\n+                \"tags\": [\"users\"],\n                 \"summary\": \"Read Users Get\",\n                 \"operationId\": \"read_users_users__get\",\n             }\n         },\n+        \"/users/me\": {\n+            \"get\": {\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                    }\n+                },\n+                \"tags\": [\"users\"],\n+                \"summary\": \"Read User Me Get\",\n+                \"operationId\": \"read_user_me_users_me_get\",\n+            }\n+        },\n         \"/users/{username}\": {\n             \"get\": {\n                 \"responses\": {\n@@ -39,6 +53,7 @@ openapi_schema = {\n                         },\n                     },\n                 },\n+                \"tags\": [\"users\"],\n                 \"summary\": \"Read User Get\",\n                 \"operationId\": \"read_user_users__username__get\",\n                 \"parameters\": [\n@@ -51,18 +66,6 @@ openapi_schema = {\n                 ],\n             }\n         },\n-        \"/users/me\": {\n-            \"get\": {\n-                \"responses\": {\n-                    \"200\": {\n-                        \"description\": \"Successful Response\",\n-                        \"content\": {\"application/json\": {\"schema\": {}}},\n-                    }\n-                },\n-                \"summary\": \"Read User Me Get\",\n-                \"operationId\": \"read_user_me_users_me_get\",\n-            }\n-        },\n         \"/items/\": {\n             \"get\": {\n                 \"responses\": {\n@@ -71,6 +74,7 @@ openapi_schema = {\n                         \"content\": {\"application/json\": {\"schema\": {}}},\n                     }\n                 },\n+                \"tags\": [\"items\"],\n                 \"summary\": \"Read Items Get\",\n                 \"operationId\": \"read_items_items__get\",\n             }\n@@ -93,6 +97,7 @@ openapi_schema = {\n                         },\n                     },\n                 },\n+                \"tags\": [\"items\"],\n                 \"summary\": \"Read Item Get\",\n                 \"operationId\": \"read_item_items__item_id__get\",\n                 \"parameters\": [\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#3d2c0993c128d406f7f53c1ddbfc9b5d42c08275", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 49 | Contributors (this commit): 1 | Commits (past 90d): 20 | Contributors (cumulative): 1 | DMM Complexity: None\n\nDIFF:\n@@ -1,6 +1,6 @@\n \"\"\"FastAPI framework, high performance, easy to learn, fast to code, ready for production\"\"\"\n \n-__version__ = \"0.1.17\"\n+__version__ = \"0.1.18\"\n \n from .applications import FastAPI\n from .routing import APIRouter\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#5c9c088a2a13e888cdb93eb92d7af72058003397", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 4 | Files Changed: 1 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 6 | Churn Cumulative: 1963 | Contributors (this commit): 2 | Commits (past 90d): 16 | Contributors (cumulative): 2 | DMM Complexity: 1.0\n\nDIFF:\n@@ -18,7 +18,7 @@ from starlette.exceptions import HTTPException\n from starlette.formparsers import UploadFile\n from starlette.requests import Request\n from starlette.responses import JSONResponse, Response\n-from starlette.routing import get_name, request_response\n+from starlette.routing import compile_path, get_name, request_response\n from starlette.status import HTTP_422_UNPROCESSABLE_ENTITY\n \n \n@@ -149,9 +149,7 @@ class APIRoute(routing.Route):\n         self.include_in_schema = include_in_schema\n         self.content_type = content_type\n \n-        self.path_regex, self.path_format, self.param_convertors = self.compile_path(\n-            path\n-        )\n+        self.path_regex, self.path_format, self.param_convertors = compile_path(path)\n         assert inspect.isfunction(endpoint) or inspect.ismethod(\n             endpoint\n         ), f\"An endpoint must be a function or method\"\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
