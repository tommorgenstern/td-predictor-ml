{"custom_id": "flask#be42d5665e89c7fd57352c0e6b97355d6b3500f3", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 171 | Lines Deleted: 146 | Files Changed: 2 | Hunks: 30 | Methods Changed: 46 | Complexity Δ (Sum/Max): 0/13 | Churn Δ: 317 | Churn Cumulative: 868 | Contributors (this commit): 1 | Commits (past 90d): 11 | Contributors (cumulative): 2 | DMM Complexity: None\n\nDIFF:\n@@ -1,25 +1,16 @@\n # -*- coding: utf-8 -*-\n \"\"\"\n-    tests.config\n-    ~~~~~~~~~~~~~~~~~~~~~~\n+    tests.test_config\n+    ~~~~~~~~~~~~~~~~~\n \n-    Configuration and instances.\n-\n-    :copyright: (c) 2014 by Armin Ronacher.\n+    :copyright: (c) 2014 by the Flask Team, see AUTHORS for more details.\n     :license: BSD, see LICENSE for more details.\n \"\"\"\n \n import pytest\n \n import os\n-import sys\n import flask\n-import pkgutil\n-import unittest\n-import textwrap\n-from contextlib import contextmanager\n-\n-from flask._compat import PY2\n \n \n # config keys used for the TestConfig\n@@ -27,50 +18,52 @@ TEST_KEY = 'foo'\n SECRET_KEY = 'devkey'\n \n \n-class TestConfig(object):\n-\n-    def common_object_test(self, app):\n+def common_object_test(app):\n     assert app.secret_key == 'devkey'\n     assert app.config['TEST_KEY'] == 'foo'\n     assert 'TestConfig' not in app.config\n \n-    def test_config_from_file(self):\n+\n+def test_config_from_file():\n     app = flask.Flask(__name__)\n     app.config.from_pyfile(__file__.rsplit('.', 1)[0] + '.py')\n-        self.common_object_test(app)\n+    common_object_test(app)\n \n-    def test_config_from_object(self):\n+\n+def test_config_from_object():\n     app = flask.Flask(__name__)\n     app.config.from_object(__name__)\n-        self.common_object_test(app)\n+    common_object_test(app)\n \n-    def test_config_from_json(self):\n+\n+def test_config_from_json():\n     app = flask.Flask(__name__)\n     current_dir = os.path.dirname(os.path.abspath(__file__))\n     app.config.from_json(os.path.join(current_dir, 'static', 'config.json'))\n-        self.common_object_test(app)\n+    common_object_test(app)\n \n-    def test_config_from_mapping(self):\n+\n+def test_config_from_mapping():\n     app = flask.Flask(__name__)\n     app.config.from_mapping({\n         'SECRET_KEY': 'devkey',\n         'TEST_KEY': 'foo'\n     })\n-        self.common_object_test(app)\n+    common_object_test(app)\n \n     app = flask.Flask(__name__)\n     app.config.from_mapping([\n         ('SECRET_KEY', 'devkey'),\n         ('TEST_KEY', 'foo')\n     ])\n-        self.common_object_test(app)\n+    common_object_test(app)\n \n     app = flask.Flask(__name__)\n     app.config.from_mapping(\n         SECRET_KEY='devkey',\n         TEST_KEY='foo'\n     )\n-        self.common_object_test(app)\n+    common_object_test(app)\n \n     app = flask.Flask(__name__)\n     with pytest.raises(TypeError):\n@@ -78,16 +71,19 @@ class TestConfig(object):\n             {}, {}\n         )\n \n-    def test_config_from_class(self):\n+\n+def test_config_from_class():\n     class Base(object):\n         TEST_KEY = 'foo'\n+\n     class Test(Base):\n         SECRET_KEY = 'devkey'\n     app = flask.Flask(__name__)\n     app.config.from_object(Test)\n-        self.common_object_test(app)\n+    common_object_test(app)\n \n-    def test_config_from_envvar(self):\n+\n+def test_config_from_envvar():\n     env = os.environ\n     try:\n         os.environ = {}\n@@ -102,11 +98,12 @@ class TestConfig(object):\n \n         os.environ = {'FOO_SETTINGS': __file__.rsplit('.', 1)[0] + '.py'}\n         assert app.config.from_envvar('FOO_SETTINGS')\n-            self.common_object_test(app)\n+        common_object_test(app)\n     finally:\n         os.environ = env\n \n-    def test_config_from_envvar_missing(self):\n+\n+def test_config_from_envvar_missing():\n     env = os.environ\n     try:\n         os.environ = {'FOO_SETTINGS': 'missing.cfg'}\n@@ -124,7 +121,8 @@ class TestConfig(object):\n     finally:\n         os.environ = env\n \n-    def test_config_missing(self):\n+\n+def test_config_missing():\n     app = flask.Flask(__name__)\n     try:\n         app.config.from_pyfile('missing.cfg')\n@@ -137,7 +135,8 @@ class TestConfig(object):\n         assert 0, 'expected config'\n     assert not app.config.from_pyfile('missing.cfg', silent=True)\n \n-    def test_config_missing_json(self):\n+\n+def test_config_missing_json():\n     app = flask.Flask(__name__)\n     try:\n         app.config.from_json('missing.json')\n@@ -150,22 +149,26 @@ class TestConfig(object):\n         assert 0, 'expected config'\n     assert not app.config.from_json('missing.json', silent=True)\n \n-    def test_custom_config_class(self):\n+\n+def test_custom_config_class():\n     class Config(flask.Config):\n         pass\n+\n     class Flask(flask.Flask):\n         config_class = Config\n     app = Flask(__name__)\n     assert isinstance(app.config, Config)\n     app.config.from_object(__name__)\n-        self.common_object_test(app)\n+    common_object_test(app)\n \n-    def test_session_lifetime(self):\n+\n+def test_session_lifetime():\n     app = flask.Flask(__name__)\n     app.config['PERMANENT_SESSION_LIFETIME'] = 42\n     assert app.permanent_session_lifetime.seconds == 42\n \n-    def test_get_namespace(self):\n+\n+def test_get_namespace():\n     app = flask.Flask(__name__)\n     app.config['FOO_OPTION_1'] = 'foo option 1'\n     app.config['FOO_OPTION_2'] = 'foo option 2'\n@@ -179,113 +182,3 @@ class TestConfig(object):\n     assert 2 == len(bar_options)\n     assert 'bar stuff 1' == bar_options['STUFF_1']\n     assert 'bar stuff 2' == bar_options['STUFF_2']\n-\n-\n-class TestInstance(object):\n-    def test_explicit_instance_paths(self, modules_tmpdir):\n-        with pytest.raises(ValueError) as excinfo:\n-            flask.Flask(__name__, instance_path='instance')\n-        assert 'must be absolute' in str(excinfo.value)\n-\n-        app = flask.Flask(__name__, instance_path=str(modules_tmpdir))\n-        assert app.instance_path == str(modules_tmpdir)\n-\n-    def test_main_module_paths(self, modules_tmpdir, purge_module):\n-        app = modules_tmpdir.join('main_app.py')\n-        app.write('import flask\\n\\napp = flask.Flask(\"__main__\")')\n-        purge_module('main_app')\n-\n-        from main_app import app\n-        here = os.path.abspath(os.getcwd())\n-        assert app.instance_path == os.path.join(here, 'instance')\n-\n-    def test_uninstalled_module_paths(self, modules_tmpdir, purge_module):\n-        app = modules_tmpdir.join('config_module_app.py').write(\n-            'import os\\n'\n-            'import flask\\n'\n-            'here = os.path.abspath(os.path.dirname(__file__))\\n'\n-            'app = flask.Flask(__name__)\\n'\n-        )\n-        purge_module('config_module_app')\n-\n-        from config_module_app import app\n-        assert app.instance_path == str(modules_tmpdir.join('instance'))\n-\n-    def test_uninstalled_package_paths(self, modules_tmpdir, purge_module):\n-        app = modules_tmpdir.mkdir('config_package_app')\n-        init = app.join('__init__.py')\n-        init.write(\n-            'import os\\n'\n-            'import flask\\n'\n-            'here = os.path.abspath(os.path.dirname(__file__))\\n'\n-            'app = flask.Flask(__name__)\\n'\n-        )\n-        purge_module('config_package_app')\n-\n-        from config_package_app import app\n-        assert app.instance_path == str(modules_tmpdir.join('instance'))\n-\n-    def test_installed_module_paths(self, modules_tmpdir, modules_tmpdir_prefix,\n-                                    purge_module, site_packages, limit_loader):\n-        site_packages.join('site_app.py').write(\n-            'import flask\\n'\n-            'app = flask.Flask(__name__)\\n'\n-        )\n-        purge_module('site_app')\n-\n-        from site_app import app\n-        assert app.instance_path == \\\n-            modules_tmpdir.join('var').join('site_app-instance')\n-\n-    def test_installed_package_paths(self, limit_loader, modules_tmpdir,\n-                                     modules_tmpdir_prefix, purge_module,\n-                                     monkeypatch):\n-        installed_path = modules_tmpdir.mkdir('path')\n-        monkeypatch.syspath_prepend(installed_path)\n-\n-        app = installed_path.mkdir('installed_package')\n-        init = app.join('__init__.py')\n-        init.write('import flask\\napp = flask.Flask(__name__)')\n-        purge_module('installed_package')\n-\n-        from installed_package import app\n-        assert app.instance_path == \\\n-            modules_tmpdir.join('var').join('installed_package-instance')\n-\n-    def test_prefix_package_paths(self, limit_loader, modules_tmpdir,\n-                                  modules_tmpdir_prefix, purge_module,\n-                                  site_packages):\n-        app = site_packages.mkdir('site_package')\n-        init = app.join('__init__.py')\n-        init.write('import flask\\napp = flask.Flask(__name__)')\n-        purge_module('site_package')\n-\n-        import site_package\n-        assert site_package.app.instance_path == \\\n-            modules_tmpdir.join('var').join('site_package-instance')\n-\n-    def test_egg_installed_paths(self, install_egg, modules_tmpdir,\n-                                 modules_tmpdir_prefix):\n-        modules_tmpdir.mkdir('site_egg').join('__init__.py').write(\n-            'import flask\\n\\napp = flask.Flask(__name__)'\n-        )\n-        install_egg('site_egg')\n-        try:\n-            import site_egg\n-            assert site_egg.app.instance_path == \\\n-                str(modules_tmpdir.join('var/').join('site_egg-instance'))\n-        finally:\n-            if 'site_egg' in sys.modules:\n-                del sys.modules['site_egg']\n-\n-    if PY2:\n-        def test_meta_path_loader_without_is_package(self):\n-            class Loader(object):\n-                def find_module(self, name):\n-                    return self\n-            sys.meta_path.append(Loader())\n-            try:\n-                with pytest.raises(AttributeError):\n-                    flask.Flask(__name__)\n-            finally:\n-                sys.meta_path.pop()\n\n@@ -0,0 +1,132 @@\n+# -*- coding: utf-8 -*-\n+\"\"\"\n+    tests.test_instance\n+    ~~~~~~~~~~~~~~~~~~~\n+\n+    :copyright: (c) 2014 by the Flask Team, see AUTHORS for more details.\n+    :license: BSD, see LICENSE for more details.\n+\"\"\"\n+import os\n+import sys\n+\n+import pytest\n+import flask\n+from flask._compat import PY2\n+\n+\n+def test_explicit_instance_paths(modules_tmpdir):\n+    with pytest.raises(ValueError) as excinfo:\n+        flask.Flask(__name__, instance_path='instance')\n+    assert 'must be absolute' in str(excinfo.value)\n+\n+    app = flask.Flask(__name__, instance_path=str(modules_tmpdir))\n+    assert app.instance_path == str(modules_tmpdir)\n+\n+\n+def test_main_module_paths(modules_tmpdir, purge_module):\n+    app = modules_tmpdir.join('main_app.py')\n+    app.write('import flask\\n\\napp = flask.Flask(\"__main__\")')\n+    purge_module('main_app')\n+\n+    from main_app import app\n+    here = os.path.abspath(os.getcwd())\n+    assert app.instance_path == os.path.join(here, 'instance')\n+\n+\n+def test_uninstalled_module_paths(modules_tmpdir, purge_module):\n+    app = modules_tmpdir.join('config_module_app.py').write(\n+        'import os\\n'\n+        'import flask\\n'\n+        'here = os.path.abspath(os.path.dirname(__file__))\\n'\n+        'app = flask.Flask(__name__)\\n'\n+    )\n+    purge_module('config_module_app')\n+\n+    from config_module_app import app\n+    assert app.instance_path == str(modules_tmpdir.join('instance'))\n+\n+\n+def test_uninstalled_package_paths(modules_tmpdir, purge_module):\n+    app = modules_tmpdir.mkdir('config_package_app')\n+    init = app.join('__init__.py')\n+    init.write(\n+        'import os\\n'\n+        'import flask\\n'\n+        'here = os.path.abspath(os.path.dirname(__file__))\\n'\n+        'app = flask.Flask(__name__)\\n'\n+    )\n+    purge_module('config_package_app')\n+\n+    from config_package_app import app\n+    assert app.instance_path == str(modules_tmpdir.join('instance'))\n+\n+\n+def test_installed_module_paths(modules_tmpdir, modules_tmpdir_prefix,\n+                                purge_module, site_packages, limit_loader):\n+    site_packages.join('site_app.py').write(\n+        'import flask\\n'\n+        'app = flask.Flask(__name__)\\n'\n+    )\n+    purge_module('site_app')\n+\n+    from site_app import app\n+    assert app.instance_path == \\\n+        modules_tmpdir.join('var').join('site_app-instance')\n+\n+\n+def test_installed_package_paths(limit_loader, modules_tmpdir,\n+                                 modules_tmpdir_prefix, purge_module,\n+                                 monkeypatch):\n+    installed_path = modules_tmpdir.mkdir('path')\n+    monkeypatch.syspath_prepend(installed_path)\n+\n+    app = installed_path.mkdir('installed_package')\n+    init = app.join('__init__.py')\n+    init.write('import flask\\napp = flask.Flask(__name__)')\n+    purge_module('installed_package')\n+\n+    from installed_package import app\n+    assert app.instance_path == \\\n+        modules_tmpdir.join('var').join('installed_package-instance')\n+\n+\n+def test_prefix_package_paths(limit_loader, modules_tmpdir,\n+                              modules_tmpdir_prefix, purge_module,\n+                              site_packages):\n+    app = site_packages.mkdir('site_package')\n+    init = app.join('__init__.py')\n+    init.write('import flask\\napp = flask.Flask(__name__)')\n+    purge_module('site_package')\n+\n+    import site_package\n+    assert site_package.app.instance_path == \\\n+        modules_tmpdir.join('var').join('site_package-instance')\n+\n+\n+def test_egg_installed_paths(install_egg, modules_tmpdir,\n+                             modules_tmpdir_prefix):\n+    modules_tmpdir.mkdir('site_egg').join('__init__.py').write(\n+        'import flask\\n\\napp = flask.Flask(__name__)'\n+    )\n+    install_egg('site_egg')\n+    try:\n+        import site_egg\n+        assert site_egg.app.instance_path == \\\n+            str(modules_tmpdir.join('var/').join('site_egg-instance'))\n+    finally:\n+        if 'site_egg' in sys.modules:\n+            del sys.modules['site_egg']\n+\n+\n+@pytest.mark.skipif(not PY2, reason='This only works under Python 2.')\n+def test_meta_path_loader_without_is_package():\n+    class Loader(object):\n+        def find_module(self, name):\n+            return self\n+\n+    sys.meta_path.append(Loader())\n+    try:\n+        with pytest.raises(AttributeError):\n+            flask.Flask(__name__)\n+    finally:\n+        sys.meta_path.pop()\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#4fca38c078142744922a8c763bc1468e680a830d", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 38 | Files Changed: 1 | Hunks: 2 | Methods Changed: 3 | Complexity Δ (Sum/Max): -10/0 | Churn Δ: 39 | Churn Cumulative: 331 | Contributors (this commit): 13 | Commits (past 90d): 4 | Contributors (cumulative): 13 | DMM Complexity: 0.8260869565217391\n\nDIFF:\n@@ -46,42 +46,6 @@ from __future__ import print_function\n from setuptools import Command, setup\n \n \n-class run_audit(Command):\n-    \"\"\"Audits source code using PyFlakes for following issues:\n-        - Names which are used but not defined or used before they are defined.\n-        - Names which are redefined without having been used.\n-    \"\"\"\n-    description = \"Audit source code with PyFlakes\"\n-    user_options = []\n-\n-    def initialize_options(self):\n-        pass\n-\n-    def finalize_options(self):\n-        pass\n-\n-    def run(self):\n-        import os\n-        import sys\n-        try:\n-            import pyflakes.scripts.pyflakes as flakes\n-        except ImportError:\n-            print(\"Audit requires PyFlakes installed in your system.\")\n-            sys.exit(-1)\n-\n-        warns = 0\n-        # Define top-level directories\n-        dirs = ('flask', 'examples', 'scripts')\n-        for dir in dirs:\n-            for root, _, files in os.walk(dir):\n-                for file in files:\n-                    if file != '__init__.py' and file.endswith('.py'):\n-                        warns += flakes.checkPath(os.path.join(root, file))\n-        if warns > 0:\n-            print(\"Audit finished with total %d warnings.\" % warns)\n-        else:\n-            print(\"No problems found in sourcecode.\")\n-\n setup(\n     name='Flask',\n     version='0.11-dev',\n@@ -116,6 +80,5 @@ setup(\n     entry_points='''\n         [console_scripts]\n         flask=flask.cli:main\n-    ''',\n-    cmdclass={'audit': run_audit}\n+    '''\n )\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#56db3ddf4e77a9c2184bf9580a67bcb2dd8ca4d7", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 5 | Files Changed: 1 | Hunks: 2 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 6 | Churn Cumulative: 30 | Contributors (this commit): 1 | Commits (past 90d): 5 | Contributors (cumulative): 1 | DMM Complexity: None\n\nDIFF:\n@@ -1,14 +1,10 @@\n # -*- coding: utf-8 -*-\n \"\"\"\n     tests.deprecations\n-    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+    ~~~~~~~~~~~~~~~~~~\n \n     Tests deprecation support. Not used currently.\n \n     :copyright: (c) 2014 by Armin Ronacher.\n     :license: BSD, see LICENSE for more details.\n \"\"\"\n-\n-import flask\n-import unittest\n-from tests import catch_warnings\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#192da325f8b171e7512bea13edd4ddd3330a6ca8", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 31 | Lines Deleted: 92 | Files Changed: 4 | Hunks: 22 | Methods Changed: 16 | Complexity Δ (Sum/Max): -9/1 | Churn Δ: 123 | Churn Cumulative: 939 | Contributors (this commit): 1 | Commits (past 90d): 23 | Contributors (cumulative): 4 | DMM Complexity: 0.0\n\nDIFF:\n@@ -1,62 +0,0 @@\n-# -*- coding: utf-8 -*-\n-\"\"\"\n-    tests\n-    ~~~~~~~~~~~~~~~\n-\n-    Tests Flask itself.  The majority of Flask is already tested\n-    as part of Werkzeug.\n-\n-    :copyright: (c) 2014 by Armin Ronacher.\n-    :license: BSD, see LICENSE for more details.\n-\"\"\"\n-\n-from __future__ import print_function\n-\n-import os\n-import sys\n-import warnings\n-from functools import update_wrapper\n-from contextlib import contextmanager\n-from flask._compat import StringIO\n-\n-\n-@contextmanager\n-def catch_warnings():\n-    \"\"\"Catch warnings in a with block in a list\"\"\"\n-    # make sure deprecation warnings are active in tests\n-    warnings.simplefilter('default', category=DeprecationWarning)\n-\n-    filters = warnings.filters\n-    warnings.filters = filters[:]\n-    old_showwarning = warnings.showwarning\n-    log = []\n-\n-    def showwarning(message, category, filename, lineno, file=None, line=None):\n-        log.append(locals())\n-    try:\n-        warnings.showwarning = showwarning\n-        yield log\n-    finally:\n-        warnings.filters = filters\n-        warnings.showwarning = old_showwarning\n-\n-\n-@contextmanager\n-def catch_stderr():\n-    \"\"\"Catch stderr in a StringIO\"\"\"\n-    old_stderr = sys.stderr\n-    sys.stderr = rv = StringIO()\n-    try:\n-        yield rv\n-    finally:\n-        sys.stderr = old_stderr\n-\n-\n-def emits_module_deprecation_warning(f):\n-    def new_f(self, *args, **kwargs):\n-        with catch_warnings() as log:\n-            f(self, *args, **kwargs)\n-            assert log, 'expected deprecation warning'\n-            for entry in log:\n-                assert 'Modules are deprecated' in str(entry['message'])\n-    return update_wrapper(new_f, f)\n\n@@ -125,3 +125,10 @@ def purge_module(request):\n     def inner(name):\n         request.addfinalizer(lambda: sys.modules.pop(name, None))\n     return inner\n+\n+\n+@pytest.fixture\n+def catch_deprecation_warnings():\n+    import warnings\n+    warnings.simplefilter('default', category=DeprecationWarning)\n+    return lambda: warnings.catch_warnings(record=True)\n\n@@ -13,9 +13,7 @@ import pytest\n \n import os\n import flask\n-import unittest\n from logging import StreamHandler\n-from tests import catch_warnings, catch_stderr\n from werkzeug.http import parse_cache_control_header, parse_options_header\n from flask._compat import StringIO, text_type\n \n@@ -266,9 +264,9 @@ class TestSendfile(object):\n             assert rv.mimetype == 'text/html'\n             rv.close()\n \n-    def test_send_file_object(self):\n+    def test_send_file_object(self, catch_deprecation_warnings):\n         app = flask.Flask(__name__)\n-        with catch_warnings() as captured:\n+        with catch_deprecation_warnings() as captured:\n             with app.test_request_context():\n                 f = open(os.path.join(app.root_path, 'static/index.html'), mode='rb')\n                 rv = flask.send_file(f)\n@@ -281,7 +279,7 @@ class TestSendfile(object):\n             assert len(captured) == 2\n \n         app.use_x_sendfile = True\n-        with catch_warnings() as captured:\n+        with catch_deprecation_warnings() as captured:\n             with app.test_request_context():\n                 f = open(os.path.join(app.root_path, 'static/index.html'))\n                 rv = flask.send_file(f)\n@@ -295,7 +293,7 @@ class TestSendfile(object):\n \n         app.use_x_sendfile = False\n         with app.test_request_context():\n-            with catch_warnings() as captured:\n+            with catch_deprecation_warnings() as captured:\n                 f = StringIO('Test')\n                 rv = flask.send_file(f)\n                 rv.direct_passthrough = False\n@@ -304,7 +302,7 @@ class TestSendfile(object):\n                 rv.close()\n             # etags\n             assert len(captured) == 1\n-            with catch_warnings() as captured:\n+            with catch_deprecation_warnings() as captured:\n                 class PyStringIO(object):\n                     def __init__(self, *args, **kwargs):\n                         self._io = StringIO(*args, **kwargs)\n@@ -319,7 +317,7 @@ class TestSendfile(object):\n                 rv.close()\n             # attachment_filename and etags\n             assert len(captured) == 3\n-            with catch_warnings() as captured:\n+            with catch_deprecation_warnings() as captured:\n                 f = StringIO('Test')\n                 rv = flask.send_file(f, mimetype='text/plain')\n                 rv.direct_passthrough = False\n@@ -330,7 +328,7 @@ class TestSendfile(object):\n             assert len(captured) == 1\n \n         app.use_x_sendfile = True\n-        with catch_warnings() as captured:\n+        with catch_deprecation_warnings() as captured:\n             with app.test_request_context():\n                 f = StringIO('Test')\n                 rv = flask.send_file(f)\n@@ -339,9 +337,9 @@ class TestSendfile(object):\n             # etags\n             assert len(captured) == 1\n \n-    def test_attachment(self):\n+    def test_attachment(self, catch_deprecation_warnings):\n         app = flask.Flask(__name__)\n-        with catch_warnings() as captured:\n+        with catch_deprecation_warnings() as captured:\n             with app.test_request_context():\n                 f = open(os.path.join(app.root_path, 'static/index.html'))\n                 rv = flask.send_file(f, as_attachment=True)\n@@ -433,7 +431,7 @@ class TestLogging(object):\n         app.logger_name = __name__ + '/test_logger_cache'\n         assert app.logger is not logger1\n \n-    def test_debug_log(self):\n+    def test_debug_log(self, capsys):\n         app = flask.Flask(__name__)\n         app.debug = True\n \n@@ -448,21 +446,15 @@ class TestLogging(object):\n             1 // 0\n \n         with app.test_client() as c:\n-            with catch_stderr() as err:\n             c.get('/')\n-                out = err.getvalue()\n-                assert 'WARNING in test_helpers [' in out\n-                assert os.path.basename(__file__.rsplit('.', 1)[0] + '.py') in out\n-                assert 'the standard library is dead' in out\n-                assert 'this is a debug statement' in out\n+            out, err = capsys.readouterr()\n+            assert 'WARNING in test_helpers [' in err\n+            assert os.path.basename(__file__.rsplit('.', 1)[0] + '.py') in err\n+            assert 'the standard library is dead' in err\n+            assert 'this is a debug statement' in err\n \n-            with catch_stderr() as err:\n-                try:\n+            with pytest.raises(ZeroDivisionError):\n                 c.get('/exc')\n-                except ZeroDivisionError:\n-                    pass\n-                else:\n-                    assert False, 'debug log ate the exception'\n \n     def test_debug_log_override(self):\n         app = flask.Flask(__name__)\n\n@@ -119,14 +119,16 @@ def test_egg_installed_paths(install_egg, modules_tmpdir,\n \n \n @pytest.mark.skipif(not PY2, reason='This only works under Python 2.')\n-def test_meta_path_loader_without_is_package():\n+def test_meta_path_loader_without_is_package(request, modules_tmpdir):\n+    app = modules_tmpdir.join('unimportable.py')\n+    app.write('import flask\\napp = flask.Flask(__name__)')\n+\n     class Loader(object):\n-        def find_module(self, name):\n+        def find_module(self, name, path=None):\n             return self\n \n     sys.meta_path.append(Loader())\n-    try:\n+    request.addfinalizer(sys.meta_path.pop)\n+\n     with pytest.raises(AttributeError):\n-            flask.Flask(__name__)\n-    finally:\n-        sys.meta_path.pop()\n+        import unimportable\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#3f67fe94f1e46908e53283a54f4bf74c524efd94", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 28 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 2 | Methods Changed: 4 | Complexity Δ (Sum/Max): 4/4 | Churn Δ: 28 | Churn Cumulative: 894 | Contributors (this commit): 2 | Commits (past 90d): 7 | Contributors (cumulative): 2 | DMM Complexity: 1.0\n\nDIFF:\n@@ -22,6 +22,7 @@ from flask._compat import text_type\n from werkzeug.exceptions import BadRequest, NotFound, Forbidden\n from werkzeug.http import parse_date\n from werkzeug.routing import BuildError\n+import werkzeug.serving\n \n \n def test_options_work():\n@@ -1506,3 +1507,30 @@ def test_multi_route_class_views():\n     assert rv.data == b'a'\n     rv = app.test_client().open('/b/')\n     assert rv.data == b'b'\n+\n+\n+def test_run_defaults(monkeypatch):\n+    rv = {}\n+\n+    # Mocks werkzeug.serving.run_simple method\n+    def run_simple_mock(*args, **kwargs):\n+        rv['result'] = 'running...'\n+\n+    app = flask.Flask(__name__)\n+    monkeypatch.setattr(werkzeug.serving, 'run_simple', run_simple_mock)\n+    app.run()\n+    assert rv['result'] == 'running...'\n+\n+\n+def test_run_server_port(monkeypatch):\n+    rv = {}\n+\n+    # Mocks werkzeug.serving.run_simple method\n+    def run_simple_mock(hostname, port, application, *args, **kwargs):\n+        rv['result'] = 'running on %s:%s ...' % (hostname, port)\n+\n+    app = flask.Flask(__name__)\n+    monkeypatch.setattr(werkzeug.serving, 'run_simple', run_simple_mock)\n+    hostname, port = 'localhost', 8000\n+    app.run(hostname, port, debug=True)\n+    assert rv['result'] == 'running on %s:%s ...' % (hostname, port)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#c6795eb626096ce8a14c594b27b61f3917b5e810", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 8 | Lines Deleted: 18 | Files Changed: 7 | Hunks: 16 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 26 | Churn Cumulative: 994 | Contributors (this commit): 1 | Commits (past 90d): 46 | Contributors (cumulative): 7 | DMM Complexity: None\n\nDIFF:\n@@ -1,7 +1,7 @@\n # -*- coding: utf-8 -*-\n \"\"\"\n     tests.appctx\n-    ~~~~~~~~~~~~~~~~~~~~~~\n+    ~~~~~~~~~~~~\n \n     Tests the application context.\n \n@@ -12,8 +12,6 @@\n import pytest\n \n import flask\n-import unittest\n-\n \n \n def test_basic_url_generation():\n\n@@ -1,7 +1,7 @@\n # -*- coding: utf-8 -*-\n \"\"\"\n     tests.blueprints\n-    ~~~~~~~~~~~~~~~~~~~~~~~~~~\n+    ~~~~~~~~~~~~~~~~\n \n     Blueprints (and currently modules)\n \n@@ -12,7 +12,6 @@\n import pytest\n \n import flask\n-import unittest\n \n from flask._compat import text_type\n from werkzeug.http import parse_cache_control_header\n\n@@ -1,7 +1,7 @@\n # -*- coding: utf-8 -*-\n \"\"\"\n     tests.reqctx\n-    ~~~~~~~~~~~~~~~~~~~~~~\n+    ~~~~~~~~~~~~\n \n     Tests the request context.\n \n@@ -12,14 +12,13 @@\n import pytest\n \n import flask\n-import unittest\n+\n try:\n     from greenlet import greenlet\n except ImportError:\n     greenlet = None\n \n \n-\n def test_teardown_on_pop():\n     buffer = []\n     app = flask.Flask(__name__)\n\n@@ -1,7 +1,7 @@\n # -*- coding: utf-8 -*-\n \"\"\"\n     tests.subclassing\n-    ~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+    ~~~~~~~~~~~~~~~~~\n \n     Test that certain behavior of flask can be customized by\n     subclasses.\n@@ -10,7 +10,6 @@\n     :license: BSD, see LICENSE for more details.\n \"\"\"\n import flask\n-import unittest\n from logging import StreamHandler\n \n from flask._compat import StringIO\n\n@@ -1,7 +1,7 @@\n # -*- coding: utf-8 -*-\n \"\"\"\n     tests.templating\n-    ~~~~~~~~~~~~~~~~~~~~~~~~~~\n+    ~~~~~~~~~~~~~~~~\n \n     Template functionality\n \n@@ -12,13 +12,10 @@\n import pytest\n \n import flask\n-import unittest\n import logging\n from jinja2 import TemplateNotFound\n \n \n-\n-\n def test_context_processing():\n     app = flask.Flask(__name__)\n     @app.context_processor\n\n@@ -1,7 +1,7 @@\n # -*- coding: utf-8 -*-\n \"\"\"\n     tests.testing\n-    ~~~~~~~~~~~~~~~~~~~~~~~\n+    ~~~~~~~~~~~~~\n \n     Test client and more.\n \n@@ -11,7 +11,6 @@\n import pytest\n \n import flask\n-import unittest\n \n from flask._compat import text_type\n \n\n@@ -1,7 +1,7 @@\n # -*- coding: utf-8 -*-\n \"\"\"\n     tests.views\n-    ~~~~~~~~~~~~~~~~~~~~~\n+    ~~~~~~~~~~~\n \n     Pluggable views.\n \n@@ -13,7 +13,6 @@ import pytest\n \n import flask\n import flask.views\n-import unittest\n \n from werkzeug.http import parse_set_header\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#93c190a8fd81355dd4ac4f567821ff28ad021d5b", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 21 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 3 | Complexity Δ (Sum/Max): 4/4 | Churn Δ: 21 | Churn Cumulative: 102 | Contributors (this commit): 2 | Commits (past 90d): 7 | Contributors (cumulative): 2 | DMM Complexity: 1.0\n\nDIFF:\n@@ -156,3 +156,24 @@ def test_flash_signal():\n             assert category == 'notice'\n     finally:\n         flask.message_flashed.disconnect(record, app)\n+\n+def test_appcontext_tearing_down_signal():\n+    app = flask.Flask(__name__)\n+    recorded = []\n+\n+    def record_teardown(sender, **kwargs):\n+        recorded.append(('tear_down', kwargs))\n+\n+    @app.route('/')\n+    def index():\n+        1 // 0\n+\n+    flask.appcontext_tearing_down.connect(record_teardown, app)\n+    try:\n+        with app.test_client() as c:\n+            rv = c.get('/')\n+            assert rv.status_code == 500\n+            assert recorded == []\n+        assert recorded == [('tear_down', {'exc': None})]\n+    finally:\n+        flask.appcontext_tearing_down.disconnect(record_teardown, app)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#61097c47a35ad8883c77fc49b93c1314f7819464", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 3 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 449 | Contributors (this commit): 13 | Commits (past 90d): 2 | Contributors (cumulative): 13 | DMM Complexity: 1.0\n\nDIFF:\n@@ -103,7 +103,9 @@ class Request(RequestBase):\n \n         The :meth:`get_json` method should be used instead.\n         \"\"\"\n-        # XXX: deprecate property\n+        from warnings import warn\n+        warn(DeprecationWarning('json is deprecated.  '\n+                                'Use get_json() instead.'), stacklevel=2)\n         return self.get_json()\n \n     @property\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#4d4a639ba46cf72454497bc100b3e811e66af4b2", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 40 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 4 | Complexity Δ (Sum/Max): 4/4 | Churn Δ: 40 | Churn Cumulative: 70 | Contributors (this commit): 2 | Commits (past 90d): 6 | Contributors (cumulative): 2 | DMM Complexity: 1.0\n\nDIFF:\n@@ -8,3 +8,43 @@\n     :copyright: (c) 2014 by Armin Ronacher.\n     :license: BSD, see LICENSE for more details.\n \"\"\"\n+\n+import pytest\n+\n+import flask\n+\n+\n+class TestRequestDeprecation(object):\n+\n+    def test_request_json(self, catch_deprecation_warnings):\n+        \"\"\"Request.json is deprecated\"\"\"\n+        app = flask.Flask(__name__)\n+        app.testing = True\n+\n+        @app.route('/', methods=['POST'])\n+        def index():\n+            assert flask.request.json == {'spam': 42}\n+            print(flask.request.json)\n+            return 'OK'\n+\n+        with catch_deprecation_warnings() as captured:\n+            c = app.test_client()\n+            c.post('/', data='{\"spam\": 42}', content_type='application/json')\n+\n+        assert len(captured) == 1\n+\n+    def test_request_module(self, catch_deprecation_warnings):\n+        \"\"\"Request.module is deprecated\"\"\"\n+        app = flask.Flask(__name__)\n+        app.testing = True\n+\n+        @app.route('/')\n+        def index():\n+            assert flask.request.module is None\n+            return 'OK'\n+\n+        with catch_deprecation_warnings() as captured:\n+            c = app.test_client()\n+            c.get('/')\n+\n+        assert len(captured) == 1\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#709289037ae149444b18a59975cf9dc6e93cd05a", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): -4/0 | Churn Δ: 4 | Churn Cumulative: 453 | Contributors (this commit): 14 | Commits (past 90d): 3 | Contributors (cumulative): 14 | DMM Complexity: None\n\nDIFF:\n@@ -115,8 +115,8 @@ class Request(RequestBase):\n         but this can be overriden by the `force` parameter.\n \n         :param force: if set to `True` the mimetype is ignored.\n-        :param silent: if set to `False` this method will fail silently\n-                       and return `False`.\n+        :param silent: if set to `True` this method will fail silently\n+                       and return `None`.\n         :param cache: if set to `True` the parsed JSON data is remembered\n                       on the request.\n         \"\"\"\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#fed6fd32d80458219c7d167d529c0a2681858587", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 2 | Methods Changed: 2 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 3532 | Contributors (this commit): 43 | Commits (past 90d): 19 | Contributors (cumulative): 43 | DMM Complexity: None\n\nDIFF:\n@@ -821,7 +821,7 @@ class Flask(_PackageBoundObject):\n             # without reloader and that stuff from an interactive shell.\n             self._got_first_request = False\n \n-    def test_client(self, use_cookies=True):\n+    def test_client(self, use_cookies=True, **kwargs):\n         \"\"\"Creates a test client for this application.  For information\n         about unit testing head over to :ref:`testing`.\n \n@@ -857,7 +857,7 @@ class Flask(_PackageBoundObject):\n         cls = self.test_client_class\n         if cls is None:\n             from flask.testing import FlaskClient as cls\n-        return cls(self, self.response_class, use_cookies=use_cookies)\n+        return cls(self, self.response_class, use_cookies=use_cookies, **kwargs)\n \n     def open_session(self, request):\n         \"\"\"Creates or opens a new session.  Default implementation stores all\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#44c025f552075175fc8335f327c0e825e05527dc", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 14 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 14 | Churn Cumulative: 3546 | Contributors (this commit): 43 | Commits (past 90d): 20 | Contributors (cumulative): 43 | DMM Complexity: None\n\nDIFF:\n@@ -844,6 +844,20 @@ class Flask(_PackageBoundObject):\n                 rv = c.get('/?vodka=42')\n                 assert request.args['vodka'] == '42'\n \n+        Additionally, you may pass optional keyword arguments that will then\n+        be passed to the application's :attr:`test_client_class` constructor.\n+        For example::\n+\n+            from flask.testing import FlaskClient\n+\n+            class CustomClient(FlaskClient):\n+                def __init__(self, authentication=None, *args, **kwargs):\n+                    FlaskClient.__init__(*args, **kwargs)\n+                    self._authentication = authentication\n+\n+            app.test_client_class = CustomClient\n+            client = app.test_client(authentication='Basic ....')\n+\n         See :class:`~flask.testing.FlaskClient` for more information.\n \n         .. versionchanged:: 0.4\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#986b92203a53c735527e53cbe4f6f6f64aa9e9f8", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 4 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 3550 | Contributors (this commit): 43 | Commits (past 90d): 8 | Contributors (cumulative): 43 | DMM Complexity: None\n\nDIFF:\n@@ -867,6 +867,10 @@ class Flask(_PackageBoundObject):\n            The `use_cookies` parameter was added as well as the ability\n            to override the client to be used by setting the\n            :attr:`test_client_class` attribute.\n+\n+        .. versionchanged:: 1.0\n+           Added `**kwargs` to support passing additional keyword arguments to\n+           the constructor of :attr:`test_client_class`.\n         \"\"\"\n         cls = self.test_client_class\n         if cls is None:\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#d425279650b392faf679db3245b8ac7f8c84cf54", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 36 | Lines Deleted: 1 | Files Changed: 2 | Hunks: 6 | Methods Changed: 3 | Complexity Δ (Sum/Max): 2/2 | Churn Δ: 37 | Churn Cumulative: 1248 | Contributors (this commit): 9 | Commits (past 90d): 9 | Contributors (cumulative): 10 | DMM Complexity: 1.0\n\nDIFF:\n@@ -227,15 +227,22 @@ def jsonify(*args, **kwargs):\n     This function's response will be pretty printed if it was not requested\n     with ``X-Requested-With: XMLHttpRequest`` to simplify debugging unless\n     the ``JSONIFY_PRETTYPRINT_REGULAR`` config parameter is set to false.\n+    Compressed (not pretty) formatting currently means no indents and no\n+    spaces after separators.\n \n     .. versionadded:: 0.2\n     \"\"\"\n+\n     indent = None\n+    separators = (',', ':')\n+\n     if current_app.config['JSONIFY_PRETTYPRINT_REGULAR'] \\\n        and not request.is_xhr:\n         indent = 2\n+        separators = (', ', ': ')\n+\n     return current_app.response_class(dumps(dict(*args, **kwargs),\n-        indent=indent),\n+        indent=indent, separators=separators),\n         mimetype='application/json')\n \n \n\n@@ -959,6 +959,34 @@ def test_make_response_with_response_instance():\n         assert rv.headers['X-Foo'] == 'bar'\n \n \n+def test_jsonify_no_prettyprint():\n+    app = flask.Flask(__name__)\n+    app.config.update({\"JSONIFY_PRETTYPRINT_REGULAR\": False})\n+    with app.test_request_context():\n+        compressed_msg = b'{\"msg\":{\"submsg\":\"W00t\"},\"msg2\":\"foobar\"}'\n+        uncompressed_msg = {\n+            \"msg\": {\n+                \"submsg\": \"W00t\"\n+            },\n+            \"msg2\": \"foobar\"\n+            }\n+\n+        rv = flask.make_response(\n+            flask.jsonify(uncompressed_msg), 200)\n+        assert rv.data == compressed_msg\n+\n+def test_jsonify_prettyprint():\n+    app = flask.Flask(__name__)\n+    app.config.update({\"JSONIFY_PRETTYPRINT_REGULAR\": True})\n+    with app.test_request_context():\n+        compressed_msg = {\"msg\":{\"submsg\":\"W00t\"},\"msg2\":\"foobar\"}\n+        pretty_response =\\\n+            b'{\\n  \"msg\": {\\n    \"submsg\": \"W00t\"\\n  }, \\n  \"msg2\": \"foobar\"\\n}'\n+\n+        rv = flask.make_response(\n+            flask.jsonify(compressed_msg), 200)\n+        assert rv.data == pretty_response\n+\n def test_url_generation():\n     app = flask.Flask(__name__)\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#bd232e5c82cca0c4445b3fed1a460c0bb0a66082", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 2 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 924 | Contributors (this commit): 3 | Commits (past 90d): 9 | Contributors (cumulative): 3 | DMM Complexity: None\n\nDIFF:\n@@ -975,6 +975,7 @@ def test_jsonify_no_prettyprint():\n             flask.jsonify(uncompressed_msg), 200)\n         assert rv.data == compressed_msg\n \n+\n def test_jsonify_prettyprint():\n     app = flask.Flask(__name__)\n     app.config.update({\"JSONIFY_PRETTYPRINT_REGULAR\": True})\n@@ -987,6 +988,7 @@ def test_jsonify_prettyprint():\n             flask.jsonify(compressed_msg), 200)\n         assert rv.data == pretty_response\n \n+\n def test_url_generation():\n     app = flask.Flask(__name__)\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#56a7e8361d978c9ae2981167f3b4d959f2cf21e2", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 4 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 3 | Methods Changed: 2 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 5 | Churn Cumulative: 185 | Contributors (this commit): 9 | Commits (past 90d): 3 | Contributors (cumulative): 9 | DMM Complexity: 1.0\n\nDIFF:\n@@ -213,7 +213,7 @@ class Config(dict):\n                     self[key] = value\n         return True\n \n-    def get_namespace(self, namespace, lowercase=True):\n+    def get_namespace(self, namespace, lowercase=True, trim_namespace=True):\n         \"\"\"Returns a dictionary containing a subset of configuration options\n         that match the specified namespace/prefix. Example usage::\n \n@@ -236,6 +236,8 @@ class Config(dict):\n         :param namespace: a configuration namespace\n         :param lowercase: a flag indicating if the keys of the resulting\n                           dictionary should be lowercase\n+        :param trim_namespace: a flag indicating if the keys of the resulting\n+                          dictionary should not include the namespace\n \n         .. versionadded:: 1.0\n         \"\"\"\n@@ -243,6 +245,7 @@ class Config(dict):\n         for k, v in iteritems(self):\n             if not k.startswith(namespace):\n                 continue\n+            if trim_namespace:\n                 key = k[len(namespace):]\n             if lowercase:\n                 key = key.lower()\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#bbd9c2f10011be9f9e2b1857bc863d923459154f", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 187 | Contributors (this commit): 9 | Commits (past 90d): 4 | Contributors (cumulative): 9 | DMM Complexity: 1.0\n\nDIFF:\n@@ -247,6 +247,8 @@ class Config(dict):\n                 continue\n             if trim_namespace:\n                 key = k[len(namespace):]\n+            else:\n+                key = k\n             if lowercase:\n                 key = key.lower()\n             rv[key] = v\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#5e8d503098747e0297f17978c23f5fd64106124b", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 8 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 8 | Churn Cumulative: 744 | Contributors (this commit): 2 | Commits (past 90d): 11 | Contributors (cumulative): 2 | DMM Complexity: 1.0\n\nDIFF:\n@@ -182,3 +182,11 @@ def test_get_namespace():\n     assert 2 == len(bar_options)\n     assert 'bar stuff 1' == bar_options['STUFF_1']\n     assert 'bar stuff 2' == bar_options['STUFF_2']\n+    foo_options = app.config.get_namespace('FOO_', trim_namespace=False)\n+    assert 2 == len(foo_options)\n+    assert 'foo option 1' == foo_options['foo_option_1']\n+    assert 'foo option 2' == foo_options['foo_option_2']\n+    bar_options = app.config.get_namespace('BAR_', lowercase=False, trim_namespace=False)\n+    assert 2 == len(bar_options)\n+    assert 'bar stuff 1' == bar_options['BAR_STUFF_1']\n+    assert 'bar stuff 2' == bar_options['BAR_STUFF_2']\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#f88765d504ce2fa9bc3926c76910b11510522892", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 32 | Lines Deleted: 6 | Files Changed: 2 | Hunks: 5 | Methods Changed: 2 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 38 | Churn Cumulative: 3809 | Contributors (this commit): 43 | Commits (past 90d): 17 | Contributors (cumulative): 45 | DMM Complexity: 1.0\n\nDIFF:\n@@ -297,7 +297,7 @@ class Flask(_PackageBoundObject):\n         'JSON_AS_ASCII':                        True,\n         'JSON_SORT_KEYS':                       True,\n         'JSONIFY_PRETTYPRINT_REGULAR':          True,\n-        'TEMPLATES_AUTO_RELOAD':                True,\n+        'TEMPLATES_AUTO_RELOAD':                None,\n     })\n \n     #: The rule object to use for URL rules created.  This is used by\n@@ -673,8 +673,10 @@ class Flask(_PackageBoundObject):\n         if 'autoescape' not in options:\n             options['autoescape'] = self.select_jinja_autoescape\n         if 'auto_reload' not in options:\n-            options['auto_reload'] = self.debug \\\n-                or self.config['TEMPLATES_AUTO_RELOAD']\n+            if self.config['TEMPLATES_AUTO_RELOAD'] is not None:\n+                options['auto_reload'] = self.config['TEMPLATES_AUTO_RELOAD']\n+            else:\n+                options['auto_reload'] = self.debug\n         rv = Environment(self, **options)\n         rv.globals.update(\n             url_for=url_for,\n\n@@ -296,12 +296,36 @@ def test_iterable_loader():\n     assert rv.data == b'<h1>Jameson</h1>'\n \n def test_templates_auto_reload():\n+    # debug is False, config option is None\n     app = flask.Flask(__name__)\n-    assert app.config['TEMPLATES_AUTO_RELOAD']\n-    assert app.jinja_env.auto_reload\n+    assert app.debug is False\n+    assert app.config['TEMPLATES_AUTO_RELOAD'] is None\n+    assert app.jinja_env.auto_reload is False\n+    # debug is False, config option is False\n     app = flask.Flask(__name__)\n     app.config['TEMPLATES_AUTO_RELOAD'] = False\n-    assert not app.jinja_env.auto_reload\n+    assert app.debug is False\n+    assert app.jinja_env.auto_reload is False\n+    # debug is False, config option is True\n+    app = flask.Flask(__name__)\n+    app.config['TEMPLATES_AUTO_RELOAD'] = True\n+    assert app.debug is False\n+    assert app.jinja_env.auto_reload is True\n+    # debug is True, config option is None\n+    app = flask.Flask(__name__)\n+    app.config['DEBUG'] = True\n+    assert app.config['TEMPLATES_AUTO_RELOAD'] is None\n+    assert app.jinja_env.auto_reload is True\n+    # debug is True, config option is False\n+    app = flask.Flask(__name__)\n+    app.config['DEBUG'] = True\n+    app.config['TEMPLATES_AUTO_RELOAD'] = False\n+    assert app.jinja_env.auto_reload is False\n+    # debug is True, config option is True\n+    app = flask.Flask(__name__)\n+    app.config['DEBUG'] = True\n+    app.config['TEMPLATES_AUTO_RELOAD'] = True\n+    assert app.jinja_env.auto_reload is True\n \n def test_template_loader_debugging(test_apps):\n     from blueprintapp import app\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
