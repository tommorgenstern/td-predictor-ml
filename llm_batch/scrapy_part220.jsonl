{"custom_id": "scrapy#72e4d5f33ef8130acf833031b018192c39b60152", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 14 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 2/2 | Churn Δ: 14 | Churn Cumulative: 404 | Contributors (this commit): 6 | Commits (past 90d): 7 | Contributors (cumulative): 6 | DMM Complexity: 1.0\n\nDIFF:\n@@ -319,6 +319,20 @@ class ImagesPipelineTestCaseCustomSettings(unittest.TestCase):\n             value = getattr(pipeline, pipe_attr.lower())\n             self.assertEqual(value, getattr(pipeline, pipe_attr))\n \n+    def test_no_custom_settings_for_subclasses(self):\n+        \"\"\"\n+        If there are no settings for subclass and no subclass attributes, pipeline should use\n+        attributes of base class.\n+        \"\"\"\n+        class UserDefinedImagePipeline(ImagesPipeline):\n+            pass\n+\n+        user_pipeline = UserDefinedImagePipeline.from_settings(Settings({\"IMAGES_STORE\": self.tempdir}))\n+        for pipe_attr, settings_attr in self.img_cls_attribute_names:\n+            # Values from settings for custom pipeline should be set on pipeline instance.\n+            custom_value = self.default_pipeline_settings.get(pipe_attr.upper())\n+            self.assertEqual(getattr(user_pipeline, pipe_attr.lower()), custom_value)\n+\n     def test_custom_settings_for_subclasses(self):\n         \"\"\"\n         If there are custom settings for subclass and NO class attributes, pipeline should use custom\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "scrapy#c6d1686d98f640be87df4337015e83fba2964f53", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 35 | Lines Deleted: 17 | Files Changed: 1 | Hunks: 6 | Methods Changed: 7 | Complexity Δ (Sum/Max): 4/4 | Churn Δ: 52 | Churn Cumulative: 157 | Contributors (this commit): 8 | Commits (past 90d): 3 | Contributors (cumulative): 8 | DMM Complexity: 1.0\n\nDIFF:\n@@ -1,4 +1,5 @@\n import os\n+import random\n import time\n import hashlib\n import warnings\n@@ -184,32 +185,49 @@ class FilesPipelineTestCaseFields(unittest.TestCase):\n \n \n class FilesPipelineTestCaseCustomSettings(unittest.TestCase):\n+    default_cls_settings = {\n+        \"EXPIRES\": 90,\n+        \"DEFAULT_FILES_URLS_FIELD\": \"file_urls\",\n+        \"DEFAULT_FILES_RESULT_FIELD\": \"files\"\n+    }\n+    file_cls_attr_settings_map = {\n+        (\"EXPIRES\", \"FILES_EXPIRES\"),\n+        (\"DEFAULT_FILES_URLS_FIELD\", \"FILES_URLS_FIELD\"),\n+        (\"DEFAULT_FILES_RESULT_FIELD\", \"FILES_RESULT_FIELD\")\n+    }\n \n     def setUp(self):\n         self.tempdir = mkdtemp()\n-        self.pipeline = FilesPipeline(self.tempdir)\n-        self.default_settings = Settings()\n \n     def tearDown(self):\n         rmtree(self.tempdir)\n \n-    def test_expires(self):\n-        another_pipeline = FilesPipeline.from_settings(Settings({'FILES_STORE': self.tempdir,\n-                                                                'FILES_EXPIRES': 42}))\n-        self.assertEqual(self.pipeline.expires, self.default_settings.getint('FILES_EXPIRES'))\n-        self.assertEqual(another_pipeline.expires, 42)\n+    def _generate_fake_settings(self, prefix=None):\n \n-    def test_files_urls_field(self):\n-        another_pipeline = FilesPipeline.from_settings(Settings({'FILES_STORE': self.tempdir,\n-                                                                'FILES_URLS_FIELD': 'funny_field'}))\n-        self.assertEqual(self.pipeline.files_urls_field, self.default_settings.get('FILES_URLS_FIELD'))\n-        self.assertEqual(another_pipeline.files_urls_field, 'funny_field')\n+        def random_string():\n+            return \"\".join([chr(random.randint(97, 123)) for _ in range(10)])\n \n-    def test_files_result_field(self):\n-        another_pipeline = FilesPipeline.from_settings(Settings({'FILES_STORE': self.tempdir,\n-                                                                'FILES_RESULT_FIELD': 'funny_field'}))\n-        self.assertEqual(self.pipeline.files_result_field, self.default_settings.get('FILES_RESULT_FIELD'))\n-        self.assertEqual(another_pipeline.files_result_field, 'funny_field')\n+        settings = {\n+            \"FILES_EXPIRES\": random.randint(1, 1000),\n+            \"FILES_URLS_FIELD\": random_string(),\n+            \"FILES_RESULT_FIELD\": random_string(),\n+            \"FILES_STORE\": self.tempdir\n+        }\n+        if not prefix:\n+            return settings\n+\n+        return {prefix.upper() + \"_\" + k: v for k, v in settings.items()}\n+\n+    def test_different_settings_for_different_instances(self):\n+        custom_settings = self._generate_fake_settings()\n+        another_pipeline = FilesPipeline.from_settings(Settings(custom_settings))\n+        one_pipeline = FilesPipeline(self.tempdir)\n+        for pipe_attr, settings_attr in self.file_cls_attr_settings_map:\n+            default_value = self.default_cls_settings[pipe_attr]\n+            self.assertEqual(getattr(one_pipeline, pipe_attr), default_value)\n+            custom_value = custom_settings[settings_attr]\n+            pipe_attr_lower = pipe_attr.lower().replace(\"default_\", \"\")\n+            self.assertEqual(getattr(another_pipeline, pipe_attr_lower), custom_value)\n \n \n class TestS3FilesStore(unittest.TestCase):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "scrapy#acbfdc618496f304c1a81f5f07ff0cacabfe8394", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 23 | Lines Deleted: 3 | Files Changed: 2 | Hunks: 4 | Methods Changed: 3 | Complexity Δ (Sum/Max): 3/3 | Churn Δ: 26 | Churn Cumulative: 648 | Contributors (this commit): 29 | Commits (past 90d): 7 | Contributors (cumulative): 36 | DMM Complexity: 1.0\n\nDIFF:\n@@ -160,9 +160,6 @@ FEED_EXPORTERS_BASE = {\n }\n \n FILES_STORE_S3_ACL = 'private'\n-FILES_EXPIRES = 90\n-FILES_URLS_FIELD = 'file_urls'\n-FILES_RESULT_FIELD = 'files'\n \n HTTPCACHE_ENABLED = False\n HTTPCACHE_DIR = 'httpcache'\n\n@@ -218,7 +218,20 @@ class FilesPipelineTestCaseCustomSettings(unittest.TestCase):\n \n         return {prefix.upper() + \"_\" + k: v for k, v in settings.items()}\n \n+    def _generate_fake_pipeline(self):\n+\n+        class UserDefinedFilePipeline(FilesPipeline):\n+            FILES_EXPIRES = random.randint(1001, 2000)\n+            DEFAULT_FILES_URLS_FIELD = \"alfa\"\n+            DEFAULT_FILES_RESULT_FIELD = \"beta\"\n+\n+        return UserDefinedFilePipeline\n+\n     def test_different_settings_for_different_instances(self):\n+        \"\"\"\n+        If there are different instances with different settings they should keep\n+        different settings.\n+        \"\"\"\n         custom_settings = self._generate_fake_settings()\n         another_pipeline = FilesPipeline.from_settings(Settings(custom_settings))\n         one_pipeline = FilesPipeline(self.tempdir)\n@@ -229,6 +242,16 @@ class FilesPipelineTestCaseCustomSettings(unittest.TestCase):\n             pipe_attr_lower = pipe_attr.lower().replace(\"default_\", \"\")\n             self.assertEqual(getattr(another_pipeline, pipe_attr_lower), custom_value)\n \n+    def test_subclass_attributes_preserved_if_no_settings(self):\n+        \"\"\"\n+        If subclasses override class attributes and there are no special settings those values should be kept.\n+        \"\"\"\n+        pipe_cls = self._generate_fake_pipeline()\n+        pipe = pipe_cls.from_settings(Settings({\"FILES_STORE\": self.tempdir}))\n+        for pipe_attr, settings_attr in self.file_cls_attr_settings_map:\n+            attr_lower = pipe_attr.lower().replace(\"default_\", \"\")\n+            self.assertEqual(getattr(pipe, attr_lower), getattr(pipe, pipe_attr))\n+\n \n class TestS3FilesStore(unittest.TestCase):\n     @defer.inlineCallbacks\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "scrapy#539d34bce08c6c0bf19f8ae31e9d77271c3e22b7", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 108 | Lines Deleted: 34 | Files Changed: 4 | Hunks: 9 | Methods Changed: 11 | Complexity Δ (Sum/Max): 9/9 | Churn Δ: 142 | Churn Cumulative: 631 | Contributors (this commit): 8 | Commits (past 90d): 19 | Contributors (cumulative): 20 | DMM Complexity: 1.0\n\nDIFF:\n@@ -230,10 +230,17 @@ class FilesPipeline(MediaPipeline):\n         if isinstance(settings, dict) or settings is None:\n             settings = Settings(settings)\n \n+        cls_name = \"FilesPipeline\"\n         self.store = self._get_store(store_uri)\n-        self.expires = settings.getint('FILES_EXPIRES', self.EXPIRES)\n-        self.files_urls_field = settings.get('FILES_URLS_FIELD', self.DEFAULT_FILES_URLS_FIELD)\n-        self.files_result_field = settings.get('FILES_RESULT_FIELD', self.DEFAULT_FILES_RESULT_FIELD)\n+        self.expires = settings.getint(\n+            self._key_for_pipe('FILES_EXPIRES', cls_name), self.EXPIRES\n+        )\n+        self.files_urls_field = settings.get(\n+            self._key_for_pipe('FILES_URLS_FIELD', cls_name), self.DEFAULT_FILES_URLS_FIELD\n+        )\n+        self.files_result_field = settings.get(\n+            self._key_for_pipe('FILES_RESULT_FIELD', cls_name), self.DEFAULT_FILES_RESULT_FIELD\n+        )\n \n         super(FilesPipeline, self).__init__(download_func=download_func)\n \n\n@@ -53,27 +53,25 @@ class ImagesPipeline(FilesPipeline):\n         if isinstance(settings, dict) or settings is None:\n             settings = Settings(settings)\n \n-        def key_for_pipe(key):\n-            \"\"\"\n-            Allow setting settings for user defined ImagePipelines that inherit from base.\n-\n-            User can define setting key:\n-\n-            MYPIPELINENAME_IMAGE_SETTING_NAME = <some value>\n-\n-            and it will override default settings and class attributes.\n-            \"\"\"\n-            class_name = self.__class__.__name__\n-            if class_name == \"ImagesPipeline\":\n-                return key\n-            return \"{}_{}\".format(class_name.upper(), key)\n-\n-        self.expires = settings.getint(key_for_pipe('IMAGES_EXPIRES'), self.EXPIRES)\n-        self.images_urls_field = settings.get(key_for_pipe('IMAGES_URLS_FIELD'), self.IMAGES_URLS_FIELD)\n-        self.images_result_field = settings.get(key_for_pipe('IMAGES_RESULT_FIELD'), self.IMAGES_RESULT_FIELD)\n-        self.min_width = settings.getint(key_for_pipe('IMAGES_MIN_WIDTH'), self.MIN_WIDTH)\n-        self.min_height = settings.getint(key_for_pipe('IMAGES_MIN_HEIGHT'), self.MIN_HEIGHT)\n-        self.thumbs = settings.get(key_for_pipe('IMAGES_THUMBS'), self.THUMBS)\n+        cls_name = \"ImagesPipeline\"\n+        self.expires = settings.getint(\n+            self._key_for_pipe('IMAGES_EXPIRES', cls_name), self.EXPIRES\n+        )\n+        self.images_urls_field = settings.get(\n+            self._key_for_pipe('IMAGES_URLS_FIELD', cls_name), self.IMAGES_URLS_FIELD\n+        )\n+        self.images_result_field = settings.get(\n+            self._key_for_pipe('IMAGES_RESULT_FIELD', cls_name), self.IMAGES_RESULT_FIELD\n+        )\n+        self.min_width = settings.getint(\n+            self._key_for_pipe('IMAGES_MIN_WIDTH', cls_name), self.MIN_WIDTH\n+        )\n+        self.min_height = settings.getint(\n+            self._key_for_pipe('IMAGES_MIN_HEIGHT', cls_name), self.MIN_HEIGHT\n+        )\n+        self.thumbs = settings.get(\n+            self._key_for_pipe('IMAGES_THUMBS', cls_name), self.THUMBS\n+        )\n \n     @classmethod\n     def from_settings(cls, settings):\n\n@@ -27,6 +27,22 @@ class MediaPipeline(object):\n     def __init__(self, download_func=None):\n         self.download_func = download_func\n \n+\n+    def _key_for_pipe(self, key, base_class_name):\n+        \"\"\"\n+        Allow setting settings for user defined MediaPipelines that inherit from base.\n+\n+        User can define setting key:\n+\n+        MYPIPELINENAME_IMAGE_SETTING_NAME = <some value>\n+\n+        and it will override default settings and class attributes.\n+        \"\"\"\n+        class_name = self.__class__.__name__\n+        if class_name == base_class_name:\n+            return key\n+        return \"{}_{}\".format(class_name.upper(), key)\n+\n     @classmethod\n     def from_crawler(cls, crawler):\n         try:\n\n@@ -191,9 +191,9 @@ class FilesPipelineTestCaseCustomSettings(unittest.TestCase):\n         \"DEFAULT_FILES_RESULT_FIELD\": \"files\"\n     }\n     file_cls_attr_settings_map = {\n-        (\"EXPIRES\", \"FILES_EXPIRES\"),\n-        (\"DEFAULT_FILES_URLS_FIELD\", \"FILES_URLS_FIELD\"),\n-        (\"DEFAULT_FILES_RESULT_FIELD\", \"FILES_RESULT_FIELD\")\n+        (\"EXPIRES\", \"FILES_EXPIRES\", \"expires\"),\n+        (\"DEFAULT_FILES_URLS_FIELD\", \"FILES_URLS_FIELD\", \"files_urls_field\"),\n+        (\"DEFAULT_FILES_RESULT_FIELD\", \"FILES_RESULT_FIELD\", \"files_result_field\")\n     }\n \n     def setUp(self):\n@@ -216,7 +216,7 @@ class FilesPipelineTestCaseCustomSettings(unittest.TestCase):\n         if not prefix:\n             return settings\n \n-        return {prefix.upper() + \"_\" + k: v for k, v in settings.items()}\n+        return {prefix.upper() + \"_\" + k if k != \"FILES_STORE\" else k: v for k, v in settings.items()}\n \n     def _generate_fake_pipeline(self):\n \n@@ -235,12 +235,11 @@ class FilesPipelineTestCaseCustomSettings(unittest.TestCase):\n         custom_settings = self._generate_fake_settings()\n         another_pipeline = FilesPipeline.from_settings(Settings(custom_settings))\n         one_pipeline = FilesPipeline(self.tempdir)\n-        for pipe_attr, settings_attr in self.file_cls_attr_settings_map:\n+        for pipe_attr, settings_attr, pipe_ins_attr in self.file_cls_attr_settings_map:\n             default_value = self.default_cls_settings[pipe_attr]\n             self.assertEqual(getattr(one_pipeline, pipe_attr), default_value)\n             custom_value = custom_settings[settings_attr]\n-            pipe_attr_lower = pipe_attr.lower().replace(\"default_\", \"\")\n-            self.assertEqual(getattr(another_pipeline, pipe_attr_lower), custom_value)\n+            self.assertEqual(getattr(another_pipeline, pipe_ins_attr), custom_value)\n \n     def test_subclass_attributes_preserved_if_no_settings(self):\n         \"\"\"\n@@ -248,9 +247,63 @@ class FilesPipelineTestCaseCustomSettings(unittest.TestCase):\n         \"\"\"\n         pipe_cls = self._generate_fake_pipeline()\n         pipe = pipe_cls.from_settings(Settings({\"FILES_STORE\": self.tempdir}))\n-        for pipe_attr, settings_attr in self.file_cls_attr_settings_map:\n-            attr_lower = pipe_attr.lower().replace(\"default_\", \"\")\n-            self.assertEqual(getattr(pipe, attr_lower), getattr(pipe, pipe_attr))\n+        for pipe_attr, settings_attr, pipe_ins_attr in self.file_cls_attr_settings_map:\n+            self.assertEqual(getattr(pipe, pipe_ins_attr), getattr(pipe, pipe_attr))\n+\n+    def test_subclass_attrs_preserved_custom_settings(self):\n+        \"\"\"\n+        If file settings are defined but they are not defined for subclass class attributes\n+        should be preserved.\n+        \"\"\"\n+        pipeline_cls = self._generate_fake_pipeline()\n+        settings = self._generate_fake_settings()\n+        pipeline = pipeline_cls.from_settings(Settings(settings))\n+        for pipe_attr, settings_attr, pipe_ins_attr in self.file_cls_attr_settings_map:\n+            value = getattr(pipeline, pipe_ins_attr)\n+            self.assertEqual(value, getattr(pipeline, pipe_attr))\n+\n+    def test_no_custom_settings_for_subclasses(self):\n+        \"\"\"\n+        If there are no settings for subclass and no subclass attributes, pipeline should use\n+        attributes of base class.\n+        \"\"\"\n+        class UserDefinedFilesPipeline(FilesPipeline):\n+            pass\n+\n+        user_pipeline = UserDefinedFilesPipeline.from_settings(Settings({\"FILES_STORE\": self.tempdir}))\n+        for pipe_attr, settings_attr, pipe_ins_attr in self.file_cls_attr_settings_map:\n+            # Values from settings for custom pipeline should be set on pipeline instance.\n+            custom_value = self.default_cls_settings.get(pipe_attr.upper())\n+            self.assertEqual(getattr(user_pipeline, pipe_ins_attr), custom_value)\n+\n+    def test_custom_settings_for_subclasses(self):\n+        \"\"\"\n+        If there are custom settings for subclass and NO class attributes, pipeline should use custom\n+        settings.\n+        \"\"\"\n+        class UserDefinedFilesPipeline(FilesPipeline):\n+            pass\n+\n+        prefix = UserDefinedFilesPipeline.__name__.upper()\n+        settings = self._generate_fake_settings(prefix=prefix)\n+        user_pipeline = UserDefinedFilesPipeline.from_settings(Settings(settings))\n+        for pipe_attr, settings_attr, pipe_inst_attr in self.file_cls_attr_settings_map:\n+            # Values from settings for custom pipeline should be set on pipeline instance.\n+            custom_value = settings.get(prefix + \"_\" + settings_attr)\n+            self.assertEqual(getattr(user_pipeline, pipe_inst_attr), custom_value)\n+\n+    def test_custom_settings_and_class_attrs_for_subclasses(self):\n+        \"\"\"\n+        If there are custom settings for subclass AND class attributes\n+        setting keys are preferred and override attributes.\n+        \"\"\"\n+        pipeline_cls = self._generate_fake_pipeline()\n+        prefix = pipeline_cls.__name__.upper()\n+        settings = self._generate_fake_settings(prefix=prefix)\n+        user_pipeline = pipeline_cls.from_settings(Settings(settings))\n+        for pipe_cls_attr, settings_attr, pipe_inst_attr  in self.file_cls_attr_settings_map:\n+            custom_value = settings.get(prefix + \"_\" + settings_attr)\n+            self.assertEqual(getattr(user_pipeline, pipe_inst_attr), custom_value)\n \n \n class TestS3FilesStore(unittest.TestCase):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "scrapy#fa4d0cdfe5df7165c220e2c17c2de14262fc713e", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 52 | Lines Deleted: 13 | Files Changed: 4 | Hunks: 22 | Methods Changed: 14 | Complexity Δ (Sum/Max): 6/2 | Churn Δ: 65 | Churn Cumulative: 1078 | Contributors (this commit): 8 | Commits (past 90d): 29 | Contributors (cumulative): 24 | DMM Complexity: 0.38235294117647056\n\nDIFF:\n@@ -235,11 +235,15 @@ class FilesPipeline(MediaPipeline):\n         self.expires = settings.getint(\n             self._key_for_pipe('FILES_EXPIRES', cls_name), self.EXPIRES\n         )\n+        if not hasattr(self, \"FILES_URLS_FIELD\"):\n+            self.FILES_URLS_FIELD = self.DEFAULT_FILES_URLS_FIELD\n+        if not hasattr(self, \"FILES_RESULT_FIELD\"):\n+            self.FILES_RESULT_FIELD = self.DEFAULT_FILES_RESULT_FIELD\n         self.files_urls_field = settings.get(\n-            self._key_for_pipe('FILES_URLS_FIELD', cls_name), self.DEFAULT_FILES_URLS_FIELD\n+            self._key_for_pipe('FILES_URLS_FIELD', cls_name), self.FILES_URLS_FIELD\n         )\n         self.files_result_field = settings.get(\n-            self._key_for_pipe('FILES_RESULT_FIELD', cls_name), self.DEFAULT_FILES_RESULT_FIELD\n+            self._key_for_pipe('FILES_RESULT_FIELD', cls_name), self.FILES_RESULT_FIELD\n         )\n \n         super(FilesPipeline, self).__init__(download_func=download_func)\n\n@@ -44,8 +44,8 @@ class ImagesPipeline(FilesPipeline):\n     MIN_HEIGHT = 0\n     EXPIRES = 0\n     THUMBS = {}\n-    IMAGES_URLS_FIELD = 'image_urls'\n-    IMAGES_RESULT_FIELD = 'images'\n+    DEFAULT_IMAGES_URLS_FIELD = 'image_urls'\n+    DEFAULT_IMAGES_RESULT_FIELD = 'images'\n \n     def __init__(self, store_uri, download_func=None, settings=None):\n         super(ImagesPipeline, self).__init__(store_uri, settings=settings, download_func=download_func)\n@@ -57,11 +57,18 @@ class ImagesPipeline(FilesPipeline):\n         self.expires = settings.getint(\n             self._key_for_pipe('IMAGES_EXPIRES', cls_name), self.EXPIRES\n         )\n+        if not hasattr(self, \"IMAGES_RESULT_FIELD\"):\n+            self.IMAGES_RESULT_FIELD = self.DEFAULT_IMAGES_RESULT_FIELD\n+        if not hasattr(self, \"IMAGES_URLS_FIELD\"):\n+            self.IMAGES_URLS_FIELD = self.DEFAULT_IMAGES_URLS_FIELD\n+\n+        default_images_urls_field = getattr(self, \"IMAGES_URLS_FIELD\", \"DEFAULT_IMAGES_URLS_FIELD\")\n         self.images_urls_field = settings.get(\n-            self._key_for_pipe('IMAGES_URLS_FIELD', cls_name), self.IMAGES_URLS_FIELD\n+            self._key_for_pipe('IMAGES_URLS_FIELD', cls_name), default_images_urls_field\n         )\n+        default_images_result_field = getattr(self, \"IMAGES_RESULT_FIELD\", \"DEFAULT_IMAGES_RESULT_FIELD\")\n         self.images_result_field = settings.get(\n-            self._key_for_pipe('IMAGES_RESULT_FIELD', cls_name), self.IMAGES_RESULT_FIELD\n+            self._key_for_pipe('IMAGES_RESULT_FIELD', cls_name), default_images_result_field\n         )\n         self.min_width = settings.getint(\n             self._key_for_pipe('IMAGES_MIN_WIDTH', cls_name), self.MIN_WIDTH\n\n@@ -187,13 +187,13 @@ class FilesPipelineTestCaseFields(unittest.TestCase):\n class FilesPipelineTestCaseCustomSettings(unittest.TestCase):\n     default_cls_settings = {\n         \"EXPIRES\": 90,\n-        \"DEFAULT_FILES_URLS_FIELD\": \"file_urls\",\n-        \"DEFAULT_FILES_RESULT_FIELD\": \"files\"\n+        \"FILES_URLS_FIELD\": \"file_urls\",\n+        \"FILES_RESULT_FIELD\": \"files\"\n     }\n     file_cls_attr_settings_map = {\n         (\"EXPIRES\", \"FILES_EXPIRES\", \"expires\"),\n-        (\"DEFAULT_FILES_URLS_FIELD\", \"FILES_URLS_FIELD\", \"files_urls_field\"),\n-        (\"DEFAULT_FILES_RESULT_FIELD\", \"FILES_RESULT_FIELD\", \"files_result_field\")\n+        (\"FILES_URLS_FIELD\", \"FILES_URLS_FIELD\", \"files_urls_field\"),\n+        (\"FILES_RESULT_FIELD\", \"FILES_RESULT_FIELD\", \"files_result_field\")\n     }\n \n     def setUp(self):\n@@ -221,9 +221,9 @@ class FilesPipelineTestCaseCustomSettings(unittest.TestCase):\n     def _generate_fake_pipeline(self):\n \n         class UserDefinedFilePipeline(FilesPipeline):\n-            FILES_EXPIRES = random.randint(1001, 2000)\n-            DEFAULT_FILES_URLS_FIELD = \"alfa\"\n-            DEFAULT_FILES_RESULT_FIELD = \"beta\"\n+            EXPIRES = 1001\n+            FILES_URLS_FIELD = \"alfa\"\n+            FILES_RESULT_FIELD = \"beta\"\n \n         return UserDefinedFilePipeline\n \n@@ -239,6 +239,7 @@ class FilesPipelineTestCaseCustomSettings(unittest.TestCase):\n             default_value = self.default_cls_settings[pipe_attr]\n             self.assertEqual(getattr(one_pipeline, pipe_attr), default_value)\n             custom_value = custom_settings[settings_attr]\n+            self.assertNotEqual(default_value, custom_value)\n             self.assertEqual(getattr(another_pipeline, pipe_ins_attr), custom_value)\n \n     def test_subclass_attributes_preserved_if_no_settings(self):\n@@ -248,6 +249,8 @@ class FilesPipelineTestCaseCustomSettings(unittest.TestCase):\n         pipe_cls = self._generate_fake_pipeline()\n         pipe = pipe_cls.from_settings(Settings({\"FILES_STORE\": self.tempdir}))\n         for pipe_attr, settings_attr, pipe_ins_attr in self.file_cls_attr_settings_map:\n+            custom_value = getattr(pipe, pipe_ins_attr)\n+            self.assertNotEqual(custom_value, self.default_cls_settings[pipe_attr])\n             self.assertEqual(getattr(pipe, pipe_ins_attr), getattr(pipe, pipe_attr))\n \n     def test_subclass_attrs_preserved_custom_settings(self):\n@@ -260,6 +263,7 @@ class FilesPipelineTestCaseCustomSettings(unittest.TestCase):\n         pipeline = pipeline_cls.from_settings(Settings(settings))\n         for pipe_attr, settings_attr, pipe_ins_attr in self.file_cls_attr_settings_map:\n             value = getattr(pipeline, pipe_ins_attr)\n+            self.assertNotEqual(value, self.default_cls_settings[pipe_attr])\n             self.assertEqual(value, getattr(pipeline, pipe_attr))\n \n     def test_no_custom_settings_for_subclasses(self):\n@@ -290,6 +294,7 @@ class FilesPipelineTestCaseCustomSettings(unittest.TestCase):\n         for pipe_attr, settings_attr, pipe_inst_attr in self.file_cls_attr_settings_map:\n             # Values from settings for custom pipeline should be set on pipeline instance.\n             custom_value = settings.get(prefix + \"_\" + settings_attr)\n+            self.assertNotEqual(custom_value, self.default_cls_settings[pipe_attr])\n             self.assertEqual(getattr(user_pipeline, pipe_inst_attr), custom_value)\n \n     def test_custom_settings_and_class_attrs_for_subclasses(self):\n@@ -303,8 +308,18 @@ class FilesPipelineTestCaseCustomSettings(unittest.TestCase):\n         user_pipeline = pipeline_cls.from_settings(Settings(settings))\n         for pipe_cls_attr, settings_attr, pipe_inst_attr  in self.file_cls_attr_settings_map:\n             custom_value = settings.get(prefix + \"_\" + settings_attr)\n+            self.assertNotEqual(custom_value, self.default_cls_settings[pipe_cls_attr])\n             self.assertEqual(getattr(user_pipeline, pipe_inst_attr), custom_value)\n \n+    def test_cls_attrs_with_DEFAULT_prefix(self):\n+        class UserDefinedFilesPipeline(FilesPipeline):\n+            DEFAULT_FILES_RESULT_FIELD = \"this\"\n+            DEFAULT_FILES_URLS_FIELD = \"that\"\n+\n+        pipeline = UserDefinedFilesPipeline.from_settings(Settings({\"FILES_STORE\": self.tempdir}))\n+        self.assertEqual(pipeline.files_result_field, \"this\")\n+        self.assertEqual(pipeline.files_urls_field, \"that\")\n+\n \n class TestS3FilesStore(unittest.TestCase):\n     @defer.inlineCallbacks\n\n@@ -304,6 +304,7 @@ class ImagesPipelineTestCaseCustomSettings(unittest.TestCase):\n         for pipe_attr, settings_attr in self.img_cls_attribute_names:\n             # Instance attribute (lowercase) must be equal to class attribute (uppercase).\n             attr_value = getattr(pipeline, pipe_attr.lower())\n+            self.assertNotEqual(attr_value, self.default_pipeline_settings[pipe_attr])\n             self.assertEqual(attr_value, getattr(pipeline, pipe_attr))\n \n     def test_subclass_attrs_preserved_custom_settings(self):\n@@ -317,6 +318,7 @@ class ImagesPipelineTestCaseCustomSettings(unittest.TestCase):\n         for pipe_attr, settings_attr in self.img_cls_attribute_names:\n             # Instance attribute (lowercase) must be equal to class attribute (uppercase).\n             value = getattr(pipeline, pipe_attr.lower())\n+            self.assertNotEqual(value, self.default_pipeline_settings[pipe_attr])\n             self.assertEqual(value, getattr(pipeline, pipe_attr))\n \n     def test_no_custom_settings_for_subclasses(self):\n@@ -347,6 +349,7 @@ class ImagesPipelineTestCaseCustomSettings(unittest.TestCase):\n         for pipe_attr, settings_attr in self.img_cls_attribute_names:\n             # Values from settings for custom pipeline should be set on pipeline instance.\n             custom_value = settings.get(prefix + \"_\" + settings_attr)\n+            self.assertNotEqual(custom_value, self.default_pipeline_settings[pipe_attr])\n             self.assertEqual(getattr(user_pipeline, pipe_attr.lower()), custom_value)\n \n     def test_custom_settings_and_class_attrs_for_subclasses(self):\n@@ -360,8 +363,18 @@ class ImagesPipelineTestCaseCustomSettings(unittest.TestCase):\n         user_pipeline = pipeline_cls.from_settings(Settings(settings))\n         for pipe_attr, settings_attr in self.img_cls_attribute_names:\n             custom_value = settings.get(prefix + \"_\" + settings_attr)\n+            self.assertNotEqual(custom_value, self.default_pipeline_settings[pipe_attr])\n             self.assertEqual(getattr(user_pipeline, pipe_attr.lower()), custom_value)\n \n+    def test_cls_attrs_with_DEFAULT_prefix(self):\n+        class UserDefinedImagePipeline(ImagesPipeline):\n+            DEFAULT_IMAGES_URLS_FIELD = \"something\"\n+            DEFAULT_IMAGES_RESULT_FIELD = \"something_else\"\n+\n+        pipeline = UserDefinedImagePipeline.from_settings(Settings({\"IMAGES_STORE\": self.tempdir}))\n+        self.assertEqual(pipeline.images_result_field, \"something_else\")\n+        self.assertEqual(pipeline.images_urls_field, \"something\")\n+\n \n def _create_image(format, *a, **kw):\n     buf = TemporaryFile()\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "scrapy#10a2c46e12e54e666de743b9ceca09c18370ccec", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 27 | Lines Deleted: 2 | Files Changed: 2 | Hunks: 2 | Methods Changed: 3 | Complexity Δ (Sum/Max): 4/2 | Churn Δ: 29 | Churn Cumulative: 193 | Contributors (this commit): 10 | Commits (past 90d): 7 | Contributors (cumulative): 11 | DMM Complexity: 1.0\n\nDIFF:\n@@ -53,5 +53,10 @@ def gunzip(data):\n \n def is_gzipped(response):\n     \"\"\"Return True if the response is gzipped, or False otherwise\"\"\"\n-    ctype = response.headers.get('Content-Type', b'')\n-    return ctype in (b'application/x-gzip', b'application/gzip')\n+    ctype = response.headers.get('Content-Type', b'').lower()\n+    cenc = response.headers.get('Content-Encoding', b'').lower()\n+    return (\n+        ctype in (b'application/x-gzip', b'application/gzip') or\n+        (ctype in (b'application/octet-stream', b'binary/octet-stream') and\n+         cenc in (b'gzip', b'x-gzip'))\n+    )\n\n@@ -145,6 +145,26 @@ class HttpCompressionTest(TestCase):\n         self.assertEqual(response.headers['Content-Encoding'], b'gzip')\n         self.assertEqual(response.headers['Content-Type'], b'application/gzip')\n \n+    def test_process_response_gzip_app_octetstream_contenttype(self):\n+        response = self._getresponse('gzip')\n+        response.headers['Content-Type'] = 'application/octet-stream'\n+        request = response.request\n+\n+        newresponse = self.mw.process_response(request, response, self.spider)\n+        self.assertIs(newresponse, response)\n+        self.assertEqual(response.headers['Content-Encoding'], b'gzip')\n+        self.assertEqual(response.headers['Content-Type'], b'application/octet-stream')\n+\n+    def test_process_response_gzip_binary_octetstream_contenttype(self):\n+        response = self._getresponse('x-gzip')\n+        response.headers['Content-Type'] = 'binary/octet-stream'\n+        request = response.request\n+\n+        newresponse = self.mw.process_response(request, response, self.spider)\n+        self.assertIs(newresponse, response)\n+        self.assertEqual(response.headers['Content-Encoding'], b'gzip')\n+        self.assertEqual(response.headers['Content-Type'], b'binary/octet-stream')\n+\n     def test_process_response_head_request_no_decode_required(self):\n         response = self._getresponse('gzip')\n         response.headers['Content-Type'] = 'application/gzip'\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "scrapy#d9343463cb69d01a43ed12d8931bbcd86d2aae09", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 19 | Lines Deleted: 14 | Files Changed: 1 | Hunks: 10 | Methods Changed: 4 | Complexity Δ (Sum/Max): 3/3 | Churn Δ: 33 | Churn Cumulative: 1413 | Contributors (this commit): 14 | Commits (past 90d): 5 | Contributors (cumulative): 14 | DMM Complexity: 1.0\n\nDIFF:\n@@ -93,7 +93,7 @@ class TunnelingTCP4ClientEndpoint(TCP4ClientEndpoint):\n     for it.\n     \"\"\"\n \n-    _responseMatcher = re.compile(b'HTTP/1\\.. 200')\n+    _responseMatcher = re.compile(b'HTTP/1\\.. (?P<status>\\d{3})(?P<reason>.{,32})')\n \n     def __init__(self, reactor, host, port, proxyConf, contextFactory,\n                  timeout=30, bindAddress=None):\n@@ -115,13 +115,14 @@ class TunnelingTCP4ClientEndpoint(TCP4ClientEndpoint):\n         self._protocol = protocol\n         return protocol\n \n-    def processProxyResponse(self, bytes):\n+    def processProxyResponse(self, rcvd_bytes):\n         \"\"\"Processes the response from the proxy. If the tunnel is successfully\n         created, notifies the client that we are ready to send requests. If not\n         raises a TunnelError.\n         \"\"\"\n         self._protocol.dataReceived = self._protocolDataReceived\n-        if  TunnelingTCP4ClientEndpoint._responseMatcher.match(bytes):\n+        respm = TunnelingTCP4ClientEndpoint._responseMatcher.match(rcvd_bytes)\n+        if respm and int(respm.group('status')) == 200:\n             try:\n                 # this sets proper Server Name Indication extension\n                 # but is only available for Twisted>=14.0\n@@ -134,9 +135,14 @@ class TunnelingTCP4ClientEndpoint(TCP4ClientEndpoint):\n                                               self._protocolFactory)\n             self._tunnelReadyDeferred.callback(self._protocol)\n         else:\n+            if respm:\n+                extra = {'status': int(respm.group('status')),\n+                         'reason': respm.group('reason').strip()}\n+            else:\n+                extra = rcvd_bytes[:32]\n             self._tunnelReadyDeferred.errback(\n-                TunnelError('Could not open CONNECT tunnel with proxy %s:%s' % (\n-                    self._host, self._port)))\n+                TunnelError('Could not open CONNECT tunnel with proxy %s:%s [%r]' % (\n+                    self._host, self._port, extra)))\n \n     def connectFailed(self, reason):\n         \"\"\"Propagates the errback to the appropriate deferred.\"\"\"\n@@ -151,23 +157,22 @@ class TunnelingTCP4ClientEndpoint(TCP4ClientEndpoint):\n         return self._tunnelReadyDeferred\n \n \n-def tunnel_request_data(host, port, proxy_auth_header=None):\n+def tunnel_request_data(host, port, proxy_auth_header=None, host_header=True):\n     r\"\"\"\n     Return binary content of a CONNECT request.\n \n     >>> from scrapy.utils.python import to_native_str as s\n     >>> s(tunnel_request_data(\"example.com\", 8080))\n-    'CONNECT example.com:8080 HTTP/1.1\\r\\n\\r\\n'\n+    'CONNECT example.com:8080 HTTP/1.1\\r\\nHost: example.com:8080\\r\\n\\r\\n'\n     >>> s(tunnel_request_data(\"example.com\", 8080, b\"123\"))\n-    'CONNECT example.com:8080 HTTP/1.1\\r\\nProxy-Authorization: 123\\r\\n\\r\\n'\n+    'CONNECT example.com:8080 HTTP/1.1\\r\\nHost: example.com:8080\\r\\nProxy-Authorization: 123\\r\\n\\r\\n'\n     >>> s(tunnel_request_data(b\"example.com\", \"8090\"))\n-    'CONNECT example.com:8090 HTTP/1.1\\r\\n\\r\\n'\n+    'CONNECT example.com:8090 HTTP/1.1\\r\\nHost: example.com:8090\\r\\n\\r\\n'\n     \"\"\"\n-    tunnel_req = (\n-        b'CONNECT ' +\n-        to_bytes(host, encoding='ascii') + b':' +\n-        to_bytes(str(port)) +\n-        b' HTTP/1.1\\r\\n')\n+    host_value = to_bytes(host, encoding='ascii') + b':' + to_bytes(str(port))\n+    tunnel_req = b'CONNECT ' + host_value + b' HTTP/1.1\\r\\n'\n+    if host_header:\n+        tunnel_req += b'Host: ' + host_value + b'\\r\\n'\n     if proxy_auth_header:\n         tunnel_req += b'Proxy-Authorization: ' + proxy_auth_header + b'\\r\\n'\n     tunnel_req += b'\\r\\n'\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "scrapy#49ac7de23162bd92dc0f2ba88967aa53bbc4af2b", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 3 | Lines Deleted: 3 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 6 | Churn Cumulative: 474 | Contributors (this commit): 28 | Commits (past 90d): 3 | Contributors (cumulative): 28 | DMM Complexity: None\n\nDIFF:\n@@ -93,9 +93,9 @@ DOWNLOADER_MIDDLEWARES_BASE = {\n     'scrapy.downloadermiddlewares.robotstxt.RobotsTxtMiddleware': 100,\n     'scrapy.downloadermiddlewares.httpauth.HttpAuthMiddleware': 300,\n     'scrapy.downloadermiddlewares.downloadtimeout.DownloadTimeoutMiddleware': 350,\n-    'scrapy.downloadermiddlewares.useragent.UserAgentMiddleware': 400,\n-    'scrapy.downloadermiddlewares.retry.RetryMiddleware': 500,\n-    'scrapy.downloadermiddlewares.defaultheaders.DefaultHeadersMiddleware': 550,\n+    'scrapy.downloadermiddlewares.defaultheaders.DefaultHeadersMiddleware': 400,\n+    'scrapy.downloadermiddlewares.useragent.UserAgentMiddleware': 500,\n+    'scrapy.downloadermiddlewares.retry.RetryMiddleware': 550,\n     'scrapy.downloadermiddlewares.ajaxcrawl.AjaxCrawlMiddleware': 560,\n     'scrapy.downloadermiddlewares.redirect.MetaRefreshMiddleware': 580,\n     'scrapy.downloadermiddlewares.httpcompression.HttpCompressionMiddleware': 590,\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "scrapy#37efdde3e3dd4efecf7dccd361fceab6c851d0ff", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 13 | Lines Deleted: 0 | Files Changed: 2 | Hunks: 2 | Methods Changed: 2 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 13 | Churn Cumulative: 678 | Contributors (this commit): 9 | Commits (past 90d): 7 | Contributors (cumulative): 10 | DMM Complexity: 1.0\n\nDIFF:\n@@ -48,6 +48,11 @@ try:\n                         'Remote certificate is not valid for hostname \"{}\"; {}'.format(\n                             self._hostnameASCII, e))\n \n+                except ValueError as e:\n+                    logger.warning(\n+                        'SSL/TLS verification failed for hostname \"{}\"; {}'.format(\n+                            self._hostnameASCII, e))\n+\n except ImportError:\n     # ImportError should not matter for older Twisted versions\n     # as the above is not used in the fallback ScrapyClientContextFactory\n\n@@ -335,6 +335,14 @@ class Https11WrongHostnameTestCase(Http11TestCase):\n     certfile = 'keys/example-com.cert.pem'\n \n \n+class Https11InvalidDNSId(Https11TestCase):\n+    \"\"\"Connect to HTTPS hosts with IP while certificate uses domain names IDs.\"\"\"\n+\n+    def setUp(self):\n+        super(Https11InvalidDNSId, self).setUp()\n+        self.host = '127.0.0.1'\n+\n+\n class Http11MockServerTestCase(unittest.TestCase):\n     \"\"\"HTTP 1.1 test case with MockServer\"\"\"\n     if twisted_version < (11, 1, 0):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "scrapy#15d0c89159851ae9916e49a27cbcb36335b1bc2e", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 2 | Methods Changed: 2 | Complexity Δ (Sum/Max): -1/0 | Churn Δ: 3 | Churn Cumulative: 1416 | Contributors (this commit): 14 | Commits (past 90d): 5 | Contributors (cumulative): 14 | DMM Complexity: 0.0\n\nDIFF:\n@@ -157,7 +157,7 @@ class TunnelingTCP4ClientEndpoint(TCP4ClientEndpoint):\n         return self._tunnelReadyDeferred\n \n \n-def tunnel_request_data(host, port, proxy_auth_header=None, host_header=True):\n+def tunnel_request_data(host, port, proxy_auth_header=None):\n     r\"\"\"\n     Return binary content of a CONNECT request.\n \n@@ -171,7 +171,6 @@ def tunnel_request_data(host, port, proxy_auth_header=None, host_header=True):\n     \"\"\"\n     host_value = to_bytes(host, encoding='ascii') + b':' + to_bytes(str(port))\n     tunnel_req = b'CONNECT ' + host_value + b' HTTP/1.1\\r\\n'\n-    if host_header:\n     tunnel_req += b'Host: ' + host_value + b'\\r\\n'\n     if proxy_auth_header:\n         tunnel_req += b'Proxy-Authorization: ' + proxy_auth_header + b'\\r\\n'\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "scrapy#1779f5fecacb49d59461799115fb02b6f80e974f", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 16 | Lines Deleted: 4 | Files Changed: 2 | Hunks: 5 | Methods Changed: 2 | Complexity Δ (Sum/Max): 3/3 | Churn Δ: 20 | Churn Cumulative: 411 | Contributors (this commit): 14 | Commits (past 90d): 5 | Contributors (cumulative): 17 | DMM Complexity: 1.0\n\nDIFF:\n@@ -25,7 +25,7 @@ def sanitize_module_name(module_name):\n \n class Command(ScrapyCommand):\n \n-    requires_project = True\n+    requires_project = False\n     default_settings = {'LOG_ENABLED': False}\n \n     def syntax(self):\n@@ -94,14 +94,19 @@ class Command(ScrapyCommand):\n             'classname': '%sSpider' % ''.join(s.capitalize() \\\n                 for s in module.split('_'))\n         }\n+        if self.settings.get('NEWSPIDER_MODULE'):\n             spiders_module = import_module(self.settings['NEWSPIDER_MODULE'])\n             spiders_dir = abspath(dirname(spiders_module.__file__))\n+        else:\n+            spiders_module = None\n+            spiders_dir = \".\"\n         spider_file = \"%s.py\" % join(spiders_dir, module)\n         shutil.copyfile(template_file, spider_file)\n         render_templatefile(spider_file, **tvars)\n-        print(\"Created spider %r using template %r in module:\" % (name, \\\n-            template_name))\n-        print(\"  %s.%s\" % (spiders_module.__name__, module))\n+        print(\"Created spider %r using template %r \" % (name, \\\n+            template_name), end=('' if spiders_module else '\\n'))\n+        if spiders_module:\n+            print(\"in module:\\n  %s.%s\" % (spiders_module.__name__, module))\n \n     def _find_template(self, template):\n         template_file = join(self.templates_dir, '%s.tmpl' % template)\n\n@@ -146,6 +146,13 @@ class GenspiderCommandTest(CommandTest):\n         assert not exists(join(self.proj_mod_path, 'spiders', '%s.py' % self.project_name))\n \n \n+class GenspiderStandaloneCommandTest(ProjectTest):\n+\n+    def test_generate_standalone_spider(self):\n+        self.call('genspider', 'example', 'example.com')\n+        assert exists(join(self.temp_path, 'example.py'))\n+\n+\n class MiscCommandsTest(CommandTest):\n \n     def test_list(self):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "scrapy#962eb11c73bdb56b81e96eddccde189a22f43963", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 4 | Lines Deleted: 5 | Files Changed: 1 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 9 | Churn Cumulative: 140 | Contributors (this commit): 6 | Commits (past 90d): 5 | Contributors (cumulative): 6 | DMM Complexity: 0.0\n\nDIFF:\n@@ -50,13 +50,12 @@ def gunzip(data):\n                 raise\n     return output\n \n-_is_gzipped_re = re.compile(br'^application/(x-)?gzip\\b', re.I)\n-_is_octetstream_re = re.compile(br'^(application|binary)/octet-stream\\b', re.I)\n+_is_gzipped = re.compile(br'^application/(x-)?gzip\\b', re.I).search\n+_is_octetstream = re.compile(br'^(application|binary)/octet-stream\\b', re.I).search\n \n def is_gzipped(response):\n     \"\"\"Return True if the response is gzipped, or False otherwise\"\"\"\n     ctype = response.headers.get('Content-Type', b'')\n     cenc = response.headers.get('Content-Encoding', b'').lower()\n-    return (_is_gzipped_re.search(ctype) is not None or\n-            (_is_octetstream_re.search(ctype) is not None and\n-             cenc in (b'gzip', b'x-gzip')))\n+    return (_is_gzipped(ctype) or\n+            (_is_octetstream(ctype) and cenc in (b'gzip', b'x-gzip')))\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "scrapy#c22cc1096be5aaa3f381976ba0b70a014405dc4f", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 24 | Lines Deleted: 21 | Files Changed: 3 | Hunks: 16 | Methods Changed: 4 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 45 | Churn Cumulative: 446 | Contributors (this commit): 6 | Commits (past 90d): 13 | Contributors (cumulative): 12 | DMM Complexity: 0.3333333333333333\n\nDIFF:\n@@ -3,7 +3,7 @@ Files Pipeline\n \n See documentation in topics/media-pipeline.rst\n \"\"\"\n-\n+import functools\n import hashlib\n import os\n import os.path\n@@ -232,18 +232,20 @@ class FilesPipeline(MediaPipeline):\n \n         cls_name = \"FilesPipeline\"\n         self.store = self._get_store(store_uri)\n+        resolve = functools.partial(self._key_for_pipe,\n+                                    base_class_name=cls_name)\n         self.expires = settings.getint(\n-            self._key_for_pipe('FILES_EXPIRES', cls_name), self.EXPIRES\n+            resolve('FILES_EXPIRES'), self.EXPIRES\n         )\n         if not hasattr(self, \"FILES_URLS_FIELD\"):\n             self.FILES_URLS_FIELD = self.DEFAULT_FILES_URLS_FIELD\n         if not hasattr(self, \"FILES_RESULT_FIELD\"):\n             self.FILES_RESULT_FIELD = self.DEFAULT_FILES_RESULT_FIELD\n         self.files_urls_field = settings.get(\n-            self._key_for_pipe('FILES_URLS_FIELD', cls_name), self.FILES_URLS_FIELD\n+            resolve('FILES_URLS_FIELD'), self.FILES_URLS_FIELD\n         )\n         self.files_result_field = settings.get(\n-            self._key_for_pipe('FILES_RESULT_FIELD', cls_name), self.FILES_RESULT_FIELD\n+            resolve('FILES_RESULT_FIELD'), self.FILES_RESULT_FIELD\n         )\n \n         super(FilesPipeline, self).__init__(download_func=download_func)\n\n@@ -3,7 +3,7 @@ Images Pipeline\n \n See documentation in topics/media-pipeline.rst\n \"\"\"\n-\n+import functools\n import hashlib\n import six\n \n@@ -62,22 +62,24 @@ class ImagesPipeline(FilesPipeline):\n         if not hasattr(self, \"IMAGES_URLS_FIELD\"):\n             self.IMAGES_URLS_FIELD = self.DEFAULT_IMAGES_URLS_FIELD\n \n-        default_images_urls_field = getattr(self, \"IMAGES_URLS_FIELD\", \"DEFAULT_IMAGES_URLS_FIELD\")\n+        resolve = functools.partial(self._key_for_pipe, base_class_name=cls_name)\n+\n         self.images_urls_field = settings.get(\n-            self._key_for_pipe('IMAGES_URLS_FIELD', cls_name), default_images_urls_field\n+            resolve('IMAGES_URLS_FIELD'),\n+            self.IMAGES_URLS_FIELD\n         )\n-        default_images_result_field = getattr(self, \"IMAGES_RESULT_FIELD\", \"DEFAULT_IMAGES_RESULT_FIELD\")\n         self.images_result_field = settings.get(\n-            self._key_for_pipe('IMAGES_RESULT_FIELD', cls_name), default_images_result_field\n+            resolve('IMAGES_RESULT_FIELD'),\n+            self.IMAGES_RESULT_FIELD\n         )\n         self.min_width = settings.getint(\n-            self._key_for_pipe('IMAGES_MIN_WIDTH', cls_name), self.MIN_WIDTH\n+            resolve('IMAGES_MIN_WIDTH'), self.MIN_WIDTH\n         )\n         self.min_height = settings.getint(\n-            self._key_for_pipe('IMAGES_MIN_HEIGHT', cls_name), self.MIN_HEIGHT\n+            resolve('IMAGES_MIN_HEIGHT'), self.MIN_HEIGHT\n         )\n         self.thumbs = settings.get(\n-            self._key_for_pipe('IMAGES_THUMBS', cls_name), self.THUMBS\n+            resolve('IMAGES_THUMBS'), self.THUMBS\n         )\n \n     @classmethod\n\n@@ -28,18 +28,17 @@ class MediaPipeline(object):\n         self.download_func = download_func\n \n \n-    def _key_for_pipe(self, key, base_class_name):\n+    def _key_for_pipe(self, key, base_class_name=None):\n         \"\"\"\n-        Allow setting settings for user defined MediaPipelines that inherit from base.\n-\n-        User can define setting key:\n-\n-        MYPIPELINENAME_IMAGE_SETTING_NAME = <some value>\n-\n-        and it will override default settings and class attributes.\n+        >>> result = MediaPipeline()._key_for_pipe(\"IMAGES\")\n+        >>> assert result == \"IMAGES\"\n+        >>> class MyPipe(MediaPipeline):\n+        ...     pass\n+        >>> other_key = MyPipe()._key_for_pipe(\"IMAGES\", base_class_name=\"MediaPipeline\")\n+        >>> assert other_key == \"MYPIPE_IMAGES\"\n         \"\"\"\n         class_name = self.__class__.__name__\n-        if class_name == base_class_name:\n+        if class_name == base_class_name or not base_class_name:\n             return key\n         return \"{}_{}\".format(class_name.upper(), key)\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "scrapy#9818c97f6e9ac721bb136e4d2a4bfe1ffc8cc047", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 4 | Lines Deleted: 4 | Files Changed: 1 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 8 | Churn Cumulative: 47 | Contributors (this commit): 2 | Commits (past 90d): 3 | Contributors (cumulative): 2 | DMM Complexity: None\n\nDIFF:\n@@ -30,12 +30,12 @@ class MediaPipeline(object):\n \n     def _key_for_pipe(self, key, base_class_name=None):\n         \"\"\"\n-        >>> result = MediaPipeline()._key_for_pipe(\"IMAGES\")\n-        >>> assert result == \"IMAGES\"\n+        >>> MediaPipeline()._key_for_pipe(\"IMAGES\")\n+        'IMAGES'\n         >>> class MyPipe(MediaPipeline):\n         ...     pass\n-        >>> other_key = MyPipe()._key_for_pipe(\"IMAGES\", base_class_name=\"MediaPipeline\")\n-        >>> assert other_key == \"MYPIPE_IMAGES\"\n+        >>> MyPipe()._key_for_pipe(\"IMAGES\", base_class_name=\"MediaPipeline\")\n+        'MYPIPE_IMAGES'\n         \"\"\"\n         class_name = self.__class__.__name__\n         if class_name == base_class_name or not base_class_name:\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
