{"custom_id": "flask#16e4d5a6553ff9c89a61c44ddec7da21126b631a", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 4 | Lines Deleted: 5 | Files Changed: 4 | Hunks: 4 | Methods Changed: 4 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 9 | Churn Cumulative: 1512 | Contributors (this commit): 3 | Commits (past 90d): 42 | Contributors (cumulative): 11 | DMM Complexity: 0.0\n\nDIFF:\n@@ -426,8 +426,7 @@ class Flask(_PackageBoundObject):\n         if self.config['SERVER_NAME'] is not None:\n             domain = '.' + self.config['SERVER_NAME']\n         session.save_cookie(response, self.session_cookie_name,\n-                            expires=expires, httponly=True,\n-                            domain=domain)\n+                            expires=expires, httponly=True, domain=domain)\n \n     def register_module(self, module, **options):\n         \"\"\"Registers a module with this application.  The keyword argument\n\n@@ -15,7 +15,7 @@ from .helpers import _PackageBoundObject\n def _register_module(module, static_path):\n     \"\"\"Internal helper function that returns a function for recording\n     that registers the `send_static_file` function for the module on\n-    the application of necessary.  It also registers the module on\n+    the application if necessary.  It also registers the module on\n     the application.\n     \"\"\"\n     def _register(state):\n\n@@ -37,7 +37,7 @@ class _NullSession(Session):\n     def _fail(self, *args, **kwargs):\n         raise RuntimeError('the session is unavailable because no secret '\n                            'key was set.  Set the secret_key on the '\n-                           'application to something unique and secret')\n+                           'application to something unique and secret.')\n     __setitem__ = __delitem__ = clear = pop = popitem = \\\n         update = setdefault = _fail\n     del _fail\n\n@@ -48,7 +48,7 @@ class _DispatchingJinjaLoader(BaseLoader):\n                 return loader.get_source(environment, name)\n             except TemplateNotFound:\n                 pass\n-        # raise the exception with the correct fileame here.\n+        # raise the exception with the correct filename here.\n         # (the one that includes the prefix)\n         raise TemplateNotFound(template)\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#0198313a22a98361947fceb8544c355be676f784", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 5 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 2 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 5 | Churn Cumulative: 537 | Contributors (this commit): 3 | Commits (past 90d): 17 | Contributors (cumulative): 3 | DMM Complexity: None\n\nDIFF:\n@@ -25,9 +25,14 @@ try:\n except ImportError:\n     try:\n         import json\n+    except ImportError:\n+        try:\n+            # Google Appengine offers simplejson via django\n+            from django.utils import simplejson as json\n         except ImportError:\n             json_available = False\n \n+\n from werkzeug import Headers, wrap_file, is_resource_modified, cached_property\n from werkzeug.exceptions import NotFound\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#d12d73263f5d1664a65a42f71f19158b7e07ef2c", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 30 | Lines Deleted: 2 | Files Changed: 2 | Hunks: 4 | Methods Changed: 6 | Complexity Δ (Sum/Max): 6/6 | Churn Δ: 32 | Churn Cumulative: 2247 | Contributors (this commit): 6 | Commits (past 90d): 74 | Contributors (cumulative): 9 | DMM Complexity: 1.0\n\nDIFF:\n@@ -707,6 +707,10 @@ class Flask(_PackageBoundObject):\n         before it's sent to the WSGI server.  By default this will\n         call all the :meth:`after_request` decorated functions.\n \n+        .. versionchanged:: 0.5\n+           As of Flask 0.5 the functions registered for after request\n+           execution are called in reverse order of registration.\n+\n         :param response: a :attr:`response_class` object.\n         :return: a new response object or the same, has to be an\n                  instance of :attr:`response_class`.\n@@ -717,9 +721,9 @@ class Flask(_PackageBoundObject):\n             self.save_session(ctx.session, response)\n         funcs = ()\n         if mod and mod in self.after_request_funcs:\n-            funcs = chain(funcs, self.after_request_funcs[mod])\n+            funcs = reversed(self.after_request_funcs[mod])\n         if None in self.after_request_funcs:\n-            funcs = chain(funcs, self.after_request_funcs[None])\n+            funcs = chain(funcs, reversed(self.after_request_funcs[None]))\n         for handler in funcs:\n             response = handler(response)\n         return response\n\n@@ -318,6 +318,30 @@ class BasicFunctionalityTestCase(unittest.TestCase):\n         assert 'Internal Server Error' in rv.data\n         assert len(called) == 1\n \n+    def test_before_after_request_order(self):\n+        called = []\n+        app = flask.Flask(__name__)\n+        @app.before_request\n+        def before1():\n+            called.append(1)\n+        @app.before_request\n+        def before2():\n+            called.append(2)\n+        @app.after_request\n+        def after1(response):\n+            called.append(4)\n+            return response\n+        @app.after_request\n+        def after1(response):\n+            called.append(3)\n+            return response\n+        @app.route('/')\n+        def index():\n+            return '42'\n+        rv = app.test_client().get('/')\n+        assert rv.data == '42'\n+        assert called == [1, 2, 3, 4]\n+\n     def test_error_handling(self):\n         app = flask.Flask(__name__)\n         @app.errorhandler(404)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#5e1b1030e8edecb0c9652f2a406933c049ea2397", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 64 | Lines Deleted: 17 | Files Changed: 5 | Hunks: 14 | Methods Changed: 9 | Complexity Δ (Sum/Max): 7/3 | Churn Δ: 81 | Churn Cumulative: 3044 | Contributors (this commit): 7 | Commits (past 90d): 107 | Contributors (cumulative): 16 | DMM Complexity: 1.0\n\nDIFF:\n@@ -464,6 +464,9 @@ class Flask(_PackageBoundObject):\n         .. versionchanged:: 0.2\n            `view_func` parameter added.\n \n+        .. versionchanged:: 0.6\n+           `OPTIONS` is added automatically as method.\n+\n         :param rule: the URL rule as string\n         :param endpoint: the endpoint for the registered URL rule.  Flask\n                          itself assumes the name of the view function as\n@@ -471,15 +474,27 @@ class Flask(_PackageBoundObject):\n         :param view_func: the function to call when serving a request to the\n                           provided endpoint\n         :param options: the options to be forwarded to the underlying\n-                        :class:`~werkzeug.routing.Rule` object\n+                        :class:`~werkzeug.routing.Rule` object.  A change\n+                        to Werkzeug is handling of method options.  methods\n+                        is a list of methods this rule should be limited\n+                        to (`GET`, `POST` etc.).  By default a rule\n+                        just listens for `GET` (and implicitly `HEAD`).\n+                        Starting with Flask 0.6, `OPTIONS` is implicitly\n+                        added and handled by the standard request handling.\n         \"\"\"\n         if endpoint is None:\n             assert view_func is not None, 'expected view func if endpoint ' \\\n                                           'is not provided.'\n             endpoint = view_func.__name__\n         options['endpoint'] = endpoint\n-        options.setdefault('methods', ('GET',))\n-        self.url_map.add(Rule(rule, **options))\n+        methods = options.pop('methods', ('GET',))\n+        provide_automatic_options = False\n+        if 'OPTIONS' not in methods:\n+            methods = tuple(methods) + ('OPTIONS',)\n+            provide_automatic_options = True\n+        rule = Rule(rule, methods=methods, **options)\n+        rule.provide_automatic_options = provide_automatic_options\n+        self.url_map.add(rule)\n         if view_func is not None:\n             self.view_functions[endpoint] = view_func\n \n@@ -539,8 +554,10 @@ class Flask(_PackageBoundObject):\n \n         :param rule: the URL rule as string\n         :param methods: a list of methods this rule should be limited\n-                        to (``GET``, ``POST`` etc.).  By default a rule\n-                        just listens for ``GET`` (and implicitly ``HEAD``).\n+                        to (`GET`, `POST` etc.).  By default a rule\n+                        just listens for `GET` (and implicitly `HEAD`).\n+                        Starting with Flask 0.6, `OPTIONS` is implicitly\n+                        added and handled by the standard request handling.\n         :param subdomain: specifies the rule for the subdomain in case\n                           subdomain matching is in use.\n         :param strict_slashes: can be used to disable the strict slashes\n@@ -650,7 +667,15 @@ class Flask(_PackageBoundObject):\n         try:\n             if req.routing_exception is not None:\n                 raise req.routing_exception\n-            return self.view_functions[req.endpoint](**req.view_args)\n+            rule = req.url_rule\n+            # if we provide automatic options for this URL and the\n+            # request came with the OPTIONS method, reply automatically \n+            if rule.provide_automatic_options and req.method == 'OPTIONS':\n+                rv = self.response_class()\n+                rv.allow.update(rule.methods)\n+                return rv\n+            # otherwise dispatch to the handler for that endpoint\n+            return self.view_functions[rule.endpoint](**req.view_args)\n         except HTTPException, e:\n             return self.handle_http_exception(e)\n \n\n@@ -38,8 +38,9 @@ class _RequestContext(object):\n         self.flashes = None\n \n         try:\n-            self.request.endpoint, self.request.view_args = \\\n-                self.url_adapter.match()\n+            url_rule, self.request.view_args = \\\n+                self.url_adapter.match(return_rule=True)\n+            self.request.url_rule = url_rule\n         except HTTPException, e:\n             self.request.routing_exception = e\n \n\n@@ -15,6 +15,7 @@ import posixpath\n import mimetypes\n from time import time\n from zlib import adler32\n+from functools import wraps\n \n # try to load the best simplejson implementation available.  If JSON\n # is not installed, we add a failing class.\n\n@@ -24,11 +24,12 @@ class Request(RequestBase):\n     :attr:`~flask.Flask.request_class` to your subclass.\n     \"\"\"\n \n-    #: the endpoint that matched the request.  This in combination with\n-    #: :attr:`view_args` can be used to reconstruct the same or a\n-    #: modified URL.  If an exception happened when matching, this will\n-    #: be `None`.\n-    endpoint = None\n+    #: the internal URL rule that matched the request.  This can be\n+    #: useful to inspect which methods are allowed for the URL from\n+    #: a before/after handler (``request.url_rule.methods``) etc.\n+    #:\n+    #: .. versionadded:: 0.6\n+    url_rule = None\n \n     #: a dict of view arguments that matched the request.  If an exception\n     #: happened when matching, this will be `None`.\n@@ -40,6 +41,16 @@ class Request(RequestBase):\n     #: something similar.\n     routing_exception = None\n \n+    @property\n+    def endpoint(self):\n+        \"\"\"The endpoint that matched the request.  This in combination with\n+        :attr:`view_args` can be used to reconstruct the same or a\n+        modified URL.  If an exception happened when matching, this will\n+        be `None`.\n+        \"\"\"\n+        if self.url_rule is not None:\n+            return self.url_rule.endpoint\n+\n     @property\n     def module(self):\n         \"\"\"The name of the current module\"\"\"\n\n@@ -111,6 +111,15 @@ class ContextTestCase(unittest.TestCase):\n \n class BasicFunctionalityTestCase(unittest.TestCase):\n \n+    def test_options_work(self):\n+        app = flask.Flask(__name__)\n+        @app.route('/', methods=['GET', 'POST'])\n+        def index():\n+            return 'Hello World'\n+        rv = app.test_client().open('/', method='OPTIONS')\n+        assert sorted(rv.allow) == ['GET', 'HEAD', 'OPTIONS', 'POST']\n+        assert rv.data == ''\n+\n     def test_request_dispatching(self):\n         app = flask.Flask(__name__)\n         @app.route('/')\n@@ -124,7 +133,7 @@ class BasicFunctionalityTestCase(unittest.TestCase):\n         assert c.get('/').data == 'GET'\n         rv = c.post('/')\n         assert rv.status_code == 405\n-        assert sorted(rv.allow) == ['GET', 'HEAD']\n+        assert sorted(rv.allow) == ['GET', 'HEAD', 'OPTIONS']\n         rv = c.head('/')\n         assert rv.status_code == 200\n         assert not rv.data  # head truncates\n@@ -132,7 +141,7 @@ class BasicFunctionalityTestCase(unittest.TestCase):\n         assert c.get('/more').data == 'GET'\n         rv = c.delete('/more')\n         assert rv.status_code == 405\n-        assert sorted(rv.allow) == ['GET', 'HEAD', 'POST']\n+        assert sorted(rv.allow) == ['GET', 'HEAD', 'OPTIONS', 'POST']\n \n     def test_url_mapping(self):\n         app = flask.Flask(__name__)\n@@ -148,7 +157,7 @@ class BasicFunctionalityTestCase(unittest.TestCase):\n         assert c.get('/').data == 'GET'\n         rv = c.post('/')\n         assert rv.status_code == 405\n-        assert sorted(rv.allow) == ['GET', 'HEAD']\n+        assert sorted(rv.allow) == ['GET', 'HEAD', 'OPTIONS']\n         rv = c.head('/')\n         assert rv.status_code == 200\n         assert not rv.data  # head truncates\n@@ -156,7 +165,7 @@ class BasicFunctionalityTestCase(unittest.TestCase):\n         assert c.get('/more').data == 'GET'\n         rv = c.delete('/more')\n         assert rv.status_code == 405\n-        assert sorted(rv.allow) == ['GET', 'HEAD', 'POST']\n+        assert sorted(rv.allow) == ['GET', 'HEAD', 'OPTIONS', 'POST']\n \n     def test_session(self):\n         app = flask.Flask(__name__)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#6e52355eb303e1b47f7b83ddbb94ff432e2df139", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 110 | Contributors (this commit): 2 | Commits (past 90d): 7 | Contributors (cumulative): 2 | DMM Complexity: None\n\nDIFF:\n@@ -54,8 +54,8 @@ class Request(RequestBase):\n     @property\n     def module(self):\n         \"\"\"The name of the current module\"\"\"\n-        if self.endpoint and '.' in self.endpoint:\n-            return self.endpoint.rsplit('.', 1)[0]\n+        if self.url_rule and '.' in self.url_rule.endpoint:\n+            return self.url_rule.endpoint.rsplit('.', 1)[0]\n \n     @cached_property\n     def json(self):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#ed16ae2183ad44a7ba89aedd331a180455ed0836", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 6 | Lines Deleted: 5 | Files Changed: 2 | Hunks: 2 | Methods Changed: 2 | Complexity Δ (Sum/Max): -2/0 | Churn Δ: 11 | Churn Cumulative: 1721 | Contributors (this commit): 4 | Commits (past 90d): 43 | Contributors (cumulative): 6 | DMM Complexity: 0.0\n\nDIFF:\n@@ -271,8 +271,11 @@ class Flask(_PackageBoundObject):\n         #:    app.url_map.converters['list'] = ListConverter\n         self.url_map = Map()\n \n-        # if there is a static folder, register it for the application.\n-        if self.has_static_folder:\n+        # register the static folder for the application.  Do that even\n+        # if the folder does not exist.  First of all it might be created\n+        # while the server is running (usually happens during development)\n+        # but also because google appengine stores static files somewhere\n+        # else when mapped with the .yml file.\n         self.add_url_rule(self.static_path + '/<path:filename>',\n                           endpoint='static',\n                           view_func=self.send_static_file)\n\n@@ -366,9 +366,7 @@ class _PackageBoundObject(object):\n \n         .. versionadded:: 0.5\n         \"\"\"\n-        template_folder = os.path.join(self.root_path, 'templates')\n-        if os.path.isdir(template_folder):\n-            return FileSystemLoader(template_folder)\n+        return FileSystemLoader(os.path.join(self.root_path, 'templates'))\n \n     def send_static_file(self, filename):\n         \"\"\"Function used internally to send static files from the static\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#aa3d8398fd1a38b449b64fea4979f358f3c711e3", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 35 | Lines Deleted: 1 | Files Changed: 3 | Hunks: 5 | Methods Changed: 6 | Complexity Δ (Sum/Max): 4/4 | Churn Δ: 36 | Churn Cumulative: 2446 | Contributors (this commit): 6 | Commits (past 90d): 83 | Contributors (cumulative): 11 | DMM Complexity: 1.0\n\nDIFF:\n@@ -343,7 +343,11 @@ class Flask(_PackageBoundObject):\n \n     def update_template_context(self, context):\n         \"\"\"Update the template context with some commonly used variables.\n-        This injects request, session and g into the template context.\n+        This injects request, session, config and g into the template\n+        context as well as everything template context processors want\n+        to inject.  Note that the as of Flask 0.6, the original values\n+        in the context will not be overriden if a context processor\n+        decides to return a value with the same key.\n \n         :param context: the context as a dictionary that is updated in place\n                         to add extra variables.\n@@ -352,8 +356,13 @@ class Flask(_PackageBoundObject):\n         mod = _request_ctx_stack.top.request.module\n         if mod is not None and mod in self.template_context_processors:\n             funcs = chain(funcs, self.template_context_processors[mod])\n+        orig_ctx = context.copy()\n         for func in funcs:\n             context.update(func())\n+        # make sure the original values win.  This makes it possible to\n+        # easier add new variables in context processors without breaking\n+        # existing views.\n+        context.update(orig_ctx)\n \n     def run(self, host='127.0.0.1', port=5000, **options):\n         \"\"\"Runs the application on a local development server.  If the\n\n@@ -19,6 +19,7 @@ def _default_template_ctx_processor():\n     \"\"\"\n     reqctx = _request_ctx_stack.top\n     return dict(\n+        config=reqctx.app.config,\n         request=reqctx.request,\n         session=reqctx.session,\n         g=reqctx.g\n\n@@ -492,6 +492,30 @@ class TemplatingTestCase(unittest.TestCase):\n         rv = app.test_client().get('/')\n         assert rv.data == '<p>23|42'\n \n+    def test_original_win(self):\n+        app = flask.Flask(__name__)\n+        @app.route('/')\n+        def index():\n+            return flask.render_template_string('{{ config }}', config=42)\n+        rv = app.test_client().get('/')\n+        assert rv.data == '42'\n+\n+    def test_standard_context(self):\n+        app = flask.Flask(__name__)\n+        app.secret_key = 'development key'\n+        @app.route('/')\n+        def index():\n+            flask.g.foo = 23\n+            flask.session['test'] = 'aha'\n+            return flask.render_template_string('''\n+                {{ request.args.foo }}\n+                {{ g.foo }}\n+                {{ config.DEBUG }}\n+                {{ session.test }}\n+            ''')\n+        rv = app.test_client().get('/?foo=42')\n+        assert rv.data.split() == ['42', '23', 'False', 'aha']\n+\n     def test_escaping(self):\n         text = '<p>Hello World!'\n         app = flask.Flask(__name__)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#85ff63c32e7237280bff3293481a371fb3da180c", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 12 | Lines Deleted: 1 | Files Changed: 2 | Hunks: 4 | Methods Changed: 1 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 13 | Churn Cumulative: 1708 | Contributors (this commit): 7 | Commits (past 90d): 73 | Contributors (cumulative): 9 | DMM Complexity: 0.0\n\nDIFF:\n@@ -240,6 +240,7 @@ def send_file(filename_or_fp, mimetype=None, as_attachment=False,\n     :param conditional: set to `True` to enable conditional responses.\n     :param cache_timeout: the timeout in seconds for the headers.\n     \"\"\"\n+    mtime = None\n     if isinstance(filename_or_fp, basestring):\n         filename = filename_or_fp\n         file = None\n@@ -272,11 +273,21 @@ def send_file(filename_or_fp, mimetype=None, as_attachment=False,\n     else:\n         if file is None:\n             file = open(filename, 'rb')\n+            mtime = os.path.getmtime(filename)\n         data = wrap_file(request.environ, file)\n \n     rv = current_app.response_class(data, mimetype=mimetype, headers=headers,\n                                     direct_passthrough=True)\n \n+    # if we know the file modification date, we can store it as the\n+    # current time to better support conditional requests.  Werkzeug\n+    # as of 0.6.1 will override this value however in the conditional\n+    # response with the current time.  This will be fixed in Werkzeug\n+    # with a new release, however many WSGI servers will still emit\n+    # a separate date header.\n+    if mtime is not None:\n+        rv.date = int(mtime)\n+\n     rv.cache_control.public = True\n     if cache_timeout:\n         rv.cache_control.max_age = cache_timeout\n\n@@ -19,7 +19,7 @@ import tempfile\n from logging import StreamHandler\n from contextlib import contextmanager\n from datetime import datetime\n-from werkzeug import parse_date, parse_options_header\n+from werkzeug import parse_date, parse_options_header, http_date\n from werkzeug.exceptions import NotFound\n from jinja2 import TemplateNotFound\n from cStringIO import StringIO\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#b1790cca55956c0cda132ac2fa6a2fb53fd2d009", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 10 | Lines Deleted: 1 | Files Changed: 2 | Hunks: 3 | Methods Changed: 1 | Complexity Δ (Sum/Max): 2/2 | Churn Δ: 11 | Churn Cumulative: 1311 | Contributors (this commit): 3 | Commits (past 90d): 34 | Contributors (cumulative): 5 | DMM Complexity: 1.0\n\nDIFF:\n@@ -193,7 +193,8 @@ class Flask(_PackageBoundObject):\n         'PERMANENT_SESSION_LIFETIME':           timedelta(days=31),\n         'USE_X_SENDFILE':                       False,\n         'LOGGER_NAME':                          None,\n-        'SERVER_NAME':                          None\n+        'SERVER_NAME':                          None,\n+        'MAX_CONTENT_LENGTH':                   None\n     })\n \n     def __init__(self, import_name, static_path=None):\n\n@@ -13,6 +13,7 @@ from werkzeug import Request as RequestBase, Response as ResponseBase, \\\n     cached_property\n \n from .helpers import json, _assert_have_json\n+from .globals import _request_ctx_stack\n \n \n class Request(RequestBase):\n@@ -41,6 +42,13 @@ class Request(RequestBase):\n     #: something similar.\n     routing_exception = None\n \n+    @property\n+    def max_content_length(self):\n+        \"\"\"Read-only view of the `MAX_CONTENT_LENGTH` config key.\"\"\"\n+        ctx = _request_ctx_stack.top\n+        if ctx is not None:\n+            return ctx.app.config['MAX_CONTENT_LENGTH']\n+\n     @property\n     def endpoint(self):\n         \"\"\"The endpoint that matched the request.  This in combination with\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#f5b8c082847baa8a902cef22c43a5d50d7a55bdc", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 35 | Lines Deleted: 7 | Files Changed: 4 | Hunks: 8 | Methods Changed: 7 | Complexity Δ (Sum/Max): 4/2 | Churn Δ: 42 | Churn Cumulative: 3181 | Contributors (this commit): 7 | Commits (past 90d): 114 | Contributors (cumulative): 15 | DMM Complexity: 1.0\n\nDIFF:\n@@ -23,7 +23,7 @@ from werkzeug.routing import Map, Rule\n from werkzeug.exceptions import HTTPException, InternalServerError, NotFound\n \n from .helpers import _PackageBoundObject, url_for, get_flashed_messages, \\\n-    _tojson_filter\n+    _tojson_filter, _endpoint_from_view_func\n from .wrappers import Request, Response\n from .config import ConfigAttribute, Config\n from .ctx import _RequestContext\n@@ -496,9 +496,7 @@ class Flask(_PackageBoundObject):\n                         added and handled by the standard request handling.\n         \"\"\"\n         if endpoint is None:\n-            assert view_func is not None, 'expected view func if endpoint ' \\\n-                                          'is not provided.'\n-            endpoint = view_func.__name__\n+            endpoint = _endpoint_from_view_func(view_func)\n         options['endpoint'] = endpoint\n         methods = options.pop('methods', ('GET',))\n         provide_automatic_options = False\n\n@@ -59,6 +59,15 @@ else:\n     _tojson_filter = json.dumps\n \n \n+def _endpoint_from_view_func(view_func):\n+    \"\"\"Internal helper that returns the default endpoint for a given\n+    function.  This always is the function name.\n+    \"\"\"\n+    assert view_func is not None, 'expected view func if endpoint ' \\\n+                                  'is not provided.'\n+    return view_func.__name__\n+\n+\n def jsonify(*args, **kwargs):\n     \"\"\"Creates a :class:`~flask.Response` with the JSON representation of\n     the given arguments with an `application/json` mimetype.  The arguments\n\n@@ -9,7 +9,7 @@\n     :license: BSD, see LICENSE for more details.\n \"\"\"\n \n-from .helpers import _PackageBoundObject\n+from .helpers import _PackageBoundObject, _endpoint_from_view_func\n \n \n def _register_module(module, static_path):\n@@ -127,15 +127,24 @@ class Module(_PackageBoundObject):\n             return f\n         return decorator\n \n-    def add_url_rule(self, rule, endpoint, view_func=None, **options):\n+    def add_url_rule(self, rule, endpoint=None, view_func=None, **options):\n         \"\"\"Like :meth:`Flask.add_url_rule` but for a module.  The endpoint for\n         the :func:`url_for` function is prefixed with the name of the module.\n+\n+        .. versionchanged:: 0.6\n+           The `endpoint` argument is now optional and will default to the\n+           function name to consistent with the function of the same name\n+           on the application object.\n         \"\"\"\n         def register_rule(state):\n             the_rule = rule\n             if state.url_prefix:\n                 the_rule = state.url_prefix + rule\n-            state.app.add_url_rule(the_rule, '%s.%s' % (self.name, endpoint),\n+            the_endpoint = endpoint\n+            if the_endpoint is None:\n+                the_endpoint = _endpoint_from_view_func(view_func)\n+            state.app.add_url_rule(the_rule, '%s.%s' % (self.name,\n+                                                        the_endpoint),\n                                    view_func, **options)\n         self._record(register_rule)\n \n\n@@ -612,6 +612,18 @@ class ModuleTestCase(unittest.TestCase):\n         assert c.get('/admin/login').data == 'admin login'\n         assert c.get('/admin/logout').data == 'admin logout'\n \n+    def test_default_endpoint_name(self):\n+        app = flask.Flask(__name__)\n+        mod = flask.Module(__name__, 'frontend')\n+        def index():\n+            return 'Awesome'\n+        mod.add_url_rule('/', view_func=index)\n+        app.register_module(mod)\n+        rv = app.test_client().get('/')\n+        assert rv.data == 'Awesome'\n+        with app.test_request_context():\n+            assert flask.url_for('frontend.index') == '/'\n+\n     def test_request_processing(self):\n         catched = []\n         app = flask.Flask(__name__)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#1202996c634b23f82421753cb7c46a5ccdf7aca2", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 5 | Lines Deleted: 8 | Files Changed: 1 | Hunks: 5 | Methods Changed: 1 | Complexity Δ (Sum/Max): -1/0 | Churn Δ: 13 | Churn Cumulative: 116 | Contributors (this commit): 2 | Commits (past 90d): 7 | Contributors (cumulative): 2 | DMM Complexity: 0.0\n\nDIFF:\n@@ -35,23 +35,20 @@ class _DispatchingJinjaLoader(BaseLoader):\n         self.app = app\n \n     def get_source(self, environment, template):\n+        loader = None\n         try:\n             module, name = template.split('/', 1)\n             loader = self.app.modules[module].jinja_loader\n-            if loader is None:\n-                raise ValueError()\n         except (ValueError, KeyError):\n-            loader = self.app.jinja_loader\n+            pass\n+        # if there was a module and it has a loader, try this first\n         if loader is not None:\n-                return loader.get_source(environment, template)\n-        else:\n             try:\n                 return loader.get_source(environment, name)\n             except TemplateNotFound:\n                 pass\n-        # raise the exception with the correct filename here.\n-        # (the one that includes the prefix)\n-        raise TemplateNotFound(template)\n+        # fall back to application loader if module failed\n+        return self.app.jinja_loader.get_source(environment, template)\n \n     def list_templates(self):\n         result = self.app.jinja_loader.list_templates()\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#6fc1492357a94ab553fe7ef16a7a2235d05f5a1d", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 61 | Lines Deleted: 1 | Files Changed: 3 | Hunks: 3 | Methods Changed: 2 | Complexity Δ (Sum/Max): 4/3 | Churn Δ: 62 | Churn Cumulative: 1930 | Contributors (this commit): 7 | Commits (past 90d): 85 | Contributors (cumulative): 11 | DMM Complexity: 1.0\n\nDIFF:\n@@ -19,7 +19,7 @@ from .app import Flask, Request, Response\n from .config import Config\n from .helpers import url_for, jsonify, json_available, flash, \\\n     send_file, send_from_directory, get_flashed_messages, \\\n-    get_template_attribute\n+    get_template_attribute, make_response\n from .globals import current_app, g, request, session, _request_ctx_stack\n from .module import Module\n from .templating import render_template, render_template_string\n\n@@ -101,6 +101,48 @@ def jsonify(*args, **kwargs):\n         indent=None if request.is_xhr else 2), mimetype='application/json')\n \n \n+def make_response(*args):\n+    \"\"\"Sometimes it is necessary to set additional headers in a view.  Because\n+    views do not have to return response objects but can return a value that\n+    is converted into a response object by Flask itself, it becomes tricky to\n+    add headers to it.  This function can be called instead of using a return\n+    and you will get a response object which you can use to attach headers.\n+\n+    If view looked like this and you want to add a new header::\n+\n+        def index():\n+            return render_template('index.html', foo=42)\n+\n+    You can now do something like this::\n+\n+        def index():\n+            response = make_response(render_template('index.html', foo=42))\n+            response.headers['X-Parachutes'] = 'parachutes are cool'\n+            return response\n+\n+    This function accepts the very same arguments you can return from a\n+    view function.  This for example creates a response with a 404 error\n+    code::\n+\n+        response = make_response(render_template('not_found.html', 404))\n+\n+    Internally this function does the following things:\n+\n+    -   if no arguments are passed, it creates a new response argument\n+    -   if one argument is passed, :meth:`flask.Flask.make_response`\n+        is invoked with it.\n+    -   if more than one argument is passed, the arguments are passed\n+        to the :meth:`flask.Flask.make_response` function as tuple.\n+\n+    .. versionadded:: 0.6\n+    \"\"\"\n+    if not args:\n+        return current_app.response_class()\n+    if len(args) == 1:\n+        args = args[0]\n+    return current_app.make_response(args)\n+\n+\n def url_for(endpoint, **values):\n     \"\"\"Generates a URL to the given endpoint with the method provided.\n     The endpoint is relative to the active module if modules are in use.\n\n@@ -393,6 +393,24 @@ class BasicFunctionalityTestCase(unittest.TestCase):\n         assert rv.status_code == 400\n         assert rv.mimetype == 'text/plain'\n \n+    def test_make_response(self):\n+        app = flask.Flask(__name__)\n+        with app.test_request_context():\n+            rv = flask.make_response()\n+            assert rv.status_code == 200\n+            assert rv.data == ''\n+            assert rv.mimetype == 'text/html'\n+\n+            rv = flask.make_response('Awesome')\n+            assert rv.status_code == 200\n+            assert rv.data == 'Awesome'\n+            assert rv.mimetype == 'text/html'\n+\n+            rv = flask.make_response('W00t', 404)\n+            assert rv.status_code == 404\n+            assert rv.data == 'W00t'\n+            assert rv.mimetype == 'text/html'\n+\n     def test_url_generation(self):\n         app = flask.Flask(__name__)\n         @app.route('/hello/<name>', methods=['POST'])\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#90b8df3e4ce762ac4de4a6fabd8fb34532bedd5e", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 606 | Contributors (this commit): 3 | Commits (past 90d): 23 | Contributors (cumulative): 3 | DMM Complexity: None\n\nDIFF:\n@@ -124,7 +124,7 @@ def make_response(*args):\n     view function.  This for example creates a response with a 404 error\n     code::\n \n-        response = make_response(render_template('not_found.html', 404))\n+        response = make_response(render_template('not_found.html'), 404)\n \n     Internally this function does the following things:\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#e0712b47c6e5bc98f2afd8b0a82cc5005dc58722", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 151 | Lines Deleted: 3 | Files Changed: 6 | Hunks: 13 | Methods Changed: 21 | Complexity Δ (Sum/Max): 18/14 | Churn Δ: 154 | Churn Cumulative: 3128 | Contributors (this commit): 7 | Commits (past 90d): 113 | Contributors (cumulative): 16 | DMM Complexity: 1.0\n\nDIFF:\n@@ -245,7 +245,8 @@ intersphinx_mapping = {\n     'http://docs.python.org/dev': None,\n     'http://werkzeug.pocoo.org/documentation/dev/': None,\n     'http://www.sqlalchemy.org/docs/': None,\n-    'http://wtforms.simplecodes.com/docs/0.5/': None\n+    'http://wtforms.simplecodes.com/docs/0.5/': None,\n+    'http://discorporate.us/projects/Blinker/docs/1.0/': None\n }\n \n pygments_style = 'flask_theme_support.FlaskyStyle'\n\n@@ -24,6 +24,10 @@ from .globals import current_app, g, request, session, _request_ctx_stack\n from .module import Module\n from .templating import render_template, render_template_string\n \n+# the signals\n+from .signals import signals_available, template_rendered, request_started, \\\n+     request_finished, got_request_exception\n+\n # only import json if it's available\n if json_available:\n     from .helpers import json\n\n@@ -32,6 +32,7 @@ from .session import Session, _NullSession\n from .module import _ModuleSetupState\n from .templating import _DispatchingJinjaLoader, \\\n     _default_template_ctx_processor\n+from .signals import request_started, request_finished, got_request_exception\n \n # a lock used for logger initialization\n _logger_lock = Lock()\n@@ -657,6 +658,7 @@ class Flask(_PackageBoundObject):\n \n         .. versionadded: 0.3\n         \"\"\"\n+        got_request_exception.send(self, exception=e)\n         handler = self.error_handlers.get(500)\n         if self.debug:\n             raise\n@@ -791,6 +793,7 @@ class Flask(_PackageBoundObject):\n         \"\"\"\n         with self.request_context(environ):\n             try:\n+                request_started.send(self)\n                 rv = self.preprocess_request()\n                 if rv is None:\n                     rv = self.dispatch_request()\n@@ -801,6 +804,7 @@ class Flask(_PackageBoundObject):\n                 response = self.process_response(response)\n             except Exception, e:\n                 response = self.make_response(self.handle_exception(e))\n+            request_finished.send(self, response=response)\n             return response(environ, start_response)\n \n     def request_context(self, environ):\n\n@@ -0,0 +1,50 @@\n+# -*- coding: utf-8 -*-\n+\"\"\"\n+    flask.signals\n+    ~~~~~~~~~~~~~\n+\n+    Implements signals based on blinker if available, otherwise\n+    falls silently back to a noop\n+\n+    :copyright: (c) 2010 by Armin Ronacher.\n+    :license: BSD, see LICENSE for more details.\n+\"\"\"\n+signals_available = False\n+try:\n+    from blinker import Namespace\n+    signals_available = True\n+    _signals = Namespace()\n+except ImportError:\n+    class Namespace(object):\n+        def signal(self, name, doc=None):\n+            return _FakeSignal(name, doc)\n+    class _FakeSignal(object):\n+        \"\"\"If blinker is unavailable, create a fake class with the same\n+        interface that allows sending of signals but will fail with an\n+        error on anything else.  Instead of doing anything on send, it\n+        will just ignore the arguments and do nothing instead.\n+        \"\"\"\n+\n+        def __init__(self, name, doc=None):\n+            self.name = name\n+            self.__doc__ = doc\n+        def _fail(self, *args, **kwargs):\n+            raise RuntimeError('signalling support is unavailable '\n+                               'because the blinker library is '\n+                               'not installed.')\n+        send = lambda *a, **kw: None\n+        connect = disconnect = has_receivers_for = receivers_for = \\\n+            temporarily_connected_to = _fail\n+        del _fail\n+\n+# the namespace for code signals.  If you are not flask code, do\n+# not put signals in here.  Create your own namespace instead.\n+_signals = Namespace()\n+\n+\n+# core signals.  For usage examples grep the sourcecode or consult\n+# the API documentation in docs/api.rst as well as docs/signals.rst\n+template_rendered = _signals.signal('template-rendered')\n+request_started = _signals.signal('request-started')\n+request_finished = _signals.signal('request-finished')\n+got_request_exception = _signals.signal('got-request-exception')\n\n@@ -11,6 +11,7 @@\n from jinja2 import BaseLoader, FileSystemLoader, TemplateNotFound\n \n from .globals import _request_ctx_stack\n+from .signals import template_rendered\n \n \n def _default_template_ctx_processor():\n@@ -59,6 +60,13 @@ class _DispatchingJinjaLoader(BaseLoader):\n         return result\n \n \n+def _render(template, context, app):\n+    \"\"\"Renders the template and fires the signal\"\"\"\n+    rv = template.render(context)\n+    template_rendered.send(app, template=template, context=context)\n+    return rv\n+\n+\n def render_template(template_name, **context):\n     \"\"\"Renders a template from the template folder with the given\n     context.\n@@ -69,7 +77,8 @@ def render_template(template_name, **context):\n     \"\"\"\n     ctx = _request_ctx_stack.top\n     ctx.app.update_template_context(context)\n-    return ctx.app.jinja_env.get_template(template_name).render(context)\n+    return _render(ctx.app.jinja_env.get_template(template_name),\n+                   context, ctx.app)\n \n \n def render_template_string(source, **context):\n@@ -83,4 +92,5 @@ def render_template_string(source, **context):\n     \"\"\"\n     ctx = _request_ctx_stack.top\n     ctx.app.update_template_context(context)\n-    return ctx.app.jinja_env.from_string(source).render(context)\n+    return _render(ctx.app.jinja_env.from_string(source),\n+                   context, ctx.app)\n\n@@ -1024,6 +1024,83 @@ class SubdomainTestCase(unittest.TestCase):\n         assert rv.data == 'index for mitsuhiko'\n \n \n+class TestSignals(unittest.TestCase):\n+\n+    def test_template_rendered(self):\n+        app = flask.Flask(__name__)\n+\n+        @app.route('/')\n+        def index():\n+            return flask.render_template('simple_template.html', whiskey=42)\n+\n+        recorded = []\n+        def record(sender, template, context):\n+            recorded.append((template, context))\n+\n+        with flask.template_rendered.temporarily_connected_to(record, app):\n+            rv = app.test_client().get('/')\n+            assert len(recorded) == 1\n+            template, context = recorded[0]\n+            assert template.name == 'simple_template.html'\n+            assert context['whiskey'] == 42\n+\n+    def test_request_signals(self):\n+        app = flask.Flask(__name__)\n+        calls = []\n+\n+        def before_request_signal(sender):\n+            calls.append('before-signal')\n+\n+        def after_request_signal(sender, response):\n+            assert response.data == 'stuff'\n+            calls.append('after-signal')\n+\n+        @app.before_request\n+        def before_request_handler():\n+            calls.append('before-handler')\n+\n+        @app.after_request\n+        def after_request_handler(response):\n+            calls.append('after-handler')\n+            response.data = 'stuff'\n+            return response\n+\n+        @app.route('/')\n+        def index():\n+            calls.append('handler')\n+            return 'ignored anyway'\n+\n+        flask.request_started.connect(before_request_signal, app)\n+        flask.request_finished.connect(after_request_signal, app)\n+\n+        try:\n+            rv = app.test_client().get('/')\n+            assert rv.data == 'stuff'\n+\n+            assert calls == ['before-signal', 'before-handler',\n+                             'handler', 'after-handler',\n+                             'after-signal']\n+        finally:\n+            flask.request_started.disconnect(before_request_signal, app)\n+            flask.request_finished.disconnect(after_request_signal, app)\n+\n+    def test_request_exception_signal(self):\n+        app = flask.Flask(__name__)\n+        recorded = []\n+\n+        @app.route('/')\n+        def index():\n+            1/0\n+\n+        def record(sender, exception):\n+            recorded.append(exception)\n+\n+        with flask.got_request_exception.temporarily_connected_to(record):\n+            assert app.test_client().get('/').status_code == 500\n+            assert len(recorded) == 1\n+            assert isinstance(recorded[0], ZeroDivisionError)\n+\n+\n def suite():\n     from minitwit_tests import MiniTwitTestCase\n     from flaskr_tests import FlaskrTestCase\n@@ -1038,6 +1115,8 @@ def suite():\n     suite.addTest(unittest.makeSuite(SubdomainTestCase))\n     if flask.json_available:\n         suite.addTest(unittest.makeSuite(JSONTestCase))\n+    if flask.signals_available:\n+        suite.addTest(unittest.makeSuite(TestSignals))\n     suite.addTest(unittest.makeSuite(MiniTwitTestCase))\n     suite.addTest(unittest.makeSuite(FlaskrTestCase))\n     return suite\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#91e9632a379ebdd778c229a6da86d11140fa7f17", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 41 | Lines Deleted: 41 | Files Changed: 1 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 82 | Churn Cumulative: 1285 | Contributors (this commit): 3 | Commits (past 90d): 29 | Contributors (cumulative): 3 | DMM Complexity: None\n\nDIFF:\n@@ -766,47 +766,6 @@ class Flask(_PackageBoundObject):\n             response = handler(response)\n         return response\n \n-    def wsgi_app(self, environ, start_response):\n-        \"\"\"The actual WSGI application.  This is not implemented in\n-        `__call__` so that middlewares can be applied without losing a\n-        reference to the class.  So instead of doing this::\n-\n-            app = MyMiddleware(app)\n-\n-        It's a better idea to do this instead::\n-\n-            app.wsgi_app = MyMiddleware(app.wsgi_app)\n-\n-        Then you still have the original application object around and\n-        can continue to call methods on it.\n-\n-        .. versionchanged:: 0.4\n-           The :meth:`after_request` functions are now called even if an\n-           error handler took over request processing.  This ensures that\n-           even if an exception happens database have the chance to\n-           properly close the connection.\n-\n-        :param environ: a WSGI environment\n-        :param start_response: a callable accepting a status code,\n-                               a list of headers and an optional\n-                               exception context to start the response\n-        \"\"\"\n-        with self.request_context(environ):\n-            try:\n-                request_started.send(self)\n-                rv = self.preprocess_request()\n-                if rv is None:\n-                    rv = self.dispatch_request()\n-                response = self.make_response(rv)\n-            except Exception, e:\n-                response = self.make_response(self.handle_exception(e))\n-            try:\n-                response = self.process_response(response)\n-            except Exception, e:\n-                response = self.make_response(self.handle_exception(e))\n-            request_finished.send(self, response=response)\n-            return response(environ, start_response)\n-\n     def request_context(self, environ):\n         \"\"\"Creates a request context from the given environment and binds\n         it to the current context.  This must be used in combination with\n@@ -854,6 +813,47 @@ class Flask(_PackageBoundObject):\n         from werkzeug import create_environ\n         return self.request_context(create_environ(*args, **kwargs))\n \n+    def wsgi_app(self, environ, start_response):\n+        \"\"\"The actual WSGI application.  This is not implemented in\n+        `__call__` so that middlewares can be applied without losing a\n+        reference to the class.  So instead of doing this::\n+\n+            app = MyMiddleware(app)\n+\n+        It's a better idea to do this instead::\n+\n+            app.wsgi_app = MyMiddleware(app.wsgi_app)\n+\n+        Then you still have the original application object around and\n+        can continue to call methods on it.\n+\n+        .. versionchanged:: 0.4\n+           The :meth:`after_request` functions are now called even if an\n+           error handler took over request processing.  This ensures that\n+           even if an exception happens database have the chance to\n+           properly close the connection.\n+\n+        :param environ: a WSGI environment\n+        :param start_response: a callable accepting a status code,\n+                               a list of headers and an optional\n+                               exception context to start the response\n+        \"\"\"\n+        with self.request_context(environ):\n+            try:\n+                request_started.send(self)\n+                rv = self.preprocess_request()\n+                if rv is None:\n+                    rv = self.dispatch_request()\n+                response = self.make_response(rv)\n+            except Exception, e:\n+                response = self.make_response(self.handle_exception(e))\n+            try:\n+                response = self.process_response(response)\n+            except Exception, e:\n+                response = self.make_response(self.handle_exception(e))\n+            request_finished.send(self, response=response)\n+            return response(environ, start_response)\n+\n     def __call__(self, environ, start_response):\n         \"\"\"Shortcut for :attr:`wsgi_app`.\"\"\"\n         return self.wsgi_app(environ, start_response)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
