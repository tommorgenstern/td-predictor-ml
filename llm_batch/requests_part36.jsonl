{"custom_id": "requests#ab4c03adc343a7e97575bd02e57bdbf82cea9d86", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 0 | Lines Deleted: 5 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 5 | Churn Cumulative: 4539 | Contributors (this commit): 43 | Commits (past 90d): 72 | Contributors (cumulative): 43 | DMM Complexity: None\n\nDIFF:\n@@ -69,11 +69,6 @@ class Request(object):\n         self.timeout = timeout\n \n         #: Request URL.\n-\n-        # if isinstance(url, str):\n-            # url = url.encode('utf-8')\n-            # print(dir(url))\n-\n         self.url = url\n \n         #: Dictionary of HTTP Headers to attach to the :class:`Request <Request>`.\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#0d8c08cd22018bbda2ba4eef07af49f42d5b9006", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 12 | Lines Deleted: 2 | Files Changed: 2 | Hunks: 6 | Methods Changed: 2 | Complexity Δ (Sum/Max): 2/1 | Churn Δ: 14 | Churn Cumulative: 2230 | Contributors (this commit): 24 | Commits (past 90d): 45 | Contributors (cumulative): 25 | DMM Complexity: 1.0\n\nDIFF:\n@@ -65,8 +65,6 @@ class RequestsTestSuite(TestSetup, unittest.TestCase):\n         requests.patch\n         requests.post\n \n-\n-\n     def test_invalid_url(self):\n         self.assertRaises(ValueError, get, 'hiwpefhipowhefopw')\n \n@@ -801,6 +799,11 @@ class RequestsTestSuite(TestSetup, unittest.TestCase):\n         assert r.content is None\n         assert isinstance(r.error, requests.exceptions.Timeout)\n \n+    def test_upload_binary_data(self):\n+\n+        r = requests.get(httpbin('post'), auth=('a', 'b'), data='\\xff')\n+\n+\n \n if __name__ == '__main__':\n     unittest.main()\n\n@@ -22,14 +22,17 @@ class RequestsTestSuite(unittest.TestCase):\n     def test_addition(self):\n         assert (1 + 1) == 2\n \n+\n     def test_ssl_hostname_ok(self):\n         requests.get('https://github.com', verify=True)\n \n+\n     def test_ssl_hostname_not_ok(self):\n         requests.get('https://kennethreitz.com', verify=False)\n \n         self.assertRaises(requests.exceptions.SSLError, requests.get, 'https://kennethreitz.com')\n \n+\n     def test_ssl_hostname_session_not_ok(self):\n \n         s = requests.session()\n@@ -39,6 +42,10 @@ class RequestsTestSuite(unittest.TestCase):\n         s.get('https://kennethreitz.com', verify=False)\n \n \n+    def test_binary_post(self):\n+        utf8_string = (u'Smörgås').encode('utf-8')\n+        requests.post('http://www.google.com/', data=utf8_string)\n+\n \n if __name__ == '__main__':\n     unittest.main()\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#91ac5ba110e1d85544af3edaa375837db861e426", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 4541 | Contributors (this commit): 43 | Commits (past 90d): 73 | Contributors (cumulative): 43 | DMM Complexity: None\n\nDIFF:\n@@ -524,7 +524,7 @@ class Request(object):\n                         redirect=False,\n                         assert_same_host=False,\n                         preload_content=False,\n-                        decode_content=True,\n+                        decode_content=False,\n                         retries=self.config.get('max_retries', 0),\n                         timeout=self.timeout,\n                     )\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#00b13673e32e45d2eb6517c0cf81915467331d8f", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 13 | Lines Deleted: 8 | Files Changed: 2 | Hunks: 5 | Methods Changed: 3 | Complexity Δ (Sum/Max): 3/4 | Churn Δ: 21 | Churn Cumulative: 5588 | Contributors (this commit): 45 | Commits (past 90d): 90 | Contributors (cumulative): 57 | DMM Complexity: 1.0\n\nDIFF:\n@@ -25,8 +25,8 @@ from .exceptions import (\n     ConnectionError, HTTPError, RequestException, Timeout, TooManyRedirects,\n     URLRequired, SSLError)\n from .utils import (\n-    get_encoding_from_headers, stream_decode_response_unicode,\n-    stream_decompress, guess_filename, requote_uri, dict_from_string)\n+    get_encoding_from_headers, stream_untransfer, guess_filename, requote_uri,\n+    dict_from_string)\n \n from .compat import urlparse, urlunparse, urljoin, urlsplit, urlencode, quote, unquote, str, bytes, SimpleCookie, is_py3, is_py2\n \n@@ -684,10 +684,7 @@ class Response(object):\n         else:\n             gen = generate()\n \n-        if 'gzip' in self.headers.get('content-encoding', ''):\n-            gen = stream_decompress(gen, mode='gzip')\n-        elif 'deflate' in self.headers.get('content-encoding', ''):\n-            gen = stream_decompress(gen, mode='deflate')\n+        gen = stream_untransfer(gen, self)\n \n         if decode_unicode:\n             gen = stream_decode_response_unicode(gen, self)\n@@ -729,7 +726,6 @@ class Response(object):\n         if pending is not None:\n             yield pending.rstrip()\n \n-\n     @property\n     def content(self):\n         \"\"\"Content of the response, in bytes.\"\"\"\n@@ -741,7 +737,7 @@ class Response(object):\n                     raise RuntimeError(\n                         'The content for this response was already consumed')\n \n-                self._content = self.raw.read()\n+                self._content = bytes('').join(self.iter_content()) or None\n             except AttributeError:\n                 self._content = None\n \n\n@@ -400,6 +400,15 @@ def stream_decompress(iterator, mode='gzip'):\n         if rv:\n             yield rv\n \n+def stream_untransfer(gen, resp):\n+    if 'gzip' in resp.headers.get('content-encoding', ''):\n+        gen = stream_decompress(gen, mode='gzip')\n+    elif 'deflate' in resp.headers.get('content-encoding', ''):\n+        gen = stream_decompress(gen, mode='deflate')\n+\n+    return gen\n+\n+\n # The unreserved URI characters (RFC 3986)\n UNRESERVED_SET = frozenset(\n     \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\"\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#27590605596a4c3e282181343102dbbd91dadadc", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 74 | Lines Deleted: 70 | Files Changed: 1 | Hunks: 15 | Methods Changed: 5 | Complexity Δ (Sum/Max): -2/0 | Churn Δ: 144 | Churn Cumulative: 2314 | Contributors (this commit): 23 | Commits (past 90d): 42 | Contributors (cumulative): 23 | DMM Complexity: 0.0\n\nDIFF:\n@@ -107,82 +107,82 @@ class RequestsTestSuite(TestSetup, unittest.TestCase):\n         r = get(httpbin('get') + '?test=true', params={'q': 'test'}, headers=heads)\n         self.assertEqual(r.status_code, 200)\n \n-    def test_unicode_headers(self):\n-        # Simply calling requests with a unicode instance should simply work\n-        # when the characters are all representable using latin-1:\n-        heads = { u'User-Agent': u'Requests Test Suite' }\n-        requests.get(url=httpbin('get'), headers=heads)\n+    # def test_unicode_headers(self):\n+    #     # Simply calling requests with a unicode instance should simply work\n+    #     # when the characters are all representable using latin-1:\n+    #     heads = { u'User-Agent': u'Requests Test Suite' }\n+    #     requests.get(url=httpbin('get'), headers=heads)\n \n-        # Characters outside latin-1 should raise an exception:\n-        heads = { u'User-Agent': u'\\u30cd\\u30c3\\u30c8\\u30ef\\u30fc\\u30af' }\n-        self.assertRaises(UnicodeEncodeError, requests.get,\n-                          url=httpbin('get'), headers=heads)\n+    #     # Characters outside latin-1 should raise an exception:\n+    #     heads = { u'User-Agent': u'\\u30cd\\u30c3\\u30c8\\u30ef\\u30fc\\u30af' }\n+    #     self.assertRaises(UnicodeEncodeError, requests.get,\n+    #                       url=httpbin('get'), headers=heads)\n \n-    def test_session_with_escaped_url(self):\n-        # Test a URL that contains percent-escaped characters\n-        # This URL should not be modified (double-escaped)\n-        # Tests:\n-        # - Quoted illegal characters (\"%20\" (' '), \"%3C\" ('<'), \"%3E\" ('>'))\n-        # - Quoted reserved characters (\"%25\" ('%'), \"%23\" ('#'), \"%2F\" ('/'))\n-        # - Quoted non-ASCII characters (\"%C3%98\", \"%C3%A5\")\n-        path_fully_escaped = '%3Ca%25b%23c%2Fd%3E/%C3%98%20%C3%A5'\n-        url = httpbin('get/' + path_fully_escaped)\n-        response = get(url)\n-        self.assertEqual(response.url, httpbin('get/' + path_fully_escaped))\n+    # def test_session_with_escaped_url(self):\n+    #     # Test a URL that contains percent-escaped characters\n+    #     # This URL should not be modified (double-escaped)\n+    #     # Tests:\n+    #     # - Quoted illegal characters (\"%20\" (' '), \"%3C\" ('<'), \"%3E\" ('>'))\n+    #     # - Quoted reserved characters (\"%25\" ('%'), \"%23\" ('#'), \"%2F\" ('/'))\n+    #     # - Quoted non-ASCII characters (\"%C3%98\", \"%C3%A5\")\n+    #     path_fully_escaped = '%3Ca%25b%23c%2Fd%3E/%C3%98%20%C3%A5'\n+    #     url = httpbin('get/' + path_fully_escaped)\n+    #     response = get(url)\n+    #     self.assertEqual(response.url, httpbin('get/' + path_fully_escaped))\n \n-        # Test that illegal characters in a path get properly percent-escaped\n-        # Tests:\n-        # - Bare illegal characters (space, '<')\n-        # - Bare non-ASCII characters ('\\u00d8')\n-        path = u'<a%25b%23c%2Fd%3E/\\u00d8 %C3%A5'\n-        url = httpbin('get/' + path)\n-        response = get(url)\n-        self.assertEqual(response.url, httpbin('get/' + path_fully_escaped))\n+    #     # Test that illegal characters in a path get properly percent-escaped\n+    #     # Tests:\n+    #     # - Bare illegal characters (space, '<')\n+    #     # - Bare non-ASCII characters ('\\u00d8')\n+    #     path = u'<a%25b%23c%2Fd%3E/\\u00d8 %C3%A5'\n+    #     url = httpbin('get/' + path)\n+    #     response = get(url)\n+    #     self.assertEqual(response.url, httpbin('get/' + path_fully_escaped))\n \n-        # Test that reserved characters in a path do not get percent-escaped\n-        # Tests:\n-        # - All reserved characters (RFC 3986), except '?', '#', '[' and ']',\n-        #   which are not allowed in the path, and ';' which delimits\n-        #   parameters.\n-        #   All such characters must be allowed bare in path, and must not be\n-        #   encoded.\n-        # - Special unreserved characters (RFC 3986), which should not be\n-        #   encoded (even though it wouldn't hurt).\n-        path_reserved = '!$&\\'()*+,/:=@-._~'\n-        url = httpbin('get/' + path_reserved)\n-        response = get(url)\n-        self.assertEqual(response.url, httpbin('get/' + path_reserved))\n+    #     # Test that reserved characters in a path do not get percent-escaped\n+    #     # Tests:\n+    #     # - All reserved characters (RFC 3986), except '?', '#', '[' and ']',\n+    #     #   which are not allowed in the path, and ';' which delimits\n+    #     #   parameters.\n+    #     #   All such characters must be allowed bare in path, and must not be\n+    #     #   encoded.\n+    #     # - Special unreserved characters (RFC 3986), which should not be\n+    #     #   encoded (even though it wouldn't hurt).\n+    #     path_reserved = '!$&\\'()*+,/:=@-._~'\n+    #     url = httpbin('get/' + path_reserved)\n+    #     response = get(url)\n+    #     self.assertEqual(response.url, httpbin('get/' + path_reserved))\n \n-        # Test that percent-encoded unreserved characters in a path get\n-        # normalised to their un-encoded forms.\n-        path_unreserved = 'ABCDwxyz1234-._~'\n-        path_unreserved_escaped = '%41%42%43%44%77%78%79%7A%31%32%33%34%2D%2E%5F%7E'\n-        url = httpbin('get/' + path_unreserved_escaped)\n-        response = get(url)\n-        self.assertEqual(response.url, httpbin('get/' + path_unreserved))\n+    #     # Test that percent-encoded unreserved characters in a path get\n+    #     # normalised to their un-encoded forms.\n+    #     path_unreserved = 'ABCDwxyz1234-._~'\n+    #     path_unreserved_escaped = '%41%42%43%44%77%78%79%7A%31%32%33%34%2D%2E%5F%7E'\n+    #     url = httpbin('get/' + path_unreserved_escaped)\n+    #     response = get(url)\n+    #     self.assertEqual(response.url, httpbin('get/' + path_unreserved))\n \n-        # Re-run all of the same tests on the query part of the URI\n-        query_fully_escaped = '%3Ca%25b%23c%2Fd%3E=%C3%98%20%C3%A5'\n-        url = httpbin('get/?' + query_fully_escaped)\n-        response = get(url)\n-        self.assertEqual(response.url, httpbin('get/?' + query_fully_escaped))\n+    #     # Re-run all of the same tests on the query part of the URI\n+    #     query_fully_escaped = '%3Ca%25b%23c%2Fd%3E=%C3%98%20%C3%A5'\n+    #     url = httpbin('get/?' + query_fully_escaped)\n+    #     response = get(url)\n+    #     self.assertEqual(response.url, httpbin('get/?' + query_fully_escaped))\n \n-        query = u'<a%25b%23c%2Fd%3E=\\u00d8 %C3%A5'\n-        url = httpbin('get/?' + query)\n-        response = get(url)\n-        self.assertEqual(response.url, httpbin('get/?' + query_fully_escaped))\n+    #     query = u'<a%25b%23c%2Fd%3E=\\u00d8 %C3%A5'\n+    #     url = httpbin('get/?' + query)\n+    #     response = get(url)\n+    #     self.assertEqual(response.url, httpbin('get/?' + query_fully_escaped))\n \n-        # The legal characters in query happens to be the same as in path\n-        query_reserved = '!$&\\'()*+,/:=@-._~'\n-        url = httpbin('get/?' + query_reserved)\n-        response = get(url)\n-        self.assertEqual(response.url, httpbin('get/?' + query_reserved))\n+    #     # The legal characters in query happens to be the same as in path\n+    #     query_reserved = '!$&\\'()*+,/:=@-._~'\n+    #     url = httpbin('get/?' + query_reserved)\n+    #     response = get(url)\n+    #     self.assertEqual(response.url, httpbin('get/?' + query_reserved))\n \n-        query_unreserved = 'ABCDwxyz=1234-._~'\n-        query_unreserved_escaped = '%41%42%43%44%77%78%79%7A=%31%32%33%34%2D%2E%5F%7E'\n-        url = httpbin('get/?' + query_unreserved_escaped)\n-        response = get(url)\n-        self.assertEqual(response.url, httpbin('get/?' + query_unreserved))\n+    #     query_unreserved = 'ABCDwxyz=1234-._~'\n+    #     query_unreserved_escaped = '%41%42%43%44%77%78%79%7A=%31%32%33%34%2D%2E%5F%7E'\n+    #     url = httpbin('get/?' + query_unreserved_escaped)\n+    #     response = get(url)\n+    #     self.assertEqual(response.url, httpbin('get/?' + query_unreserved))\n \n \n     def test_user_agent_transfers(self):\n@@ -285,7 +285,8 @@ class RequestsTestSuite(TestSetup, unittest.TestCase):\n             post1 = post(url, data={'some': 'data'})\n             self.assertEqual(post1.status_code, 200)\n \n-            post2 = post(url, files={'some': open('test_requests.py')})\n+            with open('test_requests.py') as f:\n+                post2 = post(url, files={'some': f})\n             self.assertEqual(post2.status_code, 200)\n \n             post3 = post(url, data='[{\"some\": \"json\"}]')\n@@ -296,9 +297,10 @@ class RequestsTestSuite(TestSetup, unittest.TestCase):\n \n         for service in SERVICES:\n \n+            with open('test_requests.py') as f:\n                 url = service('post')\n                 post1 = post(url,\n-                         files={'some': open('test_requests.py')},\n+                             files={'some': f},\n                              data={'some': 'data'})\n \n             self.assertEqual(post1.status_code, 200)\n@@ -310,8 +312,10 @@ class RequestsTestSuite(TestSetup, unittest.TestCase):\n \n             url = service('post')\n \n+            with open('test_requests.py') as f:\n+\n                 post2 = post(url,\n-                files={'some': open('test_requests.py')},\n+                    files={'some': f},\n                     headers = {'User-Agent': 'requests-tests'})\n \n             self.assertEqual(post2.status_code, 200)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#ec109c9ac89bf945715a429010706539a262e502", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 5 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 3 | Methods Changed: 3 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 6 | Churn Cumulative: 4559 | Contributors (this commit): 43 | Commits (past 90d): 75 | Contributors (cumulative): 43 | DMM Complexity: 1.0\n\nDIFF:\n@@ -191,7 +191,10 @@ class Request(object):\n \n             # Save original response for later.\n             response.raw = resp\n+            if isinstance(self.full_url, bytes):\n                 response.url = self.full_url.decode('utf-8')\n+            else:\n+                response.url = self.full_url\n \n             return response\n \n@@ -737,7 +740,8 @@ class Response(object):\n                     raise RuntimeError(\n                         'The content for this response was already consumed')\n \n-                self._content = bytes('').join(self.iter_content()) or None\n+                self._content = bytes().join(self.iter_content()) or None\n+                # print repr(self._content)\n             except AttributeError:\n                 self._content = None\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#e663c77e70a24fb1fc409326a5989728855ec4a9", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 1039 | Contributors (this commit): 14 | Commits (past 90d): 17 | Contributors (cumulative): 14 | DMM Complexity: None\n\nDIFF:\n@@ -18,7 +18,7 @@ import zlib\n \n from .compat import parse_http_list as _parse_list_header\n from .compat import quote, unquote, cookielib, SimpleCookie, is_py2\n-from .compat import basestring\n+from .compat import basestring, bytes\n \n \n def dict_from_string(s):\n@@ -395,7 +395,7 @@ def stream_decompress(iterator, mode='gzip'):\n             yield chunk\n     else:\n         # Make sure everything has been returned from the decompression object\n-        buf = dec.decompress('')\n+        buf = dec.decompress(bytes())\n         rv = buf + dec.flush()\n         if rv:\n             yield rv\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#dacaae520a84d2a2e373ca2fc3b7a77d44dd9dc2", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 3 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 3 | Churn Cumulative: 4562 | Contributors (this commit): 43 | Commits (past 90d): 76 | Contributors (cumulative): 43 | DMM Complexity: 0.0\n\nDIFF:\n@@ -283,6 +283,9 @@ class Request(object):\n         returns it twice.\n         \"\"\"\n \n+        if isinstance(data, bytes):\n+            return data, data\n+\n         if hasattr(data, '__iter__') and not isinstance(data, str):\n             data = dict(data)\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#b5212ddc3dcde30e3d0e3daefcc49e2dd76049ff", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 0 | Lines Deleted: 27 | Files Changed: 1 | Hunks: 2 | Methods Changed: 2 | Complexity Δ (Sum/Max): -4/0 | Churn Δ: 27 | Churn Cumulative: 1066 | Contributors (this commit): 14 | Commits (past 90d): 18 | Contributors (cumulative): 14 | DMM Complexity: 0.0\n\nDIFF:\n@@ -291,23 +291,6 @@ def get_encoding_from_headers(headers):\n         return 'ISO-8859-1'\n \n \n-def unicode_from_html(content):\n-    \"\"\"Attempts to decode an HTML string into unicode.\n-    If unsuccessful, the original content is returned.\n-    \"\"\"\n-\n-    encodings = get_encodings_from_content(content)\n-\n-    for encoding in encodings:\n-\n-        try:\n-            return str(content, encoding)\n-        except (UnicodeError, TypeError):\n-            pass\n-\n-        return content\n-\n-\n def stream_decode_response_unicode(iterator, r):\n     \"\"\"Stream decodes a iterator.\"\"\"\n \n@@ -358,16 +341,6 @@ def get_unicode_from_response(r):\n     except TypeError:\n         return r.content\n \n-\n-def decode_gzip(content):\n-    \"\"\"Return gzip-decoded string.\n-\n-    :param content: bytestring to gzip-decode.\n-    \"\"\"\n-\n-    return zlib.decompress(content, 16 + zlib.MAX_WBITS)\n-\n-\n def stream_decompress(iterator, mode='gzip'):\n     \"\"\"\n     Stream decodes an iterator over compressed data\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#d339b0f64fb2ea53519366729371b3b497dd2286", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 12 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): 2/2 | Churn Δ: 13 | Churn Cumulative: 19 | Contributors (this commit): 2 | Commits (past 90d): 2 | Contributors (cumulative): 2 | DMM Complexity: 1.0\n\nDIFF:\n@@ -23,7 +23,6 @@ from requests.auth import HTTPBasicAuth, HTTPDigestAuth\n \n \n \n-if (sys.platform == 'win32') and ('HTTPBIN_URL' not in os.environ):\n os.environ['HTTPBIN_URL'] = 'http://httpbin.org/'\n \n # TODO: Detect an open port.\n@@ -813,6 +812,18 @@ class RequestsTestSuite(TestSetup, unittest.TestCase):\n \n         r = requests.get(httpbin('post'), auth=('a', 'b'), data='\\xff')\n \n+    def test_useful_exception_for_invalid_schema(self):\n+        \n+        try:\n+          self.assertRaises(\n+              requests.exceptions.URLRequired,\n+              get,\n+              'http://http://')\n+        # To make this test as minimal as possible, only catch the\n+        # exception raised in issue #380.\n+        except ValueError:\n+          self.fail()\n+\n \n \n if __name__ == '__main__':\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#1ded0ad3d55a100234f0f06e37315bd65664e8f5", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 1 | Churn Cumulative: 20 | Contributors (this commit): 2 | Commits (past 90d): 3 | Contributors (cumulative): 2 | DMM Complexity: None\n\nDIFF:\n@@ -23,6 +23,7 @@ from requests.auth import HTTPBasicAuth, HTTPDigestAuth\n \n \n \n+if (sys.platform == 'win32') and ('HTTPBIN_URL' not in os.environ):\n     os.environ['HTTPBIN_URL'] = 'http://httpbin.org/'\n \n # TODO: Detect an open port.\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#640538adcb81fd5930eadb1ecf47dcb8a0a62ab3", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 15 | Lines Deleted: 8 | Files Changed: 3 | Hunks: 6 | Methods Changed: 3 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 23 | Churn Cumulative: 5671 | Contributors (this commit): 46 | Commits (past 90d): 98 | Contributors (cumulative): 61 | DMM Complexity: 0.0\n\nDIFF:\n@@ -26,7 +26,7 @@ from .exceptions import (\n     URLRequired, SSLError)\n from .utils import (\n     get_encoding_from_headers, stream_untransfer, guess_filename, requote_uri,\n-    dict_from_string)\n+    dict_from_string, supported_schemes)\n \n from .compat import urlparse, urlunparse, urljoin, urlsplit, urlencode, quote, unquote, str, bytes, SimpleCookie, is_py3, is_py2\n \n@@ -316,6 +316,9 @@ class Request(object):\n         if not scheme:\n             raise ValueError(\"Invalid URL %r: No schema supplied\" % url)\n \n+        if not scheme in supported_schemes():\n+            raise ValueError(\"Invalid scheme %r\" % scheme)\n+\n         netloc = netloc.encode('idna').decode('utf-8')\n \n         if not path:\n\n@@ -416,3 +416,10 @@ def requote_uri(uri):\n     # or '%')\n     return quote(unquote_unreserved(uri), safe=\"!#$%&'()*+,/:;=?@[]~\")\n     return \"/\".join(parts)\n+\n+def supported_schemes():\n+    \"\"\"A list of schemes supported by requests.\n+\n+    return: a list of strings.\n+    \"\"\"\n+    return [\"http\",\"https\"]\n\n@@ -815,15 +815,12 @@ class RequestsTestSuite(TestSetup, unittest.TestCase):\n \n     def test_useful_exception_for_invalid_schema(self):\n         \n-        try:\n+        # If we pass a legitimate URL with a schema not supported \n+        # by requests, we should fail.\n         self.assertRaises(\n-              requests.exceptions.URLRequired,\n+              ValueError,\n               get,\n-              'http://http://')\n-        # To make this test as minimal as possible, only catch the\n-        # exception raised in issue #380.\n-        except ValueError:\n-          self.fail()\n+              'ftp://ftp.kernel.org/pub/')\n \n \n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#544ebf402f50cd7afbbe0e04b553a64872111b6c", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 2 | Methods Changed: 2 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 35 | Contributors (this commit): 2 | Commits (past 90d): 5 | Contributors (cumulative): 2 | DMM Complexity: None\n\nDIFF:\n@@ -813,9 +813,9 @@ class RequestsTestSuite(TestSetup, unittest.TestCase):\n \n         r = requests.get(httpbin('post'), auth=('a', 'b'), data='\\xff')\n \n-    def test_useful_exception_for_invalid_schema(self):\n+    def test_useful_exception_for_invalid_scheme(self):\n         \n-        # If we pass a legitimate URL with a schema not supported \n+        # If we pass a legitimate URL with a scheme not supported \n         # by requests, we should fail.\n         self.assertRaises(\n               ValueError,\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#590ce29743d6c8d68f3885a949a93fdb68f4d142", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 31 | Lines Deleted: 8 | Files Changed: 2 | Hunks: 7 | Methods Changed: 6 | Complexity Δ (Sum/Max): 4/4 | Churn Δ: 39 | Churn Cumulative: 805 | Contributors (this commit): 8 | Commits (past 90d): 13 | Contributors (cumulative): 10 | DMM Complexity: 1.0\n\nDIFF:\n@@ -52,7 +52,7 @@ class Session(object):\n \n     __attrs__ = [\n         'headers', 'cookies', 'auth', 'timeout', 'proxies', 'hooks',\n-        'params', 'config']\n+        'params', 'config', 'verify']\n \n \n     def __init__(self,\n@@ -79,10 +79,7 @@ class Session(object):\n         for (k, v) in list(defaults.items()):\n             self.config.setdefault(k, v)\n \n-        self.poolmanager = PoolManager(\n-            num_pools=self.config.get('pool_connections'),\n-            maxsize=self.config.get('pool_maxsize')\n-        )\n+        self.init_poolmanager()\n \n         # Set up a CookieJar to be used by default\n         self.cookies = {}\n@@ -91,6 +88,12 @@ class Session(object):\n         if cookies is not None:\n             self.cookies.update(cookies)\n \n+    def init_poolmanager(self):\n+        self.poolmanager = PoolManager(\n+            num_pools=self.config.get('pool_connections'),\n+            maxsize=self.config.get('pool_maxsize')\n+        )\n+\n     def __repr__(self):\n         return '<requests-client at 0x%x>' % (id(self))\n \n@@ -146,9 +149,6 @@ class Session(object):\n         params = {} if params is None else params\n         hooks = {} if hooks is None else hooks\n \n-        if verify is None:\n-            verify = self.verify\n-\n         # use session's hooks as defaults\n         for key, cb in list(self.hooks.items()):\n             hooks.setdefault(key, cb)\n@@ -281,6 +281,15 @@ class Session(object):\n \n         return self.request('delete', url, **kwargs)\n \n+    def __getstate__(self):\n+        return dict((attr, getattr(self, attr, None)) for attr in self.__attrs__)\n+\n+    def __setstate__(self, state):\n+        for attr, value in state.items():\n+            setattr(self, attr, value)\n+\n+        self.init_poolmanager()\n+\n \n def session(**kwargs):\n     \"\"\"Returns a :class:`Session` for context-management.\"\"\"\n\n@@ -13,6 +13,7 @@ import time\n import os\n import sys\n import unittest\n+import pickle\n \n import requests\n from requests.compat import str, bytes, StringIO\n@@ -729,6 +730,19 @@ class RequestsTestSuite(TestSetup, unittest.TestCase):\n         assert params3['b'] in r3.text\n         assert params3['c'] in r3.text\n \n+    def test_session_pickling(self):\n+\n+        s = requests.session(\n+                headers={'header': 'value'},\n+                cookies={'a-cookie': 'cookie-value'},\n+                auth=('username', 'password'))\n+\n+        ds = pickle.loads(pickle.dumps(s))\n+\n+        self.assertEqual(s.headers, ds.headers)\n+        self.assertEqual(s.cookies, ds.cookies)\n+        self.assertEqual(s.auth, ds.auth)\n+\n     def test_invalid_content(self):\n         # WARNING: if you're using a terrible DNS provider (comcast),\n         # this will fail.\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#fdbb53db19382e82e6ad67235a9fe16811cfa6e9", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 3 | Lines Deleted: 3 | Files Changed: 1 | Hunks: 3 | Methods Changed: 3 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 6 | Churn Cumulative: 55 | Contributors (this commit): 3 | Commits (past 90d): 7 | Contributors (cumulative): 3 | DMM Complexity: None\n\nDIFF:\n@@ -292,7 +292,7 @@ class RequestsTestSuite(TestSetup, unittest.TestCase):\n             post1 = post(url, data={'some': 'data'})\n             self.assertEqual(post1.status_code, 200)\n \n-            with open('test_requests.py') as f:\n+            with open(__file__) as f:\n                 post2 = post(url, files={'some': f})\n             self.assertEqual(post2.status_code, 200)\n \n@@ -304,7 +304,7 @@ class RequestsTestSuite(TestSetup, unittest.TestCase):\n \n         for service in SERVICES:\n \n-            with open('test_requests.py') as f:\n+            with open(__file__) as f:\n                 url = service('post')\n                 post1 = post(url,\n                              files={'some': f},\n@@ -319,7 +319,7 @@ class RequestsTestSuite(TestSetup, unittest.TestCase):\n \n             url = service('post')\n \n-            with open('test_requests.py') as f:\n+            with open(__file__) as f:\n \n                 post2 = post(url,\n                     files={'some': f},\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#e7efce91fbb8ded451f698147957eb333d7507dc", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 4 | Lines Deleted: 20 | Files Changed: 1 | Hunks: 17 | Methods Changed: 4 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 24 | Churn Cumulative: 4591 | Contributors (this commit): 44 | Commits (past 90d): 70 | Contributors (cumulative): 44 | DMM Complexity: None\n\nDIFF:\n@@ -26,9 +26,10 @@ from .exceptions import (\n     URLRequired, SSLError)\n from .utils import (\n     get_encoding_from_headers, stream_untransfer, guess_filename, requote_uri,\n-    dict_from_string, supported_schemes)\n-\n-from .compat import urlparse, urlunparse, urljoin, urlsplit, urlencode, quote, unquote, str, bytes, SimpleCookie, is_py3, is_py2\n+    dict_from_string, supported_schemes, stream_decode_response_unicode)\n+from .compat import (\n+    urlparse, urlunparse, urljoin, urlsplit, urlencode, str, bytes,\n+    SimpleCookie, is_py2)\n \n # Import chardet if it is available.\n try:\n@@ -39,7 +40,6 @@ except ImportError:\n REDIRECT_STATI = (codes.moved, codes.found, codes.other, codes.temporary_moved)\n \n \n-\n class Request(object):\n     \"\"\"The :class:`Request <Request>` object. It carries out all functionality of\n     Requests. Recommended interface is with the Requests functions.\n@@ -147,11 +147,9 @@ class Request(object):\n         self.headers = headers\n         self._poolmanager = _poolmanager\n \n-\n     def __repr__(self):\n         return '<Request [%s]>' % (self.method)\n \n-\n     def _build_response(self, resp):\n         \"\"\"Build internal :class:`Response <Response>` object\n         from given response.\n@@ -270,7 +268,6 @@ class Request(object):\n         self.response.request = self\n         self.response.cookies.update(self.cookies)\n \n-\n     @staticmethod\n     def _encode_params(data):\n         \"\"\"Encode parameters in a piece of data.\n@@ -289,7 +286,6 @@ class Request(object):\n         if hasattr(data, '__iter__') and not isinstance(data, str):\n             data = dict(data)\n \n-\n         if hasattr(data, 'items'):\n             result = []\n             for k, vs in list(data.items()):\n@@ -312,7 +308,6 @@ class Request(object):\n         # Support for unicode domain names and paths.\n         scheme, netloc, path, params, query, fragment = urlparse(url)\n \n-\n         if not scheme:\n             raise ValueError(\"Invalid URL %r: No schema supplied\" % url)\n \n@@ -375,13 +370,11 @@ class Request(object):\n \n         return ''.join(url)\n \n-\n     def register_hook(self, event, hook):\n         \"\"\"Properly register a hook.\"\"\"\n \n         return self.hooks[event].append(hook)\n \n-\n     def send(self, anyway=False, prefetch=False):\n         \"\"\"Sends the request. Returns True of successful, false if not.\n         If there was an HTTPError during transmission,\n@@ -478,7 +471,6 @@ class Request(object):\n             if self.verify is not True:\n                 cert_loc = self.verify\n \n-\n             # Look for configuration.\n             if not cert_loc:\n                 cert_loc = os.environ.get('REQUESTS_CA_BUNDLE')\n@@ -623,7 +615,6 @@ class Response(object):\n         #: Dictionary of configurations for this request.\n         self.config = {}\n \n-\n     def __repr__(self):\n         return '<Response [%s]>' % (self.status_code)\n \n@@ -643,7 +634,6 @@ class Response(object):\n             return False\n         return True\n \n-\n     def iter_content(self, chunk_size=10 * 1024, decode_unicode=False):\n         \"\"\"Iterates over the response data.  This avoids reading the content\n         at once into memory for large responses.  The chunk size is the number\n@@ -687,7 +677,6 @@ class Response(object):\n             self._content_consumed = True\n             fp.close()\n \n-\n         if getattr(getattr(self.raw, '_original_response', None), 'chunked', False):\n             gen = generate_chunked()\n         else:\n@@ -700,7 +689,6 @@ class Response(object):\n \n         return gen\n \n-\n     def iter_lines(self, chunk_size=10 * 1024, decode_unicode=None):\n         \"\"\"Iterates over the response data, one line at a time.  This\n         avoids reading the content at once into memory for large\n@@ -754,7 +742,6 @@ class Response(object):\n         self._content_consumed = True\n         return self._content\n \n-\n     @property\n     def text(self):\n         \"\"\"Content of the response, in unicode.\n@@ -785,7 +772,6 @@ class Response(object):\n \n         return content\n \n-\n     def raise_for_status(self):\n         \"\"\"Raises stored :class:`HTTPError` or :class:`URLError`, if one occurred.\"\"\"\n \n@@ -800,5 +786,3 @@ class Response(object):\n \n         elif (self.status_code >= 500) and (self.status_code < 600):\n             raise HTTPError('%s Server Error' % self.status_code)\n-\n-\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#fe10eeb5bec86e4d2055c63d7686eda53f69fd2f", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 14 | Lines Deleted: 14 | Files Changed: 3 | Hunks: 16 | Methods Changed: 4 | Complexity Δ (Sum/Max): -1/0 | Churn Δ: 28 | Churn Cumulative: 5840 | Contributors (this commit): 46 | Commits (past 90d): 96 | Contributors (cumulative): 62 | DMM Complexity: 0.0\n\nDIFF:\n@@ -19,6 +19,8 @@ Configurations:\n :pool_connections: The number of active HTTP connection pools to use.\n \"\"\"\n \n+SCHEMAS = ['http', 'https']\n+\n from . import __version__\n \n defaults = dict()\n@@ -38,3 +40,5 @@ defaults['max_retries'] = 0\n defaults['danger_mode'] = False\n defaults['safe_mode'] = False\n defaults['keep_alive'] = True\n+\n+\n\n@@ -21,12 +21,13 @@ from .packages.urllib3.exceptions import SSLError as _SSLError\n from .packages.urllib3.exceptions import HTTPError as _HTTPError\n from .packages.urllib3 import connectionpool, poolmanager\n from .packages.urllib3.filepost import encode_multipart_formdata\n+from .defaults import SCHEMAS\n from .exceptions import (\n     ConnectionError, HTTPError, RequestException, Timeout, TooManyRedirects,\n     URLRequired, SSLError)\n from .utils import (\n     get_encoding_from_headers, stream_untransfer, guess_filename, requote_uri,\n-    dict_from_string, supported_schemes, stream_decode_response_unicode)\n+    dict_from_string, stream_decode_response_unicode)\n from .compat import (\n     urlparse, urlunparse, urljoin, urlsplit, urlencode, str, bytes,\n     SimpleCookie, is_py2)\n@@ -311,7 +312,7 @@ class Request(object):\n         if not scheme:\n             raise ValueError(\"Invalid URL %r: No schema supplied\" % url)\n \n-        if not scheme in supported_schemes():\n+        if not scheme in SCHEMAS:\n             raise ValueError(\"Invalid scheme %r\" % scheme)\n \n         netloc = netloc.encode('idna').decode('utf-8')\n\n@@ -11,13 +11,12 @@ that are also useful for external consumption.\n \n import cgi\n import codecs\n-import os\n import random\n import re\n import zlib\n \n from .compat import parse_http_list as _parse_list_header\n-from .compat import quote, unquote, cookielib, SimpleCookie, is_py2\n+from .compat import quote, cookielib, SimpleCookie, is_py2\n from .compat import basestring, bytes\n \n \n@@ -34,12 +33,14 @@ def dict_from_string(s):\n \n     return cookies\n \n+\n def guess_filename(obj):\n     \"\"\"Tries to guess the filename of the given object.\"\"\"\n     name = getattr(obj, 'name', None)\n     if name and name[0] != '<' and name[-1] != '>':\n         return name\n \n+\n # From mitsuhiko/werkzeug (used with permission).\n def parse_list_header(value):\n     \"\"\"Parse lists as described by RFC 2068 Section 2.\n@@ -172,7 +173,6 @@ def header_expand(headers):\n             if not len(headers) == i + 1:\n                 collector.append(', ')\n \n-\n     # Remove trailing separators.\n     if collector[-1] in (', ', '; '):\n         del collector[-1]\n@@ -180,7 +180,6 @@ def header_expand(headers):\n     return ''.join(collector)\n \n \n-\n def randombytes(n):\n     \"\"\"Return n random bytes.\"\"\"\n     if is_py2:\n@@ -341,6 +340,7 @@ def get_unicode_from_response(r):\n     except TypeError:\n         return r.content\n \n+\n def stream_decompress(iterator, mode='gzip'):\n     \"\"\"\n     Stream decodes an iterator over compressed data\n@@ -373,6 +373,7 @@ def stream_decompress(iterator, mode='gzip'):\n         if rv:\n             yield rv\n \n+\n def stream_untransfer(gen, resp):\n     if 'gzip' in resp.headers.get('content-encoding', ''):\n         gen = stream_decompress(gen, mode='gzip')\n@@ -387,6 +388,7 @@ UNRESERVED_SET = frozenset(\n     \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\"\n     + \"0123456789-._~\")\n \n+\n def unquote_unreserved(uri):\n     \"\"\"Un-escape any percent-escape sequences in a URI that are unreserved\n     characters.\n@@ -405,6 +407,7 @@ def unquote_unreserved(uri):\n             parts[i] = '%' + parts[i]\n     return ''.join(parts)\n \n+\n def requote_uri(uri):\n     \"\"\"Re-quote the given URI.\n \n@@ -415,11 +418,3 @@ def requote_uri(uri):\n     # Then quote only illegal characters (do not quote reserved, unreserved,\n     # or '%')\n     return quote(unquote_unreserved(uri), safe=\"!#$%&'()*+,/:;=?@[]~\")\n-    return \"/\".join(parts)\n-\n-def supported_schemes():\n-    \"\"\"A list of schemes supported by requests.\n-\n-    return: a list of strings.\n-    \"\"\"\n-    return [\"http\",\"https\"]\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#4f75f1f41d1301be93b7918ffb8140314ac5105d", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 2 | Churn Cumulative: 1094 | Contributors (this commit): 15 | Commits (past 90d): 20 | Contributors (cumulative): 15 | DMM Complexity: 0.0\n\nDIFF:\n@@ -154,6 +154,8 @@ def header_expand(headers):\n         # latin-1 is the most conservative encoding used on the web. Anyone\n         # who needs more can encode to a byte-string before calling\n         return headers.encode(\"latin-1\")\n+    elif headers is None:\n+        return headers\n \n     for i, (value, params) in enumerate(headers):\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#d806ffc1cd0e5ceba17d0edd044e07855502f2d2", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 9 | Lines Deleted: 65 | Files Changed: 1 | Hunks: 51 | Methods Changed: 9 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 74 | Churn Cumulative: 129 | Contributors (this commit): 3 | Commits (past 90d): 8 | Contributors (cumulative): 3 | DMM Complexity: 0.0\n\nDIFF:\n@@ -4,26 +4,23 @@\n # from __future__ import unicode_literals\n \n # Path hack.\n-import sys, os\n+import sys\n+import os\n sys.path.insert(0, os.path.abspath('..'))\n \n-import io\n import json\n-import time\n import os\n import sys\n import unittest\n import pickle\n \n import requests\n-from requests.compat import str, bytes, StringIO\n+from requests.compat import str, StringIO\n # import envoy\n from requests import HTTPError\n from requests import get, post, head, put\n from requests.auth import HTTPBasicAuth, HTTPDigestAuth\n \n-\n-\n if (sys.platform == 'win32') and ('HTTPBIN_URL' not in os.environ):\n     os.environ['HTTPBIN_URL'] = 'http://httpbin.org/'\n \n@@ -42,6 +39,7 @@ SERVICES = (httpbin, )\n \n _httpbin = False\n \n+\n class TestSetup(object):\n     \"\"\"Requests test cases.\"\"\"\n \n@@ -75,7 +73,6 @@ class RequestsTestSuite(TestSetup, unittest.TestCase):\n     def test_invalid_url(self):\n         self.assertRaises(ValueError, get, 'hiwpefhipowhefopw')\n \n-\n     def test_path_is_not_double_encoded(self):\n         request = requests.Request(\"http://0.0.0.0/get/test case\")\n \n@@ -98,7 +95,6 @@ class RequestsTestSuite(TestSetup, unittest.TestCase):\n         r = get(httpbin('redirect', '1'), allow_redirects=False)\n         self.assertEqual(r.status_code, 302)\n \n-\n     def test_HTTP_200_OK_GET_WITH_PARAMS(self):\n         heads = {'User-agent': 'Mozilla/5.0'}\n \n@@ -107,7 +103,6 @@ class RequestsTestSuite(TestSetup, unittest.TestCase):\n         assert heads['User-agent'] in r.text\n         self.assertEqual(r.status_code, 200)\n \n-\n     def test_HTTP_200_OK_GET_WITH_MIXED_PARAMS(self):\n         heads = {'User-agent': 'Mozilla/5.0'}\n \n@@ -191,7 +186,6 @@ class RequestsTestSuite(TestSetup, unittest.TestCase):\n     #     response = get(url)\n     #     self.assertEqual(response.url, httpbin('get/?' + query_unreserved))\n \n-\n     def test_user_agent_transfers(self):\n         \"\"\"Issue XX\"\"\"\n \n@@ -200,7 +194,7 @@ class RequestsTestSuite(TestSetup, unittest.TestCase):\n                 'Mozilla/5.0 (github.com/kennethreitz/requests)'\n         }\n \n-        r = get(httpbin('user-agent'), headers=heads);\n+        r = get(httpbin('user-agent'), headers=heads)\n         self.assertTrue(heads['User-agent'] in r.text)\n \n         heads = {\n@@ -208,20 +202,17 @@ class RequestsTestSuite(TestSetup, unittest.TestCase):\n                 'Mozilla/5.0 (github.com/kennethreitz/requests)'\n         }\n \n-        r = get(httpbin('user-agent'), headers=heads);\n+        r = get(httpbin('user-agent'), headers=heads)\n         self.assertTrue(heads['user-agent'] in r.text)\n \n-\n     def test_HTTP_200_OK_HEAD(self):\n         r = head(httpbin('/get'))\n         self.assertEqual(r.status_code, 200)\n \n-\n     def test_HTTP_200_OK_PUT(self):\n         r = put(httpbin('put'))\n         self.assertEqual(r.status_code, 200)\n \n-\n     def test_BASICAUTH_TUPLE_HTTP_200_OK_GET(self):\n \n         for service in SERVICES:\n@@ -235,12 +226,10 @@ class RequestsTestSuite(TestSetup, unittest.TestCase):\n             r = get(url)\n             self.assertEqual(r.status_code, 401)\n \n-\n             s = requests.session(auth=auth)\n             r = get(url, session=s)\n             self.assertEqual(r.status_code, 200)\n \n-\n     def test_BASICAUTH_HTTP_200_OK_GET(self):\n \n         for service in SERVICES:\n@@ -258,12 +247,10 @@ class RequestsTestSuite(TestSetup, unittest.TestCase):\n             r = get(url)\n             self.assertEqual(r.status_code, 401)\n \n-\n             s = requests.session(auth=auth)\n             r = get(url, session=s)\n             self.assertEqual(r.status_code, 200)\n \n-\n     def test_DIGESTAUTH_HTTP_200_OK_GET(self):\n \n         for service in SERVICES:\n@@ -277,7 +264,6 @@ class RequestsTestSuite(TestSetup, unittest.TestCase):\n             r = get(url)\n             self.assertEqual(r.status_code, 401)\n \n-\n             s = requests.session(auth=auth)\n             r = get(url, session=s)\n             self.assertEqual(r.status_code, 200)\n@@ -299,7 +285,6 @@ class RequestsTestSuite(TestSetup, unittest.TestCase):\n             post3 = post(url, data='[{\"some\": \"json\"}]')\n             self.assertEqual(post3.status_code, 200)\n \n-\n     def test_POSTBIN_GET_POST_FILES_WITH_PARAMS(self):\n \n         for service in SERVICES:\n@@ -312,7 +297,6 @@ class RequestsTestSuite(TestSetup, unittest.TestCase):\n \n             self.assertEqual(post1.status_code, 200)\n \n-\n     def test_POSTBIN_GET_POST_FILES_WITH_HEADERS(self):\n \n         for service in SERVICES:\n@@ -327,7 +311,6 @@ class RequestsTestSuite(TestSetup, unittest.TestCase):\n \n             self.assertEqual(post2.status_code, 200)\n \n-\n     def test_nonzero_evaluation(self):\n \n         for service in SERVICES:\n@@ -338,7 +321,6 @@ class RequestsTestSuite(TestSetup, unittest.TestCase):\n             r = get(service('/get'))\n             self.assertEqual(bool(r), True)\n \n-\n     def test_request_ok_set(self):\n \n         for service in SERVICES:\n@@ -348,7 +330,6 @@ class RequestsTestSuite(TestSetup, unittest.TestCase):\n             # r.raise_for_status()\n             self.assertEqual(r.ok, False)\n \n-\n     def test_status_raising(self):\n         r = get(httpbin('status', '404'))\n         self.assertRaises(HTTPError, r.raise_for_status)\n@@ -357,7 +338,6 @@ class RequestsTestSuite(TestSetup, unittest.TestCase):\n         self.assertFalse(r.error)\n         r.raise_for_status()\n \n-\n     def test_default_status_raising(self):\n         config = {'danger_mode': True}\n         args = [httpbin('status', '404')]\n@@ -367,7 +347,6 @@ class RequestsTestSuite(TestSetup, unittest.TestCase):\n         r = get(httpbin('status', '200'))\n         self.assertEqual(r.status_code, 200)\n \n-\n     def test_decompress_gzip(self):\n \n         r = get(httpbin('gzip'))\n@@ -383,7 +362,6 @@ class RequestsTestSuite(TestSetup, unittest.TestCase):\n \n             assert isinstance(response.url, str)\n \n-\n     def test_unicode_get(self):\n \n         for service in SERVICES:\n@@ -396,7 +374,6 @@ class RequestsTestSuite(TestSetup, unittest.TestCase):\n             get(url, params={'foo': 'foo'})\n             get(service('ø'), params={'foo': 'foo'})\n \n-\n     def test_httpauth_recursion(self):\n \n         http_auth = HTTPBasicAuth('user', 'BADpass')\n@@ -405,7 +382,6 @@ class RequestsTestSuite(TestSetup, unittest.TestCase):\n             r = get(service('basic-auth', 'user', 'pass'), auth=http_auth)\n             self.assertEqual(r.status_code, 401)\n \n-\n     def test_urlencoded_post_data(self):\n \n         for service in SERVICES:\n@@ -421,7 +397,6 @@ class RequestsTestSuite(TestSetup, unittest.TestCase):\n             self.assertEqual(rbody.get('form'), dict(test='fooaowpeuf'))\n             self.assertEqual(rbody.get('data'), '')\n \n-\n     def test_nonurlencoded_post_data(self):\n \n         for service in SERVICES:\n@@ -439,7 +414,6 @@ class RequestsTestSuite(TestSetup, unittest.TestCase):\n             assert rbody.get('form') in (None, {})\n             self.assertEqual(rbody.get('data'), 'fooaowpeuf')\n \n-\n     def test_urlencoded_post_querystring(self):\n \n         for service in SERVICES:\n@@ -454,7 +428,6 @@ class RequestsTestSuite(TestSetup, unittest.TestCase):\n             self.assertEqual(rbody.get('form'), {})  # No form supplied\n             self.assertEqual(rbody.get('data'), '')\n \n-\n     def test_urlencoded_post_query_and_data(self):\n \n         for service in SERVICES:\n@@ -472,7 +445,6 @@ class RequestsTestSuite(TestSetup, unittest.TestCase):\n             self.assertEqual(rbody.get('form'), dict(test2='foobar'))\n             self.assertEqual(rbody.get('data'), '')\n \n-\n     def test_nonurlencoded_postdata(self):\n \n         for service in SERVICES:\n@@ -487,12 +459,6 @@ class RequestsTestSuite(TestSetup, unittest.TestCase):\n             assert rbody.get('form') in (None, {})\n             self.assertEqual(rbody.get('data'), 'foobar')\n \n-\n-    # def test_idna(self):\n-    #     r = get(u'http://➡.ws/httpbin')\n-    #     assert 'httpbin' in r.url\n-\n-\n     def test_urlencoded_get_query_multivalued_param(self):\n \n         for service in SERVICES:\n@@ -501,7 +467,6 @@ class RequestsTestSuite(TestSetup, unittest.TestCase):\n             self.assertEqual(r.status_code, 200)\n             self.assertEqual(r.url, service('get?test=foo&test=baz'))\n \n-\n     def test_urlencoded_post_querystring_multivalued(self):\n \n         for service in SERVICES:\n@@ -515,7 +480,6 @@ class RequestsTestSuite(TestSetup, unittest.TestCase):\n             self.assertEqual(rbody.get('form'), {})  # No form supplied\n             self.assertEqual(rbody.get('data'), '')\n \n-\n     def test_urlencoded_post_query_multivalued_and_data(self):\n \n         for service in SERVICES:\n@@ -536,7 +500,6 @@ class RequestsTestSuite(TestSetup, unittest.TestCase):\n             self.assertEqual(rbody.get('form'), dict(test2='foobar', test3=['foo', 'baz']))\n             self.assertEqual(rbody.get('data'), '')\n \n-\n     def test_GET_no_redirect(self):\n \n         for service in SERVICES:\n@@ -545,7 +508,6 @@ class RequestsTestSuite(TestSetup, unittest.TestCase):\n             self.assertEqual(r.status_code, 302)\n             self.assertEqual(len(r.history), 0)\n \n-\n     def test_HEAD_no_redirect(self):\n \n         for service in SERVICES:\n@@ -554,7 +516,6 @@ class RequestsTestSuite(TestSetup, unittest.TestCase):\n             self.assertEqual(r.status_code, 302)\n             self.assertEqual(len(r.history), 0)\n \n-\n     def test_redirect_history(self):\n \n         for service in SERVICES:\n@@ -563,7 +524,6 @@ class RequestsTestSuite(TestSetup, unittest.TestCase):\n             self.assertEqual(r.status_code, 200)\n             self.assertEqual(len(r.history), 3)\n \n-\n     def test_relative_redirect_history(self):\n \n         for service in SERVICES:\n@@ -572,14 +532,12 @@ class RequestsTestSuite(TestSetup, unittest.TestCase):\n             self.assertEqual(r.status_code, 200)\n             self.assertEqual(len(r.history), 3)\n \n-\n     def test_session_HTTP_200_OK_GET(self):\n \n         s = requests.session()\n         r = get(httpbin('/get'), session=s)\n         self.assertEqual(r.status_code, 200)\n \n-\n     def test_session_persistent_headers(self):\n \n         heads = {'User-agent': 'Mozilla/5.0'}\n@@ -614,13 +572,7 @@ class RequestsTestSuite(TestSetup, unittest.TestCase):\n \n         for service in SERVICES:\n             url = service('headers')\n-\n-            response = get(\n-                url = url,\n-                hooks = {\n-                    'args': add_foo_header\n-                }\n-            )\n+            response = get(url=url, hooks={'args': add_foo_header})\n \n             assert 'foo' in response.text\n \n@@ -649,8 +601,7 @@ class RequestsTestSuite(TestSetup, unittest.TestCase):\n         for service in SERVICES:\n             url = service('headers')\n \n-            response = get(\n-                url = url,\n+            response = get(url=url,\n                 hooks={\n                     'args': [add_foo_header, add_bar_header]\n                 }\n@@ -701,8 +652,6 @@ class RequestsTestSuite(TestSetup, unittest.TestCase):\n \n         assert 'k' in c\n \n-\n-\n     def test_session_persistent_params(self):\n \n         params = {'a': 'a_test'}\n@@ -714,14 +663,12 @@ class RequestsTestSuite(TestSetup, unittest.TestCase):\n         r1 = get(httpbin('get'), session=s)\n         assert params['a'] in r1.text\n \n-\n         params2 = {'b': 'b_test'}\n \n         r2 = get(httpbin('get'), params=params2, session=s)\n         assert params['a'] in r2.text\n         assert params2['b'] in r2.text\n \n-\n         params3 = {'b': 'b_test', 'a': None, 'c': 'c_test'}\n \n         r3 = get(httpbin('get'), params=params3, session=s)\n@@ -754,7 +701,6 @@ class RequestsTestSuite(TestSetup, unittest.TestCase):\n         else:\n             assert False\n \n-\n         config = {'safe_mode': True}\n         r = get(hah, allow_redirects=False, config=config)\n         assert r.content == None\n@@ -825,7 +771,7 @@ class RequestsTestSuite(TestSetup, unittest.TestCase):\n \n     def test_upload_binary_data(self):\n \n-        r = requests.get(httpbin('post'), auth=('a', 'b'), data='\\xff')\n+        requests.get(httpbin('post'), auth=('a', 'b'), data='\\xff')\n \n     def test_useful_exception_for_invalid_scheme(self):\n \n@@ -836,7 +782,5 @@ class RequestsTestSuite(TestSetup, unittest.TestCase):\n               get,\n               'ftp://ftp.kernel.org/pub/')\n \n-\n-\n if __name__ == '__main__':\n     unittest.main()\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
