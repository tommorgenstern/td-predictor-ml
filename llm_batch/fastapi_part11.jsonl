{"custom_id": "fastapi#bc3e7f2bbc9acfcf8b6fd57854b68e1ac8a9c560", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 39 | Contributors (this commit): 1 | Commits (past 90d): 15 | Contributors (cumulative): 1 | DMM Complexity: None\n\nDIFF:\n@@ -1,6 +1,6 @@\n \"\"\"FastAPI framework, high performance, easy to learn, fast to code, ready for production\"\"\"\n \n-__version__ = \"0.1.12\"\n+__version__ = \"0.1.13\"\n \n from .applications import FastAPI\n from .routing import APIRouter\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#4a0922ebab251869bd9b77cecf403b21001a517f", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 54 | Lines Deleted: 31 | Files Changed: 1 | Hunks: 9 | Methods Changed: 3 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 85 | Churn Cumulative: 316 | Contributors (this commit): 1 | Commits (past 90d): 11 | Contributors (cumulative): 1 | DMM Complexity: 1.0\n\nDIFF:\n@@ -1,24 +1,13 @@\n-from typing import List, Optional\n+from typing import Optional\n \n from fastapi.openapi.models import OAuth2 as OAuth2Model, OAuthFlows as OAuthFlowsModel\n from fastapi.params import Form\n from fastapi.security.base import SecurityBase\n-from pydantic import BaseModel, Schema\n from starlette.exceptions import HTTPException\n from starlette.requests import Request\n from starlette.status import HTTP_403_FORBIDDEN\n \n \n-class OAuth2PasswordRequestData(BaseModel):\n-    grant_type: str = \"password\"\n-    username: str\n-    password: str\n-    scope: Optional[List[str]] = None\n-    # Client ID and secret might come from headers\n-    client_id: Optional[str] = None\n-    client_secret: Optional[str] = None\n-\n-\n class OAuth2PasswordRequestForm:\n     \"\"\"\n     This is a dependency class, use it like:\n@@ -28,7 +17,7 @@ class OAuth2PasswordRequestForm:\n             data = form_data.parse()\n             print(data.username)\n             print(data.password)\n-            for scope in data.scope:\n+            for scope in data.scopes:\n                 print(scope)\n             if data.client_id:\n                 print(data.client_id)\n@@ -40,8 +29,8 @@ class OAuth2PasswordRequestForm:\n     It creates the following Form request parameters in your endpoint:\n \n     grant_type: the OAuth2 spec says it is required and MUST be the fixed string \"password\".\n-        Nevertheless, this model is permissive and allows not passing it. If you want to enforce it,\n-        use instead the OAuth2PasswordRequestFormStrict model.\n+        Nevertheless, this dependency class is permissive and allows not passing it. If you want to enforce it,\n+        use instead the OAuth2PasswordRequestFormStrict dependency.\n     username: username string. The OAuth2 spec requires the exact field name \"username\".\n     password: password string. The OAuth2 spec requires the exact field name \"password\".\n     scope: Optional string. Several scopes (each one a string) separated by spaces. E.g.\n@@ -50,9 +39,6 @@ class OAuth2PasswordRequestForm:\n         using HTTP Basic auth, as: client_id:client_secret\n     client_secret: optional string. OAuth2 recommends sending the client_id and client_secret (if any)\n         using HTTP Basic auth, as: client_id:client_secret\n-    \n-\n-    It has the method parse() that returns a model with all the same data and the scopes extracted as a list of strings.\n     \"\"\"\n \n     def __init__(\n@@ -67,24 +53,61 @@ class OAuth2PasswordRequestForm:\n         self.grant_type = grant_type\n         self.username = username\n         self.password = password\n-        self.scope = scope\n+        self.scopes = scope.split()\n         self.client_id = client_id\n         self.client_secret = client_secret\n \n-    def parse(self) -> OAuth2PasswordRequestData:\n-        return OAuth2PasswordRequestData(\n-            grant_type=self.grant_type,\n-            username=self.username,\n-            password=self.password,\n-            scope=self.scope.split(),\n-            client_id=self.client_id,\n-            client_secret=self.client_secret,\n-        )\n-\n \n class OAuth2PasswordRequestFormStrict(OAuth2PasswordRequestForm):\n-    # The OAuth2 spec says it MUST have the value \"password\"\n-    grant_type: str = Schema(..., regex=\"password\")\n+    \"\"\"\n+    This is a dependency class, use it like:\n+\n+        @app.post(\"/login\")\n+        def login(form_data: Oauth2PasswordRequestFormStrict = Depends()):\n+            data = form_data.parse()\n+            print(data.username)\n+            print(data.password)\n+            for scope in data.scopes:\n+                print(scope)\n+            if data.client_id:\n+                print(data.client_id)\n+            if data.client_secret:\n+                print(data.client_secret)\n+            return data\n+\n+    \n+    It creates the following Form request parameters in your endpoint:\n+\n+    grant_type: the OAuth2 spec says it is required and MUST be the fixed string \"password\".\n+        This dependency is strict about it. If you want to be permissive, use instead the\n+        OAuth2PasswordRequestFormStrict dependency class.\n+    username: username string. The OAuth2 spec requires the exact field name \"username\".\n+    password: password string. The OAuth2 spec requires the exact field name \"password\".\n+    scope: Optional string. Several scopes (each one a string) separated by spaces. E.g.\n+        \"items:read items:write users:read profile openid\"\n+    client_id: optional string. OAuth2 recommends sending the client_id and client_secret (if any)\n+        using HTTP Basic auth, as: client_id:client_secret\n+    client_secret: optional string. OAuth2 recommends sending the client_id and client_secret (if any)\n+        using HTTP Basic auth, as: client_id:client_secret\n+    \"\"\"\n+\n+    def __init__(\n+        self,\n+        grant_type: str = Form(..., regex=\"password\"),\n+        username: str = Form(...),\n+        password: str = Form(...),\n+        scope: str = Form(\"\"),\n+        client_id: Optional[str] = Form(None),\n+        client_secret: Optional[str] = Form(None),\n+    ):\n+        super().__init__(\n+            grant_type=grant_type,\n+            username=username,\n+            password=password,\n+            scope=scope,\n+            client_id=client_id,\n+            client_secret=client_secret,\n+        )\n \n \n class OAuth2(SecurityBase):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#bbe5f28b77324d4172c11a5c6eea476b904c586b", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 13 | Lines Deleted: 17 | Files Changed: 2 | Hunks: 7 | Methods Changed: 4 | Complexity Δ (Sum/Max): 17/17 | Churn Δ: 30 | Churn Cumulative: 57 | Contributors (this commit): 1 | Commits (past 90d): 5 | Contributors (cumulative): 2 | DMM Complexity: 0.0\n\nDIFF:\n@@ -64,8 +64,7 @@ async def get_current_active_user(current_user: User = Depends(get_current_user)\n \n @app.post(\"/token\")\n async def login(form_data: OAuth2PasswordRequestForm = Depends()):\n-    data = form_data.parse()\n-    user_dict = fake_users_db.get(data.username)\n+    user_dict = fake_users_db.get(form_data.username)\n     if not user_dict:\n         raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n     user = UserInDB(**user_dict)\n\n@@ -1,5 +1,4 @@\n from datetime import datetime, timedelta\n-from typing import Optional\n \n import jwt\n from fastapi import Depends, FastAPI, Security\n@@ -23,7 +22,8 @@ fake_users_db = {\n         \"username\": \"johndoe\",\n         \"full_name\": \"John Doe\",\n         \"email\": \"johndoe@example.com\",\n-        \"password_hash\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n+        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n+        \"disabled\": False,\n     }\n }\n \n@@ -39,9 +39,9 @@ class TokenPayload(BaseModel):\n \n class User(BaseModel):\n     username: str\n-    email: Optional[str] = None\n-    full_name: Optional[str] = None\n-    disabled: Optional[bool] = None\n+    email: str = None\n+    full_name: str = None\n+    disabled: bool = None\n \n \n class UserInDB(User):\n@@ -102,24 +102,21 @@ async def get_current_user(token: str = Security(oauth2_scheme)):\n \n \n async def get_current_active_user(current_user: User = Depends(get_current_user)):\n-    if not current_user.disabled:\n+    if current_user.disabled:\n         raise HTTPException(status_code=400, detail=\"Inactive user\")\n     return current_user\n \n \n @app.post(\"/token\", response_model=Token)\n-async def route_login_access_token(form_data: OAuth2PasswordRequestForm):\n-    data = form_data.parse()\n-    user = authenticate_user(fake_users_db, data.username, data.password)\n+async def route_login_access_token(form_data: OAuth2PasswordRequestForm = Depends()):\n+    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n     if not user:\n         raise HTTPException(status_code=400, detail=\"Incorrect email or password\")\n     access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n-    return {\n-        \"access_token\": create_access_token(\n-            data={\"username\": data.username}, expires_delta=access_token_expires\n-        ),\n-        \"token_type\": \"bearer\",\n-    }\n+    access_token = create_access_token(\n+        data={\"username\": form_data.username}, expires_delta=access_token_expires\n+    )\n+    return {\"access_token\": access_token, \"token_type\": \"bearer\"}\n \n \n @app.get(\"/users/me\", response_model=User)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#098e629344bde573865ac96b24f7beb6689759b0", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 41 | Contributors (this commit): 1 | Commits (past 90d): 16 | Contributors (cumulative): 1 | DMM Complexity: None\n\nDIFF:\n@@ -1,6 +1,6 @@\n \"\"\"FastAPI framework, high performance, easy to learn, fast to code, ready for production\"\"\"\n \n-__version__ = \"0.1.13\"\n+__version__ = \"0.1.14\"\n \n from .applications import FastAPI\n from .routing import APIRouter\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#0125ea4f83b29ae51386eb33cd7409aa98be93f9", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 8 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 9 | Churn Cumulative: 39 | Contributors (this commit): 1 | Commits (past 90d): 4 | Contributors (cumulative): 1 | DMM Complexity: None\n\nDIFF:\n@@ -10,6 +10,13 @@ fake_users_db = {\n         \"email\": \"johndoe@example.com\",\n         \"hashed_password\": \"fakehashedsecret\",\n         \"disabled\": False,\n+    },\n+    \"alice\": {\n+        \"username\": \"alice\",\n+        \"full_name\": \"Alice Wonderson\",\n+        \"email\": \"alice@example.com\",\n+        \"hashed_password\": \"fakehashedsecret2\",\n+        \"disabled\": True,\n     }\n }\n \n@@ -68,7 +75,7 @@ async def login(form_data: OAuth2PasswordRequestForm = Depends()):\n     if not user_dict:\n         raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n     user = UserInDB(**user_dict)\n-    hashed_password = fake_hash_password(data.password)\n+    hashed_password = fake_hash_password(form_data.password)\n     if not hashed_password == user.hashed_password:\n         raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#804ec460fcb8761a101785d25762d1b20ef9b55f", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 644 | Lines Deleted: 24 | Files Changed: 27 | Hunks: 31 | Methods Changed: 54 | Complexity Δ (Sum/Max): 25/9 | Churn Δ: 668 | Churn Cumulative: 3175 | Contributors (this commit): 1 | Commits (past 90d): 70 | Contributors (cumulative): 27 | DMM Complexity: 0.963302752293578\n\nDIFF:\n@@ -18,6 +18,6 @@ async def read_items(commons: CommonQueryParams = Depends(CommonQueryParams)):\n     response = {}\n     if commons.q:\n         response.update({\"q\": commons.q})\n-    items = fake_items_db[commons.skip : commons.limit]\n+    items = fake_items_db[commons.skip : commons.skip + commons.limit]\n     response.update({\"items\": items})\n     return response\n\n@@ -18,6 +18,6 @@ async def read_items(commons=Depends(CommonQueryParams)):\n     response = {}\n     if commons.q:\n         response.update({\"q\": commons.q})\n-    items = fake_items_db[commons.skip : commons.limit]\n+    items = fake_items_db[commons.skip : commons.skip + commons.limit]\n     response.update({\"items\": items})\n     return response\n\n@@ -18,6 +18,6 @@ async def read_items(commons: CommonQueryParams = Depends()):\n     response = {}\n     if commons.q:\n         response.update({\"q\": commons.q})\n-    items = fake_items_db[commons.skip : commons.limit]\n+    items = fake_items_db[commons.skip : commons.skip + commons.limit]\n     response.update({\"items\": items})\n     return response\n\n@@ -7,4 +7,4 @@ fake_items_db = [{\"item_name\": \"Foo\"}, {\"item_name\": \"Bar\"}, {\"item_name\": \"Baz\"\n \n @app.get(\"/items/\")\n async def read_item(skip: int = 0, limit: int = 100):\n-    return fake_items_db[skip:limit]\n+    return fake_items_db[skip : skip + limit]\n\n@@ -58,8 +58,6 @@ def get_flat_dependant(dependant: Dependant) -> Dependant:\n         security_schemes=dependant.security_requirements.copy(),\n     )\n     for sub_dependant in dependant.dependencies:\n-        if sub_dependant is dependant:\n-            raise ValueError(\"recursion\", dependant.dependencies)\n         flat_sub = get_flat_dependant(sub_dependant)\n         flat_dependant.path_params.extend(flat_sub.path_params)\n         flat_dependant.query_params.extend(flat_sub.query_params)\n@@ -197,16 +195,12 @@ def add_param_to_body_fields(*, param: inspect.Parameter, dependant: Dependant)\n     dependant.body_params.append(field)\n \n \n-def is_coroutine_callable(call: Callable = None) -> bool:\n-    if not call:\n-        return False\n+def is_coroutine_callable(call: Callable) -> bool:\n     if inspect.isfunction(call):\n         return asyncio.iscoroutinefunction(call)\n     if inspect.isclass(call):\n         return False\n     call = getattr(call, \"__call__\", None)\n-    if not call:\n-        return False\n     return asyncio.iscoroutinefunction(call)\n \n \n\n@@ -147,6 +147,7 @@ def get_openapi_path(\n     security_schemes: Dict[str, Any] = {}\n     definitions: Dict[str, Any] = {}\n     assert route.methods is not None, \"Methods must be a list\"\n+    if route.include_in_schema:\n         for method in route.methods:\n             operation = get_openapi_operation_metadata(route=route, method=method)\n             parameters: List[Dict] = []\n@@ -190,7 +191,10 @@ def get_openapi_path(\n                     response_schema = {}\n             content = {route.content_type.media_type: {\"schema\": response_schema}}\n             operation[\"responses\"] = {\n-            status_code: {\"description\": route.response_description, \"content\": content}\n+                status_code: {\n+                    \"description\": route.response_description,\n+                    \"content\": content,\n+                }\n             }\n             if all_route_params or route.body_field:\n                 operation[\"responses\"][str(HTTP_422_UNPROCESSABLE_ENTITY)] = {\n\n@@ -0,0 +1,25 @@\n+from fastapi import FastAPI\n+from fastapi.params import Param\n+from starlette.testclient import TestClient\n+\n+app = FastAPI()\n+\n+\n+@app.get(\"/items/\")\n+def read_items(q: str = Param(None)):\n+    return {\"q\": q}\n+\n+\n+client = TestClient(app)\n+\n+\n+def test_default_param_query_none():\n+    response = client.get(\"/items/\")\n+    assert response.status_code == 200\n+    assert response.json() == {\"q\": None}\n+\n+\n+def test_default_param_query():\n+    response = client.get(\"/items/?q=foo\")\n+    assert response.status_code == 200\n+    assert response.json() == {\"q\": \"foo\"}\n\n@@ -28,7 +28,13 @@ openapi_schema = {\n }\n \n \n-def test_openapi_scheme():\n+def test_openapi_schema():\n     response = client.get(\"/openapi.json\")\n     assert response.status_code == 200\n     assert response.json() == openapi_schema\n+\n+\n+def test_items():\n+    response = client.get(\"/items/\")\n+    assert response.status_code == 200\n+    assert response.json() == [{\"name\": \"Foo\"}]\n\n@@ -83,7 +83,7 @@ openapi_schema = {\n }\n \n \n-def test_openapi_scheme():\n+def test_openapi_schema():\n     response = client.get(\"/openapi.json\")\n     assert response.status_code == 200\n     assert response.json() == openapi_schema\n\n@@ -101,7 +101,7 @@ openapi_schema = {\n }\n \n \n-def test_openapi_scheme():\n+def test_openapi_schema():\n     response = client.get(\"/openapi.json\")\n     assert response.status_code == 200\n     assert response.json() == openapi_schema\n\n@@ -24,7 +24,7 @@ openapi_schema = {\n }\n \n \n-def test_openapi_scheme():\n+def test_openapi_schema():\n     response = client.get(\"/openapi.json\")\n     assert response.status_code == 200\n     assert response.json() == openapi_schema\n\n@@ -35,7 +35,7 @@ html_contents = \"\"\"\n     \"\"\"\n \n \n-def test_openapi_scheme():\n+def test_openapi_schema():\n     response = client.get(\"/openapi.json\")\n     assert response.status_code == 200\n     assert response.json() == openapi_schema\n\n@@ -0,0 +1,144 @@\n+import pytest\n+from starlette.testclient import TestClient\n+\n+from dependencies.tutorial004 import app\n+\n+client = TestClient(app)\n+\n+openapi_schema = {\n+    \"openapi\": \"3.0.2\",\n+    \"info\": {\"title\": \"Fast API\", \"version\": \"0.1.0\"},\n+    \"paths\": {\n+        \"/items/\": {\n+            \"get\": {\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                    },\n+                    \"422\": {\n+                        \"description\": \"Validation Error\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\n+                                    \"$ref\": \"#/components/schemas/HTTPValidationError\"\n+                                }\n+                            }\n+                        },\n+                    },\n+                },\n+                \"summary\": \"Read Items Get\",\n+                \"operationId\": \"read_items_items__get\",\n+                \"parameters\": [\n+                    {\n+                        \"required\": False,\n+                        \"schema\": {\"title\": \"Q\", \"type\": \"string\"},\n+                        \"name\": \"q\",\n+                        \"in\": \"query\",\n+                    },\n+                    {\n+                        \"required\": False,\n+                        \"schema\": {\"title\": \"Skip\", \"type\": \"integer\", \"default\": 0},\n+                        \"name\": \"skip\",\n+                        \"in\": \"query\",\n+                    },\n+                    {\n+                        \"required\": False,\n+                        \"schema\": {\"title\": \"Limit\", \"type\": \"integer\", \"default\": 100},\n+                        \"name\": \"limit\",\n+                        \"in\": \"query\",\n+                    },\n+                ],\n+            }\n+        }\n+    },\n+    \"components\": {\n+        \"schemas\": {\n+            \"ValidationError\": {\n+                \"title\": \"ValidationError\",\n+                \"required\": [\"loc\", \"msg\", \"type\"],\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"loc\": {\n+                        \"title\": \"Location\",\n+                        \"type\": \"array\",\n+                        \"items\": {\"type\": \"string\"},\n+                    },\n+                    \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n+                    \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n+                },\n+            },\n+            \"HTTPValidationError\": {\n+                \"title\": \"HTTPValidationError\",\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"detail\": {\n+                        \"title\": \"Detail\",\n+                        \"type\": \"array\",\n+                        \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n+                    }\n+                },\n+            },\n+        }\n+    },\n+}\n+\n+\n+def test_openapi_schema():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200\n+    assert response.json() == openapi_schema\n+\n+\n+@pytest.mark.parametrize(\n+    \"path,expected_status,expected_response\",\n+    [\n+        (\n+            \"/items\",\n+            200,\n+            {\n+                \"items\": [\n+                    {\"item_name\": \"Foo\"},\n+                    {\"item_name\": \"Bar\"},\n+                    {\"item_name\": \"Baz\"},\n+                ]\n+            },\n+        ),\n+        (\n+            \"/items?q=foo\",\n+            200,\n+            {\n+                \"items\": [\n+                    {\"item_name\": \"Foo\"},\n+                    {\"item_name\": \"Bar\"},\n+                    {\"item_name\": \"Baz\"},\n+                ],\n+                \"q\": \"foo\",\n+            },\n+        ),\n+        (\n+            \"/items?q=foo&skip=1\",\n+            200,\n+            {\"items\": [{\"item_name\": \"Bar\"}, {\"item_name\": \"Baz\"}], \"q\": \"foo\"},\n+        ),\n+        (\n+            \"/items?q=bar&limit=2\",\n+            200,\n+            {\"items\": [{\"item_name\": \"Foo\"}, {\"item_name\": \"Bar\"}], \"q\": \"bar\"},\n+        ),\n+        (\n+            \"/items?q=bar&skip=1&limit=1\",\n+            200,\n+            {\"items\": [{\"item_name\": \"Bar\"}], \"q\": \"bar\"},\n+        ),\n+        (\n+            \"/items?limit=1&q=bar&skip=1\",\n+            200,\n+            {\"items\": [{\"item_name\": \"Bar\"}], \"q\": \"bar\"},\n+        ),\n+    ],\n+)\n+def test_get(path, expected_status, expected_response):\n+    response = client.get(path)\n+    assert response.status_code == expected_status\n+    assert response.json() == expected_response\n\n@@ -74,7 +74,7 @@ openapi_schema = {\n                     },\n                     \"process_after\": {\n                         \"title\": \"Process_After\",\n-                        \"type\": \"string\",\n+                        \"type\": \"number\",\n                         \"format\": \"time-delta\",\n                     },\n                 },\n\n\n@@ -0,0 +1,36 @@\n+from starlette.testclient import TestClient\n+\n+from path_operation_advanced_configuration.tutorial001 import app\n+\n+client = TestClient(app)\n+\n+openapi_schema = {\n+    \"openapi\": \"3.0.2\",\n+    \"info\": {\"title\": \"Fast API\", \"version\": \"0.1.0\"},\n+    \"paths\": {\n+        \"/items/\": {\n+            \"get\": {\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                    }\n+                },\n+                \"summary\": \"Read Items Get\",\n+                \"operationId\": \"some_specific_id_you_define\",\n+            }\n+        }\n+    },\n+}\n+\n+\n+def test_openapi_schema():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200\n+    assert response.json() == openapi_schema\n+\n+\n+def test_get():\n+    response = client.get(\"/items/\")\n+    assert response.status_code == 200\n+    assert response.json() == [{\"item_id\": \"Foo\"}]\n\n@@ -0,0 +1,23 @@\n+from starlette.testclient import TestClient\n+\n+from path_operation_advanced_configuration.tutorial002 import app\n+\n+client = TestClient(app)\n+\n+openapi_schema = {\n+    \"openapi\": \"3.0.2\",\n+    \"info\": {\"title\": \"Fast API\", \"version\": \"0.1.0\"},\n+    \"paths\": {},\n+}\n+\n+\n+def test_openapi_schema():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200\n+    assert response.json() == openapi_schema\n+\n+\n+def test_get():\n+    response = client.get(\"/items/\")\n+    assert response.status_code == 200\n+    assert response.json() == [{\"item_id\": \"Foo\"}]\n\n\n@@ -0,0 +1,112 @@\n+from starlette.testclient import TestClient\n+\n+from path_operation_configuration.tutorial005 import app\n+\n+client = TestClient(app)\n+\n+openapi_schema = {\n+    \"openapi\": \"3.0.2\",\n+    \"info\": {\"title\": \"Fast API\", \"version\": \"0.1.0\"},\n+    \"paths\": {\n+        \"/items/\": {\n+            \"post\": {\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"The created item\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\"$ref\": \"#/components/schemas/Item\"}\n+                            }\n+                        },\n+                    },\n+                    \"422\": {\n+                        \"description\": \"Validation Error\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\n+                                    \"$ref\": \"#/components/schemas/HTTPValidationError\"\n+                                }\n+                            }\n+                        },\n+                    },\n+                },\n+                \"summary\": \"Create an item\",\n+                \"description\": \"\\n    Create an item with all the information:\\n    \\n    * name: each item must have a name\\n    * description: a long description\\n    * price: required\\n    * tax: if the item doesn't have tax, you can omit this\\n    * tags: a set of unique tag strings for this item\\n    \",\n+                \"operationId\": \"create_item_items__post\",\n+                \"requestBody\": {\n+                    \"content\": {\n+                        \"application/json\": {\n+                            \"schema\": {\"$ref\": \"#/components/schemas/Item\"}\n+                        }\n+                    },\n+                    \"required\": True,\n+                },\n+            }\n+        }\n+    },\n+    \"components\": {\n+        \"schemas\": {\n+            \"Item\": {\n+                \"title\": \"Item\",\n+                \"required\": [\"name\", \"price\"],\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"name\": {\"title\": \"Name\", \"type\": \"string\"},\n+                    \"price\": {\"title\": \"Price\", \"type\": \"number\"},\n+                    \"description\": {\"title\": \"Description\", \"type\": \"string\"},\n+                    \"tax\": {\"title\": \"Tax\", \"type\": \"number\"},\n+                    \"tags\": {\n+                        \"title\": \"Tags\",\n+                        \"uniqueItems\": True,\n+                        \"type\": \"array\",\n+                        \"items\": {\"type\": \"string\"},\n+                        \"default\": [],\n+                    },\n+                },\n+            },\n+            \"ValidationError\": {\n+                \"title\": \"ValidationError\",\n+                \"required\": [\"loc\", \"msg\", \"type\"],\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"loc\": {\n+                        \"title\": \"Location\",\n+                        \"type\": \"array\",\n+                        \"items\": {\"type\": \"string\"},\n+                    },\n+                    \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n+                    \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n+                },\n+            },\n+            \"HTTPValidationError\": {\n+                \"title\": \"HTTPValidationError\",\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"detail\": {\n+                        \"title\": \"Detail\",\n+                        \"type\": \"array\",\n+                        \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n+                    }\n+                },\n+            },\n+        }\n+    },\n+}\n+\n+\n+def test_openapi_schema():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200\n+    assert response.json() == openapi_schema\n+\n+\n+def test_query_params_str_validations():\n+    response = client.post(\"/items/\", json={\"name\": \"Foo\", \"price\": 42})\n+    assert response.status_code == 200\n+    assert response.json() == {\n+        \"name\": \"Foo\",\n+        \"price\": 42,\n+        \"description\": None,\n+        \"tax\": None,\n+        \"tags\": [],\n+    }\n\n@@ -0,0 +1,73 @@\n+import pytest\n+from starlette.testclient import TestClient\n+\n+from path_operation_configuration.tutorial006 import app\n+\n+client = TestClient(app)\n+\n+openapi_schema = {\n+    \"openapi\": \"3.0.2\",\n+    \"info\": {\"title\": \"Fast API\", \"version\": \"0.1.0\"},\n+    \"paths\": {\n+        \"/items/\": {\n+            \"get\": {\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                    }\n+                },\n+                \"tags\": [\"items\"],\n+                \"summary\": \"Read Items Get\",\n+                \"operationId\": \"read_items_items__get\",\n+            }\n+        },\n+        \"/users/\": {\n+            \"get\": {\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                    }\n+                },\n+                \"tags\": [\"users\"],\n+                \"summary\": \"Read Users Get\",\n+                \"operationId\": \"read_users_users__get\",\n+            }\n+        },\n+        \"/elements/\": {\n+            \"get\": {\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                    }\n+                },\n+                \"tags\": [\"items\"],\n+                \"summary\": \"Read Elements Get\",\n+                \"operationId\": \"read_elements_elements__get\",\n+                \"deprecated\": True,\n+            }\n+        },\n+    },\n+}\n+\n+\n+def test_openapi_schema():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200\n+    assert response.json() == openapi_schema\n+\n+\n+@pytest.mark.parametrize(\n+    \"path,expected_status,expected_response\",\n+    [\n+        (\"/items/\", 200, [{\"name\": \"Foo\", \"price\": 42}]),\n+        (\"/users/\", 200, [{\"username\": \"johndoe\"}]),\n+        (\"/elements/\", 200, [{\"item_id\": \"Foo\"}]),\n+    ],\n+)\n+def test_query_params_str_validations(path, expected_status, expected_response):\n+    response = client.get(path)\n+    assert response.status_code == expected_status\n+    assert response.json() == expected_response\n\n@@ -1,3 +1,4 @@\n+import pytest\n from starlette.testclient import TestClient\n \n from query_params_str_validations.tutorial010 import app\n@@ -80,7 +81,42 @@ openapi_schema = {\n }\n \n \n-def test_openapi_scheme():\n+def test_openapi_schema():\n     response = client.get(\"/openapi.json\")\n     assert response.status_code == 200\n     assert response.json() == openapi_schema\n+\n+\n+regex_error = {\n+    \"detail\": [\n+        {\n+            \"ctx\": {\"pattern\": \"^fixedquery$\"},\n+            \"loc\": [\"query\", \"item-query\"],\n+            \"msg\": 'string does not match regex \"^fixedquery$\"',\n+            \"type\": \"value_error.str.regex\",\n+        }\n+    ]\n+}\n+\n+\n+@pytest.mark.parametrize(\n+    \"q_name,q,expected_status,expected_response\",\n+    [\n+        (None, None, 200, {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}),\n+        (\n+            \"item-query\",\n+            \"fixedquery\",\n+            200,\n+            {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}], \"q\": \"fixedquery\"},\n+        ),\n+        (\"q\", \"fixedquery\", 200, {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}),\n+        (\"item-query\", \"nonregexquery\", 422, regex_error),\n+    ],\n+)\n+def test_query_params_str_validations(q_name, q, expected_status, expected_response):\n+    url = \"/items/\"\n+    if q_name and q:\n+        url = f\"{url}?{q_name}={q}\"\n+    response = client.get(url)\n+    assert response.status_code == expected_status\n+    assert response.json() == expected_response\n\n@@ -81,7 +81,7 @@ openapi_schema = {\n }\n \n \n-def test_openapi_scheme():\n+def test_openapi_schema():\n     response = client.get(\"/openapi.json\")\n     assert response.status_code == 200\n     assert response.json() == openapi_schema\n\n@@ -81,7 +81,7 @@ openapi_schema = {\n }\n \n \n-def test_openapi_scheme():\n+def test_openapi_schema():\n     response = client.get(\"/openapi.json\")\n     assert response.status_code == 200\n     assert response.json() == openapi_schema\n\n@@ -82,7 +82,7 @@ openapi_schema = {\n }\n \n \n-def test_openapi_scheme():\n+def test_openapi_schema():\n     response = client.get(\"/openapi.json\")\n     assert response.status_code == 200\n     assert response.json() == openapi_schema\n\n@@ -96,7 +96,7 @@ openapi_schema = {\n }\n \n \n-def test_openapi_scheme():\n+def test_openapi_schema():\n     response = client.get(\"/openapi.json\")\n     assert response.status_code == 200\n     assert response.json() == openapi_schema\n\n@@ -33,7 +33,7 @@ openapi_schema = {\n }\n \n \n-def test_openapi_scheme():\n+def test_openapi_schema():\n     response = client.get(\"/openapi.json\")\n     assert response.status_code == 200\n     assert response.json() == openapi_schema\n\n@@ -0,0 +1,167 @@\n+from starlette.testclient import TestClient\n+\n+from security.tutorial003 import app\n+\n+client = TestClient(app)\n+\n+openapi_schema = {\n+    \"openapi\": \"3.0.2\",\n+    \"info\": {\"title\": \"Fast API\", \"version\": \"0.1.0\"},\n+    \"paths\": {\n+        \"/token\": {\n+            \"post\": {\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                    },\n+                    \"422\": {\n+                        \"description\": \"Validation Error\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\n+                                    \"$ref\": \"#/components/schemas/HTTPValidationError\"\n+                                }\n+                            }\n+                        },\n+                    },\n+                },\n+                \"summary\": \"Login Post\",\n+                \"operationId\": \"login_token_post\",\n+                \"requestBody\": {\n+                    \"content\": {\n+                        \"application/x-www-form-urlencoded\": {\n+                            \"schema\": {\"$ref\": \"#/components/schemas/Body_login\"}\n+                        }\n+                    },\n+                    \"required\": True,\n+                },\n+            }\n+        },\n+        \"/users/me\": {\n+            \"get\": {\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                    }\n+                },\n+                \"summary\": \"Read Users Me Get\",\n+                \"operationId\": \"read_users_me_users_me_get\",\n+                \"security\": [{\"OAuth2PasswordBearer\": []}],\n+            }\n+        },\n+    },\n+    \"components\": {\n+        \"schemas\": {\n+            \"Body_login\": {\n+                \"title\": \"Body_login\",\n+                \"required\": [\"username\", \"password\"],\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"grant_type\": {\n+                        \"title\": \"Grant_Type\",\n+                        \"pattern\": \"password\",\n+                        \"type\": \"string\",\n+                    },\n+                    \"username\": {\"title\": \"Username\", \"type\": \"string\"},\n+                    \"password\": {\"title\": \"Password\", \"type\": \"string\"},\n+                    \"scope\": {\"title\": \"Scope\", \"type\": \"string\", \"default\": \"\"},\n+                    \"client_id\": {\"title\": \"Client_Id\", \"type\": \"string\"},\n+                    \"client_secret\": {\"title\": \"Client_Secret\", \"type\": \"string\"},\n+                },\n+            },\n+            \"ValidationError\": {\n+                \"title\": \"ValidationError\",\n+                \"required\": [\"loc\", \"msg\", \"type\"],\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"loc\": {\n+                        \"title\": \"Location\",\n+                        \"type\": \"array\",\n+                        \"items\": {\"type\": \"string\"},\n+                    },\n+                    \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n+                    \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n+                },\n+            },\n+            \"HTTPValidationError\": {\n+                \"title\": \"HTTPValidationError\",\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"detail\": {\n+                        \"title\": \"Detail\",\n+                        \"type\": \"array\",\n+                        \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n+                    }\n+                },\n+            },\n+        },\n+        \"securitySchemes\": {\n+            \"OAuth2PasswordBearer\": {\n+                \"type\": \"oauth2\",\n+                \"flows\": {\"password\": {\"scopes\": {}, \"tokenUrl\": \"/token\"}},\n+            }\n+        },\n+    },\n+}\n+\n+\n+def test_openapi_schema():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200\n+    assert response.json() == openapi_schema\n+\n+\n+def test_login():\n+    response = client.post(\"/token\", data={\"username\": \"johndoe\", \"password\": \"secret\"})\n+    assert response.status_code == 200\n+    assert response.json() == {\"access_token\": \"johndoe\", \"token_type\": \"bearer\"}\n+\n+\n+def test_login_incorrect_password():\n+    response = client.post(\"/token\", data={\"username\": \"johndoe\", \"password\": \"incorrect\"})\n+    assert response.status_code == 400\n+    assert response.json() == {\"detail\": \"Incorrect username or password\"}\n+\n+\n+def test_login_incorrect_username():\n+    response = client.post(\"/token\", data={\"username\": \"foo\", \"password\": \"secret\"})\n+    assert response.status_code == 400\n+    assert response.json() == {\"detail\": \"Incorrect username or password\"}\n+\n+\n+def test_no_token():\n+    response = client.get(\"/users/me\")\n+    assert response.status_code == 403\n+    assert response.json() == {\"detail\": \"Not authenticated\"}\n+\n+\n+def test_token():\n+    response = client.get(\"/users/me\", headers={\"Authorization\": \"Bearer johndoe\"})\n+    assert response.status_code == 200\n+    assert response.json() == {\n+        \"username\": \"johndoe\",\n+        \"full_name\": \"John Doe\",\n+        \"email\": \"johndoe@example.com\",\n+        \"hashed_password\": \"fakehashedsecret\",\n+        \"disabled\": False,\n+    }\n+\n+\n+def test_incorrect_token():\n+    response = client.get(\"/users/me\", headers={\"Authorization\": \"Bearer nonexistent\"})\n+    assert response.status_code == 400\n+    assert response.json() == {\"detail\": \"Invalid authentication credentials\"}\n+\n+def test_incorrect_token_type():\n+    response = client.get(\n+        \"/users/me\", headers={\"Authorization\": \"Notexistent testtoken\"}\n+    )\n+    assert response.status_code == 403\n+    assert response.json() == {\"detail\": \"Not authenticated\"}\n+\n+def test_inactive_user():\n+    response = client.get(\"/users/me\", headers={\"Authorization\": \"Bearer alice\"})\n+    assert response.status_code == 400\n+    assert response.json() == {\"detail\": \"Inactive user\"}\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#c3e5e65093b3e6237c8dc1a831900a7b910681f0", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 6 | Lines Deleted: 2 | Files Changed: 2 | Hunks: 4 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 8 | Churn Cumulative: 214 | Contributors (this commit): 1 | Commits (past 90d): 7 | Contributors (cumulative): 2 | DMM Complexity: 1.0\n\nDIFF:\n@@ -17,7 +17,7 @@ fake_users_db = {\n         \"email\": \"alice@example.com\",\n         \"hashed_password\": \"fakehashedsecret2\",\n         \"disabled\": True,\n-    }\n+    },\n }\n \n app = FastAPI()\n\n@@ -120,7 +120,9 @@ def test_login():\n \n \n def test_login_incorrect_password():\n-    response = client.post(\"/token\", data={\"username\": \"johndoe\", \"password\": \"incorrect\"})\n+    response = client.post(\n+        \"/token\", data={\"username\": \"johndoe\", \"password\": \"incorrect\"}\n+    )\n     assert response.status_code == 400\n     assert response.json() == {\"detail\": \"Incorrect username or password\"}\n \n@@ -154,6 +156,7 @@ def test_incorrect_token():\n     assert response.status_code == 400\n     assert response.json() == {\"detail\": \"Invalid authentication credentials\"}\n \n+\n def test_incorrect_token_type():\n     response = client.get(\n         \"/users/me\", headers={\"Authorization\": \"Notexistent testtoken\"}\n@@ -161,6 +164,7 @@ def test_incorrect_token_type():\n     assert response.status_code == 403\n     assert response.json() == {\"detail\": \"Not authenticated\"}\n \n+\n def test_inactive_user():\n     response = client.get(\"/users/me\", headers={\"Authorization\": \"Bearer alice\"})\n     assert response.status_code == 400\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#0393a093d3a57bf35a4095a855e670267b9dfc50", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 674 | Lines Deleted: 96 | Files Changed: 17 | Hunks: 49 | Methods Changed: 53 | Complexity Δ (Sum/Max): 48/13 | Churn Δ: 770 | Churn Cumulative: 4527 | Contributors (this commit): 2 | Commits (past 90d): 79 | Contributors (cumulative): 18 | DMM Complexity: 0.9930555555555556\n\nDIFF:\n@@ -97,7 +97,7 @@ def get_dependant(*, path: str, call: Callable, name: str = None) -> Dependant:\n         elif (\n             param.default == param.empty\n             or param.default is None\n-            or type(param.default) in param_supported_types\n+            or isinstance(param.default, param_supported_types)\n         ) and (\n             param.annotation == param.empty\n             or lenient_issubclass(param.annotation, param_supported_types)\n@@ -214,7 +214,8 @@ async def solve_dependencies(\n             request=request, dependant=sub_dependant, body=body\n         )\n         if sub_errors:\n-            return {}, errors\n+            errors.extend(sub_errors)\n+            continue\n         assert sub_dependant.call is not None, \"sub_dependant.call must be a function\"\n         if is_coroutine_callable(sub_dependant.call):\n             solved = await sub_dependant.call(**sub_values)\n@@ -238,7 +239,7 @@ async def solve_dependencies(\n     values.update(query_values)\n     values.update(header_values)\n     values.update(cookie_values)\n-    errors = path_errors + query_errors + header_errors + cookie_errors\n+    errors += path_errors + query_errors + header_errors + cookie_errors\n     if dependant.body_params:\n         body_values, body_errors = await request_body_to_args(  # type: ignore # body_params checked above\n             dependant.body_params, body\n@@ -295,7 +296,7 @@ async def request_body_to_args(\n             received_body = {}\n         for field in required_params:\n             value = received_body.get(field.alias)\n-            if value is None:\n+            if value is None or (isinstance(field.schema, params.Form) and value == \"\"):\n                 if field.required:\n                     errors.append(\n                         ErrorWrapper(\n\n@@ -1,6 +1,8 @@\n from fastapi.openapi.models import APIKey, APIKeyIn\n from fastapi.security.base import SecurityBase\n+from starlette.exceptions import HTTPException\n from starlette.requests import Request\n+from starlette.status import HTTP_403_FORBIDDEN\n \n \n class APIKeyBase(SecurityBase):\n@@ -9,26 +11,41 @@ class APIKeyBase(SecurityBase):\n \n class APIKeyQuery(APIKeyBase):\n     def __init__(self, *, name: str, scheme_name: str = None):\n-        self.model = APIKey(in_=APIKeyIn.query, name=name)\n+        self.model = APIKey(**{\"in\": APIKeyIn.query}, name=name)\n         self.scheme_name = scheme_name or self.__class__.__name__\n \n-    async def __call__(self, requests: Request) -> str:\n-        return requests.query_params.get(self.model.name)\n+    async def __call__(self, request: Request) -> str:\n+        api_key: str = request.query_params.get(self.model.name)\n+        if not api_key:\n+            raise HTTPException(\n+                status_code=HTTP_403_FORBIDDEN, detail=\"Not authenticated\"\n+            )\n+        return api_key\n \n \n class APIKeyHeader(APIKeyBase):\n     def __init__(self, *, name: str, scheme_name: str = None):\n-        self.model = APIKey(in_=APIKeyIn.header, name=name)\n+        self.model = APIKey(**{\"in\": APIKeyIn.header}, name=name)\n         self.scheme_name = scheme_name or self.__class__.__name__\n \n-    async def __call__(self, requests: Request) -> str:\n-        return requests.headers.get(self.model.name)\n+    async def __call__(self, request: Request) -> str:\n+        api_key: str = request.headers.get(self.model.name)\n+        if not api_key:\n+            raise HTTPException(\n+                status_code=HTTP_403_FORBIDDEN, detail=\"Not authenticated\"\n+            )\n+        return api_key\n \n \n class APIKeyCookie(APIKeyBase):\n     def __init__(self, *, name: str, scheme_name: str = None):\n-        self.model = APIKey(in_=APIKeyIn.cookie, name=name)\n+        self.model = APIKey(**{\"in\": APIKeyIn.cookie}, name=name)\n         self.scheme_name = scheme_name or self.__class__.__name__\n \n-    async def __call__(self, requests: Request) -> str:\n-        return requests.cookies.get(self.model.name)\n+    async def __call__(self, request: Request) -> str:\n+        api_key: str = request.cookies.get(self.model.name)\n+        if not api_key:\n+            raise HTTPException(\n+                status_code=HTTP_403_FORBIDDEN, detail=\"Not authenticated\"\n+            )\n+        return api_key\n\n@@ -1,9 +1,26 @@\n+import binascii\n+from base64 import b64decode\n+\n from fastapi.openapi.models import (\n     HTTPBase as HTTPBaseModel,\n     HTTPBearer as HTTPBearerModel,\n )\n from fastapi.security.base import SecurityBase\n+from fastapi.security.utils import get_authorization_scheme_param\n+from pydantic import BaseModel\n+from starlette.exceptions import HTTPException\n from starlette.requests import Request\n+from starlette.status import HTTP_403_FORBIDDEN\n+\n+\n+class HTTPBasicCredentials(BaseModel):\n+    username: str\n+    password: str\n+\n+\n+class HTTPAuthorizationCredentials(BaseModel):\n+    scheme: str\n+    credentials: str\n \n \n class HTTPBase(SecurityBase):\n@@ -12,16 +29,41 @@ class HTTPBase(SecurityBase):\n         self.scheme_name = scheme_name or self.__class__.__name__\n \n     async def __call__(self, request: Request) -> str:\n-        return request.headers.get(\"Authorization\")\n+        authorization: str = request.headers.get(\"Authorization\")\n+        scheme, credentials = get_authorization_scheme_param(authorization)\n+        if not (authorization and scheme and credentials):\n+            raise HTTPException(\n+                status_code=HTTP_403_FORBIDDEN, detail=\"Not authenticated\"\n+            )\n+        return HTTPAuthorizationCredentials(scheme=scheme, credentials=credentials)\n \n \n class HTTPBasic(HTTPBase):\n-    def __init__(self, *, scheme_name: str = None):\n+    def __init__(self, *, scheme_name: str = None, realm: str = None):\n         self.model = HTTPBaseModel(scheme=\"basic\")\n         self.scheme_name = scheme_name or self.__class__.__name__\n+        self.realm = realm\n \n     async def __call__(self, request: Request) -> str:\n-        return request.headers.get(\"Authorization\")\n+        authorization: str = request.headers.get(\"Authorization\")\n+        scheme, param = get_authorization_scheme_param(authorization)\n+        # before implementing headers with 401 errors, wait for: https://github.com/encode/starlette/issues/295\n+        # unauthorized_headers = {\"WWW-Authenticate\": \"Basic\"}\n+        invalid_user_credentials_exc = HTTPException(\n+            status_code=HTTP_403_FORBIDDEN, detail=\"Invalid authentication credentials\"\n+        )\n+        if not authorization or scheme.lower() != \"basic\":\n+            raise HTTPException(\n+                status_code=HTTP_403_FORBIDDEN, detail=\"Not authenticated\"\n+            )\n+        try:\n+            data = b64decode(param).decode(\"ascii\")\n+        except (ValueError, UnicodeDecodeError, binascii.Error):\n+            raise invalid_user_credentials_exc\n+        username, separator, password = data.partition(\":\")\n+        if not (separator):\n+            raise invalid_user_credentials_exc\n+        return HTTPBasicCredentials(username=username, password=password)\n \n \n class HTTPBearer(HTTPBase):\n@@ -30,7 +72,13 @@ class HTTPBearer(HTTPBase):\n         self.scheme_name = scheme_name or self.__class__.__name__\n \n     async def __call__(self, request: Request) -> str:\n-        return request.headers.get(\"Authorization\")\n+        authorization: str = request.headers.get(\"Authorization\")\n+        scheme, credentials = get_authorization_scheme_param(authorization)\n+        if not (authorization and scheme and credentials):\n+            raise HTTPException(\n+                status_code=HTTP_403_FORBIDDEN, detail=\"Not authenticated\"\n+            )\n+        return HTTPAuthorizationCredentials(scheme=scheme, credentials=credentials)\n \n \n class HTTPDigest(HTTPBase):\n@@ -39,4 +87,10 @@ class HTTPDigest(HTTPBase):\n         self.scheme_name = scheme_name or self.__class__.__name__\n \n     async def __call__(self, request: Request) -> str:\n-        return request.headers.get(\"Authorization\")\n+        authorization: str = request.headers.get(\"Authorization\")\n+        scheme, credentials = get_authorization_scheme_param(authorization)\n+        if not (authorization and scheme and credentials):\n+            raise HTTPException(\n+                status_code=HTTP_403_FORBIDDEN, detail=\"Not authenticated\"\n+            )\n+        return HTTPAuthorizationCredentials(scheme=scheme, credentials=credentials)\n\n@@ -3,6 +3,7 @@ from typing import Optional\n from fastapi.openapi.models import OAuth2 as OAuth2Model, OAuthFlows as OAuthFlowsModel\n from fastapi.params import Form\n from fastapi.security.base import SecurityBase\n+from fastapi.security.utils import get_authorization_scheme_param\n from starlette.exceptions import HTTPException\n from starlette.requests import Request\n from starlette.status import HTTP_403_FORBIDDEN\n@@ -118,7 +119,12 @@ class OAuth2(SecurityBase):\n         self.scheme_name = scheme_name or self.__class__.__name__\n \n     async def __call__(self, request: Request) -> str:\n-        return request.headers.get(\"Authorization\")\n+        authorization: str = request.headers.get(\"Authorization\")\n+        if not authorization:\n+            raise HTTPException(\n+                status_code=HTTP_403_FORBIDDEN, detail=\"Not authenticated\"\n+            )\n+        return authorization\n \n \n class OAuth2PasswordBearer(OAuth2):\n@@ -130,9 +136,9 @@ class OAuth2PasswordBearer(OAuth2):\n \n     async def __call__(self, request: Request) -> str:\n         authorization: str = request.headers.get(\"Authorization\")\n-        if not authorization or \"Bearer \" not in authorization:\n+        scheme, param = get_authorization_scheme_param(authorization)\n+        if not authorization or scheme.lower() != \"bearer\":\n             raise HTTPException(\n                 status_code=HTTP_403_FORBIDDEN, detail=\"Not authenticated\"\n             )\n-        token = authorization.replace(\"Bearer \", \"\")\n-        return token\n+        return param\n\n@@ -1,6 +1,8 @@\n from fastapi.openapi.models import OpenIdConnect as OpenIdConnectModel\n from fastapi.security.base import SecurityBase\n+from starlette.exceptions import HTTPException\n from starlette.requests import Request\n+from starlette.status import HTTP_403_FORBIDDEN\n \n \n class OpenIdConnect(SecurityBase):\n@@ -9,4 +11,9 @@ class OpenIdConnect(SecurityBase):\n         self.scheme_name = scheme_name or self.__class__.__name__\n \n     async def __call__(self, request: Request) -> str:\n-        return request.headers.get(\"Authorization\")\n+        authorization: str = request.headers.get(\"Authorization\")\n+        if not authorization:\n+            raise HTTPException(\n+                status_code=HTTP_403_FORBIDDEN, detail=\"Not authenticated\"\n+            )\n+        return authorization\n\n@@ -0,0 +1,5 @@\n+def get_authorization_scheme_param(authorization_header_value: str):\n+    if not authorization_header_value:\n+        return \"\", \"\"\n+    scheme, _, param = authorization_header_value.partition(\" \")\n+    return scheme, param\n\n@@ -1,6 +1,4 @@\n-from fastapi import Depends, FastAPI, Path, Query, Security\n-from fastapi.security import OAuth2PasswordBearer\n-from pydantic import BaseModel\n+from fastapi import FastAPI, Path, Query\n \n app = FastAPI()\n \n@@ -144,8 +142,6 @@ def get_path_param_le_ge_int(item_id: int = Path(..., le=3, ge=1)):\n \n @app.get(\"/query\")\n def get_query(query):\n-    if query is None:\n-        return \"foo bar\"\n     return f\"foo bar {query}\"\n \n \n@@ -158,8 +154,6 @@ def get_query_optional(query=None):\n \n @app.get(\"/query/int\")\n def get_query_type(query: int):\n-    if query is None:\n-        return \"foo bar\"\n     return f\"foo bar {query}\"\n \n \n@@ -184,30 +178,9 @@ def get_query_param(query=Query(None)):\n \n @app.get(\"/query/param-required\")\n def get_query_param_required(query=Query(...)):\n-    if query is None:\n-        return \"foo bar\"\n     return f\"foo bar {query}\"\n \n \n @app.get(\"/query/param-required/int\")\n def get_query_param_required_type(query: int = Query(...)):\n-    if query is None:\n-        return \"foo bar\"\n     return f\"foo bar {query}\"\n-\n-\n-reusable_oauth2b = OAuth2PasswordBearer(tokenUrl=\"/token\")\n-\n-\n-class User(BaseModel):\n-    username: str\n-\n-\n-def get_current_user(oauth_header: str = Security(reusable_oauth2b)):\n-    user = User(username=oauth_header)\n-    return user\n-\n-\n-@app.get(\"/security/oauth2b\")\n-def read_current_user(current_user: User = Depends(get_current_user)):\n-    return current_user\n\n@@ -1078,19 +1078,6 @@ openapi_schema = {\n                 ],\n             }\n         },\n-        \"/security/oauth2b\": {\n-            \"get\": {\n-                \"responses\": {\n-                    \"200\": {\n-                        \"description\": \"Successful Response\",\n-                        \"content\": {\"application/json\": {\"schema\": {}}},\n-                    }\n-                },\n-                \"summary\": \"Read Current User Get\",\n-                \"operationId\": \"read_current_user_security_oauth2b_get\",\n-                \"security\": [{\"OAuth2PasswordBearer\": []}],\n-            }\n-        },\n     },\n     \"components\": {\n         \"schemas\": {\n@@ -1119,14 +1106,8 @@ openapi_schema = {\n                     }\n                 },\n             },\n-        },\n-        \"securitySchemes\": {\n-            \"OAuth2PasswordBearer\": {\n-                \"type\": \"oauth2\",\n-                \"flows\": {\"password\": {\"scopes\": {}, \"tokenUrl\": \"/token\"}},\n         }\n     },\n-    },\n }\n \n \n@@ -1134,6 +1115,7 @@ openapi_schema = {\n     \"path,expected_status,expected_response\",\n     [\n         (\"/api_route\", 200, {\"message\": \"Hello World\"}),\n+        (\"/non_decorated_route\", 200, {\"message\": \"Hello World\"}),\n         (\"/nonexistent\", 404, {\"detail\": \"Not Found\"}),\n         (\"/openapi.json\", 200, openapi_schema),\n     ],\n\n@@ -343,7 +343,7 @@ def test_head():\n \n \n def test_options():\n-    response = client.head(\"/items/foo\")\n+    response = client.options(\"/items/foo\")\n     assert response.status_code == 200\n     assert response.headers[\"x-fastapi-item-id\"] == \"foo\"\n \n\n@@ -0,0 +1,23 @@\n+from fastapi import APIRouter, FastAPI\n+from starlette.requests import Request\n+from starlette.responses import JSONResponse\n+from starlette.testclient import TestClient\n+\n+app = FastAPI()\n+router = APIRouter()\n+\n+\n+@router.route(\"/items/\")\n+def read_items(request: Request):\n+    return JSONResponse({\"hello\": \"world\"})\n+\n+\n+app.include_router(router)\n+\n+client = TestClient(app)\n+\n+\n+def test_sub_router():\n+    response = client.get(\"/items/\")\n+    assert response.status_code == 200\n+    assert response.json() == {\"hello\": \"world\"}\n\n@@ -40,9 +40,19 @@ response_not_valid_int = {\n         (\"/query/int?query=42.5\", 422, response_not_valid_int),\n         (\"/query/int?query=baz\", 422, response_not_valid_int),\n         (\"/query/int?not_declared=baz\", 422, response_missing),\n+        (\"/query/int/optional\", 200, \"foo bar\"),\n+        (\"/query/int/optional?query=50\", 200, \"foo bar 50\"),\n+        (\"/query/int/optional?query=foo\", 422, response_not_valid_int),\n         (\"/query/int/default\", 200, \"foo bar 10\"),\n         (\"/query/int/default?query=50\", 200, \"foo bar 50\"),\n         (\"/query/int/default?query=foo\", 422, response_not_valid_int),\n+        (\"/query/param\", 200, \"foo bar\"),\n+        (\"/query/param?query=50\", 200, \"foo bar 50\"),\n+        (\"/query/param-required\", 422, response_missing),\n+        (\"/query/param-required?query=50\", 200, \"foo bar 50\"),\n+        (\"/query/param-required/int\", 422, response_missing),\n+        (\"/query/param-required/int?query=50\", 200, \"foo bar 50\"),\n+        (\"/query/param-required/int?query=foo\", 422, response_not_valid_int),\n     ],\n )\n def test_get_path(path, expected_status, expected_response):\n\n@@ -1,25 +0,0 @@\n-from starlette.testclient import TestClient\n-\n-from .main import app\n-\n-client = TestClient(app)\n-\n-\n-def test_security_oauth2_password_bearer():\n-    response = client.get(\n-        \"/security/oauth2b\", headers={\"Authorization\": \"Bearer footokenbar\"}\n-    )\n-    assert response.status_code == 200\n-    assert response.json() == {\"username\": \"footokenbar\"}\n-\n-\n-def test_security_oauth2_password_bearer_wrong_header():\n-    response = client.get(\"/security/oauth2b\", headers={\"Authorization\": \"footokenbar\"})\n-    assert response.status_code == 403\n-    assert response.json() == {\"detail\": \"Not authenticated\"}\n-\n-\n-def test_security_oauth2_password_bearer_no_header():\n-    response = client.get(\"/security/oauth2b\")\n-    assert response.status_code == 403\n-    assert response.json() == {\"detail\": \"Not authenticated\"}\n\n@@ -0,0 +1,68 @@\n+from fastapi import Depends, FastAPI, Security\n+from fastapi.security import APIKeyCookie\n+from pydantic import BaseModel\n+from starlette.testclient import TestClient\n+\n+app = FastAPI()\n+\n+api_key = APIKeyCookie(name=\"key\")\n+\n+\n+class User(BaseModel):\n+    username: str\n+\n+\n+def get_current_user(oauth_header: str = Security(api_key)):\n+    user = User(username=oauth_header)\n+    return user\n+\n+\n+@app.get(\"/users/me\")\n+def read_current_user(current_user: User = Depends(get_current_user)):\n+    return current_user\n+\n+\n+client = TestClient(app)\n+\n+openapi_schema = {\n+    \"openapi\": \"3.0.2\",\n+    \"info\": {\"title\": \"Fast API\", \"version\": \"0.1.0\"},\n+    \"paths\": {\n+        \"/users/me\": {\n+            \"get\": {\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                    }\n+                },\n+                \"summary\": \"Read Current User Get\",\n+                \"operationId\": \"read_current_user_users_me_get\",\n+                \"security\": [{\"APIKeyCookie\": []}],\n+            }\n+        }\n+    },\n+    \"components\": {\n+        \"securitySchemes\": {\n+            \"APIKeyCookie\": {\"type\": \"apiKey\", \"name\": \"key\", \"in\": \"cookie\"}\n+        }\n+    },\n+}\n+\n+\n+def test_openapi_schema():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200\n+    assert response.json() == openapi_schema\n+\n+\n+def test_security_api_key():\n+    response = client.get(\"/users/me\", cookies={\"key\": \"secret\"})\n+    assert response.status_code == 200\n+    assert response.json() == {\"username\": \"secret\"}\n+\n+\n+def test_security_api_key_no_key():\n+    response = client.get(\"/users/me\")\n+    assert response.status_code == 403\n+    assert response.json() == {\"detail\": \"Not authenticated\"}\n\n@@ -0,0 +1,68 @@\n+from fastapi import Depends, FastAPI, Security\n+from fastapi.security import APIKeyHeader\n+from pydantic import BaseModel\n+from starlette.testclient import TestClient\n+\n+app = FastAPI()\n+\n+api_key = APIKeyHeader(name=\"key\")\n+\n+\n+class User(BaseModel):\n+    username: str\n+\n+\n+def get_current_user(oauth_header: str = Security(api_key)):\n+    user = User(username=oauth_header)\n+    return user\n+\n+\n+@app.get(\"/users/me\")\n+def read_current_user(current_user: User = Depends(get_current_user)):\n+    return current_user\n+\n+\n+client = TestClient(app)\n+\n+openapi_schema = {\n+    \"openapi\": \"3.0.2\",\n+    \"info\": {\"title\": \"Fast API\", \"version\": \"0.1.0\"},\n+    \"paths\": {\n+        \"/users/me\": {\n+            \"get\": {\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                    }\n+                },\n+                \"summary\": \"Read Current User Get\",\n+                \"operationId\": \"read_current_user_users_me_get\",\n+                \"security\": [{\"APIKeyHeader\": []}],\n+            }\n+        }\n+    },\n+    \"components\": {\n+        \"securitySchemes\": {\n+            \"APIKeyHeader\": {\"type\": \"apiKey\", \"name\": \"key\", \"in\": \"header\"}\n+        }\n+    },\n+}\n+\n+\n+def test_openapi_schema():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200\n+    assert response.json() == openapi_schema\n+\n+\n+def test_security_api_key():\n+    response = client.get(\"/users/me\", headers={\"key\": \"secret\"})\n+    assert response.status_code == 200\n+    assert response.json() == {\"username\": \"secret\"}\n+\n+\n+def test_security_api_key_no_key():\n+    response = client.get(\"/users/me\")\n+    assert response.status_code == 403\n+    assert response.json() == {\"detail\": \"Not authenticated\"}\n\n@@ -0,0 +1,68 @@\n+from fastapi import Depends, FastAPI, Security\n+from fastapi.security import APIKeyQuery\n+from pydantic import BaseModel\n+from starlette.testclient import TestClient\n+\n+app = FastAPI()\n+\n+api_key = APIKeyQuery(name=\"key\")\n+\n+\n+class User(BaseModel):\n+    username: str\n+\n+\n+def get_current_user(oauth_header: str = Security(api_key)):\n+    user = User(username=oauth_header)\n+    return user\n+\n+\n+@app.get(\"/users/me\")\n+def read_current_user(current_user: User = Depends(get_current_user)):\n+    return current_user\n+\n+\n+client = TestClient(app)\n+\n+openapi_schema = {\n+    \"openapi\": \"3.0.2\",\n+    \"info\": {\"title\": \"Fast API\", \"version\": \"0.1.0\"},\n+    \"paths\": {\n+        \"/users/me\": {\n+            \"get\": {\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                    }\n+                },\n+                \"summary\": \"Read Current User Get\",\n+                \"operationId\": \"read_current_user_users_me_get\",\n+                \"security\": [{\"APIKeyQuery\": []}],\n+            }\n+        }\n+    },\n+    \"components\": {\n+        \"securitySchemes\": {\n+            \"APIKeyQuery\": {\"type\": \"apiKey\", \"name\": \"key\", \"in\": \"query\"}\n+        }\n+    },\n+}\n+\n+\n+def test_openapi_schema():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200\n+    assert response.json() == openapi_schema\n+\n+\n+def test_security_api_key():\n+    response = client.get(\"/users/me?key=secret\")\n+    assert response.status_code == 200\n+    assert response.json() == {\"username\": \"secret\"}\n+\n+\n+def test_security_api_key_no_key():\n+    response = client.get(\"/users/me\")\n+    assert response.status_code == 403\n+    assert response.json() == {\"detail\": \"Not authenticated\"}\n\n@@ -0,0 +1,247 @@\n+import pytest\n+from fastapi import Depends, FastAPI, Security\n+from fastapi.security import OAuth2\n+from fastapi.security.oauth2 import OAuth2PasswordRequestFormStrict\n+from pydantic import BaseModel\n+from starlette.testclient import TestClient\n+\n+app = FastAPI()\n+\n+reusable_oauth2 = OAuth2(\n+    flows={\n+        \"password\": {\n+            \"tokenUrl\": \"/token\",\n+            \"scopes\": {\"read:users\": \"Read the users\", \"write:users\": \"Create users\"},\n+        }\n+    }\n+)\n+\n+\n+class User(BaseModel):\n+    username: str\n+\n+\n+def get_current_user(oauth_header: str = Security(reusable_oauth2)):\n+    user = User(username=oauth_header)\n+    return user\n+\n+\n+@app.post(\"/login\")\n+def read_current_user(form_data: OAuth2PasswordRequestFormStrict = Depends()):\n+    return form_data\n+\n+\n+@app.get(\"/users/me\")\n+def read_current_user(current_user: User = Depends(get_current_user)):\n+    return current_user\n+\n+\n+client = TestClient(app)\n+\n+openapi_schema = {\n+    \"openapi\": \"3.0.2\",\n+    \"info\": {\"title\": \"Fast API\", \"version\": \"0.1.0\"},\n+    \"paths\": {\n+        \"/login\": {\n+            \"post\": {\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                    },\n+                    \"422\": {\n+                        \"description\": \"Validation Error\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\n+                                    \"$ref\": \"#/components/schemas/HTTPValidationError\"\n+                                }\n+                            }\n+                        },\n+                    },\n+                },\n+                \"summary\": \"Read Current User Post\",\n+                \"operationId\": \"read_current_user_login_post\",\n+                \"requestBody\": {\n+                    \"content\": {\n+                        \"application/x-www-form-urlencoded\": {\n+                            \"schema\": {\n+                                \"$ref\": \"#/components/schemas/Body_read_current_user\"\n+                            }\n+                        }\n+                    },\n+                    \"required\": True,\n+                },\n+            }\n+        },\n+        \"/users/me\": {\n+            \"get\": {\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                    }\n+                },\n+                \"summary\": \"Read Current User Get\",\n+                \"operationId\": \"read_current_user_users_me_get\",\n+                \"security\": [{\"OAuth2\": []}],\n+            }\n+        },\n+    },\n+    \"components\": {\n+        \"schemas\": {\n+            \"Body_read_current_user\": {\n+                \"title\": \"Body_read_current_user\",\n+                \"required\": [\"grant_type\", \"username\", \"password\"],\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"grant_type\": {\n+                        \"title\": \"Grant_Type\",\n+                        \"pattern\": \"password\",\n+                        \"type\": \"string\",\n+                    },\n+                    \"username\": {\"title\": \"Username\", \"type\": \"string\"},\n+                    \"password\": {\"title\": \"Password\", \"type\": \"string\"},\n+                    \"scope\": {\"title\": \"Scope\", \"type\": \"string\", \"default\": \"\"},\n+                    \"client_id\": {\"title\": \"Client_Id\", \"type\": \"string\"},\n+                    \"client_secret\": {\"title\": \"Client_Secret\", \"type\": \"string\"},\n+                },\n+            },\n+            \"ValidationError\": {\n+                \"title\": \"ValidationError\",\n+                \"required\": [\"loc\", \"msg\", \"type\"],\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"loc\": {\n+                        \"title\": \"Location\",\n+                        \"type\": \"array\",\n+                        \"items\": {\"type\": \"string\"},\n+                    },\n+                    \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n+                    \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n+                },\n+            },\n+            \"HTTPValidationError\": {\n+                \"title\": \"HTTPValidationError\",\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"detail\": {\n+                        \"title\": \"Detail\",\n+                        \"type\": \"array\",\n+                        \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n+                    }\n+                },\n+            },\n+        },\n+        \"securitySchemes\": {\n+            \"OAuth2\": {\n+                \"type\": \"oauth2\",\n+                \"flows\": {\n+                    \"password\": {\n+                        \"scopes\": {\n+                            \"read:users\": \"Read the users\",\n+                            \"write:users\": \"Create users\",\n+                        },\n+                        \"tokenUrl\": \"/token\",\n+                    }\n+                },\n+            }\n+        },\n+    },\n+}\n+\n+\n+def test_openapi_schema():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200\n+    assert response.json() == openapi_schema\n+\n+\n+def test_security_oauth2():\n+    response = client.get(\"/users/me\", headers={\"Authorization\": \"Bearer footokenbar\"})\n+    assert response.status_code == 200\n+    assert response.json() == {\"username\": \"Bearer footokenbar\"}\n+\n+\n+def test_security_oauth2_password_other_header():\n+    response = client.get(\"/users/me\", headers={\"Authorization\": \"Other footokenbar\"})\n+    assert response.status_code == 200\n+    assert response.json() == {\"username\": \"Other footokenbar\"}\n+\n+\n+def test_security_oauth2_password_bearer_no_header():\n+    response = client.get(\"/users/me\")\n+    assert response.status_code == 403\n+    assert response.json() == {\"detail\": \"Not authenticated\"}\n+\n+\n+required_params = {\n+    \"detail\": [\n+        {\n+            \"loc\": [\"body\", \"grant_type\"],\n+            \"msg\": \"field required\",\n+            \"type\": \"value_error.missing\",\n+        },\n+        {\n+            \"loc\": [\"body\", \"username\"],\n+            \"msg\": \"field required\",\n+            \"type\": \"value_error.missing\",\n+        },\n+        {\n+            \"loc\": [\"body\", \"password\"],\n+            \"msg\": \"field required\",\n+            \"type\": \"value_error.missing\",\n+        },\n+    ]\n+}\n+\n+grant_type_required = {\n+    \"detail\": [\n+        {\n+            \"loc\": [\"body\", \"grant_type\"],\n+            \"msg\": \"field required\",\n+            \"type\": \"value_error.missing\",\n+        }\n+    ]\n+}\n+\n+grant_type_incorrect = {\n+    \"detail\": [\n+        {\n+            \"loc\": [\"body\", \"grant_type\"],\n+            \"msg\": 'string does not match regex \"password\"',\n+            \"type\": \"value_error.str.regex\",\n+            \"ctx\": {\"pattern\": \"password\"},\n+        }\n+    ]\n+}\n+\n+\n+@pytest.mark.parametrize(\n+    \"data,expected_status,expected_response\",\n+    [\n+        (None, 422, required_params),\n+        ({\"username\": \"johndoe\", \"password\": \"secret\"}, 422, grant_type_required),\n+        (\n+            {\"username\": \"johndoe\", \"password\": \"secret\", \"grant_type\": \"incorrect\"},\n+            422,\n+            grant_type_incorrect,\n+        ),\n+        (\n+            {\"username\": \"johndoe\", \"password\": \"secret\", \"grant_type\": \"password\"},\n+            200,\n+            {\n+                \"grant_type\": \"password\",\n+                \"username\": \"johndoe\",\n+                \"password\": \"secret\",\n+                \"scopes\": [],\n+                \"client_id\": None,\n+                \"client_secret\": None,\n+            },\n+        ),\n+    ],\n+)\n+def test_strict_login(data, expected_status, expected_response):\n+    response = client.post(\"/login\", data=data)\n+    assert response.status_code == expected_status\n+    assert response.json() == expected_response\n\n@@ -0,0 +1,74 @@\n+from fastapi import Depends, FastAPI, Security\n+from fastapi.security.open_id_connect_url import OpenIdConnect\n+from pydantic import BaseModel\n+from starlette.testclient import TestClient\n+\n+app = FastAPI()\n+\n+oid = OpenIdConnect(openIdConnectUrl=\"/openid\")\n+\n+\n+class User(BaseModel):\n+    username: str\n+\n+\n+def get_current_user(oauth_header: str = Security(oid)):\n+    user = User(username=oauth_header)\n+    return user\n+\n+\n+@app.get(\"/users/me\")\n+def read_current_user(current_user: User = Depends(get_current_user)):\n+    return current_user\n+\n+\n+client = TestClient(app)\n+\n+openapi_schema = {\n+    \"openapi\": \"3.0.2\",\n+    \"info\": {\"title\": \"Fast API\", \"version\": \"0.1.0\"},\n+    \"paths\": {\n+        \"/users/me\": {\n+            \"get\": {\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                    }\n+                },\n+                \"summary\": \"Read Current User Get\",\n+                \"operationId\": \"read_current_user_users_me_get\",\n+                \"security\": [{\"OpenIdConnect\": []}],\n+            }\n+        }\n+    },\n+    \"components\": {\n+        \"securitySchemes\": {\n+            \"OpenIdConnect\": {\"type\": \"openIdConnect\", \"openIdConnectUrl\": \"/openid\"}\n+        }\n+    },\n+}\n+\n+\n+def test_openapi_schema():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200\n+    assert response.json() == openapi_schema\n+\n+\n+def test_security_oauth2():\n+    response = client.get(\"/users/me\", headers={\"Authorization\": \"Bearer footokenbar\"})\n+    assert response.status_code == 200\n+    assert response.json() == {\"username\": \"Bearer footokenbar\"}\n+\n+\n+def test_security_oauth2_password_other_header():\n+    response = client.get(\"/users/me\", headers={\"Authorization\": \"Other footokenbar\"})\n+    assert response.status_code == 200\n+    assert response.json() == {\"username\": \"Other footokenbar\"}\n+\n+\n+def test_security_oauth2_password_bearer_no_header():\n+    response = client.get(\"/users/me\")\n+    assert response.status_code == 403\n+    assert response.json() == {\"detail\": \"Not authenticated\"}\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
