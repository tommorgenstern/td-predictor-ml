{"custom_id": "flask#c3dd7b8e4c9e322c413f4a49e5d15aceafd17c2d", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 649 | Lines Deleted: 840 | Files Changed: 30 | Hunks: 32 | Methods Changed: 102 | Complexity Δ (Sum/Max): -24/17 | Churn Δ: 1489 | Churn Cumulative: 2548 | Contributors (this commit): 22 | Commits (past 90d): 44 | Contributors (cumulative): 76 | DMM Complexity: 0.04477611940298507\n\nDIFF:\n@@ -11,13 +11,13 @@\n # All configuration values have a default; values that are commented out\n # serve to show the default.\n from __future__ import print_function\n+\n+import datetime\n import os\n import sys\n-import pkg_resources\n import time\n-import datetime\n \n-from sphinx.application import Sphinx\n+import pkg_resources\n \n BUILD_DATE = datetime.datetime.utcfromtimestamp(int(os.environ.get('SOURCE_DATE_EPOCH', time.time())))\n \n@@ -300,7 +300,7 @@ unwrap_decorators()\n del unwrap_decorators\n \n \n-def setup(app: Sphinx):\n+def setup(app):\n     def cut_module_meta(app, what, name, obj, options, lines):\n         \"\"\"Remove metadata from autodoc output.\"\"\"\n         if what != 'module':\n@@ -312,3 +312,34 @@ def setup(app: Sphinx):\n         ]\n \n     app.connect('autodoc-process-docstring', cut_module_meta)\n+\n+    def github_link(\n+        name, rawtext, text, lineno, inliner,\n+        options=None, content=None\n+    ):\n+        app = inliner.document.settings.env.app\n+        release = app.config.release\n+        base_url = 'https://github.com/pallets/flask/tree/'\n+\n+        if text.endswith('>'):\n+            words, text = text[:-1].rsplit('<', 1)\n+            words = words.strip()\n+        else:\n+            words = None\n+\n+        if release.endswith('dev'):\n+            url = '{0}master/{1}'.format(base_url, text)\n+        else:\n+            url = '{0}{1}/{2}'.format(base_url, release, text)\n+\n+        if words is None:\n+            words = url\n+\n+        from docutils.nodes import reference\n+        from docutils.parsers.rst.roles import set_classes\n+        options = options or {}\n+        set_classes(options)\n+        node = reference(rawtext, words, refuri=url, **options)\n+        return [node], []\n+\n+    app.add_role('gh', github_link)\n\n@@ -1,19 +0,0 @@\n-# -*- coding: utf-8 -*-\n-\"\"\"\n-Blueprint Example\n-~~~~~~~~~~~~~~~~~\n-\n-:copyright: © 2010 by the Pallets team.\n-:license: BSD, see LICENSE for more details.\n-\"\"\"\n-\n-from flask import Flask\n-from simple_page.simple_page import simple_page\n-\n-app = Flask(__name__)\n-app.register_blueprint(simple_page)\n-# Blueprint can be registered many times\n-app.register_blueprint(simple_page, url_prefix='/pages')\n-\n-if __name__=='__main__':\n-  app.run()\n\n\n@@ -1,13 +0,0 @@\n-from flask import Blueprint, render_template, abort\n-from jinja2 import TemplateNotFound\n-\n-simple_page = Blueprint('simple_page', __name__,\n-                        template_folder='templates')\n-\n-@simple_page.route('/', defaults={'page': 'index'})\n-@simple_page.route('/<page>')\n-def show(page):\n-    try:\n-        return render_template('pages/%s.html' % page)\n-    except TemplateNotFound:\n-        abort(404)\n\n@@ -1,35 +0,0 @@\n-# -*- coding: utf-8 -*-\n-\"\"\"\n-Blueprint Example Tests\n-~~~~~~~~~~~~~~~~~~~~~~~\n-\n-:copyright: © 2010 by the Pallets team.\n-:license: BSD, see LICENSE for more details.\n-\"\"\"\n-\n-import pytest\n-\n-import blueprintexample\n-\n-\n-@pytest.fixture\n-def client():\n-    return blueprintexample.app.test_client()\n-\n-\n-def test_urls(client):\n-    r = client.get('/')\n-    assert r.status_code == 200\n-\n-    r = client.get('/hello')\n-    assert r.status_code == 200\n-\n-    r = client.get('/world')\n-    assert r.status_code == 200\n-\n-    # second blueprint instance\n-    r = client.get('/pages/hello')\n-    assert r.status_code == 200\n-\n-    r = client.get('/pages/world')\n-    assert r.status_code == 200\n\n\n\n@@ -1,85 +0,0 @@\n-# -*- coding: utf-8 -*-\n-\"\"\"\n-    Flaskr\n-    ~~~~~~\n-\n-    A microblog example application written as Flask tutorial with\n-    Flask and sqlite3.\n-\n-    :copyright: © 2010 by the Pallets team.\n-    :license: BSD, see LICENSE for more details.\n-\"\"\"\n-\n-from sqlite3 import dbapi2 as sqlite3\n-from flask import Blueprint, request, session, g, redirect, url_for, abort, \\\n-     render_template, flash, current_app\n-\n-\n-# create our blueprint :)\n-bp = Blueprint('flaskr', __name__)\n-\n-\n-def connect_db():\n-    \"\"\"Connects to the specific database.\"\"\"\n-    rv = sqlite3.connect(current_app.config['DATABASE'])\n-    rv.row_factory = sqlite3.Row\n-    return rv\n-\n-\n-def init_db():\n-    \"\"\"Initializes the database.\"\"\"\n-    db = get_db()\n-    with current_app.open_resource('schema.sql', mode='r') as f:\n-        db.cursor().executescript(f.read())\n-    db.commit()\n-\n-\n-def get_db():\n-    \"\"\"Opens a new database connection if there is none yet for the\n-    current application context.\n-    \"\"\"\n-    if not hasattr(g, 'sqlite_db'):\n-        g.sqlite_db = connect_db()\n-    return g.sqlite_db\n-\n-\n-@bp.route('/')\n-def show_entries():\n-    db = get_db()\n-    cur = db.execute('select title, text from entries order by id desc')\n-    entries = cur.fetchall()\n-    return render_template('show_entries.html', entries=entries)\n-\n-\n-@bp.route('/add', methods=['POST'])\n-def add_entry():\n-    if not session.get('logged_in'):\n-        abort(401)\n-    db = get_db()\n-    db.execute('insert into entries (title, text) values (?, ?)',\n-               [request.form['title'], request.form['text']])\n-    db.commit()\n-    flash('New entry was successfully posted')\n-    return redirect(url_for('flaskr.show_entries'))\n-\n-\n-@bp.route('/login', methods=['GET', 'POST'])\n-def login():\n-    error = None\n-    if request.method == 'POST':\n-        if request.form['username'] != current_app.config['USERNAME']:\n-            error = 'Invalid username'\n-        elif request.form['password'] != current_app.config['PASSWORD']:\n-            error = 'Invalid password'\n-        else:\n-            session['logged_in'] = True\n-            flash('You were logged in')\n-            return redirect(url_for('flaskr.show_entries'))\n-    return render_template('login.html', error=error)\n-\n-\n-@bp.route('/logout')\n-def logout():\n-    session.pop('logged_in', None)\n-    flash('You were logged out')\n-    return redirect(url_for('flaskr.show_entries'))\n\n@@ -1,64 +0,0 @@\n-# -*- coding: utf-8 -*-\n-\"\"\"\n-    Flaskr\n-    ~~~~~~\n-\n-    A microblog example application written as Flask tutorial with\n-    Flask and sqlite3.\n-\n-    :copyright: © 2010 by the Pallets team.\n-    :license: BSD, see LICENSE for more details.\n-\"\"\"\n-\n-import os\n-from flask import Flask, g\n-from werkzeug.utils import find_modules, import_string\n-from flaskr.blueprints.flaskr import init_db\n-\n-\n-def create_app(config=None):\n-    app = Flask('flaskr')\n-\n-    app.config.update(dict(\n-        DATABASE=os.path.join(app.root_path, 'flaskr.db'),\n-        DEBUG=True,\n-        SECRET_KEY=b'_5#y2L\"F4Q8z\\n\\xec]/',\n-        USERNAME='admin',\n-        PASSWORD='default'\n-    ))\n-    app.config.update(config or {})\n-    app.config.from_envvar('FLASKR_SETTINGS', silent=True)\n-\n-    register_blueprints(app)\n-    register_cli(app)\n-    register_teardowns(app)\n-\n-    return app\n-\n-\n-def register_blueprints(app):\n-    \"\"\"Register all blueprint modules\n-\n-    Reference: Armin Ronacher, \"Flask for Fun and for Profit\" PyBay 2016.\n-    \"\"\"\n-    for name in find_modules('flaskr.blueprints'):\n-        mod = import_string(name)\n-        if hasattr(mod, 'bp'):\n-            app.register_blueprint(mod.bp)\n-    return None\n-\n-\n-def register_cli(app):\n-    @app.cli.command('initdb')\n-    def initdb_command():\n-        \"\"\"Creates the database tables.\"\"\"\n-        init_db()\n-        print('Initialized the database.')\n-\n-\n-def register_teardowns(app):\n-    @app.teardown_appcontext\n-    def close_db(error):\n-        \"\"\"Closes the database again at the end of the request.\"\"\"\n-        if hasattr(g, 'sqlite_db'):\n-            g.sqlite_db.close()\n\n@@ -1,27 +0,0 @@\n-# -*- coding: utf-8 -*-\n-\"\"\"\n-    Flaskr Tests\n-    ~~~~~~~~~~~~\n-\n-    Tests the Flaskr application.\n-\n-    :copyright: © 2010 by the Pallets team.\n-    :license: BSD, see LICENSE for more details.\n-\"\"\"\n-\n-from setuptools import setup, find_packages\n-\n-setup(\n-    name='flaskr',\n-    packages=find_packages(),\n-    include_package_data=True,\n-    install_requires=[\n-        'flask',\n-    ],\n-    setup_requires=[\n-        'pytest-runner',\n-    ],\n-    tests_require=[\n-        'pytest',\n-    ],\n-)\n\n@@ -1,83 +0,0 @@\n-# -*- coding: utf-8 -*-\n-\"\"\"\n-    Flaskr Tests\n-    ~~~~~~~~~~~~\n-\n-    Tests the Flaskr application.\n-\n-    :copyright: © 2010 by the Pallets team.\n-    :license: BSD, see LICENSE for more details.\n-\"\"\"\n-\n-import os\n-import tempfile\n-import pytest\n-from flaskr.factory import create_app\n-from flaskr.blueprints.flaskr import init_db\n-\n-\n-@pytest.fixture\n-def app():\n-    db_fd, db_path = tempfile.mkstemp()\n-    config = {\n-        'DATABASE': db_path,\n-        'TESTING': True,\n-    }\n-    app = create_app(config=config)\n-\n-    with app.app_context():\n-        init_db()\n-        yield app\n-\n-    os.close(db_fd)\n-    os.unlink(db_path)\n-\n-\n-@pytest.fixture\n-def client(app):\n-    return app.test_client()\n-\n-\n-def login(client, username, password):\n-    return client.post('/login', data=dict(\n-        username=username,\n-        password=password\n-    ), follow_redirects=True)\n-\n-\n-def logout(client):\n-    return client.get('/logout', follow_redirects=True)\n-\n-\n-def test_empty_db(client):\n-    \"\"\"Start with a blank database.\"\"\"\n-    rv = client.get('/')\n-    assert b'No entries here so far' in rv.data\n-\n-\n-def test_login_logout(client, app):\n-    \"\"\"Make sure login and logout works\"\"\"\n-    rv = login(client, app.config['USERNAME'],\n-               app.config['PASSWORD'])\n-    assert b'You were logged in' in rv.data\n-    rv = logout(client)\n-    assert b'You were logged out' in rv.data\n-    rv = login(client,app.config['USERNAME'] + 'x',\n-               app.config['PASSWORD'])\n-    assert b'Invalid username' in rv.data\n-    rv = login(client, app.config['USERNAME'],\n-               app.config['PASSWORD'] + 'x')\n-    assert b'Invalid password' in rv.data\n-\n-\n-def test_messages(client, app):\n-    \"\"\"Test that messages work\"\"\"\n-    login(client, app.config['USERNAME'],\n-          app.config['PASSWORD'])\n-    rv = client.post('/add', data=dict(\n-        title='<Hello>',\n-        text='<strong>HTML</strong> allowed here'\n-    ), follow_redirects=True)\n-    assert b'No entries here so far' not in rv.data\n-    assert b'&lt;Hello&gt;' in rv.data\n-    assert b'<strong>HTML</strong> allowed here' in rv.data\n\n@@ -1,29 +0,0 @@\n-# -*- coding: utf-8 -*-\n-\"\"\"\n-    jQuery Example\n-    ~~~~~~~~~~~~~~\n-\n-    A simple application that shows how Flask and jQuery get along.\n-\n-    :copyright: © 2010 by the Pallets team.\n-    :license: BSD, see LICENSE for more details.\n-\"\"\"\n-\n-from flask import Flask, jsonify, render_template, request\n-app = Flask(__name__)\n-\n-\n-@app.route('/_add_numbers')\n-def add_numbers():\n-    \"\"\"Add two numbers server side, ridiculous but well...\"\"\"\n-    a = request.args.get('a', 0, type=int)\n-    b = request.args.get('b', 0, type=int)\n-    return jsonify(result=a + b)\n-\n-\n-@app.route('/')\n-def index():\n-    return render_template('index.html')\n-\n-if __name__ == '__main__':\n-    app.run()\n\n@@ -1 +0,0 @@\n-from .minitwit import app\n\n@@ -1,256 +0,0 @@\n-# -*- coding: utf-8 -*-\n-\"\"\"\n-    MiniTwit\n-    ~~~~~~~~\n-\n-    A microblogging application written with Flask and sqlite3.\n-\n-    :copyright: © 2010 by the Pallets team.\n-    :license: BSD, see LICENSE for more details.\n-\"\"\"\n-\n-import time\n-from sqlite3 import dbapi2 as sqlite3\n-from hashlib import md5\n-from datetime import datetime\n-from flask import Flask, request, session, url_for, redirect, \\\n-     render_template, abort, g, flash, _app_ctx_stack\n-from werkzeug import check_password_hash, generate_password_hash\n-\n-\n-# configuration\n-DATABASE = '/tmp/minitwit.db'\n-PER_PAGE = 30\n-DEBUG = True\n-SECRET_KEY = b'_5#y2L\"F4Q8z\\n\\xec]/'\n-\n-# create our little application :)\n-app = Flask('minitwit')\n-app.config.from_object(__name__)\n-app.config.from_envvar('MINITWIT_SETTINGS', silent=True)\n-\n-\n-def get_db():\n-    \"\"\"Opens a new database connection if there is none yet for the\n-    current application context.\n-    \"\"\"\n-    top = _app_ctx_stack.top\n-    if not hasattr(top, 'sqlite_db'):\n-        top.sqlite_db = sqlite3.connect(app.config['DATABASE'])\n-        top.sqlite_db.row_factory = sqlite3.Row\n-    return top.sqlite_db\n-\n-\n-@app.teardown_appcontext\n-def close_database(exception):\n-    \"\"\"Closes the database again at the end of the request.\"\"\"\n-    top = _app_ctx_stack.top\n-    if hasattr(top, 'sqlite_db'):\n-        top.sqlite_db.close()\n-\n-\n-def init_db():\n-    \"\"\"Initializes the database.\"\"\"\n-    db = get_db()\n-    with app.open_resource('schema.sql', mode='r') as f:\n-        db.cursor().executescript(f.read())\n-    db.commit()\n-\n-\n-@app.cli.command('initdb')\n-def initdb_command():\n-    \"\"\"Creates the database tables.\"\"\"\n-    init_db()\n-    print('Initialized the database.')\n-\n-\n-def query_db(query, args=(), one=False):\n-    \"\"\"Queries the database and returns a list of dictionaries.\"\"\"\n-    cur = get_db().execute(query, args)\n-    rv = cur.fetchall()\n-    return (rv[0] if rv else None) if one else rv\n-\n-\n-def get_user_id(username):\n-    \"\"\"Convenience method to look up the id for a username.\"\"\"\n-    rv = query_db('select user_id from user where username = ?',\n-                  [username], one=True)\n-    return rv[0] if rv else None\n-\n-\n-def format_datetime(timestamp):\n-    \"\"\"Format a timestamp for display.\"\"\"\n-    return datetime.utcfromtimestamp(timestamp).strftime('%Y-%m-%d @ %H:%M')\n-\n-\n-def gravatar_url(email, size=80):\n-    \"\"\"Return the gravatar image for the given email address.\"\"\"\n-    return 'https://www.gravatar.com/avatar/%s?d=identicon&s=%d' % \\\n-        (md5(email.strip().lower().encode('utf-8')).hexdigest(), size)\n-\n-\n-@app.before_request\n-def before_request():\n-    g.user = None\n-    if 'user_id' in session:\n-        g.user = query_db('select * from user where user_id = ?',\n-                          [session['user_id']], one=True)\n-\n-\n-@app.route('/')\n-def timeline():\n-    \"\"\"Shows a users timeline or if no user is logged in it will\n-    redirect to the public timeline.  This timeline shows the user's\n-    messages as well as all the messages of followed users.\n-    \"\"\"\n-    if not g.user:\n-        return redirect(url_for('public_timeline'))\n-    return render_template('timeline.html', messages=query_db('''\n-        select message.*, user.* from message, user\n-        where message.author_id = user.user_id and (\n-            user.user_id = ? or\n-            user.user_id in (select whom_id from follower\n-                                    where who_id = ?))\n-        order by message.pub_date desc limit ?''',\n-        [session['user_id'], session['user_id'], PER_PAGE]))\n-\n-\n-@app.route('/public')\n-def public_timeline():\n-    \"\"\"Displays the latest messages of all users.\"\"\"\n-    return render_template('timeline.html', messages=query_db('''\n-        select message.*, user.* from message, user\n-        where message.author_id = user.user_id\n-        order by message.pub_date desc limit ?''', [PER_PAGE]))\n-\n-\n-@app.route('/<username>')\n-def user_timeline(username):\n-    \"\"\"Display's a users tweets.\"\"\"\n-    profile_user = query_db('select * from user where username = ?',\n-                            [username], one=True)\n-    if profile_user is None:\n-        abort(404)\n-    followed = False\n-    if g.user:\n-        followed = query_db('''select 1 from follower where\n-            follower.who_id = ? and follower.whom_id = ?''',\n-            [session['user_id'], profile_user['user_id']],\n-            one=True) is not None\n-    return render_template('timeline.html', messages=query_db('''\n-            select message.*, user.* from message, user where\n-            user.user_id = message.author_id and user.user_id = ?\n-            order by message.pub_date desc limit ?''',\n-            [profile_user['user_id'], PER_PAGE]), followed=followed,\n-            profile_user=profile_user)\n-\n-\n-@app.route('/<username>/follow')\n-def follow_user(username):\n-    \"\"\"Adds the current user as follower of the given user.\"\"\"\n-    if not g.user:\n-        abort(401)\n-    whom_id = get_user_id(username)\n-    if whom_id is None:\n-        abort(404)\n-    db = get_db()\n-    db.execute('insert into follower (who_id, whom_id) values (?, ?)',\n-              [session['user_id'], whom_id])\n-    db.commit()\n-    flash('You are now following \"%s\"' % username)\n-    return redirect(url_for('user_timeline', username=username))\n-\n-\n-@app.route('/<username>/unfollow')\n-def unfollow_user(username):\n-    \"\"\"Removes the current user as follower of the given user.\"\"\"\n-    if not g.user:\n-        abort(401)\n-    whom_id = get_user_id(username)\n-    if whom_id is None:\n-        abort(404)\n-    db = get_db()\n-    db.execute('delete from follower where who_id=? and whom_id=?',\n-              [session['user_id'], whom_id])\n-    db.commit()\n-    flash('You are no longer following \"%s\"' % username)\n-    return redirect(url_for('user_timeline', username=username))\n-\n-\n-@app.route('/add_message', methods=['POST'])\n-def add_message():\n-    \"\"\"Registers a new message for the user.\"\"\"\n-    if 'user_id' not in session:\n-        abort(401)\n-    if request.form['text']:\n-        db = get_db()\n-        db.execute('''insert into message (author_id, text, pub_date)\n-          values (?, ?, ?)''', (session['user_id'], request.form['text'],\n-                                int(time.time())))\n-        db.commit()\n-        flash('Your message was recorded')\n-    return redirect(url_for('timeline'))\n-\n-\n-@app.route('/login', methods=['GET', 'POST'])\n-def login():\n-    \"\"\"Logs the user in.\"\"\"\n-    if g.user:\n-        return redirect(url_for('timeline'))\n-    error = None\n-    if request.method == 'POST':\n-        user = query_db('''select * from user where\n-            username = ?''', [request.form['username']], one=True)\n-        if user is None:\n-            error = 'Invalid username'\n-        elif not check_password_hash(user['pw_hash'],\n-                                     request.form['password']):\n-            error = 'Invalid password'\n-        else:\n-            flash('You were logged in')\n-            session['user_id'] = user['user_id']\n-            return redirect(url_for('timeline'))\n-    return render_template('login.html', error=error)\n-\n-\n-@app.route('/register', methods=['GET', 'POST'])\n-def register():\n-    \"\"\"Registers the user.\"\"\"\n-    if g.user:\n-        return redirect(url_for('timeline'))\n-    error = None\n-    if request.method == 'POST':\n-        if not request.form['username']:\n-            error = 'You have to enter a username'\n-        elif not request.form['email'] or \\\n-                '@' not in request.form['email']:\n-            error = 'You have to enter a valid email address'\n-        elif not request.form['password']:\n-            error = 'You have to enter a password'\n-        elif request.form['password'] != request.form['password2']:\n-            error = 'The two passwords do not match'\n-        elif get_user_id(request.form['username']) is not None:\n-            error = 'The username is already taken'\n-        else:\n-            db = get_db()\n-            db.execute('''insert into user (\n-              username, email, pw_hash) values (?, ?, ?)''',\n-              [request.form['username'], request.form['email'],\n-               generate_password_hash(request.form['password'])])\n-            db.commit()\n-            flash('You were successfully registered and can login now')\n-            return redirect(url_for('login'))\n-    return render_template('register.html', error=error)\n-\n-\n-@app.route('/logout')\n-def logout():\n-    \"\"\"Logs the user out.\"\"\"\n-    flash('You were logged out')\n-    session.pop('user_id', None)\n-    return redirect(url_for('public_timeline'))\n-\n-\n-# add some filters to jinja\n-app.jinja_env.filters['datetimeformat'] = format_datetime\n-app.jinja_env.filters['gravatar'] = gravatar_url\n\n@@ -1,16 +0,0 @@\n-from setuptools import setup\n-\n-setup(\n-    name='minitwit',\n-    packages=['minitwit'],\n-    include_package_data=True,\n-    install_requires=[\n-        'flask',\n-    ],\n-    setup_requires=[\n-        'pytest-runner',\n-    ],\n-    tests_require=[\n-        'pytest',\n-    ],\n-)\n\\ No newline at end of file\n\n@@ -1,150 +0,0 @@\n-# -*- coding: utf-8 -*-\n-\"\"\"\n-    MiniTwit Tests\n-    ~~~~~~~~~~~~~~\n-\n-    Tests the MiniTwit application.\n-\n-    :copyright: © 2010 by the Pallets team.\n-    :license: BSD, see LICENSE for more details.\n-\"\"\"\n-\n-import os\n-import tempfile\n-import pytest\n-from minitwit import minitwit\n-\n-\n-@pytest.fixture\n-def client():\n-    db_fd, minitwit.app.config['DATABASE'] = tempfile.mkstemp()\n-    client = minitwit.app.test_client()\n-    with minitwit.app.app_context():\n-        minitwit.init_db()\n-\n-    yield client\n-\n-    os.close(db_fd)\n-    os.unlink(minitwit.app.config['DATABASE'])\n-\n-\n-def register(client, username, password, password2=None, email=None):\n-    \"\"\"Helper function to register a user\"\"\"\n-    if password2 is None:\n-        password2 = password\n-    if email is None:\n-        email = username + '@example.com'\n-    return client.post('/register', data={\n-        'username':     username,\n-        'password':     password,\n-        'password2':    password2,\n-        'email':        email,\n-    }, follow_redirects=True)\n-\n-\n-def login(client, username, password):\n-    \"\"\"Helper function to login\"\"\"\n-    return client.post('/login', data={\n-        'username': username,\n-        'password': password\n-    }, follow_redirects=True)\n-\n-\n-def register_and_login(client, username, password):\n-    \"\"\"Registers and logs in in one go\"\"\"\n-    register(client, username, password)\n-    return login(client, username, password)\n-\n-\n-def logout(client):\n-    \"\"\"Helper function to logout\"\"\"\n-    return client.get('/logout', follow_redirects=True)\n-\n-\n-def add_message(client, text):\n-    \"\"\"Records a message\"\"\"\n-    rv = client.post('/add_message', data={'text': text},\n-                     follow_redirects=True)\n-    if text:\n-        assert b'Your message was recorded' in rv.data\n-    return rv\n-\n-\n-def test_register(client):\n-    \"\"\"Make sure registering works\"\"\"\n-    rv = register(client, 'user1', 'default')\n-    assert b'You were successfully registered ' \\\n-           b'and can login now' in rv.data\n-    rv = register(client, 'user1', 'default')\n-    assert b'The username is already taken' in rv.data\n-    rv = register(client, '', 'default')\n-    assert b'You have to enter a username' in rv.data\n-    rv = register(client, 'meh', '')\n-    assert b'You have to enter a password' in rv.data\n-    rv = register(client, 'meh', 'x', 'y')\n-    assert b'The two passwords do not match' in rv.data\n-    rv = register(client, 'meh', 'foo', email='broken')\n-    assert b'You have to enter a valid email address' in rv.data\n-\n-\n-def test_login_logout(client):\n-    \"\"\"Make sure logging in and logging out works\"\"\"\n-    rv = register_and_login(client, 'user1', 'default')\n-    assert b'You were logged in' in rv.data\n-    rv = logout(client)\n-    assert b'You were logged out' in rv.data\n-    rv = login(client, 'user1', 'wrongpassword')\n-    assert b'Invalid password' in rv.data\n-    rv = login(client, 'user2', 'wrongpassword')\n-    assert b'Invalid username' in rv.data\n-\n-\n-def test_message_recording(client):\n-    \"\"\"Check if adding messages works\"\"\"\n-    register_and_login(client, 'foo', 'default')\n-    add_message(client, 'test message 1')\n-    add_message(client, '<test message 2>')\n-    rv = client.get('/')\n-    assert b'test message 1' in rv.data\n-    assert b'&lt;test message 2&gt;' in rv.data\n-\n-\n-def test_timelines(client):\n-    \"\"\"Make sure that timelines work\"\"\"\n-    register_and_login(client, 'foo', 'default')\n-    add_message(client, 'the message by foo')\n-    logout(client)\n-    register_and_login(client, 'bar', 'default')\n-    add_message(client, 'the message by bar')\n-    rv = client.get('/public')\n-    assert b'the message by foo' in rv.data\n-    assert b'the message by bar' in rv.data\n-\n-    # bar's timeline should just show bar's message\n-    rv = client.get('/')\n-    assert b'the message by foo' not in rv.data\n-    assert b'the message by bar' in rv.data\n-\n-    # now let's follow foo\n-    rv = client.get('/foo/follow', follow_redirects=True)\n-    assert b'You are now following &#34;foo&#34;' in rv.data\n-\n-    # we should now see foo's message\n-    rv = client.get('/')\n-    assert b'the message by foo' in rv.data\n-    assert b'the message by bar' in rv.data\n-\n-    # but on the user's page we only want the user's message\n-    rv = client.get('/bar')\n-    assert b'the message by foo' not in rv.data\n-    assert b'the message by bar' in rv.data\n-    rv = client.get('/foo')\n-    assert b'the message by foo' in rv.data\n-    assert b'the message by bar' not in rv.data\n-\n-    # now unfollow and check if that worked\n-    rv = client.get('/foo/unfollow', follow_redirects=True)\n-    assert b'You are no longer following &#34;foo&#34;' in rv.data\n-    rv = client.get('/')\n-    assert b'the message by foo' not in rv.data\n-    assert b'the message by bar' in rv.data\n\n@@ -1,10 +0,0 @@\n-from setuptools import setup\n-\n-setup(\n-    name='yourapplication',\n-    packages=['yourapplication'],\n-    include_package_data=True,\n-    install_requires=[\n-        'flask',\n-    ],\n-)\n\n@@ -1,21 +0,0 @@\n-# -*- coding: utf-8 -*-\n-\"\"\"\n-Larger App Tests\n-~~~~~~~~~~~~~~~~\n-\n-:copyright: © 2010 by the Pallets team.\n-:license: BSD, see LICENSE for more details.\n-\"\"\"\n-\n-from yourapplication import app\n-import pytest\n-\n-@pytest.fixture\n-def client():\n-    app.config['TESTING'] = True\n-    client = app.test_client()\n-    return client\n-\n-def test_index(client):\n-    rv = client.get('/')\n-    assert b\"Hello World!\" in rv.data\n\n@@ -1,13 +0,0 @@\n-# -*- coding: utf-8 -*-\n-\"\"\"\n-yourapplication\n-~~~~~~~~~~~~~~~\n-\n-:copyright: © 2010 by the Pallets team.\n-:license: BSD, see LICENSE for more details.\n-\"\"\"\n-\n-from flask import Flask\n-app = Flask('yourapplication')\n-\n-import yourapplication.views\n\n@@ -1,14 +0,0 @@\n-# -*- coding: utf-8 -*-\n-\"\"\"\n-yourapplication.views\n-~~~~~~~~~~~~~~~~~~~~~\n-\n-:copyright: © 2010 by the Pallets team.\n-:license: BSD, see LICENSE for more details.\n-\"\"\"\n-\n-from yourapplication import app\n-\n-@app.route('/')\n-def index():\n-    return 'Hello World!'\n\n@@ -0,0 +1,48 @@\n+import os\n+\n+from flask import Flask\n+\n+\n+def create_app(test_config=None):\n+    \"\"\"Create and configure an instance of the Flask application.\"\"\"\n+    app = Flask(__name__, instance_relative_config=True)\n+    app.config.from_mapping(\n+        # a default secret that should be overridden by instance config\n+        SECRET_KEY='dev',\n+        # store the database in the instance folder\n+        DATABASE=os.path.join(app.instance_path, 'flaskr.sqlite'),\n+    )\n+\n+    if test_config is None:\n+        # load the instance config, if it exists, when not testing\n+        app.config.from_pyfile('config.py', silent=True)\n+    else:\n+        # load the test config if passed in\n+        app.config.update(test_config)\n+\n+    # ensure the instance folder exists\n+    try:\n+        os.makedirs(app.instance_path)\n+    except OSError:\n+        pass\n+\n+    @app.route('/hello')\n+    def hello():\n+        return 'Hello, World!'\n+\n+    # register the database commands\n+    from flaskr import db\n+    db.init_app(app)\n+\n+    # apply the blueprints to the app\n+    from flaskr import auth, blog\n+    app.register_blueprint(auth.bp)\n+    app.register_blueprint(blog.bp)\n+\n+    # make url_for('index') == url_for('blog.index')\n+    # in another app, you might define a separate main index here with\n+    # app.route, while giving the blog blueprint a url_prefix, but for\n+    # the tutorial the blog will be the main index\n+    app.add_url_rule('/', endpoint='index')\n+\n+    return app\n\n@@ -0,0 +1,108 @@\n+import functools\n+\n+from flask import (\n+    Blueprint, flash, g, redirect, render_template, request, session, url_for\n+)\n+from werkzeug.security import check_password_hash, generate_password_hash\n+\n+from flaskr.db import get_db\n+\n+bp = Blueprint('auth', __name__, url_prefix='/auth')\n+\n+\n+def login_required(view):\n+    \"\"\"View decorator that redirects anonymous users to the login page.\"\"\"\n+    @functools.wraps(view)\n+    def wrapped_view(**kwargs):\n+        if g.user is None:\n+            return redirect(url_for('auth.login'))\n+\n+        return view(**kwargs)\n+\n+    return wrapped_view\n+\n+\n+@bp.before_app_request\n+def load_logged_in_user():\n+    \"\"\"If a user id is stored in the session, load the user object from\n+    the database into ``g.user``.\"\"\"\n+    user_id = session.get('user_id')\n+\n+    if user_id is None:\n+        g.user = None\n+    else:\n+        g.user = get_db().execute(\n+            'SELECT * FROM user WHERE id = ?', (user_id,)\n+        ).fetchone()\n+\n+\n+@bp.route('/register', methods=('GET', 'POST'))\n+def register():\n+    \"\"\"Register a new user.\n+\n+    Validates that the username is not already taken. Hashes the\n+    password for security.\n+    \"\"\"\n+    if request.method == 'POST':\n+        username = request.form['username']\n+        password = request.form['password']\n+        db = get_db()\n+        error = None\n+\n+        if not username:\n+            error = 'Username is required.'\n+        elif not password:\n+            error = 'Password is required.'\n+        elif db.execute(\n+            'SELECT id FROM user WHERE username = ?', (username,)\n+        ).fetchone() is not None:\n+            error = 'User {} is already registered.'.format(username)\n+\n+        if error is None:\n+            # the name is available, store it in the database and go to\n+            # the login page\n+            db.execute(\n+                'INSERT INTO user (username, password) VALUES (?, ?)',\n+                (username, generate_password_hash(password))\n+            )\n+            db.commit()\n+            return redirect(url_for('auth.login'))\n+\n+        flash(error)\n+\n+    return render_template('auth/register.html')\n+\n+\n+@bp.route('/login', methods=('GET', 'POST'))\n+def login():\n+    \"\"\"Log in a registered user by adding the user id to the session.\"\"\"\n+    if request.method == 'POST':\n+        username = request.form['username']\n+        password = request.form['password']\n+        db = get_db()\n+        error = None\n+        user = db.execute(\n+            'SELECT * FROM user WHERE username = ?', (username,)\n+        ).fetchone()\n+\n+        if user is None:\n+            error = 'Incorrect username.'\n+        elif not check_password_hash(user['password'], password):\n+            error = 'Incorrect password.'\n+\n+        if error is None:\n+            # store the user id in a new session and return to the index\n+            session.clear()\n+            session['user_id'] = user['id']\n+            return redirect(url_for('index'))\n+\n+        flash(error)\n+\n+    return render_template('auth/login.html')\n+\n+\n+@bp.route('/logout')\n+def logout():\n+    \"\"\"Clear the current session, including the stored user id.\"\"\"\n+    session.clear()\n+    return redirect(url_for('index'))\n\n@@ -0,0 +1,119 @@\n+from flask import (\n+    Blueprint, flash, g, redirect, render_template, request, url_for\n+)\n+from werkzeug.exceptions import abort\n+\n+from flaskr.auth import login_required\n+from flaskr.db import get_db\n+\n+bp = Blueprint('blog', __name__)\n+\n+\n+@bp.route('/')\n+def index():\n+    \"\"\"Show all the posts, most recent first.\"\"\"\n+    db = get_db()\n+    posts = db.execute(\n+        'SELECT p.id, title, body, created, author_id, username'\n+        ' FROM post p JOIN user u ON p.author_id = u.id'\n+        ' ORDER BY created DESC'\n+    ).fetchall()\n+    return render_template('blog/index.html', posts=posts)\n+\n+\n+def get_post(id, check_author=True):\n+    \"\"\"Get a post and its author by id.\n+\n+    Checks that the id exists and optionally that the current user is\n+    the author.\n+\n+    :param id: id of post to get\n+    :param check_author: require the current user to be the author\n+    :return: the post with author information\n+    :raise 404: if a post with the given id doesn't exist\n+    :raise 403: if the current user isn't the author\n+    \"\"\"\n+    post = get_db().execute(\n+        'SELECT p.id, title, body, created, author_id, username'\n+        ' FROM post p JOIN user u ON p.author_id = u.id'\n+        ' WHERE p.id = ?',\n+        (id,)\n+    ).fetchone()\n+\n+    if post is None:\n+        abort(404, \"Post id {0} doesn't exist.\".format(id))\n+\n+    if check_author and post['author_id'] != g.user['id']:\n+        abort(403)\n+\n+    return post\n+\n+\n+@bp.route('/create', methods=('GET', 'POST'))\n+@login_required\n+def create():\n+    \"\"\"Create a new post for the current user.\"\"\"\n+    if request.method == 'POST':\n+        title = request.form['title']\n+        body = request.form['body']\n+        error = None\n+\n+        if not title:\n+            error = 'Title is required.'\n+\n+        if error is not None:\n+            flash(error)\n+        else:\n+            db = get_db()\n+            db.execute(\n+                'INSERT INTO post (title, body, author_id)'\n+                ' VALUES (?, ?, ?)',\n+                (title, body, g.user['id'])\n+            )\n+            db.commit()\n+            return redirect(url_for('blog.index'))\n+\n+    return render_template('blog/create.html')\n+\n+\n+@bp.route('/<int:id>/update', methods=('GET', 'POST'))\n+@login_required\n+def update(id):\n+    \"\"\"Update a post if the current user is the author.\"\"\"\n+    post = get_post(id)\n+\n+    if request.method == 'POST':\n+        title = request.form['title']\n+        body = request.form['body']\n+        error = None\n+\n+        if not title:\n+            error = 'Title is required.'\n+\n+        if error is not None:\n+            flash(error)\n+        else:\n+            db = get_db()\n+            db.execute(\n+                'UPDATE post SET title = ?, body = ? WHERE id = ?',\n+                (title, body, id)\n+            )\n+            db.commit()\n+            return redirect(url_for('blog.index'))\n+\n+    return render_template('blog/update.html', post=post)\n+\n+\n+@bp.route('/<int:id>/delete', methods=('POST',))\n+@login_required\n+def delete(id):\n+    \"\"\"Delete a post.\n+\n+    Ensures that the post exists and that the logged in user is the\n+    author of the post.\n+    \"\"\"\n+    get_post(id)\n+    db = get_db()\n+    db.execute('DELETE FROM post WHERE id = ?', (id,))\n+    db.commit()\n+    return redirect(url_for('blog.index'))\n\n@@ -0,0 +1,54 @@\n+import sqlite3\n+\n+import click\n+from flask import current_app, g\n+from flask.cli import with_appcontext\n+\n+\n+def get_db():\n+    \"\"\"Connect to the application's configured database. The connection\n+    is unique for each request and will be reused if this is called\n+    again.\n+    \"\"\"\n+    if 'db' not in g:\n+        g.db = sqlite3.connect(\n+            current_app.config['DATABASE'],\n+            detect_types=sqlite3.PARSE_DECLTYPES\n+        )\n+        g.db.row_factory = sqlite3.Row\n+\n+    return g.db\n+\n+\n+def close_db(e=None):\n+    \"\"\"If this request connected to the database, close the\n+    connection.\n+    \"\"\"\n+    db = g.pop('db', None)\n+\n+    if db is not None:\n+        db.close()\n+\n+\n+def init_db():\n+    \"\"\"Clear existing data and create new tables.\"\"\"\n+    db = get_db()\n+\n+    with current_app.open_resource('schema.sql') as f:\n+        db.executescript(f.read().decode('utf8'))\n+\n+\n+@click.command('init-db')\n+@with_appcontext\n+def init_db_command():\n+    \"\"\"Clear existing data and create new tables.\"\"\"\n+    init_db()\n+    click.echo('Initialized the database.')\n+\n+\n+def init_app(app):\n+    \"\"\"Register database functions with the Flask app. This is called by\n+    the application factory.\n+    \"\"\"\n+    app.teardown_appcontext(close_db)\n+    app.cli.add_command(init_db_command)\n\n@@ -0,0 +1,23 @@\n+import io\n+\n+from setuptools import find_packages, setup\n+\n+with io.open('README.rst', 'rt', encoding='utf8') as f:\n+    readme = f.read()\n+\n+setup(\n+    name='flaskr',\n+    version='1.0.0',\n+    url='http://flask.pocoo.org/docs/tutorial/',\n+    license='BSD',\n+    maintainer='Pallets team',\n+    maintainer_email='contact@palletsprojects.com',\n+    description='The basic blog app built in the Flask tutorial.',\n+    long_description=readme,\n+    packages=find_packages(),\n+    include_package_data=True,\n+    zip_safe=False,\n+    install_requires=[\n+        'flask',\n+    ],\n+)\n\n@@ -0,0 +1,64 @@\n+import os\n+import tempfile\n+\n+import pytest\n+from flaskr import create_app\n+from flaskr.db import get_db, init_db\n+\n+# read in SQL for populating test data\n+with open(os.path.join(os.path.dirname(__file__), 'data.sql'), 'rb') as f:\n+    _data_sql = f.read().decode('utf8')\n+\n+\n+@pytest.fixture\n+def app():\n+    \"\"\"Create and configure a new app instance for each test.\"\"\"\n+    # create a temporary file to isolate the database for each test\n+    db_fd, db_path = tempfile.mkstemp()\n+    # create the app with common test config\n+    app = create_app({\n+        'TESTING': True,\n+        'DATABASE': db_path,\n+    })\n+\n+    # create the database and load test data\n+    with app.app_context():\n+        init_db()\n+        get_db().executescript(_data_sql)\n+\n+    yield app\n+\n+    # close and remove the temporary database\n+    os.close(db_fd)\n+    os.unlink(db_path)\n+\n+\n+@pytest.fixture\n+def client(app):\n+    \"\"\"A test client for the app.\"\"\"\n+    return app.test_client()\n+\n+\n+@pytest.fixture\n+def runner(app):\n+    \"\"\"A test runner for the app's Click commands.\"\"\"\n+    return app.test_cli_runner()\n+\n+\n+class AuthActions(object):\n+    def __init__(self, client):\n+        self._client = client\n+\n+    def login(self, username='test', password='test'):\n+        return self._client.post(\n+            '/auth/login',\n+            data={'username': username, 'password': password}\n+        )\n+\n+    def logout(self):\n+        return self._client.get('/auth/logout')\n+\n+\n+@pytest.fixture\n+def auth(client):\n+    return AuthActions(client)\n\n@@ -0,0 +1,66 @@\n+import pytest\n+from flask import g, session\n+from flaskr.db import get_db\n+\n+\n+def test_register(client, app):\n+    # test that viewing the page renders without template errors\n+    assert client.get('/auth/register').status_code == 200\n+\n+    # test that successful registration redirects to the login page\n+    response = client.post(\n+        '/auth/register', data={'username': 'a', 'password': 'a'}\n+    )\n+    assert 'http://localhost/auth/login' == response.headers['Location']\n+\n+    # test that the user was inserted into the database\n+    with app.app_context():\n+        assert get_db().execute(\n+            \"select * from user where username = 'a'\",\n+        ).fetchone() is not None\n+\n+\n+@pytest.mark.parametrize(('username', 'password', 'message'), (\n+    ('', '', b'Username is required.'),\n+    ('a', '', b'Password is required.'),\n+    ('test', 'test', b'already registered'),\n+))\n+def test_register_validate_input(client, username, password, message):\n+    response = client.post(\n+        '/auth/register',\n+        data={'username': username, 'password': password}\n+    )\n+    assert message in response.data\n+\n+\n+def test_login(client, auth):\n+    # test that viewing the page renders without template errors\n+    assert client.get('/auth/login').status_code == 200\n+\n+    # test that successful login redirects to the index page\n+    response = auth.login()\n+    assert response.headers['Location'] == 'http://localhost/'\n+\n+    # login request set the user_id in the session\n+    # check that the user is loaded from the session\n+    with client:\n+        client.get('/')\n+        assert session['user_id'] == 1\n+        assert g.user['username'] == 'test'\n+\n+\n+@pytest.mark.parametrize(('username', 'password', 'message'), (\n+    ('a', 'test', b'Incorrect username.'),\n+    ('test', 'a', b'Incorrect password.'),\n+))\n+def test_login_validate_input(auth, username, password, message):\n+    response = auth.login(username, password)\n+    assert message in response.data\n+\n+\n+def test_logout(client, auth):\n+    auth.login()\n+\n+    with client:\n+        auth.logout()\n+        assert 'user_id' not in session\n\n@@ -0,0 +1,92 @@\n+import pytest\n+from flaskr.db import get_db\n+\n+\n+def test_index(client, auth):\n+    response = client.get('/')\n+    assert b\"Log In\" in response.data\n+    assert b\"Register\" in response.data\n+\n+    auth.login()\n+    response = client.get('/')\n+    assert b'test title' in response.data\n+    assert b'by test on 2018-01-01' in response.data\n+    assert b'test\\nbody' in response.data\n+    assert b'href=\"/1/update\"' in response.data\n+\n+\n+@pytest.mark.parametrize('path', (\n+    '/create',\n+    '/1/update',\n+    '/1/delete',\n+))\n+def test_login_required(client, path):\n+    response = client.post(path)\n+    assert response.headers['Location'] == 'http://localhost/auth/login'\n+\n+\n+def test_author_required(app, client, auth):\n+    # change the post author to another user\n+    with app.app_context():\n+        db = get_db()\n+        db.execute('UPDATE post SET author_id = 2 WHERE id = 1')\n+        db.commit()\n+\n+    auth.login()\n+    # current user can't modify other user's post\n+    assert client.post('/1/update').status_code == 403\n+    assert client.post('/1/delete').status_code == 403\n+    # current user doesn't see edit link\n+    assert b'href=\"/1/update\"' not in client.get('/').data\n+\n+\n+@pytest.mark.parametrize('path', (\n+    '/2/update',\n+    '/2/delete',\n+))\n+def test_exists_required(client, auth, path):\n+    auth.login()\n+    assert client.post(path).status_code == 404\n+\n+\n+def test_create(client, auth, app):\n+    auth.login()\n+    assert client.get('/create').status_code == 200\n+    client.post('/create', data={'title': 'created', 'body': ''})\n+\n+    with app.app_context():\n+        db = get_db()\n+        count = db.execute('SELECT COUNT(id) FROM post').fetchone()[0]\n+        assert count == 2\n+\n+\n+def test_update(client, auth, app):\n+    auth.login()\n+    assert client.get('/1/update').status_code == 200\n+    client.post('/1/update', data={'title': 'updated', 'body': ''})\n+\n+    with app.app_context():\n+        db = get_db()\n+        post = db.execute('SELECT * FROM post WHERE id = 1').fetchone()\n+        assert post['title'] == 'updated'\n+\n+\n+@pytest.mark.parametrize('path', (\n+    '/create',\n+    '/1/update',\n+))\n+def test_create_update_validate(client, auth, path):\n+    auth.login()\n+    response = client.post(path, data={'title': '', 'body': ''})\n+    assert b'Title is required.' in response.data\n+\n+\n+def test_delete(client, auth, app):\n+    auth.login()\n+    response = client.post('/1/delete')\n+    assert response.headers['Location'] == 'http://localhost/'\n+\n+    with app.app_context():\n+        db = get_db()\n+        post = db.execute('SELECT * FROM post WHERE id = 1').fetchone()\n+        assert post is None\n\n@@ -0,0 +1,28 @@\n+import sqlite3\n+\n+import pytest\n+from flaskr.db import get_db\n+\n+\n+def test_get_close_db(app):\n+    with app.app_context():\n+        db = get_db()\n+        assert db is get_db()\n+\n+    with pytest.raises(sqlite3.ProgrammingError) as e:\n+        db.execute('SELECT 1')\n+\n+    assert 'closed' in str(e)\n+\n+\n+def test_init_db_command(runner, monkeypatch):\n+    class Recorder(object):\n+        called = False\n+\n+    def fake_init_db():\n+        Recorder.called = True\n+\n+    monkeypatch.setattr('flaskr.db.init_db', fake_init_db)\n+    result = runner.invoke(args=['init-db'])\n+    assert 'Initialized' in result.output\n+    assert Recorder.called\n\n@@ -0,0 +1,12 @@\n+from flaskr import create_app\n+\n+\n+def test_config():\n+    \"\"\"Test create_app without passing test config.\"\"\"\n+    assert not create_app().testing\n+    assert create_app({'TESTING': True}).testing\n+\n+\n+def test_hello(client):\n+    response = client.get('/hello')\n+    assert response.data == b'Hello, World!'\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#171eb28c950969260863cacefa2f08d1590ce839", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 26 | Lines Deleted: 5 | Files Changed: 2 | Hunks: 6 | Methods Changed: 3 | Complexity Δ (Sum/Max): 4/2 | Churn Δ: 31 | Churn Cumulative: 2911 | Contributors (this commit): 44 | Commits (past 90d): 5 | Contributors (cumulative): 52 | DMM Complexity: 0.65\n\nDIFF:\n@@ -23,7 +23,7 @@ class JSONMixin(object):\n     .. versionadded:: 1.0\n     \"\"\"\n \n-    _cached_json = Ellipsis\n+    _cached_json = (Ellipsis, Ellipsis)\n \n     @property\n     def is_json(self):\n@@ -60,8 +60,8 @@ class JSONMixin(object):\n         :param silent: Silence parsing errors and return ``None`` instead.\n         :param cache: Store the parsed JSON to return for subsequent calls.\n         \"\"\"\n-        if cache and self._cached_json is not Ellipsis:\n-            return self._cached_json\n+        if cache and self._cached_json[silent] is not Ellipsis:\n+            return self._cached_json[silent]\n \n         if not (force or self.is_json):\n             return None\n@@ -77,11 +77,17 @@ class JSONMixin(object):\n         except ValueError as e:\n             if silent:\n                 rv = None\n+                if cache:\n+                    normal_rv, _ = self._cached_json\n+                    self._cached_json = (normal_rv, rv)\n             else:\n                 rv = self.on_json_loading_failed(e)\n-\n                 if cache:\n-            self._cached_json = rv\n+                    _, silent_rv = self._cached_json\n+                    self._cached_json = (rv, silent_rv)\n+        else:\n+            if cache:\n+                self._cached_json = (rv, rv)\n \n         return rv\n \n\n@@ -62,6 +62,21 @@ class TestJSON(object):\n             with pytest.raises(BadRequest):\n                 flask.request.get_json(silent=False, cache=False)\n \n+    def test_different_silent_on_bad_request(self, app):\n+        with app.test_request_context(\n+                '/', method='POST', data='malformed',\n+                content_type='application/json'):\n+            assert flask.request.get_json(silent=True) is None\n+            with pytest.raises(BadRequest):\n+                flask.request.get_json(silent=False)\n+\n+    def test_different_silent_on_normal_request(self, app):\n+        with app.test_request_context('/', method='POST', json={'foo': 'bar'}):\n+            silent_rv = flask.request.get_json(silent=True)\n+            normal_rv = flask.request.get_json(silent=False)\n+            assert silent_rv is normal_rv\n+            assert normal_rv['foo'] == 'bar'\n+\n     def test_post_empty_json_adds_exception_to_response_content_in_debug(self, app, client):\n         app.config['DEBUG'] = True\n         app.config['TRAP_BAD_REQUEST_ERRORS'] = False\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#ab4142215d836b0298fc47fa1e4b75408b9c37a0", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 78 | Lines Deleted: 26 | Files Changed: 3 | Hunks: 12 | Methods Changed: 6 | Complexity Δ (Sum/Max): 11/12 | Churn Δ: 104 | Churn Cumulative: 3042 | Contributors (this commit): 44 | Commits (past 90d): 8 | Contributors (cumulative): 54 | DMM Complexity: 0.0\n\nDIFF:\n@@ -6,7 +6,7 @@ flask.json\n :copyright: © 2010 by the Pallets team.\n :license: BSD, see LICENSE for more details.\n \"\"\"\n-\n+import codecs\n import io\n import uuid\n from datetime import date, datetime\n@@ -121,6 +121,49 @@ def _load_arg_defaults(kwargs):\n         kwargs.setdefault('cls', JSONDecoder)\n \n \n+def detect_encoding(data):\n+    \"\"\"Detect which UTF codec was used to encode the given bytes.\n+\n+    The latest JSON standard (:rfc:`8259`) suggests that only UTF-8 is\n+    accepted. Older documents allowed 8, 16, or 32. 16 and 32 can be big\n+    or little endian. Some editors or libraries may prepend a BOM.\n+\n+    :param data: Bytes in unknown UTF encoding.\n+    :return: UTF encoding name\n+    \"\"\"\n+    head = data[:4]\n+\n+    if head[:3] == codecs.BOM_UTF8:\n+        return 'utf-8-sig'\n+\n+    if b'\\x00' not in head:\n+        return 'utf-8'\n+\n+    if head in (codecs.BOM_UTF32_BE, codecs.BOM_UTF32_LE):\n+        return 'utf-32'\n+\n+    if head[:2] in (codecs.BOM_UTF16_BE, codecs.BOM_UTF16_LE):\n+        return 'utf-16'\n+\n+    if len(head) == 4:\n+        if head[:3] == b'\\x00\\x00\\x00':\n+            return 'utf-32-be'\n+\n+        if head[::2] == b'\\x00\\x00':\n+            return 'utf-16-be'\n+\n+        if head[1:] == b'\\x00\\x00\\x00':\n+            return 'utf-32-le'\n+\n+        if head[1::2] == b'\\x00\\x00':\n+            return 'utf-16-le'\n+\n+    if len(head) == 2:\n+        return 'utf-16-be' if head.startswith(b'\\x00') else 'utf-16-le'\n+\n+    return 'utf-8'\n+\n+\n def dumps(obj, **kwargs):\n     \"\"\"Serialize ``obj`` to a JSON formatted ``str`` by using the application's\n     configured encoder (:attr:`~flask.Flask.json_encoder`) if there is an\n@@ -155,7 +198,10 @@ def loads(s, **kwargs):\n     \"\"\"\n     _load_arg_defaults(kwargs)\n     if isinstance(s, bytes):\n-        s = s.decode(kwargs.pop('encoding', None) or 'utf-8')\n+        encoding = kwargs.pop('encoding', None)\n+        if encoding is None:\n+            encoding = detect_encoding(s)\n+        s = s.decode(encoding)\n     return _json.loads(s, **kwargs)\n \n \n\n@@ -50,15 +50,17 @@ class JSONMixin(object):\n         return self.get_data(cache=cache)\n \n     def get_json(self, force=False, silent=False, cache=True):\n-        \"\"\"Parse and return the data as JSON. If the mimetype does not indicate\n-        JSON (:mimetype:`application/json`, see :meth:`is_json`), this returns\n-        ``None`` unless ``force`` is true. If parsing fails,\n-        :meth:`on_json_loading_failed` is called and its return value is used\n-        as the return value.\n+        \"\"\"Parse and return the data as JSON. If the mimetype does not\n+        indicate JSON (:mimetype:`application/json`, see\n+        :meth:`is_json`), this returns ``None`` unless ``force`` is\n+        true. If parsing fails, :meth:`on_json_loading_failed` is called\n+        and its return value is used as the return value.\n \n         :param force: Ignore the mimetype and always try to parse JSON.\n-        :param silent: Silence parsing errors and return ``None`` instead.\n-        :param cache: Store the parsed JSON to return for subsequent calls.\n+        :param silent: Silence parsing errors and return ``None``\n+            instead.\n+        :param cache: Store the parsed JSON to return for subsequent\n+            calls.\n         \"\"\"\n         if cache and self._cached_json[silent] is not Ellipsis:\n             return self._cached_json[silent]\n@@ -66,14 +68,10 @@ class JSONMixin(object):\n         if not (force or self.is_json):\n             return None\n \n-        # We accept MIME charset against the specification as certain clients\n-        # have used this in the past. For responses, we assume that if the\n-        # charset is set then the data has been encoded correctly as well.\n-        charset = self.mimetype_params.get('charset')\n+        data = self._get_data_for_json(cache=cache)\n \n         try:\n-            data = self._get_data_for_json(cache=cache)\n-            rv = json.loads(data, encoding=charset)\n+            rv = json.loads(data)\n         except ValueError as e:\n             if silent:\n                 rv = None\n\n@@ -16,10 +16,13 @@ import uuid\n import pytest\n from werkzeug.datastructures import Range\n from werkzeug.exceptions import BadRequest, NotFound\n-from werkzeug.http import http_date, parse_cache_control_header, \\\n+from werkzeug.http import (\n+    http_date, parse_cache_control_header,\n     parse_options_header\n+)\n \n import flask\n+from flask import json\n from flask._compat import StringIO, text_type\n from flask.helpers import get_debug_flag, get_env\n \n@@ -55,6 +58,21 @@ class FixedOffset(datetime.tzinfo):\n \n \n class TestJSON(object):\n+    @pytest.mark.parametrize('value', (\n+        1, 't', True, False, None,\n+        [], [1, 2, 3],\n+        {}, {'foo': u'🐍'},\n+    ))\n+    @pytest.mark.parametrize('encoding', (\n+        'utf-8', 'utf-8-sig',\n+        'utf-16-le', 'utf-16-be', 'utf-16',\n+        'utf-32-le', 'utf-32-be', 'utf-32',\n+    ))\n+    def test_detect_encoding(self, value, encoding):\n+        data = json.dumps(value).encode(encoding)\n+        assert json.detect_encoding(data) == encoding\n+        assert json.loads(data) == value\n+\n     def test_ignore_cached_json(self, app):\n         with app.test_request_context('/', method='POST', data='malformed',\n                                       content_type='application/json'):\n@@ -121,16 +139,6 @@ class TestJSON(object):\n         rv = client.post('/json', data='\"foo\"', content_type='application/x+json')\n         assert rv.data == b'foo'\n \n-    def test_json_body_encoding(self, app, client):\n-\n-        @app.route('/')\n-        def index():\n-            return flask.request.get_json()\n-\n-        resp = client.get('/', data=u'\"Hällo Wörld\"'.encode('iso-8859-15'),\n-                          content_type='application/json; charset=iso-8859-15')\n-        assert resp.data == u'Hällo Wörld'.encode('utf-8')\n-\n     @pytest.mark.parametrize('test_value,expected', [(True, '\"\\\\u2603\"'), (False, u'\"\\u2603\"')])\n     def test_json_as_unicode(self, test_value, expected, app, app_ctx):\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
