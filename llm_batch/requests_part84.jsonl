{"custom_id": "requests#d8be2473d1a586a3673d728d49e10fd4286e3b0e", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 577 | Contributors (this commit): 12 | Commits (past 90d): 4 | Contributors (cumulative): 12 | DMM Complexity: None\n\nDIFF:\n@@ -42,8 +42,8 @@ is at <http://python-requests.org>.\n \"\"\"\n \n __title__ = 'requests'\n-__version__ = '2.5.1'\n-__build__ = 0x020501\n+__version__ = '2.5.2'\n+__build__ = 0x020502\n __author__ = 'Kenneth Reitz'\n __license__ = 'Apache 2.0'\n __copyright__ = 'Copyright 2015 Kenneth Reitz'\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#628474d62666e6691ec35677a918f5e97c35cda2", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 581 | Contributors (this commit): 12 | Commits (past 90d): 5 | Contributors (cumulative): 12 | DMM Complexity: None\n\nDIFF:\n@@ -42,8 +42,8 @@ is at <http://python-requests.org>.\n \"\"\"\n \n __title__ = 'requests'\n-__version__ = '2.5.2'\n-__build__ = 0x020502\n+__version__ = '2.5.3'\n+__build__ = 0x020503\n __author__ = 'Kenneth Reitz'\n __license__ = 'Apache 2.0'\n __copyright__ = 'Copyright 2015 Kenneth Reitz'\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#6ea3f2ada87177559188bfc9148af1b2384f38c6", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 4 | Lines Deleted: 3 | Files Changed: 1 | Hunks: 3 | Methods Changed: 2 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 7 | Churn Cumulative: 120 | Contributors (this commit): 3 | Commits (past 90d): 3 | Contributors (cumulative): 3 | DMM Complexity: 1.0\n\nDIFF:\n@@ -27,9 +27,10 @@ import sys\n \n class VendorAlias(object):\n \n-    def __init__(self):\n+    def __init__(self, package_name):\n+        self._package_name = package_name\n         self._vendor_name = __name__\n-        self._vendor_pkg = self._vendor_name + \".\"\n+        self._vendor_pkg = self._vendor_name + \".\" + self._package_name\n \n     def find_module(self, fullname, path=None):\n         if fullname.startswith(self._vendor_pkg):\n@@ -92,4 +93,4 @@ class VendorAlias(object):\n         return module\n \n \n-sys.meta_path.append(VendorAlias())\n+sys.meta_path.extend([VendorAlias(\"urllib3\"), VendorAlias(\"chardet\")])\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#9d8a57f2a29de97682d85d71ea98354ac8223442", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 7 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 7 | Churn Cumulative: 4958 | Contributors (this commit): 90 | Commits (past 90d): 8 | Contributors (cumulative): 90 | DMM Complexity: 1.0\n\nDIFF:\n@@ -1598,5 +1598,12 @@ def test_urllib3_retries():\n     with pytest.raises(RetryError):\n         s.get(httpbin('status/500'))\n \n+def test_vendor_aliases():\n+    from requests.packages import urllib3\n+    from requests.packages import chardet\n+\n+    with pytest.raises(ImportError):\n+        from requests.packages import webbrowser\n+\n if __name__ == '__main__':\n     unittest.main()\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#2669f0c0b1e98c9ea36d2614d48b07ad150ea276", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 15 | Lines Deleted: 4 | Files Changed: 1 | Hunks: 4 | Methods Changed: 3 | Complexity Δ (Sum/Max): 4/4 | Churn Δ: 19 | Churn Cumulative: 139 | Contributors (this commit): 3 | Commits (past 90d): 4 | Contributors (cumulative): 3 | DMM Complexity: 0.3\n\nDIFF:\n@@ -27,10 +27,13 @@ import sys\n \n class VendorAlias(object):\n \n-    def __init__(self, package_name):\n-        self._package_name = package_name\n+    def __init__(self, package_names):\n+        self._package_names = package_names\n         self._vendor_name = __name__\n-        self._vendor_pkg = self._vendor_name + \".\" + self._package_name\n+        self._vendor_pkg = self._vendor_name + \".\"\n+        self._vendor_pkgs = [\n+            self._vendor_pkg + name for name in self._package_names\n+        ]\n \n     def find_module(self, fullname, path=None):\n         if fullname.startswith(self._vendor_pkg):\n@@ -45,6 +48,14 @@ class VendorAlias(object):\n                 )\n             )\n \n+        if not (name == self._vendor_name or\n+                any(name.startswith(pkg) for pkg in self._vendor_pkgs)):\n+            raise ImportError(\n+                \"Cannot import %s, must be one of %s.\" % (\n+                    name, self._vendor_pkgs\n+                )\n+            )\n+\n         # Check to see if we already have this item in sys.modules, if we do\n         # then simply return that.\n         if name in sys.modules:\n@@ -93,4 +104,4 @@ class VendorAlias(object):\n         return module\n \n \n-sys.meta_path.extend([VendorAlias(\"urllib3\"), VendorAlias(\"chardet\")])\n+sys.meta_path.append(VendorAlias([\"urllib3\", \"chardet\"]))\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#11b12c3e07c542f9027b3cd3fac0d59573d28c2b", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 9252 | Contributors (this commit): 141 | Commits (past 90d): 3 | Contributors (cumulative): 141 | DMM Complexity: None\n\nDIFF:\n@@ -145,7 +145,7 @@ class RequestEncodingMixin(object):\n                 fp = v\n             if isinstance(fp, str):\n                 fp = StringIO(fp)\n-            if isinstance(fp, bytes):\n+            if isinstance(fp, (bytes, bytearray)):\n                 fp = BytesIO(fp)\n \n             rf = RequestField(name=k, data=fp.read(),\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#326f77d57c3fdb45bf1d263a8b4ecef781f39850", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 13 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 13 | Churn Cumulative: 4971 | Contributors (this commit): 91 | Commits (past 90d): 8 | Contributors (cumulative): 91 | DMM Complexity: 1.0\n\nDIFF:\n@@ -935,6 +935,19 @@ class RequestsTestCase(unittest.TestCase):\n \n         assert 'multipart/form-data' in p.headers['Content-Type']\n \n+    def test_can_send_bytes_bytearray_objects_with_files(self):\n+        # Test bytes:\n+        data = {'a': 0.0}\n+        files = {'b': b'foo'}\n+        r = requests.Request('POST', httpbin('post'), data=data, files=files)\n+        p = r.prepare()\n+        assert 'multipart/form-data' in p.headers['Content-Type']\n+        # Test bytearrays:\n+        files = {'b': bytearray(b'foo')}\n+        r = requests.Request('POST', httpbin('post'), data=data, files=files)\n+        p = r.prepare()\n+        assert 'multipart/form-data' in p.headers['Content-Type']\n+\n     def test_can_send_file_object_with_non_string_filename(self):\n         f = io.BytesIO()\n         f.name = 2\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#1887f32b17326fdaced7b57da349dc5ad7873435", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 4973 | Contributors (this commit): 91 | Commits (past 90d): 9 | Contributors (cumulative): 91 | DMM Complexity: None\n\nDIFF:\n@@ -937,7 +937,7 @@ class RequestsTestCase(unittest.TestCase):\n \n     def test_can_send_bytes_bytearray_objects_with_files(self):\n         # Test bytes:\n-        data = {'a': 0.0}\n+        data = {'a': 'this is a string'}\n         files = {'b': b'foo'}\n         r = requests.Request('POST', httpbin('post'), data=data, files=files)\n         p = r.prepare()\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#ec700a9a1338975cbd340001091aa2c6d98c8988", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 6 | Lines Deleted: 5 | Files Changed: 1 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): -1/0 | Churn Δ: 11 | Churn Cumulative: 9263 | Contributors (this commit): 141 | Commits (past 90d): 4 | Contributors (cumulative): 141 | DMM Complexity: None\n\nDIFF:\n@@ -143,12 +143,13 @@ class RequestEncodingMixin(object):\n             else:\n                 fn = guess_filename(v) or k\n                 fp = v\n-            if isinstance(fp, str):\n-                fp = StringIO(fp)\n-            if isinstance(fp, (bytes, bytearray)):\n-                fp = BytesIO(fp)\n \n-            rf = RequestField(name=k, data=fp.read(),\n+            if isinstance(fp, (str, bytes, bytearray)):\n+                fdata = fp\n+            else:\n+                fdata = fp.read()\n+\n+            rf = RequestField(name=k, data=fdata,\n                               filename=fn, headers=fh)\n             rf.make_multipart(content_type=ft)\n             new_fields.append(rf)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#62200cb07e76b0b6189bc64d1ca35d43514d0566", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 17 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 2 | Complexity Δ (Sum/Max): 3/3 | Churn Δ: 17 | Churn Cumulative: 4990 | Contributors (this commit): 92 | Commits (past 90d): 10 | Contributors (cumulative): 92 | DMM Complexity: 1.0\n\nDIFF:\n@@ -1052,6 +1052,23 @@ class RequestsTestCase(unittest.TestCase):\n         assert 'application/json' in r.request.headers['Content-Type']\n         assert {'life': 42} == r.json()['json']\n \n+    def test_response_iter_lines(self):\n+        r = requests.get(httpbin('stream/4'), stream=True)\n+        assert r.status_code == 200\n+\n+        it = r.iter_lines()\n+        next(it)\n+        assert len(list(it)) == 3\n+\n+    @pytest.mark.xfail\n+    def test_response_iter_lines_reentrant(self):\n+        \"\"\"Response.iter_lines() is not reentrant safe\"\"\"\n+        r = requests.get(httpbin('stream/4'), stream=True)\n+        assert r.status_code == 200\n+\n+        next(r.iter_lines())\n+        assert len(list(r.iter_lines())) == 3\n+\n \n class TestContentEncodingDetection(unittest.TestCase):\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#4497a26c376c60360d05644b574be0db3c887fe3", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 2 | Churn Cumulative: 9265 | Contributors (this commit): 142 | Commits (past 90d): 5 | Contributors (cumulative): 142 | DMM Complexity: None\n\nDIFF:\n@@ -688,6 +688,8 @@ class Response(object):\n         \"\"\"Iterates over the response data, one line at a time.  When\n         stream=True is set on the request, this avoids reading the\n         content at once into memory for large responses.\n+\n+        .. note:: This method is not reentrant safe.\n         \"\"\"\n \n         pending = None\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#a0790f37b762ec737b2a4a13c167aad2defa8575", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 27 | Lines Deleted: 12 | Files Changed: 4 | Hunks: 11 | Methods Changed: 5 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 39 | Churn Cumulative: 1797 | Contributors (this commit): 9 | Commits (past 90d): 9 | Contributors (cumulative): 23 | DMM Complexity: 1.0\n\nDIFF:\n@@ -4,7 +4,7 @@ urllib3 - Thread-safe connection pooling and re-using.\n \n __author__ = 'Andrey Petrov (andrey.petrov@shazow.net)'\n __license__ = 'MIT'\n-__version__ = 'dev'\n+__version__ = '1.10.2'\n \n \n from .connectionpool import (\n\n@@ -20,8 +20,6 @@ from .packages.six import iterkeys, itervalues, PY3\n __all__ = ['RecentlyUsedContainer', 'HTTPHeaderDict']\n \n \n-MULTIPLE_HEADERS_ALLOWED = frozenset(['cookie', 'set-cookie', 'set-cookie2'])\n-\n _Null = object()\n \n \n@@ -143,6 +141,9 @@ class HTTPHeaderDict(dict):\n     def __init__(self, headers=None, **kwargs):\n         dict.__init__(self)\n         if headers is not None:\n+            if isinstance(headers, HTTPHeaderDict):\n+                self._copy_from(headers)\n+            else:\n                 self.extend(headers)\n         if kwargs:\n             self.extend(kwargs)\n@@ -223,11 +224,8 @@ class HTTPHeaderDict(dict):\n                 vals.append(val)\n             else:\n                 # vals should be a tuple then, i.e. only one item so far\n-                if key_lower in MULTIPLE_HEADERS_ALLOWED:\n                 # Need to convert the tuple to list for further extension\n                 _dict_setitem(self, key_lower, [vals[0], vals[1], val])\n-                else:\n-                    _dict_setitem(self, key_lower, new_vals)\n \n     def extend(*args, **kwargs):\n         \"\"\"Generic import function for any type of header-like object.\n@@ -276,14 +274,17 @@ class HTTPHeaderDict(dict):\n     def __repr__(self):\n         return \"%s(%s)\" % (type(self).__name__, dict(self.itermerged()))\n \n-    def copy(self):\n-        clone = type(self)()\n-        for key in self:\n-            val = _dict_getitem(self, key)\n+    def _copy_from(self, other):\n+        for key in other:\n+            val = _dict_getitem(other, key)\n             if isinstance(val, list):\n                 # Don't need to convert tuples\n                 val = list(val)\n-            _dict_setitem(clone, key, val)\n+            _dict_setitem(self, key, val)\n+\n+    def copy(self):\n+        clone = type(self)()\n+        clone._copy_from(self)\n         return clone\n \n     def iteritems(self):\n\n@@ -157,3 +157,8 @@ class InsecureRequestWarning(SecurityWarning):\n class SystemTimeWarning(SecurityWarning):\n     \"Warned when system time is suspected to be wrong\"\n     pass\n+\n+\n+class InsecurePlatformWarning(SecurityWarning):\n+    \"Warned when certain SSL configuration is not available on a platform.\"\n+    pass\n\n@@ -1,7 +1,7 @@\n from binascii import hexlify, unhexlify\n from hashlib import md5, sha1, sha256\n \n-from ..exceptions import SSLError\n+from ..exceptions import SSLError, InsecurePlatformWarning\n \n \n SSLContext = None\n@@ -10,6 +10,7 @@ create_default_context = None\n \n import errno\n import ssl\n+import warnings\n \n try:  # Test for SSL features\n     from ssl import wrap_socket, CERT_NONE, PROTOCOL_SSLv23\n@@ -69,6 +70,14 @@ except ImportError:\n             self.ciphers = cipher_suite\n \n         def wrap_socket(self, socket, server_hostname=None):\n+            warnings.warn(\n+                'A true SSLContext object is not available. This prevents '\n+                'urllib3 from configuring SSL appropriately and may cause '\n+                'certain SSL connections to fail. For more information, see '\n+                'https://urllib3.readthedocs.org/en/latest/security.html'\n+                '#insecureplatformwarning.',\n+                InsecurePlatformWarning\n+            )\n             kwargs = {\n                 'keyfile': self.keyfile,\n                 'certfile': self.certfile,\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#c4bd6ea1501ee24a7e45d3e888f11d2a52e41469", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 2 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 907 | Contributors (this commit): 26 | Commits (past 90d): 1 | Contributors (cumulative): 26 | DMM Complexity: None\n\nDIFF:\n@@ -11,10 +11,10 @@ and maintain connections.\n import socket\n \n from .models import Response\n-from .packages.urllib3 import Retry\n from .packages.urllib3.poolmanager import PoolManager, proxy_from_url\n from .packages.urllib3.response import HTTPResponse\n from .packages.urllib3.util import Timeout as TimeoutSauce\n+from .packages.urllib3.util.retry import Retry\n from .compat import urlparse, basestring\n from .utils import (DEFAULT_CA_BUNDLE_PATH, get_encoding_from_headers,\n                     prepend_scheme_if_needed, get_auth_from_url, urldefragauth)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#1acc4992d42950b54a7be1b0dcacdaac35d32436", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 14 | Lines Deleted: 4 | Files Changed: 1 | Hunks: 5 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 18 | Churn Cumulative: 431 | Contributors (this commit): 16 | Commits (past 90d): 1 | Contributors (cumulative): 16 | DMM Complexity: None\n\nDIFF:\n@@ -1,10 +1,9 @@\n #!/usr/bin/env python\n \n import os\n+import re\n import sys\n \n-import requests\n-\n from codecs import open\n \n try:\n@@ -29,6 +28,18 @@ packages = [\n \n requires = []\n \n+version = ''\n+with open('requests/__init__.py', 'r') as fd:\n+    reg = re.compile(r'__version__\\s*=\\s*[\\'\"]([^\\'\"]*)[\\'\"]')\n+    for line in fd:\n+        m = reg.match(line)\n+        if m:\n+            version = m.group(1)\n+            break\n+\n+if not version:\n+    raise RuntimeError('Cannot find version information')\n+\n with open('README.rst', 'r', 'utf-8') as f:\n     readme = f.read()\n with open('HISTORY.rst', 'r', 'utf-8') as f:\n@@ -36,7 +47,7 @@ with open('HISTORY.rst', 'r', 'utf-8') as f:\n \n setup(\n     name='requests',\n-    version=requests.__version__,\n+    version=version,\n     description='Python HTTP for Humans.',\n     long_description=readme + '\\n\\n' + history,\n     author='Kenneth Reitz',\n@@ -60,7 +71,6 @@ setup(\n         'Programming Language :: Python :: 3',\n         'Programming Language :: Python :: 3.3',\n         'Programming Language :: Python :: 3.4'\n-\n     ),\n     extras_require={\n         'security': ['pyOpenSSL', 'ndg-httpsclient', 'pyasn1'],\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#3bd8afbff29e50b38f889b2f688785a669b9aafc", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 2 | Churn Cumulative: 2998 | Contributors (this commit): 59 | Commits (past 90d): 1 | Contributors (cumulative): 59 | DMM Complexity: None\n\nDIFF:\n@@ -171,7 +171,7 @@ class SessionRedirectMixin(object):\n             except KeyError:\n                 pass\n \n-            extract_cookies_to_jar(prepared_request._cookies, prepared_request, resp.raw)\n+            extract_cookies_to_jar(prepared_request._cookies, req, resp.raw)\n             prepared_request._cookies.update(self.cookies)\n             prepared_request.prepare_cookies(prepared_request._cookies)\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#573d460aa7f7883951adc1fe9f05a89130d84b09", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 23 | Lines Deleted: 8 | Files Changed: 1 | Hunks: 16 | Methods Changed: 8 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 31 | Churn Cumulative: 1143 | Contributors (this commit): 32 | Commits (past 90d): 1 | Contributors (cumulative): 32 | DMM Complexity: None\n\nDIFF:\n@@ -16,7 +16,6 @@ from . import sessions\n \n def request(method, url, **kwargs):\n     \"\"\"Constructs and sends a :class:`Request <Request>`.\n-    Returns :class:`Response <Response>` object.\n \n     :param method: method for the new :class:`Request` object.\n     :param url: URL for the new :class:`Request` object.\n@@ -37,6 +36,8 @@ def request(method, url, **kwargs):\n     :param verify: (optional) if ``True``, the SSL cert will be verified. A CA_BUNDLE path can also be provided.\n     :param stream: (optional) if ``False``, the response content will be immediately downloaded.\n     :param cert: (optional) if String, path to ssl client cert file (.pem). If Tuple, ('cert', 'key') pair.\n+    :return: :class:`Response <Response>` object\n+    :rtype: requests.Response\n \n     Usage::\n \n@@ -55,10 +56,12 @@ def request(method, url, **kwargs):\n \n \n def get(url, **kwargs):\n-    \"\"\"Sends a GET request. Returns :class:`Response` object.\n+    \"\"\"Sends a GET request.\n \n     :param url: URL for the new :class:`Request` object.\n     :param \\*\\*kwargs: Optional arguments that ``request`` takes.\n+    :return: :class:`Response <Response>` object\n+    :rtype: requests.Response\n     \"\"\"\n \n     kwargs.setdefault('allow_redirects', True)\n@@ -66,10 +69,12 @@ def get(url, **kwargs):\n \n \n def options(url, **kwargs):\n-    \"\"\"Sends a OPTIONS request. Returns :class:`Response` object.\n+    \"\"\"Sends a OPTIONS request.\n \n     :param url: URL for the new :class:`Request` object.\n     :param \\*\\*kwargs: Optional arguments that ``request`` takes.\n+    :return: :class:`Response <Response>` object\n+    :rtype: requests.Response\n     \"\"\"\n \n     kwargs.setdefault('allow_redirects', True)\n@@ -77,10 +82,12 @@ def options(url, **kwargs):\n \n \n def head(url, **kwargs):\n-    \"\"\"Sends a HEAD request. Returns :class:`Response` object.\n+    \"\"\"Sends a HEAD request.\n \n     :param url: URL for the new :class:`Request` object.\n     :param \\*\\*kwargs: Optional arguments that ``request`` takes.\n+    :return: :class:`Response <Response>` object\n+    :rtype: requests.Response\n     \"\"\"\n \n     kwargs.setdefault('allow_redirects', False)\n@@ -88,44 +95,52 @@ def head(url, **kwargs):\n \n \n def post(url, data=None, json=None, **kwargs):\n-    \"\"\"Sends a POST request. Returns :class:`Response` object.\n+    \"\"\"Sends a POST request.\n \n     :param url: URL for the new :class:`Request` object.\n     :param data: (optional) Dictionary, bytes, or file-like object to send in the body of the :class:`Request`.\n     :param json: (optional) json data to send in the body of the :class:`Request`.\n     :param \\*\\*kwargs: Optional arguments that ``request`` takes.\n+    :return: :class:`Response <Response>` object\n+    :rtype: requests.Response\n     \"\"\"\n \n     return request('post', url, data=data, json=json, **kwargs)\n \n \n def put(url, data=None, **kwargs):\n-    \"\"\"Sends a PUT request. Returns :class:`Response` object.\n+    \"\"\"Sends a PUT request.\n \n     :param url: URL for the new :class:`Request` object.\n     :param data: (optional) Dictionary, bytes, or file-like object to send in the body of the :class:`Request`.\n     :param \\*\\*kwargs: Optional arguments that ``request`` takes.\n+    :return: :class:`Response <Response>` object\n+    :rtype: requests.Response\n     \"\"\"\n \n     return request('put', url, data=data, **kwargs)\n \n \n def patch(url, data=None, **kwargs):\n-    \"\"\"Sends a PATCH request. Returns :class:`Response` object.\n+    \"\"\"Sends a PATCH request.\n \n     :param url: URL for the new :class:`Request` object.\n     :param data: (optional) Dictionary, bytes, or file-like object to send in the body of the :class:`Request`.\n     :param \\*\\*kwargs: Optional arguments that ``request`` takes.\n+    :return: :class:`Response <Response>` object\n+    :rtype: requests.Response\n     \"\"\"\n \n     return request('patch', url,  data=data, **kwargs)\n \n \n def delete(url, **kwargs):\n-    \"\"\"Sends a DELETE request. Returns :class:`Response` object.\n+    \"\"\"Sends a DELETE request.\n \n     :param url: URL for the new :class:`Request` object.\n     :param \\*\\*kwargs: Optional arguments that ``request`` takes.\n+    :return: :class:`Response <Response>` object\n+    :rtype: requests.Response\n     \"\"\"\n \n     return request('delete', url, **kwargs)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#f7c85685a8e484715649c13bacae6adc7f5f3908", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 3 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 3 | Churn Cumulative: 3001 | Contributors (this commit): 59 | Commits (past 90d): 2 | Contributors (cumulative): 59 | DMM Complexity: None\n\nDIFF:\n@@ -171,6 +171,9 @@ class SessionRedirectMixin(object):\n             except KeyError:\n                 pass\n \n+            # Extract any cookies sent on the response to the cookiejar\n+            # in the new request. Because we've mutated our copied prepared\n+            # request, use the old one that we haven't yet touched.\n             extract_cookies_to_jar(prepared_request._cookies, req, resp.raw)\n             prepared_request._cookies.update(self.cookies)\n             prepared_request.prepare_cookies(prepared_request._cookies)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#80a3e87bf39f05a7b255cd757d84bb46e23c3a86", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 583 | Contributors (this commit): 12 | Commits (past 90d): 5 | Contributors (cumulative): 12 | DMM Complexity: None\n\nDIFF:\n@@ -42,7 +42,7 @@ is at <http://python-requests.org>.\n \"\"\"\n \n __title__ = 'requests'\n-__version__ = '2.5.3'\n+__version__ = '2.6.0'\n __build__ = 0x020503\n __author__ = 'Kenneth Reitz'\n __license__ = 'Apache 2.0'\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#54791d1970531cdb44d60e2f0abc186933f1a7ed", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 5 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): -1/0 | Churn Δ: 6 | Churn Cumulative: 9271 | Contributors (this commit): 142 | Commits (past 90d): 4 | Contributors (cumulative): 142 | DMM Complexity: None\n\nDIFF:\n@@ -573,7 +573,11 @@ class Response(object):\n         self.cookies = cookiejar_from_dict({})\n \n         #: The amount of time elapsed between sending the request\n-        #: and the arrival of the response (as a timedelta)\n+        #: and the arrival of the response (as a timedelta).\n+        #: This property specifically measures the time taken between sending\n+        #: the first byte of the request and finishing parsing the headers. It\n+        #: is therefore unaffected by consuming the response content or the\n+        #: value of the ``stream`` keyword argument.\n         self.elapsed = datetime.timedelta(0)\n \n         #: The :class:`PreparedRequest <PreparedRequest>` object to which this\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#1b5317ea088b26e386c53e6a4f55558915467bb5", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 6 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 6 | Churn Cumulative: 3242 | Contributors (this commit): 16 | Commits (past 90d): 4 | Contributors (cumulative): 16 | DMM Complexity: 0.0\n\nDIFF:\n@@ -311,8 +311,14 @@ class HTTPConnectionPool(ConnectionPool, RequestMethods):\n         # Catch possible read timeouts thrown as SSL errors. If not the\n         # case, rethrow the original. We need to do this because of:\n         # http://bugs.python.org/issue10272\n+        # Wrapped in a try/catch because python 2.7 throws TypeError,\n+        # SSLError doesn't override __str__\n+        try:\n             if 'timed out' in str(err) or 'did not complete (read)' in str(err):  # Python 2.6\n                 raise ReadTimeoutError(self, url, \"Read timed out. (read timeout=%s)\" % timeout_value)\n+        except TypeError:\n+            raise err\n+\n \n     def _make_request(self, conn, method, url, timeout=_Default,\n                       **httplib_request_kw):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#b2ce5be9d049a73e0adb475156435b854355f234", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 0 | Lines Deleted: 6 | Files Changed: 1 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): -1/0 | Churn Δ: 6 | Churn Cumulative: 3248 | Contributors (this commit): 17 | Commits (past 90d): 5 | Contributors (cumulative): 17 | DMM Complexity: 1.0\n\nDIFF:\n@@ -311,14 +311,8 @@ class HTTPConnectionPool(ConnectionPool, RequestMethods):\n         # Catch possible read timeouts thrown as SSL errors. If not the\n         # case, rethrow the original. We need to do this because of:\n         # http://bugs.python.org/issue10272\n-        # Wrapped in a try/catch because python 2.7 throws TypeError,\n-        # SSLError doesn't override __str__\n-        try:\n         if 'timed out' in str(err) or 'did not complete (read)' in str(err):  # Python 2.6\n             raise ReadTimeoutError(self, url, \"Read timed out. (read timeout=%s)\" % timeout_value)\n-        except TypeError:\n-            raise err\n-\n \n     def _make_request(self, conn, method, url, timeout=_Default,\n                       **httplib_request_kw):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#ce234d53a5b8d829eca4f27857e6ea2625575fe8", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 6 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 8 | Churn Cumulative: 439 | Contributors (this commit): 17 | Commits (past 90d): 2 | Contributors (cumulative): 17 | DMM Complexity: None\n\nDIFF:\n@@ -30,12 +30,8 @@ requires = []\n \n version = ''\n with open('requests/__init__.py', 'r') as fd:\n-    reg = re.compile(r'__version__\\s*=\\s*[\\'\"]([^\\'\"]*)[\\'\"]')\n-    for line in fd:\n-        m = reg.match(line)\n-        if m:\n-            version = m.group(1)\n-            break\n+    version = re.search(r'__version__\\s*=\\s*[\\'\"]([^\\'\"]*)[\\'\"]',\n+                         fd.read()).group(1)\n \n if not version:\n     raise RuntimeError('Cannot find version information')\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#1145fe64a54d5d1f813b96bf2923aff954267554", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 443 | Contributors (this commit): 17 | Commits (past 90d): 3 | Contributors (cumulative): 17 | DMM Complexity: None\n\nDIFF:\n@@ -30,8 +30,8 @@ requires = []\n \n version = ''\n with open('requests/__init__.py', 'r') as fd:\n-    version = re.search(r'__version__\\s*=\\s*[\\'\"]([^\\'\"]*)[\\'\"]',\n-                         fd.read()).group(1)\n+    version = re.search(r'^__version__\\s*=\\s*[\\'\"]([^\\'\"]*)[\\'\"]',\n+                        fd.read(), re.MULTILINE).group(1)\n \n if not version:\n     raise RuntimeError('Cannot find version information')\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#587eb193ddbc2dfc10c2bdbf1718cd2267a0e77f", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 3 | Lines Deleted: 11 | Files Changed: 1 | Hunks: 4 | Methods Changed: 3 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 14 | Churn Cumulative: 3015 | Contributors (this commit): 60 | Commits (past 90d): 3 | Contributors (cumulative): 60 | DMM Complexity: 1.0\n\nDIFF:\n@@ -90,7 +90,7 @@ def merge_hooks(request_hooks, session_hooks, dict_class=OrderedDict):\n \n class SessionRedirectMixin(object):\n     def resolve_redirects(self, resp, req, stream=False, timeout=None,\n-                          verify=True, cert=None, proxies=None):\n+                          verify=True, cert=None, proxies=None, **adapter_kwargs):\n         \"\"\"Receives a Response. Returns a generator of Responses.\"\"\"\n \n         i = 0\n@@ -193,6 +193,7 @@ class SessionRedirectMixin(object):\n                 cert=cert,\n                 proxies=proxies,\n                 allow_redirects=False,\n+                **adapter_kwargs\n             )\n \n             extract_cookies_to_jar(self.cookies, prepared_request, resp.raw)\n@@ -560,10 +561,6 @@ class Session(SessionRedirectMixin):\n         # Set up variables needed for resolve_redirects and dispatching of hooks\n         allow_redirects = kwargs.pop('allow_redirects', True)\n         stream = kwargs.get('stream')\n-        timeout = kwargs.get('timeout')\n-        verify = kwargs.get('verify')\n-        cert = kwargs.get('cert')\n-        proxies = kwargs.get('proxies')\n         hooks = request.hooks\n \n         # Get the appropriate adapter to use\n@@ -591,12 +588,7 @@ class Session(SessionRedirectMixin):\n         extract_cookies_to_jar(self.cookies, request, r.raw)\n \n         # Redirect resolving generator.\n-        gen = self.resolve_redirects(r, request,\n-            stream=stream,\n-            timeout=timeout,\n-            verify=verify,\n-            cert=cert,\n-            proxies=proxies)\n+        gen = self.resolve_redirects(r, request, **kwargs)\n \n         # Resolve redirects if allowed.\n         history = [resp for resp in gen] if allow_redirects else []\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#845e8f943f47ed3b88e19ff8351e6f248a9d6ab9", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 8 | Lines Deleted: 5 | Files Changed: 1 | Hunks: 7 | Methods Changed: 4 | Complexity Δ (Sum/Max): -1/0 | Churn Δ: 13 | Churn Cumulative: 1287 | Contributors (this commit): 34 | Commits (past 90d): 3 | Contributors (cumulative): 34 | DMM Complexity: 1.0\n\nDIFF:\n@@ -11,6 +11,7 @@ import os\n import re\n import time\n import hashlib\n+import threading\n \n from base64 import b64encode\n \n@@ -67,7 +68,7 @@ class HTTPDigestAuth(AuthBase):\n         self.nonce_count = 0\n         self.chal = {}\n         self.pos = None\n-        self.num_401_calls = 1\n+        self.num_401_calls = threading.local()\n \n     def build_digest_header(self, method, url):\n \n@@ -157,7 +158,7 @@ class HTTPDigestAuth(AuthBase):\n     def handle_redirect(self, r, **kwargs):\n         \"\"\"Reset num_401_calls counter on redirects.\"\"\"\n         if r.is_redirect:\n-            self.num_401_calls = 1\n+            self.num_401_calls.value = 1\n \n     def handle_401(self, r, **kwargs):\n         \"\"\"Takes the given response and tries digest-auth, if needed.\"\"\"\n@@ -166,12 +167,12 @@ class HTTPDigestAuth(AuthBase):\n             # Rewind the file position indicator of the body to where\n             # it was to resend the request.\n             r.request.body.seek(self.pos)\n-        num_401_calls = getattr(self, 'num_401_calls', 1)\n+        num_401_calls = getattr(self.num_401_calls, 'value', 1)\n         s_auth = r.headers.get('www-authenticate', '')\n \n         if 'digest' in s_auth.lower() and num_401_calls < 2:\n \n-            self.num_401_calls += 1\n+            self.num_401_calls.value += 1\n             pat = re.compile(r'digest ', flags=re.IGNORECASE)\n             self.chal = parse_dict_header(pat.sub('', s_auth, count=1))\n \n@@ -191,7 +192,7 @@ class HTTPDigestAuth(AuthBase):\n \n             return _r\n \n-        self.num_401_calls = 1\n+        self.num_401_calls.value = 1\n         return r\n \n     def __call__(self, r):\n@@ -208,4 +209,6 @@ class HTTPDigestAuth(AuthBase):\n             self.pos = None\n         r.register_hook('response', self.handle_401)\n         r.register_hook('response', self.handle_redirect)\n+        self.num_401_calls.value = 1\n+\n         return r\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#e65360dbaf252a136a011adf639e5dce880a2412", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 1289 | Contributors (this commit): 34 | Commits (past 90d): 4 | Contributors (cumulative): 34 | DMM Complexity: None\n\nDIFF:\n@@ -167,7 +167,7 @@ class HTTPDigestAuth(AuthBase):\n             # Rewind the file position indicator of the body to where\n             # it was to resend the request.\n             r.request.body.seek(self.pos)\n-        num_401_calls = getattr(self.num_401_calls, 'value', 1)\n+        num_401_calls = self.num_401_calls.value\n         s_auth = r.headers.get('www-authenticate', '')\n \n         if 'digest' in s_auth.lower() and num_401_calls < 2:\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#e8d9bc55bc9fae82e3ba934d3f7a93e94a72d094", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 38 | Lines Deleted: 27 | Files Changed: 1 | Hunks: 16 | Methods Changed: 6 | Complexity Δ (Sum/Max): 2/2 | Churn Δ: 65 | Churn Cumulative: 1354 | Contributors (this commit): 34 | Commits (past 90d): 5 | Contributors (cumulative): 34 | DMM Complexity: 1.0\n\nDIFF:\n@@ -64,19 +64,24 @@ class HTTPDigestAuth(AuthBase):\n     def __init__(self, username, password):\n         self.username = username\n         self.password = password\n-        self.last_nonce = ''\n-        self.nonce_count = 0\n-        self.chal = {}\n-        self.pos = None\n-        self.num_401_calls = threading.local()\n+        # Keep state in per-thread local storage\n+        self.tl = threading.local()\n+        self.init_per_thread_state()\n+\n+    def init_per_thread_state(self):\n+        self.tl.last_nonce = ''\n+        self.tl.nonce_count = 0\n+        self.tl.chal = {}\n+        self.tl.pos = None\n+        self.tl.num_401_calls = None\n \n     def build_digest_header(self, method, url):\n \n-        realm = self.chal['realm']\n-        nonce = self.chal['nonce']\n-        qop = self.chal.get('qop')\n-        algorithm = self.chal.get('algorithm')\n-        opaque = self.chal.get('opaque')\n+        realm = self.tl.chal['realm']\n+        nonce = self.tl.chal['nonce']\n+        qop = self.tl.chal.get('qop')\n+        algorithm = self.tl.chal.get('algorithm')\n+        opaque = self.tl.chal.get('opaque')\n \n         if algorithm is None:\n             _algorithm = 'MD5'\n@@ -114,12 +119,12 @@ class HTTPDigestAuth(AuthBase):\n         HA1 = hash_utf8(A1)\n         HA2 = hash_utf8(A2)\n \n-        if nonce == self.last_nonce:\n-            self.nonce_count += 1\n+        if nonce == self.tl.last_nonce:\n+            self.tl.nonce_count += 1\n         else:\n-            self.nonce_count = 1\n-        ncvalue = '%08x' % self.nonce_count\n-        s = str(self.nonce_count).encode('utf-8')\n+            self.tl.nonce_count = 1\n+        ncvalue = '%08x' % self.tl.nonce_count\n+        s = str(self.tl.nonce_count).encode('utf-8')\n         s += nonce.encode('utf-8')\n         s += time.ctime().encode('utf-8')\n         s += os.urandom(8)\n@@ -139,7 +144,7 @@ class HTTPDigestAuth(AuthBase):\n             # XXX handle auth-int.\n             return None\n \n-        self.last_nonce = nonce\n+        self.tl.last_nonce = nonce\n \n         # XXX should the partial digests be encoded too?\n         base = 'username=\"%s\", realm=\"%s\", nonce=\"%s\", uri=\"%s\", ' \\\n@@ -158,23 +163,23 @@ class HTTPDigestAuth(AuthBase):\n     def handle_redirect(self, r, **kwargs):\n         \"\"\"Reset num_401_calls counter on redirects.\"\"\"\n         if r.is_redirect:\n-            self.num_401_calls.value = 1\n+            self.tl.num_401_calls = 1\n \n     def handle_401(self, r, **kwargs):\n         \"\"\"Takes the given response and tries digest-auth, if needed.\"\"\"\n \n-        if self.pos is not None:\n+        if self.tl.pos is not None:\n             # Rewind the file position indicator of the body to where\n             # it was to resend the request.\n-            r.request.body.seek(self.pos)\n-        num_401_calls = self.num_401_calls.value\n+            r.request.body.seek(self.tl.pos)\n+        num_401_calls = self.tl.num_401_calls\n         s_auth = r.headers.get('www-authenticate', '')\n \n         if 'digest' in s_auth.lower() and num_401_calls < 2:\n \n-            self.num_401_calls.value += 1\n+            self.tl.num_401_calls += 1\n             pat = re.compile(r'digest ', flags=re.IGNORECASE)\n-            self.chal = parse_dict_header(pat.sub('', s_auth, count=1))\n+            self.tl.chal = parse_dict_header(pat.sub('', s_auth, count=1))\n \n             # Consume content and release the original connection\n             # to allow our new request to reuse the same one.\n@@ -192,23 +197,29 @@ class HTTPDigestAuth(AuthBase):\n \n             return _r\n \n-        self.num_401_calls.value = 1\n+        self.tl.num_401_calls = 1\n         return r\n \n     def __call__(self, r):\n+        # When called from a thread other than the one that __init__'ed us\n+        # per-thread state may be missing: initialize it if that's the case.\n+        try:\n+            self.tl.last_nonce\n+        except AttributeError:\n+            self.init_per_thread_state()\n         # If we have a saved nonce, skip the 401\n-        if self.last_nonce:\n+        if self.tl.last_nonce:\n             r.headers['Authorization'] = self.build_digest_header(r.method, r.url)\n         try:\n-            self.pos = r.body.tell()\n+            self.tl.pos = r.body.tell()\n         except AttributeError:\n             # In the case of HTTPDigestAuth being reused and the body of\n             # the previous request was a file-like object, pos has the\n             # file position of the previous body. Ensure it's set to\n             # None.\n-            self.pos = None\n+            self.tl.pos = None\n         r.register_hook('response', self.handle_401)\n         r.register_hook('response', self.handle_redirect)\n-        self.num_401_calls.value = 1\n+        self.tl.num_401_calls = 1\n \n         return r\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#142e24de7b456d09b88bbbe0b9c978755254ca95", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 20 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 2 | Methods Changed: 2 | Complexity Δ (Sum/Max): 3/3 | Churn Δ: 20 | Churn Cumulative: 5010 | Contributors (this commit): 93 | Commits (past 90d): 8 | Contributors (cumulative): 93 | DMM Complexity: 1.0\n\nDIFF:\n@@ -32,6 +32,11 @@ try:\n except ImportError:\n     import io as StringIO\n \n+try:\n+    from multiprocessing.pool import ThreadPool\n+except ImportError:\n+    ThreadPool = None\n+\n if is_py3:\n     def u(s):\n         return s\n@@ -411,6 +416,21 @@ class RequestsTestCase(unittest.TestCase):\n         r = requests.get(url, auth=auth)\n         assert '\"auth\"' in r.request.headers['Authorization']\n \n+    def test_DIGESTAUTH_THREADED(self):\n+\n+        auth = HTTPDigestAuth('user', 'pass')\n+        url = httpbin('digest-auth', 'auth', 'user', 'pass')\n+        session = requests.Session()\n+        session.auth=auth\n+\n+        def do_request(i):\n+            r = session.get(url)\n+            assert '\"auth\"' in r.request.headers['Authorization']\n+            return 1\n+        if ThreadPool is not None:\n+            pool = ThreadPool(processes=50)\n+            pool.map(do_request, range(100))\n+\n     def test_POSTBIN_GET_POST_FILES(self):\n \n         url = httpbin('post')\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#36dea434065fa174105ac220152d94f7a39827b5", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 4 | Lines Deleted: 6 | Files Changed: 1 | Hunks: 3 | Methods Changed: 3 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 10 | Churn Cumulative: 1364 | Contributors (this commit): 34 | Commits (past 90d): 6 | Contributors (cumulative): 34 | DMM Complexity: 0.0\n\nDIFF:\n@@ -66,9 +66,11 @@ class HTTPDigestAuth(AuthBase):\n         self.password = password\n         # Keep state in per-thread local storage\n         self.tl = threading.local()\n-        self.init_per_thread_state()\n \n     def init_per_thread_state(self):\n+        # Ensure state is initialized just once per-thread\n+        if not hasattr(self.tl, 'init'):\n+            self.tl.init = True\n             self.tl.last_nonce = ''\n             self.tl.nonce_count = 0\n             self.tl.chal = {}\n@@ -201,11 +203,7 @@ class HTTPDigestAuth(AuthBase):\n         return r\n \n     def __call__(self, r):\n-        # When called from a thread other than the one that __init__'ed us\n-        # per-thread state may be missing: initialize it if that's the case.\n-        try:\n-            self.tl.last_nonce\n-        except AttributeError:\n+        # Initialize per-thread state, if needed\n         self.init_per_thread_state()\n         # If we have a saved nonce, skip the 401\n         if self.tl.last_nonce:\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#5a69137ac871c38f4597b574e93de07d9ff9655f", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 30 | Lines Deleted: 31 | Files Changed: 1 | Hunks: 17 | Methods Changed: 6 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 61 | Churn Cumulative: 1425 | Contributors (this commit): 34 | Commits (past 90d): 7 | Contributors (cumulative): 34 | DMM Complexity: 0.0\n\nDIFF:\n@@ -65,25 +65,25 @@ class HTTPDigestAuth(AuthBase):\n         self.username = username\n         self.password = password\n         # Keep state in per-thread local storage\n-        self.tl = threading.local()\n+        self._thread_local = threading.local()\n \n     def init_per_thread_state(self):\n         # Ensure state is initialized just once per-thread\n-        if not hasattr(self.tl, 'init'):\n-            self.tl.init = True\n-            self.tl.last_nonce = ''\n-            self.tl.nonce_count = 0\n-            self.tl.chal = {}\n-            self.tl.pos = None\n-            self.tl.num_401_calls = None\n+        if not hasattr(self._thread_local, 'init'):\n+            self._thread_local.init = True\n+            self._thread_local.last_nonce = ''\n+            self._thread_local.nonce_count = 0\n+            self._thread_local.chal = {}\n+            self._thread_local.pos = None\n+            self._thread_local.num_401_calls = None\n \n     def build_digest_header(self, method, url):\n \n-        realm = self.tl.chal['realm']\n-        nonce = self.tl.chal['nonce']\n-        qop = self.tl.chal.get('qop')\n-        algorithm = self.tl.chal.get('algorithm')\n-        opaque = self.tl.chal.get('opaque')\n+        realm = self._thread_local.chal['realm']\n+        nonce = self._thread_local.chal['nonce']\n+        qop = self._thread_local.chal.get('qop')\n+        algorithm = self._thread_local.chal.get('algorithm')\n+        opaque = self._thread_local.chal.get('opaque')\n \n         if algorithm is None:\n             _algorithm = 'MD5'\n@@ -121,12 +121,12 @@ class HTTPDigestAuth(AuthBase):\n         HA1 = hash_utf8(A1)\n         HA2 = hash_utf8(A2)\n \n-        if nonce == self.tl.last_nonce:\n-            self.tl.nonce_count += 1\n+        if nonce == self._thread_local.last_nonce:\n+            self._thread_local.nonce_count += 1\n         else:\n-            self.tl.nonce_count = 1\n-        ncvalue = '%08x' % self.tl.nonce_count\n-        s = str(self.tl.nonce_count).encode('utf-8')\n+            self._thread_local.nonce_count = 1\n+        ncvalue = '%08x' % self._thread_local.nonce_count\n+        s = str(self._thread_local.nonce_count).encode('utf-8')\n         s += nonce.encode('utf-8')\n         s += time.ctime().encode('utf-8')\n         s += os.urandom(8)\n@@ -146,7 +146,7 @@ class HTTPDigestAuth(AuthBase):\n             # XXX handle auth-int.\n             return None\n \n-        self.tl.last_nonce = nonce\n+        self._thread_local.last_nonce = nonce\n \n         # XXX should the partial digests be encoded too?\n         base = 'username=\"%s\", realm=\"%s\", nonce=\"%s\", uri=\"%s\", ' \\\n@@ -165,23 +165,22 @@ class HTTPDigestAuth(AuthBase):\n     def handle_redirect(self, r, **kwargs):\n         \"\"\"Reset num_401_calls counter on redirects.\"\"\"\n         if r.is_redirect:\n-            self.tl.num_401_calls = 1\n+            self._thread_local.num_401_calls = 1\n \n     def handle_401(self, r, **kwargs):\n         \"\"\"Takes the given response and tries digest-auth, if needed.\"\"\"\n \n-        if self.tl.pos is not None:\n+        if self._thread_local.pos is not None:\n             # Rewind the file position indicator of the body to where\n             # it was to resend the request.\n-            r.request.body.seek(self.tl.pos)\n-        num_401_calls = self.tl.num_401_calls\n+            r.request.body.seek(self._thread_local.pos)\n         s_auth = r.headers.get('www-authenticate', '')\n \n-        if 'digest' in s_auth.lower() and num_401_calls < 2:\n+        if 'digest' in s_auth.lower() and self._thread_local.num_401_calls < 2:\n \n-            self.tl.num_401_calls += 1\n+            self._thread_local.num_401_calls += 1\n             pat = re.compile(r'digest ', flags=re.IGNORECASE)\n-            self.tl.chal = parse_dict_header(pat.sub('', s_auth, count=1))\n+            self._thread_local.chal = parse_dict_header(pat.sub('', s_auth, count=1))\n \n             # Consume content and release the original connection\n             # to allow our new request to reuse the same one.\n@@ -199,25 +198,25 @@ class HTTPDigestAuth(AuthBase):\n \n             return _r\n \n-        self.tl.num_401_calls = 1\n+        self._thread_local.num_401_calls = 1\n         return r\n \n     def __call__(self, r):\n         # Initialize per-thread state, if needed\n         self.init_per_thread_state()\n         # If we have a saved nonce, skip the 401\n-        if self.tl.last_nonce:\n+        if self._thread_local.last_nonce:\n             r.headers['Authorization'] = self.build_digest_header(r.method, r.url)\n         try:\n-            self.tl.pos = r.body.tell()\n+            self._thread_local.pos = r.body.tell()\n         except AttributeError:\n             # In the case of HTTPDigestAuth being reused and the body of\n             # the previous request was a file-like object, pos has the\n             # file position of the previous body. Ensure it's set to\n             # None.\n-            self.tl.pos = None\n+            self._thread_local.pos = None\n         r.register_hook('response', self.handle_401)\n         r.register_hook('response', self.handle_redirect)\n-        self.tl.num_401_calls = 1\n+        self._thread_local.num_401_calls = 1\n \n         return r\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
