{"custom_id": "keras#f7afc73780ffe89abd8dd08ebd815cbcf56720ee", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 33 | Lines Deleted: 2 | Files Changed: 2 | Hunks: 7 | Methods Changed: 4 | Complexity Δ (Sum/Max): 2/1 | Churn Δ: 35 | Churn Cumulative: 4437 | Contributors (this commit): 72 | Commits (past 90d): 14 | Contributors (cumulative): 93 | DMM Complexity: 0.8695652173913043\n\nDIFF:\n@@ -547,25 +547,31 @@ class RemoteMonitor(Callback):\n     Events are sent to `root + '/publish/epoch/end/'` by default. Calls are\n     HTTP POST, with a `data` argument which is a\n     JSON-encoded dictionary of event data.\n+    If send_as_json is set to True, the content type of the request will be application/json.\n+    Otherwise the serialized JSON will be send within a form\n \n     # Arguments\n         root: String; root url of the target server.\n         path: String; path relative to `root` to which the events will be sent.\n-        field: String; JSON field under which the data will be stored.\n+        field: String; JSON field under which the data will be stored. The field is used only if the payload is sent\n+        within a form (i.e. send_as_json is set to False).\n         headers: Dictionary; optional custom HTTP headers.\n+        send_as_json: Boolean; whether the request should be send as application/json.\n     \"\"\"\n \n     def __init__(self,\n                  root='http://localhost:9000',\n                  path='/publish/epoch/end/',\n                  field='data',\n-                 headers=None):\n+                 headers=None,\n+                 send_as_json=False):\n         super(RemoteMonitor, self).__init__()\n \n         self.root = root\n         self.path = path\n         self.field = field\n         self.headers = headers\n+        self.send_as_json = send_as_json\n \n     def on_epoch_end(self, epoch, logs=None):\n         if requests is None:\n@@ -580,6 +586,9 @@ class RemoteMonitor(Callback):\n             else:\n                 send[k] = v\n         try:\n+            if self.send_as_json:\n+                requests.post(self.root + self.path, json=send, headers=self.headers)\n+            else:\n                 requests.post(self.root + self.path,\n                               {self.field: json.dumps(send)},\n                               headers=self.headers)\n\n@@ -844,5 +844,27 @@ def tests_RemoteMonitor():\n                   validation_data=(X_test, y_test), callbacks=cbks, epochs=1)\n \n \n+@keras_test\n+def tests_RemoteMonitorWithJsonPayload():\n+    (X_train, y_train), (X_test, y_test) = get_test_data(num_train=train_samples,\n+                                                         num_test=test_samples,\n+                                                         input_shape=(input_dim,),\n+                                                         classification=True,\n+                                                         num_classes=num_classes)\n+    y_test = np_utils.to_categorical(y_test)\n+    y_train = np_utils.to_categorical(y_train)\n+    model = Sequential()\n+    model.add(Dense(num_hidden, input_dim=input_dim, activation='relu'))\n+    model.add(Dense(num_classes, activation='softmax'))\n+    model.compile(loss='categorical_crossentropy',\n+                  optimizer='rmsprop',\n+                  metrics=['accuracy'])\n+    cbks = [callbacks.RemoteMonitor(send_as_json=True)]\n+\n+    with patch('requests.post'):\n+        model.fit(X_train, y_train, batch_size=batch_size,\n+                  validation_data=(X_test, y_test), callbacks=cbks, epochs=1)\n+\n+\n if __name__ == '__main__':\n     pytest.main([__file__])\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "keras#99c61ebd50912ec0981a11116b03265cb7cfaa3f", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 688 | Contributors (this commit): 18 | Commits (past 90d): 6 | Contributors (cumulative): 18 | DMM Complexity: None\n\nDIFF:\n@@ -270,7 +270,7 @@ class TimeseriesGenerator(Sequence):\n             be centered around `data[i]`, `data[i+s]`, `data[i+2*s]`, etc.\n         start_index, end_index: Data points earlier than `start_index`\n             or later than `end_index` will not be used in the output sequences.\n-            This is seful to reserve part of the data for test or validation.\n+            This is useful to reserve part of the data for test or validation.\n         shuffle: Whether to shuffle output samples,\n             or instead draw them in chronological order.\n         reverse: Boolean: if `true`, timesteps in each output sample will be\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "keras#e85d3dc15072f774736eb0e3c216eb0b7da1db9a", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 3241 | Contributors (this commit): 52 | Commits (past 90d): 20 | Contributors (cumulative): 52 | DMM Complexity: None\n\nDIFF:\n@@ -425,7 +425,7 @@ class ImageDataGenerator(object):\n         rotation_range: Int. Degree range for random rotations.\n         width_shift_range: Float (fraction of total width). Range for random horizontal shifts.\n         height_shift_range: Float (fraction of total height). Range for random vertical shifts.\n-        shear_range: Float. Shear Intensity (Shear angle in counter-clockwise direction as radians)\n+        shear_range: Float. Shear Intensity (Shear angle in counter-clockwise direction in degrees)\n         zoom_range: Float or [lower, upper]. Range for random zoom. If a float, `[lower, upper] = [1-zoom_range, 1+zoom_range]`.\n         channel_shift_range: Float. Range for random channel shifts.\n         fill_mode: One of {\"constant\", \"nearest\", \"reflect\" or \"wrap\"}.  Default is 'nearest'.\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "keras#e2a10a5e6e156a45e946c4d08db7133f997c1f9a", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 28 | Lines Deleted: 2 | Files Changed: 2 | Hunks: 2 | Methods Changed: 2 | Complexity Δ (Sum/Max): 2/2 | Churn Δ: 30 | Churn Cumulative: 13305 | Contributors (this commit): 113 | Commits (past 90d): 34 | Contributors (cumulative): 132 | DMM Complexity: 1.0\n\nDIFF:\n@@ -3942,8 +3942,8 @@ def ctc_batch_cost(y_true, y_pred, input_length, label_length):\n         Tensor with shape (samples,1) containing the\n             CTC loss of each element.\n     \"\"\"\n-    label_length = tf.to_int32(tf.squeeze(label_length))\n-    input_length = tf.to_int32(tf.squeeze(input_length))\n+    label_length = tf.to_int32(tf.squeeze(label_length, axis=-1))\n+    input_length = tf.to_int32(tf.squeeze(input_length, axis=-1))\n     sparse_labels = tf.to_int32(ctc_label_dense_to_sparse(y_true, label_length))\n \n     y_pred = tf.log(tf.transpose(y_pred, perm=[1, 0, 2]) + epsilon())\n\n@@ -1475,6 +1475,32 @@ class TestBackend(object):\n         res = K.eval(K.ctc_batch_cost(k_labels, k_inputs, k_input_lens, k_label_lens))\n         assert_allclose(res[0, :] if K.backend() == 'theano' else res[:, 0], ref, atol=1e-05)\n \n+        # test when batch_size = 1, that is, one sample only\n+        # get only first sample from above test case\n+        if K.backend() == 'theano':\n+            ref = [1.73308]\n+        else:\n+            ref = [3.34211]\n+\n+        input_lens = np.expand_dims(np.asarray([5]), 1)\n+        label_lens = np.expand_dims(np.asarray([5]), 1)\n+\n+        labels = np.asarray([[0, 1, 2, 1, 0]])\n+        inputs = np.asarray(\n+            [[[0.633766, 0.221185, 0.0917319, 0.0129757, 0.0142857, 0.0260553],\n+              [0.111121, 0.588392, 0.278779, 0.0055756, 0.00569609, 0.010436],\n+              [0.0357786, 0.633813, 0.321418, 0.00249248, 0.00272882, 0.0037688],\n+              [0.0663296, 0.643849, 0.280111, 0.00283995, 0.0035545, 0.00331533],\n+              [0.458235, 0.396634, 0.123377, 0.00648837, 0.00903441, 0.00623107]]],\n+            dtype=np.float32)\n+\n+        k_labels = K.variable(labels, dtype=\"int32\")\n+        k_inputs = K.variable(inputs, dtype=\"float32\")\n+        k_input_lens = K.variable(input_lens, dtype=\"int32\")\n+        k_label_lens = K.variable(label_lens, dtype=\"int32\")\n+        res = K.eval(K.ctc_batch_cost(k_labels, k_inputs, k_input_lens, k_label_lens))\n+        assert_allclose(res[0, :] if K.backend() == 'theano' else res[:, 0], ref, atol=1e-05)\n+\n     '''only tensorflow tested, need special handle'''\n \n     def test_ctc_decode_greedy(self):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "keras#1ee31ee45cc3386cb94bc1f5014f2687da1f63f6", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 101 | Lines Deleted: 4 | Files Changed: 2 | Hunks: 8 | Methods Changed: 4 | Complexity Δ (Sum/Max): 8/6 | Churn Δ: 105 | Churn Cumulative: 10912 | Contributors (this commit): 91 | Commits (past 90d): 14 | Contributors (cumulative): 99 | DMM Complexity: 0.7571428571428571\n\nDIFF:\n@@ -46,7 +46,9 @@ def save_model(model, filepath, overwrite=True, include_optimizer=True):\n \n     # Arguments\n         model: Keras model instance to be saved.\n-        filepath: String, path where to save the model.\n+        filepath: one of the following:\n+            - string, path where to save the model, or\n+            - h5py.File object where to save the model\n         overwrite: Whether we should overwrite any existing\n             model at the target location, or instead\n             ask the user with a manual prompt.\n@@ -97,13 +99,20 @@ def save_model(model, filepath, overwrite=True, include_optimizer=True):\n \n     from . import __version__ as keras_version\n \n+    if not isinstance(filepath, h5py.File):\n         # If file exists and should not be overwritten.\n         if not overwrite and os.path.isfile(filepath):\n             proceed = ask_to_proceed_with_overwrite(filepath)\n             if not proceed:\n                 return\n \n-    with h5py.File(filepath, mode='w') as f:\n+        f = h5py.File(filepath, mode='w')\n+        opened_new_file = True\n+    else:\n+        f = filepath\n+        opened_new_file = False\n+\n+    try:\n         f.attrs['keras_version'] = str(keras_version).encode('utf8')\n         f.attrs['backend'] = K.backend().encode('utf8')\n         f.attrs['model_config'] = json.dumps({\n@@ -179,13 +188,18 @@ def save_model(model, filepath, overwrite=True, include_optimizer=True):\n                         else:\n                             param_dset[:] = val\n         f.flush()\n+    finally:\n+        if opened_new_file:\n+            f.close()\n \n \n def load_model(filepath, custom_objects=None, compile=True):\n     \"\"\"Loads a model saved via `save_model`.\n \n     # Arguments\n-        filepath: String, path to the saved model.\n+        filepath: one of the following:\n+            - string, path to the saved model, or\n+            - h5py.File object from which to load the model\n         custom_objects: Optional dictionary mapping names\n             (strings) to custom classes or functions to be\n             considered during deserialization.\n@@ -234,7 +248,14 @@ def load_model(filepath, custom_objects=None, compile=True):\n         if obj in custom_objects:\n             return custom_objects[obj]\n         return obj\n-    with h5py.File(filepath, mode='r') as f:\n+\n+    opened_new_file = not isinstance(filepath, h5py.File)\n+    if opened_new_file:\n+        f = h5py.File(filepath, mode='r')\n+    else:\n+        f = filepath\n+\n+    try:\n         # instantiate model\n         model_config = f.attrs.get('model_config')\n         if model_config is None:\n@@ -293,6 +314,9 @@ def load_model(filepath, custom_objects=None, compile=True):\n                               'starting with a freshly initialized '\n                               'optimizer.')\n         return model\n+    finally:\n+        if opened_new_file:\n+            f.close()\n \n \n def model_from_config(config, custom_objects=None):\n\n@@ -104,6 +104,79 @@ def test_functional_model_saving():\n     assert_allclose(out, out2, atol=1e-05)\n \n \n+@keras_test\n+def test_model_saving_to_pre_created_h5py_file():\n+    inputs = Input(shape=(3,))\n+    x = Dense(2)(inputs)\n+    outputs = Dense(3)(x)\n+\n+    model = Model(inputs, outputs)\n+    model.compile(loss=losses.MSE,\n+                  optimizer=optimizers.Adam(),\n+                  metrics=[metrics.categorical_accuracy])\n+    x = np.random.random((1, 3))\n+    y = np.random.random((1, 3))\n+    model.train_on_batch(x, y)\n+\n+    out = model.predict(x)\n+    _, fname = tempfile.mkstemp('.h5')\n+    with h5py.File(fname, mode='r+') as h5file:\n+        save_model(model, h5file)\n+        loaded_model = load_model(h5file)\n+        out2 = loaded_model.predict(x)\n+    assert_allclose(out, out2, atol=1e-05)\n+\n+    # test non-default options in h5\n+    with h5py.File('does not matter', driver='core',\n+                   backing_store=False) as h5file:\n+        save_model(model, h5file)\n+        loaded_model = load_model(h5file)\n+        out2 = loaded_model.predict(x)\n+    assert_allclose(out, out2, atol=1e-05)\n+\n+\n+@keras_test\n+def test_model_saving_to_binary_stream():\n+    inputs = Input(shape=(3,))\n+    x = Dense(2)(inputs)\n+    outputs = Dense(3)(x)\n+\n+    model = Model(inputs, outputs)\n+    model.compile(loss=losses.MSE,\n+                  optimizer=optimizers.Adam(),\n+                  metrics=[metrics.categorical_accuracy])\n+    x = np.random.random((1, 3))\n+    y = np.random.random((1, 3))\n+    model.train_on_batch(x, y)\n+\n+    out = model.predict(x)\n+    _, fname = tempfile.mkstemp('.h5')\n+    with h5py.File(fname, mode='r+') as h5file:\n+        save_model(model, h5file)\n+        loaded_model = load_model(h5file)\n+        out2 = loaded_model.predict(x)\n+    assert_allclose(out, out2, atol=1e-05)\n+\n+    # Save the model to an in-memory-only h5 file.\n+    with h5py.File('does not matter', driver='core',\n+                   backing_store=False) as h5file:\n+        save_model(model, h5file)\n+        h5file.flush()  # Very important! Otherwise you get all zeroes below.\n+        binary_data = h5file.fid.get_file_image()\n+\n+        # Make sure the binary data is correct by saving it to a file manually\n+        # and then loading it the usual way.\n+        with open(fname, 'wb') as raw_file:\n+            raw_file.write(binary_data)\n+\n+    # Load the manually-saved binary data, and make sure the model is intact.\n+    with h5py.File(fname, mode='r') as h5file:\n+        loaded_model = load_model(h5file)\n+        out2 = loaded_model.predict(x)\n+\n+    assert_allclose(out, out2, atol=1e-05)\n+\n+\n @keras_test\n def test_saving_multiple_metrics_outputs():\n     inputs = Input(shape=(5,))\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "keras#aedad3986200b825d94f847d52bd6b81f0419a06", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 83 | Lines Deleted: 4 | Files Changed: 3 | Hunks: 8 | Methods Changed: 9 | Complexity Δ (Sum/Max): 8/3 | Churn Δ: 87 | Churn Cumulative: 15607 | Contributors (this commit): 87 | Commits (past 90d): 16 | Contributors (cumulative): 98 | DMM Complexity: 0.7288135593220338\n\nDIFF:\n@@ -1108,6 +1108,9 @@ def reshape(x, shape):\n def permute_dimensions(x, pattern):\n     dims = len(int_shape(x))\n     num_dynamic_axis = _get_dynamic_axis_num(x)\n+    if isinstance(pattern, list):\n+        current_layout = [i for i in range(dims)]\n+    else:\n         current_layout = tuple([i for i in range(dims)])\n \n     if num_dynamic_axis > 0 and pattern[:num_dynamic_axis] != current_layout[:num_dynamic_axis]:\n\n@@ -22,6 +22,7 @@ from ..utils.generic_utils import func_dump\n from ..utils.generic_utils import func_load\n from ..utils.generic_utils import deserialize_keras_object\n from ..utils.generic_utils import has_arg\n+from ..utils import conv_utils\n from ..legacy import interfaces\n \n \n@@ -465,6 +466,13 @@ class Permute(Layer):\n class Flatten(Layer):\n     \"\"\"Flattens the input. Does not affect the batch size.\n \n+    # Arguments\n+        data_format: A string, one of `channels_last` (default) or `channels_first`.\n+          The ordering of the dimensions in the inputs.\n+          `channels_last` corresponds to inputs with shape\n+          `(batch, ..., channels)` while `channels_first` corresponds to\n+          inputs with shape `(batch, channels, ...)`.\n+\n     # Example\n \n     ```python\n@@ -479,9 +487,10 @@ class Flatten(Layer):\n     ```\n     \"\"\"\n \n-    def __init__(self, **kwargs):\n+    def __init__(self, data_format='channels_last', **kwargs):\n         super(Flatten, self).__init__(**kwargs)\n         self.input_spec = InputSpec(min_ndim=3)\n+        self.data_format = conv_utils.normalize_data_format(data_format)\n \n     def compute_output_shape(self, input_shape):\n         if not all(input_shape[1:]):\n@@ -494,8 +503,21 @@ class Flatten(Layer):\n         return (input_shape[0], np.prod(input_shape[1:]))\n \n     def call(self, inputs):\n+        if self.data_format == 'channels_first':\n+            # Ensure works for any dim\n+            permutation = [0]\n+            permutation.extend([i for i in\n+                                range(2, K.ndim(inputs))])\n+            permutation.append(1)\n+            inputs = K.permute_dimensions(inputs, permutation)\n+\n         return K.batch_flatten(inputs)\n \n+    def get_config(self):\n+        config = {'data_format': self.data_format}\n+        base_config = super(Flatten, self).get_config()\n+        return dict(list(base_config.items()) + list(config.items()))\n+\n \n class RepeatVector(Layer):\n     \"\"\"Repeats the input n times.\n\n@@ -97,9 +97,63 @@ def test_permute():\n \n @keras_test\n def test_flatten():\n-    layer_test(layers.Flatten,\n-               kwargs={},\n-               input_shape=(3, 2, 4))\n+\n+    def test_4d():\n+        np_inp_channels_last = np.arange(24, dtype='float32').reshape(\n+                                        (1, 4, 3, 2))\n+\n+        np_output_cl = layer_test(layers.Flatten,\n+                                  kwargs={'data_format':\n+                                          'channels_last'},\n+                                  input_data=np_inp_channels_last)\n+\n+        np_inp_channels_first = np.transpose(np_inp_channels_last,\n+                                             [0, 3, 1, 2])\n+\n+        np_output_cf = layer_test(layers.Flatten,\n+                                  kwargs={'data_format':\n+                                          'channels_first'},\n+                                  input_data=np_inp_channels_first,\n+                                  expected_output=np_output_cl)\n+\n+    def test_3d():\n+        np_inp_channels_last = np.arange(12, dtype='float32').reshape(\n+            (1, 4, 3))\n+\n+        np_output_cl = layer_test(layers.Flatten,\n+                                  kwargs={'data_format':\n+                                          'channels_last'},\n+                                  input_data=np_inp_channels_last)\n+\n+        np_inp_channels_first = np.transpose(np_inp_channels_last,\n+                                             [0, 2, 1])\n+\n+        np_output_cf = layer_test(layers.Flatten,\n+                                  kwargs={'data_format':\n+                                          'channels_first'},\n+                                  input_data=np_inp_channels_first,\n+                                  expected_output=np_output_cl)\n+\n+    def test_5d():\n+        np_inp_channels_last = np.arange(120, dtype='float32').reshape(\n+            (1, 5, 4, 3, 2))\n+\n+        np_output_cl = layer_test(layers.Flatten,\n+                                  kwargs={'data_format':\n+                                          'channels_last'},\n+                                  input_data=np_inp_channels_last)\n+\n+        np_inp_channels_first = np.transpose(np_inp_channels_last,\n+                                             [0, 4, 1, 2, 3])\n+\n+        np_output_cf = layer_test(layers.Flatten,\n+                                  kwargs={'data_format':\n+                                          'channels_first'},\n+                                  input_data=np_inp_channels_first,\n+                                  expected_output=np_output_cl)\n+    test_3d()\n+    test_4d()\n+    test_5d()\n \n \n @keras_test\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "keras#416783156c1b07f28131c493a55a93936b5fe163", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 11 | Lines Deleted: 1 | Files Changed: 2 | Hunks: 5 | Methods Changed: 3 | Complexity Δ (Sum/Max): 2/2 | Churn Δ: 12 | Churn Cumulative: 8184 | Contributors (this commit): 88 | Commits (past 90d): 33 | Contributors (cumulative): 108 | DMM Complexity: 0.16666666666666666\n\nDIFF:\n@@ -2282,7 +2282,8 @@ class Model(Container):\n     def evaluate_generator(self, generator, steps=None,\n                            max_queue_size=10,\n                            workers=1,\n-                           use_multiprocessing=False):\n+                           use_multiprocessing=False,\n+                           verbose=0):\n         \"\"\"Evaluates the model on a data generator.\n \n         The generator should return the same kind of data\n@@ -2310,6 +2311,7 @@ class Model(Container):\n                 non picklable arguments to the generator\n                 as they can't be passed\n                 easily to children processes.\n+            verbose: verbosity mode, 0 or 1.\n \n         # Returns\n             Scalar test loss (if the model has a single output and no metrics)\n@@ -2372,6 +2374,9 @@ class Model(Container):\n                 else:\n                     output_generator = generator\n \n+            if verbose == 1:\n+                progbar = Progbar(target=steps)\n+\n             while steps_done < steps:\n                 generator_output = next(output_generator)\n                 if not hasattr(generator_output, '__len__'):\n@@ -2406,6 +2411,8 @@ class Model(Container):\n \n                 steps_done += 1\n                 batch_sizes.append(batch_size)\n+                if verbose == 1:\n+                    progbar.update(steps_done)\n \n         finally:\n             if enqueuer is not None:\n\n@@ -288,6 +288,9 @@ def test_model_methods():\n     out = model.evaluate([input_a_np, input_b_np], [output_a_np, output_b_np], batch_size=4)\n     out = model.predict([input_a_np, input_b_np], batch_size=4)\n \n+    # enable verbose for evaluate_generator\n+    out = model.evaluate_generator(gen_data(4), steps=3, verbose=1)\n+\n     # empty batch\n     with pytest.raises(ValueError):\n         def gen_data():\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "keras#886c021e00c9a12e719371e234bd6df4e01a703f", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 46 | Lines Deleted: 11 | Files Changed: 1 | Hunks: 7 | Methods Changed: 2 | Complexity Δ (Sum/Max): 10/10 | Churn Δ: 57 | Churn Cumulative: 1496 | Contributors (this commit): 24 | Commits (past 90d): 7 | Contributors (cumulative): 24 | DMM Complexity: 0.55\n\nDIFF:\n@@ -102,6 +102,14 @@ EXCLUDE = {\n     'get_variable_shape',\n }\n \n+\n+# For each class to document, it is possible to:\n+# 1) Document only the class: [classA, classB, ...]\n+# 2) Document all its methods: [classA, (classB, \"*\")]\n+# 3) Choose which methods to document (methods listed as strings):\n+# [classA, (classB, [\"method1\", \"method2\", ...]), ...]\n+# 4) Choose which methods to document (methods listed as qualified names):\n+# [classA, (classB, [module.classB.method1, module.classB.method2, ...]), ...]\n PAGES = [\n     {\n         'page': 'models/sequential.md',\n@@ -270,7 +278,7 @@ PAGES = [\n             preprocessing.image.random_brightness,\n         ],\n         'classes': [\n-            preprocessing.image.ImageDataGenerator,\n+            (preprocessing.image.ImageDataGenerator, \"*\")\n         ]\n     },\n     {\n@@ -532,6 +540,30 @@ def read_file(path):\n         return f.read()\n \n \n+def collect_class_methods(cls, methods):\n+    if isinstance(methods, (list, tuple)):\n+        return [getattr(cls, m) if isinstance(m, str) else m for m in methods]\n+    methods = []\n+    for _, method in inspect.getmembers(cls, predicate=inspect.isroutine):\n+        if method.__name__[0] == '_' or method.__name__ in EXCLUDE:\n+            continue\n+        methods.append(method)\n+    return methods\n+\n+\n+def render_function(function, blocks, method=True):\n+    subblocks = []\n+    signature = get_function_signature(function, method=method)\n+    signature = signature.replace(function.__module__ + '.', '')\n+    level = 4 if method else 3\n+    subblocks.append('#' * level + function.__name__ + '\\n')\n+    subblocks.append(code_snippet(signature))\n+    docstring = function.__doc__\n+    if docstring:\n+        subblocks.append(process_docstring(docstring))\n+    blocks.append('\\n\\n'.join(subblocks))\n+\n+\n readme = read_file('../README.md')\n index = read_file('templates/index.md')\n index = index.replace('{{autogenerated}}', readme[readme.find('##'):])\n@@ -556,16 +588,27 @@ for page_data in PAGES:\n         module_classes.sort(key=lambda x: id(x))\n         classes += module_classes\n \n-    for cls in classes:\n+    for element in classes:\n+        if not isinstance(element, (list, tuple)):\n+            element = (element, [])\n+        cls = element[0]\n         subblocks = []\n         signature = get_class_signature(cls)\n         subblocks.append('<span style=\"float:right;\">' +\n                          class_to_source_link(cls) + '</span>')\n+        if element[1]:\n+            subblocks.append('## ' + cls.__name__ + ' class\\n')\n+        else:\n             subblocks.append('### ' + cls.__name__ + '\\n')\n         subblocks.append(code_snippet(signature))\n         docstring = cls.__doc__\n         if docstring:\n             subblocks.append(process_docstring(docstring))\n+        methods = collect_class_methods(cls, element[1])\n+        if methods:\n+            subblocks.append('### ' + cls.__name__ + ' methods\\n')\n+            for method in methods:\n+                render_function(method, subblocks, method=True)\n         blocks.append('\\n'.join(subblocks))\n \n     functions = page_data.get('functions', [])\n@@ -584,15 +627,7 @@ for page_data in PAGES:\n         functions += module_functions\n \n     for function in functions:\n-        subblocks = []\n-        signature = get_function_signature(function, method=False)\n-        signature = signature.replace(function.__module__ + '.', '')\n-        subblocks.append('### ' + function.__name__ + '\\n')\n-        subblocks.append(code_snippet(signature))\n-        docstring = function.__doc__\n-        if docstring:\n-            subblocks.append(process_docstring(docstring))\n-        blocks.append('\\n\\n'.join(subblocks))\n+        render_function(function, blocks, method=False)\n \n     if not blocks:\n         raise RuntimeError('Found no content for page ' +\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "keras#1e82a712b551fa7c4ae5aeb9f723b3bfe4a4e3d4", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 10 | Lines Deleted: 17 | Files Changed: 1 | Hunks: 7 | Methods Changed: 2 | Complexity Δ (Sum/Max): -1/0 | Churn Δ: 27 | Churn Cumulative: 1523 | Contributors (this commit): 24 | Commits (past 90d): 8 | Contributors (cumulative): 24 | DMM Complexity: None\n\nDIFF:\n@@ -269,16 +269,8 @@ PAGES = [\n     },\n     {\n         'page': 'preprocessing/image.md',\n-        'functions': [\n-            preprocessing.image.random_rotation,\n-            preprocessing.image.random_shift,\n-            preprocessing.image.random_shear,\n-            preprocessing.image.random_zoom,\n-            preprocessing.image.random_channel_shift,\n-            preprocessing.image.random_brightness,\n-        ],\n         'classes': [\n-            (preprocessing.image.ImageDataGenerator, \"*\")\n+            (preprocessing.image.ImageDataGenerator, '*')\n         ]\n     },\n     {\n@@ -551,17 +543,17 @@ def collect_class_methods(cls, methods):\n     return methods\n \n \n-def render_function(function, blocks, method=True):\n+def render_function(function, method=True):\n     subblocks = []\n     signature = get_function_signature(function, method=method)\n     signature = signature.replace(function.__module__ + '.', '')\n-    level = 4 if method else 3\n-    subblocks.append('#' * level + function.__name__ + '\\n')\n+    level = 3\n+    subblocks.append('#' * level + ' ' + function.__name__ + '\\n')\n     subblocks.append(code_snippet(signature))\n     docstring = function.__doc__\n     if docstring:\n         subblocks.append(process_docstring(docstring))\n-    blocks.append('\\n\\n'.join(subblocks))\n+    return '\\n\\n'.join(subblocks)\n \n \n readme = read_file('../README.md')\n@@ -606,9 +598,10 @@ for page_data in PAGES:\n             subblocks.append(process_docstring(docstring))\n         methods = collect_class_methods(cls, element[1])\n         if methods:\n-            subblocks.append('### ' + cls.__name__ + ' methods\\n')\n-            for method in methods:\n-                render_function(method, subblocks, method=True)\n+            subblocks.append('\\n---')\n+            subblocks.append('## ' + cls.__name__ + ' methods\\n')\n+            subblocks.append('\\n---\\n'.join(\n+                [render_function(method, method=True) for method in methods]))\n         blocks.append('\\n'.join(subblocks))\n \n     functions = page_data.get('functions', [])\n@@ -627,7 +620,7 @@ for page_data in PAGES:\n         functions += module_functions\n \n     for function in functions:\n-        render_function(function, blocks, method=False)\n+        blocks.append(render_function(function, method=False))\n \n     if not blocks:\n         raise RuntimeError('Found no content for page ' +\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "keras#ef13db05731bfd53fa0a877637c99c1734be933b", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 10 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 10 | Churn Cumulative: 3251 | Contributors (this commit): 53 | Commits (past 90d): 20 | Contributors (cumulative): 53 | DMM Complexity: None\n\nDIFF:\n@@ -680,6 +680,8 @@ class ImageDataGenerator(object):\n                save_prefix: str (default: `''`). Prefix to use for filenames of saved pictures\n                 (only relevant if `save_to_dir` is set).\n                 save_format: one of \"png\", \"jpeg\" (only relevant if `save_to_dir` is set). Default: \"png\".\n+               subset: Subset of data (`\"training\"` or `\"validation\"`) if\n+                `validation_split` is set in `ImageDataGenerator`.\n \n         # Returns\n             An Iterator yielding tuples of `(x, y)` where `x` is a numpy array of image data and\n@@ -739,6 +741,14 @@ class ImageDataGenerator(object):\n                 save_prefix: str. Prefix to use for filenames of saved pictures (only relevant if `save_to_dir` is set).\n                 save_format: one of \"png\", \"jpeg\" (only relevant if `save_to_dir` is set). Default: \"png\".\n                 follow_links: whether to follow symlinks inside class subdirectories (default: False).\n+                subset: Subset of data (`\"training\"` or `\"validation\"`) if\n+                 `validation_split` is set in `ImageDataGenerator`.\n+                interpolation: Interpolation method used to resample the image if the\n+                 target size is different from that of the loaded image.\n+                 Supported methods are `\"nearest\"`, `\"bilinear\"`, and `\"bicubic\"`.\n+                 If PIL version 1.1.3 or newer is installed, `\"lanczos\"` is also\n+                 supported. If PIL version 3.4.0 or newer is installed, `\"box\"` and\n+                 `\"hamming\"` are also supported. By default, `\"nearest\"` is used.\n \n         # Returns\n             A DirectoryIterator yielding tuples of `(x, y)` where `x` is a numpy array of image data and\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "keras#b13326498e7cf7338a397f93a75248509256adc3", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 4 | Lines Deleted: 4 | Files Changed: 2 | Hunks: 3 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 8 | Churn Cumulative: 876 | Contributors (this commit): 19 | Commits (past 90d): 4 | Contributors (cumulative): 22 | DMM Complexity: None\n\nDIFF:\n@@ -27,7 +27,7 @@ def to_categorical(y, num_classes=None):\n     if not num_classes:\n         num_classes = np.max(y) + 1\n     n = y.shape[0]\n-    categorical = np.zeros((n, num_classes))\n+    categorical = np.zeros((n, num_classes), dtype=np.float32)\n     categorical[np.arange(n), y] = 1\n     output_shape = input_shape + (num_classes,)\n     categorical = np.reshape(categorical, output_shape)\n\n@@ -28,13 +28,13 @@ def get_test_data(num_train=1000, num_test=500, input_shape=(10,),\n     samples = num_train + num_test\n     if classification:\n         y = np.random.randint(0, num_classes, size=(samples,))\n-        X = np.zeros((samples,) + input_shape)\n+        X = np.zeros((samples,) + input_shape, dtype=np.float32)\n         for i in range(samples):\n             X[i] = np.random.normal(loc=y[i], scale=0.7, size=input_shape)\n     else:\n         y_loc = np.random.random((samples,))\n-        X = np.zeros((samples,) + input_shape)\n-        y = np.zeros((samples,) + output_shape)\n+        X = np.zeros((samples,) + input_shape, dtype=np.float32)\n+        y = np.zeros((samples,) + output_shape, dtype=np.float32)\n         for i in range(samples):\n             X[i] = np.random.normal(loc=y_loc[i], scale=0.7, size=input_shape)\n             y[i] = np.random.normal(loc=y_loc[i], scale=0.7, size=output_shape)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "keras#cfaa946a02cd263f0e8706fd4baa019efc332391", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 3 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 3 | Churn Cumulative: 10700 | Contributors (this commit): 55 | Commits (past 90d): 7 | Contributors (cumulative): 55 | DMM Complexity: None\n\nDIFF:\n@@ -373,6 +373,9 @@ class Conv2D(_Conv):\n             Specifying any stride value != 1 is incompatible with specifying\n             any `dilation_rate` value != 1.\n         padding: one of `\"valid\"` or `\"same\"` (case-insensitive).\n+            Note that `\"same\"` is slightly inconsistent across backends with\n+            `strides` != 1, as described\n+            [here](https://github.com/keras-team/keras/pull/9473#issuecomment-372166860)\n         data_format: A string,\n             one of `channels_last` (default) or `channels_first`.\n             The ordering of the dimensions in the inputs.\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "keras#c08ef613af27da896cee168daeee5c6fad1980b6", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 20 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 9 | Methods Changed: 3 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 20 | Churn Cumulative: 10720 | Contributors (this commit): 56 | Commits (past 90d): 8 | Contributors (cumulative): 56 | DMM Complexity: 1.0\n\nDIFF:\n@@ -1084,6 +1084,12 @@ class _SeparableConv(_Conv):\n             It defaults to the `image_data_format` value found in your\n             Keras config file at `~/.keras/keras.json`.\n             If you never set it, then it will be \"channels_last\".\n+        dilation_rate: an integer or tuple/list of n integers, specifying\n+            the dilation rate to use for dilated convolution.\n+            Can be a single integer to specify the same value for\n+            all spatial dimensions.\n+            Currently, specifying any `dilation_rate` value != 1 is\n+            incompatible with specifying any stride value != 1.\n         depth_multiplier: The number of depthwise convolution output channels\n             for each input channel.\n             The total number of depthwise convolution output\n@@ -1139,6 +1145,7 @@ class _SeparableConv(_Conv):\n                  strides=1,\n                  padding='valid',\n                  data_format=None,\n+                 dilation_rate=1,\n                  depth_multiplier=1,\n                  activation=None,\n                  use_bias=True,\n@@ -1160,6 +1167,7 @@ class _SeparableConv(_Conv):\n             strides=strides,\n             padding=padding,\n             data_format=data_format,\n+            dilation_rate=dilation_rate,\n             activation=activation,\n             use_bias=use_bias,\n             bias_regularizer=bias_regularizer,\n@@ -1293,6 +1301,10 @@ class SeparableConv1D(_SeparableConv):\n             It defaults to the `image_data_format` value found in your\n             Keras config file at `~/.keras/keras.json`.\n             If you never set it, then it will be \"channels_last\".\n+        dilation_rate: An integer or tuple/list of a single integer, specifying\n+            the dilation rate to use for dilated convolution.\n+            Currently, specifying any `dilation_rate` value != 1 is\n+            incompatible with specifying any `strides` value != 1.\n         depth_multiplier: The number of depthwise convolution output channels\n             for each input channel.\n             The total number of depthwise convolution output\n@@ -1347,6 +1359,7 @@ class SeparableConv1D(_SeparableConv):\n                  strides=1,\n                  padding='valid',\n                  data_format=None,\n+                 dilation_rate=1,\n                  depth_multiplier=1,\n                  activation=None,\n                  use_bias=True,\n@@ -1368,6 +1381,7 @@ class SeparableConv1D(_SeparableConv):\n             strides=strides,\n             padding=padding,\n             data_format=data_format,\n+            dilation_rate=dilation_rate,\n             depth_multiplier=depth_multiplier,\n             activation=activation,\n             use_bias=use_bias,\n@@ -1422,6 +1436,10 @@ class SeparableConv2D(_SeparableConv):\n             It defaults to the `image_data_format` value found in your\n             Keras config file at `~/.keras/keras.json`.\n             If you never set it, then it will be \"channels_last\".\n+        dilation_rate: An integer or tuple/list of 2 integers, specifying\n+            the dilation rate to use for dilated convolution.\n+            Currently, specifying any `dilation_rate` value != 1 is\n+            incompatible with specifying any `strides` value != 1.\n         depth_multiplier: The number of depthwise convolution output channels\n             for each input channel.\n             The total number of depthwise convolution output\n@@ -1477,6 +1495,7 @@ class SeparableConv2D(_SeparableConv):\n                  strides=(1, 1),\n                  padding='valid',\n                  data_format=None,\n+                 dilation_rate=(1, 1),\n                  depth_multiplier=1,\n                  activation=None,\n                  use_bias=True,\n@@ -1498,6 +1517,7 @@ class SeparableConv2D(_SeparableConv):\n             strides=strides,\n             padding=padding,\n             data_format=data_format,\n+            dilation_rate=dilation_rate,\n             depth_multiplier=depth_multiplier,\n             activation=activation,\n             use_bias=use_bias,\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "keras#2c8d1d03599cc03243bce8f07ed9c4a3d5f384f9", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 24 | Lines Deleted: 2 | Files Changed: 2 | Hunks: 3 | Methods Changed: 4 | Complexity Δ (Sum/Max): 6/4 | Churn Δ: 26 | Churn Cumulative: 8210 | Contributors (this commit): 88 | Commits (past 90d): 35 | Contributors (cumulative): 108 | DMM Complexity: 0.6666666666666666\n\nDIFF:\n@@ -2212,7 +2212,11 @@ class Model(Container):\n                                          str(generator_output))\n                     # build batch logs\n                     batch_logs = {}\n-                    if isinstance(x, list):\n+                    if x is None or len(x) == 0:\n+                        # Handle data tensors support when no input given\n+                        # step-size = 1 for data tensors\n+                        batch_size = 1\n+                    elif isinstance(x, list):\n                         batch_size = x[0].shape[0]\n                     elif isinstance(x, dict):\n                         batch_size = list(x.values())[0].shape[0]\n@@ -2399,7 +2403,11 @@ class Model(Container):\n                     outs = [outs]\n                 outs_per_batch.append(outs)\n \n-                if isinstance(x, list):\n+                if x is None or len(x) == 0:\n+                    # Handle data tensors support when no input given\n+                    # step-size = 1 for data tensors\n+                    batch_size = 1\n+                elif isinstance(x, list):\n                     batch_size = x[0].shape[0]\n                 elif isinstance(x, dict):\n                     batch_size = list(x.values())[0].shape[0]\n\n@@ -867,6 +867,20 @@ def test_model_with_external_loss():\n             out = model.fit(None, None, epochs=1, batch_size=10)\n         out = model.fit(None, None, epochs=1, steps_per_epoch=1)\n \n+        # define a generator to produce x=None and y=None\n+        def data_tensors_generator():\n+            while True:\n+                yield (None, None)\n+\n+        generator = data_tensors_generator()\n+\n+        # test fit_generator for framework-native data tensors\n+        out = model.fit_generator(generator, epochs=1,\n+                                  steps_per_epoch=3)\n+\n+        # test evaluate_generator for framework-native data tensors\n+        out = model.evaluate_generator(generator, steps=3)\n+\n         # test fit with validation data\n         with pytest.raises(ValueError):\n             out = model.fit(None, None,\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "keras#736b7a705db802d63ddcee1cd0687f806ef2d495", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 2 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 292 | Contributors (this commit): 15 | Commits (past 90d): 6 | Contributors (cumulative): 15 | DMM Complexity: None\n\nDIFF:\n@@ -13,9 +13,9 @@ setup(name='Keras',\n       install_requires=['numpy>=1.9.1',\n                         'scipy>=0.14',\n                         'six>=1.9.0',\n-                        'pyyaml'],\n+                        'pyyaml',\n+                        'h5py'],\n       extras_require={\n-          'h5py': ['h5py'],\n           'visualize': ['pydot>=1.2.0'],\n           'tests': ['pytest',\n                     'pytest-pep8',\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "keras#c5a3dde1f00f502c94433c867c70f1f2e40dce35", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 9388 | Contributors (this commit): 110 | Commits (past 90d): 15 | Contributors (cumulative): 110 | DMM Complexity: None\n\nDIFF:\n@@ -2504,7 +2504,7 @@ def function(inputs, outputs, updates=None, **kwargs):\n \n \n def gradients(loss, variables):\n-    \"\"\"Returns the gradients of `variables` w.r.t. `loss`.\n+    \"\"\"Returns the gradients of `loss` w.r.t. `variables`.\n \n     # Arguments\n         loss: Scalar tensor to minimize.\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "keras#be112e1f48bbdf24d0a714b9cafc3fc9f43c7738", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 887 | Contributors (this commit): 13 | Commits (past 90d): 1 | Contributors (cumulative): 13 | DMM Complexity: None\n\nDIFF:\n@@ -212,7 +212,7 @@ class TextImageGenerator(keras.callbacks.Callback):\n         self.Y_len = [0] * self.num_words\n \n         # monogram file is sorted by frequency in english speech\n-        with codecs.open(self.monogram_file, mode='rt', encoding='utf-8') as f:\n+        with codecs.open(self.monogram_file, mode='r', encoding='utf-8') as f:\n             for line in f:\n                 if len(tmp_string_list) == int(self.num_words * mono_fraction):\n                     break\n@@ -221,7 +221,7 @@ class TextImageGenerator(keras.callbacks.Callback):\n                     tmp_string_list.append(word)\n \n         # bigram file contains common word pairings in english speech\n-        with codecs.open(self.bigram_file, mode='rt', encoding='utf-8') as f:\n+        with codecs.open(self.bigram_file, mode='r', encoding='utf-8') as f:\n             lines = f.readlines()\n             for line in lines:\n                 if len(tmp_string_list) == self.num_words:\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "keras#af804d0a5db9a8f20fbb083b48655b2687ce89d9", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 4 | Lines Deleted: 5 | Files Changed: 1 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): -1/0 | Churn Δ: 9 | Churn Cumulative: 801 | Contributors (this commit): 4 | Commits (past 90d): 6 | Contributors (cumulative): 4 | DMM Complexity: None\n\nDIFF:\n@@ -86,10 +86,9 @@ def NASNet(input_shape=None,\n     at `~/.keras/keras.json`.\n \n     # Arguments\n-        input_shape: Optional shape tuple, only to be specified\n-            if `include_top` is False (otherwise the input shape\n-            has to be `(331, 331, 3)` for NASNetLarge or\n-            `(224, 224, 3)` for NASNetMobile\n+        input_shape: Optional shape tuple, the input shape\n+            is by default `(331, 331, 3)` for NASNetLarge and\n+            `(224, 224, 3)` for NASNetMobile.\n             It should have exactly 3 inputs channels,\n             and width and height should be no smaller than 32.\n             E.g. `(224, 224, 3)` would be one valid value.\n@@ -167,7 +166,7 @@ def NASNet(input_shape=None,\n                                       default_size=default_size,\n                                       min_size=32,\n                                       data_format=K.image_data_format(),\n-                                      require_flatten=include_top or weights,\n+                                      require_flatten=False,\n                                       weights=weights)\n \n     if K.image_data_format() != 'channels_last':\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
