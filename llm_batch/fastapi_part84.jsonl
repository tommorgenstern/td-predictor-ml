{"custom_id": "fastapi#3d017824bacba2d9df1ced81ff7f892ecca19d49", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 61 | Lines Deleted: 278 | Files Changed: 6 | Hunks: 16 | Methods Changed: 27 | Complexity Δ (Sum/Max): -7/1 | Churn Δ: 339 | Churn Cumulative: 1193 | Contributors (this commit): 7 | Commits (past 90d): 6 | Contributors (cumulative): 23 | DMM Complexity: 0.0\n\nDIFF:\n@@ -1,12 +1,27 @@\n+import importlib\n+\n+import pytest\n from dirty_equals import IsOneOf\n from fastapi.testclient import TestClient\n \n-from docs_src.extra_models.tutorial003 import app\n-\n-client = TestClient(app)\n+from ...utils import needs_py310\n \n \n-def test_get_car():\n+@pytest.fixture(\n+    name=\"client\",\n+    params=[\n+        \"tutorial003\",\n+        pytest.param(\"tutorial003_py310\", marks=needs_py310),\n+    ],\n+)\n+def get_client(request: pytest.FixtureRequest):\n+    mod = importlib.import_module(f\"docs_src.extra_models.{request.param}\")\n+\n+    client = TestClient(mod.app)\n+    return client\n+\n+\n+def test_get_car(client: TestClient):\n     response = client.get(\"/items/item1\")\n     assert response.status_code == 200, response.text\n     assert response.json() == {\n@@ -15,7 +30,7 @@ def test_get_car():\n     }\n \n \n-def test_get_plane():\n+def test_get_plane(client: TestClient):\n     response = client.get(\"/items/item2\")\n     assert response.status_code == 200, response.text\n     assert response.json() == {\n@@ -25,7 +40,7 @@ def test_get_plane():\n     }\n \n \n-def test_openapi_schema():\n+def test_openapi_schema(client: TestClient):\n     response = client.get(\"/openapi.json\")\n     assert response.status_code == 200, response.text\n     assert response.json() == {\n\n@@ -1,144 +0,0 @@\n-import pytest\n-from dirty_equals import IsOneOf\n-from fastapi.testclient import TestClient\n-\n-from ...utils import needs_py310\n-\n-\n-@pytest.fixture(name=\"client\")\n-def get_client():\n-    from docs_src.extra_models.tutorial003_py310 import app\n-\n-    client = TestClient(app)\n-    return client\n-\n-\n-@needs_py310\n-def test_get_car(client: TestClient):\n-    response = client.get(\"/items/item1\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\n-        \"description\": \"All my friends drive a low rider\",\n-        \"type\": \"car\",\n-    }\n-\n-\n-@needs_py310\n-def test_get_plane(client: TestClient):\n-    response = client.get(\"/items/item2\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\n-        \"description\": \"Music is my aeroplane, it's my aeroplane\",\n-        \"type\": \"plane\",\n-        \"size\": 5,\n-    }\n-\n-\n-@needs_py310\n-def test_openapi_schema(client: TestClient):\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\n-        \"openapi\": \"3.1.0\",\n-        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n-        \"paths\": {\n-            \"/items/{item_id}\": {\n-                \"get\": {\n-                    \"responses\": {\n-                        \"200\": {\n-                            \"description\": \"Successful Response\",\n-                            \"content\": {\n-                                \"application/json\": {\n-                                    \"schema\": {\n-                                        \"title\": \"Response Read Item Items  Item Id  Get\",\n-                                        \"anyOf\": [\n-                                            {\"$ref\": \"#/components/schemas/PlaneItem\"},\n-                                            {\"$ref\": \"#/components/schemas/CarItem\"},\n-                                        ],\n-                                    }\n-                                }\n-                            },\n-                        },\n-                        \"422\": {\n-                            \"description\": \"Validation Error\",\n-                            \"content\": {\n-                                \"application/json\": {\n-                                    \"schema\": {\n-                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n-                                    }\n-                                }\n-                            },\n-                        },\n-                    },\n-                    \"summary\": \"Read Item\",\n-                    \"operationId\": \"read_item_items__item_id__get\",\n-                    \"parameters\": [\n-                        {\n-                            \"required\": True,\n-                            \"schema\": {\"title\": \"Item Id\", \"type\": \"string\"},\n-                            \"name\": \"item_id\",\n-                            \"in\": \"path\",\n-                        }\n-                    ],\n-                }\n-            }\n-        },\n-        \"components\": {\n-            \"schemas\": {\n-                \"PlaneItem\": {\n-                    \"title\": \"PlaneItem\",\n-                    \"required\": IsOneOf(\n-                        [\"description\", \"type\", \"size\"],\n-                        # TODO: remove when deprecating Pydantic v1\n-                        [\"description\", \"size\"],\n-                    ),\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"description\": {\"title\": \"Description\", \"type\": \"string\"},\n-                        \"type\": {\"title\": \"Type\", \"type\": \"string\", \"default\": \"plane\"},\n-                        \"size\": {\"title\": \"Size\", \"type\": \"integer\"},\n-                    },\n-                },\n-                \"CarItem\": {\n-                    \"title\": \"CarItem\",\n-                    \"required\": IsOneOf(\n-                        [\"description\", \"type\"],\n-                        # TODO: remove when deprecating Pydantic v1\n-                        [\"description\"],\n-                    ),\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"description\": {\"title\": \"Description\", \"type\": \"string\"},\n-                        \"type\": {\"title\": \"Type\", \"type\": \"string\", \"default\": \"car\"},\n-                    },\n-                },\n-                \"ValidationError\": {\n-                    \"title\": \"ValidationError\",\n-                    \"required\": [\"loc\", \"msg\", \"type\"],\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"loc\": {\n-                            \"title\": \"Location\",\n-                            \"type\": \"array\",\n-                            \"items\": {\n-                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n-                            },\n-                        },\n-                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n-                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n-                    },\n-                },\n-                \"HTTPValidationError\": {\n-                    \"title\": \"HTTPValidationError\",\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"detail\": {\n-                            \"title\": \"Detail\",\n-                            \"type\": \"array\",\n-                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n-                        }\n-                    },\n-                },\n-            }\n-        },\n-    }\n\n@@ -1,11 +1,26 @@\n+import importlib\n+\n+import pytest\n from fastapi.testclient import TestClient\n \n-from docs_src.extra_models.tutorial004 import app\n-\n-client = TestClient(app)\n+from ...utils import needs_py39\n \n \n-def test_get_items():\n+@pytest.fixture(\n+    name=\"client\",\n+    params=[\n+        \"tutorial004\",\n+        pytest.param(\"tutorial004_py39\", marks=needs_py39),\n+    ],\n+)\n+def get_client(request: pytest.FixtureRequest):\n+    mod = importlib.import_module(f\"docs_src.extra_models.{request.param}\")\n+\n+    client = TestClient(mod.app)\n+    return client\n+\n+\n+def test_get_items(client: TestClient):\n     response = client.get(\"/items/\")\n     assert response.status_code == 200, response.text\n     assert response.json() == [\n@@ -14,7 +29,7 @@ def test_get_items():\n     ]\n \n \n-def test_openapi_schema():\n+def test_openapi_schema(client: TestClient):\n     response = client.get(\"/openapi.json\")\n     assert response.status_code == 200, response.text\n     assert response.json() == {\n\n@@ -1,67 +0,0 @@\n-import pytest\n-from fastapi.testclient import TestClient\n-\n-from ...utils import needs_py39\n-\n-\n-@pytest.fixture(name=\"client\")\n-def get_client():\n-    from docs_src.extra_models.tutorial004_py39 import app\n-\n-    client = TestClient(app)\n-    return client\n-\n-\n-@needs_py39\n-def test_get_items(client: TestClient):\n-    response = client.get(\"/items/\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == [\n-        {\"name\": \"Foo\", \"description\": \"There comes my hero\"},\n-        {\"name\": \"Red\", \"description\": \"It's my aeroplane\"},\n-    ]\n-\n-\n-@needs_py39\n-def test_openapi_schema(client: TestClient):\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\n-        \"openapi\": \"3.1.0\",\n-        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n-        \"paths\": {\n-            \"/items/\": {\n-                \"get\": {\n-                    \"responses\": {\n-                        \"200\": {\n-                            \"description\": \"Successful Response\",\n-                            \"content\": {\n-                                \"application/json\": {\n-                                    \"schema\": {\n-                                        \"title\": \"Response Read Items Items  Get\",\n-                                        \"type\": \"array\",\n-                                        \"items\": {\"$ref\": \"#/components/schemas/Item\"},\n-                                    }\n-                                }\n-                            },\n-                        }\n-                    },\n-                    \"summary\": \"Read Items\",\n-                    \"operationId\": \"read_items_items__get\",\n-                }\n-            }\n-        },\n-        \"components\": {\n-            \"schemas\": {\n-                \"Item\": {\n-                    \"title\": \"Item\",\n-                    \"required\": [\"name\", \"description\"],\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"name\": {\"title\": \"Name\", \"type\": \"string\"},\n-                        \"description\": {\"title\": \"Description\", \"type\": \"string\"},\n-                    },\n-                }\n-            }\n-        },\n-    }\n\n@@ -1,17 +1,32 @@\n+import importlib\n+\n+import pytest\n from fastapi.testclient import TestClient\n \n-from docs_src.extra_models.tutorial005 import app\n-\n-client = TestClient(app)\n+from ...utils import needs_py39\n \n \n-def test_get_items():\n+@pytest.fixture(\n+    name=\"client\",\n+    params=[\n+        \"tutorial005\",\n+        pytest.param(\"tutorial005_py39\", marks=needs_py39),\n+    ],\n+)\n+def get_client(request: pytest.FixtureRequest):\n+    mod = importlib.import_module(f\"docs_src.extra_models.{request.param}\")\n+\n+    client = TestClient(mod.app)\n+    return client\n+\n+\n+def test_get_items(client: TestClient):\n     response = client.get(\"/keyword-weights/\")\n     assert response.status_code == 200, response.text\n     assert response.json() == {\"foo\": 2.3, \"bar\": 3.4}\n \n \n-def test_openapi_schema():\n+def test_openapi_schema(client: TestClient):\n     response = client.get(\"/openapi.json\")\n     assert response.status_code == 200, response.text\n     assert response.json() == {\n\n@@ -1,51 +0,0 @@\n-import pytest\n-from fastapi.testclient import TestClient\n-\n-from ...utils import needs_py39\n-\n-\n-@pytest.fixture(name=\"client\")\n-def get_client():\n-    from docs_src.extra_models.tutorial005_py39 import app\n-\n-    client = TestClient(app)\n-    return client\n-\n-\n-@needs_py39\n-def test_get_items(client: TestClient):\n-    response = client.get(\"/keyword-weights/\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"foo\": 2.3, \"bar\": 3.4}\n-\n-\n-@needs_py39\n-def test_openapi_schema(client: TestClient):\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\n-        \"openapi\": \"3.1.0\",\n-        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n-        \"paths\": {\n-            \"/keyword-weights/\": {\n-                \"get\": {\n-                    \"responses\": {\n-                        \"200\": {\n-                            \"description\": \"Successful Response\",\n-                            \"content\": {\n-                                \"application/json\": {\n-                                    \"schema\": {\n-                                        \"title\": \"Response Read Keyword Weights Keyword Weights  Get\",\n-                                        \"type\": \"object\",\n-                                        \"additionalProperties\": {\"type\": \"number\"},\n-                                    }\n-                                }\n-                            },\n-                        }\n-                    },\n-                    \"summary\": \"Read Keyword Weights\",\n-                    \"operationId\": \"read_keyword_weights_keyword_weights__get\",\n-                }\n-            }\n-        },\n-    }\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#aa60185781da9709607ca0d136e7ac106a1a34bb", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 64 | Lines Deleted: 1286 | Files Changed: 14 | Hunks: 27 | Methods Changed: 45 | Complexity Δ (Sum/Max): -27/1 | Churn Δ: 1350 | Churn Cumulative: 3559 | Contributors (this commit): 5 | Commits (past 90d): 14 | Contributors (cumulative): 31 | DMM Complexity: 0.0\n\nDIFF:\n@@ -1,10 +1,26 @@\n+import importlib\n+\n import pytest\n from dirty_equals import IsDict\n from fastapi.testclient import TestClient\n \n-from docs_src.header_params.tutorial001 import app\n+from ...utils import needs_py310\n \n-client = TestClient(app)\n+\n+@pytest.fixture(\n+    name=\"client\",\n+    params=[\n+        \"tutorial001\",\n+        pytest.param(\"tutorial001_py310\", marks=needs_py310),\n+        \"tutorial001_an\",\n+        pytest.param(\"tutorial001_an_py310\", marks=needs_py310),\n+    ],\n+)\n+def get_client(request: pytest.FixtureRequest):\n+    mod = importlib.import_module(f\"docs_src.header_params.{request.param}\")\n+\n+    client = TestClient(mod.app)\n+    return client\n \n \n @pytest.mark.parametrize(\n@@ -15,13 +31,13 @@ client = TestClient(app)\n         (\"/items\", {\"User-Agent\": \"FastAPI test\"}, 200, {\"User-Agent\": \"FastAPI test\"}),\n     ],\n )\n-def test(path, headers, expected_status, expected_response):\n+def test(path, headers, expected_status, expected_response, client: TestClient):\n     response = client.get(path, headers=headers)\n     assert response.status_code == expected_status\n     assert response.json() == expected_response\n \n \n-def test_openapi_schema():\n+def test_openapi_schema(client: TestClient):\n     response = client.get(\"/openapi.json\")\n     assert response.status_code == 200\n     assert response.json() == {\n\n@@ -1,102 +0,0 @@\n-import pytest\n-from dirty_equals import IsDict\n-from fastapi.testclient import TestClient\n-\n-from docs_src.header_params.tutorial001_an import app\n-\n-client = TestClient(app)\n-\n-\n-@pytest.mark.parametrize(\n-    \"path,headers,expected_status,expected_response\",\n-    [\n-        (\"/items\", None, 200, {\"User-Agent\": \"testclient\"}),\n-        (\"/items\", {\"X-Header\": \"notvalid\"}, 200, {\"User-Agent\": \"testclient\"}),\n-        (\"/items\", {\"User-Agent\": \"FastAPI test\"}, 200, {\"User-Agent\": \"FastAPI test\"}),\n-    ],\n-)\n-def test(path, headers, expected_status, expected_response):\n-    response = client.get(path, headers=headers)\n-    assert response.status_code == expected_status\n-    assert response.json() == expected_response\n-\n-\n-def test_openapi_schema():\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200\n-    assert response.json() == {\n-        \"openapi\": \"3.1.0\",\n-        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n-        \"paths\": {\n-            \"/items/\": {\n-                \"get\": {\n-                    \"responses\": {\n-                        \"200\": {\n-                            \"description\": \"Successful Response\",\n-                            \"content\": {\"application/json\": {\"schema\": {}}},\n-                        },\n-                        \"422\": {\n-                            \"description\": \"Validation Error\",\n-                            \"content\": {\n-                                \"application/json\": {\n-                                    \"schema\": {\n-                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n-                                    }\n-                                }\n-                            },\n-                        },\n-                    },\n-                    \"summary\": \"Read Items\",\n-                    \"operationId\": \"read_items_items__get\",\n-                    \"parameters\": [\n-                        {\n-                            \"required\": False,\n-                            \"schema\": IsDict(\n-                                {\n-                                    \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n-                                    \"title\": \"User-Agent\",\n-                                }\n-                            )\n-                            | IsDict(\n-                                # TODO: remove when deprecating Pydantic v1\n-                                {\"title\": \"User-Agent\", \"type\": \"string\"}\n-                            ),\n-                            \"name\": \"user-agent\",\n-                            \"in\": \"header\",\n-                        }\n-                    ],\n-                }\n-            }\n-        },\n-        \"components\": {\n-            \"schemas\": {\n-                \"ValidationError\": {\n-                    \"title\": \"ValidationError\",\n-                    \"required\": [\"loc\", \"msg\", \"type\"],\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"loc\": {\n-                            \"title\": \"Location\",\n-                            \"type\": \"array\",\n-                            \"items\": {\n-                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n-                            },\n-                        },\n-                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n-                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n-                    },\n-                },\n-                \"HTTPValidationError\": {\n-                    \"title\": \"HTTPValidationError\",\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"detail\": {\n-                            \"title\": \"Detail\",\n-                            \"type\": \"array\",\n-                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n-                        }\n-                    },\n-                },\n-            }\n-        },\n-    }\n\n@@ -1,110 +0,0 @@\n-import pytest\n-from dirty_equals import IsDict\n-from fastapi.testclient import TestClient\n-\n-from ...utils import needs_py310\n-\n-\n-@pytest.fixture(name=\"client\")\n-def get_client():\n-    from docs_src.header_params.tutorial001_an_py310 import app\n-\n-    client = TestClient(app)\n-    return client\n-\n-\n-@needs_py310\n-@pytest.mark.parametrize(\n-    \"path,headers,expected_status,expected_response\",\n-    [\n-        (\"/items\", None, 200, {\"User-Agent\": \"testclient\"}),\n-        (\"/items\", {\"X-Header\": \"notvalid\"}, 200, {\"User-Agent\": \"testclient\"}),\n-        (\"/items\", {\"User-Agent\": \"FastAPI test\"}, 200, {\"User-Agent\": \"FastAPI test\"}),\n-    ],\n-)\n-def test(path, headers, expected_status, expected_response, client: TestClient):\n-    response = client.get(path, headers=headers)\n-    assert response.status_code == expected_status\n-    assert response.json() == expected_response\n-\n-\n-@needs_py310\n-def test_openapi_schema(client: TestClient):\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200\n-    assert response.json() == {\n-        \"openapi\": \"3.1.0\",\n-        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n-        \"paths\": {\n-            \"/items/\": {\n-                \"get\": {\n-                    \"responses\": {\n-                        \"200\": {\n-                            \"description\": \"Successful Response\",\n-                            \"content\": {\"application/json\": {\"schema\": {}}},\n-                        },\n-                        \"422\": {\n-                            \"description\": \"Validation Error\",\n-                            \"content\": {\n-                                \"application/json\": {\n-                                    \"schema\": {\n-                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n-                                    }\n-                                }\n-                            },\n-                        },\n-                    },\n-                    \"summary\": \"Read Items\",\n-                    \"operationId\": \"read_items_items__get\",\n-                    \"parameters\": [\n-                        {\n-                            \"required\": False,\n-                            \"schema\": IsDict(\n-                                {\n-                                    \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n-                                    \"title\": \"User-Agent\",\n-                                }\n-                            )\n-                            | IsDict(\n-                                # TODO: remove when deprecating Pydantic v1\n-                                {\"title\": \"User-Agent\", \"type\": \"string\"}\n-                            ),\n-                            \"name\": \"user-agent\",\n-                            \"in\": \"header\",\n-                        }\n-                    ],\n-                }\n-            }\n-        },\n-        \"components\": {\n-            \"schemas\": {\n-                \"ValidationError\": {\n-                    \"title\": \"ValidationError\",\n-                    \"required\": [\"loc\", \"msg\", \"type\"],\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"loc\": {\n-                            \"title\": \"Location\",\n-                            \"type\": \"array\",\n-                            \"items\": {\n-                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n-                            },\n-                        },\n-                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n-                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n-                    },\n-                },\n-                \"HTTPValidationError\": {\n-                    \"title\": \"HTTPValidationError\",\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"detail\": {\n-                            \"title\": \"Detail\",\n-                            \"type\": \"array\",\n-                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n-                        }\n-                    },\n-                },\n-            }\n-        },\n-    }\n\n@@ -1,110 +0,0 @@\n-import pytest\n-from dirty_equals import IsDict\n-from fastapi.testclient import TestClient\n-\n-from ...utils import needs_py310\n-\n-\n-@pytest.fixture(name=\"client\")\n-def get_client():\n-    from docs_src.header_params.tutorial001_py310 import app\n-\n-    client = TestClient(app)\n-    return client\n-\n-\n-@needs_py310\n-@pytest.mark.parametrize(\n-    \"path,headers,expected_status,expected_response\",\n-    [\n-        (\"/items\", None, 200, {\"User-Agent\": \"testclient\"}),\n-        (\"/items\", {\"X-Header\": \"notvalid\"}, 200, {\"User-Agent\": \"testclient\"}),\n-        (\"/items\", {\"User-Agent\": \"FastAPI test\"}, 200, {\"User-Agent\": \"FastAPI test\"}),\n-    ],\n-)\n-def test(path, headers, expected_status, expected_response, client: TestClient):\n-    response = client.get(path, headers=headers)\n-    assert response.status_code == expected_status\n-    assert response.json() == expected_response\n-\n-\n-@needs_py310\n-def test_openapi_schema(client: TestClient):\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200\n-    assert response.json() == {\n-        \"openapi\": \"3.1.0\",\n-        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n-        \"paths\": {\n-            \"/items/\": {\n-                \"get\": {\n-                    \"responses\": {\n-                        \"200\": {\n-                            \"description\": \"Successful Response\",\n-                            \"content\": {\"application/json\": {\"schema\": {}}},\n-                        },\n-                        \"422\": {\n-                            \"description\": \"Validation Error\",\n-                            \"content\": {\n-                                \"application/json\": {\n-                                    \"schema\": {\n-                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n-                                    }\n-                                }\n-                            },\n-                        },\n-                    },\n-                    \"summary\": \"Read Items\",\n-                    \"operationId\": \"read_items_items__get\",\n-                    \"parameters\": [\n-                        {\n-                            \"required\": False,\n-                            \"schema\": IsDict(\n-                                {\n-                                    \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n-                                    \"title\": \"User-Agent\",\n-                                }\n-                            )\n-                            | IsDict(\n-                                # TODO: remove when deprecating Pydantic v1\n-                                {\"title\": \"User-Agent\", \"type\": \"string\"}\n-                            ),\n-                            \"name\": \"user-agent\",\n-                            \"in\": \"header\",\n-                        }\n-                    ],\n-                }\n-            }\n-        },\n-        \"components\": {\n-            \"schemas\": {\n-                \"ValidationError\": {\n-                    \"title\": \"ValidationError\",\n-                    \"required\": [\"loc\", \"msg\", \"type\"],\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"loc\": {\n-                            \"title\": \"Location\",\n-                            \"type\": \"array\",\n-                            \"items\": {\n-                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n-                            },\n-                        },\n-                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n-                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n-                    },\n-                },\n-                \"HTTPValidationError\": {\n-                    \"title\": \"HTTPValidationError\",\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"detail\": {\n-                            \"title\": \"Detail\",\n-                            \"type\": \"array\",\n-                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n-                        }\n-                    },\n-                },\n-            }\n-        },\n-    }\n\n@@ -1,10 +1,27 @@\n+import importlib\n+\n import pytest\n from dirty_equals import IsDict\n from fastapi.testclient import TestClient\n \n-from docs_src.header_params.tutorial002 import app\n+from ...utils import needs_py39, needs_py310\n \n-client = TestClient(app)\n+\n+@pytest.fixture(\n+    name=\"client\",\n+    params=[\n+        \"tutorial002\",\n+        pytest.param(\"tutorial002_py310\", marks=needs_py310),\n+        \"tutorial002_an\",\n+        pytest.param(\"tutorial002_an_py39\", marks=needs_py39),\n+        pytest.param(\"tutorial002_an_py310\", marks=needs_py310),\n+    ],\n+)\n+def get_client(request: pytest.FixtureRequest):\n+    mod = importlib.import_module(f\"docs_src.header_params.{request.param}\")\n+\n+    client = TestClient(mod.app)\n+    return client\n \n \n @pytest.mark.parametrize(\n@@ -26,13 +43,13 @@ client = TestClient(app)\n         ),\n     ],\n )\n-def test(path, headers, expected_status, expected_response):\n+def test(path, headers, expected_status, expected_response, client: TestClient):\n     response = client.get(path, headers=headers)\n     assert response.status_code == expected_status\n     assert response.json() == expected_response\n \n \n-def test_openapi_schema():\n+def test_openapi_schema(client: TestClient):\n     response = client.get(\"/openapi.json\")\n     assert response.status_code == 200\n     assert response.json() == {\n\n@@ -1,113 +0,0 @@\n-import pytest\n-from dirty_equals import IsDict\n-from fastapi.testclient import TestClient\n-\n-from docs_src.header_params.tutorial002_an import app\n-\n-client = TestClient(app)\n-\n-\n-@pytest.mark.parametrize(\n-    \"path,headers,expected_status,expected_response\",\n-    [\n-        (\"/items\", None, 200, {\"strange_header\": None}),\n-        (\"/items\", {\"X-Header\": \"notvalid\"}, 200, {\"strange_header\": None}),\n-        (\n-            \"/items\",\n-            {\"strange_header\": \"FastAPI test\"},\n-            200,\n-            {\"strange_header\": \"FastAPI test\"},\n-        ),\n-        (\n-            \"/items\",\n-            {\"strange-header\": \"Not really underscore\"},\n-            200,\n-            {\"strange_header\": None},\n-        ),\n-    ],\n-)\n-def test(path, headers, expected_status, expected_response):\n-    response = client.get(path, headers=headers)\n-    assert response.status_code == expected_status\n-    assert response.json() == expected_response\n-\n-\n-def test_openapi_schema():\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200\n-    assert response.json() == {\n-        \"openapi\": \"3.1.0\",\n-        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n-        \"paths\": {\n-            \"/items/\": {\n-                \"get\": {\n-                    \"responses\": {\n-                        \"200\": {\n-                            \"description\": \"Successful Response\",\n-                            \"content\": {\"application/json\": {\"schema\": {}}},\n-                        },\n-                        \"422\": {\n-                            \"description\": \"Validation Error\",\n-                            \"content\": {\n-                                \"application/json\": {\n-                                    \"schema\": {\n-                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n-                                    }\n-                                }\n-                            },\n-                        },\n-                    },\n-                    \"summary\": \"Read Items\",\n-                    \"operationId\": \"read_items_items__get\",\n-                    \"parameters\": [\n-                        {\n-                            \"required\": False,\n-                            \"schema\": IsDict(\n-                                {\n-                                    \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n-                                    \"title\": \"Strange Header\",\n-                                }\n-                            )\n-                            | IsDict(\n-                                # TODO: remove when deprecating Pydantic v1\n-                                {\"title\": \"Strange Header\", \"type\": \"string\"}\n-                            ),\n-                            \"name\": \"strange_header\",\n-                            \"in\": \"header\",\n-                        }\n-                    ],\n-                }\n-            }\n-        },\n-        \"components\": {\n-            \"schemas\": {\n-                \"ValidationError\": {\n-                    \"title\": \"ValidationError\",\n-                    \"required\": [\"loc\", \"msg\", \"type\"],\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"loc\": {\n-                            \"title\": \"Location\",\n-                            \"type\": \"array\",\n-                            \"items\": {\n-                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n-                            },\n-                        },\n-                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n-                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n-                    },\n-                },\n-                \"HTTPValidationError\": {\n-                    \"title\": \"HTTPValidationError\",\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"detail\": {\n-                            \"title\": \"Detail\",\n-                            \"type\": \"array\",\n-                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n-                        }\n-                    },\n-                },\n-            }\n-        },\n-    }\n\n@@ -1,121 +0,0 @@\n-import pytest\n-from dirty_equals import IsDict\n-from fastapi.testclient import TestClient\n-\n-from ...utils import needs_py310\n-\n-\n-@pytest.fixture(name=\"client\")\n-def get_client():\n-    from docs_src.header_params.tutorial002_an_py310 import app\n-\n-    client = TestClient(app)\n-    return client\n-\n-\n-@needs_py310\n-@pytest.mark.parametrize(\n-    \"path,headers,expected_status,expected_response\",\n-    [\n-        (\"/items\", None, 200, {\"strange_header\": None}),\n-        (\"/items\", {\"X-Header\": \"notvalid\"}, 200, {\"strange_header\": None}),\n-        (\n-            \"/items\",\n-            {\"strange_header\": \"FastAPI test\"},\n-            200,\n-            {\"strange_header\": \"FastAPI test\"},\n-        ),\n-        (\n-            \"/items\",\n-            {\"strange-header\": \"Not really underscore\"},\n-            200,\n-            {\"strange_header\": None},\n-        ),\n-    ],\n-)\n-def test(path, headers, expected_status, expected_response, client: TestClient):\n-    response = client.get(path, headers=headers)\n-    assert response.status_code == expected_status\n-    assert response.json() == expected_response\n-\n-\n-@needs_py310\n-def test_openapi_schema(client: TestClient):\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200\n-    assert response.json() == {\n-        \"openapi\": \"3.1.0\",\n-        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n-        \"paths\": {\n-            \"/items/\": {\n-                \"get\": {\n-                    \"responses\": {\n-                        \"200\": {\n-                            \"description\": \"Successful Response\",\n-                            \"content\": {\"application/json\": {\"schema\": {}}},\n-                        },\n-                        \"422\": {\n-                            \"description\": \"Validation Error\",\n-                            \"content\": {\n-                                \"application/json\": {\n-                                    \"schema\": {\n-                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n-                                    }\n-                                }\n-                            },\n-                        },\n-                    },\n-                    \"summary\": \"Read Items\",\n-                    \"operationId\": \"read_items_items__get\",\n-                    \"parameters\": [\n-                        {\n-                            \"required\": False,\n-                            \"schema\": IsDict(\n-                                {\n-                                    \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n-                                    \"title\": \"Strange Header\",\n-                                }\n-                            )\n-                            | IsDict(\n-                                # TODO: remove when deprecating Pydantic v1\n-                                {\"title\": \"Strange Header\", \"type\": \"string\"}\n-                            ),\n-                            \"name\": \"strange_header\",\n-                            \"in\": \"header\",\n-                        }\n-                    ],\n-                }\n-            }\n-        },\n-        \"components\": {\n-            \"schemas\": {\n-                \"ValidationError\": {\n-                    \"title\": \"ValidationError\",\n-                    \"required\": [\"loc\", \"msg\", \"type\"],\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"loc\": {\n-                            \"title\": \"Location\",\n-                            \"type\": \"array\",\n-                            \"items\": {\n-                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n-                            },\n-                        },\n-                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n-                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n-                    },\n-                },\n-                \"HTTPValidationError\": {\n-                    \"title\": \"HTTPValidationError\",\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"detail\": {\n-                            \"title\": \"Detail\",\n-                            \"type\": \"array\",\n-                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n-                        }\n-                    },\n-                },\n-            }\n-        },\n-    }\n\n@@ -1,124 +0,0 @@\n-import pytest\n-from dirty_equals import IsDict\n-from fastapi.testclient import TestClient\n-\n-from ...utils import needs_py39\n-\n-\n-@pytest.fixture(name=\"client\")\n-def get_client():\n-    from docs_src.header_params.tutorial002_an_py39 import app\n-\n-    client = TestClient(app)\n-    return client\n-\n-\n-@needs_py39\n-@pytest.mark.parametrize(\n-    \"path,headers,expected_status,expected_response\",\n-    [\n-        (\"/items\", None, 200, {\"strange_header\": None}),\n-        (\"/items\", {\"X-Header\": \"notvalid\"}, 200, {\"strange_header\": None}),\n-        (\n-            \"/items\",\n-            {\"strange_header\": \"FastAPI test\"},\n-            200,\n-            {\"strange_header\": \"FastAPI test\"},\n-        ),\n-        (\n-            \"/items\",\n-            {\"strange-header\": \"Not really underscore\"},\n-            200,\n-            {\"strange_header\": None},\n-        ),\n-    ],\n-)\n-def test(path, headers, expected_status, expected_response, client: TestClient):\n-    response = client.get(path, headers=headers)\n-    assert response.status_code == expected_status\n-    assert response.json() == expected_response\n-\n-\n-@needs_py39\n-def test_openapi_schema():\n-    from docs_src.header_params.tutorial002_an_py39 import app\n-\n-    client = TestClient(app)\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200\n-    assert response.json() == {\n-        \"openapi\": \"3.1.0\",\n-        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n-        \"paths\": {\n-            \"/items/\": {\n-                \"get\": {\n-                    \"responses\": {\n-                        \"200\": {\n-                            \"description\": \"Successful Response\",\n-                            \"content\": {\"application/json\": {\"schema\": {}}},\n-                        },\n-                        \"422\": {\n-                            \"description\": \"Validation Error\",\n-                            \"content\": {\n-                                \"application/json\": {\n-                                    \"schema\": {\n-                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n-                                    }\n-                                }\n-                            },\n-                        },\n-                    },\n-                    \"summary\": \"Read Items\",\n-                    \"operationId\": \"read_items_items__get\",\n-                    \"parameters\": [\n-                        {\n-                            \"required\": False,\n-                            \"schema\": IsDict(\n-                                {\n-                                    \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n-                                    \"title\": \"Strange Header\",\n-                                }\n-                            )\n-                            | IsDict(\n-                                # TODO: remove when deprecating Pydantic v1\n-                                {\"title\": \"Strange Header\", \"type\": \"string\"}\n-                            ),\n-                            \"name\": \"strange_header\",\n-                            \"in\": \"header\",\n-                        }\n-                    ],\n-                }\n-            }\n-        },\n-        \"components\": {\n-            \"schemas\": {\n-                \"ValidationError\": {\n-                    \"title\": \"ValidationError\",\n-                    \"required\": [\"loc\", \"msg\", \"type\"],\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"loc\": {\n-                            \"title\": \"Location\",\n-                            \"type\": \"array\",\n-                            \"items\": {\n-                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n-                            },\n-                        },\n-                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n-                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n-                    },\n-                },\n-                \"HTTPValidationError\": {\n-                    \"title\": \"HTTPValidationError\",\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"detail\": {\n-                            \"title\": \"Detail\",\n-                            \"type\": \"array\",\n-                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n-                        }\n-                    },\n-                },\n-            }\n-        },\n-    }\n\n@@ -1,124 +0,0 @@\n-import pytest\n-from dirty_equals import IsDict\n-from fastapi.testclient import TestClient\n-\n-from ...utils import needs_py310\n-\n-\n-@pytest.fixture(name=\"client\")\n-def get_client():\n-    from docs_src.header_params.tutorial002_py310 import app\n-\n-    client = TestClient(app)\n-    return client\n-\n-\n-@needs_py310\n-@pytest.mark.parametrize(\n-    \"path,headers,expected_status,expected_response\",\n-    [\n-        (\"/items\", None, 200, {\"strange_header\": None}),\n-        (\"/items\", {\"X-Header\": \"notvalid\"}, 200, {\"strange_header\": None}),\n-        (\n-            \"/items\",\n-            {\"strange_header\": \"FastAPI test\"},\n-            200,\n-            {\"strange_header\": \"FastAPI test\"},\n-        ),\n-        (\n-            \"/items\",\n-            {\"strange-header\": \"Not really underscore\"},\n-            200,\n-            {\"strange_header\": None},\n-        ),\n-    ],\n-)\n-def test(path, headers, expected_status, expected_response, client: TestClient):\n-    response = client.get(path, headers=headers)\n-    assert response.status_code == expected_status\n-    assert response.json() == expected_response\n-\n-\n-@needs_py310\n-def test_openapi_schema():\n-    from docs_src.header_params.tutorial002_py310 import app\n-\n-    client = TestClient(app)\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200\n-    assert response.json() == {\n-        \"openapi\": \"3.1.0\",\n-        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n-        \"paths\": {\n-            \"/items/\": {\n-                \"get\": {\n-                    \"responses\": {\n-                        \"200\": {\n-                            \"description\": \"Successful Response\",\n-                            \"content\": {\"application/json\": {\"schema\": {}}},\n-                        },\n-                        \"422\": {\n-                            \"description\": \"Validation Error\",\n-                            \"content\": {\n-                                \"application/json\": {\n-                                    \"schema\": {\n-                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n-                                    }\n-                                }\n-                            },\n-                        },\n-                    },\n-                    \"summary\": \"Read Items\",\n-                    \"operationId\": \"read_items_items__get\",\n-                    \"parameters\": [\n-                        {\n-                            \"required\": False,\n-                            \"schema\": IsDict(\n-                                {\n-                                    \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n-                                    \"title\": \"Strange Header\",\n-                                }\n-                            )\n-                            | IsDict(\n-                                # TODO: remove when deprecating Pydantic v1\n-                                {\"title\": \"Strange Header\", \"type\": \"string\"}\n-                            ),\n-                            \"name\": \"strange_header\",\n-                            \"in\": \"header\",\n-                        }\n-                    ],\n-                }\n-            }\n-        },\n-        \"components\": {\n-            \"schemas\": {\n-                \"ValidationError\": {\n-                    \"title\": \"ValidationError\",\n-                    \"required\": [\"loc\", \"msg\", \"type\"],\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"loc\": {\n-                            \"title\": \"Location\",\n-                            \"type\": \"array\",\n-                            \"items\": {\n-                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n-                            },\n-                        },\n-                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n-                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n-                    },\n-                },\n-                \"HTTPValidationError\": {\n-                    \"title\": \"HTTPValidationError\",\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"detail\": {\n-                            \"title\": \"Detail\",\n-                            \"type\": \"array\",\n-                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n-                        }\n-                    },\n-                },\n-            }\n-        },\n-    }\n\n@@ -1,10 +1,27 @@\n+import importlib\n+\n import pytest\n from dirty_equals import IsDict\n from fastapi.testclient import TestClient\n \n-from docs_src.header_params.tutorial003 import app\n+from ...utils import needs_py39, needs_py310\n \n-client = TestClient(app)\n+\n+@pytest.fixture(\n+    name=\"client\",\n+    params=[\n+        \"tutorial003\",\n+        pytest.param(\"tutorial003_py310\", marks=needs_py310),\n+        \"tutorial003_an\",\n+        pytest.param(\"tutorial003_an_py39\", marks=needs_py39),\n+        pytest.param(\"tutorial003_an_py310\", marks=needs_py310),\n+    ],\n+)\n+def get_client(request: pytest.FixtureRequest):\n+    mod = importlib.import_module(f\"docs_src.header_params.{request.param}\")\n+\n+    client = TestClient(mod.app)\n+    return client\n \n \n @pytest.mark.parametrize(\n@@ -12,21 +29,17 @@ client = TestClient(app)\n     [\n         (\"/items\", None, 200, {\"X-Token values\": None}),\n         (\"/items\", {\"x-token\": \"foo\"}, 200, {\"X-Token values\": [\"foo\"]}),\n-        (\n-            \"/items\",\n-            [(\"x-token\", \"foo\"), (\"x-token\", \"bar\")],\n-            200,\n-            {\"X-Token values\": [\"foo\", \"bar\"]},\n-        ),\n+        # TODO: fix this, is it a bug?\n+        # (\"/items\", [(\"x-token\", \"foo\"), (\"x-token\", \"bar\")], 200, {\"X-Token values\": [\"foo\", \"bar\"]}),\n     ],\n )\n-def test(path, headers, expected_status, expected_response):\n+def test(path, headers, expected_status, expected_response, client: TestClient):\n     response = client.get(path, headers=headers)\n     assert response.status_code == expected_status\n     assert response.json() == expected_response\n \n \n-def test_openapi_schema():\n+def test_openapi_schema(client: TestClient):\n     response = client.get(\"/openapi.json\")\n     assert response.status_code == 200\n     assert response.json() == {\n\n@@ -1,110 +0,0 @@\n-import pytest\n-from dirty_equals import IsDict\n-from fastapi.testclient import TestClient\n-\n-from docs_src.header_params.tutorial003_an import app\n-\n-client = TestClient(app)\n-\n-\n-@pytest.mark.parametrize(\n-    \"path,headers,expected_status,expected_response\",\n-    [\n-        (\"/items\", None, 200, {\"X-Token values\": None}),\n-        (\"/items\", {\"x-token\": \"foo\"}, 200, {\"X-Token values\": [\"foo\"]}),\n-        # TODO: fix this, is it a bug?\n-        # (\"/items\", [(\"x-token\", \"foo\"), (\"x-token\", \"bar\")], 200, {\"X-Token values\": [\"foo\", \"bar\"]}),\n-    ],\n-)\n-def test(path, headers, expected_status, expected_response):\n-    response = client.get(path, headers=headers)\n-    assert response.status_code == expected_status\n-    assert response.json() == expected_response\n-\n-\n-def test_openapi_schema():\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200\n-    assert response.json() == {\n-        \"openapi\": \"3.1.0\",\n-        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n-        \"paths\": {\n-            \"/items/\": {\n-                \"get\": {\n-                    \"summary\": \"Read Items\",\n-                    \"operationId\": \"read_items_items__get\",\n-                    \"parameters\": [\n-                        {\n-                            \"required\": False,\n-                            \"schema\": IsDict(\n-                                {\n-                                    \"title\": \"X-Token\",\n-                                    \"anyOf\": [\n-                                        {\"type\": \"array\", \"items\": {\"type\": \"string\"}},\n-                                        {\"type\": \"null\"},\n-                                    ],\n-                                }\n-                            )\n-                            | IsDict(\n-                                # TODO: remove when deprecating Pydantic v1\n-                                {\n-                                    \"title\": \"X-Token\",\n-                                    \"type\": \"array\",\n-                                    \"items\": {\"type\": \"string\"},\n-                                }\n-                            ),\n-                            \"name\": \"x-token\",\n-                            \"in\": \"header\",\n-                        }\n-                    ],\n-                    \"responses\": {\n-                        \"200\": {\n-                            \"description\": \"Successful Response\",\n-                            \"content\": {\"application/json\": {\"schema\": {}}},\n-                        },\n-                        \"422\": {\n-                            \"description\": \"Validation Error\",\n-                            \"content\": {\n-                                \"application/json\": {\n-                                    \"schema\": {\n-                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n-                                    }\n-                                }\n-                            },\n-                        },\n-                    },\n-                }\n-            }\n-        },\n-        \"components\": {\n-            \"schemas\": {\n-                \"HTTPValidationError\": {\n-                    \"title\": \"HTTPValidationError\",\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"detail\": {\n-                            \"title\": \"Detail\",\n-                            \"type\": \"array\",\n-                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n-                        }\n-                    },\n-                },\n-                \"ValidationError\": {\n-                    \"title\": \"ValidationError\",\n-                    \"required\": [\"loc\", \"msg\", \"type\"],\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"loc\": {\n-                            \"title\": \"Location\",\n-                            \"type\": \"array\",\n-                            \"items\": {\n-                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n-                            },\n-                        },\n-                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n-                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n-                    },\n-                },\n-            }\n-        },\n-    }\n\n@@ -1,118 +0,0 @@\n-import pytest\n-from dirty_equals import IsDict\n-from fastapi.testclient import TestClient\n-\n-from ...utils import needs_py310\n-\n-\n-@pytest.fixture(name=\"client\")\n-def get_client():\n-    from docs_src.header_params.tutorial003_an_py310 import app\n-\n-    client = TestClient(app)\n-    return client\n-\n-\n-@needs_py310\n-@pytest.mark.parametrize(\n-    \"path,headers,expected_status,expected_response\",\n-    [\n-        (\"/items\", None, 200, {\"X-Token values\": None}),\n-        (\"/items\", {\"x-token\": \"foo\"}, 200, {\"X-Token values\": [\"foo\"]}),\n-        # TODO: fix this, is it a bug?\n-        # (\"/items\", [(\"x-token\", \"foo\"), (\"x-token\", \"bar\")], 200, {\"X-Token values\": [\"foo\", \"bar\"]}),\n-    ],\n-)\n-def test(path, headers, expected_status, expected_response, client: TestClient):\n-    response = client.get(path, headers=headers)\n-    assert response.status_code == expected_status\n-    assert response.json() == expected_response\n-\n-\n-@needs_py310\n-def test_openapi_schema(client: TestClient):\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200\n-    assert response.json() == {\n-        \"openapi\": \"3.1.0\",\n-        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n-        \"paths\": {\n-            \"/items/\": {\n-                \"get\": {\n-                    \"summary\": \"Read Items\",\n-                    \"operationId\": \"read_items_items__get\",\n-                    \"parameters\": [\n-                        {\n-                            \"required\": False,\n-                            \"schema\": IsDict(\n-                                {\n-                                    \"title\": \"X-Token\",\n-                                    \"anyOf\": [\n-                                        {\"type\": \"array\", \"items\": {\"type\": \"string\"}},\n-                                        {\"type\": \"null\"},\n-                                    ],\n-                                }\n-                            )\n-                            | IsDict(\n-                                # TODO: remove when deprecating Pydantic v1\n-                                {\n-                                    \"title\": \"X-Token\",\n-                                    \"type\": \"array\",\n-                                    \"items\": {\"type\": \"string\"},\n-                                }\n-                            ),\n-                            \"name\": \"x-token\",\n-                            \"in\": \"header\",\n-                        }\n-                    ],\n-                    \"responses\": {\n-                        \"200\": {\n-                            \"description\": \"Successful Response\",\n-                            \"content\": {\"application/json\": {\"schema\": {}}},\n-                        },\n-                        \"422\": {\n-                            \"description\": \"Validation Error\",\n-                            \"content\": {\n-                                \"application/json\": {\n-                                    \"schema\": {\n-                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n-                                    }\n-                                }\n-                            },\n-                        },\n-                    },\n-                }\n-            }\n-        },\n-        \"components\": {\n-            \"schemas\": {\n-                \"HTTPValidationError\": {\n-                    \"title\": \"HTTPValidationError\",\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"detail\": {\n-                            \"title\": \"Detail\",\n-                            \"type\": \"array\",\n-                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n-                        }\n-                    },\n-                },\n-                \"ValidationError\": {\n-                    \"title\": \"ValidationError\",\n-                    \"required\": [\"loc\", \"msg\", \"type\"],\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"loc\": {\n-                            \"title\": \"Location\",\n-                            \"type\": \"array\",\n-                            \"items\": {\n-                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n-                            },\n-                        },\n-                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n-                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n-                    },\n-                },\n-            }\n-        },\n-    }\n\n@@ -1,118 +0,0 @@\n-import pytest\n-from dirty_equals import IsDict\n-from fastapi.testclient import TestClient\n-\n-from ...utils import needs_py39\n-\n-\n-@pytest.fixture(name=\"client\")\n-def get_client():\n-    from docs_src.header_params.tutorial003_an_py39 import app\n-\n-    client = TestClient(app)\n-    return client\n-\n-\n-@needs_py39\n-@pytest.mark.parametrize(\n-    \"path,headers,expected_status,expected_response\",\n-    [\n-        (\"/items\", None, 200, {\"X-Token values\": None}),\n-        (\"/items\", {\"x-token\": \"foo\"}, 200, {\"X-Token values\": [\"foo\"]}),\n-        # TODO: fix this, is it a bug?\n-        # (\"/items\", [(\"x-token\", \"foo\"), (\"x-token\", \"bar\")], 200, {\"X-Token values\": [\"foo\", \"bar\"]}),\n-    ],\n-)\n-def test(path, headers, expected_status, expected_response, client: TestClient):\n-    response = client.get(path, headers=headers)\n-    assert response.status_code == expected_status\n-    assert response.json() == expected_response\n-\n-\n-@needs_py39\n-def test_openapi_schema(client: TestClient):\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200\n-    assert response.json() == {\n-        \"openapi\": \"3.1.0\",\n-        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n-        \"paths\": {\n-            \"/items/\": {\n-                \"get\": {\n-                    \"summary\": \"Read Items\",\n-                    \"operationId\": \"read_items_items__get\",\n-                    \"parameters\": [\n-                        {\n-                            \"required\": False,\n-                            \"schema\": IsDict(\n-                                {\n-                                    \"title\": \"X-Token\",\n-                                    \"anyOf\": [\n-                                        {\"type\": \"array\", \"items\": {\"type\": \"string\"}},\n-                                        {\"type\": \"null\"},\n-                                    ],\n-                                }\n-                            )\n-                            | IsDict(\n-                                # TODO: remove when deprecating Pydantic v1\n-                                {\n-                                    \"title\": \"X-Token\",\n-                                    \"type\": \"array\",\n-                                    \"items\": {\"type\": \"string\"},\n-                                }\n-                            ),\n-                            \"name\": \"x-token\",\n-                            \"in\": \"header\",\n-                        }\n-                    ],\n-                    \"responses\": {\n-                        \"200\": {\n-                            \"description\": \"Successful Response\",\n-                            \"content\": {\"application/json\": {\"schema\": {}}},\n-                        },\n-                        \"422\": {\n-                            \"description\": \"Validation Error\",\n-                            \"content\": {\n-                                \"application/json\": {\n-                                    \"schema\": {\n-                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n-                                    }\n-                                }\n-                            },\n-                        },\n-                    },\n-                }\n-            }\n-        },\n-        \"components\": {\n-            \"schemas\": {\n-                \"HTTPValidationError\": {\n-                    \"title\": \"HTTPValidationError\",\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"detail\": {\n-                            \"title\": \"Detail\",\n-                            \"type\": \"array\",\n-                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n-                        }\n-                    },\n-                },\n-                \"ValidationError\": {\n-                    \"title\": \"ValidationError\",\n-                    \"required\": [\"loc\", \"msg\", \"type\"],\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"loc\": {\n-                            \"title\": \"Location\",\n-                            \"type\": \"array\",\n-                            \"items\": {\n-                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n-                            },\n-                        },\n-                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n-                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n-                    },\n-                },\n-            }\n-        },\n-    }\n\n@@ -1,118 +0,0 @@\n-import pytest\n-from dirty_equals import IsDict\n-from fastapi.testclient import TestClient\n-\n-from ...utils import needs_py310\n-\n-\n-@pytest.fixture(name=\"client\")\n-def get_client():\n-    from docs_src.header_params.tutorial003_py310 import app\n-\n-    client = TestClient(app)\n-    return client\n-\n-\n-@needs_py310\n-@pytest.mark.parametrize(\n-    \"path,headers,expected_status,expected_response\",\n-    [\n-        (\"/items\", None, 200, {\"X-Token values\": None}),\n-        (\"/items\", {\"x-token\": \"foo\"}, 200, {\"X-Token values\": [\"foo\"]}),\n-        # TODO: fix this, is it a bug?\n-        # (\"/items\", [(\"x-token\", \"foo\"), (\"x-token\", \"bar\")], 200, {\"X-Token values\": [\"foo\", \"bar\"]}),\n-    ],\n-)\n-def test(path, headers, expected_status, expected_response, client: TestClient):\n-    response = client.get(path, headers=headers)\n-    assert response.status_code == expected_status\n-    assert response.json() == expected_response\n-\n-\n-@needs_py310\n-def test_openapi_schema(client: TestClient):\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200\n-    assert response.json() == {\n-        \"openapi\": \"3.1.0\",\n-        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n-        \"paths\": {\n-            \"/items/\": {\n-                \"get\": {\n-                    \"summary\": \"Read Items\",\n-                    \"operationId\": \"read_items_items__get\",\n-                    \"parameters\": [\n-                        {\n-                            \"required\": False,\n-                            \"schema\": IsDict(\n-                                {\n-                                    \"title\": \"X-Token\",\n-                                    \"anyOf\": [\n-                                        {\"type\": \"array\", \"items\": {\"type\": \"string\"}},\n-                                        {\"type\": \"null\"},\n-                                    ],\n-                                }\n-                            )\n-                            | IsDict(\n-                                # TODO: remove when deprecating Pydantic v1\n-                                {\n-                                    \"title\": \"X-Token\",\n-                                    \"type\": \"array\",\n-                                    \"items\": {\"type\": \"string\"},\n-                                }\n-                            ),\n-                            \"name\": \"x-token\",\n-                            \"in\": \"header\",\n-                        }\n-                    ],\n-                    \"responses\": {\n-                        \"200\": {\n-                            \"description\": \"Successful Response\",\n-                            \"content\": {\"application/json\": {\"schema\": {}}},\n-                        },\n-                        \"422\": {\n-                            \"description\": \"Validation Error\",\n-                            \"content\": {\n-                                \"application/json\": {\n-                                    \"schema\": {\n-                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n-                                    }\n-                                }\n-                            },\n-                        },\n-                    },\n-                }\n-            }\n-        },\n-        \"components\": {\n-            \"schemas\": {\n-                \"HTTPValidationError\": {\n-                    \"title\": \"HTTPValidationError\",\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"detail\": {\n-                            \"title\": \"Detail\",\n-                            \"type\": \"array\",\n-                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n-                        }\n-                    },\n-                },\n-                \"ValidationError\": {\n-                    \"title\": \"ValidationError\",\n-                    \"required\": [\"loc\", \"msg\", \"type\"],\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"loc\": {\n-                            \"title\": \"Location\",\n-                            \"type\": \"array\",\n-                            \"items\": {\n-                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n-                            },\n-                        },\n-                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n-                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n-                    },\n-                },\n-            }\n-        },\n-    }\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
