{"custom_id": "flask#03339501ab53794b363df9838978d15631821afe", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 0 | Lines Deleted: 21 | Files Changed: 6 | Hunks: 6 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 21 | Churn Cumulative: 21 | Contributors (this commit): 1 | Commits (past 90d): 12 | Contributors (cumulative): 6 | DMM Complexity: None\n\nDIFF:\n@@ -1,4 +0,0 @@\n-import os\n-import flask\n-here = os.path.abspath(os.path.dirname(__file__))\n-app = flask.Flask(__name__)\n\n@@ -1,4 +0,0 @@\n-import os\n-import flask\n-here = os.path.abspath(os.path.dirname(__file__))\n-app = flask.Flask(__name__)\n\n@@ -1,3 +0,0 @@\n-import flask\n-\n-app = flask.Flask(__name__)\n\n@@ -1,3 +0,0 @@\n-import flask\n-\n-app = flask.Flask(__name__)\n\n@@ -1,4 +0,0 @@\n-import flask\n-\n-# Test Flask initialization with main module.\n-app = flask.Flask('__main__')\n\n@@ -1,3 +0,0 @@\n-import flask\n-\n-app = flask.Flask(__name__)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#861aa0db1fdbc52602b8d502153a0a0b8490f124", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 19 | Lines Deleted: 19 | Files Changed: 4 | Hunks: 18 | Methods Changed: 36 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 38 | Churn Cumulative: 737 | Contributors (this commit): 1 | Commits (past 90d): 21 | Contributors (cumulative): 4 | DMM Complexity: None\n\nDIFF:\n@@ -14,8 +14,8 @@ import pytest\n import textwrap\n \n \n-@pytest.fixture(autouse=True)\n-def setup_path(monkeypatch):\n+@pytest.fixture\n+def test_apps(monkeypatch):\n     monkeypatch.syspath_prepend(\n         os.path.abspath(os.path.join(\n             os.path.dirname(__file__), 'test_apps'))\n\n@@ -140,7 +140,7 @@ def test_blueprint_url_processors():\n     assert c.get('/de/').data == b'/de/about'\n     assert c.get('/de/about').data == b'/de/'\n \n-def test_templates_and_static():\n+def test_templates_and_static(test_apps):\n     from blueprintapp import app\n     c = app.test_client()\n \n@@ -209,7 +209,7 @@ def test_default_static_cache_timeout():\n     finally:\n         app.config['SEND_FILE_MAX_AGE_DEFAULT'] = max_age_default\n \n-def test_templates_list():\n+def test_templates_list(test_apps):\n     from blueprintapp import app\n     templates = sorted(app.jinja_env.list_templates())\n     assert templates == ['admin/index.html', 'frontend/index.html']\n\n@@ -52,66 +52,66 @@ def importhook_setup(monkeypatch, request):\n \n     request.addfinalizer(teardown)\n \n-def test_flaskext_new_simple_import_normal():\n+def test_flaskext_new_simple_import_normal(test_apps):\n     from flask.ext.newext_simple import ext_id\n     assert ext_id == 'newext_simple'\n \n-def test_flaskext_new_simple_import_module():\n+def test_flaskext_new_simple_import_module(test_apps):\n     from flask.ext import newext_simple\n     assert newext_simple.ext_id == 'newext_simple'\n     assert newext_simple.__name__ == 'flask_newext_simple'\n \n-def test_flaskext_new_package_import_normal():\n+def test_flaskext_new_package_import_normal(test_apps):\n     from flask.ext.newext_package import ext_id\n     assert ext_id == 'newext_package'\n \n-def test_flaskext_new_package_import_module():\n+def test_flaskext_new_package_import_module(test_apps):\n     from flask.ext import newext_package\n     assert newext_package.ext_id == 'newext_package'\n     assert newext_package.__name__ == 'flask_newext_package'\n \n-def test_flaskext_new_package_import_submodule_function():\n+def test_flaskext_new_package_import_submodule_function(test_apps):\n     from flask.ext.newext_package.submodule import test_function\n     assert test_function() == 42\n \n-def test_flaskext_new_package_import_submodule():\n+def test_flaskext_new_package_import_submodule(test_apps):\n     from flask.ext.newext_package import submodule\n     assert submodule.__name__ == 'flask_newext_package.submodule'\n     assert submodule.test_function() == 42\n \n-def test_flaskext_old_simple_import_normal():\n+def test_flaskext_old_simple_import_normal(test_apps):\n     from flask.ext.oldext_simple import ext_id\n     assert ext_id == 'oldext_simple'\n \n-def test_flaskext_old_simple_import_module():\n+def test_flaskext_old_simple_import_module(test_apps):\n     from flask.ext import oldext_simple\n     assert oldext_simple.ext_id == 'oldext_simple'\n     assert oldext_simple.__name__ == 'flaskext.oldext_simple'\n \n-def test_flaskext_old_package_import_normal():\n+def test_flaskext_old_package_import_normal(test_apps):\n     from flask.ext.oldext_package import ext_id\n     assert ext_id == 'oldext_package'\n \n-def test_flaskext_old_package_import_module():\n+def test_flaskext_old_package_import_module(test_apps):\n     from flask.ext import oldext_package\n     assert oldext_package.ext_id == 'oldext_package'\n     assert oldext_package.__name__ == 'flaskext.oldext_package'\n \n-def test_flaskext_old_package_import_submodule():\n+def test_flaskext_old_package_import_submodule(test_apps):\n     from flask.ext.oldext_package import submodule\n     assert submodule.__name__ == 'flaskext.oldext_package.submodule'\n     assert submodule.test_function() == 42\n \n-def test_flaskext_old_package_import_submodule_function():\n+def test_flaskext_old_package_import_submodule_function(test_apps):\n     from flask.ext.oldext_package.submodule import test_function\n     assert test_function() == 42\n \n-def test_flaskext_broken_package_no_module_caching():\n+def test_flaskext_broken_package_no_module_caching(test_apps):\n     for x in range(2):\n         with pytest.raises(ImportError):\n             import flask.ext.broken\n \n-def test_no_error_swallowing():\n+def test_no_error_swallowing(test_apps):\n     try:\n         import flask.ext.broken\n     except ImportError:\n\n@@ -306,7 +306,7 @@ def test_templates_auto_reload():\n     app.config['TEMPLATES_AUTO_RELOAD'] = False\n     assert not app.jinja_env.auto_reload\n \n-def test_template_loader_debugging():\n+def test_template_loader_debugging(test_apps):\n     from blueprintapp import app\n \n     called = []\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#4ea4ea7f93c97043887a280f2cceaad06d615621", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 0 | Lines Deleted: 20 | Files Changed: 1 | Hunks: 1 | Methods Changed: 2 | Complexity Δ (Sum/Max): -7/0 | Churn Δ: 20 | Churn Cumulative: 265 | Contributors (this commit): 1 | Commits (past 90d): 7 | Contributors (cumulative): 1 | DMM Complexity: 0.0\n\nDIFF:\n@@ -20,26 +20,6 @@ from contextlib import contextmanager\n from flask._compat import StringIO\n \n \n-def add_to_path(path):\n-    \"\"\"Adds an entry to sys.path if it's not already there.  This does\n-    not append it but moves it to the front so that we can be sure it\n-    is loaded.\n-    \"\"\"\n-    if not os.path.isdir(path):\n-        raise RuntimeError('Tried to add nonexisting path')\n-\n-    def _samefile(x, y):\n-        if x == y:\n-            return True\n-        try:\n-            return os.path.samefile(x, y)\n-        except (IOError, OSError, AttributeError):\n-            # Windows has no samefile\n-            return False\n-    sys.path[:] = [x for x in sys.path if not _samefile(path, x)]\n-    sys.path.insert(0, path)\n-\n-\n @contextmanager\n def catch_warnings():\n     \"\"\"Catch warnings in a with block in a list\"\"\"\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#b88a837674421f492f879c0a0122b0bb921d038e", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 76 | Lines Deleted: 36 | Files Changed: 10 | Hunks: 28 | Methods Changed: 36 | Complexity Δ (Sum/Max): 4/4 | Churn Δ: 112 | Churn Cumulative: 251 | Contributors (this commit): 1 | Commits (past 90d): 25 | Contributors (cumulative): 10 | DMM Complexity: 0.8823529411764706\n\nDIFF:\n@@ -1,2 +0,0 @@\n-import flask.ext.broken.b\n-import missing_module\n\n\n@@ -1 +0,0 @@\n-ext_id = 'newext_package'\n\n@@ -1,2 +0,0 @@\n-def test_function():\n-    return 42\n\n@@ -1 +0,0 @@\n-ext_id = 'newext_simple'\n\n\n@@ -1 +0,0 @@\n-ext_id = 'oldext_package'\n\n@@ -1,2 +0,0 @@\n-def test_function():\n-    return 42\n\n@@ -1 +0,0 @@\n-ext_id = 'oldext_simple'\n\n@@ -10,7 +10,6 @@\n \"\"\"\n \n import sys\n-import unittest\n import pytest\n \n try:\n@@ -28,10 +27,12 @@ def importhook_setup(monkeypatch, request):\n     # fake package.  Secondly we want to make sure that the flaskext\n     # import hook does not break on reloading.\n     for entry, value in list(sys.modules.items()):\n-        if (entry.startswith('flask.ext.') or\n+        if (\n+            entry.startswith('flask.ext.') or\n             entry.startswith('flask_') or\n             entry.startswith('flaskext.') or\n-            entry == 'flaskext') and value is not None:\n+            entry == 'flaskext'\n+        ) and value is not None:\n             monkeypatch.delitem(sys.modules, entry)\n     from flask import ext\n     reload_module(ext)\n@@ -52,86 +53,135 @@ def importhook_setup(monkeypatch, request):\n \n     request.addfinalizer(teardown)\n \n-def test_flaskext_new_simple_import_normal(test_apps):\n+\n+@pytest.fixture\n+def newext_simple(apps_tmpdir):\n+    x = apps_tmpdir.join('flask_newext_simple.py')\n+    x.write('ext_id = \"newext_simple\"')\n+\n+\n+@pytest.fixture\n+def oldext_simple(apps_tmpdir):\n+    flaskext = apps_tmpdir.mkdir('flaskext')\n+    flaskext.join('__init__.py').write('\\n')\n+    flaskext.join('oldext_simple.py').write('ext_id = \"oldext_simple\"')\n+\n+\n+@pytest.fixture\n+def newext_package(apps_tmpdir):\n+    pkg = apps_tmpdir.mkdir('flask_newext_package')\n+    pkg.join('__init__.py').write('ext_id = \"newext_package\"')\n+    pkg.join('submodule.py').write('def test_function():\\n    return 42\\n')\n+\n+\n+@pytest.fixture\n+def oldext_package(apps_tmpdir):\n+    flaskext = apps_tmpdir.mkdir('flaskext')\n+    flaskext.join('__init__.py').write('\\n')\n+    oldext = flaskext.mkdir('oldext_package')\n+    oldext.join('__init__.py').write('ext_id = \"oldext_package\"')\n+    oldext.join('submodule.py').write('def test_function():\\n'\n+                                      '    return 42')\n+\n+\n+@pytest.fixture\n+def flaskext_broken(apps_tmpdir):\n+    ext = apps_tmpdir.mkdir('flask_broken')\n+    ext.join('b.py').write('\\n')\n+    ext.join('__init__.py').write('import flask.ext.broken.b\\n'\n+                                  'import missing_module')\n+\n+\n+def test_flaskext_new_simple_import_normal(newext_simple):\n     from flask.ext.newext_simple import ext_id\n     assert ext_id == 'newext_simple'\n \n-def test_flaskext_new_simple_import_module(test_apps):\n+\n+def test_flaskext_new_simple_import_module(newext_simple):\n     from flask.ext import newext_simple\n     assert newext_simple.ext_id == 'newext_simple'\n     assert newext_simple.__name__ == 'flask_newext_simple'\n \n-def test_flaskext_new_package_import_normal(test_apps):\n+\n+def test_flaskext_new_package_import_normal(newext_package):\n     from flask.ext.newext_package import ext_id\n     assert ext_id == 'newext_package'\n \n-def test_flaskext_new_package_import_module(test_apps):\n+\n+def test_flaskext_new_package_import_module(newext_package):\n     from flask.ext import newext_package\n     assert newext_package.ext_id == 'newext_package'\n     assert newext_package.__name__ == 'flask_newext_package'\n \n-def test_flaskext_new_package_import_submodule_function(test_apps):\n+\n+def test_flaskext_new_package_import_submodule_function(newext_package):\n     from flask.ext.newext_package.submodule import test_function\n     assert test_function() == 42\n \n-def test_flaskext_new_package_import_submodule(test_apps):\n+\n+def test_flaskext_new_package_import_submodule(newext_package):\n     from flask.ext.newext_package import submodule\n     assert submodule.__name__ == 'flask_newext_package.submodule'\n     assert submodule.test_function() == 42\n \n-def test_flaskext_old_simple_import_normal(test_apps):\n+\n+def test_flaskext_old_simple_import_normal(oldext_simple):\n     from flask.ext.oldext_simple import ext_id\n     assert ext_id == 'oldext_simple'\n \n-def test_flaskext_old_simple_import_module(test_apps):\n+\n+def test_flaskext_old_simple_import_module(oldext_simple):\n     from flask.ext import oldext_simple\n     assert oldext_simple.ext_id == 'oldext_simple'\n     assert oldext_simple.__name__ == 'flaskext.oldext_simple'\n \n-def test_flaskext_old_package_import_normal(test_apps):\n+\n+def test_flaskext_old_package_import_normal(oldext_package):\n     from flask.ext.oldext_package import ext_id\n     assert ext_id == 'oldext_package'\n \n-def test_flaskext_old_package_import_module(test_apps):\n+\n+def test_flaskext_old_package_import_module(oldext_package):\n     from flask.ext import oldext_package\n     assert oldext_package.ext_id == 'oldext_package'\n     assert oldext_package.__name__ == 'flaskext.oldext_package'\n \n-def test_flaskext_old_package_import_submodule(test_apps):\n+\n+def test_flaskext_old_package_import_submodule(oldext_package):\n     from flask.ext.oldext_package import submodule\n     assert submodule.__name__ == 'flaskext.oldext_package.submodule'\n     assert submodule.test_function() == 42\n \n-def test_flaskext_old_package_import_submodule_function(test_apps):\n+\n+def test_flaskext_old_package_import_submodule_function(oldext_package):\n     from flask.ext.oldext_package.submodule import test_function\n     assert test_function() == 42\n \n-def test_flaskext_broken_package_no_module_caching(test_apps):\n+\n+def test_flaskext_broken_package_no_module_caching(flaskext_broken):\n     for x in range(2):\n         with pytest.raises(ImportError):\n             import flask.ext.broken\n \n-def test_no_error_swallowing(test_apps):\n-    try:\n+\n+def test_no_error_swallowing(flaskext_broken):\n+    with pytest.raises(ImportError) as excinfo:\n         import flask.ext.broken\n-    except ImportError:\n-        exc_type, exc_value, tb = sys.exc_info()\n-        assert exc_type is ImportError\n+\n+    assert excinfo.type is ImportError\n     if PY2:\n         message = 'No module named missing_module'\n     else:\n         message = 'No module named \\'missing_module\\''\n-        assert str(exc_value) == message\n-        assert tb.tb_frame.f_globals is globals()\n+    assert str(excinfo.value) == message\n+    assert excinfo.tb.tb_frame.f_globals is globals()\n \n     # reraise() adds a second frame so we need to skip that one too.\n     # On PY3 we even have another one :(\n-        next = tb.tb_next.tb_next\n+    next = excinfo.tb.tb_next.tb_next\n     if not PY2:\n         next = next.tb_next\n \n     import os.path\n     assert os.path.join('flask_broken', '__init__.py') in \\\n         next.tb_frame.f_code.co_filename\n-    else:\n-        1/0  # XXX\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#a00ccdce9429188d349cad5a2f5d6f21b2a84c39", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 3 | Files Changed: 2 | Hunks: 2 | Methods Changed: 2 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 5 | Churn Cumulative: 262 | Contributors (this commit): 1 | Commits (past 90d): 9 | Contributors (cumulative): 2 | DMM Complexity: 1.0\n\nDIFF:\n@@ -1,2 +0,0 @@\n-# TestNoImports\n-raise NotImplementedError\n\n@@ -577,7 +577,8 @@ class TestNoImports(object):\n     imp modules in the Python standard library.\n     \"\"\"\n \n-    def test_name_with_import_error(self):\n+    def test_name_with_import_error(self, apps_tmpdir):\n+        apps_tmpdir.join('importerror.py').write('raise NotImplementedError()')\n         try:\n             flask.Flask('importerror')\n         except NotImplementedError:\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#77d887526d9776b15acbb43f31d00148debf0db9", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 48 | Lines Deleted: 48 | Files Changed: 4 | Hunks: 30 | Methods Changed: 38 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 96 | Churn Cumulative: 1231 | Contributors (this commit): 1 | Commits (past 90d): 28 | Contributors (cumulative): 4 | DMM Complexity: None\n\nDIFF:\n@@ -66,23 +66,23 @@ def limit_loader(request, monkeypatch):\n \n \n @pytest.fixture\n-def apps_tmpdir(tmpdir, monkeypatch):\n-    '''Test folder for all instance tests.'''\n-    rv = tmpdir.mkdir('test_apps')\n+def modules_tmpdir(tmpdir, monkeypatch):\n+    '''A tmpdir added to sys.path'''\n+    rv = tmpdir.mkdir('modules_tmpdir')\n     monkeypatch.syspath_prepend(str(rv))\n     return rv\n \n \n @pytest.fixture\n-def apps_tmpdir_prefix(apps_tmpdir, monkeypatch):\n-    monkeypatch.setattr(sys, 'prefix', str(apps_tmpdir))\n-    return apps_tmpdir\n+def modules_tmpdir_prefix(modules_tmpdir, monkeypatch):\n+    monkeypatch.setattr(sys, 'prefix', str(modules_tmpdir))\n+    return modules_tmpdir\n \n \n @pytest.fixture\n-def site_packages(apps_tmpdir, monkeypatch):\n+def site_packages(modules_tmpdir, monkeypatch):\n     '''Create a fake site-packages'''\n-    rv = apps_tmpdir \\\n+    rv = modules_tmpdir \\\n         .mkdir('lib')\\\n         .mkdir('python{x[0]}.{x[1]}'.format(x=sys.version_info))\\\n         .mkdir('site-packages')\n@@ -91,10 +91,10 @@ def site_packages(apps_tmpdir, monkeypatch):\n \n \n @pytest.fixture\n-def install_egg(apps_tmpdir, monkeypatch):\n+def install_egg(modules_tmpdir, monkeypatch):\n     '''Generate egg from package name inside base and put the egg into\n     sys.path'''\n-    def inner(name, base=apps_tmpdir):\n+    def inner(name, base=modules_tmpdir):\n         if not isinstance(name, str):\n             raise ValueError(name)\n         base.join(name).ensure_dir()\n@@ -112,9 +112,9 @@ def install_egg(apps_tmpdir, monkeypatch):\n         import subprocess\n         subprocess.check_call(\n             [sys.executable, 'setup.py', 'bdist_egg'],\n-            cwd=str(apps_tmpdir)\n+            cwd=str(modules_tmpdir)\n         )\n-        egg_path, = apps_tmpdir.join('dist/').listdir()\n+        egg_path, = modules_tmpdir.join('dist/').listdir()\n         monkeypatch.syspath_prepend(str(egg_path))\n         return egg_path\n     return inner\n\n@@ -182,16 +182,16 @@ class TestConfig(object):\n \n \n class TestInstance(object):\n-    def test_explicit_instance_paths(self, apps_tmpdir):\n+    def test_explicit_instance_paths(self, modules_tmpdir):\n         with pytest.raises(ValueError) as excinfo:\n             flask.Flask(__name__, instance_path='instance')\n         assert 'must be absolute' in str(excinfo.value)\n \n-        app = flask.Flask(__name__, instance_path=str(apps_tmpdir))\n-        assert app.instance_path == str(apps_tmpdir)\n+        app = flask.Flask(__name__, instance_path=str(modules_tmpdir))\n+        assert app.instance_path == str(modules_tmpdir)\n \n-    def test_main_module_paths(self, apps_tmpdir, purge_module):\n-        app = apps_tmpdir.join('main_app.py')\n+    def test_main_module_paths(self, modules_tmpdir, purge_module):\n+        app = modules_tmpdir.join('main_app.py')\n         app.write('import flask\\n\\napp = flask.Flask(\"__main__\")')\n         purge_module('main_app')\n \n@@ -199,8 +199,8 @@ class TestInstance(object):\n         here = os.path.abspath(os.getcwd())\n         assert app.instance_path == os.path.join(here, 'instance')\n \n-    def test_uninstalled_module_paths(self, apps_tmpdir, purge_module):\n-        app = apps_tmpdir.join('config_module_app.py').write(\n+    def test_uninstalled_module_paths(self, modules_tmpdir, purge_module):\n+        app = modules_tmpdir.join('config_module_app.py').write(\n             'import os\\n'\n             'import flask\\n'\n             'here = os.path.abspath(os.path.dirname(__file__))\\n'\n@@ -209,10 +209,10 @@ class TestInstance(object):\n         purge_module('config_module_app')\n \n         from config_module_app import app\n-        assert app.instance_path == str(apps_tmpdir.join('instance'))\n+        assert app.instance_path == str(modules_tmpdir.join('instance'))\n \n-    def test_uninstalled_package_paths(self, apps_tmpdir, purge_module):\n-        app = apps_tmpdir.mkdir('config_package_app')\n+    def test_uninstalled_package_paths(self, modules_tmpdir, purge_module):\n+        app = modules_tmpdir.mkdir('config_package_app')\n         init = app.join('__init__.py')\n         init.write(\n             'import os\\n'\n@@ -223,9 +223,9 @@ class TestInstance(object):\n         purge_module('config_package_app')\n \n         from config_package_app import app\n-        assert app.instance_path == str(apps_tmpdir.join('instance'))\n+        assert app.instance_path == str(modules_tmpdir.join('instance'))\n \n-    def test_installed_module_paths(self, apps_tmpdir, apps_tmpdir_prefix,\n+    def test_installed_module_paths(self, modules_tmpdir, modules_tmpdir_prefix,\n                                     purge_module, site_packages, limit_loader):\n         site_packages.join('site_app.py').write(\n             'import flask\\n'\n@@ -235,12 +235,12 @@ class TestInstance(object):\n \n         from site_app import app\n         assert app.instance_path == \\\n-            apps_tmpdir.join('var').join('site_app-instance')\n+            modules_tmpdir.join('var').join('site_app-instance')\n \n-    def test_installed_package_paths(self, limit_loader, apps_tmpdir,\n-                                     apps_tmpdir_prefix, purge_module,\n+    def test_installed_package_paths(self, limit_loader, modules_tmpdir,\n+                                     modules_tmpdir_prefix, purge_module,\n                                      monkeypatch):\n-        installed_path = apps_tmpdir.mkdir('path')\n+        installed_path = modules_tmpdir.mkdir('path')\n         monkeypatch.syspath_prepend(installed_path)\n \n         app = installed_path.mkdir('installed_package')\n@@ -250,10 +250,10 @@ class TestInstance(object):\n \n         from installed_package import app\n         assert app.instance_path == \\\n-            apps_tmpdir.join('var').join('installed_package-instance')\n+            modules_tmpdir.join('var').join('installed_package-instance')\n \n-    def test_prefix_package_paths(self, limit_loader, apps_tmpdir,\n-                                  apps_tmpdir_prefix, purge_module,\n+    def test_prefix_package_paths(self, limit_loader, modules_tmpdir,\n+                                  modules_tmpdir_prefix, purge_module,\n                                   site_packages):\n         app = site_packages.mkdir('site_package')\n         init = app.join('__init__.py')\n@@ -262,18 +262,18 @@ class TestInstance(object):\n \n         import site_package\n         assert site_package.app.instance_path == \\\n-            apps_tmpdir.join('var').join('site_package-instance')\n+            modules_tmpdir.join('var').join('site_package-instance')\n \n-    def test_egg_installed_paths(self, install_egg, apps_tmpdir,\n-                                 apps_tmpdir_prefix):\n-        apps_tmpdir.mkdir('site_egg').join('__init__.py').write(\n+    def test_egg_installed_paths(self, install_egg, modules_tmpdir,\n+                                 modules_tmpdir_prefix):\n+        modules_tmpdir.mkdir('site_egg').join('__init__.py').write(\n             'import flask\\n\\napp = flask.Flask(__name__)'\n         )\n         install_egg('site_egg')\n         try:\n             import site_egg\n             assert site_egg.app.instance_path == \\\n-                str(apps_tmpdir.join('var/').join('site_egg-instance'))\n+                str(modules_tmpdir.join('var/').join('site_egg-instance'))\n         finally:\n             if 'site_egg' in sys.modules:\n                 del sys.modules['site_egg']\n\n@@ -55,28 +55,28 @@ def importhook_setup(monkeypatch, request):\n \n \n @pytest.fixture\n-def newext_simple(apps_tmpdir):\n-    x = apps_tmpdir.join('flask_newext_simple.py')\n+def newext_simple(modules_tmpdir):\n+    x = modules_tmpdir.join('flask_newext_simple.py')\n     x.write('ext_id = \"newext_simple\"')\n \n \n @pytest.fixture\n-def oldext_simple(apps_tmpdir):\n-    flaskext = apps_tmpdir.mkdir('flaskext')\n+def oldext_simple(modules_tmpdir):\n+    flaskext = modules_tmpdir.mkdir('flaskext')\n     flaskext.join('__init__.py').write('\\n')\n     flaskext.join('oldext_simple.py').write('ext_id = \"oldext_simple\"')\n \n \n @pytest.fixture\n-def newext_package(apps_tmpdir):\n-    pkg = apps_tmpdir.mkdir('flask_newext_package')\n+def newext_package(modules_tmpdir):\n+    pkg = modules_tmpdir.mkdir('flask_newext_package')\n     pkg.join('__init__.py').write('ext_id = \"newext_package\"')\n     pkg.join('submodule.py').write('def test_function():\\n    return 42\\n')\n \n \n @pytest.fixture\n-def oldext_package(apps_tmpdir):\n-    flaskext = apps_tmpdir.mkdir('flaskext')\n+def oldext_package(modules_tmpdir):\n+    flaskext = modules_tmpdir.mkdir('flaskext')\n     flaskext.join('__init__.py').write('\\n')\n     oldext = flaskext.mkdir('oldext_package')\n     oldext.join('__init__.py').write('ext_id = \"oldext_package\"')\n@@ -85,8 +85,8 @@ def oldext_package(apps_tmpdir):\n \n \n @pytest.fixture\n-def flaskext_broken(apps_tmpdir):\n-    ext = apps_tmpdir.mkdir('flask_broken')\n+def flaskext_broken(modules_tmpdir):\n+    ext = modules_tmpdir.mkdir('flask_broken')\n     ext.join('b.py').write('\\n')\n     ext.join('__init__.py').write('import flask.ext.broken.b\\n'\n                                   'import missing_module')\n\n@@ -577,8 +577,8 @@ class TestNoImports(object):\n     imp modules in the Python standard library.\n     \"\"\"\n \n-    def test_name_with_import_error(self, apps_tmpdir):\n-        apps_tmpdir.join('importerror.py').write('raise NotImplementedError()')\n+    def test_name_with_import_error(self, modules_tmpdir):\n+        modules_tmpdir.join('importerror.py').write('raise NotImplementedError()')\n         try:\n             flask.Flask('importerror')\n         except NotImplementedError:\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#f8a778deaeb9fd63d3aaa004fce27d07751a9d59", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 23 | Lines Deleted: 37 | Files Changed: 1 | Hunks: 18 | Methods Changed: 29 | Complexity Δ (Sum/Max): -4/0 | Churn Δ: 60 | Churn Cumulative: 194 | Contributors (this commit): 1 | Commits (past 90d): 6 | Contributors (cumulative): 1 | DMM Complexity: 0.0\n\nDIFF:\n@@ -16,9 +16,7 @@ import unittest\n from flask._compat import text_type\n \n \n-class TestTestTools(object):\n-\n-    def test_environ_defaults_from_config(self):\n+def test_environ_defaults_from_config():\n     app = flask.Flask(__name__)\n     app.testing = True\n     app.config['SERVER_NAME'] = 'example.com:1234'\n@@ -33,7 +31,7 @@ class TestTestTools(object):\n         rv = c.get('/')\n         assert rv.data == b'http://example.com:1234/foo/'\n \n-    def test_environ_defaults(self):\n+def test_environ_defaults():\n     app = flask.Flask(__name__)\n     app.testing = True\n     @app.route('/')\n@@ -46,7 +44,7 @@ class TestTestTools(object):\n         rv = c.get('/')\n         assert rv.data == b'http://localhost/'\n \n-    def test_redirect_keep_session(self):\n+def test_redirect_keep_session():\n     app = flask.Flask(__name__)\n     app.secret_key = 'testing'\n \n@@ -78,7 +76,7 @@ class TestTestTools(object):\n         rv = c.get('/getsession')\n         assert rv.data == b'foo'\n \n-    def test_session_transactions(self):\n+def test_session_transactions():\n     app = flask.Flask(__name__)\n     app.testing = True\n     app.secret_key = 'testing'\n@@ -98,7 +96,7 @@ class TestTestTools(object):\n             assert len(sess) == 1\n             assert sess['foo'] == [42]\n \n-    def test_session_transactions_no_null_sessions(self):\n+def test_session_transactions_no_null_sessions():\n     app = flask.Flask(__name__)\n     app.testing = True\n \n@@ -111,7 +109,7 @@ class TestTestTools(object):\n         else:\n             assert False, 'Expected runtime error'\n \n-    def test_session_transactions_keep_context(self):\n+def test_session_transactions_keep_context():\n     app = flask.Flask(__name__)\n     app.testing = True\n     app.secret_key = 'testing'\n@@ -123,7 +121,7 @@ class TestTestTools(object):\n         with c.session_transaction():\n             assert req is flask.request._get_current_object()\n \n-    def test_session_transaction_needs_cookies(self):\n+def test_session_transaction_needs_cookies():\n     app = flask.Flask(__name__)\n     app.testing = True\n     c = app.test_client(use_cookies=False)\n@@ -135,7 +133,7 @@ class TestTestTools(object):\n     else:\n         assert False, 'Expected runtime error'\n \n-    def test_test_client_context_binding(self):\n+def test_test_client_context_binding():\n     app = flask.Flask(__name__)\n     app.config['LOGGER_HANDLER_POLICY'] = 'never'\n     @app.route('/')\n@@ -166,7 +164,7 @@ class TestTestTools(object):\n     else:\n         raise AssertionError('some kind of exception expected')\n \n-    def test_reuse_client(self):\n+def test_reuse_client():\n     app = flask.Flask(__name__)\n     c = app.test_client()\n \n@@ -176,7 +174,7 @@ class TestTestTools(object):\n     with c:\n         assert c.get('/').status_code == 404\n \n-    def test_test_client_calls_teardown_handlers(self):\n+def test_test_client_calls_teardown_handlers():\n     app = flask.Flask(__name__)\n     called = []\n     @app.teardown_request\n@@ -198,7 +196,7 @@ class TestTestTools(object):\n         assert called == [None]\n     assert called == [None, None]\n \n-    def test_full_url_request(self):\n+def test_full_url_request():\n     app = flask.Flask(__name__)\n     app.testing = True\n \n@@ -212,46 +210,34 @@ class TestTestTools(object):\n         assert 'gin' in flask.request.form\n         assert 'vodka' in flask.request.args\n \n-\n-class TestSubdomain(object):\n-\n-    @pytest.fixture\n-    def app(self, request):\n+def test_subdomain():\n     app = flask.Flask(__name__)\n     app.config['SERVER_NAME'] = 'example.com'\n-\n-        ctx = app.test_request_context()\n-        ctx.push()\n-\n-        def teardown():\n-            if ctx is not None:\n-                ctx.pop()\n-        request.addfinalizer(teardown)\n-        return app\n-\n-    @pytest.fixture\n-    def client(self, app):\n-        return app.test_client()\n-\n-    def test_subdomain(self, app, client):\n     @app.route('/', subdomain='<company_id>')\n     def view(company_id):\n         return company_id\n \n+    with app.test_request_context():\n         url = flask.url_for('view', company_id='xxx')\n-        response = client.get(url)\n+\n+    with app.test_client() as c:\n+        response = c.get(url)\n \n     assert 200 == response.status_code\n     assert b'xxx' == response.data\n \n-\n-    def test_nosubdomain(self, app, client):\n+def test_nosubdomain():\n+    app = flask.Flask(__name__)\n+    app.config['SERVER_NAME'] = 'example.com'\n     @app.route('/<company_id>')\n     def view(company_id):\n         return company_id\n \n+    with app.test_request_context():\n         url = flask.url_for('view', company_id='xxx')\n-        response = client.get(url)\n+\n+    with app.test_client() as c:\n+        response = c.get(url)\n \n     assert 200 == response.status_code\n     assert b'xxx' == response.data\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#71dae377330109455ed26d1eb912e243125e3007", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 7 | Lines Deleted: 17 | Files Changed: 1 | Hunks: 7 | Methods Changed: 9 | Complexity Δ (Sum/Max): -2/0 | Churn Δ: 24 | Churn Cumulative: 73 | Contributors (this commit): 1 | Commits (past 90d): 7 | Contributors (cumulative): 1 | DMM Complexity: 0.0\n\nDIFF:\n@@ -19,14 +19,10 @@ import threading\n from werkzeug.exceptions import NotFound\n \n \n-\n _gc_lock = threading.Lock()\n \n \n-class _NoLeakAsserter(object):\n-\n-    def __init__(self, testcase):\n-        self.testcase = testcase\n+class assert_no_leak(object):\n \n     def __enter__(self):\n         gc.disable()\n@@ -47,7 +43,7 @@ class _NoLeakAsserter(object):\n             gc.collect()\n         new_objects = len(gc.get_objects())\n         if new_objects > self.old_objects:\n-            self.testcase.fail('Example code leaked')\n+            pytest.fail('Example code leaked')\n         _gc_lock.release()\n         gc.enable()\n \n@@ -56,12 +52,7 @@ class _NoLeakAsserter(object):\n # ported Flask to Python 3.\n @pytest.mark.skipif(os.environ.get('RUN_FLASK_MEMORY_TESTS') != '1',\n                     reason='Turned off due to envvar.')\n-class TestMemory(object):\n-\n-    def assert_no_leak(self):\n-        return _NoLeakAsserter(self)\n-\n-    def test_memory_consumption(self):\n+def test_memory_consumption():\n     app = flask.Flask(__name__)\n \n     @app.route('/')\n@@ -80,19 +71,18 @@ class TestMemory(object):\n     # This test only works on CPython 2.7.\n     if sys.version_info >= (2, 7) and \\\n             not hasattr(sys, 'pypy_translation_info'):\n-            with self.assert_no_leak():\n+        with assert_no_leak():\n             for x in range(10):\n                 fire()\n \n-    def test_safe_join_toplevel_pardir(self):\n+\n+def test_safe_join_toplevel_pardir():\n     from flask.helpers import safe_join\n     with pytest.raises(NotFound):\n         safe_join('/foo', '..')\n \n \n-class TestException(object):\n-\n-    def test_aborting(self):\n+def test_aborting():\n     class Foo(Exception):\n         whatever = 42\n     app = flask.Flask(__name__)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#a4931ff3a74d9fcd8766bee69a01b62a75a5e131", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 223 | Lines Deleted: 81 | Files Changed: 1 | Hunks: 160 | Methods Changed: 131 | Complexity Δ (Sum/Max): -1/0 | Churn Δ: 304 | Churn Cumulative: 866 | Contributors (this commit): 1 | Commits (past 90d): 6 | Contributors (cumulative): 1 | DMM Complexity: 1.0\n\nDIFF:\n@@ -16,20 +16,17 @@ import uuid\n import time\n import flask\n import pickle\n-import unittest\n from datetime import datetime\n from threading import Thread\n-from tests import emits_module_deprecation_warning\n from flask._compat import text_type\n from werkzeug.exceptions import BadRequest, NotFound, Forbidden\n from werkzeug.http import parse_date\n from werkzeug.routing import BuildError\n \n \n-class TestBasicFunctionality(object):\n-\n-    def test_options_work(self):\n+def test_options_work():\n     app = flask.Flask(__name__)\n+\n     @app.route('/', methods=['GET', 'POST'])\n     def index():\n         return 'Hello World'\n@@ -37,19 +34,24 @@ class TestBasicFunctionality(object):\n     assert sorted(rv.allow) == ['GET', 'HEAD', 'OPTIONS', 'POST']\n     assert rv.data == b''\n \n-    def test_options_on_multiple_rules(self):\n+\n+def test_options_on_multiple_rules():\n     app = flask.Flask(__name__)\n+\n     @app.route('/', methods=['GET', 'POST'])\n     def index():\n         return 'Hello World'\n+\n     @app.route('/', methods=['PUT'])\n     def index_put():\n         return 'Aha!'\n     rv = app.test_client().open('/', method='OPTIONS')\n     assert sorted(rv.allow) == ['GET', 'HEAD', 'OPTIONS', 'POST', 'PUT']\n \n-    def test_options_handling_disabled(self):\n+\n+def test_options_handling_disabled():\n     app = flask.Flask(__name__)\n+\n     def index():\n         return 'Hello World!'\n     index.provide_automatic_options = False\n@@ -58,6 +60,7 @@ class TestBasicFunctionality(object):\n     assert rv.status_code == 405\n \n     app = flask.Flask(__name__)\n+\n     def index2():\n         return 'Hello World!'\n     index2.provide_automatic_options = True\n@@ -65,11 +68,14 @@ class TestBasicFunctionality(object):\n     rv = app.test_client().open('/', method='OPTIONS')\n     assert sorted(rv.allow) == ['OPTIONS']\n \n-    def test_request_dispatching(self):\n+\n+def test_request_dispatching():\n     app = flask.Flask(__name__)\n+\n     @app.route('/')\n     def index():\n         return flask.request.method\n+\n     @app.route('/more', methods=['GET', 'POST'])\n     def more():\n         return flask.request.method\n@@ -88,17 +94,21 @@ class TestBasicFunctionality(object):\n     assert rv.status_code == 405\n     assert sorted(rv.allow) == ['GET', 'HEAD', 'OPTIONS', 'POST']\n \n-    def test_disallow_string_for_allowed_methods(self):\n+\n+def test_disallow_string_for_allowed_methods():\n     app = flask.Flask(__name__)\n     with pytest.raises(TypeError):\n         @app.route('/', methods='GET POST')\n         def index():\n             return \"Hey\"\n \n-    def test_url_mapping(self):\n+\n+def test_url_mapping():\n     app = flask.Flask(__name__)\n+\n     def index():\n         return flask.request.method\n+\n     def more():\n         return flask.request.method\n \n@@ -119,15 +129,18 @@ class TestBasicFunctionality(object):\n     assert rv.status_code == 405\n     assert sorted(rv.allow) == ['GET', 'HEAD', 'OPTIONS', 'POST']\n \n-    def test_werkzeug_routing(self):\n+\n+def test_werkzeug_routing():\n     from werkzeug.routing import Submount, Rule\n     app = flask.Flask(__name__)\n     app.url_map.add(Submount('/foo', [\n         Rule('/bar', endpoint='bar'),\n         Rule('/', endpoint='index')\n     ]))\n+\n     def bar():\n         return 'bar'\n+\n     def index():\n         return 'index'\n     app.view_functions['bar'] = bar\n@@ -137,7 +150,8 @@ class TestBasicFunctionality(object):\n     assert c.get('/foo/').data == b'index'\n     assert c.get('/foo/bar').data == b'bar'\n \n-    def test_endpoint_decorator(self):\n+\n+def test_endpoint_decorator():\n     from werkzeug.routing import Submount, Rule\n     app = flask.Flask(__name__)\n     app.url_map.add(Submount('/foo', [\n@@ -157,13 +171,16 @@ class TestBasicFunctionality(object):\n     assert c.get('/foo/').data == b'index'\n     assert c.get('/foo/bar').data == b'bar'\n \n-    def test_session(self):\n+\n+def test_session():\n     app = flask.Flask(__name__)\n     app.secret_key = 'testkey'\n+\n     @app.route('/set', methods=['POST'])\n     def set():\n         flask.session['value'] = flask.request.form['value']\n         return 'value set'\n+\n     @app.route('/get')\n     def get():\n         return flask.session['value']\n@@ -172,12 +189,14 @@ class TestBasicFunctionality(object):\n     assert c.post('/set', data={'value': '42'}).data == b'value set'\n     assert c.get('/get').data == b'42'\n \n-    def test_session_using_server_name(self):\n+\n+def test_session_using_server_name():\n     app = flask.Flask(__name__)\n     app.config.update(\n         SECRET_KEY='foo',\n         SERVER_NAME='example.com'\n     )\n+\n     @app.route('/')\n     def index():\n         flask.session['testing'] = 42\n@@ -186,12 +205,14 @@ class TestBasicFunctionality(object):\n     assert 'domain=.example.com' in rv.headers['set-cookie'].lower()\n     assert 'httponly' in rv.headers['set-cookie'].lower()\n \n-    def test_session_using_server_name_and_port(self):\n+\n+def test_session_using_server_name_and_port():\n     app = flask.Flask(__name__)\n     app.config.update(\n         SECRET_KEY='foo',\n         SERVER_NAME='example.com:8080'\n     )\n+\n     @app.route('/')\n     def index():\n         flask.session['testing'] = 42\n@@ -200,13 +221,15 @@ class TestBasicFunctionality(object):\n     assert 'domain=.example.com' in rv.headers['set-cookie'].lower()\n     assert 'httponly' in rv.headers['set-cookie'].lower()\n \n-    def test_session_using_server_name_port_and_path(self):\n+\n+def test_session_using_server_name_port_and_path():\n     app = flask.Flask(__name__)\n     app.config.update(\n         SECRET_KEY='foo',\n         SERVER_NAME='example.com:8080',\n         APPLICATION_ROOT='/foo'\n     )\n+\n     @app.route('/')\n     def index():\n         flask.session['testing'] = 42\n@@ -216,11 +239,14 @@ class TestBasicFunctionality(object):\n     assert 'path=/foo' in rv.headers['set-cookie'].lower()\n     assert 'httponly' in rv.headers['set-cookie'].lower()\n \n-    def test_session_using_application_root(self):\n+\n+def test_session_using_application_root():\n     class PrefixPathMiddleware(object):\n+\n         def __init__(self, app, prefix):\n             self.app = app\n             self.prefix = prefix\n+\n         def __call__(self, environ, start_response):\n             environ['SCRIPT_NAME'] = self.prefix\n             return self.app(environ, start_response)\n@@ -231,6 +257,7 @@ class TestBasicFunctionality(object):\n         SECRET_KEY='foo',\n         APPLICATION_ROOT='/bar'\n     )\n+\n     @app.route('/')\n     def index():\n         flask.session['testing'] = 42\n@@ -238,7 +265,8 @@ class TestBasicFunctionality(object):\n     rv = app.test_client().get('/', 'http://example.com:8080/')\n     assert 'path=/bar' in rv.headers['set-cookie'].lower()\n \n-    def test_session_using_session_settings(self):\n+\n+def test_session_using_session_settings():\n     app = flask.Flask(__name__)\n     app.config.update(\n         SECRET_KEY='foo',\n@@ -249,6 +277,7 @@ class TestBasicFunctionality(object):\n         SESSION_COOKIE_SECURE=True,\n         SESSION_COOKIE_PATH='/'\n     )\n+\n     @app.route('/')\n     def index():\n         flask.session['testing'] = 42\n@@ -260,8 +289,10 @@ class TestBasicFunctionality(object):\n     assert 'secure' in cookie\n     assert 'httponly' not in cookie\n \n-    def test_missing_session(self):\n+\n+def test_missing_session():\n     app = flask.Flask(__name__)\n+\n     def expect_exception(f, *args, **kwargs):\n         try:\n             f(*args, **kwargs)\n@@ -274,10 +305,12 @@ class TestBasicFunctionality(object):\n         expect_exception(flask.session.__setitem__, 'foo', 42)\n         expect_exception(flask.session.pop, 'foo')\n \n-    def test_session_expiration(self):\n+\n+def test_session_expiration():\n     permanent = True\n     app = flask.Flask(__name__)\n     app.secret_key = 'testkey'\n+\n     @app.route('/')\n     def index():\n         flask.session['test'] = 42\n@@ -307,7 +340,8 @@ class TestBasicFunctionality(object):\n     match = re.search(r'\\bexpires=([^;]+)', rv.headers['set-cookie'])\n     assert match is None\n \n-    def test_session_stored_last(self):\n+\n+def test_session_stored_last():\n     app = flask.Flask(__name__)\n     app.secret_key = 'development-key'\n     app.testing = True\n@@ -316,6 +350,7 @@ class TestBasicFunctionality(object):\n     def modify_session(response):\n         flask.session['foo'] = 42\n         return response\n+\n     @app.route('/')\n     def dump_session_contents():\n         return repr(flask.session.get('foo'))\n@@ -324,7 +359,8 @@ class TestBasicFunctionality(object):\n     assert c.get('/').data == b'None'\n     assert c.get('/').data == b'42'\n \n-    def test_session_special_types(self):\n+\n+def test_session_special_types():\n     app = flask.Flask(__name__)\n     app.secret_key = 'development-key'\n     app.testing = True\n@@ -355,7 +391,8 @@ class TestBasicFunctionality(object):\n     assert type(rv['b']) == bytes\n     assert rv['t'] == (1, 2, 3)\n \n-    def test_session_cookie_setting(self):\n+\n+def test_session_cookie_setting():\n     app = flask.Flask(__name__)\n     app.testing = True\n     app.secret_key = 'dev key'\n@@ -398,7 +435,8 @@ class TestBasicFunctionality(object):\n     app.config['SESSION_REFRESH_EACH_REQUEST'] = False\n     run_test(expect_header=False)\n \n-    def test_flashes(self):\n+\n+def test_flashes():\n     app = flask.Flask(__name__)\n     app.secret_key = 'testkey'\n \n@@ -410,7 +448,8 @@ class TestBasicFunctionality(object):\n         assert flask.session.modified\n         assert list(flask.get_flashed_messages()) == ['Zap', 'Zip']\n \n-    def test_extended_flashing(self):\n+\n+def test_extended_flashing():\n     # Be sure app.testing=True below, else tests can fail silently.\n     #\n     # Specifically, if app.testing is not set to True, the AssertionErrors\n@@ -451,13 +490,15 @@ class TestBasicFunctionality(object):\n \n     @app.route('/test_filter/')\n     def test_filter():\n-            messages = flask.get_flashed_messages(category_filter=['message'], with_categories=True)\n+        messages = flask.get_flashed_messages(\n+            category_filter=['message'], with_categories=True)\n         assert list(messages) == [('message', u'Hello World')]\n         return ''\n \n     @app.route('/test_filters/')\n     def test_filters():\n-            messages = flask.get_flashed_messages(category_filter=['message', 'warning'], with_categories=True)\n+        messages = flask.get_flashed_messages(\n+            category_filter=['message', 'warning'], with_categories=True)\n         assert list(messages) == [\n             ('message', u'Hello World'),\n             ('warning', flask.Markup(u'<em>Testing</em>'))\n@@ -466,7 +507,8 @@ class TestBasicFunctionality(object):\n \n     @app.route('/test_filters_without_returning_categories/')\n     def test_filters2():\n-            messages = flask.get_flashed_messages(category_filter=['message', 'warning'])\n+        messages = flask.get_flashed_messages(\n+            category_filter=['message', 'warning'])\n         assert len(messages) == 2\n         assert messages[0] == u'Hello World'\n         assert messages[1] == flask.Markup(u'<em>Testing</em>')\n@@ -494,17 +536,21 @@ class TestBasicFunctionality(object):\n     c.get('/')\n     c.get('/test_filters_without_returning_categories/')\n \n-    def test_request_processing(self):\n+\n+def test_request_processing():\n     app = flask.Flask(__name__)\n     evts = []\n+\n     @app.before_request\n     def before_request():\n         evts.append('before')\n+\n     @app.after_request\n     def after_request(response):\n         response.data += b'|after'\n         evts.append('after')\n         return response\n+\n     @app.route('/')\n     def index():\n         assert 'before' in evts\n@@ -515,9 +561,11 @@ class TestBasicFunctionality(object):\n     assert 'after' in evts\n     assert rv == b'request|after'\n \n-    def test_after_request_processing(self):\n+\n+def test_after_request_processing():\n     app = flask.Flask(__name__)\n     app.testing = True\n+\n     @app.route('/')\n     def index():\n         @flask.after_this_request\n@@ -530,13 +578,16 @@ class TestBasicFunctionality(object):\n     assert resp.status_code == 200\n     assert resp.headers['X-Foo'] == 'a header'\n \n-    def test_teardown_request_handler(self):\n+\n+def test_teardown_request_handler():\n     called = []\n     app = flask.Flask(__name__)\n+\n     @app.teardown_request\n     def teardown_request(exc):\n         called.append(True)\n         return \"Ignored\"\n+\n     @app.route('/')\n     def root():\n         return \"Response\"\n@@ -545,14 +596,17 @@ class TestBasicFunctionality(object):\n     assert b'Response' in rv.data\n     assert len(called) == 1\n \n-    def test_teardown_request_handler_debug_mode(self):\n+\n+def test_teardown_request_handler_debug_mode():\n     called = []\n     app = flask.Flask(__name__)\n     app.testing = True\n+\n     @app.teardown_request\n     def teardown_request(exc):\n         called.append(True)\n         return \"Ignored\"\n+\n     @app.route('/')\n     def root():\n         return \"Response\"\n@@ -561,10 +615,12 @@ class TestBasicFunctionality(object):\n     assert b'Response' in rv.data\n     assert len(called) == 1\n \n-    def test_teardown_request_handler_error(self):\n+\n+def test_teardown_request_handler_error():\n     called = []\n     app = flask.Flask(__name__)\n     app.config['LOGGER_HANDLER_POLICY'] = 'never'\n+\n     @app.teardown_request\n     def teardown_request1(exc):\n         assert type(exc) == ZeroDivisionError\n@@ -576,6 +632,7 @@ class TestBasicFunctionality(object):\n             raise TypeError()\n         except:\n             pass\n+\n     @app.teardown_request\n     def teardown_request2(exc):\n         assert type(exc) == ZeroDivisionError\n@@ -587,6 +644,7 @@ class TestBasicFunctionality(object):\n             raise TypeError()\n         except:\n             pass\n+\n     @app.route('/')\n     def fails():\n         1 // 0\n@@ -595,29 +653,37 @@ class TestBasicFunctionality(object):\n     assert b'Internal Server Error' in rv.data\n     assert len(called) == 2\n \n-    def test_before_after_request_order(self):\n+\n+def test_before_after_request_order():\n     called = []\n     app = flask.Flask(__name__)\n+\n     @app.before_request\n     def before1():\n         called.append(1)\n+\n     @app.before_request\n     def before2():\n         called.append(2)\n+\n     @app.after_request\n     def after1(response):\n         called.append(4)\n         return response\n+\n     @app.after_request\n     def after2(response):\n         called.append(3)\n         return response\n+\n     @app.teardown_request\n     def finish1(exc):\n         called.append(6)\n+\n     @app.teardown_request\n     def finish2(exc):\n         called.append(5)\n+\n     @app.route('/')\n     def index():\n         return '42'\n@@ -625,24 +691,31 @@ class TestBasicFunctionality(object):\n     assert rv.data == b'42'\n     assert called == [1, 2, 3, 4, 5, 6]\n \n-    def test_error_handling(self):\n+\n+def test_error_handling():\n     app = flask.Flask(__name__)\n     app.config['LOGGER_HANDLER_POLICY'] = 'never'\n+\n     @app.errorhandler(404)\n     def not_found(e):\n         return 'not found', 404\n+\n     @app.errorhandler(500)\n     def internal_server_error(e):\n         return 'internal server error', 500\n+\n     @app.errorhandler(Forbidden)\n     def forbidden(e):\n         return 'forbidden', 403\n+\n     @app.route('/')\n     def index():\n         flask.abort(404)\n+\n     @app.route('/error')\n     def error():\n         1 // 0\n+\n     @app.route('/forbidden')\n     def error2():\n         flask.abort(403)\n@@ -657,11 +730,14 @@ class TestBasicFunctionality(object):\n     assert rv.status_code == 403\n     assert b'forbidden' == rv.data\n \n-    def test_before_request_and_routing_errors(self):\n+\n+def test_before_request_and_routing_errors():\n     app = flask.Flask(__name__)\n+\n     @app.before_request\n     def attach_something():\n         flask.g.something = 'value'\n+\n     @app.errorhandler(404)\n     def return_something(error):\n         return flask.g.something, 404\n@@ -669,15 +745,18 @@ class TestBasicFunctionality(object):\n     assert rv.status_code == 404\n     assert rv.data == b'value'\n \n-    def test_user_error_handling(self):\n+\n+def test_user_error_handling():\n     class MyException(Exception):\n         pass\n \n     app = flask.Flask(__name__)\n+\n     @app.errorhandler(MyException)\n     def handle_my_exception(e):\n         assert isinstance(e, MyException)\n         return '42'\n+\n     @app.route('/')\n     def index():\n         raise MyException()\n@@ -685,15 +764,18 @@ class TestBasicFunctionality(object):\n     c = app.test_client()\n     assert c.get('/').data == b'42'\n \n-    def test_http_error_subclass_handling(self):\n+\n+def test_http_error_subclass_handling():\n     class ForbiddenSubclass(Forbidden):\n         pass\n \n     app = flask.Flask(__name__)\n+\n     @app.errorhandler(ForbiddenSubclass)\n     def handle_forbidden_subclass(e):\n         assert isinstance(e, ForbiddenSubclass)\n         return 'banana'\n+\n     @app.errorhandler(403)\n     def handle_forbidden_subclass(e):\n         assert not isinstance(e, ForbiddenSubclass)\n@@ -703,9 +785,11 @@ class TestBasicFunctionality(object):\n     @app.route('/1')\n     def index1():\n         raise ForbiddenSubclass()\n+\n     @app.route('/2')\n     def index2():\n         flask.abort(403)\n+\n     @app.route('/3')\n     def index3():\n         raise Forbidden()\n@@ -715,9 +799,11 @@ class TestBasicFunctionality(object):\n     assert c.get('/2').data == b'apple'\n     assert c.get('/3').data == b'apple'\n \n-    def test_trapping_of_bad_request_key_errors(self):\n+\n+def test_trapping_of_bad_request_key_errors():\n     app = flask.Flask(__name__)\n     app.testing = True\n+\n     @app.route('/fail')\n     def fail():\n         flask.request.form['missing_key']\n@@ -733,26 +819,26 @@ class TestBasicFunctionality(object):\n     else:\n         assert False, 'Expected exception'\n \n-    def test_trapping_of_all_http_exceptions(self):\n+\n+def test_trapping_of_all_http_exceptions():\n     app = flask.Flask(__name__)\n     app.testing = True\n     app.config['TRAP_HTTP_EXCEPTIONS'] = True\n+\n     @app.route('/fail')\n     def fail():\n         flask.abort(404)\n \n     c = app.test_client()\n-        try:\n+    with pytest.raises(NotFound):\n         c.get('/fail')\n-        except NotFound as e:\n-            pass\n-        else:\n-            assert False, 'Expected exception'\n \n-    def test_enctype_debug_helper(self):\n+\n+def test_enctype_debug_helper():\n     from flask.debughelpers import DebugFilesKeyError\n     app = flask.Flask(__name__)\n     app.debug = True\n+\n     @app.route('/fail', methods=['POST'])\n     def index():\n         return flask.request.files['foo'].filename\n@@ -769,29 +855,36 @@ class TestBasicFunctionality(object):\n         else:\n             assert False, 'Expected exception'\n \n-    def test_response_creation(self):\n+\n+def test_response_creation():\n     app = flask.Flask(__name__)\n+\n     @app.route('/unicode')\n     def from_unicode():\n         return u'Hällo Wörld'\n+\n     @app.route('/string')\n     def from_string():\n         return u'Hällo Wörld'.encode('utf-8')\n+\n     @app.route('/args')\n     def from_tuple():\n         return 'Meh', 400, {\n             'X-Foo': 'Testing',\n             'Content-Type': 'text/plain; charset=utf-8'\n         }\n+\n     @app.route('/two_args')\n     def from_two_args_tuple():\n         return 'Hello', {\n             'X-Foo': 'Test',\n             'Content-Type': 'text/plain; charset=utf-8'\n         }\n+\n     @app.route('/args_status')\n     def from_status_tuple():\n         return 'Hi, status!', 400\n+\n     @app.route('/args_header')\n     def from_response_instance_status_tuple():\n         return flask.Response('Hello world', 404), {\n@@ -822,7 +915,8 @@ class TestBasicFunctionality(object):\n     assert rv4.headers['X-Bar'] == 'Foo'\n     assert rv4.status_code == 404\n \n-    def test_make_response(self):\n+\n+def test_make_response():\n     app = flask.Flask(__name__)\n     with app.test_request_context():\n         rv = flask.make_response()\n@@ -840,7 +934,8 @@ class TestBasicFunctionality(object):\n         assert rv.data == b'W00t'\n         assert rv.mimetype == 'text/html'\n \n-    def test_make_response_with_response_instance(self):\n+\n+def test_make_response_with_response_instance():\n     app = flask.Flask(__name__)\n     with app.test_request_context():\n         rv = flask.make_response(\n@@ -862,8 +957,10 @@ class TestBasicFunctionality(object):\n         assert rv.headers['Content-Type'] == 'text/html'\n         assert rv.headers['X-Foo'] == 'bar'\n \n-    def test_url_generation(self):\n+\n+def test_url_generation():\n     app = flask.Flask(__name__)\n+\n     @app.route('/hello/<name>', methods=['POST'])\n     def hello():\n         pass\n@@ -872,7 +969,8 @@ class TestBasicFunctionality(object):\n         assert flask.url_for('hello', name='test x', _external=True) == \\\n             'http://localhost/hello/test%20x'\n \n-    def test_build_error_handler(self):\n+\n+def test_build_error_handler():\n     app = flask.Flask(__name__)\n \n     # Test base case, a URL which results in a BuildError.\n@@ -888,7 +986,8 @@ class TestBasicFunctionality(object):\n     try:\n         raise RuntimeError('Test case where BuildError is not current.')\n     except RuntimeError:\n-            pytest.raises(BuildError, app.handle_url_build_error, error, 'spam', {})\n+        pytest.raises(\n+            BuildError, app.handle_url_build_error, error, 'spam', {})\n \n     # Test a custom handler.\n     def handler(error, endpoint, values):\n@@ -898,23 +997,29 @@ class TestBasicFunctionality(object):\n     with app.test_request_context():\n         assert flask.url_for('spam') == '/test_handler/'\n \n-    def test_custom_converters(self):\n+\n+def test_custom_converters():\n     from werkzeug.routing import BaseConverter\n+\n     class ListConverter(BaseConverter):\n+\n         def to_python(self, value):\n             return value.split(',')\n+\n         def to_url(self, value):\n             base_to_url = super(ListConverter, self).to_url\n             return ','.join(base_to_url(x) for x in value)\n     app = flask.Flask(__name__)\n     app.url_map.converters['list'] = ListConverter\n+\n     @app.route('/<list:args>')\n     def index(args):\n         return '|'.join(args)\n     c = app.test_client()\n     assert c.get('/1,2,3').data == b'1|2|3'\n \n-    def test_static_files(self):\n+\n+def test_static_files():\n     app = flask.Flask(__name__)\n     app.testing = True\n     rv = app.test_client().get('/static/index.html')\n@@ -925,9 +1030,11 @@ class TestBasicFunctionality(object):\n             '/static/index.html'\n     rv.close()\n \n-    def test_none_response(self):\n+\n+def test_none_response():\n     app = flask.Flask(__name__)\n     app.testing = True\n+\n     @app.route('/')\n     def test():\n         return None\n@@ -939,15 +1046,18 @@ class TestBasicFunctionality(object):\n     else:\n         assert \"Expected ValueError\"\n \n-    def test_request_locals(self):\n+\n+def test_request_locals():\n     assert repr(flask.g) == '<LocalProxy unbound>'\n     assert not flask.g\n \n-    def test_test_app_proper_environ(self):\n+\n+def test_test_app_proper_environ():\n     app = flask.Flask(__name__)\n     app.config.update(\n         SERVER_NAME='localhost.localdomain:5000'\n     )\n+\n     @app.route('/')\n     def index():\n         return 'Foo'\n@@ -998,10 +1108,12 @@ class TestBasicFunctionality(object):\n     rv = app.test_client().get('/', 'http://foo.localhost.localdomain')\n     assert rv.data == b'Foo SubDomain'\n \n-    def test_exception_propagation(self):\n+\n+def test_exception_propagation():\n     def apprunner(configkey):\n         app = flask.Flask(__name__)\n         app.config['LOGGER_HANDLER_POLICY'] = 'never'\n+\n         @app.route('/')\n         def index():\n             1 // 0\n@@ -1026,17 +1138,21 @@ class TestBasicFunctionality(object):\n         t.start()\n         t.join()\n \n-    def test_max_content_length(self):\n+\n+def test_max_content_length():\n     app = flask.Flask(__name__)\n     app.config['MAX_CONTENT_LENGTH'] = 64\n+\n     @app.before_request\n     def always_first():\n         flask.request.form['myfile']\n         assert False\n+\n     @app.route('/accept', methods=['POST'])\n     def accept_file():\n         flask.request.form['myfile']\n         assert False\n+\n     @app.errorhandler(413)\n     def catcher(error):\n         return '42'\n@@ -1045,7 +1161,8 @@ class TestBasicFunctionality(object):\n     rv = c.post('/accept', data={'myfile': 'foo' * 100})\n     assert rv.data == b'42'\n \n-    def test_url_processors(self):\n+\n+def test_url_processors():\n     app = flask.Flask(__name__)\n \n     @app.url_defaults\n@@ -1076,7 +1193,8 @@ class TestBasicFunctionality(object):\n     assert c.get('/de/about').data == b'/foo'\n     assert c.get('/foo').data == b'/en/about'\n \n-    def test_inject_blueprint_url_defaults(self):\n+\n+def test_inject_blueprint_url_defaults():\n     app = flask.Flask(__name__)\n     bp = flask.Blueprint('foo.bar.baz', __name__,\n                          template_folder='template')\n@@ -1084,8 +1202,10 @@ class TestBasicFunctionality(object):\n     @bp.url_defaults\n     def bp_defaults(endpoint, values):\n         values['page'] = 'login'\n+\n     @bp.route('/<page>')\n-        def view(page): pass\n+    def view(page):\n+        pass\n \n     app.register_blueprint(bp)\n \n@@ -1099,7 +1219,8 @@ class TestBasicFunctionality(object):\n     expected = '/login'\n     assert url == expected\n \n-    def test_nonascii_pathinfo(self):\n+\n+def test_nonascii_pathinfo():\n     app = flask.Flask(__name__)\n     app.testing = True\n \n@@ -1111,9 +1232,11 @@ class TestBasicFunctionality(object):\n     rv = c.get(u'/киртест')\n     assert rv.data == b'Hello World!'\n \n-    def test_debug_mode_complains_after_first_request(self):\n+\n+def test_debug_mode_complains_after_first_request():\n     app = flask.Flask(__name__)\n     app.debug = True\n+\n     @app.route('/')\n     def index():\n         return 'Awesome'\n@@ -1129,15 +1252,18 @@ class TestBasicFunctionality(object):\n         assert False, 'Expected exception'\n \n     app.debug = False\n+\n     @app.route('/foo')\n     def working():\n         return 'Meh'\n     assert app.test_client().get('/foo').data == b'Meh'\n     assert app.got_first_request\n \n-    def test_before_first_request_functions(self):\n+\n+def test_before_first_request_functions():\n     got = []\n     app = flask.Flask(__name__)\n+\n     @app.before_first_request\n     def foo():\n         got.append(42)\n@@ -1148,7 +1274,8 @@ class TestBasicFunctionality(object):\n     assert got == [42]\n     assert app.got_first_request\n \n-    def test_before_first_request_functions_concurrent(self):\n+\n+def test_before_first_request_functions_concurrent():\n     got = []\n     app = flask.Flask(__name__)\n \n@@ -1158,6 +1285,7 @@ class TestBasicFunctionality(object):\n         got.append(42)\n \n     c = app.test_client()\n+\n     def get_and_assert():\n         c.get(\"/\")\n         assert got == [42]\n@@ -1168,9 +1296,11 @@ class TestBasicFunctionality(object):\n     t.join()\n     assert app.got_first_request\n \n-    def test_routing_redirect_debugging(self):\n+\n+def test_routing_redirect_debugging():\n     app = flask.Flask(__name__)\n     app.debug = True\n+\n     @app.route('/foo/', methods=['GET', 'POST'])\n     def foo():\n         return 'success'\n@@ -1192,7 +1322,8 @@ class TestBasicFunctionality(object):\n         rv = c.post('/foo', data={}, follow_redirects=True)\n         assert rv.data == b'success'\n \n-    def test_route_decorator_custom_endpoint(self):\n+\n+def test_route_decorator_custom_endpoint():\n     app = flask.Flask(__name__)\n     app.debug = True\n \n@@ -1218,7 +1349,8 @@ class TestBasicFunctionality(object):\n     assert c.get('/bar/').data == b'bar'\n     assert c.get('/bar/123').data == b'123'\n \n-    def test_preserve_only_once(self):\n+\n+def test_preserve_only_once():\n     app = flask.Flask(__name__)\n     app.debug = True\n \n@@ -1238,7 +1370,8 @@ class TestBasicFunctionality(object):\n     assert flask._request_ctx_stack.top is None\n     assert flask._app_ctx_stack.top is None\n \n-    def test_preserve_remembers_exception(self):\n+\n+def test_preserve_remembers_exception():\n     app = flask.Flask(__name__)\n     app.debug = True\n     errors = []\n@@ -1270,20 +1403,22 @@ class TestBasicFunctionality(object):\n     # At this point another request does nothing.\n     c.get('/success')\n     assert len(errors) == 3\n-        assert errors[1] == None\n+    assert errors[1] is None\n \n-    def test_get_method_on_g(self):\n+\n+def test_get_method_on_g():\n     app = flask.Flask(__name__)\n     app.testing = True\n \n     with app.app_context():\n-            assert flask.g.get('x') == None\n+        assert flask.g.get('x') is None\n         assert flask.g.get('x', 11) == 11\n         flask.g.x = 42\n         assert flask.g.get('x') == 42\n         assert flask.g.x == 42\n \n-    def test_g_iteration_protocol(self):\n+\n+def test_g_iteration_protocol():\n     app = flask.Flask(__name__)\n     app.testing = True\n \n@@ -1295,14 +1430,14 @@ class TestBasicFunctionality(object):\n         assert sorted(flask.g) == ['bar', 'foo']\n \n \n-class TestSubdomain(object):\n-\n-    def test_basic_support(self):\n+def test_subdomain_basic_support():\n     app = flask.Flask(__name__)\n     app.config['SERVER_NAME'] = 'localhost'\n+\n     @app.route('/')\n     def normal_index():\n         return 'normal index'\n+\n     @app.route('/', subdomain='test')\n     def test_index():\n         return 'test index'\n@@ -1314,9 +1449,11 @@ class TestSubdomain(object):\n     rv = c.get('/', 'http://test.localhost/')\n     assert rv.data == b'test index'\n \n-    def test_subdomain_matching(self):\n+\n+def test_subdomain_matching():\n     app = flask.Flask(__name__)\n     app.config['SERVER_NAME'] = 'localhost'\n+\n     @app.route('/', subdomain='<user>')\n     def index(user):\n         return 'index for %s' % user\n@@ -1325,9 +1462,11 @@ class TestSubdomain(object):\n     rv = c.get('/', 'http://mitsuhiko.localhost/')\n     assert rv.data == b'index for mitsuhiko'\n \n-    def test_subdomain_matching_with_ports(self):\n+\n+def test_subdomain_matching_with_ports():\n     app = flask.Flask(__name__)\n     app.config['SERVER_NAME'] = 'localhost:3000'\n+\n     @app.route('/', subdomain='<user>')\n     def index(user):\n         return 'index for %s' % user\n@@ -1336,7 +1475,8 @@ class TestSubdomain(object):\n     rv = c.get('/', 'http://mitsuhiko.localhost:3000/')\n     assert rv.data == b'index for mitsuhiko'\n \n-    def test_multi_route_rules(self):\n+\n+def test_multi_route_rules():\n     app = flask.Flask(__name__)\n \n     @app.route('/')\n@@ -1349,8 +1489,10 @@ class TestSubdomain(object):\n     rv = app.test_client().open('/b/')\n     assert rv.data == b'b'\n \n-    def test_multi_route_class_views(self):\n+\n+def test_multi_route_class_views():\n     class View(object):\n+\n         def __init__(self, app):\n             app.add_url_rule('/', 'index', self.index)\n             app.add_url_rule('/<test>/', 'index', self.index)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
