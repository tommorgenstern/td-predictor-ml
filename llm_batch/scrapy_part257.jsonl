{"custom_id": "scrapy#754f52b02781097c8ca6835e057815c7653062d4", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 3 | Churn Cumulative: 84 | Contributors (this commit): 6 | Commits (past 90d): 2 | Contributors (cumulative): 6 | DMM Complexity: None\n\nDIFF:\n@@ -35,8 +35,9 @@ class ItemLoader(object):\n         self.parent = parent\n         self._local_item = context['item'] = item\n         self._local_values = defaultdict(list)\n+        # Preprocess values if item built from dict\n         for field_name, value in item.items():\n-            self.add_value(field_name, value)\n+            self._values[field_name] = self._process_input_value(field_name, value)\n \n     @property\n     def _values(self):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "scrapy#c7ba72b5dc9da3435eb1ec303b991d05ba40ba1c", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 13 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 13 | Churn Cumulative: 124 | Contributors (this commit): 11 | Commits (past 90d): 1 | Contributors (cumulative): 11 | DMM Complexity: None\n\nDIFF:\n@@ -224,4 +224,17 @@ linkcheck_ignore = [\n # Options for the Coverage extension\n # ----------------------------------\n coverage_ignore_pyobjects = [\n+    # Contract’s add_pre_hook and add_post_hook are not documented because\n+    # they should be transparent to contract developers, for whom pre_hook and\n+    # post_hook should be the actual concern.\n+    r'\\bContract\\.add_(pre|post)_hook$',\n+\n+    # ContractsManager is an internal class, developers are not expected to\n+    # interact with it directly in any way.\n+    r'\\bContractsManager\\b$',\n+\n+    # For default contracts we only want to document their general purpose in\n+    # their constructor, the methods they reimplement to achieve that purpose\n+    # should be irrelevant to developers using those contracts.\n+    r'\\w+Contract\\.(adjust_request_args|(pre|post)_process)$',\n ]\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "scrapy#a1bca6a8e722af53241e51bbf758e7bd67671801", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 24 | Lines Deleted: 0 | Files Changed: 2 | Hunks: 2 | Methods Changed: 2 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 24 | Churn Cumulative: 291 | Contributors (this commit): 9 | Commits (past 90d): 4 | Contributors (cumulative): 14 | DMM Complexity: 1.0\n\nDIFF:\n@@ -36,6 +36,7 @@ class ItemLoader(object):\n         self._local_item = context['item'] = item\n         self._local_values = defaultdict(list)\n         # Preprocess values if item built from dict\n+        # Values need to be added to item._values if added them from dict (not with add_values)\n         for field_name, value in item.items():\n             self._values[field_name] = self._process_input_value(field_name, value)\n \n\n@@ -419,6 +419,29 @@ class BasicItemLoaderTest(unittest.TestCase):\n         self.assertEqual(item['url'], u'rabbit.hole')\n         self.assertEqual(item['summary'], u'rabbithole')\n \n+    def test_create_item_from_dict(self):\n+        class TestItem(Item):\n+            title = Field()\n+\n+        class TestItemLoader(ItemLoader):\n+            default_item_class = TestItem\n+\n+        input_item = {'title': 'Test item title 1'}\n+        il = TestItemLoader(item=input_item)\n+        # Getting output value mustn't remove value from item\n+        self.assertEqual(il.load_item(), {\n+            'title': 'Test item title 1',\n+        })\n+        self.assertEqual(il.get_output_value('title'), 'Test item title 1')\n+        self.assertEqual(il.load_item(), {\n+            'title': 'Test item title 1',\n+        })\n+\n+        input_item = {'title': 'Test item title 2'}\n+        il = TestItemLoader(item=input_item)\n+        # Values from dict must be added to item _values\n+        self.assertEqual(il._values.get('title'), 'Test item title 2')\n+\n \n class ProcessorsTest(unittest.TestCase):\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "scrapy#7dad2f7b130c426f2a8aee320ccbc378752a9568", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 14 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 14 | Churn Cumulative: 220 | Contributors (this commit): 8 | Commits (past 90d): 2 | Contributors (cumulative): 8 | DMM Complexity: 1.0\n\nDIFF:\n@@ -442,6 +442,20 @@ class BasicItemLoaderTest(unittest.TestCase):\n         # Values from dict must be added to item _values\n         self.assertEqual(il._values.get('title'), 'Test item title 2')\n \n+        input_item = {'title': [u'Test item title 3', u'Test item 4']}\n+        il = TestItemLoader(item=input_item)\n+        # Same rules must work for lists\n+        self.assertEqual(il._values.get('title'),\n+                         [u'Test item title 3', u'Test item 4'])\n+        self.assertEqual(il.load_item(), {\n+            'title': [u'Test item title 3', u'Test item 4'],\n+        })\n+        self.assertEqual(il.get_output_value('title'),\n+                         [u'Test item title 3', u'Test item 4'])\n+        self.assertEqual(il.load_item(), {\n+            'title': [u'Test item title 3', u'Test item 4'],\n+        })\n+\n \n class ProcessorsTest(unittest.TestCase):\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "scrapy#0da972339bb174156b08a3ae34ece7fddea1e48d", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 3 | Churn Cumulative: 464 | Contributors (this commit): 17 | Commits (past 90d): 1 | Contributors (cumulative): 17 | DMM Complexity: None\n\nDIFF:\n@@ -65,7 +65,8 @@ setup(\n     ],\n     python_requires='>=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*',\n     install_requires=[\n-        'Twisted>=13.1.0',\n+        'Twisted>=13.1.0;python_version!=\"3.4\"',\n+        'Twisted>=13.1.0,<=19.2.0;python_version==\"3.4\"',\n         'w3lib>=1.17.0',\n         'queuelib',\n         'lxml',\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "scrapy#b8900ec6a698cb4e27424de57ca5593f1c7300e7", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 0 | Lines Deleted: 3 | Files Changed: 1 | Hunks: 3 | Methods Changed: 3 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 3 | Churn Cumulative: 109 | Contributors (this commit): 6 | Commits (past 90d): 1 | Contributors (cumulative): 6 | DMM Complexity: 0.0\n\nDIFF:\n@@ -123,7 +123,6 @@ class ProcessRequestInvalidOutput(ManagerTestCase):\n \n     def test_invalid_process_request(self):\n         req = Request('http://example.com/index.html')\n-        resp = Response('http://example.com/index.html')\n \n         class InvalidProcessRequestMiddleware:\n             def process_request(self, request, spider):\n@@ -143,7 +142,6 @@ class ProcessResponseInvalidOutput(ManagerTestCase):\n \n     def test_invalid_process_response(self):\n         req = Request('http://example.com/index.html')\n-        resp = Response('http://example.com/index.html')\n \n         class InvalidProcessResponseMiddleware:\n             def process_response(self, request, response, spider):\n@@ -163,7 +161,6 @@ class ProcessExceptionInvalidOutput(ManagerTestCase):\n \n     def test_invalid_process_exception(self):\n         req = Request('http://example.com/index.html')\n-        resp = Response('http://example.com/index.html')\n \n         class InvalidProcessExceptionMiddleware:\n             def process_request(self, request, spider):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "scrapy#8d1e0e09bb6fdeb4f1348b408a268c92dc9e7a8f", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 8 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 3 | Methods Changed: 1 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 10 | Churn Cumulative: 95 | Contributors (this commit): 7 | Commits (past 90d): 4 | Contributors (cumulative): 7 | DMM Complexity: 0.0\n\nDIFF:\n@@ -106,11 +106,17 @@ class ItemLoader(object):\n             value = arg_to_iter(value)\n             value = flatten(extract_regex(regex, x) for x in value)\n \n-        for proc in processors:\n+        for _proc in processors:\n             if value is None:\n                 break\n-            proc = wrap_loader_context(proc, self.context)\n+            proc = wrap_loader_context(_proc, self.context)\n+            try:\n                 value = proc(value)\n+            except Exception as e:\n+                raise ValueError(\n+                    \"Error with processor %s value=%r error='%s: %s'\" %\n+                    (_proc.__class__.__name__, value, type(e).__name__,\n+                     str(e)))\n         return value\n \n     def load_item(self):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "scrapy#663352b2a5250c377bbbe2d53c5d5b7da3a1836a", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 8 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 10 | Churn Cumulative: 105 | Contributors (this commit): 7 | Commits (past 90d): 5 | Contributors (cumulative): 7 | DMM Complexity: 1.0\n\nDIFF:\n@@ -155,9 +155,15 @@ class ItemLoader(object):\n         return proc\n \n     def _process_input_value(self, field_name, value):\n-        proc = self.get_input_processor(field_name)\n-        proc = wrap_loader_context(proc, self.context)\n+        _proc = self.get_input_processor(field_name)\n+        proc = wrap_loader_context(_proc, self.context)\n+        try:\n             return proc(value)\n+        except Exception as e:\n+            raise ValueError(\n+                \"Error with inputput processor %s: field=%r value=%r \"\n+                \"error='%s: %s'\" % (_proc.__class__.__name__, field_name,\n+                                    value, type(e).__name__, str(e)))\n \n     def _get_item_field_attr(self, field_name, key, default=None):\n         if isinstance(self.item, Item):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "scrapy#f4f2b1695c4d7bc69e5cb19c33a3a47f69bd1e8d", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 101 | Lines Deleted: 2 | Files Changed: 2 | Hunks: 6 | Methods Changed: 2 | Complexity Δ (Sum/Max): 5/4 | Churn Δ: 103 | Churn Cumulative: 475 | Contributors (this commit): 7 | Commits (past 90d): 2 | Contributors (cumulative): 11 | DMM Complexity: 1.0\n\nDIFF:\n@@ -3,7 +3,7 @@ from __future__ import print_function\n import functools\n import logging\n from collections import defaultdict\n-from twisted.internet.defer import Deferred, DeferredList\n+from twisted.internet.defer import Deferred, DeferredList, _DefGen_Return\n from twisted.python.failure import Failure\n \n from scrapy.settings import Settings\n@@ -139,6 +139,30 @@ class MediaPipeline(object):\n             result.cleanFailure()\n             result.frames = []\n             result.stack = None\n+\n+            # This code fixes a memory leak by avoiding to keep references to\n+            # the Request and Response objects on the Media Pipeline cache.\n+            #\n+            # Twisted inline callbacks pass return values using the function\n+            # twisted.internet.defer.returnValue, which encapsulates the return\n+            # value inside a _DefGen_Return base exception.\n+            #\n+            # What happens when the media_downloaded callback raises another\n+            # exception, for example a FileException('download-error') when\n+            # the Response status code is not 200 OK, is that it stores the\n+            # _DefGen_Return exception on the FileException context.\n+            #\n+            # To avoid keeping references to the Response and therefore Request\n+            # objects on the Media Pipeline cache, we should wipe the context of\n+            # the exception encapsulated by the Twisted Failure when its a\n+            # _DefGen_Return instance.\n+            #\n+            # This problem does not occur in Python 2.7 since we don't have\n+            # Exception Chaining (https://www.python.org/dev/peps/pep-3134/).\n+            context = getattr(result.value, '__context__', None)\n+            if isinstance(context, _DefGen_Return):\n+                setattr(result.value, '__context__', None)\n+\n         info.downloading.remove(fp)\n         info.downloaded[fp] = result  # cache result\n         for wad in info.waiting.pop(fp):\n\n@@ -1,15 +1,19 @@\n from __future__ import print_function\n+\n+import sys\n+\n from testfixtures import LogCapture\n from twisted.trial import unittest\n from twisted.python.failure import Failure\n from twisted.internet import reactor\n-from twisted.internet.defer import Deferred, inlineCallbacks\n+from twisted.internet.defer import Deferred, inlineCallbacks, returnValue\n \n from scrapy.http import Request, Response\n from scrapy.settings import Settings\n from scrapy.spiders import Spider\n from scrapy.utils.request import request_fingerprint\n from scrapy.pipelines.media import MediaPipeline\n+from scrapy.pipelines.files import FileException\n from scrapy.utils.log import failure_to_exc_info\n from scrapy.utils.signal import disconnect_all\n from scrapy import signals\n@@ -90,6 +94,77 @@ class BaseMediaPipelineTestCase(unittest.TestCase):\n         self.pipe._modify_media_request(request)\n         assert request.meta == {'handle_httpstatus_all': True}\n \n+    def test_should_remove_req_res_references_before_caching_the_results(self):\n+        \"\"\"Regression test case to prevent a memory leak in the Media Pipeline.\n+\n+        The memory leak is triggered when an exception is raised when a Response\n+        scheduled by the Media Pipeline is being returned. For example, when a\n+        FileException('download-error') is raised because the Response status\n+        code is not 200 OK.\n+\n+        It happens because we are keeping a reference to the Response object\n+        inside the FileException context. This is caused by the way Twisted\n+        return values from inline callbacks. It raises a custom exception\n+        encapsulating the original return value.\n+\n+        The solution is to remove the exception context when this context is a\n+        _DefGen_Return instance, the BaseException used by Twisted to pass the\n+        returned value from those inline callbacks.\n+\n+        Maybe there's a better and more reliable way to test the case described\n+        here, but it would be more complicated and involve running - or at least\n+        mocking - some async steps from the Media Pipeline. The current test\n+        case is simple and detects the problem very fast. On the other hand, it\n+        would not detect another kind of leak happening due to old object\n+        references being kept inside the Media Pipeline cache.\n+\n+        This problem does not occur in Python 2.7 since we don't have Exception\n+        Chaining (https://www.python.org/dev/peps/pep-3134/).\n+        \"\"\"\n+        # Create sample pair of Request and Response objects\n+        request = Request('http://url')\n+        response = Response('http://url', body=b'', request=request)\n+\n+        # Simulate the Media Pipeline behavior to produce a Twisted Failure\n+        try:\n+            # Simulate a Twisted inline callback returning a Response\n+            # The returnValue method raises an exception encapsulating the value\n+            returnValue(response)\n+        except BaseException as exc:\n+            def_gen_return_exc = exc\n+            try:\n+                # Simulate the media_downloaded callback raising a FileException\n+                # This usually happens when the status code is not 200 OK\n+                raise FileException('download-error')\n+            except Exception as exc:\n+                file_exc = exc\n+                # Simulate Twisted capturing the FileException\n+                # It encapsulates the exception inside a Twisted Failure\n+                failure = Failure(file_exc)\n+\n+        # The Failure should encapsulate a FileException ...\n+        self.assertEqual(failure.value, file_exc)\n+        # ... and if we're running on Python 3 ...\n+        if sys.version_info.major >= 3:\n+            # ... it should have the returnValue exception set as its context\n+            self.assertEqual(failure.value.__context__, def_gen_return_exc)\n+\n+        # Let's calculate the request fingerprint and fake some runtime data...\n+        fp = request_fingerprint(request)\n+        info = self.pipe.spiderinfo\n+        info.downloading.add(fp)\n+        info.waiting[fp] = []\n+\n+        # When calling the method that caches the Request's result ...\n+        self.pipe._cache_result_and_execute_waiters(failure, fp, info)\n+        # ... it should store the Twisted Failure ...\n+        self.assertEqual(info.downloaded[fp], failure)\n+        # ... encapsulating the original FileException ...\n+        self.assertEqual(info.downloaded[fp].value, file_exc)\n+        # ... but it should not store the returnValue exception on its context\n+        context = getattr(info.downloaded[fp].value, '__context__', None)\n+        self.assertIsNone(context)\n+\n \n class MockedMediaPipeline(MediaPipeline):\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "scrapy#859008a10b8e126844662867195c6823c4a59e4f", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 20 | Lines Deleted: 9 | Files Changed: 2 | Hunks: 6 | Methods Changed: 2 | Complexity Δ (Sum/Max): 2/2 | Churn Δ: 29 | Churn Cumulative: 136 | Contributors (this commit): 8 | Commits (past 90d): 7 | Contributors (cumulative): 10 | DMM Complexity: 0.0\n\nDIFF:\n@@ -128,14 +128,6 @@ class ItemLoader(object):\n \n         return item\n \n-    def get_output_value(self, field_name):\n-        proc = self.get_output_processor(field_name)\n-        proc = wrap_loader_context(proc, self.context)\n-        try:\n-            return proc(self._values[field_name])\n-        except Exception as e:\n-            raise ValueError(\"Error with output processor: field=%r value=%r error='%s: %s'\" % \\\n-                (field_name, self._values[field_name], type(e).__name__, str(e)))\n \n     def get_collected_values(self, field_name):\n         return self._values[field_name]\n@@ -145,6 +137,14 @@ class ItemLoader(object):\n         if not proc:\n             proc = self._get_item_field_attr(field_name, 'input_processor', \\\n                 self.default_input_processor)\n+    def get_output_value(self, field_name):\n+        proc = self.get_output_processor(field_name)\n+        proc = wrap_loader_context(proc, self.context)\n+        try:\n+            return proc(self._values[field_name])\n+        except Exception as e:\n+            raise ValueError(\"Error with output processor: field=%r value=%r error='%s: %s'\" % \\\n+                (field_name, self._values[field_name], type(e).__name__, str(e)))\n         return proc\n \n     def get_output_processor(self, field_name):\n\n@@ -25,8 +25,13 @@ class MapCompose(object):\n         for func in wrapped_funcs:\n             next_values = []\n             for v in values:\n+                try:\n                     next_values += arg_to_iter(func(v))\n-            values = next_values\n+                except Exception as e:\n+                    raise ValueError(\"Error in MapCompose with \"\n+                                     \"function %s value=%r error='%s: %s'\" %\n+                                     (func.__name__, value,\n+                                      type(e).__name__, str(e)))\n         return values\n \n \n@@ -46,7 +51,13 @@ class Compose(object):\n         for func in wrapped_funcs:\n             if value is None and self.stop_on_none:\n                 break\n+            try:\n                 value = func(value)\n+            except Exception as e:\n+                raise ValueError(\"Error in Compose with \"\n+                                 \"function %s value=%r error='%s: %s'\" %\n+                                 (func.__name__, value,\n+                                  type(e).__name__, str(e)))\n         return value\n \n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "scrapy#e5d17b4efe23a617eacadf602559e481641d3590", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 9 | Lines Deleted: 8 | Files Changed: 1 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 17 | Churn Cumulative: 138 | Contributors (this commit): 7 | Commits (past 90d): 7 | Contributors (cumulative): 7 | DMM Complexity: 1.0\n\nDIFF:\n@@ -128,6 +128,15 @@ class ItemLoader(object):\n \n         return item\n \n+    def get_output_value(self, field_name):\n+        proc = self.get_output_processor(field_name)\n+        proc = wrap_loader_context(proc, self.context)\n+        try:\n+            return proc(self._values[field_name])\n+        except Exception as e:\n+            raise ValueError(\"Error with output processor: field=%r value=%r error='%s: %s'\" % \\\n+                (field_name, self._values[field_name], type(e).__name__, str(e)))\n+        return proc\n \n     def get_collected_values(self, field_name):\n         return self._values[field_name]\n@@ -137,14 +146,6 @@ class ItemLoader(object):\n         if not proc:\n             proc = self._get_item_field_attr(field_name, 'input_processor', \\\n                 self.default_input_processor)\n-    def get_output_value(self, field_name):\n-        proc = self.get_output_processor(field_name)\n-        proc = wrap_loader_context(proc, self.context)\n-        try:\n-            return proc(self._values[field_name])\n-        except Exception as e:\n-            raise ValueError(\"Error with output processor: field=%r value=%r error='%s: %s'\" % \\\n-                (field_name, self._values[field_name], type(e).__name__, str(e)))\n         return proc\n \n     def get_output_processor(self, field_name):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "scrapy#f134b1daf3fb36372f8c1755aaa4c29ac65aced3", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 2 | Hunks: 2 | Methods Changed: 2 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 155 | Contributors (this commit): 8 | Commits (past 90d): 10 | Contributors (cumulative): 10 | DMM Complexity: 0.0\n\nDIFF:\n@@ -136,7 +136,6 @@ class ItemLoader(object):\n         except Exception as e:\n             raise ValueError(\"Error with output processor: field=%r value=%r error='%s: %s'\" % \\\n                 (field_name, self._values[field_name], type(e).__name__, str(e)))\n-        return proc\n \n     def get_collected_values(self, field_name):\n         return self._values[field_name]\n\n@@ -32,6 +32,7 @@ class MapCompose(object):\n                                      \"function %s value=%r error='%s: %s'\" %\n                                      (func.__name__, value,\n                                       type(e).__name__, str(e)))\n+            values = next_values\n         return values\n \n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "scrapy#ad8c980010b60d1d9ca3eb30c27fb60751b10508", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 9 | Lines Deleted: 8 | Files Changed: 1 | Hunks: 4 | Methods Changed: 2 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 17 | Churn Cumulative: 156 | Contributors (this commit): 7 | Commits (past 90d): 9 | Contributors (cumulative): 7 | DMM Complexity: 1.0\n\nDIFF:\n@@ -106,17 +106,17 @@ class ItemLoader(object):\n             value = arg_to_iter(value)\n             value = flatten(extract_regex(regex, x) for x in value)\n \n-        for _proc in processors:\n+        for proc in processors:\n             if value is None:\n                 break\n-            proc = wrap_loader_context(_proc, self.context)\n+            _proc = proc\n+            proc = wrap_loader_context(proc, self.context)\n             try:\n                 value = proc(value)\n             except Exception as e:\n-                raise ValueError(\n-                    \"Error with processor %s value=%r error='%s: %s'\" %\n-                    (_proc.__class__.__name__, value, type(e).__name__,\n-                     str(e)))\n+                raise ValueError(\"Error with processor %s value=%r error='%s: %s'\" %\n+                                 (_proc.__class__.__name__, value,\n+                                  type(e).__name__, str(e)))\n         return value\n \n     def load_item(self):\n@@ -155,8 +155,9 @@ class ItemLoader(object):\n         return proc\n \n     def _process_input_value(self, field_name, value):\n-        _proc = self.get_input_processor(field_name)\n-        proc = wrap_loader_context(_proc, self.context)\n+        proc = self.get_input_processor(field_name)\n+        _proc = proc\n+        proc = wrap_loader_context(proc, self.context)\n         try:\n             return proc(value)\n         except Exception as e:\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "scrapy#ef56e34a4a9e02dd4bd02b3b82c5bd9b24453e49", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 158 | Contributors (this commit): 7 | Commits (past 90d): 10 | Contributors (cumulative): 7 | DMM Complexity: None\n\nDIFF:\n@@ -162,7 +162,7 @@ class ItemLoader(object):\n             return proc(value)\n         except Exception as e:\n             raise ValueError(\n-                \"Error with inputput processor %s: field=%r value=%r \"\n+                \"Error with input processor %s: field=%r value=%r \"\n                 \"error='%s: %s'\" % (_proc.__class__.__name__, field_name,\n                                     value, type(e).__name__, str(e)))\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "scrapy#99eb03a810273b7451d0ce3614d18b20cb604912", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 222 | Contributors (this commit): 9 | Commits (past 90d): 3 | Contributors (cumulative): 9 | DMM Complexity: None\n\nDIFF:\n@@ -482,7 +482,7 @@ class ProcessorsTest(unittest.TestCase):\n         proc = Compose(str.upper)\n         self.assertEqual(proc(None), None)\n         proc = Compose(str.upper, stop_on_none=False)\n-        self.assertRaises(TypeError, proc, None)\n+        self.assertRaises(ValueError, proc, None)\n \n     def test_mapcompose(self):\n         filter_world = lambda x: None if x == 'world' else x\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "scrapy#a753ea7e161e049a090d24b0807a4f20ad7cf36f", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 9 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 2 | Methods Changed: 2 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 9 | Churn Cumulative: 231 | Contributors (this commit): 9 | Commits (past 90d): 4 | Contributors (cumulative): 9 | DMM Complexity: 1.0\n\nDIFF:\n@@ -483,12 +483,21 @@ class ProcessorsTest(unittest.TestCase):\n         self.assertEqual(proc(None), None)\n         proc = Compose(str.upper, stop_on_none=False)\n         self.assertRaises(ValueError, proc, None)\n+        proc = Compose(str.upper, lambda x: x + 1)\n+        self.assertRaises(ValueError, proc, 'hello')\n \n     def test_mapcompose(self):\n         filter_world = lambda x: None if x == 'world' else x\n         proc = MapCompose(filter_world, six.text_type.upper)\n         self.assertEqual(proc([u'hello', u'world', u'this', u'is', u'scrapy']),\n                          [u'HELLO', u'THIS', u'IS', u'SCRAPY'])\n+        proc = MapCompose(filter_world, six.text_type.upper)\n+        self.assertEqual(proc(None), [])\n+        proc = MapCompose(filter_world, six.text_type.upper)\n+        self.assertRaises(ValueError, proc, [1])\n+        proc = MapCompose(filter_world, lambda x: x + 1)\n+        self.assertRaises(ValueError, proc, 'hello')\n+\n \n \n class SelectortemLoaderTest(unittest.TestCase):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "scrapy#b1e348b2813880c616191d0135e759f4edcec64c", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 44 | Lines Deleted: 4 | Files Changed: 2 | Hunks: 5 | Methods Changed: 4 | Complexity Δ (Sum/Max): 5/3 | Churn Δ: 48 | Churn Cumulative: 295 | Contributors (this commit): 10 | Commits (past 90d): 8 | Contributors (cumulative): 12 | DMM Complexity: 0.8709677419354839\n\nDIFF:\n@@ -28,10 +28,12 @@ class MapCompose(object):\n                 try:\n                     next_values += arg_to_iter(func(v))\n                 except Exception as e:\n+                    type_name = type(func).__name__\n+                    _name = (func.__name__ if type_name == 'function'\n+                             else type_name)\n                     raise ValueError(\"Error in MapCompose with \"\n                                      \"function %s value=%r error='%s: %s'\" %\n-                                     (func.__name__, value,\n-                                      type(e).__name__, str(e)))\n+                                     (_name, value, type(e).__name__, str(e)))\n             values = next_values\n         return values\n \n@@ -55,10 +57,12 @@ class Compose(object):\n             try:\n                 value = func(value)\n             except Exception as e:\n+                type_name = type(func).__name__\n+                _name = (func.__name__ if type_name == 'function' \n+                         else type_name)\n                 raise ValueError(\"Error in Compose with \"\n                                  \"function %s value=%r error='%s: %s'\" %\n-                                 (func.__name__, value,\n-                                  type(e).__name__, str(e)))\n+                                 (_name, value, type(e).__name__, str(e)))\n         return value\n \n \n\n@@ -456,6 +456,42 @@ class BasicItemLoaderTest(unittest.TestCase):\n             'title': [u'Test item title 3', u'Test item 4'],\n         })\n \n+    def test_error_input_processor(self):\n+        class TestItem(Item):\n+            name = Field()\n+\n+        class TestItemLoader(ItemLoader):\n+            default_item_class = TestItem\n+            name_in = MapCompose(float)\n+\n+        il = TestItemLoader()\n+        self.assertRaises(ValueError, il.add_value, 'name',\n+                          [u'marta', u'other'])\n+\n+    def test_error_output_processor(self):\n+        class TestItem(Item):\n+            name = Field()\n+\n+        class TestItemLoader(ItemLoader):\n+            default_item_class = TestItem\n+            name_out = Compose(Join(), float)\n+\n+        il = TestItemLoader()\n+        il.add_value('name', u'marta')\n+        with self.assertRaises(ValueError):\n+            il.load_item()\n+\n+    def test_error_processor_as_argument(self):\n+        class TestItem(Item):\n+            name = Field()\n+\n+        class TestItemLoader(ItemLoader):\n+            default_item_class = TestItem\n+\n+        il = TestItemLoader()\n+        self.assertRaises(ValueError, il.add_value, 'name',\n+                          [u'marta', u'other'], Compose(float))\n+\n \n class ProcessorsTest(unittest.TestCase):\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "scrapy#d7795484dcadff27ae821567631d2141b8edcbc4", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 3/3 | Churn Δ: 2 | Churn Cumulative: 1535 | Contributors (this commit): 17 | Commits (past 90d): 1 | Contributors (cumulative): 17 | DMM Complexity: None\n\nDIFF:\n@@ -111,6 +111,8 @@ class Crawler(object):\n \n     @defer.inlineCallbacks\n     def stop(self):\n+        \"\"\"Starts a graceful stop of the crawler and returns a deferred that is\n+        fired when the crawler is stopped.\"\"\"\n         if self.crawling:\n             self.crawling = False\n             yield defer.maybeDeferred(self.engine.stop)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "scrapy#268a37cb7b40737a855e217e3ebe8a2b91238dba", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 5 | Lines Deleted: 10 | Files Changed: 1 | Hunks: 4 | Methods Changed: 1 | Complexity Δ (Sum/Max): -2/0 | Churn Δ: 15 | Churn Cumulative: 43 | Contributors (this commit): 3 | Commits (past 90d): 4 | Contributors (cumulative): 3 | DMM Complexity: 1.0\n\nDIFF:\n@@ -28,12 +28,10 @@ class MapCompose(object):\n                 try:\n                     next_values += arg_to_iter(func(v))\n                 except Exception as e:\n-                    type_name = type(func).__name__\n-                    _name = (func.__name__ if type_name == 'function'\n-                             else type_name)\n                     raise ValueError(\"Error in MapCompose with \"\n-                                     \"function %s value=%r error='%s: %s'\" %\n-                                     (_name, value, type(e).__name__, str(e)))\n+                                     \"%s value=%r error='%s: %s'\" %\n+                                     (str(func), value, type(e).__name__,\n+                                      str(e)))\n             values = next_values\n         return values\n \n@@ -57,12 +55,9 @@ class Compose(object):\n             try:\n                 value = func(value)\n             except Exception as e:\n-                type_name = type(func).__name__\n-                _name = (func.__name__ if type_name == 'function' \n-                         else type_name)\n                 raise ValueError(\"Error in Compose with \"\n-                                 \"function %s value=%r error='%s: %s'\" %\n-                                 (_name, value, type(e).__name__, str(e)))\n+                                 \"%s value=%r error='%s: %s'\" %\n+                                 (str(func), value, type(e).__name__, str(e)))\n         return value\n \n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "scrapy#1f9f41b85055c25770951c899fe839d96aa2060c", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 107 | Lines Deleted: 88 | Files Changed: 3 | Hunks: 6 | Methods Changed: 20 | Complexity Δ (Sum/Max): 2/18 | Churn Δ: 195 | Churn Cumulative: 757 | Contributors (this commit): 10 | Commits (past 90d): 3 | Contributors (cumulative): 17 | DMM Complexity: 1.0\n\nDIFF:\n@@ -28,67 +28,6 @@ class MetaSpider(MockServerSpider):\n         self.meta['close_reason'] = reason\n \n \n-class KeywordArgumentsSpider(MockServerSpider):\n-\n-    name = 'kwargs'\n-    checks = list()\n-\n-    def start_requests(self):\n-        data = {'key': 'value', 'number': 123}\n-        yield Request(self.mockserver.url('/first'), self.parse_first, cb_kwargs=data)\n-        yield Request(self.mockserver.url('/general_with'), self.parse_general, cb_kwargs=data)\n-        yield Request(self.mockserver.url('/general_without'), self.parse_general)\n-        yield Request(self.mockserver.url('/no_kwargs'), self.parse_no_kwargs)\n-        yield Request(self.mockserver.url('/default'), self.parse_default, cb_kwargs=data)\n-        yield Request(self.mockserver.url('/takes_less'), self.parse_takes_less, cb_kwargs=data)\n-        yield Request(self.mockserver.url('/takes_more'), self.parse_takes_more, cb_kwargs=data)\n-\n-    def parse_first(self, response, key, number):\n-        self.checks.append(key == 'value')\n-        self.checks.append(number == 123)\n-        self.crawler.stats.inc_value('boolean_checks', 2)\n-        yield response.follow(\n-            self.mockserver.url('/two'),\n-            self.parse_second,\n-            cb_kwargs={'new_key': 'new_value'})\n-\n-    def parse_second(self, response, new_key):\n-        self.checks.append(new_key == 'new_value')\n-        self.crawler.stats.inc_value('boolean_checks')\n-\n-    def parse_general(self, response, **kwargs):\n-        if response.url.endswith('/general_with'):\n-            self.checks.append(kwargs['key'] == 'value')\n-            self.checks.append(kwargs['number'] == 123)\n-            self.crawler.stats.inc_value('boolean_checks', 2)\n-        elif response.url.endswith('/general_without'):\n-            self.checks.append(kwargs == {})\n-            self.crawler.stats.inc_value('boolean_checks')\n-\n-    def parse_no_kwargs(self, response):\n-        self.checks.append(response.url.endswith('/no_kwargs'))\n-        self.crawler.stats.inc_value('boolean_checks')\n-\n-    def parse_default(self, response, key, number=None, default=99):\n-        self.checks.append(response.url.endswith('/default'))\n-        self.checks.append(key == 'value')\n-        self.checks.append(number == 123)\n-        self.checks.append(default == 99)\n-        self.crawler.stats.inc_value('boolean_checks', 4)\n-\n-    def parse_takes_less(self, response, key):\n-        \"\"\"\n-        Should raise\n-        TypeError: parse_takes_less() got an unexpected keyword argument 'number'\n-        \"\"\"\n-\n-    def parse_takes_more(self, response, key, number, other):\n-        \"\"\"\n-        Should raise\n-        TypeError: parse_takes_more() missing 1 required positional argument: 'other'\n-        \"\"\"\n-\n-\n class FollowAllSpider(MetaSpider):\n \n     name = 'follow'\n\n@@ -4,20 +4,17 @@ import logging\n from testfixtures import LogCapture\n from twisted.internet import defer\n from twisted.trial.unittest import TestCase\n-import six\n \n from scrapy.http import Request\n from scrapy.crawler import CrawlerRunner\n from scrapy.utils.python import to_unicode\n-from tests.spiders import FollowAllSpider, DelaySpider, SimpleSpider, KeywordArgumentsSpider, \\\n+from tests.spiders import FollowAllSpider, DelaySpider, SimpleSpider, \\\n     BrokenStartRequestsSpider, SingleRequestSpider, DuplicateStartRequestsSpider\n from tests.mockserver import MockServer\n \n \n class CrawlTestCase(TestCase):\n \n-    maxDiff = None\n-\n     def setUp(self):\n         self.mockserver = MockServer()\n         self.mockserver.__enter__()\n@@ -26,29 +23,6 @@ class CrawlTestCase(TestCase):\n     def tearDown(self):\n         self.mockserver.__exit__(None, None, None)\n \n-    @defer.inlineCallbacks\n-    def test_callback_kwargs(self):\n-        crawler = self.runner.create_crawler(KeywordArgumentsSpider)\n-        with LogCapture() as log:\n-            yield crawler.crawl(mockserver=self.mockserver)\n-        self.assertTrue(all(crawler.spider.checks))\n-        self.assertEqual(len(crawler.spider.checks), crawler.stats.get_value('boolean_checks'))\n-        # check exceptions for argument mismatch\n-        exceptions = {}\n-        for line in log.records:\n-            for key in ('takes_less', 'takes_more'):\n-                if key in line.getMessage():\n-                    exceptions[key] = line\n-        self.assertEqual(exceptions['takes_less'].exc_info[0], TypeError)\n-        self.assertEqual(str(exceptions['takes_less'].exc_info[1]), \"parse_takes_less() got an unexpected keyword argument 'number'\")\n-        self.assertEqual(exceptions['takes_more'].exc_info[0], TypeError)\n-        # py2 and py3 messages are different\n-        exc_message = str(exceptions['takes_more'].exc_info[1])\n-        if six.PY2:\n-            self.assertEqual(exc_message, \"parse_takes_more() takes exactly 5 arguments (4 given)\")\n-        elif six.PY3:\n-            self.assertEqual(exc_message, \"parse_takes_more() missing 1 required positional argument: 'other'\")\n-\n     @defer.inlineCallbacks\n     def test_follow_all(self):\n         crawler = self.runner.create_crawler(FollowAllSpider)\n\n@@ -0,0 +1,106 @@\n+from testfixtures import LogCapture\n+from twisted.internet import defer\n+from twisted.trial.unittest import TestCase\n+import six\n+\n+from scrapy.http import Request\n+from scrapy.crawler import CrawlerRunner\n+from tests.spiders import MockServerSpider\n+from tests.mockserver import MockServer\n+\n+\n+class KeywordArgumentsSpider(MockServerSpider):\n+\n+    name = 'kwargs'\n+    checks = list()\n+\n+    def start_requests(self):\n+        data = {'key': 'value', 'number': 123}\n+        yield Request(self.mockserver.url('/first'), self.parse_first, cb_kwargs=data)\n+        yield Request(self.mockserver.url('/general_with'), self.parse_general, cb_kwargs=data)\n+        yield Request(self.mockserver.url('/general_without'), self.parse_general)\n+        yield Request(self.mockserver.url('/no_kwargs'), self.parse_no_kwargs)\n+        yield Request(self.mockserver.url('/default'), self.parse_default, cb_kwargs=data)\n+        yield Request(self.mockserver.url('/takes_less'), self.parse_takes_less, cb_kwargs=data)\n+        yield Request(self.mockserver.url('/takes_more'), self.parse_takes_more, cb_kwargs=data)\n+\n+    def parse_first(self, response, key, number):\n+        self.checks.append(key == 'value')\n+        self.checks.append(number == 123)\n+        self.crawler.stats.inc_value('boolean_checks', 2)\n+        yield response.follow(\n+            self.mockserver.url('/two'),\n+            self.parse_second,\n+            cb_kwargs={'new_key': 'new_value'})\n+\n+    def parse_second(self, response, new_key):\n+        self.checks.append(new_key == 'new_value')\n+        self.crawler.stats.inc_value('boolean_checks')\n+\n+    def parse_general(self, response, **kwargs):\n+        if response.url.endswith('/general_with'):\n+            self.checks.append(kwargs['key'] == 'value')\n+            self.checks.append(kwargs['number'] == 123)\n+            self.crawler.stats.inc_value('boolean_checks', 2)\n+        elif response.url.endswith('/general_without'):\n+            self.checks.append(kwargs == {})\n+            self.crawler.stats.inc_value('boolean_checks')\n+\n+    def parse_no_kwargs(self, response):\n+        self.checks.append(response.url.endswith('/no_kwargs'))\n+        self.crawler.stats.inc_value('boolean_checks')\n+\n+    def parse_default(self, response, key, number=None, default=99):\n+        self.checks.append(response.url.endswith('/default'))\n+        self.checks.append(key == 'value')\n+        self.checks.append(number == 123)\n+        self.checks.append(default == 99)\n+        self.crawler.stats.inc_value('boolean_checks', 4)\n+\n+    def parse_takes_less(self, response, key):\n+        \"\"\"\n+        Should raise\n+        TypeError: parse_takes_less() got an unexpected keyword argument 'number'\n+        \"\"\"\n+\n+    def parse_takes_more(self, response, key, number, other):\n+        \"\"\"\n+        Should raise\n+        TypeError: parse_takes_more() missing 1 required positional argument: 'other'\n+        \"\"\"\n+\n+\n+class CallbackKeywordArgumentsTestCase(TestCase):\n+\n+    maxDiff = None\n+\n+    def setUp(self):\n+        self.mockserver = MockServer()\n+        self.mockserver.__enter__()\n+        self.runner = CrawlerRunner()\n+\n+    def tearDown(self):\n+        self.mockserver.__exit__(None, None, None)\n+\n+    @defer.inlineCallbacks\n+    def test_callback_kwargs(self):\n+        crawler = self.runner.create_crawler(KeywordArgumentsSpider)\n+        with LogCapture() as log:\n+            yield crawler.crawl(mockserver=self.mockserver)\n+        self.assertTrue(all(crawler.spider.checks))\n+        self.assertEqual(len(crawler.spider.checks), crawler.stats.get_value('boolean_checks'))\n+        # check exceptions for argument mismatch\n+        exceptions = {}\n+        for line in log.records:\n+            for key in ('takes_less', 'takes_more'):\n+                if key in line.getMessage():\n+                    exceptions[key] = line\n+        self.assertEqual(exceptions['takes_less'].exc_info[0], TypeError)\n+        self.assertEqual(str(exceptions['takes_less'].exc_info[1]), \"parse_takes_less() got an unexpected keyword argument 'number'\")\n+        self.assertEqual(exceptions['takes_more'].exc_info[0], TypeError)\n+        # py2 and py3 messages are different\n+        exc_message = str(exceptions['takes_more'].exc_info[1])\n+        if six.PY2:\n+            self.assertEqual(exc_message, \"parse_takes_more() takes exactly 5 arguments (4 given)\")\n+        elif six.PY3:\n+            self.assertEqual(exc_message, \"parse_takes_more() missing 1 required positional argument: 'other'\")\n\\ No newline at end of file\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "scrapy#d4d68cf32187a129b556f371f8bcc24e0ee951ba", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 27 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 5 | Methods Changed: 4 | Complexity Δ (Sum/Max): 5/5 | Churn Δ: 28 | Churn Cumulative: 134 | Contributors (this commit): 1 | Commits (past 90d): 2 | Contributors (cumulative): 1 | DMM Complexity: 1.0\n\nDIFF:\n@@ -9,9 +9,26 @@ from tests.spiders import MockServerSpider\n from tests.mockserver import MockServer\n \n \n-class KeywordArgumentsSpider(MockServerSpider):\n+class InjectArgumentsDownloaderMiddleware(object):\n+    def process_request(self, request, spider):\n+        if request.callback.__name__ == 'parse_downloader_mw':\n+            request.cb_kwargs['from_process_request'] = True\n+        return None\n \n+    def process_response(self, request, response, spider):\n+        if request.callback.__name__ == 'parse_downloader_mw':\n+            request.cb_kwargs['from_process_response'] = True\n+        return response\n+\n+\n+class KeywordArgumentsSpider(MockServerSpider):\n     name = 'kwargs'\n+    custom_settings = {\n+        'DOWNLOADER_MIDDLEWARES': {\n+            __name__ + '.InjectArgumentsDownloaderMiddleware': 750,\n+        }\n+    }\n+\n     checks = list()\n \n     def start_requests(self):\n@@ -23,6 +40,7 @@ class KeywordArgumentsSpider(MockServerSpider):\n         yield Request(self.mockserver.url('/default'), self.parse_default, cb_kwargs=data)\n         yield Request(self.mockserver.url('/takes_less'), self.parse_takes_less, cb_kwargs=data)\n         yield Request(self.mockserver.url('/takes_more'), self.parse_takes_more, cb_kwargs=data)\n+        yield Request(self.mockserver.url('/downloader_mw'), self.parse_downloader_mw)\n \n     def parse_first(self, response, key, number):\n         self.checks.append(key == 'value')\n@@ -69,6 +87,14 @@ class KeywordArgumentsSpider(MockServerSpider):\n         TypeError: parse_takes_more() missing 1 required positional argument: 'other'\n         \"\"\"\n \n+    def parse_downloader_mw(self, response, from_process_request, from_process_response):\n+        \"\"\"\n+        Check if downloader middlewares are able to update the keyword arguments\n+        \"\"\"\n+        self.checks.append(bool(from_process_request))\n+        self.checks.append(bool(from_process_response))\n+        self.crawler.stats.inc_value('boolean_checks', 2)\n+\n \n class CallbackKeywordArgumentsTestCase(TestCase):\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
