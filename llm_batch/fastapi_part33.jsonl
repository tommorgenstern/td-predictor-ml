{"custom_id": "fastapi#8d3dcbcd1bb93bc0563eea5e98688d9dc4867e00", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 8 | Lines Deleted: 8 | Files Changed: 4 | Hunks: 8 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 16 | Churn Cumulative: 32 | Contributors (this commit): 3 | Commits (past 90d): 4 | Contributors (cumulative): 12 | DMM Complexity: None\n\nDIFF:\n@@ -1,13 +1,13 @@\n from typing import Set\n \n from fastapi import FastAPI\n-from pydantic import BaseModel, UrlStr\n+from pydantic import BaseModel, HttpUrl\n \n app = FastAPI()\n \n \n class Image(BaseModel):\n-    url: UrlStr\n+    url: HttpUrl\n     name: str\n \n \n\n@@ -1,13 +1,13 @@\n from typing import List, Set\n \n from fastapi import FastAPI\n-from pydantic import BaseModel, UrlStr\n+from pydantic import BaseModel, HttpUrl\n \n app = FastAPI()\n \n \n class Image(BaseModel):\n-    url: UrlStr\n+    url: HttpUrl\n     name: str\n \n \n\n@@ -1,13 +1,13 @@\n from typing import List, Set\n \n from fastapi import FastAPI\n-from pydantic import BaseModel, UrlStr\n+from pydantic import BaseModel, HttpUrl\n \n app = FastAPI()\n \n \n class Image(BaseModel):\n-    url: UrlStr\n+    url: HttpUrl\n     name: str\n \n \n\n@@ -1,13 +1,13 @@\n from typing import List\n \n from fastapi import FastAPI\n-from pydantic import BaseModel, UrlStr\n+from pydantic import BaseModel, HttpUrl\n \n app = FastAPI()\n \n \n class Image(BaseModel):\n-    url: UrlStr\n+    url: HttpUrl\n     name: str\n \n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#cb1410426e11886825fece1cdc10a781bbfd57b2", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 232 | Lines Deleted: 2 | Files Changed: 3 | Hunks: 3 | Methods Changed: 6 | Complexity Δ (Sum/Max): 5/5 | Churn Δ: 234 | Churn Cumulative: 3582 | Contributors (this commit): 14 | Commits (past 90d): 8 | Contributors (cumulative): 17 | DMM Complexity: 0.9411764705882353\n\nDIFF:\n@@ -25,8 +25,7 @@ invoices_callback_router = APIRouter(default_response_class=JSONResponse)\n \n \n @invoices_callback_router.post(\n-    \"{$callback_url}/invoices/{$request.body.id}\",\n-    response_model=InvoiceEventReceived,\n+    \"{$callback_url}/invoices/{$request.body.id}\", response_model=InvoiceEventReceived,\n )\n def invoice_notification(body: InvoiceEvent):\n     pass\n\n@@ -554,6 +554,7 @@ class APIRouter(routing.Router):\n                     response_class=route.response_class or default_response_class,\n                     name=route.name,\n                     route_class_override=type(route),\n+                    callbacks=route.callbacks,\n                 )\n             elif isinstance(route, routing.Route):\n                 self.add_route(\n\n@@ -0,0 +1,230 @@\n+from fastapi import APIRouter, FastAPI\n+from pydantic import BaseModel, HttpUrl\n+from starlette.responses import JSONResponse\n+from starlette.testclient import TestClient\n+\n+app = FastAPI()\n+\n+\n+class Invoice(BaseModel):\n+    id: str\n+    title: str = None\n+    customer: str\n+    total: float\n+\n+\n+class InvoiceEvent(BaseModel):\n+    description: str\n+    paid: bool\n+\n+\n+class InvoiceEventReceived(BaseModel):\n+    ok: bool\n+\n+\n+invoices_callback_router = APIRouter(default_response_class=JSONResponse)\n+\n+\n+@invoices_callback_router.post(\n+    \"{$callback_url}/invoices/{$request.body.id}\", response_model=InvoiceEventReceived,\n+)\n+def invoice_notification(body: InvoiceEvent):\n+    pass\n+\n+\n+subrouter = APIRouter()\n+\n+\n+@subrouter.post(\"/invoices/\", callbacks=invoices_callback_router.routes)\n+def create_invoice(invoice: Invoice, callback_url: HttpUrl = None):\n+    \"\"\"\n+    Create an invoice.\n+\n+    This will (let's imagine) let the API user (some external developer) create an\n+    invoice.\n+\n+    And this path operation will:\n+\n+    * Send the invoice to the client.\n+    * Collect the money from the client.\n+    * Send a notification back to the API user (the external developer), as a callback.\n+        * At this point is that the API will somehow send a POST request to the\n+            external API with the notification of the invoice event\n+            (e.g. \"payment successful\").\n+    \"\"\"\n+    # Send the invoice, collect the money, send the notification (the callback)\n+    return {\"msg\": \"Invoice received\"}\n+\n+\n+app.include_router(subrouter)\n+\n+client = TestClient(app)\n+\n+openapi_schema = {\n+    \"openapi\": \"3.0.2\",\n+    \"info\": {\"title\": \"Fast API\", \"version\": \"0.1.0\"},\n+    \"paths\": {\n+        \"/invoices/\": {\n+            \"post\": {\n+                \"summary\": \"Create Invoice\",\n+                \"description\": 'Create an invoice.\\n\\nThis will (let\\'s imagine) let the API user (some external developer) create an\\ninvoice.\\n\\nAnd this path operation will:\\n\\n* Send the invoice to the client.\\n* Collect the money from the client.\\n* Send a notification back to the API user (the external developer), as a callback.\\n    * At this point is that the API will somehow send a POST request to the\\n        external API with the notification of the invoice event\\n        (e.g. \"payment successful\").',\n+                \"operationId\": \"create_invoice_invoices__post\",\n+                \"parameters\": [\n+                    {\n+                        \"required\": False,\n+                        \"schema\": {\n+                            \"title\": \"Callback Url\",\n+                            \"maxLength\": 2083,\n+                            \"minLength\": 1,\n+                            \"type\": \"string\",\n+                            \"format\": \"uri\",\n+                        },\n+                        \"name\": \"callback_url\",\n+                        \"in\": \"query\",\n+                    }\n+                ],\n+                \"requestBody\": {\n+                    \"content\": {\n+                        \"application/json\": {\n+                            \"schema\": {\"$ref\": \"#/components/schemas/Invoice\"}\n+                        }\n+                    },\n+                    \"required\": True,\n+                },\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                    },\n+                    \"422\": {\n+                        \"description\": \"Validation Error\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\n+                                    \"$ref\": \"#/components/schemas/HTTPValidationError\"\n+                                }\n+                            }\n+                        },\n+                    },\n+                },\n+                \"callbacks\": {\n+                    \"invoice_notification\": {\n+                        \"{$callback_url}/invoices/{$request.body.id}\": {\n+                            \"post\": {\n+                                \"summary\": \"Invoice Notification\",\n+                                \"operationId\": \"invoice_notification__callback_url__invoices___request_body_id__post\",\n+                                \"requestBody\": {\n+                                    \"required\": True,\n+                                    \"content\": {\n+                                        \"application/json\": {\n+                                            \"schema\": {\n+                                                \"$ref\": \"#/components/schemas/InvoiceEvent\"\n+                                            }\n+                                        }\n+                                    },\n+                                },\n+                                \"responses\": {\n+                                    \"200\": {\n+                                        \"description\": \"Successful Response\",\n+                                        \"content\": {\n+                                            \"application/json\": {\n+                                                \"schema\": {\n+                                                    \"$ref\": \"#/components/schemas/InvoiceEventReceived\"\n+                                                }\n+                                            }\n+                                        },\n+                                    },\n+                                    \"422\": {\n+                                        \"description\": \"Validation Error\",\n+                                        \"content\": {\n+                                            \"application/json\": {\n+                                                \"schema\": {\n+                                                    \"$ref\": \"#/components/schemas/HTTPValidationError\"\n+                                                }\n+                                            }\n+                                        },\n+                                    },\n+                                },\n+                            }\n+                        }\n+                    }\n+                },\n+            }\n+        }\n+    },\n+    \"components\": {\n+        \"schemas\": {\n+            \"HTTPValidationError\": {\n+                \"title\": \"HTTPValidationError\",\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"detail\": {\n+                        \"title\": \"Detail\",\n+                        \"type\": \"array\",\n+                        \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n+                    }\n+                },\n+            },\n+            \"Invoice\": {\n+                \"title\": \"Invoice\",\n+                \"required\": [\"id\", \"customer\", \"total\"],\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"id\": {\"title\": \"Id\", \"type\": \"string\"},\n+                    \"title\": {\"title\": \"Title\", \"type\": \"string\"},\n+                    \"customer\": {\"title\": \"Customer\", \"type\": \"string\"},\n+                    \"total\": {\"title\": \"Total\", \"type\": \"number\"},\n+                },\n+            },\n+            \"InvoiceEvent\": {\n+                \"title\": \"InvoiceEvent\",\n+                \"required\": [\"description\", \"paid\"],\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"description\": {\"title\": \"Description\", \"type\": \"string\"},\n+                    \"paid\": {\"title\": \"Paid\", \"type\": \"boolean\"},\n+                },\n+            },\n+            \"InvoiceEventReceived\": {\n+                \"title\": \"InvoiceEventReceived\",\n+                \"required\": [\"ok\"],\n+                \"type\": \"object\",\n+                \"properties\": {\"ok\": {\"title\": \"Ok\", \"type\": \"boolean\"}},\n+            },\n+            \"ValidationError\": {\n+                \"title\": \"ValidationError\",\n+                \"required\": [\"loc\", \"msg\", \"type\"],\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"loc\": {\n+                        \"title\": \"Location\",\n+                        \"type\": \"array\",\n+                        \"items\": {\"type\": \"string\"},\n+                    },\n+                    \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n+                    \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n+                },\n+            },\n+        }\n+    },\n+}\n+\n+\n+def test_openapi():\n+    with client:\n+        response = client.get(\"/openapi.json\")\n+\n+        assert response.json() == openapi_schema\n+\n+\n+def test_get():\n+    response = client.post(\n+        \"/invoices/\", json={\"id\": \"fooinvoice\", \"customer\": \"John\", \"total\": 5.3}\n+    )\n+    assert response.status_code == 200\n+    assert response.json() == {\"msg\": \"Invoice received\"}\n+\n+\n+def test_dummy_callback():\n+    # Just for coverage\n+    invoice_notification({})\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#91fe90e8e67c3cc0951e3f16704a7c96385960ac", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 115 | Lines Deleted: 0 | Files Changed: 3 | Hunks: 3 | Methods Changed: 7 | Complexity Δ (Sum/Max): 11/6 | Churn Δ: 115 | Churn Cumulative: 519 | Contributors (this commit): 2 | Commits (past 90d): 3 | Contributors (cumulative): 5 | DMM Complexity: 1.0\n\nDIFF:\n@@ -8,6 +8,7 @@ from .http import (\n )\n from .oauth2 import (\n     OAuth2,\n+    OAuth2AuthorizationCodeBearer,\n     OAuth2PasswordBearer,\n     OAuth2PasswordRequestForm,\n     SecurityScopes,\n\n@@ -163,6 +163,43 @@ class OAuth2PasswordBearer(OAuth2):\n         return param\n \n \n+class OAuth2AuthorizationCodeBearer(OAuth2):\n+    def __init__(\n+        self,\n+        authorizationUrl: str,\n+        tokenUrl: str,\n+        refreshUrl: str = None,\n+        scheme_name: str = None,\n+        scopes: dict = None,\n+        auto_error: bool = True,\n+    ):\n+        if not scopes:\n+            scopes = {}\n+        flows = OAuthFlowsModel(\n+            authorizationCode={\n+                \"authorizationUrl\": authorizationUrl,\n+                \"tokenUrl\": tokenUrl,\n+                \"refreshUrl\": refreshUrl,\n+                \"scopes\": scopes,\n+            }\n+        )\n+        super().__init__(flows=flows, scheme_name=scheme_name, auto_error=auto_error)\n+\n+    async def __call__(self, request: Request) -> Optional[str]:\n+        authorization: str = request.headers.get(\"Authorization\")\n+        scheme, param = get_authorization_scheme_param(authorization)\n+        if not authorization or scheme.lower() != \"bearer\":\n+            if self.auto_error:\n+                raise HTTPException(\n+                    status_code=HTTP_401_UNAUTHORIZED,\n+                    detail=\"Not authenticated\",\n+                    headers={\"WWW-Authenticate\": \"Bearer\"},\n+                )\n+            else:\n+                return None  # pragma: nocover\n+        return param\n+\n+\n class SecurityScopes:\n     def __init__(self, scopes: List[str] = None):\n         self.scopes = scopes or []\n\n@@ -0,0 +1,77 @@\n+from typing import Optional\n+\n+from fastapi import FastAPI, Security\n+from fastapi.security import OAuth2AuthorizationCodeBearer\n+from starlette.testclient import TestClient\n+\n+app = FastAPI()\n+\n+oauth2_scheme = OAuth2AuthorizationCodeBearer(\n+    authorizationUrl=\"/authorize\", tokenUrl=\"/token\", auto_error=True\n+)\n+\n+\n+@app.get(\"/items/\")\n+async def read_items(token: Optional[str] = Security(oauth2_scheme)):\n+    return {\"token\": token}\n+\n+\n+client = TestClient(app)\n+\n+openapi_schema = {\n+    \"openapi\": \"3.0.2\",\n+    \"info\": {\"title\": \"Fast API\", \"version\": \"0.1.0\"},\n+    \"paths\": {\n+        \"/items/\": {\n+            \"get\": {\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                    }\n+                },\n+                \"summary\": \"Read Items\",\n+                \"operationId\": \"read_items_items__get\",\n+                \"security\": [{\"OAuth2AuthorizationCodeBearer\": []}],\n+            }\n+        }\n+    },\n+    \"components\": {\n+        \"securitySchemes\": {\n+            \"OAuth2AuthorizationCodeBearer\": {\n+                \"type\": \"oauth2\",\n+                \"flows\": {\n+                    \"authorizationCode\": {\n+                        \"authorizationUrl\": \"/authorize\",\n+                        \"tokenUrl\": \"/token\",\n+                        \"scopes\": {},\n+                    }\n+                },\n+            }\n+        }\n+    },\n+}\n+\n+\n+def test_openapi_schema():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200\n+    assert response.json() == openapi_schema\n+\n+\n+def test_no_token():\n+    response = client.get(\"/items\")\n+    assert response.status_code == 401\n+    assert response.json() == {\"detail\": \"Not authenticated\"}\n+\n+\n+def test_incorrect_token():\n+    response = client.get(\"/items\", headers={\"Authorization\": \"Non-existent testtoken\"})\n+    assert response.status_code == 401\n+    assert response.json() == {\"detail\": \"Not authenticated\"}\n+\n+\n+def test_token():\n+    response = client.get(\"/items\", headers={\"Authorization\": \"Bearer testtoken\"})\n+    assert response.status_code == 200\n+    assert response.json() == {\"token\": \"testtoken\"}\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#a9673f145a6bf0f87ec5f934e6337984d619bd96", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 203 | Contributors (this commit): 1 | Commits (past 90d): 5 | Contributors (cumulative): 1 | DMM Complexity: None\n\nDIFF:\n@@ -1,6 +1,6 @@\n \"\"\"FastAPI framework, high performance, easy to learn, fast to code, ready for production\"\"\"\n \n-__version__ = \"0.45.0\"\n+__version__ = \"0.46.0\"\n \n from starlette.background import BackgroundTasks\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#ba9c9a3f78f5ed229e16b64a9100c7e54cbe67a8", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 5 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 6 | Churn Cumulative: 28 | Contributors (this commit): 2 | Commits (past 90d): 1 | Contributors (cumulative): 2 | DMM Complexity: 1.0\n\nDIFF:\n@@ -1,3 +1,5 @@\n+import secrets\n+\n from fastapi import Depends, FastAPI, HTTPException\n from fastapi.security import HTTPBasic, HTTPBasicCredentials\n from starlette.status import HTTP_401_UNAUTHORIZED\n@@ -8,7 +10,9 @@ security = HTTPBasic()\n \n \n def get_current_username(credentials: HTTPBasicCredentials = Depends(security)):\n-    if credentials.username != \"foo\" or credentials.password != \"password\":\n+    correct_username = secrets.compare_digest(credentials.username, \"stanleyjobson\")\n+    correct_password = secrets.compare_digest(credentials.password, \"swordfish\")\n+    if not correct_username and correct_password:\n         raise HTTPException(\n             status_code=HTTP_401_UNAUTHORIZED,\n             detail=\"Incorrect email or password\",\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#3f53deebc949ee9d4aaa9eae7e195f9f2cfc5598", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 20 | Lines Deleted: 9 | Files Changed: 2 | Hunks: 10 | Methods Changed: 5 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 29 | Churn Cumulative: 125 | Contributors (this commit): 1 | Commits (past 90d): 4 | Contributors (cumulative): 2 | DMM Complexity: 1.0\n\nDIFF:\n@@ -3,22 +3,20 @@ from contextvars import ContextVar\n import peewee\n \n DATABASE_NAME = \"test.db\"\n+db_state_default = {\"closed\": None, \"conn\": None, \"ctx\": None, \"transactions\": None}\n+db_state = ContextVar(\"db_state\", default=db_state_default.copy())\n \n \n class PeeweeConnectionState(peewee._ConnectionState):\n     def __init__(self, **kwargs):\n-        super().__setattr__(\"_state\", {})\n-        self._state[\"closed\"] = ContextVar(\"closed\", default=True)\n-        self._state[\"conn\"] = ContextVar(\"conn\", default=None)\n-        self._state[\"ctx\"] = ContextVar(\"ctx\", default=[])\n-        self._state[\"transactions\"] = ContextVar(\"transactions\", default=[])\n+        super().__setattr__(\"_state\", db_state)\n         super().__init__(**kwargs)\n \n     def __setattr__(self, name, value):\n-        self._state[name].set(value)\n+        self._state.get()[name] = value\n \n     def __getattr__(self, name):\n-        return self._state[name].get()\n+        return self._state.get()[name]\n \n \n db = peewee.SqliteDatabase(DATABASE_NAME, check_same_thread=False)\n\n@@ -2,8 +2,10 @@ import time\n from typing import List\n \n from fastapi import Depends, FastAPI, HTTPException\n+from starlette.requests import Request\n \n from . import crud, database, models, schemas\n+from .database import db_state_default\n \n database.db.connect()\n database.db.create_tables([models.User, models.Item])\n@@ -11,8 +13,9 @@ database.db.close()\n \n app = FastAPI()\n \n+sleep_time = 10\n+\n \n-# Dependency\n def get_db():\n     try:\n         database.db.connect()\n@@ -22,6 +25,14 @@ def get_db():\n             database.db.close()\n \n \n+@app.middleware(\"http\")\n+async def reset_db_middleware(request: Request, call_next):\n+    database.db._state._state.set(db_state_default.copy())\n+    database.db._state.reset()\n+    response = await call_next(request)\n+    return response\n+\n+\n @app.post(\"/users/\", response_model=schemas.User, dependencies=[Depends(get_db)])\n def create_user(user: schemas.UserCreate):\n     db_user = crud.get_user_by_email(email=user.email)\n@@ -65,6 +76,8 @@ def read_items(skip: int = 0, limit: int = 100):\n     \"/slowusers/\", response_model=List[schemas.User], dependencies=[Depends(get_db)]\n )\n def read_slow_users(skip: int = 0, limit: int = 100):\n-    time.sleep(15)  # Fake long processing request\n+    global sleep_time\n+    sleep_time = max(0, sleep_time - 1)\n+    time.sleep(sleep_time)  # Fake long processing request\n     users = crud.get_users(skip=skip, limit=limit)\n     return users\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#5db99a27cf640864b4793807811848698c5ff4a2", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 194 | Lines Deleted: 58 | Files Changed: 6 | Hunks: 18 | Methods Changed: 21 | Complexity Δ (Sum/Max): 5/4 | Churn Δ: 252 | Churn Cumulative: 3733 | Contributors (this commit): 16 | Commits (past 90d): 13 | Contributors (cumulative): 26 | DMM Complexity: 1.0\n\nDIFF:\n@@ -1,28 +1,27 @@\n-from fastapi import FastAPI, HTTPException\n-from fastapi.exception_handlers import (\n-    http_exception_handler,\n-    request_validation_exception_handler,\n-)\n+from fastapi import FastAPI\n+from fastapi.encoders import jsonable_encoder\n from fastapi.exceptions import RequestValidationError\n-from starlette.exceptions import HTTPException as StarletteHTTPException\n+from pydantic import BaseModel\n+from starlette import status\n+from starlette.requests import Request\n+from starlette.responses import JSONResponse\n \n app = FastAPI()\n \n \n-@app.exception_handler(StarletteHTTPException)\n-async def custom_http_exception_handler(request, exc):\n-    print(f\"OMG! An HTTP error!: {exc}\")\n-    return await http_exception_handler(request, exc)\n-\n-\n @app.exception_handler(RequestValidationError)\n-async def validation_exception_handler(request, exc):\n-    print(f\"OMG! The client sent invalid data!: {exc}\")\n-    return await request_validation_exception_handler(request, exc)\n+async def validation_exception_handler(request: Request, exc: RequestValidationError):\n+    return JSONResponse(\n+        status_code=status.HTTP_422_UNPROCESSABLE_ENTITY,\n+        content=jsonable_encoder({\"detail\": exc.errors(), \"body\": exc.body}),\n+    )\n \n \n-@app.get(\"/items/{item_id}\")\n-async def read_item(item_id: int):\n-    if item_id == 3:\n-        raise HTTPException(status_code=418, detail=\"Nope! I don't like 3.\")\n-    return {\"item_id\": item_id}\n+class Item(BaseModel):\n+    title: str\n+    size: int\n+\n+\n+@app.post(\"/items/\")\n+async def create_item(item: Item):\n+    return item\n\n@@ -0,0 +1,28 @@\n+from fastapi import FastAPI, HTTPException\n+from fastapi.exception_handlers import (\n+    http_exception_handler,\n+    request_validation_exception_handler,\n+)\n+from fastapi.exceptions import RequestValidationError\n+from starlette.exceptions import HTTPException as StarletteHTTPException\n+\n+app = FastAPI()\n+\n+\n+@app.exception_handler(StarletteHTTPException)\n+async def custom_http_exception_handler(request, exc):\n+    print(f\"OMG! An HTTP error!: {exc}\")\n+    return await http_exception_handler(request, exc)\n+\n+\n+@app.exception_handler(RequestValidationError)\n+async def validation_exception_handler(request, exc):\n+    print(f\"OMG! The client sent invalid data!: {exc}\")\n+    return await request_validation_exception_handler(request, exc)\n+\n+\n+@app.get(\"/items/{item_id}\")\n+async def read_item(item_id: int):\n+    if item_id == 3:\n+        raise HTTPException(status_code=418, detail=\"Nope! I don't like 3.\")\n+    return {\"item_id\": item_id}\n\n@@ -21,7 +21,8 @@ WebSocketErrorModel = create_model(\"WebSocket\")\n \n \n class RequestValidationError(ValidationError):\n-    def __init__(self, errors: Sequence[ErrorList]) -> None:\n+    def __init__(self, errors: Sequence[ErrorList], *, body: Any = None) -> None:\n+        self.body = body\n         if PYDANTIC_1:\n             super().__init__(errors, RequestErrorModel)\n         else:\n\n@@ -120,7 +120,7 @@ def get_request_handler(\n         )\n         values, errors, background_tasks, sub_response, _ = solved_result\n         if errors:\n-            raise RequestValidationError(errors)\n+            raise RequestValidationError(errors, body=body)\n         else:\n             assert dependant.call is not None, \"dependant.call must be a function\"\n             if is_coroutine:\n\n@@ -8,8 +8,18 @@ openapi_schema = {\n     \"openapi\": \"3.0.2\",\n     \"info\": {\"title\": \"Fast API\", \"version\": \"0.1.0\"},\n     \"paths\": {\n-        \"/items/{item_id}\": {\n-            \"get\": {\n+        \"/items/\": {\n+            \"post\": {\n+                \"summary\": \"Create Item\",\n+                \"operationId\": \"create_item_items__post\",\n+                \"requestBody\": {\n+                    \"content\": {\n+                        \"application/json\": {\n+                            \"schema\": {\"$ref\": \"#/components/schemas/Item\"}\n+                        }\n+                    },\n+                    \"required\": True,\n+                },\n                 \"responses\": {\n                     \"200\": {\n                         \"description\": \"Successful Response\",\n@@ -26,21 +36,31 @@ openapi_schema = {\n                         },\n                     },\n                 },\n-                \"summary\": \"Read Item\",\n-                \"operationId\": \"read_item_items__item_id__get\",\n-                \"parameters\": [\n-                    {\n-                        \"required\": True,\n-                        \"schema\": {\"title\": \"Item Id\", \"type\": \"integer\"},\n-                        \"name\": \"item_id\",\n-                        \"in\": \"path\",\n-                    }\n-                ],\n             }\n         }\n     },\n     \"components\": {\n         \"schemas\": {\n+            \"HTTPValidationError\": {\n+                \"title\": \"HTTPValidationError\",\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"detail\": {\n+                        \"title\": \"Detail\",\n+                        \"type\": \"array\",\n+                        \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n+                    }\n+                },\n+            },\n+            \"Item\": {\n+                \"title\": \"Item\",\n+                \"required\": [\"title\", \"size\"],\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"title\": {\"title\": \"Title\", \"type\": \"string\"},\n+                    \"size\": {\"title\": \"Size\", \"type\": \"integer\"},\n+                },\n+            },\n             \"ValidationError\": {\n                 \"title\": \"ValidationError\",\n                 \"required\": [\"loc\", \"msg\", \"type\"],\n@@ -55,17 +75,6 @@ openapi_schema = {\n                     \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n                 },\n             },\n-            \"HTTPValidationError\": {\n-                \"title\": \"HTTPValidationError\",\n-                \"type\": \"object\",\n-                \"properties\": {\n-                    \"detail\": {\n-                        \"title\": \"Detail\",\n-                        \"type\": \"array\",\n-                        \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n-                    }\n-                },\n-            },\n         }\n     },\n }\n@@ -77,27 +86,23 @@ def test_openapi_schema():\n     assert response.json() == openapi_schema\n \n \n-def test_get_validation_error():\n-    response = client.get(\"/items/foo\")\n+def test_post_validation_error():\n+    response = client.post(\"/items/\", json={\"title\": \"towel\", \"size\": \"XL\"})\n     assert response.status_code == 422\n     assert response.json() == {\n         \"detail\": [\n             {\n-                \"loc\": [\"path\", \"item_id\"],\n+                \"loc\": [\"body\", \"item\", \"size\"],\n                 \"msg\": \"value is not a valid integer\",\n                 \"type\": \"type_error.integer\",\n             }\n-        ]\n+        ],\n+        \"body\": {\"title\": \"towel\", \"size\": \"XL\"},\n     }\n \n \n-def test_get_http_error():\n-    response = client.get(\"/items/3\")\n-    assert response.status_code == 418\n-    assert response.json() == {\"detail\": \"Nope! I don't like 3.\"}\n-\n-\n-def test_get():\n-    response = client.get(\"/items/2\")\n+def test_post():\n+    data = {\"title\": \"towel\", \"size\": 5}\n+    response = client.post(\"/items/\", json=data)\n     assert response.status_code == 200\n-    assert response.json() == {\"item_id\": 2}\n+    assert response.json() == data\n\n@@ -0,0 +1,103 @@\n+from starlette.testclient import TestClient\n+\n+from handling_errors.tutorial006 import app\n+\n+client = TestClient(app)\n+\n+openapi_schema = {\n+    \"openapi\": \"3.0.2\",\n+    \"info\": {\"title\": \"Fast API\", \"version\": \"0.1.0\"},\n+    \"paths\": {\n+        \"/items/{item_id}\": {\n+            \"get\": {\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                    },\n+                    \"422\": {\n+                        \"description\": \"Validation Error\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\n+                                    \"$ref\": \"#/components/schemas/HTTPValidationError\"\n+                                }\n+                            }\n+                        },\n+                    },\n+                },\n+                \"summary\": \"Read Item\",\n+                \"operationId\": \"read_item_items__item_id__get\",\n+                \"parameters\": [\n+                    {\n+                        \"required\": True,\n+                        \"schema\": {\"title\": \"Item Id\", \"type\": \"integer\"},\n+                        \"name\": \"item_id\",\n+                        \"in\": \"path\",\n+                    }\n+                ],\n+            }\n+        }\n+    },\n+    \"components\": {\n+        \"schemas\": {\n+            \"ValidationError\": {\n+                \"title\": \"ValidationError\",\n+                \"required\": [\"loc\", \"msg\", \"type\"],\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"loc\": {\n+                        \"title\": \"Location\",\n+                        \"type\": \"array\",\n+                        \"items\": {\"type\": \"string\"},\n+                    },\n+                    \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n+                    \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n+                },\n+            },\n+            \"HTTPValidationError\": {\n+                \"title\": \"HTTPValidationError\",\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"detail\": {\n+                        \"title\": \"Detail\",\n+                        \"type\": \"array\",\n+                        \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n+                    }\n+                },\n+            },\n+        }\n+    },\n+}\n+\n+\n+def test_openapi_schema():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200\n+    assert response.json() == openapi_schema\n+\n+\n+def test_get_validation_error():\n+    response = client.get(\"/items/foo\")\n+    assert response.status_code == 422\n+    assert response.json() == {\n+        \"detail\": [\n+            {\n+                \"loc\": [\"path\", \"item_id\"],\n+                \"msg\": \"value is not a valid integer\",\n+                \"type\": \"type_error.integer\",\n+            }\n+        ]\n+    }\n+\n+\n+def test_get_http_error():\n+    response = client.get(\"/items/3\")\n+    assert response.status_code == 418\n+    assert response.json() == {\"detail\": \"Nope! I don't like 3.\"}\n+\n+\n+def test_get():\n+    response = client.get(\"/items/2\")\n+    assert response.status_code == 200\n+    assert response.json() == {\"item_id\": 2}\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#874d24181e779ebc6e1c52afb7d6598f863fd6a8", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 49 | Lines Deleted: 3 | Files Changed: 2 | Hunks: 2 | Methods Changed: 7 | Complexity Δ (Sum/Max): 7/6 | Churn Δ: 52 | Churn Cumulative: 1538 | Contributors (this commit): 10 | Commits (past 90d): 5 | Contributors (cumulative): 11 | DMM Complexity: 1.0\n\nDIFF:\n@@ -629,9 +629,9 @@ async def request_body_to_args(\n         for field in required_params:\n             value: Any = None\n             if received_body is not None:\n-                if field.shape in sequence_shapes and isinstance(\n-                    received_body, FormData\n-                ):\n+                if (\n+                    field.shape in sequence_shapes or field.type_ in sequence_types\n+                ) and isinstance(received_body, FormData):\n                     value = received_body.getlist(field.alias)\n                 else:\n                     value = received_body.get(field.alias)\n\n@@ -0,0 +1,46 @@\n+from fastapi import FastAPI, Form\n+from starlette.testclient import TestClient\n+\n+app = FastAPI()\n+\n+\n+@app.post(\"/form/python-list\")\n+def post_form_param_list(items: list = Form(...)):\n+    return items\n+\n+\n+@app.post(\"/form/python-set\")\n+def post_form_param_set(items: set = Form(...)):\n+    return items\n+\n+\n+@app.post(\"/form/python-tuple\")\n+def post_form_param_tuple(items: tuple = Form(...)):\n+    return items\n+\n+\n+client = TestClient(app)\n+\n+\n+def test_python_list_param_as_form():\n+    response = client.post(\n+        \"/form/python-list\", data={\"items\": [\"first\", \"second\", \"third\"]}\n+    )\n+    assert response.status_code == 200\n+    assert response.json() == [\"first\", \"second\", \"third\"]\n+\n+\n+def test_python_set_param_as_form():\n+    response = client.post(\n+        \"/form/python-set\", data={\"items\": [\"first\", \"second\", \"third\"]}\n+    )\n+    assert response.status_code == 200\n+    assert set(response.json()) == {\"first\", \"second\", \"third\"}\n+\n+\n+def test_python_tuple_param_as_form():\n+    response = client.post(\n+        \"/form/python-tuple\", data={\"items\": [\"first\", \"second\", \"third\"]}\n+    )\n+    assert response.status_code == 200\n+    assert response.json() == [\"first\", \"second\", \"third\"]\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#174e7b1730c6b21eb015a8b8ff3e56e018bc0de3", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 30 | Contributors (this commit): 3 | Commits (past 90d): 2 | Contributors (cumulative): 3 | DMM Complexity: None\n\nDIFF:\n@@ -12,7 +12,7 @@ security = HTTPBasic()\n def get_current_username(credentials: HTTPBasicCredentials = Depends(security)):\n     correct_username = secrets.compare_digest(credentials.username, \"stanleyjobson\")\n     correct_password = secrets.compare_digest(credentials.password, \"swordfish\")\n-    if not correct_username and correct_password:\n+    if not (correct_username and correct_password):\n         raise HTTPException(\n             status_code=HTTP_401_UNAUTHORIZED,\n             detail=\"Incorrect email or password\",\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#3a5158a784d7baaf370dff700913ab559e361213", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 205 | Contributors (this commit): 1 | Commits (past 90d): 6 | Contributors (cumulative): 1 | DMM Complexity: None\n\nDIFF:\n@@ -1,6 +1,6 @@\n \"\"\"FastAPI framework, high performance, easy to learn, fast to code, ready for production\"\"\"\n \n-__version__ = \"0.46.0\"\n+__version__ = \"0.47.0\"\n \n from starlette.background import BackgroundTasks\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#7cea84b74ca3106a7f861b774e9d215e5228728f", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 9 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 6 | Methods Changed: 3 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 11 | Churn Cumulative: 3309 | Contributors (this commit): 15 | Commits (past 90d): 7 | Contributors (cumulative): 15 | DMM Complexity: 0.0\n\nDIFF:\n@@ -47,7 +47,7 @@ except ImportError:  # pragma: nocover\n     from pydantic.fields import Field as ModelField  # type: ignore\n \n \n-def serialize_response(\n+async def serialize_response(\n     *,\n     field: ModelField = None,\n     response: Response,\n@@ -55,6 +55,7 @@ def serialize_response(\n     exclude: Union[SetIntStr, DictIntStrAny] = set(),\n     by_alias: bool = True,\n     exclude_unset: bool = False,\n+    is_coroutine: bool = True,\n ) -> Any:\n     if field:\n         errors = []\n@@ -63,7 +64,12 @@ def serialize_response(\n                 response = response.dict(exclude_unset=exclude_unset)\n             else:\n                 response = response.dict(skip_defaults=exclude_unset)  # pragma: nocover\n+        if is_coroutine:\n             value, errors_ = field.validate(response, {}, loc=(\"response\",))\n+        else:\n+            value, errors_ = await run_in_threadpool(\n+                field.validate, response, {}, loc=(\"response\",)\n+            )\n         if isinstance(errors_, ErrorWrapper):\n             errors.append(errors_)\n         elif isinstance(errors_, list):\n@@ -131,13 +137,14 @@ def get_request_handler(\n                 if raw_response.background is None:\n                     raw_response.background = background_tasks\n                 return raw_response\n-            response_data = serialize_response(\n+            response_data = await serialize_response(\n                 field=response_field,\n                 response=raw_response,\n                 include=response_model_include,\n                 exclude=response_model_exclude,\n                 by_alias=response_model_by_alias,\n                 exclude_unset=response_model_exclude_unset,\n+                is_coroutine=is_coroutine,\n             )\n             response = response_class(\n                 content=response_data,\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#75a07f24bf01a31225ee687f3e2b3fc1981b67ab", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 92 | Lines Deleted: 1 | Files Changed: 2 | Hunks: 2 | Methods Changed: 5 | Complexity Δ (Sum/Max): 4/4 | Churn Δ: 93 | Churn Cumulative: 386 | Contributors (this commit): 7 | Commits (past 90d): 6 | Contributors (cumulative): 8 | DMM Complexity: 1.0\n\nDIFF:\n@@ -97,7 +97,7 @@ def create_cloned_field(field: ModelField) -> ModelField:\n             original_type.__name__, __config__=original_type.__config__\n         )\n         for f in original_type.__fields__.values():\n-            use_type.__fields__[f.name] = f\n+            use_type.__fields__[f.name] = create_cloned_field(f)\n         use_type.__validators__ = original_type.__validators__\n     if PYDANTIC_1:\n         new_field = ModelField(\n\n@@ -0,0 +1,91 @@\n+from fastapi import Depends, FastAPI\n+from pydantic import BaseModel\n+from starlette.testclient import TestClient\n+\n+app = FastAPI()\n+\n+\n+class ModelB(BaseModel):\n+    username: str\n+\n+\n+class ModelC(ModelB):\n+    password: str\n+\n+\n+class ModelA(BaseModel):\n+    name: str\n+    description: str = None\n+    model_b: ModelB\n+\n+\n+async def get_model_c() -> ModelC:\n+    return ModelC(username=\"test-user\", password=\"test-password\")\n+\n+\n+@app.get(\"/model\", response_model=ModelA)\n+async def get_model_a(model_c=Depends(get_model_c)):\n+    return {\"name\": \"model-a-name\", \"description\": \"model-a-desc\", \"model_b\": model_c}\n+\n+\n+client = TestClient(app)\n+\n+\n+openapi_schema = {\n+    \"openapi\": \"3.0.2\",\n+    \"info\": {\"title\": \"Fast API\", \"version\": \"0.1.0\"},\n+    \"paths\": {\n+        \"/model\": {\n+            \"get\": {\n+                \"summary\": \"Get Model A\",\n+                \"operationId\": \"get_model_a_model_get\",\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\"$ref\": \"#/components/schemas/ModelA\"}\n+                            }\n+                        },\n+                    }\n+                },\n+            }\n+        }\n+    },\n+    \"components\": {\n+        \"schemas\": {\n+            \"ModelA\": {\n+                \"title\": \"ModelA\",\n+                \"required\": [\"name\", \"model_b\"],\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"name\": {\"title\": \"Name\", \"type\": \"string\"},\n+                    \"description\": {\"title\": \"Description\", \"type\": \"string\"},\n+                    \"model_b\": {\"$ref\": \"#/components/schemas/ModelB\"},\n+                },\n+            },\n+            \"ModelB\": {\n+                \"title\": \"ModelB\",\n+                \"required\": [\"username\"],\n+                \"type\": \"object\",\n+                \"properties\": {\"username\": {\"title\": \"Username\", \"type\": \"string\"}},\n+            },\n+        }\n+    },\n+}\n+\n+\n+def test_openapi_schema():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200\n+    assert response.json() == openapi_schema\n+\n+\n+def test_filter_sub_model():\n+    response = client.get(\"/model\")\n+    assert response.status_code == 200\n+    assert response.json() == {\n+        \"name\": \"model-a-name\",\n+        \"description\": \"model-a-desc\",\n+        \"model_b\": {\"username\": \"test-user\"},\n+    }\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#a0858983096cad68c1de7d67085b547354990791", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 207 | Contributors (this commit): 1 | Commits (past 90d): 7 | Contributors (cumulative): 1 | DMM Complexity: None\n\nDIFF:\n@@ -1,6 +1,6 @@\n \"\"\"FastAPI framework, high performance, easy to learn, fast to code, ready for production\"\"\"\n \n-__version__ = \"0.47.0\"\n+__version__ = \"0.47.1\"\n \n from starlette.background import BackgroundTasks\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#70bdade23b25baa17eb6ebdf3b0fdcfcbf7984ad", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 71 | Lines Deleted: 12 | Files Changed: 2 | Hunks: 15 | Methods Changed: 6 | Complexity Δ (Sum/Max): 3/3 | Churn Δ: 83 | Churn Cumulative: 469 | Contributors (this commit): 8 | Commits (past 90d): 8 | Contributors (cumulative): 10 | DMM Complexity: 1.0\n\nDIFF:\n@@ -93,12 +93,9 @@ def create_cloned_field(field: ModelField) -> ModelField:\n     use_type = original_type\n     if lenient_issubclass(original_type, BaseModel):\n         original_type = cast(Type[BaseModel], original_type)\n-        use_type = create_model(\n-            original_type.__name__, __config__=original_type.__config__\n-        )\n+        use_type = create_model(original_type.__name__, __base__=original_type)\n         for f in original_type.__fields__.values():\n             use_type.__fields__[f.name] = create_cloned_field(f)\n-        use_type.__validators__ = original_type.__validators__\n     if PYDANTIC_1:\n         new_field = ModelField(\n             name=field.name,\n\n@@ -1,5 +1,6 @@\n+import pytest\n from fastapi import Depends, FastAPI\n-from pydantic import BaseModel\n+from pydantic import BaseModel, ValidationError, validator\n from starlette.testclient import TestClient\n \n app = FastAPI()\n@@ -18,14 +19,20 @@ class ModelA(BaseModel):\n     description: str = None\n     model_b: ModelB\n \n+    @validator(\"name\")\n+    def lower_username(cls, name: str, values):\n+        if not name.endswith(\"A\"):\n+            raise ValueError(\"name must end in A\")\n+        return name\n+\n \n async def get_model_c() -> ModelC:\n     return ModelC(username=\"test-user\", password=\"test-password\")\n \n \n-@app.get(\"/model\", response_model=ModelA)\n-async def get_model_a(model_c=Depends(get_model_c)):\n-    return {\"name\": \"model-a-name\", \"description\": \"model-a-desc\", \"model_b\": model_c}\n+@app.get(\"/model/{name}\", response_model=ModelA)\n+async def get_model_a(name: str, model_c=Depends(get_model_c)):\n+    return {\"name\": name, \"description\": \"model-a-desc\", \"model_b\": model_c}\n \n \n client = TestClient(app)\n@@ -35,10 +42,18 @@ openapi_schema = {\n     \"openapi\": \"3.0.2\",\n     \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n     \"paths\": {\n-        \"/model\": {\n+        \"/model/{name}\": {\n             \"get\": {\n                 \"summary\": \"Get Model A\",\n-                \"operationId\": \"get_model_a_model_get\",\n+                \"operationId\": \"get_model_a_model__name__get\",\n+                \"parameters\": [\n+                    {\n+                        \"required\": True,\n+                        \"schema\": {\"title\": \"Name\", \"type\": \"string\"},\n+                        \"name\": \"name\",\n+                        \"in\": \"path\",\n+                    }\n+                ],\n                 \"responses\": {\n                     \"200\": {\n                         \"description\": \"Successful Response\",\n@@ -47,13 +62,34 @@ openapi_schema = {\n                                 \"schema\": {\"$ref\": \"#/components/schemas/ModelA\"}\n                             }\n                         },\n+                    },\n+                    \"422\": {\n+                        \"description\": \"Validation Error\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\n+                                    \"$ref\": \"#/components/schemas/HTTPValidationError\"\n                                 }\n+                            }\n+                        },\n+                    },\n                 },\n             }\n         }\n     },\n     \"components\": {\n         \"schemas\": {\n+            \"HTTPValidationError\": {\n+                \"title\": \"HTTPValidationError\",\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"detail\": {\n+                        \"title\": \"Detail\",\n+                        \"type\": \"array\",\n+                        \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n+                    }\n+                },\n+            },\n             \"ModelA\": {\n                 \"title\": \"ModelA\",\n                 \"required\": [\"name\", \"model_b\"],\n@@ -70,6 +106,20 @@ openapi_schema = {\n                 \"type\": \"object\",\n                 \"properties\": {\"username\": {\"title\": \"Username\", \"type\": \"string\"}},\n             },\n+            \"ValidationError\": {\n+                \"title\": \"ValidationError\",\n+                \"required\": [\"loc\", \"msg\", \"type\"],\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"loc\": {\n+                        \"title\": \"Location\",\n+                        \"type\": \"array\",\n+                        \"items\": {\"type\": \"string\"},\n+                    },\n+                    \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n+                    \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n+                },\n+            },\n         }\n     },\n }\n@@ -82,10 +132,22 @@ def test_openapi_schema():\n \n \n def test_filter_sub_model():\n-    response = client.get(\"/model\")\n+    response = client.get(\"/model/modelA\")\n     assert response.status_code == 200\n     assert response.json() == {\n-        \"name\": \"model-a-name\",\n+        \"name\": \"modelA\",\n         \"description\": \"model-a-desc\",\n         \"model_b\": {\"username\": \"test-user\"},\n     }\n+\n+\n+def test_validator_is_cloned():\n+    with pytest.raises(ValidationError) as err:\n+        client.get(\"/model/modelX\")\n+    assert err.value.errors() == [\n+        {\n+            \"loc\": (\"response\", \"name\"),\n+            \"msg\": \"name must end in A\",\n+            \"type\": \"value_error\",\n+        }\n+    ]\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
