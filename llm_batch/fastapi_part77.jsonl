{"custom_id": "fastapi#2ada1615a338a415a0ad7a9b879a1e7c09b9cce6", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 497 | Contributors (this commit): 2 | Commits (past 90d): 10 | Contributors (cumulative): 2 | DMM Complexity: None\n\nDIFF:\n@@ -1,6 +1,6 @@\n \"\"\"FastAPI framework, high performance, easy to learn, fast to code, ready for production\"\"\"\n \n-__version__ = \"0.114.1\"\n+__version__ = \"0.114.2\"\n \n from starlette import status as status\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#40e33e492dbf4af6172997f4e3238a32e56cbe26", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 499 | Contributors (this commit): 2 | Commits (past 90d): 11 | Contributors (cumulative): 2 | DMM Complexity: None\n\nDIFF:\n@@ -1,6 +1,6 @@\n \"\"\"FastAPI framework, high performance, easy to learn, fast to code, ready for production\"\"\"\n \n-__version__ = \"0.114.2\"\n+__version__ = \"0.115.0\"\n \n from starlette import status as status\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#6cc24416e22845ef8d188e94993a6285afaf255d", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 2 | Methods Changed: 2 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 598 | Contributors (this commit): 10 | Commits (past 90d): 1 | Contributors (cumulative): 10 | DMM Complexity: None\n\nDIFF:\n@@ -277,7 +277,7 @@ class HTTPBearer(HTTPBase):\n             bool,\n             Doc(\n                 \"\"\"\n-                By default, if the HTTP Bearer token not provided (in an\n+                By default, if the HTTP Bearer token is not provided (in an\n                 `Authorization` header), `HTTPBearer` will automatically cancel the\n                 request and send the client an error.\n \n@@ -380,7 +380,7 @@ class HTTPDigest(HTTPBase):\n             bool,\n             Doc(\n                 \"\"\"\n-                By default, if the HTTP Digest not provided, `HTTPDigest` will\n+                By default, if the HTTP Digest is not provided, `HTTPDigest` will\n                 automatically cancel the request and send the client an error.\n \n                 If `auto_error` is set to `False`, when the HTTP Digest is not\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#797cad7162592b6e581228bec09682da8feb6752", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 1050 | Contributors (this commit): 4 | Commits (past 90d): 5 | Contributors (cumulative): 4 | DMM Complexity: None\n\nDIFF:\n@@ -23,7 +23,7 @@ app = typer.Typer()\n mkdocs_name = \"mkdocs.yml\"\n \n missing_translation_snippet = \"\"\"\n-{!../../../docs/missing-translation.md!}\n+{!../../docs/missing-translation.md!}\n \"\"\"\n \n non_translated_sections = [\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#40490abaa3526eee394eb84362bfa4ca6b4da9d2", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 3 | Lines Deleted: 3 | Files Changed: 1 | Hunks: 3 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 6 | Churn Cumulative: 3110 | Contributors (this commit): 33 | Commits (past 90d): 15 | Contributors (cumulative): 33 | DMM Complexity: None\n\nDIFF:\n@@ -91,14 +91,14 @@ multipart_incorrect_install_error = (\n def ensure_multipart_is_installed() -> None:\n     try:\n         # __version__ is available in both multiparts, and can be mocked\n-        from multipart import __version__  # type: ignore\n+        from multipart import __version__\n \n         assert __version__\n         try:\n             # parse_options_header is only available in the right multipart\n-            from multipart.multipart import parse_options_header  # type: ignore\n+            from multipart.multipart import parse_options_header\n \n-            assert parse_options_header\n+            assert parse_options_header  # type: ignore[truthy-function]\n         except ImportError:\n             logger.error(multipart_incorrect_install_error)\n             raise RuntimeError(multipart_incorrect_install_error) from None\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#c6dfdb85239d32eb0f9825b1374f780b33eb8a7e", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 37 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): 3/3 | Churn Δ: 37 | Churn Cumulative: 1087 | Contributors (this commit): 4 | Commits (past 90d): 6 | Contributors (cumulative): 4 | DMM Complexity: 1.0\n\nDIFF:\n@@ -15,6 +15,7 @@ import mkdocs.utils\n import typer\n import yaml\n from jinja2 import Template\n+from ruff.__main__ import find_ruff_bin\n \n logging.basicConfig(level=logging.INFO)\n \n@@ -382,5 +383,41 @@ def langs_json():\n     print(json.dumps(langs))\n \n \n+@app.command()\n+def generate_docs_src_versions_for_file(file_path: Path) -> None:\n+    target_versions = [\"py39\", \"py310\"]\n+    base_content = file_path.read_text(encoding=\"utf-8\")\n+    previous_content = {base_content}\n+    for target_version in target_versions:\n+        version_result = subprocess.run(\n+            [\n+                find_ruff_bin(),\n+                \"check\",\n+                \"--target-version\",\n+                target_version,\n+                \"--fix\",\n+                \"--unsafe-fixes\",\n+                \"-\",\n+            ],\n+            input=base_content.encode(\"utf-8\"),\n+            capture_output=True,\n+        )\n+        content_target = version_result.stdout.decode(\"utf-8\")\n+        format_result = subprocess.run(\n+            [find_ruff_bin(), \"format\", \"-\"],\n+            input=content_target.encode(\"utf-8\"),\n+            capture_output=True,\n+        )\n+        content_format = format_result.stdout.decode(\"utf-8\")\n+        if content_format in previous_content:\n+            continue\n+        previous_content.add(content_format)\n+        version_file = file_path.with_name(\n+            file_path.name.replace(\".py\", f\"_{target_version}.py\")\n+        )\n+        logging.info(f\"Writing to {version_file}\")\n+        version_file.write_text(content_format, encoding=\"utf-8\")\n+\n+\n if __name__ == \"__main__\":\n     app()\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#7daaac2bc350e2907554a01eb7eb1286247e5832", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1979 | Lines Deleted: 3738 | Files Changed: 56 | Hunks: 49 | Methods Changed: 224 | Complexity Δ (Sum/Max): -38/11 | Churn Δ: 5717 | Churn Cumulative: 10769 | Contributors (this commit): 12 | Commits (past 90d): 56 | Contributors (cumulative): 87 | DMM Complexity: 0.0\n\nDIFF:\n@@ -1,65 +0,0 @@\n-from typing import List\n-\n-import databases\n-import sqlalchemy\n-from fastapi import FastAPI\n-from pydantic import BaseModel\n-\n-# SQLAlchemy specific code, as with any other app\n-DATABASE_URL = \"sqlite:///./test.db\"\n-# DATABASE_URL = \"postgresql://user:password@postgresserver/db\"\n-\n-database = databases.Database(DATABASE_URL)\n-\n-metadata = sqlalchemy.MetaData()\n-\n-notes = sqlalchemy.Table(\n-    \"notes\",\n-    metadata,\n-    sqlalchemy.Column(\"id\", sqlalchemy.Integer, primary_key=True),\n-    sqlalchemy.Column(\"text\", sqlalchemy.String),\n-    sqlalchemy.Column(\"completed\", sqlalchemy.Boolean),\n-)\n-\n-\n-engine = sqlalchemy.create_engine(\n-    DATABASE_URL, connect_args={\"check_same_thread\": False}\n-)\n-metadata.create_all(engine)\n-\n-\n-class NoteIn(BaseModel):\n-    text: str\n-    completed: bool\n-\n-\n-class Note(BaseModel):\n-    id: int\n-    text: str\n-    completed: bool\n-\n-\n-app = FastAPI()\n-\n-\n-@app.on_event(\"startup\")\n-async def startup():\n-    await database.connect()\n-\n-\n-@app.on_event(\"shutdown\")\n-async def shutdown():\n-    await database.disconnect()\n-\n-\n-@app.get(\"/notes/\", response_model=List[Note])\n-async def read_notes():\n-    query = notes.select()\n-    return await database.fetch_all(query)\n-\n-\n-@app.post(\"/notes/\", response_model=Note)\n-async def create_note(note: NoteIn):\n-    query = notes.insert().values(text=note.text, completed=note.completed)\n-    last_record_id = await database.execute(query)\n-    return {**note.dict(), \"id\": last_record_id}\n\n@@ -1,53 +0,0 @@\n-from typing import Union\n-\n-from couchbase import LOCKMODE_WAIT\n-from couchbase.bucket import Bucket\n-from couchbase.cluster import Cluster, PasswordAuthenticator\n-from fastapi import FastAPI\n-from pydantic import BaseModel\n-\n-USERPROFILE_DOC_TYPE = \"userprofile\"\n-\n-\n-def get_bucket():\n-    cluster = Cluster(\n-        \"couchbase://couchbasehost:8091?fetch_mutation_tokens=1&operation_timeout=30&n1ql_timeout=300\"\n-    )\n-    authenticator = PasswordAuthenticator(\"username\", \"password\")\n-    cluster.authenticate(authenticator)\n-    bucket: Bucket = cluster.open_bucket(\"bucket_name\", lockmode=LOCKMODE_WAIT)\n-    bucket.timeout = 30\n-    bucket.n1ql_timeout = 300\n-    return bucket\n-\n-\n-class User(BaseModel):\n-    username: str\n-    email: Union[str, None] = None\n-    full_name: Union[str, None] = None\n-    disabled: Union[bool, None] = None\n-\n-\n-class UserInDB(User):\n-    type: str = USERPROFILE_DOC_TYPE\n-    hashed_password: str\n-\n-\n-def get_user(bucket: Bucket, username: str):\n-    doc_id = f\"userprofile::{username}\"\n-    result = bucket.get(doc_id, quiet=True)\n-    if not result.value:\n-        return None\n-    user = UserInDB(**result.value)\n-    return user\n-\n-\n-# FastAPI specific code\n-app = FastAPI()\n-\n-\n-@app.get(\"/users/{username}\", response_model=User)\n-def read_user(username: str):\n-    bucket = get_bucket()\n-    user = get_user(bucket=bucket, username=username)\n-    return user\n\n\n@@ -1,62 +0,0 @@\n-from typing import List\n-\n-from fastapi import Depends, FastAPI, HTTPException, Request, Response\n-from sqlalchemy.orm import Session\n-\n-from . import crud, models, schemas\n-from .database import SessionLocal, engine\n-\n-models.Base.metadata.create_all(bind=engine)\n-\n-app = FastAPI()\n-\n-\n-@app.middleware(\"http\")\n-async def db_session_middleware(request: Request, call_next):\n-    response = Response(\"Internal server error\", status_code=500)\n-    try:\n-        request.state.db = SessionLocal()\n-        response = await call_next(request)\n-    finally:\n-        request.state.db.close()\n-    return response\n-\n-\n-# Dependency\n-def get_db(request: Request):\n-    return request.state.db\n-\n-\n-@app.post(\"/users/\", response_model=schemas.User)\n-def create_user(user: schemas.UserCreate, db: Session = Depends(get_db)):\n-    db_user = crud.get_user_by_email(db, email=user.email)\n-    if db_user:\n-        raise HTTPException(status_code=400, detail=\"Email already registered\")\n-    return crud.create_user(db=db, user=user)\n-\n-\n-@app.get(\"/users/\", response_model=List[schemas.User])\n-def read_users(skip: int = 0, limit: int = 100, db: Session = Depends(get_db)):\n-    users = crud.get_users(db, skip=skip, limit=limit)\n-    return users\n-\n-\n-@app.get(\"/users/{user_id}\", response_model=schemas.User)\n-def read_user(user_id: int, db: Session = Depends(get_db)):\n-    db_user = crud.get_user(db, user_id=user_id)\n-    if db_user is None:\n-        raise HTTPException(status_code=404, detail=\"User not found\")\n-    return db_user\n-\n-\n-@app.post(\"/users/{user_id}/items/\", response_model=schemas.Item)\n-def create_item_for_user(\n-    user_id: int, item: schemas.ItemCreate, db: Session = Depends(get_db)\n-):\n-    return crud.create_user_item(db=db, item=item, user_id=user_id)\n-\n-\n-@app.get(\"/items/\", response_model=List[schemas.Item])\n-def read_items(skip: int = 0, limit: int = 100, db: Session = Depends(get_db)):\n-    items = crud.get_items(db, skip=skip, limit=limit)\n-    return items\n\n@@ -1,36 +0,0 @@\n-from sqlalchemy.orm import Session\n-\n-from . import models, schemas\n-\n-\n-def get_user(db: Session, user_id: int):\n-    return db.query(models.User).filter(models.User.id == user_id).first()\n-\n-\n-def get_user_by_email(db: Session, email: str):\n-    return db.query(models.User).filter(models.User.email == email).first()\n-\n-\n-def get_users(db: Session, skip: int = 0, limit: int = 100):\n-    return db.query(models.User).offset(skip).limit(limit).all()\n-\n-\n-def create_user(db: Session, user: schemas.UserCreate):\n-    fake_hashed_password = user.password + \"notreallyhashed\"\n-    db_user = models.User(email=user.email, hashed_password=fake_hashed_password)\n-    db.add(db_user)\n-    db.commit()\n-    db.refresh(db_user)\n-    return db_user\n-\n-\n-def get_items(db: Session, skip: int = 0, limit: int = 100):\n-    return db.query(models.Item).offset(skip).limit(limit).all()\n-\n-\n-def create_user_item(db: Session, item: schemas.ItemCreate, user_id: int):\n-    db_item = models.Item(**item.dict(), owner_id=user_id)\n-    db.add(db_item)\n-    db.commit()\n-    db.refresh(db_item)\n-    return db_item\n\n@@ -1,13 +0,0 @@\n-from sqlalchemy import create_engine\n-from sqlalchemy.ext.declarative import declarative_base\n-from sqlalchemy.orm import sessionmaker\n-\n-SQLALCHEMY_DATABASE_URL = \"sqlite:///./sql_app.db\"\n-# SQLALCHEMY_DATABASE_URL = \"postgresql://user:password@postgresserver/db\"\n-\n-engine = create_engine(\n-    SQLALCHEMY_DATABASE_URL, connect_args={\"check_same_thread\": False}\n-)\n-SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\n-\n-Base = declarative_base()\n\n@@ -1,55 +0,0 @@\n-from typing import List\n-\n-from fastapi import Depends, FastAPI, HTTPException\n-from sqlalchemy.orm import Session\n-\n-from . import crud, models, schemas\n-from .database import SessionLocal, engine\n-\n-models.Base.metadata.create_all(bind=engine)\n-\n-app = FastAPI()\n-\n-\n-# Dependency\n-def get_db():\n-    db = SessionLocal()\n-    try:\n-        yield db\n-    finally:\n-        db.close()\n-\n-\n-@app.post(\"/users/\", response_model=schemas.User)\n-def create_user(user: schemas.UserCreate, db: Session = Depends(get_db)):\n-    db_user = crud.get_user_by_email(db, email=user.email)\n-    if db_user:\n-        raise HTTPException(status_code=400, detail=\"Email already registered\")\n-    return crud.create_user(db=db, user=user)\n-\n-\n-@app.get(\"/users/\", response_model=List[schemas.User])\n-def read_users(skip: int = 0, limit: int = 100, db: Session = Depends(get_db)):\n-    users = crud.get_users(db, skip=skip, limit=limit)\n-    return users\n-\n-\n-@app.get(\"/users/{user_id}\", response_model=schemas.User)\n-def read_user(user_id: int, db: Session = Depends(get_db)):\n-    db_user = crud.get_user(db, user_id=user_id)\n-    if db_user is None:\n-        raise HTTPException(status_code=404, detail=\"User not found\")\n-    return db_user\n-\n-\n-@app.post(\"/users/{user_id}/items/\", response_model=schemas.Item)\n-def create_item_for_user(\n-    user_id: int, item: schemas.ItemCreate, db: Session = Depends(get_db)\n-):\n-    return crud.create_user_item(db=db, item=item, user_id=user_id)\n-\n-\n-@app.get(\"/items/\", response_model=List[schemas.Item])\n-def read_items(skip: int = 0, limit: int = 100, db: Session = Depends(get_db)):\n-    items = crud.get_items(db, skip=skip, limit=limit)\n-    return items\n\n@@ -1,26 +0,0 @@\n-from sqlalchemy import Boolean, Column, ForeignKey, Integer, String\n-from sqlalchemy.orm import relationship\n-\n-from .database import Base\n-\n-\n-class User(Base):\n-    __tablename__ = \"users\"\n-\n-    id = Column(Integer, primary_key=True)\n-    email = Column(String, unique=True, index=True)\n-    hashed_password = Column(String)\n-    is_active = Column(Boolean, default=True)\n-\n-    items = relationship(\"Item\", back_populates=\"owner\")\n-\n-\n-class Item(Base):\n-    __tablename__ = \"items\"\n-\n-    id = Column(Integer, primary_key=True)\n-    title = Column(String, index=True)\n-    description = Column(String, index=True)\n-    owner_id = Column(Integer, ForeignKey(\"users.id\"))\n-\n-    owner = relationship(\"User\", back_populates=\"items\")\n\n@@ -1,37 +0,0 @@\n-from typing import List, Union\n-\n-from pydantic import BaseModel\n-\n-\n-class ItemBase(BaseModel):\n-    title: str\n-    description: Union[str, None] = None\n-\n-\n-class ItemCreate(ItemBase):\n-    pass\n-\n-\n-class Item(ItemBase):\n-    id: int\n-    owner_id: int\n-\n-    class Config:\n-        orm_mode = True\n-\n-\n-class UserBase(BaseModel):\n-    email: str\n-\n-\n-class UserCreate(UserBase):\n-    password: str\n-\n-\n-class User(UserBase):\n-    id: int\n-    is_active: bool\n-    items: List[Item] = []\n-\n-    class Config:\n-        orm_mode = True\n\n\n@@ -1,50 +0,0 @@\n-from fastapi.testclient import TestClient\n-from sqlalchemy import create_engine\n-from sqlalchemy.orm import sessionmaker\n-from sqlalchemy.pool import StaticPool\n-\n-from ..database import Base\n-from ..main import app, get_db\n-\n-SQLALCHEMY_DATABASE_URL = \"sqlite://\"\n-\n-engine = create_engine(\n-    SQLALCHEMY_DATABASE_URL,\n-    connect_args={\"check_same_thread\": False},\n-    poolclass=StaticPool,\n-)\n-TestingSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\n-\n-\n-Base.metadata.create_all(bind=engine)\n-\n-\n-def override_get_db():\n-    try:\n-        db = TestingSessionLocal()\n-        yield db\n-    finally:\n-        db.close()\n-\n-\n-app.dependency_overrides[get_db] = override_get_db\n-\n-client = TestClient(app)\n-\n-\n-def test_create_user():\n-    response = client.post(\n-        \"/users/\",\n-        json={\"email\": \"deadpool@example.com\", \"password\": \"chimichangas4life\"},\n-    )\n-    assert response.status_code == 200, response.text\n-    data = response.json()\n-    assert data[\"email\"] == \"deadpool@example.com\"\n-    assert \"id\" in data\n-    user_id = data[\"id\"]\n-\n-    response = client.get(f\"/users/{user_id}\")\n-    assert response.status_code == 200, response.text\n-    data = response.json()\n-    assert data[\"email\"] == \"deadpool@example.com\"\n-    assert data[\"id\"] == user_id\n\n\n@@ -1,60 +0,0 @@\n-from fastapi import Depends, FastAPI, HTTPException, Request, Response\n-from sqlalchemy.orm import Session\n-\n-from . import crud, models, schemas\n-from .database import SessionLocal, engine\n-\n-models.Base.metadata.create_all(bind=engine)\n-\n-app = FastAPI()\n-\n-\n-@app.middleware(\"http\")\n-async def db_session_middleware(request: Request, call_next):\n-    response = Response(\"Internal server error\", status_code=500)\n-    try:\n-        request.state.db = SessionLocal()\n-        response = await call_next(request)\n-    finally:\n-        request.state.db.close()\n-    return response\n-\n-\n-# Dependency\n-def get_db(request: Request):\n-    return request.state.db\n-\n-\n-@app.post(\"/users/\", response_model=schemas.User)\n-def create_user(user: schemas.UserCreate, db: Session = Depends(get_db)):\n-    db_user = crud.get_user_by_email(db, email=user.email)\n-    if db_user:\n-        raise HTTPException(status_code=400, detail=\"Email already registered\")\n-    return crud.create_user(db=db, user=user)\n-\n-\n-@app.get(\"/users/\", response_model=list[schemas.User])\n-def read_users(skip: int = 0, limit: int = 100, db: Session = Depends(get_db)):\n-    users = crud.get_users(db, skip=skip, limit=limit)\n-    return users\n-\n-\n-@app.get(\"/users/{user_id}\", response_model=schemas.User)\n-def read_user(user_id: int, db: Session = Depends(get_db)):\n-    db_user = crud.get_user(db, user_id=user_id)\n-    if db_user is None:\n-        raise HTTPException(status_code=404, detail=\"User not found\")\n-    return db_user\n-\n-\n-@app.post(\"/users/{user_id}/items/\", response_model=schemas.Item)\n-def create_item_for_user(\n-    user_id: int, item: schemas.ItemCreate, db: Session = Depends(get_db)\n-):\n-    return crud.create_user_item(db=db, item=item, user_id=user_id)\n-\n-\n-@app.get(\"/items/\", response_model=list[schemas.Item])\n-def read_items(skip: int = 0, limit: int = 100, db: Session = Depends(get_db)):\n-    items = crud.get_items(db, skip=skip, limit=limit)\n-    return items\n\n@@ -1,36 +0,0 @@\n-from sqlalchemy.orm import Session\n-\n-from . import models, schemas\n-\n-\n-def get_user(db: Session, user_id: int):\n-    return db.query(models.User).filter(models.User.id == user_id).first()\n-\n-\n-def get_user_by_email(db: Session, email: str):\n-    return db.query(models.User).filter(models.User.email == email).first()\n-\n-\n-def get_users(db: Session, skip: int = 0, limit: int = 100):\n-    return db.query(models.User).offset(skip).limit(limit).all()\n-\n-\n-def create_user(db: Session, user: schemas.UserCreate):\n-    fake_hashed_password = user.password + \"notreallyhashed\"\n-    db_user = models.User(email=user.email, hashed_password=fake_hashed_password)\n-    db.add(db_user)\n-    db.commit()\n-    db.refresh(db_user)\n-    return db_user\n-\n-\n-def get_items(db: Session, skip: int = 0, limit: int = 100):\n-    return db.query(models.Item).offset(skip).limit(limit).all()\n-\n-\n-def create_user_item(db: Session, item: schemas.ItemCreate, user_id: int):\n-    db_item = models.Item(**item.dict(), owner_id=user_id)\n-    db.add(db_item)\n-    db.commit()\n-    db.refresh(db_item)\n-    return db_item\n\n@@ -1,13 +0,0 @@\n-from sqlalchemy import create_engine\n-from sqlalchemy.ext.declarative import declarative_base\n-from sqlalchemy.orm import sessionmaker\n-\n-SQLALCHEMY_DATABASE_URL = \"sqlite:///./sql_app.db\"\n-# SQLALCHEMY_DATABASE_URL = \"postgresql://user:password@postgresserver/db\"\n-\n-engine = create_engine(\n-    SQLALCHEMY_DATABASE_URL, connect_args={\"check_same_thread\": False}\n-)\n-SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\n-\n-Base = declarative_base()\n\n@@ -1,53 +0,0 @@\n-from fastapi import Depends, FastAPI, HTTPException\n-from sqlalchemy.orm import Session\n-\n-from . import crud, models, schemas\n-from .database import SessionLocal, engine\n-\n-models.Base.metadata.create_all(bind=engine)\n-\n-app = FastAPI()\n-\n-\n-# Dependency\n-def get_db():\n-    db = SessionLocal()\n-    try:\n-        yield db\n-    finally:\n-        db.close()\n-\n-\n-@app.post(\"/users/\", response_model=schemas.User)\n-def create_user(user: schemas.UserCreate, db: Session = Depends(get_db)):\n-    db_user = crud.get_user_by_email(db, email=user.email)\n-    if db_user:\n-        raise HTTPException(status_code=400, detail=\"Email already registered\")\n-    return crud.create_user(db=db, user=user)\n-\n-\n-@app.get(\"/users/\", response_model=list[schemas.User])\n-def read_users(skip: int = 0, limit: int = 100, db: Session = Depends(get_db)):\n-    users = crud.get_users(db, skip=skip, limit=limit)\n-    return users\n-\n-\n-@app.get(\"/users/{user_id}\", response_model=schemas.User)\n-def read_user(user_id: int, db: Session = Depends(get_db)):\n-    db_user = crud.get_user(db, user_id=user_id)\n-    if db_user is None:\n-        raise HTTPException(status_code=404, detail=\"User not found\")\n-    return db_user\n-\n-\n-@app.post(\"/users/{user_id}/items/\", response_model=schemas.Item)\n-def create_item_for_user(\n-    user_id: int, item: schemas.ItemCreate, db: Session = Depends(get_db)\n-):\n-    return crud.create_user_item(db=db, item=item, user_id=user_id)\n-\n-\n-@app.get(\"/items/\", response_model=list[schemas.Item])\n-def read_items(skip: int = 0, limit: int = 100, db: Session = Depends(get_db)):\n-    items = crud.get_items(db, skip=skip, limit=limit)\n-    return items\n\n@@ -1,26 +0,0 @@\n-from sqlalchemy import Boolean, Column, ForeignKey, Integer, String\n-from sqlalchemy.orm import relationship\n-\n-from .database import Base\n-\n-\n-class User(Base):\n-    __tablename__ = \"users\"\n-\n-    id = Column(Integer, primary_key=True)\n-    email = Column(String, unique=True, index=True)\n-    hashed_password = Column(String)\n-    is_active = Column(Boolean, default=True)\n-\n-    items = relationship(\"Item\", back_populates=\"owner\")\n-\n-\n-class Item(Base):\n-    __tablename__ = \"items\"\n-\n-    id = Column(Integer, primary_key=True)\n-    title = Column(String, index=True)\n-    description = Column(String, index=True)\n-    owner_id = Column(Integer, ForeignKey(\"users.id\"))\n-\n-    owner = relationship(\"User\", back_populates=\"items\")\n\n@@ -1,35 +0,0 @@\n-from pydantic import BaseModel\n-\n-\n-class ItemBase(BaseModel):\n-    title: str\n-    description: str | None = None\n-\n-\n-class ItemCreate(ItemBase):\n-    pass\n-\n-\n-class Item(ItemBase):\n-    id: int\n-    owner_id: int\n-\n-    class Config:\n-        orm_mode = True\n-\n-\n-class UserBase(BaseModel):\n-    email: str\n-\n-\n-class UserCreate(UserBase):\n-    password: str\n-\n-\n-class User(UserBase):\n-    id: int\n-    is_active: bool\n-    items: list[Item] = []\n-\n-    class Config:\n-        orm_mode = True\n\n\n@@ -1,47 +0,0 @@\n-from fastapi.testclient import TestClient\n-from sqlalchemy import create_engine\n-from sqlalchemy.orm import sessionmaker\n-\n-from ..database import Base\n-from ..main import app, get_db\n-\n-SQLALCHEMY_DATABASE_URL = \"sqlite:///./test.db\"\n-\n-engine = create_engine(\n-    SQLALCHEMY_DATABASE_URL, connect_args={\"check_same_thread\": False}\n-)\n-TestingSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\n-\n-\n-Base.metadata.create_all(bind=engine)\n-\n-\n-def override_get_db():\n-    try:\n-        db = TestingSessionLocal()\n-        yield db\n-    finally:\n-        db.close()\n-\n-\n-app.dependency_overrides[get_db] = override_get_db\n-\n-client = TestClient(app)\n-\n-\n-def test_create_user():\n-    response = client.post(\n-        \"/users/\",\n-        json={\"email\": \"deadpool@example.com\", \"password\": \"chimichangas4life\"},\n-    )\n-    assert response.status_code == 200, response.text\n-    data = response.json()\n-    assert data[\"email\"] == \"deadpool@example.com\"\n-    assert \"id\" in data\n-    user_id = data[\"id\"]\n-\n-    response = client.get(f\"/users/{user_id}\")\n-    assert response.status_code == 200, response.text\n-    data = response.json()\n-    assert data[\"email\"] == \"deadpool@example.com\"\n-    assert data[\"id\"] == user_id\n\n\n@@ -1,60 +0,0 @@\n-from fastapi import Depends, FastAPI, HTTPException, Request, Response\n-from sqlalchemy.orm import Session\n-\n-from . import crud, models, schemas\n-from .database import SessionLocal, engine\n-\n-models.Base.metadata.create_all(bind=engine)\n-\n-app = FastAPI()\n-\n-\n-@app.middleware(\"http\")\n-async def db_session_middleware(request: Request, call_next):\n-    response = Response(\"Internal server error\", status_code=500)\n-    try:\n-        request.state.db = SessionLocal()\n-        response = await call_next(request)\n-    finally:\n-        request.state.db.close()\n-    return response\n-\n-\n-# Dependency\n-def get_db(request: Request):\n-    return request.state.db\n-\n-\n-@app.post(\"/users/\", response_model=schemas.User)\n-def create_user(user: schemas.UserCreate, db: Session = Depends(get_db)):\n-    db_user = crud.get_user_by_email(db, email=user.email)\n-    if db_user:\n-        raise HTTPException(status_code=400, detail=\"Email already registered\")\n-    return crud.create_user(db=db, user=user)\n-\n-\n-@app.get(\"/users/\", response_model=list[schemas.User])\n-def read_users(skip: int = 0, limit: int = 100, db: Session = Depends(get_db)):\n-    users = crud.get_users(db, skip=skip, limit=limit)\n-    return users\n-\n-\n-@app.get(\"/users/{user_id}\", response_model=schemas.User)\n-def read_user(user_id: int, db: Session = Depends(get_db)):\n-    db_user = crud.get_user(db, user_id=user_id)\n-    if db_user is None:\n-        raise HTTPException(status_code=404, detail=\"User not found\")\n-    return db_user\n-\n-\n-@app.post(\"/users/{user_id}/items/\", response_model=schemas.Item)\n-def create_item_for_user(\n-    user_id: int, item: schemas.ItemCreate, db: Session = Depends(get_db)\n-):\n-    return crud.create_user_item(db=db, item=item, user_id=user_id)\n-\n-\n-@app.get(\"/items/\", response_model=list[schemas.Item])\n-def read_items(skip: int = 0, limit: int = 100, db: Session = Depends(get_db)):\n-    items = crud.get_items(db, skip=skip, limit=limit)\n-    return items\n\n@@ -1,36 +0,0 @@\n-from sqlalchemy.orm import Session\n-\n-from . import models, schemas\n-\n-\n-def get_user(db: Session, user_id: int):\n-    return db.query(models.User).filter(models.User.id == user_id).first()\n-\n-\n-def get_user_by_email(db: Session, email: str):\n-    return db.query(models.User).filter(models.User.email == email).first()\n-\n-\n-def get_users(db: Session, skip: int = 0, limit: int = 100):\n-    return db.query(models.User).offset(skip).limit(limit).all()\n-\n-\n-def create_user(db: Session, user: schemas.UserCreate):\n-    fake_hashed_password = user.password + \"notreallyhashed\"\n-    db_user = models.User(email=user.email, hashed_password=fake_hashed_password)\n-    db.add(db_user)\n-    db.commit()\n-    db.refresh(db_user)\n-    return db_user\n-\n-\n-def get_items(db: Session, skip: int = 0, limit: int = 100):\n-    return db.query(models.Item).offset(skip).limit(limit).all()\n-\n-\n-def create_user_item(db: Session, item: schemas.ItemCreate, user_id: int):\n-    db_item = models.Item(**item.dict(), owner_id=user_id)\n-    db.add(db_item)\n-    db.commit()\n-    db.refresh(db_item)\n-    return db_item\n\n@@ -1,13 +0,0 @@\n-from sqlalchemy import create_engine\n-from sqlalchemy.ext.declarative import declarative_base\n-from sqlalchemy.orm import sessionmaker\n-\n-SQLALCHEMY_DATABASE_URL = \"sqlite:///./sql_app.db\"\n-# SQLALCHEMY_DATABASE_URL = \"postgresql://user:password@postgresserver/db\"\n-\n-engine = create_engine(\n-    SQLALCHEMY_DATABASE_URL, connect_args={\"check_same_thread\": False}\n-)\n-SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\n-\n-Base = declarative_base()\n\n@@ -1,53 +0,0 @@\n-from fastapi import Depends, FastAPI, HTTPException\n-from sqlalchemy.orm import Session\n-\n-from . import crud, models, schemas\n-from .database import SessionLocal, engine\n-\n-models.Base.metadata.create_all(bind=engine)\n-\n-app = FastAPI()\n-\n-\n-# Dependency\n-def get_db():\n-    db = SessionLocal()\n-    try:\n-        yield db\n-    finally:\n-        db.close()\n-\n-\n-@app.post(\"/users/\", response_model=schemas.User)\n-def create_user(user: schemas.UserCreate, db: Session = Depends(get_db)):\n-    db_user = crud.get_user_by_email(db, email=user.email)\n-    if db_user:\n-        raise HTTPException(status_code=400, detail=\"Email already registered\")\n-    return crud.create_user(db=db, user=user)\n-\n-\n-@app.get(\"/users/\", response_model=list[schemas.User])\n-def read_users(skip: int = 0, limit: int = 100, db: Session = Depends(get_db)):\n-    users = crud.get_users(db, skip=skip, limit=limit)\n-    return users\n-\n-\n-@app.get(\"/users/{user_id}\", response_model=schemas.User)\n-def read_user(user_id: int, db: Session = Depends(get_db)):\n-    db_user = crud.get_user(db, user_id=user_id)\n-    if db_user is None:\n-        raise HTTPException(status_code=404, detail=\"User not found\")\n-    return db_user\n-\n-\n-@app.post(\"/users/{user_id}/items/\", response_model=schemas.Item)\n-def create_item_for_user(\n-    user_id: int, item: schemas.ItemCreate, db: Session = Depends(get_db)\n-):\n-    return crud.create_user_item(db=db, item=item, user_id=user_id)\n-\n-\n-@app.get(\"/items/\", response_model=list[schemas.Item])\n-def read_items(skip: int = 0, limit: int = 100, db: Session = Depends(get_db)):\n-    items = crud.get_items(db, skip=skip, limit=limit)\n-    return items\n\n@@ -1,26 +0,0 @@\n-from sqlalchemy import Boolean, Column, ForeignKey, Integer, String\n-from sqlalchemy.orm import relationship\n-\n-from .database import Base\n-\n-\n-class User(Base):\n-    __tablename__ = \"users\"\n-\n-    id = Column(Integer, primary_key=True)\n-    email = Column(String, unique=True, index=True)\n-    hashed_password = Column(String)\n-    is_active = Column(Boolean, default=True)\n-\n-    items = relationship(\"Item\", back_populates=\"owner\")\n-\n-\n-class Item(Base):\n-    __tablename__ = \"items\"\n-\n-    id = Column(Integer, primary_key=True)\n-    title = Column(String, index=True)\n-    description = Column(String, index=True)\n-    owner_id = Column(Integer, ForeignKey(\"users.id\"))\n-\n-    owner = relationship(\"User\", back_populates=\"items\")\n\n@@ -1,37 +0,0 @@\n-from typing import Union\n-\n-from pydantic import BaseModel\n-\n-\n-class ItemBase(BaseModel):\n-    title: str\n-    description: Union[str, None] = None\n-\n-\n-class ItemCreate(ItemBase):\n-    pass\n-\n-\n-class Item(ItemBase):\n-    id: int\n-    owner_id: int\n-\n-    class Config:\n-        orm_mode = True\n-\n-\n-class UserBase(BaseModel):\n-    email: str\n-\n-\n-class UserCreate(UserBase):\n-    password: str\n-\n-\n-class User(UserBase):\n-    id: int\n-    is_active: bool\n-    items: list[Item] = []\n-\n-    class Config:\n-        orm_mode = True\n\n\n@@ -1,47 +0,0 @@\n-from fastapi.testclient import TestClient\n-from sqlalchemy import create_engine\n-from sqlalchemy.orm import sessionmaker\n-\n-from ..database import Base\n-from ..main import app, get_db\n-\n-SQLALCHEMY_DATABASE_URL = \"sqlite:///./test.db\"\n-\n-engine = create_engine(\n-    SQLALCHEMY_DATABASE_URL, connect_args={\"check_same_thread\": False}\n-)\n-TestingSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\n-\n-\n-Base.metadata.create_all(bind=engine)\n-\n-\n-def override_get_db():\n-    try:\n-        db = TestingSessionLocal()\n-        yield db\n-    finally:\n-        db.close()\n-\n-\n-app.dependency_overrides[get_db] = override_get_db\n-\n-client = TestClient(app)\n-\n-\n-def test_create_user():\n-    response = client.post(\n-        \"/users/\",\n-        json={\"email\": \"deadpool@example.com\", \"password\": \"chimichangas4life\"},\n-    )\n-    assert response.status_code == 200, response.text\n-    data = response.json()\n-    assert data[\"email\"] == \"deadpool@example.com\"\n-    assert \"id\" in data\n-    user_id = data[\"id\"]\n-\n-    response = client.get(f\"/users/{user_id}\")\n-    assert response.status_code == 200, response.text\n-    data = response.json()\n-    assert data[\"email\"] == \"deadpool@example.com\"\n-    assert data[\"id\"] == user_id\n\n@@ -0,0 +1,71 @@\n+from typing import List, Union\n+\n+from fastapi import Depends, FastAPI, HTTPException, Query\n+from sqlmodel import Field, Session, SQLModel, create_engine, select\n+\n+\n+class Hero(SQLModel, table=True):\n+    id: Union[int, None] = Field(default=None, primary_key=True)\n+    name: str = Field(index=True)\n+    age: Union[int, None] = Field(default=None, index=True)\n+    secret_name: str\n+\n+\n+sqlite_file_name = \"database.db\"\n+sqlite_url = f\"sqlite:///{sqlite_file_name}\"\n+\n+connect_args = {\"check_same_thread\": False}\n+engine = create_engine(sqlite_url, connect_args=connect_args)\n+\n+\n+def create_db_and_tables():\n+    SQLModel.metadata.create_all(engine)\n+\n+\n+def get_session():\n+    with Session(engine) as session:\n+        yield session\n+\n+\n+app = FastAPI()\n+\n+\n+@app.on_event(\"startup\")\n+def on_startup():\n+    create_db_and_tables()\n+\n+\n+@app.post(\"/heroes/\")\n+def create_hero(hero: Hero, session: Session = Depends(get_session)) -> Hero:\n+    session.add(hero)\n+    session.commit()\n+    session.refresh(hero)\n+    return hero\n+\n+\n+@app.get(\"/heroes/\")\n+def read_heroes(\n+    session: Session = Depends(get_session),\n+    offset: int = 0,\n+    limit: int = Query(default=100, le=100),\n+) -> List[Hero]:\n+    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n+    return heroes\n+\n+\n+@app.get(\"/heroes/{hero_id}\")\n+def read_hero(hero_id: int, session: Session = Depends(get_session)) -> Hero:\n+    hero = session.get(Hero, hero_id)\n+    if not hero:\n+        raise HTTPException(status_code=404, detail=\"Hero not found\")\n+    return hero\n+\n+\n+@app.delete(\"/heroes/{hero_id}\")\n+def delete_hero(hero_id: int, session: Session = Depends(get_session)):\n+    hero = session.get(Hero, hero_id)\n+    if not hero:\n+        raise HTTPException(status_code=404, detail=\"Hero not found\")\n+    session.delete(hero)\n+    session.commit()\n+    return {\"ok\": True}\n\n@@ -0,0 +1,74 @@\n+from typing import List, Union\n+\n+from fastapi import Depends, FastAPI, HTTPException, Query\n+from sqlmodel import Field, Session, SQLModel, create_engine, select\n+from typing_extensions import Annotated\n+\n+\n+class Hero(SQLModel, table=True):\n+    id: Union[int, None] = Field(default=None, primary_key=True)\n+    name: str = Field(index=True)\n+    age: Union[int, None] = Field(default=None, index=True)\n+    secret_name: str\n+\n+\n+sqlite_file_name = \"database.db\"\n+sqlite_url = f\"sqlite:///{sqlite_file_name}\"\n+\n+connect_args = {\"check_same_thread\": False}\n+engine = create_engine(sqlite_url, connect_args=connect_args)\n+\n+\n+def create_db_and_tables():\n+    SQLModel.metadata.create_all(engine)\n+\n+\n+def get_session():\n+    with Session(engine) as session:\n+        yield session\n+\n+\n+SessionDep = Annotated[Session, Depends(get_session)]\n+\n+app = FastAPI()\n+\n+\n+@app.on_event(\"startup\")\n+def on_startup():\n+    create_db_and_tables()\n+\n+\n+@app.post(\"/heroes/\")\n+def create_hero(hero: Hero, session: SessionDep) -> Hero:\n+    session.add(hero)\n+    session.commit()\n+    session.refresh(hero)\n+    return hero\n+\n+\n+@app.get(\"/heroes/\")\n+def read_heroes(\n+    session: SessionDep,\n+    offset: int = 0,\n+    limit: Annotated[int, Query(le=100)] = 100,\n+) -> List[Hero]:\n+    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n+    return heroes\n+\n+\n+@app.get(\"/heroes/{hero_id}\")\n+def read_hero(hero_id: int, session: SessionDep) -> Hero:\n+    hero = session.get(Hero, hero_id)\n+    if not hero:\n+        raise HTTPException(status_code=404, detail=\"Hero not found\")\n+    return hero\n+\n+\n+@app.delete(\"/heroes/{hero_id}\")\n+def delete_hero(hero_id: int, session: SessionDep):\n+    hero = session.get(Hero, hero_id)\n+    if not hero:\n+        raise HTTPException(status_code=404, detail=\"Hero not found\")\n+    session.delete(hero)\n+    session.commit()\n+    return {\"ok\": True}\n\n@@ -0,0 +1,73 @@\n+from typing import Annotated\n+\n+from fastapi import Depends, FastAPI, HTTPException, Query\n+from sqlmodel import Field, Session, SQLModel, create_engine, select\n+\n+\n+class Hero(SQLModel, table=True):\n+    id: int | None = Field(default=None, primary_key=True)\n+    name: str = Field(index=True)\n+    age: int | None = Field(default=None, index=True)\n+    secret_name: str\n+\n+\n+sqlite_file_name = \"database.db\"\n+sqlite_url = f\"sqlite:///{sqlite_file_name}\"\n+\n+connect_args = {\"check_same_thread\": False}\n+engine = create_engine(sqlite_url, connect_args=connect_args)\n+\n+\n+def create_db_and_tables():\n+    SQLModel.metadata.create_all(engine)\n+\n+\n+def get_session():\n+    with Session(engine) as session:\n+        yield session\n+\n+\n+SessionDep = Annotated[Session, Depends(get_session)]\n+\n+app = FastAPI()\n+\n+\n+@app.on_event(\"startup\")\n+def on_startup():\n+    create_db_and_tables()\n+\n+\n+@app.post(\"/heroes/\")\n+def create_hero(hero: Hero, session: SessionDep) -> Hero:\n+    session.add(hero)\n+    session.commit()\n+    session.refresh(hero)\n+    return hero\n+\n+\n+@app.get(\"/heroes/\")\n+def read_heroes(\n+    session: SessionDep,\n+    offset: int = 0,\n+    limit: Annotated[int, Query(le=100)] = 100,\n+) -> list[Hero]:\n+    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n+    return heroes\n+\n+\n+@app.get(\"/heroes/{hero_id}\")\n+def read_hero(hero_id: int, session: SessionDep) -> Hero:\n+    hero = session.get(Hero, hero_id)\n+    if not hero:\n+        raise HTTPException(status_code=404, detail=\"Hero not found\")\n+    return hero\n+\n+\n+@app.delete(\"/heroes/{hero_id}\")\n+def delete_hero(hero_id: int, session: SessionDep):\n+    hero = session.get(Hero, hero_id)\n+    if not hero:\n+        raise HTTPException(status_code=404, detail=\"Hero not found\")\n+    session.delete(hero)\n+    session.commit()\n+    return {\"ok\": True}\n\n@@ -0,0 +1,73 @@\n+from typing import Annotated, Union\n+\n+from fastapi import Depends, FastAPI, HTTPException, Query\n+from sqlmodel import Field, Session, SQLModel, create_engine, select\n+\n+\n+class Hero(SQLModel, table=True):\n+    id: Union[int, None] = Field(default=None, primary_key=True)\n+    name: str = Field(index=True)\n+    age: Union[int, None] = Field(default=None, index=True)\n+    secret_name: str\n+\n+\n+sqlite_file_name = \"database.db\"\n+sqlite_url = f\"sqlite:///{sqlite_file_name}\"\n+\n+connect_args = {\"check_same_thread\": False}\n+engine = create_engine(sqlite_url, connect_args=connect_args)\n+\n+\n+def create_db_and_tables():\n+    SQLModel.metadata.create_all(engine)\n+\n+\n+def get_session():\n+    with Session(engine) as session:\n+        yield session\n+\n+\n+SessionDep = Annotated[Session, Depends(get_session)]\n+\n+app = FastAPI()\n+\n+\n+@app.on_event(\"startup\")\n+def on_startup():\n+    create_db_and_tables()\n+\n+\n+@app.post(\"/heroes/\")\n+def create_hero(hero: Hero, session: SessionDep) -> Hero:\n+    session.add(hero)\n+    session.commit()\n+    session.refresh(hero)\n+    return hero\n+\n+\n+@app.get(\"/heroes/\")\n+def read_heroes(\n+    session: SessionDep,\n+    offset: int = 0,\n+    limit: Annotated[int, Query(le=100)] = 100,\n+) -> list[Hero]:\n+    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n+    return heroes\n+\n+\n+@app.get(\"/heroes/{hero_id}\")\n+def read_hero(hero_id: int, session: SessionDep) -> Hero:\n+    hero = session.get(Hero, hero_id)\n+    if not hero:\n+        raise HTTPException(status_code=404, detail=\"Hero not found\")\n+    return hero\n+\n+\n+@app.delete(\"/heroes/{hero_id}\")\n+def delete_hero(hero_id: int, session: SessionDep):\n+    hero = session.get(Hero, hero_id)\n+    if not hero:\n+        raise HTTPException(status_code=404, detail=\"Hero not found\")\n+    session.delete(hero)\n+    session.commit()\n+    return {\"ok\": True}\n\n@@ -0,0 +1,69 @@\n+from fastapi import Depends, FastAPI, HTTPException, Query\n+from sqlmodel import Field, Session, SQLModel, create_engine, select\n+\n+\n+class Hero(SQLModel, table=True):\n+    id: int | None = Field(default=None, primary_key=True)\n+    name: str = Field(index=True)\n+    age: int | None = Field(default=None, index=True)\n+    secret_name: str\n+\n+\n+sqlite_file_name = \"database.db\"\n+sqlite_url = f\"sqlite:///{sqlite_file_name}\"\n+\n+connect_args = {\"check_same_thread\": False}\n+engine = create_engine(sqlite_url, connect_args=connect_args)\n+\n+\n+def create_db_and_tables():\n+    SQLModel.metadata.create_all(engine)\n+\n+\n+def get_session():\n+    with Session(engine) as session:\n+        yield session\n+\n+\n+app = FastAPI()\n+\n+\n+@app.on_event(\"startup\")\n+def on_startup():\n+    create_db_and_tables()\n+\n+\n+@app.post(\"/heroes/\")\n+def create_hero(hero: Hero, session: Session = Depends(get_session)) -> Hero:\n+    session.add(hero)\n+    session.commit()\n+    session.refresh(hero)\n+    return hero\n+\n+\n+@app.get(\"/heroes/\")\n+def read_heroes(\n+    session: Session = Depends(get_session),\n+    offset: int = 0,\n+    limit: int = Query(default=100, le=100),\n+) -> list[Hero]:\n+    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n+    return heroes\n+\n+\n+@app.get(\"/heroes/{hero_id}\")\n+def read_hero(hero_id: int, session: Session = Depends(get_session)) -> Hero:\n+    hero = session.get(Hero, hero_id)\n+    if not hero:\n+        raise HTTPException(status_code=404, detail=\"Hero not found\")\n+    return hero\n+\n+\n+@app.delete(\"/heroes/{hero_id}\")\n+def delete_hero(hero_id: int, session: Session = Depends(get_session)):\n+    hero = session.get(Hero, hero_id)\n+    if not hero:\n+        raise HTTPException(status_code=404, detail=\"Hero not found\")\n+    session.delete(hero)\n+    session.commit()\n+    return {\"ok\": True}\n\n@@ -0,0 +1,71 @@\n+from typing import Union\n+\n+from fastapi import Depends, FastAPI, HTTPException, Query\n+from sqlmodel import Field, Session, SQLModel, create_engine, select\n+\n+\n+class Hero(SQLModel, table=True):\n+    id: Union[int, None] = Field(default=None, primary_key=True)\n+    name: str = Field(index=True)\n+    age: Union[int, None] = Field(default=None, index=True)\n+    secret_name: str\n+\n+\n+sqlite_file_name = \"database.db\"\n+sqlite_url = f\"sqlite:///{sqlite_file_name}\"\n+\n+connect_args = {\"check_same_thread\": False}\n+engine = create_engine(sqlite_url, connect_args=connect_args)\n+\n+\n+def create_db_and_tables():\n+    SQLModel.metadata.create_all(engine)\n+\n+\n+def get_session():\n+    with Session(engine) as session:\n+        yield session\n+\n+\n+app = FastAPI()\n+\n+\n+@app.on_event(\"startup\")\n+def on_startup():\n+    create_db_and_tables()\n+\n+\n+@app.post(\"/heroes/\")\n+def create_hero(hero: Hero, session: Session = Depends(get_session)) -> Hero:\n+    session.add(hero)\n+    session.commit()\n+    session.refresh(hero)\n+    return hero\n+\n+\n+@app.get(\"/heroes/\")\n+def read_heroes(\n+    session: Session = Depends(get_session),\n+    offset: int = 0,\n+    limit: int = Query(default=100, le=100),\n+) -> list[Hero]:\n+    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n+    return heroes\n+\n+\n+@app.get(\"/heroes/{hero_id}\")\n+def read_hero(hero_id: int, session: Session = Depends(get_session)) -> Hero:\n+    hero = session.get(Hero, hero_id)\n+    if not hero:\n+        raise HTTPException(status_code=404, detail=\"Hero not found\")\n+    return hero\n+\n+\n+@app.delete(\"/heroes/{hero_id}\")\n+def delete_hero(hero_id: int, session: Session = Depends(get_session)):\n+    hero = session.get(Hero, hero_id)\n+    if not hero:\n+        raise HTTPException(status_code=404, detail=\"Hero not found\")\n+    session.delete(hero)\n+    session.commit()\n+    return {\"ok\": True}\n\n@@ -0,0 +1,104 @@\n+from typing import List, Union\n+\n+from fastapi import Depends, FastAPI, HTTPException, Query\n+from sqlmodel import Field, Session, SQLModel, create_engine, select\n+\n+\n+class HeroBase(SQLModel):\n+    name: str = Field(index=True)\n+    age: Union[int, None] = Field(default=None, index=True)\n+\n+\n+class Hero(HeroBase, table=True):\n+    id: Union[int, None] = Field(default=None, primary_key=True)\n+    secret_name: str\n+\n+\n+class HeroPublic(HeroBase):\n+    id: int\n+\n+\n+class HeroCreate(HeroBase):\n+    secret_name: str\n+\n+\n+class HeroUpdate(HeroBase):\n+    name: Union[str, None] = None\n+    age: Union[int, None] = None\n+    secret_name: Union[str, None] = None\n+\n+\n+sqlite_file_name = \"database.db\"\n+sqlite_url = f\"sqlite:///{sqlite_file_name}\"\n+\n+connect_args = {\"check_same_thread\": False}\n+engine = create_engine(sqlite_url, connect_args=connect_args)\n+\n+\n+def create_db_and_tables():\n+    SQLModel.metadata.create_all(engine)\n+\n+\n+def get_session():\n+    with Session(engine) as session:\n+        yield session\n+\n+\n+app = FastAPI()\n+\n+\n+@app.on_event(\"startup\")\n+def on_startup():\n+    create_db_and_tables()\n+\n+\n+@app.post(\"/heroes/\", response_model=HeroPublic)\n+def create_hero(hero: HeroCreate, session: Session = Depends(get_session)):\n+    db_hero = Hero.model_validate(hero)\n+    session.add(db_hero)\n+    session.commit()\n+    session.refresh(db_hero)\n+    return db_hero\n+\n+\n+@app.get(\"/heroes/\", response_model=List[HeroPublic])\n+def read_heroes(\n+    session: Session = Depends(get_session),\n+    offset: int = 0,\n+    limit: int = Query(default=100, le=100),\n+):\n+    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n+    return heroes\n+\n+\n+@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\n+def read_hero(hero_id: int, session: Session = Depends(get_session)):\n+    hero = session.get(Hero, hero_id)\n+    if not hero:\n+        raise HTTPException(status_code=404, detail=\"Hero not found\")\n+    return hero\n+\n+\n+@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\n+def update_hero(\n+    hero_id: int, hero: HeroUpdate, session: Session = Depends(get_session)\n+):\n+    hero_db = session.get(Hero, hero_id)\n+    if not hero_db:\n+        raise HTTPException(status_code=404, detail=\"Hero not found\")\n+    hero_data = hero.model_dump(exclude_unset=True)\n+    hero_db.sqlmodel_update(hero_data)\n+    session.add(hero_db)\n+    session.commit()\n+    session.refresh(hero_db)\n+    return hero_db\n+\n+\n+@app.delete(\"/heroes/{hero_id}\")\n+def delete_hero(hero_id: int, session: Session = Depends(get_session)):\n+    hero = session.get(Hero, hero_id)\n+    if not hero:\n+        raise HTTPException(status_code=404, detail=\"Hero not found\")\n+    session.delete(hero)\n+    session.commit()\n+    return {\"ok\": True}\n\n@@ -0,0 +1,104 @@\n+from typing import List, Union\n+\n+from fastapi import Depends, FastAPI, HTTPException, Query\n+from sqlmodel import Field, Session, SQLModel, create_engine, select\n+from typing_extensions import Annotated\n+\n+\n+class HeroBase(SQLModel):\n+    name: str = Field(index=True)\n+    age: Union[int, None] = Field(default=None, index=True)\n+\n+\n+class Hero(HeroBase, table=True):\n+    id: Union[int, None] = Field(default=None, primary_key=True)\n+    secret_name: str\n+\n+\n+class HeroPublic(HeroBase):\n+    id: int\n+\n+\n+class HeroCreate(HeroBase):\n+    secret_name: str\n+\n+\n+class HeroUpdate(HeroBase):\n+    name: Union[str, None] = None\n+    age: Union[int, None] = None\n+    secret_name: Union[str, None] = None\n+\n+\n+sqlite_file_name = \"database.db\"\n+sqlite_url = f\"sqlite:///{sqlite_file_name}\"\n+\n+connect_args = {\"check_same_thread\": False}\n+engine = create_engine(sqlite_url, connect_args=connect_args)\n+\n+\n+def create_db_and_tables():\n+    SQLModel.metadata.create_all(engine)\n+\n+\n+def get_session():\n+    with Session(engine) as session:\n+        yield session\n+\n+\n+SessionDep = Annotated[Session, Depends(get_session)]\n+app = FastAPI()\n+\n+\n+@app.on_event(\"startup\")\n+def on_startup():\n+    create_db_and_tables()\n+\n+\n+@app.post(\"/heroes/\", response_model=HeroPublic)\n+def create_hero(hero: HeroCreate, session: SessionDep):\n+    db_hero = Hero.model_validate(hero)\n+    session.add(db_hero)\n+    session.commit()\n+    session.refresh(db_hero)\n+    return db_hero\n+\n+\n+@app.get(\"/heroes/\", response_model=List[HeroPublic])\n+def read_heroes(\n+    session: SessionDep,\n+    offset: int = 0,\n+    limit: Annotated[int, Query(le=100)] = 100,\n+):\n+    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n+    return heroes\n+\n+\n+@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\n+def read_hero(hero_id: int, session: SessionDep):\n+    hero = session.get(Hero, hero_id)\n+    if not hero:\n+        raise HTTPException(status_code=404, detail=\"Hero not found\")\n+    return hero\n+\n+\n+@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\n+def update_hero(hero_id: int, hero: HeroUpdate, session: SessionDep):\n+    hero_db = session.get(Hero, hero_id)\n+    if not hero_db:\n+        raise HTTPException(status_code=404, detail=\"Hero not found\")\n+    hero_data = hero.model_dump(exclude_unset=True)\n+    hero_db.sqlmodel_update(hero_data)\n+    session.add(hero_db)\n+    session.commit()\n+    session.refresh(hero_db)\n+    return hero_db\n+\n+\n+@app.delete(\"/heroes/{hero_id}\")\n+def delete_hero(hero_id: int, session: SessionDep):\n+    hero = session.get(Hero, hero_id)\n+    if not hero:\n+        raise HTTPException(status_code=404, detail=\"Hero not found\")\n+    session.delete(hero)\n+    session.commit()\n+    return {\"ok\": True}\n\n@@ -0,0 +1,103 @@\n+from typing import Annotated\n+\n+from fastapi import Depends, FastAPI, HTTPException, Query\n+from sqlmodel import Field, Session, SQLModel, create_engine, select\n+\n+\n+class HeroBase(SQLModel):\n+    name: str = Field(index=True)\n+    age: int | None = Field(default=None, index=True)\n+\n+\n+class Hero(HeroBase, table=True):\n+    id: int | None = Field(default=None, primary_key=True)\n+    secret_name: str\n+\n+\n+class HeroPublic(HeroBase):\n+    id: int\n+\n+\n+class HeroCreate(HeroBase):\n+    secret_name: str\n+\n+\n+class HeroUpdate(HeroBase):\n+    name: str | None = None\n+    age: int | None = None\n+    secret_name: str | None = None\n+\n+\n+sqlite_file_name = \"database.db\"\n+sqlite_url = f\"sqlite:///{sqlite_file_name}\"\n+\n+connect_args = {\"check_same_thread\": False}\n+engine = create_engine(sqlite_url, connect_args=connect_args)\n+\n+\n+def create_db_and_tables():\n+    SQLModel.metadata.create_all(engine)\n+\n+\n+def get_session():\n+    with Session(engine) as session:\n+        yield session\n+\n+\n+SessionDep = Annotated[Session, Depends(get_session)]\n+app = FastAPI()\n+\n+\n+@app.on_event(\"startup\")\n+def on_startup():\n+    create_db_and_tables()\n+\n+\n+@app.post(\"/heroes/\", response_model=HeroPublic)\n+def create_hero(hero: HeroCreate, session: SessionDep):\n+    db_hero = Hero.model_validate(hero)\n+    session.add(db_hero)\n+    session.commit()\n+    session.refresh(db_hero)\n+    return db_hero\n+\n+\n+@app.get(\"/heroes/\", response_model=list[HeroPublic])\n+def read_heroes(\n+    session: SessionDep,\n+    offset: int = 0,\n+    limit: Annotated[int, Query(le=100)] = 100,\n+):\n+    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n+    return heroes\n+\n+\n+@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\n+def read_hero(hero_id: int, session: SessionDep):\n+    hero = session.get(Hero, hero_id)\n+    if not hero:\n+        raise HTTPException(status_code=404, detail=\"Hero not found\")\n+    return hero\n+\n+\n+@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\n+def update_hero(hero_id: int, hero: HeroUpdate, session: SessionDep):\n+    hero_db = session.get(Hero, hero_id)\n+    if not hero_db:\n+        raise HTTPException(status_code=404, detail=\"Hero not found\")\n+    hero_data = hero.model_dump(exclude_unset=True)\n+    hero_db.sqlmodel_update(hero_data)\n+    session.add(hero_db)\n+    session.commit()\n+    session.refresh(hero_db)\n+    return hero_db\n+\n+\n+@app.delete(\"/heroes/{hero_id}\")\n+def delete_hero(hero_id: int, session: SessionDep):\n+    hero = session.get(Hero, hero_id)\n+    if not hero:\n+        raise HTTPException(status_code=404, detail=\"Hero not found\")\n+    session.delete(hero)\n+    session.commit()\n+    return {\"ok\": True}\n\n@@ -0,0 +1,103 @@\n+from typing import Annotated, Union\n+\n+from fastapi import Depends, FastAPI, HTTPException, Query\n+from sqlmodel import Field, Session, SQLModel, create_engine, select\n+\n+\n+class HeroBase(SQLModel):\n+    name: str = Field(index=True)\n+    age: Union[int, None] = Field(default=None, index=True)\n+\n+\n+class Hero(HeroBase, table=True):\n+    id: Union[int, None] = Field(default=None, primary_key=True)\n+    secret_name: str\n+\n+\n+class HeroPublic(HeroBase):\n+    id: int\n+\n+\n+class HeroCreate(HeroBase):\n+    secret_name: str\n+\n+\n+class HeroUpdate(HeroBase):\n+    name: Union[str, None] = None\n+    age: Union[int, None] = None\n+    secret_name: Union[str, None] = None\n+\n+\n+sqlite_file_name = \"database.db\"\n+sqlite_url = f\"sqlite:///{sqlite_file_name}\"\n+\n+connect_args = {\"check_same_thread\": False}\n+engine = create_engine(sqlite_url, connect_args=connect_args)\n+\n+\n+def create_db_and_tables():\n+    SQLModel.metadata.create_all(engine)\n+\n+\n+def get_session():\n+    with Session(engine) as session:\n+        yield session\n+\n+\n+SessionDep = Annotated[Session, Depends(get_session)]\n+app = FastAPI()\n+\n+\n+@app.on_event(\"startup\")\n+def on_startup():\n+    create_db_and_tables()\n+\n+\n+@app.post(\"/heroes/\", response_model=HeroPublic)\n+def create_hero(hero: HeroCreate, session: SessionDep):\n+    db_hero = Hero.model_validate(hero)\n+    session.add(db_hero)\n+    session.commit()\n+    session.refresh(db_hero)\n+    return db_hero\n+\n+\n+@app.get(\"/heroes/\", response_model=list[HeroPublic])\n+def read_heroes(\n+    session: SessionDep,\n+    offset: int = 0,\n+    limit: Annotated[int, Query(le=100)] = 100,\n+):\n+    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n+    return heroes\n+\n+\n+@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\n+def read_hero(hero_id: int, session: SessionDep):\n+    hero = session.get(Hero, hero_id)\n+    if not hero:\n+        raise HTTPException(status_code=404, detail=\"Hero not found\")\n+    return hero\n+\n+\n+@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\n+def update_hero(hero_id: int, hero: HeroUpdate, session: SessionDep):\n+    hero_db = session.get(Hero, hero_id)\n+    if not hero_db:\n+        raise HTTPException(status_code=404, detail=\"Hero not found\")\n+    hero_data = hero.model_dump(exclude_unset=True)\n+    hero_db.sqlmodel_update(hero_data)\n+    session.add(hero_db)\n+    session.commit()\n+    session.refresh(hero_db)\n+    return hero_db\n+\n+\n+@app.delete(\"/heroes/{hero_id}\")\n+def delete_hero(hero_id: int, session: SessionDep):\n+    hero = session.get(Hero, hero_id)\n+    if not hero:\n+        raise HTTPException(status_code=404, detail=\"Hero not found\")\n+    session.delete(hero)\n+    session.commit()\n+    return {\"ok\": True}\n\n@@ -0,0 +1,102 @@\n+from fastapi import Depends, FastAPI, HTTPException, Query\n+from sqlmodel import Field, Session, SQLModel, create_engine, select\n+\n+\n+class HeroBase(SQLModel):\n+    name: str = Field(index=True)\n+    age: int | None = Field(default=None, index=True)\n+\n+\n+class Hero(HeroBase, table=True):\n+    id: int | None = Field(default=None, primary_key=True)\n+    secret_name: str\n+\n+\n+class HeroPublic(HeroBase):\n+    id: int\n+\n+\n+class HeroCreate(HeroBase):\n+    secret_name: str\n+\n+\n+class HeroUpdate(HeroBase):\n+    name: str | None = None\n+    age: int | None = None\n+    secret_name: str | None = None\n+\n+\n+sqlite_file_name = \"database.db\"\n+sqlite_url = f\"sqlite:///{sqlite_file_name}\"\n+\n+connect_args = {\"check_same_thread\": False}\n+engine = create_engine(sqlite_url, connect_args=connect_args)\n+\n+\n+def create_db_and_tables():\n+    SQLModel.metadata.create_all(engine)\n+\n+\n+def get_session():\n+    with Session(engine) as session:\n+        yield session\n+\n+\n+app = FastAPI()\n+\n+\n+@app.on_event(\"startup\")\n+def on_startup():\n+    create_db_and_tables()\n+\n+\n+@app.post(\"/heroes/\", response_model=HeroPublic)\n+def create_hero(hero: HeroCreate, session: Session = Depends(get_session)):\n+    db_hero = Hero.model_validate(hero)\n+    session.add(db_hero)\n+    session.commit()\n+    session.refresh(db_hero)\n+    return db_hero\n+\n+\n+@app.get(\"/heroes/\", response_model=list[HeroPublic])\n+def read_heroes(\n+    session: Session = Depends(get_session),\n+    offset: int = 0,\n+    limit: int = Query(default=100, le=100),\n+):\n+    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n+    return heroes\n+\n+\n+@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\n+def read_hero(hero_id: int, session: Session = Depends(get_session)):\n+    hero = session.get(Hero, hero_id)\n+    if not hero:\n+        raise HTTPException(status_code=404, detail=\"Hero not found\")\n+    return hero\n+\n+\n+@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\n+def update_hero(\n+    hero_id: int, hero: HeroUpdate, session: Session = Depends(get_session)\n+):\n+    hero_db = session.get(Hero, hero_id)\n+    if not hero_db:\n+        raise HTTPException(status_code=404, detail=\"Hero not found\")\n+    hero_data = hero.model_dump(exclude_unset=True)\n+    hero_db.sqlmodel_update(hero_data)\n+    session.add(hero_db)\n+    session.commit()\n+    session.refresh(hero_db)\n+    return hero_db\n+\n+\n+@app.delete(\"/heroes/{hero_id}\")\n+def delete_hero(hero_id: int, session: Session = Depends(get_session)):\n+    hero = session.get(Hero, hero_id)\n+    if not hero:\n+        raise HTTPException(status_code=404, detail=\"Hero not found\")\n+    session.delete(hero)\n+    session.commit()\n+    return {\"ok\": True}\n\n@@ -0,0 +1,104 @@\n+from typing import Union\n+\n+from fastapi import Depends, FastAPI, HTTPException, Query\n+from sqlmodel import Field, Session, SQLModel, create_engine, select\n+\n+\n+class HeroBase(SQLModel):\n+    name: str = Field(index=True)\n+    age: Union[int, None] = Field(default=None, index=True)\n+\n+\n+class Hero(HeroBase, table=True):\n+    id: Union[int, None] = Field(default=None, primary_key=True)\n+    secret_name: str\n+\n+\n+class HeroPublic(HeroBase):\n+    id: int\n+\n+\n+class HeroCreate(HeroBase):\n+    secret_name: str\n+\n+\n+class HeroUpdate(HeroBase):\n+    name: Union[str, None] = None\n+    age: Union[int, None] = None\n+    secret_name: Union[str, None] = None\n+\n+\n+sqlite_file_name = \"database.db\"\n+sqlite_url = f\"sqlite:///{sqlite_file_name}\"\n+\n+connect_args = {\"check_same_thread\": False}\n+engine = create_engine(sqlite_url, connect_args=connect_args)\n+\n+\n+def create_db_and_tables():\n+    SQLModel.metadata.create_all(engine)\n+\n+\n+def get_session():\n+    with Session(engine) as session:\n+        yield session\n+\n+\n+app = FastAPI()\n+\n+\n+@app.on_event(\"startup\")\n+def on_startup():\n+    create_db_and_tables()\n+\n+\n+@app.post(\"/heroes/\", response_model=HeroPublic)\n+def create_hero(hero: HeroCreate, session: Session = Depends(get_session)):\n+    db_hero = Hero.model_validate(hero)\n+    session.add(db_hero)\n+    session.commit()\n+    session.refresh(db_hero)\n+    return db_hero\n+\n+\n+@app.get(\"/heroes/\", response_model=list[HeroPublic])\n+def read_heroes(\n+    session: Session = Depends(get_session),\n+    offset: int = 0,\n+    limit: int = Query(default=100, le=100),\n+):\n+    heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()\n+    return heroes\n+\n+\n+@app.get(\"/heroes/{hero_id}\", response_model=HeroPublic)\n+def read_hero(hero_id: int, session: Session = Depends(get_session)):\n+    hero = session.get(Hero, hero_id)\n+    if not hero:\n+        raise HTTPException(status_code=404, detail=\"Hero not found\")\n+    return hero\n+\n+\n+@app.patch(\"/heroes/{hero_id}\", response_model=HeroPublic)\n+def update_hero(\n+    hero_id: int, hero: HeroUpdate, session: Session = Depends(get_session)\n+):\n+    hero_db = session.get(Hero, hero_id)\n+    if not hero_db:\n+        raise HTTPException(status_code=404, detail=\"Hero not found\")\n+    hero_data = hero.model_dump(exclude_unset=True)\n+    hero_db.sqlmodel_update(hero_data)\n+    session.add(hero_db)\n+    session.commit()\n+    session.refresh(hero_db)\n+    return hero_db\n+\n+\n+@app.delete(\"/heroes/{hero_id}\")\n+def delete_hero(hero_id: int, session: Session = Depends(get_session)):\n+    hero = session.get(Hero, hero_id)\n+    if not hero:\n+        raise HTTPException(status_code=404, detail=\"Hero not found\")\n+    session.delete(hero)\n+    session.commit()\n+    return {\"ok\": True}\n\n@@ -0,0 +1,37 @@\n+import subprocess\n+import time\n+\n+import httpx\n+from playwright.sync_api import Playwright, sync_playwright\n+\n+\n+# Run playwright codegen to generate the code below, copy paste the sections in run()\n+def run(playwright: Playwright) -> None:\n+    browser = playwright.chromium.launch(headless=False)\n+    # Update the viewport manually\n+    context = browser.new_context(viewport={\"width\": 960, \"height\": 1080})\n+    page = context.new_page()\n+    page.goto(\"http://localhost:8000/docs\")\n+    page.get_by_label(\"post /heroes/\").click()\n+    # Manually add the screenshot\n+    page.screenshot(path=\"docs/en/docs/img/tutorial/sql-databases/image01.png\")\n+\n+    # ---------------------\n+    context.close()\n+    browser.close()\n+\n+\n+process = subprocess.Popen(\n+    [\"fastapi\", \"run\", \"docs_src/sql_databases/tutorial001.py\"],\n+)\n+try:\n+    for _ in range(3):\n+        try:\n+            response = httpx.get(\"http://localhost:8000/docs\")\n+        except httpx.ConnectError:\n+            time.sleep(1)\n+            break\n+    with sync_playwright() as playwright:\n+        run(playwright)\n+finally:\n+    process.terminate()\n\n@@ -0,0 +1,37 @@\n+import subprocess\n+import time\n+\n+import httpx\n+from playwright.sync_api import Playwright, sync_playwright\n+\n+\n+# Run playwright codegen to generate the code below, copy paste the sections in run()\n+def run(playwright: Playwright) -> None:\n+    browser = playwright.chromium.launch(headless=False)\n+    # Update the viewport manually\n+    context = browser.new_context(viewport={\"width\": 960, \"height\": 1080})\n+    page = context.new_page()\n+    page.goto(\"http://localhost:8000/docs\")\n+    page.get_by_label(\"post /heroes/\").click()\n+    # Manually add the screenshot\n+    page.screenshot(path=\"docs/en/docs/img/tutorial/sql-databases/image02.png\")\n+\n+    # ---------------------\n+    context.close()\n+    browser.close()\n+\n+\n+process = subprocess.Popen(\n+    [\"fastapi\", \"run\", \"docs_src/sql_databases/tutorial002.py\"],\n+)\n+try:\n+    for _ in range(3):\n+        try:\n+            response = httpx.get(\"http://localhost:8000/docs\")\n+        except httpx.ConnectError:\n+            time.sleep(1)\n+            break\n+    with sync_playwright() as playwright:\n+        run(playwright)\n+finally:\n+    process.terminate()\n\n\n@@ -1,146 +0,0 @@\n-import pytest\n-from fastapi import FastAPI\n-from fastapi.testclient import TestClient\n-\n-from ...utils import needs_pydanticv1\n-\n-\n-@pytest.fixture(name=\"app\", scope=\"module\")\n-def get_app():\n-    with pytest.warns(DeprecationWarning):\n-        from docs_src.async_sql_databases.tutorial001 import app\n-    yield app\n-\n-\n-# TODO: pv2 add version with Pydantic v2\n-@needs_pydanticv1\n-def test_create_read(app: FastAPI):\n-    with TestClient(app) as client:\n-        note = {\"text\": \"Foo bar\", \"completed\": False}\n-        response = client.post(\"/notes/\", json=note)\n-        assert response.status_code == 200, response.text\n-        data = response.json()\n-        assert data[\"text\"] == note[\"text\"]\n-        assert data[\"completed\"] == note[\"completed\"]\n-        assert \"id\" in data\n-        response = client.get(\"/notes/\")\n-        assert response.status_code == 200, response.text\n-        assert data in response.json()\n-\n-\n-def test_openapi_schema(app: FastAPI):\n-    with TestClient(app) as client:\n-        response = client.get(\"/openapi.json\")\n-        assert response.status_code == 200, response.text\n-        assert response.json() == {\n-            \"openapi\": \"3.1.0\",\n-            \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n-            \"paths\": {\n-                \"/notes/\": {\n-                    \"get\": {\n-                        \"responses\": {\n-                            \"200\": {\n-                                \"description\": \"Successful Response\",\n-                                \"content\": {\n-                                    \"application/json\": {\n-                                        \"schema\": {\n-                                            \"title\": \"Response Read Notes Notes  Get\",\n-                                            \"type\": \"array\",\n-                                            \"items\": {\n-                                                \"$ref\": \"#/components/schemas/Note\"\n-                                            },\n-                                        }\n-                                    }\n-                                },\n-                            }\n-                        },\n-                        \"summary\": \"Read Notes\",\n-                        \"operationId\": \"read_notes_notes__get\",\n-                    },\n-                    \"post\": {\n-                        \"responses\": {\n-                            \"200\": {\n-                                \"description\": \"Successful Response\",\n-                                \"content\": {\n-                                    \"application/json\": {\n-                                        \"schema\": {\"$ref\": \"#/components/schemas/Note\"}\n-                                    }\n-                                },\n-                            },\n-                            \"422\": {\n-                                \"description\": \"Validation Error\",\n-                                \"content\": {\n-                                    \"application/json\": {\n-                                        \"schema\": {\n-                                            \"$ref\": \"#/components/schemas/HTTPValidationError\"\n-                                        }\n-                                    }\n-                                },\n-                            },\n-                        },\n-                        \"summary\": \"Create Note\",\n-                        \"operationId\": \"create_note_notes__post\",\n-                        \"requestBody\": {\n-                            \"content\": {\n-                                \"application/json\": {\n-                                    \"schema\": {\"$ref\": \"#/components/schemas/NoteIn\"}\n-                                }\n-                            },\n-                            \"required\": True,\n-                        },\n-                    },\n-                }\n-            },\n-            \"components\": {\n-                \"schemas\": {\n-                    \"NoteIn\": {\n-                        \"title\": \"NoteIn\",\n-                        \"required\": [\"text\", \"completed\"],\n-                        \"type\": \"object\",\n-                        \"properties\": {\n-                            \"text\": {\"title\": \"Text\", \"type\": \"string\"},\n-                            \"completed\": {\"title\": \"Completed\", \"type\": \"boolean\"},\n-                        },\n-                    },\n-                    \"Note\": {\n-                        \"title\": \"Note\",\n-                        \"required\": [\"id\", \"text\", \"completed\"],\n-                        \"type\": \"object\",\n-                        \"properties\": {\n-                            \"id\": {\"title\": \"Id\", \"type\": \"integer\"},\n-                            \"text\": {\"title\": \"Text\", \"type\": \"string\"},\n-                            \"completed\": {\"title\": \"Completed\", \"type\": \"boolean\"},\n-                        },\n-                    },\n-                    \"ValidationError\": {\n-                        \"title\": \"ValidationError\",\n-                        \"required\": [\"loc\", \"msg\", \"type\"],\n-                        \"type\": \"object\",\n-                        \"properties\": {\n-                            \"loc\": {\n-                                \"title\": \"Location\",\n-                                \"type\": \"array\",\n-                                \"items\": {\n-                                    \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n-                                },\n-                            },\n-                            \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n-                            \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n-                        },\n-                    },\n-                    \"HTTPValidationError\": {\n-                        \"title\": \"HTTPValidationError\",\n-                        \"type\": \"object\",\n-                        \"properties\": {\n-                            \"detail\": {\n-                                \"title\": \"Detail\",\n-                                \"type\": \"array\",\n-                                \"items\": {\n-                                    \"$ref\": \"#/components/schemas/ValidationError\"\n-                                },\n-                            }\n-                        },\n-                    },\n-                }\n-            },\n-        }\n\n@@ -1,419 +0,0 @@\n-import importlib\n-import os\n-from pathlib import Path\n-\n-import pytest\n-from dirty_equals import IsDict\n-from fastapi.testclient import TestClient\n-\n-from ...utils import needs_pydanticv1\n-\n-\n-@pytest.fixture(scope=\"module\")\n-def client(tmp_path_factory: pytest.TempPathFactory):\n-    tmp_path = tmp_path_factory.mktemp(\"data\")\n-    cwd = os.getcwd()\n-    os.chdir(tmp_path)\n-    test_db = Path(\"./sql_app.db\")\n-    if test_db.is_file():  # pragma: nocover\n-        test_db.unlink()\n-    # Import while creating the client to create the DB after starting the test session\n-    from docs_src.sql_databases.sql_app import main\n-\n-    # Ensure import side effects are re-executed\n-    importlib.reload(main)\n-    with TestClient(main.app) as c:\n-        yield c\n-    if test_db.is_file():  # pragma: nocover\n-        test_db.unlink()\n-    os.chdir(cwd)\n-\n-\n-# TODO: pv2 add version with Pydantic v2\n-@needs_pydanticv1\n-def test_create_user(client):\n-    test_user = {\"email\": \"johndoe@example.com\", \"password\": \"secret\"}\n-    response = client.post(\"/users/\", json=test_user)\n-    assert response.status_code == 200, response.text\n-    data = response.json()\n-    assert test_user[\"email\"] == data[\"email\"]\n-    assert \"id\" in data\n-    response = client.post(\"/users/\", json=test_user)\n-    assert response.status_code == 400, response.text\n-\n-\n-# TODO: pv2 add version with Pydantic v2\n-@needs_pydanticv1\n-def test_get_user(client):\n-    response = client.get(\"/users/1\")\n-    assert response.status_code == 200, response.text\n-    data = response.json()\n-    assert \"email\" in data\n-    assert \"id\" in data\n-\n-\n-# TODO: pv2 add version with Pydantic v2\n-@needs_pydanticv1\n-def test_nonexistent_user(client):\n-    response = client.get(\"/users/999\")\n-    assert response.status_code == 404, response.text\n-\n-\n-# TODO: pv2 add version with Pydantic v2\n-@needs_pydanticv1\n-def test_get_users(client):\n-    response = client.get(\"/users/\")\n-    assert response.status_code == 200, response.text\n-    data = response.json()\n-    assert \"email\" in data[0]\n-    assert \"id\" in data[0]\n-\n-\n-# TODO: pv2 add Pydantic v2 version\n-@needs_pydanticv1\n-def test_create_item(client):\n-    item = {\"title\": \"Foo\", \"description\": \"Something that fights\"}\n-    response = client.post(\"/users/1/items/\", json=item)\n-    assert response.status_code == 200, response.text\n-    item_data = response.json()\n-    assert item[\"title\"] == item_data[\"title\"]\n-    assert item[\"description\"] == item_data[\"description\"]\n-    assert \"id\" in item_data\n-    assert \"owner_id\" in item_data\n-    response = client.get(\"/users/1\")\n-    assert response.status_code == 200, response.text\n-    user_data = response.json()\n-    item_to_check = [it for it in user_data[\"items\"] if it[\"id\"] == item_data[\"id\"]][0]\n-    assert item_to_check[\"title\"] == item[\"title\"]\n-    assert item_to_check[\"description\"] == item[\"description\"]\n-\n-\n-# TODO: pv2 add Pydantic v2 version\n-@needs_pydanticv1\n-def test_read_items(client):\n-    response = client.get(\"/items/\")\n-    assert response.status_code == 200, response.text\n-    data = response.json()\n-    assert data\n-    first_item = data[0]\n-    assert \"title\" in first_item\n-    assert \"description\" in first_item\n-\n-\n-# TODO: pv2 add version with Pydantic v2\n-@needs_pydanticv1\n-def test_openapi_schema(client: TestClient):\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\n-        \"openapi\": \"3.1.0\",\n-        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n-        \"paths\": {\n-            \"/users/\": {\n-                \"get\": {\n-                    \"responses\": {\n-                        \"200\": {\n-                            \"description\": \"Successful Response\",\n-                            \"content\": {\n-                                \"application/json\": {\n-                                    \"schema\": {\n-                                        \"title\": \"Response Read Users Users  Get\",\n-                                        \"type\": \"array\",\n-                                        \"items\": {\"$ref\": \"#/components/schemas/User\"},\n-                                    }\n-                                }\n-                            },\n-                        },\n-                        \"422\": {\n-                            \"description\": \"Validation Error\",\n-                            \"content\": {\n-                                \"application/json\": {\n-                                    \"schema\": {\n-                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n-                                    }\n-                                }\n-                            },\n-                        },\n-                    },\n-                    \"summary\": \"Read Users\",\n-                    \"operationId\": \"read_users_users__get\",\n-                    \"parameters\": [\n-                        {\n-                            \"required\": False,\n-                            \"schema\": {\n-                                \"title\": \"Skip\",\n-                                \"type\": \"integer\",\n-                                \"default\": 0,\n-                            },\n-                            \"name\": \"skip\",\n-                            \"in\": \"query\",\n-                        },\n-                        {\n-                            \"required\": False,\n-                            \"schema\": {\n-                                \"title\": \"Limit\",\n-                                \"type\": \"integer\",\n-                                \"default\": 100,\n-                            },\n-                            \"name\": \"limit\",\n-                            \"in\": \"query\",\n-                        },\n-                    ],\n-                },\n-                \"post\": {\n-                    \"responses\": {\n-                        \"200\": {\n-                            \"description\": \"Successful Response\",\n-                            \"content\": {\n-                                \"application/json\": {\n-                                    \"schema\": {\"$ref\": \"#/components/schemas/User\"}\n-                                }\n-                            },\n-                        },\n-                        \"422\": {\n-                            \"description\": \"Validation Error\",\n-                            \"content\": {\n-                                \"application/json\": {\n-                                    \"schema\": {\n-                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n-                                    }\n-                                }\n-                            },\n-                        },\n-                    },\n-                    \"summary\": \"Create User\",\n-                    \"operationId\": \"create_user_users__post\",\n-                    \"requestBody\": {\n-                        \"content\": {\n-                            \"application/json\": {\n-                                \"schema\": {\"$ref\": \"#/components/schemas/UserCreate\"}\n-                            }\n-                        },\n-                        \"required\": True,\n-                    },\n-                },\n-            },\n-            \"/users/{user_id}\": {\n-                \"get\": {\n-                    \"responses\": {\n-                        \"200\": {\n-                            \"description\": \"Successful Response\",\n-                            \"content\": {\n-                                \"application/json\": {\n-                                    \"schema\": {\"$ref\": \"#/components/schemas/User\"}\n-                                }\n-                            },\n-                        },\n-                        \"422\": {\n-                            \"description\": \"Validation Error\",\n-                            \"content\": {\n-                                \"application/json\": {\n-                                    \"schema\": {\n-                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n-                                    }\n-                                }\n-                            },\n-                        },\n-                    },\n-                    \"summary\": \"Read User\",\n-                    \"operationId\": \"read_user_users__user_id__get\",\n-                    \"parameters\": [\n-                        {\n-                            \"required\": True,\n-                            \"schema\": {\"title\": \"User Id\", \"type\": \"integer\"},\n-                            \"name\": \"user_id\",\n-                            \"in\": \"path\",\n-                        }\n-                    ],\n-                }\n-            },\n-            \"/users/{user_id}/items/\": {\n-                \"post\": {\n-                    \"responses\": {\n-                        \"200\": {\n-                            \"description\": \"Successful Response\",\n-                            \"content\": {\n-                                \"application/json\": {\n-                                    \"schema\": {\"$ref\": \"#/components/schemas/Item\"}\n-                                }\n-                            },\n-                        },\n-                        \"422\": {\n-                            \"description\": \"Validation Error\",\n-                            \"content\": {\n-                                \"application/json\": {\n-                                    \"schema\": {\n-                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n-                                    }\n-                                }\n-                            },\n-                        },\n-                    },\n-                    \"summary\": \"Create Item For User\",\n-                    \"operationId\": \"create_item_for_user_users__user_id__items__post\",\n-                    \"parameters\": [\n-                        {\n-                            \"required\": True,\n-                            \"schema\": {\"title\": \"User Id\", \"type\": \"integer\"},\n-                            \"name\": \"user_id\",\n-                            \"in\": \"path\",\n-                        }\n-                    ],\n-                    \"requestBody\": {\n-                        \"content\": {\n-                            \"application/json\": {\n-                                \"schema\": {\"$ref\": \"#/components/schemas/ItemCreate\"}\n-                            }\n-                        },\n-                        \"required\": True,\n-                    },\n-                }\n-            },\n-            \"/items/\": {\n-                \"get\": {\n-                    \"responses\": {\n-                        \"200\": {\n-                            \"description\": \"Successful Response\",\n-                            \"content\": {\n-                                \"application/json\": {\n-                                    \"schema\": {\n-                                        \"title\": \"Response Read Items Items  Get\",\n-                                        \"type\": \"array\",\n-                                        \"items\": {\"$ref\": \"#/components/schemas/Item\"},\n-                                    }\n-                                }\n-                            },\n-                        },\n-                        \"422\": {\n-                            \"description\": \"Validation Error\",\n-                            \"content\": {\n-                                \"application/json\": {\n-                                    \"schema\": {\n-                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n-                                    }\n-                                }\n-                            },\n-                        },\n-                    },\n-                    \"summary\": \"Read Items\",\n-                    \"operationId\": \"read_items_items__get\",\n-                    \"parameters\": [\n-                        {\n-                            \"required\": False,\n-                            \"schema\": {\n-                                \"title\": \"Skip\",\n-                                \"type\": \"integer\",\n-                                \"default\": 0,\n-                            },\n-                            \"name\": \"skip\",\n-                            \"in\": \"query\",\n-                        },\n-                        {\n-                            \"required\": False,\n-                            \"schema\": {\n-                                \"title\": \"Limit\",\n-                                \"type\": \"integer\",\n-                                \"default\": 100,\n-                            },\n-                            \"name\": \"limit\",\n-                            \"in\": \"query\",\n-                        },\n-                    ],\n-                }\n-            },\n-        },\n-        \"components\": {\n-            \"schemas\": {\n-                \"ItemCreate\": {\n-                    \"title\": \"ItemCreate\",\n-                    \"required\": [\"title\"],\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"title\": {\"title\": \"Title\", \"type\": \"string\"},\n-                        \"description\": IsDict(\n-                            {\n-                                \"title\": \"Description\",\n-                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n-                            }\n-                        )\n-                        | IsDict(\n-                            # TODO: remove when deprecating Pydantic v1\n-                            {\"title\": \"Description\", \"type\": \"string\"}\n-                        ),\n-                    },\n-                },\n-                \"Item\": {\n-                    \"title\": \"Item\",\n-                    \"required\": [\"title\", \"id\", \"owner_id\"],\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"title\": {\"title\": \"Title\", \"type\": \"string\"},\n-                        \"description\": IsDict(\n-                            {\n-                                \"title\": \"Description\",\n-                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n-                            }\n-                        )\n-                        | IsDict(\n-                            # TODO: remove when deprecating Pydantic v1\n-                            {\"title\": \"Description\", \"type\": \"string\"},\n-                        ),\n-                        \"id\": {\"title\": \"Id\", \"type\": \"integer\"},\n-                        \"owner_id\": {\"title\": \"Owner Id\", \"type\": \"integer\"},\n-                    },\n-                },\n-                \"User\": {\n-                    \"title\": \"User\",\n-                    \"required\": [\"email\", \"id\", \"is_active\"],\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"email\": {\"title\": \"Email\", \"type\": \"string\"},\n-                        \"id\": {\"title\": \"Id\", \"type\": \"integer\"},\n-                        \"is_active\": {\"title\": \"Is Active\", \"type\": \"boolean\"},\n-                        \"items\": {\n-                            \"title\": \"Items\",\n-                            \"type\": \"array\",\n-                            \"items\": {\"$ref\": \"#/components/schemas/Item\"},\n-                            \"default\": [],\n-                        },\n-                    },\n-                },\n-                \"UserCreate\": {\n-                    \"title\": \"UserCreate\",\n-                    \"required\": [\"email\", \"password\"],\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"email\": {\"title\": \"Email\", \"type\": \"string\"},\n-                        \"password\": {\"title\": \"Password\", \"type\": \"string\"},\n-                    },\n-                },\n-                \"ValidationError\": {\n-                    \"title\": \"ValidationError\",\n-                    \"required\": [\"loc\", \"msg\", \"type\"],\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"loc\": {\n-                            \"title\": \"Location\",\n-                            \"type\": \"array\",\n-                            \"items\": {\n-                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n-                            },\n-                        },\n-                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n-                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n-                    },\n-                },\n-                \"HTTPValidationError\": {\n-                    \"title\": \"HTTPValidationError\",\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"detail\": {\n-                            \"title\": \"Detail\",\n-                            \"type\": \"array\",\n-                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n-                        }\n-                    },\n-                },\n-            }\n-        },\n-    }\n\n@@ -1,421 +0,0 @@\n-import importlib\n-from pathlib import Path\n-\n-import pytest\n-from dirty_equals import IsDict\n-from fastapi.testclient import TestClient\n-\n-from ...utils import needs_pydanticv1\n-\n-\n-@pytest.fixture(scope=\"module\")\n-def client():\n-    test_db = Path(\"./sql_app.db\")\n-    if test_db.is_file():  # pragma: nocover\n-        test_db.unlink()\n-    # Import while creating the client to create the DB after starting the test session\n-    from docs_src.sql_databases.sql_app import alt_main\n-\n-    # Ensure import side effects are re-executed\n-    importlib.reload(alt_main)\n-\n-    with TestClient(alt_main.app) as c:\n-        yield c\n-    if test_db.is_file():  # pragma: nocover\n-        test_db.unlink()\n-\n-\n-# TODO: pv2 add version with Pydantic v2\n-@needs_pydanticv1\n-def test_create_user(client):\n-    test_user = {\"email\": \"johndoe@example.com\", \"password\": \"secret\"}\n-    response = client.post(\"/users/\", json=test_user)\n-    assert response.status_code == 200, response.text\n-    data = response.json()\n-    assert test_user[\"email\"] == data[\"email\"]\n-    assert \"id\" in data\n-    response = client.post(\"/users/\", json=test_user)\n-    assert response.status_code == 400, response.text\n-\n-\n-# TODO: pv2 add version with Pydantic v2\n-@needs_pydanticv1\n-def test_get_user(client):\n-    response = client.get(\"/users/1\")\n-    assert response.status_code == 200, response.text\n-    data = response.json()\n-    assert \"email\" in data\n-    assert \"id\" in data\n-\n-\n-# TODO: pv2 add version with Pydantic v2\n-@needs_pydanticv1\n-def test_nonexistent_user(client):\n-    response = client.get(\"/users/999\")\n-    assert response.status_code == 404, response.text\n-\n-\n-# TODO: pv2 add version with Pydantic v2\n-@needs_pydanticv1\n-def test_get_users(client):\n-    response = client.get(\"/users/\")\n-    assert response.status_code == 200, response.text\n-    data = response.json()\n-    assert \"email\" in data[0]\n-    assert \"id\" in data[0]\n-\n-\n-# TODO: pv2 add Pydantic v2 version\n-@needs_pydanticv1\n-def test_create_item(client):\n-    item = {\"title\": \"Foo\", \"description\": \"Something that fights\"}\n-    response = client.post(\"/users/1/items/\", json=item)\n-    assert response.status_code == 200, response.text\n-    item_data = response.json()\n-    assert item[\"title\"] == item_data[\"title\"]\n-    assert item[\"description\"] == item_data[\"description\"]\n-    assert \"id\" in item_data\n-    assert \"owner_id\" in item_data\n-    response = client.get(\"/users/1\")\n-    assert response.status_code == 200, response.text\n-    user_data = response.json()\n-    item_to_check = [it for it in user_data[\"items\"] if it[\"id\"] == item_data[\"id\"]][0]\n-    assert item_to_check[\"title\"] == item[\"title\"]\n-    assert item_to_check[\"description\"] == item[\"description\"]\n-    response = client.get(\"/users/1\")\n-    assert response.status_code == 200, response.text\n-    user_data = response.json()\n-    item_to_check = [it for it in user_data[\"items\"] if it[\"id\"] == item_data[\"id\"]][0]\n-    assert item_to_check[\"title\"] == item[\"title\"]\n-    assert item_to_check[\"description\"] == item[\"description\"]\n-\n-\n-# TODO: pv2 add Pydantic v2 version\n-@needs_pydanticv1\n-def test_read_items(client):\n-    response = client.get(\"/items/\")\n-    assert response.status_code == 200, response.text\n-    data = response.json()\n-    assert data\n-    first_item = data[0]\n-    assert \"title\" in first_item\n-    assert \"description\" in first_item\n-\n-\n-# TODO: pv2 add version with Pydantic v2\n-@needs_pydanticv1\n-def test_openapi_schema(client: TestClient):\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\n-        \"openapi\": \"3.1.0\",\n-        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n-        \"paths\": {\n-            \"/users/\": {\n-                \"get\": {\n-                    \"responses\": {\n-                        \"200\": {\n-                            \"description\": \"Successful Response\",\n-                            \"content\": {\n-                                \"application/json\": {\n-                                    \"schema\": {\n-                                        \"title\": \"Response Read Users Users  Get\",\n-                                        \"type\": \"array\",\n-                                        \"items\": {\"$ref\": \"#/components/schemas/User\"},\n-                                    }\n-                                }\n-                            },\n-                        },\n-                        \"422\": {\n-                            \"description\": \"Validation Error\",\n-                            \"content\": {\n-                                \"application/json\": {\n-                                    \"schema\": {\n-                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n-                                    }\n-                                }\n-                            },\n-                        },\n-                    },\n-                    \"summary\": \"Read Users\",\n-                    \"operationId\": \"read_users_users__get\",\n-                    \"parameters\": [\n-                        {\n-                            \"required\": False,\n-                            \"schema\": {\n-                                \"title\": \"Skip\",\n-                                \"type\": \"integer\",\n-                                \"default\": 0,\n-                            },\n-                            \"name\": \"skip\",\n-                            \"in\": \"query\",\n-                        },\n-                        {\n-                            \"required\": False,\n-                            \"schema\": {\n-                                \"title\": \"Limit\",\n-                                \"type\": \"integer\",\n-                                \"default\": 100,\n-                            },\n-                            \"name\": \"limit\",\n-                            \"in\": \"query\",\n-                        },\n-                    ],\n-                },\n-                \"post\": {\n-                    \"responses\": {\n-                        \"200\": {\n-                            \"description\": \"Successful Response\",\n-                            \"content\": {\n-                                \"application/json\": {\n-                                    \"schema\": {\"$ref\": \"#/components/schemas/User\"}\n-                                }\n-                            },\n-                        },\n-                        \"422\": {\n-                            \"description\": \"Validation Error\",\n-                            \"content\": {\n-                                \"application/json\": {\n-                                    \"schema\": {\n-                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n-                                    }\n-                                }\n-                            },\n-                        },\n-                    },\n-                    \"summary\": \"Create User\",\n-                    \"operationId\": \"create_user_users__post\",\n-                    \"requestBody\": {\n-                        \"content\": {\n-                            \"application/json\": {\n-                                \"schema\": {\"$ref\": \"#/components/schemas/UserCreate\"}\n-                            }\n-                        },\n-                        \"required\": True,\n-                    },\n-                },\n-            },\n-            \"/users/{user_id}\": {\n-                \"get\": {\n-                    \"responses\": {\n-                        \"200\": {\n-                            \"description\": \"Successful Response\",\n-                            \"content\": {\n-                                \"application/json\": {\n-                                    \"schema\": {\"$ref\": \"#/components/schemas/User\"}\n-                                }\n-                            },\n-                        },\n-                        \"422\": {\n-                            \"description\": \"Validation Error\",\n-                            \"content\": {\n-                                \"application/json\": {\n-                                    \"schema\": {\n-                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n-                                    }\n-                                }\n-                            },\n-                        },\n-                    },\n-                    \"summary\": \"Read User\",\n-                    \"operationId\": \"read_user_users__user_id__get\",\n-                    \"parameters\": [\n-                        {\n-                            \"required\": True,\n-                            \"schema\": {\"title\": \"User Id\", \"type\": \"integer\"},\n-                            \"name\": \"user_id\",\n-                            \"in\": \"path\",\n-                        }\n-                    ],\n-                }\n-            },\n-            \"/users/{user_id}/items/\": {\n-                \"post\": {\n-                    \"responses\": {\n-                        \"200\": {\n-                            \"description\": \"Successful Response\",\n-                            \"content\": {\n-                                \"application/json\": {\n-                                    \"schema\": {\"$ref\": \"#/components/schemas/Item\"}\n-                                }\n-                            },\n-                        },\n-                        \"422\": {\n-                            \"description\": \"Validation Error\",\n-                            \"content\": {\n-                                \"application/json\": {\n-                                    \"schema\": {\n-                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n-                                    }\n-                                }\n-                            },\n-                        },\n-                    },\n-                    \"summary\": \"Create Item For User\",\n-                    \"operationId\": \"create_item_for_user_users__user_id__items__post\",\n-                    \"parameters\": [\n-                        {\n-                            \"required\": True,\n-                            \"schema\": {\"title\": \"User Id\", \"type\": \"integer\"},\n-                            \"name\": \"user_id\",\n-                            \"in\": \"path\",\n-                        }\n-                    ],\n-                    \"requestBody\": {\n-                        \"content\": {\n-                            \"application/json\": {\n-                                \"schema\": {\"$ref\": \"#/components/schemas/ItemCreate\"}\n-                            }\n-                        },\n-                        \"required\": True,\n-                    },\n-                }\n-            },\n-            \"/items/\": {\n-                \"get\": {\n-                    \"responses\": {\n-                        \"200\": {\n-                            \"description\": \"Successful Response\",\n-                            \"content\": {\n-                                \"application/json\": {\n-                                    \"schema\": {\n-                                        \"title\": \"Response Read Items Items  Get\",\n-                                        \"type\": \"array\",\n-                                        \"items\": {\"$ref\": \"#/components/schemas/Item\"},\n-                                    }\n-                                }\n-                            },\n-                        },\n-                        \"422\": {\n-                            \"description\": \"Validation Error\",\n-                            \"content\": {\n-                                \"application/json\": {\n-                                    \"schema\": {\n-                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n-                                    }\n-                                }\n-                            },\n-                        },\n-                    },\n-                    \"summary\": \"Read Items\",\n-                    \"operationId\": \"read_items_items__get\",\n-                    \"parameters\": [\n-                        {\n-                            \"required\": False,\n-                            \"schema\": {\n-                                \"title\": \"Skip\",\n-                                \"type\": \"integer\",\n-                                \"default\": 0,\n-                            },\n-                            \"name\": \"skip\",\n-                            \"in\": \"query\",\n-                        },\n-                        {\n-                            \"required\": False,\n-                            \"schema\": {\n-                                \"title\": \"Limit\",\n-                                \"type\": \"integer\",\n-                                \"default\": 100,\n-                            },\n-                            \"name\": \"limit\",\n-                            \"in\": \"query\",\n-                        },\n-                    ],\n-                }\n-            },\n-        },\n-        \"components\": {\n-            \"schemas\": {\n-                \"ItemCreate\": {\n-                    \"title\": \"ItemCreate\",\n-                    \"required\": [\"title\"],\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"title\": {\"title\": \"Title\", \"type\": \"string\"},\n-                        \"description\": IsDict(\n-                            {\n-                                \"title\": \"Description\",\n-                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n-                            }\n-                        )\n-                        | IsDict(\n-                            # TODO: remove when deprecating Pydantic v1\n-                            {\"title\": \"Description\", \"type\": \"string\"}\n-                        ),\n-                    },\n-                },\n-                \"Item\": {\n-                    \"title\": \"Item\",\n-                    \"required\": [\"title\", \"id\", \"owner_id\"],\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"title\": {\"title\": \"Title\", \"type\": \"string\"},\n-                        \"description\": IsDict(\n-                            {\n-                                \"title\": \"Description\",\n-                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n-                            }\n-                        )\n-                        | IsDict(\n-                            # TODO: remove when deprecating Pydantic v1\n-                            {\"title\": \"Description\", \"type\": \"string\"},\n-                        ),\n-                        \"id\": {\"title\": \"Id\", \"type\": \"integer\"},\n-                        \"owner_id\": {\"title\": \"Owner Id\", \"type\": \"integer\"},\n-                    },\n-                },\n-                \"User\": {\n-                    \"title\": \"User\",\n-                    \"required\": [\"email\", \"id\", \"is_active\"],\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"email\": {\"title\": \"Email\", \"type\": \"string\"},\n-                        \"id\": {\"title\": \"Id\", \"type\": \"integer\"},\n-                        \"is_active\": {\"title\": \"Is Active\", \"type\": \"boolean\"},\n-                        \"items\": {\n-                            \"title\": \"Items\",\n-                            \"type\": \"array\",\n-                            \"items\": {\"$ref\": \"#/components/schemas/Item\"},\n-                            \"default\": [],\n-                        },\n-                    },\n-                },\n-                \"UserCreate\": {\n-                    \"title\": \"UserCreate\",\n-                    \"required\": [\"email\", \"password\"],\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"email\": {\"title\": \"Email\", \"type\": \"string\"},\n-                        \"password\": {\"title\": \"Password\", \"type\": \"string\"},\n-                    },\n-                },\n-                \"ValidationError\": {\n-                    \"title\": \"ValidationError\",\n-                    \"required\": [\"loc\", \"msg\", \"type\"],\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"loc\": {\n-                            \"title\": \"Location\",\n-                            \"type\": \"array\",\n-                            \"items\": {\n-                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n-                            },\n-                        },\n-                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n-                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n-                    },\n-                },\n-                \"HTTPValidationError\": {\n-                    \"title\": \"HTTPValidationError\",\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"detail\": {\n-                            \"title\": \"Detail\",\n-                            \"type\": \"array\",\n-                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n-                        }\n-                    },\n-                },\n-            }\n-        },\n-    }\n\n@@ -1,433 +0,0 @@\n-import importlib\n-import os\n-from pathlib import Path\n-\n-import pytest\n-from dirty_equals import IsDict\n-from fastapi.testclient import TestClient\n-\n-from ...utils import needs_py310, needs_pydanticv1\n-\n-\n-@pytest.fixture(scope=\"module\")\n-def client(tmp_path_factory: pytest.TempPathFactory):\n-    tmp_path = tmp_path_factory.mktemp(\"data\")\n-    cwd = os.getcwd()\n-    os.chdir(tmp_path)\n-    test_db = Path(\"./sql_app.db\")\n-    if test_db.is_file():  # pragma: nocover\n-        test_db.unlink()\n-    # Import while creating the client to create the DB after starting the test session\n-    from docs_src.sql_databases.sql_app_py310 import alt_main\n-\n-    # Ensure import side effects are re-executed\n-    importlib.reload(alt_main)\n-\n-    with TestClient(alt_main.app) as c:\n-        yield c\n-    if test_db.is_file():  # pragma: nocover\n-        test_db.unlink()\n-    os.chdir(cwd)\n-\n-\n-@needs_py310\n-# TODO: pv2 add version with Pydantic v2\n-@needs_pydanticv1\n-def test_create_user(client):\n-    test_user = {\"email\": \"johndoe@example.com\", \"password\": \"secret\"}\n-    response = client.post(\"/users/\", json=test_user)\n-    assert response.status_code == 200, response.text\n-    data = response.json()\n-    assert test_user[\"email\"] == data[\"email\"]\n-    assert \"id\" in data\n-    response = client.post(\"/users/\", json=test_user)\n-    assert response.status_code == 400, response.text\n-\n-\n-@needs_py310\n-# TODO: pv2 add version with Pydantic v2\n-@needs_pydanticv1\n-def test_get_user(client):\n-    response = client.get(\"/users/1\")\n-    assert response.status_code == 200, response.text\n-    data = response.json()\n-    assert \"email\" in data\n-    assert \"id\" in data\n-\n-\n-@needs_py310\n-# TODO: pv2 add version with Pydantic v2\n-@needs_pydanticv1\n-def test_nonexistent_user(client):\n-    response = client.get(\"/users/999\")\n-    assert response.status_code == 404, response.text\n-\n-\n-@needs_py310\n-# TODO: pv2 add version with Pydantic v2\n-@needs_pydanticv1\n-def test_get_users(client):\n-    response = client.get(\"/users/\")\n-    assert response.status_code == 200, response.text\n-    data = response.json()\n-    assert \"email\" in data[0]\n-    assert \"id\" in data[0]\n-\n-\n-@needs_py310\n-# TODO: pv2 add Pydantic v2 version\n-@needs_pydanticv1\n-def test_create_item(client):\n-    item = {\"title\": \"Foo\", \"description\": \"Something that fights\"}\n-    response = client.post(\"/users/1/items/\", json=item)\n-    assert response.status_code == 200, response.text\n-    item_data = response.json()\n-    assert item[\"title\"] == item_data[\"title\"]\n-    assert item[\"description\"] == item_data[\"description\"]\n-    assert \"id\" in item_data\n-    assert \"owner_id\" in item_data\n-    response = client.get(\"/users/1\")\n-    assert response.status_code == 200, response.text\n-    user_data = response.json()\n-    item_to_check = [it for it in user_data[\"items\"] if it[\"id\"] == item_data[\"id\"]][0]\n-    assert item_to_check[\"title\"] == item[\"title\"]\n-    assert item_to_check[\"description\"] == item[\"description\"]\n-    response = client.get(\"/users/1\")\n-    assert response.status_code == 200, response.text\n-    user_data = response.json()\n-    item_to_check = [it for it in user_data[\"items\"] if it[\"id\"] == item_data[\"id\"]][0]\n-    assert item_to_check[\"title\"] == item[\"title\"]\n-    assert item_to_check[\"description\"] == item[\"description\"]\n-\n-\n-@needs_py310\n-# TODO: pv2 add Pydantic v2 version\n-@needs_pydanticv1\n-def test_read_items(client):\n-    response = client.get(\"/items/\")\n-    assert response.status_code == 200, response.text\n-    data = response.json()\n-    assert data\n-    first_item = data[0]\n-    assert \"title\" in first_item\n-    assert \"description\" in first_item\n-\n-\n-@needs_py310\n-# TODO: pv2 add version with Pydantic v2\n-@needs_pydanticv1\n-def test_openapi_schema(client: TestClient):\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\n-        \"openapi\": \"3.1.0\",\n-        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n-        \"paths\": {\n-            \"/users/\": {\n-                \"get\": {\n-                    \"responses\": {\n-                        \"200\": {\n-                            \"description\": \"Successful Response\",\n-                            \"content\": {\n-                                \"application/json\": {\n-                                    \"schema\": {\n-                                        \"title\": \"Response Read Users Users  Get\",\n-                                        \"type\": \"array\",\n-                                        \"items\": {\"$ref\": \"#/components/schemas/User\"},\n-                                    }\n-                                }\n-                            },\n-                        },\n-                        \"422\": {\n-                            \"description\": \"Validation Error\",\n-                            \"content\": {\n-                                \"application/json\": {\n-                                    \"schema\": {\n-                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n-                                    }\n-                                }\n-                            },\n-                        },\n-                    },\n-                    \"summary\": \"Read Users\",\n-                    \"operationId\": \"read_users_users__get\",\n-                    \"parameters\": [\n-                        {\n-                            \"required\": False,\n-                            \"schema\": {\n-                                \"title\": \"Skip\",\n-                                \"type\": \"integer\",\n-                                \"default\": 0,\n-                            },\n-                            \"name\": \"skip\",\n-                            \"in\": \"query\",\n-                        },\n-                        {\n-                            \"required\": False,\n-                            \"schema\": {\n-                                \"title\": \"Limit\",\n-                                \"type\": \"integer\",\n-                                \"default\": 100,\n-                            },\n-                            \"name\": \"limit\",\n-                            \"in\": \"query\",\n-                        },\n-                    ],\n-                },\n-                \"post\": {\n-                    \"responses\": {\n-                        \"200\": {\n-                            \"description\": \"Successful Response\",\n-                            \"content\": {\n-                                \"application/json\": {\n-                                    \"schema\": {\"$ref\": \"#/components/schemas/User\"}\n-                                }\n-                            },\n-                        },\n-                        \"422\": {\n-                            \"description\": \"Validation Error\",\n-                            \"content\": {\n-                                \"application/json\": {\n-                                    \"schema\": {\n-                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n-                                    }\n-                                }\n-                            },\n-                        },\n-                    },\n-                    \"summary\": \"Create User\",\n-                    \"operationId\": \"create_user_users__post\",\n-                    \"requestBody\": {\n-                        \"content\": {\n-                            \"application/json\": {\n-                                \"schema\": {\"$ref\": \"#/components/schemas/UserCreate\"}\n-                            }\n-                        },\n-                        \"required\": True,\n-                    },\n-                },\n-            },\n-            \"/users/{user_id}\": {\n-                \"get\": {\n-                    \"responses\": {\n-                        \"200\": {\n-                            \"description\": \"Successful Response\",\n-                            \"content\": {\n-                                \"application/json\": {\n-                                    \"schema\": {\"$ref\": \"#/components/schemas/User\"}\n-                                }\n-                            },\n-                        },\n-                        \"422\": {\n-                            \"description\": \"Validation Error\",\n-                            \"content\": {\n-                                \"application/json\": {\n-                                    \"schema\": {\n-                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n-                                    }\n-                                }\n-                            },\n-                        },\n-                    },\n-                    \"summary\": \"Read User\",\n-                    \"operationId\": \"read_user_users__user_id__get\",\n-                    \"parameters\": [\n-                        {\n-                            \"required\": True,\n-                            \"schema\": {\"title\": \"User Id\", \"type\": \"integer\"},\n-                            \"name\": \"user_id\",\n-                            \"in\": \"path\",\n-                        }\n-                    ],\n-                }\n-            },\n-            \"/users/{user_id}/items/\": {\n-                \"post\": {\n-                    \"responses\": {\n-                        \"200\": {\n-                            \"description\": \"Successful Response\",\n-                            \"content\": {\n-                                \"application/json\": {\n-                                    \"schema\": {\"$ref\": \"#/components/schemas/Item\"}\n-                                }\n-                            },\n-                        },\n-                        \"422\": {\n-                            \"description\": \"Validation Error\",\n-                            \"content\": {\n-                                \"application/json\": {\n-                                    \"schema\": {\n-                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n-                                    }\n-                                }\n-                            },\n-                        },\n-                    },\n-                    \"summary\": \"Create Item For User\",\n-                    \"operationId\": \"create_item_for_user_users__user_id__items__post\",\n-                    \"parameters\": [\n-                        {\n-                            \"required\": True,\n-                            \"schema\": {\"title\": \"User Id\", \"type\": \"integer\"},\n-                            \"name\": \"user_id\",\n-                            \"in\": \"path\",\n-                        }\n-                    ],\n-                    \"requestBody\": {\n-                        \"content\": {\n-                            \"application/json\": {\n-                                \"schema\": {\"$ref\": \"#/components/schemas/ItemCreate\"}\n-                            }\n-                        },\n-                        \"required\": True,\n-                    },\n-                }\n-            },\n-            \"/items/\": {\n-                \"get\": {\n-                    \"responses\": {\n-                        \"200\": {\n-                            \"description\": \"Successful Response\",\n-                            \"content\": {\n-                                \"application/json\": {\n-                                    \"schema\": {\n-                                        \"title\": \"Response Read Items Items  Get\",\n-                                        \"type\": \"array\",\n-                                        \"items\": {\"$ref\": \"#/components/schemas/Item\"},\n-                                    }\n-                                }\n-                            },\n-                        },\n-                        \"422\": {\n-                            \"description\": \"Validation Error\",\n-                            \"content\": {\n-                                \"application/json\": {\n-                                    \"schema\": {\n-                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n-                                    }\n-                                }\n-                            },\n-                        },\n-                    },\n-                    \"summary\": \"Read Items\",\n-                    \"operationId\": \"read_items_items__get\",\n-                    \"parameters\": [\n-                        {\n-                            \"required\": False,\n-                            \"schema\": {\n-                                \"title\": \"Skip\",\n-                                \"type\": \"integer\",\n-                                \"default\": 0,\n-                            },\n-                            \"name\": \"skip\",\n-                            \"in\": \"query\",\n-                        },\n-                        {\n-                            \"required\": False,\n-                            \"schema\": {\n-                                \"title\": \"Limit\",\n-                                \"type\": \"integer\",\n-                                \"default\": 100,\n-                            },\n-                            \"name\": \"limit\",\n-                            \"in\": \"query\",\n-                        },\n-                    ],\n-                }\n-            },\n-        },\n-        \"components\": {\n-            \"schemas\": {\n-                \"ItemCreate\": {\n-                    \"title\": \"ItemCreate\",\n-                    \"required\": [\"title\"],\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"title\": {\"title\": \"Title\", \"type\": \"string\"},\n-                        \"description\": IsDict(\n-                            {\n-                                \"title\": \"Description\",\n-                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n-                            }\n-                        )\n-                        | IsDict(\n-                            # TODO: remove when deprecating Pydantic v1\n-                            {\"title\": \"Description\", \"type\": \"string\"}\n-                        ),\n-                    },\n-                },\n-                \"Item\": {\n-                    \"title\": \"Item\",\n-                    \"required\": [\"title\", \"id\", \"owner_id\"],\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"title\": {\"title\": \"Title\", \"type\": \"string\"},\n-                        \"description\": IsDict(\n-                            {\n-                                \"title\": \"Description\",\n-                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n-                            }\n-                        )\n-                        | IsDict(\n-                            # TODO: remove when deprecating Pydantic v1\n-                            {\"title\": \"Description\", \"type\": \"string\"},\n-                        ),\n-                        \"id\": {\"title\": \"Id\", \"type\": \"integer\"},\n-                        \"owner_id\": {\"title\": \"Owner Id\", \"type\": \"integer\"},\n-                    },\n-                },\n-                \"User\": {\n-                    \"title\": \"User\",\n-                    \"required\": [\"email\", \"id\", \"is_active\"],\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"email\": {\"title\": \"Email\", \"type\": \"string\"},\n-                        \"id\": {\"title\": \"Id\", \"type\": \"integer\"},\n-                        \"is_active\": {\"title\": \"Is Active\", \"type\": \"boolean\"},\n-                        \"items\": {\n-                            \"title\": \"Items\",\n-                            \"type\": \"array\",\n-                            \"items\": {\"$ref\": \"#/components/schemas/Item\"},\n-                            \"default\": [],\n-                        },\n-                    },\n-                },\n-                \"UserCreate\": {\n-                    \"title\": \"UserCreate\",\n-                    \"required\": [\"email\", \"password\"],\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"email\": {\"title\": \"Email\", \"type\": \"string\"},\n-                        \"password\": {\"title\": \"Password\", \"type\": \"string\"},\n-                    },\n-                },\n-                \"ValidationError\": {\n-                    \"title\": \"ValidationError\",\n-                    \"required\": [\"loc\", \"msg\", \"type\"],\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"loc\": {\n-                            \"title\": \"Location\",\n-                            \"type\": \"array\",\n-                            \"items\": {\n-                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n-                            },\n-                        },\n-                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n-                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n-                    },\n-                },\n-                \"HTTPValidationError\": {\n-                    \"title\": \"HTTPValidationError\",\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"detail\": {\n-                            \"title\": \"Detail\",\n-                            \"type\": \"array\",\n-                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n-                        }\n-                    },\n-                },\n-            }\n-        },\n-    }\n\n@@ -1,433 +0,0 @@\n-import importlib\n-import os\n-from pathlib import Path\n-\n-import pytest\n-from dirty_equals import IsDict\n-from fastapi.testclient import TestClient\n-\n-from ...utils import needs_py39, needs_pydanticv1\n-\n-\n-@pytest.fixture(scope=\"module\")\n-def client(tmp_path_factory: pytest.TempPathFactory):\n-    tmp_path = tmp_path_factory.mktemp(\"data\")\n-    cwd = os.getcwd()\n-    os.chdir(tmp_path)\n-    test_db = Path(\"./sql_app.db\")\n-    if test_db.is_file():  # pragma: nocover\n-        test_db.unlink()\n-    # Import while creating the client to create the DB after starting the test session\n-    from docs_src.sql_databases.sql_app_py39 import alt_main\n-\n-    # Ensure import side effects are re-executed\n-    importlib.reload(alt_main)\n-\n-    with TestClient(alt_main.app) as c:\n-        yield c\n-    if test_db.is_file():  # pragma: nocover\n-        test_db.unlink()\n-    os.chdir(cwd)\n-\n-\n-@needs_py39\n-# TODO: pv2 add version with Pydantic v2\n-@needs_pydanticv1\n-def test_create_user(client):\n-    test_user = {\"email\": \"johndoe@example.com\", \"password\": \"secret\"}\n-    response = client.post(\"/users/\", json=test_user)\n-    assert response.status_code == 200, response.text\n-    data = response.json()\n-    assert test_user[\"email\"] == data[\"email\"]\n-    assert \"id\" in data\n-    response = client.post(\"/users/\", json=test_user)\n-    assert response.status_code == 400, response.text\n-\n-\n-@needs_py39\n-# TODO: pv2 add version with Pydantic v2\n-@needs_pydanticv1\n-def test_get_user(client):\n-    response = client.get(\"/users/1\")\n-    assert response.status_code == 200, response.text\n-    data = response.json()\n-    assert \"email\" in data\n-    assert \"id\" in data\n-\n-\n-@needs_py39\n-# TODO: pv2 add version with Pydantic v2\n-@needs_pydanticv1\n-def test_nonexistent_user(client):\n-    response = client.get(\"/users/999\")\n-    assert response.status_code == 404, response.text\n-\n-\n-@needs_py39\n-# TODO: pv2 add version with Pydantic v2\n-@needs_pydanticv1\n-def test_get_users(client):\n-    response = client.get(\"/users/\")\n-    assert response.status_code == 200, response.text\n-    data = response.json()\n-    assert \"email\" in data[0]\n-    assert \"id\" in data[0]\n-\n-\n-@needs_py39\n-# TODO: pv2 add version with Pydantic v2\n-@needs_pydanticv1\n-def test_create_item(client):\n-    item = {\"title\": \"Foo\", \"description\": \"Something that fights\"}\n-    response = client.post(\"/users/1/items/\", json=item)\n-    assert response.status_code == 200, response.text\n-    item_data = response.json()\n-    assert item[\"title\"] == item_data[\"title\"]\n-    assert item[\"description\"] == item_data[\"description\"]\n-    assert \"id\" in item_data\n-    assert \"owner_id\" in item_data\n-    response = client.get(\"/users/1\")\n-    assert response.status_code == 200, response.text\n-    user_data = response.json()\n-    item_to_check = [it for it in user_data[\"items\"] if it[\"id\"] == item_data[\"id\"]][0]\n-    assert item_to_check[\"title\"] == item[\"title\"]\n-    assert item_to_check[\"description\"] == item[\"description\"]\n-    response = client.get(\"/users/1\")\n-    assert response.status_code == 200, response.text\n-    user_data = response.json()\n-    item_to_check = [it for it in user_data[\"items\"] if it[\"id\"] == item_data[\"id\"]][0]\n-    assert item_to_check[\"title\"] == item[\"title\"]\n-    assert item_to_check[\"description\"] == item[\"description\"]\n-\n-\n-@needs_py39\n-# TODO: pv2 add version with Pydantic v2\n-@needs_pydanticv1\n-def test_read_items(client):\n-    response = client.get(\"/items/\")\n-    assert response.status_code == 200, response.text\n-    data = response.json()\n-    assert data\n-    first_item = data[0]\n-    assert \"title\" in first_item\n-    assert \"description\" in first_item\n-\n-\n-@needs_py39\n-# TODO: pv2 add version with Pydantic v2\n-@needs_pydanticv1\n-def test_openapi_schema(client: TestClient):\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\n-        \"openapi\": \"3.1.0\",\n-        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n-        \"paths\": {\n-            \"/users/\": {\n-                \"get\": {\n-                    \"responses\": {\n-                        \"200\": {\n-                            \"description\": \"Successful Response\",\n-                            \"content\": {\n-                                \"application/json\": {\n-                                    \"schema\": {\n-                                        \"title\": \"Response Read Users Users  Get\",\n-                                        \"type\": \"array\",\n-                                        \"items\": {\"$ref\": \"#/components/schemas/User\"},\n-                                    }\n-                                }\n-                            },\n-                        },\n-                        \"422\": {\n-                            \"description\": \"Validation Error\",\n-                            \"content\": {\n-                                \"application/json\": {\n-                                    \"schema\": {\n-                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n-                                    }\n-                                }\n-                            },\n-                        },\n-                    },\n-                    \"summary\": \"Read Users\",\n-                    \"operationId\": \"read_users_users__get\",\n-                    \"parameters\": [\n-                        {\n-                            \"required\": False,\n-                            \"schema\": {\n-                                \"title\": \"Skip\",\n-                                \"type\": \"integer\",\n-                                \"default\": 0,\n-                            },\n-                            \"name\": \"skip\",\n-                            \"in\": \"query\",\n-                        },\n-                        {\n-                            \"required\": False,\n-                            \"schema\": {\n-                                \"title\": \"Limit\",\n-                                \"type\": \"integer\",\n-                                \"default\": 100,\n-                            },\n-                            \"name\": \"limit\",\n-                            \"in\": \"query\",\n-                        },\n-                    ],\n-                },\n-                \"post\": {\n-                    \"responses\": {\n-                        \"200\": {\n-                            \"description\": \"Successful Response\",\n-                            \"content\": {\n-                                \"application/json\": {\n-                                    \"schema\": {\"$ref\": \"#/components/schemas/User\"}\n-                                }\n-                            },\n-                        },\n-                        \"422\": {\n-                            \"description\": \"Validation Error\",\n-                            \"content\": {\n-                                \"application/json\": {\n-                                    \"schema\": {\n-                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n-                                    }\n-                                }\n-                            },\n-                        },\n-                    },\n-                    \"summary\": \"Create User\",\n-                    \"operationId\": \"create_user_users__post\",\n-                    \"requestBody\": {\n-                        \"content\": {\n-                            \"application/json\": {\n-                                \"schema\": {\"$ref\": \"#/components/schemas/UserCreate\"}\n-                            }\n-                        },\n-                        \"required\": True,\n-                    },\n-                },\n-            },\n-            \"/users/{user_id}\": {\n-                \"get\": {\n-                    \"responses\": {\n-                        \"200\": {\n-                            \"description\": \"Successful Response\",\n-                            \"content\": {\n-                                \"application/json\": {\n-                                    \"schema\": {\"$ref\": \"#/components/schemas/User\"}\n-                                }\n-                            },\n-                        },\n-                        \"422\": {\n-                            \"description\": \"Validation Error\",\n-                            \"content\": {\n-                                \"application/json\": {\n-                                    \"schema\": {\n-                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n-                                    }\n-                                }\n-                            },\n-                        },\n-                    },\n-                    \"summary\": \"Read User\",\n-                    \"operationId\": \"read_user_users__user_id__get\",\n-                    \"parameters\": [\n-                        {\n-                            \"required\": True,\n-                            \"schema\": {\"title\": \"User Id\", \"type\": \"integer\"},\n-                            \"name\": \"user_id\",\n-                            \"in\": \"path\",\n-                        }\n-                    ],\n-                }\n-            },\n-            \"/users/{user_id}/items/\": {\n-                \"post\": {\n-                    \"responses\": {\n-                        \"200\": {\n-                            \"description\": \"Successful Response\",\n-                            \"content\": {\n-                                \"application/json\": {\n-                                    \"schema\": {\"$ref\": \"#/components/schemas/Item\"}\n-                                }\n-                            },\n-                        },\n-                        \"422\": {\n-                            \"description\": \"Validation Error\",\n-                            \"content\": {\n-                                \"application/json\": {\n-                                    \"schema\": {\n-                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n-                                    }\n-                                }\n-                            },\n-                        },\n-                    },\n-                    \"summary\": \"Create Item For User\",\n-                    \"operationId\": \"create_item_for_user_users__user_id__items__post\",\n-                    \"parameters\": [\n-                        {\n-                            \"required\": True,\n-                            \"schema\": {\"title\": \"User Id\", \"type\": \"integer\"},\n-                            \"name\": \"user_id\",\n-                            \"in\": \"path\",\n-                        }\n-                    ],\n-                    \"requestBody\": {\n-                        \"content\": {\n-                            \"application/json\": {\n-                                \"schema\": {\"$ref\": \"#/components/schemas/ItemCreate\"}\n-                            }\n-                        },\n-                        \"required\": True,\n-                    },\n-                }\n-            },\n-            \"/items/\": {\n-                \"get\": {\n-                    \"responses\": {\n-                        \"200\": {\n-                            \"description\": \"Successful Response\",\n-                            \"content\": {\n-                                \"application/json\": {\n-                                    \"schema\": {\n-                                        \"title\": \"Response Read Items Items  Get\",\n-                                        \"type\": \"array\",\n-                                        \"items\": {\"$ref\": \"#/components/schemas/Item\"},\n-                                    }\n-                                }\n-                            },\n-                        },\n-                        \"422\": {\n-                            \"description\": \"Validation Error\",\n-                            \"content\": {\n-                                \"application/json\": {\n-                                    \"schema\": {\n-                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n-                                    }\n-                                }\n-                            },\n-                        },\n-                    },\n-                    \"summary\": \"Read Items\",\n-                    \"operationId\": \"read_items_items__get\",\n-                    \"parameters\": [\n-                        {\n-                            \"required\": False,\n-                            \"schema\": {\n-                                \"title\": \"Skip\",\n-                                \"type\": \"integer\",\n-                                \"default\": 0,\n-                            },\n-                            \"name\": \"skip\",\n-                            \"in\": \"query\",\n-                        },\n-                        {\n-                            \"required\": False,\n-                            \"schema\": {\n-                                \"title\": \"Limit\",\n-                                \"type\": \"integer\",\n-                                \"default\": 100,\n-                            },\n-                            \"name\": \"limit\",\n-                            \"in\": \"query\",\n-                        },\n-                    ],\n-                }\n-            },\n-        },\n-        \"components\": {\n-            \"schemas\": {\n-                \"ItemCreate\": {\n-                    \"title\": \"ItemCreate\",\n-                    \"required\": [\"title\"],\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"title\": {\"title\": \"Title\", \"type\": \"string\"},\n-                        \"description\": IsDict(\n-                            {\n-                                \"title\": \"Description\",\n-                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n-                            }\n-                        )\n-                        | IsDict(\n-                            # TODO: remove when deprecating Pydantic v1\n-                            {\"title\": \"Description\", \"type\": \"string\"}\n-                        ),\n-                    },\n-                },\n-                \"Item\": {\n-                    \"title\": \"Item\",\n-                    \"required\": [\"title\", \"id\", \"owner_id\"],\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"title\": {\"title\": \"Title\", \"type\": \"string\"},\n-                        \"description\": IsDict(\n-                            {\n-                                \"title\": \"Description\",\n-                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n-                            }\n-                        )\n-                        | IsDict(\n-                            # TODO: remove when deprecating Pydantic v1\n-                            {\"title\": \"Description\", \"type\": \"string\"},\n-                        ),\n-                        \"id\": {\"title\": \"Id\", \"type\": \"integer\"},\n-                        \"owner_id\": {\"title\": \"Owner Id\", \"type\": \"integer\"},\n-                    },\n-                },\n-                \"User\": {\n-                    \"title\": \"User\",\n-                    \"required\": [\"email\", \"id\", \"is_active\"],\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"email\": {\"title\": \"Email\", \"type\": \"string\"},\n-                        \"id\": {\"title\": \"Id\", \"type\": \"integer\"},\n-                        \"is_active\": {\"title\": \"Is Active\", \"type\": \"boolean\"},\n-                        \"items\": {\n-                            \"title\": \"Items\",\n-                            \"type\": \"array\",\n-                            \"items\": {\"$ref\": \"#/components/schemas/Item\"},\n-                            \"default\": [],\n-                        },\n-                    },\n-                },\n-                \"UserCreate\": {\n-                    \"title\": \"UserCreate\",\n-                    \"required\": [\"email\", \"password\"],\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"email\": {\"title\": \"Email\", \"type\": \"string\"},\n-                        \"password\": {\"title\": \"Password\", \"type\": \"string\"},\n-                    },\n-                },\n-                \"ValidationError\": {\n-                    \"title\": \"ValidationError\",\n-                    \"required\": [\"loc\", \"msg\", \"type\"],\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"loc\": {\n-                            \"title\": \"Location\",\n-                            \"type\": \"array\",\n-                            \"items\": {\n-                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n-                            },\n-                        },\n-                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n-                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n-                    },\n-                },\n-                \"HTTPValidationError\": {\n-                    \"title\": \"HTTPValidationError\",\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"detail\": {\n-                            \"title\": \"Detail\",\n-                            \"type\": \"array\",\n-                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n-                        }\n-                    },\n-                },\n-            }\n-        },\n-    }\n\n@@ -1,432 +0,0 @@\n-import importlib\n-import os\n-from pathlib import Path\n-\n-import pytest\n-from dirty_equals import IsDict\n-from fastapi.testclient import TestClient\n-\n-from ...utils import needs_py310, needs_pydanticv1\n-\n-\n-@pytest.fixture(scope=\"module\", name=\"client\")\n-def get_client(tmp_path_factory: pytest.TempPathFactory):\n-    tmp_path = tmp_path_factory.mktemp(\"data\")\n-    cwd = os.getcwd()\n-    os.chdir(tmp_path)\n-    test_db = Path(\"./sql_app.db\")\n-    if test_db.is_file():  # pragma: nocover\n-        test_db.unlink()\n-    # Import while creating the client to create the DB after starting the test session\n-    from docs_src.sql_databases.sql_app_py310 import main\n-\n-    # Ensure import side effects are re-executed\n-    importlib.reload(main)\n-    with TestClient(main.app) as c:\n-        yield c\n-    if test_db.is_file():  # pragma: nocover\n-        test_db.unlink()\n-    os.chdir(cwd)\n-\n-\n-@needs_py310\n-# TODO: pv2 add version with Pydantic v2\n-@needs_pydanticv1\n-def test_create_user(client):\n-    test_user = {\"email\": \"johndoe@example.com\", \"password\": \"secret\"}\n-    response = client.post(\"/users/\", json=test_user)\n-    assert response.status_code == 200, response.text\n-    data = response.json()\n-    assert test_user[\"email\"] == data[\"email\"]\n-    assert \"id\" in data\n-    response = client.post(\"/users/\", json=test_user)\n-    assert response.status_code == 400, response.text\n-\n-\n-@needs_py310\n-# TODO: pv2 add version with Pydantic v2\n-@needs_pydanticv1\n-def test_get_user(client):\n-    response = client.get(\"/users/1\")\n-    assert response.status_code == 200, response.text\n-    data = response.json()\n-    assert \"email\" in data\n-    assert \"id\" in data\n-\n-\n-@needs_py310\n-# TODO: pv2 add version with Pydantic v2\n-@needs_pydanticv1\n-def test_nonexistent_user(client):\n-    response = client.get(\"/users/999\")\n-    assert response.status_code == 404, response.text\n-\n-\n-@needs_py310\n-# TODO: pv2 add version with Pydantic v2\n-@needs_pydanticv1\n-def test_get_users(client):\n-    response = client.get(\"/users/\")\n-    assert response.status_code == 200, response.text\n-    data = response.json()\n-    assert \"email\" in data[0]\n-    assert \"id\" in data[0]\n-\n-\n-@needs_py310\n-# TODO: pv2 add Pydantic v2 version\n-@needs_pydanticv1\n-def test_create_item(client):\n-    item = {\"title\": \"Foo\", \"description\": \"Something that fights\"}\n-    response = client.post(\"/users/1/items/\", json=item)\n-    assert response.status_code == 200, response.text\n-    item_data = response.json()\n-    assert item[\"title\"] == item_data[\"title\"]\n-    assert item[\"description\"] == item_data[\"description\"]\n-    assert \"id\" in item_data\n-    assert \"owner_id\" in item_data\n-    response = client.get(\"/users/1\")\n-    assert response.status_code == 200, response.text\n-    user_data = response.json()\n-    item_to_check = [it for it in user_data[\"items\"] if it[\"id\"] == item_data[\"id\"]][0]\n-    assert item_to_check[\"title\"] == item[\"title\"]\n-    assert item_to_check[\"description\"] == item[\"description\"]\n-    response = client.get(\"/users/1\")\n-    assert response.status_code == 200, response.text\n-    user_data = response.json()\n-    item_to_check = [it for it in user_data[\"items\"] if it[\"id\"] == item_data[\"id\"]][0]\n-    assert item_to_check[\"title\"] == item[\"title\"]\n-    assert item_to_check[\"description\"] == item[\"description\"]\n-\n-\n-@needs_py310\n-# TODO: pv2 add Pydantic v2 version\n-@needs_pydanticv1\n-def test_read_items(client):\n-    response = client.get(\"/items/\")\n-    assert response.status_code == 200, response.text\n-    data = response.json()\n-    assert data\n-    first_item = data[0]\n-    assert \"title\" in first_item\n-    assert \"description\" in first_item\n-\n-\n-@needs_py310\n-# TODO: pv2 add version with Pydantic v2\n-@needs_pydanticv1\n-def test_openapi_schema(client: TestClient):\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\n-        \"openapi\": \"3.1.0\",\n-        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n-        \"paths\": {\n-            \"/users/\": {\n-                \"get\": {\n-                    \"responses\": {\n-                        \"200\": {\n-                            \"description\": \"Successful Response\",\n-                            \"content\": {\n-                                \"application/json\": {\n-                                    \"schema\": {\n-                                        \"title\": \"Response Read Users Users  Get\",\n-                                        \"type\": \"array\",\n-                                        \"items\": {\"$ref\": \"#/components/schemas/User\"},\n-                                    }\n-                                }\n-                            },\n-                        },\n-                        \"422\": {\n-                            \"description\": \"Validation Error\",\n-                            \"content\": {\n-                                \"application/json\": {\n-                                    \"schema\": {\n-                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n-                                    }\n-                                }\n-                            },\n-                        },\n-                    },\n-                    \"summary\": \"Read Users\",\n-                    \"operationId\": \"read_users_users__get\",\n-                    \"parameters\": [\n-                        {\n-                            \"required\": False,\n-                            \"schema\": {\n-                                \"title\": \"Skip\",\n-                                \"type\": \"integer\",\n-                                \"default\": 0,\n-                            },\n-                            \"name\": \"skip\",\n-                            \"in\": \"query\",\n-                        },\n-                        {\n-                            \"required\": False,\n-                            \"schema\": {\n-                                \"title\": \"Limit\",\n-                                \"type\": \"integer\",\n-                                \"default\": 100,\n-                            },\n-                            \"name\": \"limit\",\n-                            \"in\": \"query\",\n-                        },\n-                    ],\n-                },\n-                \"post\": {\n-                    \"responses\": {\n-                        \"200\": {\n-                            \"description\": \"Successful Response\",\n-                            \"content\": {\n-                                \"application/json\": {\n-                                    \"schema\": {\"$ref\": \"#/components/schemas/User\"}\n-                                }\n-                            },\n-                        },\n-                        \"422\": {\n-                            \"description\": \"Validation Error\",\n-                            \"content\": {\n-                                \"application/json\": {\n-                                    \"schema\": {\n-                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n-                                    }\n-                                }\n-                            },\n-                        },\n-                    },\n-                    \"summary\": \"Create User\",\n-                    \"operationId\": \"create_user_users__post\",\n-                    \"requestBody\": {\n-                        \"content\": {\n-                            \"application/json\": {\n-                                \"schema\": {\"$ref\": \"#/components/schemas/UserCreate\"}\n-                            }\n-                        },\n-                        \"required\": True,\n-                    },\n-                },\n-            },\n-            \"/users/{user_id}\": {\n-                \"get\": {\n-                    \"responses\": {\n-                        \"200\": {\n-                            \"description\": \"Successful Response\",\n-                            \"content\": {\n-                                \"application/json\": {\n-                                    \"schema\": {\"$ref\": \"#/components/schemas/User\"}\n-                                }\n-                            },\n-                        },\n-                        \"422\": {\n-                            \"description\": \"Validation Error\",\n-                            \"content\": {\n-                                \"application/json\": {\n-                                    \"schema\": {\n-                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n-                                    }\n-                                }\n-                            },\n-                        },\n-                    },\n-                    \"summary\": \"Read User\",\n-                    \"operationId\": \"read_user_users__user_id__get\",\n-                    \"parameters\": [\n-                        {\n-                            \"required\": True,\n-                            \"schema\": {\"title\": \"User Id\", \"type\": \"integer\"},\n-                            \"name\": \"user_id\",\n-                            \"in\": \"path\",\n-                        }\n-                    ],\n-                }\n-            },\n-            \"/users/{user_id}/items/\": {\n-                \"post\": {\n-                    \"responses\": {\n-                        \"200\": {\n-                            \"description\": \"Successful Response\",\n-                            \"content\": {\n-                                \"application/json\": {\n-                                    \"schema\": {\"$ref\": \"#/components/schemas/Item\"}\n-                                }\n-                            },\n-                        },\n-                        \"422\": {\n-                            \"description\": \"Validation Error\",\n-                            \"content\": {\n-                                \"application/json\": {\n-                                    \"schema\": {\n-                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n-                                    }\n-                                }\n-                            },\n-                        },\n-                    },\n-                    \"summary\": \"Create Item For User\",\n-                    \"operationId\": \"create_item_for_user_users__user_id__items__post\",\n-                    \"parameters\": [\n-                        {\n-                            \"required\": True,\n-                            \"schema\": {\"title\": \"User Id\", \"type\": \"integer\"},\n-                            \"name\": \"user_id\",\n-                            \"in\": \"path\",\n-                        }\n-                    ],\n-                    \"requestBody\": {\n-                        \"content\": {\n-                            \"application/json\": {\n-                                \"schema\": {\"$ref\": \"#/components/schemas/ItemCreate\"}\n-                            }\n-                        },\n-                        \"required\": True,\n-                    },\n-                }\n-            },\n-            \"/items/\": {\n-                \"get\": {\n-                    \"responses\": {\n-                        \"200\": {\n-                            \"description\": \"Successful Response\",\n-                            \"content\": {\n-                                \"application/json\": {\n-                                    \"schema\": {\n-                                        \"title\": \"Response Read Items Items  Get\",\n-                                        \"type\": \"array\",\n-                                        \"items\": {\"$ref\": \"#/components/schemas/Item\"},\n-                                    }\n-                                }\n-                            },\n-                        },\n-                        \"422\": {\n-                            \"description\": \"Validation Error\",\n-                            \"content\": {\n-                                \"application/json\": {\n-                                    \"schema\": {\n-                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n-                                    }\n-                                }\n-                            },\n-                        },\n-                    },\n-                    \"summary\": \"Read Items\",\n-                    \"operationId\": \"read_items_items__get\",\n-                    \"parameters\": [\n-                        {\n-                            \"required\": False,\n-                            \"schema\": {\n-                                \"title\": \"Skip\",\n-                                \"type\": \"integer\",\n-                                \"default\": 0,\n-                            },\n-                            \"name\": \"skip\",\n-                            \"in\": \"query\",\n-                        },\n-                        {\n-                            \"required\": False,\n-                            \"schema\": {\n-                                \"title\": \"Limit\",\n-                                \"type\": \"integer\",\n-                                \"default\": 100,\n-                            },\n-                            \"name\": \"limit\",\n-                            \"in\": \"query\",\n-                        },\n-                    ],\n-                }\n-            },\n-        },\n-        \"components\": {\n-            \"schemas\": {\n-                \"ItemCreate\": {\n-                    \"title\": \"ItemCreate\",\n-                    \"required\": [\"title\"],\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"title\": {\"title\": \"Title\", \"type\": \"string\"},\n-                        \"description\": IsDict(\n-                            {\n-                                \"title\": \"Description\",\n-                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n-                            }\n-                        )\n-                        | IsDict(\n-                            # TODO: remove when deprecating Pydantic v1\n-                            {\"title\": \"Description\", \"type\": \"string\"}\n-                        ),\n-                    },\n-                },\n-                \"Item\": {\n-                    \"title\": \"Item\",\n-                    \"required\": [\"title\", \"id\", \"owner_id\"],\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"title\": {\"title\": \"Title\", \"type\": \"string\"},\n-                        \"description\": IsDict(\n-                            {\n-                                \"title\": \"Description\",\n-                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n-                            }\n-                        )\n-                        | IsDict(\n-                            # TODO: remove when deprecating Pydantic v1\n-                            {\"title\": \"Description\", \"type\": \"string\"},\n-                        ),\n-                        \"id\": {\"title\": \"Id\", \"type\": \"integer\"},\n-                        \"owner_id\": {\"title\": \"Owner Id\", \"type\": \"integer\"},\n-                    },\n-                },\n-                \"User\": {\n-                    \"title\": \"User\",\n-                    \"required\": [\"email\", \"id\", \"is_active\"],\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"email\": {\"title\": \"Email\", \"type\": \"string\"},\n-                        \"id\": {\"title\": \"Id\", \"type\": \"integer\"},\n-                        \"is_active\": {\"title\": \"Is Active\", \"type\": \"boolean\"},\n-                        \"items\": {\n-                            \"title\": \"Items\",\n-                            \"type\": \"array\",\n-                            \"items\": {\"$ref\": \"#/components/schemas/Item\"},\n-                            \"default\": [],\n-                        },\n-                    },\n-                },\n-                \"UserCreate\": {\n-                    \"title\": \"UserCreate\",\n-                    \"required\": [\"email\", \"password\"],\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"email\": {\"title\": \"Email\", \"type\": \"string\"},\n-                        \"password\": {\"title\": \"Password\", \"type\": \"string\"},\n-                    },\n-                },\n-                \"ValidationError\": {\n-                    \"title\": \"ValidationError\",\n-                    \"required\": [\"loc\", \"msg\", \"type\"],\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"loc\": {\n-                            \"title\": \"Location\",\n-                            \"type\": \"array\",\n-                            \"items\": {\n-                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n-                            },\n-                        },\n-                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n-                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n-                    },\n-                },\n-                \"HTTPValidationError\": {\n-                    \"title\": \"HTTPValidationError\",\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"detail\": {\n-                            \"title\": \"Detail\",\n-                            \"type\": \"array\",\n-                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n-                        }\n-                    },\n-                },\n-            }\n-        },\n-    }\n\n@@ -1,432 +0,0 @@\n-import importlib\n-import os\n-from pathlib import Path\n-\n-import pytest\n-from dirty_equals import IsDict\n-from fastapi.testclient import TestClient\n-\n-from ...utils import needs_py39, needs_pydanticv1\n-\n-\n-@pytest.fixture(scope=\"module\", name=\"client\")\n-def get_client(tmp_path_factory: pytest.TempPathFactory):\n-    tmp_path = tmp_path_factory.mktemp(\"data\")\n-    cwd = os.getcwd()\n-    os.chdir(tmp_path)\n-    test_db = Path(\"./sql_app.db\")\n-    if test_db.is_file():  # pragma: nocover\n-        test_db.unlink()\n-    # Import while creating the client to create the DB after starting the test session\n-    from docs_src.sql_databases.sql_app_py39 import main\n-\n-    # Ensure import side effects are re-executed\n-    importlib.reload(main)\n-    with TestClient(main.app) as c:\n-        yield c\n-    if test_db.is_file():  # pragma: nocover\n-        test_db.unlink()\n-    os.chdir(cwd)\n-\n-\n-@needs_py39\n-# TODO: pv2 add version with Pydantic v2\n-@needs_pydanticv1\n-def test_create_user(client):\n-    test_user = {\"email\": \"johndoe@example.com\", \"password\": \"secret\"}\n-    response = client.post(\"/users/\", json=test_user)\n-    assert response.status_code == 200, response.text\n-    data = response.json()\n-    assert test_user[\"email\"] == data[\"email\"]\n-    assert \"id\" in data\n-    response = client.post(\"/users/\", json=test_user)\n-    assert response.status_code == 400, response.text\n-\n-\n-@needs_py39\n-# TODO: pv2 add version with Pydantic v2\n-@needs_pydanticv1\n-def test_get_user(client):\n-    response = client.get(\"/users/1\")\n-    assert response.status_code == 200, response.text\n-    data = response.json()\n-    assert \"email\" in data\n-    assert \"id\" in data\n-\n-\n-@needs_py39\n-# TODO: pv2 add version with Pydantic v2\n-@needs_pydanticv1\n-def test_nonexistent_user(client):\n-    response = client.get(\"/users/999\")\n-    assert response.status_code == 404, response.text\n-\n-\n-@needs_py39\n-# TODO: pv2 add version with Pydantic v2\n-@needs_pydanticv1\n-def test_get_users(client):\n-    response = client.get(\"/users/\")\n-    assert response.status_code == 200, response.text\n-    data = response.json()\n-    assert \"email\" in data[0]\n-    assert \"id\" in data[0]\n-\n-\n-@needs_py39\n-# TODO: pv2 add Pydantic v2 version\n-@needs_pydanticv1\n-def test_create_item(client):\n-    item = {\"title\": \"Foo\", \"description\": \"Something that fights\"}\n-    response = client.post(\"/users/1/items/\", json=item)\n-    assert response.status_code == 200, response.text\n-    item_data = response.json()\n-    assert item[\"title\"] == item_data[\"title\"]\n-    assert item[\"description\"] == item_data[\"description\"]\n-    assert \"id\" in item_data\n-    assert \"owner_id\" in item_data\n-    response = client.get(\"/users/1\")\n-    assert response.status_code == 200, response.text\n-    user_data = response.json()\n-    item_to_check = [it for it in user_data[\"items\"] if it[\"id\"] == item_data[\"id\"]][0]\n-    assert item_to_check[\"title\"] == item[\"title\"]\n-    assert item_to_check[\"description\"] == item[\"description\"]\n-    response = client.get(\"/users/1\")\n-    assert response.status_code == 200, response.text\n-    user_data = response.json()\n-    item_to_check = [it for it in user_data[\"items\"] if it[\"id\"] == item_data[\"id\"]][0]\n-    assert item_to_check[\"title\"] == item[\"title\"]\n-    assert item_to_check[\"description\"] == item[\"description\"]\n-\n-\n-@needs_py39\n-# TODO: pv2 add Pydantic v2 version\n-@needs_pydanticv1\n-def test_read_items(client):\n-    response = client.get(\"/items/\")\n-    assert response.status_code == 200, response.text\n-    data = response.json()\n-    assert data\n-    first_item = data[0]\n-    assert \"title\" in first_item\n-    assert \"description\" in first_item\n-\n-\n-@needs_py39\n-# TODO: pv2 add version with Pydantic v2\n-@needs_pydanticv1\n-def test_openapi_schema(client: TestClient):\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\n-        \"openapi\": \"3.1.0\",\n-        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n-        \"paths\": {\n-            \"/users/\": {\n-                \"get\": {\n-                    \"responses\": {\n-                        \"200\": {\n-                            \"description\": \"Successful Response\",\n-                            \"content\": {\n-                                \"application/json\": {\n-                                    \"schema\": {\n-                                        \"title\": \"Response Read Users Users  Get\",\n-                                        \"type\": \"array\",\n-                                        \"items\": {\"$ref\": \"#/components/schemas/User\"},\n-                                    }\n-                                }\n-                            },\n-                        },\n-                        \"422\": {\n-                            \"description\": \"Validation Error\",\n-                            \"content\": {\n-                                \"application/json\": {\n-                                    \"schema\": {\n-                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n-                                    }\n-                                }\n-                            },\n-                        },\n-                    },\n-                    \"summary\": \"Read Users\",\n-                    \"operationId\": \"read_users_users__get\",\n-                    \"parameters\": [\n-                        {\n-                            \"required\": False,\n-                            \"schema\": {\n-                                \"title\": \"Skip\",\n-                                \"type\": \"integer\",\n-                                \"default\": 0,\n-                            },\n-                            \"name\": \"skip\",\n-                            \"in\": \"query\",\n-                        },\n-                        {\n-                            \"required\": False,\n-                            \"schema\": {\n-                                \"title\": \"Limit\",\n-                                \"type\": \"integer\",\n-                                \"default\": 100,\n-                            },\n-                            \"name\": \"limit\",\n-                            \"in\": \"query\",\n-                        },\n-                    ],\n-                },\n-                \"post\": {\n-                    \"responses\": {\n-                        \"200\": {\n-                            \"description\": \"Successful Response\",\n-                            \"content\": {\n-                                \"application/json\": {\n-                                    \"schema\": {\"$ref\": \"#/components/schemas/User\"}\n-                                }\n-                            },\n-                        },\n-                        \"422\": {\n-                            \"description\": \"Validation Error\",\n-                            \"content\": {\n-                                \"application/json\": {\n-                                    \"schema\": {\n-                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n-                                    }\n-                                }\n-                            },\n-                        },\n-                    },\n-                    \"summary\": \"Create User\",\n-                    \"operationId\": \"create_user_users__post\",\n-                    \"requestBody\": {\n-                        \"content\": {\n-                            \"application/json\": {\n-                                \"schema\": {\"$ref\": \"#/components/schemas/UserCreate\"}\n-                            }\n-                        },\n-                        \"required\": True,\n-                    },\n-                },\n-            },\n-            \"/users/{user_id}\": {\n-                \"get\": {\n-                    \"responses\": {\n-                        \"200\": {\n-                            \"description\": \"Successful Response\",\n-                            \"content\": {\n-                                \"application/json\": {\n-                                    \"schema\": {\"$ref\": \"#/components/schemas/User\"}\n-                                }\n-                            },\n-                        },\n-                        \"422\": {\n-                            \"description\": \"Validation Error\",\n-                            \"content\": {\n-                                \"application/json\": {\n-                                    \"schema\": {\n-                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n-                                    }\n-                                }\n-                            },\n-                        },\n-                    },\n-                    \"summary\": \"Read User\",\n-                    \"operationId\": \"read_user_users__user_id__get\",\n-                    \"parameters\": [\n-                        {\n-                            \"required\": True,\n-                            \"schema\": {\"title\": \"User Id\", \"type\": \"integer\"},\n-                            \"name\": \"user_id\",\n-                            \"in\": \"path\",\n-                        }\n-                    ],\n-                }\n-            },\n-            \"/users/{user_id}/items/\": {\n-                \"post\": {\n-                    \"responses\": {\n-                        \"200\": {\n-                            \"description\": \"Successful Response\",\n-                            \"content\": {\n-                                \"application/json\": {\n-                                    \"schema\": {\"$ref\": \"#/components/schemas/Item\"}\n-                                }\n-                            },\n-                        },\n-                        \"422\": {\n-                            \"description\": \"Validation Error\",\n-                            \"content\": {\n-                                \"application/json\": {\n-                                    \"schema\": {\n-                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n-                                    }\n-                                }\n-                            },\n-                        },\n-                    },\n-                    \"summary\": \"Create Item For User\",\n-                    \"operationId\": \"create_item_for_user_users__user_id__items__post\",\n-                    \"parameters\": [\n-                        {\n-                            \"required\": True,\n-                            \"schema\": {\"title\": \"User Id\", \"type\": \"integer\"},\n-                            \"name\": \"user_id\",\n-                            \"in\": \"path\",\n-                        }\n-                    ],\n-                    \"requestBody\": {\n-                        \"content\": {\n-                            \"application/json\": {\n-                                \"schema\": {\"$ref\": \"#/components/schemas/ItemCreate\"}\n-                            }\n-                        },\n-                        \"required\": True,\n-                    },\n-                }\n-            },\n-            \"/items/\": {\n-                \"get\": {\n-                    \"responses\": {\n-                        \"200\": {\n-                            \"description\": \"Successful Response\",\n-                            \"content\": {\n-                                \"application/json\": {\n-                                    \"schema\": {\n-                                        \"title\": \"Response Read Items Items  Get\",\n-                                        \"type\": \"array\",\n-                                        \"items\": {\"$ref\": \"#/components/schemas/Item\"},\n-                                    }\n-                                }\n-                            },\n-                        },\n-                        \"422\": {\n-                            \"description\": \"Validation Error\",\n-                            \"content\": {\n-                                \"application/json\": {\n-                                    \"schema\": {\n-                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n-                                    }\n-                                }\n-                            },\n-                        },\n-                    },\n-                    \"summary\": \"Read Items\",\n-                    \"operationId\": \"read_items_items__get\",\n-                    \"parameters\": [\n-                        {\n-                            \"required\": False,\n-                            \"schema\": {\n-                                \"title\": \"Skip\",\n-                                \"type\": \"integer\",\n-                                \"default\": 0,\n-                            },\n-                            \"name\": \"skip\",\n-                            \"in\": \"query\",\n-                        },\n-                        {\n-                            \"required\": False,\n-                            \"schema\": {\n-                                \"title\": \"Limit\",\n-                                \"type\": \"integer\",\n-                                \"default\": 100,\n-                            },\n-                            \"name\": \"limit\",\n-                            \"in\": \"query\",\n-                        },\n-                    ],\n-                }\n-            },\n-        },\n-        \"components\": {\n-            \"schemas\": {\n-                \"ItemCreate\": {\n-                    \"title\": \"ItemCreate\",\n-                    \"required\": [\"title\"],\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"title\": {\"title\": \"Title\", \"type\": \"string\"},\n-                        \"description\": IsDict(\n-                            {\n-                                \"title\": \"Description\",\n-                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n-                            }\n-                        )\n-                        | IsDict(\n-                            # TODO: remove when deprecating Pydantic v1\n-                            {\"title\": \"Description\", \"type\": \"string\"}\n-                        ),\n-                    },\n-                },\n-                \"Item\": {\n-                    \"title\": \"Item\",\n-                    \"required\": [\"title\", \"id\", \"owner_id\"],\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"title\": {\"title\": \"Title\", \"type\": \"string\"},\n-                        \"description\": IsDict(\n-                            {\n-                                \"title\": \"Description\",\n-                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n-                            }\n-                        )\n-                        | IsDict(\n-                            # TODO: remove when deprecating Pydantic v1\n-                            {\"title\": \"Description\", \"type\": \"string\"},\n-                        ),\n-                        \"id\": {\"title\": \"Id\", \"type\": \"integer\"},\n-                        \"owner_id\": {\"title\": \"Owner Id\", \"type\": \"integer\"},\n-                    },\n-                },\n-                \"User\": {\n-                    \"title\": \"User\",\n-                    \"required\": [\"email\", \"id\", \"is_active\"],\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"email\": {\"title\": \"Email\", \"type\": \"string\"},\n-                        \"id\": {\"title\": \"Id\", \"type\": \"integer\"},\n-                        \"is_active\": {\"title\": \"Is Active\", \"type\": \"boolean\"},\n-                        \"items\": {\n-                            \"title\": \"Items\",\n-                            \"type\": \"array\",\n-                            \"items\": {\"$ref\": \"#/components/schemas/Item\"},\n-                            \"default\": [],\n-                        },\n-                    },\n-                },\n-                \"UserCreate\": {\n-                    \"title\": \"UserCreate\",\n-                    \"required\": [\"email\", \"password\"],\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"email\": {\"title\": \"Email\", \"type\": \"string\"},\n-                        \"password\": {\"title\": \"Password\", \"type\": \"string\"},\n-                    },\n-                },\n-                \"ValidationError\": {\n-                    \"title\": \"ValidationError\",\n-                    \"required\": [\"loc\", \"msg\", \"type\"],\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"loc\": {\n-                            \"title\": \"Location\",\n-                            \"type\": \"array\",\n-                            \"items\": {\n-                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n-                            },\n-                        },\n-                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n-                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n-                    },\n-                },\n-                \"HTTPValidationError\": {\n-                    \"title\": \"HTTPValidationError\",\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"detail\": {\n-                            \"title\": \"Detail\",\n-                            \"type\": \"array\",\n-                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n-                        }\n-                    },\n-                },\n-            }\n-        },\n-    }\n\n@@ -1,27 +0,0 @@\n-import importlib\n-import os\n-from pathlib import Path\n-\n-import pytest\n-\n-from ...utils import needs_pydanticv1\n-\n-\n-# TODO: pv2 add version with Pydantic v2\n-@needs_pydanticv1\n-def test_testing_dbs(tmp_path_factory: pytest.TempPathFactory):\n-    tmp_path = tmp_path_factory.mktemp(\"data\")\n-    cwd = os.getcwd()\n-    os.chdir(tmp_path)\n-    test_db = Path(\"./test.db\")\n-    if test_db.is_file():  # pragma: nocover\n-        test_db.unlink()\n-    # Import while creating the client to create the DB after starting the test session\n-    from docs_src.sql_databases.sql_app.tests import test_sql_app\n-\n-    # Ensure import side effects are re-executed\n-    importlib.reload(test_sql_app)\n-    test_sql_app.test_create_user()\n-    if test_db.is_file():  # pragma: nocover\n-        test_db.unlink()\n-    os.chdir(cwd)\n\n@@ -1,28 +0,0 @@\n-import importlib\n-import os\n-from pathlib import Path\n-\n-import pytest\n-\n-from ...utils import needs_py310, needs_pydanticv1\n-\n-\n-@needs_py310\n-# TODO: pv2 add version with Pydantic v2\n-@needs_pydanticv1\n-def test_testing_dbs_py39(tmp_path_factory: pytest.TempPathFactory):\n-    tmp_path = tmp_path_factory.mktemp(\"data\")\n-    cwd = os.getcwd()\n-    os.chdir(tmp_path)\n-    test_db = Path(\"./test.db\")\n-    if test_db.is_file():  # pragma: nocover\n-        test_db.unlink()\n-    # Import while creating the client to create the DB after starting the test session\n-    from docs_src.sql_databases.sql_app_py310.tests import test_sql_app\n-\n-    # Ensure import side effects are re-executed\n-    importlib.reload(test_sql_app)\n-    test_sql_app.test_create_user()\n-    if test_db.is_file():  # pragma: nocover\n-        test_db.unlink()\n-    os.chdir(cwd)\n\n@@ -1,28 +0,0 @@\n-import importlib\n-import os\n-from pathlib import Path\n-\n-import pytest\n-\n-from ...utils import needs_py39, needs_pydanticv1\n-\n-\n-@needs_py39\n-# TODO: pv2 add version with Pydantic v2\n-@needs_pydanticv1\n-def test_testing_dbs_py39(tmp_path_factory: pytest.TempPathFactory):\n-    tmp_path = tmp_path_factory.mktemp(\"data\")\n-    cwd = os.getcwd()\n-    os.chdir(tmp_path)\n-    test_db = Path(\"./test.db\")\n-    if test_db.is_file():  # pragma: nocover\n-        test_db.unlink()\n-    # Import while creating the client to create the DB after starting the test session\n-    from docs_src.sql_databases.sql_app_py39.tests import test_sql_app\n-\n-    # Ensure import side effects are re-executed\n-    importlib.reload(test_sql_app)\n-    test_sql_app.test_create_user()\n-    if test_db.is_file():  # pragma: nocover\n-        test_db.unlink()\n-    os.chdir(cwd)\n\n@@ -0,0 +1,373 @@\n+import importlib\n+import warnings\n+\n+import pytest\n+from dirty_equals import IsDict, IsInt\n+from fastapi.testclient import TestClient\n+from inline_snapshot import snapshot\n+from sqlalchemy import StaticPool\n+from sqlmodel import SQLModel, create_engine\n+from sqlmodel.main import default_registry\n+\n+from tests.utils import needs_py39, needs_py310\n+\n+\n+def clear_sqlmodel():\n+    # Clear the tables in the metadata for the default base model\n+    SQLModel.metadata.clear()\n+    # Clear the Models associated with the registry, to avoid warnings\n+    default_registry.dispose()\n+\n+\n+@pytest.fixture(\n+    name=\"client\",\n+    params=[\n+        \"tutorial001\",\n+        pytest.param(\"tutorial001_py39\", marks=needs_py39),\n+        pytest.param(\"tutorial001_py310\", marks=needs_py310),\n+        \"tutorial001_an\",\n+        pytest.param(\"tutorial001_an_py39\", marks=needs_py39),\n+        pytest.param(\"tutorial001_an_py310\", marks=needs_py310),\n+    ],\n+)\n+def get_client(request: pytest.FixtureRequest):\n+    clear_sqlmodel()\n+    # TODO: remove when updating SQL tutorial to use new lifespan API\n+    with warnings.catch_warnings(record=True):\n+        warnings.simplefilter(\"always\")\n+        mod = importlib.import_module(f\"docs_src.sql_databases.{request.param}\")\n+        clear_sqlmodel()\n+        importlib.reload(mod)\n+    mod.sqlite_url = \"sqlite://\"\n+    mod.engine = create_engine(\n+        mod.sqlite_url, connect_args={\"check_same_thread\": False}, poolclass=StaticPool\n+    )\n+\n+    with TestClient(mod.app) as c:\n+        yield c\n+\n+\n+def test_crud_app(client: TestClient):\n+    # TODO: this warns that SQLModel.from_orm is deprecated in Pydantic v1, refactor\n+    # this if using obj.model_validate becomes independent of Pydantic v2\n+    with warnings.catch_warnings(record=True):\n+        warnings.simplefilter(\"always\")\n+        # No heroes before creating\n+        response = client.get(\"heroes/\")\n+        assert response.status_code == 200, response.text\n+        assert response.json() == []\n+\n+        # Create a hero\n+        response = client.post(\n+            \"/heroes/\",\n+            json={\n+                \"id\": 999,\n+                \"name\": \"Dead Pond\",\n+                \"age\": 30,\n+                \"secret_name\": \"Dive Wilson\",\n+            },\n+        )\n+        assert response.status_code == 200, response.text\n+        assert response.json() == snapshot(\n+            {\"age\": 30, \"secret_name\": \"Dive Wilson\", \"id\": 999, \"name\": \"Dead Pond\"}\n+        )\n+\n+        # Read a hero\n+        hero_id = response.json()[\"id\"]\n+        response = client.get(f\"/heroes/{hero_id}\")\n+        assert response.status_code == 200, response.text\n+        assert response.json() == snapshot(\n+            {\"name\": \"Dead Pond\", \"age\": 30, \"id\": 999, \"secret_name\": \"Dive Wilson\"}\n+        )\n+\n+        # Read all heroes\n+        # Create more heroes first\n+        response = client.post(\n+            \"/heroes/\",\n+            json={\"name\": \"Spider-Boy\", \"age\": 18, \"secret_name\": \"Pedro Parqueador\"},\n+        )\n+        assert response.status_code == 200, response.text\n+        response = client.post(\n+            \"/heroes/\", json={\"name\": \"Rusty-Man\", \"secret_name\": \"Tommy Sharp\"}\n+        )\n+        assert response.status_code == 200, response.text\n+\n+        response = client.get(\"/heroes/\")\n+        assert response.status_code == 200, response.text\n+        assert response.json() == snapshot(\n+            [\n+                {\n+                    \"name\": \"Dead Pond\",\n+                    \"age\": 30,\n+                    \"id\": IsInt(),\n+                    \"secret_name\": \"Dive Wilson\",\n+                },\n+                {\n+                    \"name\": \"Spider-Boy\",\n+                    \"age\": 18,\n+                    \"id\": IsInt(),\n+                    \"secret_name\": \"Pedro Parqueador\",\n+                },\n+                {\n+                    \"name\": \"Rusty-Man\",\n+                    \"age\": None,\n+                    \"id\": IsInt(),\n+                    \"secret_name\": \"Tommy Sharp\",\n+                },\n+            ]\n+        )\n+\n+        response = client.get(\"/heroes/?offset=1&limit=1\")\n+        assert response.status_code == 200, response.text\n+        assert response.json() == snapshot(\n+            [\n+                {\n+                    \"name\": \"Spider-Boy\",\n+                    \"age\": 18,\n+                    \"id\": IsInt(),\n+                    \"secret_name\": \"Pedro Parqueador\",\n+                }\n+            ]\n+        )\n+\n+        # Delete a hero\n+        response = client.delete(f\"/heroes/{hero_id}\")\n+        assert response.status_code == 200, response.text\n+        assert response.json() == snapshot({\"ok\": True})\n+\n+        response = client.get(f\"/heroes/{hero_id}\")\n+        assert response.status_code == 404, response.text\n+\n+        response = client.delete(f\"/heroes/{hero_id}\")\n+        assert response.status_code == 404, response.text\n+        assert response.json() == snapshot({\"detail\": \"Hero not found\"})\n+\n+\n+def test_openapi_schema(client: TestClient):\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == snapshot(\n+        {\n+            \"openapi\": \"3.1.0\",\n+            \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n+            \"paths\": {\n+                \"/heroes/\": {\n+                    \"post\": {\n+                        \"summary\": \"Create Hero\",\n+                        \"operationId\": \"create_hero_heroes__post\",\n+                        \"requestBody\": {\n+                            \"required\": True,\n+                            \"content\": {\n+                                \"application/json\": {\n+                                    \"schema\": {\"$ref\": \"#/components/schemas/Hero\"}\n+                                }\n+                            },\n+                        },\n+                        \"responses\": {\n+                            \"200\": {\n+                                \"description\": \"Successful Response\",\n+                                \"content\": {\n+                                    \"application/json\": {\n+                                        \"schema\": {\"$ref\": \"#/components/schemas/Hero\"}\n+                                    }\n+                                },\n+                            },\n+                            \"422\": {\n+                                \"description\": \"Validation Error\",\n+                                \"content\": {\n+                                    \"application/json\": {\n+                                        \"schema\": {\n+                                            \"$ref\": \"#/components/schemas/HTTPValidationError\"\n+                                        }\n+                                    }\n+                                },\n+                            },\n+                        },\n+                    },\n+                    \"get\": {\n+                        \"summary\": \"Read Heroes\",\n+                        \"operationId\": \"read_heroes_heroes__get\",\n+                        \"parameters\": [\n+                            {\n+                                \"name\": \"offset\",\n+                                \"in\": \"query\",\n+                                \"required\": False,\n+                                \"schema\": {\n+                                    \"type\": \"integer\",\n+                                    \"default\": 0,\n+                                    \"title\": \"Offset\",\n+                                },\n+                            },\n+                            {\n+                                \"name\": \"limit\",\n+                                \"in\": \"query\",\n+                                \"required\": False,\n+                                \"schema\": {\n+                                    \"type\": \"integer\",\n+                                    \"maximum\": 100,\n+                                    \"default\": 100,\n+                                    \"title\": \"Limit\",\n+                                },\n+                            },\n+                        ],\n+                        \"responses\": {\n+                            \"200\": {\n+                                \"description\": \"Successful Response\",\n+                                \"content\": {\n+                                    \"application/json\": {\n+                                        \"schema\": {\n+                                            \"type\": \"array\",\n+                                            \"items\": {\n+                                                \"$ref\": \"#/components/schemas/Hero\"\n+                                            },\n+                                            \"title\": \"Response Read Heroes Heroes  Get\",\n+                                        }\n+                                    }\n+                                },\n+                            },\n+                            \"422\": {\n+                                \"description\": \"Validation Error\",\n+                                \"content\": {\n+                                    \"application/json\": {\n+                                        \"schema\": {\n+                                            \"$ref\": \"#/components/schemas/HTTPValidationError\"\n+                                        }\n+                                    }\n+                                },\n+                            },\n+                        },\n+                    },\n+                },\n+                \"/heroes/{hero_id}\": {\n+                    \"get\": {\n+                        \"summary\": \"Read Hero\",\n+                        \"operationId\": \"read_hero_heroes__hero_id__get\",\n+                        \"parameters\": [\n+                            {\n+                                \"name\": \"hero_id\",\n+                                \"in\": \"path\",\n+                                \"required\": True,\n+                                \"schema\": {\"type\": \"integer\", \"title\": \"Hero Id\"},\n+                            }\n+                        ],\n+                        \"responses\": {\n+                            \"200\": {\n+                                \"description\": \"Successful Response\",\n+                                \"content\": {\n+                                    \"application/json\": {\n+                                        \"schema\": {\"$ref\": \"#/components/schemas/Hero\"}\n+                                    }\n+                                },\n+                            },\n+                            \"422\": {\n+                                \"description\": \"Validation Error\",\n+                                \"content\": {\n+                                    \"application/json\": {\n+                                        \"schema\": {\n+                                            \"$ref\": \"#/components/schemas/HTTPValidationError\"\n+                                        }\n+                                    }\n+                                },\n+                            },\n+                        },\n+                    },\n+                    \"delete\": {\n+                        \"summary\": \"Delete Hero\",\n+                        \"operationId\": \"delete_hero_heroes__hero_id__delete\",\n+                        \"parameters\": [\n+                            {\n+                                \"name\": \"hero_id\",\n+                                \"in\": \"path\",\n+                                \"required\": True,\n+                                \"schema\": {\"type\": \"integer\", \"title\": \"Hero Id\"},\n+                            }\n+                        ],\n+                        \"responses\": {\n+                            \"200\": {\n+                                \"description\": \"Successful Response\",\n+                                \"content\": {\"application/json\": {\"schema\": {}}},\n+                            },\n+                            \"422\": {\n+                                \"description\": \"Validation Error\",\n+                                \"content\": {\n+                                    \"application/json\": {\n+                                        \"schema\": {\n+                                            \"$ref\": \"#/components/schemas/HTTPValidationError\"\n+                                        }\n+                                    }\n+                                },\n+                            },\n+                        },\n+                    },\n+                },\n+            },\n+            \"components\": {\n+                \"schemas\": {\n+                    \"HTTPValidationError\": {\n+                        \"properties\": {\n+                            \"detail\": {\n+                                \"items\": {\n+                                    \"$ref\": \"#/components/schemas/ValidationError\"\n+                                },\n+                                \"type\": \"array\",\n+                                \"title\": \"Detail\",\n+                            }\n+                        },\n+                        \"type\": \"object\",\n+                        \"title\": \"HTTPValidationError\",\n+                    },\n+                    \"Hero\": {\n+                        \"properties\": {\n+                            \"id\": IsDict(\n+                                {\n+                                    \"anyOf\": [{\"type\": \"integer\"}, {\"type\": \"null\"}],\n+                                    \"title\": \"Id\",\n+                                }\n+                            )\n+                            | IsDict(\n+                                # TODO: remove when deprecating Pydantic v1\n+                                {\n+                                    \"type\": \"integer\",\n+                                    \"title\": \"Id\",\n+                                }\n+                            ),\n+                            \"name\": {\"type\": \"string\", \"title\": \"Name\"},\n+                            \"age\": IsDict(\n+                                {\n+                                    \"anyOf\": [{\"type\": \"integer\"}, {\"type\": \"null\"}],\n+                                    \"title\": \"Age\",\n+                                }\n+                            )\n+                            | IsDict(\n+                                # TODO: remove when deprecating Pydantic v1\n+                                {\n+                                    \"type\": \"integer\",\n+                                    \"title\": \"Age\",\n+                                }\n+                            ),\n+                            \"secret_name\": {\"type\": \"string\", \"title\": \"Secret Name\"},\n+                        },\n+                        \"type\": \"object\",\n+                        \"required\": [\"name\", \"secret_name\"],\n+                        \"title\": \"Hero\",\n+                    },\n+                    \"ValidationError\": {\n+                        \"properties\": {\n+                            \"loc\": {\n+                                \"items\": {\n+                                    \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n+                                },\n+                                \"type\": \"array\",\n+                                \"title\": \"Location\",\n+                            },\n+                            \"msg\": {\"type\": \"string\", \"title\": \"Message\"},\n+                            \"type\": {\"type\": \"string\", \"title\": \"Error Type\"},\n+                        },\n+                        \"type\": \"object\",\n+                        \"required\": [\"loc\", \"msg\", \"type\"],\n+                        \"title\": \"ValidationError\",\n+                    },\n+                }\n+            },\n+        }\n+    )\n\n@@ -0,0 +1,481 @@\n+import importlib\n+import warnings\n+\n+import pytest\n+from dirty_equals import IsDict, IsInt\n+from fastapi.testclient import TestClient\n+from inline_snapshot import snapshot\n+from sqlalchemy import StaticPool\n+from sqlmodel import SQLModel, create_engine\n+from sqlmodel.main import default_registry\n+\n+from tests.utils import needs_py39, needs_py310\n+\n+\n+def clear_sqlmodel():\n+    # Clear the tables in the metadata for the default base model\n+    SQLModel.metadata.clear()\n+    # Clear the Models associated with the registry, to avoid warnings\n+    default_registry.dispose()\n+\n+\n+@pytest.fixture(\n+    name=\"client\",\n+    params=[\n+        \"tutorial002\",\n+        pytest.param(\"tutorial002_py39\", marks=needs_py39),\n+        pytest.param(\"tutorial002_py310\", marks=needs_py310),\n+        \"tutorial002_an\",\n+        pytest.param(\"tutorial002_an_py39\", marks=needs_py39),\n+        pytest.param(\"tutorial002_an_py310\", marks=needs_py310),\n+    ],\n+)\n+def get_client(request: pytest.FixtureRequest):\n+    clear_sqlmodel()\n+    # TODO: remove when updating SQL tutorial to use new lifespan API\n+    with warnings.catch_warnings(record=True):\n+        warnings.simplefilter(\"always\")\n+        mod = importlib.import_module(f\"docs_src.sql_databases.{request.param}\")\n+        clear_sqlmodel()\n+        importlib.reload(mod)\n+    mod.sqlite_url = \"sqlite://\"\n+    mod.engine = create_engine(\n+        mod.sqlite_url, connect_args={\"check_same_thread\": False}, poolclass=StaticPool\n+    )\n+\n+    with TestClient(mod.app) as c:\n+        yield c\n+\n+\n+def test_crud_app(client: TestClient):\n+    # TODO: this warns that SQLModel.from_orm is deprecated in Pydantic v1, refactor\n+    # this if using obj.model_validate becomes independent of Pydantic v2\n+    with warnings.catch_warnings(record=True):\n+        warnings.simplefilter(\"always\")\n+        # No heroes before creating\n+        response = client.get(\"heroes/\")\n+        assert response.status_code == 200, response.text\n+        assert response.json() == []\n+\n+        # Create a hero\n+        response = client.post(\n+            \"/heroes/\",\n+            json={\n+                \"id\": 9000,\n+                \"name\": \"Dead Pond\",\n+                \"age\": 30,\n+                \"secret_name\": \"Dive Wilson\",\n+            },\n+        )\n+        assert response.status_code == 200, response.text\n+        assert response.json() == snapshot(\n+            {\"age\": 30, \"id\": IsInt(), \"name\": \"Dead Pond\"}\n+        )\n+        assert (\n+            response.json()[\"id\"] != 9000\n+        ), \"The ID should be generated by the database\"\n+\n+        # Read a hero\n+        hero_id = response.json()[\"id\"]\n+        response = client.get(f\"/heroes/{hero_id}\")\n+        assert response.status_code == 200, response.text\n+        assert response.json() == snapshot(\n+            {\"name\": \"Dead Pond\", \"age\": 30, \"id\": IsInt()}\n+        )\n+\n+        # Read all heroes\n+        # Create more heroes first\n+        response = client.post(\n+            \"/heroes/\",\n+            json={\"name\": \"Spider-Boy\", \"age\": 18, \"secret_name\": \"Pedro Parqueador\"},\n+        )\n+        assert response.status_code == 200, response.text\n+        response = client.post(\n+            \"/heroes/\", json={\"name\": \"Rusty-Man\", \"secret_name\": \"Tommy Sharp\"}\n+        )\n+        assert response.status_code == 200, response.text\n+\n+        response = client.get(\"/heroes/\")\n+        assert response.status_code == 200, response.text\n+        assert response.json() == snapshot(\n+            [\n+                {\"name\": \"Dead Pond\", \"age\": 30, \"id\": IsInt()},\n+                {\"name\": \"Spider-Boy\", \"age\": 18, \"id\": IsInt()},\n+                {\"name\": \"Rusty-Man\", \"age\": None, \"id\": IsInt()},\n+            ]\n+        )\n+\n+        response = client.get(\"/heroes/?offset=1&limit=1\")\n+        assert response.status_code == 200, response.text\n+        assert response.json() == snapshot(\n+            [{\"name\": \"Spider-Boy\", \"age\": 18, \"id\": IsInt()}]\n+        )\n+\n+        # Update a hero\n+        response = client.patch(\n+            f\"/heroes/{hero_id}\", json={\"name\": \"Dog Pond\", \"age\": None}\n+        )\n+        assert response.status_code == 200, response.text\n+        assert response.json() == snapshot(\n+            {\"name\": \"Dog Pond\", \"age\": None, \"id\": hero_id}\n+        )\n+\n+        # Get updated hero\n+        response = client.get(f\"/heroes/{hero_id}\")\n+        assert response.status_code == 200, response.text\n+        assert response.json() == snapshot(\n+            {\"name\": \"Dog Pond\", \"age\": None, \"id\": hero_id}\n+        )\n+\n+        # Delete a hero\n+        response = client.delete(f\"/heroes/{hero_id}\")\n+        assert response.status_code == 200, response.text\n+        assert response.json() == snapshot({\"ok\": True})\n+\n+        # The hero is no longer found\n+        response = client.get(f\"/heroes/{hero_id}\")\n+        assert response.status_code == 404, response.text\n+\n+        # Delete a hero that does not exist\n+        response = client.delete(f\"/heroes/{hero_id}\")\n+        assert response.status_code == 404, response.text\n+        assert response.json() == snapshot({\"detail\": \"Hero not found\"})\n+\n+        # Update a hero that does not exist\n+        response = client.patch(f\"/heroes/{hero_id}\", json={\"name\": \"Dog Pond\"})\n+        assert response.status_code == 404, response.text\n+        assert response.json() == snapshot({\"detail\": \"Hero not found\"})\n+\n+\n+def test_openapi_schema(client: TestClient):\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == snapshot(\n+        {\n+            \"openapi\": \"3.1.0\",\n+            \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n+            \"paths\": {\n+                \"/heroes/\": {\n+                    \"post\": {\n+                        \"summary\": \"Create Hero\",\n+                        \"operationId\": \"create_hero_heroes__post\",\n+                        \"requestBody\": {\n+                            \"required\": True,\n+                            \"content\": {\n+                                \"application/json\": {\n+                                    \"schema\": {\n+                                        \"$ref\": \"#/components/schemas/HeroCreate\"\n+                                    }\n+                                }\n+                            },\n+                        },\n+                        \"responses\": {\n+                            \"200\": {\n+                                \"description\": \"Successful Response\",\n+                                \"content\": {\n+                                    \"application/json\": {\n+                                        \"schema\": {\n+                                            \"$ref\": \"#/components/schemas/HeroPublic\"\n+                                        }\n+                                    }\n+                                },\n+                            },\n+                            \"422\": {\n+                                \"description\": \"Validation Error\",\n+                                \"content\": {\n+                                    \"application/json\": {\n+                                        \"schema\": {\n+                                            \"$ref\": \"#/components/schemas/HTTPValidationError\"\n+                                        }\n+                                    }\n+                                },\n+                            },\n+                        },\n+                    },\n+                    \"get\": {\n+                        \"summary\": \"Read Heroes\",\n+                        \"operationId\": \"read_heroes_heroes__get\",\n+                        \"parameters\": [\n+                            {\n+                                \"name\": \"offset\",\n+                                \"in\": \"query\",\n+                                \"required\": False,\n+                                \"schema\": {\n+                                    \"type\": \"integer\",\n+                                    \"default\": 0,\n+                                    \"title\": \"Offset\",\n+                                },\n+                            },\n+                            {\n+                                \"name\": \"limit\",\n+                                \"in\": \"query\",\n+                                \"required\": False,\n+                                \"schema\": {\n+                                    \"type\": \"integer\",\n+                                    \"maximum\": 100,\n+                                    \"default\": 100,\n+                                    \"title\": \"Limit\",\n+                                },\n+                            },\n+                        ],\n+                        \"responses\": {\n+                            \"200\": {\n+                                \"description\": \"Successful Response\",\n+                                \"content\": {\n+                                    \"application/json\": {\n+                                        \"schema\": {\n+                                            \"type\": \"array\",\n+                                            \"items\": {\n+                                                \"$ref\": \"#/components/schemas/HeroPublic\"\n+                                            },\n+                                            \"title\": \"Response Read Heroes Heroes  Get\",\n+                                        }\n+                                    }\n+                                },\n+                            },\n+                            \"422\": {\n+                                \"description\": \"Validation Error\",\n+                                \"content\": {\n+                                    \"application/json\": {\n+                                        \"schema\": {\n+                                            \"$ref\": \"#/components/schemas/HTTPValidationError\"\n+                                        }\n+                                    }\n+                                },\n+                            },\n+                        },\n+                    },\n+                },\n+                \"/heroes/{hero_id}\": {\n+                    \"get\": {\n+                        \"summary\": \"Read Hero\",\n+                        \"operationId\": \"read_hero_heroes__hero_id__get\",\n+                        \"parameters\": [\n+                            {\n+                                \"name\": \"hero_id\",\n+                                \"in\": \"path\",\n+                                \"required\": True,\n+                                \"schema\": {\"type\": \"integer\", \"title\": \"Hero Id\"},\n+                            }\n+                        ],\n+                        \"responses\": {\n+                            \"200\": {\n+                                \"description\": \"Successful Response\",\n+                                \"content\": {\n+                                    \"application/json\": {\n+                                        \"schema\": {\n+                                            \"$ref\": \"#/components/schemas/HeroPublic\"\n+                                        }\n+                                    }\n+                                },\n+                            },\n+                            \"422\": {\n+                                \"description\": \"Validation Error\",\n+                                \"content\": {\n+                                    \"application/json\": {\n+                                        \"schema\": {\n+                                            \"$ref\": \"#/components/schemas/HTTPValidationError\"\n+                                        }\n+                                    }\n+                                },\n+                            },\n+                        },\n+                    },\n+                    \"patch\": {\n+                        \"summary\": \"Update Hero\",\n+                        \"operationId\": \"update_hero_heroes__hero_id__patch\",\n+                        \"parameters\": [\n+                            {\n+                                \"name\": \"hero_id\",\n+                                \"in\": \"path\",\n+                                \"required\": True,\n+                                \"schema\": {\"type\": \"integer\", \"title\": \"Hero Id\"},\n+                            }\n+                        ],\n+                        \"requestBody\": {\n+                            \"required\": True,\n+                            \"content\": {\n+                                \"application/json\": {\n+                                    \"schema\": {\n+                                        \"$ref\": \"#/components/schemas/HeroUpdate\"\n+                                    }\n+                                }\n+                            },\n+                        },\n+                        \"responses\": {\n+                            \"200\": {\n+                                \"description\": \"Successful Response\",\n+                                \"content\": {\n+                                    \"application/json\": {\n+                                        \"schema\": {\n+                                            \"$ref\": \"#/components/schemas/HeroPublic\"\n+                                        }\n+                                    }\n+                                },\n+                            },\n+                            \"422\": {\n+                                \"description\": \"Validation Error\",\n+                                \"content\": {\n+                                    \"application/json\": {\n+                                        \"schema\": {\n+                                            \"$ref\": \"#/components/schemas/HTTPValidationError\"\n+                                        }\n+                                    }\n+                                },\n+                            },\n+                        },\n+                    },\n+                    \"delete\": {\n+                        \"summary\": \"Delete Hero\",\n+                        \"operationId\": \"delete_hero_heroes__hero_id__delete\",\n+                        \"parameters\": [\n+                            {\n+                                \"name\": \"hero_id\",\n+                                \"in\": \"path\",\n+                                \"required\": True,\n+                                \"schema\": {\"type\": \"integer\", \"title\": \"Hero Id\"},\n+                            }\n+                        ],\n+                        \"responses\": {\n+                            \"200\": {\n+                                \"description\": \"Successful Response\",\n+                                \"content\": {\"application/json\": {\"schema\": {}}},\n+                            },\n+                            \"422\": {\n+                                \"description\": \"Validation Error\",\n+                                \"content\": {\n+                                    \"application/json\": {\n+                                        \"schema\": {\n+                                            \"$ref\": \"#/components/schemas/HTTPValidationError\"\n+                                        }\n+                                    }\n+                                },\n+                            },\n+                        },\n+                    },\n+                },\n+            },\n+            \"components\": {\n+                \"schemas\": {\n+                    \"HTTPValidationError\": {\n+                        \"properties\": {\n+                            \"detail\": {\n+                                \"items\": {\n+                                    \"$ref\": \"#/components/schemas/ValidationError\"\n+                                },\n+                                \"type\": \"array\",\n+                                \"title\": \"Detail\",\n+                            }\n+                        },\n+                        \"type\": \"object\",\n+                        \"title\": \"HTTPValidationError\",\n+                    },\n+                    \"HeroCreate\": {\n+                        \"properties\": {\n+                            \"name\": {\"type\": \"string\", \"title\": \"Name\"},\n+                            \"age\": IsDict(\n+                                {\n+                                    \"anyOf\": [{\"type\": \"integer\"}, {\"type\": \"null\"}],\n+                                    \"title\": \"Age\",\n+                                }\n+                            )\n+                            | IsDict(\n+                                # TODO: remove when deprecating Pydantic v1\n+                                {\n+                                    \"type\": \"integer\",\n+                                    \"title\": \"Age\",\n+                                }\n+                            ),\n+                            \"secret_name\": {\"type\": \"string\", \"title\": \"Secret Name\"},\n+                        },\n+                        \"type\": \"object\",\n+                        \"required\": [\"name\", \"secret_name\"],\n+                        \"title\": \"HeroCreate\",\n+                    },\n+                    \"HeroPublic\": {\n+                        \"properties\": {\n+                            \"name\": {\"type\": \"string\", \"title\": \"Name\"},\n+                            \"age\": IsDict(\n+                                {\n+                                    \"anyOf\": [{\"type\": \"integer\"}, {\"type\": \"null\"}],\n+                                    \"title\": \"Age\",\n+                                }\n+                            )\n+                            | IsDict(\n+                                # TODO: remove when deprecating Pydantic v1\n+                                {\n+                                    \"type\": \"integer\",\n+                                    \"title\": \"Age\",\n+                                }\n+                            ),\n+                            \"id\": {\"type\": \"integer\", \"title\": \"Id\"},\n+                        },\n+                        \"type\": \"object\",\n+                        \"required\": [\"name\", \"id\"],\n+                        \"title\": \"HeroPublic\",\n+                    },\n+                    \"HeroUpdate\": {\n+                        \"properties\": {\n+                            \"name\": IsDict(\n+                                {\n+                                    \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n+                                    \"title\": \"Name\",\n+                                }\n+                            )\n+                            | IsDict(\n+                                # TODO: remove when deprecating Pydantic v1\n+                                {\n+                                    \"type\": \"string\",\n+                                    \"title\": \"Name\",\n+                                }\n+                            ),\n+                            \"age\": IsDict(\n+                                {\n+                                    \"anyOf\": [{\"type\": \"integer\"}, {\"type\": \"null\"}],\n+                                    \"title\": \"Age\",\n+                                }\n+                            )\n+                            | IsDict(\n+                                # TODO: remove when deprecating Pydantic v1\n+                                {\n+                                    \"type\": \"integer\",\n+                                    \"title\": \"Age\",\n+                                }\n+                            ),\n+                            \"secret_name\": IsDict(\n+                                {\n+                                    \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n+                                    \"title\": \"Secret Name\",\n+                                }\n+                            )\n+                            | IsDict(\n+                                # TODO: remove when deprecating Pydantic v1\n+                                {\n+                                    \"type\": \"string\",\n+                                    \"title\": \"Secret Name\",\n+                                }\n+                            ),\n+                        },\n+                        \"type\": \"object\",\n+                        \"title\": \"HeroUpdate\",\n+                    },\n+                    \"ValidationError\": {\n+                        \"properties\": {\n+                            \"loc\": {\n+                                \"items\": {\n+                                    \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n+                                },\n+                                \"type\": \"array\",\n+                                \"title\": \"Location\",\n+                            },\n+                            \"msg\": {\"type\": \"string\", \"title\": \"Message\"},\n+                            \"type\": {\"type\": \"string\", \"title\": \"Error Type\"},\n+                        },\n+                        \"type\": \"object\",\n+                        \"required\": [\"loc\", \"msg\", \"type\"],\n+                        \"title\": \"ValidationError\",\n+                    },\n+                }\n+            },\n+        }\n+    )\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
