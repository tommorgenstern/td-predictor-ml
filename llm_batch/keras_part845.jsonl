{"custom_id": "keras#d47dc6b8fecef93f1f762e154710eb956385f82e", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 84 | Lines Deleted: 84 | Files Changed: 1 | Hunks: 35 | Methods Changed: 24 | Complexity Δ (Sum/Max): -3/0 | Churn Δ: 168 | Churn Cumulative: 385 | Contributors (this commit): 2 | Commits (past 90d): 2 | Contributors (cumulative): 2 | DMM Complexity: 0.0\n\nDIFF:\n@@ -1,10 +1,13 @@\n+import collections\n import json\n+import pprint\n import zipfile\n \n import h5py\n \n-from keras.src.saving import deserialize_keras_object\n+from keras.src.saving import saving_lib\n from keras.src.saving.saving_lib import H5IOStore\n+from keras.src.utils import io_utils\n \n try:\n     import IPython as ipython\n@@ -12,32 +15,60 @@ except ImportError:\n     ipython = None\n \n \n-def check_ipython():\n-    return ipython is not None\n+def is_ipython_notebook():\n+    \"\"\"Checks if the code is being executed in a notebook.\"\"\"\n+    try:\n+        from IPython import get_ipython\n \n-\n-_CONFIG_FILENAME = \"config.json\"\n-_METADATA_FILENAME = \"metadata.json\"\n-_VARS_FNAME = \"model.weights\"\n+        # Check if an active IPython shell exists.\n+        if get_ipython() is not None:\n+            return True\n+        return False\n+    except ImportError:\n+        return False\n \n \n class KerasFileEditor:\n-    def __init__(self, filepath, reference_model=None, custom_objects=None):\n+    def __init__(\n+        self,\n+        filepath,\n+        reference_model=None,\n+        custom_objects=None,\n+        safe_mode=True,\n+    ):\n         self.filepath = filepath\n         self.custom_objects = custom_objects\n         self.metadata = None\n-        self.reference_model = None\n         self.config = None\n+        self.model = None\n+        self.reference_model = reference_model\n \n         if filepath.endswith(\".keras\"):\n-            self._init_for_keras_format(\n-                custom_objects, filepath, reference_model\n-            )\n+            zf = zipfile.ZipFile(filepath, \"r\")\n             weights_store = H5IOStore(\n-                _VARS_FNAME + \".h5\",\n-                archive=zipfile.ZipFile(filepath, \"r\"),\n+                saving_lib._VARS_FNAME + \".h5\",\n+                archive=zf,\n                 mode=\"r\",\n             )\n+            with zf.open(saving_lib._CONFIG_FILENAME, \"r\") as f:\n+                config_json = f.read()\n+            with zf.open(saving_lib._METADATA_FILENAME, \"r\") as f:\n+                metadata_json = f.read()\n+            self.config = json.loads(config_json)\n+            self.metadata = json.loads(metadata_json)\n+\n+            try:\n+                self.model = saving_lib.load_model(\n+                    filepath,\n+                    custom_objects=custom_objects,\n+                    compile=True,\n+                    safe_mode=safe_mode,\n+                )\n+            except Exception as e:\n+                io_utils.print_msg(\n+                    f\"Model file could not be loaded. Error: {e}\"\n+                )\n+\n         elif filepath.endswith(\".weights.h5\"):\n             weights_store = H5IOStore(filepath, mode=\"r\")\n         else:\n@@ -47,75 +78,54 @@ class KerasFileEditor:\n                 f\"Received: filepath={filepath}\"\n             )\n \n-        def _extract_values(data):\n-            result = {}\n+        self.weights_dict = self._extract_weights_from_store(\n+            weights_store.h5_file\n+        )\n+\n+    def _extract_weights_from_store(self, data):\n+        result = collections.OrderedDict()\n         for key in data.keys():\n             value = data[key]\n-                if isinstance(value, h5py.Group) and len(value) == 0:\n+            if isinstance(value, h5py.Group):\n+                if len(value) == 0:\n                     continue\n+                if \"vars\" in value.keys() and len(value[\"vars\"]) == 0:\n+                    continue\n+\n             if hasattr(value, \"keys\"):\n                 if \"vars\" in value.keys():\n-                        result[key] = _extract_values(value[\"vars\"])\n+                    result[key] = self._extract_weights_from_store(\n+                        value[\"vars\"]\n+                    )\n                 else:\n-                        result[key] = _extract_values(value)\n+                    result[key] = self._extract_weights_from_store(value)\n             else:\n                 result[key] = value\n         return result\n \n-        self.nested_dict = _extract_values(weights_store.h5_file)\n-\n-    def _init_for_keras_format(self, custom_objects, filepath, reference_model):\n-        with zipfile.ZipFile(filepath, \"r\") as zf:\n-            with zf.open(_CONFIG_FILENAME, \"r\") as f:\n-                self.config = json.loads(f.read())\n-            if reference_model is None:\n-                self.reference_model = deserialize_keras_object(\n-                    self.config, custom_objects=custom_objects\n-                )\n-\n-            with zf.open(_METADATA_FILENAME, \"r\") as f:\n-                self.metadata = json.loads(f.read())\n-\n     def _generate_filepath_info(self):\n-        output = f\"Keras model file '{self.filepath}'\"\n-        return output\n+        return f\"Keras model file '{self.filepath}'\"\n \n     def _generate_config_info(self):\n-        output = (\n-            f\"Model: {self.config['class_name']} \"\n-            + f\"'name='{self.config['config']['name']}'\"\n-        )\n-        return output\n+        return pprint.pformat(self.config)\n \n     def _generate_metadata_info(self):\n-        output = [\n-            f\"Saved with Keras {self.metadata['keras_version']}\",\n-            f\"Date saved: {self.metadata['date_saved']}\",\n-        ]\n-        return output\n+        return (\n+            f\"Saved with Keras {self.metadata['keras_version']} \"\n+            f\"- date: {self.metadata['date_saved']}\"\n+        )\n \n-    def list_layers_for_cli(self):\n-        def _print_filepath():\n-            print(self._generate_filepath_info())\n-\n-        def _print_config():\n-            print(self._generate_config_info())\n-\n-        def _print_metadata():\n-            for meta_info in self._generate_metadata_info():\n-                print(meta_info)\n-\n-        def _print_layer_structure(\n-            dictionary, indent=0, is_last=True, prefix=\"\"\n+    def _print_weights_structure(\n+        self, weights_dict, indent=0, is_last=True, prefix=\"\"\n     ):\n-            for idx, (key, value) in enumerate(dictionary.items()):\n-                is_last_item = idx == len(dictionary) - 1\n+        for idx, (key, value) in enumerate(weights_dict.items()):\n+            is_last_item = idx == len(weights_dict) - 1\n             connector = \"└─ \" if is_last_item else \"├─ \"\n \n             if isinstance(value, dict):\n-                    print(f\"{prefix}{connector}{key}\")\n+                io_utils.print_msg(f\"{prefix}{connector}{key}\")\n                 new_prefix = prefix + (\"    \" if is_last_item else \"│   \")\n-                    _print_layer_structure(\n+                self._print_weights_structure(\n                     value,\n                     indent + 1,\n                     is_last=is_last_item,\n@@ -123,34 +133,23 @@ class KerasFileEditor:\n                 )\n             else:\n                 if isinstance(value, h5py.Dataset):\n-                        print(\n+                    io_utils.print_msg(\n                         f\"{prefix}{connector}{key}:\"\n                         + f\" shape={value.shape}, dtype={value.dtype}\"\n                     )\n                 else:\n-                        print(f\"{prefix}{connector}{key}: {value}\")\n+                    io_utils.print_msg(f\"{prefix}{connector}{key}: {value}\")\n \n-        def _print_layer():\n-            print(\"Layers\")\n-            _print_layer_structure(self.nested_dict[\"layers\"], prefix=\" \" * 2)\n-\n-        _print_filepath()\n-\n-        if self.config is not None:\n-            _print_config()\n+    def _list_layers_cli(self):\n+        io_utils.print_msg(self._generate_filepath_info())\n \n         if self.metadata is not None:\n-            _print_metadata()\n+            io_utils.print_msg(self._generate_metadata_info())\n \n-        _print_layer()\n+        io_utils.print_msg(\"Weights structure\")\n+        self._print_weights_structure(self.weights_dict, prefix=\" \" * 2)\n \n-    def list_layers_for_html(self):\n-        if not check_ipython():\n-            message = (\n-                \"You must install ipython (`pip install ipython`) for\"\n-                + \"KerasFileEditor to work.\"\n-            )\n-            raise ImportError(message)\n+    def _list_layers_iteractive(self):\n \n         def _generate_html_filepath():\n             output = f\"<h2>{self._generate_filepath_info()}</h2>\"\n@@ -168,7 +167,7 @@ class KerasFileEditor:\n             output = \"\".join(output)\n             return output\n \n-        def _generate_html_weight(dictionary, margin_left=0, font_size=20):\n+        def _generate_html_weights(dictionary, margin_left=0, font_size=20):\n             html = \"\"\n             for key, value in dictionary.items():\n                 if isinstance(value, dict) and value:\n@@ -176,7 +175,7 @@ class KerasFileEditor:\n                         f'<details style=\"margin-left: {margin_left}px;\">'\n                         + f'<summary style=\"font-size: {font_size}px;\">'\n                         + f\"{key}</summary>\"\n-                        + _generate_html_weight(\n+                        + _generate_html_weights(\n                             value, margin_left + 20, font_size - 1\n                         )\n                         + \"</details>\"\n@@ -201,7 +200,7 @@ class KerasFileEditor:\n \n         def _generate_html_layer():\n             output = \"<p>Layers</p>\"\n-            output += _generate_html_weight(self.nested_dict[\"layers\"])\n+            output += _generate_html_weights(self.weights_dict[\"layers\"])\n             return output\n \n         output = _generate_html_filepath()\n@@ -214,4 +213,5 @@ class KerasFileEditor:\n \n         output += _generate_html_layer()\n \n+        if is_ipython_notebook():\n             ipython.display.display(ipython.display.HTML(output))\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "keras#cbb5ec6a1c10f540e296dc99fbbc1a15ae58bbd9", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 228 | Lines Deleted: 50 | Files Changed: 2 | Hunks: 35 | Methods Changed: 37 | Complexity Δ (Sum/Max): 47/42 | Churn Δ: 278 | Churn Cumulative: 1479 | Contributors (this commit): 7 | Commits (past 90d): 10 | Contributors (cumulative): 8 | DMM Complexity: 0.45930232558139533\n\nDIFF:\n@@ -4,10 +4,11 @@ import pprint\n import zipfile\n \n import h5py\n+import rich.console\n \n from keras.src.saving import saving_lib\n from keras.src.saving.saving_lib import H5IOStore\n-from keras.src.utils import io_utils\n+from keras.src.utils import summary_utils\n \n try:\n     import IPython as ipython\n@@ -37,6 +38,7 @@ class KerasFileEditor:\n         self.metadata = None\n         self.config = None\n         self.model = None\n+        self.console = rich.console.Console(highlight=False)\n \n         if filepath.endswith(\".keras\"):\n             zf = zipfile.ZipFile(filepath, \"r\")\n@@ -61,13 +63,15 @@ class KerasFileEditor:\n                 f\"Received: filepath={filepath}\"\n             )\n \n-        self.weights_dict = self._extract_weights_from_store(\n+        weights_dict, object_metadata = self._extract_weights_from_store(\n             weights_store.h5_file\n         )\n-        io_utils.print_msg(self._generate_filepath_info())\n+        self.weights_dict = weights_dict\n+        self.object_metadata = object_metadata  # {path: object_name}\n+        self.console.print(self._generate_filepath_info(rich_style=True))\n \n         if self.metadata is not None:\n-            io_utils.print_msg(self._generate_metadata_info())\n+            self.console.print(self._generate_metadata_info(rich_style=True))\n \n     def weights_summary(self):\n         if is_ipython_notebook():\n@@ -79,33 +83,167 @@ class KerasFileEditor:\n         # TODO\n         raise NotImplementedError()\n \n-    def delete_layer(self, layer_name):\n-        # TODO\n-        raise NotImplementedError()\n+    def _edit_object(self, edit_fn, source_name, target_name=None):\n+        if target_name is not None and \"/\" in target_name:\n+            raise ValueError(\n+                \"Argument `target_name` should be a leaf name, \"\n+                \"not a full path name. \"\n+                f\"Received: target_name='{target_name}'\"\n+            )\n+        if \"/\" in source_name:\n+            # It's a path\n+            elements = source_name.split(\"/\")\n+            weights_dict = self.weights_dict\n+            for e in elements[:-1]:\n+                if e not in weights_dict:\n+                    raise ValueError(\n+                        f\"Path '{source_name}' not found in model.\"\n+                    )\n+                weights_dict = weights_dict[e]\n+            if elements[-1] not in weights_dict:\n+                raise ValueError(f\"Path '{source_name}' not found in model.\")\n+            edit_fn(\n+                weights_dict, source_name=elements[-1], target_name=target_name\n+            )\n+        else:\n+            # Ensure unicity\n+            def count_occurences(d, name, count=0):\n+                for k in d:\n+                    if isinstance(d[k], dict):\n+                        count += count_occurences(d[k], name, count)\n+                if name in d:\n+                    count += 1\n+                return count\n \n-    def add_layer(self, layer_name, weights):\n-        # TODO\n-        raise NotImplementedError()\n+            occurences = count_occurences(self.weights_dict, source_name)\n+            if occurences > 1:\n+                raise ValueError(\n+                    f\"Name '{source_name}' occurs more than once in the model; \"\n+                    \"try passing a complete path\"\n+                )\n+            if occurences == 0:\n+                raise ValueError(\n+                    f\"Source name '{source_name}' does not appear in the \"\n+                    \"model. Use `editor.weights_summary()` \"\n+                    \"to list all objects.\"\n+                )\n \n-    def rename_layer(self, source_name, target_name):\n-        # TODO\n-        raise NotImplementedError()\n+            def _edit(d):\n+                for k in d:\n+                    if isinstance(d[k], dict):\n+                        _edit(d[k])\n+                if source_name in d:\n+                    edit_fn(d, source_name=source_name, target_name=target_name)\n \n-    def delete_weight(self, layer_name, weight_name):\n-        # TODO\n-        raise NotImplementedError()\n+            _edit(self.weights_dict)\n \n-    def add_weight(self, layer_name, weight_name, weight_value):\n-        # TODO\n-        raise NotImplementedError()\n+    def rename_object(self, source_name, target_name):\n+        def rename_fn(weights_dict, source_name, target_name):\n+            weights_dict[target_name] = weights_dict[source_name]\n+            weights_dict.pop(source_name)\n \n-    def resave_weights(self, fpath):\n-        # TODO\n-        raise NotImplementedError()\n+        self._edit_object(rename_fn, source_name, target_name)\n+\n+    def delete_object(self, name):\n+        def delete_fn(weights_dict, source_name, target_name=None):\n+            weights_dict.pop(source_name)\n+\n+        self._edit_object(delete_fn, name)\n+\n+    def add_object(self, name, weights):\n+        if not isinstance(weights, dict):\n+            raise ValueError(\n+                \"Argument `weights` should be a dict \"\n+                \"where keys are weight names (usually '0', '1', etc.) \"\n+                \"and values are NumPy arrays. \"\n+                f\"Received: type(weights)={type(weights)}\"\n+            )\n+\n+        if \"/\" in name:\n+            # It's a path\n+            elements = name.split(\"/\")\n+            partial_path = \"/\".join(elements[:-1])\n+            weights_dict = self.weights_dict\n+            for e in elements[:-1]:\n+                if e not in weights_dict:\n+                    raise ValueError(\n+                        f\"Path '{partial_path}' not found in model.\"\n+                    )\n+                weights_dict = weights_dict[e]\n+            weights_dict[elements[-1]] = weights\n+        else:\n+            self.weights_dict[name] = weights\n+\n+    def delete_weight(self, object_name, weight_name):\n+        def delete_weight_fn(weights_dict, source_name, target_name=None):\n+            if weight_name not in weights_dict[source_name]:\n+                raise ValueError(\n+                    f\"Weight {weight_name} not found \"\n+                    f\"in object {object_name}. \"\n+                    \"Weights found: \"\n+                    f\"{list(weights_dict[source_name].keys())}\"\n+                )\n+            weights_dict[source_name].pop(weight_name)\n+\n+        self._edit_object(delete_weight_fn, object_name)\n+\n+    def add_weights(self, object_name, weights):\n+        if not isinstance(weights, dict):\n+            raise ValueError(\n+                \"Argument `weights` should be a dict \"\n+                \"where keys are weight names (usually '0', '1', etc.) \"\n+                \"and values are NumPy arrays. \"\n+                f\"Received: type(weights)={type(weights)}\"\n+            )\n+\n+        def add_weight_fn(weights_dict, source_name, target_name=None):\n+            weights_dict[source_name].update(weights)\n+\n+        self._edit_object(add_weight_fn, object_name)\n+\n+    def resave_weights(self, filepath):\n+        filepath = str(filepath)\n+        if not filepath.endswith(\".weights.h5\"):\n+            raise ValueError(\n+                \"Invalid `filepath` argument: \"\n+                \"expected a `.weights.h5` extension. \"\n+                f\"Received: filepath={filepath}\"\n+            )\n+        weights_store = H5IOStore(filepath, mode=\"w\")\n+\n+        def _save(weights_dict, weights_store, inner_path):\n+            vars_to_create = {}\n+            for name, value in weights_dict.items():\n+                if isinstance(value, dict):\n+                    if value:\n+                        _save(\n+                            weights_dict[name],\n+                            weights_store,\n+                            inner_path=inner_path + \"/\" + name,\n+                        )\n+                else:\n+                    # e.g. name=\"0\", value=HDF5Dataset\n+                    vars_to_create[name] = value\n+            if vars_to_create:\n+                var_store = weights_store.make(inner_path)\n+                for name, value in vars_to_create.items():\n+                    var_store[name] = value\n+\n+        _save(self.weights_dict, weights_store, inner_path=\"\")\n+        weights_store.close()\n+\n+    def _extract_weights_from_store(self, data, metadata=None, inner_path=\"\"):\n+        metadata = metadata or {}\n+\n+        object_metadata = {}\n+        for k, v in data.attrs.items():\n+            object_metadata[k] = v\n+        if object_metadata:\n+            metadata[inner_path] = object_metadata\n \n-    def _extract_weights_from_store(self, data):\n         result = collections.OrderedDict()\n         for key in data.keys():\n+            inner_path = inner_path + \"/\" + key\n             value = data[key]\n             if isinstance(value, h5py.Group):\n                 if len(value) == 0:\n@@ -115,54 +253,83 @@ class KerasFileEditor:\n \n             if hasattr(value, \"keys\"):\n                 if \"vars\" in value.keys():\n-                    result[key] = self._extract_weights_from_store(\n-                        value[\"vars\"]\n+                    result[key], metadata = self._extract_weights_from_store(\n+                        value[\"vars\"], metadata=metadata, inner_path=inner_path\n                     )\n                 else:\n-                    result[key] = self._extract_weights_from_store(value)\n+                    result[key], metadata = self._extract_weights_from_store(\n+                        value, metadata=metadata, inner_path=inner_path\n+                    )\n             else:\n                 result[key] = value\n-        return result\n+        return result, metadata\n \n-    def _generate_filepath_info(self):\n-        return f\"Keras model file '{self.filepath}'\"\n+    def _generate_filepath_info(self, rich_style=False):\n+        if rich_style:\n+            filepath = f\"'{self.filepath}'\"\n+            filepath = f\"{summary_utils.highlight_symbol(filepath)}\"\n+        else:\n+            filepath = f\"'{self.filepath}'\"\n+        return f\"Keras model file {filepath}\"\n \n-    def _generate_config_info(self):\n+    def _generate_config_info(self, rich_style=False):\n         return pprint.pformat(self.config)\n \n-    def _generate_metadata_info(self):\n-        return (\n-            f\"Saved with Keras {self.metadata['keras_version']} \"\n-            f\"- date: {self.metadata['date_saved']}\"\n-        )\n+    def _generate_metadata_info(self, rich_style=False):\n+        version = self.metadata[\"keras_version\"]\n+        date = self.metadata[\"date_saved\"]\n+        if rich_style:\n+            version = f\"{summary_utils.highlight_symbol(version)}\"\n+            date = f\"{summary_utils.highlight_symbol(date)}\"\n+        return f\"Saved with Keras {version} \" f\"- date: {date}\"\n \n     def _print_weights_structure(\n-        self, weights_dict, indent=0, is_last=True, prefix=\"\"\n+        self, weights_dict, indent=0, is_first=True, prefix=\"\", inner_path=\"\"\n     ):\n         for idx, (key, value) in enumerate(weights_dict.items()):\n-            is_last_item = idx == len(weights_dict) - 1\n-            connector = \"└─ \" if is_last_item else \"├─ \"\n+            inner_path = inner_path + \"/\" + key\n+            is_last = idx == len(weights_dict) - 1\n+            if is_first:\n+                is_first = False\n+                connector = \"> \"\n+            elif is_last:\n+                connector = \"└─ \"\n+            else:\n+                connector = \"├─ \"\n \n             if isinstance(value, dict):\n-                io_utils.print_msg(f\"{prefix}{connector}{key}\")\n-                new_prefix = prefix + (\"    \" if is_last_item else \"│   \")\n+                bold_key = summary_utils.bold_text(key)\n+                object_label = f\"{prefix}{connector}{bold_key}\"\n+                if inner_path in self.object_metadata:\n+                    metadata = self.object_metadata[inner_path]\n+                    if \"name\" in metadata:\n+                        name = metadata[\"name\"]\n+                        object_label += f\" ('{name}')\"\n+                self.console.print(object_label)\n+                if is_last:\n+                    appended = \"    \"\n+                else:\n+                    appended = \"│   \"\n+                new_prefix = prefix + appended\n                 self._print_weights_structure(\n                     value,\n                     indent + 1,\n-                    is_last=is_last_item,\n+                    is_first=is_first,\n                     prefix=new_prefix,\n+                    inner_path=inner_path,\n                 )\n             else:\n                 if isinstance(value, h5py.Dataset):\n-                    io_utils.print_msg(\n-                        f\"{prefix}{connector}{key}:\"\n+                    bold_key = summary_utils.bold_text(key)\n+                    self.console.print(\n+                        f\"{prefix}{connector}{bold_key}:\"\n                         + f\" shape={value.shape}, dtype={value.dtype}\"\n                     )\n                 else:\n-                    io_utils.print_msg(f\"{prefix}{connector}{key}: {value}\")\n+                    self.console.print(f\"{prefix}{connector}{key}: {value}\")\n \n     def _weights_summary_cli(self):\n-        io_utils.print_msg(\"Weights structure\")\n+        self.console.print(\"Weights structure\")\n         self._print_weights_structure(self.weights_dict, prefix=\" \" * 2)\n \n     def _weights_summary_iteractive(self):\n\n@@ -660,7 +660,13 @@ def _save_state(\n         return\n \n     if hasattr(saveable, \"save_own_variables\") and weights_store:\n-        saveable.save_own_variables(weights_store.make(inner_path))\n+        if hasattr(saveable, \"name\") and isinstance(saveable.name, str):\n+            metadata = {\"name\": saveable.name}\n+        else:\n+            metadata = None\n+        saveable.save_own_variables(\n+            weights_store.make(inner_path, metadata=metadata)\n+        )\n     if hasattr(saveable, \"save_assets\") and assets_store:\n         saveable.save_assets(assets_store.make(inner_path))\n \n@@ -924,8 +930,8 @@ class H5IOStore:\n         else:\n             self.h5_file = h5py.File(root_path, mode=self.mode)\n \n-    def make(self, path):\n-        return H5Entry(self.h5_file, path, mode=\"w\")\n+    def make(self, path, metadata=None):\n+        return H5Entry(self.h5_file, path, mode=\"w\", metadata=metadata)\n \n     def get(self, path):\n         return H5Entry(self.h5_file, path, mode=\"r\")\n@@ -941,10 +947,11 @@ class H5IOStore:\n class H5Entry:\n     \"\"\"Leaf entry in a H5IOStore.\"\"\"\n \n-    def __init__(self, h5_file, path, mode):\n+    def __init__(self, h5_file, path, mode, metadata=None):\n         self.h5_file = h5_file\n         self.path = path\n         self.mode = mode\n+        self.metadata = metadata\n \n         if mode == \"w\":\n             if not path:\n@@ -953,9 +960,13 @@ class H5Entry:\n                 self.group = self.h5_file.create_group(self.path).create_group(\n                     \"vars\"\n                 )\n+            if self.metadata:\n+                for k, v in self.metadata.items():\n+                    self.group.attrs[k] = v\n         else:\n             found = False\n             if not path:\n+                if \"vars\" in self.h5_file:\n                     self.group = self.h5_file[\"vars\"]\n                     found = True\n             elif path in self.h5_file and \"vars\" in self.h5_file[path]:\n@@ -1026,7 +1037,7 @@ class NpzIOStore:\n                 self.f = open(root_path, mode=\"rb\")\n             self.contents = np.load(self.f, allow_pickle=True)\n \n-    def make(self, path):\n+    def make(self, path, metadata=None):\n         if not path:\n             self.contents[\"__root__\"] = {}\n             return self.contents[\"__root__\"]\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "keras#f1da798f804b0cbdd16ab0e5960ba57826bc2add", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 354 | Lines Deleted: 13 | Files Changed: 2 | Hunks: 19 | Methods Changed: 20 | Complexity Δ (Sum/Max): 29/26 | Churn Δ: 367 | Churn Cumulative: 1105 | Contributors (this commit): 2 | Commits (past 90d): 6 | Contributors (cumulative): 3 | DMM Complexity: 0.4811320754716981\n\nDIFF:\n@@ -6,8 +6,10 @@ import zipfile\n import h5py\n import rich.console\n \n+from keras.src import backend\n from keras.src.saving import saving_lib\n from keras.src.saving.saving_lib import H5IOStore\n+from keras.src.utils import naming\n from keras.src.utils import summary_utils\n \n try:\n@@ -30,6 +32,26 @@ def is_ipython_notebook():\n \n \n class KerasFileEditor:\n+    \"\"\"Utility to inspect, edit, and resave Keras weights files.\n+\n+    Args:\n+        filepath: The path to a local file to inspect and edit.\n+\n+    Examples:\n+\n+    ```python\n+    editor = KerasFileEditor(\"my_model.weights.h5\")\n+    # Displays current contents\n+    editor.summary()\n+    # Remove the weights of an existing layer\n+    editor.delete_object(\"layers/dense_2\")\n+    # Add the weights of a new layer\n+    editor.add_object(\"layers/einsum_dense\", weights={\"0\": ..., \"1\": ...})\n+    # Save the weights of the edited model\n+    editor.resave_weights(\"edited_model.weights.h5\")\n+    ```\n+    \"\"\"\n+\n     def __init__(\n         self,\n         filepath,\n@@ -73,15 +95,138 @@ class KerasFileEditor:\n         if self.metadata is not None:\n             self.console.print(self._generate_metadata_info(rich_style=True))\n \n-    def weights_summary(self):\n+    def summary(self):\n+        \"\"\"Prints the weight structure of the opened file.\"\"\"\n         if is_ipython_notebook():\n             self._weights_summary_iteractive()\n         else:\n             self._weights_summary_cli()\n \n-    def compare_to_reference(self, model):\n-        # TODO\n-        raise NotImplementedError()\n+    def compare_to(self, reference_model):\n+        \"\"\"Compares the opened file to a reference model.\n+\n+        This method will list all mismatches between the\n+        currently opened file and the provided reference model.\n+\n+        Args:\n+            reference_model: Model instance to compare to.\n+\n+        Returns:\n+            Dict with the following keys:\n+            `'status'`, `'error_count'`, `'match_count'`.\n+            Status can be `'success'` or `'error'`.\n+            `'error_count'` is the number of mismatches found.\n+            `'match_count'` is the number of matching weights found.\n+        \"\"\"\n+        self.console.print(\"Running comparison\")\n+        ref_spec = {}\n+        get_weight_spec_of_saveable(reference_model, ref_spec)\n+\n+        def _compare(\n+            target,\n+            ref_spec,\n+            inner_path,\n+            target_name,\n+            ref_name,\n+            error_count,\n+            match_count,\n+        ):\n+            base_inner_path = inner_path\n+            for ref_key, ref_val in ref_spec.items():\n+                inner_path = base_inner_path + \"/\" + ref_key\n+                if ref_key not in target:\n+                    if isinstance(ref_val, dict):\n+                        error_count += 1\n+                        self.console.print(\n+                            f\"[color(160)]...Object [bold]{inner_path}[/] \"\n+                            f\"present in {ref_name}, \"\n+                            f\"missing from {target_name}[/]\"\n+                        )\n+                        self.console.print(\n+                            f\"    In {ref_name}, {inner_path} contains \"\n+                            f\"the following keys: {list(ref_val.keys())}\"\n+                        )\n+                    else:\n+                        self.console.print(\n+                            f\"[color(160)]...Weight [bold]{inner_path}[/] \"\n+                            f\"present in {ref_name}, \"\n+                            f\"missing from {target_name}[/]\"\n+                        )\n+                elif isinstance(ref_val, dict):\n+                    _error_count, _match_count = _compare(\n+                        target[ref_key],\n+                        ref_spec[ref_key],\n+                        inner_path,\n+                        target_name,\n+                        ref_name,\n+                        error_count=error_count,\n+                        match_count=match_count,\n+                    )\n+                    error_count += _error_count\n+                    match_count += _match_count\n+                else:\n+                    if target[ref_key].shape != ref_val.shape:\n+                        error_count += 1\n+                        self.console.print(\n+                            f\"[color(160)]...Weight shape mismatch \"\n+                            f\"for [bold]{inner_path}[/][/]\\n\"\n+                            f\"    In {ref_name}: \"\n+                            f\"shape={tuple(ref_val[0])}\\n\"\n+                            f\"    In {target_name}: \"\n+                            f\"shape={target[ref_key].shape}\"\n+                        )\n+                    else:\n+                        match_count += 1\n+            return error_count, match_count\n+\n+        error_count, match_count = _compare(\n+            self.weights_dict,\n+            ref_spec,\n+            inner_path=\"\",\n+            target_name=\"saved file\",\n+            ref_name=\"reference model\",\n+            error_count=0,\n+            match_count=0,\n+        )\n+        _error_count, _ = _compare(\n+            ref_spec,\n+            self.weights_dict,\n+            inner_path=\"\",\n+            target_name=\"reference model\",\n+            ref_name=\"saved file\",\n+            error_count=0,\n+            match_count=0,\n+        )\n+        error_count += _error_count\n+        self.console.print(\"─────────────────────\")\n+        if error_count == 0:\n+            status = \"success\"\n+            self.console.print(\n+                \"[color(28)][bold]Comparison successful:[/] \"\n+                \"saved file is compatible with the reference model[/]\"\n+            )\n+            if match_count == 1:\n+                plural = \"\"\n+            else:\n+                plural = \"s\"\n+            self.console.print(\n+                f\"    Found {match_count} matching weight{plural}\"\n+            )\n+        else:\n+            status = \"error\"\n+            if error_count == 1:\n+                plural = \"\"\n+            else:\n+                plural = \"s\"\n+            self.console.print(\n+                f\"[color(160)][bold]Found {error_count} error{plural}:[/] \"\n+                \"saved file is not compatible with the reference model[/]\"\n+            )\n+        return {\n+            \"status\": status,\n+            \"error_count\": error_count,\n+            \"match_count\": match_count,\n+        }\n \n     def _edit_object(self, edit_fn, source_name, target_name=None):\n         if target_name is not None and \"/\" in target_name:\n@@ -137,20 +282,46 @@ class KerasFileEditor:\n \n             _edit(self.weights_dict)\n \n-    def rename_object(self, source_name, target_name):\n+    def rename_object(self, object_name, new_name):\n+        \"\"\"Rename an object in the file (e.g. a layer).\n+\n+        Args:\n+            object_name: String, name or path of the\n+                object to rename (e.g. `\"dense_2\"` or\n+                `\"layers/dense_2\"`).\n+            new_name: String, new name of the object.\n+        \"\"\"\n+\n         def rename_fn(weights_dict, source_name, target_name):\n             weights_dict[target_name] = weights_dict[source_name]\n             weights_dict.pop(source_name)\n \n-        self._edit_object(rename_fn, source_name, target_name)\n+        self._edit_object(rename_fn, object_name, new_name)\n+\n+    def delete_object(self, object_name):\n+        \"\"\"Removes an object from the file (e.g. a layer).\n+\n+        Args:\n+            object_name: String, name or path of the\n+                object to delete (e.g. `\"dense_2\"` or\n+                `\"layers/dense_2\"`).\n+        \"\"\"\n \n-    def delete_object(self, name):\n         def delete_fn(weights_dict, source_name, target_name=None):\n             weights_dict.pop(source_name)\n \n-        self._edit_object(delete_fn, name)\n+        self._edit_object(delete_fn, object_name)\n \n-    def add_object(self, name, weights):\n+    def add_object(self, object_path, weights):\n+        \"\"\"Add a new object to the file (e.g. a layer).\n+\n+        Args:\n+            object_path: String, full path of the\n+                object to add (e.g. `\"layers/dense_2\"`).\n+            weights: Dict mapping weight names to weight\n+                values (arrays),\n+                e.g. `{\"0\": kernel_value, \"1\": bias_value}`.\n+        \"\"\"\n         if not isinstance(weights, dict):\n             raise ValueError(\n                 \"Argument `weights` should be a dict \"\n@@ -159,9 +330,9 @@ class KerasFileEditor:\n                 f\"Received: type(weights)={type(weights)}\"\n             )\n \n-        if \"/\" in name:\n+        if \"/\" in object_path:\n             # It's a path\n-            elements = name.split(\"/\")\n+            elements = object_path.split(\"/\")\n             partial_path = \"/\".join(elements[:-1])\n             weights_dict = self.weights_dict\n             for e in elements[:-1]:\n@@ -172,9 +343,19 @@ class KerasFileEditor:\n                 weights_dict = weights_dict[e]\n             weights_dict[elements[-1]] = weights\n         else:\n-            self.weights_dict[name] = weights\n+            self.weights_dict[object_path] = weights\n \n     def delete_weight(self, object_name, weight_name):\n+        \"\"\"Removes a weight from an existing object.\n+\n+        Args:\n+            object_name: String, name or path of the\n+                object from which to remove the weight\n+                (e.g. `\"dense_2\"` or `\"layers/dense_2\"`).\n+            weight_name: String, name of the weight to\n+                delete (e.g. `\"0\"`).\n+        \"\"\"\n+\n         def delete_weight_fn(weights_dict, source_name, target_name=None):\n             if weight_name not in weights_dict[source_name]:\n                 raise ValueError(\n@@ -188,6 +369,16 @@ class KerasFileEditor:\n         self._edit_object(delete_weight_fn, object_name)\n \n     def add_weights(self, object_name, weights):\n+        \"\"\"Add one or more new weights to an existing object.\n+\n+        Args:\n+            object_name: String, name or path of the\n+                object to add the weights to\n+                (e.g. `\"dense_2\"` or `\"layers/dense_2\"`).\n+            weights: Dict mapping weight names to weight\n+                values (arrays),\n+                e.g. `{\"0\": kernel_value, \"1\": bias_value}`.\n+        \"\"\"\n         if not isinstance(weights, dict):\n             raise ValueError(\n                 \"Argument `weights` should be a dict \"\n@@ -202,6 +393,12 @@ class KerasFileEditor:\n         self._edit_object(add_weight_fn, object_name)\n \n     def resave_weights(self, filepath):\n+        \"\"\"Save the edited weights file.\n+\n+        Args:\n+            filepath: Path to save the file to.\n+                Must be a `.weights.h5` file.\n+        \"\"\"\n         filepath = str(filepath)\n         if not filepath.endswith(\".weights.h5\"):\n             raise ValueError(\n@@ -319,7 +516,7 @@ class KerasFileEditor:\n                     inner_path=inner_path,\n                 )\n             else:\n-                if isinstance(value, h5py.Dataset):\n+                if hasattr(value, \"shape\"):\n                     bold_key = summary_utils.bold_text(key)\n                     self.console.print(\n                         f\"{prefix}{connector}{bold_key}:\"\n@@ -370,3 +567,71 @@ class KerasFileEditor:\n \n         if is_ipython_notebook():\n             ipython.display.display(ipython.display.HTML(output))\n+\n+\n+def get_weight_spec_of_saveable(saveable, spec, visited_saveables=None):\n+\n+    from keras.src.saving.keras_saveable import KerasSaveable\n+\n+    visited_saveables = visited_saveables or set()\n+\n+    # If the saveable has already been saved, skip it.\n+    if id(saveable) in visited_saveables:\n+        return\n+\n+    if hasattr(saveable, \"save_own_variables\"):\n+        store = {}\n+        saveable.save_own_variables(store)\n+        if store:\n+            keys = sorted(store.keys())\n+            for k in keys:\n+                val = store[k]\n+                spec[k] = backend.KerasTensor(shape=val.shape, dtype=val.dtype)\n+\n+    visited_saveables.add(id(saveable))\n+\n+    for child_attr, child_obj in saving_lib._walk_saveable(saveable):\n+        if isinstance(child_obj, KerasSaveable):\n+            sub_spec = {}\n+            get_weight_spec_of_saveable(\n+                child_obj,\n+                sub_spec,\n+                visited_saveables=visited_saveables,\n+            )\n+            if sub_spec:\n+                spec[child_attr] = sub_spec\n+        elif isinstance(child_obj, (list, dict, tuple, set)):\n+            sub_spec = {}\n+            get_weight_spec_of_container(\n+                child_obj,\n+                sub_spec,\n+                visited_saveables=visited_saveables,\n+            )\n+            if sub_spec:\n+                spec[child_attr] = sub_spec\n+\n+\n+def get_weight_spec_of_container(container, spec, visited_saveables):\n+\n+    from keras.src.saving.keras_saveable import KerasSaveable\n+\n+    used_names = {}\n+    if isinstance(container, dict):\n+        container = list(container.values())\n+\n+    for saveable in container:\n+        if isinstance(saveable, KerasSaveable):\n+            name = naming.to_snake_case(saveable.__class__.__name__)\n+            if name in used_names:\n+                used_names[name] += 1\n+                name = f\"{name}_{used_names[name]}\"\n+            else:\n+                used_names[name] = 0\n+            sub_spec = {}\n+            get_weight_spec_of_saveable(\n+                saveable,\n+                sub_spec,\n+                visited_saveables=visited_saveables,\n+            )\n+            if sub_spec:\n+                spec[name] = sub_spec\n\n@@ -0,0 +1,76 @@\n+import os\n+\n+import numpy as np\n+\n+import keras\n+from keras.src import testing\n+from keras.src.saving.file_editor import KerasFileEditor\n+\n+\n+def get_source_model():\n+    inputs = keras.Input((2,))\n+    x = keras.layers.Dense(3, name=\"mydense\")(inputs)\n+    outputs = keras.layers.Dense(3, name=\"output_layer\")(x)\n+    model = keras.Model(inputs, outputs)\n+    return model\n+\n+\n+def get_target_model():\n+    inputs = keras.Input((2,))\n+    x = keras.layers.Dense(3, name=\"mydense\")(inputs)\n+    x = keras.layers.Dense(3, name=\"myotherdense\")(x)\n+    outputs = keras.layers.Dense(3, name=\"output_layer\")(x)\n+    model = keras.Model(inputs, outputs)\n+    return model\n+\n+\n+class SavingTest(testing.TestCase):\n+\n+    def test_basics(self):\n+        temp_filepath = os.path.join(self.get_temp_dir(), \"my_model.keras\")\n+\n+        model = get_source_model()\n+        model.save(temp_filepath)\n+\n+        editor = KerasFileEditor(temp_filepath)\n+        editor.summary()\n+\n+        target_model = get_target_model()\n+\n+        out = editor.compare_to(model)  # Succeeds\n+        self.assertEqual(out[\"status\"], \"success\")\n+        out = editor.compare_to(target_model)  # Fails\n+\n+        editor.add_object(\n+            \"layers/dense_3\", weights={\"0\": np.random.random((3, 3))}\n+        )\n+        out = editor.compare_to(target_model)  # Fails\n+        self.assertEqual(out[\"status\"], \"error\")\n+        self.assertEqual(out[\"error_count\"], 2)\n+\n+        editor.rename_object(\"dense_3\", \"dense_4\")\n+        editor.rename_object(\"layers/dense_4\", \"dense_2\")\n+        editor.add_weights(\"dense_2\", weights={\"1\": np.random.random((3,))})\n+        out = editor.compare_to(target_model)  # Succeeds\n+        self.assertEqual(out[\"status\"], \"success\")\n+\n+        editor.add_object(\n+            \"layers/dense_3\", weights={\"0\": np.random.random((3, 3))}\n+        )\n+        out = editor.compare_to(target_model)  # Fails\n+        self.assertEqual(out[\"status\"], \"error\")\n+        self.assertEqual(out[\"error_count\"], 1)\n+\n+        editor.delete_object(\"layers/dense_3\")\n+        out = editor.compare_to(target_model)  # Succeeds\n+        self.assertEqual(out[\"status\"], \"success\")\n+        editor.summary()\n+\n+        temp_filepath = os.path.join(self.get_temp_dir(), \"resaved.weights.h5\")\n+        editor.resave_weights(temp_filepath)\n+        target_model.load_weights(temp_filepath)\n+\n+        editor = KerasFileEditor(temp_filepath)\n+        editor.summary()\n+        out = editor.compare_to(target_model)  # Succeeds\n+        self.assertEqual(out[\"status\"], \"success\")\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "keras#d85036c431ca124bb3161be4a9123b83a5744c21", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 4 | Lines Deleted: 6 | Files Changed: 3 | Hunks: 6 | Methods Changed: 2 | Complexity Δ (Sum/Max): -2/0 | Churn Δ: 10 | Churn Cumulative: 1079 | Contributors (this commit): 3 | Commits (past 90d): 8 | Contributors (cumulative): 6 | DMM Complexity: 0.0\n\nDIFF:\n@@ -4,6 +4,7 @@ This file was autogenerated. Do not edit it by hand,\n since your modifications would be overwritten.\n \"\"\"\n \n+from keras.src.saving.file_editor import KerasFileEditor\n from keras.src.saving.object_registration import CustomObjectScope\n from keras.src.saving.object_registration import (\n     CustomObjectScope as custom_object_scope,\n\n@@ -4,6 +4,7 @@ This file was autogenerated. Do not edit it by hand,\n since your modifications would be overwritten.\n \"\"\"\n \n+from keras.src.saving.file_editor import KerasFileEditor\n from keras.src.saving.object_registration import CustomObjectScope\n from keras.src.saving.object_registration import (\n     CustomObjectScope as custom_object_scope,\n\n@@ -7,6 +7,7 @@ import h5py\n import rich.console\n \n from keras.src import backend\n+from keras.src.api_export import keras_export\n from keras.src.saving import saving_lib\n from keras.src.saving.saving_lib import H5IOStore\n from keras.src.utils import naming\n@@ -31,6 +32,7 @@ def is_ipython_notebook():\n         return False\n \n \n+@keras_export(\"keras.saving.KerasFileEditor\")\n class KerasFileEditor:\n     \"\"\"Utility to inspect, edit, and resave Keras weights files.\n \n@@ -97,9 +99,6 @@ class KerasFileEditor:\n \n     def summary(self):\n         \"\"\"Prints the weight structure of the opened file.\"\"\"\n-        if is_ipython_notebook():\n-            self._weights_summary_iteractive()\n-        else:\n         self._weights_summary_cli()\n \n     def compare_to(self, reference_model):\n@@ -565,9 +564,6 @@ class KerasFileEditor:\n         output = \"Weights structure\"\n         output += _generate_html_weights(self.weights_dict)\n \n-        if is_ipython_notebook():\n-            ipython.display.display(ipython.display.HTML(output))\n-\n \n def get_weight_spec_of_saveable(saveable, spec, visited_saveables=None):\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "keras#ddf13de6ea1c00f9563eb1f3e66a187207491768", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 181 | Lines Deleted: 0 | Files Changed: 3 | Hunks: 3 | Methods Changed: 21 | Complexity Δ (Sum/Max): 30/30 | Churn Δ: 181 | Churn Cumulative: 289 | Contributors (this commit): 2 | Commits (past 90d): 3 | Contributors (cumulative): 5 | DMM Complexity: 0.7971014492753623\n\nDIFF:\n@@ -31,6 +31,7 @@ from keras.src.trainers.data_adapters.py_dataset_adapter import (\n     PyDataset as Sequence,\n )\n from keras.src.utils.audio_dataset_utils import audio_dataset_from_directory\n+from keras.src.utils.config import Config\n from keras.src.utils.dataset_utils import split_dataset\n from keras.src.utils.file_utils import get_file\n from keras.src.utils.image_dataset_utils import image_dataset_from_directory\n\n@@ -31,6 +31,7 @@ from keras.src.trainers.data_adapters.py_dataset_adapter import (\n     PyDataset as Sequence,\n )\n from keras.src.utils.audio_dataset_utils import audio_dataset_from_directory\n+from keras.src.utils.config import Config\n from keras.src.utils.dataset_utils import split_dataset\n from keras.src.utils.file_utils import get_file\n from keras.src.utils.image_dataset_utils import image_dataset_from_directory\n\n@@ -0,0 +1,179 @@\n+import copy\n+import json\n+\n+try:\n+    import difflib\n+except ImportError:\n+    difflib = None\n+\n+from keras.src.api_export import keras_export\n+\n+\n+@keras_export(\"keras.utils.Config\")\n+class Config:\n+    \"\"\"A Config is a dict-like container for named values.\n+\n+    It offers a few advantages over a plain dict:\n+\n+    - Setting and retrieving values via attribute setting / getting.\n+    - Ability to freeze the config to ensure no accidental config modifications\n+        occur past a certain point in your program.\n+    - Easy serialization of the whole config as JSON.\n+\n+    Examples:\n+\n+    ```python\n+    # Create a config via constructor arguments\n+    config = Config(\"learning_rate\"=0.1, \"momentum\"=0.9)\n+\n+    # Then keep adding to it via attribute-style setting\n+    config.use_ema = True\n+    config.ema_overwrite_frequency = 100\n+\n+    # You can also add attributes via dict-like access\n+    config[\"seed\"] = 123\n+\n+    # You can retrieve entries both via attribute-style\n+    # access and dict-style access\n+    assert config.seed == 100\n+    assert config[\"learning_rate\"] == 0.1\n+    ```\n+\n+    A config behaves like a dict:\n+\n+    ```python\n+    config = Config(\"learning_rate\"=0.1, \"momentum\"=0.9)\n+    for k, v in config.items():\n+        print(f\"{k}={v}\")\n+\n+    print(f\"keys: {list(config.keys())}\")\n+    print(f\"values: {list(config.values())}\")\n+    ```\n+\n+    In fact, it can be turned into one:\n+\n+    ```python\n+    config = Config(\"learning_rate\"=0.1, \"momentum\"=0.9)\n+    dict_config = config.as_dict()\n+    ```\n+\n+    You can easily serialize a config to JSON:\n+\n+    ```python\n+    config = Config(\"learning_rate\"=0.1, \"momentum\"=0.9)\n+\n+    json_str = config.to_json()\n+    ```\n+\n+    You can also freeze a config to prevent further changes:\n+\n+    ```python\n+    config = Config()\n+    config.optimizer = \"adam\"\n+    config.seed = 123\n+\n+    # Freeze the config to prevent changes.\n+    config.freeze()\n+    assert config.frozen\n+\n+    config.foo = \"bar\"  # This will raise an error.\n+    ```\n+    \"\"\"\n+\n+    __attrs__ = None\n+\n+    def __init__(self, **kwargs):\n+        self._config = kwargs\n+        self._frozen = False\n+        self.__attrs__ = set(dir(self))\n+\n+    @property\n+    def frozen(self):\n+        \"\"\"Returns True if the config is frozen.\"\"\"\n+        return self._frozen\n+\n+    def freeze(self):\n+        \"\"\"Marks the config as frozen, preventing any ulterior modification.\"\"\"\n+        self._frozen = True\n+\n+    def unfreeze(self):\n+        self._frozen = False\n+\n+    def _raise_if_frozen(self):\n+        if self._frozen:\n+            raise ValueError(\n+                \"Cannot mutate attribute(s) because the config is frozen.\"\n+            )\n+\n+    def as_dict(self):\n+        return copy.copy(self._config)\n+\n+    def to_json(self):\n+        return json.dumps(self._config)\n+\n+    def keys(self):\n+        return self._config.keys()\n+\n+    def values(self):\n+        return self._config.values()\n+\n+    def items(self):\n+        return self._config.items()\n+\n+    def pop(self, *args):\n+        self._raise_if_frozen()\n+        return self._config.pop(*args)\n+\n+    def update(self, *args, **kwargs):\n+        self._raise_if_frozen()\n+        return self._config.update(*args, **kwargs)\n+\n+    def __setattr__(self, name, value):\n+        attrs = object.__getattribute__(self, \"__attrs__\")\n+        if attrs is None or name in attrs:\n+            return object.__setattr__(self, name, value)\n+\n+        self._raise_if_frozen()\n+        self._config[name] = value\n+\n+    def __getattr__(self, name):\n+        attrs = object.__getattribute__(self, \"__attrs__\")\n+        if attrs is None or name in attrs:\n+            return object.__getattribute__(self, name)\n+\n+        if name in self._config:\n+            return self._config[name]\n+\n+        msg = f\"Unknown attribute: '{name}'.\"\n+        if difflib is not None:\n+            closest_matches = difflib.get_close_matches(\n+                name, self._config.keys(), n=1, cutoff=0.7\n+            )\n+            if closest_matches:\n+                msg += f\" Did you mean '{closest_matches[0]}'?\"\n+        raise AttributeError(msg)\n+\n+    def __setitem__(self, key, item):\n+        self._raise_if_frozen()\n+        self._config[key] = item\n+\n+    def __getitem__(self, key):\n+        return self._config[key]\n+\n+    def __repr__(self):\n+        return f\"<Config {self._config}>\"\n+\n+    def __iter__(self):\n+        keys = sorted(self._config.keys())\n+        for k in keys:\n+            yield k\n+\n+    def __len__(self):\n+        return len(self._config)\n+\n+    def __delitem__(self, key):\n+        self._raise_if_frozen()\n+        del self._config[key]\n+\n+    def __contains__(self, item):\n+        return item in self._config\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
