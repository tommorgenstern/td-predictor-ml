{"custom_id": "fastapi#d0ced2c7c900efcefdc324c51814f07132ba0b48", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 87 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Î” (Sum/Max): 0/0 | Churn Î”: 87 | Churn Cumulative: 87 | Contributors (this commit): 1 | Commits (past 90d): 1 | Contributors (cumulative): 1 | DMM Complexity: None\n\nDIFF:\n@@ -0,0 +1,87 @@\n+import logging\n+from pathlib import Path\n+from typing import Dict, Optional\n+\n+import yaml\n+from github import Github\n+from pydantic import BaseModel, BaseSettings, SecretStr\n+\n+awaiting_label = \"awaiting review\"\n+lang_all_label = \"lang-all\"\n+approved_label = \"approved-2\"\n+translations_path = Path(__file__).parent / \"translations.yml\"\n+\n+\n+class Settings(BaseSettings):\n+    github_repository: str\n+    input_token: SecretStr\n+    github_event_path: Path\n+    github_event_name: Optional[str] = None\n+    input_debug: Optional[bool] = False\n+\n+\n+class PartialGitHubEventIssue(BaseModel):\n+    number: int\n+\n+\n+class PartialGitHubEvent(BaseModel):\n+    pull_request: PartialGitHubEventIssue\n+\n+\n+if __name__ == \"__main__\":\n+    settings = Settings()\n+    if settings.input_debug:\n+        logging.basicConfig(level=logging.DEBUG)\n+    else:\n+        logging.basicConfig(level=logging.INFO)\n+    logging.debug(f\"Using config: {settings.json()}\")\n+    g = Github(settings.input_token.get_secret_value())\n+    repo = g.get_repo(settings.github_repository)\n+    if not settings.github_event_path.is_file():\n+        raise RuntimeError(\n+            f\"No github event file available at: {settings.github_event_path}\"\n+        )\n+    contents = settings.github_event_path.read_text()\n+    github_event = PartialGitHubEvent.parse_raw(contents)\n+    translations_map: Dict[str, int] = yaml.safe_load(translations_path.read_text())\n+    logging.debug(f\"Using translations map: {translations_map}\")\n+    pr = repo.get_pull(github_event.pull_request.number)\n+    logging.debug(f\"Processing PR: {pr.number}\")\n+    if pr.state == \"open\":\n+        logging.debug(f\"PR is open: {pr.number}\")\n+        label_strs = set([label.name for label in pr.get_labels()])\n+        if lang_all_label in label_strs and awaiting_label in label_strs:\n+            logging.info(\n+                f\"This PR seems to be a language translation and awaiting reviews: {pr.number}\"\n+            )\n+            if approved_label in label_strs:\n+                message = (\n+                    f\"It seems this PR already has the approved label: {pr.number}\"\n+                )\n+                logging.error(message)\n+                raise RuntimeError(message)\n+            langs = []\n+            for label in label_strs:\n+                if label.startswith(\"lang-\") and not label == lang_all_label:\n+                    langs.append(label[5:])\n+            for lang in langs:\n+                if lang in translations_map:\n+                    num = translations_map[lang]\n+                    logging.info(f\"Found a translation issue for language: {lang} in issue: {num}\")\n+                    issue = repo.get_issue(num)\n+                    message = f\"Good news everyone! ðŸ˜‰ There's a new translation PR to be reviewed: #{pr.number} ðŸŽ‰\"\n+                    already_notified = False\n+                    logging.info(f\"Checking current comments in issue: {num} to see if already notified about this PR: {pr.number}\")\n+                    for comment in issue.get_comments():\n+                        if message in comment.body:\n+                            already_notified = True\n+                    if not already_notified:\n+                        logging.info(f\"Writing comment in issue: {num} about PR: {pr.number}\")\n+                        issue.create_comment(message)\n+                    else:\n+                        logging.info(f\"Issue: {num} was already notified of PR: {pr.number}\")\n+    else:\n+        logging.info(\n+            f\"Changing labels in a closed PR doesn't trigger comments, PR: {pr.number}\"\n+        )\n+    logging.info(\"Finished\")\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#20d48345465e5b09756cc9ef62fb940c63255a13", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 60 | Lines Deleted: 0 | Files Changed: 2 | Hunks: 2 | Methods Changed: 4 | Complexity Î” (Sum/Max): 4/3 | Churn Î”: 60 | Churn Cumulative: 4443 | Contributors (this commit): 27 | Commits (past 90d): 7 | Contributors (cumulative): 28 | DMM Complexity: 0.8125\n\nDIFF:\n@@ -65,6 +65,13 @@ def _prepare_response_content(\n     exclude_none: bool = False,\n ) -> Any:\n     if isinstance(res, BaseModel):\n+        read_with_orm_mode = getattr(res.__config__, \"read_with_orm_mode\", None)\n+        if read_with_orm_mode:\n+            # Let from_orm extract the data from this model instead of converting\n+            # it now to a dict.\n+            # Otherwise there's no way to extract lazy data that requires attribute\n+            # access instead of dict iteration, e.g. lazy relationships.\n+            return res\n         return res.dict(\n             by_alias=True,\n             exclude_unset=exclude_unset,\n\n@@ -0,0 +1,53 @@\n+from typing import Any\n+\n+from fastapi import FastAPI\n+from fastapi.testclient import TestClient\n+from pydantic import BaseModel\n+\n+\n+class PersonBase(BaseModel):\n+    name: str\n+    lastname: str\n+\n+\n+class Person(PersonBase):\n+    @property\n+    def full_name(self) -> str:\n+        return f\"{self.name} {self.lastname}\"\n+\n+    class Config:\n+        orm_mode = True\n+        read_with_orm_mode = True\n+\n+\n+class PersonCreate(PersonBase):\n+    pass\n+\n+\n+class PersonRead(PersonBase):\n+    full_name: str\n+\n+    class Config:\n+        orm_mode = True\n+\n+\n+app = FastAPI()\n+\n+\n+@app.post(\"/people/\", response_model=PersonRead)\n+def create_person(person: PersonCreate) -> Any:\n+    db_person = Person.from_orm(person)\n+    return db_person\n+\n+\n+client = TestClient(app)\n+\n+\n+def test_read_with_orm_mode() -> None:\n+    person_data = {\"name\": \"Dive\", \"lastname\": \"Wilson\"}\n+    response = client.post(\"/people/\", json=person_data)\n+    data = response.json()\n+    assert response.status_code == 200, response.text\n+    assert data[\"name\"] == person_data[\"name\"]\n+    assert data[\"lastname\"] == person_data[\"lastname\"]\n+    assert data[\"full_name\"] == person_data[\"name\"] + \" \" + person_data[\"lastname\"]\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#7b6e198d314e320256c2ed8b62430b2a42c31cb5", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Î” (Sum/Max): 0/0 | Churn Î”: 2 | Churn Cumulative: 332 | Contributors (this commit): 2 | Commits (past 90d): 7 | Contributors (cumulative): 2 | DMM Complexity: None\n\nDIFF:\n@@ -1,6 +1,6 @@\n \"\"\"FastAPI framework, high performance, easy to learn, fast to code, ready for production\"\"\"\n \n-__version__ = \"0.68.0\"\n+__version__ = \"0.68.1\"\n \n from starlette import status as status\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#4b968c4e3907066a994e125de1fa90768e9c9188", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 19 | Lines Deleted: 7 | Files Changed: 1 | Hunks: 6 | Methods Changed: 2 | Complexity Î” (Sum/Max): 1/1 | Churn Î”: 26 | Churn Cumulative: 26 | Contributors (this commit): 1 | Commits (past 90d): 1 | Contributors (cumulative): 1 | DMM Complexity: None\n\nDIFF:\n@@ -1,14 +1,26 @@\n-import graphene\n+import strawberry\n from fastapi import FastAPI\n-from starlette.graphql import GraphQLApp\n+from strawberry.asgi import GraphQL\n \n \n-class Query(graphene.ObjectType):\n-    hello = graphene.String(name=graphene.String(default_value=\"stranger\"))\n+@strawberry.type\n+class User:\n+    name: str\n+    age: int\n \n-    def resolve_hello(self, info, name):\n-        return \"Hello \" + name\n \n+@strawberry.type\n+class Query:\n+    @strawberry.field\n+    def user(self) -> User:\n+        return User(name=\"Patrick\", age=100)\n+\n+\n+schema = strawberry.Schema(query=Query)\n+\n+\n+graphql_app = GraphQL(schema)\n \n app = FastAPI()\n-app.add_route(\"/\", GraphQLApp(schema=graphene.Schema(query=Query)))\n+app.add_route(\"/graphql\", graphql_app)\n+app.add_websocket_route(\"/graphql\", graphql_app)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#557fe61d9298d213f26357439c59bf3002b78979", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 22 | Lines Deleted: 5 | Files Changed: 1 | Hunks: 8 | Methods Changed: 0 | Complexity Î” (Sum/Max): 0/0 | Churn Î”: 27 | Churn Cumulative: 114 | Contributors (this commit): 1 | Commits (past 90d): 2 | Contributors (cumulative): 1 | DMM Complexity: None\n\nDIFF:\n@@ -1,5 +1,7 @@\n import logging\n+import time\n from pathlib import Path\n+import random\n from typing import Dict, Optional\n \n import yaml\n@@ -45,8 +47,11 @@ if __name__ == \"__main__\":\n     github_event = PartialGitHubEvent.parse_raw(contents)\n     translations_map: Dict[str, int] = yaml.safe_load(translations_path.read_text())\n     logging.debug(f\"Using translations map: {translations_map}\")\n+    sleep_time = random.random() * 10  # random number between 0 and 10 seconds\n     pr = repo.get_pull(github_event.pull_request.number)\n-    logging.debug(f\"Processing PR: {pr.number}\")\n+    logging.debug(\n+        f\"Processing PR: {pr.number}, with anti-race condition sleep time: {sleep_time}\"\n+    )\n     if pr.state == \"open\":\n         logging.debug(f\"PR is open: {pr.number}\")\n         label_strs = set([label.name for label in pr.get_labels()])\n@@ -67,19 +72,31 @@ if __name__ == \"__main__\":\n             for lang in langs:\n                 if lang in translations_map:\n                     num = translations_map[lang]\n-                    logging.info(f\"Found a translation issue for language: {lang} in issue: {num}\")\n+                    logging.info(\n+                        f\"Found a translation issue for language: {lang} in issue: {num}\"\n+                    )\n                     issue = repo.get_issue(num)\n                     message = f\"Good news everyone! ðŸ˜‰ There's a new translation PR to be reviewed: #{pr.number} ðŸŽ‰\"\n                     already_notified = False\n-                    logging.info(f\"Checking current comments in issue: {num} to see if already notified about this PR: {pr.number}\")\n+                    time.sleep(sleep_time)\n+                    logging.info(\n+                        f\"Sleeping for {sleep_time} seconds to avoid race conditions and multiple comments\"\n+                    )\n+                    logging.info(\n+                        f\"Checking current comments in issue: {num} to see if already notified about this PR: {pr.number}\"\n+                    )\n                     for comment in issue.get_comments():\n                         if message in comment.body:\n                             already_notified = True\n                     if not already_notified:\n-                        logging.info(f\"Writing comment in issue: {num} about PR: {pr.number}\")\n+                        logging.info(\n+                            f\"Writing comment in issue: {num} about PR: {pr.number}\"\n+                        )\n                         issue.create_comment(message)\n                     else:\n-                        logging.info(f\"Issue: {num} was already notified of PR: {pr.number}\")\n+                        logging.info(\n+                            f\"Issue: {num} was already notified of PR: {pr.number}\"\n+                        )\n     else:\n         logging.info(\n             f\"Changing labels in a closed PR doesn't trigger comments, PR: {pr.number}\"\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#378fa4ef755a0f814cd61daf571466fde3af9b05", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Î” (Sum/Max): 0/0 | Churn Î”: 2 | Churn Cumulative: 334 | Contributors (this commit): 2 | Commits (past 90d): 5 | Contributors (cumulative): 2 | DMM Complexity: None\n\nDIFF:\n@@ -1,6 +1,6 @@\n \"\"\"FastAPI framework, high performance, easy to learn, fast to code, ready for production\"\"\"\n \n-__version__ = \"0.68.1\"\n+__version__ = \"0.68.2\"\n \n from starlette import status as status\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#11d0a08acda2f4bbc21ca1c5df92b34d8758c842", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 38 | Lines Deleted: 79 | Files Changed: 6 | Hunks: 18 | Methods Changed: 13 | Complexity Î” (Sum/Max): -9/0 | Churn Î”: 117 | Churn Cumulative: 2243 | Contributors (this commit): 27 | Commits (past 90d): 7 | Contributors (cumulative): 38 | DMM Complexity: 0.0\n\nDIFF:\n@@ -4,7 +4,7 @@ from httpx import AsyncClient\n from .main import app\n \n \n-@pytest.mark.asyncio\n+@pytest.mark.anyio\n async def test_root():\n     async with AsyncClient(app=app, base_url=\"http://test\") as ac:\n         response = await ac.get(\"/\")\n\n@@ -1,4 +1,5 @@\n-from typing import Any, Callable\n+import sys\n+from typing import AsyncGenerator, ContextManager, TypeVar\n \n from starlette.concurrency import iterate_in_threadpool as iterate_in_threadpool  # noqa\n from starlette.concurrency import run_in_threadpool as run_in_threadpool  # noqa\n@@ -6,41 +7,21 @@ from starlette.concurrency import (  # noqa\n     run_until_first_complete as run_until_first_complete,\n )\n \n-asynccontextmanager_error_message = \"\"\"\n-FastAPI's contextmanager_in_threadpool require Python 3.7 or above,\n-or the backport for Python 3.6, installed with:\n-    pip install async-generator\n-\"\"\"\n+if sys.version_info >= (3, 7):\n+    from contextlib import AsyncExitStack as AsyncExitStack\n+    from contextlib import asynccontextmanager as asynccontextmanager\n+else:\n+    from contextlib2 import AsyncExitStack as AsyncExitStack  # noqa\n+    from contextlib2 import asynccontextmanager as asynccontextmanager  # noqa\n \n \n-def _fake_asynccontextmanager(func: Callable[..., Any]) -> Callable[..., Any]:\n-    def raiser(*args: Any, **kwargs: Any) -> Any:\n-        raise RuntimeError(asynccontextmanager_error_message)\n-\n-    return raiser\n+_T = TypeVar(\"_T\")\n \n \n-try:\n-    from contextlib import asynccontextmanager as asynccontextmanager  # type: ignore\n-except ImportError:\n-    try:\n-        from async_generator import (  # type: ignore  # isort: skip\n-            asynccontextmanager as asynccontextmanager,\n-        )\n-    except ImportError:  # pragma: no cover\n-        asynccontextmanager = _fake_asynccontextmanager\n-\n-try:\n-    from contextlib import AsyncExitStack as AsyncExitStack  # type: ignore\n-except ImportError:\n-    try:\n-        from async_exit_stack import AsyncExitStack as AsyncExitStack  # type: ignore\n-    except ImportError:  # pragma: no cover\n-        AsyncExitStack = None  # type: ignore\n-\n-\n-@asynccontextmanager  # type: ignore\n-async def contextmanager_in_threadpool(cm: Any) -> Any:\n+@asynccontextmanager\n+async def contextmanager_in_threadpool(\n+    cm: ContextManager[_T],\n+) -> AsyncGenerator[_T, None]:\n     try:\n         yield await run_in_threadpool(cm.__enter__)\n     except Exception as e:\n\n@@ -1,4 +1,3 @@\n-import asyncio\n import dataclasses\n import inspect\n from contextlib import contextmanager\n@@ -6,6 +5,7 @@ from copy import deepcopy\n from typing import (\n     Any,\n     Callable,\n+    Coroutine,\n     Dict,\n     List,\n     Mapping,\n@@ -17,10 +17,10 @@ from typing import (\n     cast,\n )\n \n+import anyio\n from fastapi import params\n from fastapi.concurrency import (\n     AsyncExitStack,\n-    _fake_asynccontextmanager,\n     asynccontextmanager,\n     contextmanager_in_threadpool,\n )\n@@ -266,18 +266,6 @@ def get_typed_annotation(param: inspect.Parameter, globalns: Dict[str, Any]) ->\n     return annotation\n \n \n-async_contextmanager_dependencies_error = \"\"\"\n-FastAPI dependencies with yield require Python 3.7 or above,\n-or the backports for Python 3.6, installed with:\n-    pip install async-exit-stack async-generator\n-\"\"\"\n-\n-\n-def check_dependency_contextmanagers() -> None:\n-    if AsyncExitStack is None or asynccontextmanager == _fake_asynccontextmanager:\n-        raise RuntimeError(async_contextmanager_dependencies_error)  # pragma: no cover\n-\n-\n def get_dependant(\n     *,\n     path: str,\n@@ -289,8 +277,6 @@ def get_dependant(\n     path_param_names = get_path_param_names(path)\n     endpoint_signature = get_typed_signature(call)\n     signature_params = endpoint_signature.parameters\n-    if is_gen_callable(call) or is_async_gen_callable(call):\n-        check_dependency_contextmanagers()\n     dependant = Dependant(call=call, name=name, path=path, use_cache=use_cache)\n     for param_name, param in signature_params.items():\n         if isinstance(param.default, params.Depends):\n@@ -452,14 +438,6 @@ async def solve_generator(\n     if is_gen_callable(call):\n         cm = contextmanager_in_threadpool(contextmanager(call)(**sub_values))\n     elif is_async_gen_callable(call):\n-        if not inspect.isasyncgenfunction(call):\n-            # asynccontextmanager from the async_generator backfill pre python3.7\n-            # does not support callables that are not functions or methods.\n-            # See https://github.com/python-trio/async_generator/issues/32\n-            #\n-            # Expand the callable class into its __call__ method before decorating it.\n-            # This approach will work on newer python versions as well.\n-            call = getattr(call, \"__call__\", None)\n         cm = asynccontextmanager(call)(**sub_values)\n     return await stack.enter_async_context(cm)\n \n@@ -539,10 +517,7 @@ async def solve_dependencies(\n             solved = dependency_cache[sub_dependant.cache_key]\n         elif is_gen_callable(call) or is_async_gen_callable(call):\n             stack = request.scope.get(\"fastapi_astack\")\n-            if stack is None:\n-                raise RuntimeError(\n-                    async_contextmanager_dependencies_error\n-                )  # pragma: no cover\n+            assert isinstance(stack, AsyncExitStack)\n             solved = await solve_generator(\n                 call=call, stack=stack, sub_values=sub_values\n             )\n@@ -697,9 +672,18 @@ async def request_body_to_args(\n                 and lenient_issubclass(field.type_, bytes)\n                 and isinstance(value, sequence_types)\n             ):\n-                awaitables = [sub_value.read() for sub_value in value]\n-                contents = await asyncio.gather(*awaitables)\n-                value = sequence_shape_to_type[field.shape](contents)\n+                results: List[Union[bytes, str]] = []\n+\n+                async def process_fn(\n+                    fn: Callable[[], Coroutine[Any, Any, Any]]\n+                ) -> None:\n+                    result = await fn()\n+                    results.append(result)\n+\n+                async with anyio.create_task_group() as tg:\n+                    for sub_value in value:\n+                        tg.start_soon(process_fn, sub_value.read)\n+                value = sequence_shape_to_type[field.shape](results)\n \n             v_, errors_ = field.validate(value, values, loc=loc)\n \n\n@@ -1,12 +0,0 @@\n-import pytest\n-from fastapi.concurrency import _fake_asynccontextmanager\n-\n-\n-@_fake_asynccontextmanager\n-def never_run():\n-    pass  # pragma: no cover\n-\n-\n-def test_fake_async():\n-    with pytest.raises(RuntimeError):\n-        never_run()\n\n@@ -3,6 +3,6 @@ import pytest\n from docs_src.async_tests.test_main import test_root\n \n \n-@pytest.mark.asyncio\n+@pytest.mark.anyio\n async def test_async_testing():\n     await test_root()\n\n@@ -72,9 +72,15 @@ def test_websocket_with_header_and_query():\n \n def test_websocket_no_credentials():\n     with pytest.raises(WebSocketDisconnect):\n-        client.websocket_connect(\"/items/foo/ws\")\n+        with client.websocket_connect(\"/items/foo/ws\"):\n+            pytest.fail(\n+                \"did not raise WebSocketDisconnect on __enter__\"\n+            )  # pragma: no cover\n \n \n def test_websocket_invalid_data():\n     with pytest.raises(WebSocketDisconnect):\n-        client.websocket_connect(\"/items/foo/ws?q=bar&token=some-token\")\n+        with client.websocket_connect(\"/items/foo/ws?q=bar&token=some-token\"):\n+            pytest.fail(\n+                \"did not raise WebSocketDisconnect on __enter__\"\n+            )  # pragma: no cover\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#921b6f742ad6b53e6b5e90dfeec3fa7570041921", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Î” (Sum/Max): 0/0 | Churn Î”: 2 | Churn Cumulative: 336 | Contributors (this commit): 2 | Commits (past 90d): 6 | Contributors (cumulative): 2 | DMM Complexity: None\n\nDIFF:\n@@ -1,6 +1,6 @@\n \"\"\"FastAPI framework, high performance, easy to learn, fast to code, ready for production\"\"\"\n \n-__version__ = \"0.68.2\"\n+__version__ = \"0.69.0\"\n \n from starlette import status as status\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#5d80e02ae8a3efeed657f659399764886c61dafe", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Î” (Sum/Max): 0/0 | Churn Î”: 2 | Churn Cumulative: 338 | Contributors (this commit): 2 | Commits (past 90d): 7 | Contributors (cumulative): 2 | DMM Complexity: None\n\nDIFF:\n@@ -1,6 +1,6 @@\n \"\"\"FastAPI framework, high performance, easy to learn, fast to code, ready for production\"\"\"\n \n-__version__ = \"0.69.0\"\n+__version__ = \"0.70.0\"\n \n from starlette import status as status\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#3efb4f7edff99fdc12802a85ae9d140ec4772497", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Î” (Sum/Max): 0/0 | Churn Î”: 2 | Churn Cumulative: 340 | Contributors (this commit): 2 | Commits (past 90d): 4 | Contributors (cumulative): 2 | DMM Complexity: None\n\nDIFF:\n@@ -1,6 +1,6 @@\n \"\"\"FastAPI framework, high performance, easy to learn, fast to code, ready for production\"\"\"\n \n-__version__ = \"0.70.0\"\n+__version__ = \"0.70.1\"\n \n from starlette import status as status\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#d08a062ee2121f446537f06c8425cdeb1209e4ea", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 9886 | Lines Deleted: 19 | Files Changed: 174 | Hunks: 173 | Methods Changed: 410 | Complexity Î” (Sum/Max): 529/23 | Churn Î”: 9905 | Churn Cumulative: 10436 | Contributors (this commit): 6 | Commits (past 90d): 174 | Contributors (cumulative): 185 | DMM Complexity: 0.972234273318872\n\nDIFF:\n\n\n@@ -1,6 +1,6 @@\n from fastapi.testclient import TestClient\n \n-from .main_b import app\n+from .main import app\n \n client = TestClient(app)\n \n\n\n@@ -0,0 +1,36 @@\n+from fastapi import FastAPI, Header, HTTPException\n+from pydantic import BaseModel\n+\n+fake_secret_token = \"coneofsilence\"\n+\n+fake_db = {\n+    \"foo\": {\"id\": \"foo\", \"title\": \"Foo\", \"description\": \"There goes my hero\"},\n+    \"bar\": {\"id\": \"bar\", \"title\": \"Bar\", \"description\": \"The bartenders\"},\n+}\n+\n+app = FastAPI()\n+\n+\n+class Item(BaseModel):\n+    id: str\n+    title: str\n+    description: str | None = None\n+\n+\n+@app.get(\"/items/{item_id}\", response_model=Item)\n+async def read_main(item_id: str, x_token: str = Header(...)):\n+    if x_token != fake_secret_token:\n+        raise HTTPException(status_code=400, detail=\"Invalid X-Token header\")\n+    if item_id not in fake_db:\n+        raise HTTPException(status_code=404, detail=\"Item not found\")\n+    return fake_db[item_id]\n+\n+\n+@app.post(\"/items/\", response_model=Item)\n+async def create_item(item: Item, x_token: str = Header(...)):\n+    if x_token != fake_secret_token:\n+        raise HTTPException(status_code=400, detail=\"Invalid X-Token header\")\n+    if item.id in fake_db:\n+        raise HTTPException(status_code=400, detail=\"Item already exists\")\n+    fake_db[item.id] = item\n+    return item\n\n@@ -0,0 +1,65 @@\n+from fastapi.testclient import TestClient\n+\n+from .main import app\n+\n+client = TestClient(app)\n+\n+\n+def test_read_item():\n+    response = client.get(\"/items/foo\", headers={\"X-Token\": \"coneofsilence\"})\n+    assert response.status_code == 200\n+    assert response.json() == {\n+        \"id\": \"foo\",\n+        \"title\": \"Foo\",\n+        \"description\": \"There goes my hero\",\n+    }\n+\n+\n+def test_read_item_bad_token():\n+    response = client.get(\"/items/foo\", headers={\"X-Token\": \"hailhydra\"})\n+    assert response.status_code == 400\n+    assert response.json() == {\"detail\": \"Invalid X-Token header\"}\n+\n+\n+def test_read_inexistent_item():\n+    response = client.get(\"/items/baz\", headers={\"X-Token\": \"coneofsilence\"})\n+    assert response.status_code == 404\n+    assert response.json() == {\"detail\": \"Item not found\"}\n+\n+\n+def test_create_item():\n+    response = client.post(\n+        \"/items/\",\n+        headers={\"X-Token\": \"coneofsilence\"},\n+        json={\"id\": \"foobar\", \"title\": \"Foo Bar\", \"description\": \"The Foo Barters\"},\n+    )\n+    assert response.status_code == 200\n+    assert response.json() == {\n+        \"id\": \"foobar\",\n+        \"title\": \"Foo Bar\",\n+        \"description\": \"The Foo Barters\",\n+    }\n+\n+\n+def test_create_item_bad_token():\n+    response = client.post(\n+        \"/items/\",\n+        headers={\"X-Token\": \"hailhydra\"},\n+        json={\"id\": \"bazz\", \"title\": \"Bazz\", \"description\": \"Drop the bazz\"},\n+    )\n+    assert response.status_code == 400\n+    assert response.json() == {\"detail\": \"Invalid X-Token header\"}\n+\n+\n+def test_create_existing_item():\n+    response = client.post(\n+        \"/items/\",\n+        headers={\"X-Token\": \"coneofsilence\"},\n+        json={\n+            \"id\": \"foo\",\n+            \"title\": \"The Foo ID Stealers\",\n+            \"description\": \"There goes my stealer\",\n+        },\n+    )\n+    assert response.status_code == 400\n+    assert response.json() == {\"detail\": \"Item already exists\"}\n\n@@ -0,0 +1,24 @@\n+from fastapi import BackgroundTasks, Depends, FastAPI\n+\n+app = FastAPI()\n+\n+\n+def write_log(message: str):\n+    with open(\"log.txt\", mode=\"a\") as log:\n+        log.write(message)\n+\n+\n+def get_query(background_tasks: BackgroundTasks, q: str | None = None):\n+    if q:\n+        message = f\"found query: {q}\\n\"\n+        background_tasks.add_task(write_log, message)\n+    return q\n+\n+\n+@app.post(\"/send-notification/{email}\")\n+async def send_notification(\n+    email: str, background_tasks: BackgroundTasks, q: str = Depends(get_query)\n+):\n+    message = f\"message to {email}\\n\"\n+    background_tasks.add_task(write_log, message)\n+    return {\"message\": \"Message sent\"}\n\n@@ -0,0 +1,17 @@\n+from fastapi import FastAPI\n+from pydantic import BaseModel\n+\n+\n+class Item(BaseModel):\n+    name: str\n+    description: str | None = None\n+    price: float\n+    tax: float | None = None\n+\n+\n+app = FastAPI()\n+\n+\n+@app.post(\"/items/\")\n+async def create_item(item: Item):\n+    return item\n\n@@ -0,0 +1,21 @@\n+from fastapi import FastAPI\n+from pydantic import BaseModel\n+\n+\n+class Item(BaseModel):\n+    name: str\n+    description: str | None = None\n+    price: float\n+    tax: float | None = None\n+\n+\n+app = FastAPI()\n+\n+\n+@app.post(\"/items/\")\n+async def create_item(item: Item):\n+    item_dict = item.dict()\n+    if item.tax:\n+        price_with_tax = item.price + item.tax\n+        item_dict.update({\"price_with_tax\": price_with_tax})\n+    return item_dict\n\n@@ -0,0 +1,17 @@\n+from fastapi import FastAPI\n+from pydantic import BaseModel\n+\n+\n+class Item(BaseModel):\n+    name: str\n+    description: str | None = None\n+    price: float\n+    tax: float | None = None\n+\n+\n+app = FastAPI()\n+\n+\n+@app.put(\"/items/{item_id}\")\n+async def create_item(item_id: int, item: Item):\n+    return {\"item_id\": item_id, **item.dict()}\n\n@@ -0,0 +1,20 @@\n+from fastapi import FastAPI\n+from pydantic import BaseModel\n+\n+\n+class Item(BaseModel):\n+    name: str\n+    description: str | None = None\n+    price: float\n+    tax: float | None = None\n+\n+\n+app = FastAPI()\n+\n+\n+@app.put(\"/items/{item_id}\")\n+async def create_item(item_id: int, item: Item, q: str | None = None):\n+    result = {\"item_id\": item_id, **item.dict()}\n+    if q:\n+        result.update({\"q\": q})\n+    return result\n\n@@ -0,0 +1,19 @@\n+from fastapi import Body, FastAPI\n+from pydantic import BaseModel, Field\n+\n+app = FastAPI()\n+\n+\n+class Item(BaseModel):\n+    name: str\n+    description: str | None = Field(\n+        None, title=\"The description of the item\", max_length=300\n+    )\n+    price: float = Field(..., gt=0, description=\"The price must be greater than zero\")\n+    tax: float | None = None\n+\n+\n+@app.put(\"/items/{item_id}\")\n+async def update_item(item_id: int, item: Item = Body(..., embed=True)):\n+    results = {\"item_id\": item_id, \"item\": item}\n+    return results\n\n@@ -0,0 +1,26 @@\n+from fastapi import FastAPI, Path\n+from pydantic import BaseModel\n+\n+app = FastAPI()\n+\n+\n+class Item(BaseModel):\n+    name: str\n+    description: str | None = None\n+    price: float\n+    tax: float | None = None\n+\n+\n+@app.put(\"/items/{item_id}\")\n+async def update_item(\n+    *,\n+    item_id: int = Path(..., title=\"The ID of the item to get\", ge=0, le=1000),\n+    q: str | None = None,\n+    item: Item | None = None,\n+):\n+    results = {\"item_id\": item_id}\n+    if q:\n+        results.update({\"q\": q})\n+    if item:\n+        results.update({\"item\": item})\n+    return results\n\n@@ -0,0 +1,22 @@\n+from fastapi import FastAPI\n+from pydantic import BaseModel\n+\n+app = FastAPI()\n+\n+\n+class Item(BaseModel):\n+    name: str\n+    description: str | None = None\n+    price: float\n+    tax: float | None = None\n+\n+\n+class User(BaseModel):\n+    username: str\n+    full_name: str | None = None\n+\n+\n+@app.put(\"/items/{item_id}\")\n+async def update_item(item_id: int, item: Item, user: User):\n+    results = {\"item_id\": item_id, \"item\": item, \"user\": user}\n+    return results\n\n@@ -0,0 +1,24 @@\n+from fastapi import Body, FastAPI\n+from pydantic import BaseModel\n+\n+app = FastAPI()\n+\n+\n+class Item(BaseModel):\n+    name: str\n+    description: str | None = None\n+    price: float\n+    tax: float | None = None\n+\n+\n+class User(BaseModel):\n+    username: str\n+    full_name: str | None = None\n+\n+\n+@app.put(\"/items/{item_id}\")\n+async def update_item(\n+    item_id: int, item: Item, user: User, importance: int = Body(...)\n+):\n+    results = {\"item_id\": item_id, \"item\": item, \"user\": user, \"importance\": importance}\n+    return results\n\n@@ -0,0 +1,31 @@\n+from fastapi import Body, FastAPI\n+from pydantic import BaseModel\n+\n+app = FastAPI()\n+\n+\n+class Item(BaseModel):\n+    name: str\n+    description: str | None = None\n+    price: float\n+    tax: float | None = None\n+\n+\n+class User(BaseModel):\n+    username: str\n+    full_name: str | None = None\n+\n+\n+@app.put(\"/items/{item_id}\")\n+async def update_item(\n+    *,\n+    item_id: int,\n+    item: Item,\n+    user: User,\n+    importance: int = Body(..., gt=0),\n+    q: str | None = None\n+):\n+    results = {\"item_id\": item_id, \"item\": item, \"user\": user, \"importance\": importance}\n+    if q:\n+        results.update({\"q\": q})\n+    return results\n\n@@ -0,0 +1,17 @@\n+from fastapi import Body, FastAPI\n+from pydantic import BaseModel\n+\n+app = FastAPI()\n+\n+\n+class Item(BaseModel):\n+    name: str\n+    description: str | None = None\n+    price: float\n+    tax: float | None = None\n+\n+\n+@app.put(\"/items/{item_id}\")\n+async def update_item(item_id: int, item: Item = Body(..., embed=True)):\n+    results = {\"item_id\": item_id, \"item\": item}\n+    return results\n\n@@ -0,0 +1,18 @@\n+from fastapi import FastAPI\n+from pydantic import BaseModel\n+\n+app = FastAPI()\n+\n+\n+class Item(BaseModel):\n+    name: str\n+    description: str | None = None\n+    price: float\n+    tax: float | None = None\n+    tags: list = []\n+\n+\n+@app.put(\"/items/{item_id}\")\n+async def update_item(item_id: int, item: Item):\n+    results = {\"item_id\": item_id, \"item\": item}\n+    return results\n\n@@ -0,0 +1,18 @@\n+from fastapi import FastAPI\n+from pydantic import BaseModel\n+\n+app = FastAPI()\n+\n+\n+class Item(BaseModel):\n+    name: str\n+    description: str | None = None\n+    price: float\n+    tax: float | None = None\n+    tags: list[str] = []\n+\n+\n+@app.put(\"/items/{item_id}\")\n+async def update_item(item_id: int, item: Item):\n+    results = {\"item_id\": item_id, \"item\": item}\n+    return results\n\n@@ -0,0 +1,20 @@\n+from typing import Optional\n+\n+from fastapi import FastAPI\n+from pydantic import BaseModel\n+\n+app = FastAPI()\n+\n+\n+class Item(BaseModel):\n+    name: str\n+    description: Optional[str] = None\n+    price: float\n+    tax: Optional[float] = None\n+    tags: list[str] = []\n+\n+\n+@app.put(\"/items/{item_id}\")\n+async def update_item(item_id: int, item: Item):\n+    results = {\"item_id\": item_id, \"item\": item}\n+    return results\n\n@@ -0,0 +1,18 @@\n+from fastapi import FastAPI\n+from pydantic import BaseModel\n+\n+app = FastAPI()\n+\n+\n+class Item(BaseModel):\n+    name: str\n+    description: str | None = None\n+    price: float\n+    tax: float | None = None\n+    tags: set[str] = set()\n+\n+\n+@app.put(\"/items/{item_id}\")\n+async def update_item(item_id: int, item: Item):\n+    results = {\"item_id\": item_id, \"item\": item}\n+    return results\n\n@@ -0,0 +1,20 @@\n+from typing import Optional\n+\n+from fastapi import FastAPI\n+from pydantic import BaseModel\n+\n+app = FastAPI()\n+\n+\n+class Item(BaseModel):\n+    name: str\n+    description: Optional[str] = None\n+    price: float\n+    tax: Optional[float] = None\n+    tags: set[str] = set()\n+\n+\n+@app.put(\"/items/{item_id}\")\n+async def update_item(item_id: int, item: Item):\n+    results = {\"item_id\": item_id, \"item\": item}\n+    return results\n\n@@ -0,0 +1,24 @@\n+from fastapi import FastAPI\n+from pydantic import BaseModel\n+\n+app = FastAPI()\n+\n+\n+class Image(BaseModel):\n+    url: str\n+    name: str\n+\n+\n+class Item(BaseModel):\n+    name: str\n+    description: str | None = None\n+    price: float\n+    tax: float | None = None\n+    tags: set[str] = []\n+    image: Image | None = None\n+\n+\n+@app.put(\"/items/{item_id}\")\n+async def update_item(item_id: int, item: Item):\n+    results = {\"item_id\": item_id, \"item\": item}\n+    return results\n\n@@ -0,0 +1,26 @@\n+from typing import Optional\n+\n+from fastapi import FastAPI\n+from pydantic import BaseModel\n+\n+app = FastAPI()\n+\n+\n+class Image(BaseModel):\n+    url: str\n+    name: str\n+\n+\n+class Item(BaseModel):\n+    name: str\n+    description: Optional[str] = None\n+    price: float\n+    tax: Optional[float] = None\n+    tags: set[str] = []\n+    image: Optional[Image] = None\n+\n+\n+@app.put(\"/items/{item_id}\")\n+async def update_item(item_id: int, item: Item):\n+    results = {\"item_id\": item_id, \"item\": item}\n+    return results\n\n@@ -0,0 +1,24 @@\n+from fastapi import FastAPI\n+from pydantic import BaseModel, HttpUrl\n+\n+app = FastAPI()\n+\n+\n+class Image(BaseModel):\n+    url: HttpUrl\n+    name: str\n+\n+\n+class Item(BaseModel):\n+    name: str\n+    description: str | None = None\n+    price: float\n+    tax: float | None = None\n+    tags: set[str] = set()\n+    image: Image | None = None\n+\n+\n+@app.put(\"/items/{item_id}\")\n+async def update_item(item_id: int, item: Item):\n+    results = {\"item_id\": item_id, \"item\": item}\n+    return results\n\n@@ -0,0 +1,26 @@\n+from typing import Optional\n+\n+from fastapi import FastAPI\n+from pydantic import BaseModel, HttpUrl\n+\n+app = FastAPI()\n+\n+\n+class Image(BaseModel):\n+    url: HttpUrl\n+    name: str\n+\n+\n+class Item(BaseModel):\n+    name: str\n+    description: Optional[str] = None\n+    price: float\n+    tax: Optional[float] = None\n+    tags: set[str] = set()\n+    image: Optional[Image] = None\n+\n+\n+@app.put(\"/items/{item_id}\")\n+async def update_item(item_id: int, item: Item):\n+    results = {\"item_id\": item_id, \"item\": item}\n+    return results\n\n@@ -0,0 +1,24 @@\n+from fastapi import FastAPI\n+from pydantic import BaseModel, HttpUrl\n+\n+app = FastAPI()\n+\n+\n+class Image(BaseModel):\n+    url: HttpUrl\n+    name: str\n+\n+\n+class Item(BaseModel):\n+    name: str\n+    description: str | None = None\n+    price: float\n+    tax: float | None = None\n+    tags: set[str] = set()\n+    images: list[Image] | None = None\n+\n+\n+@app.put(\"/items/{item_id}\")\n+async def update_item(item_id: int, item: Item):\n+    results = {\"item_id\": item_id, \"item\": item}\n+    return results\n\n@@ -0,0 +1,26 @@\n+from typing import Optional\n+\n+from fastapi import FastAPI\n+from pydantic import BaseModel, HttpUrl\n+\n+app = FastAPI()\n+\n+\n+class Image(BaseModel):\n+    url: HttpUrl\n+    name: str\n+\n+\n+class Item(BaseModel):\n+    name: str\n+    description: Optional[str] = None\n+    price: float\n+    tax: Optional[float] = None\n+    tags: set[str] = set()\n+    images: Optional[list[Image]] = None\n+\n+\n+@app.put(\"/items/{item_id}\")\n+async def update_item(item_id: int, item: Item):\n+    results = {\"item_id\": item_id, \"item\": item}\n+    return results\n\n@@ -0,0 +1,30 @@\n+from fastapi import FastAPI\n+from pydantic import BaseModel, HttpUrl\n+\n+app = FastAPI()\n+\n+\n+class Image(BaseModel):\n+    url: HttpUrl\n+    name: str\n+\n+\n+class Item(BaseModel):\n+    name: str\n+    description: str | None = None\n+    price: float\n+    tax: float | None = None\n+    tags: set[str] = set()\n+    images: list[Image] | None = None\n+\n+\n+class Offer(BaseModel):\n+    name: str\n+    description: str | None = None\n+    price: float\n+    items: list[Item]\n+\n+\n+@app.post(\"/offers/\")\n+async def create_offer(offer: Offer):\n+    return offer\n\n@@ -0,0 +1,32 @@\n+from typing import Optional\n+\n+from fastapi import FastAPI\n+from pydantic import BaseModel, HttpUrl\n+\n+app = FastAPI()\n+\n+\n+class Image(BaseModel):\n+    url: HttpUrl\n+    name: str\n+\n+\n+class Item(BaseModel):\n+    name: str\n+    description: Optional[str] = None\n+    price: float\n+    tax: Optional[float] = None\n+    tags: set[str] = set()\n+    images: Optional[list[Image]] = None\n+\n+\n+class Offer(BaseModel):\n+    name: str\n+    description: Optional[str] = None\n+    price: float\n+    items: list[Item]\n+\n+\n+@app.post(\"/offers/\")\n+async def create_offer(offer: Offer):\n+    return offer\n\n@@ -0,0 +1,14 @@\n+from fastapi import FastAPI\n+from pydantic import BaseModel, HttpUrl\n+\n+app = FastAPI()\n+\n+\n+class Image(BaseModel):\n+    url: HttpUrl\n+    name: str\n+\n+\n+@app.post(\"/images/multiple/\")\n+async def create_multiple_images(images: list[Image]):\n+    return images\n\n@@ -0,0 +1,8 @@\n+from fastapi import FastAPI\n+\n+app = FastAPI()\n+\n+\n+@app.post(\"/index-weights/\")\n+async def create_index_weights(weights: dict[int, float]):\n+    return weights\n\n@@ -0,0 +1,32 @@\n+from fastapi import FastAPI\n+from fastapi.encoders import jsonable_encoder\n+from pydantic import BaseModel\n+\n+app = FastAPI()\n+\n+\n+class Item(BaseModel):\n+    name: str | None = None\n+    description: str | None = None\n+    price: float | None = None\n+    tax: float = 10.5\n+    tags: list[str] = []\n+\n+\n+items = {\n+    \"foo\": {\"name\": \"Foo\", \"price\": 50.2},\n+    \"bar\": {\"name\": \"Bar\", \"description\": \"The bartenders\", \"price\": 62, \"tax\": 20.2},\n+    \"baz\": {\"name\": \"Baz\", \"description\": None, \"price\": 50.2, \"tax\": 10.5, \"tags\": []},\n+}\n+\n+\n+@app.get(\"/items/{item_id}\", response_model=Item)\n+async def read_item(item_id: str):\n+    return items[item_id]\n+\n+\n+@app.put(\"/items/{item_id}\", response_model=Item)\n+async def update_item(item_id: str, item: Item):\n+    update_item_encoded = jsonable_encoder(item)\n+    items[item_id] = update_item_encoded\n+    return update_item_encoded\n\n@@ -0,0 +1,34 @@\n+from typing import Optional\n+\n+from fastapi import FastAPI\n+from fastapi.encoders import jsonable_encoder\n+from pydantic import BaseModel\n+\n+app = FastAPI()\n+\n+\n+class Item(BaseModel):\n+    name: Optional[str] = None\n+    description: Optional[str] = None\n+    price: Optional[float] = None\n+    tax: float = 10.5\n+    tags: list[str] = []\n+\n+\n+items = {\n+    \"foo\": {\"name\": \"Foo\", \"price\": 50.2},\n+    \"bar\": {\"name\": \"Bar\", \"description\": \"The bartenders\", \"price\": 62, \"tax\": 20.2},\n+    \"baz\": {\"name\": \"Baz\", \"description\": None, \"price\": 50.2, \"tax\": 10.5, \"tags\": []},\n+}\n+\n+\n+@app.get(\"/items/{item_id}\", response_model=Item)\n+async def read_item(item_id: str):\n+    return items[item_id]\n+\n+\n+@app.put(\"/items/{item_id}\", response_model=Item)\n+async def update_item(item_id: str, item: Item):\n+    update_item_encoded = jsonable_encoder(item)\n+    items[item_id] = update_item_encoded\n+    return update_item_encoded\n\n@@ -0,0 +1,35 @@\n+from fastapi import FastAPI\n+from fastapi.encoders import jsonable_encoder\n+from pydantic import BaseModel\n+\n+app = FastAPI()\n+\n+\n+class Item(BaseModel):\n+    name: str | None = None\n+    description: str | None = None\n+    price: float | None = None\n+    tax: float = 10.5\n+    tags: list[str] = []\n+\n+\n+items = {\n+    \"foo\": {\"name\": \"Foo\", \"price\": 50.2},\n+    \"bar\": {\"name\": \"Bar\", \"description\": \"The bartenders\", \"price\": 62, \"tax\": 20.2},\n+    \"baz\": {\"name\": \"Baz\", \"description\": None, \"price\": 50.2, \"tax\": 10.5, \"tags\": []},\n+}\n+\n+\n+@app.get(\"/items/{item_id}\", response_model=Item)\n+async def read_item(item_id: str):\n+    return items[item_id]\n+\n+\n+@app.patch(\"/items/{item_id}\", response_model=Item)\n+async def update_item(item_id: str, item: Item):\n+    stored_item_data = items[item_id]\n+    stored_item_model = Item(**stored_item_data)\n+    update_data = item.dict(exclude_unset=True)\n+    updated_item = stored_item_model.copy(update=update_data)\n+    items[item_id] = jsonable_encoder(updated_item)\n+    return updated_item\n\n@@ -0,0 +1,37 @@\n+from typing import Optional\n+\n+from fastapi import FastAPI\n+from fastapi.encoders import jsonable_encoder\n+from pydantic import BaseModel\n+\n+app = FastAPI()\n+\n+\n+class Item(BaseModel):\n+    name: Optional[str] = None\n+    description: Optional[str] = None\n+    price: Optional[float] = None\n+    tax: float = 10.5\n+    tags: list[str] = []\n+\n+\n+items = {\n+    \"foo\": {\"name\": \"Foo\", \"price\": 50.2},\n+    \"bar\": {\"name\": \"Bar\", \"description\": \"The bartenders\", \"price\": 62, \"tax\": 20.2},\n+    \"baz\": {\"name\": \"Baz\", \"description\": None, \"price\": 50.2, \"tax\": 10.5, \"tags\": []},\n+}\n+\n+\n+@app.get(\"/items/{item_id}\", response_model=Item)\n+async def read_item(item_id: str):\n+    return items[item_id]\n+\n+\n+@app.patch(\"/items/{item_id}\", response_model=Item)\n+async def update_item(item_id: str, item: Item):\n+    stored_item_data = items[item_id]\n+    stored_item_model = Item(**stored_item_data)\n+    update_data = item.dict(exclude_unset=True)\n+    updated_item = stored_item_model.copy(update=update_data)\n+    items[item_id] = jsonable_encoder(updated_item)\n+    return updated_item\n\n@@ -0,0 +1,8 @@\n+from fastapi import Cookie, FastAPI\n+\n+app = FastAPI()\n+\n+\n+@app.get(\"/items/\")\n+async def read_items(ads_id: str | None = Cookie(None)):\n+    return {\"ads_id\": ads_id}\n\n@@ -0,0 +1,17 @@\n+from fastapi import Depends, FastAPI\n+\n+app = FastAPI()\n+\n+\n+async def common_parameters(q: str | None = None, skip: int = 0, limit: int = 100):\n+    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n+\n+\n+@app.get(\"/items/\")\n+async def read_items(commons: dict = Depends(common_parameters)):\n+    return commons\n+\n+\n+@app.get(\"/users/\")\n+async def read_users(commons: dict = Depends(common_parameters)):\n+    return commons\n\n@@ -0,0 +1,23 @@\n+from fastapi import Depends, FastAPI\n+\n+app = FastAPI()\n+\n+\n+fake_items_db = [{\"item_name\": \"Foo\"}, {\"item_name\": \"Bar\"}, {\"item_name\": \"Baz\"}]\n+\n+\n+class CommonQueryParams:\n+    def __init__(self, q: str | None = None, skip: int = 0, limit: int = 100):\n+        self.q = q\n+        self.skip = skip\n+        self.limit = limit\n+\n+\n+@app.get(\"/items/\")\n+async def read_items(commons: CommonQueryParams = Depends(CommonQueryParams)):\n+    response = {}\n+    if commons.q:\n+        response.update({\"q\": commons.q})\n+    items = fake_items_db[commons.skip : commons.skip + commons.limit]\n+    response.update({\"items\": items})\n+    return response\n\n@@ -0,0 +1,23 @@\n+from fastapi import Depends, FastAPI\n+\n+app = FastAPI()\n+\n+\n+fake_items_db = [{\"item_name\": \"Foo\"}, {\"item_name\": \"Bar\"}, {\"item_name\": \"Baz\"}]\n+\n+\n+class CommonQueryParams:\n+    def __init__(self, q: str | None = None, skip: int = 0, limit: int = 100):\n+        self.q = q\n+        self.skip = skip\n+        self.limit = limit\n+\n+\n+@app.get(\"/items/\")\n+async def read_items(commons=Depends(CommonQueryParams)):\n+    response = {}\n+    if commons.q:\n+        response.update({\"q\": commons.q})\n+    items = fake_items_db[commons.skip : commons.skip + commons.limit]\n+    response.update({\"items\": items})\n+    return response\n\n@@ -0,0 +1,23 @@\n+from fastapi import Depends, FastAPI\n+\n+app = FastAPI()\n+\n+\n+fake_items_db = [{\"item_name\": \"Foo\"}, {\"item_name\": \"Bar\"}, {\"item_name\": \"Baz\"}]\n+\n+\n+class CommonQueryParams:\n+    def __init__(self, q: str | None = None, skip: int = 0, limit: int = 100):\n+        self.q = q\n+        self.skip = skip\n+        self.limit = limit\n+\n+\n+@app.get(\"/items/\")\n+async def read_items(commons: CommonQueryParams = Depends()):\n+    response = {}\n+    if commons.q:\n+        response.update({\"q\": commons.q})\n+    items = fake_items_db[commons.skip : commons.skip + commons.limit]\n+    response.update({\"items\": items})\n+    return response\n\n@@ -0,0 +1,20 @@\n+from fastapi import Cookie, Depends, FastAPI\n+\n+app = FastAPI()\n+\n+\n+def query_extractor(q: str | None = None):\n+    return q\n+\n+\n+def query_or_cookie_extractor(\n+    q: str = Depends(query_extractor), last_query: str | None = Cookie(None)\n+):\n+    if not q:\n+        return last_query\n+    return q\n+\n+\n+@app.get(\"/items/\")\n+async def read_query(query_or_default: str = Depends(query_or_cookie_extractor)):\n+    return {\"q_or_cookie\": query_or_default}\n\n@@ -0,0 +1,22 @@\n+from datetime import datetime\n+\n+from fastapi import FastAPI\n+from fastapi.encoders import jsonable_encoder\n+from pydantic import BaseModel\n+\n+fake_db = {}\n+\n+\n+class Item(BaseModel):\n+    title: str\n+    timestamp: datetime\n+    description: str | None = None\n+\n+\n+app = FastAPI()\n+\n+\n+@app.put(\"/items/{id}\")\n+def update_item(id: str, item: Item):\n+    json_compatible_item_data = jsonable_encoder(item)\n+    fake_db[id] = json_compatible_item_data\n\n@@ -0,0 +1,27 @@\n+from datetime import datetime, time, timedelta\n+from uuid import UUID\n+\n+from fastapi import Body, FastAPI\n+\n+app = FastAPI()\n+\n+\n+@app.put(\"/items/{item_id}\")\n+async def read_items(\n+    item_id: UUID,\n+    start_datetime: datetime | None = Body(None),\n+    end_datetime: datetime | None = Body(None),\n+    repeat_at: time | None = Body(None),\n+    process_after: timedelta | None = Body(None),\n+):\n+    start_process = start_datetime + process_after\n+    duration = end_datetime - start_process\n+    return {\n+        \"item_id\": item_id,\n+        \"start_datetime\": start_datetime,\n+        \"end_datetime\": end_datetime,\n+        \"repeat_at\": repeat_at,\n+        \"process_after\": process_after,\n+        \"start_process\": start_process,\n+        \"duration\": duration,\n+    }\n\n@@ -0,0 +1,41 @@\n+from fastapi import FastAPI\n+from pydantic import BaseModel, EmailStr\n+\n+app = FastAPI()\n+\n+\n+class UserIn(BaseModel):\n+    username: str\n+    password: str\n+    email: EmailStr\n+    full_name: str | None = None\n+\n+\n+class UserOut(BaseModel):\n+    username: str\n+    email: EmailStr\n+    full_name: str | None = None\n+\n+\n+class UserInDB(BaseModel):\n+    username: str\n+    hashed_password: str\n+    email: EmailStr\n+    full_name: str | None = None\n+\n+\n+def fake_password_hasher(raw_password: str):\n+    return \"supersecret\" + raw_password\n+\n+\n+def fake_save_user(user_in: UserIn):\n+    hashed_password = fake_password_hasher(user_in.password)\n+    user_in_db = UserInDB(**user_in.dict(), hashed_password=hashed_password)\n+    print(\"User saved! ..not really\")\n+    return user_in_db\n+\n+\n+@app.post(\"/user/\", response_model=UserOut)\n+async def create_user(user_in: UserIn):\n+    user_saved = fake_save_user(user_in)\n+    return user_saved\n\n@@ -0,0 +1,39 @@\n+from fastapi import FastAPI\n+from pydantic import BaseModel, EmailStr\n+\n+app = FastAPI()\n+\n+\n+class UserBase(BaseModel):\n+    username: str\n+    email: EmailStr\n+    full_name: str | None = None\n+\n+\n+class UserIn(UserBase):\n+    password: str\n+\n+\n+class UserOut(UserBase):\n+    pass\n+\n+\n+class UserInDB(UserBase):\n+    hashed_password: str\n+\n+\n+def fake_password_hasher(raw_password: str):\n+    return \"supersecret\" + raw_password\n+\n+\n+def fake_save_user(user_in: UserIn):\n+    hashed_password = fake_password_hasher(user_in.password)\n+    user_in_db = UserInDB(**user_in.dict(), hashed_password=hashed_password)\n+    print(\"User saved! ..not really\")\n+    return user_in_db\n+\n+\n+@app.post(\"/user/\", response_model=UserOut)\n+async def create_user(user_in: UserIn):\n+    user_saved = fake_save_user(user_in)\n+    return user_saved\n\n@@ -0,0 +1,35 @@\n+from typing import Union\n+\n+from fastapi import FastAPI\n+from pydantic import BaseModel\n+\n+app = FastAPI()\n+\n+\n+class BaseItem(BaseModel):\n+    description: str\n+    type: str\n+\n+\n+class CarItem(BaseItem):\n+    type = \"car\"\n+\n+\n+class PlaneItem(BaseItem):\n+    type = \"plane\"\n+    size: int\n+\n+\n+items = {\n+    \"item1\": {\"description\": \"All my friends drive a low rider\", \"type\": \"car\"},\n+    \"item2\": {\n+        \"description\": \"Music is my aeroplane, it's my aeroplane\",\n+        \"type\": \"plane\",\n+        \"size\": 5,\n+    },\n+}\n+\n+\n+@app.get(\"/items/{item_id}\", response_model=Union[PlaneItem, CarItem])\n+async def read_item(item_id: str):\n+    return items[item_id]\n\n@@ -0,0 +1,20 @@\n+from fastapi import FastAPI\n+from pydantic import BaseModel\n+\n+app = FastAPI()\n+\n+\n+class Item(BaseModel):\n+    name: str\n+    description: str\n+\n+\n+items = [\n+    {\"name\": \"Foo\", \"description\": \"There comes my hero\"},\n+    {\"name\": \"Red\", \"description\": \"It's my aeroplane\"},\n+]\n+\n+\n+@app.get(\"/items/\", response_model=list[Item])\n+async def read_items():\n+    return items\n\n@@ -0,0 +1,8 @@\n+from fastapi import FastAPI\n+\n+app = FastAPI()\n+\n+\n+@app.get(\"/keyword-weights/\", response_model=dict[str, float])\n+async def read_keyword_weights():\n+    return {\"foo\": 2.3, \"bar\": 3.4}\n\n@@ -0,0 +1,8 @@\n+from fastapi import FastAPI, Header\n+\n+app = FastAPI()\n+\n+\n+@app.get(\"/items/\")\n+async def read_items(user_agent: str | None = Header(None)):\n+    return {\"User-Agent\": user_agent}\n\n@@ -0,0 +1,10 @@\n+from fastapi import FastAPI, Header\n+\n+app = FastAPI()\n+\n+\n+@app.get(\"/items/\")\n+async def read_items(\n+    strange_header: str | None = Header(None, convert_underscores=False)\n+):\n+    return {\"strange_header\": strange_header}\n\n@@ -0,0 +1,8 @@\n+from fastapi import FastAPI, Header\n+\n+app = FastAPI()\n+\n+\n+@app.get(\"/items/\")\n+async def read_items(x_token: list[str] | None = Header(None)):\n+    return {\"X-Token values\": x_token}\n\n@@ -0,0 +1,10 @@\n+from typing import Optional\n+\n+from fastapi import FastAPI, Header\n+\n+app = FastAPI()\n+\n+\n+@app.get(\"/items/\")\n+async def read_items(x_token: Optional[list[str]] = Header(None)):\n+    return {\"X-Token values\": x_token}\n\n@@ -11,7 +11,7 @@ class Item(BaseModel):\n     description: Optional[str] = None\n     price: float\n     tax: Optional[float] = None\n-    tags: Set[str] = []\n+    tags: Set[str] = set()\n \n \n @app.post(\"/items/\", response_model=Item, status_code=status.HTTP_201_CREATED)\n\n@@ -0,0 +1,17 @@\n+from fastapi import FastAPI, status\n+from pydantic import BaseModel\n+\n+app = FastAPI()\n+\n+\n+class Item(BaseModel):\n+    name: str\n+    description: str | None = None\n+    price: float\n+    tax: float | None = None\n+    tags: set[str] = set()\n+\n+\n+@app.post(\"/items/\", response_model=Item, status_code=status.HTTP_201_CREATED)\n+async def create_item(item: Item):\n+    return item\n\n@@ -0,0 +1,19 @@\n+from typing import Optional\n+\n+from fastapi import FastAPI, status\n+from pydantic import BaseModel\n+\n+app = FastAPI()\n+\n+\n+class Item(BaseModel):\n+    name: str\n+    description: Optional[str] = None\n+    price: float\n+    tax: Optional[float] = None\n+    tags: set[str] = set()\n+\n+\n+@app.post(\"/items/\", response_model=Item, status_code=status.HTTP_201_CREATED)\n+async def create_item(item: Item):\n+    return item\n\n@@ -11,7 +11,7 @@ class Item(BaseModel):\n     description: Optional[str] = None\n     price: float\n     tax: Optional[float] = None\n-    tags: Set[str] = []\n+    tags: Set[str] = set()\n \n \n @app.post(\"/items/\", response_model=Item, tags=[\"items\"])\n\n@@ -0,0 +1,27 @@\n+from fastapi import FastAPI\n+from pydantic import BaseModel\n+\n+app = FastAPI()\n+\n+\n+class Item(BaseModel):\n+    name: str\n+    description: str | None = None\n+    price: float\n+    tax: float | None = None\n+    tags: set[str] = set()\n+\n+\n+@app.post(\"/items/\", response_model=Item, tags=[\"items\"])\n+async def create_item(item: Item):\n+    return item\n+\n+\n+@app.get(\"/items/\", tags=[\"items\"])\n+async def read_items():\n+    return [{\"name\": \"Foo\", \"price\": 42}]\n+\n+\n+@app.get(\"/users/\", tags=[\"users\"])\n+async def read_users():\n+    return [{\"username\": \"johndoe\"}]\n\n@@ -0,0 +1,29 @@\n+from typing import Optional\n+\n+from fastapi import FastAPI\n+from pydantic import BaseModel\n+\n+app = FastAPI()\n+\n+\n+class Item(BaseModel):\n+    name: str\n+    description: Optional[str] = None\n+    price: float\n+    tax: Optional[float] = None\n+    tags: set[str] = set()\n+\n+\n+@app.post(\"/items/\", response_model=Item, tags=[\"items\"])\n+async def create_item(item: Item):\n+    return item\n+\n+\n+@app.get(\"/items/\", tags=[\"items\"])\n+async def read_items():\n+    return [{\"name\": \"Foo\", \"price\": 42}]\n+\n+\n+@app.get(\"/users/\", tags=[\"users\"])\n+async def read_users():\n+    return [{\"username\": \"johndoe\"}]\n\n@@ -11,7 +11,7 @@ class Item(BaseModel):\n     description: Optional[str] = None\n     price: float\n     tax: Optional[float] = None\n-    tags: Set[str] = []\n+    tags: Set[str] = set()\n \n \n @app.post(\n\n@@ -0,0 +1,22 @@\n+from fastapi import FastAPI\n+from pydantic import BaseModel\n+\n+app = FastAPI()\n+\n+\n+class Item(BaseModel):\n+    name: str\n+    description: str | None = None\n+    price: float\n+    tax: float | None = None\n+    tags: set[str] = set()\n+\n+\n+@app.post(\n+    \"/items/\",\n+    response_model=Item,\n+    summary=\"Create an item\",\n+    description=\"Create an item with all the information, name, description, price, tax and a set of unique tags\",\n+)\n+async def create_item(item: Item):\n+    return item\n\n@@ -0,0 +1,24 @@\n+from typing import Optional\n+\n+from fastapi import FastAPI\n+from pydantic import BaseModel\n+\n+app = FastAPI()\n+\n+\n+class Item(BaseModel):\n+    name: str\n+    description: Optional[str] = None\n+    price: float\n+    tax: Optional[float] = None\n+    tags: set[str] = set()\n+\n+\n+@app.post(\n+    \"/items/\",\n+    response_model=Item,\n+    summary=\"Create an item\",\n+    description=\"Create an item with all the information, name, description, price, tax and a set of unique tags\",\n+)\n+async def create_item(item: Item):\n+    return item\n\n@@ -11,7 +11,7 @@ class Item(BaseModel):\n     description: Optional[str] = None\n     price: float\n     tax: Optional[float] = None\n-    tags: Set[str] = []\n+    tags: Set[str] = set()\n \n \n @app.post(\"/items/\", response_model=Item, summary=\"Create an item\")\n\n@@ -0,0 +1,26 @@\n+from fastapi import FastAPI\n+from pydantic import BaseModel\n+\n+app = FastAPI()\n+\n+\n+class Item(BaseModel):\n+    name: str\n+    description: str | None = None\n+    price: float\n+    tax: float | None = None\n+    tags: set[str] = set()\n+\n+\n+@app.post(\"/items/\", response_model=Item, summary=\"Create an item\")\n+async def create_item(item: Item):\n+    \"\"\"\n+    Create an item with all the information:\n+\n+    - **name**: each item must have a name\n+    - **description**: a long description\n+    - **price**: required\n+    - **tax**: if the item doesn't have tax, you can omit this\n+    - **tags**: a set of unique tag strings for this item\n+    \"\"\"\n+    return item\n\n@@ -0,0 +1,28 @@\n+from typing import Optional\n+\n+from fastapi import FastAPI\n+from pydantic import BaseModel\n+\n+app = FastAPI()\n+\n+\n+class Item(BaseModel):\n+    name: str\n+    description: Optional[str] = None\n+    price: float\n+    tax: Optional[float] = None\n+    tags: set[str] = set()\n+\n+\n+@app.post(\"/items/\", response_model=Item, summary=\"Create an item\")\n+async def create_item(item: Item):\n+    \"\"\"\n+    Create an item with all the information:\n+\n+    - **name**: each item must have a name\n+    - **description**: a long description\n+    - **price**: required\n+    - **tax**: if the item doesn't have tax, you can omit this\n+    - **tags**: a set of unique tag strings for this item\n+    \"\"\"\n+    return item\n\n@@ -11,7 +11,7 @@ class Item(BaseModel):\n     description: Optional[str] = None\n     price: float\n     tax: Optional[float] = None\n-    tags: Set[str] = []\n+    tags: Set[str] = set()\n \n \n @app.post(\n\n@@ -0,0 +1,31 @@\n+from fastapi import FastAPI\n+from pydantic import BaseModel\n+\n+app = FastAPI()\n+\n+\n+class Item(BaseModel):\n+    name: str\n+    description: str | None = None\n+    price: float\n+    tax: float | None = None\n+    tags: set[str] = set()\n+\n+\n+@app.post(\n+    \"/items/\",\n+    response_model=Item,\n+    summary=\"Create an item\",\n+    response_description=\"The created item\",\n+)\n+async def create_item(item: Item):\n+    \"\"\"\n+    Create an item with all the information:\n+\n+    - **name**: each item must have a name\n+    - **description**: a long description\n+    - **price**: required\n+    - **tax**: if the item doesn't have tax, you can omit this\n+    - **tags**: a set of unique tag strings for this item\n+    \"\"\"\n+    return item\n\n@@ -0,0 +1,33 @@\n+from typing import Optional\n+\n+from fastapi import FastAPI\n+from pydantic import BaseModel\n+\n+app = FastAPI()\n+\n+\n+class Item(BaseModel):\n+    name: str\n+    description: Optional[str] = None\n+    price: float\n+    tax: Optional[float] = None\n+    tags: set[str] = set()\n+\n+\n+@app.post(\n+    \"/items/\",\n+    response_model=Item,\n+    summary=\"Create an item\",\n+    response_description=\"The created item\",\n+)\n+async def create_item(item: Item):\n+    \"\"\"\n+    Create an item with all the information:\n+\n+    - **name**: each item must have a name\n+    - **description**: a long description\n+    - **price**: required\n+    - **tax**: if the item doesn't have tax, you can omit this\n+    - **tags**: a set of unique tag strings for this item\n+    \"\"\"\n+    return item\n\n@@ -0,0 +1,14 @@\n+from fastapi import FastAPI, Path, Query\n+\n+app = FastAPI()\n+\n+\n+@app.get(\"/items/{item_id}\")\n+async def read_items(\n+    item_id: int = Path(..., title=\"The ID of the item to get\"),\n+    q: str | None = Query(None, alias=\"item-query\"),\n+):\n+    results = {\"item_id\": item_id}\n+    if q:\n+        results.update({\"q\": q})\n+    return results\n\n@@ -0,0 +1,3 @@\n+def process_items(items: list[str]):\n+    for item in items:\n+        print(item)\n\n@@ -0,0 +1,2 @@\n+def process_items(items_t: tuple[int, int, str], items_s: set[bytes]):\n+    return items_t, items_s\n\n@@ -1,7 +1,4 @@\n-from typing import Dict\n-\n-\n-def process_items(prices: Dict[str, float]):\n+def process_items(prices: dict[str, float]):\n     for item_name, item_price in prices.items():\n         print(item_name)\n         print(item_price)\n\n@@ -0,0 +1,5 @@\n+from typing import Union\n+\n+\n+def process_item(item: Union[int, str]):\n+    print(item)\n\n@@ -0,0 +1,2 @@\n+def process_item(item: int | str):\n+    print(item)\n\n@@ -0,0 +1,5 @@\n+def say_hi(name: str | None = None):\n+    if name is not None:\n+        print(f\"Hey {name}!\")\n+    else:\n+        print(\"Hello World\")\n\n@@ -0,0 +1,8 @@\n+from typing import Union\n+\n+\n+def say_hi(name: Union[str, None] = None):\n+    if name is not None:\n+        print(f\"Hey {name}!\")\n+    else:\n+        print(\"Hello World\")\n\n@@ -0,0 +1,22 @@\n+from datetime import datetime\n+\n+from pydantic import BaseModel\n+\n+\n+class User(BaseModel):\n+    id: int\n+    name = \"John Doe\"\n+    signup_ts: datetime | None = None\n+    friends: list[int] = []\n+\n+\n+external_data = {\n+    \"id\": \"123\",\n+    \"signup_ts\": \"2017-06-01 12:22\",\n+    \"friends\": [1, \"2\", b\"3\"],\n+}\n+user = User(**external_data)\n+print(user)\n+# > User id=123 name='John Doe' signup_ts=datetime.datetime(2017, 6, 1, 12, 22) friends=[1, 2, 3]\n+print(user.id)\n+# > 123\n\n@@ -0,0 +1,23 @@\n+from datetime import datetime\n+from typing import Optional\n+\n+from pydantic import BaseModel\n+\n+\n+class User(BaseModel):\n+    id: int\n+    name = \"John Doe\"\n+    signup_ts: Optional[datetime] = None\n+    friends: list[int] = []\n+\n+\n+external_data = {\n+    \"id\": \"123\",\n+    \"signup_ts\": \"2017-06-01 12:22\",\n+    \"friends\": [1, \"2\", b\"3\"],\n+}\n+user = User(**external_data)\n+print(user)\n+# > User id=123 name='John Doe' signup_ts=datetime.datetime(2017, 6, 1, 12, 22) friends=[1, 2, 3]\n+print(user.id)\n+# > 123\n\n@@ -0,0 +1,10 @@\n+from fastapi import FastAPI\n+\n+app = FastAPI()\n+\n+\n+@app.get(\"/items/{item_id}\")\n+async def read_item(item_id: str, q: str | None = None):\n+    if q:\n+        return {\"item_id\": item_id, \"q\": q}\n+    return {\"item_id\": item_id}\n\n@@ -0,0 +1,15 @@\n+from fastapi import FastAPI\n+\n+app = FastAPI()\n+\n+\n+@app.get(\"/items/{item_id}\")\n+async def read_item(item_id: str, q: str | None = None, short: bool = False):\n+    item = {\"item_id\": item_id}\n+    if q:\n+        item.update({\"q\": q})\n+    if not short:\n+        item.update(\n+            {\"description\": \"This is an amazing item that has a long description\"}\n+        )\n+    return item\n\n@@ -0,0 +1,17 @@\n+from fastapi import FastAPI\n+\n+app = FastAPI()\n+\n+\n+@app.get(\"/users/{user_id}/items/{item_id}\")\n+async def read_user_item(\n+    user_id: int, item_id: str, q: str | None = None, short: bool = False\n+):\n+    item = {\"item_id\": item_id, \"owner_id\": user_id}\n+    if q:\n+        item.update({\"q\": q})\n+    if not short:\n+        item.update(\n+            {\"description\": \"This is an amazing item that has a long description\"}\n+        )\n+    return item\n\n@@ -0,0 +1,11 @@\n+from fastapi import FastAPI\n+\n+app = FastAPI()\n+\n+\n+@app.get(\"/items/{item_id}\")\n+async def read_user_item(\n+    item_id: str, needy: str, skip: int = 0, limit: int | None = None\n+):\n+    item = {\"item_id\": item_id, \"needy\": needy, \"skip\": skip, \"limit\": limit}\n+    return item\n\n@@ -0,0 +1,13 @@\n+from typing import Union\n+\n+from fastapi import FastAPI\n+\n+app = FastAPI()\n+\n+\n+@app.get(\"/items/{item_id}\")\n+async def read_user_item(\n+    item_id: str, needy: str, skip: int = 0, limit: Union[int, None] = None\n+):\n+    item = {\"item_id\": item_id, \"needy\": needy, \"skip\": skip, \"limit\": limit}\n+    return item\n\n@@ -0,0 +1,11 @@\n+from fastapi import FastAPI\n+\n+app = FastAPI()\n+\n+\n+@app.get(\"/items/\")\n+async def read_items(q: str | None = None):\n+    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n+    if q:\n+        results.update({\"q\": q})\n+    return results\n\n@@ -0,0 +1,11 @@\n+from fastapi import FastAPI, Query\n+\n+app = FastAPI()\n+\n+\n+@app.get(\"/items/\")\n+async def read_items(q: str | None = Query(None, max_length=50)):\n+    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n+    if q:\n+        results.update({\"q\": q})\n+    return results\n\n@@ -0,0 +1,11 @@\n+from fastapi import FastAPI, Query\n+\n+app = FastAPI()\n+\n+\n+@app.get(\"/items/\")\n+async def read_items(q: str | None = Query(None, min_length=3, max_length=50)):\n+    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n+    if q:\n+        results.update({\"q\": q})\n+    return results\n\n@@ -0,0 +1,13 @@\n+from fastapi import FastAPI, Query\n+\n+app = FastAPI()\n+\n+\n+@app.get(\"/items/\")\n+async def read_items(\n+    q: str | None = Query(None, min_length=3, max_length=50, regex=\"^fixedquery$\")\n+):\n+    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n+    if q:\n+        results.update({\"q\": q})\n+    return results\n\n@@ -0,0 +1,11 @@\n+from fastapi import FastAPI, Query\n+\n+app = FastAPI()\n+\n+\n+@app.get(\"/items/\")\n+async def read_items(q: str | None = Query(None, title=\"Query string\", min_length=3)):\n+    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n+    if q:\n+        results.update({\"q\": q})\n+    return results\n\n@@ -0,0 +1,19 @@\n+from fastapi import FastAPI, Query\n+\n+app = FastAPI()\n+\n+\n+@app.get(\"/items/\")\n+async def read_items(\n+    q: str\n+    | None = Query(\n+        None,\n+        title=\"Query string\",\n+        description=\"Query string for the items to search in the database that have a good match\",\n+        min_length=3,\n+    )\n+):\n+    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n+    if q:\n+        results.update({\"q\": q})\n+    return results\n\n@@ -0,0 +1,11 @@\n+from fastapi import FastAPI, Query\n+\n+app = FastAPI()\n+\n+\n+@app.get(\"/items/\")\n+async def read_items(q: str | None = Query(None, alias=\"item-query\")):\n+    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n+    if q:\n+        results.update({\"q\": q})\n+    return results\n\n@@ -0,0 +1,23 @@\n+from fastapi import FastAPI, Query\n+\n+app = FastAPI()\n+\n+\n+@app.get(\"/items/\")\n+async def read_items(\n+    q: str\n+    | None = Query(\n+        None,\n+        alias=\"item-query\",\n+        title=\"Query string\",\n+        description=\"Query string for the items to search in the database that have a good match\",\n+        min_length=3,\n+        max_length=50,\n+        regex=\"^fixedquery$\",\n+        deprecated=True,\n+    )\n+):\n+    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n+    if q:\n+        results.update({\"q\": q})\n+    return results\n\n@@ -0,0 +1,9 @@\n+from fastapi import FastAPI, Query\n+\n+app = FastAPI()\n+\n+\n+@app.get(\"/items/\")\n+async def read_items(q: list[str] | None = Query(None)):\n+    query_items = {\"q\": q}\n+    return query_items\n\n@@ -0,0 +1,11 @@\n+from typing import Optional\n+\n+from fastapi import FastAPI, Query\n+\n+app = FastAPI()\n+\n+\n+@app.get(\"/items/\")\n+async def read_items(q: Optional[list[str]] = Query(None)):\n+    query_items = {\"q\": q}\n+    return query_items\n\n@@ -0,0 +1,9 @@\n+from fastapi import FastAPI, Query\n+\n+app = FastAPI()\n+\n+\n+@app.get(\"/items/\")\n+async def read_items(q: list[str] = Query([\"foo\", \"bar\"])):\n+    query_items = {\"q\": q}\n+    return query_items\n\n@@ -0,0 +1,31 @@\n+from fastapi import FastAPI, File, UploadFile\n+from fastapi.responses import HTMLResponse\n+\n+app = FastAPI()\n+\n+\n+@app.post(\"/files/\")\n+async def create_files(files: list[bytes] = File(...)):\n+    return {\"file_sizes\": [len(file) for file in files]}\n+\n+\n+@app.post(\"/uploadfiles/\")\n+async def create_upload_files(files: list[UploadFile] = File(...)):\n+    return {\"filenames\": [file.filename for file in files]}\n+\n+\n+@app.get(\"/\")\n+async def main():\n+    content = \"\"\"\n+<body>\n+<form action=\"/files/\" enctype=\"multipart/form-data\" method=\"post\">\n+<input name=\"files\" type=\"file\" multiple>\n+<input type=\"submit\">\n+</form>\n+<form action=\"/uploadfiles/\" enctype=\"multipart/form-data\" method=\"post\">\n+<input name=\"files\" type=\"file\" multiple>\n+<input type=\"submit\">\n+</form>\n+</body>\n+    \"\"\"\n+    return HTMLResponse(content=content)\n\n@@ -0,0 +1,17 @@\n+from fastapi import FastAPI\n+from pydantic import BaseModel\n+\n+app = FastAPI()\n+\n+\n+class Item(BaseModel):\n+    name: str\n+    description: str | None = None\n+    price: float\n+    tax: float | None = None\n+    tags: list[str] = []\n+\n+\n+@app.post(\"/items/\", response_model=Item)\n+async def create_item(item: Item):\n+    return item\n\n@@ -0,0 +1,19 @@\n+from typing import Optional\n+\n+from fastapi import FastAPI\n+from pydantic import BaseModel\n+\n+app = FastAPI()\n+\n+\n+class Item(BaseModel):\n+    name: str\n+    description: Optional[str] = None\n+    price: float\n+    tax: Optional[float] = None\n+    tags: list[str] = []\n+\n+\n+@app.post(\"/items/\", response_model=Item)\n+async def create_item(item: Item):\n+    return item\n\n@@ -0,0 +1,17 @@\n+from fastapi import FastAPI\n+from pydantic import BaseModel, EmailStr\n+\n+app = FastAPI()\n+\n+\n+class UserIn(BaseModel):\n+    username: str\n+    password: str\n+    email: EmailStr\n+    full_name: str | None = None\n+\n+\n+# Don't do this in production!\n+@app.post(\"/user/\", response_model=UserIn)\n+async def create_user(user: UserIn):\n+    return user\n\n@@ -0,0 +1,22 @@\n+from fastapi import FastAPI\n+from pydantic import BaseModel, EmailStr\n+\n+app = FastAPI()\n+\n+\n+class UserIn(BaseModel):\n+    username: str\n+    password: str\n+    email: EmailStr\n+    full_name: str | None = None\n+\n+\n+class UserOut(BaseModel):\n+    username: str\n+    email: EmailStr\n+    full_name: str | None = None\n+\n+\n+@app.post(\"/user/\", response_model=UserOut)\n+async def create_user(user: UserIn):\n+    return user\n\n@@ -0,0 +1,24 @@\n+from fastapi import FastAPI\n+from pydantic import BaseModel\n+\n+app = FastAPI()\n+\n+\n+class Item(BaseModel):\n+    name: str\n+    description: str | None = None\n+    price: float\n+    tax: float = 10.5\n+    tags: list[str] = []\n+\n+\n+items = {\n+    \"foo\": {\"name\": \"Foo\", \"price\": 50.2},\n+    \"bar\": {\"name\": \"Bar\", \"description\": \"The bartenders\", \"price\": 62, \"tax\": 20.2},\n+    \"baz\": {\"name\": \"Baz\", \"description\": None, \"price\": 50.2, \"tax\": 10.5, \"tags\": []},\n+}\n+\n+\n+@app.get(\"/items/{item_id}\", response_model=Item, response_model_exclude_unset=True)\n+async def read_item(item_id: str):\n+    return items[item_id]\n\n@@ -0,0 +1,26 @@\n+from typing import Optional\n+\n+from fastapi import FastAPI\n+from pydantic import BaseModel\n+\n+app = FastAPI()\n+\n+\n+class Item(BaseModel):\n+    name: str\n+    description: Optional[str] = None\n+    price: float\n+    tax: float = 10.5\n+    tags: list[str] = []\n+\n+\n+items = {\n+    \"foo\": {\"name\": \"Foo\", \"price\": 50.2},\n+    \"bar\": {\"name\": \"Bar\", \"description\": \"The bartenders\", \"price\": 62, \"tax\": 20.2},\n+    \"baz\": {\"name\": \"Baz\", \"description\": None, \"price\": 50.2, \"tax\": 10.5, \"tags\": []},\n+}\n+\n+\n+@app.get(\"/items/{item_id}\", response_model=Item, response_model_exclude_unset=True)\n+async def read_item(item_id: str):\n+    return items[item_id]\n\n@@ -0,0 +1,37 @@\n+from fastapi import FastAPI\n+from pydantic import BaseModel\n+\n+app = FastAPI()\n+\n+\n+class Item(BaseModel):\n+    name: str\n+    description: str | None = None\n+    price: float\n+    tax: float = 10.5\n+\n+\n+items = {\n+    \"foo\": {\"name\": \"Foo\", \"price\": 50.2},\n+    \"bar\": {\"name\": \"Bar\", \"description\": \"The Bar fighters\", \"price\": 62, \"tax\": 20.2},\n+    \"baz\": {\n+        \"name\": \"Baz\",\n+        \"description\": \"There goes my baz\",\n+        \"price\": 50.2,\n+        \"tax\": 10.5,\n+    },\n+}\n+\n+\n+@app.get(\n+    \"/items/{item_id}/name\",\n+    response_model=Item,\n+    response_model_include={\"name\", \"description\"},\n+)\n+async def read_item_name(item_id: str):\n+    return items[item_id]\n+\n+\n+@app.get(\"/items/{item_id}/public\", response_model=Item, response_model_exclude={\"tax\"})\n+async def read_item_public_data(item_id: str):\n+    return items[item_id]\n\n@@ -0,0 +1,37 @@\n+from fastapi import FastAPI\n+from pydantic import BaseModel\n+\n+app = FastAPI()\n+\n+\n+class Item(BaseModel):\n+    name: str\n+    description: str | None = None\n+    price: float\n+    tax: float = 10.5\n+\n+\n+items = {\n+    \"foo\": {\"name\": \"Foo\", \"price\": 50.2},\n+    \"bar\": {\"name\": \"Bar\", \"description\": \"The Bar fighters\", \"price\": 62, \"tax\": 20.2},\n+    \"baz\": {\n+        \"name\": \"Baz\",\n+        \"description\": \"There goes my baz\",\n+        \"price\": 50.2,\n+        \"tax\": 10.5,\n+    },\n+}\n+\n+\n+@app.get(\n+    \"/items/{item_id}/name\",\n+    response_model=Item,\n+    response_model_include=[\"name\", \"description\"],\n+)\n+async def read_item_name(item_id: str):\n+    return items[item_id]\n+\n+\n+@app.get(\"/items/{item_id}/public\", response_model=Item, response_model_exclude=[\"tax\"])\n+async def read_item_public_data(item_id: str):\n+    return items[item_id]\n\n@@ -0,0 +1,27 @@\n+from fastapi import FastAPI\n+from pydantic import BaseModel\n+\n+app = FastAPI()\n+\n+\n+class Item(BaseModel):\n+    name: str\n+    description: str | None = None\n+    price: float\n+    tax: float | None = None\n+\n+    class Config:\n+        schema_extra = {\n+            \"example\": {\n+                \"name\": \"Foo\",\n+                \"description\": \"A very nice Item\",\n+                \"price\": 35.4,\n+                \"tax\": 3.2,\n+            }\n+        }\n+\n+\n+@app.put(\"/items/{item_id}\")\n+async def update_item(item_id: int, item: Item):\n+    results = {\"item_id\": item_id, \"item\": item}\n+    return results\n\n@@ -0,0 +1,17 @@\n+from fastapi import FastAPI\n+from pydantic import BaseModel, Field\n+\n+app = FastAPI()\n+\n+\n+class Item(BaseModel):\n+    name: str = Field(..., example=\"Foo\")\n+    description: str | None = Field(None, example=\"A very nice Item\")\n+    price: float = Field(..., example=35.4)\n+    tax: float | None = Field(None, example=3.2)\n+\n+\n+@app.put(\"/items/{item_id}\")\n+async def update_item(item_id: int, item: Item):\n+    results = {\"item_id\": item_id, \"item\": item}\n+    return results\n\n@@ -0,0 +1,28 @@\n+from fastapi import Body, FastAPI\n+from pydantic import BaseModel\n+\n+app = FastAPI()\n+\n+\n+class Item(BaseModel):\n+    name: str\n+    description: str | None = None\n+    price: float\n+    tax: float | None = None\n+\n+\n+@app.put(\"/items/{item_id}\")\n+async def update_item(\n+    item_id: int,\n+    item: Item = Body(\n+        ...,\n+        example={\n+            \"name\": \"Foo\",\n+            \"description\": \"A very nice Item\",\n+            \"price\": 35.4,\n+            \"tax\": 3.2,\n+        },\n+    ),\n+):\n+    results = {\"item_id\": item_id, \"item\": item}\n+    return results\n\n@@ -0,0 +1,50 @@\n+from fastapi import Body, FastAPI\n+from pydantic import BaseModel\n+\n+app = FastAPI()\n+\n+\n+class Item(BaseModel):\n+    name: str\n+    description: str | None = None\n+    price: float\n+    tax: float | None = None\n+\n+\n+@app.put(\"/items/{item_id}\")\n+async def update_item(\n+    *,\n+    item_id: int,\n+    item: Item = Body(\n+        ...,\n+        examples={\n+            \"normal\": {\n+                \"summary\": \"A normal example\",\n+                \"description\": \"A **normal** item works correctly.\",\n+                \"value\": {\n+                    \"name\": \"Foo\",\n+                    \"description\": \"A very nice Item\",\n+                    \"price\": 35.4,\n+                    \"tax\": 3.2,\n+                },\n+            },\n+            \"converted\": {\n+                \"summary\": \"An example with converted data\",\n+                \"description\": \"FastAPI can convert price `strings` to actual `numbers` automatically\",\n+                \"value\": {\n+                    \"name\": \"Bar\",\n+                    \"price\": \"35.4\",\n+                },\n+            },\n+            \"invalid\": {\n+                \"summary\": \"Invalid data is rejected with an error\",\n+                \"value\": {\n+                    \"name\": \"Baz\",\n+                    \"price\": \"thirty five point four\",\n+                },\n+            },\n+        },\n+    ),\n+):\n+    results = {\"item_id\": item_id, \"item\": item}\n+    return results\n\n@@ -0,0 +1,30 @@\n+from fastapi import Depends, FastAPI\n+from fastapi.security import OAuth2PasswordBearer\n+from pydantic import BaseModel\n+\n+app = FastAPI()\n+\n+oauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n+\n+\n+class User(BaseModel):\n+    username: str\n+    email: str | None = None\n+    full_name: str | None = None\n+    disabled: bool | None = None\n+\n+\n+def fake_decode_token(token):\n+    return User(\n+        username=token + \"fakedecoded\", email=\"john@example.com\", full_name=\"John Doe\"\n+    )\n+\n+\n+async def get_current_user(token: str = Depends(oauth2_scheme)):\n+    user = fake_decode_token(token)\n+    return user\n+\n+\n+@app.get(\"/users/me\")\n+async def read_users_me(current_user: User = Depends(get_current_user)):\n+    return current_user\n\n@@ -0,0 +1,88 @@\n+from fastapi import Depends, FastAPI, HTTPException, status\n+from fastapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\n+from pydantic import BaseModel\n+\n+fake_users_db = {\n+    \"johndoe\": {\n+        \"username\": \"johndoe\",\n+        \"full_name\": \"John Doe\",\n+        \"email\": \"johndoe@example.com\",\n+        \"hashed_password\": \"fakehashedsecret\",\n+        \"disabled\": False,\n+    },\n+    \"alice\": {\n+        \"username\": \"alice\",\n+        \"full_name\": \"Alice Wonderson\",\n+        \"email\": \"alice@example.com\",\n+        \"hashed_password\": \"fakehashedsecret2\",\n+        \"disabled\": True,\n+    },\n+}\n+\n+app = FastAPI()\n+\n+\n+def fake_hash_password(password: str):\n+    return \"fakehashed\" + password\n+\n+\n+oauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n+\n+\n+class User(BaseModel):\n+    username: str\n+    email: str | None = None\n+    full_name: str | None = None\n+    disabled: bool | None = None\n+\n+\n+class UserInDB(User):\n+    hashed_password: str\n+\n+\n+def get_user(db, username: str):\n+    if username in db:\n+        user_dict = db[username]\n+        return UserInDB(**user_dict)\n+\n+\n+def fake_decode_token(token):\n+    # This doesn't provide any security at all\n+    # Check the next version\n+    user = get_user(fake_users_db, token)\n+    return user\n+\n+\n+async def get_current_user(token: str = Depends(oauth2_scheme)):\n+    user = fake_decode_token(token)\n+    if not user:\n+        raise HTTPException(\n+            status_code=status.HTTP_401_UNAUTHORIZED,\n+            detail=\"Invalid authentication credentials\",\n+            headers={\"WWW-Authenticate\": \"Bearer\"},\n+        )\n+    return user\n+\n+\n+async def get_current_active_user(current_user: User = Depends(get_current_user)):\n+    if current_user.disabled:\n+        raise HTTPException(status_code=400, detail=\"Inactive user\")\n+    return current_user\n+\n+\n+@app.post(\"/token\")\n+async def login(form_data: OAuth2PasswordRequestForm = Depends()):\n+    user_dict = fake_users_db.get(form_data.username)\n+    if not user_dict:\n+        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n+    user = UserInDB(**user_dict)\n+    hashed_password = fake_hash_password(form_data.password)\n+    if not hashed_password == user.hashed_password:\n+        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n+\n+    return {\"access_token\": user.username, \"token_type\": \"bearer\"}\n+\n+\n+@app.get(\"/users/me\")\n+async def read_users_me(current_user: User = Depends(get_current_active_user)):\n+    return current_user\n\n@@ -0,0 +1,137 @@\n+from datetime import datetime, timedelta\n+\n+from fastapi import Depends, FastAPI, HTTPException, status\n+from fastapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\n+from jose import JWTError, jwt\n+from passlib.context import CryptContext\n+from pydantic import BaseModel\n+\n+# to get a string like this run:\n+# openssl rand -hex 32\n+SECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\n+ALGORITHM = \"HS256\"\n+ACCESS_TOKEN_EXPIRE_MINUTES = 30\n+\n+\n+fake_users_db = {\n+    \"johndoe\": {\n+        \"username\": \"johndoe\",\n+        \"full_name\": \"John Doe\",\n+        \"email\": \"johndoe@example.com\",\n+        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n+        \"disabled\": False,\n+    }\n+}\n+\n+\n+class Token(BaseModel):\n+    access_token: str\n+    token_type: str\n+\n+\n+class TokenData(BaseModel):\n+    username: str | None = None\n+\n+\n+class User(BaseModel):\n+    username: str\n+    email: str | None = None\n+    full_name: str | None = None\n+    disabled: bool | None = None\n+\n+\n+class UserInDB(User):\n+    hashed_password: str\n+\n+\n+pwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n+\n+oauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n+\n+app = FastAPI()\n+\n+\n+def verify_password(plain_password, hashed_password):\n+    return pwd_context.verify(plain_password, hashed_password)\n+\n+\n+def get_password_hash(password):\n+    return pwd_context.hash(password)\n+\n+\n+def get_user(db, username: str):\n+    if username in db:\n+        user_dict = db[username]\n+        return UserInDB(**user_dict)\n+\n+\n+def authenticate_user(fake_db, username: str, password: str):\n+    user = get_user(fake_db, username)\n+    if not user:\n+        return False\n+    if not verify_password(password, user.hashed_password):\n+        return False\n+    return user\n+\n+\n+def create_access_token(data: dict, expires_delta: timedelta | None = None):\n+    to_encode = data.copy()\n+    if expires_delta:\n+        expire = datetime.utcnow() + expires_delta\n+    else:\n+        expire = datetime.utcnow() + timedelta(minutes=15)\n+    to_encode.update({\"exp\": expire})\n+    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n+    return encoded_jwt\n+\n+\n+async def get_current_user(token: str = Depends(oauth2_scheme)):\n+    credentials_exception = HTTPException(\n+        status_code=status.HTTP_401_UNAUTHORIZED,\n+        detail=\"Could not validate credentials\",\n+        headers={\"WWW-Authenticate\": \"Bearer\"},\n+    )\n+    try:\n+        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n+        username: str = payload.get(\"sub\")\n+        if username is None:\n+            raise credentials_exception\n+        token_data = TokenData(username=username)\n+    except JWTError:\n+        raise credentials_exception\n+    user = get_user(fake_users_db, username=token_data.username)\n+    if user is None:\n+        raise credentials_exception\n+    return user\n+\n+\n+async def get_current_active_user(current_user: User = Depends(get_current_user)):\n+    if current_user.disabled:\n+        raise HTTPException(status_code=400, detail=\"Inactive user\")\n+    return current_user\n+\n+\n+@app.post(\"/token\", response_model=Token)\n+async def login_for_access_token(form_data: OAuth2PasswordRequestForm = Depends()):\n+    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n+    if not user:\n+        raise HTTPException(\n+            status_code=status.HTTP_401_UNAUTHORIZED,\n+            detail=\"Incorrect username or password\",\n+            headers={\"WWW-Authenticate\": \"Bearer\"},\n+        )\n+    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n+    access_token = create_access_token(\n+        data={\"sub\": user.username}, expires_delta=access_token_expires\n+    )\n+    return {\"access_token\": access_token, \"token_type\": \"bearer\"}\n+\n+\n+@app.get(\"/users/me/\", response_model=User)\n+async def read_users_me(current_user: User = Depends(get_current_active_user)):\n+    return current_user\n+\n+\n+@app.get(\"/users/me/items/\")\n+async def read_own_items(current_user: User = Depends(get_current_active_user)):\n+    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n\n@@ -0,0 +1,172 @@\n+from datetime import datetime, timedelta\n+\n+from fastapi import Depends, FastAPI, HTTPException, Security, status\n+from fastapi.security import (\n+    OAuth2PasswordBearer,\n+    OAuth2PasswordRequestForm,\n+    SecurityScopes,\n+)\n+from jose import JWTError, jwt\n+from passlib.context import CryptContext\n+from pydantic import BaseModel, ValidationError\n+\n+# to get a string like this run:\n+# openssl rand -hex 32\n+SECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\n+ALGORITHM = \"HS256\"\n+ACCESS_TOKEN_EXPIRE_MINUTES = 30\n+\n+\n+fake_users_db = {\n+    \"johndoe\": {\n+        \"username\": \"johndoe\",\n+        \"full_name\": \"John Doe\",\n+        \"email\": \"johndoe@example.com\",\n+        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n+        \"disabled\": False,\n+    },\n+    \"alice\": {\n+        \"username\": \"alice\",\n+        \"full_name\": \"Alice Chains\",\n+        \"email\": \"alicechains@example.com\",\n+        \"hashed_password\": \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\",\n+        \"disabled\": True,\n+    },\n+}\n+\n+\n+class Token(BaseModel):\n+    access_token: str\n+    token_type: str\n+\n+\n+class TokenData(BaseModel):\n+    username: str | None = None\n+    scopes: list[str] = []\n+\n+\n+class User(BaseModel):\n+    username: str\n+    email: str | None = None\n+    full_name: str | None = None\n+    disabled: bool | None = None\n+\n+\n+class UserInDB(User):\n+    hashed_password: str\n+\n+\n+pwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n+\n+oauth2_scheme = OAuth2PasswordBearer(\n+    tokenUrl=\"token\",\n+    scopes={\"me\": \"Read information about the current user.\", \"items\": \"Read items.\"},\n+)\n+\n+app = FastAPI()\n+\n+\n+def verify_password(plain_password, hashed_password):\n+    return pwd_context.verify(plain_password, hashed_password)\n+\n+\n+def get_password_hash(password):\n+    return pwd_context.hash(password)\n+\n+\n+def get_user(db, username: str):\n+    if username in db:\n+        user_dict = db[username]\n+        return UserInDB(**user_dict)\n+\n+\n+def authenticate_user(fake_db, username: str, password: str):\n+    user = get_user(fake_db, username)\n+    if not user:\n+        return False\n+    if not verify_password(password, user.hashed_password):\n+        return False\n+    return user\n+\n+\n+def create_access_token(data: dict, expires_delta: timedelta | None = None):\n+    to_encode = data.copy()\n+    if expires_delta:\n+        expire = datetime.utcnow() + expires_delta\n+    else:\n+        expire = datetime.utcnow() + timedelta(minutes=15)\n+    to_encode.update({\"exp\": expire})\n+    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n+    return encoded_jwt\n+\n+\n+async def get_current_user(\n+    security_scopes: SecurityScopes, token: str = Depends(oauth2_scheme)\n+):\n+    if security_scopes.scopes:\n+        authenticate_value = f'Bearer scope=\"{security_scopes.scope_str}\"'\n+    else:\n+        authenticate_value = f\"Bearer\"\n+    credentials_exception = HTTPException(\n+        status_code=status.HTTP_401_UNAUTHORIZED,\n+        detail=\"Could not validate credentials\",\n+        headers={\"WWW-Authenticate\": authenticate_value},\n+    )\n+    try:\n+        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n+        username: str = payload.get(\"sub\")\n+        if username is None:\n+            raise credentials_exception\n+        token_scopes = payload.get(\"scopes\", [])\n+        token_data = TokenData(scopes=token_scopes, username=username)\n+    except (JWTError, ValidationError):\n+        raise credentials_exception\n+    user = get_user(fake_users_db, username=token_data.username)\n+    if user is None:\n+        raise credentials_exception\n+    for scope in security_scopes.scopes:\n+        if scope not in token_data.scopes:\n+            raise HTTPException(\n+                status_code=status.HTTP_401_UNAUTHORIZED,\n+                detail=\"Not enough permissions\",\n+                headers={\"WWW-Authenticate\": authenticate_value},\n+            )\n+    return user\n+\n+\n+async def get_current_active_user(\n+    current_user: User = Security(get_current_user, scopes=[\"me\"])\n+):\n+    if current_user.disabled:\n+        raise HTTPException(status_code=400, detail=\"Inactive user\")\n+    return current_user\n+\n+\n+@app.post(\"/token\", response_model=Token)\n+async def login_for_access_token(form_data: OAuth2PasswordRequestForm = Depends()):\n+    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n+    if not user:\n+        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n+    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n+    access_token = create_access_token(\n+        data={\"sub\": user.username, \"scopes\": form_data.scopes},\n+        expires_delta=access_token_expires,\n+    )\n+    return {\"access_token\": access_token, \"token_type\": \"bearer\"}\n+\n+\n+@app.get(\"/users/me/\", response_model=User)\n+async def read_users_me(current_user: User = Depends(get_current_active_user)):\n+    return current_user\n+\n+\n+@app.get(\"/users/me/items/\")\n+async def read_own_items(\n+    current_user: User = Security(get_current_active_user, scopes=[\"items\"])\n+):\n+    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n+\n+\n+@app.get(\"/status/\")\n+async def read_system_status(current_user: User = Depends(get_current_user)):\n+    return {\"status\": \"ok\"}\n\n@@ -0,0 +1,173 @@\n+from datetime import datetime, timedelta\n+from typing import Optional\n+\n+from fastapi import Depends, FastAPI, HTTPException, Security, status\n+from fastapi.security import (\n+    OAuth2PasswordBearer,\n+    OAuth2PasswordRequestForm,\n+    SecurityScopes,\n+)\n+from jose import JWTError, jwt\n+from passlib.context import CryptContext\n+from pydantic import BaseModel, ValidationError\n+\n+# to get a string like this run:\n+# openssl rand -hex 32\n+SECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\"\n+ALGORITHM = \"HS256\"\n+ACCESS_TOKEN_EXPIRE_MINUTES = 30\n+\n+\n+fake_users_db = {\n+    \"johndoe\": {\n+        \"username\": \"johndoe\",\n+        \"full_name\": \"John Doe\",\n+        \"email\": \"johndoe@example.com\",\n+        \"hashed_password\": \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",\n+        \"disabled\": False,\n+    },\n+    \"alice\": {\n+        \"username\": \"alice\",\n+        \"full_name\": \"Alice Chains\",\n+        \"email\": \"alicechains@example.com\",\n+        \"hashed_password\": \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\",\n+        \"disabled\": True,\n+    },\n+}\n+\n+\n+class Token(BaseModel):\n+    access_token: str\n+    token_type: str\n+\n+\n+class TokenData(BaseModel):\n+    username: Optional[str] = None\n+    scopes: list[str] = []\n+\n+\n+class User(BaseModel):\n+    username: str\n+    email: Optional[str] = None\n+    full_name: Optional[str] = None\n+    disabled: Optional[bool] = None\n+\n+\n+class UserInDB(User):\n+    hashed_password: str\n+\n+\n+pwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n+\n+oauth2_scheme = OAuth2PasswordBearer(\n+    tokenUrl=\"token\",\n+    scopes={\"me\": \"Read information about the current user.\", \"items\": \"Read items.\"},\n+)\n+\n+app = FastAPI()\n+\n+\n+def verify_password(plain_password, hashed_password):\n+    return pwd_context.verify(plain_password, hashed_password)\n+\n+\n+def get_password_hash(password):\n+    return pwd_context.hash(password)\n+\n+\n+def get_user(db, username: str):\n+    if username in db:\n+        user_dict = db[username]\n+        return UserInDB(**user_dict)\n+\n+\n+def authenticate_user(fake_db, username: str, password: str):\n+    user = get_user(fake_db, username)\n+    if not user:\n+        return False\n+    if not verify_password(password, user.hashed_password):\n+        return False\n+    return user\n+\n+\n+def create_access_token(data: dict, expires_delta: Optional[timedelta] = None):\n+    to_encode = data.copy()\n+    if expires_delta:\n+        expire = datetime.utcnow() + expires_delta\n+    else:\n+        expire = datetime.utcnow() + timedelta(minutes=15)\n+    to_encode.update({\"exp\": expire})\n+    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n+    return encoded_jwt\n+\n+\n+async def get_current_user(\n+    security_scopes: SecurityScopes, token: str = Depends(oauth2_scheme)\n+):\n+    if security_scopes.scopes:\n+        authenticate_value = f'Bearer scope=\"{security_scopes.scope_str}\"'\n+    else:\n+        authenticate_value = f\"Bearer\"\n+    credentials_exception = HTTPException(\n+        status_code=status.HTTP_401_UNAUTHORIZED,\n+        detail=\"Could not validate credentials\",\n+        headers={\"WWW-Authenticate\": authenticate_value},\n+    )\n+    try:\n+        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n+        username: str = payload.get(\"sub\")\n+        if username is None:\n+            raise credentials_exception\n+        token_scopes = payload.get(\"scopes\", [])\n+        token_data = TokenData(scopes=token_scopes, username=username)\n+    except (JWTError, ValidationError):\n+        raise credentials_exception\n+    user = get_user(fake_users_db, username=token_data.username)\n+    if user is None:\n+        raise credentials_exception\n+    for scope in security_scopes.scopes:\n+        if scope not in token_data.scopes:\n+            raise HTTPException(\n+                status_code=status.HTTP_401_UNAUTHORIZED,\n+                detail=\"Not enough permissions\",\n+                headers={\"WWW-Authenticate\": authenticate_value},\n+            )\n+    return user\n+\n+\n+async def get_current_active_user(\n+    current_user: User = Security(get_current_user, scopes=[\"me\"])\n+):\n+    if current_user.disabled:\n+        raise HTTPException(status_code=400, detail=\"Inactive user\")\n+    return current_user\n+\n+\n+@app.post(\"/token\", response_model=Token)\n+async def login_for_access_token(form_data: OAuth2PasswordRequestForm = Depends()):\n+    user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n+    if not user:\n+        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n+    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n+    access_token = create_access_token(\n+        data={\"sub\": user.username, \"scopes\": form_data.scopes},\n+        expires_delta=access_token_expires,\n+    )\n+    return {\"access_token\": access_token, \"token_type\": \"bearer\"}\n+\n+\n+@app.get(\"/users/me/\", response_model=User)\n+async def read_users_me(current_user: User = Depends(get_current_active_user)):\n+    return current_user\n+\n+\n+@app.get(\"/users/me/items/\")\n+async def read_own_items(\n+    current_user: User = Security(get_current_active_user, scopes=[\"items\"])\n+):\n+    return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n+\n+\n+@app.get(\"/status/\")\n+async def read_system_status(current_user: User = Depends(get_current_user)):\n+    return {\"status\": \"ok\"}\n\n\n@@ -0,0 +1,60 @@\n+from fastapi import Depends, FastAPI, HTTPException, Request, Response\n+from sqlalchemy.orm import Session\n+\n+from . import crud, models, schemas\n+from .database import SessionLocal, engine\n+\n+models.Base.metadata.create_all(bind=engine)\n+\n+app = FastAPI()\n+\n+\n+@app.middleware(\"http\")\n+async def db_session_middleware(request: Request, call_next):\n+    response = Response(\"Internal server error\", status_code=500)\n+    try:\n+        request.state.db = SessionLocal()\n+        response = await call_next(request)\n+    finally:\n+        request.state.db.close()\n+    return response\n+\n+\n+# Dependency\n+def get_db(request: Request):\n+    return request.state.db\n+\n+\n+@app.post(\"/users/\", response_model=schemas.User)\n+def create_user(user: schemas.UserCreate, db: Session = Depends(get_db)):\n+    db_user = crud.get_user_by_email(db, email=user.email)\n+    if db_user:\n+        raise HTTPException(status_code=400, detail=\"Email already registered\")\n+    return crud.create_user(db=db, user=user)\n+\n+\n+@app.get(\"/users/\", response_model=list[schemas.User])\n+def read_users(skip: int = 0, limit: int = 100, db: Session = Depends(get_db)):\n+    users = crud.get_users(db, skip=skip, limit=limit)\n+    return users\n+\n+\n+@app.get(\"/users/{user_id}\", response_model=schemas.User)\n+def read_user(user_id: int, db: Session = Depends(get_db)):\n+    db_user = crud.get_user(db, user_id=user_id)\n+    if db_user is None:\n+        raise HTTPException(status_code=404, detail=\"User not found\")\n+    return db_user\n+\n+\n+@app.post(\"/users/{user_id}/items/\", response_model=schemas.Item)\n+def create_item_for_user(\n+    user_id: int, item: schemas.ItemCreate, db: Session = Depends(get_db)\n+):\n+    return crud.create_user_item(db=db, item=item, user_id=user_id)\n+\n+\n+@app.get(\"/items/\", response_model=list[schemas.Item])\n+def read_items(skip: int = 0, limit: int = 100, db: Session = Depends(get_db)):\n+    items = crud.get_items(db, skip=skip, limit=limit)\n+    return items\n\n@@ -0,0 +1,36 @@\n+from sqlalchemy.orm import Session\n+\n+from . import models, schemas\n+\n+\n+def get_user(db: Session, user_id: int):\n+    return db.query(models.User).filter(models.User.id == user_id).first()\n+\n+\n+def get_user_by_email(db: Session, email: str):\n+    return db.query(models.User).filter(models.User.email == email).first()\n+\n+\n+def get_users(db: Session, skip: int = 0, limit: int = 100):\n+    return db.query(models.User).offset(skip).limit(limit).all()\n+\n+\n+def create_user(db: Session, user: schemas.UserCreate):\n+    fake_hashed_password = user.password + \"notreallyhashed\"\n+    db_user = models.User(email=user.email, hashed_password=fake_hashed_password)\n+    db.add(db_user)\n+    db.commit()\n+    db.refresh(db_user)\n+    return db_user\n+\n+\n+def get_items(db: Session, skip: int = 0, limit: int = 100):\n+    return db.query(models.Item).offset(skip).limit(limit).all()\n+\n+\n+def create_user_item(db: Session, item: schemas.ItemCreate, user_id: int):\n+    db_item = models.Item(**item.dict(), owner_id=user_id)\n+    db.add(db_item)\n+    db.commit()\n+    db.refresh(db_item)\n+    return db_item\n\n@@ -0,0 +1,13 @@\n+from sqlalchemy import create_engine\n+from sqlalchemy.ext.declarative import declarative_base\n+from sqlalchemy.orm import sessionmaker\n+\n+SQLALCHEMY_DATABASE_URL = \"sqlite:///./sql_app.db\"\n+# SQLALCHEMY_DATABASE_URL = \"postgresql://user:password@postgresserver/db\"\n+\n+engine = create_engine(\n+    SQLALCHEMY_DATABASE_URL, connect_args={\"check_same_thread\": False}\n+)\n+SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\n+\n+Base = declarative_base()\n\n@@ -0,0 +1,53 @@\n+from fastapi import Depends, FastAPI, HTTPException\n+from sqlalchemy.orm import Session\n+\n+from . import crud, models, schemas\n+from .database import SessionLocal, engine\n+\n+models.Base.metadata.create_all(bind=engine)\n+\n+app = FastAPI()\n+\n+\n+# Dependency\n+def get_db():\n+    db = SessionLocal()\n+    try:\n+        yield db\n+    finally:\n+        db.close()\n+\n+\n+@app.post(\"/users/\", response_model=schemas.User)\n+def create_user(user: schemas.UserCreate, db: Session = Depends(get_db)):\n+    db_user = crud.get_user_by_email(db, email=user.email)\n+    if db_user:\n+        raise HTTPException(status_code=400, detail=\"Email already registered\")\n+    return crud.create_user(db=db, user=user)\n+\n+\n+@app.get(\"/users/\", response_model=list[schemas.User])\n+def read_users(skip: int = 0, limit: int = 100, db: Session = Depends(get_db)):\n+    users = crud.get_users(db, skip=skip, limit=limit)\n+    return users\n+\n+\n+@app.get(\"/users/{user_id}\", response_model=schemas.User)\n+def read_user(user_id: int, db: Session = Depends(get_db)):\n+    db_user = crud.get_user(db, user_id=user_id)\n+    if db_user is None:\n+        raise HTTPException(status_code=404, detail=\"User not found\")\n+    return db_user\n+\n+\n+@app.post(\"/users/{user_id}/items/\", response_model=schemas.Item)\n+def create_item_for_user(\n+    user_id: int, item: schemas.ItemCreate, db: Session = Depends(get_db)\n+):\n+    return crud.create_user_item(db=db, item=item, user_id=user_id)\n+\n+\n+@app.get(\"/items/\", response_model=list[schemas.Item])\n+def read_items(skip: int = 0, limit: int = 100, db: Session = Depends(get_db)):\n+    items = crud.get_items(db, skip=skip, limit=limit)\n+    return items\n\n@@ -0,0 +1,26 @@\n+from sqlalchemy import Boolean, Column, ForeignKey, Integer, String\n+from sqlalchemy.orm import relationship\n+\n+from .database import Base\n+\n+\n+class User(Base):\n+    __tablename__ = \"users\"\n+\n+    id = Column(Integer, primary_key=True, index=True)\n+    email = Column(String, unique=True, index=True)\n+    hashed_password = Column(String)\n+    is_active = Column(Boolean, default=True)\n+\n+    items = relationship(\"Item\", back_populates=\"owner\")\n+\n+\n+class Item(Base):\n+    __tablename__ = \"items\"\n+\n+    id = Column(Integer, primary_key=True, index=True)\n+    title = Column(String, index=True)\n+    description = Column(String, index=True)\n+    owner_id = Column(Integer, ForeignKey(\"users.id\"))\n+\n+    owner = relationship(\"User\", back_populates=\"items\")\n\n@@ -0,0 +1,35 @@\n+from pydantic import BaseModel\n+\n+\n+class ItemBase(BaseModel):\n+    title: str\n+    description: str | None = None\n+\n+\n+class ItemCreate(ItemBase):\n+    pass\n+\n+\n+class Item(ItemBase):\n+    id: int\n+    owner_id: int\n+\n+    class Config:\n+        orm_mode = True\n+\n+\n+class UserBase(BaseModel):\n+    email: str\n+\n+\n+class UserCreate(UserBase):\n+    password: str\n+\n+\n+class User(UserBase):\n+    id: int\n+    is_active: bool\n+    items: list[Item] = []\n+\n+    class Config:\n+        orm_mode = True\n\n\n@@ -0,0 +1,47 @@\n+from fastapi.testclient import TestClient\n+from sqlalchemy import create_engine\n+from sqlalchemy.orm import sessionmaker\n+\n+from ..database import Base\n+from ..main import app, get_db\n+\n+SQLALCHEMY_DATABASE_URL = \"sqlite:///./test.db\"\n+\n+engine = create_engine(\n+    SQLALCHEMY_DATABASE_URL, connect_args={\"check_same_thread\": False}\n+)\n+TestingSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\n+\n+\n+Base.metadata.create_all(bind=engine)\n+\n+\n+def override_get_db():\n+    try:\n+        db = TestingSessionLocal()\n+        yield db\n+    finally:\n+        db.close()\n+\n+\n+app.dependency_overrides[get_db] = override_get_db\n+\n+client = TestClient(app)\n+\n+\n+def test_create_user():\n+    response = client.post(\n+        \"/users/\",\n+        json={\"email\": \"deadpool@example.com\", \"password\": \"chimichangas4life\"},\n+    )\n+    assert response.status_code == 200, response.text\n+    data = response.json()\n+    assert data[\"email\"] == \"deadpool@example.com\"\n+    assert \"id\" in data\n+    user_id = data[\"id\"]\n+\n+    response = client.get(f\"/users/{user_id}\")\n+    assert response.status_code == 200, response.text\n+    data = response.json()\n+    assert data[\"email\"] == \"deadpool@example.com\"\n+    assert data[\"id\"] == user_id\n\n\n@@ -0,0 +1,60 @@\n+from fastapi import Depends, FastAPI, HTTPException, Request, Response\n+from sqlalchemy.orm import Session\n+\n+from . import crud, models, schemas\n+from .database import SessionLocal, engine\n+\n+models.Base.metadata.create_all(bind=engine)\n+\n+app = FastAPI()\n+\n+\n+@app.middleware(\"http\")\n+async def db_session_middleware(request: Request, call_next):\n+    response = Response(\"Internal server error\", status_code=500)\n+    try:\n+        request.state.db = SessionLocal()\n+        response = await call_next(request)\n+    finally:\n+        request.state.db.close()\n+    return response\n+\n+\n+# Dependency\n+def get_db(request: Request):\n+    return request.state.db\n+\n+\n+@app.post(\"/users/\", response_model=schemas.User)\n+def create_user(user: schemas.UserCreate, db: Session = Depends(get_db)):\n+    db_user = crud.get_user_by_email(db, email=user.email)\n+    if db_user:\n+        raise HTTPException(status_code=400, detail=\"Email already registered\")\n+    return crud.create_user(db=db, user=user)\n+\n+\n+@app.get(\"/users/\", response_model=list[schemas.User])\n+def read_users(skip: int = 0, limit: int = 100, db: Session = Depends(get_db)):\n+    users = crud.get_users(db, skip=skip, limit=limit)\n+    return users\n+\n+\n+@app.get(\"/users/{user_id}\", response_model=schemas.User)\n+def read_user(user_id: int, db: Session = Depends(get_db)):\n+    db_user = crud.get_user(db, user_id=user_id)\n+    if db_user is None:\n+        raise HTTPException(status_code=404, detail=\"User not found\")\n+    return db_user\n+\n+\n+@app.post(\"/users/{user_id}/items/\", response_model=schemas.Item)\n+def create_item_for_user(\n+    user_id: int, item: schemas.ItemCreate, db: Session = Depends(get_db)\n+):\n+    return crud.create_user_item(db=db, item=item, user_id=user_id)\n+\n+\n+@app.get(\"/items/\", response_model=list[schemas.Item])\n+def read_items(skip: int = 0, limit: int = 100, db: Session = Depends(get_db)):\n+    items = crud.get_items(db, skip=skip, limit=limit)\n+    return items\n\n@@ -0,0 +1,36 @@\n+from sqlalchemy.orm import Session\n+\n+from . import models, schemas\n+\n+\n+def get_user(db: Session, user_id: int):\n+    return db.query(models.User).filter(models.User.id == user_id).first()\n+\n+\n+def get_user_by_email(db: Session, email: str):\n+    return db.query(models.User).filter(models.User.email == email).first()\n+\n+\n+def get_users(db: Session, skip: int = 0, limit: int = 100):\n+    return db.query(models.User).offset(skip).limit(limit).all()\n+\n+\n+def create_user(db: Session, user: schemas.UserCreate):\n+    fake_hashed_password = user.password + \"notreallyhashed\"\n+    db_user = models.User(email=user.email, hashed_password=fake_hashed_password)\n+    db.add(db_user)\n+    db.commit()\n+    db.refresh(db_user)\n+    return db_user\n+\n+\n+def get_items(db: Session, skip: int = 0, limit: int = 100):\n+    return db.query(models.Item).offset(skip).limit(limit).all()\n+\n+\n+def create_user_item(db: Session, item: schemas.ItemCreate, user_id: int):\n+    db_item = models.Item(**item.dict(), owner_id=user_id)\n+    db.add(db_item)\n+    db.commit()\n+    db.refresh(db_item)\n+    return db_item\n\n@@ -0,0 +1,13 @@\n+from sqlalchemy import create_engine\n+from sqlalchemy.ext.declarative import declarative_base\n+from sqlalchemy.orm import sessionmaker\n+\n+SQLALCHEMY_DATABASE_URL = \"sqlite:///./sql_app.db\"\n+# SQLALCHEMY_DATABASE_URL = \"postgresql://user:password@postgresserver/db\"\n+\n+engine = create_engine(\n+    SQLALCHEMY_DATABASE_URL, connect_args={\"check_same_thread\": False}\n+)\n+SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\n+\n+Base = declarative_base()\n\n@@ -0,0 +1,53 @@\n+from fastapi import Depends, FastAPI, HTTPException\n+from sqlalchemy.orm import Session\n+\n+from . import crud, models, schemas\n+from .database import SessionLocal, engine\n+\n+models.Base.metadata.create_all(bind=engine)\n+\n+app = FastAPI()\n+\n+\n+# Dependency\n+def get_db():\n+    db = SessionLocal()\n+    try:\n+        yield db\n+    finally:\n+        db.close()\n+\n+\n+@app.post(\"/users/\", response_model=schemas.User)\n+def create_user(user: schemas.UserCreate, db: Session = Depends(get_db)):\n+    db_user = crud.get_user_by_email(db, email=user.email)\n+    if db_user:\n+        raise HTTPException(status_code=400, detail=\"Email already registered\")\n+    return crud.create_user(db=db, user=user)\n+\n+\n+@app.get(\"/users/\", response_model=list[schemas.User])\n+def read_users(skip: int = 0, limit: int = 100, db: Session = Depends(get_db)):\n+    users = crud.get_users(db, skip=skip, limit=limit)\n+    return users\n+\n+\n+@app.get(\"/users/{user_id}\", response_model=schemas.User)\n+def read_user(user_id: int, db: Session = Depends(get_db)):\n+    db_user = crud.get_user(db, user_id=user_id)\n+    if db_user is None:\n+        raise HTTPException(status_code=404, detail=\"User not found\")\n+    return db_user\n+\n+\n+@app.post(\"/users/{user_id}/items/\", response_model=schemas.Item)\n+def create_item_for_user(\n+    user_id: int, item: schemas.ItemCreate, db: Session = Depends(get_db)\n+):\n+    return crud.create_user_item(db=db, item=item, user_id=user_id)\n+\n+\n+@app.get(\"/items/\", response_model=list[schemas.Item])\n+def read_items(skip: int = 0, limit: int = 100, db: Session = Depends(get_db)):\n+    items = crud.get_items(db, skip=skip, limit=limit)\n+    return items\n\n@@ -0,0 +1,26 @@\n+from sqlalchemy import Boolean, Column, ForeignKey, Integer, String\n+from sqlalchemy.orm import relationship\n+\n+from .database import Base\n+\n+\n+class User(Base):\n+    __tablename__ = \"users\"\n+\n+    id = Column(Integer, primary_key=True, index=True)\n+    email = Column(String, unique=True, index=True)\n+    hashed_password = Column(String)\n+    is_active = Column(Boolean, default=True)\n+\n+    items = relationship(\"Item\", back_populates=\"owner\")\n+\n+\n+class Item(Base):\n+    __tablename__ = \"items\"\n+\n+    id = Column(Integer, primary_key=True, index=True)\n+    title = Column(String, index=True)\n+    description = Column(String, index=True)\n+    owner_id = Column(Integer, ForeignKey(\"users.id\"))\n+\n+    owner = relationship(\"User\", back_populates=\"items\")\n\n@@ -0,0 +1,37 @@\n+from typing import Optional\n+\n+from pydantic import BaseModel\n+\n+\n+class ItemBase(BaseModel):\n+    title: str\n+    description: Optional[str] = None\n+\n+\n+class ItemCreate(ItemBase):\n+    pass\n+\n+\n+class Item(ItemBase):\n+    id: int\n+    owner_id: int\n+\n+    class Config:\n+        orm_mode = True\n+\n+\n+class UserBase(BaseModel):\n+    email: str\n+\n+\n+class UserCreate(UserBase):\n+    password: str\n+\n+\n+class User(UserBase):\n+    id: int\n+    is_active: bool\n+    items: list[Item] = []\n+\n+    class Config:\n+        orm_mode = True\n\n\n@@ -0,0 +1,47 @@\n+from fastapi.testclient import TestClient\n+from sqlalchemy import create_engine\n+from sqlalchemy.orm import sessionmaker\n+\n+from ..database import Base\n+from ..main import app, get_db\n+\n+SQLALCHEMY_DATABASE_URL = \"sqlite:///./test.db\"\n+\n+engine = create_engine(\n+    SQLALCHEMY_DATABASE_URL, connect_args={\"check_same_thread\": False}\n+)\n+TestingSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\n+\n+\n+Base.metadata.create_all(bind=engine)\n+\n+\n+def override_get_db():\n+    try:\n+        db = TestingSessionLocal()\n+        yield db\n+    finally:\n+        db.close()\n+\n+\n+app.dependency_overrides[get_db] = override_get_db\n+\n+client = TestClient(app)\n+\n+\n+def test_create_user():\n+    response = client.post(\n+        \"/users/\",\n+        json={\"email\": \"deadpool@example.com\", \"password\": \"chimichangas4life\"},\n+    )\n+    assert response.status_code == 200, response.text\n+    data = response.json()\n+    assert data[\"email\"] == \"deadpool@example.com\"\n+    assert \"id\" in data\n+    user_id = data[\"id\"]\n+\n+    response = client.get(f\"/users/{user_id}\")\n+    assert response.status_code == 200, response.text\n+    data = response.json()\n+    assert data[\"email\"] == \"deadpool@example.com\"\n+    assert data[\"id\"] == user_id\n\n@@ -0,0 +1,21 @@\n+import os\n+from pathlib import Path\n+\n+from fastapi.testclient import TestClient\n+\n+from ...utils import needs_py310\n+\n+\n+@needs_py310\n+def test():\n+    from docs_src.background_tasks.tutorial002_py310 import app\n+\n+    client = TestClient(app)\n+    log = Path(\"log.txt\")\n+    if log.is_file():\n+        os.remove(log)  # pragma: no cover\n+    response = client.post(\"/send-notification/foo@example.com?q=some-query\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\"message\": \"Message sent\"}\n+    with open(\"./log.txt\") as f:\n+        assert \"found query: some-query\\nmessage to foo@example.com\" in f.read()\n\n@@ -0,0 +1,292 @@\n+from unittest.mock import patch\n+\n+import pytest\n+from fastapi.testclient import TestClient\n+\n+from ...utils import needs_py310\n+\n+openapi_schema = {\n+    \"openapi\": \"3.0.2\",\n+    \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n+    \"paths\": {\n+        \"/items/\": {\n+            \"post\": {\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                    },\n+                    \"422\": {\n+                        \"description\": \"Validation Error\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\n+                                    \"$ref\": \"#/components/schemas/HTTPValidationError\"\n+                                }\n+                            }\n+                        },\n+                    },\n+                },\n+                \"summary\": \"Create Item\",\n+                \"operationId\": \"create_item_items__post\",\n+                \"requestBody\": {\n+                    \"content\": {\n+                        \"application/json\": {\n+                            \"schema\": {\"$ref\": \"#/components/schemas/Item\"}\n+                        }\n+                    },\n+                    \"required\": True,\n+                },\n+            }\n+        }\n+    },\n+    \"components\": {\n+        \"schemas\": {\n+            \"Item\": {\n+                \"title\": \"Item\",\n+                \"required\": [\"name\", \"price\"],\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"name\": {\"title\": \"Name\", \"type\": \"string\"},\n+                    \"price\": {\"title\": \"Price\", \"type\": \"number\"},\n+                    \"description\": {\"title\": \"Description\", \"type\": \"string\"},\n+                    \"tax\": {\"title\": \"Tax\", \"type\": \"number\"},\n+                },\n+            },\n+            \"ValidationError\": {\n+                \"title\": \"ValidationError\",\n+                \"required\": [\"loc\", \"msg\", \"type\"],\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"loc\": {\n+                        \"title\": \"Location\",\n+                        \"type\": \"array\",\n+                        \"items\": {\"type\": \"string\"},\n+                    },\n+                    \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n+                    \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n+                },\n+            },\n+            \"HTTPValidationError\": {\n+                \"title\": \"HTTPValidationError\",\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"detail\": {\n+                        \"title\": \"Detail\",\n+                        \"type\": \"array\",\n+                        \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n+                    }\n+                },\n+            },\n+        }\n+    },\n+}\n+\n+\n+@pytest.fixture\n+def client():\n+    from docs_src.body.tutorial001_py310 import app\n+\n+    client = TestClient(app)\n+    return client\n+\n+\n+@needs_py310\n+def test_openapi_schema(client: TestClient):\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == openapi_schema\n+\n+\n+price_missing = {\n+    \"detail\": [\n+        {\n+            \"loc\": [\"body\", \"price\"],\n+            \"msg\": \"field required\",\n+            \"type\": \"value_error.missing\",\n+        }\n+    ]\n+}\n+\n+price_not_float = {\n+    \"detail\": [\n+        {\n+            \"loc\": [\"body\", \"price\"],\n+            \"msg\": \"value is not a valid float\",\n+            \"type\": \"type_error.float\",\n+        }\n+    ]\n+}\n+\n+name_price_missing = {\n+    \"detail\": [\n+        {\n+            \"loc\": [\"body\", \"name\"],\n+            \"msg\": \"field required\",\n+            \"type\": \"value_error.missing\",\n+        },\n+        {\n+            \"loc\": [\"body\", \"price\"],\n+            \"msg\": \"field required\",\n+            \"type\": \"value_error.missing\",\n+        },\n+    ]\n+}\n+\n+body_missing = {\n+    \"detail\": [\n+        {\"loc\": [\"body\"], \"msg\": \"field required\", \"type\": \"value_error.missing\"}\n+    ]\n+}\n+\n+\n+@needs_py310\n+@pytest.mark.parametrize(\n+    \"path,body,expected_status,expected_response\",\n+    [\n+        (\n+            \"/items/\",\n+            {\"name\": \"Foo\", \"price\": 50.5},\n+            200,\n+            {\"name\": \"Foo\", \"price\": 50.5, \"description\": None, \"tax\": None},\n+        ),\n+        (\n+            \"/items/\",\n+            {\"name\": \"Foo\", \"price\": \"50.5\"},\n+            200,\n+            {\"name\": \"Foo\", \"price\": 50.5, \"description\": None, \"tax\": None},\n+        ),\n+        (\n+            \"/items/\",\n+            {\"name\": \"Foo\", \"price\": \"50.5\", \"description\": \"Some Foo\"},\n+            200,\n+            {\"name\": \"Foo\", \"price\": 50.5, \"description\": \"Some Foo\", \"tax\": None},\n+        ),\n+        (\n+            \"/items/\",\n+            {\"name\": \"Foo\", \"price\": \"50.5\", \"description\": \"Some Foo\", \"tax\": 0.3},\n+            200,\n+            {\"name\": \"Foo\", \"price\": 50.5, \"description\": \"Some Foo\", \"tax\": 0.3},\n+        ),\n+        (\"/items/\", {\"name\": \"Foo\"}, 422, price_missing),\n+        (\"/items/\", {\"name\": \"Foo\", \"price\": \"twenty\"}, 422, price_not_float),\n+        (\"/items/\", {}, 422, name_price_missing),\n+        (\"/items/\", None, 422, body_missing),\n+    ],\n+)\n+def test_post_body(path, body, expected_status, expected_response, client: TestClient):\n+    response = client.post(path, json=body)\n+    assert response.status_code == expected_status\n+    assert response.json() == expected_response\n+\n+\n+@needs_py310\n+def test_post_broken_body(client: TestClient):\n+    response = client.post(\n+        \"/items/\",\n+        headers={\"content-type\": \"application/json\"},\n+        data=\"{some broken json}\",\n+    )\n+    assert response.status_code == 422, response.text\n+    assert response.json() == {\n+        \"detail\": [\n+            {\n+                \"loc\": [\"body\", 1],\n+                \"msg\": \"Expecting property name enclosed in double quotes: line 1 column 2 (char 1)\",\n+                \"type\": \"value_error.jsondecode\",\n+                \"ctx\": {\n+                    \"msg\": \"Expecting property name enclosed in double quotes\",\n+                    \"doc\": \"{some broken json}\",\n+                    \"pos\": 1,\n+                    \"lineno\": 1,\n+                    \"colno\": 2,\n+                },\n+            }\n+        ]\n+    }\n+\n+\n+@needs_py310\n+def test_post_form_for_json(client: TestClient):\n+    response = client.post(\"/items/\", data={\"name\": \"Foo\", \"price\": 50.5})\n+    assert response.status_code == 422, response.text\n+    assert response.json() == {\n+        \"detail\": [\n+            {\n+                \"loc\": [\"body\"],\n+                \"msg\": \"value is not a valid dict\",\n+                \"type\": \"type_error.dict\",\n+            }\n+        ]\n+    }\n+\n+\n+@needs_py310\n+def test_explicit_content_type(client: TestClient):\n+    response = client.post(\n+        \"/items/\",\n+        data='{\"name\": \"Foo\", \"price\": 50.5}',\n+        headers={\"Content-Type\": \"application/json\"},\n+    )\n+    assert response.status_code == 200, response.text\n+\n+\n+@needs_py310\n+def test_geo_json(client: TestClient):\n+    response = client.post(\n+        \"/items/\",\n+        data='{\"name\": \"Foo\", \"price\": 50.5}',\n+        headers={\"Content-Type\": \"application/geo+json\"},\n+    )\n+    assert response.status_code == 200, response.text\n+\n+\n+@needs_py310\n+def test_no_content_type_is_json(client: TestClient):\n+    response = client.post(\n+        \"/items/\",\n+        data='{\"name\": \"Foo\", \"price\": 50.5}',\n+    )\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n+        \"name\": \"Foo\",\n+        \"description\": None,\n+        \"price\": 50.5,\n+        \"tax\": None,\n+    }\n+\n+\n+@needs_py310\n+def test_wrong_headers(client: TestClient):\n+    data = '{\"name\": \"Foo\", \"price\": 50.5}'\n+    invalid_dict = {\n+        \"detail\": [\n+            {\n+                \"loc\": [\"body\"],\n+                \"msg\": \"value is not a valid dict\",\n+                \"type\": \"type_error.dict\",\n+            }\n+        ]\n+    }\n+\n+    response = client.post(\"/items/\", data=data, headers={\"Content-Type\": \"text/plain\"})\n+    assert response.status_code == 422, response.text\n+    assert response.json() == invalid_dict\n+\n+    response = client.post(\n+        \"/items/\", data=data, headers={\"Content-Type\": \"application/geo+json-seq\"}\n+    )\n+    assert response.status_code == 422, response.text\n+    assert response.json() == invalid_dict\n+    response = client.post(\n+        \"/items/\", data=data, headers={\"Content-Type\": \"application/not-really-json\"}\n+    )\n+    assert response.status_code == 422, response.text\n+    assert response.json() == invalid_dict\n+\n+\n+@needs_py310\n+def test_other_exceptions(client: TestClient):\n+    with patch(\"json.loads\", side_effect=Exception):\n+        response = client.post(\"/items/\", json={\"test\": \"test2\"})\n+        assert response.status_code == 400, response.text\n\n@@ -0,0 +1,176 @@\n+import pytest\n+from fastapi.testclient import TestClient\n+\n+from ...utils import needs_py310\n+\n+openapi_schema = {\n+    \"openapi\": \"3.0.2\",\n+    \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n+    \"paths\": {\n+        \"/items/{item_id}\": {\n+            \"put\": {\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                    },\n+                    \"422\": {\n+                        \"description\": \"Validation Error\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\n+                                    \"$ref\": \"#/components/schemas/HTTPValidationError\"\n+                                }\n+                            }\n+                        },\n+                    },\n+                },\n+                \"summary\": \"Update Item\",\n+                \"operationId\": \"update_item_items__item_id__put\",\n+                \"parameters\": [\n+                    {\n+                        \"required\": True,\n+                        \"schema\": {\"title\": \"Item Id\", \"type\": \"integer\"},\n+                        \"name\": \"item_id\",\n+                        \"in\": \"path\",\n+                    }\n+                ],\n+                \"requestBody\": {\n+                    \"content\": {\n+                        \"application/json\": {\n+                            \"schema\": {\n+                                \"$ref\": \"#/components/schemas/Body_update_item_items__item_id__put\"\n+                            }\n+                        }\n+                    },\n+                    \"required\": True,\n+                },\n+            }\n+        }\n+    },\n+    \"components\": {\n+        \"schemas\": {\n+            \"Item\": {\n+                \"title\": \"Item\",\n+                \"required\": [\"name\", \"price\"],\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"name\": {\"title\": \"Name\", \"type\": \"string\"},\n+                    \"description\": {\n+                        \"title\": \"The description of the item\",\n+                        \"maxLength\": 300,\n+                        \"type\": \"string\",\n+                    },\n+                    \"price\": {\n+                        \"title\": \"Price\",\n+                        \"exclusiveMinimum\": 0.0,\n+                        \"type\": \"number\",\n+                        \"description\": \"The price must be greater than zero\",\n+                    },\n+                    \"tax\": {\"title\": \"Tax\", \"type\": \"number\"},\n+                },\n+            },\n+            \"Body_update_item_items__item_id__put\": {\n+                \"title\": \"Body_update_item_items__item_id__put\",\n+                \"required\": [\"item\"],\n+                \"type\": \"object\",\n+                \"properties\": {\"item\": {\"$ref\": \"#/components/schemas/Item\"}},\n+            },\n+            \"ValidationError\": {\n+                \"title\": \"ValidationError\",\n+                \"required\": [\"loc\", \"msg\", \"type\"],\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"loc\": {\n+                        \"title\": \"Location\",\n+                        \"type\": \"array\",\n+                        \"items\": {\"type\": \"string\"},\n+                    },\n+                    \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n+                    \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n+                },\n+            },\n+            \"HTTPValidationError\": {\n+                \"title\": \"HTTPValidationError\",\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"detail\": {\n+                        \"title\": \"Detail\",\n+                        \"type\": \"array\",\n+                        \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n+                    }\n+                },\n+            },\n+        }\n+    },\n+}\n+\n+\n+@pytest.fixture(name=\"client\")\n+def get_client():\n+    from docs_src.body_fields.tutorial001_py310 import app\n+\n+    client = TestClient(app)\n+    return client\n+\n+\n+@needs_py310\n+def test_openapi_schema(client: TestClient):\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == openapi_schema\n+\n+\n+price_not_greater = {\n+    \"detail\": [\n+        {\n+            \"ctx\": {\"limit_value\": 0},\n+            \"loc\": [\"body\", \"item\", \"price\"],\n+            \"msg\": \"ensure this value is greater than 0\",\n+            \"type\": \"value_error.number.not_gt\",\n+        }\n+    ]\n+}\n+\n+\n+@needs_py310\n+@pytest.mark.parametrize(\n+    \"path,body,expected_status,expected_response\",\n+    [\n+        (\n+            \"/items/5\",\n+            {\"item\": {\"name\": \"Foo\", \"price\": 3.0}},\n+            200,\n+            {\n+                \"item_id\": 5,\n+                \"item\": {\"name\": \"Foo\", \"price\": 3.0, \"description\": None, \"tax\": None},\n+            },\n+        ),\n+        (\n+            \"/items/6\",\n+            {\n+                \"item\": {\n+                    \"name\": \"Bar\",\n+                    \"price\": 0.2,\n+                    \"description\": \"Some bar\",\n+                    \"tax\": \"5.4\",\n+                }\n+            },\n+            200,\n+            {\n+                \"item_id\": 6,\n+                \"item\": {\n+                    \"name\": \"Bar\",\n+                    \"price\": 0.2,\n+                    \"description\": \"Some bar\",\n+                    \"tax\": 5.4,\n+                },\n+            },\n+        ),\n+        (\"/items/5\", {\"item\": {\"name\": \"Foo\", \"price\": -3.0}}, 422, price_not_greater),\n+    ],\n+)\n+def test(path, body, expected_status, expected_response, client: TestClient):\n+    response = client.put(path, json=body)\n+    assert response.status_code == expected_status\n+    assert response.json() == expected_response\n\n@@ -0,0 +1,155 @@\n+import pytest\n+from fastapi.testclient import TestClient\n+\n+from ...utils import needs_py310\n+\n+openapi_schema = {\n+    \"openapi\": \"3.0.2\",\n+    \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n+    \"paths\": {\n+        \"/items/{item_id}\": {\n+            \"put\": {\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                    },\n+                    \"422\": {\n+                        \"description\": \"Validation Error\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\n+                                    \"$ref\": \"#/components/schemas/HTTPValidationError\"\n+                                }\n+                            }\n+                        },\n+                    },\n+                },\n+                \"summary\": \"Update Item\",\n+                \"operationId\": \"update_item_items__item_id__put\",\n+                \"parameters\": [\n+                    {\n+                        \"required\": True,\n+                        \"schema\": {\n+                            \"title\": \"The ID of the item to get\",\n+                            \"maximum\": 1000.0,\n+                            \"minimum\": 0.0,\n+                            \"type\": \"integer\",\n+                        },\n+                        \"name\": \"item_id\",\n+                        \"in\": \"path\",\n+                    },\n+                    {\n+                        \"required\": False,\n+                        \"schema\": {\"title\": \"Q\", \"type\": \"string\"},\n+                        \"name\": \"q\",\n+                        \"in\": \"query\",\n+                    },\n+                ],\n+                \"requestBody\": {\n+                    \"content\": {\n+                        \"application/json\": {\n+                            \"schema\": {\"$ref\": \"#/components/schemas/Item\"}\n+                        }\n+                    }\n+                },\n+            }\n+        }\n+    },\n+    \"components\": {\n+        \"schemas\": {\n+            \"Item\": {\n+                \"title\": \"Item\",\n+                \"required\": [\"name\", \"price\"],\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"name\": {\"title\": \"Name\", \"type\": \"string\"},\n+                    \"price\": {\"title\": \"Price\", \"type\": \"number\"},\n+                    \"description\": {\"title\": \"Description\", \"type\": \"string\"},\n+                    \"tax\": {\"title\": \"Tax\", \"type\": \"number\"},\n+                },\n+            },\n+            \"ValidationError\": {\n+                \"title\": \"ValidationError\",\n+                \"required\": [\"loc\", \"msg\", \"type\"],\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"loc\": {\n+                        \"title\": \"Location\",\n+                        \"type\": \"array\",\n+                        \"items\": {\"type\": \"string\"},\n+                    },\n+                    \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n+                    \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n+                },\n+            },\n+            \"HTTPValidationError\": {\n+                \"title\": \"HTTPValidationError\",\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"detail\": {\n+                        \"title\": \"Detail\",\n+                        \"type\": \"array\",\n+                        \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n+                    }\n+                },\n+            },\n+        }\n+    },\n+}\n+\n+\n+@pytest.fixture(name=\"client\")\n+def get_client():\n+    from docs_src.body_multiple_params.tutorial001_py310 import app\n+\n+    client = TestClient(app)\n+    return client\n+\n+\n+@needs_py310\n+def test_openapi_schema(client: TestClient):\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == openapi_schema\n+\n+\n+item_id_not_int = {\n+    \"detail\": [\n+        {\n+            \"loc\": [\"path\", \"item_id\"],\n+            \"msg\": \"value is not a valid integer\",\n+            \"type\": \"type_error.integer\",\n+        }\n+    ]\n+}\n+\n+\n+@needs_py310\n+@pytest.mark.parametrize(\n+    \"path,body,expected_status,expected_response\",\n+    [\n+        (\n+            \"/items/5?q=bar\",\n+            {\"name\": \"Foo\", \"price\": 50.5},\n+            200,\n+            {\n+                \"item_id\": 5,\n+                \"item\": {\n+                    \"name\": \"Foo\",\n+                    \"price\": 50.5,\n+                    \"description\": None,\n+                    \"tax\": None,\n+                },\n+                \"q\": \"bar\",\n+            },\n+        ),\n+        (\"/items/5?q=bar\", None, 200, {\"item_id\": 5, \"q\": \"bar\"}),\n+        (\"/items/5\", None, 200, {\"item_id\": 5}),\n+        (\"/items/foo\", None, 422, item_id_not_int),\n+    ],\n+)\n+def test_post_body(path, body, expected_status, expected_response, client: TestClient):\n+    response = client.put(path, json=body)\n+    assert response.status_code == expected_status\n+    assert response.json() == expected_response\n\n@@ -0,0 +1,206 @@\n+import pytest\n+from fastapi.testclient import TestClient\n+\n+from ...utils import needs_py310\n+\n+openapi_schema = {\n+    \"openapi\": \"3.0.2\",\n+    \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n+    \"paths\": {\n+        \"/items/{item_id}\": {\n+            \"put\": {\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                    },\n+                    \"422\": {\n+                        \"description\": \"Validation Error\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\n+                                    \"$ref\": \"#/components/schemas/HTTPValidationError\"\n+                                }\n+                            }\n+                        },\n+                    },\n+                },\n+                \"summary\": \"Update Item\",\n+                \"operationId\": \"update_item_items__item_id__put\",\n+                \"parameters\": [\n+                    {\n+                        \"required\": True,\n+                        \"schema\": {\"title\": \"Item Id\", \"type\": \"integer\"},\n+                        \"name\": \"item_id\",\n+                        \"in\": \"path\",\n+                    }\n+                ],\n+                \"requestBody\": {\n+                    \"content\": {\n+                        \"application/json\": {\n+                            \"schema\": {\n+                                \"$ref\": \"#/components/schemas/Body_update_item_items__item_id__put\"\n+                            }\n+                        }\n+                    },\n+                    \"required\": True,\n+                },\n+            }\n+        }\n+    },\n+    \"components\": {\n+        \"schemas\": {\n+            \"Item\": {\n+                \"title\": \"Item\",\n+                \"required\": [\"name\", \"price\"],\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"name\": {\"title\": \"Name\", \"type\": \"string\"},\n+                    \"price\": {\"title\": \"Price\", \"type\": \"number\"},\n+                    \"description\": {\"title\": \"Description\", \"type\": \"string\"},\n+                    \"tax\": {\"title\": \"Tax\", \"type\": \"number\"},\n+                },\n+            },\n+            \"User\": {\n+                \"title\": \"User\",\n+                \"required\": [\"username\"],\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"username\": {\"title\": \"Username\", \"type\": \"string\"},\n+                    \"full_name\": {\"title\": \"Full Name\", \"type\": \"string\"},\n+                },\n+            },\n+            \"Body_update_item_items__item_id__put\": {\n+                \"title\": \"Body_update_item_items__item_id__put\",\n+                \"required\": [\"item\", \"user\", \"importance\"],\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"item\": {\"$ref\": \"#/components/schemas/Item\"},\n+                    \"user\": {\"$ref\": \"#/components/schemas/User\"},\n+                    \"importance\": {\"title\": \"Importance\", \"type\": \"integer\"},\n+                },\n+            },\n+            \"ValidationError\": {\n+                \"title\": \"ValidationError\",\n+                \"required\": [\"loc\", \"msg\", \"type\"],\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"loc\": {\n+                        \"title\": \"Location\",\n+                        \"type\": \"array\",\n+                        \"items\": {\"type\": \"string\"},\n+                    },\n+                    \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n+                    \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n+                },\n+            },\n+            \"HTTPValidationError\": {\n+                \"title\": \"HTTPValidationError\",\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"detail\": {\n+                        \"title\": \"Detail\",\n+                        \"type\": \"array\",\n+                        \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n+                    }\n+                },\n+            },\n+        }\n+    },\n+}\n+\n+\n+@pytest.fixture(name=\"client\")\n+def get_client():\n+    from docs_src.body_multiple_params.tutorial003_py310 import app\n+\n+    client = TestClient(app)\n+    return client\n+\n+\n+@needs_py310\n+def test_openapi_schema(client: TestClient):\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == openapi_schema\n+\n+\n+# Test required and embedded body parameters with no bodies sent\n+@needs_py310\n+@pytest.mark.parametrize(\n+    \"path,body,expected_status,expected_response\",\n+    [\n+        (\n+            \"/items/5\",\n+            {\n+                \"importance\": 2,\n+                \"item\": {\"name\": \"Foo\", \"price\": 50.5},\n+                \"user\": {\"username\": \"Dave\"},\n+            },\n+            200,\n+            {\n+                \"item_id\": 5,\n+                \"importance\": 2,\n+                \"item\": {\n+                    \"name\": \"Foo\",\n+                    \"price\": 50.5,\n+                    \"description\": None,\n+                    \"tax\": None,\n+                },\n+                \"user\": {\"username\": \"Dave\", \"full_name\": None},\n+            },\n+        ),\n+        (\n+            \"/items/5\",\n+            None,\n+            422,\n+            {\n+                \"detail\": [\n+                    {\n+                        \"loc\": [\"body\", \"item\"],\n+                        \"msg\": \"field required\",\n+                        \"type\": \"value_error.missing\",\n+                    },\n+                    {\n+                        \"loc\": [\"body\", \"user\"],\n+                        \"msg\": \"field required\",\n+                        \"type\": \"value_error.missing\",\n+                    },\n+                    {\n+                        \"loc\": [\"body\", \"importance\"],\n+                        \"msg\": \"field required\",\n+                        \"type\": \"value_error.missing\",\n+                    },\n+                ]\n+            },\n+        ),\n+        (\n+            \"/items/5\",\n+            [],\n+            422,\n+            {\n+                \"detail\": [\n+                    {\n+                        \"loc\": [\"body\", \"item\"],\n+                        \"msg\": \"field required\",\n+                        \"type\": \"value_error.missing\",\n+                    },\n+                    {\n+                        \"loc\": [\"body\", \"user\"],\n+                        \"msg\": \"field required\",\n+                        \"type\": \"value_error.missing\",\n+                    },\n+                    {\n+                        \"loc\": [\"body\", \"importance\"],\n+                        \"msg\": \"field required\",\n+                        \"type\": \"value_error.missing\",\n+                    },\n+                ]\n+            },\n+        ),\n+    ],\n+)\n+def test_post_body(path, body, expected_status, expected_response, client: TestClient):\n+    response = client.put(path, json=body)\n+    assert response.status_code == expected_status\n+    assert response.json() == expected_response\n\n@@ -0,0 +1,113 @@\n+import pytest\n+from fastapi.testclient import TestClient\n+\n+from ...utils import needs_py39\n+\n+openapi_schema = {\n+    \"openapi\": \"3.0.2\",\n+    \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n+    \"paths\": {\n+        \"/index-weights/\": {\n+            \"post\": {\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                    },\n+                    \"422\": {\n+                        \"description\": \"Validation Error\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\n+                                    \"$ref\": \"#/components/schemas/HTTPValidationError\"\n+                                }\n+                            }\n+                        },\n+                    },\n+                },\n+                \"summary\": \"Create Index Weights\",\n+                \"operationId\": \"create_index_weights_index_weights__post\",\n+                \"requestBody\": {\n+                    \"content\": {\n+                        \"application/json\": {\n+                            \"schema\": {\n+                                \"title\": \"Weights\",\n+                                \"type\": \"object\",\n+                                \"additionalProperties\": {\"type\": \"number\"},\n+                            }\n+                        }\n+                    },\n+                    \"required\": True,\n+                },\n+            }\n+        }\n+    },\n+    \"components\": {\n+        \"schemas\": {\n+            \"ValidationError\": {\n+                \"title\": \"ValidationError\",\n+                \"required\": [\"loc\", \"msg\", \"type\"],\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"loc\": {\n+                        \"title\": \"Location\",\n+                        \"type\": \"array\",\n+                        \"items\": {\"type\": \"string\"},\n+                    },\n+                    \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n+                    \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n+                },\n+            },\n+            \"HTTPValidationError\": {\n+                \"title\": \"HTTPValidationError\",\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"detail\": {\n+                        \"title\": \"Detail\",\n+                        \"type\": \"array\",\n+                        \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n+                    }\n+                },\n+            },\n+        }\n+    },\n+}\n+\n+\n+@pytest.fixture(name=\"client\")\n+def get_client():\n+    from docs_src.body_nested_models.tutorial009_py39 import app\n+\n+    client = TestClient(app)\n+    return client\n+\n+\n+@needs_py39\n+def test_openapi_schema(client: TestClient):\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == openapi_schema\n+\n+\n+@needs_py39\n+def test_post_body(client: TestClient):\n+    data = {\"2\": 2.2, \"3\": 3.3}\n+    response = client.post(\"/index-weights/\", json=data)\n+    assert response.status_code == 200, response.text\n+    assert response.json() == data\n+\n+\n+@needs_py39\n+def test_post_invalid_body(client: TestClient):\n+    data = {\"foo\": 2.2, \"3\": 3.3}\n+    response = client.post(\"/index-weights/\", json=data)\n+    assert response.status_code == 422, response.text\n+    assert response.json() == {\n+        \"detail\": [\n+            {\n+                \"loc\": [\"body\", \"__key__\"],\n+                \"msg\": \"value is not a valid integer\",\n+                \"type\": \"type_error.integer\",\n+            }\n+        ]\n+    }\n\n@@ -0,0 +1,172 @@\n+import pytest\n+from fastapi.testclient import TestClient\n+\n+from ...utils import needs_py310\n+\n+openapi_schema = {\n+    \"openapi\": \"3.0.2\",\n+    \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n+    \"paths\": {\n+        \"/items/{item_id}\": {\n+            \"get\": {\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\"$ref\": \"#/components/schemas/Item\"}\n+                            }\n+                        },\n+                    },\n+                    \"422\": {\n+                        \"description\": \"Validation Error\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\n+                                    \"$ref\": \"#/components/schemas/HTTPValidationError\"\n+                                }\n+                            }\n+                        },\n+                    },\n+                },\n+                \"summary\": \"Read Item\",\n+                \"operationId\": \"read_item_items__item_id__get\",\n+                \"parameters\": [\n+                    {\n+                        \"required\": True,\n+                        \"schema\": {\"title\": \"Item Id\", \"type\": \"string\"},\n+                        \"name\": \"item_id\",\n+                        \"in\": \"path\",\n+                    }\n+                ],\n+            },\n+            \"put\": {\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\"$ref\": \"#/components/schemas/Item\"}\n+                            }\n+                        },\n+                    },\n+                    \"422\": {\n+                        \"description\": \"Validation Error\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\n+                                    \"$ref\": \"#/components/schemas/HTTPValidationError\"\n+                                }\n+                            }\n+                        },\n+                    },\n+                },\n+                \"summary\": \"Update Item\",\n+                \"operationId\": \"update_item_items__item_id__put\",\n+                \"parameters\": [\n+                    {\n+                        \"required\": True,\n+                        \"schema\": {\"title\": \"Item Id\", \"type\": \"string\"},\n+                        \"name\": \"item_id\",\n+                        \"in\": \"path\",\n+                    }\n+                ],\n+                \"requestBody\": {\n+                    \"content\": {\n+                        \"application/json\": {\n+                            \"schema\": {\"$ref\": \"#/components/schemas/Item\"}\n+                        }\n+                    },\n+                    \"required\": True,\n+                },\n+            },\n+        }\n+    },\n+    \"components\": {\n+        \"schemas\": {\n+            \"Item\": {\n+                \"title\": \"Item\",\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"name\": {\"title\": \"Name\", \"type\": \"string\"},\n+                    \"description\": {\"title\": \"Description\", \"type\": \"string\"},\n+                    \"price\": {\"title\": \"Price\", \"type\": \"number\"},\n+                    \"tax\": {\"title\": \"Tax\", \"type\": \"number\", \"default\": 10.5},\n+                    \"tags\": {\n+                        \"title\": \"Tags\",\n+                        \"type\": \"array\",\n+                        \"items\": {\"type\": \"string\"},\n+                        \"default\": [],\n+                    },\n+                },\n+            },\n+            \"ValidationError\": {\n+                \"title\": \"ValidationError\",\n+                \"required\": [\"loc\", \"msg\", \"type\"],\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"loc\": {\n+                        \"title\": \"Location\",\n+                        \"type\": \"array\",\n+                        \"items\": {\"type\": \"string\"},\n+                    },\n+                    \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n+                    \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n+                },\n+            },\n+            \"HTTPValidationError\": {\n+                \"title\": \"HTTPValidationError\",\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"detail\": {\n+                        \"title\": \"Detail\",\n+                        \"type\": \"array\",\n+                        \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n+                    }\n+                },\n+            },\n+        }\n+    },\n+}\n+\n+\n+@pytest.fixture(name=\"client\")\n+def get_client():\n+    from docs_src.body_updates.tutorial001_py310 import app\n+\n+    client = TestClient(app)\n+    return client\n+\n+\n+@needs_py310\n+def test_openapi_schema(client: TestClient):\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == openapi_schema\n+\n+\n+@needs_py310\n+def test_get(client: TestClient):\n+    response = client.get(\"/items/baz\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n+        \"name\": \"Baz\",\n+        \"description\": None,\n+        \"price\": 50.2,\n+        \"tax\": 10.5,\n+        \"tags\": [],\n+    }\n+\n+\n+@needs_py310\n+def test_put(client: TestClient):\n+    response = client.put(\n+        \"/items/bar\", json={\"name\": \"Barz\", \"price\": 3, \"description\": None}\n+    )\n+    assert response.json() == {\n+        \"name\": \"Barz\",\n+        \"description\": None,\n+        \"price\": 3,\n+        \"tax\": 10.5,\n+        \"tags\": [],\n+    }\n\n@@ -0,0 +1,172 @@\n+import pytest\n+from fastapi.testclient import TestClient\n+\n+from ...utils import needs_py39\n+\n+openapi_schema = {\n+    \"openapi\": \"3.0.2\",\n+    \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n+    \"paths\": {\n+        \"/items/{item_id}\": {\n+            \"get\": {\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\"$ref\": \"#/components/schemas/Item\"}\n+                            }\n+                        },\n+                    },\n+                    \"422\": {\n+                        \"description\": \"Validation Error\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\n+                                    \"$ref\": \"#/components/schemas/HTTPValidationError\"\n+                                }\n+                            }\n+                        },\n+                    },\n+                },\n+                \"summary\": \"Read Item\",\n+                \"operationId\": \"read_item_items__item_id__get\",\n+                \"parameters\": [\n+                    {\n+                        \"required\": True,\n+                        \"schema\": {\"title\": \"Item Id\", \"type\": \"string\"},\n+                        \"name\": \"item_id\",\n+                        \"in\": \"path\",\n+                    }\n+                ],\n+            },\n+            \"put\": {\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\"$ref\": \"#/components/schemas/Item\"}\n+                            }\n+                        },\n+                    },\n+                    \"422\": {\n+                        \"description\": \"Validation Error\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\n+                                    \"$ref\": \"#/components/schemas/HTTPValidationError\"\n+                                }\n+                            }\n+                        },\n+                    },\n+                },\n+                \"summary\": \"Update Item\",\n+                \"operationId\": \"update_item_items__item_id__put\",\n+                \"parameters\": [\n+                    {\n+                        \"required\": True,\n+                        \"schema\": {\"title\": \"Item Id\", \"type\": \"string\"},\n+                        \"name\": \"item_id\",\n+                        \"in\": \"path\",\n+                    }\n+                ],\n+                \"requestBody\": {\n+                    \"content\": {\n+                        \"application/json\": {\n+                            \"schema\": {\"$ref\": \"#/components/schemas/Item\"}\n+                        }\n+                    },\n+                    \"required\": True,\n+                },\n+            },\n+        }\n+    },\n+    \"components\": {\n+        \"schemas\": {\n+            \"Item\": {\n+                \"title\": \"Item\",\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"name\": {\"title\": \"Name\", \"type\": \"string\"},\n+                    \"description\": {\"title\": \"Description\", \"type\": \"string\"},\n+                    \"price\": {\"title\": \"Price\", \"type\": \"number\"},\n+                    \"tax\": {\"title\": \"Tax\", \"type\": \"number\", \"default\": 10.5},\n+                    \"tags\": {\n+                        \"title\": \"Tags\",\n+                        \"type\": \"array\",\n+                        \"items\": {\"type\": \"string\"},\n+                        \"default\": [],\n+                    },\n+                },\n+            },\n+            \"ValidationError\": {\n+                \"title\": \"ValidationError\",\n+                \"required\": [\"loc\", \"msg\", \"type\"],\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"loc\": {\n+                        \"title\": \"Location\",\n+                        \"type\": \"array\",\n+                        \"items\": {\"type\": \"string\"},\n+                    },\n+                    \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n+                    \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n+                },\n+            },\n+            \"HTTPValidationError\": {\n+                \"title\": \"HTTPValidationError\",\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"detail\": {\n+                        \"title\": \"Detail\",\n+                        \"type\": \"array\",\n+                        \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n+                    }\n+                },\n+            },\n+        }\n+    },\n+}\n+\n+\n+@pytest.fixture(name=\"client\")\n+def get_client():\n+    from docs_src.body_updates.tutorial001_py39 import app\n+\n+    client = TestClient(app)\n+    return client\n+\n+\n+@needs_py39\n+def test_openapi_schema(client: TestClient):\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == openapi_schema\n+\n+\n+@needs_py39\n+def test_get(client: TestClient):\n+    response = client.get(\"/items/baz\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n+        \"name\": \"Baz\",\n+        \"description\": None,\n+        \"price\": 50.2,\n+        \"tax\": 10.5,\n+        \"tags\": [],\n+    }\n+\n+\n+@needs_py39\n+def test_put(client: TestClient):\n+    response = client.put(\n+        \"/items/bar\", json={\"name\": \"Barz\", \"price\": 3, \"description\": None}\n+    )\n+    assert response.json() == {\n+        \"name\": \"Barz\",\n+        \"description\": None,\n+        \"price\": 3,\n+        \"tax\": 10.5,\n+        \"tags\": [],\n+    }\n\n@@ -0,0 +1,100 @@\n+import pytest\n+from fastapi.testclient import TestClient\n+\n+from ...utils import needs_py310\n+\n+openapi_schema = {\n+    \"openapi\": \"3.0.2\",\n+    \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n+    \"paths\": {\n+        \"/items/\": {\n+            \"get\": {\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                    },\n+                    \"422\": {\n+                        \"description\": \"Validation Error\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\n+                                    \"$ref\": \"#/components/schemas/HTTPValidationError\"\n+                                }\n+                            }\n+                        },\n+                    },\n+                },\n+                \"summary\": \"Read Items\",\n+                \"operationId\": \"read_items_items__get\",\n+                \"parameters\": [\n+                    {\n+                        \"required\": False,\n+                        \"schema\": {\"title\": \"Ads Id\", \"type\": \"string\"},\n+                        \"name\": \"ads_id\",\n+                        \"in\": \"cookie\",\n+                    }\n+                ],\n+            }\n+        }\n+    },\n+    \"components\": {\n+        \"schemas\": {\n+            \"ValidationError\": {\n+                \"title\": \"ValidationError\",\n+                \"required\": [\"loc\", \"msg\", \"type\"],\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"loc\": {\n+                        \"title\": \"Location\",\n+                        \"type\": \"array\",\n+                        \"items\": {\"type\": \"string\"},\n+                    },\n+                    \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n+                    \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n+                },\n+            },\n+            \"HTTPValidationError\": {\n+                \"title\": \"HTTPValidationError\",\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"detail\": {\n+                        \"title\": \"Detail\",\n+                        \"type\": \"array\",\n+                        \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n+                    }\n+                },\n+            },\n+        }\n+    },\n+}\n+\n+\n+@pytest.fixture(name=\"client\")\n+def get_client():\n+    from docs_src.cookie_params.tutorial001_py310 import app\n+\n+    client = TestClient(app)\n+    return client\n+\n+\n+@needs_py310\n+@pytest.mark.parametrize(\n+    \"path,cookies,expected_status,expected_response\",\n+    [\n+        (\"/openapi.json\", None, 200, openapi_schema),\n+        (\"/items\", None, 200, {\"ads_id\": None}),\n+        (\"/items\", {\"ads_id\": \"ads_track\"}, 200, {\"ads_id\": \"ads_track\"}),\n+        (\n+            \"/items\",\n+            {\"ads_id\": \"ads_track\", \"session\": \"cookiesession\"},\n+            200,\n+            {\"ads_id\": \"ads_track\"},\n+        ),\n+        (\"/items\", {\"session\": \"cookiesession\"}, 200, {\"ads_id\": None}),\n+    ],\n+)\n+def test(path, cookies, expected_status, expected_response, client: TestClient):\n+    response = client.get(path, cookies=cookies)\n+    assert response.status_code == expected_status\n+    assert response.json() == expected_response\n\n@@ -0,0 +1,157 @@\n+import pytest\n+from fastapi.testclient import TestClient\n+\n+from ...utils import needs_py310\n+\n+openapi_schema = {\n+    \"openapi\": \"3.0.2\",\n+    \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n+    \"paths\": {\n+        \"/items/\": {\n+            \"get\": {\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                    },\n+                    \"422\": {\n+                        \"description\": \"Validation Error\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\n+                                    \"$ref\": \"#/components/schemas/HTTPValidationError\"\n+                                }\n+                            }\n+                        },\n+                    },\n+                },\n+                \"summary\": \"Read Items\",\n+                \"operationId\": \"read_items_items__get\",\n+                \"parameters\": [\n+                    {\n+                        \"required\": False,\n+                        \"schema\": {\"title\": \"Q\", \"type\": \"string\"},\n+                        \"name\": \"q\",\n+                        \"in\": \"query\",\n+                    },\n+                    {\n+                        \"required\": False,\n+                        \"schema\": {\"title\": \"Skip\", \"type\": \"integer\", \"default\": 0},\n+                        \"name\": \"skip\",\n+                        \"in\": \"query\",\n+                    },\n+                    {\n+                        \"required\": False,\n+                        \"schema\": {\"title\": \"Limit\", \"type\": \"integer\", \"default\": 100},\n+                        \"name\": \"limit\",\n+                        \"in\": \"query\",\n+                    },\n+                ],\n+            }\n+        },\n+        \"/users/\": {\n+            \"get\": {\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                    },\n+                    \"422\": {\n+                        \"description\": \"Validation Error\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\n+                                    \"$ref\": \"#/components/schemas/HTTPValidationError\"\n+                                }\n+                            }\n+                        },\n+                    },\n+                },\n+                \"summary\": \"Read Users\",\n+                \"operationId\": \"read_users_users__get\",\n+                \"parameters\": [\n+                    {\n+                        \"required\": False,\n+                        \"schema\": {\"title\": \"Q\", \"type\": \"string\"},\n+                        \"name\": \"q\",\n+                        \"in\": \"query\",\n+                    },\n+                    {\n+                        \"required\": False,\n+                        \"schema\": {\"title\": \"Skip\", \"type\": \"integer\", \"default\": 0},\n+                        \"name\": \"skip\",\n+                        \"in\": \"query\",\n+                    },\n+                    {\n+                        \"required\": False,\n+                        \"schema\": {\"title\": \"Limit\", \"type\": \"integer\", \"default\": 100},\n+                        \"name\": \"limit\",\n+                        \"in\": \"query\",\n+                    },\n+                ],\n+            }\n+        },\n+    },\n+    \"components\": {\n+        \"schemas\": {\n+            \"ValidationError\": {\n+                \"title\": \"ValidationError\",\n+                \"required\": [\"loc\", \"msg\", \"type\"],\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"loc\": {\n+                        \"title\": \"Location\",\n+                        \"type\": \"array\",\n+                        \"items\": {\"type\": \"string\"},\n+                    },\n+                    \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n+                    \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n+                },\n+            },\n+            \"HTTPValidationError\": {\n+                \"title\": \"HTTPValidationError\",\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"detail\": {\n+                        \"title\": \"Detail\",\n+                        \"type\": \"array\",\n+                        \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n+                    }\n+                },\n+            },\n+        }\n+    },\n+}\n+\n+\n+@pytest.fixture(name=\"client\")\n+def get_client():\n+    from docs_src.dependencies.tutorial001_py310 import app\n+\n+    client = TestClient(app)\n+    return client\n+\n+\n+@needs_py310\n+def test_openapi_schema(client: TestClient):\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == openapi_schema\n+\n+\n+@needs_py310\n+@pytest.mark.parametrize(\n+    \"path,expected_status,expected_response\",\n+    [\n+        (\"/items\", 200, {\"q\": None, \"skip\": 0, \"limit\": 100}),\n+        (\"/items?q=foo\", 200, {\"q\": \"foo\", \"skip\": 0, \"limit\": 100}),\n+        (\"/items?q=foo&skip=5\", 200, {\"q\": \"foo\", \"skip\": 5, \"limit\": 100}),\n+        (\"/items?q=foo&skip=5&limit=30\", 200, {\"q\": \"foo\", \"skip\": 5, \"limit\": 30}),\n+        (\"/users\", 200, {\"q\": None, \"skip\": 0, \"limit\": 100}),\n+        (\"/openapi.json\", 200, openapi_schema),\n+    ],\n+)\n+def test_get(path, expected_status, expected_response, client: TestClient):\n+    response = client.get(path)\n+    assert response.status_code == expected_status\n+    assert response.json() == expected_response\n\n@@ -0,0 +1,152 @@\n+import pytest\n+from fastapi.testclient import TestClient\n+\n+from ...utils import needs_py310\n+\n+openapi_schema = {\n+    \"openapi\": \"3.0.2\",\n+    \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n+    \"paths\": {\n+        \"/items/\": {\n+            \"get\": {\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                    },\n+                    \"422\": {\n+                        \"description\": \"Validation Error\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\n+                                    \"$ref\": \"#/components/schemas/HTTPValidationError\"\n+                                }\n+                            }\n+                        },\n+                    },\n+                },\n+                \"summary\": \"Read Items\",\n+                \"operationId\": \"read_items_items__get\",\n+                \"parameters\": [\n+                    {\n+                        \"required\": False,\n+                        \"schema\": {\"title\": \"Q\", \"type\": \"string\"},\n+                        \"name\": \"q\",\n+                        \"in\": \"query\",\n+                    },\n+                    {\n+                        \"required\": False,\n+                        \"schema\": {\"title\": \"Skip\", \"type\": \"integer\", \"default\": 0},\n+                        \"name\": \"skip\",\n+                        \"in\": \"query\",\n+                    },\n+                    {\n+                        \"required\": False,\n+                        \"schema\": {\"title\": \"Limit\", \"type\": \"integer\", \"default\": 100},\n+                        \"name\": \"limit\",\n+                        \"in\": \"query\",\n+                    },\n+                ],\n+            }\n+        }\n+    },\n+    \"components\": {\n+        \"schemas\": {\n+            \"ValidationError\": {\n+                \"title\": \"ValidationError\",\n+                \"required\": [\"loc\", \"msg\", \"type\"],\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"loc\": {\n+                        \"title\": \"Location\",\n+                        \"type\": \"array\",\n+                        \"items\": {\"type\": \"string\"},\n+                    },\n+                    \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n+                    \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n+                },\n+            },\n+            \"HTTPValidationError\": {\n+                \"title\": \"HTTPValidationError\",\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"detail\": {\n+                        \"title\": \"Detail\",\n+                        \"type\": \"array\",\n+                        \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n+                    }\n+                },\n+            },\n+        }\n+    },\n+}\n+\n+\n+@pytest.fixture(name=\"client\")\n+def get_client():\n+    from docs_src.dependencies.tutorial004_py310 import app\n+\n+    client = TestClient(app)\n+    return client\n+\n+\n+@needs_py310\n+def test_openapi_schema(client: TestClient):\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == openapi_schema\n+\n+\n+@needs_py310\n+@pytest.mark.parametrize(\n+    \"path,expected_status,expected_response\",\n+    [\n+        (\n+            \"/items\",\n+            200,\n+            {\n+                \"items\": [\n+                    {\"item_name\": \"Foo\"},\n+                    {\"item_name\": \"Bar\"},\n+                    {\"item_name\": \"Baz\"},\n+                ]\n+            },\n+        ),\n+        (\n+            \"/items?q=foo\",\n+            200,\n+            {\n+                \"items\": [\n+                    {\"item_name\": \"Foo\"},\n+                    {\"item_name\": \"Bar\"},\n+                    {\"item_name\": \"Baz\"},\n+                ],\n+                \"q\": \"foo\",\n+            },\n+        ),\n+        (\n+            \"/items?q=foo&skip=1\",\n+            200,\n+            {\"items\": [{\"item_name\": \"Bar\"}, {\"item_name\": \"Baz\"}], \"q\": \"foo\"},\n+        ),\n+        (\n+            \"/items?q=bar&limit=2\",\n+            200,\n+            {\"items\": [{\"item_name\": \"Foo\"}, {\"item_name\": \"Bar\"}], \"q\": \"bar\"},\n+        ),\n+        (\n+            \"/items?q=bar&skip=1&limit=1\",\n+            200,\n+            {\"items\": [{\"item_name\": \"Bar\"}], \"q\": \"bar\"},\n+        ),\n+        (\n+            \"/items?limit=1&q=bar&skip=1\",\n+            200,\n+            {\"items\": [{\"item_name\": \"Bar\"}], \"q\": \"bar\"},\n+        ),\n+    ],\n+)\n+def test_get(path, expected_status, expected_response, client: TestClient):\n+    response = client.get(path)\n+    assert response.status_code == expected_status\n+    assert response.json() == expected_response\n\n@@ -0,0 +1,146 @@\n+import pytest\n+from fastapi.testclient import TestClient\n+\n+from ...utils import needs_py310\n+\n+openapi_schema = {\n+    \"openapi\": \"3.0.2\",\n+    \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n+    \"paths\": {\n+        \"/items/{item_id}\": {\n+            \"put\": {\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                    },\n+                    \"422\": {\n+                        \"description\": \"Validation Error\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\n+                                    \"$ref\": \"#/components/schemas/HTTPValidationError\"\n+                                }\n+                            }\n+                        },\n+                    },\n+                },\n+                \"summary\": \"Read Items\",\n+                \"operationId\": \"read_items_items__item_id__put\",\n+                \"parameters\": [\n+                    {\n+                        \"required\": True,\n+                        \"schema\": {\n+                            \"title\": \"Item Id\",\n+                            \"type\": \"string\",\n+                            \"format\": \"uuid\",\n+                        },\n+                        \"name\": \"item_id\",\n+                        \"in\": \"path\",\n+                    }\n+                ],\n+                \"requestBody\": {\n+                    \"content\": {\n+                        \"application/json\": {\n+                            \"schema\": {\n+                                \"$ref\": \"#/components/schemas/Body_read_items_items__item_id__put\"\n+                            }\n+                        }\n+                    }\n+                },\n+            }\n+        }\n+    },\n+    \"components\": {\n+        \"schemas\": {\n+            \"Body_read_items_items__item_id__put\": {\n+                \"title\": \"Body_read_items_items__item_id__put\",\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"start_datetime\": {\n+                        \"title\": \"Start Datetime\",\n+                        \"type\": \"string\",\n+                        \"format\": \"date-time\",\n+                    },\n+                    \"end_datetime\": {\n+                        \"title\": \"End Datetime\",\n+                        \"type\": \"string\",\n+                        \"format\": \"date-time\",\n+                    },\n+                    \"repeat_at\": {\n+                        \"title\": \"Repeat At\",\n+                        \"type\": \"string\",\n+                        \"format\": \"time\",\n+                    },\n+                    \"process_after\": {\n+                        \"title\": \"Process After\",\n+                        \"type\": \"number\",\n+                        \"format\": \"time-delta\",\n+                    },\n+                },\n+            },\n+            \"ValidationError\": {\n+                \"title\": \"ValidationError\",\n+                \"required\": [\"loc\", \"msg\", \"type\"],\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"loc\": {\n+                        \"title\": \"Location\",\n+                        \"type\": \"array\",\n+                        \"items\": {\"type\": \"string\"},\n+                    },\n+                    \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n+                    \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n+                },\n+            },\n+            \"HTTPValidationError\": {\n+                \"title\": \"HTTPValidationError\",\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"detail\": {\n+                        \"title\": \"Detail\",\n+                        \"type\": \"array\",\n+                        \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n+                    }\n+                },\n+            },\n+        }\n+    },\n+}\n+\n+\n+@pytest.fixture(name=\"client\")\n+def get_client():\n+    from docs_src.extra_data_types.tutorial001_py310 import app\n+\n+    client = TestClient(app)\n+    return client\n+\n+\n+@needs_py310\n+def test_openapi_schema(client: TestClient):\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == openapi_schema\n+\n+\n+@needs_py310\n+def test_extra_types(client: TestClient):\n+    item_id = \"ff97dd87-a4a5-4a12-b412-cde99f33e00e\"\n+    data = {\n+        \"start_datetime\": \"2018-12-22T14:00:00+00:00\",\n+        \"end_datetime\": \"2018-12-24T15:00:00+00:00\",\n+        \"repeat_at\": \"15:30:00\",\n+        \"process_after\": 300,\n+    }\n+    expected_response = data.copy()\n+    expected_response.update(\n+        {\n+            \"start_process\": \"2018-12-22T14:05:00+00:00\",\n+            \"duration\": 176_100,\n+            \"item_id\": item_id,\n+        }\n+    )\n+    response = client.put(f\"/items/{item_id}\", json=data)\n+    assert response.status_code == 200, response.text\n+    assert response.json() == expected_response\n\n@@ -0,0 +1,135 @@\n+import pytest\n+from fastapi.testclient import TestClient\n+\n+from ...utils import needs_py310\n+\n+openapi_schema = {\n+    \"openapi\": \"3.0.2\",\n+    \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n+    \"paths\": {\n+        \"/items/{item_id}\": {\n+            \"get\": {\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\n+                                    \"title\": \"Response Read Item Items  Item Id  Get\",\n+                                    \"anyOf\": [\n+                                        {\"$ref\": \"#/components/schemas/PlaneItem\"},\n+                                        {\"$ref\": \"#/components/schemas/CarItem\"},\n+                                    ],\n+                                }\n+                            }\n+                        },\n+                    },\n+                    \"422\": {\n+                        \"description\": \"Validation Error\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\n+                                    \"$ref\": \"#/components/schemas/HTTPValidationError\"\n+                                }\n+                            }\n+                        },\n+                    },\n+                },\n+                \"summary\": \"Read Item\",\n+                \"operationId\": \"read_item_items__item_id__get\",\n+                \"parameters\": [\n+                    {\n+                        \"required\": True,\n+                        \"schema\": {\"title\": \"Item Id\", \"type\": \"string\"},\n+                        \"name\": \"item_id\",\n+                        \"in\": \"path\",\n+                    }\n+                ],\n+            }\n+        }\n+    },\n+    \"components\": {\n+        \"schemas\": {\n+            \"PlaneItem\": {\n+                \"title\": \"PlaneItem\",\n+                \"required\": [\"description\", \"size\"],\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"description\": {\"title\": \"Description\", \"type\": \"string\"},\n+                    \"type\": {\"title\": \"Type\", \"type\": \"string\", \"default\": \"plane\"},\n+                    \"size\": {\"title\": \"Size\", \"type\": \"integer\"},\n+                },\n+            },\n+            \"CarItem\": {\n+                \"title\": \"CarItem\",\n+                \"required\": [\"description\"],\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"description\": {\"title\": \"Description\", \"type\": \"string\"},\n+                    \"type\": {\"title\": \"Type\", \"type\": \"string\", \"default\": \"car\"},\n+                },\n+            },\n+            \"ValidationError\": {\n+                \"title\": \"ValidationError\",\n+                \"required\": [\"loc\", \"msg\", \"type\"],\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"loc\": {\n+                        \"title\": \"Location\",\n+                        \"type\": \"array\",\n+                        \"items\": {\"type\": \"string\"},\n+                    },\n+                    \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n+                    \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n+                },\n+            },\n+            \"HTTPValidationError\": {\n+                \"title\": \"HTTPValidationError\",\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"detail\": {\n+                        \"title\": \"Detail\",\n+                        \"type\": \"array\",\n+                        \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n+                    }\n+                },\n+            },\n+        }\n+    },\n+}\n+\n+\n+@pytest.fixture(name=\"client\")\n+def get_client():\n+    from docs_src.extra_models.tutorial003_py310 import app\n+\n+    client = TestClient(app)\n+    return client\n+\n+\n+@needs_py310\n+def test_openapi_schema(client: TestClient):\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == openapi_schema\n+\n+\n+@needs_py310\n+def test_get_car(client: TestClient):\n+    response = client.get(\"/items/item1\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n+        \"description\": \"All my friends drive a low rider\",\n+        \"type\": \"car\",\n+    }\n+\n+\n+@needs_py310\n+def test_get_plane(client: TestClient):\n+    response = client.get(\"/items/item2\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n+        \"description\": \"Music is my aeroplane, it's my aeroplane\",\n+        \"type\": \"plane\",\n+        \"size\": 5,\n+    }\n\n@@ -0,0 +1,69 @@\n+import pytest\n+from fastapi.testclient import TestClient\n+\n+from ...utils import needs_py39\n+\n+openapi_schema = {\n+    \"openapi\": \"3.0.2\",\n+    \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n+    \"paths\": {\n+        \"/items/\": {\n+            \"get\": {\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\n+                                    \"title\": \"Response Read Items Items  Get\",\n+                                    \"type\": \"array\",\n+                                    \"items\": {\"$ref\": \"#/components/schemas/Item\"},\n+                                }\n+                            }\n+                        },\n+                    }\n+                },\n+                \"summary\": \"Read Items\",\n+                \"operationId\": \"read_items_items__get\",\n+            }\n+        }\n+    },\n+    \"components\": {\n+        \"schemas\": {\n+            \"Item\": {\n+                \"title\": \"Item\",\n+                \"required\": [\"name\", \"description\"],\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"name\": {\"title\": \"Name\", \"type\": \"string\"},\n+                    \"description\": {\"title\": \"Description\", \"type\": \"string\"},\n+                },\n+            }\n+        }\n+    },\n+}\n+\n+\n+@pytest.fixture(name=\"client\")\n+def get_client():\n+    from docs_src.extra_models.tutorial004_py39 import app\n+\n+    client = TestClient(app)\n+    return client\n+\n+\n+@needs_py39\n+def test_openapi_schema(client: TestClient):\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == openapi_schema\n+\n+\n+@needs_py39\n+def test_get_items(client: TestClient):\n+    response = client.get(\"/items/\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == [\n+        {\"name\": \"Foo\", \"description\": \"There comes my hero\"},\n+        {\"name\": \"Red\", \"description\": \"It's my aeroplane\"},\n+    ]\n\n@@ -0,0 +1,53 @@\n+import pytest\n+from fastapi.testclient import TestClient\n+\n+from ...utils import needs_py39\n+\n+openapi_schema = {\n+    \"openapi\": \"3.0.2\",\n+    \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n+    \"paths\": {\n+        \"/keyword-weights/\": {\n+            \"get\": {\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\n+                                    \"title\": \"Response Read Keyword Weights Keyword Weights  Get\",\n+                                    \"type\": \"object\",\n+                                    \"additionalProperties\": {\"type\": \"number\"},\n+                                }\n+                            }\n+                        },\n+                    }\n+                },\n+                \"summary\": \"Read Keyword Weights\",\n+                \"operationId\": \"read_keyword_weights_keyword_weights__get\",\n+            }\n+        }\n+    },\n+}\n+\n+\n+@pytest.fixture(name=\"client\")\n+def get_client():\n+    from docs_src.extra_models.tutorial005_py39 import app\n+\n+    client = TestClient(app)\n+    return client\n+\n+\n+@needs_py39\n+def test_openapi_schema(client: TestClient):\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == openapi_schema\n+\n+\n+@needs_py39\n+def test_get_items(client: TestClient):\n+    response = client.get(\"/keyword-weights/\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\"foo\": 2.3, \"bar\": 3.4}\n\n@@ -0,0 +1,94 @@\n+import pytest\n+from fastapi.testclient import TestClient\n+\n+from ...utils import needs_py310\n+\n+openapi_schema = {\n+    \"openapi\": \"3.0.2\",\n+    \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n+    \"paths\": {\n+        \"/items/\": {\n+            \"get\": {\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                    },\n+                    \"422\": {\n+                        \"description\": \"Validation Error\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\n+                                    \"$ref\": \"#/components/schemas/HTTPValidationError\"\n+                                }\n+                            }\n+                        },\n+                    },\n+                },\n+                \"summary\": \"Read Items\",\n+                \"operationId\": \"read_items_items__get\",\n+                \"parameters\": [\n+                    {\n+                        \"required\": False,\n+                        \"schema\": {\"title\": \"User-Agent\", \"type\": \"string\"},\n+                        \"name\": \"user-agent\",\n+                        \"in\": \"header\",\n+                    }\n+                ],\n+            }\n+        }\n+    },\n+    \"components\": {\n+        \"schemas\": {\n+            \"ValidationError\": {\n+                \"title\": \"ValidationError\",\n+                \"required\": [\"loc\", \"msg\", \"type\"],\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"loc\": {\n+                        \"title\": \"Location\",\n+                        \"type\": \"array\",\n+                        \"items\": {\"type\": \"string\"},\n+                    },\n+                    \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n+                    \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n+                },\n+            },\n+            \"HTTPValidationError\": {\n+                \"title\": \"HTTPValidationError\",\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"detail\": {\n+                        \"title\": \"Detail\",\n+                        \"type\": \"array\",\n+                        \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n+                    }\n+                },\n+            },\n+        }\n+    },\n+}\n+\n+\n+@pytest.fixture(name=\"client\")\n+def get_client():\n+    from docs_src.header_params.tutorial001_py310 import app\n+\n+    client = TestClient(app)\n+    return client\n+\n+\n+@needs_py310\n+@pytest.mark.parametrize(\n+    \"path,headers,expected_status,expected_response\",\n+    [\n+        (\"/openapi.json\", None, 200, openapi_schema),\n+        (\"/items\", None, 200, {\"User-Agent\": \"testclient\"}),\n+        (\"/items\", {\"X-Header\": \"notvalid\"}, 200, {\"User-Agent\": \"testclient\"}),\n+        (\"/items\", {\"User-Agent\": \"FastAPI test\"}, 200, {\"User-Agent\": \"FastAPI test\"}),\n+    ],\n+)\n+def test(path, headers, expected_status, expected_response, client: TestClient):\n+    response = client.get(path, headers=headers)\n+    assert response.status_code == expected_status\n+    assert response.json() == expected_response\n\n@@ -0,0 +1,121 @@\n+import pytest\n+from fastapi.testclient import TestClient\n+\n+from ...utils import needs_py310\n+\n+openapi_schema = {\n+    \"openapi\": \"3.0.2\",\n+    \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n+    \"paths\": {\n+        \"/items/\": {\n+            \"post\": {\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"The created item\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\"$ref\": \"#/components/schemas/Item\"}\n+                            }\n+                        },\n+                    },\n+                    \"422\": {\n+                        \"description\": \"Validation Error\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\n+                                    \"$ref\": \"#/components/schemas/HTTPValidationError\"\n+                                }\n+                            }\n+                        },\n+                    },\n+                },\n+                \"summary\": \"Create an item\",\n+                \"description\": \"Create an item with all the information:\\n\\n- **name**: each item must have a name\\n- **description**: a long description\\n- **price**: required\\n- **tax**: if the item doesn't have tax, you can omit this\\n- **tags**: a set of unique tag strings for this item\",\n+                \"operationId\": \"create_item_items__post\",\n+                \"requestBody\": {\n+                    \"content\": {\n+                        \"application/json\": {\n+                            \"schema\": {\"$ref\": \"#/components/schemas/Item\"}\n+                        }\n+                    },\n+                    \"required\": True,\n+                },\n+            }\n+        }\n+    },\n+    \"components\": {\n+        \"schemas\": {\n+            \"Item\": {\n+                \"title\": \"Item\",\n+                \"required\": [\"name\", \"price\"],\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"name\": {\"title\": \"Name\", \"type\": \"string\"},\n+                    \"price\": {\"title\": \"Price\", \"type\": \"number\"},\n+                    \"description\": {\"title\": \"Description\", \"type\": \"string\"},\n+                    \"tax\": {\"title\": \"Tax\", \"type\": \"number\"},\n+                    \"tags\": {\n+                        \"title\": \"Tags\",\n+                        \"uniqueItems\": True,\n+                        \"type\": \"array\",\n+                        \"items\": {\"type\": \"string\"},\n+                        \"default\": [],\n+                    },\n+                },\n+            },\n+            \"ValidationError\": {\n+                \"title\": \"ValidationError\",\n+                \"required\": [\"loc\", \"msg\", \"type\"],\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"loc\": {\n+                        \"title\": \"Location\",\n+                        \"type\": \"array\",\n+                        \"items\": {\"type\": \"string\"},\n+                    },\n+                    \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n+                    \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n+                },\n+            },\n+            \"HTTPValidationError\": {\n+                \"title\": \"HTTPValidationError\",\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"detail\": {\n+                        \"title\": \"Detail\",\n+                        \"type\": \"array\",\n+                        \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n+                    }\n+                },\n+            },\n+        }\n+    },\n+}\n+\n+\n+@pytest.fixture(name=\"client\")\n+def get_client():\n+    from docs_src.path_operation_configuration.tutorial005_py310 import app\n+\n+    client = TestClient(app)\n+    return client\n+\n+\n+@needs_py310\n+def test_openapi_schema(client: TestClient):\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == openapi_schema\n+\n+\n+@needs_py310\n+def test_query_params_str_validations(client: TestClient):\n+    response = client.post(\"/items/\", json={\"name\": \"Foo\", \"price\": 42})\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n+        \"name\": \"Foo\",\n+        \"price\": 42,\n+        \"description\": None,\n+        \"tax\": None,\n+        \"tags\": [],\n+    }\n\n@@ -0,0 +1,121 @@\n+import pytest\n+from fastapi.testclient import TestClient\n+\n+from ...utils import needs_py39\n+\n+openapi_schema = {\n+    \"openapi\": \"3.0.2\",\n+    \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n+    \"paths\": {\n+        \"/items/\": {\n+            \"post\": {\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"The created item\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\"$ref\": \"#/components/schemas/Item\"}\n+                            }\n+                        },\n+                    },\n+                    \"422\": {\n+                        \"description\": \"Validation Error\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\n+                                    \"$ref\": \"#/components/schemas/HTTPValidationError\"\n+                                }\n+                            }\n+                        },\n+                    },\n+                },\n+                \"summary\": \"Create an item\",\n+                \"description\": \"Create an item with all the information:\\n\\n- **name**: each item must have a name\\n- **description**: a long description\\n- **price**: required\\n- **tax**: if the item doesn't have tax, you can omit this\\n- **tags**: a set of unique tag strings for this item\",\n+                \"operationId\": \"create_item_items__post\",\n+                \"requestBody\": {\n+                    \"content\": {\n+                        \"application/json\": {\n+                            \"schema\": {\"$ref\": \"#/components/schemas/Item\"}\n+                        }\n+                    },\n+                    \"required\": True,\n+                },\n+            }\n+        }\n+    },\n+    \"components\": {\n+        \"schemas\": {\n+            \"Item\": {\n+                \"title\": \"Item\",\n+                \"required\": [\"name\", \"price\"],\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"name\": {\"title\": \"Name\", \"type\": \"string\"},\n+                    \"price\": {\"title\": \"Price\", \"type\": \"number\"},\n+                    \"description\": {\"title\": \"Description\", \"type\": \"string\"},\n+                    \"tax\": {\"title\": \"Tax\", \"type\": \"number\"},\n+                    \"tags\": {\n+                        \"title\": \"Tags\",\n+                        \"uniqueItems\": True,\n+                        \"type\": \"array\",\n+                        \"items\": {\"type\": \"string\"},\n+                        \"default\": [],\n+                    },\n+                },\n+            },\n+            \"ValidationError\": {\n+                \"title\": \"ValidationError\",\n+                \"required\": [\"loc\", \"msg\", \"type\"],\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"loc\": {\n+                        \"title\": \"Location\",\n+                        \"type\": \"array\",\n+                        \"items\": {\"type\": \"string\"},\n+                    },\n+                    \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n+                    \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n+                },\n+            },\n+            \"HTTPValidationError\": {\n+                \"title\": \"HTTPValidationError\",\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"detail\": {\n+                        \"title\": \"Detail\",\n+                        \"type\": \"array\",\n+                        \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n+                    }\n+                },\n+            },\n+        }\n+    },\n+}\n+\n+\n+@pytest.fixture(name=\"client\")\n+def get_client():\n+    from docs_src.path_operation_configuration.tutorial005_py39 import app\n+\n+    client = TestClient(app)\n+    return client\n+\n+\n+@needs_py39\n+def test_openapi_schema(client: TestClient):\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == openapi_schema\n+\n+\n+@needs_py39\n+def test_query_params_str_validations(client: TestClient):\n+    response = client.post(\"/items/\", json={\"name\": \"Foo\", \"price\": 42})\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n+        \"name\": \"Foo\",\n+        \"price\": 42,\n+        \"description\": None,\n+        \"tax\": None,\n+        \"tags\": [],\n+    }\n\n@@ -0,0 +1,148 @@\n+import pytest\n+from fastapi.testclient import TestClient\n+\n+from ...utils import needs_py310\n+\n+openapi_schema = {\n+    \"openapi\": \"3.0.2\",\n+    \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n+    \"paths\": {\n+        \"/items/{item_id}\": {\n+            \"get\": {\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                    },\n+                    \"422\": {\n+                        \"description\": \"Validation Error\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\n+                                    \"$ref\": \"#/components/schemas/HTTPValidationError\"\n+                                }\n+                            }\n+                        },\n+                    },\n+                },\n+                \"summary\": \"Read User Item\",\n+                \"operationId\": \"read_user_item_items__item_id__get\",\n+                \"parameters\": [\n+                    {\n+                        \"required\": True,\n+                        \"schema\": {\"title\": \"Item Id\", \"type\": \"string\"},\n+                        \"name\": \"item_id\",\n+                        \"in\": \"path\",\n+                    },\n+                    {\n+                        \"required\": True,\n+                        \"schema\": {\"title\": \"Needy\", \"type\": \"string\"},\n+                        \"name\": \"needy\",\n+                        \"in\": \"query\",\n+                    },\n+                    {\n+                        \"required\": False,\n+                        \"schema\": {\"title\": \"Skip\", \"type\": \"integer\", \"default\": 0},\n+                        \"name\": \"skip\",\n+                        \"in\": \"query\",\n+                    },\n+                    {\n+                        \"required\": False,\n+                        \"schema\": {\"title\": \"Limit\", \"type\": \"integer\"},\n+                        \"name\": \"limit\",\n+                        \"in\": \"query\",\n+                    },\n+                ],\n+            }\n+        }\n+    },\n+    \"components\": {\n+        \"schemas\": {\n+            \"ValidationError\": {\n+                \"title\": \"ValidationError\",\n+                \"required\": [\"loc\", \"msg\", \"type\"],\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"loc\": {\n+                        \"title\": \"Location\",\n+                        \"type\": \"array\",\n+                        \"items\": {\"type\": \"string\"},\n+                    },\n+                    \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n+                    \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n+                },\n+            },\n+            \"HTTPValidationError\": {\n+                \"title\": \"HTTPValidationError\",\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"detail\": {\n+                        \"title\": \"Detail\",\n+                        \"type\": \"array\",\n+                        \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n+                    }\n+                },\n+            },\n+        }\n+    },\n+}\n+\n+\n+query_required = {\n+    \"detail\": [\n+        {\n+            \"loc\": [\"query\", \"needy\"],\n+            \"msg\": \"field required\",\n+            \"type\": \"value_error.missing\",\n+        }\n+    ]\n+}\n+\n+\n+@pytest.fixture(name=\"client\")\n+def get_client():\n+    from docs_src.query_params.tutorial006_py310 import app\n+\n+    c = TestClient(app)\n+    return c\n+\n+\n+@needs_py310\n+@pytest.mark.parametrize(\n+    \"path,expected_status,expected_response\",\n+    [\n+        (\"/openapi.json\", 200, openapi_schema),\n+        (\n+            \"/items/foo?needy=very\",\n+            200,\n+            {\"item_id\": \"foo\", \"needy\": \"very\", \"skip\": 0, \"limit\": None},\n+        ),\n+        (\n+            \"/items/foo?skip=a&limit=b\",\n+            422,\n+            {\n+                \"detail\": [\n+                    {\n+                        \"loc\": [\"query\", \"needy\"],\n+                        \"msg\": \"field required\",\n+                        \"type\": \"value_error.missing\",\n+                    },\n+                    {\n+                        \"loc\": [\"query\", \"skip\"],\n+                        \"msg\": \"value is not a valid integer\",\n+                        \"type\": \"type_error.integer\",\n+                    },\n+                    {\n+                        \"loc\": [\"query\", \"limit\"],\n+                        \"msg\": \"value is not a valid integer\",\n+                        \"type\": \"type_error.integer\",\n+                    },\n+                ]\n+            },\n+        ),\n+    ],\n+)\n+def test(path, expected_status, expected_response, client: TestClient):\n+    response = client.get(path)\n+    assert response.status_code == expected_status\n+    assert response.json() == expected_response\n\n@@ -0,0 +1,132 @@\n+import pytest\n+from fastapi.testclient import TestClient\n+\n+from ...utils import needs_py310\n+\n+openapi_schema = {\n+    \"openapi\": \"3.0.2\",\n+    \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n+    \"paths\": {\n+        \"/items/\": {\n+            \"get\": {\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                    },\n+                    \"422\": {\n+                        \"description\": \"Validation Error\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\n+                                    \"$ref\": \"#/components/schemas/HTTPValidationError\"\n+                                }\n+                            }\n+                        },\n+                    },\n+                },\n+                \"summary\": \"Read Items\",\n+                \"operationId\": \"read_items_items__get\",\n+                \"parameters\": [\n+                    {\n+                        \"description\": \"Query string for the items to search in the database that have a good match\",\n+                        \"required\": False,\n+                        \"deprecated\": True,\n+                        \"schema\": {\n+                            \"title\": \"Query string\",\n+                            \"maxLength\": 50,\n+                            \"minLength\": 3,\n+                            \"pattern\": \"^fixedquery$\",\n+                            \"type\": \"string\",\n+                            \"description\": \"Query string for the items to search in the database that have a good match\",\n+                        },\n+                        \"name\": \"item-query\",\n+                        \"in\": \"query\",\n+                    }\n+                ],\n+            }\n+        }\n+    },\n+    \"components\": {\n+        \"schemas\": {\n+            \"ValidationError\": {\n+                \"title\": \"ValidationError\",\n+                \"required\": [\"loc\", \"msg\", \"type\"],\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"loc\": {\n+                        \"title\": \"Location\",\n+                        \"type\": \"array\",\n+                        \"items\": {\"type\": \"string\"},\n+                    },\n+                    \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n+                    \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n+                },\n+            },\n+            \"HTTPValidationError\": {\n+                \"title\": \"HTTPValidationError\",\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"detail\": {\n+                        \"title\": \"Detail\",\n+                        \"type\": \"array\",\n+                        \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n+                    }\n+                },\n+            },\n+        }\n+    },\n+}\n+\n+\n+@pytest.fixture(name=\"client\")\n+def get_client():\n+    from docs_src.query_params_str_validations.tutorial010_py310 import app\n+\n+    client = TestClient(app)\n+    return client\n+\n+\n+@needs_py310\n+def test_openapi_schema(client: TestClient):\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == openapi_schema\n+\n+\n+regex_error = {\n+    \"detail\": [\n+        {\n+            \"ctx\": {\"pattern\": \"^fixedquery$\"},\n+            \"loc\": [\"query\", \"item-query\"],\n+            \"msg\": 'string does not match regex \"^fixedquery$\"',\n+            \"type\": \"value_error.str.regex\",\n+        }\n+    ]\n+}\n+\n+\n+@needs_py310\n+@pytest.mark.parametrize(\n+    \"q_name,q,expected_status,expected_response\",\n+    [\n+        (None, None, 200, {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}),\n+        (\n+            \"item-query\",\n+            \"fixedquery\",\n+            200,\n+            {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}], \"q\": \"fixedquery\"},\n+        ),\n+        (\"q\", \"fixedquery\", 200, {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}),\n+        (\"item-query\", \"nonregexquery\", 422, regex_error),\n+    ],\n+)\n+def test_query_params_str_validations(\n+    q_name, q, expected_status, expected_response, client: TestClient\n+):\n+    url = \"/items/\"\n+    if q_name and q:\n+        url = f\"{url}?{q_name}={q}\"\n+    response = client.get(url)\n+    assert response.status_code == expected_status\n+    assert response.json() == expected_response\n\n@@ -0,0 +1,105 @@\n+import pytest\n+from fastapi.testclient import TestClient\n+\n+from ...utils import needs_py310\n+\n+openapi_schema = {\n+    \"openapi\": \"3.0.2\",\n+    \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n+    \"paths\": {\n+        \"/items/\": {\n+            \"get\": {\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                    },\n+                    \"422\": {\n+                        \"description\": \"Validation Error\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\n+                                    \"$ref\": \"#/components/schemas/HTTPValidationError\"\n+                                }\n+                            }\n+                        },\n+                    },\n+                },\n+                \"summary\": \"Read Items\",\n+                \"operationId\": \"read_items_items__get\",\n+                \"parameters\": [\n+                    {\n+                        \"required\": False,\n+                        \"schema\": {\n+                            \"title\": \"Q\",\n+                            \"type\": \"array\",\n+                            \"items\": {\"type\": \"string\"},\n+                        },\n+                        \"name\": \"q\",\n+                        \"in\": \"query\",\n+                    }\n+                ],\n+            }\n+        }\n+    },\n+    \"components\": {\n+        \"schemas\": {\n+            \"ValidationError\": {\n+                \"title\": \"ValidationError\",\n+                \"required\": [\"loc\", \"msg\", \"type\"],\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"loc\": {\n+                        \"title\": \"Location\",\n+                        \"type\": \"array\",\n+                        \"items\": {\"type\": \"string\"},\n+                    },\n+                    \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n+                    \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n+                },\n+            },\n+            \"HTTPValidationError\": {\n+                \"title\": \"HTTPValidationError\",\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"detail\": {\n+                        \"title\": \"Detail\",\n+                        \"type\": \"array\",\n+                        \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n+                    }\n+                },\n+            },\n+        }\n+    },\n+}\n+\n+\n+@pytest.fixture(name=\"client\")\n+def get_client():\n+    from docs_src.query_params_str_validations.tutorial011_py310 import app\n+\n+    client = TestClient(app)\n+    return client\n+\n+\n+@needs_py310\n+def test_openapi_schema(client: TestClient):\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == openapi_schema\n+\n+\n+@needs_py310\n+def test_multi_query_values(client: TestClient):\n+    url = \"/items/?q=foo&q=bar\"\n+    response = client.get(url)\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\"q\": [\"foo\", \"bar\"]}\n+\n+\n+@needs_py310\n+def test_query_no_values(client: TestClient):\n+    url = \"/items/\"\n+    response = client.get(url)\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\"q\": None}\n\n@@ -0,0 +1,105 @@\n+import pytest\n+from fastapi.testclient import TestClient\n+\n+from ...utils import needs_py39\n+\n+openapi_schema = {\n+    \"openapi\": \"3.0.2\",\n+    \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n+    \"paths\": {\n+        \"/items/\": {\n+            \"get\": {\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                    },\n+                    \"422\": {\n+                        \"description\": \"Validation Error\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\n+                                    \"$ref\": \"#/components/schemas/HTTPValidationError\"\n+                                }\n+                            }\n+                        },\n+                    },\n+                },\n+                \"summary\": \"Read Items\",\n+                \"operationId\": \"read_items_items__get\",\n+                \"parameters\": [\n+                    {\n+                        \"required\": False,\n+                        \"schema\": {\n+                            \"title\": \"Q\",\n+                            \"type\": \"array\",\n+                            \"items\": {\"type\": \"string\"},\n+                        },\n+                        \"name\": \"q\",\n+                        \"in\": \"query\",\n+                    }\n+                ],\n+            }\n+        }\n+    },\n+    \"components\": {\n+        \"schemas\": {\n+            \"ValidationError\": {\n+                \"title\": \"ValidationError\",\n+                \"required\": [\"loc\", \"msg\", \"type\"],\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"loc\": {\n+                        \"title\": \"Location\",\n+                        \"type\": \"array\",\n+                        \"items\": {\"type\": \"string\"},\n+                    },\n+                    \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n+                    \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n+                },\n+            },\n+            \"HTTPValidationError\": {\n+                \"title\": \"HTTPValidationError\",\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"detail\": {\n+                        \"title\": \"Detail\",\n+                        \"type\": \"array\",\n+                        \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n+                    }\n+                },\n+            },\n+        }\n+    },\n+}\n+\n+\n+@pytest.fixture(name=\"client\")\n+def get_client():\n+    from docs_src.query_params_str_validations.tutorial011_py39 import app\n+\n+    client = TestClient(app)\n+    return client\n+\n+\n+@needs_py39\n+def test_openapi_schema(client: TestClient):\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == openapi_schema\n+\n+\n+@needs_py39\n+def test_multi_query_values(client: TestClient):\n+    url = \"/items/?q=foo&q=bar\"\n+    response = client.get(url)\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\"q\": [\"foo\", \"bar\"]}\n+\n+\n+@needs_py39\n+def test_query_no_values(client: TestClient):\n+    url = \"/items/\"\n+    response = client.get(url)\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\"q\": None}\n\n@@ -0,0 +1,106 @@\n+import pytest\n+from fastapi.testclient import TestClient\n+\n+from ...utils import needs_py39\n+\n+openapi_schema = {\n+    \"openapi\": \"3.0.2\",\n+    \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n+    \"paths\": {\n+        \"/items/\": {\n+            \"get\": {\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                    },\n+                    \"422\": {\n+                        \"description\": \"Validation Error\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\n+                                    \"$ref\": \"#/components/schemas/HTTPValidationError\"\n+                                }\n+                            }\n+                        },\n+                    },\n+                },\n+                \"summary\": \"Read Items\",\n+                \"operationId\": \"read_items_items__get\",\n+                \"parameters\": [\n+                    {\n+                        \"required\": False,\n+                        \"schema\": {\n+                            \"title\": \"Q\",\n+                            \"type\": \"array\",\n+                            \"items\": {\"type\": \"string\"},\n+                            \"default\": [\"foo\", \"bar\"],\n+                        },\n+                        \"name\": \"q\",\n+                        \"in\": \"query\",\n+                    }\n+                ],\n+            }\n+        }\n+    },\n+    \"components\": {\n+        \"schemas\": {\n+            \"ValidationError\": {\n+                \"title\": \"ValidationError\",\n+                \"required\": [\"loc\", \"msg\", \"type\"],\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"loc\": {\n+                        \"title\": \"Location\",\n+                        \"type\": \"array\",\n+                        \"items\": {\"type\": \"string\"},\n+                    },\n+                    \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n+                    \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n+                },\n+            },\n+            \"HTTPValidationError\": {\n+                \"title\": \"HTTPValidationError\",\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"detail\": {\n+                        \"title\": \"Detail\",\n+                        \"type\": \"array\",\n+                        \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n+                    }\n+                },\n+            },\n+        }\n+    },\n+}\n+\n+\n+@pytest.fixture(name=\"client\")\n+def get_client():\n+    from docs_src.query_params_str_validations.tutorial012_py39 import app\n+\n+    client = TestClient(app)\n+    return client\n+\n+\n+@needs_py39\n+def test_openapi_schema(client: TestClient):\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == openapi_schema\n+\n+\n+@needs_py39\n+def test_default_query_values(client: TestClient):\n+    url = \"/items/\"\n+    response = client.get(url)\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\"q\": [\"foo\", \"bar\"]}\n+\n+\n+@needs_py39\n+def test_multi_query_values(client: TestClient):\n+    url = \"/items/?q=baz&q=foobar\"\n+    response = client.get(url)\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\"q\": [\"baz\", \"foobar\"]}\n\n@@ -0,0 +1,235 @@\n+import pytest\n+from fastapi import FastAPI\n+from fastapi.testclient import TestClient\n+\n+from ...utils import needs_py39\n+\n+openapi_schema = {\n+    \"openapi\": \"3.0.2\",\n+    \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n+    \"paths\": {\n+        \"/files/\": {\n+            \"post\": {\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                    },\n+                    \"422\": {\n+                        \"description\": \"Validation Error\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\n+                                    \"$ref\": \"#/components/schemas/HTTPValidationError\"\n+                                }\n+                            }\n+                        },\n+                    },\n+                },\n+                \"summary\": \"Create Files\",\n+                \"operationId\": \"create_files_files__post\",\n+                \"requestBody\": {\n+                    \"content\": {\n+                        \"multipart/form-data\": {\n+                            \"schema\": {\n+                                \"$ref\": \"#/components/schemas/Body_create_files_files__post\"\n+                            }\n+                        }\n+                    },\n+                    \"required\": True,\n+                },\n+            }\n+        },\n+        \"/uploadfiles/\": {\n+            \"post\": {\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                    },\n+                    \"422\": {\n+                        \"description\": \"Validation Error\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\n+                                    \"$ref\": \"#/components/schemas/HTTPValidationError\"\n+                                }\n+                            }\n+                        },\n+                    },\n+                },\n+                \"summary\": \"Create Upload Files\",\n+                \"operationId\": \"create_upload_files_uploadfiles__post\",\n+                \"requestBody\": {\n+                    \"content\": {\n+                        \"multipart/form-data\": {\n+                            \"schema\": {\n+                                \"$ref\": \"#/components/schemas/Body_create_upload_files_uploadfiles__post\"\n+                            }\n+                        }\n+                    },\n+                    \"required\": True,\n+                },\n+            }\n+        },\n+        \"/\": {\n+            \"get\": {\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                    }\n+                },\n+                \"summary\": \"Main\",\n+                \"operationId\": \"main__get\",\n+            }\n+        },\n+    },\n+    \"components\": {\n+        \"schemas\": {\n+            \"Body_create_upload_files_uploadfiles__post\": {\n+                \"title\": \"Body_create_upload_files_uploadfiles__post\",\n+                \"required\": [\"files\"],\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"files\": {\n+                        \"title\": \"Files\",\n+                        \"type\": \"array\",\n+                        \"items\": {\"type\": \"string\", \"format\": \"binary\"},\n+                    }\n+                },\n+            },\n+            \"Body_create_files_files__post\": {\n+                \"title\": \"Body_create_files_files__post\",\n+                \"required\": [\"files\"],\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"files\": {\n+                        \"title\": \"Files\",\n+                        \"type\": \"array\",\n+                        \"items\": {\"type\": \"string\", \"format\": \"binary\"},\n+                    }\n+                },\n+            },\n+            \"ValidationError\": {\n+                \"title\": \"ValidationError\",\n+                \"required\": [\"loc\", \"msg\", \"type\"],\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"loc\": {\n+                        \"title\": \"Location\",\n+                        \"type\": \"array\",\n+                        \"items\": {\"type\": \"string\"},\n+                    },\n+                    \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n+                    \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n+                },\n+            },\n+            \"HTTPValidationError\": {\n+                \"title\": \"HTTPValidationError\",\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"detail\": {\n+                        \"title\": \"Detail\",\n+                        \"type\": \"array\",\n+                        \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n+                    }\n+                },\n+            },\n+        }\n+    },\n+}\n+\n+\n+@pytest.fixture(name=\"app\")\n+def get_app():\n+    from docs_src.request_files.tutorial002_py39 import app\n+\n+    return app\n+\n+\n+@pytest.fixture(name=\"client\")\n+def get_client(app: FastAPI):\n+\n+    client = TestClient(app)\n+    return client\n+\n+\n+@needs_py39\n+def test_openapi_schema(client: TestClient):\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == openapi_schema\n+\n+\n+file_required = {\n+    \"detail\": [\n+        {\n+            \"loc\": [\"body\", \"files\"],\n+            \"msg\": \"field required\",\n+            \"type\": \"value_error.missing\",\n+        }\n+    ]\n+}\n+\n+\n+@needs_py39\n+def test_post_form_no_body(client: TestClient):\n+    response = client.post(\"/files/\")\n+    assert response.status_code == 422, response.text\n+    assert response.json() == file_required\n+\n+\n+@needs_py39\n+def test_post_body_json(client: TestClient):\n+    response = client.post(\"/files/\", json={\"file\": \"Foo\"})\n+    assert response.status_code == 422, response.text\n+    assert response.json() == file_required\n+\n+\n+@needs_py39\n+def test_post_files(tmp_path, app: FastAPI):\n+    path = tmp_path / \"test.txt\"\n+    path.write_bytes(b\"<file content>\")\n+    path2 = tmp_path / \"test2.txt\"\n+    path2.write_bytes(b\"<file content2>\")\n+\n+    client = TestClient(app)\n+    with path.open(\"rb\") as file, path2.open(\"rb\") as file2:\n+        response = client.post(\n+            \"/files/\",\n+            files=(\n+                (\"files\", (\"test.txt\", file)),\n+                (\"files\", (\"test2.txt\", file2)),\n+            ),\n+        )\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\"file_sizes\": [14, 15]}\n+\n+\n+@needs_py39\n+def test_post_upload_file(tmp_path, app: FastAPI):\n+    path = tmp_path / \"test.txt\"\n+    path.write_bytes(b\"<file content>\")\n+    path2 = tmp_path / \"test2.txt\"\n+    path2.write_bytes(b\"<file content2>\")\n+\n+    client = TestClient(app)\n+    with path.open(\"rb\") as file, path2.open(\"rb\") as file2:\n+        response = client.post(\n+            \"/uploadfiles/\",\n+            files=(\n+                (\"files\", (\"test.txt\", file)),\n+                (\"files\", (\"test2.txt\", file2)),\n+            ),\n+        )\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\"filenames\": [\"test.txt\", \"test2.txt\"]}\n+\n+\n+@needs_py39\n+def test_get_root(app: FastAPI):\n+    client = TestClient(app)\n+    response = client.get(\"/\")\n+    assert response.status_code == 200, response.text\n+    assert b\"<form\" in response.content\n\n@@ -0,0 +1,129 @@\n+import pytest\n+from fastapi.testclient import TestClient\n+\n+from ...utils import needs_py310\n+\n+openapi_schema = {\n+    \"openapi\": \"3.0.2\",\n+    \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n+    \"paths\": {\n+        \"/user/\": {\n+            \"post\": {\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\"$ref\": \"#/components/schemas/UserOut\"}\n+                            }\n+                        },\n+                    },\n+                    \"422\": {\n+                        \"description\": \"Validation Error\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\n+                                    \"$ref\": \"#/components/schemas/HTTPValidationError\"\n+                                }\n+                            }\n+                        },\n+                    },\n+                },\n+                \"summary\": \"Create User\",\n+                \"operationId\": \"create_user_user__post\",\n+                \"requestBody\": {\n+                    \"content\": {\n+                        \"application/json\": {\n+                            \"schema\": {\"$ref\": \"#/components/schemas/UserIn\"}\n+                        }\n+                    },\n+                    \"required\": True,\n+                },\n+            }\n+        }\n+    },\n+    \"components\": {\n+        \"schemas\": {\n+            \"UserOut\": {\n+                \"title\": \"UserOut\",\n+                \"required\": [\"username\", \"email\"],\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"username\": {\"title\": \"Username\", \"type\": \"string\"},\n+                    \"email\": {\"title\": \"Email\", \"type\": \"string\", \"format\": \"email\"},\n+                    \"full_name\": {\"title\": \"Full Name\", \"type\": \"string\"},\n+                },\n+            },\n+            \"UserIn\": {\n+                \"title\": \"UserIn\",\n+                \"required\": [\"username\", \"password\", \"email\"],\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"username\": {\"title\": \"Username\", \"type\": \"string\"},\n+                    \"password\": {\"title\": \"Password\", \"type\": \"string\"},\n+                    \"email\": {\"title\": \"Email\", \"type\": \"string\", \"format\": \"email\"},\n+                    \"full_name\": {\"title\": \"Full Name\", \"type\": \"string\"},\n+                },\n+            },\n+            \"ValidationError\": {\n+                \"title\": \"ValidationError\",\n+                \"required\": [\"loc\", \"msg\", \"type\"],\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"loc\": {\n+                        \"title\": \"Location\",\n+                        \"type\": \"array\",\n+                        \"items\": {\"type\": \"string\"},\n+                    },\n+                    \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n+                    \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n+                },\n+            },\n+            \"HTTPValidationError\": {\n+                \"title\": \"HTTPValidationError\",\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"detail\": {\n+                        \"title\": \"Detail\",\n+                        \"type\": \"array\",\n+                        \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n+                    }\n+                },\n+            },\n+        }\n+    },\n+}\n+\n+\n+@pytest.fixture(name=\"client\")\n+def get_client():\n+    from docs_src.response_model.tutorial003_py310 import app\n+\n+    client = TestClient(app)\n+    return client\n+\n+\n+@needs_py310\n+def test_openapi_schema(client: TestClient):\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == openapi_schema\n+\n+\n+@needs_py310\n+def test_post_user(client: TestClient):\n+    response = client.post(\n+        \"/user/\",\n+        json={\n+            \"username\": \"foo\",\n+            \"password\": \"fighter\",\n+            \"email\": \"foo@example.com\",\n+            \"full_name\": \"Grave Dohl\",\n+        },\n+    )\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n+        \"username\": \"foo\",\n+        \"email\": \"foo@example.com\",\n+        \"full_name\": \"Grave Dohl\",\n+    }\n\n@@ -0,0 +1,133 @@\n+import pytest\n+from fastapi.testclient import TestClient\n+\n+from ...utils import needs_py310\n+\n+openapi_schema = {\n+    \"openapi\": \"3.0.2\",\n+    \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n+    \"paths\": {\n+        \"/items/{item_id}\": {\n+            \"get\": {\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\"$ref\": \"#/components/schemas/Item\"}\n+                            }\n+                        },\n+                    },\n+                    \"422\": {\n+                        \"description\": \"Validation Error\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\n+                                    \"$ref\": \"#/components/schemas/HTTPValidationError\"\n+                                }\n+                            }\n+                        },\n+                    },\n+                },\n+                \"summary\": \"Read Item\",\n+                \"operationId\": \"read_item_items__item_id__get\",\n+                \"parameters\": [\n+                    {\n+                        \"required\": True,\n+                        \"schema\": {\"title\": \"Item Id\", \"type\": \"string\"},\n+                        \"name\": \"item_id\",\n+                        \"in\": \"path\",\n+                    }\n+                ],\n+            }\n+        }\n+    },\n+    \"components\": {\n+        \"schemas\": {\n+            \"Item\": {\n+                \"title\": \"Item\",\n+                \"required\": [\"name\", \"price\"],\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"name\": {\"title\": \"Name\", \"type\": \"string\"},\n+                    \"price\": {\"title\": \"Price\", \"type\": \"number\"},\n+                    \"description\": {\"title\": \"Description\", \"type\": \"string\"},\n+                    \"tax\": {\"title\": \"Tax\", \"type\": \"number\", \"default\": 10.5},\n+                    \"tags\": {\n+                        \"title\": \"Tags\",\n+                        \"type\": \"array\",\n+                        \"items\": {\"type\": \"string\"},\n+                        \"default\": [],\n+                    },\n+                },\n+            },\n+            \"ValidationError\": {\n+                \"title\": \"ValidationError\",\n+                \"required\": [\"loc\", \"msg\", \"type\"],\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"loc\": {\n+                        \"title\": \"Location\",\n+                        \"type\": \"array\",\n+                        \"items\": {\"type\": \"string\"},\n+                    },\n+                    \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n+                    \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n+                },\n+            },\n+            \"HTTPValidationError\": {\n+                \"title\": \"HTTPValidationError\",\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"detail\": {\n+                        \"title\": \"Detail\",\n+                        \"type\": \"array\",\n+                        \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n+                    }\n+                },\n+            },\n+        }\n+    },\n+}\n+\n+\n+@pytest.fixture(name=\"client\")\n+def get_client():\n+    from docs_src.response_model.tutorial004_py310 import app\n+\n+    client = TestClient(app)\n+    return client\n+\n+\n+@needs_py310\n+def test_openapi_schema(client: TestClient):\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == openapi_schema\n+\n+\n+@needs_py310\n+@pytest.mark.parametrize(\n+    \"url,data\",\n+    [\n+        (\"/items/foo\", {\"name\": \"Foo\", \"price\": 50.2}),\n+        (\n+            \"/items/bar\",\n+            {\"name\": \"Bar\", \"description\": \"The bartenders\", \"price\": 62, \"tax\": 20.2},\n+        ),\n+        (\n+            \"/items/baz\",\n+            {\n+                \"name\": \"Baz\",\n+                \"description\": None,\n+                \"price\": 50.2,\n+                \"tax\": 10.5,\n+                \"tags\": [],\n+            },\n+        ),\n+    ],\n+)\n+def test_get(url, data, client: TestClient):\n+    response = client.get(url)\n+    assert response.status_code == 200, response.text\n+    assert response.json() == data\n\n@@ -0,0 +1,133 @@\n+import pytest\n+from fastapi.testclient import TestClient\n+\n+from ...utils import needs_py39\n+\n+openapi_schema = {\n+    \"openapi\": \"3.0.2\",\n+    \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n+    \"paths\": {\n+        \"/items/{item_id}\": {\n+            \"get\": {\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\"$ref\": \"#/components/schemas/Item\"}\n+                            }\n+                        },\n+                    },\n+                    \"422\": {\n+                        \"description\": \"Validation Error\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\n+                                    \"$ref\": \"#/components/schemas/HTTPValidationError\"\n+                                }\n+                            }\n+                        },\n+                    },\n+                },\n+                \"summary\": \"Read Item\",\n+                \"operationId\": \"read_item_items__item_id__get\",\n+                \"parameters\": [\n+                    {\n+                        \"required\": True,\n+                        \"schema\": {\"title\": \"Item Id\", \"type\": \"string\"},\n+                        \"name\": \"item_id\",\n+                        \"in\": \"path\",\n+                    }\n+                ],\n+            }\n+        }\n+    },\n+    \"components\": {\n+        \"schemas\": {\n+            \"Item\": {\n+                \"title\": \"Item\",\n+                \"required\": [\"name\", \"price\"],\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"name\": {\"title\": \"Name\", \"type\": \"string\"},\n+                    \"price\": {\"title\": \"Price\", \"type\": \"number\"},\n+                    \"description\": {\"title\": \"Description\", \"type\": \"string\"},\n+                    \"tax\": {\"title\": \"Tax\", \"type\": \"number\", \"default\": 10.5},\n+                    \"tags\": {\n+                        \"title\": \"Tags\",\n+                        \"type\": \"array\",\n+                        \"items\": {\"type\": \"string\"},\n+                        \"default\": [],\n+                    },\n+                },\n+            },\n+            \"ValidationError\": {\n+                \"title\": \"ValidationError\",\n+                \"required\": [\"loc\", \"msg\", \"type\"],\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"loc\": {\n+                        \"title\": \"Location\",\n+                        \"type\": \"array\",\n+                        \"items\": {\"type\": \"string\"},\n+                    },\n+                    \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n+                    \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n+                },\n+            },\n+            \"HTTPValidationError\": {\n+                \"title\": \"HTTPValidationError\",\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"detail\": {\n+                        \"title\": \"Detail\",\n+                        \"type\": \"array\",\n+                        \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n+                    }\n+                },\n+            },\n+        }\n+    },\n+}\n+\n+\n+@pytest.fixture(name=\"client\")\n+def get_client():\n+    from docs_src.response_model.tutorial004_py39 import app\n+\n+    client = TestClient(app)\n+    return client\n+\n+\n+@needs_py39\n+def test_openapi_schema(client: TestClient):\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == openapi_schema\n+\n+\n+@needs_py39\n+@pytest.mark.parametrize(\n+    \"url,data\",\n+    [\n+        (\"/items/foo\", {\"name\": \"Foo\", \"price\": 50.2}),\n+        (\n+            \"/items/bar\",\n+            {\"name\": \"Bar\", \"description\": \"The bartenders\", \"price\": 62, \"tax\": 20.2},\n+        ),\n+        (\n+            \"/items/baz\",\n+            {\n+                \"name\": \"Baz\",\n+                \"description\": None,\n+                \"price\": 50.2,\n+                \"tax\": 10.5,\n+                \"tags\": [],\n+            },\n+        ),\n+    ],\n+)\n+def test_get(url, data, client: TestClient):\n+    response = client.get(url)\n+    assert response.status_code == 200, response.text\n+    assert response.json() == data\n\n@@ -0,0 +1,152 @@\n+import pytest\n+from fastapi.testclient import TestClient\n+\n+from ...utils import needs_py310\n+\n+openapi_schema = {\n+    \"openapi\": \"3.0.2\",\n+    \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n+    \"paths\": {\n+        \"/items/{item_id}/name\": {\n+            \"get\": {\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\"$ref\": \"#/components/schemas/Item\"}\n+                            }\n+                        },\n+                    },\n+                    \"422\": {\n+                        \"description\": \"Validation Error\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\n+                                    \"$ref\": \"#/components/schemas/HTTPValidationError\"\n+                                }\n+                            }\n+                        },\n+                    },\n+                },\n+                \"summary\": \"Read Item Name\",\n+                \"operationId\": \"read_item_name_items__item_id__name_get\",\n+                \"parameters\": [\n+                    {\n+                        \"required\": True,\n+                        \"schema\": {\"title\": \"Item Id\", \"type\": \"string\"},\n+                        \"name\": \"item_id\",\n+                        \"in\": \"path\",\n+                    }\n+                ],\n+            }\n+        },\n+        \"/items/{item_id}/public\": {\n+            \"get\": {\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\"$ref\": \"#/components/schemas/Item\"}\n+                            }\n+                        },\n+                    },\n+                    \"422\": {\n+                        \"description\": \"Validation Error\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\n+                                    \"$ref\": \"#/components/schemas/HTTPValidationError\"\n+                                }\n+                            }\n+                        },\n+                    },\n+                },\n+                \"summary\": \"Read Item Public Data\",\n+                \"operationId\": \"read_item_public_data_items__item_id__public_get\",\n+                \"parameters\": [\n+                    {\n+                        \"required\": True,\n+                        \"schema\": {\"title\": \"Item Id\", \"type\": \"string\"},\n+                        \"name\": \"item_id\",\n+                        \"in\": \"path\",\n+                    }\n+                ],\n+            }\n+        },\n+    },\n+    \"components\": {\n+        \"schemas\": {\n+            \"Item\": {\n+                \"title\": \"Item\",\n+                \"required\": [\"name\", \"price\"],\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"name\": {\"title\": \"Name\", \"type\": \"string\"},\n+                    \"price\": {\"title\": \"Price\", \"type\": \"number\"},\n+                    \"description\": {\"title\": \"Description\", \"type\": \"string\"},\n+                    \"tax\": {\"title\": \"Tax\", \"type\": \"number\", \"default\": 10.5},\n+                },\n+            },\n+            \"ValidationError\": {\n+                \"title\": \"ValidationError\",\n+                \"required\": [\"loc\", \"msg\", \"type\"],\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"loc\": {\n+                        \"title\": \"Location\",\n+                        \"type\": \"array\",\n+                        \"items\": {\"type\": \"string\"},\n+                    },\n+                    \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n+                    \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n+                },\n+            },\n+            \"HTTPValidationError\": {\n+                \"title\": \"HTTPValidationError\",\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"detail\": {\n+                        \"title\": \"Detail\",\n+                        \"type\": \"array\",\n+                        \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n+                    }\n+                },\n+            },\n+        }\n+    },\n+}\n+\n+\n+@pytest.fixture(name=\"client\")\n+def get_client():\n+    from docs_src.response_model.tutorial005_py310 import app\n+\n+    client = TestClient(app)\n+    return client\n+\n+\n+@needs_py310\n+def test_openapi_schema(client: TestClient):\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == openapi_schema\n+\n+\n+@needs_py310\n+def test_read_item_name(client: TestClient):\n+    response = client.get(\"/items/bar/name\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\"name\": \"Bar\", \"description\": \"The Bar fighters\"}\n+\n+\n+@needs_py310\n+def test_read_item_public_data(client: TestClient):\n+    response = client.get(\"/items/bar/public\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n+        \"name\": \"Bar\",\n+        \"description\": \"The Bar fighters\",\n+        \"price\": 62,\n+    }\n\n@@ -0,0 +1,152 @@\n+import pytest\n+from fastapi.testclient import TestClient\n+\n+from ...utils import needs_py310\n+\n+openapi_schema = {\n+    \"openapi\": \"3.0.2\",\n+    \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n+    \"paths\": {\n+        \"/items/{item_id}/name\": {\n+            \"get\": {\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\"$ref\": \"#/components/schemas/Item\"}\n+                            }\n+                        },\n+                    },\n+                    \"422\": {\n+                        \"description\": \"Validation Error\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\n+                                    \"$ref\": \"#/components/schemas/HTTPValidationError\"\n+                                }\n+                            }\n+                        },\n+                    },\n+                },\n+                \"summary\": \"Read Item Name\",\n+                \"operationId\": \"read_item_name_items__item_id__name_get\",\n+                \"parameters\": [\n+                    {\n+                        \"required\": True,\n+                        \"schema\": {\"title\": \"Item Id\", \"type\": \"string\"},\n+                        \"name\": \"item_id\",\n+                        \"in\": \"path\",\n+                    }\n+                ],\n+            }\n+        },\n+        \"/items/{item_id}/public\": {\n+            \"get\": {\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\"$ref\": \"#/components/schemas/Item\"}\n+                            }\n+                        },\n+                    },\n+                    \"422\": {\n+                        \"description\": \"Validation Error\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\n+                                    \"$ref\": \"#/components/schemas/HTTPValidationError\"\n+                                }\n+                            }\n+                        },\n+                    },\n+                },\n+                \"summary\": \"Read Item Public Data\",\n+                \"operationId\": \"read_item_public_data_items__item_id__public_get\",\n+                \"parameters\": [\n+                    {\n+                        \"required\": True,\n+                        \"schema\": {\"title\": \"Item Id\", \"type\": \"string\"},\n+                        \"name\": \"item_id\",\n+                        \"in\": \"path\",\n+                    }\n+                ],\n+            }\n+        },\n+    },\n+    \"components\": {\n+        \"schemas\": {\n+            \"Item\": {\n+                \"title\": \"Item\",\n+                \"required\": [\"name\", \"price\"],\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"name\": {\"title\": \"Name\", \"type\": \"string\"},\n+                    \"price\": {\"title\": \"Price\", \"type\": \"number\"},\n+                    \"description\": {\"title\": \"Description\", \"type\": \"string\"},\n+                    \"tax\": {\"title\": \"Tax\", \"type\": \"number\", \"default\": 10.5},\n+                },\n+            },\n+            \"ValidationError\": {\n+                \"title\": \"ValidationError\",\n+                \"required\": [\"loc\", \"msg\", \"type\"],\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"loc\": {\n+                        \"title\": \"Location\",\n+                        \"type\": \"array\",\n+                        \"items\": {\"type\": \"string\"},\n+                    },\n+                    \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n+                    \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n+                },\n+            },\n+            \"HTTPValidationError\": {\n+                \"title\": \"HTTPValidationError\",\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"detail\": {\n+                        \"title\": \"Detail\",\n+                        \"type\": \"array\",\n+                        \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n+                    }\n+                },\n+            },\n+        }\n+    },\n+}\n+\n+\n+@pytest.fixture(name=\"client\")\n+def get_client():\n+    from docs_src.response_model.tutorial006_py310 import app\n+\n+    client = TestClient(app)\n+    return client\n+\n+\n+@needs_py310\n+def test_openapi_schema(client: TestClient):\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == openapi_schema\n+\n+\n+@needs_py310\n+def test_read_item_name(client: TestClient):\n+    response = client.get(\"/items/bar/name\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\"name\": \"Bar\", \"description\": \"The Bar fighters\"}\n+\n+\n+@needs_py310\n+def test_read_item_public_data(client: TestClient):\n+    response = client.get(\"/items/bar/public\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n+        \"name\": \"Bar\",\n+        \"description\": \"The Bar fighters\",\n+        \"price\": 62,\n+    }\n\n@@ -0,0 +1,143 @@\n+import pytest\n+from fastapi.testclient import TestClient\n+\n+from ...utils import needs_py310\n+\n+openapi_schema = {\n+    \"openapi\": \"3.0.2\",\n+    \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n+    \"paths\": {\n+        \"/items/{item_id}\": {\n+            \"put\": {\n+                \"summary\": \"Update Item\",\n+                \"operationId\": \"update_item_items__item_id__put\",\n+                \"parameters\": [\n+                    {\n+                        \"required\": True,\n+                        \"schema\": {\"title\": \"Item Id\", \"type\": \"integer\"},\n+                        \"name\": \"item_id\",\n+                        \"in\": \"path\",\n+                    }\n+                ],\n+                \"requestBody\": {\n+                    \"content\": {\n+                        \"application/json\": {\n+                            \"schema\": {\"$ref\": \"#/components/schemas/Item\"},\n+                            \"examples\": {\n+                                \"normal\": {\n+                                    \"summary\": \"A normal example\",\n+                                    \"description\": \"A **normal** item works correctly.\",\n+                                    \"value\": {\n+                                        \"name\": \"Foo\",\n+                                        \"description\": \"A very nice Item\",\n+                                        \"price\": 35.4,\n+                                        \"tax\": 3.2,\n+                                    },\n+                                },\n+                                \"converted\": {\n+                                    \"summary\": \"An example with converted data\",\n+                                    \"description\": \"FastAPI can convert price `strings` to actual `numbers` automatically\",\n+                                    \"value\": {\"name\": \"Bar\", \"price\": \"35.4\"},\n+                                },\n+                                \"invalid\": {\n+                                    \"summary\": \"Invalid data is rejected with an error\",\n+                                    \"value\": {\n+                                        \"name\": \"Baz\",\n+                                        \"price\": \"thirty five point four\",\n+                                    },\n+                                },\n+                            },\n+                        }\n+                    },\n+                    \"required\": True,\n+                },\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                    },\n+                    \"422\": {\n+                        \"description\": \"Validation Error\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\n+                                    \"$ref\": \"#/components/schemas/HTTPValidationError\"\n+                                }\n+                            }\n+                        },\n+                    },\n+                },\n+            }\n+        }\n+    },\n+    \"components\": {\n+        \"schemas\": {\n+            \"HTTPValidationError\": {\n+                \"title\": \"HTTPValidationError\",\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"detail\": {\n+                        \"title\": \"Detail\",\n+                        \"type\": \"array\",\n+                        \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n+                    }\n+                },\n+            },\n+            \"Item\": {\n+                \"title\": \"Item\",\n+                \"required\": [\"name\", \"price\"],\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"name\": {\"title\": \"Name\", \"type\": \"string\"},\n+                    \"description\": {\"title\": \"Description\", \"type\": \"string\"},\n+                    \"price\": {\"title\": \"Price\", \"type\": \"number\"},\n+                    \"tax\": {\"title\": \"Tax\", \"type\": \"number\"},\n+                },\n+            },\n+            \"ValidationError\": {\n+                \"title\": \"ValidationError\",\n+                \"required\": [\"loc\", \"msg\", \"type\"],\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"loc\": {\n+                        \"title\": \"Location\",\n+                        \"type\": \"array\",\n+                        \"items\": {\"type\": \"string\"},\n+                    },\n+                    \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n+                    \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n+                },\n+            },\n+        }\n+    },\n+}\n+\n+\n+@pytest.fixture(name=\"client\")\n+def get_client():\n+    from docs_src.schema_extra_example.tutorial004_py310 import app\n+\n+    client = TestClient(app)\n+    return client\n+\n+\n+@needs_py310\n+def test_openapi_schema(client: TestClient):\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == openapi_schema\n+\n+\n+# Test required and embedded body parameters with no bodies sent\n+@needs_py310\n+def test_post_body_example(client: TestClient):\n+    response = client.put(\n+        \"/items/5\",\n+        json={\n+            \"name\": \"Foo\",\n+            \"description\": \"A very nice Item\",\n+            \"price\": 35.4,\n+            \"tax\": 3.2,\n+        },\n+    )\n+    assert response.status_code == 200\n\n@@ -0,0 +1,192 @@\n+import pytest\n+from fastapi.testclient import TestClient\n+\n+from ...utils import needs_py310\n+\n+openapi_schema = {\n+    \"openapi\": \"3.0.2\",\n+    \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n+    \"paths\": {\n+        \"/token\": {\n+            \"post\": {\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                    },\n+                    \"422\": {\n+                        \"description\": \"Validation Error\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\n+                                    \"$ref\": \"#/components/schemas/HTTPValidationError\"\n+                                }\n+                            }\n+                        },\n+                    },\n+                },\n+                \"summary\": \"Login\",\n+                \"operationId\": \"login_token_post\",\n+                \"requestBody\": {\n+                    \"content\": {\n+                        \"application/x-www-form-urlencoded\": {\n+                            \"schema\": {\n+                                \"$ref\": \"#/components/schemas/Body_login_token_post\"\n+                            }\n+                        }\n+                    },\n+                    \"required\": True,\n+                },\n+            }\n+        },\n+        \"/users/me\": {\n+            \"get\": {\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                    }\n+                },\n+                \"summary\": \"Read Users Me\",\n+                \"operationId\": \"read_users_me_users_me_get\",\n+                \"security\": [{\"OAuth2PasswordBearer\": []}],\n+            }\n+        },\n+    },\n+    \"components\": {\n+        \"schemas\": {\n+            \"Body_login_token_post\": {\n+                \"title\": \"Body_login_token_post\",\n+                \"required\": [\"username\", \"password\"],\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"grant_type\": {\n+                        \"title\": \"Grant Type\",\n+                        \"pattern\": \"password\",\n+                        \"type\": \"string\",\n+                    },\n+                    \"username\": {\"title\": \"Username\", \"type\": \"string\"},\n+                    \"password\": {\"title\": \"Password\", \"type\": \"string\"},\n+                    \"scope\": {\"title\": \"Scope\", \"type\": \"string\", \"default\": \"\"},\n+                    \"client_id\": {\"title\": \"Client Id\", \"type\": \"string\"},\n+                    \"client_secret\": {\"title\": \"Client Secret\", \"type\": \"string\"},\n+                },\n+            },\n+            \"ValidationError\": {\n+                \"title\": \"ValidationError\",\n+                \"required\": [\"loc\", \"msg\", \"type\"],\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"loc\": {\n+                        \"title\": \"Location\",\n+                        \"type\": \"array\",\n+                        \"items\": {\"type\": \"string\"},\n+                    },\n+                    \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n+                    \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n+                },\n+            },\n+            \"HTTPValidationError\": {\n+                \"title\": \"HTTPValidationError\",\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"detail\": {\n+                        \"title\": \"Detail\",\n+                        \"type\": \"array\",\n+                        \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n+                    }\n+                },\n+            },\n+        },\n+        \"securitySchemes\": {\n+            \"OAuth2PasswordBearer\": {\n+                \"type\": \"oauth2\",\n+                \"flows\": {\"password\": {\"scopes\": {}, \"tokenUrl\": \"token\"}},\n+            }\n+        },\n+    },\n+}\n+\n+\n+@pytest.fixture(name=\"client\")\n+def get_client():\n+    from docs_src.security.tutorial003_py310 import app\n+\n+    client = TestClient(app)\n+    return client\n+\n+\n+@needs_py310\n+def test_openapi_schema(client: TestClient):\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == openapi_schema\n+\n+\n+@needs_py310\n+def test_login(client: TestClient):\n+    response = client.post(\"/token\", data={\"username\": \"johndoe\", \"password\": \"secret\"})\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\"access_token\": \"johndoe\", \"token_type\": \"bearer\"}\n+\n+\n+@needs_py310\n+def test_login_incorrect_password(client: TestClient):\n+    response = client.post(\n+        \"/token\", data={\"username\": \"johndoe\", \"password\": \"incorrect\"}\n+    )\n+    assert response.status_code == 400, response.text\n+    assert response.json() == {\"detail\": \"Incorrect username or password\"}\n+\n+\n+@needs_py310\n+def test_login_incorrect_username(client: TestClient):\n+    response = client.post(\"/token\", data={\"username\": \"foo\", \"password\": \"secret\"})\n+    assert response.status_code == 400, response.text\n+    assert response.json() == {\"detail\": \"Incorrect username or password\"}\n+\n+\n+@needs_py310\n+def test_no_token(client: TestClient):\n+    response = client.get(\"/users/me\")\n+    assert response.status_code == 401, response.text\n+    assert response.json() == {\"detail\": \"Not authenticated\"}\n+    assert response.headers[\"WWW-Authenticate\"] == \"Bearer\"\n+\n+\n+@needs_py310\n+def test_token(client: TestClient):\n+    response = client.get(\"/users/me\", headers={\"Authorization\": \"Bearer johndoe\"})\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n+        \"username\": \"johndoe\",\n+        \"full_name\": \"John Doe\",\n+        \"email\": \"johndoe@example.com\",\n+        \"hashed_password\": \"fakehashedsecret\",\n+        \"disabled\": False,\n+    }\n+\n+\n+@needs_py310\n+def test_incorrect_token(client: TestClient):\n+    response = client.get(\"/users/me\", headers={\"Authorization\": \"Bearer nonexistent\"})\n+    assert response.status_code == 401, response.text\n+    assert response.json() == {\"detail\": \"Invalid authentication credentials\"}\n+    assert response.headers[\"WWW-Authenticate\"] == \"Bearer\"\n+\n+\n+@needs_py310\n+def test_incorrect_token_type(client: TestClient):\n+    response = client.get(\n+        \"/users/me\", headers={\"Authorization\": \"Notexistent testtoken\"}\n+    )\n+    assert response.status_code == 401, response.text\n+    assert response.json() == {\"detail\": \"Not authenticated\"}\n+    assert response.headers[\"WWW-Authenticate\"] == \"Bearer\"\n+\n+\n+@needs_py310\n+def test_inactive_user(client: TestClient):\n+    response = client.get(\"/users/me\", headers={\"Authorization\": \"Bearer alice\"})\n+    assert response.status_code == 400, response.text\n+    assert response.json() == {\"detail\": \"Inactive user\"}\n\n@@ -0,0 +1,375 @@\n+import pytest\n+from fastapi.testclient import TestClient\n+\n+from ...utils import needs_py310\n+\n+openapi_schema = {\n+    \"openapi\": \"3.0.2\",\n+    \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n+    \"paths\": {\n+        \"/token\": {\n+            \"post\": {\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\"$ref\": \"#/components/schemas/Token\"}\n+                            }\n+                        },\n+                    },\n+                    \"422\": {\n+                        \"description\": \"Validation Error\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\n+                                    \"$ref\": \"#/components/schemas/HTTPValidationError\"\n+                                }\n+                            }\n+                        },\n+                    },\n+                },\n+                \"summary\": \"Login For Access Token\",\n+                \"operationId\": \"login_for_access_token_token_post\",\n+                \"requestBody\": {\n+                    \"content\": {\n+                        \"application/x-www-form-urlencoded\": {\n+                            \"schema\": {\n+                                \"$ref\": \"#/components/schemas/Body_login_for_access_token_token_post\"\n+                            }\n+                        }\n+                    },\n+                    \"required\": True,\n+                },\n+            }\n+        },\n+        \"/users/me/\": {\n+            \"get\": {\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\"$ref\": \"#/components/schemas/User\"}\n+                            }\n+                        },\n+                    }\n+                },\n+                \"summary\": \"Read Users Me\",\n+                \"operationId\": \"read_users_me_users_me__get\",\n+                \"security\": [{\"OAuth2PasswordBearer\": [\"me\"]}],\n+            }\n+        },\n+        \"/users/me/items/\": {\n+            \"get\": {\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                    }\n+                },\n+                \"summary\": \"Read Own Items\",\n+                \"operationId\": \"read_own_items_users_me_items__get\",\n+                \"security\": [{\"OAuth2PasswordBearer\": [\"items\", \"me\"]}],\n+            }\n+        },\n+        \"/status/\": {\n+            \"get\": {\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                    }\n+                },\n+                \"summary\": \"Read System Status\",\n+                \"operationId\": \"read_system_status_status__get\",\n+                \"security\": [{\"OAuth2PasswordBearer\": []}],\n+            }\n+        },\n+    },\n+    \"components\": {\n+        \"schemas\": {\n+            \"User\": {\n+                \"title\": \"User\",\n+                \"required\": [\"username\"],\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"username\": {\"title\": \"Username\", \"type\": \"string\"},\n+                    \"email\": {\"title\": \"Email\", \"type\": \"string\"},\n+                    \"full_name\": {\"title\": \"Full Name\", \"type\": \"string\"},\n+                    \"disabled\": {\"title\": \"Disabled\", \"type\": \"boolean\"},\n+                },\n+            },\n+            \"Token\": {\n+                \"title\": \"Token\",\n+                \"required\": [\"access_token\", \"token_type\"],\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"access_token\": {\"title\": \"Access Token\", \"type\": \"string\"},\n+                    \"token_type\": {\"title\": \"Token Type\", \"type\": \"string\"},\n+                },\n+            },\n+            \"Body_login_for_access_token_token_post\": {\n+                \"title\": \"Body_login_for_access_token_token_post\",\n+                \"required\": [\"username\", \"password\"],\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"grant_type\": {\n+                        \"title\": \"Grant Type\",\n+                        \"pattern\": \"password\",\n+                        \"type\": \"string\",\n+                    },\n+                    \"username\": {\"title\": \"Username\", \"type\": \"string\"},\n+                    \"password\": {\"title\": \"Password\", \"type\": \"string\"},\n+                    \"scope\": {\"title\": \"Scope\", \"type\": \"string\", \"default\": \"\"},\n+                    \"client_id\": {\"title\": \"Client Id\", \"type\": \"string\"},\n+                    \"client_secret\": {\"title\": \"Client Secret\", \"type\": \"string\"},\n+                },\n+            },\n+            \"ValidationError\": {\n+                \"title\": \"ValidationError\",\n+                \"required\": [\"loc\", \"msg\", \"type\"],\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"loc\": {\n+                        \"title\": \"Location\",\n+                        \"type\": \"array\",\n+                        \"items\": {\"type\": \"string\"},\n+                    },\n+                    \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n+                    \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n+                },\n+            },\n+            \"HTTPValidationError\": {\n+                \"title\": \"HTTPValidationError\",\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"detail\": {\n+                        \"title\": \"Detail\",\n+                        \"type\": \"array\",\n+                        \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n+                    }\n+                },\n+            },\n+        },\n+        \"securitySchemes\": {\n+            \"OAuth2PasswordBearer\": {\n+                \"type\": \"oauth2\",\n+                \"flows\": {\n+                    \"password\": {\n+                        \"scopes\": {\n+                            \"me\": \"Read information about the current user.\",\n+                            \"items\": \"Read items.\",\n+                        },\n+                        \"tokenUrl\": \"token\",\n+                    }\n+                },\n+            }\n+        },\n+    },\n+}\n+\n+\n+@pytest.fixture(name=\"client\")\n+def get_client():\n+    from docs_src.security.tutorial005_py310 import app\n+\n+    client = TestClient(app)\n+    return client\n+\n+\n+@needs_py310\n+def test_openapi_schema(client: TestClient):\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == openapi_schema\n+\n+\n+def get_access_token(\n+    *, username=\"johndoe\", password=\"secret\", scope=None, client: TestClient\n+):\n+    data = {\"username\": username, \"password\": password}\n+    if scope:\n+        data[\"scope\"] = scope\n+    response = client.post(\"/token\", data=data)\n+    content = response.json()\n+    access_token = content.get(\"access_token\")\n+    return access_token\n+\n+\n+@needs_py310\n+def test_login(client: TestClient):\n+    response = client.post(\"/token\", data={\"username\": \"johndoe\", \"password\": \"secret\"})\n+    assert response.status_code == 200, response.text\n+    content = response.json()\n+    assert \"access_token\" in content\n+    assert content[\"token_type\"] == \"bearer\"\n+\n+\n+@needs_py310\n+def test_login_incorrect_password(client: TestClient):\n+    response = client.post(\n+        \"/token\", data={\"username\": \"johndoe\", \"password\": \"incorrect\"}\n+    )\n+    assert response.status_code == 400, response.text\n+    assert response.json() == {\"detail\": \"Incorrect username or password\"}\n+\n+\n+@needs_py310\n+def test_login_incorrect_username(client: TestClient):\n+    response = client.post(\"/token\", data={\"username\": \"foo\", \"password\": \"secret\"})\n+    assert response.status_code == 400, response.text\n+    assert response.json() == {\"detail\": \"Incorrect username or password\"}\n+\n+\n+@needs_py310\n+def test_no_token(client: TestClient):\n+    response = client.get(\"/users/me\")\n+    assert response.status_code == 401, response.text\n+    assert response.json() == {\"detail\": \"Not authenticated\"}\n+    assert response.headers[\"WWW-Authenticate\"] == \"Bearer\"\n+\n+\n+@needs_py310\n+def test_token(client: TestClient):\n+    access_token = get_access_token(scope=\"me\", client=client)\n+    response = client.get(\n+        \"/users/me\", headers={\"Authorization\": f\"Bearer {access_token}\"}\n+    )\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n+        \"username\": \"johndoe\",\n+        \"full_name\": \"John Doe\",\n+        \"email\": \"johndoe@example.com\",\n+        \"disabled\": False,\n+    }\n+\n+\n+@needs_py310\n+def test_incorrect_token(client: TestClient):\n+    response = client.get(\"/users/me\", headers={\"Authorization\": \"Bearer nonexistent\"})\n+    assert response.status_code == 401, response.text\n+    assert response.json() == {\"detail\": \"Could not validate credentials\"}\n+    assert response.headers[\"WWW-Authenticate\"] == 'Bearer scope=\"me\"'\n+\n+\n+@needs_py310\n+def test_incorrect_token_type(client: TestClient):\n+    response = client.get(\n+        \"/users/me\", headers={\"Authorization\": \"Notexistent testtoken\"}\n+    )\n+    assert response.status_code == 401, response.text\n+    assert response.json() == {\"detail\": \"Not authenticated\"}\n+    assert response.headers[\"WWW-Authenticate\"] == \"Bearer\"\n+\n+\n+@needs_py310\n+def test_verify_password():\n+    from docs_src.security.tutorial005_py310 import fake_users_db, verify_password\n+\n+    assert verify_password(\"secret\", fake_users_db[\"johndoe\"][\"hashed_password\"])\n+\n+\n+@needs_py310\n+def test_get_password_hash():\n+    from docs_src.security.tutorial005_py310 import get_password_hash\n+\n+    assert get_password_hash(\"secretalice\")\n+\n+\n+@needs_py310\n+def test_create_access_token():\n+    from docs_src.security.tutorial005_py310 import create_access_token\n+\n+    access_token = create_access_token(data={\"data\": \"foo\"})\n+    assert access_token\n+\n+\n+@needs_py310\n+def test_token_no_sub(client: TestClient):\n+    response = client.get(\n+        \"/users/me\",\n+        headers={\n+            \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJkYXRhIjoiZm9vIn0.9ynBhuYb4e6aW3oJr_K_TBgwcMTDpRToQIE25L57rOE\"\n+        },\n+    )\n+    assert response.status_code == 401, response.text\n+    assert response.json() == {\"detail\": \"Could not validate credentials\"}\n+    assert response.headers[\"WWW-Authenticate\"] == 'Bearer scope=\"me\"'\n+\n+\n+@needs_py310\n+def test_token_no_username(client: TestClient):\n+    response = client.get(\n+        \"/users/me\",\n+        headers={\n+            \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJmb28ifQ.NnExK_dlNAYyzACrXtXDrcWOgGY2JuPbI4eDaHdfK5Y\"\n+        },\n+    )\n+    assert response.status_code == 401, response.text\n+    assert response.json() == {\"detail\": \"Could not validate credentials\"}\n+    assert response.headers[\"WWW-Authenticate\"] == 'Bearer scope=\"me\"'\n+\n+\n+@needs_py310\n+def test_token_no_scope(client: TestClient):\n+    access_token = get_access_token(client=client)\n+    response = client.get(\n+        \"/users/me\", headers={\"Authorization\": f\"Bearer {access_token}\"}\n+    )\n+    assert response.status_code == 401, response.text\n+    assert response.json() == {\"detail\": \"Not enough permissions\"}\n+    assert response.headers[\"WWW-Authenticate\"] == 'Bearer scope=\"me\"'\n+\n+\n+@needs_py310\n+def test_token_inexistent_user(client: TestClient):\n+    response = client.get(\n+        \"/users/me\",\n+        headers={\n+            \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJ1c2VybmFtZTpib2IifQ.HcfCW67Uda-0gz54ZWTqmtgJnZeNem0Q757eTa9EZuw\"\n+        },\n+    )\n+    assert response.status_code == 401, response.text\n+    assert response.json() == {\"detail\": \"Could not validate credentials\"}\n+    assert response.headers[\"WWW-Authenticate\"] == 'Bearer scope=\"me\"'\n+\n+\n+@needs_py310\n+def test_token_inactive_user(client: TestClient):\n+    access_token = get_access_token(\n+        username=\"alice\", password=\"secretalice\", scope=\"me\", client=client\n+    )\n+    response = client.get(\n+        \"/users/me\", headers={\"Authorization\": f\"Bearer {access_token}\"}\n+    )\n+    assert response.status_code == 400, response.text\n+    assert response.json() == {\"detail\": \"Inactive user\"}\n+\n+\n+@needs_py310\n+def test_read_items(client: TestClient):\n+    access_token = get_access_token(scope=\"me items\", client=client)\n+    response = client.get(\n+        \"/users/me/items/\", headers={\"Authorization\": f\"Bearer {access_token}\"}\n+    )\n+    assert response.status_code == 200, response.text\n+    assert response.json() == [{\"item_id\": \"Foo\", \"owner\": \"johndoe\"}]\n+\n+\n+@needs_py310\n+def test_read_system_status(client: TestClient):\n+    access_token = get_access_token(client=client)\n+    response = client.get(\n+        \"/status/\", headers={\"Authorization\": f\"Bearer {access_token}\"}\n+    )\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\"status\": \"ok\"}\n+\n+\n+@needs_py310\n+def test_read_system_status_no_token(client: TestClient):\n+    response = client.get(\"/status/\")\n+    assert response.status_code == 401, response.text\n+    assert response.json() == {\"detail\": \"Not authenticated\"}\n+    assert response.headers[\"WWW-Authenticate\"] == \"Bearer\"\n\n@@ -0,0 +1,375 @@\n+import pytest\n+from fastapi.testclient import TestClient\n+\n+from ...utils import needs_py39\n+\n+openapi_schema = {\n+    \"openapi\": \"3.0.2\",\n+    \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n+    \"paths\": {\n+        \"/token\": {\n+            \"post\": {\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\"$ref\": \"#/components/schemas/Token\"}\n+                            }\n+                        },\n+                    },\n+                    \"422\": {\n+                        \"description\": \"Validation Error\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\n+                                    \"$ref\": \"#/components/schemas/HTTPValidationError\"\n+                                }\n+                            }\n+                        },\n+                    },\n+                },\n+                \"summary\": \"Login For Access Token\",\n+                \"operationId\": \"login_for_access_token_token_post\",\n+                \"requestBody\": {\n+                    \"content\": {\n+                        \"application/x-www-form-urlencoded\": {\n+                            \"schema\": {\n+                                \"$ref\": \"#/components/schemas/Body_login_for_access_token_token_post\"\n+                            }\n+                        }\n+                    },\n+                    \"required\": True,\n+                },\n+            }\n+        },\n+        \"/users/me/\": {\n+            \"get\": {\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\"$ref\": \"#/components/schemas/User\"}\n+                            }\n+                        },\n+                    }\n+                },\n+                \"summary\": \"Read Users Me\",\n+                \"operationId\": \"read_users_me_users_me__get\",\n+                \"security\": [{\"OAuth2PasswordBearer\": [\"me\"]}],\n+            }\n+        },\n+        \"/users/me/items/\": {\n+            \"get\": {\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                    }\n+                },\n+                \"summary\": \"Read Own Items\",\n+                \"operationId\": \"read_own_items_users_me_items__get\",\n+                \"security\": [{\"OAuth2PasswordBearer\": [\"items\", \"me\"]}],\n+            }\n+        },\n+        \"/status/\": {\n+            \"get\": {\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                    }\n+                },\n+                \"summary\": \"Read System Status\",\n+                \"operationId\": \"read_system_status_status__get\",\n+                \"security\": [{\"OAuth2PasswordBearer\": []}],\n+            }\n+        },\n+    },\n+    \"components\": {\n+        \"schemas\": {\n+            \"User\": {\n+                \"title\": \"User\",\n+                \"required\": [\"username\"],\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"username\": {\"title\": \"Username\", \"type\": \"string\"},\n+                    \"email\": {\"title\": \"Email\", \"type\": \"string\"},\n+                    \"full_name\": {\"title\": \"Full Name\", \"type\": \"string\"},\n+                    \"disabled\": {\"title\": \"Disabled\", \"type\": \"boolean\"},\n+                },\n+            },\n+            \"Token\": {\n+                \"title\": \"Token\",\n+                \"required\": [\"access_token\", \"token_type\"],\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"access_token\": {\"title\": \"Access Token\", \"type\": \"string\"},\n+                    \"token_type\": {\"title\": \"Token Type\", \"type\": \"string\"},\n+                },\n+            },\n+            \"Body_login_for_access_token_token_post\": {\n+                \"title\": \"Body_login_for_access_token_token_post\",\n+                \"required\": [\"username\", \"password\"],\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"grant_type\": {\n+                        \"title\": \"Grant Type\",\n+                        \"pattern\": \"password\",\n+                        \"type\": \"string\",\n+                    },\n+                    \"username\": {\"title\": \"Username\", \"type\": \"string\"},\n+                    \"password\": {\"title\": \"Password\", \"type\": \"string\"},\n+                    \"scope\": {\"title\": \"Scope\", \"type\": \"string\", \"default\": \"\"},\n+                    \"client_id\": {\"title\": \"Client Id\", \"type\": \"string\"},\n+                    \"client_secret\": {\"title\": \"Client Secret\", \"type\": \"string\"},\n+                },\n+            },\n+            \"ValidationError\": {\n+                \"title\": \"ValidationError\",\n+                \"required\": [\"loc\", \"msg\", \"type\"],\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"loc\": {\n+                        \"title\": \"Location\",\n+                        \"type\": \"array\",\n+                        \"items\": {\"type\": \"string\"},\n+                    },\n+                    \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n+                    \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n+                },\n+            },\n+            \"HTTPValidationError\": {\n+                \"title\": \"HTTPValidationError\",\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"detail\": {\n+                        \"title\": \"Detail\",\n+                        \"type\": \"array\",\n+                        \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n+                    }\n+                },\n+            },\n+        },\n+        \"securitySchemes\": {\n+            \"OAuth2PasswordBearer\": {\n+                \"type\": \"oauth2\",\n+                \"flows\": {\n+                    \"password\": {\n+                        \"scopes\": {\n+                            \"me\": \"Read information about the current user.\",\n+                            \"items\": \"Read items.\",\n+                        },\n+                        \"tokenUrl\": \"token\",\n+                    }\n+                },\n+            }\n+        },\n+    },\n+}\n+\n+\n+@pytest.fixture(name=\"client\")\n+def get_client():\n+    from docs_src.security.tutorial005_py39 import app\n+\n+    client = TestClient(app)\n+    return client\n+\n+\n+@needs_py39\n+def test_openapi_schema(client: TestClient):\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == openapi_schema\n+\n+\n+def get_access_token(\n+    *, username=\"johndoe\", password=\"secret\", scope=None, client: TestClient\n+):\n+    data = {\"username\": username, \"password\": password}\n+    if scope:\n+        data[\"scope\"] = scope\n+    response = client.post(\"/token\", data=data)\n+    content = response.json()\n+    access_token = content.get(\"access_token\")\n+    return access_token\n+\n+\n+@needs_py39\n+def test_login(client: TestClient):\n+    response = client.post(\"/token\", data={\"username\": \"johndoe\", \"password\": \"secret\"})\n+    assert response.status_code == 200, response.text\n+    content = response.json()\n+    assert \"access_token\" in content\n+    assert content[\"token_type\"] == \"bearer\"\n+\n+\n+@needs_py39\n+def test_login_incorrect_password(client: TestClient):\n+    response = client.post(\n+        \"/token\", data={\"username\": \"johndoe\", \"password\": \"incorrect\"}\n+    )\n+    assert response.status_code == 400, response.text\n+    assert response.json() == {\"detail\": \"Incorrect username or password\"}\n+\n+\n+@needs_py39\n+def test_login_incorrect_username(client: TestClient):\n+    response = client.post(\"/token\", data={\"username\": \"foo\", \"password\": \"secret\"})\n+    assert response.status_code == 400, response.text\n+    assert response.json() == {\"detail\": \"Incorrect username or password\"}\n+\n+\n+@needs_py39\n+def test_no_token(client: TestClient):\n+    response = client.get(\"/users/me\")\n+    assert response.status_code == 401, response.text\n+    assert response.json() == {\"detail\": \"Not authenticated\"}\n+    assert response.headers[\"WWW-Authenticate\"] == \"Bearer\"\n+\n+\n+@needs_py39\n+def test_token(client: TestClient):\n+    access_token = get_access_token(scope=\"me\", client=client)\n+    response = client.get(\n+        \"/users/me\", headers={\"Authorization\": f\"Bearer {access_token}\"}\n+    )\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n+        \"username\": \"johndoe\",\n+        \"full_name\": \"John Doe\",\n+        \"email\": \"johndoe@example.com\",\n+        \"disabled\": False,\n+    }\n+\n+\n+@needs_py39\n+def test_incorrect_token(client: TestClient):\n+    response = client.get(\"/users/me\", headers={\"Authorization\": \"Bearer nonexistent\"})\n+    assert response.status_code == 401, response.text\n+    assert response.json() == {\"detail\": \"Could not validate credentials\"}\n+    assert response.headers[\"WWW-Authenticate\"] == 'Bearer scope=\"me\"'\n+\n+\n+@needs_py39\n+def test_incorrect_token_type(client: TestClient):\n+    response = client.get(\n+        \"/users/me\", headers={\"Authorization\": \"Notexistent testtoken\"}\n+    )\n+    assert response.status_code == 401, response.text\n+    assert response.json() == {\"detail\": \"Not authenticated\"}\n+    assert response.headers[\"WWW-Authenticate\"] == \"Bearer\"\n+\n+\n+@needs_py39\n+def test_verify_password():\n+    from docs_src.security.tutorial005_py39 import fake_users_db, verify_password\n+\n+    assert verify_password(\"secret\", fake_users_db[\"johndoe\"][\"hashed_password\"])\n+\n+\n+@needs_py39\n+def test_get_password_hash():\n+    from docs_src.security.tutorial005_py39 import get_password_hash\n+\n+    assert get_password_hash(\"secretalice\")\n+\n+\n+@needs_py39\n+def test_create_access_token():\n+    from docs_src.security.tutorial005_py39 import create_access_token\n+\n+    access_token = create_access_token(data={\"data\": \"foo\"})\n+    assert access_token\n+\n+\n+@needs_py39\n+def test_token_no_sub(client: TestClient):\n+    response = client.get(\n+        \"/users/me\",\n+        headers={\n+            \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJkYXRhIjoiZm9vIn0.9ynBhuYb4e6aW3oJr_K_TBgwcMTDpRToQIE25L57rOE\"\n+        },\n+    )\n+    assert response.status_code == 401, response.text\n+    assert response.json() == {\"detail\": \"Could not validate credentials\"}\n+    assert response.headers[\"WWW-Authenticate\"] == 'Bearer scope=\"me\"'\n+\n+\n+@needs_py39\n+def test_token_no_username(client: TestClient):\n+    response = client.get(\n+        \"/users/me\",\n+        headers={\n+            \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJmb28ifQ.NnExK_dlNAYyzACrXtXDrcWOgGY2JuPbI4eDaHdfK5Y\"\n+        },\n+    )\n+    assert response.status_code == 401, response.text\n+    assert response.json() == {\"detail\": \"Could not validate credentials\"}\n+    assert response.headers[\"WWW-Authenticate\"] == 'Bearer scope=\"me\"'\n+\n+\n+@needs_py39\n+def test_token_no_scope(client: TestClient):\n+    access_token = get_access_token(client=client)\n+    response = client.get(\n+        \"/users/me\", headers={\"Authorization\": f\"Bearer {access_token}\"}\n+    )\n+    assert response.status_code == 401, response.text\n+    assert response.json() == {\"detail\": \"Not enough permissions\"}\n+    assert response.headers[\"WWW-Authenticate\"] == 'Bearer scope=\"me\"'\n+\n+\n+@needs_py39\n+def test_token_inexistent_user(client: TestClient):\n+    response = client.get(\n+        \"/users/me\",\n+        headers={\n+            \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJ1c2VybmFtZTpib2IifQ.HcfCW67Uda-0gz54ZWTqmtgJnZeNem0Q757eTa9EZuw\"\n+        },\n+    )\n+    assert response.status_code == 401, response.text\n+    assert response.json() == {\"detail\": \"Could not validate credentials\"}\n+    assert response.headers[\"WWW-Authenticate\"] == 'Bearer scope=\"me\"'\n+\n+\n+@needs_py39\n+def test_token_inactive_user(client: TestClient):\n+    access_token = get_access_token(\n+        username=\"alice\", password=\"secretalice\", scope=\"me\", client=client\n+    )\n+    response = client.get(\n+        \"/users/me\", headers={\"Authorization\": f\"Bearer {access_token}\"}\n+    )\n+    assert response.status_code == 400, response.text\n+    assert response.json() == {\"detail\": \"Inactive user\"}\n+\n+\n+@needs_py39\n+def test_read_items(client: TestClient):\n+    access_token = get_access_token(scope=\"me items\", client=client)\n+    response = client.get(\n+        \"/users/me/items/\", headers={\"Authorization\": f\"Bearer {access_token}\"}\n+    )\n+    assert response.status_code == 200, response.text\n+    assert response.json() == [{\"item_id\": \"Foo\", \"owner\": \"johndoe\"}]\n+\n+\n+@needs_py39\n+def test_read_system_status(client: TestClient):\n+    access_token = get_access_token(client=client)\n+    response = client.get(\n+        \"/status/\", headers={\"Authorization\": f\"Bearer {access_token}\"}\n+    )\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\"status\": \"ok\"}\n+\n+\n+@needs_py39\n+def test_read_system_status_no_token(client: TestClient):\n+    response = client.get(\"/status/\")\n+    assert response.status_code == 401, response.text\n+    assert response.json() == {\"detail\": \"Not authenticated\"}\n+    assert response.headers[\"WWW-Authenticate\"] == \"Bearer\"\n\n@@ -1,4 +1,5 @@\n import importlib\n+import os\n from pathlib import Path\n \n import pytest\n@@ -283,7 +284,10 @@ openapi_schema = {\n \n \n @pytest.fixture(scope=\"module\")\n-def client():\n+def client(tmp_path_factory: pytest.TempPathFactory):\n+    tmp_path = tmp_path_factory.mktemp(\"data\")\n+    cwd = os.getcwd()\n+    os.chdir(tmp_path)\n     test_db = Path(\"./sql_app.db\")\n     if test_db.is_file():  # pragma: nocover\n         test_db.unlink()\n@@ -296,6 +300,7 @@ def client():\n         yield c\n     if test_db.is_file():  # pragma: nocover\n         test_db.unlink()\n+    os.chdir(cwd)\n \n \n def test_openapi_schema(client):\n\n@@ -0,0 +1,384 @@\n+import importlib\n+import os\n+from pathlib import Path\n+\n+import pytest\n+from fastapi.testclient import TestClient\n+\n+from ...utils import needs_py310\n+\n+openapi_schema = {\n+    \"openapi\": \"3.0.2\",\n+    \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n+    \"paths\": {\n+        \"/users/\": {\n+            \"get\": {\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\n+                                    \"title\": \"Response Read Users Users  Get\",\n+                                    \"type\": \"array\",\n+                                    \"items\": {\"$ref\": \"#/components/schemas/User\"},\n+                                }\n+                            }\n+                        },\n+                    },\n+                    \"422\": {\n+                        \"description\": \"Validation Error\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\n+                                    \"$ref\": \"#/components/schemas/HTTPValidationError\"\n+                                }\n+                            }\n+                        },\n+                    },\n+                },\n+                \"summary\": \"Read Users\",\n+                \"operationId\": \"read_users_users__get\",\n+                \"parameters\": [\n+                    {\n+                        \"required\": False,\n+                        \"schema\": {\"title\": \"Skip\", \"type\": \"integer\", \"default\": 0},\n+                        \"name\": \"skip\",\n+                        \"in\": \"query\",\n+                    },\n+                    {\n+                        \"required\": False,\n+                        \"schema\": {\"title\": \"Limit\", \"type\": \"integer\", \"default\": 100},\n+                        \"name\": \"limit\",\n+                        \"in\": \"query\",\n+                    },\n+                ],\n+            },\n+            \"post\": {\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\"$ref\": \"#/components/schemas/User\"}\n+                            }\n+                        },\n+                    },\n+                    \"422\": {\n+                        \"description\": \"Validation Error\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\n+                                    \"$ref\": \"#/components/schemas/HTTPValidationError\"\n+                                }\n+                            }\n+                        },\n+                    },\n+                },\n+                \"summary\": \"Create User\",\n+                \"operationId\": \"create_user_users__post\",\n+                \"requestBody\": {\n+                    \"content\": {\n+                        \"application/json\": {\n+                            \"schema\": {\"$ref\": \"#/components/schemas/UserCreate\"}\n+                        }\n+                    },\n+                    \"required\": True,\n+                },\n+            },\n+        },\n+        \"/users/{user_id}\": {\n+            \"get\": {\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\"$ref\": \"#/components/schemas/User\"}\n+                            }\n+                        },\n+                    },\n+                    \"422\": {\n+                        \"description\": \"Validation Error\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\n+                                    \"$ref\": \"#/components/schemas/HTTPValidationError\"\n+                                }\n+                            }\n+                        },\n+                    },\n+                },\n+                \"summary\": \"Read User\",\n+                \"operationId\": \"read_user_users__user_id__get\",\n+                \"parameters\": [\n+                    {\n+                        \"required\": True,\n+                        \"schema\": {\"title\": \"User Id\", \"type\": \"integer\"},\n+                        \"name\": \"user_id\",\n+                        \"in\": \"path\",\n+                    }\n+                ],\n+            }\n+        },\n+        \"/users/{user_id}/items/\": {\n+            \"post\": {\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\"$ref\": \"#/components/schemas/Item\"}\n+                            }\n+                        },\n+                    },\n+                    \"422\": {\n+                        \"description\": \"Validation Error\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\n+                                    \"$ref\": \"#/components/schemas/HTTPValidationError\"\n+                                }\n+                            }\n+                        },\n+                    },\n+                },\n+                \"summary\": \"Create Item For User\",\n+                \"operationId\": \"create_item_for_user_users__user_id__items__post\",\n+                \"parameters\": [\n+                    {\n+                        \"required\": True,\n+                        \"schema\": {\"title\": \"User Id\", \"type\": \"integer\"},\n+                        \"name\": \"user_id\",\n+                        \"in\": \"path\",\n+                    }\n+                ],\n+                \"requestBody\": {\n+                    \"content\": {\n+                        \"application/json\": {\n+                            \"schema\": {\"$ref\": \"#/components/schemas/ItemCreate\"}\n+                        }\n+                    },\n+                    \"required\": True,\n+                },\n+            }\n+        },\n+        \"/items/\": {\n+            \"get\": {\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\n+                                    \"title\": \"Response Read Items Items  Get\",\n+                                    \"type\": \"array\",\n+                                    \"items\": {\"$ref\": \"#/components/schemas/Item\"},\n+                                }\n+                            }\n+                        },\n+                    },\n+                    \"422\": {\n+                        \"description\": \"Validation Error\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\n+                                    \"$ref\": \"#/components/schemas/HTTPValidationError\"\n+                                }\n+                            }\n+                        },\n+                    },\n+                },\n+                \"summary\": \"Read Items\",\n+                \"operationId\": \"read_items_items__get\",\n+                \"parameters\": [\n+                    {\n+                        \"required\": False,\n+                        \"schema\": {\"title\": \"Skip\", \"type\": \"integer\", \"default\": 0},\n+                        \"name\": \"skip\",\n+                        \"in\": \"query\",\n+                    },\n+                    {\n+                        \"required\": False,\n+                        \"schema\": {\"title\": \"Limit\", \"type\": \"integer\", \"default\": 100},\n+                        \"name\": \"limit\",\n+                        \"in\": \"query\",\n+                    },\n+                ],\n+            }\n+        },\n+    },\n+    \"components\": {\n+        \"schemas\": {\n+            \"ItemCreate\": {\n+                \"title\": \"ItemCreate\",\n+                \"required\": [\"title\"],\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"title\": {\"title\": \"Title\", \"type\": \"string\"},\n+                    \"description\": {\"title\": \"Description\", \"type\": \"string\"},\n+                },\n+            },\n+            \"Item\": {\n+                \"title\": \"Item\",\n+                \"required\": [\"title\", \"id\", \"owner_id\"],\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"title\": {\"title\": \"Title\", \"type\": \"string\"},\n+                    \"description\": {\"title\": \"Description\", \"type\": \"string\"},\n+                    \"id\": {\"title\": \"Id\", \"type\": \"integer\"},\n+                    \"owner_id\": {\"title\": \"Owner Id\", \"type\": \"integer\"},\n+                },\n+            },\n+            \"User\": {\n+                \"title\": \"User\",\n+                \"required\": [\"email\", \"id\", \"is_active\"],\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"email\": {\"title\": \"Email\", \"type\": \"string\"},\n+                    \"id\": {\"title\": \"Id\", \"type\": \"integer\"},\n+                    \"is_active\": {\"title\": \"Is Active\", \"type\": \"boolean\"},\n+                    \"items\": {\n+                        \"title\": \"Items\",\n+                        \"type\": \"array\",\n+                        \"items\": {\"$ref\": \"#/components/schemas/Item\"},\n+                        \"default\": [],\n+                    },\n+                },\n+            },\n+            \"UserCreate\": {\n+                \"title\": \"UserCreate\",\n+                \"required\": [\"email\", \"password\"],\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"email\": {\"title\": \"Email\", \"type\": \"string\"},\n+                    \"password\": {\"title\": \"Password\", \"type\": \"string\"},\n+                },\n+            },\n+            \"ValidationError\": {\n+                \"title\": \"ValidationError\",\n+                \"required\": [\"loc\", \"msg\", \"type\"],\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"loc\": {\n+                        \"title\": \"Location\",\n+                        \"type\": \"array\",\n+                        \"items\": {\"type\": \"string\"},\n+                    },\n+                    \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n+                    \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n+                },\n+            },\n+            \"HTTPValidationError\": {\n+                \"title\": \"HTTPValidationError\",\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"detail\": {\n+                        \"title\": \"Detail\",\n+                        \"type\": \"array\",\n+                        \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n+                    }\n+                },\n+            },\n+        }\n+    },\n+}\n+\n+\n+@pytest.fixture(scope=\"module\")\n+def client(tmp_path_factory: pytest.TempPathFactory):\n+    tmp_path = tmp_path_factory.mktemp(\"data\")\n+    cwd = os.getcwd()\n+    os.chdir(tmp_path)\n+    test_db = Path(\"./sql_app.db\")\n+    if test_db.is_file():  # pragma: nocover\n+        test_db.unlink()\n+    # Import while creating the client to create the DB after starting the test session\n+    from docs_src.sql_databases.sql_app_py310 import alt_main\n+\n+    # Ensure import side effects are re-executed\n+    importlib.reload(alt_main)\n+\n+    with TestClient(alt_main.app) as c:\n+        yield c\n+    if test_db.is_file():  # pragma: nocover\n+        test_db.unlink()\n+    os.chdir(cwd)\n+\n+\n+@needs_py310\n+def test_openapi_schema(client):\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == openapi_schema\n+\n+\n+@needs_py310\n+def test_create_user(client):\n+    test_user = {\"email\": \"johndoe@example.com\", \"password\": \"secret\"}\n+    response = client.post(\"/users/\", json=test_user)\n+    assert response.status_code == 200, response.text\n+    data = response.json()\n+    assert test_user[\"email\"] == data[\"email\"]\n+    assert \"id\" in data\n+    response = client.post(\"/users/\", json=test_user)\n+    assert response.status_code == 400, response.text\n+\n+\n+@needs_py310\n+def test_get_user(client):\n+    response = client.get(\"/users/1\")\n+    assert response.status_code == 200, response.text\n+    data = response.json()\n+    assert \"email\" in data\n+    assert \"id\" in data\n+\n+\n+@needs_py310\n+def test_inexistent_user(client):\n+    response = client.get(\"/users/999\")\n+    assert response.status_code == 404, response.text\n+\n+\n+@needs_py310\n+def test_get_users(client):\n+    response = client.get(\"/users/\")\n+    assert response.status_code == 200, response.text\n+    data = response.json()\n+    assert \"email\" in data[0]\n+    assert \"id\" in data[0]\n+\n+\n+@needs_py310\n+def test_create_item(client):\n+    item = {\"title\": \"Foo\", \"description\": \"Something that fights\"}\n+    response = client.post(\"/users/1/items/\", json=item)\n+    assert response.status_code == 200, response.text\n+    item_data = response.json()\n+    assert item[\"title\"] == item_data[\"title\"]\n+    assert item[\"description\"] == item_data[\"description\"]\n+    assert \"id\" in item_data\n+    assert \"owner_id\" in item_data\n+    response = client.get(\"/users/1\")\n+    assert response.status_code == 200, response.text\n+    user_data = response.json()\n+    item_to_check = [it for it in user_data[\"items\"] if it[\"id\"] == item_data[\"id\"]][0]\n+    assert item_to_check[\"title\"] == item[\"title\"]\n+    assert item_to_check[\"description\"] == item[\"description\"]\n+    response = client.get(\"/users/1\")\n+    assert response.status_code == 200, response.text\n+    user_data = response.json()\n+    item_to_check = [it for it in user_data[\"items\"] if it[\"id\"] == item_data[\"id\"]][0]\n+    assert item_to_check[\"title\"] == item[\"title\"]\n+    assert item_to_check[\"description\"] == item[\"description\"]\n+\n+\n+@needs_py310\n+def test_read_items(client):\n+    response = client.get(\"/items/\")\n+    assert response.status_code == 200, response.text\n+    data = response.json()\n+    assert data\n+    first_item = data[0]\n+    assert \"title\" in first_item\n+    assert \"description\" in first_item\n\n@@ -0,0 +1,384 @@\n+import importlib\n+import os\n+from pathlib import Path\n+\n+import pytest\n+from fastapi.testclient import TestClient\n+\n+from ...utils import needs_py39\n+\n+openapi_schema = {\n+    \"openapi\": \"3.0.2\",\n+    \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n+    \"paths\": {\n+        \"/users/\": {\n+            \"get\": {\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\n+                                    \"title\": \"Response Read Users Users  Get\",\n+                                    \"type\": \"array\",\n+                                    \"items\": {\"$ref\": \"#/components/schemas/User\"},\n+                                }\n+                            }\n+                        },\n+                    },\n+                    \"422\": {\n+                        \"description\": \"Validation Error\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\n+                                    \"$ref\": \"#/components/schemas/HTTPValidationError\"\n+                                }\n+                            }\n+                        },\n+                    },\n+                },\n+                \"summary\": \"Read Users\",\n+                \"operationId\": \"read_users_users__get\",\n+                \"parameters\": [\n+                    {\n+                        \"required\": False,\n+                        \"schema\": {\"title\": \"Skip\", \"type\": \"integer\", \"default\": 0},\n+                        \"name\": \"skip\",\n+                        \"in\": \"query\",\n+                    },\n+                    {\n+                        \"required\": False,\n+                        \"schema\": {\"title\": \"Limit\", \"type\": \"integer\", \"default\": 100},\n+                        \"name\": \"limit\",\n+                        \"in\": \"query\",\n+                    },\n+                ],\n+            },\n+            \"post\": {\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\"$ref\": \"#/components/schemas/User\"}\n+                            }\n+                        },\n+                    },\n+                    \"422\": {\n+                        \"description\": \"Validation Error\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\n+                                    \"$ref\": \"#/components/schemas/HTTPValidationError\"\n+                                }\n+                            }\n+                        },\n+                    },\n+                },\n+                \"summary\": \"Create User\",\n+                \"operationId\": \"create_user_users__post\",\n+                \"requestBody\": {\n+                    \"content\": {\n+                        \"application/json\": {\n+                            \"schema\": {\"$ref\": \"#/components/schemas/UserCreate\"}\n+                        }\n+                    },\n+                    \"required\": True,\n+                },\n+            },\n+        },\n+        \"/users/{user_id}\": {\n+            \"get\": {\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\"$ref\": \"#/components/schemas/User\"}\n+                            }\n+                        },\n+                    },\n+                    \"422\": {\n+                        \"description\": \"Validation Error\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\n+                                    \"$ref\": \"#/components/schemas/HTTPValidationError\"\n+                                }\n+                            }\n+                        },\n+                    },\n+                },\n+                \"summary\": \"Read User\",\n+                \"operationId\": \"read_user_users__user_id__get\",\n+                \"parameters\": [\n+                    {\n+                        \"required\": True,\n+                        \"schema\": {\"title\": \"User Id\", \"type\": \"integer\"},\n+                        \"name\": \"user_id\",\n+                        \"in\": \"path\",\n+                    }\n+                ],\n+            }\n+        },\n+        \"/users/{user_id}/items/\": {\n+            \"post\": {\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\"$ref\": \"#/components/schemas/Item\"}\n+                            }\n+                        },\n+                    },\n+                    \"422\": {\n+                        \"description\": \"Validation Error\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\n+                                    \"$ref\": \"#/components/schemas/HTTPValidationError\"\n+                                }\n+                            }\n+                        },\n+                    },\n+                },\n+                \"summary\": \"Create Item For User\",\n+                \"operationId\": \"create_item_for_user_users__user_id__items__post\",\n+                \"parameters\": [\n+                    {\n+                        \"required\": True,\n+                        \"schema\": {\"title\": \"User Id\", \"type\": \"integer\"},\n+                        \"name\": \"user_id\",\n+                        \"in\": \"path\",\n+                    }\n+                ],\n+                \"requestBody\": {\n+                    \"content\": {\n+                        \"application/json\": {\n+                            \"schema\": {\"$ref\": \"#/components/schemas/ItemCreate\"}\n+                        }\n+                    },\n+                    \"required\": True,\n+                },\n+            }\n+        },\n+        \"/items/\": {\n+            \"get\": {\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\n+                                    \"title\": \"Response Read Items Items  Get\",\n+                                    \"type\": \"array\",\n+                                    \"items\": {\"$ref\": \"#/components/schemas/Item\"},\n+                                }\n+                            }\n+                        },\n+                    },\n+                    \"422\": {\n+                        \"description\": \"Validation Error\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\n+                                    \"$ref\": \"#/components/schemas/HTTPValidationError\"\n+                                }\n+                            }\n+                        },\n+                    },\n+                },\n+                \"summary\": \"Read Items\",\n+                \"operationId\": \"read_items_items__get\",\n+                \"parameters\": [\n+                    {\n+                        \"required\": False,\n+                        \"schema\": {\"title\": \"Skip\", \"type\": \"integer\", \"default\": 0},\n+                        \"name\": \"skip\",\n+                        \"in\": \"query\",\n+                    },\n+                    {\n+                        \"required\": False,\n+                        \"schema\": {\"title\": \"Limit\", \"type\": \"integer\", \"default\": 100},\n+                        \"name\": \"limit\",\n+                        \"in\": \"query\",\n+                    },\n+                ],\n+            }\n+        },\n+    },\n+    \"components\": {\n+        \"schemas\": {\n+            \"ItemCreate\": {\n+                \"title\": \"ItemCreate\",\n+                \"required\": [\"title\"],\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"title\": {\"title\": \"Title\", \"type\": \"string\"},\n+                    \"description\": {\"title\": \"Description\", \"type\": \"string\"},\n+                },\n+            },\n+            \"Item\": {\n+                \"title\": \"Item\",\n+                \"required\": [\"title\", \"id\", \"owner_id\"],\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"title\": {\"title\": \"Title\", \"type\": \"string\"},\n+                    \"description\": {\"title\": \"Description\", \"type\": \"string\"},\n+                    \"id\": {\"title\": \"Id\", \"type\": \"integer\"},\n+                    \"owner_id\": {\"title\": \"Owner Id\", \"type\": \"integer\"},\n+                },\n+            },\n+            \"User\": {\n+                \"title\": \"User\",\n+                \"required\": [\"email\", \"id\", \"is_active\"],\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"email\": {\"title\": \"Email\", \"type\": \"string\"},\n+                    \"id\": {\"title\": \"Id\", \"type\": \"integer\"},\n+                    \"is_active\": {\"title\": \"Is Active\", \"type\": \"boolean\"},\n+                    \"items\": {\n+                        \"title\": \"Items\",\n+                        \"type\": \"array\",\n+                        \"items\": {\"$ref\": \"#/components/schemas/Item\"},\n+                        \"default\": [],\n+                    },\n+                },\n+            },\n+            \"UserCreate\": {\n+                \"title\": \"UserCreate\",\n+                \"required\": [\"email\", \"password\"],\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"email\": {\"title\": \"Email\", \"type\": \"string\"},\n+                    \"password\": {\"title\": \"Password\", \"type\": \"string\"},\n+                },\n+            },\n+            \"ValidationError\": {\n+                \"title\": \"ValidationError\",\n+                \"required\": [\"loc\", \"msg\", \"type\"],\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"loc\": {\n+                        \"title\": \"Location\",\n+                        \"type\": \"array\",\n+                        \"items\": {\"type\": \"string\"},\n+                    },\n+                    \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n+                    \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n+                },\n+            },\n+            \"HTTPValidationError\": {\n+                \"title\": \"HTTPValidationError\",\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"detail\": {\n+                        \"title\": \"Detail\",\n+                        \"type\": \"array\",\n+                        \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n+                    }\n+                },\n+            },\n+        }\n+    },\n+}\n+\n+\n+@pytest.fixture(scope=\"module\")\n+def client(tmp_path_factory: pytest.TempPathFactory):\n+    tmp_path = tmp_path_factory.mktemp(\"data\")\n+    cwd = os.getcwd()\n+    os.chdir(tmp_path)\n+    test_db = Path(\"./sql_app.db\")\n+    if test_db.is_file():  # pragma: nocover\n+        test_db.unlink()\n+    # Import while creating the client to create the DB after starting the test session\n+    from docs_src.sql_databases.sql_app_py39 import alt_main\n+\n+    # Ensure import side effects are re-executed\n+    importlib.reload(alt_main)\n+\n+    with TestClient(alt_main.app) as c:\n+        yield c\n+    if test_db.is_file():  # pragma: nocover\n+        test_db.unlink()\n+    os.chdir(cwd)\n+\n+\n+@needs_py39\n+def test_openapi_schema(client):\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == openapi_schema\n+\n+\n+@needs_py39\n+def test_create_user(client):\n+    test_user = {\"email\": \"johndoe@example.com\", \"password\": \"secret\"}\n+    response = client.post(\"/users/\", json=test_user)\n+    assert response.status_code == 200, response.text\n+    data = response.json()\n+    assert test_user[\"email\"] == data[\"email\"]\n+    assert \"id\" in data\n+    response = client.post(\"/users/\", json=test_user)\n+    assert response.status_code == 400, response.text\n+\n+\n+@needs_py39\n+def test_get_user(client):\n+    response = client.get(\"/users/1\")\n+    assert response.status_code == 200, response.text\n+    data = response.json()\n+    assert \"email\" in data\n+    assert \"id\" in data\n+\n+\n+@needs_py39\n+def test_inexistent_user(client):\n+    response = client.get(\"/users/999\")\n+    assert response.status_code == 404, response.text\n+\n+\n+@needs_py39\n+def test_get_users(client):\n+    response = client.get(\"/users/\")\n+    assert response.status_code == 200, response.text\n+    data = response.json()\n+    assert \"email\" in data[0]\n+    assert \"id\" in data[0]\n+\n+\n+@needs_py39\n+def test_create_item(client):\n+    item = {\"title\": \"Foo\", \"description\": \"Something that fights\"}\n+    response = client.post(\"/users/1/items/\", json=item)\n+    assert response.status_code == 200, response.text\n+    item_data = response.json()\n+    assert item[\"title\"] == item_data[\"title\"]\n+    assert item[\"description\"] == item_data[\"description\"]\n+    assert \"id\" in item_data\n+    assert \"owner_id\" in item_data\n+    response = client.get(\"/users/1\")\n+    assert response.status_code == 200, response.text\n+    user_data = response.json()\n+    item_to_check = [it for it in user_data[\"items\"] if it[\"id\"] == item_data[\"id\"]][0]\n+    assert item_to_check[\"title\"] == item[\"title\"]\n+    assert item_to_check[\"description\"] == item[\"description\"]\n+    response = client.get(\"/users/1\")\n+    assert response.status_code == 200, response.text\n+    user_data = response.json()\n+    item_to_check = [it for it in user_data[\"items\"] if it[\"id\"] == item_data[\"id\"]][0]\n+    assert item_to_check[\"title\"] == item[\"title\"]\n+    assert item_to_check[\"description\"] == item[\"description\"]\n+\n+\n+@needs_py39\n+def test_read_items(client):\n+    response = client.get(\"/items/\")\n+    assert response.status_code == 200, response.text\n+    data = response.json()\n+    assert data\n+    first_item = data[0]\n+    assert \"title\" in first_item\n+    assert \"description\" in first_item\n\n@@ -0,0 +1,383 @@\n+import importlib\n+import os\n+from pathlib import Path\n+\n+import pytest\n+from fastapi.testclient import TestClient\n+\n+from ...utils import needs_py310\n+\n+openapi_schema = {\n+    \"openapi\": \"3.0.2\",\n+    \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n+    \"paths\": {\n+        \"/users/\": {\n+            \"get\": {\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\n+                                    \"title\": \"Response Read Users Users  Get\",\n+                                    \"type\": \"array\",\n+                                    \"items\": {\"$ref\": \"#/components/schemas/User\"},\n+                                }\n+                            }\n+                        },\n+                    },\n+                    \"422\": {\n+                        \"description\": \"Validation Error\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\n+                                    \"$ref\": \"#/components/schemas/HTTPValidationError\"\n+                                }\n+                            }\n+                        },\n+                    },\n+                },\n+                \"summary\": \"Read Users\",\n+                \"operationId\": \"read_users_users__get\",\n+                \"parameters\": [\n+                    {\n+                        \"required\": False,\n+                        \"schema\": {\"title\": \"Skip\", \"type\": \"integer\", \"default\": 0},\n+                        \"name\": \"skip\",\n+                        \"in\": \"query\",\n+                    },\n+                    {\n+                        \"required\": False,\n+                        \"schema\": {\"title\": \"Limit\", \"type\": \"integer\", \"default\": 100},\n+                        \"name\": \"limit\",\n+                        \"in\": \"query\",\n+                    },\n+                ],\n+            },\n+            \"post\": {\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\"$ref\": \"#/components/schemas/User\"}\n+                            }\n+                        },\n+                    },\n+                    \"422\": {\n+                        \"description\": \"Validation Error\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\n+                                    \"$ref\": \"#/components/schemas/HTTPValidationError\"\n+                                }\n+                            }\n+                        },\n+                    },\n+                },\n+                \"summary\": \"Create User\",\n+                \"operationId\": \"create_user_users__post\",\n+                \"requestBody\": {\n+                    \"content\": {\n+                        \"application/json\": {\n+                            \"schema\": {\"$ref\": \"#/components/schemas/UserCreate\"}\n+                        }\n+                    },\n+                    \"required\": True,\n+                },\n+            },\n+        },\n+        \"/users/{user_id}\": {\n+            \"get\": {\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\"$ref\": \"#/components/schemas/User\"}\n+                            }\n+                        },\n+                    },\n+                    \"422\": {\n+                        \"description\": \"Validation Error\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\n+                                    \"$ref\": \"#/components/schemas/HTTPValidationError\"\n+                                }\n+                            }\n+                        },\n+                    },\n+                },\n+                \"summary\": \"Read User\",\n+                \"operationId\": \"read_user_users__user_id__get\",\n+                \"parameters\": [\n+                    {\n+                        \"required\": True,\n+                        \"schema\": {\"title\": \"User Id\", \"type\": \"integer\"},\n+                        \"name\": \"user_id\",\n+                        \"in\": \"path\",\n+                    }\n+                ],\n+            }\n+        },\n+        \"/users/{user_id}/items/\": {\n+            \"post\": {\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\"$ref\": \"#/components/schemas/Item\"}\n+                            }\n+                        },\n+                    },\n+                    \"422\": {\n+                        \"description\": \"Validation Error\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\n+                                    \"$ref\": \"#/components/schemas/HTTPValidationError\"\n+                                }\n+                            }\n+                        },\n+                    },\n+                },\n+                \"summary\": \"Create Item For User\",\n+                \"operationId\": \"create_item_for_user_users__user_id__items__post\",\n+                \"parameters\": [\n+                    {\n+                        \"required\": True,\n+                        \"schema\": {\"title\": \"User Id\", \"type\": \"integer\"},\n+                        \"name\": \"user_id\",\n+                        \"in\": \"path\",\n+                    }\n+                ],\n+                \"requestBody\": {\n+                    \"content\": {\n+                        \"application/json\": {\n+                            \"schema\": {\"$ref\": \"#/components/schemas/ItemCreate\"}\n+                        }\n+                    },\n+                    \"required\": True,\n+                },\n+            }\n+        },\n+        \"/items/\": {\n+            \"get\": {\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\n+                                    \"title\": \"Response Read Items Items  Get\",\n+                                    \"type\": \"array\",\n+                                    \"items\": {\"$ref\": \"#/components/schemas/Item\"},\n+                                }\n+                            }\n+                        },\n+                    },\n+                    \"422\": {\n+                        \"description\": \"Validation Error\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\n+                                    \"$ref\": \"#/components/schemas/HTTPValidationError\"\n+                                }\n+                            }\n+                        },\n+                    },\n+                },\n+                \"summary\": \"Read Items\",\n+                \"operationId\": \"read_items_items__get\",\n+                \"parameters\": [\n+                    {\n+                        \"required\": False,\n+                        \"schema\": {\"title\": \"Skip\", \"type\": \"integer\", \"default\": 0},\n+                        \"name\": \"skip\",\n+                        \"in\": \"query\",\n+                    },\n+                    {\n+                        \"required\": False,\n+                        \"schema\": {\"title\": \"Limit\", \"type\": \"integer\", \"default\": 100},\n+                        \"name\": \"limit\",\n+                        \"in\": \"query\",\n+                    },\n+                ],\n+            }\n+        },\n+    },\n+    \"components\": {\n+        \"schemas\": {\n+            \"ItemCreate\": {\n+                \"title\": \"ItemCreate\",\n+                \"required\": [\"title\"],\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"title\": {\"title\": \"Title\", \"type\": \"string\"},\n+                    \"description\": {\"title\": \"Description\", \"type\": \"string\"},\n+                },\n+            },\n+            \"Item\": {\n+                \"title\": \"Item\",\n+                \"required\": [\"title\", \"id\", \"owner_id\"],\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"title\": {\"title\": \"Title\", \"type\": \"string\"},\n+                    \"description\": {\"title\": \"Description\", \"type\": \"string\"},\n+                    \"id\": {\"title\": \"Id\", \"type\": \"integer\"},\n+                    \"owner_id\": {\"title\": \"Owner Id\", \"type\": \"integer\"},\n+                },\n+            },\n+            \"User\": {\n+                \"title\": \"User\",\n+                \"required\": [\"email\", \"id\", \"is_active\"],\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"email\": {\"title\": \"Email\", \"type\": \"string\"},\n+                    \"id\": {\"title\": \"Id\", \"type\": \"integer\"},\n+                    \"is_active\": {\"title\": \"Is Active\", \"type\": \"boolean\"},\n+                    \"items\": {\n+                        \"title\": \"Items\",\n+                        \"type\": \"array\",\n+                        \"items\": {\"$ref\": \"#/components/schemas/Item\"},\n+                        \"default\": [],\n+                    },\n+                },\n+            },\n+            \"UserCreate\": {\n+                \"title\": \"UserCreate\",\n+                \"required\": [\"email\", \"password\"],\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"email\": {\"title\": \"Email\", \"type\": \"string\"},\n+                    \"password\": {\"title\": \"Password\", \"type\": \"string\"},\n+                },\n+            },\n+            \"ValidationError\": {\n+                \"title\": \"ValidationError\",\n+                \"required\": [\"loc\", \"msg\", \"type\"],\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"loc\": {\n+                        \"title\": \"Location\",\n+                        \"type\": \"array\",\n+                        \"items\": {\"type\": \"string\"},\n+                    },\n+                    \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n+                    \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n+                },\n+            },\n+            \"HTTPValidationError\": {\n+                \"title\": \"HTTPValidationError\",\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"detail\": {\n+                        \"title\": \"Detail\",\n+                        \"type\": \"array\",\n+                        \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n+                    }\n+                },\n+            },\n+        }\n+    },\n+}\n+\n+\n+@pytest.fixture(scope=\"module\", name=\"client\")\n+def get_client(tmp_path_factory: pytest.TempPathFactory):\n+    tmp_path = tmp_path_factory.mktemp(\"data\")\n+    cwd = os.getcwd()\n+    os.chdir(tmp_path)\n+    test_db = Path(\"./sql_app.db\")\n+    if test_db.is_file():  # pragma: nocover\n+        test_db.unlink()\n+    # Import while creating the client to create the DB after starting the test session\n+    from docs_src.sql_databases.sql_app_py310 import main\n+\n+    # Ensure import side effects are re-executed\n+    importlib.reload(main)\n+    with TestClient(main.app) as c:\n+        yield c\n+    if test_db.is_file():  # pragma: nocover\n+        test_db.unlink()\n+    os.chdir(cwd)\n+\n+\n+@needs_py310\n+def test_openapi_schema(client):\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == openapi_schema\n+\n+\n+@needs_py310\n+def test_create_user(client):\n+    test_user = {\"email\": \"johndoe@example.com\", \"password\": \"secret\"}\n+    response = client.post(\"/users/\", json=test_user)\n+    assert response.status_code == 200, response.text\n+    data = response.json()\n+    assert test_user[\"email\"] == data[\"email\"]\n+    assert \"id\" in data\n+    response = client.post(\"/users/\", json=test_user)\n+    assert response.status_code == 400, response.text\n+\n+\n+@needs_py310\n+def test_get_user(client):\n+    response = client.get(\"/users/1\")\n+    assert response.status_code == 200, response.text\n+    data = response.json()\n+    assert \"email\" in data\n+    assert \"id\" in data\n+\n+\n+@needs_py310\n+def test_inexistent_user(client):\n+    response = client.get(\"/users/999\")\n+    assert response.status_code == 404, response.text\n+\n+\n+@needs_py310\n+def test_get_users(client):\n+    response = client.get(\"/users/\")\n+    assert response.status_code == 200, response.text\n+    data = response.json()\n+    assert \"email\" in data[0]\n+    assert \"id\" in data[0]\n+\n+\n+@needs_py310\n+def test_create_item(client):\n+    item = {\"title\": \"Foo\", \"description\": \"Something that fights\"}\n+    response = client.post(\"/users/1/items/\", json=item)\n+    assert response.status_code == 200, response.text\n+    item_data = response.json()\n+    assert item[\"title\"] == item_data[\"title\"]\n+    assert item[\"description\"] == item_data[\"description\"]\n+    assert \"id\" in item_data\n+    assert \"owner_id\" in item_data\n+    response = client.get(\"/users/1\")\n+    assert response.status_code == 200, response.text\n+    user_data = response.json()\n+    item_to_check = [it for it in user_data[\"items\"] if it[\"id\"] == item_data[\"id\"]][0]\n+    assert item_to_check[\"title\"] == item[\"title\"]\n+    assert item_to_check[\"description\"] == item[\"description\"]\n+    response = client.get(\"/users/1\")\n+    assert response.status_code == 200, response.text\n+    user_data = response.json()\n+    item_to_check = [it for it in user_data[\"items\"] if it[\"id\"] == item_data[\"id\"]][0]\n+    assert item_to_check[\"title\"] == item[\"title\"]\n+    assert item_to_check[\"description\"] == item[\"description\"]\n+\n+\n+@needs_py310\n+def test_read_items(client):\n+    response = client.get(\"/items/\")\n+    assert response.status_code == 200, response.text\n+    data = response.json()\n+    assert data\n+    first_item = data[0]\n+    assert \"title\" in first_item\n+    assert \"description\" in first_item\n\n@@ -0,0 +1,383 @@\n+import importlib\n+import os\n+from pathlib import Path\n+\n+import pytest\n+from fastapi.testclient import TestClient\n+\n+from ...utils import needs_py39\n+\n+openapi_schema = {\n+    \"openapi\": \"3.0.2\",\n+    \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n+    \"paths\": {\n+        \"/users/\": {\n+            \"get\": {\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\n+                                    \"title\": \"Response Read Users Users  Get\",\n+                                    \"type\": \"array\",\n+                                    \"items\": {\"$ref\": \"#/components/schemas/User\"},\n+                                }\n+                            }\n+                        },\n+                    },\n+                    \"422\": {\n+                        \"description\": \"Validation Error\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\n+                                    \"$ref\": \"#/components/schemas/HTTPValidationError\"\n+                                }\n+                            }\n+                        },\n+                    },\n+                },\n+                \"summary\": \"Read Users\",\n+                \"operationId\": \"read_users_users__get\",\n+                \"parameters\": [\n+                    {\n+                        \"required\": False,\n+                        \"schema\": {\"title\": \"Skip\", \"type\": \"integer\", \"default\": 0},\n+                        \"name\": \"skip\",\n+                        \"in\": \"query\",\n+                    },\n+                    {\n+                        \"required\": False,\n+                        \"schema\": {\"title\": \"Limit\", \"type\": \"integer\", \"default\": 100},\n+                        \"name\": \"limit\",\n+                        \"in\": \"query\",\n+                    },\n+                ],\n+            },\n+            \"post\": {\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\"$ref\": \"#/components/schemas/User\"}\n+                            }\n+                        },\n+                    },\n+                    \"422\": {\n+                        \"description\": \"Validation Error\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\n+                                    \"$ref\": \"#/components/schemas/HTTPValidationError\"\n+                                }\n+                            }\n+                        },\n+                    },\n+                },\n+                \"summary\": \"Create User\",\n+                \"operationId\": \"create_user_users__post\",\n+                \"requestBody\": {\n+                    \"content\": {\n+                        \"application/json\": {\n+                            \"schema\": {\"$ref\": \"#/components/schemas/UserCreate\"}\n+                        }\n+                    },\n+                    \"required\": True,\n+                },\n+            },\n+        },\n+        \"/users/{user_id}\": {\n+            \"get\": {\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\"$ref\": \"#/components/schemas/User\"}\n+                            }\n+                        },\n+                    },\n+                    \"422\": {\n+                        \"description\": \"Validation Error\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\n+                                    \"$ref\": \"#/components/schemas/HTTPValidationError\"\n+                                }\n+                            }\n+                        },\n+                    },\n+                },\n+                \"summary\": \"Read User\",\n+                \"operationId\": \"read_user_users__user_id__get\",\n+                \"parameters\": [\n+                    {\n+                        \"required\": True,\n+                        \"schema\": {\"title\": \"User Id\", \"type\": \"integer\"},\n+                        \"name\": \"user_id\",\n+                        \"in\": \"path\",\n+                    }\n+                ],\n+            }\n+        },\n+        \"/users/{user_id}/items/\": {\n+            \"post\": {\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\"$ref\": \"#/components/schemas/Item\"}\n+                            }\n+                        },\n+                    },\n+                    \"422\": {\n+                        \"description\": \"Validation Error\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\n+                                    \"$ref\": \"#/components/schemas/HTTPValidationError\"\n+                                }\n+                            }\n+                        },\n+                    },\n+                },\n+                \"summary\": \"Create Item For User\",\n+                \"operationId\": \"create_item_for_user_users__user_id__items__post\",\n+                \"parameters\": [\n+                    {\n+                        \"required\": True,\n+                        \"schema\": {\"title\": \"User Id\", \"type\": \"integer\"},\n+                        \"name\": \"user_id\",\n+                        \"in\": \"path\",\n+                    }\n+                ],\n+                \"requestBody\": {\n+                    \"content\": {\n+                        \"application/json\": {\n+                            \"schema\": {\"$ref\": \"#/components/schemas/ItemCreate\"}\n+                        }\n+                    },\n+                    \"required\": True,\n+                },\n+            }\n+        },\n+        \"/items/\": {\n+            \"get\": {\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\n+                                    \"title\": \"Response Read Items Items  Get\",\n+                                    \"type\": \"array\",\n+                                    \"items\": {\"$ref\": \"#/components/schemas/Item\"},\n+                                }\n+                            }\n+                        },\n+                    },\n+                    \"422\": {\n+                        \"description\": \"Validation Error\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\n+                                    \"$ref\": \"#/components/schemas/HTTPValidationError\"\n+                                }\n+                            }\n+                        },\n+                    },\n+                },\n+                \"summary\": \"Read Items\",\n+                \"operationId\": \"read_items_items__get\",\n+                \"parameters\": [\n+                    {\n+                        \"required\": False,\n+                        \"schema\": {\"title\": \"Skip\", \"type\": \"integer\", \"default\": 0},\n+                        \"name\": \"skip\",\n+                        \"in\": \"query\",\n+                    },\n+                    {\n+                        \"required\": False,\n+                        \"schema\": {\"title\": \"Limit\", \"type\": \"integer\", \"default\": 100},\n+                        \"name\": \"limit\",\n+                        \"in\": \"query\",\n+                    },\n+                ],\n+            }\n+        },\n+    },\n+    \"components\": {\n+        \"schemas\": {\n+            \"ItemCreate\": {\n+                \"title\": \"ItemCreate\",\n+                \"required\": [\"title\"],\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"title\": {\"title\": \"Title\", \"type\": \"string\"},\n+                    \"description\": {\"title\": \"Description\", \"type\": \"string\"},\n+                },\n+            },\n+            \"Item\": {\n+                \"title\": \"Item\",\n+                \"required\": [\"title\", \"id\", \"owner_id\"],\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"title\": {\"title\": \"Title\", \"type\": \"string\"},\n+                    \"description\": {\"title\": \"Description\", \"type\": \"string\"},\n+                    \"id\": {\"title\": \"Id\", \"type\": \"integer\"},\n+                    \"owner_id\": {\"title\": \"Owner Id\", \"type\": \"integer\"},\n+                },\n+            },\n+            \"User\": {\n+                \"title\": \"User\",\n+                \"required\": [\"email\", \"id\", \"is_active\"],\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"email\": {\"title\": \"Email\", \"type\": \"string\"},\n+                    \"id\": {\"title\": \"Id\", \"type\": \"integer\"},\n+                    \"is_active\": {\"title\": \"Is Active\", \"type\": \"boolean\"},\n+                    \"items\": {\n+                        \"title\": \"Items\",\n+                        \"type\": \"array\",\n+                        \"items\": {\"$ref\": \"#/components/schemas/Item\"},\n+                        \"default\": [],\n+                    },\n+                },\n+            },\n+            \"UserCreate\": {\n+                \"title\": \"UserCreate\",\n+                \"required\": [\"email\", \"password\"],\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"email\": {\"title\": \"Email\", \"type\": \"string\"},\n+                    \"password\": {\"title\": \"Password\", \"type\": \"string\"},\n+                },\n+            },\n+            \"ValidationError\": {\n+                \"title\": \"ValidationError\",\n+                \"required\": [\"loc\", \"msg\", \"type\"],\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"loc\": {\n+                        \"title\": \"Location\",\n+                        \"type\": \"array\",\n+                        \"items\": {\"type\": \"string\"},\n+                    },\n+                    \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n+                    \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n+                },\n+            },\n+            \"HTTPValidationError\": {\n+                \"title\": \"HTTPValidationError\",\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"detail\": {\n+                        \"title\": \"Detail\",\n+                        \"type\": \"array\",\n+                        \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n+                    }\n+                },\n+            },\n+        }\n+    },\n+}\n+\n+\n+@pytest.fixture(scope=\"module\", name=\"client\")\n+def get_client(tmp_path_factory: pytest.TempPathFactory):\n+    tmp_path = tmp_path_factory.mktemp(\"data\")\n+    cwd = os.getcwd()\n+    os.chdir(tmp_path)\n+    test_db = Path(\"./sql_app.db\")\n+    if test_db.is_file():  # pragma: nocover\n+        test_db.unlink()\n+    # Import while creating the client to create the DB after starting the test session\n+    from docs_src.sql_databases.sql_app_py39 import main\n+\n+    # Ensure import side effects are re-executed\n+    importlib.reload(main)\n+    with TestClient(main.app) as c:\n+        yield c\n+    if test_db.is_file():  # pragma: nocover\n+        test_db.unlink()\n+    os.chdir(cwd)\n+\n+\n+@needs_py39\n+def test_openapi_schema(client):\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == openapi_schema\n+\n+\n+@needs_py39\n+def test_create_user(client):\n+    test_user = {\"email\": \"johndoe@example.com\", \"password\": \"secret\"}\n+    response = client.post(\"/users/\", json=test_user)\n+    assert response.status_code == 200, response.text\n+    data = response.json()\n+    assert test_user[\"email\"] == data[\"email\"]\n+    assert \"id\" in data\n+    response = client.post(\"/users/\", json=test_user)\n+    assert response.status_code == 400, response.text\n+\n+\n+@needs_py39\n+def test_get_user(client):\n+    response = client.get(\"/users/1\")\n+    assert response.status_code == 200, response.text\n+    data = response.json()\n+    assert \"email\" in data\n+    assert \"id\" in data\n+\n+\n+@needs_py39\n+def test_inexistent_user(client):\n+    response = client.get(\"/users/999\")\n+    assert response.status_code == 404, response.text\n+\n+\n+@needs_py39\n+def test_get_users(client):\n+    response = client.get(\"/users/\")\n+    assert response.status_code == 200, response.text\n+    data = response.json()\n+    assert \"email\" in data[0]\n+    assert \"id\" in data[0]\n+\n+\n+@needs_py39\n+def test_create_item(client):\n+    item = {\"title\": \"Foo\", \"description\": \"Something that fights\"}\n+    response = client.post(\"/users/1/items/\", json=item)\n+    assert response.status_code == 200, response.text\n+    item_data = response.json()\n+    assert item[\"title\"] == item_data[\"title\"]\n+    assert item[\"description\"] == item_data[\"description\"]\n+    assert \"id\" in item_data\n+    assert \"owner_id\" in item_data\n+    response = client.get(\"/users/1\")\n+    assert response.status_code == 200, response.text\n+    user_data = response.json()\n+    item_to_check = [it for it in user_data[\"items\"] if it[\"id\"] == item_data[\"id\"]][0]\n+    assert item_to_check[\"title\"] == item[\"title\"]\n+    assert item_to_check[\"description\"] == item[\"description\"]\n+    response = client.get(\"/users/1\")\n+    assert response.status_code == 200, response.text\n+    user_data = response.json()\n+    item_to_check = [it for it in user_data[\"items\"] if it[\"id\"] == item_data[\"id\"]][0]\n+    assert item_to_check[\"title\"] == item[\"title\"]\n+    assert item_to_check[\"description\"] == item[\"description\"]\n+\n+\n+@needs_py39\n+def test_read_items(client):\n+    response = client.get(\"/items/\")\n+    assert response.status_code == 200, response.text\n+    data = response.json()\n+    assert data\n+    first_item = data[0]\n+    assert \"title\" in first_item\n+    assert \"description\" in first_item\n\n@@ -1,8 +1,14 @@\n import importlib\n+import os\n from pathlib import Path\n \n+import pytest\n \n-def test_testing_dbs():\n+\n+def test_testing_dbs(tmp_path_factory: pytest.TempPathFactory):\n+    tmp_path = tmp_path_factory.mktemp(\"data\")\n+    cwd = os.getcwd()\n+    os.chdir(tmp_path)\n     test_db = Path(\"./test.db\")\n     if test_db.is_file():  # pragma: nocover\n         test_db.unlink()\n@@ -14,3 +20,4 @@ def test_testing_dbs():\n     test_sql_app.test_create_user()\n     if test_db.is_file():  # pragma: nocover\n         test_db.unlink()\n+    os.chdir(cwd)\n\n@@ -0,0 +1,26 @@\n+import importlib\n+import os\n+from pathlib import Path\n+\n+import pytest\n+\n+from ...utils import needs_py310\n+\n+\n+@needs_py310\n+def test_testing_dbs_py39(tmp_path_factory: pytest.TempPathFactory):\n+    tmp_path = tmp_path_factory.mktemp(\"data\")\n+    cwd = os.getcwd()\n+    os.chdir(tmp_path)\n+    test_db = Path(\"./test.db\")\n+    if test_db.is_file():  # pragma: nocover\n+        test_db.unlink()\n+    # Import while creating the client to create the DB after starting the test session\n+    from docs_src.sql_databases.sql_app_py310.tests import test_sql_app\n+\n+    # Ensure import side effects are re-executed\n+    importlib.reload(test_sql_app)\n+    test_sql_app.test_create_user()\n+    if test_db.is_file():  # pragma: nocover\n+        test_db.unlink()\n+    os.chdir(cwd)\n\n@@ -0,0 +1,26 @@\n+import importlib\n+import os\n+from pathlib import Path\n+\n+import pytest\n+\n+from ...utils import needs_py39\n+\n+\n+@needs_py39\n+def test_testing_dbs_py39(tmp_path_factory: pytest.TempPathFactory):\n+    tmp_path = tmp_path_factory.mktemp(\"data\")\n+    cwd = os.getcwd()\n+    os.chdir(tmp_path)\n+    test_db = Path(\"./test.db\")\n+    if test_db.is_file():  # pragma: nocover\n+        test_db.unlink()\n+    # Import while creating the client to create the DB after starting the test session\n+    from docs_src.sql_databases.sql_app_py39.tests import test_sql_app\n+\n+    # Ensure import side effects are re-executed\n+    importlib.reload(test_sql_app)\n+    test_sql_app.test_create_user()\n+    if test_db.is_file():  # pragma: nocover\n+        test_db.unlink()\n+    os.chdir(cwd)\n\n@@ -1,10 +1,10 @@\n-from docs_src.app_testing import test_main_b\n+from docs_src.app_testing.app_b import test_main\n \n \n def test_app():\n-    test_main_b.test_create_existing_item()\n-    test_main_b.test_create_item()\n-    test_main_b.test_create_item_bad_token()\n-    test_main_b.test_read_inexistent_item()\n-    test_main_b.test_read_item()\n-    test_main_b.test_read_item_bad_token()\n+    test_main.test_create_existing_item()\n+    test_main.test_create_item()\n+    test_main.test_create_item_bad_token()\n+    test_main.test_read_inexistent_item()\n+    test_main.test_read_item()\n+    test_main.test_read_item_bad_token()\n\n@@ -0,0 +1,13 @@\n+from ...utils import needs_py310\n+\n+\n+@needs_py310\n+def test_app():\n+    from docs_src.app_testing.app_b_py310 import test_main\n+\n+    test_main.test_create_existing_item()\n+    test_main.test_create_item()\n+    test_main.test_create_item_bad_token()\n+    test_main.test_read_inexistent_item()\n+    test_main.test_read_item()\n+    test_main.test_read_item_bad_token()\n\n@@ -4,3 +4,6 @@ import pytest\n \n needs_py37 = pytest.mark.skipif(sys.version_info < (3, 7), reason=\"requires python3.7+\")\n needs_py39 = pytest.mark.skipif(sys.version_info < (3, 9), reason=\"requires python3.9+\")\n+needs_py310 = pytest.mark.skipif(\n+    sys.version_info < (3, 10), reason=\"requires python3.10+\"\n+)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
