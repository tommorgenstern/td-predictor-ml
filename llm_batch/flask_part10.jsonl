{"custom_id": "flask#c4f64c1c475badaeef009ad46846e32a8e5c9b66", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 78 | Lines Deleted: 47 | Files Changed: 9 | Hunks: 20 | Methods Changed: 5 | Complexity Δ (Sum/Max): 2/2 | Churn Δ: 125 | Churn Cumulative: 1699 | Contributors (this commit): 1 | Commits (past 90d): 17 | Contributors (cumulative): 9 | DMM Complexity: 1.0\n\nDIFF:\n@@ -9,50 +9,15 @@\n     :copyright: (c) 2010 by Armin Ronacher.\n     :license: BSD, see LICENSE for more details.\n \"\"\"\n-from __future__ import with_statement\n-import os\n-import sys\n-import mimetypes\n-from datetime import datetime, timedelta\n-\n-# this is a workaround for appengine.  Do not remove this import\n-import werkzeug\n-\n-from itertools import chain\n-from threading import Lock\n-from jinja2 import Environment, PackageLoader, FileSystemLoader\n-from werkzeug import Request as RequestBase, Response as ResponseBase, \\\n-     LocalStack, LocalProxy, create_environ, SharedDataMiddleware, \\\n-     ImmutableDict, cached_property, wrap_file, Headers, \\\n-     import_string\n-from werkzeug.routing import Map, Rule\n-from werkzeug.exceptions import HTTPException, InternalServerError\n-from werkzeug.contrib.securecookie import SecureCookie\n-\n-\n \n # utilities we import from Werkzeug and Jinja2 that are unused\n # in the module but are exported as public interface.\n from werkzeug import abort, redirect\n from jinja2 import Markup, escape\n \n-# use pkg_resource if that works, otherwise fall back to cwd.  The\n-# current working directory is generally not reliable with the notable\n-# exception of google appengine.\n-try:\n-    import pkg_resources\n-    pkg_resources.resource_stream\n-except (ImportError, AttributeError):\n-    pkg_resources = None\n-\n-# a lock used for logger initialization\n-_logger_lock = Lock()\n-\n-\n-\n-# context locals\n-_request_ctx_stack = LocalStack()\n-current_app = LocalProxy(lambda: _request_ctx_stack.top.app)\n-request = LocalProxy(lambda: _request_ctx_stack.top.request)\n-session = LocalProxy(lambda: _request_ctx_stack.top.session)\n-g = LocalProxy(lambda: _request_ctx_stack.top.g)\n+from flask.app import Flask\n+from flask.helpers import url_for, jsonify, json_available, flash, send_file, \\\n+    get_flashed_messages, render_template, render_template, render_template_string, \\\n+    get_template_attribute\n+from flask.globals import current_app, g, request, session, _request_ctx_stack\n+from flask.module import Module\n\n@@ -1,3 +1,23 @@\n+from threading import Lock\n+from datetime import timedelta, datetime\n+from itertools import chain\n+\n+from jinja2 import Environment, PackageLoader, FileSystemLoader\n+from werkzeug import ImmutableDict, SharedDataMiddleware, create_environ\n+from werkzeug.routing import Map, Rule\n+from werkzeug.exceptions import HTTPException, InternalServerError\n+\n+from flask.helpers import _PackageBoundObject, url_for, get_flashed_messages, \\\n+    _tojson_filter, get_pkg_resources\n+from flask.wrappers import Request, Response\n+from flask.conf import ConfigAttribute, Config\n+from flask.ctx import _default_template_ctx_processor, _RequestContext\n+from flask.globals import _request_ctx_stack, request\n+from flask.session import Session, _NullSession\n+from flask.module import _ModuleSetupState\n+\n+# a lock used for logger initialization\n+_logger_lock = Lock()\n \n \n class Flask(_PackageBoundObject):\n@@ -219,7 +239,7 @@ class Flask(_PackageBoundObject):\n         if self.static_path is not None:\n             self.add_url_rule(self.static_path + '/<filename>',\n                               build_only=True, endpoint='static')\n-            if pkg_resources is not None:\n+            if get_pkg_resources() is not None:\n                 target = (self.import_name, 'static')\n             else:\n                 target = os.path.join(self.root_path, 'static')\n@@ -279,7 +299,7 @@ class Flask(_PackageBoundObject):\n         `templates` folder.  To add other loaders it's possible to\n         override this method.\n         \"\"\"\n-        if pkg_resources is None:\n+        if get_pkg_resources() is None:\n             return FileSystemLoader(os.path.join(self.root_path, 'templates'))\n         return PackageLoader(self.import_name)\n \n\n@@ -1,3 +1,7 @@\n+import os\n+import sys\n+\n+from werkzeug import import_string\n \n \n class ConfigAttribute(object):\n\n@@ -1,3 +1,8 @@\n+from werkzeug.exceptions import HTTPException\n+\n+from flask.wrappers import _RequestGlobals\n+from flask.globals import _request_ctx_stack\n+from flask.session import _NullSession\n \n \n class _RequestContext(object):\n\n@@ -0,0 +1,8 @@\n+from werkzeug import LocalStack, LocalProxy\n+\n+# context locals\n+_request_ctx_stack = LocalStack()\n+current_app = LocalProxy(lambda: _request_ctx_stack.top.app)\n+request = LocalProxy(lambda: _request_ctx_stack.top.request)\n+session = LocalProxy(lambda: _request_ctx_stack.top.session)\n+g = LocalProxy(lambda: _request_ctx_stack.top.g)\n\\ No newline at end of file\n\n@@ -1,3 +1,7 @@\n+import os\n+import sys\n+import mimetypes\n+\n # try to load the best simplejson implementation available.  If JSON\n # is not installed, we add a failing class.\n json_available = True\n@@ -9,6 +13,12 @@ except ImportError:\n     except ImportError:\n         json_available = False\n         \n+from werkzeug import Headers, wrap_file\n+\n+from flask.globals import session, _request_ctx_stack, current_app, request\n+from flask.wrappers import Response\n+\n+        \n def _assert_have_json():\n     \"\"\"Helper function that fails if JSON is unavailable.\"\"\"\n     if not json_available:\n@@ -57,6 +67,17 @@ def jsonify(*args, **kwargs):\n     return current_app.response_class(json.dumps(dict(*args, **kwargs),\n         indent=None if request.is_xhr else 2), mimetype='application/json')\n     \n+def get_pkg_resources():\n+    \"\"\"Use pkg_resource if that works, otherwise fall back to cwd.  The\n+    current working directory is generally not reliable with the notable\n+    exception of google appengine.\n+    \"\"\"\n+    try:\n+        import pkg_resources\n+        pkg_resources.resource_stream\n+    except (ImportError, AttributeError):\n+        return\n+    return pkg_resources\n \n \n def url_for(endpoint, **values):\n@@ -164,7 +185,6 @@ def get_flashed_messages(with_categories=False):\n     return flashes\n \n \n-\n def send_file(filename_or_fp, mimetype=None, as_attachment=False,\n               attachment_filename=None):\n     \"\"\"Sends the contents of a file to the client.  This will use the\n@@ -262,7 +282,6 @@ def render_template_string(source, **context):\n     return current_app.jinja_env.from_string(source).render(context)\n \n \n-\n def _get_package_path(name):\n     \"\"\"Returns the path to a package or cwd if that cannot be found.\"\"\"\n     try:\n@@ -271,7 +290,6 @@ def _get_package_path(name):\n         return os.getcwd()\n \n \n-\n class _PackageBoundObject(object):\n \n     def __init__(self, import_name):\n@@ -304,7 +322,7 @@ class _PackageBoundObject(object):\n         :param resource: the name of the resource.  To access resources within\n                          subfolders use forward slashes as separator.\n         \"\"\"\n+        pkg_resources = get_pkg_resources()\n         if pkg_resources is None:\n             return open(os.path.join(self.root_path, resource), 'rb')\n         return pkg_resources.resource_stream(self.import_name, resource)\n-\n\n@@ -1,3 +1,4 @@\n+from flask.helpers import _PackageBoundObject\n \n \n class _ModuleSetupState(object):\n\n@@ -1,3 +1,6 @@\n+from werkzeug.contrib.securecookie import SecureCookie\n+\n+\n class Session(SecureCookie):\n     \"\"\"Expands the session with support for switching between permanent\n     and non-permanent sessions.\n\n@@ -1,3 +1,9 @@\n+from werkzeug import Request as RequestBase, Response as ResponseBase, \\\n+    cached_property\n+\n+from helpers import json\n+\n+\n class Request(RequestBase):\n     \"\"\"The request object used by default in flask.  Remembers the\n     matched endpoint and view arguments.\n@@ -35,6 +41,7 @@ class Request(RequestBase):\n         parsed JSON data.\n         \"\"\"\n         if __debug__:\n+            from flask.helpers import _assert_have_json\n             _assert_have_json()\n         if self.mimetype == 'application/json':\n             return json.loads(self.data)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#1a69c7d4bf4d87d00b5fb2551ea39ee7c932768b", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 3 | Lines Deleted: 3 | Files Changed: 1 | Hunks: 3 | Methods Changed: 2 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 6 | Churn Cumulative: 1012 | Contributors (this commit): 6 | Commits (past 90d): 44 | Contributors (cumulative): 6 | DMM Complexity: None\n\nDIFF:\n@@ -21,7 +21,7 @@ from contextlib import contextmanager\n from datetime import datetime\n from werkzeug import parse_date, parse_options_header\n from cStringIO import StringIO\n-\n+from flask.helpers import json\n \n example_path = os.path.join(os.path.dirname(__file__), '..', 'examples')\n sys.path.append(os.path.join(example_path, 'flaskr'))\n@@ -409,7 +409,7 @@ class JSONTestCase(unittest.TestCase):\n         for url in '/kw', '/dict':\n             rv = c.get(url)\n             assert rv.mimetype == 'application/json'\n-            assert flask.json.loads(rv.data) == d\n+            assert json.loads(rv.data) == d\n \n     def test_json_attr(self):\n         app = flask.Flask(__name__)\n@@ -417,7 +417,7 @@ class JSONTestCase(unittest.TestCase):\n         def add():\n             return unicode(flask.request.json['a'] + flask.request.json['b'])\n         c = app.test_client()\n-        rv = c.post('/add', data=flask.json.dumps({'a': 1, 'b': 2}),\n+        rv = c.post('/add', data=json.dumps({'a': 1, 'b': 2}),\n                             content_type='application/json')\n         assert rv.data == '3'\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#b2c7efd0fabcc0514e27d03ed30f5f8af1de1065", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 168/168 | Churn Δ: 2 | Churn Cumulative: 4180 | Contributors (this commit): 11 | Commits (past 90d): 103 | Contributors (cumulative): 11 | DMM Complexity: None\n\nDIFF:\n@@ -1292,7 +1292,7 @@ class Flask(_PackageBoundObject):\n         :param methods: a list of methods this rule should be limited\n                         to (``GET``, ``POST`` etc.).  By default a rule\n                         just listens for ``GET`` (and implicitly ``HEAD``).\n-        :param subdomain: specifies the rule for the subdoain in case\n+        :param subdomain: specifies the rule for the subdomain in case\n                           subdomain matching is in use.\n         :param strict_slashes: can be used to disable the strict slashes\n                                setting for this rule.  See above.\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#7599046d042d1bb3f2db6cdcd6458338802901c4", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 42 | Lines Deleted: 8 | Files Changed: 2 | Hunks: 6 | Methods Changed: 5 | Complexity Δ (Sum/Max): 5/4 | Churn Δ: 50 | Churn Cumulative: 5242 | Contributors (this commit): 11 | Commits (past 90d): 149 | Contributors (cumulative): 17 | DMM Complexity: 1.0\n\nDIFF:\n@@ -788,6 +788,15 @@ class Config(dict):\n         return '<%s %s>' % (self.__class__.__name__, dict.__repr__(self))\n \n \n+def _select_autoescape(filename):\n+    \"\"\"Returns `True` if autoescaping should be active for the given\n+    template name.\n+    \"\"\"\n+    if filename is None:\n+        return False\n+    return filename.endswith(('.html', '.htm', '.xml', '.xhtml'))\n+\n+\n class Flask(_PackageBoundObject):\n     \"\"\"The flask object implements a WSGI application and acts as the central\n     object.  It is passed the name of the module or package of the\n@@ -920,7 +929,7 @@ class Flask(_PackageBoundObject):\n \n     #: Options that are passed directly to the Jinja2 environment.\n     jinja_options = ImmutableDict(\n-        autoescape=True,\n+        autoescape=_select_autoescape,\n         extensions=['jinja2.ext.autoescape', 'jinja2.ext.with_']\n     )\n \n@@ -1018,13 +1027,8 @@ class Flask(_PackageBoundObject):\n         #: The Jinja2 environment.  It is created from the\n         #: :attr:`jinja_options` and the loader that is returned\n         #: by the :meth:`create_jinja_loader` function.\n-        self.jinja_env = Environment(loader=self.create_jinja_loader(),\n-                                     **self.jinja_options)\n-        self.jinja_env.globals.update(\n-            url_for=url_for,\n-            get_flashed_messages=get_flashed_messages\n-        )\n-        self.jinja_env.filters['tojson'] = _tojson_filter\n+        self.jinja_env = self.create_jinja_environment()\n+        self.init_jinja_globals()\n \n     @property\n     def logger(self):\n@@ -1061,6 +1065,15 @@ class Flask(_PackageBoundObject):\n             self._logger = logger\n             return logger\n \n+    def create_jinja_environment(self):\n+        \"\"\"Creates the Jinja2 environment based on :attr:`jinja_options`\n+        and :meth:`create_jinja_loader`.\n+\n+        .. versionadded:: 0.5\n+        \"\"\"\n+        return Environment(loader=self.create_jinja_loader(),\n+                           **self.jinja_options)\n+\n     def create_jinja_loader(self):\n         \"\"\"Creates the Jinja loader.  By default just a package loader for\n         the configured package is returned that looks up templates in the\n@@ -1071,6 +1084,19 @@ class Flask(_PackageBoundObject):\n             return FileSystemLoader(os.path.join(self.root_path, 'templates'))\n         return PackageLoader(self.import_name)\n \n+    def init_jinja_globals(self):\n+        \"\"\"Callde directly after the environment was created to inject\n+        some defaults (like `url_for`, `get_flashed_messages` and the\n+        `tojson` filter.\n+\n+        .. versionadded:: 0.5\n+        \"\"\"\n+        self.jinja_env.globals.update(\n+            url_for=url_for,\n+            get_flashed_messages=get_flashed_messages\n+        )\n+        self.jinja_env.filters['tojson'] = _tojson_filter\n+\n     def update_template_context(self, context):\n         \"\"\"Update the template context with some commonly used variables.\n         This injects request, session and g into the template context.\n\n@@ -461,6 +461,14 @@ class TemplatingTestCase(unittest.TestCase):\n             '<p>Hello World!'\n         ]\n \n+    def test_no_escaping(self):\n+        app = flask.Flask(__name__)\n+        with app.test_request_context():\n+            assert flask.render_template_string('{{ foo }}',\n+                foo='<test>') == '<test>'\n+            assert flask.render_template('mail.txt', foo='<test>') \\\n+                == '<test> Mail'\n+\n     def test_macros(self):\n         app = flask.Flask(__name__)\n         with app.test_request_context():\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#8798b4b7112fb984bd244c8581ab03ef4a7ba766", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 37 | Lines Deleted: 12 | Files Changed: 3 | Hunks: 9 | Methods Changed: 6 | Complexity Δ (Sum/Max): 4/4 | Churn Δ: 49 | Churn Cumulative: 1976 | Contributors (this commit): 6 | Commits (past 90d): 52 | Contributors (cumulative): 10 | DMM Complexity: 1.0\n\nDIFF:\n@@ -18,6 +18,6 @@ from jinja2 import Markup, escape\n from flask.app import Flask\n from flask.helpers import url_for, jsonify, json_available, flash, send_file, \\\n     get_flashed_messages, render_template, render_template, render_template_string, \\\n-    get_template_attribute\n+    get_template_attribute, json\n from flask.globals import current_app, g, request, session, _request_ctx_stack\n from flask.module import Module\n\n@@ -20,6 +20,15 @@ from flask.module import _ModuleSetupState\n _logger_lock = Lock()\n \n \n+def _select_autoescape(filename):\n+    \"\"\"Returns `True` if autoescaping should be active for the given\n+    template name.\n+    \"\"\"\n+    if filename is None:\n+        return False\n+    return filename.endswith(('.html', '.htm', '.xml', '.xhtml'))\n+\n+\n class Flask(_PackageBoundObject):\n     \"\"\"The flask object implements a WSGI application and acts as the central\n     object.  It is passed the name of the module or package of the\n@@ -152,7 +161,7 @@ class Flask(_PackageBoundObject):\n \n     #: Options that are passed directly to the Jinja2 environment.\n     jinja_options = ImmutableDict(\n-        autoescape=True,\n+        autoescape=_select_autoescape,\n         extensions=['jinja2.ext.autoescape', 'jinja2.ext.with_']\n     )\n \n@@ -250,13 +259,8 @@ class Flask(_PackageBoundObject):\n         #: The Jinja2 environment.  It is created from the\n         #: :attr:`jinja_options` and the loader that is returned\n         #: by the :meth:`create_jinja_loader` function.\n-        self.jinja_env = Environment(loader=self.create_jinja_loader(),\n-                                     **self.jinja_options)\n-        self.jinja_env.globals.update(\n-            url_for=url_for,\n-            get_flashed_messages=get_flashed_messages\n-        )\n-        self.jinja_env.filters['tojson'] = _tojson_filter\n+        self.jinja_env = self.create_jinja_environment()\n+        self.init_jinja_globals()\n \n     @property\n     def logger(self):\n@@ -293,6 +297,15 @@ class Flask(_PackageBoundObject):\n             self._logger = logger\n             return logger\n \n+    def create_jinja_environment(self):\n+        \"\"\"Creates the Jinja2 environment based on :attr:`jinja_options`\n+        and :meth:`create_jinja_loader`.\n+\n+        .. versionadded:: 0.5\n+        \"\"\"\n+        return Environment(loader=self.create_jinja_loader(),\n+                           **self.jinja_options)\n+\n     def create_jinja_loader(self):\n         \"\"\"Creates the Jinja loader.  By default just a package loader for\n         the configured package is returned that looks up templates in the\n@@ -303,6 +316,19 @@ class Flask(_PackageBoundObject):\n             return FileSystemLoader(os.path.join(self.root_path, 'templates'))\n         return PackageLoader(self.import_name)\n \n+    def init_jinja_globals(self):\n+        \"\"\"Callde directly after the environment was created to inject\n+        some defaults (like `url_for`, `get_flashed_messages` and the\n+        `tojson` filter.\n+\n+        .. versionadded:: 0.5\n+        \"\"\"\n+        self.jinja_env.globals.update(\n+            url_for=url_for,\n+            get_flashed_messages=get_flashed_messages\n+        )\n+        self.jinja_env.filters['tojson'] = _tojson_filter\n+\n     def update_template_context(self, context):\n         \"\"\"Update the template context with some commonly used variables.\n         This injects request, session and g into the template context.\n\n@@ -21,7 +21,6 @@ from contextlib import contextmanager\n from datetime import datetime\n from werkzeug import parse_date, parse_options_header\n from cStringIO import StringIO\n-from flask.helpers import json\n \n example_path = os.path.join(os.path.dirname(__file__), '..', 'examples')\n sys.path.append(os.path.join(example_path, 'flaskr'))\n@@ -409,7 +408,7 @@ class JSONTestCase(unittest.TestCase):\n         for url in '/kw', '/dict':\n             rv = c.get(url)\n             assert rv.mimetype == 'application/json'\n-            assert json.loads(rv.data) == d\n+            assert flask.json.loads(rv.data) == d\n \n     def test_json_attr(self):\n         app = flask.Flask(__name__)\n@@ -417,7 +416,7 @@ class JSONTestCase(unittest.TestCase):\n         def add():\n             return unicode(flask.request.json['a'] + flask.request.json['b'])\n         c = app.test_client()\n-        rv = c.post('/add', data=json.dumps({'a': 1, 'b': 2}),\n+        rv = c.post('/add', data=flask.json.dumps({'a': 1, 'b': 2}),\n                             content_type='application/json')\n         assert rv.data == '3'\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#dd59d7241d0ebc713d51ab939f53ebd0df8b2dac", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 846 | Contributors (this commit): 2 | Commits (past 90d): 4 | Contributors (cumulative): 2 | DMM Complexity: None\n\nDIFF:\n@@ -550,7 +550,7 @@ class Flask(_PackageBoundObject):\n         :param methods: a list of methods this rule should be limited\n                         to (``GET``, ``POST`` etc.).  By default a rule\n                         just listens for ``GET`` (and implicitly ``HEAD``).\n-        :param subdomain: specifies the rule for the subdoain in case\n+        :param subdomain: specifies the rule for the subdomain in case\n                           subdomain matching is in use.\n         :param strict_slashes: can be used to disable the strict slashes\n                                setting for this rule.  See above.\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#4f8ee8f12946b224e5003405be99aa4e454bdeee", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 99 | Lines Deleted: 8 | Files Changed: 10 | Hunks: 16 | Methods Changed: 0 | Complexity Δ (Sum/Max): 15/15 | Churn Δ: 107 | Churn Cumulative: 1824 | Contributors (this commit): 3 | Commits (past 90d): 41 | Contributors (cumulative): 19 | DMM Complexity: None\n\nDIFF:\n@@ -16,6 +16,7 @@ from werkzeug import abort, redirect\n from jinja2 import Markup, escape\n \n from flask.app import Flask\n+from flask.config import Config\n from flask.helpers import url_for, jsonify, json_available, flash, send_file, \\\n     get_flashed_messages, render_template, render_template, render_template_string, \\\n     get_template_attribute, json\n\n@@ -1,3 +1,14 @@\n+# -*- coding: utf-8 -*-\n+\"\"\"\n+    flask.app\n+    ~~~~~~~~~\n+\n+    This module implements the central WSGI application object.\n+\n+    :copyright: (c) 2010 by Armin Ronacher.\n+    :license: BSD, see LICENSE for more details.\n+\"\"\"\n+\n from threading import Lock\n from datetime import timedelta, datetime\n from itertools import chain\n@@ -10,7 +21,7 @@ from werkzeug.exceptions import HTTPException, InternalServerError\n from flask.helpers import _PackageBoundObject, url_for, get_flashed_messages, \\\n     _tojson_filter, get_pkg_resources\n from flask.wrappers import Request, Response\n-from flask.conf import ConfigAttribute, Config\n+from flask.config import ConfigAttribute, Config\n from flask.ctx import _default_template_ctx_processor, _RequestContext\n from flask.globals import _request_ctx_stack, request\n from flask.session import Session, _NullSession\n\n@@ -1,3 +1,14 @@\n+# -*- coding: utf-8 -*-\n+\"\"\"\n+    flask.config\n+    ~~~~~~~~~~~~\n+\n+    Implements the configuration related objects.\n+\n+    :copyright: (c) 2010 by Armin Ronacher.\n+    :license: BSD, see LICENSE for more details.\n+\"\"\"\n+\n import os\n import sys\n \n\n@@ -1,10 +1,24 @@\n+# -*- coding: utf-8 -*-\n+\"\"\"\n+    flask.ctx\n+    ~~~~~~~~~\n+\n+    Implements the objects required to keep the context.\n+\n+    :copyright: (c) 2010 by Armin Ronacher.\n+    :license: BSD, see LICENSE for more details.\n+\"\"\"\n+\n from werkzeug.exceptions import HTTPException\n \n-from flask.wrappers import _RequestGlobals\n from flask.globals import _request_ctx_stack\n from flask.session import _NullSession\n \n \n+class _RequestGlobals(object):\n+    pass\n+\n+\n class _RequestContext(object):\n     \"\"\"The request context contains all request relevant information.  It is\n     created at the beginning of the request and pushed to the\n\n@@ -1,3 +1,15 @@\n+# -*- coding: utf-8 -*-\n+\"\"\"\n+    flask.globals\n+    ~~~~~~~~~~~~~\n+\n+    Defines all the global objects that are proxies to the current\n+    active context.\n+\n+    :copyright: (c) 2010 by Armin Ronacher.\n+    :license: BSD, see LICENSE for more details.\n+\"\"\"\n+\n from werkzeug import LocalStack, LocalProxy\n \n # context locals\n\n@@ -1,3 +1,14 @@\n+# -*- coding: utf-8 -*-\n+\"\"\"\n+    flask.helpers\n+    ~~~~~~~~~~~~~\n+\n+    Implements various helpers.\n+\n+    :copyright: (c) 2010 by Armin Ronacher.\n+    :license: BSD, see LICENSE for more details.\n+\"\"\"\n+\n import os\n import sys\n import mimetypes\n@@ -35,6 +46,7 @@ if not json_available or '\\\\/' not in json.dumps('/'):\n else:\n     _tojson_filter = json.dumps\n \n+\n def jsonify(*args, **kwargs):\n     \"\"\"Creates a :class:`~flask.Response` with the JSON representation of\n     the given arguments with an `application/json` mimetype.  The arguments\n@@ -67,6 +79,7 @@ def jsonify(*args, **kwargs):\n     return current_app.response_class(json.dumps(dict(*args, **kwargs),\n         indent=None if request.is_xhr else 2), mimetype='application/json')\n \n+\n def get_pkg_resources():\n     \"\"\"Use pkg_resource if that works, otherwise fall back to cwd.  The\n     current working directory is generally not reliable with the notable\n\n@@ -1,3 +1,14 @@\n+# -*- coding: utf-8 -*-\n+\"\"\"\n+    flask.module\n+    ~~~~~~~~~~~~\n+\n+    Implements a class that represents module blueprints.\n+\n+    :copyright: (c) 2010 by Armin Ronacher.\n+    :license: BSD, see LICENSE for more details.\n+\"\"\"\n+\n from flask.helpers import _PackageBoundObject\n \n \n\n@@ -1,3 +1,15 @@\n+# -*- coding: utf-8 -*-\n+\"\"\"\n+    flask.session\n+    ~~~~~~~~~~~~~\n+\n+    Implements cookie based sessions based on Werkzeug's secure cookie\n+    system.\n+\n+    :copyright: (c) 2010 by Armin Ronacher.\n+    :license: BSD, see LICENSE for more details.\n+\"\"\"\n+\n from werkzeug.contrib.securecookie import SecureCookie\n \n \n\n@@ -1,3 +1,14 @@\n+# -*- coding: utf-8 -*-\n+\"\"\"\n+    flask.wrappers\n+    ~~~~~~~~~~~~~~\n+\n+    Implements the WSGI wrappers (request and response).\n+\n+    :copyright: (c) 2010 by Armin Ronacher.\n+    :license: BSD, see LICENSE for more details.\n+\"\"\"\n+\n from werkzeug import Request as RequestBase, Response as ResponseBase, \\\n     cached_property\n \n@@ -57,8 +68,3 @@ class Response(ResponseBase):\n     set :attr:`~flask.Flask.response_class` to your subclass.\n     \"\"\"\n     default_mimetype = 'text/html'\n-\n-\n-class _RequestGlobals(object):\n-    pass\n-\n\n@@ -58,7 +58,7 @@ setup(\n     description='A microframework based on Werkzeug, Jinja2 '\n                 'and good intentions',\n     long_description=__doc__,\n-    py_modules=['flask'],\n+    packages=['flask'],\n     zip_safe=False,\n     platforms='any',\n     install_requires=[\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#88d9315d1955ea4ee99f53e21593a0d1d9047ed0", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 110 | Contributors (this commit): 2 | Commits (past 90d): 5 | Contributors (cumulative): 2 | DMM Complexity: None\n\nDIFF:\n@@ -15,7 +15,7 @@\n from werkzeug import abort, redirect\n from jinja2 import Markup, escape\n \n-from flask.app import Flask\n+from flask.app import Flask, Request, Response\n from flask.config import Config\n from flask.helpers import url_for, jsonify, json_available, flash, send_file, \\\n     get_flashed_messages, render_template, render_template, render_template_string, \\\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#d0c6ad7d287e543fcc941aa2b42557e06b9dc142", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 33 | Lines Deleted: 4 | Files Changed: 2 | Hunks: 8 | Methods Changed: 3 | Complexity Δ (Sum/Max): 5/5 | Churn Δ: 37 | Churn Cumulative: 1245 | Contributors (this commit): 2 | Commits (past 90d): 10 | Contributors (cumulative): 4 | DMM Complexity: 0.0\n\nDIFF:\n@@ -328,7 +328,7 @@ class Flask(_PackageBoundObject):\n         return PackageLoader(self.import_name)\n \n     def init_jinja_globals(self):\n-        \"\"\"Callde directly after the environment was created to inject\n+        \"\"\"Called directly after the environment was created to inject\n         some defaults (like `url_for`, `get_flashed_messages` and the\n         `tojson` filter.\n \n\n@@ -12,6 +12,8 @@\n import os\n import sys\n import mimetypes\n+from time import time\n+from zlib import adler32\n \n # try to load the best simplejson implementation available.  If JSON\n # is not installed, we add a failing class.\n@@ -24,7 +26,7 @@ except ImportError:\n     except ImportError:\n         json_available = False\n \n-from werkzeug import Headers, wrap_file\n+from werkzeug import Headers, wrap_file, is_resource_modified\n \n from flask.globals import session, _request_ctx_stack, current_app, request\n from flask.wrappers import Response\n@@ -199,7 +201,8 @@ def get_flashed_messages(with_categories=False):\n \n \n def send_file(filename_or_fp, mimetype=None, as_attachment=False,\n-              attachment_filename=None):\n+              attachment_filename=None, add_etags=True,\n+              cache_timeout=60 * 60 * 12, conditional=False):\n     \"\"\"Sends the contents of a file to the client.  This will use the\n     most efficient method available and configured.  By default it will\n     try to use the WSGI server's file_wrapper support.  Alternatively\n@@ -220,6 +223,10 @@ def send_file(filename_or_fp, mimetype=None, as_attachment=False,\n \n     .. versionadded:: 0.2\n \n+    .. versionadded:: 0.5\n+       The `add_etags`, `cache_timeout` and `conditional` parameters were added.\n+       The default behaviour is now to attach etags.\n+\n     :param filename_or_fp: the filename of the file to send.  This is\n                            relative to the :attr:`~Flask.root_path` if a\n                            relative path is specified.\n@@ -232,6 +239,9 @@ def send_file(filename_or_fp, mimetype=None, as_attachment=False,\n                           a ``Content-Disposition: attachment`` header.\n     :param attachment_filename: the filename for the attachment if it\n                                 differs from the file's filename.\n+    :param add_etags: set to `False` to disable attaching of etags.\n+    :param conditional: set to `True` to enable conditional responses.\n+    :param cache_timeout: the timeout in seconds for the headers.\n     \"\"\"\n     if isinstance(filename_or_fp, basestring):\n         filename = filename_or_fp\n@@ -266,9 +276,28 @@ def send_file(filename_or_fp, mimetype=None, as_attachment=False,\n             file = open(filename, 'rb')\n         data = wrap_file(request.environ, file)\n \n-    return Response(data, mimetype=mimetype, headers=headers,\n+    rv = Response(data, mimetype=mimetype, headers=headers,\n                   direct_passthrough=True)\n \n+    rv.cache_control.public = True\n+    if cache_timeout:\n+        rv.cache_control.max_age = cache_timeout\n+        rv.expires = int(time() + cache_timeout)\n+\n+    if add_etags and filename is not None:\n+        rv.set_etag('flask-%s-%s-%s' % (\n+            os.path.getmtime(filename),\n+            os.path.getsize(filename),\n+            adler32(filename) & 0xffffffff\n+        ))\n+        if conditional:\n+            rv = rv.make_conditional(request)\n+            # make sure we don't send x-sendfile for servers that\n+            # ignore the 304 status code for x-sendfile.\n+            if rv.status_code == 304:\n+                rv.headers.pop('x-sendfile', None)\n+    return rv\n+\n \n def render_template(template_name, **context):\n     \"\"\"Renders a template from the template folder with the given\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#532347d6adf1da64259f1af91860d5fa27bac9f1", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 22 | Lines Deleted: 11 | Files Changed: 2 | Hunks: 7 | Methods Changed: 3 | Complexity Δ (Sum/Max): 3/2 | Churn Δ: 33 | Churn Cumulative: 1278 | Contributors (this commit): 2 | Commits (past 90d): 12 | Contributors (cumulative): 4 | DMM Complexity: 0.6666666666666666\n\nDIFF:\n@@ -9,17 +9,19 @@\n     :license: BSD, see LICENSE for more details.\n \"\"\"\n \n+import os\n+import posixpath\n from threading import Lock\n from datetime import timedelta, datetime\n from itertools import chain\n \n from jinja2 import Environment, PackageLoader, FileSystemLoader\n-from werkzeug import ImmutableDict, SharedDataMiddleware, create_environ\n+from werkzeug import ImmutableDict, create_environ\n from werkzeug.routing import Map, Rule\n-from werkzeug.exceptions import HTTPException, InternalServerError\n+from werkzeug.exceptions import HTTPException, InternalServerError, NotFound\n \n from flask.helpers import _PackageBoundObject, url_for, get_flashed_messages, \\\n-    _tojson_filter, get_pkg_resources\n+    _tojson_filter, get_pkg_resources, send_file\n from flask.wrappers import Request, Response\n from flask.config import ConfigAttribute, Config\n from flask.ctx import _default_template_ctx_processor, _RequestContext\n@@ -258,14 +260,8 @@ class Flask(_PackageBoundObject):\n \n         if self.static_path is not None:\n             self.add_url_rule(self.static_path + '/<filename>',\n-                              build_only=True, endpoint='static')\n-            if get_pkg_resources() is not None:\n-                target = (self.import_name, 'static')\n-            else:\n-                target = os.path.join(self.root_path, 'static')\n-            self.wsgi_app = SharedDataMiddleware(self.wsgi_app, {\n-                self.static_path: target\n-            })\n+                              endpoint='static',\n+                              view_func=self.send_static_file)\n \n         #: The Jinja2 environment.  It is created from the\n         #: :attr:`jinja_options` and the loader that is returned\n@@ -383,6 +379,20 @@ class Flask(_PackageBoundObject):\n         options.setdefault('use_debugger', self.debug)\n         return run_simple(host, port, self, **options)\n \n+    def send_static_file(self, filename):\n+        \"\"\"Function used internally to send static files from the static\n+        folder to the browser.\n+\n+        .. versionadded:: 0.5\n+        \"\"\"\n+        filename = posixpath.normpath(filename)\n+        if filename.startswith('../'):\n+            raise NotFound()\n+        filename = os.path.join(self.root_path, 'static', filename)\n+        if not os.path.isfile(filename):\n+            raise NotFound()\n+        return send_file(filename, conditional=True)\n+\n     def test_client(self):\n         \"\"\"Creates a test client for this application.  For information\n         about unit testing head over to :ref:`testing`.\n\n@@ -250,6 +250,7 @@ def send_file(filename_or_fp, mimetype=None, as_attachment=False,\n         file = filename_or_fp\n         filename = getattr(file, 'name', None)\n     if filename is not None:\n+        if not os.path.isabs(filename):\n             filename = os.path.join(current_app.root_path, filename)\n     if mimetype is None and (filename or attachment_filename):\n         mimetype = mimetypes.guess_type(filename or attachment_filename)[0]\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#fedc06c2950a4c9930082a014d0f8da6ee0193be", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 19 | Files Changed: 2 | Hunks: 6 | Methods Changed: 3 | Complexity Δ (Sum/Max): -4/0 | Churn Δ: 20 | Churn Cumulative: 1298 | Contributors (this commit): 2 | Commits (past 90d): 14 | Contributors (cumulative): 4 | DMM Complexity: 0.0\n\nDIFF:\n@@ -21,7 +21,7 @@ from werkzeug.routing import Map, Rule\n from werkzeug.exceptions import HTTPException, InternalServerError, NotFound\n \n from flask.helpers import _PackageBoundObject, url_for, get_flashed_messages, \\\n-    _tojson_filter, get_pkg_resources, send_file\n+    _tojson_filter, send_file\n from flask.wrappers import Request, Response\n from flask.config import ConfigAttribute, Config\n from flask.ctx import _default_template_ctx_processor, _RequestContext\n@@ -319,9 +319,7 @@ class Flask(_PackageBoundObject):\n         `templates` folder.  To add other loaders it's possible to\n         override this method.\n         \"\"\"\n-        if get_pkg_resources() is None:\n         return FileSystemLoader(os.path.join(self.root_path, 'templates'))\n-        return PackageLoader(self.import_name)\n \n     def init_jinja_globals(self):\n         \"\"\"Called directly after the environment was created to inject\n\n@@ -82,19 +82,6 @@ def jsonify(*args, **kwargs):\n         indent=None if request.is_xhr else 2), mimetype='application/json')\n \n \n-def get_pkg_resources():\n-    \"\"\"Use pkg_resource if that works, otherwise fall back to cwd.  The\n-    current working directory is generally not reliable with the notable\n-    exception of google appengine.\n-    \"\"\"\n-    try:\n-        import pkg_resources\n-        pkg_resources.resource_stream\n-    except (ImportError, AttributeError):\n-        return\n-    return pkg_resources\n-\n-\n def url_for(endpoint, **values):\n     \"\"\"Generates a URL to the given endpoint with the method provided.\n     The endpoint is relative to the active module if modules are in use.\n@@ -365,7 +352,4 @@ class _PackageBoundObject(object):\n         :param resource: the name of the resource.  To access resources within\n                          subfolders use forward slashes as separator.\n         \"\"\"\n-        pkg_resources = get_pkg_resources()\n-        if pkg_resources is None:\n         return open(os.path.join(self.root_path, resource), 'rb')\n-        return pkg_resources.resource_stream(self.import_name, resource)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#15012af70017962c2a22bc3fe670b9cc50782366", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 60 | Lines Deleted: 19 | Files Changed: 3 | Hunks: 12 | Methods Changed: 9 | Complexity Δ (Sum/Max): 8/6 | Churn Δ: 79 | Churn Cumulative: 1540 | Contributors (this commit): 2 | Commits (past 90d): 20 | Contributors (cumulative): 6 | DMM Complexity: 1.0\n\nDIFF:\n@@ -10,7 +10,6 @@\n \"\"\"\n \n import os\n-import posixpath\n from threading import Lock\n from datetime import timedelta, datetime\n from itertools import chain\n@@ -21,7 +20,7 @@ from werkzeug.routing import Map, Rule\n from werkzeug.exceptions import HTTPException, InternalServerError, NotFound\n \n from flask.helpers import _PackageBoundObject, url_for, get_flashed_messages, \\\n-    _tojson_filter, send_file\n+    _tojson_filter\n from flask.wrappers import Request, Response\n from flask.config import ConfigAttribute, Config\n from flask.ctx import _default_template_ctx_processor, _RequestContext\n@@ -101,6 +100,9 @@ class Flask(_PackageBoundObject):\n     #: Path for the static files.  If you don't want to use static files\n     #: you can set this value to `None` in which case no URL rule is added\n     #: and the development server will no longer serve any static files.\n+    #:\n+    #: This is the default used for application and modules unless a\n+    #: different value is passed to the constructor.\n     static_path = '/static'\n \n     #: The debug flag.  Set this to `True` to enable debugging of the\n@@ -190,8 +192,10 @@ class Flask(_PackageBoundObject):\n         'SERVER_NAME':                          None\n     })\n \n-    def __init__(self, import_name):\n+    def __init__(self, import_name, static_path=None):\n         _PackageBoundObject.__init__(self, import_name)\n+        if static_path is not None:\n+            self.static_path = static_path\n \n         #: The configuration dictionary as :class:`Config`.  This behaves\n         #: exactly like a regular dictionary but supports additional methods\n@@ -258,7 +262,8 @@ class Flask(_PackageBoundObject):\n         #:    app.url_map.converters['list'] = ListConverter\n         self.url_map = Map()\n \n-        if self.static_path is not None:\n+        # if there is a static folder, register it for the application.\n+        if self.has_static_folder:\n             self.add_url_rule(self.static_path + '/<filename>',\n                               endpoint='static',\n                               view_func=self.send_static_file)\n@@ -377,20 +382,6 @@ class Flask(_PackageBoundObject):\n         options.setdefault('use_debugger', self.debug)\n         return run_simple(host, port, self, **options)\n \n-    def send_static_file(self, filename):\n-        \"\"\"Function used internally to send static files from the static\n-        folder to the browser.\n-\n-        .. versionadded:: 0.5\n-        \"\"\"\n-        filename = posixpath.normpath(filename)\n-        if filename.startswith('../'):\n-            raise NotFound()\n-        filename = os.path.join(self.root_path, 'static', filename)\n-        if not os.path.isfile(filename):\n-            raise NotFound()\n-        return send_file(filename, conditional=True)\n-\n     def test_client(self):\n         \"\"\"Creates a test client for this application.  For information\n         about unit testing head over to :ref:`testing`.\n\n@@ -11,6 +11,7 @@\n \n import os\n import sys\n+import posixpath\n import mimetypes\n from time import time\n from zlib import adler32\n@@ -330,6 +331,29 @@ class _PackageBoundObject(object):\n         #: Where is the app root located?\n         self.root_path = _get_package_path(self.import_name)\n \n+    @property\n+    def has_static_folder(self):\n+        \"\"\"This is `True` if the package bound object's container has a\n+        folder named ``'static'``.\n+\n+        .. versionadded:: 0.5\n+        \"\"\"\n+        return os.path.isdir(os.path.join(self.root_path, 'static'))\n+\n+    def send_static_file(self, filename):\n+        \"\"\"Function used internally to send static files from the static\n+        folder to the browser.\n+\n+        .. versionadded:: 0.5\n+        \"\"\"\n+        filename = posixpath.normpath(filename)\n+        if filename.startswith('../'):\n+            raise NotFound()\n+        filename = os.path.join(self.root_path, 'static', filename)\n+        if not os.path.isfile(filename):\n+            raise NotFound()\n+        return send_file(filename, conditional=True)\n+\n     def open_resource(self, resource):\n         \"\"\"Opens a resource from the application's resource folder.  To see\n         how this works, consider the following folder structure::\n\n@@ -12,6 +12,27 @@\n from flask.helpers import _PackageBoundObject\n \n \n+def _register_module_static(module):\n+    \"\"\"Internal helper function that returns a function for recording\n+    that registers the `send_static_file` function for the module on\n+    the application of necessary.\n+    \"\"\"\n+    def _register_static(state):\n+        # do not register the rule if the static folder of the\n+        # module is the same as the one from the application.\n+        if state.app.root_path == module.root_path:\n+            return\n+        path = static_path\n+        if path is None:\n+            path = state.app.static_path\n+        if state.url_prefix:\n+            path = state.url_prefix + path\n+        state.app.add_url_rule(path + '/<filename>',\n+                               '%s.static' % module.name,\n+                               view_func=module.send_static_file)\n+    return _register_static\n+\n+\n class _ModuleSetupState(object):\n \n     def __init__(self, app, url_prefix=None):\n@@ -67,7 +88,8 @@ class Module(_PackageBoundObject):\n     :ref:`working-with-modules` section.\n     \"\"\"\n \n-    def __init__(self, import_name, name=None, url_prefix=None):\n+    def __init__(self, import_name, name=None, url_prefix=None,\n+                 static_path=None):\n         if name is None:\n             assert '.' in import_name, 'name required if package name ' \\\n                 'does not point to a submodule'\n@@ -77,6 +99,10 @@ class Module(_PackageBoundObject):\n         self.url_prefix = url_prefix\n         self._register_events = []\n \n+        # if there is a static folder, register it for this module\n+        if self.has_static_folder:\n+            self._record(_register_module_static(self))\n+\n     def route(self, rule, **options):\n         \"\"\"Like :meth:`Flask.route` but for a module.  The endpoint for the\n         :func:`url_for` function is prefixed with the name of the module.\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#a38dcd5e2bed1bcf2c1fc319fa9c3bc35e360fe0", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 72 | Lines Deleted: 30 | Files Changed: 3 | Hunks: 15 | Methods Changed: 14 | Complexity Δ (Sum/Max): 10/9 | Churn Δ: 102 | Churn Cumulative: 1642 | Contributors (this commit): 2 | Commits (past 90d): 23 | Contributors (cumulative): 6 | DMM Complexity: 1.0\n\nDIFF:\n@@ -14,7 +14,7 @@ from threading import Lock\n from datetime import timedelta, datetime\n from itertools import chain\n \n-from jinja2 import Environment, PackageLoader, FileSystemLoader\n+from jinja2 import Environment, BaseLoader, FileSystemLoader, TemplateNotFound\n from werkzeug import ImmutableDict, create_environ\n from werkzeug.routing import Map, Rule\n from werkzeug.exceptions import HTTPException, InternalServerError, NotFound\n@@ -32,13 +32,38 @@ from flask.module import _ModuleSetupState\n _logger_lock = Lock()\n \n \n-def _select_autoescape(filename):\n-    \"\"\"Returns `True` if autoescaping should be active for the given\n-    template name.\n+class _DispatchingJinjaLoader(BaseLoader):\n+    \"\"\"A loader that looks for templates in the application and all\n+    the module folders.\n     \"\"\"\n-    if filename is None:\n-        return False\n-    return filename.endswith(('.html', '.htm', '.xml', '.xhtml'))\n+\n+    def __init__(self, app):\n+        self.app = app\n+\n+    def get_source(self, environment, template):\n+        name = template\n+        loader = None\n+        try:\n+            module, name = template.split('/', 1)\n+            loader = self.app.modules[module].jinja_loader\n+        except (ValueError, KeyError):\n+            pass\n+        if loader is None:\n+            loader = self.app.jinja_loader\n+        try:\n+            return loader.get_source(environment, name)\n+        except TemplateNotFound:\n+            # re-raise the exception with the correct fileame here.\n+            # (the one that includes the prefix)\n+            raise TemplateNotFound(template)\n+\n+    def list_templates(self):\n+        result = self.app.jinja_loader.list_templates()\n+        for name, module in self.app.modules.iteritems():\n+            if module.jinja_loader is not None:\n+                for template in module.jinja_loader.list_templates():\n+                    result.append('%s/%s' % (name, template))\n+        return result\n \n \n class Flask(_PackageBoundObject):\n@@ -176,7 +201,6 @@ class Flask(_PackageBoundObject):\n \n     #: Options that are passed directly to the Jinja2 environment.\n     jinja_options = ImmutableDict(\n-        autoescape=_select_autoescape,\n         extensions=['jinja2.ext.autoescape', 'jinja2.ext.with_']\n     )\n \n@@ -245,6 +269,11 @@ class Flask(_PackageBoundObject):\n             None: [_default_template_ctx_processor]\n         }\n \n+        #: all the loaded modules in a dictionary by name.\n+        #:\n+        #: .. versionadded:: 0.5\n+        self.modules = {}\n+\n         #: The :class:`~werkzeug.routing.Map` for this instance.  You can use\n         #: this to change the routing converters after the class was created\n         #: but before any routes are connected.  Example::\n@@ -269,8 +298,7 @@ class Flask(_PackageBoundObject):\n                               view_func=self.send_static_file)\n \n         #: The Jinja2 environment.  It is created from the\n-        #: :attr:`jinja_options` and the loader that is returned\n-        #: by the :meth:`create_jinja_loader` function.\n+        #: :attr:`jinja_options`.\n         self.jinja_env = self.create_jinja_environment()\n         self.init_jinja_globals()\n \n@@ -315,16 +343,10 @@ class Flask(_PackageBoundObject):\n \n         .. versionadded:: 0.5\n         \"\"\"\n-        return Environment(loader=self.create_jinja_loader(),\n-                           **self.jinja_options)\n-\n-    def create_jinja_loader(self):\n-        \"\"\"Creates the Jinja loader.  By default just a package loader for\n-        the configured package is returned that looks up templates in the\n-        `templates` folder.  To add other loaders it's possible to\n-        override this method.\n-        \"\"\"\n-        return FileSystemLoader(os.path.join(self.root_path, 'templates'))\n+        options = dict(self.jinja_options)\n+        if 'autoescape' not in options:\n+            options['autoescape'] = self.select_jinja_autoescape\n+        return Environment(loader=_DispatchingJinjaLoader(self), **options)\n \n     def init_jinja_globals(self):\n         \"\"\"Called directly after the environment was created to inject\n@@ -339,6 +361,16 @@ class Flask(_PackageBoundObject):\n         )\n         self.jinja_env.filters['tojson'] = _tojson_filter\n \n+    def select_jinja_autoescape(self, filename):\n+        \"\"\"Returns `True` if autoescaping should be active for the given\n+        template name.\n+\n+        .. versionadded:: 0.5\n+        \"\"\"\n+        if filename is None:\n+            return False\n+        return filename.endswith(('.html', '.htm', '.xml', '.xhtml'))\n+\n     def update_template_context(self, context):\n         \"\"\"Update the template context with some commonly used variables.\n         This injects request, session and g into the template context.\n\n@@ -27,7 +27,9 @@ except ImportError:\n     except ImportError:\n         json_available = False\n \n-from werkzeug import Headers, wrap_file, is_resource_modified\n+from werkzeug import Headers, wrap_file, is_resource_modified, cached_property\n+\n+from jinja2 import FileSystemLoader\n \n from flask.globals import session, _request_ctx_stack, current_app, request\n from flask.wrappers import Response\n@@ -340,6 +342,16 @@ class _PackageBoundObject(object):\n         \"\"\"\n         return os.path.isdir(os.path.join(self.root_path, 'static'))\n \n+    @cached_property\n+    def jinja_loader(self):\n+        \"\"\"The Jinja loader for this package bound object.\n+\n+        .. versionadded:: 0.5\n+        \"\"\"\n+        template_folder = os.path.join(self.root_path, 'templates')\n+        if os.path.isdir(template_folder):\n+            return FileSystemLoader(template_folder)\n+\n     def send_static_file(self, filename):\n         \"\"\"Function used internally to send static files from the static\n         folder to the browser.\n\n@@ -12,12 +12,14 @@\n from flask.helpers import _PackageBoundObject\n \n \n-def _register_module_static(module):\n+def _register_module(module):\n     \"\"\"Internal helper function that returns a function for recording\n     that registers the `send_static_file` function for the module on\n-    the application of necessary.\n+    the application of necessary.  It also registers the module on\n+    the application.\n     \"\"\"\n-    def _register_static(state):\n+    def _register(state):\n+        state.app.modules[module.name] = module\n         # do not register the rule if the static folder of the\n         # module is the same as the one from the application.\n         if state.app.root_path == module.root_path:\n@@ -30,7 +32,7 @@ def _register_module_static(module):\n         state.app.add_url_rule(path + '/<filename>',\n                                '%s.static' % module.name,\n                                view_func=module.send_static_file)\n-    return _register_static\n+    return _register\n \n \n class _ModuleSetupState(object):\n@@ -97,11 +99,7 @@ class Module(_PackageBoundObject):\n         _PackageBoundObject.__init__(self, import_name)\n         self.name = name\n         self.url_prefix = url_prefix\n-        self._register_events = []\n-\n-        # if there is a static folder, register it for this module\n-        if self.has_static_folder:\n-            self._record(_register_module_static(self))\n+        self._register_events = [_register_module(self)]\n \n     def route(self, rule, **options):\n         \"\"\"Like :meth:`Flask.route` but for a module.  The endpoint for the\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
