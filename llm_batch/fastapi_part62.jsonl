{"custom_id": "fastapi#148bcf5ce4c0fb58e8d9431291d1d6e004a4afe6", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 397 | Contributors (this commit): 2 | Commits (past 90d): 6 | Contributors (cumulative): 2 | DMM Complexity: None\n\nDIFF:\n@@ -1,6 +1,6 @@\n \"\"\"FastAPI framework, high performance, easy to learn, fast to code, ready for production\"\"\"\n \n-__version__ = \"0.89.1\"\n+__version__ = \"0.90.0\"\n \n from starlette import status as status\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#99deead7fcd536c2b7bd1521caf73cda664faf2d", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 85 | Contributors (this commit): 3 | Commits (past 90d): 1 | Contributors (cumulative): 3 | DMM Complexity: None\n\nDIFF:\n@@ -54,7 +54,7 @@ def test_openapi_schema():\n     response = client.get(\"/openapi.json\")\n     assert response.status_code == 200\n     # TODO: remove this once Pydantic 1.9 is released\n-    # Ref: https://github.com/samuelcolvin/pydantic/pull/2557\n+    # Ref: https://github.com/pydantic/pydantic/pull/2557\n     data = response.json()\n     alternative_data1 = deepcopy(data)\n     alternative_data2 = deepcopy(data)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#6e94ec2bf089740a2cc1a71883ef24e0e8029c4a", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 399 | Contributors (this commit): 2 | Commits (past 90d): 7 | Contributors (cumulative): 2 | DMM Complexity: None\n\nDIFF:\n@@ -1,6 +1,6 @@\n \"\"\"FastAPI framework, high performance, easy to learn, fast to code, ready for production\"\"\"\n \n-__version__ = \"0.90.0\"\n+__version__ = \"0.90.1\"\n \n from starlette import status as status\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#d566c6cbca227afef0edd0028cdb49894b972357", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 3105 | Contributors (this commit): 26 | Commits (past 90d): 3 | Contributors (cumulative): 26 | DMM Complexity: None\n\nDIFF:\n@@ -87,7 +87,7 @@ class FastAPI(Starlette):\n         ),\n         **extra: Any,\n     ) -> None:\n-        self._debug: bool = debug\n+        self.debug = debug\n         self.title = title\n         self.description = description\n         self.version = version\n@@ -144,7 +144,7 @@ class FastAPI(Starlette):\n         self.user_middleware: List[Middleware] = (\n             [] if middleware is None else list(middleware)\n         )\n-        self.middleware_stack: ASGIApp = self.build_middleware_stack()\n+        self.middleware_stack: Union[ASGIApp, None] = None\n         self.setup()\n \n     def build_middleware_stack(self) -> ASGIApp:\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#2ca77f9a4de14de08ed6615ad0bb783a078678f2", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 401 | Contributors (this commit): 2 | Commits (past 90d): 8 | Contributors (cumulative): 2 | DMM Complexity: None\n\nDIFF:\n@@ -1,6 +1,6 @@\n \"\"\"FastAPI framework, high performance, easy to learn, fast to code, ready for production\"\"\"\n \n-__version__ = \"0.90.1\"\n+__version__ = \"0.91.0\"\n \n from starlette import status as status\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#6879082b3668edd213d035b6e9a90a4bccf32e01", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 403 | Contributors (this commit): 2 | Commits (past 90d): 7 | Contributors (cumulative): 2 | DMM Complexity: None\n\nDIFF:\n@@ -1,6 +1,6 @@\n \"\"\"FastAPI framework, high performance, easy to learn, fast to code, ready for production\"\"\"\n \n-__version__ = \"0.91.0\"\n+__version__ = \"0.92.0\"\n \n from starlette import status as status\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#35d93d59d82f2b2073d492ac335553f1d7c3cc55", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 14 | Lines Deleted: 10 | Files Changed: 1 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 24 | Churn Cumulative: 860 | Contributors (this commit): 2 | Commits (past 90d): 2 | Contributors (cumulative): 2 | DMM Complexity: 0.0\n\nDIFF:\n@@ -496,21 +496,25 @@ def get_discussions_experts(settings: Settings):\n \n \n def get_experts(settings: Settings):\n-    (\n-        issues_commentors,\n-        issues_last_month_commentors,\n-        issues_authors,\n-    ) = get_issues_experts(settings=settings)\n+    # Migrated to only use GitHub Discussions\n+    # (\n+    #     issues_commentors,\n+    #     issues_last_month_commentors,\n+    #     issues_authors,\n+    # ) = get_issues_experts(settings=settings)\n     (\n         discussions_commentors,\n         discussions_last_month_commentors,\n         discussions_authors,\n     ) = get_discussions_experts(settings=settings)\n-    commentors = issues_commentors + discussions_commentors\n-    last_month_commentors = (\n-        issues_last_month_commentors + discussions_last_month_commentors\n-    )\n-    authors = {**issues_authors, **discussions_authors}\n+    # commentors = issues_commentors + discussions_commentors\n+    commentors = discussions_commentors\n+    # last_month_commentors = (\n+    #     issues_last_month_commentors + discussions_last_month_commentors\n+    # )\n+    last_month_commentors = discussions_last_month_commentors\n+    # authors = {**issues_authors, **discussions_authors}\n+    authors = {**discussions_authors}\n     return commentors, last_month_commentors, authors\n \n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#e9326de1619ecff41fe15b4e84714168ea68aaa7", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 4 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 4 | Churn Cumulative: 864 | Contributors (this commit): 2 | Commits (past 90d): 3 | Contributors (cumulative): 2 | DMM Complexity: 1.0\n\nDIFF:\n@@ -381,6 +381,10 @@ def get_graphql_response(\n         logging.error(response.text)\n         raise RuntimeError(response.text)\n     data = response.json()\n+    if \"errors\" in data:\n+        logging.error(f\"Errors in response, after: {after}, category_id: {category_id}\")\n+        logging.error(response.text)\n+        raise RuntimeError(response.text)\n     return data\n \n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#bd219c2bbf2b48f97b42cd0a13c2da8230e52c9b", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 351 | Lines Deleted: 38 | Files Changed: 1 | Hunks: 21 | Methods Changed: 6 | Complexity Δ (Sum/Max): 10/10 | Churn Δ: 389 | Churn Cumulative: 513 | Contributors (this commit): 1 | Commits (past 90d): 1 | Contributors (cumulative): 1 | DMM Complexity: 1.0\n\nDIFF:\n@@ -1,10 +1,11 @@\n import logging\n import random\n+import sys\n import time\n from pathlib import Path\n-from typing import Dict, Union\n+from typing import Any, Dict, List, Union, cast\n \n-import yaml\n+import httpx\n from github import Github\n from pydantic import BaseModel, BaseSettings, SecretStr\n \n@@ -13,12 +14,172 @@ lang_all_label = \"lang-all\"\n approved_label = \"approved-2\"\n translations_path = Path(__file__).parent / \"translations.yml\"\n \n+github_graphql_url = \"https://api.github.com/graphql\"\n+questions_translations_category_id = \"DIC_kwDOCZduT84CT5P9\"\n+\n+all_discussions_query = \"\"\"\n+query Q($category_id: ID) {\n+  repository(name: \"fastapi\", owner: \"tiangolo\") {\n+    discussions(categoryId: $category_id, first: 100) {\n+      nodes {\n+        title\n+        id\n+        number\n+        labels(first: 10) {\n+          edges {\n+            node {\n+              id\n+              name\n+            }\n+          }\n+        }\n+      }\n+    }\n+  }\n+}\n+\"\"\"\n+\n+translation_discussion_query = \"\"\"\n+query Q($after: String, $discussion_number: Int!) {\n+  repository(name: \"fastapi\", owner: \"tiangolo\") {\n+    discussion(number: $discussion_number) {\n+      comments(first: 100, after: $after) {\n+        edges {\n+          cursor\n+          node {\n+            id\n+            url\n+            body\n+          }\n+        }\n+      }\n+    }\n+  }\n+}\n+\"\"\"\n+\n+add_comment_mutation = \"\"\"\n+mutation Q($discussion_id: ID!, $body: String!) {\n+  addDiscussionComment(input: {discussionId: $discussion_id, body: $body}) {\n+    comment {\n+      id\n+      url\n+      body\n+    }\n+  }\n+}\n+\"\"\"\n+\n+update_comment_mutation = \"\"\"\n+mutation Q($comment_id: ID!, $body: String!) {\n+  updateDiscussionComment(input: {commentId: $comment_id, body: $body}) {\n+    comment {\n+      id\n+      url\n+      body\n+    }\n+  }\n+}\n+\"\"\"\n+\n+\n+class Comment(BaseModel):\n+    id: str\n+    url: str\n+    body: str\n+\n+\n+class UpdateDiscussionComment(BaseModel):\n+    comment: Comment\n+\n+\n+class UpdateCommentData(BaseModel):\n+    updateDiscussionComment: UpdateDiscussionComment\n+\n+\n+class UpdateCommentResponse(BaseModel):\n+    data: UpdateCommentData\n+\n+\n+class AddDiscussionComment(BaseModel):\n+    comment: Comment\n+\n+\n+class AddCommentData(BaseModel):\n+    addDiscussionComment: AddDiscussionComment\n+\n+\n+class AddCommentResponse(BaseModel):\n+    data: AddCommentData\n+\n+\n+class CommentsEdge(BaseModel):\n+    node: Comment\n+    cursor: str\n+\n+\n+class Comments(BaseModel):\n+    edges: List[CommentsEdge]\n+\n+\n+class CommentsDiscussion(BaseModel):\n+    comments: Comments\n+\n+\n+class CommentsRepository(BaseModel):\n+    discussion: CommentsDiscussion\n+\n+\n+class CommentsData(BaseModel):\n+    repository: CommentsRepository\n+\n+\n+class CommentsResponse(BaseModel):\n+    data: CommentsData\n+\n+\n+class AllDiscussionsLabelNode(BaseModel):\n+    id: str\n+    name: str\n+\n+\n+class AllDiscussionsLabelsEdge(BaseModel):\n+    node: AllDiscussionsLabelNode\n+\n+\n+class AllDiscussionsDiscussionLabels(BaseModel):\n+    edges: List[AllDiscussionsLabelsEdge]\n+\n+\n+class AllDiscussionsDiscussionNode(BaseModel):\n+    title: str\n+    id: str\n+    number: int\n+    labels: AllDiscussionsDiscussionLabels\n+\n+\n+class AllDiscussionsDiscussions(BaseModel):\n+    nodes: List[AllDiscussionsDiscussionNode]\n+\n+\n+class AllDiscussionsRepository(BaseModel):\n+    discussions: AllDiscussionsDiscussions\n+\n+\n+class AllDiscussionsData(BaseModel):\n+    repository: AllDiscussionsRepository\n+\n+\n+class AllDiscussionsResponse(BaseModel):\n+    data: AllDiscussionsData\n+\n \n class Settings(BaseSettings):\n     github_repository: str\n     input_token: SecretStr\n     github_event_path: Path\n     github_event_name: Union[str, None] = None\n+    httpx_timeout: int = 30\n     input_debug: Union[bool, None] = False\n \n \n@@ -30,6 +191,113 @@ class PartialGitHubEvent(BaseModel):\n     pull_request: PartialGitHubEventIssue\n \n \n+def get_graphql_response(\n+    *,\n+    settings: Settings,\n+    query: str,\n+    after: Union[str, None] = None,\n+    category_id: Union[str, None] = None,\n+    discussion_number: Union[int, None] = None,\n+    discussion_id: Union[str, None] = None,\n+    comment_id: Union[str, None] = None,\n+    body: Union[str, None] = None,\n+) -> Dict[str, Any]:\n+    headers = {\"Authorization\": f\"token {settings.input_token.get_secret_value()}\"}\n+    # some fields are only used by one query, but GraphQL allows unused variables, so\n+    # keep them here for simplicity\n+    variables = {\n+        \"after\": after,\n+        \"category_id\": category_id,\n+        \"discussion_number\": discussion_number,\n+        \"discussion_id\": discussion_id,\n+        \"comment_id\": comment_id,\n+        \"body\": body,\n+    }\n+    response = httpx.post(\n+        github_graphql_url,\n+        headers=headers,\n+        timeout=settings.httpx_timeout,\n+        json={\"query\": query, \"variables\": variables, \"operationName\": \"Q\"},\n+    )\n+    if response.status_code != 200:\n+        logging.error(\n+            f\"Response was not 200, after: {after}, category_id: {category_id}\"\n+        )\n+        logging.error(response.text)\n+        raise RuntimeError(response.text)\n+    data = response.json()\n+    if \"errors\" in data:\n+        logging.error(f\"Errors in response, after: {after}, category_id: {category_id}\")\n+        logging.error(response.text)\n+        raise RuntimeError(response.text)\n+    return cast(Dict[str, Any], data)\n+\n+\n+def get_graphql_translation_discussions(*, settings: Settings):\n+    data = get_graphql_response(\n+        settings=settings,\n+        query=all_discussions_query,\n+        category_id=questions_translations_category_id,\n+    )\n+    graphql_response = AllDiscussionsResponse.parse_obj(data)\n+    return graphql_response.data.repository.discussions.nodes\n+\n+\n+def get_graphql_translation_discussion_comments_edges(\n+    *, settings: Settings, discussion_number: int, after: Union[str, None] = None\n+):\n+    data = get_graphql_response(\n+        settings=settings,\n+        query=translation_discussion_query,\n+        discussion_number=discussion_number,\n+        after=after,\n+    )\n+    graphql_response = CommentsResponse.parse_obj(data)\n+    return graphql_response.data.repository.discussion.comments.edges\n+\n+\n+def get_graphql_translation_discussion_comments(\n+    *, settings: Settings, discussion_number: int\n+):\n+    comment_nodes: List[Comment] = []\n+    discussion_edges = get_graphql_translation_discussion_comments_edges(\n+        settings=settings, discussion_number=discussion_number\n+    )\n+\n+    while discussion_edges:\n+        for discussion_edge in discussion_edges:\n+            comment_nodes.append(discussion_edge.node)\n+        last_edge = discussion_edges[-1]\n+        discussion_edges = get_graphql_translation_discussion_comments_edges(\n+            settings=settings,\n+            discussion_number=discussion_number,\n+            after=last_edge.cursor,\n+        )\n+    return comment_nodes\n+\n+\n+def create_comment(*, settings: Settings, discussion_id: str, body: str):\n+    data = get_graphql_response(\n+        settings=settings,\n+        query=add_comment_mutation,\n+        discussion_id=discussion_id,\n+        body=body,\n+    )\n+    response = AddCommentResponse.parse_obj(data)\n+    return response.data.addDiscussionComment.comment\n+\n+\n+def update_comment(*, settings: Settings, comment_id: str, body: str):\n+    data = get_graphql_response(\n+        settings=settings,\n+        query=update_comment_mutation,\n+        comment_id=comment_id,\n+        body=body,\n+    )\n+    response = UpdateCommentResponse.parse_obj(data)\n+    return response.data.updateDiscussionComment.comment\n+\n+\n if __name__ == \"__main__\":\n     settings = Settings()\n     if settings.input_debug:\n@@ -45,60 +313,105 @@ if __name__ == \"__main__\":\n         )\n     contents = settings.github_event_path.read_text()\n     github_event = PartialGitHubEvent.parse_raw(contents)\n-    translations_map: Dict[str, int] = yaml.safe_load(translations_path.read_text())\n-    logging.debug(f\"Using translations map: {translations_map}\")\n+\n+    # Avoid race conditions with multiple labels\n     sleep_time = random.random() * 10  # random number between 0 and 10 seconds\n-    pr = repo.get_pull(github_event.pull_request.number)\n-    logging.debug(\n-        f\"Processing PR: {pr.number}, with anti-race condition sleep time: {sleep_time}\"\n-    )\n-    if pr.state == \"open\":\n-        logging.debug(f\"PR is open: {pr.number}\")\n-        label_strs = {label.name for label in pr.get_labels()}\n-        if lang_all_label in label_strs and awaiting_label in label_strs:\n     logging.info(\n-                f\"This PR seems to be a language translation and awaiting reviews: {pr.number}\"\n+        f\"Sleeping for {sleep_time} seconds to avoid \"\n+        \"race conditions and multiple comments\"\n     )\n-            if approved_label in label_strs:\n-                message = (\n-                    f\"It seems this PR already has the approved label: {pr.number}\"\n-                )\n-                logging.error(message)\n-                raise RuntimeError(message)\n+    time.sleep(sleep_time)\n+\n+    # Get PR\n+    logging.debug(f\"Processing PR: #{github_event.pull_request.number}\")\n+    pr = repo.get_pull(github_event.pull_request.number)\n+    label_strs = {label.name for label in pr.get_labels()}\n     langs = []\n     for label in label_strs:\n         if label.startswith(\"lang-\") and not label == lang_all_label:\n             langs.append(label[5:])\n+    logging.info(f\"PR #{pr.number} has labels: {label_strs}\")\n+    if not langs or lang_all_label not in label_strs:\n+        logging.info(f\"PR #{pr.number} doesn't seem to be a translation PR, skipping\")\n+        sys.exit(0)\n+\n+    # Generate translation map, lang ID to discussion\n+    discussions = get_graphql_translation_discussions(settings=settings)\n+    lang_to_discussion_map: Dict[str, AllDiscussionsDiscussionNode] = {}\n+    for discussion in discussions:\n+        for edge in discussion.labels.edges:\n+            label = edge.node.name\n+            if label.startswith(\"lang-\") and not label == lang_all_label:\n+                lang = label[5:]\n+                lang_to_discussion_map[lang] = discussion\n+    logging.debug(f\"Using translations map: {lang_to_discussion_map}\")\n+\n+    # Messages to create or check\n+    new_translation_message = f\"Good news everyone! 😉 There's a new translation PR to be reviewed: #{pr.number} by @{pr.user.login} 🎉\"\n+    done_translation_message = f\"Good news everyone! 😉 ~There's a new translation PR to be reviewed: #{pr.number} by @{pr.user.login}~ 🎉 Good job! This is done. 🍰\"\n+\n+    # Normally only one language, but still\n     for lang in langs:\n-                if lang in translations_map:\n-                    num = translations_map[lang]\n+        if lang not in lang_to_discussion_map:\n+            log_message = f\"Could not find discussion for language: {lang}\"\n+            logging.error(log_message)\n+            raise RuntimeError(log_message)\n+        discussion = lang_to_discussion_map[lang]\n         logging.info(\n-                        f\"Found a translation issue for language: {lang} in issue: {num}\"\n+            f\"Found a translation discussion for language: {lang} in discussion: #{discussion.number}\"\n         )\n-                    issue = repo.get_issue(num)\n-                    message = f\"Good news everyone! 😉 There's a new translation PR to be reviewed: #{pr.number} 🎉\"\n-                    already_notified = False\n-                    time.sleep(sleep_time)\n+\n+        already_notified_comment: Union[Comment, None] = None\n+        already_done_comment: Union[Comment, None] = None\n+\n         logging.info(\n-                        f\"Sleeping for {sleep_time} seconds to avoid race conditions and multiple comments\"\n+            f\"Checking current comments in discussion: #{discussion.number} to see if already notified about this PR: #{pr.number}\"\n         )\n-                    logging.info(\n-                        f\"Checking current comments in issue: {num} to see if already notified about this PR: {pr.number}\"\n+        comments = get_graphql_translation_discussion_comments(\n+            settings=settings, discussion_number=discussion.number\n         )\n-                    for comment in issue.get_comments():\n-                        if message in comment.body:\n-                            already_notified = True\n-                    if not already_notified:\n+        for comment in comments:\n+            if new_translation_message in comment.body:\n+                already_notified_comment = comment\n+            elif done_translation_message in comment.body:\n+                already_done_comment = comment\n         logging.info(\n-                            f\"Writing comment in issue: {num} about PR: {pr.number}\"\n+            f\"Already notified comment: {already_notified_comment}, already done comment: {already_done_comment}\"\n         )\n-                        issue.create_comment(message)\n-                    else:\n+\n+        if pr.state == \"open\" and awaiting_label in label_strs:\n             logging.info(\n-                            f\"Issue: {num} was already notified of PR: {pr.number}\"\n+                f\"This PR seems to be a language translation and awaiting reviews: #{pr.number}\"\n+            )\n+            if already_notified_comment:\n+                logging.info(\n+                    f\"This PR #{pr.number} was already notified in comment: {already_notified_comment.url}\"\n                 )\n             else:\n                 logging.info(\n-            f\"Changing labels in a closed PR doesn't trigger comments, PR: {pr.number}\"\n+                    f\"Writing notification comment about PR #{pr.number} in Discussion: #{discussion.number}\"\n+                )\n+                comment = create_comment(\n+                    settings=settings,\n+                    discussion_id=discussion.id,\n+                    body=new_translation_message,\n+                )\n+                logging.info(f\"Notified in comment: {comment.url}\")\n+        elif pr.state == \"closed\" or approved_label in label_strs:\n+            logging.info(f\"Already approved or closed PR #{pr.number}\")\n+            if already_done_comment:\n+                logging.info(\n+                    f\"This PR #{pr.number} was already marked as done in comment: {already_done_comment.url}\"\n+                )\n+            elif already_notified_comment:\n+                updated_comment = update_comment(\n+                    settings=settings,\n+                    comment_id=already_notified_comment.id,\n+                    body=done_translation_message,\n+                )\n+                logging.info(f\"Marked as done in comment: {updated_comment.url}\")\n+        else:\n+            logging.info(\n+                f\"There doesn't seem to be anything to be done about PR #{pr.number}\"\n             )\n     logging.info(\"Finished\")\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#c5f343a4fd87719276962f41b7910bbb04a571cf", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 517 | Contributors (this commit): 1 | Commits (past 90d): 2 | Contributors (cumulative): 1 | DMM Complexity: None\n\nDIFF:\n@@ -347,8 +347,8 @@ if __name__ == \"__main__\":\n     logging.debug(f\"Using translations map: {lang_to_discussion_map}\")\n \n     # Messages to create or check\n-    new_translation_message = f\"Good news everyone! 😉 There's a new translation PR to be reviewed: #{pr.number} by @{pr.user.login} 🎉\"\n-    done_translation_message = f\"Good news everyone! 😉 ~There's a new translation PR to be reviewed: #{pr.number} by @{pr.user.login}~ 🎉 Good job! This is done. 🍰\"\n+    new_translation_message = f\"Good news everyone! 😉 There's a new translation PR to be reviewed: #{pr.number} by @{pr.user.login}. 🎉 This requires 2 approvals from native speakers to be merged. 🤓\"\n+    done_translation_message = f\"~There's a new translation PR to be reviewed: #{pr.number} by @{pr.user.login}~ Good job! This is done. 🍰☕\"\n \n     # Normally only one language, but still\n     for lang in langs:\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#cc9a73c3f83fab4f1d9fcb19dfe5b562869d932c", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 163 | Lines Deleted: 22 | Files Changed: 5 | Hunks: 28 | Methods Changed: 26 | Complexity Δ (Sum/Max): 8/4 | Churn Δ: 185 | Churn Cumulative: 8099 | Contributors (this commit): 49 | Commits (past 90d): 11 | Contributors (cumulative): 68 | DMM Complexity: 0.9402985074626866\n\nDIFF:\n@@ -0,0 +1,28 @@\n+from contextlib import asynccontextmanager\n+\n+from fastapi import FastAPI\n+\n+\n+def fake_answer_to_everything_ml_model(x: float):\n+    return x * 42\n+\n+\n+ml_models = {}\n+\n+\n+@asynccontextmanager\n+async def lifespan(app: FastAPI):\n+    # Load the ML model\n+    ml_models[\"answer_to_everything\"] = fake_answer_to_everything_ml_model\n+    yield\n+    # Clean up the ML models and release the resources\n+    ml_models.clear()\n+\n+\n+app = FastAPI(lifespan=lifespan)\n+\n+\n+@app.get(\"/predict\")\n+async def predict(x: float):\n+    result = ml_models[\"answer_to_everything\"](x)\n+    return {\"result\": result}\n\n@@ -1,6 +1,7 @@\n from enum import Enum\n from typing import (\n     Any,\n+    AsyncContextManager,\n     Awaitable,\n     Callable,\n     Coroutine,\n@@ -71,6 +72,7 @@ class FastAPI(Starlette):\n         ] = None,\n         on_startup: Optional[Sequence[Callable[[], Any]]] = None,\n         on_shutdown: Optional[Sequence[Callable[[], Any]]] = None,\n+        lifespan: Optional[Callable[[\"FastAPI\"], AsyncContextManager[Any]]] = None,\n         terms_of_service: Optional[str] = None,\n         contact: Optional[Dict[str, Union[str, Any]]] = None,\n         license_info: Optional[Dict[str, Union[str, Any]]] = None,\n@@ -125,6 +127,7 @@ class FastAPI(Starlette):\n             dependency_overrides_provider=self,\n             on_startup=on_startup,\n             on_shutdown=on_shutdown,\n+            lifespan=lifespan,\n             default_response_class=default_response_class,\n             dependencies=dependencies,\n             callbacks=callbacks,\n\n@@ -7,6 +7,7 @@ from contextlib import AsyncExitStack\n from enum import Enum, IntEnum\n from typing import (\n     Any,\n+    AsyncContextManager,\n     Callable,\n     Coroutine,\n     Dict,\n@@ -492,6 +493,7 @@ class APIRouter(routing.Router):\n         route_class: Type[APIRoute] = APIRoute,\n         on_startup: Optional[Sequence[Callable[[], Any]]] = None,\n         on_shutdown: Optional[Sequence[Callable[[], Any]]] = None,\n+        lifespan: Optional[Callable[[Any], AsyncContextManager[Any]]] = None,\n         deprecated: Optional[bool] = None,\n         include_in_schema: bool = True,\n         generate_unique_id_function: Callable[[APIRoute], str] = Default(\n@@ -504,6 +506,7 @@ class APIRouter(routing.Router):\n             default=default,\n             on_startup=on_startup,\n             on_shutdown=on_shutdown,\n+            lifespan=lifespan,\n         )\n         if prefix:\n             assert prefix.startswith(\"/\"), \"A path prefix must start with '/'\"\n\n@@ -1,3 +1,7 @@\n+from contextlib import asynccontextmanager\n+from typing import AsyncGenerator, Dict\n+\n+import pytest\n from fastapi import APIRouter, FastAPI\n from fastapi.testclient import TestClient\n from pydantic import BaseModel\n@@ -12,57 +16,49 @@ class State(BaseModel):\n     sub_router_shutdown: bool = False\n \n \n-state = State()\n+@pytest.fixture\n+def state() -> State:\n+    return State()\n \n+\n+def test_router_events(state: State) -> None:\n     app = FastAPI()\n \n+    @app.get(\"/\")\n+    def main() -> Dict[str, str]:\n+        return {\"message\": \"Hello World\"}\n \n     @app.on_event(\"startup\")\n-def app_startup():\n+    def app_startup() -> None:\n         state.app_startup = True\n \n-\n     @app.on_event(\"shutdown\")\n-def app_shutdown():\n+    def app_shutdown() -> None:\n         state.app_shutdown = True\n \n-\n     router = APIRouter()\n \n-\n     @router.on_event(\"startup\")\n-def router_startup():\n+    def router_startup() -> None:\n         state.router_startup = True\n \n-\n     @router.on_event(\"shutdown\")\n-def router_shutdown():\n+    def router_shutdown() -> None:\n         state.router_shutdown = True\n \n-\n     sub_router = APIRouter()\n \n-\n     @sub_router.on_event(\"startup\")\n-def sub_router_startup():\n+    def sub_router_startup() -> None:\n         state.sub_router_startup = True\n \n-\n     @sub_router.on_event(\"shutdown\")\n-def sub_router_shutdown():\n+    def sub_router_shutdown() -> None:\n         state.sub_router_shutdown = True\n \n-\n-@sub_router.get(\"/\")\n-def main():\n-    return {\"message\": \"Hello World\"}\n-\n-\n     router.include_router(sub_router)\n     app.include_router(router)\n \n-\n-def test_router_events():\n     assert state.app_startup is False\n     assert state.router_startup is False\n     assert state.sub_router_startup is False\n@@ -85,3 +81,28 @@ def test_router_events():\n     assert state.app_shutdown is True\n     assert state.router_shutdown is True\n     assert state.sub_router_shutdown is True\n+\n+\n+def test_app_lifespan_state(state: State) -> None:\n+    @asynccontextmanager\n+    async def lifespan(app: FastAPI) -> AsyncGenerator[None, None]:\n+        state.app_startup = True\n+        yield\n+        state.app_shutdown = True\n+\n+    app = FastAPI(lifespan=lifespan)\n+\n+    @app.get(\"/\")\n+    def main() -> Dict[str, str]:\n+        return {\"message\": \"Hello World\"}\n+\n+    assert state.app_startup is False\n+    assert state.app_shutdown is False\n+    with TestClient(app) as client:\n+        assert state.app_startup is True\n+        assert state.app_shutdown is False\n+        response = client.get(\"/\")\n+        assert response.status_code == 200, response.text\n+        assert response.json() == {\"message\": \"Hello World\"}\n+    assert state.app_startup is True\n+    assert state.app_shutdown is True\n\n@@ -0,0 +1,86 @@\n+from fastapi.testclient import TestClient\n+\n+from docs_src.events.tutorial003 import (\n+    app,\n+    fake_answer_to_everything_ml_model,\n+    ml_models,\n+)\n+\n+openapi_schema = {\n+    \"openapi\": \"3.0.2\",\n+    \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n+    \"paths\": {\n+        \"/predict\": {\n+            \"get\": {\n+                \"summary\": \"Predict\",\n+                \"operationId\": \"predict_predict_get\",\n+                \"parameters\": [\n+                    {\n+                        \"required\": True,\n+                        \"schema\": {\"title\": \"X\", \"type\": \"number\"},\n+                        \"name\": \"x\",\n+                        \"in\": \"query\",\n+                    }\n+                ],\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                    },\n+                    \"422\": {\n+                        \"description\": \"Validation Error\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\n+                                    \"$ref\": \"#/components/schemas/HTTPValidationError\"\n+                                }\n+                            }\n+                        },\n+                    },\n+                },\n+            }\n+        }\n+    },\n+    \"components\": {\n+        \"schemas\": {\n+            \"HTTPValidationError\": {\n+                \"title\": \"HTTPValidationError\",\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"detail\": {\n+                        \"title\": \"Detail\",\n+                        \"type\": \"array\",\n+                        \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n+                    }\n+                },\n+            },\n+            \"ValidationError\": {\n+                \"title\": \"ValidationError\",\n+                \"required\": [\"loc\", \"msg\", \"type\"],\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"loc\": {\n+                        \"title\": \"Location\",\n+                        \"type\": \"array\",\n+                        \"items\": {\"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]},\n+                    },\n+                    \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n+                    \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n+                },\n+            },\n+        }\n+    },\n+}\n+\n+\n+def test_events():\n+    assert not ml_models, \"ml_models should be empty\"\n+    with TestClient(app) as client:\n+        assert ml_models[\"answer_to_everything\"] == fake_answer_to_everything_ml_model\n+        response = client.get(\"/openapi.json\")\n+        assert response.status_code == 200, response.text\n+        assert response.json() == openapi_schema\n+        response = client.get(\"/predict\", params={\"x\": 2})\n+        assert response.status_code == 200, response.text\n+        assert response.json() == {\"result\": 84.0}\n+    assert not ml_models, \"ml_models should be empty\"\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#25382d2d194bc3050d09e040889d30f5d64a5d27", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 405 | Contributors (this commit): 2 | Commits (past 90d): 7 | Contributors (cumulative): 2 | DMM Complexity: None\n\nDIFF:\n@@ -1,6 +1,6 @@\n \"\"\"FastAPI framework, high performance, easy to learn, fast to code, ready for production\"\"\"\n \n-__version__ = \"0.92.0\"\n+__version__ = \"0.93.0\"\n \n from starlette import status as status\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#8a4cfa52afce69f734e4844b1c06e394c891f795", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 4 | Lines Deleted: 6 | Files Changed: 2 | Hunks: 6 | Methods Changed: 2 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 10 | Churn Cumulative: 7839 | Contributors (this commit): 48 | Commits (past 90d): 10 | Contributors (cumulative): 63 | DMM Complexity: None\n\nDIFF:\n@@ -1,7 +1,6 @@\n from enum import Enum\n from typing import (\n     Any,\n-    AsyncContextManager,\n     Awaitable,\n     Callable,\n     Coroutine,\n@@ -42,7 +41,7 @@ from starlette.middleware.exceptions import ExceptionMiddleware\n from starlette.requests import Request\n from starlette.responses import HTMLResponse, JSONResponse, Response\n from starlette.routing import BaseRoute\n-from starlette.types import ASGIApp, Receive, Scope, Send\n+from starlette.types import ASGIApp, Lifespan, Receive, Scope, Send\n \n \n class FastAPI(Starlette):\n@@ -72,7 +71,7 @@ class FastAPI(Starlette):\n         ] = None,\n         on_startup: Optional[Sequence[Callable[[], Any]]] = None,\n         on_shutdown: Optional[Sequence[Callable[[], Any]]] = None,\n-        lifespan: Optional[Callable[[\"FastAPI\"], AsyncContextManager[Any]]] = None,\n+        lifespan: Optional[Lifespan] = None,\n         terms_of_service: Optional[str] = None,\n         contact: Optional[Dict[str, Union[str, Any]]] = None,\n         license_info: Optional[Dict[str, Union[str, Any]]] = None,\n\n@@ -7,7 +7,6 @@ from contextlib import AsyncExitStack\n from enum import Enum, IntEnum\n from typing import (\n     Any,\n-    AsyncContextManager,\n     Callable,\n     Coroutine,\n     Dict,\n@@ -58,7 +57,7 @@ from starlette.routing import (\n     websocket_session,\n )\n from starlette.status import WS_1008_POLICY_VIOLATION\n-from starlette.types import ASGIApp, Scope\n+from starlette.types import ASGIApp, Lifespan, Scope\n from starlette.websockets import WebSocket\n \n \n@@ -493,7 +492,7 @@ class APIRouter(routing.Router):\n         route_class: Type[APIRoute] = APIRoute,\n         on_startup: Optional[Sequence[Callable[[], Any]]] = None,\n         on_shutdown: Optional[Sequence[Callable[[], Any]]] = None,\n-        lifespan: Optional[Callable[[Any], AsyncContextManager[Any]]] = None,\n+        lifespan: Optional[Lifespan] = None,\n         deprecated: Optional[bool] = None,\n         include_in_schema: bool = True,\n         generate_unique_id_function: Callable[[APIRoute], str] = Default(\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#f04b61bd1633e5e4418edfa359ab6a0320520735", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 9 | Lines Deleted: 12 | Files Changed: 10 | Hunks: 12 | Methods Changed: 13 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 21 | Churn Cumulative: 8113 | Contributors (this commit): 63 | Commits (past 90d): 16 | Contributors (cumulative): 97 | DMM Complexity: None\n\nDIFF:\n@@ -25,7 +25,7 @@ async def update_item(\n     item: Item,\n     user: User,\n     importance: int = Body(gt=0),\n-    q: Union[str, None] = None\n+    q: Union[str, None] = None,\n ):\n     results = {\"item_id\": item_id, \"item\": item, \"user\": user, \"importance\": importance}\n     if q:\n\n@@ -23,7 +23,7 @@ async def update_item(\n     item: Item,\n     user: User,\n     importance: int = Body(gt=0),\n-    q: str | None = None\n+    q: str | None = None,\n ):\n     results = {\"item_id\": item_id, \"item\": item, \"user\": user, \"importance\": importance}\n     if q:\n\n@@ -8,7 +8,7 @@ async def read_items(\n     *,\n     item_id: int = Path(title=\"The ID of the item to get\", ge=0, le=1000),\n     q: str,\n-    size: float = Query(gt=0, lt=10.5)\n+    size: float = Query(gt=0, lt=10.5),\n ):\n     results = {\"item_id\": item_id}\n     if q:\n\n@@ -696,7 +696,7 @@ async def request_body_to_args(\n                     fn: Callable[[], Coroutine[Any, Any, Any]]\n                 ) -> None:\n                     result = await fn()\n-                    results.append(result)\n+                    results.append(result)  # noqa: B023\n \n                 async with anyio.create_task_group() as tg:\n                     for sub_value in value:\n\n@@ -1250,7 +1250,6 @@ class APIRouter(routing.Router):\n             generate_unique_id\n         ),\n     ) -> Callable[[DecoratedCallable], DecoratedCallable]:\n-\n         return self.api_route(\n             path=path,\n             response_model=response_model,\n\n@@ -18,7 +18,7 @@ class APIKeyQuery(APIKeyBase):\n         name: str,\n         scheme_name: Optional[str] = None,\n         description: Optional[str] = None,\n-        auto_error: bool = True\n+        auto_error: bool = True,\n     ):\n         self.model: APIKey = APIKey(\n             **{\"in\": APIKeyIn.query}, name=name, description=description\n@@ -45,7 +45,7 @@ class APIKeyHeader(APIKeyBase):\n         name: str,\n         scheme_name: Optional[str] = None,\n         description: Optional[str] = None,\n-        auto_error: bool = True\n+        auto_error: bool = True,\n     ):\n         self.model: APIKey = APIKey(\n             **{\"in\": APIKeyIn.header}, name=name, description=description\n@@ -72,7 +72,7 @@ class APIKeyCookie(APIKeyBase):\n         name: str,\n         scheme_name: Optional[str] = None,\n         description: Optional[str] = None,\n-        auto_error: bool = True\n+        auto_error: bool = True,\n     ):\n         self.model: APIKey = APIKey(\n             **{\"in\": APIKeyIn.cookie}, name=name, description=description\n\n@@ -119,7 +119,7 @@ class OAuth2(SecurityBase):\n         flows: Union[OAuthFlowsModel, Dict[str, Dict[str, Any]]] = OAuthFlowsModel(),\n         scheme_name: Optional[str] = None,\n         description: Optional[str] = None,\n-        auto_error: bool = True\n+        auto_error: bool = True,\n     ):\n         self.model = OAuth2Model(flows=flows, description=description)\n         self.scheme_name = scheme_name or self.__class__.__name__\n\n@@ -14,7 +14,7 @@ class OpenIdConnect(SecurityBase):\n         openIdConnectUrl: str,\n         scheme_name: Optional[str] = None,\n         description: Optional[str] = None,\n-        auto_error: bool = True\n+        auto_error: bool = True,\n     ):\n         self.model = OpenIdConnectModel(\n             openIdConnectUrl=openIdConnectUrl, description=description\n\n@@ -150,7 +150,6 @@ def get_app():\n \n @pytest.fixture(name=\"client\")\n def get_client(app: FastAPI):\n-\n     client = TestClient(app)\n     return client\n \n\n@@ -152,7 +152,6 @@ def get_app():\n \n @pytest.fixture(name=\"client\")\n def get_client(app: FastAPI):\n-\n     client = TestClient(app)\n     return client\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#392ffaae43d11838ece62acfa8bb50e5d2f5ca05", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 407 | Contributors (this commit): 2 | Commits (past 90d): 8 | Contributors (cumulative): 2 | DMM Complexity: None\n\nDIFF:\n@@ -1,6 +1,6 @@\n \"\"\"FastAPI framework, high performance, easy to learn, fast to code, ready for production\"\"\"\n \n-__version__ = \"0.93.0\"\n+__version__ = \"0.94.0\"\n \n from starlette import status as status\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#25aabe05ce68c69d7e66d5988c23bd63902407ef", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 8 | Lines Deleted: 3 | Files Changed: 2 | Hunks: 5 | Methods Changed: 3 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 11 | Churn Cumulative: 7851 | Contributors (this commit): 49 | Commits (past 90d): 13 | Contributors (cumulative): 64 | DMM Complexity: None\n\nDIFF:\n@@ -9,6 +9,7 @@ from typing import (\n     Optional,\n     Sequence,\n     Type,\n+    TypeVar,\n     Union,\n )\n \n@@ -43,10 +44,12 @@ from starlette.responses import HTMLResponse, JSONResponse, Response\n from starlette.routing import BaseRoute\n from starlette.types import ASGIApp, Lifespan, Receive, Scope, Send\n \n+AppType = TypeVar(\"AppType\", bound=\"FastAPI\")\n+\n \n class FastAPI(Starlette):\n     def __init__(\n-        self,\n+        self: AppType,\n         *,\n         debug: bool = False,\n         routes: Optional[List[BaseRoute]] = None,\n@@ -71,7 +74,7 @@ class FastAPI(Starlette):\n         ] = None,\n         on_startup: Optional[Sequence[Callable[[], Any]]] = None,\n         on_shutdown: Optional[Sequence[Callable[[], Any]]] = None,\n-        lifespan: Optional[Lifespan] = None,\n+        lifespan: Optional[Lifespan[AppType]] = None,\n         terms_of_service: Optional[str] = None,\n         contact: Optional[Dict[str, Union[str, Any]]] = None,\n         license_info: Optional[Dict[str, Union[str, Any]]] = None,\n\n@@ -492,7 +492,9 @@ class APIRouter(routing.Router):\n         route_class: Type[APIRoute] = APIRoute,\n         on_startup: Optional[Sequence[Callable[[], Any]]] = None,\n         on_shutdown: Optional[Sequence[Callable[[], Any]]] = None,\n-        lifespan: Optional[Lifespan] = None,\n+        # the generic to Lifespan[AppType] is the type of the top level application\n+        # which the router cannot know statically, so we use typing.Any\n+        lifespan: Optional[Lifespan[Any]] = None,\n         deprecated: Optional[bool] = None,\n         include_in_schema: bool = True,\n         generate_unique_id_function: Callable[[APIRoute], str] = Default(\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#ef176c663195489b44030bfe1fb94a317762c8d5", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 409 | Contributors (this commit): 2 | Commits (past 90d): 9 | Contributors (cumulative): 2 | DMM Complexity: None\n\nDIFF:\n@@ -1,6 +1,6 @@\n \"\"\"FastAPI framework, high performance, easy to learn, fast to code, ready for production\"\"\"\n \n-__version__ = \"0.94.0\"\n+__version__ = \"0.94.1\"\n \n from starlette import status as status\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#375513f11494bc3499050ad2a0d378fb6e37ca98", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1277 | Lines Deleted: 140 | Files Changed: 24 | Hunks: 59 | Methods Changed: 56 | Complexity Δ (Sum/Max): 46/13 | Churn Δ: 1417 | Churn Cumulative: 8343 | Contributors (this commit): 50 | Commits (past 90d): 27 | Contributors (cumulative): 103 | DMM Complexity: 0.9948979591836735\n\nDIFF:\n@@ -0,0 +1,18 @@\n+from typing import Optional\n+\n+from fastapi import Depends, FastAPI\n+from typing_extensions import Annotated\n+\n+app = FastAPI()\n+\n+\n+async def common_parameters(q: Optional[str] = None, skip: int = 0, limit: int = 100):\n+    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n+\n+\n+CommonParamsDepends = Annotated[dict, Depends(common_parameters)]\n+\n+\n+@app.get(\"/items/\")\n+async def read_items(commons: CommonParamsDepends):\n+    return commons\n\n@@ -0,0 +1,17 @@\n+from typing import Annotated, Optional\n+\n+from fastapi import Depends, FastAPI\n+\n+app = FastAPI()\n+\n+\n+async def common_parameters(q: Optional[str] = None, skip: int = 0, limit: int = 100):\n+    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n+\n+\n+CommonParamsDepends = Annotated[dict, Depends(common_parameters)]\n+\n+\n+@app.get(\"/items/\")\n+async def read_items(commons: CommonParamsDepends):\n+    return commons\n\n@@ -0,0 +1,21 @@\n+from typing import Optional\n+\n+from fastapi import Depends, FastAPI\n+from typing_extensions import Annotated\n+\n+app = FastAPI()\n+\n+\n+class CommonQueryParams:\n+    def __init__(self, q: Optional[str] = None, skip: int = 0, limit: int = 100):\n+        self.q = q\n+        self.skip = skip\n+        self.limit = limit\n+\n+\n+CommonQueryParamsDepends = Annotated[CommonQueryParams, Depends()]\n+\n+\n+@app.get(\"/items/\")\n+async def read_items(commons: CommonQueryParamsDepends):\n+    return commons\n\n@@ -0,0 +1,20 @@\n+from typing import Annotated, Optional\n+\n+from fastapi import Depends, FastAPI\n+\n+app = FastAPI()\n+\n+\n+class CommonQueryParams:\n+    def __init__(self, q: Optional[str] = None, skip: int = 0, limit: int = 100):\n+        self.q = q\n+        self.skip = skip\n+        self.limit = limit\n+\n+\n+CommonQueryParamsDepends = Annotated[CommonQueryParams, Depends()]\n+\n+\n+@app.get(\"/items/\")\n+async def read_items(commons: CommonQueryParamsDepends):\n+    return commons\n\n@@ -0,0 +1,15 @@\n+from fastapi import FastAPI, Path\n+from fastapi.param_functions import Query\n+from typing_extensions import Annotated\n+\n+app = FastAPI()\n+\n+\n+@app.get(\"/items/{item_id}\")\n+async def read_items(item_id: Annotated[int, Path(gt=0)]):\n+    return {\"item_id\": item_id}\n+\n+\n+@app.get(\"/users\")\n+async def read_users(user_id: Annotated[str, Query(min_length=1)] = \"me\"):\n+    return {\"user_id\": user_id}\n\n@@ -0,0 +1,16 @@\n+from typing import Annotated\n+\n+from fastapi import FastAPI, Path\n+from fastapi.param_functions import Query\n+\n+app = FastAPI()\n+\n+\n+@app.get(\"/items/{item_id}\")\n+async def read_items(item_id: Annotated[int, Path(gt=0)]):\n+    return {\"item_id\": item_id}\n+\n+\n+@app.get(\"/users\")\n+async def read_users(user_id: Annotated[str, Query(min_length=1)] = \"me\"):\n+    return {\"user_id\": user_id}\n\n@@ -48,7 +48,7 @@ from pydantic.fields import (\n     Undefined,\n )\n from pydantic.schema import get_annotation_from_field_info\n-from pydantic.typing import evaluate_forwardref\n+from pydantic.typing import evaluate_forwardref, get_args, get_origin\n from pydantic.utils import lenient_issubclass\n from starlette.background import BackgroundTasks\n from starlette.concurrency import run_in_threadpool\n@@ -56,6 +56,7 @@ from starlette.datastructures import FormData, Headers, QueryParams, UploadFile\n from starlette.requests import HTTPConnection, Request\n from starlette.responses import Response\n from starlette.websockets import WebSocket\n+from typing_extensions import Annotated\n \n sequence_shapes = {\n     SHAPE_LIST,\n@@ -112,18 +113,18 @@ def check_file_field(field: ModelField) -> None:\n \n \n def get_param_sub_dependant(\n-    *, param: inspect.Parameter, path: str, security_scopes: Optional[List[str]] = None\n+    *,\n+    param_name: str,\n+    depends: params.Depends,\n+    path: str,\n+    security_scopes: Optional[List[str]] = None,\n ) -> Dependant:\n-    depends: params.Depends = param.default\n-    if depends.dependency:\n-        dependency = depends.dependency\n-    else:\n-        dependency = param.annotation\n+    assert depends.dependency\n     return get_sub_dependant(\n         depends=depends,\n-        dependency=dependency,\n+        dependency=depends.dependency,\n         path=path,\n-        name=param.name,\n+        name=param_name,\n         security_scopes=security_scopes,\n     )\n \n@@ -298,122 +299,199 @@ def get_dependant(\n         use_cache=use_cache,\n     )\n     for param_name, param in signature_params.items():\n-        if isinstance(param.default, params.Depends):\n+        is_path_param = param_name in path_param_names\n+        type_annotation, depends, param_field = analyze_param(\n+            param_name=param_name,\n+            annotation=param.annotation,\n+            value=param.default,\n+            is_path_param=is_path_param,\n+        )\n+        if depends is not None:\n             sub_dependant = get_param_sub_dependant(\n-                param=param, path=path, security_scopes=security_scopes\n+                param_name=param_name,\n+                depends=depends,\n+                path=path,\n+                security_scopes=security_scopes,\n             )\n             dependant.dependencies.append(sub_dependant)\n             continue\n-        if add_non_field_param_to_dependency(param=param, dependant=dependant):\n-            continue\n-        param_field = get_param_field(\n-            param=param, default_field_info=params.Query, param_name=param_name\n-        )\n-        if param_name in path_param_names:\n-            assert is_scalar_field(\n-                field=param_field\n-            ), \"Path params must be of one of the supported types\"\n-            ignore_default = not isinstance(param.default, params.Path)\n-            param_field = get_param_field(\n-                param=param,\n+        if add_non_field_param_to_dependency(\n             param_name=param_name,\n-                default_field_info=params.Path,\n-                force_type=params.ParamTypes.path,\n-                ignore_default=ignore_default,\n-            )\n-            add_param_to_fields(field=param_field, dependant=dependant)\n-        elif is_scalar_field(field=param_field):\n-            add_param_to_fields(field=param_field, dependant=dependant)\n-        elif isinstance(\n-            param.default, (params.Query, params.Header)\n-        ) and is_scalar_sequence_field(param_field):\n-            add_param_to_fields(field=param_field, dependant=dependant)\n-        else:\n-            field_info = param_field.field_info\n-            assert isinstance(\n-                field_info, params.Body\n-            ), f\"Param: {param_field.name} can only be a request body, using Body()\"\n+            type_annotation=type_annotation,\n+            dependant=dependant,\n+        ):\n+            assert (\n+                param_field is None\n+            ), f\"Cannot specify multiple FastAPI annotations for {param_name!r}\"\n+            continue\n+        assert param_field is not None\n+        if is_body_param(param_field=param_field, is_path_param=is_path_param):\n             dependant.body_params.append(param_field)\n+        else:\n+            add_param_to_fields(field=param_field, dependant=dependant)\n     return dependant\n \n \n def add_non_field_param_to_dependency(\n-    *, param: inspect.Parameter, dependant: Dependant\n+    *, param_name: str, type_annotation: Any, dependant: Dependant\n ) -> Optional[bool]:\n-    if lenient_issubclass(param.annotation, Request):\n-        dependant.request_param_name = param.name\n+    if lenient_issubclass(type_annotation, Request):\n+        dependant.request_param_name = param_name\n         return True\n-    elif lenient_issubclass(param.annotation, WebSocket):\n-        dependant.websocket_param_name = param.name\n+    elif lenient_issubclass(type_annotation, WebSocket):\n+        dependant.websocket_param_name = param_name\n         return True\n-    elif lenient_issubclass(param.annotation, HTTPConnection):\n-        dependant.http_connection_param_name = param.name\n+    elif lenient_issubclass(type_annotation, HTTPConnection):\n+        dependant.http_connection_param_name = param_name\n         return True\n-    elif lenient_issubclass(param.annotation, Response):\n-        dependant.response_param_name = param.name\n+    elif lenient_issubclass(type_annotation, Response):\n+        dependant.response_param_name = param_name\n         return True\n-    elif lenient_issubclass(param.annotation, BackgroundTasks):\n-        dependant.background_tasks_param_name = param.name\n+    elif lenient_issubclass(type_annotation, BackgroundTasks):\n+        dependant.background_tasks_param_name = param_name\n         return True\n-    elif lenient_issubclass(param.annotation, SecurityScopes):\n-        dependant.security_scopes_param_name = param.name\n+    elif lenient_issubclass(type_annotation, SecurityScopes):\n+        dependant.security_scopes_param_name = param_name\n         return True\n     return None\n \n \n-def get_param_field(\n+def analyze_param(\n     *,\n-    param: inspect.Parameter,\n     param_name: str,\n-    default_field_info: Type[params.Param] = params.Param,\n-    force_type: Optional[params.ParamTypes] = None,\n-    ignore_default: bool = False,\n-) -> ModelField:\n-    default_value: Any = Undefined\n-    had_schema = False\n-    if not param.default == param.empty and ignore_default is False:\n-        default_value = param.default\n-    if isinstance(default_value, FieldInfo):\n-        had_schema = True\n-        field_info = default_value\n-        default_value = field_info.default\n+    annotation: Any,\n+    value: Any,\n+    is_path_param: bool,\n+) -> Tuple[Any, Optional[params.Depends], Optional[ModelField]]:\n+    field_info = None\n+    used_default_field_info = False\n+    depends = None\n+    type_annotation: Any = Any\n     if (\n+        annotation is not inspect.Signature.empty\n+        and get_origin(annotation) is Annotated  # type: ignore[comparison-overlap]\n+    ):\n+        annotated_args = get_args(annotation)\n+        type_annotation = annotated_args[0]\n+        fastapi_annotations = [\n+            arg\n+            for arg in annotated_args[1:]\n+            if isinstance(arg, (FieldInfo, params.Depends))\n+        ]\n+        assert (\n+            len(fastapi_annotations) <= 1\n+        ), f\"Cannot specify multiple `Annotated` FastAPI arguments for {param_name!r}\"\n+        fastapi_annotation = next(iter(fastapi_annotations), None)\n+        if isinstance(fastapi_annotation, FieldInfo):\n+            field_info = fastapi_annotation\n+            assert field_info.default is Undefined or field_info.default is Required, (\n+                f\"`{field_info.__class__.__name__}` default value cannot be set in\"\n+                f\" `Annotated` for {param_name!r}. Set the default value with `=` instead.\"\n+            )\n+            if value is not inspect.Signature.empty:\n+                assert not is_path_param, \"Path parameters cannot have default values\"\n+                field_info.default = value\n+            else:\n+                field_info.default = Required\n+        elif isinstance(fastapi_annotation, params.Depends):\n+            depends = fastapi_annotation\n+    elif annotation is not inspect.Signature.empty:\n+        type_annotation = annotation\n+\n+    if isinstance(value, params.Depends):\n+        assert depends is None, (\n+            \"Cannot specify `Depends` in `Annotated` and default value\"\n+            f\" together for {param_name!r}\"\n+        )\n+        assert field_info is None, (\n+            \"Cannot specify a FastAPI annotation in `Annotated` and `Depends` as a\"\n+            f\" default value together for {param_name!r}\"\n+        )\n+        depends = value\n+    elif isinstance(value, FieldInfo):\n+        assert field_info is None, (\n+            \"Cannot specify FastAPI annotations in `Annotated` and default value\"\n+            f\" together for {param_name!r}\"\n+        )\n+        field_info = value\n+\n+    if depends is not None and depends.dependency is None:\n+        depends.dependency = type_annotation\n+\n+    if lenient_issubclass(\n+        type_annotation,\n+        (Request, WebSocket, HTTPConnection, Response, BackgroundTasks, SecurityScopes),\n+    ):\n+        assert depends is None, f\"Cannot specify `Depends` for type {type_annotation!r}\"\n+        assert (\n+            field_info is None\n+        ), f\"Cannot specify FastAPI annotation for type {type_annotation!r}\"\n+    elif field_info is None and depends is None:\n+        default_value = value if value is not inspect.Signature.empty else Required\n+        if is_path_param:\n+            # We might check here that `default_value is Required`, but the fact is that the same\n+            # parameter might sometimes be a path parameter and sometimes not. See\n+            # `tests/test_infer_param_optionality.py` for an example.\n+            field_info = params.Path()\n+        else:\n+            field_info = params.Query(default=default_value)\n+        used_default_field_info = True\n+\n+    field = None\n+    if field_info is not None:\n+        if is_path_param:\n+            assert isinstance(field_info, params.Path), (\n+                f\"Cannot use `{field_info.__class__.__name__}` for path param\"\n+                f\" {param_name!r}\"\n+            )\n+        elif (\n             isinstance(field_info, params.Param)\n             and getattr(field_info, \"in_\", None) is None\n         ):\n-            field_info.in_ = default_field_info.in_\n-        if force_type:\n-            field_info.in_ = force_type  # type: ignore\n-    else:\n-        field_info = default_field_info(default=default_value)\n-    required = True\n-    if default_value is Required or ignore_default:\n-        required = True\n-        default_value = None\n-    elif default_value is not Undefined:\n-        required = False\n-    annotation: Any = Any\n-    if not param.annotation == param.empty:\n-        annotation = param.annotation\n-    annotation = get_annotation_from_field_info(annotation, field_info, param_name)\n+            field_info.in_ = params.ParamTypes.query\n+        annotation = get_annotation_from_field_info(\n+            annotation if annotation is not inspect.Signature.empty else Any,\n+            field_info,\n+            param_name,\n+        )\n         if not field_info.alias and getattr(field_info, \"convert_underscores\", None):\n-        alias = param.name.replace(\"_\", \"-\")\n+            alias = param_name.replace(\"_\", \"-\")\n         else:\n-        alias = field_info.alias or param.name\n+            alias = field_info.alias or param_name\n         field = create_response_field(\n-        name=param.name,\n+            name=param_name,\n             type_=annotation,\n-        default=default_value,\n+            default=field_info.default,\n             alias=alias,\n-        required=required,\n+            required=field_info.default in (Required, Undefined),\n             field_info=field_info,\n         )\n-    if not had_schema and not is_scalar_field(field=field):\n-        field.field_info = params.Body(field_info.default)\n-    if not had_schema and lenient_issubclass(field.type_, UploadFile):\n+        if used_default_field_info:\n+            if lenient_issubclass(field.type_, UploadFile):\n                 field.field_info = params.File(field_info.default)\n+            elif not is_scalar_field(field=field):\n+                field.field_info = params.Body(field_info.default)\n \n-    return field\n+    return type_annotation, depends, field\n+\n+\n+def is_body_param(*, param_field: ModelField, is_path_param: bool) -> bool:\n+    if is_path_param:\n+        assert is_scalar_field(\n+            field=param_field\n+        ), \"Path params must be of one of the supported types\"\n+        return False\n+    elif is_scalar_field(field=param_field):\n+        return False\n+    elif isinstance(\n+        param_field.field_info, (params.Query, params.Header)\n+    ) and is_scalar_sequence_field(param_field):\n+        return False\n+    else:\n+        assert isinstance(\n+            param_field.field_info, params.Body\n+        ), f\"Param: {param_field.name} can only be a request body, using Body()\"\n+        return True\n \n \n def add_param_to_fields(*, field: ModelField, dependant: Dependant) -> None:\n\n@@ -5,7 +5,7 @@ from pydantic.fields import Undefined\n \n \n def Path(  # noqa: N802\n-    default: Any = Undefined,\n+    default: Any = ...,\n     *,\n     alias: Optional[str] = None,\n     title: Optional[str] = None,\n\n@@ -62,7 +62,7 @@ class Path(Param):\n \n     def __init__(\n         self,\n-        default: Any = Undefined,\n+        default: Any = ...,\n         *,\n         alias: Optional[str] = None,\n         title: Optional[str] = None,\n@@ -80,9 +80,10 @@ class Path(Param):\n         include_in_schema: bool = True,\n         **extra: Any,\n     ):\n+        assert default is ..., \"Path parameters cannot have a default value\"\n         self.in_ = self.in_\n         super().__init__(\n-            default=...,\n+            default=default,\n             alias=alias,\n             title=title,\n             description=description,\n@@ -279,7 +280,7 @@ class Body(FieldInfo):\n class Form(Body):\n     def __init__(\n         self,\n-        default: Any,\n+        default: Any = Undefined,\n         *,\n         media_type: str = \"application/x-www-form-urlencoded\",\n         alias: Optional[str] = None,\n@@ -319,7 +320,7 @@ class Form(Body):\n class File(Form):\n     def __init__(\n         self,\n-        default: Any,\n+        default: Any = Undefined,\n         *,\n         media_type: str = \"multipart/form-data\",\n         alias: Optional[str] = None,\n\n@@ -1,4 +1,3 @@\n-import functools\n import re\n import warnings\n from dataclasses import is_dataclass\n@@ -73,8 +72,8 @@ def create_response_field(\n     class_validators = class_validators or {}\n     field_info = field_info or FieldInfo()\n \n-    response_field = functools.partial(\n-        ModelField,\n+    try:\n+        return ModelField(\n             name=name,\n             type_=type_,\n             class_validators=class_validators,\n@@ -82,10 +81,8 @@ def create_response_field(\n             required=required,\n             model_config=model_config,\n             alias=alias,\n+            field_info=field_info,\n         )\n-\n-    try:\n-        return response_field(field_info=field_info)\n     except RuntimeError:\n         raise fastapi.exceptions.FastAPIError(\n             \"Invalid args for response field! Hint: \"\n\n@@ -49,12 +49,7 @@ def get_bool_id(item_id: bool):\n \n \n @app.get(\"/path/param/{item_id}\")\n-def get_path_param_id(item_id: str = Path()):\n-    return item_id\n-\n-\n-@app.get(\"/path/param-required/{item_id}\")\n-def get_path_param_required_id(item_id: str = Path()):\n+def get_path_param_id(item_id: Optional[str] = Path()):\n     return item_id\n \n \n\n@@ -0,0 +1,66 @@\n+import pytest\n+from fastapi import Depends, FastAPI, Path\n+from fastapi.param_functions import Query\n+from typing_extensions import Annotated\n+\n+app = FastAPI()\n+\n+\n+def test_no_annotated_defaults():\n+    with pytest.raises(\n+        AssertionError, match=\"Path parameters cannot have a default value\"\n+    ):\n+\n+        @app.get(\"/items/{item_id}/\")\n+        async def get_item(item_id: Annotated[int, Path(default=1)]):\n+            pass  # pragma: nocover\n+\n+    with pytest.raises(\n+        AssertionError,\n+        match=(\n+            \"`Query` default value cannot be set in `Annotated` for 'item_id'. Set the\"\n+            \" default value with `=` instead.\"\n+        ),\n+    ):\n+\n+        @app.get(\"/\")\n+        async def get(item_id: Annotated[int, Query(default=1)]):\n+            pass  # pragma: nocover\n+\n+\n+def test_no_multiple_annotations():\n+    async def dep():\n+        pass  # pragma: nocover\n+\n+    with pytest.raises(\n+        AssertionError,\n+        match=\"Cannot specify multiple `Annotated` FastAPI arguments for 'foo'\",\n+    ):\n+\n+        @app.get(\"/\")\n+        async def get(foo: Annotated[int, Query(min_length=1), Query()]):\n+            pass  # pragma: nocover\n+\n+    with pytest.raises(\n+        AssertionError,\n+        match=(\n+            \"Cannot specify `Depends` in `Annotated` and default value\"\n+            \" together for 'foo'\"\n+        ),\n+    ):\n+\n+        @app.get(\"/\")\n+        async def get2(foo: Annotated[int, Depends(dep)] = Depends(dep)):\n+            pass  # pragma: nocover\n+\n+    with pytest.raises(\n+        AssertionError,\n+        match=(\n+            \"Cannot specify a FastAPI annotation in `Annotated` and `Depends` as a\"\n+            \" default value together for 'foo'\"\n+        ),\n+    ):\n+\n+        @app.get(\"/\")\n+        async def get3(foo: Annotated[int, Query(min_length=1)] = Depends(dep)):\n+            pass  # pragma: nocover\n\n@@ -0,0 +1,226 @@\n+import pytest\n+from fastapi import FastAPI, Query\n+from fastapi.testclient import TestClient\n+from typing_extensions import Annotated\n+\n+app = FastAPI()\n+\n+\n+@app.get(\"/default\")\n+async def default(foo: Annotated[str, Query()] = \"foo\"):\n+    return {\"foo\": foo}\n+\n+\n+@app.get(\"/required\")\n+async def required(foo: Annotated[str, Query(min_length=1)]):\n+    return {\"foo\": foo}\n+\n+\n+@app.get(\"/multiple\")\n+async def multiple(foo: Annotated[str, object(), Query(min_length=1)]):\n+    return {\"foo\": foo}\n+\n+\n+@app.get(\"/unrelated\")\n+async def unrelated(foo: Annotated[str, object()]):\n+    return {\"foo\": foo}\n+\n+\n+client = TestClient(app)\n+\n+openapi_schema = {\n+    \"openapi\": \"3.0.2\",\n+    \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n+    \"paths\": {\n+        \"/default\": {\n+            \"get\": {\n+                \"summary\": \"Default\",\n+                \"operationId\": \"default_default_get\",\n+                \"parameters\": [\n+                    {\n+                        \"required\": False,\n+                        \"schema\": {\"title\": \"Foo\", \"type\": \"string\", \"default\": \"foo\"},\n+                        \"name\": \"foo\",\n+                        \"in\": \"query\",\n+                    }\n+                ],\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                    },\n+                    \"422\": {\n+                        \"description\": \"Validation Error\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\n+                                    \"$ref\": \"#/components/schemas/HTTPValidationError\"\n+                                }\n+                            }\n+                        },\n+                    },\n+                },\n+            }\n+        },\n+        \"/required\": {\n+            \"get\": {\n+                \"summary\": \"Required\",\n+                \"operationId\": \"required_required_get\",\n+                \"parameters\": [\n+                    {\n+                        \"required\": True,\n+                        \"schema\": {\"title\": \"Foo\", \"minLength\": 1, \"type\": \"string\"},\n+                        \"name\": \"foo\",\n+                        \"in\": \"query\",\n+                    }\n+                ],\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                    },\n+                    \"422\": {\n+                        \"description\": \"Validation Error\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\n+                                    \"$ref\": \"#/components/schemas/HTTPValidationError\"\n+                                }\n+                            }\n+                        },\n+                    },\n+                },\n+            }\n+        },\n+        \"/multiple\": {\n+            \"get\": {\n+                \"summary\": \"Multiple\",\n+                \"operationId\": \"multiple_multiple_get\",\n+                \"parameters\": [\n+                    {\n+                        \"required\": True,\n+                        \"schema\": {\"title\": \"Foo\", \"minLength\": 1, \"type\": \"string\"},\n+                        \"name\": \"foo\",\n+                        \"in\": \"query\",\n+                    }\n+                ],\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                    },\n+                    \"422\": {\n+                        \"description\": \"Validation Error\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\n+                                    \"$ref\": \"#/components/schemas/HTTPValidationError\"\n+                                }\n+                            }\n+                        },\n+                    },\n+                },\n+            }\n+        },\n+        \"/unrelated\": {\n+            \"get\": {\n+                \"summary\": \"Unrelated\",\n+                \"operationId\": \"unrelated_unrelated_get\",\n+                \"parameters\": [\n+                    {\n+                        \"required\": True,\n+                        \"schema\": {\"title\": \"Foo\", \"type\": \"string\"},\n+                        \"name\": \"foo\",\n+                        \"in\": \"query\",\n+                    }\n+                ],\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                    },\n+                    \"422\": {\n+                        \"description\": \"Validation Error\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\n+                                    \"$ref\": \"#/components/schemas/HTTPValidationError\"\n+                                }\n+                            }\n+                        },\n+                    },\n+                },\n+            }\n+        },\n+    },\n+    \"components\": {\n+        \"schemas\": {\n+            \"HTTPValidationError\": {\n+                \"title\": \"HTTPValidationError\",\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"detail\": {\n+                        \"title\": \"Detail\",\n+                        \"type\": \"array\",\n+                        \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n+                    }\n+                },\n+            },\n+            \"ValidationError\": {\n+                \"title\": \"ValidationError\",\n+                \"required\": [\"loc\", \"msg\", \"type\"],\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"loc\": {\n+                        \"title\": \"Location\",\n+                        \"type\": \"array\",\n+                        \"items\": {\"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]},\n+                    },\n+                    \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n+                    \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n+                },\n+            },\n+        }\n+    },\n+}\n+foo_is_missing = {\n+    \"detail\": [\n+        {\n+            \"loc\": [\"query\", \"foo\"],\n+            \"msg\": \"field required\",\n+            \"type\": \"value_error.missing\",\n+        }\n+    ]\n+}\n+foo_is_short = {\n+    \"detail\": [\n+        {\n+            \"ctx\": {\"limit_value\": 1},\n+            \"loc\": [\"query\", \"foo\"],\n+            \"msg\": \"ensure this value has at least 1 characters\",\n+            \"type\": \"value_error.any_str.min_length\",\n+        }\n+    ]\n+}\n+\n+\n+@pytest.mark.parametrize(\n+    \"path,expected_status,expected_response\",\n+    [\n+        (\"/default\", 200, {\"foo\": \"foo\"}),\n+        (\"/default?foo=bar\", 200, {\"foo\": \"bar\"}),\n+        (\"/required?foo=bar\", 200, {\"foo\": \"bar\"}),\n+        (\"/required\", 422, foo_is_missing),\n+        (\"/required?foo=\", 422, foo_is_short),\n+        (\"/multiple?foo=bar\", 200, {\"foo\": \"bar\"}),\n+        (\"/multiple\", 422, foo_is_missing),\n+        (\"/multiple?foo=\", 422, foo_is_short),\n+        (\"/unrelated?foo=bar\", 200, {\"foo\": \"bar\"}),\n+        (\"/unrelated\", 422, foo_is_missing),\n+        (\"/openapi.json\", 200, openapi_schema),\n+    ],\n+)\n+def test_get(path, expected_status, expected_response):\n+    response = client.get(path)\n+    assert response.status_code == expected_status\n+    assert response.json() == expected_response\n\n@@ -225,36 +225,6 @@ openapi_schema = {\n                 ],\n             }\n         },\n-        \"/path/param-required/{item_id}\": {\n-            \"get\": {\n-                \"responses\": {\n-                    \"200\": {\n-                        \"description\": \"Successful Response\",\n-                        \"content\": {\"application/json\": {\"schema\": {}}},\n-                    },\n-                    \"422\": {\n-                        \"description\": \"Validation Error\",\n-                        \"content\": {\n-                            \"application/json\": {\n-                                \"schema\": {\n-                                    \"$ref\": \"#/components/schemas/HTTPValidationError\"\n-                                }\n-                            }\n-                        },\n-                    },\n-                },\n-                \"summary\": \"Get Path Param Required Id\",\n-                \"operationId\": \"get_path_param_required_id_path_param_required__item_id__get\",\n-                \"parameters\": [\n-                    {\n-                        \"required\": True,\n-                        \"schema\": {\"title\": \"Item Id\", \"type\": \"string\"},\n-                        \"name\": \"item_id\",\n-                        \"in\": \"path\",\n-                    }\n-                ],\n-            }\n-        },\n         \"/path/param-minlength/{item_id}\": {\n             \"get\": {\n                 \"responses\": {\n\n@@ -19,8 +19,9 @@ def test_param_repr(params):\n     assert repr(Param(params)) == \"Param(\" + str(params) + \")\"\n \n \n-def test_path_repr(params):\n-    assert repr(Path(params)) == \"Path(Ellipsis)\"\n+def test_path_repr():\n+    assert repr(Path()) == \"Path(Ellipsis)\"\n+    assert repr(Path(...)) == \"Path(Ellipsis)\"\n \n \n def test_query_repr(params):\n\n@@ -193,7 +193,6 @@ response_less_than_equal_3 = {\n         (\"/path/bool/False\", 200, False),\n         (\"/path/bool/false\", 200, False),\n         (\"/path/param/foo\", 200, \"foo\"),\n-        (\"/path/param-required/foo\", 200, \"foo\"),\n         (\"/path/param-minlength/foo\", 200, \"foo\"),\n         (\"/path/param-minlength/fo\", 422, response_at_least_3),\n         (\"/path/param-maxlength/foo\", 200, \"foo\"),\n\n\n@@ -0,0 +1,100 @@\n+import pytest\n+from fastapi.testclient import TestClient\n+\n+from docs_src.annotated.tutorial001 import app\n+\n+client = TestClient(app)\n+\n+openapi_schema = {\n+    \"openapi\": \"3.0.2\",\n+    \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n+    \"paths\": {\n+        \"/items/\": {\n+            \"get\": {\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                    },\n+                    \"422\": {\n+                        \"description\": \"Validation Error\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\n+                                    \"$ref\": \"#/components/schemas/HTTPValidationError\"\n+                                }\n+                            }\n+                        },\n+                    },\n+                },\n+                \"summary\": \"Read Items\",\n+                \"operationId\": \"read_items_items__get\",\n+                \"parameters\": [\n+                    {\n+                        \"required\": False,\n+                        \"schema\": {\"title\": \"Q\", \"type\": \"string\"},\n+                        \"name\": \"q\",\n+                        \"in\": \"query\",\n+                    },\n+                    {\n+                        \"required\": False,\n+                        \"schema\": {\"title\": \"Skip\", \"type\": \"integer\", \"default\": 0},\n+                        \"name\": \"skip\",\n+                        \"in\": \"query\",\n+                    },\n+                    {\n+                        \"required\": False,\n+                        \"schema\": {\"title\": \"Limit\", \"type\": \"integer\", \"default\": 100},\n+                        \"name\": \"limit\",\n+                        \"in\": \"query\",\n+                    },\n+                ],\n+            }\n+        },\n+    },\n+    \"components\": {\n+        \"schemas\": {\n+            \"ValidationError\": {\n+                \"title\": \"ValidationError\",\n+                \"required\": [\"loc\", \"msg\", \"type\"],\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"loc\": {\n+                        \"title\": \"Location\",\n+                        \"type\": \"array\",\n+                        \"items\": {\"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]},\n+                    },\n+                    \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n+                    \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n+                },\n+            },\n+            \"HTTPValidationError\": {\n+                \"title\": \"HTTPValidationError\",\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"detail\": {\n+                        \"title\": \"Detail\",\n+                        \"type\": \"array\",\n+                        \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n+                    }\n+                },\n+            },\n+        }\n+    },\n+}\n+\n+\n+@pytest.mark.parametrize(\n+    \"path,expected_status,expected_response\",\n+    [\n+        (\"/items\", 200, {\"q\": None, \"skip\": 0, \"limit\": 100}),\n+        (\"/items?q=foo\", 200, {\"q\": \"foo\", \"skip\": 0, \"limit\": 100}),\n+        (\"/items?q=foo&skip=5\", 200, {\"q\": \"foo\", \"skip\": 5, \"limit\": 100}),\n+        (\"/items?q=foo&skip=5&limit=30\", 200, {\"q\": \"foo\", \"skip\": 5, \"limit\": 30}),\n+        (\"/openapi.json\", 200, openapi_schema),\n+    ],\n+)\n+def test_get(path, expected_status, expected_response):\n+    response = client.get(path)\n+    assert response.status_code == expected_status\n+    assert response.json() == expected_response\n\n@@ -0,0 +1,107 @@\n+import pytest\n+from fastapi.testclient import TestClient\n+\n+from ...utils import needs_py39\n+\n+openapi_schema = {\n+    \"openapi\": \"3.0.2\",\n+    \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n+    \"paths\": {\n+        \"/items/\": {\n+            \"get\": {\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                    },\n+                    \"422\": {\n+                        \"description\": \"Validation Error\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\n+                                    \"$ref\": \"#/components/schemas/HTTPValidationError\"\n+                                }\n+                            }\n+                        },\n+                    },\n+                },\n+                \"summary\": \"Read Items\",\n+                \"operationId\": \"read_items_items__get\",\n+                \"parameters\": [\n+                    {\n+                        \"required\": False,\n+                        \"schema\": {\"title\": \"Q\", \"type\": \"string\"},\n+                        \"name\": \"q\",\n+                        \"in\": \"query\",\n+                    },\n+                    {\n+                        \"required\": False,\n+                        \"schema\": {\"title\": \"Skip\", \"type\": \"integer\", \"default\": 0},\n+                        \"name\": \"skip\",\n+                        \"in\": \"query\",\n+                    },\n+                    {\n+                        \"required\": False,\n+                        \"schema\": {\"title\": \"Limit\", \"type\": \"integer\", \"default\": 100},\n+                        \"name\": \"limit\",\n+                        \"in\": \"query\",\n+                    },\n+                ],\n+            }\n+        },\n+    },\n+    \"components\": {\n+        \"schemas\": {\n+            \"ValidationError\": {\n+                \"title\": \"ValidationError\",\n+                \"required\": [\"loc\", \"msg\", \"type\"],\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"loc\": {\n+                        \"title\": \"Location\",\n+                        \"type\": \"array\",\n+                        \"items\": {\"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]},\n+                    },\n+                    \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n+                    \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n+                },\n+            },\n+            \"HTTPValidationError\": {\n+                \"title\": \"HTTPValidationError\",\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"detail\": {\n+                        \"title\": \"Detail\",\n+                        \"type\": \"array\",\n+                        \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n+                    }\n+                },\n+            },\n+        }\n+    },\n+}\n+\n+\n+@pytest.fixture(name=\"client\")\n+def get_client():\n+    from docs_src.annotated.tutorial001_py39 import app\n+\n+    client = TestClient(app)\n+    return client\n+\n+\n+@needs_py39\n+@pytest.mark.parametrize(\n+    \"path,expected_status,expected_response\",\n+    [\n+        (\"/items\", 200, {\"q\": None, \"skip\": 0, \"limit\": 100}),\n+        (\"/items?q=foo\", 200, {\"q\": \"foo\", \"skip\": 0, \"limit\": 100}),\n+        (\"/items?q=foo&skip=5\", 200, {\"q\": \"foo\", \"skip\": 5, \"limit\": 100}),\n+        (\"/items?q=foo&skip=5&limit=30\", 200, {\"q\": \"foo\", \"skip\": 5, \"limit\": 30}),\n+        (\"/openapi.json\", 200, openapi_schema),\n+    ],\n+)\n+def test_get(path, expected_status, expected_response, client):\n+    response = client.get(path)\n+    assert response.status_code == expected_status\n+    assert response.json() == expected_response\n\n@@ -0,0 +1,100 @@\n+import pytest\n+from fastapi.testclient import TestClient\n+\n+from docs_src.annotated.tutorial002 import app\n+\n+client = TestClient(app)\n+\n+openapi_schema = {\n+    \"openapi\": \"3.0.2\",\n+    \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n+    \"paths\": {\n+        \"/items/\": {\n+            \"get\": {\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                    },\n+                    \"422\": {\n+                        \"description\": \"Validation Error\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\n+                                    \"$ref\": \"#/components/schemas/HTTPValidationError\"\n+                                }\n+                            }\n+                        },\n+                    },\n+                },\n+                \"summary\": \"Read Items\",\n+                \"operationId\": \"read_items_items__get\",\n+                \"parameters\": [\n+                    {\n+                        \"required\": False,\n+                        \"schema\": {\"title\": \"Q\", \"type\": \"string\"},\n+                        \"name\": \"q\",\n+                        \"in\": \"query\",\n+                    },\n+                    {\n+                        \"required\": False,\n+                        \"schema\": {\"title\": \"Skip\", \"type\": \"integer\", \"default\": 0},\n+                        \"name\": \"skip\",\n+                        \"in\": \"query\",\n+                    },\n+                    {\n+                        \"required\": False,\n+                        \"schema\": {\"title\": \"Limit\", \"type\": \"integer\", \"default\": 100},\n+                        \"name\": \"limit\",\n+                        \"in\": \"query\",\n+                    },\n+                ],\n+            }\n+        },\n+    },\n+    \"components\": {\n+        \"schemas\": {\n+            \"ValidationError\": {\n+                \"title\": \"ValidationError\",\n+                \"required\": [\"loc\", \"msg\", \"type\"],\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"loc\": {\n+                        \"title\": \"Location\",\n+                        \"type\": \"array\",\n+                        \"items\": {\"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]},\n+                    },\n+                    \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n+                    \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n+                },\n+            },\n+            \"HTTPValidationError\": {\n+                \"title\": \"HTTPValidationError\",\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"detail\": {\n+                        \"title\": \"Detail\",\n+                        \"type\": \"array\",\n+                        \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n+                    }\n+                },\n+            },\n+        }\n+    },\n+}\n+\n+\n+@pytest.mark.parametrize(\n+    \"path,expected_status,expected_response\",\n+    [\n+        (\"/items\", 200, {\"q\": None, \"skip\": 0, \"limit\": 100}),\n+        (\"/items?q=foo\", 200, {\"q\": \"foo\", \"skip\": 0, \"limit\": 100}),\n+        (\"/items?q=foo&skip=5\", 200, {\"q\": \"foo\", \"skip\": 5, \"limit\": 100}),\n+        (\"/items?q=foo&skip=5&limit=30\", 200, {\"q\": \"foo\", \"skip\": 5, \"limit\": 30}),\n+        (\"/openapi.json\", 200, openapi_schema),\n+    ],\n+)\n+def test_get(path, expected_status, expected_response):\n+    response = client.get(path)\n+    assert response.status_code == expected_status\n+    assert response.json() == expected_response\n\n@@ -0,0 +1,107 @@\n+import pytest\n+from fastapi.testclient import TestClient\n+\n+from ...utils import needs_py39\n+\n+openapi_schema = {\n+    \"openapi\": \"3.0.2\",\n+    \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n+    \"paths\": {\n+        \"/items/\": {\n+            \"get\": {\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                    },\n+                    \"422\": {\n+                        \"description\": \"Validation Error\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\n+                                    \"$ref\": \"#/components/schemas/HTTPValidationError\"\n+                                }\n+                            }\n+                        },\n+                    },\n+                },\n+                \"summary\": \"Read Items\",\n+                \"operationId\": \"read_items_items__get\",\n+                \"parameters\": [\n+                    {\n+                        \"required\": False,\n+                        \"schema\": {\"title\": \"Q\", \"type\": \"string\"},\n+                        \"name\": \"q\",\n+                        \"in\": \"query\",\n+                    },\n+                    {\n+                        \"required\": False,\n+                        \"schema\": {\"title\": \"Skip\", \"type\": \"integer\", \"default\": 0},\n+                        \"name\": \"skip\",\n+                        \"in\": \"query\",\n+                    },\n+                    {\n+                        \"required\": False,\n+                        \"schema\": {\"title\": \"Limit\", \"type\": \"integer\", \"default\": 100},\n+                        \"name\": \"limit\",\n+                        \"in\": \"query\",\n+                    },\n+                ],\n+            }\n+        },\n+    },\n+    \"components\": {\n+        \"schemas\": {\n+            \"ValidationError\": {\n+                \"title\": \"ValidationError\",\n+                \"required\": [\"loc\", \"msg\", \"type\"],\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"loc\": {\n+                        \"title\": \"Location\",\n+                        \"type\": \"array\",\n+                        \"items\": {\"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]},\n+                    },\n+                    \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n+                    \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n+                },\n+            },\n+            \"HTTPValidationError\": {\n+                \"title\": \"HTTPValidationError\",\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"detail\": {\n+                        \"title\": \"Detail\",\n+                        \"type\": \"array\",\n+                        \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n+                    }\n+                },\n+            },\n+        }\n+    },\n+}\n+\n+\n+@pytest.fixture(name=\"client\")\n+def get_client():\n+    from docs_src.annotated.tutorial002_py39 import app\n+\n+    client = TestClient(app)\n+    return client\n+\n+\n+@needs_py39\n+@pytest.mark.parametrize(\n+    \"path,expected_status,expected_response\",\n+    [\n+        (\"/items\", 200, {\"q\": None, \"skip\": 0, \"limit\": 100}),\n+        (\"/items?q=foo\", 200, {\"q\": \"foo\", \"skip\": 0, \"limit\": 100}),\n+        (\"/items?q=foo&skip=5\", 200, {\"q\": \"foo\", \"skip\": 5, \"limit\": 100}),\n+        (\"/items?q=foo&skip=5&limit=30\", 200, {\"q\": \"foo\", \"skip\": 5, \"limit\": 30}),\n+        (\"/openapi.json\", 200, openapi_schema),\n+    ],\n+)\n+def test_get(path, expected_status, expected_response, client):\n+    response = client.get(path)\n+    assert response.status_code == expected_status\n+    assert response.json() == expected_response\n\n@@ -0,0 +1,138 @@\n+import pytest\n+from fastapi.testclient import TestClient\n+\n+from docs_src.annotated.tutorial003 import app\n+\n+client = TestClient(app)\n+\n+openapi_schema = {\n+    \"openapi\": \"3.0.2\",\n+    \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n+    \"paths\": {\n+        \"/items/{item_id}\": {\n+            \"get\": {\n+                \"summary\": \"Read Items\",\n+                \"operationId\": \"read_items_items__item_id__get\",\n+                \"parameters\": [\n+                    {\n+                        \"required\": True,\n+                        \"schema\": {\n+                            \"title\": \"Item Id\",\n+                            \"exclusiveMinimum\": 0.0,\n+                            \"type\": \"integer\",\n+                        },\n+                        \"name\": \"item_id\",\n+                        \"in\": \"path\",\n+                    }\n+                ],\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                    },\n+                    \"422\": {\n+                        \"description\": \"Validation Error\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\n+                                    \"$ref\": \"#/components/schemas/HTTPValidationError\"\n+                                }\n+                            }\n+                        },\n+                    },\n+                },\n+            }\n+        },\n+        \"/users\": {\n+            \"get\": {\n+                \"summary\": \"Read Users\",\n+                \"operationId\": \"read_users_users_get\",\n+                \"parameters\": [\n+                    {\n+                        \"required\": False,\n+                        \"schema\": {\n+                            \"title\": \"User Id\",\n+                            \"minLength\": 1,\n+                            \"type\": \"string\",\n+                            \"default\": \"me\",\n+                        },\n+                        \"name\": \"user_id\",\n+                        \"in\": \"query\",\n+                    }\n+                ],\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                    },\n+                    \"422\": {\n+                        \"description\": \"Validation Error\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\n+                                    \"$ref\": \"#/components/schemas/HTTPValidationError\"\n+                                }\n+                            }\n+                        },\n+                    },\n+                },\n+            }\n+        },\n+    },\n+    \"components\": {\n+        \"schemas\": {\n+            \"HTTPValidationError\": {\n+                \"title\": \"HTTPValidationError\",\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"detail\": {\n+                        \"title\": \"Detail\",\n+                        \"type\": \"array\",\n+                        \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n+                    }\n+                },\n+            },\n+            \"ValidationError\": {\n+                \"title\": \"ValidationError\",\n+                \"required\": [\"loc\", \"msg\", \"type\"],\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"loc\": {\n+                        \"title\": \"Location\",\n+                        \"type\": \"array\",\n+                        \"items\": {\"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]},\n+                    },\n+                    \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n+                    \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n+                },\n+            },\n+        }\n+    },\n+}\n+\n+item_id_negative = {\n+    \"detail\": [\n+        {\n+            \"ctx\": {\"limit_value\": 0},\n+            \"loc\": [\"path\", \"item_id\"],\n+            \"msg\": \"ensure this value is greater than 0\",\n+            \"type\": \"value_error.number.not_gt\",\n+        }\n+    ]\n+}\n+\n+\n+@pytest.mark.parametrize(\n+    \"path,expected_status,expected_response\",\n+    [\n+        (\"/items/1\", 200, {\"item_id\": 1}),\n+        (\"/items/-1\", 422, item_id_negative),\n+        (\"/users\", 200, {\"user_id\": \"me\"}),\n+        (\"/users?user_id=foo\", 200, {\"user_id\": \"foo\"}),\n+        (\"/openapi.json\", 200, openapi_schema),\n+    ],\n+)\n+def test_get(path, expected_status, expected_response):\n+    response = client.get(path)\n+    assert response.status_code == expected_status, response.text\n+    assert response.json() == expected_response\n\n@@ -0,0 +1,145 @@\n+import pytest\n+from fastapi.testclient import TestClient\n+\n+from ...utils import needs_py39\n+\n+openapi_schema = {\n+    \"openapi\": \"3.0.2\",\n+    \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n+    \"paths\": {\n+        \"/items/{item_id}\": {\n+            \"get\": {\n+                \"summary\": \"Read Items\",\n+                \"operationId\": \"read_items_items__item_id__get\",\n+                \"parameters\": [\n+                    {\n+                        \"required\": True,\n+                        \"schema\": {\n+                            \"title\": \"Item Id\",\n+                            \"exclusiveMinimum\": 0.0,\n+                            \"type\": \"integer\",\n+                        },\n+                        \"name\": \"item_id\",\n+                        \"in\": \"path\",\n+                    }\n+                ],\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                    },\n+                    \"422\": {\n+                        \"description\": \"Validation Error\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\n+                                    \"$ref\": \"#/components/schemas/HTTPValidationError\"\n+                                }\n+                            }\n+                        },\n+                    },\n+                },\n+            }\n+        },\n+        \"/users\": {\n+            \"get\": {\n+                \"summary\": \"Read Users\",\n+                \"operationId\": \"read_users_users_get\",\n+                \"parameters\": [\n+                    {\n+                        \"required\": False,\n+                        \"schema\": {\n+                            \"title\": \"User Id\",\n+                            \"minLength\": 1,\n+                            \"type\": \"string\",\n+                            \"default\": \"me\",\n+                        },\n+                        \"name\": \"user_id\",\n+                        \"in\": \"query\",\n+                    }\n+                ],\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                    },\n+                    \"422\": {\n+                        \"description\": \"Validation Error\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\n+                                    \"$ref\": \"#/components/schemas/HTTPValidationError\"\n+                                }\n+                            }\n+                        },\n+                    },\n+                },\n+            }\n+        },\n+    },\n+    \"components\": {\n+        \"schemas\": {\n+            \"HTTPValidationError\": {\n+                \"title\": \"HTTPValidationError\",\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"detail\": {\n+                        \"title\": \"Detail\",\n+                        \"type\": \"array\",\n+                        \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n+                    }\n+                },\n+            },\n+            \"ValidationError\": {\n+                \"title\": \"ValidationError\",\n+                \"required\": [\"loc\", \"msg\", \"type\"],\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"loc\": {\n+                        \"title\": \"Location\",\n+                        \"type\": \"array\",\n+                        \"items\": {\"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]},\n+                    },\n+                    \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n+                    \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n+                },\n+            },\n+        }\n+    },\n+}\n+\n+item_id_negative = {\n+    \"detail\": [\n+        {\n+            \"ctx\": {\"limit_value\": 0},\n+            \"loc\": [\"path\", \"item_id\"],\n+            \"msg\": \"ensure this value is greater than 0\",\n+            \"type\": \"value_error.number.not_gt\",\n+        }\n+    ]\n+}\n+\n+\n+@pytest.fixture(name=\"client\")\n+def get_client():\n+    from docs_src.annotated.tutorial003_py39 import app\n+\n+    client = TestClient(app)\n+    return client\n+\n+\n+@needs_py39\n+@pytest.mark.parametrize(\n+    \"path,expected_status,expected_response\",\n+    [\n+        (\"/items/1\", 200, {\"item_id\": 1}),\n+        (\"/items/-1\", 422, item_id_negative),\n+        (\"/users\", 200, {\"user_id\": \"me\"}),\n+        (\"/users?user_id=foo\", 200, {\"user_id\": \"foo\"}),\n+        (\"/openapi.json\", 200, openapi_schema),\n+    ],\n+)\n+def test_get(path, expected_status, expected_response, client):\n+    response = client.get(path)\n+    assert response.status_code == expected_status, response.text\n+    assert response.json() == expected_response\n\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
