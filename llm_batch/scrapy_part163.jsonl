{"custom_id": "scrapy#681af6b2581b97f222eb95e7d4699247d63588f4", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 22 | Lines Deleted: 31 | Files Changed: 4 | Hunks: 15 | Methods Changed: 8 | Complexity Δ (Sum/Max): 2/3 | Churn Δ: 53 | Churn Cumulative: 1180 | Contributors (this commit): 4 | Commits (past 90d): 13 | Contributors (cumulative): 9 | DMM Complexity: 1.0\n\nDIFF:\n@@ -3,4 +3,3 @@ Selectors\n \"\"\"\n from scrapy.selector.unified import *\n from scrapy.selector.lxmlsel import *\n-from scrapy.selector.csssel import *\n\n@@ -1,16 +0,0 @@\n-from .unified import Selector\n-\n-\n-class CSSSelector(Selector):\n-\n-    default_contenttype = 'html'\n-\n-    def select(self, css):\n-        return self.css(css)\n-\n-\n-HtmlCSSSelector = CSSSelector\n-\n-\n-class XmlCSSSelector(CSSSelector):\n-    default_contenttype = 'xml'\n\n@@ -50,7 +50,7 @@ class Selector(object_ref):\n     def __init__(self, response=None, text=None, namespaces=None, contenttype=None,\n                  _root=None, _expr=None):\n \n-        self.contenttype = ct = self.default_contenttype or _ct(contenttype)\n+        self.contenttype = ct = _ct(response, contenttype or self.default_contenttype)\n         self._parser = _ctgroup[ct]['_parser']\n         self._csstranslator = _ctgroup[ct]['_csstranslator']\n         self._tostring_method = _ctgroup[ct]['_tostring_method']\n@@ -146,8 +146,11 @@ class SelectorList(list):\n     def __getslice__(self, i, j):\n         return self.__class__(list.__getslice__(self, i, j))\n \n-    def select(self, xpath):\n-        return self.__class__(flatten([x.select(xpath) for x in self]))\n+    def xpath(self, xpath):\n+        return self.__class__(flatten([x.xpath(xpath) for x in self]))\n+\n+    def css(self, xpath):\n+        return self.__class__(flatten([x.css(xpath) for x in self]))\n \n     def re(self, regex):\n         return flatten([x.re(regex) for x in self])\n@@ -155,10 +158,15 @@ class SelectorList(list):\n     def extract(self):\n         return [x.extract() for x in self]\n \n-    @deprecated(use_instead='SelectorList.extract')\n+    @deprecated(use_instead='.extract()')\n     def extract_unquoted(self):\n         return [x.extract_unquoted() for x in self]\n \n-    @deprecated(use_instead='SelectorList.select')\n+    @deprecated(use_instead='.xpath()')\n     def x(self, xpath):\n         return self.select(xpath)\n+\n+    @deprecated(use_instead='.xpath()')\n+    def select(self, xpath):\n+        return self.xpath(xpath)\n+\n\n@@ -2,9 +2,9 @@\n Selector tests for cssselect backend\n \"\"\"\n from twisted.trial import unittest\n-from scrapy.http import TextResponse, HtmlResponse, XmlResponse\n-from scrapy.selector import CSSSelector, XmlCSSSelector, HtmlCSSSelector\n+from scrapy.http import HtmlResponse\n from scrapy.selector.csstranslator import ScrapyHTMLTranslator\n+from scrapy.selector import Selector\n from cssselect.parser import SelectorSyntaxError\n from cssselect.xpath import ExpressionError\n \n@@ -116,20 +116,20 @@ class TranslatorMixinTest(unittest.TestCase):\n \n class HTMLCSSSelectorTest(unittest.TestCase):\n \n-    hcs_cls = HtmlCSSSelector\n+    hcs_cls = Selector\n \n     def setUp(self):\n         self.htmlresponse = HtmlResponse('http://example.com', body=HTMLBODY)\n         self.hcs = self.hcs_cls(self.htmlresponse)\n \n     def x(self, *a, **kw):\n-        return [v.strip() for v in self.hcs.select(*a, **kw).extract() if v.strip()]\n+        return [v.strip() for v in self.hcs.css(*a, **kw).extract() if v.strip()]\n \n     def test_selector_simple(self):\n-        for x in self.hcs.select('input'):\n+        for x in self.hcs.css('input'):\n             self.assertTrue(isinstance(x, self.hcs.__class__), x)\n-        self.assertEqual(self.hcs.select('input').extract(),\n-                         [x.extract() for x in self.hcs.select('input')])\n+        self.assertEqual(self.hcs.css('input').extract(),\n+                         [x.extract() for x in self.hcs.css('input')])\n \n     def test_text_pseudo_element(self):\n         self.assertEqual(self.x('#p-b2'), [u'<b id=\"p-b2\">guy</b>'])\n@@ -147,7 +147,7 @@ class HTMLCSSSelectorTest(unittest.TestCase):\n         self.assertEqual(self.x('map[name=\"dummymap\"] ::attr(shape)'), [u'circle', u'default'])\n \n     def test_nested_selector(self):\n-        self.assertEqual(self.hcs.select('p').select('b::text').extract(),\n+        self.assertEqual(self.hcs.css('p').css('b::text').extract(),\n                          [u'hi', u'guy'])\n-        self.assertEqual(self.hcs.select('div').select('area:last-child').extract(),\n+        self.assertEqual(self.hcs.css('div').css('area:last-child').extract(),\n                          [u'<area shape=\"default\" id=\"area-nohref\">'])\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "scrapy#a9eb0b74c8aebcbab72d5af20261c18bf8afc388", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 4 | Lines Deleted: 11 | Files Changed: 2 | Hunks: 4 | Methods Changed: 2 | Complexity Δ (Sum/Max): -4/0 | Churn Δ: 15 | Churn Cumulative: 690 | Contributors (this commit): 5 | Commits (past 90d): 4 | Contributors (cumulative): 7 | DMM Complexity: 1.0\n\nDIFF:\n@@ -11,7 +11,7 @@ from w3lib.url import any_to_uri\n \n from scrapy.item import BaseItem\n from scrapy.spider import BaseSpider\n-from scrapy.selector import XPathSelector, XmlXPathSelector, HtmlXPathSelector, XmlCSSSelector, HtmlCSSSelector\n+from scrapy.selector import Selector\n from scrapy.utils.spider import create_spider_for_request\n from scrapy.utils.misc import load_object\n from scrapy.utils.response import open_in_browser\n@@ -24,7 +24,7 @@ from scrapy.exceptions import IgnoreRequest\n class Shell(object):\n \n     relevant_classes = (BaseSpider, Request, Response, BaseItem,\n-        XPathSelector, Settings)\n+                        Selector, Settings)\n \n     def __init__(self, crawler, update_vars=None, code=None):\n         self.crawler = crawler\n@@ -95,14 +95,7 @@ class Shell(object):\n         self.vars['spider'] = spider\n         self.vars['request'] = request\n         self.vars['response'] = response\n-        self.vars['xxs'] = XmlXPathSelector(response) \\\n-            if isinstance(response, XmlResponse) else None\n-        self.vars['xcs'] = XmlCSSSelector(response) \\\n-            if isinstance(response, XmlResponse) else None\n-        self.vars['hxs'] = HtmlXPathSelector(response) \\\n-            if isinstance(response, HtmlResponse) else None\n-        self.vars['hcs'] = HtmlCSSSelector(response) \\\n-            if isinstance(response, HtmlResponse) else None\n+        self.vars['ss'] = Selector(response)\n         if self.inthread:\n             self.vars['fetch'] = self.fetch\n         self.vars['view'] = open_in_browser\n\n@@ -31,7 +31,7 @@ class ShellTest(ProcessTest, SiteTest, unittest.TestCase):\n \n     @defer.inlineCallbacks\n     def test_response_selector_html(self):\n-        xpath = 'hxs.select(\"//p[@class=\\'one\\']/text()\").extract()[0]'\n+        xpath = 'ss.xpath(\"//p[@class=\\'one\\']/text()\").extract()[0]'\n         _, out, _ = yield self.execute([self.url('/html'), '-c', xpath])\n         self.assertEqual(out.strip(), 'Works')\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "scrapy#e4d6e2eb317026069467f99913531ee56a00908c", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 378 | Contributors (this commit): 4 | Commits (past 90d): 3 | Contributors (cumulative): 4 | DMM Complexity: None\n\nDIFF:\n@@ -10,7 +10,7 @@ __all__ = ['HtmlXPathSelector', 'XmlXPathSelector', 'XPathSelector',\n \n class XPathSelector(Selector):\n     __slots__ = ()\n-    default_contenttype = 'xml'\n+    default_contenttype = 'html'\n \n \n class XmlXPathSelector(XPathSelector):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "scrapy#4e94b38396535bef740672c7a9852ed427c6b34c", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 222 | Lines Deleted: 188 | Files Changed: 5 | Hunks: 73 | Methods Changed: 52 | Complexity Δ (Sum/Max): 31/23 | Churn Δ: 410 | Churn Cumulative: 1798 | Contributors (this commit): 4 | Commits (past 90d): 11 | Contributors (cumulative): 12 | DMM Complexity: 1.0\n\nDIFF:\n@@ -12,6 +12,19 @@ class XPathSelector(Selector):\n     __slots__ = ()\n     default_contenttype = 'html'\n \n+    def __init__(self, *a, **kw):\n+        import warnings\n+        from scrapy.exceptions import ScrapyDeprecationWarning\n+        warnings.warn('%s is deprecated, instanciate scrapy.selector.Selector '\n+                      'instead' % type(self).__name__,\n+                      category=ScrapyDeprecationWarning, stacklevel=1)\n+        super(XPathSelector, self).__init__(*a, **kw)\n+\n+    def css(self, *a, **kw):\n+        raise RuntimeError('.css() method not available for %s, '\n+                           'instanciate scrapy.selector.Selector '\n+                           'instead' % type(self).__name__)\n+\n \n class XmlXPathSelector(XPathSelector):\n     __slots__ = ()\n@@ -28,7 +41,7 @@ class XPathSelectorList(SelectorList):\n     def __init__(self, *a, **kw):\n         import warnings\n         from scrapy.exceptions import ScrapyDeprecationWarning\n-        warnings.warn('XPathSelectorList is deprecated, use '\n+        warnings.warn('XPathSelectorList is deprecated, instanciate '\n                       'scrapy.selector.SelectorList instead',\n                       category=ScrapyDeprecationWarning, stacklevel=1)\n         super(XPathSelectorList, self).__init__(*a, **kw)\n\n@@ -1,81 +1,85 @@\n-\"\"\"\n-Selectors tests, common for all backends\n-\"\"\"\n-\n import re\n+import warnings\n import weakref\n-\n from twisted.trial import unittest\n-\n+from scrapy.exceptions import ScrapyDeprecationWarning\n from scrapy.http import TextResponse, HtmlResponse, XmlResponse\n-from scrapy.selector import XmlXPathSelector, HtmlXPathSelector, \\\n-    XPathSelector\n+from scrapy.selector import Selector\n+from scrapy.selector.lxmlsel import XmlXPathSelector, HtmlXPathSelector, XPathSelector\n \n \n-class XPathSelectorTestCase(unittest.TestCase):\n+class SelectorTestCase(unittest.TestCase):\n \n-    xs_cls = XPathSelector\n-    hxs_cls = HtmlXPathSelector\n-    xxs_cls = XmlXPathSelector\n+    sscls = Selector\n \n-    def test_selector_simple(self):\n+    def test_simple_selection(self):\n         \"\"\"Simple selector tests\"\"\"\n         body = \"<p><input name='a'value='1'/><input name='b'value='2'/></p>\"\n         response = TextResponse(url=\"http://example.com\", body=body)\n-        xpath = self.hxs_cls(response)\n+        ss = self.sscls(response)\n \n-        xl = xpath.select('//input')\n+        xl = ss.xpath('//input')\n         self.assertEqual(2, len(xl))\n         for x in xl:\n-            assert isinstance(x, self.hxs_cls)\n+            assert isinstance(x, self.sscls)\n \n-        self.assertEqual(xpath.select('//input').extract(),\n-                         [x.extract() for x in xpath.select('//input')])\n+        self.assertEqual(ss.xpath('//input').extract(),\n+                         [x.extract() for x in ss.xpath('//input')])\n \n-        self.assertEqual([x.extract() for x in xpath.select(\"//input[@name='a']/@name\")],\n+        self.assertEqual([x.extract() for x in ss.xpath(\"//input[@name='a']/@name\")],\n                          [u'a'])\n-        self.assertEqual([x.extract() for x in xpath.select(\"number(concat(//input[@name='a']/@value, //input[@name='b']/@value))\")],\n+        self.assertEqual([x.extract() for x in ss.xpath(\"number(concat(//input[@name='a']/@value, //input[@name='b']/@value))\")],\n                          [u'12.0'])\n \n-        self.assertEqual(xpath.select(\"concat('xpath', 'rules')\").extract(),\n+        self.assertEqual(ss.xpath(\"concat('xpath', 'rules')\").extract(),\n                          [u'xpathrules'])\n-        self.assertEqual([x.extract() for x in xpath.select(\"concat(//input[@name='a']/@value, //input[@name='b']/@value)\")],\n+        self.assertEqual([x.extract() for x in ss.xpath(\"concat(//input[@name='a']/@value, //input[@name='b']/@value)\")],\n                          [u'12'])\n \n-    def test_selector_unicode_query(self):\n+    def test_select_unicode_query(self):\n         body = u\"<p><input name='\\xa9' value='1'/></p>\"\n         response = TextResponse(url=\"http://example.com\", body=body, encoding='utf8')\n-        xpath = self.hxs_cls(response)\n-        self.assertEqual(xpath.select(u'//input[@name=\"\\xa9\"]/@value').extract(), [u'1'])\n+        ss = self.sscls(response)\n+        self.assertEqual(ss.xpath(u'//input[@name=\"\\xa9\"]/@value').extract(), [u'1'])\n \n-    def test_selector_same_type(self):\n-        \"\"\"Test XPathSelector returning the same type in x() method\"\"\"\n+    def test_list_elements_type(self):\n+        \"\"\"Test Selector returning the same type in selection methods\"\"\"\n         text = '<p>test<p>'\n-        assert isinstance(self.xxs_cls(text=text).select(\"//p\")[0],\n-                          self.xxs_cls)\n-        assert isinstance(self.hxs_cls(text=text).select(\"//p\")[0],\n-                          self.hxs_cls)\n+        assert isinstance(self.sscls(text=text).xpath(\"//p\")[0], self.sscls)\n+        assert isinstance(self.sscls(text=text).css(\"p\")[0], self.sscls)\n \n-    def test_selector_boolean_result(self):\n+    def test_boolean_result(self):\n         body = \"<p><input name='a'value='1'/><input name='b'value='2'/></p>\"\n         response = TextResponse(url=\"http://example.com\", body=body)\n-        xs = self.hxs_cls(response)\n-        self.assertEquals(xs.select(\"//input[@name='a']/@name='a'\").extract(), [u'1'])\n-        self.assertEquals(xs.select(\"//input[@name='a']/@name='n'\").extract(), [u'0'])\n-\n-    def test_selector_xml_html(self):\n-        \"\"\"Test that XML and HTML XPathSelector's behave differently\"\"\"\n+        xs = self.sscls(response)\n+        self.assertEquals(xs.xpath(\"//input[@name='a']/@name='a'\").extract(), [u'1'])\n+        self.assertEquals(xs.xpath(\"//input[@name='a']/@name='n'\").extract(), [u'0'])\n \n+    def test_differences_parsing_xml_vs_html(self):\n+        \"\"\"Test that XML and HTML Selector's behave differently\"\"\"\n         # some text which is parsed differently by XML and HTML flavors\n         text = '<div><img src=\"a.jpg\"><p>Hello</div>'\n-\n-        self.assertEqual(self.xxs_cls(text=text).select(\"//div\").extract(),\n-                         [u'<div><img src=\"a.jpg\"><p>Hello</p></img></div>'])\n-\n-        self.assertEqual(self.hxs_cls(text=text).select(\"//div\").extract(),\n+        hs = self.sscls(text=text, contenttype='html')\n+        self.assertEqual(hs.xpath(\"//div\").extract(),\n                          [u'<div><img src=\"a.jpg\"><p>Hello</p></div>'])\n \n-    def test_selector_nested(self):\n+        xs = self.sscls(text=text, contenttype='xml')\n+        self.assertEqual(xs.xpath(\"//div\").extract(),\n+                         [u'<div><img src=\"a.jpg\"><p>Hello</p></img></div>'])\n+\n+    def test_flavor_detection(self):\n+        text = '<div><img src=\"a.jpg\"><p>Hello</div>'\n+        ss = self.sscls(XmlResponse('http://example.com', body=text))\n+        self.assertEqual(ss.contenttype, 'xml')\n+        self.assertEqual(ss.xpath(\"//div\").extract(),\n+                         [u'<div><img src=\"a.jpg\"><p>Hello</p></img></div>'])\n+\n+        ss = self.sscls(HtmlResponse('http://example.com', body=text))\n+        self.assertEqual(ss.contenttype, 'html')\n+        self.assertEqual(ss.xpath(\"//div\").extract(),\n+                         [u'<div><img src=\"a.jpg\"><p>Hello</p></div>'])\n+\n+    def test_nested_selectors(self):\n         \"\"\"Nested selector tests\"\"\"\n         body = \"\"\"<body>\n                     <div class='one'>\n@@ -91,24 +95,30 @@ class XPathSelectorTestCase(unittest.TestCase):\n                   </body>\"\"\"\n \n         response = HtmlResponse(url=\"http://example.com\", body=body)\n-        x = self.hxs_cls(response)\n-\n-        divtwo = x.select('//div[@class=\"two\"]')\n-        self.assertEqual(map(unicode.strip, divtwo.select(\"//li\").extract()),\n+        x = self.sscls(response)\n+        divtwo = x.xpath('//div[@class=\"two\"]')\n+        self.assertEqual(divtwo.xpath(\"//li\").extract(),\n                          [\"<li>one</li>\", \"<li>two</li>\", \"<li>four</li>\", \"<li>five</li>\", \"<li>six</li>\"])\n-        self.assertEqual(map(unicode.strip, divtwo.select(\"./ul/li\").extract()),\n+        self.assertEqual(divtwo.xpath(\"./ul/li\").extract(),\n                          [\"<li>four</li>\", \"<li>five</li>\", \"<li>six</li>\"])\n-        self.assertEqual(map(unicode.strip, divtwo.select(\".//li\").extract()),\n+        self.assertEqual(divtwo.xpath(\".//li\").extract(),\n                          [\"<li>four</li>\", \"<li>five</li>\", \"<li>six</li>\"])\n-        self.assertEqual(divtwo.select(\"./li\").extract(),\n-                         [])\n+        self.assertEqual(divtwo.xpath(\"./li\").extract(), [])\n+\n+    def test_mixed_nested_selectors(self):\n+        body = '''<body>\n+                    <div id=1>not<span>me</span></div>\n+                    <div class=\"dos\"><p>text</p><a href='#'>foo</a></div>\n+               </body>'''\n+        ss = self.sscls(text=body)\n+        self.assertEqual(ss.xpath('//div[@id=\"1\"]').css('span::text').extract(), [u'me'])\n+        self.assertEqual(ss.css('#1').xpath('./span/text()').extract(), [u'me'])\n \n     def test_dont_strip(self):\n-        hxs = self.hxs_cls(text='<div>fff: <a href=\"#\">zzz</a></div>')\n-        self.assertEqual(hxs.select(\"//text()\").extract(),\n-            [u'fff: ', u'zzz'])\n+        hxs = self.sscls(text='<div>fff: <a href=\"#\">zzz</a></div>')\n+        self.assertEqual(hxs.xpath(\"//text()\").extract(), [u'fff: ', u'zzz'])\n \n-    def test_selector_namespaces_simple(self):\n+    def test_namespaces_simple(self):\n         body = \"\"\"\n         <test xmlns:somens=\"http://scrapy.org\">\n            <somens:a id=\"foo\">take this</a>\n@@ -117,13 +127,13 @@ class XPathSelectorTestCase(unittest.TestCase):\n         \"\"\"\n \n         response = XmlResponse(url=\"http://example.com\", body=body)\n-        x = self.xxs_cls(response)\n+        x = self.sscls(response)\n \n         x.register_namespace(\"somens\", \"http://scrapy.org\")\n-        self.assertEqual(x.select(\"//somens:a/text()\").extract(),\n+        self.assertEqual(x.xpath(\"//somens:a/text()\").extract(),\n                          [u'take this'])\n \n-    def test_selector_namespaces_multiple(self):\n+    def test_namespaces_multiple(self):\n         body = \"\"\"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n <BrowseNode xmlns=\"http://webservices.amazon.com/AWSECommerceService/2005-10-05\"\n             xmlns:b=\"http://somens.com\"\n@@ -134,19 +144,18 @@ class XPathSelectorTestCase(unittest.TestCase):\n </BrowseNode>\n         \"\"\"\n         response = XmlResponse(url=\"http://example.com\", body=body)\n-        x = self.xxs_cls(response)\n-\n+        x = self.sscls(response)\n         x.register_namespace(\"xmlns\", \"http://webservices.amazon.com/AWSECommerceService/2005-10-05\")\n         x.register_namespace(\"p\", \"http://www.scrapy.org/product\")\n         x.register_namespace(\"b\", \"http://somens.com\")\n-        self.assertEqual(len(x.select(\"//xmlns:TestTag\")), 1)\n-        self.assertEqual(x.select(\"//b:Operation/text()\").extract()[0], 'hello')\n-        self.assertEqual(x.select(\"//xmlns:TestTag/@b:att\").extract()[0], 'value')\n-        self.assertEqual(x.select(\"//p:SecondTestTag/xmlns:price/text()\").extract()[0], '90')\n-        self.assertEqual(x.select(\"//p:SecondTestTag\").select(\"./xmlns:price/text()\")[0].extract(), '90')\n-        self.assertEqual(x.select(\"//p:SecondTestTag/xmlns:material/text()\").extract()[0], 'iron')\n+        self.assertEqual(len(x.xpath(\"//xmlns:TestTag\")), 1)\n+        self.assertEqual(x.xpath(\"//b:Operation/text()\").extract()[0], 'hello')\n+        self.assertEqual(x.xpath(\"//xmlns:TestTag/@b:att\").extract()[0], 'value')\n+        self.assertEqual(x.xpath(\"//p:SecondTestTag/xmlns:price/text()\").extract()[0], '90')\n+        self.assertEqual(x.xpath(\"//p:SecondTestTag\").xpath(\"./xmlns:price/text()\")[0].extract(), '90')\n+        self.assertEqual(x.xpath(\"//p:SecondTestTag/xmlns:material/text()\").extract()[0], 'iron')\n \n-    def test_selector_re(self):\n+    def test_re(self):\n         body = \"\"\"<div>Name: Mary\n                     <ul>\n                       <li>Name: John</li>\n@@ -155,44 +164,35 @@ class XPathSelectorTestCase(unittest.TestCase):\n                       <li>Age: 20</li>\n                     </ul>\n                     Age: 20\n-                  </div>\n-\n-               \"\"\"\n+                  </div>\"\"\"\n         response = HtmlResponse(url=\"http://example.com\", body=body)\n-        x = self.hxs_cls(response)\n+        x = self.sscls(response)\n \n         name_re = re.compile(\"Name: (\\w+)\")\n-        self.assertEqual(x.select(\"//ul/li\").re(name_re),\n+        self.assertEqual(x.xpath(\"//ul/li\").re(name_re),\n                          [\"John\", \"Paul\"])\n-        self.assertEqual(x.select(\"//ul/li\").re(\"Age: (\\d+)\"),\n+        self.assertEqual(x.xpath(\"//ul/li\").re(\"Age: (\\d+)\"),\n                          [\"10\", \"20\"])\n \n-    def test_selector_re_intl(self):\n+    def test_re_intl(self):\n         body = \"\"\"<div>Evento: cumplea\\xc3\\xb1os</div>\"\"\"\n         response = HtmlResponse(url=\"http://example.com\", body=body, encoding='utf-8')\n-        x = self.hxs_cls(response)\n-        self.assertEqual(x.select(\"//div\").re(\"Evento: (\\w+)\"), [u'cumplea\\xf1os'])\n+        x = self.sscls(response)\n+        self.assertEqual(x.xpath(\"//div\").re(\"Evento: (\\w+)\"), [u'cumplea\\xf1os'])\n \n     def test_selector_over_text(self):\n-        hxs = self.hxs_cls(text='<root>lala</root>')\n-        self.assertEqual(hxs.extract(),\n-                         u'<html><body><root>lala</root></body></html>')\n+        hs = self.sscls(text='<root>lala</root>')\n+        self.assertEqual(hs.extract(), u'<html><body><root>lala</root></body></html>')\n+        xs = self.sscls(text='<root>lala</root>', contenttype='xml')\n+        self.assertEqual(xs.extract(), u'<root>lala</root>')\n+        self.assertEqual(xs.xpath('.').extract(), [u'<root>lala</root>'])\n \n-        xxs = self.xxs_cls(text='<root>lala</root>')\n-        self.assertEqual(xxs.extract(),\n-                         u'<root>lala</root>')\n-\n-        xxs = self.xxs_cls(text='<root>lala</root>')\n-        self.assertEqual(xxs.select('.').extract(),\n-                         [u'<root>lala</root>'])\n-\n-\n-    def test_selector_invalid_xpath(self):\n+    def test_invalid_xpath(self):\n         response = XmlResponse(url=\"http://example.com\", body=\"<html></html>\")\n-        x = self.hxs_cls(response)\n+        x = self.sscls(response)\n         xpath = \"//test[@foo='bar]\"\n         try:\n-            x.select(xpath)\n+            x.xpath(xpath)\n         except ValueError, e:\n             assert xpath in str(e), \"Exception message does not contain invalid xpath\"\n         except Exception:\n@@ -215,64 +215,121 @@ class XPathSelectorTestCase(unittest.TestCase):\n \n         headers = {'Content-Type': ['text/html; charset=utf-8']}\n         response = HtmlResponse(url=\"http://example.com\", headers=headers, body=html_utf8)\n-        x = self.hxs_cls(response)\n-        self.assertEquals(x.select(\"//span[@id='blank']/text()\").extract(),\n+        x = self.sscls(response)\n+        self.assertEquals(x.xpath(\"//span[@id='blank']/text()\").extract(),\n                           [u'\\xa3'])\n \n     def test_empty_bodies(self):\n         # shouldn't raise errors\n         r1 = TextResponse('http://www.example.com', body='')\n-        self.hxs_cls(r1).select('//text()').extract()\n-        self.xxs_cls(r1).select('//text()').extract()\n+        self.sscls(r1).xpath('//text()').extract()\n \n     def test_null_bytes(self):\n         # shouldn't raise errors\n         r1 = TextResponse('http://www.example.com', \\\n                           body='<root>pre\\x00post</root>', \\\n                           encoding='utf-8')\n-        self.hxs_cls(r1).select('//text()').extract()\n-        self.xxs_cls(r1).select('//text()').extract()\n+        self.sscls(r1).xpath('//text()').extract()\n \n     def test_badly_encoded_body(self):\n         # \\xe9 alone isn't valid utf8 sequence\n         r1 = TextResponse('http://www.example.com', \\\n                           body='<html><p>an Jos\\xe9 de</p><html>', \\\n                           encoding='utf-8')\n-        self.hxs_cls(r1).select('//text()').extract()\n-        self.xxs_cls(r1).select('//text()').extract()\n+        self.sscls(r1).xpath('//text()').extract()\n \n     def test_select_on_unevaluable_nodes(self):\n-        r = self.hxs_cls(text=u'<span class=\"big\">some text</span>')\n+        r = self.sscls(text=u'<span class=\"big\">some text</span>')\n         # Text node\n-        x1 = r.select('//text()')\n+        x1 = r.xpath('//text()')\n         self.assertEquals(x1.extract(), [u'some text'])\n-        self.assertEquals(x1.select('.//b').extract(), [])\n+        self.assertEquals(x1.xpath('.//b').extract(), [])\n         # Tag attribute\n-        x1 = r.select('//span/@class')\n+        x1 = r.xpath('//span/@class')\n         self.assertEquals(x1.extract(), [u'big'])\n-        self.assertEquals(x1.select('.//text()').extract(), [])\n+        self.assertEquals(x1.xpath('.//text()').extract(), [])\n \n     def test_select_on_text_nodes(self):\n-        r = self.hxs_cls(text=u'<div><b>Options:</b>opt1</div><div><b>Other</b>opt2</div>')\n-        x1 = r.select(\"//div/descendant::text()[preceding-sibling::b[contains(text(), 'Options')]]\")\n+        r = self.sscls(text=u'<div><b>Options:</b>opt1</div><div><b>Other</b>opt2</div>')\n+        x1 = r.xpath(\"//div/descendant::text()[preceding-sibling::b[contains(text(), 'Options')]]\")\n         self.assertEquals(x1.extract(), [u'opt1'])\n \n-        x1 = r.select(\"//div/descendant::text()/preceding-sibling::b[contains(text(), 'Options')]\")\n+        x1 = r.xpath(\"//div/descendant::text()/preceding-sibling::b[contains(text(), 'Options')]\")\n         self.assertEquals(x1.extract(), [u'<b>Options:</b>'])\n \n     def test_nested_select_on_text_nodes(self):\n         # FIXME: does not work with lxml backend [upstream]\n-        r = self.hxs_cls(text=u'<div><b>Options:</b>opt1</div><div><b>Other</b>opt2</div>')\n-        x1 = r.select(\"//div/descendant::text()\")\n-        x2 = x1.select(\"./preceding-sibling::b[contains(text(), 'Options')]\")\n-\n+        r = self.sscls(text=u'<div><b>Options:</b>opt1</div><div><b>Other</b>opt2</div>')\n+        x1 = r.xpath(\"//div/descendant::text()\")\n+        x2 = x1.xpath(\"./preceding-sibling::b[contains(text(), 'Options')]\")\n         self.assertEquals(x2.extract(), [u'<b>Options:</b>'])\n-    test_nested_select_on_text_nodes.skip = True\n+    test_nested_select_on_text_nodes.skip = \"Text nodes lost parent node reference in lxml\"\n \n     def test_weakref_slots(self):\n         \"\"\"Check that classes are using slots and are weak-referenceable\"\"\"\n-        for cls in [self.xs_cls, self.hxs_cls, self.xxs_cls]:\n-            x = cls()\n+        x = self.sscls()\n         weakref.ref(x)\n         assert not hasattr(x, '__dict__'), \"%s does not use __slots__\" % \\\n             x.__class__.__name__\n+\n+    def test_remove_namespaces(self):\n+        xml = \"\"\"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<feed xmlns=\"http://www.w3.org/2005/Atom\" xml:lang=\"en-US\" xmlns:media=\"http://search.yahoo.com/mrss/\">\n+  <link type=\"text/html\">\n+  <link type=\"application/atom+xml\">\n+</feed>\n+\"\"\"\n+        xxs = self.sscls(XmlResponse(\"http://example.com/feed.atom\", body=xml))\n+        self.assertEqual(len(xxs.xpath(\"//link\")), 0)\n+        xxs.remove_namespaces()\n+        self.assertEqual(len(xxs.xpath(\"//link\")), 2)\n+\n+    def test_remove_attributes_namespaces(self):\n+        xml = \"\"\"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<feed xmlns:atom=\"http://www.w3.org/2005/Atom\" xml:lang=\"en-US\" xmlns:media=\"http://search.yahoo.com/mrss/\">\n+  <link atom:type=\"text/html\">\n+  <link atom:type=\"application/atom+xml\">\n+</feed>\n+\"\"\"\n+        xxs = self.sscls(XmlResponse(\"http://example.com/feed.atom\", body=xml))\n+        self.assertEqual(len(xxs.xpath(\"//link/@type\")), 0)\n+        xxs.remove_namespaces()\n+        self.assertEqual(len(xxs.xpath(\"//link/@type\")), 2)\n+\n+\n+class DeprecatedXpathSelectorTest(unittest.TestCase):\n+\n+    text = '<div><img src=\"a.jpg\"><p>Hello</div>'\n+\n+    def test_warnings(self):\n+        for cls in XPathSelector, HtmlXPathSelector, XPathSelector:\n+            with warnings.catch_warnings(record=True) as w:\n+                warnings.simplefilter('always')\n+                hs = cls(text=self.text)\n+                assert len(w) == 1, w\n+                assert issubclass(w[0].category, ScrapyDeprecationWarning)\n+                assert 'deprecated' in str(w[-1].message)\n+                hs.select(\"//div\").extract()\n+                assert issubclass(w[1].category, ScrapyDeprecationWarning)\n+                assert 'deprecated' in str(w[-1].message)\n+\n+    def test_xpathselector(self):\n+        with warnings.catch_warnings(record=True):\n+            hs = XPathSelector(text=self.text)\n+            self.assertEqual(hs.select(\"//div\").extract(),\n+                             [u'<div><img src=\"a.jpg\"><p>Hello</p></div>'])\n+            self.assertRaises(RuntimeError, hs.css, 'div')\n+\n+    def test_htmlxpathselector(self):\n+        with warnings.catch_warnings(record=True):\n+            hs = HtmlXPathSelector(text=self.text)\n+            self.assertEqual(hs.select(\"//div\").extract(),\n+                             [u'<div><img src=\"a.jpg\"><p>Hello</p></div>'])\n+            self.assertRaises(RuntimeError, hs.css, 'div')\n+\n+    def test_xmlxpathselector(self):\n+        with warnings.catch_warnings(record=True):\n+            xs = XmlXPathSelector(text=self.text)\n+            self.assertEqual(xs.select(\"//div\").extract(),\n+                             [u'<div><img src=\"a.jpg\"><p>Hello</p></img></div>'])\n+            self.assertRaises(RuntimeError, xs.css, 'div')\n\n@@ -114,22 +114,22 @@ class TranslatorMixinTest(unittest.TestCase):\n             self.assertRaises(exc, self.c2x, css)\n \n \n-class HTMLCSSSelectorTest(unittest.TestCase):\n+class CSSSelectorTest(unittest.TestCase):\n \n-    hcs_cls = Selector\n+    sscls = Selector\n \n     def setUp(self):\n         self.htmlresponse = HtmlResponse('http://example.com', body=HTMLBODY)\n-        self.hcs = self.hcs_cls(self.htmlresponse)\n+        self.ss = self.sscls(self.htmlresponse)\n \n     def x(self, *a, **kw):\n-        return [v.strip() for v in self.hcs.css(*a, **kw).extract() if v.strip()]\n+        return [v.strip() for v in self.ss.css(*a, **kw).extract() if v.strip()]\n \n     def test_selector_simple(self):\n-        for x in self.hcs.css('input'):\n-            self.assertTrue(isinstance(x, self.hcs.__class__), x)\n-        self.assertEqual(self.hcs.css('input').extract(),\n-                         [x.extract() for x in self.hcs.css('input')])\n+        for x in self.ss.css('input'):\n+            self.assertTrue(isinstance(x, self.ss.__class__), x)\n+        self.assertEqual(self.ss.css('input').extract(),\n+                         [x.extract() for x in self.ss.css('input')])\n \n     def test_text_pseudo_element(self):\n         self.assertEqual(self.x('#p-b2'), [u'<b id=\"p-b2\">guy</b>'])\n@@ -147,7 +147,7 @@ class HTMLCSSSelectorTest(unittest.TestCase):\n         self.assertEqual(self.x('map[name=\"dummymap\"] ::attr(shape)'), [u'circle', u'default'])\n \n     def test_nested_selector(self):\n-        self.assertEqual(self.hcs.css('p').css('b::text').extract(),\n+        self.assertEqual(self.ss.css('p').css('b::text').extract(),\n                          [u'hi', u'guy'])\n-        self.assertEqual(self.hcs.css('div').css('area:last-child').extract(),\n+        self.assertEqual(self.ss.css('div').css('area:last-child').extract(),\n                          [u'<area shape=\"default\" id=\"area-nohref\">'])\n\n@@ -1,62 +0,0 @@\n-\"\"\"\n-Selectors tests, specific for lxml backend\n-\"\"\"\n-\n-import unittest\n-from scrapy.tests import test_selector\n-from scrapy.http import TextResponse, HtmlResponse, XmlResponse\n-from scrapy.selector.lxmldocument import LxmlDocument\n-from scrapy.selector.lxmlsel import XmlXPathSelector, HtmlXPathSelector, XPathSelector\n-\n-\n-class LxmlXPathSelectorTestCase(test_selector.XPathSelectorTestCase):\n-\n-    xs_cls = XPathSelector\n-    hxs_cls = HtmlXPathSelector\n-    xxs_cls = XmlXPathSelector\n-\n-    def test_remove_namespaces(self):\n-        xml = \"\"\"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n-<feed xmlns=\"http://www.w3.org/2005/Atom\" xml:lang=\"en-US\" xmlns:media=\"http://search.yahoo.com/mrss/\">\n-  <link type=\"text/html\">\n-  <link type=\"application/atom+xml\">\n-</feed>\n-\"\"\"\n-        xxs = XmlXPathSelector(XmlResponse(\"http://example.com/feed.atom\", body=xml))\n-        self.assertEqual(len(xxs.select(\"//link\")), 0)\n-        xxs.remove_namespaces()\n-        self.assertEqual(len(xxs.select(\"//link\")), 2)\n-\n-    def test_remove_attributes_namespaces(self):\n-        xml = \"\"\"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n-<feed xmlns:atom=\"http://www.w3.org/2005/Atom\" xml:lang=\"en-US\" xmlns:media=\"http://search.yahoo.com/mrss/\">\n-  <link atom:type=\"text/html\">\n-  <link atom:type=\"application/atom+xml\">\n-</feed>\n-\"\"\"\n-        xxs = XmlXPathSelector(XmlResponse(\"http://example.com/feed.atom\", body=xml))\n-        self.assertEqual(len(xxs.select(\"//link/@type\")), 0)\n-        xxs.remove_namespaces()\n-        self.assertEqual(len(xxs.select(\"//link/@type\")), 2)\n-\n-\n-class Libxml2DocumentTest(unittest.TestCase):\n-\n-    def test_caching(self):\n-        r1 = HtmlResponse('http://www.example.com', body='<html><head></head><body></body></html>')\n-        r2 = r1.copy()\n-\n-        doc1 = LxmlDocument(r1)\n-        doc2 = LxmlDocument(r1)\n-        doc3 = LxmlDocument(r2)\n-\n-        # make sure it's cached\n-        assert doc1 is doc2\n-        assert doc1 is not doc3\n-\n-    def test_null_char(self):\n-        # make sure bodies with null char ('\\x00') don't raise a TypeError exception\n-        self.body_content = 'test problematic \\x00 body'\n-        response = TextResponse('http://example.com/catalog/product/blabla-123',\n-                            headers={'Content-Type': 'text/plain; charset=utf-8'}, body=self.body_content)\n-        LxmlDocument(response)\n\n@@ -0,0 +1,26 @@\n+import unittest\n+from scrapy.selector.lxmldocument import LxmlDocument\n+from scrapy.http import TextResponse, HtmlResponse\n+\n+\n+class Libxml2DocumentTest(unittest.TestCase):\n+\n+    def test_caching(self):\n+        r1 = HtmlResponse('http://www.example.com', body='<html><head></head><body></body></html>')\n+        r2 = r1.copy()\n+\n+        doc1 = LxmlDocument(r1)\n+        doc2 = LxmlDocument(r1)\n+        doc3 = LxmlDocument(r2)\n+\n+        # make sure it's cached\n+        assert doc1 is doc2\n+        assert doc1 is not doc3\n+\n+    def test_null_char(self):\n+        # make sure bodies with null char ('\\x00') don't raise a TypeError exception\n+        body = 'test problematic \\x00 body'\n+        response = TextResponse('http://example.com/catalog/product/blabla-123',\n+                                headers={'Content-Type': 'text/plain; charset=utf-8'},\n+                                body=body)\n+        LxmlDocument(response)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "scrapy#add3506928f78e001a200a0966925486ab67b84c", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 37 | Lines Deleted: 38 | Files Changed: 8 | Hunks: 26 | Methods Changed: 13 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 75 | Churn Cumulative: 1798 | Contributors (this commit): 7 | Commits (past 90d): 8 | Contributors (cumulative): 28 | DMM Complexity: None\n\nDIFF:\n@@ -4,7 +4,7 @@ SGMLParser-based Link extractors\n import re\n from urlparse import urlparse, urljoin\n from w3lib.url import safe_url_string\n-from scrapy.selector import HtmlXPathSelector\n+from scrapy.selector import Selector\n from scrapy.link import Link\n from scrapy.linkextractor import IGNORED_EXTENSIONS\n from scrapy.utils.misc import arg_to_iter\n@@ -116,11 +116,11 @@ class SgmlLinkExtractor(BaseSgmlLinkExtractor):\n     def extract_links(self, response):\n         base_url = None\n         if self.restrict_xpaths:\n-            hxs = HtmlXPathSelector(response)\n+            ss = Selector(response)\n             base_url = get_base_url(response)\n             body = u''.join(f\n                             for x in self.restrict_xpaths\n-                            for f in hxs.select(x).extract()\n+                            for f in ss.xpath(x).extract()\n                             ).encode(response.encoding)\n         else:\n             body = response.body\n\n@@ -8,7 +8,7 @@ from collections import defaultdict\n import re\n \n from scrapy.item import Item\n-from scrapy.selector import HtmlXPathSelector\n+from scrapy.selector import Selector\n from scrapy.utils.misc import arg_to_iter, extract_regex\n from scrapy.utils.python import flatten\n from .common import wrap_loader_context\n@@ -116,7 +116,7 @@ class ItemLoader(object):\n \n class XPathItemLoader(ItemLoader):\n \n-    default_selector_class = HtmlXPathSelector\n+    default_selector_class = Selector\n \n     def __init__(self, item=None, selector=None, response=None, **context):\n         if selector is None and response is None:\n@@ -142,5 +142,4 @@ class XPathItemLoader(ItemLoader):\n \n     def _get_values(self, xpaths, **kw):\n         xpaths = arg_to_iter(xpaths)\n-        return flatten([self.selector.select(xpath).extract() for xpath in xpaths])\n-\n+        return flatten([self.selector.xpath(xpath).extract() for xpath in xpaths])\n\n@@ -9,7 +9,7 @@ from scrapy.item import BaseItem\n from scrapy.http import Request\n from scrapy.utils.iterators import xmliter, csviter\n from scrapy.utils.spider import iterate_spider_output\n-from scrapy.selector import XmlXPathSelector, HtmlXPathSelector\n+from scrapy.selector import Selector\n from scrapy.exceptions import NotConfigured, NotSupported\n \n \n@@ -52,7 +52,7 @@ class XMLFeedSpider(BaseSpider):\n \n     def parse_nodes(self, response, nodes):\n         \"\"\"This method is called for the nodes matching the provided tag name\n-        (itertag). Receives the response and an XPathSelector for each node.\n+        (itertag). Receives the response and an Selector for each node.\n         Overriding this method is mandatory. Otherwise, you spider won't work.\n         This method must return either a BaseItem, a Request, or a list\n         containing any of them.\n@@ -71,13 +71,13 @@ class XMLFeedSpider(BaseSpider):\n         if self.iterator == 'iternodes':\n             nodes = self._iternodes(response)\n         elif self.iterator == 'xml':\n-            selector = XmlXPathSelector(response)\n+            selector = Selector(response, contenttype='xml')\n             self._register_namespaces(selector)\n-            nodes = selector.select('//%s' % self.itertag)\n+            nodes = selector.xpath('//%s' % self.itertag)\n         elif self.iterator == 'html':\n-            selector = HtmlXPathSelector(response)\n+            selector = Selector(response, contenttype='html')\n             self._register_namespaces(selector)\n-            nodes = selector.select('//%s' % self.itertag)\n+            nodes = selector.xpath('//%s' % self.itertag)\n         else:\n             raise NotSupported('Unsupported node iterator')\n \n\n@@ -1,5 +1,5 @@\n from scrapy.http import Response\n-from scrapy.selector import XmlXPathSelector\n+from scrapy.selector import Selector\n \n \n def xmliter_lxml(obj, nodename, namespace=None):\n@@ -11,10 +11,10 @@ def xmliter_lxml(obj, nodename, namespace=None):\n     for _, node in iterable:\n         nodetext = etree.tostring(node)\n         node.clear()\n-        xs = XmlXPathSelector(text=nodetext)\n+        xs = Selector(text=nodetext, contenttype='xml')\n         if namespace:\n             xs.register_namespace('x', namespace)\n-        yield xs.select(selxpath)[0]\n+        yield xs.xpath(selxpath)[0]\n \n \n class _StreamReader(object):\n\n@@ -4,7 +4,7 @@ from scrapy.contrib.loader import ItemLoader, XPathItemLoader\n from scrapy.contrib.loader.processor import Join, Identity, TakeFirst, \\\n     Compose, MapCompose\n from scrapy.item import Item, Field\n-from scrapy.selector import HtmlXPathSelector\n+from scrapy.selector import Selector\n from scrapy.http import HtmlResponse\n \n \n@@ -379,7 +379,7 @@ class XPathItemLoaderTest(unittest.TestCase):\n         self.assertRaises(RuntimeError, XPathItemLoader)\n \n     def test_constructor_with_selector(self):\n-        sel = HtmlXPathSelector(text=u\"<html><body><div>marta</div></body></html>\")\n+        sel = Selector(text=u\"<html><body><div>marta</div></body></html>\")\n         l = TestXPathItemLoader(selector=sel)\n         self.assert_(l.selector is sel)\n         l.add_xpath('name', '//div/text()')\n\n@@ -70,10 +70,10 @@ class XMLFeedSpiderTest(BaseSpiderTest):\n \n             def parse_node(self, response, selector):\n                 yield {\n-                    'loc': selector.select('a:loc/text()').extract(),\n-                    'updated': selector.select('b:updated/text()').extract(),\n-                    'other': selector.select('other/@value').extract(),\n-                    'custom': selector.select('other/@b:custom').extract(),\n+                    'loc': selector.xpath('a:loc/text()').extract(),\n+                    'updated': selector.xpath('b:updated/text()').extract(),\n+                    'other': selector.xpath('other/@value').extract(),\n+                    'custom': selector.xpath('other/@b:custom').extract(),\n                 }\n \n         for iterator in ('iternodes', 'xml'):\n\n@@ -28,7 +28,7 @@ class XmliterTestCase(unittest.TestCase):\n         response = XmlResponse(url=\"http://example.com\", body=body)\n         attrs = []\n         for x in self.xmliter(response, 'product'):\n-            attrs.append((x.select(\"@id\").extract(), x.select(\"name/text()\").extract(), x.select(\"./type/text()\").extract()))\n+            attrs.append((x.xpath(\"@id\").extract(), x.xpath(\"name/text()\").extract(), x.xpath(\"./type/text()\").extract()))\n \n         self.assertEqual(attrs,\n                          [(['001'], ['Name 1'], ['Type 1']), (['002'], ['Name 2'], ['Type 2'])])\n@@ -36,7 +36,7 @@ class XmliterTestCase(unittest.TestCase):\n     def test_xmliter_text(self):\n         body = u\"\"\"<?xml version=\"1.0\" encoding=\"UTF-8\"?><products><product>one</product><product>two</product></products>\"\"\"\n \n-        self.assertEqual([x.select(\"text()\").extract() for x in self.xmliter(body, 'product')],\n+        self.assertEqual([x.xpath(\"text()\").extract() for x in self.xmliter(body, 'product')],\n                          [[u'one'], [u'two']])\n \n     def test_xmliter_namespaces(self):\n@@ -63,15 +63,15 @@ class XmliterTestCase(unittest.TestCase):\n \n         node = my_iter.next()\n         node.register_namespace('g', 'http://base.google.com/ns/1.0')\n-        self.assertEqual(node.select('title/text()').extract(), ['Item 1'])\n-        self.assertEqual(node.select('description/text()').extract(), ['This is item 1'])\n-        self.assertEqual(node.select('link/text()').extract(), ['http://www.mydummycompany.com/items/1'])\n-        self.assertEqual(node.select('g:image_link/text()').extract(), ['http://www.mydummycompany.com/images/item1.jpg'])\n-        self.assertEqual(node.select('g:id/text()').extract(), ['ITEM_1'])\n-        self.assertEqual(node.select('g:price/text()').extract(), ['400'])\n-        self.assertEqual(node.select('image_link/text()').extract(), [])\n-        self.assertEqual(node.select('id/text()').extract(), [])\n-        self.assertEqual(node.select('price/text()').extract(), [])\n+        self.assertEqual(node.xpath('title/text()').extract(), ['Item 1'])\n+        self.assertEqual(node.xpath('description/text()').extract(), ['This is item 1'])\n+        self.assertEqual(node.xpath('link/text()').extract(), ['http://www.mydummycompany.com/items/1'])\n+        self.assertEqual(node.xpath('g:image_link/text()').extract(), ['http://www.mydummycompany.com/images/item1.jpg'])\n+        self.assertEqual(node.xpath('g:id/text()').extract(), ['ITEM_1'])\n+        self.assertEqual(node.xpath('g:price/text()').extract(), ['400'])\n+        self.assertEqual(node.xpath('image_link/text()').extract(), [])\n+        self.assertEqual(node.xpath('id/text()').extract(), [])\n+        self.assertEqual(node.xpath('price/text()').extract(), [])\n \n     def test_xmliter_exception(self):\n         body = u\"\"\"<?xml version=\"1.0\" encoding=\"UTF-8\"?><products><product>one</product><product>two</product></products>\"\"\"\n@@ -123,9 +123,9 @@ class LxmlXmliterTestCase(XmliterTestCase):\n \n         namespace_iter = self.xmliter(response, 'image_link', 'http://base.google.com/ns/1.0')\n         node = namespace_iter.next()\n-        self.assertEqual(node.select('text()').extract(), ['http://www.mydummycompany.com/images/item1.jpg'])\n+        self.assertEqual(node.xpath('text()').extract(), ['http://www.mydummycompany.com/images/item1.jpg'])\n         node = namespace_iter.next()\n-        self.assertEqual(node.select('text()').extract(), ['http://www.mydummycompany.com/images/item2.jpg'])\n+        self.assertEqual(node.xpath('text()').extract(), ['http://www.mydummycompany.com/images/item2.jpg'])\n \n \n class UtilsCsvTestCase(unittest.TestCase):\n\n@@ -2,14 +2,14 @@ import re, csv\n from cStringIO import StringIO\n \n from scrapy.http import TextResponse\n-from scrapy.selector import XmlXPathSelector\n+from scrapy.selector import Selector\n from scrapy import log\n from scrapy.utils.python import re_rsearch, str_to_unicode\n from scrapy.utils.response import body_or_str\n \n \n def xmliter(obj, nodename):\n-    \"\"\"Return a iterator of XPathSelector's over all nodes of a XML document,\n+    \"\"\"Return a iterator of Selector's over all nodes of a XML document,\n        given tha name of the node to iterate. Useful for parsing XML feeds.\n \n     obj can be:\n@@ -29,7 +29,7 @@ def xmliter(obj, nodename):\n     r = re.compile(r\"<%s[\\s>].*?</%s>\" % (nodename, nodename), re.DOTALL)\n     for match in r.finditer(text):\n         nodetext = header_start + match.group() + header_end\n-        yield XmlXPathSelector(text=nodetext).select('//' + nodename)[0]\n+        yield Selector(text=nodetext, contenttype='xml').xpath('//' + nodename)[0]\n \n \n def csviter(obj, delimiter=None, headers=None, encoding=None):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "scrapy#ab9462a251ce084698e3751d5131ab9ce267ab0f", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 28 | Contributors (this commit): 1 | Commits (past 90d): 2 | Contributors (cumulative): 1 | DMM Complexity: None\n\nDIFF:\n@@ -3,7 +3,7 @@ from scrapy.selector.lxmldocument import LxmlDocument\n from scrapy.http import TextResponse, HtmlResponse\n \n \n-class Libxml2DocumentTest(unittest.TestCase):\n+class LxmlDocumentTest(unittest.TestCase):\n \n     def test_caching(self):\n         r1 = HtmlResponse('http://www.example.com', body='<html><head></head><body></body></html>')\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "scrapy#155ea08ea1c50f347c21cb4635b36dd47141f4cc", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 42 | Lines Deleted: 42 | Files Changed: 5 | Hunks: 24 | Methods Changed: 14 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 84 | Churn Cumulative: 1707 | Contributors (this commit): 9 | Commits (past 90d): 13 | Contributors (cumulative): 16 | DMM Complexity: None\n\nDIFF:\n@@ -116,11 +116,11 @@ class SgmlLinkExtractor(BaseSgmlLinkExtractor):\n     def extract_links(self, response):\n         base_url = None\n         if self.restrict_xpaths:\n-            ss = Selector(response)\n+            sel = Selector(response)\n             base_url = get_base_url(response)\n             body = u''.join(f\n                             for x in self.restrict_xpaths\n-                            for f in ss.xpath(x).extract()\n+                            for f in sel.xpath(x).extract()\n                             ).encode(response.encoding)\n         else:\n             body = response.body\n\n@@ -17,7 +17,7 @@ from scrapy.utils.misc import load_object\n from scrapy.utils.response import open_in_browser\n from scrapy.utils.console import start_python_console\n from scrapy.settings import Settings\n-from scrapy.http import Request, Response, HtmlResponse, XmlResponse\n+from scrapy.http import Request, Response\n from scrapy.exceptions import IgnoreRequest\n \n \n@@ -95,7 +95,7 @@ class Shell(object):\n         self.vars['spider'] = spider\n         self.vars['request'] = request\n         self.vars['response'] = response\n-        self.vars['ss'] = Selector(response)\n+        self.vars['sel'] = Selector(response)\n         if self.inthread:\n             self.vars['fetch'] = self.fetch\n         self.vars['view'] = open_in_browser\n\n@@ -31,7 +31,7 @@ class ShellTest(ProcessTest, SiteTest, unittest.TestCase):\n \n     @defer.inlineCallbacks\n     def test_response_selector_html(self):\n-        xpath = 'ss.xpath(\"//p[@class=\\'one\\']/text()\").extract()[0]'\n+        xpath = 'sel.xpath(\"//p[@class=\\'one\\']/text()\").extract()[0]'\n         _, out, _ = yield self.execute([self.url('/html'), '-c', xpath])\n         self.assertEqual(out.strip(), 'Works')\n \n\n@@ -16,31 +16,31 @@ class SelectorTestCase(unittest.TestCase):\n         \"\"\"Simple selector tests\"\"\"\n         body = \"<p><input name='a'value='1'/><input name='b'value='2'/></p>\"\n         response = TextResponse(url=\"http://example.com\", body=body)\n-        ss = self.sscls(response)\n+        sel = self.sscls(response)\n \n-        xl = ss.xpath('//input')\n+        xl = sel.xpath('//input')\n         self.assertEqual(2, len(xl))\n         for x in xl:\n             assert isinstance(x, self.sscls)\n \n-        self.assertEqual(ss.xpath('//input').extract(),\n-                         [x.extract() for x in ss.xpath('//input')])\n+        self.assertEqual(sel.xpath('//input').extract(),\n+                         [x.extract() for x in sel.xpath('//input')])\n \n-        self.assertEqual([x.extract() for x in ss.xpath(\"//input[@name='a']/@name\")],\n+        self.assertEqual([x.extract() for x in sel.xpath(\"//input[@name='a']/@name\")],\n                          [u'a'])\n-        self.assertEqual([x.extract() for x in ss.xpath(\"number(concat(//input[@name='a']/@value, //input[@name='b']/@value))\")],\n+        self.assertEqual([x.extract() for x in sel.xpath(\"number(concat(//input[@name='a']/@value, //input[@name='b']/@value))\")],\n                          [u'12.0'])\n \n-        self.assertEqual(ss.xpath(\"concat('xpath', 'rules')\").extract(),\n+        self.assertEqual(sel.xpath(\"concat('xpath', 'rules')\").extract(),\n                          [u'xpathrules'])\n-        self.assertEqual([x.extract() for x in ss.xpath(\"concat(//input[@name='a']/@value, //input[@name='b']/@value)\")],\n+        self.assertEqual([x.extract() for x in sel.xpath(\"concat(//input[@name='a']/@value, //input[@name='b']/@value)\")],\n                          [u'12'])\n \n     def test_select_unicode_query(self):\n         body = u\"<p><input name='\\xa9' value='1'/></p>\"\n         response = TextResponse(url=\"http://example.com\", body=body, encoding='utf8')\n-        ss = self.sscls(response)\n-        self.assertEqual(ss.xpath(u'//input[@name=\"\\xa9\"]/@value').extract(), [u'1'])\n+        sel = self.sscls(response)\n+        self.assertEqual(sel.xpath(u'//input[@name=\"\\xa9\"]/@value').extract(), [u'1'])\n \n     def test_list_elements_type(self):\n         \"\"\"Test Selector returning the same type in selection methods\"\"\"\n@@ -69,14 +69,14 @@ class SelectorTestCase(unittest.TestCase):\n \n     def test_flavor_detection(self):\n         text = '<div><img src=\"a.jpg\"><p>Hello</div>'\n-        ss = self.sscls(XmlResponse('http://example.com', body=text))\n-        self.assertEqual(ss.contenttype, 'xml')\n-        self.assertEqual(ss.xpath(\"//div\").extract(),\n+        sel = self.sscls(XmlResponse('http://example.com', body=text))\n+        self.assertEqual(sel.contenttype, 'xml')\n+        self.assertEqual(sel.xpath(\"//div\").extract(),\n                          [u'<div><img src=\"a.jpg\"><p>Hello</p></img></div>'])\n \n-        ss = self.sscls(HtmlResponse('http://example.com', body=text))\n-        self.assertEqual(ss.contenttype, 'html')\n-        self.assertEqual(ss.xpath(\"//div\").extract(),\n+        sel = self.sscls(HtmlResponse('http://example.com', body=text))\n+        self.assertEqual(sel.contenttype, 'html')\n+        self.assertEqual(sel.xpath(\"//div\").extract(),\n                          [u'<div><img src=\"a.jpg\"><p>Hello</p></div>'])\n \n     def test_nested_selectors(self):\n@@ -110,13 +110,13 @@ class SelectorTestCase(unittest.TestCase):\n                     <div id=1>not<span>me</span></div>\n                     <div class=\"dos\"><p>text</p><a href='#'>foo</a></div>\n                </body>'''\n-        ss = self.sscls(text=body)\n-        self.assertEqual(ss.xpath('//div[@id=\"1\"]').css('span::text').extract(), [u'me'])\n-        self.assertEqual(ss.css('#1').xpath('./span/text()').extract(), [u'me'])\n+        sel = self.sscls(text=body)\n+        self.assertEqual(sel.xpath('//div[@id=\"1\"]').css('span::text').extract(), [u'me'])\n+        self.assertEqual(sel.css('#1').xpath('./span/text()').extract(), [u'me'])\n \n     def test_dont_strip(self):\n-        hxs = self.sscls(text='<div>fff: <a href=\"#\">zzz</a></div>')\n-        self.assertEqual(hxs.xpath(\"//text()\").extract(), [u'fff: ', u'zzz'])\n+        sel = self.sscls(text='<div>fff: <a href=\"#\">zzz</a></div>')\n+        self.assertEqual(sel.xpath(\"//text()\").extract(), [u'fff: ', u'zzz'])\n \n     def test_namespaces_simple(self):\n         body = \"\"\"\n@@ -279,10 +279,10 @@ class SelectorTestCase(unittest.TestCase):\n   <link type=\"application/atom+xml\">\n </feed>\n \"\"\"\n-        xxs = self.sscls(XmlResponse(\"http://example.com/feed.atom\", body=xml))\n-        self.assertEqual(len(xxs.xpath(\"//link\")), 0)\n-        xxs.remove_namespaces()\n-        self.assertEqual(len(xxs.xpath(\"//link\")), 2)\n+        sel = self.sscls(XmlResponse(\"http://example.com/feed.atom\", body=xml))\n+        self.assertEqual(len(sel.xpath(\"//link\")), 0)\n+        sel.remove_namespaces()\n+        self.assertEqual(len(sel.xpath(\"//link\")), 2)\n \n     def test_remove_attributes_namespaces(self):\n         xml = \"\"\"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n@@ -291,10 +291,10 @@ class SelectorTestCase(unittest.TestCase):\n   <link atom:type=\"application/atom+xml\">\n </feed>\n \"\"\"\n-        xxs = self.sscls(XmlResponse(\"http://example.com/feed.atom\", body=xml))\n-        self.assertEqual(len(xxs.xpath(\"//link/@type\")), 0)\n-        xxs.remove_namespaces()\n-        self.assertEqual(len(xxs.xpath(\"//link/@type\")), 2)\n+        sel = self.sscls(XmlResponse(\"http://example.com/feed.atom\", body=xml))\n+        self.assertEqual(len(sel.xpath(\"//link/@type\")), 0)\n+        sel.remove_namespaces()\n+        self.assertEqual(len(sel.xpath(\"//link/@type\")), 2)\n \n \n class DeprecatedXpathSelectorTest(unittest.TestCase):\n\n@@ -120,16 +120,16 @@ class CSSSelectorTest(unittest.TestCase):\n \n     def setUp(self):\n         self.htmlresponse = HtmlResponse('http://example.com', body=HTMLBODY)\n-        self.ss = self.sscls(self.htmlresponse)\n+        self.sel = self.sscls(self.htmlresponse)\n \n     def x(self, *a, **kw):\n-        return [v.strip() for v in self.ss.css(*a, **kw).extract() if v.strip()]\n+        return [v.strip() for v in self.sel.css(*a, **kw).extract() if v.strip()]\n \n     def test_selector_simple(self):\n-        for x in self.ss.css('input'):\n-            self.assertTrue(isinstance(x, self.ss.__class__), x)\n-        self.assertEqual(self.ss.css('input').extract(),\n-                         [x.extract() for x in self.ss.css('input')])\n+        for x in self.sel.css('input'):\n+            self.assertTrue(isinstance(x, self.sel.__class__), x)\n+        self.assertEqual(self.sel.css('input').extract(),\n+                         [x.extract() for x in self.sel.css('input')])\n \n     def test_text_pseudo_element(self):\n         self.assertEqual(self.x('#p-b2'), [u'<b id=\"p-b2\">guy</b>'])\n@@ -147,7 +147,7 @@ class CSSSelectorTest(unittest.TestCase):\n         self.assertEqual(self.x('map[name=\"dummymap\"] ::attr(shape)'), [u'circle', u'default'])\n \n     def test_nested_selector(self):\n-        self.assertEqual(self.ss.css('p').css('b::text').extract(),\n+        self.assertEqual(self.sel.css('p').css('b::text').extract(),\n                          [u'hi', u'guy'])\n-        self.assertEqual(self.ss.css('div').css('area:last-child').extract(),\n+        self.assertEqual(self.sel.css('div').css('area:last-child').extract(),\n                          [u'<area shape=\"default\" id=\"area-nohref\">'])\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
