{"custom_id": "fastapi#880c8b37cf8ba88a7f4de40cf18dec49c9e71454", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 133 | Lines Deleted: 0 | Files Changed: 2 | Hunks: 2 | Methods Changed: 4 | Complexity Δ (Sum/Max): 6/3 | Churn Δ: 133 | Churn Cumulative: 708 | Contributors (this commit): 16 | Commits (past 90d): 4 | Contributors (cumulative): 17 | DMM Complexity: 0.0\n\nDIFF:\n@@ -161,6 +161,12 @@ def deep_dict_update(main_dict: Dict[Any, Any], update_dict: Dict[Any, Any]) ->\n             and isinstance(value, dict)\n         ):\n             deep_dict_update(main_dict[key], value)\n+        elif (\n+            key in main_dict\n+            and isinstance(main_dict[key], list)\n+            and isinstance(update_dict[key], list)\n+        ):\n+            main_dict[key] = main_dict[key] + update_dict[key]\n         else:\n             main_dict[key] = value\n \n\n@@ -0,0 +1,127 @@\n+from typing import Optional\n+\n+from fastapi import FastAPI\n+from fastapi.testclient import TestClient\n+\n+app = FastAPI()\n+\n+\n+@app.get(\n+    \"/\",\n+    openapi_extra={\n+        \"parameters\": [\n+            {\n+                \"required\": False,\n+                \"schema\": {\"title\": \"Extra Param 1\"},\n+                \"name\": \"extra_param_1\",\n+                \"in\": \"query\",\n+            },\n+            {\n+                \"required\": True,\n+                \"schema\": {\"title\": \"Extra Param 2\"},\n+                \"name\": \"extra_param_2\",\n+                \"in\": \"query\",\n+            },\n+        ]\n+    },\n+)\n+def route_with_extra_query_parameters(standard_query_param: Optional[int] = 50):\n+    return {}\n+\n+\n+client = TestClient(app)\n+\n+\n+openapi_schema = {\n+    \"openapi\": \"3.0.2\",\n+    \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n+    \"paths\": {\n+        \"/\": {\n+            \"get\": {\n+                \"summary\": \"Route With Extra Query Parameters\",\n+                \"operationId\": \"route_with_extra_query_parameters__get\",\n+                \"parameters\": [\n+                    {\n+                        \"required\": False,\n+                        \"schema\": {\n+                            \"title\": \"Standard Query Param\",\n+                            \"type\": \"integer\",\n+                            \"default\": 50,\n+                        },\n+                        \"name\": \"standard_query_param\",\n+                        \"in\": \"query\",\n+                    },\n+                    {\n+                        \"required\": False,\n+                        \"schema\": {\"title\": \"Extra Param 1\"},\n+                        \"name\": \"extra_param_1\",\n+                        \"in\": \"query\",\n+                    },\n+                    {\n+                        \"required\": True,\n+                        \"schema\": {\"title\": \"Extra Param 2\"},\n+                        \"name\": \"extra_param_2\",\n+                        \"in\": \"query\",\n+                    },\n+                ],\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                    },\n+                    \"422\": {\n+                        \"description\": \"Validation Error\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\n+                                    \"$ref\": \"#/components/schemas/HTTPValidationError\"\n+                                }\n+                            }\n+                        },\n+                    },\n+                },\n+            }\n+        }\n+    },\n+    \"components\": {\n+        \"schemas\": {\n+            \"HTTPValidationError\": {\n+                \"title\": \"HTTPValidationError\",\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"detail\": {\n+                        \"title\": \"Detail\",\n+                        \"type\": \"array\",\n+                        \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n+                    }\n+                },\n+            },\n+            \"ValidationError\": {\n+                \"title\": \"ValidationError\",\n+                \"required\": [\"loc\", \"msg\", \"type\"],\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"loc\": {\n+                        \"title\": \"Location\",\n+                        \"type\": \"array\",\n+                        \"items\": {\"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]},\n+                    },\n+                    \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n+                    \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n+                },\n+            },\n+        }\n+    },\n+}\n+\n+\n+def test_openapi():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == openapi_schema\n+\n+\n+def test_get_route():\n+    response = client.get(\"/\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {}\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#c8124496fc34c024e411f293d3893219005d409f", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 4 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): -1/0 | Churn Δ: 5 | Churn Cumulative: 2010 | Contributors (this commit): 27 | Commits (past 90d): 3 | Contributors (cumulative): 27 | DMM Complexity: 1.0\n\nDIFF:\n@@ -302,10 +302,7 @@ def get_dependant(\n             assert is_scalar_field(\n                 field=param_field\n             ), \"Path params must be of one of the supported types\"\n-            if isinstance(param.default, params.Path):\n-                ignore_default = False\n-            else:\n-                ignore_default = True\n+            ignore_default = not isinstance(param.default, params.Path)\n             param_field = get_param_field(\n                 param=param,\n                 param_name=param_name,\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#a64387c3fc03120e3424fb12bfa64df8d949da43", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 525 | Contributors (this commit): 15 | Commits (past 90d): 2 | Contributors (cumulative): 15 | DMM Complexity: None\n\nDIFF:\n@@ -137,10 +137,10 @@ def jsonable_encoder(\n         if isinstance(obj, classes_tuple):\n             return encoder(obj)\n \n-    errors: List[Exception] = []\n     try:\n         data = dict(obj)\n     except Exception as e:\n+        errors: List[Exception] = []\n         errors.append(e)\n         try:\n             data = vars(obj)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#00bdf533ef387b85a85df298de8537992c7d7c45", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 583 | Contributors (this commit): 17 | Commits (past 90d): 4 | Contributors (cumulative): 17 | DMM Complexity: None\n\nDIFF:\n@@ -87,7 +87,7 @@ def create_cloned_field(\n ) -> ModelField:\n     # _cloned_types has already cloned types, to support recursive models\n     if cloned_types is None:\n-        cloned_types = dict()\n+        cloned_types = {}\n     original_type = field.type_\n     if is_dataclass(original_type) and hasattr(original_type, \"__pydantic_model__\"):\n         original_type = original_type.__pydantic_model__\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#e3c055ba8f1339faa1b0d931069c028b4e36fa17", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 6 | Contributors (this commit): 4 | Commits (past 90d): 1 | Contributors (cumulative): 4 | DMM Complexity: None\n\nDIFF:\n@@ -14,7 +14,7 @@ app = FastAPI()\n \n @app.get(\"/models/{model_name}\")\n async def get_model(model_name: ModelName):\n-    if model_name == ModelName.alexnet:\n+    if model_name is ModelName.alexnet:\n         return {\"model_name\": model_name, \"message\": \"Deep Learning FTW!\"}\n \n     if model_name.value == \"lenet\":\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#0539dd9cd35b7eb3b19945c19c1dc569440c0ec1", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 490 | Contributors (this commit): 8 | Commits (past 90d): 1 | Contributors (cumulative): 8 | DMM Complexity: None\n\nDIFF:\n@@ -119,7 +119,7 @@ class OAuth2(SecurityBase):\n         flows: Union[OAuthFlowsModel, Dict[str, Dict[str, Any]]] = OAuthFlowsModel(),\n         scheme_name: Optional[str] = None,\n         description: Optional[str] = None,\n-        auto_error: Optional[bool] = True\n+        auto_error: bool = True\n     ):\n         self.model = OAuth2Model(flows=flows, description=description)\n         self.scheme_name = scheme_name or self.__class__.__name__\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#dde140d8e35e82d56f5aa0064942da1e6c9cf238", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 0 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 2/2 | Churn Δ: 1 | Churn Cumulative: 1 | Contributors (this commit): 2 | Commits (past 90d): 1 | Contributors (cumulative): 2 | DMM Complexity: 0.0\n\nDIFF:\n@@ -19,5 +19,4 @@ app = FastAPI()\n async def read_item(item_id: str):\n     if item_id == \"foo\":\n         return {\"id\": \"foo\", \"value\": \"there goes my hero\"}\n-    else:\n     return JSONResponse(status_code=404, content={\"message\": \"Item not found\"})\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#dc10b81d05fc4438038d74543333661073bf7c8a", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 2 | Methods Changed: 2 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 587 | Contributors (this commit): 18 | Commits (past 90d): 5 | Contributors (cumulative): 18 | DMM Complexity: None\n\nDIFF:\n@@ -140,14 +140,14 @@ def generate_operation_id_for_path(\n         stacklevel=2,\n     )\n     operation_id = name + path\n-    operation_id = re.sub(\"[^0-9a-zA-Z_]\", \"_\", operation_id)\n+    operation_id = re.sub(r\"\\W\", \"_\", operation_id)\n     operation_id = operation_id + \"_\" + method.lower()\n     return operation_id\n \n \n def generate_unique_id(route: \"APIRoute\") -> str:\n     operation_id = route.name + route.path_format\n-    operation_id = re.sub(\"[^0-9a-zA-Z_]\", \"_\", operation_id)\n+    operation_id = re.sub(r\"\\W\", \"_\", operation_id)\n     assert route.methods\n     operation_id = operation_id + \"_\" + list(route.methods)[0].lower()\n     return operation_id\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#de6ccd77544b0c6e5bdcf2f470e6fd1a068344ef", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 3 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 3 | Churn Cumulative: 365 | Contributors (this commit): 12 | Commits (past 90d): 2 | Contributors (cumulative): 12 | DMM Complexity: 1.0\n\nDIFF:\n@@ -106,6 +106,9 @@ def get_redoc_html(\n     </style>\n     </head>\n     <body>\n+    <noscript>\n+        ReDoc requires Javascript to function. Please enable it to browse the documentation.\n+    </noscript>\n     <redoc spec-url=\"{openapi_url}\"></redoc>\n     <script src=\"{redoc_js_url}\"> </script>\n     </body>\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#22bed0008c0afed20bccdb16aef426c9086a457c", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 111 | Lines Deleted: 28 | Files Changed: 2 | Hunks: 18 | Methods Changed: 15 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 139 | Churn Cumulative: 790 | Contributors (this commit): 17 | Commits (past 90d): 4 | Contributors (cumulative): 20 | DMM Complexity: 0.9135802469135802\n\nDIFF:\n@@ -71,7 +71,14 @@ def jsonable_encoder(\n             sqlalchemy_safe=sqlalchemy_safe,\n         )\n     if dataclasses.is_dataclass(obj):\n-        return dataclasses.asdict(obj)\n+        obj_dict = dataclasses.asdict(obj)\n+        return jsonable_encoder(\n+            obj_dict,\n+            exclude_none=exclude_none,\n+            exclude_defaults=exclude_defaults,\n+            custom_encoder=custom_encoder,\n+            sqlalchemy_safe=sqlalchemy_safe,\n+        )\n     if isinstance(obj, Enum):\n         return obj.value\n     if isinstance(obj, PurePath):\n\n@@ -1,8 +1,9 @@\n+from dataclasses import dataclass\n+from datetime import datetime\n from typing import List, Optional\n \n from fastapi import FastAPI\n from fastapi.testclient import TestClient\n-from pydantic.dataclasses import dataclass\n \n app = FastAPI()\n \n@@ -10,54 +11,64 @@ app = FastAPI()\n @dataclass\n class Item:\n     name: str\n+    date: datetime\n     price: Optional[float] = None\n     owner_ids: Optional[List[int]] = None\n \n \n @app.get(\"/items/valid\", response_model=Item)\n def get_valid():\n-    return {\"name\": \"valid\", \"price\": 1.0}\n+    return {\"name\": \"valid\", \"date\": datetime(2021, 7, 26), \"price\": 1.0}\n \n \n @app.get(\"/items/object\", response_model=Item)\n def get_object():\n-    return Item(name=\"object\", price=1.0, owner_ids=[1, 2, 3])\n+    return Item(\n+        name=\"object\", date=datetime(2021, 7, 26), price=1.0, owner_ids=[1, 2, 3]\n+    )\n \n \n @app.get(\"/items/coerce\", response_model=Item)\n def get_coerce():\n-    return {\"name\": \"coerce\", \"price\": \"1.0\"}\n+    return {\"name\": \"coerce\", \"date\": datetime(2021, 7, 26).isoformat(), \"price\": \"1.0\"}\n \n \n @app.get(\"/items/validlist\", response_model=List[Item])\n def get_validlist():\n     return [\n-        {\"name\": \"foo\"},\n-        {\"name\": \"bar\", \"price\": 1.0},\n-        {\"name\": \"baz\", \"price\": 2.0, \"owner_ids\": [1, 2, 3]},\n+        {\"name\": \"foo\", \"date\": datetime(2021, 7, 26)},\n+        {\"name\": \"bar\", \"date\": datetime(2021, 7, 26), \"price\": 1.0},\n+        {\n+            \"name\": \"baz\",\n+            \"date\": datetime(2021, 7, 26),\n+            \"price\": 2.0,\n+            \"owner_ids\": [1, 2, 3],\n+        },\n     ]\n \n \n @app.get(\"/items/objectlist\", response_model=List[Item])\n def get_objectlist():\n     return [\n-        Item(name=\"foo\"),\n-        Item(name=\"bar\", price=1.0),\n-        Item(name=\"baz\", price=2.0, owner_ids=[1, 2, 3]),\n+        Item(name=\"foo\", date=datetime(2021, 7, 26)),\n+        Item(name=\"bar\", date=datetime(2021, 7, 26), price=1.0),\n+        Item(name=\"baz\", date=datetime(2021, 7, 26), price=2.0, owner_ids=[1, 2, 3]),\n     ]\n \n \n @app.get(\"/items/no-response-model/object\")\n def get_no_response_model_object():\n-    return Item(name=\"object\", price=1.0, owner_ids=[1, 2, 3])\n+    return Item(\n+        name=\"object\", date=datetime(2021, 7, 26), price=1.0, owner_ids=[1, 2, 3]\n+    )\n \n \n @app.get(\"/items/no-response-model/objectlist\")\n def get_no_response_model_objectlist():\n     return [\n-        Item(name=\"foo\"),\n-        Item(name=\"bar\", price=1.0),\n-        Item(name=\"baz\", price=2.0, owner_ids=[1, 2, 3]),\n+        Item(name=\"foo\", date=datetime(2021, 7, 26)),\n+        Item(name=\"bar\", date=datetime(2021, 7, 26), price=1.0),\n+        Item(name=\"baz\", date=datetime(2021, 7, 26), price=2.0, owner_ids=[1, 2, 3]),\n     ]\n \n \n@@ -67,28 +78,58 @@ client = TestClient(app)\n def test_valid():\n     response = client.get(\"/items/valid\")\n     response.raise_for_status()\n-    assert response.json() == {\"name\": \"valid\", \"price\": 1.0, \"owner_ids\": None}\n+    assert response.json() == {\n+        \"name\": \"valid\",\n+        \"date\": datetime(2021, 7, 26).isoformat(),\n+        \"price\": 1.0,\n+        \"owner_ids\": None,\n+    }\n \n \n def test_object():\n     response = client.get(\"/items/object\")\n     response.raise_for_status()\n-    assert response.json() == {\"name\": \"object\", \"price\": 1.0, \"owner_ids\": [1, 2, 3]}\n+    assert response.json() == {\n+        \"name\": \"object\",\n+        \"date\": datetime(2021, 7, 26).isoformat(),\n+        \"price\": 1.0,\n+        \"owner_ids\": [1, 2, 3],\n+    }\n \n \n def test_coerce():\n     response = client.get(\"/items/coerce\")\n     response.raise_for_status()\n-    assert response.json() == {\"name\": \"coerce\", \"price\": 1.0, \"owner_ids\": None}\n+    assert response.json() == {\n+        \"name\": \"coerce\",\n+        \"date\": datetime(2021, 7, 26).isoformat(),\n+        \"price\": 1.0,\n+        \"owner_ids\": None,\n+    }\n \n \n def test_validlist():\n     response = client.get(\"/items/validlist\")\n     response.raise_for_status()\n     assert response.json() == [\n-        {\"name\": \"foo\", \"price\": None, \"owner_ids\": None},\n-        {\"name\": \"bar\", \"price\": 1.0, \"owner_ids\": None},\n-        {\"name\": \"baz\", \"price\": 2.0, \"owner_ids\": [1, 2, 3]},\n+        {\n+            \"name\": \"foo\",\n+            \"date\": datetime(2021, 7, 26).isoformat(),\n+            \"price\": None,\n+            \"owner_ids\": None,\n+        },\n+        {\n+            \"name\": \"bar\",\n+            \"date\": datetime(2021, 7, 26).isoformat(),\n+            \"price\": 1.0,\n+            \"owner_ids\": None,\n+        },\n+        {\n+            \"name\": \"baz\",\n+            \"date\": datetime(2021, 7, 26).isoformat(),\n+            \"price\": 2.0,\n+            \"owner_ids\": [1, 2, 3],\n+        },\n     ]\n \n \n@@ -96,23 +137,58 @@ def test_objectlist():\n     response = client.get(\"/items/objectlist\")\n     response.raise_for_status()\n     assert response.json() == [\n-        {\"name\": \"foo\", \"price\": None, \"owner_ids\": None},\n-        {\"name\": \"bar\", \"price\": 1.0, \"owner_ids\": None},\n-        {\"name\": \"baz\", \"price\": 2.0, \"owner_ids\": [1, 2, 3]},\n+        {\n+            \"name\": \"foo\",\n+            \"date\": datetime(2021, 7, 26).isoformat(),\n+            \"price\": None,\n+            \"owner_ids\": None,\n+        },\n+        {\n+            \"name\": \"bar\",\n+            \"date\": datetime(2021, 7, 26).isoformat(),\n+            \"price\": 1.0,\n+            \"owner_ids\": None,\n+        },\n+        {\n+            \"name\": \"baz\",\n+            \"date\": datetime(2021, 7, 26).isoformat(),\n+            \"price\": 2.0,\n+            \"owner_ids\": [1, 2, 3],\n+        },\n     ]\n \n \n def test_no_response_model_object():\n     response = client.get(\"/items/no-response-model/object\")\n     response.raise_for_status()\n-    assert response.json() == {\"name\": \"object\", \"price\": 1.0, \"owner_ids\": [1, 2, 3]}\n+    assert response.json() == {\n+        \"name\": \"object\",\n+        \"date\": datetime(2021, 7, 26).isoformat(),\n+        \"price\": 1.0,\n+        \"owner_ids\": [1, 2, 3],\n+    }\n \n \n def test_no_response_model_objectlist():\n     response = client.get(\"/items/no-response-model/objectlist\")\n     response.raise_for_status()\n     assert response.json() == [\n-        {\"name\": \"foo\", \"price\": None, \"owner_ids\": None},\n-        {\"name\": \"bar\", \"price\": 1.0, \"owner_ids\": None},\n-        {\"name\": \"baz\", \"price\": 2.0, \"owner_ids\": [1, 2, 3]},\n+        {\n+            \"name\": \"foo\",\n+            \"date\": datetime(2021, 7, 26).isoformat(),\n+            \"price\": None,\n+            \"owner_ids\": None,\n+        },\n+        {\n+            \"name\": \"bar\",\n+            \"date\": datetime(2021, 7, 26).isoformat(),\n+            \"price\": 1.0,\n+            \"owner_ids\": None,\n+        },\n+        {\n+            \"name\": \"baz\",\n+            \"date\": datetime(2021, 7, 26).isoformat(),\n+            \"price\": 2.0,\n+            \"owner_ids\": [1, 2, 3],\n+        },\n     ]\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#d86b54e79b314aa8fa339b2ebde92395b18d7043", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 0 | Lines Deleted: 6 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): -2/0 | Churn Δ: 6 | Churn Cumulative: 456 | Contributors (this commit): 6 | Commits (past 90d): 1 | Contributors (cumulative): 6 | DMM Complexity: 0.0\n\nDIFF:\n@@ -356,12 +356,6 @@ def test_create_item(client):\n     item_to_check = [it for it in user_data[\"items\"] if it[\"id\"] == item_data[\"id\"]][0]\n     assert item_to_check[\"title\"] == item[\"title\"]\n     assert item_to_check[\"description\"] == item[\"description\"]\n-    response = client.get(\"/users/1\")\n-    assert response.status_code == 200, response.text\n-    user_data = response.json()\n-    item_to_check = [it for it in user_data[\"items\"] if it[\"id\"] == item_data[\"id\"]][0]\n-    assert item_to_check[\"title\"] == item[\"title\"]\n-    assert item_to_check[\"description\"] == item[\"description\"]\n \n \n def test_read_items(client):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#5e34cb1868461a45e852c59c18e089ca7de2f140", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 6 | Lines Deleted: 6 | Files Changed: 1 | Hunks: 6 | Methods Changed: 6 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 12 | Churn Cumulative: 950 | Contributors (this commit): 4 | Commits (past 90d): 1 | Contributors (cumulative): 4 | DMM Complexity: None\n\nDIFF:\n@@ -149,7 +149,7 @@ def query_example_examples(\n         default=None,\n         example=\"query_overriden\",\n         examples={\n-            \"example1\": {\"summary\": \"Qeury example 1\", \"value\": \"query1\"},\n+            \"example1\": {\"summary\": \"Query example 1\", \"value\": \"query1\"},\n             \"example2\": {\"value\": \"query2\"},\n         },\n     ),\n@@ -186,7 +186,7 @@ def header_example_examples(\n         default=None,\n         example=\"header_overriden\",\n         examples={\n-            \"example1\": {\"summary\": \"Qeury example 1\", \"value\": \"header1\"},\n+            \"example1\": {\"summary\": \"Query example 1\", \"value\": \"header1\"},\n             \"example2\": {\"value\": \"header2\"},\n         },\n     ),\n@@ -223,7 +223,7 @@ def cookie_example_examples(\n         default=None,\n         example=\"cookie_overriden\",\n         examples={\n-            \"example1\": {\"summary\": \"Qeury example 1\", \"value\": \"cookie1\"},\n+            \"example1\": {\"summary\": \"Query example 1\", \"value\": \"cookie1\"},\n             \"example2\": {\"value\": \"cookie2\"},\n         },\n     ),\n@@ -561,7 +561,7 @@ openapi_schema = {\n                         \"schema\": {\"title\": \"Data\", \"type\": \"string\"},\n                         \"examples\": {\n                             \"example1\": {\n-                                \"summary\": \"Qeury example 1\",\n+                                \"summary\": \"Query example 1\",\n                                 \"value\": \"query1\",\n                             },\n                             \"example2\": {\"value\": \"query2\"},\n@@ -666,7 +666,7 @@ openapi_schema = {\n                         \"schema\": {\"title\": \"Data\", \"type\": \"string\"},\n                         \"examples\": {\n                             \"example1\": {\n-                                \"summary\": \"Qeury example 1\",\n+                                \"summary\": \"Query example 1\",\n                                 \"value\": \"header1\",\n                             },\n                             \"example2\": {\"value\": \"header2\"},\n@@ -771,7 +771,7 @@ openapi_schema = {\n                         \"schema\": {\"title\": \"Data\", \"type\": \"string\"},\n                         \"examples\": {\n                             \"example1\": {\n-                                \"summary\": \"Qeury example 1\",\n+                                \"summary\": \"Query example 1\",\n                                 \"value\": \"cookie1\",\n                             },\n                             \"example2\": {\"value\": \"cookie2\"},\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#0bb8920ae1298e178b29ccf8a2dab4486c09143d", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 372 | Contributors (this commit): 2 | Commits (past 90d): 4 | Contributors (cumulative): 2 | DMM Complexity: None\n\nDIFF:\n@@ -1,6 +1,6 @@\n \"\"\"FastAPI framework, high performance, easy to learn, fast to code, ready for production\"\"\"\n \n-__version__ = \"0.80.0\"\n+__version__ = \"0.81.0\"\n \n from starlette import status as status\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#d8b6aa630cc9429fb24fcd0b6e3e626c7ea4e09f", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 21 | Lines Deleted: 2 | Files Changed: 2 | Hunks: 4 | Methods Changed: 3 | Complexity Δ (Sum/Max): 2/2 | Churn Δ: 23 | Churn Cumulative: 4776 | Contributors (this commit): 32 | Commits (past 90d): 7 | Contributors (cumulative): 39 | DMM Complexity: 1.0\n\nDIFF:\n@@ -297,14 +297,14 @@ class APIWebSocketRoute(routing.WebSocketRoute):\n         self.path = path\n         self.endpoint = endpoint\n         self.name = get_name(endpoint) if name is None else name\n-        self.dependant = get_dependant(path=path, call=self.endpoint)\n+        self.path_regex, self.path_format, self.param_convertors = compile_path(path)\n+        self.dependant = get_dependant(path=self.path_format, call=self.endpoint)\n         self.app = websocket_session(\n             get_websocket_app(\n                 dependant=self.dependant,\n                 dependency_overrides_provider=dependency_overrides_provider,\n             )\n         )\n-        self.path_regex, self.path_format, self.param_convertors = compile_path(path)\n \n     def matches(self, scope: Scope) -> Tuple[Match, Scope]:\n         match, child_scope = super().matches(scope)\n\n@@ -35,6 +35,14 @@ async def routerindex2(websocket: WebSocket):\n     await websocket.close()\n \n \n+@router.websocket(\"/router/{pathparam:path}\")\n+async def routerindexparams(websocket: WebSocket, pathparam: str, queryparam: str):\n+    await websocket.accept()\n+    await websocket.send_text(pathparam)\n+    await websocket.send_text(queryparam)\n+    await websocket.close()\n+\n+\n async def ws_dependency():\n     return \"Socket Dependency\"\n \n@@ -106,3 +114,14 @@ def test_router_ws_depends_with_override():\n     app.dependency_overrides[ws_dependency] = lambda: \"Override\"\n     with client.websocket_connect(\"/router-ws-depends/\") as websocket:\n         assert websocket.receive_text() == \"Override\"\n+\n+\n+def test_router_with_params():\n+    client = TestClient(app)\n+    with client.websocket_connect(\n+        \"/router/path/to/file?queryparam=a_query_param\"\n+    ) as websocket:\n+        data = websocket.receive_text()\n+        assert data == \"path/to/file\"\n+        data = websocket.receive_text()\n+        assert data == \"a_query_param\"\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#356a57daa835d9860235035f4bdbe29c8c9fe7f0", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 29 | Lines Deleted: 0 | Files Changed: 2 | Hunks: 2 | Methods Changed: 3 | Complexity Δ (Sum/Max): 3/2 | Churn Δ: 29 | Churn Cumulative: 29 | Contributors (this commit): 1 | Commits (past 90d): 2 | Contributors (cumulative): 2 | DMM Complexity: 1.0\n\nDIFF:\n@@ -0,0 +1,19 @@\n+from typing import Any\n+\n+import orjson\n+from fastapi import FastAPI, Response\n+\n+app = FastAPI()\n+\n+\n+class CustomORJSONResponse(Response):\n+    media_type = \"application/json\"\n+\n+    def render(self, content: Any) -> bytes:\n+        assert orjson is not None, \"orjson must be installed\"\n+        return orjson.dumps(content, option=orjson.OPT_INDENT_2)\n+\n+\n+@app.get(\"/\", response_class=CustomORJSONResponse)\n+async def main():\n+    return {\"message\": \"Hello World\"}\n\n@@ -0,0 +1,10 @@\n+from fastapi.testclient import TestClient\n+\n+from docs_src.custom_response.tutorial009c import app\n+\n+client = TestClient(app)\n+\n+\n+def test_get():\n+    response = client.get(\"/\")\n+    assert response.content == b'{\\n  \"message\": \"Hello World\"\\n}'\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#a71077c530fc4c73390f6222bb5a590dbac1ea07", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 2 | Churn Cumulative: 2 | Contributors (this commit): 2 | Commits (past 90d): 1 | Contributors (cumulative): 2 | DMM Complexity: None\n\nDIFF:\n@@ -6,4 +6,4 @@ app = FastAPI()\n \n @app.get(\"/items/\", response_class=ORJSONResponse)\n async def read_items():\n-    return [{\"item_id\": \"Foo\"}]\n+    return ORJSONResponse([{\"item_id\": \"Foo\"}])\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#7250c194da6fae6155817c4b30bcdd112acce655", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 24 | Lines Deleted: 1 | Files Changed: 2 | Hunks: 2 | Methods Changed: 3 | Complexity Δ (Sum/Max): 2/2 | Churn Δ: 25 | Churn Cumulative: 77 | Contributors (this commit): 3 | Commits (past 90d): 2 | Contributors (cumulative): 4 | DMM Complexity: 1.0\n\nDIFF:\n@@ -31,4 +31,6 @@ class ORJSONResponse(JSONResponse):\n \n     def render(self, content: Any) -> bytes:\n         assert orjson is not None, \"orjson must be installed to use ORJSONResponse\"\n-        return orjson.dumps(content)\n+        return orjson.dumps(\n+            content, option=orjson.OPT_NON_STR_KEYS | orjson.OPT_SERIALIZE_NUMPY\n+        )\n\n@@ -0,0 +1,21 @@\n+from fastapi import FastAPI\n+from fastapi.responses import ORJSONResponse\n+from fastapi.testclient import TestClient\n+from sqlalchemy.sql.elements import quoted_name\n+\n+app = FastAPI(default_response_class=ORJSONResponse)\n+\n+\n+@app.get(\"/orjson_non_str_keys\")\n+def get_orjson_non_str_keys():\n+    key = quoted_name(value=\"msg\", quote=False)\n+    return {key: \"Hello World\", 1: 1}\n+\n+\n+client = TestClient(app)\n+\n+\n+def test_orjson_non_str_keys():\n+    with client:\n+        response = client.get(\"/orjson_non_str_keys\")\n+    assert response.json() == {\"msg\": \"Hello World\", \"1\": 1}\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#30b3905ef38532c867036c1b650a9ceef5bfb1cc", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 2 | Churn Cumulative: 589 | Contributors (this commit): 19 | Commits (past 90d): 6 | Contributors (cumulative): 19 | DMM Complexity: 1.0\n\nDIFF:\n@@ -37,6 +37,8 @@ def get_model_definitions(\n         )\n         definitions.update(m_definitions)\n         model_name = model_name_map[model]\n+        if \"description\" in m_schema:\n+            m_schema[\"description\"] = m_schema[\"description\"].split(\"\\f\")[0]\n         definitions[model_name] = m_schema\n     return definitions\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#52b5b08910356b22cb9837bda88f73f517dd8652", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 3045 | Contributors (this commit): 26 | Commits (past 90d): 2 | Contributors (cumulative): 26 | DMM Complexity: None\n\nDIFF:\n@@ -635,10 +635,10 @@ class FastAPI(Starlette):\n             response_description=response_description,\n             responses=responses,\n             deprecated=deprecated,\n+            operation_id=operation_id,\n             response_model_include=response_model_include,\n             response_model_exclude=response_model_exclude,\n             response_model_by_alias=response_model_by_alias,\n-            operation_id=operation_id,\n             response_model_exclude_unset=response_model_exclude_unset,\n             response_model_exclude_defaults=response_model_exclude_defaults,\n             response_model_exclude_none=response_model_exclude_none,\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#56f887de15f25157114820d0d5c5ed5e606d53f0", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 122 | Lines Deleted: 4 | Files Changed: 2 | Hunks: 3 | Methods Changed: 7 | Complexity Δ (Sum/Max): 9/7 | Churn Δ: 126 | Churn Cumulative: 1417 | Contributors (this commit): 27 | Commits (past 90d): 4 | Contributors (cumulative): 28 | DMM Complexity: 0.8214285714285714\n\nDIFF:\n@@ -222,11 +222,18 @@ def get_openapi_path(\n             )\n             parameters.extend(operation_parameters)\n             if parameters:\n-                operation[\"parameters\"] = list(\n-                    {\n+                all_parameters = {\n                     (param[\"in\"], param[\"name\"]): param for param in parameters\n-                    }.values()\n-                )\n+                }\n+                required_parameters = {\n+                    (param[\"in\"], param[\"name\"]): param\n+                    for param in parameters\n+                    if param.get(\"required\")\n+                }\n+                # Make sure required definitions of the same parameter take precedence\n+                # over non-required definitions\n+                all_parameters.update(required_parameters)\n+                operation[\"parameters\"] = list(all_parameters.values())\n             if method in METHODS_WITH_BODY:\n                 request_body_oai = get_openapi_operation_request_body(\n                     body_field=route.body_field, model_name_map=model_name_map\n\n@@ -0,0 +1,111 @@\n+from typing import Optional\n+\n+from fastapi import Depends, FastAPI, Query, status\n+from fastapi.testclient import TestClient\n+\n+app = FastAPI()\n+\n+\n+def _get_client_key(client_id: str = Query(...)) -> str:\n+    return f\"{client_id}_key\"\n+\n+\n+def _get_client_tag(client_id: Optional[str] = Query(None)) -> Optional[str]:\n+    if client_id is None:\n+        return None\n+    return f\"{client_id}_tag\"\n+\n+\n+@app.get(\"/foo\")\n+def foo_handler(\n+    client_key: str = Depends(_get_client_key),\n+    client_tag: Optional[str] = Depends(_get_client_tag),\n+):\n+    return {\"client_id\": client_key, \"client_tag\": client_tag}\n+\n+\n+client = TestClient(app)\n+\n+expected_schema = {\n+    \"components\": {\n+        \"schemas\": {\n+            \"HTTPValidationError\": {\n+                \"properties\": {\n+                    \"detail\": {\n+                        \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n+                        \"title\": \"Detail\",\n+                        \"type\": \"array\",\n+                    }\n+                },\n+                \"title\": \"HTTPValidationError\",\n+                \"type\": \"object\",\n+            },\n+            \"ValidationError\": {\n+                \"properties\": {\n+                    \"loc\": {\n+                        \"items\": {\"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]},\n+                        \"title\": \"Location\",\n+                        \"type\": \"array\",\n+                    },\n+                    \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n+                    \"type\": {\"title\": \"Error \" \"Type\", \"type\": \"string\"},\n+                },\n+                \"required\": [\"loc\", \"msg\", \"type\"],\n+                \"title\": \"ValidationError\",\n+                \"type\": \"object\",\n+            },\n+        }\n+    },\n+    \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n+    \"openapi\": \"3.0.2\",\n+    \"paths\": {\n+        \"/foo\": {\n+            \"get\": {\n+                \"operationId\": \"foo_handler_foo_get\",\n+                \"parameters\": [\n+                    {\n+                        \"in\": \"query\",\n+                        \"name\": \"client_id\",\n+                        \"required\": True,\n+                        \"schema\": {\"title\": \"Client Id\", \"type\": \"string\"},\n+                    },\n+                ],\n+                \"responses\": {\n+                    \"200\": {\n+                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                        \"description\": \"Successful \" \"Response\",\n+                    },\n+                    \"422\": {\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\n+                                    \"$ref\": \"#/components/schemas/HTTPValidationError\"\n+                                }\n+                            }\n+                        },\n+                        \"description\": \"Validation \" \"Error\",\n+                    },\n+                },\n+                \"summary\": \"Foo Handler\",\n+            }\n+        }\n+    },\n+}\n+\n+\n+def test_schema():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == status.HTTP_200_OK\n+    actual_schema = response.json()\n+    assert actual_schema == expected_schema\n+\n+\n+def test_get_invalid():\n+    response = client.get(\"/foo\", params={\"client_id\": None})\n+    assert response.status_code == status.HTTP_422_UNPROCESSABLE_ENTITY\n+\n+\n+def test_get_valid():\n+    response = client.get(\"/foo\", params={\"client_id\": \"bar\"})\n+    assert response.status_code == 200\n+    assert response.json() == {\"client_id\": \"bar_key\", \"client_tag\": \"bar_tag\"}\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#4cff206ebb925acfa4904bb5ddf62c6748f8b15f", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 3 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 3 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 630 | Contributors (this commit): 2 | Commits (past 90d): 2 | Contributors (cumulative): 2 | DMM Complexity: 1.0\n\nDIFF:\n@@ -260,6 +260,7 @@ class Settings(BaseSettings):\n     input_token: SecretStr\n     input_standard_token: SecretStr\n     github_repository: str\n+    httpx_timeout: int = 30\n \n \n def get_graphql_response(\n@@ -270,9 +271,10 @@ def get_graphql_response(\n     response = httpx.post(\n         github_graphql_url,\n         headers=headers,\n+        timeout=settings.httpx_timeout,\n         json={\"query\": query, \"variables\": variables, \"operationName\": \"Q\"},\n     )\n-    if not response.status_code == 200:\n+    if response.status_code != 200:\n         logging.error(f\"Response was not 200, after: {after}\")\n         logging.error(response.text)\n         raise RuntimeError(response.text)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#dacb68929082060b46848c237a3a23085eab947b", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 1 | Churn Cumulative: 7 | Contributors (this commit): 2 | Commits (past 90d): 1 | Contributors (cumulative): 2 | DMM Complexity: None\n\nDIFF:\n@@ -1,2 +1,3 @@\n from starlette.websockets import WebSocket as WebSocket  # noqa\n from starlette.websockets import WebSocketDisconnect as WebSocketDisconnect  # noqa\n+from starlette.websockets import WebSocketState as WebSocketState  # noqa\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#f8460a8b54fd4975ca64c7fbe8d516740781f0df", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 17 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 4 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 19 | Churn Cumulative: 139 | Contributors (this commit): 5 | Commits (past 90d): 1 | Contributors (cumulative): 5 | DMM Complexity: 1.0\n\nDIFF:\n@@ -1,6 +1,8 @@\n import sys\n from typing import AsyncGenerator, ContextManager, TypeVar\n \n+import anyio\n+from anyio import CapacityLimiter\n from starlette.concurrency import iterate_in_threadpool as iterate_in_threadpool  # noqa\n from starlette.concurrency import run_in_threadpool as run_in_threadpool  # noqa\n from starlette.concurrency import (  # noqa\n@@ -22,11 +24,24 @@ _T = TypeVar(\"_T\")\n async def contextmanager_in_threadpool(\n     cm: ContextManager[_T],\n ) -> AsyncGenerator[_T, None]:\n+    # blocking __exit__ from running waiting on a free thread\n+    # can create race conditions/deadlocks if the context manager itself\n+    # has it's own internal pool (e.g. a database connection pool)\n+    # to avoid this we let __exit__ run without a capacity limit\n+    # since we're creating a new limiter for each call, any non-zero limit\n+    # works (1 is arbitrary)\n+    exit_limiter = CapacityLimiter(1)\n     try:\n         yield await run_in_threadpool(cm.__enter__)\n     except Exception as e:\n-        ok: bool = await run_in_threadpool(cm.__exit__, type(e), e, None)\n+        ok = bool(\n+            await anyio.to_thread.run_sync(\n+                cm.__exit__, type(e), e, None, limiter=exit_limiter\n+            )\n+        )\n         if not ok:\n             raise e\n     else:\n-        await run_in_threadpool(cm.__exit__, None, None, None)\n+        await anyio.to_thread.run_sync(\n+            cm.__exit__, None, None, None, limiter=exit_limiter\n+        )\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#3079ba925ec04ce2a630d3d919a1308b48a45df0", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 374 | Contributors (this commit): 2 | Commits (past 90d): 5 | Contributors (cumulative): 2 | DMM Complexity: None\n\nDIFF:\n@@ -1,6 +1,6 @@\n \"\"\"FastAPI framework, high performance, easy to learn, fast to code, ready for production\"\"\"\n \n-__version__ = \"0.81.0\"\n+__version__ = \"0.82.0\"\n \n from starlette import status as status\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#3ec498af63ddc994a7c70f1a05407ea5f7095be4", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 21 | Lines Deleted: 1 | Files Changed: 2 | Hunks: 5 | Methods Changed: 2 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 22 | Churn Cumulative: 811 | Contributors (this commit): 17 | Commits (past 90d): 6 | Contributors (cumulative): 27 | DMM Complexity: 0.6363636363636364\n\nDIFF:\n@@ -74,8 +74,12 @@ def jsonable_encoder(\n         obj_dict = dataclasses.asdict(obj)\n         return jsonable_encoder(\n             obj_dict,\n-            exclude_none=exclude_none,\n+            include=include,\n+            exclude=exclude,\n+            by_alias=by_alias,\n+            exclude_unset=exclude_unset,\n             exclude_defaults=exclude_defaults,\n+            exclude_none=exclude_none,\n             custom_encoder=custom_encoder,\n             sqlalchemy_safe=sqlalchemy_safe,\n         )\n\n@@ -1,3 +1,4 @@\n+from dataclasses import dataclass\n from datetime import datetime, timezone\n from enum import Enum\n from pathlib import PurePath, PurePosixPath, PureWindowsPath\n@@ -19,6 +20,12 @@ class Pet:\n         self.name = name\n \n \n+@dataclass\n+class Item:\n+    name: str\n+    count: int\n+\n+\n class DictablePerson(Person):\n     def __iter__(self):\n         return ((k, v) for k, v in self.__dict__.items())\n@@ -131,6 +138,15 @@ def test_encode_dictable():\n     }\n \n \n+def test_encode_dataclass():\n+    item = Item(name=\"foo\", count=100)\n+    assert jsonable_encoder(item) == {\"name\": \"foo\", \"count\": 100}\n+    assert jsonable_encoder(item, include={\"name\"}) == {\"name\": \"foo\"}\n+    assert jsonable_encoder(item, exclude={\"count\"}) == {\"name\": \"foo\"}\n+    assert jsonable_encoder(item, include={}) == {}\n+    assert jsonable_encoder(item, exclude={}) == {\"name\": \"foo\", \"count\": 100}\n+\n+\n def test_encode_unsupported():\n     unserializable = Unserializable()\n     with pytest.raises(ValueError):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#0b4fe10c8fed59de02100612a6168a9aefaf3659", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 98 | Lines Deleted: 1 | Files Changed: 2 | Hunks: 2 | Methods Changed: 5 | Complexity Δ (Sum/Max): 4/4 | Churn Δ: 99 | Churn Cumulative: 4738 | Contributors (this commit): 33 | Commits (past 90d): 8 | Contributors (cumulative): 34 | DMM Complexity: 1.0\n\nDIFF:\n@@ -258,7 +258,7 @@ def get_request_handler(\n                 is_coroutine=is_coroutine,\n             )\n             response = actual_response_class(content, **response_args)\n-            if not is_body_allowed_for_status_code(status_code):\n+            if not is_body_allowed_for_status_code(response.status_code):\n                 response.body = b\"\"\n             response.headers.raw.extend(sub_response.headers.raw)\n             return response\n\n@@ -0,0 +1,97 @@\n+from typing import Any\n+\n+from fastapi import FastAPI, Response\n+from fastapi.testclient import TestClient\n+\n+app = FastAPI()\n+\n+\n+@app.delete(\n+    \"/{id}\",\n+    status_code=204,\n+)\n+async def delete_deployment(\n+    id: int,\n+    response: Response,\n+) -> Any:\n+    response.status_code = 400\n+    return {\"msg\": \"Status overwritten\", \"id\": id}\n+\n+\n+client = TestClient(app)\n+\n+\n+openapi_schema = {\n+    \"openapi\": \"3.0.2\",\n+    \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n+    \"paths\": {\n+        \"/{id}\": {\n+            \"delete\": {\n+                \"summary\": \"Delete Deployment\",\n+                \"operationId\": \"delete_deployment__id__delete\",\n+                \"parameters\": [\n+                    {\n+                        \"required\": True,\n+                        \"schema\": {\"title\": \"Id\", \"type\": \"integer\"},\n+                        \"name\": \"id\",\n+                        \"in\": \"path\",\n+                    }\n+                ],\n+                \"responses\": {\n+                    \"204\": {\"description\": \"Successful Response\"},\n+                    \"422\": {\n+                        \"description\": \"Validation Error\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\n+                                    \"$ref\": \"#/components/schemas/HTTPValidationError\"\n+                                }\n+                            }\n+                        },\n+                    },\n+                },\n+            }\n+        }\n+    },\n+    \"components\": {\n+        \"schemas\": {\n+            \"HTTPValidationError\": {\n+                \"title\": \"HTTPValidationError\",\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"detail\": {\n+                        \"title\": \"Detail\",\n+                        \"type\": \"array\",\n+                        \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n+                    }\n+                },\n+            },\n+            \"ValidationError\": {\n+                \"title\": \"ValidationError\",\n+                \"required\": [\"loc\", \"msg\", \"type\"],\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"loc\": {\n+                        \"title\": \"Location\",\n+                        \"type\": \"array\",\n+                        \"items\": {\"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]},\n+                    },\n+                    \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n+                    \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n+                },\n+            },\n+        }\n+    },\n+}\n+\n+\n+def test_openapi_schema():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == openapi_schema\n+\n+\n+def test_dependency_set_status_code():\n+    response = client.delete(\"/1\")\n+    assert response.status_code == 400 and response.content\n+    assert response.json() == {\"msg\": \"Status overwritten\", \"id\": 1}\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
