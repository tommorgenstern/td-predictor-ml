{"custom_id": "fastapi#07f8d31ec9d6e2234e12515f3373f57020b1726d", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 33 | Lines Deleted: 33 | Files Changed: 11 | Hunks: 33 | Methods Changed: 11 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 66 | Churn Cumulative: 1602 | Contributors (this commit): 5 | Commits (past 90d): 11 | Contributors (cumulative): 28 | DMM Complexity: None\n\nDIFF:\n@@ -1,4 +1,4 @@\n-from datetime import datetime, timedelta\n+from datetime import datetime, timedelta, timezone\n from typing import Union\n \n from fastapi import Depends, FastAPI, HTTPException, status\n@@ -78,9 +78,9 @@ def authenticate_user(fake_db, username: str, password: str):\n def create_access_token(data: dict, expires_delta: Union[timedelta, None] = None):\n     to_encode = data.copy()\n     if expires_delta:\n-        expire = datetime.utcnow() + expires_delta\n+        expire = datetime.now(timezone.utc) + expires_delta\n     else:\n-        expire = datetime.utcnow() + timedelta(minutes=15)\n+        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n     to_encode.update({\"exp\": expire})\n     encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n     return encoded_jwt\n\n@@ -1,4 +1,4 @@\n-from datetime import datetime, timedelta\n+from datetime import datetime, timedelta, timezone\n from typing import Union\n \n from fastapi import Depends, FastAPI, HTTPException, status\n@@ -79,9 +79,9 @@ def authenticate_user(fake_db, username: str, password: str):\n def create_access_token(data: dict, expires_delta: Union[timedelta, None] = None):\n     to_encode = data.copy()\n     if expires_delta:\n-        expire = datetime.utcnow() + expires_delta\n+        expire = datetime.now(timezone.utc) + expires_delta\n     else:\n-        expire = datetime.utcnow() + timedelta(minutes=15)\n+        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n     to_encode.update({\"exp\": expire})\n     encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n     return encoded_jwt\n\n@@ -1,4 +1,4 @@\n-from datetime import datetime, timedelta\n+from datetime import datetime, timedelta, timezone\n from typing import Annotated\n \n from fastapi import Depends, FastAPI, HTTPException, status\n@@ -78,9 +78,9 @@ def authenticate_user(fake_db, username: str, password: str):\n def create_access_token(data: dict, expires_delta: timedelta | None = None):\n     to_encode = data.copy()\n     if expires_delta:\n-        expire = datetime.utcnow() + expires_delta\n+        expire = datetime.now(timezone.utc) + expires_delta\n     else:\n-        expire = datetime.utcnow() + timedelta(minutes=15)\n+        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n     to_encode.update({\"exp\": expire})\n     encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n     return encoded_jwt\n\n@@ -1,4 +1,4 @@\n-from datetime import datetime, timedelta\n+from datetime import datetime, timedelta, timezone\n from typing import Annotated, Union\n \n from fastapi import Depends, FastAPI, HTTPException, status\n@@ -78,9 +78,9 @@ def authenticate_user(fake_db, username: str, password: str):\n def create_access_token(data: dict, expires_delta: Union[timedelta, None] = None):\n     to_encode = data.copy()\n     if expires_delta:\n-        expire = datetime.utcnow() + expires_delta\n+        expire = datetime.now(timezone.utc) + expires_delta\n     else:\n-        expire = datetime.utcnow() + timedelta(minutes=15)\n+        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n     to_encode.update({\"exp\": expire})\n     encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n     return encoded_jwt\n\n@@ -1,4 +1,4 @@\n-from datetime import datetime, timedelta\n+from datetime import datetime, timedelta, timezone\n \n from fastapi import Depends, FastAPI, HTTPException, status\n from fastapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\n@@ -77,9 +77,9 @@ def authenticate_user(fake_db, username: str, password: str):\n def create_access_token(data: dict, expires_delta: timedelta | None = None):\n     to_encode = data.copy()\n     if expires_delta:\n-        expire = datetime.utcnow() + expires_delta\n+        expire = datetime.now(timezone.utc) + expires_delta\n     else:\n-        expire = datetime.utcnow() + timedelta(minutes=15)\n+        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n     to_encode.update({\"exp\": expire})\n     encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n     return encoded_jwt\n\n@@ -1,4 +1,4 @@\n-from datetime import datetime, timedelta\n+from datetime import datetime, timedelta, timezone\n from typing import List, Union\n \n from fastapi import Depends, FastAPI, HTTPException, Security, status\n@@ -93,9 +93,9 @@ def authenticate_user(fake_db, username: str, password: str):\n def create_access_token(data: dict, expires_delta: Union[timedelta, None] = None):\n     to_encode = data.copy()\n     if expires_delta:\n-        expire = datetime.utcnow() + expires_delta\n+        expire = datetime.now(timezone.utc) + expires_delta\n     else:\n-        expire = datetime.utcnow() + timedelta(minutes=15)\n+        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n     to_encode.update({\"exp\": expire})\n     encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n     return encoded_jwt\n\n@@ -1,4 +1,4 @@\n-from datetime import datetime, timedelta\n+from datetime import datetime, timedelta, timezone\n from typing import List, Union\n \n from fastapi import Depends, FastAPI, HTTPException, Security, status\n@@ -94,9 +94,9 @@ def authenticate_user(fake_db, username: str, password: str):\n def create_access_token(data: dict, expires_delta: Union[timedelta, None] = None):\n     to_encode = data.copy()\n     if expires_delta:\n-        expire = datetime.utcnow() + expires_delta\n+        expire = datetime.now(timezone.utc) + expires_delta\n     else:\n-        expire = datetime.utcnow() + timedelta(minutes=15)\n+        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n     to_encode.update({\"exp\": expire})\n     encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n     return encoded_jwt\n\n@@ -1,4 +1,4 @@\n-from datetime import datetime, timedelta\n+from datetime import datetime, timedelta, timezone\n from typing import Annotated\n \n from fastapi import Depends, FastAPI, HTTPException, Security, status\n@@ -93,9 +93,9 @@ def authenticate_user(fake_db, username: str, password: str):\n def create_access_token(data: dict, expires_delta: timedelta | None = None):\n     to_encode = data.copy()\n     if expires_delta:\n-        expire = datetime.utcnow() + expires_delta\n+        expire = datetime.now(timezone.utc) + expires_delta\n     else:\n-        expire = datetime.utcnow() + timedelta(minutes=15)\n+        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n     to_encode.update({\"exp\": expire})\n     encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n     return encoded_jwt\n\n@@ -1,4 +1,4 @@\n-from datetime import datetime, timedelta\n+from datetime import datetime, timedelta, timezone\n from typing import Annotated, List, Union\n \n from fastapi import Depends, FastAPI, HTTPException, Security, status\n@@ -93,9 +93,9 @@ def authenticate_user(fake_db, username: str, password: str):\n def create_access_token(data: dict, expires_delta: Union[timedelta, None] = None):\n     to_encode = data.copy()\n     if expires_delta:\n-        expire = datetime.utcnow() + expires_delta\n+        expire = datetime.now(timezone.utc) + expires_delta\n     else:\n-        expire = datetime.utcnow() + timedelta(minutes=15)\n+        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n     to_encode.update({\"exp\": expire})\n     encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n     return encoded_jwt\n\n@@ -1,4 +1,4 @@\n-from datetime import datetime, timedelta\n+from datetime import datetime, timedelta, timezone\n \n from fastapi import Depends, FastAPI, HTTPException, Security, status\n from fastapi.security import (\n@@ -92,9 +92,9 @@ def authenticate_user(fake_db, username: str, password: str):\n def create_access_token(data: dict, expires_delta: timedelta | None = None):\n     to_encode = data.copy()\n     if expires_delta:\n-        expire = datetime.utcnow() + expires_delta\n+        expire = datetime.now(timezone.utc) + expires_delta\n     else:\n-        expire = datetime.utcnow() + timedelta(minutes=15)\n+        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n     to_encode.update({\"exp\": expire})\n     encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n     return encoded_jwt\n\n@@ -1,4 +1,4 @@\n-from datetime import datetime, timedelta\n+from datetime import datetime, timedelta, timezone\n from typing import Union\n \n from fastapi import Depends, FastAPI, HTTPException, Security, status\n@@ -93,9 +93,9 @@ def authenticate_user(fake_db, username: str, password: str):\n def create_access_token(data: dict, expires_delta: Union[timedelta, None] = None):\n     to_encode = data.copy()\n     if expires_delta:\n-        expire = datetime.utcnow() + expires_delta\n+        expire = datetime.now(timezone.utc) + expires_delta\n     else:\n-        expire = datetime.utcnow() + timedelta(minutes=15)\n+        expire = datetime.now(timezone.utc) + timedelta(minutes=15)\n     to_encode.update({\"exp\": expire})\n     encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n     return encoded_jwt\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#69cb005f61239a378a7e0715cc5e3ff4b713ab4d", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 3 | Lines Deleted: 3 | Files Changed: 3 | Hunks: 3 | Methods Changed: 3 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 6 | Churn Cumulative: 92 | Contributors (this commit): 3 | Commits (past 90d): 3 | Contributors (cumulative): 7 | DMM Complexity: None\n\nDIFF:\n@@ -22,7 +22,7 @@ def get_current_username(credentials: HTTPBasicCredentials = Depends(security)):\n     if not (is_correct_username and is_correct_password):\n         raise HTTPException(\n             status_code=status.HTTP_401_UNAUTHORIZED,\n-            detail=\"Incorrect email or password\",\n+            detail=\"Incorrect username or password\",\n             headers={\"WWW-Authenticate\": \"Basic\"},\n         )\n     return credentials.username\n\n@@ -25,7 +25,7 @@ def get_current_username(\n     if not (is_correct_username and is_correct_password):\n         raise HTTPException(\n             status_code=status.HTTP_401_UNAUTHORIZED,\n-            detail=\"Incorrect email or password\",\n+            detail=\"Incorrect username or password\",\n             headers={\"WWW-Authenticate\": \"Basic\"},\n         )\n     return credentials.username\n\n@@ -25,7 +25,7 @@ def get_current_username(\n     if not (is_correct_username and is_correct_password):\n         raise HTTPException(\n             status_code=status.HTTP_401_UNAUTHORIZED,\n-            detail=\"Incorrect email or password\",\n+            detail=\"Incorrect username or password\",\n             headers={\"WWW-Authenticate\": \"Basic\"},\n         )\n     return credentials.username\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#cb95d1cb8927292fc096834a62c3aa46af46e4ee", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 459 | Contributors (this commit): 2 | Commits (past 90d): 7 | Contributors (cumulative): 2 | DMM Complexity: None\n\nDIFF:\n@@ -1,6 +1,6 @@\n \"\"\"FastAPI framework, high performance, easy to learn, fast to code, ready for production\"\"\"\n \n-__version__ = \"0.108.0\"\n+__version__ = \"0.109.0\"\n \n from starlette import status as status\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#fd97e8efe43baced1c040cac3627904b37f2380b", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 43 | Lines Deleted: 33 | Files Changed: 11 | Hunks: 28 | Methods Changed: 11 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 76 | Churn Cumulative: 1678 | Contributors (this commit): 6 | Commits (past 90d): 22 | Contributors (cumulative): 39 | DMM Complexity: 1.0\n\nDIFF:\n@@ -112,8 +112,10 @@ async def get_current_active_user(current_user: User = Depends(get_current_user)\n     return current_user\n \n \n-@app.post(\"/token\", response_model=Token)\n-async def login_for_access_token(form_data: OAuth2PasswordRequestForm = Depends()):\n+@app.post(\"/token\")\n+async def login_for_access_token(\n+    form_data: OAuth2PasswordRequestForm = Depends()\n+) -> Token:\n     user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n     if not user:\n         raise HTTPException(\n@@ -125,7 +127,7 @@ async def login_for_access_token(form_data: OAuth2PasswordRequestForm = Depends(\n     access_token = create_access_token(\n         data={\"sub\": user.username}, expires_delta=access_token_expires\n     )\n-    return {\"access_token\": access_token, \"token_type\": \"bearer\"}\n+    return Token(access_token=access_token, token_type=\"bearer\")\n \n \n @app.get(\"/users/me/\", response_model=User)\n\n@@ -115,10 +115,10 @@ async def get_current_active_user(\n     return current_user\n \n \n-@app.post(\"/token\", response_model=Token)\n+@app.post(\"/token\")\n async def login_for_access_token(\n     form_data: Annotated[OAuth2PasswordRequestForm, Depends()]\n-):\n+) -> Token:\n     user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n     if not user:\n         raise HTTPException(\n@@ -130,7 +130,7 @@ async def login_for_access_token(\n     access_token = create_access_token(\n         data={\"sub\": user.username}, expires_delta=access_token_expires\n     )\n-    return {\"access_token\": access_token, \"token_type\": \"bearer\"}\n+    return Token(access_token=access_token, token_type=\"bearer\")\n \n \n @app.get(\"/users/me/\", response_model=User)\n\n@@ -114,10 +114,10 @@ async def get_current_active_user(\n     return current_user\n \n \n-@app.post(\"/token\", response_model=Token)\n+@app.post(\"/token\")\n async def login_for_access_token(\n     form_data: Annotated[OAuth2PasswordRequestForm, Depends()]\n-):\n+) -> Token:\n     user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n     if not user:\n         raise HTTPException(\n@@ -129,7 +129,7 @@ async def login_for_access_token(\n     access_token = create_access_token(\n         data={\"sub\": user.username}, expires_delta=access_token_expires\n     )\n-    return {\"access_token\": access_token, \"token_type\": \"bearer\"}\n+    return Token(access_token=access_token, token_type=\"bearer\")\n \n \n @app.get(\"/users/me/\", response_model=User)\n\n@@ -114,10 +114,10 @@ async def get_current_active_user(\n     return current_user\n \n \n-@app.post(\"/token\", response_model=Token)\n+@app.post(\"/token\")\n async def login_for_access_token(\n     form_data: Annotated[OAuth2PasswordRequestForm, Depends()]\n-):\n+) -> Token:\n     user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n     if not user:\n         raise HTTPException(\n@@ -129,7 +129,7 @@ async def login_for_access_token(\n     access_token = create_access_token(\n         data={\"sub\": user.username}, expires_delta=access_token_expires\n     )\n-    return {\"access_token\": access_token, \"token_type\": \"bearer\"}\n+    return Token(access_token=access_token, token_type=\"bearer\")\n \n \n @app.get(\"/users/me/\", response_model=User)\n\n@@ -111,8 +111,10 @@ async def get_current_active_user(current_user: User = Depends(get_current_user)\n     return current_user\n \n \n-@app.post(\"/token\", response_model=Token)\n-async def login_for_access_token(form_data: OAuth2PasswordRequestForm = Depends()):\n+@app.post(\"/token\")\n+async def login_for_access_token(\n+    form_data: OAuth2PasswordRequestForm = Depends()\n+) -> Token:\n     user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n     if not user:\n         raise HTTPException(\n@@ -124,7 +126,7 @@ async def login_for_access_token(form_data: OAuth2PasswordRequestForm = Depends(\n     access_token = create_access_token(\n         data={\"sub\": user.username}, expires_delta=access_token_expires\n     )\n-    return {\"access_token\": access_token, \"token_type\": \"bearer\"}\n+    return Token(access_token=access_token, token_type=\"bearer\")\n \n \n @app.get(\"/users/me/\", response_model=User)\n\n@@ -143,8 +143,10 @@ async def get_current_active_user(\n     return current_user\n \n \n-@app.post(\"/token\", response_model=Token)\n-async def login_for_access_token(form_data: OAuth2PasswordRequestForm = Depends()):\n+@app.post(\"/token\")\n+async def login_for_access_token(\n+    form_data: OAuth2PasswordRequestForm = Depends()\n+) -> Token:\n     user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n     if not user:\n         raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n@@ -153,7 +155,7 @@ async def login_for_access_token(form_data: OAuth2PasswordRequestForm = Depends(\n         data={\"sub\": user.username, \"scopes\": form_data.scopes},\n         expires_delta=access_token_expires,\n     )\n-    return {\"access_token\": access_token, \"token_type\": \"bearer\"}\n+    return Token(access_token=access_token, token_type=\"bearer\")\n \n \n @app.get(\"/users/me/\", response_model=User)\n\n@@ -144,10 +144,10 @@ async def get_current_active_user(\n     return current_user\n \n \n-@app.post(\"/token\", response_model=Token)\n+@app.post(\"/token\")\n async def login_for_access_token(\n     form_data: Annotated[OAuth2PasswordRequestForm, Depends()]\n-):\n+) -> Token:\n     user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n     if not user:\n         raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n@@ -156,7 +156,7 @@ async def login_for_access_token(\n         data={\"sub\": user.username, \"scopes\": form_data.scopes},\n         expires_delta=access_token_expires,\n     )\n-    return {\"access_token\": access_token, \"token_type\": \"bearer\"}\n+    return Token(access_token=access_token, token_type=\"bearer\")\n \n \n @app.get(\"/users/me/\", response_model=User)\n\n@@ -143,10 +143,10 @@ async def get_current_active_user(\n     return current_user\n \n \n-@app.post(\"/token\", response_model=Token)\n+@app.post(\"/token\")\n async def login_for_access_token(\n     form_data: Annotated[OAuth2PasswordRequestForm, Depends()]\n-):\n+) -> Token:\n     user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n     if not user:\n         raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n@@ -155,7 +155,7 @@ async def login_for_access_token(\n         data={\"sub\": user.username, \"scopes\": form_data.scopes},\n         expires_delta=access_token_expires,\n     )\n-    return {\"access_token\": access_token, \"token_type\": \"bearer\"}\n+    return Token(access_token=access_token, token_type=\"bearer\")\n \n \n @app.get(\"/users/me/\", response_model=User)\n\n@@ -143,10 +143,10 @@ async def get_current_active_user(\n     return current_user\n \n \n-@app.post(\"/token\", response_model=Token)\n+@app.post(\"/token\")\n async def login_for_access_token(\n     form_data: Annotated[OAuth2PasswordRequestForm, Depends()]\n-):\n+) -> Token:\n     user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n     if not user:\n         raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n@@ -155,7 +155,7 @@ async def login_for_access_token(\n         data={\"sub\": user.username, \"scopes\": form_data.scopes},\n         expires_delta=access_token_expires,\n     )\n-    return {\"access_token\": access_token, \"token_type\": \"bearer\"}\n+    return Token(access_token=access_token, token_type=\"bearer\")\n \n \n @app.get(\"/users/me/\", response_model=User)\n\n@@ -142,8 +142,10 @@ async def get_current_active_user(\n     return current_user\n \n \n-@app.post(\"/token\", response_model=Token)\n-async def login_for_access_token(form_data: OAuth2PasswordRequestForm = Depends()):\n+@app.post(\"/token\")\n+async def login_for_access_token(\n+    form_data: OAuth2PasswordRequestForm = Depends()\n+) -> Token:\n     user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n     if not user:\n         raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n@@ -152,7 +154,7 @@ async def login_for_access_token(form_data: OAuth2PasswordRequestForm = Depends(\n         data={\"sub\": user.username, \"scopes\": form_data.scopes},\n         expires_delta=access_token_expires,\n     )\n-    return {\"access_token\": access_token, \"token_type\": \"bearer\"}\n+    return Token(access_token=access_token, token_type=\"bearer\")\n \n \n @app.get(\"/users/me/\", response_model=User)\n\n@@ -143,8 +143,10 @@ async def get_current_active_user(\n     return current_user\n \n \n-@app.post(\"/token\", response_model=Token)\n-async def login_for_access_token(form_data: OAuth2PasswordRequestForm = Depends()):\n+@app.post(\"/token\")\n+async def login_for_access_token(\n+    form_data: OAuth2PasswordRequestForm = Depends()\n+) -> Token:\n     user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n     if not user:\n         raise HTTPException(status_code=400, detail=\"Incorrect username or password\")\n@@ -153,7 +155,7 @@ async def login_for_access_token(form_data: OAuth2PasswordRequestForm = Depends(\n         data={\"sub\": user.username, \"scopes\": form_data.scopes},\n         expires_delta=access_token_expires,\n     )\n-    return {\"access_token\": access_token, \"token_type\": \"bearer\"}\n+    return Token(access_token=access_token, token_type=\"bearer\")\n \n \n @app.get(\"/users/me/\", response_model=User)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#0c796747a3d652f7d5d7fc59c5fbb68512b64ccf", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 4 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 5 | Churn Cumulative: 41 | Contributors (this commit): 3 | Commits (past 90d): 1 | Contributors (cumulative): 3 | DMM Complexity: 1.0\n\nDIFF:\n@@ -16,7 +16,10 @@ def test_main():\n     client = TestClient(app)\n     response = client.get(\"/items/foo\")\n     assert response.status_code == 200, response.text\n-    assert b\"<h1>Item ID: foo</h1>\" in response.content\n+    assert (\n+        b'<h1><a href=\"http://testserver/items/foo\">Item ID: foo</a></h1>'\n+        in response.content\n+    )\n     response = client.get(\"/static/styles.css\")\n     assert response.status_code == 200, response.text\n     assert b\"color: green;\" in response.content\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#0aee526de9fa908027c100237a692407a5e49818", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 6 | Lines Deleted: 3 | Files Changed: 1 | Hunks: 2 | Methods Changed: 2 | Complexity Δ (Sum/Max): -1/0 | Churn Δ: 9 | Churn Cumulative: 951 | Contributors (this commit): 3 | Commits (past 90d): 4 | Contributors (cumulative): 3 | DMM Complexity: 0.0\n\nDIFF:\n@@ -53,9 +53,6 @@ def get_lang_paths() -> List[Path]:\n def lang_callback(lang: Optional[str]) -> Union[str, None]:\n     if lang is None:\n         return None\n-    if not lang.isalpha() or len(lang) != 2:\n-        typer.echo(\"Use a 2 letter language code, like: es\")\n-        raise typer.Abort()\n     lang = lang.lower()\n     return lang\n \n@@ -289,6 +286,12 @@ def update_config() -> None:\n     for lang_dict in languages:\n         code = list(lang_dict.keys())[0]\n         url = lang_dict[code]\n+        if code not in local_language_names:\n+            print(\n+                f\"Missing language name for: {code}, \"\n+                \"update it in docs/language_names.yml\"\n+            )\n+            raise typer.Abort()\n         use_name = f\"{code} - {local_language_names[code]}\"\n         new_alternate.append({\"link\": url, \"name\": use_name})\n     new_alternate.append({\"link\": \"/em/\", \"name\": \"😉\"})\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#be0bd344463c04ce095051a1fd6bf209165b3e94", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 6 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 8 | Churn Cumulative: 126 | Contributors (this commit): 2 | Commits (past 90d): 1 | Contributors (cumulative): 2 | DMM Complexity: None\n\nDIFF:\n@@ -12,8 +12,12 @@ client = TestClient(app)\n     [\n         (\"/items\", None, 200, {\"X-Token values\": None}),\n         (\"/items\", {\"x-token\": \"foo\"}, 200, {\"X-Token values\": [\"foo\"]}),\n-        # TODO: fix this, is it a bug?\n-        # (\"/items\", [(\"x-token\", \"foo\"), (\"x-token\", \"bar\")], 200, {\"X-Token values\": [\"foo\", \"bar\"]}),\n+        (\n+            \"/items\",\n+            [(\"x-token\", \"foo\"), (\"x-token\", \"bar\")],\n+            200,\n+            {\"X-Token values\": [\"foo\", \"bar\"]},\n+        ),\n     ],\n )\n def test(path, headers, expected_status, expected_response):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#de0126d145c920c992c605538e63fe0e46b508d5", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 4 | Lines Deleted: 4 | Files Changed: 1 | Hunks: 4 | Methods Changed: 2 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 8 | Churn Cumulative: 783 | Contributors (this commit): 24 | Commits (past 90d): 3 | Contributors (cumulative): 24 | DMM Complexity: None\n\nDIFF:\n@@ -173,17 +173,17 @@ def generate_operation_id_for_path(\n         DeprecationWarning,\n         stacklevel=2,\n     )\n-    operation_id = name + path\n+    operation_id = f\"{name}{path}\"\n     operation_id = re.sub(r\"\\W\", \"_\", operation_id)\n-    operation_id = operation_id + \"_\" + method.lower()\n+    operation_id = f\"{operation_id}_{method.lower()}\"\n     return operation_id\n \n \n def generate_unique_id(route: \"APIRoute\") -> str:\n-    operation_id = route.name + route.path_format\n+    operation_id = f\"{route.name}{route.path_format}\"\n     operation_id = re.sub(r\"\\W\", \"_\", operation_id)\n     assert route.methods\n-    operation_id = operation_id + \"_\" + list(route.methods)[0].lower()\n+    operation_id = f\"{operation_id}_{list(route.methods)[0].lower()}\"\n     return operation_id\n \n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#f18eadb7de142d6bf37eff900731329a541758f5", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 6 | Lines Deleted: 3 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 2/2 | Churn Δ: 9 | Churn Cumulative: 1668 | Contributors (this commit): 2 | Commits (past 90d): 1 | Contributors (cumulative): 2 | DMM Complexity: 1.0\n\nDIFF:\n@@ -1626,6 +1626,9 @@ def test_warn_duplicate_operation_id():\n     with warnings.catch_warnings(record=True) as w:\n         warnings.simplefilter(\"always\")\n         client.get(\"/openapi.json\")\n-        assert len(w) == 2\n-        assert issubclass(w[-1].category, UserWarning)\n-        assert \"Duplicate Operation ID\" in str(w[-1].message)\n+        assert len(w) >= 2\n+        duplicate_warnings = [\n+            warning for warning in w if issubclass(warning.category, UserWarning)\n+        ]\n+        assert len(duplicate_warnings) > 0\n+        assert \"Duplicate Operation ID\" in str(duplicate_warnings[0].message)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#dcc952d6990c507956669e6fc5cddba0530c79d1", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 785 | Contributors (this commit): 24 | Commits (past 90d): 4 | Contributors (cumulative): 24 | DMM Complexity: None\n\nDIFF:\n@@ -53,7 +53,7 @@ def is_body_allowed_for_status_code(status_code: Union[int, str, None]) -> bool:\n     }:\n         return True\n     current_status_code = int(status_code)\n-    return not (current_status_code < 200 or current_status_code in {204, 304})\n+    return not (current_status_code < 200 or current_status_code in {204, 205, 304})\n \n \n def get_path_param_names(path: str) -> Set[str]:\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#8450dc204d806bac021c6a2432d7b4a0749e77cd", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 1094 | Contributors (this commit): 11 | Commits (past 90d): 3 | Contributors (cumulative): 11 | DMM Complexity: None\n\nDIFF:\n@@ -353,7 +353,7 @@ class OAuth2(SecurityBase):\n             bool,\n             Doc(\n                 \"\"\"\n-                By default, if no HTTP Auhtorization header is provided, required for\n+                By default, if no HTTP Authorization header is provided, required for\n                 OAuth2 authentication, it will automatically cancel the request and\n                 send the client an error.\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#df09e0a3f6061de4bf63b8ab7ea61b6cdd70d4fd", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 0 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 953 | Contributors (this commit): 4 | Commits (past 90d): 4 | Contributors (cumulative): 4 | DMM Complexity: 0.0\n\nDIFF:\n@@ -76,8 +76,6 @@ def callback() -> None:\n def new_lang(lang: str = typer.Argument(..., callback=lang_callback)):\n     \"\"\"\n     Generate a new docs translation directory for the language LANG.\n-\n-    LANG should be a 2-letter language code, like: en, es, de, pt, etc.\n     \"\"\"\n     new_path: Path = Path(\"docs\") / lang\n     if new_path.exists():\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#2fe1a1387b1c9bbcbb7f701e15472e491295bf59", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 31 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 3 | Methods Changed: 4 | Complexity Δ (Sum/Max): 4/4 | Churn Δ: 32 | Churn Cumulative: 985 | Contributors (this commit): 4 | Commits (past 90d): 5 | Contributors (cumulative): 4 | DMM Complexity: 1.0\n\nDIFF:\n@@ -266,7 +266,7 @@ def live(\n     mkdocs.commands.serve.serve(dev_addr=\"127.0.0.1:8008\")\n \n \n-def update_config() -> None:\n+def get_updated_config_content() -> Dict[str, Any]:\n     config = get_en_config()\n     languages = [{\"en\": \"/\"}]\n     new_alternate: List[Dict[str, str]] = []\n@@ -294,12 +294,42 @@ def update_config() -> None:\n         new_alternate.append({\"link\": url, \"name\": use_name})\n     new_alternate.append({\"link\": \"/em/\", \"name\": \"😉\"})\n     config[\"extra\"][\"alternate\"] = new_alternate\n+    return config\n+\n+\n+def update_config() -> None:\n+    config = get_updated_config_content()\n     en_config_path.write_text(\n         yaml.dump(config, sort_keys=False, width=200, allow_unicode=True),\n         encoding=\"utf-8\",\n     )\n \n \n+@app.command()\n+def verify_config() -> None:\n+    \"\"\"\n+    Verify main mkdocs.yml content to make sure it uses the latest language names.\n+    \"\"\"\n+    typer.echo(\"Verifying mkdocs.yml\")\n+    config = get_en_config()\n+    updated_config = get_updated_config_content()\n+    if config != updated_config:\n+        typer.secho(\n+            \"docs/en/mkdocs.yml outdated from docs/language_names.yml, \"\n+            \"update language_names.yml and run \"\n+            \"python ./scripts/docs.py update-languages\",\n+            color=typer.colors.RED,\n+        )\n+        raise typer.Abort()\n+    typer.echo(\"Valid mkdocs.yml ✅\")\n+\n+\n+@app.command()\n+def verify_docs():\n+    verify_readme()\n+    verify_config()\n+\n+\n @app.command()\n def langs_json():\n     langs = []\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#7633d1571cc0c2792b766f67172edb9427c66899", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 461 | Contributors (this commit): 2 | Commits (past 90d): 6 | Contributors (cumulative): 2 | DMM Complexity: None\n\nDIFF:\n@@ -1,6 +1,6 @@\n \"\"\"FastAPI framework, high performance, easy to learn, fast to code, ready for production\"\"\"\n \n-__version__ = \"0.109.0\"\n+__version__ = \"0.109.1\"\n \n from starlette import status as status\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#57b0983948617c6ac051f9c29947bd9db6547e3b", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 463 | Contributors (this commit): 2 | Commits (past 90d): 7 | Contributors (cumulative): 2 | DMM Complexity: None\n\nDIFF:\n@@ -1,6 +1,6 @@\n \"\"\"FastAPI framework, high performance, easy to learn, fast to code, ready for production\"\"\"\n \n-__version__ = \"0.109.1\"\n+__version__ = \"0.109.2\"\n \n from starlette import status as status\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#0880a5c6a0d2702b057cef8064690f63ff1afc78", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 7521 | Contributors (this commit): 32 | Commits (past 90d): 2 | Contributors (cumulative): 32 | DMM Complexity: None\n\nDIFF:\n@@ -297,7 +297,7 @@ class FastAPI(Starlette):\n                 browser tabs open). Or if you want to leave fixed the possible URLs.\n \n                 If the servers `list` is not provided, or is an empty `list`, the\n-                default value would be a a `dict` with a `url` value of `/`.\n+                default value would be a `dict` with a `url` value of `/`.\n \n                 Each item in the `list` is a `dict` containing:\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#bf771bd7817f8e8348f85836a21d1e96c0b4f7a2", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 457 | Lines Deleted: 36 | Files Changed: 16 | Hunks: 31 | Methods Changed: 54 | Complexity Δ (Sum/Max): 60/5 | Churn Δ: 493 | Churn Cumulative: 9509 | Contributors (this commit): 42 | Commits (past 90d): 21 | Contributors (cumulative): 58 | DMM Complexity: 1.0\n\nDIFF:\n@@ -0,0 +1,27 @@\n+from fastapi import Depends, FastAPI, HTTPException\n+\n+app = FastAPI()\n+\n+\n+class InternalError(Exception):\n+    pass\n+\n+\n+def get_username():\n+    try:\n+        yield \"Rick\"\n+    except InternalError:\n+        print(\"Oops, we didn't raise again, Britney 😱\")\n+\n+\n+@app.get(\"/items/{item_id}\")\n+def get_item(item_id: str, username: str = Depends(get_username)):\n+    if item_id == \"portal-gun\":\n+        raise InternalError(\n+            f\"The portal gun is too dangerous to be owned by {username}\"\n+        )\n+    if item_id != \"plumbus\":\n+        raise HTTPException(\n+            status_code=404, detail=\"Item not found, there's only a plumbus here\"\n+        )\n+    return item_id\n\n@@ -0,0 +1,28 @@\n+from fastapi import Depends, FastAPI, HTTPException\n+from typing_extensions import Annotated\n+\n+app = FastAPI()\n+\n+\n+class InternalError(Exception):\n+    pass\n+\n+\n+def get_username():\n+    try:\n+        yield \"Rick\"\n+    except InternalError:\n+        print(\"Oops, we didn't raise again, Britney 😱\")\n+\n+\n+@app.get(\"/items/{item_id}\")\n+def get_item(item_id: str, username: Annotated[str, Depends(get_username)]):\n+    if item_id == \"portal-gun\":\n+        raise InternalError(\n+            f\"The portal gun is too dangerous to be owned by {username}\"\n+        )\n+    if item_id != \"plumbus\":\n+        raise HTTPException(\n+            status_code=404, detail=\"Item not found, there's only a plumbus here\"\n+        )\n+    return item_id\n\n@@ -0,0 +1,29 @@\n+from typing import Annotated\n+\n+from fastapi import Depends, FastAPI, HTTPException\n+\n+app = FastAPI()\n+\n+\n+class InternalError(Exception):\n+    pass\n+\n+\n+def get_username():\n+    try:\n+        yield \"Rick\"\n+    except InternalError:\n+        print(\"Oops, we didn't raise again, Britney 😱\")\n+\n+\n+@app.get(\"/items/{item_id}\")\n+def get_item(item_id: str, username: Annotated[str, Depends(get_username)]):\n+    if item_id == \"portal-gun\":\n+        raise InternalError(\n+            f\"The portal gun is too dangerous to be owned by {username}\"\n+        )\n+    if item_id != \"plumbus\":\n+        raise HTTPException(\n+            status_code=404, detail=\"Item not found, there's only a plumbus here\"\n+        )\n+    return item_id\n\n@@ -0,0 +1,28 @@\n+from fastapi import Depends, FastAPI, HTTPException\n+\n+app = FastAPI()\n+\n+\n+class InternalError(Exception):\n+    pass\n+\n+\n+def get_username():\n+    try:\n+        yield \"Rick\"\n+    except InternalError:\n+        print(\"We don't swallow the internal error here, we raise again 😎\")\n+        raise\n+\n+\n+@app.get(\"/items/{item_id}\")\n+def get_item(item_id: str, username: str = Depends(get_username)):\n+    if item_id == \"portal-gun\":\n+        raise InternalError(\n+            f\"The portal gun is too dangerous to be owned by {username}\"\n+        )\n+    if item_id != \"plumbus\":\n+        raise HTTPException(\n+            status_code=404, detail=\"Item not found, there's only a plumbus here\"\n+        )\n+    return item_id\n\n@@ -0,0 +1,29 @@\n+from fastapi import Depends, FastAPI, HTTPException\n+from typing_extensions import Annotated\n+\n+app = FastAPI()\n+\n+\n+class InternalError(Exception):\n+    pass\n+\n+\n+def get_username():\n+    try:\n+        yield \"Rick\"\n+    except InternalError:\n+        print(\"We don't swallow the internal error here, we raise again 😎\")\n+        raise\n+\n+\n+@app.get(\"/items/{item_id}\")\n+def get_item(item_id: str, username: Annotated[str, Depends(get_username)]):\n+    if item_id == \"portal-gun\":\n+        raise InternalError(\n+            f\"The portal gun is too dangerous to be owned by {username}\"\n+        )\n+    if item_id != \"plumbus\":\n+        raise HTTPException(\n+            status_code=404, detail=\"Item not found, there's only a plumbus here\"\n+        )\n+    return item_id\n\n@@ -0,0 +1,30 @@\n+from typing import Annotated\n+\n+from fastapi import Depends, FastAPI, HTTPException\n+\n+app = FastAPI()\n+\n+\n+class InternalError(Exception):\n+    pass\n+\n+\n+def get_username():\n+    try:\n+        yield \"Rick\"\n+    except InternalError:\n+        print(\"We don't swallow the internal error here, we raise again 😎\")\n+        raise\n+\n+\n+@app.get(\"/items/{item_id}\")\n+def get_item(item_id: str, username: Annotated[str, Depends(get_username)]):\n+    if item_id == \"portal-gun\":\n+        raise InternalError(\n+            f\"The portal gun is too dangerous to be owned by {username}\"\n+        )\n+    if item_id != \"plumbus\":\n+        raise HTTPException(\n+            status_code=404, detail=\"Item not found, there's only a plumbus here\"\n+        )\n+    return item_id\n\n@@ -216,19 +216,14 @@ def get_request_handler(\n         actual_response_class = response_class\n \n     async def app(request: Request) -> Response:\n-        exception_to_reraise: Optional[Exception] = None\n         response: Union[Response, None] = None\n-        async with AsyncExitStack() as async_exit_stack:\n-            # TODO: remove this scope later, after a few releases\n-            # This scope fastapi_astack is no longer used by FastAPI, kept for\n-            # compatibility, just in case\n-            request.scope[\"fastapi_astack\"] = async_exit_stack\n+        async with AsyncExitStack() as file_stack:\n             try:\n                 body: Any = None\n                 if body_field:\n                     if is_body_form:\n                         body = await request.form()\n-                        async_exit_stack.push_async_callback(body.close)\n+                        file_stack.push_async_callback(body.close)\n                     else:\n                         body_bytes = await request.body()\n                         if body_bytes:\n@@ -260,18 +255,17 @@ def get_request_handler(\n                     ],\n                     body=e.doc,\n                 )\n-                exception_to_reraise = validation_error\n                 raise validation_error from e\n-            except HTTPException as e:\n-                exception_to_reraise = e\n+            except HTTPException:\n+                # If a middleware raises an HTTPException, it should be raised again\n                 raise\n             except Exception as e:\n                 http_error = HTTPException(\n                     status_code=400, detail=\"There was an error parsing the body\"\n                 )\n-                exception_to_reraise = http_error\n                 raise http_error from e\n-            try:\n+            errors: List[Any] = []\n+            async with AsyncExitStack() as async_exit_stack:\n                 solved_result = await solve_dependencies(\n                     request=request,\n                     dependant=dependant,\n@@ -280,23 +274,10 @@ def get_request_handler(\n                     async_exit_stack=async_exit_stack,\n                 )\n                 values, errors, background_tasks, sub_response, _ = solved_result\n-            except Exception as e:\n-                exception_to_reraise = e\n-                raise e\n-            if errors:\n-                validation_error = RequestValidationError(\n-                    _normalize_errors(errors), body=body\n-                )\n-                exception_to_reraise = validation_error\n-                raise validation_error\n-            else:\n-                try:\n+                if not errors:\n                     raw_response = await run_endpoint_function(\n                         dependant=dependant, values=values, is_coroutine=is_coroutine\n                     )\n-                except Exception as e:\n-                    exception_to_reraise = e\n-                    raise e\n                     if isinstance(raw_response, Response):\n                         if raw_response.background is None:\n                             raw_response.background = background_tasks\n@@ -327,12 +308,19 @@ def get_request_handler(\n                         if not is_body_allowed_for_status_code(response.status_code):\n                             response.body = b\"\"\n                         response.headers.raw.extend(sub_response.headers.raw)\n-        # This exception was possibly handled by the dependency but it should\n-        # still bubble up so that the ServerErrorMiddleware can return a 500\n-        # or the ExceptionMiddleware can catch and handle any other exceptions\n-        if exception_to_reraise:\n-            raise exception_to_reraise\n-        assert response is not None, \"An error occurred while generating the request\"\n+            if errors:\n+                validation_error = RequestValidationError(\n+                    _normalize_errors(errors), body=body\n+                )\n+                raise validation_error\n+        if response is None:\n+            raise FastAPIError(\n+                \"No response object was returned. There's a high chance that the \"\n+                \"application code is raising an exception and a dependency with yield \"\n+                \"has a block with a bare except, or a block with except Exception, \"\n+                \"and is not raising the exception again. Read more about it in the \"\n+                \"docs: https://fastapi.tiangolo.com/tutorial/dependencies/dependencies-with-yield/#dependencies-with-yield-and-except\"\n+            )\n         return response\n \n     return app\n\n@@ -55,6 +55,7 @@ async def asyncgen_state_try(state: Dict[str, str] = Depends(get_state)):\n         yield state[\"/async_raise\"]\n     except AsyncDependencyError:\n         errors.append(\"/async_raise\")\n+        raise\n     finally:\n         state[\"/async_raise\"] = \"asyncgen raise finalized\"\n \n@@ -65,6 +66,7 @@ def generator_state_try(state: Dict[str, str] = Depends(get_state)):\n         yield state[\"/sync_raise\"]\n     except SyncDependencyError:\n         errors.append(\"/sync_raise\")\n+        raise\n     finally:\n         state[\"/sync_raise\"] = \"generator raise finalized\"\n \n\n@@ -20,6 +20,7 @@ async def get_database():\n         fake_database.update(temp_database)\n     except HTTPException:\n         state[\"except\"] = True\n+        raise\n     finally:\n         state[\"finally\"] = True\n \n\n@@ -1,23 +1,33 @@\n+import pytest\n from fastapi.testclient import TestClient\n \n-from docs_src.dependencies.tutorial008b_an import app\n+from ...utils import needs_py39\n+\n+\n+@pytest.fixture(name=\"client\")\n+def get_client():\n+    from docs_src.dependencies.tutorial008b_an_py39 import app\n \n     client = TestClient(app)\n+    return client\n \n \n-def test_get_no_item():\n+@needs_py39\n+def test_get_no_item(client: TestClient):\n     response = client.get(\"/items/foo\")\n     assert response.status_code == 404, response.text\n     assert response.json() == {\"detail\": \"Item not found\"}\n \n \n-def test_owner_error():\n+@needs_py39\n+def test_owner_error(client: TestClient):\n     response = client.get(\"/items/plumbus\")\n     assert response.status_code == 400, response.text\n     assert response.json() == {\"detail\": \"Owner error: Rick\"}\n \n \n-def test_get_item():\n+@needs_py39\n+def test_get_item(client: TestClient):\n     response = client.get(\"/items/portal-gun\")\n     assert response.status_code == 200, response.text\n     assert response.json() == {\"description\": \"Gun to create portals\", \"owner\": \"Rick\"}\n\n@@ -0,0 +1,38 @@\n+import pytest\n+from fastapi.exceptions import FastAPIError\n+from fastapi.testclient import TestClient\n+\n+\n+@pytest.fixture(name=\"client\")\n+def get_client():\n+    from docs_src.dependencies.tutorial008c import app\n+\n+    client = TestClient(app)\n+    return client\n+\n+\n+def test_get_no_item(client: TestClient):\n+    response = client.get(\"/items/foo\")\n+    assert response.status_code == 404, response.text\n+    assert response.json() == {\"detail\": \"Item not found, there's only a plumbus here\"}\n+\n+\n+def test_get(client: TestClient):\n+    response = client.get(\"/items/plumbus\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == \"plumbus\"\n+\n+\n+def test_fastapi_error(client: TestClient):\n+    with pytest.raises(FastAPIError) as exc_info:\n+        client.get(\"/items/portal-gun\")\n+    assert \"No response object was returned\" in exc_info.value.args[0]\n+\n+\n+def test_internal_server_error():\n+    from docs_src.dependencies.tutorial008c import app\n+\n+    client = TestClient(app, raise_server_exceptions=False)\n+    response = client.get(\"/items/portal-gun\")\n+    assert response.status_code == 500, response.text\n+    assert response.text == \"Internal Server Error\"\n\n@@ -0,0 +1,38 @@\n+import pytest\n+from fastapi.exceptions import FastAPIError\n+from fastapi.testclient import TestClient\n+\n+\n+@pytest.fixture(name=\"client\")\n+def get_client():\n+    from docs_src.dependencies.tutorial008c_an import app\n+\n+    client = TestClient(app)\n+    return client\n+\n+\n+def test_get_no_item(client: TestClient):\n+    response = client.get(\"/items/foo\")\n+    assert response.status_code == 404, response.text\n+    assert response.json() == {\"detail\": \"Item not found, there's only a plumbus here\"}\n+\n+\n+def test_get(client: TestClient):\n+    response = client.get(\"/items/plumbus\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == \"plumbus\"\n+\n+\n+def test_fastapi_error(client: TestClient):\n+    with pytest.raises(FastAPIError) as exc_info:\n+        client.get(\"/items/portal-gun\")\n+    assert \"No response object was returned\" in exc_info.value.args[0]\n+\n+\n+def test_internal_server_error():\n+    from docs_src.dependencies.tutorial008c_an import app\n+\n+    client = TestClient(app, raise_server_exceptions=False)\n+    response = client.get(\"/items/portal-gun\")\n+    assert response.status_code == 500, response.text\n+    assert response.text == \"Internal Server Error\"\n\n@@ -0,0 +1,44 @@\n+import pytest\n+from fastapi.exceptions import FastAPIError\n+from fastapi.testclient import TestClient\n+\n+from ...utils import needs_py39\n+\n+\n+@pytest.fixture(name=\"client\")\n+def get_client():\n+    from docs_src.dependencies.tutorial008c_an_py39 import app\n+\n+    client = TestClient(app)\n+    return client\n+\n+\n+@needs_py39\n+def test_get_no_item(client: TestClient):\n+    response = client.get(\"/items/foo\")\n+    assert response.status_code == 404, response.text\n+    assert response.json() == {\"detail\": \"Item not found, there's only a plumbus here\"}\n+\n+\n+@needs_py39\n+def test_get(client: TestClient):\n+    response = client.get(\"/items/plumbus\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == \"plumbus\"\n+\n+\n+@needs_py39\n+def test_fastapi_error(client: TestClient):\n+    with pytest.raises(FastAPIError) as exc_info:\n+        client.get(\"/items/portal-gun\")\n+    assert \"No response object was returned\" in exc_info.value.args[0]\n+\n+\n+@needs_py39\n+def test_internal_server_error():\n+    from docs_src.dependencies.tutorial008c_an_py39 import app\n+\n+    client = TestClient(app, raise_server_exceptions=False)\n+    response = client.get(\"/items/portal-gun\")\n+    assert response.status_code == 500, response.text\n+    assert response.text == \"Internal Server Error\"\n\n@@ -0,0 +1,41 @@\n+import pytest\n+from fastapi.testclient import TestClient\n+\n+\n+@pytest.fixture(name=\"client\")\n+def get_client():\n+    from docs_src.dependencies.tutorial008d import app\n+\n+    client = TestClient(app)\n+    return client\n+\n+\n+def test_get_no_item(client: TestClient):\n+    response = client.get(\"/items/foo\")\n+    assert response.status_code == 404, response.text\n+    assert response.json() == {\"detail\": \"Item not found, there's only a plumbus here\"}\n+\n+\n+def test_get(client: TestClient):\n+    response = client.get(\"/items/plumbus\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == \"plumbus\"\n+\n+\n+def test_internal_error(client: TestClient):\n+    from docs_src.dependencies.tutorial008d import InternalError\n+\n+    with pytest.raises(InternalError) as exc_info:\n+        client.get(\"/items/portal-gun\")\n+    assert (\n+        exc_info.value.args[0] == \"The portal gun is too dangerous to be owned by Rick\"\n+    )\n+\n+\n+def test_internal_server_error():\n+    from docs_src.dependencies.tutorial008d import app\n+\n+    client = TestClient(app, raise_server_exceptions=False)\n+    response = client.get(\"/items/portal-gun\")\n+    assert response.status_code == 500, response.text\n+    assert response.text == \"Internal Server Error\"\n\n@@ -0,0 +1,41 @@\n+import pytest\n+from fastapi.testclient import TestClient\n+\n+\n+@pytest.fixture(name=\"client\")\n+def get_client():\n+    from docs_src.dependencies.tutorial008d_an import app\n+\n+    client = TestClient(app)\n+    return client\n+\n+\n+def test_get_no_item(client: TestClient):\n+    response = client.get(\"/items/foo\")\n+    assert response.status_code == 404, response.text\n+    assert response.json() == {\"detail\": \"Item not found, there's only a plumbus here\"}\n+\n+\n+def test_get(client: TestClient):\n+    response = client.get(\"/items/plumbus\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == \"plumbus\"\n+\n+\n+def test_internal_error(client: TestClient):\n+    from docs_src.dependencies.tutorial008d_an import InternalError\n+\n+    with pytest.raises(InternalError) as exc_info:\n+        client.get(\"/items/portal-gun\")\n+    assert (\n+        exc_info.value.args[0] == \"The portal gun is too dangerous to be owned by Rick\"\n+    )\n+\n+\n+def test_internal_server_error():\n+    from docs_src.dependencies.tutorial008d_an import app\n+\n+    client = TestClient(app, raise_server_exceptions=False)\n+    response = client.get(\"/items/portal-gun\")\n+    assert response.status_code == 500, response.text\n+    assert response.text == \"Internal Server Error\"\n\n@@ -0,0 +1,47 @@\n+import pytest\n+from fastapi.testclient import TestClient\n+\n+from ...utils import needs_py39\n+\n+\n+@pytest.fixture(name=\"client\")\n+def get_client():\n+    from docs_src.dependencies.tutorial008d_an_py39 import app\n+\n+    client = TestClient(app)\n+    return client\n+\n+\n+@needs_py39\n+def test_get_no_item(client: TestClient):\n+    response = client.get(\"/items/foo\")\n+    assert response.status_code == 404, response.text\n+    assert response.json() == {\"detail\": \"Item not found, there's only a plumbus here\"}\n+\n+\n+@needs_py39\n+def test_get(client: TestClient):\n+    response = client.get(\"/items/plumbus\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == \"plumbus\"\n+\n+\n+@needs_py39\n+def test_internal_error(client: TestClient):\n+    from docs_src.dependencies.tutorial008d_an_py39 import InternalError\n+\n+    with pytest.raises(InternalError) as exc_info:\n+        client.get(\"/items/portal-gun\")\n+    assert (\n+        exc_info.value.args[0] == \"The portal gun is too dangerous to be owned by Rick\"\n+    )\n+\n+\n+@needs_py39\n+def test_internal_server_error():\n+    from docs_src.dependencies.tutorial008d_an_py39 import app\n+\n+    client = TestClient(app, raise_server_exceptions=False)\n+    response = client.get(\"/items/portal-gun\")\n+    assert response.status_code == 500, response.text\n+    assert response.text == \"Internal Server Error\"\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
