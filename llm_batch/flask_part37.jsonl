{"custom_id": "flask#239780be289efd365c07be2f60bab9223388399e", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 147 | Lines Deleted: 144 | Files Changed: 12 | Hunks: 119 | Methods Changed: 91 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 291 | Churn Cumulative: 5987 | Contributors (this commit): 17 | Commits (past 90d): 56 | Contributors (cumulative): 64 | DMM Complexity: 1.0\n\nDIFF:\n@@ -101,9 +101,9 @@ def emits_module_deprecation_warning(f):\n     def new_f(self, *args, **kwargs):\n         with catch_warnings() as log:\n             f(self, *args, **kwargs)\n-            self.assert_(log, 'expected deprecation warning')\n+            self.assert_true(log, 'expected deprecation warning')\n             for entry in log:\n-                self.assert_('Modules are deprecated' in str(entry['message']))\n+                self.assert_true('Modules are deprecated' in str(entry['message']))\n     return update_wrapper(new_f, f)\n \n \n@@ -142,6 +142,9 @@ class FlaskTestCase(unittest.TestCase):\n         with catcher:\n             callable(*args, **kwargs)\n \n+    def assert_true(self, x):\n+        self.assertTrue(x)\n+\n \n class _ExceptionCatcher(object):\n \n\n@@ -87,7 +87,7 @@ class AppContextTestCase(FlaskTestCase):\n             with flask._app_ctx_stack.top:\n                 with flask._request_ctx_stack.top:\n                     pass\n-            self.assert_(flask._request_ctx_stack.request.environ\n+            self.assert_true(flask._request_ctx_stack.request.environ\n                 ['werkzeug.request'] is not None)\n         c = app.test_client()\n         c.get('/')\n\n@@ -78,7 +78,7 @@ class BasicFunctionalityTestCase(FlaskTestCase):\n         self.assert_equal(sorted(rv.allow), ['GET', 'HEAD', 'OPTIONS'])\n         rv = c.head('/')\n         self.assert_equal(rv.status_code, 200)\n-        self.assert_(not rv.data) # head truncates\n+        self.assert_true(not rv.data) # head truncates\n         self.assert_equal(c.post('/more').data, b'POST')\n         self.assert_equal(c.get('/more').data, b'GET')\n         rv = c.delete('/more')\n@@ -102,7 +102,7 @@ class BasicFunctionalityTestCase(FlaskTestCase):\n         self.assert_equal(sorted(rv.allow), ['GET', 'HEAD', 'OPTIONS'])\n         rv = c.head('/')\n         self.assert_equal(rv.status_code, 200)\n-        self.assert_(not rv.data) # head truncates\n+        self.assert_true(not rv.data) # head truncates\n         self.assert_equal(c.post('/more').data, b'POST')\n         self.assert_equal(c.get('/more').data, b'GET')\n         rv = c.delete('/more')\n@@ -173,8 +173,8 @@ class BasicFunctionalityTestCase(FlaskTestCase):\n             flask.session['testing'] = 42\n             return 'Hello World'\n         rv = app.test_client().get('/', 'http://example.com/')\n-        self.assert_('domain=.example.com' in rv.headers['set-cookie'].lower())\n-        self.assert_('httponly' in rv.headers['set-cookie'].lower())\n+        self.assert_true('domain=.example.com' in rv.headers['set-cookie'].lower())\n+        self.assert_true('httponly' in rv.headers['set-cookie'].lower())\n \n     def test_session_using_server_name_and_port(self):\n         app = flask.Flask(__name__)\n@@ -187,8 +187,8 @@ class BasicFunctionalityTestCase(FlaskTestCase):\n             flask.session['testing'] = 42\n             return 'Hello World'\n         rv = app.test_client().get('/', 'http://example.com:8080/')\n-        self.assert_('domain=.example.com' in rv.headers['set-cookie'].lower())\n-        self.assert_('httponly' in rv.headers['set-cookie'].lower())\n+        self.assert_true('domain=.example.com' in rv.headers['set-cookie'].lower())\n+        self.assert_true('httponly' in rv.headers['set-cookie'].lower())\n \n     def test_session_using_server_name_port_and_path(self):\n         app = flask.Flask(__name__)\n@@ -202,9 +202,9 @@ class BasicFunctionalityTestCase(FlaskTestCase):\n             flask.session['testing'] = 42\n             return 'Hello World'\n         rv = app.test_client().get('/', 'http://example.com:8080/foo')\n-        self.assert_('domain=example.com' in rv.headers['set-cookie'].lower())\n-        self.assert_('path=/foo' in rv.headers['set-cookie'].lower())\n-        self.assert_('httponly' in rv.headers['set-cookie'].lower())\n+        self.assert_true('domain=example.com' in rv.headers['set-cookie'].lower())\n+        self.assert_true('path=/foo' in rv.headers['set-cookie'].lower())\n+        self.assert_true('httponly' in rv.headers['set-cookie'].lower())\n \n     def test_session_using_application_root(self):\n         class PrefixPathMiddleware(object):\n@@ -226,7 +226,7 @@ class BasicFunctionalityTestCase(FlaskTestCase):\n             flask.session['testing'] = 42\n             return 'Hello World'\n         rv = app.test_client().get('/', 'http://example.com:8080/')\n-        self.assert_('path=/bar' in rv.headers['set-cookie'].lower())\n+        self.assert_true('path=/bar' in rv.headers['set-cookie'].lower())\n \n     def test_session_using_session_settings(self):\n         app = flask.Flask(__name__)\n@@ -245,10 +245,10 @@ class BasicFunctionalityTestCase(FlaskTestCase):\n             return 'Hello World'\n         rv = app.test_client().get('/', 'http://www.example.com:8080/test/')\n         cookie = rv.headers['set-cookie'].lower()\n-        self.assert_('domain=.example.com' in cookie)\n-        self.assert_('path=/;' in cookie)\n-        self.assert_('secure' in cookie)\n-        self.assert_('httponly' not in cookie)\n+        self.assert_true('domain=.example.com' in cookie)\n+        self.assert_true('path=/;' in cookie)\n+        self.assert_true('secure' in cookie)\n+        self.assert_true('httponly' not in cookie)\n \n     def test_missing_session(self):\n         app = flask.Flask(__name__)\n@@ -256,11 +256,11 @@ class BasicFunctionalityTestCase(FlaskTestCase):\n             try:\n                 f(*args, **kwargs)\n             except RuntimeError as e:\n-                self.assert_(e.args and 'session is unavailable' in e.args[0])\n+                self.assert_true(e.args and 'session is unavailable' in e.args[0])\n             else:\n-                self.assert_(False, 'expected exception')\n+                self.assert_true(False, 'expected exception')\n         with app.test_request_context():\n-            self.assert_(flask.session.get('missing_key') is None)\n+            self.assert_true(flask.session.get('missing_key') is None)\n             expect_exception(flask.session.__setitem__, 'foo', 42)\n             expect_exception(flask.session.pop, 'foo')\n \n@@ -280,7 +280,7 @@ class BasicFunctionalityTestCase(FlaskTestCase):\n \n         client = app.test_client()\n         rv = client.get('/')\n-        self.assert_('set-cookie' in rv.headers)\n+        self.assert_true('set-cookie' in rv.headers)\n         match = re.search(r'\\bexpires=([^;]+)', rv.headers['set-cookie'])\n         expires = parse_date(match.group())\n         expected = datetime.utcnow() + app.permanent_session_lifetime\n@@ -293,9 +293,9 @@ class BasicFunctionalityTestCase(FlaskTestCase):\n \n         permanent = False\n         rv = app.test_client().get('/')\n-        self.assert_('set-cookie' in rv.headers)\n+        self.assert_true('set-cookie' in rv.headers)\n         match = re.search(r'\\bexpires=([^;]+)', rv.headers['set-cookie'])\n-        self.assert_(match is None)\n+        self.assert_true(match is None)\n \n     def test_session_stored_last(self):\n         app = flask.Flask(__name__)\n@@ -347,11 +347,11 @@ class BasicFunctionalityTestCase(FlaskTestCase):\n         app.secret_key = 'testkey'\n \n         with app.test_request_context():\n-            self.assert_(not flask.session.modified)\n+            self.assert_true(not flask.session.modified)\n             flask.flash('Zap')\n             flask.session.modified = False\n             flask.flash('Zip')\n-            self.assert_(flask.session.modified)\n+            self.assert_true(flask.session.modified)\n             self.assert_equal(list(flask.get_flashed_messages()), ['Zap', 'Zip'])\n \n     def test_extended_flashing(self):\n@@ -448,12 +448,12 @@ class BasicFunctionalityTestCase(FlaskTestCase):\n             return response\n         @app.route('/')\n         def index():\n-            self.assert_('before' in evts)\n-            self.assert_('after' not in evts)\n+            self.assert_true('before' in evts)\n+            self.assert_true('after' not in evts)\n             return 'request'\n-        self.assert_('after' not in evts)\n+        self.assert_true('after' not in evts)\n         rv = app.test_client().get('/').data\n-        self.assert_(b'after' in evts)\n+        self.assert_true(b'after' in evts)\n         self.assert_equal(rv, b'request|after')\n \n     def test_after_request_processing(self):\n@@ -483,7 +483,7 @@ class BasicFunctionalityTestCase(FlaskTestCase):\n             return \"Response\"\n         rv = app.test_client().get('/')\n         self.assert_equal(rv.status_code, 200)\n-        self.assert_(b'Response' in rv.data)\n+        self.assert_true(b'Response' in rv.data)\n         self.assert_equal(len(called), 1)\n \n     def test_teardown_request_handler_debug_mode(self):\n@@ -499,7 +499,7 @@ class BasicFunctionalityTestCase(FlaskTestCase):\n             return \"Response\"\n         rv = app.test_client().get('/')\n         self.assert_equal(rv.status_code, 200)\n-        self.assert_(b'Response' in rv.data)\n+        self.assert_true(b'Response' in rv.data)\n         self.assert_equal(len(called), 1)\n \n     def test_teardown_request_handler_error(self):\n@@ -532,7 +532,7 @@ class BasicFunctionalityTestCase(FlaskTestCase):\n             1/0\n         rv = app.test_client().get('/')\n         self.assert_equal(rv.status_code, 500)\n-        self.assert_(b'Internal Server Error' in rv.data)\n+        self.assert_true(b'Internal Server Error' in rv.data)\n         self.assert_equal(len(called), 2)\n \n     def test_before_after_request_order(self):\n@@ -606,7 +606,7 @@ class BasicFunctionalityTestCase(FlaskTestCase):\n         app = flask.Flask(__name__)\n         @app.errorhandler(MyException)\n         def handle_my_exception(e):\n-            self.assert_(isinstance(e, MyException))\n+            self.assert_true(isinstance(e, MyException))\n             return '42'\n         @app.route('/')\n         def index():\n@@ -629,7 +629,7 @@ class BasicFunctionalityTestCase(FlaskTestCase):\n         try:\n             c.get('/fail')\n         except KeyError as e:\n-            self.assert_(isinstance(e, BadRequest))\n+            self.assert_true(isinstance(e, BadRequest))\n         else:\n             self.fail('Expected exception')\n \n@@ -664,8 +664,8 @@ class BasicFunctionalityTestCase(FlaskTestCase):\n             try:\n                 c.post('/fail', data={'foo': 'index.txt'})\n             except DebugFilesKeyError as e:\n-                self.assert_('no file contents were transmitted' in str(e))\n-                self.assert_('This was submitted: \"index.txt\"' in str(e))\n+                self.assert_true('no file contents were transmitted' in str(e))\n+                self.assert_true('This was submitted: \"index.txt\"' in str(e))\n             else:\n                 self.fail('Expected exception')\n \n@@ -804,7 +804,7 @@ class BasicFunctionalityTestCase(FlaskTestCase):\n             self.assert_equal(str(e), 'View function did not return a response')\n             pass\n         else:\n-            self.assert_(\"Expected ValueError\")\n+            self.assert_true(\"Expected ValueError\")\n \n     def test_request_locals(self):\n         self.assert_equal(repr(flask.g), '<LocalProxy unbound>')\n@@ -894,11 +894,11 @@ class BasicFunctionalityTestCase(FlaskTestCase):\n         @app.before_request\n         def always_first():\n             flask.request.form['myfile']\n-            self.assert_(False)\n+            self.assert_true(False)\n         @app.route('/accept', methods=['POST'])\n         def accept_file():\n             flask.request.form['myfile']\n-            self.assert_(False)\n+            self.assert_true(False)\n         @app.errorhandler(413)\n         def catcher(error):\n             return '42'\n@@ -967,14 +967,14 @@ class BasicFunctionalityTestCase(FlaskTestCase):\n         @app.route('/')\n         def index():\n             return 'Awesome'\n-        self.assert_(not app.got_first_request)\n+        self.assert_true(not app.got_first_request)\n         self.assert_equal(app.test_client().get('/').data, b'Awesome')\n         try:\n             @app.route('/foo')\n             def broken():\n                 return 'Meh'\n         except AssertionError as e:\n-            self.assert_('A setup function was called' in str(e))\n+            self.assert_true('A setup function was called' in str(e))\n         else:\n             self.fail('Expected exception')\n \n@@ -983,7 +983,7 @@ class BasicFunctionalityTestCase(FlaskTestCase):\n         def working():\n             return 'Meh'\n         self.assert_equal(app.test_client().get('/foo').data, b'Meh')\n-        self.assert_(app.got_first_request)\n+        self.assert_true(app.got_first_request)\n \n     def test_before_first_request_functions(self):\n         got = []\n@@ -996,7 +996,7 @@ class BasicFunctionalityTestCase(FlaskTestCase):\n         self.assert_equal(got, [42])\n         c.get('/')\n         self.assert_equal(got, [42])\n-        self.assert_(app.got_first_request)\n+        self.assert_true(app.got_first_request)\n \n     def test_routing_redirect_debugging(self):\n         app = flask.Flask(__name__)\n@@ -1008,8 +1008,8 @@ class BasicFunctionalityTestCase(FlaskTestCase):\n             try:\n                 c.post('/foo', data={})\n             except AssertionError as e:\n-                self.assert_('http://localhost/foo/' in str(e))\n-                self.assert_('Make sure to directly send your POST-request '\n+                self.assert_true('http://localhost/foo/' in str(e))\n+                self.assert_true('Make sure to directly send your POST-request '\n                              'to this URL' in str(e))\n             else:\n                 self.fail('Expected exception')\n@@ -1061,12 +1061,12 @@ class BasicFunctionalityTestCase(FlaskTestCase):\n             with self.assert_raises(ZeroDivisionError):\n                 c.get('/fail')\n \n-        self.assert_(flask._request_ctx_stack.top is not None)\n-        self.assert_(flask._app_ctx_stack.top is not None)\n+        self.assert_true(flask._request_ctx_stack.top is not None)\n+        self.assert_true(flask._app_ctx_stack.top is not None)\n         # implicit appctx disappears too\n         flask._request_ctx_stack.top.pop()\n-        self.assert_(flask._request_ctx_stack.top is None)\n-        self.assert_(flask._app_ctx_stack.top is None)\n+        self.assert_true(flask._request_ctx_stack.top is None)\n+        self.assert_true(flask._app_ctx_stack.top is None)\n \n \n class SubdomainTestCase(FlaskTestCase):\n\n@@ -185,7 +185,7 @@ class ModuleTestCase(FlaskTestCase):\n             except TemplateNotFound as e:\n                 self.assert_equal(e.name, 'missing.html')\n             else:\n-                self.assert_(0, 'expected exception')\n+                self.assert_true(0, 'expected exception')\n \n         with flask.Flask(__name__).test_request_context():\n             self.assert_equal(flask.render_template('nested/nested.txt'), 'I\\'m nested')\n@@ -201,13 +201,13 @@ class ModuleTestCase(FlaskTestCase):\n             except NotFound:\n                 pass\n             else:\n-                self.assert_(0, 'expected exception')\n+                self.assert_true(0, 'expected exception')\n             try:\n                 f('../__init__.py')\n             except NotFound:\n                 pass\n             else:\n-                self.assert_(0, 'expected exception')\n+                self.assert_true(0, 'expected exception')\n \n             # testcase for a security issue that may exist on windows systems\n             import os\n@@ -220,7 +220,7 @@ class ModuleTestCase(FlaskTestCase):\n                 except NotFound:\n                     pass\n                 else:\n-                    self.assert_(0, 'expected exception')\n+                    self.assert_true(0, 'expected exception')\n             finally:\n                 os.path = old_path\n \n@@ -380,7 +380,7 @@ class BlueprintTestCase(FlaskTestCase):\n             except TemplateNotFound as e:\n                 self.assert_equal(e.name, 'missing.html')\n             else:\n-                self.assert_(0, 'expected exception')\n+                self.assert_true(0, 'expected exception')\n \n         with flask.Flask(__name__).test_request_context():\n             self.assert_equal(flask.render_template('nested/nested.txt'), 'I\\'m nested')\n@@ -547,7 +547,7 @@ class BlueprintTestCase(FlaskTestCase):\n             return s[::-1]\n         app = flask.Flask(__name__)\n         app.register_blueprint(bp, url_prefix='/py')\n-        self.assert_('my_reverse' in app.jinja_env.filters.keys())\n+        self.assert_true('my_reverse' in app.jinja_env.filters.keys())\n         self.assert_equal(app.jinja_env.filters['my_reverse'], my_reverse)\n         self.assert_equal(app.jinja_env.filters['my_reverse']('abcd'), 'dcba')\n \n@@ -558,7 +558,7 @@ class BlueprintTestCase(FlaskTestCase):\n         bp.add_app_template_filter(my_reverse)\n         app = flask.Flask(__name__)\n         app.register_blueprint(bp, url_prefix='/py')\n-        self.assert_('my_reverse' in app.jinja_env.filters.keys())\n+        self.assert_true('my_reverse' in app.jinja_env.filters.keys())\n         self.assert_equal(app.jinja_env.filters['my_reverse'], my_reverse)\n         self.assert_equal(app.jinja_env.filters['my_reverse']('abcd'), 'dcba')\n \n@@ -569,7 +569,7 @@ class BlueprintTestCase(FlaskTestCase):\n             return s[::-1]\n         app = flask.Flask(__name__)\n         app.register_blueprint(bp, url_prefix='/py')\n-        self.assert_('strrev' in app.jinja_env.filters.keys())\n+        self.assert_true('strrev' in app.jinja_env.filters.keys())\n         self.assert_equal(app.jinja_env.filters['strrev'], my_reverse)\n         self.assert_equal(app.jinja_env.filters['strrev']('abcd'), 'dcba')\n \n@@ -580,7 +580,7 @@ class BlueprintTestCase(FlaskTestCase):\n         bp.add_app_template_filter(my_reverse, 'strrev')\n         app = flask.Flask(__name__)\n         app.register_blueprint(bp, url_prefix='/py')\n-        self.assert_('strrev' in app.jinja_env.filters.keys())\n+        self.assert_true('strrev' in app.jinja_env.filters.keys())\n         self.assert_equal(app.jinja_env.filters['strrev'], my_reverse)\n         self.assert_equal(app.jinja_env.filters['strrev']('abcd'), 'dcba')\n \n@@ -656,9 +656,9 @@ class BlueprintTestCase(FlaskTestCase):\n             return isinstance(value, bool)\n         app = flask.Flask(__name__)\n         app.register_blueprint(bp, url_prefix='/py')\n-        self.assert_('is_boolean' in app.jinja_env.tests.keys())\n+        self.assert_true('is_boolean' in app.jinja_env.tests.keys())\n         self.assert_equal(app.jinja_env.tests['is_boolean'], is_boolean)\n-        self.assert_(app.jinja_env.tests['is_boolean'](False))\n+        self.assert_true(app.jinja_env.tests['is_boolean'](False))\n \n     def test_add_template_test(self):\n         bp = flask.Blueprint('bp', __name__)\n@@ -667,9 +667,9 @@ class BlueprintTestCase(FlaskTestCase):\n         bp.add_app_template_test(is_boolean)\n         app = flask.Flask(__name__)\n         app.register_blueprint(bp, url_prefix='/py')\n-        self.assert_('is_boolean' in app.jinja_env.tests.keys())\n+        self.assert_true('is_boolean' in app.jinja_env.tests.keys())\n         self.assert_equal(app.jinja_env.tests['is_boolean'], is_boolean)\n-        self.assert_(app.jinja_env.tests['is_boolean'](False))\n+        self.assert_true(app.jinja_env.tests['is_boolean'](False))\n \n     def test_template_test_with_name(self):\n         bp = flask.Blueprint('bp', __name__)\n@@ -678,9 +678,9 @@ class BlueprintTestCase(FlaskTestCase):\n             return isinstance(value, bool)\n         app = flask.Flask(__name__)\n         app.register_blueprint(bp, url_prefix='/py')\n-        self.assert_('boolean' in app.jinja_env.tests.keys())\n+        self.assert_true('boolean' in app.jinja_env.tests.keys())\n         self.assert_equal(app.jinja_env.tests['boolean'], is_boolean)\n-        self.assert_(app.jinja_env.tests['boolean'](False))\n+        self.assert_true(app.jinja_env.tests['boolean'](False))\n \n     def test_add_template_test_with_name(self):\n         bp = flask.Blueprint('bp', __name__)\n@@ -689,9 +689,9 @@ class BlueprintTestCase(FlaskTestCase):\n         bp.add_app_template_test(is_boolean, 'boolean')\n         app = flask.Flask(__name__)\n         app.register_blueprint(bp, url_prefix='/py')\n-        self.assert_('boolean' in app.jinja_env.tests.keys())\n+        self.assert_true('boolean' in app.jinja_env.tests.keys())\n         self.assert_equal(app.jinja_env.tests['boolean'], is_boolean)\n-        self.assert_(app.jinja_env.tests['boolean'](False))\n+        self.assert_true(app.jinja_env.tests['boolean'](False))\n \n     def test_template_test_with_template(self):\n         bp = flask.Blueprint('bp', __name__)\n@@ -704,7 +704,7 @@ class BlueprintTestCase(FlaskTestCase):\n         def index():\n             return flask.render_template('template_test.html', value=False)\n         rv = app.test_client().get('/')\n-        self.assert_(b'Success!' in rv.data)\n+        self.assert_true(b'Success!' in rv.data)\n \n     def test_template_test_after_route_with_template(self):\n         app = flask.Flask(__name__)\n@@ -717,7 +717,7 @@ class BlueprintTestCase(FlaskTestCase):\n             return isinstance(value, bool)\n         app.register_blueprint(bp, url_prefix='/py')\n         rv = app.test_client().get('/')\n-        self.assert_(b'Success!' in rv.data)\n+        self.assert_true(b'Success!' in rv.data)\n \n     def test_add_template_test_with_template(self):\n         bp = flask.Blueprint('bp', __name__)\n@@ -730,7 +730,7 @@ class BlueprintTestCase(FlaskTestCase):\n         def index():\n             return flask.render_template('template_test.html', value=False)\n         rv = app.test_client().get('/')\n-        self.assert_(b'Success!' in rv.data)\n+        self.assert_true(b'Success!' in rv.data)\n \n     def test_template_test_with_name_and_template(self):\n         bp = flask.Blueprint('bp', __name__)\n@@ -743,7 +743,7 @@ class BlueprintTestCase(FlaskTestCase):\n         def index():\n             return flask.render_template('template_test.html', value=False)\n         rv = app.test_client().get('/')\n-        self.assert_(b'Success!' in rv.data)\n+        self.assert_true(b'Success!' in rv.data)\n \n     def test_add_template_test_with_name_and_template(self):\n         bp = flask.Blueprint('bp', __name__)\n@@ -756,7 +756,7 @@ class BlueprintTestCase(FlaskTestCase):\n         def index():\n             return flask.render_template('template_test.html', value=False)\n         rv = app.test_client().get('/')\n-        self.assert_(b'Success!' in rv.data)\n+        self.assert_true(b'Success!' in rv.data)\n \n def suite():\n     suite = unittest.TestSuite()\n\n@@ -28,7 +28,7 @@ class ConfigTestCase(FlaskTestCase):\n     def common_object_test(self, app):\n         self.assert_equal(app.secret_key, 'devkey')\n         self.assert_equal(app.config['TEST_KEY'], 'foo')\n-        self.assert_('ConfigTestCase' not in app.config)\n+        self.assert_true('ConfigTestCase' not in app.config)\n \n     def test_config_from_file(self):\n         app = flask.Flask(__name__)\n@@ -57,13 +57,13 @@ class ConfigTestCase(FlaskTestCase):\n             try:\n                 app.config.from_envvar('FOO_SETTINGS')\n             except RuntimeError as e:\n-                self.assert_(\"'FOO_SETTINGS' is not set\" in str(e))\n+                self.assert_true(\"'FOO_SETTINGS' is not set\" in str(e))\n             else:\n-                self.assert_(0, 'expected exception')\n-            self.assert_(not app.config.from_envvar('FOO_SETTINGS', silent=True))\n+                self.assert_true(0, 'expected exception')\n+            self.assert_true(not app.config.from_envvar('FOO_SETTINGS', silent=True))\n \n             os.environ = {'FOO_SETTINGS': __file__.rsplit('.', 1)[0] + '.py'}\n-            self.assert_(app.config.from_envvar('FOO_SETTINGS'))\n+            self.assert_true(app.config.from_envvar('FOO_SETTINGS'))\n             self.common_object_test(app)\n         finally:\n             os.environ = env\n@@ -77,9 +77,9 @@ class ConfigTestCase(FlaskTestCase):\n                 app.config.from_envvar('FOO_SETTINGS')\n             except IOError as e:\n                 msg = str(e)\n-                self.assert_(msg.startswith('[Errno 2] Unable to load configuration '\n+                self.assert_true(msg.startswith('[Errno 2] Unable to load configuration '\n                                             'file (No such file or directory):'))\n-                self.assert_(msg.endswith(\"missing.cfg'\"))\n+                self.assert_true(msg.endswith(\"missing.cfg'\"))\n             else:\n                 self.fail('expected IOError')\n             self.assertFalse(app.config.from_envvar('FOO_SETTINGS', silent=True))\n@@ -92,12 +92,12 @@ class ConfigTestCase(FlaskTestCase):\n             app.config.from_pyfile('missing.cfg')\n         except IOError as e:\n             msg = str(e)\n-            self.assert_(msg.startswith('[Errno 2] Unable to load configuration '\n+            self.assert_true(msg.startswith('[Errno 2] Unable to load configuration '\n                                         'file (No such file or directory):'))\n-            self.assert_(msg.endswith(\"missing.cfg'\"))\n+            self.assert_true(msg.endswith(\"missing.cfg'\"))\n         else:\n-            self.assert_(0, 'expected config')\n-        self.assert_(not app.config.from_pyfile('missing.cfg', silent=True))\n+            self.assert_true(0, 'expected config')\n+        self.assert_true(not app.config.from_pyfile('missing.cfg', silent=True))\n \n     def test_session_lifetime(self):\n         app = flask.Flask(__name__)\n@@ -141,7 +141,7 @@ class InstanceTestCase(FlaskTestCase):\n         try:\n             flask.Flask(__name__, instance_path='instance')\n         except ValueError as e:\n-            self.assert_('must be absolute' in str(e))\n+            self.assert_true('must be absolute' in str(e))\n         else:\n             self.fail('Expected value error')\n \n\n@@ -42,7 +42,7 @@ class ExtImportHookTestCase(FlaskTestCase):\n     def teardown(self):\n         from flask import ext\n         for key in ext.__dict__:\n-            self.assert_('.' not in key)\n+            self.assert_true('.' not in key)\n \n     def test_flaskext_new_simple_import_normal(self):\n         from flask.ext.newext_simple import ext_id\n@@ -108,12 +108,12 @@ class ExtImportHookTestCase(FlaskTestCase):\n             import flask.ext.broken\n         except ImportError:\n             exc_type, exc_value, tb = sys.exc_info()\n-            self.assert_(exc_type is ImportError)\n+            self.assert_true(exc_type is ImportError)\n             self.assert_equal(str(exc_value), 'No module named missing_module')\n-            self.assert_(tb.tb_frame.f_globals is globals())\n+            self.assert_true(tb.tb_frame.f_globals is globals())\n \n             next = tb.tb_next\n-            self.assert_('flask_broken/__init__.py' in next.tb_frame.f_code.co_filename)\n+            self.assert_true('flask_broken/__init__.py' in next.tb_frame.f_code.co_filename)\n \n \n def suite():\n\n@@ -48,8 +48,8 @@ class JSONTestCase(FlaskTestCase):\n         rv = c.post('/json', data='malformed', content_type='application/json')\n         self.assert_equal(rv.status_code, 400)\n         self.assert_equal(rv.mimetype, 'application/json')\n-        self.assert_('description' in flask.json.loads(rv.data))\n-        self.assert_('<p>' not in flask.json.loads(rv.data)['description'])\n+        self.assert_true('description' in flask.json.loads(rv.data))\n+        self.assert_true('<p>' not in flask.json.loads(rv.data)['description'])\n \n     def test_json_body_encoding(self):\n         app = flask.Flask(__name__)\n@@ -167,7 +167,7 @@ class SendfileTestCase(FlaskTestCase):\n         app = flask.Flask(__name__)\n         with app.test_request_context():\n             rv = flask.send_file('static/index.html')\n-            self.assert_(rv.direct_passthrough)\n+            self.assert_true(rv.direct_passthrough)\n             self.assert_equal(rv.mimetype, 'text/html')\n             with app.open_resource('static/index.html') as f:\n                 self.assert_equal(rv.data, f.read())\n@@ -177,8 +177,8 @@ class SendfileTestCase(FlaskTestCase):\n         app.use_x_sendfile = True\n         with app.test_request_context():\n             rv = flask.send_file('static/index.html')\n-            self.assert_(rv.direct_passthrough)\n-            self.assert_('x-sendfile' in rv.headers)\n+            self.assert_true(rv.direct_passthrough)\n+            self.assert_true('x-sendfile' in rv.headers)\n             self.assert_equal(rv.headers['x-sendfile'],\n                 os.path.join(app.root_path, 'static/index.html'))\n             self.assert_equal(rv.mimetype, 'text/html')\n@@ -201,7 +201,7 @@ class SendfileTestCase(FlaskTestCase):\n                 f = open(os.path.join(app.root_path, 'static/index.html'))\n                 rv = flask.send_file(f)\n                 self.assert_equal(rv.mimetype, 'text/html')\n-                self.assert_('x-sendfile' in rv.headers)\n+                self.assert_true('x-sendfile' in rv.headers)\n                 self.assert_equal(rv.headers['x-sendfile'],\n                     os.path.join(app.root_path, 'static/index.html'))\n             # mimetypes + etag\n@@ -229,7 +229,7 @@ class SendfileTestCase(FlaskTestCase):\n             with app.test_request_context():\n                 f = StringIO('Test')\n                 rv = flask.send_file(f)\n-                self.assert_('x-sendfile' not in rv.headers)\n+                self.assert_true('x-sendfile' not in rv.headers)\n             # etags\n             self.assert_equal(len(captured), 1)\n \n@@ -302,10 +302,10 @@ class LoggingTestCase(FlaskTestCase):\n     def test_logger_cache(self):\n         app = flask.Flask(__name__)\n         logger1 = app.logger\n-        self.assert_(app.logger is logger1)\n+        self.assert_true(app.logger is logger1)\n         self.assert_equal(logger1.name, __name__)\n         app.logger_name = __name__ + '/test_logger_cache'\n-        self.assert_(app.logger is not logger1)\n+        self.assert_true(app.logger is not logger1)\n \n     def test_debug_log(self):\n         app = flask.Flask(__name__)\n@@ -325,10 +325,10 @@ class LoggingTestCase(FlaskTestCase):\n             with catch_stderr() as err:\n                 c.get('/')\n                 out = err.getvalue()\n-                self.assert_('WARNING in helpers [' in out)\n-                self.assert_(os.path.basename(__file__.rsplit('.', 1)[0] + '.py') in out)\n-                self.assert_('the standard library is dead' in out)\n-                self.assert_('this is a debug statement' in out)\n+                self.assert_true('WARNING in helpers [' in out)\n+                self.assert_true(os.path.basename(__file__.rsplit('.', 1)[0] + '.py') in out)\n+                self.assert_true('the standard library is dead' in out)\n+                self.assert_true('this is a debug statement' in out)\n \n             with catch_stderr() as err:\n                 try:\n@@ -336,7 +336,7 @@ class LoggingTestCase(FlaskTestCase):\n                 except ZeroDivisionError:\n                     pass\n                 else:\n-                    self.assert_(False, 'debug log ate the exception')\n+                    self.assert_true(False, 'debug log ate the exception')\n \n     def test_debug_log_override(self):\n         app = flask.Flask(__name__)\n@@ -357,13 +357,13 @@ class LoggingTestCase(FlaskTestCase):\n \n         rv = app.test_client().get('/')\n         self.assert_equal(rv.status_code, 500)\n-        self.assert_(b'Internal Server Error' in rv.data)\n+        self.assert_true(b'Internal Server Error' in rv.data)\n \n         err = out.getvalue()\n-        self.assert_('Exception on / [GET]' in err)\n-        self.assert_('Traceback (most recent call last):' in err)\n-        self.assert_('1/0' in err)\n-        self.assert_('ZeroDivisionError:' in err)\n+        self.assert_true('Exception on / [GET]' in err)\n+        self.assert_true('Traceback (most recent call last):' in err)\n+        self.assert_true('1/0' in err)\n+        self.assert_true('ZeroDivisionError:' in err)\n \n     def test_processor_exceptions(self):\n         app = flask.Flask(__name__)\n\n@@ -57,7 +57,7 @@ class RequestContextTestCase(FlaskTestCase):\n             with app.test_request_context('/', environ_overrides={'HTTP_HOST': 'localhost'}):\n                 pass\n         except Exception as e:\n-            self.assert_(isinstance(e, ValueError))\n+            self.assert_true(isinstance(e, ValueError))\n             self.assert_equal(str(e), \"the server name provided \" +\n                     \"('localhost.localdomain:5000') does not match the \" + \\\n                     \"server name from the WSGI environment ('localhost')\")\n@@ -93,17 +93,17 @@ class RequestContextTestCase(FlaskTestCase):\n             self.assert_equal(index(), 'Hello World!')\n         with app.test_request_context('/meh'):\n             self.assert_equal(meh(), 'http://localhost/meh')\n-        self.assert_(flask._request_ctx_stack.top is None)\n+        self.assert_true(flask._request_ctx_stack.top is None)\n \n     def test_context_test(self):\n         app = flask.Flask(__name__)\n-        self.assert_(not flask.request)\n-        self.assert_(not flask.has_request_context())\n+        self.assert_true(not flask.request)\n+        self.assert_true(not flask.has_request_context())\n         ctx = app.test_request_context()\n         ctx.push()\n         try:\n-            self.assert_(flask.request)\n-            self.assert_(flask.has_request_context())\n+            self.assert_true(flask.request)\n+            self.assert_true(flask.has_request_context())\n         finally:\n             ctx.pop()\n \n@@ -122,7 +122,7 @@ class RequestContextTestCase(FlaskTestCase):\n         except RuntimeError:\n             pass\n         else:\n-            self.assert_(0, 'expected runtime error')\n+            self.assert_true(0, 'expected runtime error')\n \n     def test_greenlet_context_copying(self):\n         app = flask.Flask(__name__)\n@@ -132,14 +132,14 @@ class RequestContextTestCase(FlaskTestCase):\n         def index():\n             reqctx = flask._request_ctx_stack.top.copy()\n             def g():\n-                self.assert_(not flask.request)\n-                self.assert_(not flask.current_app)\n+                self.assert_true(not flask.request)\n+                self.assert_true(not flask.current_app)\n                 with reqctx:\n-                    self.assert_(flask.request)\n+                    self.assert_true(flask.request)\n                     self.assert_equal(flask.current_app, app)\n                     self.assert_equal(flask.request.path, '/')\n                     self.assert_equal(flask.request.args['foo'], 'bar')\n-                self.assert_(not flask.request)\n+                self.assert_true(not flask.request)\n                 return 42\n             greenlets.append(greenlet(g))\n             return 'Hello World!'\n@@ -159,7 +159,7 @@ class RequestContextTestCase(FlaskTestCase):\n             reqctx = flask._request_ctx_stack.top.copy()\n             @flask.copy_current_request_context\n             def g():\n-                self.assert_(flask.request)\n+                self.assert_true(flask.request)\n                 self.assert_equal(flask.current_app, app)\n                 self.assert_equal(flask.request.path, '/')\n                 self.assert_equal(flask.request.args['foo'], 'bar')\n\n@@ -92,7 +92,7 @@ class SignalsTestCase(FlaskTestCase):\n         try:\n             self.assert_equal(app.test_client().get('/').status_code, 500)\n             self.assert_equal(len(recorded), 1)\n-            self.assert_(isinstance(recorded[0], ZeroDivisionError))\n+            self.assert_true(isinstance(recorded[0], ZeroDivisionError))\n         finally:\n             flask.got_request_exception.disconnect(record, app)\n \n\n@@ -34,7 +34,7 @@ class FlaskSubclassingTestCase(FlaskTestCase):\n \n         rv = app.test_client().get('/')\n         self.assert_equal(rv.status_code, 500)\n-        self.assert_(b'Internal Server Error' in rv.data)\n+        self.assert_true(b'Internal Server Error' in rv.data)\n \n         err = out.getvalue()\n         self.assert_equal(err, '')\n\n@@ -99,7 +99,7 @@ class TemplatingTestCase(FlaskTestCase):\n         @app.template_filter()\n         def my_reverse(s):\n             return s[::-1]\n-        self.assert_('my_reverse' in app.jinja_env.filters.keys())\n+        self.assert_true('my_reverse' in app.jinja_env.filters.keys())\n         self.assert_equal(app.jinja_env.filters['my_reverse'], my_reverse)\n         self.assert_equal(app.jinja_env.filters['my_reverse']('abcd'), 'dcba')\n \n@@ -108,7 +108,7 @@ class TemplatingTestCase(FlaskTestCase):\n         def my_reverse(s):\n             return s[::-1]\n         app.add_template_filter(my_reverse)\n-        self.assert_('my_reverse' in app.jinja_env.filters.keys())\n+        self.assert_true('my_reverse' in app.jinja_env.filters.keys())\n         self.assert_equal(app.jinja_env.filters['my_reverse'], my_reverse)\n         self.assert_equal(app.jinja_env.filters['my_reverse']('abcd'), 'dcba')\n \n@@ -117,7 +117,7 @@ class TemplatingTestCase(FlaskTestCase):\n         @app.template_filter('strrev')\n         def my_reverse(s):\n             return s[::-1]\n-        self.assert_('strrev' in app.jinja_env.filters.keys())\n+        self.assert_true('strrev' in app.jinja_env.filters.keys())\n         self.assert_equal(app.jinja_env.filters['strrev'], my_reverse)\n         self.assert_equal(app.jinja_env.filters['strrev']('abcd'), 'dcba')\n \n@@ -126,7 +126,7 @@ class TemplatingTestCase(FlaskTestCase):\n         def my_reverse(s):\n             return s[::-1]\n         app.add_template_filter(my_reverse, 'strrev')\n-        self.assert_('strrev' in app.jinja_env.filters.keys())\n+        self.assert_true('strrev' in app.jinja_env.filters.keys())\n         self.assert_equal(app.jinja_env.filters['strrev'], my_reverse)\n         self.assert_equal(app.jinja_env.filters['strrev']('abcd'), 'dcba')\n \n@@ -179,36 +179,36 @@ class TemplatingTestCase(FlaskTestCase):\n         @app.template_test()\n         def boolean(value):\n             return isinstance(value, bool)\n-        self.assert_('boolean' in app.jinja_env.tests.keys())\n+        self.assert_true('boolean' in app.jinja_env.tests.keys())\n         self.assert_equal(app.jinja_env.tests['boolean'], boolean)\n-        self.assert_(app.jinja_env.tests['boolean'](False))\n+        self.assert_true(app.jinja_env.tests['boolean'](False))\n \n     def test_add_template_test(self):\n         app = flask.Flask(__name__)\n         def boolean(value):\n             return isinstance(value, bool)\n         app.add_template_test(boolean)\n-        self.assert_('boolean' in app.jinja_env.tests.keys())\n+        self.assert_true('boolean' in app.jinja_env.tests.keys())\n         self.assert_equal(app.jinja_env.tests['boolean'], boolean)\n-        self.assert_(app.jinja_env.tests['boolean'](False))\n+        self.assert_true(app.jinja_env.tests['boolean'](False))\n \n     def test_template_test_with_name(self):\n         app = flask.Flask(__name__)\n         @app.template_test('boolean')\n         def is_boolean(value):\n             return isinstance(value, bool)\n-        self.assert_('boolean' in app.jinja_env.tests.keys())\n+        self.assert_true('boolean' in app.jinja_env.tests.keys())\n         self.assert_equal(app.jinja_env.tests['boolean'], is_boolean)\n-        self.assert_(app.jinja_env.tests['boolean'](False))\n+        self.assert_true(app.jinja_env.tests['boolean'](False))\n \n     def test_add_template_test_with_name(self):\n         app = flask.Flask(__name__)\n         def is_boolean(value):\n             return isinstance(value, bool)\n         app.add_template_test(is_boolean, 'boolean')\n-        self.assert_('boolean' in app.jinja_env.tests.keys())\n+        self.assert_true('boolean' in app.jinja_env.tests.keys())\n         self.assert_equal(app.jinja_env.tests['boolean'], is_boolean)\n-        self.assert_(app.jinja_env.tests['boolean'](False))\n+        self.assert_true(app.jinja_env.tests['boolean'](False))\n \n     def test_template_test_with_template(self):\n         app = flask.Flask(__name__)\n@@ -219,7 +219,7 @@ class TemplatingTestCase(FlaskTestCase):\n         def index():\n             return flask.render_template('template_test.html', value=False)\n         rv = app.test_client().get('/')\n-        self.assert_(b'Success!' in rv.data)\n+        self.assert_true(b'Success!' in rv.data)\n \n     def test_add_template_test_with_template(self):\n         app = flask.Flask(__name__)\n@@ -230,7 +230,7 @@ class TemplatingTestCase(FlaskTestCase):\n         def index():\n             return flask.render_template('template_test.html', value=False)\n         rv = app.test_client().get('/')\n-        self.assert_(b'Success!' in rv.data)\n+        self.assert_true(b'Success!' in rv.data)\n \n     def test_template_test_with_name_and_template(self):\n         app = flask.Flask(__name__)\n@@ -241,7 +241,7 @@ class TemplatingTestCase(FlaskTestCase):\n         def index():\n             return flask.render_template('template_test.html', value=False)\n         rv = app.test_client().get('/')\n-        self.assert_(b'Success!' in rv.data)\n+        self.assert_true(b'Success!' in rv.data)\n \n     def test_add_template_test_with_name_and_template(self):\n         app = flask.Flask(__name__)\n@@ -252,16 +252,16 @@ class TemplatingTestCase(FlaskTestCase):\n         def index():\n             return flask.render_template('template_test.html', value=False)\n         rv = app.test_client().get('/')\n-        self.assert_(b'Success!' in rv.data)\n+        self.assert_true(b'Success!' in rv.data)\n \n     def test_add_template_global(self):\n         app = flask.Flask(__name__)\n         @app.template_global()\n         def get_stuff():\n             return 42\n-        self.assert_('get_stuff' in app.jinja_env.globals.keys())\n+        self.assert_true('get_stuff' in app.jinja_env.globals.keys())\n         self.assert_equal(app.jinja_env.globals['get_stuff'], get_stuff)\n-        self.assert_(app.jinja_env.globals['get_stuff'](), 42)\n+        self.assert_true(app.jinja_env.globals['get_stuff'](), 42)\n         with app.app_context():\n             rv = flask.render_template_string('{{ get_stuff() }}')\n             self.assert_equal(rv, '42')\n\n@@ -106,7 +106,7 @@ class TestToolsTestCase(FlaskTestCase):\n                 with c.session_transaction() as sess:\n                     pass\n             except RuntimeError as e:\n-                self.assert_('Session backend did not open a session' in str(e))\n+                self.assert_true('Session backend did not open a session' in str(e))\n             else:\n                 self.fail('Expected runtime error')\n \n@@ -118,9 +118,9 @@ class TestToolsTestCase(FlaskTestCase):\n         with app.test_client() as c:\n             rv = c.get('/')\n             req = flask.request._get_current_object()\n-            self.assert_(req is not None)\n+            self.assert_true(req is not None)\n             with c.session_transaction():\n-                self.assert_(req is flask.request._get_current_object())\n+                self.assert_true(req is flask.request._get_current_object())\n \n     def test_session_transaction_needs_cookies(self):\n         app = flask.Flask(__name__)\n@@ -130,7 +130,7 @@ class TestToolsTestCase(FlaskTestCase):\n             with c.session_transaction() as s:\n                 pass\n         except RuntimeError as e:\n-            self.assert_('cookies' in str(e))\n+            self.assert_true('cookies' in str(e))\n         else:\n             self.fail('Expected runtime error')\n \n@@ -152,8 +152,8 @@ class TestToolsTestCase(FlaskTestCase):\n             self.assert_equal(resp.status_code, 200)\n \n             resp = c.get('/other')\n-            self.assert_(not hasattr(flask.g, 'value'))\n-            self.assert_(b'Internal Server Error' in resp.data)\n+            self.assert_true(not hasattr(flask.g, 'value'))\n+            self.assert_true(b'Internal Server Error' in resp.data)\n             self.assert_equal(resp.status_code, 500)\n             flask.g.value = 23\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#8e9f0bdedca3edd5ba2e8902f05406acff8b8b44", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 4 | Lines Deleted: 4 | Files Changed: 1 | Hunks: 2 | Methods Changed: 2 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 8 | Churn Cumulative: 334 | Contributors (this commit): 7 | Commits (past 90d): 7 | Contributors (cumulative): 7 | DMM Complexity: None\n\nDIFF:\n@@ -219,8 +219,8 @@ class SubdomainTestCase(FlaskTestCase):\n         url = flask.url_for('view', company_id='xxx')\n         response = self.client.get(url)\n \n-        self.assertEquals(200, response.status_code)\n-        self.assertEquals(b'xxx', response.data)\n+        self.assert_equal(200, response.status_code)\n+        self.assert_equal(b'xxx', response.data)\n \n \n     def test_nosubdomain(self):\n@@ -231,8 +231,8 @@ class SubdomainTestCase(FlaskTestCase):\n         url = flask.url_for('view', company_id='xxx')\n         response = self.client.get(url)\n \n-        self.assertEquals(200, response.status_code)\n-        self.assertEquals(b'xxx', response.data)\n+        self.assert_equal(200, response.status_code)\n+        self.assert_equal(b'xxx', response.data)\n \n \n def suite():\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#4d73ef1a194a4280d437db5cbc9ceb8850e99e1f", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 1 | Methods Changed: 2 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 327 | Contributors (this commit): 5 | Commits (past 90d): 5 | Contributors (cumulative): 5 | DMM Complexity: None\n\nDIFF:\n@@ -142,8 +142,8 @@ class FlaskTestCase(unittest.TestCase):\n         with catcher:\n             callable(*args, **kwargs)\n \n-    def assert_true(self, x):\n-        self.assertTrue(x)\n+    def assert_true(self, x, msg=None):\n+        self.assertTrue(x, msg)\n \n \n class _ExceptionCatcher(object):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#9f8a2075c79fec1b5481f5a5a95bb23b40bf68f2", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 82 | Lines Deleted: 76 | Files Changed: 9 | Hunks: 59 | Methods Changed: 57 | Complexity Δ (Sum/Max): 2/2 | Churn Δ: 158 | Churn Cumulative: 5663 | Contributors (this commit): 16 | Commits (past 90d): 56 | Contributors (cumulative): 51 | DMM Complexity: 1.0\n\nDIFF:\n@@ -103,7 +103,7 @@ def emits_module_deprecation_warning(f):\n             f(self, *args, **kwargs)\n             self.assert_true(log, 'expected deprecation warning')\n             for entry in log:\n-                self.assert_true('Modules are deprecated' in str(entry['message']))\n+                self.assert_in('Modules are deprecated', str(entry['message']))\n     return update_wrapper(new_f, f)\n \n \n@@ -145,6 +145,12 @@ class FlaskTestCase(unittest.TestCase):\n     def assert_true(self, x, msg=None):\n         self.assertTrue(x, msg)\n \n+    def assert_in(self, x, y):\n+        self.assertIn(x, y)\n+\n+    def assert_not_in(self, x, y):\n+        self.assertNotIn(x, y)\n+\n \n class _ExceptionCatcher(object):\n \n\n@@ -173,8 +173,8 @@ class BasicFunctionalityTestCase(FlaskTestCase):\n             flask.session['testing'] = 42\n             return 'Hello World'\n         rv = app.test_client().get('/', 'http://example.com/')\n-        self.assert_true('domain=.example.com' in rv.headers['set-cookie'].lower())\n-        self.assert_true('httponly' in rv.headers['set-cookie'].lower())\n+        self.assert_in('domain=.example.com', rv.headers['set-cookie'].lower())\n+        self.assert_in('httponly', rv.headers['set-cookie'].lower())\n \n     def test_session_using_server_name_and_port(self):\n         app = flask.Flask(__name__)\n@@ -187,8 +187,8 @@ class BasicFunctionalityTestCase(FlaskTestCase):\n             flask.session['testing'] = 42\n             return 'Hello World'\n         rv = app.test_client().get('/', 'http://example.com:8080/')\n-        self.assert_true('domain=.example.com' in rv.headers['set-cookie'].lower())\n-        self.assert_true('httponly' in rv.headers['set-cookie'].lower())\n+        self.assert_in('domain=.example.com', rv.headers['set-cookie'].lower())\n+        self.assert_in('httponly', rv.headers['set-cookie'].lower())\n \n     def test_session_using_server_name_port_and_path(self):\n         app = flask.Flask(__name__)\n@@ -202,9 +202,9 @@ class BasicFunctionalityTestCase(FlaskTestCase):\n             flask.session['testing'] = 42\n             return 'Hello World'\n         rv = app.test_client().get('/', 'http://example.com:8080/foo')\n-        self.assert_true('domain=example.com' in rv.headers['set-cookie'].lower())\n-        self.assert_true('path=/foo' in rv.headers['set-cookie'].lower())\n-        self.assert_true('httponly' in rv.headers['set-cookie'].lower())\n+        self.assert_in('domain=example.com', rv.headers['set-cookie'].lower())\n+        self.assert_in('path=/foo', rv.headers['set-cookie'].lower())\n+        self.assert_in('httponly', rv.headers['set-cookie'].lower())\n \n     def test_session_using_application_root(self):\n         class PrefixPathMiddleware(object):\n@@ -226,7 +226,7 @@ class BasicFunctionalityTestCase(FlaskTestCase):\n             flask.session['testing'] = 42\n             return 'Hello World'\n         rv = app.test_client().get('/', 'http://example.com:8080/')\n-        self.assert_true('path=/bar' in rv.headers['set-cookie'].lower())\n+        self.assert_in('path=/bar', rv.headers['set-cookie'].lower())\n \n     def test_session_using_session_settings(self):\n         app = flask.Flask(__name__)\n@@ -245,10 +245,10 @@ class BasicFunctionalityTestCase(FlaskTestCase):\n             return 'Hello World'\n         rv = app.test_client().get('/', 'http://www.example.com:8080/test/')\n         cookie = rv.headers['set-cookie'].lower()\n-        self.assert_true('domain=.example.com' in cookie)\n-        self.assert_true('path=/;' in cookie)\n-        self.assert_true('secure' in cookie)\n-        self.assert_true('httponly' not in cookie)\n+        self.assert_in('domain=.example.com', cookie)\n+        self.assert_in('path=/;', cookie)\n+        self.assert_in('secure', cookie)\n+        self.assert_not_in('httponly', cookie)\n \n     def test_missing_session(self):\n         app = flask.Flask(__name__)\n@@ -280,7 +280,7 @@ class BasicFunctionalityTestCase(FlaskTestCase):\n \n         client = app.test_client()\n         rv = client.get('/')\n-        self.assert_true('set-cookie' in rv.headers)\n+        self.assert_in('set-cookie', rv.headers)\n         match = re.search(r'\\bexpires=([^;]+)', rv.headers['set-cookie'])\n         expires = parse_date(match.group())\n         expected = datetime.utcnow() + app.permanent_session_lifetime\n@@ -293,7 +293,7 @@ class BasicFunctionalityTestCase(FlaskTestCase):\n \n         permanent = False\n         rv = app.test_client().get('/')\n-        self.assert_true('set-cookie' in rv.headers)\n+        self.assert_in('set-cookie', rv.headers)\n         match = re.search(r'\\bexpires=([^;]+)', rv.headers['set-cookie'])\n         self.assert_true(match is None)\n \n@@ -448,12 +448,12 @@ class BasicFunctionalityTestCase(FlaskTestCase):\n             return response\n         @app.route('/')\n         def index():\n-            self.assert_true('before' in evts)\n-            self.assert_true('after' not in evts)\n+            self.assert_in('before', evts)\n+            self.assert_not_in('after', evts)\n             return 'request'\n-        self.assert_true('after' not in evts)\n+        self.assert_not_in('after', evts)\n         rv = app.test_client().get('/').data\n-        self.assert_true(b'after' in evts)\n+        self.assert_in(b'after', evts)\n         self.assert_equal(rv, b'request|after')\n \n     def test_after_request_processing(self):\n@@ -483,7 +483,7 @@ class BasicFunctionalityTestCase(FlaskTestCase):\n             return \"Response\"\n         rv = app.test_client().get('/')\n         self.assert_equal(rv.status_code, 200)\n-        self.assert_true(b'Response' in rv.data)\n+        self.assert_in(b'Response', rv.data)\n         self.assert_equal(len(called), 1)\n \n     def test_teardown_request_handler_debug_mode(self):\n@@ -499,7 +499,7 @@ class BasicFunctionalityTestCase(FlaskTestCase):\n             return \"Response\"\n         rv = app.test_client().get('/')\n         self.assert_equal(rv.status_code, 200)\n-        self.assert_true(b'Response' in rv.data)\n+        self.assert_in(b'Response', rv.data)\n         self.assert_equal(len(called), 1)\n \n     def test_teardown_request_handler_error(self):\n@@ -532,7 +532,7 @@ class BasicFunctionalityTestCase(FlaskTestCase):\n             1/0\n         rv = app.test_client().get('/')\n         self.assert_equal(rv.status_code, 500)\n-        self.assert_true(b'Internal Server Error' in rv.data)\n+        self.assert_in(b'Internal Server Error', rv.data)\n         self.assert_equal(len(called), 2)\n \n     def test_before_after_request_order(self):\n@@ -664,8 +664,8 @@ class BasicFunctionalityTestCase(FlaskTestCase):\n             try:\n                 c.post('/fail', data={'foo': 'index.txt'})\n             except DebugFilesKeyError as e:\n-                self.assert_true('no file contents were transmitted' in str(e))\n-                self.assert_true('This was submitted: \"index.txt\"' in str(e))\n+                self.assert_in('no file contents were transmitted', str(e))\n+                self.assert_in('This was submitted: \"index.txt\"', str(e))\n             else:\n                 self.fail('Expected exception')\n \n@@ -974,7 +974,7 @@ class BasicFunctionalityTestCase(FlaskTestCase):\n             def broken():\n                 return 'Meh'\n         except AssertionError as e:\n-            self.assert_true('A setup function was called' in str(e))\n+            self.assert_in('A setup function was called', str(e))\n         else:\n             self.fail('Expected exception')\n \n@@ -1008,9 +1008,9 @@ class BasicFunctionalityTestCase(FlaskTestCase):\n             try:\n                 c.post('/foo', data={})\n             except AssertionError as e:\n-                self.assert_true('http://localhost/foo/' in str(e))\n-                self.assert_true('Make sure to directly send your POST-request '\n-                             'to this URL' in str(e))\n+                self.assert_in('http://localhost/foo/', str(e))\n+                self.assert_in('Make sure to directly send your POST-request '\n+                               'to this URL', str(e))\n             else:\n                 self.fail('Expected exception')\n \n\n@@ -547,7 +547,7 @@ class BlueprintTestCase(FlaskTestCase):\n             return s[::-1]\n         app = flask.Flask(__name__)\n         app.register_blueprint(bp, url_prefix='/py')\n-        self.assert_true('my_reverse' in app.jinja_env.filters.keys())\n+        self.assert_in('my_reverse', app.jinja_env.filters.keys())\n         self.assert_equal(app.jinja_env.filters['my_reverse'], my_reverse)\n         self.assert_equal(app.jinja_env.filters['my_reverse']('abcd'), 'dcba')\n \n@@ -558,7 +558,7 @@ class BlueprintTestCase(FlaskTestCase):\n         bp.add_app_template_filter(my_reverse)\n         app = flask.Flask(__name__)\n         app.register_blueprint(bp, url_prefix='/py')\n-        self.assert_true('my_reverse' in app.jinja_env.filters.keys())\n+        self.assert_in('my_reverse', app.jinja_env.filters.keys())\n         self.assert_equal(app.jinja_env.filters['my_reverse'], my_reverse)\n         self.assert_equal(app.jinja_env.filters['my_reverse']('abcd'), 'dcba')\n \n@@ -569,7 +569,7 @@ class BlueprintTestCase(FlaskTestCase):\n             return s[::-1]\n         app = flask.Flask(__name__)\n         app.register_blueprint(bp, url_prefix='/py')\n-        self.assert_true('strrev' in app.jinja_env.filters.keys())\n+        self.assert_in('strrev', app.jinja_env.filters.keys())\n         self.assert_equal(app.jinja_env.filters['strrev'], my_reverse)\n         self.assert_equal(app.jinja_env.filters['strrev']('abcd'), 'dcba')\n \n@@ -580,7 +580,7 @@ class BlueprintTestCase(FlaskTestCase):\n         bp.add_app_template_filter(my_reverse, 'strrev')\n         app = flask.Flask(__name__)\n         app.register_blueprint(bp, url_prefix='/py')\n-        self.assert_true('strrev' in app.jinja_env.filters.keys())\n+        self.assert_in('strrev', app.jinja_env.filters.keys())\n         self.assert_equal(app.jinja_env.filters['strrev'], my_reverse)\n         self.assert_equal(app.jinja_env.filters['strrev']('abcd'), 'dcba')\n \n@@ -656,7 +656,7 @@ class BlueprintTestCase(FlaskTestCase):\n             return isinstance(value, bool)\n         app = flask.Flask(__name__)\n         app.register_blueprint(bp, url_prefix='/py')\n-        self.assert_true('is_boolean' in app.jinja_env.tests.keys())\n+        self.assert_in('is_boolean', app.jinja_env.tests.keys())\n         self.assert_equal(app.jinja_env.tests['is_boolean'], is_boolean)\n         self.assert_true(app.jinja_env.tests['is_boolean'](False))\n \n@@ -667,7 +667,7 @@ class BlueprintTestCase(FlaskTestCase):\n         bp.add_app_template_test(is_boolean)\n         app = flask.Flask(__name__)\n         app.register_blueprint(bp, url_prefix='/py')\n-        self.assert_true('is_boolean' in app.jinja_env.tests.keys())\n+        self.assert_in('is_boolean', app.jinja_env.tests.keys())\n         self.assert_equal(app.jinja_env.tests['is_boolean'], is_boolean)\n         self.assert_true(app.jinja_env.tests['is_boolean'](False))\n \n@@ -678,7 +678,7 @@ class BlueprintTestCase(FlaskTestCase):\n             return isinstance(value, bool)\n         app = flask.Flask(__name__)\n         app.register_blueprint(bp, url_prefix='/py')\n-        self.assert_true('boolean' in app.jinja_env.tests.keys())\n+        self.assert_in('boolean', app.jinja_env.tests.keys())\n         self.assert_equal(app.jinja_env.tests['boolean'], is_boolean)\n         self.assert_true(app.jinja_env.tests['boolean'](False))\n \n@@ -689,7 +689,7 @@ class BlueprintTestCase(FlaskTestCase):\n         bp.add_app_template_test(is_boolean, 'boolean')\n         app = flask.Flask(__name__)\n         app.register_blueprint(bp, url_prefix='/py')\n-        self.assert_true('boolean' in app.jinja_env.tests.keys())\n+        self.assert_in('boolean', app.jinja_env.tests.keys())\n         self.assert_equal(app.jinja_env.tests['boolean'], is_boolean)\n         self.assert_true(app.jinja_env.tests['boolean'](False))\n \n@@ -704,7 +704,7 @@ class BlueprintTestCase(FlaskTestCase):\n         def index():\n             return flask.render_template('template_test.html', value=False)\n         rv = app.test_client().get('/')\n-        self.assert_true(b'Success!' in rv.data)\n+        self.assert_in(b'Success!', rv.data)\n \n     def test_template_test_after_route_with_template(self):\n         app = flask.Flask(__name__)\n@@ -717,7 +717,7 @@ class BlueprintTestCase(FlaskTestCase):\n             return isinstance(value, bool)\n         app.register_blueprint(bp, url_prefix='/py')\n         rv = app.test_client().get('/')\n-        self.assert_true(b'Success!' in rv.data)\n+        self.assert_in(b'Success!', rv.data)\n \n     def test_add_template_test_with_template(self):\n         bp = flask.Blueprint('bp', __name__)\n@@ -730,7 +730,7 @@ class BlueprintTestCase(FlaskTestCase):\n         def index():\n             return flask.render_template('template_test.html', value=False)\n         rv = app.test_client().get('/')\n-        self.assert_true(b'Success!' in rv.data)\n+        self.assert_in(b'Success!', rv.data)\n \n     def test_template_test_with_name_and_template(self):\n         bp = flask.Blueprint('bp', __name__)\n@@ -743,7 +743,7 @@ class BlueprintTestCase(FlaskTestCase):\n         def index():\n             return flask.render_template('template_test.html', value=False)\n         rv = app.test_client().get('/')\n-        self.assert_true(b'Success!' in rv.data)\n+        self.assert_in(b'Success!', rv.data)\n \n     def test_add_template_test_with_name_and_template(self):\n         bp = flask.Blueprint('bp', __name__)\n@@ -756,7 +756,7 @@ class BlueprintTestCase(FlaskTestCase):\n         def index():\n             return flask.render_template('template_test.html', value=False)\n         rv = app.test_client().get('/')\n-        self.assert_true(b'Success!' in rv.data)\n+        self.assert_in(b'Success!', rv.data)\n \n def suite():\n     suite = unittest.TestSuite()\n\n@@ -28,7 +28,7 @@ class ConfigTestCase(FlaskTestCase):\n     def common_object_test(self, app):\n         self.assert_equal(app.secret_key, 'devkey')\n         self.assert_equal(app.config['TEST_KEY'], 'foo')\n-        self.assert_true('ConfigTestCase' not in app.config)\n+        self.assert_not_in('ConfigTestCase', app.config)\n \n     def test_config_from_file(self):\n         app = flask.Flask(__name__)\n@@ -141,7 +141,7 @@ class InstanceTestCase(FlaskTestCase):\n         try:\n             flask.Flask(__name__, instance_path='instance')\n         except ValueError as e:\n-            self.assert_true('must be absolute' in str(e))\n+            self.assert_in('must be absolute', str(e))\n         else:\n             self.fail('Expected value error')\n \n\n@@ -42,7 +42,7 @@ class ExtImportHookTestCase(FlaskTestCase):\n     def teardown(self):\n         from flask import ext\n         for key in ext.__dict__:\n-            self.assert_true('.' not in key)\n+            self.assert_not_in('.', key)\n \n     def test_flaskext_new_simple_import_normal(self):\n         from flask.ext.newext_simple import ext_id\n@@ -113,7 +113,7 @@ class ExtImportHookTestCase(FlaskTestCase):\n             self.assert_true(tb.tb_frame.f_globals is globals())\n \n             next = tb.tb_next\n-            self.assert_true('flask_broken/__init__.py' in next.tb_frame.f_code.co_filename)\n+            self.assert_in('flask_broken/__init__.py', next.tb_frame.f_code.co_filename)\n \n \n def suite():\n\n@@ -48,8 +48,8 @@ class JSONTestCase(FlaskTestCase):\n         rv = c.post('/json', data='malformed', content_type='application/json')\n         self.assert_equal(rv.status_code, 400)\n         self.assert_equal(rv.mimetype, 'application/json')\n-        self.assert_true('description' in flask.json.loads(rv.data))\n-        self.assert_true('<p>' not in flask.json.loads(rv.data)['description'])\n+        self.assert_in('description', flask.json.loads(rv.data))\n+        self.assert_not_in('<p>', flask.json.loads(rv.data)['description'])\n \n     def test_json_body_encoding(self):\n         app = flask.Flask(__name__)\n@@ -178,7 +178,7 @@ class SendfileTestCase(FlaskTestCase):\n         with app.test_request_context():\n             rv = flask.send_file('static/index.html')\n             self.assert_true(rv.direct_passthrough)\n-            self.assert_true('x-sendfile' in rv.headers)\n+            self.assert_in('x-sendfile', rv.headers)\n             self.assert_equal(rv.headers['x-sendfile'],\n                 os.path.join(app.root_path, 'static/index.html'))\n             self.assert_equal(rv.mimetype, 'text/html')\n@@ -201,7 +201,7 @@ class SendfileTestCase(FlaskTestCase):\n                 f = open(os.path.join(app.root_path, 'static/index.html'))\n                 rv = flask.send_file(f)\n                 self.assert_equal(rv.mimetype, 'text/html')\n-                self.assert_true('x-sendfile' in rv.headers)\n+                self.assert_in('x-sendfile', rv.headers)\n                 self.assert_equal(rv.headers['x-sendfile'],\n                     os.path.join(app.root_path, 'static/index.html'))\n             # mimetypes + etag\n@@ -229,7 +229,7 @@ class SendfileTestCase(FlaskTestCase):\n             with app.test_request_context():\n                 f = StringIO('Test')\n                 rv = flask.send_file(f)\n-                self.assert_true('x-sendfile' not in rv.headers)\n+                self.assert_not_in('x-sendfile', rv.headers)\n             # etags\n             self.assert_equal(len(captured), 1)\n \n@@ -325,10 +325,10 @@ class LoggingTestCase(FlaskTestCase):\n             with catch_stderr() as err:\n                 c.get('/')\n                 out = err.getvalue()\n-                self.assert_true('WARNING in helpers [' in out)\n-                self.assert_true(os.path.basename(__file__.rsplit('.', 1)[0] + '.py') in out)\n-                self.assert_true('the standard library is dead' in out)\n-                self.assert_true('this is a debug statement' in out)\n+                self.assert_in('WARNING in helpers [', out)\n+                self.assert_in(os.path.basename(__file__.rsplit('.', 1)[0] + '.py'), out)\n+                self.assert_in('the standard library is dead', out)\n+                self.assert_in('this is a debug statement', out)\n \n             with catch_stderr() as err:\n                 try:\n@@ -357,13 +357,13 @@ class LoggingTestCase(FlaskTestCase):\n \n         rv = app.test_client().get('/')\n         self.assert_equal(rv.status_code, 500)\n-        self.assert_true(b'Internal Server Error' in rv.data)\n+        self.assert_in(b'Internal Server Error', rv.data)\n \n         err = out.getvalue()\n-        self.assert_true('Exception on / [GET]' in err)\n-        self.assert_true('Traceback (most recent call last):' in err)\n-        self.assert_true('1/0' in err)\n-        self.assert_true('ZeroDivisionError:' in err)\n+        self.assert_in('Exception on / [GET]', err)\n+        self.assert_in('Traceback (most recent call last):', err)\n+        self.assert_in('1/0', err)\n+        self.assert_in('ZeroDivisionError:', err)\n \n     def test_processor_exceptions(self):\n         app = flask.Flask(__name__)\n\n@@ -34,7 +34,7 @@ class FlaskSubclassingTestCase(FlaskTestCase):\n \n         rv = app.test_client().get('/')\n         self.assert_equal(rv.status_code, 500)\n-        self.assert_true(b'Internal Server Error' in rv.data)\n+        self.assert_in(b'Internal Server Error', rv.data)\n \n         err = out.getvalue()\n         self.assert_equal(err, '')\n\n@@ -99,7 +99,7 @@ class TemplatingTestCase(FlaskTestCase):\n         @app.template_filter()\n         def my_reverse(s):\n             return s[::-1]\n-        self.assert_true('my_reverse' in app.jinja_env.filters.keys())\n+        self.assert_in('my_reverse', app.jinja_env.filters.keys())\n         self.assert_equal(app.jinja_env.filters['my_reverse'], my_reverse)\n         self.assert_equal(app.jinja_env.filters['my_reverse']('abcd'), 'dcba')\n \n@@ -108,7 +108,7 @@ class TemplatingTestCase(FlaskTestCase):\n         def my_reverse(s):\n             return s[::-1]\n         app.add_template_filter(my_reverse)\n-        self.assert_true('my_reverse' in app.jinja_env.filters.keys())\n+        self.assert_in('my_reverse', app.jinja_env.filters.keys())\n         self.assert_equal(app.jinja_env.filters['my_reverse'], my_reverse)\n         self.assert_equal(app.jinja_env.filters['my_reverse']('abcd'), 'dcba')\n \n@@ -117,7 +117,7 @@ class TemplatingTestCase(FlaskTestCase):\n         @app.template_filter('strrev')\n         def my_reverse(s):\n             return s[::-1]\n-        self.assert_true('strrev' in app.jinja_env.filters.keys())\n+        self.assert_in('strrev', app.jinja_env.filters.keys())\n         self.assert_equal(app.jinja_env.filters['strrev'], my_reverse)\n         self.assert_equal(app.jinja_env.filters['strrev']('abcd'), 'dcba')\n \n@@ -126,7 +126,7 @@ class TemplatingTestCase(FlaskTestCase):\n         def my_reverse(s):\n             return s[::-1]\n         app.add_template_filter(my_reverse, 'strrev')\n-        self.assert_true('strrev' in app.jinja_env.filters.keys())\n+        self.assert_in('strrev', app.jinja_env.filters.keys())\n         self.assert_equal(app.jinja_env.filters['strrev'], my_reverse)\n         self.assert_equal(app.jinja_env.filters['strrev']('abcd'), 'dcba')\n \n@@ -179,7 +179,7 @@ class TemplatingTestCase(FlaskTestCase):\n         @app.template_test()\n         def boolean(value):\n             return isinstance(value, bool)\n-        self.assert_true('boolean' in app.jinja_env.tests.keys())\n+        self.assert_in('boolean', app.jinja_env.tests.keys())\n         self.assert_equal(app.jinja_env.tests['boolean'], boolean)\n         self.assert_true(app.jinja_env.tests['boolean'](False))\n \n@@ -188,7 +188,7 @@ class TemplatingTestCase(FlaskTestCase):\n         def boolean(value):\n             return isinstance(value, bool)\n         app.add_template_test(boolean)\n-        self.assert_true('boolean' in app.jinja_env.tests.keys())\n+        self.assert_in('boolean', app.jinja_env.tests.keys())\n         self.assert_equal(app.jinja_env.tests['boolean'], boolean)\n         self.assert_true(app.jinja_env.tests['boolean'](False))\n \n@@ -197,7 +197,7 @@ class TemplatingTestCase(FlaskTestCase):\n         @app.template_test('boolean')\n         def is_boolean(value):\n             return isinstance(value, bool)\n-        self.assert_true('boolean' in app.jinja_env.tests.keys())\n+        self.assert_in('boolean', app.jinja_env.tests.keys())\n         self.assert_equal(app.jinja_env.tests['boolean'], is_boolean)\n         self.assert_true(app.jinja_env.tests['boolean'](False))\n \n@@ -206,7 +206,7 @@ class TemplatingTestCase(FlaskTestCase):\n         def is_boolean(value):\n             return isinstance(value, bool)\n         app.add_template_test(is_boolean, 'boolean')\n-        self.assert_true('boolean' in app.jinja_env.tests.keys())\n+        self.assert_in('boolean', app.jinja_env.tests.keys())\n         self.assert_equal(app.jinja_env.tests['boolean'], is_boolean)\n         self.assert_true(app.jinja_env.tests['boolean'](False))\n \n@@ -219,7 +219,7 @@ class TemplatingTestCase(FlaskTestCase):\n         def index():\n             return flask.render_template('template_test.html', value=False)\n         rv = app.test_client().get('/')\n-        self.assert_true(b'Success!' in rv.data)\n+        self.assert_in(b'Success!', rv.data)\n \n     def test_add_template_test_with_template(self):\n         app = flask.Flask(__name__)\n@@ -230,7 +230,7 @@ class TemplatingTestCase(FlaskTestCase):\n         def index():\n             return flask.render_template('template_test.html', value=False)\n         rv = app.test_client().get('/')\n-        self.assert_true(b'Success!' in rv.data)\n+        self.assert_in(b'Success!', rv.data)\n \n     def test_template_test_with_name_and_template(self):\n         app = flask.Flask(__name__)\n@@ -241,7 +241,7 @@ class TemplatingTestCase(FlaskTestCase):\n         def index():\n             return flask.render_template('template_test.html', value=False)\n         rv = app.test_client().get('/')\n-        self.assert_true(b'Success!' in rv.data)\n+        self.assert_in(b'Success!', rv.data)\n \n     def test_add_template_test_with_name_and_template(self):\n         app = flask.Flask(__name__)\n@@ -252,14 +252,14 @@ class TemplatingTestCase(FlaskTestCase):\n         def index():\n             return flask.render_template('template_test.html', value=False)\n         rv = app.test_client().get('/')\n-        self.assert_true(b'Success!' in rv.data)\n+        self.assert_in(b'Success!', rv.data)\n \n     def test_add_template_global(self):\n         app = flask.Flask(__name__)\n         @app.template_global()\n         def get_stuff():\n             return 42\n-        self.assert_true('get_stuff' in app.jinja_env.globals.keys())\n+        self.assert_in('get_stuff', app.jinja_env.globals.keys())\n         self.assert_equal(app.jinja_env.globals['get_stuff'], get_stuff)\n         self.assert_true(app.jinja_env.globals['get_stuff'](), 42)\n         with app.app_context():\n\n@@ -106,7 +106,7 @@ class TestToolsTestCase(FlaskTestCase):\n                 with c.session_transaction() as sess:\n                     pass\n             except RuntimeError as e:\n-                self.assert_true('Session backend did not open a session' in str(e))\n+                self.assert_in('Session backend did not open a session', str(e))\n             else:\n                 self.fail('Expected runtime error')\n \n@@ -130,7 +130,7 @@ class TestToolsTestCase(FlaskTestCase):\n             with c.session_transaction() as s:\n                 pass\n         except RuntimeError as e:\n-            self.assert_true('cookies' in str(e))\n+            self.assert_in('cookies', str(e))\n         else:\n             self.fail('Expected runtime error')\n \n@@ -153,7 +153,7 @@ class TestToolsTestCase(FlaskTestCase):\n \n             resp = c.get('/other')\n             self.assert_true(not hasattr(flask.g, 'value'))\n-            self.assert_true(b'Internal Server Error' in resp.data)\n+            self.assert_in(b'Internal Server Error', resp.data)\n             self.assert_equal(resp.status_code, 500)\n             flask.g.value = 23\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
