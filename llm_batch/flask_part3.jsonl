{"custom_id": "flask#de03143f6ecf9a36dd32f16f07309c64d4de03b0", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 74 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 9 | Complexity Δ (Sum/Max): 9/9 | Churn Δ: 74 | Churn Cumulative: 74 | Contributors (this commit): 1 | Commits (past 90d): 1 | Contributors (cumulative): 1 | DMM Complexity: 1.0\n\nDIFF:\n@@ -0,0 +1,74 @@\n+# -*- coding: utf-8 -*-\n+\"\"\"\n+    Flask Tests\n+    ~~~~~~~~~~~\n+\n+    Tests Flask itself.  The majority of Flask is already tested\n+    as part of Werkzeug.\n+\n+    :copyright: (c) 2010 by Armin Ronacher.\n+    :license: BSD, see LICENSE for more details.\n+\"\"\"\n+from __future__ import with_statement\n+import flask\n+import unittest\n+import tempfile\n+\n+\n+class ContextTestCase(unittest.TestCase):\n+\n+    def test_context_binding(self):\n+        app = flask.Flask(__name__)\n+        @app.route('/')\n+        def index():\n+            return 'Hello %s!' % flask.request.args['name']\n+        @app.route('/meh')\n+        def meh():\n+            return flask.request.url\n+\n+        with app.test_request_context('/?name=World'):\n+            assert index() == 'Hello World!'\n+        with app.test_request_context('/meh'):\n+            assert meh() == 'http://localhost/meh'\n+\n+    def test_request_dispatching(self):\n+        app = flask.Flask(__name__)\n+        @app.route('/')\n+        def index():\n+            return flask.request.method\n+        @app.route('/more', methods=['GET', 'POST'])\n+        def more():\n+            return flask.request.method\n+\n+        c = app.test_client()\n+        assert c.get('/').data == 'GET'\n+        rv = c.post('/')\n+        assert rv.status_code == 405\n+        assert sorted(rv.allow) == ['GET', 'HEAD']\n+        rv = c.head('/')\n+        assert rv.status_code == 200\n+        assert not rv.data # head truncates\n+        assert c.post('/more').data == 'POST'\n+        assert c.get('/more').data == 'GET'\n+        rv = c.delete('/more')\n+        assert rv.status_code == 405\n+        assert sorted(rv.allow) == ['GET', 'HEAD', 'POST']\n+\n+    def test_session(self):\n+        app = flask.Flask(__name__)\n+        app.secret_key = 'testkey'\n+        @app.route('/set', methods=['POST'])\n+        def set():\n+            flask.session['value'] = flask.request.form['value']\n+            return 'value set'\n+        @app.route('/get')\n+        def get():\n+            return flask.session['value']\n+\n+        c = app.test_client()\n+        assert c.post('/set', data={'value': '42'}).data == 'value set'\n+        assert c.get('/get').data == '42'\n+\n+\n+if __name__ == '__main__':\n+    unittest.main()\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#4affedec356ad8c9e6a107578f03fc7f5c615064", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 8 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 2 | Complexity Δ (Sum/Max): 2/2 | Churn Δ: 8 | Churn Cumulative: 82 | Contributors (this commit): 1 | Commits (past 90d): 2 | Contributors (cumulative): 1 | DMM Complexity: 1.0\n\nDIFF:\n@@ -69,6 +69,14 @@ class ContextTestCase(unittest.TestCase):\n         assert c.post('/set', data={'value': '42'}).data == 'value set'\n         assert c.get('/get').data == '42'\n \n+    def test_url_generation(self):\n+        app = flask.Flask(__name__)\n+        @app.route('/hello/<name>', methods=['POST'])\n+        def hello():\n+            pass\n+        with app.test_request_context():\n+            assert flask.url_for('hello', name='test x') == '/hello/test%20x'\n+\n \n if __name__ == '__main__':\n     unittest.main()\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#959b5df00431c436474c5abca304e631c0de7721", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 3 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 5 | Churn Cumulative: 33 | Contributors (this commit): 1 | Commits (past 90d): 4 | Contributors (cumulative): 1 | DMM Complexity: None\n\nDIFF:\n@@ -13,8 +13,7 @@ setup(\n     zip_safe=False,\n     platforms='any',\n     install_requires=[\n-        ## disabled until release, install yourself\n-        # 'Werkzeug',\n-        # 'Jinja2'\n+        'Werkzeug>=0.6.1',\n+        'Jinja2>=2.4'\n     ]\n )\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#08f1f0dc32004fae01cf96d1eed84e6461e698e5", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 179 | Lines Deleted: 82 | Files Changed: 2 | Hunks: 2 | Methods Changed: 40 | Complexity Δ (Sum/Max): 18/29 | Churn Δ: 261 | Churn Cumulative: 343 | Contributors (this commit): 1 | Commits (past 90d): 4 | Contributors (cumulative): 2 | DMM Complexity: 1.0\n\nDIFF:\n@@ -1,82 +0,0 @@\n-# -*- coding: utf-8 -*-\n-\"\"\"\n-    Flask Tests\n-    ~~~~~~~~~~~\n-\n-    Tests Flask itself.  The majority of Flask is already tested\n-    as part of Werkzeug.\n-\n-    :copyright: (c) 2010 by Armin Ronacher.\n-    :license: BSD, see LICENSE for more details.\n-\"\"\"\n-from __future__ import with_statement\n-import flask\n-import unittest\n-import tempfile\n-\n-\n-class ContextTestCase(unittest.TestCase):\n-\n-    def test_context_binding(self):\n-        app = flask.Flask(__name__)\n-        @app.route('/')\n-        def index():\n-            return 'Hello %s!' % flask.request.args['name']\n-        @app.route('/meh')\n-        def meh():\n-            return flask.request.url\n-\n-        with app.test_request_context('/?name=World'):\n-            assert index() == 'Hello World!'\n-        with app.test_request_context('/meh'):\n-            assert meh() == 'http://localhost/meh'\n-\n-    def test_request_dispatching(self):\n-        app = flask.Flask(__name__)\n-        @app.route('/')\n-        def index():\n-            return flask.request.method\n-        @app.route('/more', methods=['GET', 'POST'])\n-        def more():\n-            return flask.request.method\n-\n-        c = app.test_client()\n-        assert c.get('/').data == 'GET'\n-        rv = c.post('/')\n-        assert rv.status_code == 405\n-        assert sorted(rv.allow) == ['GET', 'HEAD']\n-        rv = c.head('/')\n-        assert rv.status_code == 200\n-        assert not rv.data # head truncates\n-        assert c.post('/more').data == 'POST'\n-        assert c.get('/more').data == 'GET'\n-        rv = c.delete('/more')\n-        assert rv.status_code == 405\n-        assert sorted(rv.allow) == ['GET', 'HEAD', 'POST']\n-\n-    def test_session(self):\n-        app = flask.Flask(__name__)\n-        app.secret_key = 'testkey'\n-        @app.route('/set', methods=['POST'])\n-        def set():\n-            flask.session['value'] = flask.request.form['value']\n-            return 'value set'\n-        @app.route('/get')\n-        def get():\n-            return flask.session['value']\n-\n-        c = app.test_client()\n-        assert c.post('/set', data={'value': '42'}).data == 'value set'\n-        assert c.get('/get').data == '42'\n-\n-    def test_url_generation(self):\n-        app = flask.Flask(__name__)\n-        @app.route('/hello/<name>', methods=['POST'])\n-        def hello():\n-            pass\n-        with app.test_request_context():\n-            assert flask.url_for('hello', name='test x') == '/hello/test%20x'\n-\n-\n-if __name__ == '__main__':\n-    unittest.main()\n\n@@ -0,0 +1,179 @@\n+# -*- coding: utf-8 -*-\n+\"\"\"\n+    Flask Tests\n+    ~~~~~~~~~~~\n+\n+    Tests Flask itself.  The majority of Flask is already tested\n+    as part of Werkzeug.\n+\n+    :copyright: (c) 2010 by Armin Ronacher.\n+    :license: BSD, see LICENSE for more details.\n+\"\"\"\n+from __future__ import with_statement\n+import flask\n+import unittest\n+import tempfile\n+\n+\n+class ContextTestCase(unittest.TestCase):\n+\n+    def test_context_binding(self):\n+        app = flask.Flask(__name__)\n+        @app.route('/')\n+        def index():\n+            return 'Hello %s!' % flask.request.args['name']\n+        @app.route('/meh')\n+        def meh():\n+            return flask.request.url\n+\n+        with app.test_request_context('/?name=World'):\n+            assert index() == 'Hello World!'\n+        with app.test_request_context('/meh'):\n+            assert meh() == 'http://localhost/meh'\n+\n+\n+class BasicFunctionality(unittest.TestCase):\n+\n+    def test_request_dispatching(self):\n+        app = flask.Flask(__name__)\n+        @app.route('/')\n+        def index():\n+            return flask.request.method\n+        @app.route('/more', methods=['GET', 'POST'])\n+        def more():\n+            return flask.request.method\n+\n+        c = app.test_client()\n+        assert c.get('/').data == 'GET'\n+        rv = c.post('/')\n+        assert rv.status_code == 405\n+        assert sorted(rv.allow) == ['GET', 'HEAD']\n+        rv = c.head('/')\n+        assert rv.status_code == 200\n+        assert not rv.data # head truncates\n+        assert c.post('/more').data == 'POST'\n+        assert c.get('/more').data == 'GET'\n+        rv = c.delete('/more')\n+        assert rv.status_code == 405\n+        assert sorted(rv.allow) == ['GET', 'HEAD', 'POST']\n+\n+    def test_session(self):\n+        app = flask.Flask(__name__)\n+        app.secret_key = 'testkey'\n+        @app.route('/set', methods=['POST'])\n+        def set():\n+            flask.session['value'] = flask.request.form['value']\n+            return 'value set'\n+        @app.route('/get')\n+        def get():\n+            return flask.session['value']\n+\n+        c = app.test_client()\n+        assert c.post('/set', data={'value': '42'}).data == 'value set'\n+        assert c.get('/get').data == '42'\n+\n+    def test_request_processing(self):\n+        app = flask.Flask(__name__)\n+        evts = []\n+        @app.request_init\n+        def before_request():\n+            evts.append('before')\n+        @app.request_shutdown\n+        def after_request(response):\n+            response.data += '|after'\n+            evts.append('after')\n+            return response\n+        @app.route('/')\n+        def index():\n+            assert 'before' in evts\n+            assert 'after' not in evts\n+            return 'request'\n+        assert 'after' not in evts\n+        rv = app.test_client().get('/').data\n+        assert 'after' in evts\n+        assert rv == 'request|after'\n+\n+    def test_error_handling(self):\n+        app = flask.Flask(__name__)\n+        @app.errorhandler(404)\n+        def not_found(e):\n+            return 'not found', 404\n+        @app.errorhandler(500)\n+        def internal_server_error(e):\n+            return 'internal server error', 500\n+        @app.route('/')\n+        def index():\n+            flask.abort(404)\n+        @app.route('/error')\n+        def error():\n+            1/0\n+        c = app.test_client()\n+        rv = c.get('/')\n+        assert rv.status_code == 404\n+        assert rv.data == 'not found'\n+        rv = c.get('/error')\n+        assert rv.status_code == 500\n+        assert 'internal server error' in rv.data\n+\n+    def test_response_creation(self):\n+        app = flask.Flask(__name__)\n+        @app.route('/unicode')\n+        def from_unicode():\n+            return u'Hällo Wörld'\n+        @app.route('/string')\n+        def from_string():\n+            return u'Hällo Wörld'.encode('utf-8')\n+        @app.route('/args')\n+        def from_tuple():\n+            return 'Meh', 400, {'X-Foo': 'Testing'}, 'text/plain'\n+        c = app.test_client()\n+        assert c.get('/unicode').data == u'Hällo Wörld'.encode('utf-8')\n+        assert c.get('/string').data == u'Hällo Wörld'.encode('utf-8')\n+        rv = c.get('/args')\n+        assert rv.data == 'Meh'\n+        assert rv.headers['X-Foo'] == 'Testing'\n+        assert rv.status_code == 400\n+        assert rv.mimetype == 'text/plain'\n+\n+    def test_url_generation(self):\n+        app = flask.Flask(__name__)\n+        @app.route('/hello/<name>', methods=['POST'])\n+        def hello():\n+            pass\n+        with app.test_request_context():\n+            assert flask.url_for('hello', name='test x') == '/hello/test%20x'\n+\n+\n+class Templating(unittest.TestCase):\n+\n+    def test_context_processing(self):\n+        app = flask.Flask(__name__)\n+        @app.context_processor\n+        def context_processor():\n+            return {'injected_value': 42}\n+        @app.route('/')\n+        def index():\n+            return flask.render_template('context_template.html', value=23)\n+        rv = app.test_client().get('/')\n+        assert rv.data == '<p>23|42'\n+\n+    def test_escaping(self):\n+        text = '<p>Hello World!'\n+        app = flask.Flask(__name__)\n+        @app.route('/')\n+        def index():\n+            return flask.render_template('escaping_template.html', text=text,\n+                                         html=flask.Markup(text))\n+        lines = app.test_client().get('/').data.splitlines()\n+        assert lines == [\n+            '&lt;p&gt;Hello World!',\n+            '<p>Hello World!',\n+            '<p>Hello World!',\n+            '<p>Hello World!',\n+            '&lt;p&gt;Hello World!',\n+            '<p>Hello World!'\n+        ]\n+\n+\n+if __name__ == '__main__':\n+    unittest.main()\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#ca520fb7e4c29afccc637e61c11429a0f3e8d5ad", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 14 | Lines Deleted: 5 | Files Changed: 2 | Hunks: 4 | Methods Changed: 3 | Complexity Δ (Sum/Max): 0/1 | Churn Δ: 19 | Churn Cumulative: 949 | Contributors (this commit): 2 | Commits (past 90d): 13 | Contributors (cumulative): 3 | DMM Complexity: 1.0\n\nDIFF:\n@@ -16,7 +16,8 @@ from threading import local\n from contextlib import contextmanager\n from jinja2 import Environment, PackageLoader\n from werkzeug import Request as RequestBase, Response as ResponseBase, \\\n-     LocalStack, LocalProxy, create_environ, cached_property\n+     LocalStack, LocalProxy, create_environ, cached_property, \\\n+     SharedDataMiddleware\n from werkzeug.routing import Map, Rule\n from werkzeug.exceptions import HTTPException, InternalServerError\n from werkzeug.contrib.securecookie import SecureCookie\n@@ -241,6 +242,9 @@ class Flask(object):\n         if self.static_path is not None:\n             self.url_map.add(Rule(self.static_path + '/<filename>',\n                                   build_only=True, endpoint='static'))\n+            self.wsgi_app = SharedDataMiddleware(self.wsgi_app, {\n+                self.static_path: (self.package_name, 'static')\n+            })\n \n         #: the Jinja2 environment.  It is created from the\n         #: :attr:`jinja_options` and the loader that is returned\n@@ -286,10 +290,6 @@ class Flask(object):\n         from werkzeug import run_simple\n         if 'debug' in options:\n             self.debug = options.pop('debug')\n-        if self.static_path is not None:\n-            options['static_files'] = {\n-                self.static_path:   (self.package_name, 'static')\n-            }\n         options.setdefault('use_reloader', self.debug)\n         options.setdefault('use_debugger', self.debug)\n         return run_simple(host, port, self, **options)\n\n@@ -143,6 +143,15 @@ class BasicFunctionality(unittest.TestCase):\n         with app.test_request_context():\n             assert flask.url_for('hello', name='test x') == '/hello/test%20x'\n \n+    def test_static_files(self):\n+        app = flask.Flask(__name__)\n+        rv = app.test_client().get('/static/index.html')\n+        assert rv.status_code == 200\n+        assert rv.data.strip() == '<h1>Hello World!</h1>'\n+        with app.test_request_context():\n+            assert flask.url_for('static', filename='index.html') \\\n+                == '/static/index.html'\n+\n \n class Templating(unittest.TestCase):\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#2d9bb692728fd76b19e467499caa4f5fcb07aede", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 24 | Lines Deleted: 3 | Files Changed: 1 | Hunks: 8 | Methods Changed: 3 | Complexity Δ (Sum/Max): 3/3 | Churn Δ: 27 | Churn Cumulative: 788 | Contributors (this commit): 2 | Commits (past 90d): 12 | Contributors (cumulative): 2 | DMM Complexity: 1.0\n\nDIFF:\n@@ -11,10 +11,10 @@\n \"\"\"\n import os\n import sys\n-import pkg_resources\n+\n from threading import local\n from contextlib import contextmanager\n-from jinja2 import Environment, PackageLoader\n+from jinja2 import Environment, PackageLoader, FileSystemLoader\n from werkzeug import Request as RequestBase, Response as ResponseBase, \\\n      LocalStack, LocalProxy, create_environ, cached_property, \\\n      SharedDataMiddleware\n@@ -27,6 +27,15 @@ from werkzeug.contrib.securecookie import SecureCookie\n from werkzeug import abort, redirect\n from jinja2 import Markup, escape\n \n+# use pkg_resource if that works, otherwise fall back to cwd.  The\n+# current working directory is generally not reliable with the notable\n+# exception of google appengine.\n+try:\n+    import pkg_resources\n+    pkg_resources.resource_stream\n+except (ImportError, AttributeError):\n+    pkg_resources = None\n+\n \n class Request(RequestBase):\n     \"\"\"The request object used by default in flask.  Remembers the\n@@ -202,6 +211,10 @@ class Flask(object):\n         #: it was set by the constructor.\n         self.package_name = package_name\n \n+        #: where is the app root located?\n+        self.root_path = os.path.abspath(os.path.dirname(\n+            sys.modules[self.package_name].__file__))\n+\n         #: a dictionary of all view functions registered.  The keys will\n         #: be function names which are also used to generate URLs and\n         #: the values are the function objects themselves.\n@@ -242,8 +255,12 @@ class Flask(object):\n         if self.static_path is not None:\n             self.url_map.add(Rule(self.static_path + '/<filename>',\n                                   build_only=True, endpoint='static'))\n+            if pkg_resources is not None:\n+                target = (self.package_name, 'static')\n+            else:\n+                target = os.path.join(self.root_path, 'static')\n             self.wsgi_app = SharedDataMiddleware(self.wsgi_app, {\n-                self.static_path: (self.package_name, 'static')\n+                self.static_path: target\n             })\n \n         #: the Jinja2 environment.  It is created from the\n@@ -262,6 +279,8 @@ class Flask(object):\n         `templates` folder.  To add other loaders it's possible to\n         override this method.\n         \"\"\"\n+        if pkg_resources is None:\n+            return FileSystemLoader(os.path.join(self.root_path, 'templates'))\n         return PackageLoader(self.package_name)\n \n     def update_template_context(self, context):\n@@ -323,6 +342,8 @@ class Flask(object):\n         :param resource: the name of the resource.  To access resources within\n                          subfolders use forward slashes as separator.\n         \"\"\"\n+        if pkg_resources is None:\n+            return open(os.path.join(self.root_path, resource), 'rb')\n         return pkg_resources.resource_stream(self.package_name, resource)\n \n     def open_session(self, request):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#c33675f0251071ea47ce166b81ce8c637842f091", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 167 | Lines Deleted: 0 | Files Changed: 2 | Hunks: 2 | Methods Changed: 13 | Complexity Δ (Sum/Max): 18/13 | Churn Δ: 167 | Churn Cumulative: 167 | Contributors (this commit): 1 | Commits (past 90d): 2 | Contributors (cumulative): 2 | DMM Complexity: 1.0\n\nDIFF:\n@@ -0,0 +1,103 @@\n+# -*- coding: utf-8 -*-\n+\"\"\"\n+    Flaskr\n+    ~~~~~~\n+\n+    A microblog example application written as Flask tutorial with\n+    Flask and sqlite3.\n+\n+    :copyright: (c) 2010 by Armin Ronacher.\n+    :license: BSD, see LICENSE for more details.\n+\"\"\"\n+from __future__ import with_statement\n+import time\n+import sqlite3\n+from contextlib import closing\n+from flask import Flask, request, session, g, redirect, url_for, abort, \\\n+     render_template, flash\n+from werkzeug import secure_filename\n+\n+# configuration\n+DATABASE = '/tmp/flaskr.db'\n+DEBUG = True\n+SECRET_KEY = 'development key'\n+USERNAME = 'admin'\n+PASSWORD = 'default'\n+\n+# create our little application :)\n+app = Flask(__name__)\n+app.secret_key = SECRET_KEY\n+app.debug = DEBUG\n+\n+\n+def connect_db():\n+    \"\"\"Returns a new connection to the database.\"\"\"\n+    return sqlite3.connect(DATABASE)\n+\n+\n+def init_db():\n+    \"\"\"Creates the database tables.\"\"\"\n+    with closing(connect_db()) as db:\n+        with app.open_resource('schema.sql') as f:\n+            db.cursor().executescript(f.read())\n+        db.commit()\n+\n+\n+@app.request_init\n+def before_request():\n+    \"\"\"Make sure we are connected to the database each request.  Also\n+    set `g.logged_in` to `True` if we are logged in.\n+    \"\"\"\n+    g.db = connect_db()\n+    g.logged_in = session.get('logged_in', False)\n+\n+\n+@app.request_shutdown\n+def after_request(response):\n+    \"\"\"Closes the database again at the end of the request.\"\"\"\n+    g.db.close()\n+    return response\n+\n+\n+@app.route('/')\n+def show_entries():\n+    cur = g.db.execute('select title, text from entries order by id desc')\n+    entries = [dict(title=row[0], text=row[1]) for row in cur.fetchall()]\n+    return render_template('show_entries.html', entries=entries)\n+\n+\n+@app.route('/add', methods=['POST'])\n+def add_entry():\n+    if not g.logged_in:\n+        abort(401)\n+    g.db.execute('insert into entries (title, text) values (?, ?)',\n+                 [request.form['title'], request.form['text']])\n+    g.db.commit()\n+    flash('New entry was successfully posted')\n+    return redirect(url_for('show_entries'))\n+\n+\n+@app.route('/login', methods=['GET', 'POST'])\n+def login():\n+    error = None\n+    if request.method == 'POST':\n+        if request.form['username'] != USERNAME:\n+            error = 'Invalid username'\n+        elif request.form['password'] != PASSWORD:\n+            error = 'Invalid password'\n+        else:\n+            session['logged_in'] = True\n+            flash('You were logged in')\n+            return redirect(url_for('show_entries'))\n+    return render_template('login.html', error=error)\n+\n+\n+@app.route('/logout')\n+def logout():\n+    session.pop('logged_in', None)\n+    flash('You were logged out')\n+    return redirect(url_for('show_entries'))\n+\n+\n+if __name__ == '__main__':\n+    app.run()\n\n@@ -0,0 +1,64 @@\n+# -*- coding: utf-8 -*-\n+\"\"\"\n+    Flaskr Tests\n+    ~~~~~~~~~~~~\n+\n+    Tests the Flaskr application.\n+\n+    :copyright: (c) 2010 by Armin Ronacher.\n+    :license: BSD, see LICENSE for more details.\n+\"\"\"\n+import flaskr\n+import unittest\n+import tempfile\n+\n+\n+class FlaskrTestCase(unittest.TestCase):\n+\n+    def setUp(self):\n+        \"\"\"Before each test, set up a blank database\"\"\"\n+        self.db = tempfile.NamedTemporaryFile()\n+        self.app = flaskr.app.test_client()\n+        flaskr.DATABASE = self.db.name\n+        flaskr.init_db()\n+\n+    def login(self, username, password):\n+        return self.app.post('/login', data=dict(\n+            username=username,\n+            password=password\n+        ), follow_redirects=True)\n+\n+    def logout(self):\n+        return self.app.get('/logout', follow_redirects=True)\n+\n+    # testing functions\n+\n+    def test_login_logout(self):\n+        \"\"\"Make sure login and logout works\"\"\"\n+        rv = self.login(flaskr.USERNAME, flaskr.PASSWORD)\n+        assert 'You were logged in' in rv.data\n+        rv = self.logout()\n+        assert 'You were logged out' in rv.data\n+        rv = self.login(flaskr.USERNAME + 'x', flaskr.PASSWORD)\n+        assert 'Invalid username' in rv.data\n+        rv = self.login(flaskr.USERNAME, flaskr.PASSWORD + 'x')\n+        assert 'Invalid password' in rv.data\n+\n+    def test_messages(self):\n+        \"\"\"Test that messages work\"\"\"\n+        # start with a blank state\n+        rv = self.app.get('/')\n+        assert 'No entries here so far' in rv.data\n+        self.login(flaskr.USERNAME, flaskr.PASSWORD)\n+        rv = self.app.post('/add', data=dict(\n+            title='<Hello>',\n+            text='<strong>HTML</strong> allowed here'\n+        ), follow_redirects=True)\n+        assert 'No entries here so far' not in rv.data\n+        self.login(flaskr.USERNAME, flaskr.PASSWORD)\n+        assert '&lt;Hello&gt' in rv.data\n+        assert '<strong>HTML</strong> allowed here' in rv.data\n+\n+\n+if __name__ == '__main__':\n+    unittest.main()\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#fc94599285aa1aec50b3c9426697249e55edda0a", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 0 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 2 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 105 | Contributors (this commit): 1 | Commits (past 90d): 2 | Contributors (cumulative): 1 | DMM Complexity: None\n\nDIFF:\n@@ -10,12 +10,10 @@\n     :license: BSD, see LICENSE for more details.\n \"\"\"\n from __future__ import with_statement\n-import time\n import sqlite3\n from contextlib import closing\n from flask import Flask, request, session, g, redirect, url_for, abort, \\\n      render_template, flash\n-from werkzeug import secure_filename\n \n # configuration\n DATABASE = '/tmp/flaskr.db'\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#1d8432ebfd1637eacab79a15e9b7963bf061371c", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 1 | Churn Cumulative: 789 | Contributors (this commit): 2 | Commits (past 90d): 13 | Contributors (cumulative): 2 | DMM Complexity: None\n\nDIFF:\n@@ -9,6 +9,7 @@\n     :copyright: (c) 2010 by Armin Ronacher.\n     :license: BSD, see LICENSE for more details.\n \"\"\"\n+from __future__ import with_statement\n import os\n import sys\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#1246f4088a4fdc00a79f8029ff5d77bfe4fc9b14", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 5 | Files Changed: 1 | Hunks: 3 | Methods Changed: 2 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 7 | Churn Cumulative: 112 | Contributors (this commit): 1 | Commits (past 90d): 3 | Contributors (cumulative): 1 | DMM Complexity: 0.0\n\nDIFF:\n@@ -43,11 +43,8 @@ def init_db():\n \n @app.request_init\n def before_request():\n-    \"\"\"Make sure we are connected to the database each request.  Also\n-    set `g.logged_in` to `True` if we are logged in.\n-    \"\"\"\n+    \"\"\"Make sure we are connected to the database each request.\"\"\"\n     g.db = connect_db()\n-    g.logged_in = session.get('logged_in', False)\n \n \n @app.request_shutdown\n@@ -66,7 +63,7 @@ def show_entries():\n \n @app.route('/add', methods=['POST'])\n def add_entry():\n-    if not g.logged_in:\n+    if not session.get('logged_in'):\n         abort(401)\n     g.db.execute('insert into entries (title, text) values (?, ?)',\n                  [request.form['title'], request.form['text']])\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#6dd92ae4b32c336564231e10db12458a8b9261ca", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 5 | Lines Deleted: 3 | Files Changed: 1 | Hunks: 2 | Methods Changed: 2 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 8 | Churn Cumulative: 72 | Contributors (this commit): 1 | Commits (past 90d): 2 | Contributors (cumulative): 1 | DMM Complexity: 1.0\n\nDIFF:\n@@ -33,6 +33,11 @@ class FlaskrTestCase(unittest.TestCase):\n \n     # testing functions\n \n+    def test_empty_db(self):\n+        \"\"\"Start with a blank database.\"\"\"\n+        rv = self.app.get('/')\n+        assert 'No entries here so far' in rv.data\n+\n     def test_login_logout(self):\n         \"\"\"Make sure login and logout works\"\"\"\n         rv = self.login(flaskr.USERNAME, flaskr.PASSWORD)\n@@ -46,9 +51,6 @@ class FlaskrTestCase(unittest.TestCase):\n \n     def test_messages(self):\n         \"\"\"Test that messages work\"\"\"\n-        # start with a blank state\n-        rv = self.app.get('/')\n-        assert 'No entries here so far' in rv.data\n         self.login(flaskr.USERNAME, flaskr.PASSWORD)\n         rv = self.app.post('/add', data=dict(\n             title='<Hello>',\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#40e0024d7b87150ed694829a5335bd2435962225", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 9 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 2 | Methods Changed: 2 | Complexity Δ (Sum/Max): 2/2 | Churn Δ: 11 | Churn Cumulative: 800 | Contributors (this commit): 2 | Commits (past 90d): 14 | Contributors (cumulative): 2 | DMM Complexity: 1.0\n\nDIFF:\n@@ -153,6 +153,14 @@ def _default_template_ctx_processor():\n     )\n \n \n+def _get_package_path(name):\n+    \"\"\"Returns the path to a package or cwd if that cannot be found.\"\"\"\n+    try:\n+        return os.path.abspath(os.path.dirname(sys.modules[name].__file__))\n+    except (KeyError, AttributeError):\n+        return os.getcwd()\n+\n+\n class Flask(object):\n     \"\"\"The flask object implements a WSGI application and acts as the central\n     object.  It is passed the name of the module or package of the\n@@ -213,8 +221,7 @@ class Flask(object):\n         self.package_name = package_name\n \n         #: where is the app root located?\n-        self.root_path = os.path.abspath(os.path.dirname(\n-            sys.modules[self.package_name].__file__))\n+        self.root_path = _get_package_path(self.package_name)\n \n         #: a dictionary of all view functions registered.  The keys will\n         #: be function names which are also used to generate URLs and\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#7b5015010bc8c2a2d56c7c50b37e5b9facdad102", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 11 | Lines Deleted: 7 | Files Changed: 1 | Hunks: 4 | Methods Changed: 3 | Complexity Δ (Sum/Max): 3/3 | Churn Δ: 18 | Churn Cumulative: 818 | Contributors (this commit): 2 | Commits (past 90d): 15 | Contributors (cumulative): 2 | DMM Complexity: 1.0\n\nDIFF:\n@@ -14,7 +14,6 @@ import os\n import sys\n \n from threading import local\n-from contextlib import contextmanager\n from jinja2 import Environment, PackageLoader, FileSystemLoader\n from werkzeug import Request as RequestBase, Response as ResponseBase, \\\n      LocalStack, LocalProxy, create_environ, cached_property, \\\n@@ -84,6 +83,16 @@ class _RequestContext(object):\n         self.g = _RequestGlobals()\n         self.flashes = None\n \n+    def __enter__(self):\n+        _request_ctx_stack.push(self)\n+\n+    def __exit__(self, exc_type, exc_value, tb):\n+        # do not pop the request stack if we are in debug mode and an\n+        # exception happened.  This will allow the debugger to still\n+        # access the request object in the interactive shell.\n+        if tb is None or not self.app.debug:\n+            _request_ctx_stack.pop()\n+\n \n def url_for(endpoint, **values):\n     \"\"\"Generates a URL to the given endpoint with the method provided.\n@@ -618,7 +627,6 @@ class Flask(object):\n             response = self.process_response(response)\n             return response(environ, start_response)\n \n-    @contextmanager\n     def request_context(self, environ):\n         \"\"\"Creates a request context from the given environment and binds\n         it to the current context.  This must be used in combination with\n@@ -632,11 +640,7 @@ class Flask(object):\n \n         :params environ: a WSGI environment\n         \"\"\"\n-        _request_ctx_stack.push(_RequestContext(self, environ))\n-        try:\n-            yield\n-        finally:\n-            _request_ctx_stack.pop()\n+        return _RequestContext(self, environ)\n \n     def test_request_context(self, *args, **kwargs):\n         \"\"\"Creates a WSGI environment from the given values (see\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#fb2d2e446bdd806ea3de7b869c7371e2dae57a23", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 19 | Lines Deleted: 18 | Files Changed: 4 | Hunks: 18 | Methods Changed: 8 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 37 | Churn Cumulative: 1455 | Contributors (this commit): 2 | Commits (past 90d): 32 | Contributors (cumulative): 6 | DMM Complexity: None\n\nDIFF:\n@@ -41,13 +41,13 @@ def init_db():\n         db.commit()\n \n \n-@app.request_init\n+@app.before_request\n def before_request():\n     \"\"\"Make sure we are connected to the database each request.\"\"\"\n     g.db = connect_db()\n \n \n-@app.request_shutdown\n+@app.after_request\n def after_request(response):\n     \"\"\"Closes the database again at the end of the request.\"\"\"\n     g.db.close()\n\n@@ -69,7 +69,7 @@ def gravatar_url(email, size=80):\n         (md5(email.strip().lower().encode('utf-8')).hexdigest(), size)\n \n \n-@app.request_init\n+@app.before_request\n def before_request():\n     \"\"\"Make sure we are connected to the database each request and look\n     up the current user so that we know he's there.\n@@ -81,7 +81,7 @@ def before_request():\n                           [session['user_id']], one=True)\n \n \n-@app.request_shutdown\n+@app.after_request\n def after_request(response):\n     \"\"\"Closes the database again at the end of the request.\"\"\"\n     g.db.close()\n\n@@ -249,16 +249,16 @@ class Flask(object):\n         #: of the request before request dispatching kicks in.  This\n         #: can for example be used to open database connections or\n         #: getting hold of the currently logged in user.\n-        #: To register a function here, use the :meth:`request_init`\n+        #: To register a function here, use the :meth:`before_request`\n         #: decorator.\n-        self.request_init_funcs = []\n+        self.before_request_funcs = []\n \n         #: a list of functions that are called at the end of the\n         #: request.  Tha function is passed the current response\n         #: object and modify it in place or replace it.\n-        #: To register a function here use the :meth:`request_shtdown`\n+        #: To register a function here use the :meth:`after_request`\n         #: decorator.\n-        self.request_shutdown_funcs = []\n+        self.after_request_funcs = []\n \n         #: a list of functions that are called without arguments\n         #: to populate the template context.  Each returns a dictionary\n@@ -509,14 +509,14 @@ class Flask(object):\n             return f\n         return decorator\n \n-    def request_init(self, f):\n+    def before_request(self, f):\n         \"\"\"Registers a function to run before each request.\"\"\"\n-        self.request_init_funcs.append(f)\n+        self.before_request_funcs.append(f)\n         return f\n \n-    def request_shutdown(self, f):\n+    def after_request(self, f):\n         \"\"\"Register a function to be run after each request.\"\"\"\n-        self.request_shutdown_funcs.append(f)\n+        self.after_request_funcs.append(f)\n         return f\n \n     def context_processor(self, f):\n@@ -583,19 +583,20 @@ class Flask(object):\n \n     def preprocess_request(self):\n         \"\"\"Called before the actual request dispatching and will\n-        call every as :func:`request_init` decorated function.\n+        call every as :meth:`before_request` decorated function.\n         If any of these function returns a value it's handled as\n         if it was the return value from the view and further\n         request handling is stopped.\n         \"\"\"\n-        for func in self.request_init_funcs:\n+        for func in self.before_request_funcs:\n             rv = func()\n             if rv is not None:\n                 return rv\n \n     def process_response(self, response):\n         \"\"\"Can be overridden in order to modify the response object\n-        before it's sent to the WSGI server.\n+        before it's sent to the WSGI server.  By default this will\n+        call all the :meth:`after_request` decorated functions.\n \n         :param response: a :attr:`response_class` object.\n         :return: a new response object or the same, has to be an\n@@ -604,7 +605,7 @@ class Flask(object):\n         session = _request_ctx_stack.top.session\n         if session is not None:\n             self.save_session(session, response)\n-        for handler in self.request_shutdown_funcs:\n+        for handler in self.after_request_funcs:\n             response = handler(response)\n         return response\n \n\n@@ -75,10 +75,10 @@ class BasicFunctionality(unittest.TestCase):\n     def test_request_processing(self):\n         app = flask.Flask(__name__)\n         evts = []\n-        @app.request_init\n+        @app.before_request\n         def before_request():\n             evts.append('before')\n-        @app.request_shutdown\n+        @app.after_request\n         def after_request(response):\n             response.data += '|after'\n             evts.append('after')\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#6d556acb3fcaa6eeff4bda8cf704ad5f0cf5b5ac", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 3 | Churn Cumulative: 262 | Contributors (this commit): 2 | Commits (past 90d): 4 | Contributors (cumulative): 2 | DMM Complexity: None\n\nDIFF:\n@@ -241,5 +241,6 @@ latex_documents = [\n \n intersphinx_mapping = {\n     'http://docs.python.org/dev': None,\n-    'http://werkzeug.pocoo.org/documentation/dev/': None\n+    'http://werkzeug.pocoo.org/documentation/dev/': None,\n+    'http://www.sqlalchemy.org/docs/': None\n }\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#0bb8b4f9a1c61fcf473e5ca7a10cc3ed4f30766f", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 50 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 3 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 50 | Churn Cumulative: 83 | Contributors (this commit): 1 | Commits (past 90d): 5 | Contributors (cumulative): 1 | DMM Complexity: None\n\nDIFF:\n@@ -1,3 +1,42 @@\n+\"\"\"\n+Flask\n+-----\n+\n+Flask is a microframework for Python based on Werkzeug, Jinja 2 and good\n+intentions. And before you ask: It's BSD licensed!\n+\n+Flask is Fun\n+````````````\n+\n+::\n+\n+    from flask import Flask\n+    app = Flask(__name__)\n+\n+    @app.route(\"/\")\n+    def hello():\n+        return \"Hello World!\"\n+\n+    if __name__ == \"__main__\":\n+        app.run()\n+\n+And Easy to Setup\n+`````````````````\n+\n+::\n+\n+    $ easy_install Flask\n+    $ python hello.py\n+     * Running on http://localhost:5000/\n+\n+Links\n+`````\n+\n+* `website <http://flask.pocoo.org/>`_\n+* `documentation <http://flask.pocoo.org/docs/>`_\n+* `development version <http://github.com/mitsuhiko/flask/zipball/master#egg=Flask-dev>`_\n+\n+\"\"\"\n from setuptools import setup\n \n \n@@ -9,11 +48,22 @@ setup(\n     author='Armin Ronacher',\n     author_email='armin.ronacher@active-4.com',\n     description='A microframework based on Werkzeug, Jinja2 and good intentions',\n+    long_description=__doc__,\n     py_modules=['flask'],\n     zip_safe=False,\n     platforms='any',\n     install_requires=[\n         'Werkzeug>=0.6.1',\n         'Jinja2>=2.4'\n+    ],\n+    classifiers=[\n+        'Development Status :: 3 - Alpha',\n+        'Environment :: Web Environment',\n+        'Intended Audience :: Developers',\n+        'License :: OSI Approved :: BSD License',\n+        'Operating System :: OS Independent',\n+        'Programming Language :: Python',\n+        'Topic :: Internet :: WWW/HTTP :: Dynamic Content',\n+        'Topic :: Software Development :: Libraries :: Python Modules'\n     ]\n )\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#9fbf9a062c11904b5022a5aa7941449e31340c32", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 85 | Contributors (this commit): 1 | Commits (past 90d): 6 | Contributors (cumulative): 1 | DMM Complexity: None\n\nDIFF:\n@@ -42,7 +42,7 @@ from setuptools import setup\n \n setup(\n     name='Flask',\n-    version='0.1',\n+    version='0.2',\n     url='http://github.com/mitsuhiko/flask/',\n     license='BSD',\n     author='Armin Ronacher',\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#5310fc38227b1907cb541f4a30ea8dfef46c2e19", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 33 | Lines Deleted: 2 | Files Changed: 2 | Hunks: 5 | Methods Changed: 6 | Complexity Δ (Sum/Max): 5/4 | Churn Δ: 35 | Churn Cumulative: 1070 | Contributors (this commit): 2 | Commits (past 90d): 21 | Contributors (cumulative): 3 | DMM Complexity: 1.0\n\nDIFF:\n@@ -68,6 +68,22 @@ class _RequestGlobals(object):\n     pass\n \n \n+class _NullSession(SecureCookie):\n+    \"\"\"Class used to generate nicer error messages if sessions are not\n+    available.  Will still allow read-only access to the empty session\n+    but fail on setting.\n+    \"\"\"\n+\n+    def _fail(self, *args, **kwargs):\n+        raise RuntimeError('the session is unavailable because no secret '\n+                           'key was set.  Set the secret_key on the '\n+                           'application to something unique and secret')\n+    __setitem__ = __delitem__ = clear = pop = popitem = \\\n+        update = setdefault = _fail\n+    del _fail\n+\n+\n+\n class _RequestContext(object):\n     \"\"\"The request context contains all request relevant information.  It is\n     created at the beginning of the request and pushed to the\n@@ -80,6 +96,8 @@ class _RequestContext(object):\n         self.url_adapter = app.url_map.bind_to_environ(environ)\n         self.request = app.request_class(environ)\n         self.session = app.open_session(self.request)\n+        if self.session is None:\n+            self.session = _NullSession()\n         self.g = _RequestGlobals()\n         self.flashes = None\n \n@@ -384,7 +402,6 @@ class Flask(object):\n                         object)\n         :param response: an instance of :attr:`response_class`\n         \"\"\"\n-        if session is not None:\n         session.save_cookie(response, self.session_cookie_name)\n \n     def add_url_rule(self, rule, endpoint, **options):\n@@ -603,7 +620,7 @@ class Flask(object):\n                  instance of :attr:`response_class`.\n         \"\"\"\n         session = _request_ctx_stack.top.session\n-        if session is not None:\n+        if not isinstance(session, _NullSession):\n             self.save_session(session, response)\n         for handler in self.after_request_funcs:\n             response = handler(response)\n\n@@ -72,6 +72,20 @@ class BasicFunctionality(unittest.TestCase):\n         assert c.post('/set', data={'value': '42'}).data == 'value set'\n         assert c.get('/get').data == '42'\n \n+    def test_missing_session(self):\n+        app = flask.Flask(__name__)\n+        def expect_exception(f, *args, **kwargs):\n+            try:\n+                f(*args, **kwargs)\n+            except RuntimeError, e:\n+                assert e.args and 'session is unavailable' in e.args[0]\n+            else:\n+                assert False, 'expected exception'\n+        with app.test_request_context():\n+            assert flask.session.get('missing_key') is None\n+            expect_exception(flask.session.__setitem__, 'foo', 42)\n+            expect_exception(flask.session.pop, 'foo')\n+\n     def test_request_processing(self):\n         app = flask.Flask(__name__)\n         evts = []\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#0b9c2b5eb1b604cd76d9252e8e9628df731ea572", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 0 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 1 | Churn Cumulative: 865 | Contributors (this commit): 2 | Commits (past 90d): 18 | Contributors (cumulative): 2 | DMM Complexity: 0.0\n\nDIFF:\n@@ -325,7 +325,6 @@ class Flask(object):\n         :param context: the context as a dictionary that is updated in place\n                         to add extra variables.\n         \"\"\"\n-        reqctx = _request_ctx_stack.top\n         for func in self.template_context_processors:\n             context.update(func())\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#63593d281b7358a86a808cc0bf5e47107316403d", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 0 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 1 | Churn Cumulative: 866 | Contributors (this commit): 2 | Commits (past 90d): 19 | Contributors (cumulative): 2 | DMM Complexity: None\n\nDIFF:\n@@ -13,7 +13,6 @@ from __future__ import with_statement\n import os\n import sys\n \n-from threading import local\n from jinja2 import Environment, PackageLoader, FileSystemLoader\n from werkzeug import Request as RequestBase, Response as ResponseBase, \\\n      LocalStack, LocalProxy, create_environ, cached_property, \\\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#190059c8f01c6f75243824e765d08a7cce386eda", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 36 | Lines Deleted: 1 | Files Changed: 2 | Hunks: 4 | Methods Changed: 3 | Complexity Δ (Sum/Max): 2/1 | Churn Δ: 37 | Churn Cumulative: 1109 | Contributors (this commit): 2 | Commits (past 90d): 25 | Contributors (cumulative): 3 | DMM Complexity: 1.0\n\nDIFF:\n@@ -120,6 +120,27 @@ def url_for(endpoint, **values):\n     return _request_ctx_stack.top.url_adapter.build(endpoint, values)\n \n \n+def get_template_attribute(template_name, attribute):\n+    \"\"\"Loads a macro (or variable) a template exports.  This can be used to\n+    invoke a macro from within Python code.  If you for example have a\n+    template named `_foo.html` with the following contents:\n+\n+    .. sourcecode:: html+jinja\n+\n+       {% macro hello(name) %}Hello {{ name }}!{% endmacro %}\n+\n+    You can access this from Python code like this::\n+\n+        hello = get_template_attribute('_foo.html', 'hello')\n+        return hello('World')\n+\n+    :param template_name: the name of the template\n+    :param attribute: the name of the variable of macro to acccess\n+    \"\"\"\n+    return getattr(current_app.jinja_env.get_template(template_name).module,\n+                   attribute)\n+\n+\n def flash(message):\n     \"\"\"Flashes a message to the next request.  In order to remove the\n     flashed message from the session and to display it to the user,\n@@ -626,10 +647,18 @@ class Flask(object):\n \n     def wsgi_app(self, environ, start_response):\n         \"\"\"The actual WSGI application.  This is not implemented in\n-        `__call__` so that middlewares can be applied:\n+        `__call__` so that middlewares can be applied without losing a\n+        reference to the class.  So instead of doing this::\n+\n+            app = MyMiddleware(app)\n+\n+        It's a better idea to do this instead::\n \n             app.wsgi_app = MyMiddleware(app.wsgi_app)\n \n+        Then you still have the original application object around and\n+        can continue to call methods on it.\n+\n         :param environ: a WSGI environment\n         :param start_response: a callable accepting a status code,\n                                a list of headers and an optional\n\n@@ -197,6 +197,12 @@ class Templating(unittest.TestCase):\n             '<p>Hello World!'\n         ]\n \n+    def test_macros(self):\n+        app = flask.Flask(__name__)\n+        with app.test_request_context():\n+            macro = flask.get_template_attribute('_macro.html', 'hello')\n+            assert macro('World') == 'Hello World!'\n+\n \n if __name__ == '__main__':\n     unittest.main()\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
