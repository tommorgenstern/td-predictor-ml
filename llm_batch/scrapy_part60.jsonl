{"custom_id": "scrapy#5eebe1f405040a9a0e14219a33d75f78466b5b90", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): 9/9 | Churn Δ: 4 | Churn Cumulative: 4 | Contributors (this commit): 2 | Commits (past 90d): 2 | Contributors (cumulative): 2 | DMM Complexity: None\n\nDIFF:\n@@ -40,12 +40,12 @@ def fetch(urls, perdomain=False):\n \n \n def get_or_create_spider(url):\n-    # dirty hack to allow downloading pages from unknown domains\n+    # XXX: hack to allow downloading pages from unknown domains\n     spider = spiders.fromurl(url)\n     if not spider:\n         domain = str(urlparse.urlparse(url).hostname or spiders.default_domain)\n         spider = BaseSpider()\n         spider.domain_name = domain\n-        spiders._alldict[domain] = spider\n+        spiders.add_spider(spider)\n     return spider\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "scrapy#b44409a20378afa76d07b1c584c5681a540ee527", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 72 | Lines Deleted: 0 | Files Changed: 2 | Hunks: 3 | Methods Changed: 5 | Complexity Δ (Sum/Max): 12/8 | Churn Δ: 72 | Churn Cumulative: 509 | Contributors (this commit): 3 | Commits (past 90d): 15 | Contributors (cumulative): 6 | DMM Complexity: 0.5185185185185185\n\nDIFF:\n@@ -3,6 +3,7 @@ import decimal\n import re\n import time\n \n+\n class BaseField(object):\n     def __init__(self, default=None):\n         self.default = default or self.to_python(None)\n@@ -121,3 +122,36 @@ class StringField(BaseField):\n         \"Converts the input iterable into a single value.\"\n         return ' '.join(value)\n \n+\n+class TimeField(BaseField):\n+    def to_python(self, value):\n+        if value is None:\n+            return None\n+        if isinstance(value, datetime.time):\n+            return value\n+        if isinstance(value, datetime.datetime):\n+            return value.time\n+\n+        # Attempt to parse a datetime:\n+        value = str(value)\n+        # split usecs, because they are not recognized by strptime.\n+        if '.' in value:\n+            try:\n+                value, usecs = value.split('.')\n+                usecs = int(usecs)\n+            except ValueError:\n+                raise ValueError('Enter a valid time in HH:MM[:ss[.uuuuuu]] format.')\n+        else:\n+            usecs = 0\n+        kwargs = {'microsecond': usecs}\n+\n+        try: # Seconds are optional, so try converting seconds first.\n+            return datetime.time(*time.strptime(value, '%H:%M:%S')[3:6],\n+                                 **kwargs)\n+        except ValueError:\n+            try: # Try without seconds.\n+                return datetime.time(*time.strptime(value, '%H:%M')[3:5],\n+                                         **kwargs)\n+            except ValueError:\n+                raise ValueError('Enter a valid time in HH:MM[:ss[.uuuuuu]] format.')\n+\n\n@@ -246,3 +246,41 @@ class NewItemFieldsTest(unittest.TestCase):\n \n         self.assertRaises(ValueError, set_invalid_value)\n \n+    def test_time_field(self):\n+        class TestItem(Item):\n+            field = fields.TimeField()\n+\n+        i = TestItem()\n+\n+        dt_t = datetime.time(11, 8, 10, 100)\n+        i.field = dt_t\n+        assert i.field == dt_t\n+\n+        dt_dt = datetime.datetime.today()\n+        i.field = dt_dt\n+        assert i.field == dt_dt.time\n+\n+        i.field = '11:08:10.100'\n+        assert i.field == datetime.time(11, 8, 10, 100)\n+ \n+        i.field = '11:08:10'\n+        assert i.field == datetime.time(11, 8, 10)\n+\n+        i.field = '11:08'\n+        assert i.field == datetime.time(11, 8)\n+\n+        def set_invalid_usecs():\n+            i.field = '11:08:10.usecs'\n+\n+        self.assertRaises(ValueError, set_invalid_usecs)\n+\n+        def set_invalid_format():\n+            i.field = 'string'\n+\n+        self.assertRaises(ValueError, set_invalid_format)\n+\n+        def set_invalid_time():\n+            i.field = '25:08:10'\n+\n+        self.assertRaises(ValueError, set_invalid_time)\n+\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "scrapy#8634a0d181481b32e095d30c151ed6ee87b8c4ab", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 29 | Lines Deleted: 6 | Files Changed: 2 | Hunks: 5 | Methods Changed: 7 | Complexity Δ (Sum/Max): 2/4 | Churn Δ: 35 | Churn Cumulative: 377 | Contributors (this commit): 3 | Commits (past 90d): 11 | Contributors (cumulative): 6 | DMM Complexity: 1.0\n\nDIFF:\n@@ -10,6 +10,7 @@ class _ItemMeta(type):\n         for n, v in attrs.iteritems():\n             if isinstance(v, BaseField):\n                 cls.fields[n] = v\n+                delattr(cls, n)\n         return cls\n \n \n@@ -38,16 +39,13 @@ class Item(ScrapedItem):\n         else:\n             raise AttributeError(name)\n \n-    def __getattribute__(self, name):\n-        if name.startswith('_') or name == 'fields':\n-            return ScrapedItem.__getattribute__(self, name)\n-        \n-        if name in self.fields.keys():\n+    def __getattr__(self, name):\n         try:\n             return self._values[name]\n         except KeyError:\n+            try:\n                 return self.fields[name].default\n-        else:\n+            except KeyError:\n                 raise AttributeError(name)\n \n     def __repr__(self):\n\n@@ -85,6 +85,31 @@ class NewItemTest(unittest.TestCase):\n         assert i2.name == 'John Doe'\n         assert i2.number == 123\n \n+    def test_private_attr(self):\n+        class TestItem(Item):\n+            name = fields.StringField()\n+\n+        i = TestItem()\n+        i._private = 'test'\n+        self.assertEqual(i._private, 'test')\n+\n+    def test_custom_methods(self):\n+        class TestItem(Item):\n+            name = fields.StringField()\n+\n+            def get_name(self):\n+                return self.name\n+\n+            def change_name(self, name):\n+                self.name = name\n+\n+        i = TestItem()\n+        self.assertEqual(i.get_name(), None)\n+        i.name = 'lala'\n+        self.assertEqual(i.get_name(), 'lala')\n+        i.change_name('other')\n+        self.assertEqual(i.get_name(), 'other')\n+\n \n class NewItemFieldsTest(unittest.TestCase):\n     \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "scrapy#d75afaa161c723db0236e0e50233b95eb3e30a9c", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 13 | Lines Deleted: 13 | Files Changed: 2 | Hunks: 12 | Methods Changed: 11 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 26 | Churn Cumulative: 560 | Contributors (this commit): 3 | Commits (past 90d): 18 | Contributors (cumulative): 6 | DMM Complexity: None\n\nDIFF:\n@@ -106,7 +106,7 @@ class IntegerField(BaseField):\n         return int(value) if value is not None else None\n \n \n-class StringField(BaseField):\n+class TextField(BaseField):\n     def to_python(self, value):\n         if hasattr(value, '__iter__'):\n             return self.to_python(self.to_single(value))\n@@ -115,7 +115,7 @@ class StringField(BaseField):\n         elif value is None:\n             return value\n         else:\n-            raise ValueError(\"StringField expects a basestring, got %s\" \\\n+            raise ValueError(\"TextField expects a basestring, got %s\" \\\n                 % type(value).__name__)\n \n     def to_single(self, value):\n\n@@ -10,7 +10,7 @@ class NewItemTest(unittest.TestCase):\n \n     def test_simple(self):\n         class TestItem(Item):\n-            name = fields.StringField()\n+            name = fields.TextField()\n \n         i = TestItem()\n         i.name = 'name'\n@@ -18,7 +18,7 @@ class NewItemTest(unittest.TestCase):\n \n     def test_init(self):\n         class TestItem(Item):\n-            name = fields.StringField()\n+            name = fields.TextField()\n         \n         i = TestItem()\n         assert i.name is None\n@@ -32,8 +32,8 @@ class NewItemTest(unittest.TestCase):\n \n     def test_multi(self):\n         class TestMultiItem(Item):\n-            name = fields.StringField()\n-            names = fields.MultiValuedField(fields.StringField)\n+            name = fields.TextField()\n+            names = fields.MultiValuedField(fields.TextField)\n \n         i = TestMultiItem()\n         i.name = 'name'\n@@ -57,14 +57,14 @@ class NewItemTest(unittest.TestCase):\n \n     def test_default_value(self):\n         class TestItem(Item):\n-            name = fields.StringField(default='John')\n+            name = fields.TextField(default='John')\n  \n         i = TestItem()\n         assert i.name == 'John'\n \n     def test_to_python_iter(self):\n         class TestItem(Item):\n-            name = fields.StringField()\n+            name = fields.TextField()\n  \n         i = TestItem()\n         i.name = ('John', 'Doe')\n@@ -72,7 +72,7 @@ class NewItemTest(unittest.TestCase):\n \n     def test_repr(self):\n         class TestItem(Item):\n-            name = fields.StringField()\n+            name = fields.TextField()\n             number = fields.IntegerField()\n \n         i = TestItem()\n@@ -87,7 +87,7 @@ class NewItemTest(unittest.TestCase):\n \n     def test_private_attr(self):\n         class TestItem(Item):\n-            name = fields.StringField()\n+            name = fields.TextField()\n \n         i = TestItem()\n         i._private = 'test'\n@@ -95,7 +95,7 @@ class NewItemTest(unittest.TestCase):\n \n     def test_custom_methods(self):\n         class TestItem(Item):\n-            name = fields.StringField()\n+            name = fields.TextField()\n \n             def get_name(self):\n                 return self.name\n@@ -257,9 +257,9 @@ class NewItemFieldsTest(unittest.TestCase):\n \n         self.assertRaises(ValueError, set_invalid_value)\n \n-    def test_string_field(self):\n+    def test_text_field(self):\n         class TestItem(Item):\n-            field = fields.StringField()\n+            field = fields.TextField()\n \n         i = TestItem()\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "scrapy#47d937f36b24e18104cff0333c37d8888c83aed1", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 29 | Lines Deleted: 22 | Files Changed: 2 | Hunks: 14 | Methods Changed: 10 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 51 | Churn Cumulative: 611 | Contributors (this commit): 3 | Commits (past 90d): 20 | Contributors (cumulative): 6 | DMM Complexity: 1.0\n\nDIFF:\n@@ -110,12 +110,12 @@ class TextField(BaseField):\n     def to_python(self, value):\n         if hasattr(value, '__iter__'):\n             return self.to_python(self.to_single(value))\n-        elif isinstance(value, basestring):\n+        elif isinstance(value, unicode):\n             return value\n         elif value is None:\n             return value\n         else:\n-            raise ValueError(\"TextField expects a basestring, got %s\" \\\n+            raise ValueError(\"TextField expects a unicode, got %s\" \\\n                              % type(value).__name__)\n \n     def to_single(self, value):\n\n@@ -13,8 +13,8 @@ class NewItemTest(unittest.TestCase):\n             name = fields.TextField()\n \n         i = TestItem()\n-        i.name = 'name'\n-        assert i.name == 'name'\n+        i.name = u'name'\n+        assert i.name == u'name'\n \n     def test_init(self):\n         class TestItem(Item):\n@@ -23,12 +23,13 @@ class NewItemTest(unittest.TestCase):\n         i = TestItem()\n         assert i.name is None\n \n-        i2 = TestItem({'name': 'john doe'})\n-        assert i2.name == 'john doe'\n+        i2 = TestItem({'name': u'john doe'})\n+        assert i2.name == u'john doe'\n \n-        self.assertRaises(TypeError, TestItem, name='john doe')\n+        self.assertRaises(TypeError, TestItem, name=u'john doe')\n \n-        self.assertRaises(AttributeError, TestItem, {'name': 'john doe', 'other': 'foo'})\n+        self.assertRaises(AttributeError, TestItem, {'name': u'john doe',\n+                                                     'other': u'foo'})\n \n     def test_multi(self):\n         class TestMultiItem(Item):\n@@ -36,9 +37,9 @@ class NewItemTest(unittest.TestCase):\n             names = fields.MultiValuedField(fields.TextField)\n \n         i = TestMultiItem()\n-        i.name = 'name'\n-        i.names = ['name1', 'name2']\n-        assert i.names == ['name1', 'name2']\n+        i.name = u'name'\n+        i.names = [u'name1', u'name2']\n+        assert i.names == [u'name1', u'name2']\n \n     def test_invalid_field(self):\n         class TestItem(Item):\n@@ -57,18 +58,18 @@ class NewItemTest(unittest.TestCase):\n \n     def test_default_value(self):\n         class TestItem(Item):\n-            name = fields.TextField(default='John')\n+            name = fields.TextField(default=u'John')\n  \n         i = TestItem()\n-        assert i.name == 'John'\n+        assert i.name == u'John'\n \n     def test_to_python_iter(self):\n         class TestItem(Item):\n             name = fields.TextField()\n  \n         i = TestItem()\n-        i.name = ('John', 'Doe')\n-        assert i.name == 'John Doe'\n+        i.name = (u'John', u'Doe')\n+        assert i.name == u'John Doe'\n \n     def test_repr(self):\n         class TestItem(Item):\n@@ -76,10 +77,10 @@ class NewItemTest(unittest.TestCase):\n             number = fields.IntegerField()\n \n         i = TestItem()\n-        i.name = 'John Doe'\n+        i.name = u'John Doe'\n         i.number = '123'\n         itemrepr = repr(i)\n-        assert itemrepr == \"TestItem({'name': 'John Doe', 'number': 123})\"\n+        assert itemrepr == \"TestItem({'name': u'John Doe', 'number': 123})\"\n \n         i2 = eval(itemrepr)\n         assert i2.name == 'John Doe'\n@@ -105,9 +106,9 @@ class NewItemTest(unittest.TestCase):\n \n         i = TestItem()\n         self.assertEqual(i.get_name(), None)\n-        i.name = 'lala'\n-        self.assertEqual(i.get_name(), 'lala')\n-        i.change_name('other')\n+        i.name = u'lala'\n+        self.assertEqual(i.get_name(), u'lala')\n+        i.change_name(u'other')\n         self.assertEqual(i.get_name(), 'other')\n \n \n@@ -263,8 +264,14 @@ class NewItemFieldsTest(unittest.TestCase):\n \n         i = TestItem()\n \n-        i.field = 'hello'\n-        assert i.field == 'hello'\n+        i.field = u'hello'\n+        assert i.field == u'hello'\n+        assert isinstance(i.field, unicode) \n+\n+        def set_str():\n+            i.field = 'string'\n+\n+        self.assertRaises(ValueError, set_str)\n \n         def set_invalid_value():\n             i.field = 3 \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "scrapy#72457c3e4e41365c8439596817422e8e578df588", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 15 | Lines Deleted: 3 | Files Changed: 3 | Hunks: 6 | Methods Changed: 6 | Complexity Δ (Sum/Max): 3/2 | Churn Δ: 18 | Churn Cumulative: 673 | Contributors (this commit): 3 | Commits (past 90d): 27 | Contributors (cumulative): 9 | DMM Complexity: 1.0\n\nDIFF:\n@@ -6,7 +6,7 @@ import time\n \n class BaseField(object):\n     def __init__(self, default=None):\n-        self.default = default or self.to_python(None)\n+        self._default = self.to_python(default) if default is not None else None\n \n     def to_python(self, value):\n         \"\"\"\n@@ -15,6 +15,10 @@ class BaseField(object):\n         \"\"\"\n         return value\n \n+    def get_default(self):\n+        \"\"\"Returns the default value for the field.\"\"\"\n+        return self._default\n+\n \n class MultiValuedField(BaseField):\n     def __init__(self, field_type, default=None):\n\n@@ -44,7 +44,7 @@ class Item(ScrapedItem):\n             return self._values[name]\n         except KeyError:\n             try:\n-                return self.fields[name].default\n+                return self.fields[name].get_default()\n             except KeyError:\n                 raise AttributeError(name)\n \n@@ -54,3 +54,4 @@ class Item(ScrapedItem):\n         \"\"\"\n         values = dict((field, getattr(self, field)) for field in self.fields)\n         return \"%s(%s)\" % (self.__class__.__name__, repr(values))\n+\n\n@@ -63,6 +63,13 @@ class NewItemTest(unittest.TestCase):\n         i = TestItem()\n         assert i.name == u'John'\n \n+    def test_wrong_default(self):\n+        def set_wrong_default():\n+            class TestItem(Item):\n+                name = fields.TextField(default=3)\n+        \n+        self.assertRaises(ValueError, set_wrong_default)\n+\n     def test_to_python_iter(self):\n         class TestItem(Item):\n             name = fields.TextField()\n@@ -117,7 +124,7 @@ class NewItemFieldsTest(unittest.TestCase):\n     def test_base_field(self):\n         f = fields.BaseField()\n \n-        assert f.default == None\n+        assert f.get_default() is None\n         assert f.to_python(1) == 1\n \n     def test_boolean_field(self):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "scrapy#c73ff8198b1f5a465d7b7a236d54a7d5110012a9", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 55 | Lines Deleted: 28 | Files Changed: 2 | Hunks: 30 | Methods Changed: 11 | Complexity Δ (Sum/Max): -3/0 | Churn Δ: 83 | Churn Cumulative: 709 | Contributors (this commit): 3 | Commits (past 90d): 24 | Contributors (cumulative): 6 | DMM Complexity: 0.6666666666666666\n\nDIFF:\n@@ -41,13 +41,11 @@ class DateField(BaseField):\n     ansi_date_re = re.compile(r'^\\d{4}-\\d{1,2}-\\d{1,2}$')\n \n     def to_python(self, value):\n-        if value is None:\n-            return value\n         if isinstance(value, datetime.datetime):\n             return value.date()\n-        if isinstance(value, datetime.date):\n+        elif isinstance(value, datetime.date):\n             return value\n-\n+        elif isinstance(value, basestring):\n             if not self.ansi_date_re.search(value):\n                 raise ValueError(\"Enter a valid date in YYYY-MM-DD format.\")\n \n@@ -56,17 +54,18 @@ class DateField(BaseField):\n                 return datetime.date(year, month, day)\n             except ValueError, e:\n                 raise ValueError(\"Invalid date: %s\" % str(e))\n+        else:\n+            raise TypeError(\"Cannot instatiante %s with %s\" \\\n+                             % (self.__class__.__name__, type(value).__name__))\n \n \n class DateTimeField(BaseField):\n     def to_python(self, value):\n-        if value is None:\n-            return value\n         if isinstance(value, datetime.datetime):\n             return value\n-        if isinstance(value, datetime.date):\n+        elif isinstance(value, datetime.date):\n             return datetime.datetime(value.year, value.month, value.day)\n-\n+        elif isinstance(value, basestring):\n             # Attempt to parse a datetime:\n             value = str(value)\n             # split usecs, because they are not recognized by strptime.\n@@ -93,21 +92,25 @@ class DateTimeField(BaseField):\n                                                  **kwargs)\n                     except ValueError:\n                         raise ValueError('Enter a valid date/time in YYYY-MM-DD HH:MM[:ss[.uuuuuu]] format.')\n+        else:\n+            raise TypeError(\"Cannot instatiante %s with %s\" \\\n+                             % (self.__class__.__name__, type(value).__name__))\n+\n \n \n class DecimalField(BaseField):\n     def to_python(self, value):\n-        return decimal.Decimal(value) if value is not None else None\n+        return decimal.Decimal(value)\n \n \n class FloatField(BaseField):\n     def to_python(self, value):\n-        return float(value) if value is not None else None\n+        return float(value)\n \n \n class IntegerField(BaseField):\n     def to_python(self, value):\n-        return int(value) if value is not None else None\n+        return int(value)\n \n \n class TextField(BaseField):\n@@ -116,26 +119,22 @@ class TextField(BaseField):\n             return self.to_python(self.to_single(value))\n         elif isinstance(value, unicode):\n             return value\n-        elif value is None:\n-            return value\n         else:\n-            raise ValueError(\"TextField expects a unicode, got %s\" \\\n-                             % type(value).__name__)\n+            raise TypeError(\"%s requires a unicode (or iterable of unicodes), got %s\" \\\n+                             % (self.__class__.__name__, type(value).__name__))\n \n     def to_single(self, value):\n-        \"Converts the input iterable into a single value.\"\n-        return ' '.join(value)\n+        \"\"\"Converts the input iterable into a single value\"\"\"\n+        return ' '.join((self.to_python(x) for x in value))\n \n \n class TimeField(BaseField):\n     def to_python(self, value):\n-        if value is None:\n-            return None\n         if isinstance(value, datetime.time):\n             return value\n         if isinstance(value, datetime.datetime):\n             return value.time\n-\n+        elif isinstance(value, basestring):\n             # Attempt to parse a datetime:\n             value = str(value)\n             # split usecs, because they are not recognized by strptime.\n@@ -158,4 +157,6 @@ class TimeField(BaseField):\n                                              **kwargs)\n                 except ValueError:\n                     raise ValueError('Enter a valid time in HH:MM[:ss[.uuuuuu]] format.')\n-\n+        else:\n+            raise TypeError(\"Cannot instatiante %s with %s\" \\\n+                             % (self.__class__.__name__, type(value).__name__))\n\n@@ -68,7 +68,7 @@ class NewItemTest(unittest.TestCase):\n             class TestItem(Item):\n                 name = fields.TextField(default=3)\n         \n-        self.assertRaises(ValueError, set_wrong_default)\n+        self.assertRaises(TypeError, set_wrong_default)\n \n     def test_to_python_iter(self):\n         class TestItem(Item):\n@@ -134,16 +134,19 @@ class NewItemFieldsTest(unittest.TestCase):\n         i = TestItem()\n \n         i.field = True\n-        assert i.field == True\n+        assert i.field is True\n     \n         i.field = 1\n-        assert i.field == True\n+        assert i.field is True\n \n         i.field = False\n-        assert i.field == False\n+        assert i.field is False\n \n         i.field = 0\n-        assert i.field == False\n+        assert i.field is False\n+\n+        i.field = None\n+        assert i.field is False\n \n     def test_date_field(self):\n         class TestItem(Item):\n@@ -172,6 +175,8 @@ class NewItemFieldsTest(unittest.TestCase):\n \n         self.assertRaises(ValueError, set_invalid_date)\n \n+        self.assertRaises(TypeError, setattr, i, 'field', None)\n+\n     def test_datetime_field(self):\n         class TestItem(Item):\n             field = fields.DateTimeField()\n@@ -214,6 +219,8 @@ class NewItemFieldsTest(unittest.TestCase):\n \n         self.assertRaises(ValueError, set_invalid_date)\n \n+        self.assertRaises(TypeError, setattr, i, 'field', None)\n+\n     def test_decimal_field(self):\n         class TestItem(Item):\n             field = fields.DecimalField()\n@@ -231,6 +238,8 @@ class NewItemFieldsTest(unittest.TestCase):\n \n         self.assertRaises(decimal.InvalidOperation, set_invalid_value)\n \n+        self.assertRaises(TypeError, setattr, i, 'field', None)\n+\n     def test_float_field(self):\n         class TestItem(Item):\n             field = fields.FloatField()\n@@ -248,6 +257,8 @@ class NewItemFieldsTest(unittest.TestCase):\n \n         self.assertRaises(ValueError, set_invalid_value)\n \n+        self.assertRaises(TypeError, setattr, i, 'field', None)\n+\n     def test_integer_field(self):\n         class TestItem(Item):\n             field = fields.IntegerField()\n@@ -265,6 +276,8 @@ class NewItemFieldsTest(unittest.TestCase):\n \n         self.assertRaises(ValueError, set_invalid_value)\n \n+        self.assertRaises(TypeError, setattr, i, 'field', None)\n+\n     def test_text_field(self):\n         class TestItem(Item):\n             field = fields.TextField()\n@@ -278,12 +291,23 @@ class NewItemFieldsTest(unittest.TestCase):\n         def set_str():\n             i.field = 'string'\n \n-        self.assertRaises(ValueError, set_str)\n+        # must be unicode!\n+        self.assertRaises(TypeError, set_str)\n+\n+        self.assertRaises(TypeError, setattr, i, 'field', None)\n \n         def set_invalid_value():\n             i.field = 3 \n \n-        self.assertRaises(ValueError, set_invalid_value)\n+        self.assertRaises(TypeError, set_invalid_value)\n+\n+        i = TestItem()\n+        i.field = [u'hello', u'world']\n+        self.assertEqual(i.field, u'hello world')\n+        assert isinstance(i.field, unicode)\n+\n+        self.assertRaises(TypeError, setattr, i, 'field', [u'hello', 3, u'world']) \n+        self.assertRaises(TypeError, setattr, i, 'field', [u'hello', 'world']) \n \n     def test_time_field(self):\n         class TestItem(Item):\n@@ -295,6 +319,8 @@ class NewItemFieldsTest(unittest.TestCase):\n         i.field = dt_t\n         assert i.field == dt_t\n \n+        self.assertRaises(TypeError, setattr, i, 'field', None)\n+\n         dt_dt = datetime.datetime.today()\n         i.field = dt_dt\n         assert i.field == dt_dt.time\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "scrapy#ae82f8c70df102aa4c4eac07dd072e63be0fa296", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 7 | Files Changed: 2 | Hunks: 3 | Methods Changed: 3 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 9 | Churn Cumulative: 718 | Contributors (this commit): 3 | Commits (past 90d): 26 | Contributors (cumulative): 6 | DMM Complexity: None\n\nDIFF:\n@@ -9,14 +9,9 @@ class BaseField(object):\n         self._default = self.to_python(default) if default is not None else None\n \n     def to_python(self, value):\n-        \"\"\"\n-        Converts the input value into the expected Python data type.\n-        Subclasses should override this.\n-        \"\"\"\n-        return value\n+        raise NotImplementedError()\n \n     def get_default(self):\n-        \"\"\"Returns the default value for the field.\"\"\"\n         return self._default\n \n \n\n@@ -125,7 +125,7 @@ class NewItemFieldsTest(unittest.TestCase):\n         f = fields.BaseField()\n \n         assert f.get_default() is None\n-        assert f.to_python(1) == 1\n+        self.assertRaises(NotImplementedError, f.to_python, 1)\n \n     def test_boolean_field(self):\n         class TestItem(Item):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "scrapy#95a0b1c614612a6cb96fe3cc6ed715bac3634610", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 2 | Methods Changed: 2 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 2 | Churn Cumulative: 683 | Contributors (this commit): 4 | Commits (past 90d): 38 | Contributors (cumulative): 4 | DMM Complexity: 1.0\n\nDIFF:\n@@ -165,7 +165,9 @@ class ExecutionEngine(object):\n                 self.downloader.sites[domain].needs_backout() or  \\\n                 self.scraper.sites[domain].needs_backout():\n             return\n+        self._next_request(domain)\n \n+    def _next_request(self, domain):\n         # Next pending request from scheduler\n         request, deferred = self.scheduler.next_request(domain)\n         if request:\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "scrapy#c0d8b121b8aebc099f7b21053ed6d8527d77d02b", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 6 | Lines Deleted: 1 | Files Changed: 2 | Hunks: 2 | Methods Changed: 2 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 7 | Churn Cumulative: 725 | Contributors (this commit): 3 | Commits (past 90d): 28 | Contributors (cumulative): 6 | DMM Complexity: 1.0\n\nDIFF:\n@@ -120,7 +120,7 @@ class TextField(BaseField):\n \n     def to_single(self, value):\n         \"\"\"Converts the input iterable into a single value\"\"\"\n-        return ' '.join((self.to_python(x) for x in value))\n+        return u' '.join((self.to_python(x) for x in value))\n \n \n class TimeField(BaseField):\n\n@@ -309,6 +309,11 @@ class NewItemFieldsTest(unittest.TestCase):\n         self.assertRaises(TypeError, setattr, i, 'field', [u'hello', 3, u'world']) \n         self.assertRaises(TypeError, setattr, i, 'field', [u'hello', 'world']) \n \n+        i = TestItem()\n+        i.field = []\n+        assert isinstance(i.field, unicode)\n+        self.assertEqual(i.field, '')\n+\n     def test_time_field(self):\n         class TestItem(Item):\n             field = fields.TimeField()\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "scrapy#a6e822a802963d4be8b7219f0cbf605fe25b934c", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 42 | Lines Deleted: 40 | Files Changed: 1 | Hunks: 37 | Methods Changed: 15 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 82 | Churn Cumulative: 540 | Contributors (this commit): 3 | Commits (past 90d): 14 | Contributors (cumulative): 3 | DMM Complexity: 1.0\n\nDIFF:\n@@ -14,17 +14,17 @@ class NewItemTest(unittest.TestCase):\n \n         i = TestItem()\n         i.name = u'name'\n-        assert i.name == u'name'\n+        self.assertEqual(i.name, u'name')\n \n     def test_init(self):\n         class TestItem(Item):\n             name = fields.TextField()\n         \n         i = TestItem()\n-        assert i.name is None\n+        self.assert_(i.name is None)\n \n         i2 = TestItem({'name': u'john doe'})\n-        assert i2.name == u'john doe'\n+        self.assertEqual(i2.name, u'john doe')\n \n         self.assertRaises(TypeError, TestItem, name=u'john doe')\n \n@@ -39,7 +39,7 @@ class NewItemTest(unittest.TestCase):\n         i = TestMultiItem()\n         i.name = u'name'\n         i.names = [u'name1', u'name2']\n-        assert i.names == [u'name1', u'name2']\n+        self.assertEqual(i.names, [u'name1', u'name2'])\n \n     def test_invalid_field(self):\n         class TestItem(Item):\n@@ -61,7 +61,7 @@ class NewItemTest(unittest.TestCase):\n             name = fields.TextField(default=u'John')\n  \n         i = TestItem()\n-        assert i.name == u'John'\n+        self.assertEqual(i.name, u'John')\n \n     def test_wrong_default(self):\n         def set_wrong_default():\n@@ -76,7 +76,7 @@ class NewItemTest(unittest.TestCase):\n  \n         i = TestItem()\n         i.name = (u'John', u'Doe')\n-        assert i.name == u'John Doe'\n+        self.assertEqual(i.name, u'John Doe')\n \n     def test_repr(self):\n         class TestItem(Item):\n@@ -87,11 +87,12 @@ class NewItemTest(unittest.TestCase):\n         i.name = u'John Doe'\n         i.number = '123'\n         itemrepr = repr(i)\n-        assert itemrepr == \"TestItem({'name': u'John Doe', 'number': 123})\"\n+        self.assertEqual(itemrepr,\n+                         \"TestItem({'name': u'John Doe', 'number': 123})\")\n \n         i2 = eval(itemrepr)\n-        assert i2.name == 'John Doe'\n-        assert i2.number == 123\n+        self.assertEqual(i2.name, 'John Doe')\n+        self.assertEqual(i2.number, 123)\n \n     def test_private_attr(self):\n         class TestItem(Item):\n@@ -124,7 +125,7 @@ class NewItemFieldsTest(unittest.TestCase):\n     def test_base_field(self):\n         f = fields.BaseField()\n \n-        assert f.get_default() is None\n+        self.assert_(f.get_default() is None)\n         self.assertRaises(NotImplementedError, f.to_python, 1)\n \n     def test_boolean_field(self):\n@@ -134,19 +135,19 @@ class NewItemFieldsTest(unittest.TestCase):\n         i = TestItem()\n \n         i.field = True\n-        assert i.field is True\n+        self.assert_(i.field is True)\n     \n         i.field = 1\n-        assert i.field is True\n+        self.assert_(i.field is True)\n \n         i.field = False\n-        assert i.field is False\n+        self.assert_(i.field is False)\n \n         i.field = 0\n-        assert i.field is False\n+        self.assert_(i.field is False)\n \n         i.field = None\n-        assert i.field is False\n+        self.assert_(i.field is False)\n \n     def test_date_field(self):\n         class TestItem(Item):\n@@ -156,14 +157,14 @@ class NewItemFieldsTest(unittest.TestCase):\n \n         d_today = datetime.date.today()\n         i.field = d_today\n-        assert i.field == d_today\n+        self.assertEqual(i.field, d_today)\n \n         dt_today = datetime.datetime.today()\n         i.field = dt_today\n-        assert i.field == dt_today.date()\n+        self.assertEqual(i.field, dt_today.date())\n  \n         i.field = '2009-05-21'\n-        assert i.field == datetime.date(2009, 5, 21)\n+        self.assertEqual(i.field, datetime.date(2009, 5, 21))\n \n         def set_invalid_format():\n             i.field = '21-05-2009'\n@@ -185,24 +186,25 @@ class NewItemFieldsTest(unittest.TestCase):\n \n         dt_today = datetime.datetime.today()\n         i.field = dt_today\n-        assert i.field == dt_today\n+        self.assertEqual(i.field, dt_today)\n \n         d_today = datetime.date.today()\n         i.field = d_today\n-        assert i.field == datetime.datetime(d_today.year, d_today.month,\n-                                            d_today.day)\n+        self.assertEqual(i.field, datetime.datetime(d_today.year,\n+                                                    d_today.month, d_today.day))\n \n         i.field = '2009-05-21 11:08:10.100'\n-        assert i.field == datetime.datetime(2009, 5, 21, 11, 8, 10, 100)\n+        self.assertEqual(i.field, datetime.datetime(2009, 5, 21, 11, 8, 10,\n+                                                    100))\n  \n         i.field = '2009-05-21 11:08:10'\n-        assert i.field == datetime.datetime(2009, 5, 21, 11, 8, 10)\n+        self.assertEqual(i.field, datetime.datetime(2009, 5, 21, 11, 8, 10))\n \n         i.field = '2009-05-21 11:08'\n-        assert i.field == datetime.datetime(2009, 5, 21, 11, 8)\n+        self.assertEqual(i.field, datetime.datetime(2009, 5, 21, 11, 8))\n \n         i.field = '2009-05-21'\n-        assert i.field == datetime.datetime(2009, 5, 21)\n+        self.assertEqual(i.field, datetime.datetime(2009, 5, 21))\n \n         def set_invalid_usecs():\n             i.field = '2009-05-21 11:08:10.usecs'\n@@ -228,10 +230,10 @@ class NewItemFieldsTest(unittest.TestCase):\n         i = TestItem()\n \n         i.field = decimal.Decimal('3.14')\n-        assert i.field == decimal.Decimal('3.14')\n+        self.assertEqual(i.field, decimal.Decimal('3.14'))\n \n         i.field = '3.14'\n-        assert i.field == decimal.Decimal('3.14')\n+        self.assertEqual(i.field, decimal.Decimal('3.14'))\n         \n         def set_invalid_value():\n             i.field = 'text'\n@@ -247,10 +249,10 @@ class NewItemFieldsTest(unittest.TestCase):\n         i = TestItem()\n \n         i.field = 3.14\n-        assert i.field == 3.14\n+        self.assertEqual(i.field, 3.14)\n \n         i.field = '3.14'\n-        assert i.field == 3.14\n+        self.assertEqual(i.field, 3.14)\n         \n         def set_invalid_value():\n             i.field = 'text'\n@@ -266,10 +268,10 @@ class NewItemFieldsTest(unittest.TestCase):\n         i = TestItem()\n \n         i.field = 3\n-        assert i.field == 3\n+        self.assertEqual(i.field, 3)\n \n         i.field = '3'\n-        assert i.field == 3\n+        self.assertEqual(i.field, 3)\n \n         def set_invalid_value():\n             i.field = 'text'\n@@ -285,8 +287,8 @@ class NewItemFieldsTest(unittest.TestCase):\n         i = TestItem()\n \n         i.field = u'hello'\n-        assert i.field == u'hello'\n-        assert isinstance(i.field, unicode) \n+        self.assertEqual(i.field, u'hello')\n+        self.assert_(isinstance(i.field, unicode))\n \n         def set_str():\n             i.field = 'string'\n@@ -304,14 +306,14 @@ class NewItemFieldsTest(unittest.TestCase):\n         i = TestItem()\n         i.field = [u'hello', u'world']\n         self.assertEqual(i.field, u'hello world')\n-        assert isinstance(i.field, unicode)\n+        self.assert_(isinstance(i.field, unicode))\n \n         self.assertRaises(TypeError, setattr, i, 'field', [u'hello', 3, u'world']) \n         self.assertRaises(TypeError, setattr, i, 'field', [u'hello', 'world']) \n \n         i = TestItem()\n         i.field = []\n-        assert isinstance(i.field, unicode)\n+        self.assert_(isinstance(i.field, unicode))\n         self.assertEqual(i.field, '')\n \n     def test_time_field(self):\n@@ -322,22 +324,22 @@ class NewItemFieldsTest(unittest.TestCase):\n \n         dt_t = datetime.time(11, 8, 10, 100)\n         i.field = dt_t\n-        assert i.field == dt_t\n+        self.assertEqual(i.field, dt_t)\n \n         self.assertRaises(TypeError, setattr, i, 'field', None)\n \n         dt_dt = datetime.datetime.today()\n         i.field = dt_dt\n-        assert i.field == dt_dt.time\n+        self.assertEqual(i.field, dt_dt.time)\n \n         i.field = '11:08:10.100'\n-        assert i.field == datetime.time(11, 8, 10, 100)\n+        self.assertEqual(i.field, datetime.time(11, 8, 10, 100))\n  \n         i.field = '11:08:10'\n-        assert i.field == datetime.time(11, 8, 10)\n+        self.assertEqual(i.field, datetime.time(11, 8, 10))\n \n         i.field = '11:08'\n-        assert i.field == datetime.time(11, 8)\n+        self.assertEqual(i.field, datetime.time(11, 8))\n \n         def set_invalid_usecs():\n             i.field = '11:08:10.usecs'\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "scrapy#ac21b42f8c4d7df788351f97543fa6d70798e7bc", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 14 | Lines Deleted: 55 | Files Changed: 1 | Hunks: 16 | Methods Changed: 22 | Complexity Δ (Sum/Max): -14/0 | Churn Δ: 69 | Churn Cumulative: 609 | Contributors (this commit): 3 | Commits (past 90d): 15 | Contributors (cumulative): 3 | DMM Complexity: 0.0\n\nDIFF:\n@@ -46,15 +46,10 @@ class NewItemTest(unittest.TestCase):\n             pass\n \n         i = TestItem()\n-        def set_invalid_field():\n-            i.field = 'text'\n \n-        self.assertRaises(AttributeError, set_invalid_field)\n+        self.assertRaises(AttributeError, setattr, i, 'field', 'text')\n \n-        def get_invalid_field():\n-            return i.field\n-\n-        self.assertRaises(AttributeError, get_invalid_field)\n+        self.assertRaises(AttributeError, getattr, i, 'field')\n \n     def test_default_value(self):\n         class TestItem(Item):\n@@ -166,15 +161,9 @@ class NewItemFieldsTest(unittest.TestCase):\n         i.field = '2009-05-21'\n         self.assertEqual(i.field, datetime.date(2009, 5, 21))\n \n-        def set_invalid_format():\n-            i.field = '21-05-2009'\n+        self.assertRaises(ValueError, setattr, i, 'field', '21-05-2009')\n \n-        self.assertRaises(ValueError, set_invalid_format)\n-\n-        def set_invalid_date():\n-            i.field = '2009-05-51'\n-\n-        self.assertRaises(ValueError, set_invalid_date)\n+        self.assertRaises(ValueError, setattr, i, 'field', '2009-05-51')\n \n         self.assertRaises(TypeError, setattr, i, 'field', None)\n \n@@ -206,20 +195,11 @@ class NewItemFieldsTest(unittest.TestCase):\n         i.field = '2009-05-21'\n         self.assertEqual(i.field, datetime.datetime(2009, 5, 21))\n \n-        def set_invalid_usecs():\n-            i.field = '2009-05-21 11:08:10.usecs'\n+        self.assertRaises(ValueError, setattr, i, 'field', '2009-05-21 11:08:10.usecs')\n \n-        self.assertRaises(ValueError, set_invalid_usecs)\n+        self.assertRaises(ValueError, setattr, i, 'field', '21-05-2009')\n \n-        def set_invalid_format():\n-            i.field = '21-05-2009'\n-\n-        self.assertRaises(ValueError, set_invalid_format)\n-\n-        def set_invalid_date():\n-            i.field = '2009-05-51'\n-\n-        self.assertRaises(ValueError, set_invalid_date)\n+        self.assertRaises(ValueError, setattr, i, 'field', '2009-05-51')\n \n         self.assertRaises(TypeError, setattr, i, 'field', None)\n \n@@ -235,10 +215,7 @@ class NewItemFieldsTest(unittest.TestCase):\n         i.field = '3.14'\n         self.assertEqual(i.field, decimal.Decimal('3.14'))\n         \n-        def set_invalid_value():\n-            i.field = 'text'\n-\n-        self.assertRaises(decimal.InvalidOperation, set_invalid_value)\n+        self.assertRaises(decimal.InvalidOperation, setattr, i, 'field', 'text')\n \n         self.assertRaises(TypeError, setattr, i, 'field', None)\n \n@@ -254,10 +231,7 @@ class NewItemFieldsTest(unittest.TestCase):\n         i.field = '3.14'\n         self.assertEqual(i.field, 3.14)\n         \n-        def set_invalid_value():\n-            i.field = 'text'\n-\n-        self.assertRaises(ValueError, set_invalid_value)\n+        self.assertRaises(ValueError, setattr, i, 'field', 'text')\n \n         self.assertRaises(TypeError, setattr, i, 'field', None)\n \n@@ -273,10 +247,7 @@ class NewItemFieldsTest(unittest.TestCase):\n         i.field = '3'\n         self.assertEqual(i.field, 3)\n \n-        def set_invalid_value():\n-            i.field = 'text'\n-\n-        self.assertRaises(ValueError, set_invalid_value)\n+        self.assertRaises(ValueError, setattr, i, 'field', 'text')\n \n         self.assertRaises(TypeError, setattr, i, 'field', None)\n \n@@ -290,11 +261,8 @@ class NewItemFieldsTest(unittest.TestCase):\n         self.assertEqual(i.field, u'hello')\n         self.assert_(isinstance(i.field, unicode))\n \n-        def set_str():\n-            i.field = 'string'\n-\n         # must be unicode!\n-        self.assertRaises(TypeError, set_str)\n+        self.assertRaises(TypeError, setattr, i, 'field', 'string')\n \n         self.assertRaises(TypeError, setattr, i, 'field', None)\n \n@@ -341,18 +309,9 @@ class NewItemFieldsTest(unittest.TestCase):\n         i.field = '11:08'\n         self.assertEqual(i.field, datetime.time(11, 8))\n \n-        def set_invalid_usecs():\n-            i.field = '11:08:10.usecs'\n+        self.assertRaises(ValueError, setattr, i, 'field', '11:08:10.usecs')\n \n-        self.assertRaises(ValueError, set_invalid_usecs)\n+        self.assertRaises(ValueError, setattr, i, 'field', '25:08:10')\n \n-        def set_invalid_format():\n-            i.field = 'string'\n-\n-        self.assertRaises(ValueError, set_invalid_format)\n-\n-        def set_invalid_time():\n-            i.field = '25:08:10'\n-\n-        self.assertRaises(ValueError, set_invalid_time)\n+        self.assertRaises(ValueError, setattr, i, 'field', 'string')\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "scrapy#129b6e020370f39f1be2b2dc0ab8f96021757282", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 15 | Lines Deleted: 21 | Files Changed: 1 | Hunks: 13 | Methods Changed: 6 | Complexity Δ (Sum/Max): 30/30 | Churn Δ: 36 | Churn Cumulative: 36 | Contributors (this commit): 2 | Commits (past 90d): 2 | Contributors (cumulative): 2 | DMM Complexity: 0.0\n\nDIFF:\n@@ -1,3 +1,5 @@\n+\n+from scrapy.utils.misc import arg_to_iter\n from scrapy.utils.python import get_func_args\n \n \n@@ -31,14 +33,12 @@ class ItemAdaptorMeta(type):\n                     adaptor = adaptize(attrs[item_field])\n                     cls._field_adaptors[item_field] = adaptor\n                     setattr(cls, item_field, staticmethod(adaptor))\n-\n         return cls\n \n     def __getattr__(cls, name):\n         if name in cls.item_class.fields:\n             return cls.default_adaptor\n-\n-        raise AttributeError\n+        raise AttributeError(name)\n \n \n class ItemAdaptor(object):\n@@ -58,10 +58,7 @@ class ItemAdaptor(object):\n                 or name == 'default_adaptor'):\n             return object.__setattr__(self, name, value)\n \n-        try:\n-            fa = self._field_adaptors[name]\n-        except KeyError:\n-            fa = self.default_adaptor\n+        fa = self._field_adaptors.get(name, self.default_adaptor)\n \n         adaptor_args = {'response': self._response, 'item': self.item_instance}\n         ovalue = fa(value, adaptor_args=adaptor_args)\n@@ -75,7 +72,7 @@ class ItemAdaptor(object):\n         return getattr(self.item_instance, name)\n \n \n-def adaptor(*funcs, **adaptor_args):\n+def adaptor(*funcs, **default_adaptor_args):\n     \"\"\"A pipe adaptor implementing the tree adaption logic\n \n     It takes multiples unnamed arguments used as functions of the pipe, and\n@@ -87,32 +84,29 @@ def adaptor(*funcs, **adaptor_args):\n     Always returns a list of values\n     \"\"\"\n \n-    pipe_adaptor_args = adaptor_args\n     _funcs = []\n     for func in funcs:\n-        takes_args = 'adaptor_args' in get_func_args(func)\n-        _funcs.append((func, takes_args))\n+        accepts_args = 'adaptor_args' in get_func_args(func)\n+        _funcs.append((func, accepts_args))\n \n     def _adaptor(value, adaptor_args=None):\n-        values = value if isinstance(value, (list, tuple)) else [value]\n-        aargs = dict(t for d in [pipe_adaptor_args, adaptor_args or {}] for t in d.items())\n+        values = arg_to_iter(value)\n+        aargs = default_adaptor_args\n+        if adaptor_args:\n+            aargs = aargs.copy()\n+            aargs.update(adaptor_args)\n         pipe_kwargs = {'adaptor_args': aargs}\n-\n-        for func, takes_args in _funcs:\n+        for func, accepts_args in _funcs:\n             next = []\n-            kwargs = pipe_kwargs if takes_args else {}\n-\n+            kwargs = pipe_kwargs if accepts_args else {}\n             for val in values:\n                 val = func(val, **kwargs)\n-\n-                if isinstance(val, (list, tuple)):\n+                if hasattr(val, '__iter__'):\n                     next.extend(val)\n                 elif val is not None:\n                     next.append(val)\n-\n             values = next\n         return list(values)\n \n     return _adaptor\n \n-\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "scrapy#d59facd6e0c341da23ee0c601fce8d10192e0903", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 25 | Lines Deleted: 25 | Files Changed: 1 | Hunks: 13 | Methods Changed: 7 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 50 | Churn Cumulative: 60 | Contributors (this commit): 3 | Commits (past 90d): 3 | Contributors (cumulative): 3 | DMM Complexity: None\n\nDIFF:\n@@ -5,12 +5,12 @@ from scrapy.contrib_exp.newitem import Item, fields\n \n \n class BaseItem(Item):\n-    name = fields.StringField()\n+    name = fields.TextField()\n \n \n class TestItem(BaseItem):\n-    url = fields.StringField()\n-    summary = fields.StringField()\n+    url = fields.TextField()\n+    summary = fields.TextField()\n \n \n class BaseAdaptor(ItemAdaptor):\n@@ -30,7 +30,7 @@ class InheritDefaultAdaptor(DefaultedAdaptor):\n \n \n class MultiValuedTestItem(Item):\n-    names = fields.MultiValuedField(fields.StringField)\n+    names = fields.MultiValuedField(fields.TextField)\n \n \n class MultiValuedItemAdaptor(ItemAdaptor):\n@@ -43,20 +43,20 @@ class ItemAdaptorTest(unittest.TestCase):\n \n     def test_basic(self):\n         ia = TestAdaptor()\n-        ia.name = 'marta'\n-        self.assertEqual(ia.item_instance.name, 'Marta')\n-        self.assertEqual(ia.name, 'Marta')\n+        ia.name = u'marta'\n+        self.assertEqual(ia.item_instance.name, u'Marta')\n+        self.assertEqual(ia.name, u'Marta')\n \n     def test_defaultadaptor(self):\n         dta = DefaultedAdaptor()\n         assert dta.default_adaptor\n-        dta.name = 'marta'\n-        self.assertEqual(dta.name, 'mart')\n+        dta.name = u'marta'\n+        self.assertEqual(dta.name, u'mart')\n \n     def test_inheritdefaultadaptor(self):\n         ida = InheritDefaultAdaptor()\n-        ida.name = 'marta'\n-        assert ida.name == 'mart'\n+        ida.name = u'marta'\n+        assert ida.name == u'mart'\n \n     def test_inheritance(self):\n         class ChildTestAdaptor(TestAdaptor):\n@@ -66,11 +66,11 @@ class ItemAdaptorTest(unittest.TestCase):\n         assert 'url' in ia._field_adaptors\n         assert 'name' in ia._field_adaptors\n \n-        ia.url = 'HTTP://scrapy.ORG'\n-        self.assertEqual(ia.url, 'http://scrapy.org')\n+        ia.url = u'HTTP://scrapy.ORG'\n+        self.assertEqual(ia.url, u'http://scrapy.org')\n \n-        ia.name = 'marta'\n-        self.assertEqual(ia.name, 'Marta')\n+        ia.name = u'marta'\n+        self.assertEqual(ia.name, u'Marta')\n \n         class ChildChildTestAdaptor(ChildTestAdaptor):\n             url = lambda v: v.upper()\n@@ -81,32 +81,32 @@ class ItemAdaptorTest(unittest.TestCase):\n         assert 'name' in ia._field_adaptors\n         assert 'summary' in ia._field_adaptors\n \n-        ia.url = 'HTTP://scrapy.ORG'\n-        self.assertEqual(ia.url, 'HTTP://SCRAPY.ORG')\n+        ia.url = u'HTTP://scrapy.ORG'\n+        self.assertEqual(ia.url, u'HTTP://SCRAPY.ORG')\n \n-        ia.name = 'marta'\n-        self.assertEqual(ia.name, 'Marta')\n+        ia.name = u'marta'\n+        self.assertEqual(ia.name, u'Marta')\n \n     def test_staticmethods(self):\n         class ChildAdaptor(TestAdaptor):\n             name = adaptor(TestAdaptor.name, string.swapcase)\n \n         ia = ChildAdaptor()\n-        ia.name = 'Marta'\n-        self.assertEqual(ia.name, 'mARTA')\n+        ia.name = u'Marta'\n+        self.assertEqual(ia.name, u'mARTA')\n \n     def test_staticdefaults(self):\n         class ChildAdaptorDefaulted(DefaultedAdaptor):\n             name = adaptor(DefaultedAdaptor.name, string.swapcase)\n \n         dia = ChildAdaptorDefaulted()\n-        dia.name = 'marta'\n-        self.assertEqual(dia.name, 'MART')\n+        dia.name = u'marta'\n+        self.assertEqual(dia.name, u'MART')\n \n     def test_multiplevaluedadaptor(self):\n         ma = MultiValuedItemAdaptor()\n-        ma.names = ['name1', 'name2']\n-        assert ma.names == ['Name1', 'Name2']\n+        ma.names = [u'name1', u'name2']\n+        assert ma.names == [u'Name1', u'Name2']\n \n \n class TreeadaptTest(unittest.TestCase):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
