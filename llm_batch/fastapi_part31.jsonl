{"custom_id": "fastapi#65536cbf63318d111bf608960378d651b6c1596a", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 193 | Contributors (this commit): 1 | Commits (past 90d): 13 | Contributors (cumulative): 1 | DMM Complexity: None\n\nDIFF:\n@@ -1,6 +1,6 @@\n \"\"\"FastAPI framework, high performance, easy to learn, fast to code, ready for production\"\"\"\n \n-__version__ = \"0.41.0\"\n+__version__ = \"0.42.0\"\n \n from starlette.background import BackgroundTasks\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#8609beb9ab439b0b5a3c741d1d39b4dde336e1c3", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 15 | Lines Deleted: 8 | Files Changed: 5 | Hunks: 6 | Methods Changed: 5 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 23 | Churn Cumulative: 2303 | Contributors (this commit): 14 | Commits (past 90d): 15 | Contributors (cumulative): 25 | DMM Complexity: None\n\nDIFF:\n@@ -428,9 +428,13 @@ async def solve_dependencies(\n             dependency_overrides_provider=dependency_overrides_provider,\n             dependency_cache=dependency_cache,\n         )\n-        sub_values, sub_errors, background_tasks, sub_response, sub_dependency_cache = (\n-            solved_result\n-        )\n+        (\n+            sub_values,\n+            sub_errors,\n+            background_tasks,\n+            sub_response,\n+            sub_dependency_cache,\n+        ) = solved_result\n         sub_response = cast(Response, sub_response)\n         response.headers.raw.extend(sub_response.headers.raw)\n         if sub_response.status_code:\n@@ -476,7 +480,10 @@ async def solve_dependencies(\n     values.update(cookie_values)\n     errors += path_errors + query_errors + header_errors + cookie_errors\n     if dependant.body_params:\n-        body_values, body_errors = await request_body_to_args(  # body_params checked above\n+        (\n+            body_values,\n+            body_errors,\n+        ) = await request_body_to_args(  # body_params checked above\n             required_params=dependant.body_params, received_body=body\n         )\n         values.update(body_values)\n\n@@ -79,7 +79,7 @@ def get_openapi_security_definitions(flat_dependant: Dependant) -> Tuple[Dict, L\n \n \n def get_openapi_operation_parameters(\n-    all_route_params: Sequence[Field]\n+    all_route_params: Sequence[Field],\n ) -> List[Dict[str, Any]]:\n     parameters = []\n     for param in all_route_params:\n\n@@ -11,7 +11,7 @@ security = HTTPBase(scheme=\"Other\", auto_error=False)\n \n @app.get(\"/users/me\")\n def read_current_user(\n-    credentials: Optional[HTTPAuthorizationCredentials] = Security(security)\n+    credentials: Optional[HTTPAuthorizationCredentials] = Security(security),\n ):\n     if credentials is None:\n         return {\"msg\": \"Create an account first\"}\n\n@@ -11,7 +11,7 @@ security = HTTPBearer(auto_error=False)\n \n @app.get(\"/users/me\")\n def read_current_user(\n-    credentials: Optional[HTTPAuthorizationCredentials] = Security(security)\n+    credentials: Optional[HTTPAuthorizationCredentials] = Security(security),\n ):\n     if credentials is None:\n         return {\"msg\": \"Create an account first\"}\n\n@@ -11,7 +11,7 @@ security = HTTPDigest(auto_error=False)\n \n @app.get(\"/users/me\")\n def read_current_user(\n-    credentials: Optional[HTTPAuthorizationCredentials] = Security(security)\n+    credentials: Optional[HTTPAuthorizationCredentials] = Security(security),\n ):\n     if credentials is None:\n         return {\"msg\": \"Create an account first\"}\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#723ef07ccf0ab794c9b0f70c2280671fe6d4a34b", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 83 | Lines Deleted: 0 | Files Changed: 2 | Hunks: 2 | Methods Changed: 9 | Complexity Δ (Sum/Max): 9/5 | Churn Δ: 83 | Churn Cumulative: 83 | Contributors (this commit): 1 | Commits (past 90d): 2 | Contributors (cumulative): 2 | DMM Complexity: 1.0\n\nDIFF:\n@@ -0,0 +1,41 @@\n+from fastapi import FastAPI\n+from fastapi.openapi.docs import (\n+    get_redoc_html,\n+    get_swagger_ui_html,\n+    get_swagger_ui_oauth2_redirect_html,\n+)\n+from starlette.staticfiles import StaticFiles\n+\n+app = FastAPI(docs_url=None, redoc_url=None)\n+\n+app.mount(\"/static\", StaticFiles(directory=\"static\"), name=\"static\")\n+\n+\n+@app.get(\"/docs\", include_in_schema=False)\n+async def custom_swagger_ui_html():\n+    return get_swagger_ui_html(\n+        openapi_url=app.openapi_url,\n+        title=app.title + \" - Swagger UI\",\n+        oauth2_redirect_url=app.swagger_ui_oauth2_redirect_url,\n+        swagger_js_url=\"/static/swagger-ui-bundle.js\",\n+        swagger_css_url=\"/static/swagger-ui.css\",\n+    )\n+\n+\n+@app.get(app.swagger_ui_oauth2_redirect_url, include_in_schema=False)\n+async def swagger_ui_redirect():\n+    return get_swagger_ui_oauth2_redirect_html()\n+\n+\n+@app.get(\"/redoc\", include_in_schema=False)\n+async def redoc_html():\n+    return get_redoc_html(\n+        openapi_url=app.openapi_url,\n+        title=app.title + \" - ReDoc\",\n+        redoc_js_url=\"/static/redoc.standalone.js\",\n+    )\n+\n+\n+@app.get(\"/users/{username}\")\n+async def read_user(username: str):\n+    return {\"message\": f\"Hello {username}\"}\n\n@@ -0,0 +1,42 @@\n+import os\n+from pathlib import Path\n+\n+import pytest\n+from starlette.testclient import TestClient\n+\n+\n+@pytest.fixture(scope=\"module\")\n+def client():\n+    static_dir: Path = Path(os.getcwd()) / \"static\"\n+    print(static_dir)\n+    static_dir.mkdir(exist_ok=True)\n+    from extending_openapi.tutorial002 import app\n+\n+    with TestClient(app) as client:\n+        yield client\n+    static_dir.rmdir()\n+\n+\n+def test_swagger_ui_html(client: TestClient):\n+    response = client.get(\"/docs\")\n+    assert response.status_code == 200\n+    assert \"/static/swagger-ui-bundle.js\" in response.text\n+    assert \"/static/swagger-ui.css\" in response.text\n+\n+\n+def test_swagger_ui_oauth2_redirect_html(client: TestClient):\n+    response = client.get(\"/docs/oauth2-redirect\")\n+    assert response.status_code == 200\n+    assert \"window.opener.swaggerUIRedirectOauth2\" in response.text\n+\n+\n+def test_redoc_html(client: TestClient):\n+    response = client.get(\"/redoc\")\n+    assert response.status_code == 200\n+    assert \"/static/redoc.standalone.js\" in response.text\n+\n+\n+def test_api(client: TestClient):\n+    response = client.get(\"/users/john\")\n+    assert response.status_code == 200\n+    assert response.json()[\"message\"] == \"Hello john\"\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#c7902dd23a8a3cef93246be533ae5f2f952094bd", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 245 | Lines Deleted: 9 | Files Changed: 5 | Hunks: 11 | Methods Changed: 8 | Complexity Δ (Sum/Max): 8/3 | Churn Δ: 254 | Churn Cumulative: 4178 | Contributors (this commit): 18 | Commits (past 90d): 20 | Contributors (cumulative): 29 | DMM Complexity: 0.6666666666666666\n\nDIFF:\n@@ -1,2 +1,3 @@\n METHODS_WITH_BODY = set((\"POST\", \"PUT\", \"DELETE\", \"PATCH\"))\n+STATUS_CODES_WITH_NO_BODY = set((100, 101, 102, 103, 204, 304))\n REF_PREFIX = \"#/components/schemas/\"\n\n@@ -5,7 +5,11 @@ from fastapi import routing\n from fastapi.dependencies.models import Dependant\n from fastapi.dependencies.utils import get_flat_dependant\n from fastapi.encoders import jsonable_encoder\n-from fastapi.openapi.constants import METHODS_WITH_BODY, REF_PREFIX\n+from fastapi.openapi.constants import (\n+    METHODS_WITH_BODY,\n+    REF_PREFIX,\n+    STATUS_CODES_WITH_NO_BODY,\n+)\n from fastapi.openapi.models import OpenAPI\n from fastapi.params import Body, Param\n from fastapi.utils import (\n@@ -151,10 +155,8 @@ def get_openapi_path(\n     security_schemes: Dict[str, Any] = {}\n     definitions: Dict[str, Any] = {}\n     assert route.methods is not None, \"Methods must be a list\"\n-    assert (\n-        route.response_class and route.response_class.media_type\n-    ), \"A response class with media_type is needed to generate OpenAPI\"\n-    route_response_media_type: str = route.response_class.media_type\n+    assert route.response_class, \"A response class is needed to generate OpenAPI\"\n+    route_response_media_type: Optional[str] = route.response_class.media_type\n     if route.include_in_schema:\n         for method in route.methods:\n             operation = get_openapi_operation_metadata(route=route, method=method)\n@@ -189,7 +191,7 @@ def get_openapi_path(\n                             field, model_name_map=model_name_map, ref_prefix=REF_PREFIX\n                         )\n                         response.setdefault(\"content\", {}).setdefault(\n-                            route_response_media_type, {}\n+                            route_response_media_type or \"application/json\", {}\n                         )[\"schema\"] = response_schema\n                     status_text: Optional[str] = status_code_ranges.get(\n                         str(additional_status_code).upper()\n@@ -202,6 +204,13 @@ def get_openapi_path(\n                         status_code_key = \"default\"\n                     operation.setdefault(\"responses\", {})[status_code_key] = response\n             status_code = str(route.status_code)\n+            operation.setdefault(\"responses\", {}).setdefault(status_code, {})[\n+                \"description\"\n+            ] = route.response_description\n+            if (\n+                route_response_media_type\n+                and route.status_code not in STATUS_CODES_WITH_NO_BODY\n+            ):\n                 response_schema = {\"type\": \"string\"}\n                 if lenient_issubclass(route.response_class, JSONResponse):\n                     if route.response_field:\n@@ -212,9 +221,6 @@ def get_openapi_path(\n                         )\n                     else:\n                         response_schema = {}\n-            operation.setdefault(\"responses\", {}).setdefault(status_code, {})[\n-                \"description\"\n-            ] = route.response_description\n                 operation.setdefault(\"responses\", {}).setdefault(\n                     status_code, {}\n                 ).setdefault(\"content\", {}).setdefault(route_response_media_type, {})[\n\n@@ -13,6 +13,7 @@ from fastapi.dependencies.utils import (\n )\n from fastapi.encoders import DictIntStrAny, SetIntStr, jsonable_encoder\n from fastapi.exceptions import RequestValidationError, WebSocketRequestValidationError\n+from fastapi.openapi.constants import STATUS_CODES_WITH_NO_BODY\n from fastapi.utils import create_cloned_field, generate_operation_id_for_path\n from pydantic import BaseConfig, BaseModel, Schema\n from pydantic.error_wrappers import ErrorWrapper, ValidationError\n@@ -215,6 +216,9 @@ class APIRoute(routing.Route):\n         )\n         self.response_model = response_model\n         if self.response_model:\n+            assert (\n+                status_code not in STATUS_CODES_WITH_NO_BODY\n+            ), f\"Status code {status_code} must not have a response body\"\n             response_name = \"Response_\" + self.unique_id\n             self.response_field: Optional[Field] = Field(\n                 name=response_name,\n@@ -256,6 +260,9 @@ class APIRoute(routing.Route):\n             assert isinstance(response, dict), \"An additional response must be a dict\"\n             model = response.get(\"model\")\n             if model:\n+                assert (\n+                    additional_status_code not in STATUS_CODES_WITH_NO_BODY\n+                ), f\"Status code {additional_status_code} must not have a response body\"\n                 assert lenient_issubclass(\n                     model, BaseModel\n                 ), \"A response model must be a Pydantic model\"\n\n@@ -0,0 +1,114 @@\n+import typing\n+\n+from fastapi import FastAPI\n+from pydantic import BaseModel\n+from starlette.responses import JSONResponse, Response\n+from starlette.testclient import TestClient\n+\n+app = FastAPI()\n+\n+\n+class JsonApiResponse(JSONResponse):\n+    media_type = \"application/vnd.api+json\"\n+\n+\n+class Error(BaseModel):\n+    status: str\n+    title: str\n+\n+\n+class JsonApiError(BaseModel):\n+    errors: typing.List[Error]\n+\n+\n+@app.get(\n+    \"/a\",\n+    response_class=Response,\n+    responses={500: {\"description\": \"Error\", \"model\": JsonApiError}},\n+)\n+async def a():\n+    pass  # pragma: no cover\n+\n+\n+@app.get(\"/b\", responses={500: {\"description\": \"Error\", \"model\": Error}})\n+async def b():\n+    pass  # pragma: no cover\n+\n+\n+openapi_schema = {\n+    \"openapi\": \"3.0.2\",\n+    \"info\": {\"title\": \"Fast API\", \"version\": \"0.1.0\"},\n+    \"paths\": {\n+        \"/a\": {\n+            \"get\": {\n+                \"responses\": {\n+                    \"500\": {\n+                        \"description\": \"Error\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\"$ref\": \"#/components/schemas/JsonApiError\"}\n+                            }\n+                        },\n+                    },\n+                    \"200\": {\"description\": \"Successful Response\"},\n+                },\n+                \"summary\": \"A\",\n+                \"operationId\": \"a_a_get\",\n+            }\n+        },\n+        \"/b\": {\n+            \"get\": {\n+                \"responses\": {\n+                    \"500\": {\n+                        \"description\": \"Error\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\"$ref\": \"#/components/schemas/Error\"}\n+                            }\n+                        },\n+                    },\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                    },\n+                },\n+                \"summary\": \"B\",\n+                \"operationId\": \"b_b_get\",\n+            }\n+        },\n+    },\n+    \"components\": {\n+        \"schemas\": {\n+            \"Error\": {\n+                \"title\": \"Error\",\n+                \"required\": [\"status\", \"title\"],\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"status\": {\"title\": \"Status\", \"type\": \"string\"},\n+                    \"title\": {\"title\": \"Title\", \"type\": \"string\"},\n+                },\n+            },\n+            \"JsonApiError\": {\n+                \"title\": \"JsonApiError\",\n+                \"required\": [\"errors\"],\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"errors\": {\n+                        \"title\": \"Errors\",\n+                        \"type\": \"array\",\n+                        \"items\": {\"$ref\": \"#/components/schemas/Error\"},\n+                    }\n+                },\n+            },\n+        }\n+    },\n+}\n+\n+\n+client = TestClient(app)\n+\n+\n+def test_openapi_schema():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200\n+    assert response.json() == openapi_schema\n\n@@ -0,0 +1,108 @@\n+import typing\n+\n+from fastapi import FastAPI\n+from pydantic import BaseModel\n+from starlette.responses import JSONResponse\n+from starlette.testclient import TestClient\n+\n+app = FastAPI()\n+\n+\n+class JsonApiResponse(JSONResponse):\n+    media_type = \"application/vnd.api+json\"\n+\n+\n+class Error(BaseModel):\n+    status: str\n+    title: str\n+\n+\n+class JsonApiError(BaseModel):\n+    errors: typing.List[Error]\n+\n+\n+@app.get(\n+    \"/a\",\n+    status_code=204,\n+    response_class=JsonApiResponse,\n+    responses={500: {\"description\": \"Error\", \"model\": JsonApiError}},\n+)\n+async def a():\n+    pass  # pragma: no cover\n+\n+\n+@app.get(\"/b\", responses={204: {\"description\": \"No Content\"}})\n+async def b():\n+    pass  # pragma: no cover\n+\n+\n+openapi_schema = {\n+    \"openapi\": \"3.0.2\",\n+    \"info\": {\"title\": \"Fast API\", \"version\": \"0.1.0\"},\n+    \"paths\": {\n+        \"/a\": {\n+            \"get\": {\n+                \"responses\": {\n+                    \"500\": {\n+                        \"description\": \"Error\",\n+                        \"content\": {\n+                            \"application/vnd.api+json\": {\n+                                \"schema\": {\"$ref\": \"#/components/schemas/JsonApiError\"}\n+                            }\n+                        },\n+                    },\n+                    \"204\": {\"description\": \"Successful Response\"},\n+                },\n+                \"summary\": \"A\",\n+                \"operationId\": \"a_a_get\",\n+            }\n+        },\n+        \"/b\": {\n+            \"get\": {\n+                \"responses\": {\n+                    \"204\": {\"description\": \"No Content\"},\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                    },\n+                },\n+                \"summary\": \"B\",\n+                \"operationId\": \"b_b_get\",\n+            }\n+        },\n+    },\n+    \"components\": {\n+        \"schemas\": {\n+            \"Error\": {\n+                \"title\": \"Error\",\n+                \"required\": [\"status\", \"title\"],\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"status\": {\"title\": \"Status\", \"type\": \"string\"},\n+                    \"title\": {\"title\": \"Title\", \"type\": \"string\"},\n+                },\n+            },\n+            \"JsonApiError\": {\n+                \"title\": \"JsonApiError\",\n+                \"required\": [\"errors\"],\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"errors\": {\n+                        \"title\": \"Errors\",\n+                        \"type\": \"array\",\n+                        \"items\": {\"$ref\": \"#/components/schemas/Error\"},\n+                    }\n+                },\n+            },\n+        }\n+    },\n+}\n+\n+\n+client = TestClient(app)\n+\n+\n+def test_openapi_schema():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200\n+    assert response.json() == openapi_schema\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#4e50f534591d2a9c286a33e7eef5463b1fd8a1fd", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 3 | Files Changed: 1 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 5 | Churn Cumulative: 192 | Contributors (this commit): 6 | Commits (past 90d): 3 | Contributors (cumulative): 6 | DMM Complexity: 1.0\n\nDIFF:\n@@ -59,12 +59,11 @@ def create_cloned_field(field: Field) -> Field:\n     if lenient_issubclass(original_type, BaseModel):\n         original_type = cast(Type[BaseModel], original_type)\n         use_type = create_model(\n-            original_type.__name__,\n-            __config__=original_type.__config__,\n-            __validators__=original_type.__validators__,  # type: ignore\n+            original_type.__name__, __config__=original_type.__config__\n         )\n         for f in original_type.__fields__.values():\n             use_type.__fields__[f.name] = f\n+        use_type.__validators__ = original_type.__validators__\n     new_field = Field(\n         name=field.name,\n         type_=use_type,\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#bac2f587b77340a1a5967d3aeea7ce125ed0a0ec", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 180 | Lines Deleted: 120 | Files Changed: 6 | Hunks: 12 | Methods Changed: 8 | Complexity Δ (Sum/Max): 7/4 | Churn Δ: 300 | Churn Cumulative: 465 | Contributors (this commit): 3 | Commits (past 90d): 8 | Contributors (cumulative): 10 | DMM Complexity: 1.0\n\nDIFF:\n@@ -1,8 +1,24 @@\n from fastapi import FastAPI\n+from fastapi.routing import APIRoute\n \n app = FastAPI()\n \n \n-@app.get(\"/items/\", include_in_schema=False)\n+@app.get(\"/items/\")\n async def read_items():\n     return [{\"item_id\": \"Foo\"}]\n+\n+\n+def use_route_names_as_operation_ids(app: FastAPI) -> None:\n+    \"\"\"\n+    Simplify operation IDs so that generated API clients have simpler function\n+    names.\n+\n+    Should be called only after all routes have been added.\n+    \"\"\"\n+    for route in app.routes:\n+        if isinstance(route, APIRoute):\n+            route.operation_id = route.name  # in this case, 'read_items'\n+\n+\n+use_route_names_as_operation_ids(app)\n\n@@ -1,30 +1,8 @@\n-from typing import Set\n-\n from fastapi import FastAPI\n-from pydantic import BaseModel\n \n app = FastAPI()\n \n \n-class Item(BaseModel):\n-    name: str\n-    description: str = None\n-    price: float\n-    tax: float = None\n-    tags: Set[str] = []\n-\n-\n-@app.post(\"/items/\", response_model=Item, summary=\"Create an item\")\n-async def create_item(*, item: Item):\n-    \"\"\"\n-    Create an item with all the information:\n-\n-    - **name**: each item must have a name\n-    - **description**: a long description\n-    - **price**: required\n-    - **tax**: if the item doesn't have tax, you can omit this\n-    - **tags**: a set of unique tag strings for this item\n-    \\f\n-    :param item: User input.\n-    \"\"\"\n-    return item\n+@app.get(\"/items/\", include_in_schema=False)\n+async def read_items():\n+    return [{\"item_id\": \"Foo\"}]\n\n@@ -0,0 +1,30 @@\n+from typing import Set\n+\n+from fastapi import FastAPI\n+from pydantic import BaseModel\n+\n+app = FastAPI()\n+\n+\n+class Item(BaseModel):\n+    name: str\n+    description: str = None\n+    price: float\n+    tax: float = None\n+    tags: Set[str] = []\n+\n+\n+@app.post(\"/items/\", response_model=Item, summary=\"Create an item\")\n+async def create_item(*, item: Item):\n+    \"\"\"\n+    Create an item with all the information:\n+\n+    - **name**: each item must have a name\n+    - **description**: a long description\n+    - **price**: required\n+    - **tax**: if the item doesn't have tax, you can omit this\n+    - **tags**: a set of unique tag strings for this item\n+    \\f\n+    :param item: User input.\n+    \"\"\"\n+    return item\n\n@@ -7,7 +7,20 @@ client = TestClient(app)\n openapi_schema = {\n     \"openapi\": \"3.0.2\",\n     \"info\": {\"title\": \"Fast API\", \"version\": \"0.1.0\"},\n-    \"paths\": {},\n+    \"paths\": {\n+        \"/items/\": {\n+            \"get\": {\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                    }\n+                },\n+                \"summary\": \"Read Items\",\n+                \"operationId\": \"read_items\",\n+            }\n+        }\n+    },\n }\n \n \n\n@@ -7,90 +7,7 @@ client = TestClient(app)\n openapi_schema = {\n     \"openapi\": \"3.0.2\",\n     \"info\": {\"title\": \"Fast API\", \"version\": \"0.1.0\"},\n-    \"paths\": {\n-        \"/items/\": {\n-            \"post\": {\n-                \"responses\": {\n-                    \"200\": {\n-                        \"description\": \"Successful Response\",\n-                        \"content\": {\n-                            \"application/json\": {\n-                                \"schema\": {\"$ref\": \"#/components/schemas/Item\"}\n-                            }\n-                        },\n-                    },\n-                    \"422\": {\n-                        \"description\": \"Validation Error\",\n-                        \"content\": {\n-                            \"application/json\": {\n-                                \"schema\": {\n-                                    \"$ref\": \"#/components/schemas/HTTPValidationError\"\n-                                }\n-                            }\n-                        },\n-                    },\n-                },\n-                \"summary\": \"Create an item\",\n-                \"description\": \"Create an item with all the information:\\n\\n- **name**: each item must have a name\\n- **description**: a long description\\n- **price**: required\\n- **tax**: if the item doesn't have tax, you can omit this\\n- **tags**: a set of unique tag strings for this item\\n\",\n-                \"operationId\": \"create_item_items__post\",\n-                \"requestBody\": {\n-                    \"content\": {\n-                        \"application/json\": {\n-                            \"schema\": {\"$ref\": \"#/components/schemas/Item\"}\n-                        }\n-                    },\n-                    \"required\": True,\n-                },\n-            }\n-        }\n-    },\n-    \"components\": {\n-        \"schemas\": {\n-            \"Item\": {\n-                \"title\": \"Item\",\n-                \"required\": [\"name\", \"price\"],\n-                \"type\": \"object\",\n-                \"properties\": {\n-                    \"name\": {\"title\": \"Name\", \"type\": \"string\"},\n-                    \"price\": {\"title\": \"Price\", \"type\": \"number\"},\n-                    \"description\": {\"title\": \"Description\", \"type\": \"string\"},\n-                    \"tax\": {\"title\": \"Tax\", \"type\": \"number\"},\n-                    \"tags\": {\n-                        \"title\": \"Tags\",\n-                        \"uniqueItems\": True,\n-                        \"type\": \"array\",\n-                        \"items\": {\"type\": \"string\"},\n-                        \"default\": [],\n-                    },\n-                },\n-            },\n-            \"ValidationError\": {\n-                \"title\": \"ValidationError\",\n-                \"required\": [\"loc\", \"msg\", \"type\"],\n-                \"type\": \"object\",\n-                \"properties\": {\n-                    \"loc\": {\n-                        \"title\": \"Location\",\n-                        \"type\": \"array\",\n-                        \"items\": {\"type\": \"string\"},\n-                    },\n-                    \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n-                    \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n-                },\n-            },\n-            \"HTTPValidationError\": {\n-                \"title\": \"HTTPValidationError\",\n-                \"type\": \"object\",\n-                \"properties\": {\n-                    \"detail\": {\n-                        \"title\": \"Detail\",\n-                        \"type\": \"array\",\n-                        \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n-                    }\n-                },\n-            },\n-        }\n-    },\n+    \"paths\": {},\n }\n \n \n@@ -100,13 +17,7 @@ def test_openapi_schema():\n     assert response.json() == openapi_schema\n \n \n-def test_query_params_str_validations():\n-    response = client.post(\"/items/\", json={\"name\": \"Foo\", \"price\": 42})\n+def test_get():\n+    response = client.get(\"/items/\")\n     assert response.status_code == 200\n-    assert response.json() == {\n-        \"name\": \"Foo\",\n-        \"price\": 42,\n-        \"description\": None,\n-        \"tax\": None,\n-        \"tags\": [],\n-    }\n+    assert response.json() == [{\"item_id\": \"Foo\"}]\n\n@@ -0,0 +1,112 @@\n+from starlette.testclient import TestClient\n+\n+from path_operation_advanced_configuration.tutorial004 import app\n+\n+client = TestClient(app)\n+\n+openapi_schema = {\n+    \"openapi\": \"3.0.2\",\n+    \"info\": {\"title\": \"Fast API\", \"version\": \"0.1.0\"},\n+    \"paths\": {\n+        \"/items/\": {\n+            \"post\": {\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\"$ref\": \"#/components/schemas/Item\"}\n+                            }\n+                        },\n+                    },\n+                    \"422\": {\n+                        \"description\": \"Validation Error\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\n+                                    \"$ref\": \"#/components/schemas/HTTPValidationError\"\n+                                }\n+                            }\n+                        },\n+                    },\n+                },\n+                \"summary\": \"Create an item\",\n+                \"description\": \"Create an item with all the information:\\n\\n- **name**: each item must have a name\\n- **description**: a long description\\n- **price**: required\\n- **tax**: if the item doesn't have tax, you can omit this\\n- **tags**: a set of unique tag strings for this item\\n\",\n+                \"operationId\": \"create_item_items__post\",\n+                \"requestBody\": {\n+                    \"content\": {\n+                        \"application/json\": {\n+                            \"schema\": {\"$ref\": \"#/components/schemas/Item\"}\n+                        }\n+                    },\n+                    \"required\": True,\n+                },\n+            }\n+        }\n+    },\n+    \"components\": {\n+        \"schemas\": {\n+            \"Item\": {\n+                \"title\": \"Item\",\n+                \"required\": [\"name\", \"price\"],\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"name\": {\"title\": \"Name\", \"type\": \"string\"},\n+                    \"price\": {\"title\": \"Price\", \"type\": \"number\"},\n+                    \"description\": {\"title\": \"Description\", \"type\": \"string\"},\n+                    \"tax\": {\"title\": \"Tax\", \"type\": \"number\"},\n+                    \"tags\": {\n+                        \"title\": \"Tags\",\n+                        \"uniqueItems\": True,\n+                        \"type\": \"array\",\n+                        \"items\": {\"type\": \"string\"},\n+                        \"default\": [],\n+                    },\n+                },\n+            },\n+            \"ValidationError\": {\n+                \"title\": \"ValidationError\",\n+                \"required\": [\"loc\", \"msg\", \"type\"],\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"loc\": {\n+                        \"title\": \"Location\",\n+                        \"type\": \"array\",\n+                        \"items\": {\"type\": \"string\"},\n+                    },\n+                    \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n+                    \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n+                },\n+            },\n+            \"HTTPValidationError\": {\n+                \"title\": \"HTTPValidationError\",\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"detail\": {\n+                        \"title\": \"Detail\",\n+                        \"type\": \"array\",\n+                        \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n+                    }\n+                },\n+            },\n+        }\n+    },\n+}\n+\n+\n+def test_openapi_schema():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200\n+    assert response.json() == openapi_schema\n+\n+\n+def test_query_params_str_validations():\n+    response = client.post(\"/items/\", json={\"name\": \"Foo\", \"price\": 42})\n+    assert response.status_code == 200\n+    assert response.json() == {\n+        \"name\": \"Foo\",\n+        \"price\": 42,\n+        \"description\": None,\n+        \"tax\": None,\n+        \"tags\": [],\n+    }\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#90a5796b9435ca0c3d58166c9ba6c63682c1f7e8", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 195 | Contributors (this commit): 1 | Commits (past 90d): 8 | Contributors (cumulative): 1 | DMM Complexity: None\n\nDIFF:\n@@ -1,6 +1,6 @@\n \"\"\"FastAPI framework, high performance, easy to learn, fast to code, ready for production\"\"\"\n \n-__version__ = \"0.42.0\"\n+__version__ = \"0.43.0\"\n \n from starlette.background import BackgroundTasks\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#7781cc0936a7128865ae8065c145ff6b6f377e42", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 23 | Contributors (this commit): 2 | Commits (past 90d): 1 | Contributors (cumulative): 2 | DMM Complexity: None\n\nDIFF:\n@@ -6,8 +6,8 @@ app = FastAPI()\n origins = [\n     \"http://localhost.tiangolo.com\",\n     \"https://localhost.tiangolo.com\",\n-    \"http:localhost\",\n-    \"http:localhost:8080\",\n+    \"http://localhost\",\n+    \"http://localhost:8080\",\n ]\n \n app.add_middleware(\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#f3ddc7bdeb72f6899927a90f173a251764af618b", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 71 | Lines Deleted: 1 | Files Changed: 2 | Hunks: 2 | Methods Changed: 9 | Complexity Δ (Sum/Max): 9/9 | Churn Δ: 72 | Churn Cumulative: 1556 | Contributors (this commit): 9 | Commits (past 90d): 8 | Contributors (cumulative): 10 | DMM Complexity: 1.0\n\nDIFF:\n@@ -412,7 +412,7 @@ def add_param_to_fields(*, field: ModelField, dependant: Dependant) -> None:\n \n \n def is_coroutine_callable(call: Callable) -> bool:\n-    if inspect.isfunction(call):\n+    if inspect.isroutine(call):\n         return asyncio.iscoroutinefunction(call)\n     if inspect.isclass(call):\n         return False\n\n@@ -0,0 +1,70 @@\n+import pytest\n+from fastapi import Depends, FastAPI\n+from starlette.testclient import TestClient\n+\n+app = FastAPI()\n+\n+\n+class CallableDependency:\n+    def __call__(self, value: str) -> str:\n+        return value\n+\n+\n+class AsyncCallableDependency:\n+    async def __call__(self, value: str) -> str:\n+        return value\n+\n+\n+class MethodsDependency:\n+    def synchronous(self, value: str) -> str:\n+        return value\n+\n+    async def asynchronous(self, value: str) -> str:\n+        return value\n+\n+\n+callable_dependency = CallableDependency()\n+async_callable_dependency = AsyncCallableDependency()\n+methods_dependency = MethodsDependency()\n+\n+\n+@app.get(\"/callable-dependency\")\n+async def get_callable_dependency(value: str = Depends(callable_dependency)):\n+    return value\n+\n+\n+@app.get(\"/async-callable-dependency\")\n+async def get_callable_dependency(value: str = Depends(async_callable_dependency)):\n+    return value\n+\n+\n+@app.get(\"/synchronous-method-dependency\")\n+async def get_synchronous_method_dependency(\n+    value: str = Depends(methods_dependency.synchronous),\n+):\n+    return value\n+\n+\n+@app.get(\"/asynchronous-method-dependency\")\n+async def get_asynchronous_method_dependency(\n+    value: str = Depends(methods_dependency.asynchronous),\n+):\n+    return value\n+\n+\n+client = TestClient(app)\n+\n+\n+@pytest.mark.parametrize(\n+    \"route,value\",\n+    [\n+        (\"/callable-dependency\", \"callable-dependency\"),\n+        (\"/async-callable-dependency\", \"async-callable-dependency\"),\n+        (\"/synchronous-method-dependency\", \"synchronous-method-dependency\"),\n+        (\"/asynchronous-method-dependency\", \"asynchronous-method-dependency\"),\n+    ],\n+)\n+def test_class_dependency(route, value):\n+    response = client.get(route, params={\"value\": value})\n+    assert response.status_code == 200\n+    assert response.json() == value\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#4915cf0561bf792a89fd329af453eafb0158d8d4", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 3 | Files Changed: 1 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 5 | Churn Cumulative: 25 | Contributors (this commit): 2 | Commits (past 90d): 1 | Contributors (cumulative): 2 | DMM Complexity: 0.0\n\nDIFF:\n@@ -6,12 +6,11 @@ app = FastAPI()\n \n @app.get(\"/legacy/\")\n def get_legacy_data():\n-    data = \"\"\"\n-    <?xml version=\"1.0\"?>\n+    data = \"\"\"<?xml version=\"1.0\"?>\n     <shampoo>\n     <Header>\n         Apply shampoo here.\n-    <Header>\n+    </Header>\n     <Body>\n         You'll have to use soap here.\n     </Body>\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#e04bae22860e53e8c08f2c1cd476b8a7aa5b9b12", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 18 | Lines Deleted: 1 | Files Changed: 2 | Hunks: 2 | Methods Changed: 2 | Complexity Δ (Sum/Max): 2/1 | Churn Δ: 19 | Churn Cumulative: 452 | Contributors (this commit): 5 | Commits (past 90d): 5 | Contributors (cumulative): 8 | DMM Complexity: 0.8333333333333334\n\nDIFF:\n@@ -32,7 +32,9 @@ def jsonable_encoder(\n     if exclude is not None and not isinstance(exclude, set):\n         exclude = set(exclude)\n     if isinstance(obj, BaseModel):\n-        encoder = getattr(obj.Config, \"json_encoders\", custom_encoder)\n+        encoder = getattr(obj.Config, \"json_encoders\", {})\n+        if custom_encoder:\n+            encoder.update(custom_encoder)\n         if PYDANTIC_1:\n             obj_dict = obj.dict(\n                 include=include,\n\n@@ -105,3 +105,18 @@ def test_encode_model_with_alias_raises():\n def test_encode_model_with_alias():\n     model = ModelWithAlias(Foo=\"Bar\")\n     assert jsonable_encoder(model) == {\"Foo\": \"Bar\"}\n+\n+\n+def test_custom_encoders():\n+    class safe_datetime(datetime):\n+        pass\n+\n+    class MyModel(BaseModel):\n+        dt_field: safe_datetime\n+\n+    instance = MyModel(dt_field=safe_datetime.now())\n+\n+    encoded_instance = jsonable_encoder(\n+        instance, custom_encoder={safe_datetime: lambda o: o.isoformat()}\n+    )\n+    assert encoded_instance[\"dt_field\"] == instance.dt_field.isoformat()\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#cc4c13e4ae3f65fc76c23962b316df4a60e0c7e0", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 197 | Contributors (this commit): 1 | Commits (past 90d): 9 | Contributors (cumulative): 1 | DMM Complexity: None\n\nDIFF:\n@@ -1,6 +1,6 @@\n \"\"\"FastAPI framework, high performance, easy to learn, fast to code, ready for production\"\"\"\n \n-__version__ = \"0.43.0\"\n+__version__ = \"0.44.0\"\n \n from starlette.background import BackgroundTasks\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#19c77e35bdde33aeec1eb2cfa680f95016492b69", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 29 | Lines Deleted: 9 | Files Changed: 2 | Hunks: 10 | Methods Changed: 4 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 38 | Churn Cumulative: 206 | Contributors (this commit): 2 | Commits (past 90d): 2 | Contributors (cumulative): 4 | DMM Complexity: 1.0\n\nDIFF:\n@@ -1,3 +1,4 @@\n+from fastapi.encoders import jsonable_encoder\n from fastapi.exceptions import RequestValidationError\n from starlette.exceptions import HTTPException\n from starlette.requests import Request\n@@ -19,5 +20,6 @@ async def request_validation_exception_handler(\n     request: Request, exc: RequestValidationError\n ) -> JSONResponse:\n     return JSONResponse(\n-        status_code=HTTP_422_UNPROCESSABLE_ENTITY, content={\"detail\": exc.errors()}\n+        status_code=HTTP_422_UNPROCESSABLE_ENTITY,\n+        content={\"detail\": jsonable_encoder(exc.errors())},\n     )\n\n@@ -1,7 +1,8 @@\n+from decimal import Decimal\n from typing import List\n \n from fastapi import FastAPI\n-from pydantic import BaseModel\n+from pydantic import BaseModel, condecimal\n from starlette.testclient import TestClient\n \n app = FastAPI()\n@@ -9,7 +10,7 @@ app = FastAPI()\n \n class Item(BaseModel):\n     name: str\n-    age: int\n+    age: condecimal(gt=Decimal(0.0))\n \n \n @app.post(\"/items/\")\n@@ -67,7 +68,7 @@ openapi_schema = {\n                 \"type\": \"object\",\n                 \"properties\": {\n                     \"name\": {\"title\": \"Name\", \"type\": \"string\"},\n-                    \"age\": {\"title\": \"Age\", \"type\": \"integer\"},\n+                    \"age\": {\"title\": \"Age\", \"exclusiveMinimum\": 0.0, \"type\": \"number\"},\n                 },\n             },\n             \"ValidationError\": {\n@@ -99,6 +100,17 @@ openapi_schema = {\n     },\n }\n \n+single_error = {\n+    \"detail\": [\n+        {\n+            \"ctx\": {\"limit_value\": 0.0},\n+            \"loc\": [\"body\", \"item\", 0, \"age\"],\n+            \"msg\": \"ensure this value is greater than 0\",\n+            \"type\": \"value_error.number.not_gt\",\n+        }\n+    ]\n+}\n+\n multiple_errors = {\n     \"detail\": [\n         {\n@@ -108,8 +120,8 @@ multiple_errors = {\n         },\n         {\n             \"loc\": [\"body\", \"item\", 0, \"age\"],\n-            \"msg\": \"value is not a valid integer\",\n-            \"type\": \"type_error.integer\",\n+            \"msg\": \"value is not a valid decimal\",\n+            \"type\": \"type_error.decimal\",\n         },\n         {\n             \"loc\": [\"body\", \"item\", 1, \"name\"],\n@@ -118,8 +130,8 @@ multiple_errors = {\n         },\n         {\n             \"loc\": [\"body\", \"item\", 1, \"age\"],\n-            \"msg\": \"value is not a valid integer\",\n-            \"type\": \"type_error.integer\",\n+            \"msg\": \"value is not a valid decimal\",\n+            \"type\": \"type_error.decimal\",\n         },\n     ]\n }\n@@ -137,7 +149,13 @@ def test_put_correct_body():\n     assert response.json() == {\"item\": [{\"name\": \"Foo\", \"age\": 5}]}\n \n \n-def test_put_incorrect_body():\n+def test_jsonable_encoder_requiring_error():\n+    response = client.post(\"/items/\", json=[{\"name\": \"Foo\", \"age\": -1.0}])\n+    assert response.status_code == 422\n+    assert response.json() == single_error\n+\n+\n+def test_put_incorrect_body_multiple():\n     response = client.post(\"/items/\", json=[{\"age\": \"five\"}, {\"age\": \"six\"}])\n     assert response.status_code == 422\n     assert response.json() == multiple_errors\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#90236c813550030040474a7714428cf1fcc4f582", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 199 | Contributors (this commit): 1 | Commits (past 90d): 7 | Contributors (cumulative): 1 | DMM Complexity: None\n\nDIFF:\n@@ -1,6 +1,6 @@\n \"\"\"FastAPI framework, high performance, easy to learn, fast to code, ready for production\"\"\"\n \n-__version__ = \"0.44.0\"\n+__version__ = \"0.44.1\"\n \n from starlette.background import BackgroundTasks\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#3f5f81bbdc37a7d9544b4c4dadda7c964faebd44", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 4 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 2/2 | Churn Δ: 2 | Churn Cumulative: 2 | Contributors (this commit): 1 | Commits (past 90d): 4 | Contributors (cumulative): 4 | DMM Complexity: None\n\nDIFF:\n\n\n\n@@ -1,7 +1,7 @@\n import pytest\n from starlette.testclient import TestClient\n \n-from body_schema.tutorial001 import app\n+from body_fields.tutorial001 import app\n \n # TODO: remove when removing support for Pydantic < 1.0.0\n try:\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#83d04df8a6f87abe2b849a510b4c0e36170e653e", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 19 | Lines Deleted: 17 | Files Changed: 5 | Hunks: 14 | Methods Changed: 4 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 36 | Churn Cumulative: 4471 | Contributors (this commit): 16 | Commits (past 90d): 18 | Contributors (cumulative): 29 | DMM Complexity: None\n\nDIFF:\n@@ -2,7 +2,8 @@ from enum import Enum\n from types import GeneratorType\n from typing import Any, Dict, List, Set, Union\n \n-from fastapi.utils import PYDANTIC_1, logger\n+from fastapi.logger import logger\n+from fastapi.utils import PYDANTIC_1\n from pydantic import BaseModel\n from pydantic.json import ENCODERS_BY_TYPE\n \n@@ -23,9 +24,9 @@ def jsonable_encoder(\n ) -> Any:\n     if skip_defaults is not None:\n         logger.warning(  # pragma: nocover\n-            \"skip_defaults in jsonable_encoder has been deprecated in \\\n-            favor of exclude_unset to keep in line with Pydantic v1, support for it \\\n-                will be removed soon.\"\n+            \"skip_defaults in jsonable_encoder has been deprecated in favor of \"\n+            \"exclude_unset to keep in line with Pydantic v1, support for it will be \"\n+            \"removed soon.\"\n         )\n     if include is not None and not isinstance(include, set):\n         include = set(include)\n\n@@ -0,0 +1,3 @@\n+import logging\n+\n+logger = logging.getLogger(\"fastapi\")\n\n@@ -1,7 +1,7 @@\n from enum import Enum\n from typing import Any, Dict, List, Optional, Union\n \n-from fastapi.utils import logger\n+from fastapi.logger import logger\n from pydantic import BaseModel\n \n try:\n@@ -21,9 +21,9 @@ try:\n         # TODO: remove when removing support for Pydantic < 1.0.0\n         from pydantic.types import EmailStr  # type: ignore\n except ImportError:  # pragma: no cover\n-    logger.warning(\n+    logger.info(\n         \"email-validator not installed, email fields will be treated as str.\\n\"\n-        + \"To install, run: pip install email-validator\"\n+        \"To install, run: pip install email-validator\"\n     )\n \n     class EmailStr(str):  # type: ignore\n\n@@ -1,6 +1,5 @@\n import asyncio\n import inspect\n-import logging\n from typing import Any, Callable, Dict, List, Optional, Sequence, Set, Type, Union\n \n from fastapi import params\n@@ -13,6 +12,7 @@ from fastapi.dependencies.utils import (\n )\n from fastapi.encoders import DictIntStrAny, SetIntStr, jsonable_encoder\n from fastapi.exceptions import RequestValidationError, WebSocketRequestValidationError\n+from fastapi.logger import logger\n from fastapi.openapi.constants import STATUS_CODES_WITH_NO_BODY\n from fastapi.utils import (\n     PYDANTIC_1,\n@@ -108,7 +108,7 @@ def get_request_handler(\n                     if body_bytes:\n                         body = await request.json()\n         except Exception as e:\n-            logging.error(f\"Error getting request body: {e}\")\n+            logger.error(f\"Error getting request body: {e}\")\n             raise HTTPException(\n                 status_code=400, detail=\"There was an error parsing the body\"\n             ) from e\n\n@@ -1,17 +1,15 @@\n-import logging\n import re\n from dataclasses import is_dataclass\n from typing import Any, Dict, List, Sequence, Set, Type, cast\n \n from fastapi import routing\n+from fastapi.logger import logger\n from fastapi.openapi.constants import REF_PREFIX\n from pydantic import BaseConfig, BaseModel, create_model\n from pydantic.schema import get_flat_models_from_fields, model_process_schema\n from pydantic.utils import lenient_issubclass\n from starlette.routing import BaseRoute\n \n-logger = logging.getLogger(\"fastapi\")\n-\n try:\n     from pydantic.fields import FieldInfo, ModelField\n \n@@ -22,8 +20,8 @@ except ImportError:  # pragma: nocover\n     from pydantic import Schema as FieldInfo  # type: ignore\n \n     logger.warning(\n-        \"Pydantic versions < 1.0.0 are deprecated in FastAPI and support will be \\\n-            removed soon\"\n+        \"Pydantic versions < 1.0.0 are deprecated in FastAPI and support will be \"\n+        \"removed soon.\"\n     )\n     PYDANTIC_1 = False\n \n@@ -39,9 +37,9 @@ def get_field_info(field: ModelField) -> FieldInfo:\n # TODO: remove when removing support for Pydantic < 1.0.0\n def warning_response_model_skip_defaults_deprecated() -> None:\n     logger.warning(  # pragma: nocover\n-        \"response_model_skip_defaults has been deprecated in favor \\\n-                of response_model_exclude_unset to keep in line with Pydantic v1, \\\n-                support for it will be removed soon.\"\n+        \"response_model_skip_defaults has been deprecated in favor of \"\n+        \"response_model_exclude_unset to keep in line with Pydantic v1, support for \"\n+        \"it will be removed soon.\"\n     )\n \n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
