{"custom_id": "fastapi#181a32236a32305788b87d10e7990d9564ae2056", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 56 | Lines Deleted: 30 | Files Changed: 4 | Hunks: 6 | Methods Changed: 2 | Complexity Δ (Sum/Max): 7/5 | Churn Δ: 86 | Churn Cumulative: 1819 | Contributors (this commit): 24 | Commits (past 90d): 15 | Contributors (cumulative): 35 | DMM Complexity: 0.4166666666666667\n\nDIFF:\n@@ -14,6 +14,7 @@ from fastapi.openapi.constants import (\n from fastapi.openapi.models import OpenAPI\n from fastapi.params import Body, Param\n from fastapi.utils import (\n+    deep_dict_update,\n     generate_operation_id_for_path,\n     get_field_info,\n     get_model_definitions,\n@@ -201,33 +202,6 @@ def get_openapi_path(\n                     )\n                     callbacks[callback.name] = {callback.path: cb_path}\n                 operation[\"callbacks\"] = callbacks\n-            if route.responses:\n-                for (additional_status_code, response) in route.responses.items():\n-                    process_response = response.copy()\n-                    assert isinstance(\n-                        process_response, dict\n-                    ), \"An additional response must be a dict\"\n-                    field = route.response_fields.get(additional_status_code)\n-                    if field:\n-                        response_schema, _, _ = field_schema(\n-                            field, model_name_map=model_name_map, ref_prefix=REF_PREFIX\n-                        )\n-                        process_response.setdefault(\"content\", {}).setdefault(\n-                            route_response_media_type or \"application/json\", {}\n-                        )[\"schema\"] = response_schema\n-                    status_text: Optional[str] = status_code_ranges.get(\n-                        str(additional_status_code).upper()\n-                    ) or http.client.responses.get(int(additional_status_code))\n-                    process_response.setdefault(\n-                        \"description\", status_text or \"Additional Response\"\n-                    )\n-                    status_code_key = str(additional_status_code).upper()\n-                    if status_code_key == \"DEFAULT\":\n-                        status_code_key = \"default\"\n-                    process_response.pop(\"model\", None)\n-                    operation.setdefault(\"responses\", {})[\n-                        status_code_key\n-                    ] = process_response\n             status_code = str(route.status_code)\n             operation.setdefault(\"responses\", {}).setdefault(status_code, {})[\n                 \"description\"\n@@ -251,7 +225,47 @@ def get_openapi_path(\n                 ).setdefault(\"content\", {}).setdefault(route_response_media_type, {})[\n                     \"schema\"\n                 ] = response_schema\n-\n+            if route.responses:\n+                operation_responses = operation.setdefault(\"responses\", {})\n+                for (\n+                    additional_status_code,\n+                    additional_response,\n+                ) in route.responses.items():\n+                    process_response = additional_response.copy()\n+                    process_response.pop(\"model\", None)\n+                    status_code_key = str(additional_status_code).upper()\n+                    if status_code_key == \"DEFAULT\":\n+                        status_code_key = \"default\"\n+                    openapi_response = operation_responses.setdefault(\n+                        status_code_key, {}\n+                    )\n+                    assert isinstance(\n+                        process_response, dict\n+                    ), \"An additional response must be a dict\"\n+                    field = route.response_fields.get(additional_status_code)\n+                    additional_field_schema: Optional[Dict[str, Any]] = None\n+                    if field:\n+                        additional_field_schema, _, _ = field_schema(\n+                            field, model_name_map=model_name_map, ref_prefix=REF_PREFIX\n+                        )\n+                        media_type = route_response_media_type or \"application/json\"\n+                        additional_schema = (\n+                            process_response.setdefault(\"content\", {})\n+                            .setdefault(media_type, {})\n+                            .setdefault(\"schema\", {})\n+                        )\n+                        deep_dict_update(additional_schema, additional_field_schema)\n+                    status_text: Optional[str] = status_code_ranges.get(\n+                        str(additional_status_code).upper()\n+                    ) or http.client.responses.get(int(additional_status_code))\n+                    description = (\n+                        process_response.get(\"description\")\n+                        or openapi_response.get(\"description\")\n+                        or status_text\n+                        or \"Additional Response\"\n+                    )\n+                    deep_dict_update(openapi_response, process_response)\n+                    openapi_response[\"description\"] = description\n             http422 = str(HTTP_422_UNPROCESSABLE_ENTITY)\n             if (all_route_params or route.body_field) and not any(\n                 [\n\n@@ -172,3 +172,15 @@ def generate_operation_id_for_path(*, name: str, path: str, method: str) -> str:\n     operation_id = re.sub(\"[^0-9a-zA-Z_]\", \"_\", operation_id)\n     operation_id = operation_id + \"_\" + method.lower()\n     return operation_id\n+\n+\n+def deep_dict_update(main_dict: dict, update_dict: dict) -> None:\n+    for key in update_dict:\n+        if (\n+            key in main_dict\n+            and isinstance(main_dict[key], dict)\n+            and isinstance(update_dict[key], dict)\n+        ):\n+            deep_dict_update(main_dict[key], update_dict[key])\n+        else:\n+            main_dict[key] = update_dict[key]\n\n@@ -15,7 +15,7 @@ openapi_schema = {\n             \"get\": {\n                 \"responses\": {\n                     \"200\": {\n-                        \"description\": \"Successful Response\",\n+                        \"description\": \"Return the JSON item or an image.\",\n                         \"content\": {\n                             \"image/png\": {},\n                             \"application/json\": {\n\n@@ -20,7 +20,7 @@ openapi_schema = {\n                         },\n                     },\n                     \"200\": {\n-                        \"description\": \"Successful Response\",\n+                        \"description\": \"Item requested by ID\",\n                         \"content\": {\n                             \"application/json\": {\n                                 \"schema\": {\"$ref\": \"#/components/schemas/Item\"},\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#b87072bc1296a26d982207935b23ef67323a238e", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 251 | Contributors (this commit): 1 | Commits (past 90d): 12 | Contributors (cumulative): 1 | DMM Complexity: None\n\nDIFF:\n@@ -1,6 +1,6 @@\n \"\"\"FastAPI framework, high performance, easy to learn, fast to code, ready for production\"\"\"\n \n-__version__ = \"0.57.0\"\n+__version__ = \"0.58.0\"\n \n from starlette import status\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#e5594e860f34c939d530640b1c240ed7f64003b1", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 389 | Lines Deleted: 9 | Files Changed: 3 | Hunks: 13 | Methods Changed: 24 | Complexity Δ (Sum/Max): 20/19 | Churn Δ: 398 | Churn Cumulative: 3981 | Contributors (this commit): 24 | Commits (past 90d): 10 | Contributors (cumulative): 26 | DMM Complexity: 1.0\n\nDIFF:\n@@ -52,7 +52,6 @@ except ImportError:  # pragma: nocover\n def _prepare_response_content(\n     res: Any,\n     *,\n-    by_alias: bool = True,\n     exclude_unset: bool,\n     exclude_defaults: bool = False,\n     exclude_none: bool = False,\n@@ -60,14 +59,14 @@ def _prepare_response_content(\n     if isinstance(res, BaseModel):\n         if PYDANTIC_1:\n             return res.dict(\n-                by_alias=by_alias,\n+                by_alias=True,\n                 exclude_unset=exclude_unset,\n                 exclude_defaults=exclude_defaults,\n                 exclude_none=exclude_none,\n             )\n         else:\n             return res.dict(\n-                by_alias=by_alias, skip_defaults=exclude_unset,\n+                by_alias=True, skip_defaults=exclude_unset,\n             )  # pragma: nocover\n     elif isinstance(res, list):\n         return [\n@@ -108,7 +107,6 @@ async def serialize_response(\n         errors = []\n         response_content = _prepare_response_content(\n             response_content,\n-            by_alias=by_alias,\n             exclude_unset=exclude_unset,\n             exclude_defaults=exclude_defaults,\n             exclude_none=exclude_none,\n\n@@ -1,23 +1,82 @@\n from fastapi import FastAPI\n+from fastapi.testclient import TestClient\n from pydantic import BaseModel\n \n-\n-def test_get_openapi():\n app = FastAPI()\n \n+\n class Model(BaseModel):\n     pass\n \n+\n class Model2(BaseModel):\n     a: Model\n \n+\n class Model3(BaseModel):\n     c: Model\n     d: Model2\n \n+\n @app.get(\"/\", response_model=Model3)\n def f():\n-        pass  # pragma: no cover\n+    return {\"c\": {}, \"d\": {\"a\": {}}}\n \n-    openapi = app.openapi()\n-    assert isinstance(openapi, dict)\n+\n+openapi_schema = {\n+    \"openapi\": \"3.0.2\",\n+    \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n+    \"paths\": {\n+        \"/\": {\n+            \"get\": {\n+                \"summary\": \"F\",\n+                \"operationId\": \"f__get\",\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\"$ref\": \"#/components/schemas/Model3\"}\n+                            }\n+                        },\n+                    }\n+                },\n+            }\n+        }\n+    },\n+    \"components\": {\n+        \"schemas\": {\n+            \"Model\": {\"title\": \"Model\", \"type\": \"object\", \"properties\": {}},\n+            \"Model2\": {\n+                \"title\": \"Model2\",\n+                \"required\": [\"a\"],\n+                \"type\": \"object\",\n+                \"properties\": {\"a\": {\"$ref\": \"#/components/schemas/Model\"}},\n+            },\n+            \"Model3\": {\n+                \"title\": \"Model3\",\n+                \"required\": [\"c\", \"d\"],\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"c\": {\"$ref\": \"#/components/schemas/Model\"},\n+                    \"d\": {\"$ref\": \"#/components/schemas/Model2\"},\n+                },\n+            },\n+        }\n+    },\n+}\n+\n+\n+client = TestClient(app)\n+\n+\n+def test_openapi_schema():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == openapi_schema\n+\n+\n+def test_get_api_route():\n+    response = client.get(\"/\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\"c\": {}, \"d\": {\"a\": {}}}\n\n@@ -0,0 +1,323 @@\n+from typing import List\n+\n+from fastapi import FastAPI\n+from fastapi.testclient import TestClient\n+from pydantic import BaseModel, Field\n+\n+app = FastAPI()\n+\n+\n+class Model(BaseModel):\n+    name: str = Field(alias=\"alias\")\n+\n+\n+class ModelNoAlias(BaseModel):\n+    name: str\n+\n+    class Config:\n+        schema_extra = {\n+            \"description\": (\n+                \"response_model_by_alias=False is basically a quick hack, to support \"\n+                \"proper OpenAPI use another model with the correct field names\"\n+            )\n+        }\n+\n+\n+@app.get(\"/dict\", response_model=Model, response_model_by_alias=False)\n+def read_dict():\n+    return {\"alias\": \"Foo\"}\n+\n+\n+@app.get(\"/model\", response_model=Model, response_model_by_alias=False)\n+def read_model():\n+    return Model(alias=\"Foo\")\n+\n+\n+@app.get(\"/list\", response_model=List[Model], response_model_by_alias=False)\n+def read_list():\n+    return [{\"alias\": \"Foo\"}, {\"alias\": \"Bar\"}]\n+\n+\n+@app.get(\"/by-alias/dict\", response_model=Model)\n+def by_alias_dict():\n+    return {\"alias\": \"Foo\"}\n+\n+\n+@app.get(\"/by-alias/model\", response_model=Model)\n+def by_alias_model():\n+    return Model(alias=\"Foo\")\n+\n+\n+@app.get(\"/by-alias/list\", response_model=List[Model])\n+def by_alias_list():\n+    return [{\"alias\": \"Foo\"}, {\"alias\": \"Bar\"}]\n+\n+\n+@app.get(\"/no-alias/dict\", response_model=ModelNoAlias)\n+def by_alias_dict():\n+    return {\"name\": \"Foo\"}\n+\n+\n+@app.get(\"/no-alias/model\", response_model=ModelNoAlias)\n+def by_alias_model():\n+    return ModelNoAlias(name=\"Foo\")\n+\n+\n+@app.get(\"/no-alias/list\", response_model=List[ModelNoAlias])\n+def by_alias_list():\n+    return [{\"name\": \"Foo\"}, {\"name\": \"Bar\"}]\n+\n+\n+openapi_schema = {\n+    \"openapi\": \"3.0.2\",\n+    \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n+    \"paths\": {\n+        \"/dict\": {\n+            \"get\": {\n+                \"summary\": \"Read Dict\",\n+                \"operationId\": \"read_dict_dict_get\",\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\"$ref\": \"#/components/schemas/Model\"}\n+                            }\n+                        },\n+                    }\n+                },\n+            }\n+        },\n+        \"/model\": {\n+            \"get\": {\n+                \"summary\": \"Read Model\",\n+                \"operationId\": \"read_model_model_get\",\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\"$ref\": \"#/components/schemas/Model\"}\n+                            }\n+                        },\n+                    }\n+                },\n+            }\n+        },\n+        \"/list\": {\n+            \"get\": {\n+                \"summary\": \"Read List\",\n+                \"operationId\": \"read_list_list_get\",\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\n+                                    \"title\": \"Response Read List List Get\",\n+                                    \"type\": \"array\",\n+                                    \"items\": {\"$ref\": \"#/components/schemas/Model\"},\n+                                }\n+                            }\n+                        },\n+                    }\n+                },\n+            }\n+        },\n+        \"/by-alias/dict\": {\n+            \"get\": {\n+                \"summary\": \"By Alias Dict\",\n+                \"operationId\": \"by_alias_dict_by_alias_dict_get\",\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\"$ref\": \"#/components/schemas/Model\"}\n+                            }\n+                        },\n+                    }\n+                },\n+            }\n+        },\n+        \"/by-alias/model\": {\n+            \"get\": {\n+                \"summary\": \"By Alias Model\",\n+                \"operationId\": \"by_alias_model_by_alias_model_get\",\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\"$ref\": \"#/components/schemas/Model\"}\n+                            }\n+                        },\n+                    }\n+                },\n+            }\n+        },\n+        \"/by-alias/list\": {\n+            \"get\": {\n+                \"summary\": \"By Alias List\",\n+                \"operationId\": \"by_alias_list_by_alias_list_get\",\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\n+                                    \"title\": \"Response By Alias List By Alias List Get\",\n+                                    \"type\": \"array\",\n+                                    \"items\": {\"$ref\": \"#/components/schemas/Model\"},\n+                                }\n+                            }\n+                        },\n+                    }\n+                },\n+            }\n+        },\n+        \"/no-alias/dict\": {\n+            \"get\": {\n+                \"summary\": \"By Alias Dict\",\n+                \"operationId\": \"by_alias_dict_no_alias_dict_get\",\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\"$ref\": \"#/components/schemas/ModelNoAlias\"}\n+                            }\n+                        },\n+                    }\n+                },\n+            }\n+        },\n+        \"/no-alias/model\": {\n+            \"get\": {\n+                \"summary\": \"By Alias Model\",\n+                \"operationId\": \"by_alias_model_no_alias_model_get\",\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\"$ref\": \"#/components/schemas/ModelNoAlias\"}\n+                            }\n+                        },\n+                    }\n+                },\n+            }\n+        },\n+        \"/no-alias/list\": {\n+            \"get\": {\n+                \"summary\": \"By Alias List\",\n+                \"operationId\": \"by_alias_list_no_alias_list_get\",\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\n+                                    \"title\": \"Response By Alias List No Alias List Get\",\n+                                    \"type\": \"array\",\n+                                    \"items\": {\n+                                        \"$ref\": \"#/components/schemas/ModelNoAlias\"\n+                                    },\n+                                }\n+                            }\n+                        },\n+                    }\n+                },\n+            }\n+        },\n+    },\n+    \"components\": {\n+        \"schemas\": {\n+            \"Model\": {\n+                \"title\": \"Model\",\n+                \"required\": [\"alias\"],\n+                \"type\": \"object\",\n+                \"properties\": {\"alias\": {\"title\": \"Alias\", \"type\": \"string\"}},\n+            },\n+            \"ModelNoAlias\": {\n+                \"title\": \"ModelNoAlias\",\n+                \"required\": [\"name\"],\n+                \"type\": \"object\",\n+                \"properties\": {\"name\": {\"title\": \"Name\", \"type\": \"string\"}},\n+                \"description\": \"response_model_by_alias=False is basically a quick hack, to support proper OpenAPI use another model with the correct field names\",\n+            },\n+        }\n+    },\n+}\n+\n+\n+client = TestClient(app)\n+\n+\n+def test_openapi_schema():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == openapi_schema\n+\n+\n+def test_read_dict():\n+    response = client.get(\"/dict\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\"name\": \"Foo\"}\n+\n+\n+def test_read_model():\n+    response = client.get(\"/model\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\"name\": \"Foo\"}\n+\n+\n+def test_read_list():\n+    response = client.get(\"/list\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == [\n+        {\"name\": \"Foo\"},\n+        {\"name\": \"Bar\"},\n+    ]\n+\n+\n+def test_read_dict_by_alias():\n+    response = client.get(\"/by-alias/dict\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\"alias\": \"Foo\"}\n+\n+\n+def test_read_model_by_alias():\n+    response = client.get(\"/by-alias/model\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\"alias\": \"Foo\"}\n+\n+\n+def test_read_list_by_alias():\n+    response = client.get(\"/by-alias/list\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == [\n+        {\"alias\": \"Foo\"},\n+        {\"alias\": \"Bar\"},\n+    ]\n+\n+\n+def test_read_dict_no_alias():\n+    response = client.get(\"/no-alias/dict\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\"name\": \"Foo\"}\n+\n+\n+def test_read_model_no_alias():\n+    response = client.get(\"/no-alias/model\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\"name\": \"Foo\"}\n+\n+\n+def test_read_list_no_alias():\n+    response = client.get(\"/no-alias/list\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == [\n+        {\"name\": \"Foo\"},\n+        {\"name\": \"Bar\"},\n+    ]\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#1f01ce9615fe83ea5235820266e3a78ae8768847", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 323 | Lines Deleted: 293 | Files Changed: 95 | Hunks: 238 | Methods Changed: 100 | Complexity Δ (Sum/Max): 106/12 | Churn Δ: 616 | Churn Cumulative: 4231 | Contributors (this commit): 17 | Commits (past 90d): 136 | Contributors (cumulative): 154 | DMM Complexity: 0.0\n\nDIFF:\n@@ -1,3 +1,5 @@\n+from typing import Optional\n+\n from fastapi import FastAPI\n from fastapi.responses import FileResponse\n from pydantic import BaseModel\n@@ -21,7 +23,7 @@ app = FastAPI()\n         }\n     },\n )\n-async def read_item(item_id: str, img: bool = None):\n+async def read_item(item_id: str, img: Optional[bool] = None):\n     if img:\n         return FileResponse(\"image.png\", media_type=\"image/png\")\n     else:\n\n@@ -1,3 +1,5 @@\n+from typing import Optional\n+\n from fastapi import FastAPI\n from fastapi.responses import FileResponse\n from pydantic import BaseModel\n@@ -23,7 +25,7 @@ app = FastAPI()\n     response_model=Item,\n     responses={**responses, 200: {\"content\": {\"image/png\": {}}}},\n )\n-async def read_item(item_id: str, img: bool = None):\n+async def read_item(item_id: str, img: Optional[bool] = None):\n     if img:\n         return FileResponse(\"image.png\", media_type=\"image/png\")\n     else:\n\n@@ -1,3 +1,5 @@\n+from typing import Optional\n+\n from fastapi import Body, FastAPI, status\n from fastapi.responses import JSONResponse\n \n@@ -7,7 +9,9 @@ items = {\"foo\": {\"name\": \"Fighters\", \"size\": 6}, \"bar\": {\"name\": \"Tenders\", \"siz\n \n \n @app.put(\"/items/{item_id}\")\n-async def upsert_item(item_id: str, name: str = Body(None), size: int = Body(None)):\n+async def upsert_item(\n+    item_id: str, name: Optional[str] = Body(None), size: Optional[int] = Body(None)\n+):\n     if item_id in items:\n         item = items[item_id]\n         item[\"name\"] = name\n\n@@ -1,3 +1,5 @@\n+from typing import Optional\n+\n from fastapi import FastAPI, Header, HTTPException\n from pydantic import BaseModel\n \n@@ -14,7 +16,7 @@ app = FastAPI()\n class Item(BaseModel):\n     id: str\n     title: str\n-    description: str = None\n+    description: Optional[str] = None\n \n \n @app.get(\"/items/{item_id}\", response_model=Item)\n\n@@ -1,3 +1,5 @@\n+from typing import Optional\n+\n from fastapi import BackgroundTasks, Depends, FastAPI\n \n app = FastAPI()\n@@ -8,7 +10,7 @@ def write_log(message: str):\n         log.write(message)\n \n \n-def get_query(background_tasks: BackgroundTasks, q: str = None):\n+def get_query(background_tasks: BackgroundTasks, q: Optional[str] = None):\n     if q:\n         message = f\"found query: {q}\\n\"\n         background_tasks.add_task(write_log, message)\n\n@@ -1,12 +1,14 @@\n+from typing import Optional\n+\n from fastapi import FastAPI\n from pydantic import BaseModel\n \n \n class Item(BaseModel):\n     name: str\n-    description: str = None\n+    description: Optional[str] = None\n     price: float\n-    tax: float = None\n+    tax: Optional[float] = None\n \n \n app = FastAPI()\n\n@@ -1,12 +1,14 @@\n+from typing import Optional\n+\n from fastapi import FastAPI\n from pydantic import BaseModel\n \n \n class Item(BaseModel):\n     name: str\n-    description: str = None\n+    description: Optional[str] = None\n     price: float\n-    tax: float = None\n+    tax: Optional[float] = None\n \n \n app = FastAPI()\n\n@@ -1,12 +1,14 @@\n+from typing import Optional\n+\n from fastapi import FastAPI\n from pydantic import BaseModel\n \n \n class Item(BaseModel):\n     name: str\n-    description: str = None\n+    description: Optional[str] = None\n     price: float\n-    tax: float = None\n+    tax: Optional[float] = None\n \n \n app = FastAPI()\n\n@@ -1,19 +1,21 @@\n+from typing import Optional\n+\n from fastapi import FastAPI\n from pydantic import BaseModel\n \n \n class Item(BaseModel):\n     name: str\n-    description: str = None\n+    description: Optional[str] = None\n     price: float\n-    tax: float = None\n+    tax: Optional[float] = None\n \n \n app = FastAPI()\n \n \n @app.put(\"/items/{item_id}\")\n-async def create_item(item_id: int, item: Item, q: str = None):\n+async def create_item(item_id: int, item: Item, q: Optional[str] = None):\n     result = {\"item_id\": item_id, **item.dict()}\n     if q:\n         result.update({\"q\": q})\n\n@@ -1,3 +1,5 @@\n+from typing import Optional\n+\n from fastapi import Body, FastAPI\n from pydantic import BaseModel, Field\n \n@@ -6,9 +8,11 @@ app = FastAPI()\n \n class Item(BaseModel):\n     name: str\n-    description: str = Field(None, title=\"The description of the item\", max_length=300)\n+    description: Optional[str] = Field(\n+        None, title=\"The description of the item\", max_length=300\n+    )\n     price: float = Field(..., gt=0, description=\"The price must be greater than zero\")\n-    tax: float = None\n+    tax: Optional[float] = None\n \n \n @app.put(\"/items/{item_id}\")\n\n@@ -1,3 +1,5 @@\n+from typing import Optional\n+\n from fastapi import FastAPI, Path\n from pydantic import BaseModel\n \n@@ -6,17 +8,17 @@ app = FastAPI()\n \n class Item(BaseModel):\n     name: str\n-    description: str = None\n+    description: Optional[str] = None\n     price: float\n-    tax: float = None\n+    tax: Optional[float] = None\n \n \n @app.put(\"/items/{item_id}\")\n async def update_item(\n     *,\n     item_id: int = Path(..., title=\"The ID of the item to get\", ge=0, le=1000),\n-    q: str = None,\n-    item: Item = None,\n+    q: Optional[str] = None,\n+    item: Optional[Item] = None,\n ):\n     results = {\"item_id\": item_id}\n     if q:\n\n@@ -1,3 +1,5 @@\n+from typing import Optional\n+\n from fastapi import FastAPI\n from pydantic import BaseModel\n \n@@ -6,14 +8,14 @@ app = FastAPI()\n \n class Item(BaseModel):\n     name: str\n-    description: str = None\n+    description: Optional[str] = None\n     price: float\n-    tax: float = None\n+    tax: Optional[float] = None\n \n \n class User(BaseModel):\n     username: str\n-    full_name: str = None\n+    full_name: Optional[str] = None\n \n \n @app.put(\"/items/{item_id}\")\n\n@@ -1,3 +1,5 @@\n+from typing import Optional\n+\n from fastapi import Body, FastAPI\n from pydantic import BaseModel\n \n@@ -6,14 +8,14 @@ app = FastAPI()\n \n class Item(BaseModel):\n     name: str\n-    description: str = None\n+    description: Optional[str] = None\n     price: float\n-    tax: float = None\n+    tax: Optional[float] = None\n \n \n class User(BaseModel):\n     username: str\n-    full_name: str = None\n+    full_name: Optional[str] = None\n \n \n @app.put(\"/items/{item_id}\")\n\n@@ -1,3 +1,5 @@\n+from typing import Optional\n+\n from fastapi import Body, FastAPI\n from pydantic import BaseModel\n \n@@ -6,14 +8,14 @@ app = FastAPI()\n \n class Item(BaseModel):\n     name: str\n-    description: str = None\n+    description: Optional[str] = None\n     price: float\n-    tax: float = None\n+    tax: Optional[float] = None\n \n \n class User(BaseModel):\n     username: str\n-    full_name: str = None\n+    full_name: Optional[str] = None\n \n \n @app.put(\"/items/{item_id}\")\n@@ -23,7 +25,7 @@ async def update_item(\n     item: Item,\n     user: User,\n     importance: int = Body(..., gt=0),\n-    q: str = None\n+    q: Optional[str] = None\n ):\n     results = {\"item_id\": item_id, \"item\": item, \"user\": user, \"importance\": importance}\n     if q:\n\n@@ -1,3 +1,5 @@\n+from typing import Optional\n+\n from fastapi import Body, FastAPI\n from pydantic import BaseModel\n \n@@ -6,9 +8,9 @@ app = FastAPI()\n \n class Item(BaseModel):\n     name: str\n-    description: str = None\n+    description: Optional[str] = None\n     price: float\n-    tax: float = None\n+    tax: Optional[float] = None\n \n \n @app.put(\"/items/{item_id}\")\n\n@@ -1,3 +1,5 @@\n+from typing import Optional\n+\n from fastapi import FastAPI\n from pydantic import BaseModel\n \n@@ -6,9 +8,9 @@ app = FastAPI()\n \n class Item(BaseModel):\n     name: str\n-    description: str = None\n+    description: Optional[str] = None\n     price: float\n-    tax: float = None\n+    tax: Optional[float] = None\n     tags: list = []\n \n \n\n@@ -1,4 +1,4 @@\n-from typing import List\n+from typing import List, Optional\n \n from fastapi import FastAPI\n from pydantic import BaseModel\n@@ -8,9 +8,9 @@ app = FastAPI()\n \n class Item(BaseModel):\n     name: str\n-    description: str = None\n+    description: Optional[str] = None\n     price: float\n-    tax: float = None\n+    tax: Optional[float] = None\n     tags: List[str] = []\n \n \n\n@@ -1,4 +1,4 @@\n-from typing import Set\n+from typing import Optional, Set\n \n from fastapi import FastAPI\n from pydantic import BaseModel\n@@ -8,9 +8,9 @@ app = FastAPI()\n \n class Item(BaseModel):\n     name: str\n-    description: str = None\n+    description: Optional[str] = None\n     price: float\n-    tax: float = None\n+    tax: Optional[float] = None\n     tags: Set[str] = set()\n \n \n\n@@ -1,4 +1,4 @@\n-from typing import Set\n+from typing import Optional, Set\n \n from fastapi import FastAPI\n from pydantic import BaseModel\n@@ -13,11 +13,11 @@ class Image(BaseModel):\n \n class Item(BaseModel):\n     name: str\n-    description: str = None\n+    description: Optional[str] = None\n     price: float\n-    tax: float = None\n+    tax: Optional[float] = None\n     tags: Set[str] = []\n-    image: Image = None\n+    image: Optional[Image] = None\n \n \n @app.put(\"/items/{item_id}\")\n\n@@ -1,4 +1,4 @@\n-from typing import Set\n+from typing import Optional, Set\n \n from fastapi import FastAPI\n from pydantic import BaseModel, HttpUrl\n@@ -13,11 +13,11 @@ class Image(BaseModel):\n \n class Item(BaseModel):\n     name: str\n-    description: str = None\n+    description: Optional[str] = None\n     price: float\n-    tax: float = None\n+    tax: Optional[float] = None\n     tags: Set[str] = []\n-    image: Image = None\n+    image: Optional[Image] = None\n \n \n @app.put(\"/items/{item_id}\")\n\n@@ -1,4 +1,4 @@\n-from typing import List, Set\n+from typing import List, Optional, Set\n \n from fastapi import FastAPI\n from pydantic import BaseModel, HttpUrl\n@@ -13,11 +13,11 @@ class Image(BaseModel):\n \n class Item(BaseModel):\n     name: str\n-    description: str = None\n+    description: Optional[str] = None\n     price: float\n-    tax: float = None\n+    tax: Optional[float] = None\n     tags: Set[str] = []\n-    images: List[Image] = None\n+    images: Optional[List[Image]] = None\n \n \n @app.put(\"/items/{item_id}\")\n\n@@ -1,4 +1,4 @@\n-from typing import List, Set\n+from typing import List, Optional, Set\n \n from fastapi import FastAPI\n from pydantic import BaseModel, HttpUrl\n@@ -13,16 +13,16 @@ class Image(BaseModel):\n \n class Item(BaseModel):\n     name: str\n-    description: str = None\n+    description: Optional[str] = None\n     price: float\n-    tax: float = None\n+    tax: Optional[float] = None\n     tags: Set[str] = []\n-    images: List[Image] = None\n+    images: Optional[List[Image]] = None\n \n \n class Offer(BaseModel):\n     name: str\n-    description: str = None\n+    description: Optional[str] = None\n     price: float\n     items: List[Item]\n \n\n@@ -1,4 +1,4 @@\n-from typing import List\n+from typing import List, Optional\n \n from fastapi import FastAPI\n from fastapi.encoders import jsonable_encoder\n@@ -8,9 +8,9 @@ app = FastAPI()\n \n \n class Item(BaseModel):\n-    name: str = None\n-    description: str = None\n-    price: float = None\n+    name: Optional[str] = None\n+    description: Optional[str] = None\n+    price: Optional[float] = None\n     tax: float = 10.5\n     tags: List[str] = []\n \n\n@@ -1,4 +1,4 @@\n-from typing import List\n+from typing import List, Optional\n \n from fastapi import FastAPI\n from fastapi.encoders import jsonable_encoder\n@@ -8,9 +8,9 @@ app = FastAPI()\n \n \n class Item(BaseModel):\n-    name: str = None\n-    description: str = None\n-    price: float = None\n+    name: Optional[str] = None\n+    description: Optional[str] = None\n+    price: Optional[float] = None\n     tax: float = 10.5\n     tags: List[str] = []\n \n\n@@ -1,8 +1,10 @@\n+from typing import Optional\n+\n from fastapi import Cookie, FastAPI\n \n app = FastAPI()\n \n \n @app.get(\"/items/\")\n-async def read_items(ads_id: str = Cookie(None)):\n+async def read_items(ads_id: Optional[str] = Cookie(None)):\n     return {\"ads_id\": ads_id}\n\n@@ -1,9 +1,11 @@\n+from typing import Optional\n+\n from fastapi import Depends, FastAPI\n \n app = FastAPI()\n \n \n-async def common_parameters(q: str = None, skip: int = 0, limit: int = 100):\n+async def common_parameters(q: Optional[str] = None, skip: int = 0, limit: int = 100):\n     return {\"q\": q, \"skip\": skip, \"limit\": limit}\n \n \n\n@@ -1,3 +1,5 @@\n+from typing import Optional\n+\n from fastapi import Depends, FastAPI\n \n app = FastAPI()\n@@ -7,7 +9,7 @@ fake_items_db = [{\"item_name\": \"Foo\"}, {\"item_name\": \"Bar\"}, {\"item_name\": \"Baz\"\n \n \n class CommonQueryParams:\n-    def __init__(self, q: str = None, skip: int = 0, limit: int = 100):\n+    def __init__(self, q: Optional[str] = None, skip: int = 0, limit: int = 100):\n         self.q = q\n         self.skip = skip\n         self.limit = limit\n\n@@ -1,3 +1,5 @@\n+from typing import Optional\n+\n from fastapi import Depends, FastAPI\n \n app = FastAPI()\n@@ -7,7 +9,7 @@ fake_items_db = [{\"item_name\": \"Foo\"}, {\"item_name\": \"Bar\"}, {\"item_name\": \"Baz\"\n \n \n class CommonQueryParams:\n-    def __init__(self, q: str = None, skip: int = 0, limit: int = 100):\n+    def __init__(self, q: Optional[str] = None, skip: int = 0, limit: int = 100):\n         self.q = q\n         self.skip = skip\n         self.limit = limit\n\n@@ -1,3 +1,5 @@\n+from typing import Optional\n+\n from fastapi import Depends, FastAPI\n \n app = FastAPI()\n@@ -7,7 +9,7 @@ fake_items_db = [{\"item_name\": \"Foo\"}, {\"item_name\": \"Bar\"}, {\"item_name\": \"Baz\"\n \n \n class CommonQueryParams:\n-    def __init__(self, q: str = None, skip: int = 0, limit: int = 100):\n+    def __init__(self, q: Optional[str] = None, skip: int = 0, limit: int = 100):\n         self.q = q\n         self.skip = skip\n         self.limit = limit\n\n@@ -1,14 +1,16 @@\n+from typing import Optional\n+\n from fastapi import Cookie, Depends, FastAPI\n \n app = FastAPI()\n \n \n-def query_extractor(q: str = None):\n+def query_extractor(q: Optional[str] = None):\n     return q\n \n \n def query_or_cookie_extractor(\n-    q: str = Depends(query_extractor), last_query: str = Cookie(None)\n+    q: str = Depends(query_extractor), last_query: Optional[str] = Cookie(None)\n ):\n     if not q:\n         return last_query\n\n@@ -1,10 +1,12 @@\n+from typing import Optional\n+\n from fastapi import Depends, FastAPI\n from fastapi.testclient import TestClient\n \n app = FastAPI()\n \n \n-async def common_parameters(q: str = None, skip: int = 0, limit: int = 100):\n+async def common_parameters(q: Optional[str] = None, skip: int = 0, limit: int = 100):\n     return {\"q\": q, \"skip\": skip, \"limit\": limit}\n \n \n@@ -21,7 +23,7 @@ async def read_users(commons: dict = Depends(common_parameters)):\n client = TestClient(app)\n \n \n-async def override_dependency(q: str = None):\n+async def override_dependency(q: Optional[str] = None):\n     return {\"q\": q, \"skip\": 5, \"limit\": 10}\n \n \n\n@@ -1,4 +1,5 @@\n from datetime import datetime\n+from typing import Optional\n \n from fastapi import FastAPI\n from fastapi.encoders import jsonable_encoder\n@@ -10,7 +11,7 @@ fake_db = {}\n class Item(BaseModel):\n     title: str\n     timestamp: datetime\n-    description: str = None\n+    description: Optional[str] = None\n \n \n app = FastAPI()\n\n@@ -1,4 +1,5 @@\n from datetime import datetime, time, timedelta\n+from typing import Optional\n from uuid import UUID\n \n from fastapi import Body, FastAPI\n@@ -9,10 +10,10 @@ app = FastAPI()\n @app.put(\"/items/{item_id}\")\n async def read_items(\n     item_id: UUID,\n-    start_datetime: datetime = Body(None),\n-    end_datetime: datetime = Body(None),\n-    repeat_at: time = Body(None),\n-    process_after: timedelta = Body(None),\n+    start_datetime: Optional[datetime] = Body(None),\n+    end_datetime: Optional[datetime] = Body(None),\n+    repeat_at: Optional[time] = Body(None),\n+    process_after: Optional[timedelta] = Body(None),\n ):\n     start_process = start_datetime + process_after\n     duration = end_datetime - start_process\n\n@@ -1,3 +1,5 @@\n+from typing import Optional\n+\n from fastapi import FastAPI\n from pydantic import BaseModel, EmailStr\n \n@@ -8,20 +10,20 @@ class UserIn(BaseModel):\n     username: str\n     password: str\n     email: EmailStr\n-    full_name: str = None\n+    full_name: Optional[str] = None\n \n \n class UserOut(BaseModel):\n     username: str\n     email: EmailStr\n-    full_name: str = None\n+    full_name: Optional[str] = None\n \n \n class UserInDB(BaseModel):\n     username: str\n     hashed_password: str\n     email: EmailStr\n-    full_name: str = None\n+    full_name: Optional[str] = None\n \n \n def fake_password_hasher(raw_password: str):\n\n@@ -1,3 +1,5 @@\n+from typing import Optional\n+\n from fastapi import FastAPI\n from pydantic import BaseModel, EmailStr\n \n@@ -7,7 +9,7 @@ app = FastAPI()\n class UserBase(BaseModel):\n     username: str\n     email: EmailStr\n-    full_name: str = None\n+    full_name: Optional[str] = None\n \n \n class UserIn(UserBase):\n\n@@ -1,8 +1,10 @@\n+from typing import Optional\n+\n from fastapi import FastAPI, Header\n \n app = FastAPI()\n \n \n @app.get(\"/items/\")\n-async def read_items(user_agent: str = Header(None)):\n+async def read_items(user_agent: Optional[str] = Header(None)):\n     return {\"User-Agent\": user_agent}\n\n@@ -1,8 +1,12 @@\n+from typing import Optional\n+\n from fastapi import FastAPI, Header\n \n app = FastAPI()\n \n \n @app.get(\"/items/\")\n-async def read_items(strange_header: str = Header(None, convert_underscores=False)):\n+async def read_items(\n+    strange_header: Optional[str] = Header(None, convert_underscores=False)\n+):\n     return {\"strange_header\": strange_header}\n\n@@ -1,4 +1,4 @@\n-from typing import List\n+from typing import List, Optional\n \n from fastapi import FastAPI, Header\n \n@@ -6,5 +6,5 @@ app = FastAPI()\n \n \n @app.get(\"/items/\")\n-async def read_items(x_token: List[str] = Header(None)):\n+async def read_items(x_token: Optional[List[str]] = Header(None)):\n     return {\"X-Token values\": x_token}\n\n@@ -1,3 +1,5 @@\n+from typing import Optional\n+\n from fastapi import APIRouter, FastAPI\n from fastapi.responses import JSONResponse\n from pydantic import BaseModel, HttpUrl\n@@ -7,7 +9,7 @@ app = FastAPI()\n \n class Invoice(BaseModel):\n     id: str\n-    title: str = None\n+    title: Optional[str] = None\n     customer: str\n     total: float\n \n@@ -32,7 +34,7 @@ def invoice_notification(body: InvoiceEvent):\n \n \n @app.post(\"/invoices/\", callbacks=invoices_callback_router.routes)\n-def create_invoice(invoice: Invoice, callback_url: HttpUrl = None):\n+def create_invoice(invoice: Invoice, callback_url: Optional[HttpUrl] = None):\n     \"\"\"\n     Create an invoice.\n \n\n@@ -1,4 +1,4 @@\n-from typing import Set\n+from typing import Optional, Set\n \n from fastapi import FastAPI\n from pydantic import BaseModel\n@@ -8,9 +8,9 @@ app = FastAPI()\n \n class Item(BaseModel):\n     name: str\n-    description: str = None\n+    description: Optional[str] = None\n     price: float\n-    tax: float = None\n+    tax: Optional[float] = None\n     tags: Set[str] = []\n \n \n\n@@ -1,4 +1,4 @@\n-from typing import Set\n+from typing import Optional, Set\n \n from fastapi import FastAPI, status\n from pydantic import BaseModel\n@@ -8,9 +8,9 @@ app = FastAPI()\n \n class Item(BaseModel):\n     name: str\n-    description: str = None\n+    description: Optional[str] = None\n     price: float\n-    tax: float = None\n+    tax: Optional[float] = None\n     tags: Set[str] = []\n \n \n\n@@ -1,4 +1,4 @@\n-from typing import Set\n+from typing import Optional, Set\n \n from fastapi import FastAPI\n from pydantic import BaseModel\n@@ -8,9 +8,9 @@ app = FastAPI()\n \n class Item(BaseModel):\n     name: str\n-    description: str = None\n+    description: Optional[str] = None\n     price: float\n-    tax: float = None\n+    tax: Optional[float] = None\n     tags: Set[str] = []\n \n \n\n@@ -1,4 +1,4 @@\n-from typing import Set\n+from typing import Optional, Set\n \n from fastapi import FastAPI\n from pydantic import BaseModel\n@@ -8,9 +8,9 @@ app = FastAPI()\n \n class Item(BaseModel):\n     name: str\n-    description: str = None\n+    description: Optional[str] = None\n     price: float\n-    tax: float = None\n+    tax: Optional[float] = None\n     tags: Set[str] = []\n \n \n\n@@ -1,4 +1,4 @@\n-from typing import Set\n+from typing import Optional, Set\n \n from fastapi import FastAPI\n from pydantic import BaseModel\n@@ -8,9 +8,9 @@ app = FastAPI()\n \n class Item(BaseModel):\n     name: str\n-    description: str = None\n+    description: Optional[str] = None\n     price: float\n-    tax: float = None\n+    tax: Optional[float] = None\n     tags: Set[str] = []\n \n \n\n@@ -1,4 +1,4 @@\n-from typing import Set\n+from typing import Optional, Set\n \n from fastapi import FastAPI\n from pydantic import BaseModel\n@@ -8,9 +8,9 @@ app = FastAPI()\n \n class Item(BaseModel):\n     name: str\n-    description: str = None\n+    description: Optional[str] = None\n     price: float\n-    tax: float = None\n+    tax: Optional[float] = None\n     tags: Set[str] = []\n \n \n\n@@ -1,3 +1,5 @@\n+from typing import Optional\n+\n from fastapi import FastAPI, Path, Query\n \n app = FastAPI()\n@@ -6,7 +8,7 @@ app = FastAPI()\n @app.get(\"/items/{item_id}\")\n async def read_items(\n     item_id: int = Path(..., title=\"The ID of the item to get\"),\n-    q: str = Query(None, alias=\"item-query\"),\n+    q: Optional[str] = Query(None, alias=\"item-query\"),\n ):\n     results = {\"item_id\": item_id}\n     if q:\n\n@@ -1,10 +1,12 @@\n+from typing import Optional\n+\n from fastapi import FastAPI\n \n app = FastAPI()\n \n \n @app.get(\"/items/{item_id}\")\n-async def read_item(item_id: str, q: str = None):\n+async def read_item(item_id: str, q: Optional[str] = None):\n     if q:\n         return {\"item_id\": item_id, \"q\": q}\n     return {\"item_id\": item_id}\n\n@@ -1,10 +1,12 @@\n+from typing import Optional\n+\n from fastapi import FastAPI\n \n app = FastAPI()\n \n \n @app.get(\"/items/{item_id}\")\n-async def read_item(item_id: str, q: str = None, short: bool = False):\n+async def read_item(item_id: str, q: Optional[str] = None, short: bool = False):\n     item = {\"item_id\": item_id}\n     if q:\n         item.update({\"q\": q})\n\n@@ -1,3 +1,5 @@\n+from typing import Optional\n+\n from fastapi import FastAPI\n \n app = FastAPI()\n@@ -5,7 +7,7 @@ app = FastAPI()\n \n @app.get(\"/users/{user_id}/items/{item_id}\")\n async def read_user_item(\n-    user_id: int, item_id: str, q: str = None, short: bool = False\n+    user_id: int, item_id: str, q: Optional[str] = None, short: bool = False\n ):\n     item = {\"item_id\": item_id, \"owner_id\": user_id}\n     if q:\n\n@@ -1,9 +1,13 @@\n+from typing import Optional\n+\n from fastapi import FastAPI\n \n app = FastAPI()\n \n \n @app.get(\"/items/{item_id}\")\n-async def read_user_item(item_id: str, needy: str, skip: int = 0, limit: int = None):\n+async def read_user_item(\n+    item_id: str, needy: str, skip: int = 0, limit: Optional[int] = None\n+):\n     item = {\"item_id\": item_id, \"needy\": needy, \"skip\": skip, \"limit\": limit}\n     return item\n\n@@ -1,11 +0,0 @@\n-from typing import Optional\n-\n-from fastapi import FastAPI\n-\n-app = FastAPI()\n-\n-\n-@app.get(\"/items/{item_id}\")\n-async def read_user_item(item_id: str, limit: Optional[int] = None):\n-    item = {\"item_id\": item_id, \"limit\": limit}\n-    return item\n\n@@ -1,10 +1,12 @@\n+from typing import Optional\n+\n from fastapi import FastAPI\n \n app = FastAPI()\n \n \n @app.get(\"/items/\")\n-async def read_items(q: str = None):\n+async def read_items(q: Optional[str] = None):\n     results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n     if q:\n         results.update({\"q\": q})\n\n@@ -1,10 +1,12 @@\n+from typing import Optional\n+\n from fastapi import FastAPI, Query\n \n app = FastAPI()\n \n \n @app.get(\"/items/\")\n-async def read_items(q: str = Query(None, max_length=50)):\n+async def read_items(q: Optional[str] = Query(None, max_length=50)):\n     results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n     if q:\n         results.update({\"q\": q})\n\n@@ -1,10 +1,12 @@\n+from typing import Optional\n+\n from fastapi import FastAPI, Query\n \n app = FastAPI()\n \n \n @app.get(\"/items/\")\n-async def read_items(q: str = Query(None, min_length=3, max_length=50)):\n+async def read_items(q: Optional[str] = Query(None, min_length=3, max_length=50)):\n     results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n     if q:\n         results.update({\"q\": q})\n\n@@ -1,3 +1,5 @@\n+from typing import Optional\n+\n from fastapi import FastAPI, Query\n \n app = FastAPI()\n@@ -5,7 +7,7 @@ app = FastAPI()\n \n @app.get(\"/items/\")\n async def read_items(\n-    q: str = Query(None, min_length=3, max_length=50, regex=\"^fixedquery$\")\n+    q: Optional[str] = Query(None, min_length=3, max_length=50, regex=\"^fixedquery$\")\n ):\n     results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n     if q:\n\n@@ -1,10 +1,14 @@\n+from typing import Optional\n+\n from fastapi import FastAPI, Query\n \n app = FastAPI()\n \n \n @app.get(\"/items/\")\n-async def read_items(q: str = Query(None, title=\"Query string\", min_length=3)):\n+async def read_items(\n+    q: Optional[str] = Query(None, title=\"Query string\", min_length=3)\n+):\n     results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n     if q:\n         results.update({\"q\": q})\n\n@@ -1,3 +1,5 @@\n+from typing import Optional\n+\n from fastapi import FastAPI, Query\n \n app = FastAPI()\n@@ -5,7 +7,7 @@ app = FastAPI()\n \n @app.get(\"/items/\")\n async def read_items(\n-    q: str = Query(\n+    q: Optional[str] = Query(\n         None,\n         title=\"Query string\",\n         description=\"Query string for the items to search in the database that have a good match\",\n\n@@ -1,10 +1,12 @@\n+from typing import Optional\n+\n from fastapi import FastAPI, Query\n \n app = FastAPI()\n \n \n @app.get(\"/items/\")\n-async def read_items(q: str = Query(None, alias=\"item-query\")):\n+async def read_items(q: Optional[str] = Query(None, alias=\"item-query\")):\n     results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n     if q:\n         results.update({\"q\": q})\n\n@@ -1,3 +1,5 @@\n+from typing import Optional\n+\n from fastapi import FastAPI, Query\n \n app = FastAPI()\n@@ -5,7 +7,7 @@ app = FastAPI()\n \n @app.get(\"/items/\")\n async def read_items(\n-    q: str = Query(\n+    q: Optional[str] = Query(\n         None,\n         alias=\"item-query\",\n         title=\"Query string\",\n\n@@ -1,4 +1,4 @@\n-from typing import List\n+from typing import List, Optional\n \n from fastapi import FastAPI, Query\n \n@@ -6,6 +6,6 @@ app = FastAPI()\n \n \n @app.get(\"/items/\")\n-async def read_items(q: List[str] = Query(None)):\n+async def read_items(q: Optional[List[str]] = Query(None)):\n     query_items = {\"q\": q}\n     return query_items\n\n@@ -4,6 +4,6 @@ app = FastAPI()\n \n \n @app.get(\"/items/\")\n-async def read_items(q: list = Query(None)):\n+async def read_items(q: list = Query([])):\n     query_items = {\"q\": q}\n     return query_items\n\n@@ -1,4 +1,5 @@\n from datetime import datetime\n+from typing import Optional\n \n from fastapi import FastAPI\n from fastapi.encoders import jsonable_encoder\n@@ -9,7 +10,7 @@ from pydantic import BaseModel\n class Item(BaseModel):\n     title: str\n     timestamp: datetime\n-    description: str = None\n+    description: Optional[str] = None\n \n \n app = FastAPI()\n\n@@ -1,4 +1,4 @@\n-from typing import List\n+from typing import List, Optional\n \n from fastapi import FastAPI\n from pydantic import BaseModel\n@@ -8,9 +8,9 @@ app = FastAPI()\n \n class Item(BaseModel):\n     name: str\n-    description: str = None\n+    description: Optional[str] = None\n     price: float\n-    tax: float = None\n+    tax: Optional[float] = None\n     tags: List[str] = []\n \n \n\n@@ -1,3 +1,5 @@\n+from typing import Optional\n+\n from fastapi import FastAPI\n from pydantic import BaseModel, EmailStr\n \n@@ -8,7 +10,7 @@ class UserIn(BaseModel):\n     username: str\n     password: str\n     email: EmailStr\n-    full_name: str = None\n+    full_name: Optional[str] = None\n \n \n # Don't do this in production!\n\n@@ -1,3 +1,5 @@\n+from typing import Optional\n+\n from fastapi import FastAPI\n from pydantic import BaseModel, EmailStr\n \n@@ -8,13 +10,13 @@ class UserIn(BaseModel):\n     username: str\n     password: str\n     email: EmailStr\n-    full_name: str = None\n+    full_name: Optional[str] = None\n \n \n class UserOut(BaseModel):\n     username: str\n     email: EmailStr\n-    full_name: str = None\n+    full_name: Optional[str] = None\n \n \n @app.post(\"/user/\", response_model=UserOut)\n\n@@ -1,4 +1,4 @@\n-from typing import List\n+from typing import List, Optional\n \n from fastapi import FastAPI\n from pydantic import BaseModel\n@@ -8,7 +8,7 @@ app = FastAPI()\n \n class Item(BaseModel):\n     name: str\n-    description: str = None\n+    description: Optional[str] = None\n     price: float\n     tax: float = 10.5\n     tags: List[str] = []\n\n@@ -1,3 +1,5 @@\n+from typing import Optional\n+\n from fastapi import FastAPI\n from pydantic import BaseModel\n \n@@ -6,7 +8,7 @@ app = FastAPI()\n \n class Item(BaseModel):\n     name: str\n-    description: str = None\n+    description: Optional[str] = None\n     price: float\n     tax: float = 10.5\n \n\n@@ -1,3 +1,5 @@\n+from typing import Optional\n+\n from fastapi import FastAPI\n from pydantic import BaseModel\n \n@@ -6,7 +8,7 @@ app = FastAPI()\n \n class Item(BaseModel):\n     name: str\n-    description: str = None\n+    description: Optional[str] = None\n     price: float\n     tax: float = 10.5\n \n\n@@ -1,3 +1,5 @@\n+from typing import Optional\n+\n from fastapi import FastAPI\n from pydantic import BaseModel\n \n@@ -6,9 +8,9 @@ app = FastAPI()\n \n class Item(BaseModel):\n     name: str\n-    description: str = None\n+    description: Optional[str] = None\n     price: float\n-    tax: float = None\n+    tax: Optional[float] = None\n \n     class Config:\n         schema_extra = {\n\n@@ -1,3 +1,5 @@\n+from typing import Optional\n+\n from fastapi import FastAPI\n from pydantic import BaseModel, Field\n \n@@ -6,9 +8,9 @@ app = FastAPI()\n \n class Item(BaseModel):\n     name: str = Field(..., example=\"Foo\")\n-    description: str = Field(None, example=\"A very nice Item\")\n+    description: Optional[str] = Field(None, example=\"A very nice Item\")\n     price: float = Field(..., example=35.4)\n-    tax: float = Field(None, example=3.2)\n+    tax: Optional[float] = Field(None, example=3.2)\n \n \n @app.put(\"/items/{item_id}\")\n\n@@ -1,3 +1,5 @@\n+from typing import Optional\n+\n from fastapi import Body, FastAPI\n from pydantic import BaseModel\n \n@@ -6,9 +8,9 @@ app = FastAPI()\n \n class Item(BaseModel):\n     name: str\n-    description: str = None\n+    description: Optional[str] = None\n     price: float\n-    tax: float = None\n+    tax: Optional[float] = None\n \n \n @app.put(\"/items/{item_id}\")\n\n@@ -1,3 +1,5 @@\n+from typing import Optional\n+\n from fastapi import Depends, FastAPI, HTTPException, status\n from fastapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm\n from pydantic import BaseModel\n@@ -31,9 +33,9 @@ oauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"/token\")\n \n class User(BaseModel):\n     username: str\n-    email: str = None\n-    full_name: str = None\n-    disabled: bool = None\n+    email: Optional[str] = None\n+    full_name: Optional[str] = None\n+    disabled: Optional[bool] = None\n \n \n class UserInDB(User):\n\n@@ -1,4 +1,5 @@\n from datetime import datetime, timedelta\n+from typing import Optional\n \n import jwt\n from fastapi import Depends, FastAPI, HTTPException, status\n@@ -31,14 +32,14 @@ class Token(BaseModel):\n \n \n class TokenData(BaseModel):\n-    username: str = None\n+    username: Optional[str] = None\n \n \n class User(BaseModel):\n     username: str\n-    email: str = None\n-    full_name: str = None\n-    disabled: bool = None\n+    email: Optional[str] = None\n+    full_name: Optional[str] = None\n+    disabled: Optional[bool] = None\n \n \n class UserInDB(User):\n@@ -75,7 +76,7 @@ def authenticate_user(fake_db, username: str, password: str):\n     return user\n \n \n-def create_access_token(data: dict, expires_delta: timedelta = None):\n+def create_access_token(data: dict, expires_delta: Optional[timedelta] = None):\n     to_encode = data.copy()\n     if expires_delta:\n         expire = datetime.utcnow() + expires_delta\n\n@@ -1,5 +1,5 @@\n from datetime import datetime, timedelta\n-from typing import List\n+from typing import List, Optional\n \n import jwt\n from fastapi import Depends, FastAPI, HTTPException, Security, status\n@@ -43,15 +43,15 @@ class Token(BaseModel):\n \n \n class TokenData(BaseModel):\n-    username: str = None\n+    username: Optional[str] = None\n     scopes: List[str] = []\n \n \n class User(BaseModel):\n     username: str\n-    email: str = None\n-    full_name: str = None\n-    disabled: bool = None\n+    email: Optional[str] = None\n+    full_name: Optional[str] = None\n+    disabled: Optional[bool] = None\n \n \n class UserInDB(User):\n@@ -91,7 +91,7 @@ def authenticate_user(fake_db, username: str, password: str):\n     return user\n \n \n-def create_access_token(data: dict, expires_delta: timedelta = None):\n+def create_access_token(data: dict, expires_delta: Optional[timedelta] = None):\n     to_encode = data.copy()\n     if expires_delta:\n         expire = datetime.utcnow() + expires_delta\n\n@@ -1,11 +1,11 @@\n-from typing import List\n+from typing import List, Optional\n \n from pydantic import BaseModel\n \n \n class ItemBase(BaseModel):\n     title: str\n-    description: str = None\n+    description: Optional[str] = None\n \n \n class ItemCreate(ItemBase):\n\n@@ -1,4 +1,4 @@\n-from typing import Any, List\n+from typing import Any, List, Optional\n \n import peewee\n from pydantic import BaseModel\n@@ -15,7 +15,7 @@ class PeeweeGetterDict(GetterDict):\n \n class ItemBase(BaseModel):\n     title: str\n-    description: str = None\n+    description: Optional[str] = None\n \n \n class ItemCreate(ItemBase):\n\n@@ -1,3 +1,5 @@\n+from typing import Optional\n+\n from fastapi import Cookie, Depends, FastAPI, Query, WebSocket, status\n from fastapi.responses import HTMLResponse\n \n@@ -54,7 +56,9 @@ async def get():\n \n \n async def get_cookie_or_token(\n-    websocket: WebSocket, session: str = Cookie(None), token: str = Query(None)\n+    websocket: WebSocket,\n+    session: Optional[str] = Cookie(None),\n+    token: Optional[str] = Query(None),\n ):\n     if session is None and token is None:\n         await websocket.close(code=status.WS_1008_POLICY_VIOLATION)\n@@ -65,7 +69,7 @@ async def get_cookie_or_token(\n async def websocket_endpoint(\n     websocket: WebSocket,\n     item_id: str,\n-    q: int = None,\n+    q: Optional[int] = None,\n     cookie_or_token: str = Depends(get_cookie_or_token),\n ):\n     await websocket.accept()\n\n@@ -1,4 +1,5 @@\n import http\n+from typing import Optional\n \n from fastapi import FastAPI, Path, Query\n \n@@ -48,7 +49,7 @@ def get_bool_id(item_id: bool):\n \n \n @app.get(\"/path/param/{item_id}\")\n-def get_path_param_id(item_id: str = Path(None)):\n+def get_path_param_id(item_id: Optional[str] = Path(None)):\n     return item_id\n \n \n@@ -160,7 +161,7 @@ def get_query_type(query: int):\n \n \n @app.get(\"/query/int/optional\")\n-def get_query_type_optional(query: int = None):\n+def get_query_type_optional(query: Optional[int] = None):\n     if query is None:\n         return \"foo bar\"\n     return f\"foo bar {query}\"\n\n@@ -1,10 +1,11 @@\n from functools import partial\n+from typing import Optional\n \n from fastapi import FastAPI\n from fastapi.testclient import TestClient\n \n \n-def main(some_arg, q: str = None):\n+def main(some_arg, q: Optional[str] = None):\n     return {\"some_arg\": some_arg, \"q\": q}\n \n \n\n@@ -1,3 +1,5 @@\n+from typing import Optional\n+\n import pytest\n from fastapi import APIRouter, Depends, FastAPI\n from fastapi.testclient import TestClient\n@@ -36,7 +38,7 @@ app.include_router(router)\n client = TestClient(app)\n \n \n-async def overrider_dependency_simple(q: str = None):\n+async def overrider_dependency_simple(q: Optional[str] = None):\n     return {\"q\": q, \"skip\": 5, \"limit\": 10}\n \n \n\n@@ -1,3 +1,5 @@\n+from typing import Optional\n+\n from fastapi import FastAPI\n from fastapi.responses import JSONResponse\n from fastapi.testclient import TestClient\n@@ -8,7 +10,7 @@ app = FastAPI()\n \n class Item(BaseModel):\n     name: str\n-    price: float = None\n+    price: Optional[float] = None\n \n \n @app.api_route(\"/items/{item_id}\", methods=[\"GET\"])\n\n@@ -1,3 +1,5 @@\n+from typing import Optional\n+\n import pytest\n from fastapi import Depends, FastAPI\n from fastapi.testclient import TestClient\n@@ -16,7 +18,7 @@ class ModelC(ModelB):\n \n class ModelA(BaseModel):\n     name: str\n-    description: str = None\n+    description: Optional[str] = None\n     model_b: ModelB\n \n     @validator(\"name\")\n\n@@ -1,3 +1,5 @@\n+from typing import Optional\n+\n from fastapi import APIRouter, FastAPI\n from fastapi.testclient import TestClient\n \n@@ -19,7 +21,7 @@ def get_user(user_id: str):\n \n \n @item_router.get(\"/\")\n-def get_items(user_id: str = None):\n+def get_items(user_id: Optional[str] = None):\n     if user_id is None:\n         return [{\"item_id\": \"i1\", \"user_id\": \"u1\"}, {\"item_id\": \"i2\", \"user_id\": \"u2\"}]\n     else:\n@@ -27,7 +29,7 @@ def get_items(user_id: str = None):\n \n \n @item_router.get(\"/{item_id}\")\n-def get_item(item_id: str, user_id: str = None):\n+def get_item(item_id: str, user_id: Optional[str] = None):\n     if user_id is None:\n         return {\"item_id\": item_id}\n     else:\n\n@@ -1,4 +1,4 @@\n-from typing import Dict, List, Tuple\n+from typing import Dict, List, Optional, Tuple\n \n import pytest\n from fastapi import FastAPI, Query\n@@ -49,5 +49,5 @@ def test_invalid_simple_dict():\n             title: str\n \n         @app.get(\"/items/\")\n-        def read_items(q: dict = Query(None)):\n+        def read_items(q: Optional[dict] = Query(None)):\n             pass  # pragma: no cover\n\n@@ -1,6 +1,7 @@\n from datetime import datetime, timezone\n from enum import Enum\n from pathlib import PurePath, PurePosixPath, PureWindowsPath\n+from typing import Optional\n \n import pytest\n from fastapi.encoders import jsonable_encoder\n@@ -60,7 +61,7 @@ class RoleEnum(Enum):\n \n \n class ModelWithConfig(BaseModel):\n-    role: RoleEnum = None\n+    role: Optional[RoleEnum] = None\n \n     class Config:\n         use_enum_values = True\n\n@@ -1,3 +1,5 @@\n+from typing import Optional\n+\n from fastapi import FastAPI\n from fastapi.params import Param\n from fastapi.testclient import TestClient\n@@ -6,7 +8,7 @@ app = FastAPI()\n \n \n @app.get(\"/items/\")\n-def read_items(q: str = Param(None)):\n+def read_items(q: Optional[str] = Param(None)):\n     return {\"q\": q}\n \n \n\n@@ -1,4 +1,4 @@\n-from typing import List\n+from typing import List, Optional\n \n from fastapi import FastAPI\n from fastapi.testclient import TestClient\n@@ -9,7 +9,7 @@ app = FastAPI()\n \n class Item(BaseModel):\n     name: str\n-    price: float = None\n+    price: Optional[float] = None\n     owner_ids: List[int] = None\n \n \n\n@@ -1,4 +1,4 @@\n-from typing import List\n+from typing import List, Optional\n \n from fastapi import FastAPI\n from fastapi.testclient import TestClient\n@@ -10,7 +10,7 @@ app = FastAPI()\n @dataclass\n class Item:\n     name: str\n-    price: float = None\n+    price: Optional[float] = None\n     owner_ids: List[int] = None\n \n \n\n@@ -1,4 +1,4 @@\n-from typing import Dict, List\n+from typing import Dict, List, Optional\n \n from fastapi import FastAPI\n from pydantic import BaseModel, Field\n@@ -9,7 +9,7 @@ app = FastAPI()\n \n class Item(BaseModel):\n     name: str = Field(..., alias=\"aliased_name\")\n-    price: float = None\n+    price: Optional[float] = None\n     owner_ids: List[int] = None\n \n \n\n@@ -19,7 +19,7 @@ class Model(BaseModel):\n class ModelSubclass(Model):\n     y: int\n     z: int = 0\n-    w: int = None\n+    w: Optional[int] = None\n \n \n class ModelDefaults(BaseModel):\n\n@@ -1,3 +1,5 @@\n+from typing import Optional\n+\n from fastapi import APIRouter, FastAPI\n from fastapi.responses import JSONResponse\n from fastapi.testclient import TestClient\n@@ -8,7 +10,7 @@ app = FastAPI()\n \n class Invoice(BaseModel):\n     id: str\n-    title: str = None\n+    title: Optional[str] = None\n     customer: str\n     total: float\n \n@@ -36,7 +38,7 @@ subrouter = APIRouter()\n \n \n @subrouter.post(\"/invoices/\", callbacks=invoices_callback_router.routes)\n-def create_invoice(invoice: Invoice, callback_url: HttpUrl = None):\n+def create_invoice(invoice: Invoice, callback_url: Optional[HttpUrl] = None):\n     \"\"\"\n     Create an invoice.\n \n\n@@ -1,95 +0,0 @@\n-from fastapi.testclient import TestClient\n-\n-from query_params.tutorial007 import app\n-\n-client = TestClient(app)\n-\n-openapi_schema = {\n-    \"openapi\": \"3.0.2\",\n-    \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n-    \"paths\": {\n-        \"/items/{item_id}\": {\n-            \"get\": {\n-                \"responses\": {\n-                    \"200\": {\n-                        \"description\": \"Successful Response\",\n-                        \"content\": {\"application/json\": {\"schema\": {}}},\n-                    },\n-                    \"422\": {\n-                        \"description\": \"Validation Error\",\n-                        \"content\": {\n-                            \"application/json\": {\n-                                \"schema\": {\n-                                    \"$ref\": \"#/components/schemas/HTTPValidationError\"\n-                                }\n-                            }\n-                        },\n-                    },\n-                },\n-                \"summary\": \"Read User Item\",\n-                \"operationId\": \"read_user_item_items__item_id__get\",\n-                \"parameters\": [\n-                    {\n-                        \"required\": True,\n-                        \"schema\": {\"title\": \"Item Id\", \"type\": \"string\"},\n-                        \"name\": \"item_id\",\n-                        \"in\": \"path\",\n-                    },\n-                    {\n-                        \"required\": False,\n-                        \"schema\": {\"title\": \"Limit\", \"type\": \"integer\"},\n-                        \"name\": \"limit\",\n-                        \"in\": \"query\",\n-                    },\n-                ],\n-            }\n-        }\n-    },\n-    \"components\": {\n-        \"schemas\": {\n-            \"ValidationError\": {\n-                \"title\": \"ValidationError\",\n-                \"required\": [\"loc\", \"msg\", \"type\"],\n-                \"type\": \"object\",\n-                \"properties\": {\n-                    \"loc\": {\n-                        \"title\": \"Location\",\n-                        \"type\": \"array\",\n-                        \"items\": {\"type\": \"string\"},\n-                    },\n-                    \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n-                    \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n-                },\n-            },\n-            \"HTTPValidationError\": {\n-                \"title\": \"HTTPValidationError\",\n-                \"type\": \"object\",\n-                \"properties\": {\n-                    \"detail\": {\n-                        \"title\": \"Detail\",\n-                        \"type\": \"array\",\n-                        \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n-                    }\n-                },\n-            },\n-        }\n-    },\n-}\n-\n-\n-def test_openapi():\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == openapi_schema\n-\n-\n-def test_read_item():\n-    response = client.get(\"/items/foo\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"item_id\": \"foo\", \"limit\": None}\n-\n-\n-def test_read_item_query():\n-    response = client.get(\"/items/foo?limit=5\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"item_id\": \"foo\", \"limit\": 5}\n\n@@ -31,7 +31,12 @@ openapi_schema = {\n                 \"parameters\": [\n                     {\n                         \"required\": False,\n-                        \"schema\": {\"title\": \"Q\", \"type\": \"array\", \"items\": {}},\n+                        \"schema\": {\n+                            \"title\": \"Q\",\n+                            \"type\": \"array\",\n+                            \"items\": {},\n+                            \"default\": [],\n+                        },\n                         \"name\": \"q\",\n                         \"in\": \"query\",\n                     }\n@@ -88,4 +93,4 @@ def test_query_no_values():\n     url = \"/items/\"\n     response = client.get(url)\n     assert response.status_code == 200, response.text\n-    assert response.json() == {\"q\": None}\n+    assert response.json() == {\"q\": []}\n\n@@ -1,4 +1,4 @@\n-from typing import List\n+from typing import List, Optional\n \n import pytest\n from fastapi import FastAPI\n@@ -10,7 +10,7 @@ app = FastAPI()\n \n class Item(BaseModel):\n     name: str\n-    price: float = None\n+    price: Optional[float] = None\n     owner_ids: List[int] = None\n \n \n\n@@ -1,4 +1,4 @@\n-from typing import List\n+from typing import List, Optional\n \n import pytest\n from fastapi import FastAPI\n@@ -12,7 +12,7 @@ app = FastAPI()\n @dataclass\n class Item:\n     name: str\n-    price: float = None\n+    price: Optional[float] = None\n     owner_ids: List[int] = None\n \n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
