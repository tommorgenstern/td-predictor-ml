{"custom_id": "requests#96ba401c1296ab1dda74a2365ef36d88f7d144ef", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 7 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): -1/0 | Churn Δ: 8 | Churn Cumulative: 28 | Contributors (this commit): 4 | Commits (past 90d): 3 | Contributors (cumulative): 4 | DMM Complexity: 1.0\n\nDIFF:\n@@ -236,13 +236,7 @@ def get_netrc_auth(url, raise_errors=False):\n             return\n \n         ri = urlparse(url)\n-\n-        # Strip port numbers from netloc. This weird `if...encode`` dance is\n-        # used for Python 3.2, which doesn't support unicode literals.\n-        splitstr = b\":\"\n-        if isinstance(url, str):\n-            splitstr = splitstr.decode(\"ascii\")\n-        host = ri.netloc.split(splitstr)[0]\n+        host = ri.hostname\n \n         try:\n             _netrc = netrc(netrc_path).authenticators(host)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#7bc45877a86192af77645e156eb3744f95b47dae", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 31 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): 2/2 | Churn Δ: 31 | Churn Cumulative: 7412 | Contributors (this commit): 94 | Commits (past 90d): 2 | Contributors (cumulative): 94 | DMM Complexity: 1.0\n\nDIFF:\n@@ -7,6 +7,7 @@ import json\n import os\n import pickle\n import re\n+import tempfile\n import threading\n import warnings\n from unittest import mock\n@@ -704,6 +705,36 @@ class TestRequests:\n         finally:\n             requests.sessions.get_netrc_auth = old_auth\n \n+    def test_basicauth_with_netrc_leak(self, httpbin):\n+        url1 = httpbin(\"basic-auth\", \"user\", \"pass\")\n+        url = url1[len(\"http://\") :]\n+        domain = url.split(\":\")[0]\n+        url = f\"http://example.com:@{url}\"\n+\n+        netrc_file = \"\"\n+        with tempfile.NamedTemporaryFile(mode=\"w\", delete=False) as fp:\n+            fp.write(\"machine example.com\\n\")\n+            fp.write(\"login wronguser\\n\")\n+            fp.write(\"password wrongpass\\n\")\n+            fp.write(f\"machine {domain}\\n\")\n+            fp.write(\"login user\\n\")\n+            fp.write(\"password pass\\n\")\n+            fp.close()\n+            netrc_file = fp.name\n+\n+        old_netrc = os.environ.get(\"NETRC\", \"\")\n+        os.environ[\"NETRC\"] = netrc_file\n+\n+        try:\n+            # Should use netrc\n+            # Make sure that we don't use the example.com credentails\n+            # for the request\n+            r = requests.get(url)\n+            assert r.status_code == 200\n+        finally:\n+            os.environ[\"NETRC\"] = old_netrc\n+            os.unlink(netrc_file)\n+\n     def test_DIGEST_HTTP_200_OK_GET(self, httpbin):\n         for authtype in self.digest_auth_algo:\n             auth = HTTPDigestAuth(\"user\", \"pass\")\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#5b4b64c3467fd7a3c03f91ee641aaa348b6bed3b", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 19 | Lines Deleted: 7 | Files Changed: 2 | Hunks: 4 | Methods Changed: 3 | Complexity Δ (Sum/Max): 1/2 | Churn Δ: 26 | Churn Cumulative: 2464 | Contributors (this commit): 36 | Commits (past 90d): 2 | Contributors (cumulative): 39 | DMM Complexity: 1.0\n\nDIFF:\n@@ -219,14 +219,7 @@ def get_netrc_auth(url, raise_errors=False):\n         netrc_path = None\n \n         for f in netrc_locations:\n-            try:\n             loc = os.path.expanduser(f)\n-            except KeyError:\n-                # os.path.expanduser can fail when $HOME is undefined and\n-                # getpwuid fails. See https://bugs.python.org/issue20164 &\n-                # https://github.com/psf/requests/issues/1846\n-                return\n-\n             if os.path.exists(loc):\n                 netrc_path = loc\n                 break\n\n@@ -23,6 +23,7 @@ from requests.utils import (\n     get_encoding_from_headers,\n     get_encodings_from_content,\n     get_environ_proxies,\n+    get_netrc_auth,\n     guess_filename,\n     guess_json_utf,\n     is_ipv4_address,\n@@ -152,6 +153,24 @@ class TestSuperLen:\n         assert super_len(object()) == 0\n \n \n+class TestGetNetrcAuth:\n+    def test_works(self, tmp_path, monkeypatch):\n+        netrc_path = tmp_path / \".netrc\"\n+        monkeypatch.setenv(\"NETRC\", str(netrc_path))\n+        with open(netrc_path, \"w\") as f:\n+            f.write(\"machine example.com login aaaa password bbbb\\n\")\n+        auth = get_netrc_auth(\"http://example.com/thing\")\n+        assert auth == (\"aaaa\", \"bbbb\")\n+\n+    def test_not_vulnerable_to_bad_url_parsing(self, tmp_path, monkeypatch):\n+        netrc_path = tmp_path / \".netrc\"\n+        monkeypatch.setenv(\"NETRC\", str(netrc_path))\n+        with open(netrc_path, \"w\") as f:\n+            f.write(\"machine example.com login aaaa password bbbb\\n\")\n+        auth = get_netrc_auth(\"http://example.com:@evil.com/&apos;\")\n+        assert auth is None\n+\n+\n class TestToKeyValList:\n     @pytest.mark.parametrize(\n         \"value, expected\",\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#821770e822a20a21b207b3907ea83878bda1d396", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 20 | Contributors (this commit): 2 | Commits (past 90d): 1 | Contributors (cumulative): 2 | DMM Complexity: None\n\nDIFF:\n@@ -5,8 +5,8 @@\n __title__ = \"requests\"\n __description__ = \"Python HTTP for Humans.\"\n __url__ = \"https://requests.readthedocs.io\"\n-__version__ = \"2.32.3\"\n-__build__ = 0x023203\n+__version__ = \"2.32.4\"\n+__build__ = 0x023204\n __author__ = \"Kenneth Reitz\"\n __author_email__ = \"me@kennethreitz.org\"\n __license__ = \"Apache-2.0\"\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#3f07f990ac74f1e1691ba17ef8c14007f05846ab", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 248 | Contributors (this commit): 4 | Commits (past 90d): 1 | Contributors (cumulative): 4 | DMM Complexity: None\n\nDIFF:\n@@ -410,7 +410,7 @@ class HTTPAdapter(BaseAdapter):\n           ``\"cert_reqs\"`` will be set\n         * If ``verify`` is a string, (i.e., it is a user-specified trust bundle)\n           ``\"ca_certs\"`` will be set if the string is not a directory recognized\n-          by :py:func:`os.path.isdir`, otherwise ``\"ca_certs_dir\"`` will be\n+          by :py:func:`os.path.isdir`, otherwise ``\"ca_cert_dir\"`` will be\n           set.\n         * If ``\"cert\"`` is specified, ``\"cert_file\"`` will always be set. If\n           ``\"cert\"`` is a tuple with a second item, ``\"key_file\"`` will also\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#90fee0876aea97c639b3bf698d83a12876d2f160", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 8 | Lines Deleted: 31 | Files Changed: 1 | Hunks: 9 | Methods Changed: 2 | Complexity Δ (Sum/Max): -1/0 | Churn Δ: 39 | Churn Cumulative: 287 | Contributors (this commit): 4 | Commits (past 90d): 1 | Contributors (cumulative): 4 | DMM Complexity: 1.0\n\nDIFF:\n@@ -27,7 +27,6 @@ from urllib3.poolmanager import PoolManager, proxy_from_url\n from urllib3.util import Timeout as TimeoutSauce\n from urllib3.util import parse_url\n from urllib3.util.retry import Retry\n-from urllib3.util.ssl_ import create_urllib3_context\n \n from .auth import _basic_auth_str\n from .compat import basestring, urlparse\n@@ -74,19 +73,6 @@ DEFAULT_RETRIES = 0\n DEFAULT_POOL_TIMEOUT = None\n \n \n-try:\n-    import ssl  # noqa: F401\n-\n-    _preloaded_ssl_context = create_urllib3_context()\n-    _preloaded_ssl_context.load_verify_locations(\n-        extract_zipped_paths(DEFAULT_CA_BUNDLE_PATH)\n-    )\n-except ImportError:\n-    # Bypass default SSLContext creation when Python\n-    # interpreter isn't built with the ssl module.\n-    _preloaded_ssl_context = None\n-\n-\n def _urllib3_request_context(\n     request: \"PreparedRequest\",\n     verify: \"bool | str | None\",\n@@ -99,19 +85,9 @@ def _urllib3_request_context(\n     scheme = parsed_request_url.scheme.lower()\n     port = parsed_request_url.port\n \n-    # Determine if we have and should use our default SSLContext\n-    # to optimize performance on standard requests.\n-    poolmanager_kwargs = getattr(poolmanager, \"connection_pool_kw\", {})\n-    has_poolmanager_ssl_context = poolmanager_kwargs.get(\"ssl_context\")\n-    should_use_default_ssl_context = (\n-        _preloaded_ssl_context is not None and not has_poolmanager_ssl_context\n-    )\n-\n     cert_reqs = \"CERT_REQUIRED\"\n     if verify is False:\n         cert_reqs = \"CERT_NONE\"\n-    elif verify is True and should_use_default_ssl_context:\n-        pool_kwargs[\"ssl_context\"] = _preloaded_ssl_context\n     elif isinstance(verify, str):\n         if not os.path.isdir(verify):\n             pool_kwargs[\"ca_certs\"] = verify\n@@ -314,22 +290,23 @@ class HTTPAdapter(BaseAdapter):\n         :param cert: The SSL certificate to verify.\n         \"\"\"\n         if url.lower().startswith(\"https\") and verify:\n-            conn.cert_reqs = \"CERT_REQUIRED\"\n+            cert_loc = None\n \n-            # Only load the CA certificates if 'verify' is a string indicating the CA bundle to use.\n-            # Otherwise, if verify is a boolean, we don't load anything since\n-            # the connection will be using a context with the default certificates already loaded,\n-            # and this avoids a call to the slow load_verify_locations()\n+            # Allow self-specified cert location.\n             if verify is not True:\n-                # `verify` must be a str with a path then\n                 cert_loc = verify\n \n-                if not os.path.exists(cert_loc):\n+            if not cert_loc:\n+                cert_loc = extract_zipped_paths(DEFAULT_CA_BUNDLE_PATH)\n+\n+            if not cert_loc or not os.path.exists(cert_loc):\n                 raise OSError(\n                     f\"Could not find a suitable TLS CA certificate bundle, \"\n                     f\"invalid path: {cert_loc}\"\n                 )\n \n+            conn.cert_reqs = \"CERT_REQUIRED\"\n+\n             if not os.path.isdir(cert_loc):\n                 conn.ca_certs = cert_loc\n             else:\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
