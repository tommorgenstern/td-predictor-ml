{"custom_id": "requests#459f8dfccb7ee2e1dc9e041b7aebc2392219c35e", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 4 | Lines Deleted: 4 | Files Changed: 1 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): 2/2 | Churn Δ: 8 | Churn Cumulative: 2816 | Contributors (this commit): 52 | Commits (past 90d): 17 | Contributors (cumulative): 52 | DMM Complexity: None\n\nDIFF:\n@@ -218,11 +218,11 @@ class SessionRedirectMixin(object):\n         \"\"\"\n         headers = prepared_request.headers\n         url = prepared_request.url\n-        new_proxies = {}\n-\n-        if not should_bypass_proxies(url):\n-            environ_proxies = get_environ_proxies(url)\n         scheme = urlparse(url).scheme\n+        new_proxies = proxies.copy() if proxies is not None else {}\n+\n+        if self.trust_env and not should_bypass_proxies(url):\n+            environ_proxies = get_environ_proxies(url)\n \n             proxy = environ_proxies.get(scheme)\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#142b26ea7b4a4badd5ba98ed0e8490e3c7134592", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 9100 | Contributors (this commit): 127 | Commits (past 90d): 13 | Contributors (cumulative): 127 | DMM Complexity: None\n\nDIFF:\n@@ -791,8 +791,8 @@ class Response(object):\n             raise HTTPError(http_error_msg, response=self)\n \n     def close(self):\n-        \"\"\"Closes the underlying file descriptor and releases the connection\n-        back to the pool.\n+        \"\"\"Releases the connection back to the pool. Once this method has been\n+        called the underlying ``raw`` object must not be accessed again.\n \n         *Note: Should not normally need to be called explicitly.*\n         \"\"\"\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#b8049ba2012fe251c7351de6c2c4ad3b274df1f1", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 3 | Churn Cumulative: 397 | Contributors (this commit): 14 | Commits (past 90d): 2 | Contributors (cumulative): 14 | DMM Complexity: None\n\nDIFF:\n@@ -21,7 +21,8 @@ packages = [\n     'requests.packages.urllib3',\n     'requests.packages.urllib3.packages',\n     'requests.packages.urllib3.contrib',\n-    'requests.packages.urllib3.packages.ssl_match_hostname'\n+    'requests.packages.urllib3.util',\n+    'requests.packages.urllib3.packages.ssl_match_hostname',\n ]\n \n requires = []\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#07f9a7ea0201b5e8d9763c41153862f211de12bd", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 537 | Contributors (this commit): 10 | Commits (past 90d): 2 | Contributors (cumulative): 10 | DMM Complexity: None\n\nDIFF:\n@@ -42,8 +42,8 @@ is at <http://python-requests.org>.\n \"\"\"\n \n __title__ = 'requests'\n-__version__ = '2.3.0'\n-__build__ = 0x020300\n+__version__ = '2.2.1'\n+__build__ = 0x020201\n __author__ = 'Kenneth Reitz'\n __license__ = 'Apache 2.0'\n __copyright__ = 'Copyright 2014 Kenneth Reitz'\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#626c48e9471d8075039aeb5daefa61756951e03f", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 15 | Lines Deleted: 8 | Files Changed: 3 | Hunks: 8 | Methods Changed: 3 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 23 | Churn Cumulative: 647 | Contributors (this commit): 6 | Commits (past 90d): 7 | Contributors (cumulative): 12 | DMM Complexity: 0.0\n\nDIFF:\n@@ -10,7 +10,7 @@ urllib3 - Thread-safe connection pooling and re-using.\n \n __author__ = 'Andrey Petrov (andrey.petrov@shazow.net)'\n __license__ = 'MIT'\n-__version__ = '1.8.2'\n+__version__ = 'dev'\n \n \n from .connectionpool import (\n\n@@ -95,7 +95,10 @@ class HTTPConnection(_HTTPConnection, object):\n \n     def _prepare_conn(self, conn):\n         self.sock = conn\n-        if self._tunnel_host:\n+        # the _tunnel_host attribute was added in python 2.6.3 (via\n+        # http://hg.python.org/cpython/rev/0f57b30a152f) so pythons 2.6(0-2) do\n+        # not have them.\n+        if getattr(self, '_tunnel_host', None):\n             # TODO: Fix tunnel so it doesn't depend on self.sock state.\n             self._tunnel()\n \n@@ -165,21 +168,25 @@ class VerifiedHTTPSConnection(HTTPSConnection):\n         resolved_cert_reqs = resolve_cert_reqs(self.cert_reqs)\n         resolved_ssl_version = resolve_ssl_version(self.ssl_version)\n \n-        # the _tunnel_host attribute was added in python 2.6.3 (via\n-        # http://hg.python.org/cpython/rev/0f57b30a152f) so pythons 2.6(0-2) do\n-        # not have them.\n+        hostname = self.host\n         if getattr(self, '_tunnel_host', None):\n+            # _tunnel_host was added in Python 2.6.3\n+            # (See: http://hg.python.org/cpython/rev/0f57b30a152f)\n+\n             self.sock = sock\n             # Calls self._set_hostport(), so self.host is\n             # self._tunnel_host below.\n             self._tunnel()\n \n+            # Override the host with the one we're requesting data from.\n+            hostname = self._tunnel_host\n+\n         # Wrap socket using verification with the root certs in\n         # trusted_root_certs\n         self.sock = ssl_wrap_socket(sock, self.key_file, self.cert_file,\n                                     cert_reqs=resolved_cert_reqs,\n                                     ca_certs=self.ca_certs,\n-                                    server_hostname=self.host,\n+                                    server_hostname=hostname,\n                                     ssl_version=resolved_ssl_version)\n \n         if resolved_cert_reqs != ssl.CERT_NONE:\n@@ -188,7 +195,7 @@ class VerifiedHTTPSConnection(HTTPSConnection):\n                                    self.assert_fingerprint)\n             elif self.assert_hostname is not False:\n                 match_hostname(self.sock.getpeercert(),\n-                               self.assert_hostname or self.host)\n+                               self.assert_hostname or hostname)\n \n \n if ssl:\n\n@@ -15,7 +15,7 @@ def guess_content_type(filename, default='application/octet-stream'):\n     Guess the \"Content-Type\" of a file.\n \n     :param filename:\n-        The filename to guess the \"Content-Type\" of using :mod:`mimetimes`.\n+        The filename to guess the \"Content-Type\" of using :mod:`mimetypes`.\n     :param default:\n         If no \"Content-Type\" can be guessed, default to `default`.\n     \"\"\"\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#c15a8f8a3d8fbe943dcae2603c4ceca7f99ff2bf", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 0 | Lines Deleted: 4 | Files Changed: 1 | Hunks: 2 | Methods Changed: 2 | Complexity Δ (Sum/Max): -1/0 | Churn Δ: 4 | Churn Cumulative: 1729 | Contributors (this commit): 10 | Commits (past 90d): 4 | Contributors (cumulative): 10 | DMM Complexity: 0.0\n\nDIFF:\n@@ -106,12 +106,8 @@ class CaseInsensitiveDict(collections.MutableMapping):\n         return CaseInsensitiveDict(self._store.values())\n \n     def __repr__(self):\n-        return '%s(%r)' % (self.__class__.__name__, dict(self.items()))\n-\n-    def __str__(self):\n         return str(dict(self.items()))\n \n-\n class LookupDict(dict):\n     \"\"\"Dictionary lookup object.\"\"\"\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#c2a1f28a2ebd9448be7b4c8f9207d16c894717c3", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 5 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 3 | Methods Changed: 1 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 6 | Churn Cumulative: 2822 | Contributors (this commit): 53 | Commits (past 90d): 19 | Contributors (cumulative): 53 | DMM Complexity: 0.0\n\nDIFF:\n@@ -19,7 +19,8 @@ from .cookies import (\n from .models import Request, PreparedRequest, DEFAULT_REDIRECT_LIMIT\n from .hooks import default_hooks, dispatch_hook\n from .utils import to_key_val_list, default_headers, to_native_string\n-from .exceptions import TooManyRedirects, InvalidSchema\n+from .exceptions import (\n+    TooManyRedirects, InvalidSchema, ChunkedEncodingError, ContentDecodingError)\n from .structures import CaseInsensitiveDict\n \n from .adapters import HTTPAdapter\n@@ -94,7 +95,10 @@ class SessionRedirectMixin(object):\n         while resp.is_redirect:\n             prepared_request = req.copy()\n \n+            try:\n                 resp.content  # Consume socket so it can be released\n+            except (ChunkedEncodingError, ContentDecodingError, RuntimeError):\n+                resp.raw.read(decode_content=False)\n \n             if i >= self.max_redirects:\n                 raise TooManyRedirects('Exceeded %s redirects.' % self.max_redirects)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#59c8d813818110aac29fd104c2fa012387c2004c", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 4 | Lines Deleted: 6 | Files Changed: 2 | Hunks: 2 | Methods Changed: 2 | Complexity Δ (Sum/Max): 0/1 | Churn Δ: 10 | Churn Cumulative: 3585 | Contributors (this commit): 66 | Commits (past 90d): 31 | Contributors (cumulative): 75 | DMM Complexity: 1.0\n\nDIFF:\n@@ -385,9 +385,4 @@ class HTTPAdapter(BaseAdapter):\n             else:\n                 raise\n \n-        r = self.build_response(request, resp)\n-\n-        if not stream:\n-            r.content\n-\n-        return r\n+        return self.build_response(request, resp)\n\n@@ -592,6 +592,9 @@ class Session(SessionRedirectMixin):\n             r = history.pop()\n             r.history = history\n \n+        if not stream:\n+            r.content\n+\n         return r\n \n     def get_adapter(self, url):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#5e860c08d8b3f14bcdf0382b0535da39a4d5a02e", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 19 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 5/5 | Churn Δ: 19 | Churn Cumulative: 4491 | Contributors (this commit): 74 | Commits (past 90d): 18 | Contributors (cumulative): 74 | DMM Complexity: 1.0\n\nDIFF:\n@@ -917,6 +917,25 @@ class RequestsTestCase(unittest.TestCase):\n \n         assert h1 == h2\n \n+    def test_manual_redirect_with_partial_body_read(self):\n+        s = requests.Session()\n+        r1 = s.get(httpbin('redirect/2'), allow_redirects=False, stream=True)\n+        assert r1.is_redirect\n+        rg = s.resolve_redirects(r1, r1.request, stream=True)\n+\n+        # read only the first eight bytes of the response body,\n+        # then follow the redirect\n+        r1.iter_content(8)\n+        r2 = next(rg)\n+        assert r2.is_redirect\n+\n+        # read all of the response via iter_content,\n+        # then follow the redirect\n+        for _ in r2.iter_content():\n+            pass\n+        r3 = next(rg)\n+        assert not r3.is_redirect\n+\n \n class TestContentEncodingDetection(unittest.TestCase):\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#16459910a963c108529585fe8feb78f862d6d9ba", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 20 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 3 | Complexity Δ (Sum/Max): 4/4 | Churn Δ: 20 | Churn Cumulative: 4511 | Contributors (this commit): 74 | Commits (past 90d): 19 | Contributors (cumulative): 74 | DMM Complexity: 1.0\n\nDIFF:\n@@ -936,6 +936,26 @@ class RequestsTestCase(unittest.TestCase):\n         r3 = next(rg)\n         assert not r3.is_redirect\n \n+    def _patch_adapter_gzipped_redirect(self, session, url):\n+        adapter = session.get_adapter(url=url)\n+        org_build_response = adapter.build_response\n+        self._patched_response = False\n+\n+        def build_response(*args, **kwargs):\n+            resp = org_build_response(*args, **kwargs)\n+            if not self._patched_response:\n+                resp.raw.headers['content-encoding'] = 'gzip'\n+                self._patched_response = True\n+            return resp\n+\n+        adapter.build_response = build_response\n+\n+    def test_redirect_with_wrong_gzipped_header(self):\n+        s = requests.Session()\n+        url = httpbin('redirect/1')\n+        self._patch_adapter_gzipped_redirect(s, url)\n+        s.get(url)\n+\n \n class TestContentEncodingDetection(unittest.TestCase):\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#6366d3dd190a9e58ca582955cddf7e2ac5f32dcc", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 541 | Contributors (this commit): 10 | Commits (past 90d): 2 | Contributors (cumulative): 10 | DMM Complexity: None\n\nDIFF:\n@@ -42,8 +42,8 @@ is at <http://python-requests.org>.\n \"\"\"\n \n __title__ = 'requests'\n-__version__ = '2.2.1'\n-__build__ = 0x020201\n+__version__ = '2.3.0'\n+__build__ = 0x020300\n __author__ = 'Kenneth Reitz'\n __license__ = 'Apache 2.0'\n __copyright__ = 'Copyright 2014 Kenneth Reitz'\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#f97e78726e7efe64b9a3db27707ec579e859ef06", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 20 | Lines Deleted: 11 | Files Changed: 1 | Hunks: 2 | Methods Changed: 2 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 31 | Churn Cumulative: 791 | Contributors (this commit): 23 | Commits (past 90d): 5 | Contributors (cumulative): 23 | DMM Complexity: 1.0\n\nDIFF:\n@@ -118,6 +118,24 @@ class HTTPAdapter(BaseAdapter):\n         self.poolmanager = PoolManager(num_pools=connections, maxsize=maxsize,\n                                        block=block)\n \n+    def proxy_manager_for(self, proxy):\n+        \"\"\"Return urllib3 ProxyManager for the given proxy. This method should\n+        not be called from user code, and is only exposed for use when\n+        subclassing the :class:`HTTPAdapter <requests.adapters.HTTPAdapter>`.\n+\n+        :param proxy: The proxy to return a urllib3 ProxyManager for.\n+        \"\"\"\n+        if not proxy in self.proxy_manager:\n+            proxy_headers = self.proxy_headers(proxy)\n+            self.proxy_manager[proxy] = proxy_from_url(\n+                                            proxy,\n+                                            proxy_headers=proxy_headers,\n+                                            num_pools=self._pool_connections,\n+                                            maxsize=self._pool_maxsize,\n+                                            block=self._pool_block)\n+\n+        return self.proxy_manager[proxy]\n+\n     def cert_verify(self, conn, url, verify, cert):\n         \"\"\"Verify a SSL certificate. This method should not be called from user\n         code, and is only exposed for use when subclassing the\n@@ -204,17 +222,8 @@ class HTTPAdapter(BaseAdapter):\n \n         if proxy:\n             proxy = prepend_scheme_if_needed(proxy, 'http')\n-            proxy_headers = self.proxy_headers(proxy)\n-\n-            if not proxy in self.proxy_manager:\n-                self.proxy_manager[proxy] = proxy_from_url(\n-                                                proxy,\n-                                                proxy_headers=proxy_headers,\n-                                                num_pools=self._pool_connections,\n-                                                maxsize=self._pool_maxsize,\n-                                                block=self._pool_block)\n-\n-            conn = self.proxy_manager[proxy].connection_from_url(url)\n+            proxy_manager = self.proxy_manager_for(proxy)\n+            conn = proxy_manager.connection_from_url(url)\n         else:\n             # Only scheme should be lower case\n             parsed = urlparse(url)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#02618c8df5071d608a8c8341e4a44e26f58215d5", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 10 | Lines Deleted: 5 | Files Changed: 1 | Hunks: 3 | Methods Changed: 2 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 15 | Churn Cumulative: 806 | Contributors (this commit): 23 | Commits (past 90d): 6 | Contributors (cumulative): 23 | DMM Complexity: 1.0\n\nDIFF:\n@@ -118,12 +118,16 @@ class HTTPAdapter(BaseAdapter):\n         self.poolmanager = PoolManager(num_pools=connections, maxsize=maxsize,\n                                        block=block)\n \n-    def proxy_manager_for(self, proxy):\n-        \"\"\"Return urllib3 ProxyManager for the given proxy. This method should\n-        not be called from user code, and is only exposed for use when\n-        subclassing the :class:`HTTPAdapter <requests.adapters.HTTPAdapter>`.\n+    def proxy_manager_for(self, proxy, **proxy_kwargs):\n+        \"\"\"Return urllib3 ProxyManager for the given proxy.\n+\n+        This method should not be called from user code, and is only\n+        exposed for use when subclassing the\n+        :class:`HTTPAdapter <requests.adapters.HTTPAdapter>`.\n \n         :param proxy: The proxy to return a urllib3 ProxyManager for.\n+        :param proxy_kwargs: Extra keyword arguments used to configure the Proxy Manager.\n+        :returns: ProxyManager\n         \"\"\"\n         if not proxy in self.proxy_manager:\n             proxy_headers = self.proxy_headers(proxy)\n@@ -132,7 +136,8 @@ class HTTPAdapter(BaseAdapter):\n                                             proxy_headers=proxy_headers,\n                                             num_pools=self._pool_connections,\n                                             maxsize=self._pool_maxsize,\n-                                            block=self._pool_block)\n+                                            block=self._pool_block,\n+                                            **proxy_kwargs)\n \n         return self.proxy_manager[proxy]\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#54e96b40b7c36deb547339e5d3d4ccac75b53b51", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 7 | Lines Deleted: 4 | Files Changed: 1 | Hunks: 3 | Methods Changed: 2 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 11 | Churn Cumulative: 817 | Contributors (this commit): 23 | Commits (past 90d): 7 | Contributors (cumulative): 23 | DMM Complexity: None\n\nDIFF:\n@@ -101,14 +101,17 @@ class HTTPAdapter(BaseAdapter):\n         self.init_poolmanager(self._pool_connections, self._pool_maxsize,\n                               block=self._pool_block)\n \n-    def init_poolmanager(self, connections, maxsize, block=DEFAULT_POOLBLOCK):\n-        \"\"\"Initializes a urllib3 PoolManager. This method should not be called\n-        from user code, and is only exposed for use when subclassing the\n+    def init_poolmanager(self, connections, maxsize, block=DEFAULT_POOLBLOCK, **pool_kwargs):\n+        \"\"\"Initializes a urllib3 PoolManager.\n+\n+        This method should not be called from user code, and is only\n+        exposed for use when subclassing the\n         :class:`HTTPAdapter <requests.adapters.HTTPAdapter>`.\n \n         :param connections: The number of urllib3 connection pools to cache.\n         :param maxsize: The maximum number of connections to save in the pool.\n         :param block: Block when no free connections are available.\n+        :param pool_kwargs: Extra keyword arguments used to initialize the Pool Manager.\n         \"\"\"\n         # save these values for pickling\n         self._pool_connections = connections\n@@ -116,7 +119,7 @@ class HTTPAdapter(BaseAdapter):\n         self._pool_block = block\n \n         self.poolmanager = PoolManager(num_pools=connections, maxsize=maxsize,\n-                                       block=block)\n+                                       block=block, **pool_kwargs)\n \n     def proxy_manager_for(self, proxy, **proxy_kwargs):\n         \"\"\"Return urllib3 ProxyManager for the given proxy.\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#7815953cb41450992e487aa300080064999c4e99", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 0 | Lines Deleted: 23 | Files Changed: 1 | Hunks: 2 | Methods Changed: 4 | Complexity Δ (Sum/Max): -7/0 | Churn Δ: 23 | Churn Cumulative: 1752 | Contributors (this commit): 11 | Commits (past 90d): 5 | Contributors (cumulative): 11 | DMM Complexity: 0.0\n\nDIFF:\n@@ -8,30 +8,7 @@ Data structures that power Requests.\n \n \"\"\"\n \n-import os\n import collections\n-from itertools import islice\n-\n-\n-class IteratorProxy(object):\n-    \"\"\"docstring for IteratorProxy\"\"\"\n-    def __init__(self, i):\n-        self.i = i\n-        # self.i = chain.from_iterable(i)\n-\n-    def __iter__(self):\n-        return self.i\n-\n-    def __len__(self):\n-        if hasattr(self.i, '__len__'):\n-            return len(self.i)\n-        if hasattr(self.i, 'len'):\n-            return self.i.len\n-        if hasattr(self.i, 'fileno'):\n-            return os.fstat(self.i.fileno()).st_size\n-\n-    def read(self, n):\n-        return \"\".join(islice(self.i, None, n))\n \n \n class CaseInsensitiveDict(collections.MutableMapping):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#3b0fcb620dd196acc20d03e259ba6fdb20b1a2c9", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 3 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 165 | Contributors (this commit): 14 | Commits (past 90d): 1 | Contributors (cumulative): 14 | DMM Complexity: None\n\nDIFF:\n@@ -75,7 +75,9 @@ is_solaris = ('solar==' in str(sys.platform).lower())   # Complete guess.\n \n try:\n     import simplejson as json\n-except ImportError:\n+except (ImportError, SyntaxError):\n+    # simplejson does not support Python 3.2, it thows a SyntaxError\n+    # because of u'...' Unicode literals.\n     import json\n \n # ---------\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#c8916a08deb8be25d2be38c646fab9b2ab1fb8f7", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 14 | Lines Deleted: 6 | Files Changed: 1 | Hunks: 7 | Methods Changed: 5 | Complexity Δ (Sum/Max): 2/2 | Churn Δ: 20 | Churn Cumulative: 4531 | Contributors (this commit): 75 | Commits (past 90d): 11 | Contributors (cumulative): 75 | DMM Complexity: 1.0\n\nDIFF:\n@@ -16,7 +16,7 @@ import pytest\n from requests.adapters import HTTPAdapter\n from requests.auth import HTTPDigestAuth\n from requests.compat import (\n-    Morsel, cookielib, getproxies, str, urljoin, urlparse)\n+    Morsel, cookielib, getproxies, str, urljoin, urlparse, is_py3)\n from requests.cookies import cookiejar_from_dict, morsel_to_cookie\n from requests.exceptions import InvalidURL, MissingSchema\n from requests.models import PreparedRequest, Response\n@@ -30,6 +30,14 @@ try:\n except ImportError:\n     import io as StringIO\n \n+if is_py3:\n+    def u(s):\n+        return s\n+else:\n+    def u(s):\n+        return s.decode('unicode-escape')\n+\n+\n HTTPBIN = os.environ.get('HTTPBIN_URL', 'http://httpbin.org/')\n # Issue #1483: Make sure the URL always has a trailing slash\n HTTPBIN = HTTPBIN.rstrip('/') + '/'\n@@ -409,7 +417,7 @@ class RequestsTestCase(unittest.TestCase):\n         url = httpbin('post')\n         with open('requirements.txt') as f:\n             pytest.raises(ValueError, \"requests.post(url, data='[{\\\"some\\\": \\\"data\\\"}]', files={'some': f})\")\n-            pytest.raises(ValueError, \"requests.post(url, data=u'[{\\\"some\\\": \\\"data\\\"}]', files={'some': f})\")\n+            pytest.raises(ValueError, \"requests.post(url, data=u('[{\\\"some\\\": \\\"data\\\"}]'), files={'some': f})\")\n \n     def test_request_ok_set(self):\n         r = requests.get(httpbin('status', '404'))\n@@ -456,12 +464,12 @@ class RequestsTestCase(unittest.TestCase):\n \n     def test_unicode_multipart_post(self):\n         r = requests.post(httpbin('post'),\n-                          data={'stuff': u'ëlïxr'},\n+                          data={'stuff': u('ëlïxr')},\n                           files={'file': ('test_requests.py', open(__file__, 'rb'))})\n         assert r.status_code == 200\n \n         r = requests.post(httpbin('post'),\n-                          data={'stuff': u'ëlïxr'.encode('utf-8')},\n+                          data={'stuff': u('ëlïxr').encode('utf-8')},\n                           files={'file': ('test_requests.py', open(__file__, 'rb'))})\n         assert r.status_code == 200\n \n@@ -488,7 +496,7 @@ class RequestsTestCase(unittest.TestCase):\n \n     def test_unicode_method_name(self):\n         files = {'file': open('test_requests.py', 'rb')}\n-        r = requests.request(method=u'POST', url=httpbin('post'), files=files)\n+        r = requests.request(method=u('POST'), url=httpbin('post'), files=files)\n         assert r.status_code == 200\n \n     def test_custom_content_type(self):\n@@ -865,7 +873,7 @@ class RequestsTestCase(unittest.TestCase):\n         assert r.url == url\n \n     def test_header_keys_are_native(self):\n-        headers = {u'unicode': 'blah', 'byte'.encode('ascii'): 'blah'}\n+        headers = {u('unicode'): 'blah', 'byte'.encode('ascii'): 'blah'}\n         r = requests.Request('GET', httpbin('get'), headers=headers)\n         p = r.prepare()\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#3346ad1134bbf50e9d9ad36ddd396536c18fe6bc", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 4 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 9104 | Contributors (this commit): 127 | Commits (past 90d): 6 | Contributors (cumulative): 127 | DMM Complexity: 1.0\n\nDIFF:\n@@ -556,6 +556,10 @@ class Response(object):\n         #: and the arrival of the response (as a timedelta)\n         self.elapsed = datetime.timedelta(0)\n \n+        #: The :class:`PreparedRequest <PreparedRequest>` object to which this\n+        #: is a response.\n+        self.request = None\n+\n     def __getstate__(self):\n         # Consume everything; accessing the content attribute makes\n         # sure the content has been fully read.\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#3faff0b8ea2c3c7d87272971893234e26a01d9fc", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 9106 | Contributors (this commit): 127 | Commits (past 90d): 7 | Contributors (cumulative): 127 | DMM Complexity: None\n\nDIFF:\n@@ -433,7 +433,7 @@ class PreparedRequest(RequestEncodingMixin, RequestHooksMixin):\n             else:\n                 if data:\n                     body = self._encode_params(data)\n-                    if isinstance(data, str) or isinstance(data, builtin_str) or hasattr(data, 'read'):\n+                    if isinstance(data, basestring) or isinstance(data, builtin_str) or hasattr(data, 'read'):\n                         content_type = None\n                     else:\n                         content_type = 'application/x-www-form-urlencoded'\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#5ab79e2514b663ac8e0a82981efe0a5e69efe01c", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): -1/0 | Churn Δ: 2 | Churn Cumulative: 9108 | Contributors (this commit): 127 | Commits (past 90d): 8 | Contributors (cumulative): 127 | DMM Complexity: None\n\nDIFF:\n@@ -433,7 +433,7 @@ class PreparedRequest(RequestEncodingMixin, RequestHooksMixin):\n             else:\n                 if data:\n                     body = self._encode_params(data)\n-                    if isinstance(data, basestring) or isinstance(data, builtin_str) or hasattr(data, 'read'):\n+                    if isinstance(data, basestring) or hasattr(data, 'read'):\n                         content_type = None\n                     else:\n                         content_type = 'application/x-www-form-urlencoded'\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#32f600b0836a86596aa3edc98aaa6827f6fe4644", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 30 | Lines Deleted: 2 | Files Changed: 2 | Hunks: 2 | Methods Changed: 5 | Complexity Δ (Sum/Max): 7/5 | Churn Δ: 32 | Churn Cumulative: 13671 | Contributors (this commit): 159 | Commits (past 90d): 19 | Contributors (cumulative): 204 | DMM Complexity: 1.0\n\nDIFF:\n@@ -309,8 +309,8 @@ class PreparedRequest(RequestEncodingMixin, RequestHooksMixin):\n         p = PreparedRequest()\n         p.method = self.method\n         p.url = self.url\n-        p.headers = self.headers.copy()\n-        p._cookies = self._cookies.copy()\n+        p.headers = self.headers.copy() if self.headers is not None else None\n+        p._cookies = self._cookies.copy() if self._cookies is not None else None\n         p.body = self.body\n         p.hooks = self.hooks\n         return p\n\n@@ -1369,6 +1369,34 @@ def test_data_argument_accepts_tuples(list_of_tuples):\n         )\n         assert p.body == urlencode(data)\n \n+def assert_copy(p, p_copy):\n+    for attr in ('method', 'url', 'headers', '_cookies', 'body', 'hooks'):\n+        assert getattr(p, attr) == getattr(p_copy, attr)\n+\n+def test_prepared_request_empty_copy():\n+    p = PreparedRequest()\n+    assert_copy(p, p.copy())\n+\n+def test_prepared_request_no_cookies_copy():\n+    p = PreparedRequest()\n+    p.prepare(\n+        method='GET',\n+        url='http://www.example.com',\n+        data='foo=bar',\n+        hooks=default_hooks()\n+    )\n+    assert_copy(p, p.copy())\n+\n+def test_prepared_request_complete_copy():\n+    p = PreparedRequest()\n+    p.prepare(\n+        method='GET',\n+        url='http://www.example.com',\n+        data='foo=bar',\n+        hooks=default_hooks(),\n+        cookies={'foo': 'bar'}\n+    )\n+    assert_copy(p, p.copy())\n \n if __name__ == '__main__':\n     unittest.main()\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#22433163b35bb451e4804b8d757ef25d58e1171a", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 2829 | Contributors (this commit): 53 | Commits (past 90d): 11 | Contributors (cumulative): 53 | DMM Complexity: None\n\nDIFF:\n@@ -118,7 +118,7 @@ class SessionRedirectMixin(object):\n             parsed = urlparse(url)\n             url = parsed.geturl()\n \n-            # Facilitate non-RFC2616-compliant 'location' headers\n+            # Facilitate relative 'location' headers, as allowed by RFC 7231.\n             # (e.g. '/path/to/resource' instead of 'http://domain.tld/path/to/resource')\n             # Compliant with RFC3986, we percent encode the url.\n             if not urlparse(url).netloc:\n@@ -128,7 +128,7 @@ class SessionRedirectMixin(object):\n \n             prepared_request.url = to_native_string(url)\n \n-            # http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.3.4\n+            # http://tools.ietf.org/html/rfc7231#section-6.4.4\n             if (resp.status_code == codes.see_other and\n                     method != 'HEAD'):\n                 method = 'GET'\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#d977ee8a2494903178f5b63756b65fc4dedb3715", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 13 | Lines Deleted: 4 | Files Changed: 2 | Hunks: 5 | Methods Changed: 2 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 17 | Churn Cumulative: 5785 | Contributors (this commit): 96 | Commits (past 90d): 11 | Contributors (cumulative): 106 | DMM Complexity: 1.0\n\nDIFF:\n@@ -16,7 +16,7 @@ from base64 import b64encode\n \n from .compat import urlparse, str\n from .cookies import extract_cookies_to_jar\n-from .utils import parse_dict_header\n+from .utils import parse_dict_header, to_native_string\n \n CONTENT_TYPE_FORM_URLENCODED = 'application/x-www-form-urlencoded'\n CONTENT_TYPE_MULTI_PART = 'multipart/form-data'\n@@ -25,7 +25,11 @@ CONTENT_TYPE_MULTI_PART = 'multipart/form-data'\n def _basic_auth_str(username, password):\n     \"\"\"Returns a Basic Auth string.\"\"\"\n \n-    return 'Basic ' + b64encode(('%s:%s' % (username, password)).encode('latin1')).strip().decode('latin1')\n+    authstr = 'Basic ' + b64encode(\n+        ('%s:%s' % (username, password)).encode('latin1')\n+    ).strip()\n+\n+    return to_native_string(authstr, encoding='latin1')\n \n \n class AuthBase(object):\n\n@@ -14,9 +14,9 @@ import io\n import requests\n import pytest\n from requests.adapters import HTTPAdapter\n-from requests.auth import HTTPDigestAuth\n+from requests.auth import HTTPDigestAuth, _basic_auth_str\n from requests.compat import (\n-    Morsel, cookielib, getproxies, str, urljoin, urlparse, is_py3)\n+    Morsel, cookielib, getproxies, str, urljoin, urlparse, is_py3, builtin_str)\n from requests.cookies import cookiejar_from_dict, morsel_to_cookie\n from requests.exceptions import InvalidURL, MissingSchema\n from requests.models import PreparedRequest, Response\n@@ -964,6 +964,11 @@ class RequestsTestCase(unittest.TestCase):\n         self._patch_adapter_gzipped_redirect(s, url)\n         s.get(url)\n \n+    def test_basic_auth_str_is_always_native(self):\n+        s = _basic_auth_str(\"test\", \"test\")\n+        assert isinstance(s, builtin_str)\n+        assert s == \"Basic dGVzdDp0ZXN0\"\n+\n \n class TestContentEncodingDetection(unittest.TestCase):\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#2b8353d3b3e533945bb82d6510ed2dfb15663045", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 4 | Lines Deleted: 4 | Files Changed: 1 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 8 | Churn Cumulative: 1225 | Contributors (this commit): 30 | Commits (past 90d): 2 | Contributors (cumulative): 30 | DMM Complexity: None\n\nDIFF:\n@@ -25,11 +25,11 @@ CONTENT_TYPE_MULTI_PART = 'multipart/form-data'\n def _basic_auth_str(username, password):\n     \"\"\"Returns a Basic Auth string.\"\"\"\n \n-    authstr = 'Basic ' + b64encode(\n-        ('%s:%s' % (username, password)).encode('latin1')\n-    ).strip()\n+    authstr = 'Basic ' + to_native_string(\n+        b64encode(('%s:%s' % (username, password)).encode('latin1')).strip()\n+    )\n \n-    return to_native_string(authstr, encoding='latin1')\n+    return authstr\n \n \n class AuthBase(object):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#e2c4da7dd2f4a50bf8b386724c7b6f016b10504e", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 47 | Lines Deleted: 24 | Files Changed: 1 | Hunks: 28 | Methods Changed: 13 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 71 | Churn Cumulative: 4639 | Contributors (this commit): 77 | Commits (past 90d): 11 | Contributors (cumulative): 77 | DMM Complexity: 1.0\n\nDIFF:\n@@ -19,10 +19,10 @@ from requests.compat import (\n     Morsel, cookielib, getproxies, str, urljoin, urlparse, is_py3, builtin_str)\n from requests.cookies import cookiejar_from_dict, morsel_to_cookie\n from requests.exceptions import InvalidURL, MissingSchema\n-from requests.models import PreparedRequest, Response\n+from requests.models import PreparedRequest\n from requests.structures import CaseInsensitiveDict\n from requests.sessions import SessionRedirectMixin\n-from requests.models import PreparedRequest, urlencode\n+from requests.models import urlencode\n from requests.hooks import default_hooks\n \n try:\n@@ -153,7 +153,7 @@ class RequestsTestCase(unittest.TestCase):\n     def test_set_cookie_on_301(self):\n         s = requests.session()\n         url = httpbin('cookies/set?foo=bar')\n-        r = s.get(url)\n+        s.get(url)\n         assert s.cookies['foo'] == 'bar'\n \n     def test_cookie_sent_on_redirect(self):\n@@ -404,7 +404,8 @@ class RequestsTestCase(unittest.TestCase):\n         assert post1.status_code == 200\n \n         with open('requirements.txt') as f:\n-            post2 = requests.post(url, data={'some': 'data'}, files={'some': f})\n+            post2 = requests.post(\n+                url, data={'some': 'data'}, files={'some': f})\n         assert post2.status_code == 200\n \n         post4 = requests.post(url, data='[{\"some\": \"json\"}]')\n@@ -444,7 +445,10 @@ class RequestsTestCase(unittest.TestCase):\n         requests.get(httpbin('ø'), params={'foo': 'foo'})\n \n     def test_unicode_header_name(self):\n-        requests.put(httpbin('put'), headers={str('Content-Type'): 'application/octet-stream'}, data='\\xff') # compat.str is unicode.\n+        requests.put(\n+            httpbin('put'),\n+            headers={str('Content-Type'): 'application/octet-stream'},\n+            data='\\xff')  # compat.str is unicode.\n \n     def test_pyopenssl_redirect(self):\n         requests.get('https://httpbin.org/status/301')\n@@ -456,29 +460,34 @@ class RequestsTestCase(unittest.TestCase):\n         assert r.url == httpbin('get?test=foo&test=baz')\n \n     def test_different_encodings_dont_break_post(self):\n-        r = requests.post(httpbin('post'),\n+        r = requests.post(\n+            httpbin('post'),\n             data={'stuff': json.dumps({'a': 123})},\n             params={'blah': 'asdf1234'},\n             files={'file': ('test_requests.py', open(__file__, 'rb'))})\n         assert r.status_code == 200\n \n     def test_unicode_multipart_post(self):\n-        r = requests.post(httpbin('post'),\n+        r = requests.post(\n+            httpbin('post'),\n             data={'stuff': u('ëlïxr')},\n             files={'file': ('test_requests.py', open(__file__, 'rb'))})\n         assert r.status_code == 200\n \n-        r = requests.post(httpbin('post'),\n+        r = requests.post(\n+            httpbin('post'),\n             data={'stuff': u('ëlïxr').encode('utf-8')},\n             files={'file': ('test_requests.py', open(__file__, 'rb'))})\n         assert r.status_code == 200\n \n-        r = requests.post(httpbin('post'),\n+        r = requests.post(\n+            httpbin('post'),\n             data={'stuff': 'elixr'},\n             files={'file': ('test_requests.py', open(__file__, 'rb'))})\n         assert r.status_code == 200\n \n-        r = requests.post(httpbin('post'),\n+        r = requests.post(\n+            httpbin('post'),\n             data={'stuff': 'elixr'.encode('utf-8')},\n             files={'file': ('test_requests.py', open(__file__, 'rb'))})\n         assert r.status_code == 200\n@@ -496,11 +505,13 @@ class RequestsTestCase(unittest.TestCase):\n \n     def test_unicode_method_name(self):\n         files = {'file': open('test_requests.py', 'rb')}\n-        r = requests.request(method=u('POST'), url=httpbin('post'), files=files)\n+        r = requests.request(\n+            method=u('POST'), url=httpbin('post'), files=files)\n         assert r.status_code == 200\n \n     def test_custom_content_type(self):\n-        r = requests.post(httpbin('post'),\n+        r = requests.post(\n+            httpbin('post'),\n             data={'stuff': json.dumps({'a': 123})},\n             files={'file1': ('test_requests.py', open(__file__, 'rb')),\n                    'file2': ('test_requests', open(__file__, 'rb'),\n@@ -563,7 +574,8 @@ class RequestsTestCase(unittest.TestCase):\n         prep = s.prepare_request(req)\n         resp = s.send(prep)\n \n-        assert resp.json()['headers']['Dummy-Auth-Test'] == 'dummy-auth-test-ok'\n+        assert resp.json()['headers'][\n+            'Dummy-Auth-Test'] == 'dummy-auth-test-ok'\n \n     def test_links(self):\n         r = requests.Response()\n@@ -694,7 +706,6 @@ class RequestsTestCase(unittest.TestCase):\n         # make sure one can use items multiple times\n         assert list(items) == list(items)\n \n-\n     def test_time_elapsed_blank(self):\n         r = requests.get(httpbin('get'))\n         td = r.elapsed\n@@ -862,7 +873,6 @@ class RequestsTestCase(unittest.TestCase):\n         r = s.get(httpbin('get'), params={'FOO': 'bar'})\n         assert r.json()['args'] == {'foo': 'bar', 'FOO': 'bar'}\n \n-\n     def test_long_authinfo_in_url(self):\n         url = 'http://{0}:{1}@{2}:9000/path?query#frag'.format(\n             'E8A3BE87-9E3F-4620-8858-95478E385B5B',\n@@ -1161,20 +1171,24 @@ class UtilsTestCase(unittest.TestCase):\n         from requests.utils import super_len\n \n         assert super_len(StringIO.StringIO()) == 0\n-        assert super_len(StringIO.StringIO('with so much drama in the LBC')) == 29\n+        assert super_len(\n+            StringIO.StringIO('with so much drama in the LBC')) == 29\n \n         assert super_len(BytesIO()) == 0\n-        assert super_len(BytesIO(b\"it's kinda hard bein' snoop d-o-double-g\")) == 40\n+        assert super_len(\n+            BytesIO(b\"it's kinda hard bein' snoop d-o-double-g\")) == 40\n \n         try:\n             import cStringIO\n         except ImportError:\n             pass\n         else:\n-            assert super_len(cStringIO.StringIO('but some how, some way...')) == 25\n+            assert super_len(\n+                cStringIO.StringIO('but some how, some way...')) == 25\n \n     def test_get_environ_proxies_ip_ranges(self):\n-        \"\"\" Ensures that IP addresses are correctly matches with ranges in no_proxy variable \"\"\"\n+        \"\"\"Ensures that IP addresses are correctly matches with ranges\n+        in no_proxy variable.\"\"\"\n         from requests.utils import get_environ_proxies\n         os.environ['no_proxy'] = \"192.168.0.0/24,127.0.0.1,localhost.localdomain,172.16.1.1\"\n         assert get_environ_proxies('http://192.168.0.1:5000/') == {}\n@@ -1185,10 +1199,12 @@ class UtilsTestCase(unittest.TestCase):\n         assert get_environ_proxies('http://192.168.1.1/') != {}\n \n     def test_get_environ_proxies(self):\n-        \"\"\" Ensures that IP addresses are correctly matches with ranges in no_proxy variable \"\"\"\n+        \"\"\"Ensures that IP addresses are correctly matches with ranges\n+        in no_proxy variable.\"\"\"\n         from requests.utils import get_environ_proxies\n         os.environ['no_proxy'] = \"127.0.0.1,localhost.localdomain,192.168.0.0/24,172.16.1.1\"\n-        assert get_environ_proxies('http://localhost.localdomain:5000/v1.0/') == {}\n+        assert get_environ_proxies(\n+            'http://localhost.localdomain:5000/v1.0/') == {}\n         assert get_environ_proxies('http://www.requests.com/') != {}\n \n     def test_is_ipv4_address(self):\n@@ -1214,12 +1230,15 @@ class UtilsTestCase(unittest.TestCase):\n         assert not address_in_network('172.16.0.1', '192.168.1.0/24')\n \n     def test_get_auth_from_url(self):\n-        \"\"\" Ensures that username and password in well-encoded URI as per RFC 3986 are correclty extracted \"\"\"\n+        \"\"\"Ensures that username and password in well-encoded URI as per\n+        RFC 3986 are correclty extracted.\"\"\"\n         from requests.utils import get_auth_from_url\n         from requests.compat import quote\n         percent_encoding_test_chars = \"%!*'();:@&=+$,/?#[] \"\n         url_address = \"request.com/url.html#test\"\n-        url = \"http://\" + quote(percent_encoding_test_chars, '') + ':' + quote(percent_encoding_test_chars, '') + '@' + url_address\n+        url = \"http://\" + quote(\n+            percent_encoding_test_chars, '') + ':' + quote(\n+            percent_encoding_test_chars, '') + '@' + url_address\n         (username, password) = get_auth_from_url(url)\n         assert username == percent_encoding_test_chars\n         assert password == percent_encoding_test_chars\n@@ -1286,7 +1305,7 @@ class TestMorselToCookieMaxAge(unittest.TestCase):\n class TestTimeout:\n     def test_stream_timeout(self):\n         try:\n-            r = requests.get('https://httpbin.org/delay/10', timeout=5.0)\n+            requests.get('https://httpbin.org/delay/10', timeout=5.0)\n         except requests.exceptions.Timeout as e:\n             assert 'Read timed out' in e.args[0].args[0]\n \n@@ -1374,14 +1393,17 @@ def test_data_argument_accepts_tuples(list_of_tuples):\n         )\n         assert p.body == urlencode(data)\n \n+\n def assert_copy(p, p_copy):\n     for attr in ('method', 'url', 'headers', '_cookies', 'body', 'hooks'):\n         assert getattr(p, attr) == getattr(p_copy, attr)\n \n+\n def test_prepared_request_empty_copy():\n     p = PreparedRequest()\n     assert_copy(p, p.copy())\n \n+\n def test_prepared_request_no_cookies_copy():\n     p = PreparedRequest()\n     p.prepare(\n@@ -1392,6 +1414,7 @@ def test_prepared_request_no_cookies_copy():\n     )\n     assert_copy(p, p.copy())\n \n+\n def test_prepared_request_complete_copy():\n     p = PreparedRequest()\n     p.prepare(\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
