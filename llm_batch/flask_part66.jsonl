{"custom_id": "flask#4f815015b803a146ddc24a2dfadd9ed9b22d7de7", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 68 | Lines Deleted: 43 | Files Changed: 2 | Hunks: 8 | Methods Changed: 8 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 111 | Churn Cumulative: 5025 | Contributors (this commit): 84 | Commits (past 90d): 18 | Contributors (cumulative): 89 | DMM Complexity: 1.0\n\nDIFF:\n@@ -133,6 +133,8 @@ class Flask(_PackageBoundObject):\n     :param static_folder: the folder with static files that should be served\n                           at `static_url_path`.  Defaults to the ``'static'``\n                           folder in the root path of the application.\n+                          folder in the root path of the application. Defaults\n+                          to None.\n     :param host_matching: sets the app's ``url_map.host_matching`` to the given\n                           given value. Defaults to False.\n     :param static_host: the host to use when adding the static route. Defaults\n@@ -1460,15 +1462,17 @@ class Flask(_PackageBoundObject):\n         return f\n \n     def _find_error_handler(self, e):\n-        \"\"\"Finds a registered error handler for the request’s blueprint.\n-        Otherwise falls back to the app, returns None if not a suitable\n-        handler is found.\n+        \"\"\"Find a registered error handler for a request in this order:\n+        blueprint handler for a specific code, app handler for a specific code,\n+        blueprint generic HTTPException handler, app generic HTTPException handler,\n+        and returns None if a suitable handler is not found.\n         \"\"\"\n         exc_class, code = self._get_exc_class_and_code(type(e))\n \n         def find_handler(handler_map):\n             if not handler_map:\n                 return\n+\n             for cls in exc_class.__mro__:\n                 handler = handler_map.get(cls)\n                 if handler is not None:\n@@ -1476,23 +1480,12 @@ class Flask(_PackageBoundObject):\n                     handler_map[exc_class] = handler\n                     return handler\n \n-        # try blueprint handlers\n-        handler = find_handler(self.error_handler_spec\n-                               .get(request.blueprint, {})\n-                               .get(code))\n-        if handler is not None:\n-            return handler\n-\n-        # fall back to app handlers\n-        handler = find_handler(self.error_handler_spec[None].get(code))\n-        if handler is not None:\n-            return handler\n-\n-        try:\n-            handler = find_handler(self.error_handler_spec[None][None])\n-        except KeyError:\n-            handler = None\n+        # check for any in blueprint or app\n+        for name, c in ((request.blueprint, code), (None, code),\n+                        (request.blueprint, None), (None, None)):\n+            handler = find_handler(self.error_handler_spec.get(name, {}).get(c))\n \n+            if handler:\n                 return handler\n \n     def handle_http_exception(self, e):\n\n@@ -1,5 +1,10 @@\n # -*- coding: utf-8 -*-\n-from werkzeug.exceptions import Forbidden, InternalServerError, HTTPException, NotFound\n+from werkzeug.exceptions import (\n+    Forbidden,\n+    InternalServerError,\n+    HTTPException,\n+    NotFound\n+    )\n import flask\n \n \n@@ -32,29 +37,6 @@ def test_error_handler_no_match():\n     assert c.get('/keyerror').data == b'KeyError'\n \n \n-def test_default_error_handler():\n-    app = flask.Flask(__name__)\n-\n-    @app.errorhandler(HTTPException)\n-    def catchall_errorhandler(e):\n-        assert isinstance(e, HTTPException)\n-        assert isinstance(e, NotFound)\n-        return 'default'\n-\n-    @app.errorhandler(Forbidden)\n-    def catchall_errorhandler(e):\n-        assert isinstance(e, Forbidden)\n-        return 'forbidden'\n-\n-    @app.route('/forbidden')\n-    def forbidden():\n-        raise Forbidden()\n-\n-    c = app.test_client()\n-    assert c.get('/undefined').data == b'default'\n-    assert c.get('/forbidden').data == b'forbidden'\n-\n-\n def test_error_handler_subclass():\n     app = flask.Flask(__name__)\n \n@@ -161,3 +143,53 @@ def test_error_handler_blueprint():\n \n     assert c.get('/error').data == b'app-error'\n     assert c.get('/bp/error').data == b'bp-error'\n+\n+\n+def test_default_error_handler():\n+    bp = flask.Blueprint('bp', __name__)\n+\n+    @bp.errorhandler(HTTPException)\n+    def bp_exception_handler(e):\n+        assert isinstance(e, HTTPException)\n+        assert isinstance(e, NotFound)\n+        return 'bp-default'\n+\n+    @bp.errorhandler(Forbidden)\n+    def bp_exception_handler(e):\n+        assert isinstance(e, Forbidden)\n+        return 'bp-forbidden'\n+\n+    @bp.route('/undefined')\n+    def bp_registered_test():\n+        raise NotFound()\n+\n+    @bp.route('/forbidden')\n+    def bp_forbidden_test():\n+        raise Forbidden()\n+\n+    app = flask.Flask(__name__)\n+\n+    @app.errorhandler(HTTPException)\n+    def catchall_errorhandler(e):\n+        assert isinstance(e, HTTPException)\n+        assert isinstance(e, NotFound)\n+        return 'default'\n+\n+    @app.errorhandler(Forbidden)\n+    def catchall_errorhandler(e):\n+        assert isinstance(e, Forbidden)\n+        return 'forbidden'\n+\n+    @app.route('/forbidden')\n+    def forbidden():\n+        raise Forbidden()\n+\n+    app.register_blueprint(bp, url_prefix='/bp')\n+\n+    c = app.test_client()\n+    assert c.get('/bp/undefined').data == b'bp-default'\n+    assert c.get('/bp/forbidden').data == b'bp-forbidden'\n+    assert c.get('/undefined').data == b'default'\n+    assert c.get('/forbidden').data == b'forbidden'\n+\n+\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#361dba7e3af06be8f81c7bdd5067c59e08df2df9", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 0 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 4698 | Contributors (this commit): 84 | Commits (past 90d): 17 | Contributors (cumulative): 84 | DMM Complexity: None\n\nDIFF:\n@@ -133,8 +133,6 @@ class Flask(_PackageBoundObject):\n     :param static_folder: the folder with static files that should be served\n                           at `static_url_path`.  Defaults to the ``'static'``\n                           folder in the root path of the application.\n-                          folder in the root path of the application. Defaults\n-                          to None.\n     :param host_matching: sets the app's ``url_map.host_matching`` to the given\n                           given value. Defaults to False.\n     :param static_host: the host to use when adding the static route. Defaults\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#75f537fb87ea3d60465a82c5c221104bcceef1f2", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 41 | Lines Deleted: 0 | Files Changed: 2 | Hunks: 3 | Methods Changed: 3 | Complexity Δ (Sum/Max): 4/4 | Churn Δ: 41 | Churn Cumulative: 429 | Contributors (this commit): 16 | Commits (past 90d): 3 | Contributors (cumulative): 19 | DMM Complexity: 1.0\n\nDIFF:\n@@ -51,6 +51,9 @@ class View(object):\n     #: A list of methods this view can handle.\n     methods = None\n \n+    #: Setting this disables or force-enables the automatic options handling.\n+    provide_automatic_options = None\n+\n     #: The canonical way to decorate class-based views is to decorate the\n     #: return value of as_view().  However since this moves parts of the\n     #: logic from the class declaration to the place where it's hooked\n@@ -99,6 +102,7 @@ class View(object):\n         view.__doc__ = cls.__doc__\n         view.__module__ = cls.__module__\n         view.methods = cls.methods\n+        view.provide_automatic_options = cls.provide_automatic_options\n         return view\n \n \n\n@@ -109,6 +109,43 @@ def test_view_decorators():\n     assert rv.headers['X-Parachute'] == 'awesome'\n     assert rv.data == b'Awesome'\n \n+def test_view_provide_automatic_options_attr():\n+    app = flask.Flask(__name__)\n+\n+    class Index1(flask.views.View):\n+        provide_automatic_options = False\n+        def dispatch_request(self):\n+            return 'Hello World!'\n+\n+    app.add_url_rule('/', view_func=Index1.as_view('index'))\n+    c = app.test_client()\n+    rv = c.open('/', method='OPTIONS')\n+    assert rv.status_code == 405\n+\n+    app = flask.Flask(__name__)\n+\n+    class Index2(flask.views.View):\n+        methods = ['OPTIONS']\n+        provide_automatic_options = True\n+        def dispatch_request(self):\n+            return 'Hello World!'\n+\n+    app.add_url_rule('/', view_func=Index2.as_view('index'))\n+    c = app.test_client()\n+    rv = c.open('/', method='OPTIONS')\n+    assert sorted(rv.allow) == ['OPTIONS']\n+\n+    app = flask.Flask(__name__)\n+\n+    class Index3(flask.views.View):\n+        def dispatch_request(self):\n+            return 'Hello World!'\n+\n+    app.add_url_rule('/', view_func=Index3.as_view('index'))\n+    c = app.test_client()\n+    rv = c.open('/', method='OPTIONS')\n+    assert 'OPTIONS' in rv.allow\n+\n def test_implicit_head():\n     app = flask.Flask(__name__)\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#fe27d04cc196d65af17ac6cf67574fa61d5b4828", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 2 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 98 | Contributors (this commit): 4 | Commits (past 90d): 4 | Contributors (cumulative): 4 | DMM Complexity: None\n\nDIFF:\n@@ -16,7 +16,7 @@ from flaskr import flaskr\n \n \n @pytest.fixture\n-def client(request):\n+def client():\n     db_fd, flaskr.app.config['DATABASE'] = tempfile.mkstemp()\n     flaskr.app.config['TESTING'] = True\n     client = flaskr.app.test_client()\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#ae41df9a77ceab4469029b043e38333b8654e1da", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 66 | Lines Deleted: 28 | Files Changed: 3 | Hunks: 24 | Methods Changed: 12 | Complexity Δ (Sum/Max): 5/3 | Churn Δ: 94 | Churn Cumulative: 2341 | Contributors (this commit): 32 | Commits (past 90d): 15 | Contributors (cumulative): 45 | DMM Complexity: 0.9666666666666667\n\nDIFF:\n@@ -25,6 +25,7 @@ if not PY2:\n     itervalues = lambda d: iter(d.values())\n     iteritems = lambda d: iter(d.items())\n \n+    from inspect import getfullargspec as getargspec\n     from io import StringIO\n \n     def reraise(tp, value, tb=None):\n@@ -43,6 +44,7 @@ else:\n     itervalues = lambda d: d.itervalues()\n     iteritems = lambda d: d.iteritems()\n \n+    from inspect import getargspec\n     from cStringIO import StringIO\n \n     exec('def reraise(tp, value, tb=None):\\n raise tp, value, tb')\n\n@@ -22,13 +22,14 @@ from . import __version__\n from ._compat import iteritems, reraise\n from .globals import current_app\n from .helpers import get_debug_flag\n+from ._compat import getargspec\n \n \n class NoAppException(click.UsageError):\n     \"\"\"Raised if an application cannot be found or loaded.\"\"\"\n \n \n-def find_best_app(module):\n+def find_best_app(script_info, module):\n     \"\"\"Given a module instance this tries to find the best possible\n     application in the module or raises an exception.\n     \"\"\"\n@@ -60,8 +61,8 @@ def find_best_app(module):\n \n         if callable(app_factory):\n             try:\n-                app = app_factory()\n-\n+                app = check_factory_for_script_info_and_call(app_factory,\n+                                                             script_info)\n                 if isinstance(app, Flask):\n                     return app\n             except TypeError:\n@@ -79,6 +80,21 @@ def find_best_app(module):\n     )\n \n \n+def check_factory_for_script_info_and_call(func, script_info):\n+    \"\"\"Given a function this checks if the function has an argument named \n+    script_info or just a single argument and calls the function with \n+    script_info if so. Otherwise calls the function without any arguments and \n+    returns the result.\"\"\"\n+    arguments = getargspec(func).args\n+    if 'script_info' in arguments:\n+        result = func(script_info=script_info)\n+    elif len(arguments) == 1:\n+        result = func(script_info)\n+    else:\n+        result = func()\n+    return result\n+\n+\n def prepare_exec_for_file(filename):\n     \"\"\"Given a filename this will try to calculate the python path, add it\n     to the search path and return the actual module name that is expected.\n@@ -108,7 +124,7 @@ def prepare_exec_for_file(filename):\n     return '.'.join(module[::-1])\n \n \n-def locate_app(app_id):\n+def locate_app(script_info, app_id):\n     \"\"\"Attempts to locate the application.\"\"\"\n     __traceback_hide__ = True\n     if ':' in app_id:\n@@ -134,7 +150,7 @@ def locate_app(app_id):\n \n     mod = sys.modules[module]\n     if app_obj is None:\n-        app = find_best_app(mod)\n+        app = find_best_app(script_info, mod)\n     else:\n         app = getattr(mod, app_obj, None)\n         if app is None:\n@@ -259,7 +275,7 @@ class ScriptInfo(object):\n         if self._loaded_app is not None:\n             return self._loaded_app\n         if self.create_app is not None:\n-            rv = self.create_app(self)\n+            rv = check_factory_for_script_info_and_call(self.create_app, self)\n         else:\n             if not self.app_import_path:\n                 raise NoAppException(\n@@ -267,7 +283,7 @@ class ScriptInfo(object):\n                     'the FLASK_APP environment variable.\\n\\nFor more '\n                     'information see '\n                     'http://flask.pocoo.org/docs/latest/quickstart/')\n-            rv = locate_app(self.app_import_path)\n+            rv = locate_app(self, self.app_import_path)\n         debug = get_debug_flag()\n         if debug is not None:\n             rv.debug = debug\n\n@@ -39,60 +39,75 @@ def test_cli_name(test_apps):\n \n def test_find_best_app(test_apps):\n     \"\"\"Test if `find_best_app` behaves as expected with different combinations of input.\"\"\"\n+    script_info = ScriptInfo()\n     class Module:\n         app = Flask('appname')\n-    assert find_best_app(Module) == Module.app\n+    assert find_best_app(script_info, Module) == Module.app\n \n     class Module:\n         application = Flask('appname')\n-    assert find_best_app(Module) == Module.application\n+    assert find_best_app(script_info, Module) == Module.application\n \n     class Module:\n         myapp = Flask('appname')\n-    assert find_best_app(Module) == Module.myapp\n+    assert find_best_app(script_info, Module) == Module.myapp\n \n     class Module:\n         @staticmethod\n         def create_app():\n             return Flask('appname')\n-    assert isinstance(find_best_app(Module), Flask)\n-    assert find_best_app(Module).name == 'appname'\n+    assert isinstance(find_best_app(script_info, Module), Flask)\n+    assert find_best_app(script_info, Module).name == 'appname'\n+\n+    class Module:\n+        @staticmethod\n+        def create_app(foo):\n+            return Flask('appname')\n+    assert isinstance(find_best_app(script_info, Module), Flask)\n+    assert find_best_app(script_info, Module).name == 'appname'\n+\n+    class Module:\n+        @staticmethod\n+        def create_app(foo=None, script_info=None):\n+            return Flask('appname')\n+    assert isinstance(find_best_app(script_info, Module), Flask)\n+    assert find_best_app(script_info, Module).name == 'appname'\n \n     class Module:\n         @staticmethod\n         def make_app():\n             return Flask('appname')\n-    assert isinstance(find_best_app(Module), Flask)\n-    assert find_best_app(Module).name == 'appname'\n+    assert isinstance(find_best_app(script_info, Module), Flask)\n+    assert find_best_app(script_info, Module).name == 'appname'\n \n     class Module:\n         myapp = Flask('appname1')\n         @staticmethod\n         def create_app():\n             return Flask('appname2')\n-    assert find_best_app(Module) == Module.myapp\n+    assert find_best_app(script_info, Module) == Module.myapp\n \n     class Module:\n         myapp = Flask('appname1')\n         @staticmethod\n-        def create_app(foo):\n+        def create_app():\n             return Flask('appname2')\n-    assert find_best_app(Module) == Module.myapp\n+    assert find_best_app(script_info, Module) == Module.myapp\n \n     class Module:\n         pass\n-    pytest.raises(NoAppException, find_best_app, Module)\n+    pytest.raises(NoAppException, find_best_app, script_info, Module)\n \n     class Module:\n         myapp1 = Flask('appname1')\n         myapp2 = Flask('appname2')\n-    pytest.raises(NoAppException, find_best_app, Module)\n+    pytest.raises(NoAppException, find_best_app, script_info, Module)\n \n     class Module:\n         @staticmethod\n-        def create_app(foo):\n+        def create_app(foo, bar):\n             return Flask('appname2')\n-    pytest.raises(NoAppException, find_best_app, Module)\n+    pytest.raises(NoAppException, find_best_app, script_info, Module)\n \n \n def test_prepare_exec_for_file(test_apps):\n@@ -117,13 +132,18 @@ def test_prepare_exec_for_file(test_apps):\n \n def test_locate_app(test_apps):\n     \"\"\"Test of locate_app.\"\"\"\n-    assert locate_app(\"cliapp.app\").name == \"testapp\"\n-    assert locate_app(\"cliapp.app:testapp\").name == \"testapp\"\n-    assert locate_app(\"cliapp.multiapp:app1\").name == \"app1\"\n-    pytest.raises(NoAppException, locate_app, \"notanpp.py\")\n-    pytest.raises(NoAppException, locate_app, \"cliapp/app\")\n-    pytest.raises(RuntimeError, locate_app, \"cliapp.app:notanapp\")\n-    pytest.raises(NoAppException, locate_app, \"cliapp.importerrorapp\")\n+    script_info = ScriptInfo()\n+    assert locate_app(script_info, \"cliapp.app\").name == \"testapp\"\n+    assert locate_app(script_info, \"cliapp.app:testapp\").name == \"testapp\"\n+    assert locate_app(script_info, \"cliapp.multiapp:app1\").name == \"app1\"\n+    pytest.raises(NoAppException, locate_app,\n+                  script_info, \"notanpp.py\")\n+    pytest.raises(NoAppException, locate_app,\n+                  script_info, \"cliapp/app\")\n+    pytest.raises(RuntimeError, locate_app,\n+                  script_info, \"cliapp.app:notanapp\")\n+    pytest.raises(NoAppException, locate_app,\n+                  script_info, \"cliapp.importerrorapp\")\n \n \n def test_find_default_import_path(test_apps, monkeypatch, tmpdir):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#5b0b9717da958fd6325c675d92be4f6667796112", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 773 | Lines Deleted: 748 | Files Changed: 12 | Hunks: 645 | Methods Changed: 423 | Complexity Δ (Sum/Max): 5/7 | Churn Δ: 1521 | Churn Cumulative: 6537 | Contributors (this commit): 55 | Commits (past 90d): 48 | Contributors (cumulative): 100 | DMM Complexity: 0.0\n\nDIFF:\n@@ -13,6 +13,40 @@ import sys\n import pkgutil\n import pytest\n import textwrap\n+from flask import Flask as _Flask\n+\n+\n+class Flask(_Flask):\n+    testing = True\n+    secret_key = __name__\n+\n+    def make_response(self, rv):\n+        if rv is None:\n+            rv = ''\n+        return super(Flask, self).make_response(rv)\n+\n+\n+@pytest.fixture\n+def app():\n+    app = Flask(__name__)\n+    return app\n+\n+\n+@pytest.fixture\n+def app_ctx(app):\n+    with app.app_context() as ctx:\n+        yield ctx\n+\n+\n+@pytest.fixture\n+def req_ctx(app):\n+    with app.test_request_context() as ctx:\n+        yield ctx\n+\n+\n+@pytest.fixture\n+def client(app):\n+    return app.test_client()\n \n \n @pytest.fixture\n@@ -63,12 +97,13 @@ def limit_loader(request, monkeypatch):\n \n     def get_loader(*args, **kwargs):\n         return LimitedLoader(old_get_loader(*args, **kwargs))\n+\n     monkeypatch.setattr(pkgutil, 'get_loader', get_loader)\n \n \n @pytest.fixture\n def modules_tmpdir(tmpdir, monkeypatch):\n-    '''A tmpdir added to sys.path'''\n+    \"\"\"A tmpdir added to sys.path.\"\"\"\n     rv = tmpdir.mkdir('modules_tmpdir')\n     monkeypatch.syspath_prepend(str(rv))\n     return rv\n@@ -82,7 +117,7 @@ def modules_tmpdir_prefix(modules_tmpdir, monkeypatch):\n \n @pytest.fixture\n def site_packages(modules_tmpdir, monkeypatch):\n-    '''Create a fake site-packages'''\n+    \"\"\"Create a fake site-packages.\"\"\"\n     rv = modules_tmpdir \\\n         .mkdir('lib') \\\n         .mkdir('python{x[0]}.{x[1]}'.format(x=sys.version_info)) \\\n@@ -93,8 +128,9 @@ def site_packages(modules_tmpdir, monkeypatch):\n \n @pytest.fixture\n def install_egg(modules_tmpdir, monkeypatch):\n-    '''Generate egg from package name inside base and put the egg into\n-    sys.path'''\n+    \"\"\"Generate egg from package name inside base and put the egg into\n+    sys.path.\"\"\"\n+\n     def inner(name, base=modules_tmpdir):\n         if not isinstance(name, str):\n             raise ValueError(name)\n@@ -118,6 +154,7 @@ def install_egg(modules_tmpdir, monkeypatch):\n         egg_path, = modules_tmpdir.join('dist/').listdir()\n         monkeypatch.syspath_prepend(str(egg_path))\n         return egg_path\n+\n     return inner\n \n \n@@ -125,6 +162,7 @@ def install_egg(modules_tmpdir, monkeypatch):\n def purge_module(request):\n     def inner(name):\n         request.addfinalizer(lambda: sys.modules.pop(name, None))\n+\n     return inner\n \n \n@@ -132,4 +170,4 @@ def purge_module(request):\n def catch_deprecation_warnings(recwarn):\n     yield\n     gc.collect()\n-    assert not recwarn.list\n+    assert not recwarn.list, '\\n'.join(str(w.message) for w in recwarn.list)\n\n@@ -14,8 +14,7 @@ import pytest\n import flask\n \n \n-def test_basic_url_generation():\n-    app = flask.Flask(__name__)\n+def test_basic_url_generation(app):\n     app.config['SERVER_NAME'] = 'localhost'\n     app.config['PREFERRED_URL_SCHEME'] = 'https'\n \n@@ -27,31 +26,33 @@ def test_basic_url_generation():\n         rv = flask.url_for('index')\n         assert rv == 'https://localhost/'\n \n-def test_url_generation_requires_server_name():\n-    app = flask.Flask(__name__)\n+\n+def test_url_generation_requires_server_name(app):\n     with app.app_context():\n         with pytest.raises(RuntimeError):\n             flask.url_for('index')\n \n+\n def test_url_generation_without_context_fails():\n     with pytest.raises(RuntimeError):\n         flask.url_for('index')\n \n-def test_request_context_means_app_context():\n-    app = flask.Flask(__name__)\n+\n+def test_request_context_means_app_context(app):\n     with app.test_request_context():\n         assert flask.current_app._get_current_object() == app\n     assert flask._app_ctx_stack.top is None\n \n-def test_app_context_provides_current_app():\n-    app = flask.Flask(__name__)\n+\n+def test_app_context_provides_current_app(app):\n     with app.app_context():\n         assert flask.current_app._get_current_object() == app\n     assert flask._app_ctx_stack.top is None\n \n-def test_app_tearing_down():\n+\n+def test_app_tearing_down(app):\n     cleanup_stuff = []\n-    app = flask.Flask(__name__)\n+\n     @app.teardown_appcontext\n     def cleanup(exception):\n         cleanup_stuff.append(exception)\n@@ -61,9 +62,10 @@ def test_app_tearing_down():\n \n     assert cleanup_stuff == [None]\n \n-def test_app_tearing_down_with_previous_exception():\n+\n+def test_app_tearing_down_with_previous_exception(app):\n     cleanup_stuff = []\n-    app = flask.Flask(__name__)\n+\n     @app.teardown_appcontext\n     def cleanup(exception):\n         cleanup_stuff.append(exception)\n@@ -78,9 +80,10 @@ def test_app_tearing_down_with_previous_exception():\n \n     assert cleanup_stuff == [None]\n \n-def test_app_tearing_down_with_handled_exception():\n+\n+def test_app_tearing_down_with_handled_exception(app):\n     cleanup_stuff = []\n-    app = flask.Flask(__name__)\n+\n     @app.teardown_appcontext\n     def cleanup(exception):\n         cleanup_stuff.append(exception)\n@@ -93,9 +96,8 @@ def test_app_tearing_down_with_handled_exception():\n \n     assert cleanup_stuff == [None]\n \n-def test_app_ctx_globals_methods():\n-    app = flask.Flask(__name__)\n-    with app.app_context():\n+\n+def test_app_ctx_globals_methods(app, app_ctx):\n     # get\n     assert flask.g.get('foo') is None\n     assert flask.g.get('foo', 'bar') == 'bar'\n@@ -115,24 +117,28 @@ def test_app_ctx_globals_methods():\n     # __iter__\n     assert list(flask.g) == ['foo']\n \n-def test_custom_app_ctx_globals_class():\n+\n+def test_custom_app_ctx_globals_class(app):\n     class CustomRequestGlobals(object):\n         def __init__(self):\n             self.spam = 'eggs'\n-    app = flask.Flask(__name__)\n+\n     app.app_ctx_globals_class = CustomRequestGlobals\n     with app.app_context():\n         assert flask.render_template_string('{{ g.spam }}') == 'eggs'\n \n-def test_context_refcounts():\n+\n+def test_context_refcounts(app, client):\n     called = []\n-    app = flask.Flask(__name__)\n+\n     @app.teardown_request\n     def teardown_req(error=None):\n         called.append('request')\n+\n     @app.teardown_appcontext\n     def teardown_app(error=None):\n         called.append('app')\n+\n     @app.route('/')\n     def index():\n         with flask._app_ctx_stack.top:\n@@ -141,16 +147,16 @@ def test_context_refcounts():\n         env = flask._request_ctx_stack.top.request.environ\n         assert env['werkzeug.request'] is not None\n         return u''\n-    c = app.test_client()\n-    res = c.get('/')\n+\n+    res = client.get('/')\n     assert res.status_code == 200\n     assert res.data == b''\n     assert called == ['request', 'app']\n \n \n-def test_clean_pop():\n+def test_clean_pop(app):\n+    app.testing = False\n     called = []\n-    app = flask.Flask(__name__)\n \n     @app.teardown_request\n     def teardown_req(error=None):\n@@ -166,5 +172,5 @@ def test_clean_pop():\n     except ZeroDivisionError:\n         pass\n \n-    assert called == ['test_appctx', 'TEARDOWN']\n+    assert called == ['conftest', 'TEARDOWN']\n     assert not flask.current_app\n\n@@ -25,20 +25,17 @@ from werkzeug.routing import BuildError\n import werkzeug.serving\n \n \n-def test_options_work():\n-    app = flask.Flask(__name__)\n-\n+def test_options_work(app, client):\n     @app.route('/', methods=['GET', 'POST'])\n     def index():\n         return 'Hello World'\n-    rv = app.test_client().open('/', method='OPTIONS')\n+\n+    rv = client.open('/', method='OPTIONS')\n     assert sorted(rv.allow) == ['GET', 'HEAD', 'OPTIONS', 'POST']\n     assert rv.data == b''\n \n \n-def test_options_on_multiple_rules():\n-    app = flask.Flask(__name__)\n-\n+def test_options_on_multiple_rules(app, client):\n     @app.route('/', methods=['GET', 'POST'])\n     def index():\n         return 'Hello World'\n@@ -46,7 +43,8 @@ def test_options_on_multiple_rules():\n     @app.route('/', methods=['PUT'])\n     def index_put():\n         return 'Aha!'\n-    rv = app.test_client().open('/', method='OPTIONS')\n+\n+    rv = client.open('/', method='OPTIONS')\n     assert sorted(rv.allow) == ['GET', 'HEAD', 'OPTIONS', 'POST', 'PUT']\n \n \n@@ -55,6 +53,7 @@ def test_provide_automatic_options_attr():\n \n     def index():\n         return 'Hello World!'\n+\n     index.provide_automatic_options = False\n     app.route('/')(index)\n     rv = app.test_client().open('/', method='OPTIONS')\n@@ -64,15 +63,14 @@ def test_provide_automatic_options_attr():\n \n     def index2():\n         return 'Hello World!'\n+\n     index2.provide_automatic_options = True\n     app.route('/', methods=['OPTIONS'])(index2)\n     rv = app.test_client().open('/', method='OPTIONS')\n     assert sorted(rv.allow) == ['OPTIONS']\n \n \n-def test_provide_automatic_options_kwarg():\n-    app = flask.Flask(__name__)\n-\n+def test_provide_automatic_options_kwarg(app, client):\n     def index():\n         return flask.request.method\n \n@@ -84,43 +82,39 @@ def test_provide_automatic_options_kwarg():\n         '/more', view_func=more, methods=['GET', 'POST'],\n         provide_automatic_options=False\n     )\n+    assert client.get('/').data == b'GET'\n \n-    c = app.test_client()\n-    assert c.get('/').data == b'GET'\n-\n-    rv = c.post('/')\n+    rv = client.post('/')\n     assert rv.status_code == 405\n     assert sorted(rv.allow) == ['GET', 'HEAD']\n \n     # Older versions of Werkzeug.test.Client don't have an options method\n-    if hasattr(c, 'options'):\n-        rv = c.options('/')\n+    if hasattr(client, 'options'):\n+        rv = client.options('/')\n     else:\n-        rv = c.open('/', method='OPTIONS')\n+        rv = client.open('/', method='OPTIONS')\n \n     assert rv.status_code == 405\n \n-    rv = c.head('/')\n+    rv = client.head('/')\n     assert rv.status_code == 200\n     assert not rv.data  # head truncates\n-    assert c.post('/more').data == b'POST'\n-    assert c.get('/more').data == b'GET'\n+    assert client.post('/more').data == b'POST'\n+    assert client.get('/more').data == b'GET'\n \n-    rv = c.delete('/more')\n+    rv = client.delete('/more')\n     assert rv.status_code == 405\n     assert sorted(rv.allow) == ['GET', 'HEAD', 'POST']\n \n-    if hasattr(c, 'options'):\n-        rv = c.options('/more')\n+    if hasattr(client, 'options'):\n+        rv = client.options('/more')\n     else:\n-        rv = c.open('/more', method='OPTIONS')\n+        rv = client.open('/more', method='OPTIONS')\n \n     assert rv.status_code == 405\n \n \n-def test_request_dispatching():\n-    app = flask.Flask(__name__)\n-\n+def test_request_dispatching(app, client):\n     @app.route('/')\n     def index():\n         return flask.request.method\n@@ -129,32 +123,28 @@ def test_request_dispatching():\n     def more():\n         return flask.request.method\n \n-    c = app.test_client()\n-    assert c.get('/').data == b'GET'\n-    rv = c.post('/')\n+    assert client.get('/').data == b'GET'\n+    rv = client.post('/')\n     assert rv.status_code == 405\n     assert sorted(rv.allow) == ['GET', 'HEAD', 'OPTIONS']\n-    rv = c.head('/')\n+    rv = client.head('/')\n     assert rv.status_code == 200\n     assert not rv.data  # head truncates\n-    assert c.post('/more').data == b'POST'\n-    assert c.get('/more').data == b'GET'\n-    rv = c.delete('/more')\n+    assert client.post('/more').data == b'POST'\n+    assert client.get('/more').data == b'GET'\n+    rv = client.delete('/more')\n     assert rv.status_code == 405\n     assert sorted(rv.allow) == ['GET', 'HEAD', 'OPTIONS', 'POST']\n \n \n-def test_disallow_string_for_allowed_methods():\n-    app = flask.Flask(__name__)\n+def test_disallow_string_for_allowed_methods(app):\n     with pytest.raises(TypeError):\n         @app.route('/', methods='GET POST')\n         def index():\n             return \"Hey\"\n \n \n-def test_url_mapping():\n-    app = flask.Flask(__name__)\n-\n+def test_url_mapping(app, client):\n     random_uuid4 = \"7eb41166-9ebf-4d26-b771-ea3f54f8b383\"\n \n     def index():\n@@ -166,34 +156,31 @@ def test_url_mapping():\n     def options():\n         return random_uuid4\n \n-\n     app.add_url_rule('/', 'index', index)\n     app.add_url_rule('/more', 'more', more, methods=['GET', 'POST'])\n \n     # Issue 1288: Test that automatic options are not added when non-uppercase 'options' in methods\n     app.add_url_rule('/options', 'options', options, methods=['options'])\n \n-    c = app.test_client()\n-    assert c.get('/').data == b'GET'\n-    rv = c.post('/')\n+    assert client.get('/').data == b'GET'\n+    rv = client.post('/')\n     assert rv.status_code == 405\n     assert sorted(rv.allow) == ['GET', 'HEAD', 'OPTIONS']\n-    rv = c.head('/')\n+    rv = client.head('/')\n     assert rv.status_code == 200\n     assert not rv.data  # head truncates\n-    assert c.post('/more').data == b'POST'\n-    assert c.get('/more').data == b'GET'\n-    rv = c.delete('/more')\n+    assert client.post('/more').data == b'POST'\n+    assert client.get('/more').data == b'GET'\n+    rv = client.delete('/more')\n     assert rv.status_code == 405\n     assert sorted(rv.allow) == ['GET', 'HEAD', 'OPTIONS', 'POST']\n-    rv = c.open('/options', method='OPTIONS')\n+    rv = client.open('/options', method='OPTIONS')\n     assert rv.status_code == 200\n     assert random_uuid4 in rv.data.decode(\"utf-8\")\n \n \n-def test_werkzeug_routing():\n+def test_werkzeug_routing(app, client):\n     from werkzeug.routing import Submount, Rule\n-    app = flask.Flask(__name__)\n     app.url_map.add(Submount('/foo', [\n         Rule('/bar', endpoint='bar'),\n         Rule('/', endpoint='index')\n@@ -204,17 +191,16 @@ def test_werkzeug_routing():\n \n     def index():\n         return 'index'\n+\n     app.view_functions['bar'] = bar\n     app.view_functions['index'] = index\n \n-    c = app.test_client()\n-    assert c.get('/foo/').data == b'index'\n-    assert c.get('/foo/bar').data == b'bar'\n+    assert client.get('/foo/').data == b'index'\n+    assert client.get('/foo/bar').data == b'bar'\n \n \n-def test_endpoint_decorator():\n+def test_endpoint_decorator(app, client):\n     from werkzeug.routing import Submount, Rule\n-    app = flask.Flask(__name__)\n     app.url_map.add(Submount('/foo', [\n         Rule('/bar', endpoint='bar'),\n         Rule('/', endpoint='index')\n@@ -228,13 +214,11 @@ def test_endpoint_decorator():\n     def index():\n         return 'index'\n \n-    c = app.test_client()\n-    assert c.get('/foo/').data == b'index'\n-    assert c.get('/foo/bar').data == b'bar'\n+    assert client.get('/foo/').data == b'index'\n+    assert client.get('/foo/bar').data == b'bar'\n \n \n-def test_session():\n-    app = flask.Flask(__name__)\n+def test_session(app, client):\n     app.secret_key = 'testkey'\n \n     @app.route('/set', methods=['POST'])\n@@ -246,13 +230,11 @@ def test_session():\n     def get():\n         return flask.session['value']\n \n-    c = app.test_client()\n-    assert c.post('/set', data={'value': '42'}).data == b'value set'\n-    assert c.get('/get').data == b'42'\n+    assert client.post('/set', data={'value': '42'}).data == b'value set'\n+    assert client.get('/get').data == b'42'\n \n \n-def test_session_using_server_name():\n-    app = flask.Flask(__name__)\n+def test_session_using_server_name(app, client):\n     app.config.update(\n         SECRET_KEY='foo',\n         SERVER_NAME='example.com'\n@@ -262,13 +244,13 @@ def test_session_using_server_name():\n     def index():\n         flask.session['testing'] = 42\n         return 'Hello World'\n-    rv = app.test_client().get('/', 'http://example.com/')\n+\n+    rv = client.get('/', 'http://example.com/')\n     assert 'domain=.example.com' in rv.headers['set-cookie'].lower()\n     assert 'httponly' in rv.headers['set-cookie'].lower()\n \n \n-def test_session_using_server_name_and_port():\n-    app = flask.Flask(__name__)\n+def test_session_using_server_name_and_port(app, client):\n     app.config.update(\n         SECRET_KEY='foo',\n         SERVER_NAME='example.com:8080'\n@@ -278,13 +260,13 @@ def test_session_using_server_name_and_port():\n     def index():\n         flask.session['testing'] = 42\n         return 'Hello World'\n-    rv = app.test_client().get('/', 'http://example.com:8080/')\n+\n+    rv = client.get('/', 'http://example.com:8080/')\n     assert 'domain=.example.com' in rv.headers['set-cookie'].lower()\n     assert 'httponly' in rv.headers['set-cookie'].lower()\n \n \n-def test_session_using_server_name_port_and_path():\n-    app = flask.Flask(__name__)\n+def test_session_using_server_name_port_and_path(app, client):\n     app.config.update(\n         SECRET_KEY='foo',\n         SERVER_NAME='example.com:8080',\n@@ -295,15 +277,15 @@ def test_session_using_server_name_port_and_path():\n     def index():\n         flask.session['testing'] = 42\n         return 'Hello World'\n-    rv = app.test_client().get('/', 'http://example.com:8080/foo')\n+\n+    rv = client.get('/', 'http://example.com:8080/foo')\n     assert 'domain=example.com' in rv.headers['set-cookie'].lower()\n     assert 'path=/foo' in rv.headers['set-cookie'].lower()\n     assert 'httponly' in rv.headers['set-cookie'].lower()\n \n \n-def test_session_using_application_root():\n+def test_session_using_application_root(app, client):\n     class PrefixPathMiddleware(object):\n-\n         def __init__(self, app, prefix):\n             self.app = app\n             self.prefix = prefix\n@@ -312,7 +294,6 @@ def test_session_using_application_root():\n             environ['SCRIPT_NAME'] = self.prefix\n             return self.app(environ, start_response)\n \n-    app = flask.Flask(__name__)\n     app.wsgi_app = PrefixPathMiddleware(app.wsgi_app, '/bar')\n     app.config.update(\n         SECRET_KEY='foo',\n@@ -323,12 +304,12 @@ def test_session_using_application_root():\n     def index():\n         flask.session['testing'] = 42\n         return 'Hello World'\n-    rv = app.test_client().get('/', 'http://example.com:8080/')\n+\n+    rv = client.get('/', 'http://example.com:8080/')\n     assert 'path=/bar' in rv.headers['set-cookie'].lower()\n \n \n-def test_session_using_session_settings():\n-    app = flask.Flask(__name__)\n+def test_session_using_session_settings(app, client):\n     app.config.update(\n         SECRET_KEY='foo',\n         SERVER_NAME='www.example.com:8080',\n@@ -343,7 +324,8 @@ def test_session_using_session_settings():\n     def index():\n         flask.session['testing'] = 42\n         return 'Hello World'\n-    rv = app.test_client().get('/', 'http://www.example.com:8080/test/')\n+\n+    rv = client.get('/', 'http://www.example.com:8080/test/')\n     cookie = rv.headers['set-cookie'].lower()\n     assert 'domain=.example.com' in cookie\n     assert 'path=/' in cookie\n@@ -351,8 +333,7 @@ def test_session_using_session_settings():\n     assert 'httponly' not in cookie\n \n \n-def test_session_localhost_warning(recwarn):\n-    app = flask.Flask(__name__)\n+def test_session_localhost_warning(recwarn, app, client):\n     app.config.update(\n         SECRET_KEY='testing',\n         SERVER_NAME='localhost:5000',\n@@ -363,14 +344,13 @@ def test_session_localhost_warning(recwarn):\n         flask.session['testing'] = 42\n         return 'testing'\n \n-    rv = app.test_client().get('/', 'http://localhost:5000/')\n+    rv = client.get('/', 'http://localhost:5000/')\n     assert 'domain' not in rv.headers['set-cookie'].lower()\n     w = recwarn.pop(UserWarning)\n     assert '\"localhost\" is not a valid cookie domain' in str(w.message)\n \n \n-def test_session_ip_warning(recwarn):\n-    app = flask.Flask(__name__)\n+def test_session_ip_warning(recwarn, app, client):\n     app.config.update(\n         SECRET_KEY='testing',\n         SERVER_NAME='127.0.0.1:5000',\n@@ -381,7 +361,7 @@ def test_session_ip_warning(recwarn):\n         flask.session['testing'] = 42\n         return 'testing'\n \n-    rv = app.test_client().get('/', 'http://127.0.0.1:5000/')\n+    rv = client.get('/', 'http://127.0.0.1:5000/')\n     assert 'domain=127.0.0.1' in rv.headers['set-cookie'].lower()\n     w = recwarn.pop(UserWarning)\n     assert 'cookie domain is an IP' in str(w.message)\n@@ -393,15 +373,15 @@ def test_missing_session():\n     def expect_exception(f, *args, **kwargs):\n         e = pytest.raises(RuntimeError, f, *args, **kwargs)\n         assert e.value.args and 'session is unavailable' in e.value.args[0]\n+\n     with app.test_request_context():\n         assert flask.session.get('missing_key') is None\n         expect_exception(flask.session.__setitem__, 'foo', 42)\n         expect_exception(flask.session.pop, 'foo')\n \n \n-def test_session_expiration():\n+def test_session_expiration(app, client):\n     permanent = True\n-    app = flask.Flask(__name__)\n     app.secret_key = 'testkey'\n \n     @app.route('/')\n@@ -414,7 +394,6 @@ def test_session_expiration():\n     def test():\n         return text_type(flask.session.permanent)\n \n-    client = app.test_client()\n     rv = client.get('/')\n     assert 'set-cookie' in rv.headers\n     match = re.search(r'(?i)\\bexpires=([^;]+)', rv.headers['set-cookie'])\n@@ -428,16 +407,14 @@ def test_session_expiration():\n     assert rv.data == b'True'\n \n     permanent = False\n-    rv = app.test_client().get('/')\n+    rv = client.get('/')\n     assert 'set-cookie' in rv.headers\n     match = re.search(r'\\bexpires=([^;]+)', rv.headers['set-cookie'])\n     assert match is None\n \n \n-def test_session_stored_last():\n-    app = flask.Flask(__name__)\n+def test_session_stored_last(app, client):\n     app.secret_key = 'development-key'\n-    app.testing = True\n \n     @app.after_request\n     def modify_session(response):\n@@ -448,15 +425,12 @@ def test_session_stored_last():\n     def dump_session_contents():\n         return repr(flask.session.get('foo'))\n \n-    c = app.test_client()\n-    assert c.get('/').data == b'None'\n-    assert c.get('/').data == b'42'\n+    assert client.get('/').data == b'None'\n+    assert client.get('/').data == b'42'\n \n \n-def test_session_special_types():\n-    app = flask.Flask(__name__)\n+def test_session_special_types(app, client):\n     app.secret_key = 'development-key'\n-    app.testing = True\n     now = datetime.utcnow().replace(microsecond=0)\n     the_uuid = uuid.uuid4()\n \n@@ -473,9 +447,8 @@ def test_session_special_types():\n     def dump_session_contents():\n         return pickle.dumps(dict(flask.session))\n \n-    c = app.test_client()\n-    c.get('/')\n-    rv = pickle.loads(c.get('/').data)\n+    client.get('/')\n+    rv = pickle.loads(client.get('/').data)\n     assert rv['m'] == flask.Markup('Hello!')\n     assert type(rv['m']) == flask.Markup\n     assert rv['dt'] == now\n@@ -485,9 +458,7 @@ def test_session_special_types():\n     assert rv['t'] == (1, 2, 3)\n \n \n-def test_session_cookie_setting():\n-    app = flask.Flask(__name__)\n-    app.testing = True\n+def test_session_cookie_setting(app):\n     app.secret_key = 'dev key'\n     is_permanent = True\n \n@@ -529,8 +500,7 @@ def test_session_cookie_setting():\n     run_test(expect_header=False)\n \n \n-def test_session_vary_cookie():\n-    app = flask.Flask(__name__)\n+def test_session_vary_cookie(app, client):\n     app.secret_key = 'testkey'\n \n     @app.route('/set')\n@@ -554,10 +524,8 @@ def test_session_vary_cookie():\n     def no_vary_header():\n         return ''\n \n-    c = app.test_client()\n-\n     def expect(path, header=True):\n-        rv = c.get(path)\n+        rv = client.get(path)\n \n         if header:\n             assert rv.headers['Vary'] == 'Cookie'\n@@ -571,11 +539,9 @@ def test_session_vary_cookie():\n     expect('/no-vary-header', False)\n \n \n-def test_flashes():\n-    app = flask.Flask(__name__)\n+def test_flashes(app, req_ctx):\n     app.secret_key = 'testkey'\n \n-    with app.test_request_context():\n     assert not flask.session.modified\n     flask.flash('Zap')\n     flask.session.modified = False\n@@ -584,16 +550,14 @@ def test_flashes():\n     assert list(flask.get_flashed_messages()) == ['Zap', 'Zip']\n \n \n-def test_extended_flashing():\n+def test_extended_flashing(app):\n     # Be sure app.testing=True below, else tests can fail silently.\n     #\n     # Specifically, if app.testing is not set to True, the AssertionErrors\n     # in the view functions will cause a 500 response to the test client\n     # instead of propagating exceptions.\n \n-    app = flask.Flask(__name__)\n     app.secret_key = 'testkey'\n-    app.testing = True\n \n     @app.route('/')\n     def index():\n@@ -651,29 +615,24 @@ def test_extended_flashing():\n \n     # Create new test client on each test to clean flashed messages.\n \n-    c = app.test_client()\n-    c.get('/')\n-    c.get('/test/')\n+    client = app.test_client()\n+    client.get('/')\n+    client.get('/test_with_categories/')\n \n-    c = app.test_client()\n-    c.get('/')\n-    c.get('/test_with_categories/')\n+    client = app.test_client()\n+    client.get('/')\n+    client.get('/test_filter/')\n \n-    c = app.test_client()\n-    c.get('/')\n-    c.get('/test_filter/')\n+    client = app.test_client()\n+    client.get('/')\n+    client.get('/test_filters/')\n \n-    c = app.test_client()\n-    c.get('/')\n-    c.get('/test_filters/')\n-\n-    c = app.test_client()\n-    c.get('/')\n-    c.get('/test_filters_without_returning_categories/')\n+    client = app.test_client()\n+    client.get('/')\n+    client.get('/test_filters_without_returning_categories/')\n \n \n-def test_request_processing():\n-    app = flask.Flask(__name__)\n+def test_request_processing(app, client):\n     evts = []\n \n     @app.before_request\n@@ -691,14 +650,14 @@ def test_request_processing():\n         assert 'before' in evts\n         assert 'after' not in evts\n         return 'request'\n+\n     assert 'after' not in evts\n-    rv = app.test_client().get('/').data\n+    rv = client.get('/').data\n     assert 'after' in evts\n     assert rv == b'request|after'\n \n \n-def test_request_preprocessing_early_return():\n-    app = flask.Flask(__name__)\n+def test_request_preprocessing_early_return(app, client):\n     evts = []\n \n     @app.before_request\n@@ -720,31 +679,28 @@ def test_request_preprocessing_early_return():\n         evts.append('index')\n         return \"damnit\"\n \n-    rv = app.test_client().get('/').data.strip()\n+    rv = client.get('/').data.strip()\n     assert rv == b'hello'\n     assert evts == [1, 2]\n \n \n-def test_after_request_processing():\n-    app = flask.Flask(__name__)\n-    app.testing = True\n-\n+def test_after_request_processing(app, client):\n     @app.route('/')\n     def index():\n         @flask.after_this_request\n         def foo(response):\n             response.headers['X-Foo'] = 'a header'\n             return response\n+\n         return 'Test'\n-    c = app.test_client()\n-    resp = c.get('/')\n+\n+    resp = client.get('/')\n     assert resp.status_code == 200\n     assert resp.headers['X-Foo'] == 'a header'\n \n \n-def test_teardown_request_handler():\n+def test_teardown_request_handler(app, client):\n     called = []\n-    app = flask.Flask(__name__)\n \n     @app.teardown_request\n     def teardown_request(exc):\n@@ -754,16 +710,15 @@ def test_teardown_request_handler():\n     @app.route('/')\n     def root():\n         return \"Response\"\n-    rv = app.test_client().get('/')\n+\n+    rv = client.get('/')\n     assert rv.status_code == 200\n     assert b'Response' in rv.data\n     assert len(called) == 1\n \n \n-def test_teardown_request_handler_debug_mode():\n+def test_teardown_request_handler_debug_mode(app, client):\n     called = []\n-    app = flask.Flask(__name__)\n-    app.testing = True\n \n     @app.teardown_request\n     def teardown_request(exc):\n@@ -773,16 +728,17 @@ def test_teardown_request_handler_debug_mode():\n     @app.route('/')\n     def root():\n         return \"Response\"\n-    rv = app.test_client().get('/')\n+\n+    rv = client.get('/')\n     assert rv.status_code == 200\n     assert b'Response' in rv.data\n     assert len(called) == 1\n \n \n-def test_teardown_request_handler_error():\n+def test_teardown_request_handler_error(app, client):\n     called = []\n-    app = flask.Flask(__name__)\n     app.config['LOGGER_HANDLER_POLICY'] = 'never'\n+    app.testing = False\n \n     @app.teardown_request\n     def teardown_request1(exc):\n@@ -811,15 +767,15 @@ def test_teardown_request_handler_error():\n     @app.route('/')\n     def fails():\n         1 // 0\n-    rv = app.test_client().get('/')\n+\n+    rv = client.get('/')\n     assert rv.status_code == 500\n     assert b'Internal Server Error' in rv.data\n     assert len(called) == 2\n \n \n-def test_before_after_request_order():\n+def test_before_after_request_order(app, client):\n     called = []\n-    app = flask.Flask(__name__)\n \n     @app.before_request\n     def before1():\n@@ -850,14 +806,15 @@ def test_before_after_request_order():\n     @app.route('/')\n     def index():\n         return '42'\n-    rv = app.test_client().get('/')\n+\n+    rv = client.get('/')\n     assert rv.data == b'42'\n     assert called == [1, 2, 3, 4, 5, 6]\n \n \n-def test_error_handling():\n-    app = flask.Flask(__name__)\n+def test_error_handling(app, client):\n     app.config['LOGGER_HANDLER_POLICY'] = 'never'\n+    app.testing = False\n \n     @app.errorhandler(404)\n     def not_found(e):\n@@ -882,21 +839,21 @@ def test_error_handling():\n     @app.route('/forbidden')\n     def error2():\n         flask.abort(403)\n-    c = app.test_client()\n-    rv = c.get('/')\n+\n+    rv = client.get('/')\n     assert rv.status_code == 404\n     assert rv.data == b'not found'\n-    rv = c.get('/error')\n+    rv = client.get('/error')\n     assert rv.status_code == 500\n     assert b'internal server error' == rv.data\n-    rv = c.get('/forbidden')\n+    rv = client.get('/forbidden')\n     assert rv.status_code == 403\n     assert b'forbidden' == rv.data\n \n \n-def test_error_handling_processing():\n-    app = flask.Flask(__name__)\n+def test_error_handling_processing(app, client):\n     app.config['LOGGER_HANDLER_POLICY'] = 'never'\n+    app.testing = False\n \n     @app.errorhandler(500)\n     def internal_server_error(e):\n@@ -911,32 +868,28 @@ def test_error_handling_processing():\n         resp.mimetype = 'text/x-special'\n         return resp\n \n-    with app.test_client() as c:\n-        resp = c.get('/')\n+    resp = client.get('/')\n     assert resp.mimetype == 'text/x-special'\n     assert resp.data == b'internal server error'\n \n \n-def test_baseexception_error_handling():\n-    app = flask.Flask(__name__)\n+def test_baseexception_error_handling(app, client):\n     app.config['LOGGER_HANDLER_POLICY'] = 'never'\n+    app.testing = False\n \n     @app.route('/')\n     def broken_func():\n         raise KeyboardInterrupt()\n \n-    with app.test_client() as c:\n     with pytest.raises(KeyboardInterrupt):\n-            c.get('/')\n+        client.get('/')\n \n         ctx = flask._request_ctx_stack.top\n         assert ctx.preserved\n         assert type(ctx._preserved_exc) is KeyboardInterrupt\n \n \n-def test_before_request_and_routing_errors():\n-    app = flask.Flask(__name__)\n-\n+def test_before_request_and_routing_errors(app, client):\n     @app.before_request\n     def attach_something():\n         flask.g.something = 'value'\n@@ -944,17 +897,16 @@ def test_before_request_and_routing_errors():\n     @app.errorhandler(404)\n     def return_something(error):\n         return flask.g.something, 404\n-    rv = app.test_client().get('/')\n+\n+    rv = client.get('/')\n     assert rv.status_code == 404\n     assert rv.data == b'value'\n \n \n-def test_user_error_handling():\n+def test_user_error_handling(app, client):\n     class MyException(Exception):\n         pass\n \n-    app = flask.Flask(__name__)\n-\n     @app.errorhandler(MyException)\n     def handle_my_exception(e):\n         assert isinstance(e, MyException)\n@@ -964,16 +916,13 @@ def test_user_error_handling():\n     def index():\n         raise MyException()\n \n-    c = app.test_client()\n-    assert c.get('/').data == b'42'\n+    assert client.get('/').data == b'42'\n \n \n-def test_http_error_subclass_handling():\n+def test_http_error_subclass_handling(app, client):\n     class ForbiddenSubclass(Forbidden):\n         pass\n \n-    app = flask.Flask(__name__)\n-\n     @app.errorhandler(ForbiddenSubclass)\n     def handle_forbidden_subclass(e):\n         assert isinstance(e, ForbiddenSubclass)\n@@ -997,19 +946,16 @@ def test_http_error_subclass_handling():\n     def index3():\n         raise Forbidden()\n \n-    c = app.test_client()\n-    assert c.get('/1').data == b'banana'\n-    assert c.get('/2').data == b'apple'\n-    assert c.get('/3').data == b'apple'\n+    assert client.get('/1').data == b'banana'\n+    assert client.get('/2').data == b'apple'\n+    assert client.get('/3').data == b'apple'\n \n \n-def test_trapping_of_bad_request_key_errors():\n-    app = flask.Flask(__name__)\n-    app.testing = True\n-\n+def test_trapping_of_bad_request_key_errors(app):\n     @app.route('/fail')\n     def fail():\n         flask.request.form['missing_key']\n+\n     c = app.test_client()\n     assert c.get('/fail').status_code == 400\n \n@@ -1020,23 +966,19 @@ def test_trapping_of_bad_request_key_errors():\n     assert e.errisinstance(BadRequest)\n \n \n-def test_trapping_of_all_http_exceptions():\n-    app = flask.Flask(__name__)\n-    app.testing = True\n+def test_trapping_of_all_http_exceptions(app, client):\n     app.config['TRAP_HTTP_EXCEPTIONS'] = True\n \n     @app.route('/fail')\n     def fail():\n         flask.abort(404)\n \n-    c = app.test_client()\n     with pytest.raises(NotFound):\n-        c.get('/fail')\n+        client.get('/fail')\n \n \n-def test_enctype_debug_helper():\n+def test_enctype_debug_helper(app, client):\n     from flask.debughelpers import DebugFilesKeyError\n-    app = flask.Flask(__name__)\n     app.debug = True\n \n     @app.route('/fail', methods=['POST'])\n@@ -1046,7 +988,7 @@ def test_enctype_debug_helper():\n     # with statement is important because we leave an exception on the\n     # stack otherwise and we want to ensure that this is not the case\n     # to not negatively affect other tests.\n-    with app.test_client() as c:\n+    with client as c:\n         with pytest.raises(DebugFilesKeyError) as e:\n             c.post('/fail', data={'foo': 'index.txt'})\n         assert 'no file contents were transmitted' in str(e.value)\n@@ -1276,6 +1218,7 @@ def test_url_generation():\n     @app.route('/hello/<name>', methods=['POST'])\n     def hello():\n         pass\n+\n     with app.test_request_context():\n         assert flask.url_for('hello', name='test x') == '/hello/test%20x'\n         assert flask.url_for('hello', name='test x', _external=True) == \\\n@@ -1305,6 +1248,7 @@ def test_build_error_handler():\n     def handler(error, endpoint, values):\n         # Just a test.\n         return '/test_handler/'\n+\n     app.url_build_error_handlers.append(handler)\n     with app.test_request_context():\n         assert flask.url_for('spam') == '/test_handler/'\n@@ -1316,6 +1260,7 @@ def test_build_error_handler_reraise():\n     # Test a custom handler which reraises the BuildError\n     def handler_raises_build_error(error, endpoint, values):\n         raise error\n+\n     app.url_build_error_handlers.append(handler_raises_build_error)\n \n     with app.test_request_context():\n@@ -1343,19 +1288,20 @@ def test_custom_converters():\n     from werkzeug.routing import BaseConverter\n \n     class ListConverter(BaseConverter):\n-\n         def to_python(self, value):\n             return value.split(',')\n \n         def to_url(self, value):\n             base_to_url = super(ListConverter, self).to_url\n             return ','.join(base_to_url(x) for x in value)\n+\n     app = flask.Flask(__name__)\n     app.url_map.converters['list'] = ListConverter\n \n     @app.route('/<list:args>')\n     def index(args):\n         return '|'.join(args)\n+\n     c = app.test_client()\n     assert c.get('/1,2,3').data == b'1|2|3'\n \n@@ -1485,6 +1431,7 @@ def test_exception_propagation():\n         @app.route('/')\n         def index():\n             1 // 0\n+\n         c = app.test_client()\n         if config_key is not None:\n             app.config[config_key] = True\n@@ -1622,6 +1569,7 @@ def test_debug_mode_complains_after_first_request():\n     @app.route('/')\n     def index():\n         return 'Awesome'\n+\n     assert not app.got_first_request\n     assert app.test_client().get('/').data == b'Awesome'\n     with pytest.raises(AssertionError) as e:\n@@ -1635,6 +1583,7 @@ def test_debug_mode_complains_after_first_request():\n     @app.route('/foo')\n     def working():\n         return 'Meh'\n+\n     assert app.test_client().get('/foo').data == b'Meh'\n     assert app.got_first_request\n \n@@ -1646,6 +1595,7 @@ def test_before_first_request_functions():\n     @app.before_first_request\n     def foo():\n         got.append(42)\n+\n     c = app.test_client()\n     c.get('/')\n     assert got == [42]\n@@ -1683,6 +1633,7 @@ def test_routing_redirect_debugging():\n     @app.route('/foo/', methods=['GET', 'POST'])\n     def foo():\n         return 'success'\n+\n     with app.test_client() as c:\n         with pytest.raises(AssertionError) as e:\n             c.post('/foo', data={})\n@@ -1747,8 +1698,7 @@ def test_preserve_only_once():\n     assert flask._app_ctx_stack.top is None\n \n \n-def test_preserve_remembers_exception():\n-    app = flask.Flask(__name__)\n+def test_preserve_remembers_exception(app, client):\n     app.debug = True\n     errors = []\n \n@@ -1764,29 +1714,23 @@ def test_preserve_remembers_exception():\n     def teardown_handler(exc):\n         errors.append(exc)\n \n-    c = app.test_client()\n-\n     # After this failure we did not yet call the teardown handler\n     with pytest.raises(ZeroDivisionError):\n-        c.get('/fail')\n+        client.get('/fail')\n     assert errors == []\n \n     # But this request triggers it, and it's an error\n-    c.get('/success')\n+    client.get('/success')\n     assert len(errors) == 2\n     assert isinstance(errors[0], ZeroDivisionError)\n \n     # At this point another request does nothing.\n-    c.get('/success')\n+    client.get('/success')\n     assert len(errors) == 3\n     assert errors[1] is None\n \n \n-def test_get_method_on_g():\n-    app = flask.Flask(__name__)\n-    app.testing = True\n-\n-    with app.app_context():\n+def test_get_method_on_g(app_ctx):\n     assert flask.g.get('x') is None\n     assert flask.g.get('x', 11) == 11\n     flask.g.x = 42\n@@ -1794,11 +1738,7 @@ def test_get_method_on_g():\n     assert flask.g.x == 42\n \n \n-def test_g_iteration_protocol():\n-    app = flask.Flask(__name__)\n-    app.testing = True\n-\n-    with app.app_context():\n+def test_g_iteration_protocol(app_ctx):\n     flask.g.foo = 23\n     flask.g.bar = 42\n     assert 'foo' in flask.g\n@@ -1806,9 +1746,8 @@ def test_g_iteration_protocol():\n     assert sorted(flask.g) == ['bar', 'foo']\n \n \n-def test_subdomain_basic_support():\n-    app = flask.Flask(__name__)\n-    app.config['SERVER_NAME'] = 'localhost'\n+def test_subdomain_basic_support(app, client):\n+    app.config['SERVER_NAME'] = 'localhost.localdomain'\n \n     @app.route('/')\n     def normal_index():\n@@ -1818,57 +1757,49 @@ def test_subdomain_basic_support():\n     def test_index():\n         return 'test index'\n \n-    c = app.test_client()\n-    rv = c.get('/', 'http://localhost/')\n+    rv = client.get('/', 'http://localhost.localdomain/')\n     assert rv.data == b'normal index'\n \n-    rv = c.get('/', 'http://test.localhost/')\n+    rv = client.get('/', 'http://test.localhost.localdomain/')\n     assert rv.data == b'test index'\n \n \n-def test_subdomain_matching():\n-    app = flask.Flask(__name__)\n-    app.config['SERVER_NAME'] = 'localhost'\n+def test_subdomain_matching(app, client):\n+    app.config['SERVER_NAME'] = 'localhost.localdomain'\n \n     @app.route('/', subdomain='<user>')\n     def index(user):\n         return 'index for %s' % user\n \n-    c = app.test_client()\n-    rv = c.get('/', 'http://mitsuhiko.localhost/')\n+    rv = client.get('/', 'http://mitsuhiko.localhost.localdomain/')\n     assert rv.data == b'index for mitsuhiko'\n \n \n-def test_subdomain_matching_with_ports():\n-    app = flask.Flask(__name__)\n-    app.config['SERVER_NAME'] = 'localhost:3000'\n+def test_subdomain_matching_with_ports(app, client):\n+    app.config['SERVER_NAME'] = 'localhost.localdomain:3000'\n \n     @app.route('/', subdomain='<user>')\n     def index(user):\n         return 'index for %s' % user\n \n-    c = app.test_client()\n-    rv = c.get('/', 'http://mitsuhiko.localhost:3000/')\n+    rv = client.get('/', 'http://mitsuhiko.localhost.localdomain:3000/')\n     assert rv.data == b'index for mitsuhiko'\n \n \n-def test_multi_route_rules():\n-    app = flask.Flask(__name__)\n-\n+def test_multi_route_rules(app, client):\n     @app.route('/')\n     @app.route('/<test>/')\n     def index(test='a'):\n         return test\n \n-    rv = app.test_client().open('/')\n+    rv = client.open('/')\n     assert rv.data == b'a'\n-    rv = app.test_client().open('/b/')\n+    rv = client.open('/b/')\n     assert rv.data == b'b'\n \n \n-def test_multi_route_class_views():\n+def test_multi_route_class_views(app, client):\n     class View(object):\n-\n         def __init__(self, app):\n             app.add_url_rule('/', 'index', self.index)\n             app.add_url_rule('/<test>/', 'index', self.index)\n@@ -1876,35 +1807,32 @@ def test_multi_route_class_views():\n         def index(self, test='a'):\n             return test\n \n-    app = flask.Flask(__name__)\n     _ = View(app)\n-    rv = app.test_client().open('/')\n+    rv = client.open('/')\n     assert rv.data == b'a'\n-    rv = app.test_client().open('/b/')\n+    rv = client.open('/b/')\n     assert rv.data == b'b'\n \n \n-def test_run_defaults(monkeypatch):\n+def test_run_defaults(monkeypatch, app):\n     rv = {}\n \n     # Mocks werkzeug.serving.run_simple method\n     def run_simple_mock(*args, **kwargs):\n         rv['result'] = 'running...'\n \n-    app = flask.Flask(__name__)\n     monkeypatch.setattr(werkzeug.serving, 'run_simple', run_simple_mock)\n     app.run()\n     assert rv['result'] == 'running...'\n \n \n-def test_run_server_port(monkeypatch):\n+def test_run_server_port(monkeypatch, app):\n     rv = {}\n \n     # Mocks werkzeug.serving.run_simple method\n     def run_simple_mock(hostname, port, application, *args, **kwargs):\n         rv['result'] = 'running on %s:%s ...' % (hostname, port)\n \n-    app = flask.Flask(__name__)\n     monkeypatch.setattr(werkzeug.serving, 'run_simple', run_simple_mock)\n     hostname, port = 'localhost', 8000\n     app.run(hostname, port, debug=True)\n@@ -1917,12 +1845,11 @@ def test_run_server_port(monkeypatch):\n         (None, 80, 'pocoo.org', 80),\n         ('localhost', 80, 'localhost', 80),\n ))\n-def test_run_from_config(monkeypatch, host, port, expect_host, expect_port):\n+def test_run_from_config(monkeypatch, host, port, expect_host, expect_port, app):\n     def run_simple_mock(hostname, port, *args, **kwargs):\n         assert hostname == expect_host\n         assert port == expect_port\n \n     monkeypatch.setattr(werkzeug.serving, 'run_simple', run_simple_mock)\n-    app = flask.Flask(__name__)\n     app.config['SERVER_NAME'] = 'pocoo.org:8080'\n     app.run(host, port)\n\n@@ -18,7 +18,7 @@ from werkzeug.http import parse_cache_control_header\n from jinja2 import TemplateNotFound\n \n \n-def test_blueprint_specific_error_handling():\n+def test_blueprint_specific_error_handling(app, client):\n     frontend = flask.Blueprint('frontend', __name__)\n     backend = flask.Blueprint('backend', __name__)\n     sideend = flask.Blueprint('sideend', __name__)\n@@ -43,7 +43,6 @@ def test_blueprint_specific_error_handling():\n     def sideend_no():\n         flask.abort(403)\n \n-    app = flask.Flask(__name__)\n     app.register_blueprint(frontend)\n     app.register_blueprint(backend)\n     app.register_blueprint(sideend)\n@@ -52,15 +51,15 @@ def test_blueprint_specific_error_handling():\n     def app_forbidden(e):\n         return 'application itself says no', 403\n \n-    c = app.test_client()\n+    assert client.get('/frontend-no').data == b'frontend says no'\n+    assert client.get('/backend-no').data == b'backend says no'\n+    assert client.get('/what-is-a-sideend').data == b'application itself says no'\n \n-    assert c.get('/frontend-no').data == b'frontend says no'\n-    assert c.get('/backend-no').data == b'backend says no'\n-    assert c.get('/what-is-a-sideend').data == b'application itself says no'\n \n-def test_blueprint_specific_user_error_handling():\n+def test_blueprint_specific_user_error_handling(app, client):\n     class MyDecoratorException(Exception):\n         pass\n+\n     class MyFunctionException(Exception):\n         pass\n \n@@ -74,32 +73,30 @@ def test_blueprint_specific_user_error_handling():\n     def my_function_exception_handler(e):\n         assert isinstance(e, MyFunctionException)\n         return 'bam'\n+\n     blue.register_error_handler(MyFunctionException, my_function_exception_handler)\n \n     @blue.route('/decorator')\n     def blue_deco_test():\n         raise MyDecoratorException()\n+\n     @blue.route('/function')\n     def blue_func_test():\n         raise MyFunctionException()\n \n-    app = flask.Flask(__name__)\n     app.register_blueprint(blue)\n \n-    c = app.test_client()\n+    assert client.get('/decorator').data == b'boom'\n+    assert client.get('/function').data == b'bam'\n \n-    assert c.get('/decorator').data == b'boom'\n-    assert c.get('/function').data == b'bam'\n \n-def test_blueprint_app_error_handling():\n+def test_blueprint_app_error_handling(app, client):\n     errors = flask.Blueprint('errors', __name__)\n \n     @errors.app_errorhandler(403)\n     def forbidden_handler(e):\n         return 'you shall not pass', 403\n \n-    app = flask.Flask(__name__)\n-\n     @app.route('/forbidden')\n     def app_forbidden():\n         flask.abort(403)\n@@ -113,12 +110,11 @@ def test_blueprint_app_error_handling():\n     app.register_blueprint(errors)\n     app.register_blueprint(forbidden_bp)\n \n-    c = app.test_client()\n+    assert client.get('/forbidden').data == b'you shall not pass'\n+    assert client.get('/nope').data == b'you shall not pass'\n \n-    assert c.get('/forbidden').data == b'you shall not pass'\n-    assert c.get('/nope').data == b'you shall not pass'\n \n-def test_blueprint_url_definitions():\n+def test_blueprint_url_definitions(app, client):\n     bp = flask.Blueprint('test', __name__)\n \n     @bp.route('/foo', defaults={'baz': 42})\n@@ -129,17 +125,16 @@ def test_blueprint_url_definitions():\n     def bar(bar):\n         return text_type(bar)\n \n-    app = flask.Flask(__name__)\n     app.register_blueprint(bp, url_prefix='/1', url_defaults={'bar': 23})\n     app.register_blueprint(bp, url_prefix='/2', url_defaults={'bar': 19})\n \n-    c = app.test_client()\n-    assert c.get('/1/foo').data == b'23/42'\n-    assert c.get('/2/foo').data == b'19/42'\n-    assert c.get('/1/bar').data == b'23'\n-    assert c.get('/2/bar').data == b'19'\n+    assert client.get('/1/foo').data == b'23/42'\n+    assert client.get('/2/foo').data == b'19/42'\n+    assert client.get('/1/bar').data == b'23'\n+    assert client.get('/2/bar').data == b'19'\n \n-def test_blueprint_url_processors():\n+\n+def test_blueprint_url_processors(app, client):\n     bp = flask.Blueprint('frontend', __name__, url_prefix='/<lang_code>')\n \n     @bp.url_defaults\n@@ -158,28 +153,26 @@ def test_blueprint_url_processors():\n     def about():\n         return flask.url_for('.index')\n \n-    app = flask.Flask(__name__)\n     app.register_blueprint(bp)\n \n-    c = app.test_client()\n+    assert client.get('/de/').data == b'/de/about'\n+    assert client.get('/de/about').data == b'/de/'\n \n-    assert c.get('/de/').data == b'/de/about'\n-    assert c.get('/de/about').data == b'/de/'\n \n def test_templates_and_static(test_apps):\n     from blueprintapp import app\n-    c = app.test_client()\n+    client = app.test_client()\n \n-    rv = c.get('/')\n+    rv = client.get('/')\n     assert rv.data == b'Hello from the Frontend'\n-    rv = c.get('/admin/')\n+    rv = client.get('/admin/')\n     assert rv.data == b'Hello from the Admin'\n-    rv = c.get('/admin/index2')\n+    rv = client.get('/admin/index2')\n     assert rv.data == b'Hello from the Admin'\n-    rv = c.get('/admin/static/test.txt')\n+    rv = client.get('/admin/static/test.txt')\n     assert rv.data.strip() == b'Admin File'\n     rv.close()\n-    rv = c.get('/admin/static/css/test.css')\n+    rv = client.get('/admin/static/css/test.css')\n     assert rv.data.strip() == b'/* nested file */'\n     rv.close()\n \n@@ -190,7 +183,7 @@ def test_templates_and_static(test_apps):\n         if app.config['SEND_FILE_MAX_AGE_DEFAULT'] == expected_max_age:\n             expected_max_age = 7200\n         app.config['SEND_FILE_MAX_AGE_DEFAULT'] = expected_max_age\n-        rv = c.get('/admin/static/css/test.css')\n+        rv = client.get('/admin/static/css/test.css')\n         cc = parse_cache_control_header(rv.headers['Cache-Control'])\n         assert cc.max_age == expected_max_age\n         rv.close()\n@@ -208,8 +201,10 @@ def test_templates_and_static(test_apps):\n     with flask.Flask(__name__).test_request_context():\n         assert flask.render_template('nested/nested.txt') == 'I\\'m nested'\n \n+\n def test_default_static_cache_timeout():\n     app = flask.Flask(__name__)\n+\n     class MyBlueprint(flask.Blueprint):\n         def get_send_file_max_age(self, filename):\n             return 100\n@@ -232,12 +227,14 @@ def test_default_static_cache_timeout():\n     finally:\n         app.config['SEND_FILE_MAX_AGE_DEFAULT'] = max_age_default\n \n+\n def test_templates_list(test_apps):\n     from blueprintapp import app\n     templates = sorted(app.jinja_env.list_templates())\n     assert templates == ['admin/index.html', 'frontend/index.html']\n \n-def test_dotted_names():\n+\n+def test_dotted_names(app, client):\n     frontend = flask.Blueprint('myapp.frontend', __name__)\n     backend = flask.Blueprint('myapp.backend', __name__)\n \n@@ -253,18 +250,15 @@ def test_dotted_names():\n     def backend_index():\n         return flask.url_for('myapp.frontend.frontend_index')\n \n-    app = flask.Flask(__name__)\n     app.register_blueprint(frontend)\n     app.register_blueprint(backend)\n \n-    c = app.test_client()\n-    assert c.get('/fe').data.strip() == b'/be'\n-    assert c.get('/fe2').data.strip() == b'/fe'\n-    assert c.get('/be').data.strip() == b'/fe'\n+    assert client.get('/fe').data.strip() == b'/be'\n+    assert client.get('/fe2').data.strip() == b'/fe'\n+    assert client.get('/be').data.strip() == b'/fe'\n \n-def test_dotted_names_from_app():\n-    app = flask.Flask(__name__)\n-    app.testing = True\n+\n+def test_dotted_names_from_app(app, client):\n     test = flask.Blueprint('test', __name__)\n \n     @app.route('/')\n@@ -277,11 +271,11 @@ def test_dotted_names_from_app():\n \n     app.register_blueprint(test)\n \n-    with app.test_client() as c:\n-        rv = c.get('/')\n+    rv = client.get('/')\n     assert rv.data == b'/test/'\n \n-def test_empty_url_defaults():\n+\n+def test_empty_url_defaults(app, client):\n     bp = flask.Blueprint('bp', __name__)\n \n     @bp.route('/', defaults={'page': 1})\n@@ -289,15 +283,13 @@ def test_empty_url_defaults():\n     def something(page):\n         return str(page)\n \n-    app = flask.Flask(__name__)\n     app.register_blueprint(bp)\n \n-    c = app.test_client()\n-    assert c.get('/').data == b'1'\n-    assert c.get('/page/2').data == b'2'\n+    assert client.get('/').data == b'1'\n+    assert client.get('/page/2').data == b'2'\n \n-def test_route_decorator_custom_endpoint():\n \n+def test_route_decorator_custom_endpoint(app, client):\n     bp = flask.Blueprint('bp', __name__)\n \n     @bp.route('/foo')\n@@ -316,21 +308,20 @@ def test_route_decorator_custom_endpoint():\n     def bar_foo():\n         return flask.request.endpoint\n \n-    app = flask.Flask(__name__)\n     app.register_blueprint(bp, url_prefix='/py')\n \n     @app.route('/')\n     def index():\n         return flask.request.endpoint\n \n-    c = app.test_client()\n-    assert c.get('/').data == b'index'\n-    assert c.get('/py/foo').data == b'bp.foo'\n-    assert c.get('/py/bar').data == b'bp.bar'\n-    assert c.get('/py/bar/123').data == b'bp.123'\n-    assert c.get('/py/bar/foo').data == b'bp.bar_foo'\n+    assert client.get('/').data == b'index'\n+    assert client.get('/py/foo').data == b'bp.foo'\n+    assert client.get('/py/bar').data == b'bp.bar'\n+    assert client.get('/py/bar/123').data == b'bp.123'\n+    assert client.get('/py/bar/foo').data == b'bp.bar_foo'\n \n-def test_route_decorator_custom_endpoint_with_dots():\n+\n+def test_route_decorator_custom_endpoint_with_dots(app, client):\n     bp = flask.Blueprint('bp', __name__)\n \n     @bp.route('/foo')\n@@ -371,21 +362,18 @@ def test_route_decorator_custom_endpoint_with_dots():\n         lambda: None\n     )\n \n-    app = flask.Flask(__name__)\n     app.register_blueprint(bp, url_prefix='/py')\n \n-    c = app.test_client()\n-    assert c.get('/py/foo').data == b'bp.foo'\n+    assert client.get('/py/foo').data == b'bp.foo'\n     # The rule's didn't actually made it through\n-    rv = c.get('/py/bar')\n+    rv = client.get('/py/bar')\n     assert rv.status_code == 404\n-    rv = c.get('/py/bar/123')\n+    rv = client.get('/py/bar/123')\n     assert rv.status_code == 404\n \n \n-def test_endpoint_decorator():\n+def test_endpoint_decorator(app, client):\n     from werkzeug.routing import Rule\n-    app = flask.Flask(__name__)\n     app.url_map.add(Rule('/foo', endpoint='bar'))\n \n     bp = flask.Blueprint('bp', __name__)\n@@ -396,229 +384,282 @@ def test_endpoint_decorator():\n \n     app.register_blueprint(bp, url_prefix='/bp_prefix')\n \n-    c = app.test_client()\n-    assert c.get('/foo').data == b'bar'\n-    assert c.get('/bp_prefix/bar').status_code == 404\n+    assert client.get('/foo').data == b'bar'\n+    assert client.get('/bp_prefix/bar').status_code == 404\n \n \n-def test_template_filter():\n+def test_template_filter(app):\n     bp = flask.Blueprint('bp', __name__)\n+\n     @bp.app_template_filter()\n     def my_reverse(s):\n         return s[::-1]\n-    app = flask.Flask(__name__)\n+\n     app.register_blueprint(bp, url_prefix='/py')\n     assert 'my_reverse' in app.jinja_env.filters.keys()\n     assert app.jinja_env.filters['my_reverse'] == my_reverse\n     assert app.jinja_env.filters['my_reverse']('abcd') == 'dcba'\n \n-def test_add_template_filter():\n+\n+def test_add_template_filter(app):\n     bp = flask.Blueprint('bp', __name__)\n+\n     def my_reverse(s):\n         return s[::-1]\n+\n     bp.add_app_template_filter(my_reverse)\n-    app = flask.Flask(__name__)\n     app.register_blueprint(bp, url_prefix='/py')\n     assert 'my_reverse' in app.jinja_env.filters.keys()\n     assert app.jinja_env.filters['my_reverse'] == my_reverse\n     assert app.jinja_env.filters['my_reverse']('abcd') == 'dcba'\n \n-def test_template_filter_with_name():\n+\n+def test_template_filter_with_name(app):\n     bp = flask.Blueprint('bp', __name__)\n+\n     @bp.app_template_filter('strrev')\n     def my_reverse(s):\n         return s[::-1]\n-    app = flask.Flask(__name__)\n+\n     app.register_blueprint(bp, url_prefix='/py')\n     assert 'strrev' in app.jinja_env.filters.keys()\n     assert app.jinja_env.filters['strrev'] == my_reverse\n     assert app.jinja_env.filters['strrev']('abcd') == 'dcba'\n \n-def test_add_template_filter_with_name():\n+\n+def test_add_template_filter_with_name(app):\n     bp = flask.Blueprint('bp', __name__)\n+\n     def my_reverse(s):\n         return s[::-1]\n+\n     bp.add_app_template_filter(my_reverse, 'strrev')\n-    app = flask.Flask(__name__)\n     app.register_blueprint(bp, url_prefix='/py')\n     assert 'strrev' in app.jinja_env.filters.keys()\n     assert app.jinja_env.filters['strrev'] == my_reverse\n     assert app.jinja_env.filters['strrev']('abcd') == 'dcba'\n \n-def test_template_filter_with_template():\n+\n+def test_template_filter_with_template(app, client):\n     bp = flask.Blueprint('bp', __name__)\n+\n     @bp.app_template_filter()\n     def super_reverse(s):\n         return s[::-1]\n-    app = flask.Flask(__name__)\n+\n     app.register_blueprint(bp, url_prefix='/py')\n+\n     @app.route('/')\n     def index():\n         return flask.render_template('template_filter.html', value='abcd')\n-    rv = app.test_client().get('/')\n+\n+    rv = client.get('/')\n     assert rv.data == b'dcba'\n \n-def test_template_filter_after_route_with_template():\n-    app = flask.Flask(__name__)\n+\n+def test_template_filter_after_route_with_template(app, client):\n     @app.route('/')\n     def index():\n         return flask.render_template('template_filter.html', value='abcd')\n+\n     bp = flask.Blueprint('bp', __name__)\n+\n     @bp.app_template_filter()\n     def super_reverse(s):\n         return s[::-1]\n+\n     app.register_blueprint(bp, url_prefix='/py')\n-    rv = app.test_client().get('/')\n+    rv = client.get('/')\n     assert rv.data == b'dcba'\n \n-def test_add_template_filter_with_template():\n+\n+def test_add_template_filter_with_template(app, client):\n     bp = flask.Blueprint('bp', __name__)\n+\n     def super_reverse(s):\n         return s[::-1]\n+\n     bp.add_app_template_filter(super_reverse)\n-    app = flask.Flask(__name__)\n     app.register_blueprint(bp, url_prefix='/py')\n+\n     @app.route('/')\n     def index():\n         return flask.render_template('template_filter.html', value='abcd')\n-    rv = app.test_client().get('/')\n+\n+    rv = client.get('/')\n     assert rv.data == b'dcba'\n \n-def test_template_filter_with_name_and_template():\n+\n+def test_template_filter_with_name_and_template(app, client):\n     bp = flask.Blueprint('bp', __name__)\n+\n     @bp.app_template_filter('super_reverse')\n     def my_reverse(s):\n         return s[::-1]\n-    app = flask.Flask(__name__)\n+\n     app.register_blueprint(bp, url_prefix='/py')\n+\n     @app.route('/')\n     def index():\n         return flask.render_template('template_filter.html', value='abcd')\n-    rv = app.test_client().get('/')\n+\n+    rv = client.get('/')\n     assert rv.data == b'dcba'\n \n-def test_add_template_filter_with_name_and_template():\n+\n+def test_add_template_filter_with_name_and_template(app, client):\n     bp = flask.Blueprint('bp', __name__)\n+\n     def my_reverse(s):\n         return s[::-1]\n+\n     bp.add_app_template_filter(my_reverse, 'super_reverse')\n-    app = flask.Flask(__name__)\n     app.register_blueprint(bp, url_prefix='/py')\n+\n     @app.route('/')\n     def index():\n         return flask.render_template('template_filter.html', value='abcd')\n-    rv = app.test_client().get('/')\n+\n+    rv = client.get('/')\n     assert rv.data == b'dcba'\n \n-def test_template_test():\n+\n+def test_template_test(app):\n     bp = flask.Blueprint('bp', __name__)\n+\n     @bp.app_template_test()\n     def is_boolean(value):\n         return isinstance(value, bool)\n-    app = flask.Flask(__name__)\n+\n     app.register_blueprint(bp, url_prefix='/py')\n     assert 'is_boolean' in app.jinja_env.tests.keys()\n     assert app.jinja_env.tests['is_boolean'] == is_boolean\n     assert app.jinja_env.tests['is_boolean'](False)\n \n-def test_add_template_test():\n+\n+def test_add_template_test(app):\n     bp = flask.Blueprint('bp', __name__)\n+\n     def is_boolean(value):\n         return isinstance(value, bool)\n+\n     bp.add_app_template_test(is_boolean)\n-    app = flask.Flask(__name__)\n     app.register_blueprint(bp, url_prefix='/py')\n     assert 'is_boolean' in app.jinja_env.tests.keys()\n     assert app.jinja_env.tests['is_boolean'] == is_boolean\n     assert app.jinja_env.tests['is_boolean'](False)\n \n-def test_template_test_with_name():\n+\n+def test_template_test_with_name(app):\n     bp = flask.Blueprint('bp', __name__)\n+\n     @bp.app_template_test('boolean')\n     def is_boolean(value):\n         return isinstance(value, bool)\n-    app = flask.Flask(__name__)\n+\n     app.register_blueprint(bp, url_prefix='/py')\n     assert 'boolean' in app.jinja_env.tests.keys()\n     assert app.jinja_env.tests['boolean'] == is_boolean\n     assert app.jinja_env.tests['boolean'](False)\n \n-def test_add_template_test_with_name():\n+\n+def test_add_template_test_with_name(app):\n     bp = flask.Blueprint('bp', __name__)\n+\n     def is_boolean(value):\n         return isinstance(value, bool)\n+\n     bp.add_app_template_test(is_boolean, 'boolean')\n-    app = flask.Flask(__name__)\n     app.register_blueprint(bp, url_prefix='/py')\n     assert 'boolean' in app.jinja_env.tests.keys()\n     assert app.jinja_env.tests['boolean'] == is_boolean\n     assert app.jinja_env.tests['boolean'](False)\n \n-def test_template_test_with_template():\n+\n+def test_template_test_with_template(app, client):\n     bp = flask.Blueprint('bp', __name__)\n+\n     @bp.app_template_test()\n     def boolean(value):\n         return isinstance(value, bool)\n-    app = flask.Flask(__name__)\n+\n     app.register_blueprint(bp, url_prefix='/py')\n+\n     @app.route('/')\n     def index():\n         return flask.render_template('template_test.html', value=False)\n-    rv = app.test_client().get('/')\n+\n+    rv = client.get('/')\n     assert b'Success!' in rv.data\n \n-def test_template_test_after_route_with_template():\n-    app = flask.Flask(__name__)\n+\n+def test_template_test_after_route_with_template(app, client):\n     @app.route('/')\n     def index():\n         return flask.render_template('template_test.html', value=False)\n+\n     bp = flask.Blueprint('bp', __name__)\n+\n     @bp.app_template_test()\n     def boolean(value):\n         return isinstance(value, bool)\n+\n     app.register_blueprint(bp, url_prefix='/py')\n-    rv = app.test_client().get('/')\n+    rv = client.get('/')\n     assert b'Success!' in rv.data\n \n-def test_add_template_test_with_template():\n+\n+def test_add_template_test_with_template(app, client):\n     bp = flask.Blueprint('bp', __name__)\n+\n     def boolean(value):\n         return isinstance(value, bool)\n+\n     bp.add_app_template_test(boolean)\n-    app = flask.Flask(__name__)\n     app.register_blueprint(bp, url_prefix='/py')\n+\n     @app.route('/')\n     def index():\n         return flask.render_template('template_test.html', value=False)\n-    rv = app.test_client().get('/')\n+\n+    rv = client.get('/')\n     assert b'Success!' in rv.data\n \n-def test_template_test_with_name_and_template():\n+\n+def test_template_test_with_name_and_template(app, client):\n     bp = flask.Blueprint('bp', __name__)\n+\n     @bp.app_template_test('boolean')\n     def is_boolean(value):\n         return isinstance(value, bool)\n-    app = flask.Flask(__name__)\n+\n     app.register_blueprint(bp, url_prefix='/py')\n+\n     @app.route('/')\n     def index():\n         return flask.render_template('template_test.html', value=False)\n-    rv = app.test_client().get('/')\n+\n+    rv = client.get('/')\n     assert b'Success!' in rv.data\n \n-def test_add_template_test_with_name_and_template():\n+\n+def test_add_template_test_with_name_and_template(app, client):\n     bp = flask.Blueprint('bp', __name__)\n+\n     def is_boolean(value):\n         return isinstance(value, bool)\n+\n     bp.add_app_template_test(is_boolean, 'boolean')\n-    app = flask.Flask(__name__)\n     app.register_blueprint(bp, url_prefix='/py')\n+\n     @app.route('/')\n     def index():\n         return flask.render_template('template_test.html', value=False)\n-    rv = app.test_client().get('/')\n+\n+    rv = client.get('/')\n     assert b'Success!' in rv.data\n \n+\n def test_context_processing():\n     app = flask.Flask(__name__)\n     answer_bp = flask.Blueprint('answer_bp', __name__)\n@@ -661,12 +702,15 @@ def test_context_processing():\n     assert b'42' in answer_page_bytes\n     assert b'43' in answer_page_bytes\n \n+\n def test_template_global():\n     app = flask.Flask(__name__)\n     bp = flask.Blueprint('bp', __name__)\n+\n     @bp.app_template_global()\n     def get_answer():\n         return 42\n+\n     # Make sure the function is not in the jinja_env already\n     assert 'get_answer' not in app.jinja_env.globals.keys()\n     app.register_blueprint(bp)\n\n@@ -15,10 +15,8 @@ import flask\n \n \n class TestRequestDeprecation(object):\n-\n-    def test_request_json(self, recwarn):\n+    def test_request_json(self, recwarn, app, client):\n         \"\"\"Request.json is deprecated\"\"\"\n-        app = flask.Flask(__name__)\n         app.testing = True\n \n         @app.route('/', methods=['POST'])\n@@ -27,13 +25,11 @@ class TestRequestDeprecation(object):\n             print(flask.request.json)\n             return 'OK'\n \n-        c = app.test_client()\n-        c.post('/', data='{\"spam\": 42}', content_type='application/json')\n+        client.post('/', data='{\"spam\": 42}', content_type='application/json')\n         recwarn.pop(DeprecationWarning)\n \n-    def test_request_module(self, recwarn):\n+    def test_request_module(self, recwarn, app, client):\n         \"\"\"Request.module is deprecated\"\"\"\n-        app = flask.Flask(__name__)\n         app.testing = True\n \n         @app.route('/')\n@@ -41,6 +37,5 @@ class TestRequestDeprecation(object):\n             assert flask.request.module is None\n             return 'OK'\n \n-        c = app.test_client()\n-        c.get('/')\n+        client.get('/')\n         recwarn.pop(DeprecationWarning)\n\n@@ -35,192 +35,174 @@ def has_encoding(name):\n \n \n class TestJSON(object):\n-\n-    def test_ignore_cached_json(self):\n-        app = flask.Flask(__name__)\n+    def test_ignore_cached_json(self, app):\n         with app.test_request_context('/', method='POST', data='malformed',\n                                       content_type='application/json'):\n             assert flask.request.get_json(silent=True, cache=True) is None\n             with pytest.raises(BadRequest):\n                 flask.request.get_json(silent=False, cache=False)\n \n-    def test_post_empty_json_adds_exception_to_response_content_in_debug(self):\n-        app = flask.Flask(__name__)\n+    def test_post_empty_json_adds_exception_to_response_content_in_debug(self, app, client):\n         app.config['DEBUG'] = True\n+\n         @app.route('/json', methods=['POST'])\n         def post_json():\n             flask.request.get_json()\n             return None\n-        c = app.test_client()\n-        rv = c.post('/json', data=None, content_type='application/json')\n+\n+        rv = client.post('/json', data=None, content_type='application/json')\n         assert rv.status_code == 400\n         assert b'Failed to decode JSON object' in rv.data\n \n-    def test_post_empty_json_wont_add_exception_to_response_if_no_debug(self):\n-        app = flask.Flask(__name__)\n+    def test_post_empty_json_wont_add_exception_to_response_if_no_debug(self, app, client):\n         app.config['DEBUG'] = False\n+\n         @app.route('/json', methods=['POST'])\n         def post_json():\n             flask.request.get_json()\n             return None\n-        c = app.test_client()\n-        rv = c.post('/json', data=None, content_type='application/json')\n+\n+        rv = client.post('/json', data=None, content_type='application/json')\n         assert rv.status_code == 400\n         assert b'Failed to decode JSON object' not in rv.data\n \n-    def test_json_bad_requests(self):\n-        app = flask.Flask(__name__)\n+    def test_json_bad_requests(self, app, client):\n+\n         @app.route('/json', methods=['POST'])\n         def return_json():\n             return flask.jsonify(foo=text_type(flask.request.get_json()))\n-        c = app.test_client()\n-        rv = c.post('/json', data='malformed', content_type='application/json')\n+\n+        rv = client.post('/json', data='malformed', content_type='application/json')\n         assert rv.status_code == 400\n \n-    def test_json_custom_mimetypes(self):\n-        app = flask.Flask(__name__)\n+    def test_json_custom_mimetypes(self, app, client):\n+\n         @app.route('/json', methods=['POST'])\n         def return_json():\n             return flask.request.get_json()\n-        c = app.test_client()\n-        rv = c.post('/json', data='\"foo\"', content_type='application/x+json')\n+\n+        rv = client.post('/json', data='\"foo\"', content_type='application/x+json')\n         assert rv.data == b'foo'\n \n-    def test_json_body_encoding(self):\n-        app = flask.Flask(__name__)\n+    def test_json_body_encoding(self, app, client):\n         app.testing = True\n+\n         @app.route('/')\n         def index():\n             return flask.request.get_json()\n \n-        c = app.test_client()\n-        resp = c.get('/', data=u'\"Hällo Wörld\"'.encode('iso-8859-15'),\n+        resp = client.get('/', data=u'\"Hällo Wörld\"'.encode('iso-8859-15'),\n                           content_type='application/json; charset=iso-8859-15')\n         assert resp.data == u'Hällo Wörld'.encode('utf-8')\n \n-    def test_json_as_unicode(self):\n-        app = flask.Flask(__name__)\n+    @pytest.mark.parametrize('test_value,expected', [(True, '\"\\\\u2603\"'), (False, u'\"\\u2603\"')])\n+    def test_json_as_unicode(self, test_value, expected, app, app_ctx):\n \n-        app.config['JSON_AS_ASCII'] = True\n-        with app.app_context():\n+        app.config['JSON_AS_ASCII'] = test_value\n         rv = flask.json.dumps(u'\\N{SNOWMAN}')\n-            assert rv == '\"\\\\u2603\"'\n+        assert rv == expected\n \n-        app.config['JSON_AS_ASCII'] = False\n-        with app.app_context():\n-            rv = flask.json.dumps(u'\\N{SNOWMAN}')\n-            assert rv == u'\"\\u2603\"'\n-\n-    def test_json_dump_to_file(self):\n-        app = flask.Flask(__name__)\n+    def test_json_dump_to_file(self, app, app_ctx):\n         test_data = {'name': 'Flask'}\n         out = StringIO()\n \n-        with app.app_context():\n         flask.json.dump(test_data, out)\n         out.seek(0)\n         rv = flask.json.load(out)\n         assert rv == test_data\n \n     @pytest.mark.parametrize('test_value', [0, -1, 1, 23, 3.14, 's', \"longer string\", True, False, None])\n-    def test_jsonify_basic_types(self, test_value):\n+    def test_jsonify_basic_types(self, test_value, app, client):\n         \"\"\"Test jsonify with basic types.\"\"\"\n-        app = flask.Flask(__name__)\n-        c = app.test_client()\n \n         url = '/jsonify_basic_types'\n         app.add_url_rule(url, url, lambda x=test_value: flask.jsonify(x))\n-        rv = c.get(url)\n+        rv = client.get(url)\n         assert rv.mimetype == 'application/json'\n         assert flask.json.loads(rv.data) == test_value\n \n-    def test_jsonify_dicts(self):\n+    def test_jsonify_dicts(self, app, client):\n         \"\"\"Test jsonify with dicts and kwargs unpacking.\"\"\"\n-        d = dict(\n-            a=0, b=23, c=3.14, d='t', e='Hi', f=True, g=False,\n-            h=['test list', 10, False],\n-            i={'test':'dict'}\n-        )\n-        app = flask.Flask(__name__)\n+        d = {'a': 0, 'b': 23, 'c': 3.14, 'd': 't',\n+             'e': 'Hi', 'f': True, 'g': False,\n+             'h': ['test list', 10, False],\n+             'i': {'test': 'dict'}}\n+\n         @app.route('/kw')\n         def return_kwargs():\n             return flask.jsonify(**d)\n+\n         @app.route('/dict')\n         def return_dict():\n             return flask.jsonify(d)\n-        c = app.test_client()\n+\n         for url in '/kw', '/dict':\n-            rv = c.get(url)\n+            rv = client.get(url)\n             assert rv.mimetype == 'application/json'\n             assert flask.json.loads(rv.data) == d\n \n-    def test_jsonify_arrays(self):\n+    def test_jsonify_arrays(self, app, client):\n         \"\"\"Test jsonify of lists and args unpacking.\"\"\"\n         l = [\n             0, 42, 3.14, 't', 'hello', True, False,\n             ['test list', 2, False],\n             {'test': 'dict'}\n         ]\n-        app = flask.Flask(__name__)\n+\n         @app.route('/args_unpack')\n         def return_args_unpack():\n             return flask.jsonify(*l)\n+\n         @app.route('/array')\n         def return_array():\n             return flask.jsonify(l)\n-        c = app.test_client()\n+\n         for url in '/args_unpack', '/array':\n-            rv = c.get(url)\n+            rv = client.get(url)\n             assert rv.mimetype == 'application/json'\n             assert flask.json.loads(rv.data) == l\n \n-    def test_jsonify_date_types(self):\n+    def test_jsonify_date_types(self, app, client):\n         \"\"\"Test jsonify with datetime.date and datetime.datetime types.\"\"\"\n         test_dates = (\n             datetime.datetime(1973, 3, 11, 6, 30, 45),\n             datetime.date(1975, 1, 5)\n         )\n-        app = flask.Flask(__name__)\n-        c = app.test_client()\n \n         for i, d in enumerate(test_dates):\n             url = '/datetest{0}'.format(i)\n             app.add_url_rule(url, str(i), lambda val=d: flask.jsonify(x=val))\n-            rv = c.get(url)\n+            rv = client.get(url)\n             assert rv.mimetype == 'application/json'\n             assert flask.json.loads(rv.data)['x'] == http_date(d.timetuple())\n \n-    def test_jsonify_uuid_types(self):\n+    def test_jsonify_uuid_types(self, app, client):\n         \"\"\"Test jsonify with uuid.UUID types\"\"\"\n \n         test_uuid = uuid.UUID(bytes=b'\\xDE\\xAD\\xBE\\xEF' * 4)\n-        app = flask.Flask(__name__)\n         url = '/uuid_test'\n         app.add_url_rule(url, url, lambda: flask.jsonify(x=test_uuid))\n \n-        c = app.test_client()\n-        rv = c.get(url)\n+        rv = client.get(url)\n \n         rv_x = flask.json.loads(rv.data)['x']\n         assert rv_x == str(test_uuid)\n         rv_uuid = uuid.UUID(rv_x)\n         assert rv_uuid == test_uuid\n \n-    def test_json_attr(self):\n-        app = flask.Flask(__name__)\n+    def test_json_attr(self, app, client):\n+\n         @app.route('/add', methods=['POST'])\n         def add():\n             json = flask.request.get_json()\n             return text_type(json['a'] + json['b'])\n-        c = app.test_client()\n-        rv = c.post('/add', data=flask.json.dumps({'a': 1, 'b': 2}),\n+\n+        rv = client.post('/add', data=flask.json.dumps({'a': 1, 'b': 2}),\n                          content_type='application/json')\n         assert rv.data == b'3'\n \n-    def test_template_escaping(self):\n-        app = flask.Flask(__name__)\n+    def test_template_escaping(self, app, req_ctx):\n         render = flask.render_template_string\n-        with app.test_request_context():\n         rv = flask.json.htmlsafe_dumps('</script>')\n         assert rv == u'\"\\\\u003c/script\\\\u003e\"'\n         assert type(rv) == text_type\n@@ -238,37 +220,41 @@ class TestJSON(object):\n                     data={'x': [\"foo\", \"bar\", \"baz'\"]})\n         assert rv == '<a ng-data=\\'{\"x\": [\"foo\", \"bar\", \"baz\\\\u0027\"]}\\'></a>'\n \n-    def test_json_customization(self):\n+    def test_json_customization(self, app, client):\n         class X(object):\n             def __init__(self, val):\n                 self.val = val\n+\n         class MyEncoder(flask.json.JSONEncoder):\n             def default(self, o):\n                 if isinstance(o, X):\n                     return '<%d>' % o.val\n                 return flask.json.JSONEncoder.default(self, o)\n+\n         class MyDecoder(flask.json.JSONDecoder):\n             def __init__(self, *args, **kwargs):\n                 kwargs.setdefault('object_hook', self.object_hook)\n                 flask.json.JSONDecoder.__init__(self, *args, **kwargs)\n+\n             def object_hook(self, obj):\n                 if len(obj) == 1 and '_foo' in obj:\n                     return X(obj['_foo'])\n                 return obj\n-        app = flask.Flask(__name__)\n+\n         app.testing = True\n         app.json_encoder = MyEncoder\n         app.json_decoder = MyDecoder\n+\n         @app.route('/', methods=['POST'])\n         def index():\n             return flask.json.dumps(flask.request.get_json()['x'])\n-        c = app.test_client()\n-        rv = c.post('/', data=flask.json.dumps({\n+\n+        rv = client.post('/', data=flask.json.dumps({\n             'x': {'_foo': 42}\n         }), content_type='application/json')\n         assert rv.data == b'\"<42>\"'\n \n-    def test_blueprint_json_customization(self):\n+    def test_blueprint_json_customization(self, app, client):\n         class X(object):\n             def __init__(self, val):\n                 self.val = val\n@@ -299,20 +285,18 @@ class TestJSON(object):\n         def index():\n             return flask.json.dumps(flask.request.get_json()['x'])\n \n-        app = flask.Flask(__name__)\n         app.testing = True\n         app.register_blueprint(bp)\n \n-        c = app.test_client()\n-        rv = c.post('/bp', data=flask.json.dumps({\n+        rv = client.post('/bp', data=flask.json.dumps({\n             'x': {'_foo': 42}\n         }), content_type='application/json')\n         assert rv.data == b'\"<42>\"'\n \n-    def test_modified_url_encoding(self):\n+    def test_modified_url_encoding(self, app):\n         class ModifiedRequest(flask.Request):\n             url_charset = 'euc-kr'\n-        app = flask.Flask(__name__)\n+\n         app.testing = True\n         app.request_class = ModifiedRequest\n         app.url_map.charset = 'euc-kr'\n@@ -328,8 +312,7 @@ class TestJSON(object):\n     if not has_encoding('euc-kr'):\n         test_modified_url_encoding = None\n \n-    def test_json_key_sorting(self):\n-        app = flask.Flask(__name__)\n+    def test_json_key_sorting(self, app, client):\n         app.testing = True\n         app.debug = True\n \n@@ -340,8 +323,7 @@ class TestJSON(object):\n         def index():\n             return flask.jsonify(values=d)\n \n-        c = app.test_client()\n-        rv = c.get('/')\n+        rv = client.get('/')\n         lines = [x.strip() for x in rv.data.strip().decode('utf-8').splitlines()]\n         sorted_by_str = [\n             '{',\n@@ -401,11 +383,9 @@ class TestJSON(object):\n         except AssertionError:\n             assert lines == sorted_by_str\n \n-class TestSendfile(object):\n \n-    def test_send_file_regular(self):\n-        app = flask.Flask(__name__)\n-        with app.test_request_context():\n+class TestSendfile(object):\n+    def test_send_file_regular(self, app, req_ctx):\n         rv = flask.send_file('static/index.html')\n         assert rv.direct_passthrough\n         assert rv.mimetype == 'text/html'\n@@ -414,10 +394,8 @@ class TestSendfile(object):\n             assert rv.data == f.read()\n         rv.close()\n \n-    def test_send_file_xsendfile(self, catch_deprecation_warnings):\n-        app = flask.Flask(__name__)\n+    def test_send_file_xsendfile(self, app, req_ctx, catch_deprecation_warnings):\n         app.use_x_sendfile = True\n-        with app.test_request_context():\n         rv = flask.send_file('static/index.html')\n         assert rv.direct_passthrough\n         assert 'x-sendfile' in rv.headers\n@@ -426,8 +404,7 @@ class TestSendfile(object):\n         assert rv.mimetype == 'text/html'\n         rv.close()\n \n-    def test_send_file_last_modified(self):\n-        app = flask.Flask(__name__)\n+    def test_send_file_last_modified(self, app, client):\n         last_modified = datetime.datetime(1999, 1, 1)\n \n         @app.route('/')\n@@ -436,26 +413,18 @@ class TestSendfile(object):\n                                    last_modified=last_modified,\n                                    mimetype='text/plain')\n \n-        c = app.test_client()\n-        rv = c.get('/')\n+        rv = client.get('/')\n         assert rv.last_modified == last_modified\n \n-    def test_send_file_object_without_mimetype(self):\n-        app = flask.Flask(__name__)\n-\n-        with app.test_request_context():\n+    def test_send_file_object_without_mimetype(self, app, req_ctx):\n         with pytest.raises(ValueError) as excinfo:\n             flask.send_file(StringIO(\"LOL\"))\n         assert 'Unable to infer MIME-type' in str(excinfo)\n         assert 'no filename is available' in str(excinfo)\n \n-        with app.test_request_context():\n         flask.send_file(StringIO(\"LOL\"), attachment_filename='filename')\n \n-    def test_send_file_object(self):\n-        app = flask.Flask(__name__)\n-\n-        with app.test_request_context():\n+    def test_send_file_object(self, app, req_ctx):\n         with open(os.path.join(app.root_path, 'static/index.html'), mode='rb') as f:\n             rv = flask.send_file(f, mimetype='text/html')\n             rv.direct_passthrough = False\n@@ -466,7 +435,6 @@ class TestSendfile(object):\n \n         app.use_x_sendfile = True\n \n-        with app.test_request_context():\n         with open(os.path.join(app.root_path, 'static/index.html')) as f:\n             rv = flask.send_file(f, mimetype='text/html')\n             assert rv.mimetype == 'text/html'\n@@ -474,7 +442,6 @@ class TestSendfile(object):\n             rv.close()\n \n         app.use_x_sendfile = False\n-        with app.test_request_context():\n         f = StringIO('Test')\n         rv = flask.send_file(f, mimetype='application/octet-stream')\n         rv.direct_passthrough = False\n@@ -485,8 +452,10 @@ class TestSendfile(object):\n         class PyStringIO(object):\n             def __init__(self, *args, **kwargs):\n                 self._io = StringIO(*args, **kwargs)\n+\n             def __getattr__(self, name):\n                 return getattr(self._io, name)\n+\n         f = PyStringIO('Test')\n         f.name = 'test.txt'\n         rv = flask.send_file(f, attachment_filename=f.name)\n@@ -504,7 +473,6 @@ class TestSendfile(object):\n \n         app.use_x_sendfile = True\n \n-        with app.test_request_context():\n         f = StringIO('Test')\n         rv = flask.send_file(f, mimetype='text/html')\n         assert 'x-sendfile' not in rv.headers\n@@ -514,48 +482,44 @@ class TestSendfile(object):\n         not callable(getattr(Range, 'to_content_range_header', None)),\n         reason=\"not implement within werkzeug\"\n     )\n-    def test_send_file_range_request(self):\n-        app = flask.Flask(__name__)\n-\n+    def test_send_file_range_request(self, app, client):\n         @app.route('/')\n         def index():\n             return flask.send_file('static/index.html', conditional=True)\n \n-        c = app.test_client()\n-\n-        rv = c.get('/', headers={'Range': 'bytes=4-15'})\n+        rv = client.get('/', headers={'Range': 'bytes=4-15'})\n         assert rv.status_code == 206\n         with app.open_resource('static/index.html') as f:\n             assert rv.data == f.read()[4:16]\n         rv.close()\n \n-        rv = c.get('/', headers={'Range': 'bytes=4-'})\n+        rv = client.get('/', headers={'Range': 'bytes=4-'})\n         assert rv.status_code == 206\n         with app.open_resource('static/index.html') as f:\n             assert rv.data == f.read()[4:]\n         rv.close()\n \n-        rv = c.get('/', headers={'Range': 'bytes=4-1000'})\n+        rv = client.get('/', headers={'Range': 'bytes=4-1000'})\n         assert rv.status_code == 206\n         with app.open_resource('static/index.html') as f:\n             assert rv.data == f.read()[4:]\n         rv.close()\n \n-        rv = c.get('/', headers={'Range': 'bytes=-10'})\n+        rv = client.get('/', headers={'Range': 'bytes=-10'})\n         assert rv.status_code == 206\n         with app.open_resource('static/index.html') as f:\n             assert rv.data == f.read()[-10:]\n         rv.close()\n \n-        rv = c.get('/', headers={'Range': 'bytes=1000-'})\n+        rv = client.get('/', headers={'Range': 'bytes=1000-'})\n         assert rv.status_code == 416\n         rv.close()\n \n-        rv = c.get('/', headers={'Range': 'bytes=-'})\n+        rv = client.get('/', headers={'Range': 'bytes=-'})\n         assert rv.status_code == 416\n         rv.close()\n \n-        rv = c.get('/', headers={'Range': 'somethingsomething'})\n+        rv = client.get('/', headers={'Range': 'somethingsomething'})\n         assert rv.status_code == 416\n         rv.close()\n \n@@ -563,19 +527,19 @@ class TestSendfile(object):\n             os.path.join(app.root_path, 'static/index.html'))).replace(\n             microsecond=0)\n \n-        rv = c.get('/', headers={'Range': 'bytes=4-15',\n+        rv = client.get('/', headers={'Range': 'bytes=4-15',\n                                       'If-Range': http_date(last_modified)})\n         assert rv.status_code == 206\n         rv.close()\n \n-        rv = c.get('/', headers={'Range': 'bytes=4-15', 'If-Range': http_date(\n+        rv = client.get('/', headers={'Range': 'bytes=4-15', 'If-Range': http_date(\n             datetime.datetime(1999, 1, 1))})\n         assert rv.status_code == 200\n         rv.close()\n \n-    def test_attachment(self):\n+    def test_attachment(self, app, req_ctx):\n         app = flask.Flask(__name__)\n-        with app.test_request_context():\n+\n         with open(os.path.join(app.root_path, 'static/index.html')) as f:\n             rv = flask.send_file(f, as_attachment=True,\n                                  attachment_filename='index.html')\n@@ -586,14 +550,12 @@ class TestSendfile(object):\n             assert 'filename*' not in rv.headers['Content-Disposition']\n             rv.close()\n \n-        with app.test_request_context():\n         rv = flask.send_file('static/index.html', as_attachment=True)\n         value, options = parse_options_header(rv.headers['Content-Disposition'])\n         assert value == 'attachment'\n         assert options['filename'] == 'index.html'\n         rv.close()\n \n-        with app.test_request_context():\n         rv = flask.send_file(StringIO('Test'), as_attachment=True,\n                              attachment_filename='index.txt',\n                              add_etags=False)\n@@ -603,10 +565,7 @@ class TestSendfile(object):\n         assert options['filename'] == 'index.txt'\n         rv.close()\n \n-    def test_attachment_with_utf8_filename(self):\n-        app = flask.Flask(__name__)\n-\n-        with app.test_request_context():\n+    def test_attachment_with_utf8_filename(self, app, req_ctx):\n         rv = flask.send_file('static/index.html', as_attachment=True, attachment_filename=u'Ñandú／pingüino.txt')\n         content_disposition = set(rv.headers['Content-Disposition'].split('; '))\n         assert content_disposition == set((\n@@ -616,10 +575,9 @@ class TestSendfile(object):\n         ))\n         rv.close()\n \n-    def test_static_file(self):\n-        app = flask.Flask(__name__)\n+    def test_static_file(self, app, req_ctx):\n         # default cache timeout is 12 hours\n-        with app.test_request_context():\n+\n         # Test with static file handler.\n         rv = app.send_static_file('index.html')\n         cc = parse_cache_control_header(rv.headers['Cache-Control'])\n@@ -631,7 +589,7 @@ class TestSendfile(object):\n         assert cc.max_age == 12 * 60 * 60\n         rv.close()\n         app.config['SEND_FILE_MAX_AGE_DEFAULT'] = 3600\n-        with app.test_request_context():\n+\n         # Test with static file handler.\n         rv = app.send_static_file('index.html')\n         cc = parse_cache_control_header(rv.headers['Cache-Control'])\n@@ -642,9 +600,11 @@ class TestSendfile(object):\n         cc = parse_cache_control_header(rv.headers['Cache-Control'])\n         assert cc.max_age == 3600\n         rv.close()\n+\n         class StaticFileApp(flask.Flask):\n             def get_send_file_max_age(self, filename):\n                 return 10\n+\n         app = StaticFileApp(__name__)\n         with app.test_request_context():\n             # Test with static file handler.\n@@ -658,28 +618,25 @@ class TestSendfile(object):\n             assert cc.max_age == 10\n             rv.close()\n \n-    def test_send_from_directory(self):\n-        app = flask.Flask(__name__)\n+    def test_send_from_directory(self, app, req_ctx):\n         app.testing = True\n         app.root_path = os.path.join(os.path.dirname(__file__),\n                                      'test_apps', 'subdomaintestmodule')\n-        with app.test_request_context():\n         rv = flask.send_from_directory('static', 'hello.txt')\n         rv.direct_passthrough = False\n         assert rv.data.strip() == b'Hello Subdomain'\n         rv.close()\n \n-    def test_send_from_directory_bad_request(self):\n-        app = flask.Flask(__name__)\n+    def test_send_from_directory_bad_request(self, app, req_ctx):\n         app.testing = True\n         app.root_path = os.path.join(os.path.dirname(__file__),\n                                      'test_apps', 'subdomaintestmodule')\n-        with app.test_request_context():\n+\n         with pytest.raises(BadRequest):\n             flask.send_from_directory('static', 'bad\\x00')\n \n-class TestLogging(object):\n \n+class TestLogging(object):\n     def test_logger_cache(self):\n         app = flask.Flask(__name__)\n         logger1 = app.logger\n@@ -713,19 +670,18 @@ class TestLogging(object):\n             with pytest.raises(ZeroDivisionError):\n                 c.get('/exc')\n \n-    def test_debug_log_override(self):\n-        app = flask.Flask(__name__)\n+    def test_debug_log_override(self, app):\n         app.debug = True\n         app.logger_name = 'flask_tests/test_debug_log_override'\n         app.logger.level = 10\n         assert app.logger.level == 10\n \n-    def test_exception_logging(self):\n+    def test_exception_logging(self, app):\n         out = StringIO()\n-        app = flask.Flask(__name__)\n         app.config['LOGGER_HANDLER_POLICY'] = 'never'\n         app.logger_name = 'flask_tests/test_exception_logging'\n         app.logger.addHandler(StreamHandler(out))\n+        app.testing = False\n \n         @app.route('/')\n         def index():\n@@ -741,76 +697,83 @@ class TestLogging(object):\n         assert '1 // 0' in err\n         assert 'ZeroDivisionError:' in err\n \n-    def test_processor_exceptions(self):\n-        app = flask.Flask(__name__)\n+    def test_processor_exceptions(self, app, client):\n         app.config['LOGGER_HANDLER_POLICY'] = 'never'\n+        app.testing = False\n+\n         @app.before_request\n         def before_request():\n             if trigger == 'before':\n                 1 // 0\n+\n         @app.after_request\n         def after_request(response):\n             if trigger == 'after':\n                 1 // 0\n             return response\n+\n         @app.route('/')\n         def index():\n             return 'Foo'\n+\n         @app.errorhandler(500)\n         def internal_server_error(e):\n             return 'Hello Server Error', 500\n+\n         for trigger in 'before', 'after':\n-            rv = app.test_client().get('/')\n+            rv = client.get('/')\n             assert rv.status_code == 500\n             assert rv.data == b'Hello Server Error'\n \n-    def test_url_for_with_anchor(self):\n-        app = flask.Flask(__name__)\n+    def test_url_for_with_anchor(self, app, req_ctx):\n+\n         @app.route('/')\n         def index():\n             return '42'\n-        with app.test_request_context():\n+\n         assert flask.url_for('index', _anchor='x y') == '/#x%20y'\n \n-    def test_url_for_with_scheme(self):\n-        app = flask.Flask(__name__)\n+    def test_url_for_with_scheme(self, app, req_ctx):\n+\n         @app.route('/')\n         def index():\n             return '42'\n-        with app.test_request_context():\n+\n         assert flask.url_for('index', _external=True, _scheme='https') == 'https://localhost/'\n \n-    def test_url_for_with_scheme_not_external(self):\n-        app = flask.Flask(__name__)\n+    def test_url_for_with_scheme_not_external(self, app, req_ctx):\n+\n         @app.route('/')\n         def index():\n             return '42'\n-        with app.test_request_context():\n+\n         pytest.raises(ValueError,\n                       flask.url_for,\n                       'index',\n                       _scheme='https')\n \n-    def test_url_for_with_alternating_schemes(self):\n-        app = flask.Flask(__name__)\n+    def test_url_for_with_alternating_schemes(self, app, req_ctx):\n+\n         @app.route('/')\n         def index():\n             return '42'\n-        with app.test_request_context():\n+\n         assert flask.url_for('index', _external=True) == 'http://localhost/'\n         assert flask.url_for('index', _external=True, _scheme='https') == 'https://localhost/'\n         assert flask.url_for('index', _external=True) == 'http://localhost/'\n \n-    def test_url_with_method(self):\n+    def test_url_with_method(self, app, req_ctx):\n         from flask.views import MethodView\n-        app = flask.Flask(__name__)\n+\n         class MyView(MethodView):\n             def get(self, id=None):\n                 if id is None:\n                     return 'List'\n                 return 'Get %d' % id\n+\n             def post(self):\n                 return 'Create'\n+\n         myview = MyView.as_view('myview')\n         app.add_url_rule('/myview/', methods=['GET'],\n                          view_func=myview)\n@@ -819,7 +782,6 @@ class TestLogging(object):\n         app.add_url_rule('/myview/create', methods=['POST'],\n                          view_func=myview)\n \n-        with app.test_request_context():\n         assert flask.url_for('myview', _method='GET') == '/myview/'\n         assert flask.url_for('myview', id=42, _method='GET') == '/myview/42'\n         assert flask.url_for('myview', _method='POST') == '/myview/create'\n@@ -845,24 +807,24 @@ class TestNoImports(object):\n \n \n class TestStreaming(object):\n-\n-    def test_streaming_with_context(self):\n-        app = flask.Flask(__name__)\n+    def test_streaming_with_context(self, app, client):\n         app.testing = True\n+\n         @app.route('/')\n         def index():\n             def generate():\n                 yield 'Hello '\n                 yield flask.request.args['name']\n                 yield '!'\n+\n             return flask.Response(flask.stream_with_context(generate()))\n-        c = app.test_client()\n-        rv = c.get('/?name=World')\n+\n+        rv = client.get('/?name=World')\n         assert rv.data == b'Hello World!'\n \n-    def test_streaming_with_context_as_decorator(self):\n-        app = flask.Flask(__name__)\n+    def test_streaming_with_context_as_decorator(self, app, client):\n         app.testing = True\n+\n         @app.route('/')\n         def index():\n             @flask.stream_with_context\n@@ -870,35 +832,42 @@ class TestStreaming(object):\n                 yield hello\n                 yield flask.request.args['name']\n                 yield '!'\n+\n             return flask.Response(generate('Hello '))\n-        c = app.test_client()\n-        rv = c.get('/?name=World')\n+\n+        rv = client.get('/?name=World')\n         assert rv.data == b'Hello World!'\n \n-    def test_streaming_with_context_and_custom_close(self):\n-        app = flask.Flask(__name__)\n+    def test_streaming_with_context_and_custom_close(self, app, client):\n         app.testing = True\n         called = []\n+\n         class Wrapper(object):\n             def __init__(self, gen):\n                 self._gen = gen\n+\n             def __iter__(self):\n                 return self\n+\n             def close(self):\n                 called.append(42)\n+\n             def __next__(self):\n                 return next(self._gen)\n+\n             next = __next__\n+\n         @app.route('/')\n         def index():\n             def generate():\n                 yield 'Hello '\n                 yield flask.request.args['name']\n                 yield '!'\n+\n             return flask.Response(flask.stream_with_context(\n                 Wrapper(generate())))\n-        c = app.test_client()\n-        rv = c.get('/?name=World')\n+\n+        rv = client.get('/?name=World')\n         assert rv.data == b'Hello World!'\n         assert called == [42]\n \n\n@@ -9,15 +9,14 @@\n     :license: BSD, see LICENSE for more details.\n \"\"\"\n \n-import pytest\n-\n-import os\n import gc\n import sys\n-import flask\n import threading\n+\n+import pytest\n from werkzeug.exceptions import NotFound\n \n+import flask\n \n _gc_lock = threading.Lock()\n \n\n@@ -20,9 +20,9 @@ except ImportError:\n     greenlet = None\n \n \n-def test_teardown_on_pop():\n+def test_teardown_on_pop(app):\n     buffer = []\n-    app = flask.Flask(__name__)\n+\n     @app.teardown_request\n     def end_of_request(exception):\n         buffer.append(exception)\n@@ -33,9 +33,10 @@ def test_teardown_on_pop():\n     ctx.pop()\n     assert buffer == [None]\n \n-def test_teardown_with_previous_exception():\n+\n+def test_teardown_with_previous_exception(app):\n     buffer = []\n-    app = flask.Flask(__name__)\n+\n     @app.teardown_request\n     def end_of_request(exception):\n         buffer.append(exception)\n@@ -49,9 +50,10 @@ def test_teardown_with_previous_exception():\n         assert buffer == []\n     assert buffer == [None]\n \n-def test_teardown_with_handled_exception():\n+\n+def test_teardown_with_handled_exception(app):\n     buffer = []\n-    app = flask.Flask(__name__)\n+\n     @app.teardown_request\n     def end_of_request(exception):\n         buffer.append(exception)\n@@ -64,8 +66,8 @@ def test_teardown_with_handled_exception():\n             pass\n     assert buffer == [None]\n \n-def test_proper_test_request_context():\n-    app = flask.Flask(__name__)\n+\n+def test_proper_test_request_context(app):\n     app.config.update(\n         SERVER_NAME='localhost.localdomain:5000'\n     )\n@@ -104,11 +106,12 @@ def test_proper_test_request_context():\n     with app.test_request_context('/', environ_overrides={'SERVER_NAME': 'localhost:80'}):\n         pass\n \n-def test_context_binding():\n-    app = flask.Flask(__name__)\n+\n+def test_context_binding(app):\n     @app.route('/')\n     def index():\n         return 'Hello %s!' % flask.request.args['name']\n+\n     @app.route('/meh')\n     def meh():\n         return flask.request.url\n@@ -119,8 +122,8 @@ def test_context_binding():\n         assert meh() == 'http://localhost/meh'\n     assert flask._request_ctx_stack.top is None\n \n-def test_context_test():\n-    app = flask.Flask(__name__)\n+\n+def test_context_test(app):\n     assert not flask.request\n     assert not flask.has_request_context()\n     ctx = app.test_request_context()\n@@ -131,8 +134,8 @@ def test_context_test():\n     finally:\n         ctx.pop()\n \n-def test_manual_context_binding():\n-    app = flask.Flask(__name__)\n+\n+def test_manual_context_binding(app):\n     @app.route('/')\n     def index():\n         return 'Hello %s!' % flask.request.args['name']\n@@ -144,14 +147,15 @@ def test_manual_context_binding():\n     with pytest.raises(RuntimeError):\n         index()\n \n+\n @pytest.mark.skipif(greenlet is None, reason='greenlet not installed')\n-def test_greenlet_context_copying():\n-    app = flask.Flask(__name__)\n+def test_greenlet_context_copying(app, client):\n     greenlets = []\n \n     @app.route('/')\n     def index():\n         reqctx = flask._request_ctx_stack.top.copy()\n+\n         def g():\n             assert not flask.request\n             assert not flask.current_app\n@@ -162,23 +166,25 @@ def test_greenlet_context_copying():\n                 assert flask.request.args['foo'] == 'bar'\n             assert not flask.request\n             return 42\n+\n         greenlets.append(greenlet(g))\n         return 'Hello World!'\n \n-    rv = app.test_client().get('/?foo=bar')\n+    rv = client.get('/?foo=bar')\n     assert rv.data == b'Hello World!'\n \n     result = greenlets[0].run()\n     assert result == 42\n \n+\n @pytest.mark.skipif(greenlet is None, reason='greenlet not installed')\n-def test_greenlet_context_copying_api():\n-    app = flask.Flask(__name__)\n+def test_greenlet_context_copying_api(app, client):\n     greenlets = []\n \n     @app.route('/')\n     def index():\n         reqctx = flask._request_ctx_stack.top.copy()\n+\n         @flask.copy_current_request_context\n         def g():\n             assert flask.request\n@@ -186,10 +192,11 @@ def test_greenlet_context_copying_api():\n             assert flask.request.path == '/'\n             assert flask.request.args['foo'] == 'bar'\n             return 42\n+\n         greenlets.append(greenlet(g))\n         return 'Hello World!'\n \n-    rv = app.test_client().get('/?foo=bar')\n+    rv = client.get('/?foo=bar')\n     assert rv.data == b'Hello World!'\n \n     result = greenlets[0].run()\n\n@@ -16,40 +16,43 @@ import logging\n from jinja2 import TemplateNotFound\n \n \n-def test_context_processing():\n-    app = flask.Flask(__name__)\n+def test_context_processing(app):\n     @app.context_processor\n     def context_processor():\n         return {'injected_value': 42}\n+\n     @app.route('/')\n     def index():\n         return flask.render_template('context_template.html', value=23)\n+\n     rv = app.test_client().get('/')\n     assert rv.data == b'<p>23|42'\n \n-def test_original_win():\n-    app = flask.Flask(__name__)\n+\n+def test_original_win(app, client):\n     @app.route('/')\n     def index():\n         return flask.render_template_string('{{ config }}', config=42)\n-    rv = app.test_client().get('/')\n+\n+    rv = client.get('/')\n     assert rv.data == b'42'\n \n-def test_request_less_rendering():\n-    app = flask.Flask(__name__)\n+\n+def test_request_less_rendering(app, app_ctx):\n     app.config['WORLD_NAME'] = 'Special World'\n+\n     @app.context_processor\n     def context_processor():\n         return dict(foo=42)\n \n-    with app.app_context():\n     rv = flask.render_template_string('Hello {{ config.WORLD_NAME }} '\n                                       '{{ foo }}')\n     assert rv == 'Hello Special World 42'\n \n-def test_standard_context():\n-    app = flask.Flask(__name__)\n+\n+def test_standard_context(app, client):\n     app.secret_key = 'development key'\n+\n     @app.route('/')\n     def index():\n         flask.g.foo = 23\n@@ -60,17 +63,20 @@ def test_standard_context():\n             {{ config.DEBUG }}\n             {{ session.test }}\n         ''')\n-    rv = app.test_client().get('/?foo=42')\n+\n+    rv = client.get('/?foo=42')\n     assert rv.data.split() == [b'42', b'23', b'False', b'aha']\n \n-def test_escaping():\n+\n+def test_escaping(app, client):\n     text = '<p>Hello World!'\n-    app = flask.Flask(__name__)\n+\n     @app.route('/')\n     def index():\n         return flask.render_template('escaping_template.html', text=text,\n                                      html=flask.Markup(text))\n-    lines = app.test_client().get('/').data.splitlines()\n+\n+    lines = client.get('/').data.splitlines()\n     assert lines == [\n         b'&lt;p&gt;Hello World!',\n         b'<p>Hello World!',\n@@ -80,14 +86,16 @@ def test_escaping():\n         b'<p>Hello World!'\n     ]\n \n-def test_no_escaping():\n+\n+def test_no_escaping(app, client):\n     text = '<p>Hello World!'\n-    app = flask.Flask(__name__)\n+\n     @app.route('/')\n     def index():\n         return flask.render_template('non_escaping_template.txt', text=text,\n                                      html=flask.Markup(text))\n-    lines = app.test_client().get('/').data.splitlines()\n+\n+    lines = client.get('/').data.splitlines()\n     assert lines == [\n         b'<p>Hello World!',\n         b'<p>Hello World!',\n@@ -99,210 +107,241 @@ def test_no_escaping():\n         b'<p>Hello World!'\n     ]\n \n-def test_escaping_without_template_filename():\n-    app = flask.Flask(__name__)\n-    with app.test_request_context():\n+\n+def test_escaping_without_template_filename(app, client, req_ctx):\n     assert flask.render_template_string(\n         '{{ foo }}', foo='<test>') == '&lt;test&gt;'\n-        assert flask.render_template('mail.txt', foo='<test>') == \\\n-            '<test> Mail'\n+    assert flask.render_template('mail.txt', foo='<test>') == '<test> Mail'\n \n-def test_macros():\n-    app = flask.Flask(__name__)\n-    with app.test_request_context():\n+\n+def test_macros(app, req_ctx):\n     macro = flask.get_template_attribute('_macro.html', 'hello')\n     assert macro('World') == 'Hello World!'\n \n-def test_template_filter():\n-    app = flask.Flask(__name__)\n+\n+def test_template_filter(app):\n     @app.template_filter()\n     def my_reverse(s):\n         return s[::-1]\n+\n     assert 'my_reverse' in app.jinja_env.filters.keys()\n     assert app.jinja_env.filters['my_reverse'] == my_reverse\n     assert app.jinja_env.filters['my_reverse']('abcd') == 'dcba'\n \n-def test_add_template_filter():\n-    app = flask.Flask(__name__)\n+\n+def test_add_template_filter(app):\n     def my_reverse(s):\n         return s[::-1]\n+\n     app.add_template_filter(my_reverse)\n     assert 'my_reverse' in app.jinja_env.filters.keys()\n     assert app.jinja_env.filters['my_reverse'] == my_reverse\n     assert app.jinja_env.filters['my_reverse']('abcd') == 'dcba'\n \n-def test_template_filter_with_name():\n-    app = flask.Flask(__name__)\n+\n+def test_template_filter_with_name(app):\n     @app.template_filter('strrev')\n     def my_reverse(s):\n         return s[::-1]\n+\n     assert 'strrev' in app.jinja_env.filters.keys()\n     assert app.jinja_env.filters['strrev'] == my_reverse\n     assert app.jinja_env.filters['strrev']('abcd') == 'dcba'\n \n-def test_add_template_filter_with_name():\n-    app = flask.Flask(__name__)\n+\n+def test_add_template_filter_with_name(app):\n     def my_reverse(s):\n         return s[::-1]\n+\n     app.add_template_filter(my_reverse, 'strrev')\n     assert 'strrev' in app.jinja_env.filters.keys()\n     assert app.jinja_env.filters['strrev'] == my_reverse\n     assert app.jinja_env.filters['strrev']('abcd') == 'dcba'\n \n-def test_template_filter_with_template():\n-    app = flask.Flask(__name__)\n+\n+def test_template_filter_with_template(app, client):\n     @app.template_filter()\n     def super_reverse(s):\n         return s[::-1]\n+\n     @app.route('/')\n     def index():\n         return flask.render_template('template_filter.html', value='abcd')\n-    rv = app.test_client().get('/')\n+\n+    rv = client.get('/')\n     assert rv.data == b'dcba'\n \n-def test_add_template_filter_with_template():\n-    app = flask.Flask(__name__)\n+\n+def test_add_template_filter_with_template(app, client):\n     def super_reverse(s):\n         return s[::-1]\n+\n     app.add_template_filter(super_reverse)\n+\n     @app.route('/')\n     def index():\n         return flask.render_template('template_filter.html', value='abcd')\n-    rv = app.test_client().get('/')\n+\n+    rv = client.get('/')\n     assert rv.data == b'dcba'\n \n-def test_template_filter_with_name_and_template():\n-    app = flask.Flask(__name__)\n+\n+def test_template_filter_with_name_and_template(app, client):\n     @app.template_filter('super_reverse')\n     def my_reverse(s):\n         return s[::-1]\n+\n     @app.route('/')\n     def index():\n         return flask.render_template('template_filter.html', value='abcd')\n-    rv = app.test_client().get('/')\n+\n+    rv = client.get('/')\n     assert rv.data == b'dcba'\n \n-def test_add_template_filter_with_name_and_template():\n-    app = flask.Flask(__name__)\n+\n+def test_add_template_filter_with_name_and_template(app, client):\n     def my_reverse(s):\n         return s[::-1]\n+\n     app.add_template_filter(my_reverse, 'super_reverse')\n+\n     @app.route('/')\n     def index():\n         return flask.render_template('template_filter.html', value='abcd')\n-    rv = app.test_client().get('/')\n+\n+    rv = client.get('/')\n     assert rv.data == b'dcba'\n \n-def test_template_test():\n-    app = flask.Flask(__name__)\n+\n+def test_template_test(app):\n     @app.template_test()\n     def boolean(value):\n         return isinstance(value, bool)\n+\n     assert 'boolean' in app.jinja_env.tests.keys()\n     assert app.jinja_env.tests['boolean'] == boolean\n     assert app.jinja_env.tests['boolean'](False)\n \n-def test_add_template_test():\n-    app = flask.Flask(__name__)\n+\n+def test_add_template_test(app):\n     def boolean(value):\n         return isinstance(value, bool)\n+\n     app.add_template_test(boolean)\n     assert 'boolean' in app.jinja_env.tests.keys()\n     assert app.jinja_env.tests['boolean'] == boolean\n     assert app.jinja_env.tests['boolean'](False)\n \n-def test_template_test_with_name():\n-    app = flask.Flask(__name__)\n+\n+def test_template_test_with_name(app):\n     @app.template_test('boolean')\n     def is_boolean(value):\n         return isinstance(value, bool)\n+\n     assert 'boolean' in app.jinja_env.tests.keys()\n     assert app.jinja_env.tests['boolean'] == is_boolean\n     assert app.jinja_env.tests['boolean'](False)\n \n-def test_add_template_test_with_name():\n-    app = flask.Flask(__name__)\n+\n+def test_add_template_test_with_name(app):\n     def is_boolean(value):\n         return isinstance(value, bool)\n+\n     app.add_template_test(is_boolean, 'boolean')\n     assert 'boolean' in app.jinja_env.tests.keys()\n     assert app.jinja_env.tests['boolean'] == is_boolean\n     assert app.jinja_env.tests['boolean'](False)\n \n-def test_template_test_with_template():\n-    app = flask.Flask(__name__)\n+\n+def test_template_test_with_template(app):\n     @app.template_test()\n     def boolean(value):\n         return isinstance(value, bool)\n+\n     @app.route('/')\n     def index():\n         return flask.render_template('template_test.html', value=False)\n+\n     rv = app.test_client().get('/')\n     assert b'Success!' in rv.data\n \n-def test_add_template_test_with_template():\n-    app = flask.Flask(__name__)\n+\n+def test_add_template_test_with_template(app, client):\n     def boolean(value):\n         return isinstance(value, bool)\n+\n     app.add_template_test(boolean)\n+\n     @app.route('/')\n     def index():\n         return flask.render_template('template_test.html', value=False)\n-    rv = app.test_client().get('/')\n+\n+    rv = client.get('/')\n     assert b'Success!' in rv.data\n \n-def test_template_test_with_name_and_template():\n-    app = flask.Flask(__name__)\n+\n+def test_template_test_with_name_and_template(app, client):\n     @app.template_test('boolean')\n     def is_boolean(value):\n         return isinstance(value, bool)\n+\n     @app.route('/')\n     def index():\n         return flask.render_template('template_test.html', value=False)\n-    rv = app.test_client().get('/')\n+\n+    rv = client.get('/')\n     assert b'Success!' in rv.data\n \n-def test_add_template_test_with_name_and_template():\n-    app = flask.Flask(__name__)\n+\n+def test_add_template_test_with_name_and_template(app, client):\n     def is_boolean(value):\n         return isinstance(value, bool)\n+\n     app.add_template_test(is_boolean, 'boolean')\n+\n     @app.route('/')\n     def index():\n         return flask.render_template('template_test.html', value=False)\n-    rv = app.test_client().get('/')\n+\n+    rv = client.get('/')\n     assert b'Success!' in rv.data\n \n-def test_add_template_global():\n-    app = flask.Flask(__name__)\n+\n+def test_add_template_global(app, app_ctx):\n     @app.template_global()\n     def get_stuff():\n         return 42\n+\n     assert 'get_stuff' in app.jinja_env.globals.keys()\n     assert app.jinja_env.globals['get_stuff'] == get_stuff\n     assert app.jinja_env.globals['get_stuff'](), 42\n-    with app.app_context():\n+\n     rv = flask.render_template_string('{{ get_stuff() }}')\n     assert rv == '42'\n \n-def test_custom_template_loader():\n+\n+def test_custom_template_loader(client):\n     class MyFlask(flask.Flask):\n         def create_global_jinja_loader(self):\n             from jinja2 import DictLoader\n             return DictLoader({'index.html': 'Hello Custom World!'})\n+\n     app = MyFlask(__name__)\n+\n     @app.route('/')\n     def index():\n         return flask.render_template('index.html')\n+\n     c = app.test_client()\n     rv = c.get('/')\n     assert rv.data == b'Hello Custom World!'\n \n-def test_iterable_loader():\n-    app = flask.Flask(__name__)\n+\n+def test_iterable_loader(app, client):\n     @app.context_processor\n     def context_processor():\n         return {'whiskey': 'Jameson'}\n+\n     @app.route('/')\n     def index():\n         return flask.render_template(\n@@ -311,12 +350,12 @@ def test_iterable_loader():\n              'context_template.html'],\n             value=23)\n \n-    rv = app.test_client().get('/')\n+    rv = client.get('/')\n     assert rv.data == b'<h1>Jameson</h1>'\n \n-def test_templates_auto_reload():\n+\n+def test_templates_auto_reload(app):\n     # debug is False, config option is None\n-    app = flask.Flask(__name__)\n     assert app.debug is False\n     assert app.config['TEMPLATES_AUTO_RELOAD'] is None\n     assert app.jinja_env.auto_reload is False\n@@ -346,10 +385,12 @@ def test_templates_auto_reload():\n     app.config['TEMPLATES_AUTO_RELOAD'] = True\n     assert app.jinja_env.auto_reload is True\n \n+\n def test_template_loader_debugging(test_apps):\n     from blueprintapp import app\n \n     called = []\n+\n     class _TestHandler(logging.Handler):\n         def handle(x, record):\n             called.append(True)\n@@ -381,6 +422,7 @@ def test_template_loader_debugging(test_apps):\n \n     assert len(called) == 1\n \n+\n def test_custom_jinja_env():\n     class CustomEnvironment(flask.templating.Environment):\n         pass\n\n@@ -16,24 +16,22 @@ import werkzeug\n from flask._compat import text_type\n \n \n-def test_environ_defaults_from_config():\n-    app = flask.Flask(__name__)\n-    app.testing = True\n+def test_environ_defaults_from_config(app, client):\n     app.config['SERVER_NAME'] = 'example.com:1234'\n     app.config['APPLICATION_ROOT'] = '/foo'\n+\n     @app.route('/')\n     def index():\n         return flask.request.url\n \n     ctx = app.test_request_context()\n     assert ctx.request.url == 'http://example.com:1234/foo/'\n-    with app.test_client() as c:\n-        rv = c.get('/')\n+\n+    rv = client.get('/')\n     assert rv.data == b'http://example.com:1234/foo/'\n \n-def test_environ_defaults():\n-    app = flask.Flask(__name__)\n-    app.testing = True\n+\n+def test_environ_defaults(app, client, app_ctx, req_ctx):\n     @app.route('/')\n     def index():\n         return flask.request.url\n@@ -44,42 +42,40 @@ def test_environ_defaults():\n         rv = c.get('/')\n         assert rv.data == b'http://localhost/'\n \n-def test_environ_base_default():\n-    app = flask.Flask(__name__)\n+\n+def test_environ_base_default(app, client, app_ctx):\n     app.testing = True\n+\n     @app.route('/')\n     def index():\n         flask.g.user_agent = flask.request.headers[\"User-Agent\"]\n         return flask.request.remote_addr\n \n-    with app.test_client() as c:\n-        rv = c.get('/')\n+    rv = client.get('/')\n     assert rv.data == b'127.0.0.1'\n     assert flask.g.user_agent == 'werkzeug/' + werkzeug.__version__\n \n-def test_environ_base_modified():\n-    app = flask.Flask(__name__)\n-    app.testing = True\n+\n+def test_environ_base_modified(app, client, app_ctx):\n     @app.route('/')\n     def index():\n         flask.g.user_agent = flask.request.headers[\"User-Agent\"]\n         return flask.request.remote_addr\n \n-    with app.test_client() as c:\n-        c.environ_base['REMOTE_ADDR'] = '0.0.0.0'\n-        c.environ_base['HTTP_USER_AGENT'] = 'Foo'\n-        rv = c.get('/')\n+    client.environ_base['REMOTE_ADDR'] = '0.0.0.0'\n+    client.environ_base['HTTP_USER_AGENT'] = 'Foo'\n+    rv = client.get('/')\n     assert rv.data == b'0.0.0.0'\n     assert flask.g.user_agent == 'Foo'\n \n-        c.environ_base['REMOTE_ADDR'] = '0.0.0.1'\n-        c.environ_base['HTTP_USER_AGENT'] = 'Bar'\n-        rv = c.get('/')\n+    client.environ_base['REMOTE_ADDR'] = '0.0.0.1'\n+    client.environ_base['HTTP_USER_AGENT'] = 'Bar'\n+    rv = client.get('/')\n     assert rv.data == b'0.0.0.1'\n     assert flask.g.user_agent == 'Bar'\n \n-def test_redirect_keep_session():\n-    app = flask.Flask(__name__)\n+\n+def test_redirect_keep_session(app, client, app_ctx):\n     app.secret_key = 'testing'\n \n     @app.route('/', methods=['GET', 'POST'])\n@@ -93,7 +89,7 @@ def test_redirect_keep_session():\n     def get_session():\n         return flask.session.get('data', '<missing>')\n \n-    with app.test_client() as c:\n+    with client as c:\n         rv = c.get('/getsession')\n         assert rv.data == b'<missing>'\n \n@@ -110,9 +106,8 @@ def test_redirect_keep_session():\n         rv = c.get('/getsession')\n         assert rv.data == b'foo'\n \n-def test_session_transactions():\n-    app = flask.Flask(__name__)\n-    app.testing = True\n+\n+def test_session_transactions(app):\n     app.secret_key = 'testing'\n \n     @app.route('/')\n@@ -130,6 +125,7 @@ def test_session_transactions():\n             assert len(sess) == 1\n             assert sess['foo'] == [42]\n \n+\n def test_session_transactions_no_null_sessions():\n     app = flask.Flask(__name__)\n     app.testing = True\n@@ -140,30 +136,28 @@ def test_session_transactions_no_null_sessions():\n                 pass\n         assert 'Session backend did not open a session' in str(e.value)\n \n-def test_session_transactions_keep_context():\n-    app = flask.Flask(__name__)\n-    app.testing = True\n+\n+def test_session_transactions_keep_context(app, client, req_ctx):\n     app.secret_key = 'testing'\n \n-    with app.test_client() as c:\n-        rv = c.get('/')\n+    rv = client.get('/')\n     req = flask.request._get_current_object()\n     assert req is not None\n-        with c.session_transaction():\n+    with client.session_transaction():\n         assert req is flask.request._get_current_object()\n \n-def test_session_transaction_needs_cookies():\n-    app = flask.Flask(__name__)\n-    app.testing = True\n+def test_session_transaction_needs_cookies(app):\n     c = app.test_client(use_cookies=False)\n     with pytest.raises(RuntimeError) as e:\n         with c.session_transaction() as s:\n             pass\n     assert 'cookies' in str(e.value)\n \n+\n def test_test_client_context_binding():\n     app = flask.Flask(__name__)\n     app.config['LOGGER_HANDLER_POLICY'] = 'never'\n+\n     @app.route('/')\n     def index():\n         flask.g.value = 42\n@@ -192,6 +186,7 @@ def test_test_client_context_binding():\n     else:\n         raise AssertionError('some kind of exception expected')\n \n+\n def test_reuse_client():\n     app = flask.Flask(__name__)\n     c = app.test_client()\n@@ -202,9 +197,11 @@ def test_reuse_client():\n     with c:\n         assert c.get('/').status_code == 404\n \n+\n def test_test_client_calls_teardown_handlers():\n     app = flask.Flask(__name__)\n     called = []\n+\n     @app.teardown_request\n     def remember(error):\n         called.append(error)\n@@ -224,6 +221,7 @@ def test_test_client_calls_teardown_handlers():\n         assert called == [None]\n     assert called == [None, None]\n \n+\n def test_full_url_request():\n     app = flask.Flask(__name__)\n     app.testing = True\n@@ -238,9 +236,11 @@ def test_full_url_request():\n         assert 'gin' in flask.request.form\n         assert 'vodka' in flask.request.args\n \n+\n def test_subdomain():\n     app = flask.Flask(__name__)\n     app.config['SERVER_NAME'] = 'example.com'\n+\n     @app.route('/', subdomain='<company_id>')\n     def view(company_id):\n         return company_id\n@@ -254,9 +254,11 @@ def test_subdomain():\n     assert 200 == response.status_code\n     assert b'xxx' == response.data\n \n+\n def test_nosubdomain():\n     app = flask.Flask(__name__)\n     app.config['SERVER_NAME'] = 'example.com'\n+\n     @app.route('/<company_id>')\n     def view(company_id):\n         return company_id\n\n@@ -8,8 +8,7 @@ from werkzeug.exceptions import (\n import flask\n \n \n-def test_error_handler_no_match():\n-    app = flask.Flask(__name__)\n+def test_error_handler_no_match(app, client):\n \n     class CustomException(Exception):\n         pass\n@@ -31,15 +30,12 @@ def test_error_handler_no_match():\n     def key_error():\n         raise KeyError()\n \n-    c = app.test_client()\n-\n-    assert c.get('/custom').data == b'custom'\n-    assert c.get('/keyerror').data == b'KeyError'\n+    app.testing = False\n+    assert client.get('/custom').data == b'custom'\n+    assert client.get('/keyerror').data == b'KeyError'\n \n \n-def test_error_handler_subclass():\n-    app = flask.Flask(__name__)\n-\n+def test_error_handler_subclass(app):\n     class ParentException(Exception):\n         pass\n \n@@ -78,9 +74,7 @@ def test_error_handler_subclass():\n     assert c.get('/child-registered').data == b'child-registered'\n \n \n-def test_error_handler_http_subclass():\n-    app = flask.Flask(__name__)\n-\n+def test_error_handler_http_subclass(app):\n     class ForbiddenSubclassRegistered(Forbidden):\n         pass\n \n@@ -116,7 +110,7 @@ def test_error_handler_http_subclass():\n     assert c.get('/forbidden-registered').data == b'forbidden-registered'\n \n \n-def test_error_handler_blueprint():\n+def test_error_handler_blueprint(app):\n     bp = flask.Blueprint('bp', __name__)\n \n     @bp.errorhandler(500)\n@@ -127,8 +121,6 @@ def test_error_handler_blueprint():\n     def bp_test():\n         raise InternalServerError()\n \n-    app = flask.Flask(__name__)\n-\n     @app.errorhandler(500)\n     def app_exception_handler(e):\n         return 'app-error'\n\n@@ -16,6 +16,7 @@ import flask.views\n \n from werkzeug.http import parse_set_header\n \n+\n def common_test(app):\n     c = app.test_client()\n \n@@ -25,23 +26,23 @@ def common_test(app):\n     meths = parse_set_header(c.open('/', method='OPTIONS').headers['Allow'])\n     assert sorted(meths) == ['GET', 'HEAD', 'OPTIONS', 'POST']\n \n-def test_basic_view():\n-    app = flask.Flask(__name__)\n \n+def test_basic_view(app):\n     class Index(flask.views.View):\n         methods = ['GET', 'POST']\n+\n         def dispatch_request(self):\n             return flask.request.method\n \n     app.add_url_rule('/', view_func=Index.as_view('index'))\n     common_test(app)\n \n-def test_method_based_view():\n-    app = flask.Flask(__name__)\n \n+def test_method_based_view(app):\n     class Index(flask.views.MethodView):\n         def get(self):\n             return 'GET'\n+\n         def post(self):\n             return 'POST'\n \n@@ -49,18 +50,19 @@ def test_method_based_view():\n \n     common_test(app)\n \n-def test_view_patching():\n-    app = flask.Flask(__name__)\n \n+def test_view_patching(app):\n     class Index(flask.views.MethodView):\n         def get(self):\n             1 // 0\n+\n         def post(self):\n             1 // 0\n \n     class Other(Index):\n         def get(self):\n             return 'GET'\n+\n         def post(self):\n             return 'POST'\n \n@@ -69,12 +71,12 @@ def test_view_patching():\n     app.add_url_rule('/', view_func=view)\n     common_test(app)\n \n-def test_view_inheritance():\n-    app = flask.Flask(__name__)\n \n+def test_view_inheritance(app):\n     class Index(flask.views.MethodView):\n         def get(self):\n             return 'GET'\n+\n         def post(self):\n             return 'POST'\n \n@@ -88,18 +90,19 @@ def test_view_inheritance():\n     meths = parse_set_header(c.open('/', method='OPTIONS').headers['Allow'])\n     assert sorted(meths) == ['DELETE', 'GET', 'HEAD', 'OPTIONS', 'POST']\n \n-def test_view_decorators():\n-    app = flask.Flask(__name__)\n \n+def test_view_decorators(app):\n     def add_x_parachute(f):\n         def new_function(*args, **kwargs):\n             resp = flask.make_response(f(*args, **kwargs))\n             resp.headers['X-Parachute'] = 'awesome'\n             return resp\n+\n         return new_function\n \n     class Index(flask.views.View):\n         decorators = [add_x_parachute]\n+\n         def dispatch_request(self):\n             return 'Awesome'\n \n@@ -109,11 +112,13 @@ def test_view_decorators():\n     assert rv.headers['X-Parachute'] == 'awesome'\n     assert rv.data == b'Awesome'\n \n+\n def test_view_provide_automatic_options_attr():\n     app = flask.Flask(__name__)\n \n     class Index1(flask.views.View):\n         provide_automatic_options = False\n+\n         def dispatch_request(self):\n             return 'Hello World!'\n \n@@ -127,6 +132,7 @@ def test_view_provide_automatic_options_attr():\n     class Index2(flask.views.View):\n         methods = ['OPTIONS']\n         provide_automatic_options = True\n+\n         def dispatch_request(self):\n             return 'Hello World!'\n \n@@ -146,9 +152,8 @@ def test_view_provide_automatic_options_attr():\n     rv = c.open('/', method='OPTIONS')\n     assert 'OPTIONS' in rv.allow\n \n-def test_implicit_head():\n-    app = flask.Flask(__name__)\n \n+def test_implicit_head(app):\n     class Index(flask.views.MethodView):\n         def get(self):\n             return flask.Response('Blub', headers={\n@@ -164,12 +169,12 @@ def test_implicit_head():\n     assert rv.data == b''\n     assert rv.headers['X-Method'] == 'HEAD'\n \n-def test_explicit_head():\n-    app = flask.Flask(__name__)\n \n+def test_explicit_head(app):\n     class Index(flask.views.MethodView):\n         def get(self):\n             return 'GET'\n+\n         def head(self):\n             return flask.Response('', headers={'X-Method': 'HEAD'})\n \n@@ -181,12 +186,13 @@ def test_explicit_head():\n     assert rv.data == b''\n     assert rv.headers['X-Method'] == 'HEAD'\n \n-def test_endpoint_override():\n-    app = flask.Flask(__name__)\n+\n+def test_endpoint_override(app):\n     app.debug = True\n \n     class Index(flask.views.View):\n         methods = ['GET', 'POST']\n+\n         def dispatch_request(self):\n             return flask.request.method\n \n@@ -198,9 +204,8 @@ def test_endpoint_override():\n     # But these tests should still pass. We just log a warning.\n     common_test(app)\n \n-def test_multiple_inheritance():\n-    app = flask.Flask(__name__)\n \n+def test_multiple_inheritance(app):\n     class GetView(flask.views.MethodView):\n         def get(self):\n             return 'GET'\n@@ -219,9 +224,8 @@ def test_multiple_inheritance():\n     assert c.delete('/').data == b'DELETE'\n     assert sorted(GetDeleteView.methods) == ['DELETE', 'GET']\n \n-def test_remove_method_from_parent():\n-    app = flask.Flask(__name__)\n \n+def test_remove_method_from_parent(app):\n     class GetView(flask.views.MethodView):\n         def get(self):\n             return 'GET'\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
