{"custom_id": "flask#075b6b11c8b1690d946b8839e6dc4eb8a8cb7e3c", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 43 | Lines Deleted: 0 | Files Changed: 2 | Hunks: 2 | Methods Changed: 2 | Complexity Δ (Sum/Max): 4/3 | Churn Δ: 43 | Churn Cumulative: 4271 | Contributors (this commit): 16 | Commits (past 90d): 9 | Contributors (cumulative): 19 | DMM Complexity: 0.4375\n\nDIFF:\n@@ -1361,6 +1361,20 @@ class Flask(_PackageBoundObject):\n         if isinstance(rv, basestring):\n             return self.response_class(rv)\n         if isinstance(rv, tuple):\n+            if len(rv) > 0 and isinstance(rv[0], self.response_class):\n+                original = rv[0]\n+                new_response = self.response_class('', *rv[1:])\n+                if len(rv) < 3:\n+                    # The args for the response class are\n+                    # response=None, status=None, headers=None,\n+                    # mimetype=None, content_type=None, ...\n+                    # so if there's at least 3 elements the rv\n+                    # tuple contains header information so the\n+                    # headers from rv[0] \"win.\"\n+                    new_response.headers = original.headers\n+                new_response.response = original.response\n+                return new_response\n+            else:\n                 return self.response_class(*rv)\n         return self.response_class.force_type(rv, request.environ)\n \n\n@@ -659,6 +659,35 @@ class BasicFunctionalityTestCase(FlaskTestCase):\n             self.assert_equal(rv.data, 'W00t')\n             self.assert_equal(rv.mimetype, 'text/html')\n \n+    def test_make_response_with_response_instance(self):\n+        app = flask.Flask(__name__)\n+        with app.test_request_context():\n+            rv = flask.make_response(\n+                flask.jsonify({'msg': 'W00t'}), 400)\n+            self.assertEqual(rv.status_code, 400)\n+            self.assertEqual(rv.data,\n+                             '{\\n  \"msg\": \"W00t\"\\n}')\n+            self.assertEqual(rv.mimetype, 'application/json')\n+\n+            rv = flask.make_response(\n+                flask.Response(''), 400)\n+            self.assertEqual(rv.status_code, 400)\n+            self.assertEqual(rv.data, '')\n+            self.assertEqual(rv.mimetype, 'text/html')\n+\n+            rv = flask.make_response(\n+                flask.Response('', headers={'Content-Type': 'text/html'}),\n+                400, None, 'application/json')\n+            self.assertEqual(rv.status_code, 400)\n+            self.assertEqual(rv.headers['Content-Type'], 'application/json')\n+\n+            rv = flask.make_response(\n+                flask.Response('', mimetype='application/json'),\n+                400, {'Content-Type': 'text/html'})\n+            self.assertEqual(rv.status_code, 400)\n+            self.assertEqual(rv.headers['Content-Type'], 'text/html')\n+\n+\n     def test_url_generation(self):\n         app = flask.Flask(__name__)\n         @app.route('/hello/<name>', methods=['POST'])\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#06b224676d2f6c38fbf1f486f636e81a85016d45", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 34 | Lines Deleted: 3 | Files Changed: 2 | Hunks: 5 | Methods Changed: 6 | Complexity Δ (Sum/Max): 2/1 | Churn Δ: 37 | Churn Cumulative: 1624 | Contributors (this commit): 16 | Commits (past 90d): 11 | Contributors (cumulative): 19 | DMM Complexity: 1.0\n\nDIFF:\n@@ -495,7 +495,8 @@ def send_from_directory(directory, filename, **options):\n     filename = safe_join(directory, filename)\n     if not os.path.isfile(filename):\n         raise NotFound()\n-    return send_file(filename, conditional=True, **options)\n+    options.setdefault('conditional', True)\n+    return send_file(filename, **options)\n \n \n def get_root_path(import_name):\n@@ -651,6 +652,11 @@ class _PackageBoundObject(object):\n             return FileSystemLoader(os.path.join(self.root_path,\n                                                  self.template_folder))\n \n+    def get_static_file_options(self, filename):\n+        \"\"\"Function used internally to determine what keyword arguments\n+        to send to :func:`send_from_directory` for a specific file.\"\"\"\n+        return {}\n+\n     def send_static_file(self, filename):\n         \"\"\"Function used internally to send static files from the static\n         folder to the browser.\n@@ -659,7 +665,8 @@ class _PackageBoundObject(object):\n         \"\"\"\n         if not self.has_static_folder:\n             raise RuntimeError('No static folder for this object')\n-        return send_from_directory(self.static_folder, filename)\n+        return send_from_directory(self.static_folder, filename,\n+                **self.get_static_file_options(filename))\n \n     def open_resource(self, resource, mode='rb'):\n         \"\"\"Opens a resource from the application's resource folder.  To see\n\n@@ -17,7 +17,7 @@ import unittest\n from logging import StreamHandler\n from StringIO import StringIO\n from flask.testsuite import FlaskTestCase, catch_warnings, catch_stderr\n-from werkzeug.http import parse_options_header\n+from werkzeug.http import parse_cache_control_header, parse_options_header\n \n \n def has_encoding(name):\n@@ -204,6 +204,30 @@ class SendfileTestCase(FlaskTestCase):\n             self.assert_equal(value, 'attachment')\n             self.assert_equal(options['filename'], 'index.txt')\n \n+    def test_static_file(self):\n+        app = flask.Flask(__name__)\n+        # default cache timeout is 12 hours (hard-coded)\n+        with app.test_request_context():\n+            rv = app.send_static_file('index.html')\n+            cc = parse_cache_control_header(rv.headers['Cache-Control'])\n+            self.assert_equal(cc.max_age, 12 * 60 * 60)\n+        # override get_static_file_options with some new values and check them\n+        class StaticFileApp(flask.Flask):\n+            def __init__(self):\n+                super(StaticFileApp, self).__init__(__name__)\n+            def get_static_file_options(self, filename):\n+                opts = super(StaticFileApp, self).get_static_file_options(filename)\n+                opts['cache_timeout'] = 10\n+                # this test catches explicit inclusion of the conditional\n+                # keyword arg in the guts\n+                opts['conditional'] = True\n+                return opts\n+        app = StaticFileApp()\n+        with app.test_request_context():\n+            rv = app.send_static_file('index.html')\n+            cc = parse_cache_control_header(rv.headers['Cache-Control'])\n+            self.assert_equal(cc.max_age, 10)\n+\n \n class LoggingTestCase(FlaskTestCase):\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#8216e036e96594a4932d1f6a3569fcf39fe3c2bd", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 3 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 3 | Churn Cumulative: 219 | Contributors (this commit): 6 | Commits (past 90d): 2 | Contributors (cumulative): 6 | DMM Complexity: None\n\nDIFF:\n@@ -100,6 +100,9 @@ setup(\n         'License :: OSI Approved :: BSD License',\n         'Operating System :: OS Independent',\n         'Programming Language :: Python',\n+        'Programming Language :: Python :: 2.5',\n+        'Programming Language :: Python :: 2.6',\n+        'Programming Language :: Python :: 2.7',\n         'Topic :: Internet :: WWW/HTTP :: Dynamic Content',\n         'Topic :: Software Development :: Libraries :: Python Modules'\n     ],\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#cb24646948a8c00c5b39f0d76bf75e153ac502b1", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 35 | Lines Deleted: 0 | Files Changed: 2 | Hunks: 4 | Methods Changed: 4 | Complexity Δ (Sum/Max): 4/4 | Churn Δ: 35 | Churn Cumulative: 1659 | Contributors (this commit): 17 | Commits (past 90d): 15 | Contributors (cumulative): 21 | DMM Complexity: 0.4230769230769231\n\nDIFF:\n@@ -117,9 +117,30 @@ def jsonify(*args, **kwargs):\n     information about this, have a look at :ref:`json-security`.\n \n     .. versionadded:: 0.2\n+\n+    .. versionadded:: 0.9\n+        If the argument ``padded`` true than the json object will pad for\n+        JSONP calls like from jquery. The response mimetype will also change\n+        to ``text/javascript``.\n+\n+        The json object will pad as javascript function with the function name \n+        from the request argument ``callback`` or ``jsonp``. If the argument\n+        ``padded`` a string jsonify will look for the function name in the\n+        request argument with the name which is equal to ``padded``. Is there\n+        no function name it will fallback and use ``jsonp`` as function name.\n     \"\"\"\n     if __debug__:\n         _assert_have_json()\n+    if 'padded' in kwargs:\n+        if isinstance(kwargs['padded'], str):\n+            callback = request.args.get(kwargs['padded']) or 'jsonp'\n+        else:\n+            callback = request.args.get('callback') or \\\n+                       request.args.get('jsonp') or 'jsonp'\n+        del kwargs['padded']\n+        json_str = json.dumps(dict(*args, **kwargs), indent=None)\n+        content = str(callback) + \"(\" + json_str + \")\"\n+        return current_app.response_class(content, mimetype='text/javascript')\n     return current_app.response_class(json.dumps(dict(*args, **kwargs),\n         indent=None if request.is_xhr else 2), mimetype='application/json')\n \n\n@@ -61,11 +61,25 @@ class JSONTestCase(FlaskTestCase):\n         @app.route('/dict')\n         def return_dict():\n             return flask.jsonify(d)\n+        @app.route(\"/padded\")\n+        def return_padded_json():\n+            return flask.jsonify(d, padded=True)\n+        @app.route(\"/padded_custom\")\n+        def return_padded_json_custom_callback():\n+            return flask.jsonify(d, padded='my_func_name')\n         c = app.test_client()\n         for url in '/kw', '/dict':\n             rv = c.get(url)\n             self.assert_equal(rv.mimetype, 'application/json')\n             self.assert_equal(flask.json.loads(rv.data), d)\n+        for get_arg in 'callback=funcName', 'jsonp=funcName':\n+            rv = c.get('/padded?' + get_arg)\n+            self.assert_( rv.data.startswith(\"funcName(\") )\n+            self.assert_( rv.data.endswith(\")\") )\n+            rv_json = rv.data.split('(')[1].split(')')[0]\n+            self.assert_equal(flask.json.loads(rv_json), d)\n+        rv = c.get('/padded_custom?my_func_name=funcName')\n+        self.assert_( rv.data.startswith(\"funcName(\") )\n \n     def test_json_attr(self):\n         app = flask.Flask(__name__)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#09370c3f1c808e9251292bc228b6bef4b1223e93", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 9 | Lines Deleted: 8 | Files Changed: 1 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 17 | Churn Cumulative: 1149 | Contributors (this commit): 17 | Commits (past 90d): 9 | Contributors (cumulative): 17 | DMM Complexity: None\n\nDIFF:\n@@ -119,15 +119,16 @@ def jsonify(*args, **kwargs):\n     .. versionadded:: 0.2\n \n     .. versionadded:: 0.9\n-        If the argument ``padded`` true than the json object will pad for\n-        JSONP calls like from jquery. The response mimetype will also change\n-        to ``text/javascript``.\n+        If the ``padded`` argument is true, the JSON object will be padded\n+        for JSONP calls and the response mimetype will be changed to \n+        ``text/javascript``. By default, the request arguments ``callback``\n+        and ``jsonp`` will be used as the name for the callback function.\n+        This will work with jQuery and most other JavaScript libraries\n+        by default.\n \n-        The json object will pad as javascript function with the function name \n-        from the request argument ``callback`` or ``jsonp``. If the argument\n-        ``padded`` a string jsonify will look for the function name in the\n-        request argument with the name which is equal to ``padded``. Is there\n-        no function name it will fallback and use ``jsonp`` as function name.\n+        If the ``padded`` argument is a string, jsonify will look for\n+        the request argument with the same name and use that value as the\n+        callback-function name.\n     \"\"\"\n     if __debug__:\n         _assert_have_json()\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#68f93634de2e25afda209b710002e4c9159fd38e", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 1153 | Contributors (this commit): 17 | Commits (past 90d): 10 | Contributors (cumulative): 17 | DMM Complexity: None\n\nDIFF:\n@@ -121,7 +121,7 @@ def jsonify(*args, **kwargs):\n     .. versionadded:: 0.9\n         If the ``padded`` argument is true, the JSON object will be padded\n         for JSONP calls and the response mimetype will be changed to \n-        ``text/javascript``. By default, the request arguments ``callback``\n+        ``application/javascript``. By default, the request arguments ``callback``\n         and ``jsonp`` will be used as the name for the callback function.\n         This will work with jQuery and most other JavaScript libraries\n         by default.\n@@ -141,7 +141,7 @@ def jsonify(*args, **kwargs):\n         del kwargs['padded']\n         json_str = json.dumps(dict(*args, **kwargs), indent=None)\n         content = str(callback) + \"(\" + json_str + \")\"\n-        return current_app.response_class(content, mimetype='text/javascript')\n+        return current_app.response_class(content, mimetype='application/javascript')\n     return current_app.response_class(json.dumps(dict(*args, **kwargs),\n         indent=None if request.is_xhr else 2), mimetype='application/json')\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#71b351173b1440d6ca2dc36284d080fda2a22006", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 50 | Lines Deleted: 38 | Files Changed: 2 | Hunks: 4 | Methods Changed: 4 | Complexity Δ (Sum/Max): 0/2 | Churn Δ: 88 | Churn Cumulative: 362 | Contributors (this commit): 6 | Commits (past 90d): 3 | Contributors (cumulative): 7 | DMM Complexity: None\n\nDIFF:\n@@ -0,0 +1,49 @@\n+# -*- coding: utf-8 -*-\n+\"\"\"\n+    flask.exceptions\n+    ~~~~~~~~~~~~\n+\n+    Flask specific additions to :class:`~werkzeug.exceptions.HTTPException`\n+\n+    :copyright: (c) 2011 by Armin Ronacher.\n+    :license: BSD, see LICENSE for more details.\n+\"\"\"\n+from werkzeug.exceptions import HTTPException, BadRequest\n+from .helpers import json\n+\n+\n+class JSONHTTPException(HTTPException):\n+    \"\"\"A base class for HTTP exceptions with ``Content-Type:\n+    application/json``.\n+\n+    The ``description`` attribute of this class must set to a string (*not* an\n+    HTML string) which describes the error.\n+\n+    \"\"\"\n+\n+    def get_body(self, environ):\n+        \"\"\"Overrides :meth:`werkzeug.exceptions.HTTPException.get_body` to\n+        return the description of this error in JSON format instead of HTML.\n+\n+        \"\"\"\n+        return json.dumps(dict(description=self.get_description(environ)))\n+\n+    def get_headers(self, environ):\n+        \"\"\"Returns a list of headers including ``Content-Type:\n+        application/json``.\n+\n+        \"\"\"\n+        return [('Content-Type', 'application/json')]\n+\n+\n+class JSONBadRequest(JSONHTTPException, BadRequest):\n+    \"\"\"Represents an HTTP ``400 Bad Request`` error whose body contains an\n+    error message in JSON format instead of HTML format (as in the superclass).\n+\n+    \"\"\"\n+\n+    #: The description of the error which occurred as a string.\n+    description = (\n+        'The browser (or proxy) sent a request that this server could not '\n+        'understand.'\n+    )\n\n@@ -10,51 +10,14 @@\n \"\"\"\n \n from werkzeug.wrappers import Request as RequestBase, Response as ResponseBase\n-from werkzeug.exceptions import BadRequest, HTTPException\n from werkzeug.utils import cached_property\n \n+from .exceptions import JSONBadRequest\n from .debughelpers import attach_enctype_error_multidict\n from .helpers import json, _assert_have_json\n from .globals import _request_ctx_stack\n \n \n-class JSONHTTPException(HTTPException):\n-    \"\"\"A base class for HTTP exceptions with ``Content-Type:\n-    application/json``.\n-\n-    The ``description`` attribute of this class must set to a string (*not* an\n-    HTML string) which describes the error.\n-\n-    \"\"\"\n-\n-    def get_body(self, environ):\n-        \"\"\"Overrides :meth:`werkzeug.exceptions.HTTPException.get_body` to\n-        return the description of this error in JSON format instead of HTML.\n-\n-        \"\"\"\n-        return json.dumps(dict(description=self.get_description(environ)))\n-\n-    def get_headers(self, environ):\n-        \"\"\"Returns a list of headers including ``Content-Type:\n-        application/json``.\n-\n-        \"\"\"\n-        return [('Content-Type', 'application/json')]\n-\n-\n-class JSONBadRequest(JSONHTTPException, BadRequest):\n-    \"\"\"Represents an HTTP ``400 Bad Request`` error whose body contains an\n-    error message in JSON format instead of HTML format (as in the superclass).\n-\n-    \"\"\"\n-\n-    #: The description of the error which occurred as a string.\n-    description = (\n-        'The browser (or proxy) sent a request that this server could not '\n-        'understand.'\n-    )\n-\n-\n class Request(RequestBase):\n     \"\"\"The request object used by default in Flask.  Remembers the\n     matched endpoint and view arguments.\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#146088d58066f16ef4bc8172f8120402517c34d3", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 17 | Lines Deleted: 5 | Files Changed: 2 | Hunks: 3 | Methods Changed: 3 | Complexity Δ (Sum/Max): -5/0 | Churn Δ: 22 | Churn Cumulative: 1702 | Contributors (this commit): 18 | Commits (past 90d): 17 | Contributors (cumulative): 22 | DMM Complexity: 0.0\n\nDIFF:\n@@ -653,8 +653,22 @@ class _PackageBoundObject(object):\n                                                  self.template_folder))\n \n     def get_static_file_options(self, filename):\n-        \"\"\"Function used internally to determine what keyword arguments\n-        to send to :func:`send_from_directory` for a specific file.\"\"\"\n+        \"\"\"Provides keyword arguments to send to :func:`send_from_directory`.\n+\n+        This allows subclasses to change the behavior when sending files based\n+        on the filename.  For example, to set the cache timeout for .js files\n+        to 60 seconds (note the options are keywords for :func:`send_file`)::\n+\n+            class MyFlask(flask.Flask):\n+                def get_static_file_options(self, filename):\n+                    options = super(MyFlask, self).get_static_file_options(filename)\n+                    if filename.lower().endswith('.js'):\n+                        options['cache_timeout'] = 60\n+                        options['conditional'] = True\n+                    return options\n+\n+        .. versionaded:: 0.9\n+        \"\"\"\n         return {}\n \n     def send_static_file(self, filename):\n\n@@ -213,8 +213,6 @@ class SendfileTestCase(FlaskTestCase):\n             self.assert_equal(cc.max_age, 12 * 60 * 60)\n         # override get_static_file_options with some new values and check them\n         class StaticFileApp(flask.Flask):\n-            def __init__(self):\n-                super(StaticFileApp, self).__init__(__name__)\n             def get_static_file_options(self, filename):\n                 opts = super(StaticFileApp, self).get_static_file_options(filename)\n                 opts['cache_timeout'] = 10\n@@ -222,7 +220,7 @@ class SendfileTestCase(FlaskTestCase):\n                 # keyword arg in the guts\n                 opts['conditional'] = True\n                 return opts\n-        app = StaticFileApp()\n+        app = StaticFileApp(__name__)\n         with app.test_request_context():\n             rv = app.send_static_file('index.html')\n             cc = parse_cache_control_header(rv.headers['Cache-Control'])\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#d94efc6db63516b7f72e58c34ae33700f3d9c4fb", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 39 | Lines Deleted: 9 | Files Changed: 4 | Hunks: 12 | Methods Changed: 9 | Complexity Δ (Sum/Max): 3/2 | Churn Δ: 48 | Churn Cumulative: 5115 | Contributors (this commit): 28 | Commits (past 90d): 27 | Contributors (cumulative): 40 | DMM Complexity: 1.0\n\nDIFF:\n@@ -249,6 +249,7 @@ class Flask(_PackageBoundObject):\n         'SESSION_COOKIE_HTTPONLY':              True,\n         'SESSION_COOKIE_SECURE':                False,\n         'MAX_CONTENT_LENGTH':                   None,\n+        'SEND_FILE_MAX_AGE_DEFAULT':            12 * 60 * 60, # 12 hours\n         'TRAP_BAD_REQUEST_ERRORS':              False,\n         'TRAP_HTTP_EXCEPTIONS':                 False\n     })\n@@ -1020,6 +1021,12 @@ class Flask(_PackageBoundObject):\n             self.error_handler_spec.setdefault(key, {}).setdefault(None, []) \\\n                 .append((code_or_exception, f))\n \n+    def get_send_file_options(self, filename):\n+        # Override: Hooks in SEND_FILE_MAX_AGE_DEFAULT config.\n+        options = super(Flask, self).get_send_file_options(filename)\n+        options['cache_timeout'] = self.config['SEND_FILE_MAX_AGE_DEFAULT']\n+        return options\n+\n     @setupmethod\n     def template_filter(self, name=None):\n         \"\"\"A decorator that is used to register custom template filter.\n\n@@ -319,6 +319,10 @@ def send_file(filename_or_fp, mimetype=None, as_attachment=False,\n     guessing requires a `filename` or an `attachment_filename` to be\n     provided.\n \n+    Note `get_send_file_options` in :class:`flask.Flask` hooks the\n+    ``SEND_FILE_MAX_AGE_DEFAULT`` configuration variable to set the default\n+    cache_timeout.\n+\n     Please never pass filenames to this function from user sources without\n     checking them first.  Something like this is usually sufficient to\n     avoid security problems::\n@@ -652,7 +656,7 @@ class _PackageBoundObject(object):\n             return FileSystemLoader(os.path.join(self.root_path,\n                                                  self.template_folder))\n \n-    def get_static_file_options(self, filename):\n+    def get_send_file_options(self, filename):\n         \"\"\"Provides keyword arguments to send to :func:`send_from_directory`.\n \n         This allows subclasses to change the behavior when sending files based\n@@ -660,14 +664,14 @@ class _PackageBoundObject(object):\n         to 60 seconds (note the options are keywords for :func:`send_file`)::\n \n             class MyFlask(flask.Flask):\n-                def get_static_file_options(self, filename):\n-                    options = super(MyFlask, self).get_static_file_options(filename)\n+                def get_send_file_options(self, filename):\n+                    options = super(MyFlask, self).get_send_file_options(filename)\n                     if filename.lower().endswith('.js'):\n                         options['cache_timeout'] = 60\n                         options['conditional'] = True\n                     return options\n \n-        .. versionaded:: 0.9\n+        .. versionadded:: 0.9\n         \"\"\"\n         return {}\n \n@@ -680,7 +684,7 @@ class _PackageBoundObject(object):\n         if not self.has_static_folder:\n             raise RuntimeError('No static folder for this object')\n         return send_from_directory(self.static_folder, filename,\n-                **self.get_static_file_options(filename))\n+                **self.get_send_file_options(filename))\n \n     def open_resource(self, resource, mode='rb'):\n         \"\"\"Opens a resource from the application's resource folder.  To see\n\n@@ -16,6 +16,7 @@ import unittest\n import warnings\n from flask.testsuite import FlaskTestCase, emits_module_deprecation_warning\n from werkzeug.exceptions import NotFound\n+from werkzeug.http import parse_cache_control_header\n from jinja2 import TemplateNotFound\n \n \n@@ -357,6 +358,19 @@ class BlueprintTestCase(FlaskTestCase):\n         rv = c.get('/admin/static/css/test.css')\n         self.assert_equal(rv.data.strip(), '/* nested file */')\n \n+        # try/finally, in case other tests use this app for Blueprint tests.\n+        max_age_default = app.config['SEND_FILE_MAX_AGE_DEFAULT']\n+        try:\n+            expected_max_age = 3600\n+            if app.config['SEND_FILE_MAX_AGE_DEFAULT'] == expected_max_age:\n+                expected_max_age = 7200\n+            app.config['SEND_FILE_MAX_AGE_DEFAULT'] = expected_max_age\n+            rv = c.get('/admin/static/css/test.css')\n+            cc = parse_cache_control_header(rv.headers['Cache-Control'])\n+            self.assert_equal(cc.max_age, expected_max_age)\n+        finally:\n+            app.config['SEND_FILE_MAX_AGE_DEFAULT'] = max_age_default\n+\n         with app.test_request_context():\n             self.assert_equal(flask.url_for('admin.static', filename='test.txt'),\n                               '/admin/static/test.txt')\n\n@@ -206,15 +206,20 @@ class SendfileTestCase(FlaskTestCase):\n \n     def test_static_file(self):\n         app = flask.Flask(__name__)\n-        # default cache timeout is 12 hours (hard-coded)\n+        # default cache timeout is 12 hours\n         with app.test_request_context():\n             rv = app.send_static_file('index.html')\n             cc = parse_cache_control_header(rv.headers['Cache-Control'])\n             self.assert_equal(cc.max_age, 12 * 60 * 60)\n-        # override get_static_file_options with some new values and check them\n+        app.config['SEND_FILE_MAX_AGE_DEFAULT'] = 3600\n+        with app.test_request_context():\n+            rv = app.send_static_file('index.html')\n+            cc = parse_cache_control_header(rv.headers['Cache-Control'])\n+            self.assert_equal(cc.max_age, 3600)\n+        # override get_send_file_options with some new values and check them\n         class StaticFileApp(flask.Flask):\n-            def get_static_file_options(self, filename):\n-                opts = super(StaticFileApp, self).get_static_file_options(filename)\n+            def get_send_file_options(self, filename):\n+                opts = super(StaticFileApp, self).get_send_file_options(filename)\n                 opts['cache_timeout'] = 10\n                 # this test catches explicit inclusion of the conditional\n                 # keyword arg in the guts\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#bb99158c870a2d761f1349af02ef1decf0d10c7b", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 190 | Contributors (this commit): 5 | Commits (past 90d): 5 | Contributors (cumulative): 5 | DMM Complexity: None\n\nDIFF:\n@@ -107,7 +107,7 @@ class MethodViewType(type):\n         rv = type.__new__(cls, name, bases, d)\n         if 'methods' not in d:\n             methods = set(rv.methods or [])\n-            for key, value in d.iteritems():\n+            for key in d:\n                 if key in http_method_funcs:\n                     methods.add(key.upper())\n             # if we have no method at all in there we don't want to\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#b29834dac37a13f82019aa1c7e9d06622cf5790e", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 221 | Contributors (this commit): 7 | Commits (past 90d): 3 | Contributors (cumulative): 7 | DMM Complexity: None\n\nDIFF:\n@@ -59,7 +59,7 @@ class run_audit(Command):\n         try:\n             import pyflakes.scripts.pyflakes as flakes\n         except ImportError:\n-            print \"Audit requires PyFlakes installed in your system.\"\"\"\n+            print \"Audit requires PyFlakes installed in your system.\"\n             sys.exit(-1)\n \n         warns = 0\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#35383ee83c568ce642ffef6733d8b91ebd206185", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 223 | Contributors (this commit): 8 | Commits (past 90d): 4 | Contributors (cumulative): 8 | DMM Complexity: None\n\nDIFF:\n@@ -59,7 +59,7 @@ class run_audit(Command):\n         try:\n             import pyflakes.scripts.pyflakes as flakes\n         except ImportError:\n-            print \"Audit requires PyFlakes installed in your system.\"\"\"\n+            print \"Audit requires PyFlakes installed in your system.\"\n             sys.exit(-1)\n \n         warns = 0\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#0eb75b317bd62ece31875158fb31262ce7d05e69", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 7 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 5/5 | Churn Δ: 7 | Churn Cumulative: 1192 | Contributors (this commit): 17 | Commits (past 90d): 13 | Contributors (cumulative): 17 | DMM Complexity: None\n\nDIFF:\n@@ -283,6 +283,13 @@ def flash(message, category='message'):\n                      messages and ``'warning'`` for warnings.  However any\n                      kind of string can be used as category.\n     \"\"\"\n+    # Original implementation:\n+    #\n+    #     session.setdefault('_flashes', []).append((category, message))\n+    #\n+    # This assumed that changes made to mutable structures in the session are\n+    # are always in sync with the sess on object, which is not true for session\n+    # implementations that use external storage for keeping their keys/values.\n     flashes = session.get('_flashes', [])\n     flashes.append((category, message))\n     session['_flashes'] = flashes\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#91efb90fb3d580bad438c353bdfe4d604051a3a4", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 0 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 1 | Churn Cumulative: 314 | Contributors (this commit): 6 | Commits (past 90d): 3 | Contributors (cumulative): 6 | DMM Complexity: None\n\nDIFF:\n@@ -118,7 +118,6 @@ class Request(RequestBase):\n                              this server could not understand.\"}\n \n         .. versionchanged:: 0.9\n-\n            Return a :class:`JSONBadRequest` instead of a\n            :class:`~werkzeug.exceptions.BadRequest` by default.\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#f46f7155b27a741081fc13fa7fb1db53e54f5683", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 365 | Contributors (this commit): 3 | Commits (past 90d): 1 | Contributors (cumulative): 3 | DMM Complexity: None\n\nDIFF:\n@@ -43,7 +43,7 @@ master_doc = 'index'\n \n # General information about the project.\n project = u'Flask'\n-copyright = u'2010, Armin Ronacher'\n+copyright = u'2012, Armin Ronacher'\n \n # The version info for the project you're documenting, acts as replacement for\n # |version| and |release|, also used in various other places throughout the\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#a1305973bfef18a341224ad4f748c35d77a64cdb", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 265 | Contributors (this commit): 5 | Commits (past 90d): 1 | Contributors (cumulative): 5 | DMM Complexity: None\n\nDIFF:\n@@ -95,7 +95,7 @@ class RequestContext(object):\n \n         self.match_request()\n \n-        # XXX: Support for deprecated functionality.  This is doing away with\n+        # XXX: Support for deprecated functionality.  This is going away with\n         # Flask 1.0\n         blueprint = self.request.blueprint\n         if blueprint is not None:\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#47288231fe8f9c6b2c413d50160c32c3884d5785", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 78 | Lines Deleted: 3 | Files Changed: 3 | Hunks: 10 | Methods Changed: 9 | Complexity Δ (Sum/Max): 8/9 | Churn Δ: 81 | Churn Cumulative: 3131 | Contributors (this commit): 18 | Commits (past 90d): 10 | Contributors (cumulative): 23 | DMM Complexity: 1.0\n\nDIFF:\n@@ -28,7 +28,7 @@ from .helpers import _PackageBoundObject, url_for, get_flashed_messages, \\\n     find_package\n from .wrappers import Request, Response\n from .config import ConfigAttribute, Config\n-from .ctx import RequestContext\n+from .ctx import RequestContext, AppContext\n from .globals import _request_ctx_stack, request\n from .sessions import SecureCookieSessionInterface\n from .module import blueprint_is_module\n@@ -1458,6 +1458,21 @@ class Flask(_PackageBoundObject):\n                 return rv\n         request_tearing_down.send(self)\n \n+    def app_context(self):\n+        \"\"\"Binds the application only.  For as long as the application is bound\n+        to the current context the :data:`flask.current_app` points to that\n+        application.  An application context is automatically created when a\n+        request context is pushed if necessary.\n+\n+        Example usage::\n+\n+            with app.app_context():\n+                ...\n+\n+        .. versionadded:: 0.9\n+        \"\"\"\n+        return AppContext(self)\n+\n     def request_context(self, environ):\n         \"\"\"Creates a :class:`~flask.ctx.RequestContext` from the given\n         environment and binds it to the current context.  This must be used in\n\n@@ -11,7 +11,7 @@\n \n from werkzeug.exceptions import HTTPException\n \n-from .globals import _request_ctx_stack\n+from .globals import _request_ctx_stack, _app_ctx_stack\n from .module import blueprint_is_module\n \n \n@@ -19,6 +19,14 @@ class _RequestGlobals(object):\n     pass\n \n \n+def _push_app_if_necessary(app):\n+    top = _app_ctx_stack.top\n+    if top is None or top.app != app:\n+        ctx = app.app_context()\n+        ctx.push()\n+        return ctx\n+\n+\n def has_request_context():\n     \"\"\"If you have code that wants to test if a request context is there or\n     not this function can be used.  For instance, you may want to take advantage\n@@ -51,6 +59,36 @@ def has_request_context():\n     return _request_ctx_stack.top is not None\n \n \n+class AppContext(object):\n+    \"\"\"The application context binds an application object implicitly\n+    to the current thread or greenlet, similar to how the\n+    :class:`RequestContext` binds request information.  The application\n+    context is also implicitly created if a request context is created\n+    but the application is not on top of the individual application\n+    context.\n+    \"\"\"\n+\n+    def __init__(self, app):\n+        self.app = app\n+\n+    def push(self):\n+        \"\"\"Binds the app context to the current context.\"\"\"\n+        _app_ctx_stack.push(self)\n+\n+    def pop(self):\n+        \"\"\"Pops the app context.\"\"\"\n+        rv = _app_ctx_stack.pop()\n+        assert rv is self, 'Popped wrong app context.  (%r instead of %r)' \\\n+            % (rv, self)\n+\n+    def __enter__(self):\n+        self.push()\n+        return self\n+\n+    def __exit__(self, exc_type, exc_value, tb):\n+        self.pop()\n+\n+\n class RequestContext(object):\n     \"\"\"The request context contains all request relevant information.  It is\n     created at the beginning of the request and pushed to the\n@@ -93,6 +131,11 @@ class RequestContext(object):\n         # is pushed the preserved context is popped.\n         self.preserved = False\n \n+        # Indicates if pushing this request context also triggered the pushing\n+        # of an application context.  If it implicitly pushed an application\n+        # context, it will be stored there\n+        self._pushed_application_context = None\n+\n         self.match_request()\n \n         # XXX: Support for deprecated functionality.  This is going away with\n@@ -130,6 +173,10 @@ class RequestContext(object):\n         if top is not None and top.preserved:\n             top.pop()\n \n+        # Before we push the request context we have to ensure that there\n+        # is an application context.\n+        self._pushed_application_context = _push_app_if_necessary(self.app)\n+\n         _request_ctx_stack.push(self)\n \n         # Open the session at the moment that the request context is\n@@ -154,6 +201,11 @@ class RequestContext(object):\n         # so that we don't require the GC to be active.\n         rv.request.environ['werkzeug.request'] = None\n \n+        # Get rid of the app as well if necessary.\n+        if self._pushed_application_context:\n+            self._pushed_application_context.pop()\n+            self._pushed_application_context = None\n+\n     def __enter__(self):\n         self.push()\n         return self\n\n@@ -20,9 +20,17 @@ def _lookup_object(name):\n     return getattr(top, name)\n \n \n+def _find_app():\n+    top = _app_ctx_stack.top\n+    if top is None:\n+        raise RuntimeError('working outside of application context')\n+    return top.app\n+\n+\n # context locals\n _request_ctx_stack = LocalStack()\n-current_app = LocalProxy(partial(_lookup_object, 'app'))\n+_app_ctx_stack = LocalStack()\n+current_app = LocalProxy(_find_app)\n request = LocalProxy(partial(_lookup_object, 'request'))\n session = LocalProxy(partial(_lookup_object, 'session'))\n g = LocalProxy(partial(_lookup_object, 'g'))\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#307d1bc4e51fc35282f2d504b9df3359604b8f8a", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 72 | Lines Deleted: 6 | Files Changed: 4 | Hunks: 11 | Methods Changed: 6 | Complexity Δ (Sum/Max): 1/3 | Churn Δ: 78 | Churn Cumulative: 4351 | Contributors (this commit): 29 | Commits (past 90d): 24 | Contributors (cumulative): 39 | DMM Complexity: 0.7857142857142857\n\nDIFF:\n@@ -250,7 +250,8 @@ class Flask(_PackageBoundObject):\n         'SESSION_COOKIE_SECURE':                False,\n         'MAX_CONTENT_LENGTH':                   None,\n         'TRAP_BAD_REQUEST_ERRORS':              False,\n-        'TRAP_HTTP_EXCEPTIONS':                 False\n+        'TRAP_HTTP_EXCEPTIONS':                 False,\n+        'PREFERRED_URL_SCHEME':                 'http'\n     })\n \n     #: The rule object to use for URL rules created.  This is used by\n@@ -1370,9 +1371,21 @@ class Flask(_PackageBoundObject):\n         so the request is passed explicitly.\n \n         .. versionadded:: 0.6\n+\n+        .. versionchanged:: 0.9\n+           This can now also be called without a request object when the\n+           UR adapter is created for the application context.\n         \"\"\"\n+        if request is not None:\n             return self.url_map.bind_to_environ(request.environ,\n                 server_name=self.config['SERVER_NAME'])\n+        # We need at the very least the server name to be set for this\n+        # to work.\n+        if self.config['SERVER_NAME'] is not None:\n+            return self.url_map.bind(\n+                self.config['SERVER_NAME'],\n+                script_name=self.config['APPLICATION_ROOT'] or '/',\n+                url_scheme=self.config['PREFERRED_URL_SCHEME'])\n \n     def inject_url_defaults(self, endpoint, values):\n         \"\"\"Injects the URL defaults for the given endpoint directly into\n\n@@ -70,6 +70,7 @@ class AppContext(object):\n \n     def __init__(self, app):\n         self.app = app\n+        self.url_adapter = app.create_url_adapter(None)\n \n     def push(self):\n         \"\"\"Binds the app context to the current context.\"\"\"\n\n@@ -50,7 +50,8 @@ except ImportError:\n \n from jinja2 import FileSystemLoader\n \n-from .globals import session, _request_ctx_stack, current_app, request\n+from .globals import session, _request_ctx_stack, _app_ctx_stack, \\\n+     current_app, request\n \n \n def _assert_have_json():\n@@ -197,9 +198,15 @@ def url_for(endpoint, **values):\n     :param _anchor: if provided this is added as anchor to the URL.\n     :param _method: if provided this explicitly specifies an HTTP method.\n     \"\"\"\n-    ctx = _request_ctx_stack.top\n+    appctx = _app_ctx_stack.top\n+    reqctx = _request_ctx_stack.top\n+\n+    # If request specific information is available we have some extra\n+    # features that support \"relative\" urls.\n+    if reqctx is not None:\n+        url_adapter = reqctx.url_adapter\n         blueprint_name = request.blueprint\n-    if not ctx.request._is_old_module:\n+        if not reqctx.request._is_old_module:\n             if endpoint[:1] == '.':\n                 if blueprint_name is not None:\n                     endpoint = blueprint_name + endpoint\n@@ -213,10 +220,17 @@ def url_for(endpoint, **values):\n             elif endpoint.startswith('.'):\n                 endpoint = endpoint[1:]\n         external = values.pop('_external', False)\n+\n+    # Otherwise go with the url adapter from the appctx and make\n+    # the urls external by default.\n+    else:\n+        url_adapter = appctx.url_adapter\n+        external = values.pop('_external', True)\n+\n     anchor = values.pop('_anchor', None)\n     method = values.pop('_method', None)\n-    ctx.app.inject_url_defaults(endpoint, values)\n-    rv = ctx.url_adapter.build(endpoint, values, method=method,\n+    appctx.app.inject_url_defaults(endpoint, values)\n+    rv = url_adapter.build(endpoint, values, method=method,\n                            force_external=external)\n     if anchor is not None:\n         rv += '#' + url_quote(anchor)\n\n@@ -0,0 +1,38 @@\n+# -*- coding: utf-8 -*-\n+\"\"\"\n+    flask.testsuite.appctx\n+    ~~~~~~~~~~~~~~~~~~~~~~\n+\n+    Tests the application context.\n+\n+    :copyright: (c) 2012 by Armin Ronacher.\n+    :license: BSD, see LICENSE for more details.\n+\"\"\"\n+\n+from __future__ import with_statement\n+\n+import flask\n+import unittest\n+from flask.testsuite import FlaskTestCase\n+\n+\n+class AppContextTestCase(FlaskTestCase):\n+\n+    def test_basic_support(self):\n+        app = flask.Flask(__name__)\n+        app.config['SERVER_NAME'] = 'localhost'\n+        app.config['PREFERRED_URL_SCHEME'] = 'https'\n+\n+        @app.route('/')\n+        def index():\n+            pass\n+\n+        with app.app_context():\n+            rv = flask.url_for('index')\n+            self.assert_equal(rv, 'https://localhost/')\n+\n+\n+def suite():\n+    suite = unittest.TestSuite()\n+    suite.addTest(unittest.makeSuite(AppContextTestCase))\n+    return suite\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#f8f2e2dff481e55fa9ae7cc3f70f36d61bcf56d7", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 33 | Lines Deleted: 2 | Files Changed: 3 | Hunks: 5 | Methods Changed: 7 | Complexity Δ (Sum/Max): 6/4 | Churn Δ: 35 | Churn Cumulative: 1468 | Contributors (this commit): 17 | Commits (past 90d): 16 | Contributors (cumulative): 21 | DMM Complexity: 0.6923076923076923\n\nDIFF:\n@@ -23,7 +23,8 @@ from .config import Config\n from .helpers import url_for, jsonify, json_available, flash, \\\n     send_file, send_from_directory, get_flashed_messages, \\\n     get_template_attribute, make_response, safe_join\n-from .globals import current_app, g, request, session, _request_ctx_stack\n+from .globals import current_app, g, request, session, _request_ctx_stack, \\\n+     _app_ctx_stack\n from .ctx import has_request_context\n from .module import Module\n from .blueprints import Blueprint\n\n@@ -200,6 +200,9 @@ def url_for(endpoint, **values):\n     \"\"\"\n     appctx = _app_ctx_stack.top\n     reqctx = _request_ctx_stack.top\n+    if appctx is None:\n+        raise RuntimeError('Attempted to generate a URL with the application '\n+                           'context being pushed.  This has to be executed ')\n \n     # If request specific information is available we have some extra\n     # features that support \"relative\" urls.\n@@ -225,6 +228,11 @@ def url_for(endpoint, **values):\n     # the urls external by default.\n     else:\n         url_adapter = appctx.url_adapter\n+        if url_adapter is None:\n+            raise RuntimeError('Application was not able to create a URL '\n+                               'adapter for request independent URL generation. '\n+                               'You might be able to fix this by setting '\n+                               'the SERVER_NAME config variable.')\n         external = values.pop('_external', True)\n \n     anchor = values.pop('_anchor', None)\n\n@@ -18,7 +18,7 @@ from flask.testsuite import FlaskTestCase\n \n class AppContextTestCase(FlaskTestCase):\n \n-    def test_basic_support(self):\n+    def test_basic_url_generation(self):\n         app = flask.Flask(__name__)\n         app.config['SERVER_NAME'] = 'localhost'\n         app.config['PREFERRED_URL_SCHEME'] = 'https'\n@@ -31,6 +31,28 @@ class AppContextTestCase(FlaskTestCase):\n             rv = flask.url_for('index')\n             self.assert_equal(rv, 'https://localhost/')\n \n+    def test_url_generation_requires_server_name(self):\n+        app = flask.Flask(__name__)\n+        with app.app_context():\n+            with self.assert_raises(RuntimeError):\n+                flask.url_for('index')\n+\n+    def test_url_generation_without_context_fails(self):\n+        with self.assert_raises(RuntimeError):\n+            flask.url_for('index')\n+\n+    def test_request_context_means_app_context(self):\n+        app = flask.Flask(__name__)\n+        with app.test_request_context():\n+            self.assert_equal(flask.current_app._get_current_object(), app)\n+        self.assert_equal(flask._app_ctx_stack.top, None)\n+\n+    def test_app_context_provides_current_app(self):\n+        app = flask.Flask(__name__)\n+        with app.app_context():\n+            self.assert_equal(flask.current_app._get_current_object(), app)\n+        self.assert_equal(flask._app_ctx_stack.top, None)\n+\n \n def suite():\n     suite = unittest.TestSuite()\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
