{"custom_id": "fastapi#69bd7d8501fe77601ebd67f55b39596fdd1e3792", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 393 | Contributors (this commit): 2 | Commits (past 90d): 7 | Contributors (cumulative): 2 | DMM Complexity: None\n\nDIFF:\n@@ -1,6 +1,6 @@\n \"\"\"FastAPI framework, high performance, easy to learn, fast to code, ready for production\"\"\"\n \n-__version__ = \"0.88.0\"\n+__version__ = \"0.89.0\"\n \n from starlette import status as status\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#fba7493042cde54c059989ffb2ccccde65c51293", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 53 | Lines Deleted: 1 | Files Changed: 2 | Hunks: 6 | Methods Changed: 5 | Complexity Δ (Sum/Max): 5/4 | Churn Δ: 54 | Churn Cumulative: 5779 | Contributors (this commit): 35 | Commits (past 90d): 6 | Contributors (cumulative): 37 | DMM Complexity: 0.75\n\nDIFF:\n@@ -42,6 +42,7 @@ from fastapi.utils import (\n from pydantic import BaseModel\n from pydantic.error_wrappers import ErrorWrapper, ValidationError\n from pydantic.fields import ModelField, Undefined\n+from pydantic.utils import lenient_issubclass\n from starlette import routing\n from starlette.concurrency import run_in_threadpool\n from starlette.exceptions import HTTPException\n@@ -356,7 +357,11 @@ class APIRoute(routing.Route):\n         self.path = path\n         self.endpoint = endpoint\n         if isinstance(response_model, DefaultPlaceholder):\n-            response_model = get_typed_return_annotation(endpoint)\n+            return_annotation = get_typed_return_annotation(endpoint)\n+            if lenient_issubclass(return_annotation, Response):\n+                response_model = None\n+            else:\n+                response_model = return_annotation\n         self.response_model = response_model\n         self.summary = summary\n         self.response_description = response_description\n\n@@ -2,6 +2,7 @@ from typing import List, Union\n \n import pytest\n from fastapi import FastAPI\n+from fastapi.responses import JSONResponse, Response\n from fastapi.testclient import TestClient\n from pydantic import BaseModel, ValidationError\n \n@@ -237,6 +238,16 @@ def no_response_model_annotation_union_return_model2() -> Union[User, Item]:\n     return Item(name=\"Foo\", price=42.0)\n \n \n+@app.get(\"/no_response_model-annotation_response_class\")\n+def no_response_model_annotation_response_class() -> Response:\n+    return Response(content=\"Foo\")\n+\n+\n+@app.get(\"/no_response_model-annotation_json_response_class\")\n+def no_response_model_annotation_json_response_class() -> JSONResponse:\n+    return JSONResponse(content={\"foo\": \"bar\"})\n+\n+\n openapi_schema = {\n     \"openapi\": \"3.0.2\",\n     \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n@@ -789,6 +800,30 @@ openapi_schema = {\n                 },\n             }\n         },\n+        \"/no_response_model-annotation_response_class\": {\n+            \"get\": {\n+                \"summary\": \"No Response Model Annotation Response Class\",\n+                \"operationId\": \"no_response_model_annotation_response_class_no_response_model_annotation_response_class_get\",\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                    }\n+                },\n+            }\n+        },\n+        \"/no_response_model-annotation_json_response_class\": {\n+            \"get\": {\n+                \"summary\": \"No Response Model Annotation Json Response Class\",\n+                \"operationId\": \"no_response_model_annotation_json_response_class_no_response_model_annotation_json_response_class_get\",\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                    }\n+                },\n+            }\n+        },\n     },\n     \"components\": {\n         \"schemas\": {\n@@ -1049,3 +1084,15 @@ def test_no_response_model_annotation_union_return_model2():\n     response = client.get(\"/no_response_model-annotation_union-return_model2\")\n     assert response.status_code == 200, response.text\n     assert response.json() == {\"name\": \"Foo\", \"price\": 42.0}\n+\n+\n+def test_no_response_model_annotation_return_class():\n+    response = client.get(\"/no_response_model-annotation_response_class\")\n+    assert response.status_code == 200, response.text\n+    assert response.text == \"Foo\"\n+\n+\n+def test_no_response_model_annotation_json_response_class():\n+    response = client.get(\"/no_response_model-annotation_json_response_class\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\"foo\": \"bar\"}\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#fb8e9083f426aab14edf6973495f3eacbf809abd", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 683 | Lines Deleted: 1 | Files Changed: 16 | Hunks: 17 | Methods Changed: 28 | Complexity Δ (Sum/Max): 32/4 | Churn Δ: 684 | Churn Cumulative: 2383 | Contributors (this commit): 21 | Commits (past 90d): 20 | Contributors (cumulative): 37 | DMM Complexity: 1.0\n\nDIFF:\n@@ -0,0 +1,11 @@\n+from fastapi import FastAPI, Response\n+from fastapi.responses import JSONResponse, RedirectResponse\n+\n+app = FastAPI()\n+\n+\n+@app.get(\"/portal\")\n+async def get_portal(teleport: bool = False) -> Response:\n+    if teleport:\n+        return RedirectResponse(url=\"https://www.youtube.com/watch?v=dQw4w9WgXcQ\")\n+    return JSONResponse(content={\"message\": \"Here's your interdimensional portal.\"})\n\n@@ -0,0 +1,9 @@\n+from fastapi import FastAPI\n+from fastapi.responses import RedirectResponse\n+\n+app = FastAPI()\n+\n+\n+@app.get(\"/teleport\")\n+async def get_teleport() -> RedirectResponse:\n+    return RedirectResponse(url=\"https://www.youtube.com/watch?v=dQw4w9WgXcQ\")\n\n@@ -0,0 +1,13 @@\n+from typing import Union\n+\n+from fastapi import FastAPI, Response\n+from fastapi.responses import RedirectResponse\n+\n+app = FastAPI()\n+\n+\n+@app.get(\"/portal\")\n+async def get_portal(teleport: bool = False) -> Union[Response, dict]:\n+    if teleport:\n+        return RedirectResponse(url=\"https://www.youtube.com/watch?v=dQw4w9WgXcQ\")\n+    return {\"message\": \"Here's your interdimensional portal.\"}\n\n@@ -0,0 +1,11 @@\n+from fastapi import FastAPI, Response\n+from fastapi.responses import RedirectResponse\n+\n+app = FastAPI()\n+\n+\n+@app.get(\"/portal\")\n+async def get_portal(teleport: bool = False) -> Response | dict:\n+    if teleport:\n+        return RedirectResponse(url=\"https://www.youtube.com/watch?v=dQw4w9WgXcQ\")\n+    return {\"message\": \"Here's your interdimensional portal.\"}\n\n@@ -0,0 +1,13 @@\n+from typing import Union\n+\n+from fastapi import FastAPI, Response\n+from fastapi.responses import RedirectResponse\n+\n+app = FastAPI()\n+\n+\n+@app.get(\"/portal\", response_model=None)\n+async def get_portal(teleport: bool = False) -> Union[Response, dict]:\n+    if teleport:\n+        return RedirectResponse(url=\"https://www.youtube.com/watch?v=dQw4w9WgXcQ\")\n+    return {\"message\": \"Here's your interdimensional portal.\"}\n\n@@ -0,0 +1,11 @@\n+from fastapi import FastAPI, Response\n+from fastapi.responses import RedirectResponse\n+\n+app = FastAPI()\n+\n+\n+@app.get(\"/portal\", response_model=None)\n+async def get_portal(teleport: bool = False) -> Response | dict:\n+    if teleport:\n+        return RedirectResponse(url=\"https://www.youtube.com/watch?v=dQw4w9WgXcQ\")\n+    return {\"message\": \"Here's your interdimensional portal.\"}\n\n@@ -88,7 +88,13 @@ def create_response_field(\n         return response_field(field_info=field_info)\n     except RuntimeError:\n         raise fastapi.exceptions.FastAPIError(\n-            f\"Invalid args for response field! Hint: check that {type_} is a valid pydantic field type\"\n+            \"Invalid args for response field! Hint: \"\n+            f\"check that {type_} is a valid Pydantic field type. \"\n+            \"If you are using a return type annotation that is not a valid Pydantic \"\n+            \"field (e.g. Union[Response, dict, None]) you can disable generating the \"\n+            \"response model from the type annotation with the path operation decorator \"\n+            \"parameter response_model=None. Read more: \"\n+            \"https://fastapi.tiangolo.com/tutorial/response-model/\"\n         ) from None\n \n \n\n@@ -2,6 +2,7 @@ from typing import List, Union\n \n import pytest\n from fastapi import FastAPI\n+from fastapi.exceptions import FastAPIError\n from fastapi.responses import JSONResponse, Response\n from fastapi.testclient import TestClient\n from pydantic import BaseModel, ValidationError\n@@ -1096,3 +1097,15 @@ def test_no_response_model_annotation_json_response_class():\n     response = client.get(\"/no_response_model-annotation_json_response_class\")\n     assert response.status_code == 200, response.text\n     assert response.json() == {\"foo\": \"bar\"}\n+\n+\n+def test_invalid_response_model_field():\n+    app = FastAPI()\n+    with pytest.raises(FastAPIError) as e:\n+\n+        @app.get(\"/\")\n+        def read_root() -> Union[Response, None]:\n+            return Response(content=\"Foo\")  # pragma: no cover\n+\n+    assert \"valid Pydantic field type\" in e.value.args[0]\n+    assert \"parameter response_model=None\" in e.value.args[0]\n\n@@ -0,0 +1,120 @@\n+from fastapi.testclient import TestClient\n+\n+from docs_src.response_model.tutorial003_01 import app\n+\n+client = TestClient(app)\n+\n+openapi_schema = {\n+    \"openapi\": \"3.0.2\",\n+    \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n+    \"paths\": {\n+        \"/user/\": {\n+            \"post\": {\n+                \"summary\": \"Create User\",\n+                \"operationId\": \"create_user_user__post\",\n+                \"requestBody\": {\n+                    \"content\": {\n+                        \"application/json\": {\n+                            \"schema\": {\"$ref\": \"#/components/schemas/UserIn\"}\n+                        }\n+                    },\n+                    \"required\": True,\n+                },\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\"$ref\": \"#/components/schemas/BaseUser\"}\n+                            }\n+                        },\n+                    },\n+                    \"422\": {\n+                        \"description\": \"Validation Error\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\n+                                    \"$ref\": \"#/components/schemas/HTTPValidationError\"\n+                                }\n+                            }\n+                        },\n+                    },\n+                },\n+            }\n+        }\n+    },\n+    \"components\": {\n+        \"schemas\": {\n+            \"BaseUser\": {\n+                \"title\": \"BaseUser\",\n+                \"required\": [\"username\", \"email\"],\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"username\": {\"title\": \"Username\", \"type\": \"string\"},\n+                    \"email\": {\"title\": \"Email\", \"type\": \"string\", \"format\": \"email\"},\n+                    \"full_name\": {\"title\": \"Full Name\", \"type\": \"string\"},\n+                },\n+            },\n+            \"HTTPValidationError\": {\n+                \"title\": \"HTTPValidationError\",\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"detail\": {\n+                        \"title\": \"Detail\",\n+                        \"type\": \"array\",\n+                        \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n+                    }\n+                },\n+            },\n+            \"UserIn\": {\n+                \"title\": \"UserIn\",\n+                \"required\": [\"username\", \"email\", \"password\"],\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"username\": {\"title\": \"Username\", \"type\": \"string\"},\n+                    \"email\": {\"title\": \"Email\", \"type\": \"string\", \"format\": \"email\"},\n+                    \"full_name\": {\"title\": \"Full Name\", \"type\": \"string\"},\n+                    \"password\": {\"title\": \"Password\", \"type\": \"string\"},\n+                },\n+            },\n+            \"ValidationError\": {\n+                \"title\": \"ValidationError\",\n+                \"required\": [\"loc\", \"msg\", \"type\"],\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"loc\": {\n+                        \"title\": \"Location\",\n+                        \"type\": \"array\",\n+                        \"items\": {\"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]},\n+                    },\n+                    \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n+                    \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n+                },\n+            },\n+        }\n+    },\n+}\n+\n+\n+def test_openapi_schema():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == openapi_schema\n+\n+\n+def test_post_user():\n+    response = client.post(\n+        \"/user/\",\n+        json={\n+            \"username\": \"foo\",\n+            \"password\": \"fighter\",\n+            \"email\": \"foo@example.com\",\n+            \"full_name\": \"Grave Dohl\",\n+        },\n+    )\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n+        \"username\": \"foo\",\n+        \"email\": \"foo@example.com\",\n+        \"full_name\": \"Grave Dohl\",\n+    }\n\n@@ -0,0 +1,129 @@\n+import pytest\n+from fastapi.testclient import TestClient\n+\n+from ...utils import needs_py310\n+\n+openapi_schema = {\n+    \"openapi\": \"3.0.2\",\n+    \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n+    \"paths\": {\n+        \"/user/\": {\n+            \"post\": {\n+                \"summary\": \"Create User\",\n+                \"operationId\": \"create_user_user__post\",\n+                \"requestBody\": {\n+                    \"content\": {\n+                        \"application/json\": {\n+                            \"schema\": {\"$ref\": \"#/components/schemas/UserIn\"}\n+                        }\n+                    },\n+                    \"required\": True,\n+                },\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\"$ref\": \"#/components/schemas/BaseUser\"}\n+                            }\n+                        },\n+                    },\n+                    \"422\": {\n+                        \"description\": \"Validation Error\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\n+                                    \"$ref\": \"#/components/schemas/HTTPValidationError\"\n+                                }\n+                            }\n+                        },\n+                    },\n+                },\n+            }\n+        }\n+    },\n+    \"components\": {\n+        \"schemas\": {\n+            \"BaseUser\": {\n+                \"title\": \"BaseUser\",\n+                \"required\": [\"username\", \"email\"],\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"username\": {\"title\": \"Username\", \"type\": \"string\"},\n+                    \"email\": {\"title\": \"Email\", \"type\": \"string\", \"format\": \"email\"},\n+                    \"full_name\": {\"title\": \"Full Name\", \"type\": \"string\"},\n+                },\n+            },\n+            \"HTTPValidationError\": {\n+                \"title\": \"HTTPValidationError\",\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"detail\": {\n+                        \"title\": \"Detail\",\n+                        \"type\": \"array\",\n+                        \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n+                    }\n+                },\n+            },\n+            \"UserIn\": {\n+                \"title\": \"UserIn\",\n+                \"required\": [\"username\", \"email\", \"password\"],\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"username\": {\"title\": \"Username\", \"type\": \"string\"},\n+                    \"email\": {\"title\": \"Email\", \"type\": \"string\", \"format\": \"email\"},\n+                    \"full_name\": {\"title\": \"Full Name\", \"type\": \"string\"},\n+                    \"password\": {\"title\": \"Password\", \"type\": \"string\"},\n+                },\n+            },\n+            \"ValidationError\": {\n+                \"title\": \"ValidationError\",\n+                \"required\": [\"loc\", \"msg\", \"type\"],\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"loc\": {\n+                        \"title\": \"Location\",\n+                        \"type\": \"array\",\n+                        \"items\": {\"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]},\n+                    },\n+                    \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n+                    \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n+                },\n+            },\n+        }\n+    },\n+}\n+\n+\n+@pytest.fixture(name=\"client\")\n+def get_client():\n+    from docs_src.response_model.tutorial003_01_py310 import app\n+\n+    client = TestClient(app)\n+    return client\n+\n+\n+@needs_py310\n+def test_openapi_schema(client: TestClient):\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == openapi_schema\n+\n+\n+@needs_py310\n+def test_post_user(client: TestClient):\n+    response = client.post(\n+        \"/user/\",\n+        json={\n+            \"username\": \"foo\",\n+            \"password\": \"fighter\",\n+            \"email\": \"foo@example.com\",\n+            \"full_name\": \"Grave Dohl\",\n+        },\n+    )\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n+        \"username\": \"foo\",\n+        \"email\": \"foo@example.com\",\n+        \"full_name\": \"Grave Dohl\",\n+    }\n\n@@ -0,0 +1,93 @@\n+from fastapi.testclient import TestClient\n+\n+from docs_src.response_model.tutorial003_02 import app\n+\n+client = TestClient(app)\n+\n+openapi_schema = {\n+    \"openapi\": \"3.0.2\",\n+    \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n+    \"paths\": {\n+        \"/portal\": {\n+            \"get\": {\n+                \"summary\": \"Get Portal\",\n+                \"operationId\": \"get_portal_portal_get\",\n+                \"parameters\": [\n+                    {\n+                        \"required\": False,\n+                        \"schema\": {\n+                            \"title\": \"Teleport\",\n+                            \"type\": \"boolean\",\n+                            \"default\": False,\n+                        },\n+                        \"name\": \"teleport\",\n+                        \"in\": \"query\",\n+                    }\n+                ],\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                    },\n+                    \"422\": {\n+                        \"description\": \"Validation Error\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\n+                                    \"$ref\": \"#/components/schemas/HTTPValidationError\"\n+                                }\n+                            }\n+                        },\n+                    },\n+                },\n+            }\n+        }\n+    },\n+    \"components\": {\n+        \"schemas\": {\n+            \"HTTPValidationError\": {\n+                \"title\": \"HTTPValidationError\",\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"detail\": {\n+                        \"title\": \"Detail\",\n+                        \"type\": \"array\",\n+                        \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n+                    }\n+                },\n+            },\n+            \"ValidationError\": {\n+                \"title\": \"ValidationError\",\n+                \"required\": [\"loc\", \"msg\", \"type\"],\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"loc\": {\n+                        \"title\": \"Location\",\n+                        \"type\": \"array\",\n+                        \"items\": {\"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]},\n+                    },\n+                    \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n+                    \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n+                },\n+            },\n+        }\n+    },\n+}\n+\n+\n+def test_openapi_schema():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == openapi_schema\n+\n+\n+def test_get_portal():\n+    response = client.get(\"/portal\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\"message\": \"Here's your interdimensional portal.\"}\n+\n+\n+def test_get_redirect():\n+    response = client.get(\"/portal\", params={\"teleport\": True}, follow_redirects=False)\n+    assert response.status_code == 307, response.text\n+    assert response.headers[\"location\"] == \"https://www.youtube.com/watch?v=dQw4w9WgXcQ\"\n\n@@ -0,0 +1,36 @@\n+from fastapi.testclient import TestClient\n+\n+from docs_src.response_model.tutorial003_03 import app\n+\n+client = TestClient(app)\n+\n+openapi_schema = {\n+    \"openapi\": \"3.0.2\",\n+    \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n+    \"paths\": {\n+        \"/teleport\": {\n+            \"get\": {\n+                \"summary\": \"Get Teleport\",\n+                \"operationId\": \"get_teleport_teleport_get\",\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                    }\n+                },\n+            }\n+        }\n+    },\n+}\n+\n+\n+def test_openapi_schema():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == openapi_schema\n+\n+\n+def test_get_portal():\n+    response = client.get(\"/teleport\", follow_redirects=False)\n+    assert response.status_code == 307, response.text\n+    assert response.headers[\"location\"] == \"https://www.youtube.com/watch?v=dQw4w9WgXcQ\"\n\n@@ -0,0 +1,9 @@\n+import pytest\n+from fastapi.exceptions import FastAPIError\n+\n+\n+def test_invalid_response_model():\n+    with pytest.raises(FastAPIError):\n+        from docs_src.response_model.tutorial003_04 import app\n+\n+        assert app  # pragma: no cover\n\n@@ -0,0 +1,12 @@\n+import pytest\n+from fastapi.exceptions import FastAPIError\n+\n+from ...utils import needs_py310\n+\n+\n+@needs_py310\n+def test_invalid_response_model():\n+    with pytest.raises(FastAPIError):\n+        from docs_src.response_model.tutorial003_04_py310 import app\n+\n+        assert app  # pragma: no cover\n\n@@ -0,0 +1,93 @@\n+from fastapi.testclient import TestClient\n+\n+from docs_src.response_model.tutorial003_05 import app\n+\n+client = TestClient(app)\n+\n+openapi_schema = {\n+    \"openapi\": \"3.0.2\",\n+    \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n+    \"paths\": {\n+        \"/portal\": {\n+            \"get\": {\n+                \"summary\": \"Get Portal\",\n+                \"operationId\": \"get_portal_portal_get\",\n+                \"parameters\": [\n+                    {\n+                        \"required\": False,\n+                        \"schema\": {\n+                            \"title\": \"Teleport\",\n+                            \"type\": \"boolean\",\n+                            \"default\": False,\n+                        },\n+                        \"name\": \"teleport\",\n+                        \"in\": \"query\",\n+                    }\n+                ],\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                    },\n+                    \"422\": {\n+                        \"description\": \"Validation Error\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\n+                                    \"$ref\": \"#/components/schemas/HTTPValidationError\"\n+                                }\n+                            }\n+                        },\n+                    },\n+                },\n+            }\n+        }\n+    },\n+    \"components\": {\n+        \"schemas\": {\n+            \"HTTPValidationError\": {\n+                \"title\": \"HTTPValidationError\",\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"detail\": {\n+                        \"title\": \"Detail\",\n+                        \"type\": \"array\",\n+                        \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n+                    }\n+                },\n+            },\n+            \"ValidationError\": {\n+                \"title\": \"ValidationError\",\n+                \"required\": [\"loc\", \"msg\", \"type\"],\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"loc\": {\n+                        \"title\": \"Location\",\n+                        \"type\": \"array\",\n+                        \"items\": {\"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]},\n+                    },\n+                    \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n+                    \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n+                },\n+            },\n+        }\n+    },\n+}\n+\n+\n+def test_openapi_schema():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == openapi_schema\n+\n+\n+def test_get_portal():\n+    response = client.get(\"/portal\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\"message\": \"Here's your interdimensional portal.\"}\n+\n+\n+def test_get_redirect():\n+    response = client.get(\"/portal\", params={\"teleport\": True}, follow_redirects=False)\n+    assert response.status_code == 307, response.text\n+    assert response.headers[\"location\"] == \"https://www.youtube.com/watch?v=dQw4w9WgXcQ\"\n\n@@ -0,0 +1,103 @@\n+import pytest\n+from fastapi.testclient import TestClient\n+\n+from ...utils import needs_py310\n+\n+openapi_schema = {\n+    \"openapi\": \"3.0.2\",\n+    \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n+    \"paths\": {\n+        \"/portal\": {\n+            \"get\": {\n+                \"summary\": \"Get Portal\",\n+                \"operationId\": \"get_portal_portal_get\",\n+                \"parameters\": [\n+                    {\n+                        \"required\": False,\n+                        \"schema\": {\n+                            \"title\": \"Teleport\",\n+                            \"type\": \"boolean\",\n+                            \"default\": False,\n+                        },\n+                        \"name\": \"teleport\",\n+                        \"in\": \"query\",\n+                    }\n+                ],\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                    },\n+                    \"422\": {\n+                        \"description\": \"Validation Error\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\n+                                    \"$ref\": \"#/components/schemas/HTTPValidationError\"\n+                                }\n+                            }\n+                        },\n+                    },\n+                },\n+            }\n+        }\n+    },\n+    \"components\": {\n+        \"schemas\": {\n+            \"HTTPValidationError\": {\n+                \"title\": \"HTTPValidationError\",\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"detail\": {\n+                        \"title\": \"Detail\",\n+                        \"type\": \"array\",\n+                        \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n+                    }\n+                },\n+            },\n+            \"ValidationError\": {\n+                \"title\": \"ValidationError\",\n+                \"required\": [\"loc\", \"msg\", \"type\"],\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"loc\": {\n+                        \"title\": \"Location\",\n+                        \"type\": \"array\",\n+                        \"items\": {\"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]},\n+                    },\n+                    \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n+                    \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n+                },\n+            },\n+        }\n+    },\n+}\n+\n+\n+@pytest.fixture(name=\"client\")\n+def get_client():\n+    from docs_src.response_model.tutorial003_05_py310 import app\n+\n+    client = TestClient(app)\n+    return client\n+\n+\n+@needs_py310\n+def test_openapi_schema(client: TestClient):\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == openapi_schema\n+\n+\n+@needs_py310\n+def test_get_portal(client: TestClient):\n+    response = client.get(\"/portal\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\"message\": \"Here's your interdimensional portal.\"}\n+\n+\n+@needs_py310\n+def test_get_redirect(client: TestClient):\n+    response = client.get(\"/portal\", params={\"teleport\": True}, follow_redirects=False)\n+    assert response.status_code == 307, response.text\n+    assert response.headers[\"location\"] == \"https://www.youtube.com/watch?v=dQw4w9WgXcQ\"\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#5905c3f740c8590f1a370e36b99b760f1ee7b828", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 395 | Contributors (this commit): 2 | Commits (past 90d): 8 | Contributors (cumulative): 2 | DMM Complexity: None\n\nDIFF:\n@@ -1,6 +1,6 @@\n \"\"\"FastAPI framework, high performance, easy to learn, fast to code, ready for production\"\"\"\n \n-__version__ = \"0.89.0\"\n+__version__ = \"0.89.1\"\n \n from starlette import status as status\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#9530defba87decf43a7a2f418dad1ec623f5edc8", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 191 | Lines Deleted: 13 | Files Changed: 1 | Hunks: 24 | Methods Changed: 6 | Complexity Δ (Sum/Max): 15/15 | Churn Δ: 204 | Churn Cumulative: 836 | Contributors (this commit): 2 | Commits (past 90d): 2 | Contributors (cumulative): 2 | DMM Complexity: 0.5070422535211268\n\nDIFF:\n@@ -4,7 +4,7 @@ import sys\n from collections import Counter, defaultdict\n from datetime import datetime, timedelta, timezone\n from pathlib import Path\n-from typing import Container, DefaultDict, Dict, List, Set, Union\n+from typing import Any, Container, DefaultDict, Dict, List, Set, Union\n \n import httpx\n import yaml\n@@ -12,6 +12,50 @@ from github import Github\n from pydantic import BaseModel, BaseSettings, SecretStr\n \n github_graphql_url = \"https://api.github.com/graphql\"\n+questions_category_id = \"MDE4OkRpc2N1c3Npb25DYXRlZ29yeTMyMDAxNDM0\"\n+\n+discussions_query = \"\"\"\n+query Q($after: String, $category_id: ID) {\n+  repository(name: \"fastapi\", owner: \"tiangolo\") {\n+    discussions(first: 100, after: $after, categoryId: $category_id) {\n+      edges {\n+        cursor\n+        node {\n+          number\n+          author {\n+            login\n+            avatarUrl\n+            url\n+          }\n+          title\n+          createdAt\n+          comments(first: 100) {\n+            nodes {\n+              createdAt\n+              author {\n+                login\n+                avatarUrl\n+                url\n+              }\n+              isAnswer\n+              replies(first: 10) {\n+                nodes {\n+                  createdAt\n+                  author {\n+                    login\n+                    avatarUrl\n+                    url\n+                  }\n+                }\n+              }\n+            }\n+          }\n+        }\n+      }\n+    }\n+  }\n+}\n+\"\"\"\n \n issues_query = \"\"\"\n query Q($after: String) {\n@@ -131,15 +175,30 @@ class Author(BaseModel):\n     url: str\n \n \n+# Issues and Discussions\n+\n+\n class CommentsNode(BaseModel):\n     createdAt: datetime\n     author: Union[Author, None] = None\n \n \n+class Replies(BaseModel):\n+    nodes: List[CommentsNode]\n+\n+\n+class DiscussionsCommentsNode(CommentsNode):\n+    replies: Replies\n+\n+\n class Comments(BaseModel):\n     nodes: List[CommentsNode]\n \n \n+class DiscussionsComments(BaseModel):\n+    nodes: List[DiscussionsCommentsNode]\n+\n+\n class IssuesNode(BaseModel):\n     number: int\n     author: Union[Author, None] = None\n@@ -149,27 +208,59 @@ class IssuesNode(BaseModel):\n     comments: Comments\n \n \n+class DiscussionsNode(BaseModel):\n+    number: int\n+    author: Union[Author, None] = None\n+    title: str\n+    createdAt: datetime\n+    comments: DiscussionsComments\n+\n+\n class IssuesEdge(BaseModel):\n     cursor: str\n     node: IssuesNode\n \n \n+class DiscussionsEdge(BaseModel):\n+    cursor: str\n+    node: DiscussionsNode\n+\n+\n class Issues(BaseModel):\n     edges: List[IssuesEdge]\n \n \n+class Discussions(BaseModel):\n+    edges: List[DiscussionsEdge]\n+\n+\n class IssuesRepository(BaseModel):\n     issues: Issues\n \n \n+class DiscussionsRepository(BaseModel):\n+    discussions: Discussions\n+\n+\n class IssuesResponseData(BaseModel):\n     repository: IssuesRepository\n \n \n+class DiscussionsResponseData(BaseModel):\n+    repository: DiscussionsRepository\n+\n+\n class IssuesResponse(BaseModel):\n     data: IssuesResponseData\n \n \n+class DiscussionsResponse(BaseModel):\n+    data: DiscussionsResponseData\n+\n+\n+# PRs\n+\n+\n class LabelNode(BaseModel):\n     name: str\n \n@@ -219,6 +310,9 @@ class PRsResponse(BaseModel):\n     data: PRsResponseData\n \n \n+# Sponsors\n+\n+\n class SponsorEntity(BaseModel):\n     login: str\n     avatarUrl: str\n@@ -264,10 +358,16 @@ class Settings(BaseSettings):\n \n \n def get_graphql_response(\n-    *, settings: Settings, query: str, after: Union[str, None] = None\n-):\n+    *,\n+    settings: Settings,\n+    query: str,\n+    after: Union[str, None] = None,\n+    category_id: Union[str, None] = None,\n+) -> Dict[str, Any]:\n     headers = {\"Authorization\": f\"token {settings.input_token.get_secret_value()}\"}\n-    variables = {\"after\": after}\n+    # category_id is only used by one query, but GraphQL allows unused variables, so\n+    # keep it here for simplicity\n+    variables = {\"after\": after, \"category_id\": category_id}\n     response = httpx.post(\n         github_graphql_url,\n         headers=headers,\n@@ -275,7 +375,9 @@ def get_graphql_response(\n         json={\"query\": query, \"variables\": variables, \"operationName\": \"Q\"},\n     )\n     if response.status_code != 200:\n-        logging.error(f\"Response was not 200, after: {after}\")\n+        logging.error(\n+            f\"Response was not 200, after: {after}, category_id: {category_id}\"\n+        )\n         logging.error(response.text)\n         raise RuntimeError(response.text)\n     data = response.json()\n@@ -288,6 +390,21 @@ def get_graphql_issue_edges(*, settings: Settings, after: Union[str, None] = Non\n     return graphql_response.data.repository.issues.edges\n \n \n+def get_graphql_question_discussion_edges(\n+    *,\n+    settings: Settings,\n+    after: Union[str, None] = None,\n+):\n+    data = get_graphql_response(\n+        settings=settings,\n+        query=discussions_query,\n+        after=after,\n+        category_id=questions_category_id,\n+    )\n+    graphql_response = DiscussionsResponse.parse_obj(data)\n+    return graphql_response.data.repository.discussions.edges\n+\n+\n def get_graphql_pr_edges(*, settings: Settings, after: Union[str, None] = None):\n     data = get_graphql_response(settings=settings, query=prs_query, after=after)\n     graphql_response = PRsResponse.parse_obj(data)\n@@ -300,7 +417,7 @@ def get_graphql_sponsor_edges(*, settings: Settings, after: Union[str, None] = N\n     return graphql_response.data.user.sponsorshipsAsMaintainer.edges\n \n \n-def get_experts(settings: Settings):\n+def get_issues_experts(settings: Settings):\n     issue_nodes: List[IssuesNode] = []\n     issue_edges = get_graphql_issue_edges(settings=settings)\n \n@@ -326,13 +443,74 @@ def get_experts(settings: Settings):\n         for comment in issue.comments.nodes:\n             if comment.author:\n                 authors[comment.author.login] = comment.author\n-                if comment.author.login == issue_author_name:\n-                    continue\n+                if comment.author.login != issue_author_name:\n                     issue_commentors.add(comment.author.login)\n         for author_name in issue_commentors:\n             commentors[author_name] += 1\n             if issue.createdAt > one_month_ago:\n                 last_month_commentors[author_name] += 1\n+\n+    return commentors, last_month_commentors, authors\n+\n+\n+def get_discussions_experts(settings: Settings):\n+    discussion_nodes: List[DiscussionsNode] = []\n+    discussion_edges = get_graphql_question_discussion_edges(settings=settings)\n+\n+    while discussion_edges:\n+        for discussion_edge in discussion_edges:\n+            discussion_nodes.append(discussion_edge.node)\n+        last_edge = discussion_edges[-1]\n+        discussion_edges = get_graphql_question_discussion_edges(\n+            settings=settings, after=last_edge.cursor\n+        )\n+\n+    commentors = Counter()\n+    last_month_commentors = Counter()\n+    authors: Dict[str, Author] = {}\n+\n+    now = datetime.now(tz=timezone.utc)\n+    one_month_ago = now - timedelta(days=30)\n+\n+    for discussion in discussion_nodes:\n+        discussion_author_name = None\n+        if discussion.author:\n+            authors[discussion.author.login] = discussion.author\n+            discussion_author_name = discussion.author.login\n+        discussion_commentors = set()\n+        for comment in discussion.comments.nodes:\n+            if comment.author:\n+                authors[comment.author.login] = comment.author\n+                if comment.author.login != discussion_author_name:\n+                    discussion_commentors.add(comment.author.login)\n+            for reply in comment.replies.nodes:\n+                if reply.author:\n+                    authors[reply.author.login] = reply.author\n+                    if reply.author.login != discussion_author_name:\n+                        discussion_commentors.add(reply.author.login)\n+        for author_name in discussion_commentors:\n+            commentors[author_name] += 1\n+            if discussion.createdAt > one_month_ago:\n+                last_month_commentors[author_name] += 1\n+    return commentors, last_month_commentors, authors\n+\n+\n+def get_experts(settings: Settings):\n+    (\n+        issues_commentors,\n+        issues_last_month_commentors,\n+        issues_authors,\n+    ) = get_issues_experts(settings=settings)\n+    (\n+        discussions_commentors,\n+        discussions_last_month_commentors,\n+        discussions_authors,\n+    ) = get_discussions_experts(settings=settings)\n+    commentors = issues_commentors + discussions_commentors\n+    last_month_commentors = (\n+        issues_last_month_commentors + discussions_last_month_commentors\n+    )\n+    authors = {**issues_authors, **discussions_authors}\n     return commentors, last_month_commentors, authors\n \n \n@@ -425,13 +603,13 @@ if __name__ == \"__main__\":\n     logging.info(f\"Using config: {settings.json()}\")\n     g = Github(settings.input_standard_token.get_secret_value())\n     repo = g.get_repo(settings.github_repository)\n-    issue_commentors, issue_last_month_commentors, issue_authors = get_experts(\n+    question_commentors, question_last_month_commentors, question_authors = get_experts(\n         settings=settings\n     )\n     contributors, pr_commentors, reviewers, pr_authors = get_contributors(\n         settings=settings\n     )\n-    authors = {**issue_authors, **pr_authors}\n+    authors = {**question_authors, **pr_authors}\n     maintainers_logins = {\"tiangolo\"}\n     bot_names = {\"codecov\", \"github-actions\", \"pre-commit-ci\", \"dependabot\"}\n     maintainers = []\n@@ -440,7 +618,7 @@ if __name__ == \"__main__\":\n         maintainers.append(\n             {\n                 \"login\": login,\n-                \"answers\": issue_commentors[login],\n+                \"answers\": question_commentors[login],\n                 \"prs\": contributors[login],\n                 \"avatarUrl\": user.avatarUrl,\n                 \"url\": user.url,\n@@ -453,13 +631,13 @@ if __name__ == \"__main__\":\n     min_count_reviewer = 4\n     skip_users = maintainers_logins | bot_names\n     experts = get_top_users(\n-        counter=issue_commentors,\n+        counter=question_commentors,\n         min_count=min_count_expert,\n         authors=authors,\n         skip_users=skip_users,\n     )\n     last_month_active = get_top_users(\n-        counter=issue_last_month_commentors,\n+        counter=question_last_month_commentors,\n         min_count=min_count_last_month,\n         authors=authors,\n         skip_users=skip_users,\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#9293795e99afbda07d2744f1eb7d23d2f0ea0154", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 73 | Lines Deleted: 3 | Files Changed: 4 | Hunks: 7 | Methods Changed: 14 | Complexity Δ (Sum/Max): 17/7 | Churn Δ: 76 | Churn Cumulative: 7875 | Contributors (this commit): 47 | Commits (past 90d): 8 | Contributors (cumulative): 65 | DMM Complexity: 1.0\n\nDIFF:\n@@ -10,7 +10,7 @@ async def read_main():\n     return {\"msg\": \"Hello World\"}\n \n \n-@app.websocket_route(\"/ws\")\n+@app.websocket(\"/ws\")\n async def websocket(websocket: WebSocket):\n     await websocket.accept()\n     await websocket.send_json({\"msg\": \"Hello WebSocket\"})\n\n@@ -35,6 +35,7 @@ from starlette.applications import Starlette\n from starlette.datastructures import State\n from starlette.exceptions import HTTPException\n from starlette.middleware import Middleware\n+from starlette.middleware.base import BaseHTTPMiddleware\n from starlette.middleware.errors import ServerErrorMiddleware\n from starlette.middleware.exceptions import ExceptionMiddleware\n from starlette.requests import Request\n@@ -870,3 +871,35 @@ class FastAPI(Starlette):\n             openapi_extra=openapi_extra,\n             generate_unique_id_function=generate_unique_id_function,\n         )\n+\n+    def websocket_route(\n+        self, path: str, name: Union[str, None] = None\n+    ) -> Callable[[DecoratedCallable], DecoratedCallable]:\n+        def decorator(func: DecoratedCallable) -> DecoratedCallable:\n+            self.router.add_websocket_route(path, func, name=name)\n+            return func\n+\n+        return decorator\n+\n+    def on_event(\n+        self, event_type: str\n+    ) -> Callable[[DecoratedCallable], DecoratedCallable]:\n+        return self.router.on_event(event_type)\n+\n+    def middleware(\n+        self, middleware_type: str\n+    ) -> Callable[[DecoratedCallable], DecoratedCallable]:\n+        def decorator(func: DecoratedCallable) -> DecoratedCallable:\n+            self.add_middleware(BaseHTTPMiddleware, dispatch=func)\n+            return func\n+\n+        return decorator\n+\n+    def exception_handler(\n+        self, exc_class_or_status_code: Union[int, Type[Exception]]\n+    ) -> Callable[[DecoratedCallable], DecoratedCallable]:\n+        def decorator(func: DecoratedCallable) -> DecoratedCallable:\n+            self.add_exception_handler(exc_class_or_status_code, func)\n+            return func\n+\n+        return decorator\n\n@@ -522,6 +522,25 @@ class APIRouter(routing.Router):\n         self.default_response_class = default_response_class\n         self.generate_unique_id_function = generate_unique_id_function\n \n+    def route(\n+        self,\n+        path: str,\n+        methods: Optional[List[str]] = None,\n+        name: Optional[str] = None,\n+        include_in_schema: bool = True,\n+    ) -> Callable[[DecoratedCallable], DecoratedCallable]:\n+        def decorator(func: DecoratedCallable) -> DecoratedCallable:\n+            self.add_route(\n+                path,\n+                func,\n+                methods=methods,\n+                name=name,\n+                include_in_schema=include_in_schema,\n+            )\n+            return func\n+\n+        return decorator\n+\n     def add_api_route(\n         self,\n         path: str,\n@@ -686,6 +705,15 @@ class APIRouter(routing.Router):\n \n         return decorator\n \n+    def websocket_route(\n+        self, path: str, name: Union[str, None] = None\n+    ) -> Callable[[DecoratedCallable], DecoratedCallable]:\n+        def decorator(func: DecoratedCallable) -> DecoratedCallable:\n+            self.add_websocket_route(path, func, name=name)\n+            return func\n+\n+        return decorator\n+\n     def include_router(\n         self,\n         router: \"APIRouter\",\n@@ -1247,3 +1275,12 @@ class APIRouter(routing.Router):\n             openapi_extra=openapi_extra,\n             generate_unique_id_function=generate_unique_id_function,\n         )\n+\n+    def on_event(\n+        self, event_type: str\n+    ) -> Callable[[DecoratedCallable], DecoratedCallable]:\n+        def decorator(func: DecoratedCallable) -> DecoratedCallable:\n+            self.add_event_handler(event_type, func)\n+            return func\n+\n+        return decorator\n\n@@ -46,5 +46,5 @@ def test_websocket():\n \n def test_websocket_invalid_path_doesnt_match():\n     with pytest.raises(WebSocketDisconnect):\n-        with client.websocket_connect(\"/itemsx/portal-gun\") as websocket:\n-            websocket.receive_json()\n+        with client.websocket_connect(\"/itemsx/portal-gun\"):\n+            pass\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
