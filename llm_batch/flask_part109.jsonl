{"custom_id": "flask#aa040c085c8c560616069f06c34cf796c10b05f1", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 2 | Methods Changed: 4 | Complexity Δ (Sum/Max): 3/3 | Churn Δ: 4 | Churn Cumulative: 206 | Contributors (this commit): 5 | Commits (past 90d): 1 | Contributors (cumulative): 5 | DMM Complexity: None\n\nDIFF:\n@@ -134,7 +134,7 @@ def _render(app: \"Flask\", template: Template, context: t.Dict[str, t.Any]) -> st\n \n def render_template(\n     template_name_or_list: t.Union[str, Template, t.List[t.Union[str, Template]]],\n-    **context: t.Any\n+    **context: t.Any,\n ) -> str:\n     \"\"\"Render a template by name with the given context.\n \n@@ -180,7 +180,7 @@ def _stream(\n \n def stream_template(\n     template_name_or_list: t.Union[str, Template, t.List[t.Union[str, Template]]],\n-    **context: t.Any\n+    **context: t.Any,\n ) -> t.Iterator[str]:\n     \"\"\"Render a template by name with the given context as a stream.\n     This returns an iterator of strings, which can be used as a\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#41d4f62909bb426c84e9d057151f7d734695320a", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 305 | Contributors (this commit): 6 | Commits (past 90d): 1 | Contributors (cumulative): 6 | DMM Complexity: None\n\nDIFF:\n@@ -42,7 +42,7 @@ from .templating import render_template_string as render_template_string\n from .templating import stream_template as stream_template\n from .templating import stream_template_string as stream_template_string\n \n-__version__ = \"2.2.3.dev\"\n+__version__ = \"2.2.3\"\n \n \n def __getattr__(name):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#c4c7f504be222c3aca9062656498ec3c72e2b2ad", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 2 | Methods Changed: 2 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 2740 | Contributors (this commit): 27 | Commits (past 90d): 3 | Contributors (cumulative): 27 | DMM Complexity: None\n\nDIFF:\n@@ -1248,7 +1248,7 @@ class Flask(Scaffold):\n         \"\"\"\n         cls = self.test_client_class\n         if cls is None:\n-            from .testing import FlaskClient as cls  # type: ignore\n+            from .testing import FlaskClient as cls\n         return cls(  # type: ignore\n             self, self.response_class, use_cookies=use_cookies, **kwargs\n         )\n@@ -1266,7 +1266,7 @@ class Flask(Scaffold):\n         cls = self.test_cli_runner_class\n \n         if cls is None:\n-            from .testing import FlaskCliRunner as cls  # type: ignore\n+            from .testing import FlaskCliRunner as cls\n \n         return cls(self, **kwargs)  # type: ignore\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#6650764e9719402de2aaa6f321bdec587699c6b2", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 56 | Lines Deleted: 874 | Files Changed: 13 | Hunks: 73 | Methods Changed: 62 | Complexity Δ (Sum/Max): -63/0 | Churn Δ: 930 | Churn Cumulative: 21854 | Contributors (this commit): 118 | Commits (past 90d): 24 | Contributors (cumulative): 206 | DMM Complexity: 0.2146422628951747\n\nDIFF:\n@@ -51,7 +51,7 @@ def __getattr__(name):\n         from .globals import __app_ctx_stack\n \n         warnings.warn(\n-            \"'_app_ctx_stack' is deprecated and will be removed in Flask 2.3.\",\n+            \"'_app_ctx_stack' is deprecated and will be removed in Flask 2.4.\",\n             DeprecationWarning,\n             stacklevel=2,\n         )\n@@ -62,7 +62,7 @@ def __getattr__(name):\n         from .globals import __request_ctx_stack\n \n         warnings.warn(\n-            \"'_request_ctx_stack' is deprecated and will be removed in Flask 2.3.\",\n+            \"'_request_ctx_stack' is deprecated and will be removed in Flask 2.4.\",\n             DeprecationWarning,\n             stacklevel=2,\n         )\n\n@@ -1,6 +1,5 @@\n import functools\n import inspect\n-import json\n import logging\n import os\n import sys\n@@ -75,9 +74,6 @@ if t.TYPE_CHECKING:  # pragma: no cover\n     from .testing import FlaskClient\n     from .testing import FlaskCliRunner\n \n-T_before_first_request = t.TypeVar(\n-    \"T_before_first_request\", bound=ft.BeforeFirstRequestCallable\n-)\n T_shell_context_processor = t.TypeVar(\n     \"T_shell_context_processor\", bound=ft.ShellContextProcessorCallable\n )\n@@ -274,36 +270,6 @@ class Flask(Scaffold):\n     #: :data:`SECRET_KEY` configuration key. Defaults to ``None``.\n     secret_key = ConfigAttribute(\"SECRET_KEY\")\n \n-    @property\n-    def session_cookie_name(self) -> str:\n-        \"\"\"The name of the cookie set by the session interface.\n-\n-        .. deprecated:: 2.2\n-            Will be removed in Flask 2.3. Use ``app.config[\"SESSION_COOKIE_NAME\"]``\n-            instead.\n-        \"\"\"\n-        import warnings\n-\n-        warnings.warn(\n-            \"'session_cookie_name' is deprecated and will be removed in Flask 2.3. Use\"\n-            \" 'SESSION_COOKIE_NAME' in 'app.config' instead.\",\n-            DeprecationWarning,\n-            stacklevel=2,\n-        )\n-        return self.config[\"SESSION_COOKIE_NAME\"]\n-\n-    @session_cookie_name.setter\n-    def session_cookie_name(self, value: str) -> None:\n-        import warnings\n-\n-        warnings.warn(\n-            \"'session_cookie_name' is deprecated and will be removed in Flask 2.3. Use\"\n-            \" 'SESSION_COOKIE_NAME' in 'app.config' instead.\",\n-            DeprecationWarning,\n-            stacklevel=2,\n-        )\n-        self.config[\"SESSION_COOKIE_NAME\"] = value\n-\n     #: A :class:`~datetime.timedelta` which is used to set the expiration\n     #: date of a permanent session.  The default is 31 days which makes a\n     #: permanent session survive for roughly one month.\n@@ -315,152 +281,6 @@ class Flask(Scaffold):\n         \"PERMANENT_SESSION_LIFETIME\", get_converter=_make_timedelta\n     )\n \n-    @property\n-    def send_file_max_age_default(self) -> t.Optional[timedelta]:\n-        \"\"\"The default value for ``max_age`` for :func:`~flask.send_file`. The default\n-        is ``None``, which tells the browser to use conditional requests instead of a\n-        timed cache.\n-\n-        .. deprecated:: 2.2\n-            Will be removed in Flask 2.3. Use\n-            ``app.config[\"SEND_FILE_MAX_AGE_DEFAULT\"]`` instead.\n-\n-        .. versionchanged:: 2.0\n-            Defaults to ``None`` instead of 12 hours.\n-        \"\"\"\n-        import warnings\n-\n-        warnings.warn(\n-            \"'send_file_max_age_default' is deprecated and will be removed in Flask\"\n-            \" 2.3. Use 'SEND_FILE_MAX_AGE_DEFAULT' in 'app.config' instead.\",\n-            DeprecationWarning,\n-            stacklevel=2,\n-        )\n-        return _make_timedelta(self.config[\"SEND_FILE_MAX_AGE_DEFAULT\"])\n-\n-    @send_file_max_age_default.setter\n-    def send_file_max_age_default(self, value: t.Union[int, timedelta, None]) -> None:\n-        import warnings\n-\n-        warnings.warn(\n-            \"'send_file_max_age_default' is deprecated and will be removed in Flask\"\n-            \" 2.3. Use 'SEND_FILE_MAX_AGE_DEFAULT' in 'app.config' instead.\",\n-            DeprecationWarning,\n-            stacklevel=2,\n-        )\n-        self.config[\"SEND_FILE_MAX_AGE_DEFAULT\"] = _make_timedelta(value)\n-\n-    @property\n-    def use_x_sendfile(self) -> bool:\n-        \"\"\"Enable this to use the ``X-Sendfile`` feature, assuming the server supports\n-        it, from :func:`~flask.send_file`.\n-\n-        .. deprecated:: 2.2\n-            Will be removed in Flask 2.3. Use ``app.config[\"USE_X_SENDFILE\"]`` instead.\n-        \"\"\"\n-        import warnings\n-\n-        warnings.warn(\n-            \"'use_x_sendfile' is deprecated and will be removed in Flask 2.3. Use\"\n-            \" 'USE_X_SENDFILE' in 'app.config' instead.\",\n-            DeprecationWarning,\n-            stacklevel=2,\n-        )\n-        return self.config[\"USE_X_SENDFILE\"]\n-\n-    @use_x_sendfile.setter\n-    def use_x_sendfile(self, value: bool) -> None:\n-        import warnings\n-\n-        warnings.warn(\n-            \"'use_x_sendfile' is deprecated and will be removed in Flask 2.3. Use\"\n-            \" 'USE_X_SENDFILE' in 'app.config' instead.\",\n-            DeprecationWarning,\n-            stacklevel=2,\n-        )\n-        self.config[\"USE_X_SENDFILE\"] = value\n-\n-    _json_encoder: t.Union[t.Type[json.JSONEncoder], None] = None\n-    _json_decoder: t.Union[t.Type[json.JSONDecoder], None] = None\n-\n-    @property  # type: ignore[override]\n-    def json_encoder(self) -> t.Type[json.JSONEncoder]:\n-        \"\"\"The JSON encoder class to use. Defaults to\n-        :class:`~flask.json.JSONEncoder`.\n-\n-        .. deprecated:: 2.2\n-             Will be removed in Flask 2.3. Customize\n-             :attr:`json_provider_class` instead.\n-\n-        .. versionadded:: 0.10\n-        \"\"\"\n-        import warnings\n-\n-        warnings.warn(\n-            \"'app.json_encoder' is deprecated and will be removed in Flask 2.3.\"\n-            \" Customize 'app.json_provider_class' or 'app.json' instead.\",\n-            DeprecationWarning,\n-            stacklevel=2,\n-        )\n-\n-        if self._json_encoder is None:\n-            from . import json\n-\n-            return json.JSONEncoder\n-\n-        return self._json_encoder\n-\n-    @json_encoder.setter\n-    def json_encoder(self, value: t.Type[json.JSONEncoder]) -> None:\n-        import warnings\n-\n-        warnings.warn(\n-            \"'app.json_encoder' is deprecated and will be removed in Flask 2.3.\"\n-            \" Customize 'app.json_provider_class' or 'app.json' instead.\",\n-            DeprecationWarning,\n-            stacklevel=2,\n-        )\n-        self._json_encoder = value\n-\n-    @property  # type: ignore[override]\n-    def json_decoder(self) -> t.Type[json.JSONDecoder]:\n-        \"\"\"The JSON decoder class to use. Defaults to\n-        :class:`~flask.json.JSONDecoder`.\n-\n-        .. deprecated:: 2.2\n-             Will be removed in Flask 2.3. Customize\n-             :attr:`json_provider_class` instead.\n-\n-        .. versionadded:: 0.10\n-        \"\"\"\n-        import warnings\n-\n-        warnings.warn(\n-            \"'app.json_decoder' is deprecated and will be removed in Flask 2.3.\"\n-            \" Customize 'app.json_provider_class' or 'app.json' instead.\",\n-            DeprecationWarning,\n-            stacklevel=2,\n-        )\n-\n-        if self._json_decoder is None:\n-            from . import json\n-\n-            return json.JSONDecoder\n-\n-        return self._json_decoder\n-\n-    @json_decoder.setter\n-    def json_decoder(self, value: t.Type[json.JSONDecoder]) -> None:\n-        import warnings\n-\n-        warnings.warn(\n-            \"'app.json_decoder' is deprecated and will be removed in Flask 2.3.\"\n-            \" Customize 'app.json_provider_class' or 'app.json' instead.\",\n-            DeprecationWarning,\n-            stacklevel=2,\n-        )\n-        self._json_decoder = value\n-\n     json_provider_class: t.Type[JSONProvider] = DefaultJSONProvider\n     \"\"\"A subclass of :class:`~flask.json.provider.JSONProvider`. An\n     instance is created and assigned to :attr:`app.json` when creating\n@@ -487,7 +307,6 @@ class Flask(Scaffold):\n     #: Default configuration parameters.\n     default_config = ImmutableDict(\n         {\n-            \"ENV\": None,\n             \"DEBUG\": None,\n             \"TESTING\": False,\n             \"PROPAGATE_EXCEPTIONS\": None,\n@@ -509,10 +328,6 @@ class Flask(Scaffold):\n             \"TRAP_HTTP_EXCEPTIONS\": False,\n             \"EXPLAIN_TEMPLATE_LOADING\": False,\n             \"PREFERRED_URL_SCHEME\": \"http\",\n-            \"JSON_AS_ASCII\": None,\n-            \"JSON_SORT_KEYS\": None,\n-            \"JSONIFY_PRETTYPRINT_REGULAR\": None,\n-            \"JSONIFY_MIMETYPE\": None,\n             \"TEMPLATES_AUTO_RELOAD\": None,\n             \"MAX_COOKIE_SIZE\": 4093,\n         }\n@@ -625,17 +440,6 @@ class Flask(Scaffold):\n             t.Callable[[Exception, str, t.Dict[str, t.Any]], str]\n         ] = []\n \n-        #: A list of functions that will be called at the beginning of the\n-        #: first request to this instance. To register a function, use the\n-        #: :meth:`before_first_request` decorator.\n-        #:\n-        #: .. deprecated:: 2.2\n-        #:     Will be removed in Flask 2.3. Run setup code when\n-        #:     creating the application instead.\n-        #:\n-        #: .. versionadded:: 0.8\n-        self.before_first_request_funcs: t.List[ft.BeforeFirstRequestCallable] = []\n-\n         #: A list of functions that are called when the application context\n         #: is destroyed.  Since the application context is also torn down\n         #: if the request ends this is the place to store code that disconnects\n@@ -746,28 +550,6 @@ class Flask(Scaffold):\n             return os.path.splitext(os.path.basename(fn))[0]\n         return self.import_name\n \n-    @property\n-    def propagate_exceptions(self) -> bool:\n-        \"\"\"Returns the value of the ``PROPAGATE_EXCEPTIONS`` configuration\n-        value in case it's set, otherwise a sensible default is returned.\n-\n-        .. deprecated:: 2.2\n-            Will be removed in Flask 2.3.\n-\n-        .. versionadded:: 0.7\n-        \"\"\"\n-        import warnings\n-\n-        warnings.warn(\n-            \"'propagate_exceptions' is deprecated and will be removed in Flask 2.3.\",\n-            DeprecationWarning,\n-            stacklevel=2,\n-        )\n-        rv = self.config[\"PROPAGATE_EXCEPTIONS\"]\n-        if rv is not None:\n-            return rv\n-        return self.testing or self.debug\n-\n     @locked_cached_property\n     def logger(self) -> logging.Logger:\n         \"\"\"A standard Python :class:`~logging.Logger` for the app, with\n@@ -827,7 +609,6 @@ class Flask(Scaffold):\n         if instance_relative:\n             root_path = self.instance_path\n         defaults = dict(self.default_config)\n-        defaults[\"ENV\"] = os.environ.get(\"FLASK_ENV\") or \"production\"\n         defaults[\"DEBUG\"] = get_debug_flag()\n         return self.config_class(root_path, defaults)\n \n@@ -868,42 +649,6 @@ class Flask(Scaffold):\n         \"\"\"\n         return open(os.path.join(self.instance_path, resource), mode)\n \n-    @property\n-    def templates_auto_reload(self) -> bool:\n-        \"\"\"Reload templates when they are changed. Used by\n-        :meth:`create_jinja_environment`. It is enabled by default in debug mode.\n-\n-        .. deprecated:: 2.2\n-            Will be removed in Flask 2.3. Use ``app.config[\"TEMPLATES_AUTO_RELOAD\"]``\n-            instead.\n-\n-        .. versionadded:: 1.0\n-            This property was added but the underlying config and behavior\n-            already existed.\n-        \"\"\"\n-        import warnings\n-\n-        warnings.warn(\n-            \"'templates_auto_reload' is deprecated and will be removed in Flask 2.3.\"\n-            \" Use 'TEMPLATES_AUTO_RELOAD' in 'app.config' instead.\",\n-            DeprecationWarning,\n-            stacklevel=2,\n-        )\n-        rv = self.config[\"TEMPLATES_AUTO_RELOAD\"]\n-        return rv if rv is not None else self.debug\n-\n-    @templates_auto_reload.setter\n-    def templates_auto_reload(self, value: bool) -> None:\n-        import warnings\n-\n-        warnings.warn(\n-            \"'templates_auto_reload' is deprecated and will be removed in Flask 2.3.\"\n-            \" Use 'TEMPLATES_AUTO_RELOAD' in 'app.config' instead.\",\n-            DeprecationWarning,\n-            stacklevel=2,\n-        )\n-        self.config[\"TEMPLATES_AUTO_RELOAD\"] = value\n-\n     def create_jinja_environment(self) -> Environment:\n         \"\"\"Create the Jinja environment based on :attr:`jinja_options`\n         and the various Jinja-related methods of the app. Changing\n@@ -1010,40 +755,6 @@ class Flask(Scaffold):\n             rv.update(processor())\n         return rv\n \n-    @property\n-    def env(self) -> str:\n-        \"\"\"What environment the app is running in. This maps to the :data:`ENV` config\n-        key.\n-\n-        **Do not enable development when deploying in production.**\n-\n-        Default: ``'production'``\n-\n-        .. deprecated:: 2.2\n-            Will be removed in Flask 2.3.\n-        \"\"\"\n-        import warnings\n-\n-        warnings.warn(\n-            \"'app.env' is deprecated and will be removed in Flask 2.3.\"\n-            \" Use 'app.debug' instead.\",\n-            DeprecationWarning,\n-            stacklevel=2,\n-        )\n-        return self.config[\"ENV\"]\n-\n-    @env.setter\n-    def env(self, value: str) -> None:\n-        import warnings\n-\n-        warnings.warn(\n-            \"'app.env' is deprecated and will be removed in Flask 2.3.\"\n-            \" Use 'app.debug' instead.\",\n-            DeprecationWarning,\n-            stacklevel=2,\n-        )\n-        self.config[\"ENV\"] = value\n-\n     @property\n     def debug(self) -> bool:\n         \"\"\"Whether debug mode is enabled. When using ``flask run`` to start the\n@@ -1144,16 +855,8 @@ class Flask(Scaffold):\n         if get_load_dotenv(load_dotenv):\n             cli.load_dotenv()\n \n-            # if set, let env vars override previous values\n-            if \"FLASK_ENV\" in os.environ:\n-                print(\n-                    \"'FLASK_ENV' is deprecated and will not be used in\"\n-                    \" Flask 2.3. Use 'FLASK_DEBUG' instead.\",\n-                    file=sys.stderr,\n-                )\n-                self.config[\"ENV\"] = os.environ.get(\"FLASK_ENV\") or \"production\"\n-                self.debug = get_debug_flag()\n-            elif \"FLASK_DEBUG\" in os.environ:\n+            # if set, env var overrides existing value\n+            if \"FLASK_DEBUG\" in os.environ:\n                 self.debug = get_debug_flag()\n \n         # debug passed to method overrides all other sources\n@@ -1479,32 +1182,6 @@ class Flask(Scaffold):\n         \"\"\"\n         self.jinja_env.globals[name or f.__name__] = f\n \n-    @setupmethod\n-    def before_first_request(self, f: T_before_first_request) -> T_before_first_request:\n-        \"\"\"Registers a function to be run before the first request to this\n-        instance of the application.\n-\n-        The function will be called without any arguments and its return\n-        value is ignored.\n-\n-        .. deprecated:: 2.2\n-            Will be removed in Flask 2.3. Run setup code when creating\n-            the application instead.\n-\n-        .. versionadded:: 0.8\n-        \"\"\"\n-        import warnings\n-\n-        warnings.warn(\n-            \"'before_first_request' is deprecated and will be removed\"\n-            \" in Flask 2.3. Run setup code while creating the\"\n-            \" application instead.\",\n-            DeprecationWarning,\n-            stacklevel=2,\n-        )\n-        self.before_first_request_funcs.append(f)\n-        return f\n-\n     @setupmethod\n     def teardown_appcontext(self, f: T_teardown) -> T_teardown:\n         \"\"\"Registers a function to be called when the application\n@@ -1682,7 +1359,7 @@ class Flask(Scaffold):\n \n         Always sends the :data:`got_request_exception` signal.\n \n-        If :attr:`propagate_exceptions` is ``True``, such as in debug\n+        If :data:`PROPAGATE_EXCEPTIONS` is ``True``, such as in debug\n         mode, the error will be re-raised so that the debugger can\n         display it. Otherwise, the original exception is logged, and\n         an :exc:`~werkzeug.exceptions.InternalServerError` is returned.\n@@ -1805,15 +1482,6 @@ class Flask(Scaffold):\n \n         .. versionadded:: 0.7\n         \"\"\"\n-        # Run before_first_request functions if this is the thread's first request.\n-        # Inlined to avoid a method call on subsequent requests.\n-        # This is deprecated, will be removed in Flask 2.3.\n-        if not self._got_first_request:\n-            with self._before_request_lock:\n-                if not self._got_first_request:\n-                    for func in self.before_first_request_funcs:\n-                        self.ensure_sync(func)()\n-\n         self._got_first_request = True\n \n         try:\n\n@@ -1,4 +1,3 @@\n-import json\n import os\n import typing as t\n from collections import defaultdict\n@@ -15,9 +14,6 @@ if t.TYPE_CHECKING:  # pragma: no cover\n \n DeferredSetupFunction = t.Callable[[\"BlueprintSetupState\"], t.Callable]\n T_after_request = t.TypeVar(\"T_after_request\", bound=ft.AfterRequestCallable)\n-T_before_first_request = t.TypeVar(\n-    \"T_before_first_request\", bound=ft.BeforeFirstRequestCallable\n-)\n T_before_request = t.TypeVar(\"T_before_request\", bound=ft.BeforeRequestCallable)\n T_error_handler = t.TypeVar(\"T_error_handler\", bound=ft.ErrorHandlerCallable)\n T_teardown = t.TypeVar(\"T_teardown\", bound=ft.TeardownCallable)\n@@ -173,77 +169,6 @@ class Blueprint(Scaffold):\n \n     _got_registered_once = False\n \n-    _json_encoder: t.Union[t.Type[json.JSONEncoder], None] = None\n-    _json_decoder: t.Union[t.Type[json.JSONDecoder], None] = None\n-\n-    @property\n-    def json_encoder(\n-        self,\n-    ) -> t.Union[t.Type[json.JSONEncoder], None]:\n-        \"\"\"Blueprint-local JSON encoder class to use. Set to ``None`` to use the app's.\n-\n-        .. deprecated:: 2.2\n-             Will be removed in Flask 2.3. Customize\n-             :attr:`json_provider_class` instead.\n-\n-        .. versionadded:: 0.10\n-        \"\"\"\n-        import warnings\n-\n-        warnings.warn(\n-            \"'bp.json_encoder' is deprecated and will be removed in Flask 2.3.\"\n-            \" Customize 'app.json_provider_class' or 'app.json' instead.\",\n-            DeprecationWarning,\n-            stacklevel=2,\n-        )\n-        return self._json_encoder\n-\n-    @json_encoder.setter\n-    def json_encoder(self, value: t.Union[t.Type[json.JSONEncoder], None]) -> None:\n-        import warnings\n-\n-        warnings.warn(\n-            \"'bp.json_encoder' is deprecated and will be removed in Flask 2.3.\"\n-            \" Customize 'app.json_provider_class' or 'app.json' instead.\",\n-            DeprecationWarning,\n-            stacklevel=2,\n-        )\n-        self._json_encoder = value\n-\n-    @property\n-    def json_decoder(\n-        self,\n-    ) -> t.Union[t.Type[json.JSONDecoder], None]:\n-        \"\"\"Blueprint-local JSON decoder class to use. Set to ``None`` to use the app's.\n-\n-        .. deprecated:: 2.2\n-             Will be removed in Flask 2.3. Customize\n-             :attr:`json_provider_class` instead.\n-\n-        .. versionadded:: 0.10\n-        \"\"\"\n-        import warnings\n-\n-        warnings.warn(\n-            \"'bp.json_decoder' is deprecated and will be removed in Flask 2.3.\"\n-            \" Customize 'app.json_provider_class' or 'app.json' instead.\",\n-            DeprecationWarning,\n-            stacklevel=2,\n-        )\n-        return self._json_decoder\n-\n-    @json_decoder.setter\n-    def json_decoder(self, value: t.Union[t.Type[json.JSONDecoder], None]) -> None:\n-        import warnings\n-\n-        warnings.warn(\n-            \"'bp.json_decoder' is deprecated and will be removed in Flask 2.3.\"\n-            \" Customize 'app.json_provider_class' or 'app.json' instead.\",\n-            DeprecationWarning,\n-            stacklevel=2,\n-        )\n-        self._json_decoder = value\n-\n     def __init__(\n         self,\n         name: str,\n@@ -361,6 +286,10 @@ class Blueprint(Scaffold):\n         .. versionchanged:: 2.3\n             Nested blueprints now correctly apply subdomains.\n \n+        .. versionchanged:: 2.1\n+            Registering the same blueprint with the same name multiple\n+            times is an error.\n+\n         .. versionchanged:: 2.0.1\n             Nested blueprints are registered with their dotted name.\n             This allows different blueprints with the same name to be\n@@ -371,10 +300,6 @@ class Blueprint(Scaffold):\n             name the blueprint is registered with. This allows the same\n             blueprint to be registered multiple times with unique names\n             for ``url_for``.\n-\n-        .. versionchanged:: 2.0.1\n-            Registering the same blueprint with the same name multiple\n-            times is deprecated and will become an error in Flask 2.1.\n         \"\"\"\n         name_prefix = options.get(\"name_prefix\", \"\")\n         self_name = options.get(\"name\", self.name)\n@@ -634,29 +559,6 @@ class Blueprint(Scaffold):\n         )\n         return f\n \n-    @setupmethod\n-    def before_app_first_request(\n-        self, f: T_before_first_request\n-    ) -> T_before_first_request:\n-        \"\"\"Register a function to run before the first request to the application is\n-        handled by the worker. Equivalent to :meth:`.Flask.before_first_request`.\n-\n-        .. deprecated:: 2.2\n-            Will be removed in Flask 2.3. Run setup code when creating\n-            the application instead.\n-        \"\"\"\n-        import warnings\n-\n-        warnings.warn(\n-            \"'before_app_first_request' is deprecated and will be\"\n-            \" removed in Flask 2.3. Use 'record_once' instead to run\"\n-            \" setup code when registering the blueprint.\",\n-            DeprecationWarning,\n-            stacklevel=2,\n-        )\n-        self.record_once(lambda s: s.app.before_first_request_funcs.append(f))\n-        return f\n-\n     @setupmethod\n     def after_app_request(self, f: T_after_request) -> T_after_request:\n         \"\"\"Like :meth:`after_request`, but after every request, not only those handled\n\n@@ -17,30 +17,17 @@ class _FakeStack:\n         self.name = name\n         self.cv = cv\n \n-    def _warn(self):\n+    @property\n+    def top(self) -> t.Optional[t.Any]:\n         import warnings\n \n         warnings.warn(\n-            f\"'_{self.name}_ctx_stack' is deprecated and will be\"\n-            \" removed in Flask 2.3. Use 'g' to store data, or\"\n-            f\" '{self.name}_ctx' to access the current context.\",\n+            f\"'_{self.name}_ctx_stack' is deprecated and will be removed in Flask 2.4.\"\n+            f\" Use 'g' to store data, or '{self.name}_ctx' to access the current\"\n+            \" context.\",\n             DeprecationWarning,\n-            stacklevel=3,\n+            stacklevel=2,\n         )\n-\n-    def push(self, obj: t.Any) -> None:\n-        self._warn()\n-        self.cv.set(obj)\n-\n-    def pop(self) -> t.Any:\n-        self._warn()\n-        ctx = self.cv.get(None)\n-        self.cv.set(None)\n-        return ctx\n-\n-    @property\n-    def top(self) -> t.Optional[t.Any]:\n-        self._warn()\n         return self.cv.get(None)\n \n \n@@ -88,7 +75,7 @@ def __getattr__(name: str) -> t.Any:\n         import warnings\n \n         warnings.warn(\n-            \"'_app_ctx_stack' is deprecated and will be removed in Flask 2.3.\",\n+            \"'_app_ctx_stack' is deprecated and will be removed in Flask 2.4.\",\n             DeprecationWarning,\n             stacklevel=2,\n         )\n@@ -98,7 +85,7 @@ def __getattr__(name: str) -> t.Any:\n         import warnings\n \n         warnings.warn(\n-            \"'_request_ctx_stack' is deprecated and will be removed in Flask 2.3.\",\n+            \"'_request_ctx_stack' is deprecated and will be removed in Flask 2.4.\",\n             DeprecationWarning,\n             stacklevel=2,\n         )\n\n@@ -25,45 +25,12 @@ if t.TYPE_CHECKING:  # pragma: no cover\n     import typing_extensions as te\n \n \n-def get_env() -> str:\n-    \"\"\"Get the environment the app is running in, indicated by the\n-    :envvar:`FLASK_ENV` environment variable. The default is\n-    ``'production'``.\n-\n-    .. deprecated:: 2.2\n-        Will be removed in Flask 2.3.\n-    \"\"\"\n-    import warnings\n-\n-    warnings.warn(\n-        \"'FLASK_ENV' and 'get_env' are deprecated and will be removed\"\n-        \" in Flask 2.3. Use 'FLASK_DEBUG' instead.\",\n-        DeprecationWarning,\n-        stacklevel=2,\n-    )\n-    return os.environ.get(\"FLASK_ENV\") or \"production\"\n-\n-\n def get_debug_flag() -> bool:\n     \"\"\"Get whether debug mode should be enabled for the app, indicated by the\n     :envvar:`FLASK_DEBUG` environment variable. The default is ``False``.\n     \"\"\"\n     val = os.environ.get(\"FLASK_DEBUG\")\n-\n-    if not val:\n-        env = os.environ.get(\"FLASK_ENV\")\n-\n-        if env is not None:\n-            print(\n-                \"'FLASK_ENV' is deprecated and will not be used in\"\n-                \" Flask 2.3. Use 'FLASK_DEBUG' instead.\",\n-                file=sys.stderr,\n-            )\n-            return env == \"development\"\n-\n-        return False\n-\n-    return val.lower() not in {\"0\", \"false\", \"no\"}\n+    return bool(val and val.lower() not in {\"0\", \"false\", \"no\"})\n \n \n def get_load_dotenv(default: bool = True) -> bool:\n\n@@ -3,85 +3,14 @@ from __future__ import annotations\n import json as _json\n import typing as t\n \n-from jinja2.utils import htmlsafe_json_dumps as _jinja_htmlsafe_dumps\n-\n from ..globals import current_app\n from .provider import _default\n \n if t.TYPE_CHECKING:  # pragma: no cover\n-    from ..app import Flask\n     from ..wrappers import Response\n \n \n-class JSONEncoder(_json.JSONEncoder):\n-    \"\"\"The default JSON encoder. Handles extra types compared to the\n-    built-in :class:`json.JSONEncoder`.\n-\n-    -   :class:`datetime.datetime` and :class:`datetime.date` are\n-        serialized to :rfc:`822` strings. This is the same as the HTTP\n-        date format.\n-    -   :class:`decimal.Decimal` is serialized to a string.\n-    -   :class:`uuid.UUID` is serialized to a string.\n-    -   :class:`dataclasses.dataclass` is passed to\n-        :func:`dataclasses.asdict`.\n-    -   :class:`~markupsafe.Markup` (or any object with a ``__html__``\n-        method) will call the ``__html__`` method to get a string.\n-\n-    Assign a subclass of this to :attr:`flask.Flask.json_encoder` or\n-    :attr:`flask.Blueprint.json_encoder` to override the default.\n-\n-    .. deprecated:: 2.2\n-        Will be removed in Flask 2.3. Use ``app.json`` instead.\n-    \"\"\"\n-\n-    def __init__(self, **kwargs) -> None:\n-        import warnings\n-\n-        warnings.warn(\n-            \"'JSONEncoder' is deprecated and will be removed in\"\n-            \" Flask 2.3. Use 'Flask.json' to provide an alternate\"\n-            \" JSON implementation instead.\",\n-            DeprecationWarning,\n-            stacklevel=3,\n-        )\n-        super().__init__(**kwargs)\n-\n-    def default(self, o: t.Any) -> t.Any:\n-        \"\"\"Convert ``o`` to a JSON serializable type. See\n-        :meth:`json.JSONEncoder.default`. Python does not support\n-        overriding how basic types like ``str`` or ``list`` are\n-        serialized, they are handled before this method.\n-        \"\"\"\n-        return _default(o)\n-\n-\n-class JSONDecoder(_json.JSONDecoder):\n-    \"\"\"The default JSON decoder.\n-\n-    This does not change any behavior from the built-in\n-    :class:`json.JSONDecoder`.\n-\n-    Assign a subclass of this to :attr:`flask.Flask.json_decoder` or\n-    :attr:`flask.Blueprint.json_decoder` to override the default.\n-\n-    .. deprecated:: 2.2\n-        Will be removed in Flask 2.3. Use ``app.json`` instead.\n-    \"\"\"\n-\n-    def __init__(self, **kwargs) -> None:\n-        import warnings\n-\n-        warnings.warn(\n-            \"'JSONDecoder' is deprecated and will be removed in\"\n-            \" Flask 2.3. Use 'Flask.json' to provide an alternate\"\n-            \" JSON implementation instead.\",\n-            DeprecationWarning,\n-            stacklevel=3,\n-        )\n-        super().__init__(**kwargs)\n-\n-\n-def dumps(obj: t.Any, *, app: Flask | None = None, **kwargs: t.Any) -> str:\n+def dumps(obj: t.Any, **kwargs: t.Any) -> str:\n     \"\"\"Serialize data as JSON.\n \n     If :data:`~flask.current_app` is available, it will use its\n@@ -91,13 +20,13 @@ def dumps(obj: t.Any, *, app: Flask | None = None, **kwargs: t.Any) -> str:\n     :param obj: The data to serialize.\n     :param kwargs: Arguments passed to the ``dumps`` implementation.\n \n+    .. versionchanged:: 2.3\n+        The ``app`` parameter was removed.\n+\n     .. versionchanged:: 2.2\n         Calls ``current_app.json.dumps``, allowing an app to override\n         the behavior.\n \n-    .. versionchanged:: 2.2\n-        The ``app`` parameter will be removed in Flask 2.3.\n-\n     .. versionchanged:: 2.0.2\n         :class:`decimal.Decimal` is supported by converting to a string.\n \n@@ -108,28 +37,14 @@ def dumps(obj: t.Any, *, app: Flask | None = None, **kwargs: t.Any) -> str:\n         ``app`` can be passed directly, rather than requiring an app\n         context for configuration.\n     \"\"\"\n-    if app is not None:\n-        import warnings\n-\n-        warnings.warn(\n-            \"The 'app' parameter is deprecated and will be removed in\"\n-            \" Flask 2.3. Call 'app.json.dumps' directly instead.\",\n-            DeprecationWarning,\n-            stacklevel=2,\n-        )\n-    else:\n-        app = current_app\n-\n-    if app:\n-        return app.json.dumps(obj, **kwargs)\n+    if current_app:\n+        return current_app.json.dumps(obj, **kwargs)\n \n     kwargs.setdefault(\"default\", _default)\n     return _json.dumps(obj, **kwargs)\n \n \n-def dump(\n-    obj: t.Any, fp: t.IO[str], *, app: Flask | None = None, **kwargs: t.Any\n-) -> None:\n+def dump(obj: t.Any, fp: t.IO[str], **kwargs: t.Any) -> None:\n     \"\"\"Serialize data as JSON and write to a file.\n \n     If :data:`~flask.current_app` is available, it will use its\n@@ -141,37 +56,25 @@ def dump(\n         encoding to be valid JSON.\n     :param kwargs: Arguments passed to the ``dump`` implementation.\n \n+    .. versionchanged:: 2.3\n+        The ``app`` parameter was removed.\n+\n     .. versionchanged:: 2.2\n         Calls ``current_app.json.dump``, allowing an app to override\n         the behavior.\n \n-    .. versionchanged:: 2.2\n-        The ``app`` parameter will be removed in Flask 2.3.\n-\n     .. versionchanged:: 2.0\n         Writing to a binary file, and the ``encoding`` argument, will be\n         removed in Flask 2.1.\n     \"\"\"\n-    if app is not None:\n-        import warnings\n-\n-        warnings.warn(\n-            \"The 'app' parameter is deprecated and will be removed in\"\n-            \" Flask 2.3. Call 'app.json.dump' directly instead.\",\n-            DeprecationWarning,\n-            stacklevel=2,\n-        )\n-    else:\n-        app = current_app\n-\n-    if app:\n-        app.json.dump(obj, fp, **kwargs)\n+    if current_app:\n+        current_app.json.dump(obj, fp, **kwargs)\n     else:\n         kwargs.setdefault(\"default\", _default)\n         _json.dump(obj, fp, **kwargs)\n \n \n-def loads(s: str | bytes, *, app: Flask | None = None, **kwargs: t.Any) -> t.Any:\n+def loads(s: str | bytes, **kwargs: t.Any) -> t.Any:\n     \"\"\"Deserialize data as JSON.\n \n     If :data:`~flask.current_app` is available, it will use its\n@@ -181,13 +84,13 @@ def loads(s: str | bytes, *, app: Flask | None = None, **kwargs: t.Any) -> t.Any\n     :param s: Text or UTF-8 bytes.\n     :param kwargs: Arguments passed to the ``loads`` implementation.\n \n+    .. versionchanged:: 2.3\n+        The ``app`` parameter was removed.\n+\n     .. versionchanged:: 2.2\n         Calls ``current_app.json.loads``, allowing an app to override\n         the behavior.\n \n-    .. versionchanged:: 2.2\n-        The ``app`` parameter will be removed in Flask 2.3.\n-\n     .. versionchanged:: 2.0\n         ``encoding`` will be removed in Flask 2.1. The data must be a\n         string or UTF-8 bytes.\n@@ -196,25 +99,13 @@ def loads(s: str | bytes, *, app: Flask | None = None, **kwargs: t.Any) -> t.Any\n         ``app`` can be passed directly, rather than requiring an app\n         context for configuration.\n     \"\"\"\n-    if app is not None:\n-        import warnings\n-\n-        warnings.warn(\n-            \"The 'app' parameter is deprecated and will be removed in\"\n-            \" Flask 2.3. Call 'app.json.loads' directly instead.\",\n-            DeprecationWarning,\n-            stacklevel=2,\n-        )\n-    else:\n-        app = current_app\n-\n-    if app:\n-        return app.json.loads(s, **kwargs)\n+    if current_app:\n+        return current_app.json.loads(s, **kwargs)\n \n     return _json.loads(s, **kwargs)\n \n \n-def load(fp: t.IO[t.AnyStr], *, app: Flask | None = None, **kwargs: t.Any) -> t.Any:\n+def load(fp: t.IO[t.AnyStr], **kwargs: t.Any) -> t.Any:\n     \"\"\"Deserialize data as JSON read from a file.\n \n     If :data:`~flask.current_app` is available, it will use its\n@@ -224,6 +115,9 @@ def load(fp: t.IO[t.AnyStr], *, app: Flask | None = None, **kwargs: t.Any) -> t.\n     :param fp: A file opened for reading text or UTF-8 bytes.\n     :param kwargs: Arguments passed to the ``load`` implementation.\n \n+    .. versionchanged:: 2.3\n+        The ``app`` parameter was removed.\n+\n     .. versionchanged:: 2.2\n         Calls ``current_app.json.load``, allowing an app to override\n         the behavior.\n@@ -235,78 +129,12 @@ def load(fp: t.IO[t.AnyStr], *, app: Flask | None = None, **kwargs: t.Any) -> t.\n         ``encoding`` will be removed in Flask 2.1. The file must be text\n         mode, or binary mode with UTF-8 bytes.\n     \"\"\"\n-    if app is not None:\n-        import warnings\n-\n-        warnings.warn(\n-            \"The 'app' parameter is deprecated and will be removed in\"\n-            \" Flask 2.3. Call 'app.json.load' directly instead.\",\n-            DeprecationWarning,\n-            stacklevel=2,\n-        )\n-    else:\n-        app = current_app\n-\n-    if app:\n-        return app.json.load(fp, **kwargs)\n+    if current_app:\n+        return current_app.json.load(fp, **kwargs)\n \n     return _json.load(fp, **kwargs)\n \n \n-def htmlsafe_dumps(obj: t.Any, **kwargs: t.Any) -> str:\n-    \"\"\"Serialize an object to a string of JSON with :func:`dumps`, then\n-    replace HTML-unsafe characters with Unicode escapes and mark the\n-    result safe with :class:`~markupsafe.Markup`.\n-\n-    This is available in templates as the ``|tojson`` filter.\n-\n-    The returned string is safe to render in HTML documents and\n-    ``<script>`` tags. The exception is in HTML attributes that are\n-    double quoted; either use single quotes or the ``|forceescape``\n-    filter.\n-\n-    .. deprecated:: 2.2\n-        Will be removed in Flask 2.3. This is built-in to Jinja now.\n-\n-    .. versionchanged:: 2.0\n-        Uses :func:`jinja2.utils.htmlsafe_json_dumps`. The returned\n-        value is marked safe by wrapping in :class:`~markupsafe.Markup`.\n-\n-    .. versionchanged:: 0.10\n-        Single quotes are escaped, making this safe to use in HTML,\n-        ``<script>`` tags, and single-quoted attributes without further\n-        escaping.\n-    \"\"\"\n-    import warnings\n-\n-    warnings.warn(\n-        \"'htmlsafe_dumps' is deprecated and will be removed in Flask\"\n-        \" 2.3. Use 'jinja2.utils.htmlsafe_json_dumps' instead.\",\n-        DeprecationWarning,\n-        stacklevel=2,\n-    )\n-    return _jinja_htmlsafe_dumps(obj, dumps=dumps, **kwargs)\n-\n-\n-def htmlsafe_dump(obj: t.Any, fp: t.IO[str], **kwargs: t.Any) -> None:\n-    \"\"\"Serialize an object to JSON written to a file object, replacing\n-    HTML-unsafe characters with Unicode escapes. See\n-    :func:`htmlsafe_dumps` and :func:`dumps`.\n-\n-    .. deprecated:: 2.2\n-        Will be removed in Flask 2.3.\n-    \"\"\"\n-    import warnings\n-\n-    warnings.warn(\n-        \"'htmlsafe_dump' is deprecated and will be removed in Flask\"\n-        \" 2.3. Use 'jinja2.utils.htmlsafe_json_dumps' instead.\",\n-        DeprecationWarning,\n-        stacklevel=2,\n-    )\n-    fp.write(htmlsafe_dumps(obj, **kwargs))\n-\n-\n def jsonify(*args: t.Any, **kwargs: t.Any) -> Response:\n     \"\"\"Serialize the given arguments as JSON, and return a\n     :class:`~flask.Response` object with the ``application/json``\n\n@@ -10,8 +10,6 @@ from datetime import date\n \n from werkzeug.http import http_date\n \n-from ..globals import request\n-\n if t.TYPE_CHECKING:  # pragma: no cover\n     from ..app import Flask\n     from ..wrappers import Response\n@@ -176,57 +174,9 @@ class DefaultJSONProvider(JSONProvider):\n         :param obj: The data to serialize.\n         :param kwargs: Passed to :func:`json.dumps`.\n         \"\"\"\n-        cls = self._app._json_encoder\n-        bp = self._app.blueprints.get(request.blueprint) if request else None\n-\n-        if bp is not None and bp._json_encoder is not None:\n-            cls = bp._json_encoder\n-\n-        if cls is not None:\n-            import warnings\n-\n-            warnings.warn(\n-                \"Setting 'json_encoder' on the app or a blueprint is\"\n-                \" deprecated and will be removed in Flask 2.3.\"\n-                \" Customize 'app.json' instead.\",\n-                DeprecationWarning,\n-            )\n-            kwargs.setdefault(\"cls\", cls)\n-\n-            if \"default\" not in cls.__dict__:\n         kwargs.setdefault(\"default\", self.default)\n-        else:\n-            kwargs.setdefault(\"default\", self.default)\n-\n-        ensure_ascii = self._app.config[\"JSON_AS_ASCII\"]\n-        sort_keys = self._app.config[\"JSON_SORT_KEYS\"]\n-\n-        if ensure_ascii is not None:\n-            import warnings\n-\n-            warnings.warn(\n-                \"The 'JSON_AS_ASCII' config key is deprecated and will\"\n-                \" be removed in Flask 2.3. Set 'app.json.ensure_ascii'\"\n-                \" instead.\",\n-                DeprecationWarning,\n-            )\n-        else:\n-            ensure_ascii = self.ensure_ascii\n-\n-        if sort_keys is not None:\n-            import warnings\n-\n-            warnings.warn(\n-                \"The 'JSON_SORT_KEYS' config key is deprecated and will\"\n-                \" be removed in Flask 2.3. Set 'app.json.sort_keys'\"\n-                \" instead.\",\n-                DeprecationWarning,\n-            )\n-        else:\n-            sort_keys = self.sort_keys\n-\n-        kwargs.setdefault(\"ensure_ascii\", ensure_ascii)\n-        kwargs.setdefault(\"sort_keys\", sort_keys)\n+        kwargs.setdefault(\"ensure_ascii\", self.ensure_ascii)\n+        kwargs.setdefault(\"sort_keys\", self.sort_keys)\n         return json.dumps(obj, **kwargs)\n \n     def loads(self, s: str | bytes, **kwargs: t.Any) -> t.Any:\n@@ -235,23 +185,6 @@ class DefaultJSONProvider(JSONProvider):\n         :param s: Text or UTF-8 bytes.\n         :param kwargs: Passed to :func:`json.loads`.\n         \"\"\"\n-        cls = self._app._json_decoder\n-        bp = self._app.blueprints.get(request.blueprint) if request else None\n-\n-        if bp is not None and bp._json_decoder is not None:\n-            cls = bp._json_decoder\n-\n-        if cls is not None:\n-            import warnings\n-\n-            warnings.warn(\n-                \"Setting 'json_decoder' on the app or a blueprint is\"\n-                \" deprecated and will be removed in Flask 2.3.\"\n-                \" Customize 'app.json' instead.\",\n-                DeprecationWarning,\n-            )\n-            kwargs.setdefault(\"cls\", cls)\n-\n         return json.loads(s, **kwargs)\n \n     def response(self, *args: t.Any, **kwargs: t.Any) -> Response:\n@@ -272,39 +205,12 @@ class DefaultJSONProvider(JSONProvider):\n         \"\"\"\n         obj = self._prepare_response_obj(args, kwargs)\n         dump_args: t.Dict[str, t.Any] = {}\n-        pretty = self._app.config[\"JSONIFY_PRETTYPRINT_REGULAR\"]\n-        mimetype = self._app.config[\"JSONIFY_MIMETYPE\"]\n \n-        if pretty is not None:\n-            import warnings\n-\n-            warnings.warn(\n-                \"The 'JSONIFY_PRETTYPRINT_REGULAR' config key is\"\n-                \" deprecated and will be removed in Flask 2.3. Set\"\n-                \" 'app.json.compact' instead.\",\n-                DeprecationWarning,\n-            )\n-            compact: bool | None = not pretty\n-        else:\n-            compact = self.compact\n-\n-        if (compact is None and self._app.debug) or compact is False:\n+        if (self.compact is None and self._app.debug) or self.compact is False:\n             dump_args.setdefault(\"indent\", 2)\n         else:\n             dump_args.setdefault(\"separators\", (\",\", \":\"))\n \n-        if mimetype is not None:\n-            import warnings\n-\n-            warnings.warn(\n-                \"The 'JSONIFY_MIMETYPE' config key is deprecated and\"\n-                \" will be removed in Flask 2.3. Set 'app.json.mimetype'\"\n-                \" instead.\",\n-                DeprecationWarning,\n-            )\n-        else:\n-            mimetype = self.mimetype\n-\n         return self._app.response_class(\n-            f\"{self.dumps(obj, **dump_args)}\\n\", mimetype=mimetype\n+            f\"{self.dumps(obj, **dump_args)}\\n\", mimetype=self.mimetype\n         )\n\n@@ -1,5 +1,4 @@\n import importlib.util\n-import json\n import os\n import pathlib\n import pkgutil\n@@ -74,20 +73,6 @@ class Scaffold:\n     _static_folder: t.Optional[str] = None\n     _static_url_path: t.Optional[str] = None\n \n-    #: JSON encoder class used by :func:`flask.json.dumps`. If a\n-    #: blueprint sets this, it will be used instead of the app's value.\n-    #:\n-    #: .. deprecated:: 2.2\n-    #:      Will be removed in Flask 2.3.\n-    json_encoder: t.Union[t.Type[json.JSONEncoder], None] = None\n-\n-    #: JSON decoder class used by :func:`flask.json.loads`. If a\n-    #: blueprint sets this, it will be used instead of the app's value.\n-    #:\n-    #: .. deprecated:: 2.2\n-    #:      Will be removed in Flask 2.3.\n-    json_decoder: t.Union[t.Type[json.JSONDecoder], None] = None\n-\n     def __init__(\n         self,\n         import_name: str,\n\n@@ -20,7 +20,6 @@ def _standard_os_environ():\n     out = (\n         (os.environ, \"FLASK_ENV_FILE\", monkeypatch.notset),\n         (os.environ, \"FLASK_APP\", monkeypatch.notset),\n-        (os.environ, \"FLASK_ENV\", monkeypatch.notset),\n         (os.environ, \"FLASK_DEBUG\", monkeypatch.notset),\n         (os.environ, \"FLASK_RUN_FROM_CLI\", monkeypatch.notset),\n         (os.environ, \"WERKZEUG_RUN_MAIN\", monkeypatch.notset),\n\n@@ -95,7 +95,6 @@ def test_async_error_handler(path, async_app):\n \n \n def test_async_before_after_request():\n-    app_first_called = False\n     app_before_called = False\n     app_after_called = False\n     bp_before_called = False\n@@ -107,13 +106,6 @@ def test_async_before_after_request():\n     def index():\n         return \"\"\n \n-    with pytest.deprecated_call():\n-\n-        @app.before_first_request\n-        async def before_first():\n-            nonlocal app_first_called\n-            app_first_called = True\n-\n     @app.before_request\n     async def before():\n         nonlocal app_before_called\n@@ -146,7 +138,6 @@ def test_async_before_after_request():\n \n     test_client = app.test_client()\n     test_client.get(\"/\")\n-    assert app_first_called\n     assert app_before_called\n     assert app_after_called\n     test_client.get(\"/bp/\")\n\n@@ -1,13 +1,11 @@\n import gc\n import re\n-import time\n import uuid\n import warnings\n import weakref\n from datetime import datetime\n from datetime import timezone\n from platform import python_implementation\n-from threading import Thread\n \n import pytest\n import werkzeug.serving\n@@ -1667,43 +1665,6 @@ def test_no_setup_after_first_request(app, client):\n     assert \"setup method 'add_url_rule'\" in str(exc_info.value)\n \n \n-def test_before_first_request_functions(app, client):\n-    got = []\n-\n-    with pytest.deprecated_call():\n-\n-        @app.before_first_request\n-        def foo():\n-            got.append(42)\n-\n-    client.get(\"/\")\n-    assert got == [42]\n-    client.get(\"/\")\n-    assert got == [42]\n-    assert app.got_first_request\n-\n-\n-def test_before_first_request_functions_concurrent(app, client):\n-    got = []\n-\n-    with pytest.deprecated_call():\n-\n-        @app.before_first_request\n-        def foo():\n-            time.sleep(0.2)\n-            got.append(42)\n-\n-    def get_and_assert():\n-        client.get(\"/\")\n-        assert got == [42]\n-\n-    t = Thread(target=get_and_assert)\n-    t.start()\n-    get_and_assert()\n-    t.join()\n-    assert app.got_first_request\n-\n-\n def test_routing_redirect_debugging(monkeypatch, app, client):\n     app.config[\"DEBUG\"] = True\n \n\n@@ -722,12 +722,6 @@ def test_app_request_processing(app, client):\n     bp = flask.Blueprint(\"bp\", __name__)\n     evts = []\n \n-    with pytest.deprecated_call():\n-\n-        @bp.before_app_first_request\n-        def before_first_request():\n-            evts.append(\"first\")\n-\n     @bp.before_app_request\n     def before_app():\n         evts.append(\"before\")\n@@ -755,12 +749,12 @@ def test_app_request_processing(app, client):\n     # first request\n     resp = client.get(\"/\").data\n     assert resp == b\"request|after\"\n-    assert evts == [\"first\", \"before\", \"after\", \"teardown\"]\n+    assert evts == [\"before\", \"after\", \"teardown\"]\n \n     # second request\n     resp = client.get(\"/\").data\n     assert resp == b\"request|after\"\n-    assert evts == [\"first\"] + [\"before\", \"after\", \"teardown\"] * 2\n+    assert evts == [\"before\", \"after\", \"teardown\"] * 2\n \n \n def test_app_url_processors(app, client):\n\n@@ -302,24 +302,18 @@ class TestStreaming:\n \n class TestHelpers:\n     @pytest.mark.parametrize(\n-        \"debug, expected_flag, expected_default_flag\",\n+        (\"debug\", \"expect\"),\n         [\n-            (\"\", False, False),\n-            (\"0\", False, False),\n-            (\"False\", False, False),\n-            (\"No\", False, False),\n-            (\"True\", True, True),\n+            (\"\", False),\n+            (\"0\", False),\n+            (\"False\", False),\n+            (\"No\", False),\n+            (\"True\", True),\n         ],\n     )\n-    def test_get_debug_flag(\n-        self, monkeypatch, debug, expected_flag, expected_default_flag\n-    ):\n+    def test_get_debug_flag(self, monkeypatch, debug, expect):\n         monkeypatch.setenv(\"FLASK_DEBUG\", debug)\n-        if expected_flag is None:\n-            assert get_debug_flag() is None\n-        else:\n-            assert get_debug_flag() == expected_flag\n-        assert get_debug_flag() == expected_default_flag\n+        assert get_debug_flag() == expect\n \n     def test_make_response(self):\n         app = flask.Flask(__name__)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
