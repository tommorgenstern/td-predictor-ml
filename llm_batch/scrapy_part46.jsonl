{"custom_id": "scrapy#698e6e73ea4ca8af4582a6850ebe85168bfb9f40", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 7 | Lines Deleted: 7 | Files Changed: 1 | Hunks: 6 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 14 | Churn Cumulative: 326 | Contributors (this commit): 2 | Commits (past 90d): 21 | Contributors (cumulative): 2 | DMM Complexity: 0.0\n\nDIFF:\n@@ -12,14 +12,15 @@ def adaptize(func):\n     return _adaptor\n \n \n+_IDENTITY = lambda v: v\n+\n+\n class ItemAdaptorMeta(type):\n-\n     def __new__(meta, class_name, bases, attrs):\n-        cls = type.__new__(meta, class_name, bases, attrs)\n+        da = attrs.get('default_adaptor') or _IDENTITY\n+        attrs['default_adaptor'] = staticmethod(adaptize(da))\n \n-        if 'default_adaptor' in attrs:\n-            default_adaptor = adaptize(attrs['default_adaptor'])\n-            cls.default_adaptor = staticmethod(default_adaptor)\n+        cls = type.__new__(meta, class_name, bases, attrs)\n \n         cls.field_adaptors = cls.field_adaptors.copy()\n     \n@@ -42,10 +43,9 @@ class ItemAdaptorMeta(type):\n class ItemAdaptor(object):\n     __metaclass__ = ItemAdaptorMeta\n \n-    IDENTITY = lambda v: v\n+    IDENTITY = _IDENTITY\n \n     item_class = None\n-    default_adaptor = IDENTITY\n     field_adaptors = {}\n \n     def __init__(self, response=None, item=None):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "scrapy#63e6ce6e47e8631ca2b01a188b46d39a2fa3da8b", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 3 | Lines Deleted: 4 | Files Changed: 1 | Hunks: 3 | Methods Changed: 2 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 7 | Churn Cumulative: 333 | Contributors (this commit): 2 | Commits (past 90d): 22 | Contributors (cumulative): 2 | DMM Complexity: 1.0\n\nDIFF:\n@@ -12,12 +12,13 @@ def adaptize(func):\n     return _adaptor\n \n \n-_IDENTITY = lambda v: v\n+def IDENTITY(v):\n+    return v\n \n \n class ItemAdaptorMeta(type):\n     def __new__(meta, class_name, bases, attrs):\n-        da = attrs.get('default_adaptor') or _IDENTITY\n+        da = attrs.get('default_adaptor') or IDENTITY\n         attrs['default_adaptor'] = staticmethod(adaptize(da))\n \n         cls = type.__new__(meta, class_name, bases, attrs)\n@@ -43,8 +44,6 @@ class ItemAdaptorMeta(type):\n class ItemAdaptor(object):\n     __metaclass__ = ItemAdaptorMeta\n \n-    IDENTITY = _IDENTITY\n-\n     item_class = None\n     field_adaptors = {}\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "scrapy#67ab30a5ba74e8b6784f823f28c2ee902e94f690", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 0 | Files Changed: 2 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 114 | Contributors (this commit): 2 | Commits (past 90d): 11 | Contributors (cumulative): 4 | DMM Complexity: 1.0\n\nDIFF:\n@@ -16,6 +16,7 @@ class ResponseTypes(object):\n \n     CLASSES = {\n         'text/html': 'scrapy.http.HtmlResponse',\n+        'application/xhtml+xml': 'scrapy.http.HtmlResponse',\n         'application/xml': 'scrapy.http.XmlResponse',\n         'text/xml': 'scrapy.http.XmlResponse',\n         'text': 'scrapy.http.TextResponse',\n\n@@ -31,6 +31,7 @@ class ResponseTypesTest(unittest.TestCase):\n         mappings = [\n             ('text/html; charset=UTF-8', HtmlResponse),\n             ('text/xml; charset=UTF-8', XmlResponse),\n+            ('application/xhtml+xml; charset=UTF-8', HtmlResponse),\n             ('application/xml; charset=UTF-8', XmlResponse),\n             ('application/octet-stream', Response),\n         ]\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "scrapy#774e7f623a0f64e308e4d8593f22815110050322", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 11 | Lines Deleted: 1 | Files Changed: 2 | Hunks: 4 | Methods Changed: 2 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 12 | Churn Cumulative: 530 | Contributors (this commit): 2 | Commits (past 90d): 35 | Contributors (cumulative): 4 | DMM Complexity: 1.0\n\nDIFF:\n@@ -18,7 +18,8 @@ def IDENTITY(v):\n \n class ItemAdaptorMeta(type):\n     def __new__(meta, class_name, bases, attrs):\n-        da = attrs.get('default_adaptor') or IDENTITY\n+        da = attrs.get('default_adaptor')\n+        if da:\n             attrs['default_adaptor'] = staticmethod(adaptize(da))\n \n         cls = type.__new__(meta, class_name, bases, attrs)\n@@ -46,6 +47,7 @@ class ItemAdaptor(object):\n \n     item_class = None\n     field_adaptors = {}\n+    default_adaptor = IDENTITY\n \n     def __init__(self, response=None, item=None):\n         self.item_instance = item if item else self.item_class()\n\n@@ -24,6 +24,9 @@ class TestAdaptor(BaseAdaptor):\n class DefaultedAdaptor(BaseAdaptor):\n     default_adaptor = lambda v: v.title()\n \n+class InheritDefaultAdaptor(DefaultedAdaptor):\n+    pass\n+\n \n class ItemAdaptorTest(unittest.TestCase):\n \n@@ -39,6 +42,11 @@ class ItemAdaptorTest(unittest.TestCase):\n         dta.name = 'marta'\n         assert dta.name == 'Marta'\n \n+    def test_inheritdefaultadaptor(self):\n+        ida = InheritDefaultAdaptor()\n+        ida.name = 'marta'\n+        assert ida.name == 'Marta'\n+\n     def test_inheritance(self):\n         class ChildTestAdaptor(TestAdaptor):\n             url = lambda v: v.lower()\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "scrapy#04baa7aed7e6b090400f75d561587774fa5aef0c", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 28 | Lines Deleted: 24 | Files Changed: 3 | Hunks: 6 | Methods Changed: 5 | Complexity Δ (Sum/Max): -1/1 | Churn Δ: 52 | Churn Cumulative: 149 | Contributors (this commit): 1 | Commits (past 90d): 14 | Contributors (cumulative): 3 | DMM Complexity: 1.0\n\nDIFF:\n@@ -1,18 +0,0 @@\n-class DeclarativeMeta(type):\n-    \"\"\"Metaclass for declarative objects\"\"\"\n-\n-    def __new__(meta, class_name, bases, attrs):\n-        cls = type.__new__(meta, class_name, bases, attrs)\n-        cls.__classinit__.im_func(cls, attrs)\n-        return cls\n-\n-\n-class Declarative(object):\n-    \"\"\"Base class for declarative objects\"\"\"\n-\n-    __metaclass__ = DeclarativeMeta\n-\n-    def __classinit__(cls, attrs): \n-        \"\"\"Override this method to initialize your class\"\"\"\n-        pass\n-\n\n@@ -1,19 +1,26 @@\n from scrapy.item import ScrapedItem\n-from scrapy.contrib_exp.newitem.declarative import Declarative\n from scrapy.contrib_exp.newitem.fields import Field\n \n \n-class Item(Declarative, ScrapedItem):\n-    \"\"\" This is the base class for all scraped items. \"\"\"\n+class ItemMeta(type):\n \n-    fields = {}\n-\n-    def __classinit__(cls, attrs):\n+    def __new__(meta, class_name, bases, attrs):\n+        cls = type.__new__(meta, class_name, bases, attrs)\n         cls.fields = cls.fields.copy()\n         for n, v in attrs.items():\n             if isinstance(v, Field):\n                 cls.fields[n] = v\n \n+        return cls\n+\n+\n+class Item(ScrapedItem):\n+    \"\"\" This is the base class for all scraped items. \"\"\"\n+\n+    __metaclass__ = ItemMeta\n+\n+    fields = {}\n+\n     def __init__(self):\n         self._values = {}\n \n\n@@ -0,0 +1,15 @@\n+import unittest\n+\n+from scrapy.contrib_exp.newitem import *\n+\n+\n+class NewItemTest(unittest.TestCase):\n+\n+    def test_simple(self):\n+        class TestItem(Item):\n+            name = StringField()\n+\n+        i = TestItem()\n+        i.name = 'name'\n+        assert i.name == 'name'\n+\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "scrapy#2f75c2c93eaa463053a95dd83dd87aaaebb014c5", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 0 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 1 | Churn Cumulative: 338 | Contributors (this commit): 2 | Commits (past 90d): 24 | Contributors (cumulative): 2 | DMM Complexity: None\n\nDIFF:\n@@ -1,4 +1,3 @@\n-from scrapy.contrib_exp.newitem.declarative import Declarative\n from scrapy.utils.python import get_func_args\n \n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "scrapy#ec1a6af04ac767f32f66d3e6fc885a6a16ed20d4", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 25 | Lines Deleted: 1 | Files Changed: 2 | Hunks: 3 | Methods Changed: 4 | Complexity Δ (Sum/Max): 6/5 | Churn Δ: 26 | Churn Cumulative: 105 | Contributors (this commit): 1 | Commits (past 90d): 9 | Contributors (cumulative): 2 | DMM Complexity: 1.0\n\nDIFF:\n@@ -3,7 +3,7 @@ import decimal\n import re\n \n \n-__all__ = ['BooleanField', 'DateField', 'DecimalField',\n+__all__ = ['MultiValuedField', 'BooleanField', 'DateField', 'DecimalField',\n            'FloatField', 'IntegerField', 'StringField']\n \n \n@@ -34,6 +34,21 @@ class Field(object):\n         return ' '.join(value)\n \n \n+class MultiValuedField(Field):\n+    def __init__(self, field_type, required=False, default=None):\n+        self._field = field_type()\n+        super(MultiValuedField, self).__init__(required, default)\n+\n+    def to_python(self, value):\n+        if value is None:\n+            return []\n+        else:\n+            return [self._field.to_python(v) for v in value]\n+\n+    def deiter(self, value):\n+        return value\n+\n+\n class BooleanField(Field):\n     def to_python(self, value):\n         if value in (True, False): return value\n\n@@ -13,3 +13,12 @@ class NewItemTest(unittest.TestCase):\n         i.name = 'name'\n         assert i.name == 'name'\n \n+    def test_multi(self):\n+        class TestMultiItem(Item):\n+            name = StringField()\n+            names = MultiValuedField(StringField)\n+\n+        i = TestMultiItem()\n+        i.name = 'name'\n+        i.names = ['name1', 'name2']\n+        assert i.names == ['name1', 'name2']\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "scrapy#0be771152b6092a859647641f6509b1f91e756ce", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 56 | Contributors (this commit): 2 | Commits (past 90d): 4 | Contributors (cumulative): 2 | DMM Complexity: None\n\nDIFF:\n@@ -33,7 +33,7 @@ class DownloaderStats(object):\n         \n     def process_exception(self, request, exception, spider):\n         ex_class = \"%s.%s\" % (exception.__class__.__module__, exception.__class__.__name__)\n-        stats.incpath('_globl/downloader/exception_count')\n+        stats.incpath('_global/downloader/exception_count')\n         stats.incpath('%s/downloader/exception_count' % spider.domain_name)\n         stats.incpath('%s/downloader/exception_type_count/%s' % (spider.domain_name, ex_class))\n         if isinstance(exception, HttpException):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "scrapy#2ba017b14dc86bf40c109e36c8c2a1d1482b30cb", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 17 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 4 | Methods Changed: 1 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 18 | Churn Cumulative: 211 | Contributors (this commit): 2 | Commits (past 90d): 13 | Contributors (cumulative): 2 | DMM Complexity: 1.0\n\nDIFF:\n@@ -1,7 +1,7 @@\n import unittest\n import string\n from scrapy.contrib_exp.newitem.adaptors import adaptor, ItemAdaptor\n-from scrapy.contrib_exp.newitem import Item, StringField\n+from scrapy.contrib_exp.newitem import * \n \n \n class BaseItem(Item):\n@@ -24,10 +24,21 @@ class TestAdaptor(BaseAdaptor):\n class DefaultedAdaptor(BaseAdaptor):\n     default_adaptor = lambda v: v.title()\n \n+\n class InheritDefaultAdaptor(DefaultedAdaptor):\n     pass\n \n \n+class MultiValuedTestItem(Item):\n+    names = MultiValuedField(StringField)\n+\n+\n+class MultiValuedItemAdaptor(ItemAdaptor):\n+    item_class = MultiValuedTestItem\n+\n+    names = adaptor(lambda v: v.title())\n+\n+\n class ItemAdaptorTest(unittest.TestCase):\n \n     def test_basic(self):\n@@ -92,6 +103,11 @@ class ItemAdaptorTest(unittest.TestCase):\n         dia.name = 'marta'\n         self.assertEqual(dia.name, 'mARTA')\n \n+    def test_multiplevaluedadaptor(self):\n+        ma = MultiValuedItemAdaptor()\n+        ma.names = ['name1', 'name2']\n+        assert ma.names == ['Name1', 'Name2']\n+\n \n class TreeadaptTest(unittest.TestCase):\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "scrapy#518a7c87ddb25eafb448b0e449019324289fa449", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 12 | Lines Deleted: 11 | Files Changed: 2 | Hunks: 9 | Methods Changed: 4 | Complexity Δ (Sum/Max): -2/0 | Churn Δ: 23 | Churn Cumulative: 572 | Contributors (this commit): 2 | Commits (past 90d): 39 | Contributors (cumulative): 4 | DMM Complexity: 1.0\n\nDIFF:\n@@ -23,13 +23,13 @@ class ItemAdaptorMeta(type):\n \n         cls = type.__new__(meta, class_name, bases, attrs)\n \n-        cls.field_adaptors = cls.field_adaptors.copy()\n+        cls._field_adaptors = cls._field_adaptors.copy()\n     \n         if cls.item_class:\n             for item_field in cls.item_class.fields.keys():\n                 if item_field in attrs:\n                     adaptor = adaptize(attrs[item_field])\n-                    cls.field_adaptors[item_field] = adaptor\n+                    cls._field_adaptors[item_field] = adaptor\n                     setattr(cls, item_field, staticmethod(adaptor))\n \n         return cls\n@@ -45,20 +45,21 @@ class ItemAdaptor(object):\n     __metaclass__ = ItemAdaptorMeta\n \n     item_class = None\n-    field_adaptors = {}\n     default_adaptor = IDENTITY\n \n+    _field_adaptors = {}\n+\n     def __init__(self, response=None, item=None):\n         self.item_instance = item if item else self.item_class()\n         self._response = response\n \n     def __setattr__(self, name, value):\n         if (name.startswith('_') or name == 'item_instance' \\\n-            or name == 'default_adaptor' or name == 'field_adaptors'):\n+            or name == 'default_adaptor'):\n             return object.__setattr__(self, name, value)\n \n         try:\n-            fa = self.field_adaptors[name]\n+            fa = self._field_adaptors[name]\n         except KeyError:\n             fa = self.default_adaptor\n \n@@ -68,7 +69,7 @@ class ItemAdaptor(object):\n \n     def __getattribute__(self, name):\n         if (name.startswith('_') or name.startswith('item_') \\\n-            or name == 'default_adaptor' or name == 'field_adaptors'):\n+            or name == 'default_adaptor'):\n             return object.__getattribute__(self, name)\n \n         return getattr(self.item_instance, name)\n\n@@ -63,8 +63,8 @@ class ItemAdaptorTest(unittest.TestCase):\n             url = lambda v: v.lower()\n \n         ia = ChildTestAdaptor()\n-        assert 'url' in ia.field_adaptors\n-        assert 'name' in ia.field_adaptors\n+        assert 'url' in ia._field_adaptors\n+        assert 'name' in ia._field_adaptors\n \n         ia.url = 'HTTP://scrapy.ORG'\n         self.assertEqual(ia.url, 'http://scrapy.org')\n@@ -77,9 +77,9 @@ class ItemAdaptorTest(unittest.TestCase):\n             summary = lambda v: v\n \n         ia = ChildChildTestAdaptor()\n-        assert 'url' in ia.field_adaptors\n-        assert 'name' in ia.field_adaptors\n-        assert 'summary' in ia.field_adaptors\n+        assert 'url' in ia._field_adaptors\n+        assert 'name' in ia._field_adaptors\n+        assert 'summary' in ia._field_adaptors\n \n         ia.url = 'HTTP://scrapy.ORG'\n         self.assertEqual(ia.url, 'HTTP://SCRAPY.ORG')\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "scrapy#cbf6d76c5d98ab9f687f45040d00b67312ae5819", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 31 | Lines Deleted: 12 | Files Changed: 1 | Hunks: 11 | Methods Changed: 6 | Complexity Δ (Sum/Max): 6/6 | Churn Δ: 43 | Churn Cumulative: 798 | Contributors (this commit): 3 | Commits (past 90d): 7 | Contributors (cumulative): 3 | DMM Complexity: 1.0\n\nDIFF:\n@@ -5,9 +5,8 @@ Python Standard Library.\n This module must not depend on any module outside the Standard Library.\n \"\"\"\n \n-import time\n import copy\n-from heapq import heappush, heappop\n+from collections import deque, defaultdict\n \n class MultiValueDictKeyError(KeyError):\n     pass\n@@ -230,32 +229,52 @@ class CaselessDict(dict):\n         return dict.pop(self, self.normkey(key), *args)\n \n \n-class PriorityQueue(object):\n-    \"\"\"A simple priority queue\"\"\"\n \n+class PriorityQueue(object):\n+    \"\"\"\n+    Faster priority queue implementation, based on a dictionary of lists\n+    @author: Federico Feroldi <federico@cloudify.me>\n+    \"\"\"\n     def __init__(self):\n-        self.items = []\n+        self.items = defaultdict(deque)\n \n     def push(self, item, priority=0):\n-        heappush(self.items, (priority, time.time(), item))\n+        self.items[priority].appendleft(item)\n \n     def pop(self):\n-        priority, _, item = heappop(self.items)\n-        return item, priority\n+        priorities = self.items.keys()\n+        priorities.sort()\n+        \n+        for priority in priorities:\n+            if len(self.items[priority]) > 0:\n+                return (self.items[priority].pop(), priority)\n+            \n+        raise IndexError\n \n     def __len__(self):\n-        return len(self.items)\n+        totlen = 0\n+        for q in self.items.values():\n+            totlen += len(q)\n+        return totlen\n \n     def __iter__(self):\n-        return ((item, priority) for priority, _, item in self.items)\n+        priorities = self.items.keys()\n+        priorities.sort()\n+        \n+        for priority in priorities:\n+            for i in self.items[priority]:\n+                yield (i, priority)\n             \n     def __nonzero__(self):\n-        return bool(self.items)\n+        for q in self.items.values():\n+            if len(q) > 0:\n+                return True\n+        return False\n \n class PriorityStack(PriorityQueue):\n     \"\"\"A simple priority stack which is similar to PriorityQueue but pops its\n     items in reverse order (for the same priority)\"\"\"\n \n     def push(self, item, priority=0):\n-        heappush(self.items, (priority, -time.time(), item))\n+        self.items[priority].append(item)\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "scrapy#f9e5915fd4daf5a2a6fb7f71a1b8fa200da65a87", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 4 | Lines Deleted: 4 | Files Changed: 1 | Hunks: 4 | Methods Changed: 3 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 8 | Churn Cumulative: 229 | Contributors (this commit): 2 | Commits (past 90d): 15 | Contributors (cumulative): 2 | DMM Complexity: None\n\nDIFF:\n@@ -22,7 +22,7 @@ class TestAdaptor(BaseAdaptor):\n \n \n class DefaultedAdaptor(BaseAdaptor):\n-    default_adaptor = lambda v: v.title()\n+    default_adaptor = lambda v: v[:-1]\n \n \n class InheritDefaultAdaptor(DefaultedAdaptor):\n@@ -51,12 +51,12 @@ class ItemAdaptorTest(unittest.TestCase):\n         dta = DefaultedAdaptor()\n         assert dta.default_adaptor\n         dta.name = 'marta'\n-        assert dta.name == 'Marta'\n+        self.assertEqual(dta.name, 'mart')\n \n     def test_inheritdefaultadaptor(self):\n         ida = InheritDefaultAdaptor()\n         ida.name = 'marta'\n-        assert ida.name == 'Marta'\n+        assert ida.name == 'mart'\n \n     def test_inheritance(self):\n         class ChildTestAdaptor(TestAdaptor):\n@@ -101,7 +101,7 @@ class ItemAdaptorTest(unittest.TestCase):\n \n         dia = ChildAdaptorDefaulted()\n         dia.name = 'marta'\n-        self.assertEqual(dia.name, 'mARTA')\n+        self.assertEqual(dia.name, 'MART')\n \n     def test_multiplevaluedadaptor(self):\n         ma = MultiValuedItemAdaptor()\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "scrapy#63150e2ed41a5b5911767cf36a567ab5c171c20f", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 8 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 2/2 | Churn Δ: 8 | Churn Cumulative: 682 | Contributors (this commit): 4 | Commits (past 90d): 15 | Contributors (cumulative): 4 | DMM Complexity: 1.0\n\nDIFF:\n@@ -198,3 +198,11 @@ def string_camelcase(string):\n     \"\"\"\n     return CAMELCASE_INVALID_CHARS.sub('', string.title())\n \n+\n+def item_to_dict(item):\n+    \"\"\"Returns a dict representation of an item\"\"\"\n+    res = {}\n+    for field in item.fields:\n+        res[field] = getattr(item, field)\n+        \n+    return res\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "scrapy#c54a3fe7f6495c3b9190c548503d8cdc9d3c4147", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 0 | Lines Deleted: 7 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): -2/0 | Churn Δ: 7 | Churn Cumulative: 689 | Contributors (this commit): 4 | Commits (past 90d): 16 | Contributors (cumulative): 4 | DMM Complexity: 0.0\n\nDIFF:\n@@ -199,10 +199,3 @@ def string_camelcase(string):\n     return CAMELCASE_INVALID_CHARS.sub('', string.title())\n \n \n-def item_to_dict(item):\n-    \"\"\"Returns a dict representation of an item\"\"\"\n-    res = {}\n-    for field in item.fields:\n-        res[field] = getattr(item, field)\n-        \n-    return res\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "scrapy#fb3a2dab2f6931d9c0a043790fc3227624c7edc4", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 3 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 2 | Methods Changed: 3 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 4 | Churn Cumulative: 642 | Contributors (this commit): 3 | Commits (past 90d): 9 | Contributors (cumulative): 3 | DMM Complexity: 1.0\n\nDIFF:\n@@ -250,8 +250,10 @@ class ExecutionEngine(object):\n                 elif isinstance(item, Request):\n                     signals.send_catch_log(signal=signals.request_received, sender=self.__class__, request=item, spider=spider, response=response)\n                     self.crawl(request=item, spider=spider, priority=priority)\n+                elif item is None:\n+                    pass # may be next time.\n                 else:\n-                    log.msg(\"Spider must return Request or ScrapedItem objects, got '%s' while processing %s\" % (type(item).__name__, request), log.WARNING, domain=domain)\n+                    log.msg(\"Spider can return Request, ScrapedItem or None, got '%s' while processing %s\" % (type(item).__name__, request), log.WARNING, domain=domain)\n \n             class _ResultContainer(object):\n                 def append(self, item):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "scrapy#7b664a57b2f1af6f49dab2b2a6472100e380ab9a", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 3 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 644 | Contributors (this commit): 3 | Commits (past 90d): 10 | Contributors (cumulative): 3 | DMM Complexity: None\n\nDIFF:\n@@ -253,7 +253,7 @@ class ExecutionEngine(object):\n                 elif item is None:\n                     pass # may be next time.\n                 else:\n-                    log.msg(\"Spider can return Request, ScrapedItem or None, got '%s' while processing %s\" % (type(item).__name__, request), log.WARNING, domain=domain)\n+                    log.msg(\"Spider must return Request, ScrapedItem or None, got '%s' while processing %s\" % (type(item).__name__, request), log.WARNING, domain=domain)\n \n             class _ResultContainer(object):\n                 def append(self, item):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "scrapy#2951e8425fcdefa73062e200eb67d4c855e83fc5", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 111 | Lines Deleted: 53 | Files Changed: 2 | Hunks: 23 | Methods Changed: 12 | Complexity Δ (Sum/Max): 22/14 | Churn Δ: 164 | Churn Cumulative: 1032 | Contributors (this commit): 3 | Commits (past 90d): 11 | Contributors (cumulative): 5 | DMM Complexity: 0.36538461538461536\n\nDIFF:\n@@ -2,41 +2,75 @@ import unittest\n \n from scrapy.utils.datatypes import PriorityQueue, PriorityStack\n \n-class DatatypesTestCase(unittest.TestCase):\n+# (ITEM, PRIORITY)\n+INPUT = [(1, -5), (30, -1), (80, -3), (4, 1), (6, 3), (20, 0), (50, -1)]\n \n-    def test_priority_queue(self):\n+class PriorityQueueTestCase(unittest.TestCase):\n \n-        input = [('five', 5), ('three-1', 3), ('three-2', 3), ('six', 6), ('one', 1)]\n-        output = [('one', 1), ('three-1', 3), ('three-2', 3), ('five', 5), ('six', 6)]\n+    output = [(1, -5), (80, -3), (30, -1), (50, -1), (20, 0), (4, 1), (6, 3)]\n \n+    def test_popping(self):\n         pq = PriorityQueue()\n-        assert not bool(pq)\n-        for item, prio in input:\n-            pq.push(item, prio)\n-        out = []\n-        assert bool(pq)\n-        self.assertEqual(len(pq), len(input))\n+        for item, pr in INPUT:\n+            pq.push(item, pr)\n+        l = []\n         while pq:\n-            out.append(pq.pop())\n-        self.assertEqual(len(pq), 0)\n-        self.assertEqual(out, output)\n+            l.append(pq.pop())\n+        self.assertEquals(l, self.output)\n \n-    def test_priority_stack(self):\n+    def test_iter(self):\n+        pq = PriorityQueue()\n+        for item, pr in INPUT:\n+            pq.push(item, pr)\n+        result = [x for x in pq]\n+        self.assertEquals(result, self.output) \n     \n-        input = [('five', 5), ('three-1', 3), ('three-2', 3), ('six', 6), ('one', 1)]\n-        output = [('one', 1), ('three-2', 3), ('three-1', 3), ('five', 5), ('six', 6)]\n+    def test_nonzero(self):\n+        pq = PriorityQueue()\n+        pq.push(80, -1)\n+        pq.push(20, 0)\n+        pq.push(30, 1)\n \n+        pq.pop()\n+        self.assertEquals(bool(pq), True) \n+        pq.pop()\n+        self.assertEquals(bool(pq), True) \n+        pq.pop()\n+        self.assertEquals(bool(pq), False) \n+\n+    def test_len(self):\n+        pq = PriorityQueue()\n+        pq.push(80, -1)\n+        pq.push(20, 0)\n+        pq.push(30, 1)\n+\n+        self.assertEquals(len(pq), 3) \n+        pq.pop()\n+        self.assertEquals(len(pq), 2) \n+        pq.pop()\n+        self.assertEquals(len(pq), 1) \n+        pq.pop()\n+        self.assertEquals(len(pq), 0) \n+\n+class PriorityStackTestCase(unittest.TestCase):\n+\n+    output = [(1, -5), (80, -3), (50, -1), (30, -1), (20, 0), (4, 1), (6, 3)]\n+\n+    def test_popping(self):\n         pq = PriorityStack()\n-        assert not bool(pq)\n-        for item, prio in input:\n-            pq.push(item, prio)\n-        assert bool(pq)\n-        out = []\n-        self.assertEqual(len(pq), len(input))\n+        for item, pr in INPUT:\n+            pq.push(item, pr)\n+        l = []\n         while pq:\n-            out.append(pq.pop())\n-        self.assertEqual(len(pq), 0)\n-        self.assertEqual(out, output)\n+            l.append(pq.pop())\n+        self.assertEquals(l, self.output)\n+\n+    def test_iter(self):\n+        pq = PriorityStack()\n+        for item, pr in INPUT:\n+            pq.push(item, pr)\n+        result = [x for x in pq]\n+        self.assertEquals(result, self.output) \n     \n if __name__ == \"__main__\":\n     unittest.main()\n\n@@ -7,6 +7,7 @@ This module must not depend on any module outside the Standard Library.\n \n import copy\n from collections import deque, defaultdict\n+from itertools import chain\n \n class MultiValueDictKeyError(KeyError):\n     pass\n@@ -229,52 +230,75 @@ class CaselessDict(dict):\n         return dict.pop(self, self.normkey(key), *args)\n \n \n-\n class PriorityQueue(object):\n-    \"\"\"\n-    Faster priority queue implementation, based on a dictionary of lists\n-    @author: Federico Feroldi <federico@cloudify.me>\n-    \"\"\"\n+    \"\"\"Priority queue using a deque for priority 0\"\"\"\n+\n     def __init__(self):\n-        self.items = defaultdict(deque)\n+        self.negitems = defaultdict(deque)\n+        self.pzero = deque()\n+        self.positems = defaultdict(deque)\n \n     def push(self, item, priority=0):\n-        self.items[priority].appendleft(item)\n+        if priority == 0:\n+            self.pzero.appendleft(item)\n+        elif priority < 0:\n+            self.negitems[priority].appendleft(item)\n+        else:\n+            self.positems[priority].appendleft(item)\n \n     def pop(self):\n-        priorities = self.items.keys()\n+        if self.negitems:\n+            priorities = self.negitems.keys()\n             priorities.sort()\n-        \n             for priority in priorities:\n-            if len(self.items[priority]) > 0:\n-                return (self.items[priority].pop(), priority)\n-            \n-        raise IndexError\n+                deq = self.negitems[priority]\n+                if deq:\n+                    t = (deq.pop(), priority)\n+                    if not deq:\n+                        del self.negitems[priority]\n+                    return t\n+        elif self.pzero:\n+            return (self.pzero.pop(), 0)\n+        else:\n+            priorities = self.positems.keys()\n+            priorities.sort()\n+            for priority in priorities:\n+                deq = self.positems[priority]\n+                if deq:\n+                    t = (deq.pop(), priority)\n+                    if not deq:\n+                        del self.positems[priority]\n+                    return t\n+        raise IndexError(\"pop from an empty queue\")\n \n     def __len__(self):\n-        totlen = 0\n-        for q in self.items.values():\n-            totlen += len(q)\n-        return totlen\n+        total = sum(len(v) for v in self.negitems.values()) + \\\n+                len(self.pzero) + \\\n+                sum(len(v) for v in self.positems.values())\n+        return total\n \n     def __iter__(self):\n-        priorities = self.items.keys()\n-        priorities.sort()\n-        \n-        for priority in priorities:\n-            for i in self.items[priority]:\n-                yield (i, priority)\n+        gen_negs = ((i, priority) \n+                    for priority in sorted(self.negitems.keys())\n+                    for i in reversed(self.negitems[priority]))\n+        gen_zeros = ((item,0) for item in self.pzero)\n+        gen_pos = ((i, priority) \n+                    for priority in sorted(self.positems.keys())\n+                    for i in reversed(self.positems[priority]))\n+        return chain(gen_negs, gen_zeros, gen_pos)\n \n     def __nonzero__(self):\n-        for q in self.items.values():\n-            if len(q) > 0:\n-                return True\n-        return False\n+        return bool(self.negitems or self.pzero or self.positems)\n \n class PriorityStack(PriorityQueue):\n     \"\"\"A simple priority stack which is similar to PriorityQueue but pops its\n     items in reverse order (for the same priority)\"\"\"\n \n     def push(self, item, priority=0):\n-        self.items[priority].append(item)\n+        if priority == 0:\n+            self.pzero.append(item)\n+        elif priority < 0:\n+            self.negitems[priority].append(item)\n+        else:\n+            self.positems[priority].append(item)\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "scrapy#22c51638a89213f8872f43cbaa0e3a03f34439cf", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 410 | Lines Deleted: 0 | Files Changed: 3 | Hunks: 3 | Methods Changed: 12 | Complexity Δ (Sum/Max): 105/88 | Churn Δ: 410 | Churn Cumulative: 410 | Contributors (this commit): 1 | Commits (past 90d): 3 | Contributors (cumulative): 3 | DMM Complexity: 0.8558951965065502\n\nDIFF:\n@@ -0,0 +1,249 @@\n+from collections import deque, defaultdict\n+from heapq import heappush, heappop\n+import time\n+from itertools import chain\n+\n+\n+class PriorityQueue1(object):\n+    \"\"\"A simple priority queue\"\"\"\n+\n+    def __init__(self, size=1):\n+        self.items = []\n+\n+    def push(self, item, priority=0):\n+        heappush(self.items, (priority, time.time(), item))\n+\n+    def pop(self):\n+        priority, _, item = heappop(self.items)\n+        return item, priority\n+\n+    def __len__(self):\n+        return len(self.items)\n+\n+    def __iter__(self):\n+        return ((item, priority) for priority, _, item in self.items)\n+\n+    def __nonzero__(self):\n+        return bool(self.items)\n+\n+class PriorityQueue2(object):\n+    \"\"\"\n+    Faster priority queue implementation, based on a dictionary of lists\n+    @author: Federico Feroldi <federico@cloudify.me>\n+    \"\"\"\n+    def __init__(self, size=1):\n+        self.items = defaultdict(deque)\n+\n+    def push(self, item, priority=0):\n+        self.items[priority].appendleft(item)\n+\n+    def pop(self):\n+        priorities = self.items.keys()\n+        priorities.sort()\n+\n+        for priority in priorities:\n+            if len(self.items[priority]) > 0:\n+                return (self.items[priority].pop(), priority)\n+\n+        raise IndexError\n+\n+    def __len__(self):\n+        totlen = 0\n+        for q in self.items.values():\n+            totlen += len(q)\n+        return totlen\n+\n+    def __iter__(self):\n+        priorities = self.items.keys()\n+        priorities.sort()\n+\n+        for priority in priorities:\n+            for i in self.items[priority]:\n+                yield (i, priority)\n+\n+    def __nonzero__(self):\n+        for q in self.items.values():\n+            if len(q) > 0:\n+                return True\n+        return False\n+\n+class PriorityQueue3(object):\n+    \"\"\"Priority queue using a deque for priority 0\"\"\"\n+\n+    def __init__(self, size=1):\n+        self.negitems = []\n+        self.pzero = deque()\n+        self.positems = []\n+\n+    def push(self, item, priority=0):\n+        if priority == 0:\n+            self.pzero.appendleft(item)\n+        elif priority < 0:\n+            heappush(self.negitems, (priority, time.time(), item))\n+        else:\n+            heappush(self.positems, (priority, time.time(), item))\n+\n+    def pop(self):\n+        if self.negitems:\n+            priority, _, item = heappop(self.negitems)\n+            return item, priority\n+        elif self.pzero:\n+            return (self.pzero.pop(), 0)\n+        else:\n+            priority, _, item = heappop(self.positems)\n+            return item, priority\n+\n+    def __len__(self):\n+        return len(self.negitems) + len(self.pzero) + len(self.positems)\n+\n+    def __iter__(self):\n+        for priority, _, item in self.negitems:\n+            yield (item, priority)\n+        for item in self.pzero:\n+            yield (item, 0)\n+        for priority, _, item in self.positems:\n+            yield (item, priority)\n+\n+    def __nonzero__(self):\n+        return bool(self.negitems and self.pzero and self.positems)\n+\n+\n+#------------------------------------------------------------------------------\n+\n+class PriorityQueue4(object):\n+    \"\"\"Priority queue using a deque for priority 0\"\"\"\n+\n+    def __init__(self, size=1):\n+        self.negitems = defaultdict(deque)\n+        self.pzero = deque()\n+        self.positems = defaultdict(deque)\n+\n+    def push(self, item, priority=0):\n+        if priority == 0:\n+            self.pzero.appendleft(item)\n+        elif priority < 0:\n+            self.negitems[priority].appendleft(item)\n+        else:\n+            self.positems[priority].appendleft(item)\n+\n+    def pop(self):\n+        if self.negitems:\n+            priorities = self.negitems.keys()\n+            priorities.sort()\n+            for priority in priorities:\n+                deq = self.negitems[priority]\n+                if deq:\n+                    t = (deq.pop(), priority)\n+                    if not deq:\n+                        del self.negitems[priority]\n+                    return t\n+        elif self.pzero:\n+            return (self.pzero.pop(), 0)\n+        else:\n+            priorities = self.positems.keys()\n+            priorities.sort()\n+            for priority in priorities:\n+                deq = self.positems[priority]\n+                if deq:\n+                    t = (deq.pop(), priority)\n+                    if not deq:\n+                        del self.positems[priority]\n+                    return t\n+        raise IndexError(\"pop from an empty queue\")\n+\n+    def __len__(self):\n+        total = sum(len(v) for v in self.negitems.values()) + \\\n+                len(self.pzero) + \\\n+                sum(len(v) for v in self.positems.values())\n+        return total\n+\n+    def __iter__(self):\n+        gen_negs = ((i, priority) \n+                    for priority in sorted(self.negitems.keys())\n+                    for i in reversed(self.negitems[priority]))\n+        gen_zeros = ((item,0) for item in self.pzero)\n+        gen_pos = ((i, priority) \n+                    for priority in sorted(self.positems.keys())\n+                    for i in reversed(self.positems[priority]))\n+        return chain(gen_negs, gen_zeros, gen_pos)\n+\n+\n+    def __nonzero__(self):\n+        return bool(self.negitems or self.pzero or self.positems)\n+\n+#------------------------------------------------------------------------------\n+\n+class PriorityQueue5(object):\n+    \"\"\"Priority queue using a deque for priority 0\"\"\"\n+\n+    def __init__(self, size=1):\n+        # preallocate deques for a fixed number of priorities\n+        size = size if size % 2 else size + 1\n+        self.zero = size // 2\n+        self.priolist = [deque() for _ in range(size)]\n+\n+    def push(self, item, priority=0):\n+        self.priolist[priority + self.zero].appendleft(item)\n+\n+    def pop(self):\n+        for prio, queue in enumerate(self.priolist):\n+            if len(queue):\n+                final = prio - self.zero\n+                return (queue.pop(), final)\n+\n+        raise IndexError(\"pop from an empty queue\")\n+\n+    def __len__(self):\n+        return sum(len(v) for v in self.priolist)\n+\n+    def __iter__(self):\n+        for prio, queue in enumerate(self.priolist):\n+            final = prio - self.zero\n+            for i in reversed(queue):\n+                yield (i, final)\n+\n+    def __nonzero__(self):\n+        return bool(len(self))\n+\n+class PriorityQueue6(object):\n+    \"\"\"Priority queue using a deque for priority 0\"\"\"\n+\n+    def __init__(self, size=1):\n+        # preallocate deques for a fixed number of priorities\n+        size = size if size % 2 else size + 1\n+        self.zero = size // 2\n+        self.index = 0\n+        self.priolist = [deque() for _ in range(size)]\n+\n+    def push(self, item, priority=0):\n+        final = priority + self.zero\n+        if self.index > final:\n+            self.index = final\n+        self.priolist[final].appendleft(item)\n+\n+    def pop(self):\n+        cached = self.priolist[self.index]\n+        if len(cached):\n+            return (cached.pop(), self.index - self.zero)\n+\n+        for prio, queue in enumerate(self.priolist[self.index:]):\n+            if len(queue):\n+                final = prio + self.index - self.zero\n+                return (queue.pop(), final)\n+\n+        raise IndexError(\"pop from an empty queue\")\n+\n+    def __len__(self):\n+        return sum(len(v) for v in self.priolist)\n+\n+    def __iter__(self):\n+        for prio, queue in enumerate(self.priolist):\n+            final = prio - self.zero\n+            for i in reversed(queue):\n+                yield (i, final)\n+\n+    def __nonzero__(self):\n+        return bool(len(self))\n+\n+\n+\n\n@@ -0,0 +1,82 @@\n+import timeit\n+from pq_classes import *\n+\n+TESTCASES = [\n+       (\"heapq\", PriorityQueue1),\n+       (\"dict+deque\", PriorityQueue2),\n+       (\"deque+heapq\", PriorityQueue3),\n+       (\"deque+defaultdict+deque\", PriorityQueue4),\n+       ('list+deque', PriorityQueue5),\n+       ('list+deque+cache', PriorityQueue6),\n+       ]\n+\n+\n+stmt_single = \"\"\"\n+for n in xrange(%(pushpops)s):\n+    q.push(n)\n+\n+for n in xrange(%(pushpops)s):\n+    q.pop()\n+\"\"\"\n+\n+stmt_multi = \"\"\"\n+for n in xrange(%(pushpops)s):\n+    q.push(n, int(random.random() * %(priorities)s) - %(priorities)s / 2)\n+\n+for n in xrange(%(pushpops)s):\n+    q.pop()\n+\"\"\"\n+\n+setup_fmt = \"\"\"\n+import random\n+from __main__ import %(PriorityClass)s as PriorityQueue\n+q = PriorityQueue(%(priorities)i)\n+\"\"\"\n+\n+\n+def runtests(pushpops=50*1000, times=30, priorities=1):\n+    print \"\\n== With %s priorities ==\\n\" % priorities\n+    print \"pushpops = %s, times = %s\" % (pushpops, times)\n+\n+    stmt_fmt = stmt_multi if priorities > 1 else stmt_single\n+    stmt = stmt_fmt % {'priorities': priorities, 'pushpops': pushpops}\n+\n+    for name, cls in TESTCASES:\n+        setup = setup_fmt % {'PriorityClass': cls.__name__, 'priorities': priorities}\n+        t = timeit.Timer(stmt, setup)\n+        print \"%s implementation: %s\" % (name, t.timeit(number=times))\n+\n+if __name__ == '__main__':\n+    runtests()\n+    runtests(priorities=5)\n+    runtests(priorities=10)\n+    runtests(priorities=100)\n+\n+# Results (in seconds, on an intel core2 2.16ghz):\n+# == Without priorities ==\n+\n+# pushpops = 50000, times = 30\n+# heapq implementation: 7.7959010601\n+# dict+deque implementation: 5.6420109272\n+# deque+heapq implementation: 3.57563900948\n+\n+# == With 5 priorities ==\n+\n+# pushpops = 50000, times = 30\n+# heapq implementation: 9.83902192116\n+# dict+deque implementation: 9.21094298363\n+# deque+heapq implementation: 9.05321097374\n+\n+# == With 10 priorities ==\n+\n+# pushpops = 50000, times = 30\n+# heapq implementation: 9.97831392288\n+# dict+deque implementation: 11.9721341133\n+# deque+heapq implementation: 9.79048800468\n+\n+# == With 100 priorities ==\n+\n+# pushpops = 50000, times = 30\n+# heapq implementation: 10.4782910347\n+# dict+deque implementation: 64.6989660263\n+# deque+heapq implementation: 10.858932972\n\n@@ -0,0 +1,79 @@\n+import unittest\n+from pq_classes import PriorityQueue1, PriorityQueue2, PriorityQueue3, PriorityQueue4, PriorityQueue5, PriorityQueue6\n+\n+# (ITEM, PRIORITY)\n+INPUT = [(1, -5), (30, -1), (80, -3), (4, 1), (6, 3), (20, 0), (50, -1)]\n+OUTPUT = [(1, -5), (80, -3), (30, -1), (50, -1), (20, 0), (4, 1), (6, 3)]\n+\n+PRIOSIZE = reduce(max, (abs(i[1]) for i in INPUT + OUTPUT)) * 2\n+\n+class PriorityQueue1TestCase(unittest.TestCase):\n+    def setUp(self):\n+        self.PriorityQueue = PriorityQueue1\n+    \n+    def test_popping(self):\n+        pq = self.PriorityQueue(PRIOSIZE)\n+        for item, pr in INPUT:\n+            pq.push(item, pr)\n+        l = []\n+        while pq:\n+            l.append(pq.pop())\n+        self.assertEquals(l, OUTPUT)\n+\n+    def test_iter(self):\n+        pq = self.PriorityQueue(PRIOSIZE)\n+        for item, pr in INPUT:\n+            pq.push(item, pr)\n+        result = [x for x in pq]\n+        self.assertEquals(result, OUTPUT) \n+    \n+    def test_nonzero(self):\n+        pq = self.PriorityQueue(PRIOSIZE)\n+        pq.push(80, -1)\n+        pq.push(20, 0)\n+        pq.push(30, 1)\n+\n+        pq.pop()\n+        self.assertEquals(bool(pq), True) \n+        pq.pop()\n+        self.assertEquals(bool(pq), True) \n+        pq.pop()\n+        self.assertEquals(bool(pq), False) \n+\n+    def test_len(self):\n+        pq = self.PriorityQueue(PRIOSIZE)\n+        pq.push(80, -1)\n+        pq.push(20, 0)\n+        pq.push(30, 1)\n+\n+        self.assertEquals(len(pq), 3) \n+        pq.pop()\n+        self.assertEquals(len(pq), 2) \n+        pq.pop()\n+        self.assertEquals(len(pq), 1) \n+        pq.pop()\n+        self.assertEquals(len(pq), 0) \n+\n+class PriorityQueue2TestCase(PriorityQueue1TestCase):\n+    def setUp(self):\n+        self.PriorityQueue = PriorityQueue2\n+\n+class PriorityQueue3TestCase(PriorityQueue1TestCase):\n+    def setUp(self):\n+        self.PriorityQueue = PriorityQueue3\n+\n+class PriorityQueue4TestCase(PriorityQueue1TestCase):\n+    def setUp(self):\n+        self.PriorityQueue = PriorityQueue4\n+\n+class PriorityQueue5TestCase(PriorityQueue1TestCase):\n+    def setUp(self):\n+        self.PriorityQueue = PriorityQueue5\n+\n+class PriorityQueue6TestCase(PriorityQueue1TestCase):\n+    def setUp(self):\n+        self.PriorityQueue = PriorityQueue6\n+\n+if __name__ == '__main__':\n+    print \"\\n== Unit testing for every implementation ==\"\n+    unittest.main()\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "scrapy#e1c1865c2a797b994c838271436bee74da5dccaa", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 77 | Lines Deleted: 22 | Files Changed: 1 | Hunks: 15 | Methods Changed: 5 | Complexity Δ (Sum/Max): 4/4 | Churn Δ: 99 | Churn Cumulative: 181 | Contributors (this commit): 1 | Commits (past 90d): 2 | Contributors (cumulative): 1 | DMM Complexity: 1.0\n\nDIFF:\n@@ -1,6 +1,13 @@\n+from __future__ import with_statement\n+import os\n import timeit\n+import random\n+from optparse import OptionParser\n+from tempfile import mktemp\n from pq_classes import *\n \n+TESTID = os.getpid()\n+\n TESTCASES = [\n        (\"heapq\", PriorityQueue1),\n        (\"dict+deque\", PriorityQueue2),\n@@ -11,46 +18,94 @@ TESTCASES = [\n        ]\n \n \n-stmt_single = \"\"\"\n-for n in xrange(%(pushpops)s):\n-    q.push(n)\n+stmt_fmt = \"\"\"\n+for n, prio in enumerate(randomprio):\n+    q.push(n, prio)\n \n-for n in xrange(%(pushpops)s):\n-    q.pop()\n-\"\"\"\n-\n-stmt_multi = \"\"\"\n-for n in xrange(%(pushpops)s):\n-    q.push(n, int(random.random() * %(priorities)s) - %(priorities)s / 2)\n-\n-for n in xrange(%(pushpops)s):\n+try:\n+    while True:\n         q.pop()\n+except IndexError:\n+    pass\n \"\"\"\n \n setup_fmt = \"\"\"\n-import random\n+from collections import deque\n from __main__ import %(PriorityClass)s as PriorityQueue\n q = PriorityQueue(%(priorities)i)\n+\n+randomprio = deque()\n+with open('%(samplefile)s') as samples:\n+    for line in samples:\n+        prio = int(line.strip())\n+        randomprio.append(prio)\n \"\"\"\n \n+# def gen_random_priority(priorities):\n+#     return int(random.random() * priorities) - (priorities / 2)\n \n-def runtests(pushpops=50*1000, times=30, priorities=1):\n-    print \"\\n== With %s priorities ==\\n\" % priorities\n+def uniform_priority(priorities):\n+    return int(random.random() * priorities) - (priorities / 2)\n+\n+def normal_priority(priorities):\n+    prio = int(random.normalvariate(priorities/2, priorities/4)) - (priorities / 2)\n+    return min(max(prio, -priorities/2), priorities/2)\n+\n+\n+PRIORITY_DISTRIBUTIONS = {\n+        'uniform': uniform_priority,\n+        'normal': normal_priority,\n+        }\n+\n+\n+def gen_samples(count, priorities, priority_distribution=uniform_priority):\n+    fn = '/tmp/pq-%i-%i-%i' % (TESTID, priorities, count)\n+\n+    with open(fn, 'w') as samplefile:\n+        for n in xrange(count):\n+            prio = priority_distribution(priorities)\n+            samplefile.write('%i\\n' % prio)\n+    return fn\n+\n+def runtests(pushpops=50*1000, times=30, priorities=1, samplefile=None, priority_distribution=uniform_priority):\n+    samplefile = samplefile or gen_samples(pushpops, priorities)\n+\n+    print \"\\n== With %s priorities (%s) ==\\n\" % (priorities, samplefile)\n     print \"pushpops = %s, times = %s\" % (pushpops, times)\n \n-    stmt_fmt = stmt_multi if priorities > 1 else stmt_single\n-    stmt = stmt_fmt % {'priorities': priorities, 'pushpops': pushpops}\n \n+    stmt = stmt_fmt\n     for name, cls in TESTCASES:\n-        setup = setup_fmt % {'PriorityClass': cls.__name__, 'priorities': priorities}\n+        setup = setup_fmt % {\n+                'PriorityClass': cls.__name__,\n+                'priorities': priorities,\n+                'samplefile': samplefile,\n+                }\n         t = timeit.Timer(stmt, setup)\n         print \"%s implementation: %s\" % (name, t.timeit(number=times))\n \n+\n if __name__ == '__main__':\n-    runtests()\n-    runtests(priorities=5)\n-    runtests(priorities=10)\n-    runtests(priorities=100)\n+    o = OptionParser()\n+    o.add_option('-n', '--samples-count', type='int', default=50000, metavar='NUMBER',\n+            help='The max number or samples to generate')\n+    o.add_option('-r', '--retry-times', type='int', default=30, metavar='NUMBER',\n+            help='the times to retry each test')\n+    o.add_option('-s', '--samplefile', default=None, metavar='FILENAME',\n+            help='load samples from file, default: use sample generator')\n+    o.add_option('-p', '--priorities', default='1,3,5,10,100', metavar='CSV_PRIOLIST',\n+            help='a comma separated list of priorities to test')\n+    o.add_option('-d', '--priority-distribution', default='uniform', metavar='DISTRIBUTION',\n+            help='distribution used for random priority generator, default: uniform. possibles: %s' \\\n+                    % ','.join(PRIORITY_DISTRIBUTIONS.keys()))\n+\n+    opt, args = o.parse_args()\n+\n+    priolist = map(int, opt.priorities.split(','))\n+    distribution = PRIORITY_DISTRIBUTIONS[opt.priority_distribution]\n+    for prio in priolist:\n+        runtests(pushpops=opt.samples_count, priorities=prio, times=opt.retry_times,\n+                samplefile=opt.samplefile, priority_distribution=distribution)\n \n # Results (in seconds, on an intel core2 2.16ghz):\n # == Without priorities ==\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
