{"custom_id": "flask#78cd4161f0a264df89046b6324446b27011b0930", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 12 | Lines Deleted: 15 | Files Changed: 1 | Hunks: 6 | Methods Changed: 3 | Complexity Δ (Sum/Max): -1/0 | Churn Δ: 27 | Churn Cumulative: 1005 | Contributors (this commit): 7 | Commits (past 90d): 5 | Contributors (cumulative): 7 | DMM Complexity: 0.0\n\nDIFF:\n@@ -1180,8 +1180,9 @@ def test_test_app_proper_environ():\n     assert rv.data == b'Foo SubDomain'\n \n \n-def test_exception_propagation():\n-    def apprunner(configkey):\n+@pytest.mark.parametrize('config_key',\n+                         ['TESTING', 'PROPAGATE_EXCEPTIONS', 'DEBUG', None])\n+def test_exception_propagation(config_key):\n     app = flask.Flask(__name__)\n     app.config['LOGGER_HANDLER_POLICY'] = 'never'\n \n@@ -1189,26 +1190,22 @@ def test_exception_propagation():\n     def index():\n         1 // 0\n     c = app.test_client()\n+\n     if config_key is not None:\n         app.config[config_key] = True\n-            try:\n+        with pytest.raises(Exception):\n             c.get('/')\n-            except Exception:\n-                pass\n-            else:\n-                assert False, 'expected exception'\n+\n     else:\n         assert c.get('/').status_code == 500\n \n-    # we have to run this test in an isolated thread because if the\n-    # debug flag is set to true and an exception happens the context is\n-    # not torn down.  This causes other tests that run after this fail\n+    # If the debug flag is set to true and an exception happens the context\n+    # is not torn down.  This causes other tests that run after this fail\n     # when they expect no exception on the stack.\n-    for config_key in 'TESTING', 'PROPAGATE_EXCEPTIONS', 'DEBUG', None:\n-        t = Thread(target=apprunner, args=(config_key,))\n-        t.start()\n-        t.join()\n-\n+    while flask._request_ctx_stack.top is not None:\n+        flask._request_ctx_stack.pop()\n+    while flask._app_ctx_stack.top is not None:\n+        flask._app_ctx_stack.pop()\n \n def test_max_content_length():\n     app = flask.Flask(__name__)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#1577e1386e737eca69dbb6cfe6b8bf979f7b2944", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 15 | Lines Deleted: 12 | Files Changed: 1 | Hunks: 6 | Methods Changed: 3 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 27 | Churn Cumulative: 1032 | Contributors (this commit): 7 | Commits (past 90d): 6 | Contributors (cumulative): 7 | DMM Complexity: 1.0\n\nDIFF:\n@@ -1180,9 +1180,8 @@ def test_test_app_proper_environ():\n     assert rv.data == b'Foo SubDomain'\n \n \n-@pytest.mark.parametrize('config_key',\n-                         ['TESTING', 'PROPAGATE_EXCEPTIONS', 'DEBUG', None])\n-def test_exception_propagation(config_key):\n+def test_exception_propagation():\n+    def apprunner(configkey):\n         app = flask.Flask(__name__)\n         app.config['LOGGER_HANDLER_POLICY'] = 'never'\n \n@@ -1190,22 +1189,26 @@ def test_exception_propagation(config_key):\n         def index():\n             1 // 0\n         c = app.test_client()\n-\n         if config_key is not None:\n             app.config[config_key] = True\n-        with pytest.raises(Exception):\n+            try:\n                 c.get('/')\n-\n+            except Exception:\n+                pass\n+            else:\n+                assert False, 'expected exception'\n         else:\n             assert c.get('/').status_code == 500\n \n-    # If the debug flag is set to true and an exception happens the context\n-    # is not torn down.  This causes other tests that run after this fail\n+    # we have to run this test in an isolated thread because if the\n+    # debug flag is set to true and an exception happens the context is\n+    # not torn down.  This causes other tests that run after this fail\n     # when they expect no exception on the stack.\n-    while flask._request_ctx_stack.top is not None:\n-        flask._request_ctx_stack.pop()\n-    while flask._app_ctx_stack.top is not None:\n-        flask._app_ctx_stack.pop()\n+    for config_key in 'TESTING', 'PROPAGATE_EXCEPTIONS', 'DEBUG', None:\n+        t = Thread(target=apprunner, args=(config_key,))\n+        t.start()\n+        t.join()\n+\n \n def test_max_content_length():\n     app = flask.Flask(__name__)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#20f62e828b2ed100f7aa907b60880c8938593740", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 3 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 1034 | Contributors (this commit): 8 | Commits (past 90d): 7 | Contributors (cumulative): 8 | DMM Complexity: None\n\nDIFF:\n@@ -1181,7 +1181,7 @@ def test_test_app_proper_environ():\n \n \n def test_exception_propagation():\n-    def apprunner(configkey):\n+    def apprunner(config_key):\n         app = flask.Flask(__name__)\n         app.config['LOGGER_HANDLER_POLICY'] = 'never'\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#08ac3aa4e3739e20d385c4c2973893945f228470", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 16 | Lines Deleted: 1 | Files Changed: 2 | Hunks: 3 | Methods Changed: 2 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 17 | Churn Cumulative: 3981 | Contributors (this commit): 48 | Commits (past 90d): 8 | Contributors (cumulative): 52 | DMM Complexity: 1.0\n\nDIFF:\n@@ -157,6 +157,11 @@ class Flask(_PackageBoundObject):\n     #: :class:`~flask.Response` for more information.\n     response_class = Response\n \n+    #: The class that is used for the Jinja environment.\n+    #:\n+    #: .. versionadded:: 0.11\n+    jinja_env_class = Environment\n+\n     #: The class that is used for the :data:`~flask.g` instance.\n     #:\n     #: Example use cases for a custom class:\n@@ -680,7 +685,7 @@ class Flask(_PackageBoundObject):\n                 options['auto_reload'] = self.config['TEMPLATES_AUTO_RELOAD']\n             else:\n                 options['auto_reload'] = self.debug\n-        rv = Environment(self, **options)\n+        rv = self.jinja_env_class(self, **options)\n         rv.globals.update(\n             url_for=url_for,\n             get_flashed_messages=get_flashed_messages,\n\n@@ -361,3 +361,13 @@ def test_template_loader_debugging(test_apps):\n             app.config['EXPLAIN_TEMPLATE_LOADING'] = old_load_setting\n \n     assert len(called) == 1\n+\n+def test_custom_jinja_env():\n+    class CustomEnvironment(flask.templating.Environment):\n+        pass\n+\n+    class CustomFlask(flask.Flask):\n+        jinja_env_class = CustomEnvironment\n+\n+    app = CustomFlask(__name__)\n+    assert isinstance(app.jinja_env, CustomEnvironment)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#7126a22334c881101b5c5f8bdc00d008cb7229aa", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 24 | Lines Deleted: 10 | Files Changed: 1 | Hunks: 11 | Methods Changed: 6 | Complexity Δ (Sum/Max): 5/5 | Churn Δ: 34 | Churn Cumulative: 3872 | Contributors (this commit): 49 | Commits (past 90d): 21 | Contributors (cumulative): 49 | DMM Complexity: 1.0\n\nDIFF:\n@@ -8,14 +8,13 @@\n     :copyright: (c) 2015 by Armin Ronacher.\n     :license: BSD, see LICENSE for more details.\n \"\"\"\n-from collections import ChainMap\n-\n import os\n import sys\n from threading import Lock\n from datetime import timedelta\n from itertools import chain\n from functools import update_wrapper\n+from collections import Mapping\n \n from werkzeug.datastructures import ImmutableDict\n from werkzeug.routing import Map, Rule, RequestRedirect, BuildError\n@@ -34,7 +33,7 @@ from .templating import DispatchingJinjaLoader, Environment, \\\n      _default_template_ctx_processor\n from .signals import request_started, request_finished, got_request_exception, \\\n      request_tearing_down, appcontext_tearing_down\n-from ._compat import reraise, string_types, text_type, integer_types\n+from ._compat import reraise, string_types, text_type, integer_types, iterkeys\n \n # a lock used for logger initialization\n _logger_lock = Lock()\n@@ -76,7 +75,7 @@ def get_http_code(error_class_or_instance):\n     return None\n \n \n-class ExceptionHandlerDict(ChainMap):\n+class ExceptionHandlerDict(Mapping):\n     \"\"\"A dict storing exception handlers or falling back to the default ones\n     \n     Designed to be app.error_handler_spec[blueprint_or_none]\n@@ -86,12 +85,13 @@ class ExceptionHandlerDict(ChainMap):\n     Returns None if no handler is defined for blueprint or app\n     \"\"\"\n     def __init__(self, app, blueprint):\n+        super(ExceptionHandlerDict, self).__init__()\n         self.app = app\n-        init = super(ExceptionHandlerDict, self).__init__\n+        self.data = {}\n         if blueprint:  # fall back to app mapping\n-            init({}, app.error_handler_spec[None])\n+            self.fallback = app.error_handler_spec[None]\n         else:\n-            init({})\n+            self.fallback = {}\n     \n     def get_class(self, exc_class_or_code):\n         if isinstance(exc_class_or_code, integer_types):\n@@ -103,14 +103,28 @@ class ExceptionHandlerDict(ChainMap):\n         return exc_class\n     \n     def __contains__(self, e_or_c):\n-        return super(ExceptionHandlerDict, self).__contains__(self.get_class(e_or_c))\n+        clazz = self.get_class(e_or_c)\n+        return clazz in self.data or clazz in self.fallback\n     \n     def __getitem__(self, e_or_c):\n-        return super(ExceptionHandlerDict, self).__getitem__(self.get_class(e_or_c))\n+        clazz = self.get_class(e_or_c)\n+        item = self.data.get(clazz)\n+        if item is not None:\n+            return item\n+        elif len(self.fallback):\n+            return self.fallback[clazz]\n+        else:\n+            raise KeyError(e_or_c)\n     \n     def __setitem__(self, e_or_c, handler):\n         assert callable(handler)\n-        return super(ExceptionHandlerDict, self).__setitem__(self.get_class(e_or_c), handler)\n+        self.data[self.get_class(e_or_c)] = handler\n+    \n+    def __iter__(self):\n+        return iterkeys(self.data)\n+    \n+    def __len__(self):\n+        return len(self.data)\n     \n     def find_handler(self, ex_instance):\n         assert isinstance(ex_instance, Exception)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#a6c6cc18f5eab148cb15a65fe6543fb5f1272765", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 11 | Files Changed: 1 | Hunks: 2 | Methods Changed: 3 | Complexity Δ (Sum/Max): -4/0 | Churn Δ: 13 | Churn Cumulative: 3885 | Contributors (this commit): 49 | Commits (past 90d): 22 | Contributors (cumulative): 49 | DMM Complexity: 0.0\n\nDIFF:\n@@ -65,16 +65,6 @@ def setupmethod(f):\n     return update_wrapper(wrapper_func, f)\n \n \n-def get_http_code(error_class_or_instance):\n-    if (\n-        isinstance(error_class_or_instance, HTTPException) or\n-        isinstance(error_class_or_instance, type) and\n-        issubclass(error_class_or_instance, HTTPException)\n-    ):\n-        return error_class_or_instance.code\n-    return None\n-\n-\n class ExceptionHandlerDict(Mapping):\n     \"\"\"A dict storing exception handlers or falling back to the default ones\n     \n@@ -93,7 +83,8 @@ class ExceptionHandlerDict(Mapping):\n         else:\n             self.fallback = {}\n     \n-    def get_class(self, exc_class_or_code):\n+    @staticmethod\n+    def get_class(exc_class_or_code):\n         if isinstance(exc_class_or_code, integer_types):\n             # ensure that we register only exceptions as keys\n             exc_class = default_exceptions[exc_class_or_code]\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#aa4700c276999a002bd6ddf8c7d35993429ec2d7", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 5 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 6 | Churn Cumulative: 3891 | Contributors (this commit): 49 | Commits (past 90d): 23 | Contributors (cumulative): 49 | DMM Complexity: 0.0\n\nDIFF:\n@@ -1205,7 +1205,11 @@ class Flask(_PackageBoundObject):\n         :type code_or_exception: int|T<=Exception\n         :type f: callable\n         \"\"\"\n-        assert not isinstance(code_or_exception, HTTPException)  # old broken behavior\n+        if isinstance(code_or_exception, HTTPException):  # old broken behavior\n+            raise ValueError(\n+                'Tried to register a handler for an exception instance {0!r}. '\n+                'Handlers can only be registered for exception classes or HTTP error codes.'\n+                .format(code_or_exception))\n         \n         code = code_or_exception\n         is_code = isinstance(code_or_exception, integer_types)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#0e44cca8e32f17e78f73a127ebe8d8c627c3fe13", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 15 | Files Changed: 1 | Hunks: 3 | Methods Changed: 2 | Complexity Δ (Sum/Max): -4/0 | Churn Δ: 16 | Churn Cumulative: 3907 | Contributors (this commit): 49 | Commits (past 90d): 24 | Contributors (cumulative): 49 | DMM Complexity: 1.0\n\nDIFF:\n@@ -1211,22 +1211,8 @@ class Flask(_PackageBoundObject):\n                 'Handlers can only be registered for exception classes or HTTP error codes.'\n                 .format(code_or_exception))\n         \n-        code = code_or_exception\n-        is_code = isinstance(code_or_exception, integer_types)\n-        if not is_code:\n-            if issubclass(code_or_exception, HTTPException):\n-                code = code_or_exception.code\n-            else:\n-                code = None\n-        \n         handlers = self.error_handler_spec.setdefault(key, ExceptionHandlerDict(self, key))\n         \n-        if is_code:\n-            # TODO: why is this?\n-            assert code != 500 or key is None, \\\n-                'It is currently not possible to register a 500 internal ' \\\n-                'server error on a per-blueprint level.'\n-        \n         handlers[code_or_exception] = f\n \n     @setupmethod\n@@ -1551,7 +1537,7 @@ class Flask(_PackageBoundObject):\n         exc_type, exc_value, tb = sys.exc_info()\n \n         got_request_exception.send(self, exception=e)\n-        handler = self.error_handler_spec[None].get(500)\n+        handler = self._find_error_handler(InternalServerError())\n \n         if self.propagate_exceptions:\n             # if we want to repropagate the exception, we can attempt to\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#fd8e6b26f9ff59bc8bccd6bd251bee5838551ba8", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 156 | Lines Deleted: 70 | Files Changed: 2 | Hunks: 8 | Methods Changed: 30 | Complexity Δ (Sum/Max): 11/17 | Churn Δ: 226 | Churn Cumulative: 4133 | Contributors (this commit): 49 | Commits (past 90d): 26 | Contributors (cumulative): 50 | DMM Complexity: 1.0\n\nDIFF:\n@@ -65,70 +65,6 @@ def setupmethod(f):\n     return update_wrapper(wrapper_func, f)\n \n \n-class ExceptionHandlerDict(Mapping):\n-    \"\"\"A dict storing exception handlers or falling back to the default ones\n-    \n-    Designed to be app.error_handler_spec[blueprint_or_none]\n-    And hold a Exception → handler function mapping.\n-    Converts error codes to default HTTPException subclasses.\n-    \n-    Returns None if no handler is defined for blueprint or app\n-    \"\"\"\n-    def __init__(self, app, blueprint):\n-        super(ExceptionHandlerDict, self).__init__()\n-        self.app = app\n-        self.data = {}\n-        if blueprint:  # fall back to app mapping\n-            self.fallback = app.error_handler_spec[None]\n-        else:\n-            self.fallback = {}\n-    \n-    @staticmethod\n-    def get_class(exc_class_or_code):\n-        if isinstance(exc_class_or_code, integer_types):\n-            # ensure that we register only exceptions as keys\n-            exc_class = default_exceptions[exc_class_or_code]\n-        else:\n-            assert issubclass(exc_class_or_code, Exception)\n-            exc_class = exc_class_or_code\n-        return exc_class\n-    \n-    def __contains__(self, e_or_c):\n-        clazz = self.get_class(e_or_c)\n-        return clazz in self.data or clazz in self.fallback\n-    \n-    def __getitem__(self, e_or_c):\n-        clazz = self.get_class(e_or_c)\n-        item = self.data.get(clazz)\n-        if item is not None:\n-            return item\n-        elif len(self.fallback):\n-            return self.fallback[clazz]\n-        else:\n-            raise KeyError(e_or_c)\n-    \n-    def __setitem__(self, e_or_c, handler):\n-        assert callable(handler)\n-        self.data[self.get_class(e_or_c)] = handler\n-    \n-    def __iter__(self):\n-        return iterkeys(self.data)\n-    \n-    def __len__(self):\n-        return len(self.data)\n-    \n-    def find_handler(self, ex_instance):\n-        assert isinstance(ex_instance, Exception)\n-        \n-        for superclass in type(ex_instance).mro():\n-            if superclass is BaseException:\n-                return None\n-            handler = self.get(superclass)\n-            if handler is not None:\n-                return handler\n-        return None\n-\n-\n class Flask(_PackageBoundObject):\n     \"\"\"The flask object implements a WSGI application and acts as the central\n     object.  It is passed the name of the module or package of the\n@@ -429,7 +365,7 @@ class Flask(_PackageBoundObject):\n \n         # support for the now deprecated `error_handlers` attribute.  The\n         # :attr:`error_handler_spec` shall be used now.\n-        self._error_handlers = ExceptionHandlerDict(self, None)\n+        self._error_handlers = {}\n \n         #: A dictionary of all registered error handlers.  The key is ``None``\n         #: for error handlers active on the application, otherwise the key is\n@@ -1142,6 +1078,23 @@ class Flask(_PackageBoundObject):\n             return f\n         return decorator\n \n+    @staticmethod\n+    def _ensure_exc_class(exc_class_or_code):\n+        \"\"\"ensure that we register only exceptions as handler keys\"\"\"\n+        if isinstance(exc_class_or_code, integer_types):\n+            exc_class = default_exceptions[exc_class_or_code]\n+        elif isinstance(exc_class_or_code, type):\n+            exc_class = exc_class_or_code\n+        else:\n+            exc_class = type(exc_class_or_code)\n+        \n+        assert issubclass(exc_class, Exception)\n+        \n+        if issubclass(exc_class, HTTPException):\n+            return exc_class, exc_class.code\n+        else:\n+            return exc_class, None\n+    \n     @setupmethod\n     def errorhandler(self, code_or_exception):\n         \"\"\"A decorator that is used to register a function give a given\n@@ -1211,9 +1164,10 @@ class Flask(_PackageBoundObject):\n                 'Handlers can only be registered for exception classes or HTTP error codes.'\n                 .format(code_or_exception))\n         \n-        handlers = self.error_handler_spec.setdefault(key, ExceptionHandlerDict(self, key))\n+        exc_class, code = self._ensure_exc_class(code_or_exception)\n         \n-        handlers[code_or_exception] = f\n+        handlers = self.error_handler_spec.setdefault(key, {}).setdefault(code, {})\n+        handlers[exc_class] = f\n \n     @setupmethod\n     def template_filter(self, name=None):\n@@ -1456,10 +1410,29 @@ class Flask(_PackageBoundObject):\n \n     def _find_error_handler(self, e):\n         \"\"\"Finds a registered error handler for the request’s blueprint.\n-        If nether blueprint nor App has a suitable handler registered, returns None\n+        If neither blueprint nor App has a suitable handler registered, returns None\n         \"\"\"\n-        handlers = self.error_handler_spec.get(request.blueprint, self.error_handler_spec[None])\n-        return handlers.find_handler(e)\n+        exc_class, code = self._ensure_exc_class(e)\n+        \n+        def find_superclass(d):\n+            if not d:\n+                return None\n+            for superclass in exc_class.mro():\n+                if superclass is BaseException:\n+                    return None\n+                handler = d.get(superclass)\n+                if handler is not None:\n+                    return handler\n+            return None\n+        \n+        # try blueprint handlers\n+        handler = find_superclass(self.error_handler_spec.get(request.blueprint, {}).get(code))\n+        \n+        if handler is not None:\n+            return handler\n+        \n+        # fall back to app handlers\n+        return find_superclass(self.error_handler_spec[None].get(code))\n \n     def handle_http_exception(self, e):\n         \"\"\"Handles an HTTP exception.  By default this will invoke the\n\n@@ -0,0 +1,113 @@\n+# -*- coding: utf-8 -*-\n+from werkzeug.exceptions import Forbidden, InternalServerError\n+import flask\n+\n+\n+def test_error_handler_subclass():\n+\tapp = flask.Flask(__name__)\n+\n+\tclass ParentException(Exception):\n+\t\tpass\n+\n+\tclass ChildExceptionUnregistered(ParentException):\n+\t\tpass\n+\n+\tclass ChildExceptionRegistered(ParentException):\n+\t\tpass\n+\n+\t@app.errorhandler(ParentException)\n+\tdef parent_exception_handler(e):\n+\t\tassert isinstance(e, ParentException)\n+\t\treturn 'parent'\n+\n+\t@app.errorhandler(ChildExceptionRegistered)\n+\tdef child_exception_handler(e):\n+\t\tassert isinstance(e, ChildExceptionRegistered)\n+\t\treturn 'child-registered'\n+\n+\t@app.route('/parent')\n+\tdef parent_test():\n+\t\traise ParentException()\n+\n+\t@app.route('/child-unregistered')\n+\tdef unregistered_test():\n+\t\traise ChildExceptionUnregistered()\n+\n+\t@app.route('/child-registered')\n+\tdef registered_test():\n+\t\traise ChildExceptionRegistered()\n+\n+\n+\tc = app.test_client()\n+\n+\tassert c.get('/parent').data == b'parent'\n+\tassert c.get('/child-unregistered').data == b'parent'\n+\tassert c.get('/child-registered').data == b'child-registered'\n+\n+\n+def test_error_handler_http_subclass():\n+\tapp = flask.Flask(__name__)\n+\n+\tclass ForbiddenSubclassRegistered(Forbidden):\n+\t\tpass\n+\n+\tclass ForbiddenSubclassUnregistered(Forbidden):\n+\t\tpass\n+\n+\t@app.errorhandler(403)\n+\tdef code_exception_handler(e):\n+\t\tassert isinstance(e, Forbidden)\n+\t\treturn 'forbidden'\n+\n+\t@app.errorhandler(ForbiddenSubclassRegistered)\n+\tdef subclass_exception_handler(e):\n+\t\tassert isinstance(e, ForbiddenSubclassRegistered)\n+\t\treturn 'forbidden-registered'\n+\n+\t@app.route('/forbidden')\n+\tdef forbidden_test():\n+\t\traise Forbidden()\n+\n+\t@app.route('/forbidden-registered')\n+\tdef registered_test():\n+\t\traise ForbiddenSubclassRegistered()\n+\n+\t@app.route('/forbidden-unregistered')\n+\tdef unregistered_test():\n+\t\traise ForbiddenSubclassUnregistered()\n+\n+\n+\tc = app.test_client()\n+\n+\tassert c.get('/forbidden').data == b'forbidden'\n+\tassert c.get('/forbidden-unregistered').data == b'forbidden'\n+\tassert c.get('/forbidden-registered').data == b'forbidden-registered'\n+\n+\n+def test_error_handler_blueprint():\n+\tbp = flask.Blueprint('bp', __name__)\n+\t\n+\t@bp.errorhandler(500)\n+\tdef bp_exception_handler(e):\n+\t\treturn 'bp-error'\n+\t\n+\t@bp.route('/error')\n+\tdef bp_test():\n+\t\traise InternalServerError()\n+\t\n+\tapp = flask.Flask(__name__)\n+\t\n+\t@app.errorhandler(500)\n+\tdef app_exception_handler(e):\n+\t\treturn 'app-error'\n+\t\n+\t@app.route('/error')\n+\tdef app_test():\n+\t\traise InternalServerError()\n+\t\n+\tapp.register_blueprint(bp, url_prefix='/bp')\n+\t\n+\tc = app.test_client()\n+\t\n+\tassert c.get('/error').data == b'app-error'\n+\tassert c.get('/bp/error').data == b'bp-error'\n\\ No newline at end of file\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#8c054f04b87dc7d713495d91fdb4d52bdef0e643", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 5 | Lines Deleted: 6 | Files Changed: 1 | Hunks: 6 | Methods Changed: 5 | Complexity Δ (Sum/Max): -1/0 | Churn Δ: 11 | Churn Cumulative: 4031 | Contributors (this commit): 49 | Commits (past 90d): 26 | Contributors (cumulative): 49 | DMM Complexity: 0.0\n\nDIFF:\n@@ -1079,14 +1079,12 @@ class Flask(_PackageBoundObject):\n         return decorator\n \n     @staticmethod\n-    def _ensure_exc_class(exc_class_or_code):\n+    def _get_exc_class_and_code(exc_class_or_code):\n         \"\"\"ensure that we register only exceptions as handler keys\"\"\"\n         if isinstance(exc_class_or_code, integer_types):\n             exc_class = default_exceptions[exc_class_or_code]\n-        elif isinstance(exc_class_or_code, type):\n-            exc_class = exc_class_or_code\n         else:\n-            exc_class = type(exc_class_or_code)\n+            exc_class = exc_class_or_code\n         \n         assert issubclass(exc_class, Exception)\n         \n@@ -1164,7 +1162,7 @@ class Flask(_PackageBoundObject):\n                 'Handlers can only be registered for exception classes or HTTP error codes.'\n                 .format(code_or_exception))\n         \n-        exc_class, code = self._ensure_exc_class(code_or_exception)\n+        exc_class, code = self._get_exc_class_and_code(code_or_exception)\n         \n         handlers = self.error_handler_spec.setdefault(key, {}).setdefault(code, {})\n         handlers[exc_class] = f\n@@ -1412,7 +1410,7 @@ class Flask(_PackageBoundObject):\n         \"\"\"Finds a registered error handler for the request’s blueprint.\n         If neither blueprint nor App has a suitable handler registered, returns None\n         \"\"\"\n-        exc_class, code = self._ensure_exc_class(e)\n+        exc_class, code = self._get_exc_class_and_code(type(e))\n         \n         def find_superclass(d):\n             if not d:\n@@ -1422,6 +1420,7 @@ class Flask(_PackageBoundObject):\n                     return None\n                 handler = d.get(superclass)\n                 if handler is not None:\n+                    d[exc_class] = handler  # cache for next time exc_class is raised\n                     return handler\n             return None\n         \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#b31252db55cfac4605ad917d34eaa55fff248a38", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 6 | Lines Deleted: 6 | Files Changed: 1 | Hunks: 5 | Methods Changed: 4 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 12 | Churn Cumulative: 4043 | Contributors (this commit): 49 | Commits (past 90d): 8 | Contributors (cumulative): 49 | DMM Complexity: None\n\nDIFF:\n@@ -1080,7 +1080,7 @@ class Flask(_PackageBoundObject):\n \n     @staticmethod\n     def _get_exc_class_and_code(exc_class_or_code):\n-        \"\"\"ensure that we register only exceptions as handler keys\"\"\"\n+        \"\"\"Ensure that we register only exceptions as handler keys\"\"\"\n         if isinstance(exc_class_or_code, integer_types):\n             exc_class = default_exceptions[exc_class_or_code]\n         else:\n@@ -1412,15 +1412,15 @@ class Flask(_PackageBoundObject):\n         \"\"\"\n         exc_class, code = self._get_exc_class_and_code(type(e))\n         \n-        def find_superclass(d):\n-            if not d:\n+        def find_superclass(handler_map):\n+            if not handler_map:\n                 return None\n-            for superclass in exc_class.mro():\n+            for superclass in exc_class.__mro__:\n                 if superclass is BaseException:\n                     return None\n-                handler = d.get(superclass)\n+                handler = handler_map.get(superclass)\n                 if handler is not None:\n-                    d[exc_class] = handler  # cache for next time exc_class is raised\n+                    handler_map[exc_class] = handler  # cache for next time exc_class is raised\n                     return handler\n             return None\n         \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#7d506f2408520ecb21025f93d9ece00431004501", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 22 | Lines Deleted: 12 | Files Changed: 1 | Hunks: 7 | Methods Changed: 3 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 34 | Churn Cumulative: 4077 | Contributors (this commit): 49 | Commits (past 90d): 9 | Contributors (cumulative): 49 | DMM Complexity: 1.0\n\nDIFF:\n@@ -14,7 +14,7 @@ from threading import Lock\n from datetime import timedelta\n from itertools import chain\n from functools import update_wrapper\n-from collections import Mapping\n+from collections import Mapping, deque\n \n from werkzeug.datastructures import ImmutableDict\n from werkzeug.routing import Map, Rule, RequestRedirect, BuildError\n@@ -1412,26 +1412,36 @@ class Flask(_PackageBoundObject):\n         \"\"\"\n         exc_class, code = self._get_exc_class_and_code(type(e))\n \n-        def find_superclass(handler_map):\n+        def find_handler(handler_map):\n             if not handler_map:\n-                return None\n-            for superclass in exc_class.__mro__:\n-                if superclass is BaseException:\n-                    return None\n-                handler = handler_map.get(superclass)\n+                return\n+            queue = deque(exc_class.__mro__)\n+            # Protect from geniuses who might create circular references in\n+            # __mro__\n+            done = set()\n+\n+            while True:\n+                cls = queue.popleft()\n+                if cls in done:\n+                    continue\n+                done.add(cls)\n+                handler = handler_map.get(cls)\n                 if handler is not None:\n-                    handler_map[exc_class] = handler  # cache for next time exc_class is raised\n+                    # cache for next time exc_class is raised\n+                    handler_map[exc_class] = handler\n                     return handler\n-            return None\n+\n+                queue.extend(cls.__mro__)\n \n         # try blueprint handlers\n-        handler = find_superclass(self.error_handler_spec.get(request.blueprint, {}).get(code))\n-        \n+        handler = find_handler(self.error_handler_spec\n+                               .get(request.blueprint, {})\n+                               .get(code))\n         if handler is not None:\n             return handler\n \n         # fall back to app handlers\n-        return find_superclass(self.error_handler_spec[None].get(code))\n+        return find_handler(self.error_handler_spec[None].get(code))\n \n     def handle_http_exception(self, e):\n         \"\"\"Handles an HTTP exception.  By default this will invoke the\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#0bac2ade9154b4c1a267990238e2ab84931a0cb4", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 0 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 2 | Methods Changed: 2 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 115 | Contributors (this commit): 2 | Commits (past 90d): 1 | Contributors (cumulative): 2 | DMM Complexity: None\n\nDIFF:\n@@ -37,7 +37,6 @@ def test_error_handler_subclass():\n     def registered_test():\n         raise ChildExceptionRegistered()\n \n-\n     c = app.test_client()\n \n     assert c.get('/parent').data == b'parent'\n@@ -76,7 +75,6 @@ def test_error_handler_http_subclass():\n     def unregistered_test():\n         raise ForbiddenSubclassUnregistered()\n \n-\n     c = app.test_client()\n \n     assert c.get('/forbidden').data == b'forbidden'\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#1b7fad37167095f4c1981ed7987254ff5c6de6c0", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 3 | Lines Deleted: 3 | Files Changed: 1 | Hunks: 2 | Methods Changed: 3 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 6 | Churn Cumulative: 128 | Contributors (this commit): 4 | Commits (past 90d): 1 | Contributors (cumulative): 4 | DMM Complexity: None\n\nDIFF:\n@@ -57,10 +57,10 @@ def create_logger(app):\n     Logger = getLoggerClass()\n \n     class DebugLogger(Logger):\n-        def getEffectiveLevel(x):\n-            if x.level == 0 and app.debug:\n+        def getEffectiveLevel(self):\n+            if self.level == 0 and app.debug:\n                 return DEBUG\n-            return Logger.getEffectiveLevel(x)\n+            return Logger.getEffectiveLevel(self)\n \n     class DebugHandler(StreamHandler):\n         def emit(self, record):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#2de525c720bea58c088decedd89bab5914e39a7e", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 4 | Lines Deleted: 4 | Files Changed: 2 | Hunks: 6 | Methods Changed: 2 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 8 | Churn Cumulative: 468 | Contributors (this commit): 16 | Commits (past 90d): 2 | Contributors (cumulative): 20 | DMM Complexity: None\n\nDIFF:\n@@ -9,8 +9,8 @@\n     :license: BSD, see LICENSE for more details.\n \"\"\"\n \n-import imp\n import os\n+import types\n import errno\n \n from werkzeug.utils import import_string\n@@ -123,7 +123,7 @@ class Config(dict):\n            `silent` parameter.\n         \"\"\"\n         filename = os.path.join(self.root_path, filename)\n-        d = imp.new_module('config')\n+        d = types.ModuleType('config')\n         d.__file__ = filename\n         try:\n             with open(filename) as config_file:\n\n@@ -15,9 +15,9 @@\n     :copyright: (c) 2015 by Armin Ronacher.\n     :license: BSD, see LICENSE for more details.\n \"\"\"\n+import types\n import sys\n import os\n-import imp\n \n \n class ExtensionImporter(object):\n@@ -118,7 +118,7 @@ class ExtensionImporter(object):\n \n def activate():\n     import flask\n-    ext_module = imp.new_module('flask.ext')\n+    ext_module = types.ModuleType('flask.ext')\n     ext_module.__path__ = []\n     flask.ext = sys.modules['flask.ext'] = ext_module\n     importer = ExtensionImporter(['flask_%s', 'flaskext.%s'], 'flask.ext')\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#be45a608e38a16766eb568a05b39becee2cd572b", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 3 | Churn Cumulative: 4080 | Contributors (this commit): 50 | Commits (past 90d): 5 | Contributors (cumulative): 50 | DMM Complexity: None\n\nDIFF:\n@@ -1408,7 +1408,8 @@ class Flask(_PackageBoundObject):\n \n     def _find_error_handler(self, e):\n         \"\"\"Finds a registered error handler for the request’s blueprint.\n-        If neither blueprint nor App has a suitable handler registered, returns None\n+        Otherwise falls back to the app, returns None if not a suitable\n+        handler is found.\n         \"\"\"\n         exc_class, code = self._get_exc_class_and_code(type(e))\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#0d19fa0a061d91f0a6fec5cc60af4a4c1b46aa9b", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 2 | Files Changed: 2 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 2147 | Contributors (this commit): 38 | Commits (past 90d): 3 | Contributors (cumulative): 45 | DMM Complexity: None\n\nDIFF:\n@@ -814,7 +814,7 @@ class _PackageBoundObject(object):\n     @property\n     def has_static_folder(self):\n         \"\"\"This is ``True`` if the package bound object's container has a\n-        folder named ``'static'``.\n+        folder for static files.\n \n         .. versionadded:: 0.5\n         \"\"\"\n\n@@ -85,7 +85,7 @@ class JSONEncoder(_json.JSONEncoder):\n \n class JSONDecoder(_json.JSONDecoder):\n     \"\"\"The default JSON decoder.  This one does not change the behavior from\n-    the default simplejson encoder.  Consult the :mod:`json` documentation\n+    the default simplejson decoder.  Consult the :mod:`json` documentation\n     for more information.  This decoder is not only used for the load\n     functions of this module but also :attr:`~flask.Request`.\n     \"\"\"\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#348bf52188b9f7bef1096d8fe70edf2e62ea04a8", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 30 | Lines Deleted: 1 | Files Changed: 2 | Hunks: 2 | Methods Changed: 7 | Complexity Δ (Sum/Max): 5/5 | Churn Δ: 31 | Churn Cumulative: 4226 | Contributors (this commit): 51 | Commits (past 90d): 8 | Contributors (cumulative): 54 | DMM Complexity: 1.0\n\nDIFF:\n@@ -1421,7 +1421,7 @@ class Flask(_PackageBoundObject):\n             # __mro__\n             done = set()\n \n-            while True:\n+            while queue:\n                 cls = queue.popleft()\n                 if cls in done:\n                     continue\n\n@@ -3,6 +3,35 @@ from werkzeug.exceptions import Forbidden, InternalServerError\n import flask\n \n \n+def test_error_handler_no_match():\n+    app = flask.Flask(__name__)\n+\n+    class CustomException(Exception):\n+        pass\n+\n+    @app.errorhandler(CustomException)\n+    def custom_exception_handler(e):\n+        assert isinstance(e, CustomException)\n+        return 'custom'\n+\n+    @app.errorhandler(500)\n+    def handle_500(e):\n+        return type(e).__name__\n+\n+    @app.route('/custom')\n+    def custom_test():\n+        raise CustomException()\n+\n+    @app.route('/keyerror')\n+    def key_error():\n+        raise KeyError()\n+\n+    c = app.test_client()\n+\n+    assert c.get('/custom').data == b'custom'\n+    assert c.get('/keyerror').data == b'KeyError'\n+\n+\n def test_error_handler_subclass():\n     app = flask.Flask(__name__)\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#2446ca63a8d840a35ea4eac02672b24a6fcf406f", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 3 | Lines Deleted: 3 | Files Changed: 3 | Hunks: 3 | Methods Changed: 2 | Complexity Δ (Sum/Max): -4/0 | Churn Δ: 6 | Churn Cumulative: 5187 | Contributors (this commit): 66 | Commits (past 90d): 9 | Contributors (cumulative): 82 | DMM Complexity: None\n\nDIFF:\n@@ -159,7 +159,7 @@ class Flask(_PackageBoundObject):\n \n     #: The class that is used for the Jinja environment.\n     #:\n-    #: .. versionadded:: 0.11\n+    #: .. versionadded:: 1.0\n     jinja_env_class = Environment\n \n     #: The class that is used for the :data:`~flask.g` instance.\n\n@@ -408,7 +408,7 @@ class Blueprint(_PackageBoundObject):\n         application-wide function of the :class:`~flask.Flask` object but\n         for error handlers limited to this blueprint.\n \n-        .. versionadded:: 0.11\n+        .. versionadded:: 1.0\n         \"\"\"\n         self.record_once(lambda s: s.app._register_error_handler(\n             self.name, code_or_exception, f))\n\n@@ -113,7 +113,7 @@ class Request(RequestBase):\n         is considered to include JSON data if the mimetype is\n         :mimetype:`application/json` or :mimetype:`application/*+json`.\n \n-        .. versionadded:: 0.11\n+        .. versionadded:: 1.0\n         \"\"\"\n         mt = self.mimetype\n         if mt == 'application/json':\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#d40288496c18d86d16f8aad144e8cf57c46dd3bf", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 21 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 3 | Complexity Δ (Sum/Max): 3/3 | Churn Δ: 21 | Churn Cumulative: 402 | Contributors (this commit): 8 | Commits (past 90d): 1 | Contributors (cumulative): 8 | DMM Complexity: 1.0\n\nDIFF:\n@@ -269,3 +269,24 @@ except ImportError, e:\n     pygments_style = 'tango'\n     html_theme = 'default'\n     html_theme_options = {}\n+\n+\n+# unwrap decorators\n+def unwrap_decorators():\n+    import sphinx.util.inspect as inspect\n+    import functools\n+\n+    old_getargspec = inspect.getargspec\n+    def getargspec(x):\n+        return old_getargspec(getattr(x, '_original_function', x))\n+    inspect.getargspec = getargspec\n+\n+    old_update_wrapper = functools.update_wrapper\n+    def update_wrapper(wrapper, wrapped, *a, **kw):\n+        rv = old_update_wrapper(wrapper, wrapped, *a, **kw)\n+        rv._original_function = wrapped\n+        return rv\n+    functools.update_wrapper = update_wrapper\n+\n+unwrap_decorators()\n+del unwrap_decorators\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#d13a1b363e1065de98f44fe0446b570ce078007e", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 3 | Lines Deleted: 3 | Files Changed: 2 | Hunks: 3 | Methods Changed: 2 | Complexity Δ (Sum/Max): 4/4 | Churn Δ: 6 | Churn Cumulative: 4353 | Contributors (this commit): 51 | Commits (past 90d): 10 | Contributors (cumulative): 55 | DMM Complexity: None\n\nDIFF:\n@@ -160,7 +160,7 @@ class Flask(_PackageBoundObject):\n     #: The class that is used for the Jinja environment.\n     #:\n     #: .. versionadded:: 1.0\n-    jinja_env_class = Environment\n+    jinja_environment = Environment\n \n     #: The class that is used for the :data:`~flask.g` instance.\n     #:\n@@ -685,7 +685,7 @@ class Flask(_PackageBoundObject):\n                 options['auto_reload'] = self.config['TEMPLATES_AUTO_RELOAD']\n             else:\n                 options['auto_reload'] = self.debug\n-        rv = self.jinja_env_class(self, **options)\n+        rv = self.jinja_environment(self, **options)\n         rv.globals.update(\n             url_for=url_for,\n             get_flashed_messages=get_flashed_messages,\n\n@@ -367,7 +367,7 @@ def test_custom_jinja_env():\n         pass\n \n     class CustomFlask(flask.Flask):\n-        jinja_env_class = CustomEnvironment\n+        jinja_environment = CustomEnvironment\n \n     app = CustomFlask(__name__)\n     assert isinstance(app.jinja_env, CustomEnvironment)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#805692108ae973281d793250ca883cc1412ab08d", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 8 | Lines Deleted: 8 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 16 | Churn Cumulative: 1810 | Contributors (this commit): 34 | Commits (past 90d): 5 | Contributors (cumulative): 34 | DMM Complexity: None\n\nDIFF:\n@@ -445,14 +445,14 @@ def send_file(filename_or_fp, mimetype=None, as_attachment=False,\n     .. versionchanged:: 0.9\n        cache_timeout pulls its default from application config, when None.\n \n-    :param filename_or_fp: the filename of the file to send.  This is\n-                           relative to the :attr:`~Flask.root_path` if a\n-                           relative path is specified.\n-                           Alternatively a file object might be provided\n-                           in which case ``X-Sendfile`` might not work and\n-                           fall back to the traditional method.  Make sure\n-                           that the file pointer is positioned at the start\n-                           of data to send before calling :func:`send_file`.\n+    :param filename_or_fp: the filename of the file to send in `latin-1`.\n+                           This is relative to the :attr:`~Flask.root_path`\n+                           if a relative path is specified.\n+                           Alternatively a file object might be provided in\n+                           which case ``X-Sendfile`` might not work and fall\n+                           back to the traditional method.  Make sure that the\n+                           file pointer is positioned at the start of data to\n+                           send before calling :func:`send_file`.\n     :param mimetype: the mimetype of the file if provided, otherwise\n                      auto detection happens.\n     :param as_attachment: set to ``True`` if you want to send this file with\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#bc4c1777e9aaee1c404ab06dc92893da21f2cea7", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 3 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 1814 | Contributors (this commit): 34 | Commits (past 90d): 2 | Contributors (cumulative): 34 | DMM Complexity: None\n\nDIFF:\n@@ -798,7 +798,9 @@ class _PackageBoundObject(object):\n             return os.path.join(self.root_path, self._static_folder)\n     def _set_static_folder(self, value):\n         self._static_folder = value\n-    static_folder = property(_get_static_folder, _set_static_folder)\n+    static_folder = property(_get_static_folder, _set_static_folder, doc='''\n+    The absolute path to the configured static folder.\n+    ''')\n     del _get_static_folder, _set_static_folder\n \n     def _get_static_url_path(self):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#c65b32ba1d71c95d165f173f8681bfc0f6e1eca2", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 1128 | Contributors (this commit): 8 | Commits (past 90d): 1 | Contributors (cumulative): 8 | DMM Complexity: None\n\nDIFF:\n@@ -1,6 +1,6 @@\n # -*- coding: utf-8 -*-\n \"\"\"\n-    flask.run\n+    flask.cli\n     ~~~~~~~~~\n \n     A simple command line application to run flask apps.\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
