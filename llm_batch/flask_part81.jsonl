{"custom_id": "flask#205c943deda542b0c0df2f1b9ce3bbe72d80eef8", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): -2/0 | Churn Δ: 2 | Churn Cumulative: 799 | Contributors (this commit): 19 | Commits (past 90d): 2 | Contributors (cumulative): 19 | DMM Complexity: None\n\nDIFF:\n@@ -170,7 +170,7 @@ def has_request_context():\n                 self.remote_addr = remote_addr\n \n     Alternatively you can also just test any of the context bound objects\n-    (such as :class:`request` or :class:`g` for truthness)::\n+    (such as :class:`request` or :class:`g`) for truthness::\n \n         class User(db.Model):\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#d23b160e6df5d13e7db7a5e53afab6db306efe3c", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): -3/0 | Churn Δ: 2 | Churn Cumulative: 2679 | Contributors (this commit): 58 | Commits (past 90d): 4 | Contributors (cumulative): 58 | DMM Complexity: None\n\nDIFF:\n@@ -276,7 +276,7 @@ def url_for(endpoint, **values):\n     :param values: the variable arguments of the URL rule\n     :param _external: if set to ``True``, an absolute URL is generated. Server\n       address can be changed via ``SERVER_NAME`` configuration variable which\n-      defaults to `localhost`.\n+      falls back to the `Host` header, then to the IP and port of the request.\n     :param _scheme: a string specifying the desired URL scheme. The `_external`\n       parameter must be set to ``True`` or a :exc:`ValueError` is raised. The default\n       behavior uses the same scheme as the current request, or\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#ac78da0bb02fc5c07c896a77d3fc2b32e7924407", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 0 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 1 | Churn Cumulative: 854 | Contributors (this commit): 21 | Commits (past 90d): 2 | Contributors (cumulative): 21 | DMM Complexity: None\n\nDIFF:\n@@ -10,7 +10,6 @@\n     :license: BSD, see LICENSE for more details.\n \"\"\"\n from functools import update_wrapper\n-from werkzeug.urls import url_join\n \n from .helpers import _PackageBoundObject, _endpoint_from_view_func\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#e2f4b53396f4676978f86492dae5d3952446df89", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 3016 | Contributors (this commit): 38 | Commits (past 90d): 2 | Contributors (cumulative): 38 | DMM Complexity: None\n\nDIFF:\n@@ -644,8 +644,8 @@ def show_server_banner(env, debug, app_import_path, eager_loading):\n \n     if env == 'production':\n         click.secho(\n-            '   WARNING: Do not use the development server in a production'\n-            ' environment.', fg='red')\n+            '   WARNING: This is a development server. '\n+            'Do not use it in a production deployment.', fg='red')\n         click.secho('   Use a production WSGI server instead.', dim=True)\n \n     if debug is not None:\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#99660cc40984015cbbcd27d1cdc19376b2536443", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 352 | Contributors (this commit): 13 | Commits (past 90d): 2 | Contributors (cumulative): 13 | DMM Complexity: None\n\nDIFF:\n@@ -10,7 +10,7 @@\n     :license: BSD, see LICENSE for more details.\n \"\"\"\n \n-__version__ = '1.0.3.dev'\n+__version__ = '1.0.3'\n \n # utilities we import from Werkzeug and Jinja2 that are unused\n # in the module but are exported as public interface.\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#ad709be46e660b76263a50bfecdb390f0863a90c", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 27 | Lines Deleted: 0 | Files Changed: 2 | Hunks: 3 | Methods Changed: 3 | Complexity Δ (Sum/Max): 6/4 | Churn Δ: 27 | Churn Cumulative: 5397 | Contributors (this commit): 71 | Commits (past 90d): 5 | Contributors (cumulative): 90 | DMM Complexity: 1.0\n\nDIFF:\n@@ -1055,6 +1055,8 @@ class _PackageBoundObject(object):\n                          subfolders use forward slashes as separator.\n         :param mode: resource file opening mode, default is 'rb'.\n         \"\"\"\n+        if mode == 'rt':\n+            mode = 'r'\n         if mode not in (\"r\", \"rb\"):\n             raise ValueError(\"Resources can only be opened for reading\")\n         return open(os.path.join(self.root_path, resource), mode)\n\n@@ -1014,6 +1014,7 @@ class TestSafeJoin(object):\n                 print(flask.safe_join(*args))\n \n \n+\n class TestHelpers(object):\n     @pytest.mark.parametrize(\n         \"debug, expected_flag, expected_default_flag\",\n@@ -1060,3 +1061,27 @@ class TestHelpers(object):\n             assert rv.status_code == 200\n             assert rv.data == b\"Hello\"\n             assert rv.mimetype == \"text/html\"\n+\n+    @pytest.mark.parametrize('mode', [\n+        'r',\n+        'rb',\n+        'rt'\n+    ])\n+    def test_open_resource(self, mode):\n+        app = flask.Flask(__name__)\n+        with app.open_resource('static/index.html', mode) as f:\n+            assert '<h1>Hello World!</h1>' in str(f.read())\n+\n+    @pytest.mark.parametrize('mode', [\n+        'w',\n+        'x',\n+        'a',\n+        'b',\n+        't',\n+        '+'\n+    ])\n+    def test_open_resource_exceptions(self, mode):\n+        app = flask.Flask(__name__)\n+        with pytest.raises(ValueError):\n+            app.open_resource('static/index.html', mode)\n+\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#6f703a564c97b034eb0e98419595b7fa32d3562a", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 11 | Lines Deleted: 21 | Files Changed: 2 | Hunks: 8 | Methods Changed: 3 | Complexity Δ (Sum/Max): -1/0 | Churn Δ: 32 | Churn Cumulative: 5429 | Contributors (this commit): 71 | Commits (past 90d): 6 | Contributors (cumulative): 90 | DMM Complexity: 0.0\n\nDIFF:\n@@ -1053,12 +1053,12 @@ class _PackageBoundObject(object):\n \n         :param resource: the name of the resource.  To access resources within\n                          subfolders use forward slashes as separator.\n-        :param mode: resource file opening mode, default is 'rb'.\n+        :param mode: Open file in this mode. Only reading is supported,\n+            valid values are \"r\" (or \"rt\") and \"rb\".\n         \"\"\"\n-        if mode == 'rt':\n-            mode = 'r'\n-        if mode not in (\"r\", \"rb\"):\n+        if mode not in {\"r\", \"rt\", \"rb\"}:\n             raise ValueError(\"Resources can only be opened for reading\")\n+\n         return open(os.path.join(self.root_path, resource), mode)\n \n \n\n@@ -1062,26 +1062,16 @@ class TestHelpers(object):\n             assert rv.data == b\"Hello\"\n             assert rv.mimetype == \"text/html\"\n \n-    @pytest.mark.parametrize('mode', [\n-        'r',\n-        'rb',\n-        'rt'\n-    ])\n+    @pytest.mark.parametrize(\"mode\", (\"r\", \"rb\", \"rt\"))\n     def test_open_resource(self, mode):\n         app = flask.Flask(__name__)\n-        with app.open_resource('static/index.html', mode) as f:\n-            assert '<h1>Hello World!</h1>' in str(f.read())\n \n-    @pytest.mark.parametrize('mode', [\n-        'w',\n-        'x',\n-        'a',\n-        'b',\n-        't',\n-        '+'\n-    ])\n+        with app.open_resource(\"static/index.html\", mode) as f:\n+            assert \"<h1>Hello World!</h1>\" in str(f.read())\n+\n+    @pytest.mark.parametrize(\"mode\", (\"w\", \"x\", \"a\", \"r+\"))\n     def test_open_resource_exceptions(self, mode):\n         app = flask.Flask(__name__)\n-        with pytest.raises(ValueError):\n-            app.open_resource('static/index.html', mode)\n \n+        with pytest.raises(ValueError):\n+            app.open_resource(\"static/index.html\", mode)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#6dbcbdee3553683215d9e50b59834cb9af3aebd3", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 2 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 1732 | Contributors (this commit): 15 | Commits (past 90d): 1 | Contributors (cumulative): 15 | DMM Complexity: None\n\nDIFF:\n@@ -18,6 +18,7 @@ extensions = [\n     \"sphinx.ext.intersphinx\",\n     \"sphinxcontrib.log_cabinet\",\n     \"pallets_sphinx_themes\",\n+    \"sphinx_issues\",\n ]\n intersphinx_mapping = {\n     \"python\": (\"https://docs.python.org/3/\", None),\n@@ -29,6 +30,7 @@ intersphinx_mapping = {\n     \"wtforms\": (\"https://wtforms.readthedocs.io/en/stable/\", None),\n     \"blinker\": (\"https://pythonhosted.org/blinker/\", None),\n }\n+issues_github_path = \"pallets/flask\"\n \n # HTML -----------------------------------------------------------------\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#1f3923a999e3b4430ea76727e07fb062b24d6a61", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 23 | Lines Deleted: 2 | Files Changed: 2 | Hunks: 4 | Methods Changed: 4 | Complexity Δ (Sum/Max): 5/3 | Churn Δ: 25 | Churn Cumulative: 697 | Contributors (this commit): 19 | Commits (past 90d): 4 | Contributors (cumulative): 25 | DMM Complexity: 0.29411764705882354\n\nDIFF:\n@@ -120,6 +120,10 @@ class MethodViewType(type):\n         if \"methods\" not in d:\n             methods = set()\n \n+            for base in bases:\n+                if getattr(base, \"methods\", None):\n+                    methods.update(base.methods)\n+\n             for key in http_method_funcs:\n                 if hasattr(cls, key):\n                     methods.add(key.upper())\n\n@@ -10,12 +10,11 @@\n \"\"\"\n \n import pytest\n+from werkzeug.http import parse_set_header\n \n import flask\n import flask.views\n \n-from werkzeug.http import parse_set_header\n-\n \n def common_test(app):\n     c = app.test_client()\n@@ -199,6 +198,24 @@ def test_endpoint_override(app):\n     common_test(app)\n \n \n+def test_methods_var_inheritance(app, client):\n+    class BaseView(flask.views.MethodView):\n+        methods = [\"GET\", \"PROPFIND\"]\n+\n+    class ChildView(BaseView):\n+        def get(self):\n+            return \"GET\"\n+\n+        def propfind(self):\n+            return \"PROPFIND\"\n+\n+    app.add_url_rule(\"/\", view_func=ChildView.as_view(\"index\"))\n+\n+    assert client.get(\"/\").data == b\"GET\"\n+    assert client.open(\"/\", method=\"PROPFIND\").data == b\"PROPFIND\"\n+    assert ChildView.methods == {\"PROPFIND\", \"GET\"}\n+\n+\n def test_multiple_inheritance(app, client):\n     class GetView(flask.views.MethodView):\n         def get(self):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#af3c24c7dff239b2f1c9765bce9bef46525294bc", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 6040 | Contributors (this commit): 96 | Commits (past 90d): 2 | Contributors (cumulative): 96 | DMM Complexity: None\n\nDIFF:\n@@ -299,7 +299,7 @@ class Flask(_PackageBoundObject):\n     json_decoder = json.JSONDecoder\n \n     #: Options that are passed directly to the Jinja2 environment.\n-    jinja_options = ImmutableDict(\n+    jinja_options = dict(\n         extensions=[\"jinja2.ext.autoescape\", \"jinja2.ext.with_\"]\n     )\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#957f48a98dd7d598c55a521967a2fddcd12a4efd", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 22 | Lines Deleted: 10 | Files Changed: 1 | Hunks: 5 | Methods Changed: 2 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 32 | Churn Cumulative: 6072 | Contributors (this commit): 96 | Commits (past 90d): 3 | Contributors (cumulative): 96 | DMM Complexity: None\n\nDIFF:\n@@ -298,10 +298,16 @@ class Flask(_PackageBoundObject):\n     #: .. versionadded:: 0.10\n     json_decoder = json.JSONDecoder\n \n-    #: Options that are passed directly to the Jinja2 environment.\n-    jinja_options = dict(\n-        extensions=[\"jinja2.ext.autoescape\", \"jinja2.ext.with_\"]\n-    )\n+    #: Options that are passed to the Jinja environment in\n+    #: :meth:`create_jinja_environment`. Changing these options after\n+    #: the environment is created (accessing :attr:`jinja_env`) will\n+    #: have no effect.\n+    #:\n+    #: .. versionchanged:: 1.1.0\n+    #:     This is a ``dict`` instead of an ``ImmutableDict`` to allow\n+    #:     easier configuration.\n+    #:\n+    jinja_options = {\"extensions\": [\"jinja2.ext.autoescape\", \"jinja2.ext.with_\"]}\n \n     #: Default configuration parameters.\n     default_config = ImmutableDict(\n@@ -662,7 +668,12 @@ class Flask(_PackageBoundObject):\n \n     @locked_cached_property\n     def jinja_env(self):\n-        \"\"\"The Jinja2 environment used to load templates.\"\"\"\n+        \"\"\"The Jinja environment used to load templates.\n+\n+        The environment is created the first time this property is\n+        accessed. Changing :attr:`jinja_options` after that will have no\n+        effect.\n+        \"\"\"\n         return self.create_jinja_environment()\n \n     @property\n@@ -739,15 +750,16 @@ class Flask(_PackageBoundObject):\n     del _get_templates_auto_reload, _set_templates_auto_reload\n \n     def create_jinja_environment(self):\n-        \"\"\"Creates the Jinja2 environment based on :attr:`jinja_options`\n-        and :meth:`select_jinja_autoescape`.  Since 0.7 this also adds\n-        the Jinja2 globals and filters after initialization.  Override\n-        this function to customize the behavior.\n+        \"\"\"Create the Jinja environment based on :attr:`jinja_options`\n+        and the various Jinja-related methods of the app. Changing\n+        :attr:`jinja_options` after this will have no effect. Also adds\n+        Flask-related globals and filters to the environment.\n \n-        .. versionadded:: 0.5\n         .. versionchanged:: 0.11\n            ``Environment.auto_reload`` set in accordance with\n            ``TEMPLATES_AUTO_RELOAD`` configuration option.\n+\n+        .. versionadded:: 0.5\n         \"\"\"\n         options = dict(self.jinja_options)\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#8590d65a57ad57c99a82fdf4e1c57921d7e1bdcd", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 10 | Lines Deleted: 130 | Files Changed: 3 | Hunks: 6 | Methods Changed: 12 | Complexity Δ (Sum/Max): -20/0 | Churn Δ: 140 | Churn Cumulative: 4712 | Contributors (this commit): 68 | Commits (past 90d): 9 | Contributors (cumulative): 88 | DMM Complexity: 0.3382352941176471\n\nDIFF:\n@@ -11,99 +11,17 @@\n \n from werkzeug.exceptions import BadRequest\n from werkzeug.wrappers import Request as RequestBase, Response as ResponseBase\n+from werkzeug.wrappers.json import JSONMixin as _JSONMixin\n \n from flask import json\n from flask.globals import current_app\n \n \n-class JSONMixin(object):\n-    \"\"\"Common mixin for both request and response objects to provide JSON\n-    parsing capabilities.\n-\n-    .. versionadded:: 1.0\n-    \"\"\"\n-\n-    _cached_json = (Ellipsis, Ellipsis)\n-\n-    @property\n-    def is_json(self):\n-        \"\"\"Check if the mimetype indicates JSON data, either\n-        :mimetype:`application/json` or :mimetype:`application/*+json`.\n-\n-        .. versionadded:: 0.11\n-        \"\"\"\n-        mt = self.mimetype\n-        return (\n-            mt == \"application/json\"\n-            or (mt.startswith(\"application/\"))\n-            and mt.endswith(\"+json\")\n-        )\n-\n-    @property\n-    def json(self):\n-        \"\"\"This will contain the parsed JSON data if the mimetype indicates\n-        JSON (:mimetype:`application/json`, see :meth:`is_json`), otherwise it\n-        will be ``None``.\n-        \"\"\"\n-        return self.get_json()\n-\n-    def _get_data_for_json(self, cache):\n-        return self.get_data(cache=cache)\n-\n-    def get_json(self, force=False, silent=False, cache=True):\n-        \"\"\"Parse and return the data as JSON. If the mimetype does not\n-        indicate JSON (:mimetype:`application/json`, see\n-        :meth:`is_json`), this returns ``None`` unless ``force`` is\n-        true. If parsing fails, :meth:`on_json_loading_failed` is called\n-        and its return value is used as the return value.\n-\n-        :param force: Ignore the mimetype and always try to parse JSON.\n-        :param silent: Silence parsing errors and return ``None``\n-            instead.\n-        :param cache: Store the parsed JSON to return for subsequent\n-            calls.\n-        \"\"\"\n-        if cache and self._cached_json[silent] is not Ellipsis:\n-            return self._cached_json[silent]\n-\n-        if not (force or self.is_json):\n-            return None\n-\n-        data = self._get_data_for_json(cache=cache)\n-\n-        try:\n-            rv = json.loads(data)\n-        except ValueError as e:\n-            if silent:\n-                rv = None\n-                if cache:\n-                    normal_rv, _ = self._cached_json\n-                    self._cached_json = (normal_rv, rv)\n-            else:\n-                rv = self.on_json_loading_failed(e)\n-                if cache:\n-                    _, silent_rv = self._cached_json\n-                    self._cached_json = (rv, silent_rv)\n-        else:\n-            if cache:\n-                self._cached_json = (rv, rv)\n-\n-        return rv\n+class JSONMixin(_JSONMixin):\n+    json_module = json\n \n     def on_json_loading_failed(self, e):\n-        \"\"\"Called if :meth:`get_json` parsing fails and isn't silenced. If\n-        this method returns a value, it is used as the return value for\n-        :meth:`get_json`. The default implementation raises a\n-        :class:`BadRequest` exception.\n-\n-        .. versionchanged:: 0.10\n-           Raise a :exc:`BadRequest` error instead of returning an error\n-           message as JSON. If you want that behavior you can add it by\n-           subclassing.\n-\n-        .. versionadded:: 0.8\n-        \"\"\"\n-        if current_app is not None and current_app.debug:\n+        if current_app and current_app.debug:\n             raise BadRequest(\"Failed to decode JSON object: {0}\".format(e))\n \n         raise BadRequest()\n\n@@ -36,7 +36,7 @@ setup(\n     platforms=\"any\",\n     python_requires=\">=2.7,!=3.0.*,!=3.1.*,!=3.2.*,!=3.3.*\",\n     install_requires=[\n-        \"Werkzeug>=0.14\",\n+        \"Werkzeug>=0.15\",\n         \"Jinja2>=2.10.1\",\n         \"itsdangerous>=0.24\",\n         \"click>=5.1\",\n\n@@ -92,33 +92,9 @@ class TestJSON(object):\n         assert json.detect_encoding(data) == encoding\n         assert json.loads(data) == value\n \n-    def test_ignore_cached_json(self, app):\n-        with app.test_request_context(\n-            \"/\", method=\"POST\", data=\"malformed\", content_type=\"application/json\"\n-        ):\n-            assert flask.request.get_json(silent=True, cache=True) is None\n-            with pytest.raises(BadRequest):\n-                flask.request.get_json(silent=False, cache=False)\n-\n-    def test_different_silent_on_bad_request(self, app):\n-        with app.test_request_context(\n-            \"/\", method=\"POST\", data=\"malformed\", content_type=\"application/json\"\n-        ):\n-            assert flask.request.get_json(silent=True) is None\n-            with pytest.raises(BadRequest):\n-                flask.request.get_json(silent=False)\n-\n-    def test_different_silent_on_normal_request(self, app):\n-        with app.test_request_context(\"/\", method=\"POST\", json={\"foo\": \"bar\"}):\n-            silent_rv = flask.request.get_json(silent=True)\n-            normal_rv = flask.request.get_json(silent=False)\n-            assert silent_rv is normal_rv\n-            assert normal_rv[\"foo\"] == \"bar\"\n-\n-    def test_post_empty_json_adds_exception_to_response_content_in_debug(\n-        self, app, client\n-    ):\n-        app.config[\"DEBUG\"] = True\n+    @pytest.mark.parametrize(\"debug\", (True, False))\n+    def test_bad_request_debug_message(self, app, client, debug):\n+        app.config[\"DEBUG\"] = debug\n         app.config[\"TRAP_BAD_REQUEST_ERRORS\"] = False\n \n         @app.route(\"/json\", methods=[\"POST\"])\n@@ -128,22 +104,8 @@ class TestJSON(object):\n \n         rv = client.post(\"/json\", data=None, content_type=\"application/json\")\n         assert rv.status_code == 400\n-        assert b\"Failed to decode JSON object\" in rv.data\n-\n-    def test_post_empty_json_wont_add_exception_to_response_if_no_debug(\n-        self, app, client\n-    ):\n-        app.config[\"DEBUG\"] = False\n-        app.config[\"TRAP_BAD_REQUEST_ERRORS\"] = False\n-\n-        @app.route(\"/json\", methods=[\"POST\"])\n-        def post_json():\n-            flask.request.get_json()\n-            return None\n-\n-        rv = client.post(\"/json\", data=None, content_type=\"application/json\")\n-        assert rv.status_code == 400\n-        assert b\"Failed to decode JSON object\" not in rv.data\n+        contains = b\"Failed to decode JSON object\" in rv.data\n+        assert contains == debug\n \n     def test_json_bad_requests(self, app, client):\n         @app.route(\"/json\", methods=[\"POST\"])\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#e0afff0e92a3c46e5de17e75b76ca1332d45497d", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 17 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): -1/0 | Churn Δ: 18 | Churn Cumulative: 3034 | Contributors (this commit): 39 | Commits (past 90d): 3 | Contributors (cumulative): 39 | DMM Complexity: 0.0\n\nDIFF:\n@@ -907,23 +907,7 @@ debug mode.\n \n \n def main(as_module=False):\n-    args = sys.argv[1:]\n-\n-    if as_module:\n-        this_module = \"flask\"\n-\n-        if sys.version_info < (2, 7):\n-            this_module += \".cli\"\n-\n-        name = \"python -m \" + this_module\n-\n-        # Python rewrites \"python -m flask\" to the path to the file in argv.\n-        # Restore the original command so that the reloader works.\n-        sys.argv = [\"-m\", this_module] + args\n-    else:\n-        name = None\n-\n-    cli.main(args=args, prog_name=name)\n+    cli.main(prog_name=\"python -m flask\" if as_module else None)\n \n \n if __name__ == \"__main__\":\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#2039e2e3b62897e14790c652c92625ee9b200245", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 13 | Lines Deleted: 2 | Files Changed: 3 | Hunks: 3 | Methods Changed: 3 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 15 | Churn Cumulative: 11013 | Contributors (this commit): 120 | Commits (past 90d): 9 | Contributors (cumulative): 146 | DMM Complexity: 1.0\n\nDIFF:\n@@ -587,7 +587,7 @@ class Flask(_PackageBoundObject):\n                 bool(static_host) == host_matching\n             ), \"Invalid static_host/host_matching combination\"\n             self.add_url_rule(\n-                self.static_url_path + \"/<path:filename>\",\n+                self.static_url_path.rstrip(\"/\") + \"/<path:filename>\",\n                 endpoint=\"static\",\n                 host=static_host,\n                 view_func=self.send_static_file,\n\n@@ -198,7 +198,7 @@ class Blueprint(_PackageBoundObject):\n \n         if self.has_static_folder:\n             state.add_url_rule(\n-                self.static_url_path + \"/<path:filename>\",\n+                self.static_url_path.rstrip(\"/\") + \"/<path:filename>\",\n                 view_func=self.send_static_file,\n                 endpoint=\"static\",\n             )\n\n@@ -1399,6 +1399,17 @@ def test_static_url_path():\n         assert flask.url_for(\"static\", filename=\"index.html\") == \"/foo/index.html\"\n \n \n+def test_static_url_path_with_ending_slash():\n+    app = flask.Flask(__name__, static_url_path=\"/foo/\")\n+    app.testing = True\n+    rv = app.test_client().get(\"/foo/index.html\")\n+    assert rv.status_code == 200\n+    rv.close()\n+\n+    with app.test_request_context():\n+        assert flask.url_for(\"static\", filename=\"index.html\") == \"/foo/index.html\"\n+\n+\n def test_static_route_with_host_matching():\n     app = flask.Flask(__name__, host_matching=True, static_host=\"example.com\")\n     c = app.test_client()\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#6af14f058b6ef09214dc0e5d81902ed5b4ad12a0", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 24 | Lines Deleted: 5 | Files Changed: 2 | Hunks: 5 | Methods Changed: 2 | Complexity Δ (Sum/Max): 3/2 | Churn Δ: 29 | Churn Cumulative: 4389 | Contributors (this commit): 29 | Commits (past 90d): 6 | Contributors (cumulative): 32 | DMM Complexity: 0.0\n\nDIFF:\n@@ -20,6 +20,10 @@ from jinja2 import Markup\n # depend anyways.\n from itsdangerous import json as _json\n \n+try:\n+    import dataclasses\n+except ImportError:\n+    dataclasses = None\n \n # Figure out if simplejson escapes slashes.  This behavior was changed\n # from one version to another without reason.\n@@ -54,11 +58,15 @@ def _wrap_writer_for_text(fp, encoding):\n \n \n class JSONEncoder(_json.JSONEncoder):\n-    \"\"\"The default Flask JSON encoder.  This one extends the default simplejson\n-    encoder by also supporting ``datetime`` objects, ``UUID`` as well as\n-    ``Markup`` objects which are serialized as RFC 822 datetime strings (same\n-    as the HTTP date format).  In order to support more data types override the\n-    :meth:`default` method.\n+    \"\"\"The default Flask JSON encoder. This one extends the default\n+    encoder by also supporting ``datetime``, ``UUID``, ``dataclasses``,\n+    and ``Markup`` objects.\n+\n+    ``datetime`` objects are serialized as RFC 822 datetime strings.\n+    This is the same as the HTTP date format.\n+\n+    In order to support more data types, override the :meth:`default`\n+    method.\n     \"\"\"\n \n     def default(self, o):\n@@ -84,6 +92,8 @@ class JSONEncoder(_json.JSONEncoder):\n             return http_date(o.timetuple())\n         if isinstance(o, uuid.UUID):\n             return str(o)\n+        if dataclasses and dataclasses.is_dataclass(o):\n+            return dataclasses.asdict(o)\n         if hasattr(o, \"__html__\"):\n             return text_type(o.__html__())\n         return _json.JSONEncoder.default(self, o)\n\n@@ -10,6 +10,7 @@\n \"\"\"\n \n import re\n+import sys\n import time\n import uuid\n from datetime import datetime\n@@ -1289,6 +1290,14 @@ def test_jsonify_mimetype(app, req_ctx):\n     assert rv.mimetype == \"application/vnd.api+json\"\n \n \n+@pytest.mark.skipif(sys.version_info < (3, 7), reason=\"requires Python >= 3.7\")\n+def test_json_dump_dataclass(app, req_ctx):\n+    from dataclasses import make_dataclass\n+    Data = make_dataclass(\"Data\", [(\"name\", str)])\n+    value = flask.json.dumps(Data(\"Flask\"), app=app)\n+    value = flask.json.loads(value, app=app)\n+    assert value == {\"name\": \"Flask\"}\n+\n def test_jsonify_args_and_kwargs_check(app, req_ctx):\n     with pytest.raises(TypeError) as e:\n         flask.jsonify(\"fake args\", kwargs=\"fake\")\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#2a2a11b0634df4932eb0b4113009759ce4d1754a", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 7 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 8 | Churn Cumulative: 6082 | Contributors (this commit): 98 | Commits (past 90d): 10 | Contributors (cumulative): 98 | DMM Complexity: None\n\nDIFF:\n@@ -350,6 +350,12 @@ class Flask(_PackageBoundObject):\n     #: .. versionadded:: 0.7\n     url_rule_class = Rule\n \n+    #: The map object to use for storing the URL rules and routing\n+    #: configuration parameters. Defaults to :class:`werkzeug.routing.Map`.\n+    #:\n+    #: .. versionadded:: 1.1.0\n+    url_map_class = Map\n+\n     #: the test client that is used with when `test_client` is used.\n     #:\n     #: .. versionadded:: 0.7\n@@ -567,7 +573,7 @@ class Flask(_PackageBoundObject):\n         #:\n         #:    app = Flask(__name__)\n         #:    app.url_map.converters['list'] = ListConverter\n-        self.url_map = Map()\n+        self.url_map = self.url_map_class()\n \n         self.url_map.host_matching = host_matching\n         self.subdomain_matching = subdomain_matching\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#e1cc16f8bea15f11f63eacaa6089cd6e6b8b1965", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 12 | Lines Deleted: 8 | Files Changed: 2 | Hunks: 5 | Methods Changed: 3 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 20 | Churn Cumulative: 10194 | Contributors (this commit): 112 | Commits (past 90d): 17 | Contributors (cumulative): 128 | DMM Complexity: None\n\nDIFF:\n@@ -972,7 +972,8 @@ class Flask(_PackageBoundObject):\n             sn_host, _, sn_port = server_name.partition(\":\")\n \n         host = host or sn_host or _host\n-        port = int(port or sn_port or _port)\n+        # pick the first value that's not None (0 is allowed)\n+        port = int(next((p for p in (port, sn_port) if p is not None), _port))\n \n         options.setdefault(\"use_reloader\", self.debug)\n         options.setdefault(\"use_debugger\", self.debug)\n\n@@ -1916,21 +1916,24 @@ def test_run_server_port(monkeypatch, app):\n \n \n @pytest.mark.parametrize(\n-    \"host,port,expect_host,expect_port\",\n+    \"host,port,server_name,expect_host,expect_port\",\n     (\n-        (None, None, \"pocoo.org\", 8080),\n-        (\"localhost\", None, \"localhost\", 8080),\n-        (None, 80, \"pocoo.org\", 80),\n-        (\"localhost\", 80, \"localhost\", 80),\n+        (None, None, \"pocoo.org:8080\", \"pocoo.org\", 8080),\n+        (\"localhost\", None, \"pocoo.org:8080\", \"localhost\", 8080),\n+        (None, 80, \"pocoo.org:8080\", \"pocoo.org\", 80),\n+        (\"localhost\", 80, \"pocoo.org:8080\", \"localhost\", 80),\n+        (\"localhost\", 0, \"localhost:8080\", \"localhost\", 0),\n+        (None, None, \"localhost:8080\", \"localhost\", 8080),\n+        (None, None, \"localhost:0\", \"localhost\", 0),\n     ),\n )\n-def test_run_from_config(monkeypatch, host, port, expect_host, expect_port, app):\n+def test_run_from_config(monkeypatch, host, port, server_name, expect_host, expect_port, app):\n     def run_simple_mock(hostname, port, *args, **kwargs):\n         assert hostname == expect_host\n         assert port == expect_port\n \n     monkeypatch.setattr(werkzeug.serving, \"run_simple\", run_simple_mock)\n-    app.config[\"SERVER_NAME\"] = \"pocoo.org:8080\"\n+    app.config[\"SERVER_NAME\"] = server_name\n     app.run(host, port)\n \n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#db8cb31f2b2c39c1b0800926969c16d44b28ea38", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 15 | Lines Deleted: 2 | Files Changed: 2 | Hunks: 7 | Methods Changed: 2 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 17 | Churn Cumulative: 4393 | Contributors (this commit): 47 | Commits (past 90d): 13 | Contributors (cumulative): 63 | DMM Complexity: 0.3333333333333333\n\nDIFF:\n@@ -598,6 +598,10 @@ def load_dotenv(path=None):\n     :param path: Load the file at this location instead of searching.\n     :return: ``True`` if a file was loaded.\n \n+    .. versionchanged:: 1.1.0\n+        Returns ``False`` when python-dotenv is not installed, or when\n+        the given path isn't a file.\n+\n     .. versionadded:: 1.0\n     \"\"\"\n     if dotenv is None:\n@@ -607,11 +611,17 @@ def load_dotenv(path=None):\n                 ' Do \"pip install python-dotenv\" to use them.',\n                 fg=\"yellow\",\n             )\n-        return\n \n+        return False\n+\n+    # if the given path specifies the actual file then return True,\n+    # else False\n     if path is not None:\n+        if os.path.isfile(path):\n             return dotenv.load_dotenv(path)\n \n+        return False\n+\n     new_dir = None\n \n     for name in (\".env\", \".flaskenv\"):\n\n@@ -513,7 +513,7 @@ def test_load_dotenv(monkeypatch):\n \n     monkeypatch.setenv(\"EGGS\", \"3\")\n     monkeypatch.chdir(os.path.join(test_path, \"cliapp\", \"inner1\"))\n-    load_dotenv()\n+    assert load_dotenv()\n     assert os.getcwd() == test_path\n     # .flaskenv doesn't overwrite .env\n     assert os.environ[\"FOO\"] == \"env\"\n@@ -524,6 +524,9 @@ def test_load_dotenv(monkeypatch):\n     # set manually, files don't overwrite\n     assert os.environ[\"EGGS\"] == \"3\"\n \n+    # Non existent file should not load\n+    assert not load_dotenv('non-existent-file')\n+\n \n @need_dotenv\n def test_dotenv_path(monkeypatch):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#fcf2eb4753d02caf258c5b1473fbb74721a3f489", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 8 | Lines Deleted: 9 | Files Changed: 1 | Hunks: 3 | Methods Changed: 2 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 17 | Churn Cumulative: 134 | Contributors (this commit): 10 | Commits (past 90d): 2 | Contributors (cumulative): 10 | DMM Complexity: 1.0\n\nDIFF:\n@@ -32,19 +32,18 @@ except ImportError:\n             self.name = name\n             self.__doc__ = doc\n \n+        def send(self, *args, **kwargs):\n+            pass\n+\n         def _fail(self, *args, **kwargs):\n             raise RuntimeError(\n-                \"signalling support is unavailable \"\n-                \"because the blinker library is \"\n-                \"not installed.\"\n+                \"Signalling support is unavailable because the blinker\"\n+                \" library is not installed.\"\n             )\n \n-        send = lambda *a, **kw: None\n-        connect = (\n-            disconnect\n-        ) = (\n-            has_receivers_for\n-        ) = receivers_for = temporarily_connected_to = connected_to = _fail\n+        connect = connect_via = connected_to = temporarily_connected_to = _fail\n+        disconnect = _fail\n+        has_receivers_for = receivers_for = _fail\n         del _fail\n \n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#33379155f613dbdb4fe6d0918a5038a989fc18bf", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 1 | Churn Cumulative: 642 | Contributors (this commit): 29 | Commits (past 90d): 4 | Contributors (cumulative): 29 | DMM Complexity: None\n\nDIFF:\n@@ -50,6 +50,7 @@ setup(\n             \"sphinx\",\n             \"pallets-sphinx-themes\",\n             \"sphinxcontrib-log-cabinet\",\n+            \"pre-commit\",\n         ],\n         \"docs\": [\"sphinx\", \"pallets-sphinx-themes\", \"sphinxcontrib-log-cabinet\"],\n     },\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#2308cba407884996047790bfb77f90ae17bdb2bc", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 6 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 3 | Methods Changed: 2 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 7 | Churn Cumulative: 3053 | Contributors (this commit): 40 | Commits (past 90d): 14 | Contributors (cumulative): 40 | DMM Complexity: 1.0\n\nDIFF:\n@@ -778,8 +778,12 @@ def _validate_key(ctx, param, value):\n     default=True,\n     help=\"Enable or disable multithreading.\",\n )\n+@click.option('--extra-files', '-f',\n+              multiple=True, default=None, type=click.Path(),\n+              help='Files reloader should watch additionally to the modules')\n @pass_script_info\n-def run_command(info, host, port, reload, debugger, eager_loading, with_threads, cert):\n+def run_command(info, host, port, reload, debugger, eager_loading,\n+                with_threads, cert, extra_files):\n     \"\"\"Run a local development server.\n \n     This server is for development purposes only. It does not provide\n@@ -812,6 +816,7 @@ def run_command(info, host, port, reload, debugger, eager_loading, with_threads,\n         use_debugger=debugger,\n         threaded=with_threads,\n         ssl_context=cert,\n+        extra_files=extra_files\n     )\n \n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#e18cc4d71d1c0ded4a2a7afb417c5ea03ebb0861", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 25 | Lines Deleted: 6 | Files Changed: 1 | Hunks: 4 | Methods Changed: 2 | Complexity Δ (Sum/Max): 2/2 | Churn Δ: 31 | Churn Cumulative: 3084 | Contributors (this commit): 40 | Commits (past 90d): 4 | Contributors (cumulative): 40 | DMM Complexity: 1.0\n\nDIFF:\n@@ -742,6 +742,18 @@ def _validate_key(ctx, param, value):\n     return value\n \n \n+class SeparatedPathType(click.Path):\n+    \"\"\"Click option type that accepts a list of values separated by the\n+    OS's path separator (``:``, ``;`` on Windows). Each value is\n+    validated as a :class:`click.Path` type.\n+    \"\"\"\n+\n+    def convert(self, value, param, ctx):\n+        items = self.split_envvar_value(value)\n+        super_convert = super(SeparatedPathType, self).convert\n+        return [super_convert(item, param, ctx) for item in items]\n+\n+\n @click.command(\"run\", short_help=\"Run a development server.\")\n @click.option(\"--host\", \"-h\", default=\"127.0.0.1\", help=\"The interface to bind to.\")\n @click.option(\"--port\", \"-p\", default=5000, help=\"The port to bind to.\")\n@@ -778,12 +790,19 @@ def _validate_key(ctx, param, value):\n     default=True,\n     help=\"Enable or disable multithreading.\",\n )\n-@click.option('--extra-files', '-f',\n-              multiple=True, default=None, type=click.Path(),\n-              help='Files reloader should watch additionally to the modules')\n+@click.option(\n+    \"--extra-files\",\n+    default=None,\n+    type=SeparatedPathType(),\n+    help=(\n+        \"Extra files that trigger a reload on change. Multiple paths\"\n+        \" are separated by '{}'.\".format(os.path.pathsep)\n+    ),\n+)\n @pass_script_info\n-def run_command(info, host, port, reload, debugger, eager_loading,\n-                with_threads, cert, extra_files):\n+def run_command(\n+    info, host, port, reload, debugger, eager_loading, with_threads, cert, extra_files\n+):\n     \"\"\"Run a local development server.\n \n     This server is for development purposes only. It does not provide\n@@ -816,7 +835,7 @@ def run_command(info, host, port, reload, debugger, eager_loading,\n         use_debugger=debugger,\n         threaded=with_threads,\n         ssl_context=cert,\n-        extra_files=extra_files\n+        extra_files=extra_files,\n     )\n \n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#7bf8366970ec49b5396a1f86f00fdd1c5fef3fed", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 16 | Lines Deleted: 2 | Files Changed: 2 | Hunks: 5 | Methods Changed: 3 | Complexity Δ (Sum/Max): 2/1 | Churn Δ: 18 | Churn Cumulative: 10212 | Contributors (this commit): 113 | Commits (past 90d): 14 | Contributors (cumulative): 130 | DMM Complexity: 0.7777777777777778\n\nDIFF:\n@@ -44,6 +44,7 @@ from .helpers import (\n     url_for,\n     get_load_dotenv,\n )\n+from .json import jsonify\n from .logging import create_logger\n from .sessions import SecureCookieSessionInterface\n from .signals import (\n@@ -2001,6 +2002,9 @@ class Flask(_PackageBoundObject):\n             ``bytes`` (``str`` in Python 2)\n                 A response object is created with the bytes as the body.\n \n+            ``dict``\n+                A dictionary that will be jsonify'd before being returned.\n+\n             ``tuple``\n                 Either ``(body, status, headers)``, ``(body, status)``, or\n                 ``(body, headers)``, where ``body`` is any of the other types\n@@ -2064,6 +2068,8 @@ class Flask(_PackageBoundObject):\n                 # special logic\n                 rv = self.response_class(rv, status=status, headers=headers)\n                 status = headers = None\n+            elif isinstance(rv, dict):\n+                rv = jsonify(rv)\n             else:\n                 # evaluate a WSGI callable, or coerce a different response\n                 # class to the correct type\n\n@@ -1147,8 +1147,12 @@ def test_response_types(app, client):\n     def from_wsgi():\n         return NotFound()\n \n-    assert client.get(\"/text\").data == u\"Hällo Wörld\".encode(\"utf-8\")\n-    assert client.get(\"/bytes\").data == u\"Hällo Wörld\".encode(\"utf-8\")\n+    @app.route('/dict')\n+    def from_dict():\n+        return {\"foo\": \"bar\"}, 201\n+\n+    assert client.get('/text').data == u'Hällo Wörld'.encode('utf-8')\n+    assert client.get('/bytes').data == u'Hällo Wörld'.encode('utf-8')\n \n     rv = client.get(\"/full_tuple\")\n     assert rv.data == b\"Meh\"\n@@ -1181,6 +1185,10 @@ def test_response_types(app, client):\n     assert b\"Not Found\" in rv.data\n     assert rv.status_code == 404\n \n+    rv = client.get('/dict')\n+    assert rv.json == {\"foo\": \"bar\"}\n+    assert rv.status_code == 201\n+\n \n def test_response_type_errors():\n     app = flask.Flask(__name__)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#ec1ccd753084c6ff3215b9a64ba46d6af56715bd", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 77 | Lines Deleted: 8 | Files Changed: 4 | Hunks: 9 | Methods Changed: 9 | Complexity Δ (Sum/Max): 7/5 | Churn Δ: 85 | Churn Cumulative: 11068 | Contributors (this commit): 169 | Commits (past 90d): 53 | Contributors (cumulative): 208 | DMM Complexity: 1.0\n\nDIFF:\n@@ -600,13 +600,9 @@ class Flask(_PackageBoundObject):\n                 view_func=self.send_static_file,\n             )\n \n-        #: The click command line context for this application.  Commands\n-        #: registered here show up in the :command:`flask` command once the\n-        #: application has been discovered.  The default commands are\n-        #: provided by Flask itself and can be overridden.\n-        #:\n-        #: This is an instance of a :class:`click.Group` object.\n-        self.cli = cli.AppGroup(self.name)\n+        # Set the name of the Click group in case someone wants to add\n+        # the app's commands to another CLI tool.\n+        self.cli.name = self.name\n \n     @locked_cached_property\n     def name(self):\n\n@@ -13,6 +13,9 @@ from functools import update_wrapper\n \n from .helpers import _PackageBoundObject, _endpoint_from_view_func\n \n+# a singleton sentinel value for parameter defaults\n+_sentinel = object()\n+\n \n class BlueprintSetupState(object):\n     \"\"\"Temporary holder object for registering a blueprint with the\n@@ -90,6 +93,11 @@ class Blueprint(_PackageBoundObject):\n     or other things on the main application.  See :ref:`blueprints` for more\n     information.\n \n+    .. versionchanged:: 1.1.0\n+        Blueprints have a ``cli`` group to register nested CLI commands.\n+        The ``cli_group`` parameter controls the name of the group under\n+        the ``flask`` command.\n+\n     .. versionadded:: 0.7\n     \"\"\"\n \n@@ -129,6 +137,7 @@ class Blueprint(_PackageBoundObject):\n         subdomain=None,\n         url_defaults=None,\n         root_path=None,\n+        cli_group=_sentinel,\n     ):\n         _PackageBoundObject.__init__(\n             self, import_name, template_folder, root_path=root_path\n@@ -142,6 +151,7 @@ class Blueprint(_PackageBoundObject):\n         if url_defaults is None:\n             url_defaults = {}\n         self.url_values_defaults = url_defaults\n+        self.cli_group = cli_group\n \n     def record(self, func):\n         \"\"\"Registers a function that is called when the blueprint is\n@@ -206,6 +216,17 @@ class Blueprint(_PackageBoundObject):\n         for deferred in self.deferred_functions:\n             deferred(state)\n \n+        cli_resolved_group = options.get(\"cli_group\", self.cli_group)\n+\n+        if cli_resolved_group is None:\n+            app.cli.commands.update(self.cli.commands)\n+        elif cli_resolved_group is _sentinel:\n+            self.cli.name = self.name\n+            app.cli.add_command(self.cli)\n+        else:\n+            self.cli.name = cli_resolved_group\n+            app.cli.add_command(self.cli)\n+\n     def route(self, rule, **options):\n         \"\"\"Like :meth:`Flask.route` but for a blueprint.  The endpoint for the\n         :func:`url_for` function is prefixed with the name of the blueprint.\n\n@@ -942,6 +942,15 @@ class _PackageBoundObject(object):\n         self._static_folder = None\n         self._static_url_path = None\n \n+        # circular import\n+        from .cli import AppGroup\n+\n+        #: The Click command group for registration of CLI commands\n+        #: on the application and associated blueprints. These commands\n+        #: are accessible via the :command:`flask` command once the\n+        #: application has been discovered and blueprints registered.\n+        self.cli = AppGroup()\n+\n     def _get_static_folder(self):\n         if self._static_folder is not None:\n             return os.path.join(self.root_path, self._static_folder)\n\n@@ -23,7 +23,7 @@ import pytest\n from _pytest.monkeypatch import notset\n from click.testing import CliRunner\n \n-from flask import Flask, current_app\n+from flask import Flask, current_app, Blueprint\n from flask.cli import (\n     AppGroup,\n     FlaskGroup,\n@@ -609,3 +609,46 @@ def test_run_cert_import(monkeypatch):\n     # no --key with SSLContext\n     with pytest.raises(click.BadParameter):\n         run_command.make_context(\"run\", [\"--cert\", \"ssl_context\", \"--key\", __file__])\n+\n+\n+def test_cli_blueprints(app):\n+    \"\"\"Test blueprint commands register correctly to the application\"\"\"\n+    custom = Blueprint(\"custom\", __name__, cli_group=\"customized\")\n+    nested = Blueprint(\"nested\", __name__)\n+    merged = Blueprint(\"merged\", __name__, cli_group=None)\n+    late = Blueprint(\"late\", __name__)\n+\n+    @custom.cli.command(\"custom\")\n+    def custom_command():\n+        click.echo(\"custom_result\")\n+\n+    @nested.cli.command(\"nested\")\n+    def nested_command():\n+        click.echo(\"nested_result\")\n+\n+    @merged.cli.command(\"merged\")\n+    def merged_command():\n+        click.echo(\"merged_result\")\n+\n+    @late.cli.command(\"late\")\n+    def late_command():\n+        click.echo(\"late_result\")\n+\n+    app.register_blueprint(custom)\n+    app.register_blueprint(nested)\n+    app.register_blueprint(merged)\n+    app.register_blueprint(late, cli_group=\"late_registration\")\n+\n+    app_runner = app.test_cli_runner()\n+\n+    result = app_runner.invoke(args=[\"customized\", \"custom\"])\n+    assert \"custom_result\" in result.output\n+\n+    result = app_runner.invoke(args=[\"nested\", \"nested\"])\n+    assert \"nested_result\" in result.output\n+\n+    result = app_runner.invoke(args=[\"merged\"])\n+    assert \"merged_result\" in result.output\n+\n+    result = app_runner.invoke(args=[\"late_registration\", \"late\"])\n+    assert \"late_result\" in result.output\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
