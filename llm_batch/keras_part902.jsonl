{"custom_id": "keras#fa31fa74ea69099dd513e59e4f8b36c18a35746b", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 380 | Lines Deleted: 357 | Files Changed: 7 | Hunks: 197 | Methods Changed: 195 | Complexity Δ (Sum/Max): -26/1 | Churn Δ: 737 | Churn Cumulative: 6707 | Contributors (this commit): 29 | Commits (past 90d): 35 | Contributors (cumulative): 65 | DMM Complexity: 0.375\n\nDIFF:\n@@ -12,9 +12,6 @@ from keras.src.utils import traceback_utils\n \n \n class Map(Operation):\n-    def __init__(self):\n-        super().__init__()\n-\n     def call(self, f, xs):\n         return backend.core.map(f, xs)\n \n@@ -78,8 +75,8 @@ def map(f, xs):\n \n \n class Scan(Operation):\n-    def __init__(self, length=None, reverse=False, unroll=1):\n-        super().__init__()\n+    def __init__(self, length=None, reverse=False, unroll=1, *, name=None):\n+        super().__init__(name=name)\n         self.length = length\n         self.reverse = reverse\n         self.unroll = unroll\n@@ -191,8 +188,8 @@ def scan(f, init, xs=None, length=None, reverse=False, unroll=1):\n \n \n class AssociativeScan(Operation):\n-    def __init__(self, reverse=False, axis=0):\n-        super().__init__()\n+    def __init__(self, reverse=False, axis=0, *, name=None):\n+        super().__init__(name=name)\n         self.reverse = reverse\n         self.axis = axis\n \n@@ -289,8 +286,8 @@ def associative_scan(f, elems, reverse=False, axis=0):\n \n \n class Scatter(Operation):\n-    def __init__(self, shape):\n-        super().__init__()\n+    def __init__(self, shape, *, name=None):\n+        super().__init__(name=name)\n         self.shape = shape\n \n     def call(self, indices, values):\n@@ -392,8 +389,8 @@ def scatter_update(inputs, indices, updates):\n \n \n class Slice(Operation):\n-    def __init__(self, shape):\n-        super().__init__()\n+    def __init__(self, shape, *, name=None):\n+        super().__init__(name=name)\n         self.shape = shape\n \n     def call(self, inputs, start_indices):\n@@ -530,8 +527,8 @@ def switch(index, branches, *operands):\n \n \n class WhileLoop(Operation):\n-    def __init__(self, cond, body, maximum_iterations=None):\n-        super().__init__()\n+    def __init__(self, cond, body, maximum_iterations=None, *, name=None):\n+        super().__init__(name=name)\n         self.cond = cond\n         self.body = body\n         self.maximum_iterations = maximum_iterations\n@@ -599,9 +596,6 @@ def while_loop(\n \n \n class StopGradient(Operation):\n-    def __init__(self):\n-        super().__init__()\n-\n     def call(self, variable):\n         return backend.core.stop_gradient(variable)\n \n@@ -634,8 +628,8 @@ def stop_gradient(variable):\n \n \n class ForiLoop(Operation):\n-    def __init__(self, lower, upper, body_fun):\n-        super().__init__()\n+    def __init__(self, lower, upper, body_fun, *, name=None):\n+        super().__init__(name=name)\n         self.lower = lower\n         self.upper = upper\n         self.body_fun = body_fun\n@@ -682,8 +676,8 @@ def fori_loop(lower, upper, body_fun, init_val):\n \n \n class Unstack(Operation):\n-    def __init__(self, num=None, axis=0):\n-        super().__init__()\n+    def __init__(self, num=None, axis=0, *, name=None):\n+        super().__init__(name=name)\n         self.num = num\n         self.axis = axis\n \n@@ -787,8 +781,8 @@ def dtype(x):\n \n \n class Cast(Operation):\n-    def __init__(self, dtype):\n-        super().__init__()\n+    def __init__(self, dtype, *, name=None):\n+        super().__init__(name=name)\n         self.dtype = backend.standardize_dtype(dtype)\n \n     def call(self, x):\n@@ -822,8 +816,8 @@ def cast(x, dtype):\n \n \n class SaturateCast(Operation):\n-    def __init__(self, dtype):\n-        super().__init__()\n+    def __init__(self, dtype, *, name=None):\n+        super().__init__(name=name)\n         self.dtype = backend.standardize_dtype(dtype)\n \n     def call(self, x):\n@@ -928,8 +922,8 @@ def _saturate_cast(x, dtype, backend_module=None):\n \n \n class ConvertToTensor(Operation):\n-    def __init__(self, dtype=None, sparse=None, ragged=None):\n-        super().__init__()\n+    def __init__(self, dtype=None, sparse=None, ragged=None, *, name=None):\n+        super().__init__(name=name)\n         self.dtype = None if dtype is None else backend.standardize_dtype(dtype)\n         self.sparse = sparse\n         self.ragged = ragged\n\n@@ -8,8 +8,8 @@ from keras.src.ops.operation_utils import compute_conv_output_shape\n \n \n class RGBToGrayscale(Operation):\n-    def __init__(self, data_format=None):\n-        super().__init__()\n+    def __init__(self, data_format=None, *, name=None):\n+        super().__init__(name=name)\n         self.data_format = backend.standardize_data_format(data_format)\n \n     def call(self, images):\n@@ -77,8 +77,8 @@ def rgb_to_grayscale(images, data_format=None):\n \n \n class RGBToHSV(Operation):\n-    def __init__(self, data_format=None):\n-        super().__init__()\n+    def __init__(self, data_format=None, *, name=None):\n+        super().__init__(name=name)\n         self.data_format = backend.standardize_data_format(data_format)\n \n     def call(self, images):\n@@ -149,8 +149,8 @@ def rgb_to_hsv(images, data_format=None):\n \n \n class HSVToRGB(Operation):\n-    def __init__(self, data_format=None):\n-        super().__init__()\n+    def __init__(self, data_format=None, *, name=None):\n+        super().__init__(name=name)\n         self.data_format = backend.standardize_data_format(data_format)\n \n     def call(self, images):\n@@ -228,8 +228,10 @@ class Resize(Operation):\n         fill_mode=\"constant\",\n         fill_value=0.0,\n         data_format=None,\n+        *,\n+        name=None,\n     ):\n-        super().__init__()\n+        super().__init__(name=name)\n         self.size = tuple(size)\n         self.interpolation = interpolation\n         self.antialias = antialias\n@@ -413,8 +415,10 @@ class AffineTransform(Operation):\n         fill_mode=\"constant\",\n         fill_value=0,\n         data_format=None,\n+        *,\n+        name=None,\n     ):\n-        super().__init__()\n+        super().__init__(name=name)\n         self.interpolation = interpolation\n         self.fill_mode = fill_mode\n         self.fill_value = fill_value\n@@ -554,8 +558,10 @@ class ExtractPatches(Operation):\n         dilation_rate=1,\n         padding=\"valid\",\n         data_format=None,\n+        *,\n+        name=None,\n     ):\n-        super().__init__()\n+        super().__init__(name=name)\n         if isinstance(size, int):\n             size = (size, size)\n         self.size = size\n@@ -707,8 +713,8 @@ def _extract_patches(\n \n \n class MapCoordinates(Operation):\n-    def __init__(self, order, fill_mode=\"constant\", fill_value=0):\n-        super().__init__()\n+    def __init__(self, order, fill_mode=\"constant\", fill_value=0, *, name=None):\n+        super().__init__(name=name)\n         self.order = order\n         self.fill_mode = fill_mode\n         self.fill_value = fill_value\n@@ -803,8 +809,10 @@ class PadImages(Operation):\n         target_height=None,\n         target_width=None,\n         data_format=None,\n+        *,\n+        name=None,\n     ):\n-        super().__init__()\n+        super().__init__(name=name)\n         self.top_padding = top_padding\n         self.left_padding = left_padding\n         self.bottom_padding = bottom_padding\n@@ -1014,8 +1022,10 @@ class CropImages(Operation):\n         target_height=None,\n         target_width=None,\n         data_format=None,\n+        *,\n+        name=None,\n     ):\n-        super().__init__()\n+        super().__init__(name=name)\n         self.top_cropping = top_cropping\n         self.bottom_cropping = bottom_cropping\n         self.left_cropping = left_cropping\n@@ -1238,8 +1248,10 @@ class PerspectiveTransform(Operation):\n         interpolation=\"bilinear\",\n         fill_value=0,\n         data_format=None,\n+        *,\n+        name=None,\n     ):\n-        super().__init__()\n+        super().__init__(name=name)\n         self.interpolation = interpolation\n         self.fill_value = fill_value\n         self.data_format = backend.standardize_data_format(data_format)\n@@ -1381,8 +1393,10 @@ class GaussianBlur(Operation):\n         kernel_size=(3, 3),\n         sigma=(1.0, 1.0),\n         data_format=None,\n+        *,\n+        name=None,\n     ):\n-        super().__init__()\n+        super().__init__(name=name)\n         self.kernel_size = kernel_size\n         self.sigma = sigma\n         self.data_format = backend.standardize_data_format(data_format)\n@@ -1470,8 +1484,10 @@ class ElasticTransform(Operation):\n         fill_value=0.0,\n         seed=None,\n         data_format=None,\n+        *,\n+        name=None,\n     ):\n-        super().__init__()\n+        super().__init__(name=name)\n         self.alpha = alpha\n         self.sigma = sigma\n         self.interpolation = interpolation\n\n@@ -7,9 +7,6 @@ from keras.src.ops.operation_utils import reduce_shape\n \n \n class Cholesky(Operation):\n-    def __init__(self):\n-        super().__init__()\n-\n     def call(self, x):\n         return _cholesky(x)\n \n@@ -47,9 +44,6 @@ def _cholesky(x):\n \n \n class Det(Operation):\n-    def __init__(self):\n-        super().__init__()\n-\n     def call(self, x):\n         return _det(x)\n \n@@ -83,9 +77,6 @@ def _det(x):\n \n \n class Eig(Operation):\n-    def __init__(self):\n-        super().__init__()\n-\n     def call(self, x):\n         return _eig(x)\n \n@@ -122,9 +113,6 @@ def _eig(x):\n \n \n class Eigh(Operation):\n-    def __init__(self):\n-        super().__init__()\n-\n     def call(self, x):\n         return _eigh(x)\n \n@@ -162,9 +150,6 @@ def _eigh(x):\n \n \n class Inv(Operation):\n-    def __init__(self):\n-        super().__init__()\n-\n     def call(self, x):\n         return _inv(x)\n \n@@ -198,9 +183,6 @@ def _inv(x):\n \n \n class LuFactor(Operation):\n-    def __init__(self):\n-        super().__init__()\n-\n     def call(self, x):\n         return _lu_factor(x)\n \n@@ -248,8 +230,8 @@ def _lu_factor(x):\n \n \n class Norm(Operation):\n-    def __init__(self, ord=None, axis=None, keepdims=False):\n-        super().__init__()\n+    def __init__(self, ord=None, axis=None, keepdims=False, *, name=None):\n+        super().__init__(name=name)\n         if isinstance(ord, str):\n             if ord not in (\"fro\", \"nuc\"):\n                 raise ValueError(\n@@ -367,8 +349,8 @@ def norm(x, ord=None, axis=None, keepdims=False):\n \n \n class Qr(Operation):\n-    def __init__(self, mode=\"reduced\"):\n-        super().__init__()\n+    def __init__(self, mode=\"reduced\", *, name=None):\n+        super().__init__(name=name)\n         if mode not in {\"reduced\", \"complete\"}:\n             raise ValueError(\n                 \"`mode` argument value not supported. \"\n@@ -440,9 +422,6 @@ def qr(x, mode=\"reduced\"):\n \n \n class Solve(Operation):\n-    def __init__(self):\n-        super().__init__()\n-\n     def call(self, a, b):\n         return _solve(a, b)\n \n@@ -484,8 +463,8 @@ def _solve(a, b):\n \n \n class SolveTriangular(Operation):\n-    def __init__(self, lower=False):\n-        super().__init__()\n+    def __init__(self, lower=False, *, name=None):\n+        super().__init__(name=name)\n         self.lower = lower\n \n     def call(self, a, b):\n@@ -531,8 +510,8 @@ def _solve_triangular(a, b, lower=False):\n \n \n class SVD(Operation):\n-    def __init__(self, full_matrices=True, compute_uv=True):\n-        super().__init__()\n+    def __init__(self, full_matrices=True, compute_uv=True, *, name=None):\n+        super().__init__(name=name)\n         self.full_matrices = full_matrices\n         self.compute_uv = compute_uv\n \n@@ -586,8 +565,8 @@ def _svd(x, full_matrices=True, compute_uv=True):\n \n \n class Lstsq(Operation):\n-    def __init__(self, rcond=None):\n-        super().__init__()\n+    def __init__(self, rcond=None, *, name=None):\n+        super().__init__(name=name)\n         self.rcond = rcond\n \n     def call(self, a, b):\n\n@@ -32,8 +32,8 @@ def _segment_reduce_validation(data, segment_ids):\n \n \n class SegmentReduction(Operation):\n-    def __init__(self, num_segments=None, sorted=False):\n-        super().__init__()\n+    def __init__(self, num_segments=None, sorted=False, *, name=None):\n+        super().__init__(name=name)\n         self.num_segments = num_segments\n         self.sorted = sorted\n \n@@ -134,8 +134,8 @@ def segment_max(data, segment_ids, num_segments=None, sorted=False):\n \n \n class TopK(Operation):\n-    def __init__(self, k, sorted=True):\n-        super().__init__()\n+    def __init__(self, k, sorted=True, *, name=None):\n+        super().__init__(name=name)\n         self.k = k\n         self.sorted = sorted\n \n@@ -183,8 +183,8 @@ def top_k(x, k, sorted=True):\n \n \n class InTopK(Operation):\n-    def __init__(self, k):\n-        super().__init__()\n+    def __init__(self, k, *, name=None):\n+        super().__init__(name=name)\n         self.k = k\n \n     def compute_output_spec(self, targets, predictions):\n@@ -223,8 +223,8 @@ def in_top_k(targets, predictions, k):\n \n \n class Logsumexp(Operation):\n-    def __init__(self, axis=None, keepdims=False):\n-        super().__init__()\n+    def __init__(self, axis=None, keepdims=False, *, name=None):\n+        super().__init__(name=name)\n         self.axis = axis\n         self.keepdims = keepdims\n \n@@ -264,8 +264,8 @@ def logsumexp(x, axis=None, keepdims=False):\n \n \n class ExtractSequences(Operation):\n-    def __init__(self, sequence_length, sequence_stride):\n-        super().__init__()\n+    def __init__(self, sequence_length, sequence_stride, *, name=None):\n+        super().__init__(name=name)\n         self.sequence_length = sequence_length\n         self.sequence_stride = sequence_stride\n \n@@ -396,11 +396,8 @@ def fft(x):\n \n \n class FFT2(Operation):\n-    def __init__(self):\n-        super().__init__()\n-        self.axes = (-2, -1)\n-\n     def compute_output_spec(self, x):\n+        axes = (-2, -1)\n         if not isinstance(x, (tuple, list)) or len(x) != 2:\n             raise ValueError(\n                 \"Input `x` should be a tuple of two tensors - real and \"\n@@ -424,11 +421,11 @@ class FFT2(Operation):\n             )\n \n         # The axes along which we are calculating FFT should be fully-defined.\n-        m = real.shape[self.axes[0]]\n-        n = real.shape[self.axes[1]]\n+        m = real.shape[axes[0]]\n+        n = real.shape[axes[1]]\n         if m is None or n is None:\n             raise ValueError(\n-                f\"Input should have its {self.axes} axes fully-defined. \"\n+                f\"Input should have its {axes} axes fully-defined. \"\n                 f\"Received: input.shape = {real.shape}\"\n             )\n \n@@ -470,11 +467,8 @@ def fft2(x):\n \n \n class IFFT2(Operation):\n-    def __init__(self):\n-        super().__init__()\n-        self.axes = (-2, -1)\n-\n     def compute_output_spec(self, x):\n+        axes = (-2, -1)\n         if not isinstance(x, (tuple, list)) or len(x) != 2:\n             raise ValueError(\n                 \"Input `x` should be a tuple of two tensors - real and \"\n@@ -498,11 +492,11 @@ class IFFT2(Operation):\n             )\n \n         # The axes along which we are calculating IFFT should be fully-defined.\n-        m = real.shape[self.axes[0]]\n-        n = real.shape[self.axes[1]]\n+        m = real.shape[axes[0]]\n+        n = real.shape[axes[1]]\n         if m is None or n is None:\n             raise ValueError(\n-                f\"Input should have its {self.axes} axes fully-defined. \"\n+                f\"Input should have its {axes} axes fully-defined. \"\n                 f\"Received: input.shape = {real.shape}\"\n             )\n \n@@ -545,8 +539,8 @@ def ifft2(x):\n \n \n class RFFT(Operation):\n-    def __init__(self, fft_length=None):\n-        super().__init__()\n+    def __init__(self, fft_length=None, *, name=None):\n+        super().__init__(name=name)\n         self.fft_length = fft_length\n \n     def compute_output_spec(self, x):\n@@ -616,8 +610,8 @@ def rfft(x, fft_length=None):\n \n \n class IRFFT(Operation):\n-    def __init__(self, fft_length=None):\n-        super().__init__()\n+    def __init__(self, fft_length=None, *, name=None):\n+        super().__init__(name=name)\n         self.fft_length = fft_length\n \n     def compute_output_spec(self, x):\n@@ -708,8 +702,10 @@ class STFT(Operation):\n         fft_length,\n         window=\"hann\",\n         center=True,\n+        *,\n+        name=None,\n     ):\n-        super().__init__()\n+        super().__init__(name=name)\n         self.sequence_length = sequence_length\n         self.sequence_stride = sequence_stride\n         self.fft_length = fft_length\n@@ -809,8 +805,10 @@ class ISTFT(Operation):\n         length=None,\n         window=\"hann\",\n         center=True,\n+        *,\n+        name=None,\n     ):\n-        super().__init__()\n+        super().__init__(name=name)\n         self.sequence_length = sequence_length\n         self.sequence_stride = sequence_stride\n         self.fft_length = fft_length\n@@ -1017,9 +1015,6 @@ def erfinv(x):\n \n \n class Logdet(Operation):\n-    def __init__(self):\n-        super().__init__()\n-\n     def call(self, x):\n         return backend.math.logdet(x)\n \n\n@@ -213,8 +213,8 @@ def softsign(x):\n \n \n class SoftShrink(Operation):\n-    def __init__(self, threshold=0.5):\n-        super().__init__()\n+    def __init__(self, threshold=0.5, *, name=None):\n+        super().__init__(name=name)\n         self.threshold = threshold\n \n     def call(self, x):\n@@ -335,8 +335,8 @@ def silu(x):\n \n \n class Squareplus(Operation):\n-    def __init__(self, b=4):\n-        super().__init__()\n+    def __init__(self, b=4, *, name=None):\n+        super().__init__(name=name)\n         self.b = b\n \n     def call(self, x):\n@@ -412,8 +412,8 @@ def log_sigmoid(x):\n \n \n class LeakyRelu(Operation):\n-    def __init__(self, negative_slope=0.2):\n-        super().__init__()\n+    def __init__(self, negative_slope=0.2, *, name=None):\n+        super().__init__(name=name)\n         self.negative_slope = negative_slope\n \n     def call(self, x):\n@@ -538,8 +538,8 @@ def hard_silu(x):\n \n \n class Elu(Operation):\n-    def __init__(self, alpha=1.0):\n-        super().__init__()\n+    def __init__(self, alpha=1.0, *, name=None):\n+        super().__init__(name=name)\n         self.alpha = alpha\n \n     def call(self, x):\n@@ -614,8 +614,8 @@ def selu(x):\n \n \n class Gelu(Operation):\n-    def __init__(self, approximate=True):\n-        super().__init__()\n+    def __init__(self, approximate=True, *, name=None):\n+        super().__init__(name=name)\n         self.approximate = approximate\n \n     def call(self, x):\n@@ -657,8 +657,8 @@ def gelu(x, approximate=True):\n \n \n class Celu(Operation):\n-    def __init__(self, alpha=1.0):\n-        super().__init__()\n+    def __init__(self, alpha=1.0, *, name=None):\n+        super().__init__(name=name)\n         self.alpha = alpha\n \n     def call(self, x):\n@@ -697,8 +697,8 @@ def celu(x, alpha=1.0):\n \n \n class Glu(Operation):\n-    def __init__(self, axis=-1):\n-        super().__init__()\n+    def __init__(self, axis=-1, *, name=None):\n+        super().__init__(name=name)\n         self.axis = axis\n \n     def call(self, x):\n@@ -738,9 +738,6 @@ def glu(x, axis=-1):\n \n \n class TanhShrink(Operation):\n-    def __init__(self):\n-        super().__init__()\n-\n     def call(self, x):\n         return backend.nn.tanh_shrink(x)\n \n@@ -777,9 +774,6 @@ def tanh_shrink(x):\n \n \n class HardTanh(Operation):\n-    def __init__(self):\n-        super().__init__()\n-\n     def call(self, x):\n         return backend.nn.hard_tanh(x)\n \n@@ -816,8 +810,8 @@ def hard_tanh(x):\n \n \n class HardShrink(Operation):\n-    def __init__(self, threshold=0.5):\n-        super().__init__()\n+    def __init__(self, threshold=0.5, *, name=None):\n+        super().__init__(name=name)\n         self.threshold = threshold\n \n     def call(self, x):\n@@ -857,8 +851,8 @@ def hard_shrink(x, threshold=0.5):\n \n \n class Threshold(Operation):\n-    def __init__(self, threshold, default_value):\n-        super().__init__()\n+    def __init__(self, threshold, default_value, *, name=None):\n+        super().__init__(name=name)\n         self.threshold = threshold\n         self.default_value = default_value\n \n@@ -899,8 +893,8 @@ def threshold(x, threshold, default_value):\n \n \n class Softmax(Operation):\n-    def __init__(self, axis=-1):\n-        super().__init__()\n+    def __init__(self, axis=-1, *, name=None):\n+        super().__init__(name=name)\n         self.axis = axis\n \n     def call(self, x):\n@@ -971,8 +965,8 @@ def softmax(x, axis=-1):\n \n \n class LogSoftmax(Operation):\n-    def __init__(self, axis=-1):\n-        super().__init__()\n+    def __init__(self, axis=-1, *, name=None):\n+        super().__init__(name=name)\n         self.axis = axis\n \n     def call(self, x):\n@@ -1032,8 +1026,8 @@ def log_softmax(x, axis=-1):\n \n \n class Sparsemax(Operation):\n-    def __init__(self, axis=-1):\n-        super().__init__()\n+    def __init__(self, axis=-1, *, name=None):\n+        super().__init__(name=name)\n         self.axis = axis\n \n     def call(self, x):\n@@ -1080,8 +1074,10 @@ class MaxPool(Operation):\n         strides=None,\n         padding=\"valid\",\n         data_format=None,\n+        *,\n+        name=None,\n     ):\n-        super().__init__()\n+        super().__init__(name=name)\n         self.pool_size = pool_size\n         self.strides = strides\n         self.padding = padding.lower()\n@@ -1166,8 +1162,10 @@ class AveragePool(Operation):\n         strides=None,\n         padding=\"valid\",\n         data_format=None,\n+        *,\n+        name=None,\n     ):\n-        super().__init__()\n+        super().__init__(name=name)\n         self.pool_size = pool_size\n         self.strides = strides\n         self.padding = padding.lower()\n@@ -1259,8 +1257,10 @@ class Conv(Operation):\n         padding=\"valid\",\n         data_format=None,\n         dilation_rate=1,\n+        *,\n+        name=None,\n     ):\n-        super().__init__()\n+        super().__init__(name=name)\n         self.strides = strides\n         self.padding = padding.lower()\n         self.data_format = data_format\n@@ -1352,8 +1352,10 @@ class DepthwiseConv(Operation):\n         padding=\"valid\",\n         data_format=None,\n         dilation_rate=1,\n+        *,\n+        name=None,\n     ):\n-        super().__init__()\n+        super().__init__(name=name)\n         self.strides = strides\n         self.padding = padding.lower()\n         self.data_format = data_format\n@@ -1455,8 +1457,10 @@ class SeparableConv(Operation):\n         padding=\"valid\",\n         data_format=None,\n         dilation_rate=1,\n+        *,\n+        name=None,\n     ):\n-        super().__init__()\n+        super().__init__(name=name)\n         self.strides = strides\n         self.padding = padding.lower()\n         self.data_format = data_format\n@@ -1574,8 +1578,10 @@ class ConvTranspose(Operation):\n         output_padding=None,\n         data_format=None,\n         dilation_rate=1,\n+        *,\n+        name=None,\n     ):\n-        super().__init__()\n+        super().__init__(name=name)\n         self.strides = strides\n         self.output_padding = output_padding\n         self.padding = padding.lower()\n@@ -1689,8 +1695,10 @@ def conv_transpose(\n \n \n class OneHot(Operation):\n-    def __init__(self, num_classes, axis=-1, dtype=None, sparse=False):\n-        super().__init__()\n+    def __init__(\n+        self, num_classes, axis=-1, dtype=None, sparse=False, *, name=None\n+    ):\n+        super().__init__(name=name)\n         self.num_classes = num_classes\n         self.axis = axis\n         self.dtype = backend.standardize_dtype(dtype)\n@@ -1768,8 +1776,8 @@ def one_hot(x, num_classes, axis=-1, dtype=None, sparse=False):\n \n \n class BinaryCrossentropy(Operation):\n-    def __init__(self, from_logits=False):\n-        super().__init__()\n+    def __init__(self, from_logits=False, *, name=None):\n+        super().__init__(name=name)\n         self.from_logits = from_logits\n \n     def call(self, target, output):\n@@ -1835,8 +1843,8 @@ def binary_crossentropy(target, output, from_logits=False):\n \n \n class CategoricalCrossentropy(Operation):\n-    def __init__(self, from_logits=False, axis=-1):\n-        super().__init__()\n+    def __init__(self, from_logits=False, axis=-1, *, name=None):\n+        super().__init__(name=name)\n         self.from_logits = from_logits\n         self.axis = axis\n \n@@ -1919,8 +1927,8 @@ def categorical_crossentropy(target, output, from_logits=False, axis=-1):\n \n \n class SparseCategoricalCrossentropy(Operation):\n-    def __init__(self, from_logits=False, axis=-1):\n-        super().__init__()\n+    def __init__(self, from_logits=False, axis=-1, *, name=None):\n+        super().__init__(name=name)\n         self.from_logits = from_logits\n         self.axis = axis\n \n@@ -2005,13 +2013,20 @@ def sparse_categorical_crossentropy(target, output, from_logits=False, axis=-1):\n \n class MultiHot(Operation):\n     def __init__(\n-        self, num_classes=None, axis=-1, dtype=None, sparse=False, **kwargs\n+        self,\n+        num_classes=None,\n+        axis=-1,\n+        dtype=None,\n+        sparse=False,\n+        *,\n+        name=None,\n+        **kwargs,\n     ):\n         if num_classes is None and \"num_tokens\" in kwargs:\n             num_classes = kwargs.pop(\"num_tokens\")\n         if num_classes is None:\n             raise ValueError(\"Argument `num_classes` must be specified.\")\n-        super().__init__(**kwargs)\n+        super().__init__(name=name)\n         self.num_classes = num_classes\n         self.axis = axis\n         self.dtype = dtype or backend.floatx()\n@@ -2091,8 +2106,8 @@ def multi_hot(\n \n \n class Moments(Operation):\n-    def __init__(self, axes, keepdims=False, synchronized=False):\n-        super().__init__()\n+    def __init__(self, axes, keepdims=False, synchronized=False, *, name=None):\n+        super().__init__(name=name)\n         self.axes = axes\n         self.keepdims = keepdims\n         self.synchronized = synchronized\n@@ -2161,8 +2176,8 @@ def moments(x, axes, keepdims=False, synchronized=False):\n \n \n class BatchNorm(Operation):\n-    def __init__(self, axis, epsilon=1e-3):\n-        super().__init__()\n+    def __init__(self, axis, epsilon=1e-3, *, name=None):\n+        super().__init__(name=name)\n         self.axis = axis\n         self.epsilon = epsilon\n \n@@ -2256,8 +2271,8 @@ def batch_normalization(\n \n \n class CTCLoss(Operation):\n-    def __init__(self, mask_index=0):\n-        super().__init__()\n+    def __init__(self, mask_index=0, *, name=None):\n+        super().__init__(name=name)\n         self.mask_index = mask_index\n \n     def call(self, target, output, target_length, output_length):\n@@ -2326,8 +2341,10 @@ class CTCDecode(Operation):\n         top_paths=1,\n         merge_repeated=True,\n         mask_index=0,\n+        *,\n+        name=None,\n     ):\n-        super().__init__()\n+        super().__init__(name=name)\n         self.strategy = strategy\n         self.beam_width = beam_width\n         self.top_paths = top_paths\n@@ -2428,8 +2445,8 @@ def ctc_decode(\n \n \n class Normalize(Operation):\n-    def __init__(self, axis=-1, order=2, epsilon=None):\n-        super().__init__()\n+    def __init__(self, axis=-1, order=2, epsilon=None, *, name=None):\n+        super().__init__(name=name)\n         self.axis = axis\n         self.order = order\n         self.epsilon = epsilon\n@@ -2510,8 +2527,10 @@ class PSNR(Operation):\n     def __init__(\n         self,\n         max_val,\n+        *,\n+        name=None,\n     ):\n-        super().__init__()\n+        super().__init__(name=name)\n         self.max_val = max_val\n \n     def call(self, x1, x2):\n@@ -2581,9 +2600,14 @@ def psnr(\n \n class DotProductAttention(Operation):\n     def __init__(\n-        self, is_causal=False, flash_attention=None, attn_logits_soft_cap=None\n+        self,\n+        is_causal=False,\n+        flash_attention=None,\n+        attn_logits_soft_cap=None,\n+        *,\n+        name=None,\n     ):\n-        super().__init__()\n+        super().__init__(name=name)\n         self.is_causal = is_causal\n         self.flash_attention = flash_attention\n         self.attn_logits_soft_cap = attn_logits_soft_cap\n@@ -2729,8 +2753,8 @@ def dot_product_attention(\n \n \n class RMSNorm(Operation):\n-    def __init__(self, scale=1, axis=-1, epsilon=None):\n-        super().__init__()\n+    def __init__(self, scale=1, axis=-1, epsilon=None, *, name=None):\n+        super().__init__(name=name)\n         self.axis = axis\n         self.scale = scale\n         self.epsilon = epsilon\n@@ -2814,9 +2838,16 @@ def _rms_normalization(x, scale=1, axis=-1, epsilon=None):\n \n class LayerNorm(Operation):\n     def __init__(\n-        self, gamma=None, beta=None, axis=-1, epsilon=None, rms_scaling=False\n+        self,\n+        gamma=None,\n+        beta=None,\n+        axis=-1,\n+        epsilon=None,\n+        rms_scaling=False,\n+        *,\n+        name=None,\n     ):\n-        super().__init__()\n+        super().__init__(name=name)\n         self.axis = axis\n         self.gamma = gamma\n         self.beta = beta\n@@ -2949,9 +2980,6 @@ def _layer_normalization(\n \n \n class Polar(Operation):\n-    def __init__(self):\n-        super().__init__()\n-\n     def compute_output_spec(self, abs_, angle):\n         return KerasTensor(shape=abs_.shape)\n \n\n@@ -17,8 +17,8 @@ from keras.src.ops.operation_utils import reduce_shape\n \n \n class Rot90(Operation):\n-    def __init__(self, k=1, axes=(0, 1)):\n-        super().__init__()\n+    def __init__(self, k=1, axes=(0, 1), *, name=None):\n+        super().__init__(name=name)\n         self.k = k\n         self.axes = axes\n \n@@ -238,8 +238,8 @@ def add(x1, x2):\n \n \n class All(Operation):\n-    def __init__(self, axis=None, keepdims=False):\n-        super().__init__()\n+    def __init__(self, axis=None, keepdims=False, *, name=None):\n+        super().__init__(name=name)\n         if isinstance(axis, int):\n             self.axis = [axis]\n         else:\n@@ -302,8 +302,8 @@ def all(x, axis=None, keepdims=False):\n \n \n class Any(Operation):\n-    def __init__(self, axis=None, keepdims=False):\n-        super().__init__()\n+    def __init__(self, axis=None, keepdims=False, *, name=None):\n+        super().__init__(name=name)\n         if isinstance(axis, int):\n             self.axis = [axis]\n         else:\n@@ -401,8 +401,8 @@ def any(x, axis=None, keepdims=False):\n \n \n class Amax(Operation):\n-    def __init__(self, axis=None, keepdims=False):\n-        super().__init__()\n+    def __init__(self, axis=None, keepdims=False, *, name=None):\n+        super().__init__(name=name)\n         if isinstance(axis, int):\n             axis = [axis]\n         self.axis = axis\n@@ -460,8 +460,8 @@ def amax(x, axis=None, keepdims=False):\n \n \n class Amin(Operation):\n-    def __init__(self, axis=None, keepdims=False):\n-        super().__init__()\n+    def __init__(self, axis=None, keepdims=False, *, name=None):\n+        super().__init__(name=name)\n         if isinstance(axis, int):\n             axis = [axis]\n         self.axis = axis\n@@ -515,8 +515,8 @@ def amin(x, axis=None, keepdims=False):\n \n \n class Append(Operation):\n-    def __init__(self, axis=None):\n-        super().__init__()\n+    def __init__(self, axis=None, *, name=None):\n+        super().__init__(name=name)\n         self.axis = axis\n \n     def call(self, x1, x2):\n@@ -591,8 +591,8 @@ def append(\n \n \n class Arange(Operation):\n-    def __init__(self, dtype=None):\n-        super().__init__()\n+    def __init__(self, dtype=None, *, name=None):\n+        super().__init__(name=name)\n         self.dtype = None if dtype is None else backend.standardize_dtype(dtype)\n \n     def call(self, start, stop=None, step=1):\n@@ -930,8 +930,8 @@ def arctanh(x):\n \n \n class Argmax(Operation):\n-    def __init__(self, axis=None, keepdims=False):\n-        super().__init__()\n+    def __init__(self, axis=None, keepdims=False, *, name=None):\n+        super().__init__(name=name)\n         self.axis = axis\n         self.keepdims = keepdims\n \n@@ -981,8 +981,8 @@ def argmax(x, axis=None, keepdims=False):\n \n \n class Argmin(Operation):\n-    def __init__(self, axis=None, keepdims=False):\n-        super().__init__()\n+    def __init__(self, axis=None, keepdims=False, *, name=None):\n+        super().__init__(name=name)\n         self.axis = axis\n         self.keepdims = keepdims\n \n@@ -1032,8 +1032,8 @@ def argmin(x, axis=None, keepdims=False):\n \n \n class Argsort(Operation):\n-    def __init__(self, axis=-1):\n-        super().__init__()\n+    def __init__(self, axis=-1, *, name=None):\n+        super().__init__(name=name)\n         self.axis = axis\n \n     def call(self, x):\n@@ -1084,8 +1084,8 @@ def argsort(x, axis=-1):\n \n \n class Array(Operation):\n-    def __init__(self, dtype=None):\n-        super().__init__()\n+    def __init__(self, dtype=None, *, name=None):\n+        super().__init__(name=name)\n         self.dtype = None if dtype is None else backend.standardize_dtype(dtype)\n \n     def call(self, x):\n@@ -1124,8 +1124,8 @@ def array(x, dtype=None):\n \n \n class Average(Operation):\n-    def __init__(self, axis=None):\n-        super().__init__()\n+    def __init__(self, axis=None, *, name=None):\n+        super().__init__(name=name)\n         # np.average() does not support axis as tuple as declared by the\n         # docstring, it only supports int or None.\n         self.axis = axis\n@@ -1318,8 +1318,8 @@ def hanning(x):\n \n \n class Kaiser(Operation):\n-    def __init__(self, beta):\n-        super().__init__()\n+    def __init__(self, beta, *, name=None):\n+        super().__init__(name=name)\n         self.beta = beta\n \n     def call(self, x):\n@@ -1356,8 +1356,8 @@ def kaiser(x, beta):\n \n \n class Bincount(Operation):\n-    def __init__(self, weights=None, minlength=0, sparse=False):\n-        super().__init__()\n+    def __init__(self, weights=None, minlength=0, sparse=False, *, name=None):\n+        super().__init__(name=name)\n         self.weights = weights\n         self.minlength = minlength\n         self.sparse = sparse\n@@ -1434,9 +1434,6 @@ def bincount(x, weights=None, minlength=0, sparse=False):\n \n \n class BitwiseAnd(Operation):\n-    def __init__(self):\n-        super().__init__()\n-\n     def call(self, x, y):\n         return backend.numpy.bitwise_and(x, y)\n \n@@ -1466,9 +1463,6 @@ def bitwise_and(x, y):\n \n \n class BitwiseInvert(Operation):\n-    def __init__(self):\n-        super().__init__()\n-\n     def call(self, x):\n         return backend.numpy.bitwise_invert(x)\n \n@@ -1496,9 +1490,6 @@ def bitwise_invert(x):\n \n \n class BitwiseNot(Operation):\n-    def __init__(self):\n-        super().__init__()\n-\n     def call(self, x):\n         return backend.numpy.bitwise_not(x)\n \n@@ -1526,9 +1517,6 @@ def bitwise_not(x):\n \n \n class BitwiseOr(Operation):\n-    def __init__(self):\n-        super().__init__()\n-\n     def call(self, x, y):\n         return backend.numpy.bitwise_or(x, y)\n \n@@ -1558,9 +1546,6 @@ def bitwise_or(x, y):\n \n \n class BitwiseXor(Operation):\n-    def __init__(self):\n-        super().__init__()\n-\n     def call(self, x, y):\n         return backend.numpy.bitwise_xor(x, y)\n \n@@ -1590,9 +1575,6 @@ def bitwise_xor(x, y):\n \n \n class BitwiseLeftShift(Operation):\n-    def __init__(self):\n-        super().__init__()\n-\n     def call(self, x, y):\n         return backend.numpy.bitwise_left_shift(x, y)\n \n@@ -1627,9 +1609,6 @@ def bitwise_left_shift(x, y):\n \n \n class LeftShift(Operation):\n-    def __init__(self):\n-        super().__init__()\n-\n     def call(self, x, y):\n         return backend.numpy.left_shift(x, y)\n \n@@ -1662,9 +1641,6 @@ def left_shift(x, y):\n \n \n class BitwiseRightShift(Operation):\n-    def __init__(self):\n-        super().__init__()\n-\n     def call(self, x, y):\n         return backend.numpy.bitwise_right_shift(x, y)\n \n@@ -1699,9 +1675,6 @@ def bitwise_right_shift(x, y):\n \n \n class RightShift(Operation):\n-    def __init__(self):\n-        super().__init__()\n-\n     def call(self, x, y):\n         return backend.numpy.right_shift(x, y)\n \n@@ -1764,8 +1737,8 @@ def blackman(x):\n \n \n class BroadcastTo(Operation):\n-    def __init__(self, shape):\n-        super().__init__()\n+    def __init__(self, shape, *, name=None):\n+        super().__init__(name=name)\n         self.shape = shape\n \n     def call(self, x):\n@@ -1838,8 +1811,8 @@ def ceil(x):\n \n \n class Clip(Operation):\n-    def __init__(self, x_min, x_max):\n-        super().__init__()\n+    def __init__(self, x_min, x_max, *, name=None):\n+        super().__init__(name=name)\n         self.x_min = x_min\n         self.x_max = x_max\n \n@@ -1874,8 +1847,8 @@ def clip(x, x_min, x_max):\n \n \n class Concatenate(Operation):\n-    def __init__(self, axis=0):\n-        super().__init__()\n+    def __init__(self, axis=0, *, name=None):\n+        super().__init__(name=name)\n         if axis is None:\n             raise ValueError(\"`axis` cannot be None for `concatenate`.\")\n         self.axis = axis\n@@ -2051,8 +2024,8 @@ def cosh(x):\n \n \n class CountNonzero(Operation):\n-    def __init__(self, axis=None):\n-        super().__init__()\n+    def __init__(self, axis=None, *, name=None):\n+        super().__init__(name=name)\n         if isinstance(axis, int):\n             self.axis = (axis,)\n         else:\n@@ -2102,8 +2075,8 @@ def count_nonzero(x, axis=None):\n \n \n class Cross(Operation):\n-    def __init__(self, axisa=-1, axisb=-1, axisc=-1, axis=None):\n-        super().__init__()\n+    def __init__(self, axisa=-1, axisb=-1, axisc=-1, axis=None, *, name=None):\n+        super().__init__(name=name)\n         if axis is not None:\n             self.axisa = axis\n             self.axisb = axis\n@@ -2200,8 +2173,8 @@ def cross(x1, x2, axisa=-1, axisb=-1, axisc=-1, axis=None):\n \n \n class Cumprod(Operation):\n-    def __init__(self, axis=None, dtype=None):\n-        super().__init__()\n+    def __init__(self, axis=None, dtype=None, *, name=None):\n+        super().__init__(name=name)\n         self.axis = axis\n         self.dtype = None if dtype is None else backend.standardize_dtype(dtype)\n \n@@ -2243,8 +2216,8 @@ def cumprod(x, axis=None, dtype=None):\n \n \n class Cumsum(Operation):\n-    def __init__(self, axis=None, dtype=None):\n-        super().__init__()\n+    def __init__(self, axis=None, dtype=None, *, name=None):\n+        super().__init__(name=name)\n         self.axis = axis\n         self.dtype = None if dtype is None else backend.standardize_dtype(dtype)\n \n@@ -2286,8 +2259,8 @@ def cumsum(x, axis=None, dtype=None):\n \n \n class Diag(Operation):\n-    def __init__(self, k=0):\n-        super().__init__()\n+    def __init__(self, k=0, *, name=None):\n+        super().__init__(name=name)\n         self.k = k\n \n     def call(self, x):\n@@ -2362,8 +2335,8 @@ def diag(x, k=0):\n \n \n class Diagflat(Operation):\n-    def __init__(self, k=0):\n-        super().__init__()\n+    def __init__(self, k=0, *, name=None):\n+        super().__init__(name=name)\n         self.k = k\n \n     def call(self, x):\n@@ -2418,8 +2391,8 @@ def diagflat(x, k=0):\n \n \n class Diagonal(Operation):\n-    def __init__(self, offset=0, axis1=0, axis2=1):\n-        super().__init__()\n+    def __init__(self, offset=0, axis1=0, axis2=1, *, name=None):\n+        super().__init__(name=name)\n         self.offset = offset\n         self.axis1 = axis1\n         self.axis2 = axis2\n@@ -2522,8 +2495,8 @@ def diagonal(x, offset=0, axis1=0, axis2=1):\n \n \n class Diff(Operation):\n-    def __init__(self, n=1, axis=-1):\n-        super().__init__()\n+    def __init__(self, n=1, axis=-1, *, name=None):\n+        super().__init__(name=name)\n         self.n = n\n         self.axis = axis\n \n@@ -2681,8 +2654,8 @@ def dot(x1, x2):\n \n \n class Einsum(Operation):\n-    def __init__(self, subscripts):\n-        super().__init__()\n+    def __init__(self, subscripts, *, name=None):\n+        super().__init__(name=name)\n         self.subscripts = subscripts\n \n     def call(self, *operands, **kwargs):\n@@ -3042,8 +3015,8 @@ def exp2(x):\n \n \n class ExpandDims(Operation):\n-    def __init__(self, axis):\n-        super().__init__()\n+    def __init__(self, axis, *, name=None):\n+        super().__init__(name=name)\n         if not isinstance(axis, (int, tuple, list)):\n             raise ValueError(\n                 \"The `axis` argument to `expand_dims` should be an integer, \"\n@@ -3114,8 +3087,8 @@ def expm1(x):\n \n \n class Flip(Operation):\n-    def __init__(self, axis=None):\n-        super().__init__()\n+    def __init__(self, axis=None, *, name=None):\n+        super().__init__(name=name)\n         self.axis = axis\n \n     def call(self, x):\n@@ -3176,8 +3149,8 @@ def floor(x):\n \n \n class Full(Operation):\n-    def __init__(self, shape, dtype=None):\n-        super().__init__()\n+    def __init__(self, shape, dtype=None, *, name=None):\n+        super().__init__(name=name)\n         self.shape = shape\n         self.dtype = None if dtype is None else backend.standardize_dtype(dtype)\n \n@@ -3207,8 +3180,8 @@ def full(shape, fill_value, dtype=None):\n \n \n class FullLike(Operation):\n-    def __init__(self, dtype=None):\n-        super().__init__()\n+    def __init__(self, dtype=None, *, name=None):\n+        super().__init__(name=name)\n         self.dtype = None if dtype is None else backend.standardize_dtype(dtype)\n \n     def call(self, x, fill_value):\n@@ -3467,8 +3440,8 @@ def imag(x):\n \n \n class Isclose(Operation):\n-    def __init__(self, equal_nan=False):\n-        super().__init__()\n+    def __init__(self, equal_nan=False, *, name=None):\n+        super().__init__(name=name)\n         self.equal_nan = equal_nan\n \n     def call(self, x1, x2, rtol=1e-5, atol=1e-8):\n@@ -3634,9 +3607,16 @@ def less_equal(x1, x2):\n \n class Linspace(Operation):\n     def __init__(\n-        self, num=50, endpoint=True, retstep=False, dtype=None, axis=0\n+        self,\n+        num=50,\n+        endpoint=True,\n+        retstep=False,\n+        dtype=None,\n+        axis=0,\n+        *,\n+        name=None,\n     ):\n-        super().__init__()\n+        super().__init__(name=name)\n         self.num = num\n         self.endpoint = endpoint\n         self.retstep = retstep\n@@ -3980,8 +3960,10 @@ def logical_or(x1, x2):\n \n \n class Logspace(Operation):\n-    def __init__(self, num=50, endpoint=True, base=10, dtype=None, axis=0):\n-        super().__init__()\n+    def __init__(\n+        self, num=50, endpoint=True, base=10, dtype=None, axis=0, *, name=None\n+    ):\n+        super().__init__(name=name)\n         self.num = num\n         self.endpoint = endpoint\n         self.base = base\n@@ -4114,8 +4096,8 @@ def matmul(x1, x2):\n \n \n class Max(Operation):\n-    def __init__(self, axis=None, keepdims=False, initial=None):\n-        super().__init__()\n+    def __init__(self, axis=None, keepdims=False, initial=None, *, name=None):\n+        super().__init__(name=name)\n         if isinstance(axis, int):\n             self.axis = [axis]\n         else:\n@@ -4194,8 +4176,8 @@ def maximum(x1, x2):\n \n \n class Median(Operation):\n-    def __init__(self, axis=None, keepdims=False):\n-        super().__init__()\n+    def __init__(self, axis=None, keepdims=False, *, name=None):\n+        super().__init__(name=name)\n         if isinstance(axis, int):\n             axis = [axis]\n         self.axis = axis\n@@ -4236,8 +4218,8 @@ def median(x, axis=None, keepdims=False):\n \n \n class Meshgrid(Operation):\n-    def __init__(self, indexing=\"xy\"):\n-        super().__init__()\n+    def __init__(self, indexing=\"xy\", *, name=None):\n+        super().__init__(name=name)\n         if indexing not in (\"xy\", \"ij\"):\n             raise ValueError(\n                 \"Valid values for `indexing` are 'xy' and 'ij', \"\n@@ -4307,8 +4289,8 @@ def meshgrid(*x, indexing=\"xy\"):\n \n \n class Min(Operation):\n-    def __init__(self, axis=None, keepdims=False, initial=None):\n-        super().__init__()\n+    def __init__(self, axis=None, keepdims=False, initial=None, *, name=None):\n+        super().__init__(name=name)\n         if isinstance(axis, int):\n             self.axis = [axis]\n         else:\n@@ -4420,8 +4402,8 @@ def mod(x1, x2):\n \n \n class Moveaxis(Operation):\n-    def __init__(self, source, destination):\n-        super().__init__()\n+    def __init__(self, source, destination, *, name=None):\n+        super().__init__(name=name)\n         if isinstance(source, int):\n             self.source = [source]\n         else:\n@@ -4484,8 +4466,8 @@ def moveaxis(x, source, destination):\n \n \n class NanToNum(Operation):\n-    def __init__(self, nan=0.0, posinf=None, neginf=None):\n-        super().__init__()\n+    def __init__(self, nan=0.0, posinf=None, neginf=None, *, name=None):\n+        super().__init__(name=name)\n         self.nan = nan\n         self.posinf = posinf\n         self.neginf = neginf\n@@ -4602,8 +4584,8 @@ def not_equal(x1, x2):\n \n \n class OnesLike(Operation):\n-    def __init__(self, dtype=None):\n-        super().__init__()\n+    def __init__(self, dtype=None, *, name=None):\n+        super().__init__(name=name)\n         self.dtype = None if dtype is None else backend.standardize_dtype(dtype)\n \n     def call(self, x):\n@@ -4636,8 +4618,8 @@ def ones_like(x, dtype=None):\n \n \n class ZerosLike(Operation):\n-    def __init__(self, dtype=None):\n-        super().__init__()\n+    def __init__(self, dtype=None, *, name=None):\n+        super().__init__(name=name)\n         self.dtype = None if dtype is None else backend.standardize_dtype(dtype)\n \n     def call(self, x):\n@@ -4720,8 +4702,8 @@ def outer(x1, x2):\n \n \n class Pad(Operation):\n-    def __init__(self, pad_width, mode=\"constant\"):\n-        super().__init__()\n+    def __init__(self, pad_width, mode=\"constant\", *, name=None):\n+        super().__init__(name=name)\n         self.pad_width = self._process_pad_width(pad_width)\n         self.mode = mode\n \n@@ -4817,8 +4799,8 @@ def pad(x, pad_width, mode=\"constant\", constant_values=None):\n \n \n class Prod(Operation):\n-    def __init__(self, axis=None, keepdims=False, dtype=None):\n-        super().__init__()\n+    def __init__(self, axis=None, keepdims=False, dtype=None, *, name=None):\n+        super().__init__(name=name)\n         if isinstance(axis, int):\n             self.axis = [axis]\n         else:\n@@ -4876,8 +4858,10 @@ def prod(x, axis=None, keepdims=False, dtype=None):\n \n \n class Quantile(Operation):\n-    def __init__(self, axis=None, method=\"linear\", keepdims=False):\n-        super().__init__()\n+    def __init__(\n+        self, axis=None, method=\"linear\", keepdims=False, *, name=None\n+    ):\n+        super().__init__(name=name)\n         if isinstance(axis, int):\n             axis = [axis]\n         self.axis = axis\n@@ -4974,9 +4958,9 @@ def ravel(x):\n \n \n class UnravelIndex(Operation):\n-    def __init__(self, shape):\n+    def __init__(self, shape, *, name=None):\n+        super().__init__(name=name)\n         self.shape = shape\n-        self._inbound_nodes = []\n \n     def call(self, indices):\n         return backend.numpy.unravel_index(indices, self.shape)\n@@ -5079,8 +5063,8 @@ def reciprocal(x):\n \n \n class Repeat(Operation):\n-    def __init__(self, repeats, axis=None):\n-        super().__init__()\n+    def __init__(self, repeats, axis=None, *, name=None):\n+        super().__init__(name=name)\n         self.axis = axis\n         self.repeats = repeats\n \n@@ -5149,8 +5133,8 @@ def repeat(x, repeats, axis=None):\n \n \n class Reshape(Operation):\n-    def __init__(self, newshape):\n-        super().__init__()\n+    def __init__(self, newshape, *, name=None):\n+        super().__init__(name=name)\n         self.newshape = newshape\n \n     def call(self, x):\n@@ -5183,8 +5167,8 @@ def reshape(x, newshape):\n \n \n class Roll(Operation):\n-    def __init__(self, shift, axis=None):\n-        super().__init__()\n+    def __init__(self, shift, axis=None, *, name=None):\n+        super().__init__(name=name)\n         self.shift = shift\n         self.axis = axis\n \n@@ -5217,8 +5201,8 @@ def roll(x, shift, axis=None):\n \n \n class Round(Operation):\n-    def __init__(self, decimals=0):\n-        super().__init__()\n+    def __init__(self, decimals=0, *, name=None):\n+        super().__init__(name=name)\n         self.decimals = decimals\n \n     def call(self, x):\n@@ -5246,8 +5230,8 @@ def round(x, decimals=0):\n \n \n class SearchSorted(Operation):\n-    def __init__(self, side=\"left\"):\n-        super().__init__()\n+    def __init__(self, side=\"left\", *, name=None):\n+        super().__init__(name=name)\n         self.side = side\n \n     def call(self, sorted_sequence, values):\n@@ -5427,8 +5411,8 @@ def size(x):\n \n \n class Sort(Operation):\n-    def __init__(self, axis=-1):\n-        super().__init__()\n+    def __init__(self, axis=-1, *, name=None):\n+        super().__init__(name=name)\n         self.axis = axis\n \n     def call(self, x):\n@@ -5456,8 +5440,8 @@ def sort(x, axis=-1):\n \n \n class Split(Operation):\n-    def __init__(self, indices_or_sections, axis=0):\n-        super().__init__()\n+    def __init__(self, indices_or_sections, axis=0, *, name=None):\n+        super().__init__(name=name)\n         if not isinstance(indices_or_sections, int):\n             indices_or_sections = tuple(indices_or_sections)\n         self.indices_or_sections = indices_or_sections\n@@ -5525,8 +5509,8 @@ def split(x, indices_or_sections, axis=0):\n \n \n class Stack(Operation):\n-    def __init__(self, axis=0):\n-        super().__init__()\n+    def __init__(self, axis=0, *, name=None):\n+        super().__init__(name=name)\n         self.axis = axis\n \n     def call(self, x):\n@@ -5576,8 +5560,8 @@ def stack(x, axis=0):\n \n \n class Std(Operation):\n-    def __init__(self, axis=None, keepdims=False):\n-        super().__init__()\n+    def __init__(self, axis=None, keepdims=False, *, name=None):\n+        super().__init__(name=name)\n         if isinstance(axis, int):\n             self.axis = [axis]\n         else:\n@@ -5618,8 +5602,8 @@ def std(x, axis=None, keepdims=False):\n \n \n class Swapaxes(Operation):\n-    def __init__(self, axis1, axis2):\n-        super().__init__()\n+    def __init__(self, axis1, axis2, *, name=None):\n+        super().__init__(name=name)\n \n         self.axis1 = axis1\n         self.axis2 = axis2\n@@ -5653,8 +5637,8 @@ def swapaxes(x, axis1, axis2):\n \n \n class Take(Operation):\n-    def __init__(self, axis=None):\n-        super().__init__()\n+    def __init__(self, axis=None, *, name=None):\n+        super().__init__(name=name)\n         self.axis = axis\n \n     def call(self, x, indices):\n@@ -5696,8 +5680,8 @@ def take(x, indices, axis=None):\n \n \n class TakeAlongAxis(Operation):\n-    def __init__(self, axis=None):\n-        super().__init__()\n+    def __init__(self, axis=None, *, name=None):\n+        super().__init__(name=name)\n         self.axis = axis\n \n     def call(self, x, indices):\n@@ -5792,8 +5776,8 @@ def tanh(x):\n \n \n class Tensordot(Operation):\n-    def __init__(self, axes=2):\n-        super().__init__()\n+    def __init__(self, axes=2, *, name=None):\n+        super().__init__(name=name)\n         self.axes = axes\n \n     def call(self, x1, x2):\n@@ -5859,8 +5843,8 @@ def tensordot(x1, x2, axes=2):\n \n \n class Tile(Operation):\n-    def __init__(self, repeats):\n-        super().__init__()\n+    def __init__(self, repeats, *, name=None):\n+        super().__init__(name=name)\n         self.repeats = repeats\n \n     def call(self, x):\n@@ -5912,8 +5896,8 @@ def tile(x, repeats):\n \n \n class Trace(Operation):\n-    def __init__(self, offset=0, axis1=0, axis2=1):\n-        super().__init__()\n+    def __init__(self, offset=0, axis1=0, axis2=1, *, name=None):\n+        super().__init__(name=name)\n         self.offset = offset\n         self.axis1 = axis1\n         self.axis2 = axis2\n@@ -5987,8 +5971,8 @@ def tri(N, M=None, k=0, dtype=None):\n \n \n class Tril(Operation):\n-    def __init__(self, k=0):\n-        super().__init__()\n+    def __init__(self, k=0, *, name=None):\n+        super().__init__(name=name)\n         self.k = k\n \n     def call(self, x):\n@@ -6019,8 +6003,8 @@ def tril(x, k=0):\n \n \n class Triu(Operation):\n-    def __init__(self, k=0):\n-        super().__init__()\n+    def __init__(self, k=0, *, name=None):\n+        super().__init__(name=name)\n         self.k = k\n \n     def call(self, x):\n@@ -6051,9 +6035,6 @@ def triu(x, k=0):\n \n \n class Trunc(Operation):\n-    def __init__(self):\n-        super().__init__()\n-\n     def call(self, x):\n         return backend.numpy.trunc(x)\n \n@@ -6573,8 +6554,8 @@ def sqrt(x):\n \n \n class Squeeze(Operation):\n-    def __init__(self, axis=None):\n-        super().__init__()\n+    def __init__(self, axis=None, *, name=None):\n+        super().__init__(name=name)\n         self.axis = axis\n \n     def call(self, x):\n@@ -6618,8 +6599,8 @@ def squeeze(x, axis=None):\n \n \n class Transpose(Operation):\n-    def __init__(self, axes=None):\n-        super().__init__()\n+    def __init__(self, axes=None, *, name=None):\n+        super().__init__(name=name)\n         self.axes = axes\n \n     def call(self, x):\n@@ -6651,8 +6632,8 @@ def transpose(x, axes=None):\n \n \n class Mean(Operation):\n-    def __init__(self, axis=None, keepdims=False):\n-        super().__init__()\n+    def __init__(self, axis=None, keepdims=False, *, name=None):\n+        super().__init__(name=name)\n         if isinstance(axis, int):\n             axis = [axis]\n         self.axis = axis\n@@ -6696,8 +6677,8 @@ def mean(x, axis=None, keepdims=False):\n \n \n class Var(Operation):\n-    def __init__(self, axis=None, keepdims=False):\n-        super().__init__()\n+    def __init__(self, axis=None, keepdims=False, *, name=None):\n+        super().__init__(name=name)\n         if isinstance(axis, int):\n             axis = [axis]\n         self.axis = axis\n@@ -6734,8 +6715,8 @@ def var(x, axis=None, keepdims=False):\n \n \n class Sum(Operation):\n-    def __init__(self, axis=None, keepdims=False):\n-        super().__init__()\n+    def __init__(self, axis=None, keepdims=False, *, name=None):\n+        super().__init__(name=name)\n         if isinstance(axis, int):\n             axis = [axis]\n         self.axis = axis\n@@ -6886,8 +6867,8 @@ def logical_xor(x1, x2):\n \n \n class Correlate(Operation):\n-    def __init__(self, mode=\"valid\"):\n-        super().__init__()\n+    def __init__(self, mode=\"valid\", *, name=None):\n+        super().__init__(name=name)\n         self.mode = mode\n \n     def call(self, x1, x2):\n@@ -6953,9 +6934,6 @@ def correlate(x1, x2, mode=\"valid\"):\n \n \n class Select(Operation):\n-    def __init__(self):\n-        super().__init__()\n-\n     def call(self, condlist, choicelist, default=0):\n         return backend.numpy.select(condlist, choicelist, default)\n \n@@ -7020,9 +6998,6 @@ def select(condlist, choicelist, default=0):\n \n \n class Slogdet(Operation):\n-    def __init__(self):\n-        super().__init__()\n-\n     def call(self, x):\n         return backend.numpy.slogdet(x)\n \n@@ -7052,8 +7027,8 @@ def slogdet(x):\n \n \n class Argpartition(Operation):\n-    def __init__(self, kth, axis=-1):\n-        super().__init__()\n+    def __init__(self, kth, axis=-1, *, name=None):\n+        super().__init__(name=name)\n         if not isinstance(kth, int):\n             raise ValueError(f\"kth must be an integer. Received:kth = {kth}\")\n         self.kth = kth\n@@ -7094,8 +7069,8 @@ def argpartition(x, kth, axis=-1):\n \n \n class Histogram(Operation):\n-    def __init__(self, bins=10, range=None):\n-        super().__init__()\n+    def __init__(self, bins=10, range=None, *, name=None):\n+        super().__init__(name=name)\n \n         if not isinstance(bins, int):\n             raise TypeError(\"bins must be of type `int`\")\n\n@@ -16,6 +16,13 @@ from keras.src.utils.naming import to_snake_case\n \n OPS_MODULES = (\"core\", \"image\", \"linalg\", \"math\", \"nn\", \"numpy\")\n \n+SELF_PARAMETER = inspect.Parameter(\n+    \"self\", inspect.Parameter.POSITIONAL_OR_KEYWORD\n+)\n+NAME_PARAMETER = inspect.Parameter(\n+    \"name\", inspect.Parameter.KEYWORD_ONLY, default=None\n+)\n+\n # Parameters with these names are known to always be static (non-tensors).\n STATIC_PARAMETER_NAMES = frozenset(\n     {\"axis\", \"axes\", \"dtype\", \"shape\", \"newshape\", \"sparse\", \"ragged\"}\n@@ -84,6 +91,45 @@ class OperationTest(testing.TestCase):\n                     f\"Not exported as `keras.ops.{module_name}.{name}`\",\n                 )\n \n+            # ==== Check handling of name in __init__ ====\n+            # - op class `__init__` should have a `name` parameter at the end,\n+            #   which should be keyword only and with a default value of `None`\n+            # - op class `__init__` should call `super().__init__(name=name)`\n+\n+            if op_class.__init__ is Operation.__init__:\n+                # `name` is not keyword only in `Operation`, use this instead.\n+                class_init_signature = inspect.Signature(\n+                    [SELF_PARAMETER, NAME_PARAMETER]\n+                )\n+            else:\n+                class_init_signature = inspect.signature(op_class.__init__)\n+\n+                # Check call to super.\n+                self.assertContainsSubsequence(\n+                    inspect.getsource(op_class.__init__),\n+                    \"super().__init__(name=name)\",\n+                    f\"`{op_class.__name__}.__init__` is not calling \"\n+                    \"`super().__init__(name=name)`\",\n+                )\n+\n+            static_parameters = list(class_init_signature.parameters.values())\n+            # Remove `self`.\n+            static_parameters = static_parameters[1:]\n+            name_index = -1\n+            if static_parameters[-1].kind == inspect.Parameter.VAR_KEYWORD:\n+                # When there is a `**kwargs`, `name` appears before.\n+                name_index = -2\n+            # Verify `name` parameter is as expected.\n+            self.assertEqual(\n+                static_parameters[name_index],\n+                NAME_PARAMETER,\n+                f\"The last parameter of `{op_class.__name__}.__init__` \"\n+                \"should be `name`, should be a keyword only, and should \"\n+                \"have a default value of `None`\",\n+            )\n+            # Remove `name`, it's not part of the op signature.\n+            static_parameters.pop(name_index)\n+\n             # ==== Check static parameters ====\n             # Static parameters are declared in the class' `__init__`.\n             # Dynamic parameters are declared in the class' `call` method.\n@@ -96,16 +142,6 @@ class OperationTest(testing.TestCase):\n                 inspect.signature(op_class.call).parameters.values()\n             )[1:]  # Remove self\n \n-            if op_class.__init__ is Operation.__init__:\n-                # This op class has no static parameters. Do not use the `name`\n-                # and `dtype` parameters from the `__init__` of `Operation`.\n-                static_parameters = []\n-            else:\n-                class_init_signature = inspect.signature(op_class.__init__)\n-                static_parameters = list(\n-                    class_init_signature.parameters.values()\n-                )[1:]  # Remove self\n-\n             op_signature = inspect.signature(op_function)\n \n             for p in dynamic_parameters + static_parameters:\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
