{"custom_id": "keras#3f90361fee640fcf777518cf04e88a5fe7d2f55f", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 9 | Lines Deleted: 4 | Files Changed: 2 | Hunks: 5 | Methods Changed: 3 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 13 | Churn Cumulative: 11146 | Contributors (this commit): 22 | Commits (past 90d): 16 | Contributors (cumulative): 26 | DMM Complexity: 0.75\n\nDIFF:\n@@ -2116,6 +2116,7 @@ class AUC(Metric):\n               summation_method, list(metrics_utils.AUCSummationMethod)))\n \n     # Update properties.\n+    self._init_from_thresholds = thresholds is not None\n     if thresholds is not None:\n       # If specified, use the supplied thresholds.\n       self.num_thresholds = len(thresholds) + 2\n@@ -2444,13 +2445,15 @@ class AUC(Metric):\n         'num_thresholds': self.num_thresholds,\n         'curve': self.curve.value,\n         'summation_method': self.summation_method.value,\n-        # We remove the endpoint thresholds as an inverse of how the thresholds\n-        # were initialized. This ensures that a metric initialized from this\n-        # config has the same thresholds.\n-        'thresholds': self.thresholds[1:-1],\n         'multi_label': self.multi_label,\n         'label_weights': label_weights\n     }\n+    # optimization to avoid serializing a large number of generated thresholds\n+    if self._init_from_thresholds:\n+      # We remove the endpoint thresholds as an inverse of how the thresholds\n+      # were initialized. This ensures that a metric initialized from this\n+      # config has the same thresholds.\n+      config['thresholds'] = self.thresholds[1:-1]\n     base_config = super(AUC, self).get_config()\n     return dict(list(base_config.items()) + list(config.items()))\n \n\n@@ -1237,6 +1237,7 @@ class AUCTest(tf.test.TestCase, parameterized.TestCase):\n     self.assertEqual(auc_obj.summation_method,\n                      metrics_utils.AUCSummationMethod.MAJORING)\n     old_config = auc_obj.get_config()\n+    self.assertNotIn('thresholds', old_config)\n     self.assertDictEqual(old_config, json.loads(json.dumps(old_config)))\n \n     # Check save and restore config.\n@@ -1249,6 +1250,7 @@ class AUCTest(tf.test.TestCase, parameterized.TestCase):\n     self.assertEqual(auc_obj2.summation_method,\n                      metrics_utils.AUCSummationMethod.MAJORING)\n     new_config = auc_obj2.get_config()\n+    self.assertNotIn('thresholds', new_config)\n     self.assertDictEqual(old_config, new_config)\n     self.assertAllClose(auc_obj.thresholds, auc_obj2.thresholds)\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "keras#2f1149dbdb96c10c9839f0d909876aef2e362c02", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 30 | Lines Deleted: 2 | Files Changed: 2 | Hunks: 5 | Methods Changed: 2 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 32 | Churn Cumulative: 4222 | Contributors (this commit): 31 | Commits (past 90d): 7 | Contributors (cumulative): 35 | DMM Complexity: 0.8333333333333334\n\nDIFF:\n@@ -24,6 +24,7 @@ import functools\n import hashlib\n import multiprocessing.dummy\n import os\n+import pathlib\n import queue\n import random\n import shutil\n@@ -227,8 +228,13 @@ def get_file(fname=None,\n       raise ValueError(\"Invalid origin '{}'\".format(origin))\n \n   if untar:\n+    if fname.endswith('.tar.gz'):\n+      fname = pathlib.Path(fname)\n+      # The 2 `.with_suffix()` are because of `.tar.gz` as pathlib\n+      # considers it as 2 suffixes.\n+      fname = fname.with_suffix('').with_suffix('')\n+      fname = str(fname)\n     untar_fpath = os.path.join(datadir, fname)\n-    if not untar_fpath.endswith('.tar.gz'):\n     fpath = untar_fpath + '.tar.gz'\n   else:\n     fpath = os.path.join(datadir, fname)\n\n@@ -28,7 +28,7 @@ import keras\n from keras.utils import data_utils\n \n \n-class TestGetFileAndValidateIt(tf.test.TestCase):\n+class TestGetFile(tf.test.TestCase):\n \n   def test_get_file_and_validate_it(self):\n     \"\"\"Tests get_file from a url, plus extraction and validation.\n@@ -104,6 +104,28 @@ class TestGetFileAndValidateIt(tf.test.TestCase):\n     with self.assertRaisesRegexp(ValueError, 'Please specify the \"origin\".*'):\n       _ = keras.utils.data_utils.get_file()\n \n+  def test_get_file_with_tgz_extension(self):\n+    \"\"\"Tests get_file from a url, plus extraction and validation.\"\"\"\n+    dest_dir = self.get_temp_dir()\n+    orig_dir = self.get_temp_dir()\n+\n+    text_file_path = os.path.join(orig_dir, 'test.txt')\n+    tar_file_path = os.path.join(orig_dir, 'test.tar.gz')\n+\n+    with open(text_file_path, 'w') as text_file:\n+      text_file.write('Float like a butterfly, sting like a bee.')\n+\n+    with tarfile.open(tar_file_path, 'w:gz') as tar_file:\n+      tar_file.add(text_file_path)\n+\n+    origin = urllib.parse.urljoin(\n+        'file://', urllib.request.pathname2url(os.path.abspath(tar_file_path)))\n+\n+    path = keras.utils.data_utils.get_file(\n+        'test.txt.tar.gz', origin, untar=True, cache_subdir=dest_dir)\n+    self.assertEndsWith(path, '.txt')\n+    self.assertTrue(os.path.exists(path))\n+\n \n class TestSequence(keras.utils.data_utils.Sequence):\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "keras#586c4ad6d2292eff7d16ddcfd769f1f5fbc21060", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 113 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 2 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 113 | Churn Cumulative: 476 | Contributors (this commit): 3 | Commits (past 90d): 3 | Contributors (cumulative): 3 | DMM Complexity: None\n\nDIFF:\n@@ -121,6 +121,59 @@ class BatchNormalization(batch_normalization_v1.BatchNormalization, base.Layer):\n       [Ioffe,\n         2017](http://papers.nips.cc/paper/6790-batch-renormalization-towards-reducing-minibatch-dependence-in-batch-normalized-models)\n       ([pdf](http://papers.nips.cc/paper/6790-batch-renormalization-towards-reducing-minibatch-dependence-in-batch-normalized-models.pdf))\n+\n+\n+  @compatibility(TF2)\n+  Warning: This API is not compatible with eager execution or `tf.function`.\n+\n+  Please refer to [tf.layers section of the migration guide]\n+  (https://www.tensorflow.org/guide/migrate#models_based_on_tflayers)\n+  to migrate a TensorFlow v1 model to Keras. The corresponding TensorFlow v2\n+  layer is `tf.keras.layers.BatchNormalization`.\n+\n+\n+  #### Structural Mapping to Native TF2\n+\n+  None of the supported arguments have changed name.\n+\n+  Before:\n+\n+  ```python\n+   bn = tf.compat.v1.layers.BatchNormalization()\n+  ```\n+\n+  After:\n+\n+  ```python\n+   bn = tf.keras.layers.BatchNormalization()\n+  ```\n+\n+  #### How to Map Arguments\n+\n+  TF1 Arg Name              | TF2 Arg Name              | Note\n+  :------------------------ | :------------------------ | :---------------\n+  `name`                    | `name`                    | Layer base class\n+  `trainable`               | `trainable`               | Layer base class\n+  `axis`                    | `axis`                    | -\n+  `momentum`                | `momentum`                | -\n+  `epsilon`                 | `epsilon`                 | -\n+  `center`                  | `center`                  | -\n+  `scale`                   | `scale`                   | -\n+  `beta_initializer`        | `beta_initializer`        | -\n+  `gamma_initializer`       | `gamma_initializer`       | -\n+  `moving_mean_initializer` | `moving_mean_initializer` | -\n+  `beta_regularizer`        | `beta_regularizer'        | -\n+  `gamma_regularizer`       | `gamma_regularizer'       | -\n+  `beta_constraint`         | `beta_constraint'         | -\n+  `gamma_constraint`        | `gamma_constraint'        | -\n+  `renorm`                  | Not supported             | -\n+  `renorm_clipping`         | Not supported             | -\n+  `renorm_momentum`         | Not supported             | -\n+  `fused`                   | Not supported             | -\n+  `virtual_batch_size`      | Not supported             | -\n+  `adjustment`              | Not supported             | -\n+\n+  @end_compatibility\n   \"\"\"\n \n   def __init__(self,\n@@ -306,6 +359,66 @@ def batch_normalization(inputs,\n       [Ioffe,\n       2017](http://papers.nips.cc/paper/6790-batch-renormalization-towards-reducing-minibatch-dependence-in-batch-normalized-models)\n       ([pdf](http://papers.nips.cc/paper/6790-batch-renormalization-towards-reducing-minibatch-dependence-in-batch-normalized-models.pdf))\n+\n+  @compatibility(TF2)\n+  Warning: This API is not compatible with eager execution or `tf.function`.\n+\n+  Please refer to [tf.layers section of the migration guide]\n+  (https://www.tensorflow.org/guide/migrate#models_based_on_tflayers)\n+  to migrate a TensorFlow v1 model to Keras. The corresponding TensorFlow v2\n+  layer is `tf.keras.layers.BatchNormalization`.\n+\n+  The batch updating pattern with\n+  `tf.control_dependencies(tf.GraphKeys.UPDATE_OPS)` should not be used in\n+  native TF2. Consult the `tf.keras.layers.BatchNormalization` documentation\n+  for further information.\n+\n+  #### Structural Mapping to Native TF2\n+\n+  None of the supported arguments have changed name.\n+\n+  Before:\n+\n+  ```python\n+   x_norm = tf.compat.v1.layers.batch_normalization(x)\n+  ```\n+\n+  After:\n+\n+  To migrate code using TF1 functional layers use the [Keras Functional API]\n+  (https://www.tensorflow.org/guide/keras/functional):\n+\n+  ```python\n+   x = tf.keras.Input(shape=(28, 28, 1),)\n+   y = tf.keras.layers.BatchNormalization()(x)\n+   model = tf.keras.Model(x, y)\n+  ```\n+  #### How to Map Arguments\n+\n+  TF1 Arg Name              | TF2 Arg Name              | Note\n+  :------------------------ | :------------------------ | :---------------\n+  `name`                    | `name`                    | Layer base class\n+  `trainable`               | `trainable`               | Layer base class\n+  `axis`                    | `axis`                    | -\n+  `momentum`                | `momentum`                | -\n+  `epsilon`                 | `epsilon`                 | -\n+  `center`                  | `center`                  | -\n+  `scale`                   | `scale`                   | -\n+  `beta_initializer`        | `beta_initializer`        | -\n+  `gamma_initializer`       | `gamma_initializer`       | -\n+  `moving_mean_initializer` | `moving_mean_initializer` | -\n+  `beta_regularizer`        | `beta_regularizer'        | -\n+  `gamma_regularizer`       | `gamma_regularizer'       | -\n+  `beta_constraint`         | `beta_constraint'         | -\n+  `gamma_constraint`        | `gamma_constraint'        | -\n+  `renorm`                  | Not supported             | -\n+  `renorm_clipping`         | Not supported             | -\n+  `renorm_momentum`         | Not supported             | -\n+  `fused`                   | Not supported             | -\n+  `virtual_batch_size`      | Not supported             | -\n+  `adjustment`              | Not supported             | -\n+\n+  @end_compatibility\n   \"\"\"\n   warnings.warn(\n       '`tf.layers.batch_normalization` is deprecated and '\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "keras#a77c3f73c676f3f3e9e56f81c7997c2a485dc465", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 26 | Lines Deleted: 5 | Files Changed: 2 | Hunks: 2 | Methods Changed: 3 | Complexity Δ (Sum/Max): 1/2 | Churn Δ: 31 | Churn Cumulative: 6589 | Contributors (this commit): 5 | Commits (past 90d): 35 | Contributors (cumulative): 9 | DMM Complexity: 1.0\n\nDIFF:\n@@ -411,11 +411,7 @@ class IndexLookup(base_preprocessing_layer.PreprocessingLayer):\n     should_have_oov = (self.num_oov_indices > 0)\n     expected_oov = [self.oov_token] * self.num_oov_indices\n     found_oov = vocabulary[oov_start:token_start]\n-    has_oov = should_have_oov and found_oov == expected_oov\n-    # If we get a numpy array, then has_oov may end up being a numpy array\n-    # instead of a bool. Fix this by collapsing the variable if it's not bool.\n-    if not isinstance(has_oov, bool):\n-      has_oov = any(has_oov)\n+    has_oov = should_have_oov and np.array_equal(found_oov, expected_oov)\n \n     if all([should_have_mask, has_mask, should_have_oov]) and not has_oov:\n       raise ValueError(\n\n@@ -1535,6 +1535,31 @@ class IndexLookupVocabularyTest(keras_parameterized.TestCase,\n     self.assertAllEqual(returned_vocab, [\"wind\", \"and\", \"fire\"])\n     self.assertAllEqual(layer.vocabulary_size(), 5)\n \n+  def test_vocab_multi_oov(self):\n+    vocab_data = [\"\", \"[OOV]\", \"[OOV]\", \"wind\", \"and\", \"fire\"]\n+    layer = index_lookup.IndexLookup(\n+        max_tokens=None,\n+        num_oov_indices=2,\n+        mask_token=\"\",\n+        oov_token=\"[OOV]\",\n+        dtype=tf.string)\n+    layer.set_vocabulary(vocab_data)\n+    returned_vocab = layer.get_vocabulary()\n+    self.assertAllEqual(returned_vocab, vocab_data)\n+\n+  def test_vocab_multi_oov_not_present(self):\n+    vocab_data = [\"wind\", \"and\", \"fire\"]\n+    layer = index_lookup.IndexLookup(\n+        max_tokens=None,\n+        num_oov_indices=10,\n+        mask_token=\"\",\n+        oov_token=\"[OOV]\",\n+        dtype=tf.string)\n+    layer.set_vocabulary(vocab_data)\n+    returned_vocab = layer.get_vocabulary()\n+    self.assertAllEqual(returned_vocab,\n+                        [\"\"] + [\"[OOV]\"] * 10 + [\"wind\", \"and\", \"fire\"])\n+\n   def test_vocab_with_max_cap(self):\n     vocab_data = [\"\", \"[OOV]\", \"wind\", \"and\", \"fire\"]\n     layer = index_lookup.IndexLookup(\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "keras#4b91b6c3811c19b9593c750018a80f6427d6b365", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 4 | Lines Deleted: 9 | Files Changed: 2 | Hunks: 5 | Methods Changed: 3 | Complexity Δ (Sum/Max): -1/0 | Churn Δ: 13 | Churn Cumulative: 11159 | Contributors (this commit): 22 | Commits (past 90d): 18 | Contributors (cumulative): 26 | DMM Complexity: 0.25\n\nDIFF:\n@@ -2116,7 +2116,6 @@ class AUC(Metric):\n               summation_method, list(metrics_utils.AUCSummationMethod)))\n \n     # Update properties.\n-    self._init_from_thresholds = thresholds is not None\n     if thresholds is not None:\n       # If specified, use the supplied thresholds.\n       self.num_thresholds = len(thresholds) + 2\n@@ -2445,15 +2444,13 @@ class AUC(Metric):\n         'num_thresholds': self.num_thresholds,\n         'curve': self.curve.value,\n         'summation_method': self.summation_method.value,\n-        'multi_label': self.multi_label,\n-        'label_weights': label_weights\n-    }\n-    # optimization to avoid serializing a large number of generated thresholds\n-    if self._init_from_thresholds:\n         # We remove the endpoint thresholds as an inverse of how the thresholds\n         # were initialized. This ensures that a metric initialized from this\n         # config has the same thresholds.\n-      config['thresholds'] = self.thresholds[1:-1]\n+        'thresholds': self.thresholds[1:-1],\n+        'multi_label': self.multi_label,\n+        'label_weights': label_weights\n+    }\n     base_config = super(AUC, self).get_config()\n     return dict(list(base_config.items()) + list(config.items()))\n \n\n@@ -1237,7 +1237,6 @@ class AUCTest(tf.test.TestCase, parameterized.TestCase):\n     self.assertEqual(auc_obj.summation_method,\n                      metrics_utils.AUCSummationMethod.MAJORING)\n     old_config = auc_obj.get_config()\n-    self.assertNotIn('thresholds', old_config)\n     self.assertDictEqual(old_config, json.loads(json.dumps(old_config)))\n \n     # Check save and restore config.\n@@ -1250,7 +1249,6 @@ class AUCTest(tf.test.TestCase, parameterized.TestCase):\n     self.assertEqual(auc_obj2.summation_method,\n                      metrics_utils.AUCSummationMethod.MAJORING)\n     new_config = auc_obj2.get_config()\n-    self.assertNotIn('thresholds', new_config)\n     self.assertDictEqual(old_config, new_config)\n     self.assertAllClose(auc_obj.thresholds, auc_obj2.thresholds)\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "keras#d6916533c01a175012638c33014318f0137a9a21", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 639 | Contributors (this commit): 4 | Commits (past 90d): 4 | Contributors (cumulative): 4 | DMM Complexity: None\n\nDIFF:\n@@ -424,10 +424,10 @@ class MultiHeadAttention(Layer):\n     if attention_mask is not None:\n       # The expand dim happens starting from the `num_heads` dimension,\n       # (<batch_dims>, num_heads, <query_attention_dims, key_attention_dims>)\n-      mask_expansion_axes = [-len(self._attention_axes) * 2 - 1]\n+      mask_expansion_axis = -len(self._attention_axes) * 2 - 1\n       for _ in range(len(attention_scores.shape) - len(attention_mask.shape)):\n         attention_mask = tf.expand_dims(\n-            attention_mask, axis=mask_expansion_axes)\n+            attention_mask, axis=mask_expansion_axis)\n     return self._softmax(attention_scores, attention_mask)\n \n   def _compute_attention(self,\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "keras#55f836fc4e7283f5a6403c8c0443889cb8e91b29", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 19 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 3 | Complexity Δ (Sum/Max): 3/3 | Churn Δ: 19 | Churn Cumulative: 377 | Contributors (this commit): 3 | Commits (past 90d): 3 | Contributors (cumulative): 3 | DMM Complexity: 1.0\n\nDIFF:\n@@ -106,6 +106,25 @@ class ShardedVariableTest(tf.test.TestCase):\n     checkpoint_deps = set(dep.ref for dep in layer._checkpoint_dependencies)\n     self.assertEqual(checkpoint_deps, set([layer.w, layer.b]))\n \n+  def test_keras_metrics(self):\n+    with self.strategy.scope():\n+      auc = keras.metrics.AUC(num_thresholds=10)\n+\n+    @tf.function\n+    def update():\n+      auc.update_state([0, 0, 1, 1], [0, 0.5, 0.3, 0.9])\n+\n+    @tf.function\n+    def reset():\n+      auc.reset_state()\n+\n+    update()\n+    self.assertEqual(auc.result(), 0.75)\n+    reset()\n+    self.assertEqual(auc.result(), 0.0)\n+\n+    self.assertTrue(hasattr(auc.true_positives, 'variables'))\n+\n   def test_saved_model(self):\n \n     def create_model():\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "keras#a5c6af3fc4bab3a1dee96860022bf4bee6780c10", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 2 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 565 | Contributors (this commit): 4 | Commits (past 90d): 3 | Contributors (cumulative): 4 | DMM Complexity: None\n\nDIFF:\n@@ -357,10 +357,10 @@ class AdditiveAttention(BaseDenseAttention):\n   shape `[batch_size, Tv, dim]` and `key` tensor of shape\n   `[batch_size, Tv, dim]`. The calculation follows the steps:\n \n-  1. Reshape `query` and `value` into shapes `[batch_size, Tq, 1, dim]`\n+  1. Reshape `query` and `key` into shapes `[batch_size, Tq, 1, dim]`\n      and `[batch_size, 1, Tv, dim]` respectively.\n   2. Calculate scores with shape `[batch_size, Tq, Tv]` as a non-linear\n-     sum: `scores = tf.reduce_sum(tf.tanh(query + value), axis=-1)`\n+     sum: `scores = tf.reduce_sum(tf.tanh(query + key), axis=-1)`\n   3. Use scores to calculate a distribution with shape\n      `[batch_size, Tq, Tv]`: `distribution = tf.nn.softmax(scores)`.\n   4. Use `distribution` to create a linear combination of `value` with\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "keras#5e3ff5a4be0bdf3263b8d74102b76e7ae34b40b6", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 412 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 14 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 412 | Churn Cumulative: 1975 | Contributors (this commit): 3 | Commits (past 90d): 2 | Contributors (cumulative): 3 | DMM Complexity: None\n\nDIFF:\n@@ -81,6 +81,32 @@ class Conv1D(keras_layers.Conv1D, base.Layer):\n     trainable: Boolean, if `True` also add variables to the graph collection\n       `GraphKeys.TRAINABLE_VARIABLES` (see `tf.Variable`).\n     name: A string, the name of the layer.\n+\n+  @compatibility(TF2)\n+  This API is not compatible with eager execution or `tf.function`.\n+\n+  Please refer to [tf.layers section of the migration guide]\n+  (https://www.tensorflow.org/guide/migrate#models_based_on_tflayers)\n+  to migrate a TensorFlow v1 model to Keras. The corresponding TensorFlow v2\n+  layer is `tf.keras.layers.Conv1D`.\n+\n+\n+  #### Structural Mapping to Native TF2\n+\n+  None of the supported arguments have changed name.\n+\n+  Before:\n+\n+  ```python\n+   conv = tf.compat.v1.layers.Conv1D(filters=3, kernel_size=3)\n+  ```\n+\n+  After:\n+\n+  ```python\n+   conv = tf.keras.layers.Conv1D(filters=3, kernels_size=3)\n+  ```\n+  @end_compatibility\n   \"\"\"\n \n   def __init__(self, filters,\n@@ -201,6 +227,38 @@ def conv1d(inputs,\n \n   Raises:\n     ValueError: if eager execution is enabled.\n+\n+\n+  @compatibility(TF2)\n+  This API is not compatible with eager execution or `tf.function`.\n+\n+  Please refer to [tf.layers section of the migration guide]\n+  (https://www.tensorflow.org/guide/migrate#models_based_on_tflayers)\n+  to migrate a TensorFlow v1 model to Keras. The corresponding TensorFlow v2\n+  layer is `tf.keras.layers.Conv1D`.\n+\n+\n+  #### Structural Mapping to Native TF2\n+\n+  None of the supported arguments have changed name.\n+\n+  Before:\n+\n+  ```python\n+   y = tf.compat.v1.layers.conv1d(x, filters=3, kernel_size=3)\n+  ```\n+\n+  After:\n+\n+  To migrate code using TF1 functional layers use the [Keras Functional API]\n+  (https://www.tensorflow.org/guide/keras/functional):\n+\n+  ```python\n+   x = tf.keras.Input((28, 28, 1))\n+   y = tf.keras.layers.Conv1D(filters=3, kernels_size=3)(x)\n+   model = tf.keras.Model(x, y)\n+  ```\n+  @end_compatibility\n   \"\"\"\n   warnings.warn('`tf.layers.conv1d` is deprecated and '\n                 'will be removed in a future version. '\n@@ -288,6 +346,33 @@ class Conv2D(keras_layers.Conv2D, base.Layer):\n     trainable: Boolean, if `True` also add variables to the graph collection\n       `GraphKeys.TRAINABLE_VARIABLES` (see `tf.Variable`).\n     name: A string, the name of the layer.\n+\n+\n+  @compatibility(TF2)\n+  This API is not compatible with eager execution or `tf.function`.\n+\n+  Please refer to [tf.layers section of the migration guide]\n+  (https://www.tensorflow.org/guide/migrate#models_based_on_tflayers)\n+  to migrate a TensorFlow v1 model to Keras. The corresponding TensorFlow v2\n+  layer is `tf.keras.layers.Conv2D`.\n+\n+\n+  #### Structural Mapping to Native TF2\n+\n+  None of the supported arguments have changed name.\n+\n+  Before:\n+\n+  ```python\n+   conv = tf.compat.v1.layers.Conv2D(filters=3, kernel_size=3)\n+  ```\n+\n+  After:\n+\n+  ```python\n+   conv = tf.keras.layers.Conv2D(filters=3, kernels_size=3)\n+  ```\n+  @end_compatibility\n   \"\"\"\n \n   def __init__(self, filters,\n@@ -415,6 +500,38 @@ def conv2d(inputs,\n \n   Raises:\n     ValueError: if eager execution is enabled.\n+\n+\n+  @compatibility(TF2)\n+  This API is not compatible with eager execution or `tf.function`.\n+\n+  Please refer to [tf.layers section of the migration guide]\n+  (https://www.tensorflow.org/guide/migrate#models_based_on_tflayers)\n+  to migrate a TensorFlow v1 model to Keras. The corresponding TensorFlow v2\n+  layer is `tf.keras.layers.Conv2D`.\n+\n+\n+  #### Structural Mapping to Native TF2\n+\n+  None of the supported arguments have changed name.\n+\n+  Before:\n+\n+  ```python\n+   y = tf.compat.v1.layers.conv2d(x, filters=3, kernel_size=3)\n+  ```\n+\n+  After:\n+\n+  To migrate code using TF1 functional layers use the [Keras Functional API]\n+  (https://www.tensorflow.org/guide/keras/functional):\n+\n+  ```python\n+   x = tf.keras.Input((28, 28, 1))\n+   y = tf.keras.layers.Conv2D(filters=3, kernels_size=3)(x)\n+   model = tf.keras.Model(x, y)\n+  ```\n+  @end_compatibility\n   \"\"\"\n   warnings.warn('`tf.layers.conv2d` is deprecated and '\n                 'will be removed in a future version. '\n@@ -503,6 +620,33 @@ class Conv3D(keras_layers.Conv3D, base.Layer):\n     trainable: Boolean, if `True` also add variables to the graph collection\n       `GraphKeys.TRAINABLE_VARIABLES` (see `tf.Variable`).\n     name: A string, the name of the layer.\n+\n+\n+  @compatibility(TF2)\n+  This API is not compatible with eager execution or `tf.function`.\n+\n+  Please refer to [tf.layers section of the migration guide]\n+  (https://www.tensorflow.org/guide/migrate#models_based_on_tflayers)\n+  to migrate a TensorFlow v1 model to Keras. The corresponding TensorFlow v2\n+  layer is `tf.keras.layers.Conv3D`.\n+\n+\n+  #### Structural Mapping to Native TF2\n+\n+  None of the supported arguments have changed name.\n+\n+  Before:\n+\n+  ```python\n+   conv = tf.compat.v1.layers.Conv3D(filters=3, kernel_size=3)\n+  ```\n+\n+  After:\n+\n+  ```python\n+   conv = tf.keras.layers.Conv3D(filters=3, kernels_size=3)\n+  ```\n+  @end_compatibility\n   \"\"\"\n \n   def __init__(self, filters,\n@@ -631,6 +775,38 @@ def conv3d(inputs,\n \n   Raises:\n     ValueError: if eager execution is enabled.\n+\n+\n+  @compatibility(TF2)\n+  This API is not compatible with eager execution or `tf.function`.\n+\n+  Please refer to [tf.layers section of the migration guide]\n+  (https://www.tensorflow.org/guide/migrate#models_based_on_tflayers)\n+  to migrate a TensorFlow v1 model to Keras. The corresponding TensorFlow v2\n+  layer is `tf.keras.layers.Conv3D`.\n+\n+\n+  #### Structural Mapping to Native TF2\n+\n+  None of the supported arguments have changed name.\n+\n+  Before:\n+\n+  ```python\n+   y = tf.compat.v1.layers.conv3d(x, filters=3, kernel_size=3)\n+  ```\n+\n+  After:\n+\n+  To migrate code using TF1 functional layers use the [Keras Functional API]\n+  (https://www.tensorflow.org/guide/keras/functional):\n+\n+  ```python\n+   x = tf.keras.Input((28, 28, 1))\n+   y = tf.keras.layers.Conv3D(filters=3, kernels_size=3)(x)\n+   model = tf.keras.Model(x, y)\n+  ```\n+  @end_compatibility\n   \"\"\"\n   warnings.warn('`tf.layers.conv3d` is deprecated and '\n                 'will be removed in a future version. '\n@@ -720,6 +896,33 @@ class SeparableConv1D(keras_layers.SeparableConv1D, base.Layer):\n     trainable: Boolean, if `True` also add variables to the graph collection\n       `GraphKeys.TRAINABLE_VARIABLES` (see `tf.Variable`).\n     name: A string, the name of the layer.\n+\n+\n+  @compatibility(TF2)\n+  This API is not compatible with eager execution or `tf.function`.\n+\n+  Please refer to [tf.layers section of the migration guide]\n+  (https://www.tensorflow.org/guide/migrate#models_based_on_tflayers)\n+  to migrate a TensorFlow v1 model to Keras. The corresponding TensorFlow v2\n+  layer is `tf.keras.layers.SeparableConv1D`.\n+\n+\n+  #### Structural Mapping to Native TF2\n+\n+  None of the supported arguments have changed name.\n+\n+  Before:\n+\n+  ```python\n+   conv = tf.compat.v1.layers.SeparableConv1D(filters=3, kernel_size=3)\n+  ```\n+\n+  After:\n+\n+  ```python\n+   conv = tf.keras.layers.SeparableConv1D(filters=3, kernels_size=3)\n+  ```\n+  @end_compatibility\n   \"\"\"\n \n   def __init__(self, filters,\n@@ -836,6 +1039,33 @@ class SeparableConv2D(keras_layers.SeparableConv2D, base.Layer):\n     trainable: Boolean, if `True` also add variables to the graph collection\n       `GraphKeys.TRAINABLE_VARIABLES` (see `tf.Variable`).\n     name: A string, the name of the layer.\n+\n+\n+  @compatibility(TF2)\n+  This API is not compatible with eager execution or `tf.function`.\n+\n+  Please refer to [tf.layers section of the migration guide]\n+  (https://www.tensorflow.org/guide/migrate#models_based_on_tflayers)\n+  to migrate a TensorFlow v1 model to Keras. The corresponding TensorFlow v2\n+  layer is `tf.keras.layers.SeparableConv2D`.\n+\n+\n+  #### Structural Mapping to Native TF2\n+\n+  None of the supported arguments have changed name.\n+\n+  Before:\n+\n+  ```python\n+   conv = tf.compat.v1.layers.SeparableConv2D(filters=3, kernel_size=3)\n+  ```\n+\n+  After:\n+\n+  ```python\n+   conv = tf.keras.layers.SeparableConv2D(filters=3, kernels_size=3)\n+  ```\n+  @end_compatibility\n   \"\"\"\n \n   def __init__(self, filters,\n@@ -978,6 +1208,38 @@ def separable_conv1d(inputs,\n \n   Raises:\n     ValueError: if eager execution is enabled.\n+\n+\n+  @compatibility(TF2)\n+  This API is not compatible with eager execution or `tf.function`.\n+\n+  Please refer to [tf.layers section of the migration guide]\n+  (https://www.tensorflow.org/guide/migrate#models_based_on_tflayers)\n+  to migrate a TensorFlow v1 model to Keras. The corresponding TensorFlow v2\n+  layer is `tf.keras.layers.SeparableConv1D`.\n+\n+\n+  #### Structural Mapping to Native TF2\n+\n+  None of the supported arguments have changed name.\n+\n+  Before:\n+\n+  ```python\n+   y = tf.compat.v1.layers.separable_conv1d(x, filters=3, kernel_size=3)\n+  ```\n+\n+  After:\n+\n+  To migrate code using TF1 functional layers use the [Keras Functional API]\n+  (https://www.tensorflow.org/guide/keras/functional):\n+\n+  ```python\n+   x = tf.keras.Input((28, 28, 1))\n+   y = tf.keras.layers.SeparableConv1D(filters=3, kernels_size=3)(x)\n+   model = tf.keras.Model(x, y)\n+  ```\n+  @end_compatibility\n   \"\"\"\n   warnings.warn('`tf.layers.separable_conv1d` is deprecated and '\n                 'will be removed in a future version. '\n@@ -1107,6 +1369,38 @@ def separable_conv2d(inputs,\n \n   Raises:\n     ValueError: if eager execution is enabled.\n+\n+\n+  @compatibility(TF2)\n+  This API is not compatible with eager execution or `tf.function`.\n+\n+  Please refer to [tf.layers section of the migration guide]\n+  (https://www.tensorflow.org/guide/migrate#models_based_on_tflayers)\n+  to migrate a TensorFlow v1 model to Keras. The corresponding TensorFlow v2\n+  layer is `tf.keras.layers.SeparableConv2D`.\n+\n+\n+  #### Structural Mapping to Native TF2\n+\n+  None of the supported arguments have changed name.\n+\n+  Before:\n+\n+  ```python\n+   y = tf.compat.v1.layers.separable_conv2d(x, filters=3, kernel_size=3)\n+  ```\n+\n+  After:\n+\n+  To migrate code using TF1 functional layers use the [Keras Functional API]\n+  (https://www.tensorflow.org/guide/keras/functional):\n+\n+  ```python\n+   x = tf.keras.Input((28, 28, 1))\n+   y = tf.keras.layers.SeparableConv2D(filters=3, kernels_size=3)(x)\n+   model = tf.keras.Model(x, y)\n+  ```\n+  @end_compatibility\n   \"\"\"\n   warnings.warn('`tf.layers.separable_conv2d` is deprecated and '\n                 'will be removed in a future version. '\n@@ -1188,6 +1482,33 @@ class Conv2DTranspose(keras_layers.Conv2DTranspose, base.Layer):\n     trainable: Boolean, if `True` also add variables to the graph collection\n       `GraphKeys.TRAINABLE_VARIABLES` (see `tf.Variable`).\n     name: A string, the name of the layer.\n+\n+\n+  @compatibility(TF2)\n+  This API is not compatible with eager execution or `tf.function`.\n+\n+  Please refer to [tf.layers section of the migration guide]\n+  (https://www.tensorflow.org/guide/migrate#models_based_on_tflayers)\n+  to migrate a TensorFlow v1 model to Keras. The corresponding TensorFlow v2\n+  layer is `tf.keras.layers.Conv2DTranspose`.\n+\n+\n+  #### Structural Mapping to Native TF2\n+\n+  None of the supported arguments have changed name.\n+\n+  Before:\n+\n+  ```python\n+   conv = tf.compat.v1.layers.Conv2DTranspose(filters=3, kernel_size=3)\n+  ```\n+\n+  After:\n+\n+  ```python\n+   conv = tf.keras.layers.Conv2DTranspose(filters=3, kernels_size=3)\n+  ```\n+  @end_compatibility\n   \"\"\"\n \n   def __init__(self, filters,\n@@ -1303,6 +1624,38 @@ def conv2d_transpose(inputs,\n \n   Raises:\n     ValueError: if eager execution is enabled.\n+\n+\n+  @compatibility(TF2)\n+  This API is not compatible with eager execution or `tf.function`.\n+\n+  Please refer to [tf.layers section of the migration guide]\n+  (https://www.tensorflow.org/guide/migrate#models_based_on_tflayers)\n+  to migrate a TensorFlow v1 model to Keras. The corresponding TensorFlow v2\n+  layer is `tf.keras.layers.Conv2DTranspose`.\n+\n+\n+  #### Structural Mapping to Native TF2\n+\n+  None of the supported arguments have changed name.\n+\n+  Before:\n+\n+  ```python\n+   y = tf.compat.v1.layers.conv2d_transpose(x, filters=3, kernel_size=3)\n+  ```\n+\n+  After:\n+\n+  To migrate code using TF1 functional layers use the [Keras Functional API]\n+  (https://www.tensorflow.org/guide/keras/functional):\n+\n+  ```python\n+   x = tf.keras.Input((28, 28, 1))\n+   y = tf.keras.layers.Conv2DTranspose(filters=3, kernels_size=3)(x)\n+   model = tf.keras.Model(x, y)\n+  ```\n+  @end_compatibility\n   \"\"\"\n   warnings.warn('`tf.layers.conv2d_transpose` is deprecated and '\n                 'will be removed in a future version. '\n@@ -1375,6 +1728,33 @@ class Conv3DTranspose(keras_layers.Conv3DTranspose, base.Layer):\n     trainable: Boolean, if `True` also add variables to the graph collection\n       `GraphKeys.TRAINABLE_VARIABLES` (see `tf.Variable`).\n     name: A string, the name of the layer.\n+\n+\n+  @compatibility(TF2)\n+  This API is not compatible with eager execution or `tf.function`.\n+\n+  Please refer to [tf.layers section of the migration guide]\n+  (https://www.tensorflow.org/guide/migrate#models_based_on_tflayers)\n+  to migrate a TensorFlow v1 model to Keras. The corresponding TensorFlow v2\n+  layer is `tf.keras.layers.Conv3DTranspose`.\n+\n+\n+  #### Structural Mapping to Native TF2\n+\n+  None of the supported arguments have changed name.\n+\n+  Before:\n+\n+  ```python\n+   conv = tf.compat.v1.layers.Conv3DTranspose(filters=3, kernel_size=3)\n+  ```\n+\n+  After:\n+\n+  ```python\n+   conv = tf.keras.layers.Conv3DTranspose(filters=3, kernels_size=3)\n+  ```\n+  @end_compatibility\n   \"\"\"\n \n   def __init__(self,\n@@ -1485,6 +1865,38 @@ def conv3d_transpose(inputs,\n \n   Raises:\n     ValueError: if eager execution is enabled.\n+\n+\n+  @compatibility(TF2)\n+  This API is not compatible with eager execution or `tf.function`.\n+\n+  Please refer to [tf.layers section of the migration guide]\n+  (https://www.tensorflow.org/guide/migrate#models_based_on_tflayers)\n+  to migrate a TensorFlow v1 model to Keras. The corresponding TensorFlow v2\n+  layer is `tf.keras.layers.Conv3DTranspose`.\n+\n+\n+  #### Structural Mapping to Native TF2\n+\n+  None of the supported arguments have changed name.\n+\n+  Before:\n+\n+  ```python\n+   y = tf.compat.v1.layers.conv3d_transpose(x, filters=3, kernel_size=3)\n+  ```\n+\n+  After:\n+\n+  To migrate code using TF1 functional layers use the [Keras Functional API]\n+  (https://www.tensorflow.org/guide/keras/functional):\n+\n+  ```python\n+   x = tf.keras.Input((28, 28, 1))\n+   y = tf.keras.layers.Conv3DTranspose(filters=3, kernels_size=3)(x)\n+   model = tf.keras.Model(x, y)\n+  ```\n+  @end_compatibility\n   \"\"\"\n   warnings.warn('`tf.layers.conv3d_transpose` is deprecated and '\n                 'will be removed in a future version. '\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "keras#14f11c9e86a7fcdd1088672e603784ccdbafcc27", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 21 | Lines Deleted: 6 | Files Changed: 1 | Hunks: 15 | Methods Changed: 2 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 27 | Churn Cumulative: 563 | Contributors (this commit): 3 | Commits (past 90d): 4 | Contributors (cumulative): 3 | DMM Complexity: None\n\nDIFF:\n@@ -90,7 +90,7 @@ class Dense(keras_layers.Dense, base.Layer):\n \n   Please refer to [tf.layers section of the migration guide]\n   (https://www.tensorflow.org/guide/migrate#models_based_on_tflayers)\n-  for more details on migrating a TF1 model to Keras. In TF2 the corresponding\n+  to migrate a TensorFlow v1 model to Keras. The corresponding TensorFlow v2\n   layer is `tf.keras.layers.Dense`.\n \n \n@@ -206,7 +206,7 @@ def dense(\n \n   Please refer to [tf.layers section of the migration guide]\n   (https://www.tensorflow.org/guide/migrate#models_based_on_tflayers)\n-  for more details on migrating a TF1 model to Keras. In TF2 the corresponding\n+  to migrate a TensorFlow v1 model to Keras. The corresponding TensorFlow v2\n   layer is `tf.keras.layers.Dense`.\n \n \n@@ -222,8 +222,13 @@ def dense(\n \n   After:\n \n+  To migrate code using TF1 functional layers use the [Keras Functional API]\n+  (https://www.tensorflow.org/guide/keras/functional):\n+\n   ```python\n+   x = tf.keras.Input((28,))\n    y = tf.keras.layers.Dense(units=3)(x)\n+   model = tf.keras.Model(x, y)\n   ```\n   @end_compatibility\n \n@@ -278,7 +283,7 @@ class Dropout(keras_layers.Dropout, base.Layer):\n \n   Please refer to [tf.layers section of the migration guide]\n   (https://www.tensorflow.org/guide/migrate#models_based_on_tflayers)\n-  for more details on migrating a TF1 model to Keras. In TF2 the corresponding\n+  to migrate a TensorFlow v1 model to Keras. The corresponding TensorFlow v2\n   layer is `tf.keras.layers.Dropout`.\n \n \n@@ -359,7 +364,7 @@ def dropout(inputs,\n \n   Please refer to [tf.layers section of the migration guide]\n   (https://www.tensorflow.org/guide/migrate#models_based_on_tflayers)\n-  for more details on migrating a TF1 model to Keras. In TF2 the corresponding\n+  to migrate a TensorFlow v1 model to Keras. The corresponding TensorFlow v2\n   layer is `tf.keras.layers.Dropout`.\n \n \n@@ -375,8 +380,13 @@ def dropout(inputs,\n \n   After:\n \n+  To migrate code using TF1 functional layers use the [Keras Functional API]\n+  (https://www.tensorflow.org/guide/keras/functional):\n+\n   ```python\n+   x = tf.keras.Input((28, 28, 1))\n    y = tf.keras.layers.Dropout()(x)\n+   model = tf.keras.Model(x, y)\n   ```\n   @end_compatibility\n   \"\"\"\n@@ -416,7 +426,7 @@ class Flatten(keras_layers.Flatten, base.Layer):\n \n   Please refer to [tf.layers section of the migration guide]\n   (https://www.tensorflow.org/guide/migrate#models_based_on_tflayers)\n-  for more details on migrating a TF1 model to Keras. In TF2 the corresponding\n+  to migrate a TensorFlow v1 model to Keras. The corresponding TensorFlow v2\n   layer is `tf.keras.layers.Flatten`.\n \n \n@@ -474,7 +484,7 @@ def flatten(inputs, name=None, data_format='channels_last'):\n \n   Please refer to [tf.layers section of the migration guide]\n   (https://www.tensorflow.org/guide/migrate#models_based_on_tflayers)\n-  for more details on migrating a TF1 model to Keras. In TF2 the corresponding\n+  to migrate a TensorFlow v1 model to Keras. The corresponding TensorFlow v2\n   layer is `tf.keras.layers.Flatten`.\n \n \n@@ -490,8 +500,13 @@ def flatten(inputs, name=None, data_format='channels_last'):\n \n   After:\n \n+  To migrate code using TF1 functional layers use the [Keras Functional API]\n+  (https://www.tensorflow.org/guide/keras/functional):\n+\n   ```python\n+   x = tf.keras.Input((28, 28, 1))\n    y = tf.keras.layers.Flatten()(x)\n+   model = tf.keras.Model(x, y)\n   ```\n   @end_compatibility\n   \"\"\"\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "keras#11ee8f6ec46fa65ac23e312225aa4b68ce5d6425", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 2 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 480 | Contributors (this commit): 3 | Commits (past 90d): 4 | Contributors (cumulative): 3 | DMM Complexity: None\n\nDIFF:\n@@ -124,7 +124,7 @@ class BatchNormalization(batch_normalization_v1.BatchNormalization, base.Layer):\n \n \n   @compatibility(TF2)\n-  Warning: This API is not compatible with eager execution or `tf.function`.\n+  This API is not compatible with eager execution or `tf.function`.\n \n   Please refer to [tf.layers section of the migration guide]\n   (https://www.tensorflow.org/guide/migrate#models_based_on_tflayers)\n@@ -361,7 +361,7 @@ def batch_normalization(inputs,\n       ([pdf](http://papers.nips.cc/paper/6790-batch-renormalization-towards-reducing-minibatch-dependence-in-batch-normalized-models.pdf))\n \n   @compatibility(TF2)\n-  Warning: This API is not compatible with eager execution or `tf.function`.\n+  This API is not compatible with eager execution or `tf.function`.\n \n   Please refer to [tf.layers section of the migration guide]\n   (https://www.tensorflow.org/guide/migrate#models_based_on_tflayers)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "keras#a4f3d7d988712ba33bb91079517d77d1f4c616dc", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 354 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 12 | Methods Changed: 6 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 354 | Churn Cumulative: 873 | Contributors (this commit): 3 | Commits (past 90d): 2 | Contributors (cumulative): 3 | DMM Complexity: None\n\nDIFF:\n@@ -44,6 +44,33 @@ class AveragePooling1D(keras_layers.AveragePooling1D, base.Layer):\n       `(batch, length, channels)` while `channels_first` corresponds to\n       inputs with shape `(batch, channels, length)`.\n     name: A string, the name of the layer.\n+\n+\n+  @compatibility(TF2)\n+  This API is not compatible with eager execution or `tf.function`.\n+\n+  Please refer to [tf.layers section of the migration guide]\n+  (https://www.tensorflow.org/guide/migrate#models_based_on_tflayers)\n+  to migrate a TensorFlow v1 model to Keras. The corresponding TensorFlow v2\n+  layer is `tf.keras.layers.AveragePooling1D`.\n+\n+\n+  #### Structural Mapping to Native TF2\n+\n+  None of the supported arguments have changed name.\n+\n+  Before:\n+\n+  ```python\n+   pooling = tf.compat.v1.layers.AveragePooling1D(pool_size=2, strides=2)\n+  ```\n+\n+  After:\n+\n+  ```python\n+   pooling = tf.keras.layers.AveragePooling1D(pool_size=2, strides=2)\n+  ```\n+  @end_compatibility\n   \"\"\"\n \n   def __init__(self, pool_size, strides,\n@@ -87,6 +114,38 @@ def average_pooling1d(inputs, pool_size, strides,\n \n   Raises:\n     ValueError: if eager execution is enabled.\n+\n+\n+  @compatibility(TF2)\n+  This API is not compatible with eager execution or `tf.function`.\n+\n+  Please refer to [tf.layers section of the migration guide]\n+  (https://www.tensorflow.org/guide/migrate#models_based_on_tflayers)\n+  to migrate a TensorFlow v1 model to Keras. The corresponding TensorFlow v2\n+  layer is `tf.keras.layers.AveragePooling1D`.\n+\n+\n+  #### Structural Mapping to Native TF2\n+\n+  None of the supported arguments have changed name.\n+\n+  Before:\n+\n+  ```python\n+   y = tf.compat.v1.layers.average_pooling1d(x, pool_size=2, strides=2)\n+  ```\n+\n+  After:\n+\n+  To migrate code using TF1 functional layers use the [Keras Functional API]\n+  (https://www.tensorflow.org/guide/keras/functional):\n+\n+  ```python\n+   x = tf.keras.Input((28, 28, 1))\n+   y = tf.keras.layers.AveragePooling1D(pool_size=2, strides=2)(x)\n+   model = tf.keras.Model(x, y)\n+  ```\n+  @end_compatibility\n   \"\"\"\n   warnings.warn('`tf.layers.average_pooling1d` is deprecated and '\n                 'will be removed in a future version. '\n@@ -117,6 +176,33 @@ class MaxPooling1D(keras_layers.MaxPooling1D, base.Layer):\n       `(batch, length, channels)` while `channels_first` corresponds to\n       inputs with shape `(batch, channels, length)`.\n     name: A string, the name of the layer.\n+\n+\n+  @compatibility(TF2)\n+  This API is not compatible with eager execution or `tf.function`.\n+\n+  Please refer to [tf.layers section of the migration guide]\n+  (https://www.tensorflow.org/guide/migrate#models_based_on_tflayers)\n+  to migrate a TensorFlow v1 model to Keras. The corresponding TensorFlow v2\n+  layer is `tf.keras.layers.MaxPooling1D`.\n+\n+\n+  #### Structural Mapping to Native TF2\n+\n+  None of the supported arguments have changed name.\n+\n+  Before:\n+\n+  ```python\n+   pooling = tf.compat.v1.layers.MaxPooling1D(pool_size=2, strides=2)\n+  ```\n+\n+  After:\n+\n+  ```python\n+   pooling = tf.keras.layers.MaxPooling1D(pool_size=2, strides=2)\n+  ```\n+  @end_compatibility\n   \"\"\"\n \n   def __init__(self, pool_size, strides,\n@@ -160,6 +246,38 @@ def max_pooling1d(inputs, pool_size, strides,\n \n   Raises:\n     ValueError: if eager execution is enabled.\n+\n+\n+  @compatibility(TF2)\n+  This API is not compatible with eager execution or `tf.function`.\n+\n+  Please refer to [tf.layers section of the migration guide]\n+  (https://www.tensorflow.org/guide/migrate#models_based_on_tflayers)\n+  to migrate a TensorFlow v1 model to Keras. The corresponding TensorFlow v2\n+  layer is `tf.keras.layers.MaxPooling1D`.\n+\n+\n+  #### Structural Mapping to Native TF2\n+\n+  None of the supported arguments have changed name.\n+\n+  Before:\n+\n+  ```python\n+   y = tf.compat.v1.layers.max_pooling1d(x, pool_size=2, strides=2)\n+  ```\n+\n+  After:\n+\n+  To migrate code using TF1 functional layers use the [Keras Functional API]\n+  (https://www.tensorflow.org/guide/keras/functional):\n+\n+  ```python\n+   x = tf.keras.Input((28, 28, 1))\n+   y = tf.keras.layers.MaxPooling1D(pool_size=2, strides=2)(x)\n+   model = tf.keras.Model(x, y)\n+  ```\n+  @end_compatibility\n   \"\"\"\n   warnings.warn('`tf.layers.max_pooling1d` is deprecated and '\n                 'will be removed in a future version. '\n@@ -194,6 +312,33 @@ class AveragePooling2D(keras_layers.AveragePooling2D, base.Layer):\n       `(batch, height, width, channels)` while `channels_first` corresponds to\n       inputs with shape `(batch, channels, height, width)`.\n     name: A string, the name of the layer.\n+\n+\n+  @compatibility(TF2)\n+  This API is not compatible with eager execution or `tf.function`.\n+\n+  Please refer to [tf.layers section of the migration guide]\n+  (https://www.tensorflow.org/guide/migrate#models_based_on_tflayers)\n+  to migrate a TensorFlow v1 model to Keras. The corresponding TensorFlow v2\n+  layer is `tf.keras.layers.AveragePooling2D`.\n+\n+\n+  #### Structural Mapping to Native TF2\n+\n+  None of the supported arguments have changed name.\n+\n+  Before:\n+\n+  ```python\n+   pooling = tf.compat.v1.layers.AveragePooling2D(pool_size=2, strides=2)\n+  ```\n+\n+  After:\n+\n+  ```python\n+   pooling = tf.keras.layers.AveragePooling2D(pool_size=2, strides=2)\n+  ```\n+  @end_compatibility\n   \"\"\"\n \n   def __init__(self, pool_size, strides,\n@@ -238,6 +383,38 @@ def average_pooling2d(inputs,\n \n   Raises:\n     ValueError: if eager execution is enabled.\n+\n+\n+  @compatibility(TF2)\n+  This API is not compatible with eager execution or `tf.function`.\n+\n+  Please refer to [tf.layers section of the migration guide]\n+  (https://www.tensorflow.org/guide/migrate#models_based_on_tflayers)\n+  to migrate a TensorFlow v1 model to Keras. The corresponding TensorFlow v2\n+  layer is `tf.keras.layers.AveragePooling2D`.\n+\n+\n+  #### Structural Mapping to Native TF2\n+\n+  None of the supported arguments have changed name.\n+\n+  Before:\n+\n+  ```python\n+   y = tf.compat.v1.layers.average_pooling2d(x, pool_size=2, strides=2)\n+  ```\n+\n+  After:\n+\n+  To migrate code using TF1 functional layers use the [Keras Functional API]\n+  (https://www.tensorflow.org/guide/keras/functional):\n+\n+  ```python\n+   x = tf.keras.Input((28, 28, 1))\n+   y = tf.keras.layers.AveragePooling2D(pool_size=2, strides=2)(x)\n+   model = tf.keras.Model(x, y)\n+  ```\n+  @end_compatibility\n   \"\"\"\n   warnings.warn('`tf.layers.average_pooling2d` is deprecated and '\n                 'will be removed in a future version. '\n@@ -270,6 +447,33 @@ class MaxPooling2D(keras_layers.MaxPooling2D, base.Layer):\n       `(batch, height, width, channels)` while `channels_first` corresponds to\n       inputs with shape `(batch, channels, height, width)`.\n     name: A string, the name of the layer.\n+\n+\n+  @compatibility(TF2)\n+  This API is not compatible with eager execution or `tf.function`.\n+\n+  Please refer to [tf.layers section of the migration guide]\n+  (https://www.tensorflow.org/guide/migrate#models_based_on_tflayers)\n+  to migrate a TensorFlow v1 model to Keras. The corresponding TensorFlow v2\n+  layer is `tf.keras.layers.MaxPooling2D`.\n+\n+\n+  #### Structural Mapping to Native TF2\n+\n+  None of the supported arguments have changed name.\n+\n+  Before:\n+\n+  ```python\n+   pooling = tf.compat.v1.layers.MaxPooling2D(pool_size=2, strides=2)\n+  ```\n+\n+  After:\n+\n+  ```python\n+   pooling = tf.keras.layers.MaxPooling2D(pool_size=2, strides=2)\n+  ```\n+  @end_compatibility\n   \"\"\"\n \n   def __init__(self, pool_size, strides,\n@@ -314,6 +518,38 @@ def max_pooling2d(inputs,\n \n   Raises:\n     ValueError: if eager execution is enabled.\n+\n+\n+  @compatibility(TF2)\n+  This API is not compatible with eager execution or `tf.function`.\n+\n+  Please refer to [tf.layers section of the migration guide]\n+  (https://www.tensorflow.org/guide/migrate#models_based_on_tflayers)\n+  to migrate a TensorFlow v1 model to Keras. The corresponding TensorFlow v2\n+  layer is `tf.keras.layers.MaxPooling2D`.\n+\n+\n+  #### Structural Mapping to Native TF2\n+\n+  None of the supported arguments have changed name.\n+\n+  Before:\n+\n+  ```python\n+   y = tf.compat.v1.layers.max_pooling2d(x, pool_size=2, strides=2)\n+  ```\n+\n+  After:\n+\n+  To migrate code using TF1 functional layers use the [Keras Functional API]\n+  (https://www.tensorflow.org/guide/keras/functional):\n+\n+  ```python\n+   x = tf.keras.Input((28, 28, 1))\n+   y = tf.keras.layers.MaxPooling2D(pool_size=2, strides=2)(x)\n+   model = tf.keras.Model(x, y)\n+  ```\n+  @end_compatibility\n   \"\"\"\n   warnings.warn('`tf.layers.max_pooling2d` is deprecated and '\n                 'will be removed in a future version. '\n@@ -348,6 +584,33 @@ class AveragePooling3D(keras_layers.AveragePooling3D, base.Layer):\n       corresponds to inputs with shape\n       `(batch, channels, depth, height, width)`.\n     name: A string, the name of the layer.\n+\n+\n+  @compatibility(TF2)\n+  This API is not compatible with eager execution or `tf.function`.\n+\n+  Please refer to [tf.layers section of the migration guide]\n+  (https://www.tensorflow.org/guide/migrate#models_based_on_tflayers)\n+  to migrate a TensorFlow v1 model to Keras. The corresponding TensorFlow v2\n+  layer is `tf.keras.layers.AveragePooling3D`.\n+\n+\n+  #### Structural Mapping to Native TF2\n+\n+  None of the supported arguments have changed name.\n+\n+  Before:\n+\n+  ```python\n+   pooling = tf.compat.v1.layers.AveragePooling3D(pool_size=2, strides=2)\n+  ```\n+\n+  After:\n+\n+  ```python\n+   pooling = tf.keras.layers.AveragePooling3D(pool_size=2, strides=2)\n+  ```\n+  @end_compatibility\n   \"\"\"\n \n   def __init__(self, pool_size, strides,\n@@ -394,6 +657,38 @@ def average_pooling3d(inputs,\n \n   Raises:\n     ValueError: if eager execution is enabled.\n+\n+\n+  @compatibility(TF2)\n+  This API is not compatible with eager execution or `tf.function`.\n+\n+  Please refer to [tf.layers section of the migration guide]\n+  (https://www.tensorflow.org/guide/migrate#models_based_on_tflayers)\n+  to migrate a TensorFlow v1 model to Keras. The corresponding TensorFlow v2\n+  layer is `tf.keras.layers.AveragePooling3D`.\n+\n+\n+  #### Structural Mapping to Native TF2\n+\n+  None of the supported arguments have changed name.\n+\n+  Before:\n+\n+  ```python\n+   y = tf.compat.v1.layers.average_pooling3d(x, pool_size=2, strides=2)\n+  ```\n+\n+  After:\n+\n+  To migrate code using TF1 functional layers use the [Keras Functional API]\n+  (https://www.tensorflow.org/guide/keras/functional):\n+\n+  ```python\n+   x = tf.keras.Input((28, 28, 1))\n+   y = tf.keras.layers.AveragePooling3D(pool_size=2, strides=2)(x)\n+   model = tf.keras.Model(x, y)\n+  ```\n+  @end_compatibility\n   \"\"\"\n   warnings.warn('`tf.layers.average_pooling3d` is deprecated and '\n                 'will be removed in a future version. '\n@@ -428,6 +723,33 @@ class MaxPooling3D(keras_layers.MaxPooling3D, base.Layer):\n       corresponds to inputs with shape\n       `(batch, channels, depth, height, width)`.\n     name: A string, the name of the layer.\n+\n+\n+  @compatibility(TF2)\n+  This API is not compatible with eager execution or `tf.function`.\n+\n+  Please refer to [tf.layers section of the migration guide]\n+  (https://www.tensorflow.org/guide/migrate#models_based_on_tflayers)\n+  to migrate a TensorFlow v1 model to Keras. The corresponding TensorFlow v2\n+  layer is `tf.keras.layers.MaxPooling3D`.\n+\n+\n+  #### Structural Mapping to Native TF2\n+\n+  None of the supported arguments have changed name.\n+\n+  Before:\n+\n+  ```python\n+   pooling = tf.compat.v1.layers.MaxPooling3D(pool_size=2, strides=2)\n+  ```\n+\n+  After:\n+\n+  ```python\n+   pooling = tf.keras.layers.MaxPooling3D(pool_size=2, strides=2)\n+  ```\n+  @end_compatibility\n   \"\"\"\n \n   def __init__(self, pool_size, strides,\n@@ -472,6 +794,38 @@ def max_pooling3d(inputs,\n \n   Raises:\n     ValueError: if eager execution is enabled.\n+\n+\n+  @compatibility(TF2)\n+  This API is not compatible with eager execution or `tf.function`.\n+\n+  Please refer to [tf.layers section of the migration guide]\n+  (https://www.tensorflow.org/guide/migrate#models_based_on_tflayers)\n+  to migrate a TensorFlow v1 model to Keras. The corresponding TensorFlow v2\n+  layer is `tf.keras.layers.MaxPooling3D`.\n+\n+\n+  #### Structural Mapping to Native TF2\n+\n+  None of the supported arguments have changed name.\n+\n+  Before:\n+\n+  ```python\n+   y = tf.compat.v1.layers.max_pooling3d(x, pool_size=2, strides=2)\n+  ```\n+\n+  After:\n+\n+  To migrate code using TF1 functional layers use the [Keras Functional API]\n+  (https://www.tensorflow.org/guide/keras/functional):\n+\n+  ```python\n+   x = tf.keras.Input((28, 28, 1))\n+   y = tf.keras.layers.MaxPooling3D(pool_size=2, strides=2)(x)\n+   model = tf.keras.Model(x, y)\n+  ```\n+  @end_compatibility\n   \"\"\"\n   warnings.warn('`tf.layers.max_pooling3d` is deprecated and '\n                 'will be removed in a future version. '\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
