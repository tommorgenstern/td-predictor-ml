{"custom_id": "keras#7267cd532788db4adc738282041a537b91cc26b1", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 29 | Lines Deleted: 15 | Files Changed: 2 | Hunks: 11 | Methods Changed: 6 | Complexity Δ (Sum/Max): -1/1 | Churn Δ: 44 | Churn Cumulative: 657 | Contributors (this commit): 7 | Commits (past 90d): 12 | Contributors (cumulative): 11 | DMM Complexity: 1.0\n\nDIFF:\n@@ -30,6 +30,11 @@ class Trainer:\n             \"training\" in inspect.signature(self.compute_loss).parameters\n         )\n \n+        # Placeholders used in `compile`\n+        self._compile_loss = None\n+        self._compile_metrics = None\n+        self._loss_tracker = None\n+\n     @traceback_utils.filter_traceback\n     @tracking.no_automatic_dependency_tracking\n     def compile(\n@@ -155,14 +160,10 @@ class Trainer:\n                 loss, loss_weights, output_names=output_names\n             )\n             self.loss = loss\n-        else:\n-            self._compile_loss = None\n         if metrics is not None or weighted_metrics is not None:\n             self._compile_metrics = CompileMetrics(\n                 metrics, weighted_metrics, output_names=output_names\n             )\n-        else:\n-            self._compile_metrics = None\n         if jit_compile == \"auto\":\n             if run_eagerly:\n                 jit_compile = False\n@@ -258,7 +259,7 @@ class Trainer:\n             if self._compile_loss is not None:\n                 metrics.extend(self._compile_loss.metrics)\n         metrics.extend(self._metrics)\n-        for layer in self._layers:\n+        for layer in self._flatten_layers(include_self=False):\n             if isinstance(layer, Trainer):\n                 # All Trainer-related metrics in sublayers should be ignored\n                 # because a new Trainer has been instantiated.\n@@ -276,16 +277,12 @@ class Trainer:\n \n     def _get_own_metrics(self):\n         metrics = []\n-        if hasattr(self, \"_loss_tracker\"):\n+        if self._loss_tracker is not None:\n             metrics.append(self._loss_tracker)\n-        if (\n-            hasattr(self, \"_compile_metrics\")\n-            and self._compile_metrics is not None\n-        ):\n+        if self._compile_metrics is not None:\n             metrics.append(self._compile_metrics)\n-        if hasattr(self, \"_compile_loss\") and self._compile_loss is not None:\n+        if self._compile_loss is not None:\n             metrics.extend(self._compile_loss.metrics)\n-        if hasattr(self, \"_metrics\"):\n         metrics.extend(self._metrics)\n         return metrics\n \n@@ -300,8 +297,9 @@ class Trainer:\n                 layer._tracker.untrack(m)\n             layer._loss_tracker = None\n             layer._compile_metrics = None\n-            layer._compile_loss._metrics = []\n-            layer._metrics = []\n+            if layer._compile_loss is not None:\n+                layer._compile_loss._metrics.clear()\n+            layer._metrics.clear()\n \n     def compute_loss(\n         self,\n\n@@ -227,7 +227,6 @@ class TestTrainer(testing.TestCase, parameterized.TestCase):\n         )\n         self.assertEqual(len(model_weighted.metrics), 3)\n \n-    @pytest.mark.requires_trainable_backend\n     def test_nested_trainer_metrics(self):\n         # https://github.com/keras-team/keras/issues/20188\n         model = ExampleModel(units=3)\n@@ -253,6 +252,23 @@ class TestTrainer(testing.TestCase, parameterized.TestCase):\n         self.assertEqual(new_model.metrics[0], new_model._loss_tracker)\n         self.assertEqual(new_model.metrics[1], new_model._compile_metrics)\n \n+    def test_nested_trainer_metrics_without_compile(self):\n+        model = ExampleModel(units=3)\n+        self.assertLen(model.metrics, 0)\n+\n+        inputs = keras.Input((4,))\n+        outputs = model(inputs)\n+        outputs = layers.Dense(8)(outputs)\n+        new_model = models.Model(inputs, outputs)\n+        new_model.compile(\n+            optimizer=optimizers.SGD(),\n+            loss=losses.MeanSquaredError(),\n+            metrics=[metrics.MeanSquaredError()],\n+        )\n+        self.assertLen(new_model.metrics, 2)\n+        self.assertEqual(new_model.metrics[0], new_model._loss_tracker)\n+        self.assertEqual(new_model.metrics[1], new_model._compile_metrics)\n+\n     @pytest.mark.skipif(\n         backend.backend() != \"torch\",\n         reason=\"torch backend runs in eager mode for jit_compile='auto'\",\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "keras#dbad6b0c12628f1578c707f0aaafa94e8b796918", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 23 | Lines Deleted: 4 | Files Changed: 2 | Hunks: 6 | Methods Changed: 6 | Complexity Δ (Sum/Max): 2/2 | Churn Δ: 27 | Churn Cumulative: 187 | Contributors (this commit): 3 | Commits (past 90d): 7 | Contributors (cumulative): 6 | DMM Complexity: 1.0\n\nDIFF:\n@@ -268,7 +268,7 @@ class Sequential(Model):\n     def input_shape(self):\n         if self._functional:\n             return self._functional.input_shape\n-        raise ValueError(\n+        raise AttributeError(\n             f\"Sequential model '{self.name}' has no defined input shape yet.\"\n         )\n \n@@ -276,7 +276,7 @@ class Sequential(Model):\n     def output_shape(self):\n         if self._functional:\n             return self._functional.output_shape\n-        raise ValueError(\n+        raise AttributeError(\n             f\"Sequential model '{self.name}' has no defined output shape yet.\"\n         )\n \n@@ -284,7 +284,7 @@ class Sequential(Model):\n     def inputs(self):\n         if self._functional:\n             return self._functional.inputs\n-        raise ValueError(\n+        raise AttributeError(\n             f\"Sequential model '{self.name}' has no defined inputs yet.\"\n         )\n \n@@ -292,7 +292,7 @@ class Sequential(Model):\n     def outputs(self):\n         if self._functional:\n             return self._functional.outputs\n-        raise ValueError(\n+        raise AttributeError(\n             f\"Sequential model '{self.name}' has no defined outputs yet.\"\n         )\n \n\n@@ -227,6 +227,12 @@ class SequentialTest(testing.TestCase):\n         self.assertEqual(type(y), list)\n         model.summary()\n \n+    def test_nested_sequential(self):\n+        # https://github.com/keras-team/keras/issues/20203\n+        model = Sequential()\n+        model.add(Input(shape=(16,)))\n+        Sequential([model])\n+\n     def test_errors(self):\n         # Trying to pass 2 Inputs\n         model = Sequential()\n@@ -359,3 +365,16 @@ class SequentialTest(testing.TestCase):\n         layer = Sequential([layers.Dense(4), layers.Dense(8)])\n         output_shape = layer.compute_output_shape((1, 2))\n         self.assertEqual(output_shape, (1, 8))\n+\n+    def test_hasattr(self):\n+        model = Sequential()\n+        self.assertFalse(hasattr(model, \"input_shape\"))\n+        self.assertFalse(hasattr(model, \"output_shape\"))\n+        self.assertFalse(hasattr(model, \"inputs\"))\n+        self.assertFalse(hasattr(model, \"outputs\"))\n+\n+        model = Sequential([layers.Input((4,)), layers.Dense(8)])\n+        self.assertTrue(hasattr(model, \"input_shape\"))\n+        self.assertTrue(hasattr(model, \"output_shape\"))\n+        self.assertTrue(hasattr(model, \"inputs\"))\n+        self.assertTrue(hasattr(model, \"outputs\"))\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "keras#ecaf3eb43eb488086d4f6a465747e9226be57543", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 6 | Lines Deleted: 6 | Files Changed: 1 | Hunks: 4 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 12 | Churn Cumulative: 394 | Contributors (this commit): 5 | Commits (past 90d): 4 | Contributors (cumulative): 5 | DMM Complexity: None\n\nDIFF:\n@@ -545,19 +545,19 @@ class BinaryCrossentropy(LossFunctionWrapper):\n     As a standalone function:\n \n     >>> # Example 1: (batch_size = 1, number of samples = 4)\n-    >>> y_true = [0, 1, 0, 0]\n-    >>> y_pred = [-18.6, 0.51, 2.94, -12.8]\n+    >>> y_true = np.array([0, 1, 0, 0])\n+    >>> y_pred = np.array([-18.6, 0.51, 2.94, -12.8])\n     >>> bce = keras.losses.BinaryCrossentropy(from_logits=True)\n     >>> bce(y_true, y_pred)\n-    0.865\n+    0.8654\n \n     >>> # Example 2: (batch_size = 2, number of samples = 4)\n-    >>> y_true = [[0, 1], [0, 0]]\n-    >>> y_pred = [[-18.6, 0.51], [2.94, -12.8]]\n+    >>> y_true = np.array([[0, 1], [0, 0]])\n+    >>> y_pred = np.array([[-18.6, 0.51], [2.94, -12.8]])\n     >>> # Using default 'auto'/'sum_over_batch_size' reduction type.\n     >>> bce = keras.losses.BinaryCrossentropy(from_logits=True)\n     >>> bce(y_true, y_pred)\n-    0.865\n+    0.8654\n     >>> # Using 'sample_weight' attribute\n     >>> bce(y_true, y_pred, sample_weight=[0.8, 0.2])\n     0.243\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "keras#067ae7e9cafac013a5a51576937f3209c171690c", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 88 | Lines Deleted: 1 | Files Changed: 10 | Hunks: 12 | Methods Changed: 11 | Complexity Δ (Sum/Max): 12/5 | Churn Δ: 89 | Churn Cumulative: 2972 | Contributors (this commit): 16 | Commits (past 90d): 48 | Contributors (cumulative): 62 | DMM Complexity: 1.0\n\nDIFF:\n@@ -49,6 +49,7 @@ from keras.src.ops.math import fft2\n from keras.src.ops.math import in_top_k\n from keras.src.ops.math import irfft\n from keras.src.ops.math import istft\n+from keras.src.ops.math import logdet\n from keras.src.ops.math import logsumexp\n from keras.src.ops.math import rfft\n from keras.src.ops.math import rsqrt\n\n@@ -49,6 +49,7 @@ from keras.src.ops.math import fft2\n from keras.src.ops.math import in_top_k\n from keras.src.ops.math import irfft\n from keras.src.ops.math import istft\n+from keras.src.ops.math import logdet\n from keras.src.ops.math import logsumexp\n from keras.src.ops.math import rfft\n from keras.src.ops.math import rsqrt\n\n@@ -285,3 +285,12 @@ def norm(x, ord=None, axis=None, keepdims=False):\n         dtype = dtypes.result_type(x.dtype, float)\n     x = cast(x, dtype)\n     return jnp.linalg.norm(x, ord=ord, axis=axis, keepdims=keepdims)\n+\n+\n+def logdet(x):\n+    from keras.src.backend.jax.numpy import slogdet\n+\n+    # In JAX (like in NumPy) slogdet is more stable than\n+    # `np.log(np.linalg.det(x))`. See\n+    # https://numpy.org/doc/stable/reference/generated/numpy.linalg.slogdet.html\n+    return slogdet(x)[1]\n\n@@ -308,3 +308,11 @@ def norm(x, ord=None, axis=None, keepdims=False):\n     return np.linalg.norm(x, ord=ord, axis=axis, keepdims=keepdims).astype(\n         dtype\n     )\n+\n+\n+def logdet(x):\n+    from keras.src.backend.numpy.numpy import slogdet\n+\n+    # In NumPy slogdet is more stable than `np.log(np.linalg.det(x))`. See\n+    # https://numpy.org/doc/stable/reference/generated/numpy.linalg.slogdet.html\n+    return slogdet(x)[1]\n\n@@ -365,3 +365,8 @@ def norm(x, ord=None, axis=None, keepdims=False):\n         )\n     else:\n         raise ValueError(f\"Invalid axis values. Received: axis={axis}\")\n+\n+\n+def logdet(x):\n+    x = convert_to_tensor(x)\n+    return tf.linalg.logdet(x)\n\n@@ -414,3 +414,8 @@ def norm(x, ord=None, axis=None, keepdims=False):\n         dtype = dtypes.result_type(x.dtype, float)\n     x = cast(x, dtype)\n     return torch.linalg.norm(x, ord=ord, dim=axis, keepdim=keepdims)\n+\n+\n+def logdet(x):\n+    x = convert_to_tensor(x)\n+    return torch.logdet(x)\n\n@@ -945,3 +945,29 @@ def erfinv(x):\n         return Erfinv().symbolic_call(x)\n     x = backend.convert_to_tensor(x)\n     return backend.math.erfinv(x)\n+\n+\n+class Logdet(Operation):\n+    def __init__(self):\n+        super().__init__()\n+\n+    def call(self, x):\n+        return backend.math.logdet(x)\n+\n+    def compute_output_spec(self, x):\n+        return KerasTensor(x.shape[:-2], dtype=x.dtype)\n+\n+\n+@keras_export([\"keras.ops.logdet\"])\n+def logdet(x):\n+    \"\"\"Computes log of the determinant of a hermitian positive definite matrix.\n+\n+    Args:\n+        x: Input matrix. It must 2D and square.\n+\n+    Returns:\n+        The natural log of the determinant of matrix.\n+    \"\"\"\n+    if any_symbolic_tensors((x,)):\n+        return Logdet().symbolic_call(x)\n+    return backend.math.logdet(x)\n\n@@ -275,6 +275,11 @@ class MathOpsDynamicShapeTest(testing.TestCase, parameterized.TestCase):\n         x = KerasTensor([None, 3])\n         self.assertEqual(kmath.rsqrt(x).shape, (None, 3))\n \n+    def test_logdet(self):\n+        x = KerasTensor((None, 3, 3))\n+        out = kmath.logdet(x)\n+        self.assertEqual(out.shape, (None,))\n+\n \n class MathOpsStaticShapeTest(testing.TestCase, parameterized.TestCase):\n     @parameterized.parameters([(kmath.segment_sum,), (kmath.segment_max,)])\n@@ -402,6 +407,15 @@ class MathOpsStaticShapeTest(testing.TestCase, parameterized.TestCase):\n         )\n         self.assertEqual(output.shape, ref.shape)\n \n+    def test_logdet(self):\n+        x = KerasTensor((3, 3))\n+        out = kmath.logdet(x)\n+        self.assertEqual(out.shape, ())\n+\n+        x = KerasTensor((2, 4, 3, 3))\n+        out = kmath.logdet(x)\n+        self.assertEqual(out.shape, (2, 4))\n+\n \n class MathOpsCorrectnessTest(testing.TestCase, parameterized.TestCase):\n \n@@ -920,6 +934,19 @@ class MathOpsCorrectnessTest(testing.TestCase, parameterized.TestCase):\n             expected_output, output_from_edge_erfinv_op, atol=1e-4\n         )\n \n+    def test_logdet(self):\n+        x = np.array(\n+            [\n+                [4.42, -1.18, 0.06, 0.74],\n+                [-1.18, 1.77, -0.84, -1.16],\n+                [0.06, -0.84, 5.84, 0.55],\n+                [0.74, -1.16, 0.55, 0.77],\n+            ],\n+            dtype=\"float32\",\n+        )\n+        out = kmath.logdet(x)\n+        self.assertAllClose(out, -1.1178946)\n+\n \n class MathDtypeTest(testing.TestCase, parameterized.TestCase):\n     \"\"\"Test the floating dtype to verify that the behavior matches JAX.\"\"\"\n\n@@ -6513,7 +6513,7 @@ class Slogdet(Operation):\n \n     def compute_output_spec(self, x):\n         sign = KerasTensor((), dtype=x.dtype)\n-        logabsdet = KerasTensor((), dtype=x.dtype)\n+        logabsdet = KerasTensor(x.shape[:-2], dtype=x.dtype)\n         return (sign, logabsdet)\n \n \n\n@@ -4476,6 +4476,11 @@ class NumpyOneInputOpsCorrectnessTest(testing.TestCase, parameterized.TestCase):\n         self.assertEqual(out[0].shape, ())\n         self.assertEqual(out[1].shape, ())\n \n+        x = backend.KerasTensor((2, 4, 3, 3))\n+        out = knp.slogdet(x)\n+        self.assertEqual(out[0].shape, ())\n+        self.assertEqual(out[1].shape, (2, 4))\n+\n     def test_nan_to_num(self):\n         x = knp.array([1.0, np.nan, np.inf, -np.inf])\n         self.assertAllClose(\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "keras#c4a26319e1685aa23b449adcc8e612287111bd08", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 3 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 3 | Methods Changed: 1 | Complexity Δ (Sum/Max): 2/2 | Churn Δ: 4 | Churn Cumulative: 49 | Contributors (this commit): 4 | Commits (past 90d): 3 | Contributors (cumulative): 4 | DMM Complexity: 0.0\n\nDIFF:\n@@ -164,12 +164,14 @@ def load_model(filepath, custom_objects=None, compile=True, safe_mode=True):\n     is_keras_dir = file_utils.isdir(filepath) and file_utils.exists(\n         file_utils.join(filepath, \"config.json\")\n     )\n+    is_hf = str(filepath).startswith(\"hf://\")\n \n     # Support for remote zip files\n     if (\n         file_utils.is_remote_path(filepath)\n         and not file_utils.isdir(filepath)\n         and not is_keras_zip\n+        and not is_hf\n     ):\n         local_path = file_utils.join(\n             saving_lib.get_temp_dir(), os.path.basename(filepath)\n@@ -183,7 +185,7 @@ def load_model(filepath, custom_objects=None, compile=True, safe_mode=True):\n             filepath = local_path\n             is_keras_zip = True\n \n-    if is_keras_zip or is_keras_dir:\n+    if is_keras_zip or is_keras_dir or is_hf:\n         return saving_lib.load_model(\n             filepath,\n             custom_objects=custom_objects,\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "keras#a6cc559cdf5a0283a4b7c273d5ec2b61c632a36c", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 136 | Lines Deleted: 52 | Files Changed: 1 | Hunks: 26 | Methods Changed: 13 | Complexity Δ (Sum/Max): 7/7 | Churn Δ: 188 | Churn Cumulative: 842 | Contributors (this commit): 4 | Commits (past 90d): 3 | Contributors (cumulative): 4 | DMM Complexity: 1.0\n\nDIFF:\n@@ -1,6 +1,9 @@\n+import re\n from pathlib import Path\n \n import keras\n+from keras.src import testing\n+from keras.src.utils import model_to_dot\n from keras.src.utils import plot_model\n \n \n@@ -8,14 +11,54 @@ def assert_file_exists(path):\n     assert Path(path).is_file(), \"File does not exist\"\n \n \n-def test_plot_sequential_model():\n+def parse_text_from_html(html):\n+    pattern = r\"<font[^>]*>(.*?)</font>\"\n+    matches = re.findall(pattern, html)\n+\n+    for match in matches:\n+        clean_text = re.sub(r\"<[^>]*>\", \"\", match)\n+        return clean_text\n+    return \"\"\n+\n+\n+def get_node_text(node):\n+    attributes = node.get_attributes()\n+\n+    if \"label\" in attributes:\n+        html = node.get_attributes()[\"label\"]\n+        return parse_text_from_html(html)\n+    else:\n+        return None\n+\n+\n+def get_edge_dict(dot):\n+    node_dict = dict()\n+    for node in dot.get_nodes():\n+        node_dict[node.get_name()] = get_node_text(node)\n+\n+    edge_dict = dict()\n+    for edge in dot.get_edges():\n+        edge_dict[node_dict[edge.get_source()]] = node_dict[\n+            edge.get_destination()\n+        ]\n+\n+    return edge_dict\n+\n+\n+class ModelVisualizationTest(testing.TestCase):\n+\n+    def test_plot_sequential_model(self):\n         model = keras.Sequential(\n             [\n-            keras.Input((3,)),\n-            keras.layers.Dense(4, activation=\"relu\"),\n-            keras.layers.Dense(1, activation=\"sigmoid\"),\n+                keras.Input((3,), name=\"input\"),\n+                keras.layers.Dense(4, activation=\"relu\", name=\"dense\"),\n+                keras.layers.Dense(1, activation=\"sigmoid\", name=\"dense_1\"),\n             ]\n         )\n+\n+        edge_dict = get_edge_dict(model_to_dot(model))\n+        self.assertEqual(edge_dict[\"dense (Dense)\"], \"dense_1 (Dense)\")\n+\n         file_name = \"sequential.png\"\n         plot_model(model, file_name)\n         assert_file_exists(file_name)\n@@ -88,25 +131,40 @@ def test_plot_sequential_model():\n         )\n         assert_file_exists(file_name)\n \n-\n-def test_plot_functional_model():\n-    inputs = keras.Input((3,))\n-    x = keras.layers.Dense(4, activation=\"relu\", trainable=False)(inputs)\n+    def test_plot_functional_model(self):\n+        inputs = keras.Input((3,), name=\"input\")\n+        x = keras.layers.Dense(\n+            4, activation=\"relu\", trainable=False, name=\"dense\"\n+        )(inputs)\n         residual = x\n-    x = keras.layers.Dense(4, activation=\"relu\")(x)\n-    x = keras.layers.Dense(4, activation=\"relu\")(x)\n-    x = keras.layers.Dense(4, activation=\"relu\")(x)\n+        x = keras.layers.Dense(4, activation=\"relu\", name=\"dense_1\")(x)\n+        x = keras.layers.Dense(4, activation=\"relu\", name=\"dense_2\")(x)\n+        x = keras.layers.Dense(4, activation=\"relu\", name=\"dense_3\")(x)\n         x += residual\n         residual = x\n-    x = keras.layers.Dense(4, activation=\"relu\")(x)\n-    x = keras.layers.Dense(4, activation=\"relu\")(x)\n-    x = keras.layers.Dense(4, activation=\"relu\")(x)\n+        x = keras.layers.Dense(4, activation=\"relu\", name=\"dense_4\")(x)\n+        x = keras.layers.Dense(4, activation=\"relu\", name=\"dense_5\")(x)\n+        x = keras.layers.Dense(4, activation=\"relu\", name=\"dense_6\")(x)\n         x += residual\n-    x = keras.layers.Dropout(0.5)(x)\n-    outputs = keras.layers.Dense(1, activation=\"sigmoid\")(x)\n+        x = keras.layers.Dropout(0.5, name=\"dropout\")(x)\n+        outputs = keras.layers.Dense(1, activation=\"sigmoid\", name=\"dense_7\")(x)\n \n         model = keras.Model(inputs, outputs)\n \n+        edge_dict = get_edge_dict(model_to_dot(model))\n+\n+        self.assertEqual(edge_dict[\"input (InputLayer)\"], \"dense (Dense)\")\n+        self.assertEqual(edge_dict[\"dense (Dense)\"], \"add (Add)\")\n+        self.assertEqual(edge_dict[\"dense_1 (Dense)\"], \"dense_2 (Dense)\")\n+        self.assertEqual(edge_dict[\"dense_2 (Dense)\"], \"dense_3 (Dense)\")\n+        self.assertEqual(edge_dict[\"dense_3 (Dense)\"], \"add (Add)\")\n+        self.assertEqual(edge_dict[\"add (Add)\"], \"add_1 (Add)\")\n+        self.assertEqual(edge_dict[\"dense_4 (Dense)\"], \"dense_5 (Dense)\")\n+        self.assertEqual(edge_dict[\"dense_5 (Dense)\"], \"dense_6 (Dense)\")\n+        self.assertEqual(edge_dict[\"dense_6 (Dense)\"], \"add_1 (Add)\")\n+        self.assertEqual(edge_dict[\"add_1 (Add)\"], \"dropout (Dropout)\")\n+        self.assertEqual(edge_dict[\"dropout (Dropout)\"], \"dense_7 (Dense)\")\n+\n         file_name = \"functional.png\"\n         plot_model(model, file_name)\n         assert_file_exists(file_name)\n@@ -134,7 +192,9 @@ def test_plot_functional_model():\n         )\n         assert_file_exists(file_name)\n \n-    file_name = \"functional-show_shapes-show_dtype-show_layer_activations.png\"\n+        file_name = (\n+            \"functional-show_shapes-show_dtype-show_layer_activations.png\"\n+        )\n         plot_model(\n             model,\n             file_name,\n@@ -191,8 +251,7 @@ def test_plot_functional_model():\n         )\n         assert_file_exists(file_name)\n \n-\n-def test_plot_subclassed_model():\n+    def test_plot_subclassed_model(self):\n         class MyModel(keras.Model):\n             def __init__(self, **kwargs):\n                 super().__init__(**kwargs)\n@@ -232,7 +291,9 @@ def test_plot_subclassed_model():\n         )\n         assert_file_exists(file_name)\n \n-    file_name = \"subclassed-show_shapes-show_dtype-show_layer_activations.png\"\n+        file_name = (\n+            \"subclassed-show_shapes-show_dtype-show_layer_activations.png\"\n+        )\n         plot_model(\n             model,\n             file_name,\n@@ -289,28 +350,41 @@ def test_plot_subclassed_model():\n         )\n         assert_file_exists(file_name)\n \n+    def test_plot_nested_functional_model(self):\n+        inputs = keras.Input((3,), name=\"input\")\n+        x = keras.layers.Dense(4, activation=\"relu\", name=\"dense\")(inputs)\n+        x = keras.layers.Dense(4, activation=\"relu\", name=\"dense_1\")(x)\n+        outputs = keras.layers.Dense(3, activation=\"relu\", name=\"dense_2\")(x)\n+        inner_model = keras.Model(inputs, outputs, name=\"inner_model\")\n \n-def test_plot_nested_functional_model():\n-    inputs = keras.Input((3,))\n-    x = keras.layers.Dense(4, activation=\"relu\")(inputs)\n-    x = keras.layers.Dense(4, activation=\"relu\")(x)\n-    outputs = keras.layers.Dense(3, activation=\"relu\")(x)\n-    inner_model = keras.Model(inputs, outputs)\n-\n-    inputs = keras.Input((3,))\n-    x = keras.layers.Dense(3, activation=\"relu\", trainable=False)(inputs)\n+        inputs = keras.Input((3,), name=\"input_1\")\n+        x = keras.layers.Dense(\n+            3, activation=\"relu\", trainable=False, name=\"dense_3\"\n+        )(inputs)\n         residual = x\n         x = inner_model(x)\n-    x += residual\n+        x = keras.layers.Add(name=\"add\")([x, residual])\n         residual = x\n-    x = keras.layers.Dense(4, activation=\"relu\")(x)\n-    x = keras.layers.Dense(4, activation=\"relu\")(x)\n-    x = keras.layers.Dense(3, activation=\"relu\")(x)\n-    x += residual\n-    x = keras.layers.Dropout(0.5)(x)\n-    outputs = keras.layers.Dense(1, activation=\"sigmoid\")(x)\n+        x = keras.layers.Dense(4, activation=\"relu\", name=\"dense_4\")(x)\n+        x = keras.layers.Dense(4, activation=\"relu\", name=\"dense_5\")(x)\n+        x = keras.layers.Dense(3, activation=\"relu\", name=\"dense_6\")(x)\n+        x = keras.layers.Add(name=\"add_1\")([x, residual])\n+        x = keras.layers.Dropout(0.5, name=\"dropout\")(x)\n+        outputs = keras.layers.Dense(1, activation=\"sigmoid\", name=\"dense_7\")(x)\n         model = keras.Model(inputs, outputs)\n \n+        edge_dict = get_edge_dict(model_to_dot(model))\n+\n+        self.assertEqual(edge_dict[\"input_1 (InputLayer)\"], \"dense_3 (Dense)\")\n+        self.assertEqual(edge_dict[\"dense_3 (Dense)\"], \"add (Add)\")\n+        self.assertEqual(edge_dict[\"inner_model (Functional)\"], \"add (Add)\")\n+        self.assertEqual(edge_dict[\"add (Add)\"], \"add_1 (Add)\")\n+        self.assertEqual(edge_dict[\"dense_4 (Dense)\"], \"dense_5 (Dense)\")\n+        self.assertEqual(edge_dict[\"dense_5 (Dense)\"], \"dense_6 (Dense)\")\n+        self.assertEqual(edge_dict[\"dense_6 (Dense)\"], \"add_1 (Add)\")\n+        self.assertEqual(edge_dict[\"add_1 (Add)\"], \"dropout (Dropout)\")\n+        self.assertEqual(edge_dict[\"dropout (Dropout)\"], \"dense_7 (Dense)\")\n+\n         file_name = \"nested-functional.png\"\n         plot_model(model, file_name, expand_nested=True)\n         assert_file_exists(file_name)\n@@ -334,7 +408,9 @@ def test_plot_nested_functional_model():\n         )\n         assert_file_exists(file_name)\n \n-    file_name = \"nested-functional-show_shapes-show_dtype-show_layer_names.png\"\n+        file_name = (\n+            \"nested-functional-show_shapes-show_dtype-show_layer_names.png\"\n+        )\n         plot_model(\n             model,\n             file_name,\n@@ -384,7 +460,9 @@ def test_plot_nested_functional_model():\n         )\n         assert_file_exists(file_name)\n \n-    file_name = \"nested-functional-show_layer_activations-show_trainable.png\"\n+        file_name = (\n+            \"nested-functional-show_layer_activations-show_trainable.png\"\n+        )\n         plot_model(\n             model,\n             file_name,\n@@ -405,8 +483,7 @@ def test_plot_nested_functional_model():\n         )\n         assert_file_exists(file_name)\n \n-\n-def test_plot_functional_model_with_splits_and_merges():\n+    def test_plot_functional_model_with_splits_and_merges(self):\n         class SplitLayer(keras.Layer):\n             def call(self, x):\n                 return list(keras.ops.split(x, 2, axis=1))\n@@ -415,15 +492,30 @@ def test_plot_functional_model_with_splits_and_merges():\n             def call(self, xs):\n                 return keras.ops.concatenate(xs, axis=1)\n \n-    inputs = keras.Input((2,))\n+        inputs = keras.Input((2,), name=\"input\")\n         a, b = SplitLayer()(inputs)\n \n-    a = keras.layers.Dense(2)(a)\n-    b = keras.layers.Dense(2)(b)\n+        a = keras.layers.Dense(2, name=\"dense\")(a)\n+        b = keras.layers.Dense(2, name=\"dense_1\")(b)\n \n-    outputs = ConcatLayer()([a, b])\n+        outputs = ConcatLayer(name=\"concat_layer\")([a, b])\n         model = keras.Model(inputs, outputs)\n \n+        edge_dict = get_edge_dict(model_to_dot(model))\n+\n+        self.assertEqual(\n+            edge_dict[\"input (InputLayer)\"], \"split_layer (SplitLayer)\"\n+        )\n+        self.assertEqual(\n+            edge_dict[\"split_layer (SplitLayer)\"], \"dense_1 (Dense)\"\n+        )\n+        self.assertEqual(\n+            edge_dict[\"dense (Dense)\"], \"concat_layer (ConcatLayer)\"\n+        )\n+        self.assertEqual(\n+            edge_dict[\"dense_1 (Dense)\"], \"concat_layer (ConcatLayer)\"\n+        )\n+\n         file_name = \"split-functional.png\"\n         plot_model(model, file_name, expand_nested=True)\n         assert_file_exists(file_name)\n@@ -446,11 +538,3 @@ def test_plot_functional_model_with_splits_and_merges():\n             expand_nested=True,\n         )\n         assert_file_exists(file_name)\n-\n-\n-if __name__ == \"__main__\":\n-    test_plot_sequential_model()\n-    test_plot_functional_model()\n-    test_plot_subclassed_model()\n-    test_plot_nested_functional_model()\n-    test_plot_functional_model_with_splits_and_merges()\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "keras#26d35369d2a8de82382c88c1793cd8e74bbd654e", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 43 | Lines Deleted: 43 | Files Changed: 2 | Hunks: 42 | Methods Changed: 7 | Complexity Δ (Sum/Max): 1/2 | Churn Δ: 86 | Churn Cumulative: 1033 | Contributors (this commit): 6 | Commits (past 90d): 9 | Contributors (cumulative): 8 | DMM Complexity: 1.0\n\nDIFF:\n@@ -1,5 +1,4 @@\n import re\n-from pathlib import Path\n \n import keras\n from keras.src import testing\n@@ -7,10 +6,6 @@ from keras.src.utils import model_to_dot\n from keras.src.utils import plot_model\n \n \n-def assert_file_exists(path):\n-    assert Path(path).is_file(), \"File does not exist\"\n-\n-\n def parse_text_from_html(html):\n     pattern = r\"<font[^>]*>(.*?)</font>\"\n     matches = re.findall(pattern, html)\n@@ -61,11 +56,11 @@ class ModelVisualizationTest(testing.TestCase):\n \n         file_name = \"sequential.png\"\n         plot_model(model, file_name)\n-        assert_file_exists(file_name)\n+        self.assertFileExists(file_name)\n \n         file_name = \"sequential-show_shapes.png\"\n         plot_model(model, file_name, show_shapes=True)\n-        assert_file_exists(file_name)\n+        self.assertFileExists(file_name)\n \n         file_name = \"sequential-show_shapes-show_dtype.png\"\n         plot_model(\n@@ -74,7 +69,7 @@ class ModelVisualizationTest(testing.TestCase):\n             show_shapes=True,\n             show_dtype=True,\n         )\n-        assert_file_exists(file_name)\n+        self.assertFileExists(file_name)\n \n         file_name = \"sequential-show_shapes-show_dtype-show_layer_names.png\"\n         plot_model(\n@@ -84,7 +79,7 @@ class ModelVisualizationTest(testing.TestCase):\n             show_dtype=True,\n             show_layer_names=True,\n         )\n-        assert_file_exists(file_name)\n+        self.assertFileExists(file_name)\n \n         file_name = \"sequential-show_shapes-show_dtype-show_layer_names-show_layer_activations.png\"  # noqa: E501\n         plot_model(\n@@ -95,7 +90,7 @@ class ModelVisualizationTest(testing.TestCase):\n             show_layer_names=True,\n             show_layer_activations=True,\n         )\n-        assert_file_exists(file_name)\n+        self.assertFileExists(file_name)\n \n         file_name = \"sequential-show_shapes-show_dtype-show_layer_names-show_layer_activations-show_trainable.png\"  # noqa: E501\n         plot_model(\n@@ -107,7 +102,7 @@ class ModelVisualizationTest(testing.TestCase):\n             show_layer_activations=True,\n             show_trainable=True,\n         )\n-        assert_file_exists(file_name)\n+        self.assertFileExists(file_name)\n \n         file_name = \"sequential-show_shapes-show_dtype-show_layer_names-show_layer_activations-show_trainable-LR.png\"  # noqa: E501\n         plot_model(\n@@ -120,7 +115,7 @@ class ModelVisualizationTest(testing.TestCase):\n             show_trainable=True,\n             rankdir=\"LR\",\n         )\n-        assert_file_exists(file_name)\n+        self.assertFileExists(file_name)\n \n         file_name = \"sequential-show_layer_activations-show_trainable.png\"\n         plot_model(\n@@ -129,7 +124,7 @@ class ModelVisualizationTest(testing.TestCase):\n             show_layer_activations=True,\n             show_trainable=True,\n         )\n-        assert_file_exists(file_name)\n+        self.assertFileExists(file_name)\n \n     def test_plot_functional_model(self):\n         inputs = keras.Input((3,), name=\"input\")\n@@ -167,11 +162,11 @@ class ModelVisualizationTest(testing.TestCase):\n \n         file_name = \"functional.png\"\n         plot_model(model, file_name)\n-        assert_file_exists(file_name)\n+        self.assertFileExists(file_name)\n \n         file_name = \"functional-show_shapes.png\"\n         plot_model(model, file_name, show_shapes=True)\n-        assert_file_exists(file_name)\n+        self.assertFileExists(file_name)\n \n         file_name = \"functional-show_shapes-show_dtype.png\"\n         plot_model(\n@@ -180,7 +175,7 @@ class ModelVisualizationTest(testing.TestCase):\n             show_shapes=True,\n             show_dtype=True,\n         )\n-        assert_file_exists(file_name)\n+        self.assertFileExists(file_name)\n \n         file_name = \"functional-show_shapes-show_dtype-show_layer_names.png\"\n         plot_model(\n@@ -190,7 +185,7 @@ class ModelVisualizationTest(testing.TestCase):\n             show_dtype=True,\n             show_layer_names=True,\n         )\n-        assert_file_exists(file_name)\n+        self.assertFileExists(file_name)\n \n         file_name = (\n             \"functional-show_shapes-show_dtype-show_layer_activations.png\"\n@@ -203,7 +198,7 @@ class ModelVisualizationTest(testing.TestCase):\n             show_layer_names=True,\n             show_layer_activations=True,\n         )\n-        assert_file_exists(file_name)\n+        self.assertFileExists(file_name)\n \n         file_name = \"functional-show_shapes-show_dtype-show_layer_activations-show_trainable.png\"  # noqa: E501\n         plot_model(\n@@ -215,7 +210,7 @@ class ModelVisualizationTest(testing.TestCase):\n             show_layer_activations=True,\n             show_trainable=True,\n         )\n-        assert_file_exists(file_name)\n+        self.assertFileExists(file_name)\n \n         file_name = \"functional-show_shapes-show_dtype-show_layer_names-show_layer_activations-show_trainable-LR.png\"  # noqa: E501\n         plot_model(\n@@ -228,7 +223,7 @@ class ModelVisualizationTest(testing.TestCase):\n             show_trainable=True,\n             rankdir=\"LR\",\n         )\n-        assert_file_exists(file_name)\n+        self.assertFileExists(file_name)\n \n         file_name = \"functional-show_layer_activations-show_trainable.png\"\n         plot_model(\n@@ -237,7 +232,7 @@ class ModelVisualizationTest(testing.TestCase):\n             show_layer_activations=True,\n             show_trainable=True,\n         )\n-        assert_file_exists(file_name)\n+        self.assertFileExists(file_name)\n \n         file_name = (\n             \"functional-show_shapes-show_layer_activations-show_trainable.png\"\n@@ -249,7 +244,7 @@ class ModelVisualizationTest(testing.TestCase):\n             show_layer_activations=True,\n             show_trainable=True,\n         )\n-        assert_file_exists(file_name)\n+        self.assertFileExists(file_name)\n \n     def test_plot_subclassed_model(self):\n         class MyModel(keras.Model):\n@@ -266,11 +261,11 @@ class ModelVisualizationTest(testing.TestCase):\n \n         file_name = \"subclassed.png\"\n         plot_model(model, file_name)\n-        assert_file_exists(file_name)\n+        self.assertFileExists(file_name)\n \n         file_name = \"subclassed-show_shapes.png\"\n         plot_model(model, file_name, show_shapes=True)\n-        assert_file_exists(file_name)\n+        self.assertFileExists(file_name)\n \n         file_name = \"subclassed-show_shapes-show_dtype.png\"\n         plot_model(\n@@ -279,7 +274,7 @@ class ModelVisualizationTest(testing.TestCase):\n             show_shapes=True,\n             show_dtype=True,\n         )\n-        assert_file_exists(file_name)\n+        self.assertFileExists(file_name)\n \n         file_name = \"subclassed-show_shapes-show_dtype-show_layer_names.png\"\n         plot_model(\n@@ -289,7 +284,7 @@ class ModelVisualizationTest(testing.TestCase):\n             show_dtype=True,\n             show_layer_names=True,\n         )\n-        assert_file_exists(file_name)\n+        self.assertFileExists(file_name)\n \n         file_name = (\n             \"subclassed-show_shapes-show_dtype-show_layer_activations.png\"\n@@ -302,7 +297,7 @@ class ModelVisualizationTest(testing.TestCase):\n             show_layer_names=True,\n             show_layer_activations=True,\n         )\n-        assert_file_exists(file_name)\n+        self.assertFileExists(file_name)\n \n         file_name = \"subclassed-show_shapes-show_dtype-show_layer_names-show_layer_activations-show_trainable.png\"  # noqa: E501\n         plot_model(\n@@ -314,7 +309,7 @@ class ModelVisualizationTest(testing.TestCase):\n             show_layer_activations=True,\n             show_trainable=True,\n         )\n-        assert_file_exists(file_name)\n+        self.assertFileExists(file_name)\n \n         file_name = \"subclassed-show_shapes-show_dtype-show_layer_names-show_layer_activations-show_trainable-LR.png\"  # noqa: E501\n         plot_model(\n@@ -327,7 +322,7 @@ class ModelVisualizationTest(testing.TestCase):\n             show_trainable=True,\n             rankdir=\"LR\",\n         )\n-        assert_file_exists(file_name)\n+        self.assertFileExists(file_name)\n \n         file_name = \"subclassed-show_layer_activations-show_trainable.png\"\n         plot_model(\n@@ -336,7 +331,7 @@ class ModelVisualizationTest(testing.TestCase):\n             show_layer_activations=True,\n             show_trainable=True,\n         )\n-        assert_file_exists(file_name)\n+        self.assertFileExists(file_name)\n \n         file_name = (\n             \"subclassed-show_shapes-show_layer_activations-show_trainable.png\"\n@@ -348,7 +343,7 @@ class ModelVisualizationTest(testing.TestCase):\n             show_layer_activations=True,\n             show_trainable=True,\n         )\n-        assert_file_exists(file_name)\n+        self.assertFileExists(file_name)\n \n     def test_plot_nested_functional_model(self):\n         inputs = keras.Input((3,), name=\"input\")\n@@ -387,7 +382,7 @@ class ModelVisualizationTest(testing.TestCase):\n \n         file_name = \"nested-functional.png\"\n         plot_model(model, file_name, expand_nested=True)\n-        assert_file_exists(file_name)\n+        self.assertFileExists(file_name)\n \n         file_name = \"nested-functional-show_shapes.png\"\n         plot_model(\n@@ -396,7 +391,7 @@ class ModelVisualizationTest(testing.TestCase):\n             show_shapes=True,\n             expand_nested=True,\n         )\n-        assert_file_exists(file_name)\n+        self.assertFileExists(file_name)\n \n         file_name = \"nested-functional-show_shapes-show_dtype.png\"\n         plot_model(\n@@ -406,7 +401,7 @@ class ModelVisualizationTest(testing.TestCase):\n             show_dtype=True,\n             expand_nested=True,\n         )\n-        assert_file_exists(file_name)\n+        self.assertFileExists(file_name)\n \n         file_name = (\n             \"nested-functional-show_shapes-show_dtype-show_layer_names.png\"\n@@ -419,7 +414,7 @@ class ModelVisualizationTest(testing.TestCase):\n             show_layer_names=True,\n             expand_nested=True,\n         )\n-        assert_file_exists(file_name)\n+        self.assertFileExists(file_name)\n \n         file_name = \"nested-functional-show_shapes-show_dtype-show_layer_names-show_layer_activations.png\"  # noqa: E501\n         plot_model(\n@@ -431,7 +426,7 @@ class ModelVisualizationTest(testing.TestCase):\n             show_layer_activations=True,\n             expand_nested=True,\n         )\n-        assert_file_exists(file_name)\n+        self.assertFileExists(file_name)\n \n         file_name = \"nested-functional-show_shapes-show_dtype-show_layer_names-show_layer_activations-show_trainable.png\"  # noqa: E501\n         plot_model(\n@@ -444,7 +439,7 @@ class ModelVisualizationTest(testing.TestCase):\n             show_trainable=True,\n             expand_nested=True,\n         )\n-        assert_file_exists(file_name)\n+        self.assertFileExists(file_name)\n \n         file_name = \"nested-functional-show_shapes-show_dtype-show_layer_names-show_layer_activations-show_trainable-LR.png\"  # noqa: E501\n         plot_model(\n@@ -458,7 +453,7 @@ class ModelVisualizationTest(testing.TestCase):\n             rankdir=\"LR\",\n             expand_nested=True,\n         )\n-        assert_file_exists(file_name)\n+        self.assertFileExists(file_name)\n \n         file_name = (\n             \"nested-functional-show_layer_activations-show_trainable.png\"\n@@ -470,7 +465,7 @@ class ModelVisualizationTest(testing.TestCase):\n             show_trainable=True,\n             expand_nested=True,\n         )\n-        assert_file_exists(file_name)\n+        self.assertFileExists(file_name)\n \n         file_name = \"nested-functional-show_shapes-show_layer_activations-show_trainable.png\"  # noqa: E501\n         plot_model(\n@@ -481,7 +476,7 @@ class ModelVisualizationTest(testing.TestCase):\n             show_trainable=True,\n             expand_nested=True,\n         )\n-        assert_file_exists(file_name)\n+        self.assertFileExists(file_name)\n \n     def test_plot_functional_model_with_splits_and_merges(self):\n         class SplitLayer(keras.Layer):\n@@ -518,7 +513,7 @@ class ModelVisualizationTest(testing.TestCase):\n \n         file_name = \"split-functional.png\"\n         plot_model(model, file_name, expand_nested=True)\n-        assert_file_exists(file_name)\n+        self.assertFileExists(file_name)\n \n         file_name = \"split-functional-show_shapes.png\"\n         plot_model(\n@@ -527,7 +522,7 @@ class ModelVisualizationTest(testing.TestCase):\n             show_shapes=True,\n             expand_nested=True,\n         )\n-        assert_file_exists(file_name)\n+        self.assertFileExists(file_name)\n \n         file_name = \"split-functional-show_shapes-show_dtype.png\"\n         plot_model(\n@@ -537,4 +532,4 @@ class ModelVisualizationTest(testing.TestCase):\n             show_dtype=True,\n             expand_nested=True,\n         )\n-        assert_file_exists(file_name)\n+        self.assertFileExists(file_name)\n\n@@ -2,6 +2,7 @@ import json\n import shutil\n import tempfile\n import unittest\n+from pathlib import Path\n \n import numpy as np\n \n@@ -113,6 +114,10 @@ class TestCase(unittest.TestCase):\n         msg = msg or default_msg\n         self.assertEqual(x_dtype, standardized_dtype, msg=msg)\n \n+    def assertFileExists(self, path):\n+        if not Path(path).is_file():\n+            raise AssertionError(f\"File {path} does not exist\")\n+\n     def run_class_serialization_test(self, instance, custom_objects=None):\n         from keras.src.saving import custom_object_scope\n         from keras.src.saving import deserialize_keras_object\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "keras#d1da0d1d4ced38e111595aacbc04d260e853049e", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 254 | Lines Deleted: 65 | Files Changed: 5 | Hunks: 42 | Methods Changed: 10 | Complexity Δ (Sum/Max): 32/24 | Churn Δ: 319 | Churn Cumulative: 1237 | Contributors (this commit): 1 | Commits (past 90d): 13 | Contributors (cumulative): 5 | DMM Complexity: 0.0\n\nDIFF:\n@@ -1,3 +1,6 @@\n+from keras.src.layers.preprocessing.image_preprocessing.bounding_boxes.validation import (\n+    densify_bounding_boxes,\n+)\n from keras.src.layers.preprocessing.tf_data_layer import TFDataLayer\n \n \n@@ -5,6 +8,10 @@ class BaseImagePreprocessingLayer(TFDataLayer):\n \n     _FACTOR_BOUNDS = (-1, 1)\n \n+    def __init__(self, bounding_box_format=None, **kwargs):\n+        super().__init__(**kwargs)\n+        self.bounding_box_format = bounding_box_format\n+\n     def _set_factor(self, factor):\n         error_msg = (\n             \"The `factor` argument should be a number \"\n@@ -113,15 +120,18 @@ class BaseImagePreprocessingLayer(TFDataLayer):\n                     training=training,\n                 )\n             if \"bounding_boxes\" in data:\n+                bounding_boxes = densify_bounding_boxes(\n+                    data[\"bounding_boxes\"], backend=self.backend\n+                )\n                 if is_batched:\n                     data[\"bounding_boxes\"] = self.augment_bounding_boxes(\n-                        data[\"bounding_boxes\"],\n+                        bounding_boxes,\n                         transformation=transformation,\n                         training=training,\n                     )\n                 else:\n                     data[\"bounding_boxes\"] = self.augment_single_bounding_box(\n-                        data[\"bounding_boxes\"],\n+                        bounding_boxes,\n                         transformation=transformation,\n                         training=training,\n                     )\n@@ -160,8 +170,12 @@ class BaseImagePreprocessingLayer(TFDataLayer):\n         # `data` is just images.\n         if self._is_batched(data):\n             return self.augment_images(\n-                self.backend.convert_to_tensor(data), transformation=transformation, training=training\n+                self.backend.convert_to_tensor(data),\n+                transformation=transformation,\n+                training=training,\n             )\n         return self.augment_single_image(\n-            self.backend.convert_to_tensor(data), transformation=transformation, training=training\n+            self.backend.convert_to_tensor(data),\n+            transformation=transformation,\n+            training=training,\n         )\n\n@@ -1,6 +1,5 @@\n \"\"\"Converter functions for working with bounding box formats.\"\"\"\n \n-\n from keras.src import ops\n from keras.src.api_export import keras_export\n from keras.src.utils import tf_utils\n@@ -510,4 +509,3 @@ def _image_shape(images, image_shape, boxes):\n     else:\n         height, width = image_shape[0], image_shape[1]\n     return ops.cast(height, boxes.dtype), ops.cast(width, boxes.dtype)\n-\n\n@@ -1,28 +1,158 @@\n+from keras.src import backend as current_backend\n+from keras.src.utils import tf_utils\n \n \n-\n-def densify_bounding_boxes(bounding_boxes):\n+def densify_bounding_boxes(\n+    bounding_boxes,\n+    max_boxes=None,\n+    boxes_default_value=0,\n+    labels_default_value=-1,\n+    backend=None,\n+):\n     validate_bounding_boxes(bounding_boxes)\n+    boxes = bounding_boxes[\"boxes\"]\n+    labels = bounding_boxes[\"labels\"]\n+    backend = backend or current_backend\n+    if isinstance(boxes, list):\n+        if boxes and isinstance(boxes[0], list):\n+            if boxes[0] and isinstance(boxes[0][0], list):\n+                # Batched case\n+                if not isinstance(labels[0][0], int):\n+                    raise ValueError(\n+                        \"If providing `bounding_boxes['labels']` as a list, \"\n+                        \"it should contain integers labels. Received: \"\n+                        f\"bounding_boxes['labels']={labels}\"\n+                    )\n+                if max_boxes is not None:\n+                    max_boxes = max([len(b) for b in boxes])\n+                new_boxes = []\n+                new_labels = []\n+                for b, l in zip(boxes, labels):\n+                    if len(b) >= max_boxes:\n+                        new_boxes.append(b[:max_boxes])\n+                        new_labels.append(l[:max_boxes])\n+                    else:\n+                        num_boxes_to_add = max_boxes - len(b)\n+                        added_boxes = [\n+                            [\n+                                boxes_default_value,\n+                                boxes_default_value,\n+                                boxes_default_value,\n+                                boxes_default_value,\n+                            ]\n+                            for _ in range(num_boxes_to_add)\n+                        ]\n+                        new_boxes.append(b + added_boxes)\n+                        new_labels.append(\n+                            l\n+                            + [\n+                                labels_default_value\n+                                for _ in range(num_boxes_to_add)\n+                            ]\n+                        )\n+            else:\n+                # Unbatched case\n+                if max_boxes and len(b) >= max_boxes:\n+                    new_boxes = b[:max_boxes]\n+                    new_labels = l[:max_boxes]\n+                else:\n+                    num_boxes_to_add = max_boxes - len(b)\n+                    added_boxes = [\n+                        [\n+                            boxes_default_value,\n+                            boxes_default_value,\n+                            boxes_default_value,\n+                            boxes_default_value,\n+                        ]\n+                        for _ in range(num_boxes_to_add)\n+                    ]\n+                    new_boxes = b + added_boxes\n+                    new_labels = l + [\n+                        labels_default_value for _ in range(num_boxes_to_add)\n+                    ]\n+            return {\n+                \"boxes\": backend.convert_to_tensor(new_boxes, dtype=\"int32\"),\n+                \"labels\": backend.convert_to_tensor(new_boxes, dtype=\"int32\"),\n+            }\n+\n+    if tf_utils.is_ragged_tensor(boxes):\n+        bounding_boxes[\"boxes\"] = bounding_boxes[\"boxes\"].to_tensor(\n+            default_value=boxes_default_value,\n+            shape=\"TODO\",\n+        )\n+        bounding_boxes[\"labels\"] = bounding_boxes[\"labels\"].to_tensor(\n+            default_value=labels_default_value,\n+            shape=\"TODO\",\n+        )\n+        return bounding_boxes\n+\n+    bounding_boxes[\"boxes\"] = backend.convert_to_tensor(boxes, dtype=\"int32\")\n+    bounding_boxes[\"labels\"] = backend.convert_to_tensor(labels)\n+    return bounding_boxes\n \n \n def validate_bounding_boxes(bounding_boxes):\n-    if not isinstance(bounding_boxes, dict):\n+    if (\n+        not isinstance(bounding_boxes, dict)\n+        or \"labels\" not in bounding_boxes\n+        or \"boxes\" not in bounding_boxes\n+    ):\n         raise ValueError(\n-            \"\"\n+            \"Expected `bounding_boxes` agurment to be a \"\n+            \"dict with keys 'boxes' and 'labels'. Received: \"\n+            f\"bounding_boxes={bounding_boxes}\"\n         )\n-    if not \"labels\" in bounding_boxes or not \"boxes\" in bounding_boxes:\n+    boxes = bounding_boxes[\"boxes\"]\n+    labels = bounding_boxes[\"labels\"]\n+    if isinstance(boxes, list):\n+        if not isinstance(labels, list):\n             raise ValueError(\n-            \"\"\n+                \"If `bounding_boxes['boxes']` is a list, then \"\n+                \"`bounding_boxes['labels']` must also be a list.\"\n+                f\"Received: bounding_boxes['labels']={labels}\"\n             )\n-\n-    if isinstance(bounding_boxes[\"boxes\"], list):\n-        if not isinstance(bounding_boxes[\"labels\"], list):\n+        if len(boxes) != len(labels):\n             raise ValueError(\n-                \"\"\n+                \"If `bounding_boxes['boxes']` and \"\n+                \"`bounding_boxes['labels']` are both lists, \"\n+                \"they must have the same length. Received: \"\n+                f\"len(bounding_boxes['boxes'])={len(boxes)} and \"\n+                f\"len(bounding_boxes['labels'])={len(labels)} and \"\n             )\n-        if len(bounding_boxes[\"boxes\"]) != bounding_boxes[\"labels\"]:\n+    elif tf_utils.is_ragged_tensor(boxes):\n+        if not tf_utils.is_ragged_tensor(labels):\n             raise ValueError(\n-                \"\"\n+                \"If `bounding_boxes['boxes']` is a Ragged tensor, \"\n+                \" `bounding_boxes['labels']` must also be a \"\n+                \"Ragged tensor. \"\n+                f\"Received: bounding_boxes['labels']={labels}\"\n+            )\n+    else:\n+        boxes_shape = current_backend.shape(boxes)\n+        labels_shape = current_backend.shape(labels)\n+        if len(boxes_shape) == 2:  # (boxes, 4)\n+            if len(labels_shape) not in {1, 2}:\n+                raise ValueError(\n+                    \"Found \"\n+                    f\"bounding_boxes['boxes'].shape={boxes_shape} \"\n+                    \"and expected bounding_boxes['labels'] to have \"\n+                    \"rank 1 or 2, but received: \"\n+                    f\"bounding_boxes['labels'].shape={labels_shape} \"\n+                )\n+        elif len(boxes_shape) == 3:\n+            if len(labels_shape) not in {2, 3}:\n+                raise ValueError(\n+                    \"Found \"\n+                    f\"bounding_boxes['boxes'].shape={boxes_shape} \"\n+                    \"and expected bounding_boxes['labels'] to have \"\n+                    \"rank 2 or 3, but received: \"\n+                    f\"bounding_boxes['labels'].shape={labels_shape} \"\n+                )\n+        else:\n+            raise ValueError(\n+                \"Expected `bounding_boxes['boxes']` \"\n+                \"to have rank 2 or 3, with shape \"\n+                \"(num_boxes, 4) or (batch_size, num_boxes, 4). \"\n+                \"Received: \"\n+                f\"bounding_boxes['boxes'].shape={boxes_shape}\"\n             )\n-\n-    \n\\ No newline at end of file\n\n@@ -1,8 +1,12 @@\n from keras.src import backend\n from keras.src.api_export import keras_export\n-from keras.src.layers.preprocessing.image_preprocessing.base_image_preprocessing_layer import BaseImagePreprocessingLayer\n+from keras.src.layers.preprocessing.image_preprocessing.base_image_preprocessing_layer import (\n+    BaseImagePreprocessingLayer,\n+)\n+from keras.src.layers.preprocessing.image_preprocessing.bounding_boxes.validation import (\n+    densify_bounding_boxes,\n+)\n from keras.src.random.seed_generator import SeedGenerator\n-from keras.src.utils import image_utils\n \n \n @keras_export(\"keras.layers.RandomCrop\")\n@@ -115,34 +119,62 @@ class RandomCrop(BaseImagePreprocessingLayer):\n         return h_start, w_start\n \n     def augment_images(self, images, transformation, training=True):\n-        inputs = self.backend.cast(images, self.compute_dtype)\n-        h_start, w_start = transformation\n+        images = self.backend.cast(images, self.compute_dtype)\n+        crop_box_hstart, crop_box_wstart = transformation\n+        crop_height = self.height\n+        crop_width = self.width\n+\n         if self.data_format == \"channels_last\":\n-            return self.backend.core.slice(\n-                inputs,\n-                self.backend.numpy.stack([0, h_start, w_start, 0]),\n-                [\n-                    self.backend.shape(inputs)[0],\n-                    self.height,\n-                    self.width,\n-                    self.backend.shape(inputs)[3],\n-                ],\n-            )\n-        return self.backend.core.slice(\n-            inputs,\n-            self.backend.numpy.stack([0, 0, h_start, w_start]),\n-            [\n-                self.backend.shape(inputs)[0],\n-                self.backend.shape(inputs)[1],\n-                self.height,\n-                self.width,\n-            ],\n+            if len(images.shape) == 4:\n+                images = images[\n+                    :,\n+                    crop_box_hstart : crop_box_hstart + crop_height,\n+                    crop_box_wstart : crop_box_wstart + crop_width,\n+                    :,\n+                ]\n+            else:\n+                images = images[\n+                    crop_box_hstart : crop_box_hstart + crop_height,\n+                    crop_box_wstart : crop_box_wstart + crop_width,\n+                    :,\n+                ]\n+        else:\n+            if len(images.shape) == 4:\n+                images = images[\n+                    :,\n+                    :,\n+                    crop_box_hstart : crop_box_hstart + crop_height,\n+                    crop_box_wstart : crop_box_wstart + crop_width,\n+                ]\n+            else:\n+                images = images[\n+                    :,\n+                    crop_box_hstart : crop_box_hstart + crop_height,\n+                    crop_box_wstart : crop_box_wstart + crop_width,\n+                ]\n+\n+        shape = self.backend.shape(images)\n+        new_height = shape[self.height_axis]\n+        new_width = shape[self.width_axis]\n+        if (\n+            not isinstance(new_height, int)\n+            or not isinstance(new_width, int)\n+            or new_height != self.height\n+            or new_width != self.width\n+        ):\n+            images = self.backend.image.resize(\n+                images,\n+                size=(self.height, self.width),\n+                data_format=self.data_format,\n             )\n+        return images\n \n     def augment_labels(self, labels, transformation, training=True):\n         return labels\n \n-    def augment_bounding_boxes(self, bounding_boxes, transformation, training=True):\n+    def augment_bounding_boxes(\n+        self, bounding_boxes, transformation, training=True\n+    ):\n         \"\"\"\n         bounding_boxes = {\n             \"boxes\": (batch, num_boxes, 4),  # left-top-right-bottom\n@@ -154,36 +186,41 @@ class RandomCrop(BaseImagePreprocessingLayer):\n             \"labels\": (num_boxes, num_classes),\n         }\n         \"\"\"\n-        boxes = bounding_boxes[\"boxes\"]\n         h_start, w_start = transformation\n-        # TODO: validate box format\n-        # TODO: convert and pad ragged, list inputs\n+        if not self.backend.is_tensor(bounding_boxes[\"boxes\"]):\n+            bounding_boxes = densify_bounding_boxes(\n+                bounding_boxes, backend=self.backend\n+            )\n+        boxes = bounding_boxes[\"boxes\"]\n+\n         if len(self.backend.shape(boxes)) == 3:\n-            boxes = self.backend.stack(\n+            boxes = self.backend.numpy.stack(\n                 [\n-                    self.backend.maximum(boxes[:, :, 0] - h_start, 0),\n-                    self.backend.maximum(boxes[:, :, 1] - w_start, 0),\n-                    self.backend.maximum(boxes[:, :, 2] - h_start, 0),\n-                    self.backend.maximum(boxes[:, :, 3] - w_start, 0),\n+                    self.backend.numpy.maximum(boxes[:, :, 0] - h_start, 0),\n+                    self.backend.numpy.maximum(boxes[:, :, 1] - w_start, 0),\n+                    self.backend.numpy.maximum(boxes[:, :, 2] - h_start, 0),\n+                    self.backend.numpy.maximum(boxes[:, :, 3] - w_start, 0),\n                 ],\n-                axis=-1\n+                axis=-1,\n             )\n         else:\n-            boxes = self.backend.stack(\n+            boxes = self.backend.numpy.stack(\n                 [\n-                    self.backend.maximum(boxes[:, 0] - h_start, 0),\n-                    self.backend.maximum(boxes[:, 1] - w_start, 0),\n-                    self.backend.maximum(boxes[:, 2] - h_start, 0),\n-                    self.backend.maximum(boxes[:, 3] - w_start, 0),\n+                    self.backend.numpy.maximum(boxes[:, 0] - h_start, 0),\n+                    self.backend.numpy.maximum(boxes[:, 1] - w_start, 0),\n+                    self.backend.numpy.maximum(boxes[:, 2] - h_start, 0),\n+                    self.backend.numpy.maximum(boxes[:, 3] - w_start, 0),\n                 ],\n-                axis=-1\n+                axis=-1,\n             )\n         return {\n             \"boxes\": boxes,\n             \"labels\": bounding_boxes[\"labels\"],\n         }\n \n-    def augment_segmentation_masks(self, segmentation_masks, transformation, training=True):\n+    def augment_segmentation_masks(\n+        self, segmentation_masks, transformation, training=True\n+    ):\n         return self.augment_images(segmentation_masks, transformation)\n \n     def compute_output_shape(self, input_shape, *args, **kwargs):\n\n@@ -18,7 +18,7 @@ class RandomCropTest(testing.TestCase):\n             input_shape=(1, 3, 4, 3),\n             supports_masking=False,\n             run_training_check=False,\n-            expected_output_shape=(1, 2, 2, 3)\n+            expected_output_shape=(1, 2, 2, 3),\n         )\n         self.run_layer_test(\n             layers.RandomCrop,\n@@ -30,7 +30,7 @@ class RandomCropTest(testing.TestCase):\n             input_shape=(3, 4, 3),\n             supports_masking=False,\n             run_training_check=False,\n-            expected_output_shape=(2, 2, 3)\n+            expected_output_shape=(2, 2, 3),\n         )\n         self.run_layer_test(\n             layers.RandomCrop,\n@@ -42,7 +42,7 @@ class RandomCropTest(testing.TestCase):\n             input_shape=(1, 3, 3, 4),\n             supports_masking=False,\n             run_training_check=False,\n-            expected_output_shape=(1, 3, 2, 2)\n+            expected_output_shape=(1, 3, 2, 2),\n         )\n         self.run_layer_test(\n             layers.RandomCrop,\n@@ -54,7 +54,7 @@ class RandomCropTest(testing.TestCase):\n             input_shape=(3, 3, 4),\n             supports_masking=False,\n             run_training_check=False,\n-            expected_output_shape=(3, 2, 2)\n+            expected_output_shape=(3, 2, 2),\n         )\n \n     def test_random_crop_full(self):\n@@ -146,6 +146,16 @@ class RandomCropTest(testing.TestCase):\n             \"images\": np.random.random((2, 4, 5, 3)),\n             \"labels\": np.random.random((2, 7)),\n             \"segmentation_masks\": np.random.random((2, 4, 5, 7)),\n-            \"bounding_boxes\": [[1, 2], [2, 3]],\n+            \"bounding_boxes\": {\n+                \"boxes\": np.array([[1, 2, 2, 3]]),\n+                \"labels\": np.array([0]),\n+            },\n         }\n         transformed_data = layer(data)\n+        self.assertEqual(\n+            data[\"images\"].shape[:-1],\n+            transformed_data[\"segmentation_masks\"].shape[:-1],\n+        )\n+        self.assertAllEqual(data[\"labels\"], transformed_data[\"labels\"])\n+        self.assertEqual(data[\"bounding_boxes\"][\"boxes\"].shape, (1, 4))\n+        self.assertEqual(data[\"bounding_boxes\"][\"labels\"].shape, (1,))\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
