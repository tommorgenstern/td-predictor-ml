{"custom_id": "keras#3981a87b319a3af3b80a499e1ec2bda83753e8cc", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 4 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): -1/0 | Churn Δ: 4 | Churn Cumulative: 2360 | Contributors (this commit): 25 | Commits (past 90d): 30 | Contributors (cumulative): 25 | DMM Complexity: 0.0\n\nDIFF:\n@@ -269,6 +269,10 @@ class Merge(Layer):\n             raise Exception(\"Please specify two or more input layers (or containers) to merge\")\n         if mode not in {'sum', 'mul', 'concat', 'ave', 'join'}:\n             raise Exception(\"Invalid merge mode: \" + str(mode))\n+        if mode in {'sum', 'mul', 'ave'}:\n+            input_shapes=set([l.output_shape for l in layers])\n+            if len(input_shapes)>1:\n+                raise Exception(\"Only layers of same output shape can be merged using \" + mode + \" mode\")\n         self.mode = mode\n         self.concat_axis = concat_axis\n         self.layers = layers\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "keras#73c0045815a0af0266b2f98d8ce7b64e021140a7", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 3 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 4 | Churn Cumulative: 2364 | Contributors (this commit): 25 | Commits (past 90d): 31 | Contributors (cumulative): 25 | DMM Complexity: 1.0\n\nDIFF:\n@@ -79,8 +79,10 @@ class Layer(object):\n     @property\n     def output_shape(self):\n         # default assumption: tensor shape unchanged.\n+        try:\n             return self.input_shape\n-\n+        except:\n+            return (None,)\n     def get_output(self, train=False):\n         return self.get_input(train)\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "keras#1526d81ab3ecf09e381f2fc98e2c1c69ce3d1e28", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 85 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 85 | Churn Cumulative: 85 | Contributors (this commit): 1 | Commits (past 90d): 1 | Contributors (cumulative): 1 | DMM Complexity: None\n\nDIFF:\n@@ -0,0 +1,85 @@\n+from __future__ import absolute_import\n+from __future__ import print_function\n+import numpy as np\n+np.random.seed(1337)  # for reproducibility\n+\n+from keras.preprocessing import sequence\n+from keras.optimizers import SGD, RMSprop, Adagrad\n+from keras.utils import np_utils\n+from keras.models import Sequential\n+from keras.layers.core import Dense, Dropout, Activation\n+from keras.layers.embeddings import Embedding\n+from keras.layers.recurrent import LSTM, GRU, SimpleRNN\n+from keras.layers.convolutional import Convolution1D, MaxPooling1D\n+from keras.datasets import imdb\n+\n+'''\n+    Train a combination of Convoloution1D and LSTM on the IMDB sentiment classification task.\n+    Better results compared to CNN and LSTM examples\n+    Reach 84.98% accuracy in 2 epoches\n+    GPU command:\n+        THEANO_FLAGS=mode=FAST_RUN,device=gpu,floatX=float32 python imdb_lstm.py\n+'''\n+\n+\n+#Parameters\n+\n+#Embedding\n+max_features = 20000\n+maxlen = 100 \n+embedding_size=128\n+\n+#Convolution\n+filter_length = 3\n+nb_filter = 64\n+pool_length=2\n+\n+#LSTM\n+lstm_output_size=70\n+\n+#Training\n+batch_size = 30\n+nb_epoch=2\n+'''\n+Note:\n+batch_size is highly sensitive.\n+Only 2 epoches are done as the dataset is too small.\n+'''\n+\n+\n+print(\"Loading data...\")\n+(X_train, y_train), (X_test, y_test) = imdb.load_data(nb_words=max_features, test_split=0.2)\n+print(len(X_train), 'train sequences')\n+print(len(X_test), 'test sequences')\n+\n+print(\"Pad sequences (samples x time)\")\n+X_train = sequence.pad_sequences(X_train, maxlen=maxlen)\n+X_test = sequence.pad_sequences(X_test, maxlen=maxlen)\n+print('X_train shape:', X_train.shape)\n+print('X_test shape:', X_test.shape)\n+\n+print('Build model...')\n+\n+model = Sequential()\n+model.add(Embedding(max_features, embedding_size, input_length=maxlen))\n+model.add(Dropout(0.25))\n+\n+model.add(Convolution1D(nb_filter=nb_filter,\n+                        filter_length=filter_length,\n+                        border_mode=\"valid\",\n+                        activation=\"relu\",\n+                        subsample_length=1))\n+\n+model.add(MaxPooling1D(pool_length=pool_length))\n+\n+model.add(LSTM(lstm_output_size)) \n+model.add(Dense(1))\n+model.add(Activation('sigmoid'))\n+\n+model.compile(loss='binary_crossentropy', optimizer='adam', class_mode=\"binary\")\n+\n+print(\"Train...\")\n+model.fit(X_train, y_train, batch_size=batch_size, nb_epoch=nb_epoch, validation_data=(X_test, y_test), show_accuracy=True)\n+score, acc = model.evaluate(X_test, y_test, batch_size=batch_size, show_accuracy=True)\n+print('Test score:', score)\n+print('Test accuracy:', acc)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "keras#d2051a5df1c53cf52781f27a581f543dde6ad73d", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 4 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 3/3 | Churn Δ: 4 | Churn Cumulative: 2368 | Contributors (this commit): 25 | Commits (past 90d): 32 | Contributors (cumulative): 25 | DMM Complexity: 0.0\n\nDIFF:\n@@ -275,6 +275,10 @@ class Merge(Layer):\n             input_shapes = set([l.output_shape for l in layers])\n             if len(input_shapes) > 1:\n                 raise Exception(\"Only layers of same output shape can be merged using \" + mode + \" mode\")\n+        elif mode == 'concat':\n+            input_shapes = set([l.output_shape.pop(concat_axis) for l in layers])\n+            if len(input_shapes) > 1:\n+                raise Exception(\"Only layers with same dimensions across all axes except concat axis can me merged using concat mode\")\n         self.mode = mode\n         self.concat_axis = concat_axis\n         self.layers = layers\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "keras#6cc827ca5521bf830e9be619fb0a03c2841138ea", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 2370 | Contributors (this commit): 25 | Commits (past 90d): 33 | Contributors (cumulative): 25 | DMM Complexity: None\n\nDIFF:\n@@ -276,7 +276,7 @@ class Merge(Layer):\n             if len(input_shapes) > 1:\n                 raise Exception(\"Only layers of same output shape can be merged using \" + mode + \" mode\")\n         elif mode == 'concat':\n-            input_shapes = set([l.output_shape.pop(concat_axis) for l in layers])\n+            input_shapes = set([list(l.output_shape).pop(concat_axis) for l in layers])\n             if len(input_shapes) > 1:\n                 raise Exception(\"Only layers with same dimensions across all axes except concat axis can me merged using concat mode\")\n         self.mode = mode\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "keras#9a384888d7001219e1bf26c03609cdf3fdfee528", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 18 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 18 | Churn Cumulative: 18 | Contributors (this commit): 2 | Commits (past 90d): 1 | Contributors (cumulative): 2 | DMM Complexity: None\n\nDIFF:\n@@ -0,0 +1,18 @@\n+\r\n+\"\"\"\r\n+Keras: Theano-based Deep Learning library\r\n+==================================\r\n+Keras is a minimalist, highly modular neural network library in \r\n+the spirit of Torch, written in Python / Theano so as not to have \r\n+to deal with the dearth of ecosystem in Lua. It was developed with \r\n+a focus on enabling fast experimentation. Being able to go from \r\n+idea to result with the least possible delay is key to doing \r\n+good research.\r\n+\r\n+See http://keras.io/\r\n+\"\"\"\r\n+import sys\r\n+import re\r\n+import warnings\r\n+\r\n+__version__ = '0.2.0'\r\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "keras#8b24b3343fc5ca595df600c9e8394d8c2691fb0e", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 0 | Lines Deleted: 3 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 3 | Churn Cumulative: 21 | Contributors (this commit): 2 | Commits (past 90d): 2 | Contributors (cumulative): 2 | DMM Complexity: None\n\nDIFF:\n@@ -11,8 +11,5 @@ good research.\n \r\n See http://keras.io/\r\n \"\"\"\r\n-import sys\r\n-import re\r\n-import warnings\r\n \r\n __version__ = '0.2.0'\r\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "keras#0c0d91df2e776bfd8cf1d718bfe6ec74fbd8e7b1", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 5 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): 2/2 | Churn Δ: 5 | Churn Cumulative: 2931 | Contributors (this commit): 24 | Commits (past 90d): 21 | Contributors (cumulative): 24 | DMM Complexity: 0.0\n\nDIFF:\n@@ -52,11 +52,16 @@ def standardize_X(X):\n def slice_X(X, start=None, stop=None):\n     if type(X) == list:\n         if hasattr(start, '__len__'):\n+            # hdf5 dataset only support list object as indices\n+            if hasattr(start, 'shape'):\n+            \tstart = start.tolist()\n             return [x[start] for x in X]\n         else:\n             return [x[start:stop] for x in X]\n     else:\n         if hasattr(start, '__len__'):\n+            if hasattr(start, 'shape'):\n+            \tstart = start.tolist()\n             return X[start]\n         else:\n             return X[start:stop]\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "keras#e704e1578ea1764eda15eed54eedc1ac5332db70", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 3 | Churn Cumulative: 88 | Contributors (this commit): 1 | Commits (past 90d): 2 | Contributors (cumulative): 1 | DMM Complexity: None\n\nDIFF:\n@@ -14,8 +14,7 @@ from keras.layers.convolutional import Convolution1D, MaxPooling1D\n from keras.datasets import imdb\n \n '''\n-    Train a combination of Convoloution1D and LSTM on the IMDB sentiment classification task.\n-    Better results compared to CNN and LSTM examples\n+    Train a recurrent convolutional network on the IMDB sentiment classification task.\n     Reach 84.98% accuracy in 2 epoches\n     GPU command:\n         THEANO_FLAGS=mode=FAST_RUN,device=gpu,floatX=float32 python imdb_lstm.py\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "keras#0d233b2512d818af8ac5899564656a63fc75bce1", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 3 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 2 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 92 | Contributors (this commit): 1 | Commits (past 90d): 3 | Contributors (cumulative): 1 | DMM Complexity: None\n\nDIFF:\n@@ -15,9 +15,11 @@ from keras.datasets import imdb\n \n '''\n     Train a recurrent convolutional network on the IMDB sentiment classification task.\n-    Reach 84.98% accuracy in 2 epoches\n+\n     GPU command:\n         THEANO_FLAGS=mode=FAST_RUN,device=gpu,floatX=float32 python imdb_lstm.py\n+        \n+    Get to 0.8498 test accuracy after 2 epochs. 41s/epoch on K520 GPU.\n '''\n \n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "keras#74b590eff8f111e38704353ca97781ce0db40e57", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 9 | Lines Deleted: 11 | Files Changed: 1 | Hunks: 9 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 20 | Churn Cumulative: 112 | Contributors (this commit): 2 | Commits (past 90d): 4 | Contributors (cumulative): 2 | DMM Complexity: None\n\nDIFF:\n@@ -22,9 +22,6 @@ from keras.datasets import imdb\n     Get to 0.8498 test accuracy after 2 epochs. 41s/epoch on K520 GPU.\n '''\n \n-\n-#Parameters\n-\n # Embedding\n max_features = 20000\n maxlen = 100\n@@ -41,13 +38,13 @@ lstm_output_size = 70\n # Training\n batch_size = 30\n nb_epoch = 2\n+\n '''\n Note:\n batch_size is highly sensitive.\n-Only 2 epoches are done as the dataset is too small.\n+Only 2 epochs are needed as the dataset is very small.\n '''\n \n-\n print(\"Loading data...\")\n (X_train, y_train), (X_test, y_test) = imdb.load_data(nb_words=max_features, test_split=0.2)\n print(len(X_train), 'train sequences')\n@@ -64,23 +61,24 @@ print('Build model...')\n model = Sequential()\n model.add(Embedding(max_features, embedding_size, input_length=maxlen))\n model.add(Dropout(0.25))\n-\n model.add(Convolution1D(nb_filter=nb_filter,\n                         filter_length=filter_length,\n                         border_mode=\"valid\",\n                         activation=\"relu\",\n                         subsample_length=1))\n-\n model.add(MaxPooling1D(pool_length=pool_length))\n-\n model.add(LSTM(lstm_output_size))\n model.add(Dense(1))\n model.add(Activation('sigmoid'))\n \n-model.compile(loss='binary_crossentropy', optimizer='adam', class_mode=\"binary\")\n+model.compile(loss='binary_crossentropy',\n+              optimizer='adam',\n+              class_mode=\"binary\")\n \n print(\"Train...\")\n-model.fit(X_train, y_train, batch_size=batch_size, nb_epoch=nb_epoch, validation_data=(X_test, y_test), show_accuracy=True)\n-score, acc = model.evaluate(X_test, y_test, batch_size=batch_size, show_accuracy=True)\n+model.fit(X_train, y_train, batch_size=batch_size, nb_epoch=nb_epoch,\n+          validation_data=(X_test, y_test), show_accuracy=True)\n+score, acc = model.evaluate(X_test, y_test, batch_size=batch_size,\n+                            show_accuracy=True)\n print('Test score:', score)\n print('Test accuracy:', acc)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "keras#14486397c53db352cad71baa0e87a25a134fb985", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 8 | Lines Deleted: 4 | Files Changed: 2 | Hunks: 7 | Methods Changed: 3 | Complexity Δ (Sum/Max): 4/4 | Churn Δ: 12 | Churn Cumulative: 2572 | Contributors (this commit): 25 | Commits (past 90d): 39 | Contributors (cumulative): 31 | DMM Complexity: 0.0\n\nDIFF:\n@@ -92,10 +92,8 @@ class Layer(object):\n     @property\n     def output_shape(self):\n         # default assumption: tensor shape unchanged.\n-        try:\n         return self.input_shape\n-        except:\n-            return (None,)\n+\n     def get_output(self, train=False):\n         return self.get_input(train)\n \n@@ -284,16 +282,20 @@ class Merge(Layer):\n         '''\n         if len(layers) < 2:\n             raise Exception(\"Please specify two or more input layers (or containers) to merge\")\n+\n         if mode not in {'sum', 'mul', 'concat', 'ave', 'join'}:\n             raise Exception(\"Invalid merge mode: \" + str(mode))\n+\n         if mode in {'sum', 'mul', 'ave'}:\n             input_shapes = set([l.output_shape for l in layers])\n             if len(input_shapes) > 1:\n                 raise Exception(\"Only layers of same output shape can be merged using \" + mode + \" mode\")\n+\n         elif mode == 'concat':\n             input_shapes = set([list(l.output_shape).pop(concat_axis) for l in layers])\n             if len(input_shapes) > 1:\n-                raise Exception(\"Only layers with same dimensions across all axes except concat axis can me merged using concat mode\")\n+                raise Exception(\"'concat' mode can only merge layers with matching output shapes except for the concat axis\")\n+\n         self.mode = mode\n         self.concat_axis = concat_axis\n         self.layers = layers\n\n@@ -60,6 +60,8 @@ class TestConfigParams(unittest.TestCase):\n     def test_merge(self):\n         layer_1 = core.Layer()\n         layer_2 = core.Layer()\n+        layer_1.set_input_shape((None,))\n+        layer_2.set_input_shape((None,))\n         layer = core.Merge([layer_1, layer_2])\n         self._runner(layer)\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "keras#e60680b12c30ad053f37488a398292b9cb2774aa", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 95 | Contributors (this commit): 6 | Commits (past 90d): 3 | Contributors (cumulative): 6 | DMM Complexity: None\n\nDIFF:\n@@ -10,7 +10,7 @@ setup(name='Keras',\n       url='https://github.com/fchollet/keras',\n       download_url='https://github.com/fchollet/keras/tarball/0.2.0',\n       license='MIT',\n-      install_requires=['theano', 'pyyaml'],\n+      install_requires=['theano', 'pyyaml', 'six'],\n       extras_require={\n           'h5py': ['h5py'],\n       },\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "keras#ab6b11d86e13248628349d543fd91039c8fcd71a", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 29 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 3 | Complexity Δ (Sum/Max): 6/6 | Churn Δ: 29 | Churn Cumulative: 2409 | Contributors (this commit): 25 | Commits (past 90d): 32 | Contributors (cumulative): 25 | DMM Complexity: 1.0\n\nDIFF:\n@@ -899,3 +899,32 @@ class MaxoutDense(Layer):\n                   \"input_dim\": self.input_dim}\n         base_config = super(MaxoutDense, self).get_config()\n         return dict(list(base_config.items()) + list(config.items()))\n+\n+\n+class Lambda(MaskedLayer):\n+\tdef __init__(self, function, output_shape, ndim=2):\n+\t\tsuper(Lambda, self).__init__()\n+\t\tself.input = ndim_tensor(ndim)\n+\t\tself.function = marshal.dumps(function.func_code)\n+\t\tif type(output_shape) in [tuple,list]:\n+\t\t\tself._output_shape = tuple(output_shape)\n+\t\telse:\n+\t\tself._output_shape = marshal.dumps(output_shape.func_code)\n+\n+\t@property\n+\tdef output_shape(self):\n+\t\t\n+\t\tif type(self._output_shape) == tuple:\n+\t\t\treturn self._output_shape\n+\t\telse:\n+\t\t\toutput_shape_func = marshal.loads.dumps(self._output_shape)\n+\t\t\toutput_shape_func = types.FunctionType(output_shape_func, globals())\n+\t\t\treturn output_shape_func(self.previous)\n+\n+\tdef get_output(self, train=False):\n+\t\tfunc = marshal.loads(self.function)\n+\t\tfunc = types.FunctionType(func, globals())\n+\t\tif hasattr(self,'previous'):\n+\t\t\treturn func(self.previous.get_output(train))\n+\t\telse:\n+\t\t\treturn func(self.input)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "keras#e6cecb5d122150e3e5cbf0c60cbe7a46456d2f57", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 3 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 2 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 2413 | Contributors (this commit): 25 | Commits (past 90d): 33 | Contributors (cumulative): 25 | DMM Complexity: None\n\nDIFF:\n@@ -901,7 +901,7 @@ class MaxoutDense(Layer):\n         return dict(list(base_config.items()) + list(config.items()))\n \n \n-class Lambda(MaskedLayer):\n+class Lambda(Layer):\n \tdef __init__(self, function, output_shape, ndim=2):\n \t\tsuper(Lambda, self).__init__()\n \t\tself.input = ndim_tensor(ndim)\n@@ -928,3 +928,5 @@ class Lambda(MaskedLayer):\n \t\t\treturn func(self.previous.get_output(train))\n \t\telse:\n \t\t\treturn func(self.input)\n+class MaskedLambda(Lambda,MaskedLayer):\n+\tpass\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "keras#ad254f99ebf3ba32607fd0395edff48d19b98121", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 2415 | Contributors (this commit): 25 | Commits (past 90d): 34 | Contributors (cumulative): 25 | DMM Complexity: None\n\nDIFF:\n@@ -917,7 +917,7 @@ class Lambda(Layer):\n \t\tif type(self._output_shape) == tuple:\n \t\t\treturn self._output_shape\n \t\telse:\n-\t\t\toutput_shape_func = marshal.loads.dumps(self._output_shape)\n+\t\t\toutput_shape_func = marshal.loads(self._output_shape)\n \t\t\toutput_shape_func = types.FunctionType(output_shape_func, globals())\n \t\t\treturn output_shape_func(self.previous)\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "keras#5faef2fc567c8e09fc7aa482be50febd4aa4ddea", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 2417 | Contributors (this commit): 25 | Commits (past 90d): 35 | Contributors (cumulative): 25 | DMM Complexity: None\n\nDIFF:\n@@ -928,5 +928,5 @@ class Lambda(Layer):\n \t\t\treturn func(self.previous.get_output(train))\n \t\telse:\n \t\t\treturn func(self.input)\n-class MaskedLambda(Lambda,MaskedLayer):\n+class MaskedLambda(MaskedLayer, Lambda):\n \tpass\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "keras#aa6cf91a18eda9ed378904d5edf31289f50c3687", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 2 | Methods Changed: 2 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 3 | Churn Cumulative: 2420 | Contributors (this commit): 25 | Commits (past 90d): 36 | Contributors (cumulative): 25 | DMM Complexity: None\n\nDIFF:\n@@ -906,14 +906,13 @@ class Lambda(Layer):\n \t\tsuper(Lambda, self).__init__()\n \t\tself.input = ndim_tensor(ndim)\n \t\tself.function = marshal.dumps(function.func_code)\n-\t\tif type(output_shape) in [tuple,list]:\n+\t\tif type(output_shape) in {tuple, list}:\n \t\t\tself._output_shape = tuple(output_shape)\n \t\telse:\n \t\t\tself._output_shape = marshal.dumps(output_shape.func_code)\n \n \t@property\n \tdef output_shape(self):\n-\t\t\n \t\tif type(self._output_shape) == tuple:\n \t\t\treturn self._output_shape\n \t\telse:\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "keras#c6cf4425d317324a85b1e72c254b108ce49e1f13", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 1 | Churn Cumulative: 2421 | Contributors (this commit): 25 | Commits (past 90d): 37 | Contributors (cumulative): 25 | DMM Complexity: None\n\nDIFF:\n@@ -16,6 +16,7 @@ from ..regularizers import ActivityRegularizer, Regularizer\n from theano.sandbox.rng_mrg import MRG_RandomStreams as RandomStreams\n from six.moves import zip\n \n+import marshal, types\n \n class Layer(object):\n     def __init__(self, **kwargs):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "keras#3f8bfd2b1c83b34449f66ef7c15470e3c4c3858e", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 66 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 3 | Complexity Δ (Sum/Max): 5/5 | Churn Δ: 66 | Churn Cumulative: 438 | Contributors (this commit): 4 | Commits (past 90d): 4 | Contributors (cumulative): 4 | DMM Complexity: 1.0\n\nDIFF:\n@@ -276,6 +276,72 @@ class TestSequential(unittest.TestCase):\n         print(nloss)\n         assert(loss == nloss)\n         \n+    def test_lambda(self):\n+        print('Test lambda: sum')\n+\n+        def func(X):\n+            s = X[0]\n+            for i in range(1,len(X)):\n+                s += X[i]\n+            return s\n+\n+        def output_shape(layers):\n+            return layers[0].output_shape\n+\n+        left = Sequential()\n+        left.add(Dense(nb_hidden, input_shape=(input_dim,)))\n+        left.add(Activation('relu'))\n+\n+        right = Sequential()\n+        right.add(Dense(nb_hidden, input_shape=(input_dim,)))\n+        right.add(Activation('relu'))\n+\n+        model = Sequential()\n+        model.add(Merge([left, right], mode='join'))\n+\n+        model.add(Lambda(function=func,output_shape=output_shape))\n+\n+        model.add(Dense(nb_class))\n+        model.add(Activation('softmax'))\n+\n+        model.compile(loss='categorical_crossentropy', optimizer='rmsprop')\n+\n+        model.fit([X_train, X_train], y_train, batch_size=batch_size, nb_epoch=nb_epoch, show_accuracy=True, verbose=0, validation_data=([X_test, X_test], y_test))\n+        model.fit([X_train, X_train], y_train, batch_size=batch_size, nb_epoch=nb_epoch, show_accuracy=False, verbose=0, validation_data=([X_test, X_test], y_test))\n+        model.fit([X_train, X_train], y_train, batch_size=batch_size, nb_epoch=nb_epoch, show_accuracy=True, verbose=0, validation_split=0.1)\n+        model.fit([X_train, X_train], y_train, batch_size=batch_size, nb_epoch=nb_epoch, show_accuracy=False, verbose=0, validation_split=0.1)\n+        model.fit([X_train, X_train], y_train, batch_size=batch_size, nb_epoch=nb_epoch, verbose=0)\n+        model.fit([X_train, X_train], y_train, batch_size=batch_size, nb_epoch=nb_epoch, verbose=0, shuffle=False)\n+\n+        loss = model.evaluate([X_train, X_train], y_train, verbose=0)\n+        print('loss:', loss)\n+        if loss > 0.7:\n+            raise Exception('Score too low, learning issue.')\n+        preds = model.predict([X_test, X_test], verbose=0)\n+        classes = model.predict_classes([X_test, X_test], verbose=0)\n+        probas = model.predict_proba([X_test, X_test], verbose=0)\n+        print(model.get_config(verbose=1))\n+\n+        print('test weight saving')\n+        model.save_weights('temp.h5', overwrite=True)\n+        left = Sequential()\n+        left.add(Dense(nb_hidden, input_shape=(input_dim,)))\n+        left.add(Activation('relu'))\n+        right = Sequential()\n+        right.add(Dense(nb_hidden, input_shape=(input_dim,)))\n+        right.add(Activation('relu'))\n+        model = Sequential()\n+        model.add(Merge([left, right], mode='join'))\n+        model.add(Lambda(function=func,output_shape=output_shape))\n+        model.add(Dense(nb_class))\n+        model.add(Activation('softmax'))\n+        model.load_weights('temp.h5')\n+        model.compile(loss='categorical_crossentropy', optimizer='rmsprop')\n+\n+        nloss = model.evaluate([X_train, X_train], y_train, verbose=0)\n+        print(nloss)\n+        assert(loss == nloss)\n+          \n     def test_count_params(self):\n         print('test count params')\n         input_dim = 20\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "keras#c33a551f9775c07f5f6b3e0470c5e4db7ab3d145", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 440 | Contributors (this commit): 4 | Commits (past 90d): 5 | Contributors (cumulative): 4 | DMM Complexity: None\n\nDIFF:\n@@ -5,7 +5,7 @@ import numpy as np\n np.random.seed(1337)\n \n from keras.models import Sequential, model_from_json, model_from_yaml\n-from keras.layers.core import Dense, Activation, Merge\n+from keras.layers.core import Dense, Activation, Merge, Lambda\n from keras.utils import np_utils\n from keras.utils.test_utils import get_test_data\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "keras#7def993fe2e980baa89879d3570623c3641098af", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 1 | Methods Changed: 3 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 444 | Contributors (this commit): 4 | Commits (past 90d): 6 | Contributors (cumulative): 4 | DMM Complexity: None\n\nDIFF:\n@@ -285,8 +285,8 @@ class TestSequential(unittest.TestCase):\n                 s += X[i]\n             return s\n \n-        def output_shape(layers):\n-            return layers[0].output_shape\n+        def output_shape(previous):\n+            return previous.previous.output_shape\n \n         left = Sequential()\n         left.add(Dense(nb_hidden, input_shape=(input_dim,)))\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "keras#688b898dc8b6423433e4eafe3003e76275bdbd85", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 2 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 446 | Contributors (this commit): 4 | Commits (past 90d): 7 | Contributors (cumulative): 4 | DMM Complexity: None\n\nDIFF:\n@@ -286,7 +286,7 @@ class TestSequential(unittest.TestCase):\n             return s\n \n         def output_shape(previous):\n-            return previous.previous.output_shape\n+            return previous.layers[0].output_shape\n \n         left = Sequential()\n         left.add(Dense(nb_hidden, input_shape=(input_dim,)))\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "keras#a0c5f5743c0571602f4ab5242c1871ee59e2a6a7", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 3 | Churn Cumulative: 2424 | Contributors (this commit): 25 | Commits (past 90d): 38 | Contributors (cumulative): 25 | DMM Complexity: None\n\nDIFF:\n@@ -346,7 +346,8 @@ class Merge(Layer):\n             for i in range(len(self.layers)):\n                 X = self.layers[i].get_output(train)\n                 if X.name is None:\n-                    raise ValueError(\"merge_mode='join' only works with named inputs\")\n+                    inputs['input' + str(i)] = self.layers[i].get_output(train)\t    \n+                    #raise ValueError(\"merge_mode='join' only works with named inputs\")\n                 else:\n                     inputs[X.name] = self.layers[i].get_output(train)\n             return inputs\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "keras#97b27bfd1e11e9a70f49cc2c30dd4a36acea8425", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 2 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 1 | Churn Cumulative: 447 | Contributors (this commit): 4 | Commits (past 90d): 8 | Contributors (cumulative): 4 | DMM Complexity: 1.0\n\nDIFF:\n@@ -280,6 +280,7 @@ class TestSequential(unittest.TestCase):\n         print('Test lambda: sum')\n \n         def func(X):\n+            X = [X[i] for i in list(X)]\n             s = X[0]\n             for i in range(1,len(X)):\n                 s += X[i]\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "keras#312120272f6ce403cd7fa3a88fed636786b202eb", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 7 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 3 | Methods Changed: 1 | Complexity Δ (Sum/Max): 2/2 | Churn Δ: 8 | Churn Cumulative: 2432 | Contributors (this commit): 25 | Commits (past 90d): 39 | Contributors (cumulative): 25 | DMM Complexity: 1.0\n\nDIFF:\n@@ -907,12 +907,18 @@ class Lambda(Layer):\n \tdef __init__(self, function, output_shape, ndim=2):\n \t\tsuper(Lambda, self).__init__()\n \t\tself.input = ndim_tensor(ndim)\n+\t\tpy3 = sys.version_info[0] == 3\n+\t\tif py3:\n+\t\t\tself.function = marshal.dumps(function.__code__)\n+\t\telse:\n \t\t\tself.function = marshal.dumps(function.func_code)\n \t\tif type(output_shape) in {tuple, list}:\n \t\t\tself._output_shape = tuple(output_shape)\n+\t\telse:\n+\t\t\tif py3:\n+\t\t\t\tself._output_shape = marshal.dumps(output_shape.__code__)\n \t\t\telse:\n \t\t\t\tself._output_shape = marshal.dumps(output_shape.func_code)\n-\n \t@property\n \tdef output_shape(self):\n \t\tif type(self._output_shape) == tuple:\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "keras#15b84d375f9803ac55e43bd9b593c5cf073ed0a5", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 2434 | Contributors (this commit): 25 | Commits (past 90d): 40 | Contributors (cumulative): 25 | DMM Complexity: None\n\nDIFF:\n@@ -17,7 +17,7 @@ from theano.sandbox.rng_mrg import MRG_RandomStreams as RandomStreams\n from six.moves import zip\n \n import marshal, types\n-\n+import sys\n class Layer(object):\n     def __init__(self, **kwargs):\n         for kwarg in kwargs:\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "keras#b3594ccd5e8afccdb7ff9f98bb8879f8743e8a51", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 7 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 7 | Churn Cumulative: 454 | Contributors (this commit): 4 | Commits (past 90d): 9 | Contributors (cumulative): 4 | DMM Complexity: 1.0\n\nDIFF:\n@@ -343,6 +343,13 @@ class TestSequential(unittest.TestCase):\n         print(nloss)\n         assert(loss == nloss)\n         \n+        print ('test serializing')\n+        model_str = cPickle.dumps(model)\n+        model = cPickle.loads(model_str)\n+        nloss = model.evaluate([X_train, X_train], y_train, verbose=0)\n+        print(nloss)\n+        assert(loss == nloss)\n+        \n     def test_count_params(self):\n         print('test count params')\n         input_dim = 20\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "keras#0fab8ac373b2af98c1fd884aaceb66519178bef8", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 456 | Contributors (this commit): 4 | Commits (past 90d): 10 | Contributors (cumulative): 4 | DMM Complexity: None\n\nDIFF:\n@@ -8,7 +8,7 @@ from keras.models import Sequential, model_from_json, model_from_yaml\n from keras.layers.core import Dense, Activation, Merge, Lambda\n from keras.utils import np_utils\n from keras.utils.test_utils import get_test_data\n-\n+import cPickle\n input_dim = 32\n nb_hidden = 16\n nb_class = 4\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "keras#779bf2a8d29a3519453947595d552a33db195d22", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 3 | Lines Deleted: 3 | Files Changed: 1 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 6 | Churn Cumulative: 462 | Contributors (this commit): 4 | Commits (past 90d): 11 | Contributors (cumulative): 4 | DMM Complexity: None\n\nDIFF:\n@@ -8,7 +8,7 @@ from keras.models import Sequential, model_from_json, model_from_yaml\n from keras.layers.core import Dense, Activation, Merge, Lambda\n from keras.utils import np_utils\n from keras.utils.test_utils import get_test_data\n-import cPickle\n+import pickle\n input_dim = 32\n nb_hidden = 16\n nb_class = 4\n@@ -344,8 +344,8 @@ class TestSequential(unittest.TestCase):\n         assert(loss == nloss)\n         \n         print ('test serializing')\n-        model_str = cPickle.dumps(model)\n-        model = cPickle.loads(model_str)\n+        model_str = pickle.dumps(model)\n+        model = pickle.loads(model_str)\n         nloss = model.evaluate([X_train, X_train], y_train, verbose=0)\n         print(nloss)\n         assert(loss == nloss)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "keras#d5827c89174f88f26d4f12f786daf29adedc2059", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 1 | Churn Cumulative: 463 | Contributors (this commit): 4 | Commits (past 90d): 12 | Contributors (cumulative): 4 | DMM Complexity: None\n\nDIFF:\n@@ -9,6 +9,7 @@ from keras.layers.core import Dense, Activation, Merge, Lambda\n from keras.utils import np_utils\n from keras.utils.test_utils import get_test_data\n import pickle\n+\n input_dim = 32\n nb_hidden = 16\n nb_class = 4\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "keras#345d78e27d50e1a3d633e009bf48457c86d183c0", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 4 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 2 | Methods Changed: 2 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 6 | Churn Cumulative: 2440 | Contributors (this commit): 25 | Commits (past 90d): 41 | Contributors (cumulative): 25 | DMM Complexity: 1.0\n\nDIFF:\n@@ -904,7 +904,7 @@ class MaxoutDense(Layer):\n \n \n class Lambda(Layer):\n-\tdef __init__(self, function, output_shape, ndim=2):\n+\tdef __init__(self, function, output_shape=None, ndim=2):\n \t\tsuper(Lambda, self).__init__()\n \t\tself.input = ndim_tensor(ndim)\n \t\tpy3 = sys.version_info[0] == 3\n@@ -912,7 +912,9 @@ class Lambda(Layer):\n \t\t\tself.function = marshal.dumps(function.__code__)\n \t\telse:\n \t\t\tself.function = marshal.dumps(function.func_code)\n-\t\tif type(output_shape) in {tuple, list}:\n+\t\tif output_shape is None:\n+\t\t\toutput_shape = self.previous.output_shape\n+\t\telif type(output_shape) in {tuple, list}:\n \t\t\tself._output_shape = tuple(output_shape)\n \t\telse:\n \t\t\tif py3:\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "keras#d876dae965369c1c55a6ffa28dddef44d88d7e17", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 465 | Contributors (this commit): 4 | Commits (past 90d): 13 | Contributors (cumulative): 4 | DMM Complexity: 1.0\n\nDIFF:\n@@ -293,10 +293,12 @@ class TestSequential(unittest.TestCase):\n         left = Sequential()\n         left.add(Dense(nb_hidden, input_shape=(input_dim,)))\n         left.add(Activation('relu'))\n+        left.set_name('left')\n         \n         right = Sequential()\n         right.add(Dense(nb_hidden, input_shape=(input_dim,)))\n         right.add(Activation('relu'))\n+        right.set_name('right')\n         \n         model = Sequential()\n         model.add(Merge([left, right], mode='join'))\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "keras#ac3d135b8402298781aacfee73348f129170a634", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 3 | Churn Cumulative: 2443 | Contributors (this commit): 25 | Commits (past 90d): 42 | Contributors (cumulative): 25 | DMM Complexity: None\n\nDIFF:\n@@ -346,8 +346,7 @@ class Merge(Layer):\n             for i in range(len(self.layers)):\n                 X = self.layers[i].get_output(train)\n                 if X.name is None:\n-                    inputs['input' + str(i)] = self.layers[i].get_output(train)\t    \n-                    #raise ValueError(\"merge_mode='join' only works with named inputs\")\n+                    raise ValueError(\"merge_mode='join' only works with named inputs\")\n                 else:\n                     inputs[X.name] = self.layers[i].get_output(train)\n             return inputs\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "keras#fb8e80daf456f00ac8b7404f49c551115cfca138", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 2445 | Contributors (this commit): 25 | Commits (past 90d): 43 | Contributors (cumulative): 25 | DMM Complexity: None\n\nDIFF:\n@@ -912,7 +912,7 @@ class Lambda(Layer):\n \t\telse:\n \t\t\tself.function = marshal.dumps(function.func_code)\n \t\tif output_shape is None:\n-\t\t\toutput_shape = self.previous.output_shape\n+\t\t\toutput_shape = input_shape\n \t\telif type(output_shape) in {tuple, list}:\n \t\t\tself._output_shape = tuple(output_shape)\n \t\telse:\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "keras#fcd54ac85b49a6dfd1ef88cefe86a928c8c45e5b", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 4 | Lines Deleted: 4 | Files Changed: 1 | Hunks: 4 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 8 | Churn Cumulative: 235 | Contributors (this commit): 7 | Commits (past 90d): 9 | Contributors (cumulative): 7 | DMM Complexity: 0.0\n\nDIFF:\n@@ -73,14 +73,14 @@ def container_from_config(original_layer_dict, custom_layers={}):\n         layer_dict.pop('name')\n \n         for k, v in layer_dict.items():\n-            # For now, this can only happen for regularizers and constraints\n             if isinstance(v, dict):\n-                vname = v.get('name')\n-                v.pop('name')\n+                vname = v.pop('name')\n                 if vname in [x for x, y in inspect.getmembers(constraints, predicate=inspect.isclass)]:\n                     layer_dict[k] = constraints.get(vname, v)\n-                if vname in [x for x, y in inspect.getmembers(regularizers, predicate=inspect.isclass)]:\n+                elif vname in [x for x, y in inspect.getmembers(regularizers, predicate=inspect.isclass)]:\n                     layer_dict[k] = regularizers.get(vname, v)\n+                else: # not a regularizer of constraint, don't touch it\n+                    v['name'] = vname\n \n         base_layer = get_layer(name, layer_dict, custom_layers=custom_layers)\n         return base_layer\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "keras#3663f64bb4304c3ee64cecdcb2c47d0b6d39a259", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 19 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 3 | Methods Changed: 3 | Complexity Δ (Sum/Max): 4/4 | Churn Δ: 21 | Churn Cumulative: 847 | Contributors (this commit): 10 | Commits (past 90d): 15 | Contributors (cumulative): 10 | DMM Complexity: 1.0\n\nDIFF:\n@@ -173,13 +173,30 @@ class History(Callback):\n \n \n class ModelCheckpoint(Callback):\n-    def __init__(self, filepath, monitor='val_loss', verbose=0, save_best_only=False):\n+    def __init__(self, filepath, monitor='val_loss', verbose=0, save_best_only=False, mode='auto'):\n \n         super(Callback, self).__init__()\n         self.monitor = monitor\n         self.verbose = verbose\n         self.filepath = filepath\n         self.save_best_only = save_best_only\n+        \n+        if mode not in ['auto', 'min', 'max']:\n+            warnings.warn(\"ModelCheckpoint mode %s is unknown, fallback to auto mode\" % (self.mode), RuntimeWarning)\n+            mode = 'auto'\n+            \n+        if mode == \"min\":\n+            self.monitor_op = np.less\n+            self.best = np.Inf\n+        elif mode == \"max\":\n+            self.monitor_op = np.greater\n+            self.best = -np.Inf\n+        else:\n+            if \"acc\" in self.monitor:\n+                self.monitor_op = np.greater\n+                self.best = -np.Inf\n+            else:\n+                self.monitor_op = np.less\n                 self.best = np.Inf\n \n     def on_epoch_end(self, epoch, logs={}):\n@@ -189,7 +206,7 @@ class ModelCheckpoint(Callback):\n             if current is None:\n                 warnings.warn(\"Can save best model only with %s available, skipping.\" % (self.monitor), RuntimeWarning)\n             else:\n-                if current < self.best:\n+                if self.monitor_op(current, self.best):\n                     if self.verbose > 0:\n                         print(\"Epoch %05d: %s improved from %0.5f to %0.5f, saving model to %s\"\n                               % (epoch, self.monitor, self.best, current, filepath))\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
