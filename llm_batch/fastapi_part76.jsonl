{"custom_id": "fastapi#8e6cf9ee9c9d87b6b658cc240146121c80f71476", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 927 | Files Changed: 10 | Hunks: 14 | Methods Changed: 33 | Complexity Δ (Sum/Max): -34/0 | Churn Δ: 929 | Churn Cumulative: 4818 | Contributors (this commit): 32 | Commits (past 90d): 27 | Contributors (cumulative): 41 | DMM Complexity: 0.00804289544235925\n\nDIFF:\n@@ -1,14 +0,0 @@\n-from fastapi import FastAPI, Form\n-from pydantic import BaseModel\n-\n-app = FastAPI()\n-\n-\n-class FormData(BaseModel):\n-    username: str\n-    password: str\n-\n-\n-@app.post(\"/login/\")\n-async def login(data: FormData = Form()):\n-    return data\n\n@@ -1,15 +0,0 @@\n-from fastapi import FastAPI, Form\n-from pydantic import BaseModel\n-from typing_extensions import Annotated\n-\n-app = FastAPI()\n-\n-\n-class FormData(BaseModel):\n-    username: str\n-    password: str\n-\n-\n-@app.post(\"/login/\")\n-async def login(data: Annotated[FormData, Form()]):\n-    return data\n\n@@ -1,16 +0,0 @@\n-from typing import Annotated\n-\n-from fastapi import FastAPI, Form\n-from pydantic import BaseModel\n-\n-app = FastAPI()\n-\n-\n-class FormData(BaseModel):\n-    username: str\n-    password: str\n-\n-\n-@app.post(\"/login/\")\n-async def login(data: Annotated[FormData, Form()]):\n-    return data\n\n@@ -33,7 +33,6 @@ from fastapi._compat import (\n     field_annotation_is_scalar,\n     get_annotation_from_field_info,\n     get_missing_field_error,\n-    get_model_fields,\n     is_bytes_field,\n     is_bytes_sequence_field,\n     is_scalar_field,\n@@ -57,7 +56,6 @@ from fastapi.security.base import SecurityBase\n from fastapi.security.oauth2 import OAuth2, SecurityScopes\n from fastapi.security.open_id_connect_url import OpenIdConnect\n from fastapi.utils import create_model_field, get_path_param_names\n-from pydantic import BaseModel\n from pydantic.fields import FieldInfo\n from starlette.background import BackgroundTasks as StarletteBackgroundTasks\n from starlette.concurrency import run_in_threadpool\n@@ -745,9 +743,7 @@ def _should_embed_body_fields(fields: List[ModelField]) -> bool:\n         return True\n     # If it's a Form (or File) field, it has to be a BaseModel to be top level\n     # otherwise it has to be embedded, so that the key value pair can be extracted\n-    if isinstance(first_field.field_info, params.Form) and not lenient_issubclass(\n-        first_field.type_, BaseModel\n-    ):\n+    if isinstance(first_field.field_info, params.Form):\n         return True\n     return False\n \n@@ -787,7 +783,6 @@ async def _extract_form_body(\n                 for sub_value in value:\n                     tg.start_soon(process_fn, sub_value.read)\n             value = serialize_sequence_value(field=field, value=results)\n-        if value is not None:\n         values[field.name] = value\n     return values\n \n@@ -803,14 +798,8 @@ async def request_body_to_args(\n     single_not_embedded_field = len(body_fields) == 1 and not embed_body_fields\n     first_field = body_fields[0]\n     body_to_process = received_body\n-\n-    fields_to_extract: List[ModelField] = body_fields\n-\n-    if single_not_embedded_field and lenient_issubclass(first_field.type_, BaseModel):\n-        fields_to_extract = get_model_fields(first_field.type_)\n-\n     if isinstance(received_body, FormData):\n-        body_to_process = await _extract_form_body(fields_to_extract, received_body)\n+        body_to_process = await _extract_form_body(body_fields, received_body)\n \n     if single_not_embedded_field:\n         loc: Tuple[str, ...] = (\"body\",)\n\n@@ -1,36 +0,0 @@\n-import subprocess\n-import time\n-\n-import httpx\n-from playwright.sync_api import Playwright, sync_playwright\n-\n-\n-# Run playwright codegen to generate the code below, copy paste the sections in run()\n-def run(playwright: Playwright) -> None:\n-    browser = playwright.chromium.launch(headless=False)\n-    context = browser.new_context()\n-    page = context.new_page()\n-    page.goto(\"http://localhost:8000/docs\")\n-    page.get_by_role(\"button\", name=\"POST /login/ Login\").click()\n-    page.get_by_role(\"button\", name=\"Try it out\").click()\n-    page.screenshot(path=\"docs/en/docs/img/tutorial/request-form-models/image01.png\")\n-\n-    # ---------------------\n-    context.close()\n-    browser.close()\n-\n-\n-process = subprocess.Popen(\n-    [\"fastapi\", \"run\", \"docs_src/request_form_models/tutorial001.py\"]\n-)\n-try:\n-    for _ in range(3):\n-        try:\n-            response = httpx.get(\"http://localhost:8000/docs\")\n-        except httpx.ConnectError:\n-            time.sleep(1)\n-            break\n-    with sync_playwright() as playwright:\n-        run(playwright)\n-finally:\n-    process.terminate()\n\n@@ -1,129 +0,0 @@\n-from typing import List, Optional\n-\n-from dirty_equals import IsDict\n-from fastapi import FastAPI, Form\n-from fastapi.testclient import TestClient\n-from pydantic import BaseModel\n-from typing_extensions import Annotated\n-\n-app = FastAPI()\n-\n-\n-class FormModel(BaseModel):\n-    username: str\n-    lastname: str\n-    age: Optional[int] = None\n-    tags: List[str] = [\"foo\", \"bar\"]\n-\n-\n-@app.post(\"/form/\")\n-def post_form(user: Annotated[FormModel, Form()]):\n-    return user\n-\n-\n-client = TestClient(app)\n-\n-\n-def test_send_all_data():\n-    response = client.post(\n-        \"/form/\",\n-        data={\n-            \"username\": \"Rick\",\n-            \"lastname\": \"Sanchez\",\n-            \"age\": \"70\",\n-            \"tags\": [\"plumbus\", \"citadel\"],\n-        },\n-    )\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\n-        \"username\": \"Rick\",\n-        \"lastname\": \"Sanchez\",\n-        \"age\": 70,\n-        \"tags\": [\"plumbus\", \"citadel\"],\n-    }\n-\n-\n-def test_defaults():\n-    response = client.post(\"/form/\", data={\"username\": \"Rick\", \"lastname\": \"Sanchez\"})\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\n-        \"username\": \"Rick\",\n-        \"lastname\": \"Sanchez\",\n-        \"age\": None,\n-        \"tags\": [\"foo\", \"bar\"],\n-    }\n-\n-\n-def test_invalid_data():\n-    response = client.post(\n-        \"/form/\",\n-        data={\n-            \"username\": \"Rick\",\n-            \"lastname\": \"Sanchez\",\n-            \"age\": \"seventy\",\n-            \"tags\": [\"plumbus\", \"citadel\"],\n-        },\n-    )\n-    assert response.status_code == 422, response.text\n-    assert response.json() == IsDict(\n-        {\n-            \"detail\": [\n-                {\n-                    \"type\": \"int_parsing\",\n-                    \"loc\": [\"body\", \"age\"],\n-                    \"msg\": \"Input should be a valid integer, unable to parse string as an integer\",\n-                    \"input\": \"seventy\",\n-                }\n-            ]\n-        }\n-    ) | IsDict(\n-        # TODO: remove when deprecating Pydantic v1\n-        {\n-            \"detail\": [\n-                {\n-                    \"loc\": [\"body\", \"age\"],\n-                    \"msg\": \"value is not a valid integer\",\n-                    \"type\": \"type_error.integer\",\n-                }\n-            ]\n-        }\n-    )\n-\n-\n-def test_no_data():\n-    response = client.post(\"/form/\")\n-    assert response.status_code == 422, response.text\n-    assert response.json() == IsDict(\n-        {\n-            \"detail\": [\n-                {\n-                    \"type\": \"missing\",\n-                    \"loc\": [\"body\", \"username\"],\n-                    \"msg\": \"Field required\",\n-                    \"input\": {\"tags\": [\"foo\", \"bar\"]},\n-                },\n-                {\n-                    \"type\": \"missing\",\n-                    \"loc\": [\"body\", \"lastname\"],\n-                    \"msg\": \"Field required\",\n-                    \"input\": {\"tags\": [\"foo\", \"bar\"]},\n-                },\n-            ]\n-        }\n-    ) | IsDict(\n-        # TODO: remove when deprecating Pydantic v1\n-        {\n-            \"detail\": [\n-                {\n-                    \"loc\": [\"body\", \"username\"],\n-                    \"msg\": \"field required\",\n-                    \"type\": \"value_error.missing\",\n-                },\n-                {\n-                    \"loc\": [\"body\", \"lastname\"],\n-                    \"msg\": \"field required\",\n-                    \"type\": \"value_error.missing\",\n-                },\n-            ]\n-        }\n-    )\n\n\n@@ -1,232 +0,0 @@\n-import pytest\n-from dirty_equals import IsDict\n-from fastapi.testclient import TestClient\n-\n-\n-@pytest.fixture(name=\"client\")\n-def get_client():\n-    from docs_src.request_form_models.tutorial001 import app\n-\n-    client = TestClient(app)\n-    return client\n-\n-\n-def test_post_body_form(client: TestClient):\n-    response = client.post(\"/login/\", data={\"username\": \"Foo\", \"password\": \"secret\"})\n-    assert response.status_code == 200\n-    assert response.json() == {\"username\": \"Foo\", \"password\": \"secret\"}\n-\n-\n-def test_post_body_form_no_password(client: TestClient):\n-    response = client.post(\"/login/\", data={\"username\": \"Foo\"})\n-    assert response.status_code == 422\n-    assert response.json() == IsDict(\n-        {\n-            \"detail\": [\n-                {\n-                    \"type\": \"missing\",\n-                    \"loc\": [\"body\", \"password\"],\n-                    \"msg\": \"Field required\",\n-                    \"input\": {\"username\": \"Foo\"},\n-                }\n-            ]\n-        }\n-    ) | IsDict(\n-        # TODO: remove when deprecating Pydantic v1\n-        {\n-            \"detail\": [\n-                {\n-                    \"loc\": [\"body\", \"password\"],\n-                    \"msg\": \"field required\",\n-                    \"type\": \"value_error.missing\",\n-                }\n-            ]\n-        }\n-    )\n-\n-\n-def test_post_body_form_no_username(client: TestClient):\n-    response = client.post(\"/login/\", data={\"password\": \"secret\"})\n-    assert response.status_code == 422\n-    assert response.json() == IsDict(\n-        {\n-            \"detail\": [\n-                {\n-                    \"type\": \"missing\",\n-                    \"loc\": [\"body\", \"username\"],\n-                    \"msg\": \"Field required\",\n-                    \"input\": {\"password\": \"secret\"},\n-                }\n-            ]\n-        }\n-    ) | IsDict(\n-        # TODO: remove when deprecating Pydantic v1\n-        {\n-            \"detail\": [\n-                {\n-                    \"loc\": [\"body\", \"username\"],\n-                    \"msg\": \"field required\",\n-                    \"type\": \"value_error.missing\",\n-                }\n-            ]\n-        }\n-    )\n-\n-\n-def test_post_body_form_no_data(client: TestClient):\n-    response = client.post(\"/login/\")\n-    assert response.status_code == 422\n-    assert response.json() == IsDict(\n-        {\n-            \"detail\": [\n-                {\n-                    \"type\": \"missing\",\n-                    \"loc\": [\"body\", \"username\"],\n-                    \"msg\": \"Field required\",\n-                    \"input\": {},\n-                },\n-                {\n-                    \"type\": \"missing\",\n-                    \"loc\": [\"body\", \"password\"],\n-                    \"msg\": \"Field required\",\n-                    \"input\": {},\n-                },\n-            ]\n-        }\n-    ) | IsDict(\n-        # TODO: remove when deprecating Pydantic v1\n-        {\n-            \"detail\": [\n-                {\n-                    \"loc\": [\"body\", \"username\"],\n-                    \"msg\": \"field required\",\n-                    \"type\": \"value_error.missing\",\n-                },\n-                {\n-                    \"loc\": [\"body\", \"password\"],\n-                    \"msg\": \"field required\",\n-                    \"type\": \"value_error.missing\",\n-                },\n-            ]\n-        }\n-    )\n-\n-\n-def test_post_body_json(client: TestClient):\n-    response = client.post(\"/login/\", json={\"username\": \"Foo\", \"password\": \"secret\"})\n-    assert response.status_code == 422, response.text\n-    assert response.json() == IsDict(\n-        {\n-            \"detail\": [\n-                {\n-                    \"type\": \"missing\",\n-                    \"loc\": [\"body\", \"username\"],\n-                    \"msg\": \"Field required\",\n-                    \"input\": {},\n-                },\n-                {\n-                    \"type\": \"missing\",\n-                    \"loc\": [\"body\", \"password\"],\n-                    \"msg\": \"Field required\",\n-                    \"input\": {},\n-                },\n-            ]\n-        }\n-    ) | IsDict(\n-        # TODO: remove when deprecating Pydantic v1\n-        {\n-            \"detail\": [\n-                {\n-                    \"loc\": [\"body\", \"username\"],\n-                    \"msg\": \"field required\",\n-                    \"type\": \"value_error.missing\",\n-                },\n-                {\n-                    \"loc\": [\"body\", \"password\"],\n-                    \"msg\": \"field required\",\n-                    \"type\": \"value_error.missing\",\n-                },\n-            ]\n-        }\n-    )\n-\n-\n-def test_openapi_schema(client: TestClient):\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\n-        \"openapi\": \"3.1.0\",\n-        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n-        \"paths\": {\n-            \"/login/\": {\n-                \"post\": {\n-                    \"responses\": {\n-                        \"200\": {\n-                            \"description\": \"Successful Response\",\n-                            \"content\": {\"application/json\": {\"schema\": {}}},\n-                        },\n-                        \"422\": {\n-                            \"description\": \"Validation Error\",\n-                            \"content\": {\n-                                \"application/json\": {\n-                                    \"schema\": {\n-                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n-                                    }\n-                                }\n-                            },\n-                        },\n-                    },\n-                    \"summary\": \"Login\",\n-                    \"operationId\": \"login_login__post\",\n-                    \"requestBody\": {\n-                        \"content\": {\n-                            \"application/x-www-form-urlencoded\": {\n-                                \"schema\": {\"$ref\": \"#/components/schemas/FormData\"}\n-                            }\n-                        },\n-                        \"required\": True,\n-                    },\n-                }\n-            }\n-        },\n-        \"components\": {\n-            \"schemas\": {\n-                \"FormData\": {\n-                    \"properties\": {\n-                        \"username\": {\"type\": \"string\", \"title\": \"Username\"},\n-                        \"password\": {\"type\": \"string\", \"title\": \"Password\"},\n-                    },\n-                    \"type\": \"object\",\n-                    \"required\": [\"username\", \"password\"],\n-                    \"title\": \"FormData\",\n-                },\n-                \"ValidationError\": {\n-                    \"title\": \"ValidationError\",\n-                    \"required\": [\"loc\", \"msg\", \"type\"],\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"loc\": {\n-                            \"title\": \"Location\",\n-                            \"type\": \"array\",\n-                            \"items\": {\n-                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n-                            },\n-                        },\n-                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n-                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n-                    },\n-                },\n-                \"HTTPValidationError\": {\n-                    \"title\": \"HTTPValidationError\",\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"detail\": {\n-                            \"title\": \"Detail\",\n-                            \"type\": \"array\",\n-                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n-                        }\n-                    },\n-                },\n-            }\n-        },\n-    }\n\n@@ -1,232 +0,0 @@\n-import pytest\n-from dirty_equals import IsDict\n-from fastapi.testclient import TestClient\n-\n-\n-@pytest.fixture(name=\"client\")\n-def get_client():\n-    from docs_src.request_form_models.tutorial001_an import app\n-\n-    client = TestClient(app)\n-    return client\n-\n-\n-def test_post_body_form(client: TestClient):\n-    response = client.post(\"/login/\", data={\"username\": \"Foo\", \"password\": \"secret\"})\n-    assert response.status_code == 200\n-    assert response.json() == {\"username\": \"Foo\", \"password\": \"secret\"}\n-\n-\n-def test_post_body_form_no_password(client: TestClient):\n-    response = client.post(\"/login/\", data={\"username\": \"Foo\"})\n-    assert response.status_code == 422\n-    assert response.json() == IsDict(\n-        {\n-            \"detail\": [\n-                {\n-                    \"type\": \"missing\",\n-                    \"loc\": [\"body\", \"password\"],\n-                    \"msg\": \"Field required\",\n-                    \"input\": {\"username\": \"Foo\"},\n-                }\n-            ]\n-        }\n-    ) | IsDict(\n-        # TODO: remove when deprecating Pydantic v1\n-        {\n-            \"detail\": [\n-                {\n-                    \"loc\": [\"body\", \"password\"],\n-                    \"msg\": \"field required\",\n-                    \"type\": \"value_error.missing\",\n-                }\n-            ]\n-        }\n-    )\n-\n-\n-def test_post_body_form_no_username(client: TestClient):\n-    response = client.post(\"/login/\", data={\"password\": \"secret\"})\n-    assert response.status_code == 422\n-    assert response.json() == IsDict(\n-        {\n-            \"detail\": [\n-                {\n-                    \"type\": \"missing\",\n-                    \"loc\": [\"body\", \"username\"],\n-                    \"msg\": \"Field required\",\n-                    \"input\": {\"password\": \"secret\"},\n-                }\n-            ]\n-        }\n-    ) | IsDict(\n-        # TODO: remove when deprecating Pydantic v1\n-        {\n-            \"detail\": [\n-                {\n-                    \"loc\": [\"body\", \"username\"],\n-                    \"msg\": \"field required\",\n-                    \"type\": \"value_error.missing\",\n-                }\n-            ]\n-        }\n-    )\n-\n-\n-def test_post_body_form_no_data(client: TestClient):\n-    response = client.post(\"/login/\")\n-    assert response.status_code == 422\n-    assert response.json() == IsDict(\n-        {\n-            \"detail\": [\n-                {\n-                    \"type\": \"missing\",\n-                    \"loc\": [\"body\", \"username\"],\n-                    \"msg\": \"Field required\",\n-                    \"input\": {},\n-                },\n-                {\n-                    \"type\": \"missing\",\n-                    \"loc\": [\"body\", \"password\"],\n-                    \"msg\": \"Field required\",\n-                    \"input\": {},\n-                },\n-            ]\n-        }\n-    ) | IsDict(\n-        # TODO: remove when deprecating Pydantic v1\n-        {\n-            \"detail\": [\n-                {\n-                    \"loc\": [\"body\", \"username\"],\n-                    \"msg\": \"field required\",\n-                    \"type\": \"value_error.missing\",\n-                },\n-                {\n-                    \"loc\": [\"body\", \"password\"],\n-                    \"msg\": \"field required\",\n-                    \"type\": \"value_error.missing\",\n-                },\n-            ]\n-        }\n-    )\n-\n-\n-def test_post_body_json(client: TestClient):\n-    response = client.post(\"/login/\", json={\"username\": \"Foo\", \"password\": \"secret\"})\n-    assert response.status_code == 422, response.text\n-    assert response.json() == IsDict(\n-        {\n-            \"detail\": [\n-                {\n-                    \"type\": \"missing\",\n-                    \"loc\": [\"body\", \"username\"],\n-                    \"msg\": \"Field required\",\n-                    \"input\": {},\n-                },\n-                {\n-                    \"type\": \"missing\",\n-                    \"loc\": [\"body\", \"password\"],\n-                    \"msg\": \"Field required\",\n-                    \"input\": {},\n-                },\n-            ]\n-        }\n-    ) | IsDict(\n-        # TODO: remove when deprecating Pydantic v1\n-        {\n-            \"detail\": [\n-                {\n-                    \"loc\": [\"body\", \"username\"],\n-                    \"msg\": \"field required\",\n-                    \"type\": \"value_error.missing\",\n-                },\n-                {\n-                    \"loc\": [\"body\", \"password\"],\n-                    \"msg\": \"field required\",\n-                    \"type\": \"value_error.missing\",\n-                },\n-            ]\n-        }\n-    )\n-\n-\n-def test_openapi_schema(client: TestClient):\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\n-        \"openapi\": \"3.1.0\",\n-        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n-        \"paths\": {\n-            \"/login/\": {\n-                \"post\": {\n-                    \"responses\": {\n-                        \"200\": {\n-                            \"description\": \"Successful Response\",\n-                            \"content\": {\"application/json\": {\"schema\": {}}},\n-                        },\n-                        \"422\": {\n-                            \"description\": \"Validation Error\",\n-                            \"content\": {\n-                                \"application/json\": {\n-                                    \"schema\": {\n-                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n-                                    }\n-                                }\n-                            },\n-                        },\n-                    },\n-                    \"summary\": \"Login\",\n-                    \"operationId\": \"login_login__post\",\n-                    \"requestBody\": {\n-                        \"content\": {\n-                            \"application/x-www-form-urlencoded\": {\n-                                \"schema\": {\"$ref\": \"#/components/schemas/FormData\"}\n-                            }\n-                        },\n-                        \"required\": True,\n-                    },\n-                }\n-            }\n-        },\n-        \"components\": {\n-            \"schemas\": {\n-                \"FormData\": {\n-                    \"properties\": {\n-                        \"username\": {\"type\": \"string\", \"title\": \"Username\"},\n-                        \"password\": {\"type\": \"string\", \"title\": \"Password\"},\n-                    },\n-                    \"type\": \"object\",\n-                    \"required\": [\"username\", \"password\"],\n-                    \"title\": \"FormData\",\n-                },\n-                \"ValidationError\": {\n-                    \"title\": \"ValidationError\",\n-                    \"required\": [\"loc\", \"msg\", \"type\"],\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"loc\": {\n-                            \"title\": \"Location\",\n-                            \"type\": \"array\",\n-                            \"items\": {\n-                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n-                            },\n-                        },\n-                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n-                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n-                    },\n-                },\n-                \"HTTPValidationError\": {\n-                    \"title\": \"HTTPValidationError\",\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"detail\": {\n-                            \"title\": \"Detail\",\n-                            \"type\": \"array\",\n-                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n-                        }\n-                    },\n-                },\n-            }\n-        },\n-    }\n\n@@ -1,240 +0,0 @@\n-import pytest\n-from dirty_equals import IsDict\n-from fastapi.testclient import TestClient\n-\n-from tests.utils import needs_py39\n-\n-\n-@pytest.fixture(name=\"client\")\n-def get_client():\n-    from docs_src.request_form_models.tutorial001_an_py39 import app\n-\n-    client = TestClient(app)\n-    return client\n-\n-\n-@needs_py39\n-def test_post_body_form(client: TestClient):\n-    response = client.post(\"/login/\", data={\"username\": \"Foo\", \"password\": \"secret\"})\n-    assert response.status_code == 200\n-    assert response.json() == {\"username\": \"Foo\", \"password\": \"secret\"}\n-\n-\n-@needs_py39\n-def test_post_body_form_no_password(client: TestClient):\n-    response = client.post(\"/login/\", data={\"username\": \"Foo\"})\n-    assert response.status_code == 422\n-    assert response.json() == IsDict(\n-        {\n-            \"detail\": [\n-                {\n-                    \"type\": \"missing\",\n-                    \"loc\": [\"body\", \"password\"],\n-                    \"msg\": \"Field required\",\n-                    \"input\": {\"username\": \"Foo\"},\n-                }\n-            ]\n-        }\n-    ) | IsDict(\n-        # TODO: remove when deprecating Pydantic v1\n-        {\n-            \"detail\": [\n-                {\n-                    \"loc\": [\"body\", \"password\"],\n-                    \"msg\": \"field required\",\n-                    \"type\": \"value_error.missing\",\n-                }\n-            ]\n-        }\n-    )\n-\n-\n-@needs_py39\n-def test_post_body_form_no_username(client: TestClient):\n-    response = client.post(\"/login/\", data={\"password\": \"secret\"})\n-    assert response.status_code == 422\n-    assert response.json() == IsDict(\n-        {\n-            \"detail\": [\n-                {\n-                    \"type\": \"missing\",\n-                    \"loc\": [\"body\", \"username\"],\n-                    \"msg\": \"Field required\",\n-                    \"input\": {\"password\": \"secret\"},\n-                }\n-            ]\n-        }\n-    ) | IsDict(\n-        # TODO: remove when deprecating Pydantic v1\n-        {\n-            \"detail\": [\n-                {\n-                    \"loc\": [\"body\", \"username\"],\n-                    \"msg\": \"field required\",\n-                    \"type\": \"value_error.missing\",\n-                }\n-            ]\n-        }\n-    )\n-\n-\n-@needs_py39\n-def test_post_body_form_no_data(client: TestClient):\n-    response = client.post(\"/login/\")\n-    assert response.status_code == 422\n-    assert response.json() == IsDict(\n-        {\n-            \"detail\": [\n-                {\n-                    \"type\": \"missing\",\n-                    \"loc\": [\"body\", \"username\"],\n-                    \"msg\": \"Field required\",\n-                    \"input\": {},\n-                },\n-                {\n-                    \"type\": \"missing\",\n-                    \"loc\": [\"body\", \"password\"],\n-                    \"msg\": \"Field required\",\n-                    \"input\": {},\n-                },\n-            ]\n-        }\n-    ) | IsDict(\n-        # TODO: remove when deprecating Pydantic v1\n-        {\n-            \"detail\": [\n-                {\n-                    \"loc\": [\"body\", \"username\"],\n-                    \"msg\": \"field required\",\n-                    \"type\": \"value_error.missing\",\n-                },\n-                {\n-                    \"loc\": [\"body\", \"password\"],\n-                    \"msg\": \"field required\",\n-                    \"type\": \"value_error.missing\",\n-                },\n-            ]\n-        }\n-    )\n-\n-\n-@needs_py39\n-def test_post_body_json(client: TestClient):\n-    response = client.post(\"/login/\", json={\"username\": \"Foo\", \"password\": \"secret\"})\n-    assert response.status_code == 422, response.text\n-    assert response.json() == IsDict(\n-        {\n-            \"detail\": [\n-                {\n-                    \"type\": \"missing\",\n-                    \"loc\": [\"body\", \"username\"],\n-                    \"msg\": \"Field required\",\n-                    \"input\": {},\n-                },\n-                {\n-                    \"type\": \"missing\",\n-                    \"loc\": [\"body\", \"password\"],\n-                    \"msg\": \"Field required\",\n-                    \"input\": {},\n-                },\n-            ]\n-        }\n-    ) | IsDict(\n-        # TODO: remove when deprecating Pydantic v1\n-        {\n-            \"detail\": [\n-                {\n-                    \"loc\": [\"body\", \"username\"],\n-                    \"msg\": \"field required\",\n-                    \"type\": \"value_error.missing\",\n-                },\n-                {\n-                    \"loc\": [\"body\", \"password\"],\n-                    \"msg\": \"field required\",\n-                    \"type\": \"value_error.missing\",\n-                },\n-            ]\n-        }\n-    )\n-\n-\n-@needs_py39\n-def test_openapi_schema(client: TestClient):\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\n-        \"openapi\": \"3.1.0\",\n-        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n-        \"paths\": {\n-            \"/login/\": {\n-                \"post\": {\n-                    \"responses\": {\n-                        \"200\": {\n-                            \"description\": \"Successful Response\",\n-                            \"content\": {\"application/json\": {\"schema\": {}}},\n-                        },\n-                        \"422\": {\n-                            \"description\": \"Validation Error\",\n-                            \"content\": {\n-                                \"application/json\": {\n-                                    \"schema\": {\n-                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n-                                    }\n-                                }\n-                            },\n-                        },\n-                    },\n-                    \"summary\": \"Login\",\n-                    \"operationId\": \"login_login__post\",\n-                    \"requestBody\": {\n-                        \"content\": {\n-                            \"application/x-www-form-urlencoded\": {\n-                                \"schema\": {\"$ref\": \"#/components/schemas/FormData\"}\n-                            }\n-                        },\n-                        \"required\": True,\n-                    },\n-                }\n-            }\n-        },\n-        \"components\": {\n-            \"schemas\": {\n-                \"FormData\": {\n-                    \"properties\": {\n-                        \"username\": {\"type\": \"string\", \"title\": \"Username\"},\n-                        \"password\": {\"type\": \"string\", \"title\": \"Password\"},\n-                    },\n-                    \"type\": \"object\",\n-                    \"required\": [\"username\", \"password\"],\n-                    \"title\": \"FormData\",\n-                },\n-                \"ValidationError\": {\n-                    \"title\": \"ValidationError\",\n-                    \"required\": [\"loc\", \"msg\", \"type\"],\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"loc\": {\n-                            \"title\": \"Location\",\n-                            \"type\": \"array\",\n-                            \"items\": {\n-                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n-                            },\n-                        },\n-                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n-                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n-                    },\n-                },\n-                \"HTTPValidationError\": {\n-                    \"title\": \"HTTPValidationError\",\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"detail\": {\n-                            \"title\": \"Detail\",\n-                            \"type\": \"array\",\n-                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n-                        }\n-                    },\n-                },\n-            }\n-        },\n-    }\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#999eeb6c76ff37f94612dd140ce8091932f56c54", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 489 | Contributors (this commit): 2 | Commits (past 90d): 6 | Contributors (cumulative): 2 | DMM Complexity: None\n\nDIFF:\n@@ -1,6 +1,6 @@\n \"\"\"FastAPI framework, high performance, easy to learn, fast to code, ready for production\"\"\"\n \n-__version__ = \"0.112.3\"\n+__version__ = \"0.112.4\"\n \n from starlette import status as status\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#d86f6603029def91e0798ca42f5fd12eff13c87b", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 491 | Contributors (this commit): 2 | Commits (past 90d): 7 | Contributors (cumulative): 2 | DMM Complexity: None\n\nDIFF:\n@@ -1,6 +1,6 @@\n \"\"\"FastAPI framework, high performance, easy to learn, fast to code, ready for production\"\"\"\n \n-__version__ = \"0.112.4\"\n+__version__ = \"0.113.0\"\n \n from starlette import status as status\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#bde12faea20313e4570f7cb896c201058c26e546", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 493 | Contributors (this commit): 2 | Commits (past 90d): 8 | Contributors (cumulative): 2 | DMM Complexity: None\n\nDIFF:\n@@ -1,6 +1,6 @@\n \"\"\"FastAPI framework, high performance, easy to learn, fast to code, ready for production\"\"\"\n \n-__version__ = \"0.113.0\"\n+__version__ = \"0.114.0\"\n \n from starlette import status as status\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#b60d36e7533e0ae299cdff0d72b078d1f036ac67", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 1284 | Contributors (this commit): 10 | Commits (past 90d): 3 | Contributors (cumulative): 10 | DMM Complexity: None\n\nDIFF:\n@@ -556,7 +556,7 @@ class Body(FieldInfo):\n             kwargs[\"examples\"] = examples\n         if regex is not None:\n             warnings.warn(\n-                \"`regex` has been depreacated, please use `pattern` instead\",\n+                \"`regex` has been deprecated, please use `pattern` instead\",\n                 category=DeprecationWarning,\n                 stacklevel=4,\n             )\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#b0eedbb5804a6ac32e4ee8d029d462d950ff8848", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 24 | Lines Deleted: 2 | Files Changed: 3 | Hunks: 7 | Methods Changed: 3 | Complexity Δ (Sum/Max): 3/2 | Churn Δ: 26 | Churn Cumulative: 3823 | Contributors (this commit): 32 | Commits (past 90d): 16 | Contributors (cumulative): 35 | DMM Complexity: 1.0\n\nDIFF:\n@@ -2,6 +2,7 @@ from collections import deque\n from copy import copy\n from dataclasses import dataclass, is_dataclass\n from enum import Enum\n+from functools import lru_cache\n from typing import (\n     Any,\n     Callable,\n@@ -649,3 +650,8 @@ def is_uploadfile_sequence_annotation(annotation: Any) -> bool:\n         is_uploadfile_or_nonable_uploadfile_annotation(sub_annotation)\n         for sub_annotation in get_args(annotation)\n     )\n+\n+\n+@lru_cache\n+def get_cached_model_fields(model: Type[BaseModel]) -> List[ModelField]:\n+    return get_model_fields(model)\n\n@@ -32,8 +32,8 @@ from fastapi._compat import (\n     evaluate_forwardref,\n     field_annotation_is_scalar,\n     get_annotation_from_field_info,\n+    get_cached_model_fields,\n     get_missing_field_error,\n-    get_model_fields,\n     is_bytes_field,\n     is_bytes_sequence_field,\n     is_scalar_field,\n@@ -810,7 +810,7 @@ async def request_body_to_args(\n     fields_to_extract: List[ModelField] = body_fields\n \n     if single_not_embedded_field and lenient_issubclass(first_field.type_, BaseModel):\n-        fields_to_extract = get_model_fields(first_field.type_)\n+        fields_to_extract = get_cached_model_fields(first_field.type_)\n \n     if isinstance(received_body, FormData):\n         body_to_process = await _extract_form_body(fields_to_extract, received_body)\n\n@@ -5,6 +5,7 @@ from fastapi._compat import (\n     ModelField,\n     Undefined,\n     _get_model_config,\n+    get_cached_model_fields,\n     get_model_fields,\n     is_bytes_sequence_annotation,\n     is_scalar_field,\n@@ -102,3 +103,18 @@ def test_is_pv1_scalar_field():\n \n     fields = get_model_fields(Model)\n     assert not is_scalar_field(fields[0])\n+\n+\n+def test_get_model_fields_cached():\n+    class Model(BaseModel):\n+        foo: str\n+\n+    non_cached_fields = get_model_fields(Model)\n+    non_cached_fields2 = get_model_fields(Model)\n+    cached_fields = get_cached_model_fields(Model)\n+    cached_fields2 = get_cached_model_fields(Model)\n+    for f1, f2 in zip(cached_fields, cached_fields2):\n+        assert f1 is f2\n+\n+    assert non_cached_fields is not non_cached_fields2\n+    assert cached_fields is cached_fields2\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#212fd5e247279073dceaba346fd4afc52f627232", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 495 | Contributors (this commit): 2 | Commits (past 90d): 9 | Contributors (cumulative): 2 | DMM Complexity: None\n\nDIFF:\n@@ -1,6 +1,6 @@\n \"\"\"FastAPI framework, high performance, easy to learn, fast to code, ready for production\"\"\"\n \n-__version__ = \"0.114.0\"\n+__version__ = \"0.114.1\"\n \n from starlette import status as status\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#2a4351105ed968002ad15530dec35c6bb453a042", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 18 | Lines Deleted: 1 | Files Changed: 6 | Hunks: 17 | Methods Changed: 6 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 19 | Churn Cumulative: 274 | Contributors (this commit): 1 | Commits (past 90d): 9 | Contributors (cumulative): 6 | DMM Complexity: None\n\nDIFF:\n@@ -8,11 +8,13 @@ from playwright.sync_api import Playwright, sync_playwright\n # Run playwright codegen to generate the code below, copy paste the sections in run()\n def run(playwright: Playwright) -> None:\n     browser = playwright.chromium.launch(headless=False)\n-    context = browser.new_context()\n+    # Update the viewport manually\n+    context = browser.new_context(viewport={\"width\": 960, \"height\": 1080})\n     page = context.new_page()\n     page.goto(\"http://localhost:8000/docs\")\n     page.get_by_role(\"button\", name=\"POST /login/ Login\").click()\n     page.get_by_role(\"button\", name=\"Try it out\").click()\n+    # Manually add the screenshot\n     page.screenshot(path=\"docs/en/docs/img/tutorial/request-form-models/image01.png\")\n \n     # ---------------------\n\n@@ -3,13 +3,16 @@ import subprocess\n from playwright.sync_api import Playwright, sync_playwright\n \n \n+# Run playwright codegen to generate the code below, copy paste the sections in run()\n def run(playwright: Playwright) -> None:\n     browser = playwright.chromium.launch(headless=False)\n+    # Update the viewport manually\n     context = browser.new_context(viewport={\"width\": 960, \"height\": 1080})\n     page = context.new_page()\n     page.goto(\"http://localhost:8000/docs\")\n     page.get_by_text(\"POST/items/Create Item\").click()\n     page.get_by_role(\"tab\", name=\"Schema\").first.click()\n+    # Manually add the screenshot\n     page.screenshot(\n         path=\"docs/en/docs/img/tutorial/separate-openapi-schemas/image01.png\"\n     )\n\n@@ -3,14 +3,17 @@ import subprocess\n from playwright.sync_api import Playwright, sync_playwright\n \n \n+# Run playwright codegen to generate the code below, copy paste the sections in run()\n def run(playwright: Playwright) -> None:\n     browser = playwright.chromium.launch(headless=False)\n+    # Update the viewport manually\n     context = browser.new_context(viewport={\"width\": 960, \"height\": 1080})\n     page = context.new_page()\n     page.goto(\"http://localhost:8000/docs\")\n     page.get_by_text(\"GET/items/Read Items\").click()\n     page.get_by_role(\"button\", name=\"Try it out\").click()\n     page.get_by_role(\"button\", name=\"Execute\").click()\n+    # Manually add the screenshot\n     page.screenshot(\n         path=\"docs/en/docs/img/tutorial/separate-openapi-schemas/image02.png\"\n     )\n\n@@ -3,14 +3,17 @@ import subprocess\n from playwright.sync_api import Playwright, sync_playwright\n \n \n+# Run playwright codegen to generate the code below, copy paste the sections in run()\n def run(playwright: Playwright) -> None:\n     browser = playwright.chromium.launch(headless=False)\n+    # Update the viewport manually\n     context = browser.new_context(viewport={\"width\": 960, \"height\": 1080})\n     page = context.new_page()\n     page.goto(\"http://localhost:8000/docs\")\n     page.get_by_text(\"GET/items/Read Items\").click()\n     page.get_by_role(\"tab\", name=\"Schema\").click()\n     page.get_by_label(\"Schema\").get_by_role(\"button\", name=\"Expand all\").click()\n+    # Manually add the screenshot\n     page.screenshot(\n         path=\"docs/en/docs/img/tutorial/separate-openapi-schemas/image03.png\"\n     )\n\n@@ -3,14 +3,17 @@ import subprocess\n from playwright.sync_api import Playwright, sync_playwright\n \n \n+# Run playwright codegen to generate the code below, copy paste the sections in run()\n def run(playwright: Playwright) -> None:\n     browser = playwright.chromium.launch(headless=False)\n+    # Update the viewport manually\n     context = browser.new_context(viewport={\"width\": 960, \"height\": 1080})\n     page = context.new_page()\n     page.goto(\"http://localhost:8000/docs\")\n     page.get_by_role(\"button\", name=\"Item-Input\").click()\n     page.get_by_role(\"button\", name=\"Item-Output\").click()\n     page.set_viewport_size({\"width\": 960, \"height\": 820})\n+    # Manually add the screenshot\n     page.screenshot(\n         path=\"docs/en/docs/img/tutorial/separate-openapi-schemas/image04.png\"\n     )\n\n@@ -3,13 +3,16 @@ import subprocess\n from playwright.sync_api import Playwright, sync_playwright\n \n \n+# Run playwright codegen to generate the code below, copy paste the sections in run()\n def run(playwright: Playwright) -> None:\n     browser = playwright.chromium.launch(headless=False)\n+    # Update the viewport manually\n     context = browser.new_context(viewport={\"width\": 960, \"height\": 1080})\n     page = context.new_page()\n     page.goto(\"http://localhost:8000/docs\")\n     page.get_by_role(\"button\", name=\"Item\", exact=True).click()\n     page.set_viewport_size({\"width\": 960, \"height\": 700})\n+    # Manually add the screenshot\n     page.screenshot(\n         path=\"docs/en/docs/img/tutorial/separate-openapi-schemas/image05.png\"\n     )\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#88d4f2cb1814392f54011b2bbd3fe55c5f2a3278", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 8 | Lines Deleted: 4 | Files Changed: 2 | Hunks: 8 | Methods Changed: 4 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 12 | Churn Cumulative: 3411 | Contributors (this commit): 33 | Commits (past 90d): 17 | Contributors (cumulative): 35 | DMM Complexity: 1.0\n\nDIFF:\n@@ -788,7 +788,7 @@ async def _extract_form_body(\n                     tg.start_soon(process_fn, sub_value.read)\n             value = serialize_sequence_value(field=field, value=results)\n         if value is not None:\n-            values[field.name] = value\n+            values[field.alias] = value\n     for key, value in received_body.items():\n         if key not in values:\n             values[key] = value\n\n@@ -3,7 +3,7 @@ from typing import List, Optional\n from dirty_equals import IsDict\n from fastapi import FastAPI, Form\n from fastapi.testclient import TestClient\n-from pydantic import BaseModel\n+from pydantic import BaseModel, Field\n from typing_extensions import Annotated\n \n app = FastAPI()\n@@ -14,6 +14,7 @@ class FormModel(BaseModel):\n     lastname: str\n     age: Optional[int] = None\n     tags: List[str] = [\"foo\", \"bar\"]\n+    alias_with: str = Field(alias=\"with\", default=\"nothing\")\n \n \n @app.post(\"/form/\")\n@@ -32,6 +33,7 @@ def test_send_all_data():\n             \"lastname\": \"Sanchez\",\n             \"age\": \"70\",\n             \"tags\": [\"plumbus\", \"citadel\"],\n+            \"with\": \"something\",\n         },\n     )\n     assert response.status_code == 200, response.text\n@@ -40,6 +42,7 @@ def test_send_all_data():\n         \"lastname\": \"Sanchez\",\n         \"age\": 70,\n         \"tags\": [\"plumbus\", \"citadel\"],\n+        \"with\": \"something\",\n     }\n \n \n@@ -51,6 +54,7 @@ def test_defaults():\n         \"lastname\": \"Sanchez\",\n         \"age\": None,\n         \"tags\": [\"foo\", \"bar\"],\n+        \"with\": \"nothing\",\n     }\n \n \n@@ -100,13 +104,13 @@ def test_no_data():\n                     \"type\": \"missing\",\n                     \"loc\": [\"body\", \"username\"],\n                     \"msg\": \"Field required\",\n-                    \"input\": {\"tags\": [\"foo\", \"bar\"]},\n+                    \"input\": {\"tags\": [\"foo\", \"bar\"], \"with\": \"nothing\"},\n                 },\n                 {\n                     \"type\": \"missing\",\n                     \"loc\": [\"body\", \"lastname\"],\n                     \"msg\": \"Field required\",\n-                    \"input\": {\"tags\": [\"foo\", \"bar\"]},\n+                    \"input\": {\"tags\": [\"foo\", \"bar\"], \"with\": \"nothing\"},\n                 },\n             ]\n         }\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
