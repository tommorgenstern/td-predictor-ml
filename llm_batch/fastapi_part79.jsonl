{"custom_id": "fastapi#b59885c9d5692613db145965c72042070fdcfa94", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 315 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 7 | Complexity Î” (Sum/Max): 25/25 | Churn Î”: 315 | Churn Cumulative: 315 | Contributors (this commit): 1 | Commits (past 90d): 1 | Contributors (cumulative): 1 | DMM Complexity: 0.8164556962025317\n\nDIFF:\n@@ -0,0 +1,315 @@\n+import logging\n+import secrets\n+import subprocess\n+from collections import Counter\n+from datetime import datetime\n+from pathlib import Path\n+from typing import Any\n+\n+import httpx\n+import yaml\n+from github import Github\n+from pydantic import BaseModel, SecretStr\n+from pydantic_settings import BaseSettings\n+\n+github_graphql_url = \"https://api.github.com/graphql\"\n+\n+\n+prs_query = \"\"\"\n+query Q($after: String) {\n+  repository(name: \"fastapi\", owner: \"fastapi\") {\n+    pullRequests(first: 100, after: $after) {\n+      edges {\n+        cursor\n+        node {\n+          number\n+          labels(first: 100) {\n+            nodes {\n+              name\n+            }\n+          }\n+          author {\n+            login\n+            avatarUrl\n+            url\n+          }\n+          title\n+          createdAt\n+          lastEditedAt\n+          updatedAt\n+          state\n+          reviews(first:100) {\n+            nodes {\n+              author {\n+                login\n+                avatarUrl\n+                url\n+              }\n+              state\n+            }\n+          }\n+        }\n+      }\n+    }\n+  }\n+}\n+\"\"\"\n+\n+\n+class Author(BaseModel):\n+    login: str\n+    avatarUrl: str\n+    url: str\n+\n+\n+class LabelNode(BaseModel):\n+    name: str\n+\n+\n+class Labels(BaseModel):\n+    nodes: list[LabelNode]\n+\n+\n+class ReviewNode(BaseModel):\n+    author: Author | None = None\n+    state: str\n+\n+\n+class Reviews(BaseModel):\n+    nodes: list[ReviewNode]\n+\n+\n+class PullRequestNode(BaseModel):\n+    number: int\n+    labels: Labels\n+    author: Author | None = None\n+    title: str\n+    createdAt: datetime\n+    lastEditedAt: datetime | None = None\n+    updatedAt: datetime | None = None\n+    state: str\n+    reviews: Reviews\n+\n+\n+class PullRequestEdge(BaseModel):\n+    cursor: str\n+    node: PullRequestNode\n+\n+\n+class PullRequests(BaseModel):\n+    edges: list[PullRequestEdge]\n+\n+\n+class PRsRepository(BaseModel):\n+    pullRequests: PullRequests\n+\n+\n+class PRsResponseData(BaseModel):\n+    repository: PRsRepository\n+\n+\n+class PRsResponse(BaseModel):\n+    data: PRsResponseData\n+\n+\n+class Settings(BaseSettings):\n+    github_token: SecretStr\n+    github_repository: str\n+    httpx_timeout: int = 30\n+\n+\n+def get_graphql_response(\n+    *,\n+    settings: Settings,\n+    query: str,\n+    after: str | None = None,\n+) -> dict[str, Any]:\n+    headers = {\"Authorization\": f\"token {settings.github_token.get_secret_value()}\"}\n+    variables = {\"after\": after}\n+    response = httpx.post(\n+        github_graphql_url,\n+        headers=headers,\n+        timeout=settings.httpx_timeout,\n+        json={\"query\": query, \"variables\": variables, \"operationName\": \"Q\"},\n+    )\n+    if response.status_code != 200:\n+        logging.error(f\"Response was not 200, after: {after}\")\n+        logging.error(response.text)\n+        raise RuntimeError(response.text)\n+    data = response.json()\n+    if \"errors\" in data:\n+        logging.error(f\"Errors in response, after: {after}\")\n+        logging.error(data[\"errors\"])\n+        logging.error(response.text)\n+        raise RuntimeError(response.text)\n+    return data\n+\n+\n+def get_graphql_pr_edges(\n+    *, settings: Settings, after: str | None = None\n+) -> list[PullRequestEdge]:\n+    data = get_graphql_response(settings=settings, query=prs_query, after=after)\n+    graphql_response = PRsResponse.model_validate(data)\n+    return graphql_response.data.repository.pullRequests.edges\n+\n+\n+def get_pr_nodes(settings: Settings) -> list[PullRequestNode]:\n+    pr_nodes: list[PullRequestNode] = []\n+    pr_edges = get_graphql_pr_edges(settings=settings)\n+\n+    while pr_edges:\n+        for edge in pr_edges:\n+            pr_nodes.append(edge.node)\n+        last_edge = pr_edges[-1]\n+        pr_edges = get_graphql_pr_edges(settings=settings, after=last_edge.cursor)\n+    return pr_nodes\n+\n+\n+class ContributorsResults(BaseModel):\n+    contributors: Counter[str]\n+    translation_reviewers: Counter[str]\n+    translators: Counter[str]\n+    authors: dict[str, Author]\n+\n+\n+def get_contributors(pr_nodes: list[PullRequestNode]) -> ContributorsResults:\n+    contributors = Counter[str]()\n+    translation_reviewers = Counter[str]()\n+    translators = Counter[str]()\n+    authors: dict[str, Author] = {}\n+\n+    for pr in pr_nodes:\n+        if pr.author:\n+            authors[pr.author.login] = pr.author\n+        is_lang = False\n+        for label in pr.labels.nodes:\n+            if label.name == \"lang-all\":\n+                is_lang = True\n+                break\n+        for review in pr.reviews.nodes:\n+            if review.author:\n+                authors[review.author.login] = review.author\n+                if is_lang:\n+                    translation_reviewers[review.author.login] += 1\n+        if pr.state == \"MERGED\" and pr.author:\n+            if is_lang:\n+                translators[pr.author.login] += 1\n+            else:\n+                contributors[pr.author.login] += 1\n+    return ContributorsResults(\n+        contributors=contributors,\n+        translation_reviewers=translation_reviewers,\n+        translators=translators,\n+        authors=authors,\n+    )\n+\n+\n+def get_users_to_write(\n+    *,\n+    counter: Counter[str],\n+    authors: dict[str, Author],\n+    min_count: int = 2,\n+) -> dict[str, Any]:\n+    users: dict[str, Any] = {}\n+    for user, count in counter.most_common():\n+        if count >= min_count:\n+            author = authors[user]\n+            users[user] = {\n+                \"login\": user,\n+                \"count\": count,\n+                \"avatarUrl\": author.avatarUrl,\n+                \"url\": author.url,\n+            }\n+    return users\n+\n+\n+def update_content(*, content_path: Path, new_content: Any) -> bool:\n+    old_content = content_path.read_text(encoding=\"utf-8\")\n+\n+    new_content = yaml.dump(new_content, sort_keys=False, width=200, allow_unicode=True)\n+    if old_content == new_content:\n+        logging.info(f\"The content hasn't changed for {content_path}\")\n+        return False\n+    content_path.write_text(new_content, encoding=\"utf-8\")\n+    logging.info(f\"Updated {content_path}\")\n+    return True\n+\n+\n+def main() -> None:\n+    logging.basicConfig(level=logging.INFO)\n+    settings = Settings()\n+    logging.info(f\"Using config: {settings.model_dump_json()}\")\n+    g = Github(settings.github_token.get_secret_value())\n+    repo = g.get_repo(settings.github_repository)\n+\n+    pr_nodes = get_pr_nodes(settings=settings)\n+    contributors_results = get_contributors(pr_nodes=pr_nodes)\n+    authors = contributors_results.authors\n+\n+    top_contributors = get_users_to_write(\n+        counter=contributors_results.contributors,\n+        authors=authors,\n+    )\n+\n+    top_translators = get_users_to_write(\n+        counter=contributors_results.translators,\n+        authors=authors,\n+    )\n+    top_translations_reviewers = get_users_to_write(\n+        counter=contributors_results.translation_reviewers,\n+        authors=authors,\n+    )\n+\n+    # For local development\n+    # contributors_path = Path(\"../docs/en/data/contributors.yml\")\n+    contributors_path = Path(\"./docs/en/data/contributors.yml\")\n+    # translators_path = Path(\"../docs/en/data/translators.yml\")\n+    translators_path = Path(\"./docs/en/data/translators.yml\")\n+    # translation_reviewers_path = Path(\"../docs/en/data/translation_reviewers.yml\")\n+    translation_reviewers_path = Path(\"./docs/en/data/translation_reviewers.yml\")\n+\n+    updated = [\n+        update_content(content_path=contributors_path, new_content=top_contributors),\n+        update_content(content_path=translators_path, new_content=top_translators),\n+        update_content(\n+            content_path=translation_reviewers_path,\n+            new_content=top_translations_reviewers,\n+        ),\n+    ]\n+\n+    if not any(updated):\n+        logging.info(\"The data hasn't changed, finishing.\")\n+        return\n+\n+    logging.info(\"Setting up GitHub Actions git user\")\n+    subprocess.run([\"git\", \"config\", \"user.name\", \"github-actions\"], check=True)\n+    subprocess.run(\n+        [\"git\", \"config\", \"user.email\", \"github-actions@github.com\"], check=True\n+    )\n+    branch_name = f\"fastapi-people-contributors-{secrets.token_hex(4)}\"\n+    logging.info(f\"Creating a new branch {branch_name}\")\n+    subprocess.run([\"git\", \"checkout\", \"-b\", branch_name], check=True)\n+    logging.info(\"Adding updated file\")\n+    subprocess.run(\n+        [\n+            \"git\",\n+            \"add\",\n+            str(contributors_path),\n+            str(translators_path),\n+            str(translation_reviewers_path),\n+        ],\n+        check=True,\n+    )\n+    logging.info(\"Committing updated file\")\n+    message = \"ðŸ‘¥ Update FastAPI People - Contributors and Translators\"\n+    subprocess.run([\"git\", \"commit\", \"-m\", message], check=True)\n+    logging.info(\"Pushing branch\")\n+    subprocess.run([\"git\", \"push\", \"origin\", branch_name], check=True)\n+    logging.info(\"Creating PR\")\n+    pr = repo.create_pull(title=message, body=message, base=\"master\", head=branch_name)\n+    logging.info(f\"Created PR: {pr.number}\")\n+    logging.info(\"Finished\")\n+\n+\n+if __name__ == \"__main__\":\n+    main()\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#1b8f823a0559ff36d49e6c724f7c9289f8c10a1f", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 80 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Î” (Sum/Max): 5/5 | Churn Î”: 80 | Churn Cumulative: 80 | Contributors (this commit): 1 | Commits (past 90d): 1 | Contributors (cumulative): 1 | DMM Complexity: 1.0\n\nDIFF:\n@@ -0,0 +1,80 @@\n+import logging\n+import secrets\n+import subprocess\n+from pathlib import Path\n+\n+import yaml\n+from github import Github\n+from pydantic import BaseModel, SecretStr\n+from pydantic_settings import BaseSettings\n+\n+\n+class Settings(BaseSettings):\n+    github_repository: str\n+    github_token: SecretStr\n+\n+\n+class Repo(BaseModel):\n+    name: str\n+    html_url: str\n+    stars: int\n+    owner_login: str\n+    owner_html_url: str\n+\n+\n+def main() -> None:\n+    logging.basicConfig(level=logging.INFO)\n+    settings = Settings()\n+\n+    logging.info(f\"Using config: {settings.model_dump_json()}\")\n+    g = Github(settings.github_token.get_secret_value(), per_page=100)\n+    r = g.get_repo(settings.github_repository)\n+    repos = g.search_repositories(query=\"topic:fastapi\")\n+    repos_list = list(repos)\n+    final_repos: list[Repo] = []\n+    for repo in repos_list[:100]:\n+        if repo.full_name == settings.github_repository:\n+            continue\n+        final_repos.append(\n+            Repo(\n+                name=repo.name,\n+                html_url=repo.html_url,\n+                stars=repo.stargazers_count,\n+                owner_login=repo.owner.login,\n+                owner_html_url=repo.owner.html_url,\n+            )\n+        )\n+    data = [repo.model_dump() for repo in final_repos]\n+\n+    # Local development\n+    # repos_path = Path(\"../docs/en/data/topic_repos.yml\")\n+    repos_path = Path(\"./docs/en/data/topic_repos.yml\")\n+    repos_old_content = repos_path.read_text(encoding=\"utf-8\")\n+    new_repos_content = yaml.dump(data, sort_keys=False, width=200, allow_unicode=True)\n+    if repos_old_content == new_repos_content:\n+        logging.info(\"The data hasn't changed. Finishing.\")\n+        return\n+    repos_path.write_text(new_repos_content, encoding=\"utf-8\")\n+    logging.info(\"Setting up GitHub Actions git user\")\n+    subprocess.run([\"git\", \"config\", \"user.name\", \"github-actions\"], check=True)\n+    subprocess.run(\n+        [\"git\", \"config\", \"user.email\", \"github-actions@github.com\"], check=True\n+    )\n+    branch_name = f\"fastapi-topic-repos-{secrets.token_hex(4)}\"\n+    logging.info(f\"Creating a new branch {branch_name}\")\n+    subprocess.run([\"git\", \"checkout\", \"-b\", branch_name], check=True)\n+    logging.info(\"Adding updated file\")\n+    subprocess.run([\"git\", \"add\", str(repos_path)], check=True)\n+    logging.info(\"Committing updated file\")\n+    message = \"ðŸ‘¥ Update FastAPI GitHub topic repositories\"\n+    subprocess.run([\"git\", \"commit\", \"-m\", message], check=True)\n+    logging.info(\"Pushing branch\")\n+    subprocess.run([\"git\", \"push\", \"origin\", branch_name], check=True)\n+    logging.info(\"Creating PR\")\n+    pr = r.create_pull(title=message, body=message, base=\"master\", head=branch_name)\n+    logging.info(f\"Created PR: {pr.number}\")\n+    logging.info(\"Finished\")\n+\n+\n+if __name__ == \"__main__\":\n+    main()\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#994340f839f8a833e400e554d5d659dad461d012", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 23 | Lines Deleted: 100 | Files Changed: 5 | Hunks: 8 | Methods Changed: 16 | Complexity Î” (Sum/Max): -10/1 | Churn Î”: 123 | Churn Cumulative: 243 | Contributors (this commit): 3 | Commits (past 90d): 5 | Contributors (cumulative): 7 | DMM Complexity: 0.0\n\nDIFF:\n@@ -1,17 +1,35 @@\n+import importlib\n+\n+import pytest\n from fastapi.testclient import TestClient\n \n-from docs_src.additional_status_codes.tutorial001 import app\n-\n-client = TestClient(app)\n+from ...utils import needs_py39, needs_py310\n \n \n-def test_update():\n+@pytest.fixture(\n+    name=\"client\",\n+    params=[\n+        \"tutorial001\",\n+        pytest.param(\"tutorial001_py310\", marks=needs_py310),\n+        \"tutorial001_an\",\n+        pytest.param(\"tutorial001_an_py39\", marks=needs_py39),\n+        pytest.param(\"tutorial001_an_py310\", marks=needs_py310),\n+    ],\n+)\n+def get_client(request: pytest.FixtureRequest):\n+    mod = importlib.import_module(f\"docs_src.additional_status_codes.{request.param}\")\n+\n+    client = TestClient(mod.app)\n+    return client\n+\n+\n+def test_update(client: TestClient):\n     response = client.put(\"/items/foo\", json={\"name\": \"Wrestlers\"})\n     assert response.status_code == 200, response.text\n     assert response.json() == {\"name\": \"Wrestlers\", \"size\": None}\n \n \n-def test_create():\n+def test_create(client: TestClient):\n     response = client.put(\"/items/red\", json={\"name\": \"Chillies\"})\n     assert response.status_code == 201, response.text\n     assert response.json() == {\"name\": \"Chillies\", \"size\": None}\n\n@@ -1,17 +0,0 @@\n-from fastapi.testclient import TestClient\n-\n-from docs_src.additional_status_codes.tutorial001_an import app\n-\n-client = TestClient(app)\n-\n-\n-def test_update():\n-    response = client.put(\"/items/foo\", json={\"name\": \"Wrestlers\"})\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"name\": \"Wrestlers\", \"size\": None}\n-\n-\n-def test_create():\n-    response = client.put(\"/items/red\", json={\"name\": \"Chillies\"})\n-    assert response.status_code == 201, response.text\n-    assert response.json() == {\"name\": \"Chillies\", \"size\": None}\n\n@@ -1,26 +0,0 @@\n-import pytest\n-from fastapi.testclient import TestClient\n-\n-from ...utils import needs_py310\n-\n-\n-@pytest.fixture(name=\"client\")\n-def get_client():\n-    from docs_src.additional_status_codes.tutorial001_an_py310 import app\n-\n-    client = TestClient(app)\n-    return client\n-\n-\n-@needs_py310\n-def test_update(client: TestClient):\n-    response = client.put(\"/items/foo\", json={\"name\": \"Wrestlers\"})\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"name\": \"Wrestlers\", \"size\": None}\n-\n-\n-@needs_py310\n-def test_create(client: TestClient):\n-    response = client.put(\"/items/red\", json={\"name\": \"Chillies\"})\n-    assert response.status_code == 201, response.text\n-    assert response.json() == {\"name\": \"Chillies\", \"size\": None}\n\n@@ -1,26 +0,0 @@\n-import pytest\n-from fastapi.testclient import TestClient\n-\n-from ...utils import needs_py39\n-\n-\n-@pytest.fixture(name=\"client\")\n-def get_client():\n-    from docs_src.additional_status_codes.tutorial001_an_py39 import app\n-\n-    client = TestClient(app)\n-    return client\n-\n-\n-@needs_py39\n-def test_update(client: TestClient):\n-    response = client.put(\"/items/foo\", json={\"name\": \"Wrestlers\"})\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"name\": \"Wrestlers\", \"size\": None}\n-\n-\n-@needs_py39\n-def test_create(client: TestClient):\n-    response = client.put(\"/items/red\", json={\"name\": \"Chillies\"})\n-    assert response.status_code == 201, response.text\n-    assert response.json() == {\"name\": \"Chillies\", \"size\": None}\n\n@@ -1,26 +0,0 @@\n-import pytest\n-from fastapi.testclient import TestClient\n-\n-from ...utils import needs_py310\n-\n-\n-@pytest.fixture(name=\"client\")\n-def get_client():\n-    from docs_src.additional_status_codes.tutorial001_py310 import app\n-\n-    client = TestClient(app)\n-    return client\n-\n-\n-@needs_py310\n-def test_update(client: TestClient):\n-    response = client.put(\"/items/foo\", json={\"name\": \"Wrestlers\"})\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"name\": \"Wrestlers\", \"size\": None}\n-\n-\n-@needs_py310\n-def test_create(client: TestClient):\n-    response = client.put(\"/items/red\", json={\"name\": \"Chillies\"})\n-    assert response.status_code == 201, response.text\n-    assert response.json() == {\"name\": \"Chillies\", \"size\": None}\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#d784a90207e6545a62d86b57c7a09a0c90e29bce", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 0 | Lines Deleted: 203 | Files Changed: 6 | Hunks: 5 | Methods Changed: 18 | Complexity Î” (Sum/Max): -2/0 | Churn Î”: 203 | Churn Cumulative: 211 | Contributors (this commit): 2 | Commits (past 90d): 6 | Contributors (cumulative): 12 | DMM Complexity: 0.0\n\nDIFF:\n\n@@ -1,30 +0,0 @@\n-from . import models, schemas\n-\n-\n-def get_user(user_id: int):\n-    return models.User.filter(models.User.id == user_id).first()\n-\n-\n-def get_user_by_email(email: str):\n-    return models.User.filter(models.User.email == email).first()\n-\n-\n-def get_users(skip: int = 0, limit: int = 100):\n-    return list(models.User.select().offset(skip).limit(limit))\n-\n-\n-def create_user(user: schemas.UserCreate):\n-    fake_hashed_password = user.password + \"notreallyhashed\"\n-    db_user = models.User(email=user.email, hashed_password=fake_hashed_password)\n-    db_user.save()\n-    return db_user\n-\n-\n-def get_items(skip: int = 0, limit: int = 100):\n-    return list(models.Item.select().offset(skip).limit(limit))\n-\n-\n-def create_user_item(item: schemas.ItemCreate, user_id: int):\n-    db_item = models.Item(**item.dict(), owner_id=user_id)\n-    db_item.save()\n-    return db_item\n\n@@ -1,24 +0,0 @@\n-from contextvars import ContextVar\n-\n-import peewee\n-\n-DATABASE_NAME = \"test.db\"\n-db_state_default = {\"closed\": None, \"conn\": None, \"ctx\": None, \"transactions\": None}\n-db_state = ContextVar(\"db_state\", default=db_state_default.copy())\n-\n-\n-class PeeweeConnectionState(peewee._ConnectionState):\n-    def __init__(self, **kwargs):\n-        super().__setattr__(\"_state\", db_state)\n-        super().__init__(**kwargs)\n-\n-    def __setattr__(self, name, value):\n-        self._state.get()[name] = value\n-\n-    def __getattr__(self, name):\n-        return self._state.get()[name]\n-\n-\n-db = peewee.SqliteDatabase(DATABASE_NAME, check_same_thread=False)\n-\n-db._state = PeeweeConnectionState()\n\n@@ -1,79 +0,0 @@\n-import time\n-from typing import List\n-\n-from fastapi import Depends, FastAPI, HTTPException\n-\n-from . import crud, database, models, schemas\n-from .database import db_state_default\n-\n-database.db.connect()\n-database.db.create_tables([models.User, models.Item])\n-database.db.close()\n-\n-app = FastAPI()\n-\n-sleep_time = 10\n-\n-\n-async def reset_db_state():\n-    database.db._state._state.set(db_state_default.copy())\n-    database.db._state.reset()\n-\n-\n-def get_db(db_state=Depends(reset_db_state)):\n-    try:\n-        database.db.connect()\n-        yield\n-    finally:\n-        if not database.db.is_closed():\n-            database.db.close()\n-\n-\n-@app.post(\"/users/\", response_model=schemas.User, dependencies=[Depends(get_db)])\n-def create_user(user: schemas.UserCreate):\n-    db_user = crud.get_user_by_email(email=user.email)\n-    if db_user:\n-        raise HTTPException(status_code=400, detail=\"Email already registered\")\n-    return crud.create_user(user=user)\n-\n-\n-@app.get(\"/users/\", response_model=List[schemas.User], dependencies=[Depends(get_db)])\n-def read_users(skip: int = 0, limit: int = 100):\n-    users = crud.get_users(skip=skip, limit=limit)\n-    return users\n-\n-\n-@app.get(\n-    \"/users/{user_id}\", response_model=schemas.User, dependencies=[Depends(get_db)]\n-)\n-def read_user(user_id: int):\n-    db_user = crud.get_user(user_id=user_id)\n-    if db_user is None:\n-        raise HTTPException(status_code=404, detail=\"User not found\")\n-    return db_user\n-\n-\n-@app.post(\n-    \"/users/{user_id}/items/\",\n-    response_model=schemas.Item,\n-    dependencies=[Depends(get_db)],\n-)\n-def create_item_for_user(user_id: int, item: schemas.ItemCreate):\n-    return crud.create_user_item(item=item, user_id=user_id)\n-\n-\n-@app.get(\"/items/\", response_model=List[schemas.Item], dependencies=[Depends(get_db)])\n-def read_items(skip: int = 0, limit: int = 100):\n-    items = crud.get_items(skip=skip, limit=limit)\n-    return items\n-\n-\n-@app.get(\n-    \"/slowusers/\", response_model=List[schemas.User], dependencies=[Depends(get_db)]\n-)\n-def read_slow_users(skip: int = 0, limit: int = 100):\n-    global sleep_time\n-    sleep_time = max(0, sleep_time - 1)\n-    time.sleep(sleep_time)  # Fake long processing request\n-    users = crud.get_users(skip=skip, limit=limit)\n-    return users\n\n@@ -1,21 +0,0 @@\n-import peewee\n-\n-from .database import db\n-\n-\n-class User(peewee.Model):\n-    email = peewee.CharField(unique=True, index=True)\n-    hashed_password = peewee.CharField()\n-    is_active = peewee.BooleanField(default=True)\n-\n-    class Meta:\n-        database = db\n-\n-\n-class Item(peewee.Model):\n-    title = peewee.CharField(index=True)\n-    description = peewee.CharField(index=True)\n-    owner = peewee.ForeignKeyField(User, backref=\"items\")\n-\n-    class Meta:\n-        database = db\n\n@@ -1,49 +0,0 @@\n-from typing import Any, List, Union\n-\n-import peewee\n-from pydantic import BaseModel\n-from pydantic.utils import GetterDict\n-\n-\n-class PeeweeGetterDict(GetterDict):\n-    def get(self, key: Any, default: Any = None):\n-        res = getattr(self._obj, key, default)\n-        if isinstance(res, peewee.ModelSelect):\n-            return list(res)\n-        return res\n-\n-\n-class ItemBase(BaseModel):\n-    title: str\n-    description: Union[str, None] = None\n-\n-\n-class ItemCreate(ItemBase):\n-    pass\n-\n-\n-class Item(ItemBase):\n-    id: int\n-    owner_id: int\n-\n-    class Config:\n-        orm_mode = True\n-        getter_dict = PeeweeGetterDict\n-\n-\n-class UserBase(BaseModel):\n-    email: str\n-\n-\n-class UserCreate(UserBase):\n-    password: str\n-\n-\n-class User(UserBase):\n-    id: int\n-    is_active: bool\n-    items: List[Item] = []\n-\n-    class Config:\n-        orm_mode = True\n-        getter_dict = PeeweeGetterDict\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#b0e70cb37e2fe9446f51443d88cb053da91748ce", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 3 | Lines Deleted: 4 | Files Changed: 1 | Hunks: 3 | Methods Changed: 0 | Complexity Î” (Sum/Max): 0/0 | Churn Î”: 7 | Churn Cumulative: 33 | Contributors (this commit): 2 | Commits (past 90d): 1 | Contributors (cumulative): 2 | DMM Complexity: None\n\nDIFF:\n@@ -1,6 +1,6 @@\n import strawberry\n from fastapi import FastAPI\n-from strawberry.asgi import GraphQL\n+from strawberry.fastapi import GraphQLRouter\n \n \n @strawberry.type\n@@ -19,8 +19,7 @@ class Query:\n schema = strawberry.Schema(query=Query)\n \n \n-graphql_app = GraphQL(schema)\n+graphql_app = GraphQLRouter(schema)\n \n app = FastAPI()\n-app.add_route(\"/graphql\", graphql_app)\n-app.add_websocket_route(\"/graphql\", graphql_app)\n+app.include_router(graphql_app, prefix=\"/graphql\")\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#44adb29ce18b5a720898ca69c2b0995170542da2", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 21 | Lines Deleted: 86 | Files Changed: 5 | Hunks: 8 | Methods Changed: 7 | Complexity Î” (Sum/Max): -7/1 | Churn Î”: 107 | Churn Cumulative: 214 | Contributors (this commit): 4 | Commits (past 90d): 5 | Contributors (cumulative): 12 | DMM Complexity: 0.0\n\nDIFF:\n@@ -1,14 +1,31 @@\n+import importlib\n import os\n from pathlib import Path\n \n+import pytest\n from fastapi.testclient import TestClient\n \n-from docs_src.background_tasks.tutorial002 import app\n-\n-client = TestClient(app)\n+from ...utils import needs_py39, needs_py310\n \n \n-def test():\n+@pytest.fixture(\n+    name=\"client\",\n+    params=[\n+        \"tutorial002\",\n+        pytest.param(\"tutorial002_py310\", marks=needs_py310),\n+        \"tutorial002_an\",\n+        pytest.param(\"tutorial002_an_py39\", marks=needs_py39),\n+        pytest.param(\"tutorial002_an_py310\", marks=needs_py310),\n+    ],\n+)\n+def get_client(request: pytest.FixtureRequest):\n+    mod = importlib.import_module(f\"docs_src.background_tasks.{request.param}\")\n+\n+    client = TestClient(mod.app)\n+    return client\n+\n+\n+def test(client: TestClient):\n     log = Path(\"log.txt\")\n     if log.is_file():\n         os.remove(log)  # pragma: no cover\n\n@@ -1,19 +0,0 @@\n-import os\n-from pathlib import Path\n-\n-from fastapi.testclient import TestClient\n-\n-from docs_src.background_tasks.tutorial002_an import app\n-\n-client = TestClient(app)\n-\n-\n-def test():\n-    log = Path(\"log.txt\")\n-    if log.is_file():\n-        os.remove(log)  # pragma: no cover\n-    response = client.post(\"/send-notification/foo@example.com?q=some-query\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"message\": \"Message sent\"}\n-    with open(\"./log.txt\") as f:\n-        assert \"found query: some-query\\nmessage to foo@example.com\" in f.read()\n\n@@ -1,21 +0,0 @@\n-import os\n-from pathlib import Path\n-\n-from fastapi.testclient import TestClient\n-\n-from ...utils import needs_py310\n-\n-\n-@needs_py310\n-def test():\n-    from docs_src.background_tasks.tutorial002_an_py310 import app\n-\n-    client = TestClient(app)\n-    log = Path(\"log.txt\")\n-    if log.is_file():\n-        os.remove(log)  # pragma: no cover\n-    response = client.post(\"/send-notification/foo@example.com?q=some-query\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"message\": \"Message sent\"}\n-    with open(\"./log.txt\") as f:\n-        assert \"found query: some-query\\nmessage to foo@example.com\" in f.read()\n\n@@ -1,21 +0,0 @@\n-import os\n-from pathlib import Path\n-\n-from fastapi.testclient import TestClient\n-\n-from ...utils import needs_py39\n-\n-\n-@needs_py39\n-def test():\n-    from docs_src.background_tasks.tutorial002_an_py39 import app\n-\n-    client = TestClient(app)\n-    log = Path(\"log.txt\")\n-    if log.is_file():\n-        os.remove(log)  # pragma: no cover\n-    response = client.post(\"/send-notification/foo@example.com?q=some-query\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"message\": \"Message sent\"}\n-    with open(\"./log.txt\") as f:\n-        assert \"found query: some-query\\nmessage to foo@example.com\" in f.read()\n\n@@ -1,21 +0,0 @@\n-import os\n-from pathlib import Path\n-\n-from fastapi.testclient import TestClient\n-\n-from ...utils import needs_py310\n-\n-\n-@needs_py310\n-def test():\n-    from docs_src.background_tasks.tutorial002_py310 import app\n-\n-    client = TestClient(app)\n-    log = Path(\"log.txt\")\n-    if log.is_file():\n-        os.remove(log)  # pragma: no cover\n-    response = client.post(\"/send-notification/foo@example.com?q=some-query\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"message\": \"Message sent\"}\n-    with open(\"./log.txt\") as f:\n-        assert \"found query: some-query\\nmessage to foo@example.com\" in f.read()\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#5d3f45c2d47f04a7a8c793c13e0349803394e86b", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 15 | Lines Deleted: 1461 | Files Changed: 3 | Hunks: 6 | Methods Changed: 54 | Complexity Î” (Sum/Max): -52/0 | Churn Î”: 1476 | Churn Cumulative: 5361 | Contributors (this commit): 7 | Commits (past 90d): 3 | Contributors (cumulative): 11 | DMM Complexity: 0.0\n\nDIFF:\n@@ -1,13 +1,24 @@\n+import importlib\n+\n import pytest\n from dirty_equals import IsDict\n from fastapi.testclient import TestClient\n \n+from ...utils import needs_py39\n \n-@pytest.fixture(name=\"client\")\n-def get_client():\n-    from docs_src.bigger_applications.app.main import app\n \n-    client = TestClient(app)\n+@pytest.fixture(\n+    name=\"client\",\n+    params=[\n+        \"app_an.main\",\n+        pytest.param(\"app_an_py39.main\", marks=needs_py39),\n+        \"app.main\",\n+    ],\n+)\n+def get_client(request: pytest.FixtureRequest):\n+    mod = importlib.import_module(f\"docs_src.bigger_applications.{request.param}\")\n+\n+    client = TestClient(mod.app)\n     return client\n \n \n\n@@ -1,715 +0,0 @@\n-import pytest\n-from dirty_equals import IsDict\n-from fastapi.testclient import TestClient\n-\n-\n-@pytest.fixture(name=\"client\")\n-def get_client():\n-    from docs_src.bigger_applications.app_an.main import app\n-\n-    client = TestClient(app)\n-    return client\n-\n-\n-def test_users_token_jessica(client: TestClient):\n-    response = client.get(\"/users?token=jessica\")\n-    assert response.status_code == 200\n-    assert response.json() == [{\"username\": \"Rick\"}, {\"username\": \"Morty\"}]\n-\n-\n-def test_users_with_no_token(client: TestClient):\n-    response = client.get(\"/users\")\n-    assert response.status_code == 422\n-    assert response.json() == IsDict(\n-        {\n-            \"detail\": [\n-                {\n-                    \"type\": \"missing\",\n-                    \"loc\": [\"query\", \"token\"],\n-                    \"msg\": \"Field required\",\n-                    \"input\": None,\n-                }\n-            ]\n-        }\n-    ) | IsDict(\n-        # TODO: remove when deprecating Pydantic v1\n-        {\n-            \"detail\": [\n-                {\n-                    \"loc\": [\"query\", \"token\"],\n-                    \"msg\": \"field required\",\n-                    \"type\": \"value_error.missing\",\n-                },\n-            ]\n-        }\n-    )\n-\n-\n-def test_users_foo_token_jessica(client: TestClient):\n-    response = client.get(\"/users/foo?token=jessica\")\n-    assert response.status_code == 200\n-    assert response.json() == {\"username\": \"foo\"}\n-\n-\n-def test_users_foo_with_no_token(client: TestClient):\n-    response = client.get(\"/users/foo\")\n-    assert response.status_code == 422\n-    assert response.json() == IsDict(\n-        {\n-            \"detail\": [\n-                {\n-                    \"type\": \"missing\",\n-                    \"loc\": [\"query\", \"token\"],\n-                    \"msg\": \"Field required\",\n-                    \"input\": None,\n-                }\n-            ]\n-        }\n-    ) | IsDict(\n-        # TODO: remove when deprecating Pydantic v1\n-        {\n-            \"detail\": [\n-                {\n-                    \"loc\": [\"query\", \"token\"],\n-                    \"msg\": \"field required\",\n-                    \"type\": \"value_error.missing\",\n-                },\n-            ]\n-        }\n-    )\n-\n-\n-def test_users_me_token_jessica(client: TestClient):\n-    response = client.get(\"/users/me?token=jessica\")\n-    assert response.status_code == 200\n-    assert response.json() == {\"username\": \"fakecurrentuser\"}\n-\n-\n-def test_users_me_with_no_token(client: TestClient):\n-    response = client.get(\"/users/me\")\n-    assert response.status_code == 422\n-    assert response.json() == IsDict(\n-        {\n-            \"detail\": [\n-                {\n-                    \"type\": \"missing\",\n-                    \"loc\": [\"query\", \"token\"],\n-                    \"msg\": \"Field required\",\n-                    \"input\": None,\n-                }\n-            ]\n-        }\n-    ) | IsDict(\n-        # TODO: remove when deprecating Pydantic v1\n-        {\n-            \"detail\": [\n-                {\n-                    \"loc\": [\"query\", \"token\"],\n-                    \"msg\": \"field required\",\n-                    \"type\": \"value_error.missing\",\n-                },\n-            ]\n-        }\n-    )\n-\n-\n-def test_users_token_monica_with_no_jessica(client: TestClient):\n-    response = client.get(\"/users?token=monica\")\n-    assert response.status_code == 400\n-    assert response.json() == {\"detail\": \"No Jessica token provided\"}\n-\n-\n-def test_items_token_jessica(client: TestClient):\n-    response = client.get(\n-        \"/items?token=jessica\", headers={\"X-Token\": \"fake-super-secret-token\"}\n-    )\n-    assert response.status_code == 200\n-    assert response.json() == {\n-        \"plumbus\": {\"name\": \"Plumbus\"},\n-        \"gun\": {\"name\": \"Portal Gun\"},\n-    }\n-\n-\n-def test_items_with_no_token_jessica(client: TestClient):\n-    response = client.get(\"/items\", headers={\"X-Token\": \"fake-super-secret-token\"})\n-    assert response.status_code == 422\n-    assert response.json() == IsDict(\n-        {\n-            \"detail\": [\n-                {\n-                    \"type\": \"missing\",\n-                    \"loc\": [\"query\", \"token\"],\n-                    \"msg\": \"Field required\",\n-                    \"input\": None,\n-                }\n-            ]\n-        }\n-    ) | IsDict(\n-        # TODO: remove when deprecating Pydantic v1\n-        {\n-            \"detail\": [\n-                {\n-                    \"loc\": [\"query\", \"token\"],\n-                    \"msg\": \"field required\",\n-                    \"type\": \"value_error.missing\",\n-                },\n-            ]\n-        }\n-    )\n-\n-\n-def test_items_plumbus_token_jessica(client: TestClient):\n-    response = client.get(\n-        \"/items/plumbus?token=jessica\", headers={\"X-Token\": \"fake-super-secret-token\"}\n-    )\n-    assert response.status_code == 200\n-    assert response.json() == {\"name\": \"Plumbus\", \"item_id\": \"plumbus\"}\n-\n-\n-def test_items_bar_token_jessica(client: TestClient):\n-    response = client.get(\n-        \"/items/bar?token=jessica\", headers={\"X-Token\": \"fake-super-secret-token\"}\n-    )\n-    assert response.status_code == 404\n-    assert response.json() == {\"detail\": \"Item not found\"}\n-\n-\n-def test_items_plumbus_with_no_token(client: TestClient):\n-    response = client.get(\n-        \"/items/plumbus\", headers={\"X-Token\": \"fake-super-secret-token\"}\n-    )\n-    assert response.status_code == 422\n-    assert response.json() == IsDict(\n-        {\n-            \"detail\": [\n-                {\n-                    \"type\": \"missing\",\n-                    \"loc\": [\"query\", \"token\"],\n-                    \"msg\": \"Field required\",\n-                    \"input\": None,\n-                }\n-            ]\n-        }\n-    ) | IsDict(\n-        # TODO: remove when deprecating Pydantic v1\n-        {\n-            \"detail\": [\n-                {\n-                    \"loc\": [\"query\", \"token\"],\n-                    \"msg\": \"field required\",\n-                    \"type\": \"value_error.missing\",\n-                },\n-            ]\n-        }\n-    )\n-\n-\n-def test_items_with_invalid_token(client: TestClient):\n-    response = client.get(\"/items?token=jessica\", headers={\"X-Token\": \"invalid\"})\n-    assert response.status_code == 400\n-    assert response.json() == {\"detail\": \"X-Token header invalid\"}\n-\n-\n-def test_items_bar_with_invalid_token(client: TestClient):\n-    response = client.get(\"/items/bar?token=jessica\", headers={\"X-Token\": \"invalid\"})\n-    assert response.status_code == 400\n-    assert response.json() == {\"detail\": \"X-Token header invalid\"}\n-\n-\n-def test_items_with_missing_x_token_header(client: TestClient):\n-    response = client.get(\"/items?token=jessica\")\n-    assert response.status_code == 422\n-    assert response.json() == IsDict(\n-        {\n-            \"detail\": [\n-                {\n-                    \"type\": \"missing\",\n-                    \"loc\": [\"header\", \"x-token\"],\n-                    \"msg\": \"Field required\",\n-                    \"input\": None,\n-                }\n-            ]\n-        }\n-    ) | IsDict(\n-        # TODO: remove when deprecating Pydantic v1\n-        {\n-            \"detail\": [\n-                {\n-                    \"loc\": [\"header\", \"x-token\"],\n-                    \"msg\": \"field required\",\n-                    \"type\": \"value_error.missing\",\n-                }\n-            ]\n-        }\n-    )\n-\n-\n-def test_items_plumbus_with_missing_x_token_header(client: TestClient):\n-    response = client.get(\"/items/plumbus?token=jessica\")\n-    assert response.status_code == 422\n-    assert response.json() == IsDict(\n-        {\n-            \"detail\": [\n-                {\n-                    \"type\": \"missing\",\n-                    \"loc\": [\"header\", \"x-token\"],\n-                    \"msg\": \"Field required\",\n-                    \"input\": None,\n-                }\n-            ]\n-        }\n-    ) | IsDict(\n-        # TODO: remove when deprecating Pydantic v1\n-        {\n-            \"detail\": [\n-                {\n-                    \"loc\": [\"header\", \"x-token\"],\n-                    \"msg\": \"field required\",\n-                    \"type\": \"value_error.missing\",\n-                }\n-            ]\n-        }\n-    )\n-\n-\n-def test_root_token_jessica(client: TestClient):\n-    response = client.get(\"/?token=jessica\")\n-    assert response.status_code == 200\n-    assert response.json() == {\"message\": \"Hello Bigger Applications!\"}\n-\n-\n-def test_root_with_no_token(client: TestClient):\n-    response = client.get(\"/\")\n-    assert response.status_code == 422\n-    assert response.json() == IsDict(\n-        {\n-            \"detail\": [\n-                {\n-                    \"type\": \"missing\",\n-                    \"loc\": [\"query\", \"token\"],\n-                    \"msg\": \"Field required\",\n-                    \"input\": None,\n-                }\n-            ]\n-        }\n-    ) | IsDict(\n-        # TODO: remove when deprecating Pydantic v1\n-        {\n-            \"detail\": [\n-                {\n-                    \"loc\": [\"query\", \"token\"],\n-                    \"msg\": \"field required\",\n-                    \"type\": \"value_error.missing\",\n-                },\n-            ]\n-        }\n-    )\n-\n-\n-def test_put_no_header(client: TestClient):\n-    response = client.put(\"/items/foo\")\n-    assert response.status_code == 422, response.text\n-    assert response.json() == IsDict(\n-        {\n-            \"detail\": [\n-                {\n-                    \"type\": \"missing\",\n-                    \"loc\": [\"query\", \"token\"],\n-                    \"msg\": \"Field required\",\n-                    \"input\": None,\n-                },\n-                {\n-                    \"type\": \"missing\",\n-                    \"loc\": [\"header\", \"x-token\"],\n-                    \"msg\": \"Field required\",\n-                    \"input\": None,\n-                },\n-            ]\n-        }\n-    ) | IsDict(\n-        # TODO: remove when deprecating Pydantic v1\n-        {\n-            \"detail\": [\n-                {\n-                    \"loc\": [\"query\", \"token\"],\n-                    \"msg\": \"field required\",\n-                    \"type\": \"value_error.missing\",\n-                },\n-                {\n-                    \"loc\": [\"header\", \"x-token\"],\n-                    \"msg\": \"field required\",\n-                    \"type\": \"value_error.missing\",\n-                },\n-            ]\n-        }\n-    )\n-\n-\n-def test_put_invalid_header(client: TestClient):\n-    response = client.put(\"/items/foo\", headers={\"X-Token\": \"invalid\"})\n-    assert response.status_code == 400, response.text\n-    assert response.json() == {\"detail\": \"X-Token header invalid\"}\n-\n-\n-def test_put(client: TestClient):\n-    response = client.put(\n-        \"/items/plumbus?token=jessica\", headers={\"X-Token\": \"fake-super-secret-token\"}\n-    )\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"item_id\": \"plumbus\", \"name\": \"The great Plumbus\"}\n-\n-\n-def test_put_forbidden(client: TestClient):\n-    response = client.put(\n-        \"/items/bar?token=jessica\", headers={\"X-Token\": \"fake-super-secret-token\"}\n-    )\n-    assert response.status_code == 403, response.text\n-    assert response.json() == {\"detail\": \"You can only update the item: plumbus\"}\n-\n-\n-def test_admin(client: TestClient):\n-    response = client.post(\n-        \"/admin/?token=jessica\", headers={\"X-Token\": \"fake-super-secret-token\"}\n-    )\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"message\": \"Admin getting schwifty\"}\n-\n-\n-def test_admin_invalid_header(client: TestClient):\n-    response = client.post(\"/admin/\", headers={\"X-Token\": \"invalid\"})\n-    assert response.status_code == 400, response.text\n-    assert response.json() == {\"detail\": \"X-Token header invalid\"}\n-\n-\n-def test_openapi_schema(client: TestClient):\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\n-        \"openapi\": \"3.1.0\",\n-        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n-        \"paths\": {\n-            \"/users/\": {\n-                \"get\": {\n-                    \"tags\": [\"users\"],\n-                    \"summary\": \"Read Users\",\n-                    \"operationId\": \"read_users_users__get\",\n-                    \"parameters\": [\n-                        {\n-                            \"required\": True,\n-                            \"schema\": {\"title\": \"Token\", \"type\": \"string\"},\n-                            \"name\": \"token\",\n-                            \"in\": \"query\",\n-                        }\n-                    ],\n-                    \"responses\": {\n-                        \"200\": {\n-                            \"description\": \"Successful Response\",\n-                            \"content\": {\"application/json\": {\"schema\": {}}},\n-                        },\n-                        \"422\": {\n-                            \"description\": \"Validation Error\",\n-                            \"content\": {\n-                                \"application/json\": {\n-                                    \"schema\": {\n-                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n-                                    }\n-                                }\n-                            },\n-                        },\n-                    },\n-                }\n-            },\n-            \"/users/me\": {\n-                \"get\": {\n-                    \"tags\": [\"users\"],\n-                    \"summary\": \"Read User Me\",\n-                    \"operationId\": \"read_user_me_users_me_get\",\n-                    \"parameters\": [\n-                        {\n-                            \"required\": True,\n-                            \"schema\": {\"title\": \"Token\", \"type\": \"string\"},\n-                            \"name\": \"token\",\n-                            \"in\": \"query\",\n-                        }\n-                    ],\n-                    \"responses\": {\n-                        \"200\": {\n-                            \"description\": \"Successful Response\",\n-                            \"content\": {\"application/json\": {\"schema\": {}}},\n-                        },\n-                        \"422\": {\n-                            \"description\": \"Validation Error\",\n-                            \"content\": {\n-                                \"application/json\": {\n-                                    \"schema\": {\n-                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n-                                    }\n-                                }\n-                            },\n-                        },\n-                    },\n-                }\n-            },\n-            \"/users/{username}\": {\n-                \"get\": {\n-                    \"tags\": [\"users\"],\n-                    \"summary\": \"Read User\",\n-                    \"operationId\": \"read_user_users__username__get\",\n-                    \"parameters\": [\n-                        {\n-                            \"required\": True,\n-                            \"schema\": {\"title\": \"Username\", \"type\": \"string\"},\n-                            \"name\": \"username\",\n-                            \"in\": \"path\",\n-                        },\n-                        {\n-                            \"required\": True,\n-                            \"schema\": {\"title\": \"Token\", \"type\": \"string\"},\n-                            \"name\": \"token\",\n-                            \"in\": \"query\",\n-                        },\n-                    ],\n-                    \"responses\": {\n-                        \"200\": {\n-                            \"description\": \"Successful Response\",\n-                            \"content\": {\"application/json\": {\"schema\": {}}},\n-                        },\n-                        \"422\": {\n-                            \"description\": \"Validation Error\",\n-                            \"content\": {\n-                                \"application/json\": {\n-                                    \"schema\": {\n-                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n-                                    }\n-                                }\n-                            },\n-                        },\n-                    },\n-                }\n-            },\n-            \"/items/\": {\n-                \"get\": {\n-                    \"tags\": [\"items\"],\n-                    \"summary\": \"Read Items\",\n-                    \"operationId\": \"read_items_items__get\",\n-                    \"parameters\": [\n-                        {\n-                            \"required\": True,\n-                            \"schema\": {\"title\": \"Token\", \"type\": \"string\"},\n-                            \"name\": \"token\",\n-                            \"in\": \"query\",\n-                        },\n-                        {\n-                            \"required\": True,\n-                            \"schema\": {\"title\": \"X-Token\", \"type\": \"string\"},\n-                            \"name\": \"x-token\",\n-                            \"in\": \"header\",\n-                        },\n-                    ],\n-                    \"responses\": {\n-                        \"200\": {\n-                            \"description\": \"Successful Response\",\n-                            \"content\": {\"application/json\": {\"schema\": {}}},\n-                        },\n-                        \"404\": {\"description\": \"Not found\"},\n-                        \"422\": {\n-                            \"description\": \"Validation Error\",\n-                            \"content\": {\n-                                \"application/json\": {\n-                                    \"schema\": {\n-                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n-                                    }\n-                                }\n-                            },\n-                        },\n-                    },\n-                }\n-            },\n-            \"/items/{item_id}\": {\n-                \"get\": {\n-                    \"tags\": [\"items\"],\n-                    \"summary\": \"Read Item\",\n-                    \"operationId\": \"read_item_items__item_id__get\",\n-                    \"parameters\": [\n-                        {\n-                            \"required\": True,\n-                            \"schema\": {\"title\": \"Item Id\", \"type\": \"string\"},\n-                            \"name\": \"item_id\",\n-                            \"in\": \"path\",\n-                        },\n-                        {\n-                            \"required\": True,\n-                            \"schema\": {\"title\": \"Token\", \"type\": \"string\"},\n-                            \"name\": \"token\",\n-                            \"in\": \"query\",\n-                        },\n-                        {\n-                            \"required\": True,\n-                            \"schema\": {\"title\": \"X-Token\", \"type\": \"string\"},\n-                            \"name\": \"x-token\",\n-                            \"in\": \"header\",\n-                        },\n-                    ],\n-                    \"responses\": {\n-                        \"200\": {\n-                            \"description\": \"Successful Response\",\n-                            \"content\": {\"application/json\": {\"schema\": {}}},\n-                        },\n-                        \"404\": {\"description\": \"Not found\"},\n-                        \"422\": {\n-                            \"description\": \"Validation Error\",\n-                            \"content\": {\n-                                \"application/json\": {\n-                                    \"schema\": {\n-                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n-                                    }\n-                                }\n-                            },\n-                        },\n-                    },\n-                },\n-                \"put\": {\n-                    \"tags\": [\"items\", \"custom\"],\n-                    \"summary\": \"Update Item\",\n-                    \"operationId\": \"update_item_items__item_id__put\",\n-                    \"parameters\": [\n-                        {\n-                            \"required\": True,\n-                            \"schema\": {\"title\": \"Item Id\", \"type\": \"string\"},\n-                            \"name\": \"item_id\",\n-                            \"in\": \"path\",\n-                        },\n-                        {\n-                            \"required\": True,\n-                            \"schema\": {\"title\": \"Token\", \"type\": \"string\"},\n-                            \"name\": \"token\",\n-                            \"in\": \"query\",\n-                        },\n-                        {\n-                            \"required\": True,\n-                            \"schema\": {\"title\": \"X-Token\", \"type\": \"string\"},\n-                            \"name\": \"x-token\",\n-                            \"in\": \"header\",\n-                        },\n-                    ],\n-                    \"responses\": {\n-                        \"200\": {\n-                            \"description\": \"Successful Response\",\n-                            \"content\": {\"application/json\": {\"schema\": {}}},\n-                        },\n-                        \"404\": {\"description\": \"Not found\"},\n-                        \"403\": {\"description\": \"Operation forbidden\"},\n-                        \"422\": {\n-                            \"description\": \"Validation Error\",\n-                            \"content\": {\n-                                \"application/json\": {\n-                                    \"schema\": {\n-                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n-                                    }\n-                                }\n-                            },\n-                        },\n-                    },\n-                },\n-            },\n-            \"/admin/\": {\n-                \"post\": {\n-                    \"tags\": [\"admin\"],\n-                    \"summary\": \"Update Admin\",\n-                    \"operationId\": \"update_admin_admin__post\",\n-                    \"parameters\": [\n-                        {\n-                            \"required\": True,\n-                            \"schema\": {\"title\": \"Token\", \"type\": \"string\"},\n-                            \"name\": \"token\",\n-                            \"in\": \"query\",\n-                        },\n-                        {\n-                            \"required\": True,\n-                            \"schema\": {\"title\": \"X-Token\", \"type\": \"string\"},\n-                            \"name\": \"x-token\",\n-                            \"in\": \"header\",\n-                        },\n-                    ],\n-                    \"responses\": {\n-                        \"200\": {\n-                            \"description\": \"Successful Response\",\n-                            \"content\": {\"application/json\": {\"schema\": {}}},\n-                        },\n-                        \"418\": {\"description\": \"I'm a teapot\"},\n-                        \"422\": {\n-                            \"description\": \"Validation Error\",\n-                            \"content\": {\n-                                \"application/json\": {\n-                                    \"schema\": {\n-                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n-                                    }\n-                                }\n-                            },\n-                        },\n-                    },\n-                }\n-            },\n-            \"/\": {\n-                \"get\": {\n-                    \"summary\": \"Root\",\n-                    \"operationId\": \"root__get\",\n-                    \"parameters\": [\n-                        {\n-                            \"required\": True,\n-                            \"schema\": {\"title\": \"Token\", \"type\": \"string\"},\n-                            \"name\": \"token\",\n-                            \"in\": \"query\",\n-                        }\n-                    ],\n-                    \"responses\": {\n-                        \"200\": {\n-                            \"description\": \"Successful Response\",\n-                            \"content\": {\"application/json\": {\"schema\": {}}},\n-                        },\n-                        \"422\": {\n-                            \"description\": \"Validation Error\",\n-                            \"content\": {\n-                                \"application/json\": {\n-                                    \"schema\": {\n-                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n-                                    }\n-                                }\n-                            },\n-                        },\n-                    },\n-                }\n-            },\n-        },\n-        \"components\": {\n-            \"schemas\": {\n-                \"HTTPValidationError\": {\n-                    \"title\": \"HTTPValidationError\",\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"detail\": {\n-                            \"title\": \"Detail\",\n-                            \"type\": \"array\",\n-                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n-                        }\n-                    },\n-                },\n-                \"ValidationError\": {\n-                    \"title\": \"ValidationError\",\n-                    \"required\": [\"loc\", \"msg\", \"type\"],\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"loc\": {\n-                            \"title\": \"Location\",\n-                            \"type\": \"array\",\n-                            \"items\": {\n-                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n-                            },\n-                        },\n-                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n-                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n-                    },\n-                },\n-            }\n-        },\n-    }\n\n@@ -1,742 +0,0 @@\n-import pytest\n-from dirty_equals import IsDict\n-from fastapi.testclient import TestClient\n-\n-from ...utils import needs_py39\n-\n-\n-@pytest.fixture(name=\"client\")\n-def get_client():\n-    from docs_src.bigger_applications.app_an_py39.main import app\n-\n-    client = TestClient(app)\n-    return client\n-\n-\n-@needs_py39\n-def test_users_token_jessica(client: TestClient):\n-    response = client.get(\"/users?token=jessica\")\n-    assert response.status_code == 200\n-    assert response.json() == [{\"username\": \"Rick\"}, {\"username\": \"Morty\"}]\n-\n-\n-@needs_py39\n-def test_users_with_no_token(client: TestClient):\n-    response = client.get(\"/users\")\n-    assert response.status_code == 422\n-    assert response.json() == IsDict(\n-        {\n-            \"detail\": [\n-                {\n-                    \"type\": \"missing\",\n-                    \"loc\": [\"query\", \"token\"],\n-                    \"msg\": \"Field required\",\n-                    \"input\": None,\n-                }\n-            ]\n-        }\n-    ) | IsDict(\n-        # TODO: remove when deprecating Pydantic v1\n-        {\n-            \"detail\": [\n-                {\n-                    \"loc\": [\"query\", \"token\"],\n-                    \"msg\": \"field required\",\n-                    \"type\": \"value_error.missing\",\n-                },\n-            ]\n-        }\n-    )\n-\n-\n-@needs_py39\n-def test_users_foo_token_jessica(client: TestClient):\n-    response = client.get(\"/users/foo?token=jessica\")\n-    assert response.status_code == 200\n-    assert response.json() == {\"username\": \"foo\"}\n-\n-\n-@needs_py39\n-def test_users_foo_with_no_token(client: TestClient):\n-    response = client.get(\"/users/foo\")\n-    assert response.status_code == 422\n-    assert response.json() == IsDict(\n-        {\n-            \"detail\": [\n-                {\n-                    \"type\": \"missing\",\n-                    \"loc\": [\"query\", \"token\"],\n-                    \"msg\": \"Field required\",\n-                    \"input\": None,\n-                }\n-            ]\n-        }\n-    ) | IsDict(\n-        # TODO: remove when deprecating Pydantic v1\n-        {\n-            \"detail\": [\n-                {\n-                    \"loc\": [\"query\", \"token\"],\n-                    \"msg\": \"field required\",\n-                    \"type\": \"value_error.missing\",\n-                },\n-            ]\n-        }\n-    )\n-\n-\n-@needs_py39\n-def test_users_me_token_jessica(client: TestClient):\n-    response = client.get(\"/users/me?token=jessica\")\n-    assert response.status_code == 200\n-    assert response.json() == {\"username\": \"fakecurrentuser\"}\n-\n-\n-@needs_py39\n-def test_users_me_with_no_token(client: TestClient):\n-    response = client.get(\"/users/me\")\n-    assert response.status_code == 422\n-    assert response.json() == IsDict(\n-        {\n-            \"detail\": [\n-                {\n-                    \"type\": \"missing\",\n-                    \"loc\": [\"query\", \"token\"],\n-                    \"msg\": \"Field required\",\n-                    \"input\": None,\n-                }\n-            ]\n-        }\n-    ) | IsDict(\n-        # TODO: remove when deprecating Pydantic v1\n-        {\n-            \"detail\": [\n-                {\n-                    \"loc\": [\"query\", \"token\"],\n-                    \"msg\": \"field required\",\n-                    \"type\": \"value_error.missing\",\n-                },\n-            ]\n-        }\n-    )\n-\n-\n-@needs_py39\n-def test_users_token_monica_with_no_jessica(client: TestClient):\n-    response = client.get(\"/users?token=monica\")\n-    assert response.status_code == 400\n-    assert response.json() == {\"detail\": \"No Jessica token provided\"}\n-\n-\n-@needs_py39\n-def test_items_token_jessica(client: TestClient):\n-    response = client.get(\n-        \"/items?token=jessica\", headers={\"X-Token\": \"fake-super-secret-token\"}\n-    )\n-    assert response.status_code == 200\n-    assert response.json() == {\n-        \"plumbus\": {\"name\": \"Plumbus\"},\n-        \"gun\": {\"name\": \"Portal Gun\"},\n-    }\n-\n-\n-@needs_py39\n-def test_items_with_no_token_jessica(client: TestClient):\n-    response = client.get(\"/items\", headers={\"X-Token\": \"fake-super-secret-token\"})\n-    assert response.status_code == 422\n-    assert response.json() == IsDict(\n-        {\n-            \"detail\": [\n-                {\n-                    \"type\": \"missing\",\n-                    \"loc\": [\"query\", \"token\"],\n-                    \"msg\": \"Field required\",\n-                    \"input\": None,\n-                }\n-            ]\n-        }\n-    ) | IsDict(\n-        # TODO: remove when deprecating Pydantic v1\n-        {\n-            \"detail\": [\n-                {\n-                    \"loc\": [\"query\", \"token\"],\n-                    \"msg\": \"field required\",\n-                    \"type\": \"value_error.missing\",\n-                },\n-            ]\n-        }\n-    )\n-\n-\n-@needs_py39\n-def test_items_plumbus_token_jessica(client: TestClient):\n-    response = client.get(\n-        \"/items/plumbus?token=jessica\", headers={\"X-Token\": \"fake-super-secret-token\"}\n-    )\n-    assert response.status_code == 200\n-    assert response.json() == {\"name\": \"Plumbus\", \"item_id\": \"plumbus\"}\n-\n-\n-@needs_py39\n-def test_items_bar_token_jessica(client: TestClient):\n-    response = client.get(\n-        \"/items/bar?token=jessica\", headers={\"X-Token\": \"fake-super-secret-token\"}\n-    )\n-    assert response.status_code == 404\n-    assert response.json() == {\"detail\": \"Item not found\"}\n-\n-\n-@needs_py39\n-def test_items_plumbus_with_no_token(client: TestClient):\n-    response = client.get(\n-        \"/items/plumbus\", headers={\"X-Token\": \"fake-super-secret-token\"}\n-    )\n-    assert response.status_code == 422\n-    assert response.json() == IsDict(\n-        {\n-            \"detail\": [\n-                {\n-                    \"type\": \"missing\",\n-                    \"loc\": [\"query\", \"token\"],\n-                    \"msg\": \"Field required\",\n-                    \"input\": None,\n-                }\n-            ]\n-        }\n-    ) | IsDict(\n-        # TODO: remove when deprecating Pydantic v1\n-        {\n-            \"detail\": [\n-                {\n-                    \"loc\": [\"query\", \"token\"],\n-                    \"msg\": \"field required\",\n-                    \"type\": \"value_error.missing\",\n-                },\n-            ]\n-        }\n-    )\n-\n-\n-@needs_py39\n-def test_items_with_invalid_token(client: TestClient):\n-    response = client.get(\"/items?token=jessica\", headers={\"X-Token\": \"invalid\"})\n-    assert response.status_code == 400\n-    assert response.json() == {\"detail\": \"X-Token header invalid\"}\n-\n-\n-@needs_py39\n-def test_items_bar_with_invalid_token(client: TestClient):\n-    response = client.get(\"/items/bar?token=jessica\", headers={\"X-Token\": \"invalid\"})\n-    assert response.status_code == 400\n-    assert response.json() == {\"detail\": \"X-Token header invalid\"}\n-\n-\n-@needs_py39\n-def test_items_with_missing_x_token_header(client: TestClient):\n-    response = client.get(\"/items?token=jessica\")\n-    assert response.status_code == 422\n-    assert response.json() == IsDict(\n-        {\n-            \"detail\": [\n-                {\n-                    \"type\": \"missing\",\n-                    \"loc\": [\"header\", \"x-token\"],\n-                    \"msg\": \"Field required\",\n-                    \"input\": None,\n-                }\n-            ]\n-        }\n-    ) | IsDict(\n-        # TODO: remove when deprecating Pydantic v1\n-        {\n-            \"detail\": [\n-                {\n-                    \"loc\": [\"header\", \"x-token\"],\n-                    \"msg\": \"field required\",\n-                    \"type\": \"value_error.missing\",\n-                }\n-            ]\n-        }\n-    )\n-\n-\n-@needs_py39\n-def test_items_plumbus_with_missing_x_token_header(client: TestClient):\n-    response = client.get(\"/items/plumbus?token=jessica\")\n-    assert response.status_code == 422\n-    assert response.json() == IsDict(\n-        {\n-            \"detail\": [\n-                {\n-                    \"type\": \"missing\",\n-                    \"loc\": [\"header\", \"x-token\"],\n-                    \"msg\": \"Field required\",\n-                    \"input\": None,\n-                }\n-            ]\n-        }\n-    ) | IsDict(\n-        # TODO: remove when deprecating Pydantic v1\n-        {\n-            \"detail\": [\n-                {\n-                    \"loc\": [\"header\", \"x-token\"],\n-                    \"msg\": \"field required\",\n-                    \"type\": \"value_error.missing\",\n-                }\n-            ]\n-        }\n-    )\n-\n-\n-@needs_py39\n-def test_root_token_jessica(client: TestClient):\n-    response = client.get(\"/?token=jessica\")\n-    assert response.status_code == 200\n-    assert response.json() == {\"message\": \"Hello Bigger Applications!\"}\n-\n-\n-@needs_py39\n-def test_root_with_no_token(client: TestClient):\n-    response = client.get(\"/\")\n-    assert response.status_code == 422\n-    assert response.json() == IsDict(\n-        {\n-            \"detail\": [\n-                {\n-                    \"type\": \"missing\",\n-                    \"loc\": [\"query\", \"token\"],\n-                    \"msg\": \"Field required\",\n-                    \"input\": None,\n-                }\n-            ]\n-        }\n-    ) | IsDict(\n-        # TODO: remove when deprecating Pydantic v1\n-        {\n-            \"detail\": [\n-                {\n-                    \"loc\": [\"query\", \"token\"],\n-                    \"msg\": \"field required\",\n-                    \"type\": \"value_error.missing\",\n-                },\n-            ]\n-        }\n-    )\n-\n-\n-@needs_py39\n-def test_put_no_header(client: TestClient):\n-    response = client.put(\"/items/foo\")\n-    assert response.status_code == 422, response.text\n-    assert response.json() == IsDict(\n-        {\n-            \"detail\": [\n-                {\n-                    \"type\": \"missing\",\n-                    \"loc\": [\"query\", \"token\"],\n-                    \"msg\": \"Field required\",\n-                    \"input\": None,\n-                },\n-                {\n-                    \"type\": \"missing\",\n-                    \"loc\": [\"header\", \"x-token\"],\n-                    \"msg\": \"Field required\",\n-                    \"input\": None,\n-                },\n-            ]\n-        }\n-    ) | IsDict(\n-        # TODO: remove when deprecating Pydantic v1\n-        {\n-            \"detail\": [\n-                {\n-                    \"loc\": [\"query\", \"token\"],\n-                    \"msg\": \"field required\",\n-                    \"type\": \"value_error.missing\",\n-                },\n-                {\n-                    \"loc\": [\"header\", \"x-token\"],\n-                    \"msg\": \"field required\",\n-                    \"type\": \"value_error.missing\",\n-                },\n-            ]\n-        }\n-    )\n-\n-\n-@needs_py39\n-def test_put_invalid_header(client: TestClient):\n-    response = client.put(\"/items/foo\", headers={\"X-Token\": \"invalid\"})\n-    assert response.status_code == 400, response.text\n-    assert response.json() == {\"detail\": \"X-Token header invalid\"}\n-\n-\n-@needs_py39\n-def test_put(client: TestClient):\n-    response = client.put(\n-        \"/items/plumbus?token=jessica\", headers={\"X-Token\": \"fake-super-secret-token\"}\n-    )\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"item_id\": \"plumbus\", \"name\": \"The great Plumbus\"}\n-\n-\n-@needs_py39\n-def test_put_forbidden(client: TestClient):\n-    response = client.put(\n-        \"/items/bar?token=jessica\", headers={\"X-Token\": \"fake-super-secret-token\"}\n-    )\n-    assert response.status_code == 403, response.text\n-    assert response.json() == {\"detail\": \"You can only update the item: plumbus\"}\n-\n-\n-@needs_py39\n-def test_admin(client: TestClient):\n-    response = client.post(\n-        \"/admin/?token=jessica\", headers={\"X-Token\": \"fake-super-secret-token\"}\n-    )\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\"message\": \"Admin getting schwifty\"}\n-\n-\n-@needs_py39\n-def test_admin_invalid_header(client: TestClient):\n-    response = client.post(\"/admin/\", headers={\"X-Token\": \"invalid\"})\n-    assert response.status_code == 400, response.text\n-    assert response.json() == {\"detail\": \"X-Token header invalid\"}\n-\n-\n-@needs_py39\n-def test_openapi_schema(client: TestClient):\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\n-        \"openapi\": \"3.1.0\",\n-        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n-        \"paths\": {\n-            \"/users/\": {\n-                \"get\": {\n-                    \"tags\": [\"users\"],\n-                    \"summary\": \"Read Users\",\n-                    \"operationId\": \"read_users_users__get\",\n-                    \"parameters\": [\n-                        {\n-                            \"required\": True,\n-                            \"schema\": {\"title\": \"Token\", \"type\": \"string\"},\n-                            \"name\": \"token\",\n-                            \"in\": \"query\",\n-                        }\n-                    ],\n-                    \"responses\": {\n-                        \"200\": {\n-                            \"description\": \"Successful Response\",\n-                            \"content\": {\"application/json\": {\"schema\": {}}},\n-                        },\n-                        \"422\": {\n-                            \"description\": \"Validation Error\",\n-                            \"content\": {\n-                                \"application/json\": {\n-                                    \"schema\": {\n-                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n-                                    }\n-                                }\n-                            },\n-                        },\n-                    },\n-                }\n-            },\n-            \"/users/me\": {\n-                \"get\": {\n-                    \"tags\": [\"users\"],\n-                    \"summary\": \"Read User Me\",\n-                    \"operationId\": \"read_user_me_users_me_get\",\n-                    \"parameters\": [\n-                        {\n-                            \"required\": True,\n-                            \"schema\": {\"title\": \"Token\", \"type\": \"string\"},\n-                            \"name\": \"token\",\n-                            \"in\": \"query\",\n-                        }\n-                    ],\n-                    \"responses\": {\n-                        \"200\": {\n-                            \"description\": \"Successful Response\",\n-                            \"content\": {\"application/json\": {\"schema\": {}}},\n-                        },\n-                        \"422\": {\n-                            \"description\": \"Validation Error\",\n-                            \"content\": {\n-                                \"application/json\": {\n-                                    \"schema\": {\n-                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n-                                    }\n-                                }\n-                            },\n-                        },\n-                    },\n-                }\n-            },\n-            \"/users/{username}\": {\n-                \"get\": {\n-                    \"tags\": [\"users\"],\n-                    \"summary\": \"Read User\",\n-                    \"operationId\": \"read_user_users__username__get\",\n-                    \"parameters\": [\n-                        {\n-                            \"required\": True,\n-                            \"schema\": {\"title\": \"Username\", \"type\": \"string\"},\n-                            \"name\": \"username\",\n-                            \"in\": \"path\",\n-                        },\n-                        {\n-                            \"required\": True,\n-                            \"schema\": {\"title\": \"Token\", \"type\": \"string\"},\n-                            \"name\": \"token\",\n-                            \"in\": \"query\",\n-                        },\n-                    ],\n-                    \"responses\": {\n-                        \"200\": {\n-                            \"description\": \"Successful Response\",\n-                            \"content\": {\"application/json\": {\"schema\": {}}},\n-                        },\n-                        \"422\": {\n-                            \"description\": \"Validation Error\",\n-                            \"content\": {\n-                                \"application/json\": {\n-                                    \"schema\": {\n-                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n-                                    }\n-                                }\n-                            },\n-                        },\n-                    },\n-                }\n-            },\n-            \"/items/\": {\n-                \"get\": {\n-                    \"tags\": [\"items\"],\n-                    \"summary\": \"Read Items\",\n-                    \"operationId\": \"read_items_items__get\",\n-                    \"parameters\": [\n-                        {\n-                            \"required\": True,\n-                            \"schema\": {\"title\": \"Token\", \"type\": \"string\"},\n-                            \"name\": \"token\",\n-                            \"in\": \"query\",\n-                        },\n-                        {\n-                            \"required\": True,\n-                            \"schema\": {\"title\": \"X-Token\", \"type\": \"string\"},\n-                            \"name\": \"x-token\",\n-                            \"in\": \"header\",\n-                        },\n-                    ],\n-                    \"responses\": {\n-                        \"200\": {\n-                            \"description\": \"Successful Response\",\n-                            \"content\": {\"application/json\": {\"schema\": {}}},\n-                        },\n-                        \"404\": {\"description\": \"Not found\"},\n-                        \"422\": {\n-                            \"description\": \"Validation Error\",\n-                            \"content\": {\n-                                \"application/json\": {\n-                                    \"schema\": {\n-                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n-                                    }\n-                                }\n-                            },\n-                        },\n-                    },\n-                }\n-            },\n-            \"/items/{item_id}\": {\n-                \"get\": {\n-                    \"tags\": [\"items\"],\n-                    \"summary\": \"Read Item\",\n-                    \"operationId\": \"read_item_items__item_id__get\",\n-                    \"parameters\": [\n-                        {\n-                            \"required\": True,\n-                            \"schema\": {\"title\": \"Item Id\", \"type\": \"string\"},\n-                            \"name\": \"item_id\",\n-                            \"in\": \"path\",\n-                        },\n-                        {\n-                            \"required\": True,\n-                            \"schema\": {\"title\": \"Token\", \"type\": \"string\"},\n-                            \"name\": \"token\",\n-                            \"in\": \"query\",\n-                        },\n-                        {\n-                            \"required\": True,\n-                            \"schema\": {\"title\": \"X-Token\", \"type\": \"string\"},\n-                            \"name\": \"x-token\",\n-                            \"in\": \"header\",\n-                        },\n-                    ],\n-                    \"responses\": {\n-                        \"200\": {\n-                            \"description\": \"Successful Response\",\n-                            \"content\": {\"application/json\": {\"schema\": {}}},\n-                        },\n-                        \"404\": {\"description\": \"Not found\"},\n-                        \"422\": {\n-                            \"description\": \"Validation Error\",\n-                            \"content\": {\n-                                \"application/json\": {\n-                                    \"schema\": {\n-                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n-                                    }\n-                                }\n-                            },\n-                        },\n-                    },\n-                },\n-                \"put\": {\n-                    \"tags\": [\"items\", \"custom\"],\n-                    \"summary\": \"Update Item\",\n-                    \"operationId\": \"update_item_items__item_id__put\",\n-                    \"parameters\": [\n-                        {\n-                            \"required\": True,\n-                            \"schema\": {\"title\": \"Item Id\", \"type\": \"string\"},\n-                            \"name\": \"item_id\",\n-                            \"in\": \"path\",\n-                        },\n-                        {\n-                            \"required\": True,\n-                            \"schema\": {\"title\": \"Token\", \"type\": \"string\"},\n-                            \"name\": \"token\",\n-                            \"in\": \"query\",\n-                        },\n-                        {\n-                            \"required\": True,\n-                            \"schema\": {\"title\": \"X-Token\", \"type\": \"string\"},\n-                            \"name\": \"x-token\",\n-                            \"in\": \"header\",\n-                        },\n-                    ],\n-                    \"responses\": {\n-                        \"200\": {\n-                            \"description\": \"Successful Response\",\n-                            \"content\": {\"application/json\": {\"schema\": {}}},\n-                        },\n-                        \"404\": {\"description\": \"Not found\"},\n-                        \"403\": {\"description\": \"Operation forbidden\"},\n-                        \"422\": {\n-                            \"description\": \"Validation Error\",\n-                            \"content\": {\n-                                \"application/json\": {\n-                                    \"schema\": {\n-                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n-                                    }\n-                                }\n-                            },\n-                        },\n-                    },\n-                },\n-            },\n-            \"/admin/\": {\n-                \"post\": {\n-                    \"tags\": [\"admin\"],\n-                    \"summary\": \"Update Admin\",\n-                    \"operationId\": \"update_admin_admin__post\",\n-                    \"parameters\": [\n-                        {\n-                            \"required\": True,\n-                            \"schema\": {\"title\": \"Token\", \"type\": \"string\"},\n-                            \"name\": \"token\",\n-                            \"in\": \"query\",\n-                        },\n-                        {\n-                            \"required\": True,\n-                            \"schema\": {\"title\": \"X-Token\", \"type\": \"string\"},\n-                            \"name\": \"x-token\",\n-                            \"in\": \"header\",\n-                        },\n-                    ],\n-                    \"responses\": {\n-                        \"200\": {\n-                            \"description\": \"Successful Response\",\n-                            \"content\": {\"application/json\": {\"schema\": {}}},\n-                        },\n-                        \"418\": {\"description\": \"I'm a teapot\"},\n-                        \"422\": {\n-                            \"description\": \"Validation Error\",\n-                            \"content\": {\n-                                \"application/json\": {\n-                                    \"schema\": {\n-                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n-                                    }\n-                                }\n-                            },\n-                        },\n-                    },\n-                }\n-            },\n-            \"/\": {\n-                \"get\": {\n-                    \"summary\": \"Root\",\n-                    \"operationId\": \"root__get\",\n-                    \"parameters\": [\n-                        {\n-                            \"required\": True,\n-                            \"schema\": {\"title\": \"Token\", \"type\": \"string\"},\n-                            \"name\": \"token\",\n-                            \"in\": \"query\",\n-                        }\n-                    ],\n-                    \"responses\": {\n-                        \"200\": {\n-                            \"description\": \"Successful Response\",\n-                            \"content\": {\"application/json\": {\"schema\": {}}},\n-                        },\n-                        \"422\": {\n-                            \"description\": \"Validation Error\",\n-                            \"content\": {\n-                                \"application/json\": {\n-                                    \"schema\": {\n-                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n-                                    }\n-                                }\n-                            },\n-                        },\n-                    },\n-                }\n-            },\n-        },\n-        \"components\": {\n-            \"schemas\": {\n-                \"HTTPValidationError\": {\n-                    \"title\": \"HTTPValidationError\",\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"detail\": {\n-                            \"title\": \"Detail\",\n-                            \"type\": \"array\",\n-                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n-                        }\n-                    },\n-                },\n-                \"ValidationError\": {\n-                    \"title\": \"ValidationError\",\n-                    \"required\": [\"loc\", \"msg\", \"type\"],\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"loc\": {\n-                            \"title\": \"Location\",\n-                            \"type\": \"array\",\n-                            \"items\": {\n-                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n-                            },\n-                        },\n-                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n-                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n-                    },\n-                },\n-            }\n-        },\n-    }\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
