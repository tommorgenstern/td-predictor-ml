{"custom_id": "flask#04b90f5ad47d04bace76c18f634d54b0da4b91ce", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 208 | Contributors (this commit): 4 | Commits (past 90d): 7 | Contributors (cumulative): 4 | DMM Complexity: None\n\nDIFF:\n@@ -71,9 +71,9 @@ class run_audit(Command):\n                     if file != '__init__.py' and file.endswith('.py') :\n                         warns += flakes.checkPath(os.path.join(root, file))\n         if warns > 0:\n-            print (\"Audit finished with total %d warnings.\" % warns)\n+            print \"Audit finished with total %d warnings.\" % warns\n         else:\n-            print (\"No problems found in sourcecode.\")\n+            print \"No problems found in sourcecode.\"\n \n setup(\n     name='Flask',\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#d5e10e4685f54dde5ffc27c4f55a19fb23f7a536", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 2 | Files Changed: 2 | Hunks: 2 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 385 | Contributors (this commit): 6 | Commits (past 90d): 14 | Contributors (cumulative): 7 | DMM Complexity: None\n\nDIFF:\n@@ -10,7 +10,7 @@\n     :license: BSD, see LICENSE for more details.\n \"\"\"\n \n-__version__ = '0.8-dev'\n+__version__ = '0.8'\n \n # utilities we import from Werkzeug and Jinja2 that are unused\n # in the module but are exported as public interface.\n\n@@ -77,7 +77,7 @@ class run_audit(Command):\n \n setup(\n     name='Flask',\n-    version='0.8-dev',\n+    version='0.8',\n     url='http://github.com/mitsuhiko/flask/',\n     license='BSD',\n     author='Armin Ronacher',\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#3765cc2e9e6ea2d227f898d5b176aa50680e491c", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 2 | Files Changed: 2 | Hunks: 2 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 389 | Contributors (this commit): 6 | Commits (past 90d): 16 | Contributors (cumulative): 7 | DMM Complexity: None\n\nDIFF:\n@@ -10,7 +10,7 @@\n     :license: BSD, see LICENSE for more details.\n \"\"\"\n \n-__version__ = '0.8'\n+__version__ = '0.9-dev'\n \n # utilities we import from Werkzeug and Jinja2 that are unused\n # in the module but are exported as public interface.\n\n@@ -77,7 +77,7 @@ class run_audit(Command):\n \n setup(\n     name='Flask',\n-    version='0.8',\n+    version='0.9-dev',\n     url='http://github.com/mitsuhiko/flask/',\n     license='BSD',\n     author='Armin Ronacher',\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#766522cb587850f643f3bb6cb011735ae6a98510", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 2 | Files Changed: 2 | Hunks: 2 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 393 | Contributors (this commit): 6 | Commits (past 90d): 18 | Contributors (cumulative): 7 | DMM Complexity: None\n\nDIFF:\n@@ -10,7 +10,7 @@\n     :license: BSD, see LICENSE for more details.\n \"\"\"\n \n-__version__ = '0.8'\n+__version__ = '0.8.1-dev'\n \n # utilities we import from Werkzeug and Jinja2 that are unused\n # in the module but are exported as public interface.\n\n@@ -77,7 +77,7 @@ class run_audit(Command):\n \n setup(\n     name='Flask',\n-    version='0.8',\n+    version='0.8.1-dev',\n     url='http://github.com/mitsuhiko/flask/',\n     license='BSD',\n     author='Armin Ronacher',\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#0dd9dc37b6618b8091c2a0f849f5f3143dc6eafc", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 87 | Contributors (this commit): 3 | Commits (past 90d): 3 | Contributors (cumulative): 3 | DMM Complexity: None\n\nDIFF:\n@@ -13,7 +13,7 @@\n from warnings import warn\n warn(DeprecationWarning('please use flask.sessions instead'))\n \n-from .sessions import *\n+from .sessions import SecureCookieSession, NullSession\n \n Session = SecureCookieSession\n _NullSession = NullSession\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#b51fbdc8e00ea777dcfdfa39ae789206ecfdb0a7", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 0 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 1 | Churn Cumulative: 164 | Contributors (this commit): 1 | Commits (past 90d): 3 | Contributors (cumulative): 1 | DMM Complexity: None\n\nDIFF:\n@@ -15,7 +15,6 @@ http_method_funcs = frozenset(['get', 'post', 'head', 'options',\n                                'delete', 'put', 'trace'])\n \n \n-\n class View(object):\n     \"\"\"Alternative way to use view functions.  A subclass has to implement\n     :meth:`dispatch_request` which is called with the view arguments from\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#1759d8e4d80df3c3dc709c9bace2eb07d5685596", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 19 | Lines Deleted: 1 | Files Changed: 2 | Hunks: 6 | Methods Changed: 3 | Complexity Δ (Sum/Max): 3/2 | Churn Δ: 20 | Churn Cumulative: 1367 | Contributors (this commit): 12 | Commits (past 90d): 17 | Contributors (cumulative): 14 | DMM Complexity: 0.6923076923076923\n\nDIFF:\n@@ -18,6 +18,7 @@ import mimetypes\n from time import time\n from zlib import adler32\n from threading import RLock\n+from werkzeug.urls import url_quote\n \n # try to load the best simplejson implementation available.  If JSON\n # is not installed, we add a failing class.\n@@ -184,9 +185,13 @@ def url_for(endpoint, **values):\n \n     For more information, head over to the :ref:`Quickstart <url-building>`.\n \n+    .. versionadded:: 0.9\n+       The `_anchor` parameter was added.\n+\n     :param endpoint: the endpoint of the URL (name of the function)\n     :param values: the variable arguments of the URL rule\n     :param _external: if set to `True`, an absolute URL is generated.\n+    :param _anchor: if provided this is added as anchor to the URL.\n     \"\"\"\n     ctx = _request_ctx_stack.top\n     blueprint_name = request.blueprint\n@@ -204,8 +209,12 @@ def url_for(endpoint, **values):\n         elif endpoint.startswith('.'):\n             endpoint = endpoint[1:]\n     external = values.pop('_external', False)\n+    anchor = values.pop('_anchor', None)\n     ctx.app.inject_url_defaults(endpoint, values)\n-    return ctx.url_adapter.build(endpoint, values, force_external=external)\n+    rv = ctx.url_adapter.build(endpoint, values, force_external=external)\n+    if anchor is not None:\n+        rv += '#' + url_quote(anchor)\n+    return rv\n \n \n def get_template_attribute(template_name, attribute):\n\n@@ -288,6 +288,15 @@ class LoggingTestCase(FlaskTestCase):\n             self.assert_equal(rv.status_code, 500)\n             self.assert_equal(rv.data, 'Hello Server Error')\n \n+    def test_url_for_with_anchor(self):\n+        app = flask.Flask(__name__)\n+        @app.route('/')\n+        def index():\n+            return '42'\n+        with app.test_request_context():\n+            self.assert_equal(flask.url_for('index', _anchor='x y'),\n+                              '/#x%20y')\n+\n \n def suite():\n     suite = unittest.TestSuite()\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#ebd74688070617a4cb6dd39df616f4691a98666d", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 1 | Churn Cumulative: 947 | Contributors (this commit): 12 | Commits (past 90d): 12 | Contributors (cumulative): 12 | DMM Complexity: None\n\nDIFF:\n@@ -56,6 +56,7 @@ def _assert_have_json():\n     if not json_available:\n         raise RuntimeError('simplejson not installed')\n \n+\n # figure out if simplejson escapes slashes.  This behaviour was changed\n # from one version to another without reason.\n if not json_available or '\\\\/' not in json.dumps('/'):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#61a95196ac28771466ada43a1c01effda42040a5", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 10 | Lines Deleted: 1 | Files Changed: 2 | Hunks: 2 | Methods Changed: 3 | Complexity Δ (Sum/Max): 2/1 | Churn Δ: 11 | Churn Cumulative: 479 | Contributors (this commit): 2 | Commits (past 90d): 9 | Contributors (cumulative): 3 | DMM Complexity: 1.0\n\nDIFF:\n@@ -25,7 +25,9 @@ def create_logger(app):\n \n     class DebugLogger(Logger):\n         def getEffectiveLevel(x):\n-            return DEBUG if app.debug else Logger.getEffectiveLevel(x)\n+            if x.level == 0 and app.debug:\n+                return DEBUG\n+            return Logger.getEffectiveLevel(x)\n \n     class DebugHandler(StreamHandler):\n         def emit(x, record):\n\n@@ -246,6 +246,13 @@ class LoggingTestCase(FlaskTestCase):\n                 else:\n                     self.assert_(False, 'debug log ate the exception')\n \n+    def test_debug_log_override(self):\n+        app = flask.Flask(__name__)\n+        app.debug = True\n+        app.logger_name = 'flask_tests/test_debug_log_override'\n+        app.logger.level = 10\n+        self.assert_equal(app.logger.level, 10)\n+\n     def test_exception_logging(self):\n         out = StringIO()\n         app = flask.Flask(__name__)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#f52e7a9dc944f425c2f2a77706bc2af98b23295c", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 31 | Lines Deleted: 2 | Files Changed: 2 | Hunks: 5 | Methods Changed: 4 | Complexity Δ (Sum/Max): 4/4 | Churn Δ: 33 | Churn Cumulative: 1408 | Contributors (this commit): 12 | Commits (past 90d): 19 | Contributors (cumulative): 14 | DMM Complexity: 0.9285714285714286\n\nDIFF:\n@@ -187,12 +187,13 @@ def url_for(endpoint, **values):\n     For more information, head over to the :ref:`Quickstart <url-building>`.\n \n     .. versionadded:: 0.9\n-       The `_anchor` parameter was added.\n+       The `_anchor` and `_method` parameters were added.\n \n     :param endpoint: the endpoint of the URL (name of the function)\n     :param values: the variable arguments of the URL rule\n     :param _external: if set to `True`, an absolute URL is generated.\n     :param _anchor: if provided this is added as anchor to the URL.\n+    :param _method: if provided this explicitly specifies an HTTP method.\n     \"\"\"\n     ctx = _request_ctx_stack.top\n     blueprint_name = request.blueprint\n@@ -211,8 +212,10 @@ def url_for(endpoint, **values):\n             endpoint = endpoint[1:]\n     external = values.pop('_external', False)\n     anchor = values.pop('_anchor', None)\n+    method = values.pop('_method', None)\n     ctx.app.inject_url_defaults(endpoint, values)\n-    rv = ctx.url_adapter.build(endpoint, values, force_external=external)\n+    rv = ctx.url_adapter.build(endpoint, values, method=method,\n+                               force_external=external)\n     if anchor is not None:\n         rv += '#' + url_quote(anchor)\n     return rv\n\n@@ -304,6 +304,32 @@ class LoggingTestCase(FlaskTestCase):\n             self.assert_equal(flask.url_for('index', _anchor='x y'),\n                               '/#x%20y')\n \n+    def test_url_with_method(self):\n+        from flask.views import MethodView\n+        app = flask.Flask(__name__)\n+        class MyView(MethodView):\n+            def get(self, id=None):\n+                if id is None:\n+                    return 'List'\n+                return 'Get %d' % id\n+            def post(self):\n+                return 'Create'\n+        myview = MyView.as_view('myview')\n+        app.add_url_rule('/myview/', methods=['GET'],\n+                         view_func=myview)\n+        app.add_url_rule('/myview/<int:id>', methods=['GET'],\n+                         view_func=myview)\n+        app.add_url_rule('/myview/create', methods=['POST'],\n+                         view_func=myview)\n+\n+        with app.test_request_context():\n+            self.assert_equal(flask.url_for('myview', _method='GET'),\n+                              '/myview/')\n+            self.assert_equal(flask.url_for('myview', id=42, _method='GET'),\n+                              '/myview/42')\n+            self.assert_equal(flask.url_for('myview', _method='POST'),\n+                              '/myview/create')\n+\n \n def suite():\n     suite = unittest.TestSuite()\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#9dd61eea6b49bfe1cc4639f5bc4c1371df938d95", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 26 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 3 | Complexity Δ (Sum/Max): 4/4 | Churn Δ: 26 | Churn Cumulative: 209 | Contributors (this commit): 4 | Commits (past 90d): 8 | Contributors (cumulative): 4 | DMM Complexity: 1.0\n\nDIFF:\n@@ -46,6 +46,32 @@ class TestToolsTestCase(FlaskTestCase):\n             rv = c.get('/')\n             self.assert_equal(rv.data, 'http://localhost/')\n \n+    def test_redirect_keep_session(self):\n+        app = flask.Flask(__name__)\n+        app.secret_key = 'testing'\n+\n+        @app.route('/', methods=['GET', 'POST'])\n+        def index():\n+            if flask.request.method == 'POST':\n+                return flask.redirect('/redirect')\n+            flask.session['data'] = 'foo'\n+            return 'index'\n+\n+        @app.route('/redirect')\n+        def redirect():\n+            return 'redirect'\n+\n+        with app.test_client() as c:\n+            ctx = app.test_request_context()\n+            ctx.push()\n+            rv = c.get('/')\n+            assert rv.data == 'index'\n+            assert flask.session.get('data') == 'foo'\n+            rv = c.post('/', data={}, follow_redirects=True)\n+            assert rv.data == 'redirect'\n+            assert flask.session.get('data') == 'foo'\n+            ctx.pop()\n+\n     def test_session_transactions(self):\n         app = flask.Flask(__name__)\n         app.testing = True\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#d628df6ab6c57b34acfb412e135d0d095636c539", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 19 | Lines Deleted: 2 | Files Changed: 2 | Hunks: 3 | Methods Changed: 4 | Complexity Δ (Sum/Max): 3/3 | Churn Δ: 21 | Churn Cumulative: 4072 | Contributors (this commit): 14 | Commits (past 90d): 27 | Contributors (cumulative): 16 | DMM Complexity: 1.0\n\nDIFF:\n@@ -1403,8 +1403,6 @@ class Flask(_PackageBoundObject):\n         \"\"\"\n         ctx = _request_ctx_stack.top\n         bp = ctx.request.blueprint\n-        if not self.session_interface.is_null_session(ctx.session):\n-            self.save_session(ctx.session, response)\n         funcs = ()\n         if bp is not None and bp in self.after_request_funcs:\n             funcs = reversed(self.after_request_funcs[bp])\n@@ -1412,6 +1410,8 @@ class Flask(_PackageBoundObject):\n             funcs = chain(funcs, reversed(self.after_request_funcs[None]))\n         for handler in funcs:\n             response = handler(response)\n+        if not self.session_interface.is_null_session(ctx.session):\n+            self.save_session(ctx.session, response)\n         return response\n \n     def do_teardown_request(self):\n\n@@ -279,6 +279,23 @@ class BasicFunctionalityTestCase(FlaskTestCase):\n         match = re.search(r'\\bexpires=([^;]+)', rv.headers['set-cookie'])\n         self.assert_(match is None)\n \n+    def test_session_stored_last(self):\n+        app = flask.Flask(__name__)\n+        app.secret_key = 'development-key'\n+        app.testing = True\n+\n+        @app.after_request\n+        def modify_session(response):\n+            flask.session['foo'] = 42\n+            return response\n+        @app.route('/')\n+        def dump_session_contents():\n+            return repr(flask.session.get('foo'))\n+\n+        c = app.test_client()\n+        self.assert_equal(c.get('/').data, 'None')\n+        self.assert_equal(c.get('/').data, '42')\n+\n     def test_flashes(self):\n         app = flask.Flask(__name__)\n         app.secret_key = 'testkey'\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#c90858a95d5fbe474ba075c3221de0b6f38c9ef2", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 3 | Lines Deleted: 5 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 8 | Churn Cumulative: 244 | Contributors (this commit): 4 | Commits (past 90d): 4 | Contributors (cumulative): 4 | DMM Complexity: 1.0\n\nDIFF:\n@@ -71,11 +71,9 @@ class TestToolsTestCase(FlaskTestCase):\n             rv = c.post('/', data={}, follow_redirects=True)\n             assert rv.data == 'foo'\n \n-            # XXX: Currently the test client does not support\n-            # keeping the context around if a redirect is followed.\n-            # This would be nice to fix but right now the Werkzeug\n-            # test client does not support that.\n-            ##assert flask.session.get('data') == 'foo'\n+            # This support requires a new Werkzeug version\n+            if not hasattr(c, 'redirect_client'):\n+                assert flask.session.get('data') == 'foo'\n \n             rv = c.get('/getsession')\n             assert rv.data == 'foo'\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#26a9c2079d77aba93dde6f95472f3d89d2d9783d", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 13 | Lines Deleted: 0 | Files Changed: 2 | Hunks: 3 | Methods Changed: 2 | Complexity Δ (Sum/Max): 2/2 | Churn Δ: 13 | Churn Cumulative: 467 | Contributors (this commit): 2 | Commits (past 90d): 4 | Contributors (cumulative): 3 | DMM Complexity: 1.0\n\nDIFF:\n@@ -331,10 +331,21 @@ class LoggingTestCase(FlaskTestCase):\n                               '/myview/create')\n \n \n+class NoImportsTestCase(FlaskTestCase):\n+    \"Test Flasks are created without __import__.\"\n+\n+    def test_name_with_import_error(self):\n+        try:\n+            flask.Flask('importerror')\n+        except NotImplementedError:\n+            self.fail('Flask(import_name) is importing import_name.')\n+\n+\n def suite():\n     suite = unittest.TestSuite()\n     if flask.json_available:\n         suite.addTest(unittest.makeSuite(JSONTestCase))\n     suite.addTest(unittest.makeSuite(SendfileTestCase))\n     suite.addTest(unittest.makeSuite(LoggingTestCase))\n+    suite.addTest(unittest.makeSuite(NoImportsTestCase))\n     return suite\n\n@@ -0,0 +1,2 @@\n+# NoImportsTestCase\n+raise NotImplementedError\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#d16491145dc553bc30aa9c71fb3647fda8d23534", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 16 | Lines Deleted: 15 | Files Changed: 1 | Hunks: 6 | Methods Changed: 2 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 31 | Churn Cumulative: 985 | Contributors (this commit): 12 | Commits (past 90d): 2 | Contributors (cumulative): 12 | DMM Complexity: 0.0\n\nDIFF:\n@@ -11,8 +11,10 @@\n \n from __future__ import with_statement\n \n+import imp\n import os\n import sys\n+import pkgutil\n import posixpath\n import mimetypes\n from time import time\n@@ -492,14 +494,12 @@ def get_root_path(import_name):\n \n     Not to be confused with the package path returned by :func:`find_package`.\n     \"\"\"\n-    __import__(import_name)\n-    try:\n-        directory = os.path.dirname(sys.modules[import_name].__file__)\n-        return os.path.abspath(directory)\n-    except AttributeError:\n-        # this is necessary in case we are running from the interactive\n-        # python shell.  It will never be used for production code however\n+    loader = pkgutil.get_loader(import_name)\n+    if loader is None:\n         return os.getcwd()\n+    filepath = os.path.abspath(loader.get_filename(import_name))\n+    # filepath for import_name.py for a module, or __init__.py for a package.\n+    return os.path.dirname(filepath)\n \n \n def find_package(import_name):\n@@ -510,16 +510,17 @@ def find_package(import_name):\n     import the module.  The prefix is the path below which a UNIX like\n     folder structure exists (lib, share etc.).\n     \"\"\"\n-    __import__(import_name)\n-    root_mod = sys.modules[import_name.split('.')[0]]\n-    package_path = getattr(root_mod, '__file__', None)\n-    if package_path is None:\n+    root_mod_name = import_name.split('.')[0]\n+    loader = pkgutil.get_loader(root_mod_name)\n+    if loader is not None:\n+        filename = loader.get_filename(root_mod_name)\n+        package_path = os.path.abspath(os.path.dirname(filename))\n+        # package_path ends with __init__.py for a package\n+        if loader.is_package(root_mod_name):\n+            package_path = os.path.dirname(package_path)\n+    else:\n         # support for the interactive python shell\n         package_path = os.getcwd()\n-    else:\n-        package_path = os.path.abspath(os.path.dirname(package_path))\n-    if hasattr(root_mod, '__path__'):\n-        package_path = os.path.dirname(package_path)\n \n     # leave the egg wrapper folder or the actual .egg on the filesystem\n     test_package_path = package_path\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#a3b30b7e3b026e821716be63d586e078eaa6ee7f", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 23 | Lines Deleted: 15 | Files Changed: 1 | Hunks: 7 | Methods Changed: 2 | Complexity Δ (Sum/Max): 3/3 | Churn Δ: 38 | Churn Cumulative: 1023 | Contributors (this commit): 12 | Commits (past 90d): 3 | Contributors (cumulative): 12 | DMM Complexity: 1.0\n\nDIFF:\n@@ -495,11 +495,18 @@ def get_root_path(import_name):\n     Not to be confused with the package path returned by :func:`find_package`.\n     \"\"\"\n     loader = pkgutil.get_loader(import_name)\n-    if loader is None:\n+    if loader is None or import_name == '__main__':\n+        # import name is not found, or interactive/main module\n         return os.getcwd()\n-    filepath = os.path.abspath(loader.get_filename(import_name))\n-    # filepath for import_name.py for a module, or __init__.py for a package.\n-    return os.path.dirname(filepath)\n+    # For .egg, zipimporter does not have get_filename until Python 2.7.\n+    if hasattr(loader, 'get_filename'):\n+        filepath = loader.get_filename(import_name)\n+    else:\n+        # Fall back to imports.\n+        __import__(import_name)\n+        filepath = sys.modules[import_name].__file__\n+    # filepath is import_name.py for a module, or __init__.py for a package.\n+    return os.path.dirname(os.path.abspath(filepath))\n \n \n def find_package(import_name):\n@@ -512,24 +519,25 @@ def find_package(import_name):\n     \"\"\"\n     root_mod_name = import_name.split('.')[0]\n     loader = pkgutil.get_loader(root_mod_name)\n-    if loader is not None:\n+    if loader is None or import_name == '__main__':\n+        # import name is not found, or interactive/main module\n+        package_path = os.getcwd()\n+    else:\n+        # For .egg, zipimporter does not have get_filename until Python 2.7.\n+        if hasattr(loader, 'get_filename'):\n             filename = loader.get_filename(root_mod_name)\n+        else:\n+            # zipimporter's loader.archive points to the .egg or .zip\n+            # archive filename is dropped in call to dirname below.\n+            filename = loader.archive\n         package_path = os.path.abspath(os.path.dirname(filename))\n         # package_path ends with __init__.py for a package\n         if loader.is_package(root_mod_name):\n             package_path = os.path.dirname(package_path)\n-    else:\n-        # support for the interactive python shell\n-        package_path = os.getcwd()\n \n-    # leave the egg wrapper folder or the actual .egg on the filesystem\n-    test_package_path = package_path\n-    if os.path.basename(test_package_path).endswith('.egg'):\n-        test_package_path = os.path.dirname(test_package_path)\n-\n-    site_parent, site_folder = os.path.split(test_package_path)\n+    site_parent, site_folder = os.path.split(package_path)\n     py_prefix = os.path.abspath(sys.prefix)\n-    if test_package_path.startswith(py_prefix):\n+    if package_path.startswith(py_prefix):\n         return py_prefix, package_path\n     elif site_folder.lower() == 'site-packages':\n         parent, folder = os.path.split(site_parent)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#fde6e364a497cd44d049df17c93d1fd05ec09f90", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 73 | Lines Deleted: 47 | Files Changed: 5 | Hunks: 21 | Methods Changed: 6 | Complexity Δ (Sum/Max): 6/6 | Churn Δ: 120 | Churn Cumulative: 332 | Contributors (this commit): 2 | Commits (past 90d): 5 | Contributors (cumulative): 6 | DMM Complexity: 1.0\n\nDIFF:\n@@ -98,6 +98,14 @@ class InstanceTestCase(FlaskTestCase):\n         app = flask.Flask(__name__, instance_path=here)\n         self.assert_equal(app.instance_path, here)\n \n+    def test_main_module_paths(self):\n+        # Test an app with '__main__' as the import name, uses cwd.\n+        from main_app import app\n+        here = os.path.abspath(os.getcwd())\n+        self.assert_equal(app.instance_path, os.path.join(here, 'instance'))\n+        if 'main_app' in sys.modules:\n+            del sys.modules['main_app']\n+\n     def test_uninstalled_module_paths(self):\n         from config_module_app import app\n         here = os.path.abspath(os.path.dirname(__file__))\n@@ -109,70 +117,75 @@ class InstanceTestCase(FlaskTestCase):\n         self.assert_equal(app.instance_path, os.path.join(here, 'test_apps', 'instance'))\n \n     def test_installed_module_paths(self):\n-        import types\n-        expected_prefix = os.path.abspath('foo')\n-        mod = types.ModuleType('myapp')\n-        mod.__file__ = os.path.join(expected_prefix, 'lib', 'python2.5',\n-                                    'site-packages', 'myapp.py')\n-        sys.modules['myapp'] = mod\n+        here = os.path.abspath(os.path.dirname(__file__))\n+        expected_prefix = os.path.join(here, 'test_apps')\n+        real_prefix, sys.prefix = sys.prefix, expected_prefix\n+        site_packages = os.path.join(expected_prefix, 'lib', 'python2.5', 'site-packages')\n+        sys.path.append(site_packages)\n         try:\n-            mod.app = flask.Flask(mod.__name__)\n-            self.assert_equal(mod.app.instance_path,\n+            import site_app\n+            self.assert_equal(site_app.app.instance_path,\n                               os.path.join(expected_prefix, 'var',\n-                                          'myapp-instance'))\n+                                           'site_app-instance'))\n         finally:\n-            sys.modules['myapp'] = None\n+            sys.prefix = real_prefix\n+            sys.path.remove(site_packages)\n+            if 'site_app' in sys.modules:\n+                del sys.modules['site_app']\n \n     def test_installed_package_paths(self):\n-        import types\n-        expected_prefix = os.path.abspath('foo')\n-        package_path = os.path.join(expected_prefix, 'lib', 'python2.5',\n-                                    'site-packages', 'myapp')\n-        mod = types.ModuleType('myapp')\n-        mod.__path__ = [package_path]\n-        mod.__file__ = os.path.join(package_path, '__init__.py')\n-        sys.modules['myapp'] = mod\n+        here = os.path.abspath(os.path.dirname(__file__))\n+        expected_prefix = os.path.join(here, 'test_apps')\n+        real_prefix, sys.prefix = sys.prefix, expected_prefix\n+        installed_path = os.path.join(expected_prefix, 'path')\n+        sys.path.append(installed_path)\n         try:\n-            mod.app = flask.Flask(mod.__name__)\n-            self.assert_equal(mod.app.instance_path,\n+            import installed_package\n+            self.assert_equal(installed_package.app.instance_path,\n                               os.path.join(expected_prefix, 'var',\n-                                          'myapp-instance'))\n+                                           'installed_package-instance'))\n         finally:\n-            sys.modules['myapp'] = None\n+            sys.prefix = real_prefix\n+            sys.path.remove(installed_path)\n+            if 'installed_package' in sys.modules:\n+                del sys.modules['installed_package']\n \n-    def test_prefix_installed_paths(self):\n-        import types\n-        expected_prefix = os.path.abspath(sys.prefix)\n-        package_path = os.path.join(expected_prefix, 'lib', 'python2.5',\n-                                    'site-packages', 'myapp')\n-        mod = types.ModuleType('myapp')\n-        mod.__path__ = [package_path]\n-        mod.__file__ = os.path.join(package_path, '__init__.py')\n-        sys.modules['myapp'] = mod\n+    def test_prefix_package_paths(self):\n+        here = os.path.abspath(os.path.dirname(__file__))\n+        expected_prefix = os.path.join(here, 'test_apps')\n+        real_prefix, sys.prefix = sys.prefix, expected_prefix\n+        site_packages = os.path.join(expected_prefix, 'lib', 'python2.5', 'site-packages')\n+        sys.path.append(site_packages)\n         try:\n-            mod.app = flask.Flask(mod.__name__)\n-            self.assert_equal(mod.app.instance_path,\n+            import site_package\n+            self.assert_equal(site_package.app.instance_path,\n                               os.path.join(expected_prefix, 'var',\n-                                          'myapp-instance'))\n+                                           'site_package-instance'))\n         finally:\n-            sys.modules['myapp'] = None\n+            sys.prefix = real_prefix\n+            sys.path.remove(site_packages)\n+            if 'site_package' in sys.modules:\n+                del sys.modules['site_package']\n \n     def test_egg_installed_paths(self):\n-        import types\n-        expected_prefix = os.path.abspath(sys.prefix)\n-        package_path = os.path.join(expected_prefix, 'lib', 'python2.5',\n-                                    'site-packages', 'MyApp.egg', 'myapp')\n-        mod = types.ModuleType('myapp')\n-        mod.__path__ = [package_path]\n-        mod.__file__ = os.path.join(package_path, '__init__.py')\n-        sys.modules['myapp'] = mod\n+        here = os.path.abspath(os.path.dirname(__file__))\n+        expected_prefix = os.path.join(here, 'test_apps')\n+        real_prefix, sys.prefix = sys.prefix, expected_prefix\n+        site_packages = os.path.join(expected_prefix, 'lib', 'python2.5', 'site-packages')\n+        egg_path = os.path.join(site_packages, 'SiteEgg.egg')\n+        sys.path.append(site_packages)\n+        sys.path.append(egg_path)\n         try:\n-            mod.app = flask.Flask(mod.__name__)\n-            self.assert_equal(mod.app.instance_path,\n+            import site_egg # in SiteEgg.egg\n+            self.assert_equal(site_egg.app.instance_path,\n                               os.path.join(expected_prefix, 'var',\n-                                          'myapp-instance'))\n+                                           'site_egg-instance'))\n         finally:\n-            sys.modules['myapp'] = None\n+            sys.prefix = real_prefix\n+            sys.path.remove(site_packages)\n+            sys.path.remove(egg_path)\n+            if 'site_egg' in sys.modules:\n+                del sys.modules['site_egg']\n \n \n def suite():\n\n@@ -0,0 +1,3 @@\n+import flask\n+\n+app = flask.Flask(__name__)\n\n@@ -0,0 +1,3 @@\n+import flask\n+\n+app = flask.Flask(__name__)\n\n@@ -0,0 +1,4 @@\n+import flask\n+\n+# Test Flask initialization with main module.\n+app = flask.Flask('__main__')\n\n@@ -0,0 +1,3 @@\n+import flask\n+\n+app = flask.Flask(__name__)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#970de5e8b67b6c5bbaac082e888f8ebc6e16cfb7", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 9 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 10 | Churn Cumulative: 475 | Contributors (this commit): 2 | Commits (past 90d): 4 | Contributors (cumulative): 2 | DMM Complexity: None\n\nDIFF:\n@@ -332,7 +332,15 @@ class LoggingTestCase(FlaskTestCase):\n \n \n class NoImportsTestCase(FlaskTestCase):\n-    \"Test Flasks are created without __import__.\"\n+    \"\"\"Test Flasks are created without import.\n+\n+    Avoiding ``__import__`` helps create Flask instances where there are errors\n+    at import time.  Those runtime errors will be apparent to the user soon\n+    enough, but tools which build Flask instances meta-programmatically benefit\n+    from a Flask which does not ``__import__``.  Instead of importing to\n+    retrieve file paths or metadata on a module or package, use the pkgutil and\n+    imp modules in the Python standard library.\n+    \"\"\"\n \n     def test_name_with_import_error(self):\n         try:\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#1f20a11284e3e9bcfc08939c48e3ab590da7c7a4", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 8 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 9 | Churn Cumulative: 1032 | Contributors (this commit): 12 | Commits (past 90d): 4 | Contributors (cumulative): 12 | DMM Complexity: 0.0\n\nDIFF:\n@@ -526,10 +526,17 @@ def find_package(import_name):\n         # For .egg, zipimporter does not have get_filename until Python 2.7.\n         if hasattr(loader, 'get_filename'):\n             filename = loader.get_filename(root_mod_name)\n-        else:\n+        elif hasattr(loader, 'archive'):\n             # zipimporter's loader.archive points to the .egg or .zip\n             # archive filename is dropped in call to dirname below.\n             filename = loader.archive\n+        else:\n+            # At least one loader is missing both get_filename and archive:\n+            # Google App Engine's HardenedModulesHook\n+            #\n+            # Fall back to imports.\n+            __import__(import_name)\n+            filename = sys.modules[import_name].__file__\n         package_path = os.path.abspath(os.path.dirname(filename))\n         # package_path ends with __init__.py for a package\n         if loader.is_package(root_mod_name):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#a59cbd4f5256a356fcb7858bf0a5a0ad535e8e6d", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 166 | Contributors (this commit): 2 | Commits (past 90d): 3 | Contributors (cumulative): 2 | DMM Complexity: None\n\nDIFF:\n@@ -146,5 +146,5 @@ class MethodView(View):\n         # retry with GET\n         if meth is None and request.method == 'HEAD':\n             meth = getattr(self, 'get', None)\n-        assert meth is not None, 'Not implemented method %r' % request.method\n+        assert meth is not None, 'Unimplemented method %r' % request.method\n         return meth(*args, **kwargs)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#46651659c29a3ff8fa470e32d3e35f9cc2c7fbc0", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 3 | Lines Deleted: 3 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 6 | Churn Cumulative: 261 | Contributors (this commit): 5 | Commits (past 90d): 5 | Contributors (cumulative): 5 | DMM Complexity: None\n\nDIFF:\n@@ -21,9 +21,9 @@ class _RequestGlobals(object):\n \n def has_request_context():\n     \"\"\"If you have code that wants to test if a request context is there or\n-    not this function can be used.  For instance if you want to take advantage\n-    of request information is it's available but fail silently if the request\n-    object is unavailable.\n+    not this function can be used.  For instance, if you want to take advantage\n+    of request information if the request object is available, but fail\n+    silently if it is unavailable.\n \n     ::\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#8532bd51a709263907a4604660b8dabf51e39ab2", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 263 | Contributors (this commit): 5 | Commits (past 90d): 6 | Contributors (cumulative): 5 | DMM Complexity: None\n\nDIFF:\n@@ -21,7 +21,7 @@ class _RequestGlobals(object):\n \n def has_request_context():\n     \"\"\"If you have code that wants to test if a request context is there or\n-    not this function can be used.  For instance, if you want to take advantage\n+    not this function can be used.  For instance, you may want to take advantage\n     of request information if the request object is available, but fail\n     silently if it is unavailable.\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#2a4d3ef1168e0ea1733898527229961c9ddafced", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 11 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 3 | Complexity Δ (Sum/Max): 4/4 | Churn Δ: 11 | Churn Cumulative: 470 | Contributors (this commit): 5 | Commits (past 90d): 16 | Contributors (cumulative): 5 | DMM Complexity: 1.0\n\nDIFF:\n@@ -185,6 +185,17 @@ class Blueprint(_PackageBoundObject):\n             return f\n         return decorator\n \n+    def app_template_filter(self, name = None):\n+        \"\"\"Like :meth:`Flask.template_filter` but for a blueprint. The filter\n+        is available for the entire application.\n+        \"\"\"\n+        def decorator(f):\n+            def register_template(state):\n+                state.app.jinja_env.filters[name or f.__name__] = f\n+            self.record_once(register_template)\n+            return f\n+        return decorator\n+\n     def before_request(self, f):\n         \"\"\"Like :meth:`Flask.before_request` but for a blueprint.  This function\n         is only executed before each request that is handled by a function of\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#ce4d589d5b7bbda46b9c34211dcd3e1c90ee83c9", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 28 | Lines Deleted: 5 | Files Changed: 2 | Hunks: 5 | Methods Changed: 6 | Complexity Δ (Sum/Max): 2/1 | Churn Δ: 33 | Churn Cumulative: 3187 | Contributors (this commit): 16 | Commits (past 90d): 3 | Contributors (cumulative): 19 | DMM Complexity: 1.0\n\nDIFF:\n@@ -1018,10 +1018,20 @@ class Flask(_PackageBoundObject):\n                      function name will be used.\n         \"\"\"\n         def decorator(f):\n-            self.jinja_env.filters[name or f.__name__] = f\n+            self.add_template_filter(f, name=name)\n             return f\n         return decorator\n \n+    @setupmethod\n+    def add_template_filter(self, f, name=None):\n+        \"\"\"Register a custom template filter.  Works exactly like the\n+        :meth:`template_filter` decorator.\n+\n+        :param name: the optional name of the filter, otherwise the\n+                     function name will be used.\n+        \"\"\"\n+        self.jinja_env.filters[name or f.__name__] = f\n+\n     @setupmethod\n     def before_request(self, f):\n         \"\"\"Registers a function to run before each request.\"\"\"\n\n@@ -186,15 +186,28 @@ class Blueprint(_PackageBoundObject):\n         return decorator\n \n     def app_template_filter(self, name=None):\n-        \"\"\"Like :meth:`Flask.template_filter` but for a blueprint. The filter\n-        is available for the entire application.\n+        \"\"\"Register a custom template filter, available application wide.  Like\n+        :meth:`Flask.template_filter` but for a blueprint.\n+\n+        :param name: the optional name of the filter, otherwise the\n+                     function name will be used.\n         \"\"\"\n         def decorator(f):\n+            self.add_app_template_filter(f, name=name)\n+            return f\n+        return decorator\n+\n+    def add_app_template_filter(self, f, name=None):\n+        \"\"\"Register a custom template filter, available application wide.  Like\n+        :meth:`Flask.add_template_filter` but for a blueprint.  Works exactly\n+        like the :meth:`app_template_filter` decorator.\n+\n+        :param name: the optional name of the filter, otherwise the\n+                     function name will be used.\n+        \"\"\"\n         def register_template(state):\n             state.app.jinja_env.filters[name or f.__name__] = f\n         self.record_once(register_template)\n-            return f\n-        return decorator\n \n     def before_request(self, f):\n         \"\"\"Like :meth:`Flask.before_request` but for a blueprint.  This function\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#820d099e82aa8ee01e1e82b85e2c6636d63be98a", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 149 | Lines Deleted: 0 | Files Changed: 2 | Hunks: 5 | Methods Changed: 33 | Complexity Δ (Sum/Max): 33/23 | Churn Δ: 149 | Churn Cumulative: 849 | Contributors (this commit): 2 | Commits (past 90d): 2 | Contributors (cumulative): 4 | DMM Complexity: 1.0\n\nDIFF:\n@@ -504,6 +504,115 @@ class BlueprintTestCase(FlaskTestCase):\n         rv = c.get('/py/bar/123')\n         assert rv.status_code == 404\n \n+    def test_template_filter(self):\n+        bp = flask.Blueprint('bp', __name__)\n+        @bp.app_template_filter()\n+        def my_reverse(s):\n+            return s[::-1]\n+        app = flask.Flask(__name__)\n+        app.register_blueprint(bp, url_prefix='/py')\n+        self.assert_('my_reverse' in  app.jinja_env.filters.keys())\n+        self.assert_equal(app.jinja_env.filters['my_reverse'], my_reverse)\n+        self.assert_equal(app.jinja_env.filters['my_reverse']('abcd'), 'dcba')\n+\n+    def test_add_template_filter(self):\n+        bp = flask.Blueprint('bp', __name__)\n+        def my_reverse(s):\n+            return s[::-1]\n+        bp.add_app_template_filter(my_reverse)\n+        app = flask.Flask(__name__)\n+        app.register_blueprint(bp, url_prefix='/py')\n+        self.assert_('my_reverse' in  app.jinja_env.filters.keys())\n+        self.assert_equal(app.jinja_env.filters['my_reverse'], my_reverse)\n+        self.assert_equal(app.jinja_env.filters['my_reverse']('abcd'), 'dcba')\n+\n+    def test_template_filter_with_name(self):\n+        bp = flask.Blueprint('bp', __name__)\n+        @bp.app_template_filter('strrev')\n+        def my_reverse(s):\n+            return s[::-1]\n+        app = flask.Flask(__name__)\n+        app.register_blueprint(bp, url_prefix='/py')\n+        self.assert_('strrev' in  app.jinja_env.filters.keys())\n+        self.assert_equal(app.jinja_env.filters['strrev'], my_reverse)\n+        self.assert_equal(app.jinja_env.filters['strrev']('abcd'), 'dcba')\n+\n+    def test_add_template_filter_with_name(self):\n+        bp = flask.Blueprint('bp', __name__)\n+        def my_reverse(s):\n+            return s[::-1]\n+        bp.add_app_template_filter(my_reverse, 'strrev')\n+        app = flask.Flask(__name__)\n+        app.register_blueprint(bp, url_prefix='/py')\n+        self.assert_('strrev' in  app.jinja_env.filters.keys())\n+        self.assert_equal(app.jinja_env.filters['strrev'], my_reverse)\n+        self.assert_equal(app.jinja_env.filters['strrev']('abcd'), 'dcba')\n+\n+    def test_template_filter_with_template(self):\n+        bp = flask.Blueprint('bp', __name__)\n+        @bp.app_template_filter()\n+        def super_reverse(s):\n+            return s[::-1]\n+        app = flask.Flask(__name__)\n+        app.register_blueprint(bp, url_prefix='/py')\n+        @app.route('/')\n+        def index():\n+            return flask.render_template('template_filter.html', value='abcd')\n+        rv = app.test_client().get('/')\n+        self.assert_equal(rv.data, 'dcba')\n+\n+    def test_template_filter_after_route_with_template(self):\n+        app = flask.Flask(__name__)\n+        @app.route('/')\n+        def index():\n+            return flask.render_template('template_filter.html', value='abcd')\n+        bp = flask.Blueprint('bp', __name__)\n+        @bp.app_template_filter()\n+        def super_reverse(s):\n+            return s[::-1]\n+        app.register_blueprint(bp, url_prefix='/py')\n+        rv = app.test_client().get('/')\n+        self.assert_equal(rv.data, 'dcba')\n+\n+    def test_add_template_filter_with_template(self):\n+        bp = flask.Blueprint('bp', __name__)\n+        def super_reverse(s):\n+            return s[::-1]\n+        bp.add_app_template_filter(super_reverse)\n+        app = flask.Flask(__name__)\n+        app.register_blueprint(bp, url_prefix='/py')\n+        @app.route('/')\n+        def index():\n+            return flask.render_template('template_filter.html', value='abcd')\n+        rv = app.test_client().get('/')\n+        self.assert_equal(rv.data, 'dcba')\n+\n+    def test_template_filter_with_name_and_template(self):\n+        bp = flask.Blueprint('bp', __name__)\n+        @bp.app_template_filter('super_reverse')\n+        def my_reverse(s):\n+            return s[::-1]\n+        app = flask.Flask(__name__)\n+        app.register_blueprint(bp, url_prefix='/py')\n+        @app.route('/')\n+        def index():\n+            return flask.render_template('template_filter.html', value='abcd')\n+        rv = app.test_client().get('/')\n+        self.assert_equal(rv.data, 'dcba')\n+\n+    def test_add_template_filter_with_name_and_template(self):\n+        bp = flask.Blueprint('bp', __name__)\n+        def my_reverse(s):\n+            return s[::-1]\n+        bp.add_app_template_filter(my_reverse, 'super_reverse')\n+        app = flask.Flask(__name__)\n+        app.register_blueprint(bp, url_prefix='/py')\n+        @app.route('/')\n+        def index():\n+            return flask.render_template('template_filter.html', value='abcd')\n+        rv = app.test_client().get('/')\n+        self.assert_equal(rv.data, 'dcba')\n+\n \n def suite():\n     suite = unittest.TestSuite()\n\n@@ -93,6 +93,15 @@ class TemplatingTestCase(FlaskTestCase):\n         self.assert_equal(app.jinja_env.filters['my_reverse'], my_reverse)\n         self.assert_equal(app.jinja_env.filters['my_reverse']('abcd'), 'dcba')\n \n+    def test_add_template_filter(self):\n+        app = flask.Flask(__name__)\n+        def my_reverse(s):\n+            return s[::-1]\n+        app.add_template_filter(my_reverse)\n+        self.assert_('my_reverse' in  app.jinja_env.filters.keys())\n+        self.assert_equal(app.jinja_env.filters['my_reverse'], my_reverse)\n+        self.assert_equal(app.jinja_env.filters['my_reverse']('abcd'), 'dcba')\n+\n     def test_template_filter_with_name(self):\n         app = flask.Flask(__name__)\n         @app.template_filter('strrev')\n@@ -102,6 +111,15 @@ class TemplatingTestCase(FlaskTestCase):\n         self.assert_equal(app.jinja_env.filters['strrev'], my_reverse)\n         self.assert_equal(app.jinja_env.filters['strrev']('abcd'), 'dcba')\n \n+    def test_add_template_filter_with_name(self):\n+        app = flask.Flask(__name__)\n+        def my_reverse(s):\n+            return s[::-1]\n+        app.add_template_filter(my_reverse, 'strrev')\n+        self.assert_('strrev' in  app.jinja_env.filters.keys())\n+        self.assert_equal(app.jinja_env.filters['strrev'], my_reverse)\n+        self.assert_equal(app.jinja_env.filters['strrev']('abcd'), 'dcba')\n+\n     def test_template_filter_with_template(self):\n         app = flask.Flask(__name__)\n         @app.template_filter()\n@@ -113,6 +131,17 @@ class TemplatingTestCase(FlaskTestCase):\n         rv = app.test_client().get('/')\n         self.assert_equal(rv.data, 'dcba')\n \n+    def test_add_template_filter_with_template(self):\n+        app = flask.Flask(__name__)\n+        def super_reverse(s):\n+            return s[::-1]\n+        app.add_template_filter(super_reverse)\n+        @app.route('/')\n+        def index():\n+            return flask.render_template('template_filter.html', value='abcd')\n+        rv = app.test_client().get('/')\n+        self.assert_equal(rv.data, 'dcba')\n+\n     def test_template_filter_with_name_and_template(self):\n         app = flask.Flask(__name__)\n         @app.template_filter('super_reverse')\n@@ -124,6 +153,17 @@ class TemplatingTestCase(FlaskTestCase):\n         rv = app.test_client().get('/')\n         self.assert_equal(rv.data, 'dcba')\n \n+    def test_add_template_filter_with_name_and_template(self):\n+        app = flask.Flask(__name__)\n+        def my_reverse(s):\n+            return s[::-1]\n+        app.add_template_filter(my_reverse, 'super_reverse')\n+        @app.route('/')\n+        def index():\n+            return flask.render_template('template_filter.html', value='abcd')\n+        rv = app.test_client().get('/')\n+        self.assert_equal(rv.data, 'dcba')\n+\n     def test_custom_template_loader(self):\n         class MyFlask(flask.Flask):\n             def create_global_jinja_loader(self):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
