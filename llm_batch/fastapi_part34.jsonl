{"custom_id": "fastapi#a448bd63bd6d0f6c512cdede6b38fd9b675939e0", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 600 | Contributors (this commit): 5 | Commits (past 90d): 3 | Contributors (cumulative): 5 | DMM Complexity: None\n\nDIFF:\n@@ -101,7 +101,7 @@ class SchemaBase(BaseModel):\n     maxProperties: Optional[int] = Field(None, gte=0)\n     minProperties: Optional[int] = Field(None, gte=0)\n     required: Optional[List[str]] = None\n-    enum: Optional[List[str]] = None\n+    enum: Optional[List[Any]] = None\n     type: Optional[str] = None\n     allOf: Optional[List[Any]] = None\n     oneOf: Optional[List[Any]] = None\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#c425509d57a47a6d31ca8b0357ea6a68d830065b", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 39 | Lines Deleted: 12 | Files Changed: 2 | Hunks: 5 | Methods Changed: 2 | Complexity Δ (Sum/Max): 2/2 | Churn Δ: 51 | Churn Cumulative: 1727 | Contributors (this commit): 10 | Commits (past 90d): 7 | Contributors (cumulative): 12 | DMM Complexity: 1.0\n\nDIFF:\n@@ -634,7 +634,11 @@ async def request_body_to_args(\n                 ) and isinstance(received_body, FormData):\n                     value = received_body.getlist(field.alias)\n                 else:\n+                    try:\n                         value = received_body.get(field.alias)\n+                    except AttributeError:\n+                        errors.append(get_missing_field_error(field.alias))\n+                        continue\n             if (\n                 value is None\n                 or (isinstance(field_info, params.Form) and value == \"\")\n@@ -645,18 +649,7 @@ async def request_body_to_args(\n                 )\n             ):\n                 if field.required:\n-                    if PYDANTIC_1:\n-                        errors.append(\n-                            ErrorWrapper(MissingError(), loc=(\"body\", field.alias))\n-                        )\n-                    else:  # pragma: nocover\n-                        errors.append(\n-                            ErrorWrapper(  # type: ignore\n-                                MissingError(),\n-                                loc=(\"body\", field.alias),\n-                                config=BaseConfig,\n-                            )\n-                        )\n+                    errors.append(get_missing_field_error(field.alias))\n                 else:\n                     values[field.name] = deepcopy(field.default)\n                 continue\n@@ -685,6 +678,16 @@ async def request_body_to_args(\n     return values, errors\n \n \n+def get_missing_field_error(field_alias: str) -> ErrorWrapper:\n+    if PYDANTIC_1:\n+        missing_field_error = ErrorWrapper(MissingError(), loc=(\"body\", field_alias))\n+    else:  # pragma: no cover\n+        missing_field_error = ErrorWrapper(  # type: ignore\n+            MissingError(), loc=(\"body\", field_alias), config=BaseConfig,\n+        )\n+    return missing_field_error\n+\n+\n def get_schema_compatible_field(*, field: ModelField) -> ModelField:\n     out_field = field\n     if lenient_issubclass(field.type_, UploadFile):\n\n@@ -166,6 +166,30 @@ def test_openapi_schema():\n                 ]\n             },\n         ),\n+        (\n+            \"/items/5\",\n+            [],\n+            422,\n+            {\n+                \"detail\": [\n+                    {\n+                        \"loc\": [\"body\", \"item\"],\n+                        \"msg\": \"field required\",\n+                        \"type\": \"value_error.missing\",\n+                    },\n+                    {\n+                        \"loc\": [\"body\", \"user\"],\n+                        \"msg\": \"field required\",\n+                        \"type\": \"value_error.missing\",\n+                    },\n+                    {\n+                        \"loc\": [\"body\", \"importance\"],\n+                        \"msg\": \"field required\",\n+                        \"type\": \"value_error.missing\",\n+                    },\n+                ]\n+            },\n+        ),\n     ],\n )\n def test_post_body(path, body, expected_status, expected_response):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#636ce6b3f730f9738c4584659b778263fd914e70", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 6 | Lines Deleted: 10 | Files Changed: 1 | Hunks: 3 | Methods Changed: 4 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 16 | Churn Cumulative: 103 | Contributors (this commit): 1 | Commits (past 90d): 3 | Contributors (cumulative): 1 | DMM Complexity: 0.0\n\nDIFF:\n@@ -2,7 +2,6 @@ import time\n from typing import List\n \n from fastapi import Depends, FastAPI, HTTPException\n-from starlette.requests import Request\n \n from . import crud, database, models, schemas\n from .database import db_state_default\n@@ -16,7 +15,12 @@ app = FastAPI()\n sleep_time = 10\n \n \n-def get_db():\n+async def reset_db_state():\n+    database.db._state._state.set(db_state_default.copy())\n+    database.db._state.reset()\n+\n+\n+def get_db(db_state=Depends(reset_db_state)):\n     try:\n         database.db.connect()\n         yield\n@@ -25,14 +29,6 @@ def get_db():\n             database.db.close()\n \n \n-@app.middleware(\"http\")\n-async def reset_db_middleware(request: Request, call_next):\n-    database.db._state._state.set(db_state_default.copy())\n-    database.db._state.reset()\n-    response = await call_next(request)\n-    return response\n-\n-\n @app.post(\"/users/\", response_model=schemas.User, dependencies=[Depends(get_db)])\n def create_user(user: schemas.UserCreate):\n     db_user = crud.get_user_by_email(email=user.email)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#2e0a10256584bbdf727d552ccdef66f54e66332a", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 11 | Lines Deleted: 5 | Files Changed: 1 | Hunks: 3 | Methods Changed: 2 | Complexity Δ (Sum/Max): 2/2 | Churn Δ: 16 | Churn Cumulative: 616 | Contributors (this commit): 5 | Commits (past 90d): 4 | Contributors (cumulative): 5 | DMM Complexity: 1.0\n\nDIFF:\n@@ -1,5 +1,5 @@\n from enum import Enum\n-from typing import Any, Dict, List, Optional, Union\n+from typing import Any, Callable, Dict, Iterable, List, Optional, Union\n \n from fastapi.logger import logger\n from pydantic import BaseModel\n@@ -21,13 +21,19 @@ try:\n         # TODO: remove when removing support for Pydantic < 1.0.0\n         from pydantic.types import EmailStr  # type: ignore\n except ImportError:  # pragma: no cover\n-    logger.info(\n+\n+    class EmailStr(str):  # type: ignore\n+        @classmethod\n+        def __get_validators__(cls) -> Iterable[Callable]:\n+            yield cls.validate\n+\n+        @classmethod\n+        def validate(cls, v: Any) -> str:\n+            logger.warning(\n                 \"email-validator not installed, email fields will be treated as str.\\n\"\n                 \"To install, run: pip install email-validator\"\n             )\n-\n-    class EmailStr(str):  # type: ignore\n-        pass\n+            return str(v)\n \n \n class Contact(BaseModel):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#d91b2b3ee8fa428544769aba664aedbf9ed6511a", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 209 | Contributors (this commit): 1 | Commits (past 90d): 8 | Contributors (cumulative): 1 | DMM Complexity: None\n\nDIFF:\n@@ -1,6 +1,6 @@\n \"\"\"FastAPI framework, high performance, easy to learn, fast to code, ready for production\"\"\"\n \n-__version__ = \"0.47.1\"\n+__version__ = \"0.48.0\"\n \n from starlette.background import BackgroundTasks\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#e0c3519b948645cbb3456a4f1ef58a84b2a7bf7b", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 25 | Lines Deleted: 3 | Files Changed: 2 | Hunks: 2 | Methods Changed: 3 | Complexity Δ (Sum/Max): 1/2 | Churn Δ: 28 | Churn Cumulative: 3337 | Contributors (this commit): 15 | Commits (past 90d): 9 | Contributors (cumulative): 16 | DMM Complexity: 1.0\n\nDIFF:\n@@ -335,9 +335,7 @@ class APIRoute(routing.Route):\n         self.include_in_schema = include_in_schema\n         self.response_class = response_class\n \n-        assert inspect.isfunction(endpoint) or inspect.ismethod(\n-            endpoint\n-        ), f\"An endpoint must be a function or method\"\n+        assert callable(endpoint), f\"An endpoint must be a callable\"\n         self.dependant = get_dependant(path=self.path_format, call=self.endpoint)\n         for depends in self.dependencies[::-1]:\n             self.dependant.dependencies.insert(\n\n@@ -0,0 +1,24 @@\n+from functools import partial\n+\n+from fastapi import FastAPI\n+from starlette.testclient import TestClient\n+\n+\n+def main(some_arg, q: str = None):\n+    return {\"some_arg\": some_arg, \"q\": q}\n+\n+\n+endpoint = partial(main, \"foo\")\n+\n+app = FastAPI()\n+\n+app.get(\"/\")(endpoint)\n+\n+\n+client = TestClient(app)\n+\n+\n+def test_partial():\n+    response = client.get(\"/?q=bar\")\n+    data = response.json()\n+    assert data == {\"some_arg\": \"foo\", \"q\": \"bar\"}\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#3c1803897f47c0accef75e7b5c22761000202921", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 26 | Lines Deleted: 1 | Files Changed: 2 | Hunks: 6 | Methods Changed: 3 | Complexity Δ (Sum/Max): 4/3 | Churn Δ: 27 | Churn Cumulative: 526 | Contributors (this commit): 7 | Commits (past 90d): 8 | Contributors (cumulative): 11 | DMM Complexity: 0.8666666666666667\n\nDIFF:\n@@ -1,4 +1,5 @@\n from enum import Enum\n+from pathlib import PurePath\n from types import GeneratorType\n from typing import Any, Callable, Dict, List, Set, Tuple, Union\n \n@@ -73,6 +74,8 @@ def jsonable_encoder(\n         )\n     if isinstance(obj, Enum):\n         return obj.value\n+    if isinstance(obj, PurePath):\n+        return str(obj)\n     if isinstance(obj, (str, int, float, type(None))):\n         return obj\n     if isinstance(obj, dict):\n\n@@ -1,9 +1,10 @@\n from datetime import datetime, timezone\n from enum import Enum\n+from pathlib import PurePath, PurePosixPath, PureWindowsPath\n \n import pytest\n from fastapi.encoders import jsonable_encoder\n-from pydantic import BaseModel, ValidationError\n+from pydantic import BaseModel, ValidationError, create_model\n \n try:\n     from pydantic import Field\n@@ -69,6 +70,19 @@ class ModelWithAlias(BaseModel):\n     foo: str = Field(..., alias=\"Foo\")\n \n \n+@pytest.fixture(\n+    name=\"model_with_path\", params=[PurePath, PurePosixPath, PureWindowsPath]\n+)\n+def fixture_model_with_path(request):\n+    class Config:\n+        arbitrary_types_allowed = True\n+\n+    ModelWithPath = create_model(\n+        \"ModelWithPath\", path=(request.param, ...), __config__=Config\n+    )\n+    return ModelWithPath(path=request.param(\"/foo\", \"bar\"))\n+\n+\n def test_encode_class():\n     person = Person(name=\"Foo\")\n     pet = Pet(owner=person, name=\"Firulais\")\n@@ -120,3 +134,11 @@ def test_custom_encoders():\n         instance, custom_encoder={safe_datetime: lambda o: o.isoformat()}\n     )\n     assert encoded_instance[\"dt_field\"] == instance.dt_field.isoformat()\n+\n+\n+def test_encode_model_with_path(model_with_path):\n+    if isinstance(model_with_path.path, PureWindowsPath):\n+        expected = \"\\\\foo\\\\bar\"\n+    else:\n+        expected = \"/foo/bar\"\n+    assert jsonable_encoder(model_with_path) == {\"path\": expected}\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#9c3c9b6e78768374868d690bc05918d58481e880", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 211 | Contributors (this commit): 1 | Commits (past 90d): 9 | Contributors (cumulative): 1 | DMM Complexity: None\n\nDIFF:\n@@ -1,6 +1,6 @@\n \"\"\"FastAPI framework, high performance, easy to learn, fast to code, ready for production\"\"\"\n \n-__version__ = \"0.48.0\"\n+__version__ = \"0.49.0\"\n \n from starlette.background import BackgroundTasks\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#74c4d1c1dbe6bfdb05d6e4fc767ffe062398f0a3", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 96 | Lines Deleted: 1 | Files Changed: 2 | Hunks: 2 | Methods Changed: 5 | Complexity Δ (Sum/Max): 5/4 | Churn Δ: 97 | Churn Cumulative: 1022 | Contributors (this commit): 14 | Commits (past 90d): 3 | Contributors (cumulative): 15 | DMM Complexity: 0.8461538461538461\n\nDIFF:\n@@ -180,7 +180,9 @@ def get_openapi_path(\n             operation_parameters = get_openapi_operation_parameters(all_route_params)\n             parameters.extend(operation_parameters)\n             if parameters:\n-                operation[\"parameters\"] = parameters\n+                operation[\"parameters\"] = list(\n+                    {param[\"name\"]: param for param in parameters}.values()\n+                )\n             if method in METHODS_WITH_BODY:\n                 request_body_oai = get_openapi_operation_request_body(\n                     body_field=route.body_field, model_name_map=model_name_map\n\n@@ -0,0 +1,93 @@\n+from fastapi import Depends, FastAPI\n+from starlette.testclient import TestClient\n+\n+app = FastAPI()\n+\n+\n+async def user_exists(user_id: int):\n+    return True\n+\n+\n+@app.get(\"/users/{user_id}\", dependencies=[Depends(user_exists)])\n+async def read_users(user_id: int):\n+    pass\n+\n+\n+client = TestClient(app)\n+\n+openapi_schema = {\n+    \"openapi\": \"3.0.2\",\n+    \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n+    \"paths\": {\n+        \"/users/{user_id}\": {\n+            \"get\": {\n+                \"summary\": \"Read Users\",\n+                \"operationId\": \"read_users_users__user_id__get\",\n+                \"parameters\": [\n+                    {\n+                        \"required\": True,\n+                        \"schema\": {\"title\": \"User Id\", \"type\": \"integer\"},\n+                        \"name\": \"user_id\",\n+                        \"in\": \"path\",\n+                    },\n+                ],\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                    },\n+                    \"422\": {\n+                        \"description\": \"Validation Error\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\n+                                    \"$ref\": \"#/components/schemas/HTTPValidationError\"\n+                                }\n+                            }\n+                        },\n+                    },\n+                },\n+            }\n+        }\n+    },\n+    \"components\": {\n+        \"schemas\": {\n+            \"HTTPValidationError\": {\n+                \"title\": \"HTTPValidationError\",\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"detail\": {\n+                        \"title\": \"Detail\",\n+                        \"type\": \"array\",\n+                        \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n+                    }\n+                },\n+            },\n+            \"ValidationError\": {\n+                \"title\": \"ValidationError\",\n+                \"required\": [\"loc\", \"msg\", \"type\"],\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"loc\": {\n+                        \"title\": \"Location\",\n+                        \"type\": \"array\",\n+                        \"items\": {\"type\": \"string\"},\n+                    },\n+                    \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n+                    \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n+                },\n+            },\n+        }\n+    },\n+}\n+\n+\n+def test_reused_param():\n+    response = client.get(\"/openapi.json\")\n+    data = response.json()\n+    assert data == openapi_schema\n+\n+\n+def test_read_users():\n+    response = client.get(\"/users/42\")\n+    assert response.status_code == 200\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#9958d9312005f569ad310f71a503186a7fac83db", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 213 | Contributors (this commit): 1 | Commits (past 90d): 8 | Contributors (cumulative): 1 | DMM Complexity: None\n\nDIFF:\n@@ -1,6 +1,6 @@\n \"\"\"FastAPI framework, high performance, easy to learn, fast to code, ready for production\"\"\"\n \n-__version__ = \"0.49.0\"\n+__version__ = \"0.49.1\"\n \n from starlette.background import BackgroundTasks\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#afad59dfbb0a74a02a6aeefebf0eefbfff228f7b", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 276 | Lines Deleted: 116 | Files Changed: 6 | Hunks: 28 | Methods Changed: 21 | Complexity Δ (Sum/Max): 14/8 | Churn Δ: 392 | Churn Cumulative: 5579 | Contributors (this commit): 27 | Commits (past 90d): 19 | Contributors (cumulative): 43 | DMM Complexity: 1.0\n\nDIFF:\n@@ -27,7 +27,12 @@ from fastapi.dependencies.models import Dependant, SecurityRequirement\n from fastapi.security.base import SecurityBase\n from fastapi.security.oauth2 import OAuth2, SecurityScopes\n from fastapi.security.open_id_connect_url import OpenIdConnect\n-from fastapi.utils import PYDANTIC_1, get_field_info, get_path_param_names\n+from fastapi.utils import (\n+    PYDANTIC_1,\n+    create_response_field,\n+    get_field_info,\n+    get_path_param_names,\n+)\n from pydantic import BaseConfig, BaseModel, create_model\n from pydantic.error_wrappers import ErrorWrapper\n from pydantic.errors import MissingError\n@@ -362,30 +367,14 @@ def get_param_field(\n         alias = param.name.replace(\"_\", \"-\")\n     else:\n         alias = field_info.alias or param.name\n-    if PYDANTIC_1:\n-        field = ModelField(\n+    field = create_response_field(\n         name=param.name,\n         type_=annotation,\n         default=None if required else default_value,\n         alias=alias,\n         required=required,\n-            model_config=BaseConfig,\n-            class_validators={},\n         field_info=field_info,\n     )\n-        # TODO: remove when removing support for Pydantic < 1.2.0\n-        field.required = required\n-    else:  # pragma: nocover\n-        field = ModelField(  # type: ignore\n-            name=param.name,\n-            type_=annotation,\n-            default=None if required else default_value,\n-            alias=alias,\n-            required=required,\n-            model_config=BaseConfig,\n-            class_validators={},\n-            schema=field_info,\n-        )\n     field.required = required\n     if not had_schema and not is_scalar_field(field=field):\n         if PYDANTIC_1:\n@@ -694,8 +683,7 @@ def get_schema_compatible_field(*, field: ModelField) -> ModelField:\n         use_type: type = bytes\n         if field.shape in sequence_shapes:\n             use_type = List[bytes]\n-        if PYDANTIC_1:\n-            out_field = ModelField(\n+        out_field = create_response_field(\n             name=field.name,\n             type_=use_type,\n             class_validators=field.class_validators,\n@@ -703,18 +691,7 @@ def get_schema_compatible_field(*, field: ModelField) -> ModelField:\n             default=field.default,\n             required=field.required,\n             alias=field.alias,\n-                field_info=field.field_info,\n-            )\n-        else:  # pragma: nocover\n-            out_field = ModelField(  # type: ignore\n-                name=field.name,\n-                type_=use_type,\n-                class_validators=field.class_validators,\n-                model_config=field.model_config,\n-                default=field.default,\n-                required=field.required,\n-                alias=field.alias,\n-                schema=field.schema,  # type: ignore\n+            field_info=field.field_info if PYDANTIC_1 else field.schema,  # type: ignore\n         )\n \n     return out_field\n@@ -754,26 +731,10 @@ def get_body_field(*, dependant: Dependant, name: str) -> Optional[ModelField]:\n         ]\n         if len(set(body_param_media_types)) == 1:\n             BodyFieldInfo_kwargs[\"media_type\"] = body_param_media_types[0]\n-    if PYDANTIC_1:\n-        field = ModelField(\n+    return create_response_field(\n         name=\"body\",\n         type_=BodyModel,\n-            default=None,\n         required=required,\n-            model_config=BaseConfig,\n-            class_validators={},\n         alias=\"body\",\n         field_info=BodyFieldInfo(**BodyFieldInfo_kwargs),\n     )\n-    else:  # pragma: nocover\n-        field = ModelField(  # type: ignore\n-            name=\"body\",\n-            type_=BodyModel,\n-            default=None,\n-            required=required,\n-            model_config=BaseConfig,\n-            class_validators={},\n-            alias=\"body\",\n-            schema=BodyFieldInfo(**BodyFieldInfo_kwargs),\n-        )\n-    return field\n\n@@ -20,6 +20,12 @@ RequestErrorModel = create_model(\"Request\")\n WebSocketErrorModel = create_model(\"WebSocket\")\n \n \n+class FastAPIError(RuntimeError):\n+    \"\"\"\n+    A generic, FastAPI-specific error.\n+    \"\"\"\n+\n+\n class RequestValidationError(ValidationError):\n     def __init__(self, errors: Sequence[ErrorList], *, body: Any = None) -> None:\n         self.body = body\n\n@@ -17,13 +17,13 @@ from fastapi.openapi.constants import STATUS_CODES_WITH_NO_BODY\n from fastapi.utils import (\n     PYDANTIC_1,\n     create_cloned_field,\n+    create_response_field,\n     generate_operation_id_for_path,\n     get_field_info,\n     warning_response_model_skip_defaults_deprecated,\n )\n-from pydantic import BaseConfig, BaseModel\n+from pydantic import BaseModel\n from pydantic.error_wrappers import ErrorWrapper, ValidationError\n-from pydantic.utils import lenient_issubclass\n from starlette import routing\n from starlette.concurrency import run_in_threadpool\n from starlette.exceptions import HTTPException\n@@ -243,25 +243,8 @@ class APIRoute(routing.Route):\n                 status_code not in STATUS_CODES_WITH_NO_BODY\n             ), f\"Status code {status_code} must not have a response body\"\n             response_name = \"Response_\" + self.unique_id\n-            if PYDANTIC_1:\n-                self.response_field: Optional[ModelField] = ModelField(\n-                    name=response_name,\n-                    type_=self.response_model,\n-                    class_validators={},\n-                    default=None,\n-                    required=False,\n-                    model_config=BaseConfig,\n-                    field_info=FieldInfo(None),\n-                )\n-            else:\n-                self.response_field: Optional[ModelField] = ModelField(  # type: ignore  # pragma: nocover\n-                    name=response_name,\n-                    type_=self.response_model,\n-                    class_validators={},\n-                    default=None,\n-                    required=False,\n-                    model_config=BaseConfig,\n-                    schema=FieldInfo(None),\n+            self.response_field = create_response_field(\n+                name=response_name, type_=self.response_model\n             )\n             # Create a clone of the field, so that a Pydantic submodel is not returned\n             # as is just because it's an instance of a subclass of a more limited class\n@@ -274,7 +257,7 @@ class APIRoute(routing.Route):\n                 ModelField\n             ] = create_cloned_field(self.response_field)\n         else:\n-            self.response_field = None\n+            self.response_field = None  # type: ignore\n             self.secure_cloned_response_field = None\n         self.status_code = status_code\n         self.tags = tags or []\n@@ -297,30 +280,8 @@ class APIRoute(routing.Route):\n                 assert (\n                     additional_status_code not in STATUS_CODES_WITH_NO_BODY\n                 ), f\"Status code {additional_status_code} must not have a response body\"\n-                assert lenient_issubclass(\n-                    model, BaseModel\n-                ), \"A response model must be a Pydantic model\"\n                 response_name = f\"Response_{additional_status_code}_{self.unique_id}\"\n-                if PYDANTIC_1:\n-                    response_field = ModelField(\n-                        name=response_name,\n-                        type_=model,\n-                        class_validators=None,\n-                        default=None,\n-                        required=False,\n-                        model_config=BaseConfig,\n-                        field_info=FieldInfo(None),\n-                    )\n-                else:\n-                    response_field = ModelField(  # type: ignore  # pragma: nocover\n-                        name=response_name,\n-                        type_=model,\n-                        class_validators=None,\n-                        default=None,\n-                        required=False,\n-                        model_config=BaseConfig,\n-                        schema=FieldInfo(None),\n-                    )\n+                response_field = create_response_field(name=response_name, type_=model)\n                 response_fields[additional_status_code] = response_field\n         if response_fields:\n             self.response_fields: Dict[Union[int, str], ModelField] = response_fields\n\n@@ -1,17 +1,20 @@\n+import functools\n import re\n from dataclasses import is_dataclass\n-from typing import Any, Dict, List, Sequence, Set, Type, cast\n+from typing import Any, Dict, List, Optional, Sequence, Set, Type, Union, cast\n \n+import fastapi\n from fastapi import routing\n from fastapi.logger import logger\n from fastapi.openapi.constants import REF_PREFIX\n from pydantic import BaseConfig, BaseModel, create_model\n+from pydantic.class_validators import Validator\n from pydantic.schema import get_flat_models_from_fields, model_process_schema\n from pydantic.utils import lenient_issubclass\n from starlette.routing import BaseRoute\n \n try:\n-    from pydantic.fields import FieldInfo, ModelField\n+    from pydantic.fields import FieldInfo, ModelField, UndefinedType\n \n     PYDANTIC_1 = True\n except ImportError:  # pragma: nocover\n@@ -19,6 +22,10 @@ except ImportError:  # pragma: nocover\n     from pydantic.fields import Field as ModelField  # type: ignore\n     from pydantic import Schema as FieldInfo  # type: ignore\n \n+    class UndefinedType:  # type: ignore\n+        def __repr__(self) -> str:\n+            return \"PydanticUndefined\"\n+\n     logger.warning(\n         \"Pydantic versions < 1.0.0 are deprecated in FastAPI and support will be \"\n         \"removed soon.\"\n@@ -86,6 +93,44 @@ def get_path_param_names(path: str) -> Set[str]:\n     return {item.strip(\"{}\") for item in re.findall(\"{[^}]*}\", path)}\n \n \n+def create_response_field(\n+    name: str,\n+    type_: Type[Any],\n+    class_validators: Optional[Dict[str, Validator]] = None,\n+    default: Optional[Any] = None,\n+    required: Union[bool, UndefinedType] = False,\n+    model_config: Type[BaseConfig] = BaseConfig,\n+    field_info: Optional[FieldInfo] = None,\n+    alias: Optional[str] = None,\n+) -> ModelField:\n+    \"\"\"\n+    Create a new response field. Raises if type_ is invalid.\n+    \"\"\"\n+    class_validators = class_validators or {}\n+    field_info = field_info or FieldInfo(None)\n+\n+    response_field = functools.partial(\n+        ModelField,\n+        name=name,\n+        type_=type_,\n+        class_validators=class_validators,\n+        default=default,\n+        required=required,\n+        model_config=model_config,\n+        alias=alias,\n+    )\n+\n+    try:\n+        if PYDANTIC_1:\n+            return response_field(field_info=field_info)\n+        else:  # pragma: nocover\n+            return response_field(schema=field_info)\n+    except RuntimeError:\n+        raise fastapi.exceptions.FastAPIError(\n+            f\"Invalid args for response field! Hint: check that {type_} is a valid pydantic field type\"\n+        )\n+\n+\n def create_cloned_field(field: ModelField) -> ModelField:\n     original_type = field.type_\n     if is_dataclass(original_type) and hasattr(original_type, \"__pydantic_model__\"):\n@@ -96,26 +141,8 @@ def create_cloned_field(field: ModelField) -> ModelField:\n         use_type = create_model(original_type.__name__, __base__=original_type)\n         for f in original_type.__fields__.values():\n             use_type.__fields__[f.name] = create_cloned_field(f)\n-    if PYDANTIC_1:\n-        new_field = ModelField(\n-            name=field.name,\n-            type_=use_type,\n-            class_validators={},\n-            default=None,\n-            required=False,\n-            model_config=BaseConfig,\n-            field_info=FieldInfo(None),\n-        )\n-    else:  # pragma: nocover\n-        new_field = ModelField(  # type: ignore\n-            name=field.name,\n-            type_=use_type,\n-            class_validators={},\n-            default=None,\n-            required=False,\n-            model_config=BaseConfig,\n-            schema=FieldInfo(None),\n-        )\n+\n+    new_field = create_response_field(name=field.name, type_=use_type)\n     new_field.has_alias = field.has_alias\n     new_field.alias = field.alias\n     new_field.class_validators = field.class_validators\n\n@@ -0,0 +1,45 @@\n+from typing import List\n+\n+import pytest\n+from fastapi import FastAPI\n+from fastapi.exceptions import FastAPIError\n+\n+\n+class NonPydanticModel:\n+    pass\n+\n+\n+def test_invalid_response_model_raises():\n+    with pytest.raises(FastAPIError):\n+        app = FastAPI()\n+\n+        @app.get(\"/\", response_model=NonPydanticModel)\n+        def read_root():\n+            pass  # pragma: nocover\n+\n+\n+def test_invalid_response_model_sub_type_raises():\n+    with pytest.raises(FastAPIError):\n+        app = FastAPI()\n+\n+        @app.get(\"/\", response_model=List[NonPydanticModel])\n+        def read_root():\n+            pass  # pragma: nocover\n+\n+\n+def test_invalid_response_model_in_responses_raises():\n+    with pytest.raises(FastAPIError):\n+        app = FastAPI()\n+\n+        @app.get(\"/\", responses={\"500\": {\"model\": NonPydanticModel}})\n+        def read_root():\n+            pass  # pragma: nocover\n+\n+\n+def test_invalid_response_model_sub_type_in_responses_raises():\n+    with pytest.raises(FastAPIError):\n+        app = FastAPI()\n+\n+        @app.get(\"/\", responses={\"500\": {\"model\": List[NonPydanticModel]}})\n+        def read_root():\n+            pass  # pragma: nocover\n\n@@ -0,0 +1,160 @@\n+from typing import List\n+\n+from fastapi import FastAPI\n+from pydantic import BaseModel\n+from starlette.testclient import TestClient\n+\n+\n+class Model(BaseModel):\n+    name: str\n+\n+\n+app = FastAPI()\n+\n+\n+@app.get(\"/valid1\", responses={\"500\": {\"model\": int}})\n+def valid1():\n+    pass\n+\n+\n+@app.get(\"/valid2\", responses={\"500\": {\"model\": List[int]}})\n+def valid2():\n+    pass\n+\n+\n+@app.get(\"/valid3\", responses={\"500\": {\"model\": Model}})\n+def valid3():\n+    pass\n+\n+\n+@app.get(\"/valid4\", responses={\"500\": {\"model\": List[Model]}})\n+def valid4():\n+    pass\n+\n+\n+openapi_schema = {\n+    \"openapi\": \"3.0.2\",\n+    \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n+    \"paths\": {\n+        \"/valid1\": {\n+            \"get\": {\n+                \"summary\": \"Valid1\",\n+                \"operationId\": \"valid1_valid1_get\",\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                    },\n+                    \"500\": {\n+                        \"description\": \"Internal Server Error\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\n+                                    \"title\": \"Response 500 Valid1 Valid1 Get\",\n+                                    \"type\": \"integer\",\n+                                }\n+                            }\n+                        },\n+                    },\n+                },\n+            }\n+        },\n+        \"/valid2\": {\n+            \"get\": {\n+                \"summary\": \"Valid2\",\n+                \"operationId\": \"valid2_valid2_get\",\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                    },\n+                    \"500\": {\n+                        \"description\": \"Internal Server Error\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\n+                                    \"title\": \"Response 500 Valid2 Valid2 Get\",\n+                                    \"type\": \"array\",\n+                                    \"items\": {\"type\": \"integer\"},\n+                                }\n+                            }\n+                        },\n+                    },\n+                },\n+            }\n+        },\n+        \"/valid3\": {\n+            \"get\": {\n+                \"summary\": \"Valid3\",\n+                \"operationId\": \"valid3_valid3_get\",\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                    },\n+                    \"500\": {\n+                        \"description\": \"Internal Server Error\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\"$ref\": \"#/components/schemas/Model\"}\n+                            }\n+                        },\n+                    },\n+                },\n+            }\n+        },\n+        \"/valid4\": {\n+            \"get\": {\n+                \"summary\": \"Valid4\",\n+                \"operationId\": \"valid4_valid4_get\",\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                    },\n+                    \"500\": {\n+                        \"description\": \"Internal Server Error\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\n+                                    \"title\": \"Response 500 Valid4 Valid4 Get\",\n+                                    \"type\": \"array\",\n+                                    \"items\": {\"$ref\": \"#/components/schemas/Model\"},\n+                                }\n+                            }\n+                        },\n+                    },\n+                },\n+            }\n+        },\n+    },\n+    \"components\": {\n+        \"schemas\": {\n+            \"Model\": {\n+                \"title\": \"Model\",\n+                \"required\": [\"name\"],\n+                \"type\": \"object\",\n+                \"properties\": {\"name\": {\"title\": \"Name\", \"type\": \"string\"}},\n+            }\n+        }\n+    },\n+}\n+\n+client = TestClient(app)\n+\n+\n+def test_openapi_schema():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200\n+    assert response.json() == openapi_schema\n+\n+\n+def test_path_operations():\n+    response = client.get(\"/valid1\")\n+    assert response.status_code == 200\n+    response = client.get(\"/valid2\")\n+    assert response.status_code == 200\n+    response = client.get(\"/valid3\")\n+    assert response.status_code == 200\n+    response = client.get(\"/valid4\")\n+    assert response.status_code == 200\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#1ce67887b942cb87e3914f70e7407784be139a1e", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 17 | Lines Deleted: 5 | Files Changed: 1 | Hunks: 2 | Methods Changed: 3 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 22 | Churn Cumulative: 3386 | Contributors (this commit): 17 | Commits (past 90d): 8 | Contributors (cumulative): 17 | DMM Complexity: 1.0\n\nDIFF:\n@@ -87,6 +87,19 @@ async def serialize_response(\n         return jsonable_encoder(response)\n \n \n+async def run_endpoint_function(\n+    *, dependant: Dependant, values: Dict[str, Any], is_coroutine: bool\n+) -> Any:\n+    # Only called by get_request_handler. Has been split into its own function to\n+    # facilitate profiling endpoints, since inner functions are harder to profile.\n+    assert dependant.call is not None, \"dependant.call must be a function\"\n+\n+    if is_coroutine:\n+        return await dependant.call(**values)\n+    else:\n+        return await run_in_threadpool(dependant.call, **values)\n+\n+\n def get_request_handler(\n     dependant: Dependant,\n     body_field: ModelField = None,\n@@ -128,11 +141,10 @@ def get_request_handler(\n         if errors:\n             raise RequestValidationError(errors, body=body)\n         else:\n-            assert dependant.call is not None, \"dependant.call must be a function\"\n-            if is_coroutine:\n-                raw_response = await dependant.call(**values)\n-            else:\n-                raw_response = await run_in_threadpool(dependant.call, **values)\n+            raw_response = await run_endpoint_function(\n+                dependant=dependant, values=values, is_coroutine=is_coroutine\n+            )\n+\n             if isinstance(raw_response, Response):\n                 if raw_response.background is None:\n                     raw_response.background = background_tasks\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#e26f94018c1a0c2be1c683247749edac2f607951", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 10 | Lines Deleted: 8 | Files Changed: 1 | Hunks: 8 | Methods Changed: 4 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 18 | Churn Cumulative: 3404 | Contributors (this commit): 17 | Commits (past 90d): 9 | Contributors (cumulative): 17 | DMM Complexity: 0.0\n\nDIFF:\n@@ -50,7 +50,7 @@ except ImportError:  # pragma: nocover\n async def serialize_response(\n     *,\n     field: ModelField = None,\n-    response: Response,\n+    response_content: Any,\n     include: Union[SetIntStr, DictIntStrAny] = None,\n     exclude: Union[SetIntStr, DictIntStrAny] = set(),\n     by_alias: bool = True,\n@@ -59,16 +59,18 @@ async def serialize_response(\n ) -> Any:\n     if field:\n         errors = []\n-        if exclude_unset and isinstance(response, BaseModel):\n+        if exclude_unset and isinstance(response_content, BaseModel):\n             if PYDANTIC_1:\n-                response = response.dict(exclude_unset=exclude_unset)\n+                response_content = response_content.dict(exclude_unset=exclude_unset)\n             else:\n-                response = response.dict(skip_defaults=exclude_unset)  # pragma: nocover\n+                response_content = response_content.dict(\n+                    skip_defaults=exclude_unset\n+                )  # pragma: nocover\n         if is_coroutine:\n-            value, errors_ = field.validate(response, {}, loc=(\"response\",))\n+            value, errors_ = field.validate(response_content, {}, loc=(\"response\",))\n         else:\n             value, errors_ = await run_in_threadpool(\n-                field.validate, response, {}, loc=(\"response\",)\n+                field.validate, response_content, {}, loc=(\"response\",)\n             )\n         if isinstance(errors_, ErrorWrapper):\n             errors.append(errors_)\n@@ -84,7 +86,7 @@ async def serialize_response(\n             exclude_unset=exclude_unset,\n         )\n     else:\n-        return jsonable_encoder(response)\n+        return jsonable_encoder(response_content)\n \n \n async def run_endpoint_function(\n@@ -151,7 +153,7 @@ def get_request_handler(\n                 return raw_response\n             response_data = await serialize_response(\n                 field=response_field,\n-                response=raw_response,\n+                response_content=raw_response,\n                 include=response_model_include,\n                 exclude=response_model_exclude,\n                 by_alias=response_model_by_alias,\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#d4ddf4e62a2188082b0be3cfb5372c51c3395280", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 215 | Contributors (this commit): 1 | Commits (past 90d): 9 | Contributors (cumulative): 1 | DMM Complexity: None\n\nDIFF:\n@@ -1,6 +1,6 @@\n \"\"\"FastAPI framework, high performance, easy to learn, fast to code, ready for production\"\"\"\n \n-__version__ = \"0.49.1\"\n+__version__ = \"0.49.2\"\n \n from starlette.background import BackgroundTasks\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#4e8080f29013dcb6850518bb9011bf82c9081828", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 117 | Lines Deleted: 9 | Files Changed: 4 | Hunks: 13 | Methods Changed: 14 | Complexity Δ (Sum/Max): 12/8 | Churn Δ: 126 | Churn Cumulative: 5601 | Contributors (this commit): 21 | Commits (past 90d): 14 | Contributors (cumulative): 32 | DMM Complexity: 0.0\n\nDIFF:\n@@ -18,8 +18,8 @@ from fastapi.params import Depends\n from fastapi.utils import warning_response_model_skip_defaults_deprecated\n from starlette.applications import Starlette\n from starlette.datastructures import State\n-from starlette.exceptions import ExceptionMiddleware, HTTPException\n-from starlette.middleware.errors import ServerErrorMiddleware\n+from starlette.exceptions import HTTPException\n+from starlette.middleware import Middleware\n from starlette.requests import Request\n from starlette.responses import HTMLResponse, JSONResponse, Response\n from starlette.routing import BaseRoute\n@@ -29,9 +29,9 @@ from starlette.types import Receive, Scope, Send\n class FastAPI(Starlette):\n     def __init__(\n         self,\n+        *,\n         debug: bool = False,\n         routes: List[BaseRoute] = None,\n-        template_directory: str = None,\n         title: str = \"FastAPI\",\n         description: str = \"\",\n         version: str = \"0.1.0\",\n@@ -42,19 +42,28 @@ class FastAPI(Starlette):\n         redoc_url: Optional[str] = \"/redoc\",\n         swagger_ui_oauth2_redirect_url: Optional[str] = \"/docs/oauth2-redirect\",\n         swagger_ui_init_oauth: Optional[dict] = None,\n+        middleware: Sequence[Middleware] = None,\n+        exception_handlers: Dict[Union[int, Type[Exception]], Callable] = None,\n+        on_startup: Sequence[Callable] = None,\n+        on_shutdown: Sequence[Callable] = None,\n         **extra: Dict[str, Any],\n     ) -> None:\n         self.default_response_class = default_response_class\n         self._debug = debug\n         self.state = State()\n         self.router: routing.APIRouter = routing.APIRouter(\n-            routes, dependency_overrides_provider=self\n+            routes,\n+            dependency_overrides_provider=self,\n+            on_startup=on_startup,\n+            on_shutdown=on_shutdown,\n         )\n-        self.exception_middleware = ExceptionMiddleware(self.router, debug=debug)\n-        self.error_middleware = ServerErrorMiddleware(\n-            self.exception_middleware, debug=debug\n+        self.exception_handlers = (\n+            {} if exception_handlers is None else dict(exception_handlers)\n         )\n \n+        self.user_middleware = [] if middleware is None else list(middleware)\n+        self.middleware_stack = self.build_middleware_stack()\n+\n         self.title = title\n         self.description = description\n         self.version = version\n\n@@ -346,9 +346,15 @@ class APIRouter(routing.Router):\n         dependency_overrides_provider: Any = None,\n         route_class: Type[APIRoute] = APIRoute,\n         default_response_class: Type[Response] = None,\n+        on_startup: Sequence[Callable] = None,\n+        on_shutdown: Sequence[Callable] = None,\n     ) -> None:\n         super().__init__(\n-            routes=routes, redirect_slashes=redirect_slashes, default=default\n+            routes=routes,\n+            redirect_slashes=redirect_slashes,\n+            default=default,\n+            on_startup=on_startup,\n+            on_shutdown=on_shutdown,\n         )\n         self.dependency_overrides_provider = dependency_overrides_provider\n         self.route_class = route_class\n@@ -552,6 +558,10 @@ class APIRouter(routing.Router):\n                 self.add_websocket_route(\n                     prefix + route.path, route.endpoint, name=route.name\n                 )\n+        for handler in router.on_startup:\n+            self.add_event_handler(\"startup\", handler)\n+        for handler in router.on_shutdown:\n+            self.add_event_handler(\"shutdown\", handler)\n \n     def get(\n         self,\n\n@@ -21,10 +21,12 @@ client = TestClient(app)\n def test_use_empty():\n     with client:\n         response = client.get(\"/prefix\")\n+        assert response.status_code == 200\n         assert response.json() == [\"OK\"]\n \n         response = client.get(\"/prefix/\")\n-        assert response.status_code == 404\n+        assert response.status_code == 200\n+        assert response.json() == [\"OK\"]\n \n \n def test_include_empty():\n\n@@ -0,0 +1,87 @@\n+from fastapi import APIRouter, FastAPI\n+from pydantic import BaseModel\n+from starlette.testclient import TestClient\n+\n+\n+class State(BaseModel):\n+    app_startup: bool = False\n+    app_shutdown: bool = False\n+    router_startup: bool = False\n+    router_shutdown: bool = False\n+    sub_router_startup: bool = False\n+    sub_router_shutdown: bool = False\n+\n+\n+state = State()\n+\n+app = FastAPI()\n+\n+\n+@app.on_event(\"startup\")\n+def app_startup():\n+    state.app_startup = True\n+\n+\n+@app.on_event(\"shutdown\")\n+def app_shutdown():\n+    state.app_shutdown = True\n+\n+\n+router = APIRouter()\n+\n+\n+@router.on_event(\"startup\")\n+def router_startup():\n+    state.router_startup = True\n+\n+\n+@router.on_event(\"shutdown\")\n+def router_shutdown():\n+    state.router_shutdown = True\n+\n+\n+sub_router = APIRouter()\n+\n+\n+@sub_router.on_event(\"startup\")\n+def sub_router_startup():\n+    state.sub_router_startup = True\n+\n+\n+@sub_router.on_event(\"shutdown\")\n+def sub_router_shutdown():\n+    state.sub_router_shutdown = True\n+\n+\n+@sub_router.get(\"/\")\n+def main():\n+    return {\"message\": \"Hello World\"}\n+\n+\n+router.include_router(sub_router)\n+app.include_router(router)\n+\n+\n+def test_router_events():\n+    assert state.app_startup is False\n+    assert state.router_startup is False\n+    assert state.sub_router_startup is False\n+    assert state.app_shutdown is False\n+    assert state.router_shutdown is False\n+    assert state.sub_router_shutdown is False\n+    with TestClient(app) as client:\n+        assert state.app_startup is True\n+        assert state.router_startup is True\n+        assert state.sub_router_startup is True\n+        assert state.app_shutdown is False\n+        assert state.router_shutdown is False\n+        assert state.sub_router_shutdown is False\n+        response = client.get(\"/\")\n+        assert response.status_code == 200\n+        assert response.json() == {\"message\": \"Hello World\"}\n+    assert state.app_startup is True\n+    assert state.router_startup is True\n+    assert state.sub_router_startup is True\n+    assert state.app_shutdown is True\n+    assert state.router_shutdown is True\n+    assert state.sub_router_shutdown is True\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
