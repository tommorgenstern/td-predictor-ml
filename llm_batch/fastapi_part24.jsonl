{"custom_id": "fastapi#3986f79029be90dd0d505b742988340fde6763fb", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 147 | Contributors (this commit): 1 | Commits (past 90d): 31 | Contributors (cumulative): 1 | DMM Complexity: None\n\nDIFF:\n@@ -1,6 +1,6 @@\n \"\"\"FastAPI framework, high performance, easy to learn, fast to code, ready for production\"\"\"\n \n-__version__ = \"0.24.0\"\n+__version__ = \"0.25.0\"\n \n from starlette.background import BackgroundTasks\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#a49d45eaa9ae255362c40db964dbd03dcbd56983", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 21 | Lines Deleted: 21 | Files Changed: 2 | Hunks: 21 | Methods Changed: 42 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 42 | Churn Cumulative: 4497 | Contributors (this commit): 10 | Commits (past 90d): 38 | Contributors (cumulative): 15 | DMM Complexity: None\n\nDIFF:\n@@ -127,7 +127,7 @@ class FastAPI(Starlette):\n         path: str,\n         endpoint: Callable,\n         *,\n-        response_model: Type[BaseModel] = None,\n+        response_model: Type[Any] = None,\n         status_code: int = 200,\n         tags: List[str] = None,\n         dependencies: List[Depends] = None,\n@@ -173,7 +173,7 @@ class FastAPI(Starlette):\n         self,\n         path: str,\n         *,\n-        response_model: Type[BaseModel] = None,\n+        response_model: Type[Any] = None,\n         status_code: int = 200,\n         tags: List[str] = None,\n         dependencies: List[Depends] = None,\n@@ -252,7 +252,7 @@ class FastAPI(Starlette):\n         self,\n         path: str,\n         *,\n-        response_model: Type[BaseModel] = None,\n+        response_model: Type[Any] = None,\n         status_code: int = 200,\n         tags: List[str] = None,\n         dependencies: List[Depends] = None,\n@@ -295,7 +295,7 @@ class FastAPI(Starlette):\n         self,\n         path: str,\n         *,\n-        response_model: Type[BaseModel] = None,\n+        response_model: Type[Any] = None,\n         status_code: int = 200,\n         tags: List[str] = None,\n         dependencies: List[Depends] = None,\n@@ -338,7 +338,7 @@ class FastAPI(Starlette):\n         self,\n         path: str,\n         *,\n-        response_model: Type[BaseModel] = None,\n+        response_model: Type[Any] = None,\n         status_code: int = 200,\n         tags: List[str] = None,\n         dependencies: List[Depends] = None,\n@@ -381,7 +381,7 @@ class FastAPI(Starlette):\n         self,\n         path: str,\n         *,\n-        response_model: Type[BaseModel] = None,\n+        response_model: Type[Any] = None,\n         status_code: int = 200,\n         tags: List[str] = None,\n         dependencies: List[Depends] = None,\n@@ -424,7 +424,7 @@ class FastAPI(Starlette):\n         self,\n         path: str,\n         *,\n-        response_model: Type[BaseModel] = None,\n+        response_model: Type[Any] = None,\n         status_code: int = 200,\n         tags: List[str] = None,\n         dependencies: List[Depends] = None,\n@@ -467,7 +467,7 @@ class FastAPI(Starlette):\n         self,\n         path: str,\n         *,\n-        response_model: Type[BaseModel] = None,\n+        response_model: Type[Any] = None,\n         status_code: int = 200,\n         tags: List[str] = None,\n         dependencies: List[Depends] = None,\n@@ -510,7 +510,7 @@ class FastAPI(Starlette):\n         self,\n         path: str,\n         *,\n-        response_model: Type[BaseModel] = None,\n+        response_model: Type[Any] = None,\n         status_code: int = 200,\n         tags: List[str] = None,\n         dependencies: List[Depends] = None,\n@@ -553,7 +553,7 @@ class FastAPI(Starlette):\n         self,\n         path: str,\n         *,\n-        response_model: Type[BaseModel] = None,\n+        response_model: Type[Any] = None,\n         status_code: int = 200,\n         tags: List[str] = None,\n         dependencies: List[Depends] = None,\n\n@@ -169,7 +169,7 @@ class APIRoute(routing.Route):\n         path: str,\n         endpoint: Callable,\n         *,\n-        response_model: Type[BaseModel] = None,\n+        response_model: Type[Any] = None,\n         status_code: int = 200,\n         tags: List[str] = None,\n         dependencies: List[params.Depends] = None,\n@@ -282,7 +282,7 @@ class APIRouter(routing.Router):\n         path: str,\n         endpoint: Callable,\n         *,\n-        response_model: Type[BaseModel] = None,\n+        response_model: Type[Any] = None,\n         status_code: int = 200,\n         tags: List[str] = None,\n         dependencies: List[params.Depends] = None,\n@@ -329,7 +329,7 @@ class APIRouter(routing.Router):\n         self,\n         path: str,\n         *,\n-        response_model: Type[BaseModel] = None,\n+        response_model: Type[Any] = None,\n         status_code: int = 200,\n         tags: List[str] = None,\n         dependencies: List[params.Depends] = None,\n@@ -450,7 +450,7 @@ class APIRouter(routing.Router):\n         self,\n         path: str,\n         *,\n-        response_model: Type[BaseModel] = None,\n+        response_model: Type[Any] = None,\n         status_code: int = 200,\n         tags: List[str] = None,\n         dependencies: List[params.Depends] = None,\n@@ -495,7 +495,7 @@ class APIRouter(routing.Router):\n         self,\n         path: str,\n         *,\n-        response_model: Type[BaseModel] = None,\n+        response_model: Type[Any] = None,\n         status_code: int = 200,\n         tags: List[str] = None,\n         dependencies: List[params.Depends] = None,\n@@ -539,7 +539,7 @@ class APIRouter(routing.Router):\n         self,\n         path: str,\n         *,\n-        response_model: Type[BaseModel] = None,\n+        response_model: Type[Any] = None,\n         status_code: int = 200,\n         tags: List[str] = None,\n         dependencies: List[params.Depends] = None,\n@@ -583,7 +583,7 @@ class APIRouter(routing.Router):\n         self,\n         path: str,\n         *,\n-        response_model: Type[BaseModel] = None,\n+        response_model: Type[Any] = None,\n         status_code: int = 200,\n         tags: List[str] = None,\n         dependencies: List[params.Depends] = None,\n@@ -627,7 +627,7 @@ class APIRouter(routing.Router):\n         self,\n         path: str,\n         *,\n-        response_model: Type[BaseModel] = None,\n+        response_model: Type[Any] = None,\n         status_code: int = 200,\n         tags: List[str] = None,\n         dependencies: List[params.Depends] = None,\n@@ -671,7 +671,7 @@ class APIRouter(routing.Router):\n         self,\n         path: str,\n         *,\n-        response_model: Type[BaseModel] = None,\n+        response_model: Type[Any] = None,\n         status_code: int = 200,\n         tags: List[str] = None,\n         dependencies: List[params.Depends] = None,\n@@ -715,7 +715,7 @@ class APIRouter(routing.Router):\n         self,\n         path: str,\n         *,\n-        response_model: Type[BaseModel] = None,\n+        response_model: Type[Any] = None,\n         status_code: int = 200,\n         tags: List[str] = None,\n         dependencies: List[params.Depends] = None,\n@@ -759,7 +759,7 @@ class APIRouter(routing.Router):\n         self,\n         path: str,\n         *,\n-        response_model: Type[BaseModel] = None,\n+        response_model: Type[Any] = None,\n         status_code: int = 200,\n         tags: List[str] = None,\n         dependencies: List[params.Depends] = None,\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#24e9ea28d3d3e4e3e41e1e8166f0bae0bc441bd9", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 101 | Lines Deleted: 0 | Files Changed: 2 | Hunks: 2 | Methods Changed: 8 | Complexity Δ (Sum/Max): 12/6 | Churn Δ: 101 | Churn Cumulative: 101 | Contributors (this commit): 1 | Commits (past 90d): 2 | Contributors (cumulative): 2 | DMM Complexity: 1.0\n\nDIFF:\n@@ -0,0 +1,36 @@\n+from fastapi import FastAPI, Header, HTTPException\n+from pydantic import BaseModel\n+\n+fake_secret_token = \"coneofsilence\"\n+\n+fake_db = {\n+    \"foo\": {\"id\": \"foo\", \"title\": \"Foo\", \"description\": \"There goes my hero\"},\n+    \"bar\": {\"id\": \"bar\", \"title\": \"Bar\", \"description\": \"The bartenders\"},\n+}\n+\n+app = FastAPI()\n+\n+\n+class Item(BaseModel):\n+    id: str\n+    title: str\n+    description: str = None\n+\n+\n+@app.get(\"/items/{item_id}\", response_model=Item)\n+async def read_main(item_id: str, x_token: str = Header(...)):\n+    if x_token != fake_secret_token:\n+        raise HTTPException(status_code=400, detail=\"Invalid X-Token header\")\n+    if item_id not in fake_db:\n+        raise HTTPException(status_code=404, detail=\"Item not found\")\n+    return fake_db[item_id]\n+\n+\n+@app.post(\"/items/\", response_model=Item)\n+async def create_item(item: Item, x_token: str = Header(...)):\n+    if x_token != fake_secret_token:\n+        raise HTTPException(status_code=400, detail=\"Invalid X-Token header\")\n+    if item.id in fake_db:\n+        raise HTTPException(status_code=400, detail=\"Item already exists\")\n+    fake_db[item.id] = item\n+    return item\n\n@@ -0,0 +1,65 @@\n+from starlette.testclient import TestClient\n+\n+from .main_b import app\n+\n+client = TestClient(app)\n+\n+\n+def test_read_item():\n+    response = client.get(\"/items/foo\", headers={\"X-Token\": \"coneofsilence\"})\n+    assert response.status_code == 200\n+    assert response.json() == {\n+        \"id\": \"foo\",\n+        \"title\": \"Foo\",\n+        \"description\": \"There goes my hero\",\n+    }\n+\n+\n+def test_read_item_bad_token():\n+    response = client.get(\"/items/foo\", headers={\"X-Token\": \"hailhydra\"})\n+    assert response.status_code == 400\n+    assert response.json() == {\"detail\": \"Invalid X-Token header\"}\n+\n+\n+def test_read_inexistent_item():\n+    response = client.get(\"/items/baz\", headers={\"X-Token\": \"coneofsilence\"})\n+    assert response.status_code == 404\n+    assert response.json() == {\"detail\": \"Item not found\"}\n+\n+\n+def test_create_item():\n+    response = client.post(\n+        \"/items/\",\n+        headers={\"X-Token\": \"coneofsilence\"},\n+        json={\"id\": \"foobar\", \"title\": \"Foo Bar\", \"description\": \"The Foo Barters\"},\n+    )\n+    assert response.status_code == 200\n+    assert response.json() == {\n+        \"id\": \"foobar\",\n+        \"title\": \"Foo Bar\",\n+        \"description\": \"The Foo Barters\",\n+    }\n+\n+\n+def test_create_item_bad_token():\n+    response = client.post(\n+        \"/items/\",\n+        headers={\"X-Token\": \"hailhydra\"},\n+        json={\"id\": \"bazz\", \"title\": \"Bazz\", \"description\": \"Drop the bazz\"},\n+    )\n+    assert response.status_code == 400\n+    assert response.json() == {\"detail\": \"Invalid X-Token header\"}\n+\n+\n+def test_create_existing_token():\n+    response = client.post(\n+        \"/items/\",\n+        headers={\"X-Token\": \"coneofsilence\"},\n+        json={\n+            \"id\": \"foo\",\n+            \"title\": \"The Foo ID Stealers\",\n+            \"description\": \"There goes my stealer\",\n+        },\n+    )\n+    assert response.status_code == 400\n+    assert response.json() == {\"detail\": \"Item already exists\"}\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#703ade7967cecdcd617189369144dae29a855476", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 102 | Lines Deleted: 2 | Files Changed: 4 | Hunks: 4 | Methods Changed: 5 | Complexity Δ (Sum/Max): 4/3 | Churn Δ: 104 | Churn Cumulative: 2844 | Contributors (this commit): 7 | Commits (past 90d): 28 | Contributors (cumulative): 10 | DMM Complexity: 0.9411764705882353\n\nDIFF:\n@@ -0,0 +1,8 @@\n+from fastapi import FastAPI\n+\n+app = FastAPI()\n+\n+\n+@app.get(\"/files/{file_path:path}\")\n+async def read_user_me(file_path: str):\n+    return {\"file_path\": file_path}\n\n@@ -255,10 +255,11 @@ class APIRoute(routing.Route):\n         assert inspect.isfunction(endpoint) or inspect.ismethod(\n             endpoint\n         ), f\"An endpoint must be a function or method\"\n-        self.dependant = get_dependant(path=path, call=self.endpoint)\n+        self.dependant = get_dependant(path=self.path_format, call=self.endpoint)\n         for depends in self.dependencies[::-1]:\n             self.dependant.dependencies.insert(\n-                0, get_parameterless_sub_dependant(depends=depends, path=path)\n+                0,\n+                get_parameterless_sub_dependant(depends=depends, path=self.path_format),\n             )\n         self.body_field = get_body_field(dependant=self.dependant, name=self.name)\n         self.app = request_response(\n\n\n@@ -0,0 +1,91 @@\n+from starlette.testclient import TestClient\n+\n+from path_params.tutorial004 import app\n+\n+client = TestClient(app)\n+\n+openapi_schema = {\n+    \"openapi\": \"3.0.2\",\n+    \"info\": {\"title\": \"Fast API\", \"version\": \"0.1.0\"},\n+    \"paths\": {\n+        \"/files/{file_path}\": {\n+            \"get\": {\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                    },\n+                    \"422\": {\n+                        \"description\": \"Validation Error\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\n+                                    \"$ref\": \"#/components/schemas/HTTPValidationError\"\n+                                }\n+                            }\n+                        },\n+                    },\n+                },\n+                \"summary\": \"Read User Me\",\n+                \"operationId\": \"read_user_me_files__file_path__get\",\n+                \"parameters\": [\n+                    {\n+                        \"required\": True,\n+                        \"schema\": {\"title\": \"File_Path\", \"type\": \"string\"},\n+                        \"name\": \"file_path\",\n+                        \"in\": \"path\",\n+                    }\n+                ],\n+            }\n+        }\n+    },\n+    \"components\": {\n+        \"schemas\": {\n+            \"ValidationError\": {\n+                \"title\": \"ValidationError\",\n+                \"required\": [\"loc\", \"msg\", \"type\"],\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"loc\": {\n+                        \"title\": \"Location\",\n+                        \"type\": \"array\",\n+                        \"items\": {\"type\": \"string\"},\n+                    },\n+                    \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n+                    \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n+                },\n+            },\n+            \"HTTPValidationError\": {\n+                \"title\": \"HTTPValidationError\",\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"detail\": {\n+                        \"title\": \"Detail\",\n+                        \"type\": \"array\",\n+                        \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n+                    }\n+                },\n+            },\n+        }\n+    },\n+}\n+\n+\n+def test_openapi():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200\n+    assert response.json() == openapi_schema\n+\n+\n+def test_file_path():\n+    response = client.get(\"/files/home/johndoe/myfile.txt\")\n+    print(response.content)\n+    assert response.status_code == 200\n+    assert response.json() == {\"file_path\": \"home/johndoe/myfile.txt\"}\n+\n+\n+def test_root_file_path():\n+    response = client.get(\"/files//home/johndoe/myfile.txt\")\n+    print(response.content)\n+    assert response.status_code == 200\n+    assert response.json() == {\"file_path\": \"/home/johndoe/myfile.txt\"}\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#62af6e0eeb80672158d09260d3f341dcc08616bf", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 409 | Lines Deleted: 29 | Files Changed: 10 | Hunks: 19 | Methods Changed: 30 | Complexity Δ (Sum/Max): 22/4 | Churn Δ: 438 | Churn Cumulative: 4964 | Contributors (this commit): 10 | Commits (past 90d): 49 | Contributors (cumulative): 23 | DMM Complexity: 1.0\n\nDIFF:\n@@ -1,15 +1,26 @@\n from fastapi import FastAPI\n-from starlette.exceptions import HTTPException\n-from starlette.responses import PlainTextResponse\n+from starlette.requests import Request\n+from starlette.responses import JSONResponse\n+\n+\n+class UnicornException(Exception):\n+    def __init__(self, name: str):\n+        self.name = name\n+\n \n app = FastAPI()\n \n \n-@app.exception_handler(HTTPException)\n-async def http_exception(request, exc):\n-    return PlainTextResponse(str(exc.detail), status_code=exc.status_code)\n+@app.exception_handler(UnicornException)\n+async def unicorn_exception_handler(request: Request, exc: UnicornException):\n+    return JSONResponse(\n+        status_code=418,\n+        content={\"message\": f\"Oops! {exc.name} did something. There goes a rainbow...\"},\n+    )\n \n \n-@app.get(\"/\")\n-async def root():\n-    return {\"message\": \"Hello World\"}\n+@app.get(\"/unicorns/{name}\")\n+async def read_unicorn(name: str):\n+    if name == \"yolo\":\n+        raise UnicornException(name=name)\n+    return {\"unicorn_name\": name}\n\n@@ -0,0 +1,23 @@\n+from fastapi import FastAPI, HTTPException\n+from fastapi.exceptions import RequestValidationError\n+from starlette.exceptions import HTTPException as StarletteHTTPException\n+from starlette.responses import PlainTextResponse\n+\n+app = FastAPI()\n+\n+\n+@app.exception_handler(StarletteHTTPException)\n+async def http_exception_handler(request, exc):\n+    return PlainTextResponse(str(exc.detail), status_code=exc.status_code)\n+\n+\n+@app.exception_handler(RequestValidationError)\n+async def validation_exception_handler(request, exc):\n+    return PlainTextResponse(str(exc), status_code=400)\n+\n+\n+@app.get(\"/items/{item_id}\")\n+async def read_item(item_id: int):\n+    if item_id == 3:\n+        raise HTTPException(status_code=418, detail=\"Nope! I don't like 3.\")\n+    return {\"item_id\": item_id}\n\n@@ -0,0 +1,28 @@\n+from fastapi import FastAPI, HTTPException\n+from fastapi.exception_handlers import (\n+    http_exception_handler,\n+    request_validation_exception_handler,\n+)\n+from fastapi.exceptions import RequestValidationError\n+from starlette.exceptions import HTTPException as StarletteHTTPException\n+\n+app = FastAPI()\n+\n+\n+@app.exception_handler(StarletteHTTPException)\n+async def custom_http_exception_handler(request, exc):\n+    print(f\"OMG! An HTTP error!: {exc}\")\n+    return await http_exception_handler(request, exc)\n+\n+\n+@app.exception_handler(RequestValidationError)\n+async def validation_exception_handler(request, exc):\n+    print(f\"OMG! The client sent invalid data!: {exc}\")\n+    return await request_validation_exception_handler(request, exc)\n+\n+\n+@app.get(\"/items/{item_id}\")\n+async def read_item(item_id: int):\n+    if item_id == 3:\n+        raise HTTPException(status_code=418, detail=\"Nope! I don't like 3.\")\n+    return {\"item_id\": item_id}\n\n@@ -1,6 +1,11 @@\n from typing import Any, Callable, Dict, List, Optional, Set, Type, Union\n \n from fastapi import routing\n+from fastapi.exception_handlers import (\n+    http_exception_handler,\n+    request_validation_exception_handler,\n+)\n+from fastapi.exceptions import RequestValidationError\n from fastapi.openapi.docs import (\n     get_redoc_html,\n     get_swagger_ui_html,\n@@ -8,7 +13,6 @@ from fastapi.openapi.docs import (\n )\n from fastapi.openapi.utils import get_openapi\n from fastapi.params import Depends\n-from pydantic import BaseModel\n from starlette.applications import Starlette\n from starlette.exceptions import ExceptionMiddleware, HTTPException\n from starlette.middleware.errors import ServerErrorMiddleware\n@@ -17,16 +21,6 @@ from starlette.responses import HTMLResponse, JSONResponse, Response\n from starlette.routing import BaseRoute\n \n \n-async def http_exception(request: Request, exc: HTTPException) -> JSONResponse:\n-    headers = getattr(exc, \"headers\", None)\n-    if headers:\n-        return JSONResponse(\n-            {\"detail\": exc.detail}, status_code=exc.status_code, headers=headers\n-        )\n-    else:\n-        return JSONResponse({\"detail\": exc.detail}, status_code=exc.status_code)\n-\n-\n class FastAPI(Starlette):\n     def __init__(\n         self,\n@@ -120,7 +114,10 @@ class FastAPI(Starlette):\n                 )\n \n             self.add_route(self.redoc_url, redoc_html, include_in_schema=False)\n-        self.add_exception_handler(HTTPException, http_exception)\n+        self.add_exception_handler(HTTPException, http_exception_handler)\n+        self.add_exception_handler(\n+            RequestValidationError, request_validation_exception_handler\n+        )\n \n     def add_api_route(\n         self,\n\n@@ -0,0 +1,23 @@\n+from fastapi.exceptions import RequestValidationError\n+from starlette.exceptions import HTTPException\n+from starlette.requests import Request\n+from starlette.responses import JSONResponse\n+from starlette.status import HTTP_422_UNPROCESSABLE_ENTITY\n+\n+\n+async def http_exception_handler(request: Request, exc: HTTPException) -> JSONResponse:\n+    headers = getattr(exc, \"headers\", None)\n+    if headers:\n+        return JSONResponse(\n+            {\"detail\": exc.detail}, status_code=exc.status_code, headers=headers\n+        )\n+    else:\n+        return JSONResponse({\"detail\": exc.detail}, status_code=exc.status_code)\n+\n+\n+async def request_validation_exception_handler(\n+    request: Request, exc: RequestValidationError\n+) -> JSONResponse:\n+    return JSONResponse(\n+        status_code=HTTP_422_UNPROCESSABLE_ENTITY, content={\"detail\": exc.errors()}\n+    )\n\n@@ -1,3 +1,4 @@\n+from pydantic import ValidationError\n from starlette.exceptions import HTTPException as StarletteHTTPException\n \n \n@@ -7,3 +8,11 @@ class HTTPException(StarletteHTTPException):\n     ) -> None:\n         super().__init__(status_code=status_code, detail=detail)\n         self.headers = headers\n+\n+\n+class RequestValidationError(ValidationError):\n+    pass\n+\n+\n+class WebSocketRequestValidationError(ValidationError):\n+    pass\n\n@@ -13,6 +13,7 @@ from fastapi.dependencies.utils import (\n     solve_dependencies,\n )\n from fastapi.encoders import jsonable_encoder\n+from fastapi.exceptions import RequestValidationError, WebSocketRequestValidationError\n from pydantic import BaseConfig, BaseModel, Schema\n from pydantic.error_wrappers import ErrorWrapper, ValidationError\n from pydantic.fields import Field\n@@ -28,7 +29,7 @@ from starlette.routing import (\n     request_response,\n     websocket_session,\n )\n-from starlette.status import HTTP_422_UNPROCESSABLE_ENTITY, WS_1008_POLICY_VIOLATION\n+from starlette.status import WS_1008_POLICY_VIOLATION\n from starlette.websockets import WebSocket\n \n \n@@ -103,10 +104,7 @@ def get_app(\n             request=request, dependant=dependant, body=body\n         )\n         if errors:\n-            errors_out = ValidationError(errors)\n-            raise HTTPException(\n-                status_code=HTTP_422_UNPROCESSABLE_ENTITY, detail=errors_out.errors()\n-            )\n+            raise RequestValidationError(errors)\n         else:\n             assert dependant.call is not None, \"dependant.call must be a function\"\n             if is_coroutine:\n@@ -141,10 +139,7 @@ def get_websocket_app(dependant: Dependant) -> Callable:\n         )\n         if errors:\n             await websocket.close(code=WS_1008_POLICY_VIOLATION)\n-            errors_out = ValidationError(errors)\n-            raise HTTPException(\n-                status_code=HTTP_422_UNPROCESSABLE_ENTITY, detail=errors_out.errors()\n-            )\n+            raise WebSocketRequestValidationError(errors)\n         assert dependant.call is not None, \"dependant.call must me a function\"\n         await dependant.call(**values)\n \n\n@@ -0,0 +1,91 @@\n+from starlette.testclient import TestClient\n+\n+from handling_errors.tutorial003 import app\n+\n+client = TestClient(app)\n+\n+openapi_schema = {\n+    \"openapi\": \"3.0.2\",\n+    \"info\": {\"title\": \"Fast API\", \"version\": \"0.1.0\"},\n+    \"paths\": {\n+        \"/unicorns/{name}\": {\n+            \"get\": {\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                    },\n+                    \"422\": {\n+                        \"description\": \"Validation Error\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\n+                                    \"$ref\": \"#/components/schemas/HTTPValidationError\"\n+                                }\n+                            }\n+                        },\n+                    },\n+                },\n+                \"summary\": \"Read Unicorn\",\n+                \"operationId\": \"read_unicorn_unicorns__name__get\",\n+                \"parameters\": [\n+                    {\n+                        \"required\": True,\n+                        \"schema\": {\"title\": \"Name\", \"type\": \"string\"},\n+                        \"name\": \"name\",\n+                        \"in\": \"path\",\n+                    }\n+                ],\n+            }\n+        }\n+    },\n+    \"components\": {\n+        \"schemas\": {\n+            \"ValidationError\": {\n+                \"title\": \"ValidationError\",\n+                \"required\": [\"loc\", \"msg\", \"type\"],\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"loc\": {\n+                        \"title\": \"Location\",\n+                        \"type\": \"array\",\n+                        \"items\": {\"type\": \"string\"},\n+                    },\n+                    \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n+                    \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n+                },\n+            },\n+            \"HTTPValidationError\": {\n+                \"title\": \"HTTPValidationError\",\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"detail\": {\n+                        \"title\": \"Detail\",\n+                        \"type\": \"array\",\n+                        \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n+                    }\n+                },\n+            },\n+        }\n+    },\n+}\n+\n+\n+def test_openapi_schema():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200\n+    assert response.json() == openapi_schema\n+\n+\n+def test_get():\n+    response = client.get(\"/unicorns/shinny\")\n+    assert response.status_code == 200\n+    assert response.json() == {\"unicorn_name\": \"shinny\"}\n+\n+\n+def test_get_exception():\n+    response = client.get(\"/unicorns/yolo\")\n+    assert response.status_code == 418\n+    assert response.json() == {\n+        \"message\": \"Oops! yolo did something. There goes a rainbow...\"\n+    }\n\n@@ -0,0 +1,100 @@\n+from starlette.testclient import TestClient\n+\n+from handling_errors.tutorial004 import app\n+\n+client = TestClient(app)\n+\n+openapi_schema = {\n+    \"openapi\": \"3.0.2\",\n+    \"info\": {\"title\": \"Fast API\", \"version\": \"0.1.0\"},\n+    \"paths\": {\n+        \"/items/{item_id}\": {\n+            \"get\": {\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                    },\n+                    \"422\": {\n+                        \"description\": \"Validation Error\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\n+                                    \"$ref\": \"#/components/schemas/HTTPValidationError\"\n+                                }\n+                            }\n+                        },\n+                    },\n+                },\n+                \"summary\": \"Read Item\",\n+                \"operationId\": \"read_item_items__item_id__get\",\n+                \"parameters\": [\n+                    {\n+                        \"required\": True,\n+                        \"schema\": {\"title\": \"Item_Id\", \"type\": \"integer\"},\n+                        \"name\": \"item_id\",\n+                        \"in\": \"path\",\n+                    }\n+                ],\n+            }\n+        }\n+    },\n+    \"components\": {\n+        \"schemas\": {\n+            \"ValidationError\": {\n+                \"title\": \"ValidationError\",\n+                \"required\": [\"loc\", \"msg\", \"type\"],\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"loc\": {\n+                        \"title\": \"Location\",\n+                        \"type\": \"array\",\n+                        \"items\": {\"type\": \"string\"},\n+                    },\n+                    \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n+                    \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n+                },\n+            },\n+            \"HTTPValidationError\": {\n+                \"title\": \"HTTPValidationError\",\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"detail\": {\n+                        \"title\": \"Detail\",\n+                        \"type\": \"array\",\n+                        \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n+                    }\n+                },\n+            },\n+        }\n+    },\n+}\n+\n+\n+def test_openapi_schema():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200\n+    assert response.json() == openapi_schema\n+\n+\n+def test_get_validation_error():\n+    response = client.get(\"/items/foo\")\n+    assert response.status_code == 400\n+    validation_error_str_lines = [\n+        b\"1 validation error\",\n+        b\"path -> item_id\",\n+        b\"  value is not a valid integer (type=type_error.integer)\",\n+    ]\n+    assert response.content == b\"\\n\".join(validation_error_str_lines)\n+\n+\n+def test_get_http_error():\n+    response = client.get(\"/items/3\")\n+    assert response.status_code == 418\n+    assert response.content == b\"Nope! I don't like 3.\"\n+\n+\n+def test_get():\n+    response = client.get(\"/items/2\")\n+    assert response.status_code == 200\n+    assert response.json() == {\"item_id\": 2}\n\n@@ -0,0 +1,103 @@\n+from starlette.testclient import TestClient\n+\n+from handling_errors.tutorial005 import app\n+\n+client = TestClient(app)\n+\n+openapi_schema = {\n+    \"openapi\": \"3.0.2\",\n+    \"info\": {\"title\": \"Fast API\", \"version\": \"0.1.0\"},\n+    \"paths\": {\n+        \"/items/{item_id}\": {\n+            \"get\": {\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                    },\n+                    \"422\": {\n+                        \"description\": \"Validation Error\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\n+                                    \"$ref\": \"#/components/schemas/HTTPValidationError\"\n+                                }\n+                            }\n+                        },\n+                    },\n+                },\n+                \"summary\": \"Read Item\",\n+                \"operationId\": \"read_item_items__item_id__get\",\n+                \"parameters\": [\n+                    {\n+                        \"required\": True,\n+                        \"schema\": {\"title\": \"Item_Id\", \"type\": \"integer\"},\n+                        \"name\": \"item_id\",\n+                        \"in\": \"path\",\n+                    }\n+                ],\n+            }\n+        }\n+    },\n+    \"components\": {\n+        \"schemas\": {\n+            \"ValidationError\": {\n+                \"title\": \"ValidationError\",\n+                \"required\": [\"loc\", \"msg\", \"type\"],\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"loc\": {\n+                        \"title\": \"Location\",\n+                        \"type\": \"array\",\n+                        \"items\": {\"type\": \"string\"},\n+                    },\n+                    \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n+                    \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n+                },\n+            },\n+            \"HTTPValidationError\": {\n+                \"title\": \"HTTPValidationError\",\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"detail\": {\n+                        \"title\": \"Detail\",\n+                        \"type\": \"array\",\n+                        \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n+                    }\n+                },\n+            },\n+        }\n+    },\n+}\n+\n+\n+def test_openapi_schema():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200\n+    assert response.json() == openapi_schema\n+\n+\n+def test_get_validation_error():\n+    response = client.get(\"/items/foo\")\n+    assert response.status_code == 422\n+    assert response.json() == {\n+        \"detail\": [\n+            {\n+                \"loc\": [\"path\", \"item_id\"],\n+                \"msg\": \"value is not a valid integer\",\n+                \"type\": \"type_error.integer\",\n+            }\n+        ]\n+    }\n+\n+\n+def test_get_http_error():\n+    response = client.get(\"/items/3\")\n+    assert response.status_code == 418\n+    assert response.json() == {\"detail\": \"Nope! I don't like 3.\"}\n+\n+\n+def test_get():\n+    response = client.get(\"/items/2\")\n+    assert response.status_code == 200\n+    assert response.json() == {\"item_id\": 2}\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#83b1a117cc2c5165ec3019722aa89e0444cded3d", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 149 | Contributors (this commit): 1 | Commits (past 90d): 32 | Contributors (cumulative): 1 | DMM Complexity: None\n\nDIFF:\n@@ -1,6 +1,6 @@\n \"\"\"FastAPI framework, high performance, easy to learn, fast to code, ready for production\"\"\"\n \n-__version__ = \"0.25.0\"\n+__version__ = \"0.26.0\"\n \n from starlette.background import BackgroundTasks\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#bd407cc4ed81b21e4287735b7d31a30a452e3a9d", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 486 | Lines Deleted: 112 | Files Changed: 9 | Hunks: 35 | Methods Changed: 25 | Complexity Δ (Sum/Max): 19/4 | Churn Δ: 598 | Churn Cumulative: 2085 | Contributors (this commit): 6 | Commits (past 90d): 25 | Contributors (cumulative): 14 | DMM Complexity: 1.0\n\nDIFF:\n@@ -0,0 +1,21 @@\n+from enum import Enum\n+\n+from fastapi import FastAPI\n+\n+\n+class ModelName(Enum):\n+    alexnet = \"alexnet\"\n+    resnet = \"resnet\"\n+    lenet = \"lenet\"\n+\n+\n+app = FastAPI()\n+\n+\n+@app.get(\"/model/{model_name}\")\n+async def get_model(model_name: ModelName):\n+    if model_name == ModelName.alexnet:\n+        return {\"model_name\": model_name, \"message\": \"Deep Learning FTW!\"}\n+    if model_name.value == \"lenet\":\n+        return {\"model_name\": model_name, \"message\": \"LeCNN all the images\"}\n+    return {\"model_name\": model_name, \"message\": \"Have some residuals\"}\n\n@@ -0,0 +1,11 @@\n+from typing import Optional\n+\n+from fastapi import FastAPI\n+\n+app = FastAPI()\n+\n+\n+@app.get(\"/items/{item_id}\")\n+async def read_user_item(item_id: str, limit: Optional[int] = None):\n+    item = {\"item_id\": item_id, \"limit\": limit}\n+    return item\n\n@@ -0,0 +1,11 @@\n+from typing import List\n+\n+from fastapi import FastAPI, Query\n+\n+app = FastAPI()\n+\n+\n+@app.get(\"/items/\")\n+async def read_items(q: List[str] = Query([\"foo\", \"bar\"])):\n+    query_items = {\"q\": q}\n+    return query_items\n\n@@ -1,8 +1,6 @@\n import asyncio\n import inspect\n from copy import deepcopy\n-from datetime import date, datetime, time, timedelta\n-from decimal import Decimal\n from typing import (\n     Any,\n     Callable,\n@@ -14,8 +12,8 @@ from typing import (\n     Tuple,\n     Type,\n     Union,\n+    cast,\n )\n-from uuid import UUID\n \n from fastapi import params\n from fastapi.dependencies.models import Dependant, SecurityRequirement\n@@ -23,7 +21,7 @@ from fastapi.security.base import SecurityBase\n from fastapi.security.oauth2 import OAuth2, SecurityScopes\n from fastapi.security.open_id_connect_url import OpenIdConnect\n from fastapi.utils import get_path_param_names\n-from pydantic import BaseConfig, Schema, create_model\n+from pydantic import BaseConfig, BaseModel, Schema, create_model\n from pydantic.error_wrappers import ErrorWrapper\n from pydantic.errors import MissingError\n from pydantic.fields import Field, Required, Shape\n@@ -35,22 +33,21 @@ from starlette.datastructures import FormData, Headers, QueryParams, UploadFile\n from starlette.requests import Request\n from starlette.websockets import WebSocket\n \n-param_supported_types = (\n-    str,\n-    int,\n-    float,\n-    bool,\n-    UUID,\n-    date,\n-    datetime,\n-    time,\n-    timedelta,\n-    Decimal,\n-)\n-\n-sequence_shapes = {Shape.LIST, Shape.SET, Shape.TUPLE}\n+sequence_shapes = {\n+    Shape.LIST,\n+    Shape.SET,\n+    Shape.TUPLE,\n+    Shape.SEQUENCE,\n+    Shape.TUPLE_ELLIPS,\n+}\n sequence_types = (list, set, tuple)\n-sequence_shape_to_type = {Shape.LIST: list, Shape.SET: set, Shape.TUPLE: tuple}\n+sequence_shape_to_type = {\n+    Shape.LIST: list,\n+    Shape.SET: set,\n+    Shape.TUPLE: tuple,\n+    Shape.SEQUENCE: list,\n+    Shape.TUPLE_ELLIPS: list,\n+}\n \n \n def get_param_sub_dependant(\n@@ -126,6 +123,26 @@ def get_flat_dependant(dependant: Dependant) -> Dependant:\n     return flat_dependant\n \n \n+def is_scalar_field(field: Field) -> bool:\n+    return (\n+        field.shape == Shape.SINGLETON\n+        and not lenient_issubclass(field.type_, BaseModel)\n+        and not isinstance(field.schema, params.Body)\n+    )\n+\n+\n+def is_scalar_sequence_field(field: Field) -> bool:\n+    if field.shape in sequence_shapes and not lenient_issubclass(\n+        field.type_, BaseModel\n+    ):\n+        if field.sub_fields is not None:\n+            for sub_field in field.sub_fields:\n+                if not is_scalar_field(sub_field):\n+                    return False\n+        return True\n+    return False\n+\n+\n def get_dependant(\n     *, path: str, call: Callable, name: str = None, security_scopes: List[str] = None\n ) -> Dependant:\n@@ -133,83 +150,78 @@ def get_dependant(\n     endpoint_signature = inspect.signature(call)\n     signature_params = endpoint_signature.parameters\n     dependant = Dependant(call=call, name=name)\n-    for param_name in signature_params:\n-        param = signature_params[param_name]\n+    for param_name, param in signature_params.items():\n         if isinstance(param.default, params.Depends):\n             sub_dependant = get_param_sub_dependant(\n                 param=param, path=path, security_scopes=security_scopes\n             )\n             dependant.dependencies.append(sub_dependant)\n-    for param_name in signature_params:\n-        param = signature_params[param_name]\n-        if (\n-            (param.default == param.empty) or isinstance(param.default, params.Path)\n-        ) and (param_name in path_param_names):\n-            assert (\n-                lenient_issubclass(param.annotation, param_supported_types)\n-                or param.annotation == param.empty\n+    for param_name, param in signature_params.items():\n+        if isinstance(param.default, params.Depends):\n+            continue\n+        if add_non_field_param_to_dependency(param=param, dependant=dependant):\n+            continue\n+        param_field = get_param_field(param=param, default_schema=params.Query)\n+        if param_name in path_param_names:\n+            assert param.default == param.empty or isinstance(\n+                param.default, params.Path\n+            ), \"Path params must have no defaults or use Path(...)\"\n+            assert is_scalar_field(\n+                field=param_field\n             ), f\"Path params must be of one of the supported types\"\n-            add_param_to_fields(\n+            param_field = get_param_field(\n                 param=param,\n-                dependant=dependant,\n                 default_schema=params.Path,\n                 force_type=params.ParamTypes.path,\n             )\n-        elif (\n-            param.default == param.empty\n-            or param.default is None\n-            or isinstance(param.default, param_supported_types)\n-        ) and (\n-            param.annotation == param.empty\n-            or lenient_issubclass(param.annotation, param_supported_types)\n-        ):\n-            add_param_to_fields(\n-                param=param, dependant=dependant, default_schema=params.Query\n-            )\n-        elif isinstance(param.default, params.Param):\n-            if param.annotation != param.empty:\n-                origin = getattr(param.annotation, \"__origin__\", None)\n-                param_all_types = param_supported_types + (list, tuple, set)\n-                if isinstance(param.default, (params.Query, params.Header)):\n-                    assert lenient_issubclass(\n-                        param.annotation, param_all_types\n-                    ) or lenient_issubclass(\n-                        origin, param_all_types\n-                    ), f\"Parameters for Query and Header must be of type str, int, float, bool, list, tuple or set: {param}\"\n+            add_param_to_fields(field=param_field, dependant=dependant)\n+        elif is_scalar_field(field=param_field):\n+            add_param_to_fields(field=param_field, dependant=dependant)\n+        elif isinstance(\n+            param.default, (params.Query, params.Header)\n+        ) and is_scalar_sequence_field(param_field):\n+            add_param_to_fields(field=param_field, dependant=dependant)\n         else:\n-                    assert lenient_issubclass(\n-                        param.annotation, param_supported_types\n-                    ), f\"Parameters for Path and Cookies must be of type str, int, float, bool: {param}\"\n-            add_param_to_fields(\n-                param=param, dependant=dependant, default_schema=params.Query\n-            )\n-        elif lenient_issubclass(param.annotation, Request):\n-            dependant.request_param_name = param_name\n-        elif lenient_issubclass(param.annotation, WebSocket):\n-            dependant.websocket_param_name = param_name\n-        elif lenient_issubclass(param.annotation, BackgroundTasks):\n-            dependant.background_tasks_param_name = param_name\n-        elif lenient_issubclass(param.annotation, SecurityScopes):\n-            dependant.security_scopes_param_name = param_name\n-        elif not isinstance(param.default, params.Depends):\n-            add_param_to_body_fields(param=param, dependant=dependant)\n+            assert isinstance(\n+                param_field.schema, params.Body\n+            ), f\"Param: {param_field.name} can only be a request body, using Body(...)\"\n+            dependant.body_params.append(param_field)\n     return dependant\n \n \n-def add_param_to_fields(\n+def add_non_field_param_to_dependency(\n+    *, param: inspect.Parameter, dependant: Dependant\n+) -> Optional[bool]:\n+    if lenient_issubclass(param.annotation, Request):\n+        dependant.request_param_name = param.name\n+        return True\n+    elif lenient_issubclass(param.annotation, WebSocket):\n+        dependant.websocket_param_name = param.name\n+        return True\n+    elif lenient_issubclass(param.annotation, BackgroundTasks):\n+        dependant.background_tasks_param_name = param.name\n+        return True\n+    elif lenient_issubclass(param.annotation, SecurityScopes):\n+        dependant.security_scopes_param_name = param.name\n+        return True\n+    return None\n+\n+\n+def get_param_field(\n     *,\n     param: inspect.Parameter,\n-    dependant: Dependant,\n-    default_schema: Type[Schema] = params.Param,\n+    default_schema: Type[params.Param] = params.Param,\n     force_type: params.ParamTypes = None,\n-) -> None:\n+) -> Field:\n     default_value = Required\n+    had_schema = False\n     if not param.default == param.empty:\n         default_value = param.default\n-    if isinstance(default_value, params.Param):\n+    if isinstance(default_value, Schema):\n+        had_schema = True\n         schema = default_value\n         default_value = schema.default\n-        if getattr(schema, \"in_\", None) is None:\n+        if isinstance(schema, params.Param) and getattr(schema, \"in_\", None) is None:\n             schema.in_ = default_schema.in_\n         if force_type:\n             schema.in_ = force_type\n@@ -234,43 +246,26 @@ def add_param_to_fields(\n         class_validators={},\n         schema=schema,\n     )\n-    if schema.in_ == params.ParamTypes.path:\n+    if not had_schema and not is_scalar_field(field=field):\n+        field.schema = params.Body(schema.default)\n+    return field\n+\n+\n+def add_param_to_fields(*, field: Field, dependant: Dependant) -> None:\n+    field.schema = cast(params.Param, field.schema)\n+    if field.schema.in_ == params.ParamTypes.path:\n         dependant.path_params.append(field)\n-    elif schema.in_ == params.ParamTypes.query:\n+    elif field.schema.in_ == params.ParamTypes.query:\n         dependant.query_params.append(field)\n-    elif schema.in_ == params.ParamTypes.header:\n+    elif field.schema.in_ == params.ParamTypes.header:\n         dependant.header_params.append(field)\n     else:\n         assert (\n-            schema.in_ == params.ParamTypes.cookie\n-        ), f\"non-body parameters must be in path, query, header or cookie: {param.name}\"\n+            field.schema.in_ == params.ParamTypes.cookie\n+        ), f\"non-body parameters must be in path, query, header or cookie: {field.name}\"\n         dependant.cookie_params.append(field)\n \n \n-def add_param_to_body_fields(*, param: inspect.Parameter, dependant: Dependant) -> None:\n-    default_value = Required\n-    if not param.default == param.empty:\n-        default_value = param.default\n-    if isinstance(default_value, Schema):\n-        schema = default_value\n-        default_value = schema.default\n-    else:\n-        schema = Schema(default_value)\n-    required = default_value == Required\n-    annotation = get_annotation_from_schema(param.annotation, schema)\n-    field = Field(\n-        name=param.name,\n-        type_=annotation,\n-        default=None if required else default_value,\n-        alias=schema.alias or param.name,\n-        required=required,\n-        model_config=BaseConfig,\n-        class_validators={},\n-        schema=schema,\n-    )\n-    dependant.body_params.append(field)\n-\n-\n def is_coroutine_callable(call: Callable) -> bool:\n     if inspect.isfunction(call):\n         return asyncio.iscoroutinefunction(call)\n@@ -354,7 +349,7 @@ def request_params_to_args(\n         if field.shape in sequence_shapes and isinstance(\n             received_params, (QueryParams, Headers)\n         ):\n-            value = received_params.getlist(field.alias)\n+            value = received_params.getlist(field.alias) or field.default\n         else:\n             value = received_params.get(field.alias)\n         schema: params.Param = field.schema\n\n@@ -1,4 +1,4 @@\n-from typing import Any, Dict, List, Optional, Sequence, Tuple, Type\n+from typing import Any, Dict, List, Optional, Sequence, Tuple, Type, cast\n \n from fastapi import routing\n from fastapi.dependencies.models import Dependant\n@@ -9,7 +9,7 @@ from fastapi.openapi.models import OpenAPI\n from fastapi.params import Body, Param\n from fastapi.utils import get_flat_models_from_routes, get_model_definitions\n from pydantic.fields import Field\n-from pydantic.schema import Schema, field_schema, get_model_name_map\n+from pydantic.schema import field_schema, get_model_name_map\n from pydantic.utils import lenient_issubclass\n from starlette.responses import JSONResponse\n from starlette.routing import BaseRoute\n@@ -97,12 +97,8 @@ def get_openapi_operation_request_body(\n     body_schema, _ = field_schema(\n         body_field, model_name_map=model_name_map, ref_prefix=REF_PREFIX\n     )\n-    schema: Schema = body_field.schema\n-    if isinstance(schema, Body):\n-        request_media_type = schema.media_type\n-    else:\n-        # Includes not declared media types (Schema)\n-        request_media_type = \"application/json\"\n+    body_field.schema = cast(Body, body_field.schema)\n+    request_media_type = body_field.schema.media_type\n     required = body_field.required\n     request_body_oai: Dict[str, Any] = {}\n     if required:\n\n@@ -0,0 +1,29 @@\n+from typing import List, Tuple\n+\n+import pytest\n+from fastapi import FastAPI, Query\n+from pydantic import BaseModel\n+\n+\n+def test_invalid_sequence():\n+    with pytest.raises(AssertionError):\n+        app = FastAPI()\n+\n+        class Item(BaseModel):\n+            title: str\n+\n+        @app.get(\"/items/\")\n+        def read_items(q: List[Item] = Query(None)):\n+            pass  # pragma: no cover\n+\n+\n+def test_invalid_tuple():\n+    with pytest.raises(AssertionError):\n+        app = FastAPI()\n+\n+        class Item(BaseModel):\n+            title: str\n+\n+        @app.get(\"/items/\")\n+        def read_items(q: Tuple[Item, Item] = Query(None)):\n+            pass  # pragma: no cover\n\n@@ -0,0 +1,120 @@\n+import pytest\n+from starlette.testclient import TestClient\n+\n+from path_params.tutorial005 import app\n+\n+client = TestClient(app)\n+\n+openapi_schema = {\n+    \"openapi\": \"3.0.2\",\n+    \"info\": {\"title\": \"Fast API\", \"version\": \"0.1.0\"},\n+    \"paths\": {\n+        \"/model/{model_name}\": {\n+            \"get\": {\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                    },\n+                    \"422\": {\n+                        \"description\": \"Validation Error\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\n+                                    \"$ref\": \"#/components/schemas/HTTPValidationError\"\n+                                }\n+                            }\n+                        },\n+                    },\n+                },\n+                \"summary\": \"Get Model\",\n+                \"operationId\": \"get_model_model__model_name__get\",\n+                \"parameters\": [\n+                    {\n+                        \"required\": True,\n+                        \"schema\": {\n+                            \"title\": \"Model_Name\",\n+                            \"enum\": [\"alexnet\", \"resnet\", \"lenet\"],\n+                        },\n+                        \"name\": \"model_name\",\n+                        \"in\": \"path\",\n+                    }\n+                ],\n+            }\n+        }\n+    },\n+    \"components\": {\n+        \"schemas\": {\n+            \"ValidationError\": {\n+                \"title\": \"ValidationError\",\n+                \"required\": [\"loc\", \"msg\", \"type\"],\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"loc\": {\n+                        \"title\": \"Location\",\n+                        \"type\": \"array\",\n+                        \"items\": {\"type\": \"string\"},\n+                    },\n+                    \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n+                    \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n+                },\n+            },\n+            \"HTTPValidationError\": {\n+                \"title\": \"HTTPValidationError\",\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"detail\": {\n+                        \"title\": \"Detail\",\n+                        \"type\": \"array\",\n+                        \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n+                    }\n+                },\n+            },\n+        }\n+    },\n+}\n+\n+\n+def test_openapi():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200\n+    assert response.json() == openapi_schema\n+\n+\n+@pytest.mark.parametrize(\n+    \"url,status_code,expected\",\n+    [\n+        (\n+            \"/model/alexnet\",\n+            200,\n+            {\"model_name\": \"alexnet\", \"message\": \"Deep Learning FTW!\"},\n+        ),\n+        (\n+            \"/model/lenet\",\n+            200,\n+            {\"model_name\": \"lenet\", \"message\": \"LeCNN all the images\"},\n+        ),\n+        (\n+            \"/model/resnet\",\n+            200,\n+            {\"model_name\": \"resnet\", \"message\": \"Have some residuals\"},\n+        ),\n+        (\n+            \"/model/foo\",\n+            422,\n+            {\n+                \"detail\": [\n+                    {\n+                        \"loc\": [\"path\", \"model_name\"],\n+                        \"msg\": \"value is not a valid enumeration member\",\n+                        \"type\": \"type_error.enum\",\n+                    }\n+                ]\n+            },\n+        ),\n+    ],\n+)\n+def test_get_enums(url, status_code, expected):\n+    response = client.get(url)\n+    assert response.status_code == status_code\n+    assert response.json() == expected\n\n@@ -0,0 +1,95 @@\n+from starlette.testclient import TestClient\n+\n+from query_params.tutorial007 import app\n+\n+client = TestClient(app)\n+\n+openapi_schema = {\n+    \"openapi\": \"3.0.2\",\n+    \"info\": {\"title\": \"Fast API\", \"version\": \"0.1.0\"},\n+    \"paths\": {\n+        \"/items/{item_id}\": {\n+            \"get\": {\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                    },\n+                    \"422\": {\n+                        \"description\": \"Validation Error\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\n+                                    \"$ref\": \"#/components/schemas/HTTPValidationError\"\n+                                }\n+                            }\n+                        },\n+                    },\n+                },\n+                \"summary\": \"Read User Item\",\n+                \"operationId\": \"read_user_item_items__item_id__get\",\n+                \"parameters\": [\n+                    {\n+                        \"required\": True,\n+                        \"schema\": {\"title\": \"Item_Id\", \"type\": \"string\"},\n+                        \"name\": \"item_id\",\n+                        \"in\": \"path\",\n+                    },\n+                    {\n+                        \"required\": False,\n+                        \"schema\": {\"title\": \"Limit\", \"type\": \"integer\"},\n+                        \"name\": \"limit\",\n+                        \"in\": \"query\",\n+                    },\n+                ],\n+            }\n+        }\n+    },\n+    \"components\": {\n+        \"schemas\": {\n+            \"ValidationError\": {\n+                \"title\": \"ValidationError\",\n+                \"required\": [\"loc\", \"msg\", \"type\"],\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"loc\": {\n+                        \"title\": \"Location\",\n+                        \"type\": \"array\",\n+                        \"items\": {\"type\": \"string\"},\n+                    },\n+                    \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n+                    \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n+                },\n+            },\n+            \"HTTPValidationError\": {\n+                \"title\": \"HTTPValidationError\",\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"detail\": {\n+                        \"title\": \"Detail\",\n+                        \"type\": \"array\",\n+                        \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n+                    }\n+                },\n+            },\n+        }\n+    },\n+}\n+\n+\n+def test_openapi():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200\n+    assert response.json() == openapi_schema\n+\n+\n+def test_read_item():\n+    response = client.get(\"/items/foo\")\n+    assert response.status_code == 200\n+    assert response.json() == {\"item_id\": \"foo\", \"limit\": None}\n+\n+\n+def test_read_item_query():\n+    response = client.get(\"/items/foo?limit=5\")\n+    assert response.status_code == 200\n+    assert response.json() == {\"item_id\": \"foo\", \"limit\": 5}\n\n@@ -0,0 +1,96 @@\n+from starlette.testclient import TestClient\n+\n+from query_params_str_validations.tutorial012 import app\n+\n+client = TestClient(app)\n+\n+openapi_schema = {\n+    \"openapi\": \"3.0.2\",\n+    \"info\": {\"title\": \"Fast API\", \"version\": \"0.1.0\"},\n+    \"paths\": {\n+        \"/items/\": {\n+            \"get\": {\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                    },\n+                    \"422\": {\n+                        \"description\": \"Validation Error\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\n+                                    \"$ref\": \"#/components/schemas/HTTPValidationError\"\n+                                }\n+                            }\n+                        },\n+                    },\n+                },\n+                \"summary\": \"Read Items\",\n+                \"operationId\": \"read_items_items__get\",\n+                \"parameters\": [\n+                    {\n+                        \"required\": False,\n+                        \"schema\": {\n+                            \"title\": \"Q\",\n+                            \"type\": \"array\",\n+                            \"items\": {\"type\": \"string\"},\n+                            \"default\": [\"foo\", \"bar\"],\n+                        },\n+                        \"name\": \"q\",\n+                        \"in\": \"query\",\n+                    }\n+                ],\n+            }\n+        }\n+    },\n+    \"components\": {\n+        \"schemas\": {\n+            \"ValidationError\": {\n+                \"title\": \"ValidationError\",\n+                \"required\": [\"loc\", \"msg\", \"type\"],\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"loc\": {\n+                        \"title\": \"Location\",\n+                        \"type\": \"array\",\n+                        \"items\": {\"type\": \"string\"},\n+                    },\n+                    \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n+                    \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n+                },\n+            },\n+            \"HTTPValidationError\": {\n+                \"title\": \"HTTPValidationError\",\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"detail\": {\n+                        \"title\": \"Detail\",\n+                        \"type\": \"array\",\n+                        \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n+                    }\n+                },\n+            },\n+        }\n+    },\n+}\n+\n+\n+def test_openapi_schema():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200\n+    assert response.json() == openapi_schema\n+\n+\n+def test_default_query_values():\n+    url = \"/items/\"\n+    response = client.get(url)\n+    assert response.status_code == 200\n+    assert response.json() == {\"q\": [\"foo\", \"bar\"]}\n+\n+\n+def test_multi_query_values():\n+    url = \"/items/?q=baz&q=foobar\"\n+    response = client.get(url)\n+    assert response.status_code == 200\n+    assert response.json() == {\"q\": [\"baz\", \"foobar\"]}\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
