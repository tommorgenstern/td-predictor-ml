{"custom_id": "keras#258e8667b9f0bb372ede85463f17b8e55f2ed9ea", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 192 | Lines Deleted: 166 | Files Changed: 1 | Hunks: 44 | Methods Changed: 28 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 358 | Churn Cumulative: 9836 | Contributors (this commit): 34 | Commits (past 90d): 13 | Contributors (cumulative): 34 | DMM Complexity: None\n\nDIFF:\n@@ -70,12 +70,13 @@ class Loss:\n \n         Args:\n             reduction: Type of `tf.keras.losses.Reduction` to apply to\n-            loss. Default value is `AUTO`. `AUTO` indicates that the reduction\n-            option will be determined by the usage context. For almost all cases\n-            this defaults to `SUM_OVER_BATCH_SIZE`. When used under a\n-            `tf.distribute.Strategy`, except via `Model.compile()` and\n-            `Model.fit()`, using `AUTO` or `SUM_OVER_BATCH_SIZE`\n-            will raise an error. Please see this custom training [tutorial](\n+                loss. Default value is `AUTO`. `AUTO` indicates that the\n+                reduction option will be determined by the usage context. For\n+                almost all cases this defaults to `SUM_OVER_BATCH_SIZE`. When\n+                used under a `tf.distribute.Strategy`, except via\n+                `Model.compile()` and `Model.fit()`, using `AUTO` or\n+                `SUM_OVER_BATCH_SIZE` will raise an error. Please see this\n+                custom training [tutorial](\n                 https://www.tensorflow.org/tutorials/distribute/custom_training)\n                 for more details.\n             name: Optional name for the instance.\n@@ -102,26 +103,26 @@ class Loss:\n         \"\"\"Invokes the `Loss` instance.\n \n         Args:\n-          y_true: Ground truth values. shape = `[batch_size, d0, .. dN]`, except\n-            sparse loss functions such as sparse categorical crossentropy where\n-            shape = `[batch_size, d0, .. dN-1]`\n+            y_true: Ground truth values. shape = `[batch_size, d0, .. dN]`,\n+                except sparse loss functions such as sparse categorical\n+                crossentropy where shape = `[batch_size, d0, .. dN-1]`\n             y_pred: The predicted values. shape = `[batch_size, d0, .. dN]`\n-          sample_weight: Optional `sample_weight` acts as a coefficient for the\n-            loss. If a scalar is provided, then the loss is simply scaled by the\n-            given value. If `sample_weight` is a tensor of size `[batch_size]`,\n-            then the total loss for each sample of the batch is rescaled by the\n-            corresponding element in the `sample_weight` vector. If the shape of\n-            `sample_weight` is `[batch_size, d0, .. dN-1]` (or can be\n-            broadcasted to this shape), then each loss element of `y_pred` is\n-            scaled by the corresponding value of `sample_weight`. (Note\n-            on`dN-1`: all loss functions reduce by 1 dimension, usually\n-            axis=-1.)\n+            sample_weight: Optional `sample_weight` acts as a coefficient for\n+                the loss. If a scalar is provided, then the loss is simply\n+                scaled by the given value. If `sample_weight` is a tensor of\n+                size `[batch_size]`, then the total loss for each sample of the\n+                batch is rescaled by the corresponding element in the\n+                `sample_weight` vector. If the shape of `sample_weight` is\n+                `[batch_size, d0, .. dN-1]` (or can be broadcasted to this\n+                shape), then each loss element of `y_pred` is scaled by the\n+                corresponding value of `sample_weight`. (Note on`dN-1`: all loss\n+                functions reduce by 1 dimension, usually axis=-1.)\n \n         Returns:\n             Weighted loss float `Tensor`. If `reduction` is `NONE`, this has\n-            shape `[batch_size, d0, .. dN-1]`; otherwise, it is scalar. (Note\n-            `dN-1` because all loss functions reduce by 1 dimension, usually\n-            axis=-1.)\n+                shape `[batch_size, d0, .. dN-1]`; otherwise, it is scalar.\n+                (Note `dN-1` because all loss functions reduce by 1 dimension,\n+                usually axis=-1.)\n \n         Raises:\n           ValueError: If the shape of `sample_weight` is invalid.\n@@ -183,9 +184,9 @@ class Loss:\n         \"\"\"Invokes the `Loss` instance.\n \n         Args:\n-          y_true: Ground truth values. shape = `[batch_size, d0, .. dN]`, except\n-            sparse loss functions such as sparse categorical crossentropy where\n-            shape = `[batch_size, d0, .. dN-1]`\n+            y_true: Ground truth values. shape = `[batch_size, d0, .. dN]`,\n+                except sparse loss functions such as sparse categorical\n+                crossentropy where shape = `[batch_size, d0, .. dN-1]`\n             y_pred: The predicted values. shape = `[batch_size, d0, .. dN]`\n \n         Returns:\n@@ -232,12 +233,13 @@ class LossFunctionWrapper(Loss):\n             fn: The loss function to wrap, with signature `fn(y_true, y_pred,\n                 **kwargs)`.\n             reduction: Type of `tf.keras.losses.Reduction` to apply to\n-            loss. Default value is `AUTO`. `AUTO` indicates that the reduction\n-            option will be determined by the usage context. For almost all cases\n-            this defaults to `SUM_OVER_BATCH_SIZE`. When used under a\n-            `tf.distribute.Strategy`, except via `Model.compile()` and\n-            `Model.fit()`, using `AUTO` or `SUM_OVER_BATCH_SIZE`\n-            will raise an error. Please see this custom training [tutorial](\n+                loss. Default value is `AUTO`. `AUTO` indicates that the\n+                reduction option will be determined by the usage context. For\n+                almost all cases this defaults to `SUM_OVER_BATCH_SIZE`. When\n+                used under a `tf.distribute.Strategy`, except via\n+                `Model.compile()` and `Model.fit()`, using `AUTO` or\n+                `SUM_OVER_BATCH_SIZE` will raise an error. Please see this\n+                custom training [tutorial](\n                 https://www.tensorflow.org/tutorials/distribute/custom_training)\n                 for more details.\n             name: Optional name for the instance.\n@@ -344,12 +346,13 @@ class MeanSquaredError(LossFunctionWrapper):\n \n         Args:\n             reduction: Type of `tf.keras.losses.Reduction` to apply to\n-            loss. Default value is `AUTO`. `AUTO` indicates that the reduction\n-            option will be determined by the usage context. For almost all cases\n-            this defaults to `SUM_OVER_BATCH_SIZE`. When used under a\n-            `tf.distribute.Strategy`, except via `Model.compile()` and\n-            `Model.fit()`, using `AUTO` or `SUM_OVER_BATCH_SIZE`\n-            will raise an error. Please see this custom training [tutorial](\n+                loss. Default value is `AUTO`. `AUTO` indicates that the\n+                reduction option will be determined by the usage context. For\n+                almost all cases this defaults to `SUM_OVER_BATCH_SIZE`. When\n+                used under a `tf.distribute.Strategy`, except via\n+                `Model.compile()` and `Model.fit()`, using `AUTO` or\n+                `SUM_OVER_BATCH_SIZE` will raise an error. Please see this\n+                custom training [tutorial](\n                 https://www.tensorflow.org/tutorials/distribute/custom_training)\n                 for more details.\n             name: Optional name for the instance. Defaults to\n@@ -405,12 +408,13 @@ class MeanAbsoluteError(LossFunctionWrapper):\n \n         Args:\n             reduction: Type of `tf.keras.losses.Reduction` to apply to\n-            loss. Default value is `AUTO`. `AUTO` indicates that the reduction\n-            option will be determined by the usage context. For almost all cases\n-            this defaults to `SUM_OVER_BATCH_SIZE`. When used under a\n-            `tf.distribute.Strategy`, except via `Model.compile()` and\n-            `Model.fit()`, using `AUTO` or `SUM_OVER_BATCH_SIZE`\n-            will raise an error. Please see this custom training [tutorial](\n+                loss. Default value is `AUTO`. `AUTO` indicates that the\n+                reduction option will be determined by the usage context. For\n+                almost all cases this defaults to `SUM_OVER_BATCH_SIZE`. When\n+                used under a `tf.distribute.Strategy`, except via\n+                `Model.compile()` and `Model.fit()`, using `AUTO` or\n+                `SUM_OVER_BATCH_SIZE` will raise an error. Please see this\n+                custom training [tutorial](\n                 https://www.tensorflow.org/tutorials/distribute/custom_training)\n                 for more details.\n             name: Optional name for the instance. Defaults to\n@@ -472,12 +476,13 @@ class MeanAbsolutePercentageError(LossFunctionWrapper):\n \n         Args:\n             reduction: Type of `tf.keras.losses.Reduction` to apply to\n-            loss. Default value is `AUTO`. `AUTO` indicates that the reduction\n-            option will be determined by the usage context. For almost all cases\n-            this defaults to `SUM_OVER_BATCH_SIZE`. When used under a\n-            `tf.distribute.Strategy`, except via `Model.compile()` and\n-            `Model.fit()`, using `AUTO` or `SUM_OVER_BATCH_SIZE`\n-            will raise an error. Please see this custom training [tutorial](\n+                loss. Default value is `AUTO`. `AUTO` indicates that the\n+                reduction option will be determined by the usage context. For\n+                almost all cases this defaults to `SUM_OVER_BATCH_SIZE`. When\n+                used under a `tf.distribute.Strategy`, except via\n+                `Model.compile()` and `Model.fit()`, using `AUTO` or\n+                `SUM_OVER_BATCH_SIZE` will raise an error. Please see this\n+                custom training [tutorial](\n                 https://www.tensorflow.org/tutorials/distribute/custom_training)\n                 for more details.\n             name: Optional name for the instance. Defaults to\n@@ -536,12 +541,13 @@ class MeanSquaredLogarithmicError(LossFunctionWrapper):\n \n         Args:\n             reduction: Type of `tf.keras.losses.Reduction` to apply to\n-            loss. Default value is `AUTO`. `AUTO` indicates that the reduction\n-            option will be determined by the usage context. For almost all cases\n-            this defaults to `SUM_OVER_BATCH_SIZE`. When used under a\n-            `tf.distribute.Strategy`, except via `Model.compile()` and\n-            `Model.fit()`, using `AUTO` or `SUM_OVER_BATCH_SIZE`\n-            will raise an error. Please see this custom training [tutorial](\n+                loss. Default value is `AUTO`. `AUTO` indicates that the\n+                reduction option will be determined by the usage context. For\n+                almost all cases this defaults to `SUM_OVER_BATCH_SIZE`. When\n+                used under a `tf.distribute.Strategy`, except via\n+                `Model.compile()` and `Model.fit()`, using `AUTO` or\n+                `SUM_OVER_BATCH_SIZE` will raise an error. Please see this\n+                custom training [tutorial](\n                 https://www.tensorflow.org/tutorials/distribute/custom_training)\n                 for more details.\n             name: Optional name for the instance. Defaults to\n@@ -631,20 +637,21 @@ class BinaryCrossentropy(LossFunctionWrapper):\n                 [logit](https://en.wikipedia.org/wiki/Logit) values. By default, we\n                 assume that `y_pred` contains probabilities (i.e., values in [0,\n                 1]).\n-          label_smoothing: Float in [0, 1]. When 0, no smoothing occurs. When >\n-            0, we compute the loss between the predicted labels and a smoothed\n-            version of the true labels, where the smoothing squeezes the labels\n-            towards 0.5.  Larger values of `label_smoothing` correspond to\n-            heavier smoothing.\n+            label_smoothing: Float in [0, 1]. When 0, no smoothing occurs.\n+                When > 0, we compute the loss between the predicted labels and a\n+                smoothed version of the true labels, where the smoothing\n+                squeezes the labels towards 0.5.  Larger values of\n+                `label_smoothing` correspond to heavier smoothing.\n             axis: The axis along which to compute crossentropy (the features\n                 axis).  Defaults to -1.\n             reduction: Type of `tf.keras.losses.Reduction` to apply to\n-            loss. Default value is `AUTO`. `AUTO` indicates that the reduction\n-            option will be determined by the usage context. For almost all cases\n-            this defaults to `SUM_OVER_BATCH_SIZE`. When used under a\n-            `tf.distribute.Strategy`, except via `Model.compile()` and\n-            `Model.fit()`, using `AUTO` or `SUM_OVER_BATCH_SIZE`\n-            will raise an error. Please see this custom training [tutorial](\n+                loss. Default value is `AUTO`. `AUTO` indicates that the\n+                reduction option will be determined by the usage context. For\n+                almost all cases this defaults to `SUM_OVER_BATCH_SIZE`. When\n+                used under a `tf.distribute.Strategy`, except via\n+                `Model.compile()` and `Model.fit()`, using `AUTO` or\n+                `SUM_OVER_BATCH_SIZE` will raise an error. Please see this\n+                custom training [tutorial](\n                 https://www.tensorflow.org/tutorials/distribute/custom_training)\n                 for more details.\n             name: Name for the op. Defaults to 'binary_crossentropy'.\n@@ -671,7 +678,7 @@ class BinaryFocalCrossentropy(LossFunctionWrapper):\n     - `y_pred` (predicted value): This is the model's prediction, i.e, a single\n         floating-point value which either represents a\n         [logit](https://en.wikipedia.org/wiki/Logit), (i.e, value in [-inf, inf]\n-      when `from_logits=True`) or a probability (i.e, value in `[0., 1.]` when\n+        when `from_logits=True`) or a probability (i.e, value in [0., 1.] when\n         `from_logits=False`).\n \n     According to [Lin et al., 2018](https://arxiv.org/pdf/1708.02002.pdf), it\n@@ -777,11 +784,11 @@ class BinaryFocalCrossentropy(LossFunctionWrapper):\n         from_logits: Whether to interpret `y_pred` as a tensor of\n             [logit](https://en.wikipedia.org/wiki/Logit) values. By default, we\n             assume that `y_pred` are probabilities (i.e., values in `[0, 1]`).\n-      label_smoothing: Float in `[0, 1]`. When `0`, no smoothing occurs. When >\n-        `0`, we compute the loss between the predicted labels and a smoothed\n-        version of the true labels, where the smoothing squeezes the labels\n-        towards `0.5`. Larger values of `label_smoothing` correspond to heavier\n-        smoothing.\n+        label_smoothing: Float in `[0, 1]`. When `0`, no smoothing occurs.\n+            When > `0`, we compute the loss between the predicted labels and a\n+            smoothed version of the true labels, where the smoothing squeezes\n+            the labels towards `0.5`. Larger values of `label_smoothing`\n+            correspond to heavier smoothing.\n         axis: The axis along which to compute crossentropy (the features axis).\n             Defaults to `-1`.\n         reduction: Type of `tf.keras.losses.Reduction` to apply to\n@@ -893,17 +900,18 @@ class CategoricalCrossentropy(LossFunctionWrapper):\n \n         Args:\n             from_logits: Whether `y_pred` is expected to be a logits tensor. By\n-            default, we assume that `y_pred` encodes a probability distribution.\n-          label_smoothing: Float in [0, 1]. When > 0, label values are smoothed,\n-            meaning the confidence on label values are relaxed. For example, if\n-            `0.1`, use `0.1 / num_classes` for non-target labels and\n-            `0.9 + 0.1 / num_classes` for target labels.\n+                default, we assume that `y_pred` encodes a probability\n+                distribution.\n+            label_smoothing: Float in [0, 1]. When > 0, label values are\n+                smoothed, meaning the confidence on label values are relaxed.\n+                For example, if `0.1`, use `0.1 / num_classes` for non-target\n+                labels and `0.9 + 0.1 / num_classes` for target labels.\n             axis: The axis along which to compute crossentropy (the features\n                 axis). Defaults to -1.\n-          reduction: Type of `tf.keras.losses.Reduction` to apply to\n-            loss. Default value is `AUTO`. `AUTO` indicates that the reduction\n-            option will be determined by the usage context. For almost all cases\n-            this defaults to `SUM_OVER_BATCH_SIZE`. When used under a\n+            reduction: Type of `tf.keras.losses.Reduction` to apply to loss.\n+                Default value is `AUTO`. `AUTO` indicates that the reduction\n+                option will be determined by the usage context. For almost all\n+                cases this defaults to `SUM_OVER_BATCH_SIZE`. When used under a\n                 `tf.distribute.Strategy`, except via `Model.compile()` and\n                 `Model.fit()`, using `AUTO` or `SUM_OVER_BATCH_SIZE`\n                 will raise an error. Please see this custom training [tutorial](\n@@ -1120,23 +1128,25 @@ class SparseCategoricalCrossentropy(LossFunctionWrapper):\n \n         Args:\n             from_logits: Whether `y_pred` is expected to be a logits tensor. By\n-            default, we assume that `y_pred` encodes a probability distribution.\n-          ignore_class: Optional integer. The ID of a class to be ignored during\n-            loss computation. This is useful, for example, in segmentation\n-            problems featuring a \"void\" class (commonly -1 or 255) in\n-            segmentation maps.\n+                default, we assume that `y_pred` encodes a probability\n+                distribution.\n+            ignore_class: Optional integer. The ID of a class to be ignored\n+                during loss computation. This is useful, for example, in\n+                segmentation problems featuring a \"void\" class (commonly -1 or\n+                255) in segmentation maps.\n                 By default (`ignore_class=None`), all classes are considered.\n             reduction: Type of `tf.keras.losses.Reduction` to apply to\n-            loss. Default value is `AUTO`. `AUTO` indicates that the reduction\n-            option will be determined by the usage context. For almost all cases\n-            this defaults to `SUM_OVER_BATCH_SIZE`. When used under a\n-            `tf.distribute.Strategy`, except via `Model.compile()` and\n-            `Model.fit()`, using `AUTO` or `SUM_OVER_BATCH_SIZE`\n-            will raise an error. Please see this custom training [tutorial](\n+                loss. Default value is `AUTO`. `AUTO` indicates that the\n+                reduction ption will be determined by the usage context. For\n+                almost all cases this defaults to `SUM_OVER_BATCH_SIZE`. When\n+                used under a `tf.distribute.Strategy`, except via\n+                `Model.compile()` and `Model.fit()`, using `AUTO` or\n+                `SUM_OVER_BATCH_SIZE` will raise an error. Please see this\n+                custom training [tutorial](\n                 https://www.tensorflow.org/tutorials/distribute/custom_training)\n                 for more details.\n-          name: Optional name for the instance. Defaults to\n-            'sparse_categorical_crossentropy'.\n+            name: Optional name for the instance.\n+                Defaults to 'sparse_categorical_crossentropy'.\n         \"\"\"\n         super().__init__(\n             sparse_categorical_crossentropy,\n@@ -1193,12 +1203,13 @@ class Hinge(LossFunctionWrapper):\n \n         Args:\n             reduction: Type of `tf.keras.losses.Reduction` to apply to\n-            loss. Default value is `AUTO`. `AUTO` indicates that the reduction\n-            option will be determined by the usage context. For almost all cases\n-            this defaults to `SUM_OVER_BATCH_SIZE`. When used under a\n-            `tf.distribute.Strategy`, except via `Model.compile()` and\n-            `Model.fit()`, using `AUTO` or `SUM_OVER_BATCH_SIZE`\n-            will raise an error. Please see this custom training [tutorial](\n+                loss. Default value is `AUTO`. `AUTO` indicates that the\n+                reduction ption will be determined by the usage context. For\n+                almost all cases this defaults to `SUM_OVER_BATCH_SIZE`. When\n+                used under a `tf.distribute.Strategy`, except via\n+                `Model.compile()` and `Model.fit()`, using `AUTO` or\n+                `SUM_OVER_BATCH_SIZE` will raise an error. Please see this\n+                custom training [tutorial](\n                 https://www.tensorflow.org/tutorials/distribute/custom_training)\n                 for more details.\n             name: Optional name for the instance. Defaults to 'hinge'.\n@@ -1254,12 +1265,13 @@ class SquaredHinge(LossFunctionWrapper):\n \n         Args:\n             reduction: Type of `tf.keras.losses.Reduction` to apply to\n-            loss. Default value is `AUTO`. `AUTO` indicates that the reduction\n-            option will be determined by the usage context. For almost all cases\n-            this defaults to `SUM_OVER_BATCH_SIZE`. When used under a\n-            `tf.distribute.Strategy`, except via `Model.compile()` and\n-            `Model.fit()`, using `AUTO` or `SUM_OVER_BATCH_SIZE`\n-            will raise an error. Please see this custom training [tutorial](\n+                loss. Default value is `AUTO`. `AUTO` indicates that the\n+                reduction ption will be determined by the usage context. For\n+                almost all cases this defaults to `SUM_OVER_BATCH_SIZE`. When\n+                used under a `tf.distribute.Strategy`, except via\n+                `Model.compile()` and `Model.fit()`, using `AUTO` or\n+                `SUM_OVER_BATCH_SIZE` will raise an error. Please see this\n+                custom training [tutorial](\n                 https://www.tensorflow.org/tutorials/distribute/custom_training)\n                 for more details.\n             name: Optional name for the instance. Defaults to 'squared_hinge'.\n@@ -1313,15 +1325,17 @@ class CategoricalHinge(LossFunctionWrapper):\n \n         Args:\n             reduction: Type of `tf.keras.losses.Reduction` to apply to\n-            loss. Default value is `AUTO`. `AUTO` indicates that the reduction\n-            option will be determined by the usage context. For almost all cases\n-            this defaults to `SUM_OVER_BATCH_SIZE`. When used under a\n-            `tf.distribute.Strategy`, except via `Model.compile()` and\n-            `Model.fit()`, using `AUTO` or `SUM_OVER_BATCH_SIZE`\n-            will raise an error. Please see this custom training [tutorial](\n+                loss. Default value is `AUTO`. `AUTO` indicates that the\n+                reduction ption will be determined by the usage context. For\n+                almost all cases this defaults to `SUM_OVER_BATCH_SIZE`. When\n+                used under a `tf.distribute.Strategy`, except via\n+                `Model.compile()` and `Model.fit()`, using `AUTO` or\n+                `SUM_OVER_BATCH_SIZE` will raise an error. Please see this\n+                custom training [tutorial](\n                 https://www.tensorflow.org/tutorials/distribute/custom_training)\n                 for more details.\n-          name: Optional name for the instance. Defaults to 'categorical_hinge'.\n+            name: Optional name for the instance.\n+                Defaults to 'categorical_hinge'.\n         \"\"\"\n         super().__init__(categorical_hinge, name=name, reduction=reduction)\n \n@@ -1369,12 +1383,13 @@ class Poisson(LossFunctionWrapper):\n \n         Args:\n             reduction: Type of `tf.keras.losses.Reduction` to apply to\n-            loss. Default value is `AUTO`. `AUTO` indicates that the reduction\n-            option will be determined by the usage context. For almost all cases\n-            this defaults to `SUM_OVER_BATCH_SIZE`. When used under a\n-            `tf.distribute.Strategy`, except via `Model.compile()` and\n-            `Model.fit()`, using `AUTO` or `SUM_OVER_BATCH_SIZE`\n-            will raise an error. Please see this custom training [tutorial](\n+                loss. Default value is `AUTO`. `AUTO` indicates that the\n+                reduction ption will be determined by the usage context. For\n+                almost all cases this defaults to `SUM_OVER_BATCH_SIZE`. When\n+                used under a `tf.distribute.Strategy`, except via\n+                `Model.compile()` and `Model.fit()`, using `AUTO` or\n+                `SUM_OVER_BATCH_SIZE` will raise an error. Please see this\n+                custom training [tutorial](\n                 https://www.tensorflow.org/tutorials/distribute/custom_training)\n                 for more details.\n             name: Optional name for the instance. Defaults to 'poisson'.\n@@ -1428,12 +1443,13 @@ class LogCosh(LossFunctionWrapper):\n \n         Args:\n             reduction: Type of `tf.keras.losses.Reduction` to apply to\n-            loss. Default value is `AUTO`. `AUTO` indicates that the reduction\n-            option will be determined by the usage context. For almost all cases\n-            this defaults to `SUM_OVER_BATCH_SIZE`. When used under a\n-            `tf.distribute.Strategy`, except via `Model.compile()` and\n-            `Model.fit()`, using `AUTO` or `SUM_OVER_BATCH_SIZE`\n-            will raise an error. Please see this custom training [tutorial](\n+                loss. Default value is `AUTO`. `AUTO` indicates that the\n+                reduction ption will be determined by the usage context. For\n+                almost all cases this defaults to `SUM_OVER_BATCH_SIZE`. When\n+                used under a `tf.distribute.Strategy`, except via\n+                `Model.compile()` and `Model.fit()`, using `AUTO` or\n+                `SUM_OVER_BATCH_SIZE` will raise an error. Please see this\n+                custom training [tutorial](\n                 https://www.tensorflow.org/tutorials/distribute/custom_training)\n                 for more details.\n             name: Optional name for the instance. Defaults to 'log_cosh'.\n@@ -1488,15 +1504,17 @@ class KLDivergence(LossFunctionWrapper):\n \n         Args:\n             reduction: Type of `tf.keras.losses.Reduction` to apply to\n-            loss. Default value is `AUTO`. `AUTO` indicates that the reduction\n-            option will be determined by the usage context. For almost all cases\n-            this defaults to `SUM_OVER_BATCH_SIZE`. When used under a\n-            `tf.distribute.Strategy`, except via `Model.compile()` and\n-            `Model.fit()`, using `AUTO` or `SUM_OVER_BATCH_SIZE`\n-            will raise an error. Please see this custom training [tutorial](\n+                loss. Default value is `AUTO`. `AUTO` indicates that the\n+                reduction ption will be determined by the usage context. For\n+                almost all cases this defaults to `SUM_OVER_BATCH_SIZE`. When\n+                used under a `tf.distribute.Strategy`, except via\n+                `Model.compile()` and `Model.fit()`, using `AUTO` or\n+                `SUM_OVER_BATCH_SIZE` will raise an error. Please see this\n+                custom training [tutorial](\n                 https://www.tensorflow.org/tutorials/distribute/custom_training)\n                 for more details.\n-          name: Optional name for the instance. Defaults to 'kl_divergence'.\n+            name: Optional name for the instance.\n+                Defaults to 'kl_divergence'.\n         \"\"\"\n         super().__init__(kl_divergence, name=name, reduction=reduction)\n \n@@ -1554,15 +1572,16 @@ class Huber(LossFunctionWrapper):\n         \"\"\"Initializes `Huber` instance.\n \n         Args:\n-          delta: A float, the point where the Huber loss function changes from a\n-            quadratic to linear.\n+            delta: A float, the point where the Huber loss function changes from\n+                a quadratic to linear.\n             reduction: Type of `tf.keras.losses.Reduction` to apply to\n-            loss. Default value is `AUTO`. `AUTO` indicates that the reduction\n-            option will be determined by the usage context. For almost all cases\n-            this defaults to `SUM_OVER_BATCH_SIZE`. When used under a\n-            `tf.distribute.Strategy`, except via `Model.compile()` and\n-            `Model.fit()`, using `AUTO` or `SUM_OVER_BATCH_SIZE`\n-            will raise an error. Please see this custom training [tutorial](\n+                loss. Default value is `AUTO`. `AUTO` indicates that the\n+                reduction ption will be determined by the usage context. For\n+                almost all cases this defaults to `SUM_OVER_BATCH_SIZE`. When\n+                used under a `tf.distribute.Strategy`, except via\n+                `Model.compile()` and `Model.fit()`, using `AUTO` or\n+                `SUM_OVER_BATCH_SIZE` will raise an error. Please see this\n+                custom training [tutorial](\n                 https://www.tensorflow.org/tutorials/distribute/custom_training)\n                 for more details.\n             name: Optional name for the instance. Defaults to 'huber_loss'.\n@@ -1619,8 +1638,8 @@ def _ragged_tensor_apply_loss(loss_fn, y_true, y_pred, y_pred_extra_dim=False):\n         y_true\n \n     Returns:\n-      Loss-function result. A dense tensor if the output has a single dimension\n-      (per-batch loss value); a ragged tensor otherwise.\n+        Loss-function result. A dense tensor if the output has a single\n+        dimension (per-batch loss value); a ragged tensor otherwise.\n     \"\"\"\n \n     def rt_is_equiv_dense(rt):\n@@ -1703,12 +1722,13 @@ def _ragged_tensor_mse(y_true, y_pred):\n \n     Args:\n         y_true: RaggedTensor truth values. shape = `[batch_size, d0, .. dN]`.\n-      y_pred: RaggedTensor predicted values. shape = `[batch_size, d0, .. dN]`.\n+        y_pred: RaggedTensor predicted values.\n+            shape = `[batch_size, d0, .. dN]`.\n \n     Returns:\n         Mean squared error values. shape = `[batch_size, d0, .. dN-1]`.\n         When the number of dimensions of the batch feature vector [d0, .. dN] is\n-      greater than one the return value is a RaggedTensor. Otherwise a Dense\n+        greater than one the return value is a RaggedTensor. Otherwise, a Dense\n         tensor with dimensions [batch_size] is returned.\n     \"\"\"\n     return _ragged_tensor_apply_loss(mean_squared_error, y_true, y_pred)\n@@ -1890,9 +1910,9 @@ def squared_hinge(y_true, y_pred):\n     ...     np.mean(np.square(np.maximum(1. - y_true * y_pred, 0.)), axis=-1))\n \n     Args:\n-      y_true: The ground truth values. `y_true` values are expected to be -1 or\n-        1. If binary (0 or 1) labels are provided we will convert them to -1 or\n-        1. shape = `[batch_size, d0, .. dN]`.\n+        y_true: The ground truth values. `y_true` values are expected to be -1\n+            or 1. If binary (0 or 1) labels are provided we will convert them to\n+            -1 or 1. shape = `[batch_size, d0, .. dN]`.\n         y_pred: The predicted values. shape = `[batch_size, d0, .. dN]`.\n \n     Returns:\n@@ -1924,9 +1944,9 @@ def hinge(y_true, y_pred):\n     ...     np.mean(np.maximum(1. - y_true * y_pred, 0.), axis=-1))\n \n     Args:\n-      y_true: The ground truth values. `y_true` values are expected to be -1 or\n-        1. If binary (0 or 1) labels are provided they will be converted to -1\n-        or 1. shape = `[batch_size, d0, .. dN]`.\n+        y_true: The ground truth values. `y_true` values are expected to be -1\n+            or 1. If binary (0 or 1) labels are provided we will convert them to\n+            -1 or 1. shape = `[batch_size, d0, .. dN]`.\n         y_pred: The predicted values. shape = `[batch_size, d0, .. dN]`.\n \n     Returns:\n@@ -2345,8 +2365,9 @@ def sparse_categorical_crossentropy(\n             computed.\n         ignore_class: Optional integer. The ID of a class to be ignored during\n             loss computation. This is useful, for example, in segmentation\n-        problems featuring a \"void\" class (commonly -1 or 255) in segmentation\n-        maps. By default (`ignore_class=None`), all classes are considered.\n+            problems featuring a \"void\" class (commonly -1 or 255) in\n+            segmentation maps. By default (`ignore_class=None`), all classes are\n+            considered.\n \n     Returns:\n         Sparse categorical crossentropy loss value.\n@@ -2409,9 +2430,9 @@ def binary_crossentropy(\n         from_logits: Whether `y_pred` is expected to be a logits tensor. By\n             default, we assume that `y_pred` encodes a probability distribution.\n         label_smoothing: Float in [0, 1]. If > `0` then smooth the labels by\n-        squeezing them towards 0.5 That is, using `1. - 0.5 * label_smoothing`\n-        for the target class and `0.5 * label_smoothing` for the non-target\n-        class.\n+            squeezing them towards 0.5 That is, using\n+            `1. - 0.5 * label_smoothing` for the target class and\n+            `0.5 * label_smoothing` for the non-target class.\n         axis: The axis along which the mean is computed. Defaults to -1.\n \n     Returns:\n@@ -2526,12 +2547,13 @@ def binary_focal_crossentropy(\n             default, we assume that `y_pred` encodes a probability distribution.\n         label_smoothing: Float in `[0, 1]`. If higher than 0 then smooth the\n             labels by squeezing them towards `0.5`, i.e., using `1. - 0.5 *\n-        label_smoothing` for the target class and `0.5 * label_smoothing` for\n-        the non-target class.\n+            label_smoothing` for the target class and `0.5 * label_smoothing`\n+            for the non-target class.\n         axis: The axis along which the mean is computed. Defaults to `-1`.\n \n     Returns:\n-      Binary focal crossentropy loss value. shape = `[batch_size, d0, .. dN-1]`.\n+        Binary focal crossentropy loss value.\n+            shape = `[batch_size, d0, .. dN-1]`.\n     \"\"\"\n     y_pred = tf.convert_to_tensor(y_pred)\n     y_true = tf.cast(y_true, y_pred.dtype)\n@@ -2794,15 +2816,15 @@ class CosineSimilarity(LossFunctionWrapper):\n         axis: The axis along which the cosine similarity is computed\n             (the features axis). Defaults to -1.\n         reduction: Type of `tf.keras.losses.Reduction` to apply to loss.\n-        Default value is `AUTO`. `AUTO` indicates that the reduction option will\n-        be determined by the usage context. For almost all cases this defaults\n-        to `SUM_OVER_BATCH_SIZE`. When used under a\n+            Default value is `AUTO`. `AUTO` indicates that the reduction option\n+            will be determined by the usage context. For almost all cases this\n+            defaults to `SUM_OVER_BATCH_SIZE`. When used under a\n             `tf.distribute.Strategy`, except via `Model.compile()` and\n-        `Model.fit()`, using `AUTO` or `SUM_OVER_BATCH_SIZE`\n-        will raise an error. Please see this custom training [tutorial](\n+            `Model.fit()`, using `AUTO` or `SUM_OVER_BATCH_SIZE` will raise an\n+            error. Please see this custom training [tutorial](\n             https://www.tensorflow.org/tutorials/distribute/custom_training)\n             for more details.\n-      name: Optional name for the instance.\n+        name: Optional name for the instance. Defaults to 'cosine_similarity'.\n     \"\"\"\n \n     def __init__(\n@@ -2850,6 +2872,8 @@ def serialize(loss, use_legacy_format=False):\n \n     Args:\n         loss: A Keras `Loss` instance or a loss function.\n+        use_legacy_format: Boolean, whether to use the legacy serialization\n+            format.\n \n     Returns:\n         Loss configuration dictionary.\n@@ -2868,6 +2892,8 @@ def deserialize(name, custom_objects=None, use_legacy_format=False):\n         custom_objects: Optional dictionary mapping names (strings) to custom\n             objects (classes and functions) to be considered during\n             deserialization.\n+        use_legacy_format: Boolean, whether to use the legacy serialization\n+            format.\n \n     Returns:\n         A Keras `Loss` instance or a loss function.\n@@ -2912,8 +2938,8 @@ def get(identifier):\n \n     Args:\n         identifier: A loss identifier. One of None or string name of a loss\n-        function/class or loss configuration dictionary or a loss function or a\n-        loss class instance.\n+            function/class or loss configuration dictionary or a loss function\n+            or a loss class instance.\n \n     Returns:\n         A Keras loss as a `function`/ `Loss` class instance.\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "keras#7c4ca54b99ba9c4f2c9d55b5127a180763986c09", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 77 | Lines Deleted: 77 | Files Changed: 1 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 154 | Churn Cumulative: 9990 | Contributors (this commit): 34 | Commits (past 90d): 14 | Contributors (cumulative): 34 | DMM Complexity: None\n\nDIFF:\n@@ -1157,6 +1157,83 @@ class SparseCategoricalCrossentropy(LossFunctionWrapper):\n         )\n \n \n+@keras_export(\"keras.losses.CosineSimilarity\")\n+class CosineSimilarity(LossFunctionWrapper):\n+    \"\"\"Computes the cosine similarity between labels and predictions.\n+\n+    Note that it is a number between -1 and 1. When it is a negative number\n+    between -1 and 0, 0 indicates orthogonality and values closer to -1\n+    indicate greater similarity. The values closer to 1 indicate greater\n+    dissimilarity. This makes it usable as a loss function in a setting\n+    where you try to maximize the proximity between predictions and targets.\n+    If either `y_true` or `y_pred` is a zero vector, cosine similarity will be 0\n+    regardless of the proximity between predictions and targets.\n+\n+    `loss = -sum(l2_norm(y_true) * l2_norm(y_pred))`\n+\n+    Standalone usage:\n+\n+    >>> y_true = [[0., 1.], [1., 1.]]\n+    >>> y_pred = [[1., 0.], [1., 1.]]\n+    >>> # Using 'auto'/'sum_over_batch_size' reduction type.\n+    >>> cosine_loss = tf.keras.losses.CosineSimilarity(axis=1)\n+    >>> # l2_norm(y_true) = [[0., 1.], [1./1.414, 1./1.414]]\n+    >>> # l2_norm(y_pred) = [[1., 0.], [1./1.414, 1./1.414]]\n+    >>> # l2_norm(y_true) . l2_norm(y_pred) = [[0., 0.], [0.5, 0.5]]\n+    >>> # loss = mean(sum(l2_norm(y_true) . l2_norm(y_pred), axis=1))\n+    >>> #       = -((0. + 0.) +  (0.5 + 0.5)) / 2\n+    >>> cosine_loss(y_true, y_pred).numpy()\n+    -0.5\n+\n+    >>> # Calling with 'sample_weight'.\n+    >>> cosine_loss(y_true, y_pred, sample_weight=[0.8, 0.2]).numpy()\n+    -0.0999\n+\n+    >>> # Using 'sum' reduction type.\n+    >>> cosine_loss = tf.keras.losses.CosineSimilarity(axis=1,\n+    ...     reduction=tf.keras.losses.Reduction.SUM)\n+    >>> cosine_loss(y_true, y_pred).numpy()\n+    -0.999\n+\n+    >>> # Using 'none' reduction type.\n+    >>> cosine_loss = tf.keras.losses.CosineSimilarity(axis=1,\n+    ...     reduction=tf.keras.losses.Reduction.NONE)\n+    >>> cosine_loss(y_true, y_pred).numpy()\n+    array([-0., -0.999], dtype=float32)\n+\n+    Usage with the `compile()` API:\n+\n+    ```python\n+    model.compile(optimizer='sgd',\n+                  loss=tf.keras.losses.CosineSimilarity(axis=1))\n+    ```\n+\n+    Args:\n+        axis: The axis along which the cosine similarity is computed\n+            (the features axis). Defaults to -1.\n+        reduction: Type of `tf.keras.losses.Reduction` to apply to loss.\n+            Default value is `AUTO`. `AUTO` indicates that the reduction option\n+            will be determined by the usage context. For almost all cases this\n+            defaults to `SUM_OVER_BATCH_SIZE`. When used under a\n+            `tf.distribute.Strategy`, except via `Model.compile()` and\n+            `Model.fit()`, using `AUTO` or `SUM_OVER_BATCH_SIZE` will raise an\n+            error. Please see this custom training [tutorial](\n+            https://www.tensorflow.org/tutorials/distribute/custom_training)\n+            for more details.\n+        name: Optional name for the instance. Defaults to 'cosine_similarity'.\n+    \"\"\"\n+\n+    def __init__(\n+        self,\n+        axis=-1,\n+        reduction=losses_utils.ReductionV2.AUTO,\n+        name=\"cosine_similarity\",\n+    ):\n+        super().__init__(\n+            cosine_similarity, reduction=reduction, name=name, axis=axis\n+        )\n+\n+\n @keras_export(\"keras.losses.Hinge\")\n class Hinge(LossFunctionWrapper):\n     \"\"\"Computes the hinge loss between `y_true` & `y_pred`.\n@@ -2761,83 +2838,6 @@ def cosine_similarity(y_true, y_pred, axis=-1):\n     return -tf.reduce_sum(y_true * y_pred, axis=axis)\n \n \n-@keras_export(\"keras.losses.CosineSimilarity\")\n-class CosineSimilarity(LossFunctionWrapper):\n-    \"\"\"Computes the cosine similarity between labels and predictions.\n-\n-    Note that it is a number between -1 and 1. When it is a negative number\n-    between -1 and 0, 0 indicates orthogonality and values closer to -1\n-    indicate greater similarity. The values closer to 1 indicate greater\n-    dissimilarity. This makes it usable as a loss function in a setting\n-    where you try to maximize the proximity between predictions and targets.\n-    If either `y_true` or `y_pred` is a zero vector, cosine similarity will be 0\n-    regardless of the proximity between predictions and targets.\n-\n-    `loss = -sum(l2_norm(y_true) * l2_norm(y_pred))`\n-\n-    Standalone usage:\n-\n-    >>> y_true = [[0., 1.], [1., 1.]]\n-    >>> y_pred = [[1., 0.], [1., 1.]]\n-    >>> # Using 'auto'/'sum_over_batch_size' reduction type.\n-    >>> cosine_loss = tf.keras.losses.CosineSimilarity(axis=1)\n-    >>> # l2_norm(y_true) = [[0., 1.], [1./1.414, 1./1.414]]\n-    >>> # l2_norm(y_pred) = [[1., 0.], [1./1.414, 1./1.414]]\n-    >>> # l2_norm(y_true) . l2_norm(y_pred) = [[0., 0.], [0.5, 0.5]]\n-    >>> # loss = mean(sum(l2_norm(y_true) . l2_norm(y_pred), axis=1))\n-    >>> #       = -((0. + 0.) +  (0.5 + 0.5)) / 2\n-    >>> cosine_loss(y_true, y_pred).numpy()\n-    -0.5\n-\n-    >>> # Calling with 'sample_weight'.\n-    >>> cosine_loss(y_true, y_pred, sample_weight=[0.8, 0.2]).numpy()\n-    -0.0999\n-\n-    >>> # Using 'sum' reduction type.\n-    >>> cosine_loss = tf.keras.losses.CosineSimilarity(axis=1,\n-    ...     reduction=tf.keras.losses.Reduction.SUM)\n-    >>> cosine_loss(y_true, y_pred).numpy()\n-    -0.999\n-\n-    >>> # Using 'none' reduction type.\n-    >>> cosine_loss = tf.keras.losses.CosineSimilarity(axis=1,\n-    ...     reduction=tf.keras.losses.Reduction.NONE)\n-    >>> cosine_loss(y_true, y_pred).numpy()\n-    array([-0., -0.999], dtype=float32)\n-\n-    Usage with the `compile()` API:\n-\n-    ```python\n-    model.compile(optimizer='sgd',\n-                  loss=tf.keras.losses.CosineSimilarity(axis=1))\n-    ```\n-\n-    Args:\n-        axis: The axis along which the cosine similarity is computed\n-            (the features axis). Defaults to -1.\n-        reduction: Type of `tf.keras.losses.Reduction` to apply to loss.\n-            Default value is `AUTO`. `AUTO` indicates that the reduction option\n-            will be determined by the usage context. For almost all cases this\n-            defaults to `SUM_OVER_BATCH_SIZE`. When used under a\n-            `tf.distribute.Strategy`, except via `Model.compile()` and\n-            `Model.fit()`, using `AUTO` or `SUM_OVER_BATCH_SIZE` will raise an\n-            error. Please see this custom training [tutorial](\n-            https://www.tensorflow.org/tutorials/distribute/custom_training)\n-            for more details.\n-        name: Optional name for the instance. Defaults to 'cosine_similarity'.\n-    \"\"\"\n-\n-    def __init__(\n-        self,\n-        axis=-1,\n-        reduction=losses_utils.ReductionV2.AUTO,\n-        name=\"cosine_similarity\",\n-    ):\n-        super().__init__(\n-            cosine_similarity, reduction=reduction, name=name, axis=axis\n-        )\n-\n-\n # Aliases.\n \n bce = BCE = binary_crossentropy\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "keras#643b1ae8d049ffb459205b415e9ff8430d488a3c", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 3 | Lines Deleted: 3 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 6 | Churn Cumulative: 9996 | Contributors (this commit): 34 | Commits (past 90d): 15 | Contributors (cumulative): 34 | DMM Complexity: None\n\nDIFF:\n@@ -634,9 +634,9 @@ class BinaryCrossentropy(LossFunctionWrapper):\n \n         Args:\n             from_logits: Whether to interpret `y_pred` as a tensor of\n-                [logit](https://en.wikipedia.org/wiki/Logit) values. By default, we\n-                assume that `y_pred` contains probabilities (i.e., values in [0,\n-                1]).\n+                [logit](https://en.wikipedia.org/wiki/Logit) values. By default,\n+                we assume that `y_pred` contains probabilities (i.e., values in\n+                [0, 1]).\n             label_smoothing: Float in [0, 1]. When 0, no smoothing occurs.\n                 When > 0, we compute the loss between the predicted labels and a\n                 smoothed version of the true labels, where the smoothing\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "keras#0bf48b8274de0eed7a675cc0924018fbffcaeb14", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 10 | Lines Deleted: 10 | Files Changed: 1 | Hunks: 10 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 20 | Churn Cumulative: 3497 | Contributors (this commit): 4 | Commits (past 90d): 5 | Contributors (cumulative): 4 | DMM Complexity: None\n\nDIFF:\n@@ -139,7 +139,7 @@ class FalsePositives(_ConfusionMatrixConditionCount):\n \n     ```python\n     model.compile(optimizer='sgd',\n-                  loss='mse',\n+                  loss='binary_crossentropy',\n                   metrics=[tf.keras.metrics.FalsePositives()])\n     ```\n \n@@ -200,7 +200,7 @@ class FalseNegatives(_ConfusionMatrixConditionCount):\n \n     ```python\n     model.compile(optimizer='sgd',\n-                  loss='mse',\n+                  loss='binary_crossentropy',\n                   metrics=[tf.keras.metrics.FalseNegatives()])\n     ```\n \n@@ -261,7 +261,7 @@ class TrueNegatives(_ConfusionMatrixConditionCount):\n \n     ```python\n     model.compile(optimizer='sgd',\n-                  loss='mse',\n+                  loss='binary_crossentropy',\n                   metrics=[tf.keras.metrics.TrueNegatives()])\n     ```\n \n@@ -322,7 +322,7 @@ class TruePositives(_ConfusionMatrixConditionCount):\n \n     ```python\n     model.compile(optimizer='sgd',\n-                  loss='mse',\n+                  loss='binary_crossentropy',\n                   metrics=[tf.keras.metrics.TruePositives()])\n     ```\n \n@@ -414,7 +414,7 @@ class Precision(base_metric.Metric):\n \n     ```python\n     model.compile(optimizer='sgd',\n-                  loss='mse',\n+                  loss='binary_crossentropy',\n                   metrics=[tf.keras.metrics.Precision()])\n     ```\n \n@@ -560,7 +560,7 @@ class Recall(base_metric.Metric):\n \n     ```python\n     model.compile(optimizer='sgd',\n-                  loss='mse',\n+                  loss='binary_crossentropy',\n                   metrics=[tf.keras.metrics.Recall()])\n     ```\n \n@@ -824,7 +824,7 @@ class SensitivityAtSpecificity(SensitivitySpecificityBase):\n     ```python\n     model.compile(\n         optimizer='sgd',\n-        loss='mse',\n+        loss='binary_crossentropy',\n         metrics=[tf.keras.metrics.SensitivityAtSpecificity()])\n     ```\n     \"\"\"\n@@ -929,7 +929,7 @@ class SpecificityAtSensitivity(SensitivitySpecificityBase):\n     ```python\n     model.compile(\n         optimizer='sgd',\n-        loss='mse',\n+        loss='binary_crossentropy',\n         metrics=[tf.keras.metrics.SpecificityAtSensitivity()])\n     ```\n     \"\"\"\n@@ -1025,7 +1025,7 @@ class PrecisionAtRecall(SensitivitySpecificityBase):\n     ```python\n     model.compile(\n         optimizer='sgd',\n-        loss='mse',\n+        loss='binary_crossentropy',\n         metrics=[tf.keras.metrics.PrecisionAtRecall(recall=0.8)])\n     ```\n     \"\"\"\n@@ -1116,7 +1116,7 @@ class RecallAtPrecision(SensitivitySpecificityBase):\n     ```python\n     model.compile(\n         optimizer='sgd',\n-        loss='mse',\n+        loss='binary_crossentropy',\n         metrics=[tf.keras.metrics.RecallAtPrecision(precision=0.8)])\n     ```\n     \"\"\"\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
