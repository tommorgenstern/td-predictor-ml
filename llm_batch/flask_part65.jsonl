{"custom_id": "flask#571334df8e26333f34873a3dcb84441946e6c64c", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 265 | Contributors (this commit): 10 | Commits (past 90d): 3 | Contributors (cumulative): 10 | DMM Complexity: None\n\nDIFF:\n@@ -10,7 +10,7 @@\n     :license: BSD, see LICENSE for more details.\n \"\"\"\n \n-__version__ = '0.12.2-dev'\n+__version__ = '0.12.2'\n \n # utilities we import from Werkzeug and Jinja2 that are unused\n # in the module but are exported as public interface.\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#f347d3c59e3304474ca85b17e24261f127b27282", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 267 | Contributors (this commit): 10 | Commits (past 90d): 4 | Contributors (cumulative): 10 | DMM Complexity: None\n\nDIFF:\n@@ -10,7 +10,7 @@\n     :license: BSD, see LICENSE for more details.\n \"\"\"\n \n-__version__ = '0.12.2'\n+__version__ = '0.12.3-dev'\n \n # utilities we import from Werkzeug and Jinja2 that are unused\n # in the module but are exported as public interface.\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#ae133aa1734775f03560bde3d98c7f7d1c1569f7", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 33 | Lines Deleted: 34 | Files Changed: 1 | Hunks: 8 | Methods Changed: 3 | Complexity Δ (Sum/Max): 3/3 | Churn Δ: 67 | Churn Cumulative: 967 | Contributors (this commit): 18 | Commits (past 90d): 3 | Contributors (cumulative): 18 | DMM Complexity: 1.0\n\nDIFF:\n@@ -125,7 +125,8 @@ class SecureCookieSession(CallbackDict, SessionMixin):\n         def on_update(self):\n             self.modified = True\n             self.accessed = True\n-        CallbackDict.__init__(self, initial, on_update)\n+\n+        super(SecureCookieSession, self).__init__(initial, on_update)\n         self.modified = False\n         self.accessed = False\n \n@@ -306,22 +307,20 @@ class SessionInterface(object):\n             return datetime.utcnow() + app.permanent_session_lifetime\n \n     def should_set_cookie(self, app, session):\n-        \"\"\"Indicates whether a cookie should be set now or not.  This is\n-        used by session backends to figure out if they should emit a\n-        set-cookie header or not.  The default behavior is controlled by\n-        the ``SESSION_REFRESH_EACH_REQUEST`` config variable.  If\n-        it's set to ``False`` then a cookie is only set if the session is\n-        modified, if set to ``True`` it's always set if the session is\n-        permanent.\n+        \"\"\"Used by session backends to determine if a ``Set-Cookie`` header\n+        should be set for this session cookie for this response. If the session\n+        has been modified, the cookie is set. If the session is permanent and\n+        the ``SESSION_REFRESH_EACH_REQUEST`` config is true, the cookie is\n+        always set.\n         \n-        This check is usually skipped if sessions get deleted.\n+        This check is usually skipped if the session was deleted.\n \n         .. versionadded:: 0.11\n         \"\"\"\n-        if session.modified:\n-            return True\n-        save_each = app.config['SESSION_REFRESH_EACH_REQUEST']\n-        return save_each and session.permanent\n+\n+        return session.modified or (\n+            session.permanent and app.config['SESSION_REFRESH_EACH_REQUEST']\n+        )\n \n     def open_session(self, app, request):\n         \"\"\"This method has to be implemented and must either return ``None``\n@@ -387,28 +386,22 @@ class SecureCookieSessionInterface(SessionInterface):\n         domain = self.get_cookie_domain(app)\n         path = self.get_cookie_path(app)\n \n-        if session.accessed:\n-\n-            response.headers.add('Vary', 'Cookie')\n-\n-        else:\n-\n-            # Delete case.  If there is no session we bail early.\n-            # If the session was modified to be empty we remove the\n-            # whole cookie.\n+        # If the session is modified to be empty, remove the cookie.\n+        # If the session is empty, return without setting the cookie.\n         if not session:\n             if session.modified:\n-                    response.delete_cookie(app.session_cookie_name,\n-                                           domain=domain, path=path)\n+                response.delete_cookie(\n+                    app.session_cookie_name,\n+                    domain=domain,\n+                    path=path\n+                )\n+\n             return\n \n-            # Modification case.  There are upsides and downsides to\n-            # emitting a set-cookie header each request.  The behavior\n-            # is controlled by the :meth:`should_set_cookie` method\n-            # which performs a quick check to figure out if the cookie\n-            # should be set or not.  This is controlled by the\n-            # SESSION_REFRESH_EACH_REQUEST config flag as well as\n-            # the permanent flag on the session itself.\n+        # Add a \"Vary: Cookie\" header if the session was accessed at all.\n+        if session.accessed:\n+            response.headers.add('Vary', 'Cookie')\n+\n         if not self.should_set_cookie(app, session):\n             return\n \n@@ -416,6 +409,12 @@ class SecureCookieSessionInterface(SessionInterface):\n         secure = self.get_cookie_secure(app)\n         expires = self.get_expiration_time(app, session)\n         val = self.get_signing_serializer(app).dumps(dict(session))\n-        response.set_cookie(app.session_cookie_name, val,\n-                            expires=expires, httponly=httponly,\n-                            domain=domain, path=path, secure=secure)\n+        response.set_cookie(\n+            app.session_cookie_name,\n+            val,\n+            expires=expires,\n+            httponly=httponly,\n+            domain=domain,\n+            path=path,\n+            secure=secure\n+        )\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#5d9dd0b379a63d5a90265f2469f86fbd81b05853", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 26 | Lines Deleted: 17 | Files Changed: 2 | Hunks: 8 | Methods Changed: 8 | Complexity Δ (Sum/Max): 9/8 | Churn Δ: 43 | Churn Cumulative: 2616 | Contributors (this commit): 35 | Commits (past 90d): 16 | Contributors (cumulative): 39 | DMM Complexity: 1.0\n\nDIFF:\n@@ -138,6 +138,11 @@ class SecureCookieSession(CallbackDict, SessionMixin):\n         self.accessed = True\n         return super(SecureCookieSession, self).get(key, default)\n \n+    def setdefault(self, key, default=None):\n+        self.accessed = True\n+        return super(SecureCookieSession, self).setdefault(key, default)\n+\n+\n class NullSession(SecureCookieSession):\n     \"\"\"Class used to generate nicer error messages if sessions are not\n     available.  Will still allow read-only access to the empty session\n\n@@ -533,20 +533,22 @@ def test_session_vary_cookie():\n     app = flask.Flask(__name__)\n     app.secret_key = 'testkey'\n \n-    @app.route('/set-session')\n+    @app.route('/set')\n     def set_session():\n         flask.session['test'] = 'test'\n         return ''\n \n-    @app.route('/get-session')\n-    def get_session():\n-        s = flask.session.get('test')\n-        return ''\n+    @app.route('/get')\n+    def get():\n+        return flask.session.get('test')\n \n-    @app.route('/get-session-with-dictionary')\n-    def get_session_with_dictionary():\n-        s = flask.session['test']\n-        return ''\n+    @app.route('/getitem')\n+    def getitem():\n+        return flask.session['test']\n+\n+    @app.route('/setdefault')\n+    def setdefault():\n+        return flask.session.setdefault('test', 'default')\n \n     @app.route('/no-vary-header')\n     def no_vary_header():\n@@ -554,18 +556,20 @@ def test_session_vary_cookie():\n \n     c = app.test_client()\n \n-    rv = c.get('/set-session')\n-    assert rv.headers['Vary'] == 'Cookie'\n+    def expect(path, header=True):\n+        rv = c.get(path)\n \n-    rv = c.get('/get-session')\n+        if header:\n             assert rv.headers['Vary'] == 'Cookie'\n-\n-    rv = c.get('/get-session-with-dictionary')\n-    assert rv.headers['Vary'] == 'Cookie'\n-\n-    rv = c.get('/no-vary-header')\n+        else:\n             assert 'Vary' not in rv.headers\n \n+    expect('/set')\n+    expect('/get')\n+    expect('/getitem')\n+    expect('/setdefault')\n+    expect('/no-vary-header', False)\n+\n \n def test_flashes():\n     app = flask.Flask(__name__)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#9fddecd4d92763f38a42a3842abab70b0a6f4678", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 27 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 4 | Complexity Δ (Sum/Max): 4/4 | Churn Δ: 27 | Churn Cumulative: 307 | Contributors (this commit): 4 | Commits (past 90d): 1 | Contributors (cumulative): 4 | DMM Complexity: 1.0\n\nDIFF:\n@@ -91,6 +91,33 @@ def test_blueprint_specific_user_error_handling():\n     assert c.get('/decorator').data == b'boom'\n     assert c.get('/function').data == b'bam'\n \n+def test_blueprint_app_error_handling():\n+    errors = flask.Blueprint('errors', __name__)\n+\n+    @errors.app_errorhandler(403)\n+    def forbidden_handler(e):\n+        return 'you shall not pass', 403\n+\n+    app = flask.Flask(__name__)\n+\n+    @app.route('/forbidden')\n+    def app_forbidden():\n+        flask.abort(403)\n+\n+    forbidden_bp = flask.Blueprint('forbidden_bp', __name__)\n+\n+    @forbidden_bp.route('/nope')\n+    def bp_forbidden():\n+        flask.abort(403)\n+\n+    app.register_blueprint(errors)\n+    app.register_blueprint(forbidden_bp)\n+\n+    c = app.test_client()\n+\n+    assert c.get('/forbidden').data == b'you shall not pass'\n+    assert c.get('/nope').data == b'you shall not pass'\n+\n def test_blueprint_url_definitions():\n     bp = flask.Blueprint('test', __name__)\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#ced719ea18a56f6c4075e08dbe05f0e77eac1866", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 49 | Lines Deleted: 0 | Files Changed: 2 | Hunks: 3 | Methods Changed: 5 | Complexity Δ (Sum/Max): 11/6 | Churn Δ: 49 | Churn Cumulative: 1949 | Contributors (this commit): 28 | Commits (past 90d): 9 | Contributors (cumulative): 37 | DMM Complexity: 0.7391304347826086\n\nDIFF:\n@@ -46,6 +46,21 @@ def find_best_app(module):\n \n     if len(matches) == 1:\n         return matches[0]\n+\n+    # Search for app factory callables.\n+    for attr_name in 'create_app', 'make_app':\n+        app_factory = getattr(module, attr_name, None)\n+        if app_factory is not None and callable(app_factory):\n+            try:\n+                app = app_factory()\n+                if app is not None and isinstance(app, Flask):\n+                    return app\n+            except TypeError:\n+                raise NoAppException('Auto-detected \"%s()\" in module \"%s\", '\n+                                     'but could not call it without '\n+                                     'specifying arguments.'\n+                                     % (attr_name, module.__name__))\n+\n     raise NoAppException('Failed to find application in module \"%s\".  Are '\n                          'you sure it contains a Flask application?  Maybe '\n                          'you wrapped it in a WSGI middleware or you are '\n\n@@ -51,6 +51,34 @@ def test_find_best_app(test_apps):\n         myapp = Flask('appname')\n     assert find_best_app(Module) == Module.myapp\n \n+    class Module:\n+        @staticmethod\n+        def create_app():\n+            return Flask('appname')\n+    assert isinstance(find_best_app(Module), Flask)\n+    assert find_best_app(Module).name == 'appname'\n+\n+    class Module:\n+        @staticmethod\n+        def make_app():\n+            return Flask('appname')\n+    assert isinstance(find_best_app(Module), Flask)\n+    assert find_best_app(Module).name == 'appname'\n+\n+    class Module:\n+        myapp = Flask('appname1')\n+        @staticmethod\n+        def create_app():\n+            return Flask('appname2')\n+    assert find_best_app(Module) == Module.myapp\n+\n+    class Module:\n+        myapp = Flask('appname1')\n+        @staticmethod\n+        def create_app(foo):\n+            return Flask('appname2')\n+    assert find_best_app(Module) == Module.myapp\n+\n     class Module:\n         pass\n     pytest.raises(NoAppException, find_best_app, Module)\n@@ -60,6 +88,12 @@ def test_find_best_app(test_apps):\n         myapp2 = Flask('appname2')\n     pytest.raises(NoAppException, find_best_app, Module)\n \n+    class Module:\n+        @staticmethod\n+        def create_app(foo):\n+            return Flask('appname2')\n+    pytest.raises(NoAppException, find_best_app, Module)\n+\n \n def test_prepare_exec_for_file(test_apps):\n     \"\"\"Expect the correct path to be set and the correct module name to be returned.\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#136dbf7de014dda29f3af89d1ba4fd4f4620e25c", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 42 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 5 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 42 | Churn Cumulative: 349 | Contributors (this commit): 4 | Commits (past 90d): 2 | Contributors (cumulative): 4 | DMM Complexity: 1.0\n\nDIFF:\n@@ -591,3 +591,45 @@ def test_add_template_test_with_name_and_template():\n         return flask.render_template('template_test.html', value=False)\n     rv = app.test_client().get('/')\n     assert b'Success!' in rv.data\n+\n+def test_context_processing():\n+    app = flask.Flask(__name__)\n+    answer_bp = flask.Blueprint('answer_bp', __name__)\n+\n+    template_string = lambda: flask.render_template_string(\n+        '{% if notanswer %}{{ notanswer }} is not the answer. {% endif %}'\n+        '{% if answer %}{{ answer }} is the answer.{% endif %}'\n+    )\n+\n+    # App global context processor\n+    @answer_bp.app_context_processor\n+    def not_answer_context_processor():\n+        return {'notanswer': 43}\n+\n+    # Blueprint local context processor\n+    @answer_bp.context_processor\n+    def answer_context_processor():\n+        return {'answer': 42}\n+\n+    # Setup endpoints for testing\n+    @answer_bp.route('/bp')\n+    def bp_page():\n+        return template_string()\n+\n+    @app.route('/')\n+    def app_page():\n+        return template_string()\n+\n+    # Register the blueprint\n+    app.register_blueprint(answer_bp)\n+\n+    c = app.test_client()\n+\n+    app_page_bytes = c.get('/').data\n+    answer_page_bytes = c.get('/bp').data\n+\n+    assert b'43' in app_page_bytes\n+    assert b'42' not in app_page_bytes\n+\n+    assert b'42' in answer_page_bytes\n+    assert b'43' in answer_page_bytes\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#b4eb6534d52e86af3979b06734e5779f6bb9a4f6", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 13 | Lines Deleted: 11 | Files Changed: 1 | Hunks: 5 | Methods Changed: 1 | Complexity Δ (Sum/Max): -3/0 | Churn Δ: 24 | Churn Cumulative: 1535 | Contributors (this commit): 22 | Commits (past 90d): 6 | Contributors (cumulative): 22 | DMM Complexity: 0.0\n\nDIFF:\n@@ -37,7 +37,7 @@ def find_best_app(module):\n     # Search for the most common names first.\n     for attr_name in 'app', 'application':\n         app = getattr(module, attr_name, None)\n-        if app is not None and isinstance(app, Flask):\n+        if isinstance(app, Flask):\n             return app\n \n     # Otherwise find the only object that is a Flask instance.\n@@ -50,21 +50,23 @@ def find_best_app(module):\n     # Search for app factory callables.\n     for attr_name in 'create_app', 'make_app':\n         app_factory = getattr(module, attr_name, None)\n-        if app_factory is not None and callable(app_factory):\n+        if callable(app_factory):\n             try:\n                 app = app_factory()\n-                if app is not None and isinstance(app, Flask):\n+                if isinstance(app, Flask):\n                     return app\n             except TypeError:\n-                raise NoAppException('Auto-detected \"%s()\" in module \"%s\", '\n-                                     'but could not call it without '\n-                                     'specifying arguments.'\n-                                     % (attr_name, module.__name__))\n+                raise NoAppException(\n+                    'Auto-detected \"{callable}()\" in module \"{module}\", but '\n+                    'could not call it without specifying arguments.'\n+                    .format(callable=attr_name,\n+                            module=module.__name__))\n \n-    raise NoAppException('Failed to find application in module \"%s\".  Are '\n-                         'you sure it contains a Flask application?  Maybe '\n-                         'you wrapped it in a WSGI middleware or you are '\n-                         'using a factory function.' % module.__name__)\n+    raise NoAppException(\n+        'Failed to find application in module \"{module}\".  Are you sure '\n+        'it contains a Flask application?  Maybe you wrapped it in a WSGI '\n+        'middleware or you are using a factory function.'\n+        .format(module=module.__name__))\n \n \n def prepare_exec_for_file(filename):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#7ce01ab9b4aac9e559cd6cb2e309381cfc3cc71b", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 19 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 2 | Complexity Δ (Sum/Max): 6/6 | Churn Δ: 19 | Churn Cumulative: 368 | Contributors (this commit): 4 | Commits (past 90d): 3 | Contributors (cumulative): 4 | DMM Complexity: 1.0\n\nDIFF:\n@@ -660,3 +660,22 @@ def test_context_processing():\n \n     assert b'42' in answer_page_bytes\n     assert b'43' in answer_page_bytes\n+\n+def test_template_global():\n+    app = flask.Flask(__name__)\n+    bp = flask.Blueprint('bp', __name__)\n+    @bp.app_template_global()\n+    def get_answer():\n+        return 42\n+    # Make sure the function is not in the jinja_env already\n+    assert 'get_answer' not in app.jinja_env.globals.keys()\n+    app.register_blueprint(bp)\n+\n+    # Tests\n+    assert 'get_answer' in app.jinja_env.globals.keys()\n+    assert app.jinja_env.globals['get_answer'] is get_answer\n+    assert app.jinja_env.globals['get_answer']() == 42\n+\n+    with app.app_context():\n+        rv = flask.render_template_string('{{ get_answer() }}')\n+        assert rv == '42'\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#7ecdbcfa2b2d1c83c8c6561b49303ed5b1042350", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 17 | Lines Deleted: 7 | Files Changed: 1 | Hunks: 6 | Methods Changed: 1 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 24 | Churn Cumulative: 1559 | Contributors (this commit): 22 | Commits (past 90d): 7 | Contributors (cumulative): 22 | DMM Complexity: 0.0\n\nDIFF:\n@@ -41,32 +41,42 @@ def find_best_app(module):\n             return app\n \n     # Otherwise find the only object that is a Flask instance.\n-    matches = [v for k, v in iteritems(module.__dict__)\n-               if isinstance(v, Flask)]\n+    matches = [\n+        v for k, v in iteritems(module.__dict__) if isinstance(v, Flask)\n+    ]\n \n     if len(matches) == 1:\n         return matches[0]\n+    elif len(matches) > 1:\n+        raise NoAppException(\n+            'Auto-detected multiple Flask applications in module \"{module}\".'\n+            ' Use \"FLASK_APP={module}:name\" to specify the correct'\n+            ' one.'.format(module=module.__name__)\n+        )\n \n     # Search for app factory callables.\n     for attr_name in 'create_app', 'make_app':\n         app_factory = getattr(module, attr_name, None)\n+\n         if callable(app_factory):\n             try:\n                 app = app_factory()\n+\n                 if isinstance(app, Flask):\n                     return app\n             except TypeError:\n                 raise NoAppException(\n                     'Auto-detected \"{callable}()\" in module \"{module}\", but '\n-                    'could not call it without specifying arguments.'\n-                    .format(callable=attr_name,\n-                            module=module.__name__))\n+                    'could not call it without specifying arguments.'.format(\n+                        callable=attr_name, module=module.__name__\n+                    )\n+                )\n \n     raise NoAppException(\n         'Failed to find application in module \"{module}\". Are you sure '\n         'it contains a Flask application? Maybe you wrapped it in a WSGI '\n-        'middleware or you are using a factory function.'\n-        .format(module=module.__name__))\n+        'middleware.'.format(module=module.__name__)\n+    )\n \n \n def prepare_exec_for_file(filename):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#01ddf54b87850c50ee9020c6027647e0c5fca283", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 1563 | Contributors (this commit): 22 | Commits (past 90d): 8 | Contributors (cumulative): 22 | DMM Complexity: None\n\nDIFF:\n@@ -35,7 +35,7 @@ def find_best_app(module):\n     from . import Flask\n \n     # Search for the most common names first.\n-    for attr_name in 'app', 'application':\n+    for attr_name in ('app', 'application'):\n         app = getattr(module, attr_name, None)\n         if isinstance(app, Flask):\n             return app\n@@ -55,7 +55,7 @@ def find_best_app(module):\n         )\n \n     # Search for app factory callables.\n-    for attr_name in 'create_app', 'make_app':\n+    for attr_name in ('create_app', 'make_app'):\n         app_factory = getattr(module, attr_name, None)\n \n         if callable(app_factory):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#6f49089a624a13353a07db87aff5fe6f01699728", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 50 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 2 | Methods Changed: 5 | Complexity Δ (Sum/Max): 16/16 | Churn Δ: 50 | Churn Cumulative: 1096 | Contributors (this commit): 22 | Commits (past 90d): 11 | Contributors (cumulative): 22 | DMM Complexity: 1.0\n\nDIFF:\n@@ -22,6 +22,7 @@ from werkzeug.exceptions import BadRequest, NotFound\n from werkzeug.http import parse_cache_control_header, parse_options_header\n from werkzeug.http import http_date\n from flask._compat import StringIO, text_type\n+from flask.helpers import get_debug_flag, make_response\n \n \n def has_encoding(name):\n@@ -941,3 +942,52 @@ class TestSafeJoin(object):\n         for args in failing:\n             with pytest.raises(NotFound):\n                 print(flask.safe_join(*args))\n+\n+class TestHelpers(object):\n+\n+    def test_get_debug_flag(self):\n+        original_debug_value = os.environ.get('FLASK_DEBUG') or ''\n+        os.environ['FLASK_DEBUG'] = ''\n+        assert get_debug_flag() == None\n+        assert get_debug_flag(default=True) == True\n+\n+        os.environ['FLASK_DEBUG'] = '0'\n+        assert get_debug_flag() == False\n+        assert get_debug_flag(default=True) == False\n+\n+        os.environ['FLASK_DEBUG'] = 'False'\n+        assert get_debug_flag() == False\n+        assert get_debug_flag(default=True) == False\n+\n+        os.environ['FLASK_DEBUG'] = 'No'\n+        assert get_debug_flag() == False\n+        assert get_debug_flag(default=True) == False\n+\n+        os.environ['FLASK_DEBUG'] = 'True'\n+        assert get_debug_flag() == True\n+        assert get_debug_flag(default=True) == True\n+\n+        os.environ['FLASK_DEBUG'] = original_debug_value\n+\n+    def test_make_response_no_args(self):\n+        app = flask.Flask(__name__)\n+        app.testing = True\n+        @app.route('/')\n+        def index():\n+            return flask.helpers.make_response()\n+        c = app.test_client()\n+        rv = c.get()\n+        assert rv\n+\n+    def test_make_response_with_args(self):\n+        app = flask.Flask(__name__)\n+        app.testing = True\n+        @app.route('/')\n+        def index():\n+            response = flask.helpers.make_response(flask.render_template_string('Hello World'))\n+            response.headers['X-Parachutes'] = 'parachutes are cool'\n+            return response\n+        c = app.test_client()\n+        rv = c.get()\n+        assert rv\n+        assert rv.headers['X-Parachutes'] == 'parachutes are cool'\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#a690ae27a392cfa1474e062f7655250c416cd536", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 62 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 9 | Complexity Δ (Sum/Max): 9/9 | Churn Δ: 62 | Churn Cumulative: 430 | Contributors (this commit): 4 | Commits (past 90d): 4 | Contributors (cumulative): 4 | DMM Complexity: 1.0\n\nDIFF:\n@@ -679,3 +679,65 @@ def test_template_global():\n     with app.app_context():\n         rv = flask.render_template_string('{{ get_answer() }}')\n         assert rv == '42'\n+\n+def test_request_processing():\n+    app = flask.Flask(__name__)\n+    bp = flask.Blueprint('bp', __name__)\n+    evts = []\n+    @bp.before_request\n+    def before_bp():\n+        evts.append('before')\n+    @bp.after_request\n+    def after_bp(response):\n+        response.data += b'|after'\n+        evts.append('after')\n+        return response\n+\n+    # Setup routes for testing\n+    @bp.route('/bp')\n+    def bp_endpoint():\n+        return 'request'\n+\n+    app.register_blueprint(bp)\n+\n+    assert evts == []\n+    rv = app.test_client().get('/bp')\n+    assert rv.data == b'request|after'\n+    assert evts == ['before', 'after']\n+\n+def test_app_request_processing():\n+    app = flask.Flask(__name__)\n+    bp = flask.Blueprint('bp', __name__)\n+    evts = []\n+\n+    @bp.before_app_first_request\n+    def before_first_request():\n+        evts.append('first')\n+    @bp.before_app_request\n+    def before_app():\n+        evts.append('before')\n+    @bp.after_app_request\n+    def after_app(response):\n+        response.data += b'|after'\n+        evts.append('after')\n+        return response\n+\n+    app.register_blueprint(bp)\n+\n+    # Setup routes for testing\n+    @app.route('/')\n+    def bp_endpoint():\n+        return 'request'\n+\n+    # before first request\n+    assert evts == []\n+\n+    # first request\n+    resp = app.test_client().get('/').data\n+    assert resp == b'request|after'\n+    assert evts == ['first', 'before', 'after']\n+\n+    # second request\n+    resp = app.test_client().get('/').data\n+    assert resp == b'request|after'\n+    assert evts == ['first', 'before', 'after', 'before', 'after']\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#d8d712a0def83d146d155acb941c31781e7c3b3a", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 9 | Lines Deleted: 3 | Files Changed: 1 | Hunks: 5 | Methods Changed: 4 | Complexity Δ (Sum/Max): 2/2 | Churn Δ: 12 | Churn Cumulative: 442 | Contributors (this commit): 4 | Commits (past 90d): 5 | Contributors (cumulative): 4 | DMM Complexity: 1.0\n\nDIFF:\n@@ -692,6 +692,9 @@ def test_request_processing():\n         response.data += b'|after'\n         evts.append('after')\n         return response\n+    @bp.teardown_request\n+    def teardown_bp(exc):\n+        evts.append('teardown')\n \n     # Setup routes for testing\n     @bp.route('/bp')\n@@ -703,7 +706,7 @@ def test_request_processing():\n     assert evts == []\n     rv = app.test_client().get('/bp')\n     assert rv.data == b'request|after'\n-    assert evts == ['before', 'after']\n+    assert evts == ['before', 'after', 'teardown']\n \n def test_app_request_processing():\n     app = flask.Flask(__name__)\n@@ -721,6 +724,9 @@ def test_app_request_processing():\n         response.data += b'|after'\n         evts.append('after')\n         return response\n+    @bp.teardown_app_request\n+    def teardown_app(exc):\n+        evts.append('teardown')\n \n     app.register_blueprint(bp)\n \n@@ -735,9 +741,9 @@ def test_app_request_processing():\n     # first request\n     resp = app.test_client().get('/').data\n     assert resp == b'request|after'\n-    assert evts == ['first', 'before', 'after']\n+    assert evts == ['first', 'before', 'after', 'teardown']\n \n     # second request\n     resp = app.test_client().get('/').data\n     assert resp == b'request|after'\n-    assert evts == ['first', 'before', 'after', 'before', 'after']\n+    assert evts == ['first'] + ['before', 'after', 'teardown'] * 2\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#65fc888172fbff89a8354e8926a69b4515766389", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 4621 | Contributors (this commit): 81 | Commits (past 90d): 13 | Contributors (cumulative): 81 | DMM Complexity: None\n\nDIFF:\n@@ -222,7 +222,7 @@ class Flask(_PackageBoundObject):\n \n     #: The testing flag.  Set this to ``True`` to enable the test mode of\n     #: Flask extensions (and in the future probably also Flask itself).\n-    #: For example this might activate unittest helpers that have an\n+    #: For example this might activate test helpers that have an\n     #: additional runtime cost which should not be enabled by default.\n     #:\n     #: If this is enabled and PROPAGATE_EXCEPTIONS is not changed from the\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#378a11f99275a6b80d365a5d51d469844bf9ca17", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 5 | Files Changed: 1 | Hunks: 2 | Methods Changed: 2 | Complexity Δ (Sum/Max): -2/0 | Churn Δ: 6 | Churn Cumulative: 96 | Contributors (this commit): 3 | Commits (past 90d): 3 | Contributors (cumulative): 3 | DMM Complexity: 0.0\n\nDIFF:\n@@ -22,13 +22,9 @@ def client(request):\n     client = flaskr.app.test_client()\n     with flaskr.app.app_context():\n         flaskr.init_db()\n-\n-    def teardown():\n+    yield client\n     os.close(db_fd)\n     os.unlink(flaskr.app.config['DATABASE'])\n-    request.addfinalizer(teardown)\n-\n-    return client\n \n \n def login(client, username, password):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#fd4a363657f3b4f13611e029c52fcb8c806f7229", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 15 | Lines Deleted: 29 | Files Changed: 1 | Hunks: 8 | Methods Changed: 7 | Complexity Δ (Sum/Max): -4/0 | Churn Δ: 44 | Churn Cumulative: 1140 | Contributors (this commit): 22 | Commits (past 90d): 12 | Contributors (cumulative): 22 | DMM Complexity: 0.0\n\nDIFF:\n@@ -945,49 +945,35 @@ class TestSafeJoin(object):\n \n class TestHelpers(object):\n \n-    def test_get_debug_flag(self):\n-        original_debug_value = os.environ.get('FLASK_DEBUG') or ''\n-        os.environ['FLASK_DEBUG'] = ''\n+    def test_get_debug_flag(self, monkeypatch):\n+        monkeypatch.setenv('FLASK_DEBUG', '')\n         assert get_debug_flag() == None\n         assert get_debug_flag(default=True) == True\n \n-        os.environ['FLASK_DEBUG'] = '0'\n+        monkeypatch.setenv('FLASK_DEBUG', '0')\n         assert get_debug_flag() == False\n         assert get_debug_flag(default=True) == False\n \n-        os.environ['FLASK_DEBUG'] = 'False'\n+        monkeypatch.setenv('FLASK_DEBUG', 'False')\n         assert get_debug_flag() == False\n         assert get_debug_flag(default=True) == False\n \n-        os.environ['FLASK_DEBUG'] = 'No'\n+        monkeypatch.setenv('FLASK_DEBUG', 'No')\n         assert get_debug_flag() == False\n         assert get_debug_flag(default=True) == False\n \n-        os.environ['FLASK_DEBUG'] = 'True'\n+        monkeypatch.setenv('FLASK_DEBUG', 'True')\n         assert get_debug_flag() == True\n         assert get_debug_flag(default=True) == True\n \n-        os.environ['FLASK_DEBUG'] = original_debug_value\n-\n-    def test_make_response_no_args(self):\n+    def test_make_response(self):\n         app = flask.Flask(__name__)\n-        app.testing = True\n-        @app.route('/')\n-        def index():\n-            return flask.helpers.make_response()\n-        c = app.test_client()\n-        rv = c.get()\n-        assert rv\n+        with app.test_request_context():\n+            rv = flask.helpers.make_response()\n+            assert rv.status_code == 200\n+            assert rv.mimetype == 'text/html'\n \n-    def test_make_response_with_args(self):\n-        app = flask.Flask(__name__)\n-        app.testing = True\n-        @app.route('/')\n-        def index():\n-            response = flask.helpers.make_response(flask.render_template_string('Hello World'))\n-            response.headers['X-Parachutes'] = 'parachutes are cool'\n-            return response\n-        c = app.test_client()\n-        rv = c.get()\n-        assert rv\n-        assert rv.headers['X-Parachutes'] == 'parachutes are cool'\n+            rv = flask.helpers.make_response('Hello')\n+            assert rv.status_code == 200\n+            assert rv.data == b'Hello'\n+            assert rv.mimetype == 'text/html'\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#11d2eec3acb7d0cf291b572e3b6b493df5fadc6b", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 0 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 4623 | Contributors (this commit): 82 | Commits (past 90d): 14 | Contributors (cumulative): 82 | DMM Complexity: None\n\nDIFF:\n@@ -133,8 +133,6 @@ class Flask(_PackageBoundObject):\n     :param static_folder: the folder with static files that should be served\n                           at `static_url_path`.  Defaults to the ``'static'``\n                           folder in the root path of the application.\n-                          folder in the root path of the application. Defaults\n-                          to None.\n     :param host_matching: sets the app's ``url_map.host_matching`` to the given\n                           given value. Defaults to False.\n     :param static_host: the host to use when adding the static route. Defaults\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#cd412b20dc64f3bfa980c9993e5a4dce39a22b94", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 14 | Lines Deleted: 20 | Files Changed: 1 | Hunks: 1 | Methods Changed: 2 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 34 | Churn Cumulative: 1174 | Contributors (this commit): 22 | Commits (past 90d): 13 | Contributors (cumulative): 22 | DMM Complexity: 0.0\n\nDIFF:\n@@ -945,26 +945,20 @@ class TestSafeJoin(object):\n \n class TestHelpers(object):\n \n-    def test_get_debug_flag(self, monkeypatch):\n-        monkeypatch.setenv('FLASK_DEBUG', '')\n-        assert get_debug_flag() == None\n-        assert get_debug_flag(default=True) == True\n-\n-        monkeypatch.setenv('FLASK_DEBUG', '0')\n-        assert get_debug_flag() == False\n-        assert get_debug_flag(default=True) == False\n-\n-        monkeypatch.setenv('FLASK_DEBUG', 'False')\n-        assert get_debug_flag() == False\n-        assert get_debug_flag(default=True) == False\n-\n-        monkeypatch.setenv('FLASK_DEBUG', 'No')\n-        assert get_debug_flag() == False\n-        assert get_debug_flag(default=True) == False\n-\n-        monkeypatch.setenv('FLASK_DEBUG', 'True')\n-        assert get_debug_flag() == True\n-        assert get_debug_flag(default=True) == True\n+    @pytest.mark.parametrize(\"debug, expected_flag, expected_default_flag\", [\n+        ('', None, True),\n+        ('0', False, False),\n+        ('False', False, False),\n+        ('No', False, False),\n+        ('True', True, True)\n+    ])\n+    def test_get_debug_flag(self, monkeypatch, debug, expected_flag, expected_default_flag):\n+        monkeypatch.setenv('FLASK_DEBUG', debug)\n+        if expected_flag is None:\n+            assert get_debug_flag() is None\n+        else:\n+            assert get_debug_flag() == expected_flag\n+        assert get_debug_flag(default=True) == expected_default_flag\n \n     def test_make_response(self):\n         app = flask.Flask(__name__)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#7c882a457b734cd0a38d41c7e930e375a6ce6e4c", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 1176 | Contributors (this commit): 22 | Commits (past 90d): 14 | Contributors (cumulative): 22 | DMM Complexity: None\n\nDIFF:\n@@ -945,7 +945,7 @@ class TestSafeJoin(object):\n \n class TestHelpers(object):\n \n-    @pytest.mark.parametrize(\"debug, expected_flag, expected_default_flag\", [\n+    @pytest.mark.parametrize('debug, expected_flag, expected_default_flag', [\n         ('', None, True),\n         ('0', False, False),\n         ('False', False, False),\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#5963cb5a5172bce3a1ff7b0f8c64230f043c9cfd", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 13 | Lines Deleted: 16 | Files Changed: 3 | Hunks: 12 | Methods Changed: 12 | Complexity Δ (Sum/Max): -4/0 | Churn Δ: 29 | Churn Cumulative: 488 | Contributors (this commit): 6 | Commits (past 90d): 3 | Contributors (cumulative): 10 | DMM Complexity: 0.0\n\nDIFF:\n@@ -15,18 +15,16 @@ from minitwit import minitwit\n \n \n @pytest.fixture\n-def client(request):\n+def client():\n     db_fd, minitwit.app.config['DATABASE'] = tempfile.mkstemp()\n     client = minitwit.app.test_client()\n     with minitwit.app.app_context():\n         minitwit.init_db()\n \n-    def teardown():\n-        \"\"\"Get rid of the database again after each test.\"\"\"\n+    yield client\n+\n     os.close(db_fd)\n     os.unlink(minitwit.app.config['DATABASE'])\n-    request.addfinalizer(teardown)\n-    return client\n \n \n def register(client, username, password, password2=None, email=None):\n\n@@ -22,16 +22,17 @@ def test_apps(monkeypatch):\n             os.path.dirname(__file__), 'test_apps'))\n     )\n \n+\n @pytest.fixture(autouse=True)\n-def leak_detector(request):\n-    def ensure_clean_request_context():\n+def leak_detector():\n+    yield\n+\n     # make sure we're not leaking a request context since we are\n     # testing flask internally in debug mode in a few cases\n     leaks = []\n     while flask._request_ctx_stack.top is not None:\n         leaks.append(flask._request_ctx_stack.pop())\n     assert leaks == []\n-    request.addfinalizer(ensure_clean_request_context)\n \n \n @pytest.fixture(params=(True, False))\n\n@@ -21,19 +21,18 @@ from flask._compat import PY2\n \n \n @pytest.fixture(autouse=True)\n-def disable_extwarnings(request, recwarn):\n+def disable_extwarnings(recwarn):\n     from flask.exthook import ExtDeprecationWarning\n \n-    def inner():\n+    yield\n+\n     assert set(w.category for w in recwarn.list) \\\n         <= set([ExtDeprecationWarning])\n     recwarn.clear()\n \n-    request.addfinalizer(inner)\n-\n \n @pytest.fixture(autouse=True)\n-def importhook_setup(monkeypatch, request):\n+def importhook_setup(monkeypatch):\n     # we clear this out for various reasons.  The most important one is\n     # that a real flaskext could be in there which would disable our\n     # fake package.  Secondly we want to make sure that the flaskext\n@@ -58,13 +57,12 @@ def importhook_setup(monkeypatch, request):\n             import_hooks += 1\n     assert import_hooks == 1\n \n-    def teardown():\n+    yield\n+\n     from flask import ext\n     for key in ext.__dict__:\n         assert '.' not in key\n \n-    request.addfinalizer(teardown)\n-\n \n @pytest.fixture\n def newext_simple(modules_tmpdir):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#668061a5fc928a5055815acf818b02baf1aef37b", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 34 | Lines Deleted: 2 | Files Changed: 2 | Hunks: 3 | Methods Changed: 4 | Complexity Δ (Sum/Max): 6/4 | Churn Δ: 36 | Churn Cumulative: 4803 | Contributors (this commit): 83 | Commits (past 90d): 20 | Contributors (cumulative): 87 | DMM Complexity: 1.0\n\nDIFF:\n@@ -1484,7 +1484,16 @@ class Flask(_PackageBoundObject):\n             return handler\n \n         # fall back to app handlers\n-        return find_handler(self.error_handler_spec[None].get(code))\n+        handler = find_handler(self.error_handler_spec[None].get(code))\n+        if handler is not None:\n+            return handler\n+\n+        try:\n+            handler = find_handler(self.error_handler_spec[None][None])\n+        except KeyError:\n+            handler = None\n+\n+        return handler\n \n     def handle_http_exception(self, e):\n         \"\"\"Handles an HTTP exception.  By default this will invoke the\n\n@@ -1,5 +1,5 @@\n # -*- coding: utf-8 -*-\n-from werkzeug.exceptions import Forbidden, InternalServerError\n+from werkzeug.exceptions import Forbidden, InternalServerError, HTTPException, NotFound\n import flask\n \n \n@@ -32,6 +32,29 @@ def test_error_handler_no_match():\n     assert c.get('/keyerror').data == b'KeyError'\n \n \n+def test_default_error_handler():\n+    app = flask.Flask(__name__)\n+\n+    @app.errorhandler(HTTPException)\n+    def catchall_errorhandler(e):\n+        assert isinstance(e, HTTPException)\n+        assert isinstance(e, NotFound)\n+        return 'default'\n+\n+    @app.errorhandler(Forbidden)\n+    def catchall_errorhandler(e):\n+        assert isinstance(e, Forbidden)\n+        return 'forbidden'\n+\n+    @app.route('/forbidden')\n+    def forbidden():\n+        raise Forbidden()\n+\n+    c = app.test_client()\n+    assert c.get('/undefined').data == b'default'\n+    assert c.get('/forbidden').data == b'forbidden'\n+\n+\n def test_error_handler_subclass():\n     app = flask.Flask(__name__)\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#637eae548935ad1434459c1afac286c8686abeed", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 68 | Lines Deleted: 43 | Files Changed: 2 | Hunks: 8 | Methods Changed: 8 | Complexity Δ (Sum/Max): 3/4 | Churn Δ: 111 | Churn Cumulative: 4914 | Contributors (this commit): 84 | Commits (past 90d): 16 | Contributors (cumulative): 89 | DMM Complexity: 1.0\n\nDIFF:\n@@ -133,6 +133,8 @@ class Flask(_PackageBoundObject):\n     :param static_folder: the folder with static files that should be served\n                           at `static_url_path`.  Defaults to the ``'static'``\n                           folder in the root path of the application.\n+                          folder in the root path of the application. Defaults\n+                          to None.\n     :param host_matching: sets the app's ``url_map.host_matching`` to the given\n                           given value. Defaults to False.\n     :param static_host: the host to use when adding the static route. Defaults\n@@ -1460,15 +1462,17 @@ class Flask(_PackageBoundObject):\n         return f\n \n     def _find_error_handler(self, e):\n-        \"\"\"Finds a registered error handler for the request’s blueprint.\n-        Otherwise falls back to the app, returns None if not a suitable\n-        handler is found.\n+        \"\"\"Find a registered error handler for a request in this order:\n+        blueprint handler for a specific code, app handler for a specific code,\n+        blueprint generic HTTPException handler, app generic HTTPException handler,\n+        and returns None if a suitable handler is not found.\n         \"\"\"\n         exc_class, code = self._get_exc_class_and_code(type(e))\n \n         def find_handler(handler_map):\n             if not handler_map:\n                 return\n+\n             for cls in exc_class.__mro__:\n                 handler = handler_map.get(cls)\n                 if handler is not None:\n@@ -1476,23 +1480,12 @@ class Flask(_PackageBoundObject):\n                     handler_map[exc_class] = handler\n                     return handler\n \n-        # try blueprint handlers\n-        handler = find_handler(self.error_handler_spec\n-                               .get(request.blueprint, {})\n-                               .get(code))\n-        if handler is not None:\n-            return handler\n-\n-        # fall back to app handlers\n-        handler = find_handler(self.error_handler_spec[None].get(code))\n-        if handler is not None:\n-            return handler\n-\n-        try:\n-            handler = find_handler(self.error_handler_spec[None][None])\n-        except KeyError:\n-            handler = None\n+        # check for any in blueprint or app\n+        for name, c in ((request.blueprint, code), (None, code),\n+                        (request.blueprint, None), (None, None)):\n+            handler = find_handler(self.error_handler_spec.get(name, {}).get(c))\n \n+            if handler:\n                 return handler\n \n     def handle_http_exception(self, e):\n\n@@ -1,5 +1,10 @@\n # -*- coding: utf-8 -*-\n-from werkzeug.exceptions import Forbidden, InternalServerError, HTTPException, NotFound\n+from werkzeug.exceptions import (\n+    Forbidden,\n+    InternalServerError,\n+    HTTPException,\n+    NotFound\n+    )\n import flask\n \n \n@@ -32,29 +37,6 @@ def test_error_handler_no_match():\n     assert c.get('/keyerror').data == b'KeyError'\n \n \n-def test_default_error_handler():\n-    app = flask.Flask(__name__)\n-\n-    @app.errorhandler(HTTPException)\n-    def catchall_errorhandler(e):\n-        assert isinstance(e, HTTPException)\n-        assert isinstance(e, NotFound)\n-        return 'default'\n-\n-    @app.errorhandler(Forbidden)\n-    def catchall_errorhandler(e):\n-        assert isinstance(e, Forbidden)\n-        return 'forbidden'\n-\n-    @app.route('/forbidden')\n-    def forbidden():\n-        raise Forbidden()\n-\n-    c = app.test_client()\n-    assert c.get('/undefined').data == b'default'\n-    assert c.get('/forbidden').data == b'forbidden'\n-\n-\n def test_error_handler_subclass():\n     app = flask.Flask(__name__)\n \n@@ -161,3 +143,53 @@ def test_error_handler_blueprint():\n \n     assert c.get('/error').data == b'app-error'\n     assert c.get('/bp/error').data == b'bp-error'\n+\n+\n+def test_default_error_handler():\n+    bp = flask.Blueprint('bp', __name__)\n+\n+    @bp.errorhandler(HTTPException)\n+    def bp_exception_handler(e):\n+        assert isinstance(e, HTTPException)\n+        assert isinstance(e, NotFound)\n+        return 'bp-default'\n+\n+    @bp.errorhandler(Forbidden)\n+    def bp_exception_handler(e):\n+        assert isinstance(e, Forbidden)\n+        return 'bp-forbidden'\n+\n+    @bp.route('/undefined')\n+    def bp_registered_test():\n+        raise NotFound()\n+\n+    @bp.route('/forbidden')\n+    def bp_forbidden_test():\n+        raise Forbidden()\n+\n+    app = flask.Flask(__name__)\n+\n+    @app.errorhandler(HTTPException)\n+    def catchall_errorhandler(e):\n+        assert isinstance(e, HTTPException)\n+        assert isinstance(e, NotFound)\n+        return 'default'\n+\n+    @app.errorhandler(Forbidden)\n+    def catchall_errorhandler(e):\n+        assert isinstance(e, Forbidden)\n+        return 'forbidden'\n+\n+    @app.route('/forbidden')\n+    def forbidden():\n+        raise Forbidden()\n+\n+    app.register_blueprint(bp, url_prefix='/bp')\n+\n+    c = app.test_client()\n+    assert c.get('/bp/undefined').data == b'bp-default'\n+    assert c.get('/bp/forbidden').data == b'bp-forbidden'\n+    assert c.get('/undefined').data == b'default'\n+    assert c.get('/forbidden').data == b'forbidden'\n+\n+\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
