{"custom_id": "fastapi#51e920e2fcf3e2a715081f28e3187549f2bf531a", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 271 | Contributors (this commit): 2 | Commits (past 90d): 2 | Contributors (cumulative): 2 | DMM Complexity: None\n\nDIFF:\n@@ -1,6 +1,6 @@\n \"\"\"FastAPI framework, high performance, easy to learn, fast to code, ready for production\"\"\"\n \n-__version__ = \"0.61.2\"\n+__version__ = \"0.62.0\"\n \n from starlette import status\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#e6f8aa87567f0ff7d876488966863990346b26ed", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 1 | Churn Cumulative: 558 | Contributors (this commit): 2 | Commits (past 90d): 4 | Contributors (cumulative): 2 | DMM Complexity: 0.0\n\nDIFF:\n@@ -136,6 +136,7 @@ def build_lang(\n     shutil.rmtree(build_lang_path, ignore_errors=True)\n     shutil.copytree(lang_path, build_lang_path)\n     shutil.copytree(en_docs_path / \"data\", build_lang_path / \"data\")\n+    shutil.copytree(en_docs_path / \"overrides\", build_lang_path / \"overrides\")\n     en_config_path: Path = en_lang_path / mkdocs_name\n     en_config: dict = mkdocs.utils.yaml_load(en_config_path.read_text(encoding=\"utf-8\"))\n     nav = en_config[\"nav\"]\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#6e9b771abff8f4a8ef425e887292edb04141917d", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 6 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 2/2 | Churn Δ: 7 | Churn Cumulative: 565 | Contributors (this commit): 2 | Commits (past 90d): 5 | Contributors (cumulative): 2 | DMM Complexity: 0.0\n\nDIFF:\n@@ -136,7 +136,12 @@ def build_lang(\n     shutil.rmtree(build_lang_path, ignore_errors=True)\n     shutil.copytree(lang_path, build_lang_path)\n     shutil.copytree(en_docs_path / \"data\", build_lang_path / \"data\")\n-    shutil.copytree(en_docs_path / \"overrides\", build_lang_path / \"overrides\")\n+    overrides_src = en_docs_path / \"overrides\"\n+    overrides_dest = build_lang_path / \"overrides\"\n+    for path in overrides_src.iterdir():\n+        dest_path = overrides_dest / path.name\n+        if not dest_path.exists():\n+            shutil.copy(path, dest_path)\n     en_config_path: Path = en_lang_path / mkdocs_name\n     en_config: dict = mkdocs.utils.yaml_load(en_config_path.read_text(encoding=\"utf-8\"))\n     nav = en_config[\"nav\"]\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#9f89399f5e7bf83071b16ec9ba62f5c1541f224e", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 16 | Lines Deleted: 4 | Files Changed: 1 | Hunks: 5 | Methods Changed: 1 | Complexity Δ (Sum/Max): 3/3 | Churn Δ: 20 | Churn Cumulative: 585 | Contributors (this commit): 2 | Commits (past 90d): 6 | Contributors (cumulative): 2 | DMM Complexity: 0.0\n\nDIFF:\n@@ -4,7 +4,7 @@ import shutil\n from http.server import HTTPServer, SimpleHTTPRequestHandler\n from multiprocessing import Pool\n from pathlib import Path\n-from typing import Dict, Optional, Tuple\n+from typing import Dict, List, Optional, Tuple\n \n import mkdocs.commands.build\n import mkdocs.commands.serve\n@@ -364,12 +364,24 @@ def update_config(lang: str):\n         config[\"nav\"] = current_config[\"nav\"]\n         config[\"theme\"][\"language\"] = current_config[\"theme\"][\"language\"]\n     languages = [{\"en\": \"/\"}]\n-    for lang in get_lang_paths():\n-        if lang.name == \"en\" or not lang.is_dir():\n+    alternate: List[Dict[str, str]] = config[\"extra\"].get(\"alternate\", [])\n+    alternate_dict = {alt[\"link\"]: alt[\"name\"] for alt in alternate}\n+    new_alternate: List[Dict[str, str]] = []\n+    for lang_path in get_lang_paths():\n+        if lang_path.name == \"en\" or not lang_path.is_dir():\n             continue\n-        name = lang.name\n+        name = lang_path.name\n         languages.append({name: f\"/{name}/\"})\n+    for lang_dict in languages:\n+        name = list(lang_dict.keys())[0]\n+        url = lang_dict[name]\n+        if url not in alternate_dict:\n+            new_alternate.append({\"link\": url, \"name\": name})\n+        else:\n+            use_name = alternate_dict[url]\n+            new_alternate.append({\"link\": url, \"name\": use_name})\n     config[\"nav\"][1] = {\"Languages\": languages}\n+    config[\"extra\"][\"alternate\"] = new_alternate\n     config_path.write_text(\n         yaml.dump(config, sort_keys=False, width=200, allow_unicode=True),\n         encoding=\"utf-8\",\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#fdb6c9ccc504f90afd0fbcec53f3ea0bfebc261a", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 287 | Lines Deleted: 239 | Files Changed: 41 | Hunks: 158 | Methods Changed: 113 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 526 | Churn Cumulative: 22230 | Contributors (this commit): 72 | Commits (past 90d): 55 | Contributors (cumulative): 202 | DMM Complexity: 0.4166666666666667\n\nDIFF:\n@@ -26,7 +26,7 @@ invoices_callback_router = APIRouter()\n \n \n @invoices_callback_router.post(\n-    \"{$callback_url}/invoices/{$request.body.id}\", response_model=InvoiceEventReceived,\n+    \"{$callback_url}/invoices/{$request.body.id}\", response_model=InvoiceEventReceived\n )\n def invoice_notification(body: InvoiceEvent):\n     pass\n\n@@ -2,24 +2,23 @@\n \n __version__ = \"0.62.0\"\n \n-from starlette import status\n+from starlette import status as status\n \n-from .applications import FastAPI\n-from .background import BackgroundTasks\n-from .datastructures import UploadFile\n-from .exceptions import HTTPException\n-from .param_functions import (\n-    Body,\n-    Cookie,\n-    Depends,\n-    File,\n-    Form,\n-    Header,\n-    Path,\n-    Query,\n-    Security,\n-)\n-from .requests import Request\n-from .responses import Response\n-from .routing import APIRouter\n-from .websockets import WebSocket, WebSocketDisconnect\n+from .applications import FastAPI as FastAPI\n+from .background import BackgroundTasks as BackgroundTasks\n+from .datastructures import UploadFile as UploadFile\n+from .exceptions import HTTPException as HTTPException\n+from .param_functions import Body as Body\n+from .param_functions import Cookie as Cookie\n+from .param_functions import Depends as Depends\n+from .param_functions import File as File\n+from .param_functions import Form as Form\n+from .param_functions import Header as Header\n+from .param_functions import Path as Path\n+from .param_functions import Query as Query\n+from .param_functions import Security as Security\n+from .requests import Request as Request\n+from .responses import Response as Response\n+from .routing import APIRouter as APIRouter\n+from .websockets import WebSocket as WebSocket\n+from .websockets import WebSocketDisconnect as WebSocketDisconnect\n\n@@ -1,4 +1,4 @@\n-from typing import Any, Callable, Dict, List, Optional, Sequence, Type, Union\n+from typing import Any, Callable, Coroutine, Dict, List, Optional, Sequence, Type, Union\n \n from fastapi import routing\n from fastapi.concurrency import AsyncExitStack\n@@ -17,6 +17,7 @@ from fastapi.openapi.docs import (\n )\n from fastapi.openapi.utils import get_openapi\n from fastapi.params import Depends\n+from fastapi.types import DecoratedCallable\n from starlette.applications import Starlette\n from starlette.datastructures import State\n from starlette.exceptions import HTTPException\n@@ -24,7 +25,7 @@ from starlette.middleware import Middleware\n from starlette.requests import Request\n from starlette.responses import HTMLResponse, JSONResponse, Response\n from starlette.routing import BaseRoute\n-from starlette.types import Receive, Scope, Send\n+from starlette.types import ASGIApp, Receive, Scope, Send\n \n \n class FastAPI(Starlette):\n@@ -44,24 +45,27 @@ class FastAPI(Starlette):\n         docs_url: Optional[str] = \"/docs\",\n         redoc_url: Optional[str] = \"/redoc\",\n         swagger_ui_oauth2_redirect_url: Optional[str] = \"/docs/oauth2-redirect\",\n-        swagger_ui_init_oauth: Optional[dict] = None,\n+        swagger_ui_init_oauth: Optional[Dict[str, Any]] = None,\n         middleware: Optional[Sequence[Middleware]] = None,\n         exception_handlers: Optional[\n-            Dict[Union[int, Type[Exception]], Callable]\n+            Dict[\n+                Union[int, Type[Exception]],\n+                Callable[[Request, Any], Coroutine[Any, Any, Response]],\n+            ]\n         ] = None,\n-        on_startup: Optional[Sequence[Callable]] = None,\n-        on_shutdown: Optional[Sequence[Callable]] = None,\n+        on_startup: Optional[Sequence[Callable[[], Any]]] = None,\n+        on_shutdown: Optional[Sequence[Callable[[], Any]]] = None,\n         openapi_prefix: str = \"\",\n         root_path: str = \"\",\n         root_path_in_servers: bool = True,\n         responses: Optional[Dict[Union[int, str], Dict[str, Any]]] = None,\n-        callbacks: Optional[List[routing.APIRoute]] = None,\n-        deprecated: bool = None,\n+        callbacks: Optional[List[BaseRoute]] = None,\n+        deprecated: Optional[bool] = None,\n         include_in_schema: bool = True,\n         **extra: Any,\n     ) -> None:\n-        self._debug = debug\n-        self.state = State()\n+        self._debug: bool = debug\n+        self.state: State = State()\n         self.router: routing.APIRouter = routing.APIRouter(\n             routes=routes,\n             dependency_overrides_provider=self,\n@@ -74,7 +78,10 @@ class FastAPI(Starlette):\n             include_in_schema=include_in_schema,\n             responses=responses,\n         )\n-        self.exception_handlers = (\n+        self.exception_handlers: Dict[\n+            Union[int, Type[Exception]],\n+            Callable[[Request, Any], Coroutine[Any, Any, Response]],\n+        ] = (\n             {} if exception_handlers is None else dict(exception_handlers)\n         )\n         self.exception_handlers.setdefault(HTTPException, http_exception_handler)\n@@ -82,8 +89,10 @@ class FastAPI(Starlette):\n             RequestValidationError, request_validation_exception_handler\n         )\n \n-        self.user_middleware = [] if middleware is None else list(middleware)\n-        self.middleware_stack = self.build_middleware_stack()\n+        self.user_middleware: List[Middleware] = (\n+            [] if middleware is None else list(middleware)\n+        )\n+        self.middleware_stack: ASGIApp = self.build_middleware_stack()\n \n         self.title = title\n         self.description = description\n@@ -106,7 +115,7 @@ class FastAPI(Starlette):\n         self.swagger_ui_oauth2_redirect_url = swagger_ui_oauth2_redirect_url\n         self.swagger_ui_init_oauth = swagger_ui_init_oauth\n         self.extra = extra\n-        self.dependency_overrides: Dict[Callable, Callable] = {}\n+        self.dependency_overrides: Dict[Callable[..., Any], Callable[..., Any]] = {}\n \n         self.openapi_version = \"3.0.2\"\n \n@@ -116,7 +125,7 @@ class FastAPI(Starlette):\n         self.openapi_schema: Optional[Dict[str, Any]] = None\n         self.setup()\n \n-    def openapi(self) -> Dict:\n+    def openapi(self) -> Dict[str, Any]:\n         if not self.openapi_schema:\n             self.openapi_schema = get_openapi(\n                 title=self.title,\n@@ -194,7 +203,7 @@ class FastAPI(Starlette):\n     def add_api_route(\n         self,\n         path: str,\n-        endpoint: Callable,\n+        endpoint: Callable[..., Coroutine[Any, Any, Response]],\n         *,\n         response_model: Optional[Type[Any]] = None,\n         status_code: int = 200,\n@@ -268,8 +277,8 @@ class FastAPI(Starlette):\n         include_in_schema: bool = True,\n         response_class: Type[Response] = Default(JSONResponse),\n         name: Optional[str] = None,\n-    ) -> Callable:\n-        def decorator(func: Callable) -> Callable:\n+    ) -> Callable[[DecoratedCallable], DecoratedCallable]:\n+        def decorator(func: DecoratedCallable) -> DecoratedCallable:\n             self.router.add_api_route(\n                 path,\n                 func,\n@@ -299,12 +308,14 @@ class FastAPI(Starlette):\n         return decorator\n \n     def add_api_websocket_route(\n-        self, path: str, endpoint: Callable, name: Optional[str] = None\n+        self, path: str, endpoint: Callable[..., Any], name: Optional[str] = None\n     ) -> None:\n         self.router.add_api_websocket_route(path, endpoint, name=name)\n \n-    def websocket(self, path: str, name: Optional[str] = None) -> Callable:\n-        def decorator(func: Callable) -> Callable:\n+    def websocket(\n+        self, path: str, name: Optional[str] = None\n+    ) -> Callable[[DecoratedCallable], DecoratedCallable]:\n+        def decorator(func: DecoratedCallable) -> DecoratedCallable:\n             self.add_api_websocket_route(path, func, name=name)\n             return func\n \n@@ -318,10 +329,10 @@ class FastAPI(Starlette):\n         tags: Optional[List[str]] = None,\n         dependencies: Optional[Sequence[Depends]] = None,\n         responses: Optional[Dict[Union[int, str], Dict[str, Any]]] = None,\n-        deprecated: bool = None,\n+        deprecated: Optional[bool] = None,\n         include_in_schema: bool = True,\n         default_response_class: Type[Response] = Default(JSONResponse),\n-        callbacks: Optional[List[routing.APIRoute]] = None,\n+        callbacks: Optional[List[BaseRoute]] = None,\n     ) -> None:\n         self.router.include_router(\n             router,\n@@ -358,8 +369,8 @@ class FastAPI(Starlette):\n         include_in_schema: bool = True,\n         response_class: Type[Response] = Default(JSONResponse),\n         name: Optional[str] = None,\n-        callbacks: Optional[List[routing.APIRoute]] = None,\n-    ) -> Callable:\n+        callbacks: Optional[List[BaseRoute]] = None,\n+    ) -> Callable[[DecoratedCallable], DecoratedCallable]:\n         return self.router.get(\n             path,\n             response_model=response_model,\n@@ -407,8 +418,8 @@ class FastAPI(Starlette):\n         include_in_schema: bool = True,\n         response_class: Type[Response] = Default(JSONResponse),\n         name: Optional[str] = None,\n-        callbacks: Optional[List[routing.APIRoute]] = None,\n-    ) -> Callable:\n+        callbacks: Optional[List[BaseRoute]] = None,\n+    ) -> Callable[[DecoratedCallable], DecoratedCallable]:\n         return self.router.put(\n             path,\n             response_model=response_model,\n@@ -456,8 +467,8 @@ class FastAPI(Starlette):\n         include_in_schema: bool = True,\n         response_class: Type[Response] = Default(JSONResponse),\n         name: Optional[str] = None,\n-        callbacks: Optional[List[routing.APIRoute]] = None,\n-    ) -> Callable:\n+        callbacks: Optional[List[BaseRoute]] = None,\n+    ) -> Callable[[DecoratedCallable], DecoratedCallable]:\n         return self.router.post(\n             path,\n             response_model=response_model,\n@@ -505,8 +516,8 @@ class FastAPI(Starlette):\n         include_in_schema: bool = True,\n         response_class: Type[Response] = Default(JSONResponse),\n         name: Optional[str] = None,\n-        callbacks: Optional[List[routing.APIRoute]] = None,\n-    ) -> Callable:\n+        callbacks: Optional[List[BaseRoute]] = None,\n+    ) -> Callable[[DecoratedCallable], DecoratedCallable]:\n         return self.router.delete(\n             path,\n             response_model=response_model,\n@@ -554,8 +565,8 @@ class FastAPI(Starlette):\n         include_in_schema: bool = True,\n         response_class: Type[Response] = Default(JSONResponse),\n         name: Optional[str] = None,\n-        callbacks: Optional[List[routing.APIRoute]] = None,\n-    ) -> Callable:\n+        callbacks: Optional[List[BaseRoute]] = None,\n+    ) -> Callable[[DecoratedCallable], DecoratedCallable]:\n         return self.router.options(\n             path,\n             response_model=response_model,\n@@ -603,8 +614,8 @@ class FastAPI(Starlette):\n         include_in_schema: bool = True,\n         response_class: Type[Response] = Default(JSONResponse),\n         name: Optional[str] = None,\n-        callbacks: Optional[List[routing.APIRoute]] = None,\n-    ) -> Callable:\n+        callbacks: Optional[List[BaseRoute]] = None,\n+    ) -> Callable[[DecoratedCallable], DecoratedCallable]:\n         return self.router.head(\n             path,\n             response_model=response_model,\n@@ -652,8 +663,8 @@ class FastAPI(Starlette):\n         include_in_schema: bool = True,\n         response_class: Type[Response] = Default(JSONResponse),\n         name: Optional[str] = None,\n-        callbacks: Optional[List[routing.APIRoute]] = None,\n-    ) -> Callable:\n+        callbacks: Optional[List[BaseRoute]] = None,\n+    ) -> Callable[[DecoratedCallable], DecoratedCallable]:\n         return self.router.patch(\n             path,\n             response_model=response_model,\n@@ -701,8 +712,8 @@ class FastAPI(Starlette):\n         include_in_schema: bool = True,\n         response_class: Type[Response] = Default(JSONResponse),\n         name: Optional[str] = None,\n-        callbacks: Optional[List[routing.APIRoute]] = None,\n-    ) -> Callable:\n+        callbacks: Optional[List[BaseRoute]] = None,\n+    ) -> Callable[[DecoratedCallable], DecoratedCallable]:\n         return self.router.trace(\n             path,\n             response_model=response_model,\n\n@@ -1 +1 @@\n-from starlette.background import BackgroundTasks  # noqa\n+from starlette.background import BackgroundTasks as BackgroundTasks  # noqa\n\n@@ -1,8 +1,10 @@\n from typing import Any, Callable\n \n-from starlette.concurrency import iterate_in_threadpool  # noqa\n-from starlette.concurrency import run_in_threadpool  # noqa\n-from starlette.concurrency import run_until_first_complete  # noqa\n+from starlette.concurrency import iterate_in_threadpool as iterate_in_threadpool  # noqa\n+from starlette.concurrency import run_in_threadpool as run_in_threadpool  # noqa\n+from starlette.concurrency import (  # noqa\n+    run_until_first_complete as run_until_first_complete,\n+)\n \n asynccontextmanager_error_message = \"\"\"\n FastAPI's contextmanager_in_threadpool require Python 3.7 or above,\n@@ -11,7 +13,7 @@ or the backport for Python 3.6, installed with:\n \"\"\"\n \n \n-def _fake_asynccontextmanager(func: Callable) -> Callable:\n+def _fake_asynccontextmanager(func: Callable[..., Any]) -> Callable[..., Any]:\n     def raiser(*args: Any, **kwargs: Any) -> Any:\n         raise RuntimeError(asynccontextmanager_error_message)\n \n@@ -19,23 +21,25 @@ def _fake_asynccontextmanager(func: Callable) -> Callable:\n \n \n try:\n-    from contextlib import asynccontextmanager  # type: ignore\n+    from contextlib import asynccontextmanager as asynccontextmanager  # type: ignore\n except ImportError:\n     try:\n-        from async_generator import asynccontextmanager  # type: ignore\n+        from async_generator import (  # type: ignore  # isort: skip\n+            asynccontextmanager as asynccontextmanager,\n+        )\n     except ImportError:  # pragma: no cover\n         asynccontextmanager = _fake_asynccontextmanager\n \n try:\n-    from contextlib import AsyncExitStack  # type: ignore\n+    from contextlib import AsyncExitStack as AsyncExitStack  # type: ignore\n except ImportError:\n     try:\n-        from async_exit_stack import AsyncExitStack  # type: ignore\n+        from async_exit_stack import AsyncExitStack as AsyncExitStack  # type: ignore\n     except ImportError:  # pragma: no cover\n         AsyncExitStack = None  # type: ignore\n \n \n-@asynccontextmanager\n+@asynccontextmanager  # type: ignore\n async def contextmanager_in_threadpool(cm: Any) -> Any:\n     try:\n         yield await run_in_threadpool(cm.__enter__)\n\n@@ -1,11 +1,12 @@\n from typing import Any, Callable, Iterable, Type, TypeVar\n \n+from starlette.datastructures import State as State  # noqa: F401\n from starlette.datastructures import UploadFile as StarletteUploadFile\n \n \n class UploadFile(StarletteUploadFile):\n     @classmethod\n-    def __get_validators__(cls: Type[\"UploadFile\"]) -> Iterable[Callable]:\n+    def __get_validators__(cls: Type[\"UploadFile\"]) -> Iterable[Callable[..., Any]]:\n         yield cls.validate\n \n     @classmethod\n\n@@ -1,4 +1,4 @@\n-from typing import Callable, List, Optional, Sequence\n+from typing import Any, Callable, List, Optional, Sequence\n \n from fastapi.security.base import SecurityBase\n from pydantic.fields import ModelField\n@@ -24,7 +24,7 @@ class Dependant:\n         dependencies: Optional[List[\"Dependant\"]] = None,\n         security_schemes: Optional[List[SecurityRequirement]] = None,\n         name: Optional[str] = None,\n-        call: Optional[Callable] = None,\n+        call: Optional[Callable[..., Any]] = None,\n         request_param_name: Optional[str] = None,\n         websocket_param_name: Optional[str] = None,\n         http_connection_param_name: Optional[str] = None,\n\n@@ -90,12 +90,12 @@ def check_file_field(field: ModelField) -> None:\n     if isinstance(field_info, params.Form):\n         try:\n             # __version__ is available in both multiparts, and can be mocked\n-            from multipart import __version__\n+            from multipart import __version__  # type: ignore\n \n             assert __version__\n             try:\n                 # parse_options_header is only available in the right multipart\n-                from multipart.multipart import parse_options_header\n+                from multipart.multipart import parse_options_header  # type: ignore\n \n                 assert parse_options_header\n             except ImportError:\n@@ -133,7 +133,7 @@ def get_parameterless_sub_dependant(*, depends: params.Depends, path: str) -> De\n def get_sub_dependant(\n     *,\n     depends: params.Depends,\n-    dependency: Callable,\n+    dependency: Callable[..., Any],\n     path: str,\n     name: Optional[str] = None,\n     security_scopes: Optional[List[str]] = None,\n@@ -163,7 +163,7 @@ def get_sub_dependant(\n     return sub_dependant\n \n \n-CacheKey = Tuple[Optional[Callable], Tuple[str, ...]]\n+CacheKey = Tuple[Optional[Callable[..., Any]], Tuple[str, ...]]\n \n \n def get_flat_dependant(\n@@ -240,7 +240,7 @@ def is_scalar_sequence_field(field: ModelField) -> bool:\n     return False\n \n \n-def get_typed_signature(call: Callable) -> inspect.Signature:\n+def get_typed_signature(call: Callable[..., Any]) -> inspect.Signature:\n     signature = inspect.signature(call)\n     globalns = getattr(call, \"__globals__\", {})\n     typed_params = [\n@@ -259,9 +259,7 @@ def get_typed_signature(call: Callable) -> inspect.Signature:\n def get_typed_annotation(param: inspect.Parameter, globalns: Dict[str, Any]) -> Any:\n     annotation = param.annotation\n     if isinstance(annotation, str):\n-        # Temporary ignore type\n-        # Ref: https://github.com/samuelcolvin/pydantic/issues/1738\n-        annotation = ForwardRef(annotation)  # type: ignore\n+        annotation = ForwardRef(annotation)\n         annotation = evaluate_forwardref(annotation, globalns, globalns)\n     return annotation\n \n@@ -281,7 +279,7 @@ def check_dependency_contextmanagers() -> None:\n def get_dependant(\n     *,\n     path: str,\n-    call: Callable,\n+    call: Callable[..., Any],\n     name: Optional[str] = None,\n     security_scopes: Optional[List[str]] = None,\n     use_cache: bool = True,\n@@ -423,7 +421,7 @@ def add_param_to_fields(*, field: ModelField, dependant: Dependant) -> None:\n         dependant.cookie_params.append(field)\n \n \n-def is_coroutine_callable(call: Callable) -> bool:\n+def is_coroutine_callable(call: Callable[..., Any]) -> bool:\n     if inspect.isroutine(call):\n         return inspect.iscoroutinefunction(call)\n     if inspect.isclass(call):\n@@ -432,14 +430,14 @@ def is_coroutine_callable(call: Callable) -> bool:\n     return inspect.iscoroutinefunction(call)\n \n \n-def is_async_gen_callable(call: Callable) -> bool:\n+def is_async_gen_callable(call: Callable[..., Any]) -> bool:\n     if inspect.isasyncgenfunction(call):\n         return True\n     call = getattr(call, \"__call__\", None)\n     return inspect.isasyncgenfunction(call)\n \n \n-def is_gen_callable(call: Callable) -> bool:\n+def is_gen_callable(call: Callable[..., Any]) -> bool:\n     if inspect.isgeneratorfunction(call):\n         return True\n     call = getattr(call, \"__call__\", None)\n@@ -447,7 +445,7 @@ def is_gen_callable(call: Callable) -> bool:\n \n \n async def solve_generator(\n-    *, call: Callable, stack: AsyncExitStack, sub_values: Dict[str, Any]\n+    *, call: Callable[..., Any], stack: AsyncExitStack, sub_values: Dict[str, Any]\n ) -> Any:\n     if is_gen_callable(call):\n         cm = contextmanager_in_threadpool(contextmanager(call)(**sub_values))\n@@ -472,29 +470,29 @@ async def solve_dependencies(\n     background_tasks: Optional[BackgroundTasks] = None,\n     response: Optional[Response] = None,\n     dependency_overrides_provider: Optional[Any] = None,\n-    dependency_cache: Optional[Dict[Tuple[Callable, Tuple[str]], Any]] = None,\n+    dependency_cache: Optional[Dict[Tuple[Callable[..., Any], Tuple[str]], Any]] = None,\n ) -> Tuple[\n     Dict[str, Any],\n     List[ErrorWrapper],\n     Optional[BackgroundTasks],\n     Response,\n-    Dict[Tuple[Callable, Tuple[str]], Any],\n+    Dict[Tuple[Callable[..., Any], Tuple[str]], Any],\n ]:\n     values: Dict[str, Any] = {}\n     errors: List[ErrorWrapper] = []\n     response = response or Response(\n         content=None,\n         status_code=None,  # type: ignore\n-        headers=None,\n-        media_type=None,\n-        background=None,\n+        headers=None,  # type: ignore # in Starlette\n+        media_type=None,  # type: ignore # in Starlette\n+        background=None,  # type: ignore # in Starlette\n     )\n     dependency_cache = dependency_cache or {}\n     sub_dependant: Dependant\n     for sub_dependant in dependant.dependencies:\n-        sub_dependant.call = cast(Callable, sub_dependant.call)\n+        sub_dependant.call = cast(Callable[..., Any], sub_dependant.call)\n         sub_dependant.cache_key = cast(\n-            Tuple[Callable, Tuple[str]], sub_dependant.cache_key\n+            Tuple[Callable[..., Any], Tuple[str]], sub_dependant.cache_key\n         )\n         call = sub_dependant.call\n         use_sub_dependant = sub_dependant\n\n@@ -12,9 +12,11 @@ DictIntStrAny = Dict[Union[int, str], Any]\n \n \n def generate_encoders_by_class_tuples(\n-    type_encoder_map: Dict[Any, Callable]\n-) -> Dict[Callable, Tuple]:\n-    encoders_by_class_tuples: Dict[Callable, Tuple] = defaultdict(tuple)\n+    type_encoder_map: Dict[Any, Callable[[Any], Any]]\n+) -> Dict[Callable[[Any], Any], Tuple[Any, ...]]:\n+    encoders_by_class_tuples: Dict[Callable[[Any], Any], Tuple[Any, ...]] = defaultdict(\n+        tuple\n+    )\n     for type_, encoder in type_encoder_map.items():\n         encoders_by_class_tuples[encoder] += (type_,)\n     return encoders_by_class_tuples\n@@ -31,7 +33,7 @@ def jsonable_encoder(\n     exclude_unset: bool = False,\n     exclude_defaults: bool = False,\n     exclude_none: bool = False,\n-    custom_encoder: dict = {},\n+    custom_encoder: Dict[Any, Callable[[Any], Any]] = {},\n     sqlalchemy_safe: bool = True,\n ) -> Any:\n     if include is not None and not isinstance(include, set):\n@@ -43,8 +45,8 @@ def jsonable_encoder(\n         if custom_encoder:\n             encoder.update(custom_encoder)\n         obj_dict = obj.dict(\n-            include=include,\n-            exclude=exclude,\n+            include=include,  # type: ignore # in Pydantic\n+            exclude=exclude,  # type: ignore # in Pydantic\n             by_alias=by_alias,\n             exclude_unset=exclude_unset,\n             exclude_none=exclude_none,\n\n@@ -1 +1 @@\n-from starlette.middleware import Middleware\n+from starlette.middleware import Middleware as Middleware\n\n@@ -1 +1 @@\n-from starlette.middleware.cors import CORSMiddleware  # noqa\n+from starlette.middleware.cors import CORSMiddleware as CORSMiddleware  # noqa\n\n@@ -1 +1 @@\n-from starlette.middleware.gzip import GZipMiddleware  # noqa\n+from starlette.middleware.gzip import GZipMiddleware as GZipMiddleware  # noqa\n\n@@ -1 +1,3 @@\n-from starlette.middleware.httpsredirect import HTTPSRedirectMiddleware  # noqa\n+from starlette.middleware.httpsredirect import (  # noqa\n+    HTTPSRedirectMiddleware as HTTPSRedirectMiddleware,\n+)\n\n@@ -1 +1,3 @@\n-from starlette.middleware.trustedhost import TrustedHostMiddleware  # noqa\n+from starlette.middleware.trustedhost import (  # noqa\n+    TrustedHostMiddleware as TrustedHostMiddleware,\n+)\n\n@@ -1 +1 @@\n-from starlette.middleware.wsgi import WSGIMiddleware  # noqa\n+from starlette.middleware.wsgi import WSGIMiddleware as WSGIMiddleware  # noqa\n\n@@ -1,5 +1,5 @@\n import json\n-from typing import Optional\n+from typing import Any, Dict, Optional\n \n from fastapi.encoders import jsonable_encoder\n from starlette.responses import HTMLResponse\n@@ -13,7 +13,7 @@ def get_swagger_ui_html(\n     swagger_css_url: str = \"https://cdn.jsdelivr.net/npm/swagger-ui-dist@3/swagger-ui.css\",\n     swagger_favicon_url: str = \"https://fastapi.tiangolo.com/img/favicon.png\",\n     oauth2_redirect_url: Optional[str] = None,\n-    init_oauth: Optional[dict] = None,\n+    init_oauth: Optional[Dict[str, Any]] = None,\n ) -> HTMLResponse:\n \n     html = f\"\"\"\n\n@@ -5,7 +5,7 @@ from fastapi.logger import logger\n from pydantic import AnyUrl, BaseModel, Field\n \n try:\n-    import email_validator\n+    import email_validator  # type: ignore\n \n     assert email_validator  # make autoflake ignore the unused import\n     from pydantic import EmailStr\n@@ -13,7 +13,7 @@ except ImportError:  # pragma: no cover\n \n     class EmailStr(str):  # type: ignore\n         @classmethod\n-        def __get_validators__(cls) -> Iterable[Callable]:\n+        def __get_validators__(cls) -> Iterable[Callable[..., Any]]:\n             yield cls.validate\n \n         @classmethod\n\n@@ -14,6 +14,7 @@ from fastapi.openapi.constants import (\n )\n from fastapi.openapi.models import OpenAPI\n from fastapi.params import Body, Param\n+from fastapi.responses import Response\n from fastapi.utils import (\n     deep_dict_update,\n     generate_operation_id_for_path,\n@@ -64,7 +65,9 @@ status_code_ranges: Dict[str, str] = {\n }\n \n \n-def get_openapi_security_definitions(flat_dependant: Dependant) -> Tuple[Dict, List]:\n+def get_openapi_security_definitions(\n+    flat_dependant: Dependant,\n+) -> Tuple[Dict[str, Any], List[Dict[str, Any]]]:\n     security_definitions = {}\n     operation_security = []\n     for security_requirement in flat_dependant.security_requirements:\n@@ -88,13 +91,12 @@ def get_openapi_operation_parameters(\n     for param in all_route_params:\n         field_info = param.field_info\n         field_info = cast(Param, field_info)\n-        # ignore mypy error until enum schemas are released\n         parameter = {\n             \"name\": param.alias,\n             \"in\": field_info.in_.value,\n             \"required\": param.required,\n             \"schema\": field_schema(\n-                param, model_name_map=model_name_map, ref_prefix=REF_PREFIX  # type: ignore\n+                param, model_name_map=model_name_map, ref_prefix=REF_PREFIX\n             )[0],\n         }\n         if field_info.description:\n@@ -109,13 +111,12 @@ def get_openapi_operation_request_body(\n     *,\n     body_field: Optional[ModelField],\n     model_name_map: Dict[Union[Type[BaseModel], Type[Enum]], str],\n-) -> Optional[Dict]:\n+) -> Optional[Dict[str, Any]]:\n     if not body_field:\n         return None\n     assert isinstance(body_field, ModelField)\n-    # ignore mypy error until enum schemas are released\n     body_schema, _, _ = field_schema(\n-        body_field, model_name_map=model_name_map, ref_prefix=REF_PREFIX  # type: ignore\n+        body_field, model_name_map=model_name_map, ref_prefix=REF_PREFIX\n     )\n     field_info = cast(Body, body_field.field_info)\n     request_media_type = field_info.media_type\n@@ -140,7 +141,9 @@ def generate_operation_summary(*, route: routing.APIRoute, method: str) -> str:\n     return route.name.replace(\"_\", \" \").title()\n \n \n-def get_openapi_operation_metadata(*, route: routing.APIRoute, method: str) -> Dict:\n+def get_openapi_operation_metadata(\n+    *, route: routing.APIRoute, method: str\n+) -> Dict[str, Any]:\n     operation: Dict[str, Any] = {}\n     if route.tags:\n         operation[\"tags\"] = route.tags\n@@ -154,14 +157,14 @@ def get_openapi_operation_metadata(*, route: routing.APIRoute, method: str) -> D\n \n \n def get_openapi_path(\n-    *, route: routing.APIRoute, model_name_map: Dict[Type, str]\n-) -> Tuple[Dict, Dict, Dict]:\n+    *, route: routing.APIRoute, model_name_map: Dict[type, str]\n+) -> Tuple[Dict[str, Any], Dict[str, Any], Dict[str, Any]]:\n     path = {}\n     security_schemes: Dict[str, Any] = {}\n     definitions: Dict[str, Any] = {}\n     assert route.methods is not None, \"Methods must be a list\"\n     if isinstance(route.response_class, DefaultPlaceholder):\n-        current_response_class: Type[routing.Response] = route.response_class.value\n+        current_response_class: Type[Response] = route.response_class.value\n     else:\n         current_response_class = route.response_class\n     assert current_response_class, \"A response class is needed to generate OpenAPI\"\n@@ -169,7 +172,7 @@ def get_openapi_path(\n     if route.include_in_schema:\n         for method in route.methods:\n             operation = get_openapi_operation_metadata(route=route, method=method)\n-            parameters: List[Dict] = []\n+            parameters: List[Dict[str, Any]] = []\n             flat_dependant = get_flat_dependant(route.dependant, skip_repeats=True)\n             security_definitions, operation_security = get_openapi_security_definitions(\n                 flat_dependant=flat_dependant\n@@ -196,7 +199,12 @@ def get_openapi_path(\n             if route.callbacks:\n                 callbacks = {}\n                 for callback in route.callbacks:\n-                    cb_path, cb_security_schemes, cb_definitions, = get_openapi_path(\n+                    if isinstance(callback, routing.APIRoute):\n+                        (\n+                            cb_path,\n+                            cb_security_schemes,\n+                            cb_definitions,\n+                        ) = get_openapi_path(\n                             route=callback, model_name_map=model_name_map\n                         )\n                         callbacks[callback.name] = {callback.path: cb_path}\n@@ -332,21 +340,19 @@ def get_openapi(\n     routes: Sequence[BaseRoute],\n     tags: Optional[List[Dict[str, Any]]] = None,\n     servers: Optional[List[Dict[str, Union[str, Any]]]] = None,\n-) -> Dict:\n+) -> Dict[str, Any]:\n     info = {\"title\": title, \"version\": version}\n     if description:\n         info[\"description\"] = description\n     output: Dict[str, Any] = {\"openapi\": openapi_version, \"info\": info}\n     if servers:\n         output[\"servers\"] = servers\n-    components: Dict[str, Dict] = {}\n-    paths: Dict[str, Dict] = {}\n+    components: Dict[str, Dict[str, Any]] = {}\n+    paths: Dict[str, Dict[str, Any]] = {}\n     flat_models = get_flat_models_from_routes(routes)\n-    # ignore mypy error until enum schemas are released\n-    model_name_map = get_model_name_map(flat_models)  # type: ignore\n-    # ignore mypy error until enum schemas are released\n+    model_name_map = get_model_name_map(flat_models)\n     definitions = get_model_definitions(\n-        flat_models=flat_models, model_name_map=model_name_map  # type: ignore\n+        flat_models=flat_models, model_name_map=model_name_map\n     )\n     for route in routes:\n         if isinstance(route, routing.APIRoute):\n@@ -368,4 +374,4 @@ def get_openapi(\n     output[\"paths\"] = paths\n     if tags:\n         output[\"tags\"] = tags\n-    return jsonable_encoder(OpenAPI(**output), by_alias=True, exclude_none=True)\n+    return jsonable_encoder(OpenAPI(**output), by_alias=True, exclude_none=True)  # type: ignore\n\n@@ -239,13 +239,13 @@ def File(  # noqa: N802\n \n \n def Depends(  # noqa: N802\n-    dependency: Optional[Callable] = None, *, use_cache: bool = True\n+    dependency: Optional[Callable[..., Any]] = None, *, use_cache: bool = True\n ) -> Any:\n     return params.Depends(dependency=dependency, use_cache=use_cache)\n \n \n def Security(  # noqa: N802\n-    dependency: Optional[Callable] = None,\n+    dependency: Optional[Callable[..., Any]] = None,\n     *,\n     scopes: Optional[Sequence[str]] = None,\n     use_cache: bool = True,\n\n@@ -315,7 +315,7 @@ class File(Form):\n \n class Depends:\n     def __init__(\n-        self, dependency: Optional[Callable] = None, *, use_cache: bool = True\n+        self, dependency: Optional[Callable[..., Any]] = None, *, use_cache: bool = True\n     ):\n         self.dependency = dependency\n         self.use_cache = use_cache\n@@ -329,7 +329,7 @@ class Depends:\n class Security(Depends):\n     def __init__(\n         self,\n-        dependency: Optional[Callable] = None,\n+        dependency: Optional[Callable[..., Any]] = None,\n         *,\n         scopes: Optional[Sequence[str]] = None,\n         use_cache: bool = True,\n\n@@ -1,13 +1,13 @@\n from typing import Any\n \n-from starlette.responses import FileResponse  # noqa\n-from starlette.responses import HTMLResponse  # noqa\n-from starlette.responses import JSONResponse  # noqa\n-from starlette.responses import PlainTextResponse  # noqa\n-from starlette.responses import RedirectResponse  # noqa\n-from starlette.responses import Response  # noqa\n-from starlette.responses import StreamingResponse  # noqa\n-from starlette.responses import UJSONResponse  # noqa\n+from starlette.responses import FileResponse as FileResponse  # noqa\n+from starlette.responses import HTMLResponse as HTMLResponse  # noqa\n+from starlette.responses import JSONResponse as JSONResponse  # noqa\n+from starlette.responses import PlainTextResponse as PlainTextResponse  # noqa\n+from starlette.responses import RedirectResponse as RedirectResponse  # noqa\n+from starlette.responses import Response as Response  # noqa\n+from starlette.responses import StreamingResponse as StreamingResponse  # noqa\n+from starlette.responses import UJSONResponse as UJSONResponse  # noqa\n \n try:\n     import orjson\n\n@@ -2,7 +2,18 @@ import asyncio\n import enum\n import inspect\n import json\n-from typing import Any, Callable, Dict, List, Optional, Sequence, Set, Type, Union\n+from typing import (\n+    Any,\n+    Callable,\n+    Coroutine,\n+    Dict,\n+    List,\n+    Optional,\n+    Sequence,\n+    Set,\n+    Type,\n+    Union,\n+)\n \n from fastapi import params\n from fastapi.datastructures import Default, DefaultPlaceholder\n@@ -16,6 +27,7 @@ from fastapi.dependencies.utils import (\n from fastapi.encoders import DictIntStrAny, SetIntStr, jsonable_encoder\n from fastapi.exceptions import RequestValidationError, WebSocketRequestValidationError\n from fastapi.openapi.constants import STATUS_CODES_WITH_NO_BODY\n+from fastapi.types import DecoratedCallable\n from fastapi.utils import (\n     create_cloned_field,\n     create_response_field,\n@@ -30,7 +42,8 @@ from starlette.concurrency import run_in_threadpool\n from starlette.exceptions import HTTPException\n from starlette.requests import Request\n from starlette.responses import JSONResponse, Response\n-from starlette.routing import Mount  # noqa\n+from starlette.routing import BaseRoute\n+from starlette.routing import Mount as Mount  # noqa\n from starlette.routing import (\n     compile_path,\n     get_name,\n@@ -150,7 +163,7 @@ def get_request_handler(\n     response_model_exclude_defaults: bool = False,\n     response_model_exclude_none: bool = False,\n     dependency_overrides_provider: Optional[Any] = None,\n-) -> Callable:\n+) -> Callable[[Request], Coroutine[Any, Any, Response]]:\n     assert dependant.call is not None, \"dependant.call must be a function\"\n     is_coroutine = asyncio.iscoroutinefunction(dependant.call)\n     is_body_form = body_field and isinstance(body_field.field_info, params.Form)\n@@ -207,7 +220,7 @@ def get_request_handler(\n             response = actual_response_class(\n                 content=response_data,\n                 status_code=status_code,\n-                background=background_tasks,\n+                background=background_tasks,  # type: ignore # in Starlette\n             )\n             response.headers.raw.extend(sub_response.headers.raw)\n             if sub_response.status_code:\n@@ -219,7 +232,7 @@ def get_request_handler(\n \n def get_websocket_app(\n     dependant: Dependant, dependency_overrides_provider: Optional[Any] = None\n-) -> Callable:\n+) -> Callable[[WebSocket], Coroutine[Any, Any, Any]]:\n     async def app(websocket: WebSocket) -> None:\n         solved_result = await solve_dependencies(\n             request=websocket,\n@@ -240,7 +253,7 @@ class APIWebSocketRoute(routing.WebSocketRoute):\n     def __init__(\n         self,\n         path: str,\n-        endpoint: Callable,\n+        endpoint: Callable[..., Any],\n         *,\n         name: Optional[str] = None,\n         dependency_overrides_provider: Optional[Any] = None,\n@@ -262,7 +275,7 @@ class APIRoute(routing.Route):\n     def __init__(\n         self,\n         path: str,\n-        endpoint: Callable,\n+        endpoint: Callable[..., Any],\n         *,\n         response_model: Optional[Type[Any]] = None,\n         status_code: int = 200,\n@@ -287,7 +300,7 @@ class APIRoute(routing.Route):\n             JSONResponse\n         ),\n         dependency_overrides_provider: Optional[Any] = None,\n-        callbacks: Optional[List[\"APIRoute\"]] = None,\n+        callbacks: Optional[List[BaseRoute]] = None,\n     ) -> None:\n         # normalise enums e.g. http.HTTPStatus\n         if isinstance(status_code, enum.IntEnum):\n@@ -298,7 +311,7 @@ class APIRoute(routing.Route):\n         self.path_regex, self.path_format, self.param_convertors = compile_path(path)\n         if methods is None:\n             methods = [\"GET\"]\n-        self.methods = set([method.upper() for method in methods])\n+        self.methods: Set[str] = set([method.upper() for method in methods])\n         self.unique_id = generate_operation_id_for_path(\n             name=self.name, path=self.path_format, method=list(methods)[0]\n         )\n@@ -375,7 +388,7 @@ class APIRoute(routing.Route):\n         self.callbacks = callbacks\n         self.app = request_response(self.get_route_handler())\n \n-    def get_route_handler(self) -> Callable:\n+    def get_route_handler(self) -> Callable[[Request], Coroutine[Any, Any, Response]]:\n         return get_request_handler(\n             dependant=self.dependant,\n             body_field=self.body_field,\n@@ -401,23 +414,23 @@ class APIRouter(routing.Router):\n         dependencies: Optional[Sequence[params.Depends]] = None,\n         default_response_class: Type[Response] = Default(JSONResponse),\n         responses: Optional[Dict[Union[int, str], Dict[str, Any]]] = None,\n-        callbacks: Optional[List[APIRoute]] = None,\n+        callbacks: Optional[List[BaseRoute]] = None,\n         routes: Optional[List[routing.BaseRoute]] = None,\n         redirect_slashes: bool = True,\n         default: Optional[ASGIApp] = None,\n         dependency_overrides_provider: Optional[Any] = None,\n         route_class: Type[APIRoute] = APIRoute,\n-        on_startup: Optional[Sequence[Callable]] = None,\n-        on_shutdown: Optional[Sequence[Callable]] = None,\n-        deprecated: bool = None,\n+        on_startup: Optional[Sequence[Callable[[], Any]]] = None,\n+        on_shutdown: Optional[Sequence[Callable[[], Any]]] = None,\n+        deprecated: Optional[bool] = None,\n         include_in_schema: bool = True,\n     ) -> None:\n         super().__init__(\n-            routes=routes,\n+            routes=routes,  # type: ignore # in Starlette\n             redirect_slashes=redirect_slashes,\n-            default=default,\n-            on_startup=on_startup,\n-            on_shutdown=on_shutdown,\n+            default=default,  # type: ignore # in Starlette\n+            on_startup=on_startup,  # type: ignore # in Starlette\n+            on_shutdown=on_shutdown,  # type: ignore # in Starlette\n         )\n         if prefix:\n             assert prefix.startswith(\"/\"), \"A path prefix must start with '/'\"\n@@ -438,7 +451,7 @@ class APIRouter(routing.Router):\n     def add_api_route(\n         self,\n         path: str,\n-        endpoint: Callable,\n+        endpoint: Callable[..., Any],\n         *,\n         response_model: Optional[Type[Any]] = None,\n         status_code: int = 200,\n@@ -463,7 +476,7 @@ class APIRouter(routing.Router):\n         ),\n         name: Optional[str] = None,\n         route_class_override: Optional[Type[APIRoute]] = None,\n-        callbacks: Optional[List[APIRoute]] = None,\n+        callbacks: Optional[List[BaseRoute]] = None,\n     ) -> None:\n         route_class = route_class_override or self.route_class\n         responses = responses or {}\n@@ -532,9 +545,9 @@ class APIRouter(routing.Router):\n         include_in_schema: bool = True,\n         response_class: Type[Response] = Default(JSONResponse),\n         name: Optional[str] = None,\n-        callbacks: Optional[List[APIRoute]] = None,\n-    ) -> Callable:\n-        def decorator(func: Callable) -> Callable:\n+        callbacks: Optional[List[BaseRoute]] = None,\n+    ) -> Callable[[DecoratedCallable], DecoratedCallable]:\n+        def decorator(func: DecoratedCallable) -> DecoratedCallable:\n             self.add_api_route(\n                 path,\n                 func,\n@@ -565,7 +578,7 @@ class APIRouter(routing.Router):\n         return decorator\n \n     def add_api_websocket_route(\n-        self, path: str, endpoint: Callable, name: Optional[str] = None\n+        self, path: str, endpoint: Callable[..., Any], name: Optional[str] = None\n     ) -> None:\n         route = APIWebSocketRoute(\n             path,\n@@ -575,8 +588,10 @@ class APIRouter(routing.Router):\n         )\n         self.routes.append(route)\n \n-    def websocket(self, path: str, name: Optional[str] = None) -> Callable:\n-        def decorator(func: Callable) -> Callable:\n+    def websocket(\n+        self, path: str, name: Optional[str] = None\n+    ) -> Callable[[DecoratedCallable], DecoratedCallable]:\n+        def decorator(func: DecoratedCallable) -> DecoratedCallable:\n             self.add_api_websocket_route(path, func, name=name)\n             return func\n \n@@ -591,8 +606,8 @@ class APIRouter(routing.Router):\n         dependencies: Optional[Sequence[params.Depends]] = None,\n         default_response_class: Type[Response] = Default(JSONResponse),\n         responses: Optional[Dict[Union[int, str], Dict[str, Any]]] = None,\n-        callbacks: Optional[List[APIRoute]] = None,\n-        deprecated: bool = None,\n+        callbacks: Optional[List[BaseRoute]] = None,\n+        deprecated: Optional[bool] = None,\n         include_in_schema: bool = True,\n     ) -> None:\n         if prefix:\n@@ -663,10 +678,11 @@ class APIRouter(routing.Router):\n                     callbacks=current_callbacks,\n                 )\n             elif isinstance(route, routing.Route):\n+                methods = list(route.methods or [])  # type: ignore # in Starlette\n                 self.add_route(\n                     prefix + route.path,\n                     route.endpoint,\n-                    methods=list(route.methods or []),\n+                    methods=methods,\n                     include_in_schema=route.include_in_schema,\n                     name=route.name,\n                 )\n@@ -706,8 +722,8 @@ class APIRouter(routing.Router):\n         include_in_schema: bool = True,\n         response_class: Type[Response] = Default(JSONResponse),\n         name: Optional[str] = None,\n-        callbacks: Optional[List[APIRoute]] = None,\n-    ) -> Callable:\n+        callbacks: Optional[List[BaseRoute]] = None,\n+    ) -> Callable[[DecoratedCallable], DecoratedCallable]:\n         return self.api_route(\n             path=path,\n             response_model=response_model,\n@@ -756,8 +772,8 @@ class APIRouter(routing.Router):\n         include_in_schema: bool = True,\n         response_class: Type[Response] = Default(JSONResponse),\n         name: Optional[str] = None,\n-        callbacks: Optional[List[APIRoute]] = None,\n-    ) -> Callable:\n+        callbacks: Optional[List[BaseRoute]] = None,\n+    ) -> Callable[[DecoratedCallable], DecoratedCallable]:\n         return self.api_route(\n             path=path,\n             response_model=response_model,\n@@ -806,8 +822,8 @@ class APIRouter(routing.Router):\n         include_in_schema: bool = True,\n         response_class: Type[Response] = Default(JSONResponse),\n         name: Optional[str] = None,\n-        callbacks: Optional[List[APIRoute]] = None,\n-    ) -> Callable:\n+        callbacks: Optional[List[BaseRoute]] = None,\n+    ) -> Callable[[DecoratedCallable], DecoratedCallable]:\n         return self.api_route(\n             path=path,\n             response_model=response_model,\n@@ -856,8 +872,8 @@ class APIRouter(routing.Router):\n         include_in_schema: bool = True,\n         response_class: Type[Response] = Default(JSONResponse),\n         name: Optional[str] = None,\n-        callbacks: Optional[List[APIRoute]] = None,\n-    ) -> Callable:\n+        callbacks: Optional[List[BaseRoute]] = None,\n+    ) -> Callable[[DecoratedCallable], DecoratedCallable]:\n         return self.api_route(\n             path=path,\n             response_model=response_model,\n@@ -906,8 +922,8 @@ class APIRouter(routing.Router):\n         include_in_schema: bool = True,\n         response_class: Type[Response] = Default(JSONResponse),\n         name: Optional[str] = None,\n-        callbacks: Optional[List[APIRoute]] = None,\n-    ) -> Callable:\n+        callbacks: Optional[List[BaseRoute]] = None,\n+    ) -> Callable[[DecoratedCallable], DecoratedCallable]:\n         return self.api_route(\n             path=path,\n             response_model=response_model,\n@@ -956,8 +972,8 @@ class APIRouter(routing.Router):\n         include_in_schema: bool = True,\n         response_class: Type[Response] = Default(JSONResponse),\n         name: Optional[str] = None,\n-        callbacks: Optional[List[APIRoute]] = None,\n-    ) -> Callable:\n+        callbacks: Optional[List[BaseRoute]] = None,\n+    ) -> Callable[[DecoratedCallable], DecoratedCallable]:\n         return self.api_route(\n             path=path,\n             response_model=response_model,\n@@ -1006,8 +1022,8 @@ class APIRouter(routing.Router):\n         include_in_schema: bool = True,\n         response_class: Type[Response] = Default(JSONResponse),\n         name: Optional[str] = None,\n-        callbacks: Optional[List[APIRoute]] = None,\n-    ) -> Callable:\n+        callbacks: Optional[List[BaseRoute]] = None,\n+    ) -> Callable[[DecoratedCallable], DecoratedCallable]:\n         return self.api_route(\n             path=path,\n             response_model=response_model,\n@@ -1056,8 +1072,8 @@ class APIRouter(routing.Router):\n         include_in_schema: bool = True,\n         response_class: Type[Response] = Default(JSONResponse),\n         name: Optional[str] = None,\n-        callbacks: Optional[List[APIRoute]] = None,\n-    ) -> Callable:\n+        callbacks: Optional[List[BaseRoute]] = None,\n+    ) -> Callable[[DecoratedCallable], DecoratedCallable]:\n \n         return self.api_route(\n             path=path,\n\n@@ -1,17 +1,15 @@\n-from .api_key import APIKeyCookie, APIKeyHeader, APIKeyQuery\n-from .http import (\n-    HTTPAuthorizationCredentials,\n-    HTTPBasic,\n-    HTTPBasicCredentials,\n-    HTTPBearer,\n-    HTTPDigest,\n-)\n-from .oauth2 import (\n-    OAuth2,\n-    OAuth2AuthorizationCodeBearer,\n-    OAuth2PasswordBearer,\n-    OAuth2PasswordRequestForm,\n-    OAuth2PasswordRequestFormStrict,\n-    SecurityScopes,\n-)\n-from .open_id_connect_url import OpenIdConnect\n+from .api_key import APIKeyCookie as APIKeyCookie\n+from .api_key import APIKeyHeader as APIKeyHeader\n+from .api_key import APIKeyQuery as APIKeyQuery\n+from .http import HTTPAuthorizationCredentials as HTTPAuthorizationCredentials\n+from .http import HTTPBasic as HTTPBasic\n+from .http import HTTPBasicCredentials as HTTPBasicCredentials\n+from .http import HTTPBearer as HTTPBearer\n+from .http import HTTPDigest as HTTPDigest\n+from .oauth2 import OAuth2 as OAuth2\n+from .oauth2 import OAuth2AuthorizationCodeBearer as OAuth2AuthorizationCodeBearer\n+from .oauth2 import OAuth2PasswordBearer as OAuth2PasswordBearer\n+from .oauth2 import OAuth2PasswordRequestForm as OAuth2PasswordRequestForm\n+from .oauth2 import OAuth2PasswordRequestFormStrict as OAuth2PasswordRequestFormStrict\n+from .oauth2 import SecurityScopes as SecurityScopes\n+from .open_id_connect_url import OpenIdConnect as OpenIdConnect\n\n@@ -1,4 +1,4 @@\n-from typing import List, Optional\n+from typing import Any, Dict, List, Optional, Union\n \n from fastapi.exceptions import HTTPException\n from fastapi.openapi.models import OAuth2 as OAuth2Model\n@@ -116,7 +116,7 @@ class OAuth2(SecurityBase):\n     def __init__(\n         self,\n         *,\n-        flows: OAuthFlowsModel = OAuthFlowsModel(),\n+        flows: Union[OAuthFlowsModel, Dict[str, Dict[str, Any]]] = OAuthFlowsModel(),\n         scheme_name: Optional[str] = None,\n         auto_error: Optional[bool] = True\n     ):\n@@ -141,7 +141,7 @@ class OAuth2PasswordBearer(OAuth2):\n         self,\n         tokenUrl: str,\n         scheme_name: Optional[str] = None,\n-        scopes: Optional[dict] = None,\n+        scopes: Optional[Dict[str, str]] = None,\n         auto_error: bool = True,\n     ):\n         if not scopes:\n@@ -171,7 +171,7 @@ class OAuth2AuthorizationCodeBearer(OAuth2):\n         tokenUrl: str,\n         refreshUrl: Optional[str] = None,\n         scheme_name: Optional[str] = None,\n-        scopes: Optional[dict] = None,\n+        scopes: Optional[Dict[str, str]] = None,\n         auto_error: bool = True,\n     ):\n         if not scopes:\n\n@@ -1 +1 @@\n-from starlette.staticfiles import StaticFiles  # noqa\n+from starlette.staticfiles import StaticFiles as StaticFiles  # noqa\n\n@@ -1 +1 @@\n-from starlette.templating import Jinja2Templates  # noqa\n+from starlette.templating import Jinja2Templates as Jinja2Templates  # noqa\n\n@@ -1 +1 @@\n-from starlette.testclient import TestClient  # noqa\n+from starlette.testclient import TestClient as TestClient  # noqa\n\n@@ -0,0 +1,3 @@\n+from typing import Any, Callable, TypeVar\n+\n+DecoratedCallable = TypeVar(\"DecoratedCallable\", bound=Callable[..., Any])\n\n@@ -19,11 +19,10 @@ def get_model_definitions(\n     flat_models: Set[Union[Type[BaseModel], Type[Enum]]],\n     model_name_map: Dict[Union[Type[BaseModel], Type[Enum]], str],\n ) -> Dict[str, Any]:\n-    definitions: Dict[str, Dict] = {}\n+    definitions: Dict[str, Dict[str, Any]] = {}\n     for model in flat_models:\n-        # ignore mypy error until enum schemas are released\n         m_schema, m_definitions, m_nested_models = model_process_schema(\n-            model, model_name_map=model_name_map, ref_prefix=REF_PREFIX  # type: ignore\n+            model, model_name_map=model_name_map, ref_prefix=REF_PREFIX\n         )\n         definitions.update(m_definitions)\n         model_name = model_name_map[model]\n@@ -80,7 +79,7 @@ def create_cloned_field(\n         cloned_types = dict()\n     original_type = field.type_\n     if is_dataclass(original_type) and hasattr(original_type, \"__pydantic_model__\"):\n-        original_type = original_type.__pydantic_model__  # type: ignore\n+        original_type = original_type.__pydantic_model__\n     use_type = original_type\n     if lenient_issubclass(original_type, BaseModel):\n         original_type = cast(Type[BaseModel], original_type)\n@@ -127,7 +126,7 @@ def generate_operation_id_for_path(*, name: str, path: str, method: str) -> str:\n     return operation_id\n \n \n-def deep_dict_update(main_dict: dict, update_dict: dict) -> None:\n+def deep_dict_update(main_dict: Dict[Any, Any], update_dict: Dict[Any, Any]) -> None:\n     for key in update_dict:\n         if (\n             key in main_dict\n\n@@ -1,2 +1,2 @@\n-from starlette.websockets import WebSocket  # noqa\n-from starlette.websockets import WebSocketDisconnect  # noqa\n+from starlette.websockets import WebSocket as WebSocket  # noqa\n+from starlette.websockets import WebSocketDisconnect as WebSocketDisconnect  # noqa\n\n@@ -2,6 +2,7 @@ import pytest\n from fastapi import APIRouter, FastAPI\n from fastapi.routing import APIRoute\n from fastapi.testclient import TestClient\n+from starlette.routing import Route\n \n app = FastAPI()\n \n@@ -106,9 +107,9 @@ def test_get_path(path, expected_status, expected_response):\n \n def test_route_classes():\n     routes = {}\n-    r: APIRoute\n     for r in app.router.routes:\n+        assert isinstance(r, Route)\n         routes[r.path] = r\n-    assert routes[\"/a/\"].x_type == \"A\"\n-    assert routes[\"/a/b/\"].x_type == \"B\"\n-    assert routes[\"/a/b/c/\"].x_type == \"C\"\n+    assert getattr(routes[\"/a/\"], \"x_type\") == \"A\"\n+    assert getattr(routes[\"/a/b/\"], \"x_type\") == \"B\"\n+    assert getattr(routes[\"/a/b/c/\"], \"x_type\") == \"C\"\n\n@@ -7,7 +7,7 @@ app = FastAPI()\n \n class Product(BaseModel):\n     name: str\n-    description: str = None\n+    description: str = None  # type: ignore\n     price: float\n \n \n\n@@ -175,7 +175,7 @@ async def path3_override_router2_override(level3: str):\n     return level3\n \n \n-@router2_override.get(\"/default3\",)\n+@router2_override.get(\"/default3\")\n async def path3_default_router2_override(level3: str):\n     return level3\n \n@@ -217,7 +217,9 @@ async def path5_override_router4_override(level5: str):\n     return level5\n \n \n-@router4_override.get(\"/default5\",)\n+@router4_override.get(\n+    \"/default5\",\n+)\n async def path5_default_router4_override(level5: str):\n     return level5\n \n@@ -238,7 +240,9 @@ async def path5_override_router4_default(level5: str):\n     return level5\n \n \n-@router4_default.get(\"/default5\",)\n+@router4_default.get(\n+    \"/default5\",\n+)\n async def path5_default_router4_default(level5: str):\n     return level5\n \n\n@@ -15,7 +15,7 @@ class MyUuid:\n     def __str__(self):\n         return self.uuid\n \n-    @property\n+    @property  # type: ignore\n     def __class__(self):\n         return uuid.UUID\n \n\n@@ -71,7 +71,7 @@ class ModelWithAlias(BaseModel):\n \n \n class ModelWithDefault(BaseModel):\n-    foo: str = ...\n+    foo: str = ...  # type: ignore\n     bar: str = \"bar\"\n     bla: str = \"bla\"\n \n@@ -88,7 +88,7 @@ def fixture_model_with_path(request):\n         arbitrary_types_allowed = True\n \n     ModelWithPath = create_model(\n-        \"ModelWithPath\", path=(request.param, ...), __config__=Config\n+        \"ModelWithPath\", path=(request.param, ...), __config__=Config  # type: ignore\n     )\n     return ModelWithPath(path=request.param(\"/foo\", \"bar\"))\n \n\n@@ -5,9 +5,9 @@ from fastapi.openapi.docs import get_redoc_html, get_swagger_ui_html\n \n def test_strings_in_generated_swagger():\n     sig = inspect.signature(get_swagger_ui_html)\n-    swagger_js_url = sig.parameters.get(\"swagger_js_url\").default\n-    swagger_css_url = sig.parameters.get(\"swagger_css_url\").default\n-    swagger_favicon_url = sig.parameters.get(\"swagger_favicon_url\").default\n+    swagger_js_url = sig.parameters.get(\"swagger_js_url\").default  # type: ignore\n+    swagger_css_url = sig.parameters.get(\"swagger_css_url\").default  # type: ignore\n+    swagger_favicon_url = sig.parameters.get(\"swagger_favicon_url\").default  # type: ignore\n     html = get_swagger_ui_html(openapi_url=\"/docs\", title=\"title\")\n     body_content = html.body.decode()\n     assert swagger_js_url in body_content\n@@ -34,8 +34,8 @@ def test_strings_in_custom_swagger():\n \n def test_strings_in_generated_redoc():\n     sig = inspect.signature(get_redoc_html)\n-    redoc_js_url = sig.parameters.get(\"redoc_js_url\").default\n-    redoc_favicon_url = sig.parameters.get(\"redoc_favicon_url\").default\n+    redoc_js_url = sig.parameters.get(\"redoc_js_url\").default  # type: ignore\n+    redoc_favicon_url = sig.parameters.get(\"redoc_favicon_url\").default  # type: ignore\n     html = get_redoc_html(openapi_url=\"/docs\", title=\"title\")\n     body_content = html.body.decode()\n     assert redoc_js_url in body_content\n\n@@ -10,7 +10,7 @@ app = FastAPI()\n \n class Item(BaseModel):\n     name: str\n-    age: condecimal(gt=Decimal(0.0))\n+    age: condecimal(gt=Decimal(0.0))  # type: ignore\n \n \n @app.post(\"/items/\")\n\n@@ -8,7 +8,7 @@ app = FastAPI()\n \n \n @app.get(\"/items/\")\n-def read_items(q: Optional[str] = Param(None)):\n+def read_items(q: Optional[str] = Param(None)):  # type: ignore\n     return {\"q\": q}\n \n \n\n@@ -1,7 +1,9 @@\n+from typing import Any, List\n+\n import pytest\n from fastapi.params import Body, Cookie, Depends, Header, Param, Path, Query\n \n-test_data = [\"teststr\", None, ..., 1, []]\n+test_data: List[Any] = [\"teststr\", None, ..., 1, []]\n \n \n def get_user():\n\n@@ -27,7 +27,7 @@ def test_route_converters_int():\n     response = client.get(\"/int/5\")\n     assert response.status_code == 200, response.text\n     assert response.json() == {\"int\": 5}\n-    assert app.url_path_for(\"int_convertor\", param=5) == \"/int/5\"\n+    assert app.url_path_for(\"int_convertor\", param=5) == \"/int/5\"  # type: ignore\n \n \n def test_route_converters_float():\n@@ -35,7 +35,7 @@ def test_route_converters_float():\n     response = client.get(\"/float/25.5\")\n     assert response.status_code == 200, response.text\n     assert response.json() == {\"float\": 25.5}\n-    assert app.url_path_for(\"float_convertor\", param=25.5) == \"/float/25.5\"\n+    assert app.url_path_for(\"float_convertor\", param=25.5) == \"/float/25.5\"  # type: ignore\n \n \n def test_route_converters_path():\n\n@@ -27,7 +27,7 @@ invoices_callback_router = APIRouter()\n \n \n @invoices_callback_router.post(\n-    \"{$callback_url}/invoices/{$request.body.id}\", response_model=InvoiceEventReceived,\n+    \"{$callback_url}/invoices/{$request.body.id}\", response_model=InvoiceEventReceived\n )\n def invoice_notification(body: InvoiceEvent):\n     pass  # pragma: nocover\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
