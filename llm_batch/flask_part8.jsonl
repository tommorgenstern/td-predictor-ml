{"custom_id": "flask#68278fd78e15e3ef6a591f3f2b6cc700d1e4d6dd", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 39 | Lines Deleted: 11 | Files Changed: 1 | Hunks: 8 | Methods Changed: 5 | Complexity Δ (Sum/Max): 5/5 | Churn Δ: 50 | Churn Cumulative: 2114 | Contributors (this commit): 7 | Commits (past 90d): 75 | Contributors (cumulative): 7 | DMM Complexity: 1.0\n\nDIFF:\n@@ -615,6 +615,21 @@ class Module(_PackageBoundObject):\n         self._register_events.append(func)\n \n \n+class ConfigAttribute(object):\n+    \"\"\"Makes an attribute forward to the config\"\"\"\n+\n+    def __init__(self, name):\n+        self.__name__ = name\n+\n+    def __get__(self, obj, type=None):\n+        if obj is None:\n+            return self\n+        return obj.config[self.__name__]\n+\n+    def __set__(self, obj, value):\n+        obj.config[self.__name__] = value\n+\n+\n class Flask(_PackageBoundObject):\n     \"\"\"The flask object implements a WSGI application and acts as the central\n     object.  It is passed the name of the module or package of the\n@@ -648,25 +663,31 @@ class Flask(_PackageBoundObject):\n     #: and the development server will no longer serve any static files.\n     static_path = '/static'\n \n+    #: the debug flag.  Set this to `True` to enable debugging of the\n+    #: application.  In debug mode the debugger will kick in when an unhandled\n+    #: exception ocurrs and the integrated server will automatically reload\n+    #: the application if changes in the code are detected.\n+    debug = ConfigAttribute('debug')\n+\n     #: if a secret key is set, cryptographic components can use this to\n     #: sign cookies and other things.  Set this to a complex random value\n     #: when you want to use the secure cookie for instance.\n-    secret_key = None\n+    secret_key = ConfigAttribute('secret_key')\n \n     #: The secure cookie uses this for the name of the session cookie\n-    session_cookie_name = 'session'\n+    session_cookie_name = ConfigAttribute('session.cookie_name')\n \n     #: A :class:`~datetime.timedelta` which is used to set the expiration\n     #: date of a permanent session.  The default is 31 days which makes a\n     #: permanent session survive for roughly one month.\n-    permanent_session_lifetime = timedelta(days=31)\n+    permanent_session_lifetime = ConfigAttribute('session.permanent_lifetime')\n \n     #: Enable this if you want to use the X-Sendfile feature.  Keep in\n     #: mind that the server has to support this.  This only affects files\n     #: sent with the :func:`send_file` method.\n     #:\n     #: .. versionadded:: 0.2\n-    use_x_sendfile = False\n+    use_x_sendfile = ConfigAttribute('use_x_sendfile')\n \n     #: the logging format used for the debug logger.  This is only used when\n     #: the application is in debug mode, otherwise the attached logging\n@@ -686,15 +707,22 @@ class Flask(_PackageBoundObject):\n         extensions=['jinja2.ext.autoescape', 'jinja2.ext.with_']\n     )\n \n-    def __init__(self, import_name):\n+    #: default configuration parameters\n+    default_config = ImmutableDict({\n+        'debug':                                False,\n+        'secret_key':                           None,\n+        'session.cookie_name':                  'session',\n+        'session.permanent_lifetime':           timedelta(days=31),\n+        'use_x_sendfile':                       False\n+    })\n+\n+    def __init__(self, import_name, config=None):\n         _PackageBoundObject.__init__(self, import_name)\n \n-        #: the debug flag.  Set this to `True` to enable debugging of\n-        #: the application.  In debug mode the debugger will kick in\n-        #: when an unhandled exception ocurrs and the integrated server\n-        #: will automatically reload the application if changes in the\n-        #: code are detected.\n-        self.debug = False\n+        #: the configuration dictionary\n+        self.config = self.default_config.copy()\n+        if config:\n+            self.config.update(config)\n \n         #: a dictionary of all view functions registered.  The keys will\n         #: be function names which are also used to generate URLs and\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#4d16486132c349cdc7d473ef3c238dfa3f9d5385", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 119 | Lines Deleted: 10 | Files Changed: 2 | Hunks: 10 | Methods Changed: 10 | Complexity Δ (Sum/Max): 10/7 | Churn Δ: 129 | Churn Cumulative: 3044 | Contributors (this commit): 7 | Commits (past 90d): 110 | Contributors (cumulative): 11 | DMM Complexity: 1.0\n\nDIFF:\n@@ -19,7 +19,8 @@ from itertools import chain\n from jinja2 import Environment, PackageLoader, FileSystemLoader\n from werkzeug import Request as RequestBase, Response as ResponseBase, \\\n      LocalStack, LocalProxy, create_environ, SharedDataMiddleware, \\\n-     ImmutableDict, cached_property, wrap_file, Headers\n+     ImmutableDict, cached_property, wrap_file, Headers, \\\n+     import_string\n from werkzeug.routing import Map, Rule\n from werkzeug.exceptions import HTTPException, InternalServerError\n from werkzeug.contrib.securecookie import SecureCookie\n@@ -630,6 +631,90 @@ class ConfigAttribute(object):\n         obj.config[self.__name__] = value\n \n \n+class Config(dict):\n+    \"\"\"Works exactly like a dict but provides ways to fill it from files\n+    or special dictionaries.  There are two common patterns to populate the\n+    config.\n+\n+    Either you can fill the config from a config file::\n+\n+        app.config.from_pyfile('yourconfig.cfg')\n+\n+    Or alternatively you can define the configuration options in the\n+    module that calls :meth:`from_module` or provide an import path to\n+    a module that should be loaded.  It is also possible to tell it to\n+    use the same module and with that provide the configuration values\n+    just before the call::\n+\n+        DEBUG = True\n+        SECRET_KEY = 'development key'\n+        app.config.from_module(__name__)\n+\n+    In both cases (loading from any Python file or loading from modules),\n+    only uppercase keys are added to the config.  The actual keys in the\n+    config are however lowercased so they are converted for you.  This makes\n+    it possible to use lowercase values in the config file for temporary\n+    values that are not added to the config or to define the config keys in\n+    the same file that implements the application.\n+\n+    :param root_path: path to which files are read relative from.  When the\n+                      config object is created by the application, this is\n+                      the application's :attr:`~flask.Flask.root_path`.\n+    :param defaults: an optional dictionary of default values\n+    \"\"\"\n+\n+    def __init__(self, root_path, defaults=None):\n+        dict.__init__(self, defaults or {})\n+        self.root_path = root_path\n+\n+    def from_pyfile(self, filename):\n+        \"\"\"Updates the values in the config from a Python file.  This function\n+        behaves as if the file was imported as module with the\n+        :meth:`from_module` function.\n+\n+        :param filename: the filename of the config.  This can either be an\n+                         absolute filename or a filename relative to the\n+                         root path.\n+        \"\"\"\n+        filename = os.path.join(self.root_path, filename)\n+        d = type(sys)('config')\n+        d.__file__ = filename\n+        execfile(filename, d.__dict__)\n+        self.from_module(d)\n+\n+    def from_module(self, module):\n+        \"\"\"Updates the values from the given module.  A module can be of one\n+        of the following two types:\n+\n+        -   a string: in this case the module with that name will be imported\n+        -   an actual module reference: that module is used directly\n+\n+        Just the uppercase variables in that module are stored in the config\n+        after lowercasing.  Example usage::\n+\n+            app.config.from_module('yourapplication.default_config')\n+            from yourapplication import default_config\n+            app.config.from_module(default_config)\n+\n+        You should not use this function to load the actual configuration but\n+        rather configuration defaults.  The actual config should be loaded\n+        with :meth;`from_pyfile` and ideally from a location not within the\n+        package because the package might be installed system wide.\n+\n+        :param module: an import name or module\n+        \"\"\"\n+        if isinstance(module, basestring):\n+            d = import_string(module).__dict__\n+        else:\n+            d = module.__dict__\n+        for key, value in d.iteritems():\n+            if key.isupper():\n+                self[key.lower()] = value\n+\n+    def __repr__(self):\n+        return '<%s %s>' % (self.__class__.__name__, dict.__repr__(self))\n+\n+\n class Flask(_PackageBoundObject):\n     \"\"\"The flask object implements a WSGI application and acts as the central\n     object.  It is passed the name of the module or package of the\n@@ -675,12 +760,12 @@ class Flask(_PackageBoundObject):\n     secret_key = ConfigAttribute('secret_key')\n \n     #: The secure cookie uses this for the name of the session cookie\n-    session_cookie_name = ConfigAttribute('session.cookie_name')\n+    session_cookie_name = ConfigAttribute('session_cookie_name')\n \n     #: A :class:`~datetime.timedelta` which is used to set the expiration\n     #: date of a permanent session.  The default is 31 days which makes a\n     #: permanent session survive for roughly one month.\n-    permanent_session_lifetime = ConfigAttribute('session.permanent_lifetime')\n+    permanent_session_lifetime = ConfigAttribute('permanent_session_lifetime')\n \n     #: Enable this if you want to use the X-Sendfile feature.  Keep in\n     #: mind that the server has to support this.  This only affects files\n@@ -711,18 +796,18 @@ class Flask(_PackageBoundObject):\n     default_config = ImmutableDict({\n         'debug':                                False,\n         'secret_key':                           None,\n-        'session.cookie_name':                  'session',\n-        'session.permanent_lifetime':           timedelta(days=31),\n+        'session_cookie_name':                  'session',\n+        'permanent_session_lifetime':           timedelta(days=31),\n         'use_x_sendfile':                       False\n     })\n \n-    def __init__(self, import_name, config=None):\n+    def __init__(self, import_name):\n         _PackageBoundObject.__init__(self, import_name)\n \n-        #: the configuration dictionary\n-        self.config = self.default_config.copy()\n-        if config:\n-            self.config.update(config)\n+        #: the configuration dictionary as :class:`Config`.  This behaves\n+        #: exactly like a regular dictionary but supports additional methods\n+        #: to load a config from files.\n+        self.config = Config(self.root_path, self.default_config)\n \n         #: a dictionary of all view functions registered.  The keys will\n         #: be function names which are also used to generate URLs and\n\n@@ -27,6 +27,11 @@ sys.path.append(os.path.join(example_path, 'flaskr'))\n sys.path.append(os.path.join(example_path, 'minitwit'))\n \n \n+# config keys used for the ConfigTestCase\n+TEST_KEY = 'foo'\n+SECRET_KEY = 'devkey'\n+\n+\n @contextmanager\n def catch_stderr():\n     old_stderr = sys.stderr\n@@ -686,6 +691,24 @@ class LoggingTestCase(unittest.TestCase):\n             assert rv.data == 'Hello Server Error'\n \n \n+class ConfigTestCase(unittest.TestCase):\n+\n+    def common_module_test(self, app):\n+        assert app.secret_key == 'devkey'\n+        assert app.config['test_key'] == 'foo'\n+        assert 'ConfigTestCase' not in app.config\n+\n+    def test_config_from_file(self):\n+        app = flask.Flask(__name__)\n+        app.config.from_pyfile('flask_tests.py')\n+        self.common_module_test(app)\n+\n+    def test_config_from_module(self):\n+        app = flask.Flask(__name__)\n+        app.config.from_module(__name__)\n+        self.common_module_test(app)\n+\n+\n def suite():\n     from minitwit_tests import MiniTwitTestCase\n     from flaskr_tests import FlaskrTestCase\n@@ -696,6 +719,7 @@ def suite():\n     suite.addTest(unittest.makeSuite(ModuleTestCase))\n     suite.addTest(unittest.makeSuite(SendfileTestCase))\n     suite.addTest(unittest.makeSuite(LoggingTestCase))\n+    suite.addTest(unittest.makeSuite(ConfigTestCase))\n     if flask.json_available:\n         suite.addTest(unittest.makeSuite(JSONTestCase))\n     suite.addTest(unittest.makeSuite(MiniTwitTestCase))\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#35fd6eb22c4dec893770dd5720a51608a06fb8cd", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 40 | Lines Deleted: 31 | Files Changed: 2 | Hunks: 20 | Methods Changed: 8 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 71 | Churn Cumulative: 3115 | Contributors (this commit): 7 | Commits (past 90d): 112 | Contributors (cumulative): 11 | DMM Complexity: 1.0\n\nDIFF:\n@@ -680,36 +680,36 @@ class Config(dict):\n         d = type(sys)('config')\n         d.__file__ = filename\n         execfile(filename, d.__dict__)\n-        self.from_module(d)\n+        self.from_object(d)\n \n-    def from_module(self, module):\n-        \"\"\"Updates the values from the given module.  A module can be of one\n+    def from_object(self, obj):\n+        \"\"\"Updates the values from the given object.  An object can be of one\n         of the following two types:\n \n-        -   a string: in this case the module with that name will be imported\n-        -   an actual module reference: that module is used directly\n+        -   a string: in this case the object with that name will be imported\n+        -   an actual object reference: that object is used directly\n \n-        Just the uppercase variables in that module are stored in the config\n+        Objects are usually either modules or classes.\n+\n+        Just the uppercase variables in that object are stored in the config\n         after lowercasing.  Example usage::\n \n-            app.config.from_module('yourapplication.default_config')\n+            app.config.from_object('yourapplication.default_config')\n             from yourapplication import default_config\n-            app.config.from_module(default_config)\n+            app.config.from_object(default_config)\n \n         You should not use this function to load the actual configuration but\n         rather configuration defaults.  The actual config should be loaded\n-        with :meth;`from_pyfile` and ideally from a location not within the\n+        with :meth:`from_pyfile` and ideally from a location not within the\n         package because the package might be installed system wide.\n \n-        :param module: an import name or module\n+        :param obj: an import name or object\n         \"\"\"\n-        if isinstance(module, basestring):\n-            d = import_string(module).__dict__\n-        else:\n-            d = module.__dict__\n-        for key, value in d.iteritems():\n+        if isinstance(obj, basestring):\n+            obj = import_string(obj)\n+        for key in dir(obj):\n             if key.isupper():\n-                self[key.lower()] = value\n+                self[key] = getattr(obj, key)\n \n     def __repr__(self):\n         return '<%s %s>' % (self.__class__.__name__, dict.__repr__(self))\n@@ -752,27 +752,27 @@ class Flask(_PackageBoundObject):\n     #: application.  In debug mode the debugger will kick in when an unhandled\n     #: exception ocurrs and the integrated server will automatically reload\n     #: the application if changes in the code are detected.\n-    debug = ConfigAttribute('debug')\n+    debug = ConfigAttribute('DEBUG')\n \n     #: if a secret key is set, cryptographic components can use this to\n     #: sign cookies and other things.  Set this to a complex random value\n     #: when you want to use the secure cookie for instance.\n-    secret_key = ConfigAttribute('secret_key')\n+    secret_key = ConfigAttribute('SECRET_KEY')\n \n     #: The secure cookie uses this for the name of the session cookie\n-    session_cookie_name = ConfigAttribute('session_cookie_name')\n+    session_cookie_name = ConfigAttribute('SESSION_COOKIE_NAME')\n \n     #: A :class:`~datetime.timedelta` which is used to set the expiration\n     #: date of a permanent session.  The default is 31 days which makes a\n     #: permanent session survive for roughly one month.\n-    permanent_session_lifetime = ConfigAttribute('permanent_session_lifetime')\n+    permanent_session_lifetime = ConfigAttribute('PERMANENT_SESSION_LIFETIME')\n \n     #: Enable this if you want to use the X-Sendfile feature.  Keep in\n     #: mind that the server has to support this.  This only affects files\n     #: sent with the :func:`send_file` method.\n     #:\n     #: .. versionadded:: 0.2\n-    use_x_sendfile = ConfigAttribute('use_x_sendfile')\n+    use_x_sendfile = ConfigAttribute('USE_X_SENDFILE')\n \n     #: the logging format used for the debug logger.  This is only used when\n     #: the application is in debug mode, otherwise the attached logging\n@@ -794,11 +794,11 @@ class Flask(_PackageBoundObject):\n \n     #: default configuration parameters\n     default_config = ImmutableDict({\n-        'debug':                                False,\n-        'secret_key':                           None,\n-        'session_cookie_name':                  'session',\n-        'permanent_session_lifetime':           timedelta(days=31),\n-        'use_x_sendfile':                       False\n+        'DEBUG':                                False,\n+        'SECRET_KEY':                           None,\n+        'SESSION_COOKIE_NAME':                  'session',\n+        'PERMANENT_SESSION_LIFETIME':           timedelta(days=31),\n+        'USE_X_SENDFILE':                       False\n     })\n \n     def __init__(self, import_name):\n\n@@ -693,20 +693,29 @@ class LoggingTestCase(unittest.TestCase):\n \n class ConfigTestCase(unittest.TestCase):\n \n-    def common_module_test(self, app):\n+    def common_object_test(self, app):\n         assert app.secret_key == 'devkey'\n-        assert app.config['test_key'] == 'foo'\n+        assert app.config['TEST_KEY'] == 'foo'\n         assert 'ConfigTestCase' not in app.config\n \n     def test_config_from_file(self):\n         app = flask.Flask(__name__)\n         app.config.from_pyfile('flask_tests.py')\n-        self.common_module_test(app)\n+        self.common_object_test(app)\n \n     def test_config_from_module(self):\n         app = flask.Flask(__name__)\n-        app.config.from_module(__name__)\n-        self.common_module_test(app)\n+        app.config.from_object(__name__)\n+        self.common_object_test(app)\n+\n+    def test_config_from_class(self):\n+        class Base(object):\n+            TEST_KEY = 'foo'\n+        class Test(Base):\n+            SECRET_KEY = 'devkey'\n+        app = flask.Flask(__name__)\n+        app.config.from_object(Test)\n+        self.common_object_test(app)\n \n \n def suite():\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#182ee31503ea8a9eefd0d7063bd7fbdde991e13b", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 59 | Lines Deleted: 8 | Files Changed: 1 | Hunks: 10 | Methods Changed: 2 | Complexity Δ (Sum/Max): 3/3 | Churn Δ: 67 | Churn Cumulative: 2338 | Contributors (this commit): 7 | Commits (past 90d): 78 | Contributors (cumulative): 7 | DMM Complexity: 1.0\n\nDIFF:\n@@ -641,21 +641,33 @@ class Config(dict):\n         app.config.from_pyfile('yourconfig.cfg')\n \n     Or alternatively you can define the configuration options in the\n-    module that calls :meth:`from_module` or provide an import path to\n+    module that calls :meth:`from_object` or provide an import path to\n     a module that should be loaded.  It is also possible to tell it to\n     use the same module and with that provide the configuration values\n     just before the call::\n \n         DEBUG = True\n         SECRET_KEY = 'development key'\n-        app.config.from_module(__name__)\n+        app.config.from_object(__name__)\n \n     In both cases (loading from any Python file or loading from modules),\n-    only uppercase keys are added to the config.  The actual keys in the\n-    config are however lowercased so they are converted for you.  This makes\n-    it possible to use lowercase values in the config file for temporary\n-    values that are not added to the config or to define the config keys in\n-    the same file that implements the application.\n+    only uppercase keys are added to the config.  This makes it possible to use\n+    lowercase values in the config file for temporary values that are not added\n+    to the config or to define the config keys in the same file that implements\n+    the application.\n+\n+    Probably the most interesting way to load configurations is from an\n+    environment variable pointing to a file::\n+\n+        app.config.from_envvar('YOURAPPLICATION_SETTINGS')\n+\n+    In this case before launching the application you have to set this\n+    environment variable to the file you want to use.  On Linux and OS X\n+    use the export statement::\n+\n+        export YOURAPPLICATION_SETTINGS='/path/to/config/file'\n+\n+    On windows use `set` instead.\n \n     :param root_path: path to which files are read relative from.  When the\n                       config object is created by the application, this is\n@@ -667,10 +679,33 @@ class Config(dict):\n         dict.__init__(self, defaults or {})\n         self.root_path = root_path\n \n+    def from_envvar(self, variable_name, silent=False):\n+        \"\"\"Loads a configuration from an environment variable pointing to\n+        a configuration file.  This basically is just a shortcut with nicer\n+        error messages for this line of code::\n+\n+            app.config.from_pyfile(os.environ['YOURAPPLICATION_SETTINGS'])\n+\n+        :param variable_name: name of the environment variable\n+        :param silent: set to `True` if you want silent failing for missing\n+                       files.\n+        :return: bool. `True` if able to load config, `False` otherwise.\n+        \"\"\"\n+        rv = os.environ.get(variable_name)\n+        if not rv:\n+            if silent:\n+                return False\n+            raise RuntimeError('The environment variable %r is not set '\n+                               'and as such configuration could not be '\n+                               'loaded.  Set this variable and make it '\n+                               'point to a configuration file')\n+        self.from_pyfile(rv)\n+        return True\n+\n     def from_pyfile(self, filename):\n         \"\"\"Updates the values in the config from a Python file.  This function\n         behaves as if the file was imported as module with the\n-        :meth:`from_module` function.\n+        :meth:`from_object` function.\n \n         :param filename: the filename of the config.  This can either be an\n                          absolute filename or a filename relative to the\n@@ -752,19 +787,32 @@ class Flask(_PackageBoundObject):\n     #: application.  In debug mode the debugger will kick in when an unhandled\n     #: exception ocurrs and the integrated server will automatically reload\n     #: the application if changes in the code are detected.\n+    #:\n+    #: This attribute can also be configured from the config with the `DEBUG`\n+    #: configuration key.  Defaults to `False`.\n     debug = ConfigAttribute('DEBUG')\n \n     #: if a secret key is set, cryptographic components can use this to\n     #: sign cookies and other things.  Set this to a complex random value\n     #: when you want to use the secure cookie for instance.\n+    #:\n+    #: This attribute can also be configured from the config with the\n+    #: `SECRET_KEY` configuration key.  Defaults to `None`.\n     secret_key = ConfigAttribute('SECRET_KEY')\n \n     #: The secure cookie uses this for the name of the session cookie\n+    #:\n+    #: This attribute can also be configured from the config with the\n+    #: `SESSION_COOKIE_NAME` configuration key.  Defaults to ``'session'``\n     session_cookie_name = ConfigAttribute('SESSION_COOKIE_NAME')\n \n     #: A :class:`~datetime.timedelta` which is used to set the expiration\n     #: date of a permanent session.  The default is 31 days which makes a\n     #: permanent session survive for roughly one month.\n+    #:\n+    #: This attribute can also be configured from the config with the\n+    #: `PERMANENT_SESSION_LIFETIME` configuration key.  Defaults to\n+    #: ``timedelta(days=31)``\n     permanent_session_lifetime = ConfigAttribute('PERMANENT_SESSION_LIFETIME')\n \n     #: Enable this if you want to use the X-Sendfile feature.  Keep in\n@@ -772,6 +820,9 @@ class Flask(_PackageBoundObject):\n     #: sent with the :func:`send_file` method.\n     #:\n     #: .. versionadded:: 0.2\n+    #:\n+    #: This attribute can also be configured from the config with the\n+    #: `USE_X_SENDFILE` configuration key.  Defaults to `False`.\n     use_x_sendfile = ConfigAttribute('USE_X_SENDFILE')\n \n     #: the logging format used for the debug logger.  This is only used when\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#dfecc86dd315586bec8f5f0838195d03ba7165d3", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 21 | Lines Deleted: 18 | Files Changed: 4 | Hunks: 16 | Methods Changed: 9 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 39 | Churn Cumulative: 707 | Contributors (this commit): 3 | Commits (past 90d): 28 | Contributors (cumulative): 6 | DMM Complexity: 1.0\n\nDIFF:\n@@ -24,13 +24,13 @@ PASSWORD = 'default'\n \n # create our little application :)\n app = Flask(__name__)\n-app.secret_key = SECRET_KEY\n-app.debug = DEBUG\n+app.config.from_object(__name__)\n+app.config.from_envvar('FLASKR_SETTINGS', silent=True)\n \n \n def connect_db():\n     \"\"\"Returns a new connection to the database.\"\"\"\n-    return sqlite3.connect(DATABASE)\n+    return sqlite3.connect(app.config['DATABASE'])\n \n \n def init_db():\n@@ -76,9 +76,9 @@ def add_entry():\n def login():\n     error = None\n     if request.method == 'POST':\n-        if request.form['username'] != USERNAME:\n+        if request.form['username'] != app.config['USERNAME']:\n             error = 'Invalid username'\n-        elif request.form['password'] != PASSWORD:\n+        elif request.form['password'] != app.config['PASSWORD']:\n             error = 'Invalid password'\n         else:\n             session['logged_in'] = True\n\n@@ -18,14 +18,14 @@ class FlaskrTestCase(unittest.TestCase):\n \n     def setUp(self):\n         \"\"\"Before each test, set up a blank database\"\"\"\n-        self.db_fd, flaskr.DATABASE = tempfile.mkstemp()\n+        self.db_fd, flaskr.app.config['DATABASE'] = tempfile.mkstemp()\n         self.app = flaskr.app.test_client()\n         flaskr.init_db()\n \n     def tearDown(self):\n         \"\"\"Get rid of the database again after each test.\"\"\"\n         os.close(self.db_fd)\n-        os.unlink(flaskr.DATABASE)\n+        os.unlink(flaskr.app.config['DATABASE'])\n \n     def login(self, username, password):\n         return self.app.post('/login', data=dict(\n@@ -45,18 +45,22 @@ class FlaskrTestCase(unittest.TestCase):\n \n     def test_login_logout(self):\n         \"\"\"Make sure login and logout works\"\"\"\n-        rv = self.login(flaskr.USERNAME, flaskr.PASSWORD)\n+        rv = self.login(flaskr.app.config['USERNAME'],\n+                        flaskr.app.config['PASSWORD'])\n         assert 'You were logged in' in rv.data\n         rv = self.logout()\n         assert 'You were logged out' in rv.data\n-        rv = self.login(flaskr.USERNAME + 'x', flaskr.PASSWORD)\n+        rv = self.login(flaskr.app.config['USERNAME'] + 'x',\n+                        flaskr.app.config['PASSWORD'])\n         assert 'Invalid username' in rv.data\n-        rv = self.login(flaskr.USERNAME, flaskr.PASSWORD + 'x')\n+        rv = self.login(flaskr.app.config['USERNAME'],\n+                        flaskr.app.config['PASSWORD'] + 'x')\n         assert 'Invalid password' in rv.data\n \n     def test_messages(self):\n         \"\"\"Test that messages work\"\"\"\n-        self.login(flaskr.USERNAME, flaskr.PASSWORD)\n+        self.login(flaskr.app.config['USERNAME'],\n+                   flaskr.app.config['PASSWORD'])\n         rv = self.app.post('/add', data=dict(\n             title='<Hello>',\n             text='<strong>HTML</strong> allowed here'\n\n@@ -27,11 +27,13 @@ SECRET_KEY = 'development key'\n \n # create our little application :)\n app = Flask(__name__)\n+app.config.from_object(__name__)\n+app.config.from_envvar('MINITWIT_SETTINGS', silent=True)\n \n \n def connect_db():\n     \"\"\"Returns a new connection to the database.\"\"\"\n-    return sqlite3.connect(DATABASE)\n+    return sqlite3.connect(app.config['DATABASE'])\n \n \n def init_db():\n@@ -237,12 +239,9 @@ def logout():\n     return redirect(url_for('public_timeline'))\n \n \n-# add some filters to jinja and set the secret key and debug mode\n-# from the configuration.\n+# add some filters to jinja\n app.jinja_env.filters['datetimeformat'] = format_datetime\n app.jinja_env.filters['gravatar'] = gravatar_url\n-app.secret_key = SECRET_KEY\n-app.debug = DEBUG\n \n \n if __name__ == '__main__':\n\n@@ -18,14 +18,14 @@ class MiniTwitTestCase(unittest.TestCase):\n \n     def setUp(self):\n         \"\"\"Before each test, set up a blank database\"\"\"\n-        self.db_fd, minitwit.DATABASE = tempfile.mkstemp()\n+        self.db_fd, minitwit.app.config['DATABASE'] = tempfile.mkstemp()\n         self.app = minitwit.app.test_client()\n         minitwit.init_db()\n \n     def tearDown(self):\n         \"\"\"Get rid of the database again after each test.\"\"\"\n         os.close(self.db_fd)\n-        os.unlink(minitwit.DATABASE)\n+        os.unlink(minitwit.app.config['DATABASE'])\n \n     # helper functions\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#ce6e4cbd73d57cb8c1bba85c46490f71061f865f", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 8 | Lines Deleted: 8 | Files Changed: 2 | Hunks: 8 | Methods Changed: 6 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 16 | Churn Cumulative: 2449 | Contributors (this commit): 7 | Commits (past 90d): 89 | Contributors (cumulative): 9 | DMM Complexity: None\n\nDIFF:\n@@ -232,7 +232,7 @@ def flash(message, category='message'):\n     flashed message from the session and to display it to the user,\n     the template has to call :func:`get_flashed_messages`.\n \n-    .. versionchanged: 0.5\n+    .. versionchanged: 0.3\n        `category` parameter added.\n \n     :param message: the message to be flashed.\n@@ -260,7 +260,7 @@ def get_flashed_messages(with_categories=False):\n           <p class=flash-{{ category }}>{{ msg }}\n         {% endfor %}\n \n-    .. versionchanged:: 0.5\n+    .. versionchanged:: 0.3\n        `with_categories` parameter added.\n \n     :param with_categories: set to `True` to also receive categories.\n@@ -829,7 +829,7 @@ class Flask(_PackageBoundObject):\n     #: the application is in debug mode, otherwise the attached logging\n     #: handler does the formatting.\n     #:\n-    #: .. versionadded:: 0.5\n+    #: .. versionadded:: 0.3\n     debug_log_format = (\n         '-' * 80 + '\\n' +\n         '%(levelname)s in %(module)s, %(pathname)s:%(lineno)d]:\\n' +\n@@ -949,7 +949,7 @@ class Flask(_PackageBoundObject):\n             app.logger.warning('A warning ocurred (%d apples)', 42)\n             app.logger.error('An error occoured')\n \n-        .. versionadded:: 0.5\n+        .. versionadded:: 0.3\n         \"\"\"\n         from logging import getLogger, StreamHandler, Formatter, DEBUG\n         class DebugHandler(StreamHandler):\n@@ -1225,7 +1225,7 @@ class Flask(_PackageBoundObject):\n         registered error handlers and fall back to returning the\n         exception as response.\n \n-        .. versionadded: 0.5\n+        .. versionadded: 0.3\n         \"\"\"\n         handler = self.error_handlers.get(e.code)\n         if handler is None:\n@@ -1239,7 +1239,7 @@ class Flask(_PackageBoundObject):\n         for an 500 internal server error is used.  If no such handler\n         exists, a default 500 internal server error message is displayed.\n \n-        .. versionadded: 0.5\n+        .. versionadded: 0.3\n         \"\"\"\n         handler = self.error_handlers.get(500)\n         if self.debug:\n@@ -1397,7 +1397,7 @@ class Flask(_PackageBoundObject):\n         u'/'\n         >>> ctx.unbind()\n \n-        .. versionchanged:: 0.5\n+        .. versionchanged:: 0.3\n            Added support for non-with statement usage and `with` statement\n            is now passed the ctx object.\n \n\n@@ -43,7 +43,7 @@ from setuptools import setup\n \n setup(\n     name='Flask',\n-    version='0.5',\n+    version='0.3',\n     url='http://github.com/mitsuhiko/flask/',\n     license='BSD',\n     author='Armin Ronacher',\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#4ca1d0a2ed7639d3f1d2e466a777f7e6b0e8aa0a", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 99 | Contributors (this commit): 2 | Commits (past 90d): 11 | Contributors (cumulative): 2 | DMM Complexity: None\n\nDIFF:\n@@ -43,7 +43,7 @@ from setuptools import setup\n \n setup(\n     name='Flask',\n-    version='0.3',\n+    version='0.4',\n     url='http://github.com/mitsuhiko/flask/',\n     license='BSD',\n     author='Armin Ronacher',\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#6cb0855e2dd181df5353fc1be9b437c7bc92eb2f", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 22 | Lines Deleted: 1 | Files Changed: 2 | Hunks: 2 | Methods Changed: 2 | Complexity Δ (Sum/Max): 3/3 | Churn Δ: 23 | Churn Cumulative: 3219 | Contributors (this commit): 7 | Commits (past 90d): 116 | Contributors (cumulative): 11 | DMM Complexity: 1.0\n\nDIFF:\n@@ -698,7 +698,8 @@ class Config(dict):\n             raise RuntimeError('The environment variable %r is not set '\n                                'and as such configuration could not be '\n                                'loaded.  Set this variable and make it '\n-                               'point to a configuration file')\n+                               'point to a configuration file' %\n+                               variable_name)\n         self.from_pyfile(rv)\n         return True\n \n\n@@ -717,6 +717,26 @@ class ConfigTestCase(unittest.TestCase):\n         app.config.from_object(Test)\n         self.common_object_test(app)\n \n+    def test_config_from_envvar(self):\n+        import os\n+        env = os.environ\n+        try:\n+            os.environ = {}\n+            app = flask.Flask(__name__)\n+            try:\n+                app.config.from_envvar('FOO_SETTINGS')\n+            except RuntimeError, e:\n+                assert \"'FOO_SETTINGS' is not set\" in str(e)\n+            else:\n+                assert 0, 'expected exception'\n+            not app.config.from_envvar('FOO_SETTINGS', silent=True)\n+\n+            os.environ = {'FOO_SETTINGS': 'flask_tests.py'}\n+            assert app.config.from_envvar('FOO_SETTINGS')\n+            self.common_object_test(app)\n+        finally:\n+            os.environ = env\n+\n \n def suite():\n     from minitwit_tests import MiniTwitTestCase\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#9959ddd3da09f619d467891b194389851cf50367", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 0 | Lines Deleted: 5 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 5 | Churn Cumulative: 2360 | Contributors (this commit): 7 | Commits (past 90d): 81 | Contributors (cumulative): 7 | DMM Complexity: None\n\nDIFF:\n@@ -1424,8 +1424,3 @@ current_app = LocalProxy(lambda: _request_ctx_stack.top.app)\n request = LocalProxy(lambda: _request_ctx_stack.top.request)\n session = LocalProxy(lambda: _request_ctx_stack.top.session)\n g = LocalProxy(lambda: _request_ctx_stack.top.g)\n-\n-\n-# script interface to run a development server\n-if __name__ == '__main__':\n-    sys.exit(main(sys.argv))\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#7a4b6088395387abe4127c9650f9cbaac11a0ec4", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 34 | Lines Deleted: 1 | Files Changed: 2 | Hunks: 3 | Methods Changed: 7 | Complexity Δ (Sum/Max): 7/5 | Churn Δ: 35 | Churn Cumulative: 3259 | Contributors (this commit): 8 | Commits (past 90d): 119 | Contributors (cumulative): 13 | DMM Complexity: 1.0\n\nDIFF:\n@@ -612,6 +612,15 @@ class Module(_PackageBoundObject):\n             .setdefault(None, []).append(f))\n         return f\n \n+    def app_errorhandler(self, code):\n+        \"\"\"Like :meth:`Flask.errorhandler` but for a module.  This\n+        handler is used for all requests, even if outside of the module.\n+        \"\"\"\n+        def decorator(f):\n+            self._record(lambda s: s.app.errorhandler(code)(f))\n+            return f\n+        return decorator\n+\n     def _record(self, func):\n         self._register_events.append(func)\n \n\n@@ -260,7 +260,7 @@ class BasicFunctionalityTestCase(unittest.TestCase):\n         assert rv.data == 'not found'\n         rv = c.get('/error')\n         assert rv.status_code == 500\n-        assert 'internal server error' in rv.data\n+        assert 'internal server error' == rv.data\n \n     def test_response_creation(self):\n         app = flask.Flask(__name__)\n@@ -536,6 +536,30 @@ class ModuleTestCase(unittest.TestCase):\n         app.register_module(admin, url_prefix='/admin')\n         assert app.test_client().get('/admin/').data == '42'\n \n+    def test_error_handling(self):\n+        app = flask.Flask(__name__)\n+        admin = flask.Module(__name__, 'admin')\n+        @admin.app_errorhandler(404)\n+        def not_found(e):\n+            return 'not found', 404\n+        @admin.app_errorhandler(500)\n+        def internal_server_error(e):\n+            return 'internal server error', 500\n+        @admin.route('/')\n+        def index():\n+            flask.abort(404)\n+        @admin.route('/error')\n+        def error():\n+            1 // 0\n+        app.register_module(admin)\n+        c = app.test_client()\n+        rv = c.get('/')\n+        assert rv.status_code == 404\n+        assert rv.data == 'not found'\n+        rv = c.get('/error')\n+        assert rv.status_code == 500\n+        assert 'internal server error' == rv.data\n+\n \n class SendfileTestCase(unittest.TestCase):\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#50bca8c2d34b4b31ffcc98f6ced44b18de3c78b0", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 2371 | Contributors (this commit): 8 | Commits (past 90d): 83 | Contributors (cumulative): 8 | DMM Complexity: None\n\nDIFF:\n@@ -615,6 +615,8 @@ class Module(_PackageBoundObject):\n     def app_errorhandler(self, code):\n         \"\"\"Like :meth:`Flask.errorhandler` but for a module.  This\n         handler is used for all requests, even if outside of the module.\n+\n+        .. versionadded:: 0.4\n         \"\"\"\n         def decorator(f):\n             self._record(lambda s: s.app.errorhandler(code)(f))\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#707b30749daf407c07b5b265bd892564576ad80a", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 9 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 10 | Churn Cumulative: 109 | Contributors (this commit): 2 | Commits (past 90d): 12 | Contributors (cumulative): 2 | DMM Complexity: 1.0\n\nDIFF:\n@@ -41,6 +41,13 @@ Links\n from setuptools import setup\n \n \n+def run_tests():\n+    import os, sys\n+    sys.path.append(os.path.join(os.path.dirname(__file__), 'tests'))\n+    from flask_tests import suite\n+    return suite()\n+\n+\n setup(\n     name='Flask',\n     version='0.4',\n@@ -67,5 +74,6 @@ setup(\n         'Programming Language :: Python',\n         'Topic :: Internet :: WWW/HTTP :: Dynamic Content',\n         'Topic :: Software Development :: Libraries :: Python Modules'\n-    ]\n+    ],\n+    test_suite='__main__.run_tests'\n )\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#33e7f2b990e3889d6aa9cffef4a4c9d7d0923698", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 45 | Lines Deleted: 0 | Files Changed: 2 | Hunks: 4 | Methods Changed: 7 | Complexity Δ (Sum/Max): 7/6 | Churn Δ: 45 | Churn Cumulative: 3306 | Contributors (this commit): 8 | Commits (past 90d): 122 | Contributors (cumulative): 13 | DMM Complexity: 1.0\n\nDIFF:\n@@ -1362,6 +1362,12 @@ class Flask(_PackageBoundObject):\n         Then you still have the original application object around and\n         can continue to call methods on it.\n \n+        .. versionchanged:: 0.4\n+           The :meth:`after_request` functions are now called even if an\n+           error handler took over request processing.  This ensures that\n+           even if an exception happens database have the chance to\n+           properly close the connection.\n+\n         :param environ: a WSGI environment\n         :param start_response: a callable accepting a status code,\n                                a list of headers and an optional\n@@ -1376,6 +1382,13 @@ class Flask(_PackageBoundObject):\n                 response = self.process_response(response)\n             except Exception, e:\n                 response = self.make_response(self.handle_exception(e))\n+                try:\n+                    response = self.process_response(response)\n+                except Exception, e:\n+                    self.logger.exception('after_request handler failed '\n+                                          'to postprocess error response. '\n+                                          'Depending on uncertain state?')\n+\n             return response(environ, start_response)\n \n     def request_context(self, environ):\n\n@@ -16,6 +16,7 @@ import sys\n import flask\n import unittest\n import tempfile\n+from logging import StreamHandler\n from contextlib import contextmanager\n from datetime import datetime\n from werkzeug import parse_date, parse_options_header\n@@ -240,6 +241,37 @@ class BasicFunctionalityTestCase(unittest.TestCase):\n         assert 'after' in evts\n         assert rv == 'request|after'\n \n+    def test_after_request_errors(self):\n+        app = flask.Flask(__name__)\n+        called = []\n+        @app.after_request\n+        def after_request(response):\n+            called.append(True)\n+            return response\n+        @app.route('/')\n+        def fails():\n+            1/0\n+        rv = app.test_client().get('/')\n+        assert rv.status_code == 500\n+        assert 'Internal Server Error' in rv.data\n+        assert len(called) == 1\n+\n+    def test_after_request_handler_error(self):\n+        error_out = StringIO()\n+        app = flask.Flask(__name__)\n+        app.logger.addHandler(StreamHandler(error_out))\n+        @app.after_request\n+        def after_request(response):\n+            1/0\n+            return response\n+        @app.route('/')\n+        def fails():\n+            1/0\n+        rv = app.test_client().get('/')\n+        assert rv.status_code == 500\n+        assert 'Internal Server Error' in rv.data\n+        assert 'after_request handler failed' in error_out.getvalue()\n+\n     def test_error_handling(self):\n         app = flask.Flask(__name__)\n         @app.errorhandler(404)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#bc00fd1e83f23f57dd6a765b6a4bab2394584ae6", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 67 | Lines Deleted: 3 | Files Changed: 2 | Hunks: 5 | Methods Changed: 9 | Complexity Δ (Sum/Max): 11/7 | Churn Δ: 70 | Churn Cumulative: 3376 | Contributors (this commit): 8 | Commits (past 90d): 124 | Contributors (cumulative): 13 | DMM Complexity: 1.0\n\nDIFF:\n@@ -163,8 +163,10 @@ class _RequestContext(object):\n     def __exit__(self, exc_type, exc_value, tb):\n         # do not pop the request stack if we are in debug mode and an\n         # exception happened.  This will allow the debugger to still\n-        # access the request object in the interactive shell.\n-        if tb is None or not self.app.debug:\n+        # access the request object in the interactive shell.  Furthermore\n+        # the context can be force kept alive for the test client.\n+        if not self.request.environ.get('flask._preserve_context') and \\\n+           (tb is None or not self.app.debug):\n             self.pop()\n \n \n@@ -1021,9 +1023,40 @@ class Flask(_PackageBoundObject):\n     def test_client(self):\n         \"\"\"Creates a test client for this application.  For information\n         about unit testing head over to :ref:`testing`.\n+\n+        The test client can be used in a `with` block to defer the closing down\n+        of the context until the end of the `with` block.  This is useful if\n+        you want to access the context locals for testing::\n+\n+            with app.test_client() as c:\n+                rv = c.get('/?foo=42')\n+                assert request.args['foo'] == '42'\n+\n+        .. versionchanged:: 0.4\n+           added support for `with` block usage for the client.\n         \"\"\"\n         from werkzeug import Client\n-        return Client(self, self.response_class, use_cookies=True)\n+        class FlaskClient(Client):\n+            preserve_context = context_preserved = False\n+            def open(self, *args, **kwargs):\n+                if self.context_preserved:\n+                    _request_ctx_stack.pop()\n+                    self.context_preserved = False\n+                kwargs.setdefault('environ_overrides', {}) \\\n+                    ['flask._preserve_context'] = self.preserve_context\n+                old = _request_ctx_stack.top\n+                try:\n+                    return Client.open(self, *args, **kwargs)\n+                finally:\n+                    self.context_preserved = _request_ctx_stack.top is not old\n+            def __enter__(self):\n+                self.preserve_context = True\n+                return self\n+            def __exit__(self, exc_type, exc_value, tb):\n+                self.preserve_context = False\n+                if self.context_preserved:\n+                    _request_ctx_stack.pop()\n+        return FlaskClient(self, self.response_class, use_cookies=True)\n \n     def open_session(self, request):\n         \"\"\"Creates or opens a new session.  Default implementation stores all\n\n@@ -58,6 +58,7 @@ class ContextTestCase(unittest.TestCase):\n             assert index() == 'Hello World!'\n         with app.test_request_context('/meh'):\n             assert meh() == 'http://localhost/meh'\n+        assert flask._request_ctx_stack.top is None\n \n     def test_manual_context_binding(self):\n         app = flask.Flask(__name__)\n@@ -76,6 +77,36 @@ class ContextTestCase(unittest.TestCase):\n         else:\n             assert 0, 'expected runtime error'\n \n+    def test_test_client_context_binding(self):\n+        app = flask.Flask(__name__)\n+        @app.route('/')\n+        def index():\n+            flask.g.value = 42\n+            return 'Hello World!'\n+\n+        @app.route('/other')\n+        def other():\n+            1/0\n+\n+        with app.test_client() as c:\n+            resp = c.get('/')\n+            assert flask.g.value == 42\n+            assert resp.data == 'Hello World!'\n+            assert resp.status_code == 200\n+\n+            resp = c.get('/other')\n+            assert not hasattr(flask.g, 'value')\n+            assert 'Internal Server Error' in resp.data\n+            assert resp.status_code == 500\n+            flask.g.value = 23\n+\n+        try:\n+            flask.g.value\n+        except (AttributeError, RuntimeError):\n+            pass\n+        else:\n+            raise AssertionError('some kind of exception expected')\n+\n \n class BasicFunctionalityTestCase(unittest.TestCase):\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
