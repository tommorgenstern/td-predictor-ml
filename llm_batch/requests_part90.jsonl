{"custom_id": "requests#396963ac7eb8078bae5c30d9cf596debef892c3d", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 7 | Lines Deleted: 8 | Files Changed: 2 | Hunks: 6 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 15 | Churn Cumulative: 458 | Contributors (this commit): 8 | Commits (past 90d): 7 | Contributors (cumulative): 9 | DMM Complexity: None\n\nDIFF:\n@@ -1,7 +1,6 @@\n \"\"\"\n urllib3 - Thread-safe connection pooling and re-using.\n \"\"\"\n-\n from __future__ import absolute_import\n import warnings\n \n@@ -32,7 +31,7 @@ except ImportError:\n \n __author__ = 'Andrey Petrov (andrey.petrov@shazow.net)'\n __license__ = 'MIT'\n-__version__ = '1.14'\n+__version__ = 'dev'\n \n __all__ = (\n     'HTTPConnectionPool',\n\n@@ -21,7 +21,7 @@ try:\n     import socks\n except ImportError:\n     import warnings\n-    from urllib3.exceptions import DependencyWarning\n+    from ..exceptions import DependencyWarning\n \n     warnings.warn((\n         'SOCKS support in urllib3 requires the installation of optional '\n@@ -34,15 +34,15 @@ except ImportError:\n \n from socket import error as SocketError, timeout as SocketTimeout\n \n-from urllib3.connection import (\n+from ..connection import (\n     HTTPConnection, HTTPSConnection\n )\n-from urllib3.connectionpool import (\n+from ..connectionpool import (\n     HTTPConnectionPool, HTTPSConnectionPool\n )\n-from urllib3.exceptions import ConnectTimeoutError, NewConnectionError\n-from urllib3.poolmanager import PoolManager\n-from urllib3.util.url import parse_url\n+from ..exceptions import ConnectTimeoutError, NewConnectionError\n+from ..poolmanager import PoolManager\n+from ..util.url import parse_url\n \n try:\n     import ssl\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#08364c6739ef94d245327acf88359de371bbf3ba", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 25 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 4 | Methods Changed: 3 | Complexity Δ (Sum/Max): 4/4 | Churn Δ: 27 | Churn Cumulative: 1016 | Contributors (this commit): 32 | Commits (past 90d): 6 | Contributors (cumulative): 32 | DMM Complexity: 1.0\n\nDIFF:\n@@ -33,9 +33,15 @@ from .packages.urllib3.exceptions import SSLError as _SSLError\n from .packages.urllib3.exceptions import ResponseError\n from .cookies import extract_cookies_to_jar\n from .exceptions import (ConnectionError, ConnectTimeout, ReadTimeout, SSLError,\n-                         ProxyError, RetryError)\n+                         ProxyError, RetryError, InvalidSchema)\n from .auth import _basic_auth_str\n \n+try:\n+    from .packages.urllib3.contrib.socks import SOCKSProxyManager\n+except ImportError:\n+    def SOCKSProxyManager(*args, **kwargs):\n+        raise InvalidSchema(\"Missing dependencies for SOCKS support.\")\n+\n DEFAULT_POOLBLOCK = False\n DEFAULT_POOLSIZE = 10\n DEFAULT_RETRIES = 0\n@@ -150,6 +156,18 @@ class HTTPAdapter(BaseAdapter):\n         :returns: ProxyManager\n         \"\"\"\n         if not proxy in self.proxy_manager:\n+            if proxy.lower().startswith('socks'):\n+                username, password = get_auth_from_url(proxy)\n+                self.proxy_manager[proxy] = SOCKSProxyManager(\n+                    proxy,\n+                    username=username,\n+                    password=password,\n+                    num_pools=self._pool_connections,\n+                    maxsize=self._pool_maxsize,\n+                    block=self._pool_block,\n+                    **proxy_kwargs\n+                )\n+            else:\n                 proxy_headers = self.proxy_headers(proxy)\n                 self.proxy_manager[proxy] = proxy_from_url(\n                     proxy,\n@@ -284,7 +302,12 @@ class HTTPAdapter(BaseAdapter):\n         \"\"\"\n         proxy = select_proxy(request.url, proxies)\n         scheme = urlparse(request.url).scheme\n-        if proxy and scheme != 'https':\n+        proxy_scheme = urlparse(proxy).scheme\n+\n+        if proxy and proxy_scheme.lower().startswith('socks'):\n+            # Socks proxies behave like the proxy isn't there at all.\n+            url = request.path_url\n+        elif proxy and scheme != 'https':\n             url = urldefragauth(request.url)\n         else:\n             url = request.path_url\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#39ee5d46dc05edec6d4cf9c2831b326b857fc0e4", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 6 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 6 | Churn Cumulative: 629 | Contributors (this commit): 13 | Commits (past 90d): 6 | Contributors (cumulative): 13 | DMM Complexity: None\n\nDIFF:\n@@ -55,6 +55,12 @@ try:\n except ImportError:\n     pass\n \n+import warnings\n+\n+# urllib3's DependencyWarnings should be silenced.\n+from .packages.urllib3.exceptions import DependencyWarning\n+warnings.simplefilter('ignore', DependencyWarning)\n+\n from . import utils\n from .models import Request, Response, PreparedRequest\n from .api import request, get, head, post, patch, put, delete, options\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#1c54014daff8fa237820d5c67dcbd1aa2f585927", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 1 | Churn Cumulative: 1017 | Contributors (this commit): 32 | Commits (past 90d): 7 | Contributors (cumulative): 32 | DMM Complexity: 0.0\n\nDIFF:\n@@ -302,6 +302,7 @@ class HTTPAdapter(BaseAdapter):\n         \"\"\"\n         proxy = select_proxy(request.url, proxies)\n         scheme = urlparse(request.url).scheme\n+        if proxy:\n             proxy_scheme = urlparse(proxy).scheme\n \n         if proxy and proxy_scheme.lower().startswith('socks'):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#11b9b24ac9c6d7e2231493b3d8723de7715b0f2e", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 8 | Lines Deleted: 6 | Files Changed: 1 | Hunks: 6 | Methods Changed: 2 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 14 | Churn Cumulative: 1031 | Contributors (this commit): 32 | Commits (past 90d): 8 | Contributors (cumulative): 32 | DMM Complexity: 0.5\n\nDIFF:\n@@ -19,7 +19,7 @@ from .packages.urllib3.util.retry import Retry\n from .compat import urlparse, basestring\n from .utils import (DEFAULT_CA_BUNDLE_PATH, get_encoding_from_headers,\n                     prepend_scheme_if_needed, get_auth_from_url, urldefragauth,\n-                    select_proxy)\n+                    select_proxy, to_native_string)\n from .structures import CaseInsensitiveDict\n from .packages.urllib3.exceptions import ClosedPoolError\n from .packages.urllib3.exceptions import ConnectTimeoutError\n@@ -155,10 +155,11 @@ class HTTPAdapter(BaseAdapter):\n         :param proxy_kwargs: Extra keyword arguments used to configure the Proxy Manager.\n         :returns: ProxyManager\n         \"\"\"\n-        if not proxy in self.proxy_manager:\n-            if proxy.lower().startswith('socks'):\n+        if proxy in self.proxy_manager:\n+            manager = self.proxy_manager[proxy]\n+        elif proxy.lower().startswith('socks'):\n             username, password = get_auth_from_url(proxy)\n-                self.proxy_manager[proxy] = SOCKSProxyManager(\n+            manager = self.proxy_manager[proxy] = SOCKSProxyManager(\n                 proxy,\n                 username=username,\n                 password=password,\n@@ -169,7 +170,7 @@ class HTTPAdapter(BaseAdapter):\n             )\n         else:\n             proxy_headers = self.proxy_headers(proxy)\n-                self.proxy_manager[proxy] = proxy_from_url(\n+            manager = self.proxy_manager[proxy] = proxy_from_url(\n                 proxy,\n                 proxy_headers=proxy_headers,\n                 num_pools=self._pool_connections,\n@@ -177,7 +178,7 @@ class HTTPAdapter(BaseAdapter):\n                 block=self._pool_block,\n                 **proxy_kwargs)\n \n-        return self.proxy_manager[proxy]\n+        return manager\n \n     def cert_verify(self, conn, url, verify, cert):\n         \"\"\"Verify a SSL certificate. This method should not be called from user\n@@ -302,6 +303,7 @@ class HTTPAdapter(BaseAdapter):\n         \"\"\"\n         proxy = select_proxy(request.url, proxies)\n         scheme = urlparse(request.url).scheme\n+        proxy_scheme = ''\n         if proxy:\n             proxy_scheme = urlparse(proxy).scheme\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#e4d15c464929e87a6648c57f32c422dc5bfecef3", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 7 | Lines Deleted: 8 | Files Changed: 1 | Hunks: 4 | Methods Changed: 1 | Complexity Δ (Sum/Max): -1/0 | Churn Δ: 15 | Churn Cumulative: 1046 | Contributors (this commit): 32 | Commits (past 90d): 9 | Contributors (cumulative): 32 | DMM Complexity: 1.0\n\nDIFF:\n@@ -303,17 +303,16 @@ class HTTPAdapter(BaseAdapter):\n         \"\"\"\n         proxy = select_proxy(request.url, proxies)\n         scheme = urlparse(request.url).scheme\n-        proxy_scheme = ''\n-        if proxy:\n-            proxy_scheme = urlparse(proxy).scheme\n \n-        if proxy and proxy_scheme.lower().startswith('socks'):\n-            # Socks proxies behave like the proxy isn't there at all.\n+        is_proxied_http_request = (proxy and scheme != 'https')\n+        using_socks_proxy = False\n+        if proxy:\n+            proxy_scheme = urlparse(proxy).scheme.lower()\n+            using_socks_proxy = proxy_scheme.startswith('socks')\n+\n         url = request.path_url\n-        elif proxy and scheme != 'https':\n+        if is_proxied_http_request and not using_socks_proxy:\n             url = urldefragauth(request.url)\n-        else:\n-            url = request.path_url\n \n         return url\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#a3acd30bcc284f02e5740b7ce9b4aa415af00bf5", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 1 | Churn Cumulative: 450 | Contributors (this commit): 18 | Commits (past 90d): 3 | Contributors (cumulative): 18 | DMM Complexity: None\n\nDIFF:\n@@ -70,5 +70,6 @@ setup(\n     ),\n     extras_require={\n         'security': ['pyOpenSSL>=0.13', 'ndg-httpsclient', 'pyasn1'],\n+        'socks': ['PySocks>=1.5.6'],\n     },\n )\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#06df08e676f5ed84b0f4fea2b56c9c5dbffd32ea", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 22 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 2 | Methods Changed: 2 | Complexity Δ (Sum/Max): 13/13 | Churn Δ: 22 | Churn Cumulative: 1451 | Contributors (this commit): 37 | Commits (past 90d): 2 | Contributors (cumulative): 37 | DMM Complexity: 0.4444444444444444\n\nDIFF:\n@@ -47,6 +47,14 @@ class HTTPBasicAuth(AuthBase):\n         self.username = username\n         self.password = password\n \n+    def __eq__(self, other):\n+        if not isinstance(other, HTTPBasicAuth):\n+            return NotImplemented\n+        return self.username == other.username and self.password == other.password\n+\n+    def __ne__(self, other):\n+        return not self == other\n+\n     def __call__(self, r):\n         r.headers['Authorization'] = _basic_auth_str(self.username, self.password)\n         return r\n@@ -221,3 +229,17 @@ class HTTPDigestAuth(AuthBase):\n         self._thread_local.num_401_calls = 1\n \n         return r\n+\n+    def __eq__(self, other):\n+        if not isinstance(other, HTTPDigestAuth):\n+            return NotImplemented\n+        return self.username == other.username and \\\n+            self.password == other.password and \\\n+            self.last_nonce == other.last_nonce and \\\n+            self.nonce_count == other.nonce_count and \\\n+            self.chal == other.chal and \\\n+            self.pos == other.pos and \\\n+            self.num_401_calls == other.num_401_calls\n+\n+    def __ne__(self, other):\n+        return not self == other\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#fe0850f34134254c7aee753da2bdaa450acf5e7b", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 301 | Contributors (this commit): 7 | Commits (past 90d): 2 | Contributors (cumulative): 7 | DMM Complexity: None\n\nDIFF:\n@@ -46,7 +46,7 @@ master_doc = 'index'\n \n # General information about the project.\n project = u'Requests'\n-copyright = u'2015. A <a href=\"http://kennethreitz.com/pages/open-projects.html\">Kenneth Reitz</a> Project'\n+copyright = u'2016. A <a href=\"http://kennethreitz.com/pages/open-projects.html\">Kenneth Reitz</a> Project'\n \n # The version info for the project you're documenting, acts as replacement for\n # |version| and |release|, also used in various other places throughout the\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#f9d5cbe5b56227d61709cb1309d6152f90df24e8", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 3 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 305 | Contributors (this commit): 7 | Commits (past 90d): 3 | Contributors (cumulative): 7 | DMM Complexity: None\n\nDIFF:\n@@ -105,7 +105,9 @@ html_theme = 'default'\n # further.  For a list of options available for each theme, see the\n # documentation.\n html_theme_options = {\n-  'show_powered_by': False\n+  'show_powered_by': False,\n+  'github_user': 'kennethreitz',\n+  'github_repo': 'requests',\n }\n \n # Add any paths that contain custom themes here, relative to this directory.\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#6592dbc29b4e4f76b544f523437cc88ac2943634", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 1 | Churn Cumulative: 306 | Contributors (this commit): 7 | Commits (past 90d): 4 | Contributors (cumulative): 7 | DMM Complexity: None\n\nDIFF:\n@@ -108,6 +108,7 @@ html_theme_options = {\n   'show_powered_by': False,\n   'github_user': 'kennethreitz',\n   'github_repo': 'requests',\n+  'github_banner': True\n }\n \n # Add any paths that contain custom themes here, relative to this directory.\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#e6f218f3f6c365bc919218fae9d0726473043079", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 27 | Lines Deleted: 3 | Files Changed: 2 | Hunks: 3 | Methods Changed: 3 | Complexity Δ (Sum/Max): 4/4 | Churn Δ: 30 | Churn Cumulative: 8678 | Contributors (this commit): 140 | Commits (past 90d): 33 | Contributors (cumulative): 172 | DMM Complexity: 0.8181818181818182\n\nDIFF:\n@@ -110,7 +110,11 @@ class SessionRedirectMixin(object):\n                 resp.raw.read(decode_content=False)\n \n             if i >= self.max_redirects:\n-                raise TooManyRedirects('Exceeded %s redirects.' % self.max_redirects)\n+                raise TooManyRedirects(\n+                    'Exceeded %s redirects.' % self.max_redirects,\n+                    request=prepared_request,\n+                    response=resp\n+                )\n \n             # Release the connection back into the pool.\n             resp.close()\n\n@@ -23,8 +23,8 @@ from requests.compat import (\n from requests.cookies import cookiejar_from_dict, morsel_to_cookie\n from requests.exceptions import (ConnectionError, ConnectTimeout,\n                                  InvalidSchema, InvalidURL, MissingSchema,\n-                                 ReadTimeout, Timeout, RetryError)\n-from requests.models import PreparedRequest\n+                                 ReadTimeout, Timeout, RetryError, TooManyRedirects)\n+from requests.models import PreparedRequest, DEFAULT_REDIRECT_LIMIT\n from requests.structures import CaseInsensitiveDict\n from requests.sessions import SessionRedirectMixin\n from requests.models import urlencode\n@@ -188,6 +188,26 @@ class TestRequests(object):\n         assert r.history[0].status_code == 302\n         assert r.history[0].is_redirect\n \n+    def test_HTTP_302_TOO_MANY_REDIRECTS(self, httpbin):\n+        try:\n+            requests.get(httpbin('redirect', '50'))\n+        except TooManyRedirects, e:\n+            assert e.request is not None\n+            assert len(e.response.history) == DEFAULT_REDIRECT_LIMIT\n+        else:\n+            assert False\n+\n+    def test_HTTP_302_TOO_MANY_REDIRECTS_WITH_PARAMS(self, httpbin):\n+        s = requests.session()\n+        s.max_redirects = 5\n+        try:\n+            s.get(httpbin('redirect', '50'))\n+        except TooManyRedirects, e:\n+            assert e.request is not None\n+            assert len(e.response.history) == 5\n+        else:\n+            assert False\n+\n     # def test_HTTP_302_ALLOW_REDIRECT_POST(self):\n     #     r = requests.post(httpbin('status', '302'), data={'some': 'data'})\n     #     self.assertEqual(r.status_code, 200)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#5a18066c451ce6d5cd8a4b3dbcb229d7e3af2492", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 2 | Methods Changed: 2 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 5598 | Contributors (this commit): 102 | Commits (past 90d): 29 | Contributors (cumulative): 102 | DMM Complexity: None\n\nDIFF:\n@@ -191,7 +191,7 @@ class TestRequests(object):\n     def test_HTTP_302_TOO_MANY_REDIRECTS(self, httpbin):\n         try:\n             requests.get(httpbin('redirect', '50'))\n-        except TooManyRedirects, e:\n+        except TooManyRedirects as e:\n             assert e.request is not None\n             assert len(e.response.history) == DEFAULT_REDIRECT_LIMIT\n         else:\n@@ -202,7 +202,7 @@ class TestRequests(object):\n         s.max_redirects = 5\n         try:\n             s.get(httpbin('redirect', '50'))\n-        except TooManyRedirects, e:\n+        except TooManyRedirects as e:\n             assert e.request is not None\n             assert len(e.response.history) == 5\n         else:\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#5f2fef5bb57c2f2bc627ccb50f472f513e64dbab", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 3 | Files Changed: 1 | Hunks: 2 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 454 | Contributors (this commit): 18 | Commits (past 90d): 3 | Contributors (cumulative): 18 | DMM Complexity: None\n\nDIFF:\n@@ -6,10 +6,8 @@ import sys\n \n from codecs import open\n \n-try:\n from setuptools import setup\n-except ImportError:\n-    from distutils.core import setup\n+\n \n if sys.argv[-1] == 'publish':\n     os.system('python setup.py sdist upload')\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#6a8a480d6c535e8fd52526875296576c5309203c", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 9 | Lines Deleted: 11 | Files Changed: 2 | Hunks: 6 | Methods Changed: 3 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 20 | Churn Cumulative: 8702 | Contributors (this commit): 140 | Commits (past 90d): 29 | Contributors (cumulative): 172 | DMM Complexity: 1.0\n\nDIFF:\n@@ -110,11 +110,7 @@ class SessionRedirectMixin(object):\n                 resp.raw.read(decode_content=False)\n \n             if i >= self.max_redirects:\n-                raise TooManyRedirects(\n-                    'Exceeded %s redirects.' % self.max_redirects,\n-                    request=prepared_request,\n-                    response=resp\n-                )\n+                raise TooManyRedirects('Exceeded %s redirects.' % self.max_redirects, response=resp)\n \n             # Release the connection back into the pool.\n             resp.close()\n\n@@ -24,7 +24,7 @@ from requests.cookies import cookiejar_from_dict, morsel_to_cookie\n from requests.exceptions import (ConnectionError, ConnectTimeout,\n                                  InvalidSchema, InvalidURL, MissingSchema,\n                                  ReadTimeout, Timeout, RetryError, TooManyRedirects)\n-from requests.models import PreparedRequest, DEFAULT_REDIRECT_LIMIT\n+from requests.models import PreparedRequest\n from requests.structures import CaseInsensitiveDict\n from requests.sessions import SessionRedirectMixin\n from requests.models import urlencode\n@@ -192,10 +192,11 @@ class TestRequests(object):\n         try:\n             requests.get(httpbin('redirect', '50'))\n         except TooManyRedirects as e:\n-            assert e.request is not None\n-            assert len(e.response.history) == DEFAULT_REDIRECT_LIMIT\n+            assert '/relative-redirect/20' in e.request.url\n+            assert e.request.url == e.response.url\n+            assert len(e.response.history) == 30\n         else:\n-            assert False\n+            pytest.fail()\n \n     def test_HTTP_302_TOO_MANY_REDIRECTS_WITH_PARAMS(self, httpbin):\n         s = requests.session()\n@@ -203,10 +204,11 @@ class TestRequests(object):\n         try:\n             s.get(httpbin('redirect', '50'))\n         except TooManyRedirects as e:\n-            assert e.request is not None\n+            assert '/relative-redirect/45' in e.request.url\n+            assert e.request.url == e.response.url\n             assert len(e.response.history) == 5\n         else:\n-            assert False\n+            pytest.fail()\n \n     # def test_HTTP_302_ALLOW_REDIRECT_POST(self):\n     #     r = requests.post(httpbin('status', '302'), data={'some': 'data'})\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#1f05867493215d51790f965419149e45ad765ac0", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 2 | Methods Changed: 2 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 5616 | Contributors (this commit): 102 | Commits (past 90d): 24 | Contributors (cumulative): 102 | DMM Complexity: None\n\nDIFF:\n@@ -196,7 +196,7 @@ class TestRequests(object):\n             assert e.request.url == e.response.url\n             assert len(e.response.history) == 30\n         else:\n-            pytest.fail()\n+            pytest.fail('Expected redirect to raise TooManyRedirects but it did not')\n \n     def test_HTTP_302_TOO_MANY_REDIRECTS_WITH_PARAMS(self, httpbin):\n         s = requests.session()\n@@ -208,7 +208,7 @@ class TestRequests(object):\n             assert e.request.url == e.response.url\n             assert len(e.response.history) == 5\n         else:\n-            pytest.fail()\n+            pytest.fail('Expected redirect to raise TooManyRedirects but it did not')\n \n     # def test_HTTP_302_ALLOW_REDIRECT_POST(self):\n     #     r = requests.post(httpbin('status', '302'), data={'some': 'data'})\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#56a1b55a42072eb594eb0cc969dc4b4a80b7fab2", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 9 | Lines Deleted: 7 | Files Changed: 1 | Hunks: 5 | Methods Changed: 2 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 16 | Churn Cumulative: 5632 | Contributors (this commit): 102 | Commits (past 90d): 25 | Contributors (cumulative): 102 | DMM Complexity: 1.0\n\nDIFF:\n@@ -190,10 +190,11 @@ class TestRequests(object):\n \n     def test_HTTP_302_TOO_MANY_REDIRECTS(self, httpbin):\n         try:\n-            requests.get(httpbin('redirect', '50'))\n+            requests.get(httpbin('relative-redirect', '50'))\n         except TooManyRedirects as e:\n-            assert '/relative-redirect/20' in e.request.url\n-            assert e.request.url == e.response.url\n+            url = httpbin('relative-redirect', '20')\n+            assert e.request.url == url\n+            assert e.response.url == url\n             assert len(e.response.history) == 30\n         else:\n             pytest.fail('Expected redirect to raise TooManyRedirects but it did not')\n@@ -202,13 +203,14 @@ class TestRequests(object):\n         s = requests.session()\n         s.max_redirects = 5\n         try:\n-            s.get(httpbin('redirect', '50'))\n+            s.get(httpbin('relative-redirect', '50'))\n         except TooManyRedirects as e:\n-            assert '/relative-redirect/45' in e.request.url\n-            assert e.request.url == e.response.url\n+            url = httpbin('relative-redirect', '45')\n+            assert e.request.url == url\n+            assert e.response.url == url\n             assert len(e.response.history) == 5\n         else:\n-            pytest.fail('Expected redirect to raise TooManyRedirects but it did not')\n+            pytest.fail('Expected custom max number of redirects to be respected but was not')\n \n     # def test_HTTP_302_ALLOW_REDIRECT_POST(self):\n     #     r = requests.post(httpbin('status', '302'), data={'some': 'data'})\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#a02069ec9e0593f136e40783a8ea98e64968d32b", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): -4/0 | Churn Δ: 2 | Churn Cumulative: 1048 | Contributors (this commit): 33 | Commits (past 90d): 8 | Contributors (cumulative): 33 | DMM Complexity: None\n\nDIFF:\n@@ -65,7 +65,7 @@ class HTTPAdapter(BaseAdapter):\n \n     :param pool_connections: The number of urllib3 connection pools to cache.\n     :param pool_maxsize: The maximum number of connections to save in the pool.\n-    :param int max_retries: The maximum number of retries each connection\n+    :param max_retries: The maximum number of retries each connection\n         should attempt. Note, this applies only to failed DNS lookups, socket\n         connections and connection timeouts, never to requests where data has\n         made it to the server. By default, Requests does not retry failed\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#6195edc075b5960cdc2699c8556be35406247f61", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 8 | Lines Deleted: 12 | Files Changed: 1 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): -9/0 | Churn Δ: 20 | Churn Cumulative: 1471 | Contributors (this commit): 38 | Commits (past 90d): 3 | Contributors (cumulative): 38 | DMM Complexity: 1.0\n\nDIFF:\n@@ -48,9 +48,10 @@ class HTTPBasicAuth(AuthBase):\n         self.password = password\n \n     def __eq__(self, other):\n-        if not isinstance(other, HTTPBasicAuth):\n-            return NotImplemented\n-        return self.username == other.username and self.password == other.password\n+        return all([\n+            self.username == getattr(other, 'username', None),\n+            self.password == getattr(other, 'password', None)\n+        ]\n \n     def __ne__(self, other):\n         return not self == other\n@@ -231,15 +232,10 @@ class HTTPDigestAuth(AuthBase):\n         return r\n \n     def __eq__(self, other):\n-        if not isinstance(other, HTTPDigestAuth):\n-            return NotImplemented\n-        return self.username == other.username and \\\n-            self.password == other.password and \\\n-            self.last_nonce == other.last_nonce and \\\n-            self.nonce_count == other.nonce_count and \\\n-            self.chal == other.chal and \\\n-            self.pos == other.pos and \\\n-            self.num_401_calls == other.num_401_calls\n+        return all([\n+            self.username == getattr(other, 'username', None),\n+            self.password == getattr(other, 'password', None)\n+        ]\n \n     def __ne__(self, other):\n         return not self == other\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#2140c98fa493404888744f3917636ec0950f9671", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 1475 | Contributors (this commit): 39 | Commits (past 90d): 4 | Contributors (cumulative): 39 | DMM Complexity: None\n\nDIFF:\n@@ -51,7 +51,7 @@ class HTTPBasicAuth(AuthBase):\n         return all([\n             self.username == getattr(other, 'username', None),\n             self.password == getattr(other, 'password', None)\n-        ]\n+        ])\n \n     def __ne__(self, other):\n         return not self == other\n@@ -235,7 +235,7 @@ class HTTPDigestAuth(AuthBase):\n         return all([\n             self.username == getattr(other, 'username', None),\n             self.password == getattr(other, 'password', None)\n-        ]\n+        ])\n \n     def __ne__(self, other):\n         return not self == other\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#90688c68ad5a1bad8ac93c6e2b26395da1fdff51", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 9 | Files Changed: 1 | Hunks: 3 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 11 | Churn Cumulative: 500 | Contributors (this commit): 20 | Commits (past 90d): 5 | Contributors (cumulative): 20 | DMM Complexity: None\n\nDIFF:\n@@ -11,9 +11,6 @@ from setuptools import setup\n from setuptools.command.test import test as TestCommand\n \n \n-JYTHON = platform.system() == 'Java'\n-\n-\n class PyTest(TestCommand):\n     user_options = [('pytest-args=', 'a', \"Arguments to pass into py.test\")]\n \n@@ -49,10 +46,7 @@ packages = [\n ]\n \n requires = []\n-test_requirements = ['pytest>=2.8.0', 'pytest-httpbin==0.0.7']\n-\n-if not JYTHON:\n-    test_requirements.append('pytest-cov')\n+test_requirements = ['pytest>=2.8.0', 'pytest-httpbin==0.0.7', 'pytest-cov']\n \n with open('requests/__init__.py', 'r') as fd:\n     version = re.search(r'^__version__\\s*=\\s*[\\'\"]([^\\'\"]*)[\\'\"]',\n@@ -94,8 +88,7 @@ setup(\n         'Programming Language :: Python :: 3.4',\n         'Programming Language :: Python :: 3.5',\n         'Programming Language :: Python :: Implementation :: CPython',\n-        'Programming Language :: Python :: Implementation :: PyPy',\n-        'Programming Language :: Python :: Implementation :: Jython',\n+        'Programming Language :: Python :: Implementation :: PyPy'\n     ),\n     cmdclass={'test': PyTest},\n     tests_require=test_requirements,\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#6e35ec4c127206106165cacc0b91cc6156334caa", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 11 | Lines Deleted: 21 | Files Changed: 1 | Hunks: 10 | Methods Changed: 2 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 32 | Churn Cumulative: 5931 | Contributors (this commit): 104 | Commits (past 90d): 25 | Contributors (cumulative): 104 | DMM Complexity: None\n\nDIFF:\n@@ -17,12 +17,11 @@ from requests.adapters import HTTPAdapter\n from requests.auth import HTTPDigestAuth, _basic_auth_str\n from requests.compat import (\n     Morsel, cookielib, getproxies, str, urljoin, urlparse, is_py3,\n-    builtin_str, OrderedDict\n-    )\n+    builtin_str, OrderedDict)\n from requests.cookies import cookiejar_from_dict, morsel_to_cookie\n-from requests.exceptions import (ConnectionError, ConnectTimeout,\n-                                 InvalidSchema, InvalidURL, MissingSchema,\n-                                 ReadTimeout, Timeout, RetryError, TooManyRedirects)\n+from requests.exceptions import (\n+    ConnectionError, ConnectTimeout, InvalidSchema, InvalidURL,\n+    MissingSchema, ReadTimeout, Timeout, RetryError, TooManyRedirects)\n from requests.models import PreparedRequest\n from requests.structures import CaseInsensitiveDict\n from requests.sessions import SessionRedirectMixin\n@@ -87,8 +86,7 @@ class TestRequests:\n         requests.patch\n         requests.post\n \n-    @pytest.mark.parametrize(\n-        'exception, url',\n+    @pytest.mark.parametrize('exception, url',\n         (\n             (MissingSchema, 'hiwpefhipowhefopw'),\n             (InvalidSchema, 'localhost:3128'),\n@@ -128,8 +126,7 @@ class TestRequests:\n \n         assert request.path_url == '/get/test%20case'\n \n-    @pytest.mark.parametrize(\n-        'url, expected',\n+    @pytest.mark.parametrize('url, expected',\n         (\n             ('http://example.com/path#fragment', 'http://example.com/path?a=b#fragment'),\n             ('http://example.com/path?key=value#fragment', 'http://example.com/path?key=value&a=b#fragment')\n@@ -299,9 +296,7 @@ class TestRequests:\n         assert urls == req_urls\n \n     def test_history_is_always_a_list(self, httpbin):\n-        \"\"\"\n-        Show that even with redirects, Response.history is always a list.\n-        \"\"\"\n+        \"\"\"Show that even with redirects, Response.history is always a list.\"\"\"\n         resp = requests.get(httpbin('get'))\n         assert isinstance(resp.history, list)\n         resp = requests.get(httpbin('redirect/1'))\n@@ -349,8 +344,7 @@ class TestRequests:\n         r = s.get(url)\n         assert r.status_code == 200\n \n-    @pytest.mark.parametrize(\n-        'url, exception',\n+    @pytest.mark.parametrize('url, exception',\n         (\n             # Connecting to an unknown domain should raise a ConnectionError\n             ('http://doesnotexist.google.com', ConnectionError),\n@@ -1184,8 +1178,7 @@ class TestContentEncodingDetection:\n \n class TestCaseInsensitiveDict:\n \n-    @pytest.mark.parametrize(\n-        'cid',\n+    @pytest.mark.parametrize('cid',\n         (\n             CaseInsensitiveDict({'Foo': 'foo', 'BAr': 'bar'}),\n             CaseInsensitiveDict([('Foo', 'foo'), ('BAr', 'bar')]),\n@@ -1467,7 +1460,6 @@ class TestUtils:\n \n \n class TestMorselToCookieExpires:\n-\n     \"\"\"Tests for morsel_to_cookie when morsel contains expires.\"\"\"\n \n     def test_expires_valid_str(self):\n@@ -1478,8 +1470,7 @@ class TestMorselToCookieExpires:\n         cookie = morsel_to_cookie(morsel)\n         assert cookie.expires == 1\n \n-    @pytest.mark.parametrize(\n-        'value, exception',\n+    @pytest.mark.parametrize('value, exception',\n         (\n             (100, TypeError),\n             ('woops', ValueError),\n@@ -1647,8 +1638,7 @@ def list_of_tuples():\n \n \n def test_data_argument_accepts_tuples(list_of_tuples):\n-    \"\"\"\n-    Ensure that the data argument will accept tuples of strings\n+    \"\"\"Ensure that the data argument will accept tuples of strings\n     and properly encode them.\n     \"\"\"\n     for data in list_of_tuples:\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#1c5c6eeb7a82d3825b538b077fb42803c37359ab", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 4 | Lines Deleted: 3 | Files Changed: 2 | Hunks: 3 | Methods Changed: 2 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 7 | Churn Cumulative: 6438 | Contributors (this commit): 116 | Commits (past 90d): 29 | Contributors (cumulative): 124 | DMM Complexity: 1.0\n\nDIFF:\n@@ -1,7 +1,6 @@\n #!/usr/bin/env python\n \n import os\n-import platform\n import re\n import sys\n \n\n@@ -606,11 +606,13 @@ class TestRequests:\n \n     def test_hook_receives_request_arguments(self, httpbin):\n         def hook(resp, **kwargs):\n-            # FIXME. Not executed\n             assert resp is not None\n             assert kwargs != {}\n \n-        requests.Request('GET', httpbin(), hooks={'response': hook})\n+        s = requests.Session()\n+        r = requests.Request('GET', httpbin(), hooks={'response': hook})\n+        prep = s.prepare_request(r)\n+        s.send(prep)\n \n     def test_session_hooks_are_used_with_no_request_hooks(self, httpbin):\n         hook = lambda x, *args, **kwargs: x\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#18b26d20f7d0623e4b3df9fa6538e86069df3cdb", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 352 | Lines Deleted: 324 | Files Changed: 5 | Hunks: 28 | Methods Changed: 70 | Complexity Δ (Sum/Max): 194/168 | Churn Δ: 676 | Churn Cumulative: 3405 | Contributors (this commit): 27 | Commits (past 90d): 5 | Contributors (cumulative): 33 | DMM Complexity: 0.0\n\nDIFF:\n@@ -0,0 +1 @@\n+# coding: utf-8\n\n@@ -0,0 +1,20 @@\n+# coding: utf-8\n+from requests.compat import is_py3\n+\n+\n+try:\n+    import StringIO\n+except ImportError:\n+    import io as StringIO\n+\n+try:\n+    from cStringIO import StringIO as cStringIO\n+except ImportError:\n+    cStringIO = None\n+\n+if is_py3:\n+    def u(s):\n+        return s\n+else:\n+    def u(s):\n+        return s.decode('unicode-escape')\n\n@@ -0,0 +1,23 @@\n+# coding: utf-8\n+import pytest\n+from requests.compat import urljoin\n+\n+\n+def prepare_url(value):\n+    # Issue #1483: Make sure the URL always has a trailing slash\n+    httpbin_url = value.url.rstrip('/') + '/'\n+\n+    def inner(*suffix):\n+        return urljoin(httpbin_url, '/'.join(suffix))\n+\n+    return inner\n+\n+\n+@pytest.fixture\n+def httpbin(httpbin):\n+    return prepare_url(httpbin)\n+\n+\n+@pytest.fixture\n+def httpbin_secure(httpbin_secure):\n+    return prepare_url(httpbin_secure)\n\n@@ -16,7 +16,7 @@ import pytest\n from requests.adapters import HTTPAdapter\n from requests.auth import HTTPDigestAuth, _basic_auth_str\n from requests.compat import (\n-    Morsel, cookielib, getproxies, str, urljoin, urlparse, is_py3,\n+    Morsel, cookielib, getproxies, str, urlparse,\n     builtin_str, OrderedDict)\n from requests.cookies import cookiejar_from_dict, morsel_to_cookie\n from requests.exceptions import (\n@@ -28,45 +28,7 @@ from requests.sessions import SessionRedirectMixin\n from requests.models import urlencode\n from requests.hooks import default_hooks\n \n-try:\n-    import StringIO\n-except ImportError:\n-    import io as StringIO\n-\n-try:\n-    from multiprocessing.pool import ThreadPool\n-except ImportError:\n-    ThreadPool = None\n-\n-if is_py3:\n-    def u(s):\n-        return s\n-else:\n-    def u(s):\n-        return s.decode('unicode-escape')\n-\n-\n-@pytest.fixture\n-def httpbin(httpbin):\n-    # Issue #1483: Make sure the URL always has a trailing slash\n-    httpbin_url = httpbin.url.rstrip('/') + '/'\n-\n-    def inner(*suffix):\n-        return urljoin(httpbin_url, '/'.join(suffix))\n-\n-    return inner\n-\n-\n-@pytest.fixture\n-def httpsbin_url(httpbin_secure):\n-    # Issue #1483: Make sure the URL always has a trailing slash\n-    httpbin_url = httpbin_secure.url.rstrip('/') + '/'\n-\n-    def inner(*suffix):\n-        return urljoin(httpbin_url, '/'.join(suffix))\n-\n-    return inner\n-\n+from .compat import StringIO, u\n \n # Requests to this URL should always fail with a connection timeout (nothing\n # listening on that port)\n@@ -344,8 +306,8 @@ class TestRequests:\n         r = s.get(url)\n         assert r.status_code == 200\n \n-    @pytest.mark.parametrize('url, exception',\n-        (\n+    @pytest.mark.parametrize(\n+        'url, exception', (\n             # Connecting to an unknown domain should raise a ConnectionError\n             ('http://doesnotexist.google.com', ConnectionError),\n             # Connecting to an invalid port should raise a ConnectionError\n@@ -536,8 +498,8 @@ class TestRequests:\n             headers={str('Content-Type'): 'application/octet-stream'},\n             data='\\xff')  # compat.str is unicode.\n \n-    def test_pyopenssl_redirect(self, httpsbin_url, httpbin_ca_bundle):\n-        requests.get(httpsbin_url('status', '301'), verify=httpbin_ca_bundle)\n+    def test_pyopenssl_redirect(self, httpbin_secure, httpbin_ca_bundle):\n+        requests.get(httpbin_secure('status', '301'), verify=httpbin_ca_bundle)\n \n     def test_urlencoded_get_query_multivalued_param(self, httpbin):\n \n@@ -578,13 +540,13 @@ class TestRequests:\n         assert b'name=\"b\\'stuff\\'\"' not in prep.body\n \n     def test_unicode_method_name(self, httpbin):\n-        files = {'file': open('test_requests.py', 'rb')}\n+        files = {'file': open(__file__, 'rb')}\n         r = requests.request(\n             method=u('POST'), url=httpbin('post'), files=files)\n         assert r.status_code == 200\n \n     def test_unicode_method_name_with_request_object(self, httpbin):\n-        files = {'file': open('test_requests.py', 'rb')}\n+        files = {'file': open(__file__, 'rb')}\n         s = requests.Session()\n         req = requests.Request(u(\"POST\"), httpbin('post'), files=files)\n         prep = s.prepare_request(req)\n@@ -851,26 +813,6 @@ class TestRequests:\n         assert r.request.url == pr.request.url\n         assert r.request.headers == pr.request.headers\n \n-    def test_get_auth_from_url(self):\n-        url = 'http://user:pass@complex.url.com/path?query=yes'\n-        assert ('user', 'pass') == requests.utils.get_auth_from_url(url)\n-\n-    def test_get_auth_from_url_encoded_spaces(self):\n-        url = 'http://user:pass%20pass@complex.url.com/path?query=yes'\n-        assert ('user', 'pass pass') == requests.utils.get_auth_from_url(url)\n-\n-    def test_get_auth_from_url_not_encoded_spaces(self):\n-        url = 'http://user:pass pass@complex.url.com/path?query=yes'\n-        assert ('user', 'pass pass') == requests.utils.get_auth_from_url(url)\n-\n-    def test_get_auth_from_url_percent_chars(self):\n-        url = 'http://user%25user:pass@complex.url.com/path?query=yes'\n-        assert ('user%user', 'pass') == requests.utils.get_auth_from_url(url)\n-\n-    def test_get_auth_from_url_encoded_hashes(self):\n-        url = 'http://user:pass%23pass@complex.url.com/path?query=yes'\n-        assert ('user', 'pass#pass') == requests.utils.get_auth_from_url(url)\n-\n     def test_cannot_send_unprepared_requests(self, httpbin):\n         r = requests.Request(url=httpbin())\n         with pytest.raises(ValueError):\n@@ -986,23 +928,10 @@ class TestRequests:\n         assert 'unicode' in p.headers.keys()\n         assert 'byte' in p.headers.keys()\n \n-    def test_can_send_nonstring_objects_with_files(self, httpbin):\n-        data = {'a': 0.0}\n-        files = {'b': 'foo'}\n-        r = requests.Request('POST', httpbin('post'), data=data, files=files)\n-        p = r.prepare()\n-\n-        assert 'multipart/form-data' in p.headers['Content-Type']\n-\n-    def test_can_send_bytes_bytearray_objects_with_files(self, httpbin):\n-        # Test bytes:\n+    @pytest.mark.parametrize('files', ('foo', b'foo', bytearray(b'foo')))\n+    def test_can_send_objects_with_files(self, httpbin, files):\n         data = {'a': 'this is a string'}\n-        files = {'b': b'foo'}\n-        r = requests.Request('POST', httpbin('post'), data=data, files=files)\n-        p = r.prepare()\n-        assert 'multipart/form-data' in p.headers['Content-Type']\n-        # Test bytearrays:\n-        files = {'b': bytearray(b'foo')}\n+        files = {'b': files}\n         r = requests.Request('POST', httpbin('post'), data=data, files=files)\n         p = r.prepare()\n         assert 'multipart/form-data' in p.headers['Content-Type']\n@@ -1145,43 +1074,10 @@ class TestRequests:\n         assert len(list(r.iter_lines())) == 3\n \n \n-class TestContentEncodingDetection:\n-\n-    def test_none(self):\n-        encodings = requests.utils.get_encodings_from_content('')\n-        assert not len(encodings)\n-\n-    @pytest.mark.parametrize(\n-        'content', (\n-            # HTML5 meta charset attribute\n-            '<meta charset=\"UTF-8\">',\n-            # HTML4 pragma directive\n-            '<meta http-equiv=\"Content-type\" content=\"text/html;charset=UTF-8\">',\n-            # XHTML 1.x served with text/html MIME type\n-            '<meta http-equiv=\"Content-type\" content=\"text/html;charset=UTF-8\" />',\n-            # XHTML 1.x served as XML\n-            '<?xml version=\"1.0\" encoding=\"UTF-8\"?>',\n-        )\n-    )\n-    def test_pragmas(self, content):\n-        encodings = requests.utils.get_encodings_from_content(content)\n-        assert len(encodings) == 1\n-        assert encodings[0] == 'UTF-8'\n-\n-    def test_precedence(self):\n-        content = '''\n-        <?xml version=\"1.0\" encoding=\"XML\"?>\n-        <meta charset=\"HTML5\">\n-        <meta http-equiv=\"Content-type\" content=\"text/html;charset=HTML4\" />\n-        '''.strip()\n-        encodings = requests.utils.get_encodings_from_content(content)\n-        assert encodings == ['HTML5', 'HTML4', 'XML']\n-\n-\n class TestCaseInsensitiveDict:\n \n-    @pytest.mark.parametrize('cid',\n-        (\n+    @pytest.mark.parametrize(\n+        'cid', (\n             CaseInsensitiveDict({'Foo': 'foo', 'BAr': 'bar'}),\n             CaseInsensitiveDict([('Foo', 'foo'), ('BAr', 'bar')]),\n             CaseInsensitiveDict(FOO='foo', BAr='bar'),\n@@ -1321,146 +1217,6 @@ class TestCaseInsensitiveDict:\n         assert cid != cid_copy\n \n \n-class TestUtils:\n-\n-    def test_super_len_io_streams(self):\n-        \"\"\" Ensures that we properly deal with different kinds of IO streams. \"\"\"\n-        # uses StringIO or io.StringIO (see import above)\n-        from io import BytesIO\n-        from requests.utils import super_len\n-\n-        assert super_len(StringIO.StringIO()) == 0\n-        assert super_len(\n-            StringIO.StringIO('with so much drama in the LBC')) == 29\n-\n-        assert super_len(BytesIO()) == 0\n-        assert super_len(\n-            BytesIO(b\"it's kinda hard bein' snoop d-o-double-g\")) == 40\n-\n-        try:\n-            import cStringIO\n-        except ImportError:\n-            pass\n-        else:\n-            assert super_len(\n-                cStringIO.StringIO('but some how, some way...')) == 25\n-\n-    def test_super_len_correctly_calculates_len_of_partially_read_file(self):\n-        \"\"\"Ensure that we handle partially consumed file like objects.\"\"\"\n-        from requests.utils import super_len\n-        s = StringIO.StringIO()\n-        s.write('foobarbogus')\n-        assert super_len(s) == 0\n-\n-    def test_get_environ_proxies_ip_ranges(self):\n-        \"\"\"Ensures that IP addresses are correctly matches with ranges\n-        in no_proxy variable.\"\"\"\n-        from requests.utils import get_environ_proxies\n-        os.environ['no_proxy'] = \"192.168.0.0/24,127.0.0.1,localhost.localdomain,172.16.1.1\"\n-        assert get_environ_proxies('http://192.168.0.1:5000/') == {}\n-        assert get_environ_proxies('http://192.168.0.1/') == {}\n-        assert get_environ_proxies('http://172.16.1.1/') == {}\n-        assert get_environ_proxies('http://172.16.1.1:5000/') == {}\n-        assert get_environ_proxies('http://192.168.1.1:5000/') != {}\n-        assert get_environ_proxies('http://192.168.1.1/') != {}\n-\n-    def test_get_environ_proxies(self):\n-        \"\"\"Ensures that IP addresses are correctly matches with ranges\n-        in no_proxy variable.\"\"\"\n-        from requests.utils import get_environ_proxies\n-        os.environ['no_proxy'] = \"127.0.0.1,localhost.localdomain,192.168.0.0/24,172.16.1.1\"\n-        assert get_environ_proxies(\n-            'http://localhost.localdomain:5000/v1.0/') == {}\n-        assert get_environ_proxies('http://www.requests.com/') != {}\n-\n-    def test_select_proxies(self):\n-        \"\"\"Make sure we can select per-host proxies correctly.\"\"\"\n-        from requests.utils import select_proxy\n-        proxies = {'http': 'http://http.proxy',\n-                   'http://some.host': 'http://some.host.proxy'}\n-        assert select_proxy('hTTp://u:p@Some.Host/path', proxies) == 'http://some.host.proxy'\n-        assert select_proxy('hTTp://u:p@Other.Host/path', proxies) == 'http://http.proxy'\n-        assert select_proxy('hTTps://Other.Host', proxies) is None\n-\n-    def test_guess_filename_when_int(self):\n-        from requests.utils import guess_filename\n-        assert None is guess_filename(1)\n-\n-    def test_guess_filename_when_filename_is_an_int(self):\n-        from requests.utils import guess_filename\n-        fake = type('Fake', (object,), {'name': 1})()\n-        assert None is guess_filename(fake)\n-\n-    def test_guess_filename_with_file_like_obj(self):\n-        from requests.utils import guess_filename\n-        from requests import compat\n-        fake = type('Fake', (object,), {'name': b'value'})()\n-        guessed_name = guess_filename(fake)\n-        assert b'value' == guessed_name\n-        assert isinstance(guessed_name, compat.bytes)\n-\n-    def test_guess_filename_with_unicode_name(self):\n-        from requests.utils import guess_filename\n-        from requests import compat\n-        filename = b'value'.decode('utf-8')\n-        fake = type('Fake', (object,), {'name': filename})()\n-        guessed_name = guess_filename(fake)\n-        assert filename == guessed_name\n-        assert isinstance(guessed_name, compat.str)\n-\n-    def test_is_ipv4_address(self):\n-        from requests.utils import is_ipv4_address\n-        assert is_ipv4_address('8.8.8.8')\n-        assert not is_ipv4_address('8.8.8.8.8')\n-        assert not is_ipv4_address('localhost.localdomain')\n-\n-    def test_is_valid_cidr(self):\n-        from requests.utils import is_valid_cidr\n-        assert not is_valid_cidr('8.8.8.8')\n-        assert is_valid_cidr('192.168.1.0/24')\n-\n-    def test_dotted_netmask(self):\n-        from requests.utils import dotted_netmask\n-        assert dotted_netmask(8) == '255.0.0.0'\n-        assert dotted_netmask(24) == '255.255.255.0'\n-        assert dotted_netmask(25) == '255.255.255.128'\n-\n-    def test_address_in_network(self):\n-        from requests.utils import address_in_network\n-        assert address_in_network('192.168.1.1', '192.168.1.0/24')\n-        assert not address_in_network('172.16.0.1', '192.168.1.0/24')\n-\n-    def test_get_auth_from_url(self):\n-        \"\"\"Ensures that username and password in well-encoded URI as per\n-        RFC 3986 are correctly extracted.\"\"\"\n-        from requests.utils import get_auth_from_url\n-        from requests.compat import quote\n-        percent_encoding_test_chars = \"%!*'();:@&=+$,/?#[] \"\n-        url_address = \"request.com/url.html#test\"\n-        url = \"http://\" + quote(\n-            percent_encoding_test_chars, '') + ':' + quote(\n-            percent_encoding_test_chars, '') + '@' + url_address\n-        (username, password) = get_auth_from_url(url)\n-        assert username == percent_encoding_test_chars\n-        assert password == percent_encoding_test_chars\n-\n-    def test_requote_uri_with_unquoted_percents(self):\n-        \"\"\"Ensure we handle unquoted percent signs in redirects.\n-\n-        See: https://github.com/kennethreitz/requests/issues/2356\n-        \"\"\"\n-        from requests.utils import requote_uri\n-        bad_uri = 'http://example.com/fiz?buz=%ppicture'\n-        quoted = 'http://example.com/fiz?buz=%25ppicture'\n-        assert quoted == requote_uri(bad_uri)\n-\n-    def test_requote_uri_properly_requotes(self):\n-        \"\"\"Ensure requoting doesn't break expectations.\"\"\"\n-        from requests.utils import requote_uri\n-        quoted = 'http://example.com/fiz?buz=%25ppicture'\n-        assert quoted == requote_uri(quoted)\n-\n-\n class TestMorselToCookieExpires:\n     \"\"\"Tests for morsel_to_cookie when morsel contains expires.\"\"\"\n \n@@ -1472,8 +1228,8 @@ class TestMorselToCookieExpires:\n         cookie = morsel_to_cookie(morsel)\n         assert cookie.expires == 1\n \n-    @pytest.mark.parametrize('value, exception',\n-        (\n+    @pytest.mark.parametrize(\n+        'value, exception', (\n             (100, TypeError),\n             ('woops', ValueError),\n         )\n@@ -1516,20 +1272,23 @@ class TestMorselToCookieMaxAge:\n \n \n class TestTimeout:\n+\n     def test_stream_timeout(self, httpbin):\n         try:\n             requests.get(httpbin('delay/10'), timeout=2.0)\n         except requests.exceptions.Timeout as e:\n             assert 'Read timed out' in e.args[0].args[0]\n \n-    def test_invalid_timeout(self, httpbin):\n+    @pytest.mark.parametrize(\n+        'timeout, error_text', (\n+            ((3, 4, 5), '(connect, read)'),\n+            ('foo', 'must be an int or float'),\n+        )\n+    )\n+    def test_invalid_timeout(self, httpbin, timeout, error_text):\n         with pytest.raises(ValueError) as e:\n-            requests.get(httpbin('get'), timeout=(3, 4, 5))\n-        assert '(connect, read)' in str(e)\n-\n-        with pytest.raises(ValueError) as e:\n-            requests.get(httpbin('get'), timeout=\"foo\")\n-        assert 'must be an int or float' in str(e)\n+            requests.get(httpbin('get'), timeout=timeout)\n+        assert error_text in str(e)\n \n     def test_none_timeout(self, httpbin):\n         \"\"\" Check that you can set None as a valid timeout value.\n@@ -1606,7 +1365,13 @@ class RedirectSession(SessionRedirectMixin):\n         return string\n \n \n-class TestRedirects:\n+def test_requests_are_updated_each_time(httpbin):\n+    session = RedirectSession([303, 307])\n+    prep = requests.Request('POST', httpbin('post')).prepare()\n+    r0 = session.send(prep)\n+    assert r0.request.method == 'POST'\n+    assert session.calls[-1] == SendCall((r0.request,), {})\n+    redirect_generator = session.resolve_redirects(r0, prep)\n     default_keyword_args = {\n         'stream': False,\n         'verify': True,\n@@ -1615,35 +1380,23 @@ class TestRedirects:\n         'allow_redirects': False,\n         'proxies': {},\n     }\n-\n-    def test_requests_are_updated_each_time(self, httpbin):\n-        session = RedirectSession([303, 307])\n-        prep = requests.Request('POST', httpbin('post')).prepare()\n-        r0 = session.send(prep)\n-        assert r0.request.method == 'POST'\n-        assert session.calls[-1] == SendCall((r0.request,), {})\n-        redirect_generator = session.resolve_redirects(r0, prep)\n     for response in redirect_generator:\n         assert response.request.method == 'GET'\n-            send_call = SendCall((response.request,),\n-                                 TestRedirects.default_keyword_args)\n+        send_call = SendCall((response.request,), default_keyword_args)\n         assert session.calls[-1] == send_call\n \n \n-@pytest.fixture\n-def list_of_tuples():\n-    return [\n+@pytest.mark.parametrize(\n+    'data', (\n         (('a', 'b'), ('c', 'd')),\n         (('c', 'd'), ('a', 'b')),\n         (('a', 'b'), ('c', 'd'), ('e', 'f')),\n-    ]\n-\n-\n-def test_data_argument_accepts_tuples(list_of_tuples):\n+    )\n+)\n+def test_data_argument_accepts_tuples(data):\n     \"\"\"Ensure that the data argument will accept tuples of strings\n     and properly encode them.\n     \"\"\"\n-    for data in list_of_tuples:\n     p = PreparedRequest()\n     p.prepare(\n         method='GET',\n@@ -1654,46 +1407,35 @@ def test_data_argument_accepts_tuples(list_of_tuples):\n     assert p.body == urlencode(data)\n \n \n-def assert_copy(p, p_copy):\n+@pytest.mark.parametrize(\n+    'kwargs', (\n+        None,\n+        {\n+            'method': 'GET',\n+            'url': 'http://www.example.com',\n+            'data': 'foo=bar',\n+            'hooks': default_hooks()\n+        },\n+        {\n+            'method': 'GET',\n+            'url': 'http://www.example.com',\n+            'data': 'foo=bar',\n+            'hooks': default_hooks(),\n+            'cookies': {'foo': 'bar'}\n+        },\n+        {\n+            'method': 'GET',\n+            'url': u('http://www.example.com/üniçø∂é')\n+        },\n+    )\n+)\n+def test_prepared_copy(kwargs):\n+    p = PreparedRequest()\n+    if kwargs:\n+        p.prepare(**kwargs)\n+    copy = p.copy()\n     for attr in ('method', 'url', 'headers', '_cookies', 'body', 'hooks'):\n-        assert getattr(p, attr) == getattr(p_copy, attr)\n-\n-\n-def test_prepared_request_empty_copy():\n-    p = PreparedRequest()\n-    assert_copy(p, p.copy())\n-\n-\n-def test_prepared_request_no_cookies_copy():\n-    p = PreparedRequest()\n-    p.prepare(\n-        method='GET',\n-        url='http://www.example.com',\n-        data='foo=bar',\n-        hooks=default_hooks()\n-    )\n-    assert_copy(p, p.copy())\n-\n-\n-def test_prepared_request_complete_copy():\n-    p = PreparedRequest()\n-    p.prepare(\n-        method='GET',\n-        url='http://www.example.com',\n-        data='foo=bar',\n-        hooks=default_hooks(),\n-        cookies={'foo': 'bar'}\n-    )\n-    assert_copy(p, p.copy())\n-\n-\n-def test_prepare_unicode_url():\n-    p = PreparedRequest()\n-    p.prepare(\n-        method='GET',\n-        url=u('http://www.example.com/üniçø∂é'),\n-    )\n-    assert_copy(p, p.copy())\n+        assert getattr(p, attr) == getattr(copy, attr)\n \n \n def test_urllib3_retries(httpbin):\n\n@@ -0,0 +1,242 @@\n+# coding: utf-8\n+import os\n+from io import BytesIO\n+\n+import pytest\n+from requests import compat\n+from requests.utils import (\n+    address_in_network, dotted_netmask,\n+    get_auth_from_url, get_encodings_from_content,\n+    get_environ_proxies, guess_filename,\n+    is_ipv4_address, is_valid_cidr, requote_uri,\n+    select_proxy, super_len)\n+\n+from .compat import StringIO, cStringIO\n+\n+\n+class TestSuperLen:\n+\n+    @pytest.mark.parametrize(\n+        'stream, value', (\n+            (StringIO.StringIO, 'Test'),\n+            (BytesIO, b'Test'),\n+            pytest.mark.skipif('cStringIO is None')(\n+                (cStringIO, 'Test')\n+            ),\n+        ))\n+    def test_io_streams(self, stream, value):\n+        \"\"\" Ensures that we properly deal with different kinds of IO streams. \"\"\"\n+        assert super_len(stream()) == 0\n+        assert super_len(stream(value)) == 4\n+\n+    def test_super_len_correctly_calculates_len_of_partially_read_file(self):\n+        \"\"\"Ensure that we handle partially consumed file like objects.\"\"\"\n+        s = StringIO.StringIO()\n+        s.write('foobarbogus')\n+        assert super_len(s) == 0\n+\n+\n+class TestGetEnvironProxies:\n+    \"\"\"Ensures that IP addresses are correctly matches with ranges\n+        in no_proxy variable.\"\"\"\n+\n+    @pytest.yield_fixture(scope='class', autouse=True, params=['no_proxy', 'NO_PROXY'])\n+    def no_proxy(self, request):\n+        os.environ[request.param] = '192.168.0.0/24,127.0.0.1,localhost.localdomain,172.16.1.1'\n+        yield\n+        del os.environ[request.param]\n+\n+    @pytest.mark.parametrize(\n+        'url', (\n+            'http://192.168.0.1:5000/',\n+            'http://192.168.0.1/',\n+            'http://172.16.1.1/',\n+            'http://172.16.1.1:5000/',\n+            'http://localhost.localdomain:5000/v1.0/',\n+        )\n+    )\n+    def test_bypass(self, url):\n+        assert get_environ_proxies(url) == {}\n+\n+    @pytest.mark.parametrize(\n+        'url', (\n+            'http://192.168.1.1:5000/',\n+            'http://192.168.1.1/',\n+            'http://www.requests.com/',\n+        )\n+    )\n+    def test_not_bypass(self, url):\n+        assert get_environ_proxies(url) != {}\n+\n+\n+class TestIsIPv4Address:\n+\n+    def test_valid(self):\n+        assert is_ipv4_address('8.8.8.8')\n+\n+    @pytest.mark.parametrize('value', ('8.8.8.8.8', 'localhost.localdomain'))\n+    def test_invalid(self, value):\n+        assert not is_ipv4_address(value)\n+\n+\n+class TestIsValidCIDR:\n+\n+    def test_valid(self):\n+        assert is_valid_cidr('192.168.1.0/24')\n+\n+    @pytest.mark.parametrize(\n+        'value', (\n+            '8.8.8.8',\n+            '192.168.1.0/a',\n+            '192.168.1.0/128',\n+            '192.168.1.0/-1',\n+            '192.168.1.999/24',\n+        )\n+    )\n+    def test_invalid(self, value):\n+        assert not is_valid_cidr(value)\n+\n+\n+class TestAddressInNetwork:\n+\n+    def test_valid(self):\n+        assert address_in_network('192.168.1.1', '192.168.1.0/24')\n+\n+    def test_invalid(self):\n+        assert not address_in_network('172.16.0.1', '192.168.1.0/24')\n+\n+\n+class TestGuessFilename:\n+\n+    @pytest.mark.parametrize(\n+        'value', (1, type('Fake', (object,), {'name': 1})()),\n+    )\n+    def test_guess_filename_invalid(self, value):\n+        assert guess_filename(value) is None\n+\n+    @pytest.mark.parametrize(\n+        'value, expected_type', (\n+            (b'value', compat.bytes),\n+            (b'value'.decode('utf-8'), compat.str)\n+        )\n+    )\n+    def test_guess_filename_valid(self, value, expected_type):\n+        obj = type('Fake', (object,), {'name': value})()\n+        result = guess_filename(obj)\n+        assert result == value\n+        assert isinstance(result, expected_type)\n+\n+\n+class TestContentEncodingDetection:\n+\n+    def test_none(self):\n+        encodings = get_encodings_from_content('')\n+        assert not len(encodings)\n+\n+    @pytest.mark.parametrize(\n+        'content', (\n+            # HTML5 meta charset attribute\n+            '<meta charset=\"UTF-8\">',\n+            # HTML4 pragma directive\n+            '<meta http-equiv=\"Content-type\" content=\"text/html;charset=UTF-8\">',\n+            # XHTML 1.x served with text/html MIME type\n+            '<meta http-equiv=\"Content-type\" content=\"text/html;charset=UTF-8\" />',\n+            # XHTML 1.x served as XML\n+            '<?xml version=\"1.0\" encoding=\"UTF-8\"?>',\n+        )\n+    )\n+    def test_pragmas(self, content):\n+        encodings = get_encodings_from_content(content)\n+        assert len(encodings) == 1\n+        assert encodings[0] == 'UTF-8'\n+\n+    def test_precedence(self):\n+        content = '''\n+        <?xml version=\"1.0\" encoding=\"XML\"?>\n+        <meta charset=\"HTML5\">\n+        <meta http-equiv=\"Content-type\" content=\"text/html;charset=HTML4\" />\n+        '''.strip()\n+        assert get_encodings_from_content(content) == ['HTML5', 'HTML4', 'XML']\n+\n+\n+USER = PASSWORD = \"%!*'();:@&=+$,/?#[] \"\n+ENCODED_USER = compat.quote(USER, '')\n+ENCODED_PASSWORD = compat.quote(PASSWORD, '')\n+\n+\n+@pytest.mark.parametrize(\n+    'url, auth', (\n+        (\n+            'http://' + ENCODED_USER + ':' + ENCODED_PASSWORD + '@' +\n+            'request.com/url.html#test',\n+            (USER, PASSWORD)\n+        ),\n+        (\n+            'http://user:pass@complex.url.com/path?query=yes',\n+            ('user', 'pass')\n+        ),\n+        (\n+            'http://user:pass%20pass@complex.url.com/path?query=yes',\n+            ('user', 'pass pass')\n+        ),\n+        (\n+            'http://user:pass pass@complex.url.com/path?query=yes',\n+            ('user', 'pass pass')\n+        ),\n+        (\n+            'http://user%25user:pass@complex.url.com/path?query=yes',\n+            ('user%user', 'pass')\n+        ),\n+        (\n+            'http://user:pass%23pass@complex.url.com/path?query=yes',\n+            ('user', 'pass#pass')\n+        ),\n+    )\n+)\n+def test_get_auth_from_url(url, auth):\n+    assert get_auth_from_url(url) == auth\n+\n+\n+@pytest.mark.parametrize(\n+    'uri, expected', (\n+        (\n+            # Ensure requoting doesn't break expectations\n+            'http://example.com/fiz?buz=%25ppicture',\n+            'http://example.com/fiz?buz=%25ppicture',\n+        ),\n+        (\n+            # Ensure we handle unquoted percent signs in redirects\n+            'http://example.com/fiz?buz=%ppicture',\n+            'http://example.com/fiz?buz=%25ppicture',\n+        ),\n+    )\n+)\n+def test_requote_uri_with_unquoted_percents(uri, expected):\n+    \"\"\"See: https://github.com/kennethreitz/requests/issues/2356\n+    \"\"\"\n+    assert requote_uri(uri) == expected\n+\n+\n+@pytest.mark.parametrize(\n+    'mask, expected', (\n+        (8, '255.0.0.0'),\n+        (24, '255.255.255.0'),\n+        (25, '255.255.255.128'),\n+    )\n+)\n+def test_dotted_netmask(mask, expected):\n+    assert dotted_netmask(mask) == expected\n+\n+\n+@pytest.mark.parametrize(\n+    'url, expected', (\n+        ('hTTp://u:p@Some.Host/path', 'http://some.host.proxy'),\n+        ('hTTp://u:p@Other.Host/path', 'http://http.proxy'),\n+        ('hTTps://Other.Host', None),\n+    )\n+)\n+def test_select_proxies(url, expected):\n+    \"\"\"Make sure we can select per-host proxies correctly.\"\"\"\n+    proxies = {'http': 'http://http.proxy',\n+               'http://some.host': 'http://some.host.proxy'}\n+    assert select_proxy(url, proxies) == expected\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
