{"custom_id": "requests#e28c1c9bfa286b0badb10ddbbeb1fd965f57cad6", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 7 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 7 | Churn Cumulative: 323 | Contributors (this commit): 8 | Commits (past 90d): 21 | Contributors (cumulative): 8 | DMM Complexity: 1.0\n\nDIFF:\n@@ -183,6 +183,13 @@ class RequestsTestSuite(TestSetup, unittest.TestCase):\n         response = get(url)\n         self.assertEqual(response.url, httpbin('get/?' + query_unreserved))\n \n+        # We should ignore invalid %encodings\n+        request = requests.Request(\"http://0.0.0.0/get/%TEST\")\n+        self.assertEqual(request.path_url, \"/get/%TEST\")\n+\n+        request = requests.Request(\"http://0.0.0.0/get/%%TEST%%\")\n+        self.assertEqual(request.path_url, \"/get/%%TEST%%\")\n+\n     def test_user_agent_transfers(self):\n         \"\"\"Issue XX\"\"\"\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#06e4971fe72c377692ba9e37638431ed0582a028", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 10 | Lines Deleted: 13 | Files Changed: 1 | Hunks: 3 | Methods Changed: 1 | Complexity Δ (Sum/Max): -1/0 | Churn Δ: 23 | Churn Cumulative: 1195 | Contributors (this commit): 19 | Commits (past 90d): 30 | Contributors (cumulative): 19 | DMM Complexity: 0.0\n\nDIFF:\n@@ -441,28 +441,25 @@ def stream_untransfer(gen, resp):\n \n \n # The unreserved URI characters (RFC 3986)\n-UNRESERVED_SET = frozenset(\n+_unreserved_set = frozenset(\n     \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\"\n     + \"0123456789-._~\")\n \n+_unreserved_hextochr = dict((c.encode('hex'), c) for c in _unreserved_set)\n \n def unquote_unreserved(uri):\n     \"\"\"Un-escape any percent-escape sequences in a URI that are unreserved\n     characters.\n     This leaves all reserved, illegal and non-ASCII bytes encoded.\n     \"\"\"\n-    parts = uri.split('%')\n-    for i in range(1, len(parts)):\n-        h = parts[i][0:2]\n-        if len(h) == 2:\n-            c = chr(int(h, 16))\n-            if c in UNRESERVED_SET:\n-                parts[i] = c + parts[i][2:]\n-            else:\n-                parts[i] = '%' + parts[i]\n-        else:\n-            parts[i] = '%' + parts[i]\n-    return ''.join(parts)\n+    res = uri.split('%')\n+    s = res[0]\n+    for item in res[1:]:\n+        try:\n+            s += _unreserved_hextochr[item[:2].lower()] + item[2:]\n+        except (KeyError, UnicodeDecodeError):\n+            s += '%' + item\n+    return s\n \n \n def requote_uri(uri):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#c3e6c41fc164d4348f8ce197bd0075aff05637af", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 28 | Lines Deleted: 1 | Files Changed: 3 | Hunks: 3 | Methods Changed: 4 | Complexity Δ (Sum/Max): 4/2 | Churn Δ: 29 | Churn Cumulative: 5533 | Contributors (this commit): 56 | Commits (past 90d): 113 | Contributors (cumulative): 68 | DMM Complexity: 0.9375\n\nDIFF:\n@@ -56,6 +56,8 @@ class HTTPDigestAuth(AuthBase):\n     def handle_401(self, r):\n         \"\"\"Takes the given response and tries digest-auth, if needed.\"\"\"\n \n+        r.request.deregister_hook('response', self.handle_401)\n+\n         s_auth = r.headers.get('www-authenticate', '')\n \n         if 'digest' in s_auth.lower():\n\n@@ -408,7 +408,18 @@ class Request(object):\n     def register_hook(self, event, hook):\n         \"\"\"Properly register a hook.\"\"\"\n \n-        return self.hooks[event].append(hook)\n+        self.hooks[event].append(hook)\n+\n+    def deregister_hook(self,event,hook):\n+        \"\"\"Deregister a previously registered hook.\n+        Returns True if the hook existed, False if not.\n+        \"\"\"\n+\n+        try:\n+            self.hooks[event].remove(hook)\n+            return True\n+        except ValueError:\n+            return False\n \n     def send(self, anyway=False, prefetch=False):\n         \"\"\"Sends the request. Returns True of successful, False if not.\n\n@@ -272,6 +272,20 @@ class RequestsTestSuite(TestSetup, unittest.TestCase):\n             r = get(url, session=s)\n             self.assertEqual(r.status_code, 200)\n \n+    def test_DIGESTAUTH_WRONG_HTTP_401_GET(self):\n+\n+        for service in SERVICES:\n+\n+            auth = HTTPDigestAuth('user', 'wrongpass')\n+            url = service('digest-auth', 'auth', 'user', 'pass')\n+\n+            r = get(url, auth=auth)\n+            self.assertEqual(r.status_code, 401)\n+\n+            s = requests.session(auth=auth)\n+            r = get(url, session=s)\n+            self.assertEqual(r.status_code, 401)\n+\n     def test_POSTBIN_GET_POST_FILES(self):\n \n         for service in SERVICES:\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#f3ad56f103e364671504bb0d960a0ed69c2eafbc", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 26 | Lines Deleted: 21 | Files Changed: 1 | Hunks: 4 | Methods Changed: 3 | Complexity Δ (Sum/Max): 2/2 | Churn Δ: 47 | Churn Cumulative: 4907 | Contributors (this commit): 54 | Commits (past 90d): 84 | Contributors (cumulative): 54 | DMM Complexity: 0.0\n\nDIFF:\n@@ -80,7 +80,7 @@ class Request(object):\n         self.headers = dict(headers or [])\n \n         #: Dictionary of files to multipart upload (``{filename: content}``).\n-        self.files = files\n+        self.files = None\n \n         #: HTTP Method to use.\n         self.method = method\n@@ -114,6 +114,7 @@ class Request(object):\n \n         self.data, self._enc_data = self._encode_params(data)\n         self.params, self._enc_params = self._encode_params(params)\n+        self.files, self._enc_files = self._encode_files(files)\n \n         #: :class:`Response <Response>` instance, containing\n         #: content and metadata of HTTP Response, once :attr:`sent <send>`.\n@@ -329,6 +330,29 @@ class Request(object):\n         else:\n             return data, data\n \n+    def _encode_files(self,files):\n+\n+        if (not files) or isinstance(self.data, str):\n+            return None, None\n+\n+        try:\n+            fields = self.data.copy()\n+        except AttributeError:\n+            fields = dict(self.data)\n+\n+        for (k, v) in list(files.items()):\n+            # support for explicit filename\n+            if isinstance(v, (tuple, list)):\n+                fn, fp = v\n+            else:\n+                fn = guess_filename(v) or k\n+                fp = v\n+            fields.update({k: (fn, fp.read())})\n+\n+        (body, content_type) = encode_multipart_formdata(fields)\n+\n+        return files, (body, content_type)\n+\n     @property\n     def full_url(self):\n         \"\"\"Build the actual URL to use.\"\"\"\n@@ -447,26 +471,7 @@ class Request(object):\n \n         # Multi-part file uploads.\n         if self.files:\n-            if not isinstance(self.data, str):\n-\n-                try:\n-                    fields = self.data.copy()\n-                except AttributeError:\n-                    fields = dict(self.data)\n-\n-                for (k, v) in list(self.files.items()):\n-                    # support for explicit filename\n-                    if isinstance(v, (tuple, list)):\n-                        fn, fp = v\n-                    else:\n-                        fn = guess_filename(v) or k\n-                        fp = v\n-                    fields.update({k: (fn, fp.read())})\n-\n-                (body, content_type) = encode_multipart_formdata(fields)\n-            else:\n-                pass\n-                # TODO: Conflict?\n+            (body, content_type) = self._enc_files\n         else:\n             if self.data:\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#3a2eaa67a2931024c1caafe9395469a25c9b5ccb", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 15 | Lines Deleted: 2 | Files Changed: 3 | Hunks: 6 | Methods Changed: 2 | Complexity Δ (Sum/Max): -4/0 | Churn Δ: 17 | Churn Cumulative: 5339 | Contributors (this commit): 55 | Commits (past 90d): 112 | Contributors (cumulative): 71 | DMM Complexity: 0.625\n\nDIFF:\n@@ -36,3 +36,6 @@ class MissingSchema(RequestException, ValueError):\n \n class InvalidSchema(RequestException, ValueError):\n     \"\"\"See defaults.py for valid schemas.\"\"\"\n+    \n+class InvalidURL(RequestException, ValueError):\n+    \"\"\" The URL provided was somehow invalid. \"\"\"\n\\ No newline at end of file\n\n@@ -16,7 +16,7 @@ from .status_codes import codes\n \n from .auth import HTTPBasicAuth, HTTPProxyAuth\n from .packages.urllib3.response import HTTPResponse\n-from .packages.urllib3.exceptions import MaxRetryError\n+from .packages.urllib3.exceptions import MaxRetryError, LocationParseError\n from .packages.urllib3.exceptions import SSLError as _SSLError\n from .packages.urllib3.exceptions import HTTPError as _HTTPError\n from .packages.urllib3 import connectionpool, poolmanager\n@@ -24,7 +24,7 @@ from .packages.urllib3.filepost import encode_multipart_formdata\n from .defaults import SCHEMAS\n from .exceptions import (\n     ConnectionError, HTTPError, RequestException, Timeout, TooManyRedirects,\n-    URLRequired, SSLError, MissingSchema, InvalidSchema)\n+    URLRequired, SSLError, MissingSchema, InvalidSchema, InvalidURL)\n from .utils import (\n     get_encoding_from_headers, stream_untransfer, guess_filename, requote_uri,\n     dict_from_string, stream_decode_response_unicode, get_netrc_auth)\n@@ -497,10 +497,13 @@ class Request(object):\n                 self.__dict__.update(r.__dict__)\n         else:\n             # Check to see if keep_alive is allowed.\n+            try:\n                 if self.config.get('keep_alive'):\n                     conn = self._poolmanager.connection_from_url(url)\n                 else:\n                     conn = connectionpool.connection_from_url(url)\n+            except LocationParseError as e:\n+                raise InvalidURL(e)\n                 \n         if url.startswith('https') and self.verify:\n \n\n@@ -781,6 +781,13 @@ class RequestsTestSuite(TestSetup, unittest.TestCase):\n \n         requests.get(httpbin('post'), auth=('a', 'b'), data='\\xff')\n \n+    def test_useful_exception_for_invalid_port(self):\n+        # If we pass a legitimate URL with an invalid port, we should fail.\n+        self.assertRaises(\n+              ValueError,\n+              get,\n+              'http://google.com:banana')\n+\n     def test_useful_exception_for_invalid_scheme(self):\n \n         # If we pass a legitimate URL with a scheme not supported\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#d569a2d6bca64dad10928ac36b318e9e5bc16414", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 23 | Lines Deleted: 2 | Files Changed: 3 | Hunks: 6 | Methods Changed: 4 | Complexity Δ (Sum/Max): 8/5 | Churn Δ: 25 | Churn Cumulative: 6115 | Contributors (this commit): 59 | Commits (past 90d): 123 | Contributors (cumulative): 76 | DMM Complexity: 0.8125\n\nDIFF:\n@@ -61,6 +61,7 @@ class Request(object):\n         proxies=None,\n         hooks=None,\n         config=None,\n+        prefetch=False,\n         _poolmanager=None,\n         verify=None,\n         session=None,\n@@ -149,6 +150,9 @@ class Request(object):\n         #: SSL Certificate\n         self.cert = cert\n \n+        #: Prefetch response content\n+        self.prefetch = prefetch\n+\n         if headers:\n             headers = CaseInsensitiveDict(self.headers)\n         else:\n@@ -624,7 +628,7 @@ class Request(object):\n             self.__dict__.update(r.__dict__)\n \n             # If prefetch is True, mark content as consumed.\n-            if prefetch:\n+            if prefetch or self.prefetch:\n                 # Save the response.\n                 self.response.content\n \n\n@@ -52,7 +52,7 @@ class Session(object):\n \n     __attrs__ = [\n         'headers', 'cookies', 'auth', 'timeout', 'proxies', 'hooks',\n-        'params', 'config', 'verify', 'cert']\n+        'params', 'config', 'verify', 'cert', 'prefetch']\n \n \n     def __init__(self,\n@@ -179,6 +179,7 @@ class Session(object):\n             allow_redirects=allow_redirects,\n             proxies=proxies,\n             config=config,\n+            prefetch=prefetch,\n             verify=verify,\n             cert=cert,\n             _poolmanager=self.poolmanager\n\n@@ -708,6 +708,22 @@ class RequestsTestSuite(TestSetup, unittest.TestCase):\n         self.assertEqual(s.cookies, ds.cookies)\n         self.assertEqual(s.auth, ds.auth)\n \n+    def test_unpickled_session_requests(self):\n+        s = requests.session()\n+        r = get(httpbin('cookies', 'set', 'k', 'v'), allow_redirects=True, session=s)\n+        c = json.loads(r.text).get('cookies')\n+        assert 'k' in c\n+\n+        ds = pickle.loads(pickle.dumps(s))\n+        r = get(httpbin('cookies'), session=ds)\n+        c = json.loads(r.text).get('cookies')\n+        assert 'k' in c\n+\n+        ds1 = pickle.loads(pickle.dumps(requests.session()))\n+        ds2 = pickle.loads(pickle.dumps(requests.session(prefetch=True)))\n+        assert not ds1.prefetch\n+        assert ds2.prefetch\n+\n     def test_invalid_content(self):\n         # WARNING: if you're using a terrible DNS provider (comcast),\n         # this will fail.\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#99210995463497cf4ee9ec1bee79c5f2bff4e3f8", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 21 | Lines Deleted: 2 | Files Changed: 2 | Hunks: 4 | Methods Changed: 2 | Complexity Δ (Sum/Max): 4/3 | Churn Δ: 23 | Churn Cumulative: 6138 | Contributors (this commit): 61 | Commits (past 90d): 112 | Contributors (cumulative): 76 | DMM Complexity: 0.6666666666666666\n\nDIFF:\n@@ -27,7 +27,7 @@ from .exceptions import (\n     URLRequired, SSLError, MissingSchema, InvalidSchema, InvalidURL)\n from .utils import (\n     get_encoding_from_headers, stream_untransfer, guess_filename, requote_uri,\n-    dict_from_string, stream_decode_response_unicode, get_netrc_auth)\n+    dict_from_string, stream_decode_response_unicode, get_netrc_auth, CA_BUNDLE_PATH)\n from .compat import (\n     urlparse, urlunparse, urljoin, urlsplit, urlencode, str, bytes,\n     SimpleCookie, is_py2)\n@@ -537,10 +537,14 @@ class Request(object):\n             if not cert_loc and self.config.get('trust_env'):\n                 cert_loc = os.environ.get('REQUESTS_CA_BUNDLE')\n \n-            # Curl compatiblity.\n+            # Curl compatibility.\n             if not cert_loc and self.config.get('trust_env'):\n                 cert_loc = os.environ.get('CURL_CA_BUNDLE')\n \n+            # Use the operating system's bundle, if it can be found.\n+            if not cert_loc:\n+                cert_loc = CA_BUNDLE_PATH\n+\n             # Use the awesome certifi list.\n             if not cert_loc:\n                 cert_loc = __import__('certifi').where()\n\n@@ -24,6 +24,21 @@ from .compat import basestring, bytes, str\n \n NETRC_FILES = ('.netrc', '_netrc')\n \n+# common paths for the OS's CA certificate bundle\n+POSSIBLE_CA_BUNDLE_PATHS = [\n+        # Red Hat, CentOS, Fedora and friends:\n+        '/etc/pki/tls/certs/ca-bundle.crt',\n+        # Ubuntu and friends:\n+        '/etc/ssl/certs/ca-certificates.crt',\n+]\n+\n+def get_ca_bundle_path():\n+    \"\"\"Try to pick an available CA certificate bundle provided by the OS.\"\"\"\n+    for path in POSSIBLE_CA_BUNDLE_PATHS:\n+        if os.path.exists(path):\n+            return path\n+\n+CA_BUNDLE_PATH = get_ca_bundle_path()\n \n def dict_to_sequence(d):\n     \"\"\"Returns an internal sequence dictionary update.\"\"\"\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#e1528ce3be5a0798d509ae774ac7c3667b17ef29", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 1212 | Contributors (this commit): 20 | Commits (past 90d): 32 | Contributors (cumulative): 20 | DMM Complexity: None\n\nDIFF:\n@@ -30,6 +30,8 @@ POSSIBLE_CA_BUNDLE_PATHS = [\n         '/etc/pki/tls/certs/ca-bundle.crt',\n         # Ubuntu and friends:\n         '/etc/ssl/certs/ca-certificates.crt',\n+        # FreeBSD (provided by the ca_root_nss package):\n+        '/usr/local/share/certs/ca-root-nss.crt',\n ]\n \n def get_ca_bundle_path():\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#b4eb8663afce7d6c5e06df8625c5307a6126ecb5", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 18 | Lines Deleted: 9 | Files Changed: 2 | Hunks: 11 | Methods Changed: 3 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 27 | Churn Cumulative: 6167 | Contributors (this commit): 61 | Commits (past 90d): 92 | Contributors (cumulative): 76 | DMM Complexity: 1.0\n\nDIFF:\n@@ -27,7 +27,8 @@ from .exceptions import (\n     URLRequired, SSLError, MissingSchema, InvalidSchema, InvalidURL)\n from .utils import (\n     get_encoding_from_headers, stream_untransfer, guess_filename, requote_uri,\n-    dict_from_string, stream_decode_response_unicode, get_netrc_auth, CA_BUNDLE_PATH)\n+    dict_from_string, stream_decode_response_unicode, get_netrc_auth,\n+    DEFAULT_CA_BUNDLE_PATH)\n from .compat import (\n     urlparse, urlunparse, urljoin, urlsplit, urlencode, str, bytes,\n     SimpleCookie, is_py2)\n@@ -541,13 +542,11 @@ class Request(object):\n             if not cert_loc and self.config.get('trust_env'):\n                 cert_loc = os.environ.get('CURL_CA_BUNDLE')\n \n-            # Use the operating system's bundle, if it can be found.\n             if not cert_loc:\n-                cert_loc = CA_BUNDLE_PATH\n+                cert_loc = DEFAULT_CA_BUNDLE_PATH\n \n-            # Use the awesome certifi list.\n             if not cert_loc:\n-                cert_loc = __import__('certifi').where()\n+                raise Exception(\"Could not find a suitable SSL CA certificate bundle.\")\n \n             conn.cert_reqs = 'CERT_REQUIRED'\n             conn.ca_certs = cert_loc\n\n@@ -21,26 +21,36 @@ from .compat import parse_http_list as _parse_list_header\n from .compat import quote, cookielib, SimpleCookie, is_py2, urlparse\n from .compat import basestring, bytes, str\n \n+CERTIFI_BUNDLE_PATH = None\n+try:\n+    # see if requests's own CA certificate bundle is installed\n+    import certifi\n+    CERTIFI_BUNDLE_PATH = certifi.where()\n+except ImportError:\n+    pass\n \n NETRC_FILES = ('.netrc', '_netrc')\n \n # common paths for the OS's CA certificate bundle\n POSSIBLE_CA_BUNDLE_PATHS = [\n-        # Red Hat, CentOS, Fedora and friends:\n+        # Red Hat, CentOS, Fedora and friends (provided by the ca-certificates package):\n         '/etc/pki/tls/certs/ca-bundle.crt',\n-        # Ubuntu and friends:\n+        # Ubuntu, Debian, and friends (provided by the ca-certificates package):\n         '/etc/ssl/certs/ca-certificates.crt',\n         # FreeBSD (provided by the ca_root_nss package):\n         '/usr/local/share/certs/ca-root-nss.crt',\n ]\n \n-def get_ca_bundle_path():\n+def get_os_ca_bundle_path():\n     \"\"\"Try to pick an available CA certificate bundle provided by the OS.\"\"\"\n     for path in POSSIBLE_CA_BUNDLE_PATHS:\n         if os.path.exists(path):\n             return path\n+    return None\n \n-CA_BUNDLE_PATH = get_ca_bundle_path()\n+# if certifi is installed, use its CA bundle;\n+# otherwise, try and use the OS bundle\n+DEFAULT_CA_BUNDLE_PATH = CERTIFI_BUNDLE_PATH or get_os_ca_bundle_path()\n \n def dict_to_sequence(d):\n     \"\"\"Returns an internal sequence dictionary update.\"\"\"\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#3843a40f7cde8242c84533a5d6079f444cb3f5c8", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 58 | Lines Deleted: 58 | Files Changed: 1 | Hunks: 8 | Methods Changed: 2 | Complexity Δ (Sum/Max): -1/0 | Churn Δ: 116 | Churn Cumulative: 476 | Contributors (this commit): 10 | Commits (past 90d): 25 | Contributors (cumulative): 10 | DMM Complexity: 0.0\n\nDIFF:\n@@ -117,71 +117,71 @@ class RequestsTestSuite(TestSetup, unittest.TestCase):\n     #     self.assertRaises(UnicodeEncodeError, requests.get,\n     #                       url=httpbin('get'), headers=heads)\n \n-    def test_session_with_escaped_url(self):\n-        # Test a URL that contains percent-escaped characters\n-        # This URL should not be modified (double-escaped)\n-        # Tests:\n-        # - Quoted illegal characters (\"%20\" (' '), \"%3C\" ('<'), \"%3E\" ('>'))\n-        # - Quoted reserved characters (\"%25\" ('%'), \"%23\" ('#'), \"%2F\" ('/'))\n-        # - Quoted non-ASCII characters (\"%C3%98\", \"%C3%A5\")\n-        path_fully_escaped = '%3Ca%25b%23c%2Fd%3E/%C3%98%20%C3%A5'\n-        url = httpbin('get/' + path_fully_escaped)\n-        response = get(url)\n-        self.assertEqual(response.url, httpbin('get/' + path_fully_escaped))\n+    # def test_session_with_escaped_url(self):\n+    #     # Test a URL that contains percent-escaped characters\n+    #     # This URL should not be modified (double-escaped)\n+    #     # Tests:\n+    #     # - Quoted illegal characters (\"%20\" (' '), \"%3C\" ('<'), \"%3E\" ('>'))\n+    #     # - Quoted reserved characters (\"%25\" ('%'), \"%23\" ('#'), \"%2F\" ('/'))\n+    #     # - Quoted non-ASCII characters (\"%C3%98\", \"%C3%A5\")\n+    #     path_fully_escaped = '%3Ca%25b%23c%2Fd%3E/%C3%98%20%C3%A5'\n+    #     url = httpbin('get/' + path_fully_escaped)\n+    #     response = get(url)\n+    #     self.assertEqual(response.url, httpbin('get/' + path_fully_escaped))\n \n-        # Test that illegal characters in a path get properly percent-escaped\n-        # Tests:\n-        # - Bare illegal characters (space, '<')\n-        # - Bare non-ASCII characters ('\\u00d8')\n-        path = u'<a%25b%23c%2Fd%3E/\\u00d8 %C3%A5'\n-        url = httpbin('get/' + path)\n-        response = get(url)\n-        self.assertEqual(response.url, httpbin('get/' + path_fully_escaped))\n+    #     # Test that illegal characters in a path get properly percent-escaped\n+    #     # Tests:\n+    #     # - Bare illegal characters (space, '<')\n+    #     # - Bare non-ASCII characters ('\\u00d8')\n+    #     path = u'<a%25b%23c%2Fd%3E/\\u00d8 %C3%A5'\n+    #     url = httpbin('get/' + path)\n+    #     response = get(url)\n+    #     self.assertEqual(response.url, httpbin('get/' + path_fully_escaped))\n \n-        # Test that reserved characters in a path do not get percent-escaped\n-        # Tests:\n-        # - All reserved characters (RFC 3986), except '?', '#', '[' and ']',\n-        #   which are not allowed in the path, and ';' which delimits\n-        #   parameters.\n-        #   All such characters must be allowed bare in path, and must not be\n-        #   encoded.\n-        # - Special unreserved characters (RFC 3986), which should not be\n-        #   encoded (even though it wouldn't hurt).\n-        path_reserved = '!$&\\'()*+,/:=@-._~'\n-        url = httpbin('get/' + path_reserved)\n-        response = get(url)\n-        self.assertEqual(response.url, httpbin('get/' + path_reserved))\n+    #     # Test that reserved characters in a path do not get percent-escaped\n+    #     # Tests:\n+    #     # - All reserved characters (RFC 3986), except '?', '#', '[' and ']',\n+    #     #   which are not allowed in the path, and ';' which delimits\n+    #     #   parameters.\n+    #     #   All such characters must be allowed bare in path, and must not be\n+    #     #   encoded.\n+    #     # - Special unreserved characters (RFC 3986), which should not be\n+    #     #   encoded (even though it wouldn't hurt).\n+    #     path_reserved = '!$&\\'()*+,/:=@-._~'\n+    #     url = httpbin('get/' + path_reserved)\n+    #     response = get(url)\n+    #     self.assertEqual(response.url, httpbin('get/' + path_reserved))\n \n-        # Test that percent-encoded unreserved characters in a path get\n-        # normalised to their un-encoded forms.\n-        path_unreserved = 'ABCDwxyz1234-._~'\n-        path_unreserved_escaped = '%41%42%43%44%77%78%79%7A%31%32%33%34%2D%2E%5F%7E'\n-        url = httpbin('get/' + path_unreserved_escaped)\n-        response = get(url)\n-        self.assertEqual(response.url, httpbin('get/' + path_unreserved))\n+    #     # Test that percent-encoded unreserved characters in a path get\n+    #     # normalised to their un-encoded forms.\n+    #     path_unreserved = 'ABCDwxyz1234-._~'\n+    #     path_unreserved_escaped = '%41%42%43%44%77%78%79%7A%31%32%33%34%2D%2E%5F%7E'\n+    #     url = httpbin('get/' + path_unreserved_escaped)\n+    #     response = get(url)\n+    #     self.assertEqual(response.url, httpbin('get/' + path_unreserved))\n \n-        # Re-run all of the same tests on the query part of the URI\n-        query_fully_escaped = '%3Ca%25b%23c%2Fd%3E=%C3%98%20%C3%A5'\n-        url = httpbin('get/?' + query_fully_escaped)\n-        response = get(url)\n-        self.assertEqual(response.url, httpbin('get/?' + query_fully_escaped))\n+    #     # Re-run all of the same tests on the query part of the URI\n+    #     query_fully_escaped = '%3Ca%25b%23c%2Fd%3E=%C3%98%20%C3%A5'\n+    #     url = httpbin('get/?' + query_fully_escaped)\n+    #     response = get(url)\n+    #     self.assertEqual(response.url, httpbin('get/?' + query_fully_escaped))\n \n-        query = u'<a%25b%23c%2Fd%3E=\\u00d8 %C3%A5'\n-        url = httpbin('get/?' + query)\n-        response = get(url)\n-        self.assertEqual(response.url, httpbin('get/?' + query_fully_escaped))\n+    #     query = u'<a%25b%23c%2Fd%3E=\\u00d8 %C3%A5'\n+    #     url = httpbin('get/?' + query)\n+    #     response = get(url)\n+    #     self.assertEqual(response.url, httpbin('get/?' + query_fully_escaped))\n \n-        # The legal characters in query happens to be the same as in path\n-        query_reserved = '!$&\\'()*+,/:=@-._~'\n-        url = httpbin('get/?' + query_reserved)\n-        response = get(url)\n-        self.assertEqual(response.url, httpbin('get/?' + query_reserved))\n+    #     # The legal characters in query happens to be the same as in path\n+    #     query_reserved = '!$&\\'()*+,/:=@-._~'\n+    #     url = httpbin('get/?' + query_reserved)\n+    #     response = get(url)\n+    #     self.assertEqual(response.url, httpbin('get/?' + query_reserved))\n \n-        query_unreserved = 'ABCDwxyz=1234-._~'\n-        query_unreserved_escaped = '%41%42%43%44%77%78%79%7A=%31%32%33%34%2D%2E%5F%7E'\n-        url = httpbin('get/?' + query_unreserved_escaped)\n-        response = get(url)\n-        self.assertEqual(response.url, httpbin('get/?' + query_unreserved))\n+    #     query_unreserved = 'ABCDwxyz=1234-._~'\n+    #     query_unreserved_escaped = '%41%42%43%44%77%78%79%7A=%31%32%33%34%2D%2E%5F%7E'\n+    #     url = httpbin('get/?' + query_unreserved_escaped)\n+    #     response = get(url)\n+    #     self.assertEqual(response.url, httpbin('get/?' + query_unreserved))\n \n         # We should ignore invalid %encodings\n         request = requests.Request(\"http://0.0.0.0/get/%TEST\")\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#2621fe2bff136f62a158100010649c4f15f40154", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 0 | Lines Deleted: 7 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 7 | Churn Cumulative: 483 | Contributors (this commit): 10 | Commits (past 90d): 26 | Contributors (cumulative): 10 | DMM Complexity: 0.0\n\nDIFF:\n@@ -183,13 +183,6 @@ class RequestsTestSuite(TestSetup, unittest.TestCase):\n     #     response = get(url)\n     #     self.assertEqual(response.url, httpbin('get/?' + query_unreserved))\n \n-        # We should ignore invalid %encodings\n-        request = requests.Request(\"http://0.0.0.0/get/%TEST\")\n-        self.assertEqual(request.path_url, \"/get/%TEST\")\n-\n-        request = requests.Request(\"http://0.0.0.0/get/%%TEST%%\")\n-        self.assertEqual(request.path_url, \"/get/%%TEST%%\")\n-\n     def test_user_agent_transfers(self):\n         \"\"\"Issue XX\"\"\"\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#a7da521a62b248b999b856594ad68c82fac9f498", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 13 | Lines Deleted: 10 | Files Changed: 1 | Hunks: 3 | Methods Changed: 1 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 23 | Churn Cumulative: 1253 | Contributors (this commit): 20 | Commits (past 90d): 29 | Contributors (cumulative): 20 | DMM Complexity: 1.0\n\nDIFF:\n@@ -468,25 +468,28 @@ def stream_untransfer(gen, resp):\n \n \n # The unreserved URI characters (RFC 3986)\n-_unreserved_set = frozenset(\n+UNRESERVED_SET = frozenset(\n     \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\"\n     + \"0123456789-._~\")\n \n-_unreserved_hextochr = dict((c.encode('hex'), c) for c in _unreserved_set)\n \n def unquote_unreserved(uri):\n     \"\"\"Un-escape any percent-escape sequences in a URI that are unreserved\n     characters.\n     This leaves all reserved, illegal and non-ASCII bytes encoded.\n     \"\"\"\n-    res = uri.split('%')\n-    s = res[0]\n-    for item in res[1:]:\n-        try:\n-            s += _unreserved_hextochr[item[:2].lower()] + item[2:]\n-        except (KeyError, UnicodeDecodeError):\n-            s += '%' + item\n-    return s\n+    parts = uri.split('%')\n+    for i in range(1, len(parts)):\n+        h = parts[i][0:2]\n+        if len(h) == 2:\n+            c = chr(int(h, 16))\n+            if c in UNRESERVED_SET:\n+                parts[i] = c + parts[i][2:]\n+            else:\n+                parts[i] = '%' + parts[i]\n+        else:\n+            parts[i] = '%' + parts[i]\n+    return ''.join(parts)\n \n \n def requote_uri(uri):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#2159c802706fffaa4193f6c07d5695ebe20a9976", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 329 | Contributors (this commit): 3 | Commits (past 90d): 12 | Contributors (cumulative): 3 | DMM Complexity: None\n\nDIFF:\n@@ -15,8 +15,8 @@ requests\n \"\"\"\n \n __title__ = 'requests'\n-__version__ = '0.11.1'\n-__build__ = 0x001101\n+__version__ = '0.11.2'\n+__build__ = 0x001102\n __author__ = 'Kenneth Reitz'\n __license__ = 'ISC'\n __copyright__ = 'Copyright 2012 Kenneth Reitz'\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#742cbeaee15f9805da8473dac668e58ef80d7b7d", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 0 | Lines Deleted: 5 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): -1/0 | Churn Δ: 5 | Churn Cumulative: 488 | Contributors (this commit): 10 | Commits (past 90d): 27 | Contributors (cumulative): 10 | DMM Complexity: 0.0\n\nDIFF:\n@@ -837,10 +837,5 @@ class RequestsTestSuite(TestSetup, unittest.TestCase):\n         r = requests.get(httpbin('status', '404'))\n         r.text\n \n-    def test_no_content(self):\n-        r = requests.get(httpbin('status', \"0\"), config={\"safe_mode\":True})\n-        r.content\n-        r.content\n-\n if __name__ == '__main__':\n     unittest.main()\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#632d9893b0187205ff4ccae8e17b5bfc0e1359a8", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 837 | Contributors (this commit): 12 | Commits (past 90d): 14 | Contributors (cumulative): 12 | DMM Complexity: None\n\nDIFF:\n@@ -134,7 +134,7 @@ class Session(object):\n         :param headers: (optional) Dictionary of HTTP Headers to send with the :class:`Request`.\n         :param cookies: (optional) Dict or CookieJar object to send with the :class:`Request`.\n         :param files: (optional) Dictionary of 'filename': file-like-objects for multipart encoding upload.\n-        :param auth: (optional) Auth tuple to enable Basic/Digest/Custom HTTP Auth.\n+        :param auth: (optional) Auth tuple or callable to enable Basic/Digest/Custom HTTP Auth.\n         :param timeout: (optional) Float describing the timeout of the request.\n         :param allow_redirects: (optional) Boolean. Set to True by default.\n         :param proxies: (optional) Dictionary mapping protocol to the URL of the proxy.\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#3e60a9eb9c0321938cd9788e550532ba79c15592", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 4 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 6 | Churn Cumulative: 4943 | Contributors (this commit): 56 | Commits (past 90d): 81 | Contributors (cumulative): 56 | DMM Complexity: 0.0\n\nDIFF:\n@@ -8,6 +8,7 @@ This module contains the primary objects that power Requests.\n \"\"\"\n \n import os\n+import types\n from datetime import datetime\n \n from .hooks import dispatch_hook, HOOKS\n@@ -329,8 +330,9 @@ class Request(object):\n             result = []\n             for k, vs in list(data.items()):\n                 for v in isinstance(vs, list) and vs or [vs]:\n-                    result.append((k.encode('utf-8') if isinstance(k, str) else k,\n-                                   v.encode('utf-8') if isinstance(v, str) else v))\n+                    result.append(\n+                        (k.encode('utf-8') if isinstance(k, types.StringType) else k,\n+                         v.encode('utf-8') if isinstance(v, types.StringType) else v))\n             return result, urlencode(result, doseq=True)\n         else:\n             return data, data\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#0aedef07c3df33727b0d76a9e8323e07a9a76b6f", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 14 | Lines Deleted: 8 | Files Changed: 1 | Hunks: 4 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 22 | Churn Cumulative: 4965 | Contributors (this commit): 56 | Commits (past 90d): 66 | Contributors (cumulative): 56 | DMM Complexity: 0.0\n\nDIFF:\n@@ -312,9 +312,13 @@ class Request(object):\n     def _encode_params(data):\n         \"\"\"Encode parameters in a piece of data.\n \n-        If the data supplied is a dictionary, encodes each parameter in it, and\n-        returns a list of tuples containing the encoded parameters, and a urlencoded\n-        version of that.\n+        Will successfully encode parameters when passed as a dict or a list of\n+        2-tuples. Order is retained if data is a list of 2-tuples but abritrary\n+        if parameters are supplied as a dict.\n+\n+        If the data supplied contains parameters, encodes each parameter in it,\n+        and returns a list of tuples containing the encoded parameters, and a\n+        urlencoded version of that.\n \n         Otherwise, assumes the data is already encoded appropriately, and\n         returns it twice.\n@@ -322,13 +326,15 @@ class Request(object):\n \n         if isinstance(data, bytes):\n             return data, data\n+        elif hasattr(data, '__iter__'):\n+            try:\n+                dict(data)\n+            except ValueError:\n+                raise ValueError('Unable to encode lists with elements that are not 2-tuples.')\n \n-        if hasattr(data, '__iter__') and not isinstance(data, str):\n-            data = dict(data)\n-\n-        if hasattr(data, 'items'):\n+            params = list(data.items() if isinstance(data, dict) else data)\n             result = []\n-            for k, vs in list(data.items()):\n+            for k, vs in params:\n                 for v in isinstance(vs, list) and vs or [vs]:\n                     result.append(\n                         (k.encode('utf-8') if isinstance(k, types.StringType) else k,\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#9217a2523d7d4fafeebb259884276fc349a376b1", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 15 | Lines Deleted: 16 | Files Changed: 1 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 31 | Churn Cumulative: 4996 | Contributors (this commit): 56 | Commits (past 90d): 67 | Contributors (cumulative): 56 | DMM Complexity: None\n\nDIFF:\n@@ -482,22 +482,6 @@ class Request(object):\n         body = None\n         content_type = None\n \n-        # Multi-part file uploads.\n-        if self.files:\n-            (body, content_type) = self._enc_files\n-        else:\n-            if self.data:\n-\n-                body = self._enc_data\n-                if isinstance(self.data, str):\n-                    content_type = None\n-                else:\n-                    content_type = 'application/x-www-form-urlencoded'\n-\n-        # Add content-type if it wasn't explicitly provided.\n-        if (content_type) and (not 'content-type' in self.headers):\n-            self.headers['Content-Type'] = content_type\n-\n         # Use .netrc auth if none was provided.\n         if not self.auth and self.config.get('trust_env'):\n             self.auth = get_netrc_auth(url)\n@@ -513,6 +497,21 @@ class Request(object):\n             # Update self to reflect the auth changes.\n             self.__dict__.update(r.__dict__)\n \n+        # Multi-part file uploads.\n+        if self.files:\n+            (body, content_type) = self._enc_files\n+        else:\n+            if self.data:\n+                body_params, body = self._encode_params(self.data)\n+                if isinstance(body_params, list) and isinstance(body, str):\n+                    content_type = 'application/x-www-form-urlencoded'\n+                else:\n+                    content_type = None\n+\n+        # Add content-type if it wasn't explicitly provided.\n+        if (content_type) and (not 'content-type' in self.headers):\n+            self.headers['Content-Type'] = content_type\n+\n         _p = urlparse(url)\n         proxy = self.proxies.get(_p.scheme)\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#7b819852b93300beaa38a3ec264e742889d55193", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 3 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 3 | Methods Changed: 1 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 5 | Churn Cumulative: 386 | Contributors (this commit): 5 | Commits (past 90d): 6 | Contributors (cumulative): 5 | DMM Complexity: 0.0\n\nDIFF:\n@@ -46,8 +46,9 @@ class OAuth1(AuthBase):\n             signature_type, rsa_key, verifier)\n \n     def __call__(self, r):\n+        contenttype = r.headers.get('Content-Type')\n         if (r.files or\n-            r.headers['Content-Type'] != 'application/x-www-form-urlencoded'):\n+            (contenttype and contenttype != 'application/x-www-form-urlencoded')):\n \n             # XXX TODO can we use body signatures with a non formencoded body?\n             if self.client.signature_type == SIGNATURE_TYPE_BODY:\n@@ -59,7 +60,7 @@ class OAuth1(AuthBase):\n             alter_body = False  # we shouldn't touch the body\n         else:\n             body = r.data  # OAuthLib is cool with both strings and dicts.\n-            if isinstance(str, body):\n+            if isinstance(body, str):\n                 # XXX gross hack. We must pass unicode...\n                 body = unicode(body, 'utf-8')\n             alter_body = True\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#906fcd732889d9c4c0672cd0f98026b9e1b74273", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 3 | Churn Cumulative: 389 | Contributors (this commit): 5 | Commits (past 90d): 7 | Contributors (cumulative): 5 | DMM Complexity: None\n\nDIFF:\n@@ -65,7 +65,8 @@ class OAuth1(AuthBase):\n                 body = unicode(body, 'utf-8')\n             alter_body = True\n \n-        full_url, new_body, headers = self.client.sign(r.url, unicode(r.method), body, r.headers)\n+        full_url, headers, new_body = self.client.sign(r.url, unicode(r.method), body, r.headers)\n+\n         r.url = full_url\n         if alter_body:\n             r.data = new_body\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#65bf3ab201d9e58062f1456036d5989bcb2e43d5", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 3 | Files Changed: 1 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 5 | Churn Cumulative: 5001 | Contributors (this commit): 56 | Commits (past 90d): 57 | Contributors (cumulative): 56 | DMM Complexity: None\n\nDIFF:\n@@ -8,7 +8,6 @@ This module contains the primary objects that power Requests.\n \"\"\"\n \n import os\n-import types\n from datetime import datetime\n \n from .hooks import dispatch_hook, HOOKS\n@@ -337,8 +336,8 @@ class Request(object):\n             for k, vs in params:\n                 for v in isinstance(vs, list) and vs or [vs]:\n                     result.append(\n-                        (k.encode('utf-8') if isinstance(k, types.StringType) else k,\n-                         v.encode('utf-8') if isinstance(v, types.StringType) else v))\n+                        (k.encode('utf-8') if isinstance(k, str) else k,\n+                         v.encode('utf-8') if isinstance(v, str) else v))\n             return result, urlencode(result, doseq=True)\n         else:\n             return data, data\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#2fc9f6bbc923d2d24623ea740cdbccf90db2a0cb", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 10 | Lines Deleted: 27 | Files Changed: 1 | Hunks: 4 | Methods Changed: 1 | Complexity Δ (Sum/Max): -4/0 | Churn Δ: 37 | Churn Cumulative: 426 | Contributors (this commit): 5 | Commits (past 90d): 8 | Contributors (cumulative): 5 | DMM Complexity: 1.0\n\nDIFF:\n@@ -11,12 +11,13 @@ import time\n import hashlib\n \n from base64 import b64encode\n-from oauthlib.oauth1.rfc5849 import (Client, SIGNATURE_HMAC, SIGNATURE_RSA,\n-    SIGNATURE_PLAINTEXT, SIGNATURE_TYPE_AUTH_HEADER, SIGNATURE_TYPE_QUERY,\n-    SIGNATURE_TYPE_BODY)\n+from oauthlib.oauth1.rfc5849 import (Client,\n+                                     SIGNATURE_HMAC, SIGNATURE_TYPE_AUTH_HEADER)\n+from oauthlib.common import extract_params\n from .compat import urlparse, str\n from .utils import randombytes, parse_dict_header\n \n+CONTENT_TYPE_FORM_URLENCODED = 'application/x-www-form-urlencoded'\n \n def _basic_auth_str(username, password):\n     \"\"\"Returns a Basic Auth string.\"\"\"\n@@ -46,31 +47,13 @@ class OAuth1(AuthBase):\n             signature_type, rsa_key, verifier)\n \n     def __call__(self, r):\n-        contenttype = r.headers.get('Content-Type')\n-        if (r.files or\n-            (contenttype and contenttype != 'application/x-www-form-urlencoded')):\n+        contenttype = r.headers.get('Content-Type', None)\n+        decoded_body = extract_params(r.data)\n+        if contenttype == None and decoded_body != None:\n+            r.headers['Content-Type'] = 'application/x-www-form-urlencoded'\n \n-            # XXX TODO can we use body signatures with a non formencoded body?\n-            if self.client.signature_type == SIGNATURE_TYPE_BODY:\n-                raise ValueError('Body signatures may not be used with non-form-urlencoded content')\n-\n-            # Spec only specifies signing of application/x-www-form-urlencoded\n-            # params. Files don't get signed either.\n-            body = u''\n-            alter_body = False  # we shouldn't touch the body\n-        else:\n-            body = r.data  # OAuthLib is cool with both strings and dicts.\n-            if isinstance(body, str):\n-                # XXX gross hack. We must pass unicode...\n-                body = unicode(body, 'utf-8')\n-            alter_body = True\n-\n-        full_url, headers, new_body = self.client.sign(r.url, unicode(r.method), body, r.headers)\n-\n-        r.url = full_url\n-        if alter_body:\n-            r.data = new_body\n-        r.headers = headers\n+        r.url, r.headers, r.data = self.client.sign(\n+            unicode(r.url), unicode(r.method), r.data, r.headers)\n         return r\n \n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#be04142723c7d67355a748ae944d01194c299909", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 16 | Lines Deleted: 15 | Files Changed: 1 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): -1/0 | Churn Δ: 31 | Churn Cumulative: 5032 | Contributors (this commit): 56 | Commits (past 90d): 58 | Contributors (cumulative): 56 | DMM Complexity: None\n\nDIFF:\n@@ -481,6 +481,22 @@ class Request(object):\n         body = None\n         content_type = None\n \n+        # Multi-part file uploads.\n+        if self.files:\n+            (body, content_type) = self._enc_files\n+        else:\n+            if self.data:\n+\n+                body = self._enc_data\n+                if isinstance(self.data, str):\n+                    content_type = None\n+                else:\n+                    content_type = 'application/x-www-form-urlencoded'\n+\n+        # Add content-type if it wasn't explicitly provided.\n+        if (content_type) and (not 'content-type' in self.headers):\n+            self.headers['Content-Type'] = content_type\n+\n         # Use .netrc auth if none was provided.\n         if not self.auth and self.config.get('trust_env'):\n             self.auth = get_netrc_auth(url)\n@@ -496,21 +512,6 @@ class Request(object):\n             # Update self to reflect the auth changes.\n             self.__dict__.update(r.__dict__)\n \n-        # Multi-part file uploads.\n-        if self.files:\n-            (body, content_type) = self._enc_files\n-        else:\n-            if self.data:\n-                body_params, body = self._encode_params(self.data)\n-                if isinstance(body_params, list) and isinstance(body, str):\n-                    content_type = 'application/x-www-form-urlencoded'\n-                else:\n-                    content_type = None\n-\n-        # Add content-type if it wasn't explicitly provided.\n-        if (content_type) and (not 'content-type' in self.headers):\n-            self.headers['Content-Type'] = content_type\n-\n         _p = urlparse(url)\n         proxy = self.proxies.get(_p.scheme)\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
