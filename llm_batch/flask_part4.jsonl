{"custom_id": "flask#bf52a17902cdbc300ee91ec1b2e8d2b7890ba35c", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 0 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 1 | Churn Cumulative: 73 | Contributors (this commit): 1 | Commits (past 90d): 3 | Contributors (cumulative): 1 | DMM Complexity: 0.0\n\nDIFF:\n@@ -57,7 +57,6 @@ class FlaskrTestCase(unittest.TestCase):\n             text='<strong>HTML</strong> allowed here'\n         ), follow_redirects=True)\n         assert 'No entries here so far' not in rv.data\n-        self.login(flaskr.USERNAME, flaskr.PASSWORD)\n         assert '&lt;Hello&gt' in rv.data\n         assert '<strong>HTML</strong> allowed here' in rv.data\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#0770f5c6375e3e45fa3ac918217df5d885176173", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 3 | Files Changed: 1 | Hunks: 2 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 5 | Churn Cumulative: 902 | Contributors (this commit): 2 | Commits (past 90d): 21 | Contributors (cumulative): 2 | DMM Complexity: None\n\nDIFF:\n@@ -15,10 +15,9 @@ import sys\n \n from jinja2 import Environment, PackageLoader, FileSystemLoader\n from werkzeug import Request as RequestBase, Response as ResponseBase, \\\n-     LocalStack, LocalProxy, create_environ, cached_property, \\\n-     SharedDataMiddleware\n+     LocalStack, LocalProxy, create_environ, SharedDataMiddleware\n from werkzeug.routing import Map, Rule\n-from werkzeug.exceptions import HTTPException, InternalServerError\n+from werkzeug.exceptions import HTTPException\n from werkzeug.contrib.securecookie import SecureCookie\n \n # utilities we import from Werkzeug and Jinja2 that are unused\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#73a47a0db1a181bb305684115d3dacded0c5a58b", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 3 | Files Changed: 1 | Hunks: 3 | Methods Changed: 2 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 308 | Contributors (this commit): 2 | Commits (past 90d): 10 | Contributors (cumulative): 2 | DMM Complexity: 0.0\n\nDIFF:\n@@ -9,7 +9,6 @@\n     :license: BSD, see LICENSE for more details.\n \"\"\"\n from __future__ import with_statement\n-import re\n import time\n import sqlite3\n from hashlib import md5\n@@ -96,7 +95,6 @@ def timeline():\n     \"\"\"\n     if not g.user:\n         return redirect(url_for('public_timeline'))\n-    offset = request.args.get('offset', type=int)\n     return render_template('timeline.html', messages=query_db('''\n         select message.*, user.* from message, user\n         where message.author_id = user.user_id and (\n@@ -123,7 +121,7 @@ def user_timeline(username):\n                             [username], one=True)\n     if profile_user is None:\n         abort(404)\n-    followd = False\n+    followed = False\n     if g.user:\n         followed = query_db('''select 1 from follower where\n             follower.who_id = ? and follower.whom_id = ?''',\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#ce18d4575dd8468878668d777d83448eeae4fd0d", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 3 | Churn Cumulative: 265 | Contributors (this commit): 2 | Commits (past 90d): 5 | Contributors (cumulative): 2 | DMM Complexity: None\n\nDIFF:\n@@ -242,5 +242,6 @@ latex_documents = [\n intersphinx_mapping = {\n     'http://docs.python.org/dev': None,\n     'http://werkzeug.pocoo.org/documentation/dev/': None,\n-    'http://www.sqlalchemy.org/docs/': None\n+    'http://www.sqlalchemy.org/docs/': None,\n+    'http://wtforms.simplecodes.com/docs/0.5/': None\n }\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#6e2be6a0b3aba4ab49cf3ed1a10ac13c6b771aba", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 115 | Lines Deleted: 4 | Files Changed: 3 | Hunks: 10 | Methods Changed: 11 | Complexity Δ (Sum/Max): 14/6 | Churn Δ: 119 | Churn Cumulative: 1233 | Contributors (this commit): 2 | Commits (past 90d): 29 | Contributors (cumulative): 4 | DMM Complexity: 1.0\n\nDIFF:\n@@ -0,0 +1,29 @@\n+# -*- coding: utf-8 -*-\n+\"\"\"\n+    jQuery Example\n+    ~~~~~~~~~~~~~~\n+\n+    A simple application that shows how Flask and jQuery get along.\n+\n+    :copyright: (c) 2010 by Armin Ronacher.\n+    :license: BSD, see LICENSE for more details.\n+\"\"\"\n+from flask import Flask, jsonify, render_template, request\n+app = Flask(__name__)\n+\n+\n+@app.route('/_add_numbers')\n+def add_numbers():\n+    \"\"\"Add two numbers server side, ridiculous but well...\"\"\"\n+    a = request.args.get('a', 0, type=int)\n+    b = request.args.get('b', 0, type=int)\n+    return jsonify(result=a + b)\n+\n+\n+@app.route('/')\n+def index():\n+    return render_template('index.html')\n+\n+\n+if __name__ == '__main__':\n+    app.run()\n\n@@ -15,11 +15,23 @@ import sys\n \n from jinja2 import Environment, PackageLoader, FileSystemLoader\n from werkzeug import Request as RequestBase, Response as ResponseBase, \\\n-     LocalStack, LocalProxy, create_environ, SharedDataMiddleware\n+     LocalStack, LocalProxy, create_environ, SharedDataMiddleware, \\\n+     cached_property\n from werkzeug.routing import Map, Rule\n from werkzeug.exceptions import HTTPException\n from werkzeug.contrib.securecookie import SecureCookie\n \n+# try to load the best simplejson implementation available.  If JSON\n+# is not installed, we add a failing class.\n+json_available = True\n+try:\n+    import simplejson as json\n+except ImportError:\n+    try:\n+        import json\n+    except ImportError:\n+        json_available = False\n+\n # utilities we import from Werkzeug and Jinja2 that are unused\n # in the module but are exported as public interface.\n from werkzeug import abort, redirect\n@@ -49,6 +61,16 @@ class Request(RequestBase):\n         self.endpoint = None\n         self.view_args = None\n \n+    @cached_property\n+    def json(self):\n+        \"\"\"If the mimetype is `application/json` this will contain the\n+        parsed JSON data.\n+        \"\"\"\n+        if not json_available:\n+            raise AttributeError('simplejson not available')\n+        if self.mimetype == 'application/json':\n+            return json.loads(self.data)\n+\n \n class Response(ResponseBase):\n     \"\"\"The response object that is used by default in flask.  Works like the\n@@ -81,7 +103,6 @@ class _NullSession(SecureCookie):\n     del _fail\n \n \n-\n class _RequestContext(object):\n     \"\"\"The request context contains all request relevant information.  It is\n     created at the beginning of the request and pushed to the\n@@ -133,6 +154,8 @@ def get_template_attribute(template_name, attribute):\n         hello = get_template_attribute('_foo.html', 'hello')\n         return hello('World')\n \n+    .. versionadded:: 0.2\n+\n     :param template_name: the name of the template\n     :param attribute: the name of the variable of macro to acccess\n     \"\"\"\n@@ -162,6 +185,35 @@ def get_flashed_messages():\n     return flashes\n \n \n+def jsonify(*args, **kwargs):\n+    \"\"\"Creates a :class:`~flask.Response` with the JSON representation of\n+    the given arguments with an `application/json` mimetype.  The arguments\n+    to this function are the same as to the :class:`dict` constructor.\n+\n+    Example usage::\n+\n+        @app.route('/_get_current_user')\n+        def get_current_user():\n+            return jsonify(username=g.user.username,\n+                           email=g.user.email,\n+                           id=g.user.id)\n+\n+    This will send a JSON response like this to the browser::\n+\n+        {\n+            \"username\": \"admin\",\n+            \"email\": \"admin@localhost\",\n+            \"id\": 42\n+        }\n+\n+    This requires Python 2.6 or an installed version of simplejson.\n+\n+    .. versionadded:: 0.2\n+    \"\"\"\n+    return current_app.response_class(json.dumps(dict(*args, **kwargs),\n+        indent=None if request.is_xhr else 2), mimetype='application/json')\n+\n+\n def render_template(template_name, **context):\n     \"\"\"Renders a template from the template folder with the given\n     context.\n@@ -326,6 +378,8 @@ class Flask(object):\n             url_for=url_for,\n             get_flashed_messages=get_flashed_messages\n         )\n+        if json_available:\n+            self.jinja_env.filters['tojson'] = json.dumps\n \n     def create_jinja_loader(self):\n         \"\"\"Creates the Jinja loader.  By default just a package loader for\n\n@@ -32,7 +32,7 @@ class ContextTestCase(unittest.TestCase):\n             assert meh() == 'http://localhost/meh'\n \n \n-class BasicFunctionality(unittest.TestCase):\n+class BasicFunctionalityTestCase(unittest.TestCase):\n \n     def test_request_dispatching(self):\n         app = flask.Flask(__name__)\n@@ -167,7 +167,35 @@ class BasicFunctionality(unittest.TestCase):\n                 == '/static/index.html'\n \n \n-class Templating(unittest.TestCase):\n+class JSONTestCase(unittest.TestCase):\n+\n+    def test_jsonify(self):\n+        d = dict(a=23, b=42, c=[1, 2, 3])\n+        app = flask.Flask(__name__)\n+        @app.route('/kw')\n+        def return_kwargs():\n+            return flask.jsonify(**d)\n+        @app.route('/dict')\n+        def return_dict():\n+            return flask.jsonify(d)\n+        c = app.test_client()\n+        for url in '/kw', '/dict':\n+            rv = c.get(url)\n+            assert rv.mimetype == 'application/json'\n+            assert flask.json.loads(rv.data) == d\n+\n+    def test_json_attr(self):\n+        app = flask.Flask(__name__)\n+        @app.route('/add', methods=['POST'])\n+        def add():\n+            return unicode(flask.request.json['a'] + flask.request.json['b'])\n+        c = app.test_client()\n+        rv = c.post('/add', data=flask.json.dumps({'a': 1, 'b': 2}),\n+                            content_type='application/json')\n+        assert rv.data == '3'\n+\n+\n+class TemplatingTestCase(unittest.TestCase):\n \n     def test_context_processing(self):\n         app = flask.Flask(__name__)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#ade490514dd6d83adc7610f69f9c4cd68df47110", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 12 | Lines Deleted: 1 | Files Changed: 2 | Hunks: 3 | Methods Changed: 3 | Complexity Δ (Sum/Max): 2/1 | Churn Δ: 13 | Churn Cumulative: 1217 | Contributors (this commit): 2 | Commits (past 90d): 30 | Contributors (cumulative): 3 | DMM Complexity: 1.0\n\nDIFF:\n@@ -259,6 +259,11 @@ def _get_package_path(name):\n         return os.getcwd()\n \n \n+def _tojson_filter(string, *args, **kwargs):\n+    \"\"\"Calls dumps for the template engine, escaping Slashes properly.\"\"\"\n+    return json.dumps(string, *args, **kwargs).replace('/', '\\\\/')\n+\n+\n class Flask(object):\n     \"\"\"The flask object implements a WSGI application and acts as the central\n     object.  It is passed the name of the module or package of the\n@@ -379,7 +384,7 @@ class Flask(object):\n             get_flashed_messages=get_flashed_messages\n         )\n         if json_available:\n-            self.jinja_env.filters['tojson'] = json.dumps\n+            self.jinja_env.filters['tojson'] = _tojson_filter\n \n     def create_jinja_loader(self):\n         \"\"\"Creates the Jinja loader.  By default just a package loader for\n\n@@ -194,6 +194,12 @@ class JSONTestCase(unittest.TestCase):\n                             content_type='application/json')\n         assert rv.data == '3'\n \n+    def test_template_escaping(self):\n+        app = flask.Flask(__name__)\n+        with app.test_request_context():\n+            rv = flask.render_template_string('{{ \"</script>\"|tojson|safe }}')\n+            assert rv == '\"<\\\\/script>\"'\n+\n \n class TemplatingTestCase(unittest.TestCase):\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#3088a9371e065808fd0091741f62bc242bcab1f9", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 33 | Lines Deleted: 3 | Files Changed: 2 | Hunks: 6 | Methods Changed: 5 | Complexity Δ (Sum/Max): 4/3 | Churn Δ: 36 | Churn Cumulative: 1253 | Contributors (this commit): 3 | Commits (past 90d): 32 | Contributors (cumulative): 5 | DMM Complexity: 1.0\n\nDIFF:\n@@ -481,9 +481,9 @@ class Flask(object):\n         \"\"\"\n         session.save_cookie(response, self.session_cookie_name)\n \n-    def add_url_rule(self, rule, endpoint, **options):\n+    def add_url_rule(self, rule, endpoint, view_func=None, **options):\n         \"\"\"Connects a URL rule.  Works exactly like the :meth:`route`\n-        decorator but does not register the view function for the endpoint.\n+        decorator. If a view_func is provided it will be registered with the endpoint.\n \n         Basically this example::\n \n@@ -495,19 +495,25 @@ class Flask(object):\n \n             def index():\n                 pass\n-            app.add_url_rule('index', '/')\n+            app.add_url_rule('/', 'index', index)\n+            \n+         If the view_func is not provided you will need to connect the endpoint to a \n+         view function like so:\n             app.view_functions['index'] = index\n \n         :param rule: the URL rule as string\n         :param endpoint: the endpoint for the registered URL rule.  Flask\n                          itself assumes the name of the view function as\n                          endpoint\n+        :param view_func: the function to call when servicing a request to the provided endpoint\n         :param options: the options to be forwarded to the underlying\n                         :class:`~werkzeug.routing.Rule` object\n         \"\"\"\n         options['endpoint'] = endpoint\n         options.setdefault('methods', ('GET',))\n         self.url_map.add(Rule(rule, **options))\n+        if view_func is not None:\n+            self.view_functions[endpoint] = view_func\n \n     def route(self, rule, **options):\n         \"\"\"A decorator that is used to register a view function for a\n\n@@ -57,6 +57,30 @@ class BasicFunctionalityTestCase(unittest.TestCase):\n         assert rv.status_code == 405\n         assert sorted(rv.allow) == ['GET', 'HEAD', 'POST']\n \n+    def test_url_mapping(self):\n+        app = flask.Flask(__name__)\n+        def index():\n+            return flask.request.method\n+        def more():\n+            return flask.request.method\n+        \n+        app.add_url_rule('/', 'index', index)\n+        app.add_url_rule('/more', 'more', more, methods=['GET', 'POST'])\n+\n+        c = app.test_client()\n+        assert c.get('/').data == 'GET'\n+        rv = c.post('/')\n+        assert rv.status_code == 405\n+        assert sorted(rv.allow) == ['GET', 'HEAD']\n+        rv = c.head('/')\n+        assert rv.status_code == 200\n+        assert not rv.data # head truncates\n+        assert c.post('/more').data == 'POST'\n+        assert c.get('/more').data == 'GET'\n+        rv = c.delete('/more')\n+        assert rv.status_code == 405\n+        assert sorted(rv.allow) == ['GET', 'HEAD', 'POST']\n+\n     def test_session(self):\n         app = flask.Flask(__name__)\n         app.secret_key = 'testkey'\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#5acc491c94262912baa30a4cffc780a46b7faf56", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 3 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 2 | Methods Changed: 3 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 5 | Churn Cumulative: 984 | Contributors (this commit): 4 | Commits (past 90d): 25 | Contributors (cumulative): 4 | DMM Complexity: 0.0\n\nDIFF:\n@@ -508,6 +508,8 @@ class Flask(object):\n         :param view_func: the function to call when servicing a request to the provided endpoint\n         :param options: the options to be forwarded to the underlying\n                         :class:`~werkzeug.routing.Rule` object\n+\n+        .. versionadded:: 0.2\n         \"\"\"\n         options['endpoint'] = endpoint\n         options.setdefault('methods', ('GET',))\n@@ -581,8 +583,7 @@ class Flask(object):\n                         :class:`~werkzeug.routing.Rule` object.\n         \"\"\"\n         def decorator(f):\n-            self.add_url_rule(rule, f.__name__, **options)\n-            self.view_functions[f.__name__] = f\n+            self.add_url_rule(rule, f.__name__, f, **options)\n             return f\n         return decorator\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#95750b3287bfa21fbb706f10a3a9fbcef01c089e", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 34 | Lines Deleted: 4 | Files Changed: 2 | Hunks: 5 | Methods Changed: 5 | Complexity Δ (Sum/Max): 5/5 | Churn Δ: 38 | Churn Cumulative: 1296 | Contributors (this commit): 4 | Commits (past 90d): 35 | Contributors (cumulative): 6 | DMM Complexity: 1.0\n\nDIFF:\n@@ -16,7 +16,7 @@ import sys\n from jinja2 import Environment, PackageLoader, FileSystemLoader\n from werkzeug import Request as RequestBase, Response as ResponseBase, \\\n      LocalStack, LocalProxy, create_environ, SharedDataMiddleware, \\\n-     cached_property\n+     ImmutableDict, cached_property\n from werkzeug.routing import Map, Rule\n from werkzeug.exceptions import HTTPException\n from werkzeug.contrib.securecookie import SecureCookie\n@@ -306,7 +306,7 @@ class Flask(object):\n     session_cookie_name = 'session'\n \n     #: options that are passed directly to the Jinja2 environment\n-    jinja_options = dict(\n+    jinja_options = ImmutableDict(\n         autoescape=True,\n         extensions=['jinja2.ext.autoescape', 'jinja2.ext.with_']\n     )\n@@ -361,11 +361,26 @@ class Flask(object):\n         #: decorator.\n         self.template_context_processors = [_default_template_ctx_processor]\n \n+        #: the :class:`~werkzeug.routing.Map` for this instance.  You can use\n+        #: this to change the routing converters after the class was created\n+        #: but before any routes are connected.  Example::\n+        #:\n+        #:    from werkzeug import BaseConverter\n+        #:\n+        #:    class ListConverter(BaseConverter):\n+        #:        def to_python(self, value):\n+        #:            return value.split(',')\n+        #:        def to_url(self, values):\n+        #:            return ','.join(BaseConverter.to_url(value)\n+        #:                            for value in values)\n+        #:\n+        #:    app = Flask(__name__)\n+        #:    app.url_map.converters['list'] = ListConverter\n         self.url_map = Map()\n \n         if self.static_path is not None:\n-            self.url_map.add(Rule(self.static_path + '/<filename>',\n-                                  build_only=True, endpoint='static'))\n+            self.add_url_rule(self.static_path + '/<filename>',\n+                              build_only=True, endpoint='static')\n             if pkg_resources is not None:\n                 target = (self.package_name, 'static')\n             else:\n\n@@ -181,6 +181,21 @@ class BasicFunctionalityTestCase(unittest.TestCase):\n         with app.test_request_context():\n             assert flask.url_for('hello', name='test x') == '/hello/test%20x'\n \n+    def test_custom_converters(self):\n+        from werkzeug.routing import BaseConverter\n+        class ListConverter(BaseConverter):\n+            def to_python(self, value):\n+                return value.split(',')\n+            def to_url(self, value):\n+                return ','.join(super(ListConverter, self).to_url(x) for x in value)\n+        app = flask.Flask(__name__)\n+        app.url_map.converters['list'] = ListConverter\n+        @app.route('/<list:args>')\n+        def index(args):\n+            return '|'.join(args)\n+        c = app.test_client()\n+        assert c.get('/1,2,3').data == '1|2|3'\n+\n     def test_static_files(self):\n         app = flask.Flask(__name__)\n         rv = app.test_client().get('/static/index.html')\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#06ec917ddedc618944670b39ccd5f4cb862882b2", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 1009 | Contributors (this commit): 4 | Commits (past 90d): 27 | Contributors (cumulative): 4 | DMM Complexity: None\n\nDIFF:\n@@ -261,7 +261,7 @@ def _get_package_path(name):\n \n def _tojson_filter(string, *args, **kwargs):\n     \"\"\"Calls dumps for the template engine, escaping Slashes properly.\"\"\"\n-    return json.dumps(string, *args, **kwargs).replace('/', '\\\\/')\n+    return json.dumps(string, *args, **kwargs).replace('</', '<\\\\/')\n \n \n class Flask(object):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#9f0b2429d638e54cb534b555c393d0770dfc1a8f", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 22 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 4 | Methods Changed: 1 | Complexity Δ (Sum/Max): 2/2 | Churn Δ: 23 | Churn Cumulative: 312 | Contributors (this commit): 2 | Commits (past 90d): 10 | Contributors (cumulative): 2 | DMM Complexity: 1.0\n\nDIFF:\n@@ -10,11 +10,18 @@\n     :license: BSD, see LICENSE for more details.\n \"\"\"\n from __future__ import with_statement\n+import os\n+import sys\n import flask\n import unittest\n import tempfile\n \n \n+example_path = os.path.join(os.path.dirname(__file__), '..', 'examples')\n+sys.path.append(os.path.join(example_path, 'flaskr'))\n+sys.path.append(os.path.join(example_path, 'minitwit'))\n+\n+\n class ContextTestCase(unittest.TestCase):\n \n     def test_context_binding(self):\n@@ -277,5 +284,19 @@ class TemplatingTestCase(unittest.TestCase):\n             assert macro('World') == 'Hello World!'\n \n \n+def suite():\n+    from minitwit_tests import MiniTwitTestCase\n+    from flaskr_tests import FlaskrTestCase\n+    suite = unittest.TestSuite()\n+    suite.addTest(unittest.makeSuite(ContextTestCase))\n+    suite.addTest(unittest.makeSuite(BasicFunctionalityTestCase))\n+    suite.addTest(unittest.makeSuite(TemplatingTestCase))\n+    if flask.json_available:\n+        suite.addTest(unittest.makeSuite(JSONTestCase))\n+    suite.addTest(unittest.makeSuite(MiniTwitTestCase))\n+    suite.addTest(unittest.makeSuite(FlaskrTestCase))\n+    return suite\n+\n+\n if __name__ == '__main__':\n-    unittest.main()\n+    unittest.main(defaultTest='suite')\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#715f64d2afef0e5b9800f0e0fb0eb9c892e1573a", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 22 | Lines Deleted: 9 | Files Changed: 1 | Hunks: 10 | Methods Changed: 6 | Complexity Δ (Sum/Max): 3/3 | Churn Δ: 31 | Churn Cumulative: 1040 | Contributors (this commit): 4 | Commits (past 90d): 28 | Contributors (cumulative): 4 | DMM Complexity: 1.0\n\nDIFF:\n@@ -66,8 +66,8 @@ class Request(RequestBase):\n         \"\"\"If the mimetype is `application/json` this will contain the\n         parsed JSON data.\n         \"\"\"\n-        if not json_available:\n-            raise AttributeError('simplejson not available')\n+        if __debug__:\n+            _assert_have_json()\n         if self.mimetype == 'application/json':\n             return json.loads(self.data)\n \n@@ -210,6 +210,8 @@ def jsonify(*args, **kwargs):\n \n     .. versionadded:: 0.2\n     \"\"\"\n+    if __debug__:\n+        _assert_have_json()\n     return current_app.response_class(json.dumps(dict(*args, **kwargs),\n         indent=None if request.is_xhr else 2), mimetype='application/json')\n \n@@ -251,6 +253,12 @@ def _default_template_ctx_processor():\n     )\n \n \n+def _assert_have_json():\n+    \"\"\"Helper function that fails if JSON is unavailable\"\"\"\n+    if not json_available:\n+        raise RuntimeError('simplejson not installed')\n+\n+\n def _get_package_path(name):\n     \"\"\"Returns the path to a package or cwd if that cannot be found.\"\"\"\n     try:\n@@ -261,6 +269,8 @@ def _get_package_path(name):\n \n def _tojson_filter(string, *args, **kwargs):\n     \"\"\"Calls dumps for the template engine, escaping Slashes properly.\"\"\"\n+    if __debug__:\n+        _assert_have_json()\n     return json.dumps(string, *args, **kwargs).replace('</', '<\\\\/')\n \n \n@@ -398,7 +408,6 @@ class Flask(object):\n             url_for=url_for,\n             get_flashed_messages=get_flashed_messages\n         )\n-        if json_available:\n         self.jinja_env.filters['tojson'] = _tojson_filter\n \n     def create_jinja_loader(self):\n@@ -498,7 +507,8 @@ class Flask(object):\n \n     def add_url_rule(self, rule, endpoint, view_func=None, **options):\n         \"\"\"Connects a URL rule.  Works exactly like the :meth:`route`\n-        decorator. If a view_func is provided it will be registered with the endpoint.\n+        decorator. If a view_func is provided it will be registered with the\n+        endpoint.\n \n         Basically this example::\n \n@@ -512,19 +522,22 @@ class Flask(object):\n                 pass\n             app.add_url_rule('/', 'index', index)\n \n-         If the view_func is not provided you will need to connect the endpoint to a \n-         view function like so:\n+        If the view_func is not provided you will need to connect the endpoint\n+        to a view function like so::\n+\n             app.view_functions['index'] = index\n \n+        .. versionchanged:: 0.2\n+           `view_func` parameter added\n+\n         :param rule: the URL rule as string\n         :param endpoint: the endpoint for the registered URL rule.  Flask\n                          itself assumes the name of the view function as\n                          endpoint\n-        :param view_func: the function to call when servicing a request to the provided endpoint\n+        :param view_func: the function to call when servicing a request to the\n+                          provided endpoint\n         :param options: the options to be forwarded to the underlying\n                         :class:`~werkzeug.routing.Rule` object\n-\n-        .. versionadded:: 0.2\n         \"\"\"\n         options['endpoint'] = endpoint\n         options.setdefault('methods', ('GET',))\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#3a1e51865786474c44a04c0d422515047dd27223", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 1042 | Contributors (this commit): 4 | Commits (past 90d): 29 | Contributors (cumulative): 4 | DMM Complexity: None\n\nDIFF:\n@@ -358,7 +358,7 @@ class Flask(object):\n         self.before_request_funcs = []\n \n         #: a list of functions that are called at the end of the\n-        #: request.  Tha function is passed the current response\n+        #: request.  The function is passed the current response\n         #: object and modify it in place or replace it.\n         #: To register a function here use the :meth:`after_request`\n         #: decorator.\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#9f6bc93e4de36fc209eb1203845e9505df1ca379", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 13 | Lines Deleted: 1 | Files Changed: 2 | Hunks: 4 | Methods Changed: 2 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 14 | Churn Cumulative: 1368 | Contributors (this commit): 4 | Commits (past 90d): 41 | Contributors (cumulative): 6 | DMM Complexity: 1.0\n\nDIFF:\n@@ -10,6 +10,7 @@\n     :license: BSD, see LICENSE for more details.\n \"\"\"\n from __future__ import with_statement\n+import re\n import os\n import sys\n \n@@ -47,6 +48,12 @@ except (ImportError, AttributeError):\n     pkg_resources = None\n \n \n+# figure out if simplejson escapes slashes.  This behaviour was changed\n+# from one version to another without reason.\n+if json_available:\n+    _json_escapes_slashes = '\\\\/' in json.dumps('/')\n+\n+\n class Request(RequestBase):\n     \"\"\"The request object used by default in flask.  Remembers the\n     matched endpoint and view arguments.\n@@ -271,7 +278,10 @@ def _tojson_filter(string, *args, **kwargs):\n     \"\"\"Calls dumps for the template engine, escaping Slashes properly.\"\"\"\n     if __debug__:\n         _assert_have_json()\n-    return json.dumps(string, *args, **kwargs).replace('</', '<\\\\/')\n+    rv = json.dumps(string, *args, **kwargs)\n+    if not _json_escapes_slashes:\n+        rv = rv.replace('/', '\\\\/')\n+    return rv\n \n \n class Flask(object):\n\n@@ -245,6 +245,8 @@ class JSONTestCase(unittest.TestCase):\n         with app.test_request_context():\n             rv = flask.render_template_string('{{ \"</script>\"|tojson|safe }}')\n             assert rv == '\"<\\\\/script>\"'\n+            rv = flask.render_template_string('{{ \"<\\0/script>\"|tojson|safe }}')\n+            assert rv == '\"<\\\\u0000\\\\/script>\"'\n \n \n class TemplatingTestCase(unittest.TestCase):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#3c821a0fa45082bcec73dfb08662fb1de5263c48", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 10 | Lines Deleted: 8 | Files Changed: 3 | Hunks: 8 | Methods Changed: 5 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 18 | Churn Cumulative: 1465 | Contributors (this commit): 5 | Commits (past 90d): 49 | Contributors (cumulative): 10 | DMM Complexity: 1.0\n\nDIFF:\n@@ -125,7 +125,8 @@ def user_timeline(username):\n     if g.user:\n         followed = query_db('''select 1 from follower where\n             follower.who_id = ? and follower.whom_id = ?''',\n-            [session['user_id'], profile_user['user_id']], one=True) is not None\n+            [session['user_id'], profile_user['user_id']],\n+            one=True) is not None\n     return render_template('timeline.html', messages=query_db('''\n             select message.*, user.* from message, user where\n             user.user_id = message.author_id and user.user_id = ?\n@@ -230,7 +231,7 @@ def register():\n \n @app.route('/logout')\n def logout():\n-    \"\"\"Logs the user out\"\"\"\n+    \"\"\"Logs the user out.\"\"\"\n     flash('You were logged out')\n     session.pop('user_id', None)\n     return redirect(url_for('public_timeline'))\n\n@@ -10,7 +10,6 @@\n     :license: BSD, see LICENSE for more details.\n \"\"\"\n from __future__ import with_statement\n-import re\n import os\n import sys\n \n@@ -261,7 +260,7 @@ def _default_template_ctx_processor():\n \n \n def _assert_have_json():\n-    \"\"\"Helper function that fails if JSON is unavailable\"\"\"\n+    \"\"\"Helper function that fails if JSON is unavailable.\"\"\"\n     if not json_available:\n         raise RuntimeError('simplejson not installed')\n \n@@ -544,7 +543,7 @@ class Flask(object):\n         :param endpoint: the endpoint for the registered URL rule.  Flask\n                          itself assumes the name of the view function as\n                          endpoint\n-        :param view_func: the function to call when servicing a request to the\n+        :param view_func: the function to call when serving a request to the\n                           provided endpoint\n         :param options: the options to be forwarded to the underlying\n                         :class:`~werkzeug.routing.Rule` object\n@@ -798,7 +797,7 @@ class Flask(object):\n         return self.request_context(create_environ(*args, **kwargs))\n \n     def __call__(self, environ, start_response):\n-        \"\"\"Shortcut for :attr:`wsgi_app`\"\"\"\n+        \"\"\"Shortcut for :attr:`wsgi_app`.\"\"\"\n         return self.wsgi_app(environ, start_response)\n \n \n\n@@ -34,7 +34,8 @@ Links\n \n * `website <http://flask.pocoo.org/>`_\n * `documentation <http://flask.pocoo.org/docs/>`_\n-* `development version <http://github.com/mitsuhiko/flask/zipball/master#egg=Flask-dev>`_\n+* `development version\n+  <http://github.com/mitsuhiko/flask/zipball/master#egg=Flask-dev>`_\n \n \"\"\"\n from setuptools import setup\n@@ -47,7 +48,8 @@ setup(\n     license='BSD',\n     author='Armin Ronacher',\n     author_email='armin.ronacher@active-4.com',\n-    description='A microframework based on Werkzeug, Jinja2 and good intentions',\n+    description='A microframework based on Werkzeug, Jinja2 '\n+                'and good intentions',\n     long_description=__doc__,\n     py_modules=['flask'],\n     zip_safe=False,\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#75057bb4112d16acc7ed5dafce6a8168b343fd78", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 6 | Lines Deleted: 7 | Files Changed: 1 | Hunks: 4 | Methods Changed: 1 | Complexity Δ (Sum/Max): -1/0 | Churn Δ: 13 | Churn Cumulative: 1074 | Contributors (this commit): 5 | Commits (past 90d): 32 | Contributors (cumulative): 5 | DMM Complexity: 0.0\n\nDIFF:\n@@ -49,8 +49,7 @@ except (ImportError, AttributeError):\n \n # figure out if simplejson escapes slashes.  This behaviour was changed\n # from one version to another without reason.\n-if json_available:\n-    _json_escapes_slashes = '\\\\/' in json.dumps('/')\n+_json_escapes_slashes = json_available and '\\\\/' in json.dumps('/')\n \n \n class Request(RequestBase):\n@@ -273,14 +272,14 @@ def _get_package_path(name):\n         return os.getcwd()\n \n \n+if not _json_escapes_slashes:\n     def _tojson_filter(string, *args, **kwargs):\n-    \"\"\"Calls dumps for the template engine, escaping Slashes properly.\"\"\"\n+        \"\"\"Calls dumps for the template engine, escaping slashes properly.\"\"\"\n         if __debug__:\n             _assert_have_json()\n-    rv = json.dumps(string, *args, **kwargs)\n-    if not _json_escapes_slashes:\n-        rv = rv.replace('/', '\\\\/')\n-    return rv\n+        return json.dumps(string, *args, **kwargs).replace('/', '\\\\/')\n+else:\n+    _tojson_filter = json.dumps\n \n \n class Flask(object):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#af3b73f70d5fce72181530d384519ae31d77c772", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 5 | Lines Deleted: 9 | Files Changed: 1 | Hunks: 3 | Methods Changed: 2 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 14 | Churn Cumulative: 1088 | Contributors (this commit): 5 | Commits (past 90d): 33 | Contributors (cumulative): 5 | DMM Complexity: None\n\nDIFF:\n@@ -47,11 +47,6 @@ except (ImportError, AttributeError):\n     pkg_resources = None\n \n \n-# figure out if simplejson escapes slashes.  This behaviour was changed\n-# from one version to another without reason.\n-_json_escapes_slashes = json_available and '\\\\/' in json.dumps('/')\n-\n-\n class Request(RequestBase):\n     \"\"\"The request object used by default in flask.  Remembers the\n     matched endpoint and view arguments.\n@@ -272,12 +267,13 @@ def _get_package_path(name):\n         return os.getcwd()\n \n \n-if not _json_escapes_slashes:\n-    def _tojson_filter(string, *args, **kwargs):\n-        \"\"\"Calls dumps for the template engine, escaping slashes properly.\"\"\"\n+# figure out if simplejson escapes slashes.  This behaviour was changed\n+# from one version to another without reason.\n+if not json_available or '\\\\/' not in json.dumps('/'):\n+    def _tojson_filter(*args, **kwargs):\n         if __debug__:\n             _assert_have_json()\n-        return json.dumps(string, *args, **kwargs).replace('/', '\\\\/')\n+        return json.dumps(*args, **kwargs).replace('/', '\\\\/')\n else:\n     _tojson_filter = json.dumps\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#3053fcdb0d6189ad1deca6fcfa16443dad4baf8c", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 14 | Lines Deleted: 4 | Files Changed: 2 | Hunks: 8 | Methods Changed: 4 | Complexity Δ (Sum/Max): 2/1 | Churn Δ: 18 | Churn Cumulative: 237 | Contributors (this commit): 1 | Commits (past 90d): 7 | Contributors (cumulative): 2 | DMM Complexity: 1.0\n\nDIFF:\n@@ -8,6 +8,7 @@\n     :copyright: (c) 2010 by Armin Ronacher.\n     :license: BSD, see LICENSE for more details.\n \"\"\"\n+import os\n import flaskr\n import unittest\n import tempfile\n@@ -17,11 +18,15 @@ class FlaskrTestCase(unittest.TestCase):\n \n     def setUp(self):\n         \"\"\"Before each test, set up a blank database\"\"\"\n-        self.db = tempfile.NamedTemporaryFile()\n+        self.db_fd, flaskr.DATABASE = tempfile.mkstemp()\n         self.app = flaskr.app.test_client()\n-        flaskr.DATABASE = self.db.name\n         flaskr.init_db()\n \n+    def tearDown(self):\n+        \"\"\"Get rid of the database again after each test.\"\"\"\n+        os.close(self.db_fd)\n+        os.unlink(flaskr.DATABASE)\n+\n     def login(self, username, password):\n         return self.app.post('/login', data=dict(\n             username=username,\n\n@@ -8,6 +8,7 @@\n     :copyright: (c) 2010 by Armin Ronacher.\n     :license: BSD, see LICENSE for more details.\n \"\"\"\n+import os\n import minitwit\n import unittest\n import tempfile\n@@ -17,11 +18,15 @@ class MiniTwitTestCase(unittest.TestCase):\n \n     def setUp(self):\n         \"\"\"Before each test, set up a blank database\"\"\"\n-        self.db = tempfile.NamedTemporaryFile()\n+        self.db_fd, minitwit.DATABASE = tempfile.mkstemp()\n         self.app = minitwit.app.test_client()\n-        minitwit.DATABASE = self.db.name\n         minitwit.init_db()\n \n+    def tearDown(self):\n+        \"\"\"Get rid of the database again after each test.\"\"\"\n+        os.close(self.db_fd)\n+        os.unlink(minitwit.DATABASE)\n+\n     # helper functions\n \n     def register(self, username, password, password2=None, email=None):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#00f87f679cdd63b642675d86d073882fb8b19430", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 2 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 1090 | Contributors (this commit): 5 | Commits (past 90d): 34 | Contributors (cumulative): 5 | DMM Complexity: None\n\nDIFF:\n@@ -434,7 +434,7 @@ class Flask(object):\n         for func in self.template_context_processors:\n             context.update(func())\n \n-    def run(self, host='localhost', port=5000, **options):\n+    def run(self, host='127.0.0.1', port=5000, **options):\n         \"\"\"Runs the application on a local development server.  If the\n         :attr:`debug` flag is set the server will automatically reload\n         for code changes and show a debugger in case an exception happened.\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#9d340ad7477774a19a7bdffc83d6cb8cb3e05edc", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 1 | Churn Cumulative: 1091 | Contributors (this commit): 5 | Commits (past 90d): 35 | Contributors (cumulative): 5 | DMM Complexity: None\n\nDIFF:\n@@ -270,6 +270,7 @@ def _get_package_path(name):\n # figure out if simplejson escapes slashes.  This behaviour was changed\n # from one version to another without reason.\n if not json_available or '\\\\/' not in json.dumps('/'):\n+\n     def _tojson_filter(*args, **kwargs):\n         if __debug__:\n             _assert_have_json()\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#7cf5a9bf6e34fc57f82e560f01c408fbe603e9d4", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 3 | Lines Deleted: 7 | Files Changed: 1 | Hunks: 3 | Methods Changed: 3 | Complexity Δ (Sum/Max): -1/0 | Churn Δ: 10 | Churn Cumulative: 1101 | Contributors (this commit): 5 | Commits (past 90d): 36 | Contributors (cumulative): 5 | DMM Complexity: 0.0\n\nDIFF:\n@@ -56,10 +56,7 @@ class Request(RequestBase):\n     :attr:`~flask.Flask.request_class` to your subclass.\n     \"\"\"\n \n-    def __init__(self, environ):\n-        RequestBase.__init__(self, environ)\n-        self.endpoint = None\n-        self.view_args = None\n+    endpoint = view_args = None\n \n     @cached_property\n     def json(self):\n@@ -170,7 +167,7 @@ def flash(message):\n \n     :param message: the message to be flashed.\n     \"\"\"\n-    session['_flashes'] = (session.get('_flashes', [])) + [message]\n+    session['_flashes'] = session.get('_flashes', ()) + (message,)\n \n \n def get_flashed_messages():\n@@ -180,8 +177,7 @@ def get_flashed_messages():\n     \"\"\"\n     flashes = _request_ctx_stack.top.flashes\n     if flashes is None:\n-        _request_ctx_stack.top.flashes = flashes = \\\n-            session.pop('_flashes', [])\n+        _request_ctx_stack.top.flashes = flashes = session.pop('_flashes', ())\n     return flashes\n \n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#b6e73305392c9de052e51cca6fae8fee12ae231e", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 14 | Lines Deleted: 2 | Files Changed: 2 | Hunks: 3 | Methods Changed: 3 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 16 | Churn Cumulative: 1431 | Contributors (this commit): 5 | Commits (past 90d): 49 | Contributors (cumulative): 8 | DMM Complexity: 1.0\n\nDIFF:\n@@ -167,7 +167,7 @@ def flash(message):\n \n     :param message: the message to be flashed.\n     \"\"\"\n-    session['_flashes'] = session.get('_flashes', ()) + (message,)\n+    session.setdefault('_flashes', []).append(message)\n \n \n def get_flashed_messages():\n@@ -177,7 +177,7 @@ def get_flashed_messages():\n     \"\"\"\n     flashes = _request_ctx_stack.top.flashes\n     if flashes is None:\n-        _request_ctx_stack.top.flashes = flashes = session.pop('_flashes', ())\n+        _request_ctx_stack.top.flashes = flashes = session.pop('_flashes', [])\n     return flashes\n \n \n\n@@ -117,6 +117,18 @@ class BasicFunctionalityTestCase(unittest.TestCase):\n             expect_exception(flask.session.__setitem__, 'foo', 42)\n             expect_exception(flask.session.pop, 'foo')\n \n+    def test_flashes(self):\n+        app = flask.Flask(__name__)\n+        app.secret_key = 'testkey'\n+\n+        with app.test_request_context():\n+            assert not flask.session.modified\n+            flask.flash('Zap')\n+            flask.session.modified = False\n+            flask.flash('Zip')\n+            assert flask.session.modified\n+            assert list(flask.get_flashed_messages()) == ['Zap', 'Zip']\n+\n     def test_request_processing(self):\n         app = flask.Flask(__name__)\n         evts = []\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#f014ce29a7cd5a3ccfabd61e7d66e017ed958e25", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 1 | Churn Cumulative: 1106 | Contributors (this commit): 5 | Commits (past 90d): 38 | Contributors (cumulative): 5 | DMM Complexity: None\n\nDIFF:\n@@ -270,6 +270,7 @@ def _get_package_path(name):\n # figure out if simplejson escapes slashes.  This behaviour was changed\n # from one version to another without reason.\n if not json_available or '\\\\/' not in json.dumps('/'):\n+\n     def _tojson_filter(*args, **kwargs):\n         if __debug__:\n             _assert_have_json()\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#3eacc1d06816b2544e0242665fe909b24b027b21", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 3 | Lines Deleted: 7 | Files Changed: 1 | Hunks: 3 | Methods Changed: 3 | Complexity Δ (Sum/Max): -1/0 | Churn Δ: 10 | Churn Cumulative: 1116 | Contributors (this commit): 5 | Commits (past 90d): 39 | Contributors (cumulative): 5 | DMM Complexity: 0.0\n\nDIFF:\n@@ -56,10 +56,7 @@ class Request(RequestBase):\n     :attr:`~flask.Flask.request_class` to your subclass.\n     \"\"\"\n \n-    def __init__(self, environ):\n-        RequestBase.__init__(self, environ)\n-        self.endpoint = None\n-        self.view_args = None\n+    endpoint = view_args = None\n \n     @cached_property\n     def json(self):\n@@ -170,7 +167,7 @@ def flash(message):\n \n     :param message: the message to be flashed.\n     \"\"\"\n-    session['_flashes'] = (session.get('_flashes', [])) + [message]\n+    session['_flashes'] = session.get('_flashes', ()) + (message,)\n \n \n def get_flashed_messages():\n@@ -180,8 +177,7 @@ def get_flashed_messages():\n     \"\"\"\n     flashes = _request_ctx_stack.top.flashes\n     if flashes is None:\n-        _request_ctx_stack.top.flashes = flashes = \\\n-            session.pop('_flashes', [])\n+        _request_ctx_stack.top.flashes = flashes = session.pop('_flashes', ())\n     return flashes\n \n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#dbe0df756bf587b242f2406bef9e7e8ef26f0813", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 14 | Lines Deleted: 2 | Files Changed: 2 | Hunks: 3 | Methods Changed: 3 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 16 | Churn Cumulative: 1458 | Contributors (this commit): 5 | Commits (past 90d): 53 | Contributors (cumulative): 8 | DMM Complexity: 1.0\n\nDIFF:\n@@ -167,7 +167,7 @@ def flash(message):\n \n     :param message: the message to be flashed.\n     \"\"\"\n-    session['_flashes'] = session.get('_flashes', ()) + (message,)\n+    session.setdefault('_flashes', []).append(message)\n \n \n def get_flashed_messages():\n@@ -177,7 +177,7 @@ def get_flashed_messages():\n     \"\"\"\n     flashes = _request_ctx_stack.top.flashes\n     if flashes is None:\n-        _request_ctx_stack.top.flashes = flashes = session.pop('_flashes', ())\n+        _request_ctx_stack.top.flashes = flashes = session.pop('_flashes', [])\n     return flashes\n \n \n\n@@ -117,6 +117,18 @@ class BasicFunctionalityTestCase(unittest.TestCase):\n             expect_exception(flask.session.__setitem__, 'foo', 42)\n             expect_exception(flask.session.pop, 'foo')\n \n+    def test_flashes(self):\n+        app = flask.Flask(__name__)\n+        app.secret_key = 'testkey'\n+\n+        with app.test_request_context():\n+            assert not flask.session.modified\n+            flask.flash('Zap')\n+            flask.session.modified = False\n+            flask.flash('Zip')\n+            assert flask.session.modified\n+            assert list(flask.get_flashed_messages()) == ['Zap', 'Zip']\n+\n     def test_request_processing(self):\n         app = flask.Flask(__name__)\n         evts = []\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
