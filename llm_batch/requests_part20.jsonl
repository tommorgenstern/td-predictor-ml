{"custom_id": "requests#62d29d510625aa6c5415f4ba35579059b1c842fd", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 31 | Lines Deleted: 27 | Files Changed: 2 | Hunks: 5 | Methods Changed: 3 | Complexity Δ (Sum/Max): 48/54 | Churn Δ: 58 | Churn Cumulative: 3434 | Contributors (this commit): 18 | Commits (past 90d): 142 | Contributors (cumulative): 23 | DMM Complexity: 0.0\n\nDIFF:\n@@ -22,7 +22,7 @@ from .monkeys import Request as _Request, HTTPBasicAuthHandler, HTTPForcedBasicA\n from .structures import CaseInsensitiveDict\n from .packages.poster.encode import multipart_encode\n from .packages.poster.streaminghttp import register_openers, get_handlers\n-from .utils import dict_from_cookiejar, get_unicode_from_response, stream_decode_response_unicode, decode_gzip, stream_decode_gzip\n+from .utils import get_clean_url, dict_from_cookiejar, get_unicode_from_response, stream_decode_response_unicode, decode_gzip, stream_decode_gzip\n from .status_codes import codes\n from .exceptions import RequestException, AuthenticationError, Timeout, URLRequired, InvalidMethod, TooManyRedirects\n \n@@ -215,20 +215,7 @@ class Request(object):\n \n                 history.append(r)\n \n-                url = r.headers['location']\n-\n-                # Handle redirection without scheme (see: RFC 1808 Section 4)\n-                if url.startswith('//'):\n-                    parsed_rurl = urlparse(r.url)\n-                    url = '%s:%s' % (parsed_rurl.scheme, url)\n-\n-                # Facilitate non-RFC2616-compliant 'location' headers\n-                # (e.g. '/path/to/resource' instead of 'http://domain.tld/path/to/resource')\n-                parsed_url = urlparse(url)\n-                if not parsed_url.netloc:\n-                    parsed_url = list(parsed_url)\n-                    parsed_url[2] = urllib.quote(parsed_url[2], safe=\"%/:=&?~#+!$,;'@()*[]\")\n-                    url = urljoin(r.url, str(urlunparse(parsed_url)))\n+                url = get_clean_url(r.headers['location'], parent_url=r.url)\n \n                 # http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.3.4\n                 if r.status_code is codes.see_other:\n@@ -276,18 +263,7 @@ class Request(object):\n     def _build_url(self):\n         \"\"\"Build the actual URL to use.\"\"\"\n \n-        # Support for unicode domain names and paths.\n-        scheme, netloc, path, params, query, fragment = urlparse(self.url)\n-        netloc = netloc.encode('idna')\n-\n-        if isinstance(path, unicode):\n-            path = path.encode('utf-8')\n-\n-        path = urllib.quote(path, safe=\"%/:=&?~#+!$,;'@()*[]\")\n-\n-        self.url = str(urlunparse(\n-          [scheme, netloc, path, params, query, fragment]\n-         ))\n+        self.url = get_clean_url(self.url)\n \n         if self._enc_params:\n             if urlparse(self.url).query:\n\n@@ -13,8 +13,36 @@ import cgi\n import codecs\n import cookielib\n import re\n+import urllib\n import zlib\n \n+from urlparse import urlparse, urlunparse, urljoin\n+\n+def get_clean_url(url, parent_url=None):\n+    # Handle redirection without scheme (see: RFC 1808 Section 4)\n+    if url.startswith('//'):\n+        parsed_rurl = urlparse(parent_url)\n+        url = '%s:%s' % (parsed_rurl.scheme, url)\n+\n+    scheme, netloc, path, params, query, fragment = urlparse(url)\n+    if netloc:\n+        netloc = netloc.encode('idna')\n+\n+    if isinstance(path, unicode):\n+        path = path.encode('utf-8')\n+\n+    path = urllib.quote(path, safe=\"%/:=&?~#+!$,;'@()*[]\")\n+    params = urllib.quote(params, safe=\"%/:=&?~#+!$,;'@()*[]\")\n+    query = urllib.quote(query, safe=\"%/:=&?~#+!$,;'@()*[]\")\n+\n+    url = str(urlunparse([scheme, netloc, path, params, query, fragment]))\n+\n+    # Facilitate non-RFC2616-compliant 'location' headers\n+    # (e.g. '/path/to/resource' instead of 'http://domain.tld/path/to/resource')\n+    if not netloc and parent_url:\n+        url = urljoin(parent_url, url)\n+\n+    return url\n \n def header_expand(headers):\n     \"\"\"Returns an HTTP Header value string from a dictionary.\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#ffde764a910e64398d01a8058a540853b63d60d3", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 2756 | Contributors (this commit): 17 | Commits (past 90d): 105 | Contributors (cumulative): 17 | DMM Complexity: None\n\nDIFF:\n@@ -14,7 +14,7 @@ import zlib\n \n \n from urllib2 import HTTPError\n-from urlparse import urlparse, urlunparse, urljoin\n+from urlparse import urlparse\n from datetime import datetime\n \n from .config import settings\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#87e8a12a9f0c9bfafabab2d48e5e90e05615f3c1", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 675 | Contributors (this commit): 7 | Commits (past 90d): 29 | Contributors (cumulative): 7 | DMM Complexity: None\n\nDIFF:\n@@ -4,7 +4,7 @@\n requests.api\n ~~~~~~~~~~~~\n \n-This module impliments the Requests API.\n+This module implements the Requests API.\n \n :copyright: (c) 2011 by Kenneth Reitz.\n :license: ISC, see LICENSE for more details.\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#4cd54d2f8798928b31b67ff1a9361759a40aff5f", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 3 | Contributors (this commit): 1 | Commits (past 90d): 3 | Contributors (cumulative): 1 | DMM Complexity: None\n\nDIFF:\n@@ -46,7 +46,7 @@ defaults['verbose'] = None\n defaults['timeout'] = None\n defaults['max_redirects'] = 30\n defaults['decode_unicode'] = True\n-defaults['keepalive'] = True\n+defaults['keep_alive'] = True\n defaults['max_connections'] = 10\n \n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#2f5008107c56485a46271062ecc0b75f5e49fa16", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 2 | Methods Changed: 3 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 4 | Churn Cumulative: 283 | Contributors (this commit): 2 | Commits (past 90d): 21 | Contributors (cumulative): 2 | DMM Complexity: None\n\nDIFF:\n@@ -120,7 +120,7 @@ class Session(object):\n                         _kwargs[k] = v\n \n                 # Add in PoolManager, if neccesary.\n-                if self.config.get('keepalive'):\n+                if self.config.get('keep_alive'):\n                     _kwargs['_pools'] = self.__pools\n \n                 # TODO: Persist cookies.\n@@ -131,7 +131,7 @@ class Session(object):\n \n                 r = func(*args, **_kwargs)\n                 # print r.cookies\n-                self.cookies.update(r.cookies)\n+                self.cookies.update(r.cookies or {})\n                 return r\n             return wrapper_func\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#e8c2fc15852128a9da5f7db53ddd8f068624a71b", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 10 | Lines Deleted: 5 | Files Changed: 1 | Hunks: 5 | Methods Changed: 3 | Complexity Δ (Sum/Max): -53/0 | Churn Δ: 15 | Churn Cumulative: 2771 | Contributors (this commit): 17 | Commits (past 90d): 105 | Contributors (cumulative): 17 | DMM Complexity: 0.0\n\nDIFF:\n@@ -33,7 +33,12 @@ class Request(object):\n     def __init__(self,\n         url=None, headers=dict(), files=None, method=None, data=dict(),\n         params=dict(), auth=None, cookies=None, timeout=None, redirect=False,\n-        allow_redirects=False, proxies=None, config=None, _pools=None):\n+        allow_redirects=False, proxies=None, config=None, hooks=None,\n+        _pools=None):\n+\n+        if cookies is None:\n+            cookies = {}\n+\n \n         #: Float describ the timeout of the request.\n         #  (Use socket.setdefaulttimeout() as fallback)\n@@ -105,6 +110,7 @@ class Request(object):\n \n         self.headers = headers\n \n+        self.hooks = hooks\n         self._pools = _pools\n \n     def __repr__(self):\n@@ -237,7 +243,8 @@ class Request(object):\n                 # Send her away!\n                 request.send()\n                 r = request.response\n-                self.cookies.update(r.cookies)\n+\n+                self.cookies.update(r.cookies or {})\n \n             # Insert collected history.\n             r.history = history\n@@ -280,8 +287,6 @@ class Request(object):\n                 content_type = 'application/x-www-form-urlencoded'\n \n         # Setup cookies.\n-        elif self.cookies:\n-            pass\n \n         # Add content-type if it wasn't explicitly provided.\n         if (content_type) and (not 'content-type' in self.headers):\n@@ -343,7 +348,7 @@ class Request(object):\n                 )\n \n                 # Set the pools manager for redirections, if allowed.\n-                if self.config.get('keepalive') and pools:\n+                if self.config.get('keep_alive') and pools:\n                     self._pools = pools\n \n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#30d937f299d217f2107139b3c0a8083d90d184aa", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 101 | Contributors (this commit): 2 | Commits (past 90d): 3 | Contributors (cumulative): 2 | DMM Complexity: None\n\nDIFF:\n@@ -34,7 +34,7 @@ setup(\n     packages= [\n         'requests',\n         'requests.packages',\n-        'requests.packages.poster'\n+        'requests.packages.urllib3'\n     ],\n     install_requires=required,\n     license='ISC',\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#3092483433ebf0f5802677aa9b8a74ee4dc1e64b", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 75 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 4 | Complexity Δ (Sum/Max): 8/8 | Churn Δ: 75 | Churn Cumulative: 197 | Contributors (this commit): 2 | Commits (past 90d): 2 | Contributors (cumulative): 2 | DMM Complexity: 1.0\n\nDIFF:\n@@ -0,0 +1,75 @@\n+# -*- coding: utf-8 -*-\n+\n+\"\"\"\n+reqeusts.async\n+~~~~~~~~~~~~~~\n+\n+This module contains an asyncronous replica of ``requests.api``, powered\n+by gevent. All API methods return a ``Request`` instance (as opposed to\n+``Response``). A list of requests can be sent with ``map()``.\n+\"\"\"\n+\n+try:\n+    import gevent\n+    from gevent import monkey as curious_george\n+except ImportError:\n+    raise RuntimeError('Gevent is required for requests.async.')\n+\n+# Monkey-patch.\n+curious_george.patch_all(thread=False)\n+\n+from . import api\n+from .hooks import dispatch_hook\n+from .packages.urllib3.poolmanager import PoolManager\n+\n+\n+def _patched(f):\n+    \"\"\"Patches a given api function to not send.\"\"\"\n+\n+    def wrapped(*args, **kwargs):\n+        return f(*args, _return_request=True, **kwargs)\n+\n+    return wrapped\n+\n+\n+def _send(r, pools=None):\n+    \"\"\"Dispatcher.\"\"\"\n+\n+    if pools:\n+        r._pools = pools\n+\n+    r.send()\n+\n+    # Post-request hook.\n+    r = dispatch_hook('post_request', r.hooks, r)\n+\n+    # Response manipulation hook.\n+    r.response = dispatch_hook('response', r.hooks, r.response)\n+\n+    return r.response\n+\n+# Patched requests.api functions.\n+get = _patched(api.get)\n+head = _patched(api.head)\n+post = _patched(api.post)\n+put = _patched(api.put)\n+patch = _patched(api.patch)\n+delete = _patched(api.delete)\n+request = _patched(api.request)\n+\n+from requests.sessions import session\n+\n+def map(requests, keep_alive=False):\n+    \"\"\"Sends the requests... Asynchronously.\"\"\"\n+\n+    if keep_alive:\n+        pools = PoolManager(num_pools=len(requests), maxsize=1)\n+    else:\n+        pools = None\n+\n+    jobs = [gevent.spawn(_send, r, pools=pools) for r in requests]\n+    gevent.joinall(jobs)\n+\n+    return [r.response for r in requests]\n+\n+\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#b58433fb74d040e7828a3a047a5ca25dba5751ab", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 6 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 2 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 6 | Churn Cumulative: 2668 | Contributors (this commit): 8 | Commits (past 90d): 13 | Contributors (cumulative): 8 | DMM Complexity: None\n\nDIFF:\n@@ -1,5 +1,10 @@\n # -*- coding: utf-8 -*-\n \n+#   __\n+#  /__)  _  _     _   _ _/   _\n+# / (   (- (/ (/ (- _)  /  _)\n+#          /\n+\n \"\"\"\n requests.core\n ~~~~~~~~~~~~~\n@@ -11,6 +16,7 @@ This module implements the main Requests system.\n \n \"\"\"\n \n+\n __title__ = 'requests'\n __version__ = '0.6.2 (dev)'\n __build__ = 0x000602\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#47b98bc90f84e1ebd2ca220843df5cb49f6db99a", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 2 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 201 | Contributors (this commit): 2 | Commits (past 90d): 3 | Contributors (cumulative): 2 | DMM Complexity: None\n\nDIFF:\n@@ -1,10 +1,10 @@\n # -*- coding: utf-8 -*-\n \n \"\"\"\n-reqeusts.async\n+requests.async\n ~~~~~~~~~~~~~~\n \n-This module contains an asyncronous replica of ``requests.api``, powered\n+This module contains an asynchronous replica of ``requests.api``, powered\n by gevent. All API methods return a ``Request`` instance (as opposed to\n ``Response``). A list of requests can be sent with ``map()``.\n \"\"\"\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#5afe11ba1c00680edaee91b92ba87486997965f7", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 15 | Lines Deleted: 4 | Files Changed: 1 | Hunks: 7 | Methods Changed: 3 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 19 | Churn Cumulative: 220 | Contributors (this commit): 2 | Commits (past 90d): 4 | Contributors (cumulative): 2 | DMM Complexity: None\n\nDIFF:\n@@ -23,8 +23,14 @@ from .hooks import dispatch_hook\n from .packages.urllib3.poolmanager import PoolManager\n \n \n+__all__ = (\n+    'map', 'get', 'head', 'post', 'put', 'patch', 'delete', 'request'\n+)\n+\n+\n+\n def _patched(f):\n-    \"\"\"Patches a given api function to not send.\"\"\"\n+    \"\"\"Patches a given API function to not send.\"\"\"\n \n     def wrapped(*args, **kwargs):\n         return f(*args, _return_request=True, **kwargs)\n@@ -33,7 +39,7 @@ def _patched(f):\n \n \n def _send(r, pools=None):\n-    \"\"\"Dispatcher.\"\"\"\n+    \"\"\"Sends a given Request object.\"\"\"\n \n     if pools:\n         r._pools = pools\n@@ -48,6 +54,7 @@ def _send(r, pools=None):\n \n     return r.response\n \n+\n # Patched requests.api functions.\n get = _patched(api.get)\n head = _patched(api.head)\n@@ -57,10 +64,12 @@ patch = _patched(api.patch)\n delete = _patched(api.delete)\n request = _patched(api.request)\n \n-from requests.sessions import session\n \n def map(requests, keep_alive=False):\n-    \"\"\"Sends the requests... Asynchronously.\"\"\"\n+    \"\"\"Concurrently converts a list of Requests to Responses.\n+\n+    :param requests: a collection of Request objects.\n+    \"\"\"\n \n     if keep_alive:\n         pools = PoolManager(num_pools=len(requests), maxsize=1)\n@@ -73,3 +82,5 @@ def map(requests, keep_alive=False):\n     return [r.response for r in requests]\n \n \n+\n+\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#7875a12617ae38f3432779b29e0fdbc93febd408", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 3 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 3 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 5 | Churn Cumulative: 225 | Contributors (this commit): 2 | Commits (past 90d): 5 | Contributors (cumulative): 2 | DMM Complexity: None\n\nDIFF:\n@@ -24,11 +24,11 @@ from .packages.urllib3.poolmanager import PoolManager\n \n \n __all__ = (\n-    'map', 'get', 'head', 'post', 'put', 'patch', 'delete', 'request'\n+    'map',\n+    'get', 'head', 'post', 'put', 'patch', 'delete', 'request'\n )\n \n \n-\n def _patched(f):\n     \"\"\"Patches a given API function to not send.\"\"\"\n \n@@ -69,6 +69,7 @@ def map(requests, keep_alive=False):\n     \"\"\"Concurrently converts a list of Requests to Responses.\n \n     :param requests: a collection of Request objects.\n+    :param keep_alive: If True, HTTP Keep-Alive will be used.\n     \"\"\"\n \n     if keep_alive:\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#c9f5614417fc2b997e2e5223d8bdacf07b9e13be", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 67 | Lines Deleted: 7 | Files Changed: 8 | Hunks: 20 | Methods Changed: 6 | Complexity Δ (Sum/Max): 2/2 | Churn Δ: 74 | Churn Cumulative: 1555 | Contributors (this commit): 1 | Commits (past 90d): 26 | Contributors (cumulative): 8 | DMM Complexity: 0.0\n\nDIFF:\n@@ -1,3 +1,9 @@\n+# urllib3/__init__.py\n+# Copyright 2008-2011 Andrey Petrov and contributors (see CONTRIBUTORS.txt)\n+#\n+# This module is part of urllib3 and is released under\n+# the MIT License: http://www.opensource.org/licenses/mit-license.php\n+\n \"\"\"\n urllib3 - Thread-safe connection pooling and re-using.\n \"\"\"\n\n@@ -1,3 +1,9 @@\n+# urllib3/_collections.py\n+# Copyright 2008-2011 Andrey Petrov and contributors (see CONTRIBUTORS.txt)\n+#\n+# This module is part of urllib3 and is released under\n+# the MIT License: http://www.opensource.org/licenses/mit-license.php\n+\n from collections import MutableMapping, deque\n \n \n\n@@ -1,3 +1,9 @@\n+# urllib3/connectionpool.py\n+# Copyright 2008-2011 Andrey Petrov and contributors (see CONTRIBUTORS.txt)\n+#\n+# This module is part of urllib3 and is released under\n+# the MIT License: http://www.opensource.org/licenses/mit-license.php\n+\n import logging\n import socket\n \n@@ -191,10 +197,12 @@ class HTTPConnectionPool(ConnectionPool):\n         if timeout is _Default:\n             timeout = self.timeout\n \n+\n         conn.request(method, url, **httplib_request_kw)\n         conn.sock.settimeout(timeout)\n         httplib_response = conn.getresponse()\n \n+\n         log.debug(\"\\\"%s %s %s\\\" %s %s\" %\n                   (method, url,\n                    conn._http_vsn_str, # pylint: disable-msg=W0212\n@@ -276,14 +284,17 @@ class HTTPConnectionPool(ConnectionPool):\n             raise HostChangedError(\"Connection pool with host '%s' tried to \"\n                                    \"open a foreign host: %s\" % (host, url))\n \n-        # Request a connection from the queue\n-        conn = self._get_conn(timeout=pool_timeout)\n+        conn = None\n \n         try:\n+            # Request a connection from the queue\n+            # (Could raise SocketError: Bad file descriptor)\n+            conn = self._get_conn(timeout=pool_timeout)\n             # Make the request on the httplib connection object\n             httplib_response = self._make_request(conn, method, url,\n                                                   timeout=timeout,\n                                                   body=body, headers=headers)\n+            # print '!'\n \n             # Import httplib's response into our own wrapper object\n             response = HTTPResponse.from_httplib(httplib_response,\n@@ -291,8 +302,14 @@ class HTTPConnectionPool(ConnectionPool):\n                                                  connection=conn,\n                                                  **response_kw)\n \n+            if release_conn:\n+                # The connection will be released manually in the ``finally:``\n+                response.connection = None\n+\n+            # else:\n             #     The connection will be put back into the pool when\n-            # response.release_conn() is called (implicitly by response.read())\n+            #     ``response.release_conn()`` is called (implicitly by\n+            #     ``response.read()``)\n \n         except (SocketTimeout, Empty), e:\n             # Timed out either by socket or queue\n@@ -308,10 +325,9 @@ class HTTPConnectionPool(ConnectionPool):\n             conn = None\n \n         finally:\n-            if release_conn:\n+            if conn and release_conn:\n                 # Put the connection back to be reused\n-                response.release_conn() # Equivalent to self._put_conn(conn) but\n-                                        # tracks release state.\n+                self._put_conn(conn)\n \n         if not conn:\n             log.warn(\"Retrying (%d attempts remain) after connection \"\n@@ -399,7 +415,7 @@ class HTTPSConnectionPool(HTTPConnectionPool):\n                  strict=False, timeout=None, maxsize=1,\n                  block=False, headers=None,\n                  key_file=None, cert_file=None,\n-                 cert_reqs='CERT_NONE', ca_certs=None):\n+                 cert_reqs=ssl.CERT_REQUIRED, ca_certs=None):\n \n         super(HTTPSConnectionPool, self).__init__(host, port,\n                                                   strict, timeout, maxsize,\n@@ -413,6 +429,7 @@ class HTTPSConnectionPool(HTTPConnectionPool):\n         \"\"\"\n         Return a fresh HTTPSConnection.\n         \"\"\"\n+\n         self.num_connections += 1\n         log.info(\"Starting new HTTPS connection (%d): %s\"\n                  % (self.num_connections, self.host))\n\n@@ -1,3 +1,9 @@\n+# urllib3/contrib/ntlmpool.py\n+# Copyright 2008-2011 Andrey Petrov and contributors (see CONTRIBUTORS.txt)\n+#\n+# This module is part of urllib3 and is released under\n+# the MIT License: http://www.opensource.org/licenses/mit-license.php\n+\n \"\"\"\n NTLM authenticating pool, contributed by erikcederstran\n \n\n@@ -1,3 +1,9 @@\n+# urllib3/exceptions.py\n+# Copyright 2008-2011 Andrey Petrov and contributors (see CONTRIBUTORS.txt)\n+#\n+# This module is part of urllib3 and is released under\n+# the MIT License: http://www.opensource.org/licenses/mit-license.php\n+\n ## Exceptions\n \n class HTTPError(Exception):\n\n@@ -1,3 +1,9 @@\n+# urllib3/filepost.py\n+# Copyright 2008-2011 Andrey Petrov and contributors (see CONTRIBUTORS.txt)\n+#\n+# This module is part of urllib3 and is released under\n+# the MIT License: http://www.opensource.org/licenses/mit-license.php\n+\n import codecs\n import mimetools\n import mimetypes\n\n@@ -1,3 +1,9 @@\n+# urllib3/poolmanager.py\n+# Copyright 2008-2011 Andrey Petrov and contributors (see CONTRIBUTORS.txt)\n+#\n+# This module is part of urllib3 and is released under\n+# the MIT License: http://www.opensource.org/licenses/mit-license.php\n+\n from ._collections import RecentlyUsedContainer\n from .connectionpool import HTTPConnectionPool, HTTPSConnectionPool, get_host\n \n@@ -40,6 +46,7 @@ class PoolManager(object):\n         \"\"\"\n         pool_key = (scheme, host, port)\n \n+\n         # If the scheme, host, or port doesn't match existing open connections,\n         # open a new ConnectionPool.\n         pool = self.pools.get(pool_key)\n\n@@ -1,3 +1,9 @@\n+# urllib3/response.py\n+# Copyright 2008-2011 Andrey Petrov and contributors (see CONTRIBUTORS.txt)\n+#\n+# This module is part of urllib3 and is released under\n+# the MIT License: http://www.opensource.org/licenses/mit-license.php\n+\n import gzip\n import logging\n import zlib\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#e1c0646f95930cfbd1b404aa820eda3f9836080f", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 1 | Methods Changed: 2 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 885 | Contributors (this commit): 1 | Commits (past 90d): 8 | Contributors (cumulative): 1 | DMM Complexity: None\n\nDIFF:\n@@ -46,8 +46,8 @@ class VerifiedHTTPSConnection(HTTPSConnection):\n     SSL certification.\n     \"\"\"\n \n-    def __init__(self):\n-        HTTPSConnection.__init__()\n+    def __init__(self, **kwargs):\n+        HTTPSConnection.__init__(self, **kwargs)\n         self.cert_reqs = None\n         self.ca_certs = None\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#1997dee3d9f0933bca99b2065463ad0a7afc7f10", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 97 | Contributors (this commit): 1 | Commits (past 90d): 4 | Contributors (cumulative): 1 | DMM Complexity: None\n\nDIFF:\n@@ -15,7 +15,7 @@ pool_classes_by_scheme = {\n \n port_by_scheme = {\n     'http': 80,\n-    'https': 433,\n+    'https': 443,\n }\n \n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#0b475dd65487f2c14efa6f917657a0f1d19bae02", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 4 | Lines Deleted: 740 | Files Changed: 4 | Hunks: 4 | Methods Changed: 68 | Complexity Δ (Sum/Max): -15/0 | Churn Δ: 744 | Churn Cumulative: 1935 | Contributors (this commit): 2 | Commits (past 90d): 25 | Contributors (cumulative): 6 | DMM Complexity: 0.0\n\nDIFF:\n@@ -38,6 +38,7 @@ log = logging.getLogger(__name__)\n _Default = object()\n \n \n+\n ## Connection objects (extension of httplib)\n \n class VerifiedHTTPSConnection(HTTPSConnection):\n\n@@ -71,7 +71,9 @@ class PoolManager(object):\n \n         port = port or port_by_scheme.get(scheme, 80)\n \n-        return self.connection_from_host(host, port=port, scheme=scheme)\n+        r = self.connection_from_host(host, port=port, scheme=scheme)\n+        print r.__dict__\n+        return r\n \n     def urlopen(self, method, url, **kw):\n         \"Same as HTTP(S)ConnectionPool.urlopen, ``url`` must be absolute.\"\n\n@@ -1,530 +0,0 @@\n-#!/usr/bin/env python\n-# -*- coding: utf-8 -*-\n-\n-from __future__ import with_statement\n-\n-import unittest\n-import cookielib\n-\n-try:\n-    import omnijson as json\n-except ImportError:\n-    import json\n-\n-import requests\n-\n-from requests.sessions import Session\n-from requests.utils import curl_from_request\n-\n-\n-HTTPBIN_URL = 'http://httpbin.org/'\n-HTTPSBIN_URL = 'https://httpbin.ep.io/'\n-\n-# HTTPBIN_URL = 'http://staging.httpbin.org/'\n-# HTTPSBIN_URL = 'https://httpbin-staging.ep.io/'\n-\n-\n-def httpbin(*suffix):\n-    \"\"\"Returns url for HTTPBIN resource.\"\"\"\n-\n-    return HTTPBIN_URL + '/'.join(suffix)\n-\n-\n-def httpsbin(*suffix):\n-    \"\"\"Returns url for HTTPSBIN resource.\"\"\"\n-\n-    return HTTPSBIN_URL + '/'.join(suffix)\n-\n-\n-SERVICES = (httpbin, httpsbin)\n-\n-\n-\n-class RequestsTestSuite(unittest.TestCase):\n-    \"\"\"Requests test cases.\"\"\"\n-\n-\n-    def setUp(self):\n-        pass\n-\n-\n-    def tearDown(self):\n-        \"\"\"Teardown.\"\"\"\n-        pass\n-\n-\n-    def test_invalid_url(self):\n-        self.assertRaises(ValueError, requests.get, 'hiwpefhipowhefopw')\n-\n-\n-    def test_HTTP_200_OK_GET(self):\n-        r = requests.get(httpbin('/'))\n-        self.assertEqual(r.status_code, 200)\n-\n-    def test_HTTP_302_ALLOW_REDIRECT_GET(self):\n-\tr = requests.get(httpbin('redirect', '1'))\n-\tself.assertEqual(r.status_code, 200)\n-\n-    def test_HTTP_302_GET(self):\n-\tr = requests.get(httpbin('redirect', '1'), allow_redirects=False)\n-\tself.assertEqual(r.status_code, 302)\n-\n-    def test_HTTPS_200_OK_GET(self):\n-        r = requests.get(httpsbin('/'))\n-        self.assertEqual(r.status_code, 200)\n-\n-\n-    def test_HTTP_200_OK_GET_WITH_PARAMS(self):\n-        heads = {'User-agent': 'Mozilla/5.0'}\n-\n-        r = requests.get(httpbin('user-agent'), headers=heads)\n-\n-        assert heads['User-agent'] in r.content\n-        self.assertEqual(r.status_code, 200)\n-\n-\n-    def test_HTTP_200_OK_GET_WITH_MIXED_PARAMS(self):\n-        heads = {'User-agent': 'Mozilla/5.0'}\n-\n-        r = requests.get(httpbin('get') + '?test=true', params={'q': 'test'}, headers=heads)\n-        self.assertEqual(r.status_code, 200)\n-\n-\n-    def test_user_agent_transfers(self):\n-        \"\"\"Issue XX\"\"\"\n-\n-        heads = {\n-            'User-agent':\n-                'Mozilla/5.0 (github.com/kennethreitz/requests)'\n-        }\n-\n-        r = requests.get(httpbin('user-agent'), headers=heads);\n-        self.assertTrue(heads['User-agent'] in r.content)\n-\n-        heads = {\n-            'user-agent':\n-                'Mozilla/5.0 (github.com/kennethreitz/requests)'\n-        }\n-\n-        r = requests.get(httpbin('user-agent'), headers=heads);\n-        self.assertTrue(heads['user-agent'] in r.content)\n-\n-\n-    def test_HTTP_200_OK_HEAD(self):\n-        r = requests.head(httpbin('/'))\n-        self.assertEqual(r.status_code, 200)\n-\n-\n-    def test_HTTPS_200_OK_HEAD(self):\n-        r = requests.head(httpsbin('/'))\n-        self.assertEqual(r.status_code, 200)\n-\n-\n-    def test_HTTP_200_OK_PUT(self):\n-        r = requests.put(httpbin('put'))\n-        self.assertEqual(r.status_code, 200)\n-\n-\n-    def test_HTTPS_200_OK_PUT(self):\n-        r = requests.put(httpsbin('put'))\n-        self.assertEqual(r.status_code, 200)\n-\n-\n-    def test_HTTP_200_OK_PATCH(self):\n-        r = requests.patch(httpbin('patch'))\n-        self.assertEqual(r.status_code, 200)\n-\n-\n-    def test_HTTPS_200_OK_PATCH(self):\n-        r = requests.patch(httpsbin('patch'))\n-        self.assertEqual(r.status_code, 200)\n-\n-\n-    def test_AUTH_HTTP_200_OK_GET(self):\n-\n-        for service in SERVICES:\n-\n-            auth = ('user', 'pass')\n-            url = service('basic-auth', 'user', 'pass')\n-\n-            r = requests.get(url, auth=auth)\n-            # print r.__dict__\n-            self.assertEqual(r.status_code, 200)\n-\n-\n-            r = requests.get(url)\n-            self.assertEqual(r.status_code, 200)\n-\n-\n-    def test_POSTBIN_GET_POST_FILES(self):\n-\n-        for service in SERVICES:\n-\n-            url = service('post')\n-            post = requests.post(url).raise_for_status()\n-\n-            post = requests.post(url, data={'some': 'data'})\n-            self.assertEqual(post.status_code, 200)\n-\n-            post2 = requests.post(url, files={'some': open('test_requests.py')})\n-            self.assertEqual(post2.status_code, 200)\n-\n-            post3 = requests.post(url, data='[{\"some\": \"json\"}]')\n-            self.assertEqual(post3.status_code, 200)\n-\n-\n-    def test_POSTBIN_GET_POST_FILES_WITH_PARAMS(self):\n-\n-        for service in SERVICES:\n-\n-            url = service('post')\n-            post = requests.post(url,\n-                files={'some': open('test_requests.py')},\n-                data={'some': 'data'})\n-\n-            self.assertEqual(post.status_code, 200)\n-\n-\n-    def test_POSTBIN_GET_POST_FILES_WITH_HEADERS(self):\n-\n-        for service in SERVICES:\n-\n-            url = service('post')\n-\n-            post2 = requests.post(url,\n-                files={'some': open('test_requests.py')},\n-                headers = {'User-Agent': 'requests-tests'})\n-\n-            self.assertEqual(post2.status_code, 200)\n-\n-\n-    def test_nonzero_evaluation(self):\n-\n-        for service in SERVICES:\n-\n-            r = requests.get(service('status', '500'))\n-            self.assertEqual(bool(r), False)\n-\n-            r = requests.get(service('/'))\n-            self.assertEqual(bool(r), True)\n-\n-\n-    def test_request_ok_set(self):\n-\n-        for service in SERVICES:\n-\n-            r = requests.get(service('status', '404'))\n-            self.assertEqual(r.ok, False)\n-\n-\n-    def test_status_raising(self):\n-        r = requests.get(httpbin('status', '404'))\n-        self.assertRaises(requests.HTTPError, r.raise_for_status)\n-\n-        r = requests.get(httpbin('status', '200'))\n-        self.assertFalse(r.error)\n-        r.raise_for_status()\n-\n-\n-    def test_cookie_jar(self):\n-\n-        jar = cookielib.CookieJar()\n-        self.assertFalse(jar)\n-\n-        url = httpbin('cookies', 'set', 'requests_cookie', 'awesome')\n-        r = requests.get(url, cookies=jar)\n-        self.assertTrue(jar)\n-\n-        cookie_found = False\n-        for cookie in jar:\n-            if cookie.name == 'requests_cookie':\n-                self.assertEquals(cookie.value, 'awesome')\n-                cookie_found = True\n-        self.assertTrue(cookie_found)\n-\n-        r = requests.get(httpbin('cookies'), cookies=jar)\n-        self.assertTrue('awesome' in r.content)\n-\n-\n-    def test_decompress_gzip(self):\n-\n-        r = requests.get(httpbin('gzip'))\n-        r.content.decode('ascii')\n-\n-\n-    def test_unicode_get(self):\n-\n-        for service in SERVICES:\n-\n-            url = service('/')\n-\n-            requests.get(url, params={'foo': u'føø'})\n-            requests.get(url, params={u'føø': u'føø'})\n-            requests.get(url, params={'føø': 'føø'})\n-            requests.get(url, params={'foo': u'foo'})\n-            requests.get(service('ø'), params={'foo': u'foo'})\n-\n-\n-    def test_httpauth_recursion(self):\n-\n-        http_auth = ('user', 'BADpass')\n-\n-        for service in SERVICES:\n-            r = requests.get(service('basic-auth', 'user', 'pass'), auth=http_auth)\n-            self.assertEquals(r.status_code, 401)\n-\n-\n-    def test_settings(self):\n-\n-        def test():\n-            r = requests.get(httpbin(''))\n-            r.raise_for_status()\n-\n-        with requests.settings(timeout=0.0000001):\n-            self.assertRaises(requests.Timeout, test)\n-\n-        with requests.settings(timeout=100):\n-            requests.get(httpbin(''))\n-\n-\n-    def test_urlencoded_post_data(self):\n-\n-        for service in SERVICES:\n-\n-            r = requests.post(service('post'), data=dict(test='fooaowpeuf'))\n-\n-            self.assertEquals(r.status_code, 200)\n-            self.assertEquals(r.headers['content-type'], 'application/json')\n-            self.assertEquals(r.url, service('post'))\n-\n-            rbody = json.loads(r.content)\n-\n-            self.assertEquals(rbody.get('form'), dict(test='fooaowpeuf'))\n-            self.assertEquals(rbody.get('data'), '')\n-\n-\n-    def test_nonurlencoded_post_data(self):\n-\n-        for service in SERVICES:\n-\n-            r = requests.post(service('post'), data='fooaowpeuf')\n-\n-            self.assertEquals(r.status_code, 200)\n-            self.assertEquals(r.headers['content-type'], 'application/json')\n-            self.assertEquals(r.url, service('post'))\n-\n-            rbody = json.loads(r.content)\n-            # Body wasn't valid url encoded data, so the server returns None as\n-            # \"form\" and the raw body as \"data\".\n-            self.assertEquals(rbody.get('form'), None)\n-            self.assertEquals(rbody.get('data'), 'fooaowpeuf')\n-\n-\n-    def test_urlencoded_post_querystring(self):\n-\n-        for service in SERVICES:\n-\n-            r = requests.post(service('post'), params=dict(test='fooaowpeuf'))\n-\n-            self.assertEquals(r.status_code, 200)\n-            self.assertEquals(r.headers['content-type'], 'application/json')\n-            self.assertEquals(r.url, service('post?test=fooaowpeuf'))\n-\n-            rbody = json.loads(r.content)\n-            self.assertEquals(rbody.get('form'), {}) # No form supplied\n-            self.assertEquals(rbody.get('data'), '')\n-\n-\n-    def test_nonurlencoded_post_querystring(self):\n-\n-        for service in SERVICES:\n-\n-            r = requests.post(service('post'), params='fooaowpeuf')\n-\n-            self.assertEquals(r.status_code, 200)\n-            self.assertEquals(r.headers['content-type'], 'application/json')\n-            self.assertEquals(r.url, service('post?fooaowpeuf'))\n-\n-            rbody = json.loads(r.content)\n-            self.assertEquals(rbody.get('form'), {}) # No form supplied\n-            self.assertEquals(rbody.get('data'), '')\n-\n-\n-    def test_urlencoded_post_query_and_data(self):\n-\n-        for service in SERVICES:\n-\n-            r = requests.post(\n-                service('post'),\n-                params=dict(test='fooaowpeuf'),\n-                data=dict(test2=\"foobar\"))\n-\n-            self.assertEquals(r.status_code, 200)\n-            self.assertEquals(r.headers['content-type'], 'application/json')\n-            self.assertEquals(r.url, service('post?test=fooaowpeuf'))\n-\n-            rbody = json.loads(r.content)\n-            self.assertEquals(rbody.get('form'), dict(test2='foobar'))\n-            self.assertEquals(rbody.get('data'), '')\n-\n-\n-    def test_nonurlencoded_post_query_and_data(self):\n-\n-        for service in SERVICES:\n-\n-            r = requests.post(service('post'),\n-                params='fooaowpeuf', data=\"foobar\")\n-\n-            self.assertEquals(r.status_code, 200)\n-            self.assertEquals(r.headers['content-type'], 'application/json')\n-            self.assertEquals(r.url, service('post?fooaowpeuf'))\n-\n-            rbody = json.loads(r.content)\n-\n-            self.assertEquals(rbody.get('form'), None)\n-            self.assertEquals(rbody.get('data'), 'foobar')\n-\n-\n-    def test_idna(self):\n-        r = requests.get(u'http://➡.ws/httpbin')\n-        assert 'httpbin' in r.url\n-\n-\n-    def test_urlencoded_get_query_multivalued_param(self):\n-\n-        for service in SERVICES:\n-\n-            r = requests.get(service('get'), params=dict(test=['foo','baz']))\n-            self.assertEquals(r.status_code, 200)\n-            self.assertEquals(r.url, service('get?test=foo&test=baz'))\n-\n-\n-    def test_urlencoded_post_querystring_multivalued(self):\n-\n-        for service in SERVICES:\n-\n-            r = requests.post(service('post'), params=dict(test=['foo','baz']))\n-            self.assertEquals(r.status_code, 200)\n-            self.assertEquals(r.headers['content-type'], 'application/json')\n-            self.assertEquals(r.url, service('post?test=foo&test=baz'))\n-\n-            rbody = json.loads(r.content)\n-            self.assertEquals(rbody.get('form'), {}) # No form supplied\n-            self.assertEquals(rbody.get('data'), '')\n-\n-\n-    def test_urlencoded_post_query_multivalued_and_data(self):\n-\n-        for service in SERVICES:\n-\n-            r = requests.post(\n-                service('post'),\n-                params=dict(test=['foo','baz']),\n-                data=dict(test2=\"foobar\",test3=['foo','baz']))\n-\n-            self.assertEquals(r.status_code, 200)\n-            self.assertEquals(r.headers['content-type'], 'application/json')\n-            self.assertEquals(r.url, service('post?test=foo&test=baz'))\n-            rbody = json.loads(r.content)\n-            self.assertEquals(rbody.get('form'), dict(test2='foobar',test3='foo'))\n-            self.assertEquals(rbody.get('data'), '')\n-\n-\n-    def test_redirect_history(self):\n-\n-        for service in SERVICES:\n-\n-            r = requests.get(service('redirect', '3'))\n-            self.assertEquals(r.status_code, 200)\n-            self.assertEquals(len(r.history), 3)\n-\n-\n-    def test_relative_redirect_history(self):\n-\n-        for service in SERVICES:\n-\n-            r = requests.get(service('relative-redirect', '3'))\n-            self.assertEquals(r.status_code, 200)\n-            self.assertEquals(len(r.history), 3)\n-\n-\n-    def test_session_HTTP_200_OK_GET(self):\n-\n-        s = Session()\n-        r = s.get(httpbin('/'))\n-        self.assertEqual(r.status_code, 200)\n-\n-\n-    def test_session_HTTPS_200_OK_GET(self):\n-\n-        s = Session()\n-        r = s.get(httpsbin('/'))\n-        self.assertEqual(r.status_code, 200)\n-\n-\n-    def test_session_persistent_headers(self):\n-\n-        heads = {'User-agent': 'Mozilla/5.0'}\n-\n-        s = Session()\n-        s.headers = heads\n-        # Make 2 requests from Session object, should send header both times\n-        r1 = s.get(httpbin('user-agent'))\n-\n-        assert heads['User-agent'] in r1.content\n-        r2 = s.get(httpbin('user-agent'))\n-\n-        assert heads['User-agent'] in r2.content\n-        self.assertEqual(r2.status_code, 200)\n-\n-\n-\n-    def test_curl_HTTP_OK_GET(self):\n-        curl_str = 'curl -L -X GET -H \"Accept-Encoding:gzip\" -H \"User-Agent:python-requests.org\" \"http://httpbin.org//\"'\n-        r = requests.get(httpbin('/'))\n-        self.assertEqual(curl_from_request(r.request), curl_str)\n-\n-\n-    def test_curl_HTTP_OK_GET_WITH_PARAMS(self):\n-        curl_str = 'curl -L -X GET -H \"Accept-Encoding:gzip\" -H \"User-agent:Mozilla/5.0\" \"http://httpbin.org/user-agent\"'\n-\n-        heads = {'User-agent': 'Mozilla/5.0'}\n-        r = requests.get(httpbin('user-agent'), headers=heads)\n-        self.assertEqual(curl_from_request(r.request), curl_str)\n-\n-\n-    def test_curl_HTTP_OK_HEAD(self):\n-        curl_str ='curl -L -I -H \"Accept-Encoding:gzip\" -H \"User-Agent:python-requests.org\" \"http://httpbin.org//\"'\n-        r = requests.head(httpbin('/'))\n-        self.assertEqual(curl_from_request(r.request), curl_str)\n-\n-\n-    def test_curl_HTTP_OK_PATCH(self):\n-        curl_str = 'curl -L -X PATCH -H \"Accept-Encoding:gzip\" -H \"User-Agent:python-requests.org\" \"http://httpbin.org/patch\"'\n-        r = requests.patch(httpbin('patch'))\n-        self.assertEqual(curl_from_request(r.request), curl_str)\n-\n-\n-    def test_curl_AUTH_HTTPS_OK_GET(self):\n-        curl_str = 'curl -L -u \"user:pass\" -X GET -H \"Accept-Encoding:gzip\" -H \"User-Agent:python-requests.org\" \"https://httpbin.ep.io/basic-auth/user/pass\"'\n-        auth = ('user', 'pass')\n-        r = requests.get(httpsbin('basic-auth', 'user', 'pass'), auth=auth)\n-        self.assertEqual(curl_from_request(r.request), curl_str)\n-\n-\n-    def test_curl_POSTBIN_GET_POST_FILES(self):\n-       curl_str = 'curl -L -X POST -H \"Accept-Encoding:gzip\" -H \"User-Agent:python-requests.org\" -d \"some=data\" \"http://httpbin.org/post\"'\n-       post = requests.post(httpbin('post'), data={'some': 'data'})\n-       self.assertEqual(curl_from_request(post.request), curl_str)\n-\n-       curl_str = 'curl -L -X POST -H \"Accept-Encoding:gzip\" -H \"User-Agent:python-requests.org\" -F \"some=@test_requests.py\" \"https://httpbin.ep.io/post\"'\n-       post2 = requests.post(httpsbin('post'), files={'some': open('test_requests.py')})\n-       self.assertEqual(curl_from_request(post2.request), curl_str)\n-\n-       curl_str = 'curl -L -X POST -H \"Accept-Encoding:gzip\" -H \"User-Agent:python-requests.org\" -d \\'[{\"some\": \"json\"}]\\' \"http://httpbin.org/post\"'\n-       post3 = requests.post(httpbin('post'), data='[{\"some\": \"json\"}]')\n-       self.assertEqual(curl_from_request(post3.request), curl_str)\n-\n-\n-if __name__ == '__main__':\n-    unittest.main()\n\n@@ -1,209 +0,0 @@\n-#!/usr/bin/env python\n-# -*- coding: utf-8 -*-\n-import unittest\n-import mock\n-import sys\n-import os\n-sys.path.append(os.getcwd())\n-\n-try:\n-    import omnijson as json\n-except ImportError:\n-    import json\n-\n-import requests\n-from requests.models import Response\n-\n-class RequestsAPIUnitTests(unittest.TestCase):\n-    \"\"\"Requests API unit test cases.\"\"\"\n-\n-    def setUp(self):\n-        pass\n-\n-\n-    def tearDown(self):\n-        \"\"\"Teardown.\"\"\"\n-        pass\n-\n-\n-    @mock.patch('requests.api.dispatch_hook')\n-    @mock.patch('requests.api.Request')\n-    @mock.patch('requests.api.cookiejar_from_dict')\n-    def test_request(self, mock_cjar, mock_request, mock_hook):\n-        args = dict(\n-                    method = None,\n-                    url = None,\n-                    data = None,\n-                    params = None,\n-                    headers = None,\n-                    cookiejar = None,\n-                    files = None,\n-                    auth = None,\n-                    timeout = 1,\n-                    allow_redirects = None,\n-                    proxies = None,\n-                   )\n-        hooks = {'args': args, 'pre_request': mock_request,\n-                 'post_request': mock_request, 'response': 'response'}\n-        sideeffect = lambda x,y,z: hooks[x]\n-        mock_cjar.return_value = None\n-        mock_request.send = mock.Mock(return_value={})\n-        mock_request.response = \"response\"\n-        mock_hook.side_effect = sideeffect\n-\n-        r = requests.request('get','http://google.com')\n-\n-\n-        mock_cjar.assert_called_once_with({})\n-        mock_hook.assert_called__with('args', None, args)\n-        mock_request.assert_called_once_with(**args)\n-        mock_hook.assert_called__with('pre_request', None, mock_request)\n-        mock_request.send.assert_called_once_with()\n-        mock_hook.assert_called__with('post_request', None, mock_request)\n-        mock_hook.assert_called__with('response', None, mock_request)\n-        self.assertEqual(r, \"response\")\n-\n-\n-\n-    @mock.patch('requests.api.request')\n-    def test_http_get(self, mock_request):\n-        mock_request.return_value = Response()\n-        requests.get('http://google.com')\n-        mock_request.assert_called_once_with('get', 'http://google.com',\n-                                             allow_redirects= True)\n-\n-    @mock.patch('requests.api.request')\n-    def test_http_get_with_kwargs(self, mock_request):\n-        mock_request.return_value = Response()\n-        requests.get('http://google.com',\n-                     params=\"params\", data=\"data\", headers=\"headers\",\n-                     cookies=\"cookies\",\n-                     files=\"files\", auth=\"auth\", timeout=\"timeout\",\n-                     allow_redirects=False,\n-                     proxies=\"proxies\", hooks=\"hooks\")\n-        mock_request.assert_called_once_with('get', 'http://google.com',\n-                     params=\"params\", data=\"data\", headers=\"headers\",\n-                     cookies=\"cookies\",\n-                     files=\"files\", auth=\"auth\", timeout=\"timeout\",\n-                     allow_redirects=False,\n-                     proxies=\"proxies\", hooks=\"hooks\")\n-\n-    @mock.patch('requests.api.request')\n-    def test_http_head(self, mock_request):\n-        mock_request.return_value = Response()\n-        requests.head('http://google.com')\n-        mock_request.assert_called_once_with('head', 'http://google.com',\n-                                             allow_redirects= True)\n-\n-    @mock.patch('requests.api.request')\n-    def test_http_head_with_kwargs(self, mock_request):\n-        mock_request.return_value = Response()\n-        requests.head('http://google.com',\n-                     params=\"params\", data=\"data\", headers=\"headers\",\n-                     cookies=\"cookies\",\n-                     files=\"files\", auth=\"auth\", timeout=\"timeout\",\n-                     allow_redirects=False,\n-                     proxies=\"proxies\", hooks=\"hooks\")\n-        mock_request.assert_called_once_with('head', 'http://google.com',\n-                     params=\"params\", data=\"data\", headers=\"headers\",\n-                     cookies=\"cookies\",\n-                     files=\"files\", auth=\"auth\", timeout=\"timeout\",\n-                     allow_redirects=False,\n-                     proxies=\"proxies\", hooks=\"hooks\")\n-\n-    @mock.patch('requests.api.request')\n-    def test_http_post(self, mock_request):\n-        mock_request.return_value = Response()\n-        requests.post('http://google.com', {})\n-        mock_request.assert_called_once_with('post', 'http://google.com',\n-                                              data= {})\n-\n-    @mock.patch('requests.api.request')\n-    def test_http_post_with_kwargs(self, mock_request):\n-        mock_request.return_value = Response()\n-        requests.post('http://google.com',\n-                     params=\"params\", data=\"data\", headers=\"headers\",\n-                     cookies=\"cookies\",\n-                     files=\"files\", auth=\"auth\", timeout=\"timeout\",\n-                     allow_redirects=False,\n-                     proxies=\"proxies\", hooks=\"hooks\")\n-        mock_request.assert_called_once_with('post', 'http://google.com',\n-                     params=\"params\", data=\"data\", headers=\"headers\",\n-                     cookies=\"cookies\",\n-                     files=\"files\", auth=\"auth\", timeout=\"timeout\",\n-                     allow_redirects=False,\n-                     proxies=\"proxies\", hooks=\"hooks\")\n-\n-\n-    @mock.patch('requests.api.request')\n-    def test_http_put(self, mock_request):\n-        mock_request.return_value = Response()\n-        requests.put('http://google.com', {})\n-        mock_request.assert_called_once_with('put', 'http://google.com',\n-                                             data= {})\n-\n-    @mock.patch('requests.api.request')\n-    def test_http_put_with_kwargs(self, mock_request):\n-        mock_request.return_value = Response()\n-        requests.put('http://google.com',\n-                     params=\"params\", data=\"data\", headers=\"headers\",\n-                     cookies=\"cookies\",\n-                     files=\"files\", auth=\"auth\", timeout=\"timeout\",\n-                     allow_redirects=False,\n-                     proxies=\"proxies\", hooks=\"hooks\")\n-        mock_request.assert_called_once_with('put', 'http://google.com',\n-                     params=\"params\", data=\"data\", headers=\"headers\",\n-                     cookies=\"cookies\",\n-                     files=\"files\", auth=\"auth\", timeout=\"timeout\",\n-                     allow_redirects=False,\n-                     proxies=\"proxies\", hooks=\"hooks\")\n-\n-\n-    @mock.patch('requests.api.request')\n-    def test_http_patch(self, mock_request):\n-        mock_request.return_value = Response()\n-        requests.patch('http://google.com', {})\n-        mock_request.assert_called_once_with('patch', 'http://google.com',\n-                                             data= {})\n-\n-    @mock.patch('requests.api.request')\n-    def test_http_patch_with_kwargs(self, mock_request):\n-        mock_request.return_value = Response()\n-        requests.patch('http://google.com',\n-                     params=\"params\", data=\"data\", headers=\"headers\",\n-                     cookies=\"cookies\",\n-                     files=\"files\", auth=\"auth\", timeout=\"timeout\",\n-                     allow_redirects=False,\n-                     proxies=\"proxies\", hooks=\"hooks\")\n-        mock_request.assert_called_once_with('patch', 'http://google.com',\n-                     params=\"params\", data=\"data\", headers=\"headers\",\n-                     cookies=\"cookies\",\n-                     files=\"files\", auth=\"auth\", timeout=\"timeout\",\n-                     allow_redirects=False,\n-                     proxies=\"proxies\", hooks=\"hooks\")\n-\n-    @mock.patch('requests.api.request')\n-    def test_http_delete(self, mock_request):\n-        mock_request.return_value = Response()\n-        requests.delete('http://google.com')\n-        mock_request.assert_called_once_with('delete', 'http://google.com')\n-\n-    @mock.patch('requests.api.request')\n-    def test_http_delete_with_kwargs(self, mock_request):\n-        mock_request.return_value = Response()\n-        requests.delete('http://google.com',\n-                     params=\"params\", data=\"data\", headers=\"headers\",\n-                     cookies=\"cookies\",\n-                     files=\"files\", auth=\"auth\", timeout=\"timeout\",\n-                     allow_redirects=False,\n-                     proxies=\"proxies\", hooks=\"hooks\")\n-        mock_request.assert_called_once_with('delete', 'http://google.com',\n-                     params=\"params\", data=\"data\", headers=\"headers\",\n-                     cookies=\"cookies\",\n-                     files=\"files\", auth=\"auth\", timeout=\"timeout\",\n-                     allow_redirects=False,\n-                     proxies=\"proxies\", hooks=\"hooks\")\n-\n-\n-if __name__ == '__main__':\n-    unittest.main()\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
