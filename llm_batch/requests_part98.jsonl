{"custom_id": "requests#2d211d59a02accf250f50ddf8cf4dc2d5eeb16d7", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 35/35 | Churn Δ: 2 | Churn Cumulative: 3879 | Contributors (this commit): 48 | Commits (past 90d): 18 | Contributors (cumulative): 48 | DMM Complexity: None\n\nDIFF:\n@@ -1871,7 +1871,7 @@ class TestTimeout:\n     @pytest.mark.parametrize(\n         'timeout, error_text', (\n             ((3, 4, 5), '(connect, read)'),\n-            ('foo', 'must be an int or float'),\n+            ('foo', 'must be an int, float or None'),\n         ))\n     def test_invalid_timeout(self, httpbin, timeout, error_text):\n         with pytest.raises(ValueError) as e:\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#362da46e9a46da6e86e1907f03014384ab210151", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 658 | Contributors (this commit): 16 | Commits (past 90d): 2 | Contributors (cumulative): 16 | DMM Complexity: None\n\nDIFF:\n@@ -41,8 +41,8 @@ is at <http://python-requests.org>.\n \"\"\"\n \n __title__ = 'requests'\n-__version__ = '2.11.1'\n-__build__ = 0x021101\n+__version__ = '2.12.0'\n+__build__ = 0x021200\n __author__ = 'Kenneth Reitz'\n __license__ = 'Apache 2.0'\n __copyright__ = 'Copyright 2016 Kenneth Reitz'\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#5bb01fbfe8dec618c630e39009930c6306135f33", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 2 | Methods Changed: 2 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 3883 | Contributors (this commit): 48 | Commits (past 90d): 19 | Contributors (cumulative): 48 | DMM Complexity: None\n\nDIFF:\n@@ -2116,7 +2116,7 @@ class TestPreparingURLs(object):\n         )\n     )\n     def test_preparing_url(self, url, expected):\n-        r = requests.Request(url=url)\n+        r = requests.Request('GET', url=url)\n         p = r.prepare()\n         assert p.url == expected\n \n@@ -2130,6 +2130,6 @@ class TestPreparingURLs(object):\n         )\n     )\n     def test_preparing_bad_url(self, url):\n-        r = requests.Request(url=url)\n+        r = requests.Request('GET', url=url)\n         with pytest.raises(requests.exceptions.InvalidURL):\n             r.prepare()\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#eaf9a688c5606577c2520b2decf03c56eb35e875", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 1177 | Contributors (this commit): 40 | Commits (past 90d): 2 | Contributors (cumulative): 40 | DMM Complexity: None\n\nDIFF:\n@@ -33,7 +33,7 @@ def request(method, url, **kwargs):\n         before giving up, as a float, or a :ref:`(connect timeout, read\n         timeout) <timeouts>` tuple.\n     :type timeout: float or tuple\n-    :param allow_redirects: (optional) Boolean. Set to True if POST/PUT/DELETE redirect following is allowed.\n+    :param allow_redirects: (optional) Boolean. Enable/disable GET/OPTIONS/POST/PUT/PATCH/DELETE/HEAD redirection.\n     :type allow_redirects: bool\n     :param proxies: (optional) Dictionary mapping protocol to the URL of the proxy.\n     :param verify: (optional) whether the SSL cert will be verified. A CA_BUNDLE path can also be provided. Defaults to ``True``.\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#9ec3478469744b475d0413e6400d4161e032e847", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 2 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 3 | Churn Cumulative: 508 | Contributors (this commit): 21 | Commits (past 90d): 4 | Contributors (cumulative): 21 | DMM Complexity: None\n\nDIFF:\n@@ -94,7 +94,8 @@ setup(\n     cmdclass={'test': PyTest},\n     tests_require=test_requirements,\n     extras_require={\n-        'security': ['pyOpenSSL>=0.13', 'ndg-httpsclient', 'pyasn1'],\n+        'security': ['pyOpenSSL>=0.14', 'cryptography>=1.3.4', 'idna>=2.0.0'],\n         'socks': ['PySocks>=1.5.6, !=1.5.7'],\n     },\n )\n+\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#e1b5e19c78e6230f04b5131c820689c17532be74", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 4 | Lines Deleted: 2 | Files Changed: 3 | Hunks: 4 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 6 | Churn Cumulative: 820 | Contributors (this commit): 10 | Commits (past 90d): 5 | Contributors (cumulative): 16 | DMM Complexity: None\n\nDIFF:\n@@ -32,7 +32,7 @@ except ImportError:\n \n __author__ = 'Andrey Petrov (andrey.petrov@shazow.net)'\n __license__ = 'MIT'\n-__version__ = '1.19'\n+__version__ = '1.19.1'\n \n __all__ = (\n     'HTTPConnectionPool',\n@@ -71,6 +71,7 @@ def add_stderr_logger(level=logging.DEBUG):\n     logger.debug('Added a stderr logging handler to logger: %s', __name__)\n     return handler\n \n+\n # ... Clean up.\n del NullHandler\n \n\n@@ -42,7 +42,7 @@ from __future__ import absolute_import\n import logging\n import os\n import warnings\n-from urlparse import urljoin\n+from ..packages.six.moves.urllib.parse import urljoin\n \n from ..exceptions import (\n     HTTPError,\n\n@@ -141,4 +141,5 @@ def _has_ipv6(host):\n         sock.close()\n     return has_ipv6\n \n+\n HAS_IPV6 = _has_ipv6('::1')\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#eb39a557bde2ea9f72733f9e98227b057d675892", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 662 | Contributors (this commit): 16 | Commits (past 90d): 2 | Contributors (cumulative): 16 | DMM Complexity: None\n\nDIFF:\n@@ -41,8 +41,8 @@ is at <http://python-requests.org>.\n \"\"\"\n \n __title__ = 'requests'\n-__version__ = '2.12.0'\n-__build__ = 0x021200\n+__version__ = '2.12.1'\n+__build__ = 0x021201\n __author__ = 'Kenneth Reitz'\n __license__ = 'Apache 2.0'\n __copyright__ = 'Copyright 2016 Kenneth Reitz'\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#248d3e9f0f8ea1657d9329f8b188a81ca2a65ecc", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 8 | Lines Deleted: 0 | Files Changed: 2 | Hunks: 2 | Methods Changed: 2 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 8 | Churn Cumulative: 13459 | Contributors (this commit): 186 | Commits (past 90d): 32 | Contributors (cumulative): 217 | DMM Complexity: 0.75\n\nDIFF:\n@@ -343,6 +343,9 @@ class PreparedRequest(RequestEncodingMixin, RequestHooksMixin):\n         else:\n             url = unicode(url) if is_py2 else str(url)\n \n+        # Remove leading and trailing whitespaces from url\n+        url = url.strip()\n+\n         # Don't do any URL preparation for non-HTTP schemes like `mailto`,\n         # `data` etc to work around exceptions from `url_parse`, which\n         # handles RFC 3986 only.\n\n@@ -140,6 +140,11 @@ class TestRequests:\n                                    data=u\"ööö\".encode(\"utf-8\")).prepare()\n         assert isinstance(request.body, bytes)\n \n+    def test_whitespaces_are_removed_from_url(self):\n+        # Test for issue #3696\n+        request = requests.Request('GET', ' http://example.com ').prepare()\n+        assert request.url == 'http://example.com/'\n+\n     @pytest.mark.parametrize('scheme', ('http://', 'HTTP://', 'hTTp://', 'HttP://'))\n     def test_mixed_case_scheme_acceptable(self, httpbin, scheme):\n         s = requests.Session()\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#0d7de50dbd7eacb0242506454363c71925d7241a", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 9575 | Contributors (this commit): 168 | Commits (past 90d): 13 | Contributors (cumulative): 168 | DMM Complexity: None\n\nDIFF:\n@@ -343,8 +343,8 @@ class PreparedRequest(RequestEncodingMixin, RequestHooksMixin):\n         else:\n             url = unicode(url) if is_py2 else str(url)\n \n-        # Remove leading and trailing whitespaces from url\n-        url = url.strip()\n+        # Remove leading whitespaces from url\n+        url = url.lstrip()\n \n         # Don't do any URL preparation for non-HTTP schemes like `mailto`,\n         # `data` etc to work around exceptions from `url_parse`, which\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#329a5cfdd4500fb1ce405a3242ef95f9197d24ba", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 5 | Lines Deleted: 5 | Files Changed: 1 | Hunks: 3 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 10 | Churn Cumulative: 1509 | Contributors (this commit): 44 | Commits (past 90d): 3 | Contributors (cumulative): 44 | DMM Complexity: None\n\nDIFF:\n@@ -28,14 +28,14 @@ CONTENT_TYPE_MULTI_PART = 'multipart/form-data'\n def _basic_auth_str(username, password):\n     \"\"\"Returns a Basic Auth string.\"\"\"\n     \n-    if isinstance(username, bytes):\n-        username = username.decode('latin1')\n+    if isinstance(username, str):\n+        username = username.encode('latin1')\n \n-    if isinstance(password, bytes):\n-        password = password.decode('latin1')\n+    if isinstance(password, str):\n+        password = password.encode('latin1')\n \n     authstr = 'Basic ' + to_native_string(\n-        b64encode(('%s:%s' % (username, password)).encode('latin1')).strip()\n+        b64encode(b':'.join((username, password))).strip()\n     )\n \n     return authstr\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#2185fac6261bd4a3e625f7bdb267696d7ba1bf56", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 1511 | Contributors (this commit): 44 | Commits (past 90d): 4 | Contributors (cumulative): 44 | DMM Complexity: None\n\nDIFF:\n@@ -15,7 +15,7 @@ import threading\n \n from base64 import b64encode\n \n-from .compat import urlparse, str, bytes\n+from .compat import urlparse, str\n from .cookies import extract_cookies_to_jar\n from ._internal_utils import to_native_string\n from .utils import parse_dict_header\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#37bde4b63869ad4635cbb9953a7d0c229f30daa1", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 8 | Lines Deleted: 3 | Files Changed: 1 | Hunks: 1 | Methods Changed: 2 | Complexity Δ (Sum/Max): -1/0 | Churn Δ: 11 | Churn Cumulative: 3899 | Contributors (this commit): 50 | Commits (past 90d): 21 | Contributors (cumulative): 50 | DMM Complexity: None\n\nDIFF:\n@@ -460,9 +460,14 @@ class TestRequests:\n         r = requests.put(httpbin('put'))\n         assert r.status_code == 200\n \n-    def test_BASICAUTH_TUPLE_HTTP_200_OK_GET(self, httpbin):\n-        auth = ('user', 'pass')\n-        url = httpbin('basic-auth', 'user', 'pass')\n+    @pytest.mark.parametrize(\n+        'username, password', (\n+            ('user', 'pass'),\n+            ('имя'.encode('utf-8'), 'пароль'.encode('utf-8')),\n+        ))\n+    def test_BASICAUTH_TUPLE_HTTP_200_OK_GET(self, httpbin, username, password):\n+        auth = (username, password)\n+        url = httpbin('basic-auth', username, password)\n \n         r = requests.get(url, auth=auth)\n         assert r.status_code == 200\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#bf3e960e159ad19af557b26abdf633b7b8117cad", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 3901 | Contributors (this commit): 50 | Commits (past 90d): 22 | Contributors (cumulative): 50 | DMM Complexity: None\n\nDIFF:\n@@ -463,7 +463,7 @@ class TestRequests:\n     @pytest.mark.parametrize(\n         'username, password', (\n             ('user', 'pass'),\n-            ('имя'.encode('utf-8'), 'пароль'.encode('utf-8')),\n+            (u'имя'.encode('utf-8'), u'пароль'.encode('utf-8')),\n         ))\n     def test_BASICAUTH_TUPLE_HTTP_200_OK_GET(self, httpbin, username, password):\n         auth = (username, password)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#7c4821231fcd8af8ef1cd835713933ef3ae58032", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 10 | Lines Deleted: 5 | Files Changed: 1 | Hunks: 3 | Methods Changed: 2 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 15 | Churn Cumulative: 3916 | Contributors (this commit): 50 | Commits (past 90d): 22 | Contributors (cumulative): 50 | DMM Complexity: 1.0\n\nDIFF:\n@@ -461,13 +461,18 @@ class TestRequests:\n         assert r.status_code == 200\n \n     @pytest.mark.parametrize(\n-        'username, password', (\n-            ('user', 'pass'),\n-            (u'имя'.encode('utf-8'), u'пароль'.encode('utf-8')),\n+        'username, password, auth_str', (\n+            ('user', 'pass', 'Basic dXNlcjpwYXNz'),\n+            (u'имя'.encode('utf-8'), u'пароль'.encode('utf-8'), 'Basic 0LjQvNGPOtC/0LDRgNC+0LvRjA=='),\n         ))\n-    def test_BASICAUTH_TUPLE_HTTP_200_OK_GET(self, httpbin, username, password):\n+    def test_BASICAUTH_TUPLE_HTTP_200_OK_GET(self, httpbin, username, password, auth_str):\n         auth = (username, password)\n-        url = httpbin('basic-auth', username, password)\n+        url = httpbin('get')\n+        \n+        r = Request('GET', url, auth=auth)\n+        p = r.prepare()\n+\n+        assert p['Authorization'] == auth_str\n         \n         r = requests.get(url, auth=auth)\n         assert r.status_code == 200\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#4f0efdb77e33b340ae9e478c456634ef628e665a", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 12 | Lines Deleted: 7 | Files Changed: 1 | Hunks: 4 | Methods Changed: 3 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 19 | Churn Cumulative: 3935 | Contributors (this commit): 50 | Commits (past 90d): 23 | Contributors (cumulative): 50 | DMM Complexity: None\n\nDIFF:\n@@ -461,9 +461,9 @@ class TestRequests:\n         assert r.status_code == 200\n \n     @pytest.mark.parametrize(\n-        'username, password, auth_str', (\n-            ('user', 'pass', 'Basic dXNlcjpwYXNz'),\n-            (u'имя'.encode('utf-8'), u'пароль'.encode('utf-8'), 'Basic 0LjQvNGPOtC/0LDRgNC+0LvRjA=='),\n+        'username, password', (\n+            ('user', 'pass'),\n+            (u'имя'.encode('utf-8'), u'пароль'.encode('utf-8')),\n         ))\n     def test_BASICAUTH_TUPLE_HTTP_200_OK_GET(self, httpbin, username, password, auth_str):\n         auth = (username, password)\n@@ -472,7 +472,7 @@ class TestRequests:\n         r = Request('GET', url, auth=auth)\n         p = r.prepare()\n \n-        assert p['Authorization'] == auth_str\n+        assert p['Authorization'] == _basic_auth_str(username, password)\n         \n         r = requests.get(url, auth=auth)\n         assert r.status_code == 200\n@@ -1578,10 +1578,15 @@ class TestRequests:\n         self._patch_adapter_gzipped_redirect(s, url)\n         s.get(url)\n \n-    def test_basic_auth_str_is_always_native(self):\n-        s = _basic_auth_str(\"test\", \"test\")\n+    @pytest.mark.parametrize(\n+        'username, password, auth_str', (\n+            ('test', 'test', 'Basic dGVzdDp0ZXN0'),\n+            (u'имя'.encode('utf-8'), u'пароль'.encode('utf-8'), 'Basic 0LjQvNGPOtC/0LDRgNC+0LvRjA=='),\n+        ))    \n+    def test_basic_auth_str_is_always_native(self, username, password, auth_str):\n+        s = _basic_auth_str(username, password)\n         assert isinstance(s, builtin_str)\n-        assert s == \"Basic dGVzdDp0ZXN0\"\n+        assert s == auth_str\n \n     def test_requests_history_is_saved(self, httpbin):\n         r = requests.get(httpbin('redirect/5'))\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#55dea233ce52457ff35654b9a01f188e0e695304", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 3 | Lines Deleted: 3 | Files Changed: 1 | Hunks: 3 | Methods Changed: 2 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 6 | Churn Cumulative: 3941 | Contributors (this commit): 50 | Commits (past 90d): 24 | Contributors (cumulative): 50 | DMM Complexity: None\n\nDIFF:\n@@ -465,14 +465,14 @@ class TestRequests:\n             ('user', 'pass'),\n             (u'имя'.encode('utf-8'), u'пароль'.encode('utf-8')),\n         ))\n-    def test_BASICAUTH_TUPLE_HTTP_200_OK_GET(self, httpbin, username, password, auth_str):\n+    def test_BASICAUTH_TUPLE_HTTP_200_OK_GET(self, httpbin, username, password):\n         auth = (username, password)\n         url = httpbin('get')\n \n-        r = Request('GET', url, auth=auth)\n+        r = requests.Request('GET', url, auth=auth)\n         p = r.prepare()\n \n-        assert p['Authorization'] == _basic_auth_str(username, password)\n+        assert p.headers['Authorization'] == _basic_auth_str(username, password)\n         \n         r = requests.get(url, auth=auth)\n         assert r.status_code == 200\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#e15280e49d9ee15bd7b5f3a00862d5f0a720b8e1", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 13 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): 2/2 | Churn Δ: 15 | Churn Cumulative: 3956 | Contributors (this commit): 50 | Commits (past 90d): 25 | Contributors (cumulative): 50 | DMM Complexity: 1.0\n\nDIFF:\n@@ -18,7 +18,7 @@ from requests.adapters import HTTPAdapter\n from requests.auth import HTTPDigestAuth, _basic_auth_str\n from requests.compat import (\n     Morsel, cookielib, getproxies, str, urlparse,\n-    builtin_str, OrderedDict)\n+    builtin_str, OrderedDict, bytes)\n from requests.cookies import (\n     cookiejar_from_dict, morsel_to_cookie, merge_cookies)\n from requests.exceptions import (\n@@ -467,7 +467,18 @@ class TestRequests:\n         ))\n     def test_BASICAUTH_TUPLE_HTTP_200_OK_GET(self, httpbin, username, password):\n         auth = (username, password)\n-        url = httpbin('get')\n+        \n+        if isinstance(username, bytes):\n+            httpbin_username = username.decode('latin1')\n+        else:\n+            httpbin_username = username\n+\n+        if isinstance(password, bytes):\n+            httpbin_password = password.decode('latin1')\n+        else:\n+            httpbin_password = password\n+\n+        url = httpbin('basic-auth', httpbin_username, httpbin_password)\n \n         r = requests.Request('GET', url, auth=auth)\n         p = r.prepare()\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#3b84be3c99edf49c4770882b83726b98751ec1c3", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 24 | Files Changed: 1 | Hunks: 3 | Methods Changed: 1 | Complexity Δ (Sum/Max): -2/0 | Churn Δ: 26 | Churn Cumulative: 3982 | Contributors (this commit): 50 | Commits (past 90d): 26 | Contributors (cumulative): 50 | DMM Complexity: 0.0\n\nDIFF:\n@@ -18,7 +18,7 @@ from requests.adapters import HTTPAdapter\n from requests.auth import HTTPDigestAuth, _basic_auth_str\n from requests.compat import (\n     Morsel, cookielib, getproxies, str, urlparse,\n-    builtin_str, OrderedDict, bytes)\n+    builtin_str, OrderedDict)\n from requests.cookies import (\n     cookiejar_from_dict, morsel_to_cookie, merge_cookies)\n from requests.exceptions import (\n@@ -467,35 +467,13 @@ class TestRequests:\n         ))\n     def test_BASICAUTH_TUPLE_HTTP_200_OK_GET(self, httpbin, username, password):\n         auth = (username, password)\n-        \n-        if isinstance(username, bytes):\n-            httpbin_username = username.decode('latin1')\n-        else:\n-            httpbin_username = username\n-\n-        if isinstance(password, bytes):\n-            httpbin_password = password.decode('latin1')\n-        else:\n-            httpbin_password = password\n-\n-        url = httpbin('basic-auth', httpbin_username, httpbin_password)\n+        url = httpbin('get')\n \n         r = requests.Request('GET', url, auth=auth)\n         p = r.prepare()\n \n         assert p.headers['Authorization'] == _basic_auth_str(username, password)\n \n-        r = requests.get(url, auth=auth)\n-        assert r.status_code == 200\n-\n-        r = requests.get(url)\n-        assert r.status_code == 401\n-\n-        s = requests.session()\n-        s.auth = auth\n-        r = s.get(url)\n-        assert r.status_code == 200\n-\n     @pytest.mark.parametrize(\n         'url, exception', (\n             # Connecting to an unknown domain should raise a ConnectionError\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#d52e9b8c80520e2e75745c3d980943b1f9919cd6", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 27 | Lines Deleted: 0 | Files Changed: 2 | Hunks: 6 | Methods Changed: 1 | Complexity Δ (Sum/Max): 4/4 | Churn Δ: 27 | Churn Cumulative: 5142 | Contributors (this commit): 55 | Commits (past 90d): 34 | Contributors (cumulative): 63 | DMM Complexity: 1.0\n\nDIFF:\n@@ -2093,6 +2093,7 @@ class TestPreparingURLs(object):\n         (\n             ('http://google.com', 'http://google.com/'),\n             (u'http://ジェーピーニック.jp', u'http://xn--hckqz9bzb1cyrb.jp/'),\n+            (u'http://xn--n3h.net/', u'http://xn--n3h.net/'),\n             (\n                 u'http://ジェーピーニック.jp'.encode('utf-8'),\n                 u'http://xn--hckqz9bzb1cyrb.jp/'\n@@ -2113,6 +2114,18 @@ class TestPreparingURLs(object):\n                 u'http://Königsgäßchen.de/straße'.encode('utf-8'),\n                 u'http://xn--knigsgchen-b4a3dun.de/stra%C3%9Fe'\n             ),\n+            (\n+                b'http://xn--n3h.net/',\n+                u'http://xn--n3h.net/'\n+            ),\n+            (\n+                b'http://[1200:0000:ab00:1234:0000:2552:7777:1313]:12345/',\n+                u'http://[1200:0000:ab00:1234:0000:2552:7777:1313]:12345/'\n+            ),\n+            (\n+                u'http://[1200:0000:ab00:1234:0000:2552:7777:1313]:12345/',\n+                u'http://[1200:0000:ab00:1234:0000:2552:7777:1313]:12345/'\n+            )\n         )\n     )\n     def test_preparing_url(self, url, expected):\n@@ -2127,6 +2140,7 @@ class TestPreparingURLs(object):\n             b\"http://*\",\n             u\"http://*.google.com\",\n             u\"http://*\",\n+            u\"http://☃.net/\"\n         )\n     )\n     def test_preparing_bad_url(self, url):\n\n@@ -17,6 +17,7 @@ from requests.utils import (\n     to_key_val_list, to_native_string,\n     unquote_header_value, unquote_unreserved,\n     urldefragauth, add_dict_to_cookiejar)\n+from requests._internal_utils import unicode_is_ascii\n \n from .compat import StringIO, cStringIO\n \n@@ -515,6 +516,7 @@ def test_should_bypass_proxies(url, expected, monkeypatch):\n     monkeypatch.setenv('NO_PROXY', '192.168.0.0/24,127.0.0.1,localhost.localdomain,172.16.1.1')\n     assert should_bypass_proxies(url) == expected\n \n+\n @pytest.mark.parametrize(\n     'cookiejar', (\n         compat.cookielib.CookieJar(),\n@@ -529,3 +531,14 @@ def test_add_dict_to_cookiejar(cookiejar):\n     cj = add_dict_to_cookiejar(cookiejar, cookiedict)\n     cookies = dict((cookie.name, cookie.value) for cookie in cj)\n     assert cookiedict == cookies\n+\n+\n+@pytest.mark.parametrize(\n+    'value, expected', (\n+                (u'test', True),\n+                (u'æíöû', False),\n+                (u'ジェーピーニック', False),\n+    )\n+)\n+def test_unicode_is_ascii(value, expected):\n+    assert unicode_is_ascii(value) is expected\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#264f5bd5e1a74b44fadc6a29cdaeb6e5e1b77936", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 16 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): 2/2 | Churn Δ: 17 | Churn Cumulative: 44 | Contributors (this commit): 2 | Commits (past 90d): 3 | Contributors (cumulative): 2 | DMM Complexity: 1.0\n\nDIFF:\n@@ -8,7 +8,7 @@ Provides utility functions that are consumed internally by Requests\n which depend on extremely few external helpers (such as compat)\n \"\"\"\n \n-from .compat import is_py2, builtin_str\n+from .compat import is_py2, builtin_str, str\n \n \n def to_native_string(string, encoding='ascii'):\n@@ -25,3 +25,18 @@ def to_native_string(string, encoding='ascii'):\n             out = string.decode(encoding)\n \n     return out\n+\n+\n+def unicode_is_ascii(u_string):\n+    \"\"\"Determine if unicode string only contains ASCII characters.\n+\n+    :param str u_string: unicode string to check. Must be unicode\n+        and not Python 2 `str`.\n+    :rtype: bool\n+    \"\"\"\n+    assert isinstance(u_string, str)\n+    try:\n+        u_string.encode('ascii')\n+        return True\n+    except UnicodeEncodeError:\n+        return False\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#a83685ce00995808725bd07cb3ce8f785178b5e8", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 8 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 3 | Methods Changed: 1 | Complexity Δ (Sum/Max): 2/2 | Churn Δ: 10 | Churn Cumulative: 9585 | Contributors (this commit): 168 | Commits (past 90d): 14 | Contributors (cumulative): 168 | DMM Complexity: 0.0\n\nDIFF:\n@@ -30,7 +30,7 @@ from .packages.urllib3.exceptions import (\n from .exceptions import (\n     HTTPError, MissingSchema, InvalidURL, ChunkedEncodingError,\n     ContentDecodingError, ConnectionError, StreamConsumedError)\n-from ._internal_utils import to_native_string\n+from ._internal_utils import to_native_string, unicode_is_ascii\n from .utils import (\n     guess_filename, get_auth_from_url, requote_uri,\n     stream_decode_response_unicode, to_key_val_list, parse_header_links,\n@@ -365,10 +365,16 @@ class PreparedRequest(RequestEncodingMixin, RequestHooksMixin):\n         if not host:\n             raise InvalidURL(\"Invalid URL %r: No host supplied\" % url)\n \n-        # Only want to apply IDNA to the hostname\n+        # In general, we want to try IDNA encoding every hostname, as that\n+        # allows users to automatically get the correct behaviour. However,\n+        # we’re quite strict about IDNA encoding, so certain valid hostnames\n+        # may fail to encode. On failure, we verify the hostname meets a\n+        # minimum standard of only containing ASCII characters, and not starting\n+        # with a wildcard (*), before allowing the unencoded hostname through.\n         try:\n             host = idna.encode(host, uts46=True).decode('utf-8')\n         except (UnicodeError, idna.IDNAError):\n+            if not unicode_is_ascii(host) or host.startswith(u'*'):\n                 raise InvalidURL('URL has an invalid label.')\n \n         # Carefully reconstruct the network location\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#34af72c87d79bd8852e8564c050dd7711c6a08d6", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 20 | Lines Deleted: 3 | Files Changed: 2 | Hunks: 2 | Methods Changed: 2 | Complexity Δ (Sum/Max): 0/2 | Churn Δ: 23 | Churn Cumulative: 13604 | Contributors (this commit): 188 | Commits (past 90d): 43 | Contributors (cumulative): 220 | DMM Complexity: 1.0\n\nDIFF:\n@@ -347,9 +347,9 @@ class PreparedRequest(RequestEncodingMixin, RequestHooksMixin):\n         url = url.lstrip()\n \n         # Don't do any URL preparation for non-HTTP schemes like `mailto`,\n-        # `data` etc to work around exceptions from `url_parse`, which\n-        # handles RFC 3986 only.\n-        if ':' in url and not url.lower().startswith('http'):\n+        # `data`, `http+unix` etc to work around exceptions from `url_parse`,\n+        # which handles RFC 3986 only.\n+        if ':' in url and not url.lower().startswith(('http://', 'https://')):\n             self.url = url\n             return\n \n\n@@ -2138,3 +2138,20 @@ class TestPreparingURLs(object):\n         r = requests.Request('GET', url=url)\n         with pytest.raises(requests.exceptions.InvalidURL):\n             r.prepare()\n+\n+    @pytest.mark.parametrize(\n+        'protocol, url',\n+        (\n+            (\"http+unix://\", b\"http+unix://%2Fvar%2Frun%2Fsocket/path\"),\n+            (\"http+unix://\", u\"http+unix://%2Fvar%2Frun%2Fsocket/path\"),\n+            (\"mailto\", b\"mailto:user@example.org\"),\n+            (\"mailto\", u\"mailto:user@example.org\"),\n+            (\"data\", b\"data:SSDimaUgUHl0aG9uIQ==\"),\n+        )\n+    )\n+    def test_url_passthrough(self, protocol, url):\n+        session = requests.Session()\n+        session.mount(protocol, HTTPAdapter())\n+        p = requests.Request('GET', url=url)\n+        p.prepare()\n+        assert p.url == url\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#005f93fd0f2ead34af4c42d245b0c2ed2f91ba09", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 16 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 2 | Methods Changed: 3 | Complexity Δ (Sum/Max): -1/0 | Churn Δ: 17 | Churn Cumulative: 4030 | Contributors (this commit): 51 | Commits (past 90d): 29 | Contributors (cumulative): 51 | DMM Complexity: 1.0\n\nDIFF:\n@@ -460,12 +460,27 @@ class TestRequests:\n         r = requests.put(httpbin('put'))\n         assert r.status_code == 200\n \n+    def test_BASICAUTH_TUPLE_HTTP_200_OK_GET(self, httpbin):\n+        auth = ('user', 'pass')\n+        url = httpbin('basic-auth', 'user', 'pass')\n+\n+        r = requests.get(url, auth=auth)\n+        assert r.status_code == 200\n+\n+        r = requests.get(url)\n+        assert r.status_code == 401\n+\n+        s = requests.session()\n+        s.auth = auth\n+        r = s.get(url)\n+        assert r.status_code == 200\n+\n     @pytest.mark.parametrize(\n         'username, password', (\n             ('user', 'pass'),\n             (u'имя'.encode('utf-8'), u'пароль'.encode('utf-8')),\n         ))\n-    def test_BASICAUTH_TUPLE_HTTP_200_OK_GET(self, httpbin, username, password):\n+    def test_set_basicauth(self, httpbin, username, password):\n         auth = (username, password)\n         url = httpbin('get')\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#4f428228d7e48ac2b254d7a2d1869241c6fb213c", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 9593 | Contributors (this commit): 170 | Commits (past 90d): 16 | Contributors (cumulative): 170 | DMM Complexity: None\n\nDIFF:\n@@ -769,7 +769,7 @@ class Response(object):\n                 raise RuntimeError(\n                     'The content for this response was already consumed')\n \n-            if self.status_code == 0:\n+            if not self.status_code:\n                 self._content = None\n             else:\n                 self._content = bytes().join(self.iter_content(CONTENT_CHUNK_SIZE)) or bytes()\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#f897be58bf3b9eb589617b98bfbca3c0e188602d", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 5 | Lines Deleted: 1 | Files Changed: 2 | Hunks: 2 | Methods Changed: 2 | Complexity Δ (Sum/Max): 4/3 | Churn Δ: 6 | Churn Cumulative: 13629 | Contributors (this commit): 190 | Commits (past 90d): 46 | Contributors (cumulative): 223 | DMM Complexity: 0.0\n\nDIFF:\n@@ -769,7 +769,7 @@ class Response(object):\n                 raise RuntimeError(\n                     'The content for this response was already consumed')\n \n-            if not self.status_code:\n+            if self.status_code == 0 or self.raw is None:\n                 self._content = None\n             else:\n                 self._content = bytes().join(self.iter_content(CONTENT_CHUNK_SIZE)) or bytes()\n\n@@ -1094,6 +1094,10 @@ class TestRequests:\n         total_seconds = ((td.microseconds + (td.seconds + td.days * 24 * 3600) * 10**6) / 10**6)\n         assert total_seconds > 0.0\n \n+    def test_empty_response_has_content_none(self):\n+        r = requests.Response()\n+        assert r.content is None\n+\n     def test_response_is_iterable(self):\n         r = requests.Response()\n         io = StringIO.StringIO('abc')\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#ca15d4808734c86801c8f3d80c9152c35a163dc3", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 666 | Contributors (this commit): 16 | Commits (past 90d): 3 | Contributors (cumulative): 16 | DMM Complexity: None\n\nDIFF:\n@@ -41,8 +41,8 @@ is at <http://python-requests.org>.\n \"\"\"\n \n __title__ = 'requests'\n-__version__ = '2.12.1'\n-__build__ = 0x021201\n+__version__ = '2.12.2'\n+__build__ = 0x021202\n __author__ = 'Kenneth Reitz'\n __license__ = 'Apache 2.0'\n __copyright__ = 'Copyright 2016 Kenneth Reitz'\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#402a55b647c852553ff6967403b12f6b6efc0fd8", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 3 | Lines Deleted: 20 | Files Changed: 2 | Hunks: 2 | Methods Changed: 2 | Complexity Δ (Sum/Max): 1/2 | Churn Δ: 23 | Churn Cumulative: 13652 | Contributors (this commit): 190 | Commits (past 90d): 46 | Contributors (cumulative): 223 | DMM Complexity: 0.0\n\nDIFF:\n@@ -347,9 +347,9 @@ class PreparedRequest(RequestEncodingMixin, RequestHooksMixin):\n         url = url.lstrip()\n \n         # Don't do any URL preparation for non-HTTP schemes like `mailto`,\n-        # `data`, `http+unix` etc to work around exceptions from `url_parse`,\n-        # which handles RFC 3986 only.\n-        if ':' in url and not url.lower().startswith(('http://', 'https://')):\n+        # `data` etc to work around exceptions from `url_parse`, which\n+        # handles RFC 3986 only.\n+        if ':' in url and not url.lower().startswith('http'):\n             self.url = url\n             return\n \n\n@@ -2175,20 +2175,3 @@ class TestPreparingURLs(object):\n         r = requests.Request('GET', url=url)\n         with pytest.raises(requests.exceptions.InvalidURL):\n             r.prepare()\n-\n-    @pytest.mark.parametrize(\n-        'protocol, url',\n-        (\n-            (\"http+unix://\", b\"http+unix://%2Fvar%2Frun%2Fsocket/path\"),\n-            (\"http+unix://\", u\"http+unix://%2Fvar%2Frun%2Fsocket/path\"),\n-            (\"mailto\", b\"mailto:user@example.org\"),\n-            (\"mailto\", u\"mailto:user@example.org\"),\n-            (\"data\", b\"data:SSDimaUgUHl0aG9uIQ==\"),\n-        )\n-    )\n-    def test_url_passthrough(self, protocol, url):\n-        session = requests.Session()\n-        session.mount(protocol, HTTPAdapter())\n-        p = requests.Request('GET', url=url)\n-        p.prepare()\n-        assert p.url == url\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#6f659a41794045292b836859f1281d33eeed8260", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 71 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 2 | Complexity Δ (Sum/Max): 2/2 | Churn Δ: 71 | Churn Cumulative: 4122 | Contributors (this commit): 52 | Commits (past 90d): 30 | Contributors (cumulative): 52 | DMM Complexity: 1.0\n\nDIFF:\n@@ -2175,3 +2175,74 @@ class TestPreparingURLs(object):\n         r = requests.Request('GET', url=url)\n         with pytest.raises(requests.exceptions.InvalidURL):\n             r.prepare()\n+\n+    @pytest.mark.parametrize(\n+        'input, expected',\n+        (\n+            (\n+                b\"http+unix://%2Fvar%2Frun%2Fsocket/path\",\n+                u\"http+unix://%2fvar%2frun%2fsocket/path\",\n+            ),\n+            (\n+                u\"http+unix://%2Fvar%2Frun%2Fsocket/path\",\n+                u\"http+unix://%2fvar%2frun%2fsocket/path\",\n+            ),\n+            (\n+                b\"mailto:user@example.org\",\n+                u\"mailto:user@example.org\",\n+            ),\n+            (\n+                u\"mailto:user@example.org\",\n+                u\"mailto:user@example.org\",\n+            ),\n+            (\n+                b\"data:SSDimaUgUHl0aG9uIQ==\",\n+                u\"data:SSDimaUgUHl0aG9uIQ==\",\n+            )\n+        )\n+    )\n+    def test_url_mutation(self, input, expected):\n+        \"\"\"\n+        This test validates that we correctly exclude some URLs from\n+        preparation, and that we handle others. Specifically, it tests that\n+        any URL whose scheme doesn't begin with \"http\" is left alone, and\n+        those whose scheme *does* begin with \"http\" are mutated.\n+        \"\"\"\n+        r = requests.Request('GET', url=input)\n+        p = r.prepare()\n+        assert p.url == expected\n+\n+    @pytest.mark.parametrize(\n+        'input, params, expected',\n+        (\n+            (\n+                b\"http+unix://%2Fvar%2Frun%2Fsocket/path\",\n+                {\"key\": \"value\"},\n+                u\"http+unix://%2fvar%2frun%2fsocket/path?key=value\",\n+            ),\n+            (\n+                u\"http+unix://%2Fvar%2Frun%2Fsocket/path\",\n+                {\"key\": \"value\"},\n+                u\"http+unix://%2fvar%2frun%2fsocket/path?key=value\",\n+            ),\n+            (\n+                b\"mailto:user@example.org\",\n+                {\"key\": \"value\"},\n+                u\"mailto:user@example.org\",\n+            ),\n+            (\n+                u\"mailto:user@example.org\",\n+                {\"key\": \"value\"},\n+                u\"mailto:user@example.org\",\n+            ),\n+        )\n+    )\n+    def test_parameters_for_nonstandard_schemes(self, input, params, expected):\n+        \"\"\"\n+        Setting paramters for nonstandard schemes is allowed if those schemes\n+        begin with \"http\", and is forbidden otherwise.\n+        \"\"\"\n+        r = requests.Request('GET', url=input, params=params)\n+        p = r.prepare()\n+        assert p.url == expected\n+\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#c398ab0e7dcae24f19a998e35da41f075e1ecb44", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 670 | Contributors (this commit): 16 | Commits (past 90d): 4 | Contributors (cumulative): 16 | DMM Complexity: None\n\nDIFF:\n@@ -41,8 +41,8 @@ is at <http://python-requests.org>.\n \"\"\"\n \n __title__ = 'requests'\n-__version__ = '2.12.2'\n-__build__ = 0x021202\n+__version__ = '2.12.3'\n+__build__ = 0x021203\n __author__ = 'Kenneth Reitz'\n __license__ = 'Apache 2.0'\n __copyright__ = 'Copyright 2016 Kenneth Reitz'\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#2d2c831d071e181deceb80c8550ab6d231b7726e", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 24 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 2 | Complexity Δ (Sum/Max): 2/2 | Churn Δ: 24 | Churn Cumulative: 4146 | Contributors (this commit): 52 | Commits (past 90d): 72 | Contributors (cumulative): 52 | DMM Complexity: 1.0\n\nDIFF:\n@@ -1693,6 +1693,30 @@ class TestRequests:\n         resp.close()\n         assert resp.raw.closed\n \n+    def test_empty_stream_with_auth_does_not_set_content_length_header(self, httpbin):\n+        \"\"\"Ensure that a byte stream with size 0 will not set both a Content-Length\n+        and Transfer-Encoding header\n+        \"\"\"\n+        auth = ('user', 'pass')\n+        url = httpbin('post')\n+        file_obj = io.BytesIO(b'')\n+        r = requests.Request('POST', url, auth=auth, data=file_obj)\n+        prepared_request = r.prepare()\n+        assert 'Transfer-Encoding' in prepared_request.headers\n+        assert 'Content-Length' not in prepared_request.headers\n+\n+    def test_stream_with_auth_does_not_set_transfer_encoding_header(self, httpbin):\n+        \"\"\"Ensure that a byte stream with size > 0 will not set both a Content-Length\n+        and Transfer-Encoding header\"\"\"\n+        auth = ('user', 'pass')\n+        url = httpbin('post')\n+        file_obj = io.BytesIO(b'test data')\n+        r = requests.Request('POST', url, auth=auth, data=file_obj)\n+        prepared_request = r.prepare()\n+        assert 'Transfer-Encoding' not in prepared_request.headers\n+        assert 'Content-Length' in prepared_request.headers\n+\n+\n class TestCaseInsensitiveDict:\n \n     @pytest.mark.parametrize(\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#14d71fd41a31d0ce275c33e59c86d767c9c3768b", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 8 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 2/2 | Churn Δ: 8 | Churn Cumulative: 4154 | Contributors (this commit): 52 | Commits (past 90d): 73 | Contributors (cumulative): 52 | DMM Complexity: 1.0\n\nDIFF:\n@@ -1716,6 +1716,14 @@ class TestRequests:\n         assert 'Transfer-Encoding' not in prepared_request.headers\n         assert 'Content-Length' in prepared_request.headers\n \n+    def test_chunked_upload_does_not_set_content_length_header(self, httpbin):\n+        data = (i for i in [b'a', b'b', b'c'])\n+        url = httpbin('post')\n+        r = requests.Request('POST', url, data=data)\n+        prepared_request = r.prepare()\n+        assert 'Transfer-Encoding' in prepared_request.headers\n+        assert 'Content-Length' not in prepared_request.headers\n+\n \n class TestCaseInsensitiveDict:\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#13716728e757a22ccdb700c5c7db52c8be33d034", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 6 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 3 | Methods Changed: 3 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 8 | Churn Cumulative: 4162 | Contributors (this commit): 52 | Commits (past 90d): 31 | Contributors (cumulative): 52 | DMM Complexity: None\n\nDIFF:\n@@ -1695,7 +1695,7 @@ class TestRequests:\n \n     def test_empty_stream_with_auth_does_not_set_content_length_header(self, httpbin):\n         \"\"\"Ensure that a byte stream with size 0 will not set both a Content-Length\n-        and Transfer-Encoding header\n+        and Transfer-Encoding header.\n         \"\"\"\n         auth = ('user', 'pass')\n         url = httpbin('post')\n@@ -1707,7 +1707,8 @@ class TestRequests:\n \n     def test_stream_with_auth_does_not_set_transfer_encoding_header(self, httpbin):\n         \"\"\"Ensure that a byte stream with size > 0 will not set both a Content-Length\n-        and Transfer-Encoding header\"\"\"\n+        and Transfer-Encoding header.\n+        \"\"\"\n         auth = ('user', 'pass')\n         url = httpbin('post')\n         file_obj = io.BytesIO(b'test data')\n@@ -1717,6 +1718,9 @@ class TestRequests:\n         assert 'Content-Length' in prepared_request.headers\n \n     def test_chunked_upload_does_not_set_content_length_header(self, httpbin):\n+        \"\"\"Ensure that requests with a generator body stream using\n+        Transfer-Encoding: chunked, not a Content-Length header.\n+        \"\"\"\n         data = (i for i in [b'a', b'b', b'c'])\n         url = httpbin('post')\n         r = requests.Request('POST', url, data=data)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
