{"custom_id": "flask#12d74be7d7f62400663911d94783320bdfba86d4", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 57 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 3 | Complexity Δ (Sum/Max): 16/16 | Churn Δ: 57 | Churn Cumulative: 57 | Contributors (this commit): 1 | Commits (past 90d): 1 | Contributors (cumulative): 1 | DMM Complexity: 0.40540540540540543\n\nDIFF:\n@@ -0,0 +1,57 @@\n+import sys\n+import unittest\n+from unittest.loader import TestLoader\n+from flask.testsuite import suite\n+\n+common_prefix = suite.__module__ + '.'\n+\n+\n+def find_all_tests():\n+    suites = [suite()]\n+    while suites:\n+        s = suites.pop()\n+        try:\n+            suites.extend(s)\n+        except TypeError:\n+            yield s\n+\n+\n+def find_all_tests_with_name():\n+    for testcase in find_all_tests():\n+        yield testcase, '%s.%s.%s' % (\n+            testcase.__class__.__module__,\n+            testcase.__class__.__name__,\n+            testcase._testMethodName\n+        )\n+\n+\n+class BetterLoader(TestLoader):\n+\n+    def loadTestsFromName(self, name, module=None):\n+        if name == 'suite':\n+            return suite()\n+        for testcase, testname in find_all_tests_with_name():\n+            if testname == name:\n+                return testcase\n+            if testname.startswith(common_prefix):\n+                if testname[len(common_prefix):] == name:\n+                    return testcase\n+\n+        all_results = []\n+        for testcase, testname in find_all_tests_with_name():\n+            if testname.endswith('.' + name):\n+                all_results.append((testcase, testname))\n+\n+        if len(all_results) == 1:\n+            return all_results[0][0]\n+        elif not len(all_results):\n+            error = 'could not find testcase \"%s\"' % name\n+        else:\n+            error = 'Too many matches: for \"%s\"\\n%s' % \\\n+                (name, '\\n'.join('  - ' + n for c, n in all_results))\n+\n+        print >> sys.stderr, 'Error: %s' % error\n+        sys.exit(1)\n+\n+\n+unittest.main(testLoader=BetterLoader(), defaultTest='suite')\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#3069e2d7f73f80ebc342029616a5cbc5381cfdf1", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 212 | Lines Deleted: 212 | Files Changed: 8 | Hunks: 148 | Methods Changed: 79 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 424 | Churn Cumulative: 2714 | Contributors (this commit): 1 | Commits (past 90d): 16 | Contributors (cumulative): 8 | DMM Complexity: None\n\nDIFF:\n@@ -26,8 +26,8 @@ class BasicFunctionalityTestCase(FlaskTestCase):\n         def index():\n             return 'Hello World'\n         rv = app.test_client().open('/', method='OPTIONS')\n-        assert sorted(rv.allow) == ['GET', 'HEAD', 'OPTIONS', 'POST']\n-        assert rv.data == ''\n+        self.assert_equal(sorted(rv.allow), ['GET', 'HEAD', 'OPTIONS', 'POST'])\n+        self.assert_equal(rv.data, '')\n \n     def test_options_on_multiple_rules(self):\n         app = flask.Flask(__name__)\n@@ -38,7 +38,7 @@ class BasicFunctionalityTestCase(FlaskTestCase):\n         def index_put():\n             return 'Aha!'\n         rv = app.test_client().open('/', method='OPTIONS')\n-        assert sorted(rv.allow) == ['GET', 'HEAD', 'OPTIONS', 'POST', 'PUT']\n+        self.assert_equal(sorted(rv.allow), ['GET', 'HEAD', 'OPTIONS', 'POST', 'PUT'])\n \n     def test_options_handling_disabled(self):\n         app = flask.Flask(__name__)\n@@ -47,7 +47,7 @@ class BasicFunctionalityTestCase(FlaskTestCase):\n         index.provide_automatic_options = False\n         app.route('/')(index)\n         rv = app.test_client().open('/', method='OPTIONS')\n-        assert rv.status_code == 405\n+        self.assert_equal(rv.status_code, 405)\n \n         app = flask.Flask(__name__)\n         def index2():\n@@ -55,7 +55,7 @@ class BasicFunctionalityTestCase(FlaskTestCase):\n         index2.provide_automatic_options = True\n         app.route('/', methods=['OPTIONS'])(index2)\n         rv = app.test_client().open('/', method='OPTIONS')\n-        assert sorted(rv.allow) == ['OPTIONS']\n+        self.assert_equal(sorted(rv.allow), ['OPTIONS'])\n \n     def test_request_dispatching(self):\n         app = flask.Flask(__name__)\n@@ -67,18 +67,18 @@ class BasicFunctionalityTestCase(FlaskTestCase):\n             return flask.request.method\n \n         c = app.test_client()\n-        assert c.get('/').data == 'GET'\n+        self.assert_equal(c.get('/').data, 'GET')\n         rv = c.post('/')\n-        assert rv.status_code == 405\n-        assert sorted(rv.allow) == ['GET', 'HEAD', 'OPTIONS']\n+        self.assert_equal(rv.status_code, 405)\n+        self.assert_equal(sorted(rv.allow), ['GET', 'HEAD', 'OPTIONS'])\n         rv = c.head('/')\n-        assert rv.status_code == 200\n+        self.assert_equal(rv.status_code, 200)\n         assert not rv.data  # head truncates\n-        assert c.post('/more').data == 'POST'\n-        assert c.get('/more').data == 'GET'\n+        self.assert_equal(c.post('/more').data, 'POST')\n+        self.assert_equal(c.get('/more').data, 'GET')\n         rv = c.delete('/more')\n-        assert rv.status_code == 405\n-        assert sorted(rv.allow) == ['GET', 'HEAD', 'OPTIONS', 'POST']\n+        self.assert_equal(rv.status_code, 405)\n+        self.assert_equal(sorted(rv.allow), ['GET', 'HEAD', 'OPTIONS', 'POST'])\n \n     def test_url_mapping(self):\n         app = flask.Flask(__name__)\n@@ -91,18 +91,18 @@ class BasicFunctionalityTestCase(FlaskTestCase):\n         app.add_url_rule('/more', 'more', more, methods=['GET', 'POST'])\n \n         c = app.test_client()\n-        assert c.get('/').data == 'GET'\n+        self.assert_equal(c.get('/').data, 'GET')\n         rv = c.post('/')\n-        assert rv.status_code == 405\n-        assert sorted(rv.allow) == ['GET', 'HEAD', 'OPTIONS']\n+        self.assert_equal(rv.status_code, 405)\n+        self.assert_equal(sorted(rv.allow), ['GET', 'HEAD', 'OPTIONS'])\n         rv = c.head('/')\n-        assert rv.status_code == 200\n+        self.assert_equal(rv.status_code, 200)\n         assert not rv.data  # head truncates\n-        assert c.post('/more').data == 'POST'\n-        assert c.get('/more').data == 'GET'\n+        self.assert_equal(c.post('/more').data, 'POST')\n+        self.assert_equal(c.get('/more').data, 'GET')\n         rv = c.delete('/more')\n-        assert rv.status_code == 405\n-        assert sorted(rv.allow) == ['GET', 'HEAD', 'OPTIONS', 'POST']\n+        self.assert_equal(rv.status_code, 405)\n+        self.assert_equal(sorted(rv.allow), ['GET', 'HEAD', 'OPTIONS', 'POST'])\n \n     def test_werkzeug_routing(self):\n         from werkzeug.routing import Submount, Rule\n@@ -119,8 +119,8 @@ class BasicFunctionalityTestCase(FlaskTestCase):\n         app.view_functions['index'] = index\n \n         c = app.test_client()\n-        assert c.get('/foo/').data == 'index'\n-        assert c.get('/foo/bar').data == 'bar'\n+        self.assert_equal(c.get('/foo/').data, 'index')\n+        self.assert_equal(c.get('/foo/bar').data, 'bar')\n \n     def test_endpoint_decorator(self):\n         from werkzeug.routing import Submount, Rule\n@@ -139,8 +139,8 @@ class BasicFunctionalityTestCase(FlaskTestCase):\n             return 'index'\n \n         c = app.test_client()\n-        assert c.get('/foo/').data == 'index'\n-        assert c.get('/foo/bar').data == 'bar'\n+        self.assert_equal(c.get('/foo/').data, 'index')\n+        self.assert_equal(c.get('/foo/bar').data, 'bar')\n \n     def test_session(self):\n         app = flask.Flask(__name__)\n@@ -154,8 +154,8 @@ class BasicFunctionalityTestCase(FlaskTestCase):\n             return flask.session['value']\n \n         c = app.test_client()\n-        assert c.post('/set', data={'value': '42'}).data == 'value set'\n-        assert c.get('/get').data == '42'\n+        self.assert_equal(c.post('/set', data={'value': '42'}).data, 'value set')\n+        self.assert_equal(c.get('/get').data, '42')\n \n     def test_session_using_server_name(self):\n         app = flask.Flask(__name__)\n@@ -241,12 +241,12 @@ class BasicFunctionalityTestCase(FlaskTestCase):\n         match = re.search(r'\\bexpires=([^;]+)', rv.headers['set-cookie'])\n         expires = parse_date(match.group())\n         expected = datetime.utcnow() + app.permanent_session_lifetime\n-        assert expires.year == expected.year\n-        assert expires.month == expected.month\n-        assert expires.day == expected.day\n+        self.assert_equal(expires.year, expected.year)\n+        self.assert_equal(expires.month, expected.month)\n+        self.assert_equal(expires.day, expected.day)\n \n         rv = client.get('/test')\n-        assert rv.data == 'True'\n+        self.assert_equal(rv.data, 'True')\n \n         permanent = False\n         rv = app.test_client().get('/')\n@@ -264,7 +264,7 @@ class BasicFunctionalityTestCase(FlaskTestCase):\n             flask.session.modified = False\n             flask.flash('Zip')\n             assert flask.session.modified\n-            assert list(flask.get_flashed_messages()) == ['Zap', 'Zip']\n+            self.assert_equal(list(flask.get_flashed_messages()), ['Zap', 'Zip'])\n \n     def test_extended_flashing(self):\n         app = flask.Flask(__name__)\n@@ -280,16 +280,16 @@ class BasicFunctionalityTestCase(FlaskTestCase):\n         @app.route('/test')\n         def test():\n             messages = flask.get_flashed_messages(with_categories=True)\n-            assert len(messages) == 3\n-            assert messages[0] == ('message', u'Hello World')\n-            assert messages[1] == ('error', u'Hello World')\n-            assert messages[2] == ('warning', flask.Markup(u'<em>Testing</em>'))\n+            self.assert_equal(len(messages), 3)\n+            self.assert_equal(messages[0], ('message', u'Hello World'))\n+            self.assert_equal(messages[1], ('error', u'Hello World'))\n+            self.assert_equal(messages[2], ('warning', flask.Markup(u'<em>Testing</em>')))\n             return ''\n             messages = flask.get_flashed_messages()\n-            assert len(messages) == 3\n-            assert messages[0] == u'Hello World'\n-            assert messages[1] == u'Hello World'\n-            assert messages[2] == flask.Markup(u'<em>Testing</em>')\n+            self.assert_equal(len(messages), 3)\n+            self.assert_equal(messages[0], u'Hello World')\n+            self.assert_equal(messages[1], u'Hello World')\n+            self.assert_equal(messages[2], flask.Markup(u'<em>Testing</em>'))\n \n         c = app.test_client()\n         c.get('/')\n@@ -314,7 +314,7 @@ class BasicFunctionalityTestCase(FlaskTestCase):\n         assert 'after' not in evts\n         rv = app.test_client().get('/').data\n         assert 'after' in evts\n-        assert rv == 'request|after'\n+        self.assert_equal(rv, 'request|after')\n \n     def test_teardown_request_handler(self):\n         called = []\n@@ -327,9 +327,9 @@ class BasicFunctionalityTestCase(FlaskTestCase):\n         def root():\n             return \"Response\"\n         rv = app.test_client().get('/')\n-        assert rv.status_code == 200\n+        self.assert_equal(rv.status_code, 200)\n         assert 'Response' in rv.data\n-        assert len(called) == 1\n+        self.assert_equal(len(called), 1)\n \n     def test_teardown_request_handler_debug_mode(self):\n         called = []\n@@ -343,16 +343,16 @@ class BasicFunctionalityTestCase(FlaskTestCase):\n         def root():\n             return \"Response\"\n         rv = app.test_client().get('/')\n-        assert rv.status_code == 200\n+        self.assert_equal(rv.status_code, 200)\n         assert 'Response' in rv.data\n-        assert len(called) == 1\n+        self.assert_equal(len(called), 1)\n \n     def test_teardown_request_handler_error(self):\n         called = []\n         app = flask.Flask(__name__)\n         @app.teardown_request\n         def teardown_request1(exc):\n-            assert type(exc) == ZeroDivisionError\n+            self.assert_equal(type(exc), ZeroDivisionError)\n             called.append(True)\n             # This raises a new error and blows away sys.exc_info(), so we can\n             # test that all teardown_requests get passed the same original\n@@ -363,7 +363,7 @@ class BasicFunctionalityTestCase(FlaskTestCase):\n                 pass\n         @app.teardown_request\n         def teardown_request2(exc):\n-            assert type(exc) == ZeroDivisionError\n+            self.assert_equal(type(exc), ZeroDivisionError)\n             called.append(True)\n             # This raises a new error and blows away sys.exc_info(), so we can\n             # test that all teardown_requests get passed the same original\n@@ -376,9 +376,9 @@ class BasicFunctionalityTestCase(FlaskTestCase):\n         def fails():\n             1/0\n         rv = app.test_client().get('/')\n-        assert rv.status_code == 500\n+        self.assert_equal(rv.status_code, 500)\n         assert 'Internal Server Error' in rv.data\n-        assert len(called) == 2\n+        self.assert_equal(len(called), 2)\n \n     def test_before_after_request_order(self):\n         called = []\n@@ -407,8 +407,8 @@ class BasicFunctionalityTestCase(FlaskTestCase):\n         def index():\n             return '42'\n         rv = app.test_client().get('/')\n-        assert rv.data == '42'\n-        assert called == [1, 2, 3, 4, 5, 6]\n+        self.assert_equal(rv.data, '42')\n+        self.assert_equal(called, [1, 2, 3, 4, 5, 6])\n \n     def test_error_handling(self):\n         app = flask.Flask(__name__)\n@@ -426,11 +426,11 @@ class BasicFunctionalityTestCase(FlaskTestCase):\n             1 // 0\n         c = app.test_client()\n         rv = c.get('/')\n-        assert rv.status_code == 404\n-        assert rv.data == 'not found'\n+        self.assert_equal(rv.status_code, 404)\n+        self.assert_equal(rv.data, 'not found')\n         rv = c.get('/error')\n-        assert rv.status_code == 500\n-        assert 'internal server error' == rv.data\n+        self.assert_equal(rv.status_code, 500)\n+        self.assert_equal('internal server error', rv.data)\n \n     def test_before_request_and_routing_errors(self):\n         app = flask.Flask(__name__)\n@@ -441,8 +441,8 @@ class BasicFunctionalityTestCase(FlaskTestCase):\n         def return_something(error):\n             return flask.g.something, 404\n         rv = app.test_client().get('/')\n-        assert rv.status_code == 404\n-        assert rv.data == 'value'\n+        self.assert_equal(rv.status_code, 404)\n+        self.assert_equal(rv.data, 'value')\n \n     def test_user_error_handling(self):\n         class MyException(Exception):\n@@ -458,7 +458,7 @@ class BasicFunctionalityTestCase(FlaskTestCase):\n             raise MyException()\n \n         c = app.test_client()\n-        assert c.get('/').data == '42'\n+        self.assert_equal(c.get('/').data, '42')\n \n     def test_trapping_of_bad_request_key_errors(self):\n         app = flask.Flask(__name__)\n@@ -467,7 +467,7 @@ class BasicFunctionalityTestCase(FlaskTestCase):\n         def fail():\n             flask.request.form['missing_key']\n         c = app.test_client()\n-        assert c.get('/fail').status_code == 400\n+        self.assert_equal(c.get('/fail').status_code, 400)\n \n         app.config['TRAP_BAD_REQUEST_ERRORS'] = True\n         c = app.test_client()\n@@ -523,9 +523,9 @@ class BasicFunctionalityTestCase(FlaskTestCase):\n \n         ctx = app.test_request_context()\n         ctx.push()\n-        assert buffer == []\n+        self.assert_equal(buffer, [])\n         ctx.pop()\n-        assert buffer == [None]\n+        self.assert_equal(buffer, [None])\n \n     def test_response_creation(self):\n         app = flask.Flask(__name__)\n@@ -539,31 +539,31 @@ class BasicFunctionalityTestCase(FlaskTestCase):\n         def from_tuple():\n             return 'Meh', 400, {'X-Foo': 'Testing'}, 'text/plain'\n         c = app.test_client()\n-        assert c.get('/unicode').data == u'Hällo Wörld'.encode('utf-8')\n-        assert c.get('/string').data == u'Hällo Wörld'.encode('utf-8')\n+        self.assert_equal(c.get('/unicode').data, u'Hällo Wörld'.encode('utf-8'))\n+        self.assert_equal(c.get('/string').data, u'Hällo Wörld'.encode('utf-8'))\n         rv = c.get('/args')\n-        assert rv.data == 'Meh'\n-        assert rv.headers['X-Foo'] == 'Testing'\n-        assert rv.status_code == 400\n-        assert rv.mimetype == 'text/plain'\n+        self.assert_equal(rv.data, 'Meh')\n+        self.assert_equal(rv.headers['X-Foo'], 'Testing')\n+        self.assert_equal(rv.status_code, 400)\n+        self.assert_equal(rv.mimetype, 'text/plain')\n \n     def test_make_response(self):\n         app = flask.Flask(__name__)\n         with app.test_request_context():\n             rv = flask.make_response()\n-            assert rv.status_code == 200\n-            assert rv.data == ''\n-            assert rv.mimetype == 'text/html'\n+            self.assert_equal(rv.status_code, 200)\n+            self.assert_equal(rv.data, '')\n+            self.assert_equal(rv.mimetype, 'text/html')\n \n             rv = flask.make_response('Awesome')\n-            assert rv.status_code == 200\n-            assert rv.data == 'Awesome'\n-            assert rv.mimetype == 'text/html'\n+            self.assert_equal(rv.status_code, 200)\n+            self.assert_equal(rv.data, 'Awesome')\n+            self.assert_equal(rv.mimetype, 'text/html')\n \n             rv = flask.make_response('W00t', 404)\n-            assert rv.status_code == 404\n-            assert rv.data == 'W00t'\n-            assert rv.mimetype == 'text/html'\n+            self.assert_equal(rv.status_code, 404)\n+            self.assert_equal(rv.data, 'W00t')\n+            self.assert_equal(rv.mimetype, 'text/html')\n \n     def test_url_generation(self):\n         app = flask.Flask(__name__)\n@@ -571,7 +571,7 @@ class BasicFunctionalityTestCase(FlaskTestCase):\n         def hello():\n             pass\n         with app.test_request_context():\n-            assert flask.url_for('hello', name='test x') == '/hello/test%20x'\n+            self.assert_equal(flask.url_for('hello', name='test x'), '/hello/test%20x')\n             assert flask.url_for('hello', name='test x', _external=True) \\\n                 == 'http://localhost/hello/test%20x'\n \n@@ -589,13 +589,13 @@ class BasicFunctionalityTestCase(FlaskTestCase):\n         def index(args):\n             return '|'.join(args)\n         c = app.test_client()\n-        assert c.get('/1,2,3').data == '1|2|3'\n+        self.assert_equal(c.get('/1,2,3').data, '1|2|3')\n \n     def test_static_files(self):\n         app = flask.Flask(__name__)\n         rv = app.test_client().get('/static/index.html')\n-        assert rv.status_code == 200\n-        assert rv.data.strip() == '<h1>Hello World!</h1>'\n+        self.assert_equal(rv.status_code, 200)\n+        self.assert_equal(rv.data.strip(), '<h1>Hello World!</h1>')\n         with app.test_request_context():\n             assert flask.url_for('static', filename='index.html') \\\n                 == '/static/index.html'\n@@ -608,7 +608,7 @@ class BasicFunctionalityTestCase(FlaskTestCase):\n         try:\n             app.test_client().get('/')\n         except ValueError, e:\n-            assert str(e) == 'View function did not return a response'\n+            self.assert_equal(str(e), 'View function did not return a response')\n             pass\n         else:\n             assert \"Expected ValueError\"\n@@ -632,19 +632,19 @@ class BasicFunctionalityTestCase(FlaskTestCase):\n             return None\n \n         with app.test_request_context('/'):\n-            assert flask.url_for('index', _external=True) == 'http://localhost.localdomain:5000/'\n+            self.assert_equal(flask.url_for('index', _external=True), 'http://localhost.localdomain:5000/')\n \n         with app.test_request_context('/'):\n-            assert flask.url_for('sub', _external=True) == 'http://foo.localhost.localdomain:5000/'\n+            self.assert_equal(flask.url_for('sub', _external=True), 'http://foo.localhost.localdomain:5000/')\n \n         try:\n             with app.test_request_context('/', environ_overrides={'HTTP_HOST': 'localhost'}):\n                 pass\n         except Exception, e:\n             assert isinstance(e, ValueError)\n-            assert str(e) == \"the server name provided \" + \\\n+            self.assert_equal(str(e), \"the server name provided \" +\n                     \"('localhost.localdomain:5000') does not match the \" + \\\n-                    \"server name from the WSGI environment ('localhost')\", str(e)\n+                    \"server name from the WSGI environment ('localhost')\")\n \n         try:\n             app.config.update(SERVER_NAME='localhost')\n@@ -679,7 +679,7 @@ class BasicFunctionalityTestCase(FlaskTestCase):\n \n         try:\n             rv = app.test_client().get('/')\n-            assert rv.data == 'Foo'\n+            self.assert_equal(rv.data, 'Foo')\n         except ValueError, e:\n             raise ValueError(\n                 \"No ValueError exception should have been raised \\\"%s\\\"\" % e\n@@ -687,7 +687,7 @@ class BasicFunctionalityTestCase(FlaskTestCase):\n \n         try:\n             rv = app.test_client().get('/', 'http://localhost.localdomain:5000')\n-            assert rv.data == 'Foo'\n+            self.assert_equal(rv.data, 'Foo')\n         except ValueError, e:\n             raise ValueError(\n                 \"No ValueError exception should have been raised \\\"%s\\\"\" % e\n@@ -695,7 +695,7 @@ class BasicFunctionalityTestCase(FlaskTestCase):\n \n         try:\n             rv = app.test_client().get('/', 'https://localhost.localdomain:5000')\n-            assert rv.data == 'Foo'\n+            self.assert_equal(rv.data, 'Foo')\n         except ValueError, e:\n             raise ValueError(\n                 \"No ValueError exception should have been raised \\\"%s\\\"\" % e\n@@ -704,7 +704,7 @@ class BasicFunctionalityTestCase(FlaskTestCase):\n         try:\n             app.config.update(SERVER_NAME='localhost.localdomain')\n             rv = app.test_client().get('/', 'https://localhost.localdomain')\n-            assert rv.data == 'Foo'\n+            self.assert_equal(rv.data, 'Foo')\n         except ValueError, e:\n             raise ValueError(\n                 \"No ValueError exception should have been raised \\\"%s\\\"\" % e\n@@ -713,23 +713,23 @@ class BasicFunctionalityTestCase(FlaskTestCase):\n         try:\n             app.config.update(SERVER_NAME='localhost.localdomain:443')\n             rv = app.test_client().get('/', 'https://localhost.localdomain')\n-            assert rv.data == 'Foo'\n+            self.assert_equal(rv.data, 'Foo')\n         except ValueError, e:\n-            assert str(e) == \"the server name provided \" + \\\n+            self.assert_equal(str(e), \"the server name provided \" +\n                     \"('localhost.localdomain:443') does not match the \" + \\\n-                    \"server name from the WSGI environment ('localhost.localdomain')\", str(e)\n+                    \"server name from the WSGI environment ('localhost.localdomain')\")\n \n         try:\n             app.config.update(SERVER_NAME='localhost.localdomain')\n             app.test_client().get('/', 'http://foo.localhost')\n         except ValueError, e:\n-            assert str(e) == \"the server name provided \" + \\\n+            self.assert_equal(str(e), \"the server name provided \" + \\\n                     \"('localhost.localdomain') does not match the \" + \\\n-                    \"server name from the WSGI environment ('foo.localhost')\", str(e)\n+                    \"server name from the WSGI environment ('foo.localhost')\")\n \n         try:\n             rv = app.test_client().get('/', 'http://foo.localhost.localdomain')\n-            assert rv.data == 'Foo SubDomain'\n+            self.assert_equal(rv.data, 'Foo SubDomain')\n         except ValueError, e:\n             raise ValueError(\n                 \"No ValueError exception should have been raised \\\"%s\\\"\" % e\n@@ -751,7 +751,7 @@ class BasicFunctionalityTestCase(FlaskTestCase):\n                 else:\n                     self.fail('expected exception')\n             else:\n-                assert c.get('/').status_code == 500\n+                self.assert_equal(c.get('/').status_code, 500)\n \n         # we have to run this test in an isolated thread because if the\n         # debug flag is set to true and an exception happens the context is\n@@ -779,7 +779,7 @@ class BasicFunctionalityTestCase(FlaskTestCase):\n \n         c = app.test_client()\n         rv = c.post('/accept', data={'myfile': 'foo' * 100})\n-        assert rv.data == '42'\n+        self.assert_equal(rv.data, '42')\n \n     def test_url_processors(self):\n         app = flask.Flask(__name__)\n@@ -886,9 +886,9 @@ class ContextTestCase(FlaskTestCase):\n             return flask.request.url\n \n         with app.test_request_context('/?name=World'):\n-            assert index() == 'Hello World!'\n+            self.assert_equal(index(), 'Hello World!')\n         with app.test_request_context('/meh'):\n-            assert meh() == 'http://localhost/meh'\n+            self.assert_equal(meh(), 'http://localhost/meh')\n         assert flask._request_ctx_stack.top is None\n \n     def test_context_test(self):\n@@ -911,7 +911,7 @@ class ContextTestCase(FlaskTestCase):\n \n         ctx = app.test_request_context('/?name=World')\n         ctx.push()\n-        assert index() == 'Hello World!'\n+        self.assert_equal(index(), 'Hello World!')\n         ctx.pop()\n         try:\n             index()\n@@ -935,10 +935,10 @@ class SubdomainTestCase(FlaskTestCase):\n \n         c = app.test_client()\n         rv = c.get('/', 'http://localhost/')\n-        assert rv.data == 'normal index'\n+        self.assert_equal(rv.data, 'normal index')\n \n         rv = c.get('/', 'http://test.localhost/')\n-        assert rv.data == 'test index'\n+        self.assert_equal(rv.data, 'test index')\n \n     @emits_module_deprecation_warning\n     def test_module_static_path_subdomain(self):\n@@ -948,7 +948,7 @@ class SubdomainTestCase(FlaskTestCase):\n         app.register_module(mod)\n         c = app.test_client()\n         rv = c.get('/static/hello.txt', 'http://foo.example.com/')\n-        assert rv.data.strip() == 'Hello Subdomain'\n+        self.assert_equal(rv.data.strip(), 'Hello Subdomain')\n \n     def test_subdomain_matching(self):\n         app = flask.Flask(__name__)\n@@ -959,7 +959,7 @@ class SubdomainTestCase(FlaskTestCase):\n \n         c = app.test_client()\n         rv = c.get('/', 'http://mitsuhiko.localhost/')\n-        assert rv.data == 'index for mitsuhiko'\n+        self.assert_equal(rv.data, 'index for mitsuhiko')\n \n     @emits_module_deprecation_warning\n     def test_module_subdomain_support(self):\n@@ -979,9 +979,9 @@ class SubdomainTestCase(FlaskTestCase):\n \n         c = app.test_client()\n         rv = c.get('/test', 'http://testing.localhost/')\n-        assert rv.data == 'Test'\n+        self.assert_equal(rv.data, 'Test')\n         rv = c.get('/outside', 'http://xtesting.localhost/')\n-        assert rv.data == 'Outside'\n+        self.assert_equal(rv.data, 'Outside')\n \n \n def suite():\n\n@@ -43,10 +43,10 @@ class ModuleTestCase(FlaskTestCase):\n             return 'the index'\n         app.register_module(admin)\n         c = app.test_client()\n-        assert c.get('/').data == 'the index'\n-        assert c.get('/admin/').data == 'admin index'\n-        assert c.get('/admin/login').data == 'admin login'\n-        assert c.get('/admin/logout').data == 'admin logout'\n+        self.assert_equal(c.get('/').data, 'the index')\n+        self.assert_equal(c.get('/admin/').data, 'admin index')\n+        self.assert_equal(c.get('/admin/login').data, 'admin login')\n+        self.assert_equal(c.get('/admin/logout').data, 'admin logout')\n \n     @emits_module_deprecation_warning\n     def test_default_endpoint_name(self):\n@@ -57,9 +57,9 @@ class ModuleTestCase(FlaskTestCase):\n         mod.add_url_rule('/', view_func=index)\n         app.register_module(mod)\n         rv = app.test_client().get('/')\n-        assert rv.data == 'Awesome'\n+        self.assert_equal(rv.data, 'Awesome')\n         with app.test_request_context():\n-            assert flask.url_for('frontend.index') == '/'\n+            self.assert_equal(flask.url_for('frontend.index'), '/')\n \n     @emits_module_deprecation_warning\n     def test_request_processing(self):\n@@ -89,13 +89,13 @@ class ModuleTestCase(FlaskTestCase):\n         app.register_module(admin)\n         c = app.test_client()\n \n-        assert c.get('/').data == 'the index'\n-        assert catched == ['before-app', 'after-app']\n+        self.assert_equal(c.get('/').data, 'the index')\n+        self.assert_equal(catched, ['before-app', 'after-app'])\n         del catched[:]\n \n-        assert c.get('/admin/').data == 'the admin'\n-        assert catched == ['before-app', 'before-admin',\n-                           'after-admin', 'after-app']\n+        self.assert_equal(c.get('/admin/').data, 'the admin')\n+        self.assert_equal(catched, ['before-app', 'before-admin',\n+                           'after-admin', 'after-app'])\n \n     @emits_module_deprecation_warning\n     def test_context_processors(self):\n@@ -118,8 +118,8 @@ class ModuleTestCase(FlaskTestCase):\n             return flask.render_template_string('{{ a }}{{ b }}{{ c }}')\n         app.register_module(admin)\n         c = app.test_client()\n-        assert c.get('/').data == '13'\n-        assert c.get('/admin/').data == '123'\n+        self.assert_equal(c.get('/').data, '13')\n+        self.assert_equal(c.get('/admin/').data, '123')\n \n     @emits_module_deprecation_warning\n     def test_late_binding(self):\n@@ -129,7 +129,7 @@ class ModuleTestCase(FlaskTestCase):\n         def index():\n             return '42'\n         app.register_module(admin, url_prefix='/admin')\n-        assert app.test_client().get('/admin/').data == '42'\n+        self.assert_equal(app.test_client().get('/admin/').data, '42')\n \n     @emits_module_deprecation_warning\n     def test_error_handling(self):\n@@ -150,11 +150,11 @@ class ModuleTestCase(FlaskTestCase):\n         app.register_module(admin)\n         c = app.test_client()\n         rv = c.get('/')\n-        assert rv.status_code == 404\n-        assert rv.data == 'not found'\n+        self.assert_equal(rv.status_code, 404)\n+        self.assert_equal(rv.data, 'not found')\n         rv = c.get('/error')\n-        assert rv.status_code == 500\n-        assert 'internal server error' == rv.data\n+        self.assert_equal(rv.status_code, 500)\n+        self.assert_equal('internal server error', rv.data)\n \n     def test_templates_and_static(self):\n         app = moduleapp\n@@ -162,15 +162,15 @@ class ModuleTestCase(FlaskTestCase):\n         c = app.test_client()\n \n         rv = c.get('/')\n-        assert rv.data == 'Hello from the Frontend'\n+        self.assert_equal(rv.data, 'Hello from the Frontend')\n         rv = c.get('/admin/')\n-        assert rv.data == 'Hello from the Admin'\n+        self.assert_equal(rv.data, 'Hello from the Admin')\n         rv = c.get('/admin/index2')\n-        assert rv.data == 'Hello from the Admin'\n+        self.assert_equal(rv.data, 'Hello from the Admin')\n         rv = c.get('/admin/static/test.txt')\n-        assert rv.data.strip() == 'Admin File'\n+        self.assert_equal(rv.data.strip(), 'Admin File')\n         rv = c.get('/admin/static/css/test.css')\n-        assert rv.data.strip() == '/* nested file */'\n+        self.assert_equal(rv.data.strip(), '/* nested file */')\n \n         with app.test_request_context():\n             assert flask.url_for('admin.static', filename='test.txt') \\\n@@ -180,12 +180,12 @@ class ModuleTestCase(FlaskTestCase):\n             try:\n                 flask.render_template('missing.html')\n             except TemplateNotFound, e:\n-                assert e.name == 'missing.html'\n+                self.assert_equal(e.name, 'missing.html')\n             else:\n                 assert 0, 'expected exception'\n \n         with flask.Flask(__name__).test_request_context():\n-            assert flask.render_template('nested/nested.txt') == 'I\\'m nested'\n+            self.assert_equal(flask.render_template('nested/nested.txt'), 'I\\'m nested')\n \n     def test_safe_access(self):\n         app = moduleapp\n@@ -245,8 +245,8 @@ class ModuleTestCase(FlaskTestCase):\n         app.register_module(module)\n \n         c = app.test_client()\n-        assert c.get('/foo/').data == 'index'\n-        assert c.get('/foo/bar').data == 'bar'\n+        self.assert_equal(c.get('/foo/').data, 'index')\n+        self.assert_equal(c.get('/foo/bar').data, 'bar')\n \n \n class BlueprintTestCase(FlaskTestCase):\n@@ -287,9 +287,9 @@ class BlueprintTestCase(FlaskTestCase):\n \n         c = app.test_client()\n \n-        assert c.get('/frontend-no').data == 'frontend says no'\n-        assert c.get('/backend-no').data == 'backend says no'\n-        assert c.get('/what-is-a-sideend').data == 'application itself says no'\n+        self.assert_equal(c.get('/frontend-no').data, 'frontend says no')\n+        self.assert_equal(c.get('/backend-no').data, 'backend says no')\n+        self.assert_equal(c.get('/what-is-a-sideend').data, 'application itself says no')\n \n     def test_blueprint_url_definitions(self):\n         bp = flask.Blueprint('test', __name__)\n@@ -344,15 +344,15 @@ class BlueprintTestCase(FlaskTestCase):\n         c = app.test_client()\n \n         rv = c.get('/')\n-        assert rv.data == 'Hello from the Frontend'\n+        self.assert_equal(rv.data, 'Hello from the Frontend')\n         rv = c.get('/admin/')\n-        assert rv.data == 'Hello from the Admin'\n+        self.assert_equal(rv.data, 'Hello from the Admin')\n         rv = c.get('/admin/index2')\n-        assert rv.data == 'Hello from the Admin'\n+        self.assert_equal(rv.data, 'Hello from the Admin')\n         rv = c.get('/admin/static/test.txt')\n-        assert rv.data.strip() == 'Admin File'\n+        self.assert_equal(rv.data.strip(), 'Admin File')\n         rv = c.get('/admin/static/css/test.css')\n-        assert rv.data.strip() == '/* nested file */'\n+        self.assert_equal(rv.data.strip(), '/* nested file */')\n \n         with app.test_request_context():\n             assert flask.url_for('admin.static', filename='test.txt') \\\n@@ -362,12 +362,12 @@ class BlueprintTestCase(FlaskTestCase):\n             try:\n                 flask.render_template('missing.html')\n             except TemplateNotFound, e:\n-                assert e.name == 'missing.html'\n+                self.assert_equal(e.name, 'missing.html')\n             else:\n                 assert 0, 'expected exception'\n \n         with flask.Flask(__name__).test_request_context():\n-            assert flask.render_template('nested/nested.txt') == 'I\\'m nested'\n+            self.assert_equal(flask.render_template('nested/nested.txt'), 'I\\'m nested')\n \n     def test_templates_list(self):\n         from blueprintapp import app\n\n@@ -23,8 +23,8 @@ SECRET_KEY = 'devkey'\n class ConfigTestCase(FlaskTestCase):\n \n     def common_object_test(self, app):\n-        assert app.secret_key == 'devkey'\n-        assert app.config['TEST_KEY'] == 'foo'\n+        self.assert_equal(app.secret_key, 'devkey')\n+        self.assert_equal(app.config['TEST_KEY'], 'foo')\n         assert 'ConfigTestCase' not in app.config\n \n     def test_config_from_file(self):\n\n@@ -27,8 +27,8 @@ class DeprecationsTestCase(FlaskTestCase):\n                 return app.jinja_env.globals['foo']\n \n             c = app.test_client()\n-            assert c.get('/').data == '42'\n-            assert len(log) == 1\n+            self.assert_equal(c.get('/').data, '42')\n+            self.assert_equal(len(log), 1)\n             assert 'init_jinja_globals' in str(log[0]['message'])\n \n \n\n@@ -47,7 +47,7 @@ class JSONTestCase(FlaskTestCase):\n         c = app.test_client()\n         resp = c.get('/', data=u'\"Hällo Wörld\"'.encode('iso-8859-15'),\n                      content_type='application/json; charset=iso-8859-15')\n-        assert resp.data == u'Hällo Wörld'.encode('utf-8')\n+        self.assert_equal(resp.data, u'Hällo Wörld'.encode('utf-8'))\n \n     def test_jsonify(self):\n         d = dict(a=23, b=42, c=[1, 2, 3])\n@@ -61,8 +61,8 @@ class JSONTestCase(FlaskTestCase):\n         c = app.test_client()\n         for url in '/kw', '/dict':\n             rv = c.get(url)\n-            assert rv.mimetype == 'application/json'\n-            assert flask.json.loads(rv.data) == d\n+            self.assert_equal(rv.mimetype, 'application/json')\n+            self.assert_equal(flask.json.loads(rv.data), d)\n \n     def test_json_attr(self):\n         app = flask.Flask(__name__)\n@@ -72,16 +72,16 @@ class JSONTestCase(FlaskTestCase):\n         c = app.test_client()\n         rv = c.post('/add', data=flask.json.dumps({'a': 1, 'b': 2}),\n                             content_type='application/json')\n-        assert rv.data == '3'\n+        self.assert_equal(rv.data, '3')\n \n     def test_template_escaping(self):\n         app = flask.Flask(__name__)\n         render = flask.render_template_string\n         with app.test_request_context():\n             rv = render('{{ \"</script>\"|tojson|safe }}')\n-            assert rv == '\"<\\\\/script>\"'\n+            self.assert_equal(rv, '\"<\\\\/script>\"')\n             rv = render('{{ \"<\\0/script>\"|tojson|safe }}')\n-            assert rv == '\"<\\\\u0000\\\\/script>\"'\n+            self.assert_equal(rv, '\"<\\\\u0000\\\\/script>\"')\n \n     def test_modified_url_encoding(self):\n         class ModifiedRequest(flask.Request):\n@@ -95,8 +95,8 @@ class JSONTestCase(FlaskTestCase):\n             return flask.request.args['foo']\n \n         rv = app.test_client().get(u'/?foo=정상처리'.encode('euc-kr'))\n-        assert rv.status_code == 200\n-        assert rv.data == u'정상처리'.encode('utf-8')\n+        self.assert_equal(rv.status_code, 200)\n+        self.assert_equal(rv.data, u'정상처리'.encode('utf-8'))\n \n     if not has_encoding('euc-kr'):\n         test_modified_url_encoding = None\n@@ -109,9 +109,9 @@ class SendfileTestCase(FlaskTestCase):\n         with app.test_request_context():\n             rv = flask.send_file('static/index.html')\n             assert rv.direct_passthrough\n-            assert rv.mimetype == 'text/html'\n+            self.assert_equal(rv.mimetype, 'text/html')\n             with app.open_resource('static/index.html') as f:\n-                assert rv.data == f.read()\n+                self.assert_equal(rv.data, f.read())\n \n     def test_send_file_xsendfile(self):\n         app = flask.Flask(__name__)\n@@ -120,9 +120,9 @@ class SendfileTestCase(FlaskTestCase):\n             rv = flask.send_file('static/index.html')\n             assert rv.direct_passthrough\n             assert 'x-sendfile' in rv.headers\n-            assert rv.headers['x-sendfile'] == \\\n-                os.path.join(app.root_path, 'static/index.html')\n-            assert rv.mimetype == 'text/html'\n+            self.assert_equal(rv.headers['x-sendfile'],\n+                os.path.join(app.root_path, 'static/index.html'))\n+            self.assert_equal(rv.mimetype, 'text/html')\n \n     def test_send_file_object(self):\n         app = flask.Flask(__name__)\n@@ -131,39 +131,39 @@ class SendfileTestCase(FlaskTestCase):\n                 f = open(os.path.join(app.root_path, 'static/index.html'))\n                 rv = flask.send_file(f)\n                 with app.open_resource('static/index.html') as f:\n-                    assert rv.data == f.read()\n-                assert rv.mimetype == 'text/html'\n+                    self.assert_equal(rv.data, f.read())\n+                self.assert_equal(rv.mimetype, 'text/html')\n             # mimetypes + etag\n-            assert len(captured) == 2\n+            self.assert_equal(len(captured), 2)\n \n         app.use_x_sendfile = True\n         with catch_warnings() as captured:\n             with app.test_request_context():\n                 f = open(os.path.join(app.root_path, 'static/index.html'))\n                 rv = flask.send_file(f)\n-                assert rv.mimetype == 'text/html'\n+                self.assert_equal(rv.mimetype, 'text/html')\n                 assert 'x-sendfile' in rv.headers\n-                assert rv.headers['x-sendfile'] == \\\n-                    os.path.join(app.root_path, 'static/index.html')\n+                self.assert_equal(rv.headers['x-sendfile'],\n+                    os.path.join(app.root_path, 'static/index.html'))\n             # mimetypes + etag\n-            assert len(captured) == 2\n+            self.assert_equal(len(captured), 2)\n \n         app.use_x_sendfile = False\n         with app.test_request_context():\n             with catch_warnings() as captured:\n                 f = StringIO('Test')\n                 rv = flask.send_file(f)\n-                assert rv.data == 'Test'\n-                assert rv.mimetype == 'application/octet-stream'\n+                self.assert_equal(rv.data, 'Test')\n+                self.assert_equal(rv.mimetype, 'application/octet-stream')\n             # etags\n-            assert len(captured) == 1\n+            self.assert_equal(len(captured), 1)\n             with catch_warnings() as captured:\n                 f = StringIO('Test')\n                 rv = flask.send_file(f, mimetype='text/plain')\n-                assert rv.data == 'Test'\n-                assert rv.mimetype == 'text/plain'\n+                self.assert_equal(rv.data, 'Test')\n+                self.assert_equal(rv.mimetype, 'text/plain')\n             # etags\n-            assert len(captured) == 1\n+            self.assert_equal(len(captured), 1)\n \n         app.use_x_sendfile = True\n         with catch_warnings() as captured:\n@@ -172,7 +172,7 @@ class SendfileTestCase(FlaskTestCase):\n                 rv = flask.send_file(f)\n                 assert 'x-sendfile' not in rv.headers\n             # etags\n-            assert len(captured) == 1\n+            self.assert_equal(len(captured), 1)\n \n     def test_attachment(self):\n         app = flask.Flask(__name__)\n@@ -181,25 +181,25 @@ class SendfileTestCase(FlaskTestCase):\n                 f = open(os.path.join(app.root_path, 'static/index.html'))\n                 rv = flask.send_file(f, as_attachment=True)\n                 value, options = parse_options_header(rv.headers['Content-Disposition'])\n-                assert value == 'attachment'\n+                self.assert_equal(value, 'attachment')\n             # mimetypes + etag\n-            assert len(captured) == 2\n+            self.assert_equal(len(captured), 2)\n \n         with app.test_request_context():\n-            assert options['filename'] == 'index.html'\n+            self.assert_equal(options['filename'], 'index.html')\n             rv = flask.send_file('static/index.html', as_attachment=True)\n             value, options = parse_options_header(rv.headers['Content-Disposition'])\n-            assert value == 'attachment'\n-            assert options['filename'] == 'index.html'\n+            self.assert_equal(value, 'attachment')\n+            self.assert_equal(options['filename'], 'index.html')\n \n         with app.test_request_context():\n             rv = flask.send_file(StringIO('Test'), as_attachment=True,\n                                  attachment_filename='index.txt',\n                                  add_etags=False)\n-            assert rv.mimetype == 'text/plain'\n+            self.assert_equal(rv.mimetype, 'text/plain')\n             value, options = parse_options_header(rv.headers['Content-Disposition'])\n-            assert value == 'attachment'\n-            assert options['filename'] == 'index.txt'\n+            self.assert_equal(value, 'attachment')\n+            self.assert_equal(options['filename'], 'index.txt')\n \n \n class LoggingTestCase(FlaskTestCase):\n@@ -208,7 +208,7 @@ class LoggingTestCase(FlaskTestCase):\n         app = flask.Flask(__name__)\n         logger1 = app.logger\n         assert app.logger is logger1\n-        assert logger1.name == __name__\n+        self.assert_equal(logger1.name, __name__)\n         app.logger_name = __name__ + '/test_logger_cache'\n         assert app.logger is not logger1\n \n@@ -254,7 +254,7 @@ class LoggingTestCase(FlaskTestCase):\n             1/0\n \n         rv = app.test_client().get('/')\n-        assert rv.status_code == 500\n+        self.assert_equal(rv.status_code, 500)\n         assert 'Internal Server Error' in rv.data\n \n         err = out.getvalue()\n@@ -282,8 +282,8 @@ class LoggingTestCase(FlaskTestCase):\n             return 'Hello Server Error', 500\n         for trigger in 'before', 'after':\n             rv = app.test_client().get('/')\n-            assert rv.status_code == 500\n-            assert rv.data == 'Hello Server Error'\n+            self.assert_equal(rv.status_code, 500)\n+            self.assert_equal(rv.data, 'Hello Server Error')\n \n \n def suite():\n\n@@ -29,10 +29,10 @@ class SignalsTestCase(FlaskTestCase):\n         flask.template_rendered.connect(record, app)\n         try:\n             app.test_client().get('/')\n-            assert len(recorded) == 1\n+            self.assert_equal(len(recorded), 1)\n             template, context = recorded[0]\n-            assert template.name == 'simple_template.html'\n-            assert context['whiskey'] == 42\n+            self.assert_equal(template.name, 'simple_template.html')\n+            self.assert_equal(context['whiskey'], 42)\n         finally:\n             flask.template_rendered.disconnect(record, app)\n \n@@ -44,7 +44,7 @@ class SignalsTestCase(FlaskTestCase):\n             calls.append('before-signal')\n \n         def after_request_signal(sender, response):\n-            assert response.data == 'stuff'\n+            self.assert_equal(response.data, 'stuff')\n             calls.append('after-signal')\n \n         @app.before_request\n@@ -67,11 +67,11 @@ class SignalsTestCase(FlaskTestCase):\n \n         try:\n             rv = app.test_client().get('/')\n-            assert rv.data == 'stuff'\n+            self.assert_equal(rv.data, 'stuff')\n \n-            assert calls == ['before-signal', 'before-handler',\n+            self.assert_equal(calls, ['before-signal', 'before-handler',\n                              'handler', 'after-handler',\n-                             'after-signal']\n+                             'after-signal'])\n         finally:\n             flask.request_started.disconnect(before_request_signal, app)\n             flask.request_finished.disconnect(after_request_signal, app)\n@@ -89,8 +89,8 @@ class SignalsTestCase(FlaskTestCase):\n \n         flask.got_request_exception.connect(record, app)\n         try:\n-            assert app.test_client().get('/').status_code == 500\n-            assert len(recorded) == 1\n+            self.assert_equal(app.test_client().get('/').status_code, 500)\n+            self.assert_equal(len(recorded), 1)\n             assert isinstance(recorded[0], ZeroDivisionError)\n         finally:\n             flask.got_request_exception.disconnect(record, app)\n\n@@ -24,7 +24,7 @@ class TemplatingTestCase(FlaskTestCase):\n         def index():\n             return flask.render_template('context_template.html', value=23)\n         rv = app.test_client().get('/')\n-        assert rv.data == '<p>23|42'\n+        self.assert_equal(rv.data, '<p>23|42')\n \n     def test_original_win(self):\n         app = flask.Flask(__name__)\n@@ -32,7 +32,7 @@ class TemplatingTestCase(FlaskTestCase):\n         def index():\n             return flask.render_template_string('{{ config }}', config=42)\n         rv = app.test_client().get('/')\n-        assert rv.data == '42'\n+        self.assert_equal(rv.data, '42')\n \n     def test_standard_context(self):\n         app = flask.Flask(__name__)\n@@ -48,7 +48,7 @@ class TemplatingTestCase(FlaskTestCase):\n                 {{ session.test }}\n             ''')\n         rv = app.test_client().get('/?foo=42')\n-        assert rv.data.split() == ['42', '23', 'False', 'aha']\n+        self.assert_equal(rv.data.split(), ['42', '23', 'False', 'aha'])\n \n     def test_escaping(self):\n         text = '<p>Hello World!'\n@@ -58,14 +58,14 @@ class TemplatingTestCase(FlaskTestCase):\n             return flask.render_template('escaping_template.html', text=text,\n                                          html=flask.Markup(text))\n         lines = app.test_client().get('/').data.splitlines()\n-        assert lines == [\n+        self.assert_equal(lines, [\n             '&lt;p&gt;Hello World!',\n             '<p>Hello World!',\n             '<p>Hello World!',\n             '<p>Hello World!',\n             '&lt;p&gt;Hello World!',\n             '<p>Hello World!'\n-        ]\n+        ])\n \n     def test_no_escaping(self):\n         app = flask.Flask(__name__)\n@@ -79,7 +79,7 @@ class TemplatingTestCase(FlaskTestCase):\n         app = flask.Flask(__name__)\n         with app.test_request_context():\n             macro = flask.get_template_attribute('_macro.html', 'hello')\n-            assert macro('World') == 'Hello World!'\n+            self.assert_equal(macro('World'), 'Hello World!')\n \n     def test_template_filter(self):\n         app = flask.Flask(__name__)\n@@ -87,8 +87,8 @@ class TemplatingTestCase(FlaskTestCase):\n         def my_reverse(s):\n             return s[::-1]\n         assert 'my_reverse' in  app.jinja_env.filters.keys()\n-        assert app.jinja_env.filters['my_reverse'] == my_reverse\n-        assert app.jinja_env.filters['my_reverse']('abcd') == 'dcba'\n+        self.assert_equal(app.jinja_env.filters['my_reverse'], my_reverse)\n+        self.assert_equal(app.jinja_env.filters['my_reverse']('abcd'), 'dcba')\n \n     def test_template_filter_with_name(self):\n         app = flask.Flask(__name__)\n@@ -96,8 +96,8 @@ class TemplatingTestCase(FlaskTestCase):\n         def my_reverse(s):\n             return s[::-1]\n         assert 'strrev' in  app.jinja_env.filters.keys()\n-        assert app.jinja_env.filters['strrev'] == my_reverse\n-        assert app.jinja_env.filters['strrev']('abcd') == 'dcba'\n+        self.assert_equal(app.jinja_env.filters['strrev'], my_reverse)\n+        self.assert_equal(app.jinja_env.filters['strrev']('abcd'), 'dcba')\n \n     def test_template_filter_with_template(self):\n         app = flask.Flask(__name__)\n@@ -108,7 +108,7 @@ class TemplatingTestCase(FlaskTestCase):\n         def index():\n             return flask.render_template('template_filter.html', value='abcd')\n         rv = app.test_client().get('/')\n-        assert rv.data == 'dcba'\n+        self.assert_equal(rv.data, 'dcba')\n \n     def test_template_filter_with_name_and_template(self):\n         app = flask.Flask(__name__)\n@@ -119,7 +119,7 @@ class TemplatingTestCase(FlaskTestCase):\n         def index():\n             return flask.render_template('template_filter.html', value='abcd')\n         rv = app.test_client().get('/')\n-        assert rv.data == 'dcba'\n+        self.assert_equal(rv.data, 'dcba')\n \n     def test_custom_template_loader(self):\n         class MyFlask(flask.Flask):\n@@ -132,7 +132,7 @@ class TemplatingTestCase(FlaskTestCase):\n             return flask.render_template('index.html')\n         c = app.test_client()\n         rv = c.get('/')\n-        assert rv.data == 'Hello Custom World!'\n+        self.assert_equal(rv.data, 'Hello Custom World!')\n \n \n def suite():\n\n@@ -97,14 +97,14 @@ class TestToolsTestCase(FlaskTestCase):\n \n         with app.test_client() as c:\n             resp = c.get('/')\n-            assert flask.g.value == 42\n-            assert resp.data == 'Hello World!'\n-            assert resp.status_code == 200\n+            self.assert_equal(flask.g.value, 42)\n+            self.assert_equal(resp.data, 'Hello World!')\n+            self.assert_equal(resp.status_code, 200)\n \n             resp = c.get('/other')\n             assert not hasattr(flask.g, 'value')\n             assert 'Internal Server Error' in resp.data\n-            assert resp.status_code == 500\n+            self.assert_equal(resp.status_code, 500)\n             flask.g.value = 23\n \n         try:\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
