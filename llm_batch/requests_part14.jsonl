{"custom_id": "requests#28ee9788a071ac1314ed920ab5cb4af74ceee307", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 2 | Files Changed: 2 | Hunks: 2 | Methods Changed: 2 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 1897 | Contributors (this commit): 14 | Commits (past 90d): 89 | Contributors (cumulative): 18 | DMM Complexity: None\n\nDIFF:\n@@ -41,7 +41,7 @@ def request(method, url,\n     :param proxies: (optional) Dictionary mapping protocol to the URL of the proxy.\n     \"\"\"\n \n-    method = method.upper()\n+    method = str(method).upper()\n \n     if cookies is None:\n         cookies = {}\n\n@@ -424,7 +424,7 @@ class Response(object):\n         #: up here.\n         self.history = []\n \n-        #: The Request that created the Response.\n+        #: The :class:`Request <Request>` that created the Response.\n         self.request = None\n \n         #: A dictionary of Cookies the server sent back.\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#6a96652396515631bb72ba7c363e96c27edd769a", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 8 | Lines Deleted: 12 | Files Changed: 1 | Hunks: 5 | Methods Changed: 4 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 20 | Churn Cumulative: 1370 | Contributors (this commit): 13 | Commits (past 90d): 70 | Contributors (cumulative): 13 | DMM Complexity: 1.0\n\nDIFF:\n@@ -396,9 +396,6 @@ class Response(object):\n         #: Content of the response, in bytes or unicode (if available).\n         self.content = None\n \n-        # Hack for Sphinx.\n-        del self.content\n-\n         #: Integer Code of responded HTTP Status.\n         self.status_code = None\n \n@@ -430,8 +427,6 @@ class Response(object):\n         #: A dictionary of Cookies the server sent back.\n         self.cookies = None\n \n-        self._content = None\n-\n \n     def __repr__(self):\n         return '<Response [%s]>' % (self.status_code)\n@@ -443,12 +438,11 @@ class Response(object):\n         return not self.error\n \n \n-    def __getattr__(self, name):\n-        \"\"\"Read and returns the full stream when accessing to\n-        :attr: `content`\n-        \"\"\"\n+    @property\n+    def content(self):\n+        \"\"\"Content of the response, in bytes or unicode\n+        (if available).\"\"\"\n         \n-        if name == 'content':\n         if self._content is not None:\n             return self._content\n \n@@ -468,8 +462,10 @@ class Response(object):\n \n         return self._content\n \n-        else:\n-            raise AttributeError\n+\n+    @content.setter\n+    def content(self, value):\n+        self._content = value\n \n \n     def raise_for_status(self):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#c8110222a532821d27b0ade3ebdd7d0cb9545f80", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 0 | Lines Deleted: 5 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): -1/0 | Churn Δ: 5 | Churn Cumulative: 1375 | Contributors (this commit): 13 | Commits (past 90d): 71 | Contributors (cumulative): 13 | DMM Complexity: 0.0\n\nDIFF:\n@@ -463,11 +463,6 @@ class Response(object):\n         return self._content\n \n \n-    @content.setter\n-    def content(self, value):\n-        self._content = value\n-\n-\n     def raise_for_status(self):\n         \"\"\"Raises stored :class:`HTTPError` or :class:`URLError`, if one occured.\"\"\"\n         if self.error:\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#317c5b693a16e5e638d9253dd2913d93f5389e00", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 4 | Lines Deleted: 3 | Files Changed: 1 | Hunks: 2 | Methods Changed: 2 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 7 | Churn Cumulative: 1382 | Contributors (this commit): 13 | Commits (past 90d): 72 | Contributors (cumulative): 13 | DMM Complexity: None\n\nDIFF:\n@@ -393,8 +393,8 @@ class Response(object):\n     \"\"\"\n \n     def __init__(self):\n-        #: Content of the response, in bytes or unicode (if available).\n-        self.content = None\n+\n+        self._content = None\n \n         #: Integer Code of responded HTTP Status.\n         self.status_code = None\n@@ -441,7 +441,8 @@ class Response(object):\n     @property\n     def content(self):\n         \"\"\"Content of the response, in bytes or unicode\n-        (if available).\"\"\"\n+        (if available).\n+        \"\"\"\n \n         if self._content is not None:\n             return self._content\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#2dc556e0825bf3a235140c5af6b473945ebf4ab8", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 22 | Lines Deleted: 14 | Files Changed: 2 | Hunks: 11 | Methods Changed: 3 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 36 | Churn Cumulative: 631 | Contributors (this commit): 6 | Commits (past 90d): 27 | Contributors (cumulative): 8 | DMM Complexity: 1.0\n\nDIFF:\n@@ -14,7 +14,7 @@ This module impliments the Requests API.\n import config\n from .models import Request, Response, AuthObject\n from .status_codes import codes\n-from .hooks import dispatch_hook\n+from .hooks import dispatch_hooks\n from .utils import cookiejar_from_dict\n \n from urlparse import urlparse\n@@ -63,21 +63,21 @@ def request(method, url,\n     )\n \n     # Arguments manipulation hook.\n-    args = dispatch_hook('args', hooks, args)\n+    args = dispatch_hooks('args', hooks, args)\n \n     r = Request(**args)\n \n     # Pre-request hook.\n-    r = dispatch_hook('pre_request', hooks, r)\n+    r = dispatch_hooks('pre_request', hooks, r)\n \n     # Send the HTTP Request.\n     r.send()\n \n     # Post-request hook.\n-    r = dispatch_hook('post_request', hooks, r)\n+    r = dispatch_hooks('post_request', hooks, r)\n \n     # Response manipulation hook.\n-    r.response = dispatch_hook('response', hooks, r.response)\n+    r.response = dispatch_hooks('response', hooks, r.response)\n \n     return r.response\n \n\n@@ -23,18 +23,26 @@ Available hooks:\n \"\"\"\n \n import warnings\n+from collections import Iterable\n \n+def dispatch_hooks(key, hooks, hook_data):\n+    \"\"\"Dispatches multiple hooks on a given piece of data.\n \n-def dispatch_hook(key, hooks, hook_data):\n-    \"\"\"Dipatches a hook dictionary on a given peice of data.\"\"\"\n-\n-    hooks = hooks or dict()\n-\n-    if key in hooks:\n+    :param key: the hooks group to lookup\n+    :type key: str\n+    :param hooks: the hooks dictionary. The value of each key can be a callable\n+                  object, or a list of callable objects.\n+    :type hooks: dict\n+    :param hook_data: the object on witch the hooks should be applied\n+    :type hook_data: object\n+    \"\"\"\n+    hook_list = hooks.get(key, []) if hooks else []\n+    dispatching = hook_list if isinstance(hook_list, Iterable) else [hook_list]\n+    for hook in dispatching:\n         try:\n-            return hooks.get(key).__call__(hook_data) or hook_data\n-\n+            # hook must be a callable\n+            hook_data = hook(hook_data)\n         except Exception, why:\n             warnings.warn(str(why))\n-\n     return hook_data\n+\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#d12eac8669bc820c7fdd4efe47032112a6b41a1b", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 39 | Lines Deleted: 26 | Files Changed: 4 | Hunks: 16 | Methods Changed: 5 | Complexity Δ (Sum/Max): 6/8 | Churn Δ: 65 | Churn Cumulative: 2130 | Contributors (this commit): 15 | Commits (past 90d): 107 | Contributors (cumulative): 25 | DMM Complexity: 0.0\n\nDIFF:\n@@ -14,7 +14,7 @@ This module impliments the Requests API.\n import config\n from .models import Request, Response, AuthObject\n from .status_codes import codes\n-from .hooks import dispatch_hooks\n+from hooks import setup_hooks, dispatch_hooks\n from .utils import cookiejar_from_dict\n \n from urlparse import urlparse\n@@ -43,10 +43,9 @@ def request(method, url,\n \n     method = str(method).upper()\n \n-    if cookies is None:\n-        cookies = {}\n+    cookies = cookiejar_from_dict(cookies or dict())\n \n-    cookies = cookiejar_from_dict(cookies)\n+    hooks = setup_hooks(hooks or dict())\n \n     args = dict(\n         method = method,\n@@ -62,22 +61,23 @@ def request(method, url,\n         proxies = proxies or config.settings.proxies,\n     )\n     \n+\n     # Arguments manipulation hook.\n-    args = dispatch_hooks('args', hooks, args)\n+    args = dispatch_hooks(hooks.get('args', []), args)\n \n     r = Request(**args)\n \n     # Pre-request hook.\n-    r = dispatch_hooks('pre_request', hooks, r)\n+    r = dispatch_hooks(hooks.get('pre_request', []), r)\n \n     # Send the HTTP Request.\n     r.send()\n \n     # Post-request hook.\n-    r = dispatch_hooks('post_request', hooks, r)\n+    r = dispatch_hooks(hooks.get('post_request', []), hooks, r)\n \n     # Response manipulation hook.\n-    r.response = dispatch_hooks('response', hooks, r.response)\n+    r.response = dispatch_hooks(hooks.get('response', []), r.response)\n \n     return r.response\n \n\n@@ -62,7 +62,9 @@ settings.proxies = None\n settings.verbose = None\n settings.timeout = None\n settings.max_redirects = 30\n-settings.decode_unicode = True\n+# settings.decode_unicode = True\n+settings.unicode_response = True\n+settings.decode_response = True\n \n #: Use socket.setdefaulttimeout() as fallback?\n settings.timeout_fallback = True\n\n@@ -24,8 +24,24 @@ Available hooks:\n \n import warnings\n from collections import Iterable\n+from .. import config\n+from response import unicode_response, decode_response\n \n-def dispatch_hooks(key, hooks, hook_data):\n+def setup_hooks(hooks):\n+    \"\"\"Setup hooks as a dictionary. Each value is a set of hooks.\"\"\"\n+\n+    for key, values in hooks.items():\n+        hook_list = values if isinstance(values, Iterable) else [values]\n+        hooks[key] = set(hook_list) \n+\n+    # Also, based on settings, \n+    if config.settings.unicode_response:\n+        hooks.setdefault('response', set()).add(unicode_response)\n+    if config.settings.decode_response:\n+        hooks.setdefault('response', set()).add(decode_response)\n+    return hooks\n+\n+def dispatch_hooks(hooks, hook_data):\n     \"\"\"Dispatches multiple hooks on a given piece of data.\n \n     :param key: the hooks group to lookup\n@@ -36,13 +52,10 @@ def dispatch_hooks(key, hooks, hook_data):\n     :param hook_data: the object on witch the hooks should be applied\n     :type hook_data: object\n     \"\"\"\n-    hook_list = hooks.get(key, []) if hooks else []\n-    dispatching = hook_list if isinstance(hook_list, Iterable) else [hook_list]\n-    for hook in dispatching:\n+    for hook in hooks:\n         try:\n             # hook must be a callable\n             hook_data = hook(hook_data)\n         except Exception, why:\n             warnings.warn(str(why))\n     return hook_data\n-\n\n@@ -444,22 +444,20 @@ class Response(object):\n         (if available).\n         \"\"\"\n \n-        if self._content is not None:\n-            return self._content\n-\n+        if self._content is None:\n             # Read the contents.\n             self._content = self.fo.read()\n \n-        # Decode GZip'd content.\n-        if 'gzip' in self.headers.get('content-encoding', ''):\n-            try:\n-                self._content = decode_gzip(self._content)\n-            except zlib.error:\n-                pass\n+        # # Decode GZip'd content.\n+        # if 'gzip' in self.headers.get('content-encoding', ''):\n+        #     try:\n+        #         self._content = decode_gzip(self._content)\n+        #     except zlib.error:\n+        #         pass\n \n-        # Decode unicode content.\n-        if settings.decode_unicode:\n-            self._content = get_unicode_from_response(self)\n+        # # Decode unicode content.\n+        # if settings.decode_unicode:\n+        #     self._content = get_unicode_from_response(self)\n \n         return self._content\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#660e0903157579fae39d72c1ac7af45a1f6dc9d1", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 64 | Lines Deleted: 0 | Files Changed: 4 | Hunks: 4 | Methods Changed: 2 | Complexity Δ (Sum/Max): 3/3 | Churn Δ: 64 | Churn Cumulative: 64 | Contributors (this commit): 1 | Commits (past 90d): 4 | Contributors (cumulative): 4 | DMM Complexity: 1.0\n\nDIFF:\n@@ -0,0 +1,7 @@\n+\"\"\"\n+request.hooks.args\n+~~~~~~~~~~~~~~~~~~\n+\n+This module provide a collection of args hooks.\n+\"\"\"\n+\n\n@@ -0,0 +1,7 @@\n+\"\"\"\n+request.hooks.post_request\n+~~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+This module provide a collection of post_request hooks.\n+\"\"\"\n+\n\n@@ -0,0 +1,7 @@\n+\"\"\"\n+request.hooks.pre_request\n+~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+This module provide a collection of pre_request hooks.\n+\"\"\"\n+\n\n@@ -0,0 +1,43 @@\n+\"\"\"\n+request.hooks.response\n+~~~~~~~~~~~~~~~~~~~~~~\n+\n+This module provide a collection of response hooks.\n+\"\"\"\n+from functools import wraps\n+import zlib\n+from cgi import parse_header\n+\n+#: Dictionary of content decoders.\n+decoders = {\n+    # No decoding applied.\n+    'identity': lambda r: r,\n+    # Decode Response file object compressed with deflate.\n+    'deflate': lambda r: zlib.decompress(r.content),\n+    # Decode Response file object compressed with gzip.\n+    'gzip': lambda r: zlib.decompress(r.content, 16+zlib.MAX_WBITS),\n+}\n+\n+# Decode Response file object compressed with compress.\n+decoders['compress'] = decoders['deflate']\n+\n+try:\n+    import bz2\n+except ImportError:\n+    pass\n+else:\n+    # Decode Response file object compressed with bz2.\n+    decoders['bzip2'] = lambda r: bz2.decompress(r.content)\n+\n+def unicode_response(r):\n+    \"\"\"Encode response file object in unicode.\"\"\"\n+    content_type, params = parse_header(r.headers.get('content-type'))\n+    charset = params.get('charset', '').strip(\"'\\\"\")\n+    r.content = unicode(r.content, charset) if charset else unicode(r.content)\n+    return r\n+\n+def decode_response(r):\n+    \"\"\"Decode compressed response content using Contetn-Encoding header.\"\"\"\n+    encoding = r.headers.get('content-encoding')\n+    return decoders.get(encoding)(r)\n+\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#56406b3442b20a3ea5536cabbd10477cc36244b8", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 4 | Lines Deleted: 3 | Files Changed: 1 | Hunks: 3 | Methods Changed: 2 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 7 | Churn Cumulative: 50 | Contributors (this commit): 1 | Commits (past 90d): 2 | Contributors (cumulative): 1 | DMM Complexity: 1.0\n\nDIFF:\n@@ -11,7 +11,7 @@ from cgi import parse_header\n #: Dictionary of content decoders.\n decoders = {\n     # No decoding applied.\n-    'identity': lambda r: r,\n+    'identity': lambda r: r.content,\n     # Decode Response file object compressed with deflate.\n     'deflate': lambda r: zlib.decompress(r.content),\n     # Decode Response file object compressed with gzip.\n@@ -33,11 +33,12 @@ def unicode_response(r):\n     \"\"\"Encode response file object in unicode.\"\"\"\n     content_type, params = parse_header(r.headers.get('content-type'))\n     charset = params.get('charset', '').strip(\"'\\\"\")\n-    r.content = unicode(r.content, charset) if charset else unicode(r.content)\n+    r._content = unicode(r.content, charset) if charset else unicode(r.content)\n     return r\n \n def decode_response(r):\n     \"\"\"Decode compressed response content using Contetn-Encoding header.\"\"\"\n     encoding = r.headers.get('content-encoding')\n-    return decoders.get(encoding)(r)\n+    r._content = decoders.get(encoding)(r)\n+    return r\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#c56acf0e321d7a2ae1c0726352d9d7698091d05c", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 4 | Lines Deleted: 7 | Files Changed: 1 | Hunks: 3 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 11 | Churn Cumulative: 1440 | Contributors (this commit): 14 | Commits (past 90d): 75 | Contributors (cumulative): 14 | DMM Complexity: 1.0\n\nDIFF:\n@@ -353,20 +353,17 @@ class Request(object):\n \n         data = ''\n         if self.method in ('PUT', 'POST', 'PATCH'):\n-            #: --data - send specified data in post request.\n-            #: '-data name=John -data skill=Doe' generates the\n-            #: post chunk 'name=daniel&skill=lousy'\n+            #: -d/--data - send specified data in post request.\n+            #: '-d name=John -d last=Doe' generates the\n+            #: post chunk 'name=John&last=Doe'\n \n-            #if data is file:\n             if isinstance(self.data, (list, tuple)):\n                 data = data.join(['-d ' + key + '=' + value + ' ' for key, value in self.data])\n             else:\n                 data = '-d ' + self._enc_data + ' '\n \n         #: Params handled in _build_url\n-        curl_cmd = curl_cmd + method_opt + data + header + '\"' + self._build_url() + '\"'\n-\n-        return curl_cmd\n+        return curl_cmd + method_opt + data + header + '\"' + self._build_url() + '\"'\n \n \n class Response(object):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#84d9ff0c5c63ec22dd10670e373b4a46d8770ff4", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 6/6 | Churn Δ: 1 | Churn Cumulative: 1441 | Contributors (this commit): 14 | Commits (past 90d): 76 | Contributors (cumulative): 14 | DMM Complexity: None\n\nDIFF:\n@@ -421,6 +421,7 @@ class Request(object):\n         #: Params handled in _build_url\n         return curl_cmd + method_opt + data + header + '\"' + self._build_url() + '\"'\n \n+\n class Response(object):\n     \"\"\"The core :class:`Response <Response>` object. All\n     :class:`Request <Request>` objects contain a\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#ce3b85a62ee2bd12463aa2937a6b66a5a5e35a2d", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 0 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): -7/0 | Churn Δ: 1 | Churn Cumulative: 1442 | Contributors (this commit): 14 | Commits (past 90d): 77 | Contributors (cumulative): 14 | DMM Complexity: 1.0\n\nDIFF:\n@@ -311,7 +311,6 @@ class Request(object):\n         \"\"\"\n \n         self._checks()\n-        success = False\n \n         # Logging\n         if settings.verbose:\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#a94541d38c8883457195a1a388c56172fc2df745", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 0 | Lines Deleted: 13 | Files Changed: 1 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): -3/0 | Churn Δ: 13 | Churn Cumulative: 220 | Contributors (this commit): 1 | Commits (past 90d): 10 | Contributors (cumulative): 1 | DMM Complexity: 1.0\n\nDIFF:\n@@ -132,23 +132,10 @@ def get_unicode_from_response(r):\n \n     if encoding:\n         try:\n-            print '!'\n             return unicode(r.content, encoding)\n         except UnicodeError:\n             tried_encodings.append(encoding)\n \n-    # Try every encodings from <meta ... charset=XXX>\n-    encodings = get_encodings_from_content(r.content)\n-\n-    for encoding in encodings:\n-        if encoding in tried_encodings:\n-            continue\n-        try:\n-\n-            return unicode(r.content, encoding)\n-        except (UnicodeError, TypeError):\n-            tried_encodings.append(encoding)\n-\n     # Fall back:\n     try:\n         return unicode(r.content, encoding, errors='replace')\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#636e61d68b9176c614f8243295c81552dd0ee199", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 19 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 3/3 | Churn Δ: 19 | Churn Cumulative: 239 | Contributors (this commit): 1 | Commits (past 90d): 11 | Contributors (cumulative): 1 | DMM Complexity: 1.0\n\nDIFF:\n@@ -110,6 +110,25 @@ def get_encoding_from_headers(headers):\n         return params['charset'].strip(\"'\\\"\")\n \n \n+def unicode_from_html(content):\n+    \"\"\"Attempts to decode an HTML string into unicode.\n+    If unsuccessful, the original content is returned.\n+    \"\"\"\n+\n+    encodings = get_encodings_from_content(content)\n+\n+    for encoding in encodings:\n+\n+        try:\n+            return unicode(content, encoding)\n+        except (UnicodeError, TypeError):\n+            pass\n+\n+    return content\n+\n+\n+\n+\n def get_unicode_from_response(r):\n     \"\"\"Returns the requested content back in unicode.\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#1d0a5b2665ce73dac5f27f9f698f451ca3812579", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 0 | Lines Deleted: 3 | Files Changed: 1 | Hunks: 2 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 3 | Churn Cumulative: 242 | Contributors (this commit): 1 | Commits (past 90d): 12 | Contributors (cumulative): 1 | DMM Complexity: None\n\nDIFF:\n@@ -96,7 +96,6 @@ def get_encodings_from_content(content):\n     return charset_re.findall(content)\n \n \n-\n def get_encoding_from_headers(headers):\n     \"\"\"Returns encodings from given HTTP Header Dict.\n \n@@ -127,8 +126,6 @@ def unicode_from_html(content):\n         return content\n \n \n-\n-\n def get_unicode_from_response(r):\n     \"\"\"Returns the requested content back in unicode.\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#256c86f8f7deb5375c38b6cc55c3d54d0366d283", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 35 | Lines Deleted: 35 | Files Changed: 2 | Hunks: 2 | Methods Changed: 2 | Complexity Δ (Sum/Max): 0/8 | Churn Δ: 70 | Churn Cumulative: 1760 | Contributors (this commit): 14 | Commits (past 90d): 92 | Contributors (cumulative): 15 | DMM Complexity: None\n\nDIFF:\n@@ -383,41 +383,6 @@ class Request(object):\n \n         return self.sent\n \n-    @property\n-    def curl(self):\n-        \"\"\"Creates a curl command from the request\"\"\"\n-\n-        #TODO - Auth with User names and accounts\n-        #TODO - Files\n-        #TODO - OAuth\n-        #TODO - Cookies?\n-\n-        #: -L/--location - if there is a redirect, redo request on the new place\n-        curl_cmd = 'curl -L '\n-\n-        #: -H/--header - Extra header to use when getting a web page\n-        header = ''\n-        if self.headers:\n-            header = header.join(['-H \"' + key + ':' + value + '\" ' for key, value in self.headers.iteritems()])\n-\n-        if self.method.upper() == 'HEAD':\n-            #: -I/--head - fetch headers only\n-            method_opt = '-I '\n-        else:\n-            #: -X/--request - specify request method\n-            method_opt = '-X %s ' % self.method.upper()\n-\n-        data = ''\n-        if self.method in ('PUT', 'POST', 'PATCH'):\n-            #: -d/--data - send specified data in post request.\n-            if isinstance(self.data, (list, tuple)):\n-                data = data.join(['-d ' + key + '=' + value + ' ' for key, value in self.data])\n-            elif self._enc_data is not None:\n-                data = '-d ' + self._enc_data + ' '\n-\n-        #: Params handled in _build_url\n-        return curl_cmd + method_opt + data + header + '\"' + self._build_url() + '\"'\n-\n \n class Response(object):\n     \"\"\"The core :class:`Response <Response>` object. All\n\n@@ -166,3 +166,38 @@ def decode_gzip(content):\n     \"\"\"\n \n     return zlib.decompress(content, 16+zlib.MAX_WBITS)\n+\n+\n+def curl_from_request(request):\n+    \"\"\"Creates a curl command from the request.\"\"\"\n+\n+    #TODO - Auth with User names and accounts\n+    #TODO - Files\n+    #TODO - OAuth\n+    #TODO - Cookies?\n+\n+    #: -L/--location - if there is a redirect, redo request on the new place\n+    curl_cmd = 'curl -L '\n+\n+    #: -H/--header - Extra header to use when getting a web page\n+    header = ''\n+    if request.headers:\n+        header = header.join(['-H \"' + key + ':' + value + '\" ' for key, value in request.headers.iteritems()])\n+\n+    if request.method.upper() == 'HEAD':\n+        #: -I/--head - fetch headers only\n+        method_opt = '-I '\n+    else:\n+        #: -X/--request - specify request method\n+        method_opt = '-X %s ' % request.method.upper()\n+\n+    data = ''\n+    if request.method in ('PUT', 'POST', 'PATCH'):\n+        #: -d/--data - send specified data in post request.\n+        if isinstance(request.data, (list, tuple)):\n+            data = data.join(['-d ' + key + '=' + value + ' ' for key, value in request.data])\n+        elif request._enc_data is not None:\n+            data = '-d ' + request._enc_data + ' '\n+\n+    #: Params handled in _build_url\n+    return curl_cmd + method_opt + data + header + '\"' + request._build_url() + '\"'\n\\ No newline at end of file\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#2dfcc0bb7b7eb9060e523f785845919d277ab412", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 281 | Contributors (this commit): 1 | Commits (past 90d): 14 | Contributors (cumulative): 1 | DMM Complexity: None\n\nDIFF:\n@@ -195,9 +195,9 @@ def curl_from_request(request):\n     if request.method in ('PUT', 'POST', 'PATCH'):\n         #: -d/--data - send specified data in post request.\n         if isinstance(request.data, (list, tuple)):\n-            data = data.join(['-d ' + key + '=' + value + ' ' for key, value in request.data])\n+            data = data.join(['-d %s=%s ' % (k, v) for (k, v) in request.data])\n         elif request._enc_data is not None:\n-            data = '-d ' + request._enc_data + ' '\n+            data = '-d %s ' % (request._enc_data)\n \n     #: Params handled in _build_url\n     return curl_cmd + method_opt + data + header + '\"' + request._build_url() + '\"'\n\\ No newline at end of file\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#cc2c54093e97965b38d0ae1611bb19cd503d6888", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 18 | Lines Deleted: 14 | Files Changed: 1 | Hunks: 7 | Methods Changed: 1 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 32 | Churn Cumulative: 313 | Contributors (this commit): 2 | Commits (past 90d): 15 | Contributors (cumulative): 2 | DMM Complexity: 0.0\n\nDIFF:\n@@ -171,33 +171,37 @@ def decode_gzip(content):\n def curl_from_request(request):\n     \"\"\"Creates a curl command from the request.\"\"\"\n \n-    #TODO - Auth with User names and accounts\n     #TODO - Files\n-    #TODO - OAuth\n-    #TODO - Cookies?\n+    #TODO - OAuth/Other Auths\n+    #TODO - Cookies\n \n     #: -L/--location - if there is a redirect, redo request on the new place\n-    curl_cmd = 'curl -L '\n+    curl = 'curl -L '\n+\n+    #: -u/--user - Specify the user name and password to use for server auth. \n+    auth = ''\n+    if request.auth is not None:\n+       auth = '-u \"%s:%s\" ' % (request.auth.username, request.auth.password) \n+\n+    if request.method.upper() == 'HEAD':\n+        #: -I/--head - fetch headers only\n+        method = '-I '\n+    else:\n+        #: -X/--request - specify request method\n+        method = '-X %s ' % request.method.upper()\n \n     #: -H/--header - Extra header to use when getting a web page\n     header = ''\n     if request.headers:\n-        header = header.join(['-H \"' + key + ':' + value + '\" ' for key, value in request.headers.iteritems()])\n-\n-    if request.method.upper() == 'HEAD':\n-        #: -I/--head - fetch headers only\n-        method_opt = '-I '\n-    else:\n-        #: -X/--request - specify request method\n-        method_opt = '-X %s ' % request.method.upper()\n+        header = header.join(['-H \"%s:%s\" ' % (k, v) for k, v in request.headers.iteritems()])\n \n     data = ''\n     if request.method in ('PUT', 'POST', 'PATCH'):\n         #: -d/--data - send specified data in post request.\n         if isinstance(request.data, (list, tuple)):\n-            data = data.join(['-d %s=%s ' % (k, v) for (k, v) in request.data])\n+            data = data.join(['-d \"%s=%s\" ' % (k, v) for (k, v) in request.data])\n         elif request._enc_data is not None:\n             data = '-d %s ' % (request._enc_data)\n \n     #: Params handled in _build_url\n-    return curl_cmd + method_opt + data + header + '\"' + request._build_url() + '\"'\n\\ No newline at end of file\n+    return curl + auth + method + header + data + '\"' + request._build_url() + '\"'\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#3dd2235ac5343ce0c4d4a4b7937f8ce2127f0612", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 315 | Contributors (this commit): 2 | Commits (past 90d): 16 | Contributors (cumulative): 2 | DMM Complexity: None\n\nDIFF:\n@@ -172,7 +172,7 @@ def curl_from_request(request):\n     \"\"\"Creates a curl command from the request.\"\"\"\n \n     #TODO - Files\n-    #TODO - OAuth/Other Auths\n+    #TODO - OAuth\n     #TODO - Cookies\n \n     #: -L/--location - if there is a redirect, redo request on the new place\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#cfee8308772a3c931539688f9928ca6ff81d36cf", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 1 | Churn Cumulative: 316 | Contributors (this commit): 2 | Commits (past 90d): 17 | Contributors (cumulative): 2 | DMM Complexity: None\n\nDIFF:\n@@ -203,5 +203,6 @@ def curl_from_request(request):\n         elif request._enc_data is not None: \n             data = '-d %s ' % (request._enc_data) \n \n+\n     #: Params handled in _build_url \n     return curl + auth + method + header + data + '\"' + request._build_url() + '\"' \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#71195bb219ed24717961a3f968a00be7f3d8a4a7", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 0 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 1 | Churn Cumulative: 317 | Contributors (this commit): 2 | Commits (past 90d): 18 | Contributors (cumulative): 2 | DMM Complexity: None\n\nDIFF:\n@@ -203,6 +203,5 @@ def curl_from_request(request):\n         elif request._enc_data is not None:\n             data = '-d %s ' % (request._enc_data)\n \n-\n     #: Params handled in _build_url\n     return curl + auth + method + header + data + '\"' + request._build_url() + '\"'\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#7fa4fdacc9d3e0a418bf2dee1a897bfa799748e9", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 19 | Lines Deleted: 6 | Files Changed: 1 | Hunks: 6 | Methods Changed: 1 | Complexity Δ (Sum/Max): 4/4 | Churn Δ: 25 | Churn Cumulative: 342 | Contributors (this commit): 2 | Commits (past 90d): 19 | Contributors (cumulative): 2 | DMM Complexity: 0.0\n\nDIFF:\n@@ -171,7 +171,6 @@ def decode_gzip(content):\n def curl_from_request(request):\n     \"\"\"Creates a curl command from the request.\"\"\"\n \n-    #TODO - Files\n     #TODO - OAuth\n     #TODO - Cookies\n \n@@ -179,6 +178,7 @@ def curl_from_request(request):\n     curl = 'curl -L '\n \n     #: -u/--user - Specify the user name and password to use for server auth.\n+    #: Basic Auth only for now\n     auth = ''\n     if request.auth is not None:\n        auth = '-u \"%s:%s\" ' % (request.auth.username, request.auth.password)\n@@ -195,13 +195,26 @@ def curl_from_request(request):\n     if request.headers:\n         header = header.join(['-H \"%s:%s\" ' % (k, v) for k, v in request.headers.iteritems()])\n \n-    data = ''\n+    form = ''\n     if request.method in ('PUT', 'POST', 'PATCH'):\n+        #: request.files is updated with request.data if both exist.\n+        #: ContentType multipart/form-data is used\n+        if request.files:\n+           #: -F/--form - Emulate form data. To force 'content' to a file, prefix file name @.\n+            for k, v in request.files.iteritems():\n+                if isinstance(v, file):\n+                    form = form + '-F \"%s=@%s\" ' % (k, v.name)\n+                elif v not in (None, ''):\n+                    form = form + '-F \"%s=%s\" ' % (k, v)\n+\n+        #: content-type application/x-www-form-urlencoded is used here\n+        else:\n             #: -d/--data - send specified data in post request.\n             if isinstance(request.data, (list, tuple)):\n-            data = data.join(['-d \"%s=%s\" ' % (k, v) for (k, v) in request.data])\n-        elif request._enc_data is not None:\n-            data = '-d %s ' % (request._enc_data)\n+                form = form.join(['-d \"%s=%s\" ' % (k, v) for k, v in request.data])\n+            elif request._enc_data not in (None, ''):\n+                form = \"-d '%s' \" % (request._enc_data)\n \n     #: Params handled in _build_url\n-    return curl + auth + method + header + data + '\"' + request._build_url() + '\"'\n+    return curl + auth + method + header + form + '\"' + request._build_url() + '\"'\n+\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#c243d0939828423bc5af92b07a4026ee406466ee", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 14 | Lines Deleted: 4 | Files Changed: 1 | Hunks: 2 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 18 | Churn Cumulative: 148 | Contributors (this commit): 4 | Commits (past 90d): 12 | Contributors (cumulative): 4 | DMM Complexity: None\n\nDIFF:\n@@ -56,15 +56,25 @@ class Settings(object):\n \n settings = Settings()\n \n-settings.base_headers = {'User-Agent': 'python-requests.org'}\n+settings.base_headers = {\n+    'User-Agent': 'python-requests.org',\n+    'Accept-Encoding': ', '.join([ 'identity', 'deflate', 'compress', 'gzip' ]),\n+}\n settings.accept_gzip = True\n settings.proxies = None\n settings.verbose = None\n settings.timeout = None\n settings.max_redirects = 30\n-# settings.decode_unicode = True\n-settings.unicode_response = True\n-settings.decode_response = True\n+settings.decode_unicode = False\n+settings.gracefull_hooks = True\n+\n+#: A dictionary of default hooks to be applied, based on settings.\n+settings.default_hooks = {\n+    'args': list(),\n+    'pre_request': list(),\n+    'post_request': list(),\n+    'response': list()\n+}\n \n #: Use socket.setdefaulttimeout() as fallback?\n settings.timeout_fallback = True\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#d8fb6d2a5a169d1bbfd0c1a8cc583a55ecd4e88b", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 52 | Lines Deleted: 17 | Files Changed: 1 | Hunks: 10 | Methods Changed: 4 | Complexity Δ (Sum/Max): 3/3 | Churn Δ: 69 | Churn Cumulative: 92 | Contributors (this commit): 1 | Commits (past 90d): 2 | Contributors (cumulative): 1 | DMM Complexity: 0.0\n\nDIFF:\n@@ -25,23 +25,49 @@ Available hooks:\n import warnings\n from collections import Iterable\n from .. import config\n-from response import unicode_response, decode_response\n+from . import args\n+from . import pre_request\n+from . import post_request\n+from . import response\n \n-def setup_hooks(hooks):\n-    \"\"\"Setup hooks as a dictionary. Each value is a set of hooks.\"\"\"\n+def setup_hooks(supplied):\n+    \"\"\"Setup the supplied dictionary of hooks.\n+    Each value is a list of hooks and will extend **default_hooks**.\n \n-    for key, values in hooks.items():\n+    :param supplied: a dictionary of hooks. Each value can either be a callable\n+                     or a list of callables.\n+    :type supplied: dict\n+    :returns: a dictionary of hooks that extends the **default_hooks** dictionary.\n+    :rtype: dict\n+    \"\"\"\n+\n+    # Copy the default hooks settings.\n+    dispatching = dict([(k, v[:]) for k, v in config.settings.default_hooks])\n+\n+    # I abandoned the idea of a dictionary of sets because sets may not keep\n+    # insertion order, while it may be important. Also, there is no real reason\n+    # to force hooks to run once.\n+    for hooks, values in supplied.items():\n         hook_list = values if isinstance(values, Iterable) else [values]\n-        hooks[key] = set(hook_list) \n+        dispatching[hooks].extends(hook_list)\n \n-    # Also, based on settings, \n-    if config.settings.unicode_response:\n-        hooks.setdefault('response', set()).add(unicode_response)\n-    if config.settings.decode_response:\n-        hooks.setdefault('response', set()).add(decode_response)\n-    return hooks\n+    # If header is set, maybe response is encoded. Whatever hook you want to\n+    # run on response, content decoding should be first.\n+    if config.settings.base_headers.get('Accept-Encoding', ''):\n+        dispatching['response'].insert(0, response.decode_encoding)\n \n-def dispatch_hooks(hooks, hook_data):\n+    if config.settings.decode_unicode:\n+        try:\n+            # Try unicode encoding just after content decoding...\n+            index = dispatching['response'].index(response.decode_encoding) + 1\n+        except ValueError:\n+            # ... Or as first hook\n+            index = 0\n+        dispatching['response'].insert(index, response.decode_unicode)\n+\n+    return dispatching\n+\n+def dispatch_hooks(hooks, data):\n     \"\"\"Dispatches multiple hooks on a given piece of data.\n \n     :param key: the hooks group to lookup\n@@ -49,13 +75,22 @@ def dispatch_hooks(hooks, hook_data):\n     :param hooks: the hooks dictionary. The value of each key can be a callable\n                   object, or a list of callable objects.\n     :type hooks: dict\n-    :param hook_data: the object on witch the hooks should be applied\n-    :type hook_data: object\n+    :param data: the object on witch the hooks should be applied\n+    :type data: object\n     \"\"\"\n     for hook in hooks:\n         try:\n-            # hook must be a callable\n-            hook_data = hook(hook_data)\n+            # hook must be a callable.\n+            data = hook(data)\n+\n         except Exception, why:\n+\n+            # Letting users to choose a policy may be an idea. It can be as\n+            # simple as \"be gracefull, or not\":\n+            #\n+            # config.settings.gracefull_hooks = True | False\n+            if not config.settings.gracefull_hooks: raise\n+\n             warnings.warn(str(why))\n-    return hook_data\n+\n+    return data\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#335bf7018d7b073ff9fe3ab68fa92dd12a4c57b8", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 3 | Churn Cumulative: 95 | Contributors (this commit): 1 | Commits (past 90d): 3 | Contributors (cumulative): 1 | DMM Complexity: 0.0\n\nDIFF:\n@@ -42,7 +42,8 @@ def setup_hooks(supplied):\n     \"\"\"\n \n     # Copy the default hooks settings.\n-    dispatching = dict([(k, v[:]) for k, v in config.settings.default_hooks])\n+    default = config.settings.default_hooks\n+    dispatching = dict([(k, v[:]) for k, v in default.items()])\n \n     # I abandoned the idea of a dictionary of sets because sets may not keep\n     # insertion order, while it may be important. Also, there is no real reason\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#3bf6c63d522fa096bad1bf4873bc1a9accc8ed61", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 6 | Lines Deleted: 7 | Files Changed: 1 | Hunks: 6 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 13 | Churn Cumulative: 586 | Contributors (this commit): 6 | Commits (past 90d): 21 | Contributors (cumulative): 6 | DMM Complexity: None\n\nDIFF:\n@@ -43,9 +43,7 @@ def request(method, url,\n \n     method = str(method).upper()\n \n-    cookies = cookiejar_from_dict(cookies or dict())\n-\n-    hooks = setup_hooks(hooks or dict())\n+    cookies = cookiejar_from_dict(cookies if cookies is not None else dict())\n \n     args = dict(\n         method = method,\n@@ -61,23 +59,24 @@ def request(method, url,\n         proxies = proxies or config.settings.proxies,\n     )\n     \n+    hooks = setup_hooks(hooks if hooks is not None else dict())\n \n     # Arguments manipulation hook.\n-    args = dispatch_hooks(hooks.get('args', []), args)\n+    args = dispatch_hooks(hooks['args'], args)\n \n     r = Request(**args)\n \n     # Pre-request hook.\n-    r = dispatch_hooks(hooks.get('pre_request', []), r)\n+    r = dispatch_hooks(hooks['pre_request'], r)\n \n     # Send the HTTP Request.\n     r.send()\n \n     # Post-request hook.\n-    r = dispatch_hooks(hooks.get('post_request', []), hooks, r)\n+    r = dispatch_hooks(hooks['post_request'], r)\n \n     # Response manipulation hook.\n-    r.response = dispatch_hooks(hooks.get('response', []), r.response)\n+    r.response = dispatch_hooks(hooks['response'], r.response)\n \n     return r.response\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#d8c923c3850a4f29a39f7da46a77169d8cfe9537", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 62 | Lines Deleted: 21 | Files Changed: 1 | Hunks: 11 | Methods Changed: 6 | Complexity Δ (Sum/Max): 3/3 | Churn Δ: 83 | Churn Cumulative: 133 | Contributors (this commit): 1 | Commits (past 90d): 3 | Contributors (cumulative): 1 | DMM Complexity: 1.0\n\nDIFF:\n@@ -4,41 +4,82 @@ request.hooks.response\n \n This module provide a collection of response hooks.\n \"\"\"\n-from functools import wraps\n import zlib\n+import bz2\n from cgi import parse_header\n \n+try:\n+    import json\n+except ImportError:\n+    try:\n+        import simplejson as json\n+    except ImportError:\n+        json = False\n+try:\n+    from lxml import etree\n+except ImportError:\n+    try:\n+        import xml.etree.cElementTree as etree\n+    except ImportError:\n+        try:\n+            import xml.etree.ElementTree as etree\n+        except ImportError:\n+            try:\n+                import cElementTree as etree\n+            except ImportError:\n+                try:\n+                    import elementtree.ElementTree as etree\n+                except ImportError:\n+                    etree = False\n+\n #: Dictionary of content decoders.\n-decoders = {\n+content_decoders = {\n     # No decoding applied.\n-    'identity': lambda r: r.content,\n+    'identity': lambda content: content,\n     # Decode Response file object compressed with deflate.\n-    'deflate': lambda r: zlib.decompress(r.content),\n+    'deflate': lambda content: zlib.decompress(content),\n     # Decode Response file object compressed with gzip.\n-    'gzip': lambda r: zlib.decompress(r.content, 16+zlib.MAX_WBITS),\n+    'gzip': lambda content: zlib.decompress(content, 16+zlib.MAX_WBITS),\n+    # Decode Response file object compressed with bz2.\n+    # Not a standard Content-Encoding value, but..\n+    'bzip2': lambda content: bz2.decompress(content),\n }\n \n # Decode Response file object compressed with compress.\n-decoders['compress'] = decoders['deflate']\n+content_decoders['compress'] = content_decoders['deflate']\n \n-try:\n-    import bz2\n-except ImportError:\n-    pass\n-else:\n-    # Decode Response file object compressed with bz2.\n-    decoders['bzip2'] = lambda r: bz2.decompress(r.content)\n-\n-def unicode_response(r):\n-    \"\"\"Encode response file object in unicode.\"\"\"\n-    content_type, params = parse_header(r.headers.get('content-type'))\n+def decode_unicode(r):\n+    \"\"\"Encode a :py:class:`requests.models.Response` file object in unicode.\"\"\"\n+    content_type, params = parse_header(r.headers['content-type'])\n     charset = params.get('charset', '').strip(\"'\\\"\")\n     r._content = unicode(r.content, charset) if charset else unicode(r.content)\n     return r\n \n-def decode_response(r):\n-    \"\"\"Decode compressed response content using Contetn-Encoding header.\"\"\"\n-    encoding = r.headers.get('content-encoding')\n-    r._content = decoders.get(encoding)(r)\n+def decode_encoding(r):\n+    \"\"\"\n+        Decode a :py:class:`requests.models.Response` content using\n+        Contetn-Encoding header.\n+    \"\"\"\n+    # Apply decoding only if the header is set.\n+    encoding = r.headers['content-encoding']\n+    if encoding:\n+        r._content = content_decoders[encoding](r.content)\n     return r\n \n+if json:\n+    def json_content(r):\n+        \"\"\"\n+            Turns :py:class:`requests.models.Response` content into a dumped\n+            JSON structure.\n+        \"\"\"\n+        r._content = json.dumps(r.content)\n+        return r\n+\n+if etree:\n+    def etree_content(r):\n+        \"\"\"\n+            Turns :py:class:`requests.models.Response` content into an\n+            ElementTree structure.\n+        \"\"\"\n+        r._content = etree.fromstring(r.content)\n+        return r\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
