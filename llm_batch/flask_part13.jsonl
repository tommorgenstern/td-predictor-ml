{"custom_id": "flask#a3a72e2d8d8df53164689fd84a5db2c6cd04f28a", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 11 | Lines Deleted: 2 | Files Changed: 2 | Hunks: 3 | Methods Changed: 2 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 13 | Churn Cumulative: 1397 | Contributors (this commit): 3 | Commits (past 90d): 38 | Contributors (cumulative): 5 | DMM Complexity: 1.0\n\nDIFF:\n@@ -724,6 +724,16 @@ class Flask(_PackageBoundObject):\n             return self.response_class(*rv)\n         return self.response_class.force_type(rv, request.environ)\n \n+    def create_url_adapter(self, request):\n+        \"\"\"Creates a URL adapter for the given request.  The URL adapter\n+        is created at a point where the request context is not yet set up\n+        so the request is passed explicitly.\n+\n+        .. versionadded:: 0.6\n+        \"\"\"\n+        return self.url_map.bind_to_environ(request.environ,\n+            server_name=self.config['SERVER_NAME'])\n+\n     def preprocess_request(self):\n         \"\"\"Called before the actual request dispatching and will\n         call every as :meth:`before_request` decorated function.\n\n@@ -28,9 +28,8 @@ class _RequestContext(object):\n \n     def __init__(self, app, environ):\n         self.app = app\n-        self.url_adapter = app.url_map.bind_to_environ(environ,\n-            server_name=app.config['SERVER_NAME'])\n         self.request = app.request_class(environ)\n+        self.url_adapter = app.create_url_adapter(self.request)\n         self.session = app.open_session(self.request)\n         if self.session is None:\n             self.session = _NullSession()\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#e5008386b1a7e0ef3ebb5a4082bf2176d7169ab9", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 5 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 5 | Churn Cumulative: 1300 | Contributors (this commit): 3 | Commits (past 90d): 31 | Contributors (cumulative): 3 | DMM Complexity: None\n\nDIFF:\n@@ -371,6 +371,11 @@ class Flask(_PackageBoundObject):\n         :attr:`debug` flag is set the server will automatically reload\n         for code changes and show a debugger in case an exception happened.\n \n+        If you want to run the application in debug mode, but disable the\n+        code execution on the interactive debugger, you can pass\n+        ``use_evalex=False`` as parameter.  This will keep the debugger's\n+        traceback screen active, but disable code execution.\n+\n         .. admonition:: Keep in Mind\n \n            Flask will suppress any server error with a generic error page\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#b6cae028f7a2c77108e5ef91e34c285a9ae7ad81", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 0 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 1 | Churn Cumulative: 51 | Contributors (this commit): 1 | Commits (past 90d): 2 | Contributors (cumulative): 1 | DMM Complexity: None\n\nDIFF:\n@@ -13,7 +13,6 @@ signals_available = False\n try:\n     from blinker import Namespace\n     signals_available = True\n-    _signals = Namespace()\n except ImportError:\n     class Namespace(object):\n         def signal(self, name, doc=None):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#405d4492e41b50f204d7e7d55aa0ac8f11edda1a", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 1302 | Contributors (this commit): 3 | Commits (past 90d): 32 | Contributors (cumulative): 3 | DMM Complexity: None\n\nDIFF:\n@@ -311,7 +311,7 @@ class Flask(_PackageBoundObject):\n \n     def create_jinja_environment(self):\n         \"\"\"Creates the Jinja2 environment based on :attr:`jinja_options`\n-        and :meth:`create_jinja_loader`.\n+        and :meth:`select_jinja_autoescape`.\n \n         .. versionadded:: 0.5\n         \"\"\"\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#97d2a198e216b29be5533dfba81525481bc9c1e5", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 14 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 14 | Churn Cumulative: 350 | Contributors (this commit): 2 | Commits (past 90d): 12 | Contributors (cumulative): 2 | DMM Complexity: None\n\nDIFF:\n@@ -250,3 +250,17 @@ intersphinx_mapping = {\n }\n \n pygments_style = 'flask_theme_support.FlaskyStyle'\n+\n+# fall back if theme is not there\n+try:\n+    __import__('flask_theme_support')\n+except ImportError, e:\n+    print '-' * 74\n+    print 'Warning: Flask themes unavailable.  Building with default theme'\n+    print 'If you want the Flask themes, run this command and build again:'\n+    print\n+    print '  git submodule init'\n+    print '-' * 74\n+\n+    pygments_style = 'tango'\n+    html_theme = 'default'\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#5d011c356dfc659a4c2ef66e8c847d489aef4e9c", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 1 | Churn Cumulative: 351 | Contributors (this commit): 2 | Commits (past 90d): 13 | Contributors (cumulative): 2 | DMM Complexity: None\n\nDIFF:\n@@ -264,3 +264,4 @@ except ImportError, e:\n \n     pygments_style = 'tango'\n     html_theme = 'default'\n+    html_theme_options = {}\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#2b103134cf165ba453d5492e1a73b57b1e5bef1e", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 353 | Contributors (this commit): 2 | Commits (past 90d): 14 | Contributors (cumulative): 2 | DMM Complexity: None\n\nDIFF:\n@@ -259,7 +259,7 @@ except ImportError, e:\n     print 'Warning: Flask themes unavailable.  Building with default theme'\n     print 'If you want the Flask themes, run this command and build again:'\n     print\n-    print '  git submodule init'\n+    print '  git submodule update --init'\n     print '-' * 74\n \n     pygments_style = 'tango'\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#27d28dcef4cee8765dcd7a567689d35a41ddcd75", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 1 | Churn Cumulative: 146 | Contributors (this commit): 2 | Commits (past 90d): 12 | Contributors (cumulative): 2 | DMM Complexity: None\n\nDIFF:\n@@ -23,6 +23,7 @@ from .helpers import url_for, jsonify, json_available, flash, \\\n from .globals import current_app, g, request, session, _request_ctx_stack\n from .module import Module\n from .templating import render_template, render_template_string\n+from .session import Session\n \n # the signals\n from .signals import signals_available, template_rendered, request_started, \\\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#2912ff6f6e85983c372e1bc481337f3fdf6c7b9d", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 1 | Churn Cumulative: 52 | Contributors (this commit): 1 | Commits (past 90d): 3 | Contributors (cumulative): 1 | DMM Complexity: None\n\nDIFF:\n@@ -17,6 +17,7 @@ except ImportError:\n     class Namespace(object):\n         def signal(self, name, doc=None):\n             return _FakeSignal(name, doc)\n+\n     class _FakeSignal(object):\n         \"\"\"If blinker is unavailable, create a fake class with the same\n         interface that allows sending of signals but will fail with an\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#c5b1755317c7bdfc20f4395a9a29a83b5b9cfd43", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 15 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 2 | Complexity Δ (Sum/Max): 2/2 | Churn Δ: 15 | Churn Cumulative: 1279 | Contributors (this commit): 6 | Commits (past 90d): 46 | Contributors (cumulative): 6 | DMM Complexity: 1.0\n\nDIFF:\n@@ -496,6 +496,21 @@ class JSONTestCase(unittest.TestCase):\n             rv = render('{{ \"<\\0/script>\"|tojson|safe }}')\n             assert rv == '\"<\\\\u0000\\\\/script>\"'\n \n+    def test_modified_url_encoding(self):\n+        class ModifiedRequest(flask.Request):\n+            url_charset = 'euc-kr'\n+        app = flask.Flask(__name__)\n+        app.request_class = ModifiedRequest\n+        app.url_map.charset = 'euc-kr'\n+\n+        @app.route('/')\n+        def index():\n+            return flask.request.args['foo']\n+\n+        rv = app.test_client().get(u'/?foo=정상처리'.encode('euc-kr'))\n+        assert rv.status_code == 200\n+        assert rv.data == u'정상처리'.encode('utf-8')\n+\n \n class TemplatingTestCase(unittest.TestCase):\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#b49afa21ade898061d279ea20ba964d7e583c419", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 8 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 4 | Methods Changed: 2 | Complexity Δ (Sum/Max): 2/2 | Churn Δ: 10 | Churn Cumulative: 1289 | Contributors (this commit): 6 | Commits (past 90d): 47 | Contributors (cumulative): 6 | DMM Complexity: 1.0\n\nDIFF:\n@@ -1052,12 +1052,15 @@ class TestSignals(unittest.TestCase):\n         def record(sender, template, context):\n             recorded.append((template, context))\n \n-        with flask.template_rendered.temporarily_connected_to(record, app):\n+        flask.template_rendered.connect(record, app)\n+        try:\n             rv = app.test_client().get('/')\n             assert len(recorded) == 1\n             template, context = recorded[0]\n             assert template.name == 'simple_template.html'\n             assert context['whiskey'] == 42\n+        finally:\n+            flask.template_rendered.disconnect(record, app)\n \n     def test_request_signals(self):\n         app = flask.Flask(__name__)\n@@ -1110,10 +1113,13 @@ class TestSignals(unittest.TestCase):\n         def record(sender, exception):\n             recorded.append(exception)\n \n-        with flask.got_request_exception.temporarily_connected_to(record):\n+        flask.got_request_exception.connect(record, app)\n+        try:\n             assert app.test_client().get('/').status_code == 500\n             assert len(recorded) == 1\n             assert isinstance(recorded[0], ZeroDivisionError)\n+        finally:\n+            flask.got_request_exception.disconnect(record, app)\n \n \n def suite():\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#7680d52f42a562eda2e3f75b34118abb08d93414", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 32 | Lines Deleted: 2 | Files Changed: 3 | Hunks: 9 | Methods Changed: 10 | Complexity Δ (Sum/Max): 3/3 | Churn Δ: 34 | Churn Cumulative: 2878 | Contributors (this commit): 6 | Commits (past 90d): 92 | Contributors (cumulative): 12 | DMM Complexity: 1.0\n\nDIFF:\n@@ -454,6 +454,7 @@ class Flask(_PackageBoundObject):\n         provided.\n         \"\"\"\n         options.setdefault('url_prefix', module.url_prefix)\n+        options.setdefault('subdomain', module.subdomain)\n         state = _ModuleSetupState(self, **options)\n         for func in module._register_events:\n             func(state)\n\n@@ -37,9 +37,10 @@ def _register_module(module, static_path):\n \n class _ModuleSetupState(object):\n \n-    def __init__(self, app, url_prefix=None):\n+    def __init__(self, app, url_prefix=None, subdomain=None):\n         self.app = app\n         self.url_prefix = url_prefix\n+        self.subdomain = subdomain\n \n \n class Module(_PackageBoundObject):\n@@ -94,6 +95,9 @@ class Module(_PackageBoundObject):\n        modules to refer to their own templates and static files.  See\n        :ref:`modules-and-resources` for more information.\n \n+    .. versionadded:: 0.6\n+       The `subdomain` parameter was added.\n+\n     :param import_name: the name of the Python package or module\n                         implementing this :class:`Module`.\n     :param name: the internal short name for the module.  Unless specified\n@@ -101,6 +105,8 @@ class Module(_PackageBoundObject):\n     :param url_prefix: an optional string that is used to prefix all the\n                        URL rules of this module.  This can also be specified\n                        when registering the module with the application.\n+    :param subdomain: used to set the subdomain setting for URL rules that\n+                      do not have a subdomain setting set.\n     :param static_path: can be used to specify a different path for the\n                         static files on the web.  Defaults to ``/static``.\n                         This does not affect the folder the files are served\n@@ -108,7 +114,7 @@ class Module(_PackageBoundObject):\n     \"\"\"\n \n     def __init__(self, import_name, name=None, url_prefix=None,\n-                 static_path=None):\n+                 static_path=None, subdomain=None):\n         if name is None:\n             assert '.' in import_name, 'name required if package name ' \\\n                 'does not point to a submodule'\n@@ -116,6 +122,7 @@ class Module(_PackageBoundObject):\n         _PackageBoundObject.__init__(self, import_name)\n         self.name = name\n         self.url_prefix = url_prefix\n+        self.subdomain = subdomain\n         self._register_events = [_register_module(self, static_path)]\n \n     def route(self, rule, **options):\n@@ -140,6 +147,7 @@ class Module(_PackageBoundObject):\n             the_rule = rule\n             if state.url_prefix:\n                 the_rule = state.url_prefix + rule\n+            options.setdefault('subdomain', state.subdomain)\n             the_endpoint = endpoint\n             if the_endpoint is None:\n                 the_endpoint = _endpoint_from_view_func(view_func)\n\n@@ -1038,6 +1038,27 @@ class SubdomainTestCase(unittest.TestCase):\n         rv = c.get('/', 'http://mitsuhiko.localhost/')\n         assert rv.data == 'index for mitsuhiko'\n \n+    def test_module_subdomain_support(self):\n+        app = flask.Flask(__name__)\n+        mod = flask.Module(__name__, 'test', subdomain='testing')\n+        app.config['SERVER_NAME'] = 'localhost'\n+\n+        @mod.route('/test')\n+        def test():\n+            return 'Test'\n+\n+        @mod.route('/outside', subdomain='xtesting')\n+        def bar():\n+            return 'Outside'\n+\n+        app.register_module(mod)\n+\n+        c = app.test_client()\n+        rv = c.get('/test', 'http://testing.localhost/')\n+        assert rv.data == 'Test'\n+        rv = c.get('/outside', 'http://xtesting.localhost/')\n+        assert rv.data == 'Outside'\n+\n \n class TestSignals(unittest.TestCase):\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#dcf5dff414f2f4b9b24047510d3fa7ac643e971f", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 3 | Churn Cumulative: 357 | Contributors (this commit): 2 | Commits (past 90d): 15 | Contributors (cumulative): 2 | DMM Complexity: None\n\nDIFF:\n@@ -246,8 +246,7 @@ intersphinx_mapping = {\n     'http://werkzeug.pocoo.org/documentation/dev/': None,\n     'http://www.sqlalchemy.org/docs/': None,\n     'http://wtforms.simplecodes.com/docs/0.5/': None,\n-    # TODO: push to 1.1\n-    'http://discorporate.us/projects/Blinker/docs/1.0/': None\n+    'http://discorporate.us/projects/Blinker/docs/1.1/': None\n }\n \n pygments_style = 'flask_theme_support.FlaskyStyle'\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#a993a314fe7be148747cf804167d45f2ea8bf18e", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 132 | Contributors (this commit): 3 | Commits (past 90d): 9 | Contributors (cumulative): 3 | DMM Complexity: None\n\nDIFF:\n@@ -8,7 +8,7 @@\n     :copyright: (c) 2010 by Armin Ronacher.\n     :license: BSD, see LICENSE for more details.\n \"\"\"\n-from jinja2 import BaseLoader, FileSystemLoader, TemplateNotFound\n+from jinja2 import BaseLoader, TemplateNotFound\n \n from .globals import _request_ctx_stack\n from .signals import template_rendered\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#3a80ecc66057d97e3a0ceb40e99ea7bde035381b", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 212 | Lines Deleted: 32 | Files Changed: 1 | Hunks: 16 | Methods Changed: 17 | Complexity Δ (Sum/Max): 12/12 | Churn Δ: 244 | Churn Cumulative: 341 | Contributors (this commit): 1 | Commits (past 90d): 2 | Contributors (cumulative): 1 | DMM Complexity: 1.0\n\nDIFF:\n@@ -11,7 +11,14 @@\n \n from __future__ import with_statement\n \n-import tempfile, subprocess, urllib2, os\n+import os\n+import sys\n+import shutil\n+import urllib2\n+import tempfile\n+import subprocess\n+import argparse\n+from cStringIO import StringIO\n \n from flask import json\n \n@@ -19,24 +26,136 @@ from setuptools.package_index import PackageIndex\n from setuptools.archive_util import unpack_archive\n \n flask_svc_url = 'http://flask.pocoo.org/extensions/'\n-tdir = tempfile.mkdtemp()\n+\n+if sys.platform == 'darwin':\n+    _tempdir = '/private/tmp'\n+else:\n+    _tempdir = tempfile.gettempdir()\n+tdir = _tempdir + '/flaskext-test'\n+flaskdir = os.path.abspath(os.path.join(os.path.dirname(__file__),\n+                                        '..'))\n \n \n-def run_tests(checkout_dir):\n-    cmd = ['tox']\n-    return subprocess.call(cmd, cwd=checkout_dir,\n-                           stdout=open(os.path.join(tdir, 'tox.log'), 'w'),\n-                           stderr=subprocess.STDOUT)\n+RESULT_TEMPATE = u'''\\\n+<!doctype html>\n+<title>Flask-Extension Test Results</title>\n+<style type=text/css>\n+  body         { font-family: 'Georgia', serif; font-size: 17px; color: #000; }\n+  a            { color: #004B6B; }\n+  a:hover      { color: #6D4100; }\n+  h1, h2, h3   { font-family: 'Garamond', 'Georgia', serif; font-weight: normal; }\n+  h1           { font-size: 30px; margin: 15px 0 5px 0; }\n+  h2           { font-size: 24px; margin: 15px 0 5px 0; }\n+  h3           { font-size: 19px; margin: 15px 0 5px 0; }\n+  textarea, code,\n+  pre          { font-family: 'Consolas', 'Menlo', 'Deja Vu Sans Mono',\n+                 'Bitstream Vera Sans Mono', monospace!important; font-size: 15px;\n+                 background: #eee; }\n+  pre          { padding: 7px 15px; line-height: 1.3; }\n+  p            { line-height: 1.4; }\n+  table        { border: 1px solid black; border-collapse: collapse;\n+                 margin: 15px 0; }\n+  td, th       { border: 1px solid black; padding: 4px 10px;\n+                 text-align: left; }\n+  th           { background: #eee; font-weight: normal; }\n+  tr.success   { background: #D3F5CC; }\n+  tr.failed    { background: #F5D2CB; }\n+</style>\n+<h1>Flask-Extension Test Results</h1>\n+<p>\n+  This page contains the detailed test results for the test run of\n+  all {{ 'approved' if approved }} Flask extensions.\n+<h2>Summary</h2>\n+<table class=results>\n+  <thead>\n+    <tr>\n+      <th>Extension\n+      <th>Version\n+      <th>Author\n+      <th>License\n+      <th>Outcome\n+    </tr>\n+  </thead>\n+  <tbody>\n+  {%- for result in results %}\n+    {% set outcome = 'success' if result.success else 'failed' %}\n+    <tr class={{ outcome }}>\n+      <th>{{ result.name }}\n+      <td>{{ result.version }}\n+      <td>{{ result.author }}\n+      <td>{{ result.license }}\n+      <td>{{ outcome }}\n+    </tr>\n+  {%- endfor %}\n+  </tbody>\n+</table>\n+<h2>Test Logs</h2>\n+<p>Detailed test logs for all tests on all platforms:\n+{%- for result in results %}\n+  {%- for iptr, log in result.logs|dictsort %}\n+    <h3>{{ result.name }} - {{ result.version }} [{{ iptr }}]</h3>\n+    <pre>{{ log }}</pre>\n+  {%- endfor %}\n+{%- endfor %}\n+'''\n+\n+\n+def log(msg, *args):\n+    print '[EXTTEST]', msg % args\n+\n+\n+class TestResult(object):\n+\n+    def __init__(self, name, folder, statuscode, interpreters):\n+        intrptr = os.path.join(folder, '.tox/%s/bin/python'\n+                               % interpreters[0])\n+        self.statuscode = statuscode\n+        self.folder = folder\n+        self.success = statuscode == 0\n+\n+        def fetch(field):\n+            try:\n+                c = subprocess.Popen([intrptr, 'setup.py',\n+                                      '--' + field], cwd=folder,\n+                                      stdout=subprocess.PIPE)\n+                return c.communicate()[0].strip()\n+            except OSError:\n+                return '?'\n+        self.name = name\n+        self.license = fetch('license')\n+        self.author = fetch('author')\n+        self.version = fetch('version')\n+\n+        self.logs = {}\n+        for interpreter in interpreters:\n+            logfile = os.path.join(folder, '.tox/%s/log/test.log'\n+                                   % interpreter)\n+            if os.path.isfile(logfile):\n+                self.logs[interpreter] = open(logfile).read()\n+            else:\n+                self.logs[interpreter] = ''\n+\n+\n+def create_tdir():\n+    try:\n+        shutil.rmtree(tdir)\n+    except Exception:\n+        pass\n+    os.mkdir(tdir)\n+\n+\n+def package_flask():\n+    distfolder = tdir + '/.flask-dist'\n+    c = subprocess.Popen(['python', 'setup.py', 'sdist', '--formats=gztar',\n+                          '--dist', distfolder], cwd=flaskdir)\n+    c.wait()\n+    return os.path.join(distfolder, os.listdir(distfolder)[0])\n \n \n def get_test_command(checkout_dir):\n-    files = set(os.listdir(checkout_dir))\n-    if 'Makefile' in files:\n+    if os.path.isfile(checkout_dir + '/Makefile'):\n         return 'make test'\n-    elif 'conftest.py' in files:\n-        return 'py.test'\n-    else:\n-        return 'nosetests'\n+    return 'python setup.py test'\n \n \n def fetch_extensions_list():\n@@ -47,50 +166,111 @@ def fetch_extensions_list():\n         yield ext\n \n \n-def checkout_extension(ext):\n-    name = ext['name']\n+def checkout_extension(name):\n+    log('Downloading extension %s to temporary folder', name)\n     root = os.path.join(tdir, name)\n     os.mkdir(root)\n-    checkout_path = PackageIndex().download(ext['name'], root)\n+    checkout_path = PackageIndex().download(name, root)\n+\n     unpack_archive(checkout_path, root)\n     path = None\n     for fn in os.listdir(root):\n         path = os.path.join(root, fn)\n         if os.path.isdir(path):\n             break\n+    log('Downloaded to %s', path)\n     return path\n \n \n tox_template = \"\"\"[tox]\n-envlist=py26\n+envlist=%(env)s\n \n [testenv]\n-commands=\n-%s\n-downloadcache=\n-%s\n+deps=%(deps)s\n+commands=bash flaskext-runtest.sh {envlogdir}/test.log\n+downloadcache=%(cache)s\n \"\"\"\n \n-def create_tox_ini(checkout_path):\n+\n+def create_tox_ini(checkout_path, interpreters, flask_dep):\n     tox_path = os.path.join(checkout_path, 'tox.ini')\n     if not os.path.exists(tox_path):\n         with open(tox_path, 'w') as f:\n-            f.write(tox_template % (get_test_command(checkout_path), tdir))\n+            f.write(tox_template % {\n+                'env':      ','.join(interpreters),\n+                'cache':    tdir,\n+                'deps':     flask_dep\n+            })\n \n-# XXX command line\n-only_approved = True\n \n-def test_all_extensions(only_approved=only_approved):\n+def iter_extensions(only_approved=True):\n     for ext in fetch_extensions_list():\n         if ext['approved'] or not only_approved:\n-            checkout_path = checkout_extension(ext)\n-            create_tox_ini(checkout_path)\n-            ret = run_tests(checkout_path)\n-            yield ext['name'], ret\n+            yield ext['name']\n+\n+\n+def test_extension(name, interpreters, flask_dep):\n+    checkout_path = checkout_extension(name)\n+    log('Running tests with tox in %s', checkout_path)\n+\n+    # figure out the test command and write a wrapper script.  We\n+    # can't write that directly into the tox ini because tox does\n+    # not invoke the command from the shell so we have no chance\n+    # to pipe the output into a logfile\n+    test_command = get_test_command(checkout_path)\n+    log('Test command: %s', test_command)\n+    f = open(checkout_path + '/flaskext-runtest.sh', 'w')\n+    f.write(test_command + ' &> \"$1\"\\n')\n+    f.close()\n+\n+    create_tox_ini(checkout_path, interpreters, flask_dep)\n+    rv = subprocess.call(['tox'], cwd=checkout_path)\n+    return TestResult(name, checkout_path, rv, interpreters)\n+\n+\n+def run_tests(interpreters, only_approved=True):\n+    results = {}\n+    create_tdir()\n+    log('Packaging Flask')\n+    flask_dep = package_flask()\n+    log('Running extension tests')\n+    log('Temporary Environment: %s', tdir)\n+    for name in iter_extensions(only_approved):\n+        log('Testing %s', name)\n+        result = test_extension(name, interpreters, flask_dep)\n+        if result.success:\n+            log('Extension test succeeded')\n+        else:\n+            log('Extension test failed')\n+        results[name] = result\n+    return results\n+\n+\n+def render_results(results, approved):\n+    from jinja2 import Template\n+    items = results.values()\n+    items.sort(key=lambda x: x.name.lower())\n+    rv = Template(RESULT_TEMPATE, autoescape=True).render(results=items,\n+                                                          approved=approved)\n+    fd, filename = tempfile.mkstemp(suffix='.html')\n+    os.fdopen(fd, 'w').write(rv.encode('utf-8') + '\\n')\n+    return filename\n+\n \n def main():\n-    for name, ret in test_all_extensions():\n-        print name, ret\n+    parser = argparse.ArgumentParser(description='Runs Flask extension tests')\n+    parser.add_argument('--all', dest='all', action='store_true',\n+                        help='run against all extensions, not just approved')\n+    parser.add_argument('--browse', dest='browse', action='store_true',\n+                        help='show browser with the result summary')\n+    args = parser.parse_args()\n+\n+    results = run_tests(['py26'], not args.all)\n+    filename = render_results(results, not args.all)\n+    if args.browse:\n+        import webbrowser\n+        webbrowser.open('file:///' + filename.lstrip('/'))\n+    print 'Results written to', filename\n \n \n if __name__ == '__main__':\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#fee5bdafe84bfcec492c2643544373c71f1e82a8", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 3 | Files Changed: 2 | Hunks: 3 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 1913 | Contributors (this commit): 4 | Commits (past 90d): 58 | Contributors (cumulative): 6 | DMM Complexity: None\n\nDIFF:\n@@ -11,7 +11,6 @@\n \n from __future__ import with_statement\n \n-import os\n from threading import Lock\n from datetime import timedelta, datetime\n from itertools import chain\n@@ -20,7 +19,7 @@ from jinja2 import Environment\n \n from werkzeug import ImmutableDict\n from werkzeug.routing import Map, Rule\n-from werkzeug.exceptions import HTTPException, InternalServerError, NotFound\n+from werkzeug.exceptions import HTTPException, InternalServerError\n \n from .helpers import _PackageBoundObject, url_for, get_flashed_messages, \\\n     _tojson_filter, _endpoint_from_view_func\n\n@@ -15,7 +15,6 @@ import posixpath\n import mimetypes\n from time import time\n from zlib import adler32\n-from functools import wraps\n \n # try to load the best simplejson implementation available.  If JSON\n # is not installed, we add a failing class.\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#63a37b75aca15085e685d99f8b7a2e79c83e1f57", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 23 | Lines Deleted: 5 | Files Changed: 1 | Hunks: 7 | Methods Changed: 3 | Complexity Δ (Sum/Max): 2/2 | Churn Δ: 28 | Churn Cumulative: 382 | Contributors (this commit): 1 | Commits (past 90d): 4 | Contributors (cumulative): 1 | DMM Complexity: 1.0\n\nDIFF:\n@@ -74,6 +74,9 @@ RESULT_TEMPATE = u'''\\\n       <th>Author\n       <th>License\n       <th>Outcome\n+      {%- for iptr, _ in results[0].logs|dictsort %}\n+        <th>{{ iptr }}\n+      {%- endfor %}\n     </tr>\n   </thead>\n   <tbody>\n@@ -85,6 +88,9 @@ RESULT_TEMPATE = u'''\\\n       <td>{{ result.author }}\n       <td>{{ result.license }}\n       <td>{{ outcome }}\n+      {%- for iptr, _ in result.logs|dictsort %}\n+        <td><a href=\"#{{ result.name }}-{{ iptr }}\">see log</a>\n+      {%- endfor %}\n     </tr>\n   {%- endfor %}\n   </tbody>\n@@ -93,7 +99,8 @@ RESULT_TEMPATE = u'''\\\n <p>Detailed test logs for all tests on all platforms:\n {%- for result in results %}\n   {%- for iptr, log in result.logs|dictsort %}\n-    <h3>{{ result.name }} - {{ result.version }} [{{ iptr }}]</h3>\n+    <h3 id=\"{{ result.name }}-{{ iptr }}\">\n+      {{ result.name }} - {{ result.version }} [{{ iptr }}]</h3>\n     <pre>{{ log }}</pre>\n   {%- endfor %}\n {%- endfor %}\n@@ -237,14 +244,14 @@ def test_extension(name, interpreters, flask_dep):\n     return TestResult(name, checkout_path, rv, interpreters)\n \n \n-def run_tests(interpreters, only_approved=True):\n+def run_tests(extensions, interpreters):\n     results = {}\n     create_tdir()\n     log('Packaging Flask')\n     flask_dep = package_flask()\n     log('Running extension tests')\n     log('Temporary Environment: %s', tdir)\n-    for name in iter_extensions(only_approved):\n+    for name in extensions:\n         log('Testing %s', name)\n         result = test_extension(name, interpreters, flask_dep)\n         if result.success:\n@@ -272,10 +279,21 @@ def main():\n                         help='run against all extensions, not just approved')\n     parser.add_argument('--browse', dest='browse', action='store_true',\n                         help='show browser with the result summary')\n+    parser.add_argument('--env', dest='env', default='py25,py26,py27',\n+                        help='the tox environments to run against')\n+    parser.add_argument('--extension=', dest='extension', default=None,\n+                        help='tests a single extension')\n     args = parser.parse_args()\n \n-    results = run_tests(['py26'], not args.all)\n-    filename = render_results(results, not args.all)\n+    if args.extension is not None:\n+        only_approved = False\n+        extensions = [args.extension]\n+    else:\n+        only_approved = not args.all\n+        extensions = iter_extensions(only_approved)\n+\n+    results = run_tests(extensions, [x.strip() for x in args.env.split(',')])\n+    filename = render_results(results, only_approved)\n     if args.browse:\n         import webbrowser\n         webbrowser.open('file:///' + filename.lstrip('/'))\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#8bd8b014a8393d4b94e6fd192b64e3a2d2f65fce", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 5 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 2 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 7 | Churn Cumulative: 393 | Contributors (this commit): 1 | Commits (past 90d): 6 | Contributors (cumulative): 1 | DMM Complexity: None\n\nDIFF:\n@@ -27,13 +27,16 @@ from setuptools.archive_util import unpack_archive\n \n flask_svc_url = 'http://flask.pocoo.org/extensions/'\n \n+\n+# OS X has awful paths when using mkstemp or gettempdir().  I don't\n+# care about security or clashes here, so pick something that is\n+# actually rememberable.\n if sys.platform == 'darwin':\n     _tempdir = '/private/tmp'\n else:\n     _tempdir = tempfile.gettempdir()\n tdir = _tempdir + '/flaskext-test'\n-flaskdir = os.path.abspath(os.path.join(os.path.dirname(__file__),\n-                                        '..'))\n+flaskdir = os.path.abspath(os.path.join(os.path.dirname(__file__), '..'))\n \n \n # virtualenv hack *cough*\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#6aeb6a09aff3115466eb39253ec236ec98348d9e", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 3 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 397 | Contributors (this commit): 1 | Commits (past 90d): 7 | Contributors (cumulative): 1 | DMM Complexity: None\n\nDIFF:\n@@ -200,7 +200,9 @@ tox_template = \"\"\"[tox]\n envlist=%(env)s\n \n [testenv]\n-deps=%(deps)s\n+deps=\n+  %(deps)s\n+  py\n commands=bash flaskext-runtest.sh {envlogdir}/test.log\n downloadcache=%(cache)s\n \"\"\"\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#16b101edb6c10a984b0f2960feeeca5a458845a1", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 119 | Contributors (this commit): 2 | Commits (past 90d): 10 | Contributors (cumulative): 2 | DMM Complexity: None\n\nDIFF:\n@@ -50,7 +50,7 @@ def run_tests():\n \n setup(\n     name='Flask',\n-    version='0.6',\n+    version='0.7',\n     url='http://github.com/mitsuhiko/flask/',\n     license='BSD',\n     author='Armin Ronacher',\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#4cd5201cdd03e14edbceb24620717bbe82300524", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 3 | Lines Deleted: 5 | Files Changed: 1 | Hunks: 4 | Methods Changed: 2 | Complexity Δ (Sum/Max): -1/0 | Churn Δ: 8 | Churn Cumulative: 405 | Contributors (this commit): 2 | Commits (past 90d): 8 | Contributors (cumulative): 2 | DMM Complexity: 0.0\n\nDIFF:\n@@ -209,7 +209,7 @@ downloadcache=%(cache)s\n \n \n def create_tox_ini(checkout_path, interpreters, flask_dep):\n-    tox_path = os.path.join(checkout_path, 'tox.ini')\n+    tox_path = os.path.join(checkout_path, 'tox-flask-test.ini')\n     if not os.path.exists(tox_path):\n         with open(tox_path, 'w') as f:\n             f.write(tox_template % {\n@@ -217,6 +217,7 @@ def create_tox_ini(checkout_path, interpreters, flask_dep):\n                 'cache':    tdir,\n                 'deps':     flask_dep\n             })\n+    return tox_path\n \n \n def iter_extensions(only_approved=True):\n@@ -244,12 +245,9 @@ def test_extension(name, interpreters, flask_dep):\n     # if there is a tox.ini, remove it, it will cause troubles\n     # for us.  Remove it if present, we are running tox ourselves\n     # afterall.\n-    toxini = os.path.join(checkout_path, 'tox.ini')\n-    if os.path.isfile(toxini):\n-        os.remove(toxini)\n \n     create_tox_ini(checkout_path, interpreters, flask_dep)\n-    rv = subprocess.call(['tox'], cwd=checkout_path)\n+    rv = subprocess.call(['tox', '-c', 'tox-flask-test.ini'], cwd=checkout_path)\n     return TestResult(name, checkout_path, rv, interpreters)\n \n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#dbf55de7e8bfcf7cde967aa72ea006b764d484ac", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 30 | Lines Deleted: 4 | Files Changed: 2 | Hunks: 4 | Methods Changed: 5 | Complexity Δ (Sum/Max): 6/3 | Churn Δ: 34 | Churn Cumulative: 2650 | Contributors (this commit): 6 | Commits (past 90d): 76 | Contributors (cumulative): 9 | DMM Complexity: 1.0\n\nDIFF:\n@@ -19,7 +19,8 @@ from jinja2 import Environment\n \n from werkzeug import ImmutableDict\n from werkzeug.routing import Map, Rule\n-from werkzeug.exceptions import HTTPException, InternalServerError\n+from werkzeug.exceptions import HTTPException, InternalServerError, \\\n+     MethodNotAllowed\n \n from .helpers import _PackageBoundObject, url_for, get_flashed_messages, \\\n     _tojson_filter, _endpoint_from_view_func\n@@ -689,14 +690,28 @@ class Flask(_PackageBoundObject):\n             # if we provide automatic options for this URL and the\n             # request came with the OPTIONS method, reply automatically \n             if rule.provide_automatic_options and req.method == 'OPTIONS':\n-                rv = self.response_class()\n-                rv.allow.update(rule.methods)\n-                return rv\n+                return self._make_default_options_response()\n             # otherwise dispatch to the handler for that endpoint\n             return self.view_functions[rule.endpoint](**req.view_args)\n         except HTTPException, e:\n             return self.handle_http_exception(e)\n \n+    def _make_default_options_response(self):\n+        # This would be nicer in Werkzeug 0.7, which however currently\n+        # is not released.  Werkzeug 0.7 provides a method called\n+        # allowed_methods() that returns all methods that are valid for\n+        # a given path.\n+        methods = []\n+        try:\n+            _request_ctx_stack.top.url_adapter.match(method='--')\n+        except MethodNotAllowed, e:\n+            methods = e.valid_methods\n+        except HTTPException, e:\n+            pass\n+        rv = self.response_class()\n+        rv.allow.update(methods)\n+        return rv\n+\n     def make_response(self, rv):\n         \"\"\"Converts the return value from a view function to a real\n         response object that is an instance of :attr:`response_class`.\n\n@@ -120,6 +120,17 @@ class BasicFunctionalityTestCase(unittest.TestCase):\n         assert sorted(rv.allow) == ['GET', 'HEAD', 'OPTIONS', 'POST']\n         assert rv.data == ''\n \n+    def test_options_on_multiple_rules(self):\n+        app = flask.Flask(__name__)\n+        @app.route('/', methods=['GET', 'POST'])\n+        def index():\n+            return 'Hello World'\n+        @app.route('/', methods=['PUT'])\n+        def index_put():\n+            return 'Aha!'\n+        rv = app.test_client().open('/', method='OPTIONS')\n+        assert sorted(rv.allow) == ['GET', 'HEAD', 'OPTIONS', 'POST', 'PUT']\n+\n     def test_request_dispatching(self):\n         app = flask.Flask(__name__)\n         @app.route('/')\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#952967fcab0ffccc6b67485e8eed994a69d38d03", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 8 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 2 | Methods Changed: 3 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 10 | Churn Cumulative: 1339 | Contributors (this commit): 3 | Commits (past 90d): 36 | Contributors (cumulative): 3 | DMM Complexity: None\n\nDIFF:\n@@ -690,13 +690,19 @@ class Flask(_PackageBoundObject):\n             # if we provide automatic options for this URL and the\n             # request came with the OPTIONS method, reply automatically \n             if rule.provide_automatic_options and req.method == 'OPTIONS':\n-                return self._make_default_options_response()\n+                return self.make_default_options_response()\n             # otherwise dispatch to the handler for that endpoint\n             return self.view_functions[rule.endpoint](**req.view_args)\n         except HTTPException, e:\n             return self.handle_http_exception(e)\n \n-    def _make_default_options_response(self):\n+    def make_default_options_response(self):\n+        \"\"\"This method is called to create the default `OPTIONS` response.\n+        This can be changed through subclassing to change the default\n+        behaviour of `OPTIONS` responses.\n+\n+        .. versionadded:: 0.7\n+        \"\"\"\n         # This would be nicer in Werkzeug 0.7, which however currently\n         # is not released.  Werkzeug 0.7 provides a method called\n         # allowed_methods() that returns all methods that are valid for\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#801918603cb075f96ff6c08a6fc6fb165f1eecda", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 609 | Contributors (this commit): 4 | Commits (past 90d): 25 | Contributors (cumulative): 4 | DMM Complexity: None\n\nDIFF:\n@@ -33,7 +33,7 @@ except ImportError:\n             json_available = False\n \n \n-from werkzeug import Headers, wrap_file, is_resource_modified, cached_property\n+from werkzeug import Headers, wrap_file, cached_property\n from werkzeug.exceptions import NotFound\n \n from jinja2 import FileSystemLoader\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#778e44e39eb42ff6cbee376ce40d1a52a25cb0ce", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 16 | Lines Deleted: 0 | Files Changed: 2 | Hunks: 3 | Methods Changed: 2 | Complexity Δ (Sum/Max): 3/2 | Churn Δ: 16 | Churn Cumulative: 1350 | Contributors (this commit): 6 | Commits (past 90d): 45 | Contributors (cumulative): 7 | DMM Complexity: 1.0\n\nDIFF:\n@@ -116,7 +116,11 @@ class Config(dict):\n         filename = os.path.join(self.root_path, filename)\n         d = type(sys)('config')\n         d.__file__ = filename\n+        try:\n             execfile(filename, d.__dict__)\n+        except IOError, e:\n+            e.strerror = 'Unable to load configuration file (%s)' % e.strerror\n+            raise\n         self.from_object(d)\n \n     def from_object(self, obj):\n\n@@ -1018,6 +1018,18 @@ class ConfigTestCase(unittest.TestCase):\n         finally:\n             os.environ = env\n \n+    def test_config_missing(self):\n+        app = flask.Flask(__name__)\n+        try:\n+            app.config.from_pyfile('missing.cfg')\n+        except IOError, e:\n+            msg = str(e)\n+            assert msg.startswith('[Errno 2] Unable to load configuration '\n+                                  'file (No such file or directory):')\n+            assert msg.endswith(\"missing.cfg'\")\n+        else:\n+            assert 0, 'expected config'\n+\n \n class SubdomainTestCase(unittest.TestCase):\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#549af6229039e7fed7bcb2079737e45c27af998e", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 8 | Lines Deleted: 8 | Files Changed: 4 | Hunks: 7 | Methods Changed: 2 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 16 | Churn Cumulative: 2347 | Contributors (this commit): 6 | Commits (past 90d): 87 | Contributors (cumulative): 16 | DMM Complexity: None\n\nDIFF:\n@@ -215,7 +215,7 @@ class Flask(_PackageBoundObject):\n         #: A dictionary of all view functions registered.  The keys will\n         #: be function names which are also used to generate URLs and\n         #: the values are the function objects themselves.\n-        #: to register a view function, use the :meth:`route` decorator.\n+        #: To register a view function, use the :meth:`route` decorator.\n         self.view_functions = {}\n \n         #: A dictionary of all registered error handlers.  The key is\n@@ -242,7 +242,7 @@ class Flask(_PackageBoundObject):\n         self.after_request_funcs = {}\n \n         #: A dictionary with list of functions that are called without argument\n-        #: to populate the template context.  They key of the dictionary is the\n+        #: to populate the template context.  The key of the dictionary is the\n         #: name of the module this function is active for, `None` for all\n         #: requests.  Each returns a dictionary that the template context is\n         #: updated with.  To register a function here, use the\n\n@@ -146,7 +146,7 @@ def url_for(endpoint, **values):\n     \"\"\"Generates a URL to the given endpoint with the method provided.\n     The endpoint is relative to the active module if modules are in use.\n \n-    Here some examples:\n+    Here are some examples:\n \n     ==================== ======================= =============================\n     Active Module        Target Endpoint         Target Function\n\n@@ -54,7 +54,7 @@ class Module(_PackageBoundObject):\n     to be provided to keep them apart.  If different import names are used,\n     the rightmost part of the import name is used as name.\n \n-    Here an example structure for a larger appliation::\n+    Here's an example structure for a larger application::\n \n         /myapplication\n             /__init__.py\n@@ -73,7 +73,7 @@ class Module(_PackageBoundObject):\n         app.register_module(admin, url_prefix='/admin')\n         app.register_module(frontend)\n \n-    And here an example view module (`myapplication/views/admin.py`)::\n+    And here's an example view module (`myapplication/views/admin.py`)::\n \n         from flask import Module\n \n\n@@ -17,7 +17,7 @@ from .globals import _request_ctx_stack\n \n \n class Request(RequestBase):\n-    \"\"\"The request object used by default in flask.  Remembers the\n+    \"\"\"The request object used by default in Flask.  Remembers the\n     matched endpoint and view arguments.\n \n     It is what ends up as :class:`~flask.request`.  If you want to replace\n@@ -77,8 +77,8 @@ class Request(RequestBase):\n \n \n class Response(ResponseBase):\n-    \"\"\"The response object that is used by default in flask.  Works like the\n-    response object from Werkzeug but is set to have a HTML mimetype by\n+    \"\"\"The response object that is used by default in Flask.  Works like the\n+    response object from Werkzeug but is set to have an HTML mimetype by\n     default.  Quite often you don't have to create this object yourself because\n     :meth:`~flask.Flask.make_response` will take care of that for you.\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
