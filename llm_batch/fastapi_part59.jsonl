{"custom_id": "fastapi#4d270463af2279d9723d99da45f0b31631424030", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 51 | Lines Deleted: 5 | Files Changed: 2 | Hunks: 8 | Methods Changed: 5 | Complexity Δ (Sum/Max): 4/4 | Churn Δ: 56 | Churn Cumulative: 275 | Contributors (this commit): 7 | Commits (past 90d): 2 | Contributors (cumulative): 10 | DMM Complexity: 1.0\n\nDIFF:\n@@ -1,19 +1,19 @@\n from fastapi.encoders import jsonable_encoder\n from fastapi.exceptions import RequestValidationError\n+from fastapi.utils import is_body_allowed_for_status_code\n from starlette.exceptions import HTTPException\n from starlette.requests import Request\n-from starlette.responses import JSONResponse\n+from starlette.responses import JSONResponse, Response\n from starlette.status import HTTP_422_UNPROCESSABLE_ENTITY\n \n \n-async def http_exception_handler(request: Request, exc: HTTPException) -> JSONResponse:\n+async def http_exception_handler(request: Request, exc: HTTPException) -> Response:\n     headers = getattr(exc, \"headers\", None)\n-    if headers:\n+    if not is_body_allowed_for_status_code(exc.status_code):\n+        return Response(status_code=exc.status_code, headers=headers)\n     return JSONResponse(\n         {\"detail\": exc.detail}, status_code=exc.status_code, headers=headers\n     )\n-    else:\n-        return JSONResponse({\"detail\": exc.detail}, status_code=exc.status_code)\n \n \n async def request_validation_exception_handler(\n\n@@ -18,6 +18,16 @@ async def read_item(item_id: str):\n     return {\"item\": items[item_id]}\n \n \n+@app.get(\"/http-no-body-statuscode-exception\")\n+async def no_body_status_code_exception():\n+    raise HTTPException(status_code=204)\n+\n+\n+@app.get(\"/http-no-body-statuscode-with-detail-exception\")\n+async def no_body_status_code_with_detail_exception():\n+    raise HTTPException(status_code=204, detail=\"I should just disappear!\")\n+\n+\n @app.get(\"/starlette-items/{item_id}\")\n async def read_starlette_item(item_id: str):\n     if item_id not in items:\n@@ -31,6 +41,30 @@ openapi_schema = {\n     \"openapi\": \"3.0.2\",\n     \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n     \"paths\": {\n+        \"/http-no-body-statuscode-exception\": {\n+            \"get\": {\n+                \"operationId\": \"no_body_status_code_exception_http_no_body_statuscode_exception_get\",\n+                \"responses\": {\n+                    \"200\": {\n+                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                        \"description\": \"Successful \" \"Response\",\n+                    }\n+                },\n+                \"summary\": \"No Body \" \"Status \" \"Code \" \"Exception\",\n+            }\n+        },\n+        \"/http-no-body-statuscode-with-detail-exception\": {\n+            \"get\": {\n+                \"operationId\": \"no_body_status_code_with_detail_exception_http_no_body_statuscode_with_detail_exception_get\",\n+                \"responses\": {\n+                    \"200\": {\n+                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                        \"description\": \"Successful \" \"Response\",\n+                    }\n+                },\n+                \"summary\": \"No Body Status Code With Detail Exception\",\n+            }\n+        },\n         \"/items/{item_id}\": {\n             \"get\": {\n                 \"responses\": {\n@@ -154,3 +188,15 @@ def test_get_starlette_item_not_found():\n     assert response.status_code == 404, response.text\n     assert response.headers.get(\"x-error\") is None\n     assert response.json() == {\"detail\": \"Item not found\"}\n+\n+\n+def test_no_body_status_code_exception_handlers():\n+    response = client.get(\"/http-no-body-statuscode-exception\")\n+    assert response.status_code == 204\n+    assert not response.content\n+\n+\n+def test_no_body_status_code_with_detail_exception_handlers():\n+    response = client.get(\"/http-no-body-statuscode-with-detail-exception\")\n+    assert response.status_code == 204\n+    assert not response.content\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#ed0fcba7cbea46b0cca74e9fce568f9c7316d8e8", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 376 | Contributors (this commit): 2 | Commits (past 90d): 6 | Contributors (cumulative): 2 | DMM Complexity: None\n\nDIFF:\n@@ -1,6 +1,6 @@\n \"\"\"FastAPI framework, high performance, easy to learn, fast to code, ready for production\"\"\"\n \n-__version__ = \"0.82.0\"\n+__version__ = \"0.83.0\"\n \n from starlette import status as status\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#4267bd1f4f716244a8087e5aa0e68c1de629cfa9", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 6 | Lines Deleted: 12 | Files Changed: 3 | Hunks: 5 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 18 | Churn Cumulative: 2707 | Contributors (this commit): 41 | Commits (past 90d): 11 | Contributors (cumulative): 52 | DMM Complexity: None\n\nDIFF:\n@@ -1,4 +1,5 @@\n-import sys\n+from contextlib import AsyncExitStack as AsyncExitStack  # noqa\n+from contextlib import asynccontextmanager as asynccontextmanager\n from typing import AsyncGenerator, ContextManager, TypeVar\n \n import anyio\n@@ -9,14 +10,6 @@ from starlette.concurrency import (  # noqa\n     run_until_first_complete as run_until_first_complete,\n )\n \n-if sys.version_info >= (3, 7):\n-    from contextlib import AsyncExitStack as AsyncExitStack\n-    from contextlib import asynccontextmanager as asynccontextmanager\n-else:\n-    from contextlib2 import AsyncExitStack as AsyncExitStack  # noqa\n-    from contextlib2 import asynccontextmanager as asynccontextmanager  # noqa\n-\n-\n _T = TypeVar(\"_T\")\n \n \n\n@@ -7,6 +7,7 @@ from typing import (\n     Callable,\n     Coroutine,\n     Dict,\n+    ForwardRef,\n     List,\n     Mapping,\n     Optional,\n@@ -47,7 +48,7 @@ from pydantic.fields import (\n     Undefined,\n )\n from pydantic.schema import get_annotation_from_field_info\n-from pydantic.typing import ForwardRef, evaluate_forwardref\n+from pydantic.typing import evaluate_forwardref\n from pydantic.utils import lenient_issubclass\n from starlette.background import BackgroundTasks\n from starlette.concurrency import run_in_threadpool\n\n@@ -54,8 +54,8 @@ def jsonable_encoder(\n         if custom_encoder:\n             encoder.update(custom_encoder)\n         obj_dict = obj.dict(\n-            include=include,  # type: ignore # in Pydantic\n-            exclude=exclude,  # type: ignore # in Pydantic\n+            include=include,\n+            exclude=exclude,\n             by_alias=by_alias,\n             exclude_unset=exclude_unset,\n             exclude_none=exclude_none,\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#1073062c7f2c48bcc28bcedbdc009c18c171f6fb", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 378 | Contributors (this commit): 2 | Commits (past 90d): 7 | Contributors (cumulative): 2 | DMM Complexity: None\n\nDIFF:\n@@ -1,6 +1,6 @@\n \"\"\"FastAPI framework, high performance, easy to learn, fast to code, ready for production\"\"\"\n \n-__version__ = \"0.83.0\"\n+__version__ = \"0.84.0\"\n \n from starlette import status as status\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#adcf03f2bce0950ea26c29e20d37cb894dd70c04", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 3 | Lines Deleted: 24 | Files Changed: 5 | Hunks: 17 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 27 | Churn Cumulative: 3944 | Contributors (this commit): 30 | Commits (past 90d): 7 | Contributors (cumulative): 41 | DMM Complexity: None\n\nDIFF:\n@@ -33,9 +33,10 @@ from fastapi.types import DecoratedCallable\n from fastapi.utils import generate_unique_id\n from starlette.applications import Starlette\n from starlette.datastructures import State\n-from starlette.exceptions import ExceptionMiddleware, HTTPException\n+from starlette.exceptions import HTTPException\n from starlette.middleware import Middleware\n from starlette.middleware.errors import ServerErrorMiddleware\n+from starlette.middleware.exceptions import ExceptionMiddleware\n from starlette.requests import Request\n from starlette.responses import HTMLResponse, JSONResponse, Response\n from starlette.routing import BaseRoute\n\n@@ -27,7 +27,7 @@ class APIKeyQuery(APIKeyBase):\n         self.auto_error = auto_error\n \n     async def __call__(self, request: Request) -> Optional[str]:\n-        api_key: str = request.query_params.get(self.model.name)\n+        api_key = request.query_params.get(self.model.name)\n         if not api_key:\n             if self.auto_error:\n                 raise HTTPException(\n\n@@ -5,8 +5,6 @@ from unittest.mock import MagicMock\n import pytest\n from fastapi.testclient import TestClient\n \n-from ...utils import needs_py37\n-\n openapi_schema = {\n     \"openapi\": \"3.0.2\",\n     \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n@@ -340,14 +338,12 @@ def client():\n     test_db.unlink()\n \n \n-@needs_py37\n def test_openapi_schema(client):\n     response = client.get(\"/openapi.json\")\n     assert response.status_code == 200, response.text\n     assert response.json() == openapi_schema\n \n \n-@needs_py37\n def test_create_user(client):\n     test_user = {\"email\": \"johndoe@example.com\", \"password\": \"secret\"}\n     response = client.post(\"/users/\", json=test_user)\n@@ -359,7 +355,6 @@ def test_create_user(client):\n     assert response.status_code == 400, response.text\n \n \n-@needs_py37\n def test_get_user(client):\n     response = client.get(\"/users/1\")\n     assert response.status_code == 200, response.text\n@@ -368,13 +363,11 @@ def test_get_user(client):\n     assert \"id\" in data\n \n \n-@needs_py37\n def test_inexistent_user(client):\n     response = client.get(\"/users/999\")\n     assert response.status_code == 404, response.text\n \n \n-@needs_py37\n def test_get_users(client):\n     response = client.get(\"/users/\")\n     assert response.status_code == 200, response.text\n@@ -386,7 +379,6 @@ def test_get_users(client):\n time.sleep = MagicMock()\n \n \n-@needs_py37\n def test_get_slowusers(client):\n     response = client.get(\"/slowusers/\")\n     assert response.status_code == 200, response.text\n@@ -395,7 +387,6 @@ def test_get_slowusers(client):\n     assert \"id\" in data[0]\n \n \n-@needs_py37\n def test_create_item(client):\n     item = {\"title\": \"Foo\", \"description\": \"Something that fights\"}\n     response = client.post(\"/users/1/items/\", json=item)\n@@ -419,7 +410,6 @@ def test_create_item(client):\n     assert item_to_check[\"description\"] == item[\"description\"]\n \n \n-@needs_py37\n def test_read_items(client):\n     response = client.get(\"/items/\")\n     assert response.status_code == 200, response.text\n\n@@ -4,14 +4,6 @@ from fastapi import FastAPI\n from fastapi.testclient import TestClient\n from pydantic import BaseModel\n \n-from .utils import needs_py37\n-\n-# In Python 3.6:\n-# u = Union[ExtendedItem, Item] == __main__.Item\n-\n-# But in Python 3.7:\n-# u = Union[ExtendedItem, Item] == typing.Union[__main__.ExtendedItem, __main__.Item]\n-\n app = FastAPI()\n \n \n@@ -118,21 +110,18 @@ inherited_item_openapi_schema = {\n }\n \n \n-@needs_py37\n def test_inherited_item_openapi_schema():\n     response = client.get(\"/openapi.json\")\n     assert response.status_code == 200, response.text\n     assert response.json() == inherited_item_openapi_schema\n \n \n-@needs_py37\n def test_post_extended_item():\n     response = client.post(\"/items/\", json={\"name\": \"Foo\", \"age\": 5})\n     assert response.status_code == 200, response.text\n     assert response.json() == {\"item\": {\"name\": \"Foo\", \"age\": 5}}\n \n \n-@needs_py37\n def test_post_item():\n     response = client.post(\"/items/\", json={\"name\": \"Foo\"})\n     assert response.status_code == 200, response.text\n\n@@ -2,7 +2,6 @@ import sys\n \n import pytest\n \n-needs_py37 = pytest.mark.skipif(sys.version_info < (3, 7), reason=\"requires python3.7+\")\n needs_py39 = pytest.mark.skipif(sys.version_info < (3, 9), reason=\"requires python3.9+\")\n needs_py310 = pytest.mark.skipif(\n     sys.version_info < (3, 10), reason=\"requires python3.10+\"\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#74ce2204ae9b6dee573e42d93fc096cca87aa37a", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 7 | Lines Deleted: 7 | Files Changed: 2 | Hunks: 4 | Methods Changed: 4 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 14 | Churn Cumulative: 6668 | Contributors (this commit): 54 | Commits (past 90d): 13 | Contributors (cumulative): 61 | DMM Complexity: None\n\nDIFF:\n@@ -426,22 +426,22 @@ def is_coroutine_callable(call: Callable[..., Any]) -> bool:\n         return inspect.iscoroutinefunction(call)\n     if inspect.isclass(call):\n         return False\n-    call = getattr(call, \"__call__\", None)\n-    return inspect.iscoroutinefunction(call)\n+    dunder_call = getattr(call, \"__call__\", None)\n+    return inspect.iscoroutinefunction(dunder_call)\n \n \n def is_async_gen_callable(call: Callable[..., Any]) -> bool:\n     if inspect.isasyncgenfunction(call):\n         return True\n-    call = getattr(call, \"__call__\", None)\n-    return inspect.isasyncgenfunction(call)\n+    dunder_call = getattr(call, \"__call__\", None)\n+    return inspect.isasyncgenfunction(dunder_call)\n \n \n def is_gen_callable(call: Callable[..., Any]) -> bool:\n     if inspect.isgeneratorfunction(call):\n         return True\n-    call = getattr(call, \"__call__\", None)\n-    return inspect.isgeneratorfunction(call)\n+    dunder_call = getattr(call, \"__call__\", None)\n+    return inspect.isgeneratorfunction(dunder_call)\n \n \n async def solve_generator(\n\n@@ -127,7 +127,7 @@ async def serialize_response(\n         if is_coroutine:\n             value, errors_ = field.validate(response_content, {}, loc=(\"response\",))\n         else:\n-            value, errors_ = await run_in_threadpool(  # type: ignore[misc]\n+            value, errors_ = await run_in_threadpool(\n                 field.validate, response_content, {}, loc=(\"response\",)\n             )\n         if isinstance(errors_, ErrorWrapper):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#12132276672c51412f3fc38bd5e228cf4a87ecfb", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 380 | Contributors (this commit): 2 | Commits (past 90d): 8 | Contributors (cumulative): 2 | DMM Complexity: None\n\nDIFF:\n@@ -1,6 +1,6 @@\n \"\"\"FastAPI framework, high performance, easy to learn, fast to code, ready for production\"\"\"\n \n-__version__ = \"0.84.0\"\n+__version__ = \"0.85.0\"\n \n from starlette import status as status\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#0ae8db447ad5f9b262b8d7264b8ee5f30426e7c2", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 73 | Lines Deleted: 0 | Files Changed: 2 | Hunks: 5 | Methods Changed: 3 | Complexity Δ (Sum/Max): 3/2 | Churn Δ: 73 | Churn Cumulative: 795 | Contributors (this commit): 22 | Commits (past 90d): 7 | Contributors (cumulative): 24 | DMM Complexity: 1.0\n\nDIFF:\n@@ -21,6 +21,16 @@ if TYPE_CHECKING:  # pragma: nocover\n def is_body_allowed_for_status_code(status_code: Union[int, str, None]) -> bool:\n     if status_code is None:\n         return True\n+    # Ref: https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.1.0.md#patterned-fields-1\n+    if status_code in {\n+        \"default\",\n+        \"1XX\",\n+        \"2XX\",\n+        \"3XX\",\n+        \"4XX\",\n+        \"5XX\",\n+    }:\n+        return True\n     current_status_code = int(status_code)\n     return not (current_status_code < 200 or current_status_code in {204, 304})\n \n\n@@ -1,5 +1,11 @@\n from fastapi import APIRouter, FastAPI\n from fastapi.testclient import TestClient\n+from pydantic import BaseModel\n+\n+\n+class ResponseModel(BaseModel):\n+    message: str\n+\n \n app = FastAPI()\n router = APIRouter()\n@@ -33,6 +39,18 @@ async def c():\n     return \"c\"\n \n \n+@router.get(\n+    \"/d\",\n+    responses={\n+        \"400\": {\"description\": \"Error with str\"},\n+        \"5XX\": {\"model\": ResponseModel},\n+        \"default\": {\"model\": ResponseModel},\n+    },\n+)\n+async def d():\n+    return \"d\"\n+\n+\n app.include_router(router)\n \n openapi_schema = {\n@@ -81,6 +99,45 @@ openapi_schema = {\n                 \"operationId\": \"c_c_get\",\n             }\n         },\n+        \"/d\": {\n+            \"get\": {\n+                \"responses\": {\n+                    \"400\": {\"description\": \"Error with str\"},\n+                    \"5XX\": {\n+                        \"description\": \"Server Error\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\"$ref\": \"#/components/schemas/ResponseModel\"}\n+                            }\n+                        },\n+                    },\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                    },\n+                    \"default\": {\n+                        \"description\": \"Default Response\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\"$ref\": \"#/components/schemas/ResponseModel\"}\n+                            }\n+                        },\n+                    },\n+                },\n+                \"summary\": \"D\",\n+                \"operationId\": \"d_d_get\",\n+            }\n+        },\n+    },\n+    \"components\": {\n+        \"schemas\": {\n+            \"ResponseModel\": {\n+                \"title\": \"ResponseModel\",\n+                \"required\": [\"message\"],\n+                \"type\": \"object\",\n+                \"properties\": {\"message\": {\"title\": \"Message\", \"type\": \"string\"}},\n+            }\n+        }\n     },\n }\n \n@@ -109,3 +166,9 @@ def test_c():\n     response = client.get(\"/c\")\n     assert response.status_code == 200, response.text\n     assert response.json() == \"c\"\n+\n+\n+def test_d():\n+    response = client.get(\"/d\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == \"d\"\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#90fc4299d1d24a54dda8bf6f01cf3779ce6cf467", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 382 | Contributors (this commit): 2 | Commits (past 90d): 8 | Contributors (cumulative): 2 | DMM Complexity: None\n\nDIFF:\n@@ -1,6 +1,6 @@\n \"\"\"FastAPI framework, high performance, easy to learn, fast to code, ready for production\"\"\"\n \n-__version__ = \"0.85.0\"\n+__version__ = \"0.85.1\"\n \n from starlette import status as status\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#e866a2c7e1ec598684da54f0311610c63a4b5f5a", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 3 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 3 | Methods Changed: 2 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 5 | Churn Cumulative: 596 | Contributors (this commit): 2 | Commits (past 90d): 1 | Contributors (cumulative): 2 | DMM Complexity: None\n\nDIFF:\n@@ -1,6 +1,7 @@\n import os\n import re\n import shutil\n+import subprocess\n from http.server import HTTPServer, SimpleHTTPRequestHandler\n from multiprocessing import Pool\n from pathlib import Path\n@@ -200,7 +201,7 @@ def build_lang(\n     )\n     current_dir = os.getcwd()\n     os.chdir(build_lang_path)\n-    mkdocs.commands.build.build(mkdocs.config.load_config(site_dir=str(dist_path)))\n+    subprocess.run([\"mkdocs\", \"build\", \"--site-dir\", dist_path], check=True)\n     os.chdir(current_dir)\n     typer.secho(f\"Successfully built docs for: {lang}\", color=typer.colors.GREEN)\n \n@@ -275,7 +276,7 @@ def build_all():\n     current_dir = os.getcwd()\n     os.chdir(en_docs_path)\n     typer.echo(\"Building docs for: en\")\n-    mkdocs.commands.build.build(mkdocs.config.load_config(site_dir=str(site_path)))\n+    subprocess.run([\"mkdocs\", \"build\", \"--site-dir\", site_path], check=True)\n     os.chdir(current_dir)\n     langs = []\n     for lang in get_lang_paths():\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#d0917ce01566c7b04f2c09fce81e87e122aa915c", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 384 | Contributors (this commit): 2 | Commits (past 90d): 9 | Contributors (cumulative): 2 | DMM Complexity: None\n\nDIFF:\n@@ -1,6 +1,6 @@\n \"\"\"FastAPI framework, high performance, easy to learn, fast to code, ready for production\"\"\"\n \n-__version__ = \"0.85.1\"\n+__version__ = \"0.85.2\"\n \n from starlette import status as status\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#ac9f56ea5ecc738eabd9282feae4679852155669", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 31 | Lines Deleted: 1 | Files Changed: 2 | Hunks: 6 | Methods Changed: 4 | Complexity Δ (Sum/Max): 2/2 | Churn Δ: 32 | Churn Cumulative: 4697 | Contributors (this commit): 34 | Commits (past 90d): 9 | Contributors (cumulative): 36 | DMM Complexity: 0.85\n\nDIFF:\n@@ -3,6 +3,7 @@ import dataclasses\n import email.message\n import inspect\n import json\n+from contextlib import AsyncExitStack\n from enum import Enum, IntEnum\n from typing import (\n     Any,\n@@ -190,6 +191,9 @@ def get_request_handler(\n             if body_field:\n                 if is_body_form:\n                     body = await request.form()\n+                    stack = request.scope.get(\"fastapi_astack\")\n+                    assert isinstance(stack, AsyncExitStack)\n+                    stack.push_async_callback(body.close)\n                 else:\n                     body_bytes = await request.body()\n                     if body_bytes:\n\n@@ -1,6 +1,10 @@\n+from pathlib import Path\n+from typing import List\n+\n import pytest\n-from fastapi import UploadFile\n+from fastapi import FastAPI, UploadFile\n from fastapi.datastructures import Default\n+from fastapi.testclient import TestClient\n \n \n def test_upload_file_invalid():\n@@ -20,3 +24,25 @@ def test_default_placeholder_bool():\n     placeholder_b = Default(\"\")\n     assert placeholder_a\n     assert not placeholder_b\n+\n+\n+def test_upload_file_is_closed(tmp_path: Path):\n+    path = tmp_path / \"test.txt\"\n+    path.write_bytes(b\"<file content>\")\n+    app = FastAPI()\n+\n+    testing_file_store: List[UploadFile] = []\n+\n+    @app.post(\"/uploadfile/\")\n+    def create_upload_file(file: UploadFile):\n+        testing_file_store.append(file)\n+        return {\"filename\": file.filename}\n+\n+    client = TestClient(app)\n+    with path.open(\"rb\") as file:\n+        response = client.post(\"/uploadfile/\", files={\"file\": file})\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\"filename\": \"test.txt\"}\n+\n+    assert testing_file_store\n+    assert testing_file_store[0].file.closed\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#5cd99a9517a555242e48dabee8fc7628efca2588", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 3 | Lines Deleted: 3 | Files Changed: 1 | Hunks: 3 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 6 | Churn Cumulative: 244 | Contributors (this commit): 7 | Commits (past 90d): 2 | Contributors (cumulative): 7 | DMM Complexity: None\n\nDIFF:\n@@ -47,10 +47,10 @@ openapi_schema = {\n                 \"responses\": {\n                     \"200\": {\n                         \"content\": {\"application/json\": {\"schema\": {}}},\n-                        \"description\": \"Successful \" \"Response\",\n+                        \"description\": \"Successful Response\",\n                     }\n                 },\n-                \"summary\": \"No Body \" \"Status \" \"Code \" \"Exception\",\n+                \"summary\": \"No Body Status Code Exception\",\n             }\n         },\n         \"/http-no-body-statuscode-with-detail-exception\": {\n@@ -59,7 +59,7 @@ openapi_schema = {\n                 \"responses\": {\n                     \"200\": {\n                         \"content\": {\"application/json\": {\"schema\": {}}},\n-                        \"description\": \"Successful \" \"Response\",\n+                        \"description\": \"Successful Response\",\n                     }\n                 },\n                 \"summary\": \"No Body Status Code With Detail Exception\",\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#9a442c9730636d6528c23c92ec6ee0ecc0436533", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 632 | Contributors (this commit): 2 | Commits (past 90d): 2 | Contributors (cumulative): 2 | DMM Complexity: None\n\nDIFF:\n@@ -433,7 +433,7 @@ if __name__ == \"__main__\":\n     )\n     authors = {**issue_authors, **pr_authors}\n     maintainers_logins = {\"tiangolo\"}\n-    bot_names = {\"codecov\", \"github-actions\"}\n+    bot_names = {\"codecov\", \"github-actions\", \"pre-commit-ci\", \"dependabot\"}\n     maintainers = []\n     for login in maintainers_logins:\n         user = authors[login]\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#ccd242348fb9e7e214d5cb2ff7f6c5996f96e4dc", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 386 | Contributors (this commit): 2 | Commits (past 90d): 10 | Contributors (cumulative): 2 | DMM Complexity: None\n\nDIFF:\n@@ -1,6 +1,6 @@\n \"\"\"FastAPI framework, high performance, easy to learn, fast to code, ready for production\"\"\"\n \n-__version__ = \"0.85.2\"\n+__version__ = \"0.86.0\"\n \n from starlette import status as status\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#fdbd48be5fc6ef4bfd9bdd4582006f70b7a52317", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 78 | Lines Deleted: 72 | Files Changed: 25 | Hunks: 70 | Methods Changed: 54 | Complexity Δ (Sum/Max): -1/0 | Churn Δ: 150 | Churn Cumulative: 3932 | Contributors (this commit): 26 | Commits (past 90d): 28 | Contributors (cumulative): 98 | DMM Complexity: 1.0\n\nDIFF:\n@@ -54,7 +54,7 @@ class APIKeyHeader(APIKeyBase):\n         self.auto_error = auto_error\n \n     async def __call__(self, request: Request) -> Optional[str]:\n-        api_key: str = request.headers.get(self.model.name)\n+        api_key = request.headers.get(self.model.name)\n         if not api_key:\n             if self.auto_error:\n                 raise HTTPException(\n\n@@ -38,7 +38,7 @@ class HTTPBase(SecurityBase):\n     async def __call__(\n         self, request: Request\n     ) -> Optional[HTTPAuthorizationCredentials]:\n-        authorization: str = request.headers.get(\"Authorization\")\n+        authorization = request.headers.get(\"Authorization\")\n         scheme, credentials = get_authorization_scheme_param(authorization)\n         if not (authorization and scheme and credentials):\n             if self.auto_error:\n@@ -67,7 +67,7 @@ class HTTPBasic(HTTPBase):\n     async def __call__(  # type: ignore\n         self, request: Request\n     ) -> Optional[HTTPBasicCredentials]:\n-        authorization: str = request.headers.get(\"Authorization\")\n+        authorization = request.headers.get(\"Authorization\")\n         scheme, param = get_authorization_scheme_param(authorization)\n         if self.realm:\n             unauthorized_headers = {\"WWW-Authenticate\": f'Basic realm=\"{self.realm}\"'}\n@@ -113,7 +113,7 @@ class HTTPBearer(HTTPBase):\n     async def __call__(\n         self, request: Request\n     ) -> Optional[HTTPAuthorizationCredentials]:\n-        authorization: str = request.headers.get(\"Authorization\")\n+        authorization = request.headers.get(\"Authorization\")\n         scheme, credentials = get_authorization_scheme_param(authorization)\n         if not (authorization and scheme and credentials):\n             if self.auto_error:\n@@ -148,7 +148,7 @@ class HTTPDigest(HTTPBase):\n     async def __call__(\n         self, request: Request\n     ) -> Optional[HTTPAuthorizationCredentials]:\n-        authorization: str = request.headers.get(\"Authorization\")\n+        authorization = request.headers.get(\"Authorization\")\n         scheme, credentials = get_authorization_scheme_param(authorization)\n         if not (authorization and scheme and credentials):\n             if self.auto_error:\n\n@@ -126,7 +126,7 @@ class OAuth2(SecurityBase):\n         self.auto_error = auto_error\n \n     async def __call__(self, request: Request) -> Optional[str]:\n-        authorization: str = request.headers.get(\"Authorization\")\n+        authorization = request.headers.get(\"Authorization\")\n         if not authorization:\n             if self.auto_error:\n                 raise HTTPException(\n@@ -157,7 +157,7 @@ class OAuth2PasswordBearer(OAuth2):\n         )\n \n     async def __call__(self, request: Request) -> Optional[str]:\n-        authorization: str = request.headers.get(\"Authorization\")\n+        authorization = request.headers.get(\"Authorization\")\n         scheme, param = get_authorization_scheme_param(authorization)\n         if not authorization or scheme.lower() != \"bearer\":\n             if self.auto_error:\n@@ -200,7 +200,7 @@ class OAuth2AuthorizationCodeBearer(OAuth2):\n         )\n \n     async def __call__(self, request: Request) -> Optional[str]:\n-        authorization: str = request.headers.get(\"Authorization\")\n+        authorization = request.headers.get(\"Authorization\")\n         scheme, param = get_authorization_scheme_param(authorization)\n         if not authorization or scheme.lower() != \"bearer\":\n             if self.auto_error:\n\n@@ -23,7 +23,7 @@ class OpenIdConnect(SecurityBase):\n         self.auto_error = auto_error\n \n     async def __call__(self, request: Request) -> Optional[str]:\n-        authorization: str = request.headers.get(\"Authorization\")\n+        authorization = request.headers.get(\"Authorization\")\n         if not authorization:\n             if self.auto_error:\n                 raise HTTPException(\n\n@@ -1,7 +1,9 @@\n-from typing import Tuple\n+from typing import Optional, Tuple\n \n \n-def get_authorization_scheme_param(authorization_header_value: str) -> Tuple[str, str]:\n+def get_authorization_scheme_param(\n+    authorization_header_value: Optional[str],\n+) -> Tuple[str, str]:\n     if not authorization_header_value:\n         return \"\", \"\"\n     scheme, _, param = authorization_header_value.partition(\" \")\n\n@@ -101,7 +101,7 @@ def test_schema():\n \n \n def test_get_invalid():\n-    response = client.get(\"/foo\", params={\"client_id\": None})\n+    response = client.get(\"/foo\")\n     assert response.status_code == status.HTTP_422_UNPROCESSABLE_ENTITY\n \n \n\n@@ -333,7 +333,7 @@ def test_get_api_route_not_decorated():\n \n \n def test_delete():\n-    response = client.delete(\"/items/foo\", json={\"name\": \"Foo\"})\n+    response = client.request(\"DELETE\", \"/items/foo\", json={\"name\": \"Foo\"})\n     assert response.status_code == 200, response.text\n     assert response.json() == {\"item_id\": \"foo\", \"item\": {\"name\": \"Foo\", \"price\": None}}\n \n\n@@ -104,5 +104,5 @@ def test_openapi_schema():\n \n def test_get_with_body():\n     body = {\"name\": \"Foo\", \"description\": \"Some description\", \"price\": 5.5}\n-    response = client.get(\"/product\", json=body)\n+    response = client.request(\"GET\", \"/product\", json=body)\n     assert response.json() == body\n\n@@ -33,8 +33,6 @@ async def hidden_query(\n     return {\"hidden_query\": hidden_query}\n \n \n-client = TestClient(app)\n-\n openapi_shema = {\n     \"openapi\": \"3.0.2\",\n     \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n@@ -161,6 +159,7 @@ openapi_shema = {\n \n \n def test_openapi_schema():\n+    client = TestClient(app)\n     response = client.get(\"/openapi.json\")\n     assert response.status_code == 200\n     assert response.json() == openapi_shema\n@@ -184,7 +183,8 @@ def test_openapi_schema():\n     ],\n )\n def test_hidden_cookie(path, cookies, expected_status, expected_response):\n-    response = client.get(path, cookies=cookies)\n+    client = TestClient(app, cookies=cookies)\n+    response = client.get(path)\n     assert response.status_code == expected_status\n     assert response.json() == expected_response\n \n@@ -207,12 +207,14 @@ def test_hidden_cookie(path, cookies, expected_status, expected_response):\n     ],\n )\n def test_hidden_header(path, headers, expected_status, expected_response):\n+    client = TestClient(app)\n     response = client.get(path, headers=headers)\n     assert response.status_code == expected_status\n     assert response.json() == expected_response\n \n \n def test_hidden_path():\n+    client = TestClient(app)\n     response = client.get(\"/hidden_path/hidden_path\")\n     assert response.status_code == 200\n     assert response.json() == {\"hidden_path\": \"hidden_path\"}\n@@ -234,6 +236,7 @@ def test_hidden_path():\n     ],\n )\n def test_hidden_query(path, expected_status, expected_response):\n+    client = TestClient(app)\n     response = client.get(path)\n     assert response.status_code == expected_status\n     assert response.json() == expected_response\n\n@@ -22,8 +22,6 @@ def read_current_user(current_user: User = Depends(get_current_user)):\n     return current_user\n \n \n-client = TestClient(app)\n-\n openapi_schema = {\n     \"openapi\": \"3.0.2\",\n     \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n@@ -51,18 +49,21 @@ openapi_schema = {\n \n \n def test_openapi_schema():\n+    client = TestClient(app)\n     response = client.get(\"/openapi.json\")\n     assert response.status_code == 200, response.text\n     assert response.json() == openapi_schema\n \n \n def test_security_api_key():\n-    response = client.get(\"/users/me\", cookies={\"key\": \"secret\"})\n+    client = TestClient(app, cookies={\"key\": \"secret\"})\n+    response = client.get(\"/users/me\")\n     assert response.status_code == 200, response.text\n     assert response.json() == {\"username\": \"secret\"}\n \n \n def test_security_api_key_no_key():\n+    client = TestClient(app)\n     response = client.get(\"/users/me\")\n     assert response.status_code == 403, response.text\n     assert response.json() == {\"detail\": \"Not authenticated\"}\n\n@@ -22,8 +22,6 @@ def read_current_user(current_user: User = Depends(get_current_user)):\n     return current_user\n \n \n-client = TestClient(app)\n-\n openapi_schema = {\n     \"openapi\": \"3.0.2\",\n     \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n@@ -56,18 +54,21 @@ openapi_schema = {\n \n \n def test_openapi_schema():\n+    client = TestClient(app)\n     response = client.get(\"/openapi.json\")\n     assert response.status_code == 200, response.text\n     assert response.json() == openapi_schema\n \n \n def test_security_api_key():\n-    response = client.get(\"/users/me\", cookies={\"key\": \"secret\"})\n+    client = TestClient(app, cookies={\"key\": \"secret\"})\n+    response = client.get(\"/users/me\")\n     assert response.status_code == 200, response.text\n     assert response.json() == {\"username\": \"secret\"}\n \n \n def test_security_api_key_no_key():\n+    client = TestClient(app)\n     response = client.get(\"/users/me\")\n     assert response.status_code == 403, response.text\n     assert response.json() == {\"detail\": \"Not authenticated\"}\n\n@@ -29,8 +29,6 @@ def read_current_user(current_user: User = Depends(get_current_user)):\n         return current_user\n \n \n-client = TestClient(app)\n-\n openapi_schema = {\n     \"openapi\": \"3.0.2\",\n     \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n@@ -58,18 +56,21 @@ openapi_schema = {\n \n \n def test_openapi_schema():\n+    client = TestClient(app)\n     response = client.get(\"/openapi.json\")\n     assert response.status_code == 200, response.text\n     assert response.json() == openapi_schema\n \n \n def test_security_api_key():\n-    response = client.get(\"/users/me\", cookies={\"key\": \"secret\"})\n+    client = TestClient(app, cookies={\"key\": \"secret\"})\n+    response = client.get(\"/users/me\")\n     assert response.status_code == 200, response.text\n     assert response.json() == {\"username\": \"secret\"}\n \n \n def test_security_api_key_no_key():\n+    client = TestClient(app)\n     response = client.get(\"/users/me\")\n     assert response.status_code == 200, response.text\n     assert response.json() == {\"msg\": \"Create an account first\"}\n\n@@ -252,16 +252,14 @@ def test_tuple_with_model_invalid():\n \n \n def test_tuple_form_valid():\n-    response = client.post(\"/tuple-form/\", data=[(\"values\", \"1\"), (\"values\", \"2\")])\n+    response = client.post(\"/tuple-form/\", data={\"values\": (\"1\", \"2\")})\n     assert response.status_code == 200, response.text\n     assert response.json() == [1, 2]\n \n \n def test_tuple_form_invalid():\n-    response = client.post(\n-        \"/tuple-form/\", data=[(\"values\", \"1\"), (\"values\", \"2\"), (\"values\", \"3\")]\n-    )\n+    response = client.post(\"/tuple-form/\", data={\"values\": (\"1\", \"2\", \"3\")})\n     assert response.status_code == 422, response.text\n \n-    response = client.post(\"/tuple-form/\", data=[(\"values\", \"1\")])\n+    response = client.post(\"/tuple-form/\", data={\"values\": (\"1\")})\n     assert response.status_code == 422, response.text\n\n@@ -9,6 +9,6 @@ def test_middleware():\n     assert response.status_code == 200, response.text\n \n     client = TestClient(app)\n-    response = client.get(\"/\", allow_redirects=False)\n+    response = client.get(\"/\", follow_redirects=False)\n     assert response.status_code == 307, response.text\n     assert response.headers[\"location\"] == \"https://testserver/\"\n\n@@ -176,7 +176,7 @@ def test_post_broken_body():\n     response = client.post(\n         \"/items/\",\n         headers={\"content-type\": \"application/json\"},\n-        data=\"{some broken json}\",\n+        content=\"{some broken json}\",\n     )\n     assert response.status_code == 422, response.text\n     assert response.json() == {\n@@ -214,7 +214,7 @@ def test_post_form_for_json():\n def test_explicit_content_type():\n     response = client.post(\n         \"/items/\",\n-        data='{\"name\": \"Foo\", \"price\": 50.5}',\n+        content='{\"name\": \"Foo\", \"price\": 50.5}',\n         headers={\"Content-Type\": \"application/json\"},\n     )\n     assert response.status_code == 200, response.text\n@@ -223,7 +223,7 @@ def test_explicit_content_type():\n def test_geo_json():\n     response = client.post(\n         \"/items/\",\n-        data='{\"name\": \"Foo\", \"price\": 50.5}',\n+        content='{\"name\": \"Foo\", \"price\": 50.5}',\n         headers={\"Content-Type\": \"application/geo+json\"},\n     )\n     assert response.status_code == 200, response.text\n@@ -232,7 +232,7 @@ def test_geo_json():\n def test_no_content_type_is_json():\n     response = client.post(\n         \"/items/\",\n-        data='{\"name\": \"Foo\", \"price\": 50.5}',\n+        content='{\"name\": \"Foo\", \"price\": 50.5}',\n     )\n     assert response.status_code == 200, response.text\n     assert response.json() == {\n@@ -255,17 +255,19 @@ def test_wrong_headers():\n         ]\n     }\n \n-    response = client.post(\"/items/\", data=data, headers={\"Content-Type\": \"text/plain\"})\n+    response = client.post(\n+        \"/items/\", content=data, headers={\"Content-Type\": \"text/plain\"}\n+    )\n     assert response.status_code == 422, response.text\n     assert response.json() == invalid_dict\n \n     response = client.post(\n-        \"/items/\", data=data, headers={\"Content-Type\": \"application/geo+json-seq\"}\n+        \"/items/\", content=data, headers={\"Content-Type\": \"application/geo+json-seq\"}\n     )\n     assert response.status_code == 422, response.text\n     assert response.json() == invalid_dict\n     response = client.post(\n-        \"/items/\", data=data, headers={\"Content-Type\": \"application/not-really-json\"}\n+        \"/items/\", content=data, headers={\"Content-Type\": \"application/not-really-json\"}\n     )\n     assert response.status_code == 422, response.text\n     assert response.json() == invalid_dict\n\n@@ -185,7 +185,7 @@ def test_post_broken_body(client: TestClient):\n     response = client.post(\n         \"/items/\",\n         headers={\"content-type\": \"application/json\"},\n-        data=\"{some broken json}\",\n+        content=\"{some broken json}\",\n     )\n     assert response.status_code == 422, response.text\n     assert response.json() == {\n@@ -225,7 +225,7 @@ def test_post_form_for_json(client: TestClient):\n def test_explicit_content_type(client: TestClient):\n     response = client.post(\n         \"/items/\",\n-        data='{\"name\": \"Foo\", \"price\": 50.5}',\n+        content='{\"name\": \"Foo\", \"price\": 50.5}',\n         headers={\"Content-Type\": \"application/json\"},\n     )\n     assert response.status_code == 200, response.text\n@@ -235,7 +235,7 @@ def test_explicit_content_type(client: TestClient):\n def test_geo_json(client: TestClient):\n     response = client.post(\n         \"/items/\",\n-        data='{\"name\": \"Foo\", \"price\": 50.5}',\n+        content='{\"name\": \"Foo\", \"price\": 50.5}',\n         headers={\"Content-Type\": \"application/geo+json\"},\n     )\n     assert response.status_code == 200, response.text\n@@ -245,7 +245,7 @@ def test_geo_json(client: TestClient):\n def test_no_content_type_is_json(client: TestClient):\n     response = client.post(\n         \"/items/\",\n-        data='{\"name\": \"Foo\", \"price\": 50.5}',\n+        content='{\"name\": \"Foo\", \"price\": 50.5}',\n     )\n     assert response.status_code == 200, response.text\n     assert response.json() == {\n@@ -269,17 +269,19 @@ def test_wrong_headers(client: TestClient):\n         ]\n     }\n \n-    response = client.post(\"/items/\", data=data, headers={\"Content-Type\": \"text/plain\"})\n+    response = client.post(\n+        \"/items/\", content=data, headers={\"Content-Type\": \"text/plain\"}\n+    )\n     assert response.status_code == 422, response.text\n     assert response.json() == invalid_dict\n \n     response = client.post(\n-        \"/items/\", data=data, headers={\"Content-Type\": \"application/geo+json-seq\"}\n+        \"/items/\", content=data, headers={\"Content-Type\": \"application/geo+json-seq\"}\n     )\n     assert response.status_code == 422, response.text\n     assert response.json() == invalid_dict\n     response = client.post(\n-        \"/items/\", data=data, headers={\"Content-Type\": \"application/not-really-json\"}\n+        \"/items/\", content=data, headers={\"Content-Type\": \"application/not-really-json\"}\n     )\n     assert response.status_code == 422, response.text\n     assert response.json() == invalid_dict\n\n@@ -3,8 +3,6 @@ from fastapi.testclient import TestClient\n \n from docs_src.cookie_params.tutorial001 import app\n \n-client = TestClient(app)\n-\n openapi_schema = {\n     \"openapi\": \"3.0.2\",\n     \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n@@ -88,6 +86,7 @@ openapi_schema = {\n     ],\n )\n def test(path, cookies, expected_status, expected_response):\n-    response = client.get(path, cookies=cookies)\n+    client = TestClient(app, cookies=cookies)\n+    response = client.get(path)\n     assert response.status_code == expected_status\n     assert response.json() == expected_response\n\n@@ -70,14 +70,6 @@ openapi_schema = {\n }\n \n \n-@pytest.fixture(name=\"client\")\n-def get_client():\n-    from docs_src.cookie_params.tutorial001_py310 import app\n-\n-    client = TestClient(app)\n-    return client\n-\n-\n @needs_py310\n @pytest.mark.parametrize(\n     \"path,cookies,expected_status,expected_response\",\n@@ -94,7 +86,10 @@ def get_client():\n         (\"/items\", {\"session\": \"cookiesession\"}, 200, {\"ads_id\": None}),\n     ],\n )\n-def test(path, cookies, expected_status, expected_response, client: TestClient):\n-    response = client.get(path, cookies=cookies)\n+def test(path, cookies, expected_status, expected_response):\n+    from docs_src.cookie_params.tutorial001_py310 import app\n+\n+    client = TestClient(app, cookies=cookies)\n+    response = client.get(path)\n     assert response.status_code == expected_status\n     assert response.json() == expected_response\n\n@@ -26,7 +26,7 @@ def test_gzip_request(compress):\n         data = gzip.compress(data)\n         headers[\"Content-Encoding\"] = \"gzip\"\n     headers[\"Content-Type\"] = \"application/json\"\n-    response = client.post(\"/sum\", data=data, headers=headers)\n+    response = client.post(\"/sum\", content=data, headers=headers)\n     assert response.json() == {\"sum\": n}\n \n \n\n@@ -32,6 +32,6 @@ def test_openapi_schema():\n \n \n def test_get():\n-    response = client.get(\"/typer\", allow_redirects=False)\n+    response = client.get(\"/typer\", follow_redirects=False)\n     assert response.status_code == 307, response.text\n     assert response.headers[\"location\"] == \"https://typer.tiangolo.com\"\n\n@@ -27,6 +27,6 @@ def test_openapi_schema():\n \n \n def test_redirect_response_class():\n-    response = client.get(\"/fastapi\", allow_redirects=False)\n+    response = client.get(\"/fastapi\", follow_redirects=False)\n     assert response.status_code == 307\n     assert response.headers[\"location\"] == \"https://fastapi.tiangolo.com\"\n\n@@ -27,6 +27,6 @@ def test_openapi_schema():\n \n \n def test_redirect_status_code():\n-    response = client.get(\"/pydantic\", allow_redirects=False)\n+    response = client.get(\"/pydantic\", follow_redirects=False)\n     assert response.status_code == 302\n     assert response.headers[\"location\"] == \"https://pydantic-docs.helpmanual.io/\"\n\n@@ -47,7 +47,7 @@ def test_openapi_schema():\n \n \n def test_post():\n-    response = client.post(\"/items/\", data=b\"this is actually not validated\")\n+    response = client.post(\"/items/\", content=b\"this is actually not validated\")\n     assert response.status_code == 200, response.text\n     assert response.json() == {\n         \"size\": 30,\n\n@@ -58,7 +58,7 @@ def test_post():\n         - x-men\n         - x-avengers\n         \"\"\"\n-    response = client.post(\"/items/\", data=yaml_data)\n+    response = client.post(\"/items/\", content=yaml_data)\n     assert response.status_code == 200, response.text\n     assert response.json() == {\n         \"name\": \"Deadpoolio\",\n@@ -74,7 +74,7 @@ def test_post_broken_yaml():\n         x - x-men\n         x - x-avengers\n         \"\"\"\n-    response = client.post(\"/items/\", data=yaml_data)\n+    response = client.post(\"/items/\", content=yaml_data)\n     assert response.status_code == 422, response.text\n     assert response.json() == {\"detail\": \"Invalid YAML\"}\n \n@@ -88,7 +88,7 @@ def test_post_invalid():\n         - x-avengers\n         - sneaky: object\n         \"\"\"\n-    response = client.post(\"/items/\", data=yaml_data)\n+    response = client.post(\"/items/\", content=yaml_data)\n     assert response.status_code == 422, response.text\n     assert response.json() == {\n         \"detail\": [\n\n@@ -4,20 +4,18 @@ from fastapi.websockets import WebSocketDisconnect\n \n from docs_src.websockets.tutorial002 import app\n \n-client = TestClient(app)\n-\n \n def test_main():\n+    client = TestClient(app)\n     response = client.get(\"/\")\n     assert response.status_code == 200, response.text\n     assert b\"<!DOCTYPE html>\" in response.content\n \n \n def test_websocket_with_cookie():\n+    client = TestClient(app, cookies={\"session\": \"fakesession\"})\n     with pytest.raises(WebSocketDisconnect):\n-        with client.websocket_connect(\n-            \"/items/foo/ws\", cookies={\"session\": \"fakesession\"}\n-        ) as websocket:\n+        with client.websocket_connect(\"/items/foo/ws\") as websocket:\n             message = \"Message one\"\n             websocket.send_text(message)\n             data = websocket.receive_text()\n@@ -33,6 +31,7 @@ def test_websocket_with_cookie():\n \n \n def test_websocket_with_header():\n+    client = TestClient(app)\n     with pytest.raises(WebSocketDisconnect):\n         with client.websocket_connect(\"/items/bar/ws?token=some-token\") as websocket:\n             message = \"Message one\"\n@@ -50,6 +49,7 @@ def test_websocket_with_header():\n \n \n def test_websocket_with_header_and_query():\n+    client = TestClient(app)\n     with pytest.raises(WebSocketDisconnect):\n         with client.websocket_connect(\"/items/2/ws?q=3&token=some-token\") as websocket:\n             message = \"Message one\"\n@@ -71,6 +71,7 @@ def test_websocket_with_header_and_query():\n \n \n def test_websocket_no_credentials():\n+    client = TestClient(app)\n     with pytest.raises(WebSocketDisconnect):\n         with client.websocket_connect(\"/items/foo/ws\"):\n             pytest.fail(\n@@ -79,6 +80,7 @@ def test_websocket_no_credentials():\n \n \n def test_websocket_invalid_data():\n+    client = TestClient(app)\n     with pytest.raises(WebSocketDisconnect):\n         with client.websocket_connect(\"/items/foo/ws?q=bar&token=some-token\"):\n             pytest.fail(\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
