{"custom_id": "keras#f3bbf31497a26df5d0989e7483aaf4982daa23c8", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 30 | Lines Deleted: 6 | Files Changed: 2 | Hunks: 5 | Methods Changed: 2 | Complexity Δ (Sum/Max): 7/7 | Churn Δ: 36 | Churn Cumulative: 808 | Contributors (this commit): 17 | Commits (past 90d): 5 | Contributors (cumulative): 19 | DMM Complexity: 0.17391304347826086\n\nDIFF:\n@@ -57,10 +57,10 @@ class Embedding(Layer):\n           (without it, the shape of the dense outputs cannot be computed).\n \n     # Input shape\n-        2D tensor with shape: `(batch_size, sequence_length)`.\n+        N-D tensor with shape: `(batch_size, sequence_length_1, ..., sequence_length_N-1)`.\n \n     # Output shape\n-        3D tensor with shape: `(batch_size, sequence_length, output_dim)`.\n+        (N+1)-D tensor with shape: `(batch_size, sequence_length_1, ..., sequence_length_N-1, output_dim)`.\n \n     # References\n         - [A Theoretically Grounded Application of Dropout in Recurrent Neural Networks](http://arxiv.org/abs/1512.05287)\n@@ -108,11 +108,25 @@ class Embedding(Layer):\n             return K.not_equal(inputs, 0)\n \n     def compute_output_shape(self, input_shape):\n-        if not self.input_length:\n-            input_length = input_shape[1]\n+        if self.input_length is None:\n+            return input_shape + (self.output_dim,)\n         else:\n-            input_length = self.input_length\n-        return (input_shape[0], input_length, self.output_dim)\n+            # input_length can be tuple if input is 3D or higher\n+            if isinstance(self.input_length, (list, tuple)):\n+                in_lens = list(self.input_length)\n+            else:\n+                in_lens = [self.input_length]\n+            if len(in_lens) != len(input_shape) - 1:\n+                ValueError('\"input_length\" is %s, but received input has shape %s' %\n+                           (str(self.input_length), str(input_shape)))\n+            else:\n+                for i, (s1, s2) in enumerate(zip(in_lens, input_shape[1:])):\n+                    if s1 is not None and s2 is not None and s1 != s2:\n+                        ValueError('\"input_length\" is %s, but received input has shape %s' %\n+                                   (str(self.input_length), str(input_shape)))\n+                    elif s1 is None:\n+                        in_lens[i] = s2\n+            return (input_shape[0],) + tuple(in_lens) + (self.output_dim,)\n \n     def call(self, inputs):\n         if K.dtype(inputs) != 'int32':\n\n@@ -16,6 +16,16 @@ def test_embedding():\n                input_shape=(3, 2),\n                input_dtype='int32',\n                expected_output_dtype=K.floatx())\n+    layer_test(Embedding,\n+               kwargs={'output_dim': 4, 'input_dim': 10, 'mask_zero': True},\n+               input_shape=(3, 2, 5),\n+               input_dtype='int32',\n+               expected_output_dtype=K.floatx())\n+    layer_test(Embedding,\n+               kwargs={'output_dim': 4, 'input_dim': 10, 'mask_zero': True, 'input_length': (None, 5)},\n+               input_shape=(3, 2, 5),\n+               input_dtype='int32',\n+               expected_output_dtype=K.floatx())\n \n \n if __name__ == '__main__':\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "keras#ea29308eaa50d539433cb206ddf558e6052b02a6", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 9758 | Contributors (this commit): 44 | Commits (past 90d): 19 | Contributors (cumulative): 44 | DMM Complexity: None\n\nDIFF:\n@@ -1252,7 +1252,7 @@ class ZeroPadding1D(Layer):\n class ZeroPadding2D(Layer):\n     \"\"\"Zero-padding layer for 2D input (e.g. picture).\n \n-    This layer can add rows and columns or zeros\n+    This layer can add rows and columns of zeros\n     at the top, bottom, left and right side of an image tensor.\n \n     # Arguments\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "keras#eede3dc43dee80e040f272c6a7157e4a29d00f76", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 8 | Lines Deleted: 8 | Files Changed: 3 | Hunks: 8 | Methods Changed: 2 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 16 | Churn Cumulative: 14090 | Contributors (this commit): 108 | Commits (past 90d): 63 | Contributors (cumulative): 161 | DMM Complexity: None\n\nDIFF:\n@@ -2876,7 +2876,7 @@ def dropout(x, level, noise_shape=None, seed=None):\n     if seed is None:\n         seed = np.random.randint(10e6)\n     # the dummy 1. works around a TF bug\n-    # (float32_ref vs. float32 incomptability)\n+    # (float32_ref vs. float32 incompatibility)\n     return tf.nn.dropout(x * 1., retain_prob, noise_shape, seed=seed)\n \n \n@@ -3110,7 +3110,7 @@ def conv2d(x, kernel, strides=(1, 1), padding='valid',\n         padding: string, `\"same\"` or `\"valid\"`.\n         data_format: string, `\"channels_last\"` or `\"channels_first\"`.\n             Whether to use Theano or TensorFlow data format\n-            for inputs/kernels/ouputs.\n+            for inputs/kernels/outputs.\n         dilation_rate: tuple of 2 integers.\n \n     # Returns\n@@ -3151,7 +3151,7 @@ def conv2d_transpose(x, kernel, output_shape, strides=(1, 1),\n         padding: string, `\"same\"` or `\"valid\"`.\n         data_format: string, `\"channels_last\"` or `\"channels_first\"`.\n             Whether to use Theano or TensorFlow data format\n-            for inputs/kernels/ouputs.\n+            for inputs/kernels/outputs.\n \n     # Returns\n         A tensor, result of transposed 2D convolution.\n@@ -3224,7 +3224,7 @@ def conv3d(x, kernel, strides=(1, 1, 1), padding='valid',\n         padding: string, `\"same\"` or `\"valid\"`.\n         data_format: string, `\"channels_last\"` or `\"channels_first\"`.\n             Whether to use Theano or TensorFlow data format\n-            for inputs/kernels/ouputs.\n+            for inputs/kernels/outputs.\n         dilation_rate: tuple of 3 integers.\n \n     # Returns\n\n@@ -1814,7 +1814,7 @@ def conv2d(x, kernel, strides=(1, 1), padding='valid',\n         padding: string, \"same\" or \"valid\".\n         data_format: \"channels_last\" or \"channels_first\".\n             Whether to use Theano or TensorFlow data format\n-        in inputs/kernels/ouputs.\n+        in inputs/kernels/outputs.\n     \"\"\"\n     if data_format is None:\n         data_format = image_data_format()\n@@ -1858,7 +1858,7 @@ def conv2d_transpose(x, kernel, output_shape, strides=(1, 1),\n         padding: string, \"same\" or \"valid\".\n         data_format: \"channels_last\" or \"channels_first\".\n             Whether to use Theano or TensorFlow data format\n-        in inputs/kernels/ouputs.\n+        in inputs/kernels/outputs.\n     \"\"\"\n     flip_filters = False\n     if data_format is None:\n@@ -1910,7 +1910,7 @@ def conv3d(x, kernel, strides=(1, 1, 1),\n         padding: string, \"same\" or \"valid\".\n         data_format: \"channels_last\" or \"channels_first\".\n             Whether to use Theano or TensorFlow data format\n-        in inputs/kernels/ouputs.\n+        in inputs/kernels/outputs.\n     \"\"\"\n     if data_format is None:\n         data_format = image_data_format()\n\n@@ -90,7 +90,7 @@ class BaseWrapper(object):\n         \"\"\"Gets parameters for this estimator.\n \n         # Arguments\n-            **params: ignored (exists for API compatiblity).\n+            **params: ignored (exists for API compatibility).\n \n         # Returns\n             Dictionary of parameter names mapped to their values.\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "keras#7819b9c14e174bcf5a35be836a7beca053520a91", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 9 | Lines Deleted: 6 | Files Changed: 2 | Hunks: 4 | Methods Changed: 2 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 15 | Churn Cumulative: 95 | Contributors (this commit): 3 | Commits (past 90d): 6 | Contributors (cumulative): 6 | DMM Complexity: 1.0\n\nDIFF:\n@@ -35,8 +35,8 @@ def hinge(y_true, y_pred):\n \n def categorical_hinge(y_true, y_pred):\n     pos = K.sum(y_true * y_pred, axis=-1)\n-    neg = K.max((1.0 - y_true) * y_pred, axis=-1)\n-    return K.mean(K.maximum(0.0, neg - pos + 1), axis=-1)\n+    neg = K.max((1. - y_true) * y_pred, axis=-1)\n+    return K.maximum(0., neg - pos + 1.)\n \n \n def logcosh(y_true, y_pred):\n\n@@ -16,7 +16,8 @@ allobj = [losses.mean_squared_error,\n           losses.kullback_leibler_divergence,\n           losses.poisson,\n           losses.cosine_proximity,\n-          losses.logcosh]\n+          losses.logcosh,\n+          losses.categorical_hinge]\n \n \n def test_objective_shapes_3d():\n@@ -47,11 +48,13 @@ def test_cce_one_hot():\n \n \n def test_categorical_hinge():\n-    y_pred = K.variable(np.array([[0.3, 0.2, 0.1], [0.1, 0.2, 0.7]]))\n-    y_true = K.variable(np.array([[0, 1, 0], [1, 0, 0]]))\n+    y_pred = K.variable(np.array([[0.3, 0.2, 0.1],\n+                                  [0.1, 0.2, 0.7]]))\n+    y_true = K.variable(np.array([[0, 1, 0],\n+                                  [1, 0, 0]]))\n     expected_loss = ((0.3 - 0.2 + 1) + (0.7 - 0.1 + 1)) / 2.0\n     loss = K.eval(losses.categorical_hinge(y_true, y_pred))\n-    assert np.isclose(expected_loss, loss)\n+    assert np.isclose(expected_loss, np.mean(loss))\n \n \n if __name__ == '__main__':\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "keras#aea62d8bafbfb329b831de3c9b7df656e907f300", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 2 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 797 | Contributors (this commit): 17 | Commits (past 90d): 5 | Contributors (cumulative): 17 | DMM Complexity: None\n\nDIFF:\n@@ -57,10 +57,10 @@ class Embedding(Layer):\n           (without it, the shape of the dense outputs cannot be computed).\n \n     # Input shape\n-        N-D tensor with shape: `(batch_size, sequence_length_1, ..., sequence_length_N-1)`.\n+        2D tensor with shape: `(batch_size, sequence_length)`.\n \n     # Output shape\n-        (N+1)-D tensor with shape: `(batch_size, sequence_length_1, ..., sequence_length_N-1, output_dim)`.\n+        3D tensor with shape: `(batch_size, sequence_length, output_dim)`.\n \n     # References\n         - [A Theoretically Grounded Application of Dropout in Recurrent Neural Networks](http://arxiv.org/abs/1512.05287)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "keras#0bc8fac4463c68faa3b3c415c26eab02aa361fd5", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 19 | Lines Deleted: 0 | Files Changed: 2 | Hunks: 2 | Methods Changed: 2 | Complexity Δ (Sum/Max): 2/1 | Churn Δ: 19 | Churn Cumulative: 854 | Contributors (this commit): 11 | Commits (past 90d): 5 | Contributors (cumulative): 14 | DMM Complexity: 1.0\n\nDIFF:\n@@ -36,6 +36,11 @@ def sparse_categorical_accuracy(y_true, y_pred):\n def top_k_categorical_accuracy(y_true, y_pred, k=5):\n     return K.mean(K.in_top_k(y_pred, K.argmax(y_true, axis=-1), k), axis=-1)\n \n+\n+def sparse_top_k_categorical_accuracy(y_true, y_pred, k=5):\n+    return K.mean(K.in_top_k(y_pred, K.cast(K.max(y_true, axis=-1), 'int32'), k), axis=-1)\n+\n+\n # Aliases\n \n mse = MSE = mean_squared_error\n\n@@ -56,5 +56,19 @@ def test_top_k_categorical_accuracy():\n     assert failure_result == 0\n \n \n+def test_sparse_top_k_categorical_accuracy():\n+    y_pred = K.variable(np.array([[0.3, 0.2, 0.1], [0.1, 0.2, 0.7]]))\n+    y_true = K.variable(np.array([[1], [0]]))\n+    success_result = K.eval(metrics.sparse_top_k_categorical_accuracy(y_true, y_pred,\n+                                                                      k=3))\n+    assert success_result == 1\n+    partial_result = K.eval(metrics.sparse_top_k_categorical_accuracy(y_true, y_pred,\n+                                                                      k=2))\n+    assert partial_result == 0.5\n+    failure_result = K.eval(metrics.sparse_top_k_categorical_accuracy(y_true, y_pred,\n+                                                                      k=1))\n+    assert failure_result == 0\n+\n+\n if __name__ == '__main__':\n     pytest.main([__file__])\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "keras#5810f7a9c78226b604be7bc167630b617cd9f3c3", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 3 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 40 | Contributors (this commit): 1 | Commits (past 90d): 1 | Contributors (cumulative): 1 | DMM Complexity: 1.0\n\nDIFF:\n@@ -16,7 +16,9 @@ def load_data(path='boston_housing.npz', seed=113, test_split=0.2):\n         Tuple of Numpy arrays: `(x_train, y_train), (x_test, y_test)`.\n     \"\"\"\n     assert 0 <= test_split < 1\n-    path = get_file(path, origin='https://s3.amazonaws.com/keras-datasets/boston_housing.npz')\n+    path = get_file(path,\n+                    origin='https://s3.amazonaws.com/keras-datasets/boston_housing.npz',\n+                    file_hash='f553886a1f8d56431e820c5b82552d9d95cfcb96d1e678153f8839538947dff5')\n     f = np.load(path)\n     x = f['x']\n     y = f['y']\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "keras#78be823518e3b1aedc0e07949b4cb97a593fa3d3", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 3 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 3 | Churn Cumulative: 9761 | Contributors (this commit): 45 | Commits (past 90d): 19 | Contributors (cumulative): 45 | DMM Complexity: None\n\nDIFF:\n@@ -256,6 +256,9 @@ class Conv1D(_Conv):\n             Specifying any stride value != 1 is incompatible with specifying\n             any `dilation_rate` value != 1.\n         padding: One of `\"valid\"`, `\"causal\"` or `\"same\"` (case-insensitive).\n+            `\"valid\"` means \"no padding\".\n+            `\"same\"` results in padding the input such that\n+            the output has the same length as the original input.\n             `\"causal\"` results in causal (dilated) convolutions, e.g. output[t]\n             does not depend on input[t+1:]. Useful when modeling temporal data\n             where the model should not violate the temporal order.\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "keras#36317214ae7d7d1fff953232649651fb7b6aff92", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 9 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 2 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 9 | Churn Cumulative: 4988 | Contributors (this commit): 69 | Commits (past 90d): 24 | Contributors (cumulative): 69 | DMM Complexity: None\n\nDIFF:\n@@ -1859,6 +1859,9 @@ def conv2d_transpose(x, kernel, output_shape, strides=(1, 1),\n         data_format: \"channels_last\" or \"channels_first\".\n             Whether to use Theano or TensorFlow data format\n         in inputs/kernels/outputs.\n+\n+    # Raises\n+        ValueError: if using an even kernel size with padding 'same'.\n     \"\"\"\n     flip_filters = False\n     if data_format is None:\n@@ -1877,6 +1880,12 @@ def conv2d_transpose(x, kernel, output_shape, strides=(1, 1),\n     else:\n         # Will only work if `kernel` is a shared variable.\n         kernel_shape = kernel.eval().shape\n+\n+    if padding == 'same' and kernel_shape[0] % 2 == 0:\n+        raise ValueError('In `Conv2DTranspose`, with padding mode `same`, '\n+                         'even kernel sizes are only supported with Tensorflow. '\n+                         'With Theano, set `kernel_size` to an odd number.')\n+\n     kernel_shape = _preprocess_conv2d_filter_shape(kernel_shape, data_format)\n \n     x = _preprocess_conv2d_input(x, data_format)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "keras#763bd6d8f17e27baa8cfadb734e004ce0e3bb6b0", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 4 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 77 | Contributors (this commit): 6 | Commits (past 90d): 5 | Contributors (cumulative): 6 | DMM Complexity: None\n\nDIFF:\n@@ -4,6 +4,10 @@ import os\n try:\n     # pydot-ng is a fork of pydot that is better maintained.\n     import pydot_ng as pydot\n+except ImportError:\n+    # pydotplus is an improved version of pydot\n+    try:\n+        import pydotplus as pydot\n     except ImportError:\n         # Fall back on pydot if necessary.\n         try:\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "keras#3c180eafedf86d9dee1ced94f31d46d83bb9a92d", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 35 | Lines Deleted: 0 | Files Changed: 3 | Hunks: 4 | Methods Changed: 4 | Complexity Δ (Sum/Max): 7/5 | Churn Δ: 35 | Churn Cumulative: 21843 | Contributors (this commit): 118 | Commits (past 90d): 33 | Contributors (cumulative): 144 | DMM Complexity: 0.125\n\nDIFF:\n@@ -715,6 +715,16 @@ class Lambda(Layer):\n         else:\n             output_shape = config['output_shape']\n \n+        # If arguments were numpy array, they have been saved as\n+        # list. We need to recover the ndarray\n+        if 'arguments' in config:\n+            for key in config['arguments']:\n+                if isinstance(config['arguments'][key], dict):\n+                    arg_dict = config['arguments'][key]\n+                    if 'type' in arg_dict and arg_dict['type'] == 'ndarray':\n+                        # Overwrite the argument with its numpy translation\n+                        config['arguments'][key] = np.array(arg_dict['value'])\n+\n         config['function'] = function\n         config['output_shape'] = output_shape\n         return cls(**config)\n\n@@ -74,6 +74,10 @@ def save_model(model, filepath, overwrite=True, include_optimizer=True):\n \n         # if obj is any numpy type\n         if type(obj).__module__ == np.__name__:\n+            if isinstance(obj, np.ndarray):\n+                return {'type': type(obj),\n+                        'value': obj.tolist()}\n+            else:\n                 return obj.item()\n \n         # misc functions (e.g. loss function)\n\n@@ -293,6 +293,26 @@ def test_saving_lambda_custom_objects():\n     assert_allclose(out, out2, atol=1e-05)\n \n \n+@keras_test\n+def test_saving_lambda_numpy_array_arguments():\n+    mean = np.random.random((4, 2, 3))\n+    std = np.abs(np.random.random((4, 2, 3))) + 1e-5\n+    input = Input(shape=(4, 2, 3))\n+    output = Lambda(lambda image, mu, std: (image - mu) / std,\n+                    arguments={'mu': mean, 'std': std})(input)\n+    model = Model(input, output)\n+    model.compile(loss='mse', optimizer='sgd', metrics=['acc'])\n+\n+    _, fname = tempfile.mkstemp('.h5')\n+    save_model(model, fname)\n+\n+    model = load_model(fname)\n+    os.remove(fname)\n+\n+    assert_allclose(mean, model.layers[1].arguments['mu'])\n+    assert_allclose(std, model.layers[1].arguments['std'])\n+\n+\n @keras_test\n def test_saving_custom_activation_function():\n     x = Input(shape=(3,))\n@@ -316,5 +336,6 @@ def test_saving_custom_activation_function():\n     out2 = model.predict(x)\n     assert_allclose(out, out2, atol=1e-05)\n \n+\n if __name__ == '__main__':\n     pytest.main([__file__])\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "keras#6a0c9a617dbdfe243578981e73f9b6b745ea1497", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 12 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 12 | Churn Cumulative: 7963 | Contributors (this commit): 39 | Commits (past 90d): 35 | Contributors (cumulative): 39 | DMM Complexity: 0.0\n\nDIFF:\n@@ -1467,6 +1467,9 @@ class Container(Layer):\n \n     # Class Methods\n         from_config\n+\n+    # Raises\n+        TypeError: if input tensors are not Keras tensors from InputLayer objects\n     \"\"\"\n \n     @interfaces.legacy_model_constructor_support\n@@ -1607,6 +1610,15 @@ class Container(Layer):\n         self._feed_inputs = []\n         self._feed_input_shapes = []\n         for i, layer in enumerate(self.input_layers):\n+            # Check that layer is an InputLayer.\n+            if not isinstance(layer, InputLayer):\n+                raise TypeError(\n+                    'Input layers to a `Model` must be `InputLayer` objects. '\n+                    'Received inputs: {}. '\n+                    'Input {} (0-based) originates '\n+                    'from layer type `{}`.'.format(inputs,\n+                                                   i,\n+                                                   layer.__class__.__name__))\n             self.input_names.append(layer.name)\n             if layer.is_placeholder:\n                 self._feed_input_names.append(layer.name)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "keras#62973243aefbe5ca73bee14f910982084f5fe8fe", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 10 | Lines Deleted: 12 | Files Changed: 1 | Hunks: 7 | Methods Changed: 2 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 22 | Churn Cumulative: 12217 | Contributors (this commit): 67 | Commits (past 90d): 11 | Contributors (cumulative): 67 | DMM Complexity: None\n\nDIFF:\n@@ -299,13 +299,13 @@ class Reshape(Layer):\n     \"\"\"Reshapes an output to a certain shape.\n \n     # Arguments\n-        target_shape: target shape. Tuple of integers,\n-            does not include the samples dimension (batch size).\n+        target_shape: target shape. Tuple of integers.\n+            Does not include the batch axis.\n \n     # Input shape\n         Arbitrary, although all dimensions in the input shaped must be fixed.\n         Use the keyword argument `input_shape`\n-        (tuple of integers, does not include the samples axis)\n+        (tuple of integers, does not include the batch axis)\n         when using this layer as the first layer in a model.\n \n     # Output shape\n@@ -335,19 +335,19 @@ class Reshape(Layer):\n         self.target_shape = tuple(target_shape)\n \n     def _fix_unknown_dimension(self, input_shape, output_shape):\n-        \"\"\"Find and replace a missing dimension in an output shape.\n+        \"\"\"Finds and replaces a missing dimension in an output shape.\n \n         This is a near direct port of the internal Numpy function\n         `_fix_unknown_dimension` in `numpy/core/src/multiarray/shape.c`\n \n         # Arguments\n-            input_shape: shape of array being reshaped\n-            output_shape: desired shape of the array with at most\n+            input_shape: original shape of array being reshaped\n+            output_shape: target shape of the array, with at most\n                 a single -1 which indicates a dimension that should be\n                 derived from the input shape.\n \n         # Returns\n-            The new output shape with a -1 replaced with its computed value.\n+            The new output shape with a `-1` replaced with its computed value.\n \n         # Raises\n             ValueError: if `input_shape` and `output_shape` do not match.\n@@ -381,13 +381,11 @@ class Reshape(Layer):\n \n     def call(self, inputs):\n         # In case the target shape is not fully defined,\n-        # we need access to the shape of x.\n-        # solution:\n-        # 1) rely on x._keras_shape\n-        # 2) fallback: K.int_shape\n+        # we need access to the shape of `inputs`.\n+        # solution: rely on `K.int_shape`.\n         target_shape = self.target_shape\n         if -1 in target_shape:\n-            # target shape not fully defined\n+            # Target shape not fully defined.\n             input_shape = None\n             try:\n                 input_shape = K.int_shape(inputs)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "keras#33cee3f947cba7b7486efd74ade9160ea628ebdc", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 4/4 | Churn Δ: 4 | Churn Cumulative: 6698 | Contributors (this commit): 40 | Commits (past 90d): 24 | Contributors (cumulative): 40 | DMM Complexity: None\n\nDIFF:\n@@ -137,8 +137,8 @@ class Recurrent(Layer):\n \n     # Output shape\n         - if `return_state`: a list of tensors. The first tensor is\n-            the ouput. The remaining tensors are the state, with shape\n-            `(batch_size, units)`.\n+            the output. The remaining tensors are the last states,\n+            each with shape `(batch_size, units)`.\n         - if `return_sequences`: 3D tensor with shape\n             `(batch_size, timesteps, units)`.\n         - else, 2D tensor with shape `(batch_size, units)`.\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "keras#508bb8f541dfecb858c8e694e878eb0706c8dd20", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 15 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): 3/3 | Churn Δ: 15 | Churn Cumulative: 327 | Contributors (this commit): 3 | Commits (past 90d): 7 | Contributors (cumulative): 3 | DMM Complexity: 1.0\n\nDIFF:\n@@ -266,6 +266,7 @@ def test_specify_state_with_masking(layer_class):\n     targets = np.random.random((num_samples, units))\n     model.fit([inputs] + initial_state, targets)\n \n+\n @rnn_test\n def test_return_state(layer_class):\n     num_states = 2 if layer_class is recurrent.LSTM else 1\n@@ -281,5 +282,19 @@ def test_return_state(layer_class):\n     state = model.predict(inputs)\n     np.testing.assert_allclose(K.eval(layer.states[0]), state, atol=1e-4)\n \n+\n+@rnn_test\n+def test_state_reuse(layer_class):\n+    inputs = Input(batch_shape=(num_samples, timesteps, embedding_dim))\n+    layer = layer_class(units, return_state=True, return_sequences=True)\n+    outputs = layer(inputs)\n+    output, state = outputs[0], outputs[1:]\n+    output = layer_class(units)(output, initial_state=state)\n+    model = Model(inputs, output)\n+\n+    inputs = np.random.random((num_samples, timesteps, embedding_dim))\n+    outputs = model.predict(inputs)\n+\n+\n if __name__ == '__main__':\n     pytest.main([__file__])\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "keras#552978dc58464f9f68908f371f9c6a0ff4244cb2", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 3 | Lines Deleted: 14 | Files Changed: 2 | Hunks: 4 | Methods Changed: 2 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 17 | Churn Cumulative: 2198 | Contributors (this commit): 26 | Commits (past 90d): 8 | Contributors (cumulative): 28 | DMM Complexity: 0.0\n\nDIFF:\n@@ -636,8 +636,8 @@ class ImageDataGenerator(object):\n         if x.ndim != 4:\n             raise ValueError('Input to `.fit()` should have rank 4. '\n                              'Got array with shape: ' + str(x.shape))\n-        if x.shape[self.channel_axis] not in {1, 3, 4}:\n-            raise ValueError(\n+        if x.shape[self.channel_axis] not in {3, 4}:\n+            warnings.warn(\n                 'Expected input to be images (as Numpy array) '\n                 'following the data format convention \"' + self.data_format + '\" '\n                 '(channels on axis ' + str(self.channel_axis) + '), i.e. expected '\n\n@@ -73,22 +73,11 @@ class TestImage:\n         with pytest.raises(ValueError):\n             x = np.random.random((3, 10, 10))\n             generator.fit(x)\n-        with pytest.raises(ValueError):\n-            x = np.random.random((32, 3, 10, 10))\n-            generator.fit(x)\n-        with pytest.raises(ValueError):\n-            x = np.random.random((32, 10, 10, 5))\n-            generator.fit(x)\n+\n         # Test flow with invalid data\n-        with pytest.raises(ValueError):\n-            x = np.random.random((32, 10, 10, 5))\n-            generator.flow(np.arange(x.shape[0]))\n         with pytest.raises(ValueError):\n             x = np.random.random((32, 10, 10))\n             generator.flow(np.arange(x.shape[0]))\n-        with pytest.raises(ValueError):\n-            x = np.random.random((32, 3, 10, 10))\n-            generator.flow(np.arange(x.shape[0]))\n \n     def test_image_data_generator_fit(self):\n         generator = image.ImageDataGenerator(\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "keras#43e418d1d275a00f2d015959c538b8f03a5a6eb1", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 7 | Lines Deleted: 5 | Files Changed: 1 | Hunks: 5 | Methods Changed: 3 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 12 | Churn Cumulative: 960 | Contributors (this commit): 12 | Commits (past 90d): 6 | Contributors (cumulative): 12 | DMM Complexity: 1.0\n\nDIFF:\n@@ -302,9 +302,9 @@ def test_CSVLogger():\n @pytest.mark.skipif((K.backend() != 'tensorflow'),\n                     reason='Requires tensorflow backend')\n def test_TensorBoard():\n-    np.random.seed(1337)\n+    np.random.seed(np.random.randint(1, 1e7))\n+    filepath = './logs_' + str(np.random.randint(1, 1e4))\n \n-    filepath = './logs'\n     (X_train, y_train), (X_test, y_test) = get_test_data(\n         num_train=train_samples,\n         num_test=test_samples,\n@@ -387,9 +387,9 @@ def test_TensorBoard():\n @pytest.mark.skipif((K.backend() != 'tensorflow'),\n                     reason='Requires tensorflow backend')\n def test_TensorBoard_convnet():\n-    np.random.seed(1337)\n+    np.random.seed(np.random.randint(1, 1e7))\n+    filepath = './logs_' + str(np.random.randint(1, 1e4))\n \n-    filepath = './logs'\n     input_shape = (16, 16, 3)\n     (x_train, y_train), (x_test, y_test) = get_test_data(num_train=500,\n                                                          num_test=200,\n@@ -512,7 +512,9 @@ def test_LambdaCallback():\n                     reason=\"Requires tensorflow backend\")\n def test_TensorBoard_with_ReduceLROnPlateau():\n     import shutil\n-    filepath = './logs'\n+    np.random.seed(np.random.randint(1, 1e7))\n+    filepath = './logs_' + str(np.random.randint(1, 1e4))\n+\n     (X_train, y_train), (X_test, y_test) = get_test_data(num_train=train_samples,\n                                                          num_test=test_samples,\n                                                          input_shape=(input_dim,),\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "keras#53303fdb10f75d929f2e329362d6e6bfb3a7d372", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 5 | Lines Deleted: 8 | Files Changed: 1 | Hunks: 5 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 13 | Churn Cumulative: 634 | Contributors (this commit): 8 | Commits (past 90d): 1 | Contributors (cumulative): 8 | DMM Complexity: None\n\nDIFF:\n@@ -57,7 +57,7 @@ from scipy.optimize import fmin_l_bfgs_b\n import time\n import argparse\n \n-from keras.applications import vgg16\n+from keras.applications import vgg19\n from keras import backend as K\n \n parser = argparse.ArgumentParser(description='Neural style transfer with Keras.')\n@@ -99,7 +99,7 @@ def preprocess_image(image_path):\n     img = load_img(image_path, target_size=(img_nrows, img_ncols))\n     img = img_to_array(img)\n     img = np.expand_dims(img, axis=0)\n-    img = vgg16.preprocess_input(img)\n+    img = vgg19.preprocess_input(img)\n     return img\n \n # util function to convert a tensor into a valid image\n@@ -137,7 +137,7 @@ input_tensor = K.concatenate([base_image,\n \n # build the VGG16 network with our 3 images as input\n # the model will be loaded with pre-trained ImageNet weights\n-model = vgg16.VGG16(input_tensor=input_tensor,\n+model = vgg19.VGG19(input_tensor=input_tensor,\n                     weights='imagenet', include_top=False)\n print('Model loaded.')\n \n@@ -199,7 +199,7 @@ def total_variation_loss(x):\n \n # combine these loss functions into a single scalar\n loss = K.variable(0.)\n-layer_features = outputs_dict['block4_conv2']\n+layer_features = outputs_dict['block5_conv2']\n base_image_features = layer_features[0, :, :, :]\n combination_features = layer_features[2, :, :, :]\n loss += content_weight * content_loss(base_image_features,\n@@ -273,10 +273,7 @@ evaluator = Evaluator()\n \n # run scipy-based optimization (L-BFGS) over the pixels of the generated image\n # so as to minimize the neural style loss\n-if K.image_data_format() == 'channels_first':\n-    x = np.random.uniform(0, 255, (1, 3, img_nrows, img_ncols)) - 128.\n-else:\n-    x = np.random.uniform(0, 255, (1, img_nrows, img_ncols, 3)) - 128.\n+x = preprocess_image(base_image_path)\n \n for i in range(iterations):\n     print('Start of iteration', i)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "keras#fd427b8cdb35b80c72782f03ae03d4d58830faef", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 3 | Lines Deleted: 3 | Files Changed: 2 | Hunks: 3 | Methods Changed: 3 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 6 | Churn Cumulative: 4829 | Contributors (this commit): 51 | Commits (past 90d): 25 | Contributors (cumulative): 53 | DMM Complexity: None\n\nDIFF:\n@@ -43,7 +43,7 @@ def identity_block(input_tensor, kernel_size, filters, stage, block):\n \n     # Arguments\n         input_tensor: input tensor\n-        kernel_size: defualt 3, the kernel size of middle conv layer at main path\n+        kernel_size: default 3, the kernel size of middle conv layer at main path\n         filters: list of integers, the filterss of 3 conv layer at main path\n         stage: integer, current stage label, used for generating layer names\n         block: 'a','b'..., current block label, used for generating layer names\n@@ -81,7 +81,7 @@ def conv_block(input_tensor, kernel_size, filters, stage, block, strides=(2, 2))\n \n     # Arguments\n         input_tensor: input tensor\n-        kernel_size: defualt 3, the kernel size of middle conv layer at main path\n+        kernel_size: default 3, the kernel size of middle conv layer at main path\n         filters: list of integers, the filterss of 3 conv layer at main path\n         stage: integer, current stage label, used for generating layer names\n         block: 'a','b'..., current block label, used for generating layer names\n\n@@ -241,7 +241,7 @@ def _check_array_lengths(inputs, targets, weights):\n \n \n def _check_loss_and_target_compatibility(targets, loss_fns, output_shapes):\n-    \"\"\"Does validation on the compatiblity of targets and loss functions.\n+    \"\"\"Does validation on the compatibility of targets and loss functions.\n \n     This helps prevent users from using loss functions incorrectly.\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "keras#1b1e09a3665d71061bb5b62ca475d304634a85bf", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 0 | Lines Deleted: 5 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): -2/0 | Churn Δ: 5 | Churn Cumulative: 2064 | Contributors (this commit): 2 | Commits (past 90d): 2 | Contributors (cumulative): 2 | DMM Complexity: 0.0\n\nDIFF:\n@@ -798,11 +798,6 @@ def get_variable_shape(x):\n     return x.shape\n \n \n-def batch_set_value(tuples):\n-    for p, v in tuples:\n-        p.value = v.astype(np.float32)\n-\n-\n def update(x, new_x):\n     return C.assign(x, new_x)\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "keras#8c0a8b4b0498ad96faa76ab5bae3320de28bc5b3", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 3 | Churn Cumulative: 7970 | Contributors (this commit): 41 | Commits (past 90d): 37 | Contributors (cumulative): 41 | DMM Complexity: None\n\nDIFF:\n@@ -1298,7 +1298,8 @@ class InputLayer(Layer):\n             raise ValueError('Only provide the input_shape OR '\n                              'batch_input_shape argument to '\n                              'InputLayer, not both at the same time.')\n-        if input_tensor is not None:\n+        if input_tensor is not None and batch_input_shape is None:\n+            # If input_tensor is set, and batch_input_shape is not set:\n             # Attempt automatic input shape inference.\n             try:\n                 batch_input_shape = K.int_shape(input_tensor)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "keras#846d25ab97b10eded1bb0ae0ab06b9fd7c44fd8b", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 16 | Lines Deleted: 0 | Files Changed: 2 | Hunks: 3 | Methods Changed: 2 | Complexity Δ (Sum/Max): 2/1 | Churn Δ: 16 | Churn Cumulative: 5013 | Contributors (this commit): 50 | Commits (past 90d): 24 | Contributors (cumulative): 55 | DMM Complexity: 0.7272727272727273\n\nDIFF:\n@@ -1462,6 +1462,9 @@ class Model(Container):\n \n         elif validation_split and 0. < validation_split < 1.:\n             do_validation = True\n+            if hasattr(x[0], 'shape'):\n+                split_at = int(x[0].shape[0] * (1. - validation_split))\n+            else:\n                 split_at = int(len(x[0]) * (1. - validation_split))\n             x, val_x = (_slice_arrays(x, 0, split_at), _slice_arrays(x, split_at))\n             y, val_y = (_slice_arrays(y, 0, split_at), _slice_arrays(y, split_at))\n\n@@ -1,6 +1,7 @@\n import pytest\n import numpy as np\n from numpy.testing import assert_allclose\n+import scipy.sparse as sparse\n \n from keras.layers import Dense, Dropout\n from keras.engine.topology import Input\n@@ -198,6 +199,18 @@ def test_model_methods():\n     out = model.predict([input_a_np, input_b_np], batch_size=4)\n \n \n+@pytest.mark.skipif(K.backend() != 'tensorflow', reason='sparse operations supported only by TF')\n+@keras_test\n+def test_sparse_input_validation_split():\n+    test_input = sparse.random(6, 3, density=0.25).tocsr()\n+    in1 = Input(shape=(3,), sparse=True)\n+    out1 = Dense(4)(in1)\n+    test_output = np.random.random((6, 4))\n+    model = Model(in1, out1)\n+    model.compile('rmsprop', 'mse')\n+    model.fit(test_input, test_output, epochs=1, batch_size=2, validation_split=0.2)\n+\n+\n @keras_test\n def test_trainable_argument():\n     x = np.random.random((5, 3))\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "keras#7fc707e13e0e96ef311ab360872f894f664bcfbe", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 2 | Methods Changed: 2 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 8035 | Contributors (this commit): 80 | Commits (past 90d): 29 | Contributors (cumulative): 80 | DMM Complexity: None\n\nDIFF:\n@@ -2769,7 +2769,7 @@ def sparse_categorical_crossentropy(output, target, from_logits=False):\n     # Returns\n         Output tensor.\n     \"\"\"\n-    # Note: tf.nn.softmax_cross_entropy_with_logits\n+    # Note: tf.nn.sparse_softmax_cross_entropy_with_logits\n     # expects logits, Keras expects probabilities.\n     if not from_logits:\n         epsilon = _to_tensor(_EPSILON, output.dtype.base_dtype)\n@@ -2802,7 +2802,7 @@ def binary_crossentropy(output, target, from_logits=False):\n     # Returns\n         A tensor.\n     \"\"\"\n-    # Note: tf.nn.softmax_cross_entropy_with_logits\n+    # Note: tf.nn.sigmoid_cross_entropy_with_logits\n     # expects logits, Keras expects probabilities.\n     if not from_logits:\n         # transform back to logits\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "keras#ca1122fe809c1419bbe95242d598bce9c73e19d3", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 63 | Lines Deleted: 36 | Files Changed: 1 | Hunks: 19 | Methods Changed: 17 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 99 | Churn Cumulative: 2163 | Contributors (this commit): 3 | Commits (past 90d): 3 | Contributors (cumulative): 3 | DMM Complexity: 0.6296296296296297\n\nDIFF:\n@@ -56,8 +56,9 @@ def learning_phase():\n def set_learning_phase(value):\n     global _LEARNING_PHASE\n     if value not in {0, 1}:\n-        raise ValueError('Expected learning phase to be '\n-                         '0 or 1.')\n+        raise ValueError('CNTK Backend: Set learning phase '\n+                         'with value %s is not supported, '\n+                         'expected 0 or 1.' % value)\n     v = np.float32([value])\n     _LEARNING_PHASE.value = v\n \n@@ -124,7 +125,9 @@ def _convert_dtype_string(dtype):\n     elif dtype == np.float64:\n         return 'float64'\n     else:\n-        raise ValueError('Unsupported dtype:', dtype)\n+        raise ValueError('CNTK Backend: Unsupported dtype: %s. '\n+                         'CNTK only supports float32 and '\n+                         'float64.' % dtype)\n \n \n def variable(value, dtype=_FLOATX, name=None):\n@@ -214,7 +217,11 @@ def eval(x):\n     elif isinstance(x, C.variables.Constant) or isinstance(x, C.variables.Parameter):\n         return x.value\n     else:\n-        raise ValueError('evaluating %s is not supported' % type(x))\n+        raise ValueError('CNTK Backend: `eval` method on '\n+                         '`%s` type is not supported. '\n+                         'CNTK only supports `eval` with '\n+                         '`Function`, `Constant` or '\n+                         '`Parameter`.' % type(x))\n \n \n def placeholder(\n@@ -232,8 +239,10 @@ def placeholder(\n     cntk_shape = tuple(cntk_shape)\n \n     if dynamic_axis_num > len(cntk_shape):\n-        raise ValueError('CNTK backend: the input dim '\n-                         'is less than the number of dynamic axis')\n+        raise ValueError('CNTK backend: creating placeholder with '\n+                         '%d dimension is not supported, at least '\n+                         '%d dimensions are needed.'\n+                         % (len(cntk_shape, dynamic_axis_num)))\n \n     if name is None:\n         name = ''\n@@ -321,8 +330,10 @@ def random_binomial(shape, p=0.0, dtype=None, seed=None):\n     size = 1\n     for _ in shape:\n         if _ is None:\n-            raise ValueError('CNTK backend does not support '\n-                             'random op on batch axis for now.')\n+            raise ValueError('CNTK Backend: randomness op with '\n+                             'dynamic shape is not supported now. '\n+                             'Please provide fixed dimension '\n+                             'instead of `None`.')\n         size *= _\n \n     binomial = np.random.binomial(1, p, size).astype(dtype).reshape(shape)\n@@ -332,8 +343,10 @@ def random_binomial(shape, p=0.0, dtype=None, seed=None):\n def random_uniform(shape, minval=0.0, maxval=1.0, dtype=None, seed=None):\n     for _ in shape:\n         if _ is None:\n-            raise ValueError('CNTK backend does not support '\n-                             'random op on batch axis for now.')\n+            raise ValueError('CNTK Backend: randomness op with '\n+                             'dynamic shape is not supported now. '\n+                             'Please provide fixed dimension '\n+                             'instead of `None`.')\n \n     return random_uniform_variable(shape, minval, maxval, dtype, seed)\n \n@@ -393,8 +406,10 @@ def random_normal_variable(\n def random_normal(shape, mean=0.0, stddev=1.0, dtype=_FLOATX, seed=None):\n     for _ in shape:\n         if _ is None:\n-            raise ValueError('CNTK backend does not support '\n-                             'random op on batch axis for now.')\n+            raise ValueError('CNTK Backend: randomness op with '\n+                             'dynamic shape is not supported now. '\n+                             'Please provide fixed dimension '\n+                             'instead of `None`.')\n     # how to apply mean and stddev\n     return random_normal_variable(shape=shape, mean=mean, scale=1.0)\n \n@@ -441,9 +456,9 @@ def ones_like(x, name=None):\n def count_params(x):\n     for _ in x.shape:\n         if _ == C.InferredDimension or _ == C.FreeDimension:\n-            raise ValueError('CNTK backend: count_params with '\n-                             'InferredDimension and FreeDimension '\n-                             'is not supported for now.')\n+            raise ValueError('CNTK backend: `count_params` with dynamic '\n+                             'shape is not supported. Please provide '\n+                             'fixed dimension instead of `None`.')\n \n     return np.prod([x.shape[i] for i in range(len(x.shape))])\n \n@@ -971,7 +986,7 @@ def reshape(x, shape):\n             if b_any(_ == C.InferredDimension for _ in x.shape) or b_any(\n                     _ == C.FreeDimension for _ in x.shape):\n                 warnings.warn(\n-                    'Warning: cntk backend does not support '\n+                    'Warning: CNTK backend does not support '\n                     'collapse of batch axis with inferred dimension. '\n                     'The reshape did not take place.')\n                 return x\n@@ -999,8 +1014,10 @@ def permute_dimensions(x, pattern):\n     current_layout = tuple([i for i in range(dims)])\n \n     if num_dynamic_axis > 0 and pattern[:num_dynamic_axis] != current_layout[:num_dynamic_axis]:\n-        raise ValueError('CNTK backend: '\n-                         'permute on dynamic axis is not supported')\n+        raise ValueError('CNTK backend: the permute pattern %s '\n+                         'requested permute on dynamic axis, '\n+                         'which is not supported. Please do permute '\n+                         'on static axis.' % pattern)\n \n     axis = list(pattern)\n     axis = axis[num_dynamic_axis:]\n@@ -1018,7 +1035,7 @@ def resize_images(X, height_factor, width_factor, data_format):\n         output = repeat_elements(output, width_factor, axis=2)\n         return output\n     else:\n-        raise ValueError('Invalid dim_ordering:', data_format)\n+        raise ValueError('CNTK Backend: Invalid dim_ordering:', data_format)\n \n \n def repeat_elements(x, rep, axis):\n@@ -1072,9 +1089,11 @@ def _static_rnn(step_function, inputs, initial_states,\n \n     # if the second axis is static axis, CNTK will do unroll by default\n     if shape[1] is None:\n-        raise ValueError('Static rnn in cntk '\n-                         'could only be executed with '\n-                         'second axis as static axis')\n+        raise ValueError('CNTK Backend: the input of static rnn '\n+                         'has shape `%s`, the second axis '\n+                         'is not static. If you want to run '\n+                         'rnn with non-static axis, plesae try '\n+                         'dynamic rnn with sequence axis.' % shape)\n     if constants is None:\n         constants = []\n \n@@ -1170,7 +1189,8 @@ def rnn(step_function, inputs, initial_states,\n     dims = len(shape)\n \n     if dims < 3:\n-        raise ValueError('Input should be at least 3D.')\n+        raise ValueError('CNTK Backend: the input of rnn has only rank %d '\n+                         'Need at least rank 3 to run RNN.' % dims)\n \n     if _get_dynamic_axis_num(inputs) == 0 or unroll:\n         return _static_rnn(\n@@ -1431,7 +1451,8 @@ def relu(x, alpha=0., max_value=None):\n \n def dropout(x, level, noise_shape=None, seed=None):\n     if level < 0. or level >= 1:\n-        raise ValueError('Dropout level must be in interval [0, 1[.')\n+        raise ValueError('CNTK Backend: Invalid dropout level %s, '\n+                         'must be in interval [0, 1].' % level)\n     return C.dropout(x, level)\n \n \n@@ -1512,9 +1533,11 @@ class Function(object):\n                     p_list.append(grad_parameter_dict[g])\n                     u_list.append(g)\n                 else:\n-                    raise ValueError('cntk backend: '\n-                                     'found gradient not related with '\n-                                     'parameters when construct trainer.')\n+                    raise ValueError('CNTK backend: when constructing trainer, '\n+                                     'found gradient node `%s` which is not '\n+                                     'related to any parameters in the model. '\n+                                     'Please double check how the gradient node '\n+                                     'is constructed.' % g)\n \n             if len(u_list) > 0:\n                 learner = C.cntk_py.universal_learner(p_list, u_list, update_func)\n@@ -1562,8 +1585,9 @@ class Function(object):\n                 if argument in feed_dict:\n                     input_dict[argument] = feed_dict[argument]\n                 else:\n-                    raise ValueError('CNTK backend: '\n-                                     'argument not found in input')\n+                    raise ValueError('CNTK backend: argument %s is not found in inputs. '\n+                                     'Please double check the model and inputs in '\n+                                     '`train_function`.' % argument.name)\n \n             result = self.trainer.train_minibatch(\n                 input_dict, self.trainer_output)\n@@ -1579,8 +1603,9 @@ class Function(object):\n                 if argument in feed_dict:\n                     input_dict[argument] = feed_dict[argument]\n                 else:\n-                    raise ValueError('CNTK backend: '\n-                                     'argument not found in input')\n+                    raise ValueError('CNTK backend: metrics argument %s '\n+                                     'is not found in inputs. Please double '\n+                                     'check the model and inputs.' % argument.name)\n             output_values = self.metrics_func.eval(input_dict, as_numpy=False)\n             if isinstance(output_values, dict):\n                 for o in self.metrics_outputs:\n@@ -1598,8 +1623,9 @@ class Function(object):\n                 if argument in feed_dict:\n                     input_dict[argument] = feed_dict[argument]\n                 else:\n-                    raise ValueError('CNTK backend: '\n-                                     'argument not found in input')\n+                    raise ValueError('CNTK backend: assign ops argument %s '\n+                                     'is not found in inputs. Please double '\n+                                     'check the model and inputs.' % argument.name)\n             self.unrelated_updates.eval(input_dict, as_numpy=False)\n         return updated\n \n@@ -1624,9 +1650,10 @@ def temporal_padding(x, padding=(1, 1)):\n def _padding(x, pattern, axis):\n     base_shape = x.shape\n     if b_any([dim < 0 for dim in base_shape]):\n-        raise ValueError('CNTK backend does not support padding '\n-                         'with non-specified input shape.'\n-                         'please provide specified input shape.')\n+        raise ValueError('CNTK Backend: padding input tensor with '\n+                         'shape `%s` contains non-specified dimension, '\n+                         'which is not supported. Please give fixed '\n+                         'dimension to enable padding.' % base_shape)\n     if pattern[0] > 0:\n         prefix_shape = list(base_shape)\n         prefix_shape[axis] = pattern[0]\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
