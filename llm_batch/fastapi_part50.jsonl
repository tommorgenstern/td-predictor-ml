{"custom_id": "fastapi#6f45f437099c743f5adb8fd7268fe41a768a7a6d", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 64 | Lines Deleted: 11 | Files Changed: 4 | Hunks: 13 | Methods Changed: 6 | Complexity Î” (Sum/Max): 4/3 | Churn Î”: 75 | Churn Cumulative: 4071 | Contributors (this commit): 33 | Commits (past 90d): 7 | Contributors (cumulative): 50 | DMM Complexity: 0.16666666666666666\n\nDIFF:\n@@ -1,12 +1,37 @@\n from fastapi import FastAPI\n \n+description = \"\"\"\n+ChimichangApp API helps you do awesome stuff. ðŸš€\n+\n+## Items\n+\n+You can **read items**.\n+\n+## Users\n+\n+You will be able to:\n+\n+* **Create users** (_not implemented_).\n+* **Read users** (_not implemented_).\n+\"\"\"\n+\n app = FastAPI(\n-    title=\"My Super Project\",\n-    description=\"This is a very fancy project, with auto docs for the API and everything\",\n-    version=\"2.5.0\",\n+    title=\"ChimichangApp\",\n+    description=description,\n+    version=\"0.0.1\",\n+    terms_of_service=\"http://example.com/terms/\",\n+    contact={\n+        \"name\": \"Deadpoolio the Amazing\",\n+        \"url\": \"http://x-force.example.com/contact/\",\n+        \"email\": \"dp@x-force.example.com\",\n+    },\n+    license_info={\n+        \"name\": \"Apache 2.0\",\n+        \"url\": \"https://www.apache.org/licenses/LICENSE-2.0.html\",\n+    },\n )\n \n \n @app.get(\"/items/\")\n async def read_items():\n-    return [{\"name\": \"Foo\"}]\n+    return [{\"name\": \"Katana\"}]\n\n@@ -55,6 +55,9 @@ class FastAPI(Starlette):\n         ] = None,\n         on_startup: Optional[Sequence[Callable[[], Any]]] = None,\n         on_shutdown: Optional[Sequence[Callable[[], Any]]] = None,\n+        terms_of_service: Optional[str] = None,\n+        contact: Optional[Dict[str, Union[str, Any]]] = None,\n+        license_info: Optional[Dict[str, Union[str, Any]]] = None,\n         openapi_prefix: str = \"\",\n         root_path: str = \"\",\n         root_path_in_servers: bool = True,\n@@ -97,6 +100,9 @@ class FastAPI(Starlette):\n         self.title = title\n         self.description = description\n         self.version = version\n+        self.terms_of_service = terms_of_service\n+        self.contact = contact\n+        self.license_info = license_info\n         self.servers = servers or []\n         self.openapi_url = openapi_url\n         self.openapi_tags = openapi_tags\n@@ -132,6 +138,9 @@ class FastAPI(Starlette):\n                 version=self.version,\n                 openapi_version=self.openapi_version,\n                 description=self.description,\n+                terms_of_service=self.terms_of_service,\n+                contact=self.contact,\n+                license_info=self.license_info,\n                 routes=self.routes,\n                 tags=self.openapi_tags,\n                 servers=self.servers,\n\n@@ -362,10 +362,19 @@ def get_openapi(\n     routes: Sequence[BaseRoute],\n     tags: Optional[List[Dict[str, Any]]] = None,\n     servers: Optional[List[Dict[str, Union[str, Any]]]] = None,\n+    terms_of_service: Optional[str] = None,\n+    contact: Optional[Dict[str, Union[str, Any]]] = None,\n+    license_info: Optional[Dict[str, Union[str, Any]]] = None,\n ) -> Dict[str, Any]:\n-    info = {\"title\": title, \"version\": version}\n+    info: Dict[str, Any] = {\"title\": title, \"version\": version}\n     if description:\n         info[\"description\"] = description\n+    if terms_of_service:\n+        info[\"termsOfService\"] = terms_of_service\n+    if contact:\n+        info[\"contact\"] = contact\n+    if license_info:\n+        info[\"license\"] = license_info\n     output: Dict[str, Any] = {\"openapi\": openapi_version, \"info\": info}\n     if servers:\n         output[\"servers\"] = servers\n\n@@ -7,21 +7,31 @@ client = TestClient(app)\n openapi_schema = {\n     \"openapi\": \"3.0.2\",\n     \"info\": {\n-        \"title\": \"My Super Project\",\n-        \"version\": \"2.5.0\",\n-        \"description\": \"This is a very fancy project, with auto docs for the API and everything\",\n+        \"title\": \"ChimichangApp\",\n+        \"description\": \"\\nChimichangApp API helps you do awesome stuff. ðŸš€\\n\\n## Items\\n\\nYou can **read items**.\\n\\n## Users\\n\\nYou will be able to:\\n\\n* **Create users** (_not implemented_).\\n* **Read users** (_not implemented_).\\n\",\n+        \"termsOfService\": \"http://example.com/terms/\",\n+        \"contact\": {\n+            \"name\": \"Deadpoolio the Amazing\",\n+            \"url\": \"http://x-force.example.com/contact/\",\n+            \"email\": \"dp@x-force.example.com\",\n+        },\n+        \"license\": {\n+            \"name\": \"Apache 2.0\",\n+            \"url\": \"https://www.apache.org/licenses/LICENSE-2.0.html\",\n+        },\n+        \"version\": \"0.0.1\",\n     },\n     \"paths\": {\n         \"/items/\": {\n             \"get\": {\n+                \"summary\": \"Read Items\",\n+                \"operationId\": \"read_items_items__get\",\n                 \"responses\": {\n                     \"200\": {\n                         \"description\": \"Successful Response\",\n                         \"content\": {\"application/json\": {\"schema\": {}}},\n                     }\n                 },\n-                \"summary\": \"Read Items\",\n-                \"operationId\": \"read_items_items__get\",\n             }\n         }\n     },\n@@ -37,4 +47,4 @@ def test_openapi_schema():\n def test_items():\n     response = client.get(\"/items/\")\n     assert response.status_code == 200, response.text\n-    assert response.json() == [{\"name\": \"Foo\"}]\n+    assert response.json() == [{\"name\": \"Katana\"}]\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#4eada92883e97ea3d01ce716abfa34079c691d84", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 5 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Î” (Sum/Max): 0/0 | Churn Î”: 5 | Churn Cumulative: 60 | Contributors (this commit): 3 | Commits (past 90d): 2 | Contributors (cumulative): 3 | DMM Complexity: None\n\nDIFF:\n@@ -1,5 +1,10 @@\n from typing import Any, Callable, Iterable, Type, TypeVar\n \n+from starlette.datastructures import URL as URL  # noqa: F401\n+from starlette.datastructures import Address as Address  # noqa: F401\n+from starlette.datastructures import FormData as FormData  # noqa: F401\n+from starlette.datastructures import Headers as Headers  # noqa: F401\n+from starlette.datastructures import QueryParams as QueryParams  # noqa: F401\n from starlette.datastructures import State as State  # noqa: F401\n from starlette.datastructures import UploadFile as StarletteUploadFile\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#836bb97a2d343937205a01a9829b975c48cdfcad", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 368 | Lines Deleted: 0 | Files Changed: 11 | Hunks: 52 | Methods Changed: 40 | Complexity Î” (Sum/Max): 18/4 | Churn Î”: 368 | Churn Cumulative: 9378 | Contributors (this commit): 48 | Commits (past 90d): 21 | Contributors (cumulative): 89 | DMM Complexity: 0.9527027027027027\n\nDIFF:\n@@ -0,0 +1,8 @@\n+from fastapi import FastAPI\n+\n+app = FastAPI()\n+\n+\n+@app.get(\"/items/\", openapi_extra={\"x-aperture-labs-portal\": \"blue\"})\n+async def read_items():\n+    return [{\"item_id\": \"portal-gun\"}]\n\n@@ -0,0 +1,41 @@\n+from fastapi import FastAPI, Request\n+\n+app = FastAPI()\n+\n+\n+def magic_data_reader(raw_body: bytes):\n+    return {\n+        \"size\": len(raw_body),\n+        \"content\": {\n+            \"name\": \"Maaaagic\",\n+            \"price\": 42,\n+            \"description\": \"Just kiddin', no magic here. âœ¨\",\n+        },\n+    }\n+\n+\n+@app.post(\n+    \"/items/\",\n+    openapi_extra={\n+        \"requestBody\": {\n+            \"content\": {\n+                \"application/json\": {\n+                    \"schema\": {\n+                        \"required\": [\"name\", \"price\"],\n+                        \"type\": \"object\",\n+                        \"properties\": {\n+                            \"name\": {\"type\": \"string\"},\n+                            \"price\": {\"type\": \"number\"},\n+                            \"description\": {\"type\": \"string\"},\n+                        },\n+                    }\n+                }\n+            },\n+            \"required\": True,\n+        },\n+    },\n+)\n+async def create_item(request: Request):\n+    raw_body = await request.body()\n+    data = magic_data_reader(raw_body)\n+    return data\n\n@@ -0,0 +1,34 @@\n+from typing import List\n+\n+import yaml\n+from fastapi import FastAPI, HTTPException, Request\n+from pydantic import BaseModel, ValidationError\n+\n+app = FastAPI()\n+\n+\n+class Item(BaseModel):\n+    name: str\n+    tags: List[str]\n+\n+\n+@app.post(\n+    \"/items/\",\n+    openapi_extra={\n+        \"requestBody\": {\n+            \"content\": {\"application/x-yaml\": {\"schema\": Item.schema()}},\n+            \"required\": True,\n+        },\n+    },\n+)\n+async def create_item(request: Request):\n+    raw_body = await request.body()\n+    try:\n+        data = yaml.safe_load(raw_body)\n+    except yaml.YAMLError:\n+        raise HTTPException(status_code=422, detail=\"Invalid YAML\")\n+    try:\n+        item = Item.parse_obj(data)\n+    except ValidationError as e:\n+        raise HTTPException(status_code=422, detail=e.errors())\n+    return item\n\n@@ -236,6 +236,7 @@ class FastAPI(Starlette):\n             JSONResponse\n         ),\n         name: Optional[str] = None,\n+        openapi_extra: Optional[Dict[str, Any]] = None,\n     ) -> None:\n         self.router.add_api_route(\n             path,\n@@ -260,6 +261,7 @@ class FastAPI(Starlette):\n             include_in_schema=include_in_schema,\n             response_class=response_class,\n             name=name,\n+            openapi_extra=openapi_extra,\n         )\n \n     def api_route(\n@@ -286,6 +288,7 @@ class FastAPI(Starlette):\n         include_in_schema: bool = True,\n         response_class: Type[Response] = Default(JSONResponse),\n         name: Optional[str] = None,\n+        openapi_extra: Optional[Dict[str, Any]] = None,\n     ) -> Callable[[DecoratedCallable], DecoratedCallable]:\n         def decorator(func: DecoratedCallable) -> DecoratedCallable:\n             self.router.add_api_route(\n@@ -311,6 +314,7 @@ class FastAPI(Starlette):\n                 include_in_schema=include_in_schema,\n                 response_class=response_class,\n                 name=name,\n+                openapi_extra=openapi_extra,\n             )\n             return func\n \n@@ -379,6 +383,7 @@ class FastAPI(Starlette):\n         response_class: Type[Response] = Default(JSONResponse),\n         name: Optional[str] = None,\n         callbacks: Optional[List[BaseRoute]] = None,\n+        openapi_extra: Optional[Dict[str, Any]] = None,\n     ) -> Callable[[DecoratedCallable], DecoratedCallable]:\n         return self.router.get(\n             path,\n@@ -402,6 +407,7 @@ class FastAPI(Starlette):\n             response_class=response_class,\n             name=name,\n             callbacks=callbacks,\n+            openapi_extra=openapi_extra,\n         )\n \n     def put(\n@@ -428,6 +434,7 @@ class FastAPI(Starlette):\n         response_class: Type[Response] = Default(JSONResponse),\n         name: Optional[str] = None,\n         callbacks: Optional[List[BaseRoute]] = None,\n+        openapi_extra: Optional[Dict[str, Any]] = None,\n     ) -> Callable[[DecoratedCallable], DecoratedCallable]:\n         return self.router.put(\n             path,\n@@ -451,6 +458,7 @@ class FastAPI(Starlette):\n             response_class=response_class,\n             name=name,\n             callbacks=callbacks,\n+            openapi_extra=openapi_extra,\n         )\n \n     def post(\n@@ -477,6 +485,7 @@ class FastAPI(Starlette):\n         response_class: Type[Response] = Default(JSONResponse),\n         name: Optional[str] = None,\n         callbacks: Optional[List[BaseRoute]] = None,\n+        openapi_extra: Optional[Dict[str, Any]] = None,\n     ) -> Callable[[DecoratedCallable], DecoratedCallable]:\n         return self.router.post(\n             path,\n@@ -500,6 +509,7 @@ class FastAPI(Starlette):\n             response_class=response_class,\n             name=name,\n             callbacks=callbacks,\n+            openapi_extra=openapi_extra,\n         )\n \n     def delete(\n@@ -526,6 +536,7 @@ class FastAPI(Starlette):\n         response_class: Type[Response] = Default(JSONResponse),\n         name: Optional[str] = None,\n         callbacks: Optional[List[BaseRoute]] = None,\n+        openapi_extra: Optional[Dict[str, Any]] = None,\n     ) -> Callable[[DecoratedCallable], DecoratedCallable]:\n         return self.router.delete(\n             path,\n@@ -549,6 +560,7 @@ class FastAPI(Starlette):\n             response_class=response_class,\n             name=name,\n             callbacks=callbacks,\n+            openapi_extra=openapi_extra,\n         )\n \n     def options(\n@@ -575,6 +587,7 @@ class FastAPI(Starlette):\n         response_class: Type[Response] = Default(JSONResponse),\n         name: Optional[str] = None,\n         callbacks: Optional[List[BaseRoute]] = None,\n+        openapi_extra: Optional[Dict[str, Any]] = None,\n     ) -> Callable[[DecoratedCallable], DecoratedCallable]:\n         return self.router.options(\n             path,\n@@ -598,6 +611,7 @@ class FastAPI(Starlette):\n             response_class=response_class,\n             name=name,\n             callbacks=callbacks,\n+            openapi_extra=openapi_extra,\n         )\n \n     def head(\n@@ -624,6 +638,7 @@ class FastAPI(Starlette):\n         response_class: Type[Response] = Default(JSONResponse),\n         name: Optional[str] = None,\n         callbacks: Optional[List[BaseRoute]] = None,\n+        openapi_extra: Optional[Dict[str, Any]] = None,\n     ) -> Callable[[DecoratedCallable], DecoratedCallable]:\n         return self.router.head(\n             path,\n@@ -647,6 +662,7 @@ class FastAPI(Starlette):\n             response_class=response_class,\n             name=name,\n             callbacks=callbacks,\n+            openapi_extra=openapi_extra,\n         )\n \n     def patch(\n@@ -673,6 +689,7 @@ class FastAPI(Starlette):\n         response_class: Type[Response] = Default(JSONResponse),\n         name: Optional[str] = None,\n         callbacks: Optional[List[BaseRoute]] = None,\n+        openapi_extra: Optional[Dict[str, Any]] = None,\n     ) -> Callable[[DecoratedCallable], DecoratedCallable]:\n         return self.router.patch(\n             path,\n@@ -696,6 +713,7 @@ class FastAPI(Starlette):\n             response_class=response_class,\n             name=name,\n             callbacks=callbacks,\n+            openapi_extra=openapi_extra,\n         )\n \n     def trace(\n@@ -722,6 +740,7 @@ class FastAPI(Starlette):\n         response_class: Type[Response] = Default(JSONResponse),\n         name: Optional[str] = None,\n         callbacks: Optional[List[BaseRoute]] = None,\n+        openapi_extra: Optional[Dict[str, Any]] = None,\n     ) -> Callable[[DecoratedCallable], DecoratedCallable]:\n         return self.router.trace(\n             path,\n@@ -745,4 +764,5 @@ class FastAPI(Starlette):\n             response_class=response_class,\n             name=name,\n             callbacks=callbacks,\n+            openapi_extra=openapi_extra,\n         )\n\n@@ -227,6 +227,9 @@ class Operation(BaseModel):\n     security: Optional[List[Dict[str, List[str]]]] = None\n     servers: Optional[List[Server]] = None\n \n+    class Config:\n+        extra = \"allow\"\n+\n \n class PathItem(BaseModel):\n     ref: Optional[str] = Field(None, alias=\"$ref\")\n\n@@ -317,6 +317,8 @@ def get_openapi_path(\n                             \"HTTPValidationError\": validation_error_response_definition,\n                         }\n                     )\n+            if route.openapi_extra:\n+                deep_dict_update(operation, route.openapi_extra)\n             path[method.lower()] = operation\n     return path, security_schemes, definitions\n \n\n@@ -320,6 +320,7 @@ class APIRoute(routing.Route):\n         ),\n         dependency_overrides_provider: Optional[Any] = None,\n         callbacks: Optional[List[BaseRoute]] = None,\n+        openapi_extra: Optional[Dict[str, Any]] = None,\n     ) -> None:\n         # normalise enums e.g. http.HTTPStatus\n         if isinstance(status_code, enum.IntEnum):\n@@ -406,6 +407,7 @@ class APIRoute(routing.Route):\n         self.dependency_overrides_provider = dependency_overrides_provider\n         self.callbacks = callbacks\n         self.app = request_response(self.get_route_handler())\n+        self.openapi_extra = openapi_extra\n \n     def get_route_handler(self) -> Callable[[Request], Coroutine[Any, Any, Response]]:\n         return get_request_handler(\n@@ -496,6 +498,7 @@ class APIRouter(routing.Router):\n         name: Optional[str] = None,\n         route_class_override: Optional[Type[APIRoute]] = None,\n         callbacks: Optional[List[BaseRoute]] = None,\n+        openapi_extra: Optional[Dict[str, Any]] = None,\n     ) -> None:\n         route_class = route_class_override or self.route_class\n         responses = responses or {}\n@@ -537,6 +540,7 @@ class APIRouter(routing.Router):\n             name=name,\n             dependency_overrides_provider=self.dependency_overrides_provider,\n             callbacks=current_callbacks,\n+            openapi_extra=openapi_extra,\n         )\n         self.routes.append(route)\n \n@@ -565,6 +569,7 @@ class APIRouter(routing.Router):\n         response_class: Type[Response] = Default(JSONResponse),\n         name: Optional[str] = None,\n         callbacks: Optional[List[BaseRoute]] = None,\n+        openapi_extra: Optional[Dict[str, Any]] = None,\n     ) -> Callable[[DecoratedCallable], DecoratedCallable]:\n         def decorator(func: DecoratedCallable) -> DecoratedCallable:\n             self.add_api_route(\n@@ -591,6 +596,7 @@ class APIRouter(routing.Router):\n                 response_class=response_class,\n                 name=name,\n                 callbacks=callbacks,\n+                openapi_extra=openapi_extra,\n             )\n             return func\n \n@@ -695,6 +701,7 @@ class APIRouter(routing.Router):\n                     name=route.name,\n                     route_class_override=type(route),\n                     callbacks=current_callbacks,\n+                    openapi_extra=route.openapi_extra,\n                 )\n             elif isinstance(route, routing.Route):\n                 methods = list(route.methods or [])  # type: ignore # in Starlette\n@@ -742,6 +749,7 @@ class APIRouter(routing.Router):\n         response_class: Type[Response] = Default(JSONResponse),\n         name: Optional[str] = None,\n         callbacks: Optional[List[BaseRoute]] = None,\n+        openapi_extra: Optional[Dict[str, Any]] = None,\n     ) -> Callable[[DecoratedCallable], DecoratedCallable]:\n         return self.api_route(\n             path=path,\n@@ -766,6 +774,7 @@ class APIRouter(routing.Router):\n             response_class=response_class,\n             name=name,\n             callbacks=callbacks,\n+            openapi_extra=openapi_extra,\n         )\n \n     def put(\n@@ -792,6 +801,7 @@ class APIRouter(routing.Router):\n         response_class: Type[Response] = Default(JSONResponse),\n         name: Optional[str] = None,\n         callbacks: Optional[List[BaseRoute]] = None,\n+        openapi_extra: Optional[Dict[str, Any]] = None,\n     ) -> Callable[[DecoratedCallable], DecoratedCallable]:\n         return self.api_route(\n             path=path,\n@@ -816,6 +826,7 @@ class APIRouter(routing.Router):\n             response_class=response_class,\n             name=name,\n             callbacks=callbacks,\n+            openapi_extra=openapi_extra,\n         )\n \n     def post(\n@@ -842,6 +853,7 @@ class APIRouter(routing.Router):\n         response_class: Type[Response] = Default(JSONResponse),\n         name: Optional[str] = None,\n         callbacks: Optional[List[BaseRoute]] = None,\n+        openapi_extra: Optional[Dict[str, Any]] = None,\n     ) -> Callable[[DecoratedCallable], DecoratedCallable]:\n         return self.api_route(\n             path=path,\n@@ -866,6 +878,7 @@ class APIRouter(routing.Router):\n             response_class=response_class,\n             name=name,\n             callbacks=callbacks,\n+            openapi_extra=openapi_extra,\n         )\n \n     def delete(\n@@ -892,6 +905,7 @@ class APIRouter(routing.Router):\n         response_class: Type[Response] = Default(JSONResponse),\n         name: Optional[str] = None,\n         callbacks: Optional[List[BaseRoute]] = None,\n+        openapi_extra: Optional[Dict[str, Any]] = None,\n     ) -> Callable[[DecoratedCallable], DecoratedCallable]:\n         return self.api_route(\n             path=path,\n@@ -916,6 +930,7 @@ class APIRouter(routing.Router):\n             response_class=response_class,\n             name=name,\n             callbacks=callbacks,\n+            openapi_extra=openapi_extra,\n         )\n \n     def options(\n@@ -942,6 +957,7 @@ class APIRouter(routing.Router):\n         response_class: Type[Response] = Default(JSONResponse),\n         name: Optional[str] = None,\n         callbacks: Optional[List[BaseRoute]] = None,\n+        openapi_extra: Optional[Dict[str, Any]] = None,\n     ) -> Callable[[DecoratedCallable], DecoratedCallable]:\n         return self.api_route(\n             path=path,\n@@ -966,6 +982,7 @@ class APIRouter(routing.Router):\n             response_class=response_class,\n             name=name,\n             callbacks=callbacks,\n+            openapi_extra=openapi_extra,\n         )\n \n     def head(\n@@ -992,6 +1009,7 @@ class APIRouter(routing.Router):\n         response_class: Type[Response] = Default(JSONResponse),\n         name: Optional[str] = None,\n         callbacks: Optional[List[BaseRoute]] = None,\n+        openapi_extra: Optional[Dict[str, Any]] = None,\n     ) -> Callable[[DecoratedCallable], DecoratedCallable]:\n         return self.api_route(\n             path=path,\n@@ -1016,6 +1034,7 @@ class APIRouter(routing.Router):\n             response_class=response_class,\n             name=name,\n             callbacks=callbacks,\n+            openapi_extra=openapi_extra,\n         )\n \n     def patch(\n@@ -1042,6 +1061,7 @@ class APIRouter(routing.Router):\n         response_class: Type[Response] = Default(JSONResponse),\n         name: Optional[str] = None,\n         callbacks: Optional[List[BaseRoute]] = None,\n+        openapi_extra: Optional[Dict[str, Any]] = None,\n     ) -> Callable[[DecoratedCallable], DecoratedCallable]:\n         return self.api_route(\n             path=path,\n@@ -1066,6 +1086,7 @@ class APIRouter(routing.Router):\n             response_class=response_class,\n             name=name,\n             callbacks=callbacks,\n+            openapi_extra=openapi_extra,\n         )\n \n     def trace(\n@@ -1092,6 +1113,7 @@ class APIRouter(routing.Router):\n         response_class: Type[Response] = Default(JSONResponse),\n         name: Optional[str] = None,\n         callbacks: Optional[List[BaseRoute]] = None,\n+        openapi_extra: Optional[Dict[str, Any]] = None,\n     ) -> Callable[[DecoratedCallable], DecoratedCallable]:\n \n         return self.api_route(\n@@ -1117,4 +1139,5 @@ class APIRouter(routing.Router):\n             response_class=response_class,\n             name=name,\n             callbacks=callbacks,\n+            openapi_extra=openapi_extra,\n         )\n\n@@ -0,0 +1,45 @@\n+from fastapi import FastAPI\n+from fastapi.testclient import TestClient\n+\n+app = FastAPI()\n+\n+\n+@app.get(\"/\", openapi_extra={\"x-custom-extension\": \"value\"})\n+def route_with_extras():\n+    return {}\n+\n+\n+client = TestClient(app)\n+\n+\n+openapi_schema = {\n+    \"openapi\": \"3.0.2\",\n+    \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n+    \"paths\": {\n+        \"/\": {\n+            \"get\": {\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                    },\n+                },\n+                \"summary\": \"Route With Extras\",\n+                \"operationId\": \"route_with_extras__get\",\n+                \"x-custom-extension\": \"value\",\n+            }\n+        },\n+    },\n+}\n+\n+\n+def test_openapi():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == openapi_schema\n+\n+\n+def test_get_route():\n+    response = client.get(\"/\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {}\n\n@@ -0,0 +1,36 @@\n+from fastapi.testclient import TestClient\n+\n+from docs_src.path_operation_advanced_configuration.tutorial005 import app\n+\n+client = TestClient(app)\n+\n+openapi_schema = {\n+    \"openapi\": \"3.0.2\",\n+    \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n+    \"paths\": {\n+        \"/items/\": {\n+            \"get\": {\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                    }\n+                },\n+                \"summary\": \"Read Items\",\n+                \"operationId\": \"read_items_items__get\",\n+                \"x-aperture-labs-portal\": \"blue\",\n+            }\n+        }\n+    },\n+}\n+\n+\n+def test_openapi_schema():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == openapi_schema\n+\n+\n+def test_get():\n+    response = client.get(\"/items/\")\n+    assert response.status_code == 200, response.text\n\n@@ -0,0 +1,59 @@\n+from fastapi.testclient import TestClient\n+\n+from docs_src.path_operation_advanced_configuration.tutorial006 import app\n+\n+client = TestClient(app)\n+\n+openapi_schema = {\n+    \"openapi\": \"3.0.2\",\n+    \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n+    \"paths\": {\n+        \"/items/\": {\n+            \"post\": {\n+                \"summary\": \"Create Item\",\n+                \"operationId\": \"create_item_items__post\",\n+                \"requestBody\": {\n+                    \"content\": {\n+                        \"application/json\": {\n+                            \"schema\": {\n+                                \"required\": [\"name\", \"price\"],\n+                                \"type\": \"object\",\n+                                \"properties\": {\n+                                    \"name\": {\"type\": \"string\"},\n+                                    \"price\": {\"type\": \"number\"},\n+                                    \"description\": {\"type\": \"string\"},\n+                                },\n+                            }\n+                        }\n+                    },\n+                    \"required\": True,\n+                },\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                    }\n+                },\n+            }\n+        }\n+    },\n+}\n+\n+\n+def test_openapi_schema():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == openapi_schema\n+\n+\n+def test_post():\n+    response = client.post(\"/items/\", data=b\"this is actually not validated\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n+        \"size\": 30,\n+        \"content\": {\n+            \"name\": \"Maaaagic\",\n+            \"price\": 42,\n+            \"description\": \"Just kiddin', no magic here. âœ¨\",\n+        },\n+    }\n\n@@ -0,0 +1,97 @@\n+from fastapi.testclient import TestClient\n+\n+from docs_src.path_operation_advanced_configuration.tutorial007 import app\n+\n+client = TestClient(app)\n+\n+openapi_schema = {\n+    \"openapi\": \"3.0.2\",\n+    \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n+    \"paths\": {\n+        \"/items/\": {\n+            \"post\": {\n+                \"summary\": \"Create Item\",\n+                \"operationId\": \"create_item_items__post\",\n+                \"requestBody\": {\n+                    \"content\": {\n+                        \"application/x-yaml\": {\n+                            \"schema\": {\n+                                \"title\": \"Item\",\n+                                \"required\": [\"name\", \"tags\"],\n+                                \"type\": \"object\",\n+                                \"properties\": {\n+                                    \"name\": {\"title\": \"Name\", \"type\": \"string\"},\n+                                    \"tags\": {\n+                                        \"title\": \"Tags\",\n+                                        \"type\": \"array\",\n+                                        \"items\": {\"type\": \"string\"},\n+                                    },\n+                                },\n+                            }\n+                        }\n+                    },\n+                    \"required\": True,\n+                },\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                    }\n+                },\n+            }\n+        }\n+    },\n+}\n+\n+\n+def test_openapi_schema():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == openapi_schema\n+\n+\n+def test_post():\n+    yaml_data = \"\"\"\n+        name: Deadpoolio\n+        tags:\n+        - x-force\n+        - x-men\n+        - x-avengers\n+        \"\"\"\n+    response = client.post(\"/items/\", data=yaml_data)\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\n+        \"name\": \"Deadpoolio\",\n+        \"tags\": [\"x-force\", \"x-men\", \"x-avengers\"],\n+    }\n+\n+\n+def test_post_broken_yaml():\n+    yaml_data = \"\"\"\n+        name: Deadpoolio\n+        tags:\n+        x - x-force\n+        x - x-men\n+        x - x-avengers\n+        \"\"\"\n+    response = client.post(\"/items/\", data=yaml_data)\n+    assert response.status_code == 422, response.text\n+    assert response.json() == {\"detail\": \"Invalid YAML\"}\n+\n+\n+def test_post_invalid():\n+    yaml_data = \"\"\"\n+        name: Deadpoolio\n+        tags:\n+        - x-force\n+        - x-men\n+        - x-avengers\n+        - sneaky: object\n+        \"\"\"\n+    response = client.post(\"/items/\", data=yaml_data)\n+    assert response.status_code == 422, response.text\n+    assert response.json() == {\n+        \"detail\": [\n+            {\"loc\": [\"tags\", 3], \"msg\": \"str type expected\", \"type\": \"type_error.str\"}\n+        ]\n+    }\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#97fa743ecb5a716fa0223a7463cb83f3f0df494c", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 83 | Lines Deleted: 34 | Files Changed: 1 | Hunks: 28 | Methods Changed: 0 | Complexity Î” (Sum/Max): 0/0 | Churn Î”: 117 | Churn Cumulative: 762 | Contributors (this commit): 9 | Commits (past 90d): 3 | Contributors (cumulative): 9 | DMM Complexity: None\n\nDIFF:\n@@ -30,11 +30,17 @@ class Contact(BaseModel):\n     url: Optional[AnyUrl] = None\n     email: Optional[EmailStr] = None\n \n+    class Config:\n+        extra = \"allow\"\n+\n \n class License(BaseModel):\n     name: str\n     url: Optional[AnyUrl] = None\n \n+    class Config:\n+        extra = \"allow\"\n+\n \n class Info(BaseModel):\n     title: str\n@@ -44,18 +50,27 @@ class Info(BaseModel):\n     license: Optional[License] = None\n     version: str\n \n+    class Config:\n+        extra = \"allow\"\n+\n \n class ServerVariable(BaseModel):\n     enum: Optional[List[str]] = None\n     default: str\n     description: Optional[str] = None\n \n+    class Config:\n+        extra = \"allow\"\n+\n \n class Server(BaseModel):\n     url: Union[AnyUrl, str]\n     description: Optional[str] = None\n     variables: Optional[Dict[str, ServerVariable]] = None\n \n+    class Config:\n+        extra = \"allow\"\n+\n \n class Reference(BaseModel):\n     ref: str = Field(..., alias=\"$ref\")\n@@ -73,13 +88,19 @@ class XML(BaseModel):\n     attribute: Optional[bool] = None\n     wrapped: Optional[bool] = None\n \n+    class Config:\n+        extra = \"allow\"\n+\n \n class ExternalDocumentation(BaseModel):\n     description: Optional[str] = None\n     url: AnyUrl\n \n+    class Config:\n+        extra = \"allow\"\n \n-class SchemaBase(BaseModel):\n+\n+class Schema(BaseModel):\n     ref: Optional[str] = Field(None, alias=\"$ref\")\n     title: Optional[str] = None\n     multipleOf: Optional[float] = None\n@@ -98,13 +119,13 @@ class SchemaBase(BaseModel):\n     required: Optional[List[str]] = None\n     enum: Optional[List[Any]] = None\n     type: Optional[str] = None\n-    allOf: Optional[List[Any]] = None\n-    oneOf: Optional[List[Any]] = None\n-    anyOf: Optional[List[Any]] = None\n-    not_: Optional[Any] = Field(None, alias=\"not\")\n-    items: Optional[Any] = None\n-    properties: Optional[Dict[str, Any]] = None\n-    additionalProperties: Optional[Union[Dict[str, Any], bool]] = None\n+    allOf: Optional[List[\"Schema\"]] = None\n+    oneOf: Optional[List[\"Schema\"]] = None\n+    anyOf: Optional[List[\"Schema\"]] = None\n+    not_: Optional[\"Schema\"] = Field(None, alias=\"not\")\n+    items: Optional[\"Schema\"] = None\n+    properties: Optional[Dict[str, \"Schema\"]] = None\n+    additionalProperties: Optional[Union[\"Schema\", Reference, bool]] = None\n     description: Optional[str] = None\n     format: Optional[str] = None\n     default: Optional[Any] = None\n@@ -121,22 +142,15 @@ class SchemaBase(BaseModel):\n         extra: str = \"allow\"\n \n \n-class Schema(SchemaBase):\n-    allOf: Optional[List[SchemaBase]] = None\n-    oneOf: Optional[List[SchemaBase]] = None\n-    anyOf: Optional[List[SchemaBase]] = None\n-    not_: Optional[SchemaBase] = Field(None, alias=\"not\")\n-    items: Optional[SchemaBase] = None\n-    properties: Optional[Dict[str, SchemaBase]] = None\n-    additionalProperties: Optional[Union[Dict[str, Any], bool]] = None\n-\n-\n class Example(BaseModel):\n     summary: Optional[str] = None\n     description: Optional[str] = None\n     value: Optional[Any] = None\n     externalValue: Optional[AnyUrl] = None\n \n+    class Config:\n+        extra = \"allow\"\n+\n \n class ParameterInType(Enum):\n     query = \"query\"\n@@ -147,12 +161,14 @@ class ParameterInType(Enum):\n \n class Encoding(BaseModel):\n     contentType: Optional[str] = None\n-    # Workaround OpenAPI recursive reference, using Any\n-    headers: Optional[Dict[str, Union[Any, Reference]]] = None\n+    headers: Optional[Dict[str, Union[\"Header\", Reference]]] = None\n     style: Optional[str] = None\n     explode: Optional[bool] = None\n     allowReserved: Optional[bool] = None\n \n+    class Config:\n+        extra = \"allow\"\n+\n \n class MediaType(BaseModel):\n     schema_: Optional[Union[Schema, Reference]] = Field(None, alias=\"schema\")\n@@ -160,6 +176,9 @@ class MediaType(BaseModel):\n     examples: Optional[Dict[str, Union[Example, Reference]]] = None\n     encoding: Optional[Dict[str, Encoding]] = None\n \n+    class Config:\n+        extra = \"allow\"\n+\n \n class ParameterBase(BaseModel):\n     description: Optional[str] = None\n@@ -175,6 +194,9 @@ class ParameterBase(BaseModel):\n     # Serialization rules for more complex scenarios\n     content: Optional[Dict[str, MediaType]] = None\n \n+    class Config:\n+        extra = \"allow\"\n+\n \n class Parameter(ParameterBase):\n     name: str\n@@ -185,16 +207,14 @@ class Header(ParameterBase):\n     pass\n \n \n-# Workaround OpenAPI recursive reference\n-class EncodingWithHeaders(Encoding):\n-    headers: Optional[Dict[str, Union[Header, Reference]]] = None\n-\n-\n class RequestBody(BaseModel):\n     description: Optional[str] = None\n     content: Dict[str, MediaType]\n     required: Optional[bool] = None\n \n+    class Config:\n+        extra = \"allow\"\n+\n \n class Link(BaseModel):\n     operationRef: Optional[str] = None\n@@ -204,6 +224,9 @@ class Link(BaseModel):\n     description: Optional[str] = None\n     server: Optional[Server] = None\n \n+    class Config:\n+        extra = \"allow\"\n+\n \n class Response(BaseModel):\n     description: str\n@@ -211,6 +234,9 @@ class Response(BaseModel):\n     content: Optional[Dict[str, MediaType]] = None\n     links: Optional[Dict[str, Union[Link, Reference]]] = None\n \n+    class Config:\n+        extra = \"allow\"\n+\n \n class Operation(BaseModel):\n     tags: Optional[List[str]] = None\n@@ -220,9 +246,9 @@ class Operation(BaseModel):\n     operationId: Optional[str] = None\n     parameters: Optional[List[Union[Parameter, Reference]]] = None\n     requestBody: Optional[Union[RequestBody, Reference]] = None\n-    responses: Dict[str, Response]\n-    # Workaround OpenAPI recursive reference\n-    callbacks: Optional[Dict[str, Union[Dict[str, Any], Reference]]] = None\n+    # Using Any for Specification Extensions\n+    responses: Dict[str, Union[Response, Any]]\n+    callbacks: Optional[Dict[str, Union[Dict[str, \"PathItem\"], Reference]]] = None\n     deprecated: Optional[bool] = None\n     security: Optional[List[Dict[str, List[str]]]] = None\n     servers: Optional[List[Server]] = None\n@@ -246,10 +272,8 @@ class PathItem(BaseModel):\n     servers: Optional[List[Server]] = None\n     parameters: Optional[List[Union[Parameter, Reference]]] = None\n \n-\n-# Workaround OpenAPI recursive reference\n-class OperationWithCallbacks(BaseModel):\n-    callbacks: Optional[Dict[str, Union[Dict[str, PathItem], Reference]]] = None\n+    class Config:\n+        extra = \"allow\"\n \n \n class SecuritySchemeType(Enum):\n@@ -263,6 +287,9 @@ class SecurityBase(BaseModel):\n     type_: SecuritySchemeType = Field(..., alias=\"type\")\n     description: Optional[str] = None\n \n+    class Config:\n+        extra = \"allow\"\n+\n \n class APIKeyIn(Enum):\n     query = \"query\"\n@@ -290,6 +317,9 @@ class OAuthFlow(BaseModel):\n     refreshUrl: Optional[str] = None\n     scopes: Dict[str, str] = {}\n \n+    class Config:\n+        extra = \"allow\"\n+\n \n class OAuthFlowImplicit(OAuthFlow):\n     authorizationUrl: str\n@@ -314,6 +344,9 @@ class OAuthFlows(BaseModel):\n     clientCredentials: Optional[OAuthFlowClientCredentials] = None\n     authorizationCode: Optional[OAuthFlowAuthorizationCode] = None\n \n+    class Config:\n+        extra = \"allow\"\n+\n \n class OAuth2(SecurityBase):\n     type_ = Field(SecuritySchemeType.oauth2, alias=\"type\")\n@@ -337,7 +370,11 @@ class Components(BaseModel):\n     headers: Optional[Dict[str, Union[Header, Reference]]] = None\n     securitySchemes: Optional[Dict[str, Union[SecurityScheme, Reference]]] = None\n     links: Optional[Dict[str, Union[Link, Reference]]] = None\n-    callbacks: Optional[Dict[str, Union[Dict[str, PathItem], Reference]]] = None\n+    # Using Any for Specification Extensions\n+    callbacks: Optional[Dict[str, Union[Dict[str, PathItem], Reference, Any]]] = None\n+\n+    class Config:\n+        extra = \"allow\"\n \n \n class Tag(BaseModel):\n@@ -345,13 +382,25 @@ class Tag(BaseModel):\n     description: Optional[str] = None\n     externalDocs: Optional[ExternalDocumentation] = None\n \n+    class Config:\n+        extra = \"allow\"\n+\n \n class OpenAPI(BaseModel):\n     openapi: str\n     info: Info\n     servers: Optional[List[Server]] = None\n-    paths: Dict[str, PathItem]\n+    # Using Any for Specification Extensions\n+    paths: Dict[str, Union[PathItem, Any]]\n     components: Optional[Components] = None\n     security: Optional[List[Dict[str, List[str]]]] = None\n     tags: Optional[List[Tag]] = None\n     externalDocs: Optional[ExternalDocumentation] = None\n+\n+    class Config:\n+        extra = \"allow\"\n+\n+\n+Schema.update_forward_refs()\n+Operation.update_forward_refs()\n+Encoding.update_forward_refs()\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#717a1ec40992d00e34635f0b4c9b68ab5a6daef7", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Î” (Sum/Max): 0/0 | Churn Î”: 2 | Churn Cumulative: 330 | Contributors (this commit): 2 | Commits (past 90d): 9 | Contributors (cumulative): 2 | DMM Complexity: None\n\nDIFF:\n@@ -1,6 +1,6 @@\n \"\"\"FastAPI framework, high performance, easy to learn, fast to code, ready for production\"\"\"\n \n-__version__ = \"0.67.0\"\n+__version__ = \"0.68.0\"\n \n from starlette import status as status\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#ab33ba27aff6189ec3b6cbadbc2e06da7922b55d", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 39 | Lines Deleted: 14 | Files Changed: 4 | Hunks: 15 | Methods Changed: 2 | Complexity Î” (Sum/Max): 3/3 | Churn Î”: 53 | Churn Cumulative: 667 | Contributors (this commit): 4 | Commits (past 90d): 4 | Contributors (cumulative): 10 | DMM Complexity: 1.0\n\nDIFF:\n@@ -5,7 +5,7 @@ from unittest.mock import MagicMock\n import pytest\n from fastapi.testclient import TestClient\n \n-from ...utils import skip_py36\n+from ...utils import needs_py37\n \n openapi_schema = {\n     \"openapi\": \"3.0.2\",\n@@ -340,14 +340,14 @@ def client():\n     test_db.unlink()\n \n \n-@skip_py36\n+@needs_py37\n def test_openapi_schema(client):\n     response = client.get(\"/openapi.json\")\n     assert response.status_code == 200, response.text\n     assert response.json() == openapi_schema\n \n \n-@skip_py36\n+@needs_py37\n def test_create_user(client):\n     test_user = {\"email\": \"johndoe@example.com\", \"password\": \"secret\"}\n     response = client.post(\"/users/\", json=test_user)\n@@ -359,7 +359,7 @@ def test_create_user(client):\n     assert response.status_code == 400, response.text\n \n \n-@skip_py36\n+@needs_py37\n def test_get_user(client):\n     response = client.get(\"/users/1\")\n     assert response.status_code == 200, response.text\n@@ -368,13 +368,13 @@ def test_get_user(client):\n     assert \"id\" in data\n \n \n-@skip_py36\n+@needs_py37\n def test_inexistent_user(client):\n     response = client.get(\"/users/999\")\n     assert response.status_code == 404, response.text\n \n \n-@skip_py36\n+@needs_py37\n def test_get_users(client):\n     response = client.get(\"/users/\")\n     assert response.status_code == 200, response.text\n@@ -386,7 +386,7 @@ def test_get_users(client):\n time.sleep = MagicMock()\n \n \n-@skip_py36\n+@needs_py37\n def test_get_slowusers(client):\n     response = client.get(\"/slowusers/\")\n     assert response.status_code == 200, response.text\n@@ -395,7 +395,7 @@ def test_get_slowusers(client):\n     assert \"id\" in data[0]\n \n \n-@skip_py36\n+@needs_py37\n def test_create_item(client):\n     item = {\"title\": \"Foo\", \"description\": \"Something that fights\"}\n     response = client.post(\"/users/1/items/\", json=item)\n@@ -419,7 +419,7 @@ def test_create_item(client):\n     assert item_to_check[\"description\"] == item[\"description\"]\n \n \n-@skip_py36\n+@needs_py37\n def test_read_items(client):\n     response = client.get(\"/items/\")\n     assert response.status_code == 200, response.text\n\n@@ -0,0 +1,24 @@\n+from fastapi import FastAPI\n+from fastapi.testclient import TestClient\n+\n+from .utils import needs_py39\n+\n+\n+@needs_py39\n+def test_typing():\n+    types = {\n+        list[int]: [1, 2, 3],\n+        dict[str, list[int]]: {\"a\": [1, 2, 3], \"b\": [4, 5, 6]},\n+        set[int]: [1, 2, 3],  # `set` is converted to `list`\n+        tuple[int, ...]: [1, 2, 3],  # `tuple` is converted to `list`\n+    }\n+    for test_type, expect in types.items():\n+        app = FastAPI()\n+\n+        @app.post(\"/\", response_model=test_type)\n+        def post_endpoint(input: test_type):\n+            return input\n+\n+        res = TestClient(app).post(\"/\", json=expect)\n+        assert res.status_code == 200, res.json()\n+        assert res.json() == expect\n\n@@ -4,7 +4,7 @@ from fastapi import FastAPI\n from fastapi.testclient import TestClient\n from pydantic import BaseModel\n \n-from .utils import skip_py36\n+from .utils import needs_py37\n \n # In Python 3.6:\n # u = Union[ExtendedItem, Item] == __main__.Item\n@@ -118,21 +118,21 @@ inherited_item_openapi_schema = {\n }\n \n \n-@skip_py36\n+@needs_py37\n def test_inherited_item_openapi_schema():\n     response = client.get(\"/openapi.json\")\n     assert response.status_code == 200, response.text\n     assert response.json() == inherited_item_openapi_schema\n \n \n-@skip_py36\n+@needs_py37\n def test_post_extended_item():\n     response = client.post(\"/items/\", json={\"name\": \"Foo\", \"age\": 5})\n     assert response.status_code == 200, response.text\n     assert response.json() == {\"item\": {\"name\": \"Foo\", \"age\": 5}}\n \n \n-@skip_py36\n+@needs_py37\n def test_post_item():\n     response = client.post(\"/items/\", json={\"name\": \"Foo\"})\n     assert response.status_code == 200, response.text\n\n@@ -2,4 +2,5 @@ import sys\n \n import pytest\n \n-skip_py36 = pytest.mark.skipif(sys.version_info < (3, 7), reason=\"skip python3.6\")\n+needs_py37 = pytest.mark.skipif(sys.version_info < (3, 7), reason=\"requires python3.7+\")\n+needs_py39 = pytest.mark.skipif(sys.version_info < (3, 9), reason=\"requires python3.9+\")\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#53a86a885d223a0f73dec035ccca0918ac4f3f39", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 12 | Lines Deleted: 12 | Files Changed: 1 | Hunks: 8 | Methods Changed: 0 | Complexity Î” (Sum/Max): 0/0 | Churn Î”: 24 | Churn Cumulative: 591 | Contributors (this commit): 1 | Commits (past 90d): 1 | Contributors (cumulative): 1 | DMM Complexity: None\n\nDIFF:\n@@ -476,21 +476,16 @@ if __name__ == \"__main__\":\n     )\n \n     tiers = get_individual_sponsors(settings=settings)\n-    sponsors_50 = []\n-    for login, sponsor in tiers[50].items():\n-        sponsors_50.append(\n-            {\"login\": login, \"avatarUrl\": sponsor.avatarUrl, \"url\": sponsor.url}\n-        )\n     keys = list(tiers.keys())\n     keys.sort(reverse=True)\n     sponsors = []\n     for key in keys:\n-        if key >= 50:\n-            continue\n+        sponsor_group = []\n         for login, sponsor in tiers[key].items():\n-            sponsors.append(\n+            sponsor_group.append(\n                 {\"login\": login, \"avatarUrl\": sponsor.avatarUrl, \"url\": sponsor.url}\n             )\n+        sponsors.append(sponsor_group)\n \n     people = {\n         \"maintainers\": maintainers,\n@@ -498,16 +493,21 @@ if __name__ == \"__main__\":\n         \"last_month_active\": last_month_active,\n         \"top_contributors\": top_contributors,\n         \"top_reviewers\": top_reviewers,\n-        \"sponsors_50\": sponsors_50,\n+    }\n+    github_sponsors = {\n         \"sponsors\": sponsors,\n     }\n     people_path = Path(\"./docs/en/data/people.yml\")\n+    github_sponsors_path = Path(\"./docs/en/data/github_sponsors.yml\")\n     people_old_content = people_path.read_text(encoding=\"utf-8\")\n-    new_content = yaml.dump(people, sort_keys=False, width=200, allow_unicode=True)\n-    if people_old_content == new_content:\n+    github_sponsors_old_content = github_sponsors_path.read_text(encoding=\"utf-8\")\n+    new_people_content = yaml.dump(people, sort_keys=False, width=200, allow_unicode=True)\n+    new_github_sponsors_content = yaml.dump(github_sponsors, sort_keys=False, width=200, allow_unicode=True)\n+    if people_old_content == new_people_content and github_sponsors_old_content == new_github_sponsors_content:\n         logging.info(\"The FastAPI People data hasn't changed, finishing.\")\n         sys.exit(0)\n-    people_path.write_text(new_content, encoding=\"utf-8\")\n+    people_path.write_text(new_people_content, encoding=\"utf-8\")\n+    github_sponsors_path.write_text(new_github_sponsors_content, encoding=\"utf-8\")\n     logging.info(\"Setting up GitHub Actions git user\")\n     subprocess.run([\"git\", \"config\", \"user.name\", \"github-actions\"], check=True)\n     subprocess.run(\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
