{"custom_id": "fastapi#f00f0de9ca68d201462affeca1c0e945be243578", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 155 | Lines Deleted: 59 | Files Changed: 2 | Hunks: 5 | Methods Changed: 3 | Complexity Δ (Sum/Max): -1/0 | Churn Δ: 214 | Churn Cumulative: 377 | Contributors (this commit): 6 | Commits (past 90d): 3 | Contributors (cumulative): 7 | DMM Complexity: 1.0\n\nDIFF:\n@@ -33,36 +33,146 @@ async def create_shop(\n     pass  # pragma: no cover\n \n \n-create_product_request_body = {\n-    \"content\": {\n-        \"application/vnd.api+json\": {\n-            \"schema\": {\"$ref\": \"#/components/schemas/Body_create_product_products_post\"}\n-        }\n-    },\n-    \"required\": True,\n-}\n-\n-create_shop_request_body = {\n-    \"content\": {\n-        \"application/vnd.api+json\": {\n-            \"schema\": {\"$ref\": \"#/components/schemas/Body_create_shop_shops_post\"}\n-        }\n-    },\n-    \"required\": True,\n-}\n-\n client = TestClient(app)\n \n \n def test_openapi_schema():\n     response = client.get(\"/openapi.json\")\n     assert response.status_code == 200, response.text\n-    openapi_schema = response.json()\n-    assert (\n-        openapi_schema[\"paths\"][\"/products\"][\"post\"][\"requestBody\"]\n-        == create_product_request_body\n-    )\n-    assert (\n-        openapi_schema[\"paths\"][\"/shops\"][\"post\"][\"requestBody\"]\n-        == create_shop_request_body\n-    )\n+    # insert_assert(response.json())\n+    assert response.json() == {\n+        \"openapi\": \"3.0.2\",\n+        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n+        \"paths\": {\n+            \"/products\": {\n+                \"post\": {\n+                    \"summary\": \"Create Product\",\n+                    \"operationId\": \"create_product_products_post\",\n+                    \"requestBody\": {\n+                        \"content\": {\n+                            \"application/vnd.api+json\": {\n+                                \"schema\": {\n+                                    \"$ref\": \"#/components/schemas/Body_create_product_products_post\"\n+                                }\n+                            }\n+                        },\n+                        \"required\": True,\n+                    },\n+                    \"responses\": {\n+                        \"200\": {\n+                            \"description\": \"Successful Response\",\n+                            \"content\": {\"application/json\": {\"schema\": {}}},\n+                        },\n+                        \"422\": {\n+                            \"description\": \"Validation Error\",\n+                            \"content\": {\n+                                \"application/json\": {\n+                                    \"schema\": {\n+                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n+                                    }\n+                                }\n+                            },\n+                        },\n+                    },\n+                }\n+            },\n+            \"/shops\": {\n+                \"post\": {\n+                    \"summary\": \"Create Shop\",\n+                    \"operationId\": \"create_shop_shops_post\",\n+                    \"requestBody\": {\n+                        \"content\": {\n+                            \"application/vnd.api+json\": {\n+                                \"schema\": {\n+                                    \"$ref\": \"#/components/schemas/Body_create_shop_shops_post\"\n+                                }\n+                            }\n+                        },\n+                        \"required\": True,\n+                    },\n+                    \"responses\": {\n+                        \"200\": {\n+                            \"description\": \"Successful Response\",\n+                            \"content\": {\"application/json\": {\"schema\": {}}},\n+                        },\n+                        \"422\": {\n+                            \"description\": \"Validation Error\",\n+                            \"content\": {\n+                                \"application/json\": {\n+                                    \"schema\": {\n+                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n+                                    }\n+                                }\n+                            },\n+                        },\n+                    },\n+                }\n+            },\n+        },\n+        \"components\": {\n+            \"schemas\": {\n+                \"Body_create_product_products_post\": {\n+                    \"title\": \"Body_create_product_products_post\",\n+                    \"required\": [\"data\"],\n+                    \"type\": \"object\",\n+                    \"properties\": {\"data\": {\"$ref\": \"#/components/schemas/Product\"}},\n+                },\n+                \"Body_create_shop_shops_post\": {\n+                    \"title\": \"Body_create_shop_shops_post\",\n+                    \"required\": [\"data\"],\n+                    \"type\": \"object\",\n+                    \"properties\": {\n+                        \"data\": {\"$ref\": \"#/components/schemas/Shop\"},\n+                        \"included\": {\n+                            \"title\": \"Included\",\n+                            \"type\": \"array\",\n+                            \"items\": {\"$ref\": \"#/components/schemas/Product\"},\n+                            \"default\": [],\n+                        },\n+                    },\n+                },\n+                \"HTTPValidationError\": {\n+                    \"title\": \"HTTPValidationError\",\n+                    \"type\": \"object\",\n+                    \"properties\": {\n+                        \"detail\": {\n+                            \"title\": \"Detail\",\n+                            \"type\": \"array\",\n+                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n+                        }\n+                    },\n+                },\n+                \"Product\": {\n+                    \"title\": \"Product\",\n+                    \"required\": [\"name\", \"price\"],\n+                    \"type\": \"object\",\n+                    \"properties\": {\n+                        \"name\": {\"title\": \"Name\", \"type\": \"string\"},\n+                        \"price\": {\"title\": \"Price\", \"type\": \"number\"},\n+                    },\n+                },\n+                \"Shop\": {\n+                    \"title\": \"Shop\",\n+                    \"required\": [\"name\"],\n+                    \"type\": \"object\",\n+                    \"properties\": {\"name\": {\"title\": \"Name\", \"type\": \"string\"}},\n+                },\n+                \"ValidationError\": {\n+                    \"title\": \"ValidationError\",\n+                    \"required\": [\"loc\", \"msg\", \"type\"],\n+                    \"type\": \"object\",\n+                    \"properties\": {\n+                        \"loc\": {\n+                            \"title\": \"Location\",\n+                            \"type\": \"array\",\n+                            \"items\": {\n+                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n+                            },\n+                        },\n+                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n+                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n+                    },\n+                },\n+            }\n+        },\n+    }\n\n@@ -1,12 +1,27 @@\n-from copy import deepcopy\n-\n from fastapi.testclient import TestClient\n \n from docs_src.dataclasses.tutorial002 import app\n \n client = TestClient(app)\n \n-openapi_schema = {\n+\n+def test_get_item():\n+    response = client.get(\"/items/next\")\n+    assert response.status_code == 200\n+    assert response.json() == {\n+        \"name\": \"Island In The Moon\",\n+        \"price\": 12.99,\n+        \"description\": \"A place to be be playin' and havin' fun\",\n+        \"tags\": [\"breater\"],\n+        \"tax\": None,\n+    }\n+\n+\n+def test_openapi_schema():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200\n+    data = response.json()\n+    assert data == {\n         \"openapi\": \"3.0.2\",\n         \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n         \"paths\": {\n@@ -48,32 +63,3 @@ openapi_schema = {\n             }\n         },\n     }\n-\n-\n-def test_openapi_schema():\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200\n-    # TODO: remove this once Pydantic 1.9 is released\n-    # Ref: https://github.com/pydantic/pydantic/pull/2557\n-    data = response.json()\n-    alternative_data1 = deepcopy(data)\n-    alternative_data2 = deepcopy(data)\n-    alternative_data1[\"components\"][\"schemas\"][\"Item\"][\"required\"] = [\"name\", \"price\"]\n-    alternative_data2[\"components\"][\"schemas\"][\"Item\"][\"required\"] = [\n-        \"name\",\n-        \"price\",\n-        \"tags\",\n-    ]\n-    assert alternative_data1 == openapi_schema or alternative_data2 == openapi_schema\n-\n-\n-def test_get_item():\n-    response = client.get(\"/items/next\")\n-    assert response.status_code == 200\n-    assert response.json() == {\n-        \"name\": \"Island In The Moon\",\n-        \"price\": 12.99,\n-        \"description\": \"A place to be be playin' and havin' fun\",\n-        \"tags\": [\"breater\"],\n-        \"tax\": None,\n-    }\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#5100a98ccd42bf1201f6cde093222947facbc616", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 3 | Churn Cumulative: 5 | Contributors (this commit): 2 | Commits (past 90d): 1 | Contributors (cumulative): 2 | DMM Complexity: None\n\nDIFF:\n@@ -1,6 +1,7 @@\n from fastapi import FastAPI\n from fastapi.middleware.wsgi import WSGIMiddleware\n-from flask import Flask, escape, request\n+from flask import Flask, request\n+from markupsafe import escape\n \n flask_app = Flask(__name__)\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#8cc967a7605d3883bd04ceb5d25cc94ae079612f", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 415 | Contributors (this commit): 2 | Commits (past 90d): 6 | Contributors (cumulative): 2 | DMM Complexity: None\n\nDIFF:\n@@ -1,6 +1,6 @@\n \"\"\"FastAPI framework, high performance, easy to learn, fast to code, ready for production\"\"\"\n \n-__version__ = \"0.95.1\"\n+__version__ = \"0.95.2\"\n \n from starlette import status as status\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#27618aa2e8b4052e8a742f01e763267d27f0e8d6", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 22 | Lines Deleted: 4 | Files Changed: 1 | Hunks: 5 | Methods Changed: 2 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 26 | Churn Cumulative: 644 | Contributors (this commit): 22 | Commits (past 90d): 2 | Contributors (cumulative): 22 | DMM Complexity: None\n\nDIFF:\n@@ -2,7 +2,18 @@ import re\n import warnings\n from dataclasses import is_dataclass\n from enum import Enum\n-from typing import TYPE_CHECKING, Any, Dict, Optional, Set, Type, Union, cast\n+from typing import (\n+    TYPE_CHECKING,\n+    Any,\n+    Dict,\n+    MutableMapping,\n+    Optional,\n+    Set,\n+    Type,\n+    Union,\n+    cast,\n+)\n+from weakref import WeakKeyDictionary\n \n import fastapi\n from fastapi.datastructures import DefaultPlaceholder, DefaultType\n@@ -16,6 +27,11 @@ from pydantic.utils import lenient_issubclass\n if TYPE_CHECKING:  # pragma: nocover\n     from .routing import APIRoute\n \n+# Cache for `create_cloned_field`\n+_CLONED_TYPES_CACHE: MutableMapping[\n+    Type[BaseModel], Type[BaseModel]\n+] = WeakKeyDictionary()\n+\n \n def is_body_allowed_for_status_code(status_code: Union[int, str, None]) -> bool:\n     if status_code is None:\n@@ -98,11 +114,13 @@ def create_response_field(\n def create_cloned_field(\n     field: ModelField,\n     *,\n-    cloned_types: Optional[Dict[Type[BaseModel], Type[BaseModel]]] = None,\n+    cloned_types: Optional[MutableMapping[Type[BaseModel], Type[BaseModel]]] = None,\n ) -> ModelField:\n-    # _cloned_types has already cloned types, to support recursive models\n+    # cloned_types caches already cloned types to support recursive models and improve\n+    # performance by avoiding unecessary cloning\n     if cloned_types is None:\n-        cloned_types = {}\n+        cloned_types = _CLONED_TYPES_CACHE\n+\n     original_type = field.type_\n     if is_dataclass(original_type) and hasattr(original_type, \"__pydantic_model__\"):\n         original_type = original_type.__pydantic_model__\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#1574c9623103d03d27117f64b937d754cba12584", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 417 | Contributors (this commit): 2 | Commits (past 90d): 7 | Contributors (cumulative): 2 | DMM Complexity: None\n\nDIFF:\n@@ -1,6 +1,6 @@\n \"\"\"FastAPI framework, high performance, easy to learn, fast to code, ready for production\"\"\"\n \n-__version__ = \"0.95.2\"\n+__version__ = \"0.96.0\"\n \n from starlette import status as status\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#2d35651a5a21db07d2164258cedf35e718662540", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 6 | Lines Deleted: 6 | Files Changed: 1 | Hunks: 3 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 12 | Churn Cumulative: 806 | Contributors (this commit): 10 | Commits (past 90d): 1 | Contributors (cumulative): 10 | DMM Complexity: None\n\nDIFF:\n@@ -108,14 +108,14 @@ class Schema(BaseModel):\n     exclusiveMaximum: Optional[float] = None\n     minimum: Optional[float] = None\n     exclusiveMinimum: Optional[float] = None\n-    maxLength: Optional[int] = Field(default=None, gte=0)\n-    minLength: Optional[int] = Field(default=None, gte=0)\n+    maxLength: Optional[int] = Field(default=None, ge=0)\n+    minLength: Optional[int] = Field(default=None, ge=0)\n     pattern: Optional[str] = None\n-    maxItems: Optional[int] = Field(default=None, gte=0)\n-    minItems: Optional[int] = Field(default=None, gte=0)\n+    maxItems: Optional[int] = Field(default=None, ge=0)\n+    minItems: Optional[int] = Field(default=None, ge=0)\n     uniqueItems: Optional[bool] = None\n-    maxProperties: Optional[int] = Field(default=None, gte=0)\n-    minProperties: Optional[int] = Field(default=None, gte=0)\n+    maxProperties: Optional[int] = Field(default=None, ge=0)\n+    minProperties: Optional[int] = Field(default=None, ge=0)\n     required: Optional[List[str]] = None\n     enum: Optional[List[Any]] = None\n     type: Optional[str] = None\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#010d44ee1bbe82b431225d57d77455643a24a2d0", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 5 | Lines Deleted: 5 | Files Changed: 1 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 10 | Churn Cumulative: 303 | Contributors (this commit): 7 | Commits (past 90d): 1 | Contributors (cumulative): 7 | DMM Complexity: None\n\nDIFF:\n@@ -73,11 +73,6 @@ class HTTPBasic(HTTPBase):\n             unauthorized_headers = {\"WWW-Authenticate\": f'Basic realm=\"{self.realm}\"'}\n         else:\n             unauthorized_headers = {\"WWW-Authenticate\": \"Basic\"}\n-        invalid_user_credentials_exc = HTTPException(\n-            status_code=HTTP_401_UNAUTHORIZED,\n-            detail=\"Invalid authentication credentials\",\n-            headers=unauthorized_headers,\n-        )\n         if not authorization or scheme.lower() != \"basic\":\n             if self.auto_error:\n                 raise HTTPException(\n@@ -87,6 +82,11 @@ class HTTPBasic(HTTPBase):\n                 )\n             else:\n                 return None\n+        invalid_user_credentials_exc = HTTPException(\n+            status_code=HTTP_401_UNAUTHORIZED,\n+            detail=\"Invalid authentication credentials\",\n+            headers=unauthorized_headers,\n+        )\n         try:\n             data = b64decode(param).decode(\"ascii\")\n         except (ValueError, UnicodeDecodeError, binascii.Error):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#52fd0afc945e503a56725e79f5d44fb9a7c75f09", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 0 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 58 | Contributors (this commit): 4 | Commits (past 90d): 1 | Contributors (cumulative): 4 | DMM Complexity: None\n\nDIFF:\n@@ -27,8 +27,6 @@ class UJSONResponse(JSONResponse):\n \n \n class ORJSONResponse(JSONResponse):\n-    media_type = \"application/json\"\n-\n     def render(self, content: Any) -> bytes:\n         assert orjson is not None, \"orjson must be installed to use ORJSONResponse\"\n         return orjson.dumps(\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#6dd8e567cc2de5993bdb69f57d1cbc2554e6b09e", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 2 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 97 | Contributors (this commit): 7 | Commits (past 90d): 1 | Contributors (cumulative): 7 | DMM Complexity: None\n\nDIFF:\n@@ -11,7 +11,7 @@ class HTTPException(StarletteHTTPException):\n         self,\n         status_code: int,\n         detail: Any = None,\n-        headers: Optional[Dict[str, Any]] = None,\n+        headers: Optional[Dict[str, str]] = None,\n     ) -> None:\n         super().__init__(status_code=status_code, detail=detail, headers=headers)\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#19347bfc3cd1d3dcf3d8216c642033dcb9a3d6d5", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 419 | Contributors (this commit): 2 | Commits (past 90d): 6 | Contributors (cumulative): 2 | DMM Complexity: None\n\nDIFF:\n@@ -1,6 +1,6 @@\n \"\"\"FastAPI framework, high performance, easy to learn, fast to code, ready for production\"\"\"\n \n-__version__ = \"0.96.0\"\n+__version__ = \"0.96.1\"\n \n from starlette import status as status\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#ab03f226353394da467b77ff08cad4cbf94463e9", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 163 | Lines Deleted: 6 | Files Changed: 4 | Hunks: 13 | Methods Changed: 21 | Complexity Δ (Sum/Max): 22/21 | Churn Δ: 169 | Churn Cumulative: 8196 | Contributors (this commit): 51 | Commits (past 90d): 6 | Contributors (cumulative): 78 | DMM Complexity: 0.9560439560439561\n\nDIFF:\n@@ -19,8 +19,9 @@ from fastapi.encoders import DictIntStrAny, SetIntStr\n from fastapi.exception_handlers import (\n     http_exception_handler,\n     request_validation_exception_handler,\n+    websocket_request_validation_exception_handler,\n )\n-from fastapi.exceptions import RequestValidationError\n+from fastapi.exceptions import RequestValidationError, WebSocketRequestValidationError\n from fastapi.logger import logger\n from fastapi.middleware.asyncexitstack import AsyncExitStackMiddleware\n from fastapi.openapi.docs import (\n@@ -145,6 +146,11 @@ class FastAPI(Starlette):\n         self.exception_handlers.setdefault(\n             RequestValidationError, request_validation_exception_handler\n         )\n+        self.exception_handlers.setdefault(\n+            WebSocketRequestValidationError,\n+            # Starlette still has incorrect type specification for the handlers\n+            websocket_request_validation_exception_handler,  # type: ignore\n+        )\n \n         self.user_middleware: List[Middleware] = (\n             [] if middleware is None else list(middleware)\n\n@@ -1,10 +1,11 @@\n from fastapi.encoders import jsonable_encoder\n-from fastapi.exceptions import RequestValidationError\n+from fastapi.exceptions import RequestValidationError, WebSocketRequestValidationError\n from fastapi.utils import is_body_allowed_for_status_code\n+from fastapi.websockets import WebSocket\n from starlette.exceptions import HTTPException\n from starlette.requests import Request\n from starlette.responses import JSONResponse, Response\n-from starlette.status import HTTP_422_UNPROCESSABLE_ENTITY\n+from starlette.status import HTTP_422_UNPROCESSABLE_ENTITY, WS_1008_POLICY_VIOLATION\n \n \n async def http_exception_handler(request: Request, exc: HTTPException) -> Response:\n@@ -23,3 +24,11 @@ async def request_validation_exception_handler(\n         status_code=HTTP_422_UNPROCESSABLE_ENTITY,\n         content={\"detail\": jsonable_encoder(exc.errors())},\n     )\n+\n+\n+async def websocket_request_validation_exception_handler(\n+    websocket: WebSocket, exc: WebSocketRequestValidationError\n+) -> None:\n+    await websocket.close(\n+        code=WS_1008_POLICY_VIOLATION, reason=jsonable_encoder(exc.errors())\n+    )\n\n@@ -56,7 +56,6 @@ from starlette.routing import (\n     request_response,\n     websocket_session,\n )\n-from starlette.status import WS_1008_POLICY_VIOLATION\n from starlette.types import ASGIApp, Lifespan, Scope\n from starlette.websockets import WebSocket\n \n@@ -283,7 +282,6 @@ def get_websocket_app(\n         )\n         values, errors, _, _2, _3 = solved_result\n         if errors:\n-            await websocket.close(code=WS_1008_POLICY_VIOLATION)\n             raise WebSocketRequestValidationError(errors)\n         assert dependant.call is not None, \"dependant.call must be a function\"\n         await dependant.call(**values)\n\n@@ -1,4 +1,16 @@\n-from fastapi import APIRouter, Depends, FastAPI, WebSocket\n+import functools\n+\n+import pytest\n+from fastapi import (\n+    APIRouter,\n+    Depends,\n+    FastAPI,\n+    Header,\n+    WebSocket,\n+    WebSocketDisconnect,\n+    status,\n+)\n+from fastapi.middleware import Middleware\n from fastapi.testclient import TestClient\n \n router = APIRouter()\n@@ -63,9 +75,44 @@ async def router_native_prefix_ws(websocket: WebSocket):\n     await websocket.close()\n \n \n+async def ws_dependency_err():\n+    raise NotImplementedError()\n+\n+\n+@router.websocket(\"/depends-err/\")\n+async def router_ws_depends_err(websocket: WebSocket, data=Depends(ws_dependency_err)):\n+    pass  # pragma: no cover\n+\n+\n+async def ws_dependency_validate(x_missing: str = Header()):\n+    pass  # pragma: no cover\n+\n+\n+@router.websocket(\"/depends-validate/\")\n+async def router_ws_depends_validate(\n+    websocket: WebSocket, data=Depends(ws_dependency_validate)\n+):\n+    pass  # pragma: no cover\n+\n+\n+class CustomError(Exception):\n+    pass\n+\n+\n+@router.websocket(\"/custom_error/\")\n+async def router_ws_custom_error(websocket: WebSocket):\n+    raise CustomError()\n+\n+\n+def make_app(app=None, **kwargs):\n+    app = app or FastAPI(**kwargs)\n     app.include_router(router)\n     app.include_router(prefix_router, prefix=\"/prefix\")\n     app.include_router(native_prefix_route)\n+    return app\n+\n+\n+app = make_app(app)\n \n \n def test_app():\n@@ -125,3 +172,100 @@ def test_router_with_params():\n         assert data == \"path/to/file\"\n         data = websocket.receive_text()\n         assert data == \"a_query_param\"\n+\n+\n+def test_wrong_uri():\n+    \"\"\"\n+    Verify that a websocket connection to a non-existent endpoing returns in a shutdown\n+    \"\"\"\n+    client = TestClient(app)\n+    with pytest.raises(WebSocketDisconnect) as e:\n+        with client.websocket_connect(\"/no-router/\"):\n+            pass  # pragma: no cover\n+    assert e.value.code == status.WS_1000_NORMAL_CLOSURE\n+\n+\n+def websocket_middleware(middleware_func):\n+    \"\"\"\n+    Helper to create a Starlette pure websocket middleware\n+    \"\"\"\n+\n+    def middleware_constructor(app):\n+        @functools.wraps(app)\n+        async def wrapped_app(scope, receive, send):\n+            if scope[\"type\"] != \"websocket\":\n+                return await app(scope, receive, send)  # pragma: no cover\n+\n+            async def call_next():\n+                return await app(scope, receive, send)\n+\n+            websocket = WebSocket(scope, receive=receive, send=send)\n+            return await middleware_func(websocket, call_next)\n+\n+        return wrapped_app\n+\n+    return middleware_constructor\n+\n+\n+def test_depend_validation():\n+    \"\"\"\n+    Verify that a validation in a dependency invokes the correct exception handler\n+    \"\"\"\n+    caught = []\n+\n+    @websocket_middleware\n+    async def catcher(websocket, call_next):\n+        try:\n+            return await call_next()\n+        except Exception as e:  # pragma: no cover\n+            caught.append(e)\n+            raise\n+\n+    myapp = make_app(middleware=[Middleware(catcher)])\n+\n+    client = TestClient(myapp)\n+    with pytest.raises(WebSocketDisconnect) as e:\n+        with client.websocket_connect(\"/depends-validate/\"):\n+            pass  # pragma: no cover\n+    # the validation error does produce a close message\n+    assert e.value.code == status.WS_1008_POLICY_VIOLATION\n+    # and no error is leaked\n+    assert caught == []\n+\n+\n+def test_depend_err_middleware():\n+    \"\"\"\n+    Verify that it is possible to write custom WebSocket middleware to catch errors\n+    \"\"\"\n+\n+    @websocket_middleware\n+    async def errorhandler(websocket: WebSocket, call_next):\n+        try:\n+            return await call_next()\n+        except Exception as e:\n+            await websocket.close(code=status.WS_1006_ABNORMAL_CLOSURE, reason=repr(e))\n+\n+    myapp = make_app(middleware=[Middleware(errorhandler)])\n+    client = TestClient(myapp)\n+    with pytest.raises(WebSocketDisconnect) as e:\n+        with client.websocket_connect(\"/depends-err/\"):\n+            pass  # pragma: no cover\n+    assert e.value.code == status.WS_1006_ABNORMAL_CLOSURE\n+    assert \"NotImplementedError\" in e.value.reason\n+\n+\n+def test_depend_err_handler():\n+    \"\"\"\n+    Verify that it is possible to write custom WebSocket middleware to catch errors\n+    \"\"\"\n+\n+    async def custom_handler(websocket: WebSocket, exc: CustomError) -> None:\n+        await websocket.close(1002, \"foo\")\n+\n+    myapp = make_app(exception_handlers={CustomError: custom_handler})\n+    client = TestClient(myapp)\n+    with pytest.raises(WebSocketDisconnect) as e:\n+        with client.websocket_connect(\"/custom_error/\"):\n+            pass  # pragma: no cover\n+    assert e.value.code == 1002\n+    assert \"foo\" in e.value.reason\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#d8b8f211e813ba4d53987a2bae16587eeaff4ad2", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 134 | Lines Deleted: 13 | Files Changed: 3 | Hunks: 17 | Methods Changed: 23 | Complexity Δ (Sum/Max): 13/9 | Churn Δ: 147 | Churn Cumulative: 8008 | Contributors (this commit): 51 | Commits (past 90d): 7 | Contributors (cumulative): 69 | DMM Complexity: 0.9375\n\nDIFF:\n@@ -401,15 +401,34 @@ class FastAPI(Starlette):\n         return decorator\n \n     def add_api_websocket_route(\n-        self, path: str, endpoint: Callable[..., Any], name: Optional[str] = None\n+        self,\n+        path: str,\n+        endpoint: Callable[..., Any],\n+        name: Optional[str] = None,\n+        *,\n+        dependencies: Optional[Sequence[Depends]] = None,\n     ) -> None:\n-        self.router.add_api_websocket_route(path, endpoint, name=name)\n+        self.router.add_api_websocket_route(\n+            path,\n+            endpoint,\n+            name=name,\n+            dependencies=dependencies,\n+        )\n \n     def websocket(\n-        self, path: str, name: Optional[str] = None\n+        self,\n+        path: str,\n+        name: Optional[str] = None,\n+        *,\n+        dependencies: Optional[Sequence[Depends]] = None,\n     ) -> Callable[[DecoratedCallable], DecoratedCallable]:\n         def decorator(func: DecoratedCallable) -> DecoratedCallable:\n-            self.add_api_websocket_route(path, func, name=name)\n+            self.add_api_websocket_route(\n+                path,\n+                func,\n+                name=name,\n+                dependencies=dependencies,\n+            )\n             return func\n \n         return decorator\n\n@@ -296,13 +296,21 @@ class APIWebSocketRoute(routing.WebSocketRoute):\n         endpoint: Callable[..., Any],\n         *,\n         name: Optional[str] = None,\n+        dependencies: Optional[Sequence[params.Depends]] = None,\n         dependency_overrides_provider: Optional[Any] = None,\n     ) -> None:\n         self.path = path\n         self.endpoint = endpoint\n         self.name = get_name(endpoint) if name is None else name\n+        self.dependencies = list(dependencies or [])\n         self.path_regex, self.path_format, self.param_convertors = compile_path(path)\n         self.dependant = get_dependant(path=self.path_format, call=self.endpoint)\n+        for depends in self.dependencies[::-1]:\n+            self.dependant.dependencies.insert(\n+                0,\n+                get_parameterless_sub_dependant(depends=depends, path=self.path_format),\n+            )\n+\n         self.app = websocket_session(\n             get_websocket_app(\n                 dependant=self.dependant,\n@@ -416,10 +424,7 @@ class APIRoute(routing.Route):\n         else:\n             self.response_field = None  # type: ignore\n             self.secure_cloned_response_field = None\n-        if dependencies:\n-            self.dependencies = list(dependencies)\n-        else:\n-            self.dependencies = []\n+        self.dependencies = list(dependencies or [])\n         self.description = description or inspect.cleandoc(self.endpoint.__doc__ or \"\")\n         # if a \"form feed\" character (page break) is found in the description text,\n         # truncate description text to the content preceding the first \"form feed\"\n@@ -514,7 +519,7 @@ class APIRouter(routing.Router):\n             ), \"A path prefix must not end with '/', as the routes will start with '/'\"\n         self.prefix = prefix\n         self.tags: List[Union[str, Enum]] = tags or []\n-        self.dependencies = list(dependencies or []) or []\n+        self.dependencies = list(dependencies or [])\n         self.deprecated = deprecated\n         self.include_in_schema = include_in_schema\n         self.responses = responses or {}\n@@ -688,21 +693,37 @@ class APIRouter(routing.Router):\n         return decorator\n \n     def add_api_websocket_route(\n-        self, path: str, endpoint: Callable[..., Any], name: Optional[str] = None\n+        self,\n+        path: str,\n+        endpoint: Callable[..., Any],\n+        name: Optional[str] = None,\n+        *,\n+        dependencies: Optional[Sequence[params.Depends]] = None,\n     ) -> None:\n+        current_dependencies = self.dependencies.copy()\n+        if dependencies:\n+            current_dependencies.extend(dependencies)\n+\n         route = APIWebSocketRoute(\n             self.prefix + path,\n             endpoint=endpoint,\n             name=name,\n+            dependencies=current_dependencies,\n             dependency_overrides_provider=self.dependency_overrides_provider,\n         )\n         self.routes.append(route)\n \n     def websocket(\n-        self, path: str, name: Optional[str] = None\n+        self,\n+        path: str,\n+        name: Optional[str] = None,\n+        *,\n+        dependencies: Optional[Sequence[params.Depends]] = None,\n     ) -> Callable[[DecoratedCallable], DecoratedCallable]:\n         def decorator(func: DecoratedCallable) -> DecoratedCallable:\n-            self.add_api_websocket_route(path, func, name=name)\n+            self.add_api_websocket_route(\n+                path, func, name=name, dependencies=dependencies\n+            )\n             return func\n \n         return decorator\n@@ -817,8 +838,16 @@ class APIRouter(routing.Router):\n                     name=route.name,\n                 )\n             elif isinstance(route, APIWebSocketRoute):\n+                current_dependencies = []\n+                if dependencies:\n+                    current_dependencies.extend(dependencies)\n+                if route.dependencies:\n+                    current_dependencies.extend(route.dependencies)\n                 self.add_api_websocket_route(\n-                    prefix + route.path, route.endpoint, name=route.name\n+                    prefix + route.path,\n+                    route.endpoint,\n+                    dependencies=current_dependencies,\n+                    name=route.name,\n                 )\n             elif isinstance(route, routing.WebSocketRoute):\n                 self.add_websocket_route(\n\n@@ -0,0 +1,73 @@\n+import json\n+from typing import List\n+\n+from fastapi import APIRouter, Depends, FastAPI, WebSocket\n+from fastapi.testclient import TestClient\n+from typing_extensions import Annotated\n+\n+\n+def dependency_list() -> List[str]:\n+    return []\n+\n+\n+DepList = Annotated[List[str], Depends(dependency_list)]\n+\n+\n+def create_dependency(name: str):\n+    def fun(deps: DepList):\n+        deps.append(name)\n+\n+    return Depends(fun)\n+\n+\n+router = APIRouter(dependencies=[create_dependency(\"router\")])\n+prefix_router = APIRouter(dependencies=[create_dependency(\"prefix_router\")])\n+app = FastAPI(dependencies=[create_dependency(\"app\")])\n+\n+\n+@app.websocket(\"/\", dependencies=[create_dependency(\"index\")])\n+async def index(websocket: WebSocket, deps: DepList):\n+    await websocket.accept()\n+    await websocket.send_text(json.dumps(deps))\n+    await websocket.close()\n+\n+\n+@router.websocket(\"/router\", dependencies=[create_dependency(\"routerindex\")])\n+async def routerindex(websocket: WebSocket, deps: DepList):\n+    await websocket.accept()\n+    await websocket.send_text(json.dumps(deps))\n+    await websocket.close()\n+\n+\n+@prefix_router.websocket(\"/\", dependencies=[create_dependency(\"routerprefixindex\")])\n+async def routerprefixindex(websocket: WebSocket, deps: DepList):\n+    await websocket.accept()\n+    await websocket.send_text(json.dumps(deps))\n+    await websocket.close()\n+\n+\n+app.include_router(router, dependencies=[create_dependency(\"router2\")])\n+app.include_router(\n+    prefix_router, prefix=\"/prefix\", dependencies=[create_dependency(\"prefix_router2\")]\n+)\n+\n+\n+def test_index():\n+    client = TestClient(app)\n+    with client.websocket_connect(\"/\") as websocket:\n+        data = json.loads(websocket.receive_text())\n+        assert data == [\"app\", \"index\"]\n+\n+\n+def test_routerindex():\n+    client = TestClient(app)\n+    with client.websocket_connect(\"/router\") as websocket:\n+        data = json.loads(websocket.receive_text())\n+        assert data == [\"app\", \"router2\", \"router\", \"routerindex\"]\n+\n+\n+def test_routerprefixindex():\n+    client = TestClient(app)\n+    with client.websocket_connect(\"/prefix/\") as websocket:\n+        data = json.loads(websocket.receive_text())\n+        assert data == [\"app\", \"prefix_router2\", \"prefix_router\", \"routerprefixindex\"]\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#17e49bc9f75d9f596eb3fea42a3f51f3a716475c", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 0 | Lines Deleted: 3 | Files Changed: 1 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): -1/0 | Churn Δ: 3 | Churn Cumulative: 31 | Contributors (this commit): 1 | Commits (past 90d): 1 | Contributors (cumulative): 1 | DMM Complexity: 0.0\n\nDIFF:\n@@ -10,7 +10,6 @@ class AsyncExitStackMiddleware:\n         self.context_name = context_name\n \n     async def __call__(self, scope: Scope, receive: Receive, send: Send) -> None:\n-        if AsyncExitStack:\n         dependency_exception: Optional[Exception] = None\n         async with AsyncExitStack() as stack:\n             scope[self.context_name] = stack\n@@ -24,5 +23,3 @@ class AsyncExitStackMiddleware:\n             # still bubble up so that the ServerErrorMiddleware can return a 500\n             # or the ExceptionMiddleware can catch and handle any other exceptions\n             raise dependency_exception\n-        else:\n-            await self.app(scope, receive, send)  # pragma: no cover\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#4ac55af283457d7279711224c5f9a3810d4d6534", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 29 | Lines Deleted: 13 | Files Changed: 3 | Hunks: 14 | Methods Changed: 4 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 42 | Churn Cumulative: 1578 | Contributors (this commit): 20 | Commits (past 90d): 4 | Contributors (cumulative): 26 | DMM Complexity: 1.0\n\nDIFF:\n@@ -3,6 +3,7 @@ from typing import Any, Callable, Dict, Iterable, List, Optional, Union\n \n from fastapi.logger import logger\n from pydantic import AnyUrl, BaseModel, Field\n+from typing_extensions import Literal\n \n try:\n     import email_validator  # type: ignore\n@@ -298,18 +299,18 @@ class APIKeyIn(Enum):\n \n \n class APIKey(SecurityBase):\n-    type_ = Field(SecuritySchemeType.apiKey, alias=\"type\")\n+    type_: SecuritySchemeType = Field(default=SecuritySchemeType.apiKey, alias=\"type\")\n     in_: APIKeyIn = Field(alias=\"in\")\n     name: str\n \n \n class HTTPBase(SecurityBase):\n-    type_ = Field(SecuritySchemeType.http, alias=\"type\")\n+    type_: SecuritySchemeType = Field(default=SecuritySchemeType.http, alias=\"type\")\n     scheme: str\n \n \n class HTTPBearer(HTTPBase):\n-    scheme = \"bearer\"\n+    scheme: Literal[\"bearer\"] = \"bearer\"\n     bearerFormat: Optional[str] = None\n \n \n@@ -349,12 +350,14 @@ class OAuthFlows(BaseModel):\n \n \n class OAuth2(SecurityBase):\n-    type_ = Field(SecuritySchemeType.oauth2, alias=\"type\")\n+    type_: SecuritySchemeType = Field(default=SecuritySchemeType.oauth2, alias=\"type\")\n     flows: OAuthFlows\n \n \n class OpenIdConnect(SecurityBase):\n-    type_ = Field(SecuritySchemeType.openIdConnect, alias=\"type\")\n+    type_: SecuritySchemeType = Field(\n+        default=SecuritySchemeType.openIdConnect, alias=\"type\"\n+    )\n     openIdConnectUrl: str\n \n \n\n@@ -21,7 +21,9 @@ class APIKeyQuery(APIKeyBase):\n         auto_error: bool = True,\n     ):\n         self.model: APIKey = APIKey(\n-            **{\"in\": APIKeyIn.query}, name=name, description=description\n+            **{\"in\": APIKeyIn.query},  # type: ignore[arg-type]\n+            name=name,\n+            description=description,\n         )\n         self.scheme_name = scheme_name or self.__class__.__name__\n         self.auto_error = auto_error\n@@ -48,7 +50,9 @@ class APIKeyHeader(APIKeyBase):\n         auto_error: bool = True,\n     ):\n         self.model: APIKey = APIKey(\n-            **{\"in\": APIKeyIn.header}, name=name, description=description\n+            **{\"in\": APIKeyIn.header},  # type: ignore[arg-type]\n+            name=name,\n+            description=description,\n         )\n         self.scheme_name = scheme_name or self.__class__.__name__\n         self.auto_error = auto_error\n@@ -75,7 +79,9 @@ class APIKeyCookie(APIKeyBase):\n         auto_error: bool = True,\n     ):\n         self.model: APIKey = APIKey(\n-            **{\"in\": APIKeyIn.cookie}, name=name, description=description\n+            **{\"in\": APIKeyIn.cookie},  # type: ignore[arg-type]\n+            name=name,\n+            description=description,\n         )\n         self.scheme_name = scheme_name or self.__class__.__name__\n         self.auto_error = auto_error\n\n@@ -1,4 +1,4 @@\n-from typing import Any, Dict, List, Optional, Union\n+from typing import Any, Dict, List, Optional, Union, cast\n \n from fastapi.exceptions import HTTPException\n from fastapi.openapi.models import OAuth2 as OAuth2Model\n@@ -121,7 +121,9 @@ class OAuth2(SecurityBase):\n         description: Optional[str] = None,\n         auto_error: bool = True,\n     ):\n-        self.model = OAuth2Model(flows=flows, description=description)\n+        self.model = OAuth2Model(\n+            flows=cast(OAuthFlowsModel, flows), description=description\n+        )\n         self.scheme_name = scheme_name or self.__class__.__name__\n         self.auto_error = auto_error\n \n@@ -148,7 +150,9 @@ class OAuth2PasswordBearer(OAuth2):\n     ):\n         if not scopes:\n             scopes = {}\n-        flows = OAuthFlowsModel(password={\"tokenUrl\": tokenUrl, \"scopes\": scopes})\n+        flows = OAuthFlowsModel(\n+            password=cast(Any, {\"tokenUrl\": tokenUrl, \"scopes\": scopes})\n+        )\n         super().__init__(\n             flows=flows,\n             scheme_name=scheme_name,\n@@ -185,12 +189,15 @@ class OAuth2AuthorizationCodeBearer(OAuth2):\n         if not scopes:\n             scopes = {}\n         flows = OAuthFlowsModel(\n-            authorizationCode={\n+            authorizationCode=cast(\n+                Any,\n+                {\n                     \"authorizationUrl\": authorizationUrl,\n                     \"tokenUrl\": tokenUrl,\n                     \"refreshUrl\": refreshUrl,\n                     \"scopes\": scopes,\n-            }\n+                },\n+            )\n         )\n         super().__init__(\n             flows=flows,\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#7167c77a18627c69fae2063cb987048ffc0a5633", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 12 | Lines Deleted: 8 | Files Changed: 3 | Hunks: 10 | Methods Changed: 4 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 20 | Churn Cumulative: 6149 | Contributors (this commit): 55 | Commits (past 90d): 6 | Contributors (cumulative): 69 | DMM Complexity: 1.0\n\nDIFF:\n@@ -181,7 +181,7 @@ def get_openapi_operation_metadata(\n         file_name = getattr(route.endpoint, \"__globals__\", {}).get(\"__file__\")\n         if file_name:\n             message += f\" at {file_name}\"\n-        warnings.warn(message)\n+        warnings.warn(message, stacklevel=1)\n     operation_ids.add(operation_id)\n     operation[\"operationId\"] = operation_id\n     if route.deprecated:\n@@ -332,10 +332,8 @@ def get_openapi_path(\n                     openapi_response[\"description\"] = description\n             http422 = str(HTTP_422_UNPROCESSABLE_ENTITY)\n             if (all_route_params or route.body_field) and not any(\n-                [\n                 status in operation[\"responses\"]\n                 for status in [http422, \"4XX\", \"default\"]\n-                ]\n             ):\n                 operation[\"responses\"][http422] = {\n                     \"description\": \"Validation Error\",\n\n@@ -30,7 +30,11 @@ from fastapi.dependencies.utils import (\n     solve_dependencies,\n )\n from fastapi.encoders import DictIntStrAny, SetIntStr, jsonable_encoder\n-from fastapi.exceptions import RequestValidationError, WebSocketRequestValidationError\n+from fastapi.exceptions import (\n+    FastAPIError,\n+    RequestValidationError,\n+    WebSocketRequestValidationError,\n+)\n from fastapi.types import DecoratedCallable\n from fastapi.utils import (\n     create_cloned_field,\n@@ -48,14 +52,15 @@ from starlette.concurrency import run_in_threadpool\n from starlette.exceptions import HTTPException\n from starlette.requests import Request\n from starlette.responses import JSONResponse, Response\n-from starlette.routing import BaseRoute, Match\n-from starlette.routing import Mount as Mount  # noqa\n from starlette.routing import (\n+    BaseRoute,\n+    Match,\n     compile_path,\n     get_name,\n     request_response,\n     websocket_session,\n )\n+from starlette.routing import Mount as Mount  # noqa\n from starlette.types import ASGIApp, Lifespan, Scope\n from starlette.websockets import WebSocket\n \n@@ -763,7 +768,7 @@ class APIRouter(routing.Router):\n                 path = getattr(r, \"path\")  # noqa: B009\n                 name = getattr(r, \"name\", \"unknown\")\n                 if path is not None and not path:\n-                    raise Exception(\n+                    raise FastAPIError(\n                         f\"Prefix and path cannot be both empty (path operation: {name})\"\n                     )\n         if responses is None:\n\n@@ -1,5 +1,6 @@\n import pytest\n from fastapi import APIRouter, FastAPI\n+from fastapi.exceptions import FastAPIError\n from fastapi.testclient import TestClient\n \n app = FastAPI()\n@@ -31,5 +32,5 @@ def test_use_empty():\n \n def test_include_empty():\n     # if both include and router.path are empty - it should raise exception\n-    with pytest.raises(Exception):\n+    with pytest.raises(FastAPIError):\n         app.include_router(router)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#32935103b12b1548117abef0b4af9dd883898308", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 421 | Contributors (this commit): 2 | Commits (past 90d): 7 | Contributors (cumulative): 2 | DMM Complexity: None\n\nDIFF:\n@@ -1,6 +1,6 @@\n \"\"\"FastAPI framework, high performance, easy to learn, fast to code, ready for production\"\"\"\n \n-__version__ = \"0.96.1\"\n+__version__ = \"0.97.0\"\n \n from starlette import status as status\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#e94c13ce74990eb682aead3fd976df45beee93d6", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 42 | Lines Deleted: 0 | Files Changed: 2 | Hunks: 3 | Methods Changed: 5 | Complexity Δ (Sum/Max): 4/4 | Churn Δ: 42 | Churn Cumulative: 3197 | Contributors (this commit): 30 | Commits (past 90d): 4 | Contributors (cumulative): 31 | DMM Complexity: 0.9285714285714286\n\nDIFF:\n@@ -62,6 +62,7 @@ class FastAPI(Starlette):\n         servers: Optional[List[Dict[str, Union[str, Any]]]] = None,\n         dependencies: Optional[Sequence[Depends]] = None,\n         default_response_class: Type[Response] = Default(JSONResponse),\n+        redirect_slashes: bool = True,\n         docs_url: Optional[str] = \"/docs\",\n         redoc_url: Optional[str] = \"/redoc\",\n         swagger_ui_oauth2_redirect_url: Optional[str] = \"/docs/oauth2-redirect\",\n@@ -127,6 +128,7 @@ class FastAPI(Starlette):\n         self.dependency_overrides: Dict[Callable[..., Any], Callable[..., Any]] = {}\n         self.router: routing.APIRouter = routing.APIRouter(\n             routes=routes,\n+            redirect_slashes=redirect_slashes,\n             dependency_overrides_provider=self,\n             on_startup=on_startup,\n             on_shutdown=on_shutdown,\n\n@@ -0,0 +1,40 @@\n+from fastapi import APIRouter, FastAPI\n+from fastapi.testclient import TestClient\n+\n+\n+def test_redirect_slashes_enabled():\n+    app = FastAPI()\n+    router = APIRouter()\n+\n+    @router.get(\"/hello/\")\n+    def hello_page() -> str:\n+        return \"Hello, World!\"\n+\n+    app.include_router(router)\n+\n+    client = TestClient(app)\n+\n+    response = client.get(\"/hello/\", follow_redirects=False)\n+    assert response.status_code == 200\n+\n+    response = client.get(\"/hello\", follow_redirects=False)\n+    assert response.status_code == 307\n+\n+\n+def test_redirect_slashes_disabled():\n+    app = FastAPI(redirect_slashes=False)\n+    router = APIRouter()\n+\n+    @router.get(\"/hello/\")\n+    def hello_page() -> str:\n+        return \"Hello, World!\"\n+\n+    app.include_router(router)\n+\n+    client = TestClient(app)\n+\n+    response = client.get(\"/hello/\", follow_redirects=False)\n+    assert response.status_code == 200\n+\n+    response = client.get(\"/hello\", follow_redirects=False)\n+    assert response.status_code == 404\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
