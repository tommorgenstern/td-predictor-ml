{"custom_id": "requests#8c81cf64deb2a310fbd74c15fd1f70a6e1a6241d", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 22 | Lines Deleted: 14 | Files Changed: 1 | Hunks: 3 | Methods Changed: 5 | Complexity Δ (Sum/Max): 3/3 | Churn Δ: 36 | Churn Cumulative: 668 | Contributors (this commit): 7 | Commits (past 90d): 26 | Contributors (cumulative): 7 | DMM Complexity: 1.0\n\nDIFF:\n@@ -15,6 +15,8 @@ import requests\n HTTPBIN_URL = 'http://httpbin.org/'\n HTTPSBIN_URL = 'https://httpbin.ep.io/'\n \n+# HTTPBIN_URL = 'http://staging.httpbin.org/'\n+# HTTPSBIN_URL = 'https://httpbin-staging.ep.io/'\n \n \n def httpbin(*suffix):\n@@ -103,6 +105,26 @@ class RequestsTestSuite(unittest.TestCase):\n         self.assertEqual(r.status_code, 200)\n \n \n+    def test_HTTP_200_OK_PUT(self):\n+        r = requests.put(httpbin('put'))\n+        self.assertEqual(r.status_code, 200)\n+\n+\n+    def test_HTTPS_200_OK_PUT(self):\n+        r = requests.put(httpsbin('put'))\n+        self.assertEqual(r.status_code, 200)\n+\n+\n+    def test_HTTP_200_OK_PATCH(self):\n+        r = requests.patch(httpbin('patch'))\n+        self.assertEqual(r.status_code, 200)\n+\n+\n+    def test_HTTPS_200_OK_PATCH(self):\n+        r = requests.patch(httpsbin('patch'))\n+        self.assertEqual(r.status_code, 200)\n+\n+\n     def test_AUTH_HTTPS_200_OK_GET(self):\n         auth = ('user', 'pass')\n         url = httpsbin('basic-auth', 'user', 'pass')\n@@ -131,20 +153,6 @@ class RequestsTestSuite(unittest.TestCase):\n         self.assertEqual(post3.status_code, 200)\n \n \n-    def test_POSTBIN_GET_PATCH_FILES(self):\n-        url = httpbin('patch')\n-        patch = requests.patch(url).raise_for_status()\n-\n-        patch = requests.post(url, data={'some': 'data'})\n-        self.assertEqual(patch.status_code, 200)\n-\n-        patch2 = requests.post(url, files={'some': open('test_requests.py')})\n-        self.assertEqual(patch2.status_code, 200)\n-\n-        patch3 = requests.post(url, data='[{\"some\": \"json\"}]')\n-        self.assertEqual(patch3.status_code, 200)\n-\n-\n     def test_POSTBIN_GET_POST_FILES_WITH_PARAMS(self):\n \n         url = httpbin('post')\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#b4a4f38ccecba498085d3d0bb38463aac3b79419", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 108 | Contributors (this commit): 1 | Commits (past 90d): 5 | Contributors (cumulative): 1 | DMM Complexity: None\n\nDIFF:\n@@ -12,7 +12,7 @@ class Settings(object):\n     _singleton = {}\n \n     # attributes with defaults\n-    __attrs__ = ('timeout',)\n+    __attrs__ = ('timeout', 'verbose')\n \n     def __init__(self, **kwargs):\n         super(Settings, self).__init__()\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#b4eac4c993219626ed96fcc0d5191c2cac6c8c0d", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 17 | Lines Deleted: 4 | Files Changed: 2 | Hunks: 10 | Methods Changed: 2 | Complexity Δ (Sum/Max): 2/2 | Churn Δ: 21 | Churn Cumulative: 864 | Contributors (this commit): 4 | Commits (past 90d): 24 | Contributors (cumulative): 5 | DMM Complexity: 0.0\n\nDIFF:\n@@ -6,7 +6,6 @@ requests.models\n \n \"\"\"\n \n-import requests\n import urllib\n import urllib2\n import socket\n@@ -14,7 +13,9 @@ import zlib\n \n from urllib2 import HTTPError\n from urlparse import urlparse\n+from datetime import datetime\n \n+from .config import settings\n from .monkeys import Request as _Request, HTTPBasicAuthHandler, HTTPDigestAuthHandler, HTTPRedirectHandler\n from .structures import CaseInsensitiveDict\n from .packages.poster.encode import multipart_encode\n@@ -22,6 +23,8 @@ from .packages.poster.streaminghttp import register_openers, get_handlers\n from .exceptions import RequestException, AuthenticationError, Timeout, URLRequired, InvalidMethod\n \n \n+REDIRECT_STATI = (301, 302, 303, 307)\n+\n \n class Request(object):\n     \"\"\"The :class:`Request <models.Request>` object. It carries out all functionality of\n@@ -169,6 +172,9 @@ class Request(object):\n \n         r = build(resp)\n \n+        if r.status_code in REDIRECT_STATI:\n+            self.redirect = True\n+\n         if self.redirect:\n \n             while (\n@@ -182,7 +188,7 @@ class Request(object):\n \n                 url = r.headers['location']\n \n-                # Facilitate for non-RFC2616-compliant 'location' headers\n+                # Facilitate non-RFC2616-compliant 'location' headers\n                 # (e.g. '/path/to/resource' instead of 'http://domain.tld/path/to/resource')\n                 if not urlparse(url).netloc:\n                     parent_url_components = urlparse(self.url)\n@@ -197,7 +203,7 @@ class Request(object):\n                 request = Request(\n                     url, self.headers, self.files, method,\n                     self.data, self.params, self.auth, self.cookiejar,\n-                    redirect=False\n+                    redirect=True\n                 )\n                 request.send()\n                 r = request.response\n@@ -254,6 +260,13 @@ class Request(object):\n         self._checks()\n         success = False\n \n+        # Logging\n+        if settings.verbose:\n+            settings.verbose.write('%s   %s   %s\\n' % (\n+                datetime.now().isoformat(), self.method, self.url\n+            ))\n+\n+\n         url = self._build_url()\n         if self.method in ('GET', 'HEAD', 'DELETE'):\n             req = _Request(url, method=self.method)\n@@ -302,6 +315,7 @@ class Request(object):\n \n         self.sent = self.response.ok\n \n+\n         return self.sent\n \n \n\n@@ -26,7 +26,6 @@ class Request(urllib2.Request):\n \n         return urllib2.Request.get_method(self)\n \n-\n class HTTPRedirectHandler(urllib2.HTTPRedirectHandler):\n \n     def http_error_301(self, req, fp, code, msg, headers):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#20aed5488b117d82abc4a22cdb6585d06a02a70f", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 2629 | Contributors (this commit): 7 | Commits (past 90d): 28 | Contributors (cumulative): 7 | DMM Complexity: None\n\nDIFF:\n@@ -12,8 +12,8 @@ This module implements the main Requests system.\n \"\"\"\n \n __title__ = 'requests'\n-__version__ = '0.4.1'\n-__build__ = 0x000401\n+__version__ = '0.5.0'\n+__build__ = 0x000500\n __author__ = 'Kenneth Reitz'\n __license__ = 'ISC'\n __copyright__ = 'Copyright 2011 Kenneth Reitz'\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#162b751f6db97c1c3ae4fea4af4d75f89b2ec698", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 11 | Lines Deleted: 6 | Files Changed: 2 | Hunks: 4 | Methods Changed: 3 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 17 | Churn Cumulative: 1431 | Contributors (this commit): 8 | Commits (past 90d): 47 | Contributors (cumulative): 11 | DMM Complexity: 0.8\n\nDIFF:\n@@ -296,15 +296,15 @@ class Request(object):\n                 if self.cookiejar is not None:\n                     self.cookiejar.extract_cookies(resp, req)\n \n-            except urllib2.HTTPError, why:\n+            except (urllib2.HTTPError, urllib2.URLError), why:\n+                if hasattr(why, 'reason'):\n+                    if isinstance(why.reason, socket.timeout):\n+                        why = Timeout(why)\n+\n                 self._build_response(why)\n                 if not self.redirect:\n                     self.response.error = why\n \n-            # TODO: Support urllib connection refused errors\n-\n-            except urllib2.URLError, error:\n-                raise Timeout if isinstance(error.reason, socket.timeout) else error\n             else:\n                 self._build_response(resp)\n                 self.response.ok = True\n\n@@ -246,8 +246,13 @@ class RequestsTestSuite(unittest.TestCase):\n \n \n     def test_settings(self):\n+\n+        def test():\n+            r = requests.get(httpbin(''))\n+            r.raise_for_status()\n+\n         with requests.settings(timeout=0.0000001):\n-            self.assertRaises(requests.Timeout, requests.get, httpbin(''))\n+            self.assertRaises(requests.Timeout, test)\n \n         with requests.settings(timeout=100):\n             requests.get(httpbin(''))\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#8521075868820f838e670df9d8fb46e249757db2", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 88 | Contributors (this commit): 2 | Commits (past 90d): 5 | Contributors (cumulative): 2 | DMM Complexity: None\n\nDIFF:\n@@ -28,7 +28,7 @@ if sys.version_info[:2] < (2,6):\n setup(\n     name='requests',\n     version=requests.__version__,\n-    description='Awesome Python HTTP Library that\\'s actually usable.',\n+    description='Python HTTP for Humans.',\n     long_description=open('README.rst').read() + '\\n\\n' +\n                      open('HISTORY.rst').read(),\n     author='Kenneth Reitz',\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#39edf7a7fad2e799cc9129bcf3d2ba33df0cc507", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 758 | Contributors (this commit): 4 | Commits (past 90d): 21 | Contributors (cumulative): 4 | DMM Complexity: None\n\nDIFF:\n@@ -366,7 +366,7 @@ class Response(object):\n \n \n     def raise_for_status(self):\n-        \"\"\"Raises stored :class:`HTTPError`, if one occured.\"\"\"\n+        \"\"\"Raises stored :class:`HTTPError` or :class:`URLError`, if one occured.\"\"\"\n         if self.error:\n             raise self.error\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#868cd3d1cb86cf1b657e16dd00aa66d3ceb7fc1e", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 8 | Lines Deleted: 1 | Files Changed: 2 | Hunks: 3 | Methods Changed: 2 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 9 | Churn Cumulative: 1442 | Contributors (this commit): 9 | Commits (past 90d): 50 | Contributors (cumulative): 13 | DMM Complexity: 1.0\n\nDIFF:\n@@ -12,7 +12,7 @@ import socket\n import zlib\n \n from urllib2 import HTTPError\n-from urlparse import urlparse\n+from urlparse import urlparse, urlunparse\n from datetime import datetime\n \n from .config import settings\n@@ -238,6 +238,10 @@ class Request(object):\n     def _build_url(self):\n         \"\"\"Build the actual URL to use\"\"\"\n \n+        parsed_url = list(urlparse(self.url))\n+        parsed_url[1] = parsed_url[1].encode('idna')\n+        self.url = urlunparse(parsed_url)\n+\n         if self._enc_params:\n             if urlparse(self.url).query:\n                 return '%s&%s' % (self.url, self._enc_params)\n\n@@ -321,6 +321,9 @@ class RequestsTestSuite(unittest.TestCase):\n         self.assertEquals(rbody.get('form'), None)\n         self.assertEquals(rbody.get('data'), 'foobar')\n \n+    def test_idna(self):\n+        r = requests.get(u'http://➡.ws/httpbin')\n+        self.assertEqual(r.url, HTTPBIN_URL)\n \n \n if __name__ == '__main__':\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#6f08c816981b0ba29f2c8a490f137fa194df353c", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 1 | Churn Cumulative: 765 | Contributors (this commit): 5 | Commits (past 90d): 23 | Contributors (cumulative): 5 | DMM Complexity: None\n\nDIFF:\n@@ -238,6 +238,7 @@ class Request(object):\n     def _build_url(self):\n         \"\"\"Build the actual URL to use\"\"\"\n \n+        # Support for unicode domain names.\n         parsed_url = list(urlparse(self.url))\n         parsed_url[1] = parsed_url[1].encode('idna')\n         self.url = urlunparse(parsed_url)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#d2ff0f40eb55ea572794daf286e74833ca773d59", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 767 | Contributors (this commit): 6 | Commits (past 90d): 24 | Contributors (cumulative): 6 | DMM Complexity: None\n\nDIFF:\n@@ -230,7 +230,7 @@ class Request(object):\n             for (k, v) in data.items():\n                 result[k.encode('utf-8') if isinstance(k, unicode) else k] \\\n                      = v.encode('utf-8') if isinstance(v, unicode) else v\n-            return result, urllib.urlencode(result)\n+            return result, urllib.urlencode(result, doseq=True)\n         else:\n             return data, data\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#891e52d72348d3bb2e5dfc243076992320b65f5d", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 17 | Lines Deleted: 20 | Files Changed: 1 | Hunks: 6 | Methods Changed: 5 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 37 | Churn Cumulative: 804 | Contributors (this commit): 6 | Commits (past 90d): 25 | Contributors (cumulative): 6 | DMM Complexity: 1.0\n\nDIFF:\n@@ -151,18 +151,11 @@ class Request(object):\n \n             try:\n                 response.headers = CaseInsensitiveDict(getattr(resp.info(), 'dict', None))\n-                response.content = resp.read()\n+                response.read = resp.read\n+                response.close = resp.close\n             except AttributeError:\n                 pass\n \n-            if response.headers['content-encoding'] == 'gzip':\n-                try:\n-                    response.content = zlib.decompress(response.content, 16+zlib.MAX_WBITS)\n-                except zlib.error:\n-                    pass\n-\n-            # TODO: Support deflate\n-\n             response.url = getattr(resp, 'url', None)\n \n             return response\n@@ -324,10 +317,6 @@ class Request(object):\n         return self.sent\n \n \n-    def read(self, *args):\n-        return self.response.read()\n-\n-\n \n class Response(object):\n     \"\"\"The core :class:`Response <models.Response>` object. All\n@@ -340,7 +329,7 @@ class Response(object):\n         #: Raw content of the response, in bytes.\n         #: If ``content-encoding`` of response was set to ``gzip``, the\n         #: response data will be automatically deflated.\n-        self.content = None\n+        self._content = None\n         #: Integer Code of responded HTTP Status.\n         self.status_code = None\n         #: Case-insensitive Dictionary of Response Headers.\n@@ -370,17 +359,25 @@ class Response(object):\n         return not self.error\n \n \n+    def __getattr__(self, name):\n+        \"\"\"Read and returns the full stream when accessing to :attr: `content`\"\"\"\n+        if name == 'content':\n+            if self._content is not None:\n+                return self._content\n+            self._content = self.read()\n+            if self.headers.get('content-encoding', '') == 'gzip':\n+                try:\n+                    self._content = zlib.decompress(self._content, 16+zlib.MAX_WBITS)\n+                except zlib.error:\n+                    pass\n+            return self._content\n+\n+\n     def raise_for_status(self):\n         \"\"\"Raises stored :class:`HTTPError` or :class:`URLError`, if one occured.\"\"\"\n         if self.error:\n             raise self.error\n \n-    def read(self, *args):\n-        \"\"\"Returns :attr:`content`. Used for file-like object compatiblity.\"\"\"\n-\n-        return self.content\n-\n-\n \n class AuthManager(object):\n     \"\"\"Requests Authentication Manager.\"\"\"\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#73b414ab4564486f2335f02a1727fd0f4d005608", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 31 | Lines Deleted: 6 | Files Changed: 2 | Hunks: 3 | Methods Changed: 4 | Complexity Δ (Sum/Max): 6/3 | Churn Δ: 37 | Churn Cumulative: 1519 | Contributors (this commit): 11 | Commits (past 90d): 54 | Contributors (cumulative): 16 | DMM Complexity: 0.5454545454545454\n\nDIFF:\n@@ -211,18 +211,19 @@ class Request(object):\n         \"\"\"Encode parameters in a piece of data.\n \n         If the data supplied is a dictionary, encodes each parameter in it, and\n-        returns the dictionary of encoded parameters, and a urlencoded version\n-        of that.\n+        returns a list of tuples containing the encoded parameters, and a urlencoded\n+        version of that.\n \n         Otherwise, assumes the data is already encoded appropriately, and\n         returns it twice.\n \n         \"\"\"\n         if hasattr(data, 'items'):\n-            result = {}\n-            for (k, v) in data.items():\n-                result[k.encode('utf-8') if isinstance(k, unicode) else k] \\\n-                     = v.encode('utf-8') if isinstance(v, unicode) else v\n+            result = []\n+            for k, vs in data.items():\n+                for v in isinstance(vs, list) and vs or [vs]:\n+                    result.append((k.encode('utf-8') if isinstance(k, unicode) else k,\n+                                   v.encode('utf-8') if isinstance(v, unicode) else v))\n             return result, urllib.urlencode(result, doseq=True)\n         else:\n             return data, data\n\n@@ -325,6 +325,30 @@ class RequestsTestSuite(unittest.TestCase):\n         r = requests.get(u'http://➡.ws/httpbin')\n         self.assertEqual(r.url, HTTPBIN_URL)\n \n+    def test_urlencoded_get_query_multivalued_param(self):\n+        r = requests.get(httpbin('get'), params=dict(test=['foo','baz']))\n+        self.assertEquals(r.status_code, 200)\n+        self.assertEquals(r.url, httpbin('get?test=foo&test=baz'))\n+\n+    def test_urlencoded_post_querystring_multivalued(self):\n+        r = requests.post(httpbin('post'), params=dict(test=['foo','baz']))\n+        self.assertEquals(r.status_code, 200)\n+        self.assertEquals(r.headers['content-type'], 'application/json')\n+        self.assertEquals(r.url, httpbin('post?test=foo&test=baz'))\n+        rbody = json.loads(r.content)\n+        self.assertEquals(rbody.get('form'), {}) # No form supplied\n+        self.assertEquals(rbody.get('data'), '')\n+\n+    def test_urlencoded_post_query_multivalued_and_data(self):\n+        r = requests.post(httpbin('post'), params=dict(test=['foo','baz']),\n+                          data=dict(test2=\"foobar\",test3=['foo','baz']))\n+        self.assertEquals(r.status_code, 200)\n+        self.assertEquals(r.headers['content-type'], 'application/json')\n+        self.assertEquals(r.url, httpbin('post?test=foo&test=baz'))\n+        rbody = json.loads(r.content)\n+        self.assertEquals(rbody.get('form'), dict(test2='foobar',test3='foo'))\n+        self.assertEquals(rbody.get('data'), '')\n+\n \n if __name__ == '__main__':\n     unittest.main()\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#f408829d516614c813a59621bfec9b09a6251da4", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 3 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 2 | Methods Changed: 0 | Complexity Δ (Sum/Max): -3/0 | Churn Δ: 3 | Churn Cumulative: 705 | Contributors (this commit): 10 | Commits (past 90d): 27 | Contributors (cumulative): 10 | DMM Complexity: None\n\nDIFF:\n@@ -6,7 +6,10 @@ from __future__ import with_statement\n import unittest\n import cookielib\n \n+try:\n     import omnijson as json\n+except ImportError:\n+    import simplejson as json\n \n import requests\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#04c456b8775a2560d0fffad445745793929a82f0", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 25 | Lines Deleted: 6 | Files Changed: 1 | Hunks: 5 | Methods Changed: 8 | Complexity Δ (Sum/Max): 9/9 | Churn Δ: 31 | Churn Cumulative: 857 | Contributors (this commit): 3 | Commits (past 90d): 6 | Contributors (cumulative): 3 | DMM Complexity: 1.0\n\nDIFF:\n@@ -9,20 +9,39 @@ Datastructures that power Requests.\n \"\"\"\n \n class CaseInsensitiveDict(dict):\n-    \"\"\"Case-insensitive Dictionary for :class:`Response <models.Response>` Headers.\n+    \"\"\"Case-insensitive Dictionary\n \n     For example, ``headers['content-encoding']`` will return the\n     value of a ``'Content-Encoding'`` response header.\"\"\"\n \n-    def _lower_keys(self):\n-        return map(str.lower, self.keys())\n+    @property\n+    def lower_keys(self):\n+        if not hasattr(self, '_lower_keys') or not self._lower_keys:\n+            self._lower_keys = dict((k.lower(), k) for k in self.iterkeys())\n+        return self._lower_keys\n \n+    def _clear_lower_keys(self):\n+        if hasattr(self, '_lower_keys'):\n+            self._lower_keys.clear()\n+\n+    def __setitem__(self, key, value):\n+        dict.__setitem__(self, key, value)\n+        self._clear_lower_keys()\n+\n+    def __delitem__(self, key):\n+        dict.__delitem__(self, key, value)\n+        self._lower_keys.clear()\n \n     def __contains__(self, key):\n-        return key.lower() in self._lower_keys()\n-\n+        return key.lower() in self.lower_keys\n \n     def __getitem__(self, key):\n         # We allow fall-through here, so values default to None\n         if key in self:\n-            return self.items()[self._lower_keys().index(key.lower())][1]\n+            return dict.__getitem__(self, self.lower_keys[key.lower()])\n+\n+    def get(self, key, default=None):\n+        if key in self:\n+            return self[key]\n+        else:\n+            return default\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#747f882b0e99f7d70e08acef78e517df93085c58", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 859 | Contributors (this commit): 3 | Commits (past 90d): 7 | Contributors (cumulative): 3 | DMM Complexity: None\n\nDIFF:\n@@ -29,7 +29,7 @@ class CaseInsensitiveDict(dict):\n         self._clear_lower_keys()\n \n     def __delitem__(self, key):\n-        dict.__delitem__(self, key, value)\n+        dict.__delitem__(self, key)\n         self._lower_keys.clear()\n \n     def __contains__(self, key):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#7d91d3fb5c8c826f4972db36c27384fc0e6550b9", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): -3/0 | Churn Δ: 2 | Churn Cumulative: 819 | Contributors (this commit): 7 | Commits (past 90d): 27 | Contributors (cumulative): 7 | DMM Complexity: None\n\nDIFF:\n@@ -545,6 +545,6 @@ class AuthObject(object):\n         self.realm = realm\n \n         if isinstance(handler, basestring):\n-            self.handler = self._handlers.get(handler.lower(), urllib2.HTTPBasicAuthHandler)\n+            self.handler = self._handlers.get(handler.lower(), HTTPBasicAuthHandler)\n         else:\n             self.handler = handler\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#30d699b64fbf298881c0de88cd6b727b1972538a", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 59 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 7 | Methods Changed: 3 | Complexity Δ (Sum/Max): 11/11 | Churn Δ: 61 | Churn Cumulative: 179 | Contributors (this commit): 1 | Commits (past 90d): 6 | Contributors (cumulative): 1 | DMM Complexity: 0.25\n\nDIFF:\n@@ -9,7 +9,7 @@ Urllib2 Monkey patches.\n \"\"\"\n \n import urllib2\n-\n+import re\n \n class Request(urllib2.Request):\n     \"\"\"Hidden wrapper around the urllib2.Request object. Allows for manual\n@@ -26,8 +26,9 @@ class Request(urllib2.Request):\n \n         return urllib2.Request.get_method(self)\n \n-class HTTPRedirectHandler(urllib2.HTTPRedirectHandler):\n \n+class HTTPRedirectHandler(urllib2.HTTPRedirectHandler):\n+    \"\"\"HTTP Redirect handler.\"\"\"\n     def http_error_301(self, req, fp, code, msg, headers):\n         pass\n \n@@ -36,17 +37,20 @@ class HTTPRedirectHandler(urllib2.HTTPRedirectHandler):\n \n \n class HTTPBasicAuthHandler(urllib2.HTTPBasicAuthHandler):\n+    \"\"\"HTTP Basic Auth Handler with authentication loop fixes.\"\"\"\n \n     def __init__(self, *args, **kwargs):\n         urllib2.HTTPBasicAuthHandler.__init__(self, *args, **kwargs)\n         self.retried_req = None\n \n+\n     def reset_retry_count(self):\n         # Python 2.6.5 will call this on 401 or 407 errors and thus loop\n         # forever. We disable reset_retry_count completely and reset in\n         # http_error_auth_reqed instead.\n         pass\n \n+\n     def http_error_auth_reqed(self, auth_header, host, req, headers):\n         # Reset the retry counter once for each request.\n         if req is not self.retried_req:\n@@ -59,6 +63,59 @@ class HTTPBasicAuthHandler(urllib2.HTTPBasicAuthHandler):\n \n \n \n+class HTTPForcedBasicAuthHandler(HTTPBasicAuthHandler):\n+    \"\"\"HTTP Basic Auth Handler with forced Authentication.\"\"\"\n+\n+    auth_header = 'Authorization'\n+    rx = re.compile('(?:.*,)*[ \\t]*([^ \\t]+)[ \\t]+'\n+                    'realm=([\"\\'])(.*?)\\\\2', re.I)\n+\n+    def __init__(self,  *args, **kwargs):\n+        HTTPBasicAuthHandler.__init__(self, *args, **kwargs)\n+\n+\n+    def http_error_401(self, req, fp, code, msg, headers):\n+        url = req.get_full_url()\n+        response = self._http_error_auth_reqed('www-authenticate', url, req, headers)\n+        self.reset_retry_count()\n+        return response\n+\n+    http_error_404 = http_error_401\n+\n+\n+    def _http_error_auth_reqed(self, authreq, host, req, headers):\n+\n+        authreq = headers.get(authreq, None)\n+\n+        if self.retried > 5:\n+            # retry sending the username:password 5 times before failing.\n+            raise urllib2.HTTPError(req.get_full_url(), 401, \"basic auth failed\",\n+                            headers, None)\n+        else:\n+            self.retried += 1\n+\n+        if authreq:\n+\n+            mo = self.rx.search(authreq)\n+\n+            if mo:\n+                scheme, quote, realm = mo.groups()\n+\n+                if scheme.lower() == 'basic':\n+                    response = self.retry_http_basic_auth(host, req, realm)\n+\n+                    if response and response.code not in (401, 404):\n+                        self.retried = 0\n+                    return response\n+        else:\n+            response = self.retry_http_basic_auth(host, req, 'Realm')\n+\n+            if response and response.code not in (401, 404):\n+                self.retried = 0\n+            return response\n+\n+\n+\n class HTTPDigestAuthHandler(urllib2.HTTPDigestAuthHandler):\n \n     def __init__(self, *args, **kwargs):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#5fff2c757b7e95b22610a171e6eb07c2d12acdda", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 9 | Lines Deleted: 3 | Files Changed: 1 | Hunks: 5 | Methods Changed: 3 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 12 | Churn Cumulative: 831 | Contributors (this commit): 7 | Commits (past 90d): 28 | Contributors (cumulative): 7 | DMM Complexity: 1.0\n\nDIFF:\n@@ -16,7 +16,7 @@ from urlparse import urlparse, urlunparse\n from datetime import datetime\n \n from .config import settings\n-from .monkeys import Request as _Request, HTTPBasicAuthHandler, HTTPDigestAuthHandler, HTTPRedirectHandler\n+from .monkeys import Request as _Request, HTTPBasicAuthHandler, HTTPForcedBasicAuthHandler, HTTPDigestAuthHandler, HTTPRedirectHandler\n from .structures import CaseInsensitiveDict\n from .packages.poster.encode import multipart_encode\n from .packages.poster.streaminghttp import register_openers, get_handlers\n@@ -80,6 +80,11 @@ class Request(object):\n         #: True if Request has been sent.\n         self.sent = False\n \n+        headers = settings.base_headers\n+        if self.headers:\n+            headers.update(self.headers)\n+        self.headers = headers\n+\n \n     def __repr__(self):\n         return '<Request [%s]>' % (self.method)\n@@ -534,17 +539,18 @@ class AuthObject(object):\n \n     _handlers = {\n         'basic': HTTPBasicAuthHandler,\n+        'forced_basic': HTTPForcedBasicAuthHandler,\n         'digest': HTTPDigestAuthHandler,\n         'proxy_basic': urllib2.ProxyBasicAuthHandler,\n         'proxy_digest': urllib2.ProxyDigestAuthHandler\n     }\n \n-    def __init__(self, username, password, handler='basic', realm=None):\n+    def __init__(self, username, password, handler='forced_basic', realm=None):\n         self.username = username\n         self.password = password\n         self.realm = realm\n \n         if isinstance(handler, basestring):\n-            self.handler = self._handlers.get(handler.lower(), HTTPBasicAuthHandler)\n+            self.handler = self._handlers.get(handler.lower(), HTTPForcedBasicAuthHandler)\n         else:\n             self.handler = handler\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#260e32a7c329c868ae59c045ef8521f6f9003778", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 1 | Churn Cumulative: 109 | Contributors (this commit): 1 | Commits (past 90d): 6 | Contributors (cumulative): 1 | DMM Complexity: None\n\nDIFF:\n@@ -54,3 +54,4 @@ class Settings(object):\n         return object.__getattribute__(self, key)\n \n settings = Settings()\n+settings.base_headers = {'User-Agent': 'python-requests.org'}\n\\ No newline at end of file\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#2edda29448a9530059b9d6f772ba1e9a92371e7b", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 709 | Contributors (this commit): 10 | Commits (past 90d): 28 | Contributors (cumulative): 10 | DMM Complexity: None\n\nDIFF:\n@@ -9,7 +9,7 @@ import cookielib\n try:\n     import omnijson as json\n except ImportError:\n-    import simplejson as json\n+    import json\n \n import requests\n \n@@ -326,7 +326,7 @@ class RequestsTestSuite(unittest.TestCase):\n \n     def test_idna(self):\n         r = requests.get(u'http://➡.ws/httpbin')\n-        self.assertEqual(r.url, HTTPBIN_URL)\n+        assert 'tinyarrows.com' in r.url\n \n \n if __name__ == '__main__':\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#1e1fb1e7a81b0a925e772e20db24e4ef5c94ae72", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 4 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 5 | Churn Cumulative: 836 | Contributors (this commit): 7 | Commits (past 90d): 29 | Contributors (cumulative): 7 | DMM Complexity: 1.0\n\nDIFF:\n@@ -170,10 +170,7 @@ class Request(object):\n \n         r = build(resp)\n \n-        if r.status_code in REDIRECT_STATI:\n-            self.redirect = True\n-\n-        if self.redirect:\n+        if r.status_code in REDIRECT_STATI and not self.redirect:\n \n             while (\n                 ('location' in r.headers) and\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#87560d65ca09d2065334f940f04b40ac28b0509a", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 9 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 4/4 | Churn Δ: 9 | Churn Cumulative: 718 | Contributors (this commit): 10 | Commits (past 90d): 29 | Contributors (cumulative): 10 | DMM Complexity: 1.0\n\nDIFF:\n@@ -353,5 +353,14 @@ class RequestsTestSuite(unittest.TestCase):\n         self.assertEquals(rbody.get('data'), '')\n \n \n+    def test_redirect_history(self):\n+        r = requests.get(httpbin('redirect', '3'))\n+        self.assertEquals(r.status_code, 200)\n+        self.assertEquals(len(r.history), 3)\n+\n+        r = requests.get(httpsbin('redirect', '3'))\n+        self.assertEquals(r.status_code, 200)\n+        self.assertEquals(len(r.history), 3)\n+\n if __name__ == '__main__':\n     unittest.main()\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#c3c90bb09c9f4cd635ea28cbc784ee5f724bdab8", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 16 | Lines Deleted: 3 | Files Changed: 2 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): 6/6 | Churn Δ: 19 | Churn Cumulative: 964 | Contributors (this commit): 7 | Commits (past 90d): 37 | Contributors (cumulative): 8 | DMM Complexity: 0.0\n\nDIFF:\n@@ -55,3 +55,4 @@ class Settings(object):\n \n settings = Settings()\n settings.base_headers = {'User-Agent': 'python-requests.org'}\n+settings.accept_gzip = True\n\\ No newline at end of file\n\n@@ -80,9 +80,21 @@ class Request(object):\n         #: True if Request has been sent.\n         self.sent = False\n \n-        headers = settings.base_headers\n-        if self.headers:\n-            headers.update(self.headers)\n+\n+        # Header manipulation and defaults.\n+\n+        if settings.accept_gzip:\n+            settings.base_headers.update({'Accept-Encoding': 'gzip'})\n+\n+        if headers:\n+            headers = CaseInsensitiveDict(self.headers)\n+        else:\n+            headers = CaseInsensitiveDict()\n+\n+        for (k, v) in settings.base_headers.items():\n+            if k not in headers:\n+                headers[k] = v\n+\n         self.headers = headers\n \n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#074150ff2c625a400244110c74f4e3546d08cbca", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 720 | Contributors (this commit): 10 | Commits (past 90d): 30 | Contributors (cumulative): 10 | DMM Complexity: None\n\nDIFF:\n@@ -326,7 +326,7 @@ class RequestsTestSuite(unittest.TestCase):\n \n     def test_idna(self):\n         r = requests.get(u'http://➡.ws/httpbin')\n-        assert 'tinyarrows.com' in r.url\n+        assert 'httpbin' in r.url\n \n     def test_urlencoded_get_query_multivalued_param(self):\n         r = requests.get(httpbin('get'), params=dict(test=['foo','baz']))\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#3293c0e8f4e23206e81f01f2d6332c401da53f8c", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 1 | Churn Cumulative: 180 | Contributors (this commit): 1 | Commits (past 90d): 7 | Contributors (cumulative): 1 | DMM Complexity: 1.0\n\nDIFF:\n@@ -42,6 +42,7 @@ class HTTPBasicAuthHandler(urllib2.HTTPBasicAuthHandler):\n     def __init__(self, *args, **kwargs):\n         urllib2.HTTPBasicAuthHandler.__init__(self, *args, **kwargs)\n         self.retried_req = None\n+        self.retried = 0\n \n \n     def reset_retry_count(self):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#1cdd1d04cec8aa0ba9067a9fcef57e0b92c3ad3a", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 2633 | Contributors (this commit): 7 | Commits (past 90d): 19 | Contributors (cumulative): 7 | DMM Complexity: None\n\nDIFF:\n@@ -12,8 +12,8 @@ This module implements the main Requests system.\n \"\"\"\n \n __title__ = 'requests'\n-__version__ = '0.5.0'\n-__build__ = 0x000500\n+__version__ = '0.5.1'\n+__build__ = 0x000501\n __author__ = 'Kenneth Reitz'\n __license__ = 'ISC'\n __copyright__ = 'Copyright 2011 Kenneth Reitz'\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#291d4742d63e523eb4353758039d145f2c1e2dfc", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 4 | Files Changed: 1 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): -1/0 | Churn Δ: 6 | Churn Cumulative: 860 | Contributors (this commit): 8 | Commits (past 90d): 31 | Contributors (cumulative): 8 | DMM Complexity: 1.0\n\nDIFF:\n@@ -12,7 +12,7 @@ import socket\n import zlib\n \n from urllib2 import HTTPError\n-from urlparse import urlparse, urlunparse\n+from urlparse import urlparse, urlunparse, urljoin\n from datetime import datetime\n \n from .config import settings\n@@ -197,9 +197,7 @@ class Request(object):\n \n                 # Facilitate non-RFC2616-compliant 'location' headers\n                 # (e.g. '/path/to/resource' instead of 'http://domain.tld/path/to/resource')\n-                if not urlparse(url).netloc:\n-                    parent_url_components = urlparse(self.url)\n-                    url = '%s://%s/%s' % (parent_url_components.scheme, parent_url_components.netloc, url)\n+                url = urljoin(self.url, url)\n \n                 # http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.3.4\n                 if r.status_code is 303:\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#5a7ec361f4bf093e251d4953bcf6a432717cf690", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 862 | Contributors (this commit): 8 | Commits (past 90d): 32 | Contributors (cumulative): 8 | DMM Complexity: None\n\nDIFF:\n@@ -197,7 +197,7 @@ class Request(object):\n \n                 # Facilitate non-RFC2616-compliant 'location' headers\n                 # (e.g. '/path/to/resource' instead of 'http://domain.tld/path/to/resource')\n-                url = urljoin(self.url, url)\n+                url = urljoin(r.url, url)\n \n                 # http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.3.4\n                 if r.status_code is 303:\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#0b6dc091f50965250d9c421d8aadaa701186a1b9", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 3 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 3 | Methods Changed: 2 | Complexity Δ (Sum/Max): -6/0 | Churn Δ: 5 | Churn Cumulative: 867 | Contributors (this commit): 8 | Commits (past 90d): 33 | Contributors (cumulative): 8 | DMM Complexity: 1.0\n\nDIFF:\n@@ -185,7 +185,7 @@ class Request(object):\n                 # (e.g. '/path/to/resource' instead of 'http://domain.tld/path/to/resource')\n                 if not urlparse(url).netloc:\n                     parent_url_components = urlparse(self.url)\n-                    url = '%s://%s/%s' % (parent_url_components.scheme, parent_url_components.netloc, url)\n+                    url = '%s://%s/%s' % (parent_url_components.scheme, parent_url_components.netloc, urllib.quote(urllib.unquote(url)))\n \n                 # http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.3.4\n                 if r.status_code is 303:\n@@ -231,9 +231,10 @@ class Request(object):\n     def _build_url(self):\n         \"\"\"Build the actual URL to use\"\"\"\n \n-        # Support for unicode domain names.\n+        # Support for unicode domain names and paths.\n         parsed_url = list(urlparse(self.url))\n         parsed_url[1] = parsed_url[1].encode('idna')\n+        parsed_url[2] = urllib.quote(urllib.unquote(parsed_url[2]))\n         self.url = urlunparse(parsed_url)\n \n         if self._enc_params:\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#e4adef522645bfbeb5f7f56d0cd539f5c57a1b92", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 1 | Files Changed: 2 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 3 | Churn Cumulative: 480 | Contributors (this commit): 5 | Commits (past 90d): 26 | Contributors (cumulative): 7 | DMM Complexity: None\n\nDIFF:\n@@ -47,7 +47,7 @@ def request(method, url,\n         auth = auth or auth_manager.get_auth(url),\n         timeout = timeout or config.settings.timeout,\n         allow_redirects = allow_redirects,\n-        proxies = proxies\n+        proxies = proxies or config.settings.proxies\n     )\n \n     r.send()\n\n@@ -56,3 +56,4 @@ class Settings(object):\n settings = Settings()\n settings.base_headers = {'User-Agent': 'python-requests.org'}\n settings.accept_gzip = True\n+settings.proxies = None\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#aa0f78b740b6098f29594242b6b923113d0659b3", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 6 | Lines Deleted: 4 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 8/8 | Churn Δ: 10 | Churn Cumulative: 877 | Contributors (this commit): 8 | Commits (past 90d): 34 | Contributors (cumulative): 8 | DMM Complexity: 1.0\n\nDIFF:\n@@ -247,10 +247,12 @@ class Request(object):\n         \"\"\"Build the actual URL to use\"\"\"\n \n         # Support for unicode domain names and paths.\n-        parsed_url = list(urlparse(self.url))\n-        parsed_url[1] = parsed_url[1].encode('idna')\n-        parsed_url[2] = urllib.quote(urllib.unquote(parsed_url[2]))\n-        self.url = urlunparse(parsed_url)\n+        scheme, netloc, path, params, query, fragment = urlparse(self.url)\n+        netloc = netloc.encode('idna')\n+        if isinstance(path, unicode):\n+            path = path.encode('utf-8')\n+        path = urllib.quote(urllib.unquote(path))\n+        self.url = str(urlunparse([ scheme, netloc, path, params, query, fragment ]))\n \n         if self._enc_params:\n             if urlparse(self.url).query:\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#32a861b2eddcfd73049f245984a12b88b364dadd", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 7 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 2 | Methods Changed: 3 | Complexity Δ (Sum/Max): 3/3 | Churn Δ: 8 | Churn Cumulative: 885 | Contributors (this commit): 8 | Commits (past 90d): 35 | Contributors (cumulative): 8 | DMM Complexity: 1.0\n\nDIFF:\n@@ -169,7 +169,8 @@ class Request(object):\n             try:\n                 response.headers = CaseInsensitiveDict(getattr(resp.info(), 'dict', None))\n                 response.read = resp.read\n-                response.close = resp.close\n+                response._resp = resp\n+                response._close = resp.close\n             except AttributeError:\n                 pass\n \n@@ -397,6 +398,11 @@ class Response(object):\n             raise self.error\n \n \n+    def close(self):\n+        if self._resp.fp is not None and hasattr(self._resp.fp, '_sock'):\n+            self._resp.fp._sock.recv = None\n+        self._close()\n+\n class AuthManager(object):\n     \"\"\"Requests Authentication Manager.\"\"\"\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#7b79cea7384a2dd3df90ac748bac3c4a89ebce24", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 3 | Files Changed: 1 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): -3/0 | Churn Δ: 5 | Churn Cumulative: 890 | Contributors (this commit): 8 | Commits (past 90d): 36 | Contributors (cumulative): 8 | DMM Complexity: 1.0\n\nDIFF:\n@@ -12,7 +12,7 @@ import socket\n import zlib\n \n from urllib2 import HTTPError\n-from urlparse import urlparse, urlunparse\n+from urlparse import urlparse, urlunparse, urljoin\n from datetime import datetime\n \n from .config import settings\n@@ -198,8 +198,7 @@ class Request(object):\n                 # Facilitate non-RFC2616-compliant 'location' headers\n                 # (e.g. '/path/to/resource' instead of 'http://domain.tld/path/to/resource')\n                 if not urlparse(url).netloc:\n-                    parent_url_components = urlparse(self.url)\n-                    url = '%s://%s/%s' % (parent_url_components.scheme, parent_url_components.netloc, urllib.quote(urllib.unquote(url)))\n+                    url = urljoin(r.url, urllib.quote(urllib.unquote(url)))\n \n                 # http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.3.4\n                 if r.status_code is 303:\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
