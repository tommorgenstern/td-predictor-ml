{"custom_id": "requests#cb233a101d6333cf1895e3f46bde11874fcaba07", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 25 | Lines Deleted: 19 | Files Changed: 1 | Hunks: 13 | Methods Changed: 7 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 44 | Churn Cumulative: 6928 | Contributors (this commit): 85 | Commits (past 90d): 4 | Contributors (cumulative): 85 | DMM Complexity: 1.0\n\nDIFF:\n@@ -1022,11 +1022,12 @@ class TestRequests:\n         assert prep.body == \"test=foo&test=baz\"\n \n     def test_different_encodings_dont_break_post(self, httpbin):\n+        with open(__file__, \"rb\") as f:\n             r = requests.post(\n                 httpbin(\"post\"),\n                 data={\"stuff\": json.dumps({\"a\": 123})},\n                 params={\"blah\": \"asdf1234\"},\n-            files={\"file\": (\"test_requests.py\", open(__file__, \"rb\"))},\n+                files={\"file\": (\"test_requests.py\", f)},\n             )\n         assert r.status_code == 200\n \n@@ -1040,33 +1041,42 @@ class TestRequests:\n         ),\n     )\n     def test_unicode_multipart_post(self, httpbin, data):\n+        with open(__file__, \"rb\") as f:\n             r = requests.post(\n                 httpbin(\"post\"),\n                 data=data,\n-            files={\"file\": (\"test_requests.py\", open(__file__, \"rb\"))},\n+                files={\"file\": (\"test_requests.py\", f)},\n             )\n         assert r.status_code == 200\n \n     def test_unicode_multipart_post_fieldnames(self, httpbin):\n         filename = os.path.splitext(__file__)[0] + \".py\"\n+        with open(filename, \"rb\") as f:\n             r = requests.Request(\n                 method=\"POST\",\n                 url=httpbin(\"post\"),\n                 data={b\"stuff\": \"elixr\"},\n-            files={\"file\": (\"test_requests.py\", open(filename, \"rb\"))},\n+                files={\"file\": (\"test_requests.py\", f)},\n             )\n             prep = r.prepare()\n+\n         assert b'name=\"stuff\"' in prep.body\n         assert b\"name=\\\"b'stuff'\\\"\" not in prep.body\n \n     def test_unicode_method_name(self, httpbin):\n-        files = {\"file\": open(__file__, \"rb\")}\n-        r = requests.request(method=\"POST\", url=httpbin(\"post\"), files=files)\n+        with open(__file__, \"rb\") as f:\n+            files = {\"file\": f}\n+            r = requests.request(\n+                method=\"POST\",\n+                url=httpbin(\"post\"),\n+                files=files,\n+            )\n         assert r.status_code == 200\n \n     def test_unicode_method_name_with_request_object(self, httpbin):\n-        files = {\"file\": open(__file__, \"rb\")}\n         s = requests.Session()\n+        with open(__file__, \"rb\") as f:\n+            files = {\"file\": f}\n             req = requests.Request(\"POST\", httpbin(\"post\"), files=files)\n             prep = s.prepare_request(req)\n         assert isinstance(prep.method, builtin_str)\n@@ -1084,18 +1094,14 @@ class TestRequests:\n         assert str(e.value) == \"You can only send PreparedRequests.\"\n \n     def test_custom_content_type(self, httpbin):\n-        r = requests.post(\n-            httpbin(\"post\"),\n-            data={\"stuff\": json.dumps({\"a\": 123})},\n+        with open(__file__, \"rb\") as f1:\n+            with open(__file__, \"rb\") as f2:\n+                data={\"stuff\": json.dumps({\"a\": 123})}\n                 files = {\n-                \"file1\": (\"test_requests.py\", open(__file__, \"rb\")),\n-                \"file2\": (\n-                    \"test_requests\",\n-                    open(__file__, \"rb\"),\n-                    \"text/py-content-type\",\n-                ),\n-            },\n-        )\n+                    \"file1\": (\"test_requests.py\", f1),\n+                    \"file2\": (\"test_requests\", f2, \"text/py-content-type\"),\n+                }\n+                r = requests.post(httpbin(\"post\"), data=data, files=files)\n         assert r.status_code == 200\n         assert b\"text/py-content-type\" in r.request.body\n \n@@ -1484,8 +1490,8 @@ class TestRequests:\n         assert resp.status_code == 200\n \n     def test_prepared_request_with_file_is_pickleable(self, httpbin):\n-        files = {\"file\": open(__file__, \"rb\")}\n-        r = requests.Request(\"POST\", httpbin(\"post\"), files=files)\n+        with open(__file__, \"rb\") as f:\n+            r = requests.Request(\"POST\", httpbin(\"post\"), files={\"file\": f})\n             p = r.prepare()\n \n         # Verify PreparedRequest can be pickled and unpickled\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#79f2ec3acc4e24fef6e6ce31ad7b1d4e2f77be31", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 3495 | Contributors (this commit): 104 | Commits (past 90d): 3 | Contributors (cumulative): 104 | DMM Complexity: None\n\nDIFF:\n@@ -556,7 +556,7 @@ def get_encoding_from_headers(headers):\n \n \n def stream_decode_response_unicode(iterator, r):\n-    \"\"\"Stream decodes a iterator.\"\"\"\n+    \"\"\"Stream decodes an iterator.\"\"\"\n \n     if r.encoding is None:\n         yield from iterator\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#210095fd08f790a1ce640354a91c1a264a291360", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 34 | Lines Deleted: 1 | Files Changed: 2 | Hunks: 2 | Methods Changed: 5 | Complexity Δ (Sum/Max): 7/7 | Churn Δ: 35 | Churn Cumulative: 5870 | Contributors (this commit): 109 | Commits (past 90d): 7 | Contributors (cumulative): 136 | DMM Complexity: 1.0\n\nDIFF:\n@@ -83,7 +83,7 @@ if sys.platform == \"win32\":\n             proxyEnable = int(winreg.QueryValueEx(internetSettings, \"ProxyEnable\")[0])\n             # ProxyOverride is almost always a string\n             proxyOverride = winreg.QueryValueEx(internetSettings, \"ProxyOverride\")[0]\n-        except OSError:\n+        except (OSError, ValueError):\n             return False\n         if not proxyEnable or not proxyOverride:\n             return False\n\n@@ -864,6 +864,39 @@ def test_should_bypass_proxies_win_registry(url, expected, override, monkeypatch\n     assert should_bypass_proxies(url, None) == expected\n \n \n+@pytest.mark.skipif(os.name != \"nt\", reason=\"Test only on Windows\")\n+def test_should_bypass_proxies_win_registry_bad_values(monkeypatch):\n+    \"\"\"Tests for function should_bypass_proxies to check if proxy\n+    can be bypassed or not with Windows invalid registry settings.\n+    \"\"\"\n+    import winreg\n+\n+    class RegHandle:\n+        def Close(self):\n+            pass\n+\n+    ie_settings = RegHandle()\n+\n+    def OpenKey(key, subkey):\n+        return ie_settings\n+\n+    def QueryValueEx(key, value_name):\n+        if key is ie_settings:\n+            if value_name == \"ProxyEnable\":\n+                # Invalid response; Should be an int or int-y value\n+                return [\"\"]\n+            elif value_name == \"ProxyOverride\":\n+                return [\"192.168.*;127.0.0.1;localhost.localdomain;172.16.1.1\"]\n+\n+    monkeypatch.setenv(\"http_proxy\", \"\")\n+    monkeypatch.setenv(\"https_proxy\", \"\")\n+    monkeypatch.setenv(\"no_proxy\", \"\")\n+    monkeypatch.setenv(\"NO_PROXY\", \"\")\n+    monkeypatch.setattr(winreg, \"OpenKey\", OpenKey)\n+    monkeypatch.setattr(winreg, \"QueryValueEx\", QueryValueEx)\n+    assert should_bypass_proxies(\"http://172.16.1.1/\", None) is False\n+\n+\n @pytest.mark.parametrize(\n     \"env_name, value\",\n     (\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#3af2f456d8c0a90bd6609f2205cd0b2d0f7f800e", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 3 | Churn Cumulative: 224 | Contributors (this commit): 9 | Commits (past 90d): 3 | Contributors (cumulative): 9 | DMM Complexity: 1.0\n\nDIFF:\n@@ -115,7 +115,8 @@ class Server(threading.Thread):\n \n     def __enter__(self):\n         self.start()\n-        self.ready_event.wait(self.WAIT_EVENT_TIMEOUT)\n+        if not self.ready_event.wait(self.WAIT_EVENT_TIMEOUT):\n+            raise RuntimeError(\"Timeout waiting for server to be ready.\")\n         return self.host, self.port\n \n     def __exit__(self, exc_type, exc_value, traceback):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#e36f34597ca96c40dbb81d63a8fe9ac0860b8dc3", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 73 | Lines Deleted: 63 | Files Changed: 3 | Hunks: 18 | Methods Changed: 9 | Complexity Δ (Sum/Max): 2/1 | Churn Δ: 136 | Churn Cumulative: 10616 | Contributors (this commit): 167 | Commits (past 90d): 12 | Contributors (cumulative): 192 | DMM Complexity: 0.0\n\nDIFF:\n@@ -5,9 +5,20 @@ requests._internal_utils\n Provides utility functions that are consumed internally by Requests\n which depend on extremely few external helpers (such as compat)\n \"\"\"\n+import re\n \n from .compat import builtin_str\n \n+_VALID_HEADER_NAME_RE_BYTE = re.compile(rb\"^[^:\\s][^:\\r\\n]*$\")\n+_VALID_HEADER_NAME_RE_STR = re.compile(r\"^[^:\\s][^:\\r\\n]*$\")\n+_VALID_HEADER_VALUE_RE_BYTE = re.compile(rb\"^\\S[^\\r\\n]*$|^$\")\n+_VALID_HEADER_VALUE_RE_STR = re.compile(r\"^\\S[^\\r\\n]*$|^$\")\n+\n+HEADER_VALIDATORS = {\n+    bytes: (_VALID_HEADER_NAME_RE_BYTE, _VALID_HEADER_VALUE_RE_BYTE),\n+    str: (_VALID_HEADER_NAME_RE_STR, _VALID_HEADER_VALUE_RE_STR),\n+}\n+\n \n def to_native_string(string, encoding=\"ascii\"):\n     \"\"\"Given a string object, regardless of type, returns a representation of\n\n@@ -25,7 +25,7 @@ from . import certs\n from .__version__ import __version__\n \n # to_native_string is unused here, but imported here for backwards compatibility\n-from ._internal_utils import to_native_string  # noqa: F401\n+from ._internal_utils import HEADER_VALIDATORS, to_native_string  # noqa: F401\n from .compat import (\n     Mapping,\n     basestring,\n@@ -1024,33 +1024,30 @@ def get_auth_from_url(url):\n     return auth\n \n \n-# Moved outside of function to avoid recompile every call\n-_CLEAN_HEADER_REGEX_BYTE = re.compile(b\"^\\\\S[^\\\\r\\\\n]*$|^$\")\n-_CLEAN_HEADER_REGEX_STR = re.compile(r\"^\\S[^\\r\\n]*$|^$\")\n-\n-\n def check_header_validity(header):\n-    \"\"\"Verifies that header value is a string which doesn't contain\n-    leading whitespace or return characters. This prevents unintended\n-    header injection.\n+    \"\"\"Verifies that header parts don't contain leading whitespace\n+    reserved characters, or return characters.\n \n     :param header: tuple, in the format (name, value).\n     \"\"\"\n     name, value = header\n \n-    if isinstance(value, bytes):\n-        pat = _CLEAN_HEADER_REGEX_BYTE\n-    else:\n-        pat = _CLEAN_HEADER_REGEX_STR\n-    try:\n-        if not pat.match(value):\n+    for part in header:\n+        if type(part) not in HEADER_VALIDATORS:\n             raise InvalidHeader(\n-                f\"Invalid return character or leading space in header: {name}\"\n+                f\"Header part ({part!r}) from {{{name!r}: {value!r}}} must be \"\n+                f\"of type str or bytes, not {type(part)}\"\n             )\n-    except TypeError:\n+\n+    _validate_header_part(name, \"name\", HEADER_VALIDATORS[type(name)][0])\n+    _validate_header_part(value, \"value\", HEADER_VALIDATORS[type(value)][1])\n+\n+\n+def _validate_header_part(header_part, header_kind, validator):\n+    if not validator.match(header_part):\n         raise InvalidHeader(\n-            f\"Value for header {{{name}: {value}}} must be of type \"\n-            f\"str or bytes, not {type(value)}\"\n+            f\"Invalid leading whitespace, reserved character(s), or return\"\n+            f\"character(s) in header {header_kind}: {header_part!r}\"\n         )\n \n \n\n@@ -1682,68 +1682,70 @@ class TestRequests:\n \n     def test_header_validation(self, httpbin):\n         \"\"\"Ensure prepare_headers regex isn't flagging valid header contents.\"\"\"\n-        headers_ok = {\n+        valid_headers = {\n             \"foo\": \"bar baz qux\",\n             \"bar\": b\"fbbq\",\n             \"baz\": \"\",\n             \"qux\": \"1\",\n         }\n-        r = requests.get(httpbin(\"get\"), headers=headers_ok)\n-        assert r.request.headers[\"foo\"] == headers_ok[\"foo\"]\n+        r = requests.get(httpbin(\"get\"), headers=valid_headers)\n+        for key in valid_headers.keys():\n+            valid_headers[key] == r.request.headers[key]\n \n-    def test_header_value_not_str(self, httpbin):\n+    @pytest.mark.parametrize(\n+        \"invalid_header, key\",\n+        (\n+            ({\"foo\": 3}, \"foo\"),\n+            ({\"bar\": {\"foo\": \"bar\"}}, \"bar\"),\n+            ({\"baz\": [\"foo\", \"bar\"]}, \"baz\"),\n+        ),\n+    )\n+    def test_header_value_not_str(self, httpbin, invalid_header, key):\n         \"\"\"Ensure the header value is of type string or bytes as\n         per discussion in GH issue #3386\n         \"\"\"\n-        headers_int = {\"foo\": 3}\n-        headers_dict = {\"bar\": {\"foo\": \"bar\"}}\n-        headers_list = {\"baz\": [\"foo\", \"bar\"]}\n+        with pytest.raises(InvalidHeader) as excinfo:\n+            requests.get(httpbin(\"get\"), headers=invalid_header)\n+        assert key in str(excinfo.value)\n \n-        # Test for int\n-        with pytest.raises(InvalidHeader) as excinfo:\n-            requests.get(httpbin(\"get\"), headers=headers_int)\n-        assert \"foo\" in str(excinfo.value)\n-        # Test for dict\n-        with pytest.raises(InvalidHeader) as excinfo:\n-            requests.get(httpbin(\"get\"), headers=headers_dict)\n-        assert \"bar\" in str(excinfo.value)\n-        # Test for list\n-        with pytest.raises(InvalidHeader) as excinfo:\n-            requests.get(httpbin(\"get\"), headers=headers_list)\n-        assert \"baz\" in str(excinfo.value)\n-\n-    def test_header_no_return_chars(self, httpbin):\n+    @pytest.mark.parametrize(\n+        \"invalid_header\",\n+        (\n+            {\"foo\": \"bar\\r\\nbaz: qux\"},\n+            {\"foo\": \"bar\\n\\rbaz: qux\"},\n+            {\"foo\": \"bar\\nbaz: qux\"},\n+            {\"foo\": \"bar\\rbaz: qux\"},\n+            {\"fo\\ro\": \"bar\"},\n+            {\"fo\\r\\no\": \"bar\"},\n+            {\"fo\\n\\ro\": \"bar\"},\n+            {\"fo\\no\": \"bar\"},\n+        ),\n+    )\n+    def test_header_no_return_chars(self, httpbin, invalid_header):\n         \"\"\"Ensure that a header containing return character sequences raise an\n         exception. Otherwise, multiple headers are created from single string.\n         \"\"\"\n-        headers_ret = {\"foo\": \"bar\\r\\nbaz: qux\"}\n-        headers_lf = {\"foo\": \"bar\\nbaz: qux\"}\n-        headers_cr = {\"foo\": \"bar\\rbaz: qux\"}\n+        with pytest.raises(InvalidHeader):\n+            requests.get(httpbin(\"get\"), headers=invalid_header)\n \n-        # Test for newline\n-        with pytest.raises(InvalidHeader):\n-            requests.get(httpbin(\"get\"), headers=headers_ret)\n-        # Test for line feed\n-        with pytest.raises(InvalidHeader):\n-            requests.get(httpbin(\"get\"), headers=headers_lf)\n-        # Test for carriage return\n-        with pytest.raises(InvalidHeader):\n-            requests.get(httpbin(\"get\"), headers=headers_cr)\n-\n-    def test_header_no_leading_space(self, httpbin):\n+    @pytest.mark.parametrize(\n+        \"invalid_header\",\n+        (\n+            {\" foo\": \"bar\"},\n+            {\"\\tfoo\": \"bar\"},\n+            {\"    foo\": \"bar\"},\n+            {\"foo\": \" bar\"},\n+            {\"foo\": \"    bar\"},\n+            {\"foo\": \"\\tbar\"},\n+            {\" \": \"bar\"},\n+        ),\n+    )\n+    def test_header_no_leading_space(self, httpbin, invalid_header):\n         \"\"\"Ensure headers containing leading whitespace raise\n         InvalidHeader Error before sending.\n         \"\"\"\n-        headers_space = {\"foo\": \" bar\"}\n-        headers_tab = {\"foo\": \"   bar\"}\n-\n-        # Test for whitespace\n         with pytest.raises(InvalidHeader):\n-            requests.get(httpbin(\"get\"), headers=headers_space)\n-\n-        # Test for tab\n-        with pytest.raises(InvalidHeader):\n-            requests.get(httpbin(\"get\"), headers=headers_tab)\n+            requests.get(httpbin(\"get\"), headers=invalid_header)\n \n     @pytest.mark.parametrize(\"files\", (\"foo\", b\"foo\", bytearray(b\"foo\")))\n     def test_can_send_objects_with_files(self, httpbin, files):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#da9996fe4dc63356e9467d0a5e10df3d89a8528e", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 190 | Contributors (this commit): 5 | Commits (past 90d): 2 | Contributors (cumulative): 5 | DMM Complexity: None\n\nDIFF:\n@@ -5,8 +5,8 @@\n __title__ = \"requests\"\n __description__ = \"Python HTTP for Humans.\"\n __url__ = \"https://requests.readthedocs.io\"\n-__version__ = \"2.27.1\"\n-__build__ = 0x022701\n+__version__ = \"2.28.0\"\n+__build__ = 0x022800\n __author__ = \"Kenneth Reitz\"\n __author_email__ = \"me@kennethreitz.org\"\n __license__ = \"Apache 2.0\"\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#73793ce43e3d940a0f8d6b9b8ff125617828d8a1", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 3 | Lines Deleted: 3 | Files Changed: 2 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 6 | Churn Cumulative: 1939 | Contributors (this commit): 54 | Commits (past 90d): 4 | Contributors (cumulative): 68 | DMM Complexity: None\n\nDIFF:\n@@ -75,8 +75,8 @@ def check_compatibility(urllib3_version, chardet_version, charset_normalizer_ver\n     if chardet_version:\n         major, minor, patch = chardet_version.split(\".\")[:3]\n         major, minor, patch = int(major), int(minor), int(patch)\n-        # chardet_version >= 3.0.2, < 5.0.0\n-        assert (3, 0, 2) <= (major, minor, patch) < (5, 0, 0)\n+        # chardet_version >= 3.0.2, < 6.0.0\n+        assert (3, 0, 2) <= (major, minor, patch) < (6, 0, 0)\n     elif charset_normalizer_version:\n         major, minor, patch = charset_normalizer_version.split(\".\")[:3]\n         major, minor, patch = int(major), int(minor), int(patch)\n\n@@ -123,7 +123,7 @@ setup(\n     extras_require={\n         \"security\": [],\n         \"socks\": [\"PySocks>=1.5.6, !=1.5.7\"],\n-        \"use_chardet_on_py3\": [\"chardet>=3.0.2,<5\"],\n+        \"use_chardet_on_py3\": [\"chardet>=3.0.2,<6\"],\n     },\n     project_urls={\n         \"Documentation\": \"https://requests.readthedocs.io\",\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#0e28c8f1dc1db297fb2ba5a953bee2097a554c38", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 913 | Contributors (this commit): 42 | Commits (past 90d): 3 | Contributors (cumulative): 42 | DMM Complexity: None\n\nDIFF:\n@@ -59,7 +59,7 @@ if sys.argv[-1] == \"publish\":\n     sys.exit()\n \n requires = [\n-    \"charset_normalizer~=2.0.0\",\n+    \"charset_normalizer>=2,<3\",\n     \"idna>=2.5,<4\",\n     \"urllib3>=1.21.1,<1.27\",\n     \"certifi>=2017.4.17\",\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#16b418b44a04981ec452df607730079a6178a804", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 1 | Methods Changed: 2 | Complexity Δ (Sum/Max): -1/0 | Churn Δ: 3 | Churn Cumulative: 10239 | Contributors (this commit): 200 | Commits (past 90d): 2 | Contributors (cumulative): 200 | DMM Complexity: 1.0\n\nDIFF:\n@@ -813,8 +813,7 @@ class Response:\n             # Special case for urllib3.\n             if hasattr(self.raw, \"stream\"):\n                 try:\n-                    for chunk in self.raw.stream(chunk_size, decode_content=True):\n-                        yield chunk\n+                    yield from self.raw.stream(chunk_size, decode_content=True)\n                 except ProtocolError as e:\n                     raise ChunkedEncodingError(e)\n                 except DecodeError as e:\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#4d394574f5555a8ddcc38f707e0c9f57f55d9a3b", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 194 | Contributors (this commit): 5 | Commits (past 90d): 3 | Contributors (cumulative): 5 | DMM Complexity: None\n\nDIFF:\n@@ -5,8 +5,8 @@\n __title__ = \"requests\"\n __description__ = \"Python HTTP for Humans.\"\n __url__ = \"https://requests.readthedocs.io\"\n-__version__ = \"2.28.0\"\n-__build__ = 0x022800\n+__version__ = \"2.28.1\"\n+__build__ = 0x022801\n __author__ = \"Kenneth Reitz\"\n __author_email__ = \"me@kennethreitz.org\"\n __license__ = \"Apache 2.0\"\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#bda7f0171f8bba17989d3a2c28dfa9a9261b1b65", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 10241 | Contributors (this commit): 201 | Commits (past 90d): 3 | Contributors (cumulative): 201 | DMM Complexity: None\n\nDIFF:\n@@ -438,7 +438,7 @@ class PreparedRequest(RequestEncodingMixin, RequestHooksMixin):\n         if not scheme:\n             raise MissingSchema(\n                 f\"Invalid URL {url!r}: No scheme supplied. \"\n-                f\"Perhaps you meant http://{url}?\"\n+                f\"Perhaps you meant https://{url}?\"\n             )\n \n         if not host:\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#c57f1f0ca10e61771b459c857182c23626607312", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 3 | Lines Deleted: 3 | Files Changed: 2 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 6 | Churn Cumulative: 1947 | Contributors (this commit): 56 | Commits (past 90d): 2 | Contributors (cumulative): 71 | DMM Complexity: None\n\nDIFF:\n@@ -80,8 +80,8 @@ def check_compatibility(urllib3_version, chardet_version, charset_normalizer_ver\n     elif charset_normalizer_version:\n         major, minor, patch = charset_normalizer_version.split(\".\")[:3]\n         major, minor, patch = int(major), int(minor), int(patch)\n-        # charset_normalizer >= 2.0.0 < 3.0.0\n-        assert (2, 0, 0) <= (major, minor, patch) < (3, 0, 0)\n+        # charset_normalizer >= 2.0.0 < 4.0.0\n+        assert (2, 0, 0) <= (major, minor, patch) < (4, 0, 0)\n     else:\n         raise Exception(\"You need either charset_normalizer or chardet installed\")\n \n\n@@ -59,7 +59,7 @@ if sys.argv[-1] == \"publish\":\n     sys.exit()\n \n requires = [\n-    \"charset_normalizer>=2,<3\",\n+    \"charset_normalizer>=2,<4\",\n     \"idna>=2.5,<4\",\n     \"urllib3>=1.21.1,<1.27\",\n     \"certifi>=2017.4.17\",\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#53a0562331c4a825036a347e77984d68b310fcf3", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 196 | Contributors (this commit): 6 | Commits (past 90d): 1 | Contributors (cumulative): 6 | DMM Complexity: None\n\nDIFF:\n@@ -9,6 +9,6 @@ __version__ = \"2.28.1\"\n __build__ = 0x022801\n __author__ = \"Kenneth Reitz\"\n __author_email__ = \"me@kennethreitz.org\"\n-__license__ = \"Apache 2.0\"\n+__license__ = \"Apache-2.0\"\n __copyright__ = \"Copyright 2022 Kenneth Reitz\"\n __cake__ = \"\\u2728 \\U0001f370 \\u2728\"\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#61c324da43dd8b775d3930d76265538b3ca27bc1", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 3 | Lines Deleted: 3 | Files Changed: 1 | Hunks: 2 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 6 | Churn Cumulative: 202 | Contributors (this commit): 6 | Commits (past 90d): 2 | Contributors (cumulative): 6 | DMM Complexity: None\n\nDIFF:\n@@ -5,10 +5,10 @@\n __title__ = \"requests\"\n __description__ = \"Python HTTP for Humans.\"\n __url__ = \"https://requests.readthedocs.io\"\n-__version__ = \"2.28.1\"\n-__build__ = 0x022801\n+__version__ = \"2.28.2\"\n+__build__ = 0x022802\n __author__ = \"Kenneth Reitz\"\n __author_email__ = \"me@kennethreitz.org\"\n __license__ = \"Apache 2.0\"\n-__copyright__ = \"Copyright 2022 Kenneth Reitz\"\n+__copyright__ = \"Copyright Kenneth Reitz\"\n __cake__ = \"\\u2728 \\U0001f370 \\u2728\"\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#16a17a3ca7134b0a56c49653165ef37cb6acfece", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 917 | Contributors (this commit): 44 | Commits (past 90d): 1 | Contributors (cumulative): 44 | DMM Complexity: None\n\nDIFF:\n@@ -94,7 +94,7 @@ setup(\n     package_data={\"\": [\"LICENSE\", \"NOTICE\"]},\n     package_dir={\"requests\": \"requests\"},\n     include_package_data=True,\n-    python_requires=\">=3.7, <4\",\n+    python_requires=\">=3.7\",\n     install_requires=requires,\n     license=about[\"__license__\"],\n     zip_safe=False,\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#15585909c3dd3014e4083961c8a404709450151c", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 10 | Lines Deleted: 1 | Files Changed: 2 | Hunks: 5 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 11 | Churn Cumulative: 7069 | Contributors (this commit): 86 | Commits (past 90d): 2 | Contributors (cumulative): 92 | DMM Complexity: None\n\nDIFF:\n@@ -2,9 +2,13 @@\n \n import warnings\n \n+try:\n     from urllib3.exceptions import SNIMissingWarning\n \n-# urllib3 sets SNIMissingWarning to only go off once,\n+    # urllib3 1.x sets SNIMissingWarning to only go off once,\n     # while this test suite requires it to always fire\n     # so that it occurs during test_requests.test_https_warnings\n     warnings.simplefilter(\"always\", SNIMissingWarning)\n+except ImportError:\n+    # urllib3 2.0 removed that warning and errors out instead\n+    SNIMissingWarning = None\n\n@@ -48,6 +48,7 @@ from requests.models import PreparedRequest, urlencode\n from requests.sessions import SessionRedirectMixin\n from requests.structures import CaseInsensitiveDict\n \n+from . import SNIMissingWarning\n from .compat import StringIO\n from .utils import override_environ\n \n@@ -974,6 +975,10 @@ class TestRequests:\n         r = requests.get(httpbin(), cert=\".\")\n         assert r.status_code == 200\n \n+    @pytest.mark.skipif(\n+        SNIMissingWarning is None,\n+        reason=\"urllib3 2.0 removed that warning and errors out instead\",\n+    )\n     def test_https_warnings(self, nosan_server):\n         \"\"\"warnings are emitted with requests.get\"\"\"\n         host, port, ca_bundle = nosan_server\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#e90852d20c9bc44c465e55234c01432711627d94", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 3 | Lines Deleted: 3 | Files Changed: 1 | Hunks: 3 | Methods Changed: 3 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 6 | Churn Cumulative: 1274 | Contributors (this commit): 56 | Commits (past 90d): 1 | Contributors (cumulative): 56 | DMM Complexity: None\n\nDIFF:\n@@ -106,7 +106,7 @@ def post(url, data=None, json=None, **kwargs):\n     :param url: URL for the new :class:`Request` object.\n     :param data: (optional) Dictionary, list of tuples, bytes, or file-like\n         object to send in the body of the :class:`Request`.\n-    :param json: (optional) json data to send in the body of the :class:`Request`.\n+    :param json: (optional) A JSON serializable Python object to send in the body of the :class:`Request`.\n     :param \\*\\*kwargs: Optional arguments that ``request`` takes.\n     :return: :class:`Response <Response>` object\n     :rtype: requests.Response\n@@ -121,7 +121,7 @@ def put(url, data=None, **kwargs):\n     :param url: URL for the new :class:`Request` object.\n     :param data: (optional) Dictionary, list of tuples, bytes, or file-like\n         object to send in the body of the :class:`Request`.\n-    :param json: (optional) json data to send in the body of the :class:`Request`.\n+    :param json: (optional) A JSON serializable Python object to send in the body of the :class:`Request`.\n     :param \\*\\*kwargs: Optional arguments that ``request`` takes.\n     :return: :class:`Response <Response>` object\n     :rtype: requests.Response\n@@ -136,7 +136,7 @@ def patch(url, data=None, **kwargs):\n     :param url: URL for the new :class:`Request` object.\n     :param data: (optional) Dictionary, list of tuples, bytes, or file-like\n         object to send in the body of the :class:`Request`.\n-    :param json: (optional) json data to send in the body of the :class:`Request`.\n+    :param json: (optional) A JSON serializable Python object to send in the body of the :class:`Request`.\n     :param \\*\\*kwargs: Optional arguments that ``request`` takes.\n     :return: :class:`Response <Response>` object\n     :rtype: requests.Response\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#7f694b79e114c06fac5ec06019cada5a61e5570f", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 47 | Lines Deleted: 12 | Files Changed: 3 | Hunks: 9 | Methods Changed: 4 | Complexity Δ (Sum/Max): 2/1 | Churn Δ: 59 | Churn Cumulative: 10680 | Contributors (this commit): 168 | Commits (past 90d): 4 | Contributors (cumulative): 195 | DMM Complexity: 1.0\n\nDIFF:\n@@ -14,9 +14,11 @@ _VALID_HEADER_NAME_RE_STR = re.compile(r\"^[^:\\s][^:\\r\\n]*$\")\n _VALID_HEADER_VALUE_RE_BYTE = re.compile(rb\"^\\S[^\\r\\n]*$|^$\")\n _VALID_HEADER_VALUE_RE_STR = re.compile(r\"^\\S[^\\r\\n]*$|^$\")\n \n+_HEADER_VALIDATORS_STR = (_VALID_HEADER_NAME_RE_STR, _VALID_HEADER_VALUE_RE_STR)\n+_HEADER_VALIDATORS_BYTE = (_VALID_HEADER_NAME_RE_BYTE, _VALID_HEADER_VALUE_RE_BYTE)\n HEADER_VALIDATORS = {\n-    bytes: (_VALID_HEADER_NAME_RE_BYTE, _VALID_HEADER_VALUE_RE_BYTE),\n-    str: (_VALID_HEADER_NAME_RE_STR, _VALID_HEADER_VALUE_RE_STR),\n+    bytes: _HEADER_VALIDATORS_BYTE,\n+    str: _HEADER_VALIDATORS_STR,\n }\n \n \n\n@@ -25,7 +25,12 @@ from . import certs\n from .__version__ import __version__\n \n # to_native_string is unused here, but imported here for backwards compatibility\n-from ._internal_utils import HEADER_VALIDATORS, to_native_string  # noqa: F401\n+from ._internal_utils import (  # noqa: F401\n+    _HEADER_VALIDATORS_BYTE,\n+    _HEADER_VALIDATORS_STR,\n+    HEADER_VALIDATORS,\n+    to_native_string,\n+)\n from .compat import (\n     Mapping,\n     basestring,\n@@ -1031,20 +1036,23 @@ def check_header_validity(header):\n     :param header: tuple, in the format (name, value).\n     \"\"\"\n     name, value = header\n+    _validate_header_part(header, name, 0)\n+    _validate_header_part(header, value, 1)\n \n-    for part in header:\n-        if type(part) not in HEADER_VALIDATORS:\n+\n+def _validate_header_part(header, header_part, header_validator_index):\n+    if isinstance(header_part, str):\n+        validator = _HEADER_VALIDATORS_STR[header_validator_index]\n+    elif isinstance(header_part, bytes):\n+        validator = _HEADER_VALIDATORS_BYTE[header_validator_index]\n+    else:\n         raise InvalidHeader(\n-                f\"Header part ({part!r}) from {{{name!r}: {value!r}}} must be \"\n-                f\"of type str or bytes, not {type(part)}\"\n+            f\"Header part ({header_part!r}) from {header} \"\n+            f\"must be of type str or bytes, not {type(header_part)}\"\n         )\n \n-    _validate_header_part(name, \"name\", HEADER_VALIDATORS[type(name)][0])\n-    _validate_header_part(value, \"value\", HEADER_VALIDATORS[type(value)][1])\n-\n-\n-def _validate_header_part(header_part, header_kind, validator):\n     if not validator.match(header_part):\n+        header_kind = \"name\" if header_validator_index == 0 else \"value\"\n         raise InvalidHeader(\n             f\"Invalid leading whitespace, reserved character(s), or return\"\n             f\"character(s) in header {header_kind}: {header_part!r}\"\n\n@@ -1752,6 +1752,31 @@ class TestRequests:\n         with pytest.raises(InvalidHeader):\n             requests.get(httpbin(\"get\"), headers=invalid_header)\n \n+    def test_header_with_subclass_types(self, httpbin):\n+        \"\"\"If the subclasses does not behave *exactly* like\n+        the base bytes/str classes, this is not supported.\n+        This test is for backwards compatibility.\n+        \"\"\"\n+\n+        class MyString(str):\n+            pass\n+\n+        class MyBytes(bytes):\n+            pass\n+\n+        r_str = requests.get(httpbin(\"get\"), headers={MyString(\"x-custom\"): \"myheader\"})\n+        assert r_str.request.headers[\"x-custom\"] == \"myheader\"\n+\n+        r_bytes = requests.get(\n+            httpbin(\"get\"), headers={MyBytes(b\"x-custom\"): b\"myheader\"}\n+        )\n+        assert r_bytes.request.headers[\"x-custom\"] == b\"myheader\"\n+\n+        r_mixed = requests.get(\n+            httpbin(\"get\"), headers={MyString(\"x-custom\"): MyBytes(b\"myheader\")}\n+        )\n+        assert r_mixed.request.headers[\"x-custom\"] == b\"myheader\"\n+\n     @pytest.mark.parametrize(\"files\", (\"foo\", b\"foo\", bytearray(b\"foo\")))\n     def test_can_send_objects_with_files(self, httpbin, files):\n         data = {\"a\": \"this is a string\"}\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#26bea1e498d6e234fbc9ce8e07c0389bac73810b", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 46 | Files Changed: 1 | Hunks: 4 | Methods Changed: 1 | Complexity Δ (Sum/Max): -5/0 | Churn Δ: 47 | Churn Cumulative: 1635 | Contributors (this commit): 53 | Commits (past 90d): 1 | Contributors (cumulative): 53 | DMM Complexity: 1.0\n\nDIFF:\n@@ -22,7 +22,6 @@ from urllib3.exceptions import ProxyError as _ProxyError\n from urllib3.exceptions import ReadTimeoutError, ResponseError\n from urllib3.exceptions import SSLError as _SSLError\n from urllib3.poolmanager import PoolManager, proxy_from_url\n-from urllib3.response import HTTPResponse\n from urllib3.util import Timeout as TimeoutSauce\n from urllib3.util import parse_url\n from urllib3.util.retry import Retry\n@@ -485,7 +484,6 @@ class HTTPAdapter(BaseAdapter):\n             timeout = TimeoutSauce(connect=timeout, read=timeout)\n \n         try:\n-            if not chunked:\n             resp = conn.urlopen(\n                 method=request.method,\n                 url=url,\n@@ -497,52 +495,9 @@ class HTTPAdapter(BaseAdapter):\n                 decode_content=False,\n                 retries=self.max_retries,\n                 timeout=timeout,\n+                chunked=chunked,\n             )\n \n-            # Send the request.\n-            else:\n-                if hasattr(conn, \"proxy_pool\"):\n-                    conn = conn.proxy_pool\n-\n-                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)\n-\n-                try:\n-                    skip_host = \"Host\" in request.headers\n-                    low_conn.putrequest(\n-                        request.method,\n-                        url,\n-                        skip_accept_encoding=True,\n-                        skip_host=skip_host,\n-                    )\n-\n-                    for header, value in request.headers.items():\n-                        low_conn.putheader(header, value)\n-\n-                    low_conn.endheaders()\n-\n-                    for i in request.body:\n-                        low_conn.send(hex(len(i))[2:].encode(\"utf-8\"))\n-                        low_conn.send(b\"\\r\\n\")\n-                        low_conn.send(i)\n-                        low_conn.send(b\"\\r\\n\")\n-                    low_conn.send(b\"0\\r\\n\\r\\n\")\n-\n-                    # Receive the response from the server\n-                    r = low_conn.getresponse()\n-\n-                    resp = HTTPResponse.from_httplib(\n-                        r,\n-                        pool=conn,\n-                        connection=low_conn,\n-                        preload_content=False,\n-                        decode_content=False,\n-                    )\n-                except Exception:\n-                    # If we hit any problems here, clean up the connection.\n-                    # Then, raise so that we can handle the actual exception.\n-                    low_conn.close()\n-                    raise\n-\n         except (ProtocolError, OSError) as err:\n             raise ConnectionError(err, request=request)\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#87d63de8739263bbe17034fba2285c79780da7e8", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 206 | Contributors (this commit): 6 | Commits (past 90d): 1 | Contributors (cumulative): 6 | DMM Complexity: None\n\nDIFF:\n@@ -5,8 +5,8 @@\n __title__ = \"requests\"\n __description__ = \"Python HTTP for Humans.\"\n __url__ = \"https://requests.readthedocs.io\"\n-__version__ = \"2.28.2\"\n-__build__ = 0x022802\n+__version__ = \"2.29.0\"\n+__build__ = 0x022900\n __author__ = \"Kenneth Reitz\"\n __author_email__ = \"me@kennethreitz.org\"\n __license__ = \"Apache 2.0\"\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#f2629e9e3c7ce3c3c8c025bcd8db551101cbc773", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 0 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 1 | Churn Cumulative: 1636 | Contributors (this commit): 54 | Commits (past 90d): 2 | Contributors (cumulative): 54 | DMM Complexity: 0.0\n\nDIFF:\n@@ -193,7 +193,6 @@ class HTTPAdapter(BaseAdapter):\n             num_pools=connections,\n             maxsize=maxsize,\n             block=block,\n-            strict=True,\n             **pool_kwargs,\n         )\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#2ad18e0e10e7d7ecd5384c378f25ec8821a10a29", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 6 | Lines Deleted: 6 | Files Changed: 3 | Hunks: 4 | Methods Changed: 1 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 12 | Churn Cumulative: 2167 | Contributors (this commit): 58 | Commits (past 90d): 4 | Contributors (cumulative): 78 | DMM Complexity: None\n\nDIFF:\n@@ -66,10 +66,10 @@ def check_compatibility(urllib3_version, chardet_version, charset_normalizer_ver\n     # Check urllib3 for compatibility.\n     major, minor, patch = urllib3_version  # noqa: F811\n     major, minor, patch = int(major), int(minor), int(patch)\n-    # urllib3 >= 1.21.1, <= 1.26\n-    assert major == 1\n+    # urllib3 >= 1.21.1\n+    assert major >= 1\n+    if major == 1:\n         assert minor >= 21\n-    assert minor <= 26\n \n     # Check charset_normalizer for compatibility.\n     if chardet_version:\n\n@@ -5,8 +5,8 @@\n __title__ = \"requests\"\n __description__ = \"Python HTTP for Humans.\"\n __url__ = \"https://requests.readthedocs.io\"\n-__version__ = \"2.29.0\"\n-__build__ = 0x022900\n+__version__ = \"2.30.0\"\n+__build__ = 0x023000\n __author__ = \"Kenneth Reitz\"\n __author_email__ = \"me@kennethreitz.org\"\n __license__ = \"Apache 2.0\"\n\n@@ -61,7 +61,7 @@ if sys.argv[-1] == \"publish\":\n requires = [\n     \"charset_normalizer>=2,<4\",\n     \"idna>=2.5,<4\",\n-    \"urllib3>=1.21.1,<1.27\",\n+    \"urllib3>=1.21.1,<3\",\n     \"certifi>=2017.4.17\",\n ]\n test_requirements = [\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#b639e66c816514e40604d46f0088fbceec1a5149", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 921 | Contributors (this commit): 45 | Commits (past 90d): 2 | Contributors (cumulative): 45 | DMM Complexity: None\n\nDIFF:\n@@ -65,7 +65,7 @@ requires = [\n     \"certifi>=2017.4.17\",\n ]\n test_requirements = [\n-    \"pytest-httpbin==0.0.7\",\n+    \"pytest-httpbin==2.0.0\",\n     \"pytest-cov\",\n     \"pytest-mock\",\n     \"pytest-xdist\",\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#74ea7cf7a6a27a4eeb2ae24e162bcc942a6706d5", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 23 | Lines Deleted: 1 | Files Changed: 2 | Hunks: 2 | Methods Changed: 2 | Complexity Δ (Sum/Max): 2/1 | Churn Δ: 24 | Churn Cumulative: 11125 | Contributors (this commit): 165 | Commits (past 90d): 2 | Contributors (cumulative): 194 | DMM Complexity: 0.0\n\nDIFF:\n@@ -324,7 +324,9 @@ class SessionRedirectMixin:\n         except KeyError:\n             username, password = None, None\n \n-        if username and password:\n+        # urllib3 handles proxy authorization for us in the standard adapter.\n+        # Avoid appending this to TLS tunneled requests where it may be leaked.\n+        if not scheme.startswith('https') and username and password:\n             headers[\"Proxy-Authorization\"] = _basic_auth_str(username, password)\n \n         return new_proxies\n\n@@ -647,6 +647,26 @@ class TestRequests:\n \n         assert sent_headers.get(\"Proxy-Authorization\") == proxy_auth_value\n \n+\n+    @pytest.mark.parametrize(\n+        \"url,has_proxy_auth\",\n+        (\n+            ('http://example.com', True),\n+            ('https://example.com', False),\n+        ),\n+    )\n+    def test_proxy_authorization_not_appended_to_https_request(self, url, has_proxy_auth):\n+        session = requests.Session()\n+        proxies = {\n+            'http': 'http://test:pass@localhost:8080',\n+            'https': 'http://test:pass@localhost:8090',\n+        }\n+        req = requests.Request('GET', url)\n+        prep = req.prepare()\n+        session.rebuild_proxies(prep, proxies)\n+\n+        assert ('Proxy-Authorization' in prep.headers) is has_proxy_auth\n+\n     def test_basicauth_with_netrc(self, httpbin):\n         auth = (\"user\", \"pass\")\n         wrong_auth = (\"wronguser\", \"wrongpass\")\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#147c8511ddbfa5e8f71bbf5c18ede0c4ceb3bba4", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 214 | Contributors (this commit): 6 | Commits (past 90d): 3 | Contributors (cumulative): 6 | DMM Complexity: None\n\nDIFF:\n@@ -5,8 +5,8 @@\n __title__ = \"requests\"\n __description__ = \"Python HTTP for Humans.\"\n __url__ = \"https://requests.readthedocs.io\"\n-__version__ = \"2.30.0\"\n-__build__ = 0x023000\n+__version__ = \"2.31.0\"\n+__build__ = 0x023100\n __author__ = \"Kenneth Reitz\"\n __author_email__ = \"me@kennethreitz.org\"\n __license__ = \"Apache 2.0\"\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#6e5b15d542a4e85945fd72066bb6cecbc3a82191", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 10 | Lines Deleted: 9 | Files Changed: 2 | Hunks: 7 | Methods Changed: 2 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 19 | Churn Cumulative: 11144 | Contributors (this commit): 165 | Commits (past 90d): 4 | Contributors (cumulative): 194 | DMM Complexity: 1.0\n\nDIFF:\n@@ -326,7 +326,7 @@ class SessionRedirectMixin:\n \n         # urllib3 handles proxy authorization for us in the standard adapter.\n         # Avoid appending this to TLS tunneled requests where it may be leaked.\n-        if not scheme.startswith('https') and username and password:\n+        if not scheme.startswith(\"https\") and username and password:\n             headers[\"Proxy-Authorization\"] = _basic_auth_str(username, password)\n \n         return new_proxies\n\n@@ -647,25 +647,26 @@ class TestRequests:\n \n         assert sent_headers.get(\"Proxy-Authorization\") == proxy_auth_value\n \n-\n     @pytest.mark.parametrize(\n         \"url,has_proxy_auth\",\n         (\n-            ('http://example.com', True),\n-            ('https://example.com', False),\n+            (\"http://example.com\", True),\n+            (\"https://example.com\", False),\n         ),\n     )\n-    def test_proxy_authorization_not_appended_to_https_request(self, url, has_proxy_auth):\n+    def test_proxy_authorization_not_appended_to_https_request(\n+        self, url, has_proxy_auth\n+    ):\n         session = requests.Session()\n         proxies = {\n-            'http': 'http://test:pass@localhost:8080',\n-            'https': 'http://test:pass@localhost:8090',\n+            \"http\": \"http://test:pass@localhost:8080\",\n+            \"https\": \"http://test:pass@localhost:8090\",\n         }\n-        req = requests.Request('GET', url)\n+        req = requests.Request(\"GET\", url)\n         prep = req.prepare()\n         session.rebuild_proxies(prep, proxies)\n \n-        assert ('Proxy-Authorization' in prep.headers) is has_proxy_auth\n+        assert (\"Proxy-Authorization\" in prep.headers) is has_proxy_auth\n \n     def test_basicauth_with_netrc(self, httpbin):\n         auth = (\"user\", \"pass\")\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
