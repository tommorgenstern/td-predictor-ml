{"custom_id": "fastapi#0cc031f4779fbaf26e3bfa0394d95711f5675394", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 13 | Lines Deleted: 502 | Files Changed: 2 | Hunks: 5 | Methods Changed: 19 | Complexity Δ (Sum/Max): -17/0 | Churn Δ: 515 | Churn Cumulative: 2201 | Contributors (this commit): 10 | Commits (past 90d): 2 | Contributors (cumulative): 13 | DMM Complexity: 0.0\n\nDIFF:\n@@ -1,15 +1,24 @@\n+import importlib\n from unittest.mock import patch\n \n import pytest\n from dirty_equals import IsDict\n from fastapi.testclient import TestClient\n \n+from ...utils import needs_py310\n \n-@pytest.fixture\n-def client():\n-    from docs_src.body.tutorial001 import app\n \n-    client = TestClient(app)\n+@pytest.fixture(\n+    name=\"client\",\n+    params=[\n+        \"tutorial001\",\n+        pytest.param(\"tutorial001_py310\", marks=needs_py310),\n+    ],\n+)\n+def get_client(request: pytest.FixtureRequest):\n+    mod = importlib.import_module(f\"docs_src.body.{request.param}\")\n+\n+    client = TestClient(mod.app)\n     return client\n \n \n\n@@ -1,498 +0,0 @@\n-from unittest.mock import patch\n-\n-import pytest\n-from dirty_equals import IsDict\n-from fastapi.testclient import TestClient\n-\n-from ...utils import needs_py310\n-\n-\n-@pytest.fixture\n-def client():\n-    from docs_src.body.tutorial001_py310 import app\n-\n-    client = TestClient(app)\n-    return client\n-\n-\n-@needs_py310\n-def test_body_float(client: TestClient):\n-    response = client.post(\"/items/\", json={\"name\": \"Foo\", \"price\": 50.5})\n-    assert response.status_code == 200\n-    assert response.json() == {\n-        \"name\": \"Foo\",\n-        \"price\": 50.5,\n-        \"description\": None,\n-        \"tax\": None,\n-    }\n-\n-\n-@needs_py310\n-def test_post_with_str_float(client: TestClient):\n-    response = client.post(\"/items/\", json={\"name\": \"Foo\", \"price\": \"50.5\"})\n-    assert response.status_code == 200\n-    assert response.json() == {\n-        \"name\": \"Foo\",\n-        \"price\": 50.5,\n-        \"description\": None,\n-        \"tax\": None,\n-    }\n-\n-\n-@needs_py310\n-def test_post_with_str_float_description(client: TestClient):\n-    response = client.post(\n-        \"/items/\", json={\"name\": \"Foo\", \"price\": \"50.5\", \"description\": \"Some Foo\"}\n-    )\n-    assert response.status_code == 200\n-    assert response.json() == {\n-        \"name\": \"Foo\",\n-        \"price\": 50.5,\n-        \"description\": \"Some Foo\",\n-        \"tax\": None,\n-    }\n-\n-\n-@needs_py310\n-def test_post_with_str_float_description_tax(client: TestClient):\n-    response = client.post(\n-        \"/items/\",\n-        json={\"name\": \"Foo\", \"price\": \"50.5\", \"description\": \"Some Foo\", \"tax\": 0.3},\n-    )\n-    assert response.status_code == 200\n-    assert response.json() == {\n-        \"name\": \"Foo\",\n-        \"price\": 50.5,\n-        \"description\": \"Some Foo\",\n-        \"tax\": 0.3,\n-    }\n-\n-\n-@needs_py310\n-def test_post_with_only_name(client: TestClient):\n-    response = client.post(\"/items/\", json={\"name\": \"Foo\"})\n-    assert response.status_code == 422\n-    assert response.json() == IsDict(\n-        {\n-            \"detail\": [\n-                {\n-                    \"type\": \"missing\",\n-                    \"loc\": [\"body\", \"price\"],\n-                    \"msg\": \"Field required\",\n-                    \"input\": {\"name\": \"Foo\"},\n-                }\n-            ]\n-        }\n-    ) | IsDict(\n-        # TODO: remove when deprecating Pydantic v1\n-        {\n-            \"detail\": [\n-                {\n-                    \"loc\": [\"body\", \"price\"],\n-                    \"msg\": \"field required\",\n-                    \"type\": \"value_error.missing\",\n-                }\n-            ]\n-        }\n-    )\n-\n-\n-@needs_py310\n-def test_post_with_only_name_price(client: TestClient):\n-    response = client.post(\"/items/\", json={\"name\": \"Foo\", \"price\": \"twenty\"})\n-    assert response.status_code == 422\n-    assert response.json() == IsDict(\n-        {\n-            \"detail\": [\n-                {\n-                    \"type\": \"float_parsing\",\n-                    \"loc\": [\"body\", \"price\"],\n-                    \"msg\": \"Input should be a valid number, unable to parse string as a number\",\n-                    \"input\": \"twenty\",\n-                }\n-            ]\n-        }\n-    ) | IsDict(\n-        # TODO: remove when deprecating Pydantic v1\n-        {\n-            \"detail\": [\n-                {\n-                    \"loc\": [\"body\", \"price\"],\n-                    \"msg\": \"value is not a valid float\",\n-                    \"type\": \"type_error.float\",\n-                }\n-            ]\n-        }\n-    )\n-\n-\n-@needs_py310\n-def test_post_with_no_data(client: TestClient):\n-    response = client.post(\"/items/\", json={})\n-    assert response.status_code == 422\n-    assert response.json() == IsDict(\n-        {\n-            \"detail\": [\n-                {\n-                    \"type\": \"missing\",\n-                    \"loc\": [\"body\", \"name\"],\n-                    \"msg\": \"Field required\",\n-                    \"input\": {},\n-                },\n-                {\n-                    \"type\": \"missing\",\n-                    \"loc\": [\"body\", \"price\"],\n-                    \"msg\": \"Field required\",\n-                    \"input\": {},\n-                },\n-            ]\n-        }\n-    ) | IsDict(\n-        # TODO: remove when deprecating Pydantic v1\n-        {\n-            \"detail\": [\n-                {\n-                    \"loc\": [\"body\", \"name\"],\n-                    \"msg\": \"field required\",\n-                    \"type\": \"value_error.missing\",\n-                },\n-                {\n-                    \"loc\": [\"body\", \"price\"],\n-                    \"msg\": \"field required\",\n-                    \"type\": \"value_error.missing\",\n-                },\n-            ]\n-        }\n-    )\n-\n-\n-@needs_py310\n-def test_post_with_none(client: TestClient):\n-    response = client.post(\"/items/\", json=None)\n-    assert response.status_code == 422\n-    assert response.json() == IsDict(\n-        {\n-            \"detail\": [\n-                {\n-                    \"type\": \"missing\",\n-                    \"loc\": [\"body\"],\n-                    \"msg\": \"Field required\",\n-                    \"input\": None,\n-                }\n-            ]\n-        }\n-    ) | IsDict(\n-        # TODO: remove when deprecating Pydantic v1\n-        {\n-            \"detail\": [\n-                {\n-                    \"loc\": [\"body\"],\n-                    \"msg\": \"field required\",\n-                    \"type\": \"value_error.missing\",\n-                }\n-            ]\n-        }\n-    )\n-\n-\n-@needs_py310\n-def test_post_broken_body(client: TestClient):\n-    response = client.post(\n-        \"/items/\",\n-        headers={\"content-type\": \"application/json\"},\n-        content=\"{some broken json}\",\n-    )\n-    assert response.status_code == 422, response.text\n-    assert response.json() == IsDict(\n-        {\n-            \"detail\": [\n-                {\n-                    \"type\": \"json_invalid\",\n-                    \"loc\": [\"body\", 1],\n-                    \"msg\": \"JSON decode error\",\n-                    \"input\": {},\n-                    \"ctx\": {\n-                        \"error\": \"Expecting property name enclosed in double quotes\"\n-                    },\n-                }\n-            ]\n-        }\n-    ) | IsDict(\n-        # TODO: remove when deprecating Pydantic v1\n-        {\n-            \"detail\": [\n-                {\n-                    \"loc\": [\"body\", 1],\n-                    \"msg\": \"Expecting property name enclosed in double quotes: line 1 column 2 (char 1)\",\n-                    \"type\": \"value_error.jsondecode\",\n-                    \"ctx\": {\n-                        \"msg\": \"Expecting property name enclosed in double quotes\",\n-                        \"doc\": \"{some broken json}\",\n-                        \"pos\": 1,\n-                        \"lineno\": 1,\n-                        \"colno\": 2,\n-                    },\n-                }\n-            ]\n-        }\n-    )\n-\n-\n-@needs_py310\n-def test_post_form_for_json(client: TestClient):\n-    response = client.post(\"/items/\", data={\"name\": \"Foo\", \"price\": 50.5})\n-    assert response.status_code == 422, response.text\n-    assert response.json() == IsDict(\n-        {\n-            \"detail\": [\n-                {\n-                    \"type\": \"model_attributes_type\",\n-                    \"loc\": [\"body\"],\n-                    \"msg\": \"Input should be a valid dictionary or object to extract fields from\",\n-                    \"input\": \"name=Foo&price=50.5\",\n-                }\n-            ]\n-        }\n-    ) | IsDict(\n-        # TODO: remove when deprecating Pydantic v1\n-        {\n-            \"detail\": [\n-                {\n-                    \"loc\": [\"body\"],\n-                    \"msg\": \"value is not a valid dict\",\n-                    \"type\": \"type_error.dict\",\n-                }\n-            ]\n-        }\n-    )\n-\n-\n-@needs_py310\n-def test_explicit_content_type(client: TestClient):\n-    response = client.post(\n-        \"/items/\",\n-        content='{\"name\": \"Foo\", \"price\": 50.5}',\n-        headers={\"Content-Type\": \"application/json\"},\n-    )\n-    assert response.status_code == 200, response.text\n-\n-\n-@needs_py310\n-def test_geo_json(client: TestClient):\n-    response = client.post(\n-        \"/items/\",\n-        content='{\"name\": \"Foo\", \"price\": 50.5}',\n-        headers={\"Content-Type\": \"application/geo+json\"},\n-    )\n-    assert response.status_code == 200, response.text\n-\n-\n-@needs_py310\n-def test_no_content_type_is_json(client: TestClient):\n-    response = client.post(\n-        \"/items/\",\n-        content='{\"name\": \"Foo\", \"price\": 50.5}',\n-    )\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\n-        \"name\": \"Foo\",\n-        \"description\": None,\n-        \"price\": 50.5,\n-        \"tax\": None,\n-    }\n-\n-\n-@needs_py310\n-def test_wrong_headers(client: TestClient):\n-    data = '{\"name\": \"Foo\", \"price\": 50.5}'\n-    response = client.post(\n-        \"/items/\", content=data, headers={\"Content-Type\": \"text/plain\"}\n-    )\n-    assert response.status_code == 422, response.text\n-    assert response.json() == IsDict(\n-        {\n-            \"detail\": [\n-                {\n-                    \"type\": \"model_attributes_type\",\n-                    \"loc\": [\"body\"],\n-                    \"msg\": \"Input should be a valid dictionary or object to extract fields from\",\n-                    \"input\": '{\"name\": \"Foo\", \"price\": 50.5}',\n-                }\n-            ]\n-        }\n-    ) | IsDict(\n-        # TODO: remove when deprecating Pydantic v1\n-        {\n-            \"detail\": [\n-                {\n-                    \"loc\": [\"body\"],\n-                    \"msg\": \"value is not a valid dict\",\n-                    \"type\": \"type_error.dict\",\n-                }\n-            ]\n-        }\n-    )\n-\n-    response = client.post(\n-        \"/items/\", content=data, headers={\"Content-Type\": \"application/geo+json-seq\"}\n-    )\n-    assert response.status_code == 422, response.text\n-    assert response.json() == IsDict(\n-        {\n-            \"detail\": [\n-                {\n-                    \"type\": \"model_attributes_type\",\n-                    \"loc\": [\"body\"],\n-                    \"msg\": \"Input should be a valid dictionary or object to extract fields from\",\n-                    \"input\": '{\"name\": \"Foo\", \"price\": 50.5}',\n-                }\n-            ]\n-        }\n-    ) | IsDict(\n-        # TODO: remove when deprecating Pydantic v1\n-        {\n-            \"detail\": [\n-                {\n-                    \"loc\": [\"body\"],\n-                    \"msg\": \"value is not a valid dict\",\n-                    \"type\": \"type_error.dict\",\n-                }\n-            ]\n-        }\n-    )\n-    response = client.post(\n-        \"/items/\", content=data, headers={\"Content-Type\": \"application/not-really-json\"}\n-    )\n-    assert response.status_code == 422, response.text\n-    assert response.json() == IsDict(\n-        {\n-            \"detail\": [\n-                {\n-                    \"type\": \"model_attributes_type\",\n-                    \"loc\": [\"body\"],\n-                    \"msg\": \"Input should be a valid dictionary or object to extract fields from\",\n-                    \"input\": '{\"name\": \"Foo\", \"price\": 50.5}',\n-                }\n-            ]\n-        }\n-    ) | IsDict(\n-        # TODO: remove when deprecating Pydantic v1\n-        {\n-            \"detail\": [\n-                {\n-                    \"loc\": [\"body\"],\n-                    \"msg\": \"value is not a valid dict\",\n-                    \"type\": \"type_error.dict\",\n-                }\n-            ]\n-        }\n-    )\n-\n-\n-@needs_py310\n-def test_other_exceptions(client: TestClient):\n-    with patch(\"json.loads\", side_effect=Exception):\n-        response = client.post(\"/items/\", json={\"test\": \"test2\"})\n-        assert response.status_code == 400, response.text\n-\n-\n-@needs_py310\n-def test_openapi_schema(client: TestClient):\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\n-        \"openapi\": \"3.1.0\",\n-        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n-        \"paths\": {\n-            \"/items/\": {\n-                \"post\": {\n-                    \"responses\": {\n-                        \"200\": {\n-                            \"description\": \"Successful Response\",\n-                            \"content\": {\"application/json\": {\"schema\": {}}},\n-                        },\n-                        \"422\": {\n-                            \"description\": \"Validation Error\",\n-                            \"content\": {\n-                                \"application/json\": {\n-                                    \"schema\": {\n-                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n-                                    }\n-                                }\n-                            },\n-                        },\n-                    },\n-                    \"summary\": \"Create Item\",\n-                    \"operationId\": \"create_item_items__post\",\n-                    \"requestBody\": {\n-                        \"content\": {\n-                            \"application/json\": {\n-                                \"schema\": {\"$ref\": \"#/components/schemas/Item\"}\n-                            }\n-                        },\n-                        \"required\": True,\n-                    },\n-                }\n-            }\n-        },\n-        \"components\": {\n-            \"schemas\": {\n-                \"Item\": {\n-                    \"title\": \"Item\",\n-                    \"required\": [\"name\", \"price\"],\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"name\": {\"title\": \"Name\", \"type\": \"string\"},\n-                        \"price\": {\"title\": \"Price\", \"type\": \"number\"},\n-                        \"description\": IsDict(\n-                            {\n-                                \"title\": \"Description\",\n-                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"null\"}],\n-                            }\n-                        )\n-                        | IsDict(\n-                            # TODO: remove when deprecating Pydantic v1\n-                            {\"title\": \"Description\", \"type\": \"string\"}\n-                        ),\n-                        \"tax\": IsDict(\n-                            {\n-                                \"title\": \"Tax\",\n-                                \"anyOf\": [{\"type\": \"number\"}, {\"type\": \"null\"}],\n-                            }\n-                        )\n-                        | IsDict(\n-                            # TODO: remove when deprecating Pydantic v1\n-                            {\"title\": \"Tax\", \"type\": \"number\"}\n-                        ),\n-                    },\n-                },\n-                \"ValidationError\": {\n-                    \"title\": \"ValidationError\",\n-                    \"required\": [\"loc\", \"msg\", \"type\"],\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"loc\": {\n-                            \"title\": \"Location\",\n-                            \"type\": \"array\",\n-                            \"items\": {\n-                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n-                            },\n-                        },\n-                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n-                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n-                    },\n-                },\n-                \"HTTPValidationError\": {\n-                    \"title\": \"HTTPValidationError\",\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"detail\": {\n-                            \"title\": \"Detail\",\n-                            \"type\": \"array\",\n-                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n-                        }\n-                    },\n-                },\n-            }\n-        },\n-    }\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#9b88c7c18a0019a729945b3d5c7e1bf6f0b1e139", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 17 | Lines Deleted: 834 | Files Changed: 5 | Hunks: 8 | Methods Changed: 22 | Complexity Δ (Sum/Max): -20/0 | Churn Δ: 851 | Churn Cumulative: 2906 | Contributors (this commit): 6 | Commits (past 90d): 5 | Contributors (cumulative): 14 | DMM Complexity: 0.0\n\nDIFF:\n@@ -1,13 +1,26 @@\n+import importlib\n+\n import pytest\n from dirty_equals import IsDict\n from fastapi.testclient import TestClient\n \n+from ...utils import needs_py39, needs_py310\n \n-@pytest.fixture(name=\"client\")\n-def get_client():\n-    from docs_src.body_fields.tutorial001 import app\n \n-    client = TestClient(app)\n+@pytest.fixture(\n+    name=\"client\",\n+    params=[\n+        \"tutorial001\",\n+        pytest.param(\"tutorial001_py310\", marks=needs_py310),\n+        \"tutorial001_an\",\n+        pytest.param(\"tutorial001_an_py39\", marks=needs_py39),\n+        pytest.param(\"tutorial001_an_py310\", marks=needs_py310),\n+    ],\n+)\n+def get_client(request: pytest.FixtureRequest):\n+    mod = importlib.import_module(f\"docs_src.body_fields.{request.param}\")\n+\n+    client = TestClient(mod.app)\n     return client\n \n \n\n@@ -1,203 +0,0 @@\n-import pytest\n-from dirty_equals import IsDict\n-from fastapi.testclient import TestClient\n-\n-\n-@pytest.fixture(name=\"client\")\n-def get_client():\n-    from docs_src.body_fields.tutorial001_an import app\n-\n-    client = TestClient(app)\n-    return client\n-\n-\n-def test_items_5(client: TestClient):\n-    response = client.put(\"/items/5\", json={\"item\": {\"name\": \"Foo\", \"price\": 3.0}})\n-    assert response.status_code == 200\n-    assert response.json() == {\n-        \"item_id\": 5,\n-        \"item\": {\"name\": \"Foo\", \"price\": 3.0, \"description\": None, \"tax\": None},\n-    }\n-\n-\n-def test_items_6(client: TestClient):\n-    response = client.put(\n-        \"/items/6\",\n-        json={\n-            \"item\": {\n-                \"name\": \"Bar\",\n-                \"price\": 0.2,\n-                \"description\": \"Some bar\",\n-                \"tax\": \"5.4\",\n-            }\n-        },\n-    )\n-    assert response.status_code == 200\n-    assert response.json() == {\n-        \"item_id\": 6,\n-        \"item\": {\n-            \"name\": \"Bar\",\n-            \"price\": 0.2,\n-            \"description\": \"Some bar\",\n-            \"tax\": 5.4,\n-        },\n-    }\n-\n-\n-def test_invalid_price(client: TestClient):\n-    response = client.put(\"/items/5\", json={\"item\": {\"name\": \"Foo\", \"price\": -3.0}})\n-    assert response.status_code == 422\n-    assert response.json() == IsDict(\n-        {\n-            \"detail\": [\n-                {\n-                    \"type\": \"greater_than\",\n-                    \"loc\": [\"body\", \"item\", \"price\"],\n-                    \"msg\": \"Input should be greater than 0\",\n-                    \"input\": -3.0,\n-                    \"ctx\": {\"gt\": 0.0},\n-                }\n-            ]\n-        }\n-    ) | IsDict(\n-        # TODO: remove when deprecating Pydantic v1\n-        {\n-            \"detail\": [\n-                {\n-                    \"ctx\": {\"limit_value\": 0},\n-                    \"loc\": [\"body\", \"item\", \"price\"],\n-                    \"msg\": \"ensure this value is greater than 0\",\n-                    \"type\": \"value_error.number.not_gt\",\n-                }\n-            ]\n-        }\n-    )\n-\n-\n-def test_openapi_schema(client: TestClient):\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\n-        \"openapi\": \"3.1.0\",\n-        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n-        \"paths\": {\n-            \"/items/{item_id}\": {\n-                \"put\": {\n-                    \"responses\": {\n-                        \"200\": {\n-                            \"description\": \"Successful Response\",\n-                            \"content\": {\"application/json\": {\"schema\": {}}},\n-                        },\n-                        \"422\": {\n-                            \"description\": \"Validation Error\",\n-                            \"content\": {\n-                                \"application/json\": {\n-                                    \"schema\": {\n-                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n-                                    }\n-                                }\n-                            },\n-                        },\n-                    },\n-                    \"summary\": \"Update Item\",\n-                    \"operationId\": \"update_item_items__item_id__put\",\n-                    \"parameters\": [\n-                        {\n-                            \"required\": True,\n-                            \"schema\": {\"title\": \"Item Id\", \"type\": \"integer\"},\n-                            \"name\": \"item_id\",\n-                            \"in\": \"path\",\n-                        }\n-                    ],\n-                    \"requestBody\": {\n-                        \"content\": {\n-                            \"application/json\": {\n-                                \"schema\": {\n-                                    \"$ref\": \"#/components/schemas/Body_update_item_items__item_id__put\"\n-                                }\n-                            }\n-                        },\n-                        \"required\": True,\n-                    },\n-                }\n-            }\n-        },\n-        \"components\": {\n-            \"schemas\": {\n-                \"Item\": {\n-                    \"title\": \"Item\",\n-                    \"required\": [\"name\", \"price\"],\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"name\": {\"title\": \"Name\", \"type\": \"string\"},\n-                        \"description\": IsDict(\n-                            {\n-                                \"title\": \"The description of the item\",\n-                                \"anyOf\": [\n-                                    {\"maxLength\": 300, \"type\": \"string\"},\n-                                    {\"type\": \"null\"},\n-                                ],\n-                            }\n-                        )\n-                        | IsDict(\n-                            # TODO: remove when deprecating Pydantic v1\n-                            {\n-                                \"title\": \"The description of the item\",\n-                                \"maxLength\": 300,\n-                                \"type\": \"string\",\n-                            }\n-                        ),\n-                        \"price\": {\n-                            \"title\": \"Price\",\n-                            \"exclusiveMinimum\": 0.0,\n-                            \"type\": \"number\",\n-                            \"description\": \"The price must be greater than zero\",\n-                        },\n-                        \"tax\": IsDict(\n-                            {\n-                                \"title\": \"Tax\",\n-                                \"anyOf\": [{\"type\": \"number\"}, {\"type\": \"null\"}],\n-                            }\n-                        )\n-                        | IsDict(\n-                            # TODO: remove when deprecating Pydantic v1\n-                            {\"title\": \"Tax\", \"type\": \"number\"}\n-                        ),\n-                    },\n-                },\n-                \"Body_update_item_items__item_id__put\": {\n-                    \"title\": \"Body_update_item_items__item_id__put\",\n-                    \"required\": [\"item\"],\n-                    \"type\": \"object\",\n-                    \"properties\": {\"item\": {\"$ref\": \"#/components/schemas/Item\"}},\n-                },\n-                \"ValidationError\": {\n-                    \"title\": \"ValidationError\",\n-                    \"required\": [\"loc\", \"msg\", \"type\"],\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"loc\": {\n-                            \"title\": \"Location\",\n-                            \"type\": \"array\",\n-                            \"items\": {\n-                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n-                            },\n-                        },\n-                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n-                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n-                    },\n-                },\n-                \"HTTPValidationError\": {\n-                    \"title\": \"HTTPValidationError\",\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"detail\": {\n-                            \"title\": \"Detail\",\n-                            \"type\": \"array\",\n-                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n-                        }\n-                    },\n-                },\n-            }\n-        },\n-    }\n\n@@ -1,209 +0,0 @@\n-import pytest\n-from dirty_equals import IsDict\n-from fastapi.testclient import TestClient\n-\n-from ...utils import needs_py310\n-\n-\n-@pytest.fixture(name=\"client\")\n-def get_client():\n-    from docs_src.body_fields.tutorial001_an_py310 import app\n-\n-    client = TestClient(app)\n-    return client\n-\n-\n-@needs_py310\n-def test_items_5(client: TestClient):\n-    response = client.put(\"/items/5\", json={\"item\": {\"name\": \"Foo\", \"price\": 3.0}})\n-    assert response.status_code == 200\n-    assert response.json() == {\n-        \"item_id\": 5,\n-        \"item\": {\"name\": \"Foo\", \"price\": 3.0, \"description\": None, \"tax\": None},\n-    }\n-\n-\n-@needs_py310\n-def test_items_6(client: TestClient):\n-    response = client.put(\n-        \"/items/6\",\n-        json={\n-            \"item\": {\n-                \"name\": \"Bar\",\n-                \"price\": 0.2,\n-                \"description\": \"Some bar\",\n-                \"tax\": \"5.4\",\n-            }\n-        },\n-    )\n-    assert response.status_code == 200\n-    assert response.json() == {\n-        \"item_id\": 6,\n-        \"item\": {\n-            \"name\": \"Bar\",\n-            \"price\": 0.2,\n-            \"description\": \"Some bar\",\n-            \"tax\": 5.4,\n-        },\n-    }\n-\n-\n-@needs_py310\n-def test_invalid_price(client: TestClient):\n-    response = client.put(\"/items/5\", json={\"item\": {\"name\": \"Foo\", \"price\": -3.0}})\n-    assert response.status_code == 422\n-    assert response.json() == IsDict(\n-        {\n-            \"detail\": [\n-                {\n-                    \"type\": \"greater_than\",\n-                    \"loc\": [\"body\", \"item\", \"price\"],\n-                    \"msg\": \"Input should be greater than 0\",\n-                    \"input\": -3.0,\n-                    \"ctx\": {\"gt\": 0.0},\n-                }\n-            ]\n-        }\n-    ) | IsDict(\n-        # TODO: remove when deprecating Pydantic v1\n-        {\n-            \"detail\": [\n-                {\n-                    \"ctx\": {\"limit_value\": 0},\n-                    \"loc\": [\"body\", \"item\", \"price\"],\n-                    \"msg\": \"ensure this value is greater than 0\",\n-                    \"type\": \"value_error.number.not_gt\",\n-                }\n-            ]\n-        }\n-    )\n-\n-\n-@needs_py310\n-def test_openapi_schema(client: TestClient):\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\n-        \"openapi\": \"3.1.0\",\n-        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n-        \"paths\": {\n-            \"/items/{item_id}\": {\n-                \"put\": {\n-                    \"responses\": {\n-                        \"200\": {\n-                            \"description\": \"Successful Response\",\n-                            \"content\": {\"application/json\": {\"schema\": {}}},\n-                        },\n-                        \"422\": {\n-                            \"description\": \"Validation Error\",\n-                            \"content\": {\n-                                \"application/json\": {\n-                                    \"schema\": {\n-                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n-                                    }\n-                                }\n-                            },\n-                        },\n-                    },\n-                    \"summary\": \"Update Item\",\n-                    \"operationId\": \"update_item_items__item_id__put\",\n-                    \"parameters\": [\n-                        {\n-                            \"required\": True,\n-                            \"schema\": {\"title\": \"Item Id\", \"type\": \"integer\"},\n-                            \"name\": \"item_id\",\n-                            \"in\": \"path\",\n-                        }\n-                    ],\n-                    \"requestBody\": {\n-                        \"content\": {\n-                            \"application/json\": {\n-                                \"schema\": {\n-                                    \"$ref\": \"#/components/schemas/Body_update_item_items__item_id__put\"\n-                                }\n-                            }\n-                        },\n-                        \"required\": True,\n-                    },\n-                }\n-            }\n-        },\n-        \"components\": {\n-            \"schemas\": {\n-                \"Item\": {\n-                    \"title\": \"Item\",\n-                    \"required\": [\"name\", \"price\"],\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"name\": {\"title\": \"Name\", \"type\": \"string\"},\n-                        \"description\": IsDict(\n-                            {\n-                                \"title\": \"The description of the item\",\n-                                \"anyOf\": [\n-                                    {\"maxLength\": 300, \"type\": \"string\"},\n-                                    {\"type\": \"null\"},\n-                                ],\n-                            }\n-                        )\n-                        | IsDict(\n-                            # TODO: remove when deprecating Pydantic v1\n-                            {\n-                                \"title\": \"The description of the item\",\n-                                \"maxLength\": 300,\n-                                \"type\": \"string\",\n-                            }\n-                        ),\n-                        \"price\": {\n-                            \"title\": \"Price\",\n-                            \"exclusiveMinimum\": 0.0,\n-                            \"type\": \"number\",\n-                            \"description\": \"The price must be greater than zero\",\n-                        },\n-                        \"tax\": IsDict(\n-                            {\n-                                \"title\": \"Tax\",\n-                                \"anyOf\": [{\"type\": \"number\"}, {\"type\": \"null\"}],\n-                            }\n-                        )\n-                        | IsDict(\n-                            # TODO: remove when deprecating Pydantic v1\n-                            {\"title\": \"Tax\", \"type\": \"number\"}\n-                        ),\n-                    },\n-                },\n-                \"Body_update_item_items__item_id__put\": {\n-                    \"title\": \"Body_update_item_items__item_id__put\",\n-                    \"required\": [\"item\"],\n-                    \"type\": \"object\",\n-                    \"properties\": {\"item\": {\"$ref\": \"#/components/schemas/Item\"}},\n-                },\n-                \"ValidationError\": {\n-                    \"title\": \"ValidationError\",\n-                    \"required\": [\"loc\", \"msg\", \"type\"],\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"loc\": {\n-                            \"title\": \"Location\",\n-                            \"type\": \"array\",\n-                            \"items\": {\n-                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n-                            },\n-                        },\n-                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n-                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n-                    },\n-                },\n-                \"HTTPValidationError\": {\n-                    \"title\": \"HTTPValidationError\",\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"detail\": {\n-                            \"title\": \"Detail\",\n-                            \"type\": \"array\",\n-                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n-                        }\n-                    },\n-                },\n-            }\n-        },\n-    }\n\n@@ -1,209 +0,0 @@\n-import pytest\n-from dirty_equals import IsDict\n-from fastapi.testclient import TestClient\n-\n-from ...utils import needs_py39\n-\n-\n-@pytest.fixture(name=\"client\")\n-def get_client():\n-    from docs_src.body_fields.tutorial001_an_py39 import app\n-\n-    client = TestClient(app)\n-    return client\n-\n-\n-@needs_py39\n-def test_items_5(client: TestClient):\n-    response = client.put(\"/items/5\", json={\"item\": {\"name\": \"Foo\", \"price\": 3.0}})\n-    assert response.status_code == 200\n-    assert response.json() == {\n-        \"item_id\": 5,\n-        \"item\": {\"name\": \"Foo\", \"price\": 3.0, \"description\": None, \"tax\": None},\n-    }\n-\n-\n-@needs_py39\n-def test_items_6(client: TestClient):\n-    response = client.put(\n-        \"/items/6\",\n-        json={\n-            \"item\": {\n-                \"name\": \"Bar\",\n-                \"price\": 0.2,\n-                \"description\": \"Some bar\",\n-                \"tax\": \"5.4\",\n-            }\n-        },\n-    )\n-    assert response.status_code == 200\n-    assert response.json() == {\n-        \"item_id\": 6,\n-        \"item\": {\n-            \"name\": \"Bar\",\n-            \"price\": 0.2,\n-            \"description\": \"Some bar\",\n-            \"tax\": 5.4,\n-        },\n-    }\n-\n-\n-@needs_py39\n-def test_invalid_price(client: TestClient):\n-    response = client.put(\"/items/5\", json={\"item\": {\"name\": \"Foo\", \"price\": -3.0}})\n-    assert response.status_code == 422\n-    assert response.json() == IsDict(\n-        {\n-            \"detail\": [\n-                {\n-                    \"type\": \"greater_than\",\n-                    \"loc\": [\"body\", \"item\", \"price\"],\n-                    \"msg\": \"Input should be greater than 0\",\n-                    \"input\": -3.0,\n-                    \"ctx\": {\"gt\": 0.0},\n-                }\n-            ]\n-        }\n-    ) | IsDict(\n-        # TODO: remove when deprecating Pydantic v1\n-        {\n-            \"detail\": [\n-                {\n-                    \"ctx\": {\"limit_value\": 0},\n-                    \"loc\": [\"body\", \"item\", \"price\"],\n-                    \"msg\": \"ensure this value is greater than 0\",\n-                    \"type\": \"value_error.number.not_gt\",\n-                }\n-            ]\n-        }\n-    )\n-\n-\n-@needs_py39\n-def test_openapi_schema(client: TestClient):\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\n-        \"openapi\": \"3.1.0\",\n-        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n-        \"paths\": {\n-            \"/items/{item_id}\": {\n-                \"put\": {\n-                    \"responses\": {\n-                        \"200\": {\n-                            \"description\": \"Successful Response\",\n-                            \"content\": {\"application/json\": {\"schema\": {}}},\n-                        },\n-                        \"422\": {\n-                            \"description\": \"Validation Error\",\n-                            \"content\": {\n-                                \"application/json\": {\n-                                    \"schema\": {\n-                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n-                                    }\n-                                }\n-                            },\n-                        },\n-                    },\n-                    \"summary\": \"Update Item\",\n-                    \"operationId\": \"update_item_items__item_id__put\",\n-                    \"parameters\": [\n-                        {\n-                            \"required\": True,\n-                            \"schema\": {\"title\": \"Item Id\", \"type\": \"integer\"},\n-                            \"name\": \"item_id\",\n-                            \"in\": \"path\",\n-                        }\n-                    ],\n-                    \"requestBody\": {\n-                        \"content\": {\n-                            \"application/json\": {\n-                                \"schema\": {\n-                                    \"$ref\": \"#/components/schemas/Body_update_item_items__item_id__put\"\n-                                }\n-                            }\n-                        },\n-                        \"required\": True,\n-                    },\n-                }\n-            }\n-        },\n-        \"components\": {\n-            \"schemas\": {\n-                \"Item\": {\n-                    \"title\": \"Item\",\n-                    \"required\": [\"name\", \"price\"],\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"name\": {\"title\": \"Name\", \"type\": \"string\"},\n-                        \"description\": IsDict(\n-                            {\n-                                \"title\": \"The description of the item\",\n-                                \"anyOf\": [\n-                                    {\"maxLength\": 300, \"type\": \"string\"},\n-                                    {\"type\": \"null\"},\n-                                ],\n-                            }\n-                        )\n-                        | IsDict(\n-                            # TODO: remove when deprecating Pydantic v1\n-                            {\n-                                \"title\": \"The description of the item\",\n-                                \"maxLength\": 300,\n-                                \"type\": \"string\",\n-                            }\n-                        ),\n-                        \"price\": {\n-                            \"title\": \"Price\",\n-                            \"exclusiveMinimum\": 0.0,\n-                            \"type\": \"number\",\n-                            \"description\": \"The price must be greater than zero\",\n-                        },\n-                        \"tax\": IsDict(\n-                            {\n-                                \"title\": \"Tax\",\n-                                \"anyOf\": [{\"type\": \"number\"}, {\"type\": \"null\"}],\n-                            }\n-                        )\n-                        | IsDict(\n-                            # TODO: remove when deprecating Pydantic v1\n-                            {\"title\": \"Tax\", \"type\": \"number\"}\n-                        ),\n-                    },\n-                },\n-                \"Body_update_item_items__item_id__put\": {\n-                    \"title\": \"Body_update_item_items__item_id__put\",\n-                    \"required\": [\"item\"],\n-                    \"type\": \"object\",\n-                    \"properties\": {\"item\": {\"$ref\": \"#/components/schemas/Item\"}},\n-                },\n-                \"ValidationError\": {\n-                    \"title\": \"ValidationError\",\n-                    \"required\": [\"loc\", \"msg\", \"type\"],\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"loc\": {\n-                            \"title\": \"Location\",\n-                            \"type\": \"array\",\n-                            \"items\": {\n-                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n-                            },\n-                        },\n-                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n-                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n-                    },\n-                },\n-                \"HTTPValidationError\": {\n-                    \"title\": \"HTTPValidationError\",\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"detail\": {\n-                            \"title\": \"Detail\",\n-                            \"type\": \"array\",\n-                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n-                        }\n-                    },\n-                },\n-            }\n-        },\n-    }\n\n@@ -1,209 +0,0 @@\n-import pytest\n-from dirty_equals import IsDict\n-from fastapi.testclient import TestClient\n-\n-from ...utils import needs_py310\n-\n-\n-@pytest.fixture(name=\"client\")\n-def get_client():\n-    from docs_src.body_fields.tutorial001_py310 import app\n-\n-    client = TestClient(app)\n-    return client\n-\n-\n-@needs_py310\n-def test_items_5(client: TestClient):\n-    response = client.put(\"/items/5\", json={\"item\": {\"name\": \"Foo\", \"price\": 3.0}})\n-    assert response.status_code == 200\n-    assert response.json() == {\n-        \"item_id\": 5,\n-        \"item\": {\"name\": \"Foo\", \"price\": 3.0, \"description\": None, \"tax\": None},\n-    }\n-\n-\n-@needs_py310\n-def test_items_6(client: TestClient):\n-    response = client.put(\n-        \"/items/6\",\n-        json={\n-            \"item\": {\n-                \"name\": \"Bar\",\n-                \"price\": 0.2,\n-                \"description\": \"Some bar\",\n-                \"tax\": \"5.4\",\n-            }\n-        },\n-    )\n-    assert response.status_code == 200\n-    assert response.json() == {\n-        \"item_id\": 6,\n-        \"item\": {\n-            \"name\": \"Bar\",\n-            \"price\": 0.2,\n-            \"description\": \"Some bar\",\n-            \"tax\": 5.4,\n-        },\n-    }\n-\n-\n-@needs_py310\n-def test_invalid_price(client: TestClient):\n-    response = client.put(\"/items/5\", json={\"item\": {\"name\": \"Foo\", \"price\": -3.0}})\n-    assert response.status_code == 422\n-    assert response.json() == IsDict(\n-        {\n-            \"detail\": [\n-                {\n-                    \"type\": \"greater_than\",\n-                    \"loc\": [\"body\", \"item\", \"price\"],\n-                    \"msg\": \"Input should be greater than 0\",\n-                    \"input\": -3.0,\n-                    \"ctx\": {\"gt\": 0.0},\n-                }\n-            ]\n-        }\n-    ) | IsDict(\n-        # TODO: remove when deprecating Pydantic v1\n-        {\n-            \"detail\": [\n-                {\n-                    \"ctx\": {\"limit_value\": 0},\n-                    \"loc\": [\"body\", \"item\", \"price\"],\n-                    \"msg\": \"ensure this value is greater than 0\",\n-                    \"type\": \"value_error.number.not_gt\",\n-                }\n-            ]\n-        }\n-    )\n-\n-\n-@needs_py310\n-def test_openapi_schema(client: TestClient):\n-    response = client.get(\"/openapi.json\")\n-    assert response.status_code == 200, response.text\n-    assert response.json() == {\n-        \"openapi\": \"3.1.0\",\n-        \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n-        \"paths\": {\n-            \"/items/{item_id}\": {\n-                \"put\": {\n-                    \"responses\": {\n-                        \"200\": {\n-                            \"description\": \"Successful Response\",\n-                            \"content\": {\"application/json\": {\"schema\": {}}},\n-                        },\n-                        \"422\": {\n-                            \"description\": \"Validation Error\",\n-                            \"content\": {\n-                                \"application/json\": {\n-                                    \"schema\": {\n-                                        \"$ref\": \"#/components/schemas/HTTPValidationError\"\n-                                    }\n-                                }\n-                            },\n-                        },\n-                    },\n-                    \"summary\": \"Update Item\",\n-                    \"operationId\": \"update_item_items__item_id__put\",\n-                    \"parameters\": [\n-                        {\n-                            \"required\": True,\n-                            \"schema\": {\"title\": \"Item Id\", \"type\": \"integer\"},\n-                            \"name\": \"item_id\",\n-                            \"in\": \"path\",\n-                        }\n-                    ],\n-                    \"requestBody\": {\n-                        \"content\": {\n-                            \"application/json\": {\n-                                \"schema\": {\n-                                    \"$ref\": \"#/components/schemas/Body_update_item_items__item_id__put\"\n-                                }\n-                            }\n-                        },\n-                        \"required\": True,\n-                    },\n-                }\n-            }\n-        },\n-        \"components\": {\n-            \"schemas\": {\n-                \"Item\": {\n-                    \"title\": \"Item\",\n-                    \"required\": [\"name\", \"price\"],\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"name\": {\"title\": \"Name\", \"type\": \"string\"},\n-                        \"description\": IsDict(\n-                            {\n-                                \"title\": \"The description of the item\",\n-                                \"anyOf\": [\n-                                    {\"maxLength\": 300, \"type\": \"string\"},\n-                                    {\"type\": \"null\"},\n-                                ],\n-                            }\n-                        )\n-                        | IsDict(\n-                            # TODO: remove when deprecating Pydantic v1\n-                            {\n-                                \"title\": \"The description of the item\",\n-                                \"maxLength\": 300,\n-                                \"type\": \"string\",\n-                            }\n-                        ),\n-                        \"price\": {\n-                            \"title\": \"Price\",\n-                            \"exclusiveMinimum\": 0.0,\n-                            \"type\": \"number\",\n-                            \"description\": \"The price must be greater than zero\",\n-                        },\n-                        \"tax\": IsDict(\n-                            {\n-                                \"title\": \"Tax\",\n-                                \"anyOf\": [{\"type\": \"number\"}, {\"type\": \"null\"}],\n-                            }\n-                        )\n-                        | IsDict(\n-                            # TODO: remove when deprecating Pydantic v1\n-                            {\"title\": \"Tax\", \"type\": \"number\"}\n-                        ),\n-                    },\n-                },\n-                \"Body_update_item_items__item_id__put\": {\n-                    \"title\": \"Body_update_item_items__item_id__put\",\n-                    \"required\": [\"item\"],\n-                    \"type\": \"object\",\n-                    \"properties\": {\"item\": {\"$ref\": \"#/components/schemas/Item\"}},\n-                },\n-                \"ValidationError\": {\n-                    \"title\": \"ValidationError\",\n-                    \"required\": [\"loc\", \"msg\", \"type\"],\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"loc\": {\n-                            \"title\": \"Location\",\n-                            \"type\": \"array\",\n-                            \"items\": {\n-                                \"anyOf\": [{\"type\": \"string\"}, {\"type\": \"integer\"}]\n-                            },\n-                        },\n-                        \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n-                        \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n-                    },\n-                },\n-                \"HTTPValidationError\": {\n-                    \"title\": \"HTTPValidationError\",\n-                    \"type\": \"object\",\n-                    \"properties\": {\n-                        \"detail\": {\n-                            \"title\": \"Detail\",\n-                            \"type\": \"array\",\n-                            \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n-                        }\n-                    },\n-                },\n-            }\n-        },\n-    }\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
