{"custom_id": "flask#61d5e6a4d4058accec957901be4d1efe2f3f71fa", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 2 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 118 | Contributors (this commit): 1 | Commits (past 90d): 7 | Contributors (cumulative): 2 | DMM Complexity: 0.0\n\nDIFF:\n@@ -26,7 +26,6 @@ def fix_imports(red):\n                 package = values[2].value\n                 modules = from_imports[x].modules()\n                 r = \"{},\" * len(modules)\n-                print modules\n                 from_imports[x].replace(\"from flask_%s import %s\"\n                                         % (package, r.format(*modules)[:-1]))\n             # Case 2\n\n@@ -9,6 +9,7 @@ from flask.ext.foo import (bam,\n                            b\n )\n \n+import flask.ext.foo\n \n from flask.ext import foo\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#c90c4e5e8c796e5dbfa32b30adf68c8582f6162a", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 48 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 5 | Methods Changed: 5 | Complexity Δ (Sum/Max): 6/6 | Churn Δ: 50 | Churn Cumulative: 152 | Contributors (this commit): 1 | Commits (past 90d): 5 | Contributors (cumulative): 1 | DMM Complexity: 1.0\n\nDIFF:\n@@ -1,22 +1,47 @@\n-# CASE 1 - from flask.ext.foo import bam --> from flask_foo import bam\n-# CASE 2 - from flask.ext import foo --> import flask_foo as foo\n+# Script which modifies source code away from the deprecated \"flask.ext\"\n+# format. Does not yet fully support imports in the style:\n+#\n+# \"import flask.ext.foo\"\n+#\n+# these are converted to \"import flask_foo\" in the\n+# main import statement, but does not handle function calls in the source.\n+#\n+# Run in the terminal by typing: `python flaskext_migrate.py <source_file.py>`\n+#\n+# Author: Keyan Pishdadian 2015\n \n from redbaron import RedBaron\n import sys\n \n \n def read_source(input_file):\n+    \"\"\"Parses the input_file into a RedBaron FST.\"\"\"\n     with open(input_file, \"r\") as source_code:\n         red = RedBaron(source_code.read())\n     return red\n \n \n def write_source(red, input_file):\n+    \"\"\"Overwrites the input_file once the FST has been modified.\"\"\"\n     with open(input_file, \"w\") as source_code:\n         source_code.write(red.dumps())\n \n \n def fix_imports(red):\n+    \"\"\"Wrapper which fixes \"from\" style imports and then \"import\" style.\"\"\"\n+    red = fix_standard_imports(red)\n+    red = fix_from_imports(red)\n+    return red\n+\n+\n+def fix_from_imports(red):\n+    \"\"\"\n+    Converts \"from\" style imports to not use \"flask.ext\".\n+\n+    Handles:\n+    Case 1: from flask.ext.foo import bam --> from flask_foo import bam\n+    Case 2: from flask.ext import foo --> import flask_foo as foo\n+    \"\"\"\n     from_imports = red.find_all(\"FromImport\")\n     for x in range(len(from_imports)):\n         values = from_imports[x].value\n@@ -33,6 +58,27 @@ def fix_imports(red):\n                 module = from_imports[x].modules()[0]\n                 from_imports[x].replace(\"import flask_%s as %s\"\n                                         % (module, module))\n+    return red\n+\n+\n+def fix_standard_imports(red):\n+    \"\"\"\n+    Handles import modification in the form:\n+    import flask.ext.foo\" --> import flask_foo\n+\n+    Does not modify function calls elsewhere in the source outside of the\n+    original import statement.\n+    \"\"\"\n+    imports = red.find_all(\"ImportNode\")\n+    for x in range(len(imports)):\n+        values = imports[x].value\n+        try:\n+            if (values[x].value[0].value == 'flask' and\n+            values[x].value[1].value == 'ext'):\n+                package = values[x].value[2].value\n+                imports[x].replace(\"import flask_%s\" % package)\n+        except IndexError:\n+            pass\n \n     return red\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#4a9e34a57476c92a4147f9ecafc357a681f1a19a", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 5 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 7 | Churn Cumulative: 159 | Contributors (this commit): 1 | Commits (past 90d): 6 | Contributors (cumulative): 1 | DMM Complexity: 1.0\n\nDIFF:\n@@ -83,8 +83,11 @@ def fix_standard_imports(red):\n     return red\n \n \n-if __name__ == \"__main__\":\n-    input_file = sys.argv[1]\n+def fix(input_file):\n     ast = read_source(input_file)\n     new_ast = fix_imports(ast)\n     write_source(new_ast, input_file)\n+\n+if __name__ == \"__main__\":\n+    input_file = sys.argv[1]\n+    fix(input_file)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#96d81c297adddf034c8eef6b2c76cbd9181d6d22", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 3 | Lines Deleted: 4 | Files Changed: 1 | Hunks: 1 | Methods Changed: 2 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 7 | Churn Cumulative: 166 | Contributors (this commit): 1 | Commits (past 90d): 7 | Contributors (cumulative): 1 | DMM Complexity: 0.0\n\nDIFF:\n@@ -83,10 +83,9 @@ def fix_standard_imports(red):\n     return red\n \n \n-def fix(input_file):\n-    ast = read_source(input_file)\n-    new_ast = fix_imports(ast)\n-    write_source(new_ast, input_file)\n+def fix(ast):\n+    \"\"\"Wrapper which allows for testing when not running from shell\"\"\"\n+    return fix_imports(ast).dumps()\n \n if __name__ == \"__main__\":\n     input_file = sys.argv[1]\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#0cf5881312a2256607cebe36938405a6fe5a820e", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 40 | Lines Deleted: 34 | Files Changed: 2 | Hunks: 2 | Methods Changed: 6 | Complexity Δ (Sum/Max): 1/5 | Churn Δ: 74 | Churn Cumulative: 90 | Contributors (this commit): 1 | Commits (past 90d): 5 | Contributors (cumulative): 2 | DMM Complexity: 1.0\n\nDIFF:\n@@ -1,34 +0,0 @@\n-from flask.ext.foo import \\\n-    bam, \\\n-    crackle\n-\n-from flask.ext import foo\n-\n-from flask.ext.foo import (bam,\n-                           a,\n-                           b\n-)\n-\n-import flask.ext.foo\n-\n-from flask.ext import foo\n-\n-import sys\n-\n-def migrate(old_file):\n-    new_file = open(\"temp.py\", \"w\")\n-    for line in old_file:\n-        if line[0, 15] is \"from flask.ext\":\n-            if line[15] == '.':\n-                import_statement = line[16::].split(' ')\n-                extension = import_statement[0]\n-                line = line. replace(\"flask.ext.\" + extension,\n-                                     \"flask_\" + extension)\n-            else:\n-                pass\n-\n-        new_file.write(line)\n-\n-\n-if __name__ == \"__main__\":\n-    old_file = open(sys.arv[1])\n\n@@ -0,0 +1,40 @@\n+# Tester for the flaskext_migrate.py module located in flask/scripts/\n+#\n+# Author: Keyan Pishdadian\n+\n+import pytest\n+from redbaron import RedBaron\n+import flaskext_migrate as migrate\n+\n+\n+def test_simple_from_import():\n+    red = RedBaron(\"from flask.ext import foo\")\n+    output = migrate.fix(red)\n+    assert output == \"import flask_foo as foo\"\n+\n+\n+def test_from_to_from_import():\n+    red = RedBaron(\"from flask.ext.foo import bar\")\n+    output = migrate.fix(red)\n+    assert output == \"from flask_foo import bar\"\n+\n+\n+def test_multiple_import():\n+    red = RedBaron(\"from flask.ext.foo import bar, foobar, something\")\n+    output = migrate.fix(red)\n+    assert output == \"from flask_foo import bar,foobar,something\"\n+\n+\n+def test_multiline_import():\n+    red = RedBaron(\"from flask.ext.foo import \\\n+                    bar,\\\n+                    foobar,\\\n+                    something\")\n+    output = migrate.fix(red)\n+    assert output == \"from flask_foo import bar,foobar,something\"\n+\n+\n+def test_module_import():\n+    red = RedBaron(\"import flask.ext.foo\")\n+    output = migrate.fix(red)\n+    assert output == \"import flask_foo\"\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#37217e85b80c389208cd3396c2cdc4b89bd46bcf", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 3 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 170 | Contributors (this commit): 1 | Commits (past 90d): 8 | Contributors (cumulative): 1 | DMM Complexity: None\n\nDIFF:\n@@ -89,4 +89,6 @@ def fix(ast):\n \n if __name__ == \"__main__\":\n     input_file = sys.argv[1]\n-    fix(input_file)\n+    ast = read_source(input_file)\n+    ast = fix_imports(ast)\n+    write_source(ast, input_file)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#b759aa2b955cccf7050ece74b84c32089443e47e", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 29 | Lines Deleted: 15 | Files Changed: 2 | Hunks: 12 | Methods Changed: 4 | Complexity Δ (Sum/Max): 2/1 | Churn Δ: 44 | Churn Cumulative: 254 | Contributors (this commit): 1 | Commits (past 90d): 11 | Contributors (cumulative): 2 | DMM Complexity: 0.0\n\nDIFF:\n@@ -43,20 +43,25 @@ def fix_from_imports(red):\n     Case 2: from flask.ext import foo --> import flask_foo as foo\n     \"\"\"\n     from_imports = red.find_all(\"FromImport\")\n-    for x in range(len(from_imports)):\n-        values = from_imports[x].value\n+    for x, node in enumerate(from_imports):\n+        values = node.value\n         if (values[0].value == 'flask') and (values[1].value == 'ext'):\n             # Case 1\n-            if len(from_imports[x].value) == 3:\n+            if len(node.value) == 3:\n                 package = values[2].value\n-                modules = from_imports[x].modules()\n+                modules = node.modules()\n+                if len(modules) > 1:\n                     r = \"{},\" * len(modules)\n-                from_imports[x].replace(\"from flask_%s import %s\"\n+                    node.replace(\"from flask_%s import %s\"\n                                  % (package, r.format(*modules)[:-1]))\n+                else:\n+                    name = node.names()[0]\n+                    node.replace(\"from flask_%s import %s as %s\"\n+                                 % (package, modules.pop(), name))\n             # Case 2\n             else:\n-                module = from_imports[x].modules()[0]\n-                from_imports[x].replace(\"import flask_%s as %s\"\n+                module = node.modules()[0]\n+                node.replace(\"import flask_%s as %s\"\n                              % (module, module))\n     return red\n \n@@ -70,13 +75,13 @@ def fix_standard_imports(red):\n     original import statement.\n     \"\"\"\n     imports = red.find_all(\"ImportNode\")\n-    for x in range(len(imports)):\n-        values = imports[x].value\n+    for x, node in enumerate(imports):\n         try:\n-            if (values[x].value[0].value == 'flask' and\n-            values[x].value[1].value == 'ext'):\n-                package = values[x].value[2].value\n-                imports[x].replace(\"import flask_%s\" % package)\n+            if (node.value[0].value == 'flask' and\n+               node.value[1].value == 'ext'):\n+                package = node.value[2].value\n+                name = node.names()[0]\n+                imports[x].replace(\"import flask_%s as %s\" % (package, name))\n         except IndexError:\n             pass\n \n@@ -88,6 +93,8 @@ def fix(ast):\n     return fix_imports(ast).dumps()\n \n if __name__ == \"__main__\":\n+    if len(sys.argv) < 2:\n+        sys.exit(\"No filename was included, please try again.\")\n     input_file = sys.argv[1]\n     ast = read_source(input_file)\n     ast = fix_imports(ast)\n\n@@ -1,7 +1,8 @@\n # Tester for the flaskext_migrate.py module located in flask/scripts/\n #\n # Author: Keyan Pishdadian\n-\n+import sys\n+sys.path.append('scripts')\n import pytest\n from redbaron import RedBaron\n import flaskext_migrate as migrate\n@@ -16,7 +17,7 @@ def test_simple_from_import():\n def test_from_to_from_import():\n     red = RedBaron(\"from flask.ext.foo import bar\")\n     output = migrate.fix(red)\n-    assert output == \"from flask_foo import bar\"\n+    assert output == \"from flask_foo import bar as bar\"\n \n \n def test_multiple_import():\n@@ -38,3 +39,9 @@ def test_module_import():\n     red = RedBaron(\"import flask.ext.foo\")\n     output = migrate.fix(red)\n     assert output == \"import flask_foo\"\n+\n+\n+def test_module_import():\n+    red = RedBaron(\"from flask.ext.foo import bar as baz\")\n+    output = migrate.fix(red)\n+    assert output == \"from flask_foo import bar as baz\"\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#1479cf80f635164b06767454fdd9e5d37853b307", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 0 | Lines Deleted: 47 | Files Changed: 1 | Hunks: 1 | Methods Changed: 5 | Complexity Δ (Sum/Max): -6/0 | Churn Δ: 47 | Churn Cumulative: 98 | Contributors (this commit): 1 | Commits (past 90d): 3 | Contributors (cumulative): 1 | DMM Complexity: 0.0\n\nDIFF:\n@@ -1,47 +0,0 @@\n-# Tester for the flaskext_migrate.py module located in flask/scripts/\n-#\n-# Author: Keyan Pishdadian\n-import sys\n-sys.path.append('scripts')\n-import pytest\n-from redbaron import RedBaron\n-import flaskext_migrate as migrate\n-\n-\n-def test_simple_from_import():\n-    red = RedBaron(\"from flask.ext import foo\")\n-    output = migrate.fix(red)\n-    assert output == \"import flask_foo as foo\"\n-\n-\n-def test_from_to_from_import():\n-    red = RedBaron(\"from flask.ext.foo import bar\")\n-    output = migrate.fix(red)\n-    assert output == \"from flask_foo import bar as bar\"\n-\n-\n-def test_multiple_import():\n-    red = RedBaron(\"from flask.ext.foo import bar, foobar, something\")\n-    output = migrate.fix(red)\n-    assert output == \"from flask_foo import bar,foobar,something\"\n-\n-\n-def test_multiline_import():\n-    red = RedBaron(\"from flask.ext.foo import \\\n-                    bar,\\\n-                    foobar,\\\n-                    something\")\n-    output = migrate.fix(red)\n-    assert output == \"from flask_foo import bar,foobar,something\"\n-\n-\n-def test_module_import():\n-    red = RedBaron(\"import flask.ext.foo\")\n-    output = migrate.fix(red)\n-    assert output == \"import flask_foo\"\n-\n-\n-def test_module_import():\n-    red = RedBaron(\"from flask.ext.foo import bar as baz\")\n-    output = migrate.fix(red)\n-    assert output == \"from flask_foo import bar as baz\"\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#9cbe83ef0d03a07a491bd26ecbe508a348ed48a1", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 81 | Lines Deleted: 7 | Files Changed: 2 | Hunks: 8 | Methods Changed: 10 | Complexity Δ (Sum/Max): 13/7 | Churn Δ: 88 | Churn Cumulative: 291 | Contributors (this commit): 1 | Commits (past 90d): 11 | Contributors (cumulative): 2 | DMM Complexity: 1.0\n\nDIFF:\n@@ -50,14 +50,14 @@ def fix_from_imports(red):\n             if len(node.value) == 3:\n                 package = values[2].value\n                 modules = node.modules()\n+                module_string = _get_modules(modules)\n                 if len(modules) > 1:\n-                    r = \"{},\" * len(modules)\n                     node.replace(\"from flask_%s import %s\"\n-                                 % (package, r.format(*modules)[:-1]))\n+                                 % (package, module_string))\n                 else:\n                     name = node.names()[0]\n                     node.replace(\"from flask_%s import %s as %s\"\n-                                 % (package, modules.pop(), name))\n+                                 % (package, module_string, name))\n             # Case 2\n             else:\n                 module = node.modules()[0]\n@@ -88,13 +88,36 @@ def fix_standard_imports(red):\n     return red\n \n \n-def fix(ast):\n-    \"\"\"Wrapper which allows for testing when not running from shell\"\"\"\n-    return fix_imports(ast).dumps()\n+def _get_modules(module):\n+    \"\"\"\n+    Takes a list of modules and converts into a string\n \n-if __name__ == \"__main__\":\n+    The module list can include parens, this function checks each element in\n+    the list, if there is a paren then it does not add a comma before the next\n+    element. Otherwise a comma and space is added. This is to preserve module\n+    imports which are multi-line and/or occur within parens. While also not\n+    affecting imports which are not enclosed.\n+    \"\"\"\n+    modules_string = [cur + ', ' if cur.isalnum() and next.isalnum()\n+                      else cur\n+                      for (cur, next) in zip(module, module[1:]+[''])]\n+\n+    return ''.join(modules_string)\n+\n+\n+def check_user_input():\n+    \"\"\"Exits and gives error message if no argument is passed in the shell.\"\"\"\n     if len(sys.argv) < 2:\n         sys.exit(\"No filename was included, please try again.\")\n+\n+\n+def fix(ast):\n+    \"\"\"Wrapper which allows for testing when not running from shell.\"\"\"\n+    return fix_imports(ast).dumps()\n+\n+\n+if __name__ == \"__main__\":\n+    check_user_input()\n     input_file = sys.argv[1]\n     ast = read_source(input_file)\n     ast = fix_imports(ast)\n\n@@ -0,0 +1,51 @@\n+# Tester for the flaskext_migrate.py module located in flask/scripts/\n+#\n+# Author: Keyan Pishdadian\n+import pytest\n+from redbaron import RedBaron\n+import flaskext_migrate as migrate\n+\n+\n+def test_simple_from_import():\n+    red = RedBaron(\"from flask.ext import foo\")\n+    output = migrate.fix(red)\n+    assert output == \"import flask_foo as foo\"\n+\n+\n+def test_from_to_from_import():\n+    red = RedBaron(\"from flask.ext.foo import bar\")\n+    output = migrate.fix(red)\n+    assert output == \"from flask_foo import bar as bar\"\n+\n+\n+def test_multiple_import():\n+    red = RedBaron(\"from flask.ext.foo import bar, foobar, something\")\n+    output = migrate.fix(red)\n+    assert output == \"from flask_foo import bar, foobar, something\"\n+\n+\n+def test_multiline_import():\n+    red = RedBaron(\"from flask.ext.foo import \\\n+                    bar,\\\n+                    foobar,\\\n+                    something\")\n+    output = migrate.fix(red)\n+    assert output == \"from flask_foo import bar, foobar, something\"\n+\n+\n+def test_module_import():\n+    red = RedBaron(\"import flask.ext.foo\")\n+    output = migrate.fix(red)\n+    assert output == \"import flask_foo\"\n+\n+\n+def test_module_import():\n+    red = RedBaron(\"from flask.ext.foo import bar as baz\")\n+    output = migrate.fix(red)\n+    assert output == \"from flask_foo import bar as baz\"\n+\n+\n+def test_parens_import():\n+    red = RedBaron(\"from flask.ext.foo import (bar, foo, foobar)\")\n+    output = migrate.fix(red)\n+    assert output == \"from flask_foo import (bar, foo, foobar)\"\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#4cb311b9455375f6497e7ecb6c931e09b1917d60", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 56 | Lines Deleted: 21 | Files Changed: 2 | Hunks: 18 | Methods Changed: 15 | Complexity Δ (Sum/Max): 8/6 | Churn Δ: 77 | Churn Cumulative: 368 | Contributors (this commit): 1 | Commits (past 90d): 13 | Contributors (cumulative): 2 | DMM Complexity: 1.0\n\nDIFF:\n@@ -70,18 +70,15 @@ def fix_standard_imports(red):\n     \"\"\"\n     Handles import modification in the form:\n     import flask.ext.foo\" --> import flask_foo\n-\n-    Does not modify function calls elsewhere in the source outside of the\n-    original import statement.\n     \"\"\"\n     imports = red.find_all(\"ImportNode\")\n     for x, node in enumerate(imports):\n         try:\n-            if (node.value[0].value == 'flask' and\n-               node.value[1].value == 'ext'):\n-                package = node.value[2].value\n-                name = node.names()[0]\n-                imports[x].replace(\"import flask_%s as %s\" % (package, name))\n+            if (node.value[0].value[0].value == 'flask' and\n+               node.value[0].value[1].value == 'ext'):\n+                package = node.value[0].value[2]\n+                name = node.names()[0].split('.')[-1]\n+                node.replace(\"import flask_%s as %s\" % (package, name))\n         except IndexError:\n             pass\n \n@@ -90,7 +87,7 @@ def fix_standard_imports(red):\n \n def _get_modules(module):\n     \"\"\"\n-    Takes a list of modules and converts into a string\n+    Takes a list of modules and converts into a string.\n \n     The module list can include parens, this function checks each element in\n     the list, if there is a paren then it does not add a comma before the next\n@@ -105,20 +102,46 @@ def _get_modules(module):\n     return ''.join(modules_string)\n \n \n+def fix_function_calls(red):\n+    \"\"\"\n+    Modifies function calls in the source to reflect import changes.\n+\n+    Searches the AST for AtomtrailerNodes and replaces them.\n+    \"\"\"\n+    atoms = red.find_all(\"Atomtrailers\")\n+    for x, node in enumerate(atoms):\n+        try:\n+            if (node.value[0].value == 'flask' and\n+               node.value[1].value == 'ext'):\n+                node.replace(\"flask_foo%s\" % node.value[3])\n+        except IndexError:\n+            pass\n+\n+    return red\n+\n+\n def check_user_input():\n     \"\"\"Exits and gives error message if no argument is passed in the shell.\"\"\"\n     if len(sys.argv) < 2:\n         sys.exit(\"No filename was included, please try again.\")\n \n \n-def fix(ast):\n+def fix_tester(ast):\n     \"\"\"Wrapper which allows for testing when not running from shell.\"\"\"\n-    return fix_imports(ast).dumps()\n+    ast = fix_imports(ast)\n+    ast = fix_function_calls(ast)\n+    return ast.dumps()\n \n \n-if __name__ == \"__main__\":\n+def fix():\n+    \"\"\"Wrapper for user argument checking and import fixing.\"\"\"\n     check_user_input()\n     input_file = sys.argv[1]\n     ast = read_source(input_file)\n     ast = fix_imports(ast)\n+    ast = fix_function_calls(ast)\n     write_source(ast, input_file)\n+\n+\n+if __name__ == \"__main__\":\n+    fix()\n\n@@ -8,19 +8,19 @@ import flaskext_migrate as migrate\n \n def test_simple_from_import():\n     red = RedBaron(\"from flask.ext import foo\")\n-    output = migrate.fix(red)\n+    output = migrate.fix_tester(red)\n     assert output == \"import flask_foo as foo\"\n \n \n def test_from_to_from_import():\n     red = RedBaron(\"from flask.ext.foo import bar\")\n-    output = migrate.fix(red)\n+    output = migrate.fix_tester(red)\n     assert output == \"from flask_foo import bar as bar\"\n \n \n def test_multiple_import():\n     red = RedBaron(\"from flask.ext.foo import bar, foobar, something\")\n-    output = migrate.fix(red)\n+    output = migrate.fix_tester(red)\n     assert output == \"from flask_foo import bar, foobar, something\"\n \n \n@@ -29,23 +29,35 @@ def test_multiline_import():\n                     bar,\\\n                     foobar,\\\n                     something\")\n-    output = migrate.fix(red)\n+    output = migrate.fix_tester(red)\n     assert output == \"from flask_foo import bar, foobar, something\"\n \n \n def test_module_import():\n     red = RedBaron(\"import flask.ext.foo\")\n-    output = migrate.fix(red)\n-    assert output == \"import flask_foo\"\n+    output = migrate.fix_tester(red)\n+    assert output == \"import flask_foo as foo\"\n \n \n-def test_module_import():\n+def test_named_module_import():\n+    red = RedBaron(\"import flask.ext.foo as foobar\")\n+    output = migrate.fix_tester(red)\n+    assert output == \"import flask_foo as foobar\"\n+\n+\n+def test__named_from_import():\n     red = RedBaron(\"from flask.ext.foo import bar as baz\")\n-    output = migrate.fix(red)\n+    output = migrate.fix_tester(red)\n     assert output == \"from flask_foo import bar as baz\"\n \n \n def test_parens_import():\n     red = RedBaron(\"from flask.ext.foo import (bar, foo, foobar)\")\n-    output = migrate.fix(red)\n+    output = migrate.fix_tester(red)\n     assert output == \"from flask_foo import (bar, foo, foobar)\"\n+\n+\n+def test_function_call_migration():\n+    red = RedBaron(\"flask.ext.foo(var)\")\n+    output = migrate.fix_tester(red)\n+    assert output == \"flask_foo(var)\"\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#77ed4661011483cfdb546eb49e89cc8d5cc67be9", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 289 | Contributors (this commit): 1 | Commits (past 90d): 12 | Contributors (cumulative): 1 | DMM Complexity: None\n\nDIFF:\n@@ -113,7 +113,7 @@ def fix_function_calls(red):\n         try:\n             if (node.value[0].value == 'flask' and\n                node.value[1].value == 'ext'):\n-                node.replace(\"flask_foo%s\" % node.value[3])\n+                node.replace(\"flask_%s%s\" % (node.value[3], node.value[3]))\n         except IndexError:\n             pass\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#cd6ec4094730156f27c69b327916e19f6c1c4b2f", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 29 | Lines Deleted: 3 | Files Changed: 2 | Hunks: 6 | Methods Changed: 5 | Complexity Δ (Sum/Max): 5/4 | Churn Δ: 32 | Churn Cumulative: 402 | Contributors (this commit): 1 | Commits (past 90d): 16 | Contributors (cumulative): 2 | DMM Complexity: 0.21052631578947367\n\nDIFF:\n@@ -76,8 +76,11 @@ def fix_standard_imports(red):\n         try:\n             if (node.value[0].value[0].value == 'flask' and\n                node.value[0].value[1].value == 'ext'):\n-                package = node.value[0].value[2]\n+                package = node.value[0].value[2].value\n                 name = node.names()[0].split('.')[-1]\n+                if name == package:\n+                    node.replace(\"import flask_%s\" % (package))\n+                else:\n                     node.replace(\"import flask_%s as %s\" % (package, name))\n         except IndexError:\n             pass\n@@ -113,13 +116,28 @@ def fix_function_calls(red):\n         try:\n             if (node.value[0].value == 'flask' and\n                node.value[1].value == 'ext'):\n-                node.replace(\"flask_%s%s\" % (node.value[3], node.value[3]))\n+                params = _form_function_call(node)\n+                node.replace(\"flask_%s%s\" % (node.value[2], params))\n         except IndexError:\n             pass\n \n     return red\n \n \n+def _form_function_call(node):\n+    \"\"\"\n+    Reconstructs function call strings when making attribute access calls.\n+    \"\"\"\n+    node_vals = node.value\n+    output = \".\"\n+    for x, param in enumerate(node_vals[3::]):\n+        if param.dumps()[0] == \"(\":\n+            output = output[0:-1] + param.dumps()\n+            return output\n+        else:\n+            output += param.dumps() + \".\"\n+\n+\n def check_user_input():\n     \"\"\"Exits and gives error message if no argument is passed in the shell.\"\"\"\n     if len(sys.argv) < 2:\n\n@@ -36,7 +36,7 @@ def test_multiline_import():\n def test_module_import():\n     red = RedBaron(\"import flask.ext.foo\")\n     output = migrate.fix_tester(red)\n-    assert output == \"import flask_foo as foo\"\n+    assert output == \"import flask_foo\"\n \n \n def test_named_module_import():\n@@ -61,3 +61,11 @@ def test_function_call_migration():\n     red = RedBaron(\"flask.ext.foo(var)\")\n     output = migrate.fix_tester(red)\n     assert output == \"flask_foo(var)\"\n+\n+\n+def test_nested_function_call_migration():\n+    red = RedBaron(\"import flask.ext.foo\\n\\n\"\n+                   \"flask.ext.foo.bar(var)\")\n+    output = migrate.fix_tester(red)\n+    assert output == (\"import flask_foo\\n\\n\"\n+                      \"flask_foo.bar(var)\")\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#5f64971731cfb0b8fbac5783e6ac4615aae2c16d", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 0 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 313 | Contributors (this commit): 1 | Commits (past 90d): 14 | Contributors (cumulative): 1 | DMM Complexity: None\n\nDIFF:\n@@ -3,8 +3,6 @@\n #\n # \"import flask.ext.foo\"\n #\n-# these are converted to \"import flask_foo\" in the\n-# main import statement, but does not handle function calls in the source.\n #\n # Run in the terminal by typing: `python flaskext_migrate.py <source_file.py>`\n #\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#6fa1889afb62fb01e8413584aa7abc293245fcfc", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 4 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 5 | Churn Cumulative: 318 | Contributors (this commit): 1 | Commits (past 90d): 15 | Contributors (cumulative): 1 | DMM Complexity: None\n\nDIFF:\n@@ -1,8 +1,5 @@\n # Script which modifies source code away from the deprecated \"flask.ext\"\n-# format. Does not yet fully support imports in the style:\n-#\n-# \"import flask.ext.foo\"\n-#\n+# format.\n #\n # Run in the terminal by typing: `python flaskext_migrate.py <source_file.py>`\n #\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#f6c45afb6ffa9fc1bd3d3637f7d38e423798dce9", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 9 | Lines Deleted: 1 | Files Changed: 2 | Hunks: 3 | Methods Changed: 4 | Complexity Δ (Sum/Max): 2/1 | Churn Δ: 10 | Churn Cumulative: 419 | Contributors (this commit): 1 | Commits (past 90d): 20 | Contributors (cumulative): 2 | DMM Complexity: 0.6666666666666666\n\nDIFF:\n@@ -40,6 +40,8 @@ def fix_from_imports(red):\n     from_imports = red.find_all(\"FromImport\")\n     for x, node in enumerate(from_imports):\n         values = node.value\n+        if len(values) < 2:\n+            continue\n         if (values[0].value == 'flask') and (values[1].value == 'ext'):\n             # Case 1\n             if len(node.value) == 3:\n\n@@ -45,7 +45,7 @@ def test_named_module_import():\n     assert output == \"import flask_foo as foobar\"\n \n \n-def test__named_from_import():\n+def test_named_from_import():\n     red = RedBaron(\"from flask.ext.foo import bar as baz\")\n     output = migrate.fix_tester(red)\n     assert output == \"from flask_foo import bar as baz\"\n@@ -69,3 +69,9 @@ def test_nested_function_call_migration():\n     output = migrate.fix_tester(red)\n     assert output == (\"import flask_foo\\n\\n\"\n                       \"flask_foo.bar(var)\")\n+\n+\n+def test_no_change_to_import():\n+    red = RedBaron(\"from flask import Flask\")\n+    output = migrate.fix_tester(red)\n+    assert output == \"from flask import Flask\"\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#5d3e7b737c834595735cbeb81077739dd950f396", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 479 | Contributors (this commit): 17 | Commits (past 90d): 2 | Contributors (cumulative): 17 | DMM Complexity: None\n\nDIFF:\n@@ -175,7 +175,7 @@ class Request(RequestBase):\n \n         .. versionadded:: 0.8\n         \"\"\"\n-        raise BadRequest()\n+        raise BadRequest(e)\n \n     def _load_form_data(self):\n         RequestBase._load_form_data(self)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#82b7983b2a0262645dd4dcb72c441b7affa816be", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 4 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 3 | Methods Changed: 1 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 6 | Churn Cumulative: 485 | Contributors (this commit): 17 | Commits (past 90d): 3 | Contributors (cumulative): 17 | DMM Complexity: 1.0\n\nDIFF:\n@@ -13,8 +13,7 @@ from werkzeug.wrappers import Request as RequestBase, Response as ResponseBase\n from werkzeug.exceptions import BadRequest\n \n from . import json\n-from .globals import _request_ctx_stack\n-\n+from .globals import _request_ctx_stack, current_app\n \n _missing = object()\n \n@@ -175,7 +174,10 @@ class Request(RequestBase):\n \n         .. versionadded:: 0.8\n         \"\"\"\n+        if current_app.config['DEBUG']:\n             raise BadRequest(e)\n+        else:\n+            raise BadRequest()\n \n     def _load_form_data(self):\n         RequestBase._load_form_data(self)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#19df249c8907d79d58b8c9dc5fa5cea6e40ad2e7", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 3 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 5 | Churn Cumulative: 490 | Contributors (this commit): 17 | Commits (past 90d): 4 | Contributors (cumulative): 17 | DMM Complexity: 1.0\n\nDIFF:\n@@ -174,9 +174,10 @@ class Request(RequestBase):\n \n         .. versionadded:: 0.8\n         \"\"\"\n-        if current_app.config['DEBUG']:\n+        ctx = _request_ctx_stack.top\n+        if ctx is not None:\n+            if ctx.app.config.get('DEBUG', False):\n                 raise BadRequest(e)\n-        else:\n         raise BadRequest()\n \n     def _load_form_data(self):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#39e66ca6d782630c67eae4e7e70e60799386ec8b", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 24 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 4 | Complexity Δ (Sum/Max): 4/4 | Churn Δ: 24 | Churn Cumulative: 348 | Contributors (this commit): 4 | Commits (past 90d): 3 | Contributors (cumulative): 4 | DMM Complexity: 1.0\n\nDIFF:\n@@ -49,6 +49,30 @@ class TestJSON(object):\n             assert rv.mimetype == 'application/json'\n             assert flask.json.loads(rv.data)['x'] == http_date(d.timetuple())\n \n+    def test_post_empty_json_adds_exception_to_reponse_content_in_debug(self):\n+        app = flask.Flask(__name__)\n+        app.config['DEBUG'] = True\n+        @app.route('/json', methods=['POST'])\n+        def post_json():\n+            flask.request.get_json()\n+            return None\n+        c = app.test_client()\n+        rv = c.post('/json', data=None, content_type='application/json')\n+        assert rv.status_code == 400\n+        assert '<p>No JSON object could be decoded</p>' in rv.data\n+\n+    def test_post_empty_json_doesnt_add_exception_to_reponse_if_no_debug(self):\n+        app = flask.Flask(__name__)\n+        app.config['DEBUG'] = False\n+        @app.route('/json', methods=['POST'])\n+        def post_json():\n+            flask.request.get_json()\n+            return None\n+        c = app.test_client()\n+        rv = c.post('/json', data=None, content_type='application/json')\n+        assert rv.status_code == 400\n+        assert '<p>No JSON object could be decoded</p>' not in rv.data\n+\n     def test_json_bad_requests(self):\n         app = flask.Flask(__name__)\n         @app.route('/json', methods=['POST'])\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#294961e6fce2c34784f304ca587850d62569b64e", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 2 | Methods Changed: 2 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 352 | Contributors (this commit): 4 | Commits (past 90d): 4 | Contributors (cumulative): 4 | DMM Complexity: None\n\nDIFF:\n@@ -59,7 +59,7 @@ class TestJSON(object):\n         c = app.test_client()\n         rv = c.post('/json', data=None, content_type='application/json')\n         assert rv.status_code == 400\n-        assert '<p>No JSON object could be decoded</p>' in rv.data\n+        assert 'No JSON object could be decoded' in rv.data\n \n     def test_post_empty_json_doesnt_add_exception_to_reponse_if_no_debug(self):\n         app = flask.Flask(__name__)\n@@ -71,7 +71,7 @@ class TestJSON(object):\n         c = app.test_client()\n         rv = c.post('/json', data=None, content_type='application/json')\n         assert rv.status_code == 400\n-        assert '<p>No JSON object could be decoded</p>' not in rv.data\n+        assert 'No JSON object could be decoded' not in rv.data\n \n     def test_json_bad_requests(self):\n         app = flask.Flask(__name__)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#d6a1307f9debe7f878961866d42c380ade6b04da", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 4 | Lines Deleted: 4 | Files Changed: 1 | Hunks: 4 | Methods Changed: 4 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 8 | Churn Cumulative: 360 | Contributors (this commit): 4 | Commits (past 90d): 5 | Contributors (cumulative): 4 | DMM Complexity: None\n\nDIFF:\n@@ -49,7 +49,7 @@ class TestJSON(object):\n             assert rv.mimetype == 'application/json'\n             assert flask.json.loads(rv.data)['x'] == http_date(d.timetuple())\n \n-    def test_post_empty_json_adds_exception_to_reponse_content_in_debug(self):\n+    def test_post_empty_json_adds_exception_to_response_content_in_debug(self):\n         app = flask.Flask(__name__)\n         app.config['DEBUG'] = True\n         @app.route('/json', methods=['POST'])\n@@ -59,9 +59,9 @@ class TestJSON(object):\n         c = app.test_client()\n         rv = c.post('/json', data=None, content_type='application/json')\n         assert rv.status_code == 400\n-        assert 'No JSON object could be decoded' in rv.data\n+        assert b'No JSON object could be decoded' in rv.data\n \n-    def test_post_empty_json_doesnt_add_exception_to_reponse_if_no_debug(self):\n+    def test_post_empty_json_wont_add_exception_to_response_if_no_debug(self):\n         app = flask.Flask(__name__)\n         app.config['DEBUG'] = False\n         @app.route('/json', methods=['POST'])\n@@ -71,7 +71,7 @@ class TestJSON(object):\n         c = app.test_client()\n         rv = c.post('/json', data=None, content_type='application/json')\n         assert rv.status_code == 400\n-        assert 'No JSON object could be decoded' not in rv.data\n+        assert b'No JSON object could be decoded' not in rv.data\n \n     def test_json_bad_requests(self):\n         app = flask.Flask(__name__)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#290c371eb1d0a140203cffce6f270b3cca6783dc", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 492 | Contributors (this commit): 17 | Commits (past 90d): 5 | Contributors (cumulative): 17 | DMM Complexity: None\n\nDIFF:\n@@ -177,7 +177,7 @@ class Request(RequestBase):\n         ctx = _request_ctx_stack.top\n         if ctx is not None:\n             if ctx.app.config.get('DEBUG', False):\n-                raise BadRequest(e)\n+                raise BadRequest('No JSON object could be decoded')\n         raise BadRequest()\n \n     def _load_form_data(self):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#1cd9e91810fcfc3b3ca4e8c157593af28de427d6", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 3 | Lines Deleted: 3 | Files Changed: 2 | Hunks: 3 | Methods Changed: 3 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 6 | Churn Cumulative: 858 | Contributors (this commit): 19 | Commits (past 90d): 12 | Contributors (cumulative): 21 | DMM Complexity: None\n\nDIFF:\n@@ -177,7 +177,7 @@ class Request(RequestBase):\n         ctx = _request_ctx_stack.top\n         if ctx is not None:\n             if ctx.app.config.get('DEBUG', False):\n-                raise BadRequest('No JSON object could be decoded')\n+                raise BadRequest('Failed to decode JSON object: {}'.format(e))\n         raise BadRequest()\n \n     def _load_form_data(self):\n\n@@ -59,7 +59,7 @@ class TestJSON(object):\n         c = app.test_client()\n         rv = c.post('/json', data=None, content_type='application/json')\n         assert rv.status_code == 400\n-        assert b'No JSON object could be decoded' in rv.data\n+        assert b'Failed to decode JSON object' in rv.data\n \n     def test_post_empty_json_wont_add_exception_to_response_if_no_debug(self):\n         app = flask.Flask(__name__)\n@@ -71,7 +71,7 @@ class TestJSON(object):\n         c = app.test_client()\n         rv = c.post('/json', data=None, content_type='application/json')\n         assert rv.status_code == 400\n-        assert b'No JSON object could be decoded' not in rv.data\n+        assert b'Failed to decode JSON object' not in rv.data\n \n     def test_json_bad_requests(self):\n         app = flask.Flask(__name__)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#44da905cb7e0d81267d75ccfcb7ffa2669f02aeb", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 496 | Contributors (this commit): 17 | Commits (past 90d): 7 | Contributors (cumulative): 17 | DMM Complexity: None\n\nDIFF:\n@@ -177,7 +177,7 @@ class Request(RequestBase):\n         ctx = _request_ctx_stack.top\n         if ctx is not None:\n             if ctx.app.config.get('DEBUG', False):\n-                raise BadRequest('Failed to decode JSON object: {}'.format(e))\n+                raise BadRequest('Failed to decode JSON object: {0}'.format(e))\n         raise BadRequest()\n \n     def _load_form_data(self):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#7b080355f561333e4eea01f656f0e4b32dcc688c", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 3 | Files Changed: 1 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 5 | Churn Cumulative: 501 | Contributors (this commit): 17 | Commits (past 90d): 8 | Contributors (cumulative): 17 | DMM Complexity: 0.0\n\nDIFF:\n@@ -13,7 +13,7 @@ from werkzeug.wrappers import Request as RequestBase, Response as ResponseBase\n from werkzeug.exceptions import BadRequest\n \n from . import json\n-from .globals import _request_ctx_stack, current_app\n+from .globals import _request_ctx_stack\n \n _missing = object()\n \n@@ -175,8 +175,7 @@ class Request(RequestBase):\n         .. versionadded:: 0.8\n         \"\"\"\n         ctx = _request_ctx_stack.top\n-        if ctx is not None:\n-            if ctx.app.config.get('DEBUG', False):\n+        if ctx is not None and ctx.app.config.get('DEBUG', False):\n             raise BadRequest('Failed to decode JSON object: {0}'.format(e))\n         raise BadRequest()\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#94a3968d69c30c54ea60939a5a84c5bac33601bb", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 3 | Lines Deleted: 4 | Files Changed: 1 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 7 | Churn Cumulative: 1792 | Contributors (this commit): 33 | Commits (past 90d): 3 | Contributors (cumulative): 33 | DMM Complexity: 0.0\n\nDIFF:\n@@ -802,11 +802,10 @@ class _PackageBoundObject(object):\n     del _get_static_folder, _set_static_folder\n \n     def _get_static_url_path(self):\n-        if self._static_url_path is None:\n-            if self.static_folder is None:\n-                return None\n-            return '/' + os.path.basename(self.static_folder)\n+        if self._static_url_path is not None:\n             return self._static_url_path\n+        if self.static_folder is not None:\n+            return '/' + os.path.basename(self.static_folder)\n     def _set_static_url_path(self, value):\n         self._static_url_path = value\n     static_url_path = property(_get_static_url_path, _set_static_url_path)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#1aa8a54b175ef10a72d3c3d3f4ed112ddc6e2ea6", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 0 | Lines Deleted: 4 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 79 | Contributors (this commit): 2 | Commits (past 90d): 2 | Contributors (cumulative): 2 | DMM Complexity: None\n\nDIFF:\n@@ -48,10 +48,6 @@ class assert_no_leak(object):\n         gc.enable()\n \n \n-# XXX: untitaker: These tests need to be revised. They broke around the time we\n-# ported Flask to Python 3.\n-@pytest.mark.skipif(os.environ.get('RUN_FLASK_MEMORY_TESTS') != '1',\n-                    reason='Turned off due to envvar.')\n def test_memory_consumption():\n     app = flask.Flask(__name__)\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#ec0d208bc14c49c611ae05d391b1edb35af854c7", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 45 | Lines Deleted: 8 | Files Changed: 4 | Hunks: 12 | Methods Changed: 10 | Complexity Δ (Sum/Max): 6/3 | Churn Δ: 53 | Churn Cumulative: 4596 | Contributors (this commit): 52 | Commits (past 90d): 14 | Contributors (cumulative): 67 | DMM Complexity: 1.0\n\nDIFF:\n@@ -38,6 +38,9 @@ from ._compat import reraise, string_types, text_type, integer_types\n # a lock used for logger initialization\n _logger_lock = Lock()\n \n+# a singleton sentinel value for parameter defaults\n+_sentinel = object()\n+\n \n def _make_timedelta(value):\n     if not isinstance(value, timedelta):\n@@ -1774,7 +1777,7 @@ class Flask(_PackageBoundObject):\n             self.save_session(ctx.session, response)\n         return response\n \n-    def do_teardown_request(self, exc=None):\n+    def do_teardown_request(self, exc=_sentinel):\n         \"\"\"Called after the actual request dispatching and will\n         call every as :meth:`teardown_request` decorated function.  This is\n         not actually called by the :class:`Flask` object itself but is always\n@@ -1785,7 +1788,7 @@ class Flask(_PackageBoundObject):\n            Added the `exc` argument.  Previously this was always using the\n            current exception information.\n         \"\"\"\n-        if exc is None:\n+        if exc is _sentinel:\n             exc = sys.exc_info()[1]\n         funcs = reversed(self.teardown_request_funcs.get(None, ()))\n         bp = _request_ctx_stack.top.request.blueprint\n@@ -1795,14 +1798,14 @@ class Flask(_PackageBoundObject):\n             func(exc)\n         request_tearing_down.send(self, exc=exc)\n \n-    def do_teardown_appcontext(self, exc=None):\n+    def do_teardown_appcontext(self, exc=_sentinel):\n         \"\"\"Called when an application context is popped.  This works pretty\n         much the same as :meth:`do_teardown_request` but for the application\n         context.\n \n         .. versionadded:: 0.9\n         \"\"\"\n-        if exc is None:\n+        if exc is _sentinel:\n             exc = sys.exc_info()[1]\n         for func in reversed(self.teardown_appcontext_funcs):\n             func(exc)\n\n@@ -21,6 +21,10 @@ from .signals import appcontext_pushed, appcontext_popped\n from ._compat import BROKEN_PYPY_CTXMGR_EXIT, reraise\n \n \n+# a singleton sentinel value for parameter defaults\n+_sentinel = object()\n+\n+\n class _AppCtxGlobals(object):\n     \"\"\"A plain object.\"\"\"\n \n@@ -168,11 +172,11 @@ class AppContext(object):\n         _app_ctx_stack.push(self)\n         appcontext_pushed.send(self.app)\n \n-    def pop(self, exc=None):\n+    def pop(self, exc=_sentinel):\n         \"\"\"Pops the app context.\"\"\"\n         self._refcnt -= 1\n         if self._refcnt <= 0:\n-            if exc is None:\n+            if exc is _sentinel:\n                 exc = sys.exc_info()[1]\n             self.app.do_teardown_appcontext(exc)\n         rv = _app_ctx_stack.pop()\n@@ -320,7 +324,7 @@ class RequestContext(object):\n         if self.session is None:\n             self.session = self.app.make_null_session()\n \n-    def pop(self, exc=None):\n+    def pop(self, exc=_sentinel):\n         \"\"\"Pops the request context and unbinds it by doing that.  This will\n         also trigger the execution of functions registered by the\n         :meth:`~flask.Flask.teardown_request` decorator.\n@@ -334,7 +338,7 @@ class RequestContext(object):\n         if not self._implicit_app_ctx_stack:\n             self.preserved = False\n             self._preserved_exc = None\n-            if exc is None:\n+            if exc is _sentinel:\n                 exc = sys.exc_info()[1]\n             self.app.do_teardown_request(exc)\n \n\n@@ -78,6 +78,21 @@ def test_app_tearing_down_with_previous_exception():\n \n     assert cleanup_stuff == [None]\n \n+def test_app_tearing_down_with_handled_exception():\n+    cleanup_stuff = []\n+    app = flask.Flask(__name__)\n+    @app.teardown_appcontext\n+    def cleanup(exception):\n+        cleanup_stuff.append(exception)\n+\n+    with app.app_context():\n+        try:\n+            raise Exception('dummy')\n+        except Exception:\n+            pass\n+\n+    assert cleanup_stuff == [None]\n+\n def test_custom_app_ctx_globals_class():\n     class CustomRequestGlobals(object):\n         def __init__(self):\n\n@@ -48,6 +48,21 @@ def test_teardown_with_previous_exception():\n         assert buffer == []\n     assert buffer == [None]\n \n+def test_teardown_with_handled_exception():\n+    buffer = []\n+    app = flask.Flask(__name__)\n+    @app.teardown_request\n+    def end_of_request(exception):\n+        buffer.append(exception)\n+\n+    with app.test_request_context():\n+        assert buffer == []\n+        try:\n+            raise Exception('dummy')\n+        except Exception:\n+            pass\n+    assert buffer == [None]\n+\n def test_proper_test_request_context():\n     app = flask.Flask(__name__)\n     app.config.update(\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
