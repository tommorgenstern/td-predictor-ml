{"custom_id": "flask#7e1a13ffbd212e928e866c2e4cf5d92d85660f86", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 2 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 3 | Contributors (this commit): 2 | Commits (past 90d): 2 | Contributors (cumulative): 2 | DMM Complexity: None\n\nDIFF:\n@@ -1 +1 @@\n-from minitwit import app\n\\ No newline at end of file\n+from .minitwit import app\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#0e79aba40d2497218736448ced708fcf4f8943b3", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 14 | Lines Deleted: 10 | Files Changed: 1 | Hunks: 2 | Methods Changed: 2 | Complexity Δ (Sum/Max): -4/0 | Churn Δ: 24 | Churn Cumulative: 676 | Contributors (this commit): 15 | Commits (past 90d): 2 | Contributors (cumulative): 15 | DMM Complexity: 1.0\n\nDIFF:\n@@ -84,21 +84,25 @@ class TaggedJSONSerializer(object):\n     def dumps(self, value):\n         return json.dumps(_tag(value), separators=(',', ':'))\n \n+    LOADS_MAP = {\n+        ' t': tuple,\n+        ' u': uuid.UUID,\n+        ' b': b64decode,\n+        ' m': Markup,\n+        ' d': parse_date,\n+    }\n+\n     def loads(self, value):\n         def object_hook(obj):\n             if len(obj) != 1:\n                 return obj\n             the_key, the_value = next(iteritems(obj))\n-            if the_key == ' t':\n-                return tuple(the_value)\n-            elif the_key == ' u':\n-                return uuid.UUID(the_value)\n-            elif the_key == ' b':\n-                return b64decode(the_value)\n-            elif the_key == ' m':\n-                return Markup(the_value)\n-            elif the_key == ' d':\n-                return parse_date(the_value)\n+            # Check the key for a corresponding function\n+            return_function = self.LOADS_MAP.get(the_key)\n+            if return_function:\n+                # Pass the value to the function\n+                return return_function(the_value)\n+            # Didn't find a function for this object\n             return obj\n         return json.loads(value, object_hook=object_hook)\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#36425d5f91b57210f7707de9564377fea93825b2", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 10 | Lines Deleted: 1 | Files Changed: 2 | Hunks: 2 | Methods Changed: 2 | Complexity Δ (Sum/Max): 2/1 | Churn Δ: 11 | Churn Cumulative: 1841 | Contributors (this commit): 36 | Commits (past 90d): 4 | Contributors (cumulative): 41 | DMM Complexity: 1.0\n\nDIFF:\n@@ -137,7 +137,8 @@ class Request(RequestBase):\n                       on the request.\n         \"\"\"\n         rv = getattr(self, '_cached_json', _missing)\n-        if rv is not _missing:\n+        # We return cached JSON only when the cache is enabled.\n+        if cache and rv is not _missing:\n             return rv\n \n         if not (force or self.is_json):\n\n@@ -35,6 +35,14 @@ def has_encoding(name):\n \n class TestJSON(object):\n \n+    def test_ignore_cached_json(self):\n+        app = flask.Flask(__name__)\n+        with app.test_request_context('/', method='POST', data='malformed',\n+                                      content_type='application/json'):\n+            assert flask.request.get_json(silent=True, cache=True) is None\n+            with pytest.raises(BadRequest):\n+                flask.request.get_json(silent=False, cache=False)\n+\n     def test_post_empty_json_adds_exception_to_response_content_in_debug(self):\n         app = flask.Flask(__name__)\n         app.config['DEBUG'] = True\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#1042d9d23f3c61f4474aea568a359337cf450fab", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 255 | Contributors (this commit): 10 | Commits (past 90d): 2 | Contributors (cumulative): 10 | DMM Complexity: None\n\nDIFF:\n@@ -10,7 +10,7 @@\n     :license: BSD, see LICENSE for more details.\n \"\"\"\n \n-__version__ = '0.11.2-dev'\n+__version__ = '0.12'\n \n # utilities we import from Werkzeug and Jinja2 that are unused\n # in the module but are exported as public interface.\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#b2e0886f484ac4544afd440955aa936379161e7c", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 257 | Contributors (this commit): 10 | Commits (past 90d): 3 | Contributors (cumulative): 10 | DMM Complexity: None\n\nDIFF:\n@@ -10,7 +10,7 @@\n     :license: BSD, see LICENSE for more details.\n \"\"\"\n \n-__version__ = '0.12'\n+__version__ = '0.13-dev'\n \n # utilities we import from Werkzeug and Jinja2 that are unused\n # in the module but are exported as public interface.\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#8cd0b03beeac4a41c398ea365475c651c484a9ee", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 259 | Contributors (this commit): 10 | Commits (past 90d): 4 | Contributors (cumulative): 10 | DMM Complexity: None\n\nDIFF:\n@@ -10,7 +10,7 @@\n     :license: BSD, see LICENSE for more details.\n \"\"\"\n \n-__version__ = '0.12'\n+__version__ = '0.12.1-dev'\n \n # utilities we import from Werkzeug and Jinja2 that are unused\n # in the module but are exported as public interface.\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#789715adb9949f58b7b0272bed1a58d7cd0fad30", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 21 | Lines Deleted: 3 | Files Changed: 2 | Hunks: 6 | Methods Changed: 2 | Complexity Δ (Sum/Max): 2/2 | Churn Δ: 24 | Churn Cumulative: 1027 | Contributors (this commit): 18 | Commits (past 90d): 2 | Contributors (cumulative): 21 | DMM Complexity: 1.0\n\nDIFF:\n@@ -126,7 +126,7 @@ class Config(dict):\n         d = types.ModuleType('config')\n         d.__file__ = filename\n         try:\n-            with open(filename) as config_file:\n+            with open(filename, mode='rb') as config_file:\n                 exec(compile(config_file.read(), filename, 'exec'), d.__dict__)\n         except IOError as e:\n             if silent and e.errno in (errno.ENOENT, errno.EISDIR):\n\n@@ -7,11 +7,14 @@\n     :license: BSD, see LICENSE for more details.\n \"\"\"\n \n-import pytest\n \n-import os\n from datetime import timedelta\n+import os\n+import textwrap\n+\n import flask\n+from flask._compat import PY2\n+import pytest\n \n \n # config keys used for the TestConfig\n@@ -187,3 +190,18 @@ def test_get_namespace():\n     assert 2 == len(bar_options)\n     assert 'bar stuff 1' == bar_options['BAR_STUFF_1']\n     assert 'bar stuff 2' == bar_options['BAR_STUFF_2']\n+\n+\n+@pytest.mark.parametrize('encoding', ['utf-8', 'iso-8859-15', 'latin-1'])\n+def test_from_pyfile_weird_encoding(tmpdir, encoding):\n+    f = tmpdir.join('my_config.py')\n+    f.write_binary(textwrap.dedent(u'''\n+    # -*- coding: {0} -*-\n+    TEST_VALUE = \"föö\"\n+    '''.format(encoding)).encode(encoding))\n+    app = flask.Flask(__name__)\n+    app.config.from_pyfile(str(f))\n+    value = app.config['TEST_VALUE']\n+    if PY2:\n+        value = value.decode(encoding)\n+    assert value == u'föö'\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#e49b73d2cf7d08a6f3aa3940b4492ee1f3176787", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 19 | Lines Deleted: 0 | Files Changed: 3 | Hunks: 3 | Methods Changed: 1 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 19 | Churn Cumulative: 19 | Contributors (this commit): 1 | Commits (past 90d): 3 | Contributors (cumulative): 3 | DMM Complexity: 1.0\n\nDIFF:\n@@ -0,0 +1,10 @@\n+from setuptools import setup\n+\n+setup(\n+    name='yourapplication',\n+    packages=['yourapplication'],\n+    include_package_data=True,\n+    install_requires=[\n+        'flask',\n+    ],\n+)\n\n@@ -0,0 +1,4 @@\n+from flask import Flask\n+app = Flask(__name__)\n+\n+import yourapplication.views\n\\ No newline at end of file\n\n@@ -0,0 +1,5 @@\n+from yourapplication import app\n+\n+@app.route('/')\n+def index():\n+    return 'Hello World!'\n\\ No newline at end of file\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#0832e77b145b226bac4ee82144221800a0f7d34a", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 18 | Lines Deleted: 4 | Files Changed: 3 | Hunks: 3 | Methods Changed: 2 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 22 | Churn Cumulative: 1719 | Contributors (this commit): 24 | Commits (past 90d): 4 | Contributors (cumulative): 31 | DMM Complexity: 0.0\n\nDIFF:\n@@ -89,10 +89,16 @@ def locate_app(app_id):\n     try:\n         __import__(module)\n     except ImportError:\n-        raise NoAppException('The file/path provided (%s) does not appear to '\n-                             'exist.  Please verify the path is correct.  If '\n-                             'app is not on PYTHONPATH, ensure the extension '\n-                             'is .py' % module)\n+        # Reraise the ImportError if it occurred within the imported module.\n+        # Determine this by checking whether the trace has a depth > 1.\n+        if sys.exc_info()[-1].tb_next:\n+            raise\n+        else:\n+            raise NoAppException('The file/path provided (%s) does not appear'\n+                                 ' to exist.  Please verify the path is '\n+                                 'correct.  If app is not on PYTHONPATH, '\n+                                 'ensure the extension is .py' % module)\n+\n     mod = sys.modules[module]\n     if app_obj is None:\n         app = find_best_app(mod)\n\n@@ -0,0 +1,7 @@\n+from __future__ import absolute_import, print_function\n+\n+from flask import Flask\n+\n+raise ImportError()\n+\n+testapp = Flask('testapp')\n\n@@ -83,6 +83,7 @@ def test_locate_app(test_apps):\n     pytest.raises(NoAppException, locate_app, \"notanpp.py\")\n     pytest.raises(NoAppException, locate_app, \"cliapp/app\")\n     pytest.raises(RuntimeError, locate_app, \"cliapp.app:notanapp\")\n+    pytest.raises(ImportError, locate_app, \"cliapp.importerrorapp\")\n \n \n def test_find_default_import_path(test_apps, monkeypatch, tmpdir):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#92fa444259fe32debf922eddbd6d18e7d69fdfaa", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 12 | Lines Deleted: 0 | Files Changed: 4 | Hunks: 1 | Methods Changed: 2 | Complexity Δ (Sum/Max): 2/2 | Churn Δ: 12 | Churn Cumulative: 12 | Contributors (this commit): 1 | Commits (past 90d): 4 | Contributors (cumulative): 4 | DMM Complexity: 1.0\n\nDIFF:\n\n@@ -0,0 +1,12 @@\n+from yourapplication import app\n+import pytest\n+\n+@pytest.fixture\n+def client(request):\n+    app.config['TESTING'] = True\n+    client = app.test_client()\n+    return client\n+\n+def test_index(client):\n+    rv = client.get('/')\n+    assert b\"Hello World!\" in rv.data\n\\ No newline at end of file\n\n\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#46c1383919454ae281967316d6d6fb33bce9b773", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 2 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 14 | Contributors (this commit): 1 | Commits (past 90d): 2 | Contributors (cumulative): 1 | DMM Complexity: None\n\nDIFF:\n@@ -2,7 +2,7 @@ from yourapplication import app\n import pytest\n \n @pytest.fixture\n-def client(request):\n+def client():\n     app.config['TESTING'] = True\n     client = app.test_client()\n     return client\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#01b992b1a1482246d705ffe3b3d0dd7816f0456b", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 3 | Lines Deleted: 3 | Files Changed: 2 | Hunks: 2 | Methods Changed: 2 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 6 | Churn Cumulative: 1495 | Contributors (this commit): 16 | Commits (past 90d): 2 | Contributors (cumulative): 19 | DMM Complexity: None\n\nDIFF:\n@@ -333,7 +333,7 @@ def test_session_expiration():\n     client = app.test_client()\n     rv = client.get('/')\n     assert 'set-cookie' in rv.headers\n-    match = re.search(r'\\bexpires=([^;]+)(?i)', rv.headers['set-cookie'])\n+    match = re.search(r'(?i)\\bexpires=([^;]+)', rv.headers['set-cookie'])\n     expires = parse_date(match.group())\n     expected = datetime.utcnow() + app.permanent_session_lifetime\n     assert expires.year == expected.year\n\n@@ -179,8 +179,8 @@ def test_flaskext_broken_package_no_module_caching(flaskext_broken):\n def test_no_error_swallowing(flaskext_broken):\n     with pytest.raises(ImportError) as excinfo:\n         import flask.ext.broken\n-\n-    assert excinfo.type is ImportError\n+    # python3.6 raises a subclass of ImportError: 'ModuleNotFoundError'\n+    assert issubclass(excinfo.type, ImportError)\n     if PY2:\n         message = 'No module named missing_module'\n     else:\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#9dcfd05d295574488bd0c3644599d1e97dcca3da", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 5 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 3 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 7 | Churn Cumulative: 524 | Contributors (this commit): 11 | Commits (past 90d): 2 | Contributors (cumulative): 11 | DMM Complexity: None\n\nDIFF:\n@@ -11,10 +11,13 @@\n # All configuration values have a default; values that are commented out\n # serve to show the default.\n from __future__ import print_function\n-from datetime import datetime\n import os\n import sys\n import pkg_resources\n+import time\n+import datetime\n+\n+BUILD_DATE = datetime.datetime.utcfromtimestamp(int(os.environ.get('SOURCE_DATE_EPOCH', time.time())))\n \n # If extensions (or modules to document with autodoc) are in another directory,\n # add these directories to sys.path here. If the directory is relative to the\n@@ -49,7 +52,7 @@ master_doc = 'index'\n \n # General information about the project.\n project = u'Flask'\n-copyright = u'2010 - {0}, Armin Ronacher'.format(datetime.utcnow().year)\n+copyright = u'2010 - {0}, Armin Ronacher'.format(BUILD_DATE.year)\n \n # The version info for the project you're documenting, acts as replacement for\n # |version| and |release|, also used in various other places throughout the\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#3fc8be5a4e9c1db58dcc74d3d48bf70b6a8db932", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 2034 | Contributors (this commit): 47 | Commits (past 90d): 1 | Contributors (cumulative): 47 | DMM Complexity: None\n\nDIFF:\n@@ -58,7 +58,7 @@ def get_debug_flag(default=None):\n     val = os.environ.get('FLASK_DEBUG')\n     if not val:\n         return default\n-    return val not in ('0', 'false', 'no')\n+    return val.lower() not in ('0', 'false', 'no')\n \n \n def _endpoint_from_view_func(view_func):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#1636a4c410a1bf3713bc1da8d4de7ca66cdf1681", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 8 | Lines Deleted: 8 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 16 | Churn Cumulative: 4329 | Contributors (this commit): 73 | Commits (past 90d): 3 | Contributors (cumulative): 73 | DMM Complexity: None\n\nDIFF:\n@@ -825,14 +825,14 @@ class Flask(_PackageBoundObject):\n                         information.\n         \"\"\"\n         from werkzeug.serving import run_simple\n-        if host is None:\n-            host = '127.0.0.1'\n-        if port is None:\n-            server_name = self.config['SERVER_NAME']\n-            if server_name and ':' in server_name:\n-                port = int(server_name.rsplit(':', 1)[1])\n-            else:\n-                port = 5000\n+        _host = '127.0.0.1'\n+        _port = 5000\n+        server_name = self.config.get(\"SERVER_NAME\")\n+        sn_host, sn_port = None, None\n+        if server_name:\n+            sn_host, _, sn_port = server_name.partition(':')\n+        host = host or sn_host or _host\n+        port = int(port or sn_port or _port)\n         if debug is not None:\n             self.debug = bool(debug)\n         options.setdefault('use_reloader', self.debug)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#42fbbb4cbbd312464214dd66d0985828c16dce67", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 17 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 2 | Complexity Δ (Sum/Max): 2/2 | Churn Δ: 17 | Churn Cumulative: 1233 | Contributors (this commit): 17 | Commits (past 90d): 2 | Contributors (cumulative): 17 | DMM Complexity: 1.0\n\nDIFF:\n@@ -1681,3 +1681,20 @@ def test_run_server_port(monkeypatch):\n     hostname, port = 'localhost', 8000\n     app.run(hostname, port, debug=True)\n     assert rv['result'] == 'running on %s:%s ...' % (hostname, port)\n+\n+\n+@pytest.mark.parametrize('host,port,expect_host,expect_port', (\n+    (None, None, 'pocoo.org', 8080),\n+    ('localhost', None, 'localhost', 8080),\n+    (None, 80, 'pocoo.org', 80),\n+    ('localhost', 80, 'localhost', 80),\n+))\n+def test_run_from_config(monkeypatch, host, port, expect_host, expect_port):\n+    def run_simple_mock(hostname, port, *args, **kwargs):\n+        assert hostname == expect_host\n+        assert port == expect_port\n+\n+    monkeypatch.setattr(werkzeug.serving, 'run_simple', run_simple_mock)\n+    app = flask.Flask(__name__)\n+    app.config['SERVER_NAME'] = 'pocoo.org:8080'\n+    app.run(host, port)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#bb0e755c808a8541192982ba7b86308b68ff7657", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 4 | Lines Deleted: 4 | Files Changed: 3 | Hunks: 4 | Methods Changed: 1 | Complexity Δ (Sum/Max): 45/45 | Churn Δ: 8 | Churn Cumulative: 891 | Contributors (this commit): 26 | Commits (past 90d): 4 | Contributors (cumulative): 32 | DMM Complexity: None\n\nDIFF:\n@@ -260,7 +260,7 @@ intersphinx_mapping = {\n     'werkzeug': ('http://werkzeug.pocoo.org/docs/', None),\n     'click': ('http://click.pocoo.org/', None),\n     'jinja': ('http://jinja.pocoo.org/docs/', None),\n-    'sqlalchemy': ('http://docs.sqlalchemy.org/en/latest/', None),\n+    'sqlalchemy': ('https://docs.sqlalchemy.org/en/latest/', None),\n     'wtforms': ('https://wtforms.readthedocs.io/en/latest/', None),\n     'blinker': ('https://pythonhosted.org/blinker/', None)\n }\n\n@@ -85,7 +85,7 @@ def format_datetime(timestamp):\n \n def gravatar_url(email, size=80):\n     \"\"\"Return the gravatar image for the given email address.\"\"\"\n-    return 'http://www.gravatar.com/avatar/%s?d=identicon&s=%d' % \\\n+    return 'https://www.gravatar.com/avatar/%s?d=identicon&s=%d' % \\\n         (md5(email.strip().lower().encode('utf-8')).hexdigest(), size)\n \n \n\n@@ -41,7 +41,7 @@ Links\n * `website <http://flask.pocoo.org/>`_\n * `documentation <http://flask.pocoo.org/docs/>`_\n * `development version\n-  <http://github.com/pallets/flask/zipball/master#egg=Flask-dev>`_\n+  <https://github.com/pallets/flask/zipball/master#egg=Flask-dev>`_\n \n \"\"\"\n import re\n@@ -59,7 +59,7 @@ with open('flask/__init__.py', 'rb') as f:\n setup(\n     name='Flask',\n     version=version,\n-    url='http://github.com/pallets/flask/',\n+    url='https://github.com/pallets/flask/',\n     license='BSD',\n     author='Armin Ronacher',\n     author_email='armin.ronacher@active-4.com',\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#eaba4a73aa1013db908ea07af6028056c4fde706", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 450 | Contributors (this commit): 19 | Commits (past 90d): 1 | Contributors (cumulative): 19 | DMM Complexity: None\n\nDIFF:\n@@ -1,7 +1,7 @@\n # -*- coding: utf-8 -*-\n \"\"\"\n-    flask.jsonimpl\n-    ~~~~~~~~~~~~~~\n+    flask.json\n+    ~~~~~~~~~~\n \n     Implementation helpers for the JSON support in Flask.\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#8a8a60815294eb9d5db0c2d451c6c9d959c7c499", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 108 | Lines Deleted: 43 | Files Changed: 2 | Hunks: 8 | Methods Changed: 16 | Complexity Δ (Sum/Max): 11/11 | Churn Δ: 151 | Churn Cumulative: 2060 | Contributors (this commit): 31 | Commits (past 90d): 5 | Contributors (cumulative): 34 | DMM Complexity: 1.0\n\nDIFF:\n@@ -8,7 +8,6 @@\n     :copyright: (c) 2015 by Armin Ronacher.\n     :license: BSD, see LICENSE for more details.\n \"\"\"\n-\n import uuid\n import hashlib\n from base64 import b64encode, b64decode\n@@ -49,22 +48,82 @@ class SessionMixin(object):\n     modified = True\n \n \n-def _tag(value):\n-    if isinstance(value, tuple):\n-        return {' t': [_tag(x) for x in value]}\n-    elif isinstance(value, uuid.UUID):\n-        return {' u': value.hex}\n-    elif isinstance(value, bytes):\n-        return {' b': b64encode(value).decode('ascii')}\n-    elif callable(getattr(value, '__html__', None)):\n-        return {' m': text_type(value.__html__())}\n-    elif isinstance(value, list):\n-        return [_tag(x) for x in value]\n-    elif isinstance(value, datetime):\n-        return {' d': http_date(value)}\n-    elif isinstance(value, dict):\n-        return dict((k, _tag(v)) for k, v in iteritems(value))\n-    elif isinstance(value, str):\n+class TaggedJSONSerializer(object):\n+    \"\"\"A customized JSON serializer that supports a few extra types that\n+    we take for granted when serializing (tuples, markup objects, datetime).\n+    \"\"\"\n+\n+    def __init__(self):\n+        self.conversions = [\n+            {\n+                'check': lambda value: self._is_dict_with_used_key(value),\n+                'tag': lambda value: self._tag_dict_used_with_key(value),\n+                'untag': lambda value: self._untag_dict_used_with_key(value),\n+                'key': ' di',\n+            },\n+            {\n+                'check': lambda value: isinstance(value, tuple),\n+                'tag': lambda value: [self._tag(x) for x in value],\n+                'untag': lambda value: tuple(value),\n+                'key': ' t',\n+            },\n+            {\n+                'check': lambda value: isinstance(value, uuid.UUID),\n+                'tag': lambda value: value.hex,\n+                'untag': lambda value: uuid.UUID(value),\n+                'key': ' u',\n+            },\n+            {\n+                'check': lambda value: isinstance(value, bytes),\n+                'tag': lambda value: b64encode(value).decode('ascii'),\n+                'untag': lambda value: b64decode(value),\n+                'key': ' b',\n+            },\n+            {\n+                'check': lambda value: callable(getattr(value, '__html__',\n+                                                        None)),\n+                'tag': lambda value: text_type(value.__html__()),\n+                'untag': lambda value: Markup(value),\n+                'key': ' m',\n+            },\n+            {\n+                'check': lambda value: isinstance(value, list),\n+                'tag': lambda value: [self._tag(x) for x in value],\n+            },\n+            {\n+                'check': lambda value: isinstance(value, datetime),\n+                'tag': lambda value: http_date(value),\n+                'untag': lambda value: parse_date(value),\n+                'key': ' d',\n+            },\n+            {\n+                'check': lambda value: isinstance(value, dict),\n+                'tag': lambda value: dict((k, self._tag(v)) for k, v in\n+                                          iteritems(value)),\n+            },\n+            {\n+                'check': lambda value: isinstance(value, str),\n+                'tag': lambda value: self._tag_string(value),\n+            }\n+        ]\n+\n+    @property\n+    def keys(self):\n+        return [c['key'] for c in self.conversions if c.get('key')]\n+\n+    def _get_conversion_untag(self, key):\n+        return next(\n+            (c['untag'] for c in self.conversions if c.get('key') == key),\n+            lambda v: None\n+        )\n+\n+    def _is_dict_with_used_key(self, v):\n+        return isinstance(v, dict) and len(v) == 1 and list(v)[0] in self.keys\n+\n+    def _was_dict_with_used_key(self, k):\n+        return k.endswith('__') and k[:-2] in self.keys\n+\n+    def _tag_string(self, value):\n         try:\n             return text_type(value)\n         except UnicodeError:\n@@ -73,38 +132,38 @@ def _tag(value):\n                 u'non-ASCII data was passed to the session system '\n                 u'which can only store unicode strings.  Consider '\n                 u'base64 encoding your string (String was %r)' % value)\n+\n+    def _tag_dict_used_with_key(self, value):\n+        k, v = next(iteritems(value))\n+        return {'%s__' % k: v}\n+\n+    def _tag(self, value):\n+        for tag_ops in self.conversions:\n+            if tag_ops['check'](value):\n+                tag = tag_ops.get('key')\n+                if tag:\n+                    return {tag: tag_ops['tag'](value)}\n+                return tag_ops['tag'](value)\n         return value\n \n+    def _untag_dict_used_with_key(self, the_value):\n+        k, v = next(iteritems(the_value))\n+        if self._was_dict_with_used_key(k):\n+            return {k[:-2]: self._untag(v)}\n \n-class TaggedJSONSerializer(object):\n-    \"\"\"A customized JSON serializer that supports a few extra types that\n-    we take for granted when serializing (tuples, markup objects, datetime).\n-    \"\"\"\n-\n-    def dumps(self, value):\n-        return json.dumps(_tag(value), separators=(',', ':'))\n-\n-    LOADS_MAP = {\n-        ' t': tuple,\n-        ' u': uuid.UUID,\n-        ' b': b64decode,\n-        ' m': Markup,\n-        ' d': parse_date,\n-    }\n-\n-    def loads(self, value):\n-        def object_hook(obj):\n+    def _untag(self, obj):\n         if len(obj) != 1:\n             return obj\n         the_key, the_value = next(iteritems(obj))\n-            # Check the key for a corresponding function\n-            return_function = self.LOADS_MAP.get(the_key)\n-            if return_function:\n-                # Pass the value to the function\n-                return return_function(the_value)\n-            # Didn't find a function for this object\n-            return obj\n-        return json.loads(value, object_hook=object_hook)\n+        untag = self._get_conversion_untag(the_key)\n+        new_value = untag(the_value)\n+        return new_value if new_value else obj\n+\n+    def dumps(self, value):\n+        return json.dumps(self._tag(value), separators=(',', ':'))\n+\n+    def loads(self, value):\n+        return json.loads(value, object_hook=self._untag)\n \n \n session_json_serializer = TaggedJSONSerializer()\n\n@@ -383,6 +383,9 @@ def test_session_special_types():\n         flask.session['dt'] = now\n         flask.session['b'] = b'\\xff'\n         flask.session['t'] = (1, 2, 3)\n+        flask.session['spacefirst'] = {' t': 'not-a-tuple'}\n+        flask.session['withunderscores'] = {' t__': 'not-a-tuple'}\n+        flask.session['notadict'] = {' di': 'not-a-dict'}\n         return response\n \n     @app.route('/')\n@@ -399,6 +402,9 @@ def test_session_special_types():\n     assert rv['b'] == b'\\xff'\n     assert type(rv['b']) == bytes\n     assert rv['t'] == (1, 2, 3)\n+    assert rv['spacefirst'] == {' t': 'not-a-tuple'}\n+    assert rv['withunderscores'] == {' t__': 'not-a-tuple'}\n+    assert rv['notadict'] == {' di': 'not-a-dict'}\n \n \n def test_session_cookie_setting():\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#f5adb61b28f240effbba5a4686647c2af6e85b94", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 4 | Lines Deleted: 4 | Files Changed: 3 | Hunks: 4 | Methods Changed: 2 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 8 | Churn Cumulative: 5428 | Contributors (this commit): 83 | Commits (past 90d): 7 | Contributors (cumulative): 93 | DMM Complexity: None\n\nDIFF:\n@@ -234,7 +234,7 @@ latex_additional_files = ['flaskstyle.sty', 'logo.pdf']\n # The scheme of the identifier. Typical schemes are ISBN or URL.\n #epub_scheme = ''\n \n-# The unique identifier of the text. This can be a ISBN number\n+# The unique identifier of the text. This can be an ISBN number\n # or the project homepage.\n #epub_identifier = ''\n \n\n@@ -391,7 +391,7 @@ class Flask(_PackageBoundObject):\n         #: is the class for the instance check and the second the error handler\n         #: function.\n         #:\n-        #: To register a error handler, use the :meth:`errorhandler`\n+        #: To register an error handler, use the :meth:`errorhandler`\n         #: decorator.\n         self.error_handler_spec = {None: self._error_handlers}\n \n@@ -1354,7 +1354,7 @@ class Flask(_PackageBoundObject):\n         will have to surround the execution of these code by try/except\n         statements and log occurring errors.\n \n-        When a teardown function was called because of a exception it will\n+        When a teardown function was called because of an exception it will\n         be passed an error object.\n \n         The return values of teardown functions are ignored.\n\n@@ -5,7 +5,7 @@\n     ~~~~~~~~~~~~~~~~\n \n     This command line script scans a whole application tree and attempts to\n-    output an unified diff with all the changes that are necessary to easily\n+    output a unified diff with all the changes that are necessary to easily\n     upgrade the application to 0.7 and to not yield deprecation warnings.\n \n     This will also attempt to find `after_request` functions that don't modify\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#a7f1a21c1204828388eaed1e3903a74c904c8147", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 5 | Lines Deleted: 3 | Files Changed: 4 | Hunks: 4 | Methods Changed: 3 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 8 | Churn Cumulative: 6951 | Contributors (this commit): 105 | Commits (past 90d): 12 | Contributors (cumulative): 134 | DMM Complexity: 1.0\n\nDIFF:\n@@ -314,7 +314,7 @@ class Flask(_PackageBoundObject):\n         'PREFERRED_URL_SCHEME':                 'http',\n         'JSON_AS_ASCII':                        True,\n         'JSON_SORT_KEYS':                       True,\n-        'JSONIFY_PRETTYPRINT_REGULAR':          True,\n+        'JSONIFY_PRETTYPRINT_REGULAR':          False,\n         'JSONIFY_MIMETYPE':                     'application/json',\n         'TEMPLATES_AUTO_RELOAD':                None,\n     })\n\n@@ -248,7 +248,7 @@ def jsonify(*args, **kwargs):\n     indent = None\n     separators = (',', ':')\n \n-    if current_app.config['JSONIFY_PRETTYPRINT_REGULAR'] and not request.is_xhr:\n+    if current_app.config['JSONIFY_PRETTYPRINT_REGULAR'] or current_app.debug:\n         indent = 2\n         separators = (', ', ': ')\n \n\n@@ -995,7 +995,7 @@ def test_make_response_with_response_instance():\n         rv = flask.make_response(\n             flask.jsonify({'msg': 'W00t'}), 400)\n         assert rv.status_code == 400\n-        assert rv.data == b'{\\n  \"msg\": \"W00t\"\\n}\\n'\n+        assert rv.data == b'{\"msg\":\"W00t\"}\\n'\n         assert rv.mimetype == 'application/json'\n \n         rv = flask.make_response(\n\n@@ -289,6 +289,8 @@ class TestJSON(object):\n     def test_json_key_sorting(self):\n         app = flask.Flask(__name__)\n         app.testing = True\n+        app.debug = True\n+\n         assert app.config['JSON_SORT_KEYS'] == True\n         d = dict.fromkeys(range(20), 'foo')\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#46e8427d814589145ffcdc10cce45b791bde795b", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 3 | Churn Cumulative: 4345 | Contributors (this commit): 76 | Commits (past 90d): 5 | Contributors (cumulative): 76 | DMM Complexity: None\n\nDIFF:\n@@ -813,7 +813,8 @@ class Flask(_PackageBoundObject):\n \n         :param host: the hostname to listen on. Set this to ``'0.0.0.0'`` to\n                      have the server available externally as well. Defaults to\n-                     ``'127.0.0.1'``.\n+                     ``'127.0.0.1'`` or the host in the ``SERVER_NAME`` config\n+                     variable if present.\n         :param port: the port of the webserver. Defaults to ``5000`` or the\n                      port defined in the ``SERVER_NAME`` config variable if\n                      present.\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#5b7fd9ad889e54d4d694d310b559c921d7df75cf", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 4 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 1419 | Contributors (this commit): 20 | Commits (past 90d): 3 | Contributors (cumulative): 20 | DMM Complexity: 1.0\n\nDIFF:\n@@ -11,6 +11,7 @@\n \n import os\n import sys\n+import traceback\n from threading import Lock, Thread\n from functools import update_wrapper\n \n@@ -368,6 +369,9 @@ class FlaskGroup(AppGroup):\n             # want the help page to break if the app does not exist.\n             # If someone attempts to use the command we try to create\n             # the app again and this will give us the error.\n+            # However, we will not do so silently because that would confuse\n+            # users.\n+            traceback.print_exc()\n             pass\n         return sorted(rv)\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#ad42d88fb2cda12a21c4fb6f002f425f233d1fe3", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 0 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 1 | Churn Cumulative: 1420 | Contributors (this commit): 20 | Commits (past 90d): 4 | Contributors (cumulative): 20 | DMM Complexity: 0.0\n\nDIFF:\n@@ -372,7 +372,6 @@ class FlaskGroup(AppGroup):\n             # However, we will not do so silently because that would confuse\n             # users.\n             traceback.print_exc()\n-            pass\n         return sorted(rv)\n \n     def main(self, *args, **kwargs):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#ed17bc171046a15f03c890687db8eb9652513bd9", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 17 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 3 | Complexity Δ (Sum/Max): 3/3 | Churn Δ: 17 | Churn Cumulative: 321 | Contributors (this commit): 12 | Commits (past 90d): 2 | Contributors (cumulative): 12 | DMM Complexity: 1.0\n\nDIFF:\n@@ -191,3 +191,20 @@ def test_flaskgroup():\n     result = runner.invoke(cli, ['test'])\n     assert result.exit_code == 0\n     assert result.output == 'flaskgroup\\n'\n+\n+\n+def test_print_exceptions():\n+    \"\"\"Print the stacktrace if the CLI.\"\"\"\n+    def create_app(info):\n+        raise Exception(\"oh no\")\n+        return Flask(\"flaskgroup\")\n+\n+    @click.group(cls=FlaskGroup, create_app=create_app)\n+    def cli(**params):\n+        pass\n+\n+    runner = CliRunner()\n+    result = runner.invoke(cli, ['--help'])\n+    assert result.exit_code == 0\n+    assert 'Exception: oh no' in result.output\n+    assert 'Traceback' in result.output\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#7a7a163ff18c4491b8c2a6cd0630a6f4e4ce2984", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 3 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 1424 | Contributors (this commit): 21 | Commits (past 90d): 5 | Contributors (cumulative): 21 | DMM Complexity: 0.0\n\nDIFF:\n@@ -93,7 +93,9 @@ def locate_app(app_id):\n         # Reraise the ImportError if it occurred within the imported module.\n         # Determine this by checking whether the trace has a depth > 1.\n         if sys.exc_info()[-1].tb_next:\n-            raise\n+            stack_trace = traceback.format_exc()\n+            raise NoAppException('There was an error trying to import'\n+                    ' the app (%s):\\n%s' % (module, stack_trace))\n         else:\n             raise NoAppException('The file/path provided (%s) does not appear'\n                                  ' to exist.  Please verify the path is '\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#6e5250ab5dcdbf1e6d47e8481ba80de4f44f20f9", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 323 | Contributors (this commit): 13 | Commits (past 90d): 3 | Contributors (cumulative): 13 | DMM Complexity: None\n\nDIFF:\n@@ -83,7 +83,7 @@ def test_locate_app(test_apps):\n     pytest.raises(NoAppException, locate_app, \"notanpp.py\")\n     pytest.raises(NoAppException, locate_app, \"cliapp/app\")\n     pytest.raises(RuntimeError, locate_app, \"cliapp.app:notanapp\")\n-    pytest.raises(ImportError, locate_app, \"cliapp.importerrorapp\")\n+    pytest.raises(NoAppException, locate_app, \"cliapp.importerrorapp\")\n \n \n def test_find_default_import_path(test_apps, monkeypatch, tmpdir):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#0049922f2e690a6d58f335ca9196c95f1de84370", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 17 | Lines Deleted: 1 | Files Changed: 3 | Hunks: 5 | Methods Changed: 2 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 18 | Churn Cumulative: 3331 | Contributors (this commit): 67 | Commits (past 90d): 6 | Contributors (cumulative): 88 | DMM Complexity: 0.7692307692307693\n\nDIFF:\n@@ -41,6 +41,7 @@ from .signals import message_flashed\n from .globals import session, _request_ctx_stack, _app_ctx_stack, \\\n      current_app, request\n from ._compat import string_types, text_type\n+from unidecode import unidecode\n \n \n # sentinel\n@@ -534,8 +535,11 @@ def send_file(filename_or_fp, mimetype=None, as_attachment=False,\n         if attachment_filename is None:\n             raise TypeError('filename unavailable, required for '\n                             'sending as attachment')\n+        filename_dict = {\n+            'filename': unidecode(attachment_filename),\n+            'filename*': \"UTF-8''%s\" % url_quote(attachment_filename)}\n         headers.add('Content-Disposition', 'attachment',\n-                    filename=attachment_filename)\n+                    **filename_dict)\n \n     if current_app.use_x_sendfile and filename:\n         if file is not None:\n\n@@ -75,6 +75,7 @@ setup(\n         'Jinja2>=2.4',\n         'itsdangerous>=0.21',\n         'click>=2.0',\n+        'unidecode',\n     ],\n     classifiers=[\n         'Development Status :: 4 - Beta',\n\n@@ -560,6 +560,17 @@ class TestSendfile(object):\n             assert options['filename'] == 'index.txt'\n             rv.close()\n \n+    def test_attachment_with_utf8_filename(self):\n+        app = flask.Flask(__name__)\n+        with app.test_request_context():\n+            with open(os.path.join(app.root_path, 'static/index.html')) as f:\n+                rv = flask.send_file(f, as_attachment=True,\n+                                     attachment_filename='Ñandú／pingüino.txt')\n+                value, options = \\\n+                    parse_options_header(rv.headers['Content-Disposition'])\n+                assert options == {'filename': 'Nandu/pinguino.txt', 'filename*': \"UTF-8''%C3%91and%C3%BA%EF%BC%8Fping%C3%BCino.txt\"}\n+                rv.close()\n+\n     def test_static_file(self):\n         app = flask.Flask(__name__)\n         # default cache timeout is 12 hours\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#6ef45f30ab0e95d80ee2a29168f098e9037b9e0b", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 6 | Lines Deleted: 5 | Files Changed: 2 | Hunks: 2 | Methods Changed: 2 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 11 | Churn Cumulative: 2978 | Contributors (this commit): 56 | Commits (past 90d): 6 | Contributors (cumulative): 69 | DMM Complexity: 1.0\n\nDIFF:\n@@ -536,7 +536,7 @@ def send_file(filename_or_fp, mimetype=None, as_attachment=False,\n             raise TypeError('filename unavailable, required for '\n                             'sending as attachment')\n         filename_dict = {\n-            'filename': unidecode(attachment_filename),\n+            'filename': unidecode(text_type(attachment_filename)),\n             'filename*': \"UTF-8''%s\" % url_quote(attachment_filename)}\n         headers.add('Content-Disposition', 'attachment',\n                     **filename_dict)\n\n@@ -565,10 +565,11 @@ class TestSendfile(object):\n         with app.test_request_context():\n             with open(os.path.join(app.root_path, 'static/index.html')) as f:\n                 rv = flask.send_file(f, as_attachment=True,\n-                                     attachment_filename='Ñandú／pingüino.txt')\n-                value, options = \\\n-                    parse_options_header(rv.headers['Content-Disposition'])\n-                assert options == {'filename': 'Nandu/pinguino.txt', 'filename*': \"UTF-8''%C3%91and%C3%BA%EF%BC%8Fping%C3%BCino.txt\"}\n+                                     attachment_filename=u'Ñandú／pingüino.txt')\n+                content_disposition = set(rv.headers['Content-Disposition'].split(';'))\n+                assert content_disposition == set(['attachment',\n+                                                   ' filename=\"Nandu/pinguino.txt\"',\n+                                                   \" filename*=UTF-8''%C3%91and%C3%BA%EF%BC%8Fping%C3%BCino.txt\"])\n                 rv.close()\n \n     def test_static_file(self):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#bf023e7dc0bae78ff0ab14dc9f10a87e2b56f676", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 4 | Lines Deleted: 3 | Files Changed: 2 | Hunks: 4 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 7 | Churn Cumulative: 2413 | Contributors (this commit): 60 | Commits (past 90d): 7 | Contributors (cumulative): 67 | DMM Complexity: 0.0\n\nDIFF:\n@@ -14,6 +14,7 @@ import sys\n import pkgutil\n import posixpath\n import mimetypes\n+import unicodedata\n from time import time\n from zlib import adler32\n from threading import RLock\n@@ -41,7 +42,6 @@ from .signals import message_flashed\n from .globals import session, _request_ctx_stack, _app_ctx_stack, \\\n      current_app, request\n from ._compat import string_types, text_type\n-from unidecode import unidecode\n \n \n # sentinel\n@@ -536,7 +536,9 @@ def send_file(filename_or_fp, mimetype=None, as_attachment=False,\n             raise TypeError('filename unavailable, required for '\n                             'sending as attachment')\n         filename_dict = {\n-            'filename': unidecode(text_type(attachment_filename)),\n+            'filename': (unicodedata.normalize('NFKD',\n+                         text_type(attachment_filename)).encode('ascii',\n+                                                                'ignore')),\n             'filename*': \"UTF-8''%s\" % url_quote(attachment_filename)}\n         headers.add('Content-Disposition', 'attachment',\n                     **filename_dict)\n\n@@ -75,7 +75,6 @@ setup(\n         'Jinja2>=2.4',\n         'itsdangerous>=0.21',\n         'click>=2.0',\n-        'unidecode',\n     ],\n     classifiers=[\n         'Development Status :: 4 - Beta',\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
