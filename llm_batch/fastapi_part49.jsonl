{"custom_id": "fastapi#684c0077cc0ef48364cd3241b80a135213376d22", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 463 | Lines Deleted: 0 | Files Changed: 7 | Hunks: 8 | Methods Changed: 13 | Complexity Δ (Sum/Max): 13/3 | Churn Δ: 463 | Churn Cumulative: 2352 | Contributors (this commit): 23 | Commits (past 90d): 7 | Contributors (cumulative): 29 | DMM Complexity: 0.9919354838709677\n\nDIFF:\n@@ -0,0 +1,20 @@\n+from dataclasses import dataclass\n+from typing import Optional\n+\n+from fastapi import FastAPI\n+\n+\n+@dataclass\n+class Item:\n+    name: str\n+    price: float\n+    description: Optional[str] = None\n+    tax: Optional[float] = None\n+\n+\n+app = FastAPI()\n+\n+\n+@app.post(\"/items/\")\n+async def create_item(item: Item):\n+    return item\n\n@@ -0,0 +1,26 @@\n+from dataclasses import dataclass, field\n+from typing import List, Optional\n+\n+from fastapi import FastAPI\n+\n+\n+@dataclass\n+class Item:\n+    name: str\n+    price: float\n+    tags: List[str] = field(default_factory=list)\n+    description: Optional[str] = None\n+    tax: Optional[float] = None\n+\n+\n+app = FastAPI()\n+\n+\n+@app.get(\"/items/next\", response_model=Item)\n+async def read_next_item():\n+    return {\n+        \"name\": \"Island In The Moon\",\n+        \"price\": 12.99,\n+        \"description\": \"A place to be be playin' and havin' fun\",\n+        \"tags\": [\"breater\"],\n+    }\n\n@@ -0,0 +1,55 @@\n+from dataclasses import field  # (1)\n+from typing import List, Optional\n+\n+from fastapi import FastAPI\n+from pydantic.dataclasses import dataclass  # (2)\n+\n+\n+@dataclass\n+class Item:\n+    name: str\n+    description: Optional[str] = None\n+\n+\n+@dataclass\n+class Author:\n+    name: str\n+    items: List[Item] = field(default_factory=list)  # (3)\n+\n+\n+app = FastAPI()\n+\n+\n+@app.post(\"/authors/{author_id}/items/\", response_model=Author)  # (4)\n+async def create_author_items(author_id: str, items: List[Item]):  # (5)\n+    return {\"name\": author_id, \"items\": items}  # (6)\n+\n+\n+@app.get(\"/authors/\", response_model=List[Author])  # (7)\n+def get_authors():  # (8)\n+    return [  # (9)\n+        {\n+            \"name\": \"Breaters\",\n+            \"items\": [\n+                {\n+                    \"name\": \"Island In The Moon\",\n+                    \"description\": \"A place to be be playin' and havin' fun\",\n+                },\n+                {\"name\": \"Holy Buddies\"},\n+            ],\n+        },\n+        {\n+            \"name\": \"System of an Up\",\n+            \"items\": [\n+                {\n+                    \"name\": \"Salt\",\n+                    \"description\": \"The kombucha mushroom people's favorite\",\n+                },\n+                {\"name\": \"Pad Thai\"},\n+                {\n+                    \"name\": \"Lonely Night\",\n+                    \"description\": \"The mostests lonliest nightiest of allest\",\n+                },\n+            ],\n+        },\n+    ]\n\n@@ -1,4 +1,5 @@\n import asyncio\n+import dataclasses\n import inspect\n from contextlib import contextmanager\n from copy import deepcopy\n@@ -217,6 +218,7 @@ def is_scalar_field(field: ModelField) -> bool:\n         field.shape == SHAPE_SINGLETON\n         and not lenient_issubclass(field.type_, BaseModel)\n         and not lenient_issubclass(field.type_, sequence_types + (dict,))\n+        and not dataclasses.is_dataclass(field.type_)\n         and not isinstance(field_info, params.Body)\n     ):\n         return False\n\n@@ -0,0 +1,113 @@\n+from fastapi.testclient import TestClient\n+\n+from docs_src.dataclasses.tutorial001 import app\n+\n+client = TestClient(app)\n+\n+openapi_schema = {\n+    \"openapi\": \"3.0.2\",\n+    \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n+    \"paths\": {\n+        \"/items/\": {\n+            \"post\": {\n+                \"summary\": \"Create Item\",\n+                \"operationId\": \"create_item_items__post\",\n+                \"requestBody\": {\n+                    \"content\": {\n+                        \"application/json\": {\n+                            \"schema\": {\"$ref\": \"#/components/schemas/Item\"}\n+                        }\n+                    },\n+                    \"required\": True,\n+                },\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                    },\n+                    \"422\": {\n+                        \"description\": \"Validation Error\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\n+                                    \"$ref\": \"#/components/schemas/HTTPValidationError\"\n+                                }\n+                            }\n+                        },\n+                    },\n+                },\n+            }\n+        }\n+    },\n+    \"components\": {\n+        \"schemas\": {\n+            \"HTTPValidationError\": {\n+                \"title\": \"HTTPValidationError\",\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"detail\": {\n+                        \"title\": \"Detail\",\n+                        \"type\": \"array\",\n+                        \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n+                    }\n+                },\n+            },\n+            \"Item\": {\n+                \"title\": \"Item\",\n+                \"required\": [\"name\", \"price\"],\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"name\": {\"title\": \"Name\", \"type\": \"string\"},\n+                    \"price\": {\"title\": \"Price\", \"type\": \"number\"},\n+                    \"description\": {\"title\": \"Description\", \"type\": \"string\"},\n+                    \"tax\": {\"title\": \"Tax\", \"type\": \"number\"},\n+                },\n+            },\n+            \"ValidationError\": {\n+                \"title\": \"ValidationError\",\n+                \"required\": [\"loc\", \"msg\", \"type\"],\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"loc\": {\n+                        \"title\": \"Location\",\n+                        \"type\": \"array\",\n+                        \"items\": {\"type\": \"string\"},\n+                    },\n+                    \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n+                    \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n+                },\n+            },\n+        }\n+    },\n+}\n+\n+\n+def test_openapi_schema():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200\n+    assert response.json() == openapi_schema\n+\n+\n+def test_post_item():\n+    response = client.post(\"/items/\", json={\"name\": \"Foo\", \"price\": 3})\n+    assert response.status_code == 200\n+    assert response.json() == {\n+        \"name\": \"Foo\",\n+        \"price\": 3,\n+        \"description\": None,\n+        \"tax\": None,\n+    }\n+\n+\n+def test_post_invalid_item():\n+    response = client.post(\"/items/\", json={\"name\": \"Foo\", \"price\": \"invalid price\"})\n+    assert response.status_code == 422\n+    assert response.json() == {\n+        \"detail\": [\n+            {\n+                \"loc\": [\"body\", \"price\"],\n+                \"msg\": \"value is not a valid float\",\n+                \"type\": \"type_error.float\",\n+            }\n+        ]\n+    }\n\n@@ -0,0 +1,66 @@\n+from fastapi.testclient import TestClient\n+\n+from docs_src.dataclasses.tutorial002 import app\n+\n+client = TestClient(app)\n+\n+openapi_schema = {\n+    \"openapi\": \"3.0.2\",\n+    \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n+    \"paths\": {\n+        \"/items/next\": {\n+            \"get\": {\n+                \"summary\": \"Read Next Item\",\n+                \"operationId\": \"read_next_item_items_next_get\",\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\"$ref\": \"#/components/schemas/Item\"}\n+                            }\n+                        },\n+                    }\n+                },\n+            }\n+        }\n+    },\n+    \"components\": {\n+        \"schemas\": {\n+            \"Item\": {\n+                \"title\": \"Item\",\n+                \"required\": [\"name\", \"price\", \"tags\"],\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"name\": {\"title\": \"Name\", \"type\": \"string\"},\n+                    \"price\": {\"title\": \"Price\", \"type\": \"number\"},\n+                    \"tags\": {\n+                        \"title\": \"Tags\",\n+                        \"type\": \"array\",\n+                        \"items\": {\"type\": \"string\"},\n+                    },\n+                    \"description\": {\"title\": \"Description\", \"type\": \"string\"},\n+                    \"tax\": {\"title\": \"Tax\", \"type\": \"number\"},\n+                },\n+            }\n+        }\n+    },\n+}\n+\n+\n+def test_openapi_schema():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200\n+    assert response.json() == openapi_schema\n+\n+\n+def test_get_item():\n+    response = client.get(\"/items/next\")\n+    assert response.status_code == 200\n+    assert response.json() == {\n+        \"name\": \"Island In The Moon\",\n+        \"price\": 12.99,\n+        \"description\": \"A place to be be playin' and havin' fun\",\n+        \"tags\": [\"breater\"],\n+        \"tax\": None,\n+    }\n\n@@ -0,0 +1,181 @@\n+from fastapi.testclient import TestClient\n+\n+from docs_src.dataclasses.tutorial003 import app\n+\n+client = TestClient(app)\n+\n+openapi_schema = {\n+    \"openapi\": \"3.0.2\",\n+    \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n+    \"paths\": {\n+        \"/authors/{author_id}/items/\": {\n+            \"post\": {\n+                \"summary\": \"Create Author Items\",\n+                \"operationId\": \"create_author_items_authors__author_id__items__post\",\n+                \"parameters\": [\n+                    {\n+                        \"required\": True,\n+                        \"schema\": {\"title\": \"Author Id\", \"type\": \"string\"},\n+                        \"name\": \"author_id\",\n+                        \"in\": \"path\",\n+                    }\n+                ],\n+                \"requestBody\": {\n+                    \"content\": {\n+                        \"application/json\": {\n+                            \"schema\": {\n+                                \"title\": \"Items\",\n+                                \"type\": \"array\",\n+                                \"items\": {\"$ref\": \"#/components/schemas/Item\"},\n+                            }\n+                        }\n+                    },\n+                    \"required\": True,\n+                },\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\"$ref\": \"#/components/schemas/Author\"}\n+                            }\n+                        },\n+                    },\n+                    \"422\": {\n+                        \"description\": \"Validation Error\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\n+                                    \"$ref\": \"#/components/schemas/HTTPValidationError\"\n+                                }\n+                            }\n+                        },\n+                    },\n+                },\n+            }\n+        },\n+        \"/authors/\": {\n+            \"get\": {\n+                \"summary\": \"Get Authors\",\n+                \"operationId\": \"get_authors_authors__get\",\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\n+                                    \"title\": \"Response Get Authors Authors  Get\",\n+                                    \"type\": \"array\",\n+                                    \"items\": {\"$ref\": \"#/components/schemas/Author\"},\n+                                }\n+                            }\n+                        },\n+                    }\n+                },\n+            }\n+        },\n+    },\n+    \"components\": {\n+        \"schemas\": {\n+            \"Author\": {\n+                \"title\": \"Author\",\n+                \"required\": [\"name\"],\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"name\": {\"title\": \"Name\", \"type\": \"string\"},\n+                    \"items\": {\n+                        \"title\": \"Items\",\n+                        \"type\": \"array\",\n+                        \"items\": {\"$ref\": \"#/components/schemas/Item\"},\n+                    },\n+                },\n+            },\n+            \"HTTPValidationError\": {\n+                \"title\": \"HTTPValidationError\",\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"detail\": {\n+                        \"title\": \"Detail\",\n+                        \"type\": \"array\",\n+                        \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n+                    }\n+                },\n+            },\n+            \"Item\": {\n+                \"title\": \"Item\",\n+                \"required\": [\"name\"],\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"name\": {\"title\": \"Name\", \"type\": \"string\"},\n+                    \"description\": {\"title\": \"Description\", \"type\": \"string\"},\n+                },\n+            },\n+            \"ValidationError\": {\n+                \"title\": \"ValidationError\",\n+                \"required\": [\"loc\", \"msg\", \"type\"],\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"loc\": {\n+                        \"title\": \"Location\",\n+                        \"type\": \"array\",\n+                        \"items\": {\"type\": \"string\"},\n+                    },\n+                    \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n+                    \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n+                },\n+            },\n+        }\n+    },\n+}\n+\n+\n+def test_openapi_schema():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200\n+    assert response.json() == openapi_schema\n+\n+\n+def test_post_authors_item():\n+    response = client.post(\n+        \"/authors/foo/items/\",\n+        json=[{\"name\": \"Bar\"}, {\"name\": \"Baz\", \"description\": \"Drop the Baz\"}],\n+    )\n+    assert response.status_code == 200\n+    assert response.json() == {\n+        \"name\": \"foo\",\n+        \"items\": [\n+            {\"name\": \"Bar\", \"description\": None},\n+            {\"name\": \"Baz\", \"description\": \"Drop the Baz\"},\n+        ],\n+    }\n+\n+\n+def test_get_authors():\n+    response = client.get(\"/authors/\")\n+    assert response.status_code == 200\n+    assert response.json() == [\n+        {\n+            \"name\": \"Breaters\",\n+            \"items\": [\n+                {\n+                    \"name\": \"Island In The Moon\",\n+                    \"description\": \"A place to be be playin' and havin' fun\",\n+                },\n+                {\"name\": \"Holy Buddies\", \"description\": None},\n+            ],\n+        },\n+        {\n+            \"name\": \"System of an Up\",\n+            \"items\": [\n+                {\n+                    \"name\": \"Salt\",\n+                    \"description\": \"The kombucha mushroom people's favorite\",\n+                },\n+                {\"name\": \"Pad Thai\", \"description\": None},\n+                {\n+                    \"name\": \"Lonely Night\",\n+                    \"description\": \"The mostests lonliest nightiest of allest\",\n+                },\n+            ],\n+        },\n+    ]\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#a0209a0d2c26628809fd885a4c211c6248082921", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 328 | Contributors (this commit): 2 | Commits (past 90d): 8 | Contributors (cumulative): 2 | DMM Complexity: None\n\nDIFF:\n@@ -1,6 +1,6 @@\n \"\"\"FastAPI framework, high performance, easy to learn, fast to code, ready for production\"\"\"\n \n-__version__ = \"0.66.1\"\n+__version__ = \"0.67.0\"\n \n from starlette import status as status\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#fa2c750443e4c12ce3c8940f3043c36d218550ab", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 56 | Lines Deleted: 14 | Files Changed: 8 | Hunks: 18 | Methods Changed: 12 | Complexity Δ (Sum/Max): 4/1 | Churn Δ: 70 | Churn Cumulative: 777 | Contributors (this commit): 7 | Commits (past 90d): 8 | Contributors (cumulative): 21 | DMM Complexity: 1.0\n\nDIFF:\n@@ -1,6 +1,6 @@\n from fastapi import FastAPI\n \n-from . import config\n+from .config import settings\n \n app = FastAPI()\n \n@@ -8,7 +8,7 @@ app = FastAPI()\n @app.get(\"/info\")\n async def info():\n     return {\n-        \"app_name\": config.settings.app_name,\n-        \"admin_email\": config.settings.admin_email,\n-        \"items_per_user\": config.settings.items_per_user,\n+        \"app_name\": settings.app_name,\n+        \"admin_email\": settings.admin_email,\n+        \"items_per_user\": settings.items_per_user,\n     }\n\n@@ -2,18 +2,18 @@ from functools import lru_cache\n \n from fastapi import Depends, FastAPI\n \n-from . import config\n+from .config import Settings\n \n app = FastAPI()\n \n \n @lru_cache()\n def get_settings():\n-    return config.Settings()\n+    return Settings()\n \n \n @app.get(\"/info\")\n-async def info(settings: config.Settings = Depends(get_settings)):\n+async def info(settings: Settings = Depends(get_settings)):\n     return {\n         \"app_name\": settings.app_name,\n         \"admin_email\": settings.admin_email,\n\n@@ -1,19 +1,19 @@\n from fastapi.testclient import TestClient\n \n-from . import config, main\n+from .config import Settings\n+from .main import app, get_settings\n \n-client = TestClient(main.app)\n+client = TestClient(app)\n \n \n def get_settings_override():\n-    return config.Settings(admin_email=\"testing_admin@example.com\")\n+    return Settings(admin_email=\"testing_admin@example.com\")\n \n \n-main.app.dependency_overrides[main.get_settings] = get_settings_override\n+app.dependency_overrides[get_settings] = get_settings_override\n \n \n def test_app():\n-\n     response = client.get(\"/info\")\n     data = response.json()\n     assert data == {\n\n@@ -359,6 +359,12 @@ no_jessica = {\n         (\"/users/foo\", 422, no_jessica, {}),\n         (\"/users/me?token=jessica\", 200, {\"username\": \"fakecurrentuser\"}, {}),\n         (\"/users/me\", 422, no_jessica, {}),\n+        (\n+            \"/users?token=monica\",\n+            400,\n+            {\"detail\": \"No Jessica token provided\"},\n+            {},\n+        ),\n         (\n             \"/items?token=jessica\",\n             200,\n@@ -372,6 +378,12 @@ no_jessica = {\n             {\"name\": \"Plumbus\", \"item_id\": \"plumbus\"},\n             {\"X-Token\": \"fake-super-secret-token\"},\n         ),\n+        (\n+            \"/items/bar?token=jessica\",\n+            404,\n+            {\"detail\": \"Item not found\"},\n+            {\"X-Token\": \"fake-super-secret-token\"},\n+        ),\n         (\"/items/plumbus\", 422, no_jessica, {\"X-Token\": \"fake-super-secret-token\"}),\n         (\n             \"/items?token=jessica\",\n\n@@ -44,3 +44,10 @@ def test_disable_openapi(monkeypatch):\n     assert response.status_code == 404, response.text\n     response = client.get(\"/redoc\")\n     assert response.status_code == 404, response.text\n+\n+\n+def test_root():\n+    client = TestClient(tutorial001.app)\n+    response = client.get(\"/\")\n+    assert response.status_code == 200\n+    assert response.json() == {\"message\": \"Hello World\"}\n\n@@ -1,9 +1,17 @@\n from fastapi.testclient import TestClient\n+from pytest import MonkeyPatch\n \n from docs_src.settings.app02 import main, test_main\n \n client = TestClient(main.app)\n \n \n-def test_setting_override():\n+def test_settings(monkeypatch: MonkeyPatch):\n+    monkeypatch.setenv(\"ADMIN_EMAIL\", \"admin@example.com\")\n+    settings = main.get_settings()\n+    assert settings.app_name == \"Awesome API\"\n+    assert settings.items_per_user == 50\n+\n+\n+def test_override_settings():\n     test_main.test_app()\n\n@@ -0,0 +1,10 @@\n+from docs_src.app_testing import test_main_b\n+\n+\n+def test_app():\n+    test_main_b.test_create_existing_item()\n+    test_main_b.test_create_item()\n+    test_main_b.test_create_item_bad_token()\n+    test_main_b.test_read_inexistent_item()\n+    test_main_b.test_read_item()\n+    test_main_b.test_read_item_bad_token()\n\n@@ -1,10 +1,15 @@\n from fastapi.testclient import TestClient\n \n-from docs_src.websockets.tutorial003 import app\n+from docs_src.websockets.tutorial003 import app, html\n \n client = TestClient(app)\n \n \n+def test_get():\n+    response = client.get(\"/\")\n+    assert response.text == html\n+\n+\n def test_websocket_handle_disconnection():\n     with client.websocket_connect(\"/ws/1234\") as connection, client.websocket_connect(\n         \"/ws/5678\"\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#3b2e891917dd2739659643cedb5258e65d54934d", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1062 | Lines Deleted: 16 | Files Changed: 15 | Hunks: 32 | Methods Changed: 76 | Complexity Δ (Sum/Max): 62/10 | Churn Δ: 1078 | Churn Cumulative: 2031 | Contributors (this commit): 8 | Commits (past 90d): 15 | Contributors (cumulative): 29 | DMM Complexity: 1.0\n\nDIFF:\n@@ -13,9 +13,16 @@ class APIKeyBase(SecurityBase):\n \n class APIKeyQuery(APIKeyBase):\n     def __init__(\n-        self, *, name: str, scheme_name: Optional[str] = None, auto_error: bool = True\n+        self,\n+        *,\n+        name: str,\n+        scheme_name: Optional[str] = None,\n+        description: Optional[str] = None,\n+        auto_error: bool = True\n     ):\n-        self.model: APIKey = APIKey(**{\"in\": APIKeyIn.query}, name=name)\n+        self.model: APIKey = APIKey(\n+            **{\"in\": APIKeyIn.query}, name=name, description=description\n+        )\n         self.scheme_name = scheme_name or self.__class__.__name__\n         self.auto_error = auto_error\n \n@@ -33,9 +40,16 @@ class APIKeyQuery(APIKeyBase):\n \n class APIKeyHeader(APIKeyBase):\n     def __init__(\n-        self, *, name: str, scheme_name: Optional[str] = None, auto_error: bool = True\n+        self,\n+        *,\n+        name: str,\n+        scheme_name: Optional[str] = None,\n+        description: Optional[str] = None,\n+        auto_error: bool = True\n     ):\n-        self.model: APIKey = APIKey(**{\"in\": APIKeyIn.header}, name=name)\n+        self.model: APIKey = APIKey(\n+            **{\"in\": APIKeyIn.header}, name=name, description=description\n+        )\n         self.scheme_name = scheme_name or self.__class__.__name__\n         self.auto_error = auto_error\n \n@@ -53,9 +67,16 @@ class APIKeyHeader(APIKeyBase):\n \n class APIKeyCookie(APIKeyBase):\n     def __init__(\n-        self, *, name: str, scheme_name: Optional[str] = None, auto_error: bool = True\n+        self,\n+        *,\n+        name: str,\n+        scheme_name: Optional[str] = None,\n+        description: Optional[str] = None,\n+        auto_error: bool = True\n     ):\n-        self.model: APIKey = APIKey(**{\"in\": APIKeyIn.cookie}, name=name)\n+        self.model: APIKey = APIKey(\n+            **{\"in\": APIKeyIn.cookie}, name=name, description=description\n+        )\n         self.scheme_name = scheme_name or self.__class__.__name__\n         self.auto_error = auto_error\n \n\n@@ -24,9 +24,14 @@ class HTTPAuthorizationCredentials(BaseModel):\n \n class HTTPBase(SecurityBase):\n     def __init__(\n-        self, *, scheme: str, scheme_name: Optional[str] = None, auto_error: bool = True\n+        self,\n+        *,\n+        scheme: str,\n+        scheme_name: Optional[str] = None,\n+        description: Optional[str] = None,\n+        auto_error: bool = True,\n     ):\n-        self.model = HTTPBaseModel(scheme=scheme)\n+        self.model = HTTPBaseModel(scheme=scheme, description=description)\n         self.scheme_name = scheme_name or self.__class__.__name__\n         self.auto_error = auto_error\n \n@@ -51,9 +56,10 @@ class HTTPBasic(HTTPBase):\n         *,\n         scheme_name: Optional[str] = None,\n         realm: Optional[str] = None,\n+        description: Optional[str] = None,\n         auto_error: bool = True,\n     ):\n-        self.model = HTTPBaseModel(scheme=\"basic\")\n+        self.model = HTTPBaseModel(scheme=\"basic\", description=description)\n         self.scheme_name = scheme_name or self.__class__.__name__\n         self.realm = realm\n         self.auto_error = auto_error\n@@ -97,9 +103,10 @@ class HTTPBearer(HTTPBase):\n         *,\n         bearerFormat: Optional[str] = None,\n         scheme_name: Optional[str] = None,\n+        description: Optional[str] = None,\n         auto_error: bool = True,\n     ):\n-        self.model = HTTPBearerModel(bearerFormat=bearerFormat)\n+        self.model = HTTPBearerModel(bearerFormat=bearerFormat, description=description)\n         self.scheme_name = scheme_name or self.__class__.__name__\n         self.auto_error = auto_error\n \n@@ -127,8 +134,14 @@ class HTTPBearer(HTTPBase):\n \n \n class HTTPDigest(HTTPBase):\n-    def __init__(self, *, scheme_name: Optional[str] = None, auto_error: bool = True):\n-        self.model = HTTPBaseModel(scheme=\"digest\")\n+    def __init__(\n+        self,\n+        *,\n+        scheme_name: Optional[str] = None,\n+        description: Optional[str] = None,\n+        auto_error: bool = True,\n+    ):\n+        self.model = HTTPBaseModel(scheme=\"digest\", description=description)\n         self.scheme_name = scheme_name or self.__class__.__name__\n         self.auto_error = auto_error\n \n\n@@ -118,9 +118,10 @@ class OAuth2(SecurityBase):\n         *,\n         flows: Union[OAuthFlowsModel, Dict[str, Dict[str, Any]]] = OAuthFlowsModel(),\n         scheme_name: Optional[str] = None,\n+        description: Optional[str] = None,\n         auto_error: Optional[bool] = True\n     ):\n-        self.model = OAuth2Model(flows=flows)\n+        self.model = OAuth2Model(flows=flows, description=description)\n         self.scheme_name = scheme_name or self.__class__.__name__\n         self.auto_error = auto_error\n \n@@ -142,12 +143,18 @@ class OAuth2PasswordBearer(OAuth2):\n         tokenUrl: str,\n         scheme_name: Optional[str] = None,\n         scopes: Optional[Dict[str, str]] = None,\n+        description: Optional[str] = None,\n         auto_error: bool = True,\n     ):\n         if not scopes:\n             scopes = {}\n         flows = OAuthFlowsModel(password={\"tokenUrl\": tokenUrl, \"scopes\": scopes})\n-        super().__init__(flows=flows, scheme_name=scheme_name, auto_error=auto_error)\n+        super().__init__(\n+            flows=flows,\n+            scheme_name=scheme_name,\n+            description=description,\n+            auto_error=auto_error,\n+        )\n \n     async def __call__(self, request: Request) -> Optional[str]:\n         authorization: str = request.headers.get(\"Authorization\")\n@@ -172,6 +179,7 @@ class OAuth2AuthorizationCodeBearer(OAuth2):\n         refreshUrl: Optional[str] = None,\n         scheme_name: Optional[str] = None,\n         scopes: Optional[Dict[str, str]] = None,\n+        description: Optional[str] = None,\n         auto_error: bool = True,\n     ):\n         if not scopes:\n@@ -184,7 +192,12 @@ class OAuth2AuthorizationCodeBearer(OAuth2):\n                 \"scopes\": scopes,\n             }\n         )\n-        super().__init__(flows=flows, scheme_name=scheme_name, auto_error=auto_error)\n+        super().__init__(\n+            flows=flows,\n+            scheme_name=scheme_name,\n+            description=description,\n+            auto_error=auto_error,\n+        )\n \n     async def __call__(self, request: Request) -> Optional[str]:\n         authorization: str = request.headers.get(\"Authorization\")\n\n@@ -13,9 +13,12 @@ class OpenIdConnect(SecurityBase):\n         *,\n         openIdConnectUrl: str,\n         scheme_name: Optional[str] = None,\n+        description: Optional[str] = None,\n         auto_error: bool = True\n     ):\n-        self.model = OpenIdConnectModel(openIdConnectUrl=openIdConnectUrl)\n+        self.model = OpenIdConnectModel(\n+            openIdConnectUrl=openIdConnectUrl, description=description\n+        )\n         self.scheme_name = scheme_name or self.__class__.__name__\n         self.auto_error = auto_error\n \n\n@@ -0,0 +1,73 @@\n+from fastapi import Depends, FastAPI, Security\n+from fastapi.security import APIKeyCookie\n+from fastapi.testclient import TestClient\n+from pydantic import BaseModel\n+\n+app = FastAPI()\n+\n+api_key = APIKeyCookie(name=\"key\", description=\"An API Cookie Key\")\n+\n+\n+class User(BaseModel):\n+    username: str\n+\n+\n+def get_current_user(oauth_header: str = Security(api_key)):\n+    user = User(username=oauth_header)\n+    return user\n+\n+\n+@app.get(\"/users/me\")\n+def read_current_user(current_user: User = Depends(get_current_user)):\n+    return current_user\n+\n+\n+client = TestClient(app)\n+\n+openapi_schema = {\n+    \"openapi\": \"3.0.2\",\n+    \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n+    \"paths\": {\n+        \"/users/me\": {\n+            \"get\": {\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                    }\n+                },\n+                \"summary\": \"Read Current User\",\n+                \"operationId\": \"read_current_user_users_me_get\",\n+                \"security\": [{\"APIKeyCookie\": []}],\n+            }\n+        }\n+    },\n+    \"components\": {\n+        \"securitySchemes\": {\n+            \"APIKeyCookie\": {\n+                \"type\": \"apiKey\",\n+                \"name\": \"key\",\n+                \"in\": \"cookie\",\n+                \"description\": \"An API Cookie Key\",\n+            }\n+        }\n+    },\n+}\n+\n+\n+def test_openapi_schema():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == openapi_schema\n+\n+\n+def test_security_api_key():\n+    response = client.get(\"/users/me\", cookies={\"key\": \"secret\"})\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\"username\": \"secret\"}\n+\n+\n+def test_security_api_key_no_key():\n+    response = client.get(\"/users/me\")\n+    assert response.status_code == 403, response.text\n+    assert response.json() == {\"detail\": \"Not authenticated\"}\n\n@@ -0,0 +1,73 @@\n+from fastapi import Depends, FastAPI, Security\n+from fastapi.security import APIKeyHeader\n+from fastapi.testclient import TestClient\n+from pydantic import BaseModel\n+\n+app = FastAPI()\n+\n+api_key = APIKeyHeader(name=\"key\", description=\"An API Key Header\")\n+\n+\n+class User(BaseModel):\n+    username: str\n+\n+\n+def get_current_user(oauth_header: str = Security(api_key)):\n+    user = User(username=oauth_header)\n+    return user\n+\n+\n+@app.get(\"/users/me\")\n+def read_current_user(current_user: User = Depends(get_current_user)):\n+    return current_user\n+\n+\n+client = TestClient(app)\n+\n+openapi_schema = {\n+    \"openapi\": \"3.0.2\",\n+    \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n+    \"paths\": {\n+        \"/users/me\": {\n+            \"get\": {\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                    }\n+                },\n+                \"summary\": \"Read Current User\",\n+                \"operationId\": \"read_current_user_users_me_get\",\n+                \"security\": [{\"APIKeyHeader\": []}],\n+            }\n+        }\n+    },\n+    \"components\": {\n+        \"securitySchemes\": {\n+            \"APIKeyHeader\": {\n+                \"type\": \"apiKey\",\n+                \"name\": \"key\",\n+                \"in\": \"header\",\n+                \"description\": \"An API Key Header\",\n+            }\n+        }\n+    },\n+}\n+\n+\n+def test_openapi_schema():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == openapi_schema\n+\n+\n+def test_security_api_key():\n+    response = client.get(\"/users/me\", headers={\"key\": \"secret\"})\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\"username\": \"secret\"}\n+\n+\n+def test_security_api_key_no_key():\n+    response = client.get(\"/users/me\")\n+    assert response.status_code == 403, response.text\n+    assert response.json() == {\"detail\": \"Not authenticated\"}\n\n@@ -0,0 +1,73 @@\n+from fastapi import Depends, FastAPI, Security\n+from fastapi.security import APIKeyQuery\n+from fastapi.testclient import TestClient\n+from pydantic import BaseModel\n+\n+app = FastAPI()\n+\n+api_key = APIKeyQuery(name=\"key\", description=\"API Key Query\")\n+\n+\n+class User(BaseModel):\n+    username: str\n+\n+\n+def get_current_user(oauth_header: str = Security(api_key)):\n+    user = User(username=oauth_header)\n+    return user\n+\n+\n+@app.get(\"/users/me\")\n+def read_current_user(current_user: User = Depends(get_current_user)):\n+    return current_user\n+\n+\n+client = TestClient(app)\n+\n+openapi_schema = {\n+    \"openapi\": \"3.0.2\",\n+    \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n+    \"paths\": {\n+        \"/users/me\": {\n+            \"get\": {\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                    }\n+                },\n+                \"summary\": \"Read Current User\",\n+                \"operationId\": \"read_current_user_users_me_get\",\n+                \"security\": [{\"APIKeyQuery\": []}],\n+            }\n+        }\n+    },\n+    \"components\": {\n+        \"securitySchemes\": {\n+            \"APIKeyQuery\": {\n+                \"type\": \"apiKey\",\n+                \"name\": \"key\",\n+                \"in\": \"query\",\n+                \"description\": \"API Key Query\",\n+            }\n+        }\n+    },\n+}\n+\n+\n+def test_openapi_schema():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == openapi_schema\n+\n+\n+def test_security_api_key():\n+    response = client.get(\"/users/me?key=secret\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\"username\": \"secret\"}\n+\n+\n+def test_security_api_key_no_key():\n+    response = client.get(\"/users/me\")\n+    assert response.status_code == 403, response.text\n+    assert response.json() == {\"detail\": \"Not authenticated\"}\n\n@@ -0,0 +1,62 @@\n+from fastapi import FastAPI, Security\n+from fastapi.security.http import HTTPAuthorizationCredentials, HTTPBase\n+from fastapi.testclient import TestClient\n+\n+app = FastAPI()\n+\n+security = HTTPBase(scheme=\"Other\", description=\"Other Security Scheme\")\n+\n+\n+@app.get(\"/users/me\")\n+def read_current_user(credentials: HTTPAuthorizationCredentials = Security(security)):\n+    return {\"scheme\": credentials.scheme, \"credentials\": credentials.credentials}\n+\n+\n+client = TestClient(app)\n+\n+openapi_schema = {\n+    \"openapi\": \"3.0.2\",\n+    \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n+    \"paths\": {\n+        \"/users/me\": {\n+            \"get\": {\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                    }\n+                },\n+                \"summary\": \"Read Current User\",\n+                \"operationId\": \"read_current_user_users_me_get\",\n+                \"security\": [{\"HTTPBase\": []}],\n+            }\n+        }\n+    },\n+    \"components\": {\n+        \"securitySchemes\": {\n+            \"HTTPBase\": {\n+                \"type\": \"http\",\n+                \"scheme\": \"Other\",\n+                \"description\": \"Other Security Scheme\",\n+            }\n+        }\n+    },\n+}\n+\n+\n+def test_openapi_schema():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == openapi_schema\n+\n+\n+def test_security_http_base():\n+    response = client.get(\"/users/me\", headers={\"Authorization\": \"Other foobar\"})\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\"scheme\": \"Other\", \"credentials\": \"foobar\"}\n+\n+\n+def test_security_http_base_no_credentials():\n+    response = client.get(\"/users/me\")\n+    assert response.status_code == 403, response.text\n+    assert response.json() == {\"detail\": \"Not authenticated\"}\n\n@@ -0,0 +1,85 @@\n+from base64 import b64encode\n+\n+from fastapi import FastAPI, Security\n+from fastapi.security import HTTPBasic, HTTPBasicCredentials\n+from fastapi.testclient import TestClient\n+from requests.auth import HTTPBasicAuth\n+\n+app = FastAPI()\n+\n+security = HTTPBasic(realm=\"simple\", description=\"HTTPBasic scheme\")\n+\n+\n+@app.get(\"/users/me\")\n+def read_current_user(credentials: HTTPBasicCredentials = Security(security)):\n+    return {\"username\": credentials.username, \"password\": credentials.password}\n+\n+\n+client = TestClient(app)\n+\n+openapi_schema = {\n+    \"openapi\": \"3.0.2\",\n+    \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n+    \"paths\": {\n+        \"/users/me\": {\n+            \"get\": {\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                    }\n+                },\n+                \"summary\": \"Read Current User\",\n+                \"operationId\": \"read_current_user_users_me_get\",\n+                \"security\": [{\"HTTPBasic\": []}],\n+            }\n+        }\n+    },\n+    \"components\": {\n+        \"securitySchemes\": {\n+            \"HTTPBasic\": {\n+                \"type\": \"http\",\n+                \"scheme\": \"basic\",\n+                \"description\": \"HTTPBasic scheme\",\n+            }\n+        }\n+    },\n+}\n+\n+\n+def test_openapi_schema():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == openapi_schema\n+\n+\n+def test_security_http_basic():\n+    auth = HTTPBasicAuth(username=\"john\", password=\"secret\")\n+    response = client.get(\"/users/me\", auth=auth)\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\"username\": \"john\", \"password\": \"secret\"}\n+\n+\n+def test_security_http_basic_no_credentials():\n+    response = client.get(\"/users/me\")\n+    assert response.json() == {\"detail\": \"Not authenticated\"}\n+    assert response.status_code == 401, response.text\n+    assert response.headers[\"WWW-Authenticate\"] == 'Basic realm=\"simple\"'\n+\n+\n+def test_security_http_basic_invalid_credentials():\n+    response = client.get(\n+        \"/users/me\", headers={\"Authorization\": \"Basic notabase64token\"}\n+    )\n+    assert response.status_code == 401, response.text\n+    assert response.headers[\"WWW-Authenticate\"] == 'Basic realm=\"simple\"'\n+    assert response.json() == {\"detail\": \"Invalid authentication credentials\"}\n+\n+\n+def test_security_http_basic_non_basic_credentials():\n+    payload = b64encode(b\"johnsecret\").decode(\"ascii\")\n+    auth_header = f\"Basic {payload}\"\n+    response = client.get(\"/users/me\", headers={\"Authorization\": auth_header})\n+    assert response.status_code == 401, response.text\n+    assert response.headers[\"WWW-Authenticate\"] == 'Basic realm=\"simple\"'\n+    assert response.json() == {\"detail\": \"Invalid authentication credentials\"}\n\n@@ -0,0 +1,68 @@\n+from fastapi import FastAPI, Security\n+from fastapi.security import HTTPAuthorizationCredentials, HTTPBearer\n+from fastapi.testclient import TestClient\n+\n+app = FastAPI()\n+\n+security = HTTPBearer(description=\"HTTP Bearer token scheme\")\n+\n+\n+@app.get(\"/users/me\")\n+def read_current_user(credentials: HTTPAuthorizationCredentials = Security(security)):\n+    return {\"scheme\": credentials.scheme, \"credentials\": credentials.credentials}\n+\n+\n+client = TestClient(app)\n+\n+openapi_schema = {\n+    \"openapi\": \"3.0.2\",\n+    \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n+    \"paths\": {\n+        \"/users/me\": {\n+            \"get\": {\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                    }\n+                },\n+                \"summary\": \"Read Current User\",\n+                \"operationId\": \"read_current_user_users_me_get\",\n+                \"security\": [{\"HTTPBearer\": []}],\n+            }\n+        }\n+    },\n+    \"components\": {\n+        \"securitySchemes\": {\n+            \"HTTPBearer\": {\n+                \"type\": \"http\",\n+                \"scheme\": \"bearer\",\n+                \"description\": \"HTTP Bearer token scheme\",\n+            }\n+        }\n+    },\n+}\n+\n+\n+def test_openapi_schema():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == openapi_schema\n+\n+\n+def test_security_http_bearer():\n+    response = client.get(\"/users/me\", headers={\"Authorization\": \"Bearer foobar\"})\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\"scheme\": \"Bearer\", \"credentials\": \"foobar\"}\n+\n+\n+def test_security_http_bearer_no_credentials():\n+    response = client.get(\"/users/me\")\n+    assert response.status_code == 403, response.text\n+    assert response.json() == {\"detail\": \"Not authenticated\"}\n+\n+\n+def test_security_http_bearer_incorrect_scheme_credentials():\n+    response = client.get(\"/users/me\", headers={\"Authorization\": \"Basic notreally\"})\n+    assert response.status_code == 403, response.text\n+    assert response.json() == {\"detail\": \"Invalid authentication credentials\"}\n\n@@ -0,0 +1,70 @@\n+from fastapi import FastAPI, Security\n+from fastapi.security import HTTPAuthorizationCredentials, HTTPDigest\n+from fastapi.testclient import TestClient\n+\n+app = FastAPI()\n+\n+security = HTTPDigest(description=\"HTTPDigest scheme\")\n+\n+\n+@app.get(\"/users/me\")\n+def read_current_user(credentials: HTTPAuthorizationCredentials = Security(security)):\n+    return {\"scheme\": credentials.scheme, \"credentials\": credentials.credentials}\n+\n+\n+client = TestClient(app)\n+\n+openapi_schema = {\n+    \"openapi\": \"3.0.2\",\n+    \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n+    \"paths\": {\n+        \"/users/me\": {\n+            \"get\": {\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                    }\n+                },\n+                \"summary\": \"Read Current User\",\n+                \"operationId\": \"read_current_user_users_me_get\",\n+                \"security\": [{\"HTTPDigest\": []}],\n+            }\n+        }\n+    },\n+    \"components\": {\n+        \"securitySchemes\": {\n+            \"HTTPDigest\": {\n+                \"type\": \"http\",\n+                \"scheme\": \"digest\",\n+                \"description\": \"HTTPDigest scheme\",\n+            }\n+        }\n+    },\n+}\n+\n+\n+def test_openapi_schema():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == openapi_schema\n+\n+\n+def test_security_http_digest():\n+    response = client.get(\"/users/me\", headers={\"Authorization\": \"Digest foobar\"})\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\"scheme\": \"Digest\", \"credentials\": \"foobar\"}\n+\n+\n+def test_security_http_digest_no_credentials():\n+    response = client.get(\"/users/me\")\n+    assert response.status_code == 403, response.text\n+    assert response.json() == {\"detail\": \"Not authenticated\"}\n+\n+\n+def test_security_http_digest_incorrect_scheme_credentials():\n+    response = client.get(\n+        \"/users/me\", headers={\"Authorization\": \"Other invalidauthorization\"}\n+    )\n+    assert response.status_code == 403, response.text\n+    assert response.json() == {\"detail\": \"Invalid authentication credentials\"}\n\n@@ -0,0 +1,81 @@\n+from typing import Optional\n+\n+from fastapi import FastAPI, Security\n+from fastapi.security import OAuth2AuthorizationCodeBearer\n+from fastapi.testclient import TestClient\n+\n+app = FastAPI()\n+\n+oauth2_scheme = OAuth2AuthorizationCodeBearer(\n+    authorizationUrl=\"authorize\",\n+    tokenUrl=\"token\",\n+    description=\"OAuth2 Code Bearer\",\n+    auto_error=True,\n+)\n+\n+\n+@app.get(\"/items/\")\n+async def read_items(token: Optional[str] = Security(oauth2_scheme)):\n+    return {\"token\": token}\n+\n+\n+client = TestClient(app)\n+\n+openapi_schema = {\n+    \"openapi\": \"3.0.2\",\n+    \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n+    \"paths\": {\n+        \"/items/\": {\n+            \"get\": {\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                    }\n+                },\n+                \"summary\": \"Read Items\",\n+                \"operationId\": \"read_items_items__get\",\n+                \"security\": [{\"OAuth2AuthorizationCodeBearer\": []}],\n+            }\n+        }\n+    },\n+    \"components\": {\n+        \"securitySchemes\": {\n+            \"OAuth2AuthorizationCodeBearer\": {\n+                \"type\": \"oauth2\",\n+                \"flows\": {\n+                    \"authorizationCode\": {\n+                        \"authorizationUrl\": \"authorize\",\n+                        \"tokenUrl\": \"token\",\n+                        \"scopes\": {},\n+                    }\n+                },\n+                \"description\": \"OAuth2 Code Bearer\",\n+            }\n+        }\n+    },\n+}\n+\n+\n+def test_openapi_schema():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == openapi_schema\n+\n+\n+def test_no_token():\n+    response = client.get(\"/items\")\n+    assert response.status_code == 401, response.text\n+    assert response.json() == {\"detail\": \"Not authenticated\"}\n+\n+\n+def test_incorrect_token():\n+    response = client.get(\"/items\", headers={\"Authorization\": \"Non-existent testtoken\"})\n+    assert response.status_code == 401, response.text\n+    assert response.json() == {\"detail\": \"Not authenticated\"}\n+\n+\n+def test_token():\n+    response = client.get(\"/items\", headers={\"Authorization\": \"Bearer testtoken\"})\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\"token\": \"testtoken\"}\n\n@@ -0,0 +1,255 @@\n+from typing import Optional\n+\n+import pytest\n+from fastapi import Depends, FastAPI, Security\n+from fastapi.security import OAuth2, OAuth2PasswordRequestFormStrict\n+from fastapi.testclient import TestClient\n+from pydantic import BaseModel\n+\n+app = FastAPI()\n+\n+reusable_oauth2 = OAuth2(\n+    flows={\n+        \"password\": {\n+            \"tokenUrl\": \"token\",\n+            \"scopes\": {\"read:users\": \"Read the users\", \"write:users\": \"Create users\"},\n+        }\n+    },\n+    description=\"OAuth2 security scheme\",\n+    auto_error=False,\n+)\n+\n+\n+class User(BaseModel):\n+    username: str\n+\n+\n+def get_current_user(oauth_header: Optional[str] = Security(reusable_oauth2)):\n+    if oauth_header is None:\n+        return None\n+    user = User(username=oauth_header)\n+    return user\n+\n+\n+@app.post(\"/login\")\n+def login(form_data: OAuth2PasswordRequestFormStrict = Depends()):\n+    return form_data\n+\n+\n+@app.get(\"/users/me\")\n+def read_users_me(current_user: Optional[User] = Depends(get_current_user)):\n+    if current_user is None:\n+        return {\"msg\": \"Create an account first\"}\n+    return current_user\n+\n+\n+client = TestClient(app)\n+\n+openapi_schema = {\n+    \"openapi\": \"3.0.2\",\n+    \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n+    \"paths\": {\n+        \"/login\": {\n+            \"post\": {\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                    },\n+                    \"422\": {\n+                        \"description\": \"Validation Error\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\n+                                    \"$ref\": \"#/components/schemas/HTTPValidationError\"\n+                                }\n+                            }\n+                        },\n+                    },\n+                },\n+                \"summary\": \"Login\",\n+                \"operationId\": \"login_login_post\",\n+                \"requestBody\": {\n+                    \"content\": {\n+                        \"application/x-www-form-urlencoded\": {\n+                            \"schema\": {\n+                                \"$ref\": \"#/components/schemas/Body_login_login_post\"\n+                            }\n+                        }\n+                    },\n+                    \"required\": True,\n+                },\n+            }\n+        },\n+        \"/users/me\": {\n+            \"get\": {\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                    }\n+                },\n+                \"summary\": \"Read Users Me\",\n+                \"operationId\": \"read_users_me_users_me_get\",\n+                \"security\": [{\"OAuth2\": []}],\n+            }\n+        },\n+    },\n+    \"components\": {\n+        \"schemas\": {\n+            \"Body_login_login_post\": {\n+                \"title\": \"Body_login_login_post\",\n+                \"required\": [\"grant_type\", \"username\", \"password\"],\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"grant_type\": {\n+                        \"title\": \"Grant Type\",\n+                        \"pattern\": \"password\",\n+                        \"type\": \"string\",\n+                    },\n+                    \"username\": {\"title\": \"Username\", \"type\": \"string\"},\n+                    \"password\": {\"title\": \"Password\", \"type\": \"string\"},\n+                    \"scope\": {\"title\": \"Scope\", \"type\": \"string\", \"default\": \"\"},\n+                    \"client_id\": {\"title\": \"Client Id\", \"type\": \"string\"},\n+                    \"client_secret\": {\"title\": \"Client Secret\", \"type\": \"string\"},\n+                },\n+            },\n+            \"ValidationError\": {\n+                \"title\": \"ValidationError\",\n+                \"required\": [\"loc\", \"msg\", \"type\"],\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"loc\": {\n+                        \"title\": \"Location\",\n+                        \"type\": \"array\",\n+                        \"items\": {\"type\": \"string\"},\n+                    },\n+                    \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n+                    \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n+                },\n+            },\n+            \"HTTPValidationError\": {\n+                \"title\": \"HTTPValidationError\",\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"detail\": {\n+                        \"title\": \"Detail\",\n+                        \"type\": \"array\",\n+                        \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n+                    }\n+                },\n+            },\n+        },\n+        \"securitySchemes\": {\n+            \"OAuth2\": {\n+                \"type\": \"oauth2\",\n+                \"flows\": {\n+                    \"password\": {\n+                        \"scopes\": {\n+                            \"read:users\": \"Read the users\",\n+                            \"write:users\": \"Create users\",\n+                        },\n+                        \"tokenUrl\": \"token\",\n+                    }\n+                },\n+                \"description\": \"OAuth2 security scheme\",\n+            }\n+        },\n+    },\n+}\n+\n+\n+def test_openapi_schema():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == openapi_schema\n+\n+\n+def test_security_oauth2():\n+    response = client.get(\"/users/me\", headers={\"Authorization\": \"Bearer footokenbar\"})\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\"username\": \"Bearer footokenbar\"}\n+\n+\n+def test_security_oauth2_password_other_header():\n+    response = client.get(\"/users/me\", headers={\"Authorization\": \"Other footokenbar\"})\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\"username\": \"Other footokenbar\"}\n+\n+\n+def test_security_oauth2_password_bearer_no_header():\n+    response = client.get(\"/users/me\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\"msg\": \"Create an account first\"}\n+\n+\n+required_params = {\n+    \"detail\": [\n+        {\n+            \"loc\": [\"body\", \"grant_type\"],\n+            \"msg\": \"field required\",\n+            \"type\": \"value_error.missing\",\n+        },\n+        {\n+            \"loc\": [\"body\", \"username\"],\n+            \"msg\": \"field required\",\n+            \"type\": \"value_error.missing\",\n+        },\n+        {\n+            \"loc\": [\"body\", \"password\"],\n+            \"msg\": \"field required\",\n+            \"type\": \"value_error.missing\",\n+        },\n+    ]\n+}\n+\n+grant_type_required = {\n+    \"detail\": [\n+        {\n+            \"loc\": [\"body\", \"grant_type\"],\n+            \"msg\": \"field required\",\n+            \"type\": \"value_error.missing\",\n+        }\n+    ]\n+}\n+\n+grant_type_incorrect = {\n+    \"detail\": [\n+        {\n+            \"loc\": [\"body\", \"grant_type\"],\n+            \"msg\": 'string does not match regex \"password\"',\n+            \"type\": \"value_error.str.regex\",\n+            \"ctx\": {\"pattern\": \"password\"},\n+        }\n+    ]\n+}\n+\n+\n+@pytest.mark.parametrize(\n+    \"data,expected_status,expected_response\",\n+    [\n+        (None, 422, required_params),\n+        ({\"username\": \"johndoe\", \"password\": \"secret\"}, 422, grant_type_required),\n+        (\n+            {\"username\": \"johndoe\", \"password\": \"secret\", \"grant_type\": \"incorrect\"},\n+            422,\n+            grant_type_incorrect,\n+        ),\n+        (\n+            {\"username\": \"johndoe\", \"password\": \"secret\", \"grant_type\": \"password\"},\n+            200,\n+            {\n+                \"grant_type\": \"password\",\n+                \"username\": \"johndoe\",\n+                \"password\": \"secret\",\n+                \"scopes\": [],\n+                \"client_id\": None,\n+                \"client_secret\": None,\n+            },\n+        ),\n+    ],\n+)\n+def test_strict_login(data, expected_status, expected_response):\n+    response = client.post(\"/login\", data=data)\n+    assert response.status_code == expected_status\n+    assert response.json() == expected_response\n\n@@ -0,0 +1,76 @@\n+from typing import Optional\n+\n+from fastapi import FastAPI, Security\n+from fastapi.security import OAuth2PasswordBearer\n+from fastapi.testclient import TestClient\n+\n+app = FastAPI()\n+\n+oauth2_scheme = OAuth2PasswordBearer(\n+    tokenUrl=\"/token\",\n+    description=\"OAuth2PasswordBearer security scheme\",\n+    auto_error=False,\n+)\n+\n+\n+@app.get(\"/items/\")\n+async def read_items(token: Optional[str] = Security(oauth2_scheme)):\n+    if token is None:\n+        return {\"msg\": \"Create an account first\"}\n+    return {\"token\": token}\n+\n+\n+client = TestClient(app)\n+\n+openapi_schema = {\n+    \"openapi\": \"3.0.2\",\n+    \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n+    \"paths\": {\n+        \"/items/\": {\n+            \"get\": {\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                    }\n+                },\n+                \"summary\": \"Read Items\",\n+                \"operationId\": \"read_items_items__get\",\n+                \"security\": [{\"OAuth2PasswordBearer\": []}],\n+            }\n+        }\n+    },\n+    \"components\": {\n+        \"securitySchemes\": {\n+            \"OAuth2PasswordBearer\": {\n+                \"type\": \"oauth2\",\n+                \"flows\": {\"password\": {\"scopes\": {}, \"tokenUrl\": \"/token\"}},\n+                \"description\": \"OAuth2PasswordBearer security scheme\",\n+            }\n+        }\n+    },\n+}\n+\n+\n+def test_openapi_schema():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == openapi_schema\n+\n+\n+def test_no_token():\n+    response = client.get(\"/items\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\"msg\": \"Create an account first\"}\n+\n+\n+def test_token():\n+    response = client.get(\"/items\", headers={\"Authorization\": \"Bearer testtoken\"})\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\"token\": \"testtoken\"}\n+\n+\n+def test_incorrect_token():\n+    response = client.get(\"/items\", headers={\"Authorization\": \"Notexistent testtoken\"})\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\"msg\": \"Create an account first\"}\n\n@@ -0,0 +1,80 @@\n+from fastapi import Depends, FastAPI, Security\n+from fastapi.security.open_id_connect_url import OpenIdConnect\n+from fastapi.testclient import TestClient\n+from pydantic import BaseModel\n+\n+app = FastAPI()\n+\n+oid = OpenIdConnect(\n+    openIdConnectUrl=\"/openid\", description=\"OpenIdConnect security scheme\"\n+)\n+\n+\n+class User(BaseModel):\n+    username: str\n+\n+\n+def get_current_user(oauth_header: str = Security(oid)):\n+    user = User(username=oauth_header)\n+    return user\n+\n+\n+@app.get(\"/users/me\")\n+def read_current_user(current_user: User = Depends(get_current_user)):\n+    return current_user\n+\n+\n+client = TestClient(app)\n+\n+openapi_schema = {\n+    \"openapi\": \"3.0.2\",\n+    \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n+    \"paths\": {\n+        \"/users/me\": {\n+            \"get\": {\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                    }\n+                },\n+                \"summary\": \"Read Current User\",\n+                \"operationId\": \"read_current_user_users_me_get\",\n+                \"security\": [{\"OpenIdConnect\": []}],\n+            }\n+        }\n+    },\n+    \"components\": {\n+        \"securitySchemes\": {\n+            \"OpenIdConnect\": {\n+                \"type\": \"openIdConnect\",\n+                \"openIdConnectUrl\": \"/openid\",\n+                \"description\": \"OpenIdConnect security scheme\",\n+            }\n+        }\n+    },\n+}\n+\n+\n+def test_openapi_schema():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == openapi_schema\n+\n+\n+def test_security_oauth2():\n+    response = client.get(\"/users/me\", headers={\"Authorization\": \"Bearer footokenbar\"})\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\"username\": \"Bearer footokenbar\"}\n+\n+\n+def test_security_oauth2_password_other_header():\n+    response = client.get(\"/users/me\", headers={\"Authorization\": \"Other footokenbar\"})\n+    assert response.status_code == 200, response.text\n+    assert response.json() == {\"username\": \"Other footokenbar\"}\n+\n+\n+def test_security_oauth2_password_bearer_no_header():\n+    response = client.get(\"/users/me\")\n+    assert response.status_code == 403, response.text\n+    assert response.json() == {\"detail\": \"Not authenticated\"}\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
