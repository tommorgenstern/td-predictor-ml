{"custom_id": "requests#720d0b2c38bd5c8dcc03a1a1de23a976c76f5f87", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 3 | Churn Cumulative: 30 | Contributors (this commit): 1 | Commits (past 90d): 8 | Contributors (cumulative): 1 | DMM Complexity: None\n\nDIFF:\n@@ -3,5 +3,4 @@\n import packages\n from core import *\n \n-\n-\n+from core import __version__\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#d1c89333d05fbfefd2fa71e835164b59f40bc1e2", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 54 | Lines Deleted: 154 | Files Changed: 2 | Hunks: 58 | Methods Changed: 14 | Complexity Δ (Sum/Max): -12/0 | Churn Δ: 208 | Churn Cumulative: 1570 | Contributors (this commit): 2 | Commits (past 90d): 70 | Contributors (cumulative): 4 | DMM Complexity: 0.875\n\nDIFF:\n@@ -13,26 +13,13 @@\n from __future__ import absolute_import\n import urllib\n import urllib2\n-\n from urllib2 import HTTPError\n \n-try:\n-    import eventlet\n-    eventlet.monkey_patch()\n-except ImportError:\n-    pass\n-\n-if not 'eventlet' in locals():\n-    try:\n-        from gevent import monkey\n-        monkey.patch_all()\n-    except ImportError:\n-        pass\n-\n from .packages.poster.encode import multipart_encode\n from .packages.poster.streaminghttp import register_openers\n \n-\n+__all__ = ['Request', 'Response', 'request', 'get', 'head', 'post', 'put', 'delete', 'add_autoauth', 'AUTOAUTHS',\n+           'RequestException', 'AuthenticationError', 'URLRequired', 'InvalidMethod', 'HTTPError']\n __title__ = 'requests'\n __version__ = '0.2.4'\n __build__ = 0x000204\n@@ -43,8 +30,6 @@ __copyright__ = 'Copyright 2011 Kenneth Reitz'\n \n AUTOAUTHS = []\n \n-\n-\n class _Request(urllib2.Request):\n     \"\"\"Hidden wrapper around the urllib2.Request object. Allows for manual\n     setting of HTTP methods.\n@@ -70,24 +55,27 @@ class Request(object):\n     _METHODS = ('GET', 'HEAD', 'PUT', 'POST', 'DELETE')\n \n     def __init__(self, url=None, headers=dict(), files=None, method=None,\n-                 params=dict(), data=dict(), auth=None, cookiejar=None):\n+                 data=dict(), auth=None, cookiejar=None):\n         self.url = url\n         self.headers = headers\n         self.files = files\n         self.method = method\n-        self.params = params\n+\n+        # url encode data if it's a dict\n+        if isinstance(data, dict):\n+            self.data = urllib.urlencode(data)\n+        else:\n             self.data = data\n+\n         self.response = Response()\n \n         self.auth = auth\n         self.cookiejar = cookiejar\n         self.sent = False\n \n-        \n     def __repr__(self):\n         return '<Request [%s]>' % (self.method)\n \n-    \n     def __setattr__(self, name, value):\n         if (name == 'method') and (value):\n             if not value in self._METHODS:\n@@ -95,32 +83,27 @@ class Request(object):\n \n         object.__setattr__(self, name, value)\n \n-    \n     def _checks(self):\n         \"\"\"Deterministic checks for consistency.\"\"\"\n \n         if not self.url:\n             raise URLRequired\n \n-        \n     def _get_opener(self):\n         \"\"\"Creates appropriate opener object for urllib2.\"\"\"\n \n         _handlers = []\n \n         if self.auth or self.cookiejar:\n-\n             if self.auth:\n-\n                 authr = urllib2.HTTPPasswordMgrWithDefaultRealm()\n \n-                authr.add_password(None, self.url, self.auth.username, self.auth.password)\n+                authr.add_password(None, self.url, self.auth[0], self.auth[1])\n                 auth_handler = urllib2.HTTPBasicAuthHandler(authr)\n \n                 _handlers.append(auth_handler)\n \n             if self.cookiejar:\n-\n                 cookie_handler = urllib2.HTTPCookieProcessor(cookiejar)\n                 _handlers.append(cookie_handler)\n \n@@ -150,101 +133,39 @@ class Request(object):\n         :param anyway: If True, request will be sent, even if it has\n         already been sent.\n         \"\"\"\n-\n         self._checks()\n-\n         success = False\n \n-\n         if self.method in ('GET', 'HEAD', 'DELETE'):\n-            if (not self.sent) or anyway:\n-\n-                # url encode GET params if it's a dict\n-                if isinstance(self.params, dict):\n-                    params = urllib.urlencode(self.params)\n+            req = _Request((\"%s?%s\" % (self.url, self.data)), method=self.method)\n         else:\n-                    params = self.params\n-\n-                req = _Request((\"%s?%s\" % (self.url, params)), method=self.method)\n-\n-                if self.headers:\n-                    req.headers = self.headers\n-\n-                opener = self._get_opener()\n-\n-                try:\n-                    resp = opener(req)\n-                    self._build_response(resp)\n-                    self.response.ok = True\n-\n-                except urllib2.HTTPError, why:\n-                    self._build_response(why)\n-                    self.response.error = why\n-\n-\n-        elif self.method == 'PUT':\n-            if (not self.sent) or anyway:\n-\n             if self.files:\n                 register_openers()\n                 datagen, headers = multipart_encode(self.files)\n-                    req = _Request(self.url, data=datagen, headers=headers, method='PUT')\n-\n-                    if self.headers:\n-                        req.headers.update(self.headers)\n-\n+                req = _Request(self.url, data=datagen, headers=headers, method=self.method)\n             else:\n+                req = _Request(self.url, method=self.method)\n \n-                    req = _Request(self.url, method='PUT')\n+            if self.data:\n+                req.data = self.data\n \n         if self.headers:\n             req.headers = self.headers\n \n-                    req.data = self.data\n-\n+        if not self.sent or anyway:\n             try:\n                 opener = self._get_opener()\n                 resp =  opener(req)\n-\n-                    self._build_response(resp)\n-                    self.response.ok = True\n-\n             except urllib2.HTTPError, why:\n                 self._build_response(why)\n                 self.response.error = why\n-\n-\n-        elif self.method == 'POST':\n-            if (not self.sent) or anyway:\n-\n-                if self.files:\n-                    register_openers()\n-                    datagen, headers = multipart_encode(self.files)\n-                    req = _Request(self.url, data=datagen, headers=headers, method='POST')\n-\n-                    if self.headers:\n-                        req.headers.update(self.headers)\n-                \n             else:\n-                    req = _Request(self.url, method='POST')\n-                    req.headers = self.headers\n-\n-                    # url encode form data if it's a dict\n-                    if isinstance(self.data, dict):\n-                        req.data = urllib.urlencode(self.data)\n-                    else:\n-                        req.data = self.data\n-\n-                try:\n-                    opener = self._get_opener()\n-                    resp =  opener(req)\n-\n                 self._build_response(resp)\n                 self.response.ok = True\n+                self.response.cached = False\n+        else:\n+            self.response.cached = True\n \n-                except urllib2.HTTPError, why:\n-                    self._build_response(why)\n-                    self.response.error = why\n \n         self.sent = self.response.ok\n \n@@ -264,6 +185,7 @@ class Response(object):\n         self.url = None\n         self.ok = False\n         self.error = None\n+        self.cached = False\n \n     def __repr__(self):\n         return '<Response [%s]>' % (self.status_code)\n@@ -278,22 +200,26 @@ class Response(object):\n             raise self.error\n \n \n+def request(method, url, **kwargs):\n+    \"\"\"Sends a `method` request. Returns :class:`Response` object.\n \n-class AuthObject(object):\n-    \"\"\"The :class:`AuthObject` is a simple HTTP Authentication token. When\n-    given to a Requests function, it enables Basic HTTP Authentication for that\n-    Request. You can also enable Authorization for domain realms with AutoAuth.\n-    See AutoAuth for more details.\n-    \n-    :param username: Username to authenticate with.\n-    :param password: Password for given username.\n+    :param method: method for the new :class:`Request` object.\n+    :param url: URL for the new :class:`Request` object.\n+    :param params: (optional) Dictionary of GET/HEAD/DELETE Parameters to send with the :class:`Request`.\n+    :param data: (optional) Bytes/Dictionary of PUT/POST Data to send with the :class:`Request`.\n+    :param headers: (optional) Dictionary of HTTP Headers to send with the :class:`Request`.\n+    :param cookies: (optional) CookieJar object to send with the :class:`Request`.\n+    :param files: (optional) Dictionary of 'filename': file-like-objects for multipart encoding upload.\n+    :param auth: (optional) AuthObject to enable Basic HTTP Auth.\n     \"\"\"\n+    data = kwargs.pop('data', {}) or kwargs.pop('params', {})\n \n-    def __init__(self, username, password):\n-        self.username = username\n-        self.password = password\n-\n+    r = Request(method=method, url=url, data=data, headers=kwargs.pop('headers', {}),\n+                cookiejar=kwargs.pop('cookies', None), files=kwargs.pop('files', None),\n+                auth=_detect_auth(url, kwargs.pop('auth', None)))\n+    r.send()\n \n+    return r.response\n \n def get(url, params={}, headers={}, cookies=None, auth=None):\n     \"\"\"Sends a GET request. Returns :class:`Response` object.\n@@ -305,11 +231,8 @@ def get(url, params={}, headers={}, cookies=None, auth=None):\n     :param auth: (optional) AuthObject to enable Basic HTTP Auth.\n     \"\"\"\n \n-    r = Request(method='GET', url=url, params=params, headers=headers,\n-                cookiejar=cookies, auth=_detect_auth(url, auth))\n-    r.send()\n-    \n-    return r.response\n+    return request('GET', url, params=params, headers=headers, cookiejar=cookies,\n+                    auth=_detect_auth(url, auth))\n \n \n def head(url, params={}, headers={}, cookies=None, auth=None):\n@@ -321,64 +244,53 @@ def head(url, params={}, headers={}, cookies=None, auth=None):\n     :param cookies: (optional) CookieJar object to send with the :class:`Request`.\n     :param auth: (optional) AuthObject to enable Basic HTTP Auth.\n     \"\"\"\n-    r = Request(method='HEAD', url=url, params=params, headers=headers,\n-                cookiejar=cookies, auth=_detect_auth(url, auth))\n-    r.send()\n \n-    return r.response\n+    return request('HEAD', url, params=params, headers=headers, cookiejar=cookies,\n+                    auth=_detect_auth(url, auth))\n \n \n def post(url, data={}, headers={}, files=None, cookies=None, auth=None):\n     \"\"\"Sends a POST request. Returns :class:`Response` object.\n \n     :param url: URL for the new :class:`Request` object.\n-    :param data: (optional) Dictionary of POST Data to send with the :class:`Request`.\n+    :param data: (optional) Dictionary of POST data to send with the :class:`Request`.\n     :param headers: (optional) Dictionary of HTTP Headers to sent with the :class:`Request`.\n     :param files: (optional) Dictionary of 'filename': file-like-objects for multipart encoding upload.\n     :param cookies: (optional) CookieJar object to send with the :class:`Request`.\n     :param auth: (optional) AuthObject to enable Basic HTTP Auth.\n     \"\"\"\n \n-    r = Request(method='POST', url=url, data=data, headers=headers,\n-                files=files, cookiejar=cookies, auth=_detect_auth(url, auth))\n-    r.send()\n-    \n-    return r.response\n+    return request('POST', url, data=data, headers=headers, files=files, cookiejar=cookies,\n+                    auth=_detect_auth(url, auth))\n \n \n-def put(url, data='', headers={}, files={}, cookies=None, auth=None):\n+def put(url, data=b'', headers={}, files={}, cookies=None, auth=None):\n     \"\"\"Sends a PUT request. Returns :class:`Response` object.\n \n     :param url: URL for the new :class:`Request` object.\n-    :param data: (optional) Bytes of PUT Data to send with the :class:`Request`.\n+    :param params: (optional) Bytes of PUT Data to send with the :class:`Request`.\n     :param headers: (optional) Dictionary of HTTP Headers to sent with the :class:`Request`.\n     :param files: (optional) Dictionary of 'filename': file-like-objects for multipart encoding upload.\n     :param cookies: (optional) CookieJar object to send with the :class:`Request`.\n     :param auth: (optional) AuthObject to enable Basic HTTP Auth.\n     \"\"\"\n \n-    r = Request(method='PUT', url=url, data=data, headers=headers, files=files,\n-                cookiejar=cookies, auth=_detect_auth(url, auth))\n-    r.send()\n-    \n-    return r.response\n+    return request('PUT', url, data=data, headers=headers, files=files, cookiejar=cookies,\n+                    auth=_detect_auth(url, auth))\n \n \n def delete(url, params={}, headers={}, cookies=None, auth=None):\n     \"\"\"Sends a DELETE request. Returns :class:`Response` object.\n \n     :param url: URL for the new :class:`Request` object.\n-    :param params: (optional) Dictionary of GET Parameters to send with the :class:`Request`.\n+    :param params: (optional) Dictionary of DELETE Parameters to send with the :class:`Request`.\n     :param headers: (optional) Dictionary of HTTP Headers to sent with the :class:`Request`.\n     :param cookies: (optional) CookieJar object to send with the :class:`Request`.\n     :param auth: (optional) AuthObject to enable Basic HTTP Auth.\n     \"\"\"\n \n-    r = Request(method='DELETE', url=url, params=params, headers=headers,\n-                cookiejar=cookies, auth=_detect_auth(url, auth))\n-    r.send()\n-    \n-    return r.response\n+    return request('DELETE', url, params=params, headers=headers, cookiejar=cookies,\n+                    auth=_detect_auth(url, auth))\n \n \n def add_autoauth(url, authobject):\n\n@@ -19,35 +19,29 @@ class RequestsTestSuite(unittest.TestCase):\n     def test_invalid_url(self):\n         self.assertRaises(ValueError, requests.get, 'hiwpefhipowhefopw')\n \n-\n     def test_HTTP_200_OK_GET(self):\n         r = requests.get('http://google.com')\n         self.assertEqual(r.status_code, 200)\n \n-\n     def test_HTTPS_200_OK_GET(self):\n         r = requests.get('https://google.com')\n         self.assertEqual(r.status_code, 200)\n \n-\n     def test_HTTP_200_OK_HEAD(self):\n         r = requests.head('http://google.com')\n         self.assertEqual(r.status_code, 200)\n \n-\n     def test_HTTPS_200_OK_HEAD(self):\n         r = requests.head('https://google.com')\n         self.assertEqual(r.status_code, 200)\n \n-\n     def test_AUTH_HTTPS_200_OK_GET(self):\n-        auth = requests.AuthObject('requeststest', 'requeststest')\n+        auth = ('requeststest', 'requeststest')\n         url = 'https://convore.com/api/account/verify.json'\n         r = requests.get(url, auth=auth)\n \n         self.assertEqual(r.status_code, 200)\n \n-\n         requests.add_autoauth(url, auth)\n \n         r = requests.get(url)\n@@ -56,19 +50,15 @@ class RequestsTestSuite(unittest.TestCase):\n         # reset auto authentication\n         requests.AUTOAUTHS = []\n \n-\n-\n     def test_POSTBIN_GET_POST_FILES(self):\n-\n-        bin = requests.post('http://www.postbin.org/')\n+        bin = requests.get('http://www.postbin.org/')\n         self.assertEqual(bin.status_code, 200)\n \n         post = requests.post(bin.url, data={'some': 'data'})\n-        self.assertEqual(post.status_code, 201)\n+        self.assertEqual(post.status_code, 200)\n \n         post2 = requests.post(bin.url, files={'some': open('test_requests.py')})\n-        self.assertEqual(post2.status_code, 201)\n-\n+        self.assertEqual(post2.status_code, 200)\n \n     def test_nonzero_evaluation(self):\n         r = requests.get('http://google.com/some-404-url')\n@@ -77,12 +67,10 @@ class RequestsTestSuite(unittest.TestCase):\n         r = requests.get('http://google.com/')\n         self.assertEqual(bool(r), True)\n \n-\n     def test_request_ok_set(self):\n         r = requests.get('http://google.com/some-404-url')\n         self.assertEqual(r.ok, False)\n \n-\n     def test_status_raising(self):\n         r = requests.get('http://google.com/some-404-url')\n         self.assertRaises(requests.HTTPError, r.raise_for_status)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#3b82b06adcb77c4a62ffd3ef7526d9f4385dfb00", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 45 | Lines Deleted: 2 | Files Changed: 2 | Hunks: 2 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 47 | Churn Cumulative: 1475 | Contributors (this commit): 2 | Commits (past 90d): 62 | Contributors (cumulative): 3 | DMM Complexity: None\n\nDIFF:\n@@ -0,0 +1,43 @@\n+# -*- coding: utf-8 -*-\n+\n+\"\"\"\n+    requests.core\n+    ~~~~~~~~~~~~~\n+\n+    This module implements the main Requests system.\n+\n+    :copyright: (c) 2011 by Kenneth Reitz.\n+    :license: ISC, see LICENSE for more details.\n+\"\"\"\n+\n+from __future__ import absolute_import\n+import urllib\n+import urllib2\n+from urllib2 import HTTPError\n+\n+try:\n+    import eventlet\n+    eventlet.monkey_patch()\n+except ImportError:\n+    pass\n+\n+if not 'eventlet' in locals():\n+    try:\n+        from gevent import monkey\n+        monkey.patch_all()\n+    except ImportError:\n+        pass\n+\n+if not 'eventlet' in locals():\n+    raise ImportError('No Async adaptations of urllib2 found!')\n+\n+from .core import *\n+\n+__all__ = ['Request', 'Response', 'request', 'get', 'head', 'post', 'put', 'delete', 'add_autoauth', 'AUTOAUTHS',\n+           'RequestException', 'AuthenticationError', 'URLRequired', 'InvalidMethod', 'HTTPError']\n+__title__ = 'requests'\n+__version__ = '0.0.1'\n+__build__ = 0x000001\n+__author__ = 'Dj Gilcrease'\n+__license__ = 'ISC'\n+__copyright__ = 'Copyright 2011 Dj Gilcrease'\n\n@@ -21,8 +21,8 @@ from .packages.poster.streaminghttp import register_openers\n __all__ = ['Request', 'Response', 'request', 'get', 'head', 'post', 'put', 'delete', 'add_autoauth', 'AUTOAUTHS',\n            'RequestException', 'AuthenticationError', 'URLRequired', 'InvalidMethod', 'HTTPError']\n __title__ = 'requests'\n-__version__ = '0.2.4'\n-__build__ = 0x000204\n+__version__ = '0.2.5'\n+__build__ = 0x000205\n __author__ = 'Kenneth Reitz'\n __license__ = 'ISC'\n __copyright__ = 'Copyright 2011 Kenneth Reitz'\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#edfdef23963ab1c5a0424f16f97cdc39dccae34a", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 152 | Lines Deleted: 69 | Files Changed: 3 | Hunks: 21 | Methods Changed: 25 | Complexity Δ (Sum/Max): 29/29 | Churn Δ: 221 | Churn Cumulative: 1838 | Contributors (this commit): 2 | Commits (past 90d): 75 | Contributors (cumulative): 5 | DMM Complexity: 0.7049180327868853\n\nDIFF:\n@@ -33,7 +33,7 @@ if not 'eventlet' in locals():\n \n from .core import *\n \n-__all__ = ['Request', 'Response', 'request', 'get', 'head', 'post', 'put', 'delete', 'add_autoauth', 'AUTOAUTHS',\n+__all__ = ['Request', 'Response', 'request', 'get', 'head', 'post', 'put', 'delete', 'auth_manager', 'AuthObject',\n            'RequestException', 'AuthenticationError', 'URLRequired', 'InvalidMethod', 'HTTPError']\n __title__ = 'requests'\n __version__ = '0.0.1'\n\n@@ -18,18 +18,15 @@ from urllib2 import HTTPError\n from .packages.poster.encode import multipart_encode\n from .packages.poster.streaminghttp import register_openers\n \n-__all__ = ['Request', 'Response', 'request', 'get', 'head', 'post', 'put', 'delete', 'add_autoauth', 'AUTOAUTHS',\n+__all__ = ['Request', 'Response', 'request', 'get', 'head', 'post', 'put', 'delete', 'auth_manager', 'AuthObject',\n            'RequestException', 'AuthenticationError', 'URLRequired', 'InvalidMethod', 'HTTPError']\n __title__ = 'requests'\n __version__ = '0.2.5'\n __build__ = 0x000205\n-__author__ = 'Kenneth Reitz'\n+__author__ = 'Kenneth Reitz, Dj Gilcrease'\n __license__ = 'ISC'\n __copyright__ = 'Copyright 2011 Kenneth Reitz'\n \n-\n-AUTOAUTHS = []\n-\n class _Request(urllib2.Request):\n     \"\"\"Hidden wrapper around the urllib2.Request object. Allows for manual\n     setting of HTTP methods.\n@@ -69,6 +66,10 @@ class Request(object):\n \n         self.response = Response()\n \n+        if isinstance(auth, (list, tuple)):\n+            auth = AuthObject(*auth)\n+        if not auth:\n+            auth = auth_manager.get_auth(self.url)\n         self.auth = auth\n         self.cookiejar = cookiejar\n         self.sent = False\n@@ -94,22 +95,20 @@ class Request(object):\n \n         _handlers = []\n \n-        if self.auth or self.cookiejar:\n         if self.auth:\n-                authr = urllib2.HTTPPasswordMgrWithDefaultRealm()\n+            if not isinstance(self.auth.handler, (urllib2.AbstractBasicAuthHandler, urllib2.AbstractDigestAuthHandler)):\n+                auth_manager.add_password(self.auth.realm, self.url, self.auth.username, self.auth.password)\n+                self.auth.handler = self.auth.handler(auth_manager)\n+                auth_manager.add_auth(self.url, self.auth)\n \n-                authr.add_password(None, self.url, self.auth[0], self.auth[1])\n-                auth_handler = urllib2.HTTPBasicAuthHandler(authr)\n-\n-                _handlers.append(auth_handler)\n+            _handlers.append(self.auth.handler)\n \n         if self.cookiejar:\n             cookie_handler = urllib2.HTTPCookieProcessor(cookiejar)\n             _handlers.append(cookie_handler)\n-\n+        if _handlers:\n             opener = urllib2.build_opener(*_handlers)\n             return opener.open\n-\n         else:\n             return urllib2.urlopen\n \n@@ -118,7 +117,7 @@ class Request(object):\n         \"\"\"Build internal Response object from given response.\"\"\"\n \n         self.response.status_code = resp.code\n-        self.response.headers = resp.info().dict\n+        self.response.headers = resp.info().dict or resp.headers\n         self.response.content = resp.read()\n         self.response.url = resp.url\n \n@@ -162,6 +161,7 @@ class Request(object):\n             else:\n                 self._build_response(resp)\n                 self.response.ok = True\n+\n             self.response.cached = False\n         else:\n             self.response.cached = True\n@@ -199,6 +199,136 @@ class Response(object):\n         if self.error:\n             raise self.error\n \n+class AuthManager(object):\n+    def __new__(cls):\n+        singleton = cls.__dict__.get('__singleton__')\n+        if singleton is not None:\n+            return singleton\n+\n+        cls.__singleton__ = singleton = object.__new__(cls)\n+\n+        return singleton\n+\n+    def __init__(self):\n+        self.passwd = {}\n+        self._auth = {}\n+\n+    def add_auth(self, uri, auth):\n+        uri = self.reduce_uri(uri, False)\n+        self._auth[uri] = auth\n+\n+    def add_password(self, realm, uri, user, passwd):\n+        # uri could be a single URI or a sequence\n+        if isinstance(uri, basestring):\n+            uri = [uri]\n+        reduced_uri = tuple([self.reduce_uri(u, False) for u in uri])\n+        if reduced_uri not in self.passwd:\n+            self.passwd[reduced_uri] = {}\n+        self.passwd[reduced_uri] = (user, passwd)\n+\n+    def find_user_password(self, realm, authuri):\n+        for uris, authinfo in self.passwd.iteritems():\n+            reduced_authuri = self.reduce_uri(authuri, False)\n+            for uri in uris:\n+                if self.is_suburi(uri, reduced_authuri):\n+                    return authinfo\n+\n+        return (None, None)\n+\n+    def get_auth(self, uri):\n+        uri = self.reduce_uri(uri, False)\n+        return self._auth.get(uri, None)\n+\n+    def reduce_uri(self, uri, default_port=True):\n+        \"\"\"Accept authority or URI and extract only the authority and path.\"\"\"\n+        # note HTTP URLs do not have a userinfo component\n+        parts = urllib2.urlparse.urlsplit(uri)\n+        if parts[1]:\n+            # URI\n+            scheme = parts[0]\n+            authority = parts[1]\n+            path = parts[2] or '/'\n+        else:\n+            # host or host:port\n+            scheme = None\n+            authority = uri\n+            path = '/'\n+        host, port = urllib2.splitport(authority)\n+        if default_port and port is None and scheme is not None:\n+            dport = {\"http\": 80,\n+                     \"https\": 443,\n+                     }.get(scheme)\n+            if dport is not None:\n+                authority = \"%s:%d\" % (host, dport)\n+        return authority, path\n+\n+    def is_suburi(self, base, test):\n+        \"\"\"Check if test is below base in a URI tree\n+\n+        Both args must be URIs in reduced form.\n+        \"\"\"\n+        if base == test:\n+            return True\n+        if base[0] != test[0]:\n+            return False\n+        common = urllib2.posixpath.commonprefix((base[1], test[1]))\n+        if len(common) == len(base[1]):\n+            return True\n+        return False\n+\n+    def empty(self):\n+        self.passwd = {}\n+\n+    def remove(self, uri, realm=None):\n+        # uri could be a single URI or a sequence\n+        if isinstance(uri, basestring):\n+            uri = [uri]\n+\n+        for default_port in True, False:\n+            reduced_uri = tuple([self.reduce_uri(u, default_port) for u in uri])\n+            del self.passwd[reduced_uri][realm]\n+\n+    def __contains__(self, uri):\n+        # uri could be a single URI or a sequence\n+        if isinstance(uri, basestring):\n+            uri = [uri]\n+\n+        uri = tuple([self.reduce_uri(u, False) for u in uri])\n+\n+        if uri in self.passwd:\n+            return True\n+\n+        return False\n+\n+auth_manager = AuthManager()\n+\n+\n+class AuthObject(object):\n+    \"\"\"The :class:`AuthObject` is a simple HTTP Authentication token. When\n+    given to a Requests function, it enables Basic HTTP Authentication for that\n+    Request. You can also enable Authorization for domain realms with AutoAuth.\n+    See AutoAuth for more details.\n+\n+    :param username: Username to authenticate with.\n+    :param password: Password for given username.\n+    :param realm: (optional) the realm this auth applies to\n+    :param handler: (optional) basic || digest || proxy_basic || proxy_digest\n+    \"\"\"\n+\n+    _handlers = {\n+        'basic': urllib2.HTTPBasicAuthHandler,\n+        'digest': urllib2.HTTPDigestAuthHandler,\n+        'proxy_basic': urllib2.ProxyBasicAuthHandler,\n+        'proxy_digest': urllib2.ProxyDigestAuthHandler\n+    }\n+\n+    def __init__(self, username, password, handler='basic', realm=None):\n+        self.username = username\n+        self.password = password\n+        self.realm = realm\n+\n+        self.handler = self._handlers.get(handler.lower(), urllib2.HTTPBasicAuthHandler)\n+\n \n def request(method, url, **kwargs):\n     \"\"\"Sends a `method` request. Returns :class:`Response` object.\n@@ -216,7 +346,7 @@ def request(method, url, **kwargs):\n \n     r = Request(method=method, url=url, data=data, headers=kwargs.pop('headers', {}),\n                 cookiejar=kwargs.pop('cookies', None), files=kwargs.pop('files', None),\n-                auth=_detect_auth(url, kwargs.pop('auth', None)))\n+                auth=kwargs.pop('auth', auth_manager.get_auth(url)))\n     r.send()\n \n     return r.response\n@@ -231,8 +361,7 @@ def get(url, params={}, headers={}, cookies=None, auth=None):\n     :param auth: (optional) AuthObject to enable Basic HTTP Auth.\n     \"\"\"\n \n-    return request('GET', url, params=params, headers=headers, cookiejar=cookies,\n-                    auth=_detect_auth(url, auth))\n+    return request('GET', url, params=params, headers=headers, cookiejar=cookies, auth=auth)\n \n \n def head(url, params={}, headers={}, cookies=None, auth=None):\n@@ -245,8 +374,7 @@ def head(url, params={}, headers={}, cookies=None, auth=None):\n     :param auth: (optional) AuthObject to enable Basic HTTP Auth.\n     \"\"\"\n \n-    return request('HEAD', url, params=params, headers=headers, cookiejar=cookies,\n-                    auth=_detect_auth(url, auth))\n+    return request('HEAD', url, params=params, headers=headers, cookiejar=cookies, auth=auth)\n \n \n def post(url, data={}, headers={}, files=None, cookies=None, auth=None):\n@@ -260,8 +388,7 @@ def post(url, data={}, headers={}, files=None, cookies=None, auth=None):\n     :param auth: (optional) AuthObject to enable Basic HTTP Auth.\n     \"\"\"\n \n-    return request('POST', url, data=data, headers=headers, files=files, cookiejar=cookies,\n-                    auth=_detect_auth(url, auth))\n+    return request('POST', url, data=data, headers=headers, files=files, cookiejar=cookies, auth=auth)\n \n \n def put(url, data=b'', headers={}, files={}, cookies=None, auth=None):\n@@ -275,8 +402,7 @@ def put(url, data=b'', headers={}, files={}, cookies=None, auth=None):\n     :param auth: (optional) AuthObject to enable Basic HTTP Auth.\n     \"\"\"\n \n-    return request('PUT', url, data=data, headers=headers, files=files, cookiejar=cookies,\n-                    auth=_detect_auth(url, auth))\n+    return request('PUT', url, data=data, headers=headers, files=files, cookiejar=cookies, auth=auth)\n \n \n def delete(url, params={}, headers={}, cookies=None, auth=None):\n@@ -289,48 +415,7 @@ def delete(url, params={}, headers={}, cookies=None, auth=None):\n     :param auth: (optional) AuthObject to enable Basic HTTP Auth.\n     \"\"\"\n \n-    return request('DELETE', url, params=params, headers=headers, cookiejar=cookies,\n-                    auth=_detect_auth(url, auth))\n-\n-\n-def add_autoauth(url, authobject):\n-    \"\"\"Registers given AuthObject to given URL domain. for auto-activation.\n-    Once a URL is registered with an AuthObject, the configured HTTP\n-    Authentication will be used for all requests with URLS containing the given\n-    URL string.\n-\n-    Example: ::\n-        >>> c_auth = requests.AuthObject('kennethreitz', 'xxxxxxx')\n-        >>> requests.add_autoauth('https://convore.com/api/', c_auth)\n-        >>> r = requests.get('https://convore.com/api/account/verify.json')\n-        # Automatically HTTP Authenticated! Wh00t!\n-\n-    :param url: Base URL for given AuthObject to auto-activate for.\n-    :param authobject: AuthObject to auto-activate.\n-    \"\"\"\n-\n-    global AUTOAUTHS\n-\n-    AUTOAUTHS.append((url, authobject))\n-\n-\n-def _detect_auth(url, auth):\n-    \"\"\"Returns registered AuthObject for given url if available, defaulting to\n-    given AuthObject.\n-    \"\"\"\n-\n-    return _get_autoauth(url) if not auth else auth\n-\n-\n-def _get_autoauth(url):\n-    \"\"\"Returns registered AuthObject for given url if available.\"\"\"\n-\n-    for (autoauth_url, auth) in AUTOAUTHS:\n-        if autoauth_url in url:\n-            return auth\n-\n-    return None\n-\n+    return request('DELETE', url, params=params, headers=headers, cookiejar=cookies, auth=auth)\n \n class RequestException(Exception):\n     \"\"\"There was an ambiguous exception that occured while handling your\n\n@@ -42,13 +42,11 @@ class RequestsTestSuite(unittest.TestCase):\n \n         self.assertEqual(r.status_code, 200)\n \n-        requests.add_autoauth(url, auth)\n-\n         r = requests.get(url)\n         self.assertEqual(r.status_code, 200)\n \n         # reset auto authentication\n-        requests.AUTOAUTHS = []\n+        requests.auth_manager.empty()\n \n     def test_POSTBIN_GET_POST_FILES(self):\n         bin = requests.get('http://www.postbin.org/')\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#15761fc1267f11d5ec348125c4c7b3ac58926b8e", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 3 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 3 | Churn Cumulative: 1650 | Contributors (this commit): 2 | Commits (past 90d): 63 | Contributors (cumulative): 2 | DMM Complexity: 1.0\n\nDIFF:\n@@ -327,7 +327,10 @@ class AuthObject(object):\n         self.password = password\n         self.realm = realm\n \n+        if isinstance(handler, basestring):\n             self.handler = self._handlers.get(handler.lower(), urllib2.HTTPBasicAuthHandler)\n+        else:\n+            self.handler = handler\n \n \n def request(method, url, **kwargs):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#718f45698de90994effa734ac6d608e92008c177", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 47 | Contributors (this commit): 1 | Commits (past 90d): 3 | Contributors (cumulative): 1 | DMM Complexity: None\n\nDIFF:\n@@ -40,4 +40,4 @@ __version__ = '0.0.1'\n __build__ = 0x000001\n __author__ = 'Dj Gilcrease'\n __license__ = 'ISC'\n-__copyright__ = 'Copyright 2011 Dj Gilcrease'\n+__copyright__ = 'Copyright 2011 Kenneth Reitz'\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#f96157d259e43d9dfa9adeae54a9779004d35cf6", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 2 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 1652 | Contributors (this commit): 2 | Commits (past 90d): 64 | Contributors (cumulative): 2 | DMM Complexity: None\n\nDIFF:\n@@ -394,7 +394,7 @@ def post(url, data={}, headers={}, files=None, cookies=None, auth=None):\n     return request('POST', url, data=data, headers=headers, files=files, cookiejar=cookies, auth=auth)\n \n \n-def put(url, data=b'', headers={}, files={}, cookies=None, auth=None):\n+def put(url, data='', headers={}, files={}, cookies=None, auth=None):\n     \"\"\"Sends a PUT request. Returns :class:`Response` object.\n \n     :param url: URL for the new :class:`Request` object.\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#e788ca7ee629f7ed8700d31bbdf7a2930c1a7398", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 3 | Lines Deleted: 3 | Files Changed: 1 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): -18/0 | Churn Δ: 6 | Churn Cumulative: 1658 | Contributors (this commit): 2 | Commits (past 90d): 65 | Contributors (cumulative): 2 | DMM Complexity: None\n\nDIFF:\n@@ -134,10 +134,10 @@ class Request(object):\n     def _build_response(self, resp):\n         \"\"\"Build internal Response object from given response.\"\"\"\n         \n-        self.response.status_code = resp.code\n-        self.response.headers = resp.info().dict\n+        self.response.status_code = getattr(resp, 'code', None)\n+        self.response.headers = getattr(resp.info(), 'dict', None)\n+        self.response.url = getattr(resp, 'url', None)\n         self.response.content = resp.read()\n-        self.response.url = resp.url\n \n     \n     def send(self, anyway=False):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#6f5b64bca68489c31c7f5a62a31024bf0ddd8aa9", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 9 | Lines Deleted: 6 | Files Changed: 2 | Hunks: 4 | Methods Changed: 3 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 15 | Churn Cumulative: 1870 | Contributors (this commit): 3 | Commits (past 90d): 68 | Contributors (cumulative): 5 | DMM Complexity: 1.0\n\nDIFF:\n@@ -30,7 +30,7 @@ if not 'eventlet' in locals():\n         pass\n \n from .packages.poster.encode import multipart_encode\n-from .packages.poster.streaminghttp import register_openers\n+from .packages.poster.streaminghttp import register_openers, get_handlers\n \n \n __title__ = 'requests'\n@@ -124,6 +124,7 @@ class Request(object):\n                 cookie_handler = urllib2.HTTPCookieProcessor(cookiejar)\n                 _handlers.append(cookie_handler)\n \n+            _handlers += get_handlers()\n             opener = urllib2.build_opener(*_handlers)\n             return opener.open\n \n\n@@ -181,16 +181,18 @@ if hasattr(httplib, 'HTTPS'):\n             return urllib2.HTTPSHandler.do_request_(self, req)\n \n \n+def get_handlers():\n+    handlers = [StreamingHTTPHandler, StreamingHTTPRedirectHandler]\n+    if hasattr(httplib, \"HTTPS\"):\n+        handlers.append(StreamingHTTPSHandler)\n+    return handlers\n+    \n def register_openers():\n     \"\"\"Register the streaming http handlers in the global urllib2 default\n     opener object.\n \n     Returns the created OpenerDirector object.\"\"\"\n-    handlers = [StreamingHTTPHandler, StreamingHTTPRedirectHandler]\n-    if hasattr(httplib, \"HTTPS\"):\n-        handlers.append(StreamingHTTPSHandler)\n-\n-    opener = urllib2.build_opener(*handlers)\n+    opener = urllib2.build_opener(*get_handlers())\n \n     urllib2.install_opener(opener)\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#47ecb3662d69e57a031b504d361e277f64109a30", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 1663 | Contributors (this commit): 3 | Commits (past 90d): 67 | Contributors (cumulative): 3 | DMM Complexity: None\n\nDIFF:\n@@ -124,7 +124,7 @@ class Request(object):\n                 cookie_handler = urllib2.HTTPCookieProcessor(cookiejar)\n                 _handlers.append(cookie_handler)\n \n-            _handlers += get_handlers()\n+            _handlers.extend(get_handlers())\n             opener = urllib2.build_opener(*_handlers)\n             return opener.open\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#e7b8e9371a0ee9bb9bb8e2269474ca67088cdc86", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 24 | Lines Deleted: 11 | Files Changed: 2 | Hunks: 11 | Methods Changed: 0 | Complexity Δ (Sum/Max): 18/18 | Churn Δ: 35 | Churn Cumulative: 1745 | Contributors (this commit): 3 | Commits (past 90d): 72 | Contributors (cumulative): 5 | DMM Complexity: None\n\nDIFF:\n@@ -10,11 +10,13 @@\n     :license: ISC, see LICENSE for more details.\n \"\"\"\n \n+\n from __future__ import absolute_import\n import urllib\n import urllib2\n from urllib2 import HTTPError\n \n+\n try:\n     import eventlet\n     eventlet.monkey_patch()\n@@ -28,16 +30,16 @@ if not 'eventlet' in locals():\n     except ImportError:\n         pass\n \n+\n if not 'eventlet' in locals():\n     raise ImportError('No Async adaptations of urllib2 found!')\n \n+\n from .core import *\n \n-__all__ = ['Request', 'Response', 'request', 'get', 'head', 'post', 'put', 'delete', 'auth_manager', 'AuthObject',\n-           'RequestException', 'AuthenticationError', 'URLRequired', 'InvalidMethod', 'HTTPError']\n-__title__ = 'requests'\n-__version__ = '0.0.1'\n-__build__ = 0x000001\n-__author__ = 'Dj Gilcrease'\n-__license__ = 'ISC'\n-__copyright__ = 'Copyright 2011 Kenneth Reitz'\n+\n+__all__ = [\n+    'Request', 'Response', 'request', 'get', 'head', 'post', 'put', 'delete', \n+    'auth_manager', 'AuthObject','RequestException', 'AuthenticationError', \n+    'URLRequired', 'InvalidMethod', 'HTTPError'\n+]\n\n@@ -18,15 +18,21 @@ from urllib2 import HTTPError\n from .packages.poster.encode import multipart_encode\n from .packages.poster.streaminghttp import register_openers\n \n-__all__ = ['Request', 'Response', 'request', 'get', 'head', 'post', 'put', 'delete', 'auth_manager', 'AuthObject',\n-           'RequestException', 'AuthenticationError', 'URLRequired', 'InvalidMethod', 'HTTPError']\n+\n __title__ = 'requests'\n __version__ = '0.2.5'\n __build__ = 0x000205\n-__author__ = 'Kenneth Reitz, Dj Gilcrease'\n+__author__ = 'Kenneth Reitz'\n __license__ = 'ISC'\n __copyright__ = 'Copyright 2011 Kenneth Reitz'\n \n+__all__ = [\n+    'Request', 'Response', 'request', 'get', 'head', 'post', 'put', 'delete', \n+    'auth_manager', 'AuthObject','RequestException', 'AuthenticationError', \n+    'URLRequired', 'InvalidMethod', 'HTTPError'\n+]\n+\n+\n class _Request(urllib2.Request):\n     \"\"\"Hidden wrapper around the urllib2.Request object. Allows for manual\n     setting of HTTP methods.\n@@ -199,6 +205,8 @@ class Response(object):\n         if self.error:\n             raise self.error\n \n+\n+\n class AuthManager(object):\n     def __new__(cls):\n         singleton = cls.__dict__.get('__singleton__')\n@@ -354,6 +362,7 @@ def request(method, url, **kwargs):\n \n     return r.response\n \n+\n def get(url, params={}, headers={}, cookies=None, auth=None):\n     \"\"\"Sends a GET request. Returns :class:`Response` object.\n \n@@ -420,6 +429,8 @@ def delete(url, params={}, headers={}, cookies=None, auth=None):\n \n     return request('DELETE', url, params=params, headers=headers, cookiejar=cookies, auth=auth)\n \n+\n+\n class RequestException(Exception):\n     \"\"\"There was an ambiguous exception that occured while handling your\n     request.\"\"\"\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#3fe4753d5d3afd9f02f80675f4ff60259ab4e450", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 11 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 7 | Methods Changed: 3 | Complexity Δ (Sum/Max): -2/0 | Churn Δ: 11 | Churn Cumulative: 1691 | Contributors (this commit): 3 | Commits (past 90d): 69 | Contributors (cumulative): 3 | DMM Complexity: 1.0\n\nDIFF:\n@@ -80,6 +80,7 @@ class Request(object):\n         self.cookiejar = cookiejar\n         self.sent = False\n \n+\n     def __repr__(self):\n         return '<Request [%s]>' % (self.method)\n \n@@ -205,6 +206,8 @@ class Response(object):\n \n \n class AuthManager(object):\n+    \"\"\"Authentication Manager.\"\"\"\n+    \n     def __new__(cls):\n         singleton = cls.__dict__.get('__singleton__')\n         if singleton is not None:\n@@ -218,15 +221,23 @@ class AuthManager(object):\n         self.passwd = {}\n         self._auth = {}\n         \n+    def __repr__(self):\n+        return '<AuthManager [%s]>' % (self.method)\n+\n     def add_auth(self, uri, auth):\n+        \"\"\"Registers AuthObject to AuthManager.\"\"\"\n+        \n         uri = self.reduce_uri(uri, False)\n         self._auth[uri] = auth\n \n     def add_password(self, realm, uri, user, passwd):\n+        \"\"\"Adds password to AuthManager.\"\"\"\n         # uri could be a single URI or a sequence\n         if isinstance(uri, basestring):\n             uri = [uri]\n+            \n         reduced_uri = tuple([self.reduce_uri(u, False) for u in uri])\n+        \n         if reduced_uri not in self.passwd:\n             self.passwd[reduced_uri] = {}\n         self.passwd[reduced_uri] = (user, passwd)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#9a1d90d184d5830f4bc31b1c328e0c4ed066f2d0", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 4 | Lines Deleted: 3 | Files Changed: 1 | Hunks: 2 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 7 | Churn Cumulative: 72 | Contributors (this commit): 2 | Commits (past 90d): 5 | Contributors (cumulative): 2 | DMM Complexity: None\n\nDIFF:\n@@ -1,10 +1,11 @@\n # -*- coding: utf-8 -*-\n \n \"\"\"\n-    requests.core\n-    ~~~~~~~~~~~~~\n+    requests.async\n+    ~~~~~~~~~~~~~~\n \n-    This module implements the main Requests system.\n+    This module implements the main Requests system, after monkey-patching\n+    the urllib2 module with eventlet or gevent..\n \n     :copyright: (c) 2011 by Kenneth Reitz.\n     :license: ISC, see LICENSE for more details.\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#ccb7fdd8c23e9d1181b455be1e21c82623fd78d4", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 1695 | Contributors (this commit): 3 | Commits (past 90d): 70 | Contributors (cumulative): 3 | DMM Complexity: None\n\nDIFF:\n@@ -20,8 +20,8 @@ from .packages.poster.streaminghttp import register_openers, get_handlers\n \n \n __title__ = 'requests'\n-__version__ = '0.2.5'\n-__build__ = 0x000205\n+__version__ = '0.3.0'\n+__build__ = 0x000300\n __author__ = 'Kenneth Reitz'\n __license__ = 'ISC'\n __copyright__ = 'Copyright 2011 Kenneth Reitz'\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#14ba99f97503baeb341075312a5e173091f43329", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 26 | Lines Deleted: 0 | Files Changed: 2 | Hunks: 25 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 26 | Churn Cumulative: 1793 | Contributors (this commit): 3 | Commits (past 90d): 77 | Contributors (cumulative): 5 | DMM Complexity: None\n\nDIFF:\n@@ -13,8 +13,10 @@\n \n \n from __future__ import absolute_import\n+\n import urllib\n import urllib2\n+\n from urllib2 import HTTPError\n \n \n\n@@ -11,14 +11,17 @@\n \"\"\"\n \n from __future__ import absolute_import\n+\n import urllib\n import urllib2\n+\n from urllib2 import HTTPError\n \n from .packages.poster.encode import multipart_encode\n from .packages.poster.streaminghttp import register_openers, get_handlers\n \n \n+\n __title__ = 'requests'\n __version__ = '0.3.0'\n __build__ = 0x000300\n@@ -33,6 +36,7 @@ __all__ = [\n ]\n \n \n+\n class _Request(urllib2.Request):\n     \"\"\"Hidden wrapper around the urllib2.Request object. Allows for manual\n     setting of HTTP methods.\n@@ -84,6 +88,7 @@ class Request(object):\n     def __repr__(self):\n         return '<Request [%s]>' % (self.method)\n \n+\n     def __setattr__(self, name, value):\n         if (name == 'method') and (value):\n             if not value in self._METHODS:\n@@ -91,12 +96,14 @@ class Request(object):\n \n         object.__setattr__(self, name, value)\n \n+\n     def _checks(self):\n         \"\"\"Deterministic checks for consistency.\"\"\"\n \n         if not self.url:\n             raise URLRequired\n \n+\n     def _get_opener(self):\n         \"\"\"Creates appropriate opener object for urllib2.\"\"\"\n \n@@ -176,6 +183,7 @@ class Request(object):\n         return self.sent\n \n \n+    \n class Response(object):\n     \"\"\"The :class:`Request` object. All :class:`Request` objects contain a\n     :class:`Request.response <response>` attribute, which is an instance of\n@@ -191,13 +199,16 @@ class Response(object):\n         self.error = None\n         self.cached = False\n \n+\n     def __repr__(self):\n         return '<Response [%s]>' % (self.status_code)\n \n+\n     def __nonzero__(self):\n         \"\"\"Returns true if status_code is 'OK'.\"\"\"\n         return not self.error\n \n+\n     def raise_for_status(self):\n         \"\"\"Raises stored HTTPError if one exists.\"\"\"\n         if self.error:\n@@ -217,13 +228,16 @@ class AuthManager(object):\n \n         return singleton\n \n+\n     def __init__(self):\n         self.passwd = {}\n         self._auth = {}\n \n+\n     def __repr__(self):\n         return '<AuthManager [%s]>' % (self.method)\n \n+\n     def add_auth(self, uri, auth):\n         \"\"\"Registers AuthObject to AuthManager.\"\"\"\n         \n@@ -242,6 +256,7 @@ class AuthManager(object):\n             self.passwd[reduced_uri] = {}\n         self.passwd[reduced_uri] = (user, passwd)\n \n+\n     def find_user_password(self, realm, authuri):\n         for uris, authinfo in self.passwd.iteritems():\n             reduced_authuri = self.reduce_uri(authuri, False)\n@@ -251,10 +266,12 @@ class AuthManager(object):\n \n         return (None, None)\n \n+\n     def get_auth(self, uri):\n         uri = self.reduce_uri(uri, False)\n         return self._auth.get(uri, None)\n \n+\n     def reduce_uri(self, uri, default_port=True):\n         \"\"\"Accept authority or URI and extract only the authority and path.\"\"\"\n         # note HTTP URLs do not have a userinfo component\n@@ -278,6 +295,7 @@ class AuthManager(object):\n                 authority = \"%s:%d\" % (host, dport)\n         return authority, path\n \n+    \n     def is_suburi(self, base, test):\n         \"\"\"Check if test is below base in a URI tree\n \n@@ -292,9 +310,11 @@ class AuthManager(object):\n             return True\n         return False\n \n+\n     def empty(self):\n         self.passwd = {}\n \n+\n     def remove(self, uri, realm=None):\n         # uri could be a single URI or a sequence\n         if isinstance(uri, basestring):\n@@ -304,6 +324,7 @@ class AuthManager(object):\n             reduced_uri = tuple([self.reduce_uri(u, default_port) for u in uri])\n             del self.passwd[reduced_uri][realm]\n \n+\n     def __contains__(self, uri):\n         # uri could be a single URI or a sequence\n         if isinstance(uri, basestring):\n@@ -319,6 +340,7 @@ class AuthManager(object):\n auth_manager = AuthManager()\n \n \n+\n class AuthObject(object):\n     \"\"\"The :class:`AuthObject` is a simple HTTP Authentication token. When\n     given to a Requests function, it enables Basic HTTP Authentication for that\n@@ -349,6 +371,8 @@ class AuthObject(object):\n             self.handler = handler\n \n \n+\n+\n def request(method, url, **kwargs):\n     \"\"\"Sends a `method` request. Returns :class:`Response` object.\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
