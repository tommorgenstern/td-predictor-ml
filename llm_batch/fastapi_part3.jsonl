{"custom_id": "fastapi#9458d699cb280005c1e41d7a68ce5516226e916d", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 5 | Files Changed: 2 | Hunks: 3 | Methods Changed: 2 | Complexity Δ (Sum/Max): -1/0 | Churn Δ: 6 | Churn Cumulative: 1854 | Contributors (this commit): 1 | Commits (past 90d): 17 | Contributors (cumulative): 2 | DMM Complexity: 1.0\n\nDIFF:\n@@ -1,6 +1,6 @@\n \"\"\"FastAPI framework, high performance, easy to learn, fast to code, ready for production\"\"\"\n \n-__version__ = \"0.1.6\"\n+__version__ = \"0.1.7\"\n \n from .applications import FastAPI\n from .routing import APIRouter\n\n@@ -66,13 +66,9 @@ def get_app(\n             raise HTTPException(\n                 status_code=400, detail=\"There was an error parsing the body\"\n             )\n-        try:\n             values, errors = await solve_dependencies(\n                 request=request, dependant=dependant, body=body\n             )\n-        except Exception as e:\n-            logging.error(\"Error solving dependencies\", e)\n-            raise HTTPException(status_code=400, detail=\"Error processing request\")\n         if errors:\n             errors_out = ValidationError(errors)\n             raise HTTPException(\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#64e904b12ea779e6f286ce1350d88c3413579506", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 29 | Contributors (this commit): 1 | Commits (past 90d): 10 | Contributors (cumulative): 1 | DMM Complexity: None\n\nDIFF:\n@@ -1,6 +1,6 @@\n \"\"\"FastAPI framework, high performance, easy to learn, fast to code, ready for production\"\"\"\n \n-__version__ = \"0.1.7\"\n+__version__ = \"0.1.8\"\n \n from .applications import FastAPI\n from .routing import APIRouter\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#26ffa5d9c8d00fd0d077847ad56f165d9095947a", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 93 | Contributors (this commit): 1 | Commits (past 90d): 3 | Contributors (cumulative): 1 | DMM Complexity: None\n\nDIFF:\n@@ -7,7 +7,7 @@ def get_swagger_ui_html(*, openapi_url: str, title: str) -> HTMLResponse:\n     <! doctype html>\n     <html>\n     <head>\n-    <link type=\"text/css\" rel=\"stylesheet\" href=\"//unpkg.com/swagger-ui-dist@3/swagger-ui.css\">\n+    <link type=\"text/css\" rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/swagger-ui-dist@3/swagger-ui.css\">\n     <title>\n     \"\"\"\n         + title\n@@ -17,7 +17,7 @@ def get_swagger_ui_html(*, openapi_url: str, title: str) -> HTMLResponse:\n     <body>\n     <div id=\"swagger-ui\">\n     </div>\n-    <script src=\"//unpkg.com/swagger-ui-dist@3/swagger-ui-bundle.js\"></script>\n+    <script src=\"https://cdn.jsdelivr.net/npm/swagger-ui-dist@3/swagger-ui-bundle.js\"></script>\n     <!-- `SwaggerUIBundle` is now available on the page -->\n     <script>\n             \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#ece32523850d9fa38ef353ee238461229f8ee840", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 20 | Lines Deleted: 1 | Files Changed: 2 | Hunks: 4 | Methods Changed: 2 | Complexity Δ (Sum/Max): 5/5 | Churn Δ: 21 | Churn Cumulative: 156 | Contributors (this commit): 1 | Commits (past 90d): 9 | Contributors (cumulative): 2 | DMM Complexity: 1.0\n\nDIFF:\n@@ -1,4 +1,4 @@\n from .api_key import APIKeyQuery, APIKeyHeader, APIKeyCookie\n from .http import HTTPBasic, HTTPBearer, HTTPDigest\n-from .oauth2 import OAuth2PasswordRequestForm, OAuth2\n+from .oauth2 import OAuth2PasswordRequestForm, OAuth2, OAuth2PasswordBearer\n from .open_id_connect_url import OpenIdConnect\n\n@@ -3,7 +3,9 @@ from typing import List, Optional\n from fastapi.openapi.models import OAuth2 as OAuth2Model, OAuthFlows as OAuthFlowsModel\n from fastapi.security.base import SecurityBase\n from pydantic import BaseModel, Schema\n+from starlette.exceptions import HTTPException\n from starlette.requests import Request\n+from starlette.status import HTTP_403_FORBIDDEN\n \n \n class OAuth2PasswordRequestData(BaseModel):\n@@ -45,3 +47,20 @@ class OAuth2(SecurityBase):\n \n     async def __call__(self, request: Request) -> str:\n         return request.headers.get(\"Authorization\")\n+\n+\n+class OAuth2PasswordBearer(OAuth2):\n+    def __init__(self, tokenUrl: str, scheme_name: str = None, scopes: dict = None):\n+        if not scopes:\n+            scopes = {}\n+        flows = OAuthFlowsModel(password={\"tokenUrl\": tokenUrl, \"scopes\": scopes})\n+        super().__init__(flows=flows, scheme_name=scheme_name)\n+\n+    async def __call__(self, request: Request) -> str:\n+        authorization: str = request.headers.get(\"Authorization\")\n+        if not authorization or \"Bearer \" not in authorization:\n+            raise HTTPException(\n+                status_code=HTTP_403_FORBIDDEN, detail=\"Not authenticated\"\n+            )\n+        token = authorization.replace(\"Bearer \", \"\")\n+        return token\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#315eb88900809938401bea855e8f407da1cb509c", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 54 | Lines Deleted: 6 | Files Changed: 2 | Hunks: 7 | Methods Changed: 6 | Complexity Δ (Sum/Max): 5/3 | Churn Δ: 60 | Churn Cumulative: 519 | Contributors (this commit): 2 | Commits (past 90d): 7 | Contributors (cumulative): 3 | DMM Complexity: 1.0\n\nDIFF:\n@@ -1,3 +1,6 @@\n+from typing import Optional\n+\n+import fastapi\n from fastapi import (\n     Body,\n     Cookie,\n@@ -10,8 +13,14 @@ from fastapi import (\n     Query,\n     Security,\n )\n-from fastapi.security import HTTPBasic, OAuth2, OAuth2PasswordRequestForm\n+from fastapi.security import (\n+    HTTPBasic,\n+    OAuth2,\n+    OAuth2PasswordBearer,\n+    OAuth2PasswordRequestForm,\n+)\n from pydantic import BaseModel\n+from starlette.exceptions import HTTPException\n from starlette.responses import HTMLResponse, JSONResponse, PlainTextResponse\n from starlette.status import HTTP_202_ACCEPTED\n from starlette.testclient import TestClient\n@@ -240,14 +249,27 @@ def get_security_oauth2(sec=Security(reusable_oauth2, scopes=[\"read:user\"])):\n     return sec\n \n \n+reusable_oauth2b = OAuth2PasswordBearer(tokenUrl=\"/token\")\n+\n+\n+class User(BaseModel):\n+    username: str\n+\n+\n+def get_current_user(oauth_header: str = Security(reusable_oauth2b)):\n+    user = User(username=oauth_header)\n+    return user\n+\n+\n+@app.get(\"/security/oauth2b\")\n+def read_current_user(current_user: User = Depends(get_current_user)):\n+    return current_user\n+\n+\n @app.post(\"/token\")\n def post_token(request_data: OAuth2PasswordRequestForm = Form(...)):\n-    print(request_data)\n     data = request_data.parse()\n-    print(data)\n-\n-    print(request_data())\n-    access_token = request_data.username + \":\" + request_data.password\n+    access_token = data.username + \":\" + data.password\n     return {\"access_token\": access_token}\n \n \n\n@@ -0,0 +1,26 @@\n+import pytest\n+from starlette.testclient import TestClient\n+\n+from .main import app\n+\n+client = TestClient(app)\n+\n+\n+def test_security_oauth2_password_bearer():\n+    response = client.get(\n+        \"/security/oauth2b\", headers={\"Authorization\": \"Bearer footokenbar\"}\n+    )\n+    assert response.status_code == 200\n+    assert response.json() == {\"username\": \"footokenbar\"}\n+\n+\n+def test_security_oauth2_password_bearer_wrong_header():\n+    response = client.get(\"/security/oauth2b\", headers={\"Authorization\": \"footokenbar\"})\n+    assert response.status_code == 403\n+    assert response.json() == {\"detail\": \"Not authenticated\"}\n+\n+\n+def test_security_oauth2_password_bearer_no_header():\n+    response = client.get(\"/security/oauth2b\")\n+    assert response.status_code == 403\n+    assert response.json() == {\"detail\": \"Not authenticated\"}\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#26ccb7620af2d883e9c584608cf3270e1561627c", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 31 | Contributors (this commit): 1 | Commits (past 90d): 11 | Contributors (cumulative): 1 | DMM Complexity: None\n\nDIFF:\n@@ -1,6 +1,6 @@\n \"\"\"FastAPI framework, high performance, easy to learn, fast to code, ready for production\"\"\"\n \n-__version__ = \"0.1.8\"\n+__version__ = \"0.1.9\"\n \n from .applications import FastAPI\n from .routing import APIRouter\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#8c66b3a492bb70fab3e045fdb1ab6da40ecca7bf", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 5 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 5 | Churn Cumulative: 599 | Contributors (this commit): 1 | Commits (past 90d): 6 | Contributors (cumulative): 1 | DMM Complexity: 0.0\n\nDIFF:\n@@ -172,6 +172,11 @@ def get_openapi_path(\n             )\n             if request_body_oai:\n                 operation[\"requestBody\"] = request_body_oai\n+                if \"ValidationError\" not in definitions:\n+                    definitions[\"ValidationError\"] = validation_error_definition\n+                    definitions[\n+                        \"HTTPValidationError\"\n+                    ] = validation_error_response_definition\n         status_code = str(route.status_code)\n         response_schema = {\"type\": \"string\"}\n         if lenient_issubclass(route.content_type, JSONResponse):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#a2c87f36522aea13ddbbf89620f08953905b996a", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 33 | Contributors (this commit): 1 | Commits (past 90d): 12 | Contributors (cumulative): 1 | DMM Complexity: None\n\nDIFF:\n@@ -1,6 +1,6 @@\n \"\"\"FastAPI framework, high performance, easy to learn, fast to code, ready for production\"\"\"\n \n-__version__ = \"0.1.9\"\n+__version__ = \"0.1.10\"\n \n from .applications import FastAPI\n from .routing import APIRouter\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#948a39af95a496769ab0b97b8ac0647a460d8a46", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 52 | Lines Deleted: 56 | Files Changed: 3 | Hunks: 103 | Methods Changed: 47 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 108 | Churn Cumulative: 3641 | Contributors (this commit): 1 | Commits (past 90d): 20 | Contributors (cumulative): 3 | DMM Complexity: 0.0\n\nDIFF:\n@@ -106,11 +106,11 @@ class FastAPI(Starlette):\n         description: str = None,\n         response_description: str = \"Successful Response\",\n         deprecated: bool = None,\n-        name: str = None,\n         methods: List[str] = None,\n         operation_id: str = None,\n         include_in_schema: bool = True,\n         content_type: Type[Response] = JSONResponse,\n+        name: str = None,\n     ) -> None:\n         self.router.add_api_route(\n             path,\n@@ -122,11 +122,11 @@ class FastAPI(Starlette):\n             description=description,\n             response_description=response_description,\n             deprecated=deprecated,\n-            name=name,\n             methods=methods,\n             operation_id=operation_id,\n             include_in_schema=include_in_schema,\n             content_type=content_type,\n+            name=name,\n         )\n \n     def api_route(\n@@ -140,11 +140,11 @@ class FastAPI(Starlette):\n         description: str = None,\n         response_description: str = \"Successful Response\",\n         deprecated: bool = None,\n-        name: str = None,\n         methods: List[str] = None,\n         operation_id: str = None,\n         include_in_schema: bool = True,\n         content_type: Type[Response] = JSONResponse,\n+        name: str = None,\n     ) -> Callable:\n         def decorator(func: Callable) -> Callable:\n             self.router.add_api_route(\n@@ -157,11 +157,11 @@ class FastAPI(Starlette):\n                 description=description,\n                 response_description=response_description,\n                 deprecated=deprecated,\n-                name=name,\n                 methods=methods,\n                 operation_id=operation_id,\n                 include_in_schema=include_in_schema,\n                 content_type=content_type,\n+                name=name,\n             )\n             return func\n \n@@ -181,10 +181,10 @@ class FastAPI(Starlette):\n         description: str = None,\n         response_description: str = \"Successful Response\",\n         deprecated: bool = None,\n-        name: str = None,\n         operation_id: str = None,\n         include_in_schema: bool = True,\n         content_type: Type[Response] = JSONResponse,\n+        name: str = None,\n     ) -> Callable:\n         return self.router.get(\n             path,\n@@ -195,10 +195,10 @@ class FastAPI(Starlette):\n             description=description,\n             response_description=response_description,\n             deprecated=deprecated,\n-            name=name,\n             operation_id=operation_id,\n             include_in_schema=include_in_schema,\n             content_type=content_type,\n+            name=name,\n         )\n \n     def put(\n@@ -212,10 +212,10 @@ class FastAPI(Starlette):\n         description: str = None,\n         response_description: str = \"Successful Response\",\n         deprecated: bool = None,\n-        name: str = None,\n         operation_id: str = None,\n         include_in_schema: bool = True,\n         content_type: Type[Response] = JSONResponse,\n+        name: str = None,\n     ) -> Callable:\n         return self.router.put(\n             path,\n@@ -226,10 +226,10 @@ class FastAPI(Starlette):\n             description=description,\n             response_description=response_description,\n             deprecated=deprecated,\n-            name=name,\n             operation_id=operation_id,\n             include_in_schema=include_in_schema,\n             content_type=content_type,\n+            name=name,\n         )\n \n     def post(\n@@ -243,10 +243,10 @@ class FastAPI(Starlette):\n         description: str = None,\n         response_description: str = \"Successful Response\",\n         deprecated: bool = None,\n-        name: str = None,\n         operation_id: str = None,\n         include_in_schema: bool = True,\n         content_type: Type[Response] = JSONResponse,\n+        name: str = None,\n     ) -> Callable:\n         return self.router.post(\n             path,\n@@ -257,10 +257,10 @@ class FastAPI(Starlette):\n             description=description,\n             response_description=response_description,\n             deprecated=deprecated,\n-            name=name,\n             operation_id=operation_id,\n             include_in_schema=include_in_schema,\n             content_type=content_type,\n+            name=name,\n         )\n \n     def delete(\n@@ -274,10 +274,10 @@ class FastAPI(Starlette):\n         description: str = None,\n         response_description: str = \"Successful Response\",\n         deprecated: bool = None,\n-        name: str = None,\n         operation_id: str = None,\n         include_in_schema: bool = True,\n         content_type: Type[Response] = JSONResponse,\n+        name: str = None,\n     ) -> Callable:\n         return self.router.delete(\n             path,\n@@ -288,10 +288,10 @@ class FastAPI(Starlette):\n             description=description,\n             response_description=response_description,\n             deprecated=deprecated,\n-            name=name,\n             operation_id=operation_id,\n             include_in_schema=include_in_schema,\n             content_type=content_type,\n+            name=name,\n         )\n \n     def options(\n@@ -305,10 +305,10 @@ class FastAPI(Starlette):\n         description: str = None,\n         response_description: str = \"Successful Response\",\n         deprecated: bool = None,\n-        name: str = None,\n         operation_id: str = None,\n         include_in_schema: bool = True,\n         content_type: Type[Response] = JSONResponse,\n+        name: str = None,\n     ) -> Callable:\n         return self.router.options(\n             path,\n@@ -319,10 +319,10 @@ class FastAPI(Starlette):\n             description=description,\n             response_description=response_description,\n             deprecated=deprecated,\n-            name=name,\n             operation_id=operation_id,\n             include_in_schema=include_in_schema,\n             content_type=content_type,\n+            name=name,\n         )\n \n     def head(\n@@ -336,10 +336,10 @@ class FastAPI(Starlette):\n         description: str = None,\n         response_description: str = \"Successful Response\",\n         deprecated: bool = None,\n-        name: str = None,\n         operation_id: str = None,\n         include_in_schema: bool = True,\n         content_type: Type[Response] = JSONResponse,\n+        name: str = None,\n     ) -> Callable:\n         return self.router.head(\n             path,\n@@ -350,10 +350,10 @@ class FastAPI(Starlette):\n             description=description,\n             response_description=response_description,\n             deprecated=deprecated,\n-            name=name,\n             operation_id=operation_id,\n             include_in_schema=include_in_schema,\n             content_type=content_type,\n+            name=name,\n         )\n \n     def patch(\n@@ -367,10 +367,10 @@ class FastAPI(Starlette):\n         description: str = None,\n         response_description: str = \"Successful Response\",\n         deprecated: bool = None,\n-        name: str = None,\n         operation_id: str = None,\n         include_in_schema: bool = True,\n         content_type: Type[Response] = JSONResponse,\n+        name: str = None,\n     ) -> Callable:\n         return self.router.patch(\n             path,\n@@ -381,10 +381,10 @@ class FastAPI(Starlette):\n             description=description,\n             response_description=response_description,\n             deprecated=deprecated,\n-            name=name,\n             operation_id=operation_id,\n             include_in_schema=include_in_schema,\n             content_type=content_type,\n+            name=name,\n         )\n \n     def trace(\n@@ -398,10 +398,10 @@ class FastAPI(Starlette):\n         description: str = None,\n         response_description: str = \"Successful Response\",\n         deprecated: bool = None,\n-        name: str = None,\n         operation_id: str = None,\n         include_in_schema: bool = True,\n         content_type: Type[Response] = JSONResponse,\n+        name: str = None,\n     ) -> Callable:\n         return self.router.trace(\n             path,\n@@ -412,8 +412,8 @@ class FastAPI(Starlette):\n             description=description,\n             response_description=response_description,\n             deprecated=deprecated,\n-            name=name,\n             operation_id=operation_id,\n             include_in_schema=include_in_schema,\n             content_type=content_type,\n+            name=name,\n         )\n\n@@ -18,7 +18,6 @@ class Param(Schema):\n         self,\n         default: Any,\n         *,\n-        deprecated: bool = None,\n         alias: str = None,\n         title: str = None,\n         description: str = None,\n@@ -29,6 +28,7 @@ class Param(Schema):\n         min_length: int = None,\n         max_length: int = None,\n         regex: str = None,\n+        deprecated: bool = None,\n         **extra: Any,\n     ):\n         self.deprecated = deprecated\n@@ -55,7 +55,6 @@ class Path(Param):\n         self,\n         default: Any,\n         *,\n-        deprecated: bool = None,\n         alias: str = None,\n         title: str = None,\n         description: str = None,\n@@ -66,13 +65,12 @@ class Path(Param):\n         min_length: int = None,\n         max_length: int = None,\n         regex: str = None,\n+        deprecated: bool = None,\n         **extra: Any,\n     ):\n-        self.description = description\n-        self.deprecated = deprecated\n         self.in_ = self.in_\n         super().__init__(\n-            default,\n+            ...,\n             alias=alias,\n             title=title,\n             description=description,\n@@ -83,6 +81,7 @@ class Path(Param):\n             min_length=min_length,\n             max_length=max_length,\n             regex=regex,\n+            deprecated=deprecated,\n             **extra,\n         )\n \n@@ -94,7 +93,6 @@ class Query(Param):\n         self,\n         default: Any,\n         *,\n-        deprecated: bool = None,\n         alias: str = None,\n         title: str = None,\n         description: str = None,\n@@ -105,10 +103,9 @@ class Query(Param):\n         min_length: int = None,\n         max_length: int = None,\n         regex: str = None,\n+        deprecated: bool = None,\n         **extra: Any,\n     ):\n-        self.description = description\n-        self.deprecated = deprecated\n         super().__init__(\n             default,\n             alias=alias,\n@@ -121,6 +118,7 @@ class Query(Param):\n             min_length=min_length,\n             max_length=max_length,\n             regex=regex,\n+            deprecated=deprecated,\n             **extra,\n         )\n \n@@ -132,7 +130,6 @@ class Header(Param):\n         self,\n         default: Any,\n         *,\n-        deprecated: bool = None,\n         alias: str = None,\n         convert_underscores: bool = True,\n         title: str = None,\n@@ -144,10 +141,9 @@ class Header(Param):\n         min_length: int = None,\n         max_length: int = None,\n         regex: str = None,\n+        deprecated: bool = None,\n         **extra: Any,\n     ):\n-        self.description = description\n-        self.deprecated = deprecated\n         self.convert_underscores = convert_underscores\n         super().__init__(\n             default,\n@@ -161,6 +157,7 @@ class Header(Param):\n             min_length=min_length,\n             max_length=max_length,\n             regex=regex,\n+            deprecated=deprecated,\n             **extra,\n         )\n \n@@ -172,7 +169,6 @@ class Cookie(Param):\n         self,\n         default: Any,\n         *,\n-        deprecated: bool = None,\n         alias: str = None,\n         title: str = None,\n         description: str = None,\n@@ -183,10 +179,9 @@ class Cookie(Param):\n         min_length: int = None,\n         max_length: int = None,\n         regex: str = None,\n+        deprecated: bool = None,\n         **extra: Any,\n     ):\n-        self.description = description\n-        self.deprecated = deprecated\n         super().__init__(\n             default,\n             alias=alias,\n@@ -199,6 +194,7 @@ class Cookie(Param):\n             min_length=min_length,\n             max_length=max_length,\n             regex=regex,\n+            deprecated=deprecated,\n             **extra,\n         )\n \n\n@@ -205,11 +205,11 @@ class APIRouter(routing.Router):\n         description: str = None,\n         response_description: str = \"Successful Response\",\n         deprecated: bool = None,\n-        name: str = None,\n         methods: List[str] = None,\n         operation_id: str = None,\n         include_in_schema: bool = True,\n         content_type: Type[Response] = JSONResponse,\n+        name: str = None,\n     ) -> None:\n         route = APIRoute(\n             path,\n@@ -221,11 +221,11 @@ class APIRouter(routing.Router):\n             description=description,\n             response_description=response_description,\n             deprecated=deprecated,\n-            name=name,\n             methods=methods,\n             operation_id=operation_id,\n             include_in_schema=include_in_schema,\n             content_type=content_type,\n+            name=name,\n         )\n         self.routes.append(route)\n \n@@ -240,11 +240,11 @@ class APIRouter(routing.Router):\n         description: str = None,\n         response_description: str = \"Successful Response\",\n         deprecated: bool = None,\n-        name: str = None,\n         methods: List[str] = None,\n         operation_id: str = None,\n         include_in_schema: bool = True,\n         content_type: Type[Response] = JSONResponse,\n+        name: str = None,\n     ) -> Callable:\n         def decorator(func: Callable) -> Callable:\n             self.add_api_route(\n@@ -257,11 +257,11 @@ class APIRouter(routing.Router):\n                 description=description,\n                 response_description=response_description,\n                 deprecated=deprecated,\n-                name=name,\n                 methods=methods,\n                 operation_id=operation_id,\n                 include_in_schema=include_in_schema,\n                 content_type=content_type,\n+                name=name,\n             )\n             return func\n \n@@ -285,19 +285,19 @@ class APIRouter(routing.Router):\n                     description=route.description,\n                     response_description=route.response_description,\n                     deprecated=route.deprecated,\n-                    name=route.name,\n                     methods=route.methods,\n                     operation_id=route.operation_id,\n                     include_in_schema=route.include_in_schema,\n                     content_type=route.content_type,\n+                    name=route.name,\n                 )\n             elif isinstance(route, routing.Route):\n                 self.add_route(\n                     prefix + route.path,\n                     route.endpoint,\n                     methods=route.methods,\n-                    name=route.name,\n                     include_in_schema=route.include_in_schema,\n+                    name=route.name,\n                 )\n \n     def get(\n@@ -311,10 +311,10 @@ class APIRouter(routing.Router):\n         description: str = None,\n         response_description: str = \"Successful Response\",\n         deprecated: bool = None,\n-        name: str = None,\n         operation_id: str = None,\n         include_in_schema: bool = True,\n         content_type: Type[Response] = JSONResponse,\n+        name: str = None,\n     ) -> Callable:\n         return self.api_route(\n             path=path,\n@@ -325,11 +325,11 @@ class APIRouter(routing.Router):\n             description=description,\n             response_description=response_description,\n             deprecated=deprecated,\n-            name=name,\n             methods=[\"GET\"],\n             operation_id=operation_id,\n             include_in_schema=include_in_schema,\n             content_type=content_type,\n+            name=name,\n         )\n \n     def put(\n@@ -343,10 +343,10 @@ class APIRouter(routing.Router):\n         description: str = None,\n         response_description: str = \"Successful Response\",\n         deprecated: bool = None,\n-        name: str = None,\n         operation_id: str = None,\n         include_in_schema: bool = True,\n         content_type: Type[Response] = JSONResponse,\n+        name: str = None,\n     ) -> Callable:\n         return self.api_route(\n             path=path,\n@@ -357,11 +357,11 @@ class APIRouter(routing.Router):\n             description=description,\n             response_description=response_description,\n             deprecated=deprecated,\n-            name=name,\n             methods=[\"PUT\"],\n             operation_id=operation_id,\n             include_in_schema=include_in_schema,\n             content_type=content_type,\n+            name=name,\n         )\n \n     def post(\n@@ -375,10 +375,10 @@ class APIRouter(routing.Router):\n         description: str = None,\n         response_description: str = \"Successful Response\",\n         deprecated: bool = None,\n-        name: str = None,\n         operation_id: str = None,\n         include_in_schema: bool = True,\n         content_type: Type[Response] = JSONResponse,\n+        name: str = None,\n     ) -> Callable:\n         return self.api_route(\n             path=path,\n@@ -389,11 +389,11 @@ class APIRouter(routing.Router):\n             description=description,\n             response_description=response_description,\n             deprecated=deprecated,\n-            name=name,\n             methods=[\"POST\"],\n             operation_id=operation_id,\n             include_in_schema=include_in_schema,\n             content_type=content_type,\n+            name=name,\n         )\n \n     def delete(\n@@ -407,10 +407,10 @@ class APIRouter(routing.Router):\n         description: str = None,\n         response_description: str = \"Successful Response\",\n         deprecated: bool = None,\n-        name: str = None,\n         operation_id: str = None,\n         include_in_schema: bool = True,\n         content_type: Type[Response] = JSONResponse,\n+        name: str = None,\n     ) -> Callable:\n         return self.api_route(\n             path=path,\n@@ -421,11 +421,11 @@ class APIRouter(routing.Router):\n             description=description,\n             response_description=response_description,\n             deprecated=deprecated,\n-            name=name,\n             methods=[\"DELETE\"],\n             operation_id=operation_id,\n             include_in_schema=include_in_schema,\n             content_type=content_type,\n+            name=name,\n         )\n \n     def options(\n@@ -439,10 +439,10 @@ class APIRouter(routing.Router):\n         description: str = None,\n         response_description: str = \"Successful Response\",\n         deprecated: bool = None,\n-        name: str = None,\n         operation_id: str = None,\n         include_in_schema: bool = True,\n         content_type: Type[Response] = JSONResponse,\n+        name: str = None,\n     ) -> Callable:\n         return self.api_route(\n             path=path,\n@@ -453,11 +453,11 @@ class APIRouter(routing.Router):\n             description=description,\n             response_description=response_description,\n             deprecated=deprecated,\n-            name=name,\n             methods=[\"OPTIONS\"],\n             operation_id=operation_id,\n             include_in_schema=include_in_schema,\n             content_type=content_type,\n+            name=name,\n         )\n \n     def head(\n@@ -471,10 +471,10 @@ class APIRouter(routing.Router):\n         description: str = None,\n         response_description: str = \"Successful Response\",\n         deprecated: bool = None,\n-        name: str = None,\n         operation_id: str = None,\n         include_in_schema: bool = True,\n         content_type: Type[Response] = JSONResponse,\n+        name: str = None,\n     ) -> Callable:\n         return self.api_route(\n             path=path,\n@@ -485,11 +485,11 @@ class APIRouter(routing.Router):\n             description=description,\n             response_description=response_description,\n             deprecated=deprecated,\n-            name=name,\n             methods=[\"HEAD\"],\n             operation_id=operation_id,\n             include_in_schema=include_in_schema,\n             content_type=content_type,\n+            name=name,\n         )\n \n     def patch(\n@@ -503,10 +503,10 @@ class APIRouter(routing.Router):\n         description: str = None,\n         response_description: str = \"Successful Response\",\n         deprecated: bool = None,\n-        name: str = None,\n         operation_id: str = None,\n         include_in_schema: bool = True,\n         content_type: Type[Response] = JSONResponse,\n+        name: str = None,\n     ) -> Callable:\n         return self.api_route(\n             path=path,\n@@ -517,11 +517,11 @@ class APIRouter(routing.Router):\n             description=description,\n             response_description=response_description,\n             deprecated=deprecated,\n-            name=name,\n             methods=[\"PATCH\"],\n             operation_id=operation_id,\n             include_in_schema=include_in_schema,\n             content_type=content_type,\n+            name=name,\n         )\n \n     def trace(\n@@ -535,10 +535,10 @@ class APIRouter(routing.Router):\n         description: str = None,\n         response_description: str = \"Successful Response\",\n         deprecated: bool = None,\n-        name: str = None,\n         operation_id: str = None,\n         include_in_schema: bool = True,\n         content_type: Type[Response] = JSONResponse,\n+        name: str = None,\n     ) -> Callable:\n         return self.api_route(\n             path=path,\n@@ -549,9 +549,9 @@ class APIRouter(routing.Router):\n             description=description,\n             response_description=response_description,\n             deprecated=deprecated,\n-            name=name,\n             methods=[\"TRACE\"],\n             operation_id=operation_id,\n             include_in_schema=include_in_schema,\n             content_type=content_type,\n+            name=name,\n         )\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#7da0233e35d91ca4f2ae32d2afd0b88078ce761f", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1404 | Lines Deleted: 0 | Files Changed: 68 | Hunks: 68 | Methods Changed: 82 | Complexity Δ (Sum/Max): 114/6 | Churn Δ: 1404 | Churn Cumulative: 1404 | Contributors (this commit): 1 | Commits (past 90d): 68 | Contributors (cumulative): 68 | DMM Complexity: 1.0\n\nDIFF:\n@@ -0,0 +1,7 @@\n+from fastapi import FastAPI\n+\n+app = FastAPI()\n+\n+@app.get(\"/\")\n+async def root():\n+    return {\"message\": \"Hello World\"}\n\n@@ -0,0 +1,7 @@\n+from fastapi import FastAPI\n+\n+app = FastAPI()\n+\n+@app.get(\"/items/{item_id}\")\n+async def read_item(item_id):\n+    return {\"item_id\": item_id}\n\n@@ -0,0 +1,7 @@\n+from fastapi import FastAPI\n+\n+app = FastAPI()\n+\n+@app.get(\"/items/{item_id}\")\n+async def read_item(item_id: int):\n+    return {\"item_id\": item_id}\n\n@@ -0,0 +1,8 @@\n+from fastapi import FastAPI\n+from uuid import UUID\n+\n+app = FastAPI()\n+\n+@app.get(\"/items/{item_id}\")\n+async def read_item(item_id: UUID):\n+    return {\"item_id\": item_id}\n\n@@ -0,0 +1,13 @@\n+from fastapi import FastAPI\n+\n+app = FastAPI()\n+\n+fake_items_db = [\n+    {\"item_name\": \"Foo\"},\n+    {\"item_name\": \"Bar\"},\n+    {\"item_name\": \"Baz\"},\n+]\n+\n+@app.get(\"/items/\")\n+async def read_item(skip: int = 0, limit: int = 100):\n+    return fake_items_db[skip:limit]\n\n@@ -0,0 +1,10 @@\n+from fastapi import FastAPI\n+from fastapi import FastAPI\n+\n+app = FastAPI()\n+\n+@app.get(\"/items/{item_id}\")\n+async def read_item(item_id: str, q: str = None):\n+    if q:\n+        return {\"item_id\": item_id, \"q\": q}\n+    return {\"item_id\": item_id}\n\n@@ -0,0 +1,12 @@\n+from fastapi import FastAPI\n+\n+app = FastAPI()\n+\n+@app.get(\"/items/{item_id}\")\n+async def read_item(item_id: str, q: str = None, short: bool = False):\n+    item = {\"item_id\": item_id}\n+    if q:\n+        item.update({\"q\": q})\n+    if not short:\n+        item.update({\"description\": \"This is an amazing item that has a long description\"})\n+    return item\n\n@@ -0,0 +1,12 @@\n+from fastapi import FastAPI\n+\n+app = FastAPI()\n+\n+@app.get(\"/users/{user_id}/items/{item_id}\")\n+async def read_user_item(user_id: int, item_id: str, q: str = None, short: bool = False):\n+    item = {\"item_id\": item_id, \"owner_id\": user_id}\n+    if q:\n+        item.update({\"q\": q})\n+    if not short:\n+        item.update({\"description\": \"This is an amazing item that has a long description\"})\n+    return item\n\n@@ -0,0 +1,12 @@\n+from fastapi import FastAPI\n+\n+app = FastAPI()\n+\n+@app.get(\"/users/{user_id}/items/{item_id}\")\n+async def read_user_item(user_id: int, item_id: str, needy: str, q: str = None, short: bool = False):\n+    item = {\"item_id\": item_id, \"owner_id\": user_id, \"needy\": needy}\n+    if q:\n+        item.update({\"q\": q})\n+    if not short:\n+        item.update({\"description\": \"This is an amazing item that has a long description\"})\n+    return item\n\n@@ -0,0 +1,15 @@\n+from fastapi import FastAPI\n+from pydantic import BaseModel\n+\n+class Item(BaseModel):\n+    name: str\n+    description: str = None\n+    price: float\n+    tax: float = None\n+\n+\n+app = FastAPI()\n+\n+@app.post(\"/items/\")\n+async def create_item(item: Item):\n+    return item\n\n@@ -0,0 +1,19 @@\n+from fastapi import FastAPI\n+from pydantic import BaseModel\n+\n+class Item(BaseModel):\n+    name: str\n+    description: str = None\n+    price: float\n+    tax: float = None\n+\n+\n+app = FastAPI()\n+\n+@app.post(\"/items/\")\n+async def create_item(item: Item):\n+    item_dict = item.dict()\n+    if item.tax:\n+        price_with_tax = item.price + item.tax\n+        item_dict.update({\"price_with_tax\": price_with_tax})\n+    return item_dict\n\n@@ -0,0 +1,15 @@\n+from fastapi import FastAPI\n+from pydantic import BaseModel\n+\n+class Item(BaseModel):\n+    name: str\n+    description: str = None\n+    price: float\n+    tax: float = None\n+\n+\n+app = FastAPI()\n+\n+@app.put(\"/items/{item_id}\")\n+async def create_item(item_id: int, item: Item):\n+    return {\"item_id\": item_id, **item.dict()}\n\n@@ -0,0 +1,18 @@\n+from fastapi import FastAPI\n+from pydantic import BaseModel\n+\n+class Item(BaseModel):\n+    name: str\n+    description: str = None\n+    price: float\n+    tax: float = None\n+\n+\n+app = FastAPI()\n+\n+@app.put(\"/items/{item_id}\")\n+async def create_item(item_id: int, item: Item, q: str = None):\n+    result = {\"item_id\": item_id, **item.dict()}\n+    if q:\n+        result.update({\"q\": q})\n+    return result\n\n@@ -0,0 +1,11 @@\n+from fastapi import FastAPI, Query\n+\n+app = FastAPI()\n+\n+\n+@app.get(\"/items/\")\n+async def read_items(q: str = Query(None, max_length=50)):\n+    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n+    if q:\n+        results.update({\"q\": q})\n+    return results\n\n@@ -0,0 +1,11 @@\n+from fastapi import FastAPI, Query\n+\n+app = FastAPI()\n+\n+\n+@app.get(\"/items/\")\n+async def read_items(q: str = Query(None, min_length=3, max_length=50)):\n+    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n+    if q:\n+        results.update({\"q\": q})\n+    return results\n\n@@ -0,0 +1,11 @@\n+from fastapi import FastAPI, Query\n+\n+app = FastAPI()\n+\n+\n+@app.get(\"/items/\")\n+async def read_items(q: str = Query(None, min_length=3, max_length=50, regex=\"^fixedquery$\")):\n+    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n+    if q:\n+        results.update({\"q\": q})\n+    return results\n\n@@ -0,0 +1,15 @@\n+from fastapi import FastAPI, Query\n+\n+app = FastAPI()\n+\n+\n+@app.get(\"/items/\")\n+async def read_items(\n+    q: str = Query(\n+        None, title=\"Query string\", min_length=3, max_length=50, regex=\"^fixedquery$\"\n+    )\n+):\n+    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n+    if q:\n+        results.update({\"q\": q})\n+    return results\n\n@@ -0,0 +1,20 @@\n+from fastapi import FastAPI, Query\n+\n+app = FastAPI()\n+\n+\n+@app.get(\"/items/\")\n+async def read_items(\n+    q: str = Query(\n+        None,\n+        title=\"Query string\",\n+        description=\"Query string for the items to search in the database that have a good match\",\n+        min_length=3,\n+        max_length=50,\n+        regex=\"^fixedquery$\",\n+    )\n+):\n+    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n+    if q:\n+        results.update({\"q\": q})\n+    return results\n\n@@ -0,0 +1,21 @@\n+from fastapi import FastAPI, Query\n+\n+app = FastAPI()\n+\n+\n+@app.get(\"/items/\")\n+async def read_items(\n+    q: str = Query(\n+        \"fixedquery\",\n+        alias=\"item-query\",\n+        title=\"Query string\",\n+        description=\"Query string for the items to search in the database that have a good match\",\n+        min_length=3,\n+        max_length=50,\n+        regex=\"^fixedquery$\",\n+    )\n+):\n+    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n+    if q:\n+        results.update({\"q\": q})\n+    return results\n\n@@ -0,0 +1,21 @@\n+from fastapi import FastAPI, Query\n+\n+app = FastAPI()\n+\n+\n+@app.get(\"/items/\")\n+async def read_items(\n+    q: str = Query(\n+        None,\n+        alias=\"item-query\",\n+        title=\"Query string\",\n+        description=\"Query string for the items to search in the database that have a good match\",\n+        min_length=3,\n+        max_length=50,\n+        regex=\"^fixedquery$\",\n+    )\n+):\n+    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n+    if q:\n+        results.update({\"q\": q})\n+    return results\n\n@@ -0,0 +1,21 @@\n+from fastapi import FastAPI, Query\n+\n+app = FastAPI()\n+\n+\n+@app.get(\"/items/\")\n+async def read_items(\n+    q: str = Query(\n+        ...,\n+        alias=\"item-query\",\n+        title=\"Query string\",\n+        description=\"Query string for the items to search in the database that have a good match\",\n+        min_length=3,\n+        max_length=50,\n+        regex=\"^fixedquery$\",\n+    )\n+):\n+    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n+    if q:\n+        results.update({\"q\": q})\n+    return results\n\n@@ -0,0 +1,22 @@\n+from fastapi import FastAPI, Query\n+\n+app = FastAPI()\n+\n+\n+@app.get(\"/items/\")\n+async def read_items(\n+    q: str = Query(\n+        None,\n+        alias=\"item-query\",\n+        title=\"Query string\",\n+        description=\"Query string for the items to search in the database that have a good match\",\n+        min_length=3,\n+        max_length=50,\n+        regex=\"^fixedquery$\",\n+        deprecated=True,\n+    )\n+):\n+    results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n+    if q:\n+        results.update({\"q\": q})\n+    return results\n\n@@ -0,0 +1,14 @@\n+from fastapi import FastAPI, Query, Path\n+\n+app = FastAPI()\n+\n+\n+@app.get(\"/items/{item_id}\")\n+async def read_items(\n+    item_id: int = Path(..., title=\"The ID of the item to get\"),\n+    q: str = Query(None, alias=\"item-query\"),\n+):\n+    results = {\"item_id\": item_id}\n+    if q:\n+        results.update({\"q\": q})\n+    return results\n\n@@ -0,0 +1,14 @@\n+from fastapi import FastAPI, Query, Path\n+\n+app = FastAPI()\n+\n+\n+@app.get(\"/items/{item_id}\")\n+async def read_items(\n+    q: str,\n+    item_id: int = Path(..., title=\"The ID of the item to get\"),\n+):\n+    results = {\"item_id\": item_id}\n+    if q:\n+        results.update({\"q\": q})\n+    return results\n\n@@ -0,0 +1,15 @@\n+from fastapi import FastAPI, Query, Path\n+\n+app = FastAPI()\n+\n+\n+@app.get(\"/items/{item_id}\")\n+async def read_items(\n+    *,\n+    item_id: int = Path(..., title=\"The ID of the item to get\"),\n+    q: str,\n+):\n+    results = {\"item_id\": item_id}\n+    if q:\n+        results.update({\"q\": q})\n+    return results\n\n@@ -0,0 +1,15 @@\n+from fastapi import FastAPI, Query, Path\n+\n+app = FastAPI()\n+\n+\n+@app.get(\"/items/{item_id}\")\n+async def read_items(\n+    *,\n+    item_id: int = Path(..., title=\"The ID of the item to get\", ge=1),\n+    q: str,\n+):\n+    results = {\"item_id\": item_id}\n+    if q:\n+        results.update({\"q\": q})\n+    return results\n\n@@ -0,0 +1,15 @@\n+from fastapi import FastAPI, Query, Path\n+\n+app = FastAPI()\n+\n+\n+@app.get(\"/items/{item_id}\")\n+async def read_items(\n+    *,\n+    item_id: int = Path(..., title=\"The ID of the item to get\", gt=0, le=1000),\n+    q: str,\n+):\n+    results = {\"item_id\": item_id}\n+    if q:\n+        results.update({\"q\": q})\n+    return results\n\n@@ -0,0 +1,16 @@\n+from fastapi import FastAPI, Query, Path\n+\n+app = FastAPI()\n+\n+\n+@app.get(\"/items/{item_id}\")\n+async def read_items(\n+    *,\n+    item_id: int = Path(..., title=\"The ID of the item to get\", ge=0, le=1000),\n+    q: str,\n+    size: float = Query(..., gt=0, lt=10.5)\n+):\n+    results = {\"item_id\": item_id}\n+    if q:\n+        results.update({\"q\": q})\n+    return results\n\n@@ -0,0 +1,26 @@\n+from fastapi import FastAPI, Query, Path\n+from pydantic import BaseModel\n+\n+app = FastAPI()\n+\n+\n+class Item(BaseModel):\n+    name: str\n+    description: str = None\n+    price: float\n+    tax: float = None\n+\n+\n+@app.put(\"/items/{item_id}\")\n+async def update_item(\n+    *,\n+    item_id: int = Path(..., title=\"The ID of the item to get\", ge=0, le=1000),\n+    q: str,\n+    item: Item = None,\n+):\n+    results = {\"item_id\": item_id}\n+    if q:\n+        results.update({\"q\": q})\n+    if item:\n+        results.update({\"item\": item})\n+    return results\n\n@@ -0,0 +1,27 @@\n+from fastapi import FastAPI, Query, Path\n+from pydantic import BaseModel\n+\n+app = FastAPI()\n+\n+\n+class Item(BaseModel):\n+    name: str\n+    description: str = None\n+    price: float\n+    tax: float = None\n+\n+\n+class User(BaseModel):\n+    username: str\n+    full_name: str = None\n+\n+\n+@app.put(\"/items/{item_id}\")\n+async def update_item(\n+    *,\n+    item_id: int,\n+    item: Item,\n+    user: User,\n+):\n+    results = {\"item_id\": item_id, \"item\": item, \"user\": user}\n+    return results\n\n@@ -0,0 +1,28 @@\n+from fastapi import FastAPI, Query, Path, Body\n+from pydantic import BaseModel\n+\n+app = FastAPI()\n+\n+\n+class Item(BaseModel):\n+    name: str\n+    description: str = None\n+    price: float\n+    tax: float = None\n+\n+\n+class User(BaseModel):\n+    username: str\n+    full_name: str = None\n+\n+\n+@app.put(\"/items/{item_id}\")\n+async def update_item(\n+    *,\n+    item_id: int,\n+    item: Item,\n+    user: User,\n+    access_token: str = Body(...),\n+):\n+    results = {\"item_id\": item_id, \"item\": item, \"user\": user, \"access_token\": access_token}\n+    return results\n\n@@ -0,0 +1,31 @@\n+from fastapi import FastAPI, Query, Path, Body\n+from pydantic import BaseModel\n+\n+app = FastAPI()\n+\n+\n+class Item(BaseModel):\n+    name: str\n+    description: str = None\n+    price: float\n+    tax: float = None\n+\n+\n+class User(BaseModel):\n+    username: str\n+    full_name: str = None\n+\n+\n+@app.put(\"/items/{item_id}\")\n+async def update_item(\n+    *,\n+    item_id: int,\n+    item: Item,\n+    user: User,\n+    access_token: str = Body(...),\n+    q: str = None,\n+):\n+    results = {\"item_id\": item_id, \"item\": item, \"user\": user, \"access_token\": access_token}\n+    if q:\n+        results.update({\"q\": q})\n+    return results\n\n@@ -0,0 +1,21 @@\n+from fastapi import FastAPI, Query, Path, Body\n+from pydantic import BaseModel\n+\n+app = FastAPI()\n+\n+\n+class Item(BaseModel):\n+    name: str\n+    description: str = None\n+    price: float\n+    tax: float = None\n+\n+\n+@app.put(\"/items/{item_id}\")\n+async def update_item(\n+    *,\n+    item_id: int,\n+    item: Item = Body(..., embed=True),\n+):\n+    results = {\"item_id\": item_id, \"item\": item}\n+    return results\n\n@@ -0,0 +1,21 @@\n+from fastapi import FastAPI, Query, Path, Body\n+from pydantic import BaseModel, Schema\n+\n+app = FastAPI()\n+\n+\n+class Item(BaseModel):\n+    name: str\n+    description: str = Schema(None, title=\"The description of the item\", max_length=300)\n+    price: float = Schema(..., gt=0, description=\"The price must be greater than zero\")\n+    tax: float = None\n+\n+\n+@app.put(\"/items/{item_id}\")\n+async def update_item(\n+    *,\n+    item_id: int,\n+    item: Item = Body(..., embed=True),\n+):\n+    results = {\"item_id\": item_id, \"item\": item}\n+    return results\n\n@@ -0,0 +1,22 @@\n+from fastapi import FastAPI, Query, Path, Body\n+from pydantic import BaseModel\n+\n+app = FastAPI()\n+\n+\n+class Item(BaseModel):\n+    name: str\n+    description: str = None\n+    price: float\n+    tax: float = None\n+    tags: list = []\n+\n+\n+@app.put(\"/items/{item_id}\")\n+async def update_item(\n+    *,\n+    item_id: int,\n+    item: Item,\n+):\n+    results = {\"item_id\": item_id, \"item\": item}\n+    return results\n\n@@ -0,0 +1,23 @@\n+from fastapi import Body, FastAPI, Path, Query\n+from pydantic import BaseModel\n+from typing import List\n+\n+app = FastAPI()\n+\n+\n+class Item(BaseModel):\n+    name: str\n+    description: str = None\n+    price: float\n+    tax: float = None\n+    tags: List[str] = []\n+\n+\n+@app.put(\"/items/{item_id}\")\n+async def update_item(\n+    *,\n+    item_id: int,\n+    item: Item,\n+):\n+    results = {\"item_id\": item_id, \"item\": item}\n+    return results\n\n@@ -0,0 +1,23 @@\n+from fastapi import Body, FastAPI, Path, Query\n+from pydantic import BaseModel\n+from typing import Set\n+\n+app = FastAPI()\n+\n+\n+class Item(BaseModel):\n+    name: str\n+    description: str = None\n+    price: float\n+    tax: float = None\n+    tags: Set[str] = []\n+\n+\n+@app.put(\"/items/{item_id}\")\n+async def update_item(\n+    *,\n+    item_id: int,\n+    item: Item,\n+):\n+    results = {\"item_id\": item_id, \"item\": item}\n+    return results\n\n@@ -0,0 +1,29 @@\n+from fastapi import Body, FastAPI, Path, Query\n+from pydantic import BaseModel\n+from typing import Set\n+\n+app = FastAPI()\n+\n+\n+class Image(BaseModel):\n+    url: str\n+    name: str\n+\n+\n+class Item(BaseModel):\n+    name: str\n+    description: str = None\n+    price: float\n+    tax: float = None\n+    tags: Set[str] = []\n+    image: Image = None\n+\n+\n+@app.put(\"/items/{item_id}\")\n+async def update_item(\n+    *,\n+    item_id: int,\n+    item: Item,\n+):\n+    results = {\"item_id\": item_id, \"item\": item}\n+    return results\n\n@@ -0,0 +1,30 @@\n+from fastapi import Body, FastAPI, Path, Query\n+from pydantic import BaseModel\n+from pydantic.types import UrlStr\n+from typing import Set\n+\n+app = FastAPI()\n+\n+\n+class Image(BaseModel):\n+    url: UrlStr\n+    name: str\n+\n+\n+class Item(BaseModel):\n+    name: str\n+    description: str = None\n+    price: float\n+    tax: float = None\n+    tags: Set[str] = []\n+    image: Image = None\n+\n+\n+@app.put(\"/items/{item_id}\")\n+async def update_item(\n+    *,\n+    item_id: int,\n+    item: Item,\n+):\n+    results = {\"item_id\": item_id, \"item\": item}\n+    return results\n\n@@ -0,0 +1,30 @@\n+from fastapi import Body, FastAPI, Path, Query\n+from pydantic import BaseModel\n+from pydantic.types import UrlStr\n+from typing import Set, List\n+\n+app = FastAPI()\n+\n+\n+class Image(BaseModel):\n+    url: UrlStr\n+    name: str\n+\n+\n+class Item(BaseModel):\n+    name: str\n+    description: str = None\n+    price: float\n+    tax: float = None\n+    tags: Set[str] = []\n+    image: List[Image] = None\n+\n+\n+@app.put(\"/items/{item_id}\")\n+async def update_item(\n+    *,\n+    item_id: int,\n+    item: Item,\n+):\n+    results = {\"item_id\": item_id, \"item\": item}\n+    return results\n\n@@ -0,0 +1,32 @@\n+from fastapi import Body, FastAPI, Path, Query\n+from pydantic import BaseModel\n+from pydantic.types import UrlStr\n+from typing import Set, List\n+\n+app = FastAPI()\n+\n+\n+class Image(BaseModel):\n+    url: UrlStr\n+    name: str\n+\n+\n+class Item(BaseModel):\n+    name: str\n+    description: str = None\n+    price: float\n+    tax: float = None\n+    tags: Set[str] = []\n+    image: List[Image] = None\n+\n+\n+class Offer(BaseModel):\n+    name: str\n+    description: str = None\n+    price: float\n+    items: List[Item]\n+\n+\n+@app.post(\"/offers/\")\n+async def create_offer(*, offer: Offer):\n+    return offer\n\n@@ -0,0 +1,16 @@\n+from fastapi import Body, FastAPI, Path, Query\n+from pydantic import BaseModel\n+from pydantic.types import UrlStr\n+from typing import Set, List\n+\n+app = FastAPI()\n+\n+\n+class Image(BaseModel):\n+    url: UrlStr\n+    name: str\n+\n+\n+@app.post(\"/images/multiple/\")\n+async def create_multiple_images(*, images: List[Image]):\n+    return images\n\n@@ -0,0 +1,11 @@\n+from fastapi import FastAPI, Cookie\n+from pydantic import BaseModel\n+from pydantic.types import UrlStr\n+from typing import Set, List\n+\n+app = FastAPI()\n+\n+\n+@app.get(\"/items/\")\n+async def read_items(*, ads_id: str = Cookie(None)):\n+    return {\"ads_id\": ads_id}\n\n@@ -0,0 +1,11 @@\n+from fastapi import FastAPI, Header\n+from pydantic import BaseModel\n+from pydantic.types import UrlStr\n+from typing import Set, List\n+\n+app = FastAPI()\n+\n+\n+@app.get(\"/items/\")\n+async def read_items(*, accept_encoding: str = Header(None)):\n+    return {\"Accept-Encoding\": accept_encoding}\n\n@@ -0,0 +1,11 @@\n+from fastapi import FastAPI, Header\n+from pydantic import BaseModel\n+from pydantic.types import UrlStr\n+from typing import Set, List\n+\n+app = FastAPI()\n+\n+\n+@app.get(\"/items/\")\n+async def read_items(*, strange_header: str = Header(None, convert_underscores=False)):\n+    return {\"strange_header\": strange_header}\n\n@@ -0,0 +1,19 @@\n+from fastapi import Body, FastAPI, Path, Query\n+from pydantic import BaseModel\n+from pydantic.types import UrlStr\n+from typing import Set, List\n+\n+app = FastAPI()\n+\n+\n+class Item(BaseModel):\n+    name: str\n+    description: str = None\n+    price: float\n+    tax: float = None\n+    tags: Set[str] = []\n+\n+\n+@app.post(\"/items/\", response_model=Item)\n+async def create_item(*, item: Item):\n+    return item\n\n@@ -0,0 +1,20 @@\n+from fastapi import Body, FastAPI, Path, Query\n+from pydantic import BaseModel\n+from pydantic.types import EmailStr\n+from typing import Set, List\n+\n+app = FastAPI()\n+\n+\n+class UserIn(BaseModel):\n+    username: str\n+    password: str\n+    email: EmailStr\n+    full_name: str = None\n+    \n+\n+\n+# Don't do this in production!\n+@app.post(\"/user/\", response_model=UserIn)\n+async def create_user(*, user: UserIn):\n+    return user\n\n@@ -0,0 +1,24 @@\n+from fastapi import Body, FastAPI, Path, Query\n+from pydantic import BaseModel\n+from pydantic.types import EmailStr\n+from typing import Set, List\n+\n+app = FastAPI()\n+\n+\n+class UserIn(BaseModel):\n+    username: str\n+    password: str\n+    email: EmailStr\n+    full_name: str = None\n+\n+\n+class UserOut(BaseModel):\n+    username: str\n+    email: EmailStr\n+    full_name: str = None\n+\n+\n+@app.post(\"/user/\", response_model=UserOut)\n+async def create_user(*, user: UserIn):\n+    return user\n\n@@ -0,0 +1,43 @@\n+from fastapi import Body, FastAPI, Path, Query\n+from pydantic import BaseModel\n+from pydantic.types import EmailStr\n+from typing import Set, List\n+from uuid import UUID, uuid4\n+\n+app = FastAPI()\n+\n+\n+class UserIn(BaseModel):\n+    username: str\n+    password: str\n+    email: EmailStr\n+    full_name: str = None\n+\n+\n+class UserOut(BaseModel):\n+    username: str\n+    email: EmailStr\n+    full_name: str = None\n+\n+\n+class UserInDB(BaseModel):\n+    username: str\n+    hashed_password: str\n+    email: EmailStr\n+    full_name: str = None\n+\n+\n+def fake_password_hasher(raw_password: str):\n+    return \"supersecret\" + raw_password\n+\n+\n+def fake_save_user(user_in: UserIn):\n+    hashed_password = fake_password_hasher(user_in.password)\n+    user_in_db = UserInDB(**user_in.dict(), hashed_password=hashed_password)\n+    print(\"User saved! ..not really\")\n+    return user_in_db\n+\n+@app.post(\"/user/\", response_model=UserOut)\n+async def create_user(*, user_in: UserIn):\n+    user_saved = fake_save_user(user_in)\n+    return user_saved\n\n@@ -0,0 +1,37 @@\n+from fastapi import Body, FastAPI, Path, Query\n+from pydantic import BaseModel\n+from pydantic.types import EmailStr\n+from typing import Set, List\n+\n+app = FastAPI()\n+\n+class UserBase(BaseModel):\n+    username: str\n+    email: EmailStr\n+    full_name: str = None\n+\n+class UserIn(UserBase):\n+    password: str\n+\n+\n+class UserOut(UserBase):\n+    pass\n+\n+class UserInDB(UserBase):\n+    hashed_password: str\n+    \n+\n+def fake_password_hasher(raw_password: str):\n+    return \"supersecret\" + raw_password\n+\n+\n+def fake_save_user(user_in: UserIn):\n+    hashed_password = fake_password_hasher(user_in.password)\n+    user_in_db = UserInDB(**user_in.dict(), hashed_password=hashed_password)\n+    print(\"User saved! ..not really\")\n+    return user_in_db\n+\n+@app.post(\"/user/\", response_model=UserOut)\n+async def create_user(*, user_in: UserIn):\n+    user_saved = fake_save_user(user_in)\n+    return user_saved\n\n@@ -0,0 +1,11 @@\n+from fastapi import Body, FastAPI, Path, Query, Form\n+from pydantic import BaseModel\n+from pydantic.types import EmailStr\n+from typing import Set, List\n+\n+app = FastAPI()\n+\n+\n+@app.post(\"/login/\")\n+async def login(*, username: str = Form(...), password: str = Form(...)):\n+    return {\"username\": username}\n\n@@ -0,0 +1,11 @@\n+from fastapi import Body, FastAPI, Path, Query, File\n+from pydantic import BaseModel\n+from pydantic.types import EmailStr\n+from typing import Set, List\n+\n+app = FastAPI()\n+\n+\n+@app.post(\"/files/\")\n+async def create_file(*, file: bytes = File(...)):\n+    return {\"file_size\": len(file)}\n\n@@ -0,0 +1,11 @@\n+from fastapi import Body, FastAPI, Path, Query, File, Form\n+from pydantic import BaseModel\n+from pydantic.types import EmailStr\n+from typing import Set, List\n+\n+app = FastAPI()\n+\n+\n+@app.post(\"/files/\")\n+async def create_file(*, file: bytes = File(...), token: str = Form(...)):\n+    return {\"file_size\": len(file), \"token\": token}\n\n@@ -0,0 +1,20 @@\n+from fastapi import Body, FastAPI, Path, Query\n+from starlette.status import HTTP_201_CREATED\n+from pydantic import BaseModel\n+from pydantic.types import UrlStr\n+from typing import Set, List\n+\n+app = FastAPI()\n+\n+\n+class Item(BaseModel):\n+    name: str\n+    description: str = None\n+    price: float\n+    tax: float = None\n+    tags: Set[str] = []\n+\n+\n+@app.post(\"/items/\", response_model=Item, status_code=HTTP_201_CREATED)\n+async def create_item(*, item: Item):\n+    return item\n\n@@ -0,0 +1,20 @@\n+from fastapi import Body, FastAPI, Path, Query\n+from starlette.status import HTTP_201_CREATED\n+from pydantic import BaseModel\n+from pydantic.types import UrlStr\n+from typing import Set, List\n+\n+app = FastAPI()\n+\n+\n+class Item(BaseModel):\n+    name: str\n+    description: str = None\n+    price: float\n+    tax: float = None\n+    tags: Set[str] = []\n+\n+\n+@app.post(\"/items/\", response_model=Item, tags=[\"items\"])\n+async def create_item(*, item: Item):\n+    return item\n\n@@ -0,0 +1,25 @@\n+from fastapi import Body, FastAPI, Path, Query\n+from starlette.status import HTTP_201_CREATED\n+from pydantic import BaseModel\n+from pydantic.types import UrlStr\n+from typing import Set, List\n+\n+app = FastAPI()\n+\n+\n+class Item(BaseModel):\n+    name: str\n+    description: str = None\n+    price: float\n+    tax: float = None\n+    tags: Set[str] = []\n+\n+\n+@app.post(\n+    \"/items/\",\n+    response_model=Item,\n+    summary=\"Create an item\",\n+    description=\"Create an item with all the information, name, description, price, tax and a set of unique tags\",\n+)\n+async def create_item(*, item: Item):\n+    return item\n\n@@ -0,0 +1,29 @@\n+from fastapi import Body, FastAPI, Path, Query\n+from starlette.status import HTTP_201_CREATED\n+from pydantic import BaseModel\n+from pydantic.types import UrlStr\n+from typing import Set, List\n+\n+app = FastAPI()\n+\n+\n+class Item(BaseModel):\n+    name: str\n+    description: str = None\n+    price: float\n+    tax: float = None\n+    tags: Set[str] = []\n+\n+\n+@app.post(\"/items/\", response_model=Item, summary=\"Create an item\")\n+async def create_item(*, item: Item):\n+    \"\"\"\n+    Create an item with all the information:\n+    \n+    * name: each item must have a name\n+    * description: a long description\n+    * price: required\n+    * tax: if the item doesn't have tax, you can omit this\n+    * tags: a set of unique tag strings for this item\n+    \"\"\"\n+    return item\n\n@@ -0,0 +1,29 @@\n+from fastapi import Body, FastAPI, Path, Query\n+from starlette.status import HTTP_201_CREATED\n+from pydantic import BaseModel\n+from pydantic.types import UrlStr\n+from typing import Set, List\n+\n+app = FastAPI()\n+\n+\n+class Item(BaseModel):\n+    name: str\n+    description: str = None\n+    price: float\n+    tax: float = None\n+    tags: Set[str] = []\n+\n+\n+@app.post(\"/items/\", response_model=Item, summary=\"Create an item\", response_description=\"The created item\")\n+async def create_item(*, item: Item):\n+    \"\"\"\n+    Create an item with all the information:\n+    \n+    * name: each item must have a name\n+    * description: a long description\n+    * price: required\n+    * tax: if the item doesn't have tax, you can omit this\n+    * tags: a set of unique tag strings for this item\n+    \"\"\"\n+    return item\n\n@@ -0,0 +1,13 @@\n+from typing import List, Set\n+\n+from fastapi import Body, FastAPI, Path, Query\n+from pydantic import BaseModel\n+from pydantic.types import UrlStr\n+from starlette.status import HTTP_201_CREATED\n+\n+app = FastAPI()\n+\n+\n+@app.get(\"/items/\", deprecated=True)\n+async def read_items():\n+    return [{\"item_id\": \"Foo\"}]\n\n@@ -0,0 +1,13 @@\n+from typing import List, Set\n+\n+from fastapi import Body, FastAPI, Path, Query\n+from pydantic import BaseModel\n+from pydantic.types import UrlStr\n+from starlette.status import HTTP_201_CREATED\n+\n+app = FastAPI()\n+\n+\n+@app.get(\"/items/\", operation_id=\"some_specific_id_you_define\")\n+async def read_items():\n+    return [{\"item_id\": \"Foo\"}]\n\n@@ -0,0 +1,13 @@\n+from typing import List, Set\n+\n+from fastapi import Body, FastAPI, Path, Query\n+from pydantic import BaseModel\n+from pydantic.types import UrlStr\n+from starlette.status import HTTP_201_CREATED\n+\n+app = FastAPI()\n+\n+\n+@app.get(\"/items/\", include_in_schema=False)\n+async def read_items():\n+    return [{\"item_id\": \"Foo\"}]\n\n@@ -0,0 +1,14 @@\n+from typing import List, Set\n+\n+from fastapi import Body, FastAPI, Path, Query\n+from pydantic import BaseModel\n+from pydantic.types import UrlStr\n+from starlette.status import HTTP_201_CREATED\n+from starlette.responses import UJSONResponse\n+\n+app = FastAPI()\n+\n+\n+@app.get(\"/items/\", content_type=UJSONResponse)\n+async def read_items():\n+    return [{\"item_id\": \"Foo\"}]\n\n@@ -0,0 +1,23 @@\n+from typing import List, Set\n+\n+from fastapi import Body, FastAPI, Path, Query\n+from pydantic import BaseModel\n+from pydantic.types import UrlStr\n+from starlette.status import HTTP_201_CREATED\n+from starlette.responses import HTMLResponse\n+\n+app = FastAPI()\n+\n+\n+@app.get(\"/items/\", content_type=HTMLResponse)\n+async def read_items():\n+    return \"\"\"\n+    <html>\n+        <head>\n+            <title>Some HTML in here</title>\n+        </head>\n+        <body>\n+            <h1>Look ma! HTML!</h1>\n+        </body>\n+    </html>\n+    \"\"\"\n\n@@ -0,0 +1,32 @@\n+from typing import List, Set\n+\n+from fastapi import Body, FastAPI, Path, Query, Depends\n+from pydantic import BaseModel\n+from pydantic.types import UrlStr\n+from starlette.status import HTTP_201_CREATED\n+from starlette.responses import HTMLResponse\n+\n+app = FastAPI()\n+\n+\n+fake_items_db = [{\"item_name\": \"Foo\"}, {\"item_name\": \"Bar\"}, {\"item_name\": \"Baz\"}]\n+\n+\n+class CommonQueryParams(BaseModel):\n+    q: str = None\n+    skip: int = None\n+    limit: int = None\n+\n+\n+async def common_parameters(q: str = None, skip: int = 0, limit: int = 100):\n+    return CommonQueryParams(q=q, skip=skip, limit=limit)\n+\n+\n+@app.get(\"/items/\")\n+async def read_items(commons: CommonQueryParams = Depends(common_parameters)):\n+    response = {}\n+    if commons.q:\n+        response.update({\"q\": commons.q})\n+    items = fake_items_db[commons.skip:commons.limit]\n+    response.update({\"items\": items})\n+    return response\n\n@@ -0,0 +1,35 @@\n+from typing import List, Set\n+\n+from fastapi import Body, FastAPI, Path, Query, Depends, Cookie\n+from pydantic import BaseModel\n+from pydantic.types import UrlStr\n+from starlette.status import HTTP_201_CREATED\n+from starlette.responses import HTMLResponse\n+\n+app = FastAPI()\n+\n+\n+class InterestsTracker(BaseModel):\n+    track_code: str\n+    interests: List[str]\n+\n+\n+fake_tracked_users_db = {\n+    \"Foo\": {\"track_code\": \"Foo\", \"interests\": [\"sports\", \"movies\"]},\n+    \"Bar\": {\"track_code\": \"Bar\", \"interests\": [\"food\", \"shows\"]},\n+    \"Baz\": {\"track_code\": \"Baz\", \"interests\": [\"gaming\", \"virtual reality\"]},\n+}\n+\n+\n+async def get_tracked_interests(track_code: str = Cookie(None)):\n+    if track_code in fake_tracked_users_db:\n+        track_dict = fake_tracked_users_db[track_code]\n+        track = InterestsTracker(**track_dict)\n+        return track\n+    return None\n+\n+\n+@app.get(\"/interests/\")\n+async def read_interests(tracked_interests: InterestsTracker = Depends(get_tracked_interests)):\n+    response = {\"interests\": tracked_interests.interests}\n+    return response\n\n@@ -0,0 +1,48 @@\n+from typing import List, Set\n+\n+from fastapi import Body, FastAPI, Path, Query, Depends, Cookie\n+from pydantic import BaseModel\n+from pydantic.types import UrlStr\n+from starlette.status import HTTP_201_CREATED\n+from starlette.responses import HTMLResponse\n+from random import choice\n+\n+app = FastAPI()\n+\n+\n+class InterestsTracker(BaseModel):\n+    track_code: str\n+    interests: List[str]\n+\n+\n+fake_tracked_users_db = {\n+    \"Foo\": {\"track_code\": \"Foo\", \"interests\": [\"sports\", \"movies\"]},\n+    \"Bar\": {\"track_code\": \"Bar\", \"interests\": [\"food\", \"shows\"]},\n+    \"Baz\": {\"track_code\": \"Baz\", \"interests\": [\"gaming\", \"virtual reality\"]},\n+}\n+\n+async def get_tracked_interests(track_code: str = Cookie(None)):\n+    if track_code in fake_tracked_users_db:\n+        track_dict = fake_tracked_users_db[track_code]\n+        track = InterestsTracker(**track_dict)\n+        return track\n+    return None\n+\n+class ComplexTracker:\n+    def __init__(self, tracker: InterestsTracker = Depends(get_tracked_interests)):\n+        self.tracker = tracker\n+    \n+    def random_interest(self):\n+        \"\"\"\n+        Get a random interest from the tracked ones for the current user.\n+        If the user doesn't have tracked interests, return a random one from the ones available.\n+        \"\"\"\n+        if self.tracker.interests:\n+            return choice(self.tracker.interests)\n+        return choice([\"sports\", \"movies\", \"food\", \"shows\", \"gaming\", \"virtual reality\"])\n+\n+\n+@app.get(\"/suggested-category\")\n+async def read_suggested_category(tracker: ComplexTracker = Depends(None)):\n+    response = {\"category\": tracker.random_interest()}\n+    return response\n\n@@ -0,0 +1,59 @@\n+from typing import List, Set\n+\n+from fastapi import Body, FastAPI, Path, Query, Depends, Cookie\n+from pydantic import BaseModel\n+from pydantic.types import UrlStr\n+from starlette.status import HTTP_201_CREATED\n+from starlette.responses import HTMLResponse\n+from random import choice\n+\n+from sqlalchemy import create_engine\n+from sqlalchemy.orm import scoped_session, sessionmaker\n+from sqlalchemy import Column, Integer, DateTime, String, Boolean, ForeignKey\n+from sqlalchemy.ext.declarative import declarative_base, declared_attr\n+\n+\n+# SQLAlchemy specific code, as with any other app\n+\n+\n+SQLALCHEMY_DATABASE_URI = \"postgresql://user:password@postgresserver/db\"\n+\n+# By creating this a CustomBase class and inheriting from it, your models will have\n+# automatic __tablename__ attributes. So you don't have to declare them.\n+# So, your models will behave very similarly to, for example, Flask-SQLAlchemy\n+\n+class CustomBase:\n+    # Generate __tablename__ automatically\n+    @declared_attr\n+    def __tablename__(cls):\n+        return cls.__name__.lower()\n+\n+\n+Base = declarative_base(cls=CustomBase)\n+\n+\n+class User(Base):\n+    # Own properties\n+    id = Column(Integer, primary_key=True, index=True)\n+    email = Column(String, unique=True, index=True)\n+    hashed_password = Column(String)\n+    is_active = Column(Boolean(), default=True)\n+\n+\n+engine = create_engine(SQLALCHEMY_DATABASE_URI, convert_unicode=True)\n+db_session = scoped_session(\n+    sessionmaker(autocommit=False, autoflush=False, bind=engine)\n+)\n+\n+\n+def get_user(username, db_session):\n+    return db_session.query(User).filter(User.id == username).first()\n+\n+# FastAPI specific code\n+app = FastAPI()\n+\n+\n+@app.get(\"/users/{username}\")\n+def read_user(username: str):\n+    user = get_user(username, db_session)\n+    return user\n\n@@ -0,0 +1,66 @@\n+from typing import List, Set\n+\n+from fastapi import Body, FastAPI, Path, Query, Depends, Cookie\n+from pydantic import BaseModel\n+from pydantic.types import UrlStr\n+from starlette.status import HTTP_201_CREATED\n+from starlette.responses import HTMLResponse\n+from random import choice\n+\n+from typing import List, Optional, Union\n+\n+from pydantic import BaseModel\n+\n+from app.models.config import USERPROFILE_DOC_TYPE\n+from app.models.role import RoleEnum\n+from couchbase.bucket import Bucket\n+from couchbase.cluster import Cluster, PasswordAuthenticator\n+from couchbase import LOCKMODE_WAIT\n+\n+\n+def get_bucket():\n+    cluster = Cluster(\"couchbase://couchbasehost:8091\")\n+    authenticator = PasswordAuthenticator(\"username\", \"password\")\n+    cluster.authenticate(authenticator)\n+    bucket: Bucket = cluster.open_bucket(\"bucket_name\", lockmode=LOCKMODE_WAIT)\n+    return bucket\n+\n+\n+class User(BaseModel):\n+    username: str\n+    email: Optional[str] = None\n+    full_name: Optional[str] = None\n+    disabled: Optional[bool] = None\n+\n+\n+class UserInDB(User):\n+    type: str = USERPROFILE_DOC_TYPE\n+    hashed_password: str\n+\n+    class Meta:\n+        key: Optional[str] = None\n+\n+\n+def get_user_doc_id(username):\n+    return f\"userprofile::{username}\"\n+\n+\n+def get_user(bucket: Bucket, username: str):\n+    doc_id = get_user_doc_id(username)\n+    result = bucket.get(doc_id, quiet=True)\n+    if not result.value:\n+        return None\n+    user = UserInDB(**result.value)\n+    user.Meta.key = result.key\n+    return user\n+\n+\n+# FastAPI specific code\n+app = FastAPI()\n+\n+\n+@app.get(\"/users/{username}\")\n+def read_user(username: str):\n+    bucket = get_bucket()\n+    user = get_user(bucket=bucket, username=username)\n+    return user\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
