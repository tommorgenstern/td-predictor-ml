{"custom_id": "requests#1d2abea94b2323352e18648154a163c96136b689", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 62 | Contributors (this commit): 5 | Commits (past 90d): 9 | Contributors (cumulative): 5 | DMM Complexity: None\n\nDIFF:\n@@ -15,8 +15,8 @@ class RequestException(Exception):\n class HTTPError(RequestException):\n     \"\"\"An HTTP error occured.\"\"\"\n \n-class AuthenticationError(RequestException):\n-    \"\"\"The authentication credentials provided were invalid.\"\"\"\n+class ConnectionError(RequestException):\n+    \"\"\"A Connection error occured.\"\"\"\n \n class Timeout(RequestException):\n     \"\"\"The request timed out.\"\"\"\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#5b73f2ea6100277f6400f399f585117b47068b4a", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 1 | Churn Cumulative: 656 | Contributors (this commit): 4 | Commits (past 90d): 40 | Contributors (cumulative): 4 | DMM Complexity: None\n\nDIFF:\n@@ -87,6 +87,7 @@ class Session(object):\n         # Set up a CookieJar to be used by default\n         self.cookies = {}\n \n+        # Add passed cookies in.\n         if cookies is not None:\n             self.cookies.update(cookies)\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#0f2dcff72573c80fbabb022ba2f1421901269f3a", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 20 | Lines Deleted: 24 | Files Changed: 1 | Hunks: 9 | Methods Changed: 5 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 44 | Churn Cumulative: 1369 | Contributors (this commit): 15 | Commits (past 90d): 33 | Contributors (cumulative): 15 | DMM Complexity: 0.0\n\nDIFF:\n@@ -323,21 +323,6 @@ class RequestsTestSuite(unittest.TestCase):\n             self.assertEquals(rbody.get('data'), '')\n \n \n-    def test_nonurlencoded_post_querystring(self):\n-\n-        for service in SERVICES:\n-\n-            r = requests.post(service('post'), params='fooaowpeuf')\n-\n-            self.assertEquals(r.status_code, 200)\n-            self.assertEquals(r.headers['content-type'], 'application/json')\n-            self.assertEquals(r.url, service('post?fooaowpeuf'))\n-\n-            rbody = json.loads(r.content)\n-            self.assertEquals(rbody.get('form'), {}) # No form supplied\n-            self.assertEquals(rbody.get('data'), '')\n-\n-\n     def test_urlencoded_post_query_and_data(self):\n \n         for service in SERVICES:\n@@ -356,16 +341,14 @@ class RequestsTestSuite(unittest.TestCase):\n             self.assertEquals(rbody.get('data'), '')\n \n \n-    def test_nonurlencoded_post_query_and_data(self):\n+    def test_nonurlencoded_postdata(self):\n \n         for service in SERVICES:\n \n-            r = requests.post(service('post'),\n-                params='fooaowpeuf', data=\"foobar\")\n+            r = requests.post(service('post'), data=\"foobar\")\n \n             self.assertEquals(r.status_code, 200)\n             self.assertEquals(r.headers['content-type'], 'application/json')\n-            self.assertEquals(r.url, service('post?fooaowpeuf'))\n \n             rbody = json.loads(r.content)\n \n@@ -539,24 +522,37 @@ class RequestsTestSuite(unittest.TestCase):\n         assert params3['b'] in r3.content\n         assert params3['c'] in r3.content\n \n+\n     def test_cookies(self):\n \n         s = requests.session()\n         r = s.get(httpbin('cookies', 'set', 'face', 'book'))\n-        print r.headers\n-        print r.history[0].cookies\n-        print r.content\n-        print r.url\n+        # print r.headers\n+        # print r.history[0].cookies\n+        # print r.content\n+        # print r.url\n+\n \n     def test_invalid_content(self):\n \n         # WARNING: if you're using a terrible DNS provider (comcast),\n         # this will fail.\n-        r = requests.get('http://somedomainthatclearlydoesntexistg.com', allow_redirects=False)\n+        try:\n+            hah = 'http://somedomainthatclearlydoesntexistg.com'\n+            r = requests.get(hah, allow_redirects=False)\n+        except requests.ConnectionError:\n+            pass   # \\o/\n+        else:\n+            assert False\n \n+\n+        config = {'safe_mode': True}\n+        r = requests.get(hah, allow_redirects=False, config=config)\n         assert r.content == None\n \n \n \n+\n+\n if __name__ == '__main__':\n     unittest.main()\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#35ed9b5f38ea9fa210658d555dbb8e1a71fb66d8", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 9 | Lines Deleted: 7 | Files Changed: 1 | Hunks: 7 | Methods Changed: 4 | Complexity Δ (Sum/Max): 5/5 | Churn Δ: 16 | Churn Cumulative: 3625 | Contributors (this commit): 21 | Commits (past 90d): 130 | Contributors (cumulative): 21 | DMM Complexity: 0.0\n\nDIFF:\n@@ -61,7 +61,7 @@ class Request(object):\n         self.url = url\n \n         #: Dictionary of HTTP Headers to attach to the :class:`Request <Request>`.\n-        self.headers = headers\n+        self.headers = dict(headers or [])\n \n         #: Dictionary of files to multipart upload (``{filename: content}``).\n         self.files = files\n@@ -85,7 +85,7 @@ class Request(object):\n         self.allow_redirects = allow_redirects\n \n         # Dictionary mapping protocol to the URL of the proxy (e.g. {'http': 'foo.bar:3128'})\n-        self.proxies = proxies\n+        self.proxies = dict(proxies or [])\n \n         self.data, self._enc_data = self._encode_params(data)\n         self.params, self._enc_params = self._encode_params(params)\n@@ -99,10 +99,10 @@ class Request(object):\n         self.auth = auth_dispatch(auth)\n \n         #: CookieJar to attach to :class:`Request <Request>`.\n-        self.cookies = cookies\n+        self.cookies = dict(cookies or [])\n \n         #: Dictionary of configurations for this request.\n-        self.config = config\n+        self.config = dict(config or [])\n \n         #: True if Request has been sent.\n         self.sent = False\n@@ -144,6 +144,8 @@ class Request(object):\n             # Pass settings over.\n             response.config = self.config\n \n+            if resp:\n+\n                 # Fallback to None if there's no staus_code, for whatever reason.\n                 response.status_code = getattr(resp, 'status', None)\n \n@@ -383,10 +385,10 @@ class Request(object):\n                     retries=self.config.get('max_retries', 0)\n                 )\n             except MaxRetryError, e:\n-                if self.config.get('safe_mode', False):\n-                    pass\n+                if not self.config.get('safe_mode', False):\n                     raise ConnectionError(e)\n-\n+                else:\n+                    r = None\n \n             self._build_response(r)\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#99f0ef47668b7a8a62f1b64d064c89a149cf105f", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 1 | Churn Cumulative: 68 | Contributors (this commit): 1 | Commits (past 90d): 8 | Contributors (cumulative): 1 | DMM Complexity: None\n\nDIFF:\n@@ -39,3 +39,4 @@ defaults['timeout_fallback'] = True\n defaults['pool_connections'] = 10\n defaults['pool_maxsize'] = 1\n defaults['max_retries'] = 0\n+defaults['safe_mode'] = False\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#147c24154e4315750f7513ca387f4b843bcc85d2", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 2 | Methods Changed: 2 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 3 | Churn Cumulative: 3628 | Contributors (this commit): 21 | Commits (past 90d): 131 | Contributors (cumulative): 21 | DMM Complexity: 0.0\n\nDIFF:\n@@ -76,6 +76,7 @@ class Request(object):\n         #: Dictionary or byte of querystring data to attach to the\n         #: :class:`Request <Request>`.\n         self.params = None\n+        self.params = dict(params or [])\n \n         #: True if :class:`Request <Request>` is part of a redirect chain (disables history\n         #: and HTTPError storage).\n@@ -440,7 +441,7 @@ class Response(object):\n         self.request = None\n \n         #: A dictionary of Cookies the server sent back.\n-        self.cookies = None\n+        self.cookies = {}\n \n         #: Dictionary of configurations for this request.\n         self.config = None\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#7192b8022e6273c60de2b94d6e03015eaefd5c75", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 3 | Lines Deleted: 3 | Files Changed: 2 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 6 | Churn Cumulative: 3837 | Contributors (this commit): 22 | Commits (past 90d): 149 | Contributors (cumulative): 24 | DMM Complexity: None\n\nDIFF:\n@@ -28,6 +28,6 @@ from .api import request, get, head, post, patch, put, delete\n from .sessions import session\n from .status_codes import codes\n from .exceptions import (\n-    RequestException, AuthenticationError, Timeout, URLRequired,\n-    TooManyRedirects, HTTPError\n+    RequestException, Timeout, URLRequired,\n+    TooManyRedirects, HTTPError, ConnectionError\n )\n\n@@ -444,7 +444,7 @@ class Response(object):\n         self.cookies = {}\n \n         #: Dictionary of configurations for this request.\n-        self.config = None\n+        self.config = {}\n \n \n     def __repr__(self):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#0c4b973dcf74a3c2fe0c3123e7d4637d8ccea481", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 10 | Lines Deleted: 5 | Files Changed: 3 | Hunks: 8 | Methods Changed: 2 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 15 | Churn Cumulative: 5082 | Contributors (this commit): 27 | Commits (past 90d): 176 | Contributors (cumulative): 37 | DMM Complexity: 0.2\n\nDIFF:\n@@ -35,7 +35,7 @@ defaults['timeout'] = None\n defaults['max_redirects'] = 30\n defaults['decode_unicode'] = True\n defaults['timeout_fallback'] = True\n-# defaults['keep_alive'] = True\n+defaults['keep_alive'] = True\n defaults['pool_connections'] = 10\n defaults['pool_maxsize'] = 1\n defaults['max_retries'] = 0\n\n@@ -20,6 +20,7 @@ from .hooks import dispatch_hook\n from .structures import CaseInsensitiveDict\n from .status_codes import codes\n from .packages.urllib3.exceptions import MaxRetryError\n+from .packages.urllib3 import connectionpool\n from .exceptions import (\n     Timeout, URLRequired, TooManyRedirects, HTTPError, ConnectionError)\n from .utils import (\n@@ -352,7 +353,11 @@ class Request(object):\n             self.__dict__.update(r.__dict__)\n \n \n+        if self.config.get('keep_alive'):\n             conn = self._poolmanager.connection_from_url(url)\n+        else:\n+            conn = connectionpool.connection_from_url(url)\n+            print 'NO CONNECTION FOR YOU1'\n \n         if not self.sent or anyway:\n \n@@ -373,7 +378,7 @@ class Request(object):\n                     self.headers['Cookie'] = cookie_header\n \n             try:\n-                # Create the connection.\n+                # Send the request.\n                 r = conn.urlopen(\n                     method=self.method,\n                     url=url,\n@@ -385,6 +390,7 @@ class Request(object):\n                     decode_content=False,\n                     retries=self.config.get('max_retries', 0)\n                 )\n+\n             except MaxRetryError, e:\n                 if not self.config.get('safe_mode', False):\n                     raise ConnectionError(e)\n\n@@ -57,6 +57,8 @@ class RequestsTestSuite(unittest.TestCase):\n     def tearDown(self):\n         \"\"\"Teardown.\"\"\"\n         # self.httpbin.kill()\n+        pass\n+\n \n     def test_entry_points(self):\n \n@@ -551,8 +553,5 @@ class RequestsTestSuite(unittest.TestCase):\n         assert r.content == None\n \n \n-\n-\n-\n if __name__ == '__main__':\n     unittest.main()\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#52a95cb93ab8b6c2c32398bd440fd9434232a13a", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 22 | Lines Deleted: 5 | Files Changed: 1 | Hunks: 13 | Methods Changed: 2 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 27 | Churn Cumulative: 3665 | Contributors (this commit): 21 | Commits (past 90d): 134 | Contributors (cumulative): 21 | DMM Complexity: 0.0\n\nDIFF:\n@@ -184,6 +184,8 @@ class Request(object):\n         history = []\n \n         r = build(resp)\n+        cookies = self.cookies\n+        self.cookies.update(r.cookies)\n \n         if r.status_code in REDIRECT_STATI and not self.redirect:\n \n@@ -215,26 +217,40 @@ class Request(object):\n                 else:\n                     method = self.method\n \n+                # Remove the cookie headers that were sent.\n+                headers = self.headers\n+                try:\n+                    del headers['Cookie']\n+                except KeyError:\n+                    pass\n+\n                 request = Request(\n                     url=url,\n-                    headers=self.headers,\n+                    headers=headers,\n                     files=self.files,\n                     method=method,\n-                    # data=self.data,\n                     # params=self.params,\n                     auth=self._auth,\n-                    cookies=self.cookies,\n+                    cookies=cookies,\n                     redirect=True,\n                     config=self.config,\n                     _poolmanager=self._poolmanager\n                 )\n+\n                 request.send()\n+                cookies.update(request.response.cookies)\n                 r = request.response\n+                self.cookies.update(r.cookies)\n \n             r.history = history\n \n         self.response = r\n         self.response.request = self\n+        # print locals()\n+        self.response.cookies.update(self.cookies)\n+        # print cookies\n+        # print self.response.cookies\n+        # print '!!!'\n \n \n     @staticmethod\n@@ -348,16 +364,17 @@ class Request(object):\n         if self.auth:\n             auth_func, auth_args = self.auth\n \n+            # Allow auth to make its changes.\n             r = auth_func(self, *auth_args)\n \n+            # Update self to reflect the auth changes.\n             self.__dict__.update(r.__dict__)\n \n-\n+        # Check to see if keep_alive is allowed.\n         if self.config.get('keep_alive'):\n             conn = self._poolmanager.connection_from_url(url)\n         else:\n             conn = connectionpool.connection_from_url(url)\n-            print 'NO CONNECTION FOR YOU1'\n \n         if not self.sent or anyway:\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#7a1a40e4455c3ee07bc0860b5e11a43ee2ec7c6e", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 14 | Lines Deleted: 16 | Files Changed: 2 | Hunks: 6 | Methods Changed: 3 | Complexity Δ (Sum/Max): -1/0 | Churn Δ: 30 | Churn Cumulative: 5069 | Contributors (this commit): 27 | Commits (past 90d): 170 | Contributors (cumulative): 36 | DMM Complexity: 1.0\n\nDIFF:\n@@ -246,11 +246,7 @@ class Request(object):\n \n         self.response = r\n         self.response.request = self\n-        # print locals()\n         self.response.cookies.update(self.cookies)\n-        # print cookies\n-        # print self.response.cookies\n-        # print '!!!'\n \n \n     @staticmethod\n\n@@ -490,11 +490,24 @@ class RequestsTestSuite(unittest.TestCase):\n         del _c['bessie']\n         assert c == _c\n \n-\n+        # Test session-level cookies.\n         s = requests.session(cookies=_c)\n+        r = s.get(httpbin('cookies'))\n         c = json.loads(r.content).get('cookies')\n         assert c == _c\n \n+        # Have the server set a cookie.\n+        r = s.get(httpbin('cookies', 'set', 'k', 'v'), allow_redirects=True)\n+        c = json.loads(r.content).get('cookies')\n+\n+        assert 'k' in c\n+\n+        # And server-set cookie persistience.\n+        r = s.get(httpbin('cookies'))\n+        c = json.loads(r.content).get('cookies')\n+\n+        assert 'k' in c\n+\n \n \n     def test_session_persistent_params(self):\n@@ -524,17 +537,6 @@ class RequestsTestSuite(unittest.TestCase):\n         assert params3['b'] in r3.content\n         assert params3['c'] in r3.content\n \n-\n-    def test_cookies(self):\n-\n-        s = requests.session()\n-        r = s.get(httpbin('cookies', 'set', 'face', 'book'))\n-        # print r.headers\n-        # print r.history[0].cookies\n-        # print r.content\n-        # print r.url\n-\n-\n     def test_invalid_content(self):\n \n         # WARNING: if you're using a terrible DNS provider (comcast),\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#2131ba4dda0197b5795096b703fee3d0980b9c42", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 0 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 3671 | Contributors (this commit): 21 | Commits (past 90d): 136 | Contributors (cumulative): 21 | DMM Complexity: None\n\nDIFF:\n@@ -350,8 +350,6 @@ class Request(object):\n                 body = self._enc_data\n                 content_type = 'application/x-www-form-urlencoded'\n \n-        # TODO: Setup cookies.\n-\n         # Add content-type if it wasn't explicitly provided.\n         if (content_type) and (not 'content-type' in self.headers):\n             self.headers['Content-Type'] = content_type\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#e725f30625563e32a1a8f31438d2820baaa83c28", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 19 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 9 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 21 | Churn Cumulative: 91 | Contributors (this commit): 1 | Commits (past 90d): 10 | Contributors (cumulative): 1 | DMM Complexity: None\n\nDIFF:\n@@ -29,14 +29,31 @@ defaults['base_headers'] = {\n     'Accept': '*/*'\n }\n \n-defaults['proxies'] = {}\n+\n+#: Stream to log requests to.\n defaults['verbose'] = None\n+\n+#: Seconds until timeout.\n defaults['timeout'] = None\n+\n+#: Maximum number of redirects allowed within a request.\n defaults['max_redirects'] = 30\n+\n+#: Should Requests decode unicode?\n defaults['decode_unicode'] = True\n-defaults['timeout_fallback'] = True\n+\n+#: Reuse HTTP Connections?\n defaults['keep_alive'] = True\n+\n+#: The number of active HTTP connection pools to use at a time.\n defaults['pool_connections'] = 10\n+\n+#: The maximium size of an HTTP connection pool.\n defaults['pool_maxsize'] = 1\n+\n+#: The number of times a request should be retried in the event of a\n+#: connection failure.\n defaults['max_retries'] = 0\n+\n+#: If true, Requests will catch all errors.\n defaults['safe_mode'] = False\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#ce42b338f4a1ddcb52c7b7624a43163ebe9d527a", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 11 | Lines Deleted: 27 | Files Changed: 1 | Hunks: 11 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 38 | Churn Cumulative: 129 | Contributors (this commit): 1 | Commits (past 90d): 11 | Contributors (cumulative): 1 | DMM Complexity: None\n\nDIFF:\n@@ -6,15 +6,18 @@ requests.defaults\n \n This module provides the Requests configuration defaults.\n \n-settings parameters:\n+Configurations:\n \n-- :base_headers: - Sets default User-Agent to `python-requests.org`\n-- :accept_gzip:  - Whether or not to accept gzip-compressed data\n-- :proxies: - http proxies?\n-- :verbose: - display verbose information?\n-- :timeout: - timeout time until request terminates\n-- :max_redirects: - maximum number of allowed redirects?\n-- :decode_unicode: - whether or not to accept unicode?\n+:base_headers: Default HTTP headers.\n+:verbose: Stream to write request logging to.\n+:timeout: Seconds until request timeout.\n+:max_redirects: Maximum njumber of redirects allowed within a request.\n+:decode_unicode: Decode unicode responses automatically?\n+:keep_alive: Reuse HTTP Connections?\n+:max_retries: The number of times a request should be retried in the event of a connection failure.\n+:safe_mode: If true, Requests will catch all errors.\n+:pool_maxsize: The maximium size of an HTTP connection pool.\n+:pool_connections: The number of active HTTP connection pools to use.\n \n \"\"\"\n \n@@ -29,31 +32,12 @@ defaults['base_headers'] = {\n     'Accept': '*/*'\n }\n \n-\n-#: Stream to log requests to.\n defaults['verbose'] = None\n-\n-#: Seconds until timeout.\n defaults['timeout'] = None\n-\n-#: Maximum number of redirects allowed within a request.\n defaults['max_redirects'] = 30\n-\n-#: Should Requests decode unicode?\n defaults['decode_unicode'] = True\n-\n-#: Reuse HTTP Connections?\n defaults['keep_alive'] = True\n-\n-#: The number of active HTTP connection pools to use at a time.\n defaults['pool_connections'] = 10\n-\n-#: The maximium size of an HTTP connection pool.\n defaults['pool_maxsize'] = 1\n-\n-#: The number of times a request should be retried in the event of a\n-#: connection failure.\n defaults['max_retries'] = 0\n-\n-#: If true, Requests will catch all errors.\n defaults['safe_mode'] = False\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#f7257eada6ed60e5a09eb09487f3a71ee982f015", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 209 | Contributors (this commit): 3 | Commits (past 90d): 18 | Contributors (cumulative): 3 | DMM Complexity: None\n\nDIFF:\n@@ -25,7 +25,7 @@ __copyright__ = 'Copyright 2011 Kenneth Reitz'\n from . import utils\n from .models import Request, Response\n from .api import request, get, head, post, patch, put, delete\n-from .sessions import session\n+from .sessions import session, Session\n from .status_codes import codes\n from .exceptions import (\n     RequestException, Timeout, URLRequired,\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#bd45bc716ac7cb7d7c0be369c655976d11d46cf0", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 8 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 3 | Methods Changed: 2 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 10 | Churn Cumulative: 3681 | Contributors (this commit): 21 | Commits (past 90d): 137 | Contributors (cumulative): 21 | DMM Complexity: 0.0\n\nDIFF:\n@@ -304,7 +304,7 @@ class Request(object):\n             return self.url\n \n \n-    def send(self, anyway=False):\n+    def send(self, anyway=False, prefetch=False):\n         \"\"\"Sends the request. Returns True of successful, false if not.\n         If there was an HTTPError during transmission,\n         self.response.status_code will contain the HTTPError code.\n@@ -364,6 +364,12 @@ class Request(object):\n             # Update self to reflect the auth changes.\n             self.__dict__.update(r.__dict__)\n \n+        _p = urlparse(url)\n+        proxy = self.proxies.get(_p.scheme)\n+\n+        if proxy:\n+            conn = connectionpool.proxy_from_url()\n+        else:\n             # Check to see if keep_alive is allowed.\n             if self.config.get('keep_alive'):\n                 conn = self._poolmanager.connection_from_url(url)\n@@ -397,7 +403,7 @@ class Request(object):\n                     headers=self.headers,\n                     redirect=False,\n                     assert_same_host=False,\n-                    preload_content=False,\n+                    preload_content=prefetch,\n                     decode_content=False,\n                     retries=self.config.get('max_retries', 0)\n                 )\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#0c4342a3a67834ce99ad73a7f3a6a0fe1780b19b", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 6 | Lines Deleted: 3 | Files Changed: 2 | Hunks: 5 | Methods Changed: 4 | Complexity Δ (Sum/Max): -1/0 | Churn Δ: 9 | Churn Cumulative: 1562 | Contributors (this commit): 12 | Commits (past 90d): 88 | Contributors (cumulative): 15 | DMM Complexity: 0.5\n\nDIFF:\n@@ -28,6 +28,7 @@ def request(method, url,\n     proxies=None,\n     hooks=None,\n     return_response=True,\n+    prefetch=False,\n     config=None):\n     \"\"\"Constructs and sends a :class:`Request <Request>`.\n     Returns :class:`Response <Response>` object.\n@@ -51,7 +52,7 @@ def request(method, url,\n     return s.request(\n         method, url, params, data, headers, cookies, files, auth,\n         timeout, allow_redirects, proxies, hooks, return_response,\n-        config\n+        config, prefetch\n     )\n \n \n\n@@ -112,7 +112,8 @@ class Session(object):\n         proxies=None,\n         hooks=None,\n         return_response=True,\n-        config=None):\n+        config=None,\n+        prefetch=False):\n \n         \"\"\"Constructs and sends a :class:`Request <Request>`.\n         Returns :class:`Response <Response>` object.\n@@ -130,6 +131,7 @@ class Session(object):\n         :param proxies: (optional) Dictionary mapping protocol to the URL of the proxy.\n         :param return_response: (optional) If False, an un-sent Request object will returned.\n         :param config: (optional) A configuration dictionary.\n+        :param prefetch: (optional) if ``True``, the response content will be immediately downloaded.\n         \"\"\"\n \n         method = str(method).upper()\n@@ -177,7 +179,7 @@ class Session(object):\n             return r\n \n         # Send the HTTP Request.\n-        r.send()\n+        r.send(prefetch=prefetch)\n \n         # Send any cookies back up the to the session.\n         self.cookies.update(r.response.cookies)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#87239802c143b2aeb935d738f6b3e2a1ad856be7", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 3685 | Contributors (this commit): 21 | Commits (past 90d): 138 | Contributors (cumulative): 21 | DMM Complexity: None\n\nDIFF:\n@@ -20,7 +20,7 @@ from .hooks import dispatch_hook\n from .structures import CaseInsensitiveDict\n from .status_codes import codes\n from .packages.urllib3.exceptions import MaxRetryError\n-from .packages.urllib3 import connectionpool\n+from .packages.urllib3 import connectionpool, poolmanager\n from .exceptions import (\n     Timeout, URLRequired, TooManyRedirects, HTTPError, ConnectionError)\n from .utils import (\n@@ -368,7 +368,7 @@ class Request(object):\n         proxy = self.proxies.get(_p.scheme)\n \n         if proxy:\n-            conn = connectionpool.proxy_from_url()\n+            conn = poolmanager.proxy_from_url(url)\n         else:\n             # Check to see if keep_alive is allowed.\n             if self.config.get('keep_alive'):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#2999c71e468a589595c4dfd01f8167f544dbe111", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 2 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 1 | Churn Cumulative: 390 | Contributors (this commit): 5 | Commits (past 90d): 16 | Contributors (cumulative): 5 | DMM Complexity: 1.0\n\nDIFF:\n@@ -34,6 +34,7 @@ def patched(f):\n     def wrapped(*args, **kwargs):\n \n         kwargs['return_response'] = False\n+        kwargs['prefetch'] = True\n \n         return f(*args, **kwargs)\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#d1b6db05a4aa48e10f08015889da0dfb20f4dc4c", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 4 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 4 | Churn Cumulative: 3689 | Contributors (this commit): 21 | Commits (past 90d): 139 | Contributors (cumulative): 21 | DMM Complexity: 0.0\n\nDIFF:\n@@ -423,6 +423,10 @@ class Request(object):\n             r = dispatch_hook('post_request', self.hooks, self)\n             self.__dict__.update(r.__dict__)\n \n+            # If prefetch is True, mark content as consumed.\n+            if prefetch:\n+                self.response._content_consumed = True\n+\n             return self.sent\n \n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#1588ad7c469b61cbfc8185e3d7326dff79afa81e", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 0 | Lines Deleted: 647 | Files Changed: 3 | Hunks: 3 | Methods Changed: 28 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 647 | Churn Cumulative: 1959 | Contributors (this commit): 2 | Commits (past 90d): 6 | Contributors (cumulative): 4 | DMM Complexity: 0.5513698630136986\n\nDIFF:\n@@ -1,34 +0,0 @@\n-# Copyright (c) 2010 Chris AtLee\n-# \n-# Permission is hereby granted, free of charge, to any person obtaining a copy\n-# of this software and associated documentation files (the \"Software\"), to deal\n-# in the Software without restriction, including without limitation the rights\n-# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n-# copies of the Software, and to permit persons to whom the Software is\n-# furnished to do so, subject to the following conditions:\n-# \n-# The above copyright notice and this permission notice shall be included in\n-# all copies or substantial portions of the Software.\n-# \n-# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n-# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n-# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n-# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n-# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n-# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n-# THE SOFTWARE.\n-\"\"\"poster module\n-\n-Support for streaming HTTP uploads, and multipart/form-data encoding\n-\n-```poster.version``` is a 3-tuple of integers representing the version number.\n-New releases of poster will always have a version number that compares greater\n-than an older version of poster.\n-New in version 0.6.\"\"\"\n-\n-from __future__ import absolute_import\n-\n-from . import streaminghttp\n-from . import encode\n-\n-version = (0, 8, 0) # Thanks JP!\n\n@@ -1,414 +0,0 @@\n-\"\"\"multipart/form-data encoding module\n-\n-This module provides functions that faciliate encoding name/value pairs\n-as multipart/form-data suitable for a HTTP POST or PUT request.\n-\n-multipart/form-data is the standard way to upload files over HTTP\"\"\"\n-\n-__all__ = ['gen_boundary', 'encode_and_quote', 'MultipartParam',\n-        'encode_string', 'encode_file_header', 'get_body_size', 'get_headers',\n-        'multipart_encode']\n-\n-try:\n-    import uuid\n-    def gen_boundary():\n-        \"\"\"Returns a random string to use as the boundary for a message\"\"\"\n-        return uuid.uuid4().hex\n-except ImportError:\n-    import random, sha\n-    def gen_boundary():\n-        \"\"\"Returns a random string to use as the boundary for a message\"\"\"\n-        bits = random.getrandbits(160)\n-        return sha.new(str(bits)).hexdigest()\n-\n-import urllib, re, os, mimetypes\n-try:\n-    from email.header import Header\n-except ImportError:\n-    # Python 2.4\n-    from email.Header import Header\n-\n-def encode_and_quote(data):\n-    \"\"\"If ``data`` is unicode, return urllib.quote_plus(data.encode(\"utf-8\"))\n-    otherwise return urllib.quote_plus(data)\"\"\"\n-    if data is None:\n-        return None\n-\n-    if isinstance(data, unicode):\n-        data = data.encode(\"utf-8\")\n-    return urllib.quote_plus(data)\n-\n-def _strify(s):\n-    \"\"\"If s is a unicode string, encode it to UTF-8 and return the results,\n-    otherwise return str(s), or None if s is None\"\"\"\n-    if s is None:\n-        return None\n-    if isinstance(s, unicode):\n-        return s.encode(\"utf-8\")\n-    return str(s)\n-\n-class MultipartParam(object):\n-    \"\"\"Represents a single parameter in a multipart/form-data request\n-\n-    ``name`` is the name of this parameter.\n-\n-    If ``value`` is set, it must be a string or unicode object to use as the\n-    data for this parameter.\n-\n-    If ``filename`` is set, it is what to say that this parameter's filename\n-    is.  Note that this does not have to be the actual filename any local file.\n-\n-    If ``filetype`` is set, it is used as the Content-Type for this parameter.\n-    If unset it defaults to \"text/plain; charset=utf8\"\n-\n-    If ``filesize`` is set, it specifies the length of the file ``fileobj``\n-\n-    If ``fileobj`` is set, it must be a file-like object that supports\n-    .read().\n-\n-    Both ``value`` and ``fileobj`` must not be set, doing so will\n-    raise a ValueError assertion.\n-\n-    If ``fileobj`` is set, and ``filesize`` is not specified, then\n-    the file's size will be determined first by stat'ing ``fileobj``'s\n-    file descriptor, and if that fails, by seeking to the end of the file,\n-    recording the current position as the size, and then by seeking back to the\n-    beginning of the file.\n-\n-    ``cb`` is a callable which will be called from iter_encode with (self,\n-    current, total), representing the current parameter, current amount\n-    transferred, and the total size.\n-    \"\"\"\n-    def __init__(self, name, value=None, filename=None, filetype=None,\n-                        filesize=None, fileobj=None, cb=None):\n-        self.name = Header(name).encode()\n-        self.value = _strify(value)\n-        if filename is None:\n-            self.filename = None\n-        else:\n-            if isinstance(filename, unicode):\n-                # Encode with XML entities\n-                self.filename = filename.encode(\"ascii\", \"xmlcharrefreplace\")\n-            else:\n-                self.filename = str(filename)\n-            self.filename = self.filename.encode(\"string_escape\").\\\n-                    replace('\"', '\\\\\"')\n-        self.filetype = _strify(filetype)\n-\n-        self.filesize = filesize\n-        self.fileobj = fileobj\n-        self.cb = cb\n-\n-        if self.value is not None and self.fileobj is not None:\n-            raise ValueError(\"Only one of value or fileobj may be specified\")\n-\n-        if fileobj is not None and filesize is None:\n-            # Try and determine the file size\n-            try:\n-                self.filesize = os.fstat(fileobj.fileno()).st_size\n-            except (OSError, AttributeError):\n-                try:\n-                    fileobj.seek(0, 2)\n-                    self.filesize = fileobj.tell()\n-                    fileobj.seek(0)\n-                except:\n-                    raise ValueError(\"Could not determine filesize\")\n-\n-    def __cmp__(self, other):\n-        attrs = ['name', 'value', 'filename', 'filetype', 'filesize', 'fileobj']\n-        myattrs = [getattr(self, a) for a in attrs]\n-        oattrs = [getattr(other, a) for a in attrs]\n-        return cmp(myattrs, oattrs)\n-\n-    def reset(self):\n-        if self.fileobj is not None:\n-            self.fileobj.seek(0)\n-        elif self.value is None:\n-            raise ValueError(\"Don't know how to reset this parameter\")\n-\n-    @classmethod\n-    def from_file(cls, paramname, filename):\n-        \"\"\"Returns a new MultipartParam object constructed from the local\n-        file at ``filename``.\n-\n-        ``filesize`` is determined by os.path.getsize(``filename``)\n-\n-        ``filetype`` is determined by mimetypes.guess_type(``filename``)[0]\n-\n-        ``filename`` is set to os.path.basename(``filename``)\n-        \"\"\"\n-\n-        return cls(paramname, filename=os.path.basename(filename),\n-                filetype=mimetypes.guess_type(filename)[0],\n-                filesize=os.path.getsize(filename),\n-                fileobj=open(filename, \"rb\"))\n-\n-    @classmethod\n-    def from_params(cls, params):\n-        \"\"\"Returns a list of MultipartParam objects from a sequence of\n-        name, value pairs, MultipartParam instances,\n-        or from a mapping of names to values\n-\n-        The values may be strings or file objects, or MultipartParam objects.\n-        MultipartParam object names must match the given names in the\n-        name,value pairs or mapping, if applicable.\"\"\"\n-        if hasattr(params, 'items'):\n-            params = params.items()\n-\n-        retval = []\n-        for item in params:\n-            if isinstance(item, cls):\n-                retval.append(item)\n-                continue\n-            name, value = item\n-            if isinstance(value, cls):\n-                assert value.name == name\n-                retval.append(value)\n-                continue\n-            if hasattr(value, 'read'):\n-                # Looks like a file object\n-                filename = getattr(value, 'name', None)\n-                if filename is not None:\n-                    filetype = mimetypes.guess_type(filename)[0]\n-                else:\n-                    filetype = None\n-\n-                retval.append(cls(name=name, filename=filename,\n-                    filetype=filetype, fileobj=value))\n-            else:\n-                retval.append(cls(name, value))\n-        return retval\n-\n-    def encode_hdr(self, boundary):\n-        \"\"\"Returns the header of the encoding of this parameter\"\"\"\n-        boundary = encode_and_quote(boundary)\n-\n-        headers = [\"--%s\" % boundary]\n-\n-        if self.filename:\n-            disposition = 'form-data; name=\"%s\"; filename=\"%s\"' % (self.name,\n-                    self.filename)\n-        else:\n-            disposition = 'form-data; name=\"%s\"' % self.name\n-\n-        headers.append(\"Content-Disposition: %s\" % disposition)\n-\n-        if self.filetype:\n-            filetype = self.filetype\n-        else:\n-            filetype = \"text/plain; charset=utf-8\"\n-\n-        headers.append(\"Content-Type: %s\" % filetype)\n-\n-        headers.append(\"\")\n-        headers.append(\"\")\n-\n-        return \"\\r\\n\".join(headers)\n-\n-    def encode(self, boundary):\n-        \"\"\"Returns the string encoding of this parameter\"\"\"\n-        if self.value is None:\n-            value = self.fileobj.read()\n-        else:\n-            value = self.value\n-\n-        if re.search(\"^--%s$\" % re.escape(boundary), value, re.M):\n-            raise ValueError(\"boundary found in encoded string\")\n-\n-        return \"%s%s\\r\\n\" % (self.encode_hdr(boundary), value)\n-\n-    def iter_encode(self, boundary, blocksize=4096):\n-        \"\"\"Yields the encoding of this parameter\n-        If self.fileobj is set, then blocks of ``blocksize`` bytes are read and\n-        yielded.\"\"\"\n-        total = self.get_size(boundary)\n-        current = 0\n-        if self.value is not None:\n-            block = self.encode(boundary)\n-            current += len(block)\n-            yield block\n-            if self.cb:\n-                self.cb(self, current, total)\n-        else:\n-            block = self.encode_hdr(boundary)\n-            current += len(block)\n-            yield block\n-            if self.cb:\n-                self.cb(self, current, total)\n-            last_block = \"\"\n-            encoded_boundary = \"--%s\" % encode_and_quote(boundary)\n-            boundary_exp = re.compile(\"^%s$\" % re.escape(encoded_boundary),\n-                    re.M)\n-            while True:\n-                block = self.fileobj.read(blocksize)\n-                if not block:\n-                    current += 2\n-                    yield \"\\r\\n\"\n-                    if self.cb:\n-                        self.cb(self, current, total)\n-                    break\n-                last_block += block\n-                if boundary_exp.search(last_block):\n-                    raise ValueError(\"boundary found in file data\")\n-                last_block = last_block[-len(encoded_boundary)-2:]\n-                current += len(block)\n-                yield block\n-                if self.cb:\n-                    self.cb(self, current, total)\n-\n-    def get_size(self, boundary):\n-        \"\"\"Returns the size in bytes that this param will be when encoded\n-        with the given boundary.\"\"\"\n-        if self.filesize is not None:\n-            valuesize = self.filesize\n-        else:\n-            valuesize = len(self.value)\n-\n-        return len(self.encode_hdr(boundary)) + 2 + valuesize\n-\n-def encode_string(boundary, name, value):\n-    \"\"\"Returns ``name`` and ``value`` encoded as a multipart/form-data\n-    variable.  ``boundary`` is the boundary string used throughout\n-    a single request to separate variables.\"\"\"\n-\n-    return MultipartParam(name, value).encode(boundary)\n-\n-def encode_file_header(boundary, paramname, filesize, filename=None,\n-        filetype=None):\n-    \"\"\"Returns the leading data for a multipart/form-data field that contains\n-    file data.\n-\n-    ``boundary`` is the boundary string used throughout a single request to\n-    separate variables.\n-\n-    ``paramname`` is the name of the variable in this request.\n-\n-    ``filesize`` is the size of the file data.\n-\n-    ``filename`` if specified is the filename to give to this field.  This\n-    field is only useful to the server for determining the original filename.\n-\n-    ``filetype`` if specified is the MIME type of this file.\n-\n-    The actual file data should be sent after this header has been sent.\n-    \"\"\"\n-\n-    return MultipartParam(paramname, filesize=filesize, filename=filename,\n-            filetype=filetype).encode_hdr(boundary)\n-\n-def get_body_size(params, boundary):\n-    \"\"\"Returns the number of bytes that the multipart/form-data encoding\n-    of ``params`` will be.\"\"\"\n-    size = sum(p.get_size(boundary) for p in MultipartParam.from_params(params))\n-    return size + len(boundary) + 6\n-\n-def get_headers(params, boundary):\n-    \"\"\"Returns a dictionary with Content-Type and Content-Length headers\n-    for the multipart/form-data encoding of ``params``.\"\"\"\n-    headers = {}\n-    boundary = urllib.quote_plus(boundary)\n-    headers['Content-Type'] = \"multipart/form-data; boundary=%s\" % boundary\n-    headers['Content-Length'] = str(get_body_size(params, boundary))\n-    return headers\n-\n-class multipart_yielder:\n-    def __init__(self, params, boundary, cb):\n-        self.params = params\n-        self.boundary = boundary\n-        self.cb = cb\n-\n-        self.i = 0\n-        self.p = None\n-        self.param_iter = None\n-        self.current = 0\n-        self.total = get_body_size(params, boundary)\n-\n-    def __iter__(self):\n-        return self\n-\n-    def next(self):\n-        \"\"\"generator function to yield multipart/form-data representation\n-        of parameters\"\"\"\n-        if self.param_iter is not None:\n-            try:\n-                block = self.param_iter.next()\n-                self.current += len(block)\n-                if self.cb:\n-                    self.cb(self.p, self.current, self.total)\n-                return block\n-            except StopIteration:\n-                self.p = None\n-                self.param_iter = None\n-\n-        if self.i is None:\n-            raise StopIteration\n-        elif self.i >= len(self.params):\n-            self.param_iter = None\n-            self.p = None\n-            self.i = None\n-            block = \"--%s--\\r\\n\" % self.boundary\n-            self.current += len(block)\n-            if self.cb:\n-                self.cb(self.p, self.current, self.total)\n-            return block\n-\n-        self.p = self.params[self.i]\n-        self.param_iter = self.p.iter_encode(self.boundary)\n-        self.i += 1\n-        return self.next()\n-\n-    def reset(self):\n-        self.i = 0\n-        self.current = 0\n-        for param in self.params:\n-            param.reset()\n-\n-def multipart_encode(params, boundary=None, cb=None):\n-    \"\"\"Encode ``params`` as multipart/form-data.\n-\n-    ``params`` should be a sequence of (name, value) pairs or MultipartParam\n-    objects, or a mapping of names to values.\n-    Values are either strings parameter values, or file-like objects to use as\n-    the parameter value.  The file-like objects must support .read() and either\n-    .fileno() or both .seek() and .tell().\n-\n-    If ``boundary`` is set, then it as used as the MIME boundary.  Otherwise\n-    a randomly generated boundary will be used.  In either case, if the\n-    boundary string appears in the parameter values a ValueError will be\n-    raised.\n-\n-    If ``cb`` is set, it should be a callback which will get called as blocks\n-    of data are encoded.  It will be called with (param, current, total),\n-    indicating the current parameter being encoded, the current amount encoded,\n-    and the total amount to encode.\n-\n-    Returns a tuple of `datagen`, `headers`, where `datagen` is a\n-    generator that will yield blocks of data that make up the encoded\n-    parameters, and `headers` is a dictionary with the assoicated\n-    Content-Type and Content-Length headers.\n-\n-    Examples:\n-\n-    >>> datagen, headers = multipart_encode( [(\"key\", \"value1\"), (\"key\", \"value2\")] )\n-    >>> s = \"\".join(datagen)\n-    >>> assert \"value2\" in s and \"value1\" in s\n-\n-    >>> p = MultipartParam(\"key\", \"value2\")\n-    >>> datagen, headers = multipart_encode( [(\"key\", \"value1\"), p] )\n-    >>> s = \"\".join(datagen)\n-    >>> assert \"value2\" in s and \"value1\" in s\n-\n-    >>> datagen, headers = multipart_encode( {\"key\": \"value1\"} )\n-    >>> s = \"\".join(datagen)\n-    >>> assert \"value2\" not in s and \"value1\" in s\n-\n-    \"\"\"\n-    if boundary is None:\n-        boundary = gen_boundary()\n-    else:\n-        boundary = urllib.quote_plus(boundary)\n-\n-    headers = get_headers(params, boundary)\n-    params = MultipartParam.from_params(params)\n-\n-    return multipart_yielder(params, boundary, cb), headers\n\n@@ -1,199 +0,0 @@\n-\"\"\"Streaming HTTP uploads module.\n-\n-This module extends the standard httplib and urllib2 objects so that\n-iterable objects can be used in the body of HTTP requests.\n-\n-In most cases all one should have to do is call :func:`register_openers()`\n-to register the new streaming http handlers which will take priority over\n-the default handlers, and then you can use iterable objects in the body\n-of HTTP requests.\n-\n-**N.B.** You must specify a Content-Length header if using an iterable object\n-since there is no way to determine in advance the total size that will be\n-yielded, and there is no way to reset an interator.\n-\n-Example usage:\n-\n->>> from StringIO import StringIO\n->>> import urllib2, poster.streaminghttp\n-\n->>> opener = poster.streaminghttp.register_openers()\n-\n->>> s = \"Test file data\"\n->>> f = StringIO(s)\n-\n->>> req = urllib2.Request(\"http://localhost:5000\", f,\n-...                       {'Content-Length': str(len(s))})\n-\"\"\"\n-\n-import httplib, urllib2, socket\n-from httplib import NotConnected\n-\n-__all__ = ['StreamingHTTPConnection', 'StreamingHTTPRedirectHandler',\n-        'StreamingHTTPHandler', 'register_openers']\n-\n-if hasattr(httplib, 'HTTPS'):\n-    __all__.extend(['StreamingHTTPSHandler', 'StreamingHTTPSConnection'])\n-\n-class _StreamingHTTPMixin:\n-    \"\"\"Mixin class for HTTP and HTTPS connections that implements a streaming\n-    send method.\"\"\"\n-    def send(self, value):\n-        \"\"\"Send ``value`` to the server.\n-\n-        ``value`` can be a string object, a file-like object that supports\n-        a .read() method, or an iterable object that supports a .next()\n-        method.\n-        \"\"\"\n-        # Based on python 2.6's httplib.HTTPConnection.send()\n-        if self.sock is None:\n-            if self.auto_open:\n-                self.connect()\n-            else:\n-                raise NotConnected()\n-\n-        # send the data to the server. if we get a broken pipe, then close\n-        # the socket. we want to reconnect when somebody tries to send again.\n-        #\n-        # NOTE: we DO propagate the error, though, because we cannot simply\n-        #       ignore the error... the caller will know if they can retry.\n-        if self.debuglevel > 0:\n-            print \"send:\", repr(value)\n-        try:\n-            blocksize = 8192\n-            if hasattr(value, 'read') :\n-                if hasattr(value, 'seek'):\n-                    value.seek(0)\n-                if self.debuglevel > 0:\n-                    print \"sendIng a read()able\"\n-                data = value.read(blocksize)\n-                while data:\n-                    self.sock.sendall(data)\n-                    data = value.read(blocksize)\n-            elif hasattr(value, 'next'):\n-                if hasattr(value, 'reset'):\n-                    value.reset()\n-                if self.debuglevel > 0:\n-                    print \"sendIng an iterable\"\n-                for data in value:\n-                    self.sock.sendall(data)\n-            else:\n-                self.sock.sendall(value)\n-        except socket.error, v:\n-            if v[0] == 32:      # Broken pipe\n-                self.close()\n-            raise\n-\n-class StreamingHTTPConnection(_StreamingHTTPMixin, httplib.HTTPConnection):\n-    \"\"\"Subclass of `httplib.HTTPConnection` that overrides the `send()` method\n-    to support iterable body objects\"\"\"\n-\n-class StreamingHTTPRedirectHandler(urllib2.HTTPRedirectHandler):\n-    \"\"\"Subclass of `urllib2.HTTPRedirectHandler` that overrides the\n-    `redirect_request` method to properly handle redirected POST requests\n-\n-    This class is required because python 2.5's HTTPRedirectHandler does\n-    not remove the Content-Type or Content-Length headers when requesting\n-    the new resource, but the body of the original request is not preserved.\n-    \"\"\"\n-\n-    handler_order = urllib2.HTTPRedirectHandler.handler_order - 1\n-\n-    # From python2.6 urllib2's HTTPRedirectHandler\n-    def redirect_request(self, req, fp, code, msg, headers, newurl):\n-        \"\"\"Return a Request or None in response to a redirect.\n-\n-        This is called by the http_error_30x methods when a\n-        redirection response is received.  If a redirection should\n-        take place, return a new Request to allow http_error_30x to\n-        perform the redirect.  Otherwise, raise HTTPError if no-one\n-        else should try to handle this url.  Return None if you can't\n-        but another Handler might.\n-        \"\"\"\n-        m = req.get_method()\n-        if (code in (301, 302, 303, 307) and m in (\"GET\", \"HEAD\")\n-            or code in (301, 302, 303) and m == \"POST\"):\n-            # Strictly (according to RFC 2616), 301 or 302 in response\n-            # to a POST MUST NOT cause a redirection without confirmation\n-            # from the user (of urllib2, in this case).  In practice,\n-            # essentially all clients do redirect in this case, so we\n-            # do the same.\n-            # be conciliant with URIs containing a space\n-            newurl = newurl.replace(' ', '%20')\n-            newheaders = dict((k, v) for k, v in req.headers.items()\n-                              if k.lower() not in (\n-                                  \"content-length\", \"content-type\")\n-                             )\n-            return urllib2.Request(newurl,\n-                           headers=newheaders,\n-                           origin_req_host=req.get_origin_req_host(),\n-                           unverifiable=True)\n-        else:\n-            raise urllib2.HTTPError(req.get_full_url(), code, msg, headers, fp)\n-\n-class StreamingHTTPHandler(urllib2.HTTPHandler):\n-    \"\"\"Subclass of `urllib2.HTTPHandler` that uses\n-    StreamingHTTPConnection as its http connection class.\"\"\"\n-\n-    handler_order = urllib2.HTTPHandler.handler_order - 1\n-\n-    def http_open(self, req):\n-        \"\"\"Open a StreamingHTTPConnection for the given request\"\"\"\n-        return self.do_open(StreamingHTTPConnection, req)\n-\n-    def http_request(self, req):\n-        \"\"\"Handle a HTTP request.  Make sure that Content-Length is specified\n-        if we're using an interable value\"\"\"\n-        # Make sure that if we're using an iterable object as the request\n-        # body, that we've also specified Content-Length\n-        if req.has_data():\n-            data = req.get_data()\n-            if hasattr(data, 'read') or hasattr(data, 'next'):\n-                if not req.has_header('Content-length'):\n-                    raise ValueError(\n-                            \"No Content-Length specified for iterable body\")\n-        return urllib2.HTTPHandler.do_request_(self, req)\n-\n-if hasattr(httplib, 'HTTPS'):\n-    class StreamingHTTPSConnection(_StreamingHTTPMixin,\n-            httplib.HTTPSConnection):\n-        \"\"\"Subclass of `httplib.HTTSConnection` that overrides the `send()`\n-        method to support iterable body objects\"\"\"\n-\n-    class StreamingHTTPSHandler(urllib2.HTTPSHandler):\n-        \"\"\"Subclass of `urllib2.HTTPSHandler` that uses\n-        StreamingHTTPSConnection as its http connection class.\"\"\"\n-\n-        handler_order = urllib2.HTTPSHandler.handler_order - 1\n-\n-        def https_open(self, req):\n-            return self.do_open(StreamingHTTPSConnection, req)\n-\n-        def https_request(self, req):\n-            # Make sure that if we're using an iterable object as the request\n-            # body, that we've also specified Content-Length\n-            if req.has_data():\n-                data = req.get_data()\n-                if hasattr(data, 'read') or hasattr(data, 'next'):\n-                    if not req.has_header('Content-length'):\n-                        raise ValueError(\n-                                \"No Content-Length specified for iterable body\")\n-            return urllib2.HTTPSHandler.do_request_(self, req)\n-\n-\n-def get_handlers():\n-    handlers = [StreamingHTTPHandler, StreamingHTTPRedirectHandler]\n-    if hasattr(httplib, \"HTTPS\"):\n-        handlers.append(StreamingHTTPSHandler)\n-    return handlers\n-    \n-def register_openers():\n-    \"\"\"Register the streaming http handlers in the global urllib2 default\n-    opener object.\n-\n-    Returns the created OpenerDirector object.\"\"\"\n-    opener = urllib2.build_opener(*get_handlers())\n-\n-    urllib2.install_opener(opener)\n-\n-    return opener\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
