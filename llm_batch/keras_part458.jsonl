{"custom_id": "keras#b8c48898a3f316dda43231a39c21fc4a61aed3b1", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2226 | Lines Deleted: 2251 | Files Changed: 634 | Hunks: 1798 | Methods Changed: 37 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4477 | Churn Cumulative: 494209 | Contributors (this commit): 504 | Commits (past 90d): 2529 | Contributors (cumulative): 4148 | DMM Complexity: 0.29411764705882354\n\nDIFF:\n@@ -19,16 +19,14 @@ Detailed documentation and user guides are available at\n \"\"\"\n # pylint: disable=unused-import\n from tensorflow.python import tf2\n+from tensorflow.python.util.tf_export import keras_export\n+\n from keras import distribute\n-\n from keras import models\n-\n from keras.engine.input_layer import Input\n from keras.engine.sequential import Sequential\n from keras.engine.training import Model\n \n-from tensorflow.python.util.tf_export import keras_export\n-\n __version__ = \"2.10.0\"\n \n keras_export(\"keras.__version__\").export_constant(__name__, \"__version__\")\n\n@@ -17,12 +17,12 @@\n import sys\n \n import tensorflow.compat.v2 as tf\n-\n-from keras import backend\n-import keras.layers.activation as activation_layers\n-from keras.utils import generic_utils\n from tensorflow.python.util.tf_export import keras_export\n \n+import keras.layers.activation as activation_layers\n+from keras import backend\n+from keras.utils import generic_utils\n+\n # b/123041942\n # In TF 2.x, if the `tf.nn.softmax` is used as an activation function in Keras\n # layers, it gets serialized as 'softmax_v2' instead of 'softmax' as the\n\n@@ -14,17 +14,16 @@\n # ==============================================================================\n \"\"\"Tests for Keras activation functions.\"\"\"\n \n-import tensorflow.compat.v2 as tf\n-\n-from absl.testing import parameterized\n import numpy as np\n+import tensorflow.compat.v2 as tf\n+from absl.testing import parameterized\n \n+import keras.layers.activation as activation_layers\n from keras import activations\n from keras import backend\n-from keras.testing_infra import test_combinations\n-import keras.layers.activation as activation_layers\n from keras.layers import core\n from keras.layers import serialization\n+from keras.testing_infra import test_combinations\n \n \n def _ref_softmax(values):\n@@ -228,8 +227,8 @@ class KerasActivationsTest(tf.test.TestCase, parameterized.TestCase):\n                 )\n             else:\n                 from scipy.stats import (\n-                    norm,\n-                )  # pylint: disable=g-import-not-at-top\n+                    norm,  # pylint: disable=g-import-not-at-top\n+                )\n \n                 return x * norm.cdf(x)\n \n\n@@ -23,10 +23,11 @@ from __future__ import absolute_import\n from __future__ import division\n from __future__ import print_function\n \n-import keras  # pylint: disable=unused-import\n from tensorflow.python.tools.api.generator import (\n     create_python_api,\n )\n \n+import keras  # pylint: disable=unused-import\n+\n if __name__ == \"__main__\":\n     create_python_api.main()\n\n@@ -27,18 +27,15 @@ from __future__ import absolute_import\n from __future__ import division\n from __future__ import print_function\n \n-import tensorflow as tf\n-\n import argparse\n import os\n import re\n import sys\n \n import six\n-\n+import tensorflow as tf\n from google.protobuf import message\n from google.protobuf import text_format\n-\n from tensorflow.python.lib.io import file_io\n from tensorflow.python.platform import tf_logging as logging\n from tensorflow.tools.api.lib import api_objects_pb2\n@@ -48,7 +45,6 @@ from tensorflow.tools.api.lib import (\n from tensorflow.tools.common import public_api\n from tensorflow.tools.common import traverse\n \n-\n # FLAGS defined at the bottom:\n FLAGS = None\n # DEFINE_boolean, update_goldens, default False:\n\n@@ -15,16 +15,14 @@\n \"\"\"Keras Applications are premade architectures with pre-trained weights.\"\"\"\n # pylint: disable=g-bad-import-order\n \n-from keras.applications.convnext import ConvNeXtTiny\n-from keras.applications.convnext import ConvNeXtSmall\n from keras.applications.convnext import ConvNeXtBase\n from keras.applications.convnext import ConvNeXtLarge\n+from keras.applications.convnext import ConvNeXtSmall\n+from keras.applications.convnext import ConvNeXtTiny\n from keras.applications.convnext import ConvNeXtXLarge\n-\n from keras.applications.densenet import DenseNet121\n from keras.applications.densenet import DenseNet169\n from keras.applications.densenet import DenseNet201\n-\n from keras.applications.efficientnet import EfficientNetB0\n from keras.applications.efficientnet import EfficientNetB1\n from keras.applications.efficientnet import EfficientNetB2\n@@ -33,7 +31,6 @@ from keras.applications.efficientnet import EfficientNetB4\n from keras.applications.efficientnet import EfficientNetB5\n from keras.applications.efficientnet import EfficientNetB6\n from keras.applications.efficientnet import EfficientNetB7\n-\n from keras.applications.efficientnet_v2 import EfficientNetV2B0\n from keras.applications.efficientnet_v2 import EfficientNetV2B1\n from keras.applications.efficientnet_v2 import EfficientNetV2B2\n@@ -41,25 +38,17 @@ from keras.applications.efficientnet_v2 import EfficientNetV2B3\n from keras.applications.efficientnet_v2 import EfficientNetV2L\n from keras.applications.efficientnet_v2 import EfficientNetV2M\n from keras.applications.efficientnet_v2 import EfficientNetV2S\n-\n from keras.applications.inception_resnet_v2 import InceptionResNetV2\n from keras.applications.inception_v3 import InceptionV3\n-\n from keras.applications.mobilenet import MobileNet\n from keras.applications.mobilenet_v2 import MobileNetV2\n-from keras.applications.mobilenet_v3 import MobileNetV3Small\n from keras.applications.mobilenet_v3 import MobileNetV3Large\n-\n+from keras.applications.mobilenet_v3 import MobileNetV3Small\n from keras.applications.nasnet import NASNetLarge\n from keras.applications.nasnet import NASNetMobile\n-\n from keras.applications.resnet import ResNet50\n from keras.applications.resnet import ResNet101\n from keras.applications.resnet import ResNet152\n-from keras.applications.resnet_v2 import ResNet50V2\n-from keras.applications.resnet_v2 import ResNet101V2\n-from keras.applications.resnet_v2 import ResNet152V2\n-\n from keras.applications.resnet_rs import ResNetRS50\n from keras.applications.resnet_rs import ResNetRS101\n from keras.applications.resnet_rs import ResNetRS152\n@@ -67,8 +56,9 @@ from keras.applications.resnet_rs import ResNetRS200\n from keras.applications.resnet_rs import ResNetRS270\n from keras.applications.resnet_rs import ResNetRS350\n from keras.applications.resnet_rs import ResNetRS420\n-\n+from keras.applications.resnet_v2 import ResNet50V2\n+from keras.applications.resnet_v2 import ResNet101V2\n+from keras.applications.resnet_v2 import ResNet152V2\n from keras.applications.vgg16 import VGG16\n from keras.applications.vgg19 import VGG19\n-\n from keras.applications.xception import Xception\n\n@@ -14,11 +14,10 @@\n # ==============================================================================\n \"\"\"Integration tests for Keras applications.\"\"\"\n \n+import numpy as np\n import tensorflow.compat.v2 as tf\n-\n from absl import flags\n from absl.testing import parameterized\n-import numpy as np\n \n from keras.applications import convnext\n from keras.applications import densenet\n@@ -40,7 +39,6 @@ from keras.applications import xception\n from keras.utils import data_utils\n from keras.utils import image_utils\n \n-\n ARG_TO_MODEL = {\n     \"resnet\": (resnet, [resnet.ResNet50, resnet.ResNet101, resnet.ResNet152]),\n     \"resnet_v2\": (\n\n@@ -14,8 +14,11 @@\n # ==============================================================================\n \"\"\"Integration tests for Keras applications.\"\"\"\n \n+import tensorflow.compat.v2 as tf\n from absl.testing import parameterized\n+\n from keras import backend\n+from keras import utils\n from keras.applications import convnext\n from keras.applications import densenet\n from keras.applications import efficientnet\n@@ -33,8 +36,6 @@ from keras.applications import resnet_v2\n from keras.applications import vgg16\n from keras.applications import vgg19\n from keras.applications import xception\n-from keras import utils\n-import tensorflow.compat.v2 as tf\n \n MODEL_LIST_NO_NASNET = [\n     (resnet.ResNet50, 2048),\n\n@@ -24,16 +24,16 @@ References:\n   (CVPR 2022)\n \"\"\"\n \n+import numpy as np\n+import tensorflow.compat.v2 as tf\n+from tensorflow.python.util.tf_export import keras_export\n+\n from keras import backend\n from keras import layers\n from keras import utils\n from keras.applications import imagenet_utils\n from keras.engine import sequential\n from keras.engine import training as training_lib\n-import numpy as np\n-\n-import tensorflow.compat.v2 as tf\n-from tensorflow.python.util.tf_export import keras_export\n \n BASE_WEIGHTS_PATH = (\n     \"https://storage.googleapis.com/tensorflow/keras-applications/convnext/\"\n\n@@ -21,6 +21,7 @@ Reference:\n \"\"\"\n \n import tensorflow.compat.v2 as tf\n+from tensorflow.python.util.tf_export import keras_export\n \n from keras import backend\n from keras.applications import imagenet_utils\n@@ -28,8 +29,6 @@ from keras.engine import training\n from keras.layers import VersionAwareLayers\n from keras.utils import data_utils\n from keras.utils import layer_utils\n-from tensorflow.python.util.tf_export import keras_export\n-\n \n BASE_WEIGHTS_PATH = (\n     \"https://storage.googleapis.com/tensorflow/\" \"keras-applications/densenet/\"\n\n@@ -24,6 +24,9 @@ Reference:\n import copy\n import math\n \n+import tensorflow.compat.v2 as tf\n+from tensorflow.python.util.tf_export import keras_export\n+\n from keras import backend\n from keras.applications import imagenet_utils\n from keras.engine import training\n@@ -31,11 +34,6 @@ from keras.layers import VersionAwareLayers\n from keras.utils import data_utils\n from keras.utils import layer_utils\n \n-import tensorflow.compat.v2 as tf\n-\n-from tensorflow.python.util.tf_export import keras_export\n-\n-\n BASE_WEIGHTS_PATH = \"https://storage.googleapis.com/keras-applications/\"\n \n WEIGHTS_HASHES = {\n\n@@ -24,15 +24,15 @@ Reference:\n import copy\n import math\n \n+import tensorflow.compat.v2 as tf\n+from tensorflow.python.util.tf_export import keras_export\n+\n from keras import backend\n from keras import layers\n from keras.applications import imagenet_utils\n from keras.engine import training\n from keras.utils import data_utils\n from keras.utils import layer_utils\n-import tensorflow.compat.v2 as tf\n-\n-from tensorflow.python.util.tf_export import keras_export\n \n BASE_WEIGHTS_PATH = \"https://storage.googleapis.com/tensorflow/keras-applications/efficientnet_v2/\"\n \n\n@@ -39,10 +39,11 @@ python efficientnet_weight_update_util.py --model b3 --notop \\\n import argparse\n import warnings\n \n-from keras.utils import io_utils\n import tensorflow.compat.v2 as tf\n from tensorflow.keras.applications import efficientnet\n \n+from keras.utils import io_utils\n+\n \n def write_ckpt_to_h5(path_h5, path_ckpt, keras_model, use_ema=True):\n     \"\"\"Map the weights in checkpoint file (tf) to h5 file (keras).\n\n@@ -18,12 +18,11 @@ import json\n import warnings\n \n import numpy as np\n+from tensorflow.python.util.tf_export import keras_export\n \n from keras import activations\n from keras import backend\n from keras.utils import data_utils\n-from tensorflow.python.util.tf_export import keras_export\n-\n \n CLASS_INDEX = None\n CLASS_INDEX_PATH = (\n\n@@ -14,15 +14,14 @@\n # ==============================================================================\n \"\"\"Tests for imagenet_utils.\"\"\"\n \n-import tensorflow.compat.v2 as tf\n-\n-from absl.testing import parameterized\n import numpy as np\n+import tensorflow.compat.v2 as tf\n+from absl.testing import parameterized\n \n import keras\n-from keras.testing_infra import test_combinations\n from keras.applications import imagenet_utils as utils\n from keras.mixed_precision.policy import set_global_policy\n+from keras.testing_infra import test_combinations\n \n \n class TestImageNetUtils(test_combinations.TestCase):\n\n@@ -22,6 +22,7 @@ Reference:\n \"\"\"\n \n import tensorflow.compat.v2 as tf\n+from tensorflow.python.util.tf_export import keras_export\n \n from keras import backend\n from keras.applications import imagenet_utils\n@@ -29,8 +30,6 @@ from keras.engine import training\n from keras.layers import VersionAwareLayers\n from keras.utils import data_utils\n from keras.utils import layer_utils\n-from tensorflow.python.util.tf_export import keras_export\n-\n \n BASE_WEIGHT_URL = (\n     \"https://storage.googleapis.com/tensorflow/\"\n\n@@ -21,6 +21,7 @@ Reference:\n \"\"\"\n \n import tensorflow.compat.v2 as tf\n+from tensorflow.python.util.tf_export import keras_export\n \n from keras import backend\n from keras.applications import imagenet_utils\n@@ -28,8 +29,6 @@ from keras.engine import training\n from keras.layers import VersionAwareLayers\n from keras.utils import data_utils\n from keras.utils import layer_utils\n-from tensorflow.python.util.tf_export import keras_export\n-\n \n WEIGHTS_PATH = (\n     \"https://storage.googleapis.com/tensorflow/keras-applications/\"\n\n@@ -62,6 +62,8 @@ Reference:\n \"\"\"\n \n import tensorflow.compat.v2 as tf\n+from tensorflow.python.platform import tf_logging as logging\n+from tensorflow.python.util.tf_export import keras_export\n \n from keras import backend\n from keras.applications import imagenet_utils\n@@ -69,8 +71,6 @@ from keras.engine import training\n from keras.layers import VersionAwareLayers\n from keras.utils import data_utils\n from keras.utils import layer_utils\n-from tensorflow.python.platform import tf_logging as logging\n-from tensorflow.python.util.tf_export import keras_export\n \n BASE_WEIGHT_PATH = (\n     \"https://storage.googleapis.com/tensorflow/\" \"keras-applications/mobilenet/\"\n\n@@ -74,15 +74,16 @@ MACs stands for Multiply Adds\n       https://arxiv.org/abs/1801.04381) (CVPR 2018)\n \"\"\"\n \n+import tensorflow.compat.v2 as tf\n+from tensorflow.python.platform import tf_logging as logging\n+from tensorflow.python.util.tf_export import keras_export\n+\n from keras import backend\n from keras.applications import imagenet_utils\n from keras.engine import training\n from keras.layers import VersionAwareLayers\n from keras.utils import data_utils\n from keras.utils import layer_utils\n-import tensorflow.compat.v2 as tf\n-from tensorflow.python.platform import tf_logging as logging\n-from tensorflow.python.util.tf_export import keras_export\n \n BASE_WEIGHT_PATH = (\n     \"https://storage.googleapis.com/tensorflow/\"\n\n@@ -17,6 +17,8 @@\n \"\"\"MobileNet v3 models for Keras.\"\"\"\n \n import tensorflow.compat.v2 as tf\n+from tensorflow.python.platform import tf_logging as logging\n+from tensorflow.python.util.tf_export import keras_export\n \n from keras import backend\n from keras import models\n@@ -24,9 +26,6 @@ from keras.applications import imagenet_utils\n from keras.layers import VersionAwareLayers\n from keras.utils import data_utils\n from keras.utils import layer_utils\n-from tensorflow.python.platform import tf_logging as logging\n-from tensorflow.python.util.tf_export import keras_export\n-\n \n # TODO(scottzhu): Change this to the GCS path.\n BASE_WEIGHT_PATH = (\n\n@@ -39,6 +39,8 @@ Reference:\n \"\"\"\n \n import tensorflow.compat.v2 as tf\n+from tensorflow.python.platform import tf_logging as logging\n+from tensorflow.python.util.tf_export import keras_export\n \n from keras import backend\n from keras.applications import imagenet_utils\n@@ -46,9 +48,6 @@ from keras.engine import training\n from keras.layers import VersionAwareLayers\n from keras.utils import data_utils\n from keras.utils import layer_utils\n-from tensorflow.python.platform import tf_logging as logging\n-from tensorflow.python.util.tf_export import keras_export\n-\n \n BASE_WEIGHTS_PATH = (\n     \"https://storage.googleapis.com/tensorflow/\" \"keras-applications/nasnet/\"\n\n@@ -26,14 +26,15 @@ References:\n   (CVPR 2021)\n \"\"\"\n \n+import tensorflow.compat.v2 as tf\n+from tensorflow.python.util.tf_export import keras_export\n+\n from keras import backend\n from keras import layers\n from keras.applications import imagenet_utils\n from keras.engine import training\n from keras.utils import data_utils\n from keras.utils import layer_utils\n-import tensorflow.compat.v2 as tf\n-from tensorflow.python.util.tf_export import keras_export\n \n BASE_WEIGHTS_PATH = (\n     \"https://storage.googleapis.com/tensorflow/keras-applications/regnet/\"\n\n@@ -21,6 +21,7 @@ Reference:\n \"\"\"\n \n import tensorflow.compat.v2 as tf\n+from tensorflow.python.util.tf_export import keras_export\n \n from keras import backend\n from keras.applications import imagenet_utils\n@@ -28,8 +29,6 @@ from keras.engine import training\n from keras.layers import VersionAwareLayers\n from keras.utils import data_utils\n from keras.utils import layer_utils\n-from tensorflow.python.util.tf_export import keras_export\n-\n \n BASE_WEIGHTS_PATH = (\n     \"https://storage.googleapis.com/tensorflow/keras-applications/resnet/\"\n\n@@ -21,7 +21,13 @@ Reference:\n     https://arxiv.org/pdf/2103.07579.pdf)\n \"\"\"\n import sys\n-from typing import Callable, Dict, List, Union\n+from typing import Callable\n+from typing import Dict\n+from typing import List\n+from typing import Union\n+\n+import tensorflow.compat.v2 as tf\n+from tensorflow.python.util.tf_export import keras_export\n \n from keras import backend\n from keras import layers\n@@ -29,10 +35,6 @@ from keras.applications import imagenet_utils\n from keras.engine import training\n from keras.utils import data_utils\n from keras.utils import layer_utils\n-import tensorflow.compat.v2 as tf\n-\n-\n-from tensorflow.python.util.tf_export import keras_export\n \n BASE_WEIGHTS_URL = (\n     \"https://storage.googleapis.com/tensorflow/\" \"keras-applications/resnet_rs/\"\n\n@@ -20,9 +20,10 @@ Reference:\n     (https://arxiv.org/abs/1603.05027) (CVPR 2016)\n \"\"\"\n \n+from tensorflow.python.util.tf_export import keras_export\n+\n from keras.applications import imagenet_utils\n from keras.applications import resnet\n-from tensorflow.python.util.tf_export import keras_export\n \n \n @keras_export(\n\n@@ -21,6 +21,7 @@ Reference:\n \"\"\"\n \n import tensorflow.compat.v2 as tf\n+from tensorflow.python.util.tf_export import keras_export\n \n from keras import backend\n from keras.applications import imagenet_utils\n@@ -28,8 +29,6 @@ from keras.engine import training\n from keras.layers import VersionAwareLayers\n from keras.utils import data_utils\n from keras.utils import layer_utils\n-from tensorflow.python.util.tf_export import keras_export\n-\n \n WEIGHTS_PATH = (\n     \"https://storage.googleapis.com/tensorflow/keras-applications/\"\n\n@@ -21,6 +21,7 @@ Reference:\n \"\"\"\n \n import tensorflow.compat.v2 as tf\n+from tensorflow.python.util.tf_export import keras_export\n \n from keras import backend\n from keras.applications import imagenet_utils\n@@ -28,8 +29,6 @@ from keras.engine import training\n from keras.layers import VersionAwareLayers\n from keras.utils import data_utils\n from keras.utils import layer_utils\n-from tensorflow.python.util.tf_export import keras_export\n-\n \n WEIGHTS_PATH = (\n     \"https://storage.googleapis.com/tensorflow/keras-applications/\"\n\n@@ -24,6 +24,7 @@ Reference:\n \"\"\"\n \n import tensorflow.compat.v2 as tf\n+from tensorflow.python.util.tf_export import keras_export\n \n from keras import backend\n from keras.applications import imagenet_utils\n@@ -31,8 +32,6 @@ from keras.engine import training\n from keras.layers import VersionAwareLayers\n from keras.utils import data_utils\n from keras.utils import layer_utils\n-from tensorflow.python.util.tf_export import keras_export\n-\n \n TF_WEIGHTS_PATH = (\n     \"https://storage.googleapis.com/tensorflow/keras-applications/\"\n\n@@ -20,8 +20,6 @@\n # pylint: disable=missing-function-docstring\n \"\"\"Keras backend API.\"\"\"\n \n-import tensorflow.compat.v2 as tf\n-\n import collections\n import itertools\n import json\n@@ -33,11 +31,15 @@ import warnings\n import weakref\n \n import numpy as np\n-\n+import tensorflow.compat.v2 as tf\n from tensorflow.core.protobuf import config_pb2\n from tensorflow.python.eager import context\n from tensorflow.python.eager.context import get_config\n from tensorflow.python.framework import config\n+from tensorflow.python.platform import tf_logging as logging\n+from tensorflow.python.util.tf_export import keras_export\n+from tensorflow.tools.docs import doc_controls\n+\n from keras import backend_config\n from keras.distribute import distribute_coordinator_utils as dc\n from keras.engine import keras_tensor\n@@ -45,9 +47,6 @@ from keras.utils import control_flow_util\n from keras.utils import object_identity\n from keras.utils import tf_contextlib\n from keras.utils import tf_inspect\n-from tensorflow.python.platform import tf_logging as logging\n-from tensorflow.python.util.tf_export import keras_export\n-from tensorflow.tools.docs import doc_controls\n \n py_all = all\n py_sum = sum\n@@ -1451,8 +1450,8 @@ def placeholder(\n         # when the placeholder is built in a top-level eager context\n         # (intended to be used with keras.backend.function)\n         from keras.engine import (\n-            input_layer,\n-        )  # pylint: disable=g-import-not-at-top\n+            input_layer,  # pylint: disable=g-import-not-at-top\n+        )\n \n         x = input_layer.Input(tensor=x)\n         x._is_backend_placeholder = True\n@@ -1977,8 +1976,8 @@ class RandomGenerator(tf.__internal__.tracking.AutoTrackable):\n             self._generator = None\n         elif self._rng_type == self.RNG_STATEFUL:\n             from keras.utils import (\n-                tf_utils,\n-            )  # pylint: disable=g-import-not-at-top\n+                tf_utils,  # pylint: disable=g-import-not-at-top\n+            )\n \n             with tf_utils.maybe_init_scope(self):\n                 seed = self._create_seed(self._seed)\n@@ -5266,8 +5265,8 @@ def in_train_phase(x, alt, training=None):\n         the `training` flag defaults to `K.learning_phase()`.\n     \"\"\"\n     from keras.engine import (\n-        base_layer_utils,\n-    )  # pylint: disable=g-import-not-at-top\n+        base_layer_utils,  # pylint: disable=g-import-not-at-top\n+    )\n \n     if training is None:\n         training = base_layer_utils.call_context().training\n\n@@ -14,25 +14,25 @@\n # ==============================================================================\n \"\"\"Tests for Keras backend.\"\"\"\n \n-import tensorflow.compat.v2 as tf\n-\n import gc\n import warnings\n \n-from absl.testing import parameterized\n import numpy as np\n import scipy.sparse\n+import tensorflow.compat.v2 as tf\n+from absl.testing import parameterized\n from tensorflow.python.eager import context\n from tensorflow.python.eager.context import get_config\n from tensorflow.python.framework import (\n     test_util as tf_test_utils,\n )\n+\n from keras import activations\n from keras import backend\n-from keras.testing_infra import test_combinations\n from keras.engine import input_layer\n from keras.layers import activation\n from keras.layers.normalization import batch_normalization_v1\n+from keras.testing_infra import test_combinations\n from keras.utils import tf_inspect\n from keras.utils import tf_utils\n \n\n@@ -14,10 +14,10 @@\n # ==============================================================================\n \"\"\"Common utils for benchmarks.\"\"\"\n \n-import tensorflow.compat.v2 as tf\n-\n import timeit\n+\n import numpy as np\n+import tensorflow.compat.v2 as tf\n \n from keras.benchmarks import distribution_util\n \n\n@@ -18,11 +18,11 @@ Mostly from\n https://github.com/tensorflow/models/blob/master/official/utils/misc/distribution_utils.py.\n \"\"\"\n \n-import tensorflow.compat.v2 as tf\n-\n import json\n import os\n \n+import tensorflow.compat.v2 as tf\n+\n \n def _collective_communication(all_reduce_alg):\n     \"\"\"Return a CollectiveCommunication based on all_reduce_alg.\n\n@@ -14,12 +14,12 @@\n # ==============================================================================\n \"\"\"Microbenchmarks for Keras components in eager mode.\"\"\"\n \n-import tensorflow.compat.v2 as tf\n-\n import time\n \n+import tensorflow.compat.v2 as tf\n from tensorflow.python.eager import context\n from tensorflow.python.eager.context import get_executor\n+\n from keras.utils import tf_inspect\n \n \n\n@@ -14,9 +14,8 @@\n # ==============================================================================\n \"\"\"Benchmark tests for CPU performance of Keras models.\"\"\"\n \n-import tensorflow.compat.v2 as tf\n-\n import numpy as np\n+import tensorflow.compat.v2 as tf\n \n from keras.benchmarks import benchmark_util\n \n\n@@ -17,9 +17,8 @@ from __future__ import absolute_import\n from __future__ import division\n from __future__ import print_function\n \n-import tensorflow.compat.v2 as tf\n-\n import numpy as np\n+import tensorflow.compat.v2 as tf\n \n from keras.benchmarks import benchmark_util\n \n\n@@ -17,10 +17,10 @@ from __future__ import absolute_import\n from __future__ import division\n from __future__ import print_function\n \n-import tensorflow.compat.v2 as tf\n-\n import timeit\n+\n import numpy as np\n+import tensorflow.compat.v2 as tf\n \n from keras.benchmarks import benchmark_util\n from keras.benchmarks import distribution_util\n\n@@ -17,9 +17,8 @@ from __future__ import absolute_import\n from __future__ import division\n from __future__ import print_function\n \n-import tensorflow.compat.v2 as tf\n-\n import numpy as np\n+import tensorflow.compat.v2 as tf\n \n from keras.benchmarks import benchmark_util\n \n\n@@ -18,10 +18,11 @@ from __future__ import absolute_import\n from __future__ import division\n from __future__ import print_function\n \n+import functools\n+\n+import numpy as np\n import tensorflow.compat.v2 as tf\n \n-import functools\n-import numpy as np\n from keras.benchmarks import benchmark_util\n from keras.benchmarks.layer_benchmarks import layer_benchmarks_test_base\n \n\n@@ -18,10 +18,10 @@ from __future__ import absolute_import\n from __future__ import division\n from __future__ import print_function\n \n-import tensorflow.compat.v2 as tf\n-\n import time\n \n+import tensorflow.compat.v2 as tf\n+\n from keras.benchmarks.layer_benchmarks import run_xprof\n \n \n\n@@ -14,9 +14,8 @@\n # ==============================================================================\n \"\"\"Benchmark tests for Keras metrics memory consumption.\"\"\"\n \n-import tensorflow.compat.v2 as tf\n-\n import numpy as np\n+import tensorflow.compat.v2 as tf\n \n try:\n     import memory_profiler  # pylint:disable=g-import-not-at-top\n\n@@ -14,12 +14,10 @@\n # ==============================================================================\n r\"\"\"Benchmarks on Keras components with different Keras model types.\"\"\"\n \n-import tensorflow.compat.v2 as tf\n-\n import time\n \n import numpy as np\n-\n+import tensorflow.compat.v2 as tf\n from tensorflow.python.eager import context\n from tensorflow.python.eager.context import get_executor\n \n\n@@ -20,13 +20,11 @@ To add a new model for memory profile:\n 3. Add the model function to the dict `models`.\n \"\"\"\n \n+import numpy as np\n import tensorflow.compat.v2 as tf\n-\n from absl import app\n from absl import flags\n-\n from absl import logging\n-import numpy as np\n \n try:\n     import memory_profiler  # pylint:disable=g-import-not-at-top\n\n@@ -15,13 +15,13 @@\n \"\"\"Benchmark tests for Keras optimizers.\"\"\"\n \n import tensorflow.compat.v2 as tf\n-\n-from keras.benchmarks import benchmark_util\n-from keras.optimizers.optimizer_v2 import adam\n from tensorflow.python.platform.benchmark import (\n     ParameterizedBenchmark,\n )\n \n+from keras.benchmarks import benchmark_util\n+from keras.optimizers.optimizer_v2 import adam\n+\n \n def bidirect_imdb_lstm_config():\n     \"\"\"Bidirectional LSTM model and IMDB data.\"\"\"\n\n@@ -19,6 +19,7 @@ from __future__ import division\n from __future__ import print_function\n \n import tensorflow.compat.v2 as tf\n+\n from keras.benchmarks.saved_model_benchmarks import saved_model_benchmark_util\n \n \n\n@@ -19,6 +19,7 @@ from __future__ import division\n from __future__ import print_function\n \n import tensorflow.compat.v2 as tf\n+\n from keras.benchmarks.saved_model_benchmarks import saved_model_benchmark_util\n \n \n\n@@ -19,6 +19,7 @@ from __future__ import division\n from __future__ import print_function\n \n import tensorflow.compat.v2 as tf\n+\n from keras.benchmarks.saved_model_benchmarks import saved_model_benchmark_util\n \n \n\n@@ -19,6 +19,7 @@ from __future__ import division\n from __future__ import print_function\n \n import tensorflow.compat.v2 as tf\n+\n from keras.benchmarks.saved_model_benchmarks import saved_model_benchmark_util\n \n \n\n@@ -19,6 +19,7 @@ from __future__ import division\n from __future__ import print_function\n \n import tensorflow.compat.v2 as tf\n+\n from keras.benchmarks.saved_model_benchmarks import saved_model_benchmark_util\n \n \n\n@@ -19,6 +19,7 @@ from __future__ import division\n from __future__ import print_function\n \n import tensorflow.compat.v2 as tf\n+\n from keras.benchmarks.saved_model_benchmarks import saved_model_benchmark_util\n \n \n\n@@ -18,11 +18,11 @@ from __future__ import absolute_import\n from __future__ import division\n from __future__ import print_function\n \n-import tensorflow.compat.v2 as tf\n-\n import tempfile\n import time\n \n+import tensorflow.compat.v2 as tf\n+\n \n def save_and_load_benchmark(app):\n     \"\"\"Util for saved model benchmarks.\"\"\"\n\n@@ -19,6 +19,7 @@ from __future__ import division\n from __future__ import print_function\n \n import tensorflow.compat.v2 as tf\n+\n from keras.benchmarks.saved_model_benchmarks import saved_model_benchmark_util\n \n \n\n@@ -19,6 +19,7 @@ from __future__ import division\n from __future__ import print_function\n \n import tensorflow.compat.v2 as tf\n+\n from keras.benchmarks.saved_model_benchmarks import saved_model_benchmark_util\n \n \n\n@@ -25,6 +25,12 @@ import re\n import sys\n import time\n \n+import numpy as np\n+import tensorflow.compat.v2 as tf\n+from tensorflow.python.platform import tf_logging as logging\n+from tensorflow.python.util import deprecation\n+from tensorflow.python.util.tf_export import keras_export\n+from tensorflow.tools.docs import doc_controls\n \n from keras import backend\n from keras.distribute import distributed_file_utils\n@@ -37,13 +43,6 @@ from keras.utils import version_utils\n from keras.utils.data_utils import Sequence\n from keras.utils.generic_utils import Progbar\n from keras.utils.mode_keys import ModeKeys\n-import numpy as np\n-import tensorflow.compat.v2 as tf\n-\n-from tensorflow.python.platform import tf_logging as logging\n-from tensorflow.python.util import deprecation\n-from tensorflow.python.util.tf_export import keras_export\n-from tensorflow.tools.docs import doc_controls\n \n try:\n     import requests\n@@ -2525,6 +2524,7 @@ class TensorBoard(Callback, version_utils.TensorBoardVersionSelector):\n         \"\"\"Configure the Projector for embeddings.\"\"\"\n         # TODO(omalleyt): Add integration tests.\n         from google.protobuf import text_format\n+\n         from keras.layers import core\n         from keras.protobuf import projector_config_pb2\n \n\n@@ -27,7 +27,11 @@ import time\n import unittest\n from unittest import mock\n \n+import numpy as np\n+import tensorflow.compat.v2 as tf\n from absl.testing import parameterized\n+from tensorflow.python.platform import tf_logging as logging\n+\n import keras\n from keras.callbacks import BackupAndRestore\n from keras.callbacks import BackupAndRestoreExperimental\n@@ -40,9 +44,6 @@ from keras.testing_infra import test_combinations\n from keras.testing_infra import test_utils\n from keras.utils import io_utils\n from keras.utils import np_utils\n-import numpy as np\n-import tensorflow.compat.v2 as tf\n-from tensorflow.python.platform import tf_logging as logging\n \n try:\n     import h5py  # pylint:disable=g-import-not-at-top\n\n@@ -16,15 +16,16 @@\n # pylint: disable=g-classes-have-attributes\n \"\"\"Callbacks: utilities called at certain points during model training.\"\"\"\n \n-import tensorflow.compat.v2 as tf\n-\n import os\n+\n import numpy as np\n-from keras import backend\n-from keras import callbacks\n+import tensorflow.compat.v2 as tf\n from tensorflow.python.platform import tf_logging as logging\n from tensorflow.python.util.tf_export import keras_export\n \n+from keras import backend\n+from keras import callbacks\n+\n \n @keras_export(v1=[\"keras.callbacks.TensorBoard\"])\n class TensorBoard(callbacks.TensorBoard):\n@@ -256,8 +257,8 @@ class TensorBoard(callbacks.TensorBoard):\n         if self.embeddings_freq and self.embeddings_data is not None:\n             # Avoid circular dependency.\n             from keras.engine import (\n-                training_utils_v1,\n-            )  # pylint: disable=g-import-not-at-top\n+                training_utils_v1,  # pylint: disable=g-import-not-at-top\n+            )\n \n             self.embeddings_data = training_utils_v1.standardize_input_data(\n                 self.embeddings_data, model.input_names\n\n@@ -14,25 +14,24 @@\n # ==============================================================================\n \"\"\"Tests for Keras callbacks.\"\"\"\n \n-import tensorflow.compat.v2 as tf\n-\n import os\n import shutil\n import tempfile\n \n-from absl.testing import parameterized\n import numpy as np\n+import tensorflow.compat.v2 as tf\n+from absl.testing import parameterized\n+\n from keras import callbacks\n from keras import callbacks_v1\n-from keras.testing_infra import test_combinations\n from keras import layers\n-from keras.testing_infra import test_utils\n from keras.engine import input_layer\n from keras.engine import sequential\n from keras.engine import training\n+from keras.testing_infra import test_combinations\n+from keras.testing_infra import test_utils\n from keras.utils import np_utils\n \n-\n TRAIN_SAMPLES = 10\n TEST_SAMPLES = 10\n NUM_CLASSES = 2\n\n@@ -17,11 +17,12 @@\n \"\"\"Constraints: functions that impose constraints on weight values.\"\"\"\n \n import tensorflow.compat.v2 as tf\n+from tensorflow.python.util.tf_export import keras_export\n+from tensorflow.tools.docs import doc_controls\n+\n from keras import backend\n from keras.utils.generic_utils import deserialize_keras_object\n from keras.utils.generic_utils import serialize_keras_object\n-from tensorflow.python.util.tf_export import keras_export\n-from tensorflow.tools.docs import doc_controls\n \n \n @keras_export(\"keras.constraints.Constraint\")\n\n@@ -14,15 +14,14 @@\n # ==============================================================================\n \"\"\"Tests for Keras weights constraints.\"\"\"\n \n-import tensorflow.compat.v2 as tf\n-\n import math\n \n import numpy as np\n+import tensorflow.compat.v2 as tf\n \n from keras import backend\n-from keras.testing_infra import test_combinations\n from keras import constraints\n+from keras.testing_infra import test_combinations\n \n \n def get_test_values():\n\n@@ -15,9 +15,9 @@\n \"\"\"Boston housing price regression dataset.\"\"\"\n \n import numpy as np\n+from tensorflow.python.util.tf_export import keras_export\n \n from keras.utils.data_utils import get_file\n-from tensorflow.python.util.tf_export import keras_export\n \n \n @keras_export(\"keras.datasets.boston_housing.load_data\")\n\n@@ -17,11 +17,11 @@\n import os\n \n import numpy as np\n+from tensorflow.python.util.tf_export import keras_export\n \n from keras import backend\n from keras.datasets.cifar import load_batch\n from keras.utils.data_utils import get_file\n-from tensorflow.python.util.tf_export import keras_export\n \n \n @keras_export(\"keras.datasets.cifar10.load_data\")\n\n@@ -17,11 +17,11 @@\n import os\n \n import numpy as np\n+from tensorflow.python.util.tf_export import keras_export\n \n from keras import backend\n from keras.datasets.cifar import load_batch\n from keras.utils.data_utils import get_file\n-from tensorflow.python.util.tf_export import keras_export\n \n \n @keras_export(\"keras.datasets.cifar100.load_data\")\n\n@@ -18,9 +18,9 @@ import gzip\n import os\n \n import numpy as np\n+from tensorflow.python.util.tf_export import keras_export\n \n from keras.utils.data_utils import get_file\n-from tensorflow.python.util.tf_export import keras_export\n \n \n @keras_export(\"keras.datasets.fashion_mnist.load_data\")\n\n@@ -17,11 +17,11 @@\n import json\n \n import numpy as np\n+from tensorflow.python.platform import tf_logging as logging\n+from tensorflow.python.util.tf_export import keras_export\n \n from keras.preprocessing.sequence import _remove_long_seq\n from keras.utils.data_utils import get_file\n-from tensorflow.python.platform import tf_logging as logging\n-from tensorflow.python.util.tf_export import keras_export\n \n \n @keras_export(\"keras.datasets.imdb.load_data\")\n\n@@ -15,9 +15,9 @@\n \"\"\"MNIST handwritten digits dataset.\"\"\"\n \n import numpy as np\n+from tensorflow.python.util.tf_export import keras_export\n \n from keras.utils.data_utils import get_file\n-from tensorflow.python.util.tf_export import keras_export\n \n \n @keras_export(\"keras.datasets.mnist.load_data\")\n\n@@ -17,11 +17,11 @@\n import json\n \n import numpy as np\n+from tensorflow.python.platform import tf_logging as logging\n+from tensorflow.python.util.tf_export import keras_export\n \n from keras.preprocessing.sequence import _remove_long_seq\n from keras.utils.data_utils import get_file\n-from tensorflow.python.platform import tf_logging as logging\n-from tensorflow.python.util.tf_export import keras_export\n \n \n @keras_export(\"keras.datasets.reuters.load_data\")\n\n@@ -16,8 +16,8 @@\n import os\n \n import tensorflow.compat.v2 as tf\n-\n from absl.testing import parameterized\n+\n from keras.optimizers.optimizer_v2 import adam\n \n \n\n@@ -15,14 +15,14 @@\n \"\"\"Tests for CollectiveAllReduceStrategy.\"\"\"\n \n import tensorflow.compat.v2 as tf\n-\n from absl.testing import parameterized\n+\n from keras import layers\n-from keras.testing_infra import test_utils\n from keras.engine import training\n from keras.optimizers.optimizer_v2 import (\n     gradient_descent as gradient_descent_keras,\n )\n+from keras.testing_infra import test_utils\n \n \n @test_utils.run_v2_only\n\n@@ -14,7 +14,11 @@\n # ==============================================================================\n \"\"\"Custom Training Loop correctness test.\"\"\"\n \n+import numpy as np\n+import tensorflow.compat.v2 as tf\n from absl.testing import parameterized\n+from tensorflow.python.ops.losses import losses_impl\n+\n import keras\n from keras import optimizers\n from keras.applications import resnet_v2\n@@ -22,10 +26,6 @@ from keras.datasets import fashion_mnist\n from keras.distribute import optimizer_combinations\n from keras.distribute import strategy_combinations\n from keras.testing_infra import test_utils\n-import numpy as np\n-import tensorflow.compat.v2 as tf\n-\n-from tensorflow.python.ops.losses import losses_impl\n \n _NUM_SAMPLES = 66\n _BATCH_SIZE = 32\n\n@@ -14,13 +14,13 @@\n # ==============================================================================\n \"\"\"Tests for custom training loops.\"\"\"\n \n-import tensorflow.compat.v2 as tf\n-\n-from absl.testing import parameterized\n import numpy as np\n+import tensorflow.compat.v2 as tf\n+from absl.testing import parameterized\n from tensorflow.python.framework import (\n     test_util as tf_test_utils,\n )\n+\n from keras import metrics\n from keras.distribute import strategy_combinations\n \n\n@@ -14,12 +14,11 @@\n # ==============================================================================\n \"\"\"Tests for custom training loops.\"\"\"\n \n-import tensorflow.compat.v2 as tf\n-\n import os\n \n-from absl.testing import parameterized\n import numpy as np\n+import tensorflow.compat.v2 as tf\n+from absl.testing import parameterized\n \n import keras\n from keras.distribute import strategy_combinations\n\n@@ -15,9 +15,9 @@\n \"\"\"Tests for custom training loops that involves advanced optimizer usage.\"\"\"\n \n import tensorflow.compat.v2 as tf\n-\n from absl.testing import parameterized\n from tensorflow.python.distribute import values\n+\n from keras.distribute import (\n     strategy_combinations as keras_strategy_combinations,\n )\n\n@@ -14,11 +14,12 @@\n # ==============================================================================\n \"\"\"Tests for `DatasetCreator` with `Model.fit` across usages and strategies.\"\"\"\n \n+import tensorflow.compat.v2 as tf\n+\n from keras import callbacks as callbacks_lib\n from keras.distribute import dataset_creator_model_fit_test_base as test_base\n from keras.distribute import strategy_combinations\n from keras.testing_infra import test_utils\n-import tensorflow.compat.v2 as tf\n \n \n @test_utils.run_v2_only\n\n@@ -14,15 +14,15 @@\n # ==============================================================================\n \"\"\"Tests for `DatasetCreator` with `Model.fit` across usages and strategies.\"\"\"\n \n-import tensorflow.compat.v2 as tf\n-\n import numpy as np\n+import tensorflow.compat.v2 as tf\n from tensorflow.python.framework import (\n     test_util as tf_test_utils,\n )\n-from keras.testing_infra import test_utils\n+\n from keras.distribute import dataset_creator_model_fit_test_base as test_base\n from keras.distribute import strategy_combinations\n+from keras.testing_infra import test_utils\n from keras.utils import dataset_creator\n \n \n\n@@ -14,12 +14,12 @@\n # ==============================================================================\n \"\"\"Tests for `DatasetCreator` with `Model.fit` across usages and strategies.\"\"\"\n \n-import tensorflow.compat.v2 as tf\n-\n import os\n \n-from absl.testing import parameterized\n import numpy as np\n+import tensorflow.compat.v2 as tf\n+from absl.testing import parameterized\n+from tensorflow.python.platform import tf_logging as logging\n \n import keras\n from keras import callbacks as callbacks_lib\n@@ -28,7 +28,6 @@ from keras.layers import core as core_layers\n from keras.layers.preprocessing import string_lookup\n from keras.optimizers.optimizer_v2 import gradient_descent\n from keras.utils import dataset_creator\n-from tensorflow.python.platform import tf_logging as logging\n \n \n class DatasetCreatorModelFitTestBase(tf.test.TestCase, parameterized.TestCase):\n\n@@ -25,13 +25,13 @@ from __future__ import absolute_import\n from __future__ import division\n from __future__ import print_function\n \n-import tensorflow.compat.v2 as tf\n-\n import copy\n import json\n import os\n import threading\n import time\n+\n+import tensorflow.compat.v2 as tf\n from tensorflow.core.protobuf import cluster_pb2\n from tensorflow.python.platform import tf_logging as logging\n \n\n@@ -14,19 +14,17 @@\n # ==============================================================================\n \"\"\"Tests for tf.keras models using tf.distribute.Strategy.\"\"\"\n \n-import tensorflow.compat.v2 as tf\n-\n import os\n \n-from absl.testing import parameterized\n import numpy as np\n-\n-import keras\n+import tensorflow.compat.v2 as tf\n+from absl.testing import parameterized\n from tensorflow.python.distribute.cluster_resolver import (\n     SimpleClusterResolver,\n )\n+\n+import keras\n from keras import backend\n-from keras.testing_infra import test_utils\n from keras.distribute import distributed_training_utils\n from keras.distribute import distributed_training_utils_v1\n from keras.distribute import multi_worker_testing_utils\n@@ -45,6 +43,7 @@ from keras.mixed_precision import policy\n from keras.optimizers.optimizer_v2 import (\n     gradient_descent as gradient_descent_keras,\n )\n+from keras.testing_infra import test_utils\n from keras.utils import losses_utils\n from keras.utils import np_utils\n \n\n@@ -44,10 +44,10 @@ remove_temp_dirpath(self.log_dir, get_distribution_strategy())\n Experimental. API is subject to change.\n \"\"\"\n \n-import tensorflow.compat.v2 as tf\n-\n import os\n \n+import tensorflow.compat.v2 as tf\n+\n \n def _get_base_dirpath(strategy):\n     task_id = strategy.extended._task_id  # pylint: disable=protected-access\n\n@@ -14,10 +14,10 @@\n # ==============================================================================\n \"\"\"Tests for distributed_file_utils.\"\"\"\n \n-import tensorflow.compat.v2 as tf\n-\n import os\n \n+import tensorflow.compat.v2 as tf\n+\n from keras.distribute import distributed_file_utils\n \n \n\n@@ -14,10 +14,10 @@\n # ==============================================================================\n \"\"\"Utilities related to distributed training.\"\"\"\n \n-from absl import flags\n-from keras import backend\n-\n import tensorflow.compat.v2 as tf\n+from absl import flags\n+\n+from keras import backend\n \n FLAGS = flags.FLAGS\n \n\n@@ -14,13 +14,12 @@\n # ==============================================================================\n \"\"\"Utilities related to distributed training.\"\"\"\n \n-import tensorflow.compat.v2 as tf\n-\n-# pylint:disable=protected-access\n-\n import functools\n \n import numpy as np\n+import tensorflow.compat.v2 as tf\n+from tensorflow.python.platform import tf_logging as logging\n+\n from keras import backend\n from keras import callbacks\n from keras import metrics as metrics_module\n@@ -31,7 +30,8 @@ from keras.engine import training_utils_v1\n from keras.optimizers.optimizer_v2 import optimizer_v2\n from keras.utils import tf_contextlib\n from keras.utils.mode_keys import ModeKeys\n-from tensorflow.python.platform import tf_logging as logging\n+\n+# pylint:disable=protected-access\n \n \n def set_weights(distribution_strategy, dist_model, weights):\n\n@@ -14,11 +14,11 @@\n # ==============================================================================\n \"\"\"Correctness tests for tf.keras using DistributionStrategy.\"\"\"\n \n-import tensorflow.compat.v2 as tf\n-\n import functools\n-from absl.testing import parameterized\n+\n import numpy as np\n+import tensorflow.compat.v2 as tf\n+from absl.testing import parameterized\n \n import keras\n from keras.distribute import distributed_training_utils\n\n@@ -14,18 +14,17 @@\n # ==============================================================================\n \"\"\"Correctness tests for tf.keras DNN model using DistributionStrategy.\"\"\"\n \n-import tensorflow.compat.v2 as tf\n-\n import numpy as np\n+import tensorflow.compat.v2 as tf\n \n import keras\n from keras import backend\n-from keras.testing_infra import test_utils\n from keras.distribute import keras_correctness_test_base\n from keras.distribute import strategy_combinations\n from keras.optimizers.optimizer_v2 import (\n     gradient_descent as gradient_descent_keras,\n )\n+from keras.testing_infra import test_utils\n \n \n def all_strategy_combinations_with_eager_and_graph_modes():\n\n@@ -14,9 +14,8 @@\n # ==============================================================================\n \"\"\"Correctness test for tf.keras Embedding models using DistributionStrategy.\"\"\"\n \n-import tensorflow.compat.v2 as tf\n-\n import numpy as np\n+import tensorflow.compat.v2 as tf\n \n import keras\n from keras.distribute import keras_correctness_test_base\n\n@@ -14,13 +14,13 @@\n # ==============================================================================\n \"\"\"Correctness tests for tf.keras CNN models using DistributionStrategy.\"\"\"\n \n+import numpy as np\n import tensorflow.compat.v2 as tf\n \n-import numpy as np\n import keras\n-from keras.testing_infra import test_utils\n from keras.distribute import keras_correctness_test_base\n from keras.optimizers.optimizer_v2 import gradient_descent\n+from keras.testing_infra import test_utils\n \n \n @test_utils.run_all_without_tensor_float_32(\n\n@@ -14,10 +14,11 @@\n # ==============================================================================\n \"\"\"Tests for Keras metrics.\"\"\"\n \n+import tensorflow.compat.v2 as tf\n from absl.testing import parameterized\n+\n from keras import metrics\n from keras.engine import base_layer\n-import tensorflow.compat.v2 as tf\n \n combinations = tf.__internal__.distribute.combinations\n \n\n@@ -14,10 +14,9 @@\n # ==============================================================================\n \"\"\"Tests for Keras high level APIs, e.g. fit, evaluate and predict.\"\"\"\n \n-import tensorflow.compat.v2 as tf\n-\n-from absl.testing import parameterized\n import numpy as np\n+import tensorflow.compat.v2 as tf\n+from absl.testing import parameterized\n \n import keras\n from keras.distribute.strategy_combinations import all_strategies\n\n@@ -14,10 +14,9 @@\n # ==============================================================================\n \"\"\"Tests that show that DistributionStrategy works with optimizer v2.\"\"\"\n \n-import tensorflow.compat.v2 as tf\n-\n-from absl.testing import parameterized\n import numpy as np\n+import tensorflow.compat.v2 as tf\n+from absl.testing import parameterized\n \n import keras\n from keras.optimizers.optimizer_v2 import adam\n\n@@ -14,6 +14,8 @@\n # ==============================================================================\n \"\"\"Tests for keras premade models using tf.distribute.Strategy.\"\"\"\n \n+import numpy as np\n+import tensorflow.compat.v2 as tf\n from absl.testing import parameterized\n \n from keras.engine import sequential\n@@ -23,8 +25,6 @@ from keras.optimizers.optimizer_v2 import gradient_descent\n from keras.premade_models import linear\n from keras.premade_models import wide_deep\n from keras.utils import dataset_creator\n-import numpy as np\n-import tensorflow.compat.v2 as tf\n \n \n def strategy_combinations_eager_data_fn():\n\n@@ -14,12 +14,10 @@\n # ==============================================================================\n \"\"\"Correctness tests for tf.keras RNN models using DistributionStrategy.\"\"\"\n \n+import numpy as np\n import tensorflow.compat.v2 as tf\n \n-import numpy as np\n-\n import keras\n-from keras.testing_infra import test_utils\n from keras.distribute import keras_correctness_test_base\n from keras.layers.rnn import gru\n from keras.layers.rnn import gru_v1\n@@ -29,6 +27,7 @@ from keras.mixed_precision import policy\n from keras.optimizers.optimizer_v2 import (\n     gradient_descent as gradient_descent_keras,\n )\n+from keras.testing_infra import test_utils\n \n \n class _DistributionStrategyRnnModelCorrectnessTest(\n\n@@ -14,10 +14,11 @@\n # ==============================================================================\n \"\"\"Tests for saving and loading using keras save/load APIs with DS.\"\"\"\n \n+import tensorflow.compat.v2 as tf\n+\n from keras.distribute import saved_model_test_base as test_base\n from keras.saving import save\n from keras.testing_infra import test_utils\n-import tensorflow.compat.v2 as tf\n \n \n @test_utils.run_all_without_tensor_float_32(\n\n@@ -14,9 +14,8 @@\n # ==============================================================================\n \"\"\"Tests for stateful tf.keras LSTM models using DistributionStrategy.\"\"\"\n \n-import tensorflow.compat.v2 as tf\n-\n import numpy as np\n+import tensorflow.compat.v2 as tf\n \n import keras\n from keras.distribute import keras_correctness_test_base\n\n@@ -14,13 +14,12 @@\n # ==============================================================================\n \"\"\"Tests for tf.keras models with callbacks, checkpointing with dist strategy.\"\"\"\n \n-import tensorflow.compat.v2 as tf\n-\n import collections\n import tempfile\n \n-from absl.testing import parameterized\n import numpy as np\n+import tensorflow.compat.v2 as tf\n+from absl.testing import parameterized\n \n import keras\n from keras import losses\n\n@@ -15,15 +15,15 @@\n \"\"\"Tests for running legacy optimizer code with DistributionStrategy.\"\"\"\n \n \n+import numpy\n+import tensorflow.compat.v2 as tf\n from absl.testing import parameterized\n+\n from keras.distribute import optimizer_combinations\n from keras.distribute.test_example import batchnorm_example\n from keras.distribute.test_example import minimize_loss_example\n from keras.layers import core\n from keras.optimizers.optimizer_v2 import optimizer_v2\n-import numpy\n-import tensorflow.compat.v2 as tf\n-\n \n VAR_MAP_V1 = {\n     \"GradientDescent\": (\"dense/kernel\", \"dense/bias\"),\n\n@@ -14,20 +14,19 @@\n # ==============================================================================\n \"\"\"Tests for MirroredStrategy.\"\"\"\n \n-import tensorflow.compat.v2 as tf\n-\n-from absl.testing import parameterized\n import numpy as np\n+import tensorflow.compat.v2 as tf\n+from absl.testing import parameterized\n+from tensorflow.python.eager import backprop\n+from tensorflow.python.training import (\n+    optimizer as optimizer_lib,\n+)\n \n import keras\n-from tensorflow.python.eager import backprop\n from keras.engine import training as keras_training\n from keras.layers import core as keras_core\n from keras.optimizers.optimizer_v2 import rmsprop\n from keras.utils import kpl_test_utils\n-from tensorflow.python.training import (\n-    optimizer as optimizer_lib,\n-)\n \n \n class MiniModel(keras_training.Model):\n\n@@ -15,6 +15,7 @@\n \"\"\"Test MirroredVariable in MirroredStrategy and MultiWorkerMirroredStrategy.\"\"\"\n \n import tensorflow.compat.v2 as tf\n+\n from keras.distribute import distributed_training_utils\n from keras.layers import core\n \n\n@@ -15,6 +15,7 @@\n \"\"\"Strategy and optimizer combinations for combinations.combine().\"\"\"\n \n import tensorflow.compat.v2 as tf\n+\n from keras.distribute import simple_models\n \n simple_functional_model = tf.__internal__.test.combinations.NamedObject(\n\n@@ -14,12 +14,12 @@\n # ==============================================================================\n \"\"\"Tests for Keras callbacks in multi-worker training with TF2.\"\"\"\n \n-import tensorflow.compat.v2 as tf\n-\n import json\n import os\n \n+import tensorflow.compat.v2 as tf\n from absl.testing import parameterized\n+\n from keras import callbacks\n from keras.distribute import distributed_file_utils\n from keras.distribute import multi_worker_testing_utils\n\n@@ -14,8 +14,6 @@\n # ==============================================================================\n \"\"\"Test multi-worker Keras.\"\"\"\n \n-import tensorflow.compat.v2 as tf\n-\n import collections\n import copy\n import functools\n@@ -24,16 +22,16 @@ import os\n import sys\n import threading\n \n+import tensorflow.compat.v2 as tf\n from absl.testing import parameterized\n \n-\n import keras\n from keras import backend\n from keras import callbacks\n from keras import metrics as metrics_module\n from keras import models\n-from keras.optimizers import optimizer_v1\n from keras.distribute import multi_worker_testing_utils\n+from keras.optimizers import optimizer_v1\n from keras.optimizers.optimizer_v2 import rmsprop\n from keras.utils import kpl_test_utils\n \n\n@@ -14,20 +14,20 @@\n # ==============================================================================\n \"\"\"Utilities for testing multi-worker distribution strategies with Keras.\"\"\"\n \n-import tensorflow.compat.v2 as tf\n-\n import threading\n import unittest\n-import keras\n+\n+import tensorflow.compat.v2 as tf\n from tensorflow.python.distribute.cluster_resolver import (\n     SimpleClusterResolver,\n )\n-from keras.optimizers.optimizer_v2 import gradient_descent\n from tensorflow.python.platform import tf_logging as logging\n from tensorflow.python.training.server_lib import (\n     ClusterSpec,\n )\n \n+import keras\n+from keras.optimizers.optimizer_v2 import gradient_descent\n \n _portpicker_import_error = None\n try:\n\n@@ -14,6 +14,8 @@\n # ==============================================================================\n \"\"\"Strategy and optimizer combinations for combinations.combine().\"\"\"\n \n+import tensorflow.compat.v2 as tf\n+\n from keras.optimizers.optimizer_experimental import adam as adam_experimental\n from keras.optimizers.optimizer_v2 import adadelta as adadelta_keras_v2\n from keras.optimizers.optimizer_v2 import adagrad as adagrad_keras_v2\n@@ -25,8 +27,6 @@ from keras.optimizers.optimizer_v2 import (\n )\n from keras.optimizers.optimizer_v2 import nadam as nadam_keras_v2\n from keras.optimizers.optimizer_v2 import rmsprop as rmsprop_keras_v2\n-import tensorflow.compat.v2 as tf\n-\n \n gradient_descent_optimizer_v1_fn = (\n     tf.__internal__.test.combinations.NamedObject(\n\n@@ -16,10 +16,7 @@\n \n import time\n \n-import keras\n-from keras.testing_infra import test_utils\n import tensorflow.compat.v2 as tf\n-\n from tensorflow.python.distribute import (\n     multi_worker_test_base,\n )\n@@ -28,6 +25,9 @@ from tensorflow.python.distribute.cluster_resolver import (\n )\n from tensorflow.python.ops import resource_variable_ops\n \n+import keras\n+from keras.testing_infra import test_utils\n+\n \n # TODO(yuefengz): move the following implementation to Keras core.\n class MeanMetricSpec(tf.TypeSpec):\n\n@@ -20,10 +20,11 @@ saved_model's load() API is used. Keras's export_save_model() when used with\n tf.saved_model.save().\n \"\"\"\n \n+import tensorflow.compat.v2 as tf\n+\n from keras.distribute import saved_model_test_base as test_base\n from keras.saving import save\n from keras.testing_infra import test_utils\n-import tensorflow.compat.v2 as tf\n \n _DEFAULT_FUNCTION_KEY = \"serving_default\"\n \n\n@@ -14,12 +14,13 @@\n # ==============================================================================\n \"\"\"Tests for saving and loading using tf's saved_model APIs with DS.\"\"\"\n \n+import os\n+\n import tensorflow.compat.v2 as tf\n \n-import os\n-from keras.testing_infra import test_utils\n from keras.distribute import model_combinations\n from keras.distribute import saved_model_test_base as test_base\n+from keras.testing_infra import test_utils\n \n \n @test_utils.run_v2_only\n\n@@ -16,11 +16,11 @@\n \n import os\n \n-from absl.testing import parameterized\n-from keras.distribute import model_combinations\n import numpy as np\n-\n import tensorflow.compat.v2 as tf\n+from absl.testing import parameterized\n+\n+from keras.distribute import model_combinations\n \n _RANDOM_SEED = 1337\n _DEFAULT_FUNCTION_KEY = \"serving_default\"\n\n@@ -14,14 +14,14 @@\n # ==============================================================================\n \"\"\"Tests for ClusterCoordinator and Keras models.\"\"\"\n \n+import numpy as np\n+import tensorflow.compat.v2 as tf\n from absl.testing import parameterized\n \n import keras\n from keras.distribute import multi_worker_testing_utils\n from keras.distribute import strategy_combinations\n from keras.engine import base_layer\n-import numpy as np\n-import tensorflow.compat.v2 as tf\n \n \n class ShardedVariableTest(tf.test.TestCase, parameterized.TestCase):\n\n@@ -19,14 +19,15 @@ import os\n import threading\n import time\n \n+import numpy as np\n+import tensorflow.compat.v2 as tf\n from absl.testing import parameterized\n+from tensorflow.python.platform import tf_logging as logging\n+\n import keras\n from keras.distribute import sidecar_evaluator as sidecar_evaluator_lib\n from keras.optimizers.optimizer_v2 import gradient_descent\n from keras.testing_infra import test_utils\n-import numpy as np\n-import tensorflow.compat.v2 as tf\n-from tensorflow.python.platform import tf_logging as logging\n \n _BATCH_SIZE = 32\n \n\n@@ -14,9 +14,8 @@\n # ==============================================================================\n \"\"\"A simple functional keras model with one layer.\"\"\"\n \n-import tensorflow.compat.v2 as tf\n-\n import numpy as np\n+import tensorflow.compat.v2 as tf\n \n import keras\n from keras.distribute import model_collection_base\n\n@@ -16,7 +16,6 @@\n \n import tensorflow.compat.v2 as tf\n \n-\n multidevice_strategies = [\n     tf.__internal__.distribute.combinations.mirrored_strategy_with_gpu_and_cpu,\n     tf.__internal__.distribute.combinations.mirrored_strategy_with_two_gpus,\n\n@@ -14,12 +14,12 @@\n # ==============================================================================\n \"\"\"A simple network to use in tests and examples.\"\"\"\n \n+import tensorflow.compat.v2 as tf\n+\n from keras.legacy_tf_layers import core\n from keras.legacy_tf_layers import normalization\n from keras.optimizers.optimizer_v2 import optimizer_v2\n \n-import tensorflow.compat.v2 as tf\n-\n \n def minimize_loss_example(optimizer, use_bias=False, use_callable_loss=True):\n     \"\"\"Example of non-distribution-aware legacy code.\"\"\"\n\n@@ -15,7 +15,6 @@\n \"\"\"Utility functions for tests using TPUStrategy.\"\"\"\n \n import tensorflow.compat.v2 as tf\n-\n from absl import flags\n \n FLAGS = flags.FLAGS\n\n@@ -14,9 +14,10 @@\n # ==============================================================================\n \"\"\"Training state management.\"\"\"\n \n+import os\n+\n import tensorflow.compat.v2 as tf\n \n-import os\n from keras import backend\n from keras.distribute import distributed_file_utils\n from keras.utils import mode_keys\n\n@@ -14,12 +14,12 @@\n # ==============================================================================\n \"\"\"Tests of `worker_training_state.py` utilities.\"\"\"\n \n-import tensorflow.compat.v2 as tf\n-\n import os\n import sys\n \n+import tensorflow.compat.v2 as tf\n from absl.testing import parameterized\n+\n from keras import callbacks\n from keras.distribute import multi_worker_testing_utils\n \n\n@@ -19,9 +19,7 @@ _DTENSOR_API_ENABLED = True\n \n # Conditional import the dtensor API, since it is currently broken in OSS.\n if _DTENSOR_API_ENABLED:\n-    from tensorflow.compat.v2.experimental import (\n-        dtensor as dtensor_api,\n-    )  # pylint: disable=g-import-not-at-top\n+    from tensorflow.compat.v2.experimental import dtensor as dtensor_api\n else:\n     # Leave it with a placeholder, so that the import line from other python file\n     # will not break.\n\n@@ -14,14 +14,15 @@\n # ==============================================================================\n \"\"\"Tests for initializers.\"\"\"\n \n+import numpy as np\n+import tensorflow.compat.v2 as tf\n from absl.testing import parameterized\n+\n from keras import backend\n from keras import initializers\n from keras.dtensor import dtensor_api as dtensor\n from keras.dtensor import test_util\n from keras.utils import tf_utils\n-import numpy as np\n-import tensorflow.compat.v2 as tf\n \n \n class InitializersTest(test_util.DTensorBaseTest):\n\n@@ -20,7 +20,10 @@ public API/contract.\n \"\"\"\n \n \n+import numpy as np\n+import tensorflow.compat.v2 as tf\n from absl import logging\n+\n from keras import layers\n from keras import losses\n from keras import models\n@@ -28,8 +31,6 @@ from keras.datasets import mnist\n from keras.dtensor import dtensor_api as dtensor\n from keras.dtensor import layout_map as layout_map_lib\n from keras.utils import np_utils\n-import numpy as np\n-import tensorflow.compat.v2 as tf\n \n # pylint: disable=missing-function-docstring\n \n\n@@ -14,14 +14,15 @@\n # ==============================================================================\n \"\"\"Tests for layers.\"\"\"\n \n+import numpy as np\n+import tensorflow.compat.v2 as tf\n from absl.testing import parameterized\n+\n from keras import backend\n from keras import layers\n from keras.dtensor import dtensor_api as dtensor\n from keras.dtensor import test_util\n from keras.utils import tf_utils\n-import numpy as np\n-import tensorflow.compat.v2 as tf\n \n \n class LayersTest(test_util.DTensorBaseTest):\n\n@@ -19,13 +19,13 @@ import contextlib\n import re\n import threading\n \n+from tensorflow.python.util.tf_export import keras_export\n+\n from keras.dtensor import dtensor_api as dtensor\n from keras.dtensor import lazy_variable\n from keras.dtensor import utils\n from keras.engine import base_layer\n \n-from tensorflow.python.util.tf_export import keras_export\n-\n # pylint: disable=missing-class-docstring\n \n # We will skip the path for certain attributes when mapping the layout, e.g.\n\n@@ -14,17 +14,18 @@\n # ==============================================================================\n \"\"\"Tests for layout_map.\"\"\"\n \n-from keras import backend\n-from keras import layers\n-from keras.dtensor import dtensor_api as dtensor\n-from keras.dtensor import layout_map as layout_map_lib\n-from keras.utils import tf_utils\n import numpy as np\n import tensorflow.compat.v2 as tf\n \n # TODO(scottzhu): Fix the layout map test with keras/dtensor/test_util\n from keras.dtensor.tests import test_util\n \n+from keras import backend\n+from keras import layers\n+from keras.dtensor import dtensor_api as dtensor\n+from keras.dtensor import layout_map as layout_map_lib\n+from keras.utils import tf_utils\n+\n \n class LayoutMapTest(test_util.DTensorBaseTest):\n     def setUp(self):\n\n@@ -16,7 +16,6 @@\n \n import threading\n \n-\n from tensorflow.core.framework import attr_value_pb2\n from tensorflow.python.eager import context\n from tensorflow.python.framework import ops\n@@ -29,7 +28,6 @@ from tensorflow.python.training.tracking import (\n from tensorflow.python.util import compat\n from tensorflow.python.util import tf_contextlib\n \n-\n _DISABLE_LAZY_VARIABLE_INIT = threading.local()\n \n \n\n@@ -14,13 +14,14 @@\n # ==============================================================================\n \"\"\"Tests for metrics.\"\"\"\n \n+import numpy as np\n+import tensorflow.compat.v2 as tf\n from absl.testing import parameterized\n+\n from keras import metrics\n from keras.dtensor import dtensor_api as dtensor\n from keras.dtensor import test_util\n from keras.utils import tf_utils\n-import numpy as np\n-import tensorflow.compat.v2 as tf\n \n \n class MetricsTest(test_util.DTensorBaseTest):\n\n@@ -14,6 +14,10 @@\n # ==============================================================================\n \"\"\"E2E Tests for mnist_model.\"\"\"\n \n+import tensorflow.compat.v2 as tf\n+from tensorflow.dtensor.python import mesh_util\n+from tensorflow.dtensor.python import tpu_util\n+\n from keras import backend\n from keras.dtensor import dtensor_api as dtensor\n from keras.dtensor import integration_test_utils\n@@ -21,12 +25,6 @@ from keras.dtensor import optimizers as optimizer_lib\n from keras.dtensor import test_util\n from keras.utils import tf_utils\n \n-import tensorflow.compat.v2 as tf\n-\n-\n-from tensorflow.dtensor.python import mesh_util\n-from tensorflow.dtensor.python import tpu_util\n-\n \n class MnistTest(test_util.DTensorBaseTest):\n     def test_mnist_training_cpu(self):\n\n@@ -14,6 +14,10 @@\n # ==============================================================================\n \"\"\"DTensor specific Keras optimizers.\"\"\"\n \n+import tensorflow.compat.v2 as tf\n+from tensorflow.python.util.tf_export import keras_export\n+from tensorflow.tools.docs import doc_controls\n+\n from keras.dtensor import dtensor_api as dtensor\n from keras.optimizers.optimizer_experimental import adadelta\n from keras.optimizers.optimizer_experimental import adagrad\n@@ -23,11 +27,6 @@ from keras.optimizers.optimizer_experimental import rmsprop\n from keras.optimizers.optimizer_experimental import sgd\n from keras.optimizers.schedules import learning_rate_schedule\n \n-import tensorflow.compat.v2 as tf\n-\n-from tensorflow.python.util.tf_export import keras_export\n-from tensorflow.tools.docs import doc_controls\n-\n \n # pylint: disable=protected-access,missing-class-docstring\n class Optimizer(optimizer_lib._BaseOptimizer):\n\n@@ -14,12 +14,13 @@\n # ==============================================================================\n \"\"\"Tests for initializers.\"\"\"\n \n+import numpy as np\n+import tensorflow.compat.v2 as tf\n from absl.testing import parameterized\n+\n from keras.dtensor import dtensor_api as dtensor\n from keras.dtensor import optimizers\n from keras.dtensor import test_util\n-import numpy as np\n-import tensorflow.compat.v2 as tf\n \n \n class OptimizersTest(test_util.DTensorBaseTest):\n\n@@ -14,16 +14,12 @@\n # ==============================================================================\n \"\"\"Keras utilities for DTensor unit test.\"\"\"\n \n-from absl.testing import parameterized\n import numpy as np\n-\n import tensorflow.compat.v2 as tf\n-\n-\n+from absl.testing import parameterized\n from tensorflow.dtensor.python import api as dtensor_api\n from tensorflow.python.eager import context\n \n-\n _DEFAULT_GPU_MEMORY_LIMIT = 200  # MB\n \n \n\n@@ -16,9 +16,9 @@\n \n import inspect\n \n-from keras.dtensor import dtensor_api as dtensor\n import tensorflow.compat.v2 as tf\n \n+from keras.dtensor import dtensor_api as dtensor\n \n # All the variable names in the default keras layers. We will use those to map\n # against the args in the __init__ method to find corresponding layout args.\n\n@@ -14,15 +14,15 @@\n # ==============================================================================\n \"\"\"Tests for utils.\"\"\"\n \n+import numpy as np\n+import tensorflow.compat.v2 as tf\n from absl.testing import parameterized\n+\n from keras import layers\n from keras.dtensor import dtensor_api as dtensor\n from keras.dtensor import test_util\n from keras.dtensor import utils\n \n-import numpy as np\n-import tensorflow.compat.v2 as tf\n-\n \n class UtilsTest(test_util.DTensorBaseTest):\n     def setUp(self):\n\n@@ -17,8 +17,6 @@\n # pylint: disable=g-bad-import-order\n \"\"\"Contains the base Layer class, from which all layers inherit.\"\"\"\n \n-import tensorflow.compat.v2 as tf\n-\n import collections\n import contextlib\n import functools\n@@ -29,8 +27,15 @@ import warnings\n import weakref\n \n import numpy as np\n-\n+import tensorflow.compat.v2 as tf\n from google.protobuf import json_format\n+from tensorflow.python.platform import tf_logging\n+from tensorflow.python.util.tf_export import (\n+    get_canonical_name_for_symbol,\n+)\n+from tensorflow.python.util.tf_export import keras_export\n+from tensorflow.tools.docs import doc_controls\n+\n from keras import backend\n from keras import constraints\n from keras import initializers\n@@ -54,17 +59,11 @@ from keras.utils import version_utils\n \n # A module that only depends on `keras.layers` import these from here.\n from keras.utils.generic_utils import (\n-    to_snake_case,\n-)  # pylint: disable=unused-import\n-from keras.utils.tf_utils import (\n-    is_tensor_or_tensor_list,\n-)  # pylint: disable=unused-import\n-from tensorflow.python.platform import tf_logging\n-from tensorflow.python.util.tf_export import (\n-    get_canonical_name_for_symbol,\n+    to_snake_case,  # pylint: disable=unused-import\n+)\n+from keras.utils.tf_utils import (\n+    is_tensor_or_tensor_list,  # pylint: disable=unused-import\n )\n-from tensorflow.python.util.tf_export import keras_export\n-from tensorflow.tools.docs import doc_controls\n \n # pylint: disable=g-inconsistent-quotes\n metrics_mod = generic_utils.LazyLoader(\n\n@@ -13,24 +13,25 @@\n # limitations under the License.\n # ==============================================================================\n \"\"\"Tests for TensorFlow 2.0 layer behavior.\"\"\"\n-# pylint: disable=g-bad-import-order\n-import tensorflow.compat.v2 as tf\n-\n import copy\n import os\n \n import numpy as np\n+\n+# pylint: disable=g-bad-import-order\n+import tensorflow.compat.v2 as tf\n+\n from keras import backend\n-from keras.testing_infra import test_combinations\n from keras import layers\n from keras import regularizers\n-from keras.testing_infra import test_utils\n from keras.engine import base_layer\n from keras.engine import input_layer\n from keras.engine import sequential\n from keras.engine import training as training_lib\n from keras.legacy_tf_layers import core as legacy_core\n from keras.optimizers.optimizer_v2 import rmsprop\n+from keras.testing_infra import test_combinations\n+from keras.testing_infra import test_utils\n from keras.utils import control_flow_util\n \n \n\n@@ -19,12 +19,15 @@ import tensorflow.compat.v1 as tf1\n \n import functools\n import threading\n+\n+import tensorflow.compat.v2 as tf\n+from tensorflow.python.util.tf_export import keras_export\n+\n from keras import backend\n from keras.dtensor import dtensor_api as dtensor\n from keras.utils import control_flow_util\n from keras.utils import tf_inspect\n from keras.utils import tf_utils\n-from tensorflow.python.util.tf_export import keras_export\n \n _call_context = threading.local()\n \n@@ -32,9 +35,7 @@ _call_context = threading.local()\n def create_mean_metric(value, name=None):\n     # import keras will import base_layer and then this module, and metric\n     # relies on base_layer, which result into a cyclic dependency.\n-    from keras import (\n-        metrics as metrics_module,\n-    )  # pylint: disable=g-import-not-at-top\n+    from keras import metrics as metrics_module\n \n     metric_obj = metrics_module.Mean(name=name, dtype=value.dtype)\n     return metric_obj, metric_obj(value)\n@@ -241,7 +242,7 @@ def _create_keras_history_helper(tensors, processed_ops, created_layers):\n     # Import of `base_layer` needed in order to create `TensorFlowOpLayer`.\n     # Cannot be imported at top because of circular dependencies.\n     # TODO(omalleyt): Resolve circular dependency.\n-    from keras.engine import base_layer  # pylint: disable=g-import-not-at-top\n+    from keras.engine import base_layer\n \n     tensor_list = tf.nest.flatten(tensors)\n     sparse_ops = []\n\n@@ -14,13 +14,12 @@\n # ==============================================================================\n \n import numpy as np\n-\n import tensorflow.compat.v2 as tf\n \n import keras\n from keras import backend\n-from keras.testing_infra import test_combinations\n from keras.engine import base_layer_utils\n+from keras.testing_infra import test_combinations\n \n \n @test_combinations.generate(test_combinations.combine(mode=[\"graph\", \"eager\"]))\n\n@@ -16,13 +16,15 @@\n # pylint: disable=g-bad-import-order\n \"\"\"Contains the base Layer class, from which all layers inherit.\"\"\"\n \n-import tensorflow.compat.v2 as tf\n-\n import functools\n import itertools\n import threading\n \n import numpy as np\n+import tensorflow.compat.v2 as tf\n+from tensorflow.python.platform import tf_logging\n+from tensorflow.tools.docs import doc_controls\n+\n from keras import backend\n from keras import constraints\n from keras import initializers\n@@ -42,13 +44,11 @@ from keras.utils import tf_utils\n \n # A module that only depends on `keras.layers` import these from here.\n from keras.utils.generic_utils import (\n-    to_snake_case,\n-)  # pylint: disable=unused-import\n+    to_snake_case,  # pylint: disable=unused-import\n+)\n from keras.utils.tf_utils import (\n-    is_tensor_or_tensor_list,\n-)  # pylint: disable=unused-import\n-from tensorflow.python.platform import tf_logging\n-from tensorflow.tools.docs import doc_controls\n+    is_tensor_or_tensor_list,  # pylint: disable=unused-import\n+)\n \n \n # pylint: disable=g-classes-have-attributes\n@@ -2367,9 +2367,7 @@ class Layer(base_layer.Layer):\n             pass\n \n         # Keep track of metric instance created in subclassed layer.\n-        from keras import (\n-            metrics as metrics_module,\n-        )  # pylint: disable=g-import-not-at-top\n+        from keras import metrics as metrics_module\n \n         for val in tf.nest.flatten(value):\n             if isinstance(val, metrics_module.Metric) and hasattr(\n\n@@ -16,15 +16,14 @@\n \n import abc\n \n-from keras.engine import data_adapter\n-from keras.engine.base_layer import Layer\n-from keras.utils import version_utils\n import tensorflow.compat.v2 as tf\n-\n from tensorflow.python.eager import context\n from tensorflow.python.util.tf_export import keras_export\n from tensorflow.tools.docs import doc_controls\n \n+from keras.engine import data_adapter\n+from keras.engine.base_layer import Layer\n+from keras.utils import version_utils\n \n keras_kpl_gauge = tf.__internal__.monitoring.BoolGauge(\n     \"/tensorflow/api/keras/layers/preprocessing\",\n\n@@ -16,12 +16,13 @@\n \n import os\n \n+import numpy as np\n+import tensorflow.compat.v2 as tf\n+\n import keras\n from keras.engine import base_preprocessing_layer\n from keras.testing_infra import test_combinations\n from keras.testing_infra import test_utils\n-import numpy as np\n-import tensorflow.compat.v2 as tf\n \n \n # Define a test-only implementation of BasePreprocessingLayer to validate\n\n@@ -17,13 +17,15 @@\n \n \n import copy\n+\n+import tensorflow.compat.v2 as tf\n+\n from keras import losses as losses_mod\n from keras import metrics as metrics_mod\n from keras.saving.experimental import saving_lib\n from keras.utils import generic_utils\n from keras.utils import losses_utils\n from keras.utils import tf_utils\n-import tensorflow.compat.v2 as tf\n \n \n class Container:\n\n@@ -15,11 +15,12 @@\n \"\"\"Tests for compile utitilies.\"\"\"\n \n import tensorflow.compat.v2 as tf\n+\n from keras import backend\n-from keras.testing_infra import test_combinations\n from keras import losses as losses_mod\n from keras import metrics as metrics_mod\n from keras.engine import compile_utils\n+from keras.testing_infra import test_combinations\n \n \n class LossesContainerTest(test_combinations.TestCase):\n\n@@ -14,16 +14,15 @@\n # ==============================================================================\n \"\"\"Tests for dynamic control flow behavior with Keras.\"\"\"\n \n-import tensorflow.compat.v2 as tf\n-\n-from absl.testing import parameterized\n import numpy as np\n+import tensorflow.compat.v2 as tf\n+from absl.testing import parameterized\n \n import keras\n-from keras.testing_infra import test_combinations\n-from keras.testing_infra import test_utils\n from keras.engine import base_layer\n from keras.optimizers.optimizer_v2 import rmsprop\n+from keras.testing_infra import test_combinations\n+from keras.testing_infra import test_utils\n \n \n class ControlFlowLayer1(base_layer.Layer):\n\n@@ -14,10 +14,9 @@\n # ==============================================================================\n \"\"\"Tests for numerical correctness.\"\"\"\n \n-import tensorflow.compat.v2 as tf\n-\n-from absl.testing import parameterized\n import numpy as np\n+import tensorflow.compat.v2 as tf\n+from absl.testing import parameterized\n \n import keras\n from keras.testing_infra import test_combinations\n\n@@ -14,8 +14,6 @@\n # ==============================================================================\n \"\"\"Adapter module that convert different input data objects into tf.dataset.\"\"\"\n \n-import tensorflow.compat.v2 as tf\n-\n import abc\n import contextlib\n import functools\n@@ -24,18 +22,20 @@ import math\n import random\n \n import numpy as np\n+import tensorflow.compat.v2 as tf\n+from tensorflow.python.distribute.input_lib import (\n+    DistributedDataset,\n+)\n from tensorflow.python.eager import context\n+from tensorflow.python.framework import type_spec\n+from tensorflow.python.platform import tf_logging as logging\n+from tensorflow.python.util.tf_export import keras_export\n+\n from keras import backend\n from keras.engine import training_utils\n from keras.utils import data_utils\n from keras.utils import dataset_creator\n from keras.utils import tf_utils\n-from tensorflow.python.distribute.input_lib import (\n-    DistributedDataset,\n-)\n-from tensorflow.python.framework import type_spec\n-from tensorflow.python.platform import tf_logging as logging\n-from tensorflow.python.util.tf_export import keras_export\n \n try:\n     import pandas as pd  # pylint: disable=g-import-not-at-top\n\n@@ -14,19 +14,18 @@\n # ==============================================================================\n \"\"\"DataAdapter tests.\"\"\"\n \n-import tensorflow.compat.v2 as tf\n-\n import math\n \n-from absl.testing import parameterized\n import numpy as np\n+import tensorflow.compat.v2 as tf\n+from absl.testing import parameterized\n+from tensorflow.python.eager import context\n \n import keras\n+from keras.engine import data_adapter\n from keras.testing_infra import test_combinations\n from keras.testing_infra import test_utils\n-from keras.engine import data_adapter\n from keras.utils import data_utils\n-from tensorflow.python.eager import context\n \n \n class DummyArrayLike:\n\n@@ -14,11 +14,11 @@\n # ==============================================================================\n \"\"\"Tests specific to deferred-build `Sequential` models.\"\"\"\n \n-import tensorflow.compat.v2 as tf\n-\n import os\n import unittest\n+\n import numpy as np\n+import tensorflow.compat.v2 as tf\n \n import keras\n from keras.testing_infra import test_combinations\n\n@@ -14,15 +14,14 @@\n # ==============================================================================\n \"\"\"Tests specific to Feature Columns integration.\"\"\"\n \n+import numpy as np\n import tensorflow.compat.v2 as tf\n \n-import numpy as np\n-\n import keras\n-from keras.testing_infra import test_combinations\n from keras import metrics as metrics_module\n-from keras.testing_infra import test_utils\n from keras.feature_column import dense_features as df\n+from keras.testing_infra import test_combinations\n+from keras.testing_infra import test_utils\n from keras.utils import np_utils\n \n \n\n@@ -20,6 +20,11 @@ import collections\n import copy\n import itertools\n import warnings\n+\n+import tensorflow.compat.v2 as tf\n+from tensorflow.python.platform import tf_logging as logging\n+from tensorflow.tools.docs import doc_controls\n+\n from keras import backend\n from keras.dtensor import layout_map as layout_map_lib\n from keras.engine import base_layer\n@@ -35,9 +40,6 @@ from keras.saving.saved_model import network_serialization\n from keras.utils import generic_utils\n from keras.utils import tf_inspect\n from keras.utils import tf_utils\n-import tensorflow.compat.v2 as tf\n-from tensorflow.python.platform import tf_logging as logging\n-from tensorflow.tools.docs import doc_controls\n \n \n # pylint: disable=g-classes-have-attributes\n@@ -1425,9 +1427,7 @@ def reconstruct_from_config(config, custom_objects=None, created_layers=None):\n             layer = created_layers[layer_name]\n         else:\n             # Instantiate layer.\n-            from keras.layers import (\n-                deserialize as deserialize_layer,\n-            )  # pylint: disable=g-import-not-at-top\n+            from keras.layers import deserialize as deserialize_layer\n \n             layer = deserialize_layer(layer_data, custom_objects=custom_objects)\n             created_layers[layer_name] = layer\n\n@@ -16,6 +16,13 @@\n \n import warnings\n \n+import numpy as np\n+import tensorflow.compat.v2 as tf\n+from tensorflow.python.framework import extension_type\n+from tensorflow.python.training.tracking.util import (\n+    Checkpoint,\n+)\n+\n from keras import backend\n from keras import layers\n from keras import losses\n@@ -30,15 +37,6 @@ from keras.testing_infra import test_utils\n from keras.utils import layer_utils\n from keras.utils import tf_utils\n \n-import numpy as np\n-import tensorflow.compat.v2 as tf\n-\n-\n-from tensorflow.python.framework import extension_type\n-from tensorflow.python.training.tracking.util import (\n-    Checkpoint,\n-)\n-\n \n class NetworkConstructionTest(test_combinations.TestCase):\n     def test_default_model_name(self):\n\n@@ -14,13 +14,13 @@\n # ==============================================================================\n \"\"\"Utilities for keras functional model.\"\"\"\n \n+import tensorflow.compat.v2 as tf\n+\n from keras import backend\n from keras.engine import input_layer as input_layer_module\n from keras.engine import keras_tensor\n from keras.engine import node as node_module\n \n-import tensorflow.compat.v2 as tf\n-\n _KERAS_TENSOR_TYPE_CHECK_ERROR_MSG = (\n     \"Found unexpected instance while processing input tensors for keras \"\n     \"functional model. Expecting KerasTensor which is from tf.keras.Input() \"\n\n@@ -17,15 +17,15 @@\n import collections\n import os\n \n+import numpy as np\n+import tensorflow.compat.v2 as tf\n+\n from keras import layers\n from keras import models\n from keras.engine import functional_utils\n from keras.engine import input_layer as input_layer_lib\n from keras.testing_infra import test_combinations\n \n-import numpy as np\n-import tensorflow.compat.v2 as tf\n-\n \n @test_combinations.run_all_keras_modes(always_skip_v1=True)\n class FunctionalModelSlideTest(test_combinations.TestCase):\n\n@@ -16,6 +16,8 @@\n \"\"\"Input layer code (`Input` and `InputLayer`).\"\"\"\n \n import tensorflow.compat.v2 as tf\n+from tensorflow.python.util.tf_export import keras_export\n+\n from keras import backend\n from keras.distribute import distributed_training_utils\n from keras.engine import base_layer\n@@ -24,7 +26,6 @@ from keras.engine import node as node_module\n from keras.saving.saved_model import layer_serialization\n from keras.utils import tf_utils\n from keras.utils import traceback_utils\n-from tensorflow.python.util.tf_export import keras_export\n \n \n def _assert_other_arg_none(arg_name, arg):\n\n@@ -16,12 +16,13 @@\n \n import tensorflow.compat.v2 as tf\n from tensorflow.python.framework import type_spec\n+\n from keras import backend\n-from keras.testing_infra import test_combinations\n from keras.engine import functional\n from keras.engine import input_layer as input_layer_lib\n from keras.layers import core\n from keras.saving import model_config\n+from keras.testing_infra import test_combinations\n \n \n class TwoTensors(tf.__internal__.CompositeTensor):\n\n@@ -17,10 +17,11 @@\n \"\"\"Contains the InputSpec class.\"\"\"\n \n import tensorflow.compat.v2 as tf\n-from keras import backend\n from tensorflow.python.util.tf_export import keras_export\n from tensorflow.python.util.tf_export import tf_export\n \n+from keras import backend\n+\n \n @keras_export(\n     \"keras.layers.InputSpec\",\n\n@@ -14,11 +14,11 @@\n # ==============================================================================\n \"\"\"Keras Input Tensor used to track functional API Topology.\"\"\"\n \n-from keras.utils import object_identity\n import tensorflow.compat.v2 as tf\n-\n from tensorflow.python.data.util import structure\n \n+from keras.utils import object_identity\n+\n # pylint: disable=g-classes-have-attributes\n \n \n\n@@ -16,13 +16,13 @@\n # pylint: disable=g-bad-import-order\n \n import tensorflow.compat.v2 as tf\n-\n from absl.testing import parameterized\n-from keras.testing_infra import test_combinations\n+\n from keras import layers\n-from keras.testing_infra import test_utils\n from keras.engine import keras_tensor\n from keras.engine import training\n+from keras.testing_infra import test_combinations\n+from keras.testing_infra import test_utils\n \n \n class CustomTypeSpec(tf.TypeSpec):\n\n@@ -16,12 +16,13 @@\n # pylint: disable=g-classes-have-attributes\n \"\"\"Contains the `Node` class.\"\"\"\n \n-import tensorflow.compat.v2 as tf\n-\n import collections\n import copy\n import json\n+\n import numpy as np\n+import tensorflow.compat.v2 as tf\n+\n from keras import backend\n from keras.engine import base_layer_utils\n from keras.saving.saved_model import json_utils\n\n@@ -14,10 +14,11 @@\n # ,============================================================================\n \"\"\"Tests for layer graphs construction & handling.\"\"\"\n \n+import tensorflow.compat.v2 as tf\n+\n from keras.engine import base_layer\n from keras.engine import node as node_module\n from keras.testing_infra import test_combinations\n-import tensorflow.compat.v2 as tf\n \n \n class DummyTensor(tf.__internal__.types.Tensor):\n\n@@ -14,13 +14,13 @@\n # ==============================================================================\n \"\"\"Utility object to handler partial batches for TPUStrategy.\"\"\"\n \n+import numpy as np\n import tensorflow.compat.v2 as tf\n \n-# pylint: disable=protected-access\n-\n-import numpy as np\n from keras import backend\n \n+# pylint: disable=protected-access\n+\n \n class PartialBatchPaddingHandler:\n     \"\"\"A container that holds info about partial batches for `predict()`.\"\"\"\n\n@@ -14,14 +14,14 @@\n # ==============================================================================\n \"\"\"RaggedKerasTensor tests.\"\"\"\n \n-import tensorflow.compat.v2 as tf\n-\n-from absl.testing import parameterized\n import numpy as np\n-from keras.testing_infra import test_combinations\n+import tensorflow.compat.v2 as tf\n+from absl.testing import parameterized\n+\n from keras import layers\n-from keras.testing_infra import test_utils\n from keras.engine import training\n+from keras.testing_infra import test_combinations\n+from keras.testing_infra import test_utils\n \n \n @test_utils.run_v2_only\n\n@@ -15,9 +15,12 @@\n # pylint: disable=protected-access\n \"\"\"Home of the `Sequential` model.\"\"\"\n \n-import tensorflow.compat.v2 as tf\n-\n import copy\n+\n+import tensorflow.compat.v2 as tf\n+from tensorflow.python.platform import tf_logging as logging\n+from tensorflow.python.util.tf_export import keras_export\n+\n from keras import layers as layer_module\n from keras.engine import base_layer\n from keras.engine import functional\n@@ -29,9 +32,6 @@ from keras.utils import layer_utils\n from keras.utils import tf_inspect\n from keras.utils import tf_utils\n from keras.utils import traceback_utils\n-from tensorflow.python.platform import tf_logging as logging\n-from tensorflow.python.util.tf_export import keras_export\n-\n \n SINGLE_LAYER_OUTPUT_ERROR_MSG = (\n     \"All layers in a Sequential model should have \"\n\n@@ -14,15 +14,14 @@\n # ==============================================================================\n \"\"\"Tests specific to `Sequential` model.\"\"\"\n \n-import tensorflow.compat.v2 as tf\n-\n-from absl.testing import parameterized\n import numpy as np\n-\n-import keras\n+import tensorflow.compat.v2 as tf\n+from absl.testing import parameterized\n from tensorflow.python.framework import (\n     test_util as tf_test_utils,\n )\n+\n+import keras\n from keras.testing_infra import test_combinations\n from keras.testing_infra import test_utils\n \n\n@@ -21,6 +21,13 @@ import os\n import warnings\n import weakref\n \n+import numpy as np\n+import tensorflow.compat.v2 as tf\n+from tensorflow.python.eager import context\n+from tensorflow.python.platform import tf_logging as logging\n+from tensorflow.python.util.tf_export import keras_export\n+from tensorflow.tools.docs import doc_controls\n+\n from keras import backend\n from keras import callbacks as callbacks_module\n from keras import optimizers\n@@ -51,20 +58,10 @@ from keras.utils import traceback_utils\n from keras.utils import version_utils\n from keras.utils.mode_keys import ModeKeys\n \n-import numpy as np\n-import tensorflow.compat.v2 as tf\n-\n-from tensorflow.python.eager import context\n-from tensorflow.python.platform import tf_logging as logging\n-from tensorflow.python.util.tf_export import keras_export\n-from tensorflow.tools.docs import doc_controls\n-\n-# pylint: disable=g-import-not-at-top\n try:\n     import h5py\n except ImportError:\n     h5py = None\n-# pylint: enable=g-import-not-at-top\n \n \n @keras_export(\"keras.Model\", \"keras.models.Model\")\n@@ -189,9 +186,7 @@ class Model(base_layer.Layer, version_utils.ModelVersionSelector):\n         # Signature detection\n         if is_functional_model_init_params(args, kwargs) and cls == Model:\n             # Functional model\n-            from keras.engine import (\n-                functional,\n-            )  # pylint: disable=g-import-not-at-top\n+            from keras.engine import functional\n \n             return functional.Functional(skip_init=True, *args, **kwargs)\n         else:\n@@ -206,9 +201,7 @@ class Model(base_layer.Layer, version_utils.ModelVersionSelector):\n         # Special case for Subclassed Functional Model, which we couldn't detect\n         # when __new__ is called. We only realize it is a functional model when\n         # it calls super.__init__ with input and output tensor.\n-        from keras.engine import (\n-            functional,\n-        )  # pylint: disable=g-import-not-at-top\n+        from keras.engine import functional\n \n         if is_functional_model_init_params(args, kwargs) and not isinstance(\n             self, functional.Functional\n@@ -553,7 +546,6 @@ class Model(base_layer.Layer, version_utils.ModelVersionSelector):\n                 _convert_to_graph_inputs, copied_kwargs\n             )\n \n-            # pylint: disable=g-import-not-at-top\n             with layout_map_lib.layout_map_scope(self._layout_map):\n                 # We ignore the result here.\n                 super().__call__(inputs, *copied_args, **copied_kwargs)\n@@ -2963,9 +2955,7 @@ class Model(base_layer.Layer, version_utils.ModelVersionSelector):\n         Returns:\n             Model config with Keras version information added.\n         \"\"\"\n-        from keras import (\n-            __version__ as keras_version,\n-        )  # pylint: disable=g-import-not-at-top\n+        from keras import __version__ as keras_version\n \n         config = self.get_config()\n         model_config = {\n@@ -3025,9 +3015,7 @@ class Model(base_layer.Layer, version_utils.ModelVersionSelector):\n         # `Functional`. In the case that `cls` is meant to behave like a child\n         # class of `Functional` but only inherits from the `Model` class, we\n         # have to call `cls(...)` instead of `Functional.from_config`.\n-        from keras.engine import (\n-            functional,\n-        )  # pylint: disable=g-import-not-at-top\n+        from keras.engine import functional\n \n         with generic_utils.SharedObjectLoadingScope():\n             functional_model_keys = [\n@@ -3946,8 +3934,8 @@ def disable_multi_worker(method):\n \n def inject_functional_model_class(cls):\n     \"\"\"Inject `Functional` into the hierarchy of this class if needed.\"\"\"\n-    from keras.engine import functional  # pylint: disable=g-import-not-at-top\n-    from keras.engine import training_v1  # pylint: disable=g-import-not-at-top\n+    from keras.engine import functional\n+    from keras.engine import training_v1\n \n     if cls == Model or cls == training_v1.Model:\n         return functional.Functional\n\n@@ -14,23 +14,22 @@\n # ==============================================================================\n \"\"\"Tests for model.fit calls with a Dataset object passed as validation_data.\"\"\"\n \n-import tensorflow.compat.v2 as tf\n-\n import io\n import sys\n from unittest import mock\n \n-from absl.testing import parameterized\n import numpy as np\n-\n-import keras\n+import tensorflow.compat.v2 as tf\n+from absl.testing import parameterized\n from tensorflow.python.framework import (\n     test_util as tf_test_utils,\n )\n+\n+import keras\n from keras.engine import data_adapter\n+from keras.layers import core\n from keras.testing_infra import test_combinations\n from keras.testing_infra import test_utils\n-from keras.layers import core\n from keras.utils import io_utils\n \n \n\n@@ -14,22 +14,23 @@\n # ==============================================================================\n \"\"\"Part of the Keras training engine related to plain array data.\"\"\"\n \n-import tensorflow.compat.v2 as tf\n-\n-# pylint: disable=protected-access\n-\n import functools\n \n import numpy as np\n+import tensorflow.compat.v2 as tf\n+from tensorflow.python.platform import tf_logging as logging\n+\n from keras import backend\n from keras import callbacks as cbks\n from keras.distribute import distributed_training_utils_v1\n from keras.engine import training_utils_v1\n+from keras.utils import io_utils\n from keras.utils.generic_utils import make_batches\n from keras.utils.generic_utils import slice_arrays\n-from keras.utils import io_utils\n from keras.utils.mode_keys import ModeKeys\n-from tensorflow.python.platform import tf_logging as logging\n+\n+# pylint: disable=protected-access\n+\n \n try:\n     from scipy.sparse import issparse  # pylint: disable=g-import-not-at-top\n\n@@ -14,20 +14,19 @@\n # ==============================================================================\n \"\"\"Tests for training routines.\"\"\"\n \n-import tensorflow.compat.v2 as tf\n-\n import io\n import sys\n \n import numpy as np\n+import tensorflow.compat.v2 as tf\n+from tensorflow.python.platform import tf_logging as logging\n \n import keras\n from keras import callbacks\n-from keras.testing_infra import test_combinations\n from keras import metrics as metrics_module\n+from keras.testing_infra import test_combinations\n from keras.testing_infra import test_utils\n from keras.utils import io_utils\n-from tensorflow.python.platform import tf_logging as logging\n \n \n class BatchCounterCallback(callbacks.Callback):\n\n@@ -14,12 +14,11 @@\n # ==============================================================================\n \"\"\"Part of the Keras training engine related to distributed training.\"\"\"\n \n-import tensorflow.compat.v2 as tf\n-\n-# pylint: disable=protected-access\n-\n import numpy as np\n+import tensorflow.compat.v2 as tf\n from tensorflow.python.distribute import input_lib\n+from tensorflow.python.platform import tf_logging as logging\n+\n from keras import backend\n from keras import callbacks as cbks\n from keras.distribute import distribute_coordinator_utils as dc\n@@ -29,7 +28,8 @@ from keras.engine import training_arrays_v1\n from keras.engine import training_utils_v1\n from keras.utils.generic_utils import Progbar\n from keras.utils.mode_keys import ModeKeys\n-from tensorflow.python.platform import tf_logging as logging\n+\n+# pylint: disable=protected-access\n \n \n def _per_replica_execution_function(model, mode):\n\n@@ -14,16 +14,15 @@\n # ==============================================================================\n \"\"\"Tests for training routines.\"\"\"\n \n-import tensorflow.compat.v2 as tf\n-\n-from absl.testing import parameterized\n import numpy as np\n+import tensorflow.compat.v2 as tf\n+from absl.testing import parameterized\n \n import keras\n-from keras.testing_infra import test_combinations\n from keras import metrics as metrics_module\n-from keras.testing_infra import test_utils\n from keras.optimizers.optimizer_v2 import rmsprop\n+from keras.testing_infra import test_combinations\n+from keras.testing_infra import test_utils\n \n \n class TrainingTest(test_combinations.TestCase):\n\n@@ -14,19 +14,18 @@\n # ==============================================================================\n \"\"\"Keras training and evaluation routines for eager execution.\"\"\"\n \n-import tensorflow.compat.v2 as tf\n-\n-# pylint: disable=protected-access\n-\n import numpy as np\n-\n+import tensorflow.compat.v2 as tf\n from tensorflow.python.eager.backprop import GradientTape\n+from tensorflow.python.platform import tf_logging as logging\n+\n from keras import backend\n from keras.engine import training_utils\n from keras.engine import training_utils_v1\n from keras.mixed_precision import loss_scale_optimizer\n from keras.utils import losses_utils\n-from tensorflow.python.platform import tf_logging as logging\n+\n+# pylint: disable=protected-access\n \n \n def _eager_loss_fn(outputs, targets, loss_fn, output_name):\n\n@@ -14,21 +14,21 @@\n # ==============================================================================\n \"\"\"Tests for training routines.\"\"\"\n \n-import tensorflow.compat.v2 as tf\n-\n import itertools\n \n-from absl.testing import parameterized\n import numpy as np\n-from keras.testing_infra import test_combinations\n+import tensorflow.compat.v2 as tf\n+from absl.testing import parameterized\n+\n from keras import layers as layers_module\n from keras import losses\n from keras import metrics as metrics_module\n-from keras.testing_infra import test_utils\n from keras.engine import input_layer\n from keras.engine import training\n from keras.engine import training_generator_v1\n from keras.optimizers.optimizer_v2 import rmsprop\n+from keras.testing_infra import test_combinations\n+from keras.testing_infra import test_utils\n from keras.utils import data_utils\n \n \n\n@@ -15,14 +15,13 @@\n \"\"\"Part of the Keras training engine related to Python generators of array data.\n \"\"\"\n \n-import tensorflow.compat.v2 as tf\n-\n-# pylint: disable=protected-access\n-\n import functools\n import math\n \n import numpy as np\n+import tensorflow.compat.v2 as tf\n+from tensorflow.python.platform import tf_logging as logging\n+\n from keras import backend\n from keras import callbacks as cbks\n from keras.engine import training_utils\n@@ -30,7 +29,8 @@ from keras.engine import training_utils_v1\n from keras.utils import data_utils\n from keras.utils import generic_utils\n from keras.utils.mode_keys import ModeKeys\n-from tensorflow.python.platform import tf_logging as logging\n+\n+# pylint: disable=protected-access\n \n \n def model_iteration(\n\n@@ -14,16 +14,16 @@\n # ==============================================================================\n \"\"\"Tests for training routines.\"\"\"\n \n-import tensorflow.compat.v2 as tf\n-\n-from absl.testing import parameterized\n import numpy as np\n+import tensorflow.compat.v2 as tf\n+from absl.testing import parameterized\n+\n from keras import backend\n-from keras.testing_infra import test_combinations\n-from keras.testing_infra import test_utils\n from keras.engine import input_layer\n from keras.engine import training\n from keras.layers.convolutional import Conv2D\n+from keras.testing_infra import test_combinations\n+from keras.testing_infra import test_utils\n \n \n class TrainingGPUTest(tf.test.TestCase, parameterized.TestCase):\n\n@@ -14,13 +14,12 @@\n # ==============================================================================\n \"\"\"End-to-end tests for a variety of small models.\"\"\"\n \n-import tensorflow.compat.v2 as tf\n-\n import collections\n import itertools\n \n-from absl.testing import parameterized\n import numpy as np\n+import tensorflow.compat.v2 as tf\n+from absl.testing import parameterized\n \n import keras\n from keras.testing_infra import test_combinations\n\n@@ -20,7 +20,17 @@ import io\n import sys\n import tempfile\n \n+import numpy as np\n+import tensorflow.compat.v2 as tf\n from absl.testing import parameterized\n+from tensorflow.python.framework import (\n+    test_util as tf_test_utils,\n+)\n+from tensorflow.python.platform import tf_logging as logging\n+from tensorflow.python.training.rmsprop import (\n+    RMSPropOptimizer,\n+)\n+\n import keras\n from keras import backend\n from keras import layers as layers_module\n@@ -39,16 +49,6 @@ from keras.testing_infra import test_utils\n from keras.utils import data_utils\n from keras.utils import io_utils\n from keras.utils import np_utils\n-import numpy as np\n-import tensorflow.compat.v2 as tf\n-\n-from tensorflow.python.framework import (\n-    test_util as tf_test_utils,\n-)\n-from tensorflow.python.platform import tf_logging as logging\n-from tensorflow.python.training.rmsprop import (\n-    RMSPropOptimizer,\n-)\n \n try:\n     import scipy.sparse as scipy_sparse  # pylint: disable=g-import-not-at-top\n\n@@ -14,9 +14,9 @@\n # ==============================================================================\n \"\"\"Training-related utilities.\"\"\"\n \n+import numpy as np\n import tensorflow.compat.v2 as tf\n \n-import numpy as np\n from keras.utils import generic_utils\n \n \n\n@@ -14,8 +14,6 @@\n # ==============================================================================\n \"\"\"Training-related utilities.\"\"\"\n \n-import tensorflow.compat.v2 as tf\n-\n import abc\n import atexit\n import collections\n@@ -25,6 +23,9 @@ import threading\n import time\n \n import numpy as np\n+import tensorflow.compat.v2 as tf\n+from tensorflow.python.platform import tf_logging as logging\n+\n from keras import backend\n from keras import callbacks as cbks\n from keras import losses\n@@ -33,7 +34,6 @@ from keras.utils import data_utils\n from keras.utils import generic_utils\n from keras.utils import losses_utils\n from keras.utils import tf_inspect\n-from tensorflow.python.platform import tf_logging as logging\n \n \n def is_composite_or_composite_value(tensor):\n\n@@ -14,20 +14,20 @@\n # ==============================================================================\n \"\"\"Tests for training utility functions.\"\"\"\n \n-import tensorflow.compat.v2 as tf\n-\n import functools\n import multiprocessing.pool\n import time\n \n-from absl.testing import parameterized\n import numpy as np\n+import tensorflow.compat.v2 as tf\n+from absl.testing import parameterized\n+from tensorflow.python.platform import tf_logging as logging\n+\n from keras import backend\n-from keras.testing_infra import test_combinations\n-from keras.testing_infra import test_utils\n from keras.engine import keras_tensor\n from keras.engine import training_utils_v1\n-from tensorflow.python.platform import tf_logging as logging\n+from keras.testing_infra import test_combinations\n+from keras.testing_infra import test_utils\n \n \n class ModelInputsTest(tf.test.TestCase):\n\n@@ -13,17 +13,18 @@\n # limitations under the License.\n # ==============================================================================\n \"\"\"V1 Training-related part of the Keras engine.\"\"\"\n-# pylint: disable=g-classes-have-attributes\n-import tensorflow.compat.v2 as tf\n-\n import collections\n import warnings\n \n import numpy as np\n+\n+# pylint: disable=g-classes-have-attributes\n+import tensorflow.compat.v2 as tf\n+from tensorflow.python.platform import tf_logging as logging\n+\n from keras import backend\n from keras import losses\n from keras import metrics as metrics_module\n-from keras.optimizers import optimizer_v1\n from keras import optimizers\n from keras.distribute import distributed_training_utils\n from keras.distribute import distributed_training_utils_v1\n@@ -36,6 +37,7 @@ from keras.engine import training_generator_v1\n from keras.engine import training_utils\n from keras.engine import training_utils_v1\n from keras.mixed_precision import loss_scale_optimizer\n+from keras.optimizers import optimizer_v1\n from keras.optimizers.optimizer_v2 import optimizer_v2\n from keras.saving import saving_utils\n from keras.saving.saved_model import model_serialization\n@@ -45,7 +47,6 @@ from keras.utils import losses_utils\n from keras.utils import tf_inspect\n from keras.utils import tf_utils\n from keras.utils.mode_keys import ModeKeys\n-from tensorflow.python.platform import tf_logging as logging\n \n try:\n     from scipy.sparse import issparse  # pylint: disable=g-import-not-at-top\n\n@@ -15,7 +15,6 @@\n \"\"\"Keras estimator API.\"\"\"\n \n import tensorflow.compat.v2 as tf\n-\n from tensorflow.python.util.tf_export import keras_export\n \n # Keras has undeclared dependency on tensorflow/estimator:estimator_py.\n@@ -164,8 +163,8 @@ def model_to_estimator(\n \n     try:\n         from tensorflow_estimator.python.estimator import (\n-            keras_lib,\n-        )  # pylint: disable=g-import-not-at-top\n+            keras_lib,  # pylint: disable=g-import-not-at-top\n+        )\n     except ImportError:\n         raise NotImplementedError(\n             \"tf.keras.estimator.model_to_estimator function not available in your \"\n@@ -360,8 +359,8 @@ def model_to_estimator_v2(\n \n     try:\n         from tensorflow_estimator.python.estimator import (\n-            keras_lib,\n-        )  # pylint: disable=g-import-not-at-top\n+            keras_lib,  # pylint: disable=g-import-not-at-top\n+        )\n     except ImportError:\n         raise NotImplementedError(\n             \"tf.keras.estimator.model_to_estimator function not available in your \"\n\n@@ -21,10 +21,11 @@ from __future__ import absolute_import\n from __future__ import division\n from __future__ import print_function\n \n-import tensorflow.compat.v2 as tf\n-\n import collections\n import re\n+\n+import tensorflow.compat.v2 as tf\n+\n from keras.engine.base_layer import Layer\n from keras.utils import generic_utils\n \n\n@@ -18,13 +18,14 @@ from __future__ import absolute_import\n from __future__ import division\n from __future__ import print_function\n \n-import tensorflow.compat.v2 as tf\n-\n import json\n+\n+import tensorflow.compat.v2 as tf\n+from tensorflow.python.util.tf_export import keras_export\n+\n from keras import backend\n from keras.feature_column import base_feature_layer as kfc\n from keras.saving.saved_model import json_utils\n-from tensorflow.python.util.tf_export import keras_export\n \n \n @keras_export(v1=[\"keras.layers.DenseFeatures\"])\n\n@@ -18,16 +18,16 @@ from __future__ import absolute_import\n from __future__ import division\n from __future__ import print_function\n \n-import tensorflow.compat.v2 as tf\n-\n-from absl.testing import parameterized\n import numpy as np\n+import tensorflow.compat.v2 as tf\n+from absl.testing import parameterized\n from tensorflow.python.eager import backprop\n from tensorflow.python.framework import (\n     test_util as tf_test_utils,\n )\n-from keras.testing_infra import test_combinations\n+\n from keras.feature_column import dense_features as df\n+from keras.testing_infra import test_combinations\n \n \n def _initialized_session(config=None):\n\n@@ -19,10 +19,11 @@ from __future__ import division\n from __future__ import print_function\n \n import tensorflow.compat.v2 as tf\n+from tensorflow.python.util.tf_export import keras_export\n+\n from keras.feature_column import base_feature_layer as kfc\n from keras.feature_column import dense_features\n from keras.utils import tf_contextlib\n-from tensorflow.python.util.tf_export import keras_export\n \n \n @keras_export(\"keras.layers.DenseFeatures\", v1=[])\n\n@@ -18,12 +18,12 @@ from __future__ import absolute_import\n from __future__ import division\n from __future__ import print_function\n \n-import tensorflow.compat.v2 as tf\n-\n import numpy as np\n+import tensorflow.compat.v2 as tf\n from tensorflow.python.eager import backprop\n-from keras.testing_infra import test_combinations\n+\n from keras.feature_column import dense_features_v2 as df\n+from keras.testing_infra import test_combinations\n \n \n def _initialized_session(config=None):\n\n@@ -22,9 +22,10 @@ from __future__ import division\n from __future__ import print_function\n \n import tensorflow.compat.v2 as tf\n+from tensorflow.python.util.tf_export import keras_export\n+\n from keras import backend\n from keras.feature_column import base_feature_layer as kfc\n-from tensorflow.python.util.tf_export import keras_export\n \n # pylint: disable=protected-access\n \n\n@@ -19,15 +19,13 @@ from __future__ import division\n from __future__ import print_function\n \n import tensorflow.compat.v2 as tf\n-\n-\n from google.protobuf import text_format\n-\n from tensorflow.core.example import example_pb2\n from tensorflow.core.example import feature_pb2\n from tensorflow.python.framework import (\n     test_util as tf_test_utils,\n )\n+\n from keras import backend\n from keras.feature_column import dense_features\n from keras.feature_column import sequence_feature_column as ksfc\n\n@@ -18,16 +18,14 @@ from __future__ import absolute_import\n from __future__ import division\n from __future__ import print_function\n \n-import tensorflow.compat.v2 as tf\n-\n-\n-from absl.testing import parameterized\n import numpy as np\n+import tensorflow.compat.v2 as tf\n+from absl.testing import parameterized\n \n import keras\n-from keras.testing_infra import test_combinations\n from keras.feature_column import sequence_feature_column as ksfc\n from keras.saving import model_config\n+from keras.testing_infra import test_combinations\n \n \n def _initialized_session(config=None):\n\n@@ -14,18 +14,17 @@\n # ==============================================================================\n \"\"\"Keras initializer serialization / deserialization.\"\"\"\n \n-import tensorflow.compat.v2 as tf\n-\n import threading\n \n+import tensorflow.compat.v2 as tf\n from tensorflow.python import tf2\n+from tensorflow.python.ops import init_ops\n+from tensorflow.python.util.tf_export import keras_export\n+\n from keras.initializers import initializers_v1\n from keras.initializers import initializers_v2\n from keras.utils import generic_utils\n from keras.utils import tf_inspect as inspect\n-from tensorflow.python.ops import init_ops\n-from tensorflow.python.util.tf_export import keras_export\n-\n \n # LOCAL.ALL_OBJECTS is meant to be a global mutable. Hence we need to make it\n # thread-local to avoid concurrent mutations.\n\n@@ -14,18 +14,17 @@\n # ==============================================================================\n \"\"\"Tests for Keras initializers.\"\"\"\n \n-from absl.testing import parameterized\n import numpy as np\n+import tensorflow.compat.v2 as tf\n+from absl.testing import parameterized\n \n from keras import backend\n-from keras.testing_infra import test_combinations\n from keras import initializers\n from keras import models\n-from keras.testing_infra import test_utils\n from keras.engine import input_layer\n from keras.layers import core\n-\n-import tensorflow.compat.v2 as tf\n+from keras.testing_infra import test_combinations\n+from keras.testing_infra import test_utils\n \n \n def _compute_fans(shape):\n\n@@ -18,7 +18,6 @@\n import tensorflow.compat.v2 as tf\n from tensorflow.python.util.tf_export import keras_export\n \n-\n _v1_zeros_initializer = tf.compat.v1.zeros_initializer\n _v1_ones_initializer = tf.compat.v1.ones_initializer\n _v1_constant_initializer = tf.compat.v1.constant_initializer\n\n@@ -17,13 +17,12 @@\n \n import math\n \n+import tensorflow.compat.v2 as tf\n+from tensorflow.python.util.tf_export import keras_export\n+\n from keras import backend\n from keras.dtensor import utils\n \n-import tensorflow.compat.v2 as tf\n-\n-from tensorflow.python.util.tf_export import keras_export\n-\n _PARTITION_SHAPE = \"partition_shape\"\n _PARTITION_OFFSET = \"partition_offset\"\n _LAYOUT = \"layout\"\n\n@@ -14,9 +14,8 @@\n # ==============================================================================\n \"\"\"Tests for KPL + CentralStorageStrategy.\"\"\"\n \n-from absl.testing import parameterized\n import tensorflow.compat.v2 as tf\n-\n+from absl.testing import parameterized\n from tensorflow.python.distribute import (\n     combinations as ds_combinations,\n )\n\n@@ -16,14 +16,17 @@\n from __future__ import absolute_import\n from __future__ import division\n from __future__ import print_function\n+\n import os\n import sys\n+\n+import numpy as np\n+import tensorflow.compat.v2 as tf\n from absl.testing import parameterized\n+\n from keras.saving.experimental import saving_lib\n from keras.testing_infra import test_utils\n from keras.utils import generic_utils\n-import numpy as np\n-import tensorflow.compat.v2 as tf\n \n \n # `tf.print` message is only available in stderr in TF2, which this test checks.\n\n@@ -15,9 +15,9 @@\n \n import functools\n \n-from absl.testing import parameterized\n import numpy as np\n import tensorflow.compat.v2 as tf\n+from absl.testing import parameterized\n \n \n def _jvp(f, primals, tangents):\n\n@@ -16,7 +16,6 @@\n import gc\n \n import tensorflow.compat.v2 as tf\n-\n from tensorflow.python.framework import (\n     test_util as tf_test_utils,\n )\n\n@@ -20,10 +20,11 @@ import re\n import unittest\n import uuid\n import zipfile\n-from absl import logging\n-from absl.testing import parameterized\n+\n import numpy as np\n import tensorflow.compat.v2 as tf\n+from absl import logging\n+from absl.testing import parameterized\n \n PER_WORKER_BATCH_SIZE = 64\n NUM_WORKERS = 2\n\n@@ -18,8 +18,9 @@ from __future__ import division\n from __future__ import print_function\n \n import os\n-from absl import logging\n+\n import tensorflow.compat.v2 as tf\n+from absl import logging\n \n NUM_WORKERS = 2\n NUM_EPOCHS = 2\n\n@@ -16,10 +16,12 @@\n from __future__ import absolute_import\n from __future__ import division\n from __future__ import print_function\n+\n import multiprocessing\n-from absl import logging\n+\n import portpicker\n import tensorflow.compat.v2 as tf\n+from absl import logging\n \n NUM_EPOCHS = 10\n NUM_STEPS = 100\n\n@@ -18,12 +18,13 @@ import multiprocessing\n import os\n import random\n import tempfile\n-from absl.testing import parameterized\n-from keras.testing_infra import test_utils\n+\n import numpy as np\n import portpicker\n import tensorflow.compat.v2 as tf\n+from absl.testing import parameterized\n \n+from keras.testing_infra import test_utils\n \n # These vocabularies usually come from TFT or a Beam pipeline.\n FEATURE_VOCAB = [\n\n@@ -18,6 +18,7 @@ from __future__ import division\n from __future__ import print_function\n \n import tensorflow.compat.v2 as tf\n+\n from keras.integration_test import preprocessing_test_utils as utils\n \n ds_combinations = tf.__internal__.distribute.combinations\n\n@@ -18,6 +18,7 @@ from __future__ import division\n from __future__ import print_function\n \n import tensorflow.compat.v2 as tf\n+\n from keras.integration_test import preprocessing_test_utils as utils\n \n ds_combinations = tf.__internal__.distribute.combinations\n\n@@ -18,6 +18,7 @@ from __future__ import division\n from __future__ import print_function\n \n import tensorflow.compat.v2 as tf\n+\n from keras.integration_test import preprocessing_test_utils as utils\n \n ds_combinations = tf.__internal__.distribute.combinations\n\n@@ -16,9 +16,8 @@\n import os\n import tempfile\n \n-from absl.testing import parameterized\n-\n import tensorflow.compat.v2 as tf\n+from absl.testing import parameterized\n \n \n def cycle(obj, cycles, signatures=None):\n\n@@ -16,10 +16,9 @@\n import os\n import tempfile\n \n-from absl import flags\n-\n import tensorflow.compat.v2 as tf\n import tensorflow_text as tf_text\n+from absl import flags\n \n \n class ConvertResource(tf.test.TestCase):\n\n@@ -17,9 +17,8 @@\n import random\n import tempfile\n \n-from absl import flags\n-\n import tensorflow.compat.v2 as tf\n+from absl import flags\n from tensorflow.python.framework import (\n     test_util as tf_test_utils,\n )\n\n@@ -18,98 +18,48 @@ import tensorflow.compat.v2 as tf\n \n from tensorflow.python import tf2\n \n+from keras.engine.base_layer import Layer\n+from keras.engine.base_preprocessing_layer import PreprocessingLayer\n+\n # Generic layers.\n from keras.engine.input_layer import Input\n from keras.engine.input_layer import InputLayer\n from keras.engine.input_spec import InputSpec\n-from keras.engine.base_layer import Layer\n-from keras.engine.base_preprocessing_layer import PreprocessingLayer\n-\n-# Image preprocessing layers.\n-from keras.layers.preprocessing.image_preprocessing import CenterCrop\n-from keras.layers.preprocessing.image_preprocessing import RandomCrop\n-from keras.layers.preprocessing.image_preprocessing import RandomFlip\n-from keras.layers.preprocessing.image_preprocessing import RandomContrast\n-from keras.layers.preprocessing.image_preprocessing import RandomHeight\n-from keras.layers.preprocessing.image_preprocessing import RandomRotation\n-from keras.layers.preprocessing.image_preprocessing import RandomTranslation\n-from keras.layers.preprocessing.image_preprocessing import RandomWidth\n-from keras.layers.preprocessing.image_preprocessing import RandomZoom\n-from keras.layers.preprocessing.image_preprocessing import Resizing\n-from keras.layers.preprocessing.image_preprocessing import Rescaling\n-\n-# Preprocessing layers.\n-from keras.layers.preprocessing.category_encoding import CategoryEncoding\n-from keras.layers.preprocessing.discretization import Discretization\n-from keras.layers.preprocessing.hashing import Hashing\n-from keras.layers.preprocessing.hashed_crossing import HashedCrossing\n-from keras.layers.preprocessing.integer_lookup import IntegerLookup\n-from keras.layers.preprocessing.normalization import Normalization\n-from keras.layers.preprocessing.string_lookup import StringLookup\n-from keras.layers.preprocessing.text_vectorization import TextVectorization\n+from keras.layers.activation.elu import ELU\n+from keras.layers.activation.leaky_relu import LeakyReLU\n+from keras.layers.activation.prelu import PReLU\n \n # Activations layers.\n from keras.layers.activation.relu import ReLU\n from keras.layers.activation.softmax import Softmax\n-from keras.layers.activation.leaky_relu import LeakyReLU\n-from keras.layers.activation.prelu import PReLU\n-from keras.layers.activation.elu import ELU\n from keras.layers.activation.thresholded_relu import ThresholdedReLU\n+from keras.layers.attention.additive_attention import AdditiveAttention\n+from keras.layers.attention.attention import Attention\n \n # Attention layers.\n from keras.layers.attention.multi_head_attention import MultiHeadAttention\n-from keras.layers.attention.attention import Attention\n-from keras.layers.attention.additive_attention import AdditiveAttention\n \n+# Convolution layer aliases.\n # Convolution layers.\n from keras.layers.convolutional.conv1d import Conv1D\n-from keras.layers.convolutional.conv2d import Conv2D\n-from keras.layers.convolutional.conv3d import Conv3D\n+from keras.layers.convolutional.conv1d import Convolution1D\n from keras.layers.convolutional.conv1d_transpose import Conv1DTranspose\n+from keras.layers.convolutional.conv1d_transpose import Convolution1DTranspose\n+from keras.layers.convolutional.conv2d import Conv2D\n+from keras.layers.convolutional.conv2d import Convolution2D\n from keras.layers.convolutional.conv2d_transpose import Conv2DTranspose\n+from keras.layers.convolutional.conv2d_transpose import Convolution2DTranspose\n+from keras.layers.convolutional.conv3d import Conv3D\n+from keras.layers.convolutional.conv3d import Convolution3D\n from keras.layers.convolutional.conv3d_transpose import Conv3DTranspose\n+from keras.layers.convolutional.conv3d_transpose import Convolution3DTranspose\n from keras.layers.convolutional.depthwise_conv1d import DepthwiseConv1D\n from keras.layers.convolutional.depthwise_conv2d import DepthwiseConv2D\n from keras.layers.convolutional.separable_conv1d import SeparableConv1D\n-from keras.layers.convolutional.separable_conv2d import SeparableConv2D\n-\n-# Convolution layer aliases.\n-from keras.layers.convolutional.conv1d import Convolution1D\n-from keras.layers.convolutional.conv2d import Convolution2D\n-from keras.layers.convolutional.conv3d import Convolution3D\n-from keras.layers.convolutional.conv1d_transpose import Convolution1DTranspose\n-from keras.layers.convolutional.conv2d_transpose import Convolution2DTranspose\n-from keras.layers.convolutional.conv3d_transpose import Convolution3DTranspose\n from keras.layers.convolutional.separable_conv1d import SeparableConvolution1D\n+from keras.layers.convolutional.separable_conv2d import SeparableConv2D\n from keras.layers.convolutional.separable_conv2d import SeparableConvolution2D\n \n-# Regularization layers.\n-from keras.layers.regularization.dropout import Dropout\n-from keras.layers.regularization.spatial_dropout1d import SpatialDropout1D\n-from keras.layers.regularization.spatial_dropout2d import SpatialDropout2D\n-from keras.layers.regularization.spatial_dropout3d import SpatialDropout3D\n-from keras.layers.regularization.gaussian_dropout import GaussianDropout\n-from keras.layers.regularization.gaussian_noise import GaussianNoise\n-from keras.layers.regularization.activity_regularization import (\n-    ActivityRegularization,\n-)\n-from keras.layers.regularization.alpha_dropout import AlphaDropout\n-\n-# Reshaping layers.\n-from keras.layers.reshaping.cropping1d import Cropping1D\n-from keras.layers.reshaping.cropping2d import Cropping2D\n-from keras.layers.reshaping.cropping3d import Cropping3D\n-from keras.layers.reshaping.flatten import Flatten\n-from keras.layers.reshaping.permute import Permute\n-from keras.layers.reshaping.repeat_vector import RepeatVector\n-from keras.layers.reshaping.reshape import Reshape\n-from keras.layers.reshaping.up_sampling1d import UpSampling1D\n-from keras.layers.reshaping.up_sampling2d import UpSampling2D\n-from keras.layers.reshaping.up_sampling3d import UpSampling3D\n-from keras.layers.reshaping.zero_padding1d import ZeroPadding1D\n-from keras.layers.reshaping.zero_padding2d import ZeroPadding2D\n-from keras.layers.reshaping.zero_padding3d import ZeroPadding3D\n-\n # Core layers.\n from keras.layers.core.activation import Activation\n from keras.layers.core.dense import Dense\n@@ -131,33 +81,82 @@ from keras.layers.locally_connected.locally_connected2d import (\n     LocallyConnected2D,\n )\n \n+# Merging functions.\n # Merging layers.\n from keras.layers.merging.add import Add\n-from keras.layers.merging.subtract import Subtract\n-from keras.layers.merging.multiply import Multiply\n-from keras.layers.merging.average import Average\n-from keras.layers.merging.maximum import Maximum\n-from keras.layers.merging.minimum import Minimum\n-from keras.layers.merging.concatenate import Concatenate\n-from keras.layers.merging.dot import Dot\n-\n-# Merging functions.\n from keras.layers.merging.add import add\n-from keras.layers.merging.subtract import subtract\n-from keras.layers.merging.multiply import multiply\n+from keras.layers.merging.average import Average\n from keras.layers.merging.average import average\n-from keras.layers.merging.maximum import maximum\n-from keras.layers.merging.minimum import minimum\n+from keras.layers.merging.concatenate import Concatenate\n from keras.layers.merging.concatenate import concatenate\n+from keras.layers.merging.dot import Dot\n from keras.layers.merging.dot import dot\n-\n-# Normalization layers.\n-from keras.layers.normalization.layer_normalization import LayerNormalization\n+from keras.layers.merging.maximum import Maximum\n+from keras.layers.merging.maximum import maximum\n+from keras.layers.merging.minimum import Minimum\n+from keras.layers.merging.minimum import minimum\n+from keras.layers.merging.multiply import Multiply\n+from keras.layers.merging.multiply import multiply\n+from keras.layers.merging.subtract import Subtract\n+from keras.layers.merging.subtract import subtract\n from keras.layers.normalization.batch_normalization import (\n     SyncBatchNormalization,\n )\n+\n+# Normalization layers.\n+from keras.layers.normalization.layer_normalization import LayerNormalization\n from keras.layers.normalization.unit_normalization import UnitNormalization\n \n+# Preprocessing layers.\n+from keras.layers.preprocessing.category_encoding import CategoryEncoding\n+from keras.layers.preprocessing.discretization import Discretization\n+from keras.layers.preprocessing.hashed_crossing import HashedCrossing\n+from keras.layers.preprocessing.hashing import Hashing\n+\n+# Image preprocessing layers.\n+from keras.layers.preprocessing.image_preprocessing import CenterCrop\n+from keras.layers.preprocessing.image_preprocessing import RandomContrast\n+from keras.layers.preprocessing.image_preprocessing import RandomCrop\n+from keras.layers.preprocessing.image_preprocessing import RandomFlip\n+from keras.layers.preprocessing.image_preprocessing import RandomHeight\n+from keras.layers.preprocessing.image_preprocessing import RandomRotation\n+from keras.layers.preprocessing.image_preprocessing import RandomTranslation\n+from keras.layers.preprocessing.image_preprocessing import RandomWidth\n+from keras.layers.preprocessing.image_preprocessing import RandomZoom\n+from keras.layers.preprocessing.image_preprocessing import Rescaling\n+from keras.layers.preprocessing.image_preprocessing import Resizing\n+from keras.layers.preprocessing.integer_lookup import IntegerLookup\n+from keras.layers.preprocessing.normalization import Normalization\n+from keras.layers.preprocessing.string_lookup import StringLookup\n+from keras.layers.preprocessing.text_vectorization import TextVectorization\n+from keras.layers.regularization.activity_regularization import (\n+    ActivityRegularization,\n+)\n+from keras.layers.regularization.alpha_dropout import AlphaDropout\n+\n+# Regularization layers.\n+from keras.layers.regularization.dropout import Dropout\n+from keras.layers.regularization.gaussian_dropout import GaussianDropout\n+from keras.layers.regularization.gaussian_noise import GaussianNoise\n+from keras.layers.regularization.spatial_dropout1d import SpatialDropout1D\n+from keras.layers.regularization.spatial_dropout2d import SpatialDropout2D\n+from keras.layers.regularization.spatial_dropout3d import SpatialDropout3D\n+\n+# Reshaping layers.\n+from keras.layers.reshaping.cropping1d import Cropping1D\n+from keras.layers.reshaping.cropping2d import Cropping2D\n+from keras.layers.reshaping.cropping3d import Cropping3D\n+from keras.layers.reshaping.flatten import Flatten\n+from keras.layers.reshaping.permute import Permute\n+from keras.layers.reshaping.repeat_vector import RepeatVector\n+from keras.layers.reshaping.reshape import Reshape\n+from keras.layers.reshaping.up_sampling1d import UpSampling1D\n+from keras.layers.reshaping.up_sampling2d import UpSampling2D\n+from keras.layers.reshaping.up_sampling3d import UpSampling3D\n+from keras.layers.reshaping.zero_padding1d import ZeroPadding1D\n+from keras.layers.reshaping.zero_padding2d import ZeroPadding2D\n+from keras.layers.reshaping.zero_padding3d import ZeroPadding3D\n+\n if tf.__internal__.tf2.enabled():\n     from keras.layers.normalization.batch_normalization import (\n         BatchNormalization,\n@@ -168,60 +167,59 @@ if tf.__internal__.tf2.enabled():\n \n     BatchNormalizationV2 = BatchNormalization\n else:\n-    from keras.layers.normalization.batch_normalization_v1 import (\n-        BatchNormalization,\n-    )\n     from keras.layers.normalization.batch_normalization import (\n         BatchNormalization as BatchNormalizationV2,\n     )\n+    from keras.layers.normalization.batch_normalization_v1 import (\n+        BatchNormalization,\n+    )\n \n     BatchNormalizationV1 = BatchNormalization\n \n # Kernelized layers.\n from keras.layers.kernelized import RandomFourierFeatures\n \n+# Pooling layer aliases.\n # Pooling layers.\n from keras.layers.pooling.average_pooling1d import AveragePooling1D\n-from keras.layers.pooling.average_pooling2d import AveragePooling2D\n-from keras.layers.pooling.average_pooling3d import AveragePooling3D\n-from keras.layers.pooling.max_pooling1d import MaxPooling1D\n-from keras.layers.pooling.max_pooling2d import MaxPooling2D\n-from keras.layers.pooling.max_pooling3d import MaxPooling3D\n-from keras.layers.pooling.global_average_pooling1d import GlobalAveragePooling1D\n-from keras.layers.pooling.global_average_pooling2d import GlobalAveragePooling2D\n-from keras.layers.pooling.global_average_pooling3d import GlobalAveragePooling3D\n-from keras.layers.pooling.global_max_pooling1d import GlobalMaxPooling1D\n-from keras.layers.pooling.global_max_pooling2d import GlobalMaxPooling2D\n-from keras.layers.pooling.global_max_pooling3d import GlobalMaxPooling3D\n-\n-# Pooling layer aliases.\n from keras.layers.pooling.average_pooling1d import AvgPool1D\n+from keras.layers.pooling.average_pooling2d import AveragePooling2D\n from keras.layers.pooling.average_pooling2d import AvgPool2D\n+from keras.layers.pooling.average_pooling3d import AveragePooling3D\n from keras.layers.pooling.average_pooling3d import AvgPool3D\n-from keras.layers.pooling.max_pooling1d import MaxPool1D\n-from keras.layers.pooling.max_pooling2d import MaxPool2D\n-from keras.layers.pooling.max_pooling3d import MaxPool3D\n+from keras.layers.pooling.global_average_pooling1d import GlobalAveragePooling1D\n from keras.layers.pooling.global_average_pooling1d import GlobalAvgPool1D\n+from keras.layers.pooling.global_average_pooling2d import GlobalAveragePooling2D\n from keras.layers.pooling.global_average_pooling2d import GlobalAvgPool2D\n+from keras.layers.pooling.global_average_pooling3d import GlobalAveragePooling3D\n from keras.layers.pooling.global_average_pooling3d import GlobalAvgPool3D\n from keras.layers.pooling.global_max_pooling1d import GlobalMaxPool1D\n+from keras.layers.pooling.global_max_pooling1d import GlobalMaxPooling1D\n from keras.layers.pooling.global_max_pooling2d import GlobalMaxPool2D\n+from keras.layers.pooling.global_max_pooling2d import GlobalMaxPooling2D\n from keras.layers.pooling.global_max_pooling3d import GlobalMaxPool3D\n+from keras.layers.pooling.global_max_pooling3d import GlobalMaxPooling3D\n+from keras.layers.pooling.max_pooling1d import MaxPool1D\n+from keras.layers.pooling.max_pooling1d import MaxPooling1D\n+from keras.layers.pooling.max_pooling2d import MaxPool2D\n+from keras.layers.pooling.max_pooling2d import MaxPooling2D\n+from keras.layers.pooling.max_pooling3d import MaxPool3D\n+from keras.layers.pooling.max_pooling3d import MaxPooling3D\n+from keras.layers.rnn.abstract_rnn_cell import AbstractRNNCell\n \n # Recurrent layers.\n from keras.layers.rnn.base_rnn import RNN\n-from keras.layers.rnn.abstract_rnn_cell import AbstractRNNCell\n-from keras.layers.rnn.stacked_rnn_cells import StackedRNNCells\n-from keras.layers.rnn.simple_rnn import SimpleRNNCell\n from keras.layers.rnn.simple_rnn import SimpleRNN\n+from keras.layers.rnn.simple_rnn import SimpleRNNCell\n+from keras.layers.rnn.stacked_rnn_cells import StackedRNNCells\n \n if tf.__internal__.tf2.enabled():\n     from keras.layers.rnn.gru import GRU\n     from keras.layers.rnn.gru import GRUCell\n-    from keras.layers.rnn.lstm import LSTM\n-    from keras.layers.rnn.lstm import LSTMCell\n     from keras.layers.rnn.gru_v1 import GRU as GRUV1\n     from keras.layers.rnn.gru_v1 import GRUCell as GRUCellV1\n+    from keras.layers.rnn.lstm import LSTM\n+    from keras.layers.rnn.lstm import LSTMCell\n     from keras.layers.rnn.lstm_v1 import LSTM as LSTMV1\n     from keras.layers.rnn.lstm_v1 import LSTMCell as LSTMCellV1\n \n@@ -230,45 +228,45 @@ if tf.__internal__.tf2.enabled():\n     LSTMV2 = LSTM\n     LSTMCellV2 = LSTMCell\n else:\n-    from keras.layers.rnn.gru_v1 import GRU\n-    from keras.layers.rnn.gru_v1 import GRUCell\n-    from keras.layers.rnn.lstm_v1 import LSTM\n-    from keras.layers.rnn.lstm_v1 import LSTMCell\n     from keras.layers.rnn.gru import GRU as GRUV2\n     from keras.layers.rnn.gru import GRUCell as GRUCellV2\n+    from keras.layers.rnn.gru_v1 import GRU\n+    from keras.layers.rnn.gru_v1 import GRUCell\n     from keras.layers.rnn.lstm import LSTM as LSTMV2\n     from keras.layers.rnn.lstm import LSTMCell as LSTMCellV2\n+    from keras.layers.rnn.lstm_v1 import LSTM\n+    from keras.layers.rnn.lstm_v1 import LSTMCell\n \n     GRUV1 = GRU\n     GRUCellV1 = GRUCell\n     LSTMV1 = LSTM\n     LSTMCellV1 = LSTMCell\n \n-# Convolutional-recurrent layers.\n-from keras.layers.rnn.conv_lstm1d import ConvLSTM1D\n-from keras.layers.rnn.conv_lstm2d import ConvLSTM2D\n-from keras.layers.rnn.conv_lstm3d import ConvLSTM3D\n-\n-# cuDNN recurrent layers.\n-from keras.layers.rnn.cudnn_lstm import CuDNNLSTM\n-from keras.layers.rnn.cudnn_gru import CuDNNGRU\n+# Serialization functions.\n+from keras.layers import serialization\n \n # Wrapper functions.\n from keras.layers.rnn.base_wrapper import Wrapper\n from keras.layers.rnn.bidirectional import Bidirectional\n-from keras.layers.rnn.time_distributed import TimeDistributed\n \n # RNN Cell wrappers.\n from keras.layers.rnn.cell_wrappers import DeviceWrapper\n from keras.layers.rnn.cell_wrappers import DropoutWrapper\n from keras.layers.rnn.cell_wrappers import ResidualWrapper\n \n-# Serialization functions.\n-from keras.layers import serialization\n+# Convolutional-recurrent layers.\n+from keras.layers.rnn.conv_lstm1d import ConvLSTM1D\n+from keras.layers.rnn.conv_lstm2d import ConvLSTM2D\n+from keras.layers.rnn.conv_lstm3d import ConvLSTM3D\n+from keras.layers.rnn.cudnn_gru import CuDNNGRU\n+\n+# cuDNN recurrent layers.\n+from keras.layers.rnn.cudnn_lstm import CuDNNLSTM\n+from keras.layers.rnn.time_distributed import TimeDistributed\n from keras.layers.serialization import deserialize\n from keras.layers.serialization import deserialize_from_json\n-from keras.layers.serialization import serialize\n from keras.layers.serialization import get_builtin_layer\n+from keras.layers.serialization import serialize\n \n \n class VersionAwareLayers:\n\n@@ -15,9 +15,9 @@\n \"\"\"Layers that act as activation functions.\"\"\"\n # pylint: disable=g-bad-import-order\n \n-from keras.layers.activation.relu import ReLU\n-from keras.layers.activation.softmax import Softmax\n+from keras.layers.activation.elu import ELU\n from keras.layers.activation.leaky_relu import LeakyReLU\n from keras.layers.activation.prelu import PReLU\n-from keras.layers.activation.elu import ELU\n+from keras.layers.activation.relu import ReLU\n+from keras.layers.activation.softmax import Softmax\n from keras.layers.activation.thresholded_relu import ThresholdedReLU\n\n@@ -15,12 +15,12 @@\n \"\"\"Exponential Linear Unit activation layer.\"\"\"\n # pylint: disable=g-classes-have-attributes,g-direct-tensorflow-import\n \n+from tensorflow.python.util.tf_export import keras_export\n+\n from keras import backend\n from keras.engine.base_layer import Layer\n from keras.utils import tf_utils\n \n-from tensorflow.python.util.tf_export import keras_export\n-\n \n @keras_export(\"keras.layers.ELU\")\n class ELU(Layer):\n\n@@ -14,10 +14,11 @@\n # ==============================================================================\n \"\"\"Tests for ELU layer.\"\"\"\n \n+import tensorflow.compat.v2 as tf\n+\n import keras\n from keras.testing_infra import test_combinations\n from keras.testing_infra import test_utils\n-import tensorflow.compat.v2 as tf\n \n \n @test_combinations.run_all_keras_modes\n\n@@ -15,12 +15,12 @@\n \"\"\"Leaky version of a Rectified Linear Unit activation layer.\"\"\"\n # pylint: disable=g-classes-have-attributes,g-direct-tensorflow-import\n \n+from tensorflow.python.util.tf_export import keras_export\n+\n from keras import backend\n from keras.engine.base_layer import Layer\n from keras.utils import tf_utils\n \n-from tensorflow.python.util.tf_export import keras_export\n-\n \n @keras_export(\"keras.layers.LeakyReLU\")\n class LeakyReLU(Layer):\n\n@@ -14,10 +14,11 @@\n # ==============================================================================\n \"\"\"Tests for LeakyReLU layer.\"\"\"\n \n+import tensorflow.compat.v2 as tf\n+\n import keras\n from keras.testing_infra import test_combinations\n from keras.testing_infra import test_utils\n-import tensorflow.compat.v2 as tf\n \n \n @test_combinations.run_all_keras_modes\n\n@@ -15,6 +15,8 @@\n \"\"\"Parametric Rectified Linear Unit activation layer.\"\"\"\n # pylint: disable=g-classes-have-attributes,g-direct-tensorflow-import\n \n+from tensorflow.python.util.tf_export import keras_export\n+\n from keras import backend\n from keras import constraints\n from keras import initializers\n@@ -23,8 +25,6 @@ from keras.engine.base_layer import Layer\n from keras.engine.input_spec import InputSpec\n from keras.utils import tf_utils\n \n-from tensorflow.python.util.tf_export import keras_export\n-\n \n @keras_export(\"keras.layers.PReLU\")\n class PReLU(Layer):\n\n@@ -14,10 +14,11 @@\n # ==============================================================================\n \"\"\"Tests for PReLU layer.\"\"\"\n \n+import tensorflow.compat.v2 as tf\n+\n import keras\n from keras.testing_infra import test_combinations\n from keras.testing_infra import test_utils\n-import tensorflow.compat.v2 as tf\n \n \n @test_combinations.run_all_keras_modes\n\n@@ -15,12 +15,12 @@\n \"\"\"Rectified Linear Unit activation layer.\"\"\"\n # pylint: disable=g-classes-have-attributes,g-direct-tensorflow-import\n \n+from tensorflow.python.util.tf_export import keras_export\n+\n from keras import backend\n from keras.engine.base_layer import Layer\n from keras.utils import tf_utils\n \n-from tensorflow.python.util.tf_export import keras_export\n-\n \n @keras_export(\"keras.layers.ReLU\")\n class ReLU(Layer):\n\n@@ -14,11 +14,12 @@\n # ==============================================================================\n \"\"\"Tests for ReLU layer.\"\"\"\n \n+import numpy as np\n+import tensorflow.compat.v2 as tf\n+\n import keras\n from keras.testing_infra import test_combinations\n from keras.testing_infra import test_utils\n-import numpy as np\n-import tensorflow.compat.v2 as tf\n \n \n @test_combinations.run_all_keras_modes\n\n@@ -15,12 +15,12 @@\n \"\"\"Softmax activation layer.\"\"\"\n # pylint: disable=g-classes-have-attributes,g-direct-tensorflow-import\n \n+import tensorflow.compat.v2 as tf\n+from tensorflow.python.util.tf_export import keras_export\n+\n from keras import backend\n from keras.engine.base_layer import Layer\n from keras.utils import tf_utils\n-import tensorflow.compat.v2 as tf\n-\n-from tensorflow.python.util.tf_export import keras_export\n \n \n def _large_compatible_negative(tensor_type):\n\n@@ -14,10 +14,11 @@\n # ==============================================================================\n \"\"\"Tests for Softmax layer.\"\"\"\n \n+import tensorflow.compat.v2 as tf\n+\n import keras\n from keras.testing_infra import test_combinations\n from keras.testing_infra import test_utils\n-import tensorflow.compat.v2 as tf\n \n \n @test_combinations.run_all_keras_modes\n\n@@ -15,12 +15,12 @@\n \"\"\"Thresholded Rectified Linear Unit activation layer.\"\"\"\n # pylint: disable=g-classes-have-attributes,g-direct-tensorflow-import\n \n+import tensorflow.compat.v2 as tf\n+from tensorflow.python.util.tf_export import keras_export\n+\n from keras import backend\n from keras.engine.base_layer import Layer\n from keras.utils import tf_utils\n-import tensorflow.compat.v2 as tf\n-\n-from tensorflow.python.util.tf_export import keras_export\n \n \n @keras_export(\"keras.layers.ThresholdedReLU\")\n\n@@ -14,10 +14,11 @@\n # ==============================================================================\n \"\"\"Tests for ThresholdedReLU layer.\"\"\"\n \n+import tensorflow.compat.v2 as tf\n+\n import keras\n from keras.testing_infra import test_combinations\n from keras.testing_infra import test_utils\n-import tensorflow.compat.v2 as tf\n \n \n @test_combinations.run_all_keras_modes\n\n@@ -15,6 +15,6 @@\n \"\"\"Keras attention layers.\"\"\"\n # pylint: disable=g-bad-import-order\n \n-from keras.layers.attention.multi_head_attention import MultiHeadAttention\n-from keras.layers.attention.attention import Attention\n from keras.layers.attention.additive_attention import AdditiveAttention\n+from keras.layers.attention.attention import Attention\n+from keras.layers.attention.multi_head_attention import MultiHeadAttention\n\n@@ -19,11 +19,11 @@ Attention is formed by three tensors: Query, Key and Value.\n \"\"\"\n # pylint: disable=g-classes-have-attributes,g-direct-tensorflow-import\n \n-from keras.layers.attention.base_dense_attention import BaseDenseAttention\n import tensorflow.compat.v2 as tf\n-\n from tensorflow.python.util.tf_export import keras_export\n \n+from keras.layers.attention.base_dense_attention import BaseDenseAttention\n+\n \n @keras_export(\"keras.layers.AdditiveAttention\")\n class AdditiveAttention(BaseDenseAttention):\n\n@@ -14,13 +14,14 @@\n # ==============================================================================\n \"\"\"Tests AdditiveAttention layer.\"\"\"\n \n+import numpy as np\n+import tensorflow.compat.v2 as tf\n from absl.testing import parameterized\n+\n import keras\n from keras.mixed_precision import policy\n from keras.testing_infra import test_combinations\n from keras.testing_infra import test_utils\n-import numpy as np\n-import tensorflow.compat.v2 as tf\n \n \n @test_combinations.generate(test_combinations.combine(mode=[\"graph\", \"eager\"]))\n\n@@ -19,11 +19,11 @@ Attention is formed by three tensors: Query, Key and Value.\n \"\"\"\n # pylint: disable=g-classes-have-attributes,g-direct-tensorflow-import\n \n-from keras.layers.attention.base_dense_attention import BaseDenseAttention\n import tensorflow.compat.v2 as tf\n-\n from tensorflow.python.util.tf_export import keras_export\n \n+from keras.layers.attention.base_dense_attention import BaseDenseAttention\n+\n \n @keras_export(\"keras.layers.Attention\")\n class Attention(BaseDenseAttention):\n\n@@ -14,12 +14,13 @@\n # ==============================================================================\n \"\"\"Tests Attention layer.\"\"\"\n \n+import numpy as np\n+import tensorflow.compat.v2 as tf\n from absl.testing import parameterized\n+\n import keras\n from keras.layers import core\n from keras.testing_infra import test_combinations\n-import numpy as np\n-import tensorflow.compat.v2 as tf\n \n \n @test_combinations.generate(test_combinations.combine(mode=[\"graph\", \"eager\"]))\n\n@@ -19,10 +19,11 @@ Attention is formed by three tensors: Query, Key and Value.\n \"\"\"\n # pylint: disable=g-classes-have-attributes\n \n+import tensorflow.compat.v2 as tf\n+\n from keras import backend\n from keras.engine import base_layer\n from keras.utils import control_flow_util\n-import tensorflow.compat.v2 as tf\n \n \n class BaseDenseAttention(base_layer.BaseRandomLayer):\n\n@@ -14,12 +14,13 @@\n # ==============================================================================\n \"\"\"Tests BaseDenseAttention layer.\"\"\"\n \n-from absl.testing import parameterized\n-from keras.layers.attention.base_dense_attention import _lower_triangular_mask\n-from keras.layers.attention.base_dense_attention import BaseDenseAttention\n-from keras.testing_infra import test_combinations\n import numpy as np\n import tensorflow.compat.v2 as tf\n+from absl.testing import parameterized\n+\n+from keras.layers.attention.base_dense_attention import BaseDenseAttention\n+from keras.layers.attention.base_dense_attention import _lower_triangular_mask\n+from keras.testing_infra import test_combinations\n \n \n @test_combinations.generate(test_combinations.combine(mode=[\"graph\", \"eager\"]))\n\n@@ -19,6 +19,11 @@ import collections\n import math\n import string\n \n+import numpy as np\n+import tensorflow.compat.v2 as tf\n+from tensorflow.python.platform import tf_logging as logging\n+from tensorflow.python.util.tf_export import keras_export\n+\n from keras import constraints\n from keras import initializers\n from keras import regularizers\n@@ -27,12 +32,6 @@ from keras.layers import activation\n from keras.layers import core\n from keras.layers import regularization\n from keras.utils import tf_utils\n-import numpy as np\n-import tensorflow.compat.v2 as tf\n-\n-from tensorflow.python.platform import tf_logging as logging\n-from tensorflow.python.util.tf_export import keras_export\n-\n \n _CHR_IDX = string.ascii_lowercase\n \n\n@@ -14,11 +14,12 @@\n # ==============================================================================\n \"\"\"Tests for the MultiHeadAttention layer.\"\"\"\n \n-from absl.testing import parameterized\n-import keras\n-from keras.testing_infra import test_combinations\n import numpy as np\n import tensorflow.compat.v2 as tf\n+from absl.testing import parameterized\n+\n+import keras\n+from keras.testing_infra import test_combinations\n \n \n # This decorator runs the test in V1, V2-Eager, and V2-Functional mode. It\n\n@@ -15,26 +15,25 @@\n \"\"\"Keras convolution layers.\"\"\"\n # pylint: disable=g-bad-import-order\n \n+# Convolution layer aliases.\n # Convolution layers.\n from keras.layers.convolutional.conv1d import Conv1D\n-from keras.layers.convolutional.conv2d import Conv2D\n-from keras.layers.convolutional.conv3d import Conv3D\n+from keras.layers.convolutional.conv1d import Convolution1D\n from keras.layers.convolutional.conv1d_transpose import Conv1DTranspose\n+from keras.layers.convolutional.conv1d_transpose import Convolution1DTranspose\n+from keras.layers.convolutional.conv2d import Conv2D\n+from keras.layers.convolutional.conv2d import Convolution2D\n from keras.layers.convolutional.conv2d_transpose import Conv2DTranspose\n+from keras.layers.convolutional.conv2d_transpose import Convolution2DTranspose\n+from keras.layers.convolutional.conv3d import Conv3D\n+from keras.layers.convolutional.conv3d import Convolution3D\n from keras.layers.convolutional.conv3d_transpose import Conv3DTranspose\n+from keras.layers.convolutional.conv3d_transpose import Convolution3DTranspose\n from keras.layers.convolutional.depthwise_conv1d import DepthwiseConv1D\n from keras.layers.convolutional.depthwise_conv2d import DepthwiseConv2D\n from keras.layers.convolutional.separable_conv1d import SeparableConv1D\n-from keras.layers.convolutional.separable_conv2d import SeparableConv2D\n-\n-# Convolution layer aliases.\n-from keras.layers.convolutional.conv1d import Convolution1D\n-from keras.layers.convolutional.conv2d import Convolution2D\n-from keras.layers.convolutional.conv3d import Convolution3D\n-from keras.layers.convolutional.conv1d_transpose import Convolution1DTranspose\n-from keras.layers.convolutional.conv2d_transpose import Convolution2DTranspose\n-from keras.layers.convolutional.conv3d_transpose import Convolution3DTranspose\n from keras.layers.convolutional.separable_conv1d import SeparableConvolution1D\n+from keras.layers.convolutional.separable_conv2d import SeparableConv2D\n from keras.layers.convolutional.separable_conv2d import SeparableConvolution2D\n \n # Pooling layers imported for backwards namespace compatibility.\n\n@@ -15,6 +15,8 @@\n \"\"\"Keras base class for convolution layers.\"\"\"\n # pylint: disable=g-classes-have-attributes\n \n+import tensorflow.compat.v2 as tf\n+\n from keras import activations\n from keras import constraints\n from keras import initializers\n@@ -22,7 +24,6 @@ from keras import regularizers\n from keras.engine.base_layer import Layer\n from keras.engine.input_spec import InputSpec\n from keras.utils import conv_utils\n-import tensorflow.compat.v2 as tf\n \n \n class Conv(Layer):\n\n@@ -15,12 +15,13 @@\n \"\"\"Keras abstract base for depthwise convolutions.\"\"\"\n # pylint: disable=g-classes-have-attributes\n \n+import tensorflow.compat.v2 as tf\n+\n from keras import constraints\n from keras import initializers\n from keras import regularizers\n from keras.engine.input_spec import InputSpec\n from keras.layers.convolutional.base_conv import Conv\n-import tensorflow.compat.v2 as tf\n \n \n class DepthwiseConv(Conv):\n\n@@ -15,13 +15,14 @@\n \"\"\"Keras abstract base layer for separable nD convolution.\"\"\"\n # pylint: disable=g-classes-have-attributes\n \n+import tensorflow.compat.v2 as tf\n+\n from keras import activations\n from keras import constraints\n from keras import initializers\n from keras import regularizers\n from keras.engine.input_spec import InputSpec\n from keras.layers.convolutional.base_conv import Conv\n-import tensorflow.compat.v2 as tf\n \n \n class SeparableConv(Conv):\n\n@@ -15,6 +15,8 @@\n \"\"\"Keras 1D convolution layer.\"\"\"\n # pylint: disable=g-classes-have-attributes,g-direct-tensorflow-import\n \n+from tensorflow.python.util.tf_export import keras_export\n+\n from keras import activations\n from keras import constraints\n from keras import initializers\n@@ -22,8 +24,6 @@ from keras import regularizers\n from keras.dtensor import utils\n from keras.layers.convolutional.base_conv import Conv\n \n-from tensorflow.python.util.tf_export import keras_export\n-\n \n @keras_export(\"keras.layers.Conv1D\", \"keras.layers.Convolution1D\")\n class Conv1D(Conv):\n\n@@ -15,6 +15,9 @@\n \"\"\"Keras 1D transposed convolution layer (sometimes called deconvolution).\"\"\"\n # pylint: disable=g-classes-have-attributes,g-direct-tensorflow-import\n \n+import tensorflow.compat.v2 as tf\n+from tensorflow.python.util.tf_export import keras_export\n+\n from keras import activations\n from keras import constraints\n from keras import initializers\n@@ -23,9 +26,6 @@ from keras.dtensor import utils\n from keras.engine.input_spec import InputSpec\n from keras.layers.convolutional.conv1d import Conv1D\n from keras.utils import conv_utils\n-import tensorflow.compat.v2 as tf\n-\n-from tensorflow.python.util.tf_export import keras_export\n \n \n @keras_export(\n\n@@ -15,6 +15,8 @@\n \"\"\"Keras 2D convolution layer.\"\"\"\n # pylint: disable=g-classes-have-attributes,g-direct-tensorflow-import\n \n+from tensorflow.python.util.tf_export import keras_export\n+\n from keras import activations\n from keras import constraints\n from keras import initializers\n@@ -22,8 +24,6 @@ from keras import regularizers\n from keras.dtensor import utils\n from keras.layers.convolutional.base_conv import Conv\n \n-from tensorflow.python.util.tf_export import keras_export\n-\n \n @keras_export(\"keras.layers.Conv2D\", \"keras.layers.Convolution2D\")\n class Conv2D(Conv):\n\n@@ -15,6 +15,9 @@\n \"\"\"Keras 2D transposed convolution layer (sometimes called deconvolution).\"\"\"\n # pylint: disable=g-classes-have-attributes,g-direct-tensorflow-import\n \n+import tensorflow.compat.v2 as tf\n+from tensorflow.python.util.tf_export import keras_export\n+\n from keras import activations\n from keras import backend\n from keras import constraints\n@@ -24,9 +27,6 @@ from keras.dtensor import utils\n from keras.engine.input_spec import InputSpec\n from keras.layers.convolutional.conv2d import Conv2D\n from keras.utils import conv_utils\n-import tensorflow.compat.v2 as tf\n-\n-from tensorflow.python.util.tf_export import keras_export\n \n \n @keras_export(\n\n@@ -15,6 +15,8 @@\n \"\"\"Keras 3D convolution layer.\"\"\"\n # pylint: disable=g-classes-have-attributes,g-direct-tensorflow-import\n \n+from tensorflow.python.util.tf_export import keras_export\n+\n from keras import activations\n from keras import constraints\n from keras import initializers\n@@ -22,8 +24,6 @@ from keras import regularizers\n from keras.dtensor import utils\n from keras.layers.convolutional.base_conv import Conv\n \n-from tensorflow.python.util.tf_export import keras_export\n-\n \n @keras_export(\"keras.layers.Conv3D\", \"keras.layers.Convolution3D\")\n class Conv3D(Conv):\n\n@@ -15,6 +15,9 @@\n \"\"\"Keras 3D transposed convolution layer (sometimes called deconvolution).\"\"\"\n # pylint: disable=g-classes-have-attributes,g-direct-tensorflow-import\n \n+import tensorflow.compat.v2 as tf\n+from tensorflow.python.util.tf_export import keras_export\n+\n from keras import activations\n from keras import constraints\n from keras import initializers\n@@ -23,9 +26,6 @@ from keras.dtensor import utils\n from keras.engine.input_spec import InputSpec\n from keras.layers.convolutional.conv3d import Conv3D\n from keras.utils import conv_utils\n-import tensorflow.compat.v2 as tf\n-\n-from tensorflow.python.util.tf_export import keras_export\n \n \n @keras_export(\n\n@@ -15,17 +15,17 @@\n \"\"\"Tests for convolutional layers.\"\"\"\n \n \n-from absl.testing import parameterized\n-import keras\n-from keras.testing_infra import test_combinations\n-from keras.testing_infra import test_utils\n import numpy as np\n import tensorflow.compat.v2 as tf\n-\n+from absl.testing import parameterized\n from tensorflow.python.framework import (\n     test_util as tf_test_utils,\n )\n \n+import keras\n+from keras.testing_infra import test_combinations\n+from keras.testing_infra import test_utils\n+\n \n @test_combinations.run_all_keras_modes\n class Conv1DTest(test_combinations.TestCase):\n\n@@ -14,12 +14,13 @@\n # ==============================================================================\n \"\"\"Tests for convolutional transpose layers.\"\"\"\n \n+import numpy as np\n+import tensorflow.compat.v2 as tf\n from absl.testing import parameterized\n+\n import keras\n from keras.testing_infra import test_combinations\n from keras.testing_infra import test_utils\n-import numpy as np\n-import tensorflow.compat.v2 as tf\n \n \n @test_combinations.run_all_keras_modes\n\n@@ -15,12 +15,12 @@\n \"\"\"Keras depthwise 1D convolution.\"\"\"\n # pylint: disable=g-classes-have-attributes,g-direct-tensorflow-import\n \n+import tensorflow.compat.v2 as tf\n+from tensorflow.python.util.tf_export import keras_export\n+\n from keras.layers.convolutional.base_depthwise_conv import DepthwiseConv\n from keras.utils import conv_utils\n from keras.utils import tf_utils\n-import tensorflow.compat.v2 as tf\n-\n-from tensorflow.python.util.tf_export import keras_export\n \n \n @keras_export(\"keras.layers.DepthwiseConv1D\")\n\n@@ -15,13 +15,13 @@\n \"\"\"Keras depthwise 2D convolution.\"\"\"\n # pylint: disable=g-classes-have-attributes,g-direct-tensorflow-import\n \n+from tensorflow.python.util.tf_export import keras_export\n+\n from keras import backend\n from keras.layers.convolutional.base_depthwise_conv import DepthwiseConv\n from keras.utils import conv_utils\n from keras.utils import tf_utils\n \n-from tensorflow.python.util.tf_export import keras_export\n-\n \n @keras_export(\"keras.layers.DepthwiseConv2D\")\n class DepthwiseConv2D(DepthwiseConv):\n\n@@ -14,11 +14,12 @@\n # ==============================================================================\n \"\"\"Tests for depthwise convolutional layers.\"\"\"\n \n+import tensorflow.compat.v2 as tf\n from absl.testing import parameterized\n+\n import keras\n from keras.testing_infra import test_combinations\n from keras.testing_infra import test_utils\n-import tensorflow.compat.v2 as tf\n \n \n @test_combinations.run_all_keras_modes\n\n@@ -15,15 +15,15 @@\n \"\"\"Keras depthwise separable 1D convolution.\"\"\"\n # pylint: disable=g-classes-have-attributes,g-direct-tensorflow-import\n \n+import tensorflow.compat.v2 as tf\n+from tensorflow.python.util.tf_export import keras_export\n+\n from keras import activations\n from keras import constraints\n from keras import initializers\n from keras import regularizers\n from keras.layers.convolutional.base_separable_conv import SeparableConv\n from keras.utils import conv_utils\n-import tensorflow.compat.v2 as tf\n-\n-from tensorflow.python.util.tf_export import keras_export\n \n \n @keras_export(\n\n@@ -15,15 +15,15 @@\n \"\"\"Keras depthwise separable 2D convolution.\"\"\"\n # pylint: disable=g-classes-have-attributes,g-direct-tensorflow-import\n \n+import tensorflow.compat.v2 as tf\n+from tensorflow.python.util.tf_export import keras_export\n+\n from keras import activations\n from keras import constraints\n from keras import initializers\n from keras import regularizers\n from keras.layers.convolutional.base_separable_conv import SeparableConv\n from keras.utils import conv_utils\n-import tensorflow.compat.v2 as tf\n-\n-from tensorflow.python.util.tf_export import keras_export\n \n \n @keras_export(\n\n@@ -14,12 +14,13 @@\n # ==============================================================================\n \"\"\"Tests for separable convolutional layers.\"\"\"\n \n+import numpy as np\n+import tensorflow.compat.v2 as tf\n from absl.testing import parameterized\n+\n import keras\n from keras.testing_infra import test_combinations\n from keras.testing_infra import test_utils\n-import numpy as np\n-import tensorflow.compat.v2 as tf\n \n \n @test_combinations.run_all_keras_modes\n\n@@ -22,14 +22,13 @@ from keras.layers.core.lambda_layer import Lambda\n from keras.layers.core.masking import Masking\n \n # Required by third_party/py/tensorflow_gnn/keras/keras_tensors.py\n-from keras.layers.core.tf_op_layer import _delegate_method\n-from keras.layers.core.tf_op_layer import _delegate_property\n from keras.layers.core.tf_op_layer import ClassMethod\n from keras.layers.core.tf_op_layer import InstanceMethod\n from keras.layers.core.tf_op_layer import InstanceProperty\n-\n from keras.layers.core.tf_op_layer import SlicingOpLambda\n from keras.layers.core.tf_op_layer import TFOpLambda\n+from keras.layers.core.tf_op_layer import _delegate_method\n+from keras.layers.core.tf_op_layer import _delegate_property\n \n # Regularization layers imported for backwards namespace compatibility\n from keras.layers.regularization.activity_regularization import (\n\n@@ -15,9 +15,10 @@\n \"\"\"Contains the Activation layer.\"\"\"\n # pylint: disable=g-classes-have-attributes,g-direct-tensorflow-import\n \n+from tensorflow.python.util.tf_export import keras_export\n+\n from keras import activations\n from keras.engine.base_layer import Layer\n-from tensorflow.python.util.tf_export import keras_export\n \n \n @keras_export(\"keras.layers.Activation\")\n\n@@ -17,15 +17,15 @@\n import os\n import textwrap\n \n+import numpy as np\n+import tensorflow.compat.v2 as tf\n+\n import keras\n from keras import initializers\n from keras.layers import core\n from keras.mixed_precision import policy\n from keras.testing_infra import test_combinations\n from keras.testing_infra import test_utils\n-import numpy as np\n-\n-import tensorflow.compat.v2 as tf\n \n \n @test_combinations.run_all_keras_modes\n\n@@ -15,6 +15,9 @@\n \"\"\"Contains the Dense layer.\"\"\"\n # pylint: disable=g-classes-have-attributes,g-direct-tensorflow-import\n \n+import tensorflow.compat.v2 as tf\n+from tensorflow.python.util.tf_export import keras_export\n+\n from keras import activations\n from keras import backend\n from keras import constraints\n@@ -23,9 +26,6 @@ from keras import regularizers\n from keras.dtensor import utils\n from keras.engine.base_layer import Layer\n from keras.engine.input_spec import InputSpec\n-import tensorflow.compat.v2 as tf\n-\n-from tensorflow.python.util.tf_export import keras_export\n \n \n @keras_export(\"keras.layers.Dense\")\n\n@@ -17,14 +17,14 @@\n \n import re\n \n+import tensorflow.compat.v2 as tf\n+from tensorflow.python.util.tf_export import keras_export\n+\n from keras import activations\n from keras import constraints\n from keras import initializers\n from keras import regularizers\n from keras.engine.base_layer import Layer\n-import tensorflow.compat.v2 as tf\n-\n-from tensorflow.python.util.tf_export import keras_export\n \n \n @keras_export(\n\n@@ -15,13 +15,14 @@\n \"\"\"Tests for Keras-based einsum dense layer.\"\"\"\n \n \n+import numpy as np\n+import tensorflow.compat.v2 as tf\n from absl.testing import parameterized\n+\n import keras\n from keras.layers.core import einsum_dense\n from keras.testing_infra import test_combinations\n from keras.testing_infra import test_utils\n-import numpy as np\n-import tensorflow.compat.v2 as tf\n \n \n @test_combinations.run_all_keras_modes\n\n@@ -15,6 +15,9 @@\n \"\"\"Embedding layer.\"\"\"\n # pylint: disable=g-classes-have-attributes,g-direct-tensorflow-import\n \n+import tensorflow.compat.v2 as tf\n+from tensorflow.python.util.tf_export import keras_export\n+\n from keras import backend\n from keras import constraints\n from keras import initializers\n@@ -23,9 +26,6 @@ from keras.dtensor import utils\n from keras.engine import base_layer_utils\n from keras.engine.base_layer import Layer\n from keras.utils import tf_utils\n-import tensorflow.compat.v2 as tf\n-\n-from tensorflow.python.util.tf_export import keras_export\n \n \n @keras_export(\"keras.layers.Embedding\")\n\n@@ -14,12 +14,13 @@\n # ==============================================================================\n \"\"\"Tests for embedding layer.\"\"\"\n \n+import numpy as np\n+import tensorflow.compat.v2 as tf\n+\n import keras\n from keras.mixed_precision import policy\n from keras.testing_infra import test_combinations\n from keras.testing_infra import test_utils\n-import numpy as np\n-import tensorflow.compat.v2 as tf\n \n \n class EmbeddingTest(test_combinations.TestCase):\n\n@@ -18,15 +18,17 @@ import sys\n import textwrap\n import types as python_types\n import warnings\n-from keras.engine.base_layer import Layer\n-from keras.utils import generic_utils\n-from keras.utils import tf_inspect\n-from keras.utils import tf_utils\n+\n import numpy as np\n import tensorflow.compat.v2 as tf\n from tensorflow.python.platform import tf_logging\n from tensorflow.python.util.tf_export import keras_export\n \n+from keras.engine.base_layer import Layer\n+from keras.utils import generic_utils\n+from keras.utils import tf_inspect\n+from keras.utils import tf_utils\n+\n \n @keras_export(\"keras.layers.Lambda\")\n class Lambda(Layer):\n\n@@ -15,10 +15,11 @@\n \"\"\"Contains the Masking layer.\"\"\"\n # pylint: disable=g-classes-have-attributes,g-direct-tensorflow-import\n \n-from keras.engine.base_layer import Layer\n import tensorflow.compat.v2 as tf\n from tensorflow.python.util.tf_export import keras_export\n \n+from keras.engine.base_layer import Layer\n+\n \n @keras_export(\"keras.layers.Masking\")\n class Masking(Layer):\n\n@@ -14,13 +14,6 @@\n # ==============================================================================\n \"\"\"Contains the TFOpLambda layer.\"\"\"\n import tensorflow.compat.v2 as tf\n-\n-# pylint: enable=g-bad-import-order\n-\n-from keras import backend\n-from keras.engine import keras_tensor\n-from keras.engine.base_layer import Layer\n-\n from tensorflow.python.platform import tf_logging\n from tensorflow.python.util.tf_export import (\n     get_canonical_name_for_symbol,\n@@ -29,6 +22,12 @@ from tensorflow.python.util.tf_export import (\n     get_symbol_from_name,\n )\n \n+from keras import backend\n+from keras.engine import keras_tensor\n+from keras.engine.base_layer import Layer\n+\n+# pylint: enable=g-bad-import-order\n+\n \n class ClassMethod(Layer):\n     \"\"\"Wraps a TF API Class's class method  in a `Layer` object.\n\n@@ -15,13 +15,13 @@\n # pylint: disable=g-classes-have-attributes\n \"\"\"Keras layers that implement explicit (approximate) kernel feature maps.\"\"\"\n \n-import tensorflow.compat.v2 as tf\n-\n import numpy as np\n+import tensorflow.compat.v2 as tf\n+from tensorflow.python.util.tf_export import keras_export\n+\n from keras import initializers\n from keras.engine import base_layer\n from keras.engine import input_spec\n-from tensorflow.python.util.tf_export import keras_export\n \n _SUPPORTED_RBF_KERNEL_TYPES = [\"gaussian\", \"laplacian\"]\n \n\n@@ -14,27 +14,27 @@\n # ==============================================================================\n \"\"\"Tests for kernelized.py.\"\"\"\n \n-import tensorflow.compat.v2 as tf\n-\n import functools\n import math\n import os\n import shutil\n \n-from absl.testing import parameterized\n import numpy as np\n+import tensorflow.compat.v2 as tf\n+from absl.testing import parameterized\n from tensorflow.python.framework import (\n     test_util as tf_test_utils,\n )\n+\n from keras import backend as keras_backend\n-from keras.testing_infra import test_combinations\n from keras import initializers\n-from keras.testing_infra import test_utils\n from keras.engine import base_layer_utils\n from keras.engine import input_layer\n from keras.engine import training\n from keras.layers import kernelized as kernel_layers\n from keras.saving import save\n+from keras.testing_infra import test_combinations\n+from keras.testing_infra import test_utils\n from keras.utils import kernelized_utils\n \n \n\n@@ -15,9 +15,10 @@\n # pylint: disable=g-classes-have-attributes\n \"\"\"Tests for layers.__init__.\"\"\"\n \n-from keras import layers\n import tensorflow.compat.v2 as tf\n \n+from keras import layers\n+\n \n class LayersTest(tf.test.TestCase):\n     def test_keras_private_symbol(self):\n\n@@ -15,6 +15,8 @@\n # pylint: disable=g-classes-have-attributes,g-direct-tensorflow-import\n \"\"\"Locally-connected layer for 1D input.\"\"\"\n \n+from tensorflow.python.util.tf_export import keras_export\n+\n from keras import activations\n from keras import backend\n from keras import constraints\n@@ -26,8 +28,6 @@ from keras.layers.locally_connected import locally_connected_utils\n from keras.utils import conv_utils\n from keras.utils import tf_utils\n \n-from tensorflow.python.util.tf_export import keras_export\n-\n \n @keras_export(\"keras.layers.LocallyConnected1D\")\n class LocallyConnected1D(Layer):\n\n@@ -15,6 +15,8 @@\n # pylint: disable=g-classes-have-attributes,g-direct-tensorflow-import\n \"\"\"Locally-connected layer for 2D input.\"\"\"\n \n+from tensorflow.python.util.tf_export import keras_export\n+\n from keras import activations\n from keras import backend\n from keras import constraints\n@@ -26,8 +28,6 @@ from keras.layers.locally_connected import locally_connected_utils\n from keras.utils import conv_utils\n from keras.utils import tf_utils\n \n-from tensorflow.python.util.tf_export import keras_export\n-\n \n @keras_export(\"keras.layers.LocallyConnected2D\")\n class LocallyConnected2D(Layer):\n\n@@ -17,15 +17,9 @@\n \n import os\n \n-from absl.testing import parameterized\n-import keras\n-from keras.layers.locally_connected import locally_connected_utils\n-from keras.optimizers.optimizer_v2 import rmsprop\n-from keras.testing_infra import test_combinations\n-from keras.testing_infra import test_utils\n import numpy as np\n import tensorflow.compat.v2 as tf\n-\n+from absl.testing import parameterized\n from tensorflow.python.framework import (\n     test_util as tf_test_util,\n )\n@@ -33,6 +27,11 @@ from tensorflow.python.training.rmsprop import (\n     RMSPropOptimizer,\n )\n \n+import keras\n+from keras.layers.locally_connected import locally_connected_utils\n+from keras.optimizers.optimizer_v2 import rmsprop\n+from keras.testing_infra import test_combinations\n+from keras.testing_infra import test_utils\n \n _DATA_FORMAT_PADDING_IMPLEMENTATION = [\n     {\"data_format\": \"channels_first\", \"padding\": \"valid\", \"implementation\": 1},\n\n@@ -14,11 +14,12 @@\n # ==============================================================================\n \"\"\"Private utilities for locally-connected layers.\"\"\"\n \n-from keras import backend\n-from keras.utils import conv_utils\n import numpy as np\n import tensorflow.compat.v2 as tf\n \n+from keras import backend\n+from keras.utils import conv_utils\n+\n \n def get_locallyconnected_mask(\n     input_shape, kernel_shape, strides, padding, data_format\n\n@@ -15,22 +15,21 @@\n \"\"\"Keras merging layers.\"\"\"\n # pylint: disable=g-bad-import-order\n \n+# Merging functions.\n # Merging layers.\n from keras.layers.merging.add import Add\n-from keras.layers.merging.subtract import Subtract\n-from keras.layers.merging.multiply import Multiply\n-from keras.layers.merging.average import Average\n-from keras.layers.merging.maximum import Maximum\n-from keras.layers.merging.minimum import Minimum\n-from keras.layers.merging.concatenate import Concatenate\n-from keras.layers.merging.dot import Dot\n-\n-# Merging functions.\n from keras.layers.merging.add import add\n-from keras.layers.merging.subtract import subtract\n-from keras.layers.merging.multiply import multiply\n+from keras.layers.merging.average import Average\n from keras.layers.merging.average import average\n-from keras.layers.merging.maximum import maximum\n-from keras.layers.merging.minimum import minimum\n+from keras.layers.merging.concatenate import Concatenate\n from keras.layers.merging.concatenate import concatenate\n+from keras.layers.merging.dot import Dot\n from keras.layers.merging.dot import dot\n+from keras.layers.merging.maximum import Maximum\n+from keras.layers.merging.maximum import maximum\n+from keras.layers.merging.minimum import Minimum\n+from keras.layers.merging.minimum import minimum\n+from keras.layers.merging.multiply import Multiply\n+from keras.layers.merging.multiply import multiply\n+from keras.layers.merging.subtract import Subtract\n+from keras.layers.merging.subtract import subtract\n\n@@ -15,10 +15,10 @@\n \"\"\"Layer that adds several inputs.\"\"\"\n \n \n-from keras.layers.merging.base_merge import _Merge\n-\n from tensorflow.python.util.tf_export import keras_export\n \n+from keras.layers.merging.base_merge import _Merge\n+\n \n @keras_export(\"keras.layers.Add\")\n class Add(_Merge):\n\n@@ -15,10 +15,10 @@\n \"\"\"Layer that averages several inputs.\"\"\"\n \n \n-from keras.layers.merging.base_merge import _Merge\n-\n from tensorflow.python.util.tf_export import keras_export\n \n+from keras.layers.merging.base_merge import _Merge\n+\n \n @keras_export(\"keras.layers.Average\")\n class Average(_Merge):\n\n@@ -14,10 +14,11 @@\n # ==============================================================================\n \"\"\"Private base class for layers that can merge several inputs into one.\"\"\"\n \n+import tensorflow.compat.v2 as tf\n+\n from keras import backend\n from keras.engine.base_layer import Layer\n from keras.utils import tf_utils\n-import tensorflow.compat.v2 as tf\n \n \n class _Merge(Layer):\n\n@@ -15,12 +15,12 @@\n \"\"\"Layer that concatenates several inputs.\"\"\"\n \n \n+import tensorflow.compat.v2 as tf\n+from tensorflow.python.util.tf_export import keras_export\n+\n from keras import backend\n from keras.layers.merging.base_merge import _Merge\n from keras.utils import tf_utils\n-import tensorflow.compat.v2 as tf\n-\n-from tensorflow.python.util.tf_export import keras_export\n \n \n @keras_export(\"keras.layers.Concatenate\")\n\n@@ -15,13 +15,13 @@\n \"\"\"Layer that computes the dot product between two inputs.\"\"\"\n \n \n+import tensorflow.compat.v2 as tf\n+from tensorflow.python.util.tf_export import keras_export\n+\n from keras import backend\n from keras.engine import base_layer_utils\n from keras.layers.merging.base_merge import _Merge\n from keras.utils import tf_utils\n-import tensorflow.compat.v2 as tf\n-\n-from tensorflow.python.util.tf_export import keras_export\n \n \n @keras_export(\"keras.layers.Dot\")\n\n@@ -15,11 +15,11 @@\n \"\"\"Layer that computes the maximum (element-wise) of several inputs.\"\"\"\n \n \n-from keras.layers.merging.base_merge import _Merge\n import tensorflow.compat.v2 as tf\n-\n from tensorflow.python.util.tf_export import keras_export\n \n+from keras.layers.merging.base_merge import _Merge\n+\n \n @keras_export(\"keras.layers.Maximum\")\n class Maximum(_Merge):\n\n@@ -14,14 +14,15 @@\n # ==============================================================================\n \"\"\"Tests for merging layers.\"\"\"\n \n+import numpy as np\n+import tensorflow.compat.v2 as tf\n from absl.testing import parameterized\n+\n import keras\n from keras import backend\n from keras.testing_infra import test_combinations\n from keras.testing_infra import test_utils\n from keras.utils import tf_inspect\n-import numpy as np\n-import tensorflow.compat.v2 as tf\n \n \n @test_combinations.run_all_keras_modes\n\n@@ -15,11 +15,11 @@\n \"\"\"Layer that computes the minimum (element-wise) of several inputs.\"\"\"\n \n \n-from keras.layers.merging.base_merge import _Merge\n import tensorflow.compat.v2 as tf\n-\n from tensorflow.python.util.tf_export import keras_export\n \n+from keras.layers.merging.base_merge import _Merge\n+\n \n @keras_export(\"keras.layers.Minimum\")\n class Minimum(_Merge):\n\n@@ -15,10 +15,10 @@\n \"\"\"Layer that multiplies (element-wise) several inputs.\"\"\"\n \n \n-from keras.layers.merging.base_merge import _Merge\n-\n from tensorflow.python.util.tf_export import keras_export\n \n+from keras.layers.merging.base_merge import _Merge\n+\n \n @keras_export(\"keras.layers.Multiply\")\n class Multiply(_Merge):\n\n@@ -15,11 +15,11 @@\n \"\"\"Layer that subtracts two inputs.\"\"\"\n \n \n+from tensorflow.python.util.tf_export import keras_export\n+\n from keras.layers.merging.base_merge import _Merge\n from keras.utils import tf_utils\n \n-from tensorflow.python.util.tf_export import keras_export\n-\n \n @keras_export(\"keras.layers.Subtract\")\n class Subtract(_Merge):\n\n@@ -15,7 +15,8 @@\n \"\"\"Layers that operate regularization via the addition of noise.\"\"\"\n # pylint: disable=g-bad-import-order,unused-import\n \n+from keras.layers.regularization.alpha_dropout import AlphaDropout\n+\n # Regularization layers imported for backwards namespace compatibility\n from keras.layers.regularization.gaussian_dropout import GaussianDropout\n from keras.layers.regularization.gaussian_noise import GaussianNoise\n-from keras.layers.regularization.alpha_dropout import AlphaDropout\n\n@@ -15,6 +15,12 @@\n \"\"\"The V2 implementation of Normalization layers.\"\"\"\n \n import tensorflow.compat.v2 as tf\n+from tensorflow.python.ops.control_flow_ops import (\n+    get_enclosing_xla_context,\n+)\n+from tensorflow.python.platform import tf_logging as logging\n+from tensorflow.python.util.tf_export import keras_export\n+\n from keras import backend\n from keras import constraints\n from keras import initializers\n@@ -24,11 +30,6 @@ from keras.engine.base_layer import Layer\n from keras.engine.input_spec import InputSpec\n from keras.utils import control_flow_util\n from keras.utils import tf_utils\n-from tensorflow.python.ops.control_flow_ops import (\n-    get_enclosing_xla_context,\n-)\n-from tensorflow.python.platform import tf_logging as logging\n-from tensorflow.python.util.tf_export import keras_export\n \n \n class BatchNormalizationBase(Layer):\n\n@@ -14,10 +14,9 @@\n # ==============================================================================\n \"\"\"Tests for normalization layers.\"\"\"\n \n-import tensorflow.compat.v2 as tf\n-\n-from absl.testing import parameterized\n import numpy as np\n+import tensorflow.compat.v2 as tf\n+from absl.testing import parameterized\n \n import keras\n from keras.layers.normalization import batch_normalization\n\n@@ -15,9 +15,10 @@\n \"\"\"Batch Normalization V1 layer.\"\"\"\n # pylint: disable=g-classes-have-attributes\n \n-from keras.layers.normalization import batch_normalization\n from tensorflow.python.util.tf_export import keras_export\n \n+from keras.layers.normalization import batch_normalization\n+\n \n # pylint: disable=missing-docstring\n @keras_export(v1=[\"keras.layers.BatchNormalization\"])\n\n@@ -15,8 +15,7 @@\n \"\"\"Layer Normalization layer.\"\"\"\n \n import tensorflow.compat.v2 as tf\n-\n-# pylint: disable=g-classes-have-attributes\n+from tensorflow.python.util.tf_export import keras_export\n \n from keras import constraints\n from keras import initializers\n@@ -25,7 +24,7 @@ from keras.dtensor import utils\n from keras.engine.base_layer import Layer\n from keras.utils import tf_utils\n \n-from tensorflow.python.util.tf_export import keras_export\n+# pylint: disable=g-classes-have-attributes\n \n \n @keras_export(\"keras.layers.LayerNormalization\")\n\n@@ -14,14 +14,13 @@\n # ==============================================================================\n \"\"\"Tests for normalization layers.\"\"\"\n \n+import numpy as np\n import tensorflow.compat.v2 as tf\n \n-import numpy as np\n-\n import keras\n+from keras.layers.normalization import layer_normalization\n from keras.testing_infra import test_combinations\n from keras.testing_infra import test_utils\n-from keras.layers.normalization import layer_normalization\n \n \n def _run_layernorm_correctness_test(layer, dtype=\"float32\"):\n\n@@ -18,12 +18,11 @@\n # pylint: disable=g-classes-have-attributes\n \n import tensorflow.compat.v2 as tf\n+from tensorflow.python.util.tf_export import keras_export\n \n from keras.engine import base_layer\n from keras.utils import tf_utils\n \n-from tensorflow.python.util.tf_export import keras_export\n-\n \n @keras_export(\"keras.layers.UnitNormalization\", v1=[])\n class UnitNormalization(base_layer.Layer):\n\n@@ -15,30 +15,29 @@\n \"\"\"Keras Pooling layers.\"\"\"\n # pylint: disable=g-bad-import-order\n \n+# Pooling layer aliases.\n # Pooling layers.\n from keras.layers.pooling.average_pooling1d import AveragePooling1D\n-from keras.layers.pooling.average_pooling2d import AveragePooling2D\n-from keras.layers.pooling.average_pooling3d import AveragePooling3D\n-from keras.layers.pooling.max_pooling1d import MaxPooling1D\n-from keras.layers.pooling.max_pooling2d import MaxPooling2D\n-from keras.layers.pooling.max_pooling3d import MaxPooling3D\n-from keras.layers.pooling.global_average_pooling1d import GlobalAveragePooling1D\n-from keras.layers.pooling.global_average_pooling2d import GlobalAveragePooling2D\n-from keras.layers.pooling.global_average_pooling3d import GlobalAveragePooling3D\n-from keras.layers.pooling.global_max_pooling1d import GlobalMaxPooling1D\n-from keras.layers.pooling.global_max_pooling2d import GlobalMaxPooling2D\n-from keras.layers.pooling.global_max_pooling3d import GlobalMaxPooling3D\n-\n-# Pooling layer aliases.\n from keras.layers.pooling.average_pooling1d import AvgPool1D\n+from keras.layers.pooling.average_pooling2d import AveragePooling2D\n from keras.layers.pooling.average_pooling2d import AvgPool2D\n+from keras.layers.pooling.average_pooling3d import AveragePooling3D\n from keras.layers.pooling.average_pooling3d import AvgPool3D\n-from keras.layers.pooling.max_pooling1d import MaxPool1D\n-from keras.layers.pooling.max_pooling2d import MaxPool2D\n-from keras.layers.pooling.max_pooling3d import MaxPool3D\n+from keras.layers.pooling.global_average_pooling1d import GlobalAveragePooling1D\n from keras.layers.pooling.global_average_pooling1d import GlobalAvgPool1D\n+from keras.layers.pooling.global_average_pooling2d import GlobalAveragePooling2D\n from keras.layers.pooling.global_average_pooling2d import GlobalAvgPool2D\n+from keras.layers.pooling.global_average_pooling3d import GlobalAveragePooling3D\n from keras.layers.pooling.global_average_pooling3d import GlobalAvgPool3D\n from keras.layers.pooling.global_max_pooling1d import GlobalMaxPool1D\n+from keras.layers.pooling.global_max_pooling1d import GlobalMaxPooling1D\n from keras.layers.pooling.global_max_pooling2d import GlobalMaxPool2D\n+from keras.layers.pooling.global_max_pooling2d import GlobalMaxPooling2D\n from keras.layers.pooling.global_max_pooling3d import GlobalMaxPool3D\n+from keras.layers.pooling.global_max_pooling3d import GlobalMaxPooling3D\n+from keras.layers.pooling.max_pooling1d import MaxPool1D\n+from keras.layers.pooling.max_pooling1d import MaxPooling1D\n+from keras.layers.pooling.max_pooling2d import MaxPool2D\n+from keras.layers.pooling.max_pooling2d import MaxPooling2D\n+from keras.layers.pooling.max_pooling3d import MaxPool3D\n+from keras.layers.pooling.max_pooling3d import MaxPooling3D\n\n@@ -17,11 +17,11 @@\n \n import functools\n \n+from tensorflow.python.util.tf_export import keras_export\n+\n from keras import backend\n from keras.layers.pooling.base_pooling1d import Pooling1D\n \n-from tensorflow.python.util.tf_export import keras_export\n-\n \n @keras_export(\"keras.layers.AveragePooling1D\", \"keras.layers.AvgPool1D\")\n class AveragePooling1D(Pooling1D):\n\n@@ -15,11 +15,11 @@\n \"\"\"Average pooling 2D layer.\"\"\"\n # pylint: disable=g-classes-have-attributes,g-direct-tensorflow-import\n \n-from keras.layers.pooling.base_pooling2d import Pooling2D\n import tensorflow.compat.v2 as tf\n-\n from tensorflow.python.util.tf_export import keras_export\n \n+from keras.layers.pooling.base_pooling2d import Pooling2D\n+\n \n @keras_export(\"keras.layers.AveragePooling2D\", \"keras.layers.AvgPool2D\")\n class AveragePooling2D(Pooling2D):\n\n@@ -15,11 +15,11 @@\n \"\"\"Average pooling 3D layer.\"\"\"\n # pylint: disable=g-classes-have-attributes,g-direct-tensorflow-import\n \n-from keras.layers.pooling.base_pooling3d import Pooling3D\n import tensorflow.compat.v2 as tf\n-\n from tensorflow.python.util.tf_export import keras_export\n \n+from keras.layers.pooling.base_pooling3d import Pooling3D\n+\n \n @keras_export(\"keras.layers.AveragePooling3D\", \"keras.layers.AvgPool3D\")\n class AveragePooling3D(Pooling3D):\n\n@@ -14,11 +14,12 @@\n # ==============================================================================\n \"\"\"Tests for average pooling layers.\"\"\"\n \n+import tensorflow.compat.v2 as tf\n from absl.testing import parameterized\n+\n import keras\n from keras.testing_infra import test_combinations\n from keras.testing_infra import test_utils\n-import tensorflow.compat.v2 as tf\n \n \n @test_combinations.generate(test_combinations.combine(mode=[\"graph\", \"eager\"]))\n\n@@ -15,10 +15,11 @@\n \"\"\"Private base class for global pooling 1D layers.\"\"\"\n # pylint: disable=g-classes-have-attributes\n \n+import tensorflow.compat.v2 as tf\n+\n from keras.engine.base_layer import Layer\n from keras.engine.input_spec import InputSpec\n from keras.utils import conv_utils\n-import tensorflow.compat.v2 as tf\n \n \n class GlobalPooling1D(Layer):\n\n@@ -15,10 +15,11 @@\n \"\"\"Private base class for global pooling 2D layers.\"\"\"\n # pylint: disable=g-classes-have-attributes\n \n+import tensorflow.compat.v2 as tf\n+\n from keras.engine.base_layer import Layer\n from keras.engine.input_spec import InputSpec\n from keras.utils import conv_utils\n-import tensorflow.compat.v2 as tf\n \n \n class GlobalPooling2D(Layer):\n\n@@ -15,10 +15,11 @@\n \"\"\"Private base class for global pooling 3D layers.\"\"\"\n # pylint: disable=g-classes-have-attributes\n \n+import tensorflow.compat.v2 as tf\n+\n from keras.engine.base_layer import Layer\n from keras.engine.input_spec import InputSpec\n from keras.utils import conv_utils\n-import tensorflow.compat.v2 as tf\n \n \n class GlobalPooling3D(Layer):\n\n@@ -15,11 +15,12 @@\n \"\"\"Private base class for pooling 1D layers.\"\"\"\n # pylint: disable=g-classes-have-attributes\n \n+import tensorflow.compat.v2 as tf\n+\n from keras import backend\n from keras.engine.base_layer import Layer\n from keras.engine.input_spec import InputSpec\n from keras.utils import conv_utils\n-import tensorflow.compat.v2 as tf\n \n \n class Pooling1D(Layer):\n\n@@ -15,11 +15,12 @@\n \"\"\"Private base class for pooling 2D layers.\"\"\"\n # pylint: disable=g-classes-have-attributes\n \n+import tensorflow.compat.v2 as tf\n+\n from keras import backend\n from keras.engine.base_layer import Layer\n from keras.engine.input_spec import InputSpec\n from keras.utils import conv_utils\n-import tensorflow.compat.v2 as tf\n \n \n class Pooling2D(Layer):\n\n@@ -15,11 +15,12 @@\n \"\"\"Private base class for pooling 3D layers.\"\"\"\n # pylint: disable=g-classes-have-attributes\n \n+import tensorflow.compat.v2 as tf\n+\n from keras import backend\n from keras.engine.base_layer import Layer\n from keras.engine.input_spec import InputSpec\n from keras.utils import conv_utils\n-import tensorflow.compat.v2 as tf\n \n \n class Pooling3D(Layer):\n\n@@ -15,11 +15,11 @@\n \"\"\"Global average pooling 1D layer.\"\"\"\n # pylint: disable=g-classes-have-attributes,g-direct-tensorflow-import\n \n+import tensorflow.compat.v2 as tf\n+from tensorflow.python.util.tf_export import keras_export\n+\n from keras import backend\n from keras.layers.pooling.base_global_pooling1d import GlobalPooling1D\n-import tensorflow.compat.v2 as tf\n-\n-from tensorflow.python.util.tf_export import keras_export\n \n \n @keras_export(\n\n@@ -15,11 +15,11 @@\n \"\"\"Global average pooling 2D layer.\"\"\"\n # pylint: disable=g-classes-have-attributes,g-direct-tensorflow-import\n \n+from tensorflow.python.util.tf_export import keras_export\n+\n from keras import backend\n from keras.layers.pooling.base_global_pooling2d import GlobalPooling2D\n \n-from tensorflow.python.util.tf_export import keras_export\n-\n \n @keras_export(\n     \"keras.layers.GlobalAveragePooling2D\", \"keras.layers.GlobalAvgPool2D\"\n\n@@ -15,11 +15,11 @@\n \"\"\"Global average pooling 3D layer.\"\"\"\n # pylint: disable=g-classes-have-attributes,g-direct-tensorflow-import\n \n+from tensorflow.python.util.tf_export import keras_export\n+\n from keras import backend\n from keras.layers.pooling.base_global_pooling3d import GlobalPooling3D\n \n-from tensorflow.python.util.tf_export import keras_export\n-\n \n @keras_export(\n     \"keras.layers.GlobalAveragePooling3D\", \"keras.layers.GlobalAvgPool3D\"\n\n@@ -14,13 +14,14 @@\n # ==============================================================================\n \"\"\"Tests for global average pooling layers.\"\"\"\n \n+import numpy as np\n+import tensorflow.compat.v2 as tf\n from absl.testing import parameterized\n+\n import keras\n from keras.mixed_precision import policy\n from keras.testing_infra import test_combinations\n from keras.testing_infra import test_utils\n-import numpy as np\n-import tensorflow.compat.v2 as tf\n \n \n @test_combinations.generate(test_combinations.combine(mode=[\"graph\", \"eager\"]))\n\n@@ -15,11 +15,11 @@\n \"\"\"Global max pooling 1D layer.\"\"\"\n # pylint: disable=g-classes-have-attributes,g-direct-tensorflow-import\n \n+from tensorflow.python.util.tf_export import keras_export\n+\n from keras import backend\n from keras.layers.pooling.base_global_pooling1d import GlobalPooling1D\n \n-from tensorflow.python.util.tf_export import keras_export\n-\n \n @keras_export(\"keras.layers.GlobalMaxPool1D\", \"keras.layers.GlobalMaxPooling1D\")\n class GlobalMaxPooling1D(GlobalPooling1D):\n\n@@ -15,11 +15,11 @@\n \"\"\"Global max pooling 2D layer.\"\"\"\n # pylint: disable=g-classes-have-attributes,g-direct-tensorflow-import\n \n+from tensorflow.python.util.tf_export import keras_export\n+\n from keras import backend\n from keras.layers.pooling.base_global_pooling2d import GlobalPooling2D\n \n-from tensorflow.python.util.tf_export import keras_export\n-\n \n @keras_export(\"keras.layers.GlobalMaxPool2D\", \"keras.layers.GlobalMaxPooling2D\")\n class GlobalMaxPooling2D(GlobalPooling2D):\n\n@@ -15,11 +15,11 @@\n \"\"\"Global max pooling 3D layer.\"\"\"\n # pylint: disable=g-classes-have-attributes,g-direct-tensorflow-import\n \n+from tensorflow.python.util.tf_export import keras_export\n+\n from keras import backend\n from keras.layers.pooling.base_global_pooling3d import GlobalPooling3D\n \n-from tensorflow.python.util.tf_export import keras_export\n-\n \n @keras_export(\"keras.layers.GlobalMaxPool3D\", \"keras.layers.GlobalMaxPooling3D\")\n class GlobalMaxPooling3D(GlobalPooling3D):\n\n@@ -14,11 +14,12 @@\n # ==============================================================================\n \"\"\"Tests for global max pooling layers.\"\"\"\n \n+import tensorflow.compat.v2 as tf\n from absl.testing import parameterized\n+\n import keras\n from keras.testing_infra import test_combinations\n from keras.testing_infra import test_utils\n-import tensorflow.compat.v2 as tf\n \n \n @test_combinations.generate(test_combinations.combine(mode=[\"graph\", \"eager\"]))\n\n@@ -17,11 +17,11 @@\n \n import functools\n \n+from tensorflow.python.util.tf_export import keras_export\n+\n from keras import backend\n from keras.layers.pooling.base_pooling1d import Pooling1D\n \n-from tensorflow.python.util.tf_export import keras_export\n-\n \n @keras_export(\"keras.layers.MaxPool1D\", \"keras.layers.MaxPooling1D\")\n class MaxPooling1D(Pooling1D):\n\n@@ -15,11 +15,11 @@\n \"\"\"Max pooling 2D layer.\"\"\"\n # pylint: disable=g-classes-have-attributes,g-direct-tensorflow-import\n \n-from keras.layers.pooling.base_pooling2d import Pooling2D\n import tensorflow.compat.v2 as tf\n-\n from tensorflow.python.util.tf_export import keras_export\n \n+from keras.layers.pooling.base_pooling2d import Pooling2D\n+\n \n @keras_export(\"keras.layers.MaxPool2D\", \"keras.layers.MaxPooling2D\")\n class MaxPooling2D(Pooling2D):\n\n@@ -15,11 +15,11 @@\n \"\"\"Max pooling 3D layer.\"\"\"\n # pylint: disable=g-classes-have-attributes,g-direct-tensorflow-import\n \n-from keras.layers.pooling.base_pooling3d import Pooling3D\n import tensorflow.compat.v2 as tf\n-\n from tensorflow.python.util.tf_export import keras_export\n \n+from keras.layers.pooling.base_pooling3d import Pooling3D\n+\n \n @keras_export(\"keras.layers.MaxPool3D\", \"keras.layers.MaxPooling3D\")\n class MaxPooling3D(Pooling3D):\n\n@@ -14,11 +14,12 @@\n # ==============================================================================\n \"\"\"Tests for max pooling layers.\"\"\"\n \n+import tensorflow.compat.v2 as tf\n from absl.testing import parameterized\n+\n import keras\n from keras.testing_infra import test_combinations\n from keras.testing_infra import test_utils\n-import tensorflow.compat.v2 as tf\n \n \n @test_combinations.generate(test_combinations.combine(mode=[\"graph\", \"eager\"]))\n\n@@ -14,14 +14,13 @@\n # ==============================================================================\n \"\"\"Benchmark for KPL implementation of bucketized columns with dense inputs.\"\"\"\n \n-import tensorflow.compat.v2 as tf\n-\n import numpy as np\n-\n-import keras\n+import tensorflow.compat.v2 as tf\n from tensorflow.python.eager.def_function import (\n     function as tf_function,\n )\n+\n+import keras\n from keras.layers.preprocessing import discretization\n from keras.layers.preprocessing.benchmarks import (\n     feature_column_benchmark as fc_bm,\n\n@@ -14,11 +14,10 @@\n # ==============================================================================\n \"\"\"Benchmark for Keras category_encoding preprocessing layer.\"\"\"\n \n-import tensorflow.compat.v2 as tf\n-\n import time\n \n import numpy as np\n+import tensorflow.compat.v2 as tf\n \n import keras\n from keras.layers.preprocessing import category_encoding\n\n@@ -16,11 +16,11 @@\n inputs.\"\"\"\n \n import tensorflow.compat.v2 as tf\n-\n-import keras\n from tensorflow.python.eager.def_function import (\n     function as tf_function,\n )\n+\n+import keras\n from keras.layers.preprocessing import hashing\n from keras.layers.preprocessing.benchmarks import (\n     feature_column_benchmark as fc_bm,\n\n@@ -16,11 +16,11 @@\n varying-length inputs.\"\"\"\n \n import tensorflow.compat.v2 as tf\n-\n-import keras\n from tensorflow.python.eager.def_function import (\n     function as tf_function,\n )\n+\n+import keras\n from keras.layers.preprocessing import hashing\n from keras.layers.preprocessing.benchmarks import (\n     feature_column_benchmark as fc_bm,\n\n@@ -15,14 +15,14 @@\n \"\"\"Benchmark for KPL implementation of vocabulary columns from files with dense\n inputs.\"\"\"\n \n-import tensorflow.compat.v2 as tf\n-\n import os\n \n-import keras\n+import tensorflow.compat.v2 as tf\n from tensorflow.python.eager.def_function import (\n     function as tf_function,\n )\n+\n+import keras\n from keras.layers.preprocessing import string_lookup\n from keras.layers.preprocessing.benchmarks import (\n     feature_column_benchmark as fc_bm,\n\n@@ -15,14 +15,14 @@\n \"\"\"Benchmark for KPL implementation of vocabulary columns from files with\n varying-length inputs.\"\"\"\n \n-import tensorflow.compat.v2 as tf\n-\n import os\n \n-import keras\n+import tensorflow.compat.v2 as tf\n from tensorflow.python.eager.def_function import (\n     function as tf_function,\n )\n+\n+import keras\n from keras.layers.preprocessing import string_lookup\n from keras.layers.preprocessing.benchmarks import (\n     feature_column_benchmark as fc_bm,\n\n@@ -16,11 +16,11 @@\n inputs.\"\"\"\n \n import tensorflow.compat.v2 as tf\n-\n-import keras\n from tensorflow.python.eager.def_function import (\n     function as tf_function,\n )\n+\n+import keras\n from keras.layers.preprocessing import string_lookup\n from keras.layers.preprocessing.benchmarks import (\n     feature_column_benchmark as fc_bm,\n\n@@ -16,11 +16,11 @@\n with dense inputs.\"\"\"\n \n import tensorflow.compat.v2 as tf\n-\n-import keras\n from tensorflow.python.eager.def_function import (\n     function as tf_function,\n )\n+\n+import keras\n from keras.layers.preprocessing import category_encoding\n from keras.layers.preprocessing import string_lookup\n from keras.layers.preprocessing.benchmarks import (\n\n@@ -16,11 +16,11 @@\n with varying-length inputs.\"\"\"\n \n import tensorflow.compat.v2 as tf\n-\n-import keras\n from tensorflow.python.eager.def_function import (\n     function as tf_function,\n )\n+\n+import keras\n from keras.layers.preprocessing import category_encoding\n from keras.layers.preprocessing import string_lookup\n from keras.layers.preprocessing.benchmarks import (\n\n@@ -16,11 +16,11 @@\n varying-length inputs.\"\"\"\n \n import tensorflow.compat.v2 as tf\n-\n-import keras\n from tensorflow.python.eager.def_function import (\n     function as tf_function,\n )\n+\n+import keras\n from keras.layers.preprocessing import string_lookup\n from keras.layers.preprocessing.benchmarks import (\n     feature_column_benchmark as fc_bm,\n\n@@ -14,11 +14,10 @@\n # ==============================================================================\n \"\"\"Benchmark for Keras discretization preprocessing layer's adapt method.\"\"\"\n \n-import tensorflow.compat.v2 as tf\n-\n import time\n \n import numpy as np\n+import tensorflow.compat.v2 as tf\n \n import keras\n from keras.layers.preprocessing import discretization\n\n@@ -15,11 +15,11 @@\n \"\"\"Benchmark for KPL implementation of embedding column with dense inputs.\"\"\"\n \n import tensorflow.compat.v2 as tf\n-\n-import keras\n from tensorflow.python.eager.def_function import (\n     function as tf_function,\n )\n+\n+import keras\n from keras.layers.preprocessing.benchmarks import (\n     feature_column_benchmark as fc_bm,\n )\n\n@@ -16,11 +16,11 @@\n inputs.\"\"\"\n \n import tensorflow.compat.v2 as tf\n-\n-import keras\n from tensorflow.python.eager.def_function import (\n     function as tf_function,\n )\n+\n+import keras\n from keras.layers.preprocessing.benchmarks import (\n     feature_column_benchmark as fc_bm,\n )\n\n@@ -14,7 +14,6 @@\n # ==============================================================================\n \"\"\"Benchmark suite for KPL and feature column implementations.\"\"\"\n \n-import tensorflow.compat.v2 as tf\n import itertools\n import math\n import random\n@@ -22,6 +21,7 @@ import string\n import time\n \n import numpy as np\n+import tensorflow.compat.v2 as tf\n \n import keras\n \n\n@@ -16,15 +16,16 @@\n inputs.\"\"\"\n \n \n+import tensorflow.compat.v2 as tf\n+from tensorflow.python.eager.def_function import (\n+    function as tf_function,\n+)\n+\n import keras\n from keras.layers.preprocessing import hashed_crossing\n from keras.layers.preprocessing.benchmarks import (\n     feature_column_benchmark as fc_bm,\n )\n-import tensorflow.compat.v2 as tf\n-from tensorflow.python.eager.def_function import (\n-    function as tf_function,\n-)\n \n NUM_REPEATS = 10\n BATCH_SIZES = [32, 256]\n\n@@ -14,14 +14,13 @@\n # ==============================================================================\n \"\"\"Benchmark for Keras hashing preprocessing layer.\"\"\"\n \n-import tensorflow.compat.v2 as tf\n-\n import itertools\n import random\n import string\n import time\n \n import numpy as np\n+import tensorflow.compat.v2 as tf\n \n import keras\n from keras.layers.preprocessing import hashing\n\n@@ -14,12 +14,11 @@\n # ==============================================================================\n \"\"\"Benchmark for Keras image preprocessing layer.\"\"\"\n \n-import tensorflow.compat.v2 as tf\n-\n import functools\n import time\n \n import numpy as np\n+import tensorflow.compat.v2 as tf\n \n import keras\n from keras.layers.preprocessing import image_preprocessing\n\n@@ -14,8 +14,6 @@\n # ==============================================================================\n \"\"\"Benchmark for Keras text vectorization preprocessing layer's adapt method.\"\"\"\n \n-import tensorflow.compat.v2 as tf\n-\n import collections\n import itertools\n import random\n@@ -23,6 +21,7 @@ import string\n import time\n \n import numpy as np\n+import tensorflow.compat.v2 as tf\n \n import keras\n from keras.layers.preprocessing import index_lookup\n\n@@ -14,14 +14,13 @@\n # ==============================================================================\n \"\"\"Benchmark for Keras text vectorization preprocessing layer's adapt method.\"\"\"\n \n-import tensorflow.compat.v2 as tf\n-\n import os\n import random\n import string\n import time\n \n import numpy as np\n+import tensorflow.compat.v2 as tf\n \n import keras\n from keras.layers.preprocessing import index_lookup\n\n@@ -14,11 +14,10 @@\n # ==============================================================================\n \"\"\"Benchmark for Keras text vectorization preprocessing layer's adapt method.\"\"\"\n \n-import tensorflow.compat.v2 as tf\n-\n import time\n \n import numpy as np\n+import tensorflow.compat.v2 as tf\n \n import keras\n from keras.layers.preprocessing import normalization\n\n@@ -16,11 +16,11 @@\n varying-length inputs.\"\"\"\n \n import tensorflow.compat.v2 as tf\n-\n-import keras\n from tensorflow.python.eager.def_function import (\n     function as tf_function,\n )\n+\n+import keras\n from keras.layers.preprocessing.benchmarks import (\n     feature_column_benchmark as fc_bm,\n )\n\n@@ -17,14 +17,15 @@\n # pylint: disable=g-classes-have-attributes\n \n \n+import tensorflow.compat.v2 as tf\n+from tensorflow.python.platform import tf_logging as logging\n+from tensorflow.python.util.tf_export import keras_export\n+\n from keras import backend\n from keras.engine import base_layer\n from keras.engine import base_preprocessing_layer\n from keras.layers.preprocessing import preprocessing_utils as utils\n from keras.utils import layer_utils\n-import tensorflow.compat.v2 as tf\n-from tensorflow.python.platform import tf_logging as logging\n-from tensorflow.python.util.tf_export import keras_export\n \n INT = utils.INT\n ONE_HOT = utils.ONE_HOT\n\n@@ -15,6 +15,12 @@\n \"\"\"Distribution tests for keras.layers.preprocessing.category_encoding.\"\"\"\n \n \n+import numpy as np\n+import tensorflow.compat.v2 as tf\n+from tensorflow.python.framework import (\n+    test_util as tf_test_utils,\n+)\n+\n import keras\n from keras import backend\n from keras.distribute import strategy_combinations\n@@ -22,11 +28,6 @@ from keras.layers.preprocessing import category_encoding\n from keras.layers.preprocessing import preprocessing_test_utils\n from keras.testing_infra import test_combinations\n from keras.testing_infra import test_utils\n-import numpy as np\n-import tensorflow.compat.v2 as tf\n-from tensorflow.python.framework import (\n-    test_util as tf_test_utils,\n-)\n \n \n def batch_wrapper(dataset, batch_size, strategy, repeat=None):\n\n@@ -15,15 +15,16 @@\n \"\"\"Tests for Keras text category_encoding preprocessing layer.\"\"\"\n \n \n+import numpy as np\n+import tensorflow.compat.v2 as tf\n from absl.testing import parameterized\n+\n import keras\n from keras import backend\n from keras.layers import core\n from keras.layers.preprocessing import category_encoding\n from keras.layers.preprocessing import preprocessing_test_utils\n from keras.testing_infra import test_combinations\n-import numpy as np\n-import tensorflow.compat.v2 as tf\n \n \n @test_combinations.run_all_keras_modes(always_skip_v1=True)\n\n@@ -17,15 +17,16 @@\n # pylint: disable=g-classes-have-attributes\n \n \n+import numpy as np\n+import tensorflow.compat.v2 as tf\n+from tensorflow.python.platform import tf_logging as logging\n+from tensorflow.python.util.tf_export import keras_export\n+\n from keras import backend\n from keras.engine import base_preprocessing_layer\n from keras.layers.preprocessing import preprocessing_utils as utils\n from keras.utils import layer_utils\n from keras.utils import tf_utils\n-import numpy as np\n-import tensorflow.compat.v2 as tf\n-from tensorflow.python.platform import tf_logging as logging\n-from tensorflow.python.util.tf_export import keras_export\n \n INT = utils.INT\n MULTI_HOT = utils.MULTI_HOT\n\n@@ -15,14 +15,15 @@\n \"\"\"Distribution tests for keras.layers.preprocessing.discretization.\"\"\"\n \n \n+import numpy as np\n+import tensorflow.compat.v2 as tf\n+\n import keras\n from keras.distribute import strategy_combinations\n from keras.layers.preprocessing import discretization\n from keras.layers.preprocessing import preprocessing_test_utils\n from keras.testing_infra import test_combinations\n from keras.testing_infra import test_utils\n-import numpy as np\n-import tensorflow.compat.v2 as tf\n \n \n @test_utils.run_v2_only\n\n@@ -16,14 +16,15 @@\n \n import os\n \n+import numpy as np\n+import tensorflow.compat.v2 as tf\n from absl.testing import parameterized\n+\n import keras\n from keras.layers.preprocessing import discretization\n from keras.layers.preprocessing import preprocessing_test_utils\n from keras.testing_infra import test_combinations\n from keras.testing_infra import test_utils\n-import numpy as np\n-import tensorflow.compat.v2 as tf\n \n \n @test_combinations.run_all_keras_modes\n\n@@ -17,13 +17,14 @@\n # pylint: disable=g-classes-have-attributes\n \n \n+import tensorflow.compat.v2 as tf\n+from tensorflow.python.util.tf_export import keras_export\n+\n from keras import backend\n from keras.engine import base_layer\n from keras.engine import base_preprocessing_layer\n from keras.layers.preprocessing import preprocessing_utils as utils\n from keras.utils import layer_utils\n-import tensorflow.compat.v2 as tf\n-from tensorflow.python.util.tf_export import keras_export\n \n INT = utils.INT\n ONE_HOT = utils.ONE_HOT\n\n@@ -15,14 +15,15 @@\n \"\"\"Tests for hashed crossing layer.\"\"\"\n \n import os\n+\n+import numpy as np\n+import tensorflow.compat.v2 as tf\n from absl.testing import parameterized\n \n import keras\n from keras.layers.preprocessing import hashed_crossing\n from keras.layers.preprocessing import preprocessing_test_utils\n from keras.testing_infra import test_combinations\n-import numpy as np\n-import tensorflow.compat.v2 as tf\n \n \n @test_combinations.run_all_keras_modes(always_skip_v1=True)\n\n@@ -17,13 +17,14 @@\n # pylint: disable=g-classes-have-attributes\n \n \n+import tensorflow.compat.v2 as tf\n+from tensorflow.python.util.tf_export import keras_export\n+\n from keras import backend\n from keras.engine import base_layer\n from keras.engine import base_preprocessing_layer\n from keras.layers.preprocessing import preprocessing_utils as utils\n from keras.utils import layer_utils\n-import tensorflow.compat.v2 as tf\n-from tensorflow.python.util.tf_export import keras_export\n \n INT = utils.INT\n MULTI_HOT = utils.MULTI_HOT\n\n@@ -15,6 +15,12 @@\n \"\"\"Tests for keras.layers.preprocessing.hashing.\"\"\"\n \n \n+import numpy as np\n+import tensorflow.compat.v2 as tf\n+from tensorflow.python.framework import (\n+    test_util as tf_test_utils,\n+)\n+\n import keras\n from keras import backend\n from keras.distribute import strategy_combinations\n@@ -22,11 +28,6 @@ from keras.layers.preprocessing import hashing\n from keras.layers.preprocessing import preprocessing_test_utils\n from keras.testing_infra import test_combinations\n from keras.testing_infra import test_utils\n-import numpy as np\n-import tensorflow.compat.v2 as tf\n-from tensorflow.python.framework import (\n-    test_util as tf_test_utils,\n-)\n \n \n @test_utils.run_v2_only\n\n@@ -15,6 +15,9 @@\n \"\"\"Tests for hashing layer.\"\"\"\n \n import os\n+\n+import numpy as np\n+import tensorflow.compat.v2 as tf\n from absl.testing import parameterized\n \n import keras\n@@ -24,8 +27,6 @@ from keras.layers.preprocessing import hashing\n from keras.layers.preprocessing import preprocessing_test_utils\n from keras.testing_infra import test_combinations\n from keras.testing_infra import test_utils\n-import numpy as np\n-import tensorflow.compat.v2 as tf\n \n \n @test_combinations.run_all_keras_modes(always_skip_v1=True)\n\n@@ -17,18 +17,18 @@\n # pylint: disable=g-classes-have-attributes\n \n \n+import numpy as np\n+import tensorflow.compat.v2 as tf\n+from tensorflow.python.ops import stateless_random_ops\n+from tensorflow.python.util.tf_export import keras_export\n+from tensorflow.tools.docs import doc_controls\n+\n from keras import backend\n from keras.engine import base_layer\n from keras.engine import base_preprocessing_layer\n from keras.layers.preprocessing import preprocessing_utils as utils\n from keras.utils import image_utils\n from keras.utils import tf_utils\n-import numpy as np\n-import tensorflow.compat.v2 as tf\n-\n-from tensorflow.python.ops import stateless_random_ops\n-from tensorflow.python.util.tf_export import keras_export\n-from tensorflow.tools.docs import doc_controls\n \n H_AXIS = -3\n W_AXIS = -2\n\n@@ -14,14 +14,15 @@\n # ==============================================================================\n \"\"\"Distribution tests for keras.layers.preprocessing.image_preprocessing.\"\"\"\n \n+import numpy as np\n+import tensorflow.compat.v2 as tf\n+\n import keras\n from keras.distribute import strategy_combinations\n from keras.layers.preprocessing import image_preprocessing\n from keras.layers.preprocessing import preprocessing_test_utils\n from keras.testing_infra import test_combinations\n from keras.testing_infra import test_utils\n-import numpy as np\n-import tensorflow.compat.v2 as tf\n \n \n @test_utils.run_v2_only\n\n@@ -15,17 +15,17 @@\n \"\"\"Tests for image preprocessing layers.\"\"\"\n \n import functools\n+\n+import numpy as np\n+import tensorflow.compat.v2 as tf\n from absl.testing import parameterized\n+from tensorflow.python.ops import stateless_random_ops\n \n import keras\n from keras.engine import sequential\n from keras.layers.preprocessing import image_preprocessing\n from keras.testing_infra import test_combinations\n from keras.testing_infra import test_utils\n-import numpy as np\n-import tensorflow.compat.v2 as tf\n-\n-from tensorflow.python.ops import stateless_random_ops\n \n \n @test_combinations.run_all_keras_modes(always_skip_v1=True)\n\n@@ -19,6 +19,10 @@\n \n import collections\n \n+import numpy as np\n+import tensorflow.compat.v2 as tf\n+from tensorflow.python.platform import tf_logging as logging\n+\n from keras import backend\n from keras.engine import base_layer_utils\n from keras.engine import base_preprocessing_layer\n@@ -26,9 +30,6 @@ from keras.layers.preprocessing import preprocessing_utils as utils\n from keras.saving.saved_model import layer_serialization\n from keras.utils import layer_utils\n from keras.utils import tf_utils\n-import numpy as np\n-import tensorflow.compat.v2 as tf\n-from tensorflow.python.platform import tf_logging as logging\n \n INT = utils.INT\n MULTI_HOT = utils.MULTI_HOT\n\n@@ -17,6 +17,12 @@\n \n import os\n \n+import numpy as np\n+import tensorflow.compat.v2 as tf\n+from tensorflow.python.framework import (\n+    test_util as tf_test_utils,\n+)\n+\n import keras\n from keras import backend\n from keras.distribute import strategy_combinations\n@@ -24,11 +30,6 @@ from keras.layers.preprocessing import index_lookup\n from keras.layers.preprocessing import preprocessing_test_utils\n from keras.testing_infra import test_combinations\n from keras.testing_infra import test_utils\n-import numpy as np\n-import tensorflow.compat.v2 as tf\n-from tensorflow.python.framework import (\n-    test_util as tf_test_utils,\n-)\n \n \n @test_utils.run_v2_only\n\n@@ -20,6 +20,8 @@ import os\n import random\n import string\n \n+import numpy as np\n+import tensorflow.compat.v2 as tf\n from absl.testing import parameterized\n \n import keras\n@@ -28,8 +30,6 @@ from keras.layers.preprocessing import preprocessing_test_utils\n from keras.testing_infra import test_combinations\n from keras.testing_infra import test_utils\n from keras.utils.generic_utils import CustomObjectScope\n-import numpy as np\n-import tensorflow.compat.v2 as tf\n \n \n def zip_and_sort(weight_values):\n\n@@ -17,13 +17,14 @@\n # pylint: disable=g-classes-have-attributes\n \n \n-from keras.engine import base_preprocessing_layer\n-from keras.layers.preprocessing import index_lookup\n import numpy as np\n import tensorflow.compat.v2 as tf\n from tensorflow.python.platform import tf_logging as logging\n from tensorflow.python.util.tf_export import keras_export\n \n+from keras.engine import base_preprocessing_layer\n+from keras.layers.preprocessing import index_lookup\n+\n \n @keras_export(\n     \"keras.layers.IntegerLookup\",\n\n@@ -14,21 +14,20 @@\n # ==============================================================================\n \"\"\"Tests for Keras text vectorization preprocessing layer.\"\"\"\n \n-import tensorflow.compat.v2 as tf\n-\n import gc\n import itertools\n import os\n import random\n \n-from absl.testing import parameterized\n import numpy as np\n+import tensorflow.compat.v2 as tf\n+from absl.testing import parameterized\n \n import keras\n-from keras.testing_infra import test_combinations\n-from keras.testing_infra import test_utils\n from keras.layers.preprocessing import integer_lookup\n from keras.layers.preprocessing import preprocessing_test_utils\n+from keras.testing_infra import test_combinations\n+from keras.testing_infra import test_utils\n \n \n def _get_end_to_end_test_cases():\n\n@@ -17,13 +17,14 @@\n # pylint: disable=g-classes-have-attributes\n \n \n-from keras import backend\n-from keras.engine import base_preprocessing_layer\n-from keras.layers.preprocessing import preprocessing_utils as utils\n import numpy as np\n import tensorflow.compat.v2 as tf\n from tensorflow.python.util.tf_export import keras_export\n \n+from keras import backend\n+from keras.engine import base_preprocessing_layer\n+from keras.layers.preprocessing import preprocessing_utils as utils\n+\n \n @keras_export(\n     \"keras.layers.Normalization\",\n\n@@ -15,14 +15,15 @@\n \"\"\"Distribution tests for keras.layers.preprocessing.normalization.\"\"\"\n \n \n+import numpy as np\n+import tensorflow.compat.v2 as tf\n+\n import keras\n from keras.distribute import strategy_combinations\n from keras.layers.preprocessing import normalization\n from keras.layers.preprocessing import preprocessing_test_utils\n from keras.testing_infra import test_combinations\n from keras.testing_infra import test_utils\n-import numpy as np\n-import tensorflow.compat.v2 as tf\n \n \n def _get_layer_computation_test_cases():\n\n@@ -14,20 +14,18 @@\n # ==============================================================================\n \"\"\"Tests for keras.layers.preprocessing.normalization.\"\"\"\n \n-import tensorflow.compat.v2 as tf\n-\n import os\n \n+import numpy as np\n+import tensorflow.compat.v2 as tf\n from absl.testing import parameterized\n \n-import numpy as np\n-\n import keras\n-from keras.testing_infra import test_combinations\n-from keras.testing_infra import test_utils\n from keras.layers.preprocessing import normalization\n from keras.layers.preprocessing import preprocessing_test_utils\n from keras.mixed_precision import policy\n+from keras.testing_infra import test_combinations\n+from keras.testing_infra import test_utils\n \n \n def _get_layer_computation_test_cases():\n\n@@ -14,16 +14,16 @@\n # ==============================================================================\n \"\"\"Preprocessing stage.\"\"\"\n \n+import numpy as np\n import tensorflow.compat.v2 as tf\n \n-# pylint: disable=g-classes-have-attributes\n-\n-import numpy as np\n from keras.engine import base_preprocessing_layer\n from keras.engine import functional\n from keras.engine import sequential\n from keras.utils import tf_utils\n \n+# pylint: disable=g-classes-have-attributes\n+\n \n # Sequential methods should take precedence.\n class PreprocessingStage(\n\n@@ -14,13 +14,11 @@\n # ==============================================================================\n \"\"\"Functional preprocessing stage tests.\"\"\"\n \n+import time\n+\n+import numpy as np\n import tensorflow.compat.v2 as tf\n \n-# pylint: disable=g-classes-have-attributes\n-\n-import time\n-import numpy as np\n-from keras.testing_infra import test_combinations\n from keras.engine import base_preprocessing_layer\n from keras.engine.input_layer import Input\n from keras.layers import convolutional\n@@ -30,6 +28,9 @@ from keras.layers.preprocessing import image_preprocessing\n from keras.layers.preprocessing import normalization\n from keras.layers.preprocessing import preprocessing_stage\n from keras.layers.preprocessing import preprocessing_test_utils\n+from keras.testing_infra import test_combinations\n+\n+# pylint: disable=g-classes-have-attributes\n \n \n class PL(base_preprocessing_layer.PreprocessingLayer):\n\n@@ -14,16 +14,17 @@\n # ==============================================================================\n \"\"\"Preprocessing stage tests.\"\"\"\n \n+import time\n+\n+import numpy as np\n import tensorflow.compat.v2 as tf\n \n-# pylint: disable=g-classes-have-attributes\n-\n-import time\n-import numpy as np\n-from keras.testing_infra import test_combinations\n from keras.engine import base_preprocessing_layer\n from keras.layers.preprocessing import preprocessing_stage\n from keras.layers.preprocessing import preprocessing_test_utils\n+from keras.testing_infra import test_combinations\n+\n+# pylint: disable=g-classes-have-attributes\n \n \n @test_combinations.run_all_keras_modes(always_skip_v1=True)\n\n@@ -15,6 +15,7 @@\n \"\"\"Tests utils for preprocessing layers.\"\"\"\n \n import collections\n+\n import numpy as np\n import tensorflow.compat.v2 as tf\n \n\n@@ -14,10 +14,11 @@\n # ==============================================================================\n \"\"\"Utils for preprocessing layers.\"\"\"\n \n-from keras.utils import tf_utils\n import numpy as np\n import tensorflow.compat.v2 as tf\n \n+from keras.utils import tf_utils\n+\n INT = \"int\"\n ONE_HOT = \"one_hot\"\n MULTI_HOT = \"multi_hot\"\n\n@@ -14,11 +14,12 @@\n # ==============================================================================\n \"\"\"Tests for preprocessing utils.\"\"\"\n \n-from absl.testing import parameterized\n-from keras.layers.preprocessing import preprocessing_utils\n-from keras.testing_infra import test_combinations\n import numpy as np\n import tensorflow.compat.v2 as tf\n+from absl.testing import parameterized\n+\n+from keras.layers.preprocessing import preprocessing_utils\n+from keras.testing_infra import test_combinations\n \n \n @test_combinations.run_all_keras_modes(always_skip_v1=True)\n\n@@ -14,14 +14,14 @@\n # ==============================================================================\n \"\"\"Keras string lookup preprocessing layer.\"\"\"\n \n-import tensorflow.compat.v2 as tf\n-\n-# pylint: disable=g-classes-have-attributes\n-\n import numpy as np\n+import tensorflow.compat.v2 as tf\n+from tensorflow.python.util.tf_export import keras_export\n+\n from keras.engine import base_preprocessing_layer\n from keras.layers.preprocessing import index_lookup\n-from tensorflow.python.util.tf_export import keras_export\n+\n+# pylint: disable=g-classes-have-attributes\n \n \n @keras_export(\n\n@@ -14,17 +14,17 @@\n # ==============================================================================\n \"\"\"Tests for Keras text vectorization preprocessing layer.\"\"\"\n \n-import tensorflow.compat.v2 as tf\n-\n import os\n-from absl.testing import parameterized\n+\n import numpy as np\n+import tensorflow.compat.v2 as tf\n+from absl.testing import parameterized\n \n import keras\n-from keras.testing_infra import test_combinations\n-from keras.testing_infra import test_utils\n from keras.layers.preprocessing import preprocessing_test_utils\n from keras.layers.preprocessing import string_lookup\n+from keras.testing_infra import test_combinations\n+from keras.testing_infra import test_utils\n \n \n def _get_end_to_end_test_cases():\n\n@@ -17,6 +17,10 @@\n # pylint: disable=g-classes-have-attributes\n \n \n+import numpy as np\n+import tensorflow.compat.v2 as tf\n+from tensorflow.python.util.tf_export import keras_export\n+\n from keras import backend\n from keras.engine import base_preprocessing_layer\n from keras.layers.preprocessing import preprocessing_utils as utils\n@@ -24,9 +28,6 @@ from keras.layers.preprocessing import string_lookup\n from keras.saving.saved_model import layer_serialization\n from keras.utils import layer_utils\n from keras.utils import tf_utils\n-import numpy as np\n-import tensorflow.compat.v2 as tf\n-from tensorflow.python.util.tf_export import keras_export\n \n LOWER_AND_STRIP_PUNCTUATION = \"lower_and_strip_punctuation\"\n STRIP_PUNCTUATION = \"strip_punctuation\"\n\n@@ -15,6 +15,12 @@\n \"\"\"Distribution tests for keras.layers.preprocessing.text_vectorization.\"\"\"\n \n \n+import numpy as np\n+import tensorflow.compat.v2 as tf\n+from tensorflow.python.framework import (\n+    test_util as tf_test_utils,\n+)\n+\n import keras\n from keras import backend\n from keras.distribute import strategy_combinations\n@@ -22,11 +28,6 @@ from keras.layers.preprocessing import preprocessing_test_utils\n from keras.layers.preprocessing import text_vectorization\n from keras.testing_infra import test_combinations\n from keras.testing_infra import test_utils\n-import numpy as np\n-import tensorflow.compat.v2 as tf\n-from tensorflow.python.framework import (\n-    test_util as tf_test_utils,\n-)\n \n \n @test_utils.run_v2_only\n\n@@ -14,22 +14,21 @@\n # ==============================================================================\n \"\"\"Tests for Keras text vectorization preprocessing layer.\"\"\"\n \n-import tensorflow.compat.v2 as tf\n-\n import gc\n import os\n \n-from absl.testing import parameterized\n import numpy as np\n+import tensorflow.compat.v2 as tf\n+from absl.testing import parameterized\n \n import keras\n from keras import backend\n-from keras.testing_infra import test_combinations\n-from keras.testing_infra import test_utils\n from keras.layers import convolutional\n from keras.layers import core\n from keras.layers.preprocessing import preprocessing_test_utils\n from keras.layers.preprocessing import text_vectorization\n+from keras.testing_infra import test_combinations\n+from keras.testing_infra import test_utils\n from keras.utils import generic_utils\n \n \n\n@@ -15,13 +15,13 @@\n \"\"\"Keras regularization layers.\"\"\"\n # pylint: disable=g-bad-import-order\n \n-from keras.layers.regularization.dropout import Dropout\n-from keras.layers.regularization.spatial_dropout1d import SpatialDropout1D\n-from keras.layers.regularization.spatial_dropout2d import SpatialDropout2D\n-from keras.layers.regularization.spatial_dropout3d import SpatialDropout3D\n-from keras.layers.regularization.gaussian_dropout import GaussianDropout\n-from keras.layers.regularization.gaussian_noise import GaussianNoise\n from keras.layers.regularization.activity_regularization import (\n     ActivityRegularization,\n )\n from keras.layers.regularization.alpha_dropout import AlphaDropout\n+from keras.layers.regularization.dropout import Dropout\n+from keras.layers.regularization.gaussian_dropout import GaussianDropout\n+from keras.layers.regularization.gaussian_noise import GaussianNoise\n+from keras.layers.regularization.spatial_dropout1d import SpatialDropout1D\n+from keras.layers.regularization.spatial_dropout2d import SpatialDropout2D\n+from keras.layers.regularization.spatial_dropout3d import SpatialDropout3D\n\n@@ -15,9 +15,10 @@\n \"\"\"Contains the ActivityRegularization layer.\"\"\"\n # pylint: disable=g-classes-have-attributes,g-direct-tensorflow-import\n \n+from tensorflow.python.util.tf_export import keras_export\n+\n from keras import regularizers\n from keras.engine.base_layer import Layer\n-from tensorflow.python.util.tf_export import keras_export\n \n \n @keras_export(\"keras.layers.ActivityRegularization\")\n\n@@ -14,11 +14,12 @@\n # ==============================================================================\n \"\"\"Tests for activity regularization layer.\"\"\"\n \n-import keras\n-from keras.testing_infra import test_combinations\n import numpy as np\n import tensorflow.compat.v2 as tf\n \n+import keras\n+from keras.testing_infra import test_combinations\n+\n \n @test_combinations.run_all_keras_modes\n class ActivityRegularizationTest(test_combinations.TestCase):\n\n@@ -15,14 +15,13 @@\n \"\"\"Contains the AlphaDropout layer.\"\"\"\n # pylint: disable=g-classes-have-attributes,g-direct-tensorflow-import\n \n+import tensorflow.compat.v2 as tf\n+from tensorflow.python.util.tf_export import keras_export\n+\n from keras import backend\n from keras.engine import base_layer\n from keras.utils import tf_utils\n \n-import tensorflow.compat.v2 as tf\n-\n-from tensorflow.python.util.tf_export import keras_export\n-\n \n @keras_export(\"keras.layers.AlphaDropout\")\n class AlphaDropout(base_layer.BaseRandomLayer):\n\n@@ -14,11 +14,12 @@\n # ==============================================================================\n \"\"\"Tests for alpha dropout layer.\"\"\"\n \n+import numpy as np\n+import tensorflow.compat.v2 as tf\n+\n import keras\n from keras.testing_infra import test_combinations\n from keras.testing_infra import test_utils\n-import numpy as np\n-import tensorflow.compat.v2 as tf\n \n \n @test_combinations.run_all_keras_modes\n\n@@ -15,11 +15,12 @@\n \"\"\"Contains the Dropout layer.\"\"\"\n # pylint: disable=g-classes-have-attributes,g-direct-tensorflow-import\n \n+import tensorflow.compat.v2 as tf\n+from tensorflow.python.util.tf_export import keras_export\n+\n from keras import backend\n from keras.engine import base_layer\n from keras.utils import control_flow_util\n-import tensorflow.compat.v2 as tf\n-from tensorflow.python.util.tf_export import keras_export\n \n \n @keras_export(\"keras.layers.Dropout\")\n\n@@ -16,11 +16,12 @@\n \n import os\n \n+import numpy as np\n+import tensorflow.compat.v2 as tf\n+\n import keras\n from keras.testing_infra import test_combinations\n from keras.testing_infra import test_utils\n-import numpy as np\n-import tensorflow.compat.v2 as tf\n \n \n @test_combinations.run_all_keras_modes\n\n@@ -15,15 +15,14 @@\n \"\"\"Contains the GaussianDropout layer.\"\"\"\n # pylint: disable=g-classes-have-attributes,g-direct-tensorflow-import\n \n+import numpy as np\n+import tensorflow.compat.v2 as tf\n+from tensorflow.python.util.tf_export import keras_export\n+\n from keras import backend\n from keras.engine import base_layer\n from keras.utils import tf_utils\n \n-import numpy as np\n-import tensorflow.compat.v2 as tf\n-\n-from tensorflow.python.util.tf_export import keras_export\n-\n \n @keras_export(\"keras.layers.GaussianDropout\")\n class GaussianDropout(base_layer.BaseRandomLayer):\n\n@@ -14,11 +14,12 @@\n # ==============================================================================\n \"\"\"Tests for gaussian dropout layer.\"\"\"\n \n+import numpy as np\n+import tensorflow.compat.v2 as tf\n+\n import keras\n from keras.testing_infra import test_combinations\n from keras.testing_infra import test_utils\n-import numpy as np\n-import tensorflow.compat.v2 as tf\n \n \n @test_combinations.run_all_keras_modes\n\n@@ -15,14 +15,13 @@\n \"\"\"Contains the GaussianNoise layer.\"\"\"\n # pylint: disable=g-classes-have-attributes,g-direct-tensorflow-import\n \n+import tensorflow.compat.v2 as tf\n+from tensorflow.python.util.tf_export import keras_export\n+\n from keras import backend\n from keras.engine import base_layer\n from keras.utils import tf_utils\n \n-import tensorflow.compat.v2 as tf\n-\n-from tensorflow.python.util.tf_export import keras_export\n-\n \n @keras_export(\"keras.layers.GaussianNoise\")\n class GaussianNoise(base_layer.BaseRandomLayer):\n\n@@ -14,11 +14,12 @@\n # ==============================================================================\n \"\"\"Tests for gaussian noise layer.\"\"\"\n \n+import numpy as np\n+import tensorflow.compat.v2 as tf\n+\n import keras\n from keras.testing_infra import test_combinations\n from keras.testing_infra import test_utils\n-import numpy as np\n-import tensorflow.compat.v2 as tf\n \n \n @test_combinations.run_all_keras_modes\n\n@@ -15,11 +15,11 @@\n \"\"\"Contains the SpatialDropout1D layer.\"\"\"\n # pylint: disable=g-classes-have-attributes,g-direct-tensorflow-import\n \n+import tensorflow.compat.v2 as tf\n+from tensorflow.python.util.tf_export import keras_export\n+\n from keras.engine.input_spec import InputSpec\n from keras.layers.regularization.dropout import Dropout\n-import tensorflow.compat.v2 as tf\n-\n-from tensorflow.python.util.tf_export import keras_export\n \n \n @keras_export(\"keras.layers.SpatialDropout1D\")\n\n@@ -15,12 +15,12 @@\n \"\"\"Contains the SpatialDropout2D layer.\"\"\"\n # pylint: disable=g-classes-have-attributes,g-direct-tensorflow-import\n \n+import tensorflow.compat.v2 as tf\n+from tensorflow.python.util.tf_export import keras_export\n+\n from keras import backend\n from keras.engine.input_spec import InputSpec\n from keras.layers.regularization.dropout import Dropout\n-import tensorflow.compat.v2 as tf\n-\n-from tensorflow.python.util.tf_export import keras_export\n \n \n @keras_export(\"keras.layers.SpatialDropout2D\")\n\n@@ -15,12 +15,12 @@\n \"\"\"Contains the SpatialDropout3D layer.\"\"\"\n # pylint: disable=g-classes-have-attributes,g-direct-tensorflow-import\n \n+import tensorflow.compat.v2 as tf\n+from tensorflow.python.util.tf_export import keras_export\n+\n from keras import backend\n from keras.engine.input_spec import InputSpec\n from keras.layers.regularization.dropout import Dropout\n-import tensorflow.compat.v2 as tf\n-\n-from tensorflow.python.util.tf_export import keras_export\n \n \n @keras_export(\"keras.layers.SpatialDropout3D\")\n\n@@ -14,10 +14,11 @@\n # ==============================================================================\n \"\"\"Tests for spatial dropout layers.\"\"\"\n \n+import tensorflow.compat.v2 as tf\n+\n import keras\n from keras.testing_infra import test_combinations\n from keras.testing_infra import test_utils\n-import tensorflow.compat.v2 as tf\n \n \n @test_combinations.run_all_keras_modes\n\n@@ -15,12 +15,12 @@\n \"\"\"Keras cropping layer for 1D input.\"\"\"\n # pylint: disable=g-classes-have-attributes,g-direct-tensorflow-import\n \n+import tensorflow.compat.v2 as tf\n+from tensorflow.python.util.tf_export import keras_export\n+\n from keras.engine.base_layer import Layer\n from keras.engine.input_spec import InputSpec\n from keras.utils import conv_utils\n-import tensorflow.compat.v2 as tf\n-\n-from tensorflow.python.util.tf_export import keras_export\n \n \n @keras_export(\"keras.layers.Cropping1D\")\n\n@@ -15,12 +15,12 @@\n \"\"\"Keras cropping layer for 2D input.\"\"\"\n # pylint: disable=g-classes-have-attributes,g-direct-tensorflow-import\n \n+import tensorflow.compat.v2 as tf\n+from tensorflow.python.util.tf_export import keras_export\n+\n from keras.engine.base_layer import Layer\n from keras.engine.input_spec import InputSpec\n from keras.utils import conv_utils\n-import tensorflow.compat.v2 as tf\n-\n-from tensorflow.python.util.tf_export import keras_export\n \n \n @keras_export(\"keras.layers.Cropping2D\")\n\n@@ -15,12 +15,12 @@\n \"\"\"Keras cropping layer for 3D input.\"\"\"\n # pylint: disable=g-classes-have-attributes,g-direct-tensorflow-import\n \n+import tensorflow.compat.v2 as tf\n+from tensorflow.python.util.tf_export import keras_export\n+\n from keras.engine.base_layer import Layer\n from keras.engine.input_spec import InputSpec\n from keras.utils import conv_utils\n-import tensorflow.compat.v2 as tf\n-\n-from tensorflow.python.util.tf_export import keras_export\n \n \n @keras_export(\"keras.layers.Cropping3D\")\n\n@@ -14,11 +14,12 @@\n # ==============================================================================\n \"\"\"Tests for cropping layers.\"\"\"\n \n+import numpy as np\n+import tensorflow.compat.v2 as tf\n+\n import keras\n from keras.testing_infra import test_combinations\n from keras.testing_infra import test_utils\n-import numpy as np\n-import tensorflow.compat.v2 as tf\n \n \n @test_combinations.run_all_keras_modes\n\n@@ -18,13 +18,13 @@\n import functools\n import operator\n \n+import numpy as np\n+import tensorflow.compat.v2 as tf\n+from tensorflow.python.util.tf_export import keras_export\n+\n from keras.engine.base_layer import Layer\n from keras.engine.input_spec import InputSpec\n from keras.utils import conv_utils\n-import numpy as np\n-import tensorflow.compat.v2 as tf\n-\n-from tensorflow.python.util.tf_export import keras_export\n \n \n @keras_export(\"keras.layers.Flatten\")\n\n@@ -14,11 +14,12 @@\n # ==============================================================================\n \"\"\"Tests for flatten layer.\"\"\"\n \n+import numpy as np\n+import tensorflow.compat.v2 as tf\n+\n import keras\n from keras.testing_infra import test_combinations\n from keras.testing_infra import test_utils\n-import numpy as np\n-import tensorflow.compat.v2 as tf\n \n \n @test_combinations.run_all_keras_modes\n\n@@ -17,11 +17,11 @@\n \n import copy\n \n+import tensorflow.compat.v2 as tf\n+from tensorflow.python.util.tf_export import keras_export\n+\n from keras.engine.base_layer import Layer\n from keras.engine.input_spec import InputSpec\n-import tensorflow.compat.v2 as tf\n-\n-from tensorflow.python.util.tf_export import keras_export\n \n \n @keras_export(\"keras.layers.Permute\")\n\n@@ -14,12 +14,12 @@\n # ==============================================================================\n \"\"\"Tests for Keras permute layer.\"\"\"\n \n+import tensorflow.compat.v2 as tf\n+\n import keras\n from keras.testing_infra import test_combinations\n from keras.testing_infra import test_utils\n \n-import tensorflow.compat.v2 as tf\n-\n \n @test_combinations.run_all_keras_modes\n class PermuteTest(test_combinations.TestCase):\n\n@@ -15,12 +15,12 @@\n \"\"\"Contains the RepeatVector layer.\"\"\"\n # pylint: disable=g-classes-have-attributes,g-direct-tensorflow-import\n \n+import tensorflow.compat.v2 as tf\n+from tensorflow.python.util.tf_export import keras_export\n+\n from keras import backend\n from keras.engine.base_layer import Layer\n from keras.engine.input_spec import InputSpec\n-import tensorflow.compat.v2 as tf\n-\n-from tensorflow.python.util.tf_export import keras_export\n \n \n @keras_export(\"keras.layers.RepeatVector\")\n\n@@ -14,12 +14,12 @@\n # ==============================================================================\n \"\"\"Tests for repeat vector layer.\"\"\"\n \n+import numpy as np\n+import tensorflow.compat.v2 as tf\n+\n import keras\n from keras.testing_infra import test_combinations\n from keras.testing_infra import test_utils\n-import numpy as np\n-\n-import tensorflow.compat.v2 as tf\n \n \n @test_combinations.run_all_keras_modes\n\n@@ -15,12 +15,12 @@\n \"\"\"Contains the Reshape layer.\"\"\"\n # pylint: disable=g-classes-have-attributes,g-direct-tensorflow-import\n \n-from keras.engine.base_layer import Layer\n import numpy as np\n import tensorflow.compat.v2 as tf\n-\n from tensorflow.python.util.tf_export import keras_export\n \n+from keras.engine.base_layer import Layer\n+\n \n @keras_export(\"keras.layers.Reshape\")\n class Reshape(Layer):\n\n@@ -14,12 +14,12 @@\n # ==============================================================================\n \"\"\"Tests for reshape layer.\"\"\"\n \n+import tensorflow.compat.v2 as tf\n+\n import keras\n from keras.testing_infra import test_combinations\n from keras.testing_infra import test_utils\n \n-import tensorflow.compat.v2 as tf\n-\n \n @test_combinations.run_all_keras_modes\n class ReshapeTest(test_combinations.TestCase):\n\n@@ -15,12 +15,12 @@\n \"\"\"Keras upsampling layer for 1D inputs.\"\"\"\n # pylint: disable=g-classes-have-attributes,g-direct-tensorflow-import\n \n+import tensorflow.compat.v2 as tf\n+from tensorflow.python.util.tf_export import keras_export\n+\n from keras import backend\n from keras.engine.base_layer import Layer\n from keras.engine.input_spec import InputSpec\n-import tensorflow.compat.v2 as tf\n-\n-from tensorflow.python.util.tf_export import keras_export\n \n \n @keras_export(\"keras.layers.UpSampling1D\")\n\n@@ -15,13 +15,13 @@\n \"\"\"Keras upsampling layer for 2D inputs.\"\"\"\n # pylint: disable=g-classes-have-attributes,g-direct-tensorflow-import\n \n+import tensorflow.compat.v2 as tf\n+from tensorflow.python.util.tf_export import keras_export\n+\n from keras import backend\n from keras.engine.base_layer import Layer\n from keras.engine.input_spec import InputSpec\n from keras.utils import conv_utils\n-import tensorflow.compat.v2 as tf\n-\n-from tensorflow.python.util.tf_export import keras_export\n \n \n @keras_export(\"keras.layers.UpSampling2D\")\n\n@@ -15,13 +15,13 @@\n \"\"\"Keras upsampling layer for 3D inputs.\"\"\"\n # pylint: disable=g-classes-have-attributes,g-direct-tensorflow-import\n \n+import tensorflow.compat.v2 as tf\n+from tensorflow.python.util.tf_export import keras_export\n+\n from keras import backend\n from keras.engine.base_layer import Layer\n from keras.engine.input_spec import InputSpec\n from keras.utils import conv_utils\n-import tensorflow.compat.v2 as tf\n-\n-from tensorflow.python.util.tf_export import keras_export\n \n \n @keras_export(\"keras.layers.UpSampling3D\")\n\n@@ -15,16 +15,16 @@\n \"\"\"Tests for up-sampling layers.\"\"\"\n \n \n-import keras\n-from keras.testing_infra import test_combinations\n-from keras.testing_infra import test_utils\n import numpy as np\n import tensorflow.compat.v2 as tf\n-\n from tensorflow.python.framework import (\n     test_util as tf_test_utils,\n )\n \n+import keras\n+from keras.testing_infra import test_combinations\n+from keras.testing_infra import test_utils\n+\n \n @tf_test_utils.for_all_test_methods(\n     tf_test_utils.disable_xla, \"align_corners=False not supported by XLA\"\n\n@@ -15,13 +15,13 @@\n \"\"\"Keras zero-padding layer for 1D input.\"\"\"\n # pylint: disable=g-classes-have-attributes,g-direct-tensorflow-import\n \n+import tensorflow.compat.v2 as tf\n+from tensorflow.python.util.tf_export import keras_export\n+\n from keras import backend\n from keras.engine.base_layer import Layer\n from keras.engine.input_spec import InputSpec\n from keras.utils import conv_utils\n-import tensorflow.compat.v2 as tf\n-\n-from tensorflow.python.util.tf_export import keras_export\n \n \n @keras_export(\"keras.layers.ZeroPadding1D\")\n\n@@ -15,13 +15,13 @@\n \"\"\"Keras zero-padding layer for 2D input.\"\"\"\n # pylint: disable=g-classes-have-attributes,g-direct-tensorflow-import\n \n+import tensorflow.compat.v2 as tf\n+from tensorflow.python.util.tf_export import keras_export\n+\n from keras import backend\n from keras.engine.base_layer import Layer\n from keras.engine.input_spec import InputSpec\n from keras.utils import conv_utils\n-import tensorflow.compat.v2 as tf\n-\n-from tensorflow.python.util.tf_export import keras_export\n \n \n @keras_export(\"keras.layers.ZeroPadding2D\")\n\n@@ -15,13 +15,13 @@\n \"\"\"Keras zero-padding layer for 3D input.\"\"\"\n # pylint: disable=g-classes-have-attributes,g-direct-tensorflow-import\n \n+import tensorflow.compat.v2 as tf\n+from tensorflow.python.util.tf_export import keras_export\n+\n from keras import backend\n from keras.engine.base_layer import Layer\n from keras.engine.input_spec import InputSpec\n from keras.utils import conv_utils\n-import tensorflow.compat.v2 as tf\n-\n-from tensorflow.python.util.tf_export import keras_export\n \n \n @keras_export(\"keras.layers.ZeroPadding3D\")\n\n@@ -14,12 +14,13 @@\n # ==============================================================================\n \"\"\"Tests for zero-padding layers.\"\"\"\n \n+import numpy as np\n+import tensorflow.compat.v2 as tf\n from absl.testing import parameterized\n+\n import keras\n from keras.testing_infra import test_combinations\n from keras.testing_infra import test_utils\n-import numpy as np\n-import tensorflow.compat.v2 as tf\n \n \n @test_combinations.run_all_keras_modes\n\n@@ -16,20 +16,21 @@\n \n import tensorflow.compat.v2 as tf\n \n+from keras.layers.rnn.abstract_rnn_cell import AbstractRNNCell\n+\n # Recurrent layers.\n from keras.layers.rnn.base_rnn import RNN\n-from keras.layers.rnn.abstract_rnn_cell import AbstractRNNCell\n-from keras.layers.rnn.stacked_rnn_cells import StackedRNNCells\n-from keras.layers.rnn.simple_rnn import SimpleRNNCell\n from keras.layers.rnn.simple_rnn import SimpleRNN\n+from keras.layers.rnn.simple_rnn import SimpleRNNCell\n+from keras.layers.rnn.stacked_rnn_cells import StackedRNNCells\n \n if tf.__internal__.tf2.enabled():\n     from keras.layers.rnn.gru import GRU\n     from keras.layers.rnn.gru import GRUCell\n-    from keras.layers.rnn.lstm import LSTM\n-    from keras.layers.rnn.lstm import LSTMCell\n     from keras.layers.rnn.gru_v1 import GRU as GRUV1\n     from keras.layers.rnn.gru_v1 import GRUCell as GRUCellV1\n+    from keras.layers.rnn.lstm import LSTM\n+    from keras.layers.rnn.lstm import LSTMCell\n     from keras.layers.rnn.lstm_v1 import LSTM as LSTMV1\n     from keras.layers.rnn.lstm_v1 import LSTMCell as LSTMCellV1\n \n@@ -38,35 +39,35 @@ if tf.__internal__.tf2.enabled():\n     LSTMV2 = LSTM\n     LSTMCellV2 = LSTMCell\n else:\n-    from keras.layers.rnn.gru_v1 import GRU\n-    from keras.layers.rnn.gru_v1 import GRUCell\n-    from keras.layers.rnn.lstm_v1 import LSTM\n-    from keras.layers.rnn.lstm_v1 import LSTMCell\n     from keras.layers.rnn.gru import GRU as GRUV2\n     from keras.layers.rnn.gru import GRUCell as GRUCellV2\n+    from keras.layers.rnn.gru_v1 import GRU\n+    from keras.layers.rnn.gru_v1 import GRUCell\n     from keras.layers.rnn.lstm import LSTM as LSTMV2\n     from keras.layers.rnn.lstm import LSTMCell as LSTMCellV2\n+    from keras.layers.rnn.lstm_v1 import LSTM\n+    from keras.layers.rnn.lstm_v1 import LSTMCell\n \n     GRUV1 = GRU\n     GRUCellV1 = GRUCell\n     LSTMV1 = LSTM\n     LSTMCellV1 = LSTMCell\n \n-# Convolutional-recurrent layers.\n-from keras.layers.rnn.conv_lstm1d import ConvLSTM1D\n-from keras.layers.rnn.conv_lstm2d import ConvLSTM2D\n-from keras.layers.rnn.conv_lstm3d import ConvLSTM3D\n-\n-# cuDNN recurrent layers.\n-from keras.layers.rnn.cudnn_lstm import CuDNNLSTM\n-from keras.layers.rnn.cudnn_gru import CuDNNGRU\n-\n # Wrapper functions.\n from keras.layers.rnn.base_wrapper import Wrapper\n from keras.layers.rnn.bidirectional import Bidirectional\n-from keras.layers.rnn.time_distributed import TimeDistributed\n \n # RNN Cell wrappers.\n from keras.layers.rnn.cell_wrappers import DeviceWrapper\n from keras.layers.rnn.cell_wrappers import DropoutWrapper\n from keras.layers.rnn.cell_wrappers import ResidualWrapper\n+\n+# Convolutional-recurrent layers.\n+from keras.layers.rnn.conv_lstm1d import ConvLSTM1D\n+from keras.layers.rnn.conv_lstm2d import ConvLSTM2D\n+from keras.layers.rnn.conv_lstm3d import ConvLSTM3D\n+from keras.layers.rnn.cudnn_gru import CuDNNGRU\n+\n+# cuDNN recurrent layers.\n+from keras.layers.rnn.cudnn_lstm import CuDNNLSTM\n+from keras.layers.rnn.time_distributed import TimeDistributed\n\n@@ -15,11 +15,11 @@\n \"\"\"Base class for RNN cells.\"\"\"\n # pylint: disable=g-classes-have-attributes,g-direct-tensorflow-import\n \n+from tensorflow.python.util.tf_export import keras_export\n+\n from keras.engine import base_layer\n from keras.layers.rnn import rnn_utils\n \n-from tensorflow.python.util.tf_export import keras_export\n-\n \n @keras_export(\"keras.layers.AbstractRNNCell\")\n class AbstractRNNCell(base_layer.Layer):\n\n@@ -15,6 +15,8 @@\n \"\"\"Base class for N-D convolutional LSTM layers.\"\"\"\n # pylint: disable=g-classes-have-attributes\n \n+import tensorflow.compat.v2 as tf\n+\n from keras import activations\n from keras import backend\n from keras import constraints\n@@ -24,7 +26,6 @@ from keras.engine import base_layer\n from keras.layers.rnn.base_conv_rnn import ConvRNN\n from keras.layers.rnn.dropout_rnn_cell_mixin import DropoutRNNCellMixin\n from keras.utils import conv_utils\n-import tensorflow.compat.v2 as tf\n \n \n class ConvLSTMCell(DropoutRNNCellMixin, base_layer.BaseRandomLayer):\n\n@@ -15,6 +15,9 @@\n \"\"\"Base class for convolutional-recurrent layers.\"\"\"\n # pylint: disable=g-classes-have-attributes\n \n+import numpy as np\n+import tensorflow.compat.v2 as tf\n+\n from keras import backend\n from keras.engine import base_layer\n from keras.engine.input_spec import InputSpec\n@@ -22,8 +25,6 @@ from keras.layers.rnn.base_rnn import RNN\n from keras.utils import conv_utils\n from keras.utils import generic_utils\n from keras.utils import tf_utils\n-import numpy as np\n-import tensorflow.compat.v2 as tf\n \n \n class ConvRNN(RNN):\n\n@@ -15,10 +15,11 @@\n \"\"\"Base class for recurrent layers backed by cuDNN.\"\"\"\n # pylint: disable=g-classes-have-attributes\n \n+import tensorflow.compat.v2 as tf\n+\n from keras import backend\n from keras.engine.input_spec import InputSpec\n from keras.layers.rnn.base_rnn import RNN\n-import tensorflow.compat.v2 as tf\n \n \n class _CuDNNRNN(RNN):\n\n@@ -17,6 +17,11 @@\n \n import collections\n \n+import numpy as np\n+import tensorflow.compat.v2 as tf\n+from tensorflow.python.util.tf_export import keras_export\n+from tensorflow.tools.docs import doc_controls\n+\n from keras import backend\n from keras.engine import base_layer\n from keras.engine.input_spec import InputSpec\n@@ -25,11 +30,6 @@ from keras.layers.rnn.dropout_rnn_cell_mixin import DropoutRNNCellMixin\n from keras.layers.rnn.stacked_rnn_cells import StackedRNNCells\n from keras.saving.saved_model import layer_serialization\n from keras.utils import generic_utils\n-import numpy as np\n-import tensorflow.compat.v2 as tf\n-\n-from tensorflow.python.util.tf_export import keras_export\n-from tensorflow.tools.docs import doc_controls\n \n \n @keras_export(\"keras.layers.RNN\")\n@@ -963,9 +963,7 @@ class RNN(base_layer.Layer):\n \n     @classmethod\n     def from_config(cls, config, custom_objects=None):\n-        from keras.layers import (\n-            deserialize as deserialize_layer,\n-        )  # pylint: disable=g-import-not-at-top\n+        from keras.layers import deserialize as deserialize_layer\n \n         cell = deserialize_layer(\n             config.pop(\"cell\"), custom_objects=custom_objects\n\n@@ -20,7 +20,13 @@ See also: lstm_test.py, gru_test.py, simplernn_test.py.\n \n import collections\n \n+import numpy as np\n+import tensorflow.compat.v2 as tf\n from absl.testing import parameterized\n+from tensorflow.python.training.tracking import (\n+    util as trackable_util,\n+)\n+\n import keras\n from keras.engine import base_layer_utils\n from keras.layers.rnn import gru\n@@ -30,13 +36,6 @@ from keras.layers.rnn import lstm_v1\n from keras.testing_infra import test_combinations\n from keras.testing_infra import test_utils\n from keras.utils import generic_utils\n-import numpy as np\n-import tensorflow.compat.v2 as tf\n-\n-from tensorflow.python.training.tracking import (\n-    util as trackable_util,\n-)\n-\n \n # Used for nested input/output/state RNN test.\n NestedInput = collections.namedtuple(\"NestedInput\", [\"t1\", \"t2\"])\n\n@@ -20,11 +20,11 @@ Wrappers are layers that augment the functionality of another layer.\n \n import copy\n \n+from tensorflow.python.util.tf_export import keras_export\n+\n from keras.engine.base_layer import Layer\n from keras.utils import generic_utils\n \n-from tensorflow.python.util.tf_export import keras_export\n-\n \n @keras_export(\"keras.layers.Wrapper\")\n class Wrapper(Layer):\n@@ -63,9 +63,7 @@ class Wrapper(Layer):\n \n     @classmethod\n     def from_config(cls, config, custom_objects=None):\n-        from keras.layers import (\n-            deserialize as deserialize_layer,\n-        )  # pylint: disable=g-import-not-at-top\n+        from keras.layers import deserialize as deserialize_layer\n \n         # Avoid mutating the input dict\n         config = copy.deepcopy(config)\n\n@@ -14,9 +14,10 @@\n # ==============================================================================\n \"\"\"Tests for the Wrapper base class.\"\"\"\n \n-from absl.testing import parameterized\n-import keras\n import tensorflow.compat.v2 as tf\n+from absl.testing import parameterized\n+\n+import keras\n \n \n class ExampleWrapper(keras.layers.Wrapper):\n\n@@ -17,6 +17,9 @@\n \n import copy\n \n+import tensorflow.compat.v2 as tf\n+from tensorflow.python.util.tf_export import keras_export\n+\n from keras import backend\n from keras.engine.base_layer import Layer\n from keras.engine.input_spec import InputSpec\n@@ -25,9 +28,6 @@ from keras.layers.rnn.base_wrapper import Wrapper\n from keras.utils import generic_utils\n from keras.utils import tf_inspect\n from keras.utils import tf_utils\n-import tensorflow.compat.v2 as tf\n-\n-from tensorflow.python.util.tf_export import keras_export\n \n \n @keras_export(\"keras.layers.Bidirectional\")\n@@ -498,9 +498,7 @@ class Bidirectional(Wrapper):\n         config = copy.deepcopy(config)\n         num_constants = config.pop(\"num_constants\", 0)\n         # Handle forward layer instantiation (as would parent class).\n-        from keras.layers import (\n-            deserialize as deserialize_layer,\n-        )  # pylint: disable=g-import-not-at-top\n+        from keras.layers import deserialize as deserialize_layer\n \n         config[\"layer\"] = deserialize_layer(\n             config[\"layer\"], custom_objects=custom_objects\n\n@@ -17,7 +17,16 @@\n \n import copy\n \n+import numpy as np\n+import tensorflow.compat.v2 as tf\n from absl.testing import parameterized\n+from tensorflow.python.framework import (\n+    test_util as tf_test_util,\n+)\n+from tensorflow.python.training.tracking import (\n+    util as trackable_util,\n+)\n+\n import keras\n from keras.engine import base_layer_utils\n from keras.layers import core\n@@ -25,15 +34,6 @@ from keras.layers.rnn.cell_wrappers import ResidualWrapper\n from keras.testing_infra import test_combinations\n from keras.testing_infra import test_utils\n from keras.utils import generic_utils\n-import numpy as np\n-import tensorflow.compat.v2 as tf\n-\n-from tensorflow.python.framework import (\n-    test_util as tf_test_util,\n-)\n-from tensorflow.python.training.tracking import (\n-    util as trackable_util,\n-)\n \n \n class _RNNCellWithConstants(keras.layers.Layer):\n\n@@ -27,13 +27,13 @@ import sys\n import types as python_types\n import warnings\n \n+import tensorflow.compat.v2 as tf\n+from tensorflow.python.util.tf_export import tf_export\n+\n from keras.layers.rnn import lstm\n from keras.layers.rnn.abstract_rnn_cell import AbstractRNNCell\n from keras.utils import generic_utils\n from keras.utils import tf_inspect\n-import tensorflow.compat.v2 as tf\n-\n-from tensorflow.python.util.tf_export import tf_export\n \n \n class _RNNCellWrapper(AbstractRNNCell):\n@@ -132,9 +132,7 @@ class _RNNCellWrapper(AbstractRNNCell):\n     @classmethod\n     def from_config(cls, config, custom_objects=None):\n         config = config.copy()\n-        from keras.layers.serialization import (\n-            deserialize as deserialize_layer,\n-        )  # pylint: disable=g-import-not-at-top\n+        from keras.layers.serialization import deserialize as deserialize_layer\n \n         cell = deserialize_layer(\n             config.pop(\"cell\"), custom_objects=custom_objects\n\n@@ -14,15 +14,16 @@\n # ==============================================================================\n \"\"\"Tests for RNN cell wrappers.\"\"\"\n \n+import numpy as np\n+import tensorflow.compat.v2 as tf\n from absl.testing import parameterized\n+\n from keras import layers\n from keras.layers.rnn import cell_wrappers\n from keras.layers.rnn import legacy_cells\n from keras.legacy_tf_layers import base as legacy_base_layer\n from keras.testing_infra import test_combinations\n from keras.utils import generic_utils\n-import numpy as np\n-import tensorflow.compat.v2 as tf\n \n \n @test_combinations.generate(test_combinations.combine(mode=[\"graph\", \"eager\"]))\n\n@@ -15,10 +15,10 @@\n \"\"\"1D Convolutional LSTM layer.\"\"\"\n # pylint: disable=g-classes-have-attributes,disable=g-direct-tensorflow-import\n \n-from keras.layers.rnn.base_conv_lstm import ConvLSTM\n-\n from tensorflow.python.util.tf_export import keras_export\n \n+from keras.layers.rnn.base_conv_lstm import ConvLSTM\n+\n \n @keras_export(\"keras.layers.ConvLSTM1D\")\n class ConvLSTM1D(ConvLSTM):\n\n@@ -15,10 +15,10 @@\n \"\"\"2D Convolutional LSTM layer.\"\"\"\n # pylint: disable=g-classes-have-attributes,disable=g-direct-tensorflow-import\n \n-from keras.layers.rnn.base_conv_lstm import ConvLSTM\n-\n from tensorflow.python.util.tf_export import keras_export\n \n+from keras.layers.rnn.base_conv_lstm import ConvLSTM\n+\n \n @keras_export(\"keras.layers.ConvLSTM2D\")\n class ConvLSTM2D(ConvLSTM):\n\n@@ -15,10 +15,10 @@\n \"\"\"3D Convolutional LSTM layer.\"\"\"\n # pylint: disable=g-classes-have-attributes,disable=g-direct-tensorflow-import\n \n-from keras.layers.rnn.base_conv_lstm import ConvLSTM\n-\n from tensorflow.python.util.tf_export import keras_export\n \n+from keras.layers.rnn.base_conv_lstm import ConvLSTM\n+\n \n @keras_export(\"keras.layers.ConvLSTM3D\")\n class ConvLSTM3D(ConvLSTM):\n\n@@ -14,12 +14,13 @@\n # ==============================================================================\n \"\"\"Tests for convolutional recurrent layers.\"\"\"\n \n+import numpy as np\n+import tensorflow.compat.v2 as tf\n from absl.testing import parameterized\n+\n import keras\n from keras.testing_infra import test_combinations\n from keras.testing_infra import test_utils\n-import numpy as np\n-import tensorflow.compat.v2 as tf\n \n \n @test_combinations.run_all_keras_modes\n\n@@ -17,14 +17,14 @@\n \n import collections\n \n+import tensorflow.compat.v2 as tf\n+from tensorflow.python.util.tf_export import keras_export\n+\n from keras import constraints\n from keras import initializers\n from keras import regularizers\n from keras.layers.rnn import gru_lstm_utils\n from keras.layers.rnn.base_cudnn_rnn import _CuDNNRNN\n-import tensorflow.compat.v2 as tf\n-\n-from tensorflow.python.util.tf_export import keras_export\n \n \n @keras_export(v1=[\"keras.layers.CuDNNGRU\"])\n\n@@ -17,14 +17,14 @@\n \n import collections\n \n+import tensorflow.compat.v2 as tf\n+from tensorflow.python.util.tf_export import keras_export\n+\n from keras import constraints\n from keras import initializers\n from keras import regularizers\n from keras.layers.rnn import gru_lstm_utils\n from keras.layers.rnn.base_cudnn_rnn import _CuDNNRNN\n-import tensorflow.compat.v2 as tf\n-\n-from tensorflow.python.util.tf_export import keras_export\n \n \n @keras_export(v1=[\"keras.layers.CuDNNLSTM\"])\n\n@@ -14,21 +14,20 @@\n # ==============================================================================\n \"\"\"Tests for cudnn recurrent layers.\"\"\"\n \n-import tensorflow.compat.v2 as tf\n-\n import os\n import tempfile\n \n-from absl.testing import parameterized\n import numpy as np\n-\n-import keras\n+import tensorflow.compat.v2 as tf\n+from absl.testing import parameterized\n from tensorflow.python.framework import (\n     test_util as tf_test_utils,\n )\n+\n+import keras\n+from keras.optimizers.optimizer_v2.rmsprop import RMSprop\n from keras.testing_infra import test_combinations\n from keras.testing_infra import test_utils\n-from keras.optimizers.optimizer_v2.rmsprop import RMSprop\n \n \n @test_combinations.run_all_keras_modes\n\n@@ -15,11 +15,11 @@\n \"\"\"Mixin holding dropout fields for RNN cells.\"\"\"\n \n \n-from keras import backend\n import tensorflow.compat.v2 as tf\n-\n from tensorflow.tools.docs import doc_controls\n \n+from keras import backend\n+\n \n @doc_controls.do_not_generate_docs\n class DropoutRNNCellMixin:\n\n@@ -17,6 +17,10 @@\n \n import uuid\n \n+import tensorflow.compat.v2 as tf\n+from tensorflow.python.platform import tf_logging as logging\n+from tensorflow.python.util.tf_export import keras_export\n+\n from keras import activations\n from keras import backend\n from keras import constraints\n@@ -29,11 +33,6 @@ from keras.layers.rnn import rnn_utils\n from keras.layers.rnn.base_rnn import RNN\n from keras.layers.rnn.dropout_rnn_cell_mixin import DropoutRNNCellMixin\n from keras.utils import tf_utils\n-import tensorflow.compat.v2 as tf\n-\n-from tensorflow.python.platform import tf_logging as logging\n-from tensorflow.python.util.tf_export import keras_export\n-\n \n RECURRENT_DROPOUT_WARNING_MSG = (\n     \"RNN `implementation=2` is not supported when `recurrent_dropout` is set. \"\n\n@@ -19,14 +19,15 @@ See also: lstm_test.py, gru_test.py.\n \n import os\n \n+import numpy as np\n+import tensorflow.compat.v2 as tf\n from absl.testing import parameterized\n+\n import keras\n from keras.layers.rnn import gru\n from keras.layers.rnn import lstm\n from keras.testing_infra import test_combinations\n from keras.testing_infra import test_utils\n-import numpy as np\n-import tensorflow.compat.v2 as tf\n \n \n @test_combinations.run_all_keras_modes\n\n@@ -18,10 +18,8 @@\n import uuid\n \n import tensorflow.compat.v2 as tf\n-\n from tensorflow.python.eager.context import get_device_name\n \n-\n # The following string constants are used by Defun approach for unified backend\n # of LSTM and GRU.\n _FUNCTION_API_NAME_ATTRIBUTE = \"api_implements\"\n@@ -74,14 +72,14 @@ class DefunWrapper:\n         }\n         if self.layer_name == \"lstm\":\n             from keras.layers.rnn import (\n-                lstm,\n-            )  # pylint: disable=g-import-not-at-top\n+                lstm,  # pylint: disable=g-import-not-at-top\n+            )\n \n             layer_func = lstm.lstm_with_backend_selection\n         else:\n             from keras.layers.rnn import (\n-                gru,\n-            )  # pylint: disable=g-import-not-at-top\n+                gru,  # pylint: disable=g-import-not-at-top\n+            )\n \n             layer_func = gru.gru_with_backend_selection\n \n\n@@ -19,20 +19,19 @@ import copy\n import os\n import shutil\n \n-from absl.testing import parameterized\n-import keras\n-from keras.layers.rnn import gru_lstm_utils\n-from keras.testing_infra import test_combinations\n-from keras.testing_infra import test_utils\n-from keras.utils import np_utils\n import numpy as np\n import tensorflow.compat.v2 as tf\n-\n+from absl.testing import parameterized\n from tensorflow.core.protobuf import rewriter_config_pb2\n from tensorflow.python.framework import (\n     test_util as tf_test_util,\n )\n \n+import keras\n+from keras.layers.rnn import gru_lstm_utils\n+from keras.testing_infra import test_combinations\n+from keras.testing_infra import test_utils\n+from keras.utils import np_utils\n \n # Global config for grappler setting that is used for graph mode test.\n _rewrites = rewriter_config_pb2.RewriterConfig()\n\n@@ -15,6 +15,9 @@\n \"\"\"Gated Recurrent Unit V1 layer.\"\"\"\n # pylint: disable=g-classes-have-attributes,g-direct-tensorflow-import\n \n+from tensorflow.python.platform import tf_logging as logging\n+from tensorflow.python.util.tf_export import keras_export\n+\n from keras import activations\n from keras import constraints\n from keras import initializers\n@@ -24,9 +27,6 @@ from keras.layers.rnn import gru\n from keras.layers.rnn import rnn_utils\n from keras.layers.rnn.base_rnn import RNN\n \n-from tensorflow.python.platform import tf_logging as logging\n-from tensorflow.python.util.tf_export import keras_export\n-\n \n @keras_export(v1=[\"keras.layers.GRUCell\"])\n class GRUCell(gru.GRUCell):\n\n@@ -15,18 +15,17 @@\n \"\"\"Tests for GRU V1 layer.\"\"\"\n \n \n+import numpy as np\n+import tensorflow.compat.v2 as tf\n from absl.testing import parameterized\n+from tensorflow.core.protobuf import rewriter_config_pb2\n+\n import keras\n from keras.layers.rnn import gru\n from keras.layers.rnn import gru_v1\n from keras.testing_infra import test_combinations\n from keras.testing_infra import test_utils\n from keras.utils import np_utils\n-import numpy as np\n-import tensorflow.compat.v2 as tf\n-\n-from tensorflow.core.protobuf import rewriter_config_pb2\n-\n \n # Global config for grappler setting that is used for graph mode test.\n _rewrites = rewriter_config_pb2.RewriterConfig()\n\n@@ -22,15 +22,14 @@ from __future__ import print_function\n import hashlib\n import numbers\n \n+import tensorflow.compat.v2 as tf\n+from tensorflow.python.util.tf_export import keras_export\n+from tensorflow.python.util.tf_export import tf_export\n+\n from keras.layers.rnn.cell_wrappers import _enumerated_map_structure_up_to\n from keras.layers.rnn.cell_wrappers import _parse_config_to_function\n from keras.layers.rnn.cell_wrappers import _serialize_function_to_config\n from keras.layers.rnn.legacy_cells import RNNCell\n-import tensorflow.compat.v2 as tf\n-\n-from tensorflow.python.util.tf_export import keras_export\n-from tensorflow.python.util.tf_export import tf_export\n-\n \n # This can be used with self.assertRaisesRegexp for assert_like_rnncell.\n ASSERT_LIKE_RNNCELL_ERROR_REGEXP = \"is not an RNNCell\"\n@@ -658,8 +657,8 @@ class DeviceWrapper(_RNNCellWrapperV1):\n \n def _default_dropout_state_filter_visitor(substate):\n     from keras.layers.rnn.legacy_cells import (\n-        LSTMStateTuple,\n-    )  # pylint: disable=g-import-not-at-top\n+        LSTMStateTuple,  # pylint: disable=g-import-not-at-top\n+    )\n \n     if isinstance(substate, LSTMStateTuple):\n         # Do not perform dropout on the memory state.\n\n@@ -14,11 +14,12 @@\n # ==============================================================================\n \"\"\"Tests for RNN cell wrappers v1 implementation.\"\"\"\n \n+import tensorflow.compat.v2 as tf\n from absl.testing import parameterized\n+\n from keras.layers.rnn import legacy_cell_wrappers\n from keras.layers.rnn import legacy_cells\n from keras.testing_infra import test_combinations\n-import tensorflow.compat.v2 as tf\n \n \n @test_combinations.generate(test_combinations.combine(mode=[\"graph\", \"eager\"]))\n\n@@ -29,6 +29,11 @@ from __future__ import print_function\n import collections\n import warnings\n \n+import tensorflow.compat.v2 as tf\n+from tensorflow.python.platform import tf_logging as logging\n+from tensorflow.python.util.tf_export import keras_export\n+from tensorflow.python.util.tf_export import tf_export\n+\n from keras import activations\n from keras import backend\n from keras import initializers\n@@ -36,12 +41,6 @@ from keras.engine import base_layer_utils\n from keras.engine import input_spec\n from keras.legacy_tf_layers import base as base_layer\n from keras.utils import tf_utils\n-import tensorflow.compat.v2 as tf\n-\n-from tensorflow.python.platform import tf_logging as logging\n-from tensorflow.python.util.tf_export import keras_export\n-from tensorflow.python.util.tf_export import tf_export\n-\n \n _BIAS_VARIABLE_NAME = \"bias\"\n _WEIGHTS_VARIABLE_NAME = \"kernel\"\n\n@@ -17,6 +17,10 @@\n \n import uuid\n \n+import tensorflow.compat.v2 as tf\n+from tensorflow.python.platform import tf_logging as logging\n+from tensorflow.python.util.tf_export import keras_export\n+\n from keras import activations\n from keras import backend\n from keras import constraints\n@@ -29,11 +33,6 @@ from keras.layers.rnn import rnn_utils\n from keras.layers.rnn.base_rnn import RNN\n from keras.layers.rnn.dropout_rnn_cell_mixin import DropoutRNNCellMixin\n from keras.utils import tf_utils\n-import tensorflow.compat.v2 as tf\n-\n-from tensorflow.python.platform import tf_logging as logging\n-from tensorflow.python.util.tf_export import keras_export\n-\n \n RECURRENT_DROPOUT_WARNING_MSG = (\n     \"RNN `implementation=2` is not supported when `recurrent_dropout` is set. \"\n\n@@ -19,20 +19,19 @@ import copy\n import os\n import shutil\n \n-from absl.testing import parameterized\n-import keras\n-from keras.layers.rnn import gru_lstm_utils\n-from keras.testing_infra import test_combinations\n-from keras.testing_infra import test_utils\n-from keras.utils import np_utils\n import numpy as np\n import tensorflow.compat.v2 as tf\n-\n+from absl.testing import parameterized\n from tensorflow.core.protobuf import rewriter_config_pb2\n from tensorflow.python.framework import (\n     test_util as tf_test_util,\n )\n \n+import keras\n+from keras.layers.rnn import gru_lstm_utils\n+from keras.testing_infra import test_combinations\n+from keras.testing_infra import test_utils\n+from keras.utils import np_utils\n \n # Global config for grappler setting that is used for graph mode test.\n _rewrites = rewriter_config_pb2.RewriterConfig()\n\n@@ -15,6 +15,9 @@\n \"\"\"Long Short-Term Memory V1 layer.\"\"\"\n # pylint: disable=g-classes-have-attributes,g-direct-tensorflow-import\n \n+from tensorflow.python.platform import tf_logging as logging\n+from tensorflow.python.util.tf_export import keras_export\n+\n from keras import activations\n from keras import constraints\n from keras import initializers\n@@ -24,9 +27,6 @@ from keras.layers.rnn import lstm\n from keras.layers.rnn import rnn_utils\n from keras.layers.rnn.base_rnn import RNN\n \n-from tensorflow.python.platform import tf_logging as logging\n-from tensorflow.python.util.tf_export import keras_export\n-\n \n @keras_export(v1=[\"keras.layers.LSTMCell\"])\n class LSTMCell(lstm.LSTMCell):\n\n@@ -17,19 +17,18 @@\n \n import time\n \n+import numpy as np\n+import tensorflow.compat.v2 as tf\n from absl.testing import parameterized\n+from tensorflow.core.protobuf import rewriter_config_pb2\n+from tensorflow.python.platform import tf_logging as logging\n+\n import keras\n from keras.layers.rnn import lstm\n from keras.layers.rnn import lstm_v1\n from keras.testing_infra import test_combinations\n from keras.testing_infra import test_utils\n from keras.utils import np_utils\n-import numpy as np\n-import tensorflow.compat.v2 as tf\n-\n-from tensorflow.core.protobuf import rewriter_config_pb2\n-from tensorflow.python.platform import tf_logging as logging\n-\n \n # Global config for grappler setting that is used for graph mode test.\n _rewrites = rewriter_config_pb2.RewriterConfig()\n\n@@ -15,11 +15,11 @@\n \"\"\"Utilities for RNN cells and layers.\"\"\"\n # pylint: disable=protected-access\n \n-from keras.utils import control_flow_util\n import tensorflow.compat.v2 as tf\n-\n from tensorflow.python.platform import tf_logging as logging\n \n+from keras.utils import control_flow_util\n+\n \n def standardize_args(inputs, initial_state, constants, num_constants):\n     \"\"\"Standardizes `__call__` to a single list of tensor inputs.\n\n@@ -15,6 +15,10 @@\n \"\"\"Fully connected RNN layer.\"\"\"\n # pylint: disable=g-classes-have-attributes,g-direct-tensorflow-import\n \n+import tensorflow.compat.v2 as tf\n+from tensorflow.python.platform import tf_logging as logging\n+from tensorflow.python.util.tf_export import keras_export\n+\n from keras import activations\n from keras import backend\n from keras import constraints\n@@ -26,10 +30,6 @@ from keras.layers.rnn import rnn_utils\n from keras.layers.rnn.base_rnn import RNN\n from keras.layers.rnn.dropout_rnn_cell_mixin import DropoutRNNCellMixin\n from keras.utils import tf_utils\n-import tensorflow.compat.v2 as tf\n-\n-from tensorflow.python.platform import tf_logging as logging\n-from tensorflow.python.util.tf_export import keras_export\n \n \n @keras_export(\"keras.layers.SimpleRNNCell\")\n\n@@ -14,12 +14,11 @@\n # ==============================================================================\n \"\"\"Tests for SimpleRNN layer.\"\"\"\n \n-import tensorflow.compat.v2 as tf\n-\n import copy\n \n-from absl.testing import parameterized\n import numpy as np\n+import tensorflow.compat.v2 as tf\n+from absl.testing import parameterized\n \n import keras\n from keras.testing_infra import test_combinations\n\n@@ -17,15 +17,15 @@\n \n import functools\n \n+import tensorflow.compat.v2 as tf\n+from tensorflow.python.platform import tf_logging as logging\n+from tensorflow.python.util.tf_export import keras_export\n+\n from keras import backend\n from keras.engine import base_layer\n from keras.layers.rnn import rnn_utils\n from keras.utils import generic_utils\n from keras.utils import tf_utils\n-import tensorflow.compat.v2 as tf\n-\n-from tensorflow.python.platform import tf_logging as logging\n-from tensorflow.python.util.tf_export import keras_export\n \n \n @keras_export(\"keras.layers.StackedRNNCells\")\n@@ -204,9 +204,7 @@ class StackedRNNCells(base_layer.Layer):\n \n     @classmethod\n     def from_config(cls, config, custom_objects=None):\n-        from keras.layers import (\n-            deserialize as deserialize_layer,\n-        )  # pylint: disable=g-import-not-at-top\n+        from keras.layers import deserialize as deserialize_layer\n \n         cells = []\n         for cell_config in config.pop(\"cells\"):\n\n@@ -15,6 +15,9 @@\n \"\"\"Wrapper layer to apply every temporal slice of an input.\"\"\"\n # pylint: disable=g-classes-have-attributes,g-direct-tensorflow-import\n \n+import tensorflow.compat.v2 as tf\n+from tensorflow.python.util.tf_export import keras_export\n+\n from keras import backend\n from keras.engine.base_layer import Layer\n from keras.engine.input_spec import InputSpec\n@@ -22,9 +25,6 @@ from keras.layers.rnn.base_wrapper import Wrapper\n from keras.utils import generic_utils\n from keras.utils import layer_utils\n from keras.utils import tf_utils\n-import tensorflow.compat.v2 as tf\n-\n-from tensorflow.python.util.tf_export import keras_export\n \n \n @keras_export(\"keras.layers.TimeDistributed\")\n\n@@ -15,17 +15,17 @@\n \"\"\"Tests for TimeDistributed wrapper.\"\"\"\n \n \n-from absl.testing import parameterized\n-import keras\n-from keras.testing_infra import test_combinations\n-from keras.testing_infra import test_utils\n import numpy as np\n import tensorflow.compat.v2 as tf\n-\n+from absl.testing import parameterized\n from tensorflow.python.training.tracking import (\n     util as trackable_util,\n )\n \n+import keras\n+from keras.testing_infra import test_combinations\n+from keras.testing_infra import test_utils\n+\n \n class TimeDistributedTest(test_combinations.TestCase):\n     @test_combinations.generate(\n\n@@ -14,7 +14,10 @@\n # ==============================================================================\n \"\"\"Layer serialization/deserialization functions.\"\"\"\n \n+import threading\n+\n import tensorflow.compat.v2 as tf\n+from tensorflow.python.util.tf_export import keras_export\n \n import threading\n from keras.engine import base_layer\n@@ -31,17 +34,14 @@ from keras.layers import pooling\n from keras.layers import regularization\n from keras.layers import reshaping\n from keras.layers import rnn\n-from keras.layers.rnn import cell_wrappers\n-from keras.layers.rnn import gru\n-from keras.layers.rnn import lstm\n from keras.layers.normalization import batch_normalization\n from keras.layers.normalization import batch_normalization_v1\n from keras.layers.normalization import layer_normalization\n from keras.layers.normalization import unit_normalization\n from keras.layers.preprocessing import category_encoding\n from keras.layers.preprocessing import discretization\n-from keras.layers.preprocessing import hashing\n from keras.layers.preprocessing import hashed_crossing\n+from keras.layers.preprocessing import hashing\n from keras.layers.preprocessing import image_preprocessing\n from keras.layers.preprocessing import integer_lookup\n from keras.layers.preprocessing import (\n@@ -49,10 +49,12 @@ from keras.layers.preprocessing import (\n )\n from keras.layers.preprocessing import string_lookup\n from keras.layers.preprocessing import text_vectorization\n+from keras.layers.rnn import cell_wrappers\n+from keras.layers.rnn import gru\n+from keras.layers.rnn import lstm\n from keras.saving.saved_model import json_utils\n from keras.utils import generic_utils\n from keras.utils import tf_inspect as inspect\n-from tensorflow.python.util.tf_export import keras_export\n \n ALL_MODULES = (\n     base_layer,\n@@ -138,15 +140,15 @@ def populate_deserializable_objects():\n \n     # Prevent circular dependencies.\n     from keras import models  # pylint: disable=g-import-not-at-top\n-    from keras.premade_models.linear import (\n-        LinearModel,\n-    )  # pylint: disable=g-import-not-at-top\n-    from keras.premade_models.wide_deep import (\n-        WideDeepModel,\n-    )  # pylint: disable=g-import-not-at-top\n     from keras.feature_column.sequence_feature_column import (\n-        SequenceFeatures,\n-    )  # pylint: disable=g-import-not-at-top\n+        SequenceFeatures,  # pylint: disable=g-import-not-at-top\n+    )\n+    from keras.premade_models.linear import (\n+        LinearModel,  # pylint: disable=g-import-not-at-top\n+    )\n+    from keras.premade_models.wide_deep import (\n+        WideDeepModel,  # pylint: disable=g-import-not-at-top\n+    )\n \n     LOCAL.ALL_OBJECTS[\"Input\"] = input_layer.Input\n     LOCAL.ALL_OBJECTS[\"InputSpec\"] = input_spec.InputSpec\n@@ -159,14 +161,14 @@ def populate_deserializable_objects():\n \n     if tf.__internal__.tf2.enabled():\n         from keras.feature_column.dense_features_v2 import (\n-            DenseFeatures,\n-        )  # pylint: disable=g-import-not-at-top\n+            DenseFeatures,  # pylint: disable=g-import-not-at-top\n+        )\n \n         LOCAL.ALL_OBJECTS[\"DenseFeatures\"] = DenseFeatures\n     else:\n         from keras.feature_column.dense_features import (\n-            DenseFeatures,\n-        )  # pylint: disable=g-import-not-at-top\n+            DenseFeatures,  # pylint: disable=g-import-not-at-top\n+        )\n \n         LOCAL.ALL_OBJECTS[\"DenseFeatures\"] = DenseFeatures\n \n\n@@ -15,17 +15,16 @@\n \"\"\"Tests for layer serialization utils.\"\"\"\n \n import tensorflow.compat.v2 as tf\n-\n from absl.testing import parameterized\n \n import keras\n-from keras.testing_infra import test_combinations\n+from keras.layers.normalization import batch_normalization as batchnorm_v2\n+from keras.layers.normalization import batch_normalization_v1 as batchnorm_v1\n from keras.layers.rnn import gru\n from keras.layers.rnn import gru_v1\n from keras.layers.rnn import lstm\n from keras.layers.rnn import lstm_v1\n-from keras.layers.normalization import batch_normalization as batchnorm_v2\n-from keras.layers.normalization import batch_normalization_v1 as batchnorm_v1\n+from keras.testing_infra import test_combinations\n \n \n class SerializableInt(int):\n\n@@ -14,19 +14,18 @@\n # ==============================================================================\n \"\"\"Test for allowing TF ops to work with Keras Functional API.\"\"\"\n \n-import tensorflow.compat.v2 as tf\n-\n import time\n \n-from absl.testing import parameterized\n import numpy as np\n+import tensorflow.compat.v2 as tf\n+from absl.testing import parameterized\n \n import keras\n-from keras.testing_infra import test_combinations\n-from keras.testing_infra import test_utils\n from keras.engine import keras_tensor\n from keras.optimizers.optimizer_v2 import adam\n from keras.saving import model_config\n+from keras.testing_infra import test_combinations\n+from keras.testing_infra import test_utils\n \n \n def _single_op_at_end():\n\n@@ -1,5 +1,5 @@\n \"\"\"Init file.\"\"\"\n \n from keras.legacy_tf_layers import (\n-    migration_utils,\n-)  # pylint: disable=unused-import\n+    migration_utils,  # pylint: disable=unused-import\n+)\n\n@@ -18,20 +18,20 @@ from __future__ import absolute_import\n from __future__ import division\n from __future__ import print_function\n \n-import tensorflow.compat.v2 as tf\n-\n import copy\n import warnings\n-from keras import backend\n-from keras.engine import base_layer_v1 as base_layer\n-from keras.engine import base_layer_utils\n-from keras.legacy_tf_layers import variable_scope_shim\n-from keras.mixed_precision import policy\n-from keras.utils import tf_contextlib\n+\n+import tensorflow.compat.v2 as tf\n from tensorflow.python.ops import variable_scope as vs\n from tensorflow.python.util.tf_export import keras_export\n from tensorflow.python.util.tf_export import tf_export\n \n+from keras import backend\n+from keras.engine import base_layer_utils\n+from keras.engine import base_layer_v1 as base_layer\n+from keras.legacy_tf_layers import variable_scope_shim\n+from keras.mixed_precision import policy\n+from keras.utils import tf_contextlib\n \n _KERAS_STYLE_SCOPE = False\n \n\n@@ -18,18 +18,18 @@ from __future__ import absolute_import\n from __future__ import division\n from __future__ import print_function\n \n-import tensorflow.compat.v2 as tf\n-\n import copy\n \n-from absl.testing import parameterized\n import numpy as np\n+import tensorflow.compat.v2 as tf\n+from absl.testing import parameterized\n+\n from keras import backend\n-from keras.testing_infra import test_combinations\n from keras.engine import base_layer as keras_base_layer\n from keras.engine import input_spec\n from keras.legacy_tf_layers import base as base_tf_layers\n from keras.legacy_tf_layers import core as core_tf_layers\n+from keras.testing_infra import test_combinations\n \n \n class BaseLayerTest(tf.test.TestCase, parameterized.TestCase):\n\n@@ -18,14 +18,14 @@ from __future__ import absolute_import\n from __future__ import division\n from __future__ import print_function\n \n-import tensorflow.compat.v2 as tf\n-\n import warnings\n \n+import tensorflow.compat.v2 as tf\n+from tensorflow.python.util.tf_export import keras_export\n+from tensorflow.python.util.tf_export import tf_export\n+\n from keras import layers as keras_layers\n from keras.legacy_tf_layers import base\n-from tensorflow.python.util.tf_export import keras_export\n-from tensorflow.python.util.tf_export import tf_export\n \n \n @keras_export(v1=[\"keras.__internal__.legacy.layers.Conv1D\"])\n\n@@ -18,9 +18,9 @@ from __future__ import absolute_import\n from __future__ import division\n from __future__ import print_function\n \n+import numpy as np\n import tensorflow.compat.v2 as tf\n \n-import numpy as np\n from keras.legacy_tf_layers import convolutional as conv_layers\n \n \n\n@@ -21,14 +21,14 @@ from __future__ import absolute_import\n from __future__ import division\n from __future__ import print_function\n \n-import tensorflow.compat.v2 as tf\n-\n import warnings\n \n+import tensorflow.compat.v2 as tf\n+from tensorflow.python.util.tf_export import keras_export\n+from tensorflow.python.util.tf_export import tf_export\n+\n from keras import layers as keras_layers\n from keras.legacy_tf_layers import base\n-from tensorflow.python.util.tf_export import keras_export\n-from tensorflow.python.util.tf_export import tf_export\n \n \n @keras_export(v1=[\"keras.__internal__.legacy.layers.Dense\"])\n\n@@ -18,20 +18,20 @@ from __future__ import absolute_import\n from __future__ import division\n from __future__ import print_function\n \n-import tensorflow.compat.v2 as tf\n-\n import collections\n import platform\n \n-from absl.testing import parameterized\n import numpy as np\n+import tensorflow.compat.v2 as tf\n+from absl.testing import parameterized\n from tensorflow.python.framework import (\n     test_util as tf_test_utils,\n )\n-from keras.testing_infra import test_combinations\n-from keras.legacy_tf_layers import core as core_layers\n from tensorflow.python.ops import variable_scope\n \n+from keras.legacy_tf_layers import core as core_layers\n+from keras.testing_infra import test_combinations\n+\n \n class DenseTest(tf.test.TestCase, parameterized.TestCase):\n     @test_combinations.generate(\n\n@@ -8,7 +8,6 @@ eager execution.\n import sys\n \n import tensorflow.compat.v2 as tf\n-\n from tensorflow.python.util.tf_export import keras_export\n \n \n\n@@ -1,8 +1,9 @@\n \"\"\"Tests for migration_utils.\"\"\"\n \n+import tensorflow as tf\n+\n from keras.initializers import GlorotUniform as V2GlorotUniform\n from keras.legacy_tf_layers import migration_utils\n-import tensorflow as tf\n \n \n class DeterministicRandomTestToolTest(tf.test.TestCase):\n\n@@ -18,14 +18,14 @@ from __future__ import absolute_import\n from __future__ import division\n from __future__ import print_function\n \n-import tensorflow.compat.v2 as tf\n-\n import warnings\n \n+import tensorflow.compat.v2 as tf\n+from tensorflow.python.util.tf_export import keras_export\n+from tensorflow.python.util.tf_export import tf_export\n+\n from keras.layers.normalization import batch_normalization_v1\n from keras.legacy_tf_layers import base\n-from tensorflow.python.util.tf_export import keras_export\n-from tensorflow.python.util.tf_export import tf_export\n \n \n @keras_export(v1=[\"keras.__internal__.legacy.layers.BatchNormalization\"])\n\n@@ -18,16 +18,15 @@ from __future__ import absolute_import\n from __future__ import division\n from __future__ import print_function\n \n-import tensorflow.compat.v2 as tf\n-\n import os\n \n import numpy as np\n-\n+import tensorflow.compat.v2 as tf\n from tensorflow.core.protobuf import saver_pb2\n from tensorflow.python.framework import (\n     test_util as tf_test_utils,\n )\n+\n from keras.legacy_tf_layers import convolutional as conv_layers\n from keras.legacy_tf_layers import normalization as normalization_layers\n \n\n@@ -20,11 +20,12 @@ from __future__ import print_function\n \n import warnings\n \n-from keras import layers as keras_layers\n-from keras.legacy_tf_layers import base\n from tensorflow.python.util.tf_export import keras_export\n from tensorflow.python.util.tf_export import tf_export\n \n+from keras import layers as keras_layers\n+from keras.legacy_tf_layers import base\n+\n \n @keras_export(v1=[\"keras.__internal__.legacy.layers.AveragePooling1D\"])\n @tf_export(v1=[\"layers.AveragePooling1D\"])\n\n@@ -19,10 +19,10 @@ from __future__ import division\n from __future__ import print_function\n \n import tensorflow.compat.v2 as tf\n-\n from tensorflow.python.framework import (\n     test_util as tf_test_utils,\n )\n+\n from keras.legacy_tf_layers import pooling as pooling_layers\n \n \n\n@@ -21,15 +21,15 @@ from __future__ import print_function\n import contextlib\n import functools\n \n-from keras.engine import base_layer\n-from keras.utils import layer_utils\n-from keras.utils import tf_inspect\n import tensorflow.compat.v2 as tf\n-\n from tensorflow.python.ops import variable_scope as vs\n from tensorflow.python.platform import tf_logging as logging\n from tensorflow.python.util.tf_export import keras_export\n \n+from keras.engine import base_layer\n+from keras.utils import layer_utils\n+from keras.utils import tf_inspect\n+\n \n def as_shape(shape):\n     \"\"\"Converts the given object to a TensorShape.\"\"\"\n\n@@ -21,7 +21,14 @@ from __future__ import print_function\n import gc\n import threading\n \n+import numpy\n+import tensorflow as tf\n from absl.testing import parameterized\n+from tensorflow.python.framework import (\n+    test_util as tf_test_utils,\n+)\n+from tensorflow.python.ops import variable_scope\n+\n from keras import models\n from keras import regularizers\n from keras.engine import base_layer\n@@ -32,14 +39,6 @@ from keras.legacy_tf_layers import core as core_layers\n from keras.legacy_tf_layers import variable_scope_shim\n from keras.testing_infra import test_combinations\n \n-import numpy\n-import tensorflow as tf\n-\n-from tensorflow.python.framework import (\n-    test_util as tf_test_utils,\n-)\n-from tensorflow.python.ops import variable_scope\n-\n \n def run_inside_wrap_function_in_eager_mode(graph_function):\n     \"\"\"Decorator to execute the same graph code in eager and graph modes.\n\n@@ -19,6 +19,13 @@\n import abc\n import functools\n \n+import tensorflow.compat.v2 as tf\n+from tensorflow.python.ops.ragged import ragged_map_ops\n+from tensorflow.python.ops.ragged import ragged_util\n+from tensorflow.python.util import dispatch\n+from tensorflow.python.util.tf_export import keras_export\n+from tensorflow.tools.docs import doc_controls\n+\n from keras import backend\n from keras.saving.experimental import saving_lib\n from keras.utils import generic_utils\n@@ -26,12 +33,6 @@ from keras.utils import losses_utils\n from keras.utils import tf_utils\n from keras.utils.generic_utils import deserialize_keras_object\n from keras.utils.generic_utils import serialize_keras_object\n-import tensorflow.compat.v2 as tf\n-from tensorflow.python.ops.ragged import ragged_map_ops\n-from tensorflow.python.ops.ragged import ragged_util\n-from tensorflow.python.util import dispatch\n-from tensorflow.python.util.tf_export import keras_export\n-from tensorflow.tools.docs import doc_controls\n \n \n @keras_export(\"keras.losses.Loss\")\n\n@@ -14,18 +14,18 @@\n # ==============================================================================\n \"\"\"Tests for Keras loss functions.\"\"\"\n \n+import numpy as np\n+import tensorflow.compat.v2 as tf\n from absl.testing import parameterized\n+from tensorflow.python.autograph.impl import (\n+    api as autograph,\n+)\n+\n from keras import activations\n from keras import backend\n from keras import losses\n from keras.testing_infra import test_combinations\n from keras.utils import losses_utils\n-import numpy as np\n-import tensorflow.compat.v2 as tf\n-\n-from tensorflow.python.autograph.impl import (\n-    api as autograph,\n-)\n \n ALL_LOSSES = [\n     losses.mean_squared_error,\n\n@@ -15,77 +15,72 @@\n \"\"\"All Keras metrics.\"\"\"\n # pylint: disable=g-bad-import-order\n \n-from keras.utils.generic_utils import deserialize_keras_object\n-from keras.utils.generic_utils import serialize_keras_object\n from tensorflow.python.util.tf_export import keras_export\n \n+# Utilities\n # Base classes\n-from keras.metrics.base_metric import Metric\n-from keras.metrics.base_metric import Reduce\n-from keras.metrics.base_metric import Sum\n from keras.metrics.base_metric import Mean\n from keras.metrics.base_metric import MeanMetricWrapper\n from keras.metrics.base_metric import MeanTensor\n+from keras.metrics.base_metric import Metric\n+from keras.metrics.base_metric import Reduce\n+from keras.metrics.base_metric import Sum\n from keras.metrics.base_metric import SumOverBatchSize\n from keras.metrics.base_metric import SumOverBatchSizeMetricWrapper\n-\n-# Individual metric classes\n-from keras.metrics.metrics import MeanRelativeError\n-from keras.metrics.metrics import Accuracy\n-from keras.metrics.metrics import BinaryAccuracy\n-from keras.metrics.metrics import CategoricalAccuracy\n-from keras.metrics.metrics import SparseCategoricalAccuracy\n-from keras.metrics.metrics import TopKCategoricalAccuracy\n-from keras.metrics.metrics import SparseTopKCategoricalAccuracy\n-from keras.metrics.metrics import FalsePositives\n-from keras.metrics.metrics import FalseNegatives\n-from keras.metrics.metrics import TrueNegatives\n-from keras.metrics.metrics import TruePositives\n-from keras.metrics.metrics import Precision\n-from keras.metrics.metrics import Recall\n-from keras.metrics.metrics import SensitivityAtSpecificity\n-from keras.metrics.metrics import SpecificityAtSensitivity\n-from keras.metrics.metrics import PrecisionAtRecall\n-from keras.metrics.metrics import RecallAtPrecision\n-from keras.metrics.metrics import AUC\n-from keras.metrics.metrics import CosineSimilarity\n-from keras.metrics.metrics import MeanAbsoluteError\n-from keras.metrics.metrics import MeanAbsolutePercentageError\n-from keras.metrics.metrics import MeanSquaredError\n-from keras.metrics.metrics import MeanSquaredLogarithmicError\n-from keras.metrics.metrics import Hinge\n-from keras.metrics.metrics import SquaredHinge\n-from keras.metrics.metrics import CategoricalHinge\n-from keras.metrics.metrics import RootMeanSquaredError\n-from keras.metrics.metrics import LogCoshError\n-from keras.metrics.metrics import Poisson\n-from keras.metrics.metrics import KLDivergence\n-from keras.metrics.metrics import IoU\n-from keras.metrics.metrics import BinaryIoU\n-from keras.metrics.metrics import MeanIoU\n-from keras.metrics.metrics import OneHotIoU\n-from keras.metrics.metrics import OneHotMeanIoU\n-from keras.metrics.metrics import BinaryCrossentropy\n-from keras.metrics.metrics import CategoricalCrossentropy\n-from keras.metrics.metrics import SparseCategoricalCrossentropy\n-\n-from keras.metrics.metrics import _IoUBase\n-from keras.metrics.metrics import _ConfusionMatrixConditionCount\n-from keras.metrics.metrics import SensitivitySpecificityBase\n+from keras.metrics.base_metric import clone_metric\n+from keras.metrics.base_metric import clone_metrics\n \n # Metric functions\n+# Individual metric classes\n+from keras.metrics.metrics import AUC\n+from keras.metrics.metrics import Accuracy\n+from keras.metrics.metrics import BinaryAccuracy\n+from keras.metrics.metrics import BinaryCrossentropy\n+from keras.metrics.metrics import BinaryIoU\n+from keras.metrics.metrics import CategoricalAccuracy\n+from keras.metrics.metrics import CategoricalCrossentropy\n+from keras.metrics.metrics import CategoricalHinge\n+from keras.metrics.metrics import CosineSimilarity\n+from keras.metrics.metrics import FalseNegatives\n+from keras.metrics.metrics import FalsePositives\n+from keras.metrics.metrics import Hinge\n+from keras.metrics.metrics import IoU\n+from keras.metrics.metrics import KLDivergence\n+from keras.metrics.metrics import LogCoshError\n+from keras.metrics.metrics import MeanAbsoluteError\n+from keras.metrics.metrics import MeanAbsolutePercentageError\n+from keras.metrics.metrics import MeanIoU\n+from keras.metrics.metrics import MeanRelativeError\n+from keras.metrics.metrics import MeanSquaredError\n+from keras.metrics.metrics import MeanSquaredLogarithmicError\n+from keras.metrics.metrics import OneHotIoU\n+from keras.metrics.metrics import OneHotMeanIoU\n+from keras.metrics.metrics import Poisson\n+from keras.metrics.metrics import Precision\n+from keras.metrics.metrics import PrecisionAtRecall\n+from keras.metrics.metrics import Recall\n+from keras.metrics.metrics import RecallAtPrecision\n+from keras.metrics.metrics import RootMeanSquaredError\n+from keras.metrics.metrics import SensitivityAtSpecificity\n+from keras.metrics.metrics import SensitivitySpecificityBase\n+from keras.metrics.metrics import SparseCategoricalAccuracy\n+from keras.metrics.metrics import SparseCategoricalCrossentropy\n+from keras.metrics.metrics import SparseTopKCategoricalAccuracy\n+from keras.metrics.metrics import SpecificityAtSensitivity\n+from keras.metrics.metrics import SquaredHinge\n+from keras.metrics.metrics import TopKCategoricalAccuracy\n+from keras.metrics.metrics import TrueNegatives\n+from keras.metrics.metrics import TruePositives\n+from keras.metrics.metrics import _ConfusionMatrixConditionCount\n+from keras.metrics.metrics import _IoUBase\n from keras.metrics.metrics import accuracy\n from keras.metrics.metrics import binary_accuracy\n-from keras.metrics.metrics import categorical_accuracy\n-from keras.metrics.metrics import sparse_categorical_accuracy\n-from keras.metrics.metrics import top_k_categorical_accuracy\n-from keras.metrics.metrics import sparse_top_k_categorical_accuracy\n-from keras.metrics.metrics import cosine_similarity\n from keras.metrics.metrics import binary_crossentropy\n+from keras.metrics.metrics import categorical_accuracy\n from keras.metrics.metrics import categorical_crossentropy\n from keras.metrics.metrics import categorical_hinge\n+from keras.metrics.metrics import cosine_similarity\n from keras.metrics.metrics import hinge\n-from keras.metrics.metrics import squared_hinge\n from keras.metrics.metrics import kullback_leibler_divergence\n from keras.metrics.metrics import logcosh\n from keras.metrics.metrics import mean_absolute_error\n@@ -93,11 +88,13 @@ from keras.metrics.metrics import mean_absolute_percentage_error\n from keras.metrics.metrics import mean_squared_error\n from keras.metrics.metrics import mean_squared_logarithmic_error\n from keras.metrics.metrics import poisson\n+from keras.metrics.metrics import sparse_categorical_accuracy\n from keras.metrics.metrics import sparse_categorical_crossentropy\n-\n-# Utilities\n-from keras.metrics.base_metric import clone_metric\n-from keras.metrics.base_metric import clone_metrics\n+from keras.metrics.metrics import sparse_top_k_categorical_accuracy\n+from keras.metrics.metrics import squared_hinge\n+from keras.metrics.metrics import top_k_categorical_accuracy\n+from keras.utils.generic_utils import deserialize_keras_object\n+from keras.utils.generic_utils import serialize_keras_object\n \n # Aliases\n acc = ACC = accuracy\n\n@@ -21,6 +21,11 @@ import copy\n import types\n import warnings\n \n+import numpy as np\n+import tensorflow.compat.v2 as tf\n+from tensorflow.python.util.tf_export import keras_export\n+from tensorflow.tools.docs import doc_controls\n+\n from keras import backend\n from keras.dtensor import dtensor_api as dtensor\n from keras.dtensor import utils as dtensor_utils\n@@ -32,11 +37,6 @@ from keras.utils import generic_utils\n from keras.utils import losses_utils\n from keras.utils import metrics_utils\n from keras.utils.tf_utils import is_tensor_or_variable\n-import numpy as np\n-import tensorflow.compat.v2 as tf\n-\n-from tensorflow.python.util.tf_export import keras_export\n-from tensorflow.tools.docs import doc_controls\n \n \n @keras_export(\"keras.metrics.Metric\")\n@@ -207,8 +207,8 @@ class Metric(base_layer.Layer, metaclass=abc.ABCMeta):\n                 return result_t\n \n         from keras.distribute import (\n-            distributed_training_utils,\n-        )  # pylint:disable=g-import-not-at-top\n+            distributed_training_utils,  # pylint:disable=g-import-not-at-top\n+        )\n \n         return distributed_training_utils.call_replica_local_fn(\n             replica_local_fn, *args, **kwargs\n\n@@ -17,16 +17,17 @@\n import copy\n import os\n \n+import numpy as np\n+import tensorflow.compat.v2 as tf\n from absl.testing import parameterized\n+\n+from keras import Model\n from keras import layers\n from keras import metrics\n-from keras import Model\n from keras.engine import base_layer\n from keras.engine import training as training_module\n from keras.testing_infra import test_combinations\n from keras.testing_infra import test_utils\n-import numpy as np\n-import tensorflow.compat.v2 as tf\n \n \n @test_combinations.generate(test_combinations.combine(mode=[\"graph\", \"eager\"]))\n\n@@ -14,18 +14,18 @@\n # ==============================================================================\n \"\"\"Tests for Keras metrics functions.\"\"\"\n \n-import tensorflow.compat.v2 as tf\n-\n import json\n \n-from absl.testing import parameterized\n import numpy as np\n-from keras.testing_infra import test_combinations\n+import tensorflow.compat.v2 as tf\n+from absl.testing import parameterized\n+from tensorflow.python.platform import tf_logging\n+\n from keras import layers\n from keras import metrics\n from keras import models\n+from keras.testing_infra import test_combinations\n from keras.utils import metrics_utils\n-from tensorflow.python.platform import tf_logging\n \n \n @test_combinations.generate(test_combinations.combine(mode=[\"graph\", \"eager\"]))\n\n@@ -17,7 +17,13 @@\n \"\"\"Built-in metrics.\"\"\"\n \n import abc\n-from typing import List, Tuple, Union\n+from typing import List\n+from typing import Tuple\n+from typing import Union\n+\n+import numpy as np\n+import tensorflow.compat.v2 as tf\n+from tensorflow.python.util.tf_export import keras_export\n \n from keras import activations\n from keras import backend\n@@ -40,10 +46,6 @@ from keras.utils import losses_utils\n from keras.utils import metrics_utils\n from keras.utils.generic_utils import to_list\n from keras.utils.tf_utils import is_tensor_or_variable\n-import numpy as np\n-import tensorflow.compat.v2 as tf\n-\n-from tensorflow.python.util.tf_export import keras_export\n \n \n @keras_export(\"keras.metrics.MeanRelativeError\")\n\n@@ -14,15 +14,14 @@\n # ==============================================================================\n \"\"\"Tests metrics correctness using Keras model.\"\"\"\n \n-import tensorflow.compat.v2 as tf\n-\n-from absl.testing import parameterized\n import numpy as np\n+import tensorflow.compat.v2 as tf\n+from absl.testing import parameterized\n \n-from keras.testing_infra import test_combinations\n from keras import layers\n from keras import losses\n from keras import metrics\n+from keras.testing_infra import test_combinations\n from keras.testing_infra import test_utils\n from keras.utils import losses_utils\n \n\n@@ -14,14 +14,13 @@\n # ==============================================================================\n \"\"\"Tests for Keras metrics functions.\"\"\"\n \n-import tensorflow.compat.v2 as tf\n-\n-from absl.testing import parameterized\n import numpy as np\n+import tensorflow.compat.v2 as tf\n+from absl.testing import parameterized\n \n from keras import backend\n-from keras.testing_infra import test_combinations\n from keras import metrics\n+from keras.testing_infra import test_combinations\n \n \n class KerasFunctionalMetricsTest(tf.test.TestCase, parameterized.TestCase):\n\n@@ -17,14 +17,15 @@\n import json\n import math\n \n+import numpy as np\n+import tensorflow.compat.v2 as tf\n+\n+from keras import Model\n from keras import backend\n from keras import layers\n from keras import metrics\n-from keras import Model\n from keras.testing_infra import test_combinations\n from keras.testing_infra import test_utils\n-import numpy as np\n-import tensorflow.compat.v2 as tf\n \n \n @test_combinations.generate(test_combinations.combine(mode=[\"graph\", \"eager\"]))\n\n@@ -20,6 +20,6 @@ use the API.\n \"\"\"\n \n from keras.mixed_precision.loss_scale_optimizer import LossScaleOptimizer\n-from keras.mixed_precision.policy import global_policy\n from keras.mixed_precision.policy import Policy\n+from keras.mixed_precision.policy import global_policy\n from keras.mixed_precision.policy import set_global_policy\n\n@@ -14,12 +14,12 @@\n # ==============================================================================\n \"\"\"Contains AutoCastVariable, a variable which automatically casts itself.\"\"\"\n \n+import threading\n+\n import tensorflow.compat.v2 as tf\n \n-import threading\n from keras.distribute import distributed_training_utils\n \n-\n # _autocast_dtype.dtype is the dtype AutoCastVariables should be cast to, or\n # None if AutoCastVariables should not be cast.\n _autocast_dtype = threading.local()\n\n@@ -14,13 +14,13 @@\n # ==============================================================================\n \"\"\"Tests for AutoCastVariable.\"\"\"\n \n-import tensorflow.compat.v2 as tf\n-\n import os\n import threading\n \n-from absl.testing import parameterized\n import numpy as np\n+import tensorflow.compat.v2 as tf\n+from absl.testing import parameterized\n+\n from keras.mixed_precision import autocast_variable\n from keras.optimizers.optimizer_v2 import adadelta\n from keras.optimizers.optimizer_v2 import adagrad\n\n@@ -14,11 +14,10 @@\n # ==============================================================================\n \"\"\"Contains function to log if devices are compatible with mixed precision.\"\"\"\n \n-import tensorflow.compat.v2 as tf\n-\n import itertools\n-from tensorflow.python.platform import tf_logging\n \n+import tensorflow.compat.v2 as tf\n+from tensorflow.python.platform import tf_logging\n \n _COMPAT_CHECK_PREFIX = \"Mixed precision compatibility check (mixed_float16): \"\n _COMPAT_CHECK_OK_PREFIX = _COMPAT_CHECK_PREFIX + \"OK\"\n\n@@ -14,14 +14,14 @@\n # ==============================================================================\n \"\"\"Tests the device compatibility check.\"\"\"\n \n-import tensorflow.compat.v2 as tf\n-\n import re\n \n-from keras.testing_infra import test_combinations\n-from keras.mixed_precision import device_compatibility_check\n+import tensorflow.compat.v2 as tf\n from tensorflow.python.platform import tf_logging\n \n+from keras.mixed_precision import device_compatibility_check\n+from keras.testing_infra import test_combinations\n+\n \n def device_details(device_name, compute_capability=None):\n     details = {}\n\n@@ -14,14 +14,12 @@\n # ==============================================================================\n \"\"\"Tests various Layer subclasses have correct outputs with mixed precision.\"\"\"\n \n-import tensorflow.compat.v2 as tf\n-\n-from absl.testing import parameterized\n import numpy as np\n-from keras.testing_infra import test_combinations\n+import tensorflow.compat.v2 as tf\n+from absl.testing import parameterized\n+\n from keras import layers\n from keras import models\n-from keras.testing_infra import test_utils\n from keras.layers import activation\n from keras.layers import attention\n from keras.layers import convolutional\n@@ -31,19 +29,21 @@ from keras.layers import merging\n from keras.layers import pooling\n from keras.layers import regularization\n from keras.layers import reshaping\n-from keras.layers.rnn import bidirectional\n-from keras.layers.rnn import conv_lstm2d\n-from keras.layers.rnn import simple_rnn\n-from keras.layers.rnn import gru\n-from keras.layers.rnn import gru_v1\n-from keras.layers.rnn import lstm\n-from keras.layers.rnn import lstm_v1\n-from keras.layers.rnn import time_distributed\n from keras.layers.normalization import batch_normalization\n from keras.layers.normalization import layer_normalization\n from keras.layers.preprocessing import image_preprocessing\n from keras.layers.preprocessing import normalization\n+from keras.layers.rnn import bidirectional\n+from keras.layers.rnn import conv_lstm2d\n+from keras.layers.rnn import gru\n+from keras.layers.rnn import gru_v1\n+from keras.layers.rnn import lstm\n+from keras.layers.rnn import lstm_v1\n+from keras.layers.rnn import simple_rnn\n+from keras.layers.rnn import time_distributed\n from keras.mixed_precision import policy\n+from keras.testing_infra import test_combinations\n+from keras.testing_infra import test_utils\n \n \n def create_mirrored_strategy():\n\n@@ -14,13 +14,12 @@\n # ==============================================================================\n \"\"\"Tests keras.layers.Layer works properly with mixed precision.\"\"\"\n \n-import tensorflow.compat.v2 as tf\n-\n import os\n \n-from absl.testing import parameterized\n import numpy as np\n-from keras.testing_infra import test_combinations\n+import tensorflow.compat.v2 as tf\n+from absl.testing import parameterized\n+\n from keras import layers\n from keras import models\n from keras.engine import base_layer\n@@ -29,6 +28,7 @@ from keras.engine import input_spec\n from keras.mixed_precision import policy\n from keras.mixed_precision import test_util as mp_test_util\n from keras.optimizers.optimizer_v2 import gradient_descent\n+from keras.testing_infra import test_combinations\n \n \n class MultiplyLayerWithFunction(mp_test_util.MultiplyLayer):\n\n@@ -14,6 +14,13 @@\n # ==============================================================================\n \"\"\"Contains the loss scaling optimizer class.\"\"\"\n \n+import tensorflow.compat.v2 as tf\n+from tensorflow.python.keras.optimizer_v2 import (\n+    optimizer_v2 as legacy_optimizer,\n+)\n+from tensorflow.python.platform import tf_logging\n+from tensorflow.python.util.tf_export import keras_export\n+\n from keras import backend\n from keras import optimizers\n from keras.optimizers.optimizer_experimental import (\n@@ -23,14 +30,6 @@ from keras.optimizers.optimizer_v2 import optimizer_v2\n from keras.optimizers.optimizer_v2 import utils as optimizer_utils\n from keras.utils import generic_utils\n \n-import tensorflow.compat.v2 as tf\n-\n-from tensorflow.python.keras.optimizer_v2 import (\n-    optimizer_v2 as legacy_optimizer,\n-)\n-from tensorflow.python.platform import tf_logging\n-from tensorflow.python.util.tf_export import keras_export\n-\n \n class _UnwrapPreventer:\n     \"\"\"Wrapper that DistributionStrategy will not unwrap.\n\n@@ -17,7 +17,16 @@\n import os\n from unittest import mock\n \n+import numpy as np\n+import tensorflow.compat.v2 as tf\n from absl.testing import parameterized\n+from tensorflow.python.framework import (\n+    test_util as tf_test_utils,\n+)\n+from tensorflow.python.keras.optimizer_v2 import (\n+    gradient_descent as legacy_sgd,\n+)\n+from tensorflow.python.platform import tf_logging\n \n from keras import optimizers\n from keras.mixed_precision import loss_scale_optimizer\n@@ -31,17 +40,6 @@ from keras.optimizers.optimizer_v2 import gradient_descent\n from keras.optimizers.optimizer_v2 import optimizer_v2\n from keras.testing_infra import test_combinations\n \n-import numpy as np\n-import tensorflow.compat.v2 as tf\n-\n-from tensorflow.python.framework import (\n-    test_util as tf_test_utils,\n-)\n-from tensorflow.python.keras.optimizer_v2 import (\n-    gradient_descent as legacy_sgd,\n-)\n-from tensorflow.python.platform import tf_logging\n-\n # If called outside any strategy.scope() calls, this will return the default\n # strategy.\n default_strategy_fn = tf.distribute.get_strategy\n\n@@ -14,11 +14,10 @@\n # ==============================================================================\n \"\"\"Tests Keras integration with enable_mixed_precision_graph_rewrite().\"\"\"\n \n+import os\n+\n import tensorflow.compat.v2 as tf\n \n-import os\n-from keras.testing_infra import test_combinations\n-from keras.testing_infra import test_utils\n from keras.mixed_precision import (\n     loss_scale_optimizer as loss_scale_optimizer_v2,\n )\n@@ -26,6 +25,8 @@ from keras.mixed_precision import policy\n from keras.optimizers.optimizer_v2 import (\n     gradient_descent as gradient_descent_v2,\n )\n+from keras.testing_infra import test_combinations\n+from keras.testing_infra import test_utils\n \n \n class MixedPrecisionTest(test_combinations.TestCase):\n\n@@ -14,19 +14,16 @@\n # ==============================================================================\n \"\"\"Tests keras.Model works properly with mixed precision.\"\"\"\n \n-import tensorflow.compat.v2 as tf\n-\n import os\n \n+import numpy as np\n+import tensorflow.compat.v2 as tf\n from absl import flags\n from absl.testing import parameterized\n-import numpy as np\n+\n from keras import backend\n-from keras.testing_infra import test_combinations\n from keras import layers\n from keras import models\n-from keras.optimizers import optimizer_v1\n-from keras.testing_infra import test_utils\n from keras.applications import densenet\n from keras.applications import efficientnet\n from keras.applications import inception_resnet_v2\n@@ -43,11 +40,13 @@ from keras.layers import core\n from keras.mixed_precision import loss_scale_optimizer\n from keras.mixed_precision import policy\n from keras.mixed_precision import test_util as mp_test_util\n+from keras.optimizers import optimizer_v1\n from keras.optimizers.optimizer_v2 import gradient_descent\n from keras.saving import save\n+from keras.testing_infra import test_combinations\n+from keras.testing_infra import test_utils\n from keras.utils import generic_utils\n \n-\n # If called outside any strategy.scope() calls, this will return the default\n # strategy.\n default_strategy_fn = tf.distribute.get_strategy\n\n@@ -14,14 +14,15 @@\n # ==============================================================================\n \"\"\"Contains the Policy class for mixed precision training.\"\"\"\n \n-import tensorflow.compat.v2 as tf\n-\n import contextlib\n+\n+import tensorflow.compat.v2 as tf\n+from tensorflow.python.util.tf_export import keras_export\n+\n from keras import backend\n from keras.engine import base_layer_utils\n from keras.mixed_precision import device_compatibility_check\n from keras.utils import generic_utils\n-from tensorflow.python.util.tf_export import keras_export\n \n \n # pylint: disable=g-classes-have-attributes\n\n@@ -15,15 +15,15 @@\n \"\"\"Tests Policies.\"\"\"\n \n import tensorflow.compat.v2 as tf\n-\n from absl.testing import parameterized\n-from keras.testing_infra import test_combinations\n-from keras.testing_infra import test_utils\n+from tensorflow.python.platform import tf_logging\n+\n from keras.engine import base_layer_utils\n from keras.mixed_precision import device_compatibility_check\n from keras.mixed_precision import policy as mp_policy\n from keras.optimizers.optimizer_v2 import gradient_descent\n-from tensorflow.python.platform import tf_logging\n+from keras.testing_infra import test_combinations\n+from keras.testing_infra import test_utils\n \n \n @test_combinations.generate(test_combinations.combine(mode=[\"graph\", \"eager\"]))\n\n@@ -15,6 +15,7 @@\n \"\"\"Contains testing utilities related to mixed precision.\"\"\"\n \n import tensorflow.compat.v2 as tf\n+\n from keras import regularizers\n from keras.engine import base_layer\n \n\n@@ -18,6 +18,13 @@\n from keras.engine.functional import Functional\n from keras.engine.sequential import Sequential\n from keras.engine.training import Model\n+\n+# Private symbols that are used in tests.\n+# TODO(b/221261361): Clean up private symbols usage and remove these imports.\n+from keras.models.cloning import _clone_functional_model\n+from keras.models.cloning import _clone_layer\n+from keras.models.cloning import _clone_layers_and_model_config\n+from keras.models.cloning import _clone_sequential_model\n from keras.models.cloning import clone_and_build_model\n from keras.models.cloning import clone_model\n from keras.models.cloning import share_weights\n@@ -27,10 +34,3 @@ from keras.saving.model_config import model_from_json\n from keras.saving.model_config import model_from_yaml\n from keras.saving.save import load_model\n from keras.saving.save import save_model\n-\n-# Private symbols that are used in tests.\n-# TODO(b/221261361): Clean up private symbols usage and remove these imports.\n-from keras.models.cloning import _clone_functional_model\n-from keras.models.cloning import _clone_layer\n-from keras.models.cloning import _clone_layers_and_model_config\n-from keras.models.cloning import _clone_sequential_model\n\n@@ -16,9 +16,11 @@\n \"\"\"Code for model cloning, plus model-related API entries.\"\"\"\n \n import tensorflow.compat.v2 as tf\n+from tensorflow.python.platform import tf_logging as logging\n+from tensorflow.python.util.tf_export import keras_export\n+\n from keras import backend\n from keras import metrics as metrics_module\n-from keras.optimizers import optimizer_v1\n from keras.engine import functional\n from keras.engine import sequential\n from keras.engine import training\n@@ -27,12 +29,10 @@ from keras.engine.base_layer import AddMetric\n from keras.engine.base_layer import Layer\n from keras.engine.input_layer import Input\n from keras.engine.input_layer import InputLayer\n+from keras.optimizers import optimizer_v1\n from keras.utils import generic_utils\n from keras.utils import version_utils\n from keras.utils.generic_utils import CustomObjectScope\n-from tensorflow.python.platform import tf_logging as logging\n-from tensorflow.python.util.tf_export import keras_export\n-\n \n # API entries importable from `keras.models`:\n Model = training.Model  # pylint: disable=invalid-name\n\n@@ -14,20 +14,19 @@\n # ==============================================================================\n \"\"\"Tests for `models.py` (model cloning, mainly).\"\"\"\n \n-import tensorflow.compat.v2 as tf\n-\n import functools\n import os\n \n-from absl.testing import parameterized\n import numpy as np\n+import tensorflow.compat.v2 as tf\n+from absl.testing import parameterized\n \n import keras\n from keras import backend\n-from keras.testing_infra import test_combinations\n from keras import metrics\n from keras import models\n from keras.optimizers import optimizer_v1\n+from keras.testing_infra import test_combinations\n from keras.testing_infra import test_utils\n \n \n\n@@ -16,13 +16,13 @@\n \n import copy\n \n+import tensorflow.compat.v2 as tf\n+from tensorflow.python.util.tf_export import keras_export\n+\n from keras.engine import data_adapter\n from keras.layers import deserialize as deserialize_layer\n from keras.models import Model\n from keras.utils import generic_utils\n-import tensorflow.compat.v2 as tf\n-\n-from tensorflow.python.util.tf_export import keras_export\n \n # pylint: disable=g-classes-have-attributes\n \n\n@@ -2,12 +2,13 @@\n \n import os\n \n+import tensorflow.compat.v2 as tf\n from absl.testing import parameterized\n+\n import keras\n from keras.models import sharpness_aware_minimization\n from keras.optimizers.optimizer_experimental import adam\n from keras.testing_infra import test_utils\n-import tensorflow.compat.v2 as tf\n \n ds_combinations = tf.__internal__.distribute.combinations\n \n\n@@ -20,23 +20,19 @@ For more examples see the base class `tf.keras.optimizers.Optimizer`.\n \"\"\"\n \n import tensorflow.compat.v2 as tf\n-\n-# Symbols to be accessed under keras.optimizers. To be replaced with\n-# optimizers v2022 when they graduate out of experimental.\n-from keras.optimizers.optimizer_v2.gradient_descent import SGD\n-from keras.optimizers.optimizer_v2.rmsprop import RMSprop\n-from keras.optimizers.optimizer_v2.adam import Adam\n-from keras.optimizers.optimizer_v2.adadelta import Adadelta\n-from keras.optimizers.optimizer_v2.adagrad import Adagrad\n-from keras.optimizers.optimizer_v2.adamax import Adamax\n-from keras.optimizers.optimizer_v2.nadam import Nadam\n-from keras.optimizers.optimizer_v2.ftrl import Ftrl\n+from tensorflow.python.util.tf_export import keras_export\n \n # Imports needed for deserialization.\n from keras import backend\n-from keras.optimizers.optimizer_experimental import (\n-    optimizer as optimizer_experimental,\n-)\n+from keras.optimizers.legacy import adadelta as adadelta_legacy\n+from keras.optimizers.legacy import adagrad as adagrad_legacy\n+from keras.optimizers.legacy import adam as adam_legacy\n+from keras.optimizers.legacy import adamax as adamax_legacy\n+from keras.optimizers.legacy import ftrl as ftrl_legacy\n+from keras.optimizers.legacy import nadam as nadam_legacy\n+from keras.optimizers.legacy import optimizer as optimizer_legacy\n+from keras.optimizers.legacy import rmsprop as rmsprop_legacy\n+from keras.optimizers.legacy import sgd as sgd_legacy\n from keras.optimizers.optimizer_experimental import (\n     adadelta as adadelta_experimental,\n )\n@@ -50,19 +46,13 @@ from keras.optimizers.optimizer_experimental import (\n from keras.optimizers.optimizer_experimental import adamw as adamw_experimental\n from keras.optimizers.optimizer_experimental import ftrl as ftrl_experimental\n from keras.optimizers.optimizer_experimental import nadam as nadam_experimental\n+from keras.optimizers.optimizer_experimental import (\n+    optimizer as optimizer_experimental,\n+)\n from keras.optimizers.optimizer_experimental import (\n     rmsprop as rmsprop_experimental,\n )\n from keras.optimizers.optimizer_experimental import sgd as sgd_experimental\n-from keras.optimizers.legacy import optimizer as optimizer_legacy\n-from keras.optimizers.legacy import adadelta as adadelta_legacy\n-from keras.optimizers.legacy import adagrad as adagrad_legacy\n-from keras.optimizers.legacy import adam as adam_legacy\n-from keras.optimizers.legacy import adamax as adamax_legacy\n-from keras.optimizers.legacy import ftrl as ftrl_legacy\n-from keras.optimizers.legacy import nadam as nadam_legacy\n-from keras.optimizers.legacy import rmsprop as rmsprop_legacy\n-from keras.optimizers.legacy import sgd as sgd_legacy\n from keras.optimizers.optimizer_v1 import Optimizer\n from keras.optimizers.optimizer_v1 import TFOptimizer\n from keras.optimizers.optimizer_v2 import adadelta as adadelta_v2\n@@ -76,9 +66,19 @@ from keras.optimizers.optimizer_v2 import (\n from keras.optimizers.optimizer_v2 import nadam as nadam_v2\n from keras.optimizers.optimizer_v2 import optimizer_v2 as base_optimizer_v2\n from keras.optimizers.optimizer_v2 import rmsprop as rmsprop_v2\n+from keras.optimizers.optimizer_v2.adadelta import Adadelta\n+from keras.optimizers.optimizer_v2.adagrad import Adagrad\n+from keras.optimizers.optimizer_v2.adam import Adam\n+from keras.optimizers.optimizer_v2.adamax import Adamax\n+from keras.optimizers.optimizer_v2.ftrl import Ftrl\n+\n+# Symbols to be accessed under keras.optimizers. To be replaced with\n+# optimizers v2022 when they graduate out of experimental.\n+from keras.optimizers.optimizer_v2.gradient_descent import SGD\n+from keras.optimizers.optimizer_v2.nadam import Nadam\n+from keras.optimizers.optimizer_v2.rmsprop import RMSprop\n from keras.utils.generic_utils import deserialize_keras_object\n from keras.utils.generic_utils import serialize_keras_object\n-from tensorflow.python.util.tf_export import keras_export\n \n \n @keras_export(\"keras.optimizers.serialize\")\n@@ -117,8 +117,8 @@ def deserialize(config, custom_objects=None):\n     # loss_scale_optimizer has a direct dependency of optimizer, import here\n     # rather than top to avoid the cyclic dependency.\n     from keras.mixed_precision import (\n-        loss_scale_optimizer,\n-    )  # pylint: disable=g-import-not-at-top\n+        loss_scale_optimizer,  # pylint: disable=g-import-not-at-top\n+    )\n \n     all_classes = {\n         \"adadelta\": adadelta_v2.Adadelta,\n\n@@ -14,10 +14,10 @@\n # ==============================================================================\n \"\"\"Legacy Adadelta optimizer implementation.\"\"\"\n \n-from keras.optimizers.optimizer_v2 import adadelta\n-\n from tensorflow.python.util.tf_export import keras_export\n \n+from keras.optimizers.optimizer_v2 import adadelta\n+\n \n @keras_export(\"keras.optimizers.legacy.Adadelta\")\n class Adadelta(adadelta.Adadelta):\n\n@@ -14,10 +14,10 @@\n # ==============================================================================\n \"\"\"Legacy Adagrad optimizer implementation.\"\"\"\n \n-from keras.optimizers.optimizer_v2 import adagrad\n-\n from tensorflow.python.util.tf_export import keras_export\n \n+from keras.optimizers.optimizer_v2 import adagrad\n+\n \n @keras_export(\"keras.optimizers.legacy.Adagrad\")\n class Adagrad(adagrad.Adagrad):\n\n@@ -14,10 +14,10 @@\n # ==============================================================================\n \"\"\"Legacy Adam optimizer implementation.\"\"\"\n \n-from keras.optimizers.optimizer_v2 import adam\n-\n from tensorflow.python.util.tf_export import keras_export\n \n+from keras.optimizers.optimizer_v2 import adam\n+\n \n @keras_export(\"keras.optimizers.legacy.Adam\")\n class Adam(adam.Adam):\n\n@@ -14,10 +14,10 @@\n # ==============================================================================\n \"\"\"Legacy Adamax optimizer implementation.\"\"\"\n \n-from keras.optimizers.optimizer_v2 import adamax\n-\n from tensorflow.python.util.tf_export import keras_export\n \n+from keras.optimizers.optimizer_v2 import adamax\n+\n \n @keras_export(\"keras.optimizers.legacy.Adamax\")\n class Adamax(adamax.Adamax):\n\n@@ -14,10 +14,10 @@\n # ==============================================================================\n \"\"\"Legacy Ftrl optimizer implementation.\"\"\"\n \n-from keras.optimizers.optimizer_v2 import ftrl\n-\n from tensorflow.python.util.tf_export import keras_export\n \n+from keras.optimizers.optimizer_v2 import ftrl\n+\n \n @keras_export(\"keras.optimizers.legacy.Ftrl\")\n class Ftrl(ftrl.Ftrl):\n\n@@ -14,10 +14,10 @@\n # ==============================================================================\n \"\"\"Legacy Nadam optimizer implementation.\"\"\"\n \n-from keras.optimizers.optimizer_v2 import nadam\n-\n from tensorflow.python.util.tf_export import keras_export\n \n+from keras.optimizers.optimizer_v2 import nadam\n+\n \n @keras_export(\"keras.optimizers.legacy.Nadam\")\n class Nadam(nadam.Nadam):\n\n@@ -14,10 +14,10 @@\n # ==============================================================================\n \"\"\"Legacy Adam optimizer implementation.\"\"\"\n \n-from keras.optimizers.optimizer_v2 import optimizer_v2\n-\n from tensorflow.python.util.tf_export import keras_export\n \n+from keras.optimizers.optimizer_v2 import optimizer_v2\n+\n \n @keras_export(\"keras.optimizers.legacy.Optimizer\")\n class Optimizer(optimizer_v2.OptimizerV2):\n\n@@ -1,6 +1,8 @@\n \"\"\"Tests for optimizer.\"\"\"\n \n+import tensorflow.compat.v2 as tf\n from absl.testing import parameterized\n+\n import keras\n from keras.optimizers.legacy import adadelta\n from keras.optimizers.legacy import adagrad\n@@ -10,7 +12,6 @@ from keras.optimizers.legacy import ftrl\n from keras.optimizers.legacy import nadam\n from keras.optimizers.legacy import rmsprop\n from keras.optimizers.legacy import sgd\n-import tensorflow.compat.v2 as tf\n \n adadelta_fn = tf.__internal__.test.combinations.NamedObject(\n     \"adadelta\", lambda: adadelta.Adadelta(0.002)\n\n@@ -14,10 +14,10 @@\n # ==============================================================================\n \"\"\"Legacy RMSprop optimizer implementation.\"\"\"\n \n-from keras.optimizers.optimizer_v2 import rmsprop\n-\n from tensorflow.python.util.tf_export import keras_export\n \n+from keras.optimizers.optimizer_v2 import rmsprop\n+\n \n @keras_export(\"keras.optimizers.legacy.RMSprop\")\n class RMSprop(rmsprop.RMSprop):\n\n@@ -14,10 +14,10 @@\n # ==============================================================================\n \"\"\"Legacy SGD optimizer implementation.\"\"\"\n \n-from keras.optimizers.optimizer_v2 import gradient_descent\n-\n from tensorflow.python.util.tf_export import keras_export\n \n+from keras.optimizers.optimizer_v2 import gradient_descent\n+\n \n @keras_export(\"keras.optimizers.legacy.SGD\")\n class SGD(gradient_descent.SGD):\n\n@@ -14,12 +14,13 @@\n # ==============================================================================\n \"\"\"Various learning rate decay functions.\"\"\"\n \n-import tensorflow.compat.v2 as tf\n-\n import functools\n-from keras.optimizers.schedules import learning_rate_schedule\n+\n+import tensorflow.compat.v2 as tf\n from tensorflow.python.util.tf_export import tf_export\n \n+from keras.optimizers.schedules import learning_rate_schedule\n+\n \n @tf_export(v1=[\"train.exponential_decay\"])\n def exponential_decay(\n\n@@ -14,9 +14,10 @@\n # ==============================================================================\n \"\"\"Functional test for learning rate decay.\"\"\"\n \n+import math\n+\n import tensorflow.compat.v2 as tf\n \n-import math\n from keras.testing_infra import test_combinations\n \n \n\n@@ -14,11 +14,11 @@\n # ==============================================================================\n \"\"\"Adadelta optimizer implementation.\"\"\"\n \n+import tensorflow.compat.v2 as tf\n+from tensorflow.python.util.tf_export import keras_export\n+\n from keras.optimizers.optimizer_experimental import optimizer\n from keras.utils import generic_utils\n-import tensorflow.compat.v2 as tf\n-\n-from tensorflow.python.util.tf_export import keras_export\n \n \n # pylint: disable=g-classes-have-attributes\n\n@@ -14,12 +14,12 @@\n # ==============================================================================\n \"\"\"Adagrad optimizer implementation.\"\"\"\n \n+import tensorflow.compat.v2 as tf\n+from tensorflow.python.util.tf_export import keras_export\n+\n from keras import initializers\n from keras.optimizers.optimizer_experimental import optimizer\n from keras.utils import generic_utils\n-import tensorflow.compat.v2 as tf\n-\n-from tensorflow.python.util.tf_export import keras_export\n \n \n # pylint: disable=g-classes-have-attributes\n\n@@ -14,11 +14,11 @@\n # ==============================================================================\n \"\"\"Adam optimizer implementation.\"\"\"\n \n+import tensorflow.compat.v2 as tf\n+from tensorflow.python.util.tf_export import keras_export\n+\n from keras.optimizers.optimizer_experimental import optimizer\n from keras.utils import generic_utils\n-import tensorflow.compat.v2 as tf\n-\n-from tensorflow.python.util.tf_export import keras_export\n \n \n # pylint: disable=g-classes-have-attributes\n\n@@ -14,11 +14,11 @@\n # ==============================================================================\n \"\"\"Adamax optimizer implementation.\"\"\"\n \n+import tensorflow.compat.v2 as tf\n+from tensorflow.python.util.tf_export import keras_export\n+\n from keras.optimizers.optimizer_experimental import optimizer\n from keras.utils import generic_utils\n-import tensorflow.compat.v2 as tf\n-\n-from tensorflow.python.util.tf_export import keras_export\n \n \n # pylint: disable=g-classes-have-attributes\n\n@@ -14,11 +14,11 @@\n # ==============================================================================\n \"\"\"AdamW optimizer implementation.\"\"\"\n \n+import tensorflow.compat.v2 as tf\n+from tensorflow.python.util.tf_export import keras_export\n+\n from keras.optimizers.optimizer_experimental import optimizer\n from keras.utils import generic_utils\n-import tensorflow.compat.v2 as tf\n-\n-from tensorflow.python.util.tf_export import keras_export\n \n \n # pylint: disable=g-classes-have-attributes\n\n@@ -14,11 +14,11 @@\n # ==============================================================================\n \"\"\"FTRL optimizer implementation.\"\"\"\n \n+import tensorflow.compat.v2 as tf\n+from tensorflow.python.util.tf_export import keras_export\n+\n from keras.optimizers.optimizer_experimental import optimizer\n from keras.utils import generic_utils\n-import tensorflow.compat.v2 as tf\n-\n-from tensorflow.python.util.tf_export import keras_export\n \n \n # pylint: disable=g-classes-have-attributes\n\n@@ -14,11 +14,11 @@\n # ==============================================================================\n \"\"\"Nadam optimizer implementation.\"\"\"\n \n+import tensorflow.compat.v2 as tf\n+from tensorflow.python.util.tf_export import keras_export\n+\n from keras.optimizers.optimizer_experimental import optimizer\n from keras.utils import generic_utils\n-import tensorflow.compat.v2 as tf\n-\n-from tensorflow.python.util.tf_export import keras_export\n \n \n # pylint: disable=g-classes-have-attributes\n\n@@ -18,16 +18,16 @@ This is under development, and subject to interface/implementation changes.\n \"\"\"\n \n import abc\n+\n+import tensorflow.compat.v2 as tf\n from absl import logging\n+from tensorflow.python.util.tf_export import keras_export\n+from tensorflow.tools.docs import doc_controls\n \n from keras import backend\n from keras import initializers\n from keras.optimizers.optimizer_v2 import utils as optimizer_utils\n from keras.optimizers.schedules import learning_rate_schedule\n-import tensorflow.compat.v2 as tf\n-\n-from tensorflow.python.util.tf_export import keras_export\n-from tensorflow.tools.docs import doc_controls\n \n \n class _BaseOptimizer(tf.Module):\n\n@@ -1,6 +1,8 @@\n \"\"\"Tests for calling optimizer on ParameterServerStrategy.\"\"\"\n \n+import tensorflow.compat.v2 as tf\n from absl.testing import parameterized\n+\n import keras\n from keras.optimizers.optimizer_experimental import adadelta\n from keras.optimizers.optimizer_experimental import adagrad\n@@ -13,7 +15,6 @@ from keras.optimizers.optimizer_experimental import rmsprop\n from keras.optimizers.optimizer_experimental import sgd\n from keras.utils import dataset_creator\n from keras.utils import losses_utils\n-import tensorflow.compat.v2 as tf\n \n ds_combinations = tf.__internal__.distribute.combinations\n \n\n@@ -6,8 +6,11 @@ More context in go/new-keras-optimizer\n import os\n import re\n \n+import numpy as np\n+import tensorflow.compat.v2 as tf\n from absl import logging\n from absl.testing import parameterized\n+\n import keras\n from keras.optimizers.optimizer_experimental import adadelta as adadelta_new\n from keras.optimizers.optimizer_experimental import adagrad as adagrad_new\n@@ -26,8 +29,6 @@ from keras.optimizers.optimizer_v2 import gradient_descent as sgd_old\n from keras.optimizers.optimizer_v2 import rmsprop as rmsprop_old\n from keras.optimizers.schedules import learning_rate_schedule\n from keras.utils import losses_utils\n-import numpy as np\n-import tensorflow.compat.v2 as tf\n \n ds_combinations = tf.__internal__.distribute.combinations\n \n\n@@ -14,11 +14,11 @@\n # ==============================================================================\n \"\"\"RMSprop optimizer implementation.\"\"\"\n \n+import tensorflow.compat.v2 as tf\n+from tensorflow.python.util.tf_export import keras_export\n+\n from keras.optimizers.optimizer_experimental import optimizer\n from keras.utils import generic_utils\n-import tensorflow.compat.v2 as tf\n-\n-from tensorflow.python.util.tf_export import keras_export\n \n \n # pylint: disable=g-classes-have-attributes\n\n@@ -14,11 +14,11 @@\n # ==============================================================================\n \"\"\"SGD optimizer implementation.\"\"\"\n \n+import tensorflow.compat.v2 as tf\n+from tensorflow.python.util.tf_export import keras_export\n+\n from keras.optimizers.optimizer_experimental import optimizer\n from keras.utils import generic_utils\n-import tensorflow.compat.v2 as tf\n-\n-from tensorflow.python.util.tf_export import keras_export\n \n \n # pylint: disable=g-classes-have-attributes\n\n@@ -20,6 +20,7 @@ For more examples see the base class `tf.compat.v1.keras.optimizers.Optimizer`.\n \"\"\"\n \n import tensorflow.compat.v2 as tf\n+\n from keras import backend\n \n \n\n@@ -14,14 +14,14 @@\n # ==============================================================================\n \"\"\"Adadelta optimizer implementation.\"\"\"\n \n-import tensorflow.compat.v2 as tf\n-\n-# pylint: disable=g-classes-have-attributes\n-\n import numpy as np\n+import tensorflow.compat.v2 as tf\n+from tensorflow.python.util.tf_export import keras_export\n+\n from keras import backend_config\n from keras.optimizers.optimizer_v2 import optimizer_v2\n-from tensorflow.python.util.tf_export import keras_export\n+\n+# pylint: disable=g-classes-have-attributes\n \n \n # pylint: disable=g-classes-have-attributes\n\n@@ -14,12 +14,12 @@\n # ==============================================================================\n \"\"\"Tests for Adadelta Optimizer.\"\"\"\n \n-import tensorflow.compat.v2 as tf\n-\n-from absl.testing import parameterized\n import numpy as np\n-from keras.testing_infra import test_combinations\n+import tensorflow.compat.v2 as tf\n+from absl.testing import parameterized\n+\n from keras.optimizers.optimizer_v2 import adadelta\n+from keras.testing_infra import test_combinations\n \n _DATA_TYPES = [tf.half, tf.float32, tf.float64, tf.complex64, tf.complex128]\n \n\n@@ -14,14 +14,14 @@\n # ==============================================================================\n \"\"\"Adagrad optimizer implementation.\"\"\"\n \n-import tensorflow.compat.v2 as tf\n-\n-# pylint: disable=g-classes-have-attributes\n-\n import numpy as np\n+import tensorflow.compat.v2 as tf\n+from tensorflow.python.util.tf_export import keras_export\n+\n from keras import backend_config\n from keras.optimizers.optimizer_v2 import optimizer_v2\n-from tensorflow.python.util.tf_export import keras_export\n+\n+# pylint: disable=g-classes-have-attributes\n \n \n # pylint: disable=g-classes-have-attributes\n\n@@ -14,15 +14,15 @@\n # ==============================================================================\n \"\"\"Functional tests for aggregate operations.\"\"\"\n \n-import tensorflow.compat.v2 as tf\n-\n import copy\n \n-from absl.testing import parameterized\n import numpy as np\n-from keras.testing_infra import test_combinations\n+import tensorflow.compat.v2 as tf\n+from absl.testing import parameterized\n+\n from keras.optimizers.optimizer_v2 import adagrad\n from keras.optimizers.schedules import learning_rate_schedule\n+from keras.testing_infra import test_combinations\n \n _DATA_TYPES = [tf.half, tf.float32, tf.float64, tf.complex64, tf.complex128]\n \n\n@@ -15,9 +15,10 @@\n \"\"\"Adam optimizer implementation.\"\"\"\n \n import tensorflow.compat.v2 as tf\n+from tensorflow.python.util.tf_export import keras_export\n+\n from keras import backend_config\n from keras.optimizers.optimizer_v2 import optimizer_v2\n-from tensorflow.python.util.tf_export import keras_export\n \n \n # pylint: disable=g-classes-have-attributes\n\n@@ -14,14 +14,14 @@\n # ==============================================================================\n \"\"\"Tests for Adam.\"\"\"\n \n-import tensorflow.compat.v2 as tf\n-\n-from absl.testing import parameterized\n import numpy as np\n-from keras.testing_infra import test_combinations\n+import tensorflow.compat.v2 as tf\n+from absl.testing import parameterized\n+\n from keras.optimizers import optimizer_v1\n from keras.optimizers.optimizer_v2 import adam\n from keras.optimizers.schedules import learning_rate_schedule\n+from keras.testing_infra import test_combinations\n \n \n def adam_update_numpy(\n\n@@ -15,9 +15,10 @@\n \"\"\"Adamax optimizer implementation.\"\"\"\n \n import tensorflow.compat.v2 as tf\n+from tensorflow.python.util.tf_export import keras_export\n+\n from keras import backend_config\n from keras.optimizers.optimizer_v2 import optimizer_v2\n-from tensorflow.python.util.tf_export import keras_export\n \n \n # pylint: disable=g-classes-have-attributes\n\n@@ -14,12 +14,12 @@\n # ==============================================================================\n \"\"\"Tests for Adamax.\"\"\"\n \n-import tensorflow.compat.v2 as tf\n-\n-from absl.testing import parameterized\n import numpy as np\n-from keras.testing_infra import test_combinations\n+import tensorflow.compat.v2 as tf\n+from absl.testing import parameterized\n+\n from keras.optimizers.optimizer_v2 import adamax\n+from keras.testing_infra import test_combinations\n \n \n def adamax_update_numpy(\n\n@@ -17,9 +17,10 @@\n # pylint: disable=g-classes-have-attributes\n \n import tensorflow.compat.v2 as tf\n-from keras.optimizers.optimizer_v2 import optimizer_v2\n from tensorflow.python.util.tf_export import keras_export\n \n+from keras.optimizers.optimizer_v2 import optimizer_v2\n+\n \n # pylint: disable=g-classes-have-attributes\n @keras_export(\"keras.optimizers.Ftrl\")\n\n@@ -14,9 +14,9 @@\n # ==============================================================================\n \"\"\"Functional tests for Ftrl operations.\"\"\"\n \n+import numpy as np\n import tensorflow.compat.v2 as tf\n \n-import numpy as np\n from keras.optimizers.optimizer_v2 import ftrl\n \n \n\n@@ -16,9 +16,10 @@\n # pylint: disable=g-bad-import-order\n # pylint: disable=g-classes-have-attributes\n import tensorflow.compat.v2 as tf\n-from keras.optimizers.optimizer_v2 import optimizer_v2\n from tensorflow.python.util.tf_export import keras_export\n \n+from keras.optimizers.optimizer_v2 import optimizer_v2\n+\n \n # pylint: disable=g-classes-have-attributes\n @keras_export(\"keras.optimizers.SGD\")\n\n@@ -14,13 +14,13 @@\n # ==============================================================================\n \"\"\"Functional test for GradientDescent.\"\"\"\n \n-import tensorflow.compat.v2 as tf\n-\n-from absl.testing import parameterized\n import numpy as np\n-from keras.testing_infra import test_combinations\n+import tensorflow.compat.v2 as tf\n+from absl.testing import parameterized\n+\n from keras.optimizers.optimizer_v2 import gradient_descent\n from keras.optimizers.schedules import learning_rate_schedule\n+from keras.testing_infra import test_combinations\n \n \n class GradientDescentOptimizerTest(tf.test.TestCase, parameterized.TestCase):\n\n@@ -15,11 +15,12 @@\n \"\"\"Nadam optimizer implementation.\"\"\"\n \n import tensorflow.compat.v2 as tf\n-from keras import backend_config\n-from keras.optimizers.schedules import learning_rate_schedule\n-from keras.optimizers.optimizer_v2 import optimizer_v2\n from tensorflow.python.util.tf_export import keras_export\n \n+from keras import backend_config\n+from keras.optimizers.optimizer_v2 import optimizer_v2\n+from keras.optimizers.schedules import learning_rate_schedule\n+\n \n # pylint: disable=g-classes-have-attributes\n @keras_export(\"keras.optimizers.Nadam\")\n\n@@ -14,9 +14,9 @@\n # ==============================================================================\n \"\"\"Tests for Nadam.\"\"\"\n \n+import numpy as np\n import tensorflow.compat.v2 as tf\n \n-import numpy as np\n from keras.optimizers.optimizer_v2 import nadam\n \n \n\n@@ -20,6 +20,10 @@ import abc\n import contextlib\n import functools\n import warnings\n+\n+import tensorflow.compat.v2 as tf\n+from tensorflow.python.util.tf_export import keras_export\n+\n from keras import backend\n from keras import initializers\n from keras.engine import base_layer_utils\n@@ -29,9 +33,6 @@ from keras.utils import generic_utils\n from keras.utils import layer_utils\n from keras.utils import tf_inspect\n from keras.utils import tf_utils\n-import tensorflow.compat.v2 as tf\n-from tensorflow.python.util.tf_export import keras_export\n-\n \n keras_optimizers_gauge = tf.__internal__.monitoring.BoolGauge(\n     \"/tensorflow/api/keras/optimizers\", \"keras optimizer usage\", \"method\"\n\n@@ -16,7 +16,13 @@\n \n import collections\n \n+import numpy as np\n+import tensorflow.compat.v2 as tf\n from absl.testing import parameterized\n+from tensorflow.python.framework import (\n+    test_util as tf_test_utils,\n+)\n+\n import keras\n from keras import backend\n from keras import callbacks\n@@ -40,13 +46,6 @@ from keras.optimizers.schedules import learning_rate_schedule\n from keras.testing_infra import test_combinations\n from keras.testing_infra import test_utils\n from keras.utils import np_utils\n-import numpy as np\n-import tensorflow.compat.v2 as tf\n-\n-from tensorflow.python.framework import (\n-    test_util as tf_test_utils,\n-)\n-\n \n _DATA_TYPES = [tf.half, tf.float32, tf.float64]\n # TODO(b/141710709): complex support in NVCC and ROCM.\n\n@@ -14,14 +14,14 @@\n # ==============================================================================\n \"\"\"RMSprop optimizer implementation.\"\"\"\n \n-import tensorflow.compat.v2 as tf\n-\n-# pylint: disable=g-classes-have-attributes\n-\n import numpy as np\n+import tensorflow.compat.v2 as tf\n+from tensorflow.python.util.tf_export import keras_export\n+\n from keras import backend_config\n from keras.optimizers.optimizer_v2 import optimizer_v2\n-from tensorflow.python.util.tf_export import keras_export\n+\n+# pylint: disable=g-classes-have-attributes\n \n \n # pylint: disable=g-classes-have-attributes\n\n@@ -14,21 +14,21 @@\n # ==============================================================================\n \"\"\"Tests for rmsprop.\"\"\"\n \n-import tensorflow.compat.v2 as tf\n-\n import copy\n import itertools\n import math\n \n-from absl.testing import parameterized\n import numpy as np\n+import tensorflow.compat.v2 as tf\n+from absl.testing import parameterized\n from tensorflow.python.framework import (\n     test_util as tf_test_utils,\n )\n+\n+from keras.optimizers.optimizer_v2 import rmsprop\n+from keras.optimizers.schedules import learning_rate_schedule\n from keras.testing_infra import test_combinations\n from keras.testing_infra import test_utils\n-from keras.optimizers.schedules import learning_rate_schedule\n-from keras.optimizers.optimizer_v2 import rmsprop\n \n _DATA_TYPES = [tf.half, tf.float32, tf.float64, tf.complex64, tf.complex128]\n \n\n@@ -14,22 +14,21 @@\n # ==============================================================================\n \"\"\"Tests for Keras optimizers.\"\"\"\n \n-import tensorflow.compat.v2 as tf\n-\n import gc\n import weakref\n \n import numpy as np\n+import tensorflow.compat.v2 as tf\n+from tensorflow.python.training.adam import AdamOptimizer\n+from tensorflow.python.training.experimental.loss_scale_optimizer import (\n+    MixedPrecisionLossScaleOptimizer,\n+)\n \n import keras\n from keras.optimizers import optimizer_v1\n from keras.testing_infra import test_combinations\n from keras.testing_infra import test_utils\n from keras.utils import np_utils\n-from tensorflow.python.training.adam import AdamOptimizer\n-from tensorflow.python.training.experimental.loss_scale_optimizer import (\n-    MixedPrecisionLossScaleOptimizer,\n-)\n \n \n def _get_model(input_dim, num_hidden, output_dim):\n\n@@ -14,13 +14,14 @@\n # ==============================================================================\n \"\"\"Various learning rate schedule functions.\"\"\"\n \n-import tensorflow.compat.v2 as tf\n-\n import abc\n import math\n+\n+import tensorflow.compat.v2 as tf\n+from tensorflow.python.util.tf_export import keras_export\n+\n from keras import backend\n from keras.utils import generic_utils\n-from tensorflow.python.util.tf_export import keras_export\n \n \n @keras_export(\"keras.optimizers.schedules.LearningRateSchedule\")\n\n@@ -16,14 +16,13 @@\n \n import math\n \n+import numpy as np\n+import tensorflow.compat.v2 as tf\n from absl.testing import parameterized\n \n from keras.optimizers.optimizer_v2 import gradient_descent\n from keras.optimizers.schedules import learning_rate_schedule\n from keras.testing_infra import test_combinations\n-import numpy as np\n-\n-import tensorflow.compat.v2 as tf\n \n \n def _maybe_serialized(lr_decay, serialize_and_deserialize):\n\n@@ -15,6 +15,9 @@\n \"\"\"Built-in linear model classes.\"\"\"\n \n import tensorflow.compat.v2 as tf\n+from tensorflow.python.util import deprecation\n+from tensorflow.python.util.tf_export import keras_export\n+\n from keras import activations\n from keras import initializers\n from keras import regularizers\n@@ -22,8 +25,6 @@ from keras.engine import base_layer\n from keras.engine import input_spec\n from keras.engine import training\n from keras.layers import core\n-from tensorflow.python.util import deprecation\n-from tensorflow.python.util.tf_export import keras_export\n \n \n @keras_export(\n\n@@ -14,11 +14,10 @@\n # ==============================================================================\n \"\"\"Tests for Keras Premade Linear models.\"\"\"\n \n+import numpy as np\n import tensorflow.compat.v2 as tf\n \n-import numpy as np\n from keras import backend\n-from keras.testing_infra import test_combinations\n from keras import losses\n from keras.engine import input_layer\n from keras.engine import sequential\n@@ -27,6 +26,7 @@ from keras.feature_column import dense_features_v2\n from keras.layers import core\n from keras.optimizers.optimizer_v2 import gradient_descent\n from keras.premade_models import linear\n+from keras.testing_infra import test_combinations\n \n \n @test_combinations.run_all_keras_modes(always_skip_v1=True)\n\n@@ -15,6 +15,9 @@\n \"\"\"Built-in WideNDeep model classes.\"\"\"\n \n import tensorflow.compat.v2 as tf\n+from tensorflow.python.util import deprecation\n+from tensorflow.python.util.tf_export import keras_export\n+\n from keras import activations\n from keras import backend\n from keras import layers as layer_module\n@@ -22,8 +25,6 @@ from keras.engine import base_layer\n from keras.engine import data_adapter\n from keras.engine import training as keras_training\n from keras.utils import generic_utils\n-from tensorflow.python.util import deprecation\n-from tensorflow.python.util.tf_export import keras_export\n \n \n @keras_export(\n\n@@ -14,11 +14,9 @@\n # ==============================================================================\n \"\"\"Tests for Keras Premade WideNDeep models.\"\"\"\n \n+import numpy as np\n import tensorflow.compat.v2 as tf\n \n-import numpy as np\n-from keras.testing_infra import test_combinations\n-from keras.testing_infra import test_utils\n from keras.engine import input_layer\n from keras.engine import sequential\n from keras.engine import training\n@@ -27,6 +25,8 @@ from keras.layers import core\n from keras.optimizers.optimizer_v2 import gradient_descent\n from keras.premade_models import linear\n from keras.premade_models import wide_deep\n+from keras.testing_infra import test_combinations\n+from keras.testing_infra import test_utils\n \n \n @test_combinations.run_all_keras_modes(always_skip_v1=True)\n\n@@ -35,11 +35,12 @@ import os\n import threading\n import warnings\n \n+import numpy as np\n+from tensorflow.python.util.tf_export import keras_export\n+\n from keras import backend\n from keras.utils import data_utils\n from keras.utils import image_utils\n-import numpy as np\n-from tensorflow.python.util.tf_export import keras_export\n \n try:\n     import scipy\n\n@@ -19,16 +19,17 @@ import random\n import shutil\n import tempfile\n \n+import numpy as np\n+import pandas as pd\n+import tensorflow.compat.v2 as tf\n from absl.testing import parameterized\n+\n from keras import layers\n from keras.engine import sequential\n from keras.preprocessing import image\n from keras.testing_infra import test_combinations\n from keras.testing_infra import test_utils\n from keras.utils import image_utils\n-import numpy as np\n-import pandas as pd\n-import tensorflow.compat.v2 as tf\n \n try:\n     import PIL  # pylint:disable=g-import-not-at-top\n\n@@ -27,11 +27,11 @@ for more details.\n import json\n import random\n \n-from keras.utils import data_utils\n import numpy as np\n-\n from tensorflow.python.util.tf_export import keras_export\n \n+from keras.utils import data_utils\n+\n \n def _remove_long_seq(maxlen, seq, label):\n     \"\"\"Removes sequences that exceed the maximum length.\n\n@@ -16,10 +16,11 @@\n \n import math\n \n-from keras.preprocessing import sequence\n import numpy as np\n import tensorflow.compat.v2 as tf\n \n+from keras.preprocessing import sequence\n+\n \n class TestSequence(tf.test.TestCase):\n     def test_make_sampling_table(self):\n\n@@ -17,10 +17,11 @@\n \n import collections\n \n-from keras.preprocessing import text\n import numpy as np\n import tensorflow.compat.v2 as tf\n \n+from keras.preprocessing import text\n+\n \n class TestText(tf.test.TestCase):\n     def test_one_hot(self):\n\n@@ -16,14 +16,14 @@\n # pylint: disable=g-classes-have-attributes\n # pylint: disable=invalid-name\n \n-import tensorflow.compat.v2 as tf\n-\n import math\n \n+import tensorflow.compat.v2 as tf\n+from tensorflow.python.util.tf_export import keras_export\n+\n from keras import backend\n from keras.utils.generic_utils import deserialize_keras_object\n from keras.utils.generic_utils import serialize_keras_object\n-from tensorflow.python.util.tf_export import keras_export\n \n \n def _check_penalty_number(x):\n\n@@ -14,18 +14,16 @@\n # ==============================================================================\n \"\"\"Tests for Keras regularizers.\"\"\"\n \n-import tensorflow.compat.v2 as tf\n-\n-from absl.testing import parameterized\n import numpy as np\n+import tensorflow.compat.v2 as tf\n+from absl.testing import parameterized\n \n import keras\n-from keras.testing_infra import test_combinations\n from keras import regularizers\n+from keras.testing_infra import test_combinations\n from keras.testing_infra import test_utils\n from keras.utils import np_utils\n \n-\n DATA_DIM = 5\n NUM_CLASSES = 2\n \n\n@@ -17,11 +17,13 @@ import importlib\n import json\n import os\n import types\n-from keras.saving.saved_model import json_utils\n-from keras.utils import generic_utils\n+\n import tensorflow.compat.v2 as tf\n from tensorflow.python.util import tf_export\n \n+from keras.saving.saved_model import json_utils\n+from keras.utils import generic_utils\n+\n _CONFIG_FILE = \"config.keras\"\n \n # A temporary flag to enable the new idempotent saving framework.\n\n@@ -16,14 +16,15 @@\n import os\n import sys\n \n+import numpy as np\n+import tensorflow.compat.v2 as tf\n+\n import keras\n from keras import backend\n from keras.saving.experimental import saving_lib\n from keras.saving.saved_model import json_utils\n from keras.utils import generic_utils\n from keras.utils import io_utils\n-import numpy as np\n-import tensorflow.compat.v2 as tf\n \n train_step_message = \"This is my training step\"\n \n\n@@ -15,12 +15,12 @@\n # pylint: disable=protected-access\n \"\"\"Functions for saving and loading a Keras Model from HDF5 format.\"\"\"\n \n-import tensorflow.compat.v2 as tf\n-\n import json\n import os\n \n import numpy as np\n+import tensorflow.compat.v2 as tf\n+from tensorflow.python.platform import tf_logging as logging\n \n from keras import backend\n from keras.optimizers import optimizer_v1\n@@ -32,17 +32,13 @@ from keras.saving import saving_utils\n from keras.saving.saved_model import json_utils\n from keras.utils.generic_utils import LazyLoader\n from keras.utils.io_utils import ask_to_proceed_with_overwrite\n-from tensorflow.python.platform import tf_logging as logging\n \n-\n-# pylint: disable=g-import-not-at-top\n try:\n     import h5py\n \n     HDF5_OBJECT_HEADER_LIMIT = 64512\n except ImportError:\n     h5py = None\n-# pylint: enable=g-import-not-at-top\n \n # TODO(b/134426265): Switch back to single-quotes to match the rest of the file\n # once the issue with copybara is fixed.\n@@ -741,9 +737,7 @@ def save_weights_to_hdf5_group(f, model):\n         f: HDF5 group.\n         model: Model instance.\n     \"\"\"\n-    from keras import (\n-        __version__ as keras_version,\n-    )  # pylint: disable=g-import-not-at-top\n+    from keras import __version__ as keras_version\n \n     save_attributes_to_hdf5_group(\n         f, \"layer_names\", [layer.name.encode(\"utf8\") for layer in model.layers]\n\n@@ -14,19 +14,18 @@\n # ==============================================================================\n \"\"\"Tests for Keras losses serialization.\"\"\"\n \n-import tensorflow.compat.v2 as tf\n-\n import os\n import shutil\n \n-from absl.testing import parameterized\n import numpy as np\n+import tensorflow.compat.v2 as tf\n+from absl.testing import parameterized\n \n import keras\n-from keras.testing_infra import test_combinations\n from keras import layers\n from keras import losses\n from keras.optimizers import optimizer_v2\n+from keras.testing_infra import test_combinations\n from keras.testing_infra import test_utils\n from keras.utils import generic_utils\n from keras.utils import losses_utils\n\n@@ -14,19 +14,18 @@\n # ==============================================================================\n \"\"\"Tests for Keras metrics serialization.\"\"\"\n \n-import tensorflow.compat.v2 as tf\n-\n import os\n import shutil\n \n-from absl.testing import parameterized\n import numpy as np\n+import tensorflow.compat.v2 as tf\n+from absl.testing import parameterized\n \n import keras\n-from keras.testing_infra import test_combinations\n from keras import layers\n from keras import metrics\n from keras.optimizers import optimizer_v2\n+from keras.testing_infra import test_combinations\n from keras.testing_infra import test_utils\n from keras.utils import generic_utils\n \n\n@@ -102,7 +102,7 @@ def model_from_json(json_string, custom_objects=None):\n         A Keras model instance (uncompiled).\n     \"\"\"\n     from keras.layers import (\n-        deserialize_from_json,\n-    )  # pylint: disable=g-import-not-at-top\n+        deserialize_from_json,  # pylint: disable=g-import-not-at-top\n+    )\n \n     return deserialize_from_json(json_string, custom_objects=custom_objects)\n\n@@ -13,15 +13,16 @@\n # limitations under the License.\n # ==============================================================================\n \"\"\"Saving utilities to support Python's Pickle protocol.\"\"\"\n-# pylint: disable=g-bad-import-order\n-import tensorflow.compat.v2 as tf\n-\n+import io\n import os\n import tarfile\n-import io\n import uuid\n+\n import numpy\n \n+# pylint: disable=g-bad-import-order\n+import tensorflow.compat.v2 as tf\n+\n from keras.saving import save as save_module\n \n \n\n@@ -13,13 +13,14 @@\n # limitations under the License.\n # ==============================================================================\n \"\"\"Tests for pickling / deepcopying of Keras Models.\"\"\"\n-# pylint: disable=g-bad-import-order\n-import tensorflow.compat.v2 as tf\n-\n import copy\n import pickle\n+\n import numpy as np\n \n+# pylint: disable=g-bad-import-order\n+import tensorflow.compat.v2 as tf\n+\n from keras.testing_infra import test_combinations\n from keras.testing_infra import test_utils\n \n\n@@ -15,6 +15,8 @@\n \"\"\"Keras model saving code.\"\"\"\n \n import tensorflow.compat.v2 as tf\n+from tensorflow.python.util.tf_export import keras_export\n+\n from keras.saving import hdf5_format\n from keras.saving import saving_utils\n from keras.saving.saved_model import load as saved_model_load\n@@ -23,7 +25,6 @@ from keras.saving.saved_model import save as saved_model_save\n from keras.utils import generic_utils\n from keras.utils import traceback_utils\n from keras.utils.io_utils import path_to_string\n-from tensorflow.python.util.tf_export import keras_export\n \n # pylint: disable=g-import-not-at-top\n try:\n\n@@ -14,8 +14,6 @@\n # ==============================================================================\n \"\"\"Tests for Keras model saving code.\"\"\"\n \n-import tensorflow.compat.v2 as tf\n-\n import collections\n import os\n import pathlib\n@@ -23,18 +21,19 @@ import shutil\n import tempfile\n import warnings\n \n-from absl.testing import parameterized\n import numpy as np\n+import tensorflow.compat.v2 as tf\n+from absl.testing import parameterized\n \n import keras\n from keras import losses\n-from keras.optimizers import optimizer_v1\n from keras import optimizers\n from keras.engine import functional\n from keras.engine import sequential\n from keras.feature_column import dense_features\n from keras.feature_column import sequence_feature_column as ksfc\n from keras.layers import core\n+from keras.optimizers import optimizer_v1\n from keras.premade_models.linear import LinearModel\n from keras.saving import model_config\n from keras.saving import save\n@@ -42,7 +41,6 @@ from keras.testing_infra import test_combinations\n from keras.testing_infra import test_utils\n from keras.utils import generic_utils\n \n-\n try:\n     import h5py  # pylint:disable=g-import-not-at-top\n except ImportError:\n\n@@ -14,21 +14,20 @@\n # ,============================================================================\n \"\"\"Tests for model saving in the HDF5 format.\"\"\"\n \n-import tensorflow.compat.v2 as tf\n-\n import os\n import shutil\n import uuid\n \n-from absl.testing import parameterized\n import numpy as np\n+import tensorflow.compat.v2 as tf\n+from absl.testing import parameterized\n \n import keras\n-from keras.testing_infra import test_combinations\n-from keras.optimizers import optimizer_v1\n-from keras.testing_infra import test_utils\n from keras.engine import training\n+from keras.optimizers import optimizer_v1\n from keras.saving import hdf5_format\n+from keras.testing_infra import test_combinations\n+from keras.testing_infra import test_utils\n \n try:\n     import h5py  # pylint:disable=g-import-not-at-top\n\n@@ -4,13 +4,13 @@ This is used in tests to ensure that model serialization is deterministic across\n different processes.\n \"\"\"\n \n+import tensorflow.compat.v2 as tf\n from absl import app\n from absl import flags\n+\n from keras import regularizers\n from keras.testing_infra import test_utils\n \n-import tensorflow.compat.v2 as tf\n-\n flags.DEFINE_string(\"output_path\", \"\", \"The path to write the SavedModel at.\")\n \n FLAGS = flags.FLAGS\n\n@@ -2,13 +2,10 @@\n \n import subprocess\n \n-from absl import flags\n import tensorflow.compat.v2 as tf\n-\n-\n+from absl import flags\n from tensorflow.core.protobuf import saved_model_pb2\n \n-\n FLAGS = flags.FLAGS\n \n \n\n@@ -21,20 +21,17 @@ separate inputs if the given input_shape is a list, and will create a single\n input if the given shape is a tuple.\n \"\"\"\n \n-import tensorflow.compat.v2 as tf\n-\n import collections\n-import functools\n import enum\n+import functools\n import json\n+\n import numpy as np\n+import tensorflow.compat.v2 as tf\n import wrapt\n-\n-from keras.utils import generic_utils\n-\n-\n from tensorflow.python.framework import type_spec\n \n+from keras.utils import generic_utils\n \n _EXTENSION_TYPE_SPEC = \"_EXTENSION_TYPE_SPEC\"\n \n\n@@ -15,9 +15,10 @@\n # pylint: disable=protected-access\n \"\"\"Tests the JSON encoder and decoder.\"\"\"\n \n+import enum\n+\n import tensorflow.compat.v2 as tf\n \n-import enum\n from keras.saving.saved_model import json_utils\n from keras.testing_infra import test_combinations\n from keras.testing_infra import test_utils\n\n@@ -14,13 +14,14 @@\n # ==============================================================================\n \"\"\"Classes and functions implementing Layer SavedModel serialization.\"\"\"\n \n+import tensorflow.compat.v2 as tf\n+\n from keras.mixed_precision import policy\n from keras.saving.saved_model import base_serialization\n from keras.saving.saved_model import constants\n from keras.saving.saved_model import save_impl\n from keras.saving.saved_model import serialized_attributes\n from keras.utils import generic_utils\n-import tensorflow.compat.v2 as tf\n \n \n class LayerSavedModelSaver(base_serialization.SavedModelSaver):\n\n@@ -18,6 +18,10 @@ import re\n import types\n import warnings\n \n+import tensorflow.compat.v1.logging as logging\n+import tensorflow.compat.v2 as tf\n+from google.protobuf import message\n+\n from keras import backend\n from keras import regularizers\n from keras.engine import input_spec\n@@ -29,15 +33,11 @@ from keras.saving.saved_model import constants\n from keras.saving.saved_model import json_utils\n from keras.saving.saved_model import utils\n from keras.saving.saved_model.serialized_attributes import CommonEndpoints\n-from keras.utils import layer_utils\n from keras.utils import generic_utils\n+from keras.utils import layer_utils\n from keras.utils import metrics_utils\n from keras.utils import tf_inspect\n from keras.utils.generic_utils import LazyLoader\n-import tensorflow.compat.v1.logging as logging\n-import tensorflow.compat.v2 as tf\n-\n-from google.protobuf import message\n \n # To avoid circular dependencies between keras/engine and keras/saving,\n # code in keras/saving must delay imports.\n\n@@ -14,10 +14,11 @@\n # ==============================================================================\n \"\"\"Classes and functions implementing Metrics SavedModel serialization.\"\"\"\n \n+import tensorflow.compat.v2 as tf\n+\n from keras.saving.saved_model import constants\n from keras.saving.saved_model import layer_serialization\n from keras.utils import generic_utils\n-import tensorflow.compat.v2 as tf\n \n \n class MetricSavedModelSaver(layer_serialization.LayerSavedModelSaver):\n\n@@ -19,19 +19,18 @@ These tests ensure that a model revived from a combination of config and\n SavedModel have the expected structure.\n \"\"\"\n \n-import tensorflow.compat.v2 as tf\n-\n # TODO(kathywu): Move relevant tests from saved_model_test to\n import shutil\n \n-from absl.testing import parameterized\n import numpy as np\n+import tensorflow.compat.v2 as tf\n+from absl.testing import parameterized\n \n import keras\n from keras import backend\n+from keras.saving.saved_model import load as keras_load\n from keras.testing_infra import test_combinations\n from keras.testing_infra import test_utils\n-from keras.saving.saved_model import load as keras_load\n from keras.utils import generic_utils\n \n \n\n@@ -15,7 +15,10 @@\n \"\"\"Keras SavedModel serialization.\"\"\"\n \n import os\n+\n+import tensorflow.compat.v2 as tf\n from absl import logging\n+from tensorflow.python.saved_model import save as save_lib\n \n from keras import backend\n from keras.layers import serialization\n@@ -27,10 +30,6 @@ from keras.saving.saved_model import save_impl\n from keras.saving.saved_model import utils\n from keras.utils.generic_utils import LazyLoader\n from keras.utils.io_utils import ask_to_proceed_with_overwrite\n-import tensorflow.compat.v2 as tf\n-\n-from tensorflow.python.saved_model import save as save_lib\n-\n \n # To avoid circular dependencies between keras/engine and keras/saving,\n # code in keras/saving must delay imports.\n\n@@ -22,6 +22,9 @@ import functools\n import threading\n import weakref\n \n+import tensorflow.compat.v1.logging as logging\n+import tensorflow.compat.v2 as tf\n+\n from keras import backend\n from keras.engine import base_layer_utils\n from keras.engine import input_spec\n@@ -36,8 +39,6 @@ from keras.utils import tf_contextlib\n from keras.utils import tf_utils\n from keras.utils import version_utils\n from keras.utils.generic_utils import LazyLoader\n-import tensorflow.compat.v1.logging as logging\n-import tensorflow.compat.v2 as tf\n \n # To avoid circular dependencies between keras/engine and keras/saving,\n # code in keras/saving must delay imports.\n\n@@ -25,7 +25,12 @@ import os\n import shutil\n import sys\n \n+import numpy as np\n+import tensorflow.compat.v2 as tf\n from absl.testing import parameterized\n+from tensorflow.core.example import example_pb2\n+from tensorflow.core.example import feature_pb2\n+\n import keras\n from keras import regularizers\n from keras.feature_column.dense_features import DenseFeatures\n@@ -40,11 +45,6 @@ from keras.utils import control_flow_util\n from keras.utils import generic_utils\n from keras.utils import tf_contextlib\n from keras.utils import tf_inspect\n-import numpy as np\n-import tensorflow.compat.v2 as tf\n-\n-from tensorflow.core.example import example_pb2\n-from tensorflow.core.example import feature_pb2\n \n \n class LayerWithLearningPhase(keras.engine.base_layer.Layer):\n\n@@ -15,11 +15,12 @@\n \"\"\"Helper classes that list&validate all attributes to serialize to SavedModel.\n \"\"\"\n \n+import tensorflow.compat.v2 as tf\n+\n from keras.saving.saved_model import constants\n from keras.saving.saved_model import order_preserving_set as ops\n from keras.saving.saved_model import save_impl\n from keras.utils.generic_utils import LazyLoader\n-import tensorflow.compat.v2 as tf\n \n # TODO(b/134426265): Switch back to single-quotes to match the rest of the file\n # once the issue with copybara is fixed.\n\n@@ -20,6 +20,8 @@ import itertools\n import threading\n import types\n \n+import tensorflow.compat.v2 as tf\n+\n from keras import backend\n from keras.engine import base_layer_utils\n from keras.utils import control_flow_util\n@@ -27,9 +29,6 @@ from keras.utils import layer_utils\n from keras.utils import tf_contextlib\n from keras.utils.generic_utils import LazyLoader\n \n-import tensorflow.compat.v2 as tf\n-\n-\n # pylint:disable=g-inconsistent-quotes\n training_lib = LazyLoader(\"training_lib\", globals(), \"keras.engine.training\")\n # pylint:enable=g-inconsistent-quotes\n\n@@ -16,6 +16,10 @@\n \n import warnings\n \n+import tensorflow.compat.v2 as tf\n+from tensorflow.python.platform import tf_logging as logging\n+from tensorflow.python.util.tf_export import keras_export\n+\n from keras import backend\n from keras.optimizers import optimizer_v1\n from keras.optimizers.optimizer_v2 import optimizer_v2\n@@ -25,11 +29,6 @@ from keras.saving import utils_v1 as model_utils\n from keras.utils import mode_keys\n from keras.utils.generic_utils import LazyLoader\n \n-import tensorflow.compat.v2 as tf\n-\n-from tensorflow.python.platform import tf_logging as logging\n-from tensorflow.python.util.tf_export import keras_export\n-\n # To avoid circular dependencies between keras/engine and keras/saving,\n # code in keras/saving must delay imports.\n \n\n@@ -15,17 +15,16 @@\n # pylint: disable=protected-access\n \"\"\"Tests for saving/loading function for keras Model.\"\"\"\n \n-import tensorflow.compat.v2 as tf\n-\n import os\n import shutil\n \n-from absl.testing import parameterized\n import numpy as np\n+import tensorflow.compat.v2 as tf\n+from absl.testing import parameterized\n \n import keras\n-from keras.optimizers import optimizer_v1\n from keras.engine import training as model_lib\n+from keras.optimizers import optimizer_v1\n from keras.optimizers.optimizer_v2 import adadelta\n from keras.optimizers.optimizer_v2 import rmsprop\n from keras.saving import saved_model_experimental as keras_saved_model\n\n@@ -14,21 +14,22 @@\n # ==============================================================================\n \"\"\"Utils related to keras model saving.\"\"\"\n \n-# pylint: disable=g-bad-import-order, g-direct-tensorflow-import\n-import tensorflow.compat.v2 as tf\n-import keras\n-\n import copy\n import os\n+\n+# pylint: disable=g-bad-import-order, g-direct-tensorflow-import\n+import tensorflow.compat.v2 as tf\n+from tensorflow.python.platform import tf_logging as logging\n+\n+import keras\n from keras import backend\n from keras import losses\n-from keras.optimizers import optimizer_v1\n from keras import optimizers\n from keras.engine import base_layer_utils\n+from keras.optimizers import optimizer_v1\n from keras.utils import generic_utils\n from keras.utils import version_utils\n from keras.utils.io_utils import ask_to_proceed_with_overwrite\n-from tensorflow.python.platform import tf_logging as logging\n \n # pylint: enable=g-bad-import-order, g-direct-tensorflow-import\n \n@@ -151,9 +152,7 @@ def trace_model_call(model, input_signature=None):\n         # Outputs always has to be a flat dict.\n         output_names = model.output_names  # Functional Model.\n         if output_names is None:  # Subclassed Model.\n-            from keras.engine import (\n-                compile_utils,\n-            )  # pylint: disable=g-import-not-at-top\n+            from keras.engine import compile_utils\n \n             output_names = compile_utils.create_pseudo_output_names(outputs)\n         outputs = tf.nest.flatten(outputs)\n@@ -164,12 +163,8 @@ def trace_model_call(model, input_signature=None):\n \n def model_metadata(model, include_optimizer=True, require_config=True):\n     \"\"\"Returns a dictionary containing the model metadata.\"\"\"\n-    from keras import (\n-        __version__ as keras_version,\n-    )  # pylint: disable=g-import-not-at-top\n-    from keras.optimizers.optimizer_v2 import (\n-        optimizer_v2,\n-    )  # pylint: disable=g-import-not-at-top\n+    from keras import __version__ as keras_version\n+    from keras.optimizers.optimizer_v2 import optimizer_v2\n \n     model_config = {\"class_name\": model.__class__.__name__}\n     try:\n@@ -321,9 +316,7 @@ def _serialize_nested_config(config):\n \n def _deserialize_metric(metric_config):\n     \"\"\"Deserialize metrics, leaving special strings untouched.\"\"\"\n-    from keras import (\n-        metrics as metrics_module,\n-    )  # pylint:disable=g-import-not-at-top\n+    from keras import metrics as metrics_module\n \n     if metric_config in [\"accuracy\", \"acc\", \"crossentropy\", \"ce\"]:\n         # Do not deserialize accuracy and cross-entropy strings as we have special\n\n@@ -14,20 +14,19 @@\n # ==============================================================================\n \"\"\"Tests for saving utility functions.\"\"\"\n \n-import tensorflow.compat.v2 as tf\n-\n import os\n \n import numpy as np\n+import tensorflow.compat.v2 as tf\n \n import keras\n from keras import backend\n-from keras.testing_infra import test_combinations\n-from keras.testing_infra import test_utils\n from keras.engine import sequential\n from keras.feature_column import dense_features\n from keras.optimizers.optimizer_v2 import gradient_descent\n from keras.saving import saving_utils\n+from keras.testing_infra import test_combinations\n+from keras.testing_infra import test_utils\n \n \n class TraceModelCallTest(test_combinations.TestCase):\n\n@@ -20,13 +20,13 @@ from __future__ import print_function\n \n # pylint: disable=wildcard-import\n from keras.saving.utils_v1.export_output import *\n+from keras.saving.utils_v1.export_utils import EXPORT_TAG_MAP\n+from keras.saving.utils_v1.export_utils import SIGNATURE_KEY_MAP\n from keras.saving.utils_v1.export_utils import build_all_signature_defs\n from keras.saving.utils_v1.export_utils import export_outputs_for_mode\n-from keras.saving.utils_v1.export_utils import EXPORT_TAG_MAP\n from keras.saving.utils_v1.export_utils import get_export_outputs\n from keras.saving.utils_v1.export_utils import get_temp_export_dir\n from keras.saving.utils_v1.export_utils import get_timestamped_export_dir\n-from keras.saving.utils_v1.export_utils import SIGNATURE_KEY_MAP\n \n # pylint: enable=wildcard-import\n # LINT.ThenChange(//tensorflow/python/saved_model/model_utils/__init__.py)\n\n@@ -15,9 +15,10 @@\n # LINT.IfChange\n \"\"\"Classes for different types of export output.\"\"\"\n \n+import abc\n+\n import tensorflow.compat.v2 as tf\n \n-import abc\n from keras.saving.utils_v1 import (\n     signature_def_utils as unexported_signature_utils,\n )\n\n@@ -19,14 +19,13 @@ import collections\n import os\n import time\n \n+import tensorflow.compat.v2 as tf\n+from tensorflow.python.platform import tf_logging as logging\n+\n from keras.saving.utils_v1 import export_output as export_output_lib\n from keras.saving.utils_v1 import mode_keys\n from keras.saving.utils_v1 import unexported_constants\n from keras.saving.utils_v1.mode_keys import KerasModeKeys as ModeKeys\n-import tensorflow.compat.v2 as tf\n-\n-from tensorflow.python.platform import tf_logging as logging\n-\n \n # Mapping of the modes to appropriate MetaGraph tags in the SavedModel.\n EXPORT_TAG_MAP = mode_keys.ModeKeyMap(\n\n@@ -16,9 +16,10 @@\n \n import doctest\n \n-from absl.testing import parameterized\n-from keras.testing_infra import keras_doctest_lib\n import tensorflow.compat.v2 as tf\n+from absl.testing import parameterized\n+\n+from keras.testing_infra import keras_doctest_lib\n \n \n class KerasDoctestOutputCheckerTest(parameterized.TestCase):\n\n@@ -15,13 +15,12 @@\n \"\"\"Utilities for unit-testing Keras.\"\"\"\n # pylint: disable=g-bad-import-order\n \n-import tensorflow.compat.v2 as tf\n-\n import collections\n import functools\n import itertools\n import unittest\n \n+import tensorflow.compat.v2 as tf\n from absl.testing import parameterized\n \n import keras\n\n@@ -14,15 +14,15 @@\n # ==============================================================================\n \"\"\"Tests for Keras test_utils.\"\"\"\n \n-import tensorflow.compat.v2 as tf\n-\n import unittest\n+\n+import tensorflow.compat.v2 as tf\n from absl.testing import parameterized\n \n import keras\n from keras import models as keras_models\n-from keras.testing_infra import test_utils\n from keras.testing_infra import test_combinations\n+from keras.testing_infra import test_utils\n \n \n class CombinationsTest(tf.test.TestCase):\n\n@@ -21,6 +21,14 @@ import functools\n import itertools\n import threading\n import unittest\n+\n+import numpy as np\n+import tensorflow.compat.v2 as tf\n+from tensorflow.python.framework import (\n+    test_util as tf_test_utils,\n+)\n+from tensorflow.python.util.tf_export import keras_export\n+\n from keras import backend\n from keras import layers\n from keras import models\n@@ -36,12 +44,6 @@ from keras.optimizers.optimizer_v2 import nadam as nadam_v2\n from keras.optimizers.optimizer_v2 import rmsprop as rmsprop_v2\n from keras.utils import tf_contextlib\n from keras.utils import tf_inspect\n-import numpy as np\n-import tensorflow.compat.v2 as tf\n-from tensorflow.python.framework import (\n-    test_util as tf_test_utils,\n-)\n-from tensorflow.python.util.tf_export import keras_export\n \n \n def string_test(actual, expected):\n\n@@ -14,22 +14,22 @@\n # ==============================================================================\n \"\"\"Tests add_loss API correctness.\"\"\"\n \n-import tensorflow.compat.v2 as tf\n-\n import numpy as np\n-from keras import Input\n-from keras.testing_infra import test_combinations\n-from keras import layers\n-from keras import losses\n-from keras import Model\n-from keras.optimizers import optimizer_v2\n-from keras import Sequential\n-from keras.testing_infra import test_utils\n+import tensorflow.compat.v2 as tf\n from tensorflow.python.platform import tf_logging as logging\n from tensorflow.python.training.rmsprop import (\n     RMSPropOptimizer,\n )\n \n+from keras import Input\n+from keras import Model\n+from keras import Sequential\n+from keras import layers\n+from keras import losses\n+from keras.optimizers import optimizer_v2\n+from keras.testing_infra import test_combinations\n+from keras.testing_infra import test_utils\n+\n MAE = losses.MeanAbsoluteError\n mae = losses.mean_absolute_error\n \n\n@@ -17,21 +17,9 @@\n import collections\n import os\n \n-from absl import flags\n-from keras import callbacks\n-from keras.distribute import distribute_strategy_test\n-from keras.engine import base_layer\n-from keras.engine import sequential as sequential_model_lib\n-from keras.engine import training\n-from keras.layers import convolutional as conv_layer_lib\n-from keras.layers import core as layer_lib\n-from keras.layers import pooling as pool_layer_lib\n-from keras.layers import regularization as regularization_layer_lib\n-from keras.layers import reshaping as reshaping_layer_lib\n-from keras.testing_infra import test_utils\n import numpy as np\n import tensorflow.compat.v2 as tf\n-\n+from absl import flags\n from tensorboard.plugins.histogram import (\n     summary_v2 as histogram_summary_v2,\n )\n@@ -48,6 +36,18 @@ from tensorflow.python.framework import (\n     test_util as tf_test_utils,\n )\n \n+from keras import callbacks\n+from keras.distribute import distribute_strategy_test\n+from keras.engine import base_layer\n+from keras.engine import sequential as sequential_model_lib\n+from keras.engine import training\n+from keras.layers import convolutional as conv_layer_lib\n+from keras.layers import core as layer_lib\n+from keras.layers import pooling as pool_layer_lib\n+from keras.layers import regularization as regularization_layer_lib\n+from keras.layers import reshaping as reshaping_layer_lib\n+from keras.testing_infra import test_utils\n+\n NUM_CLASSES = 4\n \n FLAGS = flags.FLAGS\n\n@@ -14,18 +14,17 @@\n # ==============================================================================\n \"\"\"Tests for convert_to_constants.py.\"\"\"\n \n-import tensorflow.compat.v2 as tf\n-\n import os\n \n import numpy as np\n-\n-import keras\n+import tensorflow.compat.v2 as tf\n from tensorflow.python.framework import convert_to_constants\n-from keras.testing_infra import test_utils\n from tensorflow.python.saved_model.load import load\n from tensorflow.python.saved_model.save import save\n \n+import keras\n+from keras.testing_infra import test_utils\n+\n \n class VariablesToConstantsTest(tf.test.TestCase):\n     def _freezeModel(self, model):\n\n@@ -14,10 +14,9 @@\n # ==============================================================================\n \"\"\"Tests for custom training loops.\"\"\"\n \n-import tensorflow.compat.v2 as tf\n-\n-from absl.testing import parameterized\n import numpy as np\n+import tensorflow.compat.v2 as tf\n+from absl.testing import parameterized\n \n import keras\n from keras.testing_infra import test_combinations\n\n@@ -14,11 +14,12 @@\n # ,============================================================================\n \"\"\"Tests for `get_config` backwards compatibility.\"\"\"\n \n+import tensorflow.compat.v2 as tf\n+\n from keras.engine import sequential\n from keras.engine import training\n from keras.testing_infra import test_combinations\n from keras.tests import get_config_samples\n-import tensorflow.compat.v2 as tf\n \n \n @test_combinations.run_all_keras_modes\n\n@@ -14,16 +14,16 @@\n # ==============================================================================\n \"\"\"Tests for tensorflow.python.client.graph_util.\"\"\"\n \n-import tensorflow.compat.v2 as tf\n-\n import numpy as np\n+import tensorflow.compat.v2 as tf\n from tensorflow.core.protobuf import meta_graph_pb2\n-import keras\n from tensorflow.python.grappler import tf_optimizer\n from tensorflow.python.training.saver import (\n     export_meta_graph,\n )\n \n+import keras\n+\n \n class ConvertVariablesToConstantsTest(tf.test.TestCase):\n     def _get_tensors(self, sess, tensor_list):\n\n@@ -14,19 +14,18 @@\n # ==============================================================================\n \"\"\"Integration tests for Keras.\"\"\"\n \n-import tensorflow.compat.v2 as tf\n-\n import os\n import random\n \n import numpy as np\n+import tensorflow.compat.v2 as tf\n \n import keras\n-from keras.testing_infra import test_combinations\n-from keras.testing_infra import test_utils\n+from keras import utils\n from keras.layers.rnn import legacy_cells\n from keras.legacy_tf_layers import base as base_layer\n-from keras import utils\n+from keras.testing_infra import test_combinations\n+from keras.testing_infra import test_utils\n \n \n class KerasIntegrationTest(test_combinations.TestCase):\n\n@@ -21,12 +21,13 @@ from __future__ import print_function\n import os\n import sys\n \n-from absl import flags\n-from absl.testing import absltest\n-from keras.testing_infra import keras_doctest_lib\n import numpy as np\n import tensorflow as tf\n import tensorflow.compat.v2 as tf\n+from absl import flags\n+from absl.testing import absltest\n+\n+from keras.testing_infra import keras_doctest_lib\n \n tf.compat.v1.enable_v2_behavior()\n \n\n@@ -13,13 +13,13 @@\n # limitations under the License.\n # =============================================================================\n \n-import keras\n-\n import tensorflow.compat.v2 as tf\n from tensorflow.python.framework.memory_checker import (\n     MemoryChecker,\n )\n \n+import keras\n+\n \n class MemoryCheckerTest(tf.test.TestCase):\n     def testKerasBasic(self):\n\n@@ -21,12 +21,12 @@ introspection (test_util decorators). Please be careful adding new tests here.\n \"\"\"\n \n import tensorflow.compat.v2 as tf\n-\n-import keras\n from tensorflow.python.eager.memory_tests import (\n     memory_test_util,\n )\n \n+import keras\n+\n \n class SingleLayerNet(keras.Model):\n     \"\"\"Simple keras model used to ensure that there are no leaks.\"\"\"\n\n@@ -15,17 +15,16 @@\n # pylint: disable=protected-access\n \"\"\"Tests for saving/loading function for keras Model.\"\"\"\n \n-import tensorflow.compat.v2 as tf\n-\n import os\n import shutil\n \n-from absl.testing import parameterized\n import numpy as np\n+import tensorflow.compat.v2 as tf\n+from absl.testing import parameterized\n \n import keras\n-from keras.testing_infra import test_combinations\n from keras.optimizers import optimizer_v1\n+from keras.testing_infra import test_combinations\n from keras.testing_infra import test_utils\n from keras.tests import model_architectures\n \n\n@@ -14,11 +14,10 @@\n # ==============================================================================\n \"\"\"Tests for compiled Model subclassing.\"\"\"\n \n-import tensorflow.compat.v2 as tf\n-\n import os\n \n import numpy as np\n+import tensorflow.compat.v2 as tf\n \n import keras\n from keras.testing_infra import test_combinations\n\n@@ -14,25 +14,24 @@\n # ==============================================================================\n \"\"\"Tests for Model subclassing.\"\"\"\n \n-import tensorflow.compat.v2 as tf\n-\n import copy\n import os\n \n-from absl.testing import parameterized\n import numpy as np\n-\n-import keras\n+import tensorflow.compat.v2 as tf\n+from absl.testing import parameterized\n from tensorflow.python.framework import (\n     test_util as tf_test_utils,\n )\n-from keras.testing_infra import test_combinations\n-from keras.testing_infra import test_utils\n-from keras.tests import model_subclassing_test_util as model_util\n from tensorflow.python.training.tracking import (\n     data_structures,\n )\n \n+import keras\n+from keras.testing_infra import test_combinations\n+from keras.testing_infra import test_utils\n+from keras.tests import model_subclassing_test_util as model_util\n+\n try:\n     import h5py  # pylint:disable=g-import-not-at-top\n except ImportError:\n\n@@ -14,12 +14,13 @@\n # ==============================================================================\n \"\"\"Tests for trackable object SavedModel save.\"\"\"\n \n-import tensorflow.compat.v2 as tf\n-\n import os\n+\n+import tensorflow.compat.v2 as tf\n from tensorflow.python.framework import (\n     test_util as tf_test_utils,\n )\n+\n from keras.layers import core\n from keras.optimizers.optimizer_v2 import adam\n \n\n@@ -14,16 +14,17 @@\n # =============================================================================\n \"\"\"Tests for tensorflow.python.training.saver.py.\"\"\"\n \n-import tensorflow.compat.v2 as tf\n-\n import functools\n import os\n-from keras.engine import training\n-from keras.layers import core\n+\n+import tensorflow.compat.v2 as tf\n from tensorflow.python.training.tracking import (\n     util as trackable_utils,\n )\n \n+from keras.engine import training\n+from keras.layers import core\n+\n \n class NonLayerTrackable(tf.Module):\n     def __init__(self):\n\n@@ -14,15 +14,16 @@\n # ==============================================================================\n \"\"\"Tests for serialization functions.\"\"\"\n \n+import json\n+\n import tensorflow.compat.v2 as tf\n \n-import json\n-from keras.testing_infra import test_combinations\n from keras.engine import input_layer\n from keras.engine import sequential\n from keras.engine import training\n from keras.layers import core\n from keras.saving.saved_model import json_utils\n+from keras.testing_infra import test_combinations\n \n \n @test_combinations.generate(test_combinations.combine(mode=[\"graph\", \"eager\"]))\n\n@@ -14,14 +14,13 @@\n # ==============================================================================\n \"\"\"Tests temporal sample weights correctness using Keras model.\"\"\"\n \n+import numpy as np\n import tensorflow.compat.v2 as tf\n \n-import numpy as np\n-\n-from keras.testing_infra import test_combinations\n from keras import layers\n from keras import metrics\n from keras.optimizers import optimizer_v2\n+from keras.testing_infra import test_combinations\n from keras.testing_infra import test_utils\n \n \n\n@@ -15,20 +15,20 @@\n \n import os\n \n-import tensorflow.compat.v2 as tf\n-\n-from absl.testing import parameterized\n import numpy\n-from keras.testing_infra import test_combinations\n-from keras.engine import sequential\n-from keras.engine import training\n-from keras.layers import core\n-from keras.layers.normalization import batch_normalization_v1\n+import tensorflow.compat.v2 as tf\n+from absl.testing import parameterized\n from tensorflow.python.training.tracking import (\n     data_structures,\n )\n from tensorflow.python.training.tracking import util\n \n+from keras.engine import sequential\n+from keras.engine import training\n+from keras.layers import core\n+from keras.layers.normalization import batch_normalization_v1\n+from keras.testing_infra import test_combinations\n+\n \n class HasList(training.Model):\n     def __init__(self):\n\n@@ -14,26 +14,27 @@\n # ==============================================================================\n \n import functools\n-\n-import tensorflow.compat.v2 as tf\n import os\n import weakref\n+\n+import tensorflow.compat.v2 as tf\n from tensorflow.python.eager import context\n from tensorflow.python.framework import (\n     test_util as tf_test_utils,\n )\n-from keras.testing_infra import test_combinations\n-from keras.testing_infra import test_utils\n+from tensorflow.python.platform import tf_logging as logging\n+from tensorflow.python.training.tracking import (\n+    util as trackable_utils,\n+)\n+\n from keras.engine import input_layer\n from keras.engine import sequential\n from keras.engine import training\n from keras.layers import core\n from keras.layers import reshaping\n from keras.optimizers.optimizer_v2 import adam\n-from tensorflow.python.platform import tf_logging as logging\n-from tensorflow.python.training.tracking import (\n-    util as trackable_utils,\n-)\n+from keras.testing_infra import test_combinations\n+from keras.testing_infra import test_utils\n \n \n # pylint: disable=not-callable\n\n@@ -14,22 +14,23 @@\n # ==============================================================================\n \"\"\"Tests for object-based saving which use tf.train.* optimizers.\"\"\"\n \n-import tensorflow.compat.v2 as tf\n-\n import functools\n import os\n+\n+import tensorflow.compat.v2 as tf\n from tensorflow.python.eager import context\n from tensorflow.python.framework import (\n     test_util as tf_test_utils,\n )\n-from keras.testing_infra import test_combinations\n-from keras.testing_infra import test_utils\n-from keras.engine import training\n-from keras.layers import core\n from tensorflow.python.training.tracking import (\n     util as trackable_utils,\n )\n \n+from keras.engine import training\n+from keras.layers import core\n+from keras.testing_infra import test_combinations\n+from keras.testing_infra import test_utils\n+\n \n class NonLayerTrackable(tf.Module):\n     def __init__(self):\n\n@@ -13,16 +13,16 @@\n # limitations under the License.\n # ==============================================================================\n \n-from tensorflow.compiler.tests import xla_test\n-\n import tensorflow.compat.v2 as tf\n-from keras.engine import training\n-from keras.layers import core\n-from keras.optimizers.optimizer_v2 import adam\n+from tensorflow.compiler.tests import xla_test\n from tensorflow.python.training.tracking import (\n     util as trackable_utils,\n )\n \n+from keras.engine import training\n+from keras.layers import core\n+from keras.optimizers.optimizer_v2 import adam\n+\n \n class NonLayerTrackable(tf.Module):\n     def __init__(self):\n\n@@ -23,6 +23,7 @@ from __future__ import division\n from __future__ import print_function\n \n import sys\n+\n import setuptools\n \n DOCLINES = __doc__.split(\"\\n\")\n\n@@ -15,17 +15,26 @@\n \"\"\"Public Keras utilities.\"\"\"\n # pylint: disable=g-bad-import-order\n \n+# Audio related\n+from keras.utils.audio_dataset import audio_dataset_from_directory\n+\n+# Sequence related\n+from keras.utils.data_utils import GeneratorEnqueuer\n+from keras.utils.data_utils import OrderedEnqueuer\n+from keras.utils.data_utils import Sequence\n+from keras.utils.data_utils import SequenceEnqueuer\n from keras.utils.data_utils import get_file\n+from keras.utils.data_utils import pad_sequences\n from keras.utils.dataset_utils import split_dataset\n+\n+# Serialization related\n+from keras.utils.generic_utils import CustomObjectScope\n from keras.utils.generic_utils import Progbar\n+from keras.utils.generic_utils import custom_object_scope\n+from keras.utils.generic_utils import deserialize_keras_object\n+from keras.utils.generic_utils import get_custom_objects\n+from keras.utils.generic_utils import serialize_keras_object\n from keras.utils.image_dataset import image_dataset_from_directory\n-from keras.utils.text_dataset import text_dataset_from_directory\n-from keras.utils.tf_utils import set_random_seed\n-from keras.utils.timeseries_dataset import timeseries_dataset_from_array\n-from keras.utils.vis_utils import model_to_dot\n-from keras.utils.vis_utils import plot_model\n-from keras.utils.np_utils import normalize\n-from keras.utils.np_utils import to_categorical\n \n # Image related\n from keras.utils.image_utils import array_to_img\n@@ -33,22 +42,12 @@ from keras.utils.image_utils import img_to_array\n from keras.utils.image_utils import load_img\n from keras.utils.image_utils import save_img\n \n-# Sequence related\n-from keras.utils.data_utils import Sequence\n-from keras.utils.data_utils import GeneratorEnqueuer\n-from keras.utils.data_utils import OrderedEnqueuer\n-from keras.utils.data_utils import SequenceEnqueuer\n-from keras.utils.data_utils import pad_sequences\n-\n-# Serialization related\n-from keras.utils.generic_utils import custom_object_scope\n-from keras.utils.generic_utils import CustomObjectScope\n-from keras.utils.generic_utils import deserialize_keras_object\n-from keras.utils.generic_utils import get_custom_objects\n-from keras.utils.generic_utils import serialize_keras_object\n-\n-# Audio related\n-from keras.utils.audio_dataset import audio_dataset_from_directory\n-\n # Internal\n from keras.utils.layer_utils import get_source_inputs\n+from keras.utils.np_utils import normalize\n+from keras.utils.np_utils import to_categorical\n+from keras.utils.text_dataset import text_dataset_from_directory\n+from keras.utils.tf_utils import set_random_seed\n+from keras.utils.timeseries_dataset import timeseries_dataset_from_array\n+from keras.utils.vis_utils import model_to_dot\n+from keras.utils.vis_utils import plot_model\n\n@@ -14,14 +14,14 @@\n # ==============================================================================\n \"\"\"Keras audio dataset loading utilities.\"\"\"\n \n+import numpy as np\n import tensorflow.compat.v2 as tf\n+from tensorflow.python.util.tf_export import keras_export\n+\n+from keras.utils import dataset_utils\n \n # pylint: disable=g-classes-have-attributes\n \n-import numpy as np\n-\n-from keras.utils import dataset_utils\n-from tensorflow.python.util.tf_export import keras_export\n \n try:\n     import tensorflow_io as tfio\n\n@@ -14,12 +14,12 @@\n # ==============================================================================\n \"\"\"Tests for audio_dataset.\"\"\"\n \n-import tensorflow.compat.v2 as tf\n-\n import os\n import shutil\n \n import numpy as np\n+import tensorflow.compat.v2 as tf\n+\n from keras.testing_infra import test_combinations\n from keras.testing_infra import test_utils\n from keras.utils import audio_dataset\n\n@@ -14,21 +14,19 @@\n # ==============================================================================\n \"\"\"Tests for Keras composite tensor support.\"\"\"\n \n-import tensorflow.compat.v2 as tf\n-\n-from absl.testing import parameterized\n-\n import numpy as np\n import scipy.sparse\n+import tensorflow.compat.v2 as tf\n+from absl.testing import parameterized\n \n import keras\n-from keras.testing_infra import test_combinations\n-from keras.testing_infra import test_utils\n from keras.engine import input_layer\n-from keras.layers import core\n from keras.layers import Dense\n from keras.layers import Embedding\n from keras.layers import Layer\n+from keras.layers import core\n+from keras.testing_infra import test_combinations\n+from keras.testing_infra import test_utils\n \n \n # Define test-only Layer classes to validate passing Sparse and Ragged tensors\n\n@@ -14,11 +14,11 @@\n # ==============================================================================\n \"\"\"Utilities used by convolution layers.\"\"\"\n \n-import tensorflow.compat.v2 as tf\n-\n import itertools\n \n import numpy as np\n+import tensorflow.compat.v2 as tf\n+\n from keras import backend\n \n \n\n@@ -14,12 +14,11 @@\n # ==============================================================================\n \"\"\"Tests for conv_utils.\"\"\"\n \n-import tensorflow.compat.v2 as tf\n-\n import itertools\n \n-from absl.testing import parameterized\n import numpy as np\n+import tensorflow.compat.v2 as tf\n+from absl.testing import parameterized\n \n from keras.utils import conv_utils\n \n\n@@ -15,10 +15,6 @@\n # pylint: disable=g-import-not-at-top\n \"\"\"Utilities for file download and caching.\"\"\"\n \n-import tensorflow.compat.v2 as tf\n-\n-from abc import abstractmethod\n-from contextlib import closing\n import functools\n import hashlib\n import multiprocessing.dummy\n@@ -34,14 +30,18 @@ import typing\n import urllib\n import weakref\n import zipfile\n-from six.moves.urllib.parse import urlsplit\n+from abc import abstractmethod\n+from contextlib import closing\n \n import numpy as np\n+import tensorflow.compat.v2 as tf\n+from tensorflow.python.util.tf_export import keras_export\n+from six.moves.urllib.parse import urlsplit\n+\n from six.moves.urllib.request import urlopen\n+from keras.utils import io_utils\n from keras.utils import tf_inspect\n from keras.utils.generic_utils import Progbar\n-from keras.utils import io_utils\n-from tensorflow.python.util.tf_export import keras_export\n \n # Required to support google internal urlretrieve\n if (\n\n@@ -14,15 +14,14 @@\n # ==============================================================================\n \"\"\"Tests for data_utils.\"\"\"\n \n-import tensorflow.compat.v2 as tf\n-\n-from itertools import cycle\n import os\n import tarfile\n import urllib\n import zipfile\n+from itertools import cycle\n \n import numpy as np\n+import tensorflow.compat.v2 as tf\n \n import keras\n from keras.utils import data_utils\n\n@@ -15,22 +15,22 @@\n \"\"\"Tests for dataset_creator.\"\"\"\n \n import tensorflow.compat.v2 as tf\n-\n from absl.testing import parameterized\n from tensorflow.python.distribute.cluster_resolver import (\n     SimpleClusterResolver,\n )\n-from keras.testing_infra import test_combinations\n-from keras.testing_infra import test_utils\n+from tensorflow.python.training.server_lib import (\n+    ClusterSpec,\n+)\n+\n from keras.distribute import multi_worker_testing_utils\n from keras.engine import data_adapter\n from keras.engine import sequential\n from keras.layers import core as core_layers\n from keras.optimizers.optimizer_v2 import gradient_descent\n+from keras.testing_infra import test_combinations\n+from keras.testing_infra import test_utils\n from keras.utils import dataset_creator\n-from tensorflow.python.training.server_lib import (\n-    ClusterSpec,\n-)\n \n \n @test_utils.run_v2_only\n\n@@ -14,19 +14,18 @@\n # ==============================================================================\n \"\"\"Keras image dataset loading utilities.\"\"\"\n \n-import tensorflow.compat.v2 as tf\n-\n-# pylint: disable=g-classes-have-attributes\n-\n import multiprocessing\n import os\n+import random\n import time\n import warnings\n-import random\n \n import numpy as np\n+import tensorflow.compat.v2 as tf\n from tensorflow.python.util.tf_export import keras_export\n \n+# pylint: disable=g-classes-have-attributes\n+\n \n @keras_export(\"keras.utils.split_dataset\", v1=[])\n def split_dataset(\n\n@@ -1,14 +1,14 @@\n \"\"\"Tests for Dataset Utils\"\"\"\n \n+import numpy as np\n import tensorflow.compat.v2 as tf\n \n-# pylint: disable=g-classes-have-attributes\n-\n-import numpy as np\n from keras.datasets import mnist\n from keras.testing_infra import test_utils\n from keras.utils import dataset_utils\n \n+# pylint: disable=g-classes-have-attributes\n+\n \n @test_utils.run_v2_only\n class SplitDatasetTest(tf.test.TestCase):\n\n@@ -14,8 +14,6 @@\n # ==============================================================================\n \"\"\"Python utilities required by Keras.\"\"\"\n \n-import tensorflow.compat.v2 as tf\n-\n import binascii\n import codecs\n import importlib\n@@ -30,11 +28,12 @@ import warnings\n import weakref\n \n import numpy as np\n+import tensorflow.compat.v2 as tf\n+from tensorflow.python.util.tf_export import keras_export\n \n from keras.utils import io_utils\n from keras.utils import tf_contextlib\n from keras.utils import tf_inspect\n-from tensorflow.python.util.tf_export import keras_export\n \n _GLOBAL_CUSTOM_OBJECTS = {}\n _GLOBAL_CUSTOM_NAMES = {}\n\n@@ -15,15 +15,16 @@\n \"\"\"Tests for Keras generic Python utils.\"\"\"\n \n \n-from functools import partial\n import os\n import sys\n+from functools import partial\n+\n+import numpy as np\n+import tensorflow.compat.v2 as tf\n \n import keras\n from keras.utils import generic_utils\n from keras.utils import io_utils\n-import numpy as np\n-import tensorflow.compat.v2 as tf\n \n \n class SnakeCaseTest(tf.test.TestCase):\n\n@@ -14,14 +14,14 @@\n # ==============================================================================\n \"\"\"Keras image dataset loading utilities.\"\"\"\n \n-import tensorflow.compat.v2 as tf\n-\n-# pylint: disable=g-classes-have-attributes\n-\n import numpy as np\n+import tensorflow.compat.v2 as tf\n+from tensorflow.python.util.tf_export import keras_export\n+\n from keras.utils import dataset_utils\n from keras.utils import image_utils\n-from tensorflow.python.util.tf_export import keras_export\n+\n+# pylint: disable=g-classes-have-attributes\n \n \n ALLOWLIST_FORMATS = (\".bmp\", \".gif\", \".jpeg\", \".jpg\", \".png\")\n\n@@ -14,12 +14,12 @@\n # ==============================================================================\n \"\"\"Tests for image_dataset.\"\"\"\n \n-import tensorflow.compat.v2 as tf\n-\n import os\n import shutil\n \n import numpy as np\n+import tensorflow.compat.v2 as tf\n+\n from keras.testing_infra import test_combinations\n from keras.testing_infra import test_utils\n from keras.utils import image_dataset\n\n@@ -20,11 +20,12 @@ import io\n import pathlib\n import warnings\n \n-from keras import backend\n import numpy as np\n import tensorflow.compat.v2 as tf\n from tensorflow.python.util.tf_export import keras_export\n \n+from keras import backend\n+\n try:\n     from PIL import Image as pil_image\n except ImportError:\n\n@@ -18,12 +18,13 @@ import io\n import os\n import pathlib\n \n+import numpy as np\n+import tensorflow.compat.v2 as tf\n from absl.testing import parameterized\n+\n from keras.testing_infra import test_combinations\n from keras.testing_infra import test_utils\n from keras.utils import image_utils\n-import numpy as np\n-import tensorflow.compat.v2 as tf\n \n \n @test_utils.run_v2_only\n\n@@ -20,10 +20,9 @@ import sys\n import threading\n \n from absl import logging\n-from keras.utils import keras_logging\n-\n from tensorflow.python.util.tf_export import keras_export\n \n+from keras.utils import keras_logging\n \n INTERACTIVE_LOGGING = threading.local()\n INTERACTIVE_LOGGING.enable = keras_logging.INTERACTIVE_LOGGING_DEFAULT\n\n@@ -15,12 +15,13 @@\n \"\"\"Tests for io_utils.\"\"\"\n \n import builtins\n-from pathlib import Path\n import sys\n+from pathlib import Path\n+\n+import tensorflow.compat.v2 as tf\n \n from keras.testing_infra import test_combinations\n from keras.utils import io_utils\n-import tensorflow.compat.v2 as tf\n \n \n class TestIOUtils(test_combinations.TestCase):\n\n@@ -14,11 +14,11 @@\n # ==============================================================================\n \"\"\"Tests for kernelized_utils.py.\"\"\"\n \n-import tensorflow.compat.v2 as tf\n-\n import functools\n \n+import tensorflow.compat.v2 as tf\n from absl.testing import parameterized\n+\n from keras.utils import kernelized_utils\n \n \n\n@@ -14,11 +14,11 @@\n # ==============================================================================\n \"\"\"Test related utilities for KPL + tf.distribute.\"\"\"\n \n-import tensorflow.compat.v2 as tf\n-\n import random\n import tempfile\n \n+import tensorflow.compat.v2 as tf\n+\n import keras\n from keras.layers.preprocessing import string_lookup\n \n\n@@ -19,13 +19,13 @@ import copy\n import functools\n import weakref\n \n-from keras.utils import io_utils\n-from keras.utils import tf_inspect\n import numpy as np\n-\n import tensorflow.compat.v2 as tf\n from tensorflow.python.util.tf_export import keras_export\n \n+from keras.utils import io_utils\n+from keras.utils import tf_inspect\n+\n \n @keras_export(\"keras.utils.get_source_inputs\")\n def get_source_inputs(tensor, layer=None, node_index=None):\n\n@@ -14,9 +14,6 @@\n # ==============================================================================\n \"\"\"Tests for layer_utils.\"\"\"\n \n-import keras\n-import tensorflow.compat.v2 as tf\n-\n import collections\n import contextlib\n import multiprocessing.dummy\n@@ -28,10 +25,12 @@ import time\n import timeit\n \n import numpy as np\n+import tensorflow.compat.v2 as tf\n+\n+import keras\n from keras.utils import io_utils\n from keras.utils import layer_utils\n \n-\n _PICKLEABLE_CALL_COUNT = collections.Counter()\n \n \n\n@@ -16,10 +16,11 @@\n \"\"\"Utilities related to loss functions.\"\"\"\n \n import tensorflow.compat.v2 as tf\n+from tensorflow.python.util.tf_export import keras_export\n+\n from keras import backend\n from keras.engine import keras_tensor\n from keras.utils import tf_utils\n-from tensorflow.python.util.tf_export import keras_export\n \n \n @keras_export(\"keras.losses.Reduction\", v1=[])\n\n@@ -14,9 +14,10 @@\n # ==============================================================================\n \"\"\"Tests for losses_utils.\"\"\"\n \n+import tensorflow.compat.v2 as tf\n+\n from keras.testing_infra import test_combinations\n from keras.utils import losses_utils\n-import tensorflow.compat.v2 as tf\n \n \n @test_combinations.generate(test_combinations.combine(mode=[\"graph\", \"eager\"]))\n\n@@ -15,15 +15,17 @@\n # pylint: disable=protected-access\n \"\"\"Utils related to keras metrics.\"\"\"\n \n-from enum import Enum\n import functools\n import weakref\n+from enum import Enum\n+\n+import numpy as np\n+import tensorflow.compat.v2 as tf\n+\n from keras import backend\n from keras.utils import losses_utils\n from keras.utils import tf_utils\n from keras.utils.generic_utils import to_list\n-import numpy as np\n-import tensorflow.compat.v2 as tf\n \n NEG_INF = -1e10\n \n\n@@ -14,15 +14,14 @@\n # ==============================================================================\n \"\"\"Tests for metrics_utils.\"\"\"\n \n+import numpy as np\n+import tensorflow.compat.v2 as tf\n from absl.testing import parameterized\n \n from keras import backend\n from keras.testing_infra import test_combinations\n from keras.utils import metrics_utils\n \n-import numpy as np\n-import tensorflow.compat.v2 as tf\n-\n \n @test_combinations.generate(test_combinations.combine(mode=[\"graph\", \"eager\"]))\n class RaggedSizeOpTest(tf.test.TestCase, parameterized.TestCase):\n\n@@ -14,9 +14,8 @@\n # ==============================================================================\n \"\"\"Tests for np_utils.\"\"\"\n \n-import tensorflow.compat.v2 as tf\n-\n import numpy as np\n+import tensorflow.compat.v2 as tf\n \n from keras.utils import np_utils\n \n\n@@ -14,12 +14,12 @@\n # ==============================================================================\n \"\"\"Keras text dataset generation utilities.\"\"\"\n \n-import tensorflow.compat.v2 as tf\n-\n import numpy as np\n-from keras.utils import dataset_utils\n+import tensorflow.compat.v2 as tf\n from tensorflow.python.util.tf_export import keras_export\n \n+from keras.utils import dataset_utils\n+\n \n @keras_export(\n     \"keras.utils.text_dataset_from_directory\",\n\n@@ -14,12 +14,13 @@\n # ==============================================================================\n \"\"\"Tests for text_dataset.\"\"\"\n \n-import tensorflow.compat.v2 as tf\n-\n import os\n import random\n import shutil\n import string\n+\n+import tensorflow.compat.v2 as tf\n+\n from keras.testing_infra import test_combinations\n from keras.testing_infra import test_utils\n from keras.utils import text_dataset\n\n@@ -14,10 +14,10 @@\n # ==============================================================================\n \"\"\"TFDecorator-aware replacements for the contextlib module.\"\"\"\n \n-import tensorflow.compat.v2 as tf\n-\n import contextlib as _contextlib\n \n+import tensorflow.compat.v2 as tf\n+\n \n def contextmanager(target):\n     \"\"\"A tf_decorator-aware wrapper for `contextlib.contextmanager`.\n\n@@ -13,13 +13,13 @@\n # limitations under the License.\n # ==============================================================================\n \"\"\"TFDecorator-aware replacements for the inspect module.\"\"\"\n-# pylint: disable=g-classes-have-attributes\n-import tensorflow.compat.v2 as tf\n-\n import collections\n import functools\n import inspect as _inspect\n \n+# pylint: disable=g-classes-have-attributes\n+import tensorflow.compat.v2 as tf\n+\n ArgSpec = _inspect.ArgSpec\n \n \n\n@@ -18,18 +18,16 @@ import collections\n import copy\n import random\n \n+import numpy as np\n+import tensorflow.compat.v2 as tf\n+from tensorflow.python.framework import ops\n+from tensorflow.python.util.tf_export import keras_export\n+\n from keras import backend\n from keras.engine import keras_tensor\n from keras.utils import object_identity\n from keras.utils import tf_contextlib\n \n-import numpy as np\n-\n-import tensorflow.compat.v2 as tf\n-\n-from tensorflow.python.framework import ops\n-from tensorflow.python.util.tf_export import keras_export\n-\n \n @keras_export(\"keras.utils.set_random_seed\", v1=[])\n def set_random_seed(seed):\n\n@@ -14,12 +14,13 @@\n # ==============================================================================\n \"\"\"Tests for Keras TF utils.\"\"\"\n \n+import numpy as np\n+import tensorflow.compat.v2 as tf\n from absl.testing import parameterized\n+\n import keras\n from keras.testing_infra import test_combinations\n from keras.utils import tf_utils\n-import numpy as np\n-import tensorflow.compat.v2 as tf\n \n try:\n     import attr  # pylint:disable=g-import-not-at-top\n\n@@ -14,13 +14,12 @@\n # ==============================================================================\n \"\"\"Keras timeseries dataset utilities.\"\"\"\n \n+import numpy as np\n import tensorflow.compat.v2 as tf\n+from tensorflow.python.util.tf_export import keras_export\n \n # pylint: disable=g-classes-have-attributes\n \n-import numpy as np\n-from tensorflow.python.util.tf_export import keras_export\n-\n \n @keras_export(\n     \"keras.utils.timeseries_dataset_from_array\",\n\n@@ -14,9 +14,9 @@\n # ==============================================================================\n \"\"\"Tests for timeseries_dataset.\"\"\"\n \n+import numpy as np\n import tensorflow.compat.v2 as tf\n \n-import numpy as np\n from keras.testing_infra import test_utils\n from keras.utils import timeseries_dataset\n \n\n@@ -19,8 +19,8 @@ import os\n import sys\n import traceback\n import types\n-import tensorflow.compat.v2 as tf\n \n+import tensorflow.compat.v2 as tf\n \n _EXCLUDED_PATHS = (\n     os.path.abspath(os.path.join(__file__, \"..\", \"..\")),\n\n@@ -14,9 +14,10 @@\n # ==============================================================================\n \"\"\"Tests for traceback_utils.\"\"\"\n \n+import tensorflow.compat.v2 as tf\n+\n from keras import layers\n from keras.utils import traceback_utils\n-import tensorflow.compat.v2 as tf\n \n \n class TracebackUtilsTest(tf.test.TestCase):\n\n@@ -16,6 +16,7 @@\n \"\"\"Utilities for Keras classes with v1 and v2 versions.\"\"\"\n \n import tensorflow.compat.v2 as tf\n+\n from keras.utils.generic_utils import LazyLoader\n \n # TODO(b/134426265): Switch back to single-quotes once the issue\n\n@@ -16,14 +16,15 @@\n \n import abc\n \n+import numpy as np\n+import tensorflow.compat.v2 as tf\n+\n import keras\n from keras.engine import base_layer\n from keras.engine import base_layer_v1\n from keras.engine import training\n from keras.engine import training_v1\n from keras.testing_infra import test_combinations\n-import numpy as np\n-import tensorflow.compat.v2 as tf\n \n \n @test_combinations.run_all_keras_modes\n\n@@ -16,15 +16,14 @@\n # pylint: disable=g-import-not-at-top\n \"\"\"Utilities related to model visualization.\"\"\"\n \n-import tensorflow.compat.v2 as tf\n-\n import os\n-import sys\n import re\n+import sys\n \n-from keras.utils import io_utils\n+import tensorflow.compat.v2 as tf\n from tensorflow.python.util.tf_export import keras_export\n \n+from keras.utils import io_utils\n \n try:\n     # pydot-ng is a fork of pydot that is better maintained.\n@@ -156,9 +155,9 @@ def model_to_dot(\n             \"the model on a batch of data.\"\n         )\n \n-    from keras.layers import Wrapper\n-    from keras.engine import sequential\n     from keras.engine import functional\n+    from keras.engine import sequential\n+    from keras.layers import Wrapper\n \n     if not check_pydot():\n         raise ImportError(\n\n@@ -15,7 +15,6 @@\n \"\"\"Tests for Keras Vis utils.\"\"\"\n \n import tensorflow.compat.v2 as tf\n-\n from absl.testing import parameterized\n \n import keras\n\n@@ -20,13 +20,13 @@ import types\n import warnings\n \n import numpy as np\n+from tensorflow.python.util.tf_export import keras_export\n+from tensorflow.tools.docs import doc_controls\n \n from keras import losses\n from keras.models import Sequential\n from keras.utils.generic_utils import has_arg\n from keras.utils.np_utils import to_categorical\n-from tensorflow.python.util.tf_export import keras_export\n-from tensorflow.tools.docs import doc_controls\n \n \n class BaseWrapper:\n\n@@ -16,9 +16,8 @@\n \n import warnings\n \n-import tensorflow.compat.v2 as tf\n-\n import numpy as np\n+import tensorflow.compat.v2 as tf\n \n import keras\n from keras.testing_infra import test_utils\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
