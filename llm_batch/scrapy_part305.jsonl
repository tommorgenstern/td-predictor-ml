{"custom_id": "scrapy#62ce842afc8ef829ffd6f164712a8a9413eb9e1d", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 47 | Lines Deleted: 8 | Files Changed: 1 | Hunks: 12 | Methods Changed: 8 | Complexity Δ (Sum/Max): 3/3 | Churn Δ: 55 | Churn Cumulative: 181 | Contributors (this commit): 1 | Commits (past 90d): 3 | Contributors (cumulative): 1 | DMM Complexity: 1.0\n\nDIFF:\n@@ -1,11 +1,11 @@\n-from typing import Dict, Tuple, Optional\n+from collections import deque\n+from typing import Deque, Dict, List, Tuple, Optional\n \n from twisted.internet import defer\n from twisted.internet._sslverify import _setAcceptableProtocols, ClientTLSOptions\n from twisted.internet.base import ReactorBase\n from twisted.internet.defer import Deferred\n-from twisted.internet.endpoints import SSL4ClientEndpoint\n-from twisted.python.failure import Failure\n+from twisted.internet.endpoints import HostnameEndpoint\n from twisted.web.client import URI, BrowserLikePolicyForHTTPS, _StandardEndpointFactory\n from twisted.web.iweb import IPolicyForHTTPS\n from zope.interface import implementer\n@@ -20,31 +20,70 @@ class H2ConnectionPool:\n     def __init__(self, reactor: ReactorBase, settings: Settings) -> None:\n         self._reactor = reactor\n         self.settings = settings\n+\n+        # Store a dictionary which is used to get the respective\n+        # H2ClientProtocolInstance using the  key as Tuple(scheme, hostname, port)\n         self._connections: Dict[Tuple, H2ClientProtocol] = {}\n \n-    def get_connection(self, uri: URI, endpoint: SSL4ClientEndpoint) -> Deferred:\n+        # Save all requests that arrive before the connection is established\n+        self._pending_requests: Dict[Tuple, Deque[Deferred]] = {}\n+\n+    def get_connection(self, uri: URI, endpoint: HostnameEndpoint) -> Deferred:\n         key = (uri.scheme, uri.host, uri.port)\n+        if key in self._pending_requests:\n+            # Received a request while connecting to remote\n+            # Create a deferred which will fire with the H2ClientProtocol\n+            # instance\n+            d = Deferred()\n+            self._pending_requests[key].append(d)\n+            return d\n+\n+        # Check if we already have a connection to the remote\n         conn = self._connections.get(key, None)\n         if conn:\n+            # Return this connection instance wrapped inside a deferred\n             return defer.succeed(conn)\n+\n+        # No connection is established for the given URI\n         return self._new_connection(key, uri, endpoint)\n \n-    def _new_connection(self, key: Tuple, uri: URI, endpoint: SSL4ClientEndpoint) -> Deferred:\n+    def _new_connection(self, key: Tuple, uri: URI, endpoint: HostnameEndpoint) -> Deferred:\n+        self._pending_requests[key] = deque()\n+\n         conn_lost_deferred = Deferred()\n         conn_lost_deferred.addCallback(self._remove_connection, key)\n \n         factory = H2ClientFactory(uri, self.settings, conn_lost_deferred)\n-        d = endpoint.connect(factory)\n-        d.addCallback(self.put_connection, key)\n+        conn_d = endpoint.connect(factory)\n+        conn_d.addCallback(self.put_connection, key)\n+\n+        d = Deferred()\n+        self._pending_requests[key].append(d)\n         return d\n \n     def put_connection(self, conn: H2ClientProtocol, key: Tuple) -> H2ClientProtocol:\n         self._connections[key] = conn\n+\n+        # Now as we have established a proper HTTP/2 connection\n+        # we fire all the deferred's with the connection instance\n+        pending_requests = self._pending_requests.pop(key)\n+        while pending_requests:\n+            d = pending_requests.popleft()\n+            d.callback(conn)\n+\n+        del pending_requests\n+\n         return conn\n \n-    def _remove_connection(self, reason: Failure, key: Tuple) -> None:\n+    def _remove_connection(self, errors: List[BaseException], key: Tuple) -> None:\n         self._connections.pop(key)\n \n+        # Call the errback of all the pending requests for this connection\n+        pending_requests = self._pending_requests.pop(key, None)\n+        while pending_requests:\n+            d = pending_requests.popleft()\n+            d.errback(errors)\n+\n \n @implementer(IPolicyForHTTPS)\n class H2WrappedContextFactory:\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "scrapy#52658539370c442e63102a3208781335953cdf53", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 146 | Lines Deleted: 65 | Files Changed: 2 | Hunks: 50 | Methods Changed: 27 | Complexity Δ (Sum/Max): 2/3 | Churn Δ: 211 | Churn Cumulative: 1174 | Contributors (this commit): 16 | Commits (past 90d): 6 | Contributors (cumulative): 23 | DMM Complexity: 1.0\n\nDIFF:\n@@ -243,12 +243,8 @@ class CsvItemExporter(BaseItemExporter):\n     def _write_headers_and_set_fields_to_export(self, item):\n         if self.include_headers_line:\n             if not self.fields_to_export:\n-                if isinstance(item, dict):\n-                    # for dicts try using fields of the first item\n-                    self.fields_to_export = list(item.keys())\n-                else:\n-                    # use fields declared in Item\n-                    self.fields_to_export = list(item.fields.keys())\n+                # use declared field names, or keys if the item is a dict\n+                self.fields_to_export = ItemAdapter(item).field_names()\n             row = list(self._build_row(self.fields_to_export))\n             self.csv_writer.writerow(row)\n \n\n@@ -8,6 +8,7 @@ from io import BytesIO\n from datetime import datetime\n \n import lxml.etree\n+from itemadapter import ItemAdapter\n \n from scrapy.item import Item, Field\n from scrapy.utils.python import to_unicode\n@@ -23,10 +24,37 @@ class TestItem(Item):\n     age = Field()\n \n \n+def custom_serializer(value):\n+    return str(int(value) + 2)\n+\n+\n+class CustomFieldItem(Item):\n+    name = Field()\n+    age = Field(serializer=custom_serializer)\n+\n+\n+try:\n+    from dataclasses import make_dataclass, field\n+except ImportError:\n+    TestDataClass = None\n+    CustomFieldDataclass = None\n+else:\n+    TestDataClass = make_dataclass(\"TestDataClass\", [(\"name\", str), (\"age\", int)])\n+    CustomFieldDataclass = make_dataclass(\n+        \"CustomFieldDataclass\",\n+        [(\"name\", str), (\"age\", int, field(metadata={\"serializer\": custom_serializer}))]\n+    )\n+\n+\n class BaseItemExporterTest(unittest.TestCase):\n \n+    item_class = TestItem\n+    custom_field_item_class = CustomFieldItem\n+\n     def setUp(self):\n-        self.i = TestItem(name=u'John\\xa3', age=u'22')\n+        if self.item_class is None:\n+            raise unittest.SkipTest(\"item class is None\")\n+        self.i = self.item_class(name=u'John\\xa3', age=u'22')\n         self.output = BytesIO()\n         self.ie = self._get_exporter()\n \n@@ -39,7 +67,7 @@ class BaseItemExporterTest(unittest.TestCase):\n     def _assert_expected_item(self, exported_dict):\n         for k, v in exported_dict.items():\n             exported_dict[k] = to_unicode(v)\n-        self.assertEqual(self.i, exported_dict)\n+        self.assertEqual(self.i, self.item_class(**exported_dict))\n \n     def _get_nonstring_types_item(self):\n         return {\n@@ -63,13 +91,14 @@ class BaseItemExporterTest(unittest.TestCase):\n         self.assertItemExportWorks(self.i)\n \n     def test_export_dict_item(self):\n-        self.assertItemExportWorks(dict(self.i))\n+        self.assertItemExportWorks(ItemAdapter(self.i).asdict())\n \n     def test_serialize_field(self):\n-        res = self.ie.serialize_field(self.i.fields['name'], 'name', self.i['name'])\n+        a = ItemAdapter(self.i)\n+        res = self.ie.serialize_field(a.get_field_meta('name'), 'name', a['name'])\n         self.assertEqual(res, u'John\\xa3')\n \n-        res = self.ie.serialize_field(self.i.fields['age'], 'age', self.i['age'])\n+        res = self.ie.serialize_field(a.get_field_meta('age'), 'age', a['age'])\n         self.assertEqual(res, u'22')\n \n     def test_fields_to_export(self):\n@@ -82,18 +111,16 @@ class BaseItemExporterTest(unittest.TestCase):\n         self.assertEqual(name, u'John\\xa3')\n \n     def test_field_custom_serializer(self):\n-        def custom_serializer(value):\n-            return str(int(value) + 2)\n-\n-        class CustomFieldItem(Item):\n-            name = Field()\n-            age = Field(serializer=custom_serializer)\n-\n-        i = CustomFieldItem(name=u'John\\xa3', age=u'22')\n-\n+        i = self.custom_field_item_class(name=u'John\\xa3', age=u'22')\n+        a = ItemAdapter(i)\n         ie = self._get_exporter()\n-        self.assertEqual(ie.serialize_field(i.fields['name'], 'name', i['name']), u'John\\xa3')\n-        self.assertEqual(ie.serialize_field(i.fields['age'], 'age', i['age']), '24')\n+        self.assertEqual(ie.serialize_field(a.get_field_meta('name'), 'name', a['name']), u'John\\xa3')\n+        self.assertEqual(ie.serialize_field(a.get_field_meta('age'), 'age', a['age']), '24')\n+\n+\n+class BaseItemExporterDataclassTest(BaseItemExporterTest):\n+    item_class = TestDataClass\n+    custom_field_item_class = CustomFieldDataclass\n \n \n class PythonItemExporterTest(BaseItemExporterTest):\n@@ -105,9 +132,9 @@ class PythonItemExporterTest(BaseItemExporterTest):\n             PythonItemExporter(invalid_option='something')\n \n     def test_nested_item(self):\n-        i1 = TestItem(name=u'Joseph', age='22')\n+        i1 = self.item_class(name=u'Joseph', age='22')\n         i2 = dict(name=u'Maria', age=i1)\n-        i3 = TestItem(name=u'Jesus', age=i2)\n+        i3 = self.item_class(name=u'Jesus', age=i2)\n         ie = self._get_exporter()\n         exported = ie.export_item(i3)\n         self.assertEqual(type(exported), dict)\n@@ -119,9 +146,9 @@ class PythonItemExporterTest(BaseItemExporterTest):\n         self.assertEqual(type(exported['age']['age']), dict)\n \n     def test_export_list(self):\n-        i1 = TestItem(name=u'Joseph', age='22')\n-        i2 = TestItem(name=u'Maria', age=[i1])\n-        i3 = TestItem(name=u'Jesus', age=[i2])\n+        i1 = self.item_class(name=u'Joseph', age='22')\n+        i2 = self.item_class(name=u'Maria', age=[i1])\n+        i3 = self.item_class(name=u'Jesus', age=[i2])\n         ie = self._get_exporter()\n         exported = ie.export_item(i3)\n         self.assertEqual(\n@@ -132,9 +159,9 @@ class PythonItemExporterTest(BaseItemExporterTest):\n         self.assertEqual(type(exported['age'][0]['age'][0]), dict)\n \n     def test_export_item_dict_list(self):\n-        i1 = TestItem(name=u'Joseph', age='22')\n+        i1 = self.item_class(name=u'Joseph', age='22')\n         i2 = dict(name=u'Maria', age=[i1])\n-        i3 = TestItem(name=u'Jesus', age=[i2])\n+        i3 = self.item_class(name=u'Jesus', age=[i2])\n         ie = self._get_exporter()\n         exported = ie.export_item(i3)\n         self.assertEqual(\n@@ -146,7 +173,7 @@ class PythonItemExporterTest(BaseItemExporterTest):\n \n     def test_export_binary(self):\n         exporter = PythonItemExporter(binary=True)\n-        value = TestItem(name=u'John\\xa3', age=u'22')\n+        value = self.item_class(name=u'John\\xa3', age=u'22')\n         expected = {b'name': b'John\\xc2\\xa3', b'age': b'22'}\n         self.assertEqual(expected, exporter.export_item(value))\n \n@@ -157,6 +184,11 @@ class PythonItemExporterTest(BaseItemExporterTest):\n         self.assertEqual(exported, item)\n \n \n+class PythonItemExporterDataclassTest(PythonItemExporterTest):\n+    item_class = TestDataClass\n+    custom_field_item_class = CustomFieldDataclass\n+\n+\n class PprintItemExporterTest(BaseItemExporterTest):\n \n     def _get_exporter(self, **kwargs):\n@@ -166,6 +198,11 @@ class PprintItemExporterTest(BaseItemExporterTest):\n         self._assert_expected_item(eval(self.output.getvalue()))\n \n \n+class PprintItemExporterDataclassTest(PprintItemExporterTest):\n+    item_class = TestDataClass\n+    custom_field_item_class = CustomFieldDataclass\n+\n+\n class PickleItemExporterTest(BaseItemExporterTest):\n \n     def _get_exporter(self, **kwargs):\n@@ -175,8 +212,8 @@ class PickleItemExporterTest(BaseItemExporterTest):\n         self._assert_expected_item(pickle.loads(self.output.getvalue()))\n \n     def test_export_multiple_items(self):\n-        i1 = TestItem(name='hello', age='world')\n-        i2 = TestItem(name='bye', age='world')\n+        i1 = self.item_class(name='hello', age='world')\n+        i2 = self.item_class(name='bye', age='world')\n         f = BytesIO()\n         ie = PickleItemExporter(f)\n         ie.start_exporting()\n@@ -184,8 +221,8 @@ class PickleItemExporterTest(BaseItemExporterTest):\n         ie.export_item(i2)\n         ie.finish_exporting()\n         f.seek(0)\n-        self.assertEqual(pickle.load(f), i1)\n-        self.assertEqual(pickle.load(f), i2)\n+        self.assertEqual(self.item_class(**pickle.load(f)), i1)\n+        self.assertEqual(self.item_class(**pickle.load(f)), i2)\n \n     def test_nonstring_types_item(self):\n         item = self._get_nonstring_types_item()\n@@ -197,6 +234,11 @@ class PickleItemExporterTest(BaseItemExporterTest):\n         self.assertEqual(pickle.loads(fp.getvalue()), item)\n \n \n+class PickleItemExporterDataclassTest(PickleItemExporterTest):\n+    item_class = TestDataClass\n+    custom_field_item_class = CustomFieldDataclass\n+\n+\n class MarshalItemExporterTest(BaseItemExporterTest):\n \n     def _get_exporter(self, **kwargs):\n@@ -219,6 +261,11 @@ class MarshalItemExporterTest(BaseItemExporterTest):\n         self.assertEqual(marshal.load(fp), item)\n \n \n+class MarshalItemExporterDataclassTest(MarshalItemExporterTest):\n+    item_class = TestDataClass\n+    custom_field_item_class = CustomFieldDataclass\n+\n+\n class CsvItemExporterTest(BaseItemExporterTest):\n     def _get_exporter(self, **kwargs):\n         return CsvItemExporter(self.output, **kwargs)\n@@ -245,18 +292,18 @@ class CsvItemExporterTest(BaseItemExporterTest):\n     def test_header_export_all(self):\n         self.assertExportResult(\n             item=self.i,\n-            fields_to_export=self.i.fields.keys(),\n+            fields_to_export=ItemAdapter(self.i).field_names(),\n             expected=b'age,name\\r\\n22,John\\xc2\\xa3\\r\\n',\n         )\n \n     def test_header_export_all_dict(self):\n         self.assertExportResult(\n-            item=dict(self.i),\n+            item=ItemAdapter(self.i).asdict(),\n             expected=b'age,name\\r\\n22,John\\xc2\\xa3\\r\\n',\n         )\n \n     def test_header_export_single_field(self):\n-        for item in [self.i, dict(self.i)]:\n+        for item in [self.i, ItemAdapter(self.i).asdict()]:\n             self.assertExportResult(\n                 item=item,\n                 fields_to_export=['age'],\n@@ -264,7 +311,7 @@ class CsvItemExporterTest(BaseItemExporterTest):\n             )\n \n     def test_header_export_two_items(self):\n-        for item in [self.i, dict(self.i)]:\n+        for item in [self.i, ItemAdapter(self.i).asdict()]:\n             output = BytesIO()\n             ie = CsvItemExporter(output)\n             ie.start_exporting()\n@@ -275,7 +322,7 @@ class CsvItemExporterTest(BaseItemExporterTest):\n                                 b'age,name\\r\\n22,John\\xc2\\xa3\\r\\n22,John\\xc2\\xa3\\r\\n')\n \n     def test_header_no_header_line(self):\n-        for item in [self.i, dict(self.i)]:\n+        for item in [self.i, ItemAdapter(self.i).asdict()]:\n             self.assertExportResult(\n                 item=item,\n                 include_headers_line=False,\n@@ -309,6 +356,11 @@ class CsvItemExporterTest(BaseItemExporterTest):\n         )\n \n \n+class CsvItemExporterDataclassTest(CsvItemExporterTest):\n+    item_class = TestDataClass\n+    custom_field_item_class = CustomFieldDataclass\n+\n+\n class XmlItemExporterTest(BaseItemExporterTest):\n \n     def _get_exporter(self, **kwargs):\n@@ -318,8 +370,7 @@ class XmlItemExporterTest(BaseItemExporterTest):\n         def xmltuple(elem):\n             children = list(elem.iterchildren())\n             if children:\n-                return [(child.tag, sorted(xmltuple(child)))\n-                        for child in children]\n+                return [(child.tag, sorted(xmltuple(child))) for child in children]\n             else:\n                 return [(elem.tag, [(elem.text, ())])]\n \n@@ -345,17 +396,21 @@ class XmlItemExporterTest(BaseItemExporterTest):\n \n     def test_multivalued_fields(self):\n         self.assertExportResult(\n-            TestItem(name=[u'John\\xa3', u'Doe']),\n-            (\n-                b'<?xml version=\"1.0\" encoding=\"utf-8\"?>\\n'\n-                b'<items><item><name><value>John\\xc2\\xa3</value><value>Doe</value></name></item></items>'\n-            )\n+            self.item_class(name=[u'John\\xa3', u'Doe'], age=[1, 2, 3]),\n+            b\"\"\"<?xml version=\"1.0\" encoding=\"utf-8\"?>\\n\n+            <items>\n+                <item>\n+                    <name><value>John\\xc2\\xa3</value><value>Doe</value></name>\n+                    <age><value>1</value><value>2</value><value>3</value></age>\n+                </item>\n+            </items>\n+            \"\"\"\n         )\n \n     def test_nested_item(self):\n-        i1 = TestItem(name=u'foo\\xa3hoo', age='22')\n+        i1 = dict(name=u'foo\\xa3hoo', age='22')\n         i2 = dict(name=u'bar', age=i1)\n-        i3 = TestItem(name=u'buz', age=i2)\n+        i3 = self.item_class(name=u'buz', age=i2)\n \n         self.assertExportResult(\n             i3,\n@@ -376,9 +431,9 @@ class XmlItemExporterTest(BaseItemExporterTest):\n         )\n \n     def test_nested_list_item(self):\n-        i1 = TestItem(name=u'foo')\n+        i1 = dict(name=u'foo')\n         i2 = dict(name=u'bar', v2={\"egg\": [\"spam\"]})\n-        i3 = TestItem(name=u'buz', age=[i1, i2])\n+        i3 = self.item_class(name=u'buz', age=[i1, i2])\n \n         self.assertExportResult(\n             i3,\n@@ -412,6 +467,12 @@ class XmlItemExporterTest(BaseItemExporterTest):\n         )\n \n \n+class XmlItemExporterDataclassTest(XmlItemExporterTest):\n+\n+    item_class = TestDataClass\n+    custom_field_item_class = CustomFieldDataclass\n+\n+\n class JsonLinesItemExporterTest(BaseItemExporterTest):\n \n     _expected_nested = {'name': u'Jesus', 'age': {'name': 'Maria', 'age': {'name': 'Joseph', 'age': '22'}}}\n@@ -421,12 +482,12 @@ class JsonLinesItemExporterTest(BaseItemExporterTest):\n \n     def _check_output(self):\n         exported = json.loads(to_unicode(self.output.getvalue().strip()))\n-        self.assertEqual(exported, dict(self.i))\n+        self.assertEqual(exported, ItemAdapter(self.i).asdict())\n \n     def test_nested_item(self):\n-        i1 = TestItem(name=u'Joseph', age='22')\n+        i1 = self.item_class(name=u'Joseph', age='22')\n         i2 = dict(name=u'Maria', age=i1)\n-        i3 = TestItem(name=u'Jesus', age=i2)\n+        i3 = self.item_class(name=u'Jesus', age=i2)\n         self.ie.start_exporting()\n         self.ie.export_item(i3)\n         self.ie.finish_exporting()\n@@ -449,6 +510,12 @@ class JsonLinesItemExporterTest(BaseItemExporterTest):\n         self.assertEqual(exported, item)\n \n \n+class JsonLinesItemExporterDataclassTest(JsonLinesItemExporterTest):\n+\n+    item_class = TestDataClass\n+    custom_field_item_class = CustomFieldDataclass\n+\n+\n class JsonItemExporterTest(JsonLinesItemExporterTest):\n \n     _expected_nested = [JsonLinesItemExporterTest._expected_nested]\n@@ -458,7 +525,7 @@ class JsonItemExporterTest(JsonLinesItemExporterTest):\n \n     def _check_output(self):\n         exported = json.loads(to_unicode(self.output.getvalue().strip()))\n-        self.assertEqual(exported, [dict(self.i)])\n+        self.assertEqual(exported, [ItemAdapter(self.i).asdict()])\n \n     def assertTwoItemsExported(self, item):\n         self.ie.start_exporting()\n@@ -466,28 +533,28 @@ class JsonItemExporterTest(JsonLinesItemExporterTest):\n         self.ie.export_item(item)\n         self.ie.finish_exporting()\n         exported = json.loads(to_unicode(self.output.getvalue()))\n-        self.assertEqual(exported, [dict(item), dict(item)])\n+        self.assertEqual(exported, [ItemAdapter(item).asdict(), ItemAdapter(item).asdict()])\n \n     def test_two_items(self):\n         self.assertTwoItemsExported(self.i)\n \n     def test_two_dict_items(self):\n-        self.assertTwoItemsExported(dict(self.i))\n+        self.assertTwoItemsExported(ItemAdapter(self.i).asdict())\n \n     def test_nested_item(self):\n-        i1 = TestItem(name=u'Joseph\\xa3', age='22')\n-        i2 = TestItem(name=u'Maria', age=i1)\n-        i3 = TestItem(name=u'Jesus', age=i2)\n+        i1 = self.item_class(name=u'Joseph\\xa3', age='22')\n+        i2 = self.item_class(name=u'Maria', age=i1)\n+        i3 = self.item_class(name=u'Jesus', age=i2)\n         self.ie.start_exporting()\n         self.ie.export_item(i3)\n         self.ie.finish_exporting()\n         exported = json.loads(to_unicode(self.output.getvalue()))\n-        expected = {'name': u'Jesus', 'age': {'name': 'Maria', 'age': dict(i1)}}\n+        expected = {'name': u'Jesus', 'age': {'name': 'Maria', 'age': ItemAdapter(i1).asdict()}}\n         self.assertEqual(exported, [expected])\n \n     def test_nested_dict_item(self):\n         i1 = dict(name=u'Joseph\\xa3', age='22')\n-        i2 = TestItem(name=u'Maria', age=i1)\n+        i2 = self.item_class(name=u'Maria', age=i1)\n         i3 = dict(name=u'Jesus', age=i2)\n         self.ie.start_exporting()\n         self.ie.export_item(i3)\n@@ -506,7 +573,19 @@ class JsonItemExporterTest(JsonLinesItemExporterTest):\n         self.assertEqual(exported, [item])\n \n \n-class CustomItemExporterTest(unittest.TestCase):\n+class JsonItemExporterDataclassTest(JsonItemExporterTest):\n+\n+    item_class = TestDataClass\n+    custom_field_item_class = CustomFieldDataclass\n+\n+\n+class CustomExporterItemTest(unittest.TestCase):\n+\n+    item_class = TestItem\n+\n+    def setUp(self):\n+        if self.item_class is None:\n+            raise unittest.SkipTest(\"item class is None\")\n \n     def test_exporter_custom_serializer(self):\n         class CustomItemExporter(BaseItemExporter):\n@@ -516,16 +595,22 @@ class CustomItemExporterTest(unittest.TestCase):\n                 else:\n                     return super(CustomItemExporter, self).serialize_field(field, name, value)\n \n-        i = TestItem(name=u'John', age='22')\n+        i = self.item_class(name=u'John', age='22')\n+        a = ItemAdapter(i)\n         ie = CustomItemExporter()\n \n-        self.assertEqual(ie.serialize_field(i.fields['name'], 'name', i['name']), 'John')\n-        self.assertEqual(ie.serialize_field(i.fields['age'], 'age', i['age']), '23')\n+        self.assertEqual(ie.serialize_field(a.get_field_meta('name'), 'name', a['name']), 'John')\n+        self.assertEqual(ie.serialize_field(a.get_field_meta('age'), 'age', a['age']), '23')\n \n         i2 = {'name': u'John', 'age': '22'}\n         self.assertEqual(ie.serialize_field({}, 'name', i2['name']), 'John')\n         self.assertEqual(ie.serialize_field({}, 'age', i2['age']), '23')\n \n \n+class CustomExporterDataclassTest(CustomExporterItemTest):\n+\n+    item_class = TestDataClass\n+\n+\n if __name__ == '__main__':\n     unittest.main()\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "scrapy#e7a58fe1573176415a9ca054428c53c1ca29931a", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 29 | Files Changed: 2 | Hunks: 3 | Methods Changed: 3 | Complexity Δ (Sum/Max): -6/0 | Churn Δ: 30 | Churn Cumulative: 1226 | Contributors (this commit): 25 | Commits (past 90d): 6 | Contributors (cumulative): 36 | DMM Complexity: 0.0\n\nDIFF:\n@@ -273,18 +273,6 @@ def equal_attributes(obj1, obj2, attributes):\n     return True\n \n \n-class WeakKeyCache:\n-\n-    def __init__(self, default_factory):\n-        self.default_factory = default_factory\n-        self._weakdict = weakref.WeakKeyDictionary()\n-\n-    def __getitem__(self, key):\n-        if key not in self._weakdict:\n-            self._weakdict[key] = self.default_factory(key)\n-        return self._weakdict[key]\n-\n-\n @deprecated\n def retry_on_eintr(function, *args, **kw):\n     \"\"\"Run a function and retry it while getting EINTR errors\"\"\"\n\n@@ -9,7 +9,7 @@ from warnings import catch_warnings\n \n from scrapy.utils.python import (\n     memoizemethod_noargs, binary_is_text, equal_attributes,\n-    WeakKeyCache, get_func_args, to_bytes, to_unicode,\n+    get_func_args, to_bytes, to_unicode,\n     without_none_values, MutableChain)\n \n \n@@ -155,22 +155,6 @@ class UtilsPythonTestCase(unittest.TestCase):\n         a.meta['z'] = 2\n         self.assertFalse(equal_attributes(a, b, [compare_z, 'x']))\n \n-    def test_weakkeycache(self):\n-        class _Weakme:\n-            pass\n-\n-        _values = count()\n-        wk = WeakKeyCache(lambda k: next(_values))\n-        k = _Weakme()\n-        v = wk[k]\n-        self.assertEqual(v, wk[k])\n-        self.assertNotEqual(v, wk[_Weakme()])\n-        self.assertEqual(v, wk[k])\n-        del k\n-        for _ in range(100):\n-            if wk._weakdict:\n-                gc.collect()\n-        self.assertFalse(len(wk._weakdict))\n \n     def test_get_func_args(self):\n         def f1(a, b, c):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "scrapy#92bec38591fccb523c2e643aef70a1f6cd7267ea", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 85 | Lines Deleted: 24 | Files Changed: 5 | Hunks: 28 | Methods Changed: 19 | Complexity Δ (Sum/Max): 12/6 | Churn Δ: 109 | Churn Cumulative: 4049 | Contributors (this commit): 2 | Commits (past 90d): 81 | Contributors (cumulative): 7 | DMM Complexity: 0.9523809523809523\n\nDIFF:\n@@ -3,6 +3,7 @@ from time import time\n from typing import Optional, Tuple\n from urllib.parse import urldefrag\n \n+from twisted.internet.defer import Deferred\n from twisted.internet.base import ReactorBase\n from twisted.internet.error import TimeoutError\n from twisted.web.client import URI\n@@ -23,9 +24,6 @@ class H2DownloadHandler:\n         from twisted.internet import reactor\n         self._pool = H2ConnectionPool(reactor, settings)\n         self._context_factory = load_context_factory_from_settings(settings, crawler)\n-        self._default_maxsize = settings.getint('DOWNLOAD_MAXSIZE')\n-        self._default_warnsize = settings.getint('DOWNLOAD_WARNSIZE')\n-        self._fail_on_dataloss = settings.getbool('DOWNLOAD_FAIL_ON_DATALOSS')\n \n     @classmethod\n     def from_crawler(cls, crawler):\n@@ -35,8 +33,6 @@ class H2DownloadHandler:\n         agent = ScrapyH2Agent(\n             context_factory=self._context_factory,\n             pool=self._pool,\n-            maxsize=getattr(spider, 'download_maxsize', self._default_maxsize),\n-            warnsize=getattr(spider, 'download_warnsize', self._default_warnsize),\n             crawler=self._crawler\n         )\n         return agent.download_request(request, spider)\n@@ -72,15 +68,12 @@ class ScrapyH2Agent:\n         self, context_factory,\n         connect_timeout=10,\n         bind_address: Optional[bytes] = None, pool: H2ConnectionPool = None,\n-        maxsize: int = 0, warnsize: int = 0,\n         crawler=None\n     ) -> None:\n         self._context_factory = context_factory\n         self._connect_timeout = connect_timeout\n         self._bind_address = bind_address\n         self._pool = pool\n-        self._maxsize = maxsize\n-        self._warnsize = warnsize\n         self._crawler = crawler\n \n     def _get_agent(self, request: Request, timeout: Optional[float]) -> H2Agent:\n@@ -121,7 +114,7 @@ class ScrapyH2Agent:\n             pool=self._pool\n         )\n \n-    def download_request(self, request: Request, spider: Spider):\n+    def download_request(self, request: Request, spider: Spider) -> Deferred:\n         from twisted.internet import reactor\n         timeout = request.meta.get('download_timeout') or self._connect_timeout\n         agent = self._get_agent(request, timeout)\n@@ -135,12 +128,12 @@ class ScrapyH2Agent:\n         return d\n \n     @staticmethod\n-    def _cb_latency(response: Response, request: Request, start_time: float):\n+    def _cb_latency(response: Response, request: Request, start_time: float) -> Response:\n         request.meta['download_latency'] = time() - start_time\n         return response\n \n     @staticmethod\n-    def _cb_timeout(response: Response, request: Request, timeout: float, timeout_cl):\n+    def _cb_timeout(response: Response, request: Request, timeout: float, timeout_cl) -> Response:\n         if timeout_cl.active():\n             timeout_cl.cancel()\n             return response\n\n@@ -93,7 +93,7 @@ class H2ConnectionPool:\n             Deferred that fires when all connections have been closed\n         \"\"\"\n         for conn in self._connections.values():\n-            conn.transport.loseConnection()\n+            conn.transport.abortConnection()\n \n \n @implementer(IPolicyForHTTPS)\n\n@@ -13,7 +13,7 @@ from h2.events import (\n     SettingsAcknowledged, StreamEnded, StreamReset, UnknownFrameReceived,\n     WindowUpdated\n )\n-from h2.exceptions import H2Error, ProtocolError\n+from h2.exceptions import H2Error\n from twisted.internet.defer import Deferred\n from twisted.internet.error import TimeoutError\n from twisted.internet.interfaces import IHandshakeListener, IProtocolNegotiationFactory\n@@ -39,7 +39,7 @@ class InvalidNegotiatedProtocol(H2Error):\n         self.negotiated_protocol = negotiated_protocol\n \n     def __str__(self) -> str:\n-        return f'InvalidHostname: Expected h2 as negotiated protocol, received {self.negotiated_protocol}'\n+        return f'InvalidHostname: Expected h2 as negotiated protocol, received {self.negotiated_protocol!r}'\n \n \n class RemoteTerminatedConnection(H2Error):\n@@ -48,7 +48,15 @@ class RemoteTerminatedConnection(H2Error):\n         self.terminate_event = event\n \n     def __str__(self) -> str:\n-        return f'RemoteTerminatedConnection: Received GOAWAY frame from {self.remote_ip_address}'\n+        return f'RemoteTerminatedConnection: Received GOAWAY frame from {self.remote_ip_address!r}'\n+\n+\n+class MethodNotAllowed405(H2Error):\n+    def __init__(self, remote_ip_address: Optional[Union[IPv4Address, IPv6Address]]):\n+        self.remote_ip_address = remote_ip_address\n+\n+    def __str__(self) -> str:\n+        return f\"MethodNotAllowed405: Received 'HTTP/2.0 405 Method Not Allowed' from {self.remote_ip_address!r}\"\n \n \n @implementer(IHandshakeListener)\n@@ -217,14 +225,25 @@ class H2ClientProtocol(Protocol, TimeoutMixin):\n             # So, no need to send a GOAWAY frame to the remote\n             self._lose_connection_with_error([InvalidNegotiatedProtocol(negotiated_protocol)])\n \n+    def _check_received_data(self, data: bytes) -> None:\n+        \"\"\"Checks for edge cases where the connection to remote fails\n+        without raising an appropriate H2Error\n+\n+        Arguments:\n+            data -- Data received from the remote\n+        \"\"\"\n+        if data.startswith(b'HTTP/2.0 405 Method Not Allowed'):\n+            raise MethodNotAllowed405(self.metadata['ip_address'])\n+\n     def dataReceived(self, data: bytes) -> None:\n         # Reset the idle timeout as connection is still actively receiving data\n         self.resetTimeout()\n \n         try:\n+            self._check_received_data(data)\n             events = self.conn.receive_data(data)\n             self._handle_events(events)\n-        except ProtocolError as e:\n+        except H2Error as e:\n             # Save this error as ultimately the connection will be dropped\n             # internally by hyper-h2. Saved error will be passed to all the streams\n             # closed with the connection.\n@@ -271,9 +290,10 @@ class H2ClientProtocol(Protocol, TimeoutMixin):\n \n         for stream in self.streams.values():\n             if stream.request_sent:\n-                stream.close(StreamCloseReason.CONNECTION_LOST, self._conn_lost_errors, from_protocol=True)\n+                close_reason = StreamCloseReason.CONNECTION_LOST\n             else:\n-                stream.close(StreamCloseReason.INACTIVE, from_protocol=True)\n+                close_reason = StreamCloseReason.INACTIVE\n+            stream.close(close_reason, self._conn_lost_errors, from_protocol=True)\n \n         self._active_streams -= len(self.streams)\n         self.streams.clear()\n\n@@ -189,12 +189,15 @@ class Stream:\n         headers = [\n             (':method', self._request.method),\n             (':authority', url.netloc),\n-            (':scheme', 'https'),\n+            (':scheme', self._protocol.metadata['uri'].scheme),\n             (':path', path),\n         ]\n \n         for name, value in self._request.headers.items():\n-            headers.append((name, value[0]))\n+            headers.append((str(name, 'utf-8'), str(value[0], 'utf-8')))\n+\n+        if b'Content-Length' not in self._request.headers.keys():\n+            headers.append(('Content-Length', str(len(self._request.body))))\n \n         return headers\n \n@@ -337,6 +340,10 @@ class Stream:\n         if not isinstance(reason, StreamCloseReason):\n             raise TypeError(f'Expected StreamCloseReason, received {reason.__class__.__qualname__}')\n \n+        # Have default value of errors as an empty list as\n+        # some cases can add a list of exceptions\n+        errors = errors or []\n+\n         if not from_protocol:\n             self._protocol.pop_stream(self.stream_id)\n \n@@ -387,7 +394,8 @@ class Stream:\n             self._deferred_response.errback(ResponseFailed(errors))\n \n         elif reason is StreamCloseReason.INACTIVE:\n-            self._deferred_response.errback(InactiveStreamClosed(self._request))\n+            errors.insert(0, InactiveStreamClosed(self._request))\n+            self._deferred_response.errback(ResponseFailed(errors))\n \n         elif reason is StreamCloseReason.INVALID_HOSTNAME:\n             self._deferred_response.errback(InvalidHostname(\n\n@@ -11,14 +11,14 @@ from h2.exceptions import InvalidBodyLengthError\n from twisted.internet import reactor\n from twisted.internet.defer import CancelledError, Deferred, DeferredList, inlineCallbacks\n from twisted.internet.endpoints import SSL4ClientEndpoint, SSL4ServerEndpoint\n+from twisted.internet.error import TimeoutError\n from twisted.internet.ssl import optionsForClientTLS, PrivateCertificate, Certificate\n from twisted.python.failure import Failure\n from twisted.trial.unittest import TestCase\n-from twisted.web.client import URI\n+from twisted.web.client import ResponseFailed, URI\n from twisted.web.http import Request as TxRequest\n from twisted.web.server import Site, NOT_DONE_YET\n from twisted.web.static import File\n-from twisted.internet.error import TimeoutError\n \n from scrapy.core.http2.protocol import H2ClientFactory, H2ClientProtocol\n from scrapy.core.http2.stream import InactiveStreamClosed, InvalidHostname\n@@ -152,6 +152,19 @@ class QueryParams(LeafResource):\n         return bytes(json.dumps(query_params), 'utf-8')\n \n \n+class RequestHeaders(LeafResource):\n+    \"\"\"Sends all the headers received as a response\"\"\"\n+\n+    def render_GET(self, request: TxRequest):\n+        request.setHeader('Content-Type', 'application/json; charset=UTF-8')\n+        request.setHeader('Content-Encoding', 'UTF-8')\n+        headers = {}\n+        for k, v in request.requestHeaders.getAllRawHeaders():\n+            headers[str(k, 'utf-8')] = str(v[0], 'utf-8')\n+\n+        return bytes(json.dumps(headers), 'utf-8')\n+\n+\n def get_client_certificate(key_file, certificate_file) -> PrivateCertificate:\n     with open(key_file, 'r') as key, open(certificate_file, 'r') as certificate:\n         pem = ''.join(key.readlines()) + ''.join(certificate.readlines())\n@@ -179,6 +192,7 @@ class Https2ClientProtocolTestCase(TestCase):\n         r.putChild(b'status', Status())\n         r.putChild(b'query-params', QueryParams())\n         r.putChild(b'timeout', TimeoutResponse())\n+        r.putChild(b'request-headers', RequestHeaders())\n         return r\n \n     @inlineCallbacks\n@@ -488,7 +502,11 @@ class Https2ClientProtocolTestCase(TestCase):\n         d_list = []\n \n         def assert_inactive_stream(failure):\n-            self.assertIsNotNone(failure.check(InactiveStreamClosed))\n+            self.assertIsNotNone(failure.check(ResponseFailed))\n+            self.assertTrue(any(\n+                isinstance(e, InactiveStreamClosed)\n+                for e in failure.value.reasons\n+            ))\n \n         # Send 100 request (we do not check the result)\n         for _ in range(100):\n@@ -616,3 +634,25 @@ class Https2ClientProtocolTestCase(TestCase):\n         d.addCallback(self.fail)\n         d.addErrback(assert_timeout_error)\n         return d\n+\n+    def test_request_headers_received(self):\n+        request = Request(self.get_url('/request-headers'), headers={\n+            'header-1': 'header value 1',\n+            'header-2': 'header value 2'\n+        })\n+        d = self.make_request(request)\n+\n+        def assert_request_headers(response: Response):\n+            self.assertEqual(response.status, 200)\n+            self.assertEqual(response.request, request)\n+\n+            response_headers = json.loads(str(response.body, 'utf-8'))\n+            self.assertIsInstance(response_headers, dict)\n+            for k, v in request.headers.items():\n+                k, v = str(k, 'utf-8'), str(v[0], 'utf-8')\n+                self.assertIn(k, response_headers)\n+                self.assertEqual(v, response_headers[k])\n+\n+        d.addErrback(self.fail)\n+        d.addCallback(assert_request_headers)\n+        return d\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "scrapy#19f2b4b53dd51044083a9749f00366f41ed795c7", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 7 | Lines Deleted: 6 | Files Changed: 3 | Hunks: 7 | Methods Changed: 6 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 13 | Churn Cumulative: 1794 | Contributors (this commit): 2 | Commits (past 90d): 40 | Contributors (cumulative): 4 | DMM Complexity: 1.0\n\nDIFF:\n@@ -3,8 +3,8 @@ from time import time\n from typing import Optional, Tuple\n from urllib.parse import urldefrag\n \n-from twisted.internet.defer import Deferred\n from twisted.internet.base import ReactorBase\n+from twisted.internet.defer import Deferred\n from twisted.internet.error import TimeoutError\n from twisted.web.client import URI\n \n\n@@ -97,14 +97,15 @@ class H2ConnectionPool:\n \n \n @implementer(IPolicyForHTTPS)\n-class H2WrappedContextFactory:\n-    def __init__(self, context_factory) -> None:\n+class AcceptableProtocolsContextFactory:\n+    def __init__(self, context_factory, acceptable_protocols: List[bytes]) -> None:\n         verifyObject(IPolicyForHTTPS, context_factory)\n         self._wrapped_context_factory = context_factory\n+        self._acceptable_protocols = acceptable_protocols\n \n     def creatorForNetloc(self, hostname, port) -> ClientTLSOptions:\n         options = self._wrapped_context_factory.creatorForNetloc(hostname, port)\n-        _setAcceptableProtocols(options._ctx, [b'h2'])\n+        _setAcceptableProtocols(options._ctx, self._acceptable_protocols)\n         return options\n \n \n@@ -116,7 +117,7 @@ class H2Agent:\n     ) -> None:\n         self._reactor = reactor\n         self._pool = pool\n-        self._context_factory = H2WrappedContextFactory(context_factory)\n+        self._context_factory = AcceptableProtocolsContextFactory(context_factory, acceptable_protocols=[b'h2'])\n         self._endpoint_factory = _StandardEndpointFactory(\n             self._reactor, self._context_factory,\n             connect_timeout, bind_address\n\n@@ -85,7 +85,7 @@ class Stream:\n         request: Request,\n         protocol: \"H2ClientProtocol\",\n         download_maxsize: int = 0,\n-        download_warnsize: int = 0\n+        download_warnsize: int = 0,\n     ) -> None:\n         \"\"\"\n         Arguments:\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "scrapy#403bc7020a5e1ba2b59eced2cc5f4453c7650666", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 0 | Lines Deleted: 4 | Files Changed: 1 | Hunks: 4 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 403 | Contributors (this commit): 12 | Commits (past 90d): 3 | Contributors (cumulative): 12 | DMM Complexity: None\n\nDIFF:\n@@ -1,9 +1,7 @@\n import functools\n-import gc\n import operator\n import platform\n import unittest\n-from itertools import count\n from sys import version_info\n from warnings import catch_warnings\n \n@@ -12,7 +10,6 @@ from scrapy.utils.python import (\n     get_func_args, to_bytes, to_unicode,\n     without_none_values, MutableChain)\n \n-\n __doctests__ = ['scrapy.utils.python']\n \n \n@@ -155,7 +152,6 @@ class UtilsPythonTestCase(unittest.TestCase):\n         a.meta['z'] = 2\n         self.assertFalse(equal_attributes(a, b, [compare_z, 'x']))\n \n-\n     def test_get_func_args(self):\n         def f1(a, b, c):\n             pass\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "scrapy#49337bd2ae094d97d364948569f59b8211c8dbbe", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 15 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 3 | Methods Changed: 4 | Complexity Δ (Sum/Max): 3/3 | Churn Δ: 15 | Churn Cumulative: 842 | Contributors (this commit): 24 | Commits (past 90d): 5 | Contributors (cumulative): 24 | DMM Complexity: 1.0\n\nDIFF:\n@@ -127,6 +127,7 @@ def re_rsearch(pattern, text, chunk_size=1024):\n     In case the pattern wasn't found, None is returned, otherwise it returns a tuple containing\n     the start position of the match, and the ending (regarding the entire text).\n     \"\"\"\n+\n     def _chunk_iter():\n         offset = len(text)\n         while True:\n@@ -158,6 +159,7 @@ def memoizemethod_noargs(method):\n         if self not in cache:\n             cache[self] = method(self, *args, **kwargs)\n         return cache[self]\n+\n     return new_method\n \n \n@@ -273,6 +275,19 @@ def equal_attributes(obj1, obj2, attributes):\n     return True\n \n \n+@deprecated\n+class WeakKeyCache:\n+\n+    def __init__(self, default_factory):\n+        self.default_factory = default_factory\n+        self._weakdict = weakref.WeakKeyDictionary()\n+\n+    def __getitem__(self, key):\n+        if key not in self._weakdict:\n+            self._weakdict[key] = self.default_factory(key)\n+        return self._weakdict[key]\n+\n+\n @deprecated\n def retry_on_eintr(function, *args, **kw):\n     \"\"\"Run a function and retry it while getting EINTR errors\"\"\"\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "scrapy#a3fecaf07f9edd6a1bbac1ade825c23845c7e6b1", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 27 | Lines Deleted: 6 | Files Changed: 1 | Hunks: 5 | Methods Changed: 5 | Complexity Δ (Sum/Max): 2/2 | Churn Δ: 33 | Churn Cumulative: 1707 | Contributors (this commit): 22 | Commits (past 90d): 7 | Contributors (cumulative): 22 | DMM Complexity: 1.0\n\nDIFF:\n@@ -312,16 +312,18 @@ class HttpTestCase(unittest.TestCase):\n         return self.download_request(request, Spider('foo')).addCallback(_test)\n \n     def test_host_header_seted_in_request_headers(self):\n-        def _test(response):\n-            self.assertEqual(response.body, b'example.com')\n-            self.assertEqual(request.headers.get('Host'), b'example.com')\n+        host = self.host + ':' + str(self.portno)\n \n-        request = Request(self.getURL('host'), headers={'Host': 'example.com'})\n+        def _test(response):\n+            self.assertEqual(response.body, bytes(host, 'utf-8'))\n+            self.assertEqual(request.headers.get('Host'), bytes(host, 'utf-8'))\n+\n+        request = Request(self.getURL('host'), headers={'Host': host})\n         return self.download_request(request, Spider('foo')).addCallback(_test)\n \n         d = self.download_request(request, Spider('foo'))\n         d.addCallback(lambda r: r.body)\n-        d.addCallback(self.assertEqual, b'example.com')\n+        d.addCallback(self.assertEqual, b'localhost')\n         return d\n \n     def test_content_length_zero_bodyless_post_request_headers(self):\n@@ -339,7 +341,7 @@ class HttpTestCase(unittest.TestCase):\n         def _test(response):\n             self.assertEqual(response.body, b'0')\n \n-        request = Request(self.getURL('contentlength'), method='POST', headers={'Host': 'example.com'})\n+        request = Request(self.getURL('contentlength'), method='POST')\n         return self.download_request(request, Spider('foo')).addCallback(_test)\n \n     def test_content_length_zero_bodyless_post_only_one(self):\n@@ -525,6 +527,25 @@ class Https2TestCase(Https11TestCase):\n     download_handler_cls = H2DownloadHandler\n     HTTP2_DATALOSS_SKIP_REASON = \"Content-Length mismatch raises InvalidBodyLengthError\"\n \n+    @defer.inlineCallbacks\n+    def test_download_with_maxsize_very_large_file(self):\n+        with mock.patch('scrapy.core.http2.stream.logger') as logger:\n+            request = Request(self.getURL('largechunkedfile'))\n+\n+            def check(logger):\n+                logger.error.assert_called_once_with(mock.ANY)\n+\n+            d = self.download_request(request, Spider('foo', download_maxsize=1500))\n+            yield self.assertFailure(d, defer.CancelledError, error.ConnectionAborted)\n+\n+            # As the error message is logged in the dataReceived callback, we\n+            # have to give a bit of time to the reactor to process the queue\n+            # after closing the connection.\n+            d = defer.Deferred()\n+            d.addCallback(check)\n+            reactor.callLater(.1, d.callback, logger)\n+            yield d\n+\n     def test_download_broken_content_cause_data_loss(self, url='broken'):\n         raise unittest.SkipTest(self.HTTP2_DATALOSS_SKIP_REASON)\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "scrapy#890b2138a605af2bfbf340a0d48d9d83c4cda53b", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 540 | Lines Deleted: 540 | Files Changed: 30 | Hunks: 335 | Methods Changed: 192 | Complexity Δ (Sum/Max): 65/70 | Churn Δ: 1080 | Churn Cumulative: 17474 | Contributors (this commit): 98 | Commits (past 90d): 99 | Contributors (cumulative): 342 | DMM Complexity: None\n\nDIFF:\n@@ -17,7 +17,7 @@ class SettingsListDirective(Directive):\n def is_setting_index(node):\n     if node.tagname == 'index':\n         # index entries for setting directives look like:\n-        # [(u'pair', u'SETTING_NAME; setting', u'std:setting-SETTING_NAME', '')]\n+        # [('pair', 'SETTING_NAME; setting', 'std:setting-SETTING_NAME', '')]\n         entry_type, info, refid = node['entries'][0][:3]\n         return entry_type == 'pair' and info.endswith('; setting')\n     return False\n\n@@ -23,7 +23,7 @@ def main():\n     _contents = None\n \n     # A regex that matches standard linkcheck output lines\n-    line_re = re.compile(u'(.*)\\:\\d+\\:\\s\\[(.*)\\]\\s(?:(.*)\\sto\\s(.*)|(.*))')\n+    line_re = re.compile(r'(.*)\\:\\d+\\:\\s\\[(.*)\\]\\s(?:(.*)\\sto\\s(.*)|(.*))')\n \n     # Read lines from the linkcheck output file\n     try:\n\n@@ -133,7 +133,7 @@ def _get_inputs(form, formdata, dont_click, clickdata, response):\n                         '  not(re:test(., \"^(?:checkbox|radio)$\", \"i\")))]]',\n                         namespaces={\n                             \"re\": \"http://exslt.org/regular-expressions\"})\n-    values = [(k, u'' if v is None else v)\n+    values = [(k, '' if v is None else v)\n               for k, v in (_value(e) for e in inputs)\n               if k and k not in formdata_keys]\n \n@@ -168,7 +168,7 @@ def _select_value(ele, n, v):\n         # This is a workround to bug in lxml fixed 2.3.1\n         # fix https://github.com/lxml/lxml/commit/57f49eed82068a20da3db8f1b18ae00c1bab8b12#L1L1139\n         selected_options = ele.xpath('.//option[@selected]')\n-        v = [(o.get('value') or o.text or u'').strip() for o in selected_options]\n+        v = [(o.get('value') or o.text or '').strip() for o in selected_options]\n     return n, v\n \n \n@@ -205,7 +205,7 @@ def _get_clickable(clickdata, form):\n \n     # We didn't find it, so now we build an XPath expression out of the other\n     # arguments, because they can be used as such\n-    xpath = u'.//*' + u''.join(u'[@%s=\"%s\"]' % c for c in clickdata.items())\n+    xpath = './/*' + ''.join('[@%s=\"%s\"]' % c for c in clickdata.items())\n     el = form.xpath(xpath)\n     if len(el) == 1:\n         return (el[0].get('name'), el[0].get('value') or '')\n\n@@ -76,7 +76,7 @@ class LxmlParserLinkExtractor:\n             url = safe_url_string(url, encoding=response_encoding)\n             # to fix relative links after process_value\n             url = urljoin(response_url, url)\n-            link = Link(url, _collect_string_content(el) or u'',\n+            link = Link(url, _collect_string_content(el) or '',\n                         nofollow=rel_has_nofollow(el.get('rel')))\n             links.append(link)\n         return self._deduplicate_if_needed(links)\n\n@@ -44,7 +44,7 @@ class LogFormatter:\n                 def dropped(self, item, exception, response, spider):\n                     return {\n                         'level': logging.INFO, # lowering the level from logging.WARNING\n-                        'msg': u\"Dropped: %(exception)s\" + os.linesep + \"%(item)s\",\n+                        'msg': \"Dropped: %(exception)s\" + os.linesep + \"%(item)s\",\n                         'args': {\n                             'exception': exception,\n                             'item': item,\n\n@@ -59,7 +59,7 @@ class CmdlineTest(unittest.TestCase):\n                                     'EXTENSIONS=' + json.dumps(EXTENSIONS))\n         # XXX: There's gotta be a smarter way to do this...\n         self.assertNotIn(\"...\", settingsstr)\n-        for char in (\"'\", \"<\", \">\", 'u\"'):\n+        for char in (\"'\", \"<\", \">\"):\n             settingsstr = settingsstr.replace(char, '\"')\n         settingsdict = json.loads(settingsstr)\n         self.assertCountEqual(settingsdict.keys(), EXTENSIONS.keys())\n\n@@ -1110,7 +1110,7 @@ class DataURITestCase(unittest.TestCase):\n \n     def test_default_mediatype(self):\n         def _test(response):\n-            self.assertEqual(response.text, u'\\u038e\\u03a3\\u038e')\n+            self.assertEqual(response.text, '\\u038e\\u03a3\\u038e')\n             self.assertEqual(type(response), responsetypes.from_mimetype(\"text/plain\"))\n             self.assertEqual(response.encoding, \"iso-8859-7\")\n \n@@ -1119,7 +1119,7 @@ class DataURITestCase(unittest.TestCase):\n \n     def test_text_charset(self):\n         def _test(response):\n-            self.assertEqual(response.text, u'\\u038e\\u03a3\\u038e')\n+            self.assertEqual(response.text, '\\u038e\\u03a3\\u038e')\n             self.assertEqual(response.body, b'\\xbe\\xd3\\xbe')\n             self.assertEqual(response.encoding, \"iso-8859-7\")\n \n@@ -1128,7 +1128,7 @@ class DataURITestCase(unittest.TestCase):\n \n     def test_mediatype_parameters(self):\n         def _test(response):\n-            self.assertEqual(response.text, u'\\u038e\\u03a3\\u038e')\n+            self.assertEqual(response.text, '\\u038e\\u03a3\\u038e')\n             self.assertEqual(type(response), responsetypes.from_mimetype(\"text/plain\"))\n             self.assertEqual(response.encoding, \"utf-8\")\n \n\n@@ -277,33 +277,33 @@ class CookiesMiddlewareTest(TestCase):\n \n     def test_request_cookies_encoding(self):\n         # 1) UTF8-encoded bytes\n-        req1 = Request('http://example.org', cookies={'a': u'á'.encode('utf8')})\n+        req1 = Request('http://example.org', cookies={'a': 'á'.encode('utf8')})\n         assert self.mw.process_request(req1, self.spider) is None\n         self.assertCookieValEqual(req1.headers['Cookie'], b'a=\\xc3\\xa1')\n \n         # 2) Non UTF8-encoded bytes\n-        req2 = Request('http://example.org', cookies={'a': u'á'.encode('latin1')})\n+        req2 = Request('http://example.org', cookies={'a': 'á'.encode('latin1')})\n         assert self.mw.process_request(req2, self.spider) is None\n         self.assertCookieValEqual(req2.headers['Cookie'], b'a=\\xc3\\xa1')\n \n-        # 3) Unicode string\n-        req3 = Request('http://example.org', cookies={'a': u'á'})\n+        # 3) String\n+        req3 = Request('http://example.org', cookies={'a': 'á'})\n         assert self.mw.process_request(req3, self.spider) is None\n         self.assertCookieValEqual(req3.headers['Cookie'], b'a=\\xc3\\xa1')\n \n     def test_request_headers_cookie_encoding(self):\n         # 1) UTF8-encoded bytes\n-        req1 = Request('http://example.org', headers={'Cookie': u'a=á'.encode('utf8')})\n+        req1 = Request('http://example.org', headers={'Cookie': 'a=á'.encode('utf8')})\n         assert self.mw.process_request(req1, self.spider) is None\n         self.assertCookieValEqual(req1.headers['Cookie'], b'a=\\xc3\\xa1')\n \n         # 2) Non UTF8-encoded bytes\n-        req2 = Request('http://example.org', headers={'Cookie': u'a=á'.encode('latin1')})\n+        req2 = Request('http://example.org', headers={'Cookie': 'a=á'.encode('latin1')})\n         assert self.mw.process_request(req2, self.spider) is None\n         self.assertCookieValEqual(req2.headers['Cookie'], b'a=\\xc3\\xa1')\n \n-        # 3) Unicode string\n-        req3 = Request('http://example.org', headers={'Cookie': u'a=á'})\n+        # 3) String\n+        req3 = Request('http://example.org', headers={'Cookie': 'a=á'})\n         assert self.mw.process_request(req3, self.spider) is None\n         self.assertCookieValEqual(req3.headers['Cookie'], b'a=\\xc3\\xa1')\n \n\n@@ -88,7 +88,7 @@ class TestHttpProxyMiddleware(TestCase):\n \n     def test_proxy_auth_encoding(self):\n         # utf-8 encoding\n-        os.environ['http_proxy'] = u'https://m\\u00E1n:pass@proxy:3128'\n+        os.environ['http_proxy'] = 'https://m\\u00E1n:pass@proxy:3128'\n         mw = HttpProxyMiddleware(auth_encoding='utf-8')\n         req = Request('http://scrapytest.org')\n         assert mw.process_request(req, spider) is None\n@@ -96,7 +96,7 @@ class TestHttpProxyMiddleware(TestCase):\n         self.assertEqual(req.headers.get('Proxy-Authorization'), b'Basic bcOhbjpwYXNz')\n \n         # proxy from request.meta\n-        req = Request('http://scrapytest.org', meta={'proxy': u'https://\\u00FCser:pass@proxy:3128'})\n+        req = Request('http://scrapytest.org', meta={'proxy': 'https://\\u00FCser:pass@proxy:3128'})\n         assert mw.process_request(req, spider) is None\n         self.assertEqual(req.meta, {'proxy': 'https://proxy:3128'})\n         self.assertEqual(req.headers.get('Proxy-Authorization'), b'Basic w7xzZXI6cGFzcw==')\n@@ -109,7 +109,7 @@ class TestHttpProxyMiddleware(TestCase):\n         self.assertEqual(req.headers.get('Proxy-Authorization'), b'Basic beFuOnBhc3M=')\n \n         # proxy from request.meta, latin-1 encoding\n-        req = Request('http://scrapytest.org', meta={'proxy': u'https://\\u00FCser:pass@proxy:3128'})\n+        req = Request('http://scrapytest.org', meta={'proxy': 'https://\\u00FCser:pass@proxy:3128'})\n         assert mw.process_request(req, spider) is None\n         self.assertEqual(req.meta, {'proxy': 'https://proxy:3128'})\n         self.assertEqual(req.headers.get('Proxy-Authorization'), b'Basic /HNlcjpwYXNz')\n\n@@ -184,7 +184,7 @@ class RedirectMiddlewareTest(unittest.TestCase):\n \n     def test_latin1_location(self):\n         req = Request('http://scrapytest.org/first')\n-        latin1_location = u'/ação'.encode('latin1')  # HTTP historically supports latin1\n+        latin1_location = '/ação'.encode('latin1')  # HTTP historically supports latin1\n         resp = Response('http://scrapytest.org/first', headers={'Location': latin1_location}, status=302)\n         req_result = self.mw.process_response(req, resp, self.spider)\n         perc_encoded_utf8_url = 'http://scrapytest.org/a%E7%E3o'\n@@ -192,7 +192,7 @@ class RedirectMiddlewareTest(unittest.TestCase):\n \n     def test_utf8_location(self):\n         req = Request('http://scrapytest.org/first')\n-        utf8_location = u'/ação'.encode('utf-8')  # header using UTF-8 encoding\n+        utf8_location = '/ação'.encode('utf-8')  # header using UTF-8 encoding\n         resp = Response('http://scrapytest.org/first', headers={'Location': utf8_location}, status=302)\n         req_result = self.mw.process_response(req, resp, self.spider)\n         perc_encoded_utf8_url = 'http://scrapytest.org/a%C3%A7%C3%A3o'\n@@ -207,7 +207,7 @@ class MetaRefreshMiddlewareTest(unittest.TestCase):\n         self.mw = MetaRefreshMiddleware.from_crawler(crawler)\n \n     def _body(self, interval=5, url='http://example.org/newpage'):\n-        html = u\"\"\"<html><head><meta http-equiv=\"refresh\" content=\"{0};url={1}\"/></head></html>\"\"\"\n+        html = \"\"\"<html><head><meta http-equiv=\"refresh\" content=\"{0};url={1}\"/></head></html>\"\"\"\n         return html.format(interval, url).encode('utf-8')\n \n     def test_priority_adjust(self):\n\n@@ -30,7 +30,7 @@ class RobotsTxtMiddlewareTest(unittest.TestCase):\n     def _get_successful_crawler(self):\n         crawler = self.crawler\n         crawler.settings.set('ROBOTSTXT_OBEY', True)\n-        ROBOTS = u\"\"\"\n+        ROBOTS = \"\"\"\n User-Agent: *\n Disallow: /admin/\n Disallow: /static/\n@@ -56,7 +56,7 @@ Disallow: /some/randome/page.html\n             self.assertIgnored(Request('http://site.local/admin/main'), middleware),\n             self.assertIgnored(Request('http://site.local/static/'), middleware),\n             self.assertIgnored(Request('http://site.local/wiki/K%C3%A4ytt%C3%A4j%C3%A4:'), middleware),\n-            self.assertIgnored(Request(u'http://site.local/wiki/Käyttäjä:'), middleware)\n+            self.assertIgnored(Request('http://site.local/wiki/Käyttäjä:'), middleware)\n         ], fireOnOneErrback=True)\n \n     def test_robotstxt_ready_parser(self):\n\n@@ -54,7 +54,7 @@ class BaseItemExporterTest(unittest.TestCase):\n     def setUp(self):\n         if self.item_class is None:\n             raise unittest.SkipTest(\"item class is None\")\n-        self.i = self.item_class(name=u'John\\xa3', age=u'22')\n+        self.i = self.item_class(name='John\\xa3', age='22')\n         self.output = BytesIO()\n         self.ie = self._get_exporter()\n \n@@ -96,25 +96,25 @@ class BaseItemExporterTest(unittest.TestCase):\n     def test_serialize_field(self):\n         a = ItemAdapter(self.i)\n         res = self.ie.serialize_field(a.get_field_meta('name'), 'name', a['name'])\n-        self.assertEqual(res, u'John\\xa3')\n+        self.assertEqual(res, 'John\\xa3')\n \n         res = self.ie.serialize_field(a.get_field_meta('age'), 'age', a['age'])\n-        self.assertEqual(res, u'22')\n+        self.assertEqual(res, '22')\n \n     def test_fields_to_export(self):\n         ie = self._get_exporter(fields_to_export=['name'])\n-        self.assertEqual(list(ie._get_serialized_fields(self.i)), [('name', u'John\\xa3')])\n+        self.assertEqual(list(ie._get_serialized_fields(self.i)), [('name', 'John\\xa3')])\n \n         ie = self._get_exporter(fields_to_export=['name'], encoding='latin-1')\n         _, name = list(ie._get_serialized_fields(self.i))[0]\n         assert isinstance(name, str)\n-        self.assertEqual(name, u'John\\xa3')\n+        self.assertEqual(name, 'John\\xa3')\n \n     def test_field_custom_serializer(self):\n-        i = self.custom_field_item_class(name=u'John\\xa3', age=u'22')\n+        i = self.custom_field_item_class(name='John\\xa3', age='22')\n         a = ItemAdapter(i)\n         ie = self._get_exporter()\n-        self.assertEqual(ie.serialize_field(a.get_field_meta('name'), 'name', a['name']), u'John\\xa3')\n+        self.assertEqual(ie.serialize_field(a.get_field_meta('name'), 'name', a['name']), 'John\\xa3')\n         self.assertEqual(ie.serialize_field(a.get_field_meta('age'), 'age', a['age']), '24')\n \n \n@@ -132,48 +132,48 @@ class PythonItemExporterTest(BaseItemExporterTest):\n             PythonItemExporter(invalid_option='something')\n \n     def test_nested_item(self):\n-        i1 = self.item_class(name=u'Joseph', age='22')\n-        i2 = dict(name=u'Maria', age=i1)\n-        i3 = self.item_class(name=u'Jesus', age=i2)\n+        i1 = self.item_class(name='Joseph', age='22')\n+        i2 = dict(name='Maria', age=i1)\n+        i3 = self.item_class(name='Jesus', age=i2)\n         ie = self._get_exporter()\n         exported = ie.export_item(i3)\n         self.assertEqual(type(exported), dict)\n         self.assertEqual(\n             exported,\n-            {'age': {'age': {'age': '22', 'name': u'Joseph'}, 'name': u'Maria'}, 'name': 'Jesus'}\n+            {'age': {'age': {'age': '22', 'name': 'Joseph'}, 'name': 'Maria'}, 'name': 'Jesus'}\n         )\n         self.assertEqual(type(exported['age']), dict)\n         self.assertEqual(type(exported['age']['age']), dict)\n \n     def test_export_list(self):\n-        i1 = self.item_class(name=u'Joseph', age='22')\n-        i2 = self.item_class(name=u'Maria', age=[i1])\n-        i3 = self.item_class(name=u'Jesus', age=[i2])\n+        i1 = self.item_class(name='Joseph', age='22')\n+        i2 = self.item_class(name='Maria', age=[i1])\n+        i3 = self.item_class(name='Jesus', age=[i2])\n         ie = self._get_exporter()\n         exported = ie.export_item(i3)\n         self.assertEqual(\n             exported,\n-            {'age': [{'age': [{'age': '22', 'name': u'Joseph'}], 'name': u'Maria'}], 'name': 'Jesus'}\n+            {'age': [{'age': [{'age': '22', 'name': 'Joseph'}], 'name': 'Maria'}], 'name': 'Jesus'}\n         )\n         self.assertEqual(type(exported['age'][0]), dict)\n         self.assertEqual(type(exported['age'][0]['age'][0]), dict)\n \n     def test_export_item_dict_list(self):\n-        i1 = self.item_class(name=u'Joseph', age='22')\n-        i2 = dict(name=u'Maria', age=[i1])\n-        i3 = self.item_class(name=u'Jesus', age=[i2])\n+        i1 = self.item_class(name='Joseph', age='22')\n+        i2 = dict(name='Maria', age=[i1])\n+        i3 = self.item_class(name='Jesus', age=[i2])\n         ie = self._get_exporter()\n         exported = ie.export_item(i3)\n         self.assertEqual(\n             exported,\n-            {'age': [{'age': [{'age': '22', 'name': u'Joseph'}], 'name': u'Maria'}], 'name': 'Jesus'}\n+            {'age': [{'age': [{'age': '22', 'name': 'Joseph'}], 'name': 'Maria'}], 'name': 'Jesus'}\n         )\n         self.assertEqual(type(exported['age'][0]), dict)\n         self.assertEqual(type(exported['age'][0]['age'][0]), dict)\n \n     def test_export_binary(self):\n         exporter = PythonItemExporter(binary=True)\n-        value = self.item_class(name=u'John\\xa3', age=u'22')\n+        value = self.item_class(name='John\\xa3', age='22')\n         expected = {b'name': b'John\\xc2\\xa3', b'age': b'22'}\n         self.assertEqual(expected, exporter.export_item(value))\n \n@@ -279,7 +279,7 @@ class CsvItemExporterTest(BaseItemExporterTest):\n         return self.assertEqual(split_csv(first), split_csv(second), msg=msg)\n \n     def _check_output(self):\n-        self.assertCsvEqual(to_unicode(self.output.getvalue()), u'age,name\\r\\n22,John\\xa3\\r\\n')\n+        self.assertCsvEqual(to_unicode(self.output.getvalue()), 'age,name\\r\\n22,John\\xa3\\r\\n')\n \n     def assertExportResult(self, item, expected, **kwargs):\n         fp = BytesIO()\n@@ -396,7 +396,7 @@ class XmlItemExporterTest(BaseItemExporterTest):\n \n     def test_multivalued_fields(self):\n         self.assertExportResult(\n-            self.item_class(name=[u'John\\xa3', u'Doe'], age=[1, 2, 3]),\n+            self.item_class(name=['John\\xa3', 'Doe'], age=[1, 2, 3]),\n             b\"\"\"<?xml version=\"1.0\" encoding=\"utf-8\"?>\\n\n             <items>\n                 <item>\n@@ -408,9 +408,9 @@ class XmlItemExporterTest(BaseItemExporterTest):\n         )\n \n     def test_nested_item(self):\n-        i1 = dict(name=u'foo\\xa3hoo', age='22')\n-        i2 = dict(name=u'bar', age=i1)\n-        i3 = self.item_class(name=u'buz', age=i2)\n+        i1 = dict(name='foo\\xa3hoo', age='22')\n+        i2 = dict(name='bar', age=i1)\n+        i3 = self.item_class(name='buz', age=i2)\n \n         self.assertExportResult(\n             i3,\n@@ -431,9 +431,9 @@ class XmlItemExporterTest(BaseItemExporterTest):\n         )\n \n     def test_nested_list_item(self):\n-        i1 = dict(name=u'foo')\n-        i2 = dict(name=u'bar', v2={\"egg\": [\"spam\"]})\n-        i3 = self.item_class(name=u'buz', age=[i1, i2])\n+        i1 = dict(name='foo')\n+        i2 = dict(name='bar', v2={\"egg\": [\"spam\"]})\n+        i3 = self.item_class(name='buz', age=[i1, i2])\n \n         self.assertExportResult(\n             i3,\n@@ -475,7 +475,7 @@ class XmlItemExporterDataclassTest(XmlItemExporterTest):\n \n class JsonLinesItemExporterTest(BaseItemExporterTest):\n \n-    _expected_nested = {'name': u'Jesus', 'age': {'name': 'Maria', 'age': {'name': 'Joseph', 'age': '22'}}}\n+    _expected_nested = {'name': 'Jesus', 'age': {'name': 'Maria', 'age': {'name': 'Joseph', 'age': '22'}}}\n \n     def _get_exporter(self, **kwargs):\n         return JsonLinesItemExporter(self.output, **kwargs)\n@@ -485,9 +485,9 @@ class JsonLinesItemExporterTest(BaseItemExporterTest):\n         self.assertEqual(exported, ItemAdapter(self.i).asdict())\n \n     def test_nested_item(self):\n-        i1 = self.item_class(name=u'Joseph', age='22')\n-        i2 = dict(name=u'Maria', age=i1)\n-        i3 = self.item_class(name=u'Jesus', age=i2)\n+        i1 = self.item_class(name='Joseph', age='22')\n+        i2 = dict(name='Maria', age=i1)\n+        i3 = self.item_class(name='Jesus', age=i2)\n         self.ie.start_exporting()\n         self.ie.export_item(i3)\n         self.ie.finish_exporting()\n@@ -542,25 +542,25 @@ class JsonItemExporterTest(JsonLinesItemExporterTest):\n         self.assertTwoItemsExported(ItemAdapter(self.i).asdict())\n \n     def test_nested_item(self):\n-        i1 = self.item_class(name=u'Joseph\\xa3', age='22')\n-        i2 = self.item_class(name=u'Maria', age=i1)\n-        i3 = self.item_class(name=u'Jesus', age=i2)\n+        i1 = self.item_class(name='Joseph\\xa3', age='22')\n+        i2 = self.item_class(name='Maria', age=i1)\n+        i3 = self.item_class(name='Jesus', age=i2)\n         self.ie.start_exporting()\n         self.ie.export_item(i3)\n         self.ie.finish_exporting()\n         exported = json.loads(to_unicode(self.output.getvalue()))\n-        expected = {'name': u'Jesus', 'age': {'name': 'Maria', 'age': ItemAdapter(i1).asdict()}}\n+        expected = {'name': 'Jesus', 'age': {'name': 'Maria', 'age': ItemAdapter(i1).asdict()}}\n         self.assertEqual(exported, [expected])\n \n     def test_nested_dict_item(self):\n-        i1 = dict(name=u'Joseph\\xa3', age='22')\n-        i2 = self.item_class(name=u'Maria', age=i1)\n-        i3 = dict(name=u'Jesus', age=i2)\n+        i1 = dict(name='Joseph\\xa3', age='22')\n+        i2 = self.item_class(name='Maria', age=i1)\n+        i3 = dict(name='Jesus', age=i2)\n         self.ie.start_exporting()\n         self.ie.export_item(i3)\n         self.ie.finish_exporting()\n         exported = json.loads(to_unicode(self.output.getvalue()))\n-        expected = {'name': u'Jesus', 'age': {'name': 'Maria', 'age': i1}}\n+        expected = {'name': 'Jesus', 'age': {'name': 'Maria', 'age': i1}}\n         self.assertEqual(exported, [expected])\n \n     def test_nonstring_types_item(self):\n@@ -595,14 +595,14 @@ class CustomExporterItemTest(unittest.TestCase):\n                 else:\n                     return super(CustomItemExporter, self).serialize_field(field, name, value)\n \n-        i = self.item_class(name=u'John', age='22')\n+        i = self.item_class(name='John', age='22')\n         a = ItemAdapter(i)\n         ie = CustomItemExporter()\n \n         self.assertEqual(ie.serialize_field(a.get_field_meta('name'), 'name', a['name']), 'John')\n         self.assertEqual(ie.serialize_field(a.get_field_meta('age'), 'age', a['age']), '23')\n \n-        i2 = {'name': u'John', 'age': '22'}\n+        i2 = {'name': 'John', 'age': '22'}\n         self.assertEqual(ie.serialize_field({}, 'name', i2['name']), 'John')\n         self.assertEqual(ie.serialize_field({}, 'age', i2['age']), '23')\n \n\n@@ -874,7 +874,7 @@ class FeedExportTest(FeedExportTestBase):\n \n     @defer.inlineCallbacks\n     def test_export_encoding(self):\n-        items = [dict({'foo': u'Test\\xd6'})]\n+        items = [dict({'foo': 'Test\\xd6'})]\n \n         formats = {\n             'json': '[{\"foo\": \"Test\\\\u00d6\"}]'.encode('utf-8'),\n@@ -919,7 +919,7 @@ class FeedExportTest(FeedExportTestBase):\n \n     @defer.inlineCallbacks\n     def test_export_multiple_configs(self):\n-        items = [dict({'foo': u'FOO', 'bar': u'BAR'})]\n+        items = [dict({'foo': 'FOO', 'bar': 'BAR'})]\n \n         formats = {\n             'json': '[\\n{\"bar\": \"BAR\"}\\n]'.encode('utf-8'),\n@@ -1393,7 +1393,7 @@ class BatchDeliveriesTest(FeedExportTestBase):\n \n     @defer.inlineCallbacks\n     def test_export_multiple_configs(self):\n-        items = [dict({'foo': u'FOO', 'bar': u'BAR'}), dict({'foo': u'FOO1', 'bar': u'BAR1'})]\n+        items = [dict({'foo': 'FOO', 'bar': 'BAR'}), dict({'foo': 'FOO1', 'bar': 'BAR1'})]\n \n         formats = {\n             'json': ['[\\n{\"bar\": \"BAR\"}\\n]'.encode('utf-8'),\n@@ -1442,7 +1442,7 @@ class BatchDeliveriesTest(FeedExportTestBase):\n \n     @defer.inlineCallbacks\n     def test_batch_item_count_feeds_setting(self):\n-        items = [dict({'foo': u'FOO'}), dict({'foo': u'FOO1'})]\n+        items = [dict({'foo': 'FOO'}), dict({'foo': 'FOO1'})]\n         formats = {\n             'json': ['[{\"foo\": \"FOO\"}]'.encode('utf-8'),\n                      '[{\"foo\": \"FOO1\"}]'.encode('utf-8')],\n\n@@ -39,19 +39,19 @@ class HeadersTest(unittest.TestCase):\n         assert h.getlist('X-Forwarded-For') is not hlist\n \n     def test_encode_utf8(self):\n-        h = Headers({u'key': u'\\xa3'}, encoding='utf-8')\n+        h = Headers({'key': '\\xa3'}, encoding='utf-8')\n         key, val = dict(h).popitem()\n         assert isinstance(key, bytes), key\n         assert isinstance(val[0], bytes), val[0]\n         self.assertEqual(val[0], b'\\xc2\\xa3')\n \n     def test_encode_latin1(self):\n-        h = Headers({u'key': u'\\xa3'}, encoding='latin1')\n+        h = Headers({'key': '\\xa3'}, encoding='latin1')\n         key, val = dict(h).popitem()\n         self.assertEqual(val[0], b'\\xa3')\n \n     def test_encode_multiple(self):\n-        h = Headers({u'key': [u'\\xa3']}, encoding='utf-8')\n+        h = Headers({'key': ['\\xa3']}, encoding='utf-8')\n         key, val = dict(h).popitem()\n         self.assertEqual(val[0], b'\\xc2\\xa3')\n \n\n@@ -60,8 +60,8 @@ class RequestTest(unittest.TestCase):\n         self.assertFalse(p.headers is r.headers)\n \n         # headers must not be unicode\n-        h = Headers({'key1': u'val1', u'key2': 'val2'})\n-        h[u'newkey'] = u'newval'\n+        h = Headers({'key1': 'val1', 'key2': 'val2'})\n+        h['newkey'] = 'newval'\n         for k, v in h.items():\n             self.assertIsInstance(k, bytes)\n             for s in v:\n@@ -89,30 +89,30 @@ class RequestTest(unittest.TestCase):\n         self.assertEqual(r.url, \"http://www.scrapy.org/blank%20space\")\n \n     def test_url_encoding(self):\n-        r = self.request_class(url=u\"http://www.scrapy.org/price/£\")\n+        r = self.request_class(url=\"http://www.scrapy.org/price/£\")\n         self.assertEqual(r.url, \"http://www.scrapy.org/price/%C2%A3\")\n \n     def test_url_encoding_other(self):\n         # encoding affects only query part of URI, not path\n         # path part should always be UTF-8 encoded before percent-escaping\n-        r = self.request_class(url=u\"http://www.scrapy.org/price/£\", encoding=\"utf-8\")\n+        r = self.request_class(url=\"http://www.scrapy.org/price/£\", encoding=\"utf-8\")\n         self.assertEqual(r.url, \"http://www.scrapy.org/price/%C2%A3\")\n \n-        r = self.request_class(url=u\"http://www.scrapy.org/price/£\", encoding=\"latin1\")\n+        r = self.request_class(url=\"http://www.scrapy.org/price/£\", encoding=\"latin1\")\n         self.assertEqual(r.url, \"http://www.scrapy.org/price/%C2%A3\")\n \n     def test_url_encoding_query(self):\n-        r1 = self.request_class(url=u\"http://www.scrapy.org/price/£?unit=µ\")\n+        r1 = self.request_class(url=\"http://www.scrapy.org/price/£?unit=µ\")\n         self.assertEqual(r1.url, \"http://www.scrapy.org/price/%C2%A3?unit=%C2%B5\")\n \n         # should be same as above\n-        r2 = self.request_class(url=u\"http://www.scrapy.org/price/£?unit=µ\", encoding=\"utf-8\")\n+        r2 = self.request_class(url=\"http://www.scrapy.org/price/£?unit=µ\", encoding=\"utf-8\")\n         self.assertEqual(r2.url, \"http://www.scrapy.org/price/%C2%A3?unit=%C2%B5\")\n \n     def test_url_encoding_query_latin1(self):\n         # encoding is used for encoding query-string before percent-escaping;\n         # path is still UTF-8 encoded before percent-escaping\n-        r3 = self.request_class(url=u\"http://www.scrapy.org/price/µ?currency=£\", encoding=\"latin1\")\n+        r3 = self.request_class(url=\"http://www.scrapy.org/price/µ?currency=£\", encoding=\"latin1\")\n         self.assertEqual(r3.url, \"http://www.scrapy.org/price/%C2%B5?currency=%A3\")\n \n     def test_url_encoding_nonutf8_untouched(self):\n@@ -131,16 +131,16 @@ class RequestTest(unittest.TestCase):\n         # characters.  Otherwise, in the future the IRI will be mapped to\n         # \"http://www.example.org/r%C3%A9sum%C3%A9.html\", which is a different\n         # URI from \"http://www.example.org/r%E9sum%E9.html\".\n-        r1 = self.request_class(url=u\"http://www.scrapy.org/price/%a3\")\n+        r1 = self.request_class(url=\"http://www.scrapy.org/price/%a3\")\n         self.assertEqual(r1.url, \"http://www.scrapy.org/price/%a3\")\n \n-        r2 = self.request_class(url=u\"http://www.scrapy.org/r%C3%A9sum%C3%A9/%a3\")\n+        r2 = self.request_class(url=\"http://www.scrapy.org/r%C3%A9sum%C3%A9/%a3\")\n         self.assertEqual(r2.url, \"http://www.scrapy.org/r%C3%A9sum%C3%A9/%a3\")\n \n-        r3 = self.request_class(url=u\"http://www.scrapy.org/résumé/%a3\")\n+        r3 = self.request_class(url=\"http://www.scrapy.org/résumé/%a3\")\n         self.assertEqual(r3.url, \"http://www.scrapy.org/r%C3%A9sum%C3%A9/%a3\")\n \n-        r4 = self.request_class(url=u\"http://www.example.org/r%E9sum%E9.html\")\n+        r4 = self.request_class(url=\"http://www.example.org/r%E9sum%E9.html\")\n         self.assertEqual(r4.url, \"http://www.example.org/r%E9sum%E9.html\")\n \n     def test_body(self):\n@@ -151,11 +151,11 @@ class RequestTest(unittest.TestCase):\n         assert isinstance(r2.body, bytes)\n         self.assertEqual(r2.encoding, 'utf-8')  # default encoding\n \n-        r3 = self.request_class(url=\"http://www.example.com/\", body=u\"Price: \\xa3100\", encoding='utf-8')\n+        r3 = self.request_class(url=\"http://www.example.com/\", body=\"Price: \\xa3100\", encoding='utf-8')\n         assert isinstance(r3.body, bytes)\n         self.assertEqual(r3.body, b\"Price: \\xc2\\xa3100\")\n \n-        r4 = self.request_class(url=\"http://www.example.com/\", body=u\"Price: \\xa3100\", encoding='latin1')\n+        r4 = self.request_class(url=\"http://www.example.com/\", body=\"Price: \\xa3100\", encoding='latin1')\n         assert isinstance(r4.body, bytes)\n         self.assertEqual(r4.body, b\"Price: \\xa3100\")\n \n@@ -164,7 +164,7 @@ class RequestTest(unittest.TestCase):\n         r = self.request_class(url=\"http://www.example.com/ajax.html#!key=value\")\n         self.assertEqual(r.url, \"http://www.example.com/ajax.html?_escaped_fragment_=key%3Dvalue\")\n         # unicode url\n-        r = self.request_class(url=u\"http://www.example.com/ajax.html#!key=value\")\n+        r = self.request_class(url=\"http://www.example.com/ajax.html#!key=value\")\n         self.assertEqual(r.url, \"http://www.example.com/ajax.html?_escaped_fragment_=key%3Dvalue\")\n \n     def test_copy(self):\n@@ -236,7 +236,7 @@ class RequestTest(unittest.TestCase):\n         assert r4.dont_filter is False\n \n     def test_method_always_str(self):\n-        r = self.request_class(\"http://www.example.com\", method=u\"POST\")\n+        r = self.request_class(\"http://www.example.com\", method=\"POST\")\n         assert isinstance(r.method, str)\n \n     def test_immutable_attributes(self):\n@@ -381,7 +381,7 @@ class FormRequestTest(RequestTest):\n \n     def test_default_encoding_textual_data(self):\n         # using default encoding (utf-8)\n-        data = {u'µ one': u'two', u'price': u'£ 100'}\n+        data = {'µ one': 'two', 'price': '£ 100'}\n         r2 = self.request_class(\"http://www.example.com\", formdata=data)\n         self.assertEqual(r2.method, 'POST')\n         self.assertEqual(r2.encoding, 'utf-8')\n@@ -390,7 +390,7 @@ class FormRequestTest(RequestTest):\n \n     def test_default_encoding_mixed_data(self):\n         # using default encoding (utf-8)\n-        data = {u'\\u00b5one': b'two', b'price\\xc2\\xa3': u'\\u00a3 100'}\n+        data = {'\\u00b5one': b'two', b'price\\xc2\\xa3': '\\u00a3 100'}\n         r2 = self.request_class(\"http://www.example.com\", formdata=data)\n         self.assertEqual(r2.method, 'POST')\n         self.assertEqual(r2.encoding, 'utf-8')\n@@ -406,14 +406,14 @@ class FormRequestTest(RequestTest):\n         self.assertEqual(r2.headers[b'Content-Type'], b'application/x-www-form-urlencoded')\n \n     def test_custom_encoding_textual_data(self):\n-        data = {'price': u'£ 100'}\n+        data = {'price': '£ 100'}\n         r3 = self.request_class(\"http://www.example.com\", formdata=data, encoding='latin1')\n         self.assertEqual(r3.encoding, 'latin1')\n         self.assertEqual(r3.body, b'price=%A3+100')\n \n     def test_multi_key_values(self):\n         # using multiples values for a single key\n-        data = {'price': u'\\xa3 100', 'colours': ['red', 'blue', 'green']}\n+        data = {'price': '\\xa3 100', 'colours': ['red', 'blue', 'green']}\n         r3 = self.request_class(\"http://www.example.com\", formdata=data)\n         self.assertQueryEqual(r3.body, b'colours=red&colours=blue&colours=green&price=%C2%A3+100')\n \n@@ -450,10 +450,10 @@ class FormRequestTest(RequestTest):\n         self.assertEqual(req.headers[b'Content-type'], b'application/x-www-form-urlencoded')\n         self.assertEqual(req.url, \"http://www.example.com/this/post.php\")\n         fs = _qs(req, to_unicode=True)\n-        self.assertEqual(set(fs[u'test £']), {u'val1', u'val2'})\n-        self.assertEqual(set(fs[u'one']), {u'two', u'three'})\n-        self.assertEqual(fs[u'test2'], [u'xxx µ'])\n-        self.assertEqual(fs[u'six'], [u'seven'])\n+        self.assertEqual(set(fs['test £']), {'val1', 'val2'})\n+        self.assertEqual(set(fs['one']), {'two', 'three'})\n+        self.assertEqual(fs['test2'], ['xxx µ'])\n+        self.assertEqual(fs['six'], ['seven'])\n \n     def test_from_response_post_nonascii_bytes_latin1(self):\n         response = _buildresponse(\n@@ -471,14 +471,14 @@ class FormRequestTest(RequestTest):\n         self.assertEqual(req.headers[b'Content-type'], b'application/x-www-form-urlencoded')\n         self.assertEqual(req.url, \"http://www.example.com/this/post.php\")\n         fs = _qs(req, to_unicode=True, encoding='latin1')\n-        self.assertEqual(set(fs[u'test £']), {u'val1', u'val2'})\n-        self.assertEqual(set(fs[u'one']), {u'two', u'three'})\n-        self.assertEqual(fs[u'test2'], [u'xxx µ'])\n-        self.assertEqual(fs[u'six'], [u'seven'])\n+        self.assertEqual(set(fs['test £']), {'val1', 'val2'})\n+        self.assertEqual(set(fs['one']), {'two', 'three'})\n+        self.assertEqual(fs['test2'], ['xxx µ'])\n+        self.assertEqual(fs['six'], ['seven'])\n \n     def test_from_response_post_nonascii_unicode(self):\n         response = _buildresponse(\n-            u\"\"\"<form action=\"post.php\" method=\"POST\">\n+            \"\"\"<form action=\"post.php\" method=\"POST\">\n             <input type=\"hidden\" name=\"test £\" value=\"val1\">\n             <input type=\"hidden\" name=\"test £\" value=\"val2\">\n             <input type=\"hidden\" name=\"test2\" value=\"xxx µ\">\n@@ -490,10 +490,10 @@ class FormRequestTest(RequestTest):\n         self.assertEqual(req.headers[b'Content-type'], b'application/x-www-form-urlencoded')\n         self.assertEqual(req.url, \"http://www.example.com/this/post.php\")\n         fs = _qs(req, to_unicode=True)\n-        self.assertEqual(set(fs[u'test £']), {u'val1', u'val2'})\n-        self.assertEqual(set(fs[u'one']), {u'two', u'three'})\n-        self.assertEqual(fs[u'test2'], [u'xxx µ'])\n-        self.assertEqual(fs[u'six'], [u'seven'])\n+        self.assertEqual(set(fs['test £']), {'val1', 'val2'})\n+        self.assertEqual(set(fs['one']), {'two', 'three'})\n+        self.assertEqual(fs['test2'], ['xxx µ'])\n+        self.assertEqual(fs['six'], ['seven'])\n \n     def test_from_response_duplicate_form_key(self):\n         response = _buildresponse(\n@@ -685,7 +685,7 @@ class FormRequestTest(RequestTest):\n             <input type=\"hidden\" name=\"two\" value=\"clicked2\">\n             </form>\"\"\")\n         req = self.request_class.from_response(\n-            response, clickdata={u'name': u'clickable', u'value': u'clicked2'}\n+            response, clickdata={'name': 'clickable', 'value': 'clicked2'}\n         )\n         fs = _qs(req)\n         self.assertEqual(fs[b'clickable'], [b'clicked2'])\n@@ -694,21 +694,21 @@ class FormRequestTest(RequestTest):\n \n     def test_from_response_unicode_clickdata(self):\n         response = _buildresponse(\n-            u\"\"\"<form action=\"get.php\" method=\"GET\">\n+            \"\"\"<form action=\"get.php\" method=\"GET\">\n             <input type=\"submit\" name=\"price in \\u00a3\" value=\"\\u00a3 1000\">\n             <input type=\"submit\" name=\"price in \\u20ac\" value=\"\\u20ac 2000\">\n             <input type=\"hidden\" name=\"poundsign\" value=\"\\u00a3\">\n             <input type=\"hidden\" name=\"eurosign\" value=\"\\u20ac\">\n             </form>\"\"\")\n         req = self.request_class.from_response(\n-            response, clickdata={u'name': u'price in \\u00a3'}\n+            response, clickdata={'name': 'price in \\u00a3'}\n         )\n         fs = _qs(req, to_unicode=True)\n-        self.assertTrue(fs[u'price in \\u00a3'])\n+        self.assertTrue(fs['price in \\u00a3'])\n \n     def test_from_response_unicode_clickdata_latin1(self):\n         response = _buildresponse(\n-            u\"\"\"<form action=\"get.php\" method=\"GET\">\n+            \"\"\"<form action=\"get.php\" method=\"GET\">\n             <input type=\"submit\" name=\"price in \\u00a3\" value=\"\\u00a3 1000\">\n             <input type=\"submit\" name=\"price in \\u00a5\" value=\"\\u00a5 2000\">\n             <input type=\"hidden\" name=\"poundsign\" value=\"\\u00a3\">\n@@ -716,10 +716,10 @@ class FormRequestTest(RequestTest):\n             </form>\"\"\",\n             encoding='latin1')\n         req = self.request_class.from_response(\n-            response, clickdata={u'name': u'price in \\u00a5'}\n+            response, clickdata={'name': 'price in \\u00a5'}\n         )\n         fs = _qs(req, to_unicode=True, encoding='latin1')\n-        self.assertTrue(fs[u'price in \\u00a5'])\n+        self.assertTrue(fs['price in \\u00a5'])\n \n     def test_from_response_multiple_forms_clickdata(self):\n         response = _buildresponse(\n@@ -733,7 +733,7 @@ class FormRequestTest(RequestTest):\n             </form>\n             \"\"\")\n         req = self.request_class.from_response(\n-            response, formname='form2', clickdata={u'name': u'clickable'}\n+            response, formname='form2', clickdata={'name': 'clickable'}\n         )\n         fs = _qs(req)\n         self.assertEqual(fs[b'clickable'], [b'clicked2'])\n@@ -1072,11 +1072,11 @@ class FormRequestTest(RequestTest):\n \n     def test_from_response_unicode_xpath(self):\n         response = _buildresponse(b'<form name=\"\\xd1\\x8a\"></form>')\n-        r = self.request_class.from_response(response, formxpath=u\"//form[@name='\\u044a']\")\n+        r = self.request_class.from_response(response, formxpath=\"//form[@name='\\u044a']\")\n         fs = _qs(r)\n         self.assertEqual(fs, {})\n \n-        xpath = u\"//form[@name='\\u03b1']\"\n+        xpath = \"//form[@name='\\u03b1']\"\n         self.assertRaisesRegex(ValueError, re.escape(xpath),\n                                self.request_class.from_response,\n                                response, formxpath=xpath)\n@@ -1246,13 +1246,13 @@ class XmlRpcRequestTest(RequestTest):\n         self._test_request(params=('value',))\n         self._test_request(params=('username', 'password'), methodname='login')\n         self._test_request(params=('response', ), methodresponse='login')\n-        self._test_request(params=(u'pas£',), encoding='utf-8')\n+        self._test_request(params=('pas£',), encoding='utf-8')\n         self._test_request(params=(None,), allow_none=1)\n         self.assertRaises(TypeError, self._test_request)\n         self.assertRaises(TypeError, self._test_request, params=(None,))\n \n     def test_latin1(self):\n-        self._test_request(params=(u'pas£',), encoding='latin1')\n+        self._test_request(params=('pas£',), encoding='latin1')\n \n \n class JsonRequestTest(RequestTest):\n\n@@ -318,28 +318,28 @@ class TextResponseTest(BaseResponseTest):\n \n     def test_unicode_url(self):\n         # instantiate with unicode url without encoding (should set default encoding)\n-        resp = self.response_class(u\"http://www.example.com/\")\n+        resp = self.response_class(\"http://www.example.com/\")\n         self._assert_response_encoding(resp, self.response_class._DEFAULT_ENCODING)\n \n         # make sure urls are converted to str\n-        resp = self.response_class(url=u\"http://www.example.com/\", encoding='utf-8')\n+        resp = self.response_class(url=\"http://www.example.com/\", encoding='utf-8')\n         assert isinstance(resp.url, str)\n \n-        resp = self.response_class(url=u\"http://www.example.com/price/\\xa3\", encoding='utf-8')\n+        resp = self.response_class(url=\"http://www.example.com/price/\\xa3\", encoding='utf-8')\n         self.assertEqual(resp.url, to_unicode(b'http://www.example.com/price/\\xc2\\xa3'))\n-        resp = self.response_class(url=u\"http://www.example.com/price/\\xa3\", encoding='latin-1')\n+        resp = self.response_class(url=\"http://www.example.com/price/\\xa3\", encoding='latin-1')\n         self.assertEqual(resp.url, 'http://www.example.com/price/\\xa3')\n-        resp = self.response_class(u\"http://www.example.com/price/\\xa3\",\n+        resp = self.response_class(\"http://www.example.com/price/\\xa3\",\n                                    headers={\"Content-type\": [\"text/html; charset=utf-8\"]})\n         self.assertEqual(resp.url, to_unicode(b'http://www.example.com/price/\\xc2\\xa3'))\n-        resp = self.response_class(u\"http://www.example.com/price/\\xa3\",\n+        resp = self.response_class(\"http://www.example.com/price/\\xa3\",\n                                    headers={\"Content-type\": [\"text/html; charset=iso-8859-1\"]})\n         self.assertEqual(resp.url, 'http://www.example.com/price/\\xa3')\n \n     def test_unicode_body(self):\n         unicode_string = ('\\u043a\\u0438\\u0440\\u0438\\u043b\\u043b\\u0438\\u0447\\u0435\\u0441\\u043a\\u0438\\u0439 '\n                           '\\u0442\\u0435\\u043a\\u0441\\u0442')\n-        self.assertRaises(TypeError, self.response_class, 'http://www.example.com', body=u'unicode body')\n+        self.assertRaises(TypeError, self.response_class, 'http://www.example.com', body='unicode body')\n \n         original_string = unicode_string.encode('cp1251')\n         r1 = self.response_class('http://www.example.com', body=original_string, encoding='cp1251')\n@@ -355,7 +355,7 @@ class TextResponseTest(BaseResponseTest):\n     def test_encoding(self):\n         r1 = self.response_class(\"http://www.example.com\", body=b\"\\xc2\\xa3\",\n                                  headers={\"Content-type\": [\"text/html; charset=utf-8\"]})\n-        r2 = self.response_class(\"http://www.example.com\", encoding='utf-8', body=u\"\\xa3\")\n+        r2 = self.response_class(\"http://www.example.com\", encoding='utf-8', body=\"\\xa3\")\n         r3 = self.response_class(\"http://www.example.com\", body=b\"\\xa3\",\n                                  headers={\"Content-type\": [\"text/html; charset=iso-8859-1\"]})\n         r4 = self.response_class(\"http://www.example.com\", body=b\"\\xa2\\xa3\")\n@@ -376,14 +376,14 @@ class TextResponseTest(BaseResponseTest):\n         self.assertEqual(r5._headers_encoding(), None)\n         self._assert_response_encoding(r5, \"utf-8\")\n         assert r4._body_inferred_encoding() is not None and r4._body_inferred_encoding() != 'ascii'\n-        self._assert_response_values(r1, 'utf-8', u\"\\xa3\")\n-        self._assert_response_values(r2, 'utf-8', u\"\\xa3\")\n-        self._assert_response_values(r3, 'iso-8859-1', u\"\\xa3\")\n-        self._assert_response_values(r6, 'gb18030', u\"\\u2015\")\n-        self._assert_response_values(r7, 'gb18030', u\"\\u2015\")\n+        self._assert_response_values(r1, 'utf-8', \"\\xa3\")\n+        self._assert_response_values(r2, 'utf-8', \"\\xa3\")\n+        self._assert_response_values(r3, 'iso-8859-1', \"\\xa3\")\n+        self._assert_response_values(r6, 'gb18030', \"\\u2015\")\n+        self._assert_response_values(r7, 'gb18030', \"\\u2015\")\n \n         # TextResponse (and subclasses) must be passed a encoding when instantiating with unicode bodies\n-        self.assertRaises(TypeError, self.response_class, \"http://www.example.com\", body=u\"\\xa3\")\n+        self.assertRaises(TypeError, self.response_class, \"http://www.example.com\", body=\"\\xa3\")\n \n     def test_declared_encoding_invalid(self):\n         \"\"\"Check that unknown declared encodings are ignored\"\"\"\n@@ -391,14 +391,14 @@ class TextResponseTest(BaseResponseTest):\n                                 headers={\"Content-type\": [\"text/html; charset=UKNOWN\"]},\n                                 body=b\"\\xc2\\xa3\")\n         self.assertEqual(r._declared_encoding(), None)\n-        self._assert_response_values(r, 'utf-8', u\"\\xa3\")\n+        self._assert_response_values(r, 'utf-8', \"\\xa3\")\n \n     def test_utf16(self):\n         \"\"\"Test utf-16 because UnicodeDammit is known to have problems with\"\"\"\n         r = self.response_class(\"http://www.example.com\",\n                                 body=b'\\xff\\xfeh\\x00i\\x00',\n                                 encoding='utf-16')\n-        self._assert_response_values(r, 'utf-16', u\"hi\")\n+        self._assert_response_values(r, 'utf-16', \"hi\")\n \n     def test_invalid_utf8_encoded_body_with_valid_utf8_BOM(self):\n         r6 = self.response_class(\"http://www.example.com\",\n@@ -406,8 +406,8 @@ class TextResponseTest(BaseResponseTest):\n                                  body=b\"\\xef\\xbb\\xbfWORD\\xe3\\xab\")\n         self.assertEqual(r6.encoding, 'utf-8')\n         self.assertIn(r6.text, {\n-            u'WORD\\ufffd\\ufffd',  # w3lib < 1.19.0\n-            u'WORD\\ufffd',        # w3lib >= 1.19.0\n+            'WORD\\ufffd\\ufffd',  # w3lib < 1.19.0\n+            'WORD\\ufffd',        # w3lib >= 1.19.0\n         })\n \n     def test_bom_is_removed_from_body(self):\n@@ -422,9 +422,9 @@ class TextResponseTest(BaseResponseTest):\n         # Test response without content-type and BOM encoding\n         response = self.response_class(url, body=body)\n         self.assertEqual(response.encoding, 'utf-8')\n-        self.assertEqual(response.text, u'WORD')\n+        self.assertEqual(response.text, 'WORD')\n         response = self.response_class(url, body=body)\n-        self.assertEqual(response.text, u'WORD')\n+        self.assertEqual(response.text, 'WORD')\n         self.assertEqual(response.encoding, 'utf-8')\n \n         # Body caching sideeffect isn't triggered when encoding is declared in\n@@ -432,28 +432,28 @@ class TextResponseTest(BaseResponseTest):\n         # body\n         response = self.response_class(url, headers=headers, body=body)\n         self.assertEqual(response.encoding, 'utf-8')\n-        self.assertEqual(response.text, u'WORD')\n+        self.assertEqual(response.text, 'WORD')\n         response = self.response_class(url, headers=headers, body=body)\n-        self.assertEqual(response.text, u'WORD')\n+        self.assertEqual(response.text, 'WORD')\n         self.assertEqual(response.encoding, 'utf-8')\n \n     def test_replace_wrong_encoding(self):\n         \"\"\"Test invalid chars are replaced properly\"\"\"\n         r = self.response_class(\"http://www.example.com\", encoding='utf-8', body=b'PREFIX\\xe3\\xabSUFFIX')\n         # XXX: Policy for replacing invalid chars may suffer minor variations\n-        # but it should always contain the unicode replacement char (u'\\ufffd')\n-        assert u'\\ufffd' in r.text, repr(r.text)\n-        assert u'PREFIX' in r.text, repr(r.text)\n-        assert u'SUFFIX' in r.text, repr(r.text)\n+        # but it should always contain the unicode replacement char ('\\ufffd')\n+        assert '\\ufffd' in r.text, repr(r.text)\n+        assert 'PREFIX' in r.text, repr(r.text)\n+        assert 'SUFFIX' in r.text, repr(r.text)\n \n         # Do not destroy html tags due to encoding bugs\n         r = self.response_class(\"http://example.com\", encoding='utf-8',\n                                 body=b'\\xf0<span>value</span>')\n-        assert u'<span>value</span>' in r.text, repr(r.text)\n+        assert '<span>value</span>' in r.text, repr(r.text)\n \n         # FIXME: This test should pass once we stop using BeautifulSoup's UnicodeDammit in TextResponse\n         # r = self.response_class(\"http://www.example.com\", body=b'PREFIX\\xe3\\xabSUFFIX')\n-        # assert u'\\ufffd' in r.text, repr(r.text)\n+        # assert '\\ufffd' in r.text, repr(r.text)\n \n     def test_selector(self):\n         body = b\"<html><head><title>Some page</title><body></body></html>\"\n@@ -466,15 +466,15 @@ class TextResponseTest(BaseResponseTest):\n \n         self.assertEqual(\n             response.selector.xpath(\"//title/text()\").getall(),\n-            [u'Some page']\n+            ['Some page']\n         )\n         self.assertEqual(\n             response.selector.css(\"title::text\").getall(),\n-            [u'Some page']\n+            ['Some page']\n         )\n         self.assertEqual(\n             response.selector.re(\"Some (.*)</title>\"),\n-            [u'page']\n+            ['page']\n         )\n \n     def test_selector_shortcuts(self):\n@@ -595,7 +595,7 @@ class TextResponseTest(BaseResponseTest):\n         resp1 = self.response_class(\n             'http://example.com',\n             encoding='utf8',\n-            body=u'<html><body><a href=\"foo?привет\">click me</a></body></html>'.encode('utf8')\n+            body='<html><body><a href=\"foo?привет\">click me</a></body></html>'.encode('utf8')\n         )\n         req = self._assert_followed_url(\n             resp1.css('a')[0],\n@@ -607,7 +607,7 @@ class TextResponseTest(BaseResponseTest):\n         resp2 = self.response_class(\n             'http://example.com',\n             encoding='cp1251',\n-            body=u'<html><body><a href=\"foo?привет\">click me</a></body></html>'.encode('cp1251')\n+            body='<html><body><a href=\"foo?привет\">click me</a></body></html>'.encode('cp1251')\n         )\n         req = self._assert_followed_url(\n             resp2.css('a')[0],\n@@ -681,8 +681,8 @@ class TextResponseTest(BaseResponseTest):\n \n     def test_body_as_unicode_deprecation_warning(self):\n         with catch_warnings(record=True) as warnings:\n-            r1 = self.response_class(\"http://www.example.com\", body=u'Hello', encoding='utf-8')\n-            self.assertEqual(r1.body_as_unicode(), u'Hello')\n+            r1 = self.response_class(\"http://www.example.com\", body='Hello', encoding='utf-8')\n+            self.assertEqual(r1.body_as_unicode(), 'Hello')\n             self.assertEqual(len(warnings), 1)\n             self.assertEqual(warnings[0].category, ScrapyDeprecationWarning)\n \n@@ -787,7 +787,7 @@ class XmlResponseTest(TextResponseTest):\n \n         self.assertEqual(\n             response.selector.xpath(\"//elem/text()\").getall(),\n-            [u'value']\n+            ['value']\n         )\n \n     def test_selector_shortcuts(self):\n\n@@ -20,8 +20,8 @@ class ItemTest(unittest.TestCase):\n             name = Field()\n \n         i = TestItem()\n-        i['name'] = u'name'\n-        self.assertEqual(i['name'], u'name')\n+        i['name'] = 'name'\n+        self.assertEqual(i['name'], 'name')\n \n     def test_init(self):\n         class TestItem(Item):\n@@ -30,17 +30,17 @@ class ItemTest(unittest.TestCase):\n         i = TestItem()\n         self.assertRaises(KeyError, i.__getitem__, 'name')\n \n-        i2 = TestItem(name=u'john doe')\n-        self.assertEqual(i2['name'], u'john doe')\n+        i2 = TestItem(name='john doe')\n+        self.assertEqual(i2['name'], 'john doe')\n \n-        i3 = TestItem({'name': u'john doe'})\n-        self.assertEqual(i3['name'], u'john doe')\n+        i3 = TestItem({'name': 'john doe'})\n+        self.assertEqual(i3['name'], 'john doe')\n \n         i4 = TestItem(i3)\n-        self.assertEqual(i4['name'], u'john doe')\n+        self.assertEqual(i4['name'], 'john doe')\n \n-        self.assertRaises(KeyError, TestItem, {'name': u'john doe',\n-                                               'other': u'foo'})\n+        self.assertRaises(KeyError, TestItem, {'name': 'john doe',\n+                                               'other': 'foo'})\n \n     def test_invalid_field(self):\n         class TestItem(Item):\n@@ -56,7 +56,7 @@ class ItemTest(unittest.TestCase):\n             number = Field()\n \n         i = TestItem()\n-        i['name'] = u'John Doe'\n+        i['name'] = 'John Doe'\n         i['number'] = 123\n         itemrepr = repr(i)\n \n@@ -101,9 +101,9 @@ class ItemTest(unittest.TestCase):\n \n         i = TestItem()\n         self.assertRaises(KeyError, i.get_name)\n-        i['name'] = u'lala'\n-        self.assertEqual(i.get_name(), u'lala')\n-        i.change_name(u'other')\n+        i['name'] = 'lala'\n+        self.assertEqual(i.get_name(), 'lala')\n+        i.change_name('other')\n         self.assertEqual(i.get_name(), 'other')\n \n     def test_metaclass(self):\n@@ -113,22 +113,22 @@ class ItemTest(unittest.TestCase):\n             values = Field()\n \n         i = TestItem()\n-        i['name'] = u'John'\n+        i['name'] = 'John'\n         self.assertEqual(list(i.keys()), ['name'])\n         self.assertEqual(list(i.values()), ['John'])\n \n-        i['keys'] = u'Keys'\n-        i['values'] = u'Values'\n+        i['keys'] = 'Keys'\n+        i['values'] = 'Values'\n         self.assertSortedEqual(list(i.keys()), ['keys', 'values', 'name'])\n-        self.assertSortedEqual(list(i.values()), [u'Keys', u'Values', u'John'])\n+        self.assertSortedEqual(list(i.values()), ['Keys', 'Values', 'John'])\n \n     def test_metaclass_with_fields_attribute(self):\n         class TestItem(Item):\n             fields = {'new': Field(default='X')}\n \n-        item = TestItem(new=u'New')\n+        item = TestItem(new='New')\n         self.assertSortedEqual(list(item.keys()), ['new'])\n-        self.assertSortedEqual(list(item.values()), [u'New'])\n+        self.assertSortedEqual(list(item.values()), ['New'])\n \n     def test_metaclass_inheritance(self):\n         class ParentItem(Item):\n@@ -238,8 +238,8 @@ class ItemTest(unittest.TestCase):\n             name = Field()\n \n         i = TestItem()\n-        i['name'] = u'John'\n-        self.assertEqual(dict(i), {'name': u'John'})\n+        i['name'] = 'John'\n+        self.assertEqual(dict(i), {'name': 'John'})\n \n     def test_copy(self):\n         class TestItem(Item):\n\n@@ -31,31 +31,31 @@ class Base:\n             page4_url = 'http://example.com/page%204.html'\n \n             self.assertEqual([link for link in lx.extract_links(self.response)], [\n-                Link(url='http://example.com/sample1.html', text=u''),\n-                Link(url='http://example.com/sample2.html', text=u'sample 2'),\n-                Link(url='http://example.com/sample3.html', text=u'sample 3 text'),\n+                Link(url='http://example.com/sample1.html', text=''),\n+                Link(url='http://example.com/sample2.html', text='sample 2'),\n+                Link(url='http://example.com/sample3.html', text='sample 3 text'),\n                 Link(url='http://example.com/sample3.html#foo', text='sample 3 repetition with fragment'),\n-                Link(url='http://www.google.com/something', text=u''),\n-                Link(url='http://example.com/innertag.html', text=u'inner tag'),\n-                Link(url=page4_url, text=u'href with whitespaces'),\n+                Link(url='http://www.google.com/something', text=''),\n+                Link(url='http://example.com/innertag.html', text='inner tag'),\n+                Link(url=page4_url, text='href with whitespaces'),\n             ])\n \n         def test_extract_filter_allow(self):\n             lx = self.extractor_cls(allow=('sample', ))\n             self.assertEqual([link for link in lx.extract_links(self.response)], [\n-                Link(url='http://example.com/sample1.html', text=u''),\n-                Link(url='http://example.com/sample2.html', text=u'sample 2'),\n-                Link(url='http://example.com/sample3.html', text=u'sample 3 text'),\n+                Link(url='http://example.com/sample1.html', text=''),\n+                Link(url='http://example.com/sample2.html', text='sample 2'),\n+                Link(url='http://example.com/sample3.html', text='sample 3 text'),\n                 Link(url='http://example.com/sample3.html#foo', text='sample 3 repetition with fragment')\n             ])\n \n         def test_extract_filter_allow_with_duplicates(self):\n             lx = self.extractor_cls(allow=('sample', ), unique=False)\n             self.assertEqual([link for link in lx.extract_links(self.response)], [\n-                Link(url='http://example.com/sample1.html', text=u''),\n-                Link(url='http://example.com/sample2.html', text=u'sample 2'),\n-                Link(url='http://example.com/sample3.html', text=u'sample 3 text'),\n-                Link(url='http://example.com/sample3.html', text=u'sample 3 repetition'),\n+                Link(url='http://example.com/sample1.html', text=''),\n+                Link(url='http://example.com/sample2.html', text='sample 2'),\n+                Link(url='http://example.com/sample3.html', text='sample 3 text'),\n+                Link(url='http://example.com/sample3.html', text='sample 3 repetition'),\n                 Link(url='http://example.com/sample3.html#foo', text='sample 3 repetition with fragment')\n             ])\n \n@@ -63,10 +63,10 @@ class Base:\n             lx = self.extractor_cls(allow=('sample', ), unique=False,\n                                     canonicalize=True)\n             self.assertEqual([link for link in lx.extract_links(self.response)], [\n-                Link(url='http://example.com/sample1.html', text=u''),\n-                Link(url='http://example.com/sample2.html', text=u'sample 2'),\n-                Link(url='http://example.com/sample3.html', text=u'sample 3 text'),\n-                Link(url='http://example.com/sample3.html', text=u'sample 3 repetition'),\n+                Link(url='http://example.com/sample1.html', text=''),\n+                Link(url='http://example.com/sample2.html', text='sample 2'),\n+                Link(url='http://example.com/sample3.html', text='sample 3 text'),\n+                Link(url='http://example.com/sample3.html', text='sample 3 repetition'),\n                 Link(url='http://example.com/sample3.html', text='sample 3 repetition with fragment')\n             ])\n \n@@ -74,22 +74,22 @@ class Base:\n             lx = self.extractor_cls(allow=('sample',), unique=True,\n                                     canonicalize=True)\n             self.assertEqual([link for link in lx.extract_links(self.response)], [\n-                Link(url='http://example.com/sample1.html', text=u''),\n-                Link(url='http://example.com/sample2.html', text=u'sample 2'),\n-                Link(url='http://example.com/sample3.html', text=u'sample 3 text'),\n+                Link(url='http://example.com/sample1.html', text=''),\n+                Link(url='http://example.com/sample2.html', text='sample 2'),\n+                Link(url='http://example.com/sample3.html', text='sample 3 text'),\n             ])\n \n         def test_extract_filter_allow_and_deny(self):\n             lx = self.extractor_cls(allow=('sample', ), deny=('3', ))\n             self.assertEqual([link for link in lx.extract_links(self.response)], [\n-                Link(url='http://example.com/sample1.html', text=u''),\n-                Link(url='http://example.com/sample2.html', text=u'sample 2'),\n+                Link(url='http://example.com/sample1.html', text=''),\n+                Link(url='http://example.com/sample2.html', text='sample 2'),\n             ])\n \n         def test_extract_filter_allowed_domains(self):\n             lx = self.extractor_cls(allow_domains=('google.com', ))\n             self.assertEqual([link for link in lx.extract_links(self.response)], [\n-                Link(url='http://www.google.com/something', text=u''),\n+                Link(url='http://www.google.com/something', text=''),\n             ])\n \n         def test_extraction_using_single_values(self):\n@@ -97,27 +97,27 @@ class Base:\n \n             lx = self.extractor_cls(allow='sample')\n             self.assertEqual([link for link in lx.extract_links(self.response)], [\n-                Link(url='http://example.com/sample1.html', text=u''),\n-                Link(url='http://example.com/sample2.html', text=u'sample 2'),\n-                Link(url='http://example.com/sample3.html', text=u'sample 3 text'),\n+                Link(url='http://example.com/sample1.html', text=''),\n+                Link(url='http://example.com/sample2.html', text='sample 2'),\n+                Link(url='http://example.com/sample3.html', text='sample 3 text'),\n                 Link(url='http://example.com/sample3.html#foo',\n                      text='sample 3 repetition with fragment')\n             ])\n \n             lx = self.extractor_cls(allow='sample', deny='3')\n             self.assertEqual([link for link in lx.extract_links(self.response)], [\n-                Link(url='http://example.com/sample1.html', text=u''),\n-                Link(url='http://example.com/sample2.html', text=u'sample 2'),\n+                Link(url='http://example.com/sample1.html', text=''),\n+                Link(url='http://example.com/sample2.html', text='sample 2'),\n             ])\n \n             lx = self.extractor_cls(allow_domains='google.com')\n             self.assertEqual([link for link in lx.extract_links(self.response)], [\n-                Link(url='http://www.google.com/something', text=u''),\n+                Link(url='http://www.google.com/something', text=''),\n             ])\n \n             lx = self.extractor_cls(deny_domains='example.com')\n             self.assertEqual([link for link in lx.extract_links(self.response)], [\n-                Link(url='http://www.google.com/something', text=u''),\n+                Link(url='http://www.google.com/something', text=''),\n             ])\n \n         def test_nofollow(self):\n@@ -145,11 +145,11 @@ class Base:\n \n             lx = self.extractor_cls()\n             self.assertEqual(lx.extract_links(response), [\n-                Link(url='http://example.org/about.html', text=u'About us'),\n-                Link(url='http://example.org/follow.html', text=u'Follow this link'),\n-                Link(url='http://example.org/nofollow.html', text=u'Dont follow this one', nofollow=True),\n-                Link(url='http://example.org/nofollow2.html', text=u'Choose to follow or not'),\n-                Link(url='http://google.com/something', text=u'External link not to follow', nofollow=True),\n+                Link(url='http://example.org/about.html', text='About us'),\n+                Link(url='http://example.org/follow.html', text='Follow this link'),\n+                Link(url='http://example.org/nofollow.html', text='Dont follow this one', nofollow=True),\n+                Link(url='http://example.org/nofollow2.html', text='Choose to follow or not'),\n+                Link(url='http://google.com/something', text='External link not to follow', nofollow=True),\n             ])\n \n         def test_matches(self):\n@@ -183,8 +183,8 @@ class Base:\n         def test_restrict_xpaths(self):\n             lx = self.extractor_cls(restrict_xpaths=('//div[@id=\"subwrapper\"]', ))\n             self.assertEqual([link for link in lx.extract_links(self.response)], [\n-                Link(url='http://example.com/sample1.html', text=u''),\n-                Link(url='http://example.com/sample2.html', text=u'sample 2'),\n+                Link(url='http://example.com/sample1.html', text=''),\n+                Link(url='http://example.com/sample2.html', text='sample 2'),\n             ])\n \n         def test_restrict_xpaths_encoding(self):\n@@ -202,14 +202,14 @@ class Base:\n \n             lx = self.extractor_cls(restrict_xpaths=\"//div[@class='links']\")\n             self.assertEqual(lx.extract_links(response),\n-                             [Link(url='http://example.org/about.html', text=u'About us\\xa3')])\n+                             [Link(url='http://example.org/about.html', text='About us\\xa3')])\n \n         def test_restrict_xpaths_with_html_entities(self):\n             html = b'<html><body><p><a href=\"/&hearts;/you?c=&euro;\">text</a></p></body></html>'\n             response = HtmlResponse(\"http://example.org/somepage/index.html\", body=html, encoding='iso8859-15')\n             links = self.extractor_cls(restrict_xpaths='//p').extract_links(response)\n             self.assertEqual(links,\n-                             [Link(url='http://example.org/%E2%99%A5/you?c=%A4', text=u'text')])\n+                             [Link(url='http://example.org/%E2%99%A5/you?c=%A4', text='text')])\n \n         def test_restrict_xpaths_concat_in_handle_data(self):\n             \"\"\"html entities cause SGMLParser to call handle_data hook twice\"\"\"\n@@ -217,22 +217,22 @@ class Base:\n             response = HtmlResponse(\"http://example.org\", body=body, encoding='gb18030')\n             lx = self.extractor_cls(restrict_xpaths=\"//div\")\n             self.assertEqual(lx.extract_links(response),\n-                             [Link(url='http://example.org/foo', text=u'>\\u4eac<\\u4e1c',\n+                             [Link(url='http://example.org/foo', text='>\\u4eac<\\u4e1c',\n                                    fragment='', nofollow=False)])\n \n         def test_restrict_css(self):\n             lx = self.extractor_cls(restrict_css=('#subwrapper a',))\n             self.assertEqual(lx.extract_links(self.response), [\n-                Link(url='http://example.com/sample2.html', text=u'sample 2')\n+                Link(url='http://example.com/sample2.html', text='sample 2')\n             ])\n \n         def test_restrict_css_and_restrict_xpaths_together(self):\n             lx = self.extractor_cls(restrict_xpaths=('//div[@id=\"subwrapper\"]', ),\n                                     restrict_css=('#subwrapper + a', ))\n             self.assertEqual([link for link in lx.extract_links(self.response)], [\n-                Link(url='http://example.com/sample1.html', text=u''),\n-                Link(url='http://example.com/sample2.html', text=u'sample 2'),\n-                Link(url='http://example.com/sample3.html', text=u'sample 3 text'),\n+                Link(url='http://example.com/sample1.html', text=''),\n+                Link(url='http://example.com/sample2.html', text='sample 2'),\n+                Link(url='http://example.com/sample3.html', text='sample 3 text'),\n             ])\n \n         def test_area_tag_with_unicode_present(self):\n@@ -243,7 +243,7 @@ class Base:\n             lx.extract_links(response)\n             lx.extract_links(response)\n             self.assertEqual(lx.extract_links(response),\n-                             [Link(url='http://example.org/foo', text=u'',\n+                             [Link(url='http://example.org/foo', text='',\n                                    fragment='', nofollow=False)])\n \n         def test_encoded_url(self):\n@@ -251,7 +251,7 @@ class Base:\n             response = HtmlResponse(\"http://known.fm/AC%2FDC/\", body=body, encoding='utf8')\n             lx = self.extractor_cls()\n             self.assertEqual(lx.extract_links(response), [\n-                Link(url='http://known.fm/AC%2FDC/?page=2', text=u'BinB', fragment='', nofollow=False),\n+                Link(url='http://known.fm/AC%2FDC/?page=2', text='BinB', fragment='', nofollow=False),\n             ])\n \n         def test_encoded_url_in_restricted_xpath(self):\n@@ -259,7 +259,7 @@ class Base:\n             response = HtmlResponse(\"http://known.fm/AC%2FDC/\", body=body, encoding='utf8')\n             lx = self.extractor_cls(restrict_xpaths=\"//div\")\n             self.assertEqual(lx.extract_links(response), [\n-                Link(url='http://known.fm/AC%2FDC/?page=2', text=u'BinB', fragment='', nofollow=False),\n+                Link(url='http://known.fm/AC%2FDC/?page=2', text='BinB', fragment='', nofollow=False),\n             ])\n \n         def test_ignored_extensions(self):\n@@ -268,7 +268,7 @@ class Base:\n             response = HtmlResponse(\"http://example.org/\", body=html)\n             lx = self.extractor_cls()\n             self.assertEqual(lx.extract_links(response), [\n-                Link(url='http://example.org/page.html', text=u'asd'),\n+                Link(url='http://example.org/page.html', text='asd'),\n             ])\n \n             # override denied extensions\n@@ -308,25 +308,25 @@ class Base:\n             page4_url = 'http://example.com/page%204.html'\n \n             self.assertEqual(lx.extract_links(self.response), [\n-                Link(url='http://example.com/sample1.html', text=u''),\n-                Link(url='http://example.com/sample2.html', text=u'sample 2'),\n-                Link(url='http://example.com/sample3.html', text=u'sample 3 text'),\n+                Link(url='http://example.com/sample1.html', text=''),\n+                Link(url='http://example.com/sample2.html', text='sample 2'),\n+                Link(url='http://example.com/sample3.html', text='sample 3 text'),\n                 Link(url='http://example.com/sample3.html#foo', text='sample 3 repetition with fragment'),\n-                Link(url='http://www.google.com/something', text=u''),\n-                Link(url='http://example.com/innertag.html', text=u'inner tag'),\n-                Link(url=page4_url, text=u'href with whitespaces'),\n+                Link(url='http://www.google.com/something', text=''),\n+                Link(url='http://example.com/innertag.html', text='inner tag'),\n+                Link(url=page4_url, text='href with whitespaces'),\n             ])\n \n             lx = self.extractor_cls(attrs=(\"href\", \"src\"), tags=(\"a\", \"area\", \"img\"), deny_extensions=())\n             self.assertEqual(lx.extract_links(self.response), [\n-                Link(url='http://example.com/sample1.html', text=u''),\n-                Link(url='http://example.com/sample2.html', text=u'sample 2'),\n-                Link(url='http://example.com/sample2.jpg', text=u''),\n-                Link(url='http://example.com/sample3.html', text=u'sample 3 text'),\n+                Link(url='http://example.com/sample1.html', text=''),\n+                Link(url='http://example.com/sample2.html', text='sample 2'),\n+                Link(url='http://example.com/sample2.jpg', text=''),\n+                Link(url='http://example.com/sample3.html', text='sample 3 text'),\n                 Link(url='http://example.com/sample3.html#foo', text='sample 3 repetition with fragment'),\n-                Link(url='http://www.google.com/something', text=u''),\n-                Link(url='http://example.com/innertag.html', text=u'inner tag'),\n-                Link(url=page4_url, text=u'href with whitespaces'),\n+                Link(url='http://www.google.com/something', text=''),\n+                Link(url='http://example.com/innertag.html', text='inner tag'),\n+                Link(url=page4_url, text='href with whitespaces'),\n             ])\n \n             lx = self.extractor_cls(attrs=None)\n@@ -344,24 +344,24 @@ class Base:\n \n             lx = self.extractor_cls()\n             self.assertEqual(lx.extract_links(response), [\n-                Link(url='http://example.com/sample1.html', text=u''),\n-                Link(url='http://example.com/sample2.html', text=u'sample 2'),\n+                Link(url='http://example.com/sample1.html', text=''),\n+                Link(url='http://example.com/sample2.html', text='sample 2'),\n             ])\n \n             lx = self.extractor_cls(tags=\"area\")\n             self.assertEqual(lx.extract_links(response), [\n-                Link(url='http://example.com/sample1.html', text=u''),\n+                Link(url='http://example.com/sample1.html', text=''),\n             ])\n \n             lx = self.extractor_cls(tags=\"a\")\n             self.assertEqual(lx.extract_links(response), [\n-                Link(url='http://example.com/sample2.html', text=u'sample 2'),\n+                Link(url='http://example.com/sample2.html', text='sample 2'),\n             ])\n \n             lx = self.extractor_cls(tags=(\"a\", \"img\"), attrs=(\"href\", \"src\"), deny_extensions=())\n             self.assertEqual(lx.extract_links(response), [\n-                Link(url='http://example.com/sample2.html', text=u'sample 2'),\n-                Link(url='http://example.com/sample2.jpg', text=u''),\n+                Link(url='http://example.com/sample2.html', text='sample 2'),\n+                Link(url='http://example.com/sample2.jpg', text=''),\n             ])\n \n         def test_tags_attrs(self):\n@@ -375,14 +375,14 @@ class Base:\n \n             lx = self.extractor_cls(tags='div', attrs='data-url')\n             self.assertEqual(lx.extract_links(response), [\n-                Link(url='http://example.com/get?id=1', text=u'Item 1', fragment='', nofollow=False),\n-                Link(url='http://example.com/get?id=2', text=u'Item 2', fragment='', nofollow=False)\n+                Link(url='http://example.com/get?id=1', text='Item 1', fragment='', nofollow=False),\n+                Link(url='http://example.com/get?id=2', text='Item 2', fragment='', nofollow=False)\n             ])\n \n             lx = self.extractor_cls(tags=('div',), attrs=('data-url',))\n             self.assertEqual(lx.extract_links(response), [\n-                Link(url='http://example.com/get?id=1', text=u'Item 1', fragment='', nofollow=False),\n-                Link(url='http://example.com/get?id=2', text=u'Item 2', fragment='', nofollow=False)\n+                Link(url='http://example.com/get?id=1', text='Item 1', fragment='', nofollow=False),\n+                Link(url='http://example.com/get?id=2', text='Item 2', fragment='', nofollow=False)\n             ])\n \n         def test_xhtml(self):\n@@ -420,13 +420,13 @@ class Base:\n             self.assertEqual(\n                 lx.extract_links(response),\n                 [\n-                    Link(url='http://example.com/about.html', text=u'About us', fragment='', nofollow=False),\n-                    Link(url='http://example.com/follow.html', text=u'Follow this link', fragment='', nofollow=False),\n-                    Link(url='http://example.com/nofollow.html', text=u'Dont follow this one',\n+                    Link(url='http://example.com/about.html', text='About us', fragment='', nofollow=False),\n+                    Link(url='http://example.com/follow.html', text='Follow this link', fragment='', nofollow=False),\n+                    Link(url='http://example.com/nofollow.html', text='Dont follow this one',\n                          fragment='', nofollow=True),\n-                    Link(url='http://example.com/nofollow2.html', text=u'Choose to follow or not',\n+                    Link(url='http://example.com/nofollow2.html', text='Choose to follow or not',\n                          fragment='', nofollow=False),\n-                    Link(url='http://google.com/something', text=u'External link not to follow', nofollow=True),\n+                    Link(url='http://google.com/something', text='External link not to follow', nofollow=True),\n                 ]\n             )\n \n@@ -436,13 +436,13 @@ class Base:\n             self.assertEqual(\n                 lx.extract_links(response),\n                 [\n-                    Link(url='http://example.com/about.html', text=u'About us', fragment='', nofollow=False),\n-                    Link(url='http://example.com/follow.html', text=u'Follow this link', fragment='', nofollow=False),\n-                    Link(url='http://example.com/nofollow.html', text=u'Dont follow this one',\n+                    Link(url='http://example.com/about.html', text='About us', fragment='', nofollow=False),\n+                    Link(url='http://example.com/follow.html', text='Follow this link', fragment='', nofollow=False),\n+                    Link(url='http://example.com/nofollow.html', text='Dont follow this one',\n                          fragment='', nofollow=True),\n-                    Link(url='http://example.com/nofollow2.html', text=u'Choose to follow or not',\n+                    Link(url='http://example.com/nofollow2.html', text='Choose to follow or not',\n                          fragment='', nofollow=False),\n-                    Link(url='http://google.com/something', text=u'External link not to follow', nofollow=True),\n+                    Link(url='http://google.com/something', text='External link not to follow', nofollow=True),\n                 ]\n             )\n \n@@ -455,8 +455,8 @@ class Base:\n             response = HtmlResponse(\"http://example.org/index.html\", body=html)\n             lx = self.extractor_cls()\n             self.assertEqual([link for link in lx.extract_links(response)], [\n-                Link(url='http://example.org/item1.html', text=u'Item 1', nofollow=False),\n-                Link(url='http://example.org/item3.html', text=u'Item 3', nofollow=False),\n+                Link(url='http://example.org/item1.html', text='Item 1', nofollow=False),\n+                Link(url='http://example.org/item3.html', text='Item 3', nofollow=False),\n             ])\n \n         def test_ftp_links(self):\n@@ -467,7 +467,7 @@ class Base:\n             response = HtmlResponse(\"http://www.example.com/index.html\", body=body, encoding='utf8')\n             lx = self.extractor_cls()\n             self.assertEqual(lx.extract_links(response), [\n-                Link(url='ftp://www.external.com/', text=u'An Item', fragment='', nofollow=False),\n+                Link(url='ftp://www.external.com/', text='An Item', fragment='', nofollow=False),\n             ])\n \n         def test_pickle_extractor(self):\n@@ -487,8 +487,8 @@ class LxmlLinkExtractorTestCase(Base.LinkExtractorTestCase):\n         response = HtmlResponse(\"http://example.org/index.html\", body=html)\n         lx = self.extractor_cls()\n         self.assertEqual([link for link in lx.extract_links(response)], [\n-            Link(url='http://example.org/item1.html', text=u'Item 1', nofollow=False),\n-            Link(url='http://example.org/item3.html', text=u'Item 3', nofollow=False),\n+            Link(url='http://example.org/item1.html', text='Item 1', nofollow=False),\n+            Link(url='http://example.org/item3.html', text='Item 3', nofollow=False),\n         ])\n \n     def test_link_restrict_text(self):\n@@ -501,18 +501,18 @@ class LxmlLinkExtractorTestCase(Base.LinkExtractorTestCase):\n         # Simple text inclusion test\n         lx = self.extractor_cls(restrict_text='dog')\n         self.assertEqual([link for link in lx.extract_links(response)], [\n-            Link(url='http://example.org/item2.html', text=u'Pic of a dog', nofollow=False),\n+            Link(url='http://example.org/item2.html', text='Pic of a dog', nofollow=False),\n         ])\n         # Unique regex test\n         lx = self.extractor_cls(restrict_text=r'of.*dog')\n         self.assertEqual([link for link in lx.extract_links(response)], [\n-            Link(url='http://example.org/item2.html', text=u'Pic of a dog', nofollow=False),\n+            Link(url='http://example.org/item2.html', text='Pic of a dog', nofollow=False),\n         ])\n         # Multiple regex test\n         lx = self.extractor_cls(restrict_text=[r'of.*dog', r'of.*cat'])\n         self.assertEqual([link for link in lx.extract_links(response)], [\n-            Link(url='http://example.org/item1.html', text=u'Pic of a cat', nofollow=False),\n-            Link(url='http://example.org/item2.html', text=u'Pic of a dog', nofollow=False),\n+            Link(url='http://example.org/item1.html', text='Pic of a cat', nofollow=False),\n+            Link(url='http://example.org/item2.html', text='Pic of a dog', nofollow=False),\n         ])\n \n     def test_restrict_xpaths_with_html_entities(self):\n\n@@ -69,23 +69,23 @@ class BasicItemLoaderTest(unittest.TestCase):\n \n     def test_add_value_on_unknown_field(self):\n         il = TestItemLoader()\n-        self.assertRaises(KeyError, il.add_value, 'wrong_field', [u'lala', u'lolo'])\n+        self.assertRaises(KeyError, il.add_value, 'wrong_field', ['lala', 'lolo'])\n \n     def test_load_item_using_default_loader(self):\n         i = TestItem()\n-        i['summary'] = u'lala'\n+        i['summary'] = 'lala'\n         il = ItemLoader(item=i)\n-        il.add_value('name', u'marta')\n+        il.add_value('name', 'marta')\n         item = il.load_item()\n         assert item is i\n-        self.assertEqual(item['summary'], [u'lala'])\n-        self.assertEqual(item['name'], [u'marta'])\n+        self.assertEqual(item['summary'], ['lala'])\n+        self.assertEqual(item['name'], ['marta'])\n \n     def test_load_item_using_custom_loader(self):\n         il = TestItemLoader()\n-        il.add_value('name', u'marta')\n+        il.add_value('name', 'marta')\n         item = il.load_item()\n-        self.assertEqual(item['name'], [u'Marta'])\n+        self.assertEqual(item['name'], ['Marta'])\n \n \n class InitializationTestMixin:\n@@ -290,137 +290,137 @@ class SelectortemLoaderTest(unittest.TestCase):\n         self.assertRaises(RuntimeError, l.get_css, '#name::text')\n \n     def test_init_method_with_selector(self):\n-        sel = Selector(text=u\"<html><body><div>marta</div></body></html>\")\n+        sel = Selector(text=\"<html><body><div>marta</div></body></html>\")\n         l = TestItemLoader(selector=sel)\n         self.assertIs(l.selector, sel)\n \n         l.add_xpath('name', '//div/text()')\n-        self.assertEqual(l.get_output_value('name'), [u'Marta'])\n+        self.assertEqual(l.get_output_value('name'), ['Marta'])\n \n     def test_init_method_with_selector_css(self):\n-        sel = Selector(text=u\"<html><body><div>marta</div></body></html>\")\n+        sel = Selector(text=\"<html><body><div>marta</div></body></html>\")\n         l = TestItemLoader(selector=sel)\n         self.assertIs(l.selector, sel)\n \n         l.add_css('name', 'div::text')\n-        self.assertEqual(l.get_output_value('name'), [u'Marta'])\n+        self.assertEqual(l.get_output_value('name'), ['Marta'])\n \n     def test_init_method_with_response(self):\n         l = TestItemLoader(response=self.response)\n         self.assertTrue(l.selector)\n \n         l.add_xpath('name', '//div/text()')\n-        self.assertEqual(l.get_output_value('name'), [u'Marta'])\n+        self.assertEqual(l.get_output_value('name'), ['Marta'])\n \n     def test_init_method_with_response_css(self):\n         l = TestItemLoader(response=self.response)\n         self.assertTrue(l.selector)\n \n         l.add_css('name', 'div::text')\n-        self.assertEqual(l.get_output_value('name'), [u'Marta'])\n+        self.assertEqual(l.get_output_value('name'), ['Marta'])\n \n         l.add_css('url', 'a::attr(href)')\n-        self.assertEqual(l.get_output_value('url'), [u'http://www.scrapy.org'])\n+        self.assertEqual(l.get_output_value('url'), ['http://www.scrapy.org'])\n \n         # combining/accumulating CSS selectors and XPath expressions\n         l.add_xpath('name', '//div/text()')\n-        self.assertEqual(l.get_output_value('name'), [u'Marta', u'Marta'])\n+        self.assertEqual(l.get_output_value('name'), ['Marta', 'Marta'])\n \n         l.add_xpath('url', '//img/@src')\n-        self.assertEqual(l.get_output_value('url'), [u'http://www.scrapy.org', u'/images/logo.png'])\n+        self.assertEqual(l.get_output_value('url'), ['http://www.scrapy.org', '/images/logo.png'])\n \n     def test_add_xpath_re(self):\n         l = TestItemLoader(response=self.response)\n         l.add_xpath('name', '//div/text()', re='ma')\n-        self.assertEqual(l.get_output_value('name'), [u'Ma'])\n+        self.assertEqual(l.get_output_value('name'), ['Ma'])\n \n     def test_replace_xpath(self):\n         l = TestItemLoader(response=self.response)\n         self.assertTrue(l.selector)\n         l.add_xpath('name', '//div/text()')\n-        self.assertEqual(l.get_output_value('name'), [u'Marta'])\n+        self.assertEqual(l.get_output_value('name'), ['Marta'])\n         l.replace_xpath('name', '//p/text()')\n-        self.assertEqual(l.get_output_value('name'), [u'Paragraph'])\n+        self.assertEqual(l.get_output_value('name'), ['Paragraph'])\n \n         l.replace_xpath('name', ['//p/text()', '//div/text()'])\n-        self.assertEqual(l.get_output_value('name'), [u'Paragraph', 'Marta'])\n+        self.assertEqual(l.get_output_value('name'), ['Paragraph', 'Marta'])\n \n     def test_get_xpath(self):\n         l = TestItemLoader(response=self.response)\n-        self.assertEqual(l.get_xpath('//p/text()'), [u'paragraph'])\n-        self.assertEqual(l.get_xpath('//p/text()', TakeFirst()), u'paragraph')\n-        self.assertEqual(l.get_xpath('//p/text()', TakeFirst(), re='pa'), u'pa')\n+        self.assertEqual(l.get_xpath('//p/text()'), ['paragraph'])\n+        self.assertEqual(l.get_xpath('//p/text()', TakeFirst()), 'paragraph')\n+        self.assertEqual(l.get_xpath('//p/text()', TakeFirst(), re='pa'), 'pa')\n \n-        self.assertEqual(l.get_xpath(['//p/text()', '//div/text()']), [u'paragraph', 'marta'])\n+        self.assertEqual(l.get_xpath(['//p/text()', '//div/text()']), ['paragraph', 'marta'])\n \n     def test_replace_xpath_multi_fields(self):\n         l = TestItemLoader(response=self.response)\n         l.add_xpath(None, '//div/text()', TakeFirst(), lambda x: {'name': x})\n-        self.assertEqual(l.get_output_value('name'), [u'Marta'])\n+        self.assertEqual(l.get_output_value('name'), ['Marta'])\n         l.replace_xpath(None, '//p/text()', TakeFirst(), lambda x: {'name': x})\n-        self.assertEqual(l.get_output_value('name'), [u'Paragraph'])\n+        self.assertEqual(l.get_output_value('name'), ['Paragraph'])\n \n     def test_replace_xpath_re(self):\n         l = TestItemLoader(response=self.response)\n         self.assertTrue(l.selector)\n         l.add_xpath('name', '//div/text()')\n-        self.assertEqual(l.get_output_value('name'), [u'Marta'])\n+        self.assertEqual(l.get_output_value('name'), ['Marta'])\n         l.replace_xpath('name', '//div/text()', re='ma')\n-        self.assertEqual(l.get_output_value('name'), [u'Ma'])\n+        self.assertEqual(l.get_output_value('name'), ['Ma'])\n \n     def test_add_css_re(self):\n         l = TestItemLoader(response=self.response)\n         l.add_css('name', 'div::text', re='ma')\n-        self.assertEqual(l.get_output_value('name'), [u'Ma'])\n+        self.assertEqual(l.get_output_value('name'), ['Ma'])\n \n         l.add_css('url', 'a::attr(href)', re='http://(.+)')\n-        self.assertEqual(l.get_output_value('url'), [u'www.scrapy.org'])\n+        self.assertEqual(l.get_output_value('url'), ['www.scrapy.org'])\n \n     def test_replace_css(self):\n         l = TestItemLoader(response=self.response)\n         self.assertTrue(l.selector)\n         l.add_css('name', 'div::text')\n-        self.assertEqual(l.get_output_value('name'), [u'Marta'])\n+        self.assertEqual(l.get_output_value('name'), ['Marta'])\n         l.replace_css('name', 'p::text')\n-        self.assertEqual(l.get_output_value('name'), [u'Paragraph'])\n+        self.assertEqual(l.get_output_value('name'), ['Paragraph'])\n \n         l.replace_css('name', ['p::text', 'div::text'])\n-        self.assertEqual(l.get_output_value('name'), [u'Paragraph', 'Marta'])\n+        self.assertEqual(l.get_output_value('name'), ['Paragraph', 'Marta'])\n \n         l.add_css('url', 'a::attr(href)', re='http://(.+)')\n-        self.assertEqual(l.get_output_value('url'), [u'www.scrapy.org'])\n+        self.assertEqual(l.get_output_value('url'), ['www.scrapy.org'])\n         l.replace_css('url', 'img::attr(src)')\n-        self.assertEqual(l.get_output_value('url'), [u'/images/logo.png'])\n+        self.assertEqual(l.get_output_value('url'), ['/images/logo.png'])\n \n     def test_get_css(self):\n         l = TestItemLoader(response=self.response)\n-        self.assertEqual(l.get_css('p::text'), [u'paragraph'])\n-        self.assertEqual(l.get_css('p::text', TakeFirst()), u'paragraph')\n-        self.assertEqual(l.get_css('p::text', TakeFirst(), re='pa'), u'pa')\n+        self.assertEqual(l.get_css('p::text'), ['paragraph'])\n+        self.assertEqual(l.get_css('p::text', TakeFirst()), 'paragraph')\n+        self.assertEqual(l.get_css('p::text', TakeFirst(), re='pa'), 'pa')\n \n-        self.assertEqual(l.get_css(['p::text', 'div::text']), [u'paragraph', 'marta'])\n+        self.assertEqual(l.get_css(['p::text', 'div::text']), ['paragraph', 'marta'])\n         self.assertEqual(l.get_css(['a::attr(href)', 'img::attr(src)']),\n-                         [u'http://www.scrapy.org', u'/images/logo.png'])\n+                         ['http://www.scrapy.org', '/images/logo.png'])\n \n     def test_replace_css_multi_fields(self):\n         l = TestItemLoader(response=self.response)\n         l.add_css(None, 'div::text', TakeFirst(), lambda x: {'name': x})\n-        self.assertEqual(l.get_output_value('name'), [u'Marta'])\n+        self.assertEqual(l.get_output_value('name'), ['Marta'])\n         l.replace_css(None, 'p::text', TakeFirst(), lambda x: {'name': x})\n-        self.assertEqual(l.get_output_value('name'), [u'Paragraph'])\n+        self.assertEqual(l.get_output_value('name'), ['Paragraph'])\n \n         l.add_css(None, 'a::attr(href)', TakeFirst(), lambda x: {'url': x})\n-        self.assertEqual(l.get_output_value('url'), [u'http://www.scrapy.org'])\n+        self.assertEqual(l.get_output_value('url'), ['http://www.scrapy.org'])\n         l.replace_css(None, 'img::attr(src)', TakeFirst(), lambda x: {'url': x})\n-        self.assertEqual(l.get_output_value('url'), [u'/images/logo.png'])\n+        self.assertEqual(l.get_output_value('url'), ['/images/logo.png'])\n \n     def test_replace_css_re(self):\n         l = TestItemLoader(response=self.response)\n         self.assertTrue(l.selector)\n         l.add_css('url', 'a::attr(href)')\n-        self.assertEqual(l.get_output_value('url'), [u'http://www.scrapy.org'])\n+        self.assertEqual(l.get_output_value('url'), ['http://www.scrapy.org'])\n         l.replace_css('url', 'a::attr(href)', re=r'http://www\\.(.+)')\n-        self.assertEqual(l.get_output_value('url'), [u'scrapy.org'])\n+        self.assertEqual(l.get_output_value('url'), ['scrapy.org'])\n \n \n class SubselectorLoaderTest(unittest.TestCase):\n@@ -447,9 +447,9 @@ class SubselectorLoaderTest(unittest.TestCase):\n         nl.add_css('name_div', '#id')\n         nl.add_value('name_value', nl.selector.xpath('div[@id = \"id\"]/text()').getall())\n \n-        self.assertEqual(l.get_output_value('name'), [u'marta'])\n-        self.assertEqual(l.get_output_value('name_div'), [u'<div id=\"id\">marta</div>'])\n-        self.assertEqual(l.get_output_value('name_value'), [u'marta'])\n+        self.assertEqual(l.get_output_value('name'), ['marta'])\n+        self.assertEqual(l.get_output_value('name_div'), ['<div id=\"id\">marta</div>'])\n+        self.assertEqual(l.get_output_value('name_value'), ['marta'])\n \n         self.assertEqual(l.get_output_value('name'), nl.get_output_value('name'))\n         self.assertEqual(l.get_output_value('name_div'), nl.get_output_value('name_div'))\n@@ -462,9 +462,9 @@ class SubselectorLoaderTest(unittest.TestCase):\n         nl.add_css('name_div', '#id')\n         nl.add_value('name_value', nl.selector.xpath('div[@id = \"id\"]/text()').getall())\n \n-        self.assertEqual(l.get_output_value('name'), [u'marta'])\n-        self.assertEqual(l.get_output_value('name_div'), [u'<div id=\"id\">marta</div>'])\n-        self.assertEqual(l.get_output_value('name_value'), [u'marta'])\n+        self.assertEqual(l.get_output_value('name'), ['marta'])\n+        self.assertEqual(l.get_output_value('name_div'), ['<div id=\"id\">marta</div>'])\n+        self.assertEqual(l.get_output_value('name_value'), ['marta'])\n \n         self.assertEqual(l.get_output_value('name'), nl.get_output_value('name'))\n         self.assertEqual(l.get_output_value('name_div'), nl.get_output_value('name_div'))\n@@ -476,11 +476,11 @@ class SubselectorLoaderTest(unittest.TestCase):\n         nl2 = nl1.nested_xpath('a')\n \n         l.add_xpath('url', '//footer/a/@href')\n-        self.assertEqual(l.get_output_value('url'), [u'http://www.scrapy.org'])\n+        self.assertEqual(l.get_output_value('url'), ['http://www.scrapy.org'])\n         nl1.replace_xpath('url', 'img/@src')\n-        self.assertEqual(l.get_output_value('url'), [u'/images/logo.png'])\n+        self.assertEqual(l.get_output_value('url'), ['/images/logo.png'])\n         nl2.replace_xpath('url', '@href')\n-        self.assertEqual(l.get_output_value('url'), [u'http://www.scrapy.org'])\n+        self.assertEqual(l.get_output_value('url'), ['http://www.scrapy.org'])\n \n     def test_nested_ordering(self):\n         l = NestedItemLoader(response=self.response)\n@@ -493,10 +493,10 @@ class SubselectorLoaderTest(unittest.TestCase):\n         l.add_xpath('url', '//footer/a/@href')\n \n         self.assertEqual(l.get_output_value('url'), [\n-            u'/images/logo.png',\n-            u'http://www.scrapy.org',\n-            u'homepage',\n-            u'http://www.scrapy.org',\n+            '/images/logo.png',\n+            'http://www.scrapy.org',\n+            'homepage',\n+            'http://www.scrapy.org',\n         ])\n \n     def test_nested_load_item(self):\n@@ -514,9 +514,9 @@ class SubselectorLoaderTest(unittest.TestCase):\n         assert item is nl1.item\n         assert item is nl2.item\n \n-        self.assertEqual(item['name'], [u'marta'])\n-        self.assertEqual(item['url'], [u'http://www.scrapy.org'])\n-        self.assertEqual(item['image'], [u'/images/logo.png'])\n+        self.assertEqual(item['name'], ['marta'])\n+        self.assertEqual(item['url'], ['http://www.scrapy.org'])\n+        self.assertEqual(item['image'], ['/images/logo.png'])\n \n \n # Functions as processors\n\n@@ -51,19 +51,19 @@ class BasicItemLoaderTest(unittest.TestCase):\n \n     def test_load_item_using_default_loader(self):\n         i = TestItem()\n-        i['summary'] = u'lala'\n+        i['summary'] = 'lala'\n         il = ItemLoader(item=i)\n-        il.add_value('name', u'marta')\n+        il.add_value('name', 'marta')\n         item = il.load_item()\n         assert item is i\n-        self.assertEqual(item['summary'], [u'lala'])\n-        self.assertEqual(item['name'], [u'marta'])\n+        self.assertEqual(item['summary'], ['lala'])\n+        self.assertEqual(item['name'], ['marta'])\n \n     def test_load_item_using_custom_loader(self):\n         il = TestItemLoader()\n-        il.add_value('name', u'marta')\n+        il.add_value('name', 'marta')\n         item = il.load_item()\n-        self.assertEqual(item['name'], [u'Marta'])\n+        self.assertEqual(item['name'], ['Marta'])\n \n     def test_load_item_ignore_none_field_values(self):\n         def validate_sku(value):\n@@ -76,23 +76,23 @@ class BasicItemLoaderTest(unittest.TestCase):\n             price_out = Compose(TakeFirst(), float)\n             sku_out = Compose(TakeFirst(), validate_sku)\n \n-        valid_fragment = u'SKU: 1234'\n-        invalid_fragment = u'SKU: not available'\n+        valid_fragment = 'SKU: 1234'\n+        invalid_fragment = 'SKU: not available'\n         sku_re = 'SKU: (.+)'\n \n         il = MyLoader(item={})\n         # Should not return \"sku: None\".\n         il.add_value('sku', [invalid_fragment], re=sku_re)\n         # Should not ignore empty values.\n-        il.add_value('name', u'')\n-        il.add_value('price', [u'0'])\n+        il.add_value('name', '')\n+        il.add_value('price', ['0'])\n         self.assertEqual(il.load_item(), {\n-            'name': u'',\n+            'name': '',\n             'price': 0.0,\n         })\n \n         il.replace_value('sku', [valid_fragment], re=sku_re)\n-        self.assertEqual(il.load_item()['sku'], u'1234')\n+        self.assertEqual(il.load_item()['sku'], '1234')\n \n     def test_self_referencing_loader(self):\n         class MyLoader(ItemLoader):\n@@ -117,19 +117,19 @@ class BasicItemLoaderTest(unittest.TestCase):\n \n     def test_add_value(self):\n         il = TestItemLoader()\n-        il.add_value('name', u'marta')\n-        self.assertEqual(il.get_collected_values('name'), [u'Marta'])\n-        self.assertEqual(il.get_output_value('name'), [u'Marta'])\n-        il.add_value('name', u'pepe')\n-        self.assertEqual(il.get_collected_values('name'), [u'Marta', u'Pepe'])\n-        self.assertEqual(il.get_output_value('name'), [u'Marta', u'Pepe'])\n+        il.add_value('name', 'marta')\n+        self.assertEqual(il.get_collected_values('name'), ['Marta'])\n+        self.assertEqual(il.get_output_value('name'), ['Marta'])\n+        il.add_value('name', 'pepe')\n+        self.assertEqual(il.get_collected_values('name'), ['Marta', 'Pepe'])\n+        self.assertEqual(il.get_output_value('name'), ['Marta', 'Pepe'])\n \n         # test add object value\n         il.add_value('summary', {'key': 1})\n         self.assertEqual(il.get_collected_values('summary'), [{'key': 1}])\n \n-        il.add_value(None, u'Jim', lambda x: {'name': x})\n-        self.assertEqual(il.get_collected_values('name'), [u'Marta', u'Pepe', u'Jim'])\n+        il.add_value(None, 'Jim', lambda x: {'name': x})\n+        self.assertEqual(il.get_collected_values('name'), ['Marta', 'Pepe', 'Jim'])\n \n     def test_add_zero(self):\n         il = NameItemLoader()\n@@ -138,49 +138,49 @@ class BasicItemLoaderTest(unittest.TestCase):\n \n     def test_replace_value(self):\n         il = TestItemLoader()\n-        il.replace_value('name', u'marta')\n-        self.assertEqual(il.get_collected_values('name'), [u'Marta'])\n-        self.assertEqual(il.get_output_value('name'), [u'Marta'])\n-        il.replace_value('name', u'pepe')\n-        self.assertEqual(il.get_collected_values('name'), [u'Pepe'])\n-        self.assertEqual(il.get_output_value('name'), [u'Pepe'])\n+        il.replace_value('name', 'marta')\n+        self.assertEqual(il.get_collected_values('name'), ['Marta'])\n+        self.assertEqual(il.get_output_value('name'), ['Marta'])\n+        il.replace_value('name', 'pepe')\n+        self.assertEqual(il.get_collected_values('name'), ['Pepe'])\n+        self.assertEqual(il.get_output_value('name'), ['Pepe'])\n \n-        il.replace_value(None, u'Jim', lambda x: {'name': x})\n-        self.assertEqual(il.get_collected_values('name'), [u'Jim'])\n+        il.replace_value(None, 'Jim', lambda x: {'name': x})\n+        self.assertEqual(il.get_collected_values('name'), ['Jim'])\n \n     def test_get_value(self):\n         il = NameItemLoader()\n-        self.assertEqual(u'FOO', il.get_value([u'foo', u'bar'], TakeFirst(), str.upper))\n-        self.assertEqual([u'foo', u'bar'], il.get_value([u'name:foo', u'name:bar'], re=u'name:(.*)$'))\n-        self.assertEqual(u'foo', il.get_value([u'name:foo', u'name:bar'], TakeFirst(), re=u'name:(.*)$'))\n+        self.assertEqual('FOO', il.get_value(['foo', 'bar'], TakeFirst(), str.upper))\n+        self.assertEqual(['foo', 'bar'], il.get_value(['name:foo', 'name:bar'], re='name:(.*)$'))\n+        self.assertEqual('foo', il.get_value(['name:foo', 'name:bar'], TakeFirst(), re='name:(.*)$'))\n \n-        il.add_value('name', [u'name:foo', u'name:bar'], TakeFirst(), re=u'name:(.*)$')\n-        self.assertEqual([u'foo'], il.get_collected_values('name'))\n-        il.replace_value('name', u'name:bar', re=u'name:(.*)$')\n-        self.assertEqual([u'bar'], il.get_collected_values('name'))\n+        il.add_value('name', ['name:foo', 'name:bar'], TakeFirst(), re='name:(.*)$')\n+        self.assertEqual(['foo'], il.get_collected_values('name'))\n+        il.replace_value('name', 'name:bar', re='name:(.*)$')\n+        self.assertEqual(['bar'], il.get_collected_values('name'))\n \n     def test_iter_on_input_processor_input(self):\n         class NameFirstItemLoader(NameItemLoader):\n             name_in = TakeFirst()\n \n         il = NameFirstItemLoader()\n-        il.add_value('name', u'marta')\n-        self.assertEqual(il.get_collected_values('name'), [u'marta'])\n+        il.add_value('name', 'marta')\n+        self.assertEqual(il.get_collected_values('name'), ['marta'])\n         il = NameFirstItemLoader()\n-        il.add_value('name', [u'marta', u'jose'])\n-        self.assertEqual(il.get_collected_values('name'), [u'marta'])\n+        il.add_value('name', ['marta', 'jose'])\n+        self.assertEqual(il.get_collected_values('name'), ['marta'])\n \n         il = NameFirstItemLoader()\n-        il.replace_value('name', u'marta')\n-        self.assertEqual(il.get_collected_values('name'), [u'marta'])\n+        il.replace_value('name', 'marta')\n+        self.assertEqual(il.get_collected_values('name'), ['marta'])\n         il = NameFirstItemLoader()\n-        il.replace_value('name', [u'marta', u'jose'])\n-        self.assertEqual(il.get_collected_values('name'), [u'marta'])\n+        il.replace_value('name', ['marta', 'jose'])\n+        self.assertEqual(il.get_collected_values('name'), ['marta'])\n \n         il = NameFirstItemLoader()\n-        il.add_value('name', u'marta')\n-        il.add_value('name', [u'jose', u'pedro'])\n-        self.assertEqual(il.get_collected_values('name'), [u'marta', u'jose'])\n+        il.add_value('name', 'marta')\n+        il.add_value('name', ['jose', 'pedro'])\n+        self.assertEqual(il.get_collected_values('name'), ['marta', 'jose'])\n \n     def test_map_compose_filter(self):\n         def filter_world(x):\n@@ -195,87 +195,87 @@ class BasicItemLoaderTest(unittest.TestCase):\n             name_in = MapCompose(lambda v: v.title(), lambda v: v[:-1])\n \n         il = TestItemLoader()\n-        il.add_value('name', u'marta')\n-        self.assertEqual(il.get_output_value('name'), [u'Mart'])\n+        il.add_value('name', 'marta')\n+        self.assertEqual(il.get_output_value('name'), ['Mart'])\n         item = il.load_item()\n-        self.assertEqual(item['name'], [u'Mart'])\n+        self.assertEqual(item['name'], ['Mart'])\n \n     def test_default_input_processor(self):\n         il = DefaultedItemLoader()\n-        il.add_value('name', u'marta')\n-        self.assertEqual(il.get_output_value('name'), [u'mart'])\n+        il.add_value('name', 'marta')\n+        self.assertEqual(il.get_output_value('name'), ['mart'])\n \n     def test_inherited_default_input_processor(self):\n         class InheritDefaultedItemLoader(DefaultedItemLoader):\n             pass\n \n         il = InheritDefaultedItemLoader()\n-        il.add_value('name', u'marta')\n-        self.assertEqual(il.get_output_value('name'), [u'mart'])\n+        il.add_value('name', 'marta')\n+        self.assertEqual(il.get_output_value('name'), ['mart'])\n \n     def test_input_processor_inheritance(self):\n         class ChildItemLoader(TestItemLoader):\n             url_in = MapCompose(lambda v: v.lower())\n \n         il = ChildItemLoader()\n-        il.add_value('url', u'HTTP://scrapy.ORG')\n-        self.assertEqual(il.get_output_value('url'), [u'http://scrapy.org'])\n-        il.add_value('name', u'marta')\n-        self.assertEqual(il.get_output_value('name'), [u'Marta'])\n+        il.add_value('url', 'HTTP://scrapy.ORG')\n+        self.assertEqual(il.get_output_value('url'), ['http://scrapy.org'])\n+        il.add_value('name', 'marta')\n+        self.assertEqual(il.get_output_value('name'), ['Marta'])\n \n         class ChildChildItemLoader(ChildItemLoader):\n             url_in = MapCompose(lambda v: v.upper())\n             summary_in = MapCompose(lambda v: v)\n \n         il = ChildChildItemLoader()\n-        il.add_value('url', u'http://scrapy.org')\n-        self.assertEqual(il.get_output_value('url'), [u'HTTP://SCRAPY.ORG'])\n-        il.add_value('name', u'marta')\n-        self.assertEqual(il.get_output_value('name'), [u'Marta'])\n+        il.add_value('url', 'http://scrapy.org')\n+        self.assertEqual(il.get_output_value('url'), ['HTTP://SCRAPY.ORG'])\n+        il.add_value('name', 'marta')\n+        self.assertEqual(il.get_output_value('name'), ['Marta'])\n \n     def test_empty_map_compose(self):\n         class IdentityDefaultedItemLoader(DefaultedItemLoader):\n             name_in = MapCompose()\n \n         il = IdentityDefaultedItemLoader()\n-        il.add_value('name', u'marta')\n-        self.assertEqual(il.get_output_value('name'), [u'marta'])\n+        il.add_value('name', 'marta')\n+        self.assertEqual(il.get_output_value('name'), ['marta'])\n \n     def test_identity_input_processor(self):\n         class IdentityDefaultedItemLoader(DefaultedItemLoader):\n             name_in = Identity()\n \n         il = IdentityDefaultedItemLoader()\n-        il.add_value('name', u'marta')\n-        self.assertEqual(il.get_output_value('name'), [u'marta'])\n+        il.add_value('name', 'marta')\n+        self.assertEqual(il.get_output_value('name'), ['marta'])\n \n     def test_extend_custom_input_processors(self):\n         class ChildItemLoader(TestItemLoader):\n             name_in = MapCompose(TestItemLoader.name_in, str.swapcase)\n \n         il = ChildItemLoader()\n-        il.add_value('name', u'marta')\n-        self.assertEqual(il.get_output_value('name'), [u'mARTA'])\n+        il.add_value('name', 'marta')\n+        self.assertEqual(il.get_output_value('name'), ['mARTA'])\n \n     def test_extend_default_input_processors(self):\n         class ChildDefaultedItemLoader(DefaultedItemLoader):\n             name_in = MapCompose(DefaultedItemLoader.default_input_processor, str.swapcase)\n \n         il = ChildDefaultedItemLoader()\n-        il.add_value('name', u'marta')\n-        self.assertEqual(il.get_output_value('name'), [u'MART'])\n+        il.add_value('name', 'marta')\n+        self.assertEqual(il.get_output_value('name'), ['MART'])\n \n     def test_output_processor_using_function(self):\n         il = TestItemLoader()\n-        il.add_value('name', [u'mar', u'ta'])\n-        self.assertEqual(il.get_output_value('name'), [u'Mar', u'Ta'])\n+        il.add_value('name', ['mar', 'ta'])\n+        self.assertEqual(il.get_output_value('name'), ['Mar', 'Ta'])\n \n         class TakeFirstItemLoader(TestItemLoader):\n-            name_out = u\" \".join\n+            name_out = \" \".join\n \n         il = TakeFirstItemLoader()\n-        il.add_value('name', [u'mar', u'ta'])\n-        self.assertEqual(il.get_output_value('name'), u'Mar Ta')\n+        il.add_value('name', ['mar', 'ta'])\n+        self.assertEqual(il.get_output_value('name'), 'Mar Ta')\n \n     def test_output_processor_error(self):\n         class TestItemLoader(ItemLoader):\n@@ -283,9 +283,9 @@ class BasicItemLoaderTest(unittest.TestCase):\n             name_out = MapCompose(float)\n \n         il = TestItemLoader()\n-        il.add_value('name', [u'$10'])\n+        il.add_value('name', ['$10'])\n         try:\n-            float(u'$10')\n+            float('$10')\n         except Exception as e:\n             expected_exc_str = str(e)\n \n@@ -303,53 +303,53 @@ class BasicItemLoaderTest(unittest.TestCase):\n \n     def test_output_processor_using_classes(self):\n         il = TestItemLoader()\n-        il.add_value('name', [u'mar', u'ta'])\n-        self.assertEqual(il.get_output_value('name'), [u'Mar', u'Ta'])\n+        il.add_value('name', ['mar', 'ta'])\n+        self.assertEqual(il.get_output_value('name'), ['Mar', 'Ta'])\n \n         class TakeFirstItemLoader(TestItemLoader):\n             name_out = Join()\n \n         il = TakeFirstItemLoader()\n-        il.add_value('name', [u'mar', u'ta'])\n-        self.assertEqual(il.get_output_value('name'), u'Mar Ta')\n+        il.add_value('name', ['mar', 'ta'])\n+        self.assertEqual(il.get_output_value('name'), 'Mar Ta')\n \n         class TakeFirstItemLoader(TestItemLoader):\n             name_out = Join(\"<br>\")\n \n         il = TakeFirstItemLoader()\n-        il.add_value('name', [u'mar', u'ta'])\n-        self.assertEqual(il.get_output_value('name'), u'Mar<br>Ta')\n+        il.add_value('name', ['mar', 'ta'])\n+        self.assertEqual(il.get_output_value('name'), 'Mar<br>Ta')\n \n     def test_default_output_processor(self):\n         il = TestItemLoader()\n-        il.add_value('name', [u'mar', u'ta'])\n-        self.assertEqual(il.get_output_value('name'), [u'Mar', u'Ta'])\n+        il.add_value('name', ['mar', 'ta'])\n+        self.assertEqual(il.get_output_value('name'), ['Mar', 'Ta'])\n \n         class LalaItemLoader(TestItemLoader):\n             default_output_processor = Identity()\n \n         il = LalaItemLoader()\n-        il.add_value('name', [u'mar', u'ta'])\n-        self.assertEqual(il.get_output_value('name'), [u'Mar', u'Ta'])\n+        il.add_value('name', ['mar', 'ta'])\n+        self.assertEqual(il.get_output_value('name'), ['Mar', 'Ta'])\n \n     def test_loader_context_on_declaration(self):\n         class ChildItemLoader(TestItemLoader):\n-            url_in = MapCompose(processor_with_args, key=u'val')\n+            url_in = MapCompose(processor_with_args, key='val')\n \n         il = ChildItemLoader()\n-        il.add_value('url', u'text')\n+        il.add_value('url', 'text')\n         self.assertEqual(il.get_output_value('url'), ['val'])\n-        il.replace_value('url', u'text2')\n+        il.replace_value('url', 'text2')\n         self.assertEqual(il.get_output_value('url'), ['val'])\n \n     def test_loader_context_on_instantiation(self):\n         class ChildItemLoader(TestItemLoader):\n             url_in = MapCompose(processor_with_args)\n \n-        il = ChildItemLoader(key=u'val')\n-        il.add_value('url', u'text')\n+        il = ChildItemLoader(key='val')\n+        il.add_value('url', 'text')\n         self.assertEqual(il.get_output_value('url'), ['val'])\n-        il.replace_value('url', u'text2')\n+        il.replace_value('url', 'text2')\n         self.assertEqual(il.get_output_value('url'), ['val'])\n \n     def test_loader_context_on_assign(self):\n@@ -357,10 +357,10 @@ class BasicItemLoaderTest(unittest.TestCase):\n             url_in = MapCompose(processor_with_args)\n \n         il = ChildItemLoader()\n-        il.context['key'] = u'val'\n-        il.add_value('url', u'text')\n+        il.context['key'] = 'val'\n+        il.add_value('url', 'text')\n         self.assertEqual(il.get_output_value('url'), ['val'])\n-        il.replace_value('url', u'text2')\n+        il.replace_value('url', 'text2')\n         self.assertEqual(il.get_output_value('url'), ['val'])\n \n     def test_item_passed_to_input_processor_functions(self):\n@@ -372,9 +372,9 @@ class BasicItemLoaderTest(unittest.TestCase):\n \n         it = TestItem(name='marta')\n         il = ChildItemLoader(item=it)\n-        il.add_value('url', u'text')\n+        il.add_value('url', 'text')\n         self.assertEqual(il.get_output_value('url'), ['marta'])\n-        il.replace_value('url', u'text2')\n+        il.replace_value('url', 'text2')\n         self.assertEqual(il.get_output_value('url'), ['marta'])\n \n     def test_compose_processor(self):\n@@ -382,10 +382,10 @@ class BasicItemLoaderTest(unittest.TestCase):\n             name_out = Compose(lambda v: v[0], lambda v: v.title(), lambda v: v[:-1])\n \n         il = TestItemLoader()\n-        il.add_value('name', [u'marta', u'other'])\n-        self.assertEqual(il.get_output_value('name'), u'Mart')\n+        il.add_value('name', ['marta', 'other'])\n+        self.assertEqual(il.get_output_value('name'), 'Mart')\n         item = il.load_item()\n-        self.assertEqual(item['name'], u'Mart')\n+        self.assertEqual(item['name'], 'Mart')\n \n     def test_partial_processor(self):\n         def join(values, sep=None, loader_context=None, ignored=None):\n@@ -402,13 +402,13 @@ class BasicItemLoaderTest(unittest.TestCase):\n             summary_out = Compose(partial(join, ignored='foo'))\n \n         il = TestItemLoader()\n-        il.add_value('name', [u'rabbit', u'hole'])\n-        il.add_value('url', [u'rabbit', u'hole'])\n-        il.add_value('summary', [u'rabbit', u'hole'])\n+        il.add_value('name', ['rabbit', 'hole'])\n+        il.add_value('url', ['rabbit', 'hole'])\n+        il.add_value('summary', ['rabbit', 'hole'])\n         item = il.load_item()\n-        self.assertEqual(item['name'], u'rabbit+hole')\n-        self.assertEqual(item['url'], u'rabbit.hole')\n-        self.assertEqual(item['summary'], u'rabbithole')\n+        self.assertEqual(item['name'], 'rabbit+hole')\n+        self.assertEqual(item['url'], 'rabbit.hole')\n+        self.assertEqual(item['summary'], 'rabbithole')\n \n     def test_error_input_processor(self):\n         class TestItem(Item):\n@@ -420,7 +420,7 @@ class BasicItemLoaderTest(unittest.TestCase):\n \n         il = TestItemLoader()\n         self.assertRaises(ValueError, il.add_value, 'name',\n-                          [u'marta', u'other'])\n+                          ['marta', 'other'])\n \n     def test_error_output_processor(self):\n         class TestItem(Item):\n@@ -431,7 +431,7 @@ class BasicItemLoaderTest(unittest.TestCase):\n             name_out = Compose(Join(), float)\n \n         il = TestItemLoader()\n-        il.add_value('name', u'marta')\n+        il.add_value('name', 'marta')\n         with self.assertRaises(ValueError):\n             il.load_item()\n \n@@ -444,7 +444,7 @@ class BasicItemLoaderTest(unittest.TestCase):\n \n         il = TestItemLoader()\n         self.assertRaises(ValueError, il.add_value, 'name',\n-                          [u'marta', u'other'], Compose(float))\n+                          ['marta', 'other'], Compose(float))\n \n \n class InitializationFromDictTest(unittest.TestCase):\n@@ -608,8 +608,8 @@ class ProcessorsTest(unittest.TestCase):\n     def test_join(self):\n         proc = Join()\n         self.assertRaises(TypeError, proc, [None, '', 'hello', 'world'])\n-        self.assertEqual(proc(['', 'hello', 'world']), u' hello world')\n-        self.assertEqual(proc(['hello', 'world']), u'hello world')\n+        self.assertEqual(proc(['', 'hello', 'world']), ' hello world')\n+        self.assertEqual(proc(['hello', 'world']), 'hello world')\n         self.assertIsInstance(proc(['hello', 'world']), str)\n \n     def test_compose(self):\n@@ -626,8 +626,8 @@ class ProcessorsTest(unittest.TestCase):\n         def filter_world(x):\n             return None if x == 'world' else x\n         proc = MapCompose(filter_world, str.upper)\n-        self.assertEqual(proc([u'hello', u'world', u'this', u'is', u'scrapy']),\n-                         [u'HELLO', u'THIS', u'IS', u'SCRAPY'])\n+        self.assertEqual(proc(['hello', 'world', 'this', 'is', 'scrapy']),\n+                         ['HELLO', 'THIS', 'IS', 'SCRAPY'])\n         proc = MapCompose(filter_world, str.upper)\n         self.assertEqual(proc(None), [])\n         proc = MapCompose(filter_world, str.upper)\n\n@@ -56,13 +56,13 @@ class LogFormatterTestCase(unittest.TestCase):\n \n     def test_dropped(self):\n         item = {}\n-        exception = Exception(u\"\\u2018\")\n+        exception = Exception(\"\\u2018\")\n         response = Response(\"http://www.example.com\")\n         logkws = self.formatter.dropped(item, exception, response, self.spider)\n         logline = logkws['msg'] % logkws['args']\n         lines = logline.splitlines()\n         assert all(isinstance(x, str) for x in lines)\n-        self.assertEqual(lines, [u\"Dropped: \\u2018\", '{}'])\n+        self.assertEqual(lines, [\"Dropped: \\u2018\", '{}'])\n \n     def test_item_error(self):\n         # In practice, the complete traceback is shown by passing the\n@@ -72,7 +72,7 @@ class LogFormatterTestCase(unittest.TestCase):\n         response = Response(\"http://www.example.com\")\n         logkws = self.formatter.item_error(item, exception, response, self.spider)\n         logline = logkws['msg'] % logkws['args']\n-        self.assertEqual(logline, u\"Error processing {'key': 'value'}\")\n+        self.assertEqual(logline, \"Error processing {'key': 'value'}\")\n \n     def test_spider_error(self):\n         # In practice, the complete traceback is shown by passing the\n@@ -107,20 +107,20 @@ class LogFormatterTestCase(unittest.TestCase):\n \n     def test_scraped(self):\n         item = CustomItem()\n-        item['name'] = u'\\xa3'\n+        item['name'] = '\\xa3'\n         response = Response(\"http://www.example.com\")\n         logkws = self.formatter.scraped(item, response, self.spider)\n         logline = logkws['msg'] % logkws['args']\n         lines = logline.splitlines()\n         assert all(isinstance(x, str) for x in lines)\n-        self.assertEqual(lines, [u\"Scraped from <200 http://www.example.com>\", u'name: \\xa3'])\n+        self.assertEqual(lines, [\"Scraped from <200 http://www.example.com>\", 'name: \\xa3'])\n \n \n class LogFormatterSubclass(LogFormatter):\n     def crawled(self, request, response, spider):\n         kwargs = super(LogFormatterSubclass, self).crawled(request, response, spider)\n         CRAWLEDMSG = (\n-            u\"Crawled (%(status)s) %(request)s (referer: %(referer)s) %(flags)s\"\n+            \"Crawled (%(status)s) %(request)s (referer: %(referer)s) %(flags)s\"\n         )\n         log_args = kwargs['args']\n         log_args['flags'] = str(request.flags)\n\n@@ -73,8 +73,8 @@ class MailSenderTest(unittest.TestCase):\n         self.catched_msg = dict(**kwargs)\n \n     def test_send_utf8(self):\n-        subject = u'sübjèçt'\n-        body = u'bödÿ-àéïöñß'\n+        subject = 'sübjèçt'\n+        body = 'bödÿ-àéïöñß'\n         mailsender = MailSender(debug=True)\n         mailsender.send(to=['test@scrapy.org'], subject=subject, body=body,\n                         charset='utf-8', _callback=self._catch_mail_sent)\n@@ -90,8 +90,8 @@ class MailSenderTest(unittest.TestCase):\n         self.assertEqual(msg.get('Content-Type'), 'text/plain; charset=\"utf-8\"')\n \n     def test_send_attach_utf8(self):\n-        subject = u'sübjèçt'\n-        body = u'bödÿ-àéïöñß'\n+        subject = 'sübjèçt'\n+        body = 'bödÿ-àéïöñß'\n         attach = BytesIO()\n         attach.write(body.encode('utf-8'))\n         attach.seek(0)\n\n@@ -23,11 +23,11 @@ class ResponseTypesTest(unittest.TestCase):\n         mappings = [\n             (b'attachment; filename=\"data.xml\"', XmlResponse),\n             (b'attachment; filename=data.xml', XmlResponse),\n-            (u'attachment;filename=data£.tar.gz'.encode('utf-8'), Response),\n-            (u'attachment;filename=dataµ.tar.gz'.encode('latin-1'), Response),\n-            (u'attachment;filename=data高.doc'.encode('gbk'), Response),\n-            (u'attachment;filename=دورهdata.html'.encode('cp720'), HtmlResponse),\n-            (u'attachment;filename=日本語版Wikipedia.xml'.encode('iso2022_jp'), XmlResponse),\n+            ('attachment;filename=data£.tar.gz'.encode('utf-8'), Response),\n+            ('attachment;filename=dataµ.tar.gz'.encode('latin-1'), Response),\n+            ('attachment;filename=data高.doc'.encode('gbk'), Response),\n+            ('attachment;filename=دورهdata.html'.encode('cp720'), HtmlResponse),\n+            ('attachment;filename=日本語版Wikipedia.xml'.encode('iso2022_jp'), XmlResponse),\n \n         ]\n         for source, cls in mappings:\n\n@@ -93,7 +93,7 @@ class BaseRobotParserTest:\n         self.assertTrue(rp.allowed(\"https://site.local/disallowed\", \"*\"))\n \n     def test_unicode_url_and_useragent(self):\n-        robotstxt_robotstxt_body = u\"\"\"\n+        robotstxt_robotstxt_body = \"\"\"\n         User-Agent: *\n         Disallow: /admin/\n         Disallow: /static/\n@@ -107,11 +107,11 @@ class BaseRobotParserTest:\n         self.assertTrue(rp.allowed(\"https://site.local/\", \"*\"))\n         self.assertFalse(rp.allowed(\"https://site.local/admin/\", \"*\"))\n         self.assertFalse(rp.allowed(\"https://site.local/static/\", \"*\"))\n-        self.assertTrue(rp.allowed(\"https://site.local/admin/\", u\"UnicödeBöt\"))\n+        self.assertTrue(rp.allowed(\"https://site.local/admin/\", \"UnicödeBöt\"))\n         self.assertFalse(rp.allowed(\"https://site.local/wiki/K%C3%A4ytt%C3%A4j%C3%A4:\", \"*\"))\n-        self.assertFalse(rp.allowed(u\"https://site.local/wiki/Käyttäjä:\", \"*\"))\n+        self.assertFalse(rp.allowed(\"https://site.local/wiki/Käyttäjä:\", \"*\"))\n         self.assertTrue(rp.allowed(\"https://site.local/some/randome/page.html\", \"*\"))\n-        self.assertFalse(rp.allowed(\"https://site.local/some/randome/page.html\", u\"UnicödeBöt\"))\n+        self.assertFalse(rp.allowed(\"https://site.local/some/randome/page.html\", \"UnicödeBöt\"))\n \n \n class PythonRobotParserTest(BaseRobotParserTest, unittest.TestCase):\n\n@@ -25,19 +25,19 @@ class SelectorTestCase(unittest.TestCase):\n         )\n         self.assertEqual(\n             [x.get() for x in sel.xpath(\"//input[@name='a']/@name\")],\n-            [u'a']\n+            ['a']\n         )\n         self.assertEqual(\n             [x.get() for x in sel.xpath(\"number(concat(//input[@name='a']/@value, //input[@name='b']/@value))\")],\n-            [u'12.0']\n+            ['12.0']\n         )\n         self.assertEqual(\n             sel.xpath(\"concat('xpath', 'rules')\").getall(),\n-            [u'xpathrules']\n+            ['xpathrules']\n         )\n         self.assertEqual(\n             [x.get() for x in sel.xpath(\"concat(//input[@name='a']/@value, //input[@name='b']/@value)\")],\n-            [u'12']\n+            ['12']\n         )\n \n     def test_root_base_url(self):\n@@ -52,30 +52,30 @@ class SelectorTestCase(unittest.TestCase):\n         sel = Selector(XmlResponse('http://example.com', body=text, encoding='utf-8'))\n         self.assertEqual(sel.type, 'xml')\n         self.assertEqual(sel.xpath(\"//div\").getall(),\n-                         [u'<div><img src=\"a.jpg\"><p>Hello</p></img></div>'])\n+                         ['<div><img src=\"a.jpg\"><p>Hello</p></img></div>'])\n \n         sel = Selector(HtmlResponse('http://example.com', body=text, encoding='utf-8'))\n         self.assertEqual(sel.type, 'html')\n         self.assertEqual(sel.xpath(\"//div\").getall(),\n-                         [u'<div><img src=\"a.jpg\"><p>Hello</p></div>'])\n+                         ['<div><img src=\"a.jpg\"><p>Hello</p></div>'])\n \n     def test_http_header_encoding_precedence(self):\n-        # u'\\xa3'     = pound symbol in unicode\n-        # u'\\xc2\\xa3' = pound symbol in utf-8\n-        # u'\\xa3'     = pound symbol in latin-1 (iso-8859-1)\n+        # '\\xa3'     = pound symbol in unicode\n+        # '\\xc2\\xa3' = pound symbol in utf-8\n+        # '\\xa3'     = pound symbol in latin-1 (iso-8859-1)\n \n-        meta = u'<meta http-equiv=\"Content-Type\" content=\"text/html; charset=iso-8859-1\">'\n-        head = u'<head>' + meta + u'</head>'\n-        body_content = u'<span id=\"blank\">\\xa3</span>'\n-        body = u'<body>' + body_content + u'</body>'\n-        html = u'<html>' + head + body + u'</html>'\n+        meta = '<meta http-equiv=\"Content-Type\" content=\"text/html; charset=iso-8859-1\">'\n+        head = '<head>' + meta + '</head>'\n+        body_content = '<span id=\"blank\">\\xa3</span>'\n+        body = '<body>' + body_content + '</body>'\n+        html = '<html>' + head + body + '</html>'\n         encoding = 'utf-8'\n         html_utf8 = html.encode(encoding)\n \n         headers = {'Content-Type': ['text/html; charset=utf-8']}\n         response = HtmlResponse(url=\"http://example.com\", headers=headers, body=html_utf8)\n         x = Selector(response)\n-        self.assertEqual(x.xpath(\"//span[@id='blank']/text()\").getall(), [u'\\xa3'])\n+        self.assertEqual(x.xpath(\"//span[@id='blank']/text()\").getall(), ['\\xa3'])\n \n     def test_badly_encoded_body(self):\n         # \\xe9 alone isn't valid utf8 sequence\n@@ -92,4 +92,4 @@ class SelectorTestCase(unittest.TestCase):\n \n     def test_selector_bad_args(self):\n         with self.assertRaisesRegex(ValueError, 'received both response and text'):\n-            Selector(TextResponse(url='http://example.com', body=b''), text=u'')\n+            Selector(TextResponse(url='http://example.com', body=b''), text='')\n\n@@ -153,13 +153,13 @@ class XMLFeedSpiderTest(SpiderTest):\n             output = list(spider._parse(response))\n             self.assertEqual(len(output), 2, iterator)\n             self.assertEqual(output, [\n-                {'loc': [u'http://www.example.com/Special-Offers.html'],\n-                 'updated': [u'2009-08-16'],\n-                 'custom': [u'fuu'],\n-                 'other': [u'bar']},\n+                {'loc': ['http://www.example.com/Special-Offers.html'],\n+                 'updated': ['2009-08-16'],\n+                 'custom': ['fuu'],\n+                 'other': ['bar']},\n                 {'loc': [],\n-                 'updated': [u'2009-08-16'],\n-                 'other': [u'foo'],\n+                 'updated': ['2009-08-16'],\n+                 'other': ['foo'],\n                  'custom': []},\n             ], iterator)\n \n\n@@ -54,7 +54,7 @@ class XmliterTestCase(unittest.TestCase):\n \n     def test_xmliter_unicode(self):\n         # example taken from https://github.com/scrapy/scrapy/issues/1665\n-        body = u\"\"\"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+        body = \"\"\"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n             <þingflokkar>\n                <þingflokkur id=\"26\">\n                   <heiti />\n@@ -97,15 +97,15 @@ class XmliterTestCase(unittest.TestCase):\n             XmlResponse(url=\"http://example.com\", body=body, encoding='utf-8'),\n         ):\n             attrs = []\n-            for x in self.xmliter(r, u'þingflokkur'):\n+            for x in self.xmliter(r, 'þingflokkur'):\n                 attrs.append((x.attrib['id'],\n-                              x.xpath(u'./skammstafanir/stuttskammstöfun/text()').getall(),\n-                              x.xpath(u'./tímabil/fyrstaþing/text()').getall()))\n+                              x.xpath('./skammstafanir/stuttskammstöfun/text()').getall(),\n+                              x.xpath('./tímabil/fyrstaþing/text()').getall()))\n \n             self.assertEqual(attrs,\n-                             [(u'26', [u'-'], [u'80']),\n-                              (u'21', [u'Ab'], [u'76']),\n-                              (u'27', [u'A'], [u'27'])])\n+                             [('26', ['-'], ['80']),\n+                              ('21', ['Ab'], ['76']),\n+                              ('27', ['A'], ['27'])])\n \n     def test_xmliter_text(self):\n         body = (\n@@ -114,7 +114,7 @@ class XmliterTestCase(unittest.TestCase):\n         )\n \n         self.assertEqual([x.xpath(\"text()\").getall() for x in self.xmliter(body, 'product')],\n-                         [[u'one'], [u'two']])\n+                         [['one'], ['two']])\n \n     def test_xmliter_namespaces(self):\n         body = b\"\"\"\n@@ -179,7 +179,7 @@ class XmliterTestCase(unittest.TestCase):\n         response = XmlResponse('http://www.example.com', body=body)\n         self.assertEqual(\n             next(self.xmliter(response, 'item')).get(),\n-            u'<item>Some Turkish Characters \\xd6\\xc7\\u015e\\u0130\\u011e\\xdc \\xfc\\u011f\\u0131\\u015f\\xe7\\xf6</item>'\n+            '<item>Some Turkish Characters \\xd6\\xc7\\u015e\\u0130\\u011e\\xdc \\xfc\\u011f\\u0131\\u015f\\xe7\\xf6</item>'\n         )\n \n \n@@ -265,10 +265,10 @@ class UtilsCsvTestCase(unittest.TestCase):\n \n         result = [row for row in csv]\n         self.assertEqual(result,\n-                         [{u'id': u'1', u'name': u'alpha', u'value': u'foobar'},\n-                          {u'id': u'2', u'name': u'unicode', u'value': u'\\xfan\\xedc\\xf3d\\xe9\\u203d'},\n-                          {u'id': u'3', u'name': u'multi', u'value': FOOBAR_NL},\n-                          {u'id': u'4', u'name': u'empty', u'value': u''}])\n+                         [{'id': '1', 'name': 'alpha', 'value': 'foobar'},\n+                          {'id': '2', 'name': 'unicode', 'value': '\\xfan\\xedc\\xf3d\\xe9\\u203d'},\n+                          {'id': '3', 'name': 'multi', 'value': FOOBAR_NL},\n+                          {'id': '4', 'name': 'empty', 'value': ''}])\n \n         # explicit type check cuz' we no like stinkin' autocasting! yarrr\n         for result_row in result:\n@@ -281,10 +281,10 @@ class UtilsCsvTestCase(unittest.TestCase):\n         csv = csviter(response, delimiter='\\t')\n \n         self.assertEqual([row for row in csv],\n-                         [{u'id': u'1', u'name': u'alpha', u'value': u'foobar'},\n-                          {u'id': u'2', u'name': u'unicode', u'value': u'\\xfan\\xedc\\xf3d\\xe9\\u203d'},\n-                          {u'id': u'3', u'name': u'multi', u'value': FOOBAR_NL},\n-                          {u'id': u'4', u'name': u'empty', u'value': u''}])\n+                         [{'id': '1', 'name': 'alpha', 'value': 'foobar'},\n+                          {'id': '2', 'name': 'unicode', 'value': '\\xfan\\xedc\\xf3d\\xe9\\u203d'},\n+                          {'id': '3', 'name': 'multi', 'value': FOOBAR_NL},\n+                          {'id': '4', 'name': 'empty', 'value': ''}])\n \n     def test_csviter_quotechar(self):\n         body1 = get_testdata('feeds', 'feed-sample6.csv')\n@@ -294,19 +294,19 @@ class UtilsCsvTestCase(unittest.TestCase):\n         csv1 = csviter(response1, quotechar=\"'\")\n \n         self.assertEqual([row for row in csv1],\n-                         [{u'id': u'1', u'name': u'alpha', u'value': u'foobar'},\n-                          {u'id': u'2', u'name': u'unicode', u'value': u'\\xfan\\xedc\\xf3d\\xe9\\u203d'},\n-                          {u'id': u'3', u'name': u'multi', u'value': FOOBAR_NL},\n-                          {u'id': u'4', u'name': u'empty', u'value': u''}])\n+                         [{'id': '1', 'name': 'alpha', 'value': 'foobar'},\n+                          {'id': '2', 'name': 'unicode', 'value': '\\xfan\\xedc\\xf3d\\xe9\\u203d'},\n+                          {'id': '3', 'name': 'multi', 'value': FOOBAR_NL},\n+                          {'id': '4', 'name': 'empty', 'value': ''}])\n \n         response2 = TextResponse(url=\"http://example.com/\", body=body2)\n         csv2 = csviter(response2, delimiter=\"|\", quotechar=\"'\")\n \n         self.assertEqual([row for row in csv2],\n-                         [{u'id': u'1', u'name': u'alpha', u'value': u'foobar'},\n-                          {u'id': u'2', u'name': u'unicode', u'value': u'\\xfan\\xedc\\xf3d\\xe9\\u203d'},\n-                          {u'id': u'3', u'name': u'multi', u'value': FOOBAR_NL},\n-                          {u'id': u'4', u'name': u'empty', u'value': u''}])\n+                         [{'id': '1', 'name': 'alpha', 'value': 'foobar'},\n+                          {'id': '2', 'name': 'unicode', 'value': '\\xfan\\xedc\\xf3d\\xe9\\u203d'},\n+                          {'id': '3', 'name': 'multi', 'value': FOOBAR_NL},\n+                          {'id': '4', 'name': 'empty', 'value': ''}])\n \n     def test_csviter_wrong_quotechar(self):\n         body = get_testdata('feeds', 'feed-sample6.csv')\n@@ -314,10 +314,10 @@ class UtilsCsvTestCase(unittest.TestCase):\n         csv = csviter(response)\n \n         self.assertEqual([row for row in csv],\n-                         [{u\"'id'\": u\"1\", u\"'name'\": u\"'alpha'\", u\"'value'\": u\"'foobar'\"},\n-                          {u\"'id'\": u\"2\", u\"'name'\": u\"'unicode'\", u\"'value'\": u\"'\\xfan\\xedc\\xf3d\\xe9\\u203d'\"},\n-                          {u\"'id'\": u\"'3'\", u\"'name'\": u\"'multi'\", u\"'value'\": u\"'foo\"},\n-                          {u\"'id'\": u\"4\", u\"'name'\": u\"'empty'\", u\"'value'\": u\"\"}])\n+                         [{\"'id'\": \"1\", \"'name'\": \"'alpha'\", \"'value'\": \"'foobar'\"},\n+                          {\"'id'\": \"2\", \"'name'\": \"'unicode'\", \"'value'\": \"'\\xfan\\xedc\\xf3d\\xe9\\u203d'\"},\n+                          {\"'id'\": \"'3'\", \"'name'\": \"'multi'\", \"'value'\": \"'foo\"},\n+                          {\"'id'\": \"4\", \"'name'\": \"'empty'\", \"'value'\": \"\"}])\n \n     def test_csviter_delimiter_binary_response_assume_utf8_encoding(self):\n         body = get_testdata('feeds', 'feed-sample3.csv').replace(b',', b'\\t')\n@@ -325,10 +325,10 @@ class UtilsCsvTestCase(unittest.TestCase):\n         csv = csviter(response, delimiter='\\t')\n \n         self.assertEqual([row for row in csv],\n-                         [{u'id': u'1', u'name': u'alpha', u'value': u'foobar'},\n-                          {u'id': u'2', u'name': u'unicode', u'value': u'\\xfan\\xedc\\xf3d\\xe9\\u203d'},\n-                          {u'id': u'3', u'name': u'multi', u'value': FOOBAR_NL},\n-                          {u'id': u'4', u'name': u'empty', u'value': u''}])\n+                         [{'id': '1', 'name': 'alpha', 'value': 'foobar'},\n+                          {'id': '2', 'name': 'unicode', 'value': '\\xfan\\xedc\\xf3d\\xe9\\u203d'},\n+                          {'id': '3', 'name': 'multi', 'value': FOOBAR_NL},\n+                          {'id': '4', 'name': 'empty', 'value': ''}])\n \n     def test_csviter_headers(self):\n         sample = get_testdata('feeds', 'feed-sample3.csv').splitlines()\n@@ -338,10 +338,10 @@ class UtilsCsvTestCase(unittest.TestCase):\n         csv = csviter(response, headers=[h.decode('utf-8') for h in headers])\n \n         self.assertEqual([row for row in csv],\n-                         [{u'id': u'1', u'name': u'alpha', u'value': u'foobar'},\n-                          {u'id': u'2', u'name': u'unicode', u'value': u'\\xfan\\xedc\\xf3d\\xe9\\u203d'},\n-                          {u'id': u'3', u'name': u'multi', u'value': u'foo\\nbar'},\n-                          {u'id': u'4', u'name': u'empty', u'value': u''}])\n+                         [{'id': '1', 'name': 'alpha', 'value': 'foobar'},\n+                          {'id': '2', 'name': 'unicode', 'value': '\\xfan\\xedc\\xf3d\\xe9\\u203d'},\n+                          {'id': '3', 'name': 'multi', 'value': 'foo\\nbar'},\n+                          {'id': '4', 'name': 'empty', 'value': ''}])\n \n     def test_csviter_falserow(self):\n         body = get_testdata('feeds', 'feed-sample3.csv')\n@@ -351,10 +351,10 @@ class UtilsCsvTestCase(unittest.TestCase):\n         csv = csviter(response)\n \n         self.assertEqual([row for row in csv],\n-                         [{u'id': u'1', u'name': u'alpha', u'value': u'foobar'},\n-                          {u'id': u'2', u'name': u'unicode', u'value': u'\\xfan\\xedc\\xf3d\\xe9\\u203d'},\n-                          {u'id': u'3', u'name': u'multi', u'value': FOOBAR_NL},\n-                          {u'id': u'4', u'name': u'empty', u'value': u''}])\n+                         [{'id': '1', 'name': 'alpha', 'value': 'foobar'},\n+                          {'id': '2', 'name': 'unicode', 'value': '\\xfan\\xedc\\xf3d\\xe9\\u203d'},\n+                          {'id': '3', 'name': 'multi', 'value': FOOBAR_NL},\n+                          {'id': '4', 'name': 'empty', 'value': ''}])\n \n     def test_csviter_exception(self):\n         body = get_testdata('feeds', 'feed-sample3.csv')\n@@ -377,8 +377,8 @@ class UtilsCsvTestCase(unittest.TestCase):\n         self.assertEqual(\n             list(csv),\n             [\n-                {u'id': u'1', u'name': u'latin1', u'value': u'test'},\n-                {u'id': u'2', u'name': u'something', u'value': u'\\xf1\\xe1\\xe9\\xf3'},\n+                {'id': '1', 'name': 'latin1', 'value': 'test'},\n+                {'id': '2', 'name': 'something', 'value': '\\xf1\\xe1\\xe9\\xf3'},\n             ]\n         )\n \n@@ -387,8 +387,8 @@ class UtilsCsvTestCase(unittest.TestCase):\n         self.assertEqual(\n             list(csv),\n             [\n-                {u'id': u'1', u'name': u'cp852', u'value': u'test'},\n-                {u'id': u'2', u'name': u'something', u'value': u'\\u255a\\u2569\\u2569\\u2569\\u2550\\u2550\\u2557'},\n+                {'id': '1', 'name': 'cp852', 'value': 'test'},\n+                {'id': '2', 'name': 'something', 'value': '\\u255a\\u2569\\u2569\\u2569\\u2550\\u2550\\u2557'},\n             ]\n         )\n \n\n@@ -34,13 +34,13 @@ class MutableChainTest(unittest.TestCase):\n \n class ToUnicodeTest(unittest.TestCase):\n     def test_converting_an_utf8_encoded_string_to_unicode(self):\n-        self.assertEqual(to_unicode(b'lel\\xc3\\xb1e'), u'lel\\xf1e')\n+        self.assertEqual(to_unicode(b'lel\\xc3\\xb1e'), 'lel\\xf1e')\n \n     def test_converting_a_latin_1_encoded_string_to_unicode(self):\n-        self.assertEqual(to_unicode(b'lel\\xf1e', 'latin-1'), u'lel\\xf1e')\n+        self.assertEqual(to_unicode(b'lel\\xf1e', 'latin-1'), 'lel\\xf1e')\n \n     def test_converting_a_unicode_to_unicode_should_return_the_same_object(self):\n-        self.assertEqual(to_unicode(u'\\xf1e\\xf1e\\xf1e'), u'\\xf1e\\xf1e\\xf1e')\n+        self.assertEqual(to_unicode('\\xf1e\\xf1e\\xf1e'), '\\xf1e\\xf1e\\xf1e')\n \n     def test_converting_a_strange_object_should_raise_TypeError(self):\n         self.assertRaises(TypeError, to_unicode, 423)\n@@ -48,16 +48,16 @@ class ToUnicodeTest(unittest.TestCase):\n     def test_errors_argument(self):\n         self.assertEqual(\n             to_unicode(b'a\\xedb', 'utf-8', errors='replace'),\n-            u'a\\ufffdb'\n+            'a\\ufffdb'\n         )\n \n \n class ToBytesTest(unittest.TestCase):\n     def test_converting_a_unicode_object_to_an_utf_8_encoded_string(self):\n-        self.assertEqual(to_bytes(u'\\xa3 49'), b'\\xc2\\xa3 49')\n+        self.assertEqual(to_bytes('\\xa3 49'), b'\\xc2\\xa3 49')\n \n     def test_converting_a_unicode_object_to_a_latin_1_encoded_string(self):\n-        self.assertEqual(to_bytes(u'\\xa3 49', 'latin-1'), b'\\xa3 49')\n+        self.assertEqual(to_bytes('\\xa3 49', 'latin-1'), b'\\xa3 49')\n \n     def test_converting_a_regular_bytes_to_bytes_should_return_the_same_object(self):\n         self.assertEqual(to_bytes(b'lel\\xf1e'), b'lel\\xf1e')\n@@ -67,7 +67,7 @@ class ToBytesTest(unittest.TestCase):\n \n     def test_errors_argument(self):\n         self.assertEqual(\n-            to_bytes(u'a\\ufffdb', 'latin-1', errors='replace'),\n+            to_bytes('a\\ufffdb', 'latin-1', errors='replace'),\n             b'a?b'\n         )\n \n@@ -96,7 +96,7 @@ class BinaryIsTextTest(unittest.TestCase):\n         assert binary_is_text(b\"hello\")\n \n     def test_utf_16_strings_contain_null_bytes(self):\n-        assert binary_is_text(u\"hello\".encode('utf-16'))\n+        assert binary_is_text(\"hello\".encode('utf-16'))\n \n     def test_one_with_encoding(self):\n         assert binary_is_text(b\"<div>Price \\xa3</div>\")\n\n@@ -22,7 +22,7 @@ class RequestSerializationTest(unittest.TestCase):\n             method=\"POST\",\n             body=b\"some body\",\n             headers={'content-encoding': 'text/html; charset=latin-1'},\n-            cookies={'currency': u'руб'},\n+            cookies={'currency': 'руб'},\n             encoding='latin-1',\n             priority=20,\n             meta={'a': 'b'},\n\n@@ -19,8 +19,8 @@ class UtilsRenderTemplateFileTestCase(unittest.TestCase):\n     def test_simple_render(self):\n \n         context = dict(project_name='proj', name='spi', classname='TheSpider')\n-        template = u'from ${project_name}.spiders.${name} import ${classname}'\n-        rendered = u'from proj.spiders.spi import TheSpider'\n+        template = 'from ${project_name}.spiders.${name} import ${classname}'\n+        rendered = 'from proj.spiders.spi import TheSpider'\n \n         template_path = os.path.join(self.tmp_path, 'templ.py.tmpl')\n         render_path = os.path.join(self.tmp_path, 'templ.py')\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
