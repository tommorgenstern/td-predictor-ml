{"custom_id": "flask#3afcbf160eff2a5ab6ac35a82e0719f972df8972", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 9 | Lines Deleted: 1 | Files Changed: 2 | Hunks: 3 | Methods Changed: 2 | Complexity Δ (Sum/Max): 2/1 | Churn Δ: 10 | Churn Cumulative: 1613 | Contributors (this commit): 20 | Commits (past 90d): 7 | Contributors (cumulative): 22 | DMM Complexity: 0.0\n\nDIFF:\n@@ -604,7 +604,9 @@ def safe_join(directory, filename):\n     for sep in _os_alt_seps:\n         if sep in filename:\n             raise NotFound()\n-    if os.path.isabs(filename) or filename.startswith('../'):\n+    if os.path.isabs(filename) or \\\n+       filename == '..' or \\\n+       filename.startswith('../'):\n         raise NotFound()\n     return os.path.join(directory, filename)\n \n\n@@ -17,6 +17,7 @@ import flask\n import threading\n import unittest\n from werkzeug.test import run_wsgi_app, create_environ\n+from werkzeug.exceptions import NotFound\n from flask.testsuite import FlaskTestCase\n \n \n@@ -79,6 +80,11 @@ class MemoryTestCase(FlaskTestCase):\n                 for x in xrange(10):\n                     fire()\n \n+    def test_safe_join_toplevel_pardir(self):\n+        from flask.helpers import safe_join\n+        with self.assert_raises(NotFound):\n+            safe_join('/foo', '..')\n+\n \n def suite():\n     suite = unittest.TestSuite()\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#301e244df3dc747a73e2564a046976af5d0164eb", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 1523 | Contributors (this commit): 20 | Commits (past 90d): 7 | Contributors (cumulative): 20 | DMM Complexity: None\n\nDIFF:\n@@ -571,7 +571,7 @@ def send_file(filename_or_fp, mimetype=None, as_attachment=False,\n             os.path.getmtime(filename),\n             os.path.getsize(filename),\n             adler32(\n-                filename.encode('utf8') if isinstance(filename, unicode)\n+                filename.encode('utf-8') if isinstance(filename, unicode)\n                 else filename\n             ) & 0xffffffff\n         ))\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#b146d8277ab90cf6d43ea54113383076e4fd0318", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 171 | Lines Deleted: 59 | Files Changed: 7 | Hunks: 13 | Methods Changed: 11 | Complexity Δ (Sum/Max): 7/12 | Churn Δ: 230 | Churn Cumulative: 5862 | Contributors (this commit): 37 | Commits (past 90d): 30 | Contributors (cumulative): 54 | DMM Complexity: 1.0\n\nDIFF:\n@@ -20,9 +20,8 @@ from jinja2 import Markup, escape\n \n from .app import Flask, Request, Response\n from .config import Config\n-from .helpers import url_for, jsonify, flash, \\\n-    send_file, send_from_directory, get_flashed_messages, \\\n-    get_template_attribute, make_response, safe_join, \\\n+from .helpers import url_for, flash, send_file, send_from_directory, \\\n+    get_flashed_messages, get_template_attribute, make_response, safe_join, \\\n     stream_with_context\n from .globals import current_app, g, request, session, _request_ctx_stack, \\\n      _app_ctx_stack\n@@ -37,8 +36,13 @@ from .signals import signals_available, template_rendered, request_started, \\\n      request_finished, got_request_exception, request_tearing_down, \\\n      appcontext_tearing_down\n \n-# only import json if it's available\n-from .helpers import json\n+# We're not exposing the actual json module but a convenient wrapper around\n+# it.\n+from . import json\n+\n+# This was the only thing that flask used to export at one point and it had\n+# a more generic name.\n+jsonify = json.jsonify\n \n # backwards compat, goes away in 1.0\n from .sessions import SecureCookieSession as Session\n\n@@ -24,8 +24,8 @@ from werkzeug.exceptions import HTTPException, InternalServerError, \\\n      MethodNotAllowed, BadRequest\n \n from .helpers import _PackageBoundObject, url_for, get_flashed_messages, \\\n-    locked_cached_property, _tojson_filter, _endpoint_from_view_func, \\\n-    find_package\n+    locked_cached_property, _endpoint_from_view_func, find_package\n+from . import json\n from .wrappers import Request, Response\n from .config import ConfigAttribute, Config\n from .ctx import RequestContext, AppContext, _RequestGlobals\n@@ -238,6 +238,16 @@ class Flask(_PackageBoundObject):\n         '-' * 80\n     )\n \n+    #: The JSON encoder class to use.  Defaults to :class:`~flask.json.JSONEncoder`.\n+    #:\n+    #: .. versionadded:: 0.10\n+    json_encoder = json.JSONEncoder\n+\n+    #: The JSON decoder class to use.  Defaults to :class:`~flask.json.JSONDecoder`.\n+    #:\n+    #: .. versionadded:: 0.10\n+    json_decoder = json.JSONDecoder\n+\n     #: Options that are passed directly to the Jinja2 environment.\n     jinja_options = ImmutableDict(\n         extensions=['jinja2.ext.autoescape', 'jinja2.ext.with_']\n@@ -637,7 +647,7 @@ class Flask(_PackageBoundObject):\n             url_for=url_for,\n             get_flashed_messages=get_flashed_messages\n         )\n-        rv.filters['tojson'] = _tojson_filter\n+        rv.filters['tojson'] = json.htmlsafe_dumps\n         return rv\n \n     def create_global_jinja_loader(self):\n\n@@ -9,7 +9,7 @@\n     :license: BSD, see LICENSE for more details.\n \"\"\"\n from werkzeug.exceptions import HTTPException, BadRequest\n-from .helpers import json\n+from . import json\n \n \n class JSONHTTPException(HTTPException):\n@@ -39,7 +39,6 @@ class JSONHTTPException(HTTPException):\n class JSONBadRequest(JSONHTTPException, BadRequest):\n     \"\"\"Represents an HTTP ``400 Bad Request`` error whose body contains an\n     error message in JSON format instead of HTML format (as in the superclass).\n-\n     \"\"\"\n \n     #: The description of the error which occurred as a string.\n\n@@ -23,10 +23,6 @@ from werkzeug.routing import BuildError\n from werkzeug.urls import url_quote\n from functools import update_wrapper\n \n-# Use the same json implementation as itsdangerous on which we\n-# depend anyways.\n-from itsdangerous import simplejson as json\n-\n \n from werkzeug.datastructures import Headers\n from werkzeug.exceptions import NotFound\n@@ -43,17 +39,6 @@ from .globals import session, _request_ctx_stack, _app_ctx_stack, \\\n      current_app, request\n \n \n-# figure out if simplejson escapes slashes.  This behavior was changed\n-# from one version to another without reason.\n-_slash_escape = '\\\\/' not in json.dumps('/')\n-\n-def _tojson_filter(*args, **kwargs):\n-    rv = json.dumps(*args, **kwargs)\n-    if _slash_escape:\n-        rv = rv.replace('/', '\\\\/')\n-    return rv.replace('<!', '<\\\\u0021')\n-\n-\n # sentinel\n _missing = object()\n \n@@ -146,37 +131,6 @@ def stream_with_context(generator_or_function):\n     return wrapped_g\n \n \n-def jsonify(*args, **kwargs):\n-    \"\"\"Creates a :class:`~flask.Response` with the JSON representation of\n-    the given arguments with an `application/json` mimetype.  The arguments\n-    to this function are the same as to the :class:`dict` constructor.\n-\n-    Example usage::\n-\n-        @app.route('/_get_current_user')\n-        def get_current_user():\n-            return jsonify(username=g.user.username,\n-                           email=g.user.email,\n-                           id=g.user.id)\n-\n-    This will send a JSON response like this to the browser::\n-\n-        {\n-            \"username\": \"admin\",\n-            \"email\": \"admin@localhost\",\n-            \"id\": 42\n-        }\n-\n-    This requires Python 2.6 or an installed version of simplejson.  For\n-    security reasons only objects are supported toplevel.  For more\n-    information about this, have a look at :ref:`json-security`.\n-\n-    .. versionadded:: 0.2\n-    \"\"\"\n-    return current_app.response_class(json.dumps(dict(*args, **kwargs),\n-        indent=None if request.is_xhr else 2), mimetype='application/json')\n-\n-\n def make_response(*args):\n     \"\"\"Sometimes it is necessary to set additional headers in a view.  Because\n     views do not have to return response objects but can return a value that\n\n@@ -0,0 +1,146 @@\n+# -*- coding: utf-8 -*-\n+\"\"\"\n+    flask.jsonimpl\n+    ~~~~~~~~~~~~~~\n+\n+    Implementation helpers for the JSON support in Flask.\n+\n+    :copyright: (c) 2012 by Armin Ronacher.\n+    :license: BSD, see LICENSE for more details.\n+\"\"\"\n+from datetime import datetime\n+from .globals import current_app, request\n+\n+from werkzeug.http import http_date\n+\n+# Use the same json implementation as itsdangerous on which we\n+# depend anyways.\n+from itsdangerous import simplejson as _json\n+\n+\n+# figure out if simplejson escapes slashes.  This behavior was changed\n+# from one version to another without reason.\n+_slash_escape = '\\\\/' not in _json.dumps('/')\n+\n+\n+__all__ = ['dump', 'dumps', 'load', 'loads', 'htmlsafe_dump',\n+           'htmlsafe_dumps', 'JSONDecoder', 'JSONEncoder',\n+           'jsonify']\n+\n+\n+class JSONEncoder(_json.JSONEncoder):\n+    \"\"\"The default Flask JSON encoder.  This one extends the default simplejson\n+    encoder by also supporting ``datetime`` objects as well as ``Markup``\n+    objects which are serialized as RFC 822 datetime strings (same as the HTTP\n+    date format).  In order to support more data types override the\n+    :meth:`default` method.\n+    \"\"\"\n+\n+    def default(self, o):\n+        \"\"\"Implement this method in a subclass such that it returns a\n+        serializable object for ``o``, or calls the base implementation (to\n+        raise a ``TypeError``).\n+\n+        For example, to support arbitrary iterators, you could implement\n+        default like this::\n+\n+            def default(self, o):\n+                try:\n+                    iterable = iter(o)\n+                except TypeError:\n+                    pass\n+                else:\n+                    return list(iterable)\n+                return JSONEncoder.default(self, o)\n+        \"\"\"\n+        if isinstance(o, datetime):\n+            return http_date(o)\n+        if hasattr(o, '__html__'):\n+            return unicode(o.__html__())\n+        return _json.JSONEncoder.default(self, o)\n+\n+\n+class JSONDecoder(_json.JSONDecoder):\n+    \"\"\"The default JSON decoder.  This one does not change the behavior from\n+    the default simplejson encoder.  Consult the :mod:`json` documentation\n+    for more information.  This decoder is not only used for the load\n+    functions of this module but also :attr:`~flask.Request`.\n+    \"\"\"\n+\n+\n+def dumps(obj, **kwargs):\n+    \"\"\"Serialize ``obj`` to a JSON formatted ``str`` by using the application's\n+    configured encoder (:attr:`~flask.Flask.json_encoder`).\n+    \"\"\"\n+    kwargs.setdefault('cls', current_app.json_encoder)\n+    return _json.dumps(obj, **kwargs)\n+\n+\n+def dump(obj, fp, **kwargs):\n+    \"\"\"Like :func:`dumps` but writes into a file object.\"\"\"\n+    kwargs.setdefault('cls', current_app.json_encoder)\n+    return _json.dump(obj, fp, **kwargs)\n+\n+\n+def loads(s, **kwargs):\n+    \"\"\"Unserialize a JSON object from a string ``s`` by using the application's\n+    configured decoder (:attr:`~flask.Flask.json_decoder`).\n+    \"\"\"\n+    kwargs.setdefault('cls', current_app.json_decoder)\n+    return _json.loads(s, **kwargs)\n+\n+\n+def load(fp, **kwargs):\n+    \"\"\"Like :func:`loads` but reads from a file object.\n+    \"\"\"\n+    kwargs.setdefault('cls', current_app.json_decoder)\n+    return _json.load(fp, **kwargs)\n+\n+\n+def htmlsafe_dumps(obj, **kwargs):\n+    \"\"\"Works exactly like :func:`dumps` but is safe for use in ``<script>``\n+    tags.  It accepts the same arguments and returns a JSON string.  Note that\n+    this is available in templates through the ``|tojson`` filter but it will\n+    have to be wrapped in ``|safe`` unless **true** XHTML is being used.\n+    \"\"\"\n+    rv = dumps(obj, **kwargs)\n+    if _slash_escape:\n+        rv = rv.replace('/', '\\\\/')\n+    return rv.replace('<!', '<\\\\u0021')\n+\n+\n+def htmlsafe_dump(obj, fp, **kwargs):\n+    \"\"\"Like :func:`htmlsafe_dumps` but writes into a file object.\"\"\"\n+    fp.write(htmlsafe_dumps(obj, **kwargs))\n+\n+\n+def jsonify(*args, **kwargs):\n+    \"\"\"Creates a :class:`~flask.Response` with the JSON representation of\n+    the given arguments with an `application/json` mimetype.  The arguments\n+    to this function are the same as to the :class:`dict` constructor.\n+\n+    Example usage::\n+\n+        @app.route('/_get_current_user')\n+        def get_current_user():\n+            return jsonify(username=g.user.username,\n+                           email=g.user.email,\n+                           id=g.user.id)\n+\n+    This will send a JSON response like this to the browser::\n+\n+        {\n+            \"username\": \"admin\",\n+            \"email\": \"admin@localhost\",\n+            \"id\": 42\n+        }\n+\n+    This requires Python 2.6 or an installed version of simplejson.  For\n+    security reasons only objects are supported toplevel.  For more\n+    information about this, have a look at :ref:`json-security`.\n+\n+    .. versionadded:: 0.2\n+    \"\"\"\n+    return current_app.response_class(dumps(dict(*args, **kwargs),\n+        indent=None if request.is_xhr else 2),\n+        mimetype='application/json')\n\n@@ -13,8 +13,7 @@ import hashlib\n from datetime import datetime\n from werkzeug.http import http_date, parse_date\n from werkzeug.datastructures import CallbackDict\n-from .helpers import json\n-from . import Markup\n+from . import Markup, json\n \n from itsdangerous import URLSafeTimedSerializer, BadSignature\n \n\n@@ -14,7 +14,7 @@ from werkzeug.utils import cached_property\n \n from .exceptions import JSONBadRequest\n from .debughelpers import attach_enctype_error_multidict\n-from .helpers import json\n+from . import json\n from .globals import _request_ctx_stack\n \n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#05c6502cbde016f0475233faa0c6364634cccac9", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 38 | Lines Deleted: 2 | Files Changed: 2 | Hunks: 7 | Methods Changed: 10 | Complexity Δ (Sum/Max): 13/9 | Churn Δ: 40 | Churn Cumulative: 842 | Contributors (this commit): 5 | Commits (past 90d): 4 | Contributors (cumulative): 6 | DMM Complexity: 1.0\n\nDIFF:\n@@ -70,22 +70,27 @@ class JSONDecoder(_json.JSONDecoder):\n \n def dumps(obj, **kwargs):\n     \"\"\"Serialize ``obj`` to a JSON formatted ``str`` by using the application's\n-    configured encoder (:attr:`~flask.Flask.json_encoder`).\n+    configured encoder (:attr:`~flask.Flask.json_encoder`) if there is an\n+    application on the stack.\n     \"\"\"\n+    if current_app:\n         kwargs.setdefault('cls', current_app.json_encoder)\n     return _json.dumps(obj, **kwargs)\n \n \n def dump(obj, fp, **kwargs):\n     \"\"\"Like :func:`dumps` but writes into a file object.\"\"\"\n+    if current_app:\n         kwargs.setdefault('cls', current_app.json_encoder)\n     return _json.dump(obj, fp, **kwargs)\n \n \n def loads(s, **kwargs):\n     \"\"\"Unserialize a JSON object from a string ``s`` by using the application's\n-    configured decoder (:attr:`~flask.Flask.json_decoder`).\n+    configured decoder (:attr:`~flask.Flask.json_decoder`) if there is an\n+    application on the stack.\n     \"\"\"\n+    if current_app:\n         kwargs.setdefault('cls', current_app.json_decoder)\n     return _json.loads(s, **kwargs)\n \n@@ -93,6 +98,7 @@ def loads(s, **kwargs):\n def load(fp, **kwargs):\n     \"\"\"Like :func:`loads` but reads from a file object.\n     \"\"\"\n+    if current_app:\n         kwargs.setdefault('cls', current_app.json_decoder)\n     return _json.load(fp, **kwargs)\n \n\n@@ -100,6 +100,36 @@ class JSONTestCase(FlaskTestCase):\n             rv = render('{{ \"<!--<script>\"|tojson|safe }}')\n             self.assert_equal(rv, '\"<\\\\u0021--<script>\"')\n \n+    def test_json_customization(self):\n+        class X(object):\n+            def __init__(self, val):\n+                self.val = val\n+        class MyEncoder(flask.json.JSONEncoder):\n+            def default(self, o):\n+                if isinstance(o, X):\n+                    return '<%d>' % o.val\n+                return flask.json.JSONEncoder.default(self, o)\n+        class MyDecoder(flask.json.JSONDecoder):\n+            def __init__(self, *args, **kwargs):\n+                kwargs.setdefault('object_hook', self.object_hook)\n+                flask.json.JSONDecoder.__init__(self, *args, **kwargs)\n+            def object_hook(self, obj):\n+                if len(obj) == 1 and '_foo' in obj:\n+                    return X(obj['_foo'])\n+                return obj\n+        app = flask.Flask(__name__)\n+        app.testing = True\n+        app.json_encoder = MyEncoder\n+        app.json_decoder = MyDecoder\n+        @app.route('/', methods=['POST'])\n+        def index():\n+            return flask.json.dumps(flask.request.json['x'])\n+        c = app.test_client()\n+        rv = c.post('/', data=flask.json.dumps({\n+            'x': {'_foo': 42}\n+        }), content_type='application/json')\n+        self.assertEqual(rv.data, '\"<42>\"')\n+\n     def test_modified_url_encoding(self):\n         class ModifiedRequest(flask.Request):\n             url_charset = 'euc-kr'\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#5e88c8184d19851c4ccc9a74595819bbe374e839", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 0 | Lines Deleted: 19 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 19 | Churn Cumulative: 106 | Contributors (this commit): 3 | Commits (past 90d): 1 | Contributors (cumulative): 3 | DMM Complexity: None\n\nDIFF:\n@@ -1,19 +0,0 @@\n-# -*- coding: utf-8 -*-\n-\"\"\"\n-    flask.session\n-    ~~~~~~~~~~~~~\n-\n-    This module used to flask with the session global so we moved it\n-    over to flask.sessions\n-\n-    :copyright: (c) 2011 by Armin Ronacher.\n-    :license: BSD, see LICENSE for more details.\n-\"\"\"\n-\n-from warnings import warn\n-warn(DeprecationWarning('please use flask.sessions instead'))\n-\n-from .sessions import SecureCookieSession, NullSession\n-\n-Session = SecureCookieSession\n-_NullSession = NullSession\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#f34c0281252bf1838e2ec24fe8b064b232a098ef", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 22 | Lines Deleted: 6 | Files Changed: 3 | Hunks: 8 | Methods Changed: 7 | Complexity Δ (Sum/Max): 4/2 | Churn Δ: 28 | Churn Cumulative: 3734 | Contributors (this commit): 23 | Commits (past 90d): 12 | Contributors (cumulative): 28 | DMM Complexity: 1.0\n\nDIFF:\n@@ -645,7 +645,8 @@ class Flask(_PackageBoundObject):\n         rv = Environment(self, **options)\n         rv.globals.update(\n             url_for=url_for,\n-            get_flashed_messages=get_flashed_messages\n+            get_flashed_messages=get_flashed_messages,\n+            config=self.config\n         )\n         rv.filters['tojson'] = json.htmlsafe_dumps\n         return rv\n@@ -694,7 +695,9 @@ class Flask(_PackageBoundObject):\n                         to add extra variables.\n         \"\"\"\n         funcs = self.template_context_processors[None]\n-        bp = _request_ctx_stack.top.request.blueprint\n+        reqctx = _request_ctx_stack.top\n+        if reqctx is not None:\n+            bp = reqctx.request.blueprint\n             if bp is not None and bp in self.template_context_processors:\n                 funcs = chain(funcs, self.template_context_processors[bp])\n         orig_ctx = context.copy()\n\n@@ -12,7 +12,7 @@ import posixpath\n from jinja2 import BaseLoader, Environment as BaseEnvironment, \\\n      TemplateNotFound\n \n-from .globals import _request_ctx_stack\n+from .globals import _request_ctx_stack, _app_ctx_stack\n from .signals import template_rendered\n from .module import blueprint_is_module\n \n@@ -22,8 +22,9 @@ def _default_template_ctx_processor():\n     `session` and `g`.\n     \"\"\"\n     reqctx = _request_ctx_stack.top\n+    if reqctx is None:\n+        return {}\n     return dict(\n-        config=reqctx.app.config,\n         request=reqctx.request,\n         session=reqctx.session,\n         g=reqctx.g\n@@ -119,7 +120,7 @@ def render_template(template_name_or_list, **context):\n     :param context: the variables that should be available in the\n                     context of the template.\n     \"\"\"\n-    ctx = _request_ctx_stack.top\n+    ctx = _app_ctx_stack.top\n     ctx.app.update_template_context(context)\n     return _render(ctx.app.jinja_env.get_or_select_template(template_name_or_list),\n                    context, ctx.app)\n@@ -134,7 +135,7 @@ def render_template_string(source, **context):\n     :param context: the variables that should be available in the\n                     context of the template.\n     \"\"\"\n-    ctx = _request_ctx_stack.top\n+    ctx = _app_ctx_stack.top\n     ctx.app.update_template_context(context)\n     return _render(ctx.app.jinja_env.from_string(source),\n                    context, ctx.app)\n\n@@ -37,6 +37,18 @@ class TemplatingTestCase(FlaskTestCase):\n         rv = app.test_client().get('/')\n         self.assert_equal(rv.data, '42')\n \n+    def test_request_less_rendering(self):\n+        app = flask.Flask(__name__)\n+        app.config['WORLD_NAME'] = 'Special World'\n+        @app.context_processor\n+        def context_processor():\n+            return dict(foo=42)\n+\n+        with app.app_context():\n+            rv = flask.render_template_string('Hello {{ config.WORLD_NAME }} '\n+                                              '{{ foo }}')\n+            self.assert_equal(rv, 'Hello Special World 42')\n+\n     def test_standard_context(self):\n         app = flask.Flask(__name__)\n         app.secret_key = 'development key'\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#3e9f4e254b5757d80218c0d8077bd44465365489", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 3 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 5 | Churn Cumulative: 442 | Contributors (this commit): 7 | Commits (past 90d): 1 | Contributors (cumulative): 7 | DMM Complexity: None\n\nDIFF:\n@@ -213,7 +213,7 @@ class RequestContext(object):\n         # on the stack.  The rationale is that you want to access that\n         # information under debug situations.  However if someone forgets to\n         # pop that context again we want to make sure that on the next push\n-        # it's invalidated otherwise we run at risk that something leaks\n+        # it's invalidated, otherwise we run at risk that something leaks\n         # memory.  This is usually only a problem in testsuite since this\n         # functionality is not active in production environments.\n         top = _request_ctx_stack.top\n@@ -234,7 +234,8 @@ class RequestContext(object):\n \n         # Open the session at the moment that the request context is\n         # available. This allows a custom open_session method to use the\n-        # request context (e.g. flask-sqlalchemy).\n+        # request context (e.g. code that access database information\n+        # stored on `g` instead of the appcontext).\n         self.session = self.app.open_session(self.request)\n         if self.session is None:\n             self.session = self.app.make_null_session()\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#c2e5799879ed22a4657b75df6da66d6074ae7cc7", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 59 | Lines Deleted: 49 | Files Changed: 2 | Hunks: 28 | Methods Changed: 20 | Complexity Δ (Sum/Max): -1/0 | Churn Δ: 108 | Churn Cumulative: 574 | Contributors (this commit): 3 | Commits (past 90d): 2 | Contributors (cumulative): 4 | DMM Complexity: 0.9230769230769231\n\nDIFF:\n@@ -11,9 +11,8 @@\n \"\"\"\n from __future__ import with_statement\n from sqlite3 import dbapi2 as sqlite3\n-from contextlib import closing\n from flask import Flask, request, session, g, redirect, url_for, abort, \\\n-     render_template, flash\n+     render_template, flash, _app_ctx_stack\n \n # configuration\n DATABASE = '/tmp/flaskr.db'\n@@ -28,35 +27,37 @@ app.config.from_object(__name__)\n app.config.from_envvar('FLASKR_SETTINGS', silent=True)\n \n \n-def connect_db():\n-    \"\"\"Returns a new connection to the database.\"\"\"\n-    return sqlite3.connect(app.config['DATABASE'])\n-\n-\n def init_db():\n     \"\"\"Creates the database tables.\"\"\"\n-    with closing(connect_db()) as db:\n+    with app.app_context():\n+        db = get_db()\n         with app.open_resource('schema.sql') as f:\n             db.cursor().executescript(f.read())\n         db.commit()\n \n \n-@app.before_request\n-def before_request():\n-    \"\"\"Make sure we are connected to the database each request.\"\"\"\n-    g.db = connect_db()\n+def get_db():\n+    \"\"\"Opens a new database connection if there is none yet for the\n+    current application context.\n+    \"\"\"\n+    top = _app_ctx_stack.top\n+    if not hasattr(top, 'sqlite_db'):\n+        top.sqlite_db = sqlite3.connect(app.config['DATABASE'])\n+    return top.sqlite_db\n \n \n-@app.teardown_request\n-def teardown_request(exception):\n+@app.teardown_appcontext\n+def close_db_connection(exception):\n     \"\"\"Closes the database again at the end of the request.\"\"\"\n-    if hasattr(g, 'db'):\n-        g.db.close()\n+    top = _app_ctx_stack.top\n+    if hasattr(top, 'sqlite_db'):\n+        top.sqlite_db.close()\n \n \n @app.route('/')\n def show_entries():\n-    cur = g.db.execute('select title, text from entries order by id desc')\n+    db = get_db()\n+    cur = db.execute('select title, text from entries order by id desc')\n     entries = [dict(title=row[0], text=row[1]) for row in cur.fetchall()]\n     return render_template('show_entries.html', entries=entries)\n \n@@ -65,9 +66,10 @@ def show_entries():\n def add_entry():\n     if not session.get('logged_in'):\n         abort(401)\n-    g.db.execute('insert into entries (title, text) values (?, ?)',\n+    db = get_db()\n+    db.execute('insert into entries (title, text) values (?, ?)',\n                  [request.form['title'], request.form['text']])\n-    g.db.commit()\n+    db.commit()\n     flash('New entry was successfully posted')\n     return redirect(url_for('show_entries'))\n \n@@ -95,4 +97,5 @@ def logout():\n \n \n if __name__ == '__main__':\n+    init_db()\n     app.run()\n\n@@ -13,9 +13,8 @@ import time\n from sqlite3 import dbapi2 as sqlite3\n from hashlib import md5\n from datetime import datetime\n-from contextlib import closing\n from flask import Flask, request, session, url_for, redirect, \\\n-     render_template, abort, g, flash\n+     render_template, abort, g, flash, _app_ctx_stack\n from werkzeug import check_password_hash, generate_password_hash\n \n \n@@ -31,14 +30,29 @@ app.config.from_object(__name__)\n app.config.from_envvar('MINITWIT_SETTINGS', silent=True)\n \n \n-def connect_db():\n-    \"\"\"Returns a new connection to the database.\"\"\"\n-    return sqlite3.connect(app.config['DATABASE'])\n+def get_db():\n+    \"\"\"Opens a new database connection if there is none yet for the\n+    current application context.\n+    \"\"\"\n+    top = _app_ctx_stack.top\n+    if not hasattr(top, 'sqlite_db'):\n+        top.sqlite_db = sqlite3.connect(app.config['DATABASE'])\n+        top.sqlite_db.row_factory = sqlite3.Row\n+    return top.sqlite_db\n+\n+\n+@app.teardown_appcontext\n+def close_database(exception):\n+    \"\"\"Closes the database again at the end of the request.\"\"\"\n+    top = _app_ctx_stack.top\n+    if hasattr(top, 'sqlite_db'):\n+        top.sqlite_db.close()\n \n \n def init_db():\n     \"\"\"Creates the database tables.\"\"\"\n-    with closing(connect_db()) as db:\n+    with app.app_context():\n+        db = get_db()\n         with app.open_resource('schema.sql') as f:\n             db.cursor().executescript(f.read())\n         db.commit()\n@@ -46,16 +60,15 @@ def init_db():\n \n def query_db(query, args=(), one=False):\n     \"\"\"Queries the database and returns a list of dictionaries.\"\"\"\n-    cur = g.db.execute(query, args)\n-    rv = [dict((cur.description[idx][0], value)\n-               for idx, value in enumerate(row)) for row in cur.fetchall()]\n+    cur = get_db().execute(query, args)\n+    rv = cur.fetchall()\n     return (rv[0] if rv else None) if one else rv\n \n \n def get_user_id(username):\n     \"\"\"Convenience method to look up the id for a username.\"\"\"\n-    rv = g.db.execute('select user_id from user where username = ?',\n-                       [username]).fetchone()\n+    rv = query_db('select user_id from user where username = ?',\n+                  [username], one=True)\n     return rv[0] if rv else None\n \n \n@@ -72,23 +85,12 @@ def gravatar_url(email, size=80):\n \n @app.before_request\n def before_request():\n-    \"\"\"Make sure we are connected to the database each request and look\n-    up the current user so that we know he's there.\n-    \"\"\"\n-    g.db = connect_db()\n     g.user = None\n     if 'user_id' in session:\n         g.user = query_db('select * from user where user_id = ?',\n                           [session['user_id']], one=True)\n \n \n-@app.teardown_request\n-def teardown_request(exception):\n-    \"\"\"Closes the database again at the end of the request.\"\"\"\n-    if hasattr(g, 'db'):\n-        g.db.close()\n-\n-\n @app.route('/')\n def timeline():\n     \"\"\"Shows a users timeline or if no user is logged in it will\n@@ -145,9 +147,10 @@ def follow_user(username):\n     whom_id = get_user_id(username)\n     if whom_id is None:\n         abort(404)\n-    g.db.execute('insert into follower (who_id, whom_id) values (?, ?)',\n+    db = get_db()\n+    db.execute('insert into follower (who_id, whom_id) values (?, ?)',\n               [session['user_id'], whom_id])\n-    g.db.commit()\n+    db.commit()\n     flash('You are now following \"%s\"' % username)\n     return redirect(url_for('user_timeline', username=username))\n \n@@ -160,9 +163,10 @@ def unfollow_user(username):\n     whom_id = get_user_id(username)\n     if whom_id is None:\n         abort(404)\n-    g.db.execute('delete from follower where who_id=? and whom_id=?',\n+    db = get_db()\n+    db.execute('delete from follower where who_id=? and whom_id=?',\n               [session['user_id'], whom_id])\n-    g.db.commit()\n+    db.commit()\n     flash('You are no longer following \"%s\"' % username)\n     return redirect(url_for('user_timeline', username=username))\n \n@@ -173,10 +177,11 @@ def add_message():\n     if 'user_id' not in session:\n         abort(401)\n     if request.form['text']:\n-        g.db.execute('''insert into message (author_id, text, pub_date)\n+        db = get_db()\n+        db.execute('''insert into message (author_id, text, pub_date)\n           values (?, ?, ?)''', (session['user_id'], request.form['text'],\n                                 int(time.time())))\n-        g.db.commit()\n+        db.commit()\n         flash('Your message was recorded')\n     return redirect(url_for('timeline'))\n \n@@ -221,11 +226,12 @@ def register():\n         elif get_user_id(request.form['username']) is not None:\n             error = 'The username is already taken'\n         else:\n-            g.db.execute('''insert into user (\n+            db = get_db()\n+            db.execute('''insert into user (\n               username, email, pw_hash) values (?, ?, ?)''',\n               [request.form['username'], request.form['email'],\n                generate_password_hash(request.form['password'])])\n-            g.db.commit()\n+            db.commit()\n             flash('You were successfully registered and can login now')\n             return redirect(url_for('login'))\n     return render_template('register.html', error=error)\n@@ -245,4 +251,5 @@ app.jinja_env.filters['gravatar'] = gravatar_url\n \n \n if __name__ == '__main__':\n+    init_db()\n     app.run()\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#a15c6c569ab40f0da2d18b1bd338bd03ddb024eb", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 2 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 171 | Contributors (this commit): 2 | Commits (past 90d): 2 | Contributors (cumulative): 2 | DMM Complexity: None\n\nDIFF:\n@@ -8,13 +8,13 @@\n     :copyright: (c) 2011 by Armin Ronacher.\n     :license: BSD, see LICENSE for more details.\n \"\"\"\n+from __future__ import with_statement\n import flask\n import flask.views\n import unittest\n from flask.testsuite import FlaskTestCase\n from werkzeug.http import parse_set_header\n \n-\n class ViewTestCase(FlaskTestCase):\n \n     def common_test(self, app):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#275f830c8346c29af424b1ed2f2ffabee2408ec8", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 0 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 1571 | Contributors (this commit): 21 | Commits (past 90d): 9 | Contributors (cumulative): 21 | DMM Complexity: 1.0\n\nDIFF:\n@@ -295,8 +295,6 @@ def url_for(endpoint, **values):\n         values['_method'] = method\n         return appctx.app.handle_url_build_error(error, endpoint, values)\n \n-    rv = url_adapter.build(endpoint, values, method=method,\n-                           force_external=external)\n     if anchor is not None:\n         rv += '#' + url_quote(anchor)\n     return rv\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#8339cb35082fc93d3a9c98616aed7fe0c1c642dc", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 38 | Lines Deleted: 9 | Files Changed: 3 | Hunks: 8 | Methods Changed: 7 | Complexity Δ (Sum/Max): 2/1 | Churn Δ: 47 | Churn Cumulative: 3974 | Contributors (this commit): 23 | Commits (past 90d): 15 | Contributors (cumulative): 26 | DMM Complexity: 1.0\n\nDIFF:\n@@ -274,7 +274,8 @@ class Flask(_PackageBoundObject):\n         'SEND_FILE_MAX_AGE_DEFAULT':            12 * 60 * 60, # 12 hours\n         'TRAP_BAD_REQUEST_ERRORS':              False,\n         'TRAP_HTTP_EXCEPTIONS':                 False,\n-        'PREFERRED_URL_SCHEME':                 'http'\n+        'PREFERRED_URL_SCHEME':                 'http',\n+        'JSON_AS_ASCII':                        True\n     })\n \n     #: The rule object to use for URL rules created.  This is used by\n\n@@ -68,20 +68,37 @@ class JSONDecoder(_json.JSONDecoder):\n     \"\"\"\n \n \n+def _dump_arg_defaults(kwargs):\n+    \"\"\"Inject default arguments for dump functions.\"\"\"\n+    if current_app:\n+        kwargs.setdefault('cls', current_app.json_encoder)\n+        if not current_app.config['JSON_AS_ASCII']:\n+            kwargs.setdefault('ensure_ascii', False)\n+\n+\n+def _load_arg_defaults(kwargs):\n+    \"\"\"Inject default arguments for load functions.\"\"\"\n+    if current_app:\n+        kwargs.setdefault('cls', current_app.json_decoder)\n+\n+\n def dumps(obj, **kwargs):\n     \"\"\"Serialize ``obj`` to a JSON formatted ``str`` by using the application's\n     configured encoder (:attr:`~flask.Flask.json_encoder`) if there is an\n     application on the stack.\n+\n+    This function can return ``unicode`` strings or ascii-only bytestrings by\n+    default which coerce into unicode strings automatically.  That behavior by\n+    default is controlled by the ``JSON_AS_ASCII`` configuration variable\n+    and can be overriden by the simplejson ``ensure_ascii`` parameter.\n     \"\"\"\n-    if current_app:\n-        kwargs.setdefault('cls', current_app.json_encoder)\n+    _dump_arg_defaults(kwargs)\n     return _json.dumps(obj, **kwargs)\n \n \n def dump(obj, fp, **kwargs):\n     \"\"\"Like :func:`dumps` but writes into a file object.\"\"\"\n-    if current_app:\n-        kwargs.setdefault('cls', current_app.json_encoder)\n+    _dump_arg_defaults(kwargs)\n     return _json.dump(obj, fp, **kwargs)\n \n \n@@ -90,16 +107,14 @@ def loads(s, **kwargs):\n     configured decoder (:attr:`~flask.Flask.json_decoder`) if there is an\n     application on the stack.\n     \"\"\"\n-    if current_app:\n-        kwargs.setdefault('cls', current_app.json_decoder)\n+    _load_arg_defaults(kwargs)\n     return _json.loads(s, **kwargs)\n \n \n def load(fp, **kwargs):\n     \"\"\"Like :func:`loads` but reads from a file object.\n     \"\"\"\n-    if current_app:\n-        kwargs.setdefault('cls', current_app.json_decoder)\n+    _load_arg_defaults(kwargs)\n     return _json.load(fp, **kwargs)\n \n \n\n@@ -79,6 +79,19 @@ class JSONTestCase(FlaskTestCase):\n             self.assert_equal(rv.mimetype, 'application/json')\n             self.assert_equal(flask.json.loads(rv.data), d)\n \n+    def test_json_as_unicode(self):\n+        app = flask.Flask(__name__)\n+\n+        app.config['JSON_AS_ASCII'] = True\n+        with app.app_context():\n+            rv = flask.json.dumps(u'\\N{SNOWMAN}')\n+            self.assert_equal(rv, '\"\\\\u2603\"')\n+\n+        app.config['JSON_AS_ASCII'] = False\n+        with app.app_context():\n+            rv = flask.json.dumps(u'\\N{SNOWMAN}')\n+            self.assert_equal(rv, u'\"\\u2603\"')\n+\n     def test_json_attr(self):\n         app = flask.Flask(__name__)\n         @app.route('/add', methods=['POST'])\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#1e39871d681bd41451cf8694cd67fffe017fa522", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 2 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 259 | Contributors (this commit): 5 | Commits (past 90d): 2 | Contributors (cumulative): 5 | DMM Complexity: None\n\nDIFF:\n@@ -44,7 +44,7 @@ class ExtensionImporter(object):\n     def install(self):\n         sys.meta_path[:] = [x for x in sys.meta_path if self != x] + [self]\n \n-    def find_module(self, fullname):\n+    def find_module(self, fullname, path=None):\n         if fullname.startswith(self.prefix):\n             return self\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#2b885ce4dc3f6b2ea2707a39a8198a84d7ad3991", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 17 | Lines Deleted: 0 | Files Changed: 2 | Hunks: 3 | Methods Changed: 2 | Complexity Δ (Sum/Max): 2/2 | Churn Δ: 17 | Churn Cumulative: 596 | Contributors (this commit): 1 | Commits (past 90d): 8 | Contributors (cumulative): 2 | DMM Complexity: 0.0\n\nDIFF:\n@@ -10,6 +10,12 @@\n \"\"\"\n \n \n+class UnexpectedUnicodeError(AssertionError, UnicodeError):\n+    \"\"\"Raised in places where we want some better error reporting for\n+    unexpected unicode or binary data.\n+    \"\"\"\n+\n+\n class DebugFilesKeyError(KeyError, AssertionError):\n     \"\"\"Raised from request.files during debugging.  The idea is that it can\n     provide a better error message than just a generic KeyError/BadRequest.\n\n@@ -66,6 +66,14 @@ class TaggedJSONSerializer(object):\n                 return {' d': http_date(value)}\n             elif isinstance(value, dict):\n                 return dict((k, _tag(v)) for k, v in value.iteritems())\n+            elif isinstance(value, str):\n+                try:\n+                    return unicode(value)\n+                except UnicodeError:\n+                    raise UnexpectedUnicodeError(u'A byte string with '\n+                        u'non-ASCII data was passed to the session system '\n+                        u'which can only store unicode strings.  Consider '\n+                        u'base64 encoding your string (String was %r)' % value)\n             return value\n         return json.dumps(_tag(value), separators=(',', ':'))\n \n@@ -292,3 +300,6 @@ class SecureCookieSessionInterface(SessionInterface):\n         response.set_cookie(app.session_cookie_name, val,\n                             expires=expires, httponly=httponly,\n                             domain=domain, path=path, secure=secure)\n+\n+\n+from flask.debughelpers import UnexpectedUnicodeError\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#82b29c09ac898042d589d852f1ef6f107fec9f71", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 5 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 2 | Methods Changed: 2 | Complexity Δ (Sum/Max): -1/0 | Churn Δ: 7 | Churn Cumulative: 182 | Contributors (this commit): 2 | Commits (past 90d): 2 | Contributors (cumulative): 2 | DMM Complexity: 1.0\n\nDIFF:\n@@ -42,7 +42,10 @@ def get_db():\n     \"\"\"\n     top = _app_ctx_stack.top\n     if not hasattr(top, 'sqlite_db'):\n-        top.sqlite_db = sqlite3.connect(app.config['DATABASE'])\n+        sqlite_db = sqlite3.connect(app.config['DATABASE'])\n+        sqlite_db.row_factory = sqlite3.Row\n+        top.sqlite_db = sqlite_db\n+\n     return top.sqlite_db\n \n \n@@ -58,7 +61,7 @@ def close_db_connection(exception):\n def show_entries():\n     db = get_db()\n     cur = db.execute('select title, text from entries order by id desc')\n-    entries = [dict(title=row[0], text=row[1]) for row in cur.fetchall()]\n+    entries = cur.fetchall()\n     return render_template('show_entries.html', entries=entries)\n \n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#1949c4a9abc174bf29620f6dd8ceab9ed3ace2eb", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 55 | Lines Deleted: 20 | Files Changed: 6 | Hunks: 14 | Methods Changed: 13 | Complexity Δ (Sum/Max): 7/2 | Churn Δ: 75 | Churn Cumulative: 5719 | Contributors (this commit): 26 | Commits (past 90d): 15 | Contributors (cumulative): 40 | DMM Complexity: 1.0\n\nDIFF:\n@@ -28,7 +28,7 @@ from .helpers import _PackageBoundObject, url_for, get_flashed_messages, \\\n from . import json\n from .wrappers import Request, Response\n from .config import ConfigAttribute, Config\n-from .ctx import RequestContext, AppContext, _RequestGlobals\n+from .ctx import RequestContext, AppContext, _AppCtxGlobals\n from .globals import _request_ctx_stack, request\n from .sessions import SecureCookieSessionInterface\n from .module import blueprint_is_module\n@@ -157,8 +157,24 @@ class Flask(_PackageBoundObject):\n     #: 3. Return None instead of AttributeError on expected attributes.\n     #: 4. Raise exception if an unexpected attr is set, a \"controlled\" flask.g.\n     #:\n-    #: .. versionadded:: 0.9\n-    request_globals_class = _RequestGlobals\n+    #: In Flask 0.9 this property was called `request_globals_class` but it\n+    #: was changed in 0.10 to :attr:`app_ctx_globals_class` because the\n+    #: flask.g object is not application context scoped.\n+    #:\n+    #: .. versionadded:: 0.10\n+    app_ctx_globals_class = _AppCtxGlobals\n+\n+    # Backwards compatibility support\n+    def _get_request_globals_class(self):\n+        return self.app_ctx_globals_class\n+    def _set_request_globals_class(self, value):\n+        from warnings import warn\n+        warn(DeprecationWarning('request_globals_class attribute is now '\n+                                'called app_ctx_globals_class'))\n+        self.app_ctx_globals_class = value\n+    request_globals_class = property(_get_request_globals_class,\n+                                     _set_request_globals_class)\n+    del _get_request_globals_class, _set_request_globals_class\n \n     #: The debug flag.  Set this to `True` to enable debugging of the\n     #: application.  In debug mode the debugger will kick in when an unhandled\n\n@@ -17,7 +17,7 @@ from .globals import _request_ctx_stack, _app_ctx_stack\n from .module import blueprint_is_module\n \n \n-class _RequestGlobals(object):\n+class _AppCtxGlobals(object):\n     \"\"\"A plain object.\"\"\"\n     pass\n \n@@ -101,6 +101,7 @@ class AppContext(object):\n     def __init__(self, app):\n         self.app = app\n         self.url_adapter = app.create_url_adapter(None)\n+        self.g = app.app_ctx_globals_class()\n \n         # Like request context, app contexts can be pushed multiple times\n         # but there a basic \"refcount\" is enough to track them.\n@@ -164,7 +165,6 @@ class RequestContext(object):\n         self.app = app\n         self.request = app.request_class(environ)\n         self.url_adapter = app.create_url_adapter(self.request)\n-        self.g = app.request_globals_class()\n         self.flashes = None\n         self.session = None\n \n@@ -195,6 +195,13 @@ class RequestContext(object):\n             if bp is not None and blueprint_is_module(bp):\n                 self.request._is_old_module = True\n \n+    def _get_g(self):\n+        return _app_ctx_stack.top.g\n+    def _set_g(self, value):\n+        _app_ctx_stack.top.g = value\n+    g = property(_get_g, _set_g)\n+    del _get_g, _set_g\n+\n     def match_request(self):\n         \"\"\"Can be overridden by a subclass to hook into the matching\n         of the request.\n\n@@ -13,13 +13,21 @@\n from functools import partial\n from werkzeug.local import LocalStack, LocalProxy\n \n-def _lookup_object(name):\n+\n+def _lookup_req_object(name):\n     top = _request_ctx_stack.top\n     if top is None:\n         raise RuntimeError('working outside of request context')\n     return getattr(top, name)\n \n \n+def _lookup_app_object(name):\n+    top = _app_ctx_stack.top\n+    if top is None:\n+        raise RuntimeError('working outside of application context')\n+    return getattr(top, name)\n+\n+\n def _find_app():\n     top = _app_ctx_stack.top\n     if top is None:\n@@ -31,6 +39,6 @@ def _find_app():\n _request_ctx_stack = LocalStack()\n _app_ctx_stack = LocalStack()\n current_app = LocalProxy(_find_app)\n-request = LocalProxy(partial(_lookup_object, 'request'))\n-session = LocalProxy(partial(_lookup_object, 'session'))\n-g = LocalProxy(partial(_lookup_object, 'g'))\n+request = LocalProxy(partial(_lookup_req_object, 'request'))\n+session = LocalProxy(partial(_lookup_req_object, 'session'))\n+g = LocalProxy(partial(_lookup_app_object, 'g'))\n\n@@ -22,13 +22,14 @@ def _default_template_ctx_processor():\n     `session` and `g`.\n     \"\"\"\n     reqctx = _request_ctx_stack.top\n-    if reqctx is None:\n-        return {}\n-    return dict(\n-        request=reqctx.request,\n-        session=reqctx.session,\n-        g=reqctx.g\n-    )\n+    appctx = _app_ctx_stack.top\n+    rv = {}\n+    if appctx is not None:\n+        rv['g'] = appctx.g\n+    if reqctx is not None:\n+        rv['request'] = reqctx.request\n+        rv['session'] = reqctx.session\n+    return rv\n \n \n class Environment(BaseEnvironment):\n\n@@ -65,13 +65,13 @@ class AppContextTestCase(FlaskTestCase):\n \n         self.assert_equal(cleanup_stuff, [None])\n \n-    def test_custom_request_globals_class(self):\n+    def test_custom_app_ctx_globals_class(self):\n         class CustomRequestGlobals(object):\n             def __init__(self):\n                 self.spam = 'eggs'\n         app = flask.Flask(__name__)\n-        app.request_globals_class = CustomRequestGlobals\n-        with app.test_request_context():\n+        app.app_ctx_globals_class = CustomRequestGlobals\n+        with app.app_context():\n             self.assert_equal(\n                 flask.render_template_string('{{ g.spam }}'), 'eggs')\n \n\n@@ -1104,8 +1104,11 @@ class BasicFunctionalityTestCase(FlaskTestCase):\n                 c.get('/fail')\n \n         self.assert_(flask._request_ctx_stack.top is not None)\n-        flask._request_ctx_stack.pop()\n+        self.assert_(flask._app_ctx_stack.top is not None)\n+        # implicit appctx disappears too\n+        flask._request_ctx_stack.top.pop()\n         self.assert_(flask._request_ctx_stack.top is None)\n+        self.assert_(flask._app_ctx_stack.top is None)\n \n \n class ContextTestCase(FlaskTestCase):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
