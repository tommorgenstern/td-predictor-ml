{"custom_id": "keras#ef72bfb728db395c4e70e7ef4d51bbc21b71f524", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 39 | Lines Deleted: 3 | Files Changed: 3 | Hunks: 5 | Methods Changed: 6 | Complexity Δ (Sum/Max): 4/3 | Churn Δ: 42 | Churn Cumulative: 1074 | Contributors (this commit): 7 | Commits (past 90d): 28 | Contributors (cumulative): 9 | DMM Complexity: 0.8846153846153846\n\nDIFF:\n@@ -250,8 +250,21 @@ class TextVectorization(Layer):\n         self._allow_non_tensor_positional_args = True\n         self.supports_jit = False\n \n-    def compute_output_shape(self, input_shape):\n-        return tuple(self.layer.compute_output_shape(input_shape))\n+    @property\n+    def compute_dtype(self):\n+        return \"string\"\n+\n+    @property\n+    def variable_dtype(self):\n+        return \"string\"\n+\n+    def compute_output_spec(self, inputs):\n+        output_shape = tuple(self.layer.compute_output_shape(inputs.shape))\n+        if self.layer._output_mode == \"int\":\n+            output_dtype = \"int64\"\n+        else:\n+            output_dtype = backend.floatx()\n+        return backend.KerasTensor(output_shape, dtype=output_dtype)\n \n     def adapt(self, data, batch_size=None, steps=None):\n         \"\"\"Computes a vocabulary of string terms from tokens in a dataset.\n\n@@ -1,8 +1,10 @@\n import numpy as np\n+import pytest\n import tensorflow as tf\n \n from keras_core import backend\n from keras_core import layers\n+from keras_core import models\n from keras_core import testing\n \n \n@@ -82,3 +84,21 @@ class TextVectorizationTest(testing.TestCase):\n         ds = tf.data.Dataset.from_tensor_slices(input_data).batch(2).map(layer)\n         for output in ds.take(1):\n             output.numpy()\n+\n+    @pytest.mark.skipif(\n+        backend.backend() != \"tensorflow\", reason=\"Requires string tensors.\"\n+    )\n+    def test_tf_as_first_sequential_layer(self):\n+        layer = layers.TextVectorization(\n+            max_tokens=10,\n+            output_mode=\"int\",\n+            output_sequence_length=3,\n+        )\n+        layer.set_vocabulary([\"baz\", \"bar\", \"foo\"])\n+        model = models.Sequential(\n+            [\n+                layer,\n+                layers.Embedding(5, 4),\n+            ]\n+        )\n+        model(tf.convert_to_tensor([[\"foo qux bar\"], [\"qux baz\"]]))\n\n@@ -157,7 +157,10 @@ class Sequential(Model):\n                     f\"with input_shape {input_shape}\"\n                 )\n         else:\n-            self._layers = [InputLayer(batch_shape=input_shape)] + self._layers\n+            dtype = self._layers[0].compute_dtype\n+            self._layers = [\n+                InputLayer(batch_shape=input_shape, dtype=dtype)\n+            ] + self._layers\n \n         # Build functional model\n         inputs = self._layers[0].output\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "keras#018eef87945ae4c5dd7dbb852ce12094374a5fbc", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 51 | Lines Deleted: 4 | Files Changed: 5 | Hunks: 6 | Methods Changed: 7 | Complexity Δ (Sum/Max): 3/3 | Churn Δ: 55 | Churn Cumulative: 7412 | Contributors (this commit): 20 | Commits (past 90d): 128 | Contributors (cumulative): 43 | DMM Complexity: 1.0\n\nDIFF:\n@@ -717,7 +717,7 @@ class JAXTrainer(base_trainer.Trainer):\n         trainable_variables = self.trainable_variables\n         non_trainable_variables = self.non_trainable_variables\n         state = (trainable_variables, non_trainable_variables)\n-        batch_outputs, state = self.predict_function(state, [x])\n+        batch_outputs, state = self.predict_function(state, [(x,)])\n         batch_outputs = tree.map_structure(lambda x: np.array(x), batch_outputs)\n         return batch_outputs\n \n\n@@ -306,7 +306,7 @@ class NumpyTrainer(base_trainer.Trainer):\n \n     def predict_on_batch(self, x):\n         self.make_predict_function()\n-        batch_outputs = self.predict_function((x,))\n+        batch_outputs = self.predict_function([(x,)])\n         batch_outputs = tree.map_structure(\n             backend.convert_to_numpy, batch_outputs\n         )\n\n@@ -560,7 +560,7 @@ class TensorFlowTrainer(base_trainer.Trainer):\n \n     def predict_on_batch(self, x):\n         self.make_predict_function()\n-        batch_outputs = self.predict_function((x,))\n+        batch_outputs = self.predict_function([(x,)])\n         batch_outputs = tf.nest.map_structure(\n             convert_to_np_if_not_ragged, batch_outputs\n         )\n\n@@ -526,7 +526,7 @@ class TorchTrainer(base_trainer.Trainer):\n \n     def predict_on_batch(self, x):\n         self.make_predict_function()\n-        batch_outputs = self.predict_function((x,))\n+        batch_outputs = self.predict_function([(x,)])\n         batch_outputs = tree.map_structure(\n             backend.convert_to_numpy, batch_outputs\n         )\n\n@@ -61,6 +61,26 @@ class StructModel(layers.Layer, Trainer):\n         }\n \n \n+class ListModel(layers.Layer, Trainer):\n+    def __init__(self, units):\n+        layers.Layer.__init__(self)\n+        Trainer.__init__(self)\n+        self.dense_1 = layers.Dense(\n+            units,\n+            use_bias=False,\n+            kernel_initializer=initializers.Ones(),\n+        )\n+        self.dense_2 = layers.Dense(\n+            units,\n+            use_bias=False,\n+            kernel_initializer=initializers.Ones(),\n+        )\n+\n+    def call(self, x):\n+        assert isinstance(x, (list, tuple))\n+        return self.dense_1(x[0]) + self.dense_2(x[1])\n+\n+\n class TrainingTestingLayer(layers.Layer, Trainer):\n     def __init__(self):\n         layers.Layer.__init__(self)\n@@ -653,3 +673,30 @@ class TestTrainer(testing.TestCase, parameterized.TestCase):\n         self.assertEqual(\n             sorted(list(eval_out_2.keys())), [\"loss\", \"mean_absolute_error\"]\n         )\n+\n+    @pytest.mark.requires_trainable_backend\n+    def test_nested_inputs(self):\n+        model = ListModel(units=2)\n+        out = model([np.ones((3, 2)), np.ones((3, 3))])\n+        self.assertEqual(tuple(out.shape), (3, 2))\n+        model.compile(optimizer=\"sgd\", loss=\"mse\", metrics=[\"mse\"])\n+        history = model.fit(\n+            [np.ones((3, 2)), np.ones((3, 3))], np.ones((3, 2))\n+        ).history\n+        self.assertAllClose(history[\"loss\"], 16.0)\n+        train_out = model.train_on_batch(\n+            [np.ones((3, 2)), np.ones((3, 3))], np.ones((3, 2))\n+        )\n+        self.assertAllClose(train_out[0], 15.2200)\n+        eval_out = model.evaluate(\n+            [np.ones((3, 2)), np.ones((3, 3))], np.ones((3, 2))\n+        )\n+        self.assertAllClose(eval_out[0], 13.0321)\n+        eval_out = model.test_on_batch(\n+            [np.ones((3, 2)), np.ones((3, 3))], np.ones((3, 2))\n+        )\n+        self.assertAllClose(eval_out[0], 13.0321)\n+        predict_out = model.predict([np.ones((3, 2)), np.ones((3, 3))])\n+        self.assertEqual(predict_out.shape, (3, 2))\n+        predict_out = model.predict_on_batch([np.ones((3, 2)), np.ones((3, 3))])\n+        self.assertEqual(predict_out.shape, (3, 2))\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "keras#bba1810a4af72fe68323b4384e85577eee282a10", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 623 | Contributors (this commit): 7 | Commits (past 90d): 12 | Contributors (cumulative): 7 | DMM Complexity: None\n\nDIFF:\n@@ -230,7 +230,7 @@ def while_loop(\n     loop_vars,\n     maximum_iterations=None,\n ):\n-    \"\"\"While loop implemetation.\n+    \"\"\"While loop implementation.\n \n     Args:\n         cond: A callable that represents the termination condition of the loop.\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "keras#b85fcd75d9d1791f331ed30c2c4cd75c06017149", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 71 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 3 | Methods Changed: 3 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 71 | Churn Cumulative: 1184 | Contributors (this commit): 6 | Commits (past 90d): 14 | Contributors (cumulative): 6 | DMM Complexity: None\n\nDIFF:\n@@ -429,6 +429,30 @@ class Gelu(Operation):\n \n @keras_core_export([\"keras_core.ops.gelu\", \"keras_core.ops.nn.gelu\"])\n def gelu(x, approximate=True):\n+    \"\"\"Gaussian Error Linear Unit (GELU) activation function.\n+\n+    If `approximate` is `True`, it is defined as:\n+    `f(x) = 0.5 * x * (1 + tanh(sqrt(2 / pi) * (x + 0.044715 * x^3)))`\n+\n+    Or if `approximate` is `False`, it is defined as:\n+    `f(x) = x * P(X <= x) = 0.5 * x * (1 + erf(x / sqrt(2)))`,\n+    where `P(X) ~ N(0, 1)`.\n+\n+    Args:\n+        x: Input tensor.\n+        approximate: Approximate version of GELU activation. Defaults to `True`.\n+\n+    Returns:\n+        A tensor with the same shape as `x`.\n+\n+    Example:\n+\n+    >>> x = np.array([-1., 0., 1.])\n+    >>> x_gelu = keras_core.ops.gelu(x)\n+    >>> print(x_gelu)\n+    array([-0.15865525, 0., 0.84134475], shape=(3,), dtype=float64)\n+\n+    \"\"\"\n     if any_symbolic_tensors((x,)):\n         return Gelu(approximate).symbolic_call(x)\n     return backend.nn.gelu(x, approximate)\n@@ -448,6 +472,32 @@ class Softmax(Operation):\n \n @keras_core_export([\"keras_core.ops.softmax\", \"keras_core.ops.nn.softmax\"])\n def softmax(x, axis=-1):\n+    \"\"\"Softmax activation function.\n+\n+    The elements of the output vector lie within the range `(0, 1)`, and their\n+    total sum is exactly 1 (excluding the floating point rounding error).\n+\n+    Each vector is processed independently. The `axis` argument specifies the\n+    axis along which the function is applied within the input.\n+\n+    It is defined as:\n+    `f(x) = exp(x) / sum(exp(x))`\n+\n+    Args:\n+        x: Input tensor.\n+        axis: Integer, axis along which the softmax is applied.\n+\n+    Returns:\n+        A tensor with the same shape as `x`.\n+\n+    Example:\n+\n+    >>> x = np.array([-1., 0., 1.])\n+    >>> x_softmax = keras_core.ops.softmax(x)\n+    >>> print(x_softmax)\n+    array([0.09003057, 0.24472847, 0.66524096], shape=(3,), dtype=float64)\n+\n+    \"\"\"\n     if any_symbolic_tensors((x,)):\n         return Softmax(axis).symbolic_call(x)\n     return backend.nn.softmax(x, axis=axis)\n@@ -472,6 +522,27 @@ class LogSoftmax(Operation):\n     ]\n )\n def log_softmax(x, axis=-1):\n+    \"\"\"Log-softmax activation function.\n+\n+    It is defined as:\n+    `f(x) = x - max(x) - log(sum(exp(x - max(x))))`\n+\n+    Args:\n+        x: Input tensor.\n+        axis: Integer, axis along which the log-softmax is applied.\n+            Defaults to `-1`.\n+\n+    Returns:\n+        A tensor with the same shape as `x`.\n+\n+    Example:\n+\n+    >>> x = np.array([-1., 0., 1.])\n+    >>> x_log_softmax = keras_core.ops.log_softmax(x)\n+    >>> print(x_log_softmax)\n+    array([-2.40760596, -1.40760596, -0.40760596], shape=(3,), dtype=float64)\n+\n+    \"\"\"\n     if any_symbolic_tensors((x,)):\n         return LogSoftmax(axis).symbolic_call(x)\n     return backend.nn.log_softmax(x, axis=axis)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "keras#94ee13430948c7ddce8dfb750fb7e57bf67f3ae3", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 62 | Lines Deleted: 26 | Files Changed: 1 | Hunks: 12 | Methods Changed: 5 | Complexity Δ (Sum/Max): 6/6 | Churn Δ: 88 | Churn Cumulative: 222 | Contributors (this commit): 4 | Commits (past 90d): 4 | Contributors (cumulative): 4 | DMM Complexity: 1.0\n\nDIFF:\n@@ -1,6 +1,5 @@\n import numpy as np\n import pytest\n-import tensorflow as tf\n \n from keras_core import backend\n from keras_core import testing\n@@ -172,14 +171,23 @@ class MathOpsCorrectnessTest(testing.TestCase):\n         data = np.array([1, 2, 3, 4, 5, 6, 7, 8], dtype=np.float32)\n         segment_ids = np.array([0, 0, 1, 1, 1, 2, 2, 2], dtype=np.int32)\n         outputs = kmath.segment_sum(data, segment_ids)\n-        expected = tf.math.segment_sum(data, segment_ids)\n+\n+        # Segment 0: 1 + 2 = 3\n+        # Segment 1: 3 + 4 + 5 = 12\n+        # Segment 2: 6 + 7 + 8 = 21\n+        expected = np.array([3, 12, 21], dtype=np.float32)\n         self.assertAllClose(outputs, expected)\n \n         # Test N-D case.\n         data = np.random.rand(9, 3, 3)\n         segment_ids = np.array([0, 0, 0, 1, 1, 1, 2, 2, 2], dtype=np.int32)\n         outputs = kmath.segment_sum(data, segment_ids)\n-        expected = tf.math.segment_sum(data, segment_ids)\n+\n+        expected = np.zeros((3, 3, 3))\n+        for i in range(data.shape[0]):\n+            segment_id = segment_ids[i]\n+            expected[segment_id] += data[i]\n+\n         self.assertAllClose(outputs, expected)\n \n     def test_segment_sum_explicit_num_segments(self):\n@@ -187,27 +195,33 @@ class MathOpsCorrectnessTest(testing.TestCase):\n         data = np.array([1, 2, 3, 4, 5, 6, 7, 8], dtype=np.float32)\n         segment_ids = np.array([0, 0, 1, 1, 1, 2, 2, 2], dtype=np.int32)\n         outputs = kmath.segment_sum(data, segment_ids, num_segments=4)\n-        expected = tf.math.unsorted_segment_sum(\n-            data, segment_ids, num_segments=4\n-        )\n+        expected = np.array([3, 12, 21, 0], dtype=np.float32)\n         self.assertAllClose(outputs, expected)\n \n         # Test 1D with -1 case.\n         data = np.array([1, 2, 3, 4, 5, 6, 7, 8], dtype=np.float32)\n         segment_ids = np.array([0, 0, 1, 1, -1, 2, 2, -1], dtype=np.int32)\n         outputs = kmath.segment_sum(data, segment_ids, num_segments=4)\n-        expected = tf.math.unsorted_segment_sum(\n-            data, segment_ids, num_segments=4\n-        )\n+\n+        # Segment ID 0: First two elements (1 + 2) = 3\n+        # Segment ID 1: Next two elements (3 + 4) = 7\n+        # Segment ID -1: Ignore the next two elements, because segment ID is -1.\n+        # Segment ID 2: Next two elements (6 + 7) = 13\n+        # Segment ID 3: No elements, so output is 0.\n+        expected = np.array([3, 7, 13, 0], dtype=np.float32)\n         self.assertAllClose(outputs, expected)\n \n         # Test N-D case.\n         data = np.random.rand(9, 3, 3)\n         segment_ids = np.array([0, 0, 0, 1, 1, 1, 2, 2, 2], dtype=np.int32)\n         outputs = kmath.segment_sum(data, segment_ids, num_segments=4)\n-        expected = tf.math.unsorted_segment_sum(\n-            data, segment_ids, num_segments=4\n-        )\n+\n+        expected = np.zeros((4, 3, 3))\n+        for i in range(data.shape[0]):\n+            segment_id = segment_ids[i]\n+            if segment_id != -1:\n+                expected[segment_id] += data[i]\n+\n         self.assertAllClose(outputs, expected)\n \n     @pytest.mark.skipif(\n@@ -219,14 +233,23 @@ class MathOpsCorrectnessTest(testing.TestCase):\n         data = np.array([1, 2, 3, 4, 5, 6, 7, 8], dtype=np.float32)\n         segment_ids = np.array([0, 0, 1, 1, 1, 2, 2, 2], dtype=np.int32)\n         outputs = kmath.segment_max(data, segment_ids)\n-        expected = tf.math.segment_max(data, segment_ids)\n+\n+        # Segment ID 0: Max of the first two elements = 2\n+        # Segment ID 1: Max of the next three elements = 5\n+        # Segment ID 2: Max of the next three elements = 8\n+        expected = np.array([2, 5, 8], dtype=np.float32)\n+\n         self.assertAllClose(outputs, expected)\n \n         # Test N-D case.\n         data = np.random.rand(9, 3, 3)\n         segment_ids = np.array([0, 0, 0, 1, 1, 1, 2, 2, 2], dtype=np.int32)\n         outputs = kmath.segment_max(data, segment_ids)\n-        expected = tf.math.segment_max(data, segment_ids)\n+        expected = np.zeros((3, 3, 3))\n+        for i in range(data.shape[0]):\n+            segment_id = segment_ids[i]\n+            expected[segment_id] = np.maximum(expected[segment_id], data[i])\n+\n         self.assertAllClose(outputs, expected)\n \n     def test_segment_max_explicit_num_segments(self):\n@@ -234,27 +257,32 @@ class MathOpsCorrectnessTest(testing.TestCase):\n         data = np.array([1, 2, 3, 4, 5, 6, 7, 8], dtype=np.float32)\n         segment_ids = np.array([0, 0, 1, 1, 1, 2, 2, 2], dtype=np.int32)\n         outputs = kmath.segment_max(data, segment_ids, num_segments=3)\n-        expected = tf.math.unsorted_segment_max(\n-            data, segment_ids, num_segments=3\n-        )\n+\n+        # Segment ID 0: Max of the first two elements = 2\n+        # Segment ID 1: Max of the next three elements = 5\n+        # Segment ID 2: Max of the next three elements = 8\n+        expected = np.array([2, 5, 8], dtype=np.float32)\n+\n         self.assertAllClose(outputs, expected)\n \n         # Test 1D with -1 case.\n         data = np.array([1, 2, 3, 4, 5, 6, 7, 8], dtype=np.float32)\n         segment_ids = np.array([0, 0, 1, 1, -1, 2, 2, -1], dtype=np.int32)\n         outputs = kmath.segment_max(data, segment_ids, num_segments=3)\n-        expected = tf.math.unsorted_segment_max(\n-            data, segment_ids, num_segments=3\n-        )\n+        expected = np.array([2, 4, 7], dtype=np.float32)\n+\n         self.assertAllClose(outputs, expected)\n \n         # Test N-D case.\n         data = np.random.rand(9, 3, 3)\n         segment_ids = np.array([0, 0, 0, 1, 1, 1, 2, 2, 2], dtype=np.int32)\n         outputs = kmath.segment_max(data, segment_ids, num_segments=3)\n-        expected = tf.math.unsorted_segment_max(\n-            data, segment_ids, num_segments=3\n-        )\n+\n+        expected = np.full((3, 3, 3), -np.inf)\n+        for i in range(data.shape[0]):\n+            segment_id = segment_ids[i]\n+            expected[segment_id] = np.maximum(expected[segment_id], data[i])\n+\n         self.assertAllClose(outputs, expected)\n \n     def test_top_k(self):\n@@ -271,9 +299,17 @@ class MathOpsCorrectnessTest(testing.TestCase):\n \n         x = np.random.rand(5, 5)\n         outputs = kmath.top_k(x, k=2)\n-        expected = tf.math.top_k(x, k=2)\n-        self.assertAllClose(outputs[0], expected[0])\n-        self.assertAllClose(outputs[1], expected[1])\n+\n+        expected_values = np.zeros((5, 2))\n+        expected_indices = np.zeros((5, 2), dtype=np.int32)\n+\n+        for i in range(x.shape[0]):\n+            top_k_indices = np.argsort(x[i])[-2:][::-1]\n+            expected_values[i] = x[i, top_k_indices]\n+            expected_indices[i] = top_k_indices\n+\n+        self.assertAllClose(outputs[0], expected_values)\n+        self.assertAllClose(outputs[1], expected_indices)\n \n     def test_in_top_k(self):\n         targets = np.array([1, 0, 2])\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "keras#2f759107f1e4296694815220dccd6b8e91788172", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 27 | Lines Deleted: 135 | Files Changed: 4 | Hunks: 17 | Methods Changed: 9 | Complexity Δ (Sum/Max): -6/0 | Churn Δ: 162 | Churn Cumulative: 2714 | Contributors (this commit): 18 | Commits (past 90d): 52 | Contributors (cumulative): 24 | DMM Complexity: 0.0\n\nDIFF:\n@@ -60,7 +60,6 @@ class Sequential(Model):\n     ```\n     \"\"\"\n \n-    @tracking.no_automatic_dependency_tracking\n     def __init__(self, layers=None, trainable=True, name=None):\n         super().__init__(trainable=trainable, name=name)\n         self._functional = None\n\n@@ -230,7 +230,7 @@ def while_loop(\n     loop_vars,\n     maximum_iterations=None,\n ):\n-    \"\"\"While loop implementation.\n+    \"\"\"While loop implemetation.\n \n     Args:\n         cond: A callable that represents the termination condition of the loop.\n\n@@ -1,5 +1,6 @@\n import numpy as np\n import pytest\n+import tensorflow as tf\n \n from keras_core import backend\n from keras_core import testing\n@@ -171,23 +172,14 @@ class MathOpsCorrectnessTest(testing.TestCase):\n         data = np.array([1, 2, 3, 4, 5, 6, 7, 8], dtype=np.float32)\n         segment_ids = np.array([0, 0, 1, 1, 1, 2, 2, 2], dtype=np.int32)\n         outputs = kmath.segment_sum(data, segment_ids)\n-\n-        # Segment 0: 1 + 2 = 3\n-        # Segment 1: 3 + 4 + 5 = 12\n-        # Segment 2: 6 + 7 + 8 = 21\n-        expected = np.array([3, 12, 21], dtype=np.float32)\n+        expected = tf.math.segment_sum(data, segment_ids)\n         self.assertAllClose(outputs, expected)\n \n         # Test N-D case.\n         data = np.random.rand(9, 3, 3)\n         segment_ids = np.array([0, 0, 0, 1, 1, 1, 2, 2, 2], dtype=np.int32)\n         outputs = kmath.segment_sum(data, segment_ids)\n-\n-        expected = np.zeros((3, 3, 3))\n-        for i in range(data.shape[0]):\n-            segment_id = segment_ids[i]\n-            expected[segment_id] += data[i]\n-\n+        expected = tf.math.segment_sum(data, segment_ids)\n         self.assertAllClose(outputs, expected)\n \n     def test_segment_sum_explicit_num_segments(self):\n@@ -195,33 +187,27 @@ class MathOpsCorrectnessTest(testing.TestCase):\n         data = np.array([1, 2, 3, 4, 5, 6, 7, 8], dtype=np.float32)\n         segment_ids = np.array([0, 0, 1, 1, 1, 2, 2, 2], dtype=np.int32)\n         outputs = kmath.segment_sum(data, segment_ids, num_segments=4)\n-        expected = np.array([3, 12, 21, 0], dtype=np.float32)\n+        expected = tf.math.unsorted_segment_sum(\n+            data, segment_ids, num_segments=4\n+        )\n         self.assertAllClose(outputs, expected)\n \n         # Test 1D with -1 case.\n         data = np.array([1, 2, 3, 4, 5, 6, 7, 8], dtype=np.float32)\n         segment_ids = np.array([0, 0, 1, 1, -1, 2, 2, -1], dtype=np.int32)\n         outputs = kmath.segment_sum(data, segment_ids, num_segments=4)\n-\n-        # Segment ID 0: First two elements (1 + 2) = 3\n-        # Segment ID 1: Next two elements (3 + 4) = 7\n-        # Segment ID -1: Ignore the next two elements, because segment ID is -1.\n-        # Segment ID 2: Next two elements (6 + 7) = 13\n-        # Segment ID 3: No elements, so output is 0.\n-        expected = np.array([3, 7, 13, 0], dtype=np.float32)\n+        expected = tf.math.unsorted_segment_sum(\n+            data, segment_ids, num_segments=4\n+        )\n         self.assertAllClose(outputs, expected)\n \n         # Test N-D case.\n         data = np.random.rand(9, 3, 3)\n         segment_ids = np.array([0, 0, 0, 1, 1, 1, 2, 2, 2], dtype=np.int32)\n         outputs = kmath.segment_sum(data, segment_ids, num_segments=4)\n-\n-        expected = np.zeros((4, 3, 3))\n-        for i in range(data.shape[0]):\n-            segment_id = segment_ids[i]\n-            if segment_id != -1:\n-                expected[segment_id] += data[i]\n-\n+        expected = tf.math.unsorted_segment_sum(\n+            data, segment_ids, num_segments=4\n+        )\n         self.assertAllClose(outputs, expected)\n \n     @pytest.mark.skipif(\n@@ -233,23 +219,14 @@ class MathOpsCorrectnessTest(testing.TestCase):\n         data = np.array([1, 2, 3, 4, 5, 6, 7, 8], dtype=np.float32)\n         segment_ids = np.array([0, 0, 1, 1, 1, 2, 2, 2], dtype=np.int32)\n         outputs = kmath.segment_max(data, segment_ids)\n-\n-        # Segment ID 0: Max of the first two elements = 2\n-        # Segment ID 1: Max of the next three elements = 5\n-        # Segment ID 2: Max of the next three elements = 8\n-        expected = np.array([2, 5, 8], dtype=np.float32)\n-\n+        expected = tf.math.segment_max(data, segment_ids)\n         self.assertAllClose(outputs, expected)\n \n         # Test N-D case.\n         data = np.random.rand(9, 3, 3)\n         segment_ids = np.array([0, 0, 0, 1, 1, 1, 2, 2, 2], dtype=np.int32)\n         outputs = kmath.segment_max(data, segment_ids)\n-        expected = np.zeros((3, 3, 3))\n-        for i in range(data.shape[0]):\n-            segment_id = segment_ids[i]\n-            expected[segment_id] = np.maximum(expected[segment_id], data[i])\n-\n+        expected = tf.math.segment_max(data, segment_ids)\n         self.assertAllClose(outputs, expected)\n \n     def test_segment_max_explicit_num_segments(self):\n@@ -257,32 +234,27 @@ class MathOpsCorrectnessTest(testing.TestCase):\n         data = np.array([1, 2, 3, 4, 5, 6, 7, 8], dtype=np.float32)\n         segment_ids = np.array([0, 0, 1, 1, 1, 2, 2, 2], dtype=np.int32)\n         outputs = kmath.segment_max(data, segment_ids, num_segments=3)\n-\n-        # Segment ID 0: Max of the first two elements = 2\n-        # Segment ID 1: Max of the next three elements = 5\n-        # Segment ID 2: Max of the next three elements = 8\n-        expected = np.array([2, 5, 8], dtype=np.float32)\n-\n+        expected = tf.math.unsorted_segment_max(\n+            data, segment_ids, num_segments=3\n+        )\n         self.assertAllClose(outputs, expected)\n \n         # Test 1D with -1 case.\n         data = np.array([1, 2, 3, 4, 5, 6, 7, 8], dtype=np.float32)\n         segment_ids = np.array([0, 0, 1, 1, -1, 2, 2, -1], dtype=np.int32)\n         outputs = kmath.segment_max(data, segment_ids, num_segments=3)\n-        expected = np.array([2, 4, 7], dtype=np.float32)\n-\n+        expected = tf.math.unsorted_segment_max(\n+            data, segment_ids, num_segments=3\n+        )\n         self.assertAllClose(outputs, expected)\n \n         # Test N-D case.\n         data = np.random.rand(9, 3, 3)\n         segment_ids = np.array([0, 0, 0, 1, 1, 1, 2, 2, 2], dtype=np.int32)\n         outputs = kmath.segment_max(data, segment_ids, num_segments=3)\n-\n-        expected = np.full((3, 3, 3), -np.inf)\n-        for i in range(data.shape[0]):\n-            segment_id = segment_ids[i]\n-            expected[segment_id] = np.maximum(expected[segment_id], data[i])\n-\n+        expected = tf.math.unsorted_segment_max(\n+            data, segment_ids, num_segments=3\n+        )\n         self.assertAllClose(outputs, expected)\n \n     def test_top_k(self):\n@@ -299,17 +271,9 @@ class MathOpsCorrectnessTest(testing.TestCase):\n \n         x = np.random.rand(5, 5)\n         outputs = kmath.top_k(x, k=2)\n-\n-        expected_values = np.zeros((5, 2))\n-        expected_indices = np.zeros((5, 2), dtype=np.int32)\n-\n-        for i in range(x.shape[0]):\n-            top_k_indices = np.argsort(x[i])[-2:][::-1]\n-            expected_values[i] = x[i, top_k_indices]\n-            expected_indices[i] = top_k_indices\n-\n-        self.assertAllClose(outputs[0], expected_values)\n-        self.assertAllClose(outputs[1], expected_indices)\n+        expected = tf.math.top_k(x, k=2)\n+        self.assertAllClose(outputs[0], expected[0])\n+        self.assertAllClose(outputs[1], expected[1])\n \n     def test_in_top_k(self):\n         targets = np.array([1, 0, 2])\n\n@@ -429,30 +429,6 @@ class Gelu(Operation):\n \n @keras_core_export([\"keras_core.ops.gelu\", \"keras_core.ops.nn.gelu\"])\n def gelu(x, approximate=True):\n-    \"\"\"Gaussian Error Linear Unit (GELU) activation function.\n-\n-    If `approximate` is `True`, it is defined as:\n-    `f(x) = 0.5 * x * (1 + tanh(sqrt(2 / pi) * (x + 0.044715 * x^3)))`\n-\n-    Or if `approximate` is `False`, it is defined as:\n-    `f(x) = x * P(X <= x) = 0.5 * x * (1 + erf(x / sqrt(2)))`,\n-    where `P(X) ~ N(0, 1)`.\n-\n-    Args:\n-        x: Input tensor.\n-        approximate: Approximate version of GELU activation. Defaults to `True`.\n-\n-    Returns:\n-        A tensor with the same shape as `x`.\n-\n-    Example:\n-\n-    >>> x = np.array([-1., 0., 1.])\n-    >>> x_gelu = keras_core.ops.gelu(x)\n-    >>> print(x_gelu)\n-    array([-0.15865525, 0., 0.84134475], shape=(3,), dtype=float64)\n-\n-    \"\"\"\n     if any_symbolic_tensors((x,)):\n         return Gelu(approximate).symbolic_call(x)\n     return backend.nn.gelu(x, approximate)\n@@ -472,32 +448,6 @@ class Softmax(Operation):\n \n @keras_core_export([\"keras_core.ops.softmax\", \"keras_core.ops.nn.softmax\"])\n def softmax(x, axis=-1):\n-    \"\"\"Softmax activation function.\n-\n-    The elements of the output vector lie within the range `(0, 1)`, and their\n-    total sum is exactly 1 (excluding the floating point rounding error).\n-\n-    Each vector is processed independently. The `axis` argument specifies the\n-    axis along which the function is applied within the input.\n-\n-    It is defined as:\n-    `f(x) = exp(x) / sum(exp(x))`\n-\n-    Args:\n-        x: Input tensor.\n-        axis: Integer, axis along which the softmax is applied.\n-\n-    Returns:\n-        A tensor with the same shape as `x`.\n-\n-    Example:\n-\n-    >>> x = np.array([-1., 0., 1.])\n-    >>> x_softmax = keras_core.ops.softmax(x)\n-    >>> print(x_softmax)\n-    array([0.09003057, 0.24472847, 0.66524096], shape=(3,), dtype=float64)\n-\n-    \"\"\"\n     if any_symbolic_tensors((x,)):\n         return Softmax(axis).symbolic_call(x)\n     return backend.nn.softmax(x, axis=axis)\n@@ -522,27 +472,6 @@ class LogSoftmax(Operation):\n     ]\n )\n def log_softmax(x, axis=-1):\n-    \"\"\"Log-softmax activation function.\n-\n-    It is defined as:\n-    `f(x) = x - max(x) - log(sum(exp(x - max(x))))`\n-\n-    Args:\n-        x: Input tensor.\n-        axis: Integer, axis along which the log-softmax is applied.\n-            Defaults to `-1`.\n-\n-    Returns:\n-        A tensor with the same shape as `x`.\n-\n-    Example:\n-\n-    >>> x = np.array([-1., 0., 1.])\n-    >>> x_log_softmax = keras_core.ops.log_softmax(x)\n-    >>> print(x_log_softmax)\n-    array([-2.40760596, -1.40760596, -0.40760596], shape=(3,), dtype=float64)\n-\n-    \"\"\"\n     if any_symbolic_tensors((x,)):\n         return LogSoftmax(axis).symbolic_call(x)\n     return backend.nn.log_softmax(x, axis=axis)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "keras#01350fdbf0d1f64dd10046fd4e3d3020b7101411", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 134 | Lines Deleted: 27 | Files Changed: 3 | Hunks: 16 | Methods Changed: 9 | Complexity Δ (Sum/Max): 6/6 | Churn Δ: 161 | Churn Cumulative: 2351 | Contributors (this commit): 13 | Commits (past 90d): 36 | Contributors (cumulative): 17 | DMM Complexity: 1.0\n\nDIFF:\n@@ -230,7 +230,7 @@ def while_loop(\n     loop_vars,\n     maximum_iterations=None,\n ):\n-    \"\"\"While loop implemetation.\n+    \"\"\"While loop implementation.\n \n     Args:\n         cond: A callable that represents the termination condition of the loop.\n\n@@ -1,6 +1,5 @@\n import numpy as np\n import pytest\n-import tensorflow as tf\n \n from keras_core import backend\n from keras_core import testing\n@@ -172,14 +171,23 @@ class MathOpsCorrectnessTest(testing.TestCase):\n         data = np.array([1, 2, 3, 4, 5, 6, 7, 8], dtype=np.float32)\n         segment_ids = np.array([0, 0, 1, 1, 1, 2, 2, 2], dtype=np.int32)\n         outputs = kmath.segment_sum(data, segment_ids)\n-        expected = tf.math.segment_sum(data, segment_ids)\n+\n+        # Segment 0: 1 + 2 = 3\n+        # Segment 1: 3 + 4 + 5 = 12\n+        # Segment 2: 6 + 7 + 8 = 21\n+        expected = np.array([3, 12, 21], dtype=np.float32)\n         self.assertAllClose(outputs, expected)\n \n         # Test N-D case.\n         data = np.random.rand(9, 3, 3)\n         segment_ids = np.array([0, 0, 0, 1, 1, 1, 2, 2, 2], dtype=np.int32)\n         outputs = kmath.segment_sum(data, segment_ids)\n-        expected = tf.math.segment_sum(data, segment_ids)\n+\n+        expected = np.zeros((3, 3, 3))\n+        for i in range(data.shape[0]):\n+            segment_id = segment_ids[i]\n+            expected[segment_id] += data[i]\n+\n         self.assertAllClose(outputs, expected)\n \n     def test_segment_sum_explicit_num_segments(self):\n@@ -187,27 +195,33 @@ class MathOpsCorrectnessTest(testing.TestCase):\n         data = np.array([1, 2, 3, 4, 5, 6, 7, 8], dtype=np.float32)\n         segment_ids = np.array([0, 0, 1, 1, 1, 2, 2, 2], dtype=np.int32)\n         outputs = kmath.segment_sum(data, segment_ids, num_segments=4)\n-        expected = tf.math.unsorted_segment_sum(\n-            data, segment_ids, num_segments=4\n-        )\n+        expected = np.array([3, 12, 21, 0], dtype=np.float32)\n         self.assertAllClose(outputs, expected)\n \n         # Test 1D with -1 case.\n         data = np.array([1, 2, 3, 4, 5, 6, 7, 8], dtype=np.float32)\n         segment_ids = np.array([0, 0, 1, 1, -1, 2, 2, -1], dtype=np.int32)\n         outputs = kmath.segment_sum(data, segment_ids, num_segments=4)\n-        expected = tf.math.unsorted_segment_sum(\n-            data, segment_ids, num_segments=4\n-        )\n+\n+        # Segment ID 0: First two elements (1 + 2) = 3\n+        # Segment ID 1: Next two elements (3 + 4) = 7\n+        # Segment ID -1: Ignore the next two elements, because segment ID is -1.\n+        # Segment ID 2: Next two elements (6 + 7) = 13\n+        # Segment ID 3: No elements, so output is 0.\n+        expected = np.array([3, 7, 13, 0], dtype=np.float32)\n         self.assertAllClose(outputs, expected)\n \n         # Test N-D case.\n         data = np.random.rand(9, 3, 3)\n         segment_ids = np.array([0, 0, 0, 1, 1, 1, 2, 2, 2], dtype=np.int32)\n         outputs = kmath.segment_sum(data, segment_ids, num_segments=4)\n-        expected = tf.math.unsorted_segment_sum(\n-            data, segment_ids, num_segments=4\n-        )\n+\n+        expected = np.zeros((4, 3, 3))\n+        for i in range(data.shape[0]):\n+            segment_id = segment_ids[i]\n+            if segment_id != -1:\n+                expected[segment_id] += data[i]\n+\n         self.assertAllClose(outputs, expected)\n \n     @pytest.mark.skipif(\n@@ -219,14 +233,23 @@ class MathOpsCorrectnessTest(testing.TestCase):\n         data = np.array([1, 2, 3, 4, 5, 6, 7, 8], dtype=np.float32)\n         segment_ids = np.array([0, 0, 1, 1, 1, 2, 2, 2], dtype=np.int32)\n         outputs = kmath.segment_max(data, segment_ids)\n-        expected = tf.math.segment_max(data, segment_ids)\n+\n+        # Segment ID 0: Max of the first two elements = 2\n+        # Segment ID 1: Max of the next three elements = 5\n+        # Segment ID 2: Max of the next three elements = 8\n+        expected = np.array([2, 5, 8], dtype=np.float32)\n+\n         self.assertAllClose(outputs, expected)\n \n         # Test N-D case.\n         data = np.random.rand(9, 3, 3)\n         segment_ids = np.array([0, 0, 0, 1, 1, 1, 2, 2, 2], dtype=np.int32)\n         outputs = kmath.segment_max(data, segment_ids)\n-        expected = tf.math.segment_max(data, segment_ids)\n+        expected = np.zeros((3, 3, 3))\n+        for i in range(data.shape[0]):\n+            segment_id = segment_ids[i]\n+            expected[segment_id] = np.maximum(expected[segment_id], data[i])\n+\n         self.assertAllClose(outputs, expected)\n \n     def test_segment_max_explicit_num_segments(self):\n@@ -234,27 +257,32 @@ class MathOpsCorrectnessTest(testing.TestCase):\n         data = np.array([1, 2, 3, 4, 5, 6, 7, 8], dtype=np.float32)\n         segment_ids = np.array([0, 0, 1, 1, 1, 2, 2, 2], dtype=np.int32)\n         outputs = kmath.segment_max(data, segment_ids, num_segments=3)\n-        expected = tf.math.unsorted_segment_max(\n-            data, segment_ids, num_segments=3\n-        )\n+\n+        # Segment ID 0: Max of the first two elements = 2\n+        # Segment ID 1: Max of the next three elements = 5\n+        # Segment ID 2: Max of the next three elements = 8\n+        expected = np.array([2, 5, 8], dtype=np.float32)\n+\n         self.assertAllClose(outputs, expected)\n \n         # Test 1D with -1 case.\n         data = np.array([1, 2, 3, 4, 5, 6, 7, 8], dtype=np.float32)\n         segment_ids = np.array([0, 0, 1, 1, -1, 2, 2, -1], dtype=np.int32)\n         outputs = kmath.segment_max(data, segment_ids, num_segments=3)\n-        expected = tf.math.unsorted_segment_max(\n-            data, segment_ids, num_segments=3\n-        )\n+        expected = np.array([2, 4, 7], dtype=np.float32)\n+\n         self.assertAllClose(outputs, expected)\n \n         # Test N-D case.\n         data = np.random.rand(9, 3, 3)\n         segment_ids = np.array([0, 0, 0, 1, 1, 1, 2, 2, 2], dtype=np.int32)\n         outputs = kmath.segment_max(data, segment_ids, num_segments=3)\n-        expected = tf.math.unsorted_segment_max(\n-            data, segment_ids, num_segments=3\n-        )\n+\n+        expected = np.full((3, 3, 3), -np.inf)\n+        for i in range(data.shape[0]):\n+            segment_id = segment_ids[i]\n+            expected[segment_id] = np.maximum(expected[segment_id], data[i])\n+\n         self.assertAllClose(outputs, expected)\n \n     def test_top_k(self):\n@@ -271,9 +299,17 @@ class MathOpsCorrectnessTest(testing.TestCase):\n \n         x = np.random.rand(5, 5)\n         outputs = kmath.top_k(x, k=2)\n-        expected = tf.math.top_k(x, k=2)\n-        self.assertAllClose(outputs[0], expected[0])\n-        self.assertAllClose(outputs[1], expected[1])\n+\n+        expected_values = np.zeros((5, 2))\n+        expected_indices = np.zeros((5, 2), dtype=np.int32)\n+\n+        for i in range(x.shape[0]):\n+            top_k_indices = np.argsort(x[i])[-2:][::-1]\n+            expected_values[i] = x[i, top_k_indices]\n+            expected_indices[i] = top_k_indices\n+\n+        self.assertAllClose(outputs[0], expected_values)\n+        self.assertAllClose(outputs[1], expected_indices)\n \n     def test_in_top_k(self):\n         targets = np.array([1, 0, 2])\n\n@@ -429,6 +429,30 @@ class Gelu(Operation):\n \n @keras_core_export([\"keras_core.ops.gelu\", \"keras_core.ops.nn.gelu\"])\n def gelu(x, approximate=True):\n+    \"\"\"Gaussian Error Linear Unit (GELU) activation function.\n+\n+    If `approximate` is `True`, it is defined as:\n+    `f(x) = 0.5 * x * (1 + tanh(sqrt(2 / pi) * (x + 0.044715 * x^3)))`\n+\n+    Or if `approximate` is `False`, it is defined as:\n+    `f(x) = x * P(X <= x) = 0.5 * x * (1 + erf(x / sqrt(2)))`,\n+    where `P(X) ~ N(0, 1)`.\n+\n+    Args:\n+        x: Input tensor.\n+        approximate: Approximate version of GELU activation. Defaults to `True`.\n+\n+    Returns:\n+        A tensor with the same shape as `x`.\n+\n+    Example:\n+\n+    >>> x = np.array([-1., 0., 1.])\n+    >>> x_gelu = keras_core.ops.gelu(x)\n+    >>> print(x_gelu)\n+    array([-0.15865525, 0., 0.84134475], shape=(3,), dtype=float64)\n+\n+    \"\"\"\n     if any_symbolic_tensors((x,)):\n         return Gelu(approximate).symbolic_call(x)\n     return backend.nn.gelu(x, approximate)\n@@ -448,6 +472,32 @@ class Softmax(Operation):\n \n @keras_core_export([\"keras_core.ops.softmax\", \"keras_core.ops.nn.softmax\"])\n def softmax(x, axis=-1):\n+    \"\"\"Softmax activation function.\n+\n+    The elements of the output vector lie within the range `(0, 1)`, and their\n+    total sum is exactly 1 (excluding the floating point rounding error).\n+\n+    Each vector is processed independently. The `axis` argument specifies the\n+    axis along which the function is applied within the input.\n+\n+    It is defined as:\n+    `f(x) = exp(x) / sum(exp(x))`\n+\n+    Args:\n+        x: Input tensor.\n+        axis: Integer, axis along which the softmax is applied.\n+\n+    Returns:\n+        A tensor with the same shape as `x`.\n+\n+    Example:\n+\n+    >>> x = np.array([-1., 0., 1.])\n+    >>> x_softmax = keras_core.ops.softmax(x)\n+    >>> print(x_softmax)\n+    array([0.09003057, 0.24472847, 0.66524096], shape=(3,), dtype=float64)\n+\n+    \"\"\"\n     if any_symbolic_tensors((x,)):\n         return Softmax(axis).symbolic_call(x)\n     return backend.nn.softmax(x, axis=axis)\n@@ -472,6 +522,27 @@ class LogSoftmax(Operation):\n     ]\n )\n def log_softmax(x, axis=-1):\n+    \"\"\"Log-softmax activation function.\n+\n+    It is defined as:\n+    `f(x) = x - max(x) - log(sum(exp(x - max(x))))`\n+\n+    Args:\n+        x: Input tensor.\n+        axis: Integer, axis along which the log-softmax is applied.\n+            Defaults to `-1`.\n+\n+    Returns:\n+        A tensor with the same shape as `x`.\n+\n+    Example:\n+\n+    >>> x = np.array([-1., 0., 1.])\n+    >>> x_log_softmax = keras_core.ops.log_softmax(x)\n+    >>> print(x_log_softmax)\n+    array([-2.40760596, -1.40760596, -0.40760596], shape=(3,), dtype=float64)\n+\n+    \"\"\"\n     if any_symbolic_tensors((x,)):\n         return LogSoftmax(axis).symbolic_call(x)\n     return backend.nn.log_softmax(x, axis=axis)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "keras#7635d96ce2a969c8d090412bc2801deb39b7e205", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 23 | Lines Deleted: 4 | Files Changed: 2 | Hunks: 19 | Methods Changed: 7 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 27 | Churn Cumulative: 491 | Contributors (this commit): 7 | Commits (past 90d): 12 | Contributors (cumulative): 9 | DMM Complexity: None\n\nDIFF:\n@@ -26,8 +26,10 @@ def floatx():\n         String, the current default float type.\n \n     Example:\n+\n     >>> keras_core.config.floatx()\n     'float32'\n+\n     \"\"\"\n     return _FLOATX\n \n@@ -47,12 +49,15 @@ def set_floatx(value):\n     Args:\n         value: String; `'float16'`, `'float32'`, or `'float64'`.\n \n-    Example:\n+    Examples:\n     >>> keras_core.config.floatx()\n     'float32'\n+\n     >>> keras_core.config.set_floatx('float64')\n     >>> keras_core.config.floatx()\n     'float64'\n+\n+    >>> # Set it back to float32\n     >>> keras_core.config.set_floatx('float32')\n \n     Raises:\n@@ -76,8 +81,10 @@ def epsilon():\n         A float.\n \n     Example:\n+\n     >>> keras_core.config.epsilon()\n     1e-07\n+\n     \"\"\"\n     return _EPSILON\n \n@@ -91,13 +98,17 @@ def set_epsilon(value):\n     Args:\n         value: float. New value of epsilon.\n \n-    Example:\n+    Examples:\n     >>> keras_core.config.epsilon()\n     1e-07\n+\n     >>> keras_core.config.set_epsilon(1e-5)\n     >>> keras_core.config.epsilon()\n     1e-05\n+\n+    >>> # Set it back to the default value.\n     >>> keras_core.config.set_epsilon(1e-7)\n+\n     \"\"\"\n     global _EPSILON\n     _EPSILON = value\n@@ -116,8 +127,10 @@ def image_data_format():\n         A string, either `'channels_first'` or `'channels_last'`.\n \n     Example:\n+\n     >>> keras_core.config.image_data_format()\n     'channels_last'\n+\n     \"\"\"\n     return _IMAGE_DATA_FORMAT\n \n@@ -134,13 +147,18 @@ def set_image_data_format(data_format):\n     Args:\n         data_format: string. `'channels_first'` or `'channels_last'`.\n \n-    Example:\n+    Examples:\n+\n     >>> keras_core.config.image_data_format()\n     'channels_last'\n+\n     >>> keras_core.config.set_image_data_format('channels_first')\n     >>> keras_core.config.image_data_format()\n     'channels_first'\n+\n+    >>> # Set it back to `'channels_last'`\n     >>> keras_core.config.set_image_data_format('channels_last')\n+\n     \"\"\"\n     global _IMAGE_DATA_FORMAT\n     data_format = str(data_format).lower()\n@@ -252,5 +270,6 @@ def backend():\n \n     >>> keras.config.backend()\n     'tensorflow'\n+\n     \"\"\"\n     return _BACKEND\n\n@@ -12,7 +12,7 @@ elif backend.backend() == \"numpy\":\n \n     BackendVariable = NumpyVariable\n else:\n-    raise RuntimeError(\"Invalid backend.\")\n+    raise RuntimeError(f\"Invalid backend: {backend.backend()}\")\n \n \n @keras_core_export(\"keras_core.backend.Variable\")\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "keras#2d8e54d1911ddae5a24c576c918eb0a198667a27", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 579 | Contributors (this commit): 5 | Commits (past 90d): 8 | Contributors (cumulative): 5 | DMM Complexity: None\n\nDIFF:\n@@ -106,7 +106,7 @@ def segment_max(data, segment_ids, num_segments=None, sorted=False):\n     array([9 12], shape=(2,), dtype=int32)\n     \"\"\"\n     if any_symbolic_tensors((data,)):\n-        return SegmentSum(num_segments, sorted).symbolic_call(data, segment_ids)\n+        return SegmentMax(num_segments, sorted).symbolic_call(data, segment_ids)\n     return backend.math.segment_max(\n         data, segment_ids, num_segments=num_segments, sorted=sorted\n     )\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "keras#b5e43d895b70a6f139fd630580a024d9ff405cba", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 0 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 1 | Churn Cumulative: 525 | Contributors (this commit): 7 | Commits (past 90d): 20 | Contributors (cumulative): 7 | DMM Complexity: None\n\nDIFF:\n@@ -10,7 +10,6 @@ from keras_core.legacy.saving import serialization as legacy_serialization\n from keras_core.models.functional import Functional\n from keras_core.models.model import Model\n from keras_core.saving import serialization_lib\n-from keras_core.utils import tracking\n \n \n @keras_core_export([\"keras_core.Sequential\", \"keras_core.models.Sequential\"])\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "keras#2a3b893dd5a425dc461e6b2ceedb38a90b538dd4", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 24 | Lines Deleted: 2 | Files Changed: 2 | Hunks: 5 | Methods Changed: 2 | Complexity Δ (Sum/Max): 3/2 | Churn Δ: 26 | Churn Cumulative: 3728 | Contributors (this commit): 5 | Commits (past 90d): 9 | Contributors (cumulative): 8 | DMM Complexity: 0.55\n\nDIFF:\n@@ -1109,6 +1109,19 @@ class RecallAtPrecisionTest(testing.TestCase, parameterized.TestCase):\n         ):\n             metrics.RecallAtPrecision(0.4, num_thresholds=-1)\n \n+    def test_end_to_end(self):\n+        # Test for https://github.com/keras-team/keras-core/issues/718\n+        model = models.Sequential(\n+            [\n+                layers.Input((1,)),\n+                layers.Dense(1),\n+            ]\n+        )\n+        model.compile(\n+            optimizer=\"rmsprop\", loss=\"mse\", metrics=[metrics.Precision()]\n+        )\n+        model.fit(np.ones((5, 1)), np.ones((5, 1)))\n+\n \n class AUCTest(testing.TestCase):\n     def setUp(self):\n\n@@ -438,11 +438,11 @@ def update_confusion_matrix_variables(\n \n     if multi_label:\n         one_thresh = ops.equal(\n-            ops.cast(1, dtype=\"int32\"),\n+            np.array(1, dtype=\"int32\"),\n             len(thresholds.shape),\n         )\n     else:\n-        one_thresh = ops.cast(True, dtype=\"bool\")\n+        one_thresh = np.array(True, dtype=\"bool\")\n \n     invalid_keys = [\n         key for key in variables_to_update if key not in list(ConfusionMatrix)\n@@ -479,6 +479,7 @@ def update_confusion_matrix_variables(\n             thresholds_with_epsilon=thresholds_with_epsilon,\n         )\n \n+    if None in y_pred.shape:\n         pred_shape = ops.shape(y_pred)\n         num_predictions = pred_shape[0]\n         if len(y_pred.shape) == 1:\n@@ -488,6 +489,14 @@ def update_confusion_matrix_variables(\n                 ops.prod(ops.array(pred_shape[1:]), axis=0), \"int32\"\n             )\n         thresh_label_tile = ops.where(one_thresh, num_labels, 1)\n+    else:\n+        pred_shape = y_pred.shape\n+        num_predictions = pred_shape[0]\n+        if len(y_pred.shape) == 1:\n+            num_labels = 1\n+        else:\n+            num_labels = np.prod(pred_shape[1:], axis=0).astype(\"int32\")\n+        thresh_label_tile = np.where(one_thresh, num_labels, 1)\n \n     # Reshape predictions and labels, adding a dim for thresholding.\n     if multi_label:\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "keras#3c8acd3f6639465f0ad577936a6f69ee4df1bd47", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 27 | Lines Deleted: 5 | Files Changed: 5 | Hunks: 8 | Methods Changed: 3 | Complexity Δ (Sum/Max): -10/5 | Churn Δ: 32 | Churn Cumulative: 827 | Contributors (this commit): 5 | Commits (past 90d): 24 | Contributors (cumulative): 11 | DMM Complexity: 0.1111111111111111\n\nDIFF:\n@@ -1,11 +1,10 @@\n import tensorflow as tf\n \n-from keras_core.backend.tensorflow import tf_utils\n+from keras_core.utils import tf_utils\n \n \n class TFLayer(tf.__internal__.tracking.AutoTrackable):\n     def __init__(self, *args, **kwargs):\n-        super().__init__(*args, **kwargs)\n         # Export-related attributes\n         self._saved_model_inputs_spec = None\n         self._saved_model_arg_spec = None\n\n@@ -2,9 +2,9 @@ import numpy as np\n \n from keras_core import backend\n from keras_core.api_export import keras_core_export\n-from keras_core.backend.tensorflow import tf_utils\n from keras_core.layers.layer import Layer\n from keras_core.utils import backend_utils\n+from keras_core.utils import tf_utils\n from keras_core.utils.module_utils import tensorflow as tf\n \n \n\n@@ -1,3 +1,4 @@\n+from keras_core import backend\n from keras_core.mixed_precision.dtype_policy import DTypePolicy\n from keras_core.mixed_precision.dtype_policy import dtype_policy\n from keras_core.mixed_precision.dtype_policy import set_dtype_policy\n@@ -9,10 +10,13 @@ def resolve_policy(identifier):\n         return dtype_policy()\n     if isinstance(identifier, DTypePolicy):\n         return identifier\n-    if isinstance(identifier, str):\n-        return DTypePolicy(identifier)\n     if isinstance(identifier, dict):\n         return serialization_lib.deserialize_keras_object(identifier)\n+    if isinstance(identifier, str):\n+        return DTypePolicy(identifier)\n+    try:\n+        return DTypePolicy(backend.standardize_dtype(identifier))\n+    except:\n         raise ValueError(\n             \"Cannot interpret `dtype` argument. Expected a string \"\n             f\"or an instance of DTypePolicy. Received: dtype={identifier}\"\n\n@@ -68,3 +68,22 @@ def standardize_padding(value, allow_causal=False):\n             f\"Received: {padding}\"\n         )\n     return padding\n+\n+\n+def validate_string_arg(\n+    value,\n+    allowable_strings,\n+    caller_name,\n+    arg_name,\n+    allow_none=False,\n+):\n+    \"\"\"Validates the correctness of a string-based arg.\"\"\"\n+    if allow_none and value is None:\n+        return\n+    elif isinstance(value, str) and value in allowable_strings:\n+        return\n+    raise ValueError(\n+        f\"Unkown value for `{arg_name}` argument of {caller_name}. \"\n+        f\"Allowed values are: {allowable_strings}. Received: \"\n+        f\"{arg_name}={value}\"\n+    )\n\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
