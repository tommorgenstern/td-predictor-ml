{"custom_id": "requests#c64c0ab1215168adf2384888f3d52bd99217d723", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 6 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): 2/2 | Churn Δ: 6 | Churn Cumulative: 649 | Contributors (this commit): 14 | Commits (past 90d): 5 | Contributors (cumulative): 14 | DMM Complexity: 0.0\n\nDIFF:\n@@ -13,6 +13,7 @@ import socket\n from .models import Response\n from .packages.urllib3.poolmanager import PoolManager, proxy_from_url\n from .packages.urllib3.response import HTTPResponse\n+from .packages.urllib3.util import Timeout\n from .compat import urlparse, basestring, urldefrag, unquote\n from .utils import (DEFAULT_CA_BUNDLE_PATH, get_encoding_from_headers,\n                     except_on_missing_scheme, get_auth_from_url)\n@@ -298,6 +299,11 @@ class HTTPAdapter(BaseAdapter):\n \n         chunked = not (request.body is None or 'Content-Length' in request.headers)\n \n+        if stream:\n+            timeout = Timeout(connect=timeout)\n+        else:\n+            timeout = Timeout(connect=timeout, read=timeout)\n+\n         try:\n             if not chunked:\n                 resp = conn.urlopen(\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#94da24e387776266e4f1ef3fdb2217fdf71d056d", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 507 | Contributors (this commit): 7 | Commits (past 90d): 2 | Contributors (cumulative): 7 | DMM Complexity: None\n\nDIFF:\n@@ -42,8 +42,8 @@ is at <http://python-requests.org>.\n \"\"\"\n \n __title__ = 'requests'\n-__version__ = '1.2.3'\n-__build__ = 0x010203\n+__version__ = '2.0.0'\n+__build__ = 0x020000\n __author__ = 'Kenneth Reitz'\n __license__ = 'Apache 2.0'\n __copyright__ = 'Copyright 2013 Kenneth Reitz'\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#c93419f5125b2e836507eb243531985383faa8b6", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 3 | Lines Deleted: 3 | Files Changed: 1 | Hunks: 3 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 6 | Churn Cumulative: 655 | Contributors (this commit): 14 | Commits (past 90d): 6 | Contributors (cumulative): 14 | DMM Complexity: None\n\nDIFF:\n@@ -13,7 +13,7 @@ import socket\n from .models import Response\n from .packages.urllib3.poolmanager import PoolManager, proxy_from_url\n from .packages.urllib3.response import HTTPResponse\n-from .packages.urllib3.util import Timeout\n+from .packages.urllib3.util import Timeout as TimeoutSauce\n from .compat import urlparse, basestring, urldefrag, unquote\n from .utils import (DEFAULT_CA_BUNDLE_PATH, get_encoding_from_headers,\n                     except_on_missing_scheme, get_auth_from_url)\n@@ -300,9 +300,9 @@ class HTTPAdapter(BaseAdapter):\n         chunked = not (request.body is None or 'Content-Length' in request.headers)\n \n         if stream:\n-            timeout = Timeout(connect=timeout)\n+            timeout = TimeoutSauce(connect=timeout)\n         else:\n-            timeout = Timeout(connect=timeout, read=timeout)\n+            timeout = TimeoutSauce(connect=timeout, read=timeout)\n \n         try:\n             if not chunked:\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#3501ea463432400c77479dddedab3b7af967b618", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 13 | Lines Deleted: 8 | Files Changed: 1 | Hunks: 5 | Methods Changed: 1 | Complexity Δ (Sum/Max): 2/2 | Churn Δ: 21 | Churn Cumulative: 1143 | Contributors (this commit): 26 | Commits (past 90d): 5 | Contributors (cumulative): 26 | DMM Complexity: 0.0\n\nDIFF:\n@@ -77,7 +77,7 @@ class HTTPDigestAuth(AuthBase):\n         else:\n             _algorithm = algorithm.upper()\n         # lambdas assume digest modules are imported at the top level\n-        if _algorithm == 'MD5':\n+        if _algorithm == 'MD5' or _algorithm == 'MD5-SESS':\n             def md5_utf8(x):\n                 if isinstance(x, str):\n                     x = x.encode('utf-8')\n@@ -89,7 +89,7 @@ class HTTPDigestAuth(AuthBase):\n                     x = x.encode('utf-8')\n                 return hashlib.sha1(x).hexdigest()\n             hash_utf8 = sha_utf8\n-        # XXX MD5-sess\n+\n         KD = lambda s, d: hash_utf8(\"%s:%s\" % (s, d))\n \n         if hash_utf8 is None:\n@@ -105,14 +105,13 @@ class HTTPDigestAuth(AuthBase):\n         A1 = '%s:%s:%s' % (self.username, realm, self.password)\n         A2 = '%s:%s' % (method, path)\n         \n-        if qop is None:\n-            respdig = KD(hash_utf8(A1), \"%s:%s\" % (nonce, hash_utf8(A2)))\n-        elif qop == 'auth' or 'auth' in qop.split(','):\n+        HA1 = hash_utf8(A1)\n+        HA2 = hash_utf8(A2)\n+\n         if nonce == self.last_nonce:\n             self.nonce_count += 1\n         else:\n             self.nonce_count = 1\n-\n         ncvalue = '%08x' % self.nonce_count\n         s = str(self.nonce_count).encode('utf-8')\n         s += nonce.encode('utf-8')\n@@ -120,8 +119,14 @@ class HTTPDigestAuth(AuthBase):\n         s += os.urandom(8)\n \n         cnonce = (hashlib.sha1(s).hexdigest()[:16])\n-            noncebit = \"%s:%s:%s:%s:%s\" % (nonce, ncvalue, cnonce, qop, hash_utf8(A2))\n-            respdig = KD(hash_utf8(A1), noncebit)\n+        noncebit = \"%s:%s:%s:%s:%s\" % (nonce, ncvalue, cnonce, qop, HA2)\n+        if _algorithm == 'MD5-SESS':\n+            HA1 = hash_utf8('%s:%s:%s' % (HA1, nonce, cnonce))\n+\n+        if qop is None:\n+            respdig = KD(HA1, \"%s:%s\" % (nonce, HA2))\n+        elif qop == 'auth' or 'auth' in qop.split(','):\n+            respdig = KD(HA1, noncebit)\n         else:\n             # XXX handle auth-int.\n             return None\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#1d1831ba40fe53a37e5ab87e9913dd1c52349066", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 8897 | Contributors (this commit): 118 | Commits (past 90d): 18 | Contributors (cumulative): 118 | DMM Complexity: None\n\nDIFF:\n@@ -295,7 +295,7 @@ class PreparedRequest(RequestEncodingMixin, RequestHooksMixin):\n         p = PreparedRequest()\n         p.method = self.method\n         p.url = self.url\n-        p.headers = self.headers\n+        p.headers = self.headers.copy()\n         p.body = self.body\n         p.hooks = self.hooks\n         return p\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#39fe0068aa657764778782ce4ca11d5e3ee08c66", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 13 | Lines Deleted: 0 | Files Changed: 2 | Hunks: 2 | Methods Changed: 2 | Complexity Δ (Sum/Max): 9/6 | Churn Δ: 13 | Churn Cumulative: 6042 | Contributors (this commit): 90 | Commits (past 90d): 31 | Contributors (cumulative): 110 | DMM Complexity: 0.5\n\nDIFF:\n@@ -146,6 +146,13 @@ class SessionRedirectMixin(object):\n \n             extract_cookies_to_jar(self.cookies, prepared_request, resp.raw)\n \n+            # Restore original cookies in redirects response.\n+            headers = resp.request.headers\n+            try:\n+                headers['Cookie'] = req.headers['Cookie']\n+            except KeyError:\n+                pass\n+\n             i += 1\n             yield resp\n \n\n@@ -164,6 +164,12 @@ class RequestsTestCase(unittest.TestCase):\n         s.get(httpbin('cookies/set?foo=\"bar:baz\"'))\n         self.assertTrue(s.cookies['foo'] == '\"bar:baz\"')\n \n+    def test_cookie_persists_via_api(self):\n+        s = requests.session()\n+        r = s.get(httpbin('redirect/1'), cookies={'foo':'bar'})\n+        self.assertTrue('foo' in r.request.headers['Cookie'])\n+        self.assertTrue('foo' in r.history[0].request.headers['Cookie'])\n+\n     def test_request_cookie_overrides_session_cookie(self):\n         s = requests.session()\n         s.cookies['foo'] = 'bar'\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#d22eaf96e2a1c64bc29579a072f67d2a9c758ef8", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 20 | Lines Deleted: 8 | Files Changed: 2 | Hunks: 4 | Methods Changed: 3 | Complexity Δ (Sum/Max): 5/6 | Churn Δ: 28 | Churn Cumulative: 3124 | Contributors (this commit): 56 | Commits (past 90d): 16 | Contributors (cumulative): 64 | DMM Complexity: 0.0\n\nDIFF:\n@@ -404,3 +404,19 @@ def cookiejar_from_dict(cookie_dict, cookiejar=None):\n         for name in cookie_dict:\n             cookiejar.set_cookie(create_cookie(name, cookie_dict[name]))\n     return cookiejar\n+\n+\n+def merge_session_cookies(cookiejar, cookie_dict):\n+    \"\"\"Merges cookie_dict with session CookieJar.\n+\n+    :param cookiejar: Should be session cookie.\n+    :param cookie_dict: Dict of key/values to be merged.\n+    \"\"\"\n+    if cookiejar is None:\n+        cookiejar = RequestsCookieJar()\n+\n+    if cookie_dict is not None:\n+        for k in cookie_dict:\n+            # Session should not be modified by request cookie.\n+            if k not in [cookie.name for cookie in cookiejar]:\n+                cookiejar.set_cookie(create_cookie(k, cookie_dict[k]))\n\n@@ -13,7 +13,7 @@ from collections import Mapping\n from datetime import datetime\n \n from .compat import cookielib, OrderedDict, urljoin, urlparse\n-from .cookies import cookiejar_from_dict, extract_cookies_to_jar, RequestsCookieJar\n+from .cookies import cookiejar_from_dict, extract_cookies_to_jar, RequestsCookieJar, merge_session_cookies\n from .models import Request, PreparedRequest\n from .hooks import default_hooks, dispatch_hook\n from .utils import to_key_val_list, default_headers\n@@ -146,13 +146,6 @@ class SessionRedirectMixin(object):\n \n             extract_cookies_to_jar(self.cookies, prepared_request, resp.raw)\n \n-            # Restore original cookies in redirects response.\n-            headers = resp.request.headers\n-            try:\n-                headers['Cookie'] = req.headers['Cookie']\n-            except KeyError:\n-                pass\n-\n             i += 1\n             yield resp\n \n@@ -329,6 +322,9 @@ class Session(SessionRedirectMixin):\n         )\n         prep = self.prepare_request(req)\n \n+        # Add param cookies to session cookies\n+        merge_session_cookies(self.cookies, cookies)\n+\n         proxies = proxies or {}\n \n         # Gather clues from the surrounding environment.\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#8b7fcfb49a38cd6ee1cbb4a52e0a4af57969abb3", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 5 | Lines Deleted: 4 | Files Changed: 1 | Hunks: 3 | Methods Changed: 1 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 9 | Churn Cumulative: 664 | Contributors (this commit): 14 | Commits (past 90d): 7 | Contributors (cumulative): 14 | DMM Complexity: 1.0\n\nDIFF:\n@@ -220,8 +220,8 @@ class HTTPAdapter(BaseAdapter):\n     def request_url(self, request, proxies):\n         \"\"\"Obtain the url to use when making the final request.\n \n-        If the message is being sent through a proxy, the full URL has to be\n-        used. Otherwise, we should only use the path portion of the URL.\n+        If the message is being sent through a HTTP proxy, the full URL has to\n+        be used. Otherwise, we should only use the path portion of the URL.\n \n         This should not be called from user code, and is only exposed for use\n         when subclassing the\n@@ -231,9 +231,10 @@ class HTTPAdapter(BaseAdapter):\n         :param proxies: A dictionary of schemes to proxy URLs.\n         \"\"\"\n         proxies = proxies or {}\n-        proxy = proxies.get(urlparse(request.url).scheme)\n+        scheme = urlparse(request.url).scheme.lower()\n+        proxy = proxies.get(scheme)\n \n-        if proxy:\n+        if proxy and scheme != 'https':\n             url, _ = urldefrag(request.url)\n         else:\n             url = request.path_url\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#0051837af4fb8b21aac101cbb91f2f81a1853013", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 5 | Lines Deleted: 4 | Files Changed: 1 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): -1/0 | Churn Δ: 9 | Churn Cumulative: 2517 | Contributors (this commit): 49 | Commits (past 90d): 12 | Contributors (cumulative): 49 | DMM Complexity: 0.0\n\nDIFF:\n@@ -12,7 +12,7 @@ import os\n from collections import Mapping\n from datetime import datetime\n \n-from .compat import cookielib, OrderedDict, urljoin, urlparse\n+from .compat import cookielib, OrderedDict, urljoin, urlparse, urlunparse\n from .cookies import cookiejar_from_dict, extract_cookies_to_jar, RequestsCookieJar\n from .models import Request, PreparedRequest\n from .hooks import default_hooks, dispatch_hook\n@@ -93,9 +93,10 @@ class SessionRedirectMixin(object):\n                 url = '%s:%s' % (parsed_rurl.scheme, url)\n \n             # The scheme should be lower case...\n-            if '://' in url:\n-                scheme, uri = url.split('://', 1)\n-                url = '%s://%s' % (scheme.lower(), uri)\n+            parsed = urlparse(url)\n+            parsed = (parsed.scheme.lower(), parsed.netloc, parsed.path,\n+                      parsed.params, parsed.query, parsed.fragment)\n+            url = urlunparse(parsed)\n \n             # Facilitate non-RFC2616-compliant 'location' headers\n             # (e.g. '/path/to/resource' instead of 'http://domain.tld/path/to/resource')\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#012f0334ce43fe23044fc58e4246a804db88650d", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 9 | Lines Deleted: 19 | Files Changed: 2 | Hunks: 8 | Methods Changed: 4 | Complexity Δ (Sum/Max): -2/1 | Churn Δ: 28 | Churn Cumulative: 3161 | Contributors (this commit): 56 | Commits (past 90d): 19 | Contributors (cumulative): 64 | DMM Complexity: 0.0\n\nDIFF:\n@@ -392,31 +392,21 @@ def morsel_to_cookie(morsel):\n     return c\n \n \n-def cookiejar_from_dict(cookie_dict, cookiejar=None):\n+def cookiejar_from_dict(cookie_dict, cookiejar=None, overwrite=True):\n     \"\"\"Returns a CookieJar from a key/value dictionary.\n \n     :param cookie_dict: Dict of key/values to insert into CookieJar.\n+    :param cookiejar: (optional) A cookiejar to add the cookies to.\n+    :param overwrite: (optional) If False, will not replace cookies\n+        already in the jar with new ones.\n     \"\"\"\n     if cookiejar is None:\n         cookiejar = RequestsCookieJar()\n \n     if cookie_dict is not None:\n+        names_from_jar = [cookie.name for cookie in cookiejar]\n         for name in cookie_dict:\n+            if overwrite or (name not in names_from_jar):\n                 cookiejar.set_cookie(create_cookie(name, cookie_dict[name]))\n+\n     return cookiejar\n-\n-\n-def merge_session_cookies(cookiejar, cookie_dict):\n-    \"\"\"Merges cookie_dict with session CookieJar.\n-\n-    :param cookiejar: Should be session cookie.\n-    :param cookie_dict: Dict of key/values to be merged.\n-    \"\"\"\n-    if cookiejar is None:\n-        cookiejar = RequestsCookieJar()\n-\n-    if cookie_dict is not None:\n-        for k in cookie_dict:\n-            # Session should not be modified by request cookie.\n-            if k not in [cookie.name for cookie in cookiejar]:\n-                cookiejar.set_cookie(create_cookie(k, cookie_dict[k]))\n\n@@ -13,7 +13,7 @@ from collections import Mapping\n from datetime import datetime\n \n from .compat import cookielib, OrderedDict, urljoin, urlparse\n-from .cookies import cookiejar_from_dict, extract_cookies_to_jar, RequestsCookieJar, merge_session_cookies\n+from .cookies import cookiejar_from_dict, extract_cookies_to_jar, RequestsCookieJar\n from .models import Request, PreparedRequest\n from .hooks import default_hooks, dispatch_hook\n from .utils import to_key_val_list, default_headers\n@@ -323,7 +323,7 @@ class Session(SessionRedirectMixin):\n         prep = self.prepare_request(req)\n \n         # Add param cookies to session cookies\n-        merge_session_cookies(self.cookies, cookies)\n+        self.cookies = cookiejar_from_dict(cookies, cookiejar=self.cookies, overwrite=False)\n \n         proxies = proxies or {}\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#af4fb8cedca7c331b8c914a40c477a2cb02055e1", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 9 | Lines Deleted: 6 | Files Changed: 1 | Hunks: 5 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 15 | Churn Cumulative: 8912 | Contributors (this commit): 119 | Commits (past 90d): 19 | Contributors (cumulative): 119 | DMM Complexity: 0.0\n\nDIFF:\n@@ -17,6 +17,7 @@ from .structures import CaseInsensitiveDict\n \n from .auth import HTTPBasicAuth\n from .cookies import cookiejar_from_dict, get_cookie_header\n+from .packages.urllib3.fields import RequestField\n from .packages.urllib3.filepost import encode_multipart_formdata\n from .packages.urllib3.util import parse_url\n from .exceptions import (\n@@ -119,11 +120,14 @@ class RequestEncodingMixin(object):\n         for (k, v) in files:\n             # support for explicit filename\n             ft = None\n+            fh = None\n             if isinstance(v, (tuple, list)):\n                 if len(v) == 2:\n                     fn, fp = v\n-                else:\n+                elif len(v) == 3:\n                     fn, fp, ft = v\n+                else:\n+                    fn, fp, ft, fh = v\n             else:\n                 fn = guess_filename(v) or k\n                 fp = v\n@@ -132,11 +136,10 @@ class RequestEncodingMixin(object):\n             if isinstance(fp, bytes):\n                 fp = BytesIO(fp)\n \n-            if ft:\n-                new_v = (fn, fp.read(), ft)\n-            else:\n-                new_v = (fn, fp.read())\n-            new_fields.append((k, new_v))\n+            rf = RequestField(name=k, data=fp.read(), \n+                              filename=fn, headers=fh)\n+            rf.make_multipart(content_type=ft)\n+            new_fields.append(rf)\n \n         body, content_type = encode_multipart_formdata(new_fields)\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#4291f76c9939a15838feed0b64230f4197ba844b", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 9 | Lines Deleted: 1 | Files Changed: 2 | Hunks: 4 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 10 | Churn Cumulative: 777 | Contributors (this commit): 24 | Commits (past 90d): 11 | Contributors (cumulative): 27 | DMM Complexity: 0.0\n\nDIFF:\n@@ -22,8 +22,9 @@ from .packages.urllib3.exceptions import MaxRetryError\n from .packages.urllib3.exceptions import TimeoutError\n from .packages.urllib3.exceptions import SSLError as _SSLError\n from .packages.urllib3.exceptions import HTTPError as _HTTPError\n+from .packages.urllib3.exceptions import ProxyError as _ProxyError\n from .cookies import extract_cookies_to_jar\n-from .exceptions import ConnectionError, Timeout, SSLError\n+from .exceptions import ConnectionError, Timeout, SSLError, ProxyError\n from .auth import _basic_auth_str\n \n DEFAULT_POOLBLOCK = False\n@@ -353,6 +354,9 @@ class HTTPAdapter(BaseAdapter):\n         except MaxRetryError as e:\n             raise ConnectionError(e)\n \n+        except _ProxyError as e:\n+            raise ProxyError(e)\n+\n         except (_SSLError, _HTTPError) as e:\n             if isinstance(e, _SSLError):\n                 raise SSLError(e)\n\n@@ -27,6 +27,10 @@ class ConnectionError(RequestException):\n     \"\"\"A Connection error occurred.\"\"\"\n \n \n+class ProxyError(ConnectionError):\n+    \"\"\"A proxy error occurred.\"\"\"\n+\n+\n class SSLError(ConnectionError):\n     \"\"\"An SSL error occurred.\"\"\"\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#c8a68334a7523faf5f09b3f9b1e1cca658c2aba6", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 2559 | Contributors (this commit): 8 | Commits (past 90d): 3 | Contributors (cumulative): 8 | DMM Complexity: None\n\nDIFF:\n@@ -27,7 +27,7 @@ except ImportError:\n try: # Compiled with SSL?\n     HTTPSConnection = object\n \n-    class BaseSSLError(BaseException):\n+    class BaseSSLError(Exception):\n         pass\n \n     ssl = None\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#8370e664649af8902658e3079b49307c9d395554", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 509 | Contributors (this commit): 8 | Commits (past 90d): 3 | Contributors (cumulative): 8 | DMM Complexity: None\n\nDIFF:\n@@ -23,7 +23,7 @@ usage:\n \n    >>> payload = dict(key1='value1', key2='value2')\n    >>> r = requests.post(\"http://httpbin.org/post\", data=payload)\n-   >>> print r.text\n+   >>> print (r.text)\n    {\n      ...\n      \"form\": {\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#5c92c72e2cd18010048af1a3028a80e808ad4ec6", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 2 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 8914 | Contributors (this commit): 120 | Commits (past 90d): 19 | Contributors (cumulative): 120 | DMM Complexity: None\n\nDIFF:\n@@ -575,7 +575,7 @@ class Response(object):\n                     raise ChunkedEncodingError(e)\n             except AttributeError:\n                 # Standard file-like object.\n-                while 1:\n+                while True:\n                     chunk = self.raw.read(chunk_size)\n                     if not chunk:\n                         break\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#48f59aa1f7587fbcb97df1b55aee356a94735b72", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 2561 | Contributors (this commit): 8 | Commits (past 90d): 4 | Contributors (cumulative): 8 | DMM Complexity: None\n\nDIFF:\n@@ -27,7 +27,7 @@ except ImportError:\n try: # Compiled with SSL?\n     HTTPSConnection = object\n \n-    class BaseSSLError(Exception):\n+    class BaseSSLError(BaseException):\n         pass\n \n     ssl = None\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#5bf396d5d12bf9debc667a509c84f640560da517", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 22 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 2 | Methods Changed: 2 | Complexity Δ (Sum/Max): 7/7 | Churn Δ: 23 | Churn Cumulative: 2544 | Contributors (this commit): 49 | Commits (past 90d): 14 | Contributors (cumulative): 49 | DMM Complexity: 0.0\n\nDIFF:\n@@ -65,6 +65,27 @@ def merge_setting(request_setting, session_setting, dict_class=OrderedDict):\n     return merged_setting\n \n \n+def merge_hooks(request_hooks, session_hooks, dict_class=OrderedDict):\n+    \"\"\"\n+    Properly merges both requests and session hooks.\n+\n+    This is necessary because when request_hooks == {'response': []}, the\n+    merge breaks Session hooks entirely.\n+    \"\"\"\n+    if session_hooks is None or session_hooks.get('response') == []:\n+        return request_hooks\n+\n+    if request_hooks is None or request_hooks.get('response') == []:\n+        return session_hooks\n+\n+    ret = {}\n+    for (k, v) in request_hooks.items():\n+        if v is not None:\n+            ret[k] = set(v).union(session_hooks.get(k, []))\n+\n+    return ret\n+\n+\n class SessionRedirectMixin(object):\n     def resolve_redirects(self, resp, req, stream=False, timeout=None,\n                           verify=True, cert=None, proxies=None):\n@@ -261,7 +282,7 @@ class Session(SessionRedirectMixin):\n             params=merge_setting(request.params, self.params),\n             auth=merge_setting(auth, self.auth),\n             cookies=merged_cookies,\n-            hooks=merge_setting(request.hooks, self.hooks),\n+            hooks=merge_hooks(request.hooks, self.hooks),\n         )\n         return p\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#f12584b94ae06d48ce4125de4d29feb283d2d62c", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 19 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 2 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 19 | Churn Cumulative: 3565 | Contributors (this commit): 61 | Commits (past 90d): 20 | Contributors (cumulative): 61 | DMM Complexity: 1.0\n\nDIFF:\n@@ -449,6 +449,25 @@ class RequestsTestCase(unittest.TestCase):\n \n         requests.Request('GET', HTTPBIN, hooks={'response': hook})\n \n+    def test_session_hooks_are_used_with_no_request_hooks(self):\n+        hook = lambda x, *args, **kwargs: x\n+        s = requests.Session()\n+        s.hooks['response'].append(hook)\n+        r = requests.Request('GET', HTTPBIN)\n+        prep = s.prepare_request(r)\n+        assert prep.hooks['response'] != []\n+        assert prep.hooks['response'] == [hook]\n+\n+    def test_session_hooks_are_overriden_by_request_hooks(self):\n+        hook1 = lambda x, *args, **kwargs: x\n+        hook2 = lambda x, *args, **kwargs: x\n+        assert hook1 is not hook2\n+        s = requests.Session()\n+        s.hooks['response'].append(hook2)\n+        r = requests.Request('GET', HTTPBIN, hooks={'response': [hook1]})\n+        prep = s.prepare_request(r)\n+        assert prep.hooks['response'] == [hook1]\n+\n     def test_prepared_request_hook(self):\n         def hook(resp, **kwargs):\n             resp.hook_working = True\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#a4605fe32426bcc404ab1eb4ea4b0dde9238a3e8", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 6 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): -2/0 | Churn Δ: 7 | Churn Cumulative: 2551 | Contributors (this commit): 49 | Commits (past 90d): 15 | Contributors (cumulative): 49 | DMM Complexity: 1.0\n\nDIFF:\n@@ -78,12 +78,7 @@ def merge_hooks(request_hooks, session_hooks, dict_class=OrderedDict):\n     if request_hooks is None or request_hooks.get('response') == []:\n         return session_hooks\n \n-    ret = {}\n-    for (k, v) in request_hooks.items():\n-        if v is not None:\n-            ret[k] = set(v).union(session_hooks.get(k, []))\n-\n-    return ret\n+    return merge_setting(request_hooks, session_hooks, dict_class)\n \n \n class SessionRedirectMixin(object):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#0bb8be0e5ba58dfff9648b4058acaa927837e605", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 8 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 3 | Methods Changed: 1 | Complexity Δ (Sum/Max): -2/0 | Churn Δ: 9 | Churn Cumulative: 649 | Contributors (this commit): 15 | Commits (past 90d): 5 | Contributors (cumulative): 15 | DMM Complexity: 1.0\n\nDIFF:\n@@ -8,7 +8,7 @@ requests.utils imports from here, so be careful with imports.\n \n import time\n import collections\n-from .compat import cookielib, urlparse, Morsel\n+from .compat import cookielib, urlparse, urlunparse, Morsel\n \n try:\n     import threading\n@@ -45,7 +45,14 @@ class MockRequest(object):\n         return self.get_host()\n \n     def get_full_url(self):\n+        if not self._r.headers.get('Host'):\n             return self._r.url\n+        host = self._r.headers['Host']\n+        parsed = urlparse(self._r.url)\n+        return urlunparse([\n+            parsed.scheme, host, parsed.path, parsed.params, parsed.query,\n+            parsed.fragment\n+        ])\n \n     def is_unverifiable(self):\n         return True\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#13a6e02ccd0b932b9cf8b8eb88cdb47ee118bbd1", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 34 | Lines Deleted: 2 | Files Changed: 2 | Hunks: 5 | Methods Changed: 2 | Complexity Δ (Sum/Max): 7/6 | Churn Δ: 36 | Churn Cumulative: 5518 | Contributors (this commit): 92 | Commits (past 90d): 26 | Contributors (cumulative): 107 | DMM Complexity: 0.3\n\nDIFF:\n@@ -12,6 +12,7 @@ that are also useful for external consumption.\n import cgi\n import codecs\n import collections\n+import io\n import os\n import platform\n import re\n@@ -46,11 +47,21 @@ def dict_to_sequence(d):\n def super_len(o):\n     if hasattr(o, '__len__'):\n         return len(o)\n+\n     if hasattr(o, 'len'):\n         return o.len\n-    if hasattr(o, 'fileno'):\n-        return os.fstat(o.fileno()).st_size\n \n+    if hasattr(o, 'fileno'):\n+        try:\n+            fileno = o.fileno()\n+        except io.UnsupportedOperation:\n+            pass\n+        else:\n+            return os.fstat(fileno).st_size\n+\n+    if hasattr(o, 'getvalue'):\n+        # e.g. BytesIO, cStringIO.StringI\n+        return len(o.getvalue())\n \n def get_netrc_auth(url):\n     \"\"\"Returns the Requests tuple auth for a given url from netrc.\"\"\"\n\n@@ -873,5 +873,26 @@ class TestCaseInsensitiveDict(unittest.TestCase):\n         self.assertEqual(frozenset(cid), keyset)\n \n \n+class UtilsTestCase(unittest.TestCase):\n+\n+    def test_super_len_io_streams(self):\n+        \"\"\" Ensures that we properly deal with different kinds of IO streams. \"\"\"\n+        # uses StringIO or io.StringIO (see import above)\n+        from io import BytesIO\n+        from requests.utils import super_len\n+\n+        self.assertEqual(super_len(StringIO.StringIO()), 0)\n+        self.assertEqual(super_len(StringIO.StringIO('with so much drama in the LBC')), 29)\n+\n+        self.assertEqual(super_len(BytesIO()), 0)\n+        self.assertEqual(super_len(BytesIO(b\"it's kinda hard bein' snoop d-o-double-g\")), 40)\n+\n+        try:\n+            import cStringIO\n+        except ImportError:\n+            pass\n+        else:\n+            self.assertEqual(super_len(cStringIO.StringIO('but some how, some way...')), 25)\n+\n if __name__ == '__main__':\n     unittest.main()\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#df7aece2c8aef689a4b1f71126b93a5f09a3d168", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 4 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 3 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 653 | Contributors (this commit): 15 | Commits (past 90d): 6 | Contributors (cumulative): 15 | DMM Complexity: None\n\nDIFF:\n@@ -45,10 +45,14 @@ class MockRequest(object):\n         return self.get_host()\n \n     def get_full_url(self):\n+        # Only return the response's URL if the user hadn't set the Host\n+        # header\n         if not self._r.headers.get('Host'):\n             return self._r.url\n+        # If they did set it, retrieve it and reconstruct the expected doain\n         host = self._r.headers['Host']\n         parsed = urlparse(self._r.url)\n+        # Reconstruct the URL as we expect it\n         return urlunparse([\n             parsed.scheme, host, parsed.path, parsed.params, parsed.query,\n             parsed.fragment\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#6632fb87c0eceed91d48f2bf84144cd4d24f77b8", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 655 | Contributors (this commit): 15 | Commits (past 90d): 7 | Contributors (cumulative): 15 | DMM Complexity: None\n\nDIFF:\n@@ -49,7 +49,7 @@ class MockRequest(object):\n         # header\n         if not self._r.headers.get('Host'):\n             return self._r.url\n-        # If they did set it, retrieve it and reconstruct the expected doain\n+        # If they did set it, retrieve it and reconstruct the expected domain\n         host = self._r.headers['Host']\n         parsed = urlparse(self._r.url)\n         # Reconstruct the URL as we expect it\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#bea206018211ef77955dfeb1e982bd3530b1fe60", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): -1/0 | Churn Δ: 2 | Churn Cumulative: 8916 | Contributors (this commit): 120 | Commits (past 90d): 20 | Contributors (cumulative): 120 | DMM Complexity: None\n\nDIFF:\n@@ -690,7 +690,7 @@ class Response(object):\n             encoding = guess_json_utf(self.content)\n             if encoding is not None:\n                 return json.loads(self.content.decode(encoding), **kwargs)\n-        return json.loads(self.text or self.content, **kwargs)\n+        return json.loads(self.text, **kwargs)\n \n     @property\n     def links(self):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#31c0962e83c8f3b043b3faceff880f69a9a4dbdc", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 13 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): 2/2 | Churn Δ: 14 | Churn Cumulative: 684 | Contributors (this commit): 15 | Commits (past 90d): 9 | Contributors (cumulative): 15 | DMM Complexity: 0.0\n\nDIFF:\n@@ -327,7 +327,11 @@ class HTTPAdapter(BaseAdapter):\n                     conn = conn.proxy_pool\n \n                 low_conn = conn._get_conn(timeout=timeout)\n-                low_conn.putrequest(request.method, url, skip_accept_encoding=True)\n+\n+                try:\n+                    low_conn.putrequest(request.method,\n+                                        url,\n+                                        skip_accept_encoding=True)\n \n                     for header, value in request.headers.items():\n                         low_conn.putheader(header, value)\n@@ -348,6 +352,14 @@ class HTTPAdapter(BaseAdapter):\n                         preload_content=False,\n                         decode_content=False\n                     )\n+                except:\n+                    # If we hit any problems here, clean up the connection.\n+                    # Then, reraise so that we can handle the actual exception.\n+                    low_conn.close()\n+                    raise\n+                else:\n+                    # All is well, return the connection to the pool.\n+                    conn._put_conn(low_conn)\n \n         except socket.error as sockerr:\n             raise ConnectionError(sockerr)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#9606f0240b8e0ce5f64e9659c2161a91c8dc6b60", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 3 | Churn Cumulative: 687 | Contributors (this commit): 15 | Commits (past 90d): 10 | Contributors (cumulative): 15 | DMM Complexity: 0.0\n\nDIFF:\n@@ -346,7 +346,8 @@ class HTTPAdapter(BaseAdapter):\n                     low_conn.send(b'0\\r\\n\\r\\n')\n \n                     r = low_conn.getresponse()\n-                    resp = HTTPResponse.from_httplib(r,\n+                    resp = HTTPResponse.from_httplib(\n+                        r,\n                         pool=conn,\n                         connection=low_conn,\n                         preload_content=False,\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#17dd3c0a76893736917a1e0156b36df0877587d9", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 2 | Churn Cumulative: 8918 | Contributors (this commit): 120 | Commits (past 90d): 21 | Contributors (cumulative): 120 | DMM Complexity: None\n\nDIFF:\n@@ -90,7 +90,7 @@ class RequestEncodingMixin(object):\n         \"\"\"Build the body for a multipart/form-data request.\n \n         Will successfully encode files when passed as a dict or a list of\n-        2-tuples. Order is retained if data is a list of 2-tuples but abritrary\n+        2-tuples. Order is retained if data is a list of 2-tuples but arbitrary\n         if parameters are supplied as a dict.\n \n         \"\"\"\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#8a42d5fb41cbca27f64ced4b8f087fb1001fac23", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 11 | Lines Deleted: 3 | Files Changed: 2 | Hunks: 4 | Methods Changed: 3 | Complexity Δ (Sum/Max): 0/1 | Churn Δ: 14 | Churn Cumulative: 12518 | Contributors (this commit): 144 | Commits (past 90d): 43 | Contributors (cumulative): 182 | DMM Complexity: 1.0\n\nDIFF:\n@@ -407,7 +407,7 @@ class PreparedRequest(RequestEncodingMixin, RequestHooksMixin):\n                 raise NotImplementedError('Streamed bodies and files are mutually exclusive.')\n \n             if length is not None:\n-                self.headers['Content-Length'] = str(length)\n+                self.headers['Content-Length'] = builtin_str(length)\n             else:\n                 self.headers['Transfer-Encoding'] = 'chunked'\n         else:\n@@ -433,12 +433,12 @@ class PreparedRequest(RequestEncodingMixin, RequestHooksMixin):\n     def prepare_content_length(self, body):\n         if hasattr(body, 'seek') and hasattr(body, 'tell'):\n             body.seek(0, 2)\n-            self.headers['Content-Length'] = str(body.tell())\n+            self.headers['Content-Length'] = builtin_str(body.tell())\n             body.seek(0, 0)\n         elif body is not None:\n             l = super_len(body)\n             if l:\n-                self.headers['Content-Length'] = str(l)\n+                self.headers['Content-Length'] = builtin_str(l)\n         elif self.method not in ('GET', 'HEAD'):\n             self.headers['Content-Length'] = '0'\n \n\n@@ -684,6 +684,14 @@ class RequestsTestCase(unittest.TestCase):\n \n         self.assertTrue('multipart/form-data' in p.headers['Content-Type'])\n \n+    def test_autoset_header_values_are_native(self):\n+        data = 'this is a string'\n+        length = '16'\n+        req = requests.Request('POST', httpbin('post'), data=data)\n+        p = req.prepare()\n+\n+        self.assertEqual(p.headers['Content-Length'], length)\n+\n \n class TestContentEncodingDetection(unittest.TestCase):\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#333ac101baffd01c6eca1c4c61b1d620e4d8ca70", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 3 | Churn Cumulative: 8927 | Contributors (this commit): 121 | Commits (past 90d): 22 | Contributors (cumulative): 121 | DMM Complexity: 0.0\n\nDIFF:\n@@ -324,7 +324,8 @@ class PreparedRequest(RequestEncodingMixin, RequestHooksMixin):\n         scheme, auth, host, port, path, query, fragment = parse_url(url)\n \n         if not scheme:\n-            raise MissingSchema(\"Invalid URL %r: No schema supplied\" % url)\n+            raise MissingSchema(\"Invalid URL %r: No schema supplied. \"\n+                                \"Perhaps you meant http://%s?\" % (url, url))\n \n         if not host:\n             raise InvalidURL(\"Invalid URL %r: No host supplied\" % url)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#b5d2160ef8e5eb0b163a69e33f5deb31ecfabd32", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 8931 | Contributors (this commit): 121 | Commits (past 90d): 22 | Contributors (cumulative): 121 | DMM Complexity: None\n\nDIFF:\n@@ -324,8 +324,8 @@ class PreparedRequest(RequestEncodingMixin, RequestHooksMixin):\n         scheme, auth, host, port, path, query, fragment = parse_url(url)\n \n         if not scheme:\n-            raise MissingSchema(\"Invalid URL %r: No schema supplied. \"\n-                                \"Perhaps you meant http://%s?\" % (url, url))\n+            raise MissingSchema(\"Invalid URL {0!r}: No schema supplied. \"\n+                                \"Perhaps you meant http://{0}?\".format(url))\n \n         if not host:\n             raise InvalidURL(\"Invalid URL %r: No host supplied\" % url)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#0cd6959f1907dc50423ca147fa797f17a64d26af", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): -6/0 | Churn Δ: 2 | Churn Cumulative: 2553 | Contributors (this commit): 50 | Commits (past 90d): 14 | Contributors (cumulative): 50 | DMM Complexity: None\n\nDIFF:\n@@ -73,7 +73,7 @@ class SessionRedirectMixin(object):\n         i = 0\n \n         # ((resp.status_code is codes.see_other))\n-        while (('location' in resp.headers and resp.status_code in REDIRECT_STATI)):\n+        while ('location' in resp.headers and resp.status_code in REDIRECT_STATI):\n             prepared_request = req.copy()\n \n             resp.content  # Consume socket so it can be released\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#76be17b00ac8e6f16e0a7e987a15b5d36e6bab01", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 8933 | Contributors (this commit): 122 | Commits (past 90d): 23 | Contributors (cumulative): 122 | DMM Complexity: None\n\nDIFF:\n@@ -277,7 +277,7 @@ class PreparedRequest(RequestEncodingMixin, RequestHooksMixin):\n \n     def prepare(self, method=None, url=None, headers=None, files=None,\n                 data=None, params=None, auth=None, cookies=None, hooks=None):\n-        \"\"\"Prepares the the entire request with the given parameters.\"\"\"\n+        \"\"\"Prepares the entire request with the given parameters.\"\"\"\n \n         self.prepare_method(method)\n         self.prepare_url(url, params)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#3b35f1c37d05107f7c6ec3e02e8ba16d5b82171a", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 0 | Lines Deleted: 32 | Files Changed: 1 | Hunks: 1 | Methods Changed: 3 | Complexity Δ (Sum/Max): -3/0 | Churn Δ: 32 | Churn Cumulative: 64 | Contributors (this commit): 1 | Commits (past 90d): 1 | Contributors (cumulative): 1 | DMM Complexity: 0.0\n\nDIFF:\n@@ -1,32 +0,0 @@\n-# -*- coding: utf-8 -*-\n-\n-import requests\n-from invoke import run, task\n-\n-@task\n-def test():\n-    run('py.test', pty=True)\n-\n-@task\n-def deps():\n-    print('Vendoring urllib3...')\n-\n-    run('rm -fr requests/packages/urllib3')\n-    run('git clone https://github.com/shazow/urllib3.git')\n-    run('mv urllib3/urllib3 requests/packages/')\n-    run('rm -fr urllib3')\n-\n-    print('Vendoring Charade...')\n-\n-    run('rm -fr requests/packages/charade')\n-    run('git clone https://github.com/sigmavirus24/charade.git')\n-    run('mv charade/charade requests/packages/')\n-    run('rm -fr charade')\n-\n-@task\n-def certs():\n-    print('Grabbing latest CA Bundle...')\n-    r = requests.get('https://raw.github.com/kennethreitz/certifi/master/certifi/cacert.pem')\n-\n-    with open('requests/cacert.pem', 'w') as f:\n-        f.write(r.content)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
