{"custom_id": "fastapi#e40747f10ae911910e9cb9a9684576f3b21304c9", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 465 | Contributors (this commit): 2 | Commits (past 90d): 8 | Contributors (cumulative): 2 | DMM Complexity: None\n\nDIFF:\n@@ -1,6 +1,6 @@\n \"\"\"FastAPI framework, high performance, easy to learn, fast to code, ready for production\"\"\"\n \n-__version__ = \"0.109.2\"\n+__version__ = \"0.110.0\"\n \n from starlette import status as status\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#478288700ab6a9be3cacb97e9f74eb5e4c01fe0c", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 22 | Lines Deleted: 22 | Files Changed: 22 | Hunks: 22 | Methods Changed: 39 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 44 | Churn Cumulative: 9263 | Contributors (this commit): 11 | Commits (past 90d): 24 | Contributors (cumulative): 61 | DMM Complexity: None\n\nDIFF:\n@@ -21,7 +21,7 @@ def test_read_item_bad_token():\n     assert response.json() == {\"detail\": \"Invalid X-Token header\"}\n \n \n-def test_read_inexistent_item():\n+def test_read_nonexistent_item():\n     response = client.get(\"/items/baz\", headers={\"X-Token\": \"coneofsilence\"})\n     assert response.status_code == 404\n     assert response.json() == {\"detail\": \"Item not found\"}\n\n@@ -21,7 +21,7 @@ def test_read_item_bad_token():\n     assert response.json() == {\"detail\": \"Invalid X-Token header\"}\n \n \n-def test_read_inexistent_item():\n+def test_read_nonexistent_item():\n     response = client.get(\"/items/baz\", headers={\"X-Token\": \"coneofsilence\"})\n     assert response.status_code == 404\n     assert response.json() == {\"detail\": \"Item not found\"}\n\n@@ -21,7 +21,7 @@ def test_read_item_bad_token():\n     assert response.json() == {\"detail\": \"Invalid X-Token header\"}\n \n \n-def test_read_inexistent_item():\n+def test_read_nonexistent_item():\n     response = client.get(\"/items/baz\", headers={\"X-Token\": \"coneofsilence\"})\n     assert response.status_code == 404\n     assert response.json() == {\"detail\": \"Item not found\"}\n\n@@ -21,7 +21,7 @@ def test_read_item_bad_token():\n     assert response.json() == {\"detail\": \"Invalid X-Token header\"}\n \n \n-def test_read_inexistent_item():\n+def test_read_nonexistent_item():\n     response = client.get(\"/items/baz\", headers={\"X-Token\": \"coneofsilence\"})\n     assert response.status_code == 404\n     assert response.json() == {\"detail\": \"Item not found\"}\n\n@@ -21,7 +21,7 @@ def test_read_item_bad_token():\n     assert response.json() == {\"detail\": \"Invalid X-Token header\"}\n \n \n-def test_read_inexistent_item():\n+def test_read_nonexistent_item():\n     response = client.get(\"/items/baz\", headers={\"X-Token\": \"coneofsilence\"})\n     assert response.status_code == 404\n     assert response.json() == {\"detail\": \"Item not found\"}\n\n@@ -128,7 +128,7 @@ def test_token_no_scope():\n     assert response.headers[\"WWW-Authenticate\"] == 'Bearer scope=\"me\"'\n \n \n-def test_token_inexistent_user():\n+def test_token_nonexistent_user():\n     response = client.get(\n         \"/users/me\",\n         headers={\n\n@@ -128,7 +128,7 @@ def test_token_no_scope():\n     assert response.headers[\"WWW-Authenticate\"] == 'Bearer scope=\"me\"'\n \n \n-def test_token_inexistent_user():\n+def test_token_nonexistent_user():\n     response = client.get(\n         \"/users/me\",\n         headers={\n\n@@ -151,7 +151,7 @@ def test_token_no_scope(client: TestClient):\n \n \n @needs_py310\n-def test_token_inexistent_user(client: TestClient):\n+def test_token_nonexistent_user(client: TestClient):\n     response = client.get(\n         \"/users/me\",\n         headers={\n\n@@ -151,7 +151,7 @@ def test_token_no_scope(client: TestClient):\n \n \n @needs_py39\n-def test_token_inexistent_user(client: TestClient):\n+def test_token_nonexistent_user(client: TestClient):\n     response = client.get(\n         \"/users/me\",\n         headers={\n\n@@ -151,7 +151,7 @@ def test_token_no_scope(client: TestClient):\n \n \n @needs_py310\n-def test_token_inexistent_user(client: TestClient):\n+def test_token_nonexistent_user(client: TestClient):\n     response = client.get(\n         \"/users/me\",\n         headers={\n\n@@ -151,7 +151,7 @@ def test_token_no_scope(client: TestClient):\n \n \n @needs_py39\n-def test_token_inexistent_user(client: TestClient):\n+def test_token_nonexistent_user(client: TestClient):\n     response = client.get(\n         \"/users/me\",\n         headers={\n\n@@ -54,7 +54,7 @@ def test_get_user(client):\n \n # TODO: pv2 add version with Pydantic v2\n @needs_pydanticv1\n-def test_inexistent_user(client):\n+def test_nonexistent_user(client):\n     response = client.get(\"/users/999\")\n     assert response.status_code == 404, response.text\n \n\n@@ -50,7 +50,7 @@ def test_get_user(client):\n \n # TODO: pv2 add version with Pydantic v2\n @needs_pydanticv1\n-def test_inexistent_user(client):\n+def test_nonexistent_user(client):\n     response = client.get(\"/users/999\")\n     assert response.status_code == 404, response.text\n \n\n@@ -58,7 +58,7 @@ def test_get_user(client):\n @needs_py310\n # TODO: pv2 add version with Pydantic v2\n @needs_pydanticv1\n-def test_inexistent_user(client):\n+def test_nonexistent_user(client):\n     response = client.get(\"/users/999\")\n     assert response.status_code == 404, response.text\n \n\n@@ -58,7 +58,7 @@ def test_get_user(client):\n @needs_py39\n # TODO: pv2 add version with Pydantic v2\n @needs_pydanticv1\n-def test_inexistent_user(client):\n+def test_nonexistent_user(client):\n     response = client.get(\"/users/999\")\n     assert response.status_code == 404, response.text\n \n\n@@ -57,7 +57,7 @@ def test_get_user(client):\n @needs_py310\n # TODO: pv2 add version with Pydantic v2\n @needs_pydanticv1\n-def test_inexistent_user(client):\n+def test_nonexistent_user(client):\n     response = client.get(\"/users/999\")\n     assert response.status_code == 404, response.text\n \n\n@@ -57,7 +57,7 @@ def test_get_user(client):\n @needs_py39\n # TODO: pv2 add version with Pydantic v2\n @needs_pydanticv1\n-def test_inexistent_user(client):\n+def test_nonexistent_user(client):\n     response = client.get(\"/users/999\")\n     assert response.status_code == 404, response.text\n \n\n@@ -5,6 +5,6 @@ def test_app():\n     test_main.test_create_existing_item()\n     test_main.test_create_item()\n     test_main.test_create_item_bad_token()\n-    test_main.test_read_inexistent_item()\n+    test_main.test_read_nonexistent_item()\n     test_main.test_read_item()\n     test_main.test_read_item_bad_token()\n\n@@ -5,6 +5,6 @@ def test_app():\n     test_main.test_create_existing_item()\n     test_main.test_create_item()\n     test_main.test_create_item_bad_token()\n-    test_main.test_read_inexistent_item()\n+    test_main.test_read_nonexistent_item()\n     test_main.test_read_item()\n     test_main.test_read_item_bad_token()\n\n@@ -8,6 +8,6 @@ def test_app():\n     test_main.test_create_existing_item()\n     test_main.test_create_item()\n     test_main.test_create_item_bad_token()\n-    test_main.test_read_inexistent_item()\n+    test_main.test_read_nonexistent_item()\n     test_main.test_read_item()\n     test_main.test_read_item_bad_token()\n\n@@ -8,6 +8,6 @@ def test_app():\n     test_main.test_create_existing_item()\n     test_main.test_create_item()\n     test_main.test_create_item_bad_token()\n-    test_main.test_read_inexistent_item()\n+    test_main.test_read_nonexistent_item()\n     test_main.test_read_item()\n     test_main.test_read_item_bad_token()\n\n@@ -8,6 +8,6 @@ def test_app():\n     test_main.test_create_existing_item()\n     test_main.test_create_item()\n     test_main.test_create_item_bad_token()\n-    test_main.test_read_inexistent_item()\n+    test_main.test_read_nonexistent_item()\n     test_main.test_read_item()\n     test_main.test_read_item_bad_token()\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#3c70b55042beff82d70d0ff8acc9dabbd95253b4", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 3 | Lines Deleted: 3 | Files Changed: 2 | Hunks: 3 | Methods Changed: 3 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 6 | Churn Cumulative: 1226 | Contributors (this commit): 12 | Commits (past 90d): 3 | Contributors (cumulative): 18 | DMM Complexity: None\n\nDIFF:\n@@ -441,7 +441,7 @@ class OAuth2PasswordBearer(OAuth2):\n             bool,\n             Doc(\n                 \"\"\"\n-                By default, if no HTTP Auhtorization header is provided, required for\n+                By default, if no HTTP Authorization header is provided, required for\n                 OAuth2 authentication, it will automatically cancel the request and\n                 send the client an error.\n \n@@ -543,7 +543,7 @@ class OAuth2AuthorizationCodeBearer(OAuth2):\n             bool,\n             Doc(\n                 \"\"\"\n-                By default, if no HTTP Auhtorization header is provided, required for\n+                By default, if no HTTP Authorization header is provided, required for\n                 OAuth2 authentication, it will automatically cancel the request and\n                 send the client an error.\n \n\n@@ -49,7 +49,7 @@ class OpenIdConnect(SecurityBase):\n             bool,\n             Doc(\n                 \"\"\"\n-                By default, if no HTTP Auhtorization header is provided, required for\n+                By default, if no HTTP Authorization header is provided, required for\n                 OpenID Connect authentication, it will automatically cancel the request\n                 and send the client an error.\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#f0becc4452905e3ae7ac7aed925e5e14d1af4ec1", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 124 | Lines Deleted: 169 | Files Changed: 1 | Hunks: 40 | Methods Changed: 11 | Complexity Δ (Sum/Max): -5/0 | Churn Δ: 293 | Churn Cumulative: 1174 | Contributors (this commit): 2 | Commits (past 90d): 1 | Contributors (cumulative): 2 | DMM Complexity: 1.0\n\nDIFF:\n@@ -58,38 +58,6 @@ query Q($after: String, $category_id: ID) {\n }\n \"\"\"\n \n-issues_query = \"\"\"\n-query Q($after: String) {\n-  repository(name: \"fastapi\", owner: \"tiangolo\") {\n-    issues(first: 100, after: $after) {\n-      edges {\n-        cursor\n-        node {\n-          number\n-          author {\n-            login\n-            avatarUrl\n-            url\n-          }\n-          title\n-          createdAt\n-          state\n-          comments(first: 100) {\n-            nodes {\n-              createdAt\n-              author {\n-                login\n-                avatarUrl\n-                url\n-              }\n-            }\n-          }\n-        }\n-      }\n-    }\n-  }\n-}\n-\"\"\"\n \n prs_query = \"\"\"\n query Q($after: String) {\n@@ -176,7 +144,7 @@ class Author(BaseModel):\n     url: str\n \n \n-# Issues and Discussions\n+# Discussions\n \n \n class CommentsNode(BaseModel):\n@@ -200,15 +168,6 @@ class DiscussionsComments(BaseModel):\n     nodes: List[DiscussionsCommentsNode]\n \n \n-class IssuesNode(BaseModel):\n-    number: int\n-    author: Union[Author, None] = None\n-    title: str\n-    createdAt: datetime\n-    state: str\n-    comments: Comments\n-\n-\n class DiscussionsNode(BaseModel):\n     number: int\n     author: Union[Author, None] = None\n@@ -217,44 +176,23 @@ class DiscussionsNode(BaseModel):\n     comments: DiscussionsComments\n \n \n-class IssuesEdge(BaseModel):\n-    cursor: str\n-    node: IssuesNode\n-\n-\n class DiscussionsEdge(BaseModel):\n     cursor: str\n     node: DiscussionsNode\n \n \n-class Issues(BaseModel):\n-    edges: List[IssuesEdge]\n-\n-\n class Discussions(BaseModel):\n     edges: List[DiscussionsEdge]\n \n \n-class IssuesRepository(BaseModel):\n-    issues: Issues\n-\n-\n class DiscussionsRepository(BaseModel):\n     discussions: Discussions\n \n \n-class IssuesResponseData(BaseModel):\n-    repository: IssuesRepository\n-\n-\n class DiscussionsResponseData(BaseModel):\n     repository: DiscussionsRepository\n \n \n-class IssuesResponse(BaseModel):\n-    data: IssuesResponseData\n-\n-\n class DiscussionsResponse(BaseModel):\n     data: DiscussionsResponseData\n \n@@ -389,12 +327,6 @@ def get_graphql_response(\n     return data\n \n \n-def get_graphql_issue_edges(*, settings: Settings, after: Union[str, None] = None):\n-    data = get_graphql_response(settings=settings, query=issues_query, after=after)\n-    graphql_response = IssuesResponse.model_validate(data)\n-    return graphql_response.data.repository.issues.edges\n-\n-\n def get_graphql_question_discussion_edges(\n     *,\n     settings: Settings,\n@@ -422,43 +354,16 @@ def get_graphql_sponsor_edges(*, settings: Settings, after: Union[str, None] = N\n     return graphql_response.data.user.sponsorshipsAsMaintainer.edges\n \n \n-def get_issues_experts(settings: Settings):\n-    issue_nodes: List[IssuesNode] = []\n-    issue_edges = get_graphql_issue_edges(settings=settings)\n-\n-    while issue_edges:\n-        for edge in issue_edges:\n-            issue_nodes.append(edge.node)\n-        last_edge = issue_edges[-1]\n-        issue_edges = get_graphql_issue_edges(settings=settings, after=last_edge.cursor)\n-\n-    commentors = Counter()\n-    last_month_commentors = Counter()\n-    authors: Dict[str, Author] = {}\n-\n-    now = datetime.now(tz=timezone.utc)\n-    one_month_ago = now - timedelta(days=30)\n-\n-    for issue in issue_nodes:\n-        issue_author_name = None\n-        if issue.author:\n-            authors[issue.author.login] = issue.author\n-            issue_author_name = issue.author.login\n-        issue_commentors = set()\n-        for comment in issue.comments.nodes:\n-            if comment.author:\n-                authors[comment.author.login] = comment.author\n-                if comment.author.login != issue_author_name:\n-                    issue_commentors.add(comment.author.login)\n-        for author_name in issue_commentors:\n-            commentors[author_name] += 1\n-            if issue.createdAt > one_month_ago:\n-                last_month_commentors[author_name] += 1\n-\n-    return commentors, last_month_commentors, authors\n+class DiscussionExpertsResults(BaseModel):\n+    commenters: Counter\n+    last_month_commenters: Counter\n+    three_months_commenters: Counter\n+    six_months_commenters: Counter\n+    one_year_commenters: Counter\n+    authors: Dict[str, Author]\n \n \n-def get_discussions_experts(settings: Settings):\n+def get_discussion_nodes(settings: Settings) -> List[DiscussionsNode]:\n     discussion_nodes: List[DiscussionsNode] = []\n     discussion_edges = get_graphql_question_discussion_edges(settings=settings)\n \n@@ -469,61 +374,73 @@ def get_discussions_experts(settings: Settings):\n         discussion_edges = get_graphql_question_discussion_edges(\n             settings=settings, after=last_edge.cursor\n         )\n+    return discussion_nodes\n \n-    commentors = Counter()\n-    last_month_commentors = Counter()\n+\n+def get_discussions_experts(\n+    discussion_nodes: List[DiscussionsNode]\n+) -> DiscussionExpertsResults:\n+    commenters = Counter()\n+    last_month_commenters = Counter()\n+    three_months_commenters = Counter()\n+    six_months_commenters = Counter()\n+    one_year_commenters = Counter()\n     authors: Dict[str, Author] = {}\n \n     now = datetime.now(tz=timezone.utc)\n     one_month_ago = now - timedelta(days=30)\n+    three_months_ago = now - timedelta(days=90)\n+    six_months_ago = now - timedelta(days=180)\n+    one_year_ago = now - timedelta(days=365)\n \n     for discussion in discussion_nodes:\n         discussion_author_name = None\n         if discussion.author:\n             authors[discussion.author.login] = discussion.author\n             discussion_author_name = discussion.author.login\n-        discussion_commentors = set()\n+        discussion_commentors: dict[str, datetime] = {}\n         for comment in discussion.comments.nodes:\n             if comment.author:\n                 authors[comment.author.login] = comment.author\n                 if comment.author.login != discussion_author_name:\n-                    discussion_commentors.add(comment.author.login)\n+                    author_time = discussion_commentors.get(\n+                        comment.author.login, comment.createdAt\n+                    )\n+                    discussion_commentors[comment.author.login] = max(\n+                        author_time, comment.createdAt\n+                    )\n             for reply in comment.replies.nodes:\n                 if reply.author:\n                     authors[reply.author.login] = reply.author\n                     if reply.author.login != discussion_author_name:\n-                        discussion_commentors.add(reply.author.login)\n-        for author_name in discussion_commentors:\n-            commentors[author_name] += 1\n-            if discussion.createdAt > one_month_ago:\n-                last_month_commentors[author_name] += 1\n-    return commentors, last_month_commentors, authors\n+                        author_time = discussion_commentors.get(\n+                            reply.author.login, reply.createdAt\n+                        )\n+                        discussion_commentors[reply.author.login] = max(\n+                            author_time, reply.createdAt\n+                        )\n+        for author_name, author_time in discussion_commentors.items():\n+            commenters[author_name] += 1\n+            if author_time > one_month_ago:\n+                last_month_commenters[author_name] += 1\n+            if author_time > three_months_ago:\n+                three_months_commenters[author_name] += 1\n+            if author_time > six_months_ago:\n+                six_months_commenters[author_name] += 1\n+            if author_time > one_year_ago:\n+                one_year_commenters[author_name] += 1\n+    discussion_experts_results = DiscussionExpertsResults(\n+        authors=authors,\n+        commenters=commenters,\n+        last_month_commenters=last_month_commenters,\n+        three_months_commenters=three_months_commenters,\n+        six_months_commenters=six_months_commenters,\n+        one_year_commenters=one_year_commenters,\n+    )\n+    return discussion_experts_results\n \n \n-def get_experts(settings: Settings):\n-    # Migrated to only use GitHub Discussions\n-    # (\n-    #     issues_commentors,\n-    #     issues_last_month_commentors,\n-    #     issues_authors,\n-    # ) = get_issues_experts(settings=settings)\n-    (\n-        discussions_commentors,\n-        discussions_last_month_commentors,\n-        discussions_authors,\n-    ) = get_discussions_experts(settings=settings)\n-    # commentors = issues_commentors + discussions_commentors\n-    commentors = discussions_commentors\n-    # last_month_commentors = (\n-    #     issues_last_month_commentors + discussions_last_month_commentors\n-    # )\n-    last_month_commentors = discussions_last_month_commentors\n-    # authors = {**issues_authors, **discussions_authors}\n-    authors = {**discussions_authors}\n-    return commentors, last_month_commentors, authors\n-\n-\n-def get_contributors(settings: Settings):\n+def get_pr_nodes(settings: Settings) -> List[PullRequestNode]:\n     pr_nodes: List[PullRequestNode] = []\n     pr_edges = get_graphql_pr_edges(settings=settings)\n \n@@ -532,10 +449,22 @@ def get_contributors(settings: Settings):\n             pr_nodes.append(edge.node)\n         last_edge = pr_edges[-1]\n         pr_edges = get_graphql_pr_edges(settings=settings, after=last_edge.cursor)\n+    return pr_nodes\n \n+\n+class ContributorsResults(BaseModel):\n+    contributors: Counter\n+    commenters: Counter\n+    reviewers: Counter\n+    translation_reviewers: Counter\n+    authors: Dict[str, Author]\n+\n+\n+def get_contributors(pr_nodes: List[PullRequestNode]) -> ContributorsResults:\n     contributors = Counter()\n-    commentors = Counter()\n+    commenters = Counter()\n     reviewers = Counter()\n+    translation_reviewers = Counter()\n     authors: Dict[str, Author] = {}\n \n     for pr in pr_nodes:\n@@ -552,16 +481,26 @@ def get_contributors(settings: Settings):\n                     continue\n                 pr_commentors.add(comment.author.login)\n         for author_name in pr_commentors:\n-            commentors[author_name] += 1\n+            commenters[author_name] += 1\n         for review in pr.reviews.nodes:\n             if review.author:\n                 authors[review.author.login] = review.author\n                 pr_reviewers.add(review.author.login)\n+                for label in pr.labels.nodes:\n+                    if label.name == \"lang-all\":\n+                        translation_reviewers[review.author.login] += 1\n+                        break\n         for reviewer in pr_reviewers:\n             reviewers[reviewer] += 1\n         if pr.state == \"MERGED\" and pr.author:\n             contributors[pr.author.login] += 1\n-    return contributors, commentors, reviewers, authors\n+    return ContributorsResults(\n+        contributors=contributors,\n+        commenters=commenters,\n+        reviewers=reviewers,\n+        translation_reviewers=translation_reviewers,\n+        authors=authors,\n+    )\n \n \n def get_individual_sponsors(settings: Settings):\n@@ -585,19 +524,19 @@ def get_individual_sponsors(settings: Settings):\n def get_top_users(\n     *,\n     counter: Counter,\n-    min_count: int,\n     authors: Dict[str, Author],\n     skip_users: Container[str],\n+    min_count: int = 2,\n ):\n     users = []\n-    for commentor, count in counter.most_common(50):\n-        if commentor in skip_users:\n+    for commenter, count in counter.most_common(50):\n+        if commenter in skip_users:\n             continue\n         if count >= min_count:\n-            author = authors[commentor]\n+            author = authors[commenter]\n             users.append(\n                 {\n-                    \"login\": commentor,\n+                    \"login\": commenter,\n                     \"count\": count,\n                     \"avatarUrl\": author.avatarUrl,\n                     \"url\": author.url,\n@@ -612,13 +551,11 @@ if __name__ == \"__main__\":\n     logging.info(f\"Using config: {settings.model_dump_json()}\")\n     g = Github(settings.input_token.get_secret_value())\n     repo = g.get_repo(settings.github_repository)\n-    question_commentors, question_last_month_commentors, question_authors = get_experts(\n-        settings=settings\n-    )\n-    contributors, pr_commentors, reviewers, pr_authors = get_contributors(\n-        settings=settings\n-    )\n-    authors = {**question_authors, **pr_authors}\n+    discussion_nodes = get_discussion_nodes(settings=settings)\n+    experts_results = get_discussions_experts(discussion_nodes=discussion_nodes)\n+    pr_nodes = get_pr_nodes(settings=settings)\n+    contributors_results = get_contributors(pr_nodes=pr_nodes)\n+    authors = {**experts_results.authors, **contributors_results.authors}\n     maintainers_logins = {\"tiangolo\"}\n     bot_names = {\"codecov\", \"github-actions\", \"pre-commit-ci\", \"dependabot\"}\n     maintainers = []\n@@ -627,39 +564,51 @@ if __name__ == \"__main__\":\n         maintainers.append(\n             {\n                 \"login\": login,\n-                \"answers\": question_commentors[login],\n-                \"prs\": contributors[login],\n+                \"answers\": experts_results.commenters[login],\n+                \"prs\": contributors_results.contributors[login],\n                 \"avatarUrl\": user.avatarUrl,\n                 \"url\": user.url,\n             }\n         )\n \n-    min_count_expert = 10\n-    min_count_last_month = 3\n-    min_count_contributor = 4\n-    min_count_reviewer = 4\n     skip_users = maintainers_logins | bot_names\n     experts = get_top_users(\n-        counter=question_commentors,\n-        min_count=min_count_expert,\n+        counter=experts_results.commenters,\n         authors=authors,\n         skip_users=skip_users,\n     )\n-    last_month_active = get_top_users(\n-        counter=question_last_month_commentors,\n-        min_count=min_count_last_month,\n+    last_month_experts = get_top_users(\n+        counter=experts_results.last_month_commenters,\n+        authors=authors,\n+        skip_users=skip_users,\n+    )\n+    three_months_experts = get_top_users(\n+        counter=experts_results.three_months_commenters,\n+        authors=authors,\n+        skip_users=skip_users,\n+    )\n+    six_months_experts = get_top_users(\n+        counter=experts_results.six_months_commenters,\n+        authors=authors,\n+        skip_users=skip_users,\n+    )\n+    one_year_experts = get_top_users(\n+        counter=experts_results.one_year_commenters,\n         authors=authors,\n         skip_users=skip_users,\n     )\n     top_contributors = get_top_users(\n-        counter=contributors,\n-        min_count=min_count_contributor,\n+        counter=contributors_results.contributors,\n         authors=authors,\n         skip_users=skip_users,\n     )\n     top_reviewers = get_top_users(\n-        counter=reviewers,\n-        min_count=min_count_reviewer,\n+        counter=contributors_results.reviewers,\n+        authors=authors,\n+        skip_users=skip_users,\n+    )\n+    top_translations_reviewers = get_top_users(\n+        counter=contributors_results.translation_reviewers,\n         authors=authors,\n         skip_users=skip_users,\n     )\n@@ -679,13 +628,19 @@ if __name__ == \"__main__\":\n     people = {\n         \"maintainers\": maintainers,\n         \"experts\": experts,\n-        \"last_month_active\": last_month_active,\n+        \"last_month_experts\": last_month_experts,\n+        \"three_months_experts\": three_months_experts,\n+        \"six_months_experts\": six_months_experts,\n+        \"one_year_experts\": one_year_experts,\n         \"top_contributors\": top_contributors,\n         \"top_reviewers\": top_reviewers,\n+        \"top_translations_reviewers\": top_translations_reviewers,\n     }\n     github_sponsors = {\n         \"sponsors\": sponsors,\n     }\n+    # For local development\n+    # people_path = Path(\"../../../../docs/en/data/people.yml\")\n     people_path = Path(\"./docs/en/data/people.yml\")\n     github_sponsors_path = Path(\"./docs/en/data/github_sponsors.yml\")\n     people_old_content = people_path.read_text(encoding=\"utf-8\")\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#93034fea48a85d5e7ac336b8ec455d2e26f0e364", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 2 | Files Changed: 2 | Hunks: 2 | Methods Changed: 2 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 72 | Contributors (this commit): 3 | Commits (past 90d): 2 | Contributors (cumulative): 5 | DMM Complexity: None\n\nDIFF:\n@@ -6,4 +6,4 @@ app = FastAPI()\n \n @app.get(\"/pydantic\", response_class=RedirectResponse, status_code=302)\n async def redirect_pydantic():\n-    return \"https://pydantic-docs.helpmanual.io/\"\n+    return \"https://docs.pydantic.dev/\"\n\n@@ -8,7 +8,7 @@ client = TestClient(app)\n def test_redirect_status_code():\n     response = client.get(\"/pydantic\", follow_redirects=False)\n     assert response.status_code == 302\n-    assert response.headers[\"location\"] == \"https://pydantic-docs.helpmanual.io/\"\n+    assert response.headers[\"location\"] == \"https://docs.pydantic.dev/\"\n \n \n def test_openapi_schema():\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#5ccc869fee663b264a68cd33990861c8a2f6eb47", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 70 | Lines Deleted: 70 | Files Changed: 41 | Hunks: 70 | Methods Changed: 110 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 140 | Churn Cumulative: 6473 | Contributors (this commit): 53 | Commits (past 90d): 65 | Contributors (cumulative): 167 | DMM Complexity: None\n\nDIFF:\n@@ -21,6 +21,6 @@ def query_or_cookie_extractor(\n \n @app.get(\"/items/\")\n async def read_query(\n-    query_or_default: Annotated[str, Depends(query_or_cookie_extractor)]\n+    query_or_default: Annotated[str, Depends(query_or_cookie_extractor)],\n ):\n     return {\"q_or_cookie\": query_or_default}\n\n@@ -20,6 +20,6 @@ def query_or_cookie_extractor(\n \n @app.get(\"/items/\")\n async def read_query(\n-    query_or_default: Annotated[str, Depends(query_or_cookie_extractor)]\n+    query_or_default: Annotated[str, Depends(query_or_cookie_extractor)],\n ):\n     return {\"q_or_cookie\": query_or_default}\n\n@@ -20,6 +20,6 @@ def query_or_cookie_extractor(\n \n @app.get(\"/items/\")\n async def read_query(\n-    query_or_default: Annotated[str, Depends(query_or_cookie_extractor)]\n+    query_or_default: Annotated[str, Depends(query_or_cookie_extractor)],\n ):\n     return {\"q_or_cookie\": query_or_default}\n\n@@ -7,6 +7,6 @@ app = FastAPI()\n \n @app.get(\"/items/\")\n async def read_items(\n-    strange_header: Union[str, None] = Header(default=None, convert_underscores=False)\n+    strange_header: Union[str, None] = Header(default=None, convert_underscores=False),\n ):\n     return {\"strange_header\": strange_header}\n\n@@ -7,6 +7,6 @@ app = FastAPI()\n \n @app.get(\"/items/\")\n async def read_items(\n-    strange_header: Annotated[str | None, Header(convert_underscores=False)] = None\n+    strange_header: Annotated[str | None, Header(convert_underscores=False)] = None,\n ):\n     return {\"strange_header\": strange_header}\n\n@@ -5,6 +5,6 @@ app = FastAPI()\n \n @app.get(\"/items/\")\n async def read_items(\n-    strange_header: str | None = Header(default=None, convert_underscores=False)\n+    strange_header: str | None = Header(default=None, convert_underscores=False),\n ):\n     return {\"strange_header\": strange_header}\n\n@@ -7,7 +7,7 @@ app = FastAPI()\n \n @app.get(\"/items/\")\n async def read_items(\n-    q: Union[str, None] = Query(default=None, min_length=3, max_length=50)\n+    q: Union[str, None] = Query(default=None, min_length=3, max_length=50),\n ):\n     results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n     if q:\n\n@@ -8,7 +8,7 @@ app = FastAPI()\n \n @app.get(\"/items/\")\n async def read_items(\n-    q: Annotated[Union[str, None], Query(min_length=3, max_length=50)] = None\n+    q: Annotated[Union[str, None], Query(min_length=3, max_length=50)] = None,\n ):\n     results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n     if q:\n\n@@ -7,7 +7,7 @@ app = FastAPI()\n \n @app.get(\"/items/\")\n async def read_items(\n-    q: Annotated[str | None, Query(min_length=3, max_length=50)] = None\n+    q: Annotated[str | None, Query(min_length=3, max_length=50)] = None,\n ):\n     results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n     if q:\n\n@@ -7,7 +7,7 @@ app = FastAPI()\n \n @app.get(\"/items/\")\n async def read_items(\n-    q: Annotated[Union[str, None], Query(min_length=3, max_length=50)] = None\n+    q: Annotated[Union[str, None], Query(min_length=3, max_length=50)] = None,\n ):\n     results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n     if q:\n\n@@ -7,7 +7,7 @@ app = FastAPI()\n \n @app.get(\"/items/\")\n async def read_items(\n-    q: Union[str, None] = Query(default=None, title=\"Query string\", min_length=3)\n+    q: Union[str, None] = Query(default=None, title=\"Query string\", min_length=3),\n ):\n     results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n     if q:\n\n@@ -8,7 +8,7 @@ app = FastAPI()\n \n @app.get(\"/items/\")\n async def read_items(\n-    q: Annotated[Union[str, None], Query(title=\"Query string\", min_length=3)] = None\n+    q: Annotated[Union[str, None], Query(title=\"Query string\", min_length=3)] = None,\n ):\n     results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n     if q:\n\n@@ -7,7 +7,7 @@ app = FastAPI()\n \n @app.get(\"/items/\")\n async def read_items(\n-    q: Annotated[str | None, Query(title=\"Query string\", min_length=3)] = None\n+    q: Annotated[str | None, Query(title=\"Query string\", min_length=3)] = None,\n ):\n     results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n     if q:\n\n@@ -7,7 +7,7 @@ app = FastAPI()\n \n @app.get(\"/items/\")\n async def read_items(\n-    q: Annotated[Union[str, None], Query(title=\"Query string\", min_length=3)] = None\n+    q: Annotated[Union[str, None], Query(title=\"Query string\", min_length=3)] = None,\n ):\n     results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n     if q:\n\n@@ -5,7 +5,7 @@ app = FastAPI()\n \n @app.get(\"/items/\")\n async def read_items(\n-    q: str | None = Query(default=None, title=\"Query string\", min_length=3)\n+    q: str | None = Query(default=None, title=\"Query string\", min_length=3),\n ):\n     results = {\"items\": [{\"item_id\": \"Foo\"}, {\"item_id\": \"Bar\"}]}\n     if q:\n\n@@ -7,7 +7,7 @@ app = FastAPI()\n \n @app.get(\"/items/\")\n async def read_items(\n-    hidden_query: Union[str, None] = Query(default=None, include_in_schema=False)\n+    hidden_query: Union[str, None] = Query(default=None, include_in_schema=False),\n ):\n     if hidden_query:\n         return {\"hidden_query\": hidden_query}\n\n@@ -8,7 +8,7 @@ app = FastAPI()\n \n @app.get(\"/items/\")\n async def read_items(\n-    hidden_query: Annotated[Union[str, None], Query(include_in_schema=False)] = None\n+    hidden_query: Annotated[Union[str, None], Query(include_in_schema=False)] = None,\n ):\n     if hidden_query:\n         return {\"hidden_query\": hidden_query}\n\n@@ -7,7 +7,7 @@ app = FastAPI()\n \n @app.get(\"/items/\")\n async def read_items(\n-    hidden_query: Annotated[str | None, Query(include_in_schema=False)] = None\n+    hidden_query: Annotated[str | None, Query(include_in_schema=False)] = None,\n ):\n     if hidden_query:\n         return {\"hidden_query\": hidden_query}\n\n@@ -7,7 +7,7 @@ app = FastAPI()\n \n @app.get(\"/items/\")\n async def read_items(\n-    hidden_query: Annotated[Union[str, None], Query(include_in_schema=False)] = None\n+    hidden_query: Annotated[Union[str, None], Query(include_in_schema=False)] = None,\n ):\n     if hidden_query:\n         return {\"hidden_query\": hidden_query}\n\n@@ -5,7 +5,7 @@ app = FastAPI()\n \n @app.get(\"/items/\")\n async def read_items(\n-    hidden_query: str | None = Query(default=None, include_in_schema=False)\n+    hidden_query: str | None = Query(default=None, include_in_schema=False),\n ):\n     if hidden_query:\n         return {\"hidden_query\": hidden_query}\n\n@@ -68,7 +68,7 @@ async def get_current_user(token: Annotated[str, Depends(oauth2_scheme)]):\n \n \n async def get_current_active_user(\n-    current_user: Annotated[User, Depends(get_current_user)]\n+    current_user: Annotated[User, Depends(get_current_user)],\n ):\n     if current_user.disabled:\n         raise HTTPException(status_code=400, detail=\"Inactive user\")\n@@ -90,6 +90,6 @@ async def login(form_data: Annotated[OAuth2PasswordRequestForm, Depends()]):\n \n @app.get(\"/users/me\")\n async def read_users_me(\n-    current_user: Annotated[User, Depends(get_current_active_user)]\n+    current_user: Annotated[User, Depends(get_current_active_user)],\n ):\n     return current_user\n\n@@ -67,7 +67,7 @@ async def get_current_user(token: Annotated[str, Depends(oauth2_scheme)]):\n \n \n async def get_current_active_user(\n-    current_user: Annotated[User, Depends(get_current_user)]\n+    current_user: Annotated[User, Depends(get_current_user)],\n ):\n     if current_user.disabled:\n         raise HTTPException(status_code=400, detail=\"Inactive user\")\n@@ -89,6 +89,6 @@ async def login(form_data: Annotated[OAuth2PasswordRequestForm, Depends()]):\n \n @app.get(\"/users/me\")\n async def read_users_me(\n-    current_user: Annotated[User, Depends(get_current_active_user)]\n+    current_user: Annotated[User, Depends(get_current_active_user)],\n ):\n     return current_user\n\n@@ -67,7 +67,7 @@ async def get_current_user(token: Annotated[str, Depends(oauth2_scheme)]):\n \n \n async def get_current_active_user(\n-    current_user: Annotated[User, Depends(get_current_user)]\n+    current_user: Annotated[User, Depends(get_current_user)],\n ):\n     if current_user.disabled:\n         raise HTTPException(status_code=400, detail=\"Inactive user\")\n@@ -89,6 +89,6 @@ async def login(form_data: Annotated[OAuth2PasswordRequestForm, Depends()]):\n \n @app.get(\"/users/me\")\n async def read_users_me(\n-    current_user: Annotated[User, Depends(get_current_active_user)]\n+    current_user: Annotated[User, Depends(get_current_active_user)],\n ):\n     return current_user\n\n@@ -114,7 +114,7 @@ async def get_current_active_user(current_user: User = Depends(get_current_user)\n \n @app.post(\"/token\")\n async def login_for_access_token(\n-    form_data: OAuth2PasswordRequestForm = Depends()\n+    form_data: OAuth2PasswordRequestForm = Depends(),\n ) -> Token:\n     user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n     if not user:\n\n@@ -108,7 +108,7 @@ async def get_current_user(token: Annotated[str, Depends(oauth2_scheme)]):\n \n \n async def get_current_active_user(\n-    current_user: Annotated[User, Depends(get_current_user)]\n+    current_user: Annotated[User, Depends(get_current_user)],\n ):\n     if current_user.disabled:\n         raise HTTPException(status_code=400, detail=\"Inactive user\")\n@@ -117,7 +117,7 @@ async def get_current_active_user(\n \n @app.post(\"/token\")\n async def login_for_access_token(\n-    form_data: Annotated[OAuth2PasswordRequestForm, Depends()]\n+    form_data: Annotated[OAuth2PasswordRequestForm, Depends()],\n ) -> Token:\n     user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n     if not user:\n@@ -135,13 +135,13 @@ async def login_for_access_token(\n \n @app.get(\"/users/me/\", response_model=User)\n async def read_users_me(\n-    current_user: Annotated[User, Depends(get_current_active_user)]\n+    current_user: Annotated[User, Depends(get_current_active_user)],\n ):\n     return current_user\n \n \n @app.get(\"/users/me/items/\")\n async def read_own_items(\n-    current_user: Annotated[User, Depends(get_current_active_user)]\n+    current_user: Annotated[User, Depends(get_current_active_user)],\n ):\n     return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n\n@@ -107,7 +107,7 @@ async def get_current_user(token: Annotated[str, Depends(oauth2_scheme)]):\n \n \n async def get_current_active_user(\n-    current_user: Annotated[User, Depends(get_current_user)]\n+    current_user: Annotated[User, Depends(get_current_user)],\n ):\n     if current_user.disabled:\n         raise HTTPException(status_code=400, detail=\"Inactive user\")\n@@ -116,7 +116,7 @@ async def get_current_active_user(\n \n @app.post(\"/token\")\n async def login_for_access_token(\n-    form_data: Annotated[OAuth2PasswordRequestForm, Depends()]\n+    form_data: Annotated[OAuth2PasswordRequestForm, Depends()],\n ) -> Token:\n     user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n     if not user:\n@@ -134,13 +134,13 @@ async def login_for_access_token(\n \n @app.get(\"/users/me/\", response_model=User)\n async def read_users_me(\n-    current_user: Annotated[User, Depends(get_current_active_user)]\n+    current_user: Annotated[User, Depends(get_current_active_user)],\n ):\n     return current_user\n \n \n @app.get(\"/users/me/items/\")\n async def read_own_items(\n-    current_user: Annotated[User, Depends(get_current_active_user)]\n+    current_user: Annotated[User, Depends(get_current_active_user)],\n ):\n     return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n\n@@ -107,7 +107,7 @@ async def get_current_user(token: Annotated[str, Depends(oauth2_scheme)]):\n \n \n async def get_current_active_user(\n-    current_user: Annotated[User, Depends(get_current_user)]\n+    current_user: Annotated[User, Depends(get_current_user)],\n ):\n     if current_user.disabled:\n         raise HTTPException(status_code=400, detail=\"Inactive user\")\n@@ -116,7 +116,7 @@ async def get_current_active_user(\n \n @app.post(\"/token\")\n async def login_for_access_token(\n-    form_data: Annotated[OAuth2PasswordRequestForm, Depends()]\n+    form_data: Annotated[OAuth2PasswordRequestForm, Depends()],\n ) -> Token:\n     user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n     if not user:\n@@ -134,13 +134,13 @@ async def login_for_access_token(\n \n @app.get(\"/users/me/\", response_model=User)\n async def read_users_me(\n-    current_user: Annotated[User, Depends(get_current_active_user)]\n+    current_user: Annotated[User, Depends(get_current_active_user)],\n ):\n     return current_user\n \n \n @app.get(\"/users/me/items/\")\n async def read_own_items(\n-    current_user: Annotated[User, Depends(get_current_active_user)]\n+    current_user: Annotated[User, Depends(get_current_active_user)],\n ):\n     return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n\n@@ -113,7 +113,7 @@ async def get_current_active_user(current_user: User = Depends(get_current_user)\n \n @app.post(\"/token\")\n async def login_for_access_token(\n-    form_data: OAuth2PasswordRequestForm = Depends()\n+    form_data: OAuth2PasswordRequestForm = Depends(),\n ) -> Token:\n     user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n     if not user:\n\n@@ -136,7 +136,7 @@ async def get_current_user(\n \n \n async def get_current_active_user(\n-    current_user: User = Security(get_current_user, scopes=[\"me\"])\n+    current_user: User = Security(get_current_user, scopes=[\"me\"]),\n ):\n     if current_user.disabled:\n         raise HTTPException(status_code=400, detail=\"Inactive user\")\n@@ -145,7 +145,7 @@ async def get_current_active_user(\n \n @app.post(\"/token\")\n async def login_for_access_token(\n-    form_data: OAuth2PasswordRequestForm = Depends()\n+    form_data: OAuth2PasswordRequestForm = Depends(),\n ) -> Token:\n     user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n     if not user:\n@@ -165,7 +165,7 @@ async def read_users_me(current_user: User = Depends(get_current_active_user)):\n \n @app.get(\"/users/me/items/\")\n async def read_own_items(\n-    current_user: User = Security(get_current_active_user, scopes=[\"items\"])\n+    current_user: User = Security(get_current_active_user, scopes=[\"items\"]),\n ):\n     return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n \n\n@@ -137,7 +137,7 @@ async def get_current_user(\n \n \n async def get_current_active_user(\n-    current_user: Annotated[User, Security(get_current_user, scopes=[\"me\"])]\n+    current_user: Annotated[User, Security(get_current_user, scopes=[\"me\"])],\n ):\n     if current_user.disabled:\n         raise HTTPException(status_code=400, detail=\"Inactive user\")\n@@ -146,7 +146,7 @@ async def get_current_active_user(\n \n @app.post(\"/token\")\n async def login_for_access_token(\n-    form_data: Annotated[OAuth2PasswordRequestForm, Depends()]\n+    form_data: Annotated[OAuth2PasswordRequestForm, Depends()],\n ) -> Token:\n     user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n     if not user:\n@@ -161,14 +161,14 @@ async def login_for_access_token(\n \n @app.get(\"/users/me/\", response_model=User)\n async def read_users_me(\n-    current_user: Annotated[User, Depends(get_current_active_user)]\n+    current_user: Annotated[User, Depends(get_current_active_user)],\n ):\n     return current_user\n \n \n @app.get(\"/users/me/items/\")\n async def read_own_items(\n-    current_user: Annotated[User, Security(get_current_active_user, scopes=[\"items\"])]\n+    current_user: Annotated[User, Security(get_current_active_user, scopes=[\"items\"])],\n ):\n     return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n \n\n@@ -136,7 +136,7 @@ async def get_current_user(\n \n \n async def get_current_active_user(\n-    current_user: Annotated[User, Security(get_current_user, scopes=[\"me\"])]\n+    current_user: Annotated[User, Security(get_current_user, scopes=[\"me\"])],\n ):\n     if current_user.disabled:\n         raise HTTPException(status_code=400, detail=\"Inactive user\")\n@@ -145,7 +145,7 @@ async def get_current_active_user(\n \n @app.post(\"/token\")\n async def login_for_access_token(\n-    form_data: Annotated[OAuth2PasswordRequestForm, Depends()]\n+    form_data: Annotated[OAuth2PasswordRequestForm, Depends()],\n ) -> Token:\n     user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n     if not user:\n@@ -160,14 +160,14 @@ async def login_for_access_token(\n \n @app.get(\"/users/me/\", response_model=User)\n async def read_users_me(\n-    current_user: Annotated[User, Depends(get_current_active_user)]\n+    current_user: Annotated[User, Depends(get_current_active_user)],\n ):\n     return current_user\n \n \n @app.get(\"/users/me/items/\")\n async def read_own_items(\n-    current_user: Annotated[User, Security(get_current_active_user, scopes=[\"items\"])]\n+    current_user: Annotated[User, Security(get_current_active_user, scopes=[\"items\"])],\n ):\n     return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n \n\n@@ -136,7 +136,7 @@ async def get_current_user(\n \n \n async def get_current_active_user(\n-    current_user: Annotated[User, Security(get_current_user, scopes=[\"me\"])]\n+    current_user: Annotated[User, Security(get_current_user, scopes=[\"me\"])],\n ):\n     if current_user.disabled:\n         raise HTTPException(status_code=400, detail=\"Inactive user\")\n@@ -145,7 +145,7 @@ async def get_current_active_user(\n \n @app.post(\"/token\")\n async def login_for_access_token(\n-    form_data: Annotated[OAuth2PasswordRequestForm, Depends()]\n+    form_data: Annotated[OAuth2PasswordRequestForm, Depends()],\n ) -> Token:\n     user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n     if not user:\n@@ -160,14 +160,14 @@ async def login_for_access_token(\n \n @app.get(\"/users/me/\", response_model=User)\n async def read_users_me(\n-    current_user: Annotated[User, Depends(get_current_active_user)]\n+    current_user: Annotated[User, Depends(get_current_active_user)],\n ):\n     return current_user\n \n \n @app.get(\"/users/me/items/\")\n async def read_own_items(\n-    current_user: Annotated[User, Security(get_current_active_user, scopes=[\"items\"])]\n+    current_user: Annotated[User, Security(get_current_active_user, scopes=[\"items\"])],\n ):\n     return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n \n\n@@ -135,7 +135,7 @@ async def get_current_user(\n \n \n async def get_current_active_user(\n-    current_user: User = Security(get_current_user, scopes=[\"me\"])\n+    current_user: User = Security(get_current_user, scopes=[\"me\"]),\n ):\n     if current_user.disabled:\n         raise HTTPException(status_code=400, detail=\"Inactive user\")\n@@ -144,7 +144,7 @@ async def get_current_active_user(\n \n @app.post(\"/token\")\n async def login_for_access_token(\n-    form_data: OAuth2PasswordRequestForm = Depends()\n+    form_data: OAuth2PasswordRequestForm = Depends(),\n ) -> Token:\n     user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n     if not user:\n@@ -164,7 +164,7 @@ async def read_users_me(current_user: User = Depends(get_current_active_user)):\n \n @app.get(\"/users/me/items/\")\n async def read_own_items(\n-    current_user: User = Security(get_current_active_user, scopes=[\"items\"])\n+    current_user: User = Security(get_current_active_user, scopes=[\"items\"]),\n ):\n     return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n \n\n@@ -136,7 +136,7 @@ async def get_current_user(\n \n \n async def get_current_active_user(\n-    current_user: User = Security(get_current_user, scopes=[\"me\"])\n+    current_user: User = Security(get_current_user, scopes=[\"me\"]),\n ):\n     if current_user.disabled:\n         raise HTTPException(status_code=400, detail=\"Inactive user\")\n@@ -145,7 +145,7 @@ async def get_current_active_user(\n \n @app.post(\"/token\")\n async def login_for_access_token(\n-    form_data: OAuth2PasswordRequestForm = Depends()\n+    form_data: OAuth2PasswordRequestForm = Depends(),\n ) -> Token:\n     user = authenticate_user(fake_users_db, form_data.username, form_data.password)\n     if not user:\n@@ -165,7 +165,7 @@ async def read_users_me(current_user: User = Depends(get_current_active_user)):\n \n @app.get(\"/users/me/items/\")\n async def read_own_items(\n-    current_user: User = Security(get_current_active_user, scopes=[\"items\"])\n+    current_user: User = Security(get_current_active_user, scopes=[\"items\"]),\n ):\n     return [{\"item_id\": \"Foo\", \"owner\": current_user.username}]\n \n\n@@ -10,7 +10,7 @@ security = HTTPBasic()\n \n \n def get_current_username(\n-    credentials: Annotated[HTTPBasicCredentials, Depends(security)]\n+    credentials: Annotated[HTTPBasicCredentials, Depends(security)],\n ):\n     current_username_bytes = credentials.username.encode(\"utf8\")\n     correct_username_bytes = b\"stanleyjobson\"\n\n@@ -10,7 +10,7 @@ security = HTTPBasic()\n \n \n def get_current_username(\n-    credentials: Annotated[HTTPBasicCredentials, Depends(security)]\n+    credentials: Annotated[HTTPBasicCredentials, Depends(security)],\n ):\n     current_username_bytes = credentials.username.encode(\"utf8\")\n     correct_username_bytes = b\"stanleyjobson\"\n\n@@ -743,7 +743,7 @@ async def request_body_to_args(\n                 results: List[Union[bytes, str]] = []\n \n                 async def process_fn(\n-                    fn: Callable[[], Coroutine[Any, Any, Any]]\n+                    fn: Callable[[], Coroutine[Any, Any, Any]],\n                 ) -> None:\n                     result = await fn()\n                     results.append(result)  # noqa: B023\n\n@@ -86,7 +86,7 @@ ENCODERS_BY_TYPE: Dict[Type[Any], Callable[[Any], Any]] = {\n \n \n def generate_encoders_by_class_tuples(\n-    type_encoder_map: Dict[Any, Callable[[Any], Any]]\n+    type_encoder_map: Dict[Any, Callable[[Any], Any]],\n ) -> Dict[Callable[[Any], Any], Tuple[Any, ...]]:\n     encoders_by_class_tuples: Dict[Callable[[Any], Any], Tuple[Any, ...]] = defaultdict(\n         tuple\n\n@@ -9,14 +9,14 @@ app = FastAPI()\n \n @app.get(\"/hidden_cookie\")\n async def hidden_cookie(\n-    hidden_cookie: Optional[str] = Cookie(default=None, include_in_schema=False)\n+    hidden_cookie: Optional[str] = Cookie(default=None, include_in_schema=False),\n ):\n     return {\"hidden_cookie\": hidden_cookie}\n \n \n @app.get(\"/hidden_header\")\n async def hidden_header(\n-    hidden_header: Optional[str] = Header(default=None, include_in_schema=False)\n+    hidden_header: Optional[str] = Header(default=None, include_in_schema=False),\n ):\n     return {\"hidden_header\": hidden_header}\n \n@@ -28,7 +28,7 @@ async def hidden_path(hidden_path: str = Path(include_in_schema=False)):\n \n @app.get(\"/hidden_query\")\n async def hidden_query(\n-    hidden_query: Optional[str] = Query(default=None, include_in_schema=False)\n+    hidden_query: Optional[str] = Query(default=None, include_in_schema=False),\n ):\n     return {\"hidden_query\": hidden_query}\n \n\n@@ -14,7 +14,7 @@ def get_client():\n \n         @app.post(\"/items/\")\n         async def read_items(\n-            q: Annotated[str | None, Form(regex=\"^fixedquery$\")] = None\n+            q: Annotated[str | None, Form(regex=\"^fixedquery$\")] = None,\n         ):\n             if q:\n                 return f\"Hello {q}\"\n\n@@ -14,7 +14,7 @@ def get_client():\n \n         @app.get(\"/items/\")\n         async def read_items(\n-            q: Annotated[str | None, Query(regex=\"^fixedquery$\")] = None\n+            q: Annotated[str | None, Query(regex=\"^fixedquery$\")] = None,\n         ):\n             if q:\n                 return f\"Hello {q}\"\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
