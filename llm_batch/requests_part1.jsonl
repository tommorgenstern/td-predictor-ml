{"custom_id": "requests#0477018761c67152cdcc0b83d56f27e701e65b9e", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 48 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 48 | Churn Cumulative: 48 | Contributors (this commit): 1 | Commits (past 90d): 1 | Contributors (cumulative): 1 | DMM Complexity: 1.0\n\nDIFF:\n@@ -0,0 +1,48 @@\n+#!/usr/bin/env python\n+# -*- coding: utf-8 -*-\n+\n+import os\n+import sys\n+\n+from distutils.core import setup\n+\n+\n+def publish():\n+\t\"\"\"Publish to PyPi\"\"\"\n+\tos.system(\"python setup.py sdist upload\")\n+\n+if sys.argv[-1] == \"publish\":\n+\tpublish()\n+\tsys.exit()\n+\n+required = []\n+\n+# if python > 2.6, require simplejson\n+\n+setup(\n+\tname='requests',\n+\tversion='0.0.1',\n+\tdescription='Python HTTP Library that\\'s actually usable.',\n+\tlong_description=open('README.rst').read() + '\\n\\n' +\n+\t                 open('HISTORY.rst').read(),\n+\tauthor='Kenneth Reitz',\n+\tauthor_email='me@kennethreitz.com',\n+\turl='https://github.com/kennethreitz/requests',\n+\tpackages= [\n+\t\t'requests',\n+\t],\n+\tinstall_requires=required,\n+\tlicense='ISC',\n+\tclassifiers=(\n+\t\t# 'Development Status :: 5 - Production/Stable',\n+\t\t'Intended Audience :: Developers',\n+\t\t'Natural Language :: English',\n+\t\t'License :: OSI Approved :: MIT License',\n+\t\t'Programming Language :: Python',\n+        # 'Programming Language :: Python :: 2.5',\n+        'Programming Language :: Python :: 2.6',\n+\t\t'Programming Language :: Python :: 2.7',\n+\t\t# 'Programming Language :: Python :: 3.0',\n+\t\t# 'Programming Language :: Python :: 3.1',\n+\t),\n+)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#75b499dd046060021db0c7a772dd34df9374a30b", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 4 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 4 | Contributors (this commit): 1 | Commits (past 90d): 1 | Contributors (cumulative): 1 | DMM Complexity: None\n\nDIFF:\n@@ -0,0 +1,4 @@\n+#!/usr/bin/env python\n+# -*- coding: utf-8 -*-\n+\n+import unittest\n\\ No newline at end of file\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#853a4fd04ce3f4644e204418ee2cd694d9f29180", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 4 | Lines Deleted: 0 | Files Changed: 2 | Hunks: 2 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 4 | Contributors (this commit): 1 | Commits (past 90d): 2 | Contributors (cumulative): 2 | DMM Complexity: None\n\nDIFF:\n@@ -0,0 +1,3 @@\n+# -*- coding: utf-8 -*-\n+\n+from core import *\n\\ No newline at end of file\n\n@@ -0,0 +1 @@\n+# -*- coding: utf-8 -*-\n\\ No newline at end of file\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#d8b19573f38aa84db95a7e4d1f1c0a2fa26517eb", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 55 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 5 | Complexity Δ (Sum/Max): 5/5 | Churn Δ: 55 | Churn Cumulative: 56 | Contributors (this commit): 1 | Commits (past 90d): 2 | Contributors (cumulative): 1 | DMM Complexity: 1.0\n\nDIFF:\n@@ -1 +1,56 @@\n # -*- coding: utf-8 -*-\n+\n+\"\"\"\n+    requests.core\n+    ~~~~~~~~~~~~~\n+\n+    This module implements the main Requests system.\n+\n+    :copyright: (c) 2011 by Kenneth Reitz.\n+    :license: ISC, see LICENSE for more details.\n+\"\"\"\n+import urllib2\n+\n+\n+__title__ = 'convore'\n+__version__ = '0.0.1'\n+__build__ = 0x000001\n+__author__ = 'Kenneth Reitz'\n+__license__ = 'ISC'\n+__copyright__ = 'Copyright 2011 Kenneth Reitz'\n+\n+\n+class Request(object):\n+\t\"\"\"The :class:`Request` object. It's awesome.\n+\t\"\"\"\n+\tpass\n+\t\n+\t\n+class Response(object):\n+\t\"\"\"The :class:`Request` object. It's awesome.\n+\t\"\"\"\n+\t\n+class AuthObject(object):\n+\t\"\"\"The :class:`AuthObject` is a simple HTTP Authentication token.\n+\t\n+\t:param username: Username to authenticate with.\n+    :param password: Password for given username.\n+\t \"\"\"\n+\t\n+\tdef __init__(self, username, password):\n+\t\tself.username = username\n+\t\tself.password = password\n+\n+\n+def get():\n+\tpass\n+\n+def post():\n+\tpass\n+\t\n+def put():\n+\tpass\n+\t\n+def delete():\n+\tpass\n+\t\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#b72e1d19aff997d00ef617a3aa0eea8ccdcc3984", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 42 | Lines Deleted: 4 | Files Changed: 1 | Hunks: 10 | Methods Changed: 13 | Complexity Δ (Sum/Max): 8/8 | Churn Δ: 46 | Churn Cumulative: 102 | Contributors (this commit): 1 | Commits (past 90d): 3 | Contributors (cumulative): 1 | DMM Complexity: 1.0\n\nDIFF:\n@@ -9,6 +9,7 @@\n     :copyright: (c) 2011 by Kenneth Reitz.\n     :license: ISC, see LICENSE for more details.\n \"\"\"\n+import urllib\n import urllib2\n \n \n@@ -20,16 +21,41 @@ __license__ = 'ISC'\n __copyright__ = 'Copyright 2011 Kenneth Reitz'\n \n \n+AUTHOAUTHS = []\n+\n+\n class Request(object):\n \t\"\"\"The :class:`Request` object. It's awesome.\n \t\"\"\"\n+\t\n+\t_METHODS = ('get', 'put', 'post', 'delete')\n+\t\n+\tdef __init__(self):\n+\t\tself.headers = dict()\n+\t\tself.method = None\n+\t\tself.response = None\n+\t\n+\tdef __setattr__(self, key, val):\n+\t\tif key == 'method':\n+\t\t\tif not val.lower() in _METHODS:\n+\t\t\t\traise InvalidMethod()\n+\t\t\n+\tdef send(self):\n \t\tpass\n+\t\tset self.response()\n+\t\t# return True / False\n \t\t\n \t\n class Response(object):\n \t\"\"\"The :class:`Request` object. It's awesome.\n \t\"\"\"\n \t\n+\tdef __init__(self):\n+\t\tself.content = None\n+\t\tself.status_code = None\n+\t\tself.headers = dict()\n+\t\t\n+\t\n class AuthObject(object):\n \t\"\"\"The :class:`AuthObject` is a simple HTTP Authentication token.\n \t\n@@ -42,15 +68,27 @@ class AuthObject(object):\n \t\tself.password = password\n \n \n-def get():\n+def get(url, params={}, headers={}, auth=None):\n \tpass\n \n-def post():\n+def head(url, params={}, headers={}, auth=None):\n \tpass\n \n-def put():\n+def post(url, params={}, headers={}, auth=None):\n \tpass\n \t\n-def delete():\n+def put(url, data='', headers={}, auth=None):\n \tpass\n \t\n+def delete(url, params={}, headers={}, auth=None):\n+\tpass\n+\n+\n+def add_autoauth(url, authobject):\n+\tglobal AUTHOAUTHS\n+\t\n+\tAUTHOAUTHS.append((url, authobject))\n+\t\n+\t\n+class InvalidMethod(Exception):\n+\t\"\"\"An innappropriate method was attempted.\"\"\"\n\\ No newline at end of file\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#54240b4811b66dc7d5c2738b91994c21023f0e9e", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 25 | Lines Deleted: 4 | Files Changed: 1 | Hunks: 11 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 29 | Churn Cumulative: 131 | Contributors (this commit): 1 | Commits (past 90d): 4 | Contributors (cumulative): 1 | DMM Complexity: 0.0\n\nDIFF:\n@@ -9,10 +9,13 @@\n     :copyright: (c) 2011 by Kenneth Reitz.\n     :license: ISC, see LICENSE for more details.\n \"\"\"\n+\n+import httplib\n import urllib\n import urllib2\n \n \n+\n __title__ = 'convore'\n __version__ = '0.0.1'\n __build__ = 0x000001\n@@ -41,9 +44,10 @@ class Request(object):\n \t\t\t\traise InvalidMethod()\n \t\t\n \tdef send(self):\n-\t\tpass\n-\t\tset self.response()\n+\t\t\"\"\"Sends the request. \"\"\"\n+\t\t#set self.response\n \t\t# return True / False\n+\t\tpass\n \t\t\n \t\n class Response(object):\n@@ -70,18 +74,23 @@ class AuthObject(object):\n \n def get(url, params={}, headers={}, auth=None):\n \tpass\n+\t# return response object\n \n def head(url, params={}, headers={}, auth=None):\n \tpass\n+\t# return response object\n \n def post(url, params={}, headers={}, auth=None):\n \tpass\n+\t# return response object\n \t\n def put(url, data='', headers={}, auth=None):\n \tpass\n+\t# return response object\n \t\n def delete(url, params={}, headers={}, auth=None):\n \tpass\n+\t# return response object\n \n \n def add_autoauth(url, authobject):\n@@ -90,5 +99,17 @@ def add_autoauth(url, authobject):\n \tAUTHOAUTHS.append((url, authobject))\n \t\n \n-class InvalidMethod(Exception):\n-\t\"\"\"An innappropriate method was attempted.\"\"\"\n\\ No newline at end of file\n+\n+\n+class RequestException(Exception):\n+\t\"\"\"There was an ambiguous exception that occured while handling your request.\"\"\"\n+\n+class AuthenticationError(RequestException):\n+\t\"\"\"The authentication credentials provided were invalid.\"\"\"\n+\t\n+class URLRequired(RequestException):\n+\t\"\"\"A valid URL is required to make a request.\"\"\"\n+\t\n+class InvalidMethod(RequestException):\n+\t\"\"\"An inappropriate method was attempted.\"\"\"\n+\t\n\\ No newline at end of file\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#ef9bae8d9f2dc605d4fbcdf24256b6cc82612a2d", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 41 | Lines Deleted: 7 | Files Changed: 1 | Hunks: 19 | Methods Changed: 10 | Complexity Δ (Sum/Max): 5/5 | Churn Δ: 48 | Churn Cumulative: 179 | Contributors (this commit): 1 | Commits (past 90d): 5 | Contributors (cumulative): 1 | DMM Complexity: 1.0\n\nDIFF:\n@@ -14,9 +14,9 @@ import httplib\n import urllib\n import urllib2\n \n+import requests.handler\n \n-\n-__title__ = 'convore'\n+__title__ = 'requests'\n __version__ = '0.0.1'\n __build__ = 0x000001\n __author__ = 'Kenneth Reitz'\n@@ -31,12 +31,13 @@ class Request(object):\n \t\"\"\"The :class:`Request` object. It's awesome.\n \t\"\"\"\n \t\n-\t_METHODS = ('get', 'put', 'post', 'delete')\n+\t_METHODS = ('get', 'head', 'put', 'post', 'delete')\n \t\n \tdef __init__(self):\n \t\tself.headers = dict()\n \t\tself.method = None\n \t\tself.response = None\n+\t\tself.auth = None\n \t\n \tdef __setattr__(self, key, val):\n \t\tif key == 'method':\n@@ -47,7 +48,6 @@ class Request(object):\n \t\t\"\"\"Sends the request. \"\"\"\n \t\t#set self.response\n \t\t# return True / False\n-\t\tpass\n \t\t\n \n class Response(object):\n@@ -72,34 +72,68 @@ class AuthObject(object):\n \t\tself.password = password\n \n \n+\n def get(url, params={}, headers={}, auth=None):\n-\tpass\n+\t\"\"\"Sends a GET request. Returns :class:`Response` object.\n+\t\"\"\"\n+\tr = Request()\n+\t\n+\tr.url = url\n+\tr.headers = headers\n+\tr.auth = _detect_auth(url, auth)\n+\tr.method = 'GET'\n+\tr.send()\n+\t\n+\treturn r.response\n+\t\n \t# return response object\n \n+\n def head(url, params={}, headers={}, auth=None):\n+\t\"\"\"Sends a HEAD request. Returns :class:`Response` object.\n+\t\"\"\"\n \tpass\n \t# return response object\n \n+\n def post(url, params={}, headers={}, auth=None):\n+\t\"\"\"Sends a POST request. Returns :class:`Response` object.\n+\t\"\"\"\n \tpass\n \t# return response object\n \t\n+\t\n def put(url, data='', headers={}, auth=None):\n+\t\"\"\"Sends a PUT request. Returns :class:`Response` object.\n+\t\"\"\"\n \tpass\n \t# return response object\n \n+\t\n def delete(url, params={}, headers={}, auth=None):\n+\t\"\"\"Sends a DELETE request. Returns :class:`Response` object.\n+\t\"\"\"\n \tpass\n \t# return response object\n \n \n def add_autoauth(url, authobject):\n-\tglobal AUTHOAUTHS\n+\tglobal AUTOAUTHS\n \t\n-\tAUTHOAUTHS.append((url, authobject))\n+\tAUTOAUTHS.append((url, authobject))\n \n \n+def _detect_auth(url, auth):\n \n+\treturn _get_autoauth(url) if not auth else auth\n+\n+\t\n+def _get_autoauth(url):\n+\tfor (authauth_url, auth) in AUTOAUTHS:\n+\t\tif autoauth_url in url: \n+\t\t\treturn auth\n+\t\t\t\n+\treturn None\n \n class RequestException(Exception):\n \t\"\"\"There was an ambiguous exception that occured while handling your request.\"\"\"\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#32cc197a81502c30715c9e164006dce6debcd1bf", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 53 | Lines Deleted: 13 | Files Changed: 1 | Hunks: 18 | Methods Changed: 8 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 66 | Churn Cumulative: 245 | Contributors (this commit): 1 | Commits (past 90d): 6 | Contributors (cumulative): 1 | DMM Complexity: 1.0\n\nDIFF:\n@@ -13,8 +13,8 @@\n import httplib\n import urllib\n import urllib2\n+import urlparse\n \n-import requests.handler\n \n __title__ = 'requests'\n __version__ = '0.0.1'\n@@ -24,7 +24,7 @@ __license__ = 'ISC'\n __copyright__ = 'Copyright 2011 Kenneth Reitz'\n \n \n-AUTHOAUTHS = []\n+AUTOAUTHS = []\n \n \n class Request(object):\n@@ -36,17 +36,22 @@ class Request(object):\n \tdef __init__(self):\n \t\tself.headers = dict()\n \t\tself.method = None\n-\t\tself.response = None\n+\t\tself.response = Response()\n \t\tself.auth = None\n \t\t\n-\tdef __setattr__(self, key, val):\n-\t\tif key == 'method':\n-\t\t\tif not val.lower() in _METHODS:\n+\t\n+\tdef __setattr__(self, name, value):\n+\t\tif (name == 'method') and (value):\n+\t\t\tif not value.lower() in self._METHODS:\n \t\t\t\traise InvalidMethod()\n \t\t\n+\t\tobject.__setattr__(self, name, value)\n+\t\t\n+\t\t\n \tdef send(self):\n \t\t\"\"\"Sends the request. \"\"\"\n \t\t#set self.response\n+\n \t\t# return True / False\n \t\t\n \n@@ -78,44 +83,79 @@ def get(url, params={}, headers={}, auth=None):\n \t\"\"\"\n \tr = Request()\n \t\n+\tr.method = 'GET'\n \tr.url = url\n \tr.headers = headers\n \tr.auth = _detect_auth(url, auth)\n-\tr.method = 'GET'\n+\t\n \tr.send()\n \t\n \treturn r.response\n \n-\t# return response object\n-\n \n def head(url, params={}, headers={}, auth=None):\n \t\"\"\"Sends a HEAD request. Returns :class:`Response` object.\n \t\"\"\"\n-\tpass\n+\tr = Request()\n+\t\n+\tr.method = 'HEAD'\n \t# return response object\n \t\n+\tr.headers = headers\n+\tr.auth = _detect_auth(url, auth)\n+\t\n+\tr.send()\n+\t\n+\treturn r.response\n+\n \n def post(url, params={}, headers={}, auth=None):\n \t\"\"\"Sends a POST request. Returns :class:`Response` object.\n \t\"\"\"\n-\tpass\n+\tr = Request()\n+\t\n+\tr.method = 'POST'\n \t# return response object\n \t\n+\tr.headers = headers\n+\tr.auth = _detect_auth(url, auth)\n+\t\n+\tr.send()\n+\t\n+\treturn r.response\n+\t\n \t\n def put(url, data='', headers={}, auth=None):\n \t\"\"\"Sends a PUT request. Returns :class:`Response` object.\n \t\"\"\"\n-\tpass\n+\tr = Request()\n+\t\n+\tr.method = 'PUT'\n \t# return response object\n \t\n+\tr.headers = headers\n+\tr.auth = _detect_auth(url, auth)\n+\t\n+\tr.send()\n+\t\n+\treturn r.response\n+\n \t\n def delete(url, params={}, headers={}, auth=None):\n \t\"\"\"Sends a DELETE request. Returns :class:`Response` object.\n \t\"\"\"\n-\tpass\n+\tr = Request()\n+\t\n+\tr.method = 'DELETE'\n \t# return response object\n \t\n+\tr.headers = headers\n+\tr.auth = _detect_auth(url, auth)\n+\t\n+\tr.send()\n+\t\n+\treturn r.response\n+\n \n def add_autoauth(url, authobject):\n \tglobal AUTOAUTHS\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#49f915fb90f135082a83f64a21cc901d0b0e4d15", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 7 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 7 | Churn Cumulative: 11 | Contributors (this commit): 1 | Commits (past 90d): 2 | Contributors (cumulative): 1 | DMM Complexity: None\n\nDIFF:\n@@ -2,3 +2,10 @@\n # -*- coding: utf-8 -*-\n \n import unittest\n+\n+import requests\n+\n+print requests.get('http://kennethreitz.com').headers\n+\n+\n+r = requests.Request()\n\\ No newline at end of file\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#af272d58276a9d1415a563e4ac763a6207742342", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 37 | Lines Deleted: 3 | Files Changed: 1 | Hunks: 4 | Methods Changed: 3 | Complexity Δ (Sum/Max): 16/16 | Churn Δ: 40 | Churn Cumulative: 285 | Contributors (this commit): 1 | Commits (past 90d): 7 | Contributors (cumulative): 1 | DMM Complexity: 0.08\n\nDIFF:\n@@ -36,8 +36,11 @@ class Request(object):\n \tdef __init__(self):\n \t\tself.headers = dict()\n \t\tself.method = None\n+\t\tself.params = {}\n+\t\tself.data = None\n \t\tself.response = Response()\n \t\tself.auth = None\n+\t\tself.sent = False\n \t\t\n \t\n \tdef __setattr__(self, name, value):\n@@ -48,11 +51,42 @@ class Request(object):\n \t\tobject.__setattr__(self, name, value)\n \t\t\n \t\t\n-\tdef send(self):\n-\t\t\"\"\"Sends the request. \"\"\"\n+\tdef send(self, anyway=False):\n+\t\t\"\"\"Sends the request. \n+\t\t\n+\t\t   :param anyway: If True, request will be sent, even if it has already been sent.\n+\t\t\"\"\"\n+\t\t\n+\t\tif self.method.lower() == 'get':\n+\t\t\tif (not self.sent) or anyway:\n+\t\t\t\tr = urllib.urlopen('http://kennethreitz.com')\n+\t\t\t\tself.response.headers = r.headers.dict\n+\t\t\t\tself.response.status_code = r.code\n+\t\t\t\tself.response.content =  r.read()\n+\t\t\t\n+\t\t\t\tsuccess = True\n+\t\t\t\n+\t\telif self.method.lower() == 'head':\n+\t\t\tif (not self.sent) or anyway:\n+\t\t\t\tpass\n+\t\t\n+\t\telif self.method.lower() == 'put':\n+\t\t\tif (not self.sent) or anyway:\n+\t\t\t\tpass\n+\t\t\t\n+\t\telif self.method.lower() == 'post':\n+\t\t\tif (not self.sent) or anyway:\n+\t\t\t\tpass\n+\n+\t\telif self.method.lower() == 'delete':\n+\t\t\tif (not self.sent) or anyway:\n+\t\t\t\tpass\n+\t\t\t\n \t\t#set self.response\n \n-\t\t# return True / False\n+\t\tif success:\n+\t\t\tself.sent = True\n+\t\treturn success\n \t\t\n \n class Response(object):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#e9c2b917d2ba340e440f3da35846167c86c610a8", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 38 | Lines Deleted: 3 | Files Changed: 1 | Hunks: 13 | Methods Changed: 2 | Complexity Δ (Sum/Max): 6/6 | Churn Δ: 41 | Churn Cumulative: 326 | Contributors (this commit): 1 | Commits (past 90d): 8 | Contributors (cumulative): 1 | DMM Complexity: 0.08695652173913043\n\nDIFF:\n@@ -51,14 +51,19 @@ class Request(object):\n \t\tobject.__setattr__(self, name, value)\n \t\t\n \t\n+\tdef _checks(self):\n+\t\tpass\n+\t\n \tdef send(self, anyway=False):\n \t\t\"\"\"Sends the request. \n \t\t\n \t\t   :param anyway: If True, request will be sent, even if it has already been sent.\n \t\t\"\"\"\n+\t\tself._checks()\n \t\t\n \t\tif self.method.lower() == 'get':\n \t\t\tif (not self.sent) or anyway:\n+\t\t\t\ttry:\n \t\t\t\t\tr = urllib.urlopen('http://kennethreitz.com')\n \t\t\t\t\tself.response.headers = r.headers.dict\n \t\t\t\t\tself.response.status_code = r.code\n@@ -66,26 +71,56 @@ class Request(object):\n \t\t\t\t\t\n \t\t\t\t\tsuccess = True\n \n+\t\t\t\texcept Exception:\n+\t\t\t\t\traise RequestException\n+\t\t\t\t\n+\t\t\t\n \t\telif self.method.lower() == 'head':\n \t\t\tif (not self.sent) or anyway:\n+\t\t\t\ttry:\n \t\t\t\t\tpass\n \t\t\t\t\t\n+\t\t\t\t\tsuccess = True\n+\n+\t\t\t\texcept Exception:\n+\t\t\t\t\traise RequestException\n+\t\t\n \t\telif self.method.lower() == 'put':\n \t\t\tif (not self.sent) or anyway:\n+\t\t\t\ttry:\n \t\t\t\t\tpass\n \t\t\t\t\t\n+\t\t\t\t\tsuccess = True\n+\n+\t\t\t\texcept Exception:\n+\t\t\t\t\traise RequestException\n+\t\t\t\n \t\telif self.method.lower() == 'post':\n \t\t\tif (not self.sent) or anyway:\n+\t\t\t\ttry:\n \t\t\t\t\tpass\n \t\t\t\t\t\n+\t\t\t\t\tsuccess = True\n+\n+\t\t\t\texcept Exception:\n+\t\t\t\t\traise RequestException\n+\n \t\telif self.method.lower() == 'delete':\n \t\t\tif (not self.sent) or anyway:\n+\t\t\t\ttry:\n \t\t\t\t\tpass\n \t\t\t\t\t\n-\t\t#set self.response\n+\t\t\t\t\tsuccess = True\n+\n+\t\t\t\texcept Exception:\n+\t\t\t\t\traise RequestException\n+\t\t\t\n+\t\telse:\n+\t\t\traise InvalidMethod\n+\n+\t\t\n+\t\tself.sent = True if success else False\n \t\t\n-\t\tif success:\n-\t\t\tself.sent = True\n \t\treturn success\n \t\t\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#44aa6806f3bf2255c151ec2661b8765ca190c0c4", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 40 | Lines Deleted: 13 | Files Changed: 1 | Hunks: 10 | Methods Changed: 6 | Complexity Δ (Sum/Max): 3/3 | Churn Δ: 53 | Churn Cumulative: 379 | Contributors (this commit): 1 | Commits (past 90d): 9 | Contributors (cumulative): 1 | DMM Complexity: 0.23529411764705882\n\nDIFF:\n@@ -34,10 +34,11 @@ class Request(object):\n \t_METHODS = ('get', 'head', 'put', 'post', 'delete')\n \t\n \tdef __init__(self):\n+\t\tself.url = None\n \t\tself.headers = dict()\n \t\tself.method = None\n \t\tself.params = {}\n-\t\tself.data = None\n+\t\tself.data = {}\n \t\tself.response = Response()\n \t\tself.auth = None\n \t\tself.sent = False\n@@ -64,12 +65,7 @@ class Request(object):\n \t\tif self.method.lower() == 'get':\n \t\t\tif (not self.sent) or anyway:\n \t\t\t\ttry:\n-\t\t\t\t\tr = urllib.urlopen('http://kennethreitz.com')\n-\t\t\t\t\tself.response.headers = r.headers.dict\n-\t\t\t\t\tself.response.status_code = r.code\n-\t\t\t\t\tself.response.content =  r.read()\n-\t\t\t\t\t\n-\t\t\t\t\tsuccess = True\n+\t\t\t\t\tpass\n \n \t\t\t\texcept Exception:\n \t\t\t\t\traise RequestException\n@@ -98,7 +94,38 @@ class Request(object):\n \t\telif self.method.lower() == 'post':\n \t\t\tif (not self.sent) or anyway:\n \t\t\t\ttry:\n-\t\t\t\t\tpass\n+\n+\t\t\t\t\treq = urllib2.Request(self.url)\n+\n+\t\t\t\t\tif self.headers:\n+\t\t\t\t\t\tr.headers = self.headers\n+\n+\t\t\t\t\t# url encode form data if it's a dict\n+\t\t\t\t\tif isinstance(self.data, dict):\n+\t\t\t\t\t\treq.data = urllib.urlencode(self.data)\n+\t\t\t\t\telse:\n+\t\t\t\t\t\treq.data = self.data\n+\n+\n+\t\t\t\t\tif self.auth:\n+\n+\t\t\t\t\t\t# create a password manager\n+\t\t\t\t\t\tpassword_mgr = urllib2.HTTPPasswordMgrWithDefaultRealm()\n+\n+\t\t\t\t\t\t# Add the username and password.\n+\t\t\t\t\t\t# If we knew the realm, we could use it instead of ``None``.\n+\t\t\t\t\t\tpassword_mgr.add_password(None, self.url, self.auth.username, self.auth.password)\n+\t\t\t\t\t\thandler = urllib2.HTTPBasicAuthHandler(password_mgr)\n+\t\t\t\t\t\topener = urllib2.build_opener(handler)\n+\n+\t\t\t\t\t\t# use the opener to fetch a URL\n+\t\t\t\t\t\tresp = opener.open(req)\n+\t\t\t\t\telse:\n+\t\t\t\t\t\tresp =  urllib2.urlopen(req)\n+\n+\t\t\t\t\tself.response.status_code = resp.code\n+\t\t\t\t\tself.response.headers = resp.info().dict\n+\t\t\t\t\tself.response.content = resp.read()\n \t\t\t\t\t\n \t\t\t\t\tsuccess = True\n \n@@ -162,14 +189,14 @@ def get(url, params={}, headers={}, auth=None):\n \treturn r.response\n \n \n-def head(url, params={}, headers={}, auth=None):\n+def head(url, data={}, headers={}, auth=None):\n \t\"\"\"Sends a HEAD request. Returns :class:`Response` object.\n \t\"\"\"\n \tr = Request()\n \t\n \tr.method = 'HEAD'\n \t# return response object\n-\t\n+\tr.data = data\n \tr.headers = headers\n \tr.auth = _detect_auth(url, auth)\n \t\n@@ -178,13 +205,14 @@ def head(url, params={}, headers={}, auth=None):\n \treturn r.response\n \n \n-def post(url, params={}, headers={}, auth=None):\n+def post(url, data={}, headers={}, auth=None):\n \t\"\"\"Sends a POST request. Returns :class:`Response` object.\n \t\"\"\"\n \tr = Request()\n \n+\tr.url = url\n \tr.method = 'POST'\n-\t# return response object\n+\tr.data = data\n \t\n \tr.headers = headers\n \tr.auth = _detect_auth(url, auth)\n@@ -255,4 +283,3 @@ class URLRequired(RequestException):\n \t\n class InvalidMethod(RequestException):\n \t\"\"\"An inappropriate method was attempted.\"\"\"\n-\t\n\\ No newline at end of file\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#327d923ce673a13c170446911ceec50529a9253c", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 33 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 3/3 | Churn Δ: 34 | Churn Cumulative: 413 | Contributors (this commit): 1 | Commits (past 90d): 10 | Contributors (cumulative): 1 | DMM Complexity: 0.0\n\nDIFF:\n@@ -65,7 +65,39 @@ class Request(object):\n \t\tif self.method.lower() == 'get':\n \t\t\tif (not self.sent) or anyway:\n \t\t\t\ttry:\n-\t\t\t\t\tpass\n+\t\t\t\t\treq = urllib2.Request(self.url)\n+\n+\t\t\t\t\tif self.headers:\n+\t\t\t\t\t\tr.headers = self.headers\n+\n+\t\t\t\t\t# url encode form data if it's a dict\n+\t\t\t\t\tif isinstance(self.data, dict):\n+\t\t\t\t\t\treq.params = urllib.urlencode(self.params)\n+\t\t\t\t\telse:\n+\t\t\t\t\t\treq.params = self.paams\n+\n+\t\t\t\t\tif self.auth:\n+\n+\t\t\t\t\t\t# create a password manager\n+\t\t\t\t\t\tpassword_mgr = urllib2.HTTPPasswordMgrWithDefaultRealm()\n+\n+\t\t\t\t\t\t# Add the username and password.\n+\t\t\t\t\t\t# If we knew the realm, we could use it instead of ``None``.\n+\t\t\t\t\t\tpassword_mgr.add_password(None, self.url, self.auth.username, self.auth.password)\n+\t\t\t\t\t\thandler = urllib2.HTTPBasicAuthHandler(password_mgr)\n+\t\t\t\t\t\topener = urllib2.build_opener(handler)\n+\n+\t\t\t\t\t\t# use the opener to fetch a URL\n+\t\t\t\t\t\tresp = opener.open(req)\n+\t\t\t\t\telse:\n+\t\t\t\t\t\tresp =  urllib2.urlopen(req)\n+\n+\t\t\t\t\tself.response.status_code = resp.code\n+\t\t\t\t\tself.response.headers = resp.info().dict\n+\t\t\t\t\tself.response.content = resp.read()\n+\n+\t\t\t\t\tsuccess = True\n+\n \n \t\t\t\texcept Exception:\n \t\t\t\t\traise RequestException\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#4f9d598ff486396d9ad45c7e402abe099dec8f4a", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 33 | Lines Deleted: 24 | Files Changed: 1 | Hunks: 6 | Methods Changed: 3 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 57 | Churn Cumulative: 470 | Contributors (this commit): 1 | Commits (past 90d): 11 | Contributors (cumulative): 1 | DMM Complexity: 1.0\n\nDIFF:\n@@ -55,6 +55,26 @@ class Request(object):\n \tdef _checks(self):\n \t\tpass\n \n+\t\n+\tdef _get_opener(self):\n+\t\t\"\"\" Creates appropriate opener object for urllib2.\n+\t\t\"\"\"\n+\t\t\n+\t\tif self.auth:\n+\n+\t\t\t# create a password manager\n+\t\t\tauthr = urllib2.HTTPPasswordMgrWithDefaultRealm()\n+\n+\t\t\tauthr.add_password(None, self.url, self.auth.username, self.auth.password)\n+\t\t\thandler = urllib2.HTTPBasicAuthHandler(authr)\n+\t\t\topener = urllib2.build_opener(handler)\n+\n+\t\t\t# use the opener to fetch a URL\n+\t\t\treturn opener.open\n+\t\telse:\n+\t\t\treturn urllib2.urlopen\n+\n+\t\n \tdef send(self, anyway=False):\n \t\t\"\"\"Sends the request. \n \t\t\n@@ -65,32 +85,20 @@ class Request(object):\n \t\tif self.method.lower() == 'get':\n \t\t\tif (not self.sent) or anyway:\n \t\t\t\ttry:\n-\t\t\t\t\treq = urllib2.Request(self.url)\n+\t\t\t\t\t# url encode GET params if it's a dict\n+\t\t\t\t\tif isinstance(self.params, dict):\n+\t\t\t\t\t\tparams = urllib.urlencode(self.params)\n+\t\t\t\t\telse:\n+\n+\t\t\t\t\t\tparams = self.params\n+\n+\t\t\t\t\treq = urllib2.Request(\"%s?%s\" % (self.url, params))\n \n \t\t\t\t\tif self.headers:\n-\t\t\t\t\t\tr.headers = self.headers\n+\t\t\t\t\t\treq.headers = self.headers\n \n-\t\t\t\t\t# url encode form data if it's a dict\n-\t\t\t\t\tif isinstance(self.data, dict):\n-\t\t\t\t\t\treq.params = urllib.urlencode(self.params)\n-\t\t\t\t\telse:\n-\t\t\t\t\t\treq.params = self.paams\n-\n-\t\t\t\t\tif self.auth:\n-\n-\t\t\t\t\t\t# create a password manager\n-\t\t\t\t\t\tpassword_mgr = urllib2.HTTPPasswordMgrWithDefaultRealm()\n-\n-\t\t\t\t\t\t# Add the username and password.\n-\t\t\t\t\t\t# If we knew the realm, we could use it instead of ``None``.\n-\t\t\t\t\t\tpassword_mgr.add_password(None, self.url, self.auth.username, self.auth.password)\n-\t\t\t\t\t\thandler = urllib2.HTTPBasicAuthHandler(password_mgr)\n-\t\t\t\t\t\topener = urllib2.build_opener(handler)\n-\n-\t\t\t\t\t\t# use the opener to fetch a URL\n-\t\t\t\t\t\tresp = opener.open(req)\n-\t\t\t\t\telse:\n-\t\t\t\t\t\tresp =  urllib2.urlopen(req)\n+\t\t\t\t\topener = self._get_opener()\n+\t\t\t\t\tresp = opener(req)\n \n \t\t\t\t\tself.response.status_code = resp.code\n \t\t\t\t\tself.response.headers = resp.info().dict\n@@ -99,7 +107,7 @@ class Request(object):\n \t\t\t\t\tsuccess = True\n \n \n-\t\t\t\texcept Exception:\n+\t\t\t\texcept RequestException:\n \t\t\t\t\traise RequestException\n \t\t\t\t\n \t\t\t\n@@ -213,6 +221,7 @@ def get(url, params={}, headers={}, auth=None):\n \t\n \tr.method = 'GET'\n \tr.url = url\n+\tr.params = params\n \tr.headers = headers\n \tr.auth = _detect_auth(url, auth)\n \t\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#871de2ab23a49dd0beaee4cd8742c54038d16e96", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 9 | Lines Deleted: 14 | Files Changed: 1 | Hunks: 8 | Methods Changed: 3 | Complexity Δ (Sum/Max): -2/0 | Churn Δ: 23 | Churn Cumulative: 493 | Contributors (this commit): 1 | Commits (past 90d): 12 | Contributors (cumulative): 1 | DMM Complexity: 1.0\n\nDIFF:\n@@ -82,7 +82,7 @@ class Request(object):\n \t\t\"\"\"\n \t\tself._checks()\n \t\t\n-\t\tif self.method.lower() == 'get':\n+\t\tif self.method.lower() in ('get', 'head'):\n \t\t\tif (not self.sent) or anyway:\n \t\t\t\ttry:\n \t\t\t\t\t# url encode GET params if it's a dict\n@@ -94,6 +94,10 @@ class Request(object):\n \n \t\t\t\t\treq = urllib2.Request(\"%s?%s\" % (self.url, params))\n \n+\t\t\t\t\tif self.method.lower() == 'head':\n+\t\t\t\t\t\treq.get_method = lambda : 'HEAD'\n+\n+\n \t\t\t\t\tif self.headers:\n \t\t\t\t\t\treq.headers = self.headers\n \n@@ -102,25 +106,15 @@ class Request(object):\n \n \t\t\t\t\tself.response.status_code = resp.code\n \t\t\t\t\tself.response.headers = resp.info().dict\n+\t\t\t\t\tif self.method.lower() == 'get':\n \t\t\t\t\t\tself.response.content = resp.read()\n \n \t\t\t\t\tsuccess = True\n \n-\n \t\t\t\texcept RequestException:\n \t\t\t\t\traise RequestException\n \t\t\t\t\n \n-\t\telif self.method.lower() == 'head':\n-\t\t\tif (not self.sent) or anyway:\n-\t\t\t\ttry:\n-\t\t\t\t\tpass\n-\t\t\t\t\t\n-\t\t\t\t\tsuccess = True\n-\n-\t\t\t\texcept Exception:\n-\t\t\t\t\traise RequestException\n-\t\t\n \t\telif self.method.lower() == 'put':\n \t\t\tif (not self.sent) or anyway:\n \t\t\t\ttry:\n@@ -230,14 +224,15 @@ def get(url, params={}, headers={}, auth=None):\n \treturn r.response\n \n \n-def head(url, data={}, headers={}, auth=None):\n+def head(url, params={}, headers={}, auth=None):\n \t\"\"\"Sends a HEAD request. Returns :class:`Response` object.\n \t\"\"\"\n \tr = Request()\n \t\n \tr.method = 'HEAD'\n+\tr.url = url\n \t# return response object\n-\tr.data = data\n+\tr.params = params\n \tr.headers = headers\n \tr.auth = _detect_auth(url, auth)\n \t\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#71df02df2c9ab37a8ee40b31f5e28742d1a6cee8", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 38 | Lines Deleted: 8 | Files Changed: 1 | Hunks: 6 | Methods Changed: 4 | Complexity Δ (Sum/Max): 5/5 | Churn Δ: 46 | Churn Cumulative: 539 | Contributors (this commit): 1 | Commits (past 90d): 13 | Contributors (cumulative): 1 | DMM Complexity: 0.5\n\nDIFF:\n@@ -27,6 +27,19 @@ __copyright__ = 'Copyright 2011 Kenneth Reitz'\n AUTOAUTHS = []\n \n \n+class _Request(urllib2.Request):\n+    def __init__(self, url, data=None, headers={},\n+                 origin_req_host=None, unverifiable=False, method=None):\n+       urllib2.Request.__init__(self, url, data, headers, origin_req_host, unverifiable)\n+       self.method = method\n+\n+    def get_method(self):\n+        if self.method:\n+            return self.method\n+\n+        return urllib2.Request.get_method(self)\n+\n+\n class Request(object):\n \t\"\"\"The :class:`Request` object. It's awesome.\n \t\"\"\"\n@@ -92,11 +105,10 @@ class Request(object):\n \n \t\t\t\t\t\tparams = self.params\n \n-\t\t\t\t\treq = urllib2.Request(\"%s?%s\" % (self.url, params))\n-\n-\t\t\t\t\tif self.method.lower() == 'head':\n-\t\t\t\t\t\treq.get_method = lambda : 'HEAD'\n-\n+\t\t\t\t\tif self.method.lower() == 'get':\n+\t\t\t\t\t\treq = _Request((\"%s?%s\" % (self.url, params)), method='GET')\n+\t\t\t\t\telse:\n+\t\t\t\t\t\treq = _Request((\"%s?%s\" % (self.url, params)), method='HEAD')\n \n \t\t\t\t\tif self.headers:\n \t\t\t\t\t\treq.headers = self.headers\n@@ -118,11 +130,28 @@ class Request(object):\n \t\telif self.method.lower() == 'put':\n \t\t\tif (not self.sent) or anyway:\n \t\t\t\ttry:\n-\t\t\t\t\tpass\n+\n+\t\t\t\t\treq = _Request(self.url, method='PUT')\n+\t\t\t\t\treq.data = self.data\n+\t\t\t\t\t\n+#\t\t\t\t\tif self.method.lower() == 'head':\n+#\t\t\t\t\t\treq.get_method = lambda : 'PUT'\n+\n+\t\t\t\t\tif self.headers:\n+\t\t\t\t\t\treq.headers = self.headers\n+\n+\t\t\t\t\topener = self._get_opener()\n+\t\t\t\t\tresp = opener(req)\n+\n+\t\t\t\t\tself.response.status_code = resp.code\n+\t\t\t\t\tself.response.headers = resp.info().dict\n+\t\t\t\t\tif self.method.lower() == 'get':\n+\t\t\t\t\t\tself.response.content = resp.read()\n \n \t\t\t\t\tsuccess = True\n \n-\t\t\t\texcept Exception:\n+\n+\t\t\t\texcept RequestException:\n \t\t\t\t\traise RequestException\n \t\t\t\n \t\telif self.method.lower() == 'post':\n@@ -263,8 +292,9 @@ def put(url, data='', headers={}, auth=None):\n \t\"\"\"\n \tr = Request()\n \n+\tr.url = url\n \tr.method = 'PUT'\n-\t# return response object\n+\tr.data = data\n \t\n \tr.headers = headers\n \tr.auth = _detect_auth(url, auth)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#3c32045da05cda554e65d3b943bb1128b2482c7f", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 18 | Lines Deleted: 28 | Files Changed: 1 | Hunks: 13 | Methods Changed: 1 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 46 | Churn Cumulative: 585 | Contributors (this commit): 1 | Commits (past 90d): 14 | Contributors (cumulative): 1 | DMM Complexity: 1.0\n\nDIFF:\n@@ -95,7 +95,7 @@ class Request(object):\n \t\t\"\"\"\n \t\tself._checks()\n \t\t\n-\t\tif self.method.lower() in ('get', 'head'):\n+\t\tif self.method.lower() in ('get', 'head', 'delete'):\n \t\t\tif (not self.sent) or anyway:\n \t\t\t\ttry:\n \t\t\t\t\t# url encode GET params if it's a dict\n@@ -107,8 +107,10 @@ class Request(object):\n \n \t\t\t\t\tif self.method.lower() == 'get':\n \t\t\t\t\t\treq = _Request((\"%s?%s\" % (self.url, params)), method='GET')\n-\t\t\t\t\telse:\n+\t\t\t\t\telif self.method.lower() == 'head':\n \t\t\t\t\t\treq = _Request((\"%s?%s\" % (self.url, params)), method='HEAD')\n+\t\t\t\t\telif self.method.lower() == 'delete':\n+\t\t\t\t\t\treq = _Request((\"%s?%s\" % (self.url, params)), method='DELETE')\n \n \t\t\t\t\tif self.headers:\n \t\t\t\t\t\treq.headers = self.headers\n@@ -123,45 +125,46 @@ class Request(object):\n \n \t\t\t\t\tsuccess = True\n \n-\t\t\t\texcept RequestException:\n+\t\t\t\texcept Exception:\n \t\t\t\t\traise RequestException\n \t\t\t\t\n \n \t\telif self.method.lower() == 'put':\n \t\t\tif (not self.sent) or anyway:\n+\n+\t\t\t\ttry:\n \t\t\t\t\ttry:\n \n \t\t\t\t\t\treq = _Request(self.url, method='PUT')\n-\t\t\t\t\treq.data = self.data\n-\t\t\t\t\t\n-#\t\t\t\t\tif self.method.lower() == 'head':\n-#\t\t\t\t\t\treq.get_method = lambda : 'PUT'\n \n \t\t\t\t\t\tif self.headers:\n \t\t\t\t\t\t\treq.headers = self.headers\n \n+\t\t\t\t\t\treq.data = self.data\n+\n \t\t\t\t\t\topener = self._get_opener()\n \t\t\t\t\t\tresp =  opener(req)\n \n \t\t\t\t\t\tself.response.status_code = resp.code\n \t\t\t\t\t\tself.response.headers = resp.info().dict\n-\t\t\t\t\tif self.method.lower() == 'get':\n \t\t\t\t\t\tself.response.content = resp.read()\n \n \t\t\t\t\t\tsuccess = True\n-\n-\n-\t\t\t\texcept RequestException:\n+\t\t\t\t\texcept Exception:\n \t\t\t\t\t\traise RequestException\n \n+\t\t\t\texcept urllib2.HTTPError:\n+\t\t\t\t\tself.resonse.status_code = 405\n+\n+\t\t\t\n \t\telif self.method.lower() == 'post':\n \t\t\tif (not self.sent) or anyway:\n \t\t\t\ttry:\n \n-\t\t\t\t\treq = urllib2.Request(self.url)\n+\t\t\t\t\treq = _Request(self.url, method='POST')\n \n \t\t\t\t\tif self.headers:\n-\t\t\t\t\t\tr.headers = self.headers\n+\t\t\t\t\t\treq.headers = self.headers\n \n \t\t\t\t\t# url encode form data if it's a dict\n \t\t\t\t\tif isinstance(self.data, dict):\n@@ -170,21 +173,8 @@ class Request(object):\n \t\t\t\t\t\treq.data = self.data\n \n \n-\t\t\t\t\tif self.auth:\n-\n-\t\t\t\t\t\t# create a password manager\n-\t\t\t\t\t\tpassword_mgr = urllib2.HTTPPasswordMgrWithDefaultRealm()\n-\n-\t\t\t\t\t\t# Add the username and password.\n-\t\t\t\t\t\t# If we knew the realm, we could use it instead of ``None``.\n-\t\t\t\t\t\tpassword_mgr.add_password(None, self.url, self.auth.username, self.auth.password)\n-\t\t\t\t\t\thandler = urllib2.HTTPBasicAuthHandler(password_mgr)\n-\t\t\t\t\t\topener = urllib2.build_opener(handler)\n-\n-\t\t\t\t\t\t# use the opener to fetch a URL\n-\t\t\t\t\t\tresp = opener.open(req)\n-\t\t\t\t\telse:\n-\t\t\t\t\t\tresp =  urllib2.urlopen(req)\n+\t\t\t\t\topener = self._get_opener()\n+\t\t\t\t\tresp =  opener(req)\n \n \t\t\t\t\tself.response.status_code = resp.code\n \t\t\t\t\tself.response.headers = resp.info().dict\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#f1d9aae10e82e7d122b2172616c7a675971cd0e6", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 6 | Lines Deleted: 24 | Files Changed: 1 | Hunks: 7 | Methods Changed: 2 | Complexity Δ (Sum/Max): -7/0 | Churn Δ: 30 | Churn Cumulative: 626 | Contributors (this commit): 1 | Commits (past 90d): 16 | Contributors (cumulative): 1 | DMM Complexity: 1.0\n\nDIFF:\n@@ -44,7 +44,7 @@ class Request(object):\n \t\"\"\"The :class:`Request` object. It's awesome.\n \t\"\"\"\n \t\n-\t_METHODS = ('get', 'head', 'put', 'post', 'delete')\n+\t_METHODS = ('GET', 'HEAD', 'PUT', 'POST', 'DELETE')\n \t\n \tdef __init__(self):\n \t\tself.url = None\n@@ -59,7 +59,7 @@ class Request(object):\n \t\n \tdef __setattr__(self, name, value):\n \t\tif (name == 'method') and (value):\n-\t\t\tif not value.lower() in self._METHODS:\n+\t\t\tif not value in self._METHODS:\n \t\t\t\traise InvalidMethod()\n \t\t\n \t\tobject.__setattr__(self, name, value)\n@@ -95,7 +95,7 @@ class Request(object):\n \t\t\"\"\"\n \t\tself._checks()\n \t\t\n-\t\tif self.method.lower() in ('get', 'head', 'delete'):\n+\t\tif self.method in ('GET', 'HEAD', 'DELETE'):\n \t\t\tif (not self.sent) or anyway:\n \t\t\t\ttry:\n \t\t\t\t\t# url encode GET params if it's a dict\n@@ -105,12 +105,7 @@ class Request(object):\n \n \t\t\t\t\t\tparams = self.params\n \n-\t\t\t\t\tif self.method.lower() == 'get':\n-\t\t\t\t\t\treq = _Request((\"%s?%s\" % (self.url, params)), method='GET')\n-\t\t\t\t\telif self.method.lower() == 'head':\n-\t\t\t\t\t\treq = _Request((\"%s?%s\" % (self.url, params)), method='HEAD')\n-\t\t\t\t\telif self.method.lower() == 'delete':\n-\t\t\t\t\t\treq = _Request((\"%s?%s\" % (self.url, params)), method='DELETE')\n+\t\t\t\t\treq = _Request((\"%s?%s\" % (self.url, params)), method=self.method)\n \n \t\t\t\t\tif self.headers:\n \t\t\t\t\t\treq.headers = self.headers\n@@ -129,7 +124,7 @@ class Request(object):\n \t\t\t\t\traise RequestException\n \t\t\t\t\n \n-\t\telif self.method.lower() == 'put':\n+\t\telif self.method == 'PUT':\n \t\t\tif (not self.sent) or anyway:\n \n \t\t\t\ttry:\n@@ -159,7 +154,7 @@ class Request(object):\n \n \n \t\t\t\n-\t\telif self.method.lower() == 'post':\n+\t\telif self.method == 'POST':\n \t\t\tif (not self.sent) or anyway:\n \t\t\t\ttry:\n \n@@ -187,19 +182,6 @@ class Request(object):\n \t\t\t\texcept Exception:\n \t\t\t\t\traise RequestException\n \n-\t\telif self.method.lower() == 'delete':\n-\t\t\tif (not self.sent) or anyway:\n-\t\t\t\ttry:\n-\t\t\t\t\tpass\n-\t\t\t\t\t\n-\t\t\t\t\tsuccess = True\n-\n-\t\t\t\texcept Exception:\n-\t\t\t\t\traise RequestException\n-\t\t\t\n-\t\telse:\n-\t\t\traise InvalidMethod\n-\n \t\t\n \t\tself.sent = True if success else False\n \t\t\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#f566bb21400cecf4dfe5a6c7d9bc7fb62abbb57d", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 18 | Lines Deleted: 17 | Files Changed: 1 | Hunks: 13 | Methods Changed: 2 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 35 | Churn Cumulative: 661 | Contributors (this commit): 1 | Commits (past 90d): 17 | Contributors (cumulative): 1 | DMM Complexity: 1.0\n\nDIFF:\n@@ -66,7 +66,10 @@ class Request(object):\n \t\n \t\n \tdef _checks(self):\n-\t\tpass\n+\t\t\"\"\"Deterministic checks for consistiency.\"\"\"\n+\n+\t\tif not self.url:\n+\t\t\traise URLRequired\n \n \t\t\n \tdef _get_opener(self):\n@@ -95,9 +98,11 @@ class Request(object):\n \t\t\"\"\"\n \t\tself._checks()\n \n+\t\tsuccess = False\n+\t\t\n \t\tif self.method in ('GET', 'HEAD', 'DELETE'):\n \t\t\tif (not self.sent) or anyway:\n-\t\t\t\ttry:\n+\n \t\t\t\t# url encode GET params if it's a dict\n \t\t\t\tif isinstance(self.params, dict):\n \t\t\t\t\tparams = urllib.urlencode(self.params)\n@@ -111,25 +116,22 @@ class Request(object):\n \t\t\t\t\treq.headers = self.headers\n \n \t\t\t\topener = self._get_opener()\n-\t\t\t\t\tresp = opener(req)\n \n+\t\t\t\ttry:\n+\t\t\t\t\tresp = opener(req)\n \t\t\t\t\tself.response.status_code = resp.code\n \t\t\t\t\tself.response.headers = resp.info().dict\n \t\t\t\t\tif self.method.lower() == 'get':\n \t\t\t\t\t\tself.response.content = resp.read()\n \n \t\t\t\t\tsuccess = True\n-\n-\t\t\t\texcept RequestException:\n-\t\t\t\t\traise RequestException\n+\t\t\t\texcept urllib2.HTTPError, why:\n+\t\t\t\t\tself.response.status_code = why.code\n \n \n \t\telif self.method == 'PUT':\n \t\t\tif (not self.sent) or anyway:\n \n-\t\t\t\ttry:\n-\t\t\t\t\ttry:\n-\n \t\t\t\treq = _Request(self.url, method='PUT')\n \n \t\t\t\tif self.headers:\n@@ -137,6 +139,7 @@ class Request(object):\n \n \t\t\t\treq.data = self.data\n \n+\t\t\t\ttry:\n \t\t\t\t\topener = self._get_opener()\n \t\t\t\t\tresp =  opener(req)\n \n@@ -145,18 +148,15 @@ class Request(object):\n \t\t\t\t\tself.response.content = resp.read()\n \n \t\t\t\t\tsuccess = True\n-\t\t\t\t\texcept urllib2.HTTPError:\n-\t\t\t\t\t\tself.resonse.status_code = 405\n \n-\t\t\t\texcept Exception:\n-\t\t\t\t\t# TODO: Fix this shit\n-\t\t\t\t\traise RequestException\n+\t\t\t\texcept urllib2.HTTPError, why:\n+\t\t\t\t\tself.response.status_code = why.code\n+\n \n \n \n \t\telif self.method == 'POST':\n \t\t\tif (not self.sent) or anyway:\n-\t\t\t\ttry:\n \n \t\t\t\treq = _Request(self.url, method='POST')\n \n@@ -169,6 +169,7 @@ class Request(object):\n \t\t\t\telse:\n \t\t\t\t\treq.data = self.data\n \n+\t\t\t\ttry:\n \n \t\t\t\t\topener = self._get_opener()\n \t\t\t\t\tresp =  opener(req)\n@@ -179,8 +180,8 @@ class Request(object):\n \n \t\t\t\t\tsuccess = True\n \n-\t\t\t\texcept Exception:\n-\t\t\t\t\traise RequestException\n+\t\t\t\texcept urllib2.HTTPError, why:\n+\t\t\t\t\tself.response.status_code = why.code\n \n \t\t\n \t\tself.sent = True if success else False\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#59c6aebd606e3c5fb7b684817faa92051fc0295a", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 663 | Contributors (this commit): 1 | Commits (past 90d): 18 | Contributors (cumulative): 1 | DMM Complexity: None\n\nDIFF:\n@@ -308,7 +308,7 @@ def _detect_auth(url, auth):\n \n \t\n def _get_autoauth(url):\n-\tfor (authauth_url, auth) in AUTOAUTHS:\n+\tfor (autoauth_url, auth) in AUTOAUTHS:\n \t\tif autoauth_url in url: \n \t\t\treturn auth\n \t\t\t\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#4018276b54a644f3529cbe751e8db594056dc9e9", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 4 | Files Changed: 1 | Hunks: 3 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 6 | Churn Cumulative: 669 | Contributors (this commit): 1 | Commits (past 90d): 19 | Contributors (cumulative): 1 | DMM Complexity: None\n\nDIFF:\n@@ -10,15 +10,13 @@\n     :license: ISC, see LICENSE for more details.\n \"\"\"\n \n-import httplib\n import urllib\n import urllib2\n-import urlparse\n \n \n __title__ = 'requests'\n-__version__ = '0.0.1'\n-__build__ = 0x000001\n+__version__ = '0.2.0'\n+__build__ = 0x000200\n __author__ = 'Kenneth Reitz'\n __license__ = 'ISC'\n __copyright__ = 'Copyright 2011 Kenneth Reitz'\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#e796aae504ac3170d01d0be92c87a9c39350bbf9", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 57 | Lines Deleted: 8 | Files Changed: 1 | Hunks: 16 | Methods Changed: 7 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 65 | Churn Cumulative: 734 | Contributors (this commit): 1 | Commits (past 90d): 20 | Contributors (cumulative): 1 | DMM Complexity: 1.0\n\nDIFF:\n@@ -26,9 +26,15 @@ AUTOAUTHS = []\n \n \n class _Request(urllib2.Request):\n-    def __init__(self, url, data=None, headers={},\n-                 origin_req_host=None, unverifiable=False, method=None):\n-       urllib2.Request.__init__(self, url, data, headers, origin_req_host, unverifiable)\n+\t\"\"\"Hidden wrapper around the urllib2.Request object. Allows for manual\n+\tsetting of HTTP methods.\n+\t\"\"\"\n+\t\n+\tdef __init__(self, url,\n+\t\t\t\t\tdata=None, headers={}, origin_req_host=None,\n+\t\t\t\t\tunverifiable=False, method=None):\n+\t\turllib2.Request.__init__( self, url, data, headers, origin_req_host,\n+\t\t\t\t\t\t\t\t  unverifiable)\n \t   \tself.method = method\n \n \tdef get_method(self):\n@@ -39,7 +45,10 @@ class _Request(urllib2.Request):\n \n \n class Request(object):\n-\t\"\"\"The :class:`Request` object. It's awesome.\n+\t\"\"\"The :class:`Request` object. It carries out all functionality of\n+\tRequests. Recommended interface is with the Requests functions.\n+\n+\t\n \t\"\"\"\n \t\n \t_METHODS = ('GET', 'HEAD', 'PUT', 'POST', 'DELETE')\n@@ -90,9 +99,14 @@ class Request(object):\n \n \t\n \tdef send(self, anyway=False):\n-\t\t\"\"\"Sends the request. \n+\t\t\"\"\"Sends the request. Returns True of successfull, false if not.\n+\t\t    If there was an HTTPError during transmission,\n+\t\t    self.response.status_code will contain the HTTPError code.\n \n-\t\t   :param anyway: If True, request will be sent, even if it has already been sent.\n+\t\t    Once a request is successfully sent, `sent` will equal True.\n+\t\t\n+\t\t    :param anyway: If True, request will be sent, even if it has\n+\t\t    already been sent.\n \t\t\"\"\"\n \t\tself._checks()\n \n@@ -188,7 +202,9 @@ class Request(object):\n \t\t\n \n class Response(object):\n-\t\"\"\"The :class:`Request` object. It's awesome.\n+\t\"\"\"The :class:`Request` object. All :class:`Request` objects contain a\n+\t:class:`Request.response <response>` attribute, which is an instance of\n+\tthis class.\n \t\"\"\"\n \n \tdef __init__(self):\n@@ -198,7 +214,10 @@ class Response(object):\n \n \t\n class AuthObject(object):\n-\t\"\"\"The :class:`AuthObject` is a simple HTTP Authentication token.\n+\t\"\"\"The :class:`AuthObject` is a simple HTTP Authentication token. When\n+\tgiven to a Requests function, it enables Basic HTTP Authentication for that\n+\tRequest. You can also enable Authorization for domain realms with AutoAuth.\n+\tSee AutoAuth for more details.s\n \t\n \t:param username: Username to authenticate with.\n     :param password: Password for given username.\n@@ -212,7 +231,13 @@ class AuthObject(object):\n \n def get(url, params={}, headers={}, auth=None):\n \t\"\"\"Sends a GET request. Returns :class:`Response` object.\n+\n+\t:param url: URL for the new :class:`Request` object.\n+\t:param params: (optional) Dictionary of GET Parameters to send with the :class:`Request`.\n+\t:param headers: (optional) Dictionary of HTTP Headers to sent with the :class:`Request`.\n+\t:param auth: (optional) AuthObject to enable Basic HTTP Auth.\n \t\"\"\"\n+\t\n \tr = Request()\n \t\n \tr.method = 'GET'\n@@ -228,7 +253,13 @@ def get(url, params={}, headers={}, auth=None):\n \n def head(url, params={}, headers={}, auth=None):\n \t\"\"\"Sends a HEAD request. Returns :class:`Response` object.\n+\n+\t:param url: URL for the new :class:`Request` object.\n+\t:param params: (optional) Dictionary of GET Parameters to send with the :class:`Request`.\n+\t:param headers: (optional) Dictionary of HTTP Headers to sent with the :class:`Request`.\n+\t:param auth: (optional) AuthObject to enable Basic HTTP Auth.\n \t\"\"\"\n+\t\n \tr = Request()\n \t\n \tr.method = 'HEAD'\n@@ -245,7 +276,13 @@ def head(url, params={}, headers={}, auth=None):\n \n def post(url, data={}, headers={}, auth=None):\n \t\"\"\"Sends a POST request. Returns :class:`Response` object.\n+\n+\t:param url: URL for the new :class:`Request` object.\n+\t:param data: (optional) Dictionary of POST Data to send with the :class:`Request`.\n+\t:param headers: (optional) Dictionary of HTTP Headers to sent with the :class:`Request`.\n+\t:param auth: (optional) AuthObject to enable Basic HTTP Auth.\n \t\"\"\"\n+\t\n \tr = Request()\n \n \tr.url = url\n@@ -262,7 +299,13 @@ def post(url, data={}, headers={}, auth=None):\n \t\n def put(url, data='', headers={}, auth=None):\n \t\"\"\"Sends a PUT request. Returns :class:`Response` object.\n+\n+\t:param url: URL for the new :class:`Request` object.\n+\t:param data: (optional) Bytes of PUT Data to send with the :class:`Request`.\n+\t:param headers: (optional) Dictionary of HTTP Headers to sent with the :class:`Request`.\n+\t:param auth: (optional) AuthObject to enable Basic HTTP Auth.\n \t\"\"\"\n+\t\n \tr = Request()\n \n \tr.url = url\n@@ -279,7 +322,13 @@ def put(url, data='', headers={}, auth=None):\n \t\n def delete(url, params={}, headers={}, auth=None):\n \t\"\"\"Sends a DELETE request. Returns :class:`Response` object.\n+\n+\t:param url: URL for the new :class:`Request` object.\n+\t:param params: (optional) Dictionary of GET Parameters to send with the :class:`Request`.\n+\t:param headers: (optional) Dictionary of HTTP Headers to sent with the :class:`Request`.\n+\t:param auth: (optional) AuthObject to enable Basic HTTP Auth.\n \t\"\"\"\n+\t\n \tr = Request()\n \n \tr.url = url\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
