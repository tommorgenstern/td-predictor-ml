{"custom_id": "flask#88863288225d5ee13a79c463f2a39391b6a52c61", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 16 | Lines Deleted: 27 | Files Changed: 4 | Hunks: 10 | Methods Changed: 11 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 43 | Churn Cumulative: 4155 | Contributors (this commit): 25 | Commits (past 90d): 6 | Contributors (cumulative): 45 | DMM Complexity: 1.0\n\nDIFF:\n@@ -1265,9 +1265,7 @@ class Flask(Scaffold):\n         self.shell_context_processors.append(f)\n         return f\n \n-    def _find_error_handler(\n-        self, e: Exception\n-    ) -> t.Optional[\"ErrorHandlerCallable[Exception]\"]:\n+    def _find_error_handler(self, e: Exception) -> t.Optional[\"ErrorHandlerCallable\"]:\n         \"\"\"Return a registered error handler for an exception in this order:\n         blueprint handler for a specific code, app handler for a specific code,\n         blueprint handler for an exception class, app handler for an exception\n\n@@ -574,9 +574,7 @@ class Blueprint(Scaffold):\n         handler is used for all requests, even if outside of the blueprint.\n         \"\"\"\n \n-        def decorator(\n-            f: \"ErrorHandlerCallable[Exception]\",\n-        ) -> \"ErrorHandlerCallable[Exception]\":\n+        def decorator(f: \"ErrorHandlerCallable\") -> \"ErrorHandlerCallable\":\n             self.record_once(lambda s: s.app.errorhandler(code)(f))\n             return f\n \n\n@@ -21,7 +21,6 @@ from .templating import _default_template_ctx_processor\n from .typing import AfterRequestCallable\n from .typing import AppOrBlueprintKey\n from .typing import BeforeRequestCallable\n-from .typing import GenericException\n from .typing import TeardownCallable\n from .typing import TemplateContextProcessorCallable\n from .typing import URLDefaultCallable\n@@ -145,10 +144,7 @@ class Scaffold:\n         #: directly and its format may change at any time.\n         self.error_handler_spec: t.Dict[\n             AppOrBlueprintKey,\n-            t.Dict[\n-                t.Optional[int],\n-                t.Dict[t.Type[Exception], \"ErrorHandlerCallable[Exception]\"],\n-            ],\n+            t.Dict[t.Optional[int], t.Dict[t.Type[Exception], \"ErrorHandlerCallable\"]],\n         ] = defaultdict(lambda: defaultdict(dict))\n \n         #: A data structure of functions to call at the beginning of\n@@ -652,11 +648,8 @@ class Scaffold:\n \n     @setupmethod\n     def errorhandler(\n-        self, code_or_exception: t.Union[t.Type[GenericException], int]\n-    ) -> t.Callable[\n-        [\"ErrorHandlerCallable[GenericException]\"],\n-        \"ErrorHandlerCallable[GenericException]\",\n-    ]:\n+        self, code_or_exception: t.Union[t.Type[Exception], int]\n+    ) -> t.Callable[[\"ErrorHandlerCallable\"], \"ErrorHandlerCallable\"]:\n         \"\"\"Register a function to handle errors by code or exception class.\n \n         A decorator that is used to register a function given an\n@@ -686,9 +679,7 @@ class Scaffold:\n                                   an arbitrary exception\n         \"\"\"\n \n-        def decorator(\n-            f: \"ErrorHandlerCallable[GenericException]\",\n-        ) -> \"ErrorHandlerCallable[GenericException]\":\n+        def decorator(f: \"ErrorHandlerCallable\") -> \"ErrorHandlerCallable\":\n             self.register_error_handler(code_or_exception, f)\n             return f\n \n@@ -697,8 +688,8 @@ class Scaffold:\n     @setupmethod\n     def register_error_handler(\n         self,\n-        code_or_exception: t.Union[t.Type[GenericException], int],\n-        f: \"ErrorHandlerCallable[GenericException]\",\n+        code_or_exception: t.Union[t.Type[Exception], int],\n+        f: \"ErrorHandlerCallable\",\n     ) -> None:\n         \"\"\"Alternative error attach function to the :meth:`errorhandler`\n         decorator that is more straightforward to use for non decorator\n@@ -722,9 +713,7 @@ class Scaffold:\n                 \" instead.\"\n             ) from None\n \n-        self.error_handler_spec[None][code][exc_class] = t.cast(\n-            \"ErrorHandlerCallable[Exception]\", f\n-        )\n+        self.error_handler_spec[None][code][exc_class] = f\n \n     @staticmethod\n     def _get_exc_class_and_code(\n\n@@ -33,8 +33,6 @@ ResponseReturnValue = t.Union[\n     \"WSGIApplication\",\n ]\n \n-GenericException = t.TypeVar(\"GenericException\", bound=Exception, contravariant=True)\n-\n AppOrBlueprintKey = t.Optional[str]  # The App key is None, whereas blueprints are named\n AfterRequestCallable = t.Callable[[\"Response\"], \"Response\"]\n BeforeFirstRequestCallable = t.Callable[[], None]\n@@ -46,4 +44,10 @@ TemplateGlobalCallable = t.Callable[..., t.Any]\n TemplateTestCallable = t.Callable[..., bool]\n URLDefaultCallable = t.Callable[[str, dict], None]\n URLValuePreprocessorCallable = t.Callable[[t.Optional[str], t.Optional[dict]], None]\n-ErrorHandlerCallable = t.Callable[[GenericException], ResponseReturnValue]\n+# This should take Exception, but that either breaks typing the argument\n+# with a specific exception, or decorating multiple times with different\n+# exceptions (and using a union type on the argument).\n+# https://github.com/pallets/flask/issues/4095\n+# https://github.com/pallets/flask/issues/4295\n+# https://github.com/pallets/flask/issues/4297\n+ErrorHandlerCallable = t.Callable[[t.Any], ResponseReturnValue]\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#190dd4df86874495f56bb088fbd0cb1d9f0e77a0", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 15 | Lines Deleted: 9 | Files Changed: 3 | Hunks: 9 | Methods Changed: 2 | Complexity Δ (Sum/Max): -3/0 | Churn Δ: 24 | Churn Cumulative: 3344 | Contributors (this commit): 28 | Commits (past 90d): 7 | Contributors (cumulative): 36 | DMM Complexity: 0.0\n\nDIFF:\n@@ -1672,13 +1672,13 @@ class Flask(Scaffold):\n \n             # a 3-tuple is unpacked directly\n             if len_rv == 3:\n-                rv, status, headers = rv\n+                rv, status, headers = rv  # type: ignore[misc]\n             # decide if a 2-tuple has status or headers\n             elif len_rv == 2:\n                 if isinstance(rv[1], (Headers, dict, tuple, list)):\n                     rv, headers = rv\n                 else:\n-                    rv, status = rv\n+                    rv, status = rv  # type: ignore[misc]\n             # other sized tuples are not allowed\n             else:\n                 raise TypeError(\n@@ -1701,7 +1701,11 @@ class Flask(Scaffold):\n                 # let the response class set the status and headers instead of\n                 # waiting to do it manually, so that the class can handle any\n                 # special logic\n-                rv = self.response_class(rv, status=status, headers=headers)\n+                rv = self.response_class(\n+                    rv,\n+                    status=status,\n+                    headers=headers,  # type: ignore[arg-type]\n+                )\n                 status = headers = None\n             elif isinstance(rv, dict):\n                 rv = jsonify(rv)\n@@ -1729,13 +1733,13 @@ class Flask(Scaffold):\n         # prefer the status if it was provided\n         if status is not None:\n             if isinstance(status, (str, bytes, bytearray)):\n-                rv.status = status  # type: ignore\n+                rv.status = status\n             else:\n                 rv.status_code = status\n \n         # extend existing headers with provided headers\n         if headers:\n-            rv.headers.update(headers)\n+            rv.headers.update(headers)  # type: ignore[arg-type]\n \n         return rv\n \n\n@@ -186,7 +186,7 @@ def make_response(*args: t.Any) -> \"Response\":\n         return current_app.response_class()\n     if len(args) == 1:\n         args = args[0]\n-    return current_app.make_response(args)\n+    return current_app.make_response(args)  # type: ignore\n \n \n def url_for(endpoint: str, **values: t.Any) -> str:\n\n@@ -4,14 +4,16 @@ import typing as t\n if t.TYPE_CHECKING:\n     from _typeshed.wsgi import WSGIApplication  # noqa: F401\n     from werkzeug.datastructures import Headers  # noqa: F401\n-    from .wrappers import Response  # noqa: F401\n+    from werkzeug.wrappers.response import Response  # noqa: F401\n \n # The possible types that are directly convertible or are a Response object.\n ResponseValue = t.Union[\n     \"Response\",\n-    t.AnyStr,\n+    str,\n+    bytes,\n     t.Dict[str, t.Any],  # any jsonify-able dict\n-    t.Generator[t.AnyStr, None, None],\n+    t.Iterator[str],\n+    t.Iterator[bytes],\n ]\n StatusCode = int\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#faaa5594b2406260c3e4197fa6e80c3d19b6ab23", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 12 | Lines Deleted: 3 | Files Changed: 2 | Hunks: 3 | Methods Changed: 4 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 15 | Churn Cumulative: 579 | Contributors (this commit): 7 | Commits (past 90d): 5 | Contributors (cumulative): 9 | DMM Complexity: 1.0\n\nDIFF:\n@@ -267,7 +267,10 @@ class AppContext:\n         return self\n \n     def __exit__(\n-        self, exc_type: type, exc_value: BaseException, tb: TracebackType\n+        self,\n+        exc_type: t.Optional[type],\n+        exc_value: t.Optional[BaseException],\n+        tb: t.Optional[TracebackType],\n     ) -> None:\n         self.pop(exc_value)\n \n@@ -491,7 +494,10 @@ class RequestContext:\n         return self\n \n     def __exit__(\n-        self, exc_type: type, exc_value: BaseException, tb: TracebackType\n+        self,\n+        exc_type: t.Optional[type],\n+        exc_value: t.Optional[BaseException],\n+        tb: t.Optional[TracebackType],\n     ) -> None:\n         # do not pop the request stack if we are in debug mode and an\n         # exception happened.  This will allow the debugger to still\n\n@@ -227,7 +227,10 @@ class FlaskClient(Client):\n         return self\n \n     def __exit__(\n-        self, exc_type: type, exc_value: BaseException, tb: TracebackType\n+        self,\n+        exc_type: t.Optional[type],\n+        exc_value: t.Optional[BaseException],\n+        tb: t.Optional[TracebackType],\n     ) -> None:\n         self.preserve_context = False\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#c9a1f7ad6545c9cc27c41c385f1d4cd9c7cf1a98", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 44 | Lines Deleted: 35 | Files Changed: 3 | Hunks: 14 | Methods Changed: 4 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 79 | Churn Cumulative: 6423 | Contributors (this commit): 58 | Commits (past 90d): 7 | Contributors (cumulative): 66 | DMM Complexity: 1.0\n\nDIFF:\n@@ -1457,17 +1457,26 @@ class Flask(Scaffold):\n         )\n \n     def raise_routing_exception(self, request: Request) -> \"te.NoReturn\":\n-        \"\"\"Exceptions that are recording during routing are reraised with\n-        this method.  During debug we are not reraising redirect requests\n-        for non ``GET``, ``HEAD``, or ``OPTIONS`` requests and we're raising\n-        a different error instead to help debug situations.\n+        \"\"\"Intercept routing exceptions and possibly do something else.\n \n+        In debug mode, intercept a routing redirect and replace it with\n+        an error if the body will be discarded.\n+\n+        With modern Werkzeug this shouldn't occur, since it now uses a\n+        308 status which tells the browser to resend the method and\n+        body.\n+\n+        .. versionchanged:: 2.1\n+            Don't intercept 307 and 308 redirects.\n+\n+        :meta private:\n         :internal:\n         \"\"\"\n         if (\n             not self.debug\n             or not isinstance(request.routing_exception, RequestRedirect)\n-            or request.method in (\"GET\", \"HEAD\", \"OPTIONS\")\n+            or request.routing_exception.code in {307, 308}\n+            or request.method in {\"GET\", \"HEAD\", \"OPTIONS\"}\n         ):\n             raise request.routing_exception  # type: ignore\n \n\n@@ -41,35 +41,33 @@ class DebugFilesKeyError(KeyError, AssertionError):\n \n \n class FormDataRoutingRedirect(AssertionError):\n-    \"\"\"This exception is raised by Flask in debug mode if it detects a\n-    redirect caused by the routing system when the request method is not\n-    GET, HEAD or OPTIONS.  Reasoning: form data will be dropped.\n+    \"\"\"This exception is raised in debug mode if a routing redirect\n+    would cause the browser to drop the method or body. This happens\n+    when method is not GET, HEAD or OPTIONS and the status code is not\n+    307 or 308.\n     \"\"\"\n \n     def __init__(self, request):\n         exc = request.routing_exception\n         buf = [\n-            f\"A request was sent to this URL ({request.url}) but a\"\n-            \" redirect was issued automatically by the routing system\"\n-            f\" to {exc.new_url!r}.\"\n+            f\"A request was sent to '{request.url}', but routing issued\"\n+            f\" a redirect to the canonical URL '{exc.new_url}'.\"\n         ]\n \n-        # In case just a slash was appended we can be extra helpful\n-        if f\"{request.base_url}/\" == exc.new_url.split(\"?\")[0]:\n+        if f\"{request.base_url}/\" == exc.new_url.partition(\"?\")[0]:\n             buf.append(\n-                \"  The URL was defined with a trailing slash so Flask\"\n-                \" will automatically redirect to the URL with the\"\n-                \" trailing slash if it was accessed without one.\"\n+                \" The URL was defined with a trailing slash. Flask\"\n+                \" will redirect to the URL with a trailing slash if it\"\n+                \" was accessed without one.\"\n             )\n \n         buf.append(\n-            \"  Make sure to directly send your\"\n-            f\" {request.method}-request to this URL since we can't make\"\n-            \" browsers or HTTP clients redirect with form data reliably\"\n-            \" or without user interaction.\"\n+            \" Send requests to the canonical URL, or use 307 or 308 for\"\n+            \" routing redirects. Otherwise, browsers will drop form\"\n+            \" data.\\n\\n\"\n+            \"This exception is only raised in debug mode.\"\n         )\n-        buf.append(\"\\n\\nNote: this exception is only raised in debug mode\")\n-        AssertionError.__init__(self, \"\".join(buf).encode(\"utf-8\"))\n+        super().__init__(\"\".join(buf))\n \n \n def attach_enctype_error_multidict(request):\n\n@@ -15,6 +15,7 @@ from werkzeug.exceptions import Forbidden\n from werkzeug.exceptions import NotFound\n from werkzeug.http import parse_date\n from werkzeug.routing import BuildError\n+from werkzeug.routing import RequestRedirect\n \n import flask\n \n@@ -1724,28 +1725,29 @@ def test_before_first_request_functions_concurrent(app, client):\n     assert app.got_first_request\n \n \n-def test_routing_redirect_debugging(app, client):\n-    app.debug = True\n-\n+def test_routing_redirect_debugging(monkeypatch, app, client):\n     @app.route(\"/foo/\", methods=[\"GET\", \"POST\"])\n     def foo():\n         return \"success\"\n \n-    with client:\n-        with pytest.raises(AssertionError) as e:\n-            client.post(\"/foo\", data={})\n-        assert \"http://localhost/foo/\" in str(e.value)\n-        assert \"Make sure to directly send your POST-request to this URL\" in str(\n-            e.value\n-        )\n-\n-        rv = client.get(\"/foo\", data={}, follow_redirects=True)\n+    app.debug = False\n+    rv = client.post(\"/foo\", data={}, follow_redirects=True)\n     assert rv.data == b\"success\"\n \n-    app.debug = False\n+    app.debug = True\n+\n     with client:\n         rv = client.post(\"/foo\", data={}, follow_redirects=True)\n         assert rv.data == b\"success\"\n+        rv = client.get(\"/foo\", data={}, follow_redirects=True)\n+        assert rv.data == b\"success\"\n+\n+    monkeypatch.setattr(RequestRedirect, \"code\", 301)\n+\n+    with client, pytest.raises(AssertionError) as e:\n+        client.post(\"/foo\", data={})\n+\n+    assert \"canonical URL 'http://localhost/foo/'\" in str(e.value)\n \n \n def test_route_decorator_custom_endpoint(app, client):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#0a300d007d3a5ef902e0b3c91f6189267fbed182", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 10 | Lines Deleted: 6 | Files Changed: 2 | Hunks: 4 | Methods Changed: 3 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 16 | Churn Cumulative: 315 | Contributors (this commit): 3 | Commits (past 90d): 3 | Contributors (cumulative): 5 | DMM Complexity: 1.0\n\nDIFF:\n@@ -71,21 +71,25 @@ class FormDataRoutingRedirect(AssertionError):\n \n \n def attach_enctype_error_multidict(request):\n-    \"\"\"Since Flask 0.8 we're monkeypatching the files object in case a\n-    request is detected that does not use multipart form data but the files\n-    object is accessed.\n+    \"\"\"Patch ``request.files.__getitem__`` to raise a descriptive error\n+    about ``enctype=multipart/form-data``.\n+\n+    :param request: The request to patch.\n+    :meta private:\n     \"\"\"\n     oldcls = request.files.__class__\n \n     class newcls(oldcls):\n         def __getitem__(self, key):\n             try:\n-                return oldcls.__getitem__(self, key)\n+                return super().__getitem__(key)\n             except KeyError as e:\n                 if key not in request.form:\n                     raise\n \n-                raise DebugFilesKeyError(request, key) from e\n+                raise DebugFilesKeyError(request, key).with_traceback(\n+                    e.__traceback__\n+                ) from None\n \n     newcls.__name__ = oldcls.__name__\n     newcls.__module__ = oldcls.__module__\n\n@@ -110,7 +110,7 @@ class Request(RequestBase):\n         return _split_blueprint_path(name)\n \n     def _load_form_data(self) -> None:\n-        RequestBase._load_form_data(self)\n+        super()._load_form_data()\n \n         # In debug mode we're replacing the files multidict with an ad-hoc\n         # subclass that raises a different error for key errors.\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#6578b493c8c8d5d9b4135cb964dbbc43318cfb12", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 6 | Lines Deleted: 4 | Files Changed: 1 | Hunks: 4 | Methods Changed: 2 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 10 | Churn Cumulative: 168 | Contributors (this commit): 2 | Commits (past 90d): 2 | Contributors (cumulative): 2 | DMM Complexity: 1.0\n\nDIFF:\n@@ -9,7 +9,6 @@ from .globals import current_app\n from .helpers import _split_blueprint_path\n \n if t.TYPE_CHECKING:\n-    import typing_extensions as te\n     from werkzeug.routing import Rule\n \n \n@@ -124,11 +123,14 @@ class Request(RequestBase):\n \n             attach_enctype_error_multidict(self)\n \n-    def on_json_loading_failed(self, e: Exception) -> \"te.NoReturn\":\n+    def on_json_loading_failed(self, e: ValueError) -> t.Any:\n+        try:\n+            return super().on_json_loading_failed(e)\n+        except BadRequest as e:\n             if current_app and current_app.debug:\n-            raise BadRequest(f\"Failed to decode JSON object: {e}\")\n+                raise\n \n-        raise BadRequest()\n+            raise BadRequest() from e\n \n \n class Response(ResponseBase):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#81c7ff7f8db09b5d609a09722785f70ec6f7af68", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 13 | Lines Deleted: 5 | Files Changed: 4 | Hunks: 6 | Methods Changed: 5 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 18 | Churn Cumulative: 674 | Contributors (this commit): 9 | Commits (past 90d): 6 | Contributors (cumulative): 14 | DMM Complexity: 1.0\n\nDIFF:\n@@ -11,7 +11,7 @@ def test_register(client, app):\n \n     # test that successful registration redirects to the login page\n     response = client.post(\"/auth/register\", data={\"username\": \"a\", \"password\": \"a\"})\n-    assert \"http://localhost/auth/login\" == response.headers[\"Location\"]\n+    assert response.headers[\"Location\"] == \"/auth/login\"\n \n     # test that the user was inserted into the database\n     with app.app_context():\n@@ -42,7 +42,7 @@ def test_login(client, auth):\n \n     # test that successful login redirects to the index page\n     response = auth.login()\n-    assert response.headers[\"Location\"] == \"http://localhost/\"\n+    assert response.headers[\"Location\"] == \"/\"\n \n     # login request set the user_id in the session\n     # check that the user is loaded from the session\n\n@@ -19,7 +19,7 @@ def test_index(client, auth):\n @pytest.mark.parametrize(\"path\", (\"/create\", \"/1/update\", \"/1/delete\"))\n def test_login_required(client, path):\n     response = client.post(path)\n-    assert response.headers[\"Location\"] == \"http://localhost/auth/login\"\n+    assert response.headers[\"Location\"] == \"/auth/login\"\n \n \n def test_author_required(app, client, auth):\n@@ -75,7 +75,7 @@ def test_create_update_validate(client, auth, path):\n def test_delete(client, auth, app):\n     auth.login()\n     response = client.post(\"/1/delete\")\n-    assert response.headers[\"Location\"] == \"http://localhost/\"\n+    assert response.headers[\"Location\"] == \"/\"\n \n     with app.app_context():\n         db = get_db()\n\n@@ -155,6 +155,8 @@ class Response(ResponseBase):\n \n     json_module = json\n \n+    autocorrect_location_header = False\n+\n     @property\n     def max_cookie_size(self) -> int:  # type: ignore\n         \"\"\"Read-only view of the :data:`MAX_COOKIE_SIZE` config key.\n\n@@ -19,6 +19,12 @@ def test_aborting(app):\n \n     with app.test_client() as c:\n         rv = c.get(\"/\")\n-        assert rv.headers[\"Location\"] == \"http://localhost/test\"\n+        location_parts = rv.headers[\"Location\"].rpartition(\"/\")\n+\n+        if location_parts[0]:\n+            # For older Werkzeug that used absolute redirects.\n+            assert location_parts[0] == \"http://localhost\"\n+\n+        assert location_parts[2] == \"test\"\n         rv = c.get(\"/test\")\n         assert rv.data == b\"42\"\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#08a283af5efc999d4f1e29275317a5c0c05c6f7b", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 70 | Lines Deleted: 0 | Files Changed: 2 | Hunks: 4 | Methods Changed: 4 | Complexity Δ (Sum/Max): 7/5 | Churn Δ: 70 | Churn Cumulative: 1404 | Contributors (this commit): 12 | Commits (past 90d): 2 | Contributors (cumulative): 14 | DMM Complexity: 1.0\n\nDIFF:\n@@ -1,4 +1,5 @@\n import errno\n+import json\n import os\n import types\n import typing as t\n@@ -6,6 +7,13 @@ import typing as t\n from werkzeug.utils import import_string\n \n \n+def _json_loads(raw: t.Union[str, bytes]) -> t.Any:\n+    try:\n+        return json.loads(raw)\n+    except json.JSONDecodeError:\n+        return raw\n+\n+\n class ConfigAttribute:\n     \"\"\"Makes an attribute forward to the config\"\"\"\n \n@@ -97,6 +105,44 @@ class Config(dict):\n             )\n         return self.from_pyfile(rv, silent=silent)\n \n+    def from_prefixed_env(\n+        self,\n+        prefix: str = \"FLASK_\",\n+        *,\n+        loads: t.Callable[[t.Union[str, bytes]], t.Any] = _json_loads,\n+    ) -> bool:\n+        \"\"\"Updates the config from environment variables with the prefix.\n+\n+        Calling this method will result in every environment variable\n+        starting with **prefix** being placed into the configuration\n+        without the **prefix**. The prefix is configurable as an\n+        argument. Note that this method updates the existing config.\n+\n+        For example if there is an environment variable\n+        ``FLASK_SECRET_KEY`` with value ``secretly`` and the prefix is\n+        ``FLASK_`` the config will contain the key ``SECRET_KEY`` with\n+        the value ``secretly`` after calling this method.\n+\n+        The value of the environment variable will be passed to the\n+        **loads** parameter before being placed into the config. By\n+        default **loads** utilises the stdlib json.loads to parse the\n+        value, falling back to the value itself on parsing error.\n+\n+        :param loads: A callable that takes a str (or bytes) returns\n+            the parsed value.\n+        :return: Always returns ``True``.\n+\n+        .. versionadded:: 2.1.0\n+\n+        \"\"\"\n+        mapping = {}\n+        for raw_key, value in os.environ.items():\n+            if raw_key.startswith(prefix):\n+                key = raw_key[len(prefix) :]  # Use removeprefix with Python 3.9\n+                mapping[key] = loads(value)\n+\n+        return self.from_mapping(mapping)\n+\n     def from_pyfile(self, filename: str, silent: bool = False) -> bool:\n         \"\"\"Updates the values in the config from a Python file.  This function\n         behaves as if the file was imported as module with the\n\n@@ -38,6 +38,30 @@ def test_config_from_file():\n     common_object_test(app)\n \n \n+def test_config_from_prefixed_env(monkeypatch):\n+    app = flask.Flask(__name__)\n+    monkeypatch.setenv(\"FLASK_A\", \"A value\")\n+    monkeypatch.setenv(\"FLASK_B\", \"true\")\n+    monkeypatch.setenv(\"FLASK_C\", \"1\")\n+    monkeypatch.setenv(\"FLASK_D\", \"1.2\")\n+    monkeypatch.setenv(\"NOT_FLASK_A\", \"Another value\")\n+    app.config.from_prefixed_env()\n+    assert app.config[\"A\"] == \"A value\"\n+    assert app.config[\"B\"] is True\n+    assert app.config[\"C\"] == 1\n+    assert app.config[\"D\"] == 1.2\n+    assert \"Another value\" not in app.config.items()\n+\n+\n+def test_config_from_custom_prefixed_env(monkeypatch):\n+    app = flask.Flask(__name__)\n+    monkeypatch.setenv(\"FLASK_A\", \"A value\")\n+    monkeypatch.setenv(\"NOT_FLASK_A\", \"Another value\")\n+    app.config.from_prefixed_env(\"NOT_FLASK_\")\n+    assert app.config[\"A\"] == \"Another value\"\n+    assert \"A value\" not in app.config.items()\n+\n+\n def test_config_from_mapping():\n     app = flask.Flask(__name__)\n     app.config.from_mapping({\"SECRET_KEY\": \"config\", \"TEST_KEY\": \"foo\"})\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#4eb5e9455b2a8f15f3dc5065a47f8e43ac47e539", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 98 | Lines Deleted: 46 | Files Changed: 2 | Hunks: 15 | Methods Changed: 8 | Complexity Δ (Sum/Max): 5/4 | Churn Δ: 144 | Churn Cumulative: 1548 | Contributors (this commit): 12 | Commits (past 90d): 4 | Contributors (cumulative): 14 | DMM Complexity: 0.0\n\nDIFF:\n@@ -78,7 +78,7 @@ class Config(dict):\n     \"\"\"\n \n     def __init__(self, root_path: str, defaults: t.Optional[dict] = None) -> None:\n-        dict.__init__(self, defaults or {})\n+        super().__init__(defaults or {})\n         self.root_path = root_path\n \n     def from_envvar(self, variable_name: str, silent: bool = False) -> bool:\n@@ -106,42 +106,68 @@ class Config(dict):\n         return self.from_pyfile(rv, silent=silent)\n \n     def from_prefixed_env(\n-        self,\n-        prefix: str = \"FLASK_\",\n-        *,\n-        loads: t.Callable[[t.Union[str, bytes]], t.Any] = _json_loads,\n+        self, prefix: str = \"FLASK\", *, loads: t.Callable[[str], t.Any] = json.loads\n     ) -> bool:\n-        \"\"\"Updates the config from environment variables with the prefix.\n+        \"\"\"Load any environment variables that start with ``FLASK_``,\n+        dropping the prefix from the env key for the config key. Values\n+        are passed through a loading function to attempt to convert them\n+        to more specific types than strings.\n \n-        Calling this method will result in every environment variable\n-        starting with **prefix** being placed into the configuration\n-        without the **prefix**. The prefix is configurable as an\n-        argument. Note that this method updates the existing config.\n+        Keys are loaded in :func:`sorted` order.\n \n-        For example if there is an environment variable\n-        ``FLASK_SECRET_KEY`` with value ``secretly`` and the prefix is\n-        ``FLASK_`` the config will contain the key ``SECRET_KEY`` with\n-        the value ``secretly`` after calling this method.\n+        The default loading function attempts to parse values as any\n+        valid JSON type, including dicts and lists.\n \n-        The value of the environment variable will be passed to the\n-        **loads** parameter before being placed into the config. By\n-        default **loads** utilises the stdlib json.loads to parse the\n-        value, falling back to the value itself on parsing error.\n+        Specific items in nested dicts can be set by separating the\n+        keys with double underscores (``__``). If an intermediate key\n+        doesn't exist, it will be initialized to an empty dict.\n \n-        :param loads: A callable that takes a str (or bytes) returns\n-            the parsed value.\n-        :return: Always returns ``True``.\n-\n-        .. versionadded:: 2.1.0\n+        :param prefix: Load env vars that start with this prefix,\n+            separated with an underscore (``_``).\n+        :param loads: Pass each string value to this function and use\n+            the returned value as the config value. If any error is\n+            raised it is ignored and the value remains a string. The\n+            default is :func:`json.loads`.\n \n+        .. versionadded:: 2.1\n         \"\"\"\n-        mapping = {}\n-        for raw_key, value in os.environ.items():\n-            if raw_key.startswith(prefix):\n-                key = raw_key[len(prefix) :]  # Use removeprefix with Python 3.9\n-                mapping[key] = loads(value)\n+        prefix = f\"{prefix}_\"\n+        len_prefix = len(prefix)\n \n-        return self.from_mapping(mapping)\n+        for key in sorted(os.environ):\n+            if not key.startswith(prefix):\n+                continue\n+\n+            value = os.environ[key]\n+\n+            try:\n+                value = loads(value)\n+            except Exception:\n+                # Keep the value as a string if loading failed.\n+                pass\n+\n+            # Change to key.removeprefix(prefix) on Python >= 3.9.\n+            key = key[len_prefix:]\n+\n+            if \"__\" not in key:\n+                # A non-nested key, set directly.\n+                self[key] = value\n+                continue\n+\n+            # Traverse nested dictionaries with keys separated by \"__\".\n+            current = self\n+            *parts, tail = key.split(\"__\")\n+\n+            for part in parts:\n+                # If an intermediate dict does not exist, create it.\n+                if part not in current:\n+                    current[part] = {}\n+\n+                current = current[part]\n+\n+            current[tail] = value\n+\n+        return True\n \n     def from_pyfile(self, filename: str, silent: bool = False) -> bool:\n         \"\"\"Updates the values in the config from a Python file.  This function\n\n@@ -38,28 +38,54 @@ def test_config_from_file():\n     common_object_test(app)\n \n \n-def test_config_from_prefixed_env(monkeypatch):\n+def test_from_prefixed_env(monkeypatch):\n+    monkeypatch.setenv(\"FLASK_STRING\", \"value\")\n+    monkeypatch.setenv(\"FLASK_BOOL\", \"true\")\n+    monkeypatch.setenv(\"FLASK_INT\", \"1\")\n+    monkeypatch.setenv(\"FLASK_FLOAT\", \"1.2\")\n+    monkeypatch.setenv(\"FLASK_LIST\", \"[1, 2]\")\n+    monkeypatch.setenv(\"FLASK_DICT\", '{\"k\": \"v\"}')\n+    monkeypatch.setenv(\"NOT_FLASK_OTHER\", \"other\")\n+\n     app = flask.Flask(__name__)\n-    monkeypatch.setenv(\"FLASK_A\", \"A value\")\n-    monkeypatch.setenv(\"FLASK_B\", \"true\")\n-    monkeypatch.setenv(\"FLASK_C\", \"1\")\n-    monkeypatch.setenv(\"FLASK_D\", \"1.2\")\n-    monkeypatch.setenv(\"NOT_FLASK_A\", \"Another value\")\n     app.config.from_prefixed_env()\n-    assert app.config[\"A\"] == \"A value\"\n-    assert app.config[\"B\"] is True\n-    assert app.config[\"C\"] == 1\n-    assert app.config[\"D\"] == 1.2\n-    assert \"Another value\" not in app.config.items()\n+\n+    assert app.config[\"STRING\"] == \"value\"\n+    assert app.config[\"BOOL\"] is True\n+    assert app.config[\"INT\"] == 1\n+    assert app.config[\"FLOAT\"] == 1.2\n+    assert app.config[\"LIST\"] == [1, 2]\n+    assert app.config[\"DICT\"] == {\"k\": \"v\"}\n+    assert \"OTHER\" not in app.config\n \n \n-def test_config_from_custom_prefixed_env(monkeypatch):\n+def test_from_prefixed_env_custom_prefix(monkeypatch):\n+    monkeypatch.setenv(\"FLASK_A\", \"a\")\n+    monkeypatch.setenv(\"NOT_FLASK_A\", \"b\")\n+\n     app = flask.Flask(__name__)\n-    monkeypatch.setenv(\"FLASK_A\", \"A value\")\n-    monkeypatch.setenv(\"NOT_FLASK_A\", \"Another value\")\n-    app.config.from_prefixed_env(\"NOT_FLASK_\")\n-    assert app.config[\"A\"] == \"Another value\"\n-    assert \"A value\" not in app.config.items()\n+    app.config.from_prefixed_env(\"NOT_FLASK\")\n+\n+    assert app.config[\"A\"] == \"b\"\n+\n+\n+def test_from_prefixed_env_nested(monkeypatch):\n+    monkeypatch.setenv(\"FLASK_EXIST__ok\", \"other\")\n+    monkeypatch.setenv(\"FLASK_EXIST__inner__ik\", \"2\")\n+    monkeypatch.setenv(\"FLASK_EXIST__new__more\", '{\"k\": false}')\n+    monkeypatch.setenv(\"FLASK_NEW__K\", \"v\")\n+\n+    app = flask.Flask(__name__)\n+    app.config[\"EXIST\"] = {\"ok\": \"value\", \"flag\": True, \"inner\": {\"ik\": 1}}\n+    app.config.from_prefixed_env()\n+\n+    assert app.config[\"EXIST\"] == {\n+        \"ok\": \"other\",\n+        \"flag\": True,\n+        \"inner\": {\"ik\": 2},\n+        \"new\": {\"more\": {\"k\": False}},\n+    }\n+    assert app.config[\"NEW\"] == {\"K\": \"v\"}\n \n \n def test_config_from_mapping():\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#e75d575361841404e0b1f89c19dc7de6b325cc67", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 12 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 12 | Churn Cumulative: 1134 | Contributors (this commit): 9 | Commits (past 90d): 3 | Contributors (cumulative): 9 | DMM Complexity: 1.0\n\nDIFF:\n@@ -79,12 +79,24 @@ def test_from_prefixed_env_nested(monkeypatch):\n     app.config[\"EXIST\"] = {\"ok\": \"value\", \"flag\": True, \"inner\": {\"ik\": 1}}\n     app.config.from_prefixed_env()\n \n+    if os.name != \"nt\":\n         assert app.config[\"EXIST\"] == {\n             \"ok\": \"other\",\n             \"flag\": True,\n             \"inner\": {\"ik\": 2},\n             \"new\": {\"more\": {\"k\": False}},\n         }\n+    else:\n+        # Windows env var keys are always uppercase.\n+        assert app.config[\"EXIST\"] == {\n+            \"ok\": \"value\",\n+            \"OK\": \"other\",\n+            \"flag\": True,\n+            \"inner\": {\"ik\": 1},\n+            \"INNER\": {\"IK\": 2},\n+            \"NEW\": {\"MORE\": {\"k\": False}},\n+        }\n+\n     assert app.config[\"NEW\"] == {\"K\": \"v\"}\n \n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#41aaaf7fa07f28ef15fd1d343142e96440889a8b", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 0 | Lines Deleted: 7 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): -2/0 | Churn Δ: 7 | Churn Cumulative: 433 | Contributors (this commit): 5 | Commits (past 90d): 3 | Contributors (cumulative): 5 | DMM Complexity: 0.0\n\nDIFF:\n@@ -7,13 +7,6 @@ import typing as t\n from werkzeug.utils import import_string\n \n \n-def _json_loads(raw: t.Union[str, bytes]) -> t.Any:\n-    try:\n-        return json.loads(raw)\n-    except json.JSONDecodeError:\n-        return raw\n-\n-\n class ConfigAttribute:\n     \"\"\"Makes an attribute forward to the config\"\"\"\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#cd4ab005a92ff996e9104c92017fe1e6daeccd46", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 2 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 172 | Contributors (this commit): 2 | Commits (past 90d): 4 | Contributors (cumulative): 2 | DMM Complexity: None\n\nDIFF:\n@@ -123,7 +123,7 @@ class Request(RequestBase):\n \n             attach_enctype_error_multidict(self)\n \n-    def on_json_loading_failed(self, e: ValueError) -> t.Any:\n+    def on_json_loading_failed(self, e: t.Optional[ValueError]) -> t.Any:\n         try:\n             return super().on_json_loading_failed(e)\n         except BadRequest as e:\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#7d264d7dc5b3e057319d43ef0897709f4c78f1ef", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 241 | Contributors (this commit): 2 | Commits (past 90d): 2 | Contributors (cumulative): 2 | DMM Complexity: None\n\nDIFF:\n@@ -42,4 +42,4 @@ from .signals import template_rendered as template_rendered\n from .templating import render_template as render_template\n from .templating import render_template_string as render_template_string\n \n-__version__ = \"2.1.0.dev0\"\n+__version__ = \"2.1.0\"\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#b109b092a95036de875246f05cdc377a2c7faab8", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 243 | Contributors (this commit): 2 | Commits (past 90d): 3 | Contributors (cumulative): 2 | DMM Complexity: None\n\nDIFF:\n@@ -42,4 +42,4 @@ from .signals import template_rendered as template_rendered\n from .templating import render_template as render_template\n from .templating import render_template_string as render_template_string\n \n-__version__ = \"2.1.0\"\n+__version__ = \"2.2.0.dev0\"\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#5589915b383a6f53e92f3822c982cce3c4083456", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 245 | Contributors (this commit): 2 | Commits (past 90d): 4 | Contributors (cumulative): 2 | DMM Complexity: None\n\nDIFF:\n@@ -42,4 +42,4 @@ from .signals import template_rendered as template_rendered\n from .templating import render_template as render_template\n from .templating import render_template_string as render_template_string\n \n-__version__ = \"2.1.0\"\n+__version__ = \"2.1.1.dev0\"\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#d023d943715f193e78413280e10d101f39501748", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 888 | Contributors (this commit): 32 | Commits (past 90d): 2 | Contributors (cumulative): 32 | DMM Complexity: None\n\nDIFF:\n@@ -8,7 +8,7 @@ setup(\n         \"Jinja2 >= 3.0\",\n         \"itsdangerous >= 2.0\",\n         \"click >= 8.0\",\n-        \"importlib-metadata; python_version < '3.10'\",\n+        \"importlib-metadata >= 3.6.0; python_version < '3.10'\",\n     ],\n     extras_require={\n         \"async\": [\"asgiref >= 3.2\"],\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#c6f297719e43380011e76ad6d070b7a27d4d1dce", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 247 | Contributors (this commit): 2 | Commits (past 90d): 5 | Contributors (cumulative): 2 | DMM Complexity: None\n\nDIFF:\n@@ -42,4 +42,4 @@ from .signals import template_rendered as template_rendered\n from .templating import render_template as render_template\n from .templating import render_template_string as render_template_string\n \n-__version__ = \"2.1.1.dev0\"\n+__version__ = \"2.1.1\"\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#411dbb37e2e37943b6282365049c2a8cee4ac9e6", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 0 | Lines Deleted: 10 | Files Changed: 1 | Hunks: 3 | Methods Changed: 1 | Complexity Δ (Sum/Max): -2/0 | Churn Δ: 10 | Churn Cumulative: 1746 | Contributors (this commit): 31 | Commits (past 90d): 1 | Contributors (cumulative): 31 | DMM Complexity: 0.0\n\nDIFF:\n@@ -7,7 +7,6 @@ import sys\n import types\n from functools import partial\n from pathlib import Path\n-from unittest.mock import patch\n \n import click\n import pytest\n@@ -25,7 +24,6 @@ from flask.cli import FlaskGroup\n from flask.cli import get_version\n from flask.cli import load_dotenv\n from flask.cli import locate_app\n-from flask.cli import main as cli_main\n from flask.cli import NoAppException\n from flask.cli import prepare_import\n from flask.cli import run_command\n@@ -654,11 +652,3 @@ def test_cli_empty(app):\n \n     result = app.test_cli_runner().invoke(args=[\"blue\", \"--help\"])\n     assert result.exit_code == 2, f\"Unexpected success:\\n\\n{result.output}\"\n-\n-\n-def test_click_7_deprecated():\n-    with patch(\"flask.cli.cli\"):\n-        if int(click.__version__[0]) < 8:\n-            pytest.deprecated_call(cli_main, match=\".* Click 7 is deprecated\")\n-        else:\n-            cli_main()\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#69f71b4d94006678a2463f76a4504208d195c367", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 249 | Contributors (this commit): 2 | Commits (past 90d): 6 | Contributors (cumulative): 2 | DMM Complexity: None\n\nDIFF:\n@@ -42,4 +42,4 @@ from .signals import template_rendered as template_rendered\n from .templating import render_template as render_template\n from .templating import render_template_string as render_template_string\n \n-__version__ = \"2.1.1\"\n+__version__ = \"2.1.2.dev0\"\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#eede1a3685e21deaeb6686e9de9b76a73b6a510c", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 5 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 2 | Complexity Δ (Sum/Max): -9/0 | Churn Δ: 6 | Churn Cumulative: 662 | Contributors (this commit): 7 | Commits (past 90d): 1 | Contributors (cumulative): 7 | DMM Complexity: 1.0\n\nDIFF:\n@@ -153,7 +153,11 @@ def dump(\n     _json.dump(obj, fp, **kwargs)\n \n \n-def loads(s: str, app: t.Optional[\"Flask\"] = None, **kwargs: t.Any) -> t.Any:\n+def loads(\n+    s: t.Union[str, bytes],\n+    app: t.Optional[\"Flask\"] = None,\n+    **kwargs: t.Any,\n+) -> t.Any:\n     \"\"\"Deserialize an object from a string of JSON.\n \n     Takes the same arguments as the built-in :func:`json.loads`, with\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#5050a18a0057df4cda6f6b00483d12d29cb59239", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 9 | Lines Deleted: 1 | Files Changed: 2 | Hunks: 3 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 10 | Churn Cumulative: 2362 | Contributors (this commit): 38 | Commits (past 90d): 4 | Contributors (cumulative): 44 | DMM Complexity: 1.0\n\nDIFF:\n@@ -763,7 +763,10 @@ class SeparatedPathType(click.Path):\n @click.option(\"--host\", \"-h\", default=\"127.0.0.1\", help=\"The interface to bind to.\")\n @click.option(\"--port\", \"-p\", default=5000, help=\"The port to bind to.\")\n @click.option(\n-    \"--cert\", type=CertParamType(), help=\"Specify a certificate file to use HTTPS.\"\n+    \"--cert\",\n+    type=CertParamType(),\n+    help=\"Specify a certificate file to use HTTPS.\",\n+    is_eager=True,\n )\n @click.option(\n     \"--key\",\n\n@@ -553,9 +553,14 @@ def test_run_cert_path():\n     with pytest.raises(click.BadParameter):\n         run_command.make_context(\"run\", [\"--key\", __file__])\n \n+    # cert specified first\n     ctx = run_command.make_context(\"run\", [\"--cert\", __file__, \"--key\", __file__])\n     assert ctx.params[\"cert\"] == (__file__, __file__)\n \n+    # key specified first\n+    ctx = run_command.make_context(\"run\", [\"--key\", __file__, \"--cert\", __file__])\n+    assert ctx.params[\"cert\"] == (__file__, __file__)\n+\n \n def test_run_cert_adhoc(monkeypatch):\n     monkeypatch.setitem(sys.modules, \"cryptography\", None)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#ef6c2b9e4aee74098a1208b42ce432d7c82fc0d3", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 16 | Lines Deleted: 13 | Files Changed: 4 | Hunks: 16 | Methods Changed: 10 | Complexity Δ (Sum/Max): -2/0 | Churn Δ: 29 | Churn Cumulative: 7837 | Contributors (this commit): 74 | Commits (past 90d): 11 | Contributors (cumulative): 96 | DMM Complexity: 0.0\n\nDIFF:\n@@ -120,7 +120,7 @@ def test_app_tearing_down_with_unhandled_exception(app, client):\n     def index():\n         raise Exception(\"dummy\")\n \n-    with pytest.raises(Exception):\n+    with pytest.raises(Exception, match=\"dummy\"):\n         with app.app_context():\n             client.get(\"/\")\n \n\n@@ -150,10 +150,7 @@ def test_request_dispatching(app, client):\n \n def test_disallow_string_for_allowed_methods(app):\n     with pytest.raises(TypeError):\n-\n-        @app.route(\"/\", methods=\"GET POST\")\n-        def index():\n-            return \"Hey\"\n+        app.add_url_rule(\"/\", methods=\"GET POST\", endpoint=\"test\")\n \n \n def test_url_mapping(app, client):\n@@ -937,6 +934,7 @@ def test_baseexception_error_handling(app, client):\n     def broken_func():\n         raise KeyboardInterrupt()\n \n+    with client:\n         with pytest.raises(KeyboardInterrupt):\n             client.get(\"/\")\n \n@@ -1243,20 +1241,25 @@ def test_response_type_errors():\n \n     with pytest.raises(TypeError) as e:\n         c.get(\"/none\")\n+\n     assert \"returned None\" in str(e.value)\n     assert \"from_none\" in str(e.value)\n \n     with pytest.raises(TypeError) as e:\n         c.get(\"/small_tuple\")\n+\n     assert \"tuple must have the form\" in str(e.value)\n \n-    pytest.raises(TypeError, c.get, \"/large_tuple\")\n+    with pytest.raises(TypeError):\n+        c.get(\"/large_tuple\")\n \n     with pytest.raises(TypeError) as e:\n         c.get(\"/bad_type\")\n+\n     assert \"it was a bool\" in str(e.value)\n \n-    pytest.raises(TypeError, c.get, \"/bad_wsgi\")\n+    with pytest.raises(TypeError):\n+        c.get(\"/bad_wsgi\")\n \n \n def test_make_response(app, req_ctx):\n@@ -1674,11 +1677,9 @@ def test_debug_mode_complains_after_first_request(app, client):\n \n     assert not app.got_first_request\n     assert client.get(\"/\").data == b\"Awesome\"\n-    with pytest.raises(AssertionError) as e:\n \n-        @app.route(\"/foo\")\n-        def broken():\n-            return \"Meh\"\n+    with pytest.raises(AssertionError) as e:\n+        app.add_url_rule(\"/foo\", endpoint=\"late\")\n \n     assert \"A setup function was called\" in str(e.value)\n \n\n@@ -305,9 +305,9 @@ def test_lazy_load_error(monkeypatch):\n \n     lazy = DispatchingApp(bad_load, use_eager_loading=False)\n \n-    with pytest.raises(BadExc):\n     # reduce flakiness by waiting for the internal loading lock\n     with lazy._lock:\n+        with pytest.raises(BadExc):\n             lazy._flush_bg_loading_exception()\n \n \n\n@@ -133,8 +133,10 @@ def test_config_from_class():\n def test_config_from_envvar(monkeypatch):\n     monkeypatch.setattr(\"os.environ\", {})\n     app = flask.Flask(__name__)\n+\n     with pytest.raises(RuntimeError) as e:\n         app.config.from_envvar(\"FOO_SETTINGS\")\n+\n     assert \"'FOO_SETTINGS' is not set\" in str(e.value)\n     assert not app.config.from_envvar(\"FOO_SETTINGS\", silent=True)\n \n@@ -147,8 +149,8 @@ def test_config_from_envvar(monkeypatch):\n \n def test_config_from_envvar_missing(monkeypatch):\n     monkeypatch.setattr(\"os.environ\", {\"FOO_SETTINGS\": \"missing.cfg\"})\n-    with pytest.raises(IOError) as e:\n     app = flask.Flask(__name__)\n+    with pytest.raises(IOError) as e:\n         app.config.from_envvar(\"FOO_SETTINGS\")\n     msg = str(e.value)\n     assert msg.startswith(\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
