{"custom_id": "flask#2af0ffaef63dbd6031d889d28e4d60794becb7b6", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 8 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 10 | Churn Cumulative: 3120 | Contributors (this commit): 20 | Commits (past 90d): 8 | Contributors (cumulative): 20 | DMM Complexity: 1.0\n\nDIFF:\n@@ -29,7 +29,7 @@ from . import json\n from .wrappers import Request, Response\n from .config import ConfigAttribute, Config\n from .ctx import RequestContext, AppContext, _AppCtxGlobals\n-from .globals import _request_ctx_stack, request\n+from .globals import _request_ctx_stack, request, session, g\n from .sessions import SecureCookieSessionInterface\n from .module import blueprint_is_module\n from .templating import DispatchingJinjaLoader, Environment, \\\n@@ -663,7 +663,13 @@ class Flask(_PackageBoundObject):\n         rv.globals.update(\n             url_for=url_for,\n             get_flashed_messages=get_flashed_messages,\n-            config=self.config\n+            config=self.config,\n+            # request, session and g are normally added with the\n+            # context processor for efficiency reasons but for imported\n+            # templates we also want the proxies in there.\n+            request=request,\n+            session=session,\n+            g=g\n         )\n         rv.filters['tojson'] = json.htmlsafe_dumps\n         return rv\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#ff2e8449ffbb37cb8ebf4d7575c0e9102c78e772", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 367 | Contributors (this commit): 3 | Commits (past 90d): 1 | Contributors (cumulative): 3 | DMM Complexity: None\n\nDIFF:\n@@ -43,7 +43,7 @@ master_doc = 'index'\n \n # General information about the project.\n project = u'Flask'\n-copyright = u'2012, Armin Ronacher'\n+copyright = u'2013, Armin Ronacher'\n \n # The version info for the project you're documenting, acts as replacement for\n # |version| and |release|, also used in various other places throughout the\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#2b30900e2c007cf39b3d73a8ad53afe2f29a3a2c", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 3 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 5 | Churn Cumulative: 1576 | Contributors (this commit): 22 | Commits (past 90d): 8 | Contributors (cumulative): 22 | DMM Complexity: 0.0\n\nDIFF:\n@@ -247,8 +247,9 @@ def url_for(endpoint, **values):\n     appctx = _app_ctx_stack.top\n     reqctx = _request_ctx_stack.top\n     if appctx is None:\n-        raise RuntimeError('Attempted to generate a URL with the application '\n-                           'context being pushed.  This has to be executed ')\n+        raise RuntimeError('Attempted to generate a URL without the '\n+                           'application context being pushed. This has to be '\n+                           'executed when application context is available.')\n \n     # If request specific information is available we have some extra\n     # features that support \"relative\" urls.\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#f1537a9d7a1e5ab53e38166a2a8fd7bad9278c18", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 6 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 8 | Churn Cumulative: 3128 | Contributors (this commit): 20 | Commits (past 90d): 3 | Contributors (cumulative): 20 | DMM Complexity: 0.0\n\nDIFF:\n@@ -1327,8 +1327,12 @@ class Flask(_PackageBoundObject):\n         # ensure not to trash sys.exc_info() at that point in case someone\n         # wants the traceback preserved in handle_http_exception.  Of course\n         # we cannot prevent users from trashing it themselves in a custom\n-        # trap_http_exception method so that's their fault then.\n-        if isinstance(e, HTTPException) and not self.trap_http_exception(e):\n+        # trap_http_exception method so that's their fault then.  Proxy\n+        # exceptions generally must always be trapped (filtered out by\n+        # e.code == None)\n+        if isinstance(e, HTTPException) \\\n+           and e.code is not None \\\n+           and not self.trap_http_exception(e):\n             return self.handle_http_exception(e)\n \n         blueprint_handlers = ()\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#61d3bbf1d237cd8f03e37af88ad4a6b59f27d4e1", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 31 | Lines Deleted: 6 | Files Changed: 2 | Hunks: 4 | Methods Changed: 7 | Complexity Δ (Sum/Max): 4/4 | Churn Δ: 37 | Churn Cumulative: 3257 | Contributors (this commit): 20 | Commits (past 90d): 5 | Contributors (cumulative): 22 | DMM Complexity: 1.0\n\nDIFF:\n@@ -1283,6 +1283,10 @@ class Flask(_PackageBoundObject):\n         .. versionadded:: 0.3\n         \"\"\"\n         handlers = self.error_handler_spec.get(request.blueprint)\n+        # Proxy exceptions don't have error codes.  We want to always return\n+        # those unchanged as errors\n+        if e.code is None:\n+            return e\n         if handlers and e.code in handlers:\n             handler = handlers[e.code]\n         else:\n@@ -1327,12 +1331,8 @@ class Flask(_PackageBoundObject):\n         # ensure not to trash sys.exc_info() at that point in case someone\n         # wants the traceback preserved in handle_http_exception.  Of course\n         # we cannot prevent users from trashing it themselves in a custom\n-        # trap_http_exception method so that's their fault then.  Proxy\n-        # exceptions generally must always be trapped (filtered out by\n-        # e.code == None)\n-        if isinstance(e, HTTPException) \\\n-           and e.code is not None \\\n-           and not self.trap_http_exception(e):\n+        # trap_http_exception method so that's their fault then.\n+        if isinstance(e, HTTPException) and not self.trap_http_exception(e):\n             return self.handle_http_exception(e)\n \n         blueprint_handlers = ()\n\n@@ -86,7 +86,32 @@ class MemoryTestCase(FlaskTestCase):\n             safe_join('/foo', '..')\n \n \n+class ExceptionTestCase(FlaskTestCase):\n+\n+    def test_aborting(self):\n+        class Foo(Exception):\n+            whatever = 42\n+        app = flask.Flask(__name__)\n+        app.testing = True\n+        @app.errorhandler(Foo)\n+        def handle_foo(e):\n+            return str(e.whatever)\n+        @app.route('/')\n+        def index():\n+            raise flask.abort(flask.redirect(flask.url_for('test')))\n+        @app.route('/test')\n+        def test():\n+            raise Foo()\n+\n+        with app.test_client() as c:\n+            rv = c.get('/')\n+            self.assertEqual(rv.headers['Location'], 'http://localhost/test')\n+            rv = c.get('/test')\n+            self.assertEqual(rv.data, '42')\n+\n+\n def suite():\n     suite = unittest.TestSuite()\n     suite.addTest(unittest.makeSuite(MemoryTestCase))\n+    suite.addTest(unittest.makeSuite(ExceptionTestCase))\n     return suite\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#b5069d07a24a3c3a54fb056aa6f4076a0e7088c7", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 34 | Lines Deleted: 0 | Files Changed: 2 | Hunks: 5 | Methods Changed: 5 | Complexity Δ (Sum/Max): 6/4 | Churn Δ: 34 | Churn Cumulative: 2309 | Contributors (this commit): 24 | Commits (past 90d): 3 | Contributors (cumulative): 29 | DMM Complexity: 0.8148148148148148\n\nDIFF:\n@@ -229,6 +229,9 @@ def url_for(endpoint, **values):\n     that this is for building URLs outside the current application, and not for\n     handling 404 NotFound errors.\n \n+    .. versionadded:: 0.10\n+       The `_scheme` parameter was added.\n+\n     .. versionadded:: 0.9\n        The `_anchor` and `_method` parameters were added.\n \n@@ -241,6 +244,8 @@ def url_for(endpoint, **values):\n     :param _external: if set to `True`, an absolute URL is generated. Server\n       address can be changed via `SERVER_NAME` configuration variable which\n       defaults to `localhost`.\n+    :param _scheme: a string specifying the desired URL scheme. The `_external`\n+      parameter must be set to `True` or a `ValueError` is raised.\n     :param _anchor: if provided this is added as anchor to the URL.\n     :param _method: if provided this explicitly specifies an HTTP method.\n     \"\"\"\n@@ -283,7 +288,14 @@ def url_for(endpoint, **values):\n \n     anchor = values.pop('_anchor', None)\n     method = values.pop('_method', None)\n+    scheme = values.pop('_scheme', None)\n     appctx.app.inject_url_defaults(endpoint, values)\n+\n+    if scheme is not None:\n+        if not external:\n+            raise ValueError('When specifying _scheme, _external must be True')\n+        url_adapter.url_scheme = scheme\n+\n     try:\n         rv = url_adapter.build(endpoint, values, method=method,\n                                force_external=external)\n\n@@ -397,6 +397,28 @@ class LoggingTestCase(FlaskTestCase):\n             self.assert_equal(flask.url_for('index', _anchor='x y'),\n                               '/#x%20y')\n \n+    def test_url_for_with_scheme(self):\n+        app = flask.Flask(__name__)\n+        @app.route('/')\n+        def index():\n+            return '42'\n+        with app.test_request_context():\n+            self.assert_equal(flask.url_for('index',\n+                                            _external=True,\n+                                            _scheme='https'),\n+                              'https://localhost/')\n+\n+    def test_url_for_with_scheme_not_external(self):\n+        app = flask.Flask(__name__)\n+        @app.route('/')\n+        def index():\n+            return '42'\n+        with app.test_request_context():\n+            self.assert_raises(ValueError,\n+                               flask.url_for,\n+                               'index',\n+                               _scheme='https')\n+\n     def test_url_with_method(self):\n         from flask.views import MethodView\n         app = flask.Flask(__name__)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#3b393f89f66733f7824a50b33b93eae9999812ad", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 72 | Lines Deleted: 0 | Files Changed: 3 | Hunks: 3 | Methods Changed: 9 | Complexity Δ (Sum/Max): 11/5 | Churn Δ: 72 | Churn Cumulative: 4069 | Contributors (this commit): 24 | Commits (past 90d): 7 | Contributors (cumulative): 29 | DMM Complexity: 1.0\n\nDIFF:\n@@ -1165,6 +1165,38 @@ class Flask(_PackageBoundObject):\n         self.jinja_env.tests[name or f.__name__] = f\n \n \n+    @setupmethod\n+    def template_global(self, name=None):\n+        \"\"\"A decorator that is used to register a custom template global function.\n+        You can specify a name for the global function, otherwise the function\n+        name will be used. Example::\n+\n+        @app.template_global()\n+        def double(n):\n+            return 2 * n\n+\n+        .. versionadded:: 0.10\n+\n+        :param name: the optional name of the global function, otherwise the\n+        function name will be used.\n+        \"\"\"\n+        def decorator(f):\n+            self.add_template_global(f, name=name)\n+            return f\n+        return decorator\n+\n+    @setupmethod\n+    def add_template_global(self, f, name=None):\n+        \"\"\"Register a custom template global function. Works exactly like the\n+        :meth:`template_global` decorator.\n+\n+        .. versionadded:: 0.10\n+\n+        :param name: the optional name of the global function, otherwise the\n+        function name will be used.\n+        \"\"\"\n+        self.jinja_env.globals[name or f.__name__] = f\n+\n     @setupmethod\n     def before_request(self, f):\n         \"\"\"Registers a function to run before each request.\"\"\"\n\n@@ -237,6 +237,34 @@ class Blueprint(_PackageBoundObject):\n             state.app.jinja_env.tests[name or f.__name__] = f\n         self.record_once(register_template)\n \n+    def app_template_global(self, name=None):\n+        \"\"\"Register a custom template global, available application wide.  Like\n+        :meth:`Flask.template_global` but for a blueprint.\n+\n+        .. versionadded:: 0.10\n+\n+        :param name: the optional name of the global, otherwise the\n+                     function name will be used.\n+        \"\"\"\n+        def decorator(f):\n+            self.add_app_template_global(f, name=name)\n+            return f\n+        return decorator\n+\n+    def add_app_template_global(self, f, name=None):\n+        \"\"\"Register a custom template global, available application wide.  Like\n+        :meth:`Flask.add_template_global` but for a blueprint.  Works exactly\n+        like the :meth:`app_template_global` decorator.\n+\n+        .. versionadded:: 0.10\n+\n+        :param name: the optional name of the global, otherwise the\n+                     function name will be used.\n+        \"\"\"\n+        def register_template(state):\n+            state.app.jinja_env.globals[name or f.__name__] = f\n+        self.record_once(register_template)\n+\n     def before_request(self, f):\n         \"\"\"Like :meth:`Flask.before_request` but for a blueprint.  This function\n         is only executed before each request that is handled by a function of\n\n@@ -256,6 +256,18 @@ class TemplatingTestCase(FlaskTestCase):\n         rv = app.test_client().get('/')\n         self.assert_('Success!' in rv.data)\n \n+    def test_add_template_global(self):\n+        app = flask.Flask(__name__)\n+        @app.template_global()\n+        def get_stuff():\n+            return 42\n+        self.assert_('get_stuff' in app.jinja_env.globals.keys())\n+        self.assert_equal(app.jinja_env.globals['get_stuff'], get_stuff)\n+        self.assert_(app.jinja_env.globals['get_stuff'](), 42)\n+        with app.app_context():\n+            rv = flask.render_template_string('{{ get_stuff() }}')\n+            self.assert_equal(rv, '42')\n+\n     def test_custom_template_loader(self):\n         class MyFlask(flask.Flask):\n             def create_global_jinja_loader(self):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#6ab569b0e3791cf04db7c333bbf5b78d33255dad", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 7 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 7 | Churn Cumulative: 3179 | Contributors (this commit): 20 | Commits (past 90d): 6 | Contributors (cumulative): 20 | DMM Complexity: None\n\nDIFF:\n@@ -1250,6 +1250,13 @@ class Flask(_PackageBoundObject):\n \n         When a teardown function was called because of a exception it will\n         be passed an error object.\n+\n+        .. admonition:: Debug Note\n+\n+           In debug mode Flask will not tear down a request on an exception\n+           immediately.  Instead if will keep it alive so that the interactive\n+           debugger can still access it.  This behavior can be controlled\n+           by the ``PRESERVE_CONTEXT_ON_EXCEPTION`` configuration variable.\n         \"\"\"\n         self.teardown_request_funcs.setdefault(None, []).append(f)\n         return f\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#6bd0080575a3413e349a20a658cc720809782238", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 7 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 8 | Churn Cumulative: 499 | Contributors (this commit): 1 | Commits (past 90d): 1 | Contributors (cumulative): 1 | DMM Complexity: 1.0\n\nDIFF:\n@@ -192,7 +192,13 @@ class SessionInterface(object):\n             return app.config['SESSION_COOKIE_DOMAIN']\n         if app.config['SERVER_NAME'] is not None:\n             # chop of the port which is usually not supported by browsers\n-            return '.' + app.config['SERVER_NAME'].rsplit(':', 1)[0]\n+            rv = '.' + app.config['SERVER_NAME'].rsplit(':', 1)[0]\n+            # Google chrome does not like cookies set to .localhost, so\n+            # we just go with no domain then.  Flask documents anyways that\n+            # cross domain cookies need a fully qualified domain name\n+            if rv == '.localhost':\n+                rv = None\n+            return rv\n \n     def get_cookie_path(self, app):\n         \"\"\"Returns the path for which the cookie should be valid.  The\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#bfeee756967ba1f6a74a6f2f4c3c617b4c0c4245", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 26 | Lines Deleted: 0 | Files Changed: 2 | Hunks: 3 | Methods Changed: 3 | Complexity Δ (Sum/Max): 4/2 | Churn Δ: 26 | Churn Cumulative: 2177 | Contributors (this commit): 4 | Commits (past 90d): 4 | Contributors (cumulative): 5 | DMM Complexity: 0.4\n\nDIFF:\n@@ -193,11 +193,21 @@ class SessionInterface(object):\n         if app.config['SERVER_NAME'] is not None:\n             # chop of the port which is usually not supported by browsers\n             rv = '.' + app.config['SERVER_NAME'].rsplit(':', 1)[0]\n+\n             # Google chrome does not like cookies set to .localhost, so\n             # we just go with no domain then.  Flask documents anyways that\n             # cross domain cookies need a fully qualified domain name\n             if rv == '.localhost':\n                 rv = None\n+\n+            # If we infer the cookie domain from the server name we need\n+            # to check if we are in a subpath.  In that case we can't\n+            # set a cross domain cookie.\n+            if rv is not None:\n+                path = self.get_cookie_path(app)\n+                if path != '/':\n+                    rv = rv.lstrip('.')\n+\n             return rv\n \n     def get_cookie_path(self, app):\n\n@@ -190,6 +190,22 @@ class BasicFunctionalityTestCase(FlaskTestCase):\n         self.assert_('domain=.example.com' in rv.headers['set-cookie'].lower())\n         self.assert_('httponly' in rv.headers['set-cookie'].lower())\n \n+    def test_session_using_server_name_port_and_path(self):\n+        app = flask.Flask(__name__)\n+        app.config.update(\n+            SECRET_KEY='foo',\n+            SERVER_NAME='example.com:8080',\n+            APPLICATION_ROOT='/foo'\n+        )\n+        @app.route('/')\n+        def index():\n+            flask.session['testing'] = 42\n+            return 'Hello World'\n+        rv = app.test_client().get('/', 'http://example.com:8080/foo')\n+        self.assert_('domain=example.com' in rv.headers['set-cookie'].lower())\n+        self.assert_('path=/foo' in rv.headers['set-cookie'].lower())\n+        self.assert_('httponly' in rv.headers['set-cookie'].lower())\n+\n     def test_session_using_application_root(self):\n         class PrefixPathMiddleware(object):\n             def __init__(self, app, prefix):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#b2aae044ca9c9875c594d57a3bd92bd80d8d56ff", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 32 | Lines Deleted: 1 | Files Changed: 4 | Hunks: 6 | Methods Changed: 4 | Complexity Δ (Sum/Max): 4/4 | Churn Δ: 33 | Churn Cumulative: 2017 | Contributors (this commit): 24 | Commits (past 90d): 5 | Contributors (cumulative): 32 | DMM Complexity: 1.0\n\nDIFF:\n@@ -34,7 +34,7 @@ from .templating import render_template, render_template_string\n # the signals\n from .signals import signals_available, template_rendered, request_started, \\\n      request_finished, got_request_exception, request_tearing_down, \\\n-     appcontext_tearing_down\n+     appcontext_tearing_down, message_flashed\n \n # We're not exposing the actual json module but a convenient wrapper around\n # it.\n\n@@ -35,6 +35,7 @@ except ImportError:\n \n from jinja2 import FileSystemLoader\n \n+from .signals import message_flashed\n from .globals import session, _request_ctx_stack, _app_ctx_stack, \\\n      current_app, request\n \n@@ -361,6 +362,8 @@ def flash(message, category='message'):\n     flashes = session.get('_flashes', [])\n     flashes.append((category, message))\n     session['_flashes'] = flashes\n+    message_flashed.send(current_app._get_current_object(),\n+                         message=message, category=category)\n \n \n def get_flashed_messages(with_categories=False, category_filter=[]):\n\n@@ -50,3 +50,4 @@ request_finished = _signals.signal('request-finished')\n request_tearing_down = _signals.signal('request-tearing-down')\n got_request_exception = _signals.signal('got-request-exception')\n appcontext_tearing_down = _signals.signal('appcontext-tearing-down')\n+message_flashed = _signals.signal('message-flashed')\n\n@@ -8,6 +8,8 @@\n     :copyright: (c) 2011 by Armin Ronacher.\n     :license: BSD, see LICENSE for more details.\n \"\"\"\n+from __future__ import with_statement\n+\n import flask\n import unittest\n from flask.testsuite import FlaskTestCase\n@@ -95,6 +97,31 @@ class SignalsTestCase(FlaskTestCase):\n         finally:\n             flask.got_request_exception.disconnect(record, app)\n \n+    def test_flash_signal(self):\n+        app = flask.Flask(__name__)\n+        app.config['SECRET_KEY'] = 'secret'\n+\n+        @app.route('/')\n+        def index():\n+            flask.flash('This is a flash message', category='notice')\n+            return flask.redirect('/other')\n+\n+        recorded = []\n+        def record(sender, message, category):\n+            recorded.append((message, category))\n+\n+        flask.message_flashed.connect(record, app)\n+        try:\n+            client = app.test_client()\n+            with client.session_transaction():\n+                client.get('/')\n+                self.assert_equal(len(recorded), 1)\n+                message, category = recorded[0]\n+                self.assert_equal(message, 'This is a flash message')\n+                self.assert_equal(category, 'notice')\n+        finally:\n+            flask.message_flashed.disconnect(record, app)\n+\n \n def suite():\n     suite = unittest.TestSuite()\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#78ae0ec7f8d436df789d98c64e3579a196f52ada", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 189 | Contributors (this commit): 2 | Commits (past 90d): 1 | Contributors (cumulative): 2 | DMM Complexity: None\n\nDIFF:\n@@ -142,6 +142,8 @@ def jsonify(*args, **kwargs):\n \n     Example usage::\n     \n+        from flask import jsonify\n+\n         @app.route('/_get_current_user')\n         def get_current_user():\n             return jsonify(username=g.user.username,\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#b9355a7d5f79cfa06324a72cbaef4b9ec7a299d3", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 5 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 5 | Churn Cumulative: 3184 | Contributors (this commit): 21 | Commits (past 90d): 5 | Contributors (cumulative): 21 | DMM Complexity: None\n\nDIFF:\n@@ -1065,6 +1065,11 @@ class Flask(_PackageBoundObject):\n         The first `None` refers to the active blueprint.  If the error\n         handler should be application wide `None` shall be used.\n \n+        .. versionadded:: 0.7\n+            Use :meth:`register_error_handler` instead of modifying\n+            :attr:`error_handler_spec` directly, for application wide error\n+            handlers.\n+            \n         .. versionadded:: 0.7\n            One can now additionally also register custom exception types\n            that do not necessarily have to be a subclass of the\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#f74f446961f9fd8ecb2edffca53b82016cc41343", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 3186 | Contributors (this commit): 22 | Commits (past 90d): 6 | Contributors (cumulative): 22 | DMM Complexity: None\n\nDIFF:\n@@ -1679,7 +1679,7 @@ class Flask(_PackageBoundObject):\n         bp = ctx.request.blueprint\n         funcs = ctx._after_request_functions\n         if bp is not None and bp in self.after_request_funcs:\n-            funcs = reversed(self.after_request_funcs[bp])\n+            funcs = chain(funcs, reversed(self.after_request_funcs[bp]))\n         if None in self.after_request_funcs:\n             funcs = chain(funcs, reversed(self.after_request_funcs[None]))\n         for handler in funcs:\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#1358fd9f3e0d1cdfa2a948a1176b276188ea959e", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 2 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 238 | Contributors (this commit): 10 | Commits (past 90d): 1 | Contributors (cumulative): 10 | DMM Complexity: None\n\nDIFF:\n@@ -8,7 +8,7 @@ intentions. And before you ask: It's BSD licensed!\n Flask is Fun\n ````````````\n \n-::\n+.. code:: python\n \n     from flask import Flask\n     app = Flask(__name__)\n@@ -23,7 +23,7 @@ Flask is Fun\n And Easy to Setup\n `````````````````\n \n-::\n+.. code:: bash\n \n     $ pip install Flask\n     $ python hello.py\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#097353695e3178a38403b204ae4889c8a32bf997", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 267 | Lines Deleted: 113 | Files Changed: 5 | Hunks: 14 | Methods Changed: 40 | Complexity Δ (Sum/Max): 19/23 | Churn Δ: 380 | Churn Cumulative: 5904 | Contributors (this commit): 26 | Commits (past 90d): 8 | Contributors (cumulative): 38 | DMM Complexity: 1.0\n\nDIFF:\n@@ -26,7 +26,7 @@ from .helpers import url_for, flash, send_file, send_from_directory, \\\n from .globals import current_app, g, request, session, _request_ctx_stack, \\\n      _app_ctx_stack\n from .ctx import has_request_context, has_app_context, \\\n-     after_this_request\n+     after_this_request, copy_current_request_context\n from .module import Module\n from .blueprints import Blueprint\n from .templating import render_template, render_template_string\n\n@@ -1821,3 +1821,9 @@ class Flask(_PackageBoundObject):\n     def __call__(self, environ, start_response):\n         \"\"\"Shortcut for :attr:`wsgi_app`.\"\"\"\n         return self.wsgi_app(environ, start_response)\n+\n+    def __repr__(self):\n+        return '<%s %r>' % (\n+            self.__class__.__name__,\n+            self.name,\n+        )\n\n@@ -10,6 +10,7 @@\n \"\"\"\n \n import sys\n+from functools import update_wrapper\n \n from werkzeug.exceptions import HTTPException\n \n@@ -19,7 +20,24 @@ from .module import blueprint_is_module\n \n class _AppCtxGlobals(object):\n     \"\"\"A plain object.\"\"\"\n-    pass\n+\n+    def __getitem__(self, name):\n+        try:\n+            return getattr(self, name)\n+        except AttributeError:\n+            return None\n+\n+    def __setitem__(self, name, value):\n+        setattr(self, name, value)\n+\n+    def __delitem__(self, name, value):\n+        delattr(self, name, value)\n+\n+    def __repr__(self):\n+        top = _app_ctx_stack.top\n+        if top is not None:\n+            return '<flask.g of %r>' % top.app.name\n+        return object.__repr__(self)\n \n \n def after_this_request(f):\n@@ -47,6 +65,41 @@ def after_this_request(f):\n     return f\n \n \n+def copy_current_request_context(f):\n+    \"\"\"A helper function that decorates a function to retain the current\n+    request context.  This is useful when working with greenlets.  The moment\n+    the function is decorated a copy of the request context is created and\n+    then pushed when the function is called.\n+\n+    Example::\n+\n+        import gevent\n+        from flask import copy_current_request_context\n+\n+        @app.route('/')\n+        def index():\n+            @copy_current_request_context\n+            def do_some_work():\n+                # do some work here, it can access flask.request like you\n+                # would otherwise in the view function.\n+                ...\n+            gevent.spawn(do_some_work)\n+            return 'Regular response'\n+\n+    .. versionadded:: 0.10\n+    \"\"\"\n+    top = _request_ctx_stack.top\n+    if top is None:\n+        raise RuntimeError('This decorator can only be used at local scopes '\n+            'when a request context is on the stack.  For instance within '\n+            'view functions.')\n+    reqctx = top.copy()\n+    def wrapper(*args, **kwargs):\n+        with reqctx:\n+            return f(*args, **kwargs)\n+    return update_wrapper(wrapper, f)\n+\n+\n def has_request_context():\n     \"\"\"If you have code that wants to test if a request context is there or\n     not this function can be used.  For instance, you may want to take advantage\n@@ -161,9 +214,11 @@ class RequestContext(object):\n     that situation, otherwise your unittests will leak memory.\n     \"\"\"\n \n-    def __init__(self, app, environ):\n+    def __init__(self, app, environ, request=None):\n         self.app = app\n-        self.request = app.request_class(environ)\n+        if request is None:\n+            request = app.request_class(environ)\n+        self.request = request\n         self.url_adapter = app.create_url_adapter(self.request)\n         self.flashes = None\n         self.session = None\n@@ -202,6 +257,20 @@ class RequestContext(object):\n     g = property(_get_g, _set_g)\n     del _get_g, _set_g\n \n+    def copy(self):\n+        \"\"\"Creates a copy of this request context with the same request object.\n+        This can be used to move a request context to a different greenlet.\n+        Because the actual request object is the same this cannot be used to\n+        move a request context to a different thread unless access to the\n+        request object is locked.\n+\n+        .. versionadded:: 0.10\n+        \"\"\"\n+        return self.__class__(self.app,\n+            environ=self.request.environ,\n+            request=self.request\n+        )\n+\n     def match_request(self):\n         \"\"\"Can be overridden by a subclass to hook into the matching\n         of the request.\n@@ -299,5 +368,5 @@ class RequestContext(object):\n             self.__class__.__name__,\n             self.request.url,\n             self.request.method,\n-            self.app.name\n+            self.app.name,\n         )\n\n@@ -666,19 +666,6 @@ class BasicFunctionalityTestCase(FlaskTestCase):\n             else:\n                 self.fail('Expected exception')\n \n-    def test_teardown_on_pop(self):\n-        buffer = []\n-        app = flask.Flask(__name__)\n-        @app.teardown_request\n-        def end_of_request(exception):\n-            buffer.append(exception)\n-\n-        ctx = app.test_request_context()\n-        ctx.push()\n-        self.assert_equal(buffer, [])\n-        ctx.pop()\n-        self.assert_equal(buffer, [None])\n-\n     def test_response_creation(self):\n         app = flask.Flask(__name__)\n         @app.route('/unicode')\n@@ -821,53 +808,6 @@ class BasicFunctionalityTestCase(FlaskTestCase):\n         self.assert_equal(repr(flask.g), '<LocalProxy unbound>')\n         self.assertFalse(flask.g)\n \n-    def test_proper_test_request_context(self):\n-        app = flask.Flask(__name__)\n-        app.config.update(\n-            SERVER_NAME='localhost.localdomain:5000'\n-        )\n-\n-        @app.route('/')\n-        def index():\n-            return None\n-\n-        @app.route('/', subdomain='foo')\n-        def sub():\n-            return None\n-\n-        with app.test_request_context('/'):\n-            self.assert_equal(flask.url_for('index', _external=True), 'http://localhost.localdomain:5000/')\n-\n-        with app.test_request_context('/'):\n-            self.assert_equal(flask.url_for('sub', _external=True), 'http://foo.localhost.localdomain:5000/')\n-\n-        try:\n-            with app.test_request_context('/', environ_overrides={'HTTP_HOST': 'localhost'}):\n-                pass\n-        except Exception, e:\n-            self.assert_(isinstance(e, ValueError))\n-            self.assert_equal(str(e), \"the server name provided \" +\n-                    \"('localhost.localdomain:5000') does not match the \" + \\\n-                    \"server name from the WSGI environment ('localhost')\")\n-\n-        try:\n-            app.config.update(SERVER_NAME='localhost')\n-            with app.test_request_context('/', environ_overrides={'SERVER_NAME': 'localhost'}):\n-                pass\n-        except ValueError, e:\n-            raise ValueError(\n-                \"No ValueError exception should have been raised \\\"%s\\\"\" % e\n-            )\n-\n-        try:\n-            app.config.update(SERVER_NAME='localhost:80')\n-            with app.test_request_context('/', environ_overrides={'SERVER_NAME': 'localhost:80'}):\n-                pass\n-        except ValueError, e:\n-            raise ValueError(\n-                \"No ValueError exception should have been raised \\\"%s\\\"\" % e\n-            )\n-\n     def test_test_app_proper_environ(self):\n         app = flask.Flask(__name__)\n         app.config.update(\n@@ -1127,53 +1067,6 @@ class BasicFunctionalityTestCase(FlaskTestCase):\n         self.assert_(flask._app_ctx_stack.top is None)\n \n \n-class ContextTestCase(FlaskTestCase):\n-\n-    def test_context_binding(self):\n-        app = flask.Flask(__name__)\n-        @app.route('/')\n-        def index():\n-            return 'Hello %s!' % flask.request.args['name']\n-        @app.route('/meh')\n-        def meh():\n-            return flask.request.url\n-\n-        with app.test_request_context('/?name=World'):\n-            self.assert_equal(index(), 'Hello World!')\n-        with app.test_request_context('/meh'):\n-            self.assert_equal(meh(), 'http://localhost/meh')\n-        self.assert_(flask._request_ctx_stack.top is None)\n-\n-    def test_context_test(self):\n-        app = flask.Flask(__name__)\n-        self.assert_(not flask.request)\n-        self.assert_(not flask.has_request_context())\n-        ctx = app.test_request_context()\n-        ctx.push()\n-        try:\n-            self.assert_(flask.request)\n-            self.assert_(flask.has_request_context())\n-        finally:\n-            ctx.pop()\n-\n-    def test_manual_context_binding(self):\n-        app = flask.Flask(__name__)\n-        @app.route('/')\n-        def index():\n-            return 'Hello %s!' % flask.request.args['name']\n-\n-        ctx = app.test_request_context('/?name=World')\n-        ctx.push()\n-        self.assert_equal(index(), 'Hello World!')\n-        ctx.pop()\n-        try:\n-            index()\n-        except RuntimeError:\n-            pass\n-        else:\n-            self.assert_(0, 'expected runtime error')\n-\n-\n class SubdomainTestCase(FlaskTestCase):\n \n     def test_basic_support(self):\n@@ -1251,6 +1144,5 @@ class SubdomainTestCase(FlaskTestCase):\n def suite():\n     suite = unittest.TestSuite()\n     suite.addTest(unittest.makeSuite(BasicFunctionalityTestCase))\n-    suite.addTest(unittest.makeSuite(ContextTestCase))\n     suite.addTest(unittest.makeSuite(SubdomainTestCase))\n     return suite\n\n@@ -0,0 +1,187 @@\n+# -*- coding: utf-8 -*-\n+\"\"\"\n+    flask.testsuite.reqctx\n+    ~~~~~~~~~~~~~~~~~~~~~~\n+\n+    Tests the request context.\n+\n+    :copyright: (c) 2012 by Armin Ronacher.\n+    :license: BSD, see LICENSE for more details.\n+\"\"\"\n+\n+from __future__ import with_statement\n+\n+import flask\n+import unittest\n+try:\n+    from greenlet import greenlet\n+except ImportError:\n+    greenlet = None\n+from flask.testsuite import FlaskTestCase\n+\n+\n+class RequestContextTestCase(FlaskTestCase):\n+\n+    def test_teardown_on_pop(self):\n+        buffer = []\n+        app = flask.Flask(__name__)\n+        @app.teardown_request\n+        def end_of_request(exception):\n+            buffer.append(exception)\n+\n+        ctx = app.test_request_context()\n+        ctx.push()\n+        self.assert_equal(buffer, [])\n+        ctx.pop()\n+        self.assert_equal(buffer, [None])\n+\n+    def test_proper_test_request_context(self):\n+        app = flask.Flask(__name__)\n+        app.config.update(\n+            SERVER_NAME='localhost.localdomain:5000'\n+        )\n+\n+        @app.route('/')\n+        def index():\n+            return None\n+\n+        @app.route('/', subdomain='foo')\n+        def sub():\n+            return None\n+\n+        with app.test_request_context('/'):\n+            self.assert_equal(flask.url_for('index', _external=True), 'http://localhost.localdomain:5000/')\n+\n+        with app.test_request_context('/'):\n+            self.assert_equal(flask.url_for('sub', _external=True), 'http://foo.localhost.localdomain:5000/')\n+\n+        try:\n+            with app.test_request_context('/', environ_overrides={'HTTP_HOST': 'localhost'}):\n+                pass\n+        except Exception, e:\n+            self.assert_(isinstance(e, ValueError))\n+            self.assert_equal(str(e), \"the server name provided \" +\n+                    \"('localhost.localdomain:5000') does not match the \" + \\\n+                    \"server name from the WSGI environment ('localhost')\")\n+\n+        try:\n+            app.config.update(SERVER_NAME='localhost')\n+            with app.test_request_context('/', environ_overrides={'SERVER_NAME': 'localhost'}):\n+                pass\n+        except ValueError, e:\n+            raise ValueError(\n+                \"No ValueError exception should have been raised \\\"%s\\\"\" % e\n+            )\n+\n+        try:\n+            app.config.update(SERVER_NAME='localhost:80')\n+            with app.test_request_context('/', environ_overrides={'SERVER_NAME': 'localhost:80'}):\n+                pass\n+        except ValueError, e:\n+            raise ValueError(\n+                \"No ValueError exception should have been raised \\\"%s\\\"\" % e\n+            )\n+\n+    def test_context_binding(self):\n+        app = flask.Flask(__name__)\n+        @app.route('/')\n+        def index():\n+            return 'Hello %s!' % flask.request.args['name']\n+        @app.route('/meh')\n+        def meh():\n+            return flask.request.url\n+\n+        with app.test_request_context('/?name=World'):\n+            self.assert_equal(index(), 'Hello World!')\n+        with app.test_request_context('/meh'):\n+            self.assert_equal(meh(), 'http://localhost/meh')\n+        self.assert_(flask._request_ctx_stack.top is None)\n+\n+    def test_context_test(self):\n+        app = flask.Flask(__name__)\n+        self.assert_(not flask.request)\n+        self.assert_(not flask.has_request_context())\n+        ctx = app.test_request_context()\n+        ctx.push()\n+        try:\n+            self.assert_(flask.request)\n+            self.assert_(flask.has_request_context())\n+        finally:\n+            ctx.pop()\n+\n+    def test_manual_context_binding(self):\n+        app = flask.Flask(__name__)\n+        @app.route('/')\n+        def index():\n+            return 'Hello %s!' % flask.request.args['name']\n+\n+        ctx = app.test_request_context('/?name=World')\n+        ctx.push()\n+        self.assert_equal(index(), 'Hello World!')\n+        ctx.pop()\n+        try:\n+            index()\n+        except RuntimeError:\n+            pass\n+        else:\n+            self.assert_(0, 'expected runtime error')\n+\n+    def test_greenlet_context_copying(self):\n+        app = flask.Flask(__name__)\n+        greenlets = []\n+\n+        @app.route('/')\n+        def index():\n+            reqctx = flask._request_ctx_stack.top.copy()\n+            def g():\n+                self.assert_(not flask.request)\n+                self.assert_(not flask.current_app)\n+                with reqctx:\n+                    self.assert_(flask.request)\n+                    self.assert_equal(flask.current_app, app)\n+                    self.assert_equal(flask.request.path, '/')\n+                    self.assert_equal(flask.request.args['foo'], 'bar')\n+                self.assert_(not flask.request)\n+                return 42\n+            greenlets.append(greenlet(g))\n+            return 'Hello World!'\n+\n+        rv = app.test_client().get('/?foo=bar')\n+        self.assert_equal(rv.data, 'Hello World!')\n+\n+        result = greenlets[0].run()\n+        self.assert_equal(result, 42)\n+\n+    def test_greenlet_context_copying_api(self):\n+        app = flask.Flask(__name__)\n+        greenlets = []\n+\n+        @app.route('/')\n+        def index():\n+            reqctx = flask._request_ctx_stack.top.copy()\n+            @flask.copy_current_request_context\n+            def g():\n+                self.assert_(flask.request)\n+                self.assert_equal(flask.current_app, app)\n+                self.assert_equal(flask.request.path, '/')\n+                self.assert_equal(flask.request.args['foo'], 'bar')\n+                return 42\n+            greenlets.append(greenlet(g))\n+            return 'Hello World!'\n+\n+        rv = app.test_client().get('/?foo=bar')\n+        self.assert_equal(rv.data, 'Hello World!')\n+\n+        result = greenlets[0].run()\n+        self.assert_equal(result, 42)\n+\n+    # Disable test if we don't have greenlets available\n+    if greenlet is None:\n+        test_greenlet_context_copying = None\n+        test_greenlet_context_copying_api = None\n+\n+\n+def suite():\n+    suite = unittest.TestSuite()\n+    suite.addTest(unittest.makeSuite(RequestContextTestCase))\n+    return suite\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#18673ba370e6744049aa2622b5973506d80659e0", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 9 | Lines Deleted: 0 | Files Changed: 2 | Hunks: 7 | Methods Changed: 6 | Complexity Δ (Sum/Max): 2/2 | Churn Δ: 9 | Churn Cumulative: 2294 | Contributors (this commit): 4 | Commits (past 90d): 3 | Contributors (cumulative): 5 | DMM Complexity: 0.0\n\nDIFF:\n@@ -9,6 +9,7 @@\n     :license: BSD, see LICENSE for more details.\n \"\"\"\n \n+import uuid\n import hashlib\n from datetime import datetime\n from werkzeug.http import http_date, parse_date\n@@ -58,6 +59,8 @@ class TaggedJSONSerializer(object):\n         def _tag(value):\n             if isinstance(value, tuple):\n                 return {' t': [_tag(x) for x in value]}\n+            elif isinstance(value, uuid.UUID):\n+                return {' u': value.hex}\n             elif callable(getattr(value, '__html__', None)):\n                 return {' m': unicode(value.__html__())}\n             elif isinstance(value, list):\n@@ -84,6 +87,8 @@ class TaggedJSONSerializer(object):\n             the_key, the_value = obj.iteritems().next()\n             if the_key == ' t':\n                 return tuple(the_value)\n+            elif the_key == ' u':\n+                return uuid.UUID(the_value)\n             elif the_key == ' m':\n                 return Markup(the_value)\n             elif the_key == ' d':\n\n@@ -12,6 +12,7 @@\n from __future__ import with_statement\n \n import re\n+import uuid\n import flask\n import pickle\n import unittest\n@@ -319,10 +320,12 @@ class BasicFunctionalityTestCase(FlaskTestCase):\n         app.secret_key = 'development-key'\n         app.testing = True\n         now = datetime.utcnow().replace(microsecond=0)\n+        the_uuid = uuid.uuid4()\n \n         @app.after_request\n         def modify_session(response):\n             flask.session['m'] = flask.Markup('Hello!')\n+            flask.session['u'] = the_uuid\n             flask.session['dt'] = now\n             flask.session['t'] = (1, 2, 3)\n             return response\n@@ -337,6 +340,7 @@ class BasicFunctionalityTestCase(FlaskTestCase):\n         self.assert_equal(rv['m'], flask.Markup('Hello!'))\n         self.assert_equal(type(rv['m']), flask.Markup)\n         self.assert_equal(rv['dt'], now)\n+        self.assert_equal(rv['u'], the_uuid)\n         self.assert_equal(rv['t'], (1, 2, 3))\n \n     def test_flashes(self):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#c349c91affd1d2123f50ab7a3d8c571da489338e", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 6 | Lines Deleted: 3 | Files Changed: 1 | Hunks: 3 | Methods Changed: 1 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 9 | Churn Cumulative: 198 | Contributors (this commit): 2 | Commits (past 90d): 2 | Contributors (cumulative): 2 | DMM Complexity: 1.0\n\nDIFF:\n@@ -8,6 +8,7 @@\n     :copyright: (c) 2012 by Armin Ronacher.\n     :license: BSD, see LICENSE for more details.\n \"\"\"\n+import uuid\n from datetime import datetime\n from .globals import current_app, request\n \n@@ -30,9 +31,9 @@ __all__ = ['dump', 'dumps', 'load', 'loads', 'htmlsafe_dump',\n \n class JSONEncoder(_json.JSONEncoder):\n     \"\"\"The default Flask JSON encoder.  This one extends the default simplejson\n-    encoder by also supporting ``datetime`` objects as well as ``Markup``\n-    objects which are serialized as RFC 822 datetime strings (same as the HTTP\n-    date format).  In order to support more data types override the\n+    encoder by also supporting ``datetime`` objects, ``UUID`` as well as\n+    ``Markup`` objects which are serialized as RFC 822 datetime strings (same\n+    as the HTTP date format).  In order to support more data types override the\n     :meth:`default` method.\n     \"\"\"\n \n@@ -55,6 +56,8 @@ class JSONEncoder(_json.JSONEncoder):\n         \"\"\"\n         if isinstance(o, datetime):\n             return http_date(o)\n+        if isinstance(o, uuid.UUID):\n+            return str(o)\n         if hasattr(o, '__html__'):\n             return unicode(o.__html__())\n         return _json.JSONEncoder.default(self, o)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#574a97cd701df65ef1b4aff3f3e0549d69ce5419", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 3 | Methods Changed: 1 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 3 | Churn Cumulative: 120 | Contributors (this commit): 2 | Commits (past 90d): 1 | Contributors (cumulative): 2 | DMM Complexity: 1.0\n\nDIFF:\n@@ -11,12 +11,12 @@\n \n from __future__ import with_statement\n \n+import os\n import gc\n import sys\n import flask\n import threading\n import unittest\n-from werkzeug.test import run_wsgi_app, create_environ\n from werkzeug.exceptions import NotFound\n from flask.testsuite import FlaskTestCase\n \n@@ -112,6 +112,7 @@ class ExceptionTestCase(FlaskTestCase):\n \n def suite():\n     suite = unittest.TestSuite()\n+    if os.environ.get('RUN_FLASK_MEMORY_TESTS') == '1':\n         suite.addTest(unittest.makeSuite(MemoryTestCase))\n     suite.addTest(unittest.makeSuite(ExceptionTestCase))\n     return suite\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
