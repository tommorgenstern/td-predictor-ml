{"custom_id": "flask#3738f7ff99661fa0319ebe2d8228ad8c479fb46a", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 57 | Lines Deleted: 38 | Files Changed: 2 | Hunks: 16 | Methods Changed: 3 | Complexity Δ (Sum/Max): 2/2 | Churn Δ: 95 | Churn Cumulative: 7636 | Contributors (this commit): 106 | Commits (past 90d): 8 | Contributors (cumulative): 113 | DMM Complexity: 1.0\n\nDIFF:\n@@ -864,9 +864,15 @@ class Flask(_PackageBoundObject):\n             If installed, python-dotenv will be used to load environment\n             variables from :file:`.env` and :file:`.flaskenv` files.\n \n-        .. versionchanged:: 0.10\n-           The default port is now picked from the ``SERVER_NAME`` variable.\n+            If set, the :envvar:`FLASK_ENV` and :envvar:`FLASK_DEBUG`\n+            environment variables will override :attr:`env` and\n+            :attr:`debug`.\n \n+            Threaded mode is enabled by default.\n+\n+        .. versionchanged:: 0.10\n+            The default port is now picked from the ``SERVER_NAME``\n+            variable.\n         \"\"\"\n         # Change this into a no-op if the server is invoked from the\n         # command line. Have a look at cli.py for more information.\n@@ -876,9 +882,16 @@ class Flask(_PackageBoundObject):\n             return\n \n         if load_dotenv:\n-            from flask.cli import load_dotenv\n-            load_dotenv()\n+            cli.load_dotenv()\n \n+            # if set, let env vars override previous values\n+            if 'FLASK_ENV' in os.environ:\n+                self.env = get_env()\n+                self.debug = get_debug_flag()\n+            elif 'FLASK_DEBUG' in os.environ:\n+                self.debug = get_debug_flag()\n+\n+        # debug passed to method overrides all other sources\n         if debug is not None:\n             self.debug = bool(debug)\n \n@@ -892,8 +905,12 @@ class Flask(_PackageBoundObject):\n \n         host = host or sn_host or _host\n         port = int(port or sn_port or _port)\n+\n         options.setdefault('use_reloader', self.debug)\n         options.setdefault('use_debugger', self.debug)\n+        options.setdefault('threaded', True)\n+\n+        cli.show_server_banner(self.env, self.debug, self.name)\n \n         from werkzeug.serving import run_simple\n \n\n@@ -577,6 +577,28 @@ def load_dotenv(path=None):\n     return new_dir is not None  # at least one file was located and loaded\n \n \n+def show_server_banner(env, debug, app_import_path):\n+    \"\"\"Show extra startup messages the first time the server is run,\n+    ignoring the reloader.\n+    \"\"\"\n+    if os.environ.get('WERKZEUG_RUN_MAIN') == 'true':\n+        return\n+\n+    if app_import_path is not None:\n+        print(' * Serving Flask app \"{0}\"'.format(app_import_path))\n+\n+    print(' * Environment: {0}'.format(env))\n+\n+    if env == 'production':\n+        click.secho(\n+            '   WARNING: Do not use the development server in a production'\n+            ' environment.', fg='red')\n+        click.secho('   Use a production WSGI server instead.', dim=True)\n+\n+    if debug is not None:\n+        print(' * Debug mode: {0}'.format('on' if debug else 'off'))\n+\n+\n @click.command('run', short_help='Runs a development server.')\n @click.option('--host', '-h', default='127.0.0.1',\n               help='The interface to bind to.')\n@@ -596,51 +618,31 @@ def load_dotenv(path=None):\n @pass_script_info\n def run_command(info, host, port, reload, debugger, eager_loading,\n                 with_threads):\n-    \"\"\"Runs a local development server for the Flask application.\n+    \"\"\"Run a local development server.\n \n-    This local server is recommended for development purposes only but it\n-    can also be used for simple intranet deployments.  By default it will\n-    not support any sort of concurrency at all to simplify debugging.  This\n-    can be changed with the --with-threads option which will enable basic\n-    multithreading.\n+    This server is for development purposes only. It does not provide\n+    the stability, security, or performance of production WSGI servers.\n \n-    The reloader and debugger are by default enabled if the debug flag of\n-    Flask is enabled and disabled otherwise.\n+    The reloader and debugger are enabled by default if\n+    FLASK_ENV=development or FLASK_DEBUG=1.\n     \"\"\"\n-    from werkzeug.serving import run_simple\n-\n-    if get_env() == 'production':\n-        click.secho('Warning: Detected a production environment. Do not '\n-                    'use `flask run` for production use.',\n-                    fg='red')\n-        click.secho('Use a production ready WSGI server instead',\n-                    dim=True)\n-\n     debug = get_debug_flag()\n+\n     if reload is None:\n-        reload = bool(debug)\n+        reload = debug\n+\n     if debugger is None:\n-        debugger = bool(debug)\n+        debugger = debug\n+\n     if eager_loading is None:\n         eager_loading = not reload\n \n+    show_server_banner(get_env(), debug, info.app_import_path)\n     app = DispatchingApp(info.load_app, use_eager_loading=eager_loading)\n \n-    # Extra startup messages.  This depends a bit on Werkzeug internals to\n-    # not double execute when the reloader kicks in.\n-    if os.environ.get('WERKZEUG_RUN_MAIN') != 'true':\n-        # If we have an import path we can print it out now which can help\n-        # people understand what's being served.  If we do not have an\n-        # import path because the app was loaded through a callback then\n-        # we won't print anything.\n-        if info.app_import_path is not None:\n-            print(' * Serving Flask app \"%s\"' % info.app_import_path)\n-        print(' * Env %s' % get_env())\n-        if debug is not None:\n-            print(' * Forcing debug mode %s' % (debug and 'on' or 'off'))\n-\n-    run_simple(host, port, app, use_reloader=reload,\n-               use_debugger=debugger, threaded=with_threads)\n+    from werkzeug.serving import run_simple\n+    run_simple(host, port, app, use_reloader=reload, use_debugger=debugger,\n+               threaded=with_threads)\n \n \n @click.command('shell', short_help='Runs a shell in the app context.')\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#8bdf820e9b9c166883ef9717e127ba46ebe43cae", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 43 | Lines Deleted: 18 | Files Changed: 2 | Hunks: 8 | Methods Changed: 3 | Complexity Δ (Sum/Max): 2/4 | Churn Δ: 61 | Churn Cumulative: 1155 | Contributors (this commit): 22 | Commits (past 90d): 3 | Contributors (cumulative): 24 | DMM Complexity: 1.0\n\nDIFF:\n@@ -6,16 +6,52 @@\n     :copyright: (c) 2015 by the Flask Team, see AUTHORS for more details.\n     :license: BSD, see LICENSE for more details.\n \"\"\"\n-import flask\n import gc\n import os\n-import sys\n import pkgutil\n-import pytest\n+import sys\n import textwrap\n+\n+import pytest\n+from _pytest import monkeypatch\n+\n+import flask\n from flask import Flask as _Flask\n \n \n+@pytest.fixture(scope='session', autouse=True)\n+def _standard_os_environ():\n+    \"\"\"Set up ``os.environ`` at the start of the test session to have\n+    standard values. Returns a list of operations that is used by\n+    :func:`._reset_os_environ` after each test.\n+    \"\"\"\n+    mp = monkeypatch.MonkeyPatch()\n+    out = (\n+        (os.environ, 'FLASK_APP', monkeypatch.notset),\n+        (os.environ, 'FLASK_ENV', monkeypatch.notset),\n+        (os.environ, 'FLASK_DEBUG', monkeypatch.notset),\n+        (os.environ, 'FLASK_RUN_FROM_CLI', monkeypatch.notset),\n+        (os.environ, 'WERKZEUG_RUN_MAIN', monkeypatch.notset),\n+    )\n+\n+    for _, key, value in out:\n+        if value is monkeypatch.notset:\n+            mp.delenv(key, False)\n+        else:\n+            mp.setenv(key, value)\n+\n+    yield out\n+    mp.undo()\n+\n+\n+@pytest.fixture(autouse=True)\n+def _reset_os_environ(monkeypatch, _standard_os_environ):\n+    \"\"\"Reset ``os.environ`` to the standard environ after each test,\n+    in case a test changed something without cleaning up.\n+    \"\"\"\n+    monkeypatch._setitem.extend(_standard_os_environ)\n+\n+\n class Flask(_Flask):\n     testing = True\n     secret_key = 'test key'\n\n@@ -23,9 +23,11 @@ from _pytest.monkeypatch import notset\n from click.testing import CliRunner\n \n from flask import Flask, current_app\n-from flask.cli import AppGroup, FlaskGroup, NoAppException, ScriptInfo, dotenv, \\\n-    find_best_app, get_version, load_dotenv, locate_app, prepare_import, \\\n+from flask.cli import (\n+    AppGroup, FlaskGroup, NoAppException, ScriptInfo, dotenv,\n+    find_best_app, get_version, load_dotenv, locate_app, prepare_import,\n     with_appcontext\n+)\n \n cwd = os.getcwd()\n test_path = os.path.abspath(os.path.join(\n@@ -33,19 +35,6 @@ test_path = os.path.abspath(os.path.join(\n ))\n \n \n-@pytest.fixture(autouse=True)\n-def manage_os_environ(monkeypatch):\n-    # can't use monkeypatch.delitem since we don't want to restore a value\n-    os.environ.pop('FLASK_APP', None)\n-    os.environ.pop('FLASK_DEBUG', None)\n-    # use monkeypatch internals to force-delete environ keys\n-    monkeypatch._setitem.extend((\n-        (os.environ, 'FLASK_APP', notset),\n-        (os.environ, 'FLASK_DEBUG', notset),\n-        (os.environ, 'FLASK_RUN_FROM_CLI', notset),\n-    ))\n-\n-\n @pytest.fixture\n def runner():\n     return CliRunner()\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#87c2e121e0bf32f5234eabbf4773a82f9d5523d2", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 38 | Lines Deleted: 30 | Files Changed: 2 | Hunks: 8 | Methods Changed: 4 | Complexity Δ (Sum/Max): -2/0 | Churn Δ: 68 | Churn Cumulative: 7609 | Contributors (this commit): 125 | Commits (past 90d): 8 | Contributors (cumulative): 140 | DMM Complexity: 0.0\n\nDIFF:\n@@ -785,36 +785,39 @@ class Flask(_PackageBoundObject):\n             rv.update(processor())\n         return rv\n \n-    #: The environment value.  This is typically set from outside the\n-    #: process by setting the `FLASK_ENV` environment variable and can be\n-    #: used to quickly switch between different environments like\n-    #: `production` and `development`.  If not set this defaults to\n-    #: `production`.\n+    #: What environment the app is running in. Flask and extensions may\n+    #: enable behaviors based on the environment, such as enabling debug\n+    #: mode. This maps to the :data:`ENV` config key. This is set by the\n+    #: :envvar:`FLASK_ENV` environment variable and may not behave as\n+    #: expected if set in code.\n+    #:\n+    #: **Do not enable development when deploying in production.**\n+    #:\n+    #: Default: ``'production'``\n     env = ConfigAttribute('ENV')\n \n     def _get_debug(self):\n         return self.config['DEBUG']\n+\n     def _set_debug(self, value):\n-        self._set_debug_value(value)\n-\n-    #: The debug flag.  If this is ``True`` it enables debugging of the\n-    #: application.  In debug mode the debugger will kick in when an\n-    #: unhandled exception occurs and the integrated server will\n-    #: automatically reload the application if changes in the code are\n-    #: detected.\n-    #:\n-    #: This value should only be configured by the :envvar:`FLASK_DEBUG`\n-    #: environment variable.  Changing it by other means will not yield\n-    #: consistent results.  The default value depends on the Flask\n-    #: environment and will be true for the development environment and false\n-    #: otherwise.\n-    debug = property(_get_debug, _set_debug)\n-    del _get_debug, _set_debug\n-\n-    def _set_debug_value(self, value):\n         self.config['DEBUG'] = value\n         self.jinja_env.auto_reload = self.templates_auto_reload\n \n+    #: Whether debug mode is enabled. When using ``flask run`` to start\n+    #: the development server, an interactive debugger will be shown for\n+    #: unhandled exceptions, and the server will be reloaded when code\n+    #: changes. This maps to the :data:`DEBUG` config key. This is\n+    #: enabled when :attr:`env` is ``'development'`` and is overridden\n+    #: by the ``FLASK_DEBUG`` environment variable. It may not behave as\n+    #: expected if set in code.\n+    #:\n+    #: **Do not enable debug mode when deploying in production.**\n+    #:\n+    #: Default: ``True`` if :attr:`env` is ``'development'``, or\n+    #: ``False`` otherwise.\n+    debug = property(_get_debug, _set_debug)\n+    del _get_debug, _set_debug\n+\n     def run(self, host=None, port=None, debug=None,\n             load_dotenv=True, **options):\n         \"\"\"Runs the application on a local development server.\n\n@@ -47,19 +47,24 @@ _os_alt_seps = list(sep for sep in [os.path.sep, os.path.altsep]\n \n \n def get_env():\n-    val = os.environ.get('FLASK_ENV')\n-    if not val:\n-        val = 'production'\n-    return val\n+    \"\"\"Get the environment the app is running in, indicated by the\n+    :envvar:`FLASK_ENV` environment variable. The default is\n+    ``'production'``.\n+    \"\"\"\n+    return os.environ.get('FLASK_ENV') or 'production'\n \n \n def get_debug_flag():\n+    \"\"\"Get whether debug mode should be enabled for the app, indicated\n+    by the :envvar:`FLASK_DEBUG` environment variable. The default is\n+    ``True`` if :func:`.get_env` returns ``'development'``, or ``False``\n+    otherwise.\n+    \"\"\"\n     val = os.environ.get('FLASK_DEBUG')\n+\n     if not val:\n-        env = get_env()\n-        if env == 'development':\n-            return True\n-        return False\n+        return get_env() == 'development'\n+\n     return val.lower() not in ('0', 'false', 'no')\n \n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#a1d9ebe4abebdb824aa9a397b001de5f9130e7a3", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 49 | Lines Deleted: 1 | Files Changed: 3 | Hunks: 7 | Methods Changed: 5 | Complexity Δ (Sum/Max): 3/2 | Churn Δ: 50 | Churn Cumulative: 9027 | Contributors (this commit): 107 | Commits (past 90d): 8 | Contributors (cumulative): 133 | DMM Complexity: 1.0\n\nDIFF:\n@@ -284,6 +284,7 @@ class Flask(_PackageBoundObject):\n         'SESSION_COOKIE_PATH':                  None,\n         'SESSION_COOKIE_HTTPONLY':              True,\n         'SESSION_COOKIE_SECURE':                False,\n+        'SESSION_COOKIE_SAMESITE':              None,\n         'SESSION_REFRESH_EACH_REQUEST':         True,\n         'MAX_CONTENT_LENGTH':                   None,\n         'SEND_FILE_MAX_AGE_DEFAULT':            timedelta(hours=12),\n\n@@ -249,6 +249,13 @@ class SessionInterface(object):\n         \"\"\"\n         return app.config['SESSION_COOKIE_SECURE']\n \n+    def get_cookie_samesite(self, app):\n+        \"\"\"Returns \"Strict\", \"Lax\" or None if the cookie should use\n+        samesite attribute.  This currently just returns the value of\n+        the ``SESSION_COOKIE_SAMESITE`` setting.\n+        \"\"\"\n+        return app.config['SESSION_COOKIE_SAMESITE']\n+\n     def get_expiration_time(self, app, session):\n         \"\"\"A helper method that returns an expiration date for the session\n         or ``None`` if the session is linked to the browser session.  The\n@@ -362,6 +369,7 @@ class SecureCookieSessionInterface(SessionInterface):\n \n         httponly = self.get_cookie_httponly(app)\n         secure = self.get_cookie_secure(app)\n+        samesite = self.get_cookie_samesite(app)\n         expires = self.get_expiration_time(app, session)\n         val = self.get_signing_serializer(app).dumps(dict(session))\n         response.set_cookie(\n@@ -371,5 +379,6 @@ class SecureCookieSessionInterface(SessionInterface):\n             httponly=httponly,\n             domain=domain,\n             path=path,\n-            secure=secure\n+            secure=secure,\n+            samesite=samesite\n         )\n\n@@ -319,6 +319,7 @@ def test_session_using_session_settings(app, client):\n         SESSION_COOKIE_DOMAIN='.example.com',\n         SESSION_COOKIE_HTTPONLY=False,\n         SESSION_COOKIE_SECURE=True,\n+        SESSION_COOKIE_SAMESITE='Strict',\n         SESSION_COOKIE_PATH='/'\n     )\n \n@@ -333,8 +334,45 @@ def test_session_using_session_settings(app, client):\n     assert 'path=/' in cookie\n     assert 'secure' in cookie\n     assert 'httponly' not in cookie\n+    assert 'samesite' in cookie\n \n \n+def test_session_using_samesite_attribute(app, client):\n+    app.config.update(\n+        SERVER_NAME='www.example.com:8080',\n+        APPLICATION_ROOT='/test',\n+        SESSION_COOKIE_DOMAIN='.example.com',\n+        SESSION_COOKIE_HTTPONLY=False,\n+        SESSION_COOKIE_SECURE=True,\n+        SESSION_COOKIE_SAMESITE='anyvalue',\n+        SESSION_COOKIE_PATH='/'\n+    )\n+\n+    @app.route('/')\n+    def index():\n+        flask.session['testing'] = 42\n+        return 'Hello World'\n+\n+    # assert excption when samesite is not set to 'Strict', 'Lax' or None\n+    with pytest.raises(ValueError):\n+        rv = client.get('/', 'http://www.example.com:8080/test/')\n+\n+    # assert the samesite flag is not set in the cookie, when set to None\n+    app.config.update(SESSION_COOKIE_SAMESITE=None)\n+    rv = client.get('/', 'http://www.example.com:8080/test/')\n+    cookie = rv.headers['set-cookie'].lower()\n+    assert 'samesite' not in cookie\n+\n+    app.config.update(SESSION_COOKIE_SAMESITE='Strict')\n+    rv = client.get('/', 'http://www.example.com:8080/test/')\n+    cookie = rv.headers['set-cookie'].lower()\n+    assert 'samesite=strict' in cookie\n+\n+    app.config.update(SESSION_COOKIE_SAMESITE='Lax')\n+    rv = client.get('/', 'http://www.example.com:8080/test/')\n+    cookie = rv.headers['set-cookie'].lower()\n+    assert 'samesite=lax' in cookie\n+\n def test_session_localhost_warning(recwarn, app, client):\n     app.config.update(\n         SERVER_NAME='localhost:5000',\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#2beedabaafb16f2ba255c54c0875beb0d43664fd", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 153 | Lines Deleted: 5 | Files Changed: 2 | Hunks: 11 | Methods Changed: 8 | Complexity Δ (Sum/Max): 23/18 | Churn Δ: 158 | Churn Cumulative: 3439 | Contributors (this commit): 33 | Commits (past 90d): 9 | Contributors (cumulative): 43 | DMM Complexity: 0.43529411764705883\n\nDIFF:\n@@ -14,6 +14,7 @@ import ast\n import inspect\n import os\n import re\n+import ssl\n import sys\n import traceback\n from functools import update_wrapper\n@@ -21,9 +22,10 @@ from operator import attrgetter\n from threading import Lock, Thread\n \n import click\n+from werkzeug.utils import import_string\n \n from . import __version__\n-from ._compat import getargspec, iteritems, reraise\n+from ._compat import getargspec, iteritems, reraise, text_type\n from .globals import current_app\n from .helpers import get_debug_flag, get_env\n \n@@ -599,11 +601,96 @@ def show_server_banner(env, debug, app_import_path):\n         print(' * Debug mode: {0}'.format('on' if debug else 'off'))\n \n \n+class CertParamType(click.ParamType):\n+    \"\"\"Click option type for the ``--cert`` option. Allows either an\n+    existing file, the string ``'adhoc'``, or an import for a\n+    :class:`~ssl.SSLContext` object.\n+    \"\"\"\n+\n+    name = 'path'\n+\n+    def __init__(self):\n+        self.path_type = click.Path(\n+            exists=True, dir_okay=False, resolve_path=True)\n+\n+    def convert(self, value, param, ctx):\n+        try:\n+            return self.path_type(value, param, ctx)\n+        except click.BadParameter:\n+            value = click.STRING(value, param, ctx).lower()\n+\n+            if value == 'adhoc':\n+                try:\n+                    import OpenSSL\n+                except ImportError:\n+                    raise click.BadParameter(\n+                        'Using ad-hoc certificates requires pyOpenSSL.',\n+                        ctx, param)\n+\n+                return value\n+\n+            obj = import_string(value, silent=True)\n+\n+            if sys.version_info < (2, 7):\n+                if obj:\n+                    return obj\n+            else:\n+                if isinstance(obj, ssl.SSLContext):\n+                    return obj\n+\n+            raise\n+\n+\n+def _validate_key(ctx, param, value):\n+    \"\"\"The ``--key`` option must be specified when ``--cert`` is a file.\n+    Modifies the ``cert`` param to be a ``(cert, key)`` pair if needed.\n+    \"\"\"\n+    cert = ctx.params.get('cert')\n+    is_adhoc = cert == 'adhoc'\n+\n+    if sys.version_info < (2, 7):\n+        is_context = cert and not isinstance(cert, (text_type, bytes))\n+    else:\n+        is_context = isinstance(cert, ssl.SSLContext)\n+\n+    if value is not None:\n+        if is_adhoc:\n+            raise click.BadParameter(\n+                'When \"--cert\" is \"adhoc\", \"--key\" is not used.',\n+                ctx, param)\n+\n+        if is_context:\n+            raise click.BadParameter(\n+                'When \"--cert\" is an SSLContext object, \"--key is not used.',\n+                ctx, param)\n+\n+        if not cert:\n+            raise click.BadParameter(\n+                '\"--cert\" must also be specified.',\n+                ctx, param)\n+\n+        ctx.params['cert'] = cert, value\n+\n+    else:\n+        if cert and not (is_adhoc or is_context):\n+            raise click.BadParameter(\n+                'Required when using \"--cert\".',\n+                ctx, param)\n+\n+    return value\n+\n+\n @click.command('run', short_help='Runs a development server.')\n @click.option('--host', '-h', default='127.0.0.1',\n               help='The interface to bind to.')\n @click.option('--port', '-p', default=5000,\n               help='The port to bind to.')\n+@click.option('--cert', type=CertParamType(),\n+              help='Specify a certificate file to use HTTPS.')\n+@click.option('--key',\n+              type=click.Path(exists=True, dir_okay=False, resolve_path=True),\n+              callback=_validate_key, expose_value=False,\n+              help='The key file to use when specifying a certificate.')\n @click.option('--reload/--no-reload', default=None,\n               help='Enable or disable the reloader. By default the reloader '\n               'is active if debug is enabled.')\n@@ -617,7 +704,7 @@ def show_server_banner(env, debug, app_import_path):\n               help='Enable or disable multithreading.')\n @pass_script_info\n def run_command(info, host, port, reload, debugger, eager_loading,\n-                with_threads):\n+                with_threads, cert):\n     \"\"\"Run a local development server.\n \n     This server is for development purposes only. It does not provide\n@@ -642,7 +729,7 @@ def run_command(info, host, port, reload, debugger, eager_loading,\n \n     from werkzeug.serving import run_simple\n     run_simple(host, port, app, use_reloader=reload, use_debugger=debugger,\n-               threaded=with_threads)\n+               threaded=with_threads, ssl_context=cert)\n \n \n @click.command('shell', short_help='Runs a shell in the app context.')\n\n@@ -14,7 +14,9 @@\n from __future__ import absolute_import\n \n import os\n+import ssl\n import sys\n+import types\n from functools import partial\n \n import click\n@@ -24,8 +26,8 @@ from click.testing import CliRunner\n \n from flask import Flask, current_app\n from flask.cli import (\n-    AppGroup, FlaskGroup, NoAppException, ScriptInfo, dotenv,\n-    find_best_app, get_version, load_dotenv, locate_app, prepare_import,\n+    AppGroup, FlaskGroup, NoAppException, ScriptInfo, dotenv, find_best_app,\n+    get_version, load_dotenv, locate_app, prepare_import, run_command,\n     with_appcontext\n )\n \n@@ -464,3 +466,62 @@ def test_dotenv_optional(monkeypatch):\n     monkeypatch.chdir(test_path)\n     load_dotenv()\n     assert 'FOO' not in os.environ\n+\n+\n+def test_run_cert_path():\n+    # no key\n+    with pytest.raises(click.BadParameter):\n+        run_command.make_context('run', ['--cert', __file__])\n+\n+    # no cert\n+    with pytest.raises(click.BadParameter):\n+        run_command.make_context('run', ['--key', __file__])\n+\n+    ctx = run_command.make_context(\n+        'run', ['--cert', __file__, '--key', __file__])\n+    assert ctx.params['cert'] == (__file__, __file__)\n+\n+\n+def test_run_cert_adhoc(monkeypatch):\n+    monkeypatch.setitem(sys.modules, 'OpenSSL', None)\n+\n+    # pyOpenSSL not installed\n+    with pytest.raises(click.BadParameter):\n+        run_command.make_context('run', ['--cert', 'adhoc'])\n+\n+    # pyOpenSSL installed\n+    monkeypatch.setitem(sys.modules, 'OpenSSL', types.ModuleType('OpenSSL'))\n+    ctx = run_command.make_context('run', ['--cert', 'adhoc'])\n+    assert ctx.params['cert'] == 'adhoc'\n+\n+    # no key with adhoc\n+    with pytest.raises(click.BadParameter):\n+        run_command.make_context('run', ['--cert', 'adhoc', '--key', __file__])\n+\n+\n+def test_run_cert_import(monkeypatch):\n+    monkeypatch.setitem(sys.modules, 'not_here', None)\n+\n+    # ImportError\n+    with pytest.raises(click.BadParameter):\n+        run_command.make_context('run', ['--cert', 'not_here'])\n+\n+    # not an SSLContext\n+    if sys.version_info >= (2, 7):\n+        with pytest.raises(click.BadParameter):\n+            run_command.make_context('run', ['--cert', 'flask'])\n+\n+    # SSLContext\n+    if sys.version_info < (2, 7):\n+        ssl_context = object()\n+    else:\n+        ssl_context = ssl.SSLContext(ssl.PROTOCOL_SSLv23)\n+\n+    monkeypatch.setitem(sys.modules, 'ssl_context', ssl_context)\n+    ctx = run_command.make_context('run', ['--cert', 'ssl_context'])\n+    assert ctx.params['cert'] is ssl_context\n+\n+    # no --key with SSLContext\n+    with pytest.raises(click.BadParameter):\n+        run_command.make_context(\n+            'run', ['--cert', 'ssl_context', '--key', __file__])\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#382b13581ed44e0bc740968353bb5a25945bafdf", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 12 | Lines Deleted: 21 | Files Changed: 2 | Hunks: 9 | Methods Changed: 3 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 33 | Churn Cumulative: 3786 | Contributors (this commit): 39 | Commits (past 90d): 6 | Contributors (cumulative): 45 | DMM Complexity: 0.0\n\nDIFF:\n@@ -250,9 +250,9 @@ class SessionInterface(object):\n         return app.config['SESSION_COOKIE_SECURE']\n \n     def get_cookie_samesite(self, app):\n-        \"\"\"Returns \"Strict\", \"Lax\" or None if the cookie should use\n-        samesite attribute.  This currently just returns the value of\n-        the ``SESSION_COOKIE_SAMESITE`` setting.\n+        \"\"\"Return ``'Strict'`` or ``'Lax'`` if the cookie should use the\n+        ``SameSite`` attribute. This currently just returns the value of\n+        the :data:`SESSION_COOKIE_SAMESITE` setting.\n         \"\"\"\n         return app.config['SESSION_COOKIE_SAMESITE']\n \n\n@@ -319,7 +319,7 @@ def test_session_using_session_settings(app, client):\n         SESSION_COOKIE_DOMAIN='.example.com',\n         SESSION_COOKIE_HTTPONLY=False,\n         SESSION_COOKIE_SECURE=True,\n-        SESSION_COOKIE_SAMESITE='Strict',\n+        SESSION_COOKIE_SAMESITE='Lax',\n         SESSION_COOKIE_PATH='/'\n     )\n \n@@ -338,41 +338,32 @@ def test_session_using_session_settings(app, client):\n \n \n def test_session_using_samesite_attribute(app, client):\n-    app.config.update(\n-        SERVER_NAME='www.example.com:8080',\n-        APPLICATION_ROOT='/test',\n-        SESSION_COOKIE_DOMAIN='.example.com',\n-        SESSION_COOKIE_HTTPONLY=False,\n-        SESSION_COOKIE_SECURE=True,\n-        SESSION_COOKIE_SAMESITE='anyvalue',\n-        SESSION_COOKIE_PATH='/'\n-    )\n-\n     @app.route('/')\n     def index():\n         flask.session['testing'] = 42\n         return 'Hello World'\n \n-    # assert excption when samesite is not set to 'Strict', 'Lax' or None\n-    with pytest.raises(ValueError):\n-        rv = client.get('/', 'http://www.example.com:8080/test/')\n+    app.config.update(SESSION_COOKIE_SAMESITE='invalid')\n+\n+    with pytest.raises(ValueError):\n+        client.get('/')\n \n-    # assert the samesite flag is not set in the cookie, when set to None\n     app.config.update(SESSION_COOKIE_SAMESITE=None)\n-    rv = client.get('/', 'http://www.example.com:8080/test/')\n+    rv = client.get('/')\n     cookie = rv.headers['set-cookie'].lower()\n     assert 'samesite' not in cookie\n \n     app.config.update(SESSION_COOKIE_SAMESITE='Strict')\n-    rv = client.get('/', 'http://www.example.com:8080/test/')\n+    rv = client.get('/')\n     cookie = rv.headers['set-cookie'].lower()\n     assert 'samesite=strict' in cookie\n \n     app.config.update(SESSION_COOKIE_SAMESITE='Lax')\n-    rv = client.get('/', 'http://www.example.com:8080/test/')\n+    rv = client.get('/')\n     cookie = rv.headers['set-cookie'].lower()\n     assert 'samesite=lax' in cookie\n \n+\n def test_session_localhost_warning(recwarn, app, client):\n     app.config.update(\n         SERVER_NAME='localhost:5000',\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#0570393bc471d72eca128ded5edc868f13a87b0a", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 3 | Lines Deleted: 3 | Files Changed: 1 | Hunks: 2 | Methods Changed: 0 | Complexity Δ (Sum/Max): -18/0 | Churn Δ: 6 | Churn Cumulative: 2509 | Contributors (this commit): 27 | Commits (past 90d): 8 | Contributors (cumulative): 27 | DMM Complexity: None\n\nDIFF:\n@@ -731,12 +731,12 @@ A general utility script for Flask applications.\n \n Provides commands from Flask, extensions, and the application. Loads the\n application defined in the FLASK_APP environment variable, or from a wsgi.py\n-file. Debug mode can be controlled with the FLASK_DEBUG\n-environment variable.\n+file. Setting the FLASK_ENV environment variable to 'development' will enable\n+debug mode.\n \n \\b\n   {prefix}{cmd} FLASK_APP=hello.py\n-  {prefix}{cmd} FLASK_DEBUG=1\n+  {prefix}{cmd} FLASK_ENV=development\n   {prefix}flask run\n \"\"\".format(\n     cmd='export' if os.name == 'posix' else 'set',\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#213afec771a92e20516e5ea468bdd2186915f186", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 186 | Contributors (this commit): 7 | Commits (past 90d): 1 | Contributors (cumulative): 7 | DMM Complexity: None\n\nDIFF:\n@@ -21,7 +21,7 @@ _date_clean_re = re.compile(r'(\\d+)(st|nd|rd|th)')\n \n \n def parse_changelog():\n-    with open('CHANGES') as f:\n+    with open('CHANGES.rst') as f:\n         lineiter = iter(f)\n         for line in lineiter:\n             match = re.search('^Version\\s+(.*)', line.strip())\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#2cba0d77eef983b605bf2f5c85a9d02fe212eda0", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 27 | Lines Deleted: 10 | Files Changed: 1 | Hunks: 5 | Methods Changed: 4 | Complexity Δ (Sum/Max): 7/7 | Churn Δ: 37 | Churn Cumulative: 2546 | Contributors (this commit): 27 | Commits (past 90d): 8 | Contributors (cumulative): 27 | DMM Complexity: 1.0\n\nDIFF:\n@@ -33,14 +33,6 @@ except ImportError:\n     dotenv = None\n \n \n-def _called_with_wrong_args(factory, exc_info):\n-    exc_type, exc_value, tb = exc_info\n-    return exc_type is TypeError and \\\n-        str(exc_value).startswith((\n-            '%s() takes' % factory.__name__,\n-            '%s() missing' % factory.__name__))\n-\n-\n class NoAppException(click.UsageError):\n     \"\"\"Raised if an application cannot be found or loaded.\"\"\"\n \n@@ -83,7 +75,7 @@ def find_best_app(script_info, module):\n                 if isinstance(app, Flask):\n                     return app\n             except TypeError:\n-                if not _called_with_wrong_args(app_factory, sys.exc_info()):\n+                if not _called_with_wrong_args(app_factory):\n                     raise\n                 raise NoAppException(\n                     'Detected factory \"{factory}\" in module \"{module}\", but '\n@@ -121,6 +113,30 @@ def call_factory(script_info, app_factory, arguments=()):\n     return app_factory()\n \n \n+def _called_with_wrong_args(factory):\n+    \"\"\"Check whether calling a function raised a ``TypeError`` because\n+    the call failed or because something in the factory raised the\n+    error.\n+\n+    :param factory: the factory function that was called\n+    :return: true if the call failed\n+    \"\"\"\n+    tb = sys.exc_info()[2]\n+\n+    try:\n+        while tb is not None:\n+            if tb.tb_frame.f_code is factory.__code__:\n+                # in the factory, it was called successfully\n+                return False\n+\n+            tb = tb.tb_next\n+\n+        # didn't reach the factory\n+        return True\n+    finally:\n+        del tb\n+\n+\n def find_app_by_string(script_info, module, app_name):\n     \"\"\"Checks if the given string is a variable name or a function. If it is a\n     function, it checks for specified arguments and whether it takes a\n@@ -158,8 +174,9 @@ def find_app_by_string(script_info, module, app_name):\n         try:\n             app = call_factory(script_info, attr, args)\n         except TypeError as e:\n-            if not _called_with_wrong_args(attr, sys.exc_info()):\n+            if not _called_with_wrong_args(attr):\n                 raise\n+\n             raise NoAppException(\n                 '{e}\\nThe factory \"{app_name}\" in module \"{module}\" could not '\n                 'be called with the specified arguments.'.format(\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#af32ea0b9449a2f4aeb858f546cdfea7254342fb", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 15 | Lines Deleted: 19 | Files Changed: 2 | Hunks: 10 | Methods Changed: 1 | Complexity Δ (Sum/Max): -1/0 | Churn Δ: 34 | Churn Cumulative: 2761 | Contributors (this commit): 65 | Commits (past 90d): 8 | Contributors (cumulative): 76 | DMM Complexity: 1.0\n\nDIFF:\n@@ -608,9 +608,6 @@ def send_file(filename_or_fp, mimetype=None, as_attachment=False,\n                  'headers' % filename, stacklevel=2)\n \n     if conditional:\n-        if callable(getattr(Range, 'to_content_range_header', None)):\n-            # Werkzeug supports Range Requests\n-            # Remove this test when support for Werkzeug <0.12 is dropped\n         try:\n             rv = rv.make_conditional(request, accept_ranges=True,\n                                      complete_length=fsize)\n@@ -618,8 +615,6 @@ def send_file(filename_or_fp, mimetype=None, as_attachment=False,\n             if file is not None:\n                 file.close()\n             raise\n-        else:\n-            rv = rv.make_conditional(request)\n         # make sure we don't send x-sendfile for servers that\n         # ignore the 304 status code for x-sendfile.\n         if rv.status_code == 304:\n\n@@ -68,28 +68,26 @@ setup(\n     include_package_data=True,\n     zip_safe=False,\n     platforms='any',\n+    python_requires='>=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*',\n     install_requires=[\n-        'Werkzeug>=0.9',\n-        'Jinja2>=2.4',\n-        'itsdangerous>=0.21',\n-        'click>=4.0',\n+        'Werkzeug>=0.14',\n+        'Jinja2>=2.10',\n+        'itsdangerous>=0.24',\n+        'click>=5.1',\n     ],\n     extras_require={\n         'dotenv': ['python-dotenv'],\n         'dev': [\n-            'blinker',\n-            'python-dotenv',\n-            'greenlet',\n             'pytest>=3',\n             'coverage',\n             'tox',\n             'sphinx',\n-            'sphinxcontrib-log-cabinet'\n         ],\n     },\n     classifiers=[\n-        'Development Status :: 4 - Beta',\n+        'Development Status :: 5 - Production/Stable',\n         'Environment :: Web Environment',\n+        'Framework :: Flask',\n         'Intended Audience :: Developers',\n         'License :: OSI Approved :: BSD License',\n         'Operating System :: OS Independent',\n@@ -101,10 +99,13 @@ setup(\n         'Programming Language :: Python :: 3.5',\n         'Programming Language :: Python :: 3.6',\n         'Topic :: Internet :: WWW/HTTP :: Dynamic Content',\n-        'Topic :: Software Development :: Libraries :: Python Modules'\n+        'Topic :: Internet :: WWW/HTTP :: WSGI :: Application',\n+        'Topic :: Software Development :: Libraries :: Application Frameworks',\n+        'Topic :: Software Development :: Libraries :: Python Modules',\n     ],\n-    entry_points='''\n-        [console_scripts]\n-        flask=flask.cli:main\n-    '''\n+    entry_points={\n+        'console_scripts': [\n+            'flask = flask.cli:main',\n+        ],\n+    },\n )\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#9bf5c3b3a3bdc3f2f2dcca2b5747378470d0d354", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 59 | Lines Deleted: 396 | Files Changed: 3 | Hunks: 32 | Methods Changed: 22 | Complexity Δ (Sum/Max): -29/2 | Churn Δ: 455 | Churn Cumulative: 1067 | Contributors (this commit): 26 | Commits (past 90d): 6 | Contributors (cumulative): 34 | DMM Complexity: 0.0\n\nDIFF:\n@@ -1,309 +0,0 @@\n-# -*- coding: utf-8 -*-\n-\"\"\"\n-    Flask Extension Tests\n-    ~~~~~~~~~~~~~~~~~~~~~\n-\n-    Tests the Flask extensions.\n-\n-    :copyright: (c) 2015 by Ali Afshar.\n-    :license: BSD, see LICENSE for more details.\n-\"\"\"\n-\n-import os\n-import sys\n-import shutil\n-import urllib2\n-import tempfile\n-import subprocess\n-import argparse\n-\n-from flask import json\n-\n-from setuptools.package_index import PackageIndex\n-from setuptools.archive_util import unpack_archive\n-\n-flask_svc_url = 'http://flask.pocoo.org/extensions/'\n-\n-\n-# OS X has awful paths when using mkstemp or gettempdir().  I don't\n-# care about security or clashes here, so pick something that is\n-# actually memorable.\n-if sys.platform == 'darwin':\n-    _tempdir = '/private/tmp'\n-else:\n-    _tempdir = tempfile.gettempdir()\n-tdir = _tempdir + '/flaskext-test'\n-flaskdir = os.path.abspath(os.path.join(os.path.dirname(__file__), '..'))\n-\n-\n-# virtualenv hack *cough*\n-os.environ['PYTHONDONTWRITEBYTECODE'] = ''\n-\n-\n-RESULT_TEMPATE = u'''\\\n-<!doctype html>\n-<title>Flask-Extension Test Results</title>\n-<style type=text/css>\n-  body         { font-family: 'Georgia', serif; font-size: 17px; color: #000; }\n-  a            { color: #004B6B; }\n-  a:hover      { color: #6D4100; }\n-  h1, h2, h3   { font-family: 'Garamond', 'Georgia', serif; font-weight: normal; }\n-  h1           { font-size: 30px; margin: 15px 0 5px 0; }\n-  h2           { font-size: 24px; margin: 15px 0 5px 0; }\n-  h3           { font-size: 19px; margin: 15px 0 5px 0; }\n-  textarea, code,\n-  pre          { font-family: 'Consolas', 'Menlo', 'Deja Vu Sans Mono',\n-                 'Bitstream Vera Sans Mono', monospace!important; font-size: 15px;\n-                 background: #eee; }\n-  pre          { padding: 7px 15px; line-height: 1.3; }\n-  p            { line-height: 1.4; }\n-  table        { border: 1px solid black; border-collapse: collapse;\n-                 margin: 15px 0; }\n-  td, th       { border: 1px solid black; padding: 4px 10px;\n-                 text-align: left; }\n-  th           { background: #eee; font-weight: normal; }\n-  tr.success   { background: #D3F5CC; }\n-  tr.failed    { background: #F5D2CB; }\n-</style>\n-<h1>Flask-Extension Test Results</h1>\n-<p>\n-  This page contains the detailed test results for the test run of\n-  all {{ 'approved' if approved }} Flask extensions.\n-<h2>Summary</h2>\n-<table class=results>\n-  <thead>\n-    <tr>\n-      <th>Extension\n-      <th>Version\n-      <th>Author\n-      <th>License\n-      <th>Outcome\n-      {%- for iptr, _ in results[0].logs|dictsort %}\n-        <th>{{ iptr }}\n-      {%- endfor %}\n-    </tr>\n-  </thead>\n-  <tbody>\n-  {%- for result in results %}\n-    {% set outcome = 'success' if result.success else 'failed' %}\n-    <tr class={{ outcome }}>\n-      <th>{{ result.name }}\n-      <td>{{ result.version }}\n-      <td>{{ result.author }}\n-      <td>{{ result.license }}\n-      <td>{{ outcome }}\n-      {%- for iptr, _ in result.logs|dictsort %}\n-        <td><a href=\"#{{ result.name }}-{{ iptr }}\">see log</a>\n-      {%- endfor %}\n-    </tr>\n-  {%- endfor %}\n-  </tbody>\n-</table>\n-<h2>Test Logs</h2>\n-<p>Detailed test logs for all tests on all platforms:\n-{%- for result in results %}\n-  {%- for iptr, log in result.logs|dictsort %}\n-    <h3 id=\"{{ result.name }}-{{ iptr }}\">\n-      {{ result.name }} - {{ result.version }} [{{ iptr }}]</h3>\n-    <pre>{{ log }}</pre>\n-  {%- endfor %}\n-{%- endfor %}\n-'''\n-\n-\n-def log(msg, *args):\n-    print('[EXTTEST] ' + (msg % args))\n-\n-\n-class TestResult(object):\n-\n-    def __init__(self, name, folder, statuscode, interpreters):\n-        intrptr = os.path.join(folder, '.tox/%s/bin/python'\n-                               % interpreters[0])\n-        self.statuscode = statuscode\n-        self.folder = folder\n-        self.success = statuscode == 0\n-\n-        def fetch(field):\n-            try:\n-                c = subprocess.Popen([intrptr, 'setup.py',\n-                                      '--' + field], cwd=folder,\n-                                      stdout=subprocess.PIPE)\n-                return c.communicate()[0].strip()\n-            except OSError:\n-                return '?'\n-        self.name = name\n-        self.license = fetch('license')\n-        self.author = fetch('author')\n-        self.version = fetch('version')\n-\n-        self.logs = {}\n-        for interpreter in interpreters:\n-            logfile = os.path.join(folder, '.tox/%s/log/test.log'\n-                                   % interpreter)\n-            if os.path.isfile(logfile):\n-                self.logs[interpreter] = open(logfile).read()\n-            else:\n-                self.logs[interpreter] = ''\n-\n-\n-def create_tdir():\n-    try:\n-        shutil.rmtree(tdir)\n-    except Exception:\n-        pass\n-    os.mkdir(tdir)\n-\n-\n-def package_flask():\n-    distfolder = tdir + '/.flask-dist'\n-    c = subprocess.Popen(['python', 'setup.py', 'sdist', '--formats=gztar',\n-                          '--dist', distfolder], cwd=flaskdir)\n-    c.wait()\n-    return os.path.join(distfolder, os.listdir(distfolder)[0])\n-\n-\n-def get_test_command(checkout_dir):\n-    if os.path.isfile(checkout_dir + '/Makefile'):\n-        return 'make test'\n-    return 'python setup.py test'\n-\n-\n-def fetch_extensions_list():\n-    req = urllib2.Request(flask_svc_url, headers={'accept':'application/json'})\n-    d = urllib2.urlopen(req).read()\n-    data = json.loads(d)\n-    for ext in data['extensions']:\n-        yield ext\n-\n-\n-def checkout_extension(name):\n-    log('Downloading extension %s to temporary folder', name)\n-    root = os.path.join(tdir, name)\n-    os.mkdir(root)\n-    checkout_path = PackageIndex().download(name, root)\n-\n-    unpack_archive(checkout_path, root)\n-    path = None\n-    for fn in os.listdir(root):\n-        path = os.path.join(root, fn)\n-        if os.path.isdir(path):\n-            break\n-    log('Downloaded to %s', path)\n-    return path\n-\n-\n-tox_template = \"\"\"[tox]\n-envlist=%(env)s\n-\n-[testenv]\n-deps=\n-  %(deps)s\n-  distribute\n-  py\n-commands=bash flaskext-runtest.sh {envlogdir}/test.log\n-downloadcache=%(cache)s\n-\"\"\"\n-\n-\n-def create_tox_ini(checkout_path, interpreters, flask_dep):\n-    tox_path = os.path.join(checkout_path, 'tox-flask-test.ini')\n-    if not os.path.exists(tox_path):\n-        with open(tox_path, 'w') as f:\n-            f.write(tox_template % {\n-                'env':      ','.join(interpreters),\n-                'cache':    tdir,\n-                'deps':     flask_dep\n-            })\n-    return tox_path\n-\n-\n-def iter_extensions(only_approved=True):\n-    for ext in fetch_extensions_list():\n-        if ext['approved'] or not only_approved:\n-            yield ext['name']\n-\n-\n-def test_extension(name, interpreters, flask_dep):\n-    checkout_path = checkout_extension(name)\n-    log('Running tests with tox in %s', checkout_path)\n-\n-    # figure out the test command and write a wrapper script.  We\n-    # can't write that directly into the tox ini because tox does\n-    # not invoke the command from the shell so we have no chance\n-    # to pipe the output into a logfile.  The /dev/null hack is\n-    # to trick py.test (if used) into not guessing widths from the\n-    # invoking terminal.\n-    test_command = get_test_command(checkout_path)\n-    log('Test command: %s', test_command)\n-    f = open(checkout_path + '/flaskext-runtest.sh', 'w')\n-    f.write(test_command + ' &> \"$1\" < /dev/null\\n')\n-    f.close()\n-\n-    # if there is a tox.ini, remove it, it will cause troubles\n-    # for us.  Remove it if present, we are running tox ourselves\n-    # afterall.\n-\n-    create_tox_ini(checkout_path, interpreters, flask_dep)\n-    rv = subprocess.call(['tox', '-c', 'tox-flask-test.ini'], cwd=checkout_path)\n-    return TestResult(name, checkout_path, rv, interpreters)\n-\n-\n-def run_tests(extensions, interpreters):\n-    results = {}\n-    create_tdir()\n-    log('Packaging Flask')\n-    flask_dep = package_flask()\n-    log('Running extension tests')\n-    log('Temporary Environment: %s', tdir)\n-    for name in extensions:\n-        log('Testing %s', name)\n-        result = test_extension(name, interpreters, flask_dep)\n-        if result.success:\n-            log('Extension test succeeded')\n-        else:\n-            log('Extension test failed')\n-        results[name] = result\n-    return results\n-\n-\n-def render_results(results, approved):\n-    from jinja2 import Template\n-    items = results.values()\n-    items.sort(key=lambda x: x.name.lower())\n-    rv = Template(RESULT_TEMPATE, autoescape=True).render(results=items,\n-                                                          approved=approved)\n-    fd, filename = tempfile.mkstemp(suffix='.html')\n-    os.fdopen(fd, 'w').write(rv.encode('utf-8') + '\\n')\n-    return filename\n-\n-\n-def main():\n-    parser = argparse.ArgumentParser(description='Runs Flask extension tests')\n-    parser.add_argument('--all', dest='all', action='store_true',\n-                        help='run against all extensions, not just approved')\n-    parser.add_argument('--browse', dest='browse', action='store_true',\n-                        help='show browser with the result summary')\n-    parser.add_argument('--env', dest='env', default='py25,py26,py27',\n-                        help='the tox environments to run against')\n-    parser.add_argument('--extension=', dest='extension', default=None,\n-                        help='tests a single extension')\n-    args = parser.parse_args()\n-\n-    if args.extension is not None:\n-        only_approved = False\n-        extensions = [args.extension]\n-    else:\n-        only_approved = not args.all\n-        extensions = iter_extensions(only_approved)\n-\n-    results = run_tests(extensions, [x.strip() for x in args.env.split(',')])\n-    filename = render_results(results, only_approved)\n-    if args.browse:\n-        import webbrowser\n-        webbrowser.open('file:///' + filename.lstrip('/'))\n-    print('Results written to {}'.format(filename))\n-\n-\n-if __name__ == '__main__':\n-    main()\n\n@@ -1,23 +1,13 @@\n #!/usr/bin/env python\n-# -*- coding: utf-8 -*-\n-\"\"\"\n-    make-release\n-    ~~~~~~~~~~~~\n-\n-    Helper script that performs a release.  Does pretty much everything\n-    automatically for us.\n-\n-    :copyright: (c) 2015 by Armin Ronacher.\n-    :license: BSD, see LICENSE for more details.\n-\"\"\"\n from __future__ import print_function\n-import sys\n+\n import os\n import re\n-from datetime import datetime, date\n-from subprocess import Popen, PIPE\n+import sys\n+from datetime import date, datetime\n+from subprocess import PIPE, Popen\n \n-_date_clean_re = re.compile(r'(\\d+)(st|nd|rd|th)')\n+_date_strip_re = re.compile(r'(?<=\\d)(st|nd|rd|th)')\n \n \n def parse_changelog():\n@@ -25,18 +15,27 @@ def parse_changelog():\n         lineiter = iter(f)\n         for line in lineiter:\n             match = re.search('^Version\\s+(.*)', line.strip())\n+\n             if match is None:\n                 continue\n+\n             version = match.group(1).strip()\n-            if lineiter.next().count('-') != len(match.group(0)):\n+\n+            if next(lineiter).count('-') != len(match.group(0)):\n                 continue\n+\n             while 1:\n-                change_info = lineiter.next().strip()\n+                change_info = next(lineiter).strip()\n+\n                 if change_info:\n                     break\n \n-            match = re.search(r'released on (\\w+\\s+\\d+\\w+\\s+\\d+)'\n-                              r'(?:, codename (.*))?(?i)', change_info)\n+            match = re.search(\n+                r'released on (\\w+\\s+\\d+\\w+\\s+\\d+)(?:, codename (.*))?',\n+                change_info,\n+                flags=re.IGNORECASE\n+            )\n+\n             if match is None:\n                 continue\n \n@@ -46,15 +45,16 @@ def parse_changelog():\n \n def bump_version(version):\n     try:\n-        parts = map(int, version.split('.'))\n+        parts = [int(i) for i in version.split('.')]\n     except ValueError:\n         fail('Current version is not numeric')\n+\n     parts[-1] += 1\n     return '.'.join(map(str, parts))\n \n \n def parse_date(string):\n-    string = _date_clean_re.sub(r'\\1', string)\n+    string = _date_strip_re.sub('', string)\n     return datetime.strptime(string, '%B %d %Y')\n \n \n@@ -65,9 +65,13 @@ def set_filename_version(filename, version_number, pattern):\n         before, old, after = match.groups()\n         changed.append(True)\n         return before + version_number + after\n+\n     with open(filename) as f:\n-        contents = re.sub(r\"^(\\s*%s\\s*=\\s*')(.+?)(')(?sm)\" % pattern,\n-                          inject_version, f.read())\n+        contents = re.sub(\n+            r\"^(\\s*%s\\s*=\\s*')(.+?)(')\" % pattern,\n+            inject_version, f.read(),\n+            flags=re.DOTALL | re.MULTILINE\n+        )\n \n     if not changed:\n         fail('Could not find %s in %s', pattern, filename)\n@@ -81,8 +85,9 @@ def set_init_version(version):\n     set_filename_version('flask/__init__.py', version, '__version__')\n \n \n-def build_and_upload():\n-    Popen([sys.executable, 'setup.py', 'release', 'sdist', 'bdist_wheel', 'upload']).wait()\n+def build():\n+    cmd = [sys.executable, 'setup.py', 'sdist', 'bdist_wheel']\n+    Popen(cmd).wait()\n \n \n def fail(message, *args):\n@@ -95,7 +100,9 @@ def info(message, *args):\n \n \n def get_git_tags():\n-    return set(Popen(['git', 'tag'], stdout=PIPE).communicate()[0].splitlines())\n+    return set(\n+        Popen(['git', 'tag'], stdout=PIPE).communicate()[0].splitlines()\n+    )\n \n \n def git_is_clean():\n@@ -116,29 +123,40 @@ def main():\n     os.chdir(os.path.join(os.path.dirname(__file__), '..'))\n \n     rv = parse_changelog()\n+\n     if rv is None:\n         fail('Could not parse changelog')\n \n     version, release_date, codename = rv\n-    dev_version = bump_version(version) + '-dev'\n+    dev_version = bump_version(version) + '.dev'\n \n-    info('Releasing %s (codename %s, release date %s)',\n-         version, codename, release_date.strftime('%d/%m/%Y'))\n+    info(\n+        'Releasing %s (codename %s, release date %s)',\n+        version, codename, release_date.strftime('%d/%m/%Y')\n+    )\n     tags = get_git_tags()\n \n     if version in tags:\n         fail('Version \"%s\" is already tagged', version)\n+\n     if release_date.date() != date.today():\n-        fail('Release date is not today (%s != %s)',\n-             release_date.date(), date.today())\n+        fail(\n+            'Release date is not today (%s != %s)',\n+            release_date.date(), date.today()\n+        )\n \n     if not git_is_clean():\n         fail('You have uncommitted changes in git')\n \n+    try:\n+        import wheel  # noqa: F401\n+    except ImportError:\n+        fail('You need to install the wheel package.')\n+\n     set_init_version(version)\n     make_git_commit('Bump version number to %s', version)\n     make_git_tag(version)\n-    build_and_upload()\n+    build()\n     set_init_version(dev_version)\n \n \n\n@@ -1,74 +1,27 @@\n-\"\"\"\n-Flask\n------\n-\n-Flask is a microframework for Python based on Werkzeug, Jinja 2 and good\n-intentions. And before you ask: It's BSD licensed!\n-\n-Flask is Fun\n-````````````\n-\n-Save in a hello.py:\n-\n-.. code:: python\n-\n-    from flask import Flask\n-    app = Flask(__name__)\n-\n-    @app.route(\"/\")\n-    def hello():\n-        return \"Hello World!\"\n-\n-    if __name__ == \"__main__\":\n-        app.run()\n-\n-And Easy to Setup\n-`````````````````\n-\n-And run it:\n-\n-.. code:: bash\n-\n-    $ pip install Flask\n-    $ python hello.py\n-    * Running on http://localhost:5000/\n-\n-Ready for production? `Read this first <http://flask.pocoo.org/docs/deploying/>`.\n-\n-Links\n-`````\n-\n-* `website <http://flask.pocoo.org/>`_\n-* `documentation <http://flask.pocoo.org/docs/>`_\n-* `development version\n-  <https://github.com/pallets/flask/zipball/master#egg=Flask-dev>`_\n-\n-\"\"\"\n+#!/usr/bin/env python\n+import io\n import re\n-import ast\n from setuptools import setup\n \n-_version_re = re.compile(r'__version__\\s+=\\s+(.*)')\n+with io.open('README.rst', 'rt', encoding='utf8') as f:\n+    readme = f.read()\n \n-with open('flask/__init__.py', 'rb') as f:\n-    version = str(ast.literal_eval(_version_re.search(\n-        f.read().decode('utf-8')).group(1)))\n+with io.open('flask/__init__.py', 'rt', encoding='utf8') as f:\n+    version = re.search(r'__version__ = \\'(.*?)\\'', f.read()).group(1)\n \n setup(\n     name='Flask',\n     version=version,\n-    url='https://github.com/pallets/flask/',\n+    url='https://www.palletsprojects.com/p/flask/',\n     license='BSD',\n     author='Armin Ronacher',\n     author_email='armin.ronacher@active-4.com',\n-    description='A microframework based on Werkzeug, Jinja2 '\n-                'and good intentions',\n-    long_description=__doc__,\n+    description='A simple framework for building complex web applications.',\n+    long_description=readme,\n     packages=['flask', 'flask.json'],\n     include_package_data=True,\n     zip_safe=False,\n     platforms='any',\n-    python_requires='>=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*',\n     install_requires=[\n         'Werkzeug>=0.14',\n         'Jinja2>=2.10',\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
