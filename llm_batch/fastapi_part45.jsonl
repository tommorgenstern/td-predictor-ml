{"custom_id": "fastapi#cdba8481c2773bfca903c439b052199ebea1eda0", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 14 | Files Changed: 1 | Hunks: 7 | Methods Changed: 2 | Complexity Δ (Sum/Max): -3/0 | Churn Δ: 16 | Churn Cumulative: 459 | Contributors (this commit): 12 | Commits (past 90d): 7 | Contributors (cumulative): 12 | DMM Complexity: 1.0\n\nDIFF:\n@@ -32,7 +32,6 @@ def jsonable_encoder(\n     exclude_defaults: bool = False,\n     exclude_none: bool = False,\n     custom_encoder: dict = {},\n-    sqlalchemy_safe: bool = True,\n ) -> Any:\n     if include is not None and not isinstance(include, set):\n         include = set(include)\n@@ -57,7 +56,6 @@ def jsonable_encoder(\n             exclude_none=exclude_none,\n             exclude_defaults=exclude_defaults,\n             custom_encoder=encoder,\n-            sqlalchemy_safe=sqlalchemy_safe,\n         )\n     if isinstance(obj, Enum):\n         return obj.value\n@@ -68,14 +66,8 @@ def jsonable_encoder(\n     if isinstance(obj, dict):\n         encoded_dict = {}\n         for key, value in obj.items():\n-            if (\n-                (\n-                    not sqlalchemy_safe\n-                    or (not isinstance(key, str))\n-                    or (not key.startswith(\"_sa\"))\n-                )\n-                and (value is not None or not exclude_none)\n-                and ((include and key in include) or not exclude or key not in exclude)\n+            if (value is not None or not exclude_none) and (\n+                (include and key in include) or not exclude or key not in exclude\n             ):\n                 encoded_key = jsonable_encoder(\n                     key,\n@@ -83,7 +75,6 @@ def jsonable_encoder(\n                     exclude_unset=exclude_unset,\n                     exclude_none=exclude_none,\n                     custom_encoder=custom_encoder,\n-                    sqlalchemy_safe=sqlalchemy_safe,\n                 )\n                 encoded_value = jsonable_encoder(\n                     value,\n@@ -91,7 +82,6 @@ def jsonable_encoder(\n                     exclude_unset=exclude_unset,\n                     exclude_none=exclude_none,\n                     custom_encoder=custom_encoder,\n-                    sqlalchemy_safe=sqlalchemy_safe,\n                 )\n                 encoded_dict[encoded_key] = encoded_value\n         return encoded_dict\n@@ -108,7 +98,6 @@ def jsonable_encoder(\n                     exclude_defaults=exclude_defaults,\n                     exclude_none=exclude_none,\n                     custom_encoder=custom_encoder,\n-                    sqlalchemy_safe=sqlalchemy_safe,\n                 )\n             )\n         return encoded_list\n@@ -144,5 +133,4 @@ def jsonable_encoder(\n         exclude_defaults=exclude_defaults,\n         exclude_none=exclude_none,\n         custom_encoder=custom_encoder,\n-        sqlalchemy_safe=sqlalchemy_safe,\n     )\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#a6897963d5ff2c836313c3b69fc6062051c07a63", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 265 | Contributors (this commit): 2 | Commits (past 90d): 14 | Contributors (cumulative): 2 | DMM Complexity: None\n\nDIFF:\n@@ -1,6 +1,6 @@\n \"\"\"FastAPI framework, high performance, easy to learn, fast to code, ready for production\"\"\"\n \n-__version__ = \"0.60.2\"\n+__version__ = \"0.61.0\"\n \n from starlette import status\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#0dfde6e284b221bf6695a98762a56d13a995e807", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 14 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 7 | Methods Changed: 2 | Complexity Δ (Sum/Max): 3/3 | Churn Δ: 16 | Churn Cumulative: 475 | Contributors (this commit): 12 | Commits (past 90d): 8 | Contributors (cumulative): 12 | DMM Complexity: 0.0\n\nDIFF:\n@@ -32,6 +32,7 @@ def jsonable_encoder(\n     exclude_defaults: bool = False,\n     exclude_none: bool = False,\n     custom_encoder: dict = {},\n+    sqlalchemy_safe: bool = True,\n ) -> Any:\n     if include is not None and not isinstance(include, set):\n         include = set(include)\n@@ -56,6 +57,7 @@ def jsonable_encoder(\n             exclude_none=exclude_none,\n             exclude_defaults=exclude_defaults,\n             custom_encoder=encoder,\n+            sqlalchemy_safe=sqlalchemy_safe,\n         )\n     if isinstance(obj, Enum):\n         return obj.value\n@@ -66,8 +68,14 @@ def jsonable_encoder(\n     if isinstance(obj, dict):\n         encoded_dict = {}\n         for key, value in obj.items():\n-            if (value is not None or not exclude_none) and (\n-                (include and key in include) or not exclude or key not in exclude\n+            if (\n+                (\n+                    not sqlalchemy_safe\n+                    or (not isinstance(key, str))\n+                    or (not key.startswith(\"_sa\"))\n+                )\n+                and (value is not None or not exclude_none)\n+                and ((include and key in include) or not exclude or key not in exclude)\n             ):\n                 encoded_key = jsonable_encoder(\n                     key,\n@@ -75,6 +83,7 @@ def jsonable_encoder(\n                     exclude_unset=exclude_unset,\n                     exclude_none=exclude_none,\n                     custom_encoder=custom_encoder,\n+                    sqlalchemy_safe=sqlalchemy_safe,\n                 )\n                 encoded_value = jsonable_encoder(\n                     value,\n@@ -82,6 +91,7 @@ def jsonable_encoder(\n                     exclude_unset=exclude_unset,\n                     exclude_none=exclude_none,\n                     custom_encoder=custom_encoder,\n+                    sqlalchemy_safe=sqlalchemy_safe,\n                 )\n                 encoded_dict[encoded_key] = encoded_value\n         return encoded_dict\n@@ -98,6 +108,7 @@ def jsonable_encoder(\n                     exclude_defaults=exclude_defaults,\n                     exclude_none=exclude_none,\n                     custom_encoder=custom_encoder,\n+                    sqlalchemy_safe=sqlalchemy_safe,\n                 )\n             )\n         return encoded_list\n@@ -133,4 +144,5 @@ def jsonable_encoder(\n         exclude_defaults=exclude_defaults,\n         exclude_none=exclude_none,\n         custom_encoder=custom_encoder,\n+        sqlalchemy_safe=sqlalchemy_safe,\n     )\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#e77ea635777d2494690ba3eb62bd005b9edeefde", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 267 | Contributors (this commit): 2 | Commits (past 90d): 12 | Contributors (cumulative): 2 | DMM Complexity: None\n\nDIFF:\n@@ -1,6 +1,6 @@\n \"\"\"FastAPI framework, high performance, easy to learn, fast to code, ready for production\"\"\"\n \n-__version__ = \"0.61.0\"\n+__version__ = \"0.61.1\"\n \n from starlette import status\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#8486b4134991715ab56ad9a11d674d93fbf54967", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 12 | Contributors (this commit): 3 | Commits (past 90d): 2 | Contributors (cumulative): 3 | DMM Complexity: None\n\nDIFF:\n@@ -16,7 +16,7 @@ class Item(BaseModel):\n     description: Optional[str] = None\n     price: float\n     tax: Optional[float] = None\n-    tags: Set[str] = []\n+    tags: Set[str] = set()\n     image: Optional[Image] = None\n \n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#492c0924c4dd2b6434e988568dd9d0daa2d23c7c", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 510 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 8 | Complexity Δ (Sum/Max): 37/37 | Churn Δ: 510 | Churn Cumulative: 510 | Contributors (this commit): 1 | Commits (past 90d): 1 | Contributors (cumulative): 1 | DMM Complexity: 0.484375\n\nDIFF:\n@@ -0,0 +1,510 @@\n+import logging\n+import subprocess\n+from collections import Counter\n+from datetime import datetime, timedelta, timezone\n+from pathlib import Path\n+from typing import Container, Dict, List, Optional, Set\n+\n+import httpx\n+from github import Github\n+import yaml\n+from pydantic import BaseModel, BaseSettings, SecretStr\n+\n+github_graphql_url = \"https://api.github.com/graphql\"\n+\n+issues_query = \"\"\"\n+query Q($after: String) { \n+  repository(name: \"fastapi\", owner: \"tiangolo\") {\n+    issues(first: 100, after: $after) {\n+      edges {\n+        cursor\n+        node {\n+          number\n+          author {\n+            login\n+            avatarUrl\n+            url\n+          }\n+          title\n+          createdAt\n+          state\n+          comments(first: 100) {\n+            nodes {\n+              createdAt\n+              author {\n+                login\n+                avatarUrl\n+                url\n+              }\n+            }\n+          }\n+        }\n+      }\n+    }\n+  }\n+}\n+\"\"\"\n+\n+prs_query = \"\"\"\n+query Q($after: String) { \n+  repository(name: \"fastapi\", owner: \"tiangolo\") {\n+    pullRequests(first: 100, after: $after) {\n+      edges {\n+        cursor\n+        node {\n+          number\n+          labels(first: 100) {\n+            nodes {\n+              name\n+            }\n+          }\n+          author {\n+            login\n+            avatarUrl\n+            url\n+          }\n+          title\n+          createdAt\n+          state\n+          comments(first: 100) {\n+            nodes {\n+              createdAt\n+              author {\n+                login\n+                avatarUrl\n+                url\n+              }\n+            }\n+          }\n+          reviews(first:100) {\n+            nodes {\n+              author {\n+                login\n+                avatarUrl\n+                url\n+              }\n+              state\n+            }\n+          }\n+        }\n+      }\n+    }\n+  }\n+}\n+\"\"\"\n+\n+sponsors_query = \"\"\"\n+query Q($after: String) {\n+  user(login: \"tiangolo\") {\n+    sponsorshipsAsMaintainer(first: 100, after: $after) {\n+      edges {\n+        cursor\n+        node {\n+          sponsorEntity {\n+            ... on Organization {\n+              login\n+              avatarUrl\n+              url\n+            }\n+            ... on User {\n+              login\n+              avatarUrl\n+              url\n+            }\n+          }\n+          tier {\n+            name\n+            monthlyPriceInDollars\n+          }\n+        }\n+      }\n+    }\n+  }\n+}\n+\"\"\"\n+\n+\n+class Author(BaseModel):\n+    login: str\n+    avatarUrl: str\n+    url: str\n+\n+\n+class CommentsNode(BaseModel):\n+    createdAt: datetime\n+    author: Optional[Author] = None\n+\n+\n+class Comments(BaseModel):\n+    nodes: List[CommentsNode]\n+\n+\n+class IssuesNode(BaseModel):\n+    number: int\n+    author: Optional[Author] = None\n+    title: str\n+    createdAt: datetime\n+    state: str\n+    comments: Comments\n+\n+\n+class IssuesEdge(BaseModel):\n+    cursor: str\n+    node: IssuesNode\n+\n+\n+class Issues(BaseModel):\n+    edges: List[IssuesEdge]\n+\n+\n+class IssuesRepository(BaseModel):\n+    issues: Issues\n+\n+\n+class IssuesResponseData(BaseModel):\n+    repository: IssuesRepository\n+\n+\n+class IssuesResponse(BaseModel):\n+    data: IssuesResponseData\n+\n+\n+class LabelNode(BaseModel):\n+    name: str\n+\n+\n+class Labels(BaseModel):\n+    nodes: List[LabelNode]\n+\n+\n+class ReviewNode(BaseModel):\n+    author: Optional[Author] = None\n+    state: str\n+\n+\n+class Reviews(BaseModel):\n+    nodes: List[ReviewNode]\n+\n+\n+class PullRequestNode(BaseModel):\n+    number: int\n+    labels: Labels\n+    author: Optional[Author] = None\n+    title: str\n+    createdAt: datetime\n+    state: str\n+    comments: Comments\n+    reviews: Reviews\n+\n+\n+class PullRequestEdge(BaseModel):\n+    cursor: str\n+    node: PullRequestNode\n+\n+\n+class PullRequests(BaseModel):\n+    edges: List[PullRequestEdge]\n+\n+\n+class PRsRepository(BaseModel):\n+    pullRequests: PullRequests\n+\n+\n+class PRsResponseData(BaseModel):\n+    repository: PRsRepository\n+\n+\n+class PRsResponse(BaseModel):\n+    data: PRsResponseData\n+\n+\n+class SponsorEntity(BaseModel):\n+    login: str\n+    avatarUrl: str\n+    url: str\n+\n+\n+class Tier(BaseModel):\n+    name: str\n+    monthlyPriceInDollars: float\n+\n+\n+class SponsorshipAsMaintainerNode(BaseModel):\n+    sponsorEntity: SponsorEntity\n+    tier: Tier\n+\n+\n+class SponsorshipAsMaintainerEdge(BaseModel):\n+    cursor: str\n+    node: SponsorshipAsMaintainerNode\n+\n+\n+class SponsorshipAsMaintainer(BaseModel):\n+    edges: List[SponsorshipAsMaintainerEdge]\n+\n+\n+class SponsorsUser(BaseModel):\n+    sponsorshipsAsMaintainer: SponsorshipAsMaintainer\n+\n+\n+class SponsorsResponseData(BaseModel):\n+    user: SponsorsUser\n+\n+\n+class SponsorsResponse(BaseModel):\n+    data: SponsorsResponseData\n+\n+\n+class Settings(BaseSettings):\n+    input_token: SecretStr\n+    github_repository: str\n+\n+\n+def get_graphql_response(\n+    *, settings: Settings, query: str, after: Optional[str] = None\n+):\n+    headers = {\"Authorization\": f\"token {settings.input_token.get_secret_value()}\"}\n+    variables = {\"after\": after}\n+    response = httpx.post(\n+        github_graphql_url,\n+        headers=headers,\n+        json={\"query\": query, \"variables\": variables, \"operationName\": \"Q\"},\n+    )\n+    if not response.status_code == 200:\n+        logging.error(f\"Response was not 200, after: {after}\")\n+        logging.error(response.text)\n+        raise RuntimeError(response.text)\n+    data = response.json()\n+    return data\n+\n+\n+def get_graphql_issue_edges(*, settings: Settings, after: Optional[str] = None):\n+    data = get_graphql_response(settings=settings, query=issues_query, after=after)\n+    graphql_response = IssuesResponse.parse_obj(data)\n+    return graphql_response.data.repository.issues.edges\n+\n+\n+def get_graphql_pr_edges(*, settings: Settings, after: Optional[str] = None):\n+    data = get_graphql_response(settings=settings, query=prs_query, after=after)\n+    graphql_response = PRsResponse.parse_obj(data)\n+    return graphql_response.data.repository.pullRequests.edges\n+\n+\n+def get_graphql_sponsor_edges(*, settings: Settings, after: Optional[str] = None):\n+    data = get_graphql_response(settings=settings, query=sponsors_query, after=after)\n+    graphql_response = SponsorsResponse.parse_obj(data)\n+    return graphql_response.data.user.sponsorshipsAsMaintainer.edges\n+\n+\n+def get_experts(settings: Settings):\n+    issue_nodes: List[IssuesNode] = []\n+    issue_edges = get_graphql_issue_edges(settings=settings)\n+\n+    while issue_edges:\n+        for edge in issue_edges:\n+            issue_nodes.append(edge.node)\n+        last_edge = issue_edges[-1]\n+        issue_edges = get_graphql_issue_edges(settings=settings, after=last_edge.cursor)\n+\n+    commentors = Counter()\n+    last_month_commentors = Counter()\n+    authors: Dict[str, Author] = {}\n+\n+    now = datetime.now(tz=timezone.utc)\n+    one_month_ago = now - timedelta(days=30)\n+\n+    for issue in issue_nodes:\n+        issue_author_name = None\n+        if issue.author:\n+            authors[issue.author.login] = issue.author\n+            issue_author_name = issue.author.login\n+        issue_commentors = set()\n+        for comment in issue.comments.nodes:\n+            if comment.author:\n+                authors[comment.author.login] = comment.author\n+                if comment.author.login == issue_author_name:\n+                    continue\n+                issue_commentors.add(comment.author.login)\n+        for author_name in issue_commentors:\n+            commentors[author_name] += 1\n+            if issue.createdAt > one_month_ago:\n+                last_month_commentors[author_name] += 1\n+    return commentors, last_month_commentors, authors\n+\n+\n+def get_contributors(settings: Settings):\n+    pr_nodes: List[PullRequestNode] = []\n+    pr_edges = get_graphql_pr_edges(settings=settings)\n+\n+    while pr_edges:\n+        for edge in pr_edges:\n+            pr_nodes.append(edge.node)\n+        last_edge = pr_edges[-1]\n+        pr_edges = get_graphql_pr_edges(settings=settings, after=last_edge.cursor)\n+\n+    contributors = Counter()\n+    commentors = Counter()\n+    reviewers = Counter()\n+    authors: Dict[str, Author] = {}\n+\n+    for pr in pr_nodes:\n+        author_name = None\n+        if pr.author:\n+            authors[pr.author.login] = pr.author\n+            author_name = pr.author.login\n+        pr_commentors: Set[str] = set()\n+        pr_reviewers: Set[str] = set()\n+        for comment in pr.comments.nodes:\n+            if comment.author:\n+                authors[comment.author.login] = comment.author\n+                if comment.author.login == author_name:\n+                    continue\n+                pr_commentors.add(comment.author.login)\n+        for author_name in pr_commentors:\n+            commentors[author_name] += 1\n+        for review in pr.reviews.nodes:\n+            if review.author:\n+                authors[review.author.login] = review.author\n+                pr_reviewers.add(review.author.login)\n+        for reviewer in pr_reviewers:\n+            reviewers[reviewer] += 1\n+        if pr.state == \"MERGED\" and pr.author:\n+            contributors[pr.author.login] += 1\n+    return contributors, commentors, reviewers, authors\n+\n+\n+def get_sponsors(settings: Settings):\n+    nodes: List[SponsorshipAsMaintainerNode] = []\n+    edges = get_graphql_sponsor_edges(settings=settings)\n+\n+    while edges:\n+        for edge in edges:\n+            nodes.append(edge.node)\n+        last_edge = edges[-1]\n+        edges = get_graphql_sponsor_edges(settings=settings, after=last_edge.cursor)\n+\n+    entities: Dict[str, SponsorEntity] = {}\n+    for node in nodes:\n+        entities[node.sponsorEntity.login] = node.sponsorEntity\n+    return entities\n+\n+\n+def get_top_users(\n+    *,\n+    counter: Counter,\n+    min_count: int,\n+    authors: Dict[str, Author],\n+    skip_users: Container[str],\n+):\n+    users = []\n+    for commentor, count in counter.most_common(50):\n+        if commentor in skip_users:\n+            continue\n+        if count >= min_count:\n+            author = authors[commentor]\n+            users.append(\n+                {\n+                    \"login\": commentor,\n+                    \"count\": count,\n+                    \"avatarUrl\": author.avatarUrl,\n+                    \"url\": author.url,\n+                }\n+            )\n+    return users\n+\n+\n+if __name__ == \"__main__\":\n+    logging.basicConfig(level=logging.INFO)\n+    settings = Settings()\n+    logging.info(f\"Using config: {settings.json()}\")\n+    g = Github(settings.input_token.get_secret_value())\n+    repo = g.get_repo(settings.github_repository)\n+    issue_commentors, issue_last_month_commentors, issue_authors = get_experts(\n+        settings=settings\n+    )\n+    contributors, pr_commentors, reviewers, pr_authors = get_contributors(\n+        settings=settings\n+    )\n+    authors = {**issue_authors, **pr_authors}\n+    maintainers_logins = {\"tiangolo\"}\n+    bot_names = {\"codecov\", \"github-actions\"}\n+    maintainers = []\n+    for login in maintainers_logins:\n+        user = authors[login]\n+        maintainers.append(\n+            {\n+                \"login\": login,\n+                \"answers\": issue_commentors[login],\n+                \"prs\": contributors[login],\n+                \"avatarUrl\": user.avatarUrl,\n+                \"url\": user.url,\n+            }\n+        )\n+\n+    min_count_expert = 10\n+    min_count_last_month = 3\n+    min_count_contributor = 4\n+    min_count_reviewer = 4\n+    skip_users = maintainers_logins | bot_names\n+    experts = get_top_users(\n+        counter=issue_commentors,\n+        min_count=min_count_expert,\n+        authors=authors,\n+        skip_users=skip_users,\n+    )\n+    last_month_active = get_top_users(\n+        counter=issue_last_month_commentors,\n+        min_count=min_count_last_month,\n+        authors=authors,\n+        skip_users=skip_users,\n+    )\n+    top_contributors = get_top_users(\n+        counter=contributors,\n+        min_count=min_count_contributor,\n+        authors=authors,\n+        skip_users=skip_users,\n+    )\n+    top_reviewers = get_top_users(\n+        counter=reviewers,\n+        min_count=min_count_reviewer,\n+        authors=authors,\n+        skip_users=skip_users,\n+    )\n+\n+    sponsors_by_login = get_sponsors(settings=settings)\n+    sponsors = []\n+    for login, sponsor in sponsors_by_login.items():\n+        sponsors.append(\n+            {\"login\": login, \"avatarUrl\": sponsor.avatarUrl, \"url\": sponsor.url}\n+        )\n+\n+    people = {\n+        \"maintainers\": maintainers,\n+        \"experts\": experts,\n+        \"last_month_active\": last_month_active,\n+        \"top_contributors\": top_contributors,\n+        \"top_reviewers\": top_reviewers,\n+        \"sponsors\": sponsors,\n+    }\n+    people_path = Path(\"./docs/en/data/people.yml\")\n+    people_path.write_text(\n+        yaml.dump(people, sort_keys=False, width=200, allow_unicode=True),\n+        encoding=\"utf-8\",\n+    )\n+    logging.info(\"Setting up GitHub Actions git user\")\n+    subprocess.run([\"git\", \"config\", \"user.name\", \"github-actions\"], check=True)\n+    subprocess.run([\"git\", \"config\", \"user.email\", \"github-actions@github.com\"], check=True)\n+    branch_name = \"fastapi-people\"\n+    logging.info(f\"Creating a new branch {branch_name}\")\n+    subprocess.run([\"git\", \"checkout\", \"-b\", branch_name], check=True)\n+    logging.info(\"Adding updated file\")\n+    subprocess.run([\"git\", \"add\", str(people_path)], check=True)\n+    logging.info(\"Committing updated file\")\n+    message = \"👥 Update FastAPI People\"\n+    result = subprocess.run([\"git\", \"commit\", \"-m\", message], check=True)\n+    logging.info(\"Pushing branch\")\n+    subprocess.run([\"git\", \"push\", \"origin\", branch_name], check=True)\n+    logging.info(\"Creating PR\")\n+    pr = repo.create_pull(title=message, body=message, base=\"master\", head=branch_name)\n+    logging.info(f\"Created PR: {pr.number}\")\n+    logging.info(\"Finished\")\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#479e87e467eafa944b0dcb78d3ed4bd7cae6cfda", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 11 | Lines Deleted: 6 | Files Changed: 1 | Hunks: 5 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 17 | Churn Cumulative: 527 | Contributors (this commit): 1 | Commits (past 90d): 2 | Contributors (cumulative): 1 | DMM Complexity: None\n\nDIFF:\n@@ -1,13 +1,14 @@\n import logging\n import subprocess\n+import sys\n from collections import Counter\n from datetime import datetime, timedelta, timezone\n from pathlib import Path\n from typing import Container, Dict, List, Optional, Set\n \n import httpx\n-from github import Github\n import yaml\n+from github import Github\n from pydantic import BaseModel, BaseSettings, SecretStr\n \n github_graphql_url = \"https://api.github.com/graphql\"\n@@ -487,13 +488,17 @@ if __name__ == \"__main__\":\n         \"sponsors\": sponsors,\n     }\n     people_path = Path(\"./docs/en/data/people.yml\")\n-    people_path.write_text(\n-        yaml.dump(people, sort_keys=False, width=200, allow_unicode=True),\n-        encoding=\"utf-8\",\n-    )\n+    people_old_content = people_path.read_text(encoding=\"utf-8\")\n+    new_content = yaml.dump(people, sort_keys=False, width=200, allow_unicode=True)\n+    if people_old_content == new_content:\n+        logging.info(\"The FastAPI People data hasn't changed, finishing.\")\n+        sys.exit(0)\n+    people_path.write_text(new_content, encoding=\"utf-8\")\n     logging.info(\"Setting up GitHub Actions git user\")\n     subprocess.run([\"git\", \"config\", \"user.name\", \"github-actions\"], check=True)\n-    subprocess.run([\"git\", \"config\", \"user.email\", \"github-actions@github.com\"], check=True)\n+    subprocess.run(\n+        [\"git\", \"config\", \"user.email\", \"github-actions@github.com\"], check=True\n+    )\n     branch_name = \"fastapi-people\"\n     logging.info(f\"Creating a new branch {branch_name}\")\n     subprocess.run([\"git\", \"checkout\", \"-b\", branch_name], check=True)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#d625963cc5cbe3980f0f3dfe71af3d8d6fb960a4", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 2 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 3 | Churn Cumulative: 530 | Contributors (this commit): 1 | Commits (past 90d): 3 | Contributors (cumulative): 1 | DMM Complexity: None\n\nDIFF:\n@@ -258,6 +258,7 @@ class SponsorsResponse(BaseModel):\n \n class Settings(BaseSettings):\n     input_token: SecretStr\n+    input_standard_token: SecretStr\n     github_repository: str\n \n \n@@ -418,7 +419,7 @@ if __name__ == \"__main__\":\n     logging.basicConfig(level=logging.INFO)\n     settings = Settings()\n     logging.info(f\"Using config: {settings.json()}\")\n-    g = Github(settings.input_token.get_secret_value())\n+    g = Github(settings.input_standard_token.get_secret_value())\n     repo = g.get_repo(settings.github_repository)\n     issue_commentors, issue_last_month_commentors, issue_authors = get_experts(\n         settings=settings\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#8650dee4bc6bbd868bfb09face4412aa7179f621", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 5 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 6 | Churn Cumulative: 480 | Contributors (this commit): 2 | Commits (past 90d): 1 | Contributors (cumulative): 2 | DMM Complexity: 0.0\n\nDIFF:\n@@ -171,7 +171,11 @@ def build_lang(\n                         new_key += (key_part,)\n                 use_lang_file_to_nav[file] = new_key\n     key_to_section = {(): []}\n-    for file, file_key in use_lang_file_to_nav.items():\n+    for file, orig_file_key in file_to_nav.items():\n+        if file in use_lang_file_to_nav:\n+            file_key = use_lang_file_to_nav[file]\n+        else:\n+            file_key = orig_file_key\n         section = get_key_section(key_to_section=key_to_section, key=file_key)\n         section.append(file)\n     new_nav = key_to_section[()]\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#f88ffd1a0bb9ed2ea6dc3ece42aaa1b45b4ee3b4", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 7 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 3 | Methods Changed: 1 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 8 | Churn Cumulative: 488 | Contributors (this commit): 2 | Commits (past 90d): 2 | Contributors (cumulative): 2 | DMM Complexity: 1.0\n\nDIFF:\n@@ -1,6 +1,7 @@\n import os\n import shutil\n from http.server import HTTPServer, SimpleHTTPRequestHandler\n+from multiprocessing import Pool\n from pathlib import Path\n from typing import Dict, Optional, Tuple\n \n@@ -207,10 +208,15 @@ def build_all():\n     typer.echo(f\"Building docs for: en\")\n     mkdocs.commands.build.build(mkdocs.config.load_config(site_dir=str(site_path)))\n     os.chdir(current_dir)\n+\n+    langs = []\n     for lang in get_lang_paths():\n         if lang == en_build_path or not lang.is_dir():\n             continue\n-        build_lang(lang.name)\n+        langs.append(lang.name)\n+    cpu_count = os.cpu_count() or 1\n+    with Pool(cpu_count * 2) as p:\n+        p.map(build_lang, langs)\n     typer.echo(\"Copying en index.md to README.md\")\n     en_index = en_build_path / \"docs\" / \"index.md\"\n     shutil.copyfile(en_index, \"README.md\")\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#4e74d4073662a8750f63b842f6304ffd860f0261", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 70 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 70 | Churn Cumulative: 70 | Contributors (this commit): 1 | Commits (past 90d): 1 | Contributors (cumulative): 1 | DMM Complexity: None\n\nDIFF:\n@@ -0,0 +1,70 @@\n+import logging\n+import sys\n+from pathlib import Path\n+from typing import Optional\n+\n+import httpx\n+from github import Github\n+from github.PullRequest import PullRequest\n+from pydantic import BaseModel, BaseSettings, SecretStr, ValidationError\n+\n+github_api = \"https://api.github.com\"\n+\n+\n+class Settings(BaseSettings):\n+    github_repository: str\n+    github_event_path: Path\n+    github_event_name: Optional[str] = None\n+    input_token: SecretStr\n+    input_deploy_url: str\n+\n+\n+class PartialGithubEventHeadCommit(BaseModel):\n+    id: str\n+\n+\n+class PartialGithubEventWorkflowRun(BaseModel):\n+    head_commit: PartialGithubEventHeadCommit\n+\n+\n+class PartialGithubEvent(BaseModel):\n+    workflow_run: PartialGithubEventWorkflowRun\n+\n+\n+if __name__ == \"__main__\":\n+    logging.basicConfig(level=logging.INFO)\n+    settings = Settings()\n+    logging.info(f\"Using config: {settings.json()}\")\n+    g = Github(settings.input_token.get_secret_value())\n+    repo = g.get_repo(settings.github_repository)\n+    try:\n+        event = PartialGithubEvent.parse_file(settings.github_event_path)\n+    except ValidationError as e:\n+        logging.error(f\"Error parsing event file: {e.errors()}\")\n+        sys.exit(0)\n+    use_pr: Optional[PullRequest] = None\n+    for pr in repo.get_pulls():\n+        if pr.head.sha == event.workflow_run.head_commit.id:\n+            use_pr = pr\n+            break\n+    if not use_pr:\n+        logging.error(\n+            f\"No PR found for hash: {event.workflow_run.head_commit.id}\"\n+        )\n+        sys.exit(0)\n+    github_headers = {\n+        \"Authorization\": f\"token {settings.input_token.get_secret_value()}\"\n+    }\n+    url = f\"{github_api}/repos/{settings.github_repository}/issues/{use_pr.number}/comments\"\n+    logging.info(f\"Using comments URL: {url}\")\n+    response = httpx.post(\n+        url,\n+        headers=github_headers,\n+        json={\n+            \"body\": f\"📝 Docs preview for commit {use_pr.head.sha} at: {settings.input_deploy_url}\"\n+        },\n+    )\n+    if not (200 <= response.status_code <= 300):\n+        logging.error(f\"Error posting comment: {response.text}\")\n+        sys.exit(1)\n+    logging.info(\"Finished\")\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#e1755f4fa63fb2e3b3d5029ffe0b956e1ef0a109", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 0 | Lines Deleted: 63 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 63 | Churn Cumulative: 126 | Contributors (this commit): 1 | Commits (past 90d): 1 | Contributors (cumulative): 1 | DMM Complexity: None\n\nDIFF:\n@@ -1,63 +0,0 @@\n-import logging\n-from datetime import datetime\n-from pathlib import Path\n-from typing import List, Optional\n-\n-import httpx\n-from pydantic import BaseModel, BaseSettings, SecretStr\n-\n-github_api = \"https://api.github.com\"\n-netlify_api = \"https://api.netlify.com\"\n-\n-\n-class Settings(BaseSettings):\n-    input_name: str\n-    input_token: SecretStr\n-    input_path: str\n-    github_repository: str\n-    github_event_path: Path\n-    github_event_name: Optional[str] = None\n-\n-\n-class Artifact(BaseModel):\n-    id: int\n-    node_id: str\n-    name: str\n-    size_in_bytes: int\n-    url: str\n-    archive_download_url: str\n-    expired: bool\n-    created_at: datetime\n-    updated_at: datetime\n-\n-\n-class ArtifactResponse(BaseModel):\n-    total_count: int\n-    artifacts: List[Artifact]\n-\n-\n-if __name__ == \"__main__\":\n-    logging.basicConfig(level=logging.INFO)\n-    settings = Settings()\n-    logging.info(f\"Using config: {settings.json()}\")\n-    github_headers = {\n-        \"Authorization\": f\"token {settings.input_token.get_secret_value()}\"\n-    }\n-    response = httpx.get(\n-        f\"{github_api}/repos/{settings.github_repository}/actions/artifacts\",\n-        headers=github_headers,\n-    )\n-    data = response.json()\n-    artifacts_response = ArtifactResponse.parse_obj(data)\n-    use_artifact: Optional[Artifact] = None\n-    for artifact in artifacts_response.artifacts:\n-        if artifact.name == settings.input_name:\n-            use_artifact = artifact\n-            break\n-    assert use_artifact\n-    file_response = httpx.get(\n-        use_artifact.archive_download_url, headers=github_headers, timeout=30\n-    )\n-    zip_file = Path(settings.input_path)\n-    zip_file.write_bytes(file_response.content)\n-    logging.info(\"Finished\")\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#a42c69049647f4fb731afc86c6eeb959248217e4", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 65 | Lines Deleted: 10 | Files Changed: 2 | Hunks: 11 | Methods Changed: 6 | Complexity Δ (Sum/Max): 7/6 | Churn Δ: 75 | Churn Cumulative: 1093 | Contributors (this commit): 2 | Commits (past 90d): 7 | Contributors (cumulative): 3 | DMM Complexity: 1.0\n\nDIFF:\n@@ -375,7 +375,7 @@ def get_contributors(settings: Settings):\n     return contributors, commentors, reviewers, authors\n \n \n-def get_sponsors(settings: Settings):\n+def get_individual_sponsors(settings: Settings, max_individual_sponsor: int = 5):\n     nodes: List[SponsorshipAsMaintainerNode] = []\n     edges = get_graphql_sponsor_edges(settings=settings)\n \n@@ -387,6 +387,8 @@ def get_sponsors(settings: Settings):\n \n     entities: Dict[str, SponsorEntity] = {}\n     for node in nodes:\n+        if node.tier.monthlyPriceInDollars > max_individual_sponsor:\n+            continue\n         entities[node.sponsorEntity.login] = node.sponsorEntity\n     return entities\n \n@@ -473,7 +475,7 @@ if __name__ == \"__main__\":\n         skip_users=skip_users,\n     )\n \n-    sponsors_by_login = get_sponsors(settings=settings)\n+    sponsors_by_login = get_individual_sponsors(settings=settings)\n     sponsors = []\n     for login, sponsor in sponsors_by_login.items():\n         sponsors.append(\n\n@@ -1,4 +1,5 @@\n import os\n+import re\n import shutil\n from http.server import HTTPServer, SimpleHTTPRequestHandler\n from multiprocessing import Pool\n@@ -11,6 +12,7 @@ import mkdocs.config\n import mkdocs.utils\n import typer\n import yaml\n+from jinja2 import Template\n \n app = typer.Typer()\n \n@@ -194,6 +196,62 @@ def build_lang(\n     typer.secho(f\"Successfully built docs for: {lang}\", color=typer.colors.GREEN)\n \n \n+index_sponsors_template = \"\"\"\n+{% if sponsors %}\n+{% for sponsor in sponsors.gold -%}\n+<a href=\"{{ sponsor.url }}\" target=\"_blank\" title=\"{{ sponsor.title }}\"><img src=\"{{ sponsor.img }}\"></a>\n+{% endfor %}\n+{% endif %}\n+\"\"\"\n+\n+\n+def generate_readme_content():\n+    en_index = en_docs_path / \"docs\" / \"index.md\"\n+    content = en_index.read_text(\"utf-8\")\n+    match_start = re.search(r\"<!-- sponsors -->\", content)\n+    match_end = re.search(r\"<!-- /sponsors -->\", content)\n+    sponsors_data_path = en_docs_path / \"data\" / \"sponsors.yml\"\n+    sponsors = mkdocs.utils.yaml_load(sponsors_data_path.read_text(encoding=\"utf-8\"))\n+    if not (match_start and match_end):\n+        raise RuntimeError(\"Couldn't auto-generate sponsors section\")\n+    pre_end = match_start.end()\n+    post_start = match_end.start()\n+    template = Template(index_sponsors_template)\n+    message = template.render(sponsors=sponsors)\n+    pre_content = content[:pre_end]\n+    post_content = content[post_start:]\n+    new_content = pre_content + message + post_content\n+    return new_content\n+\n+\n+@app.command()\n+def generate_readme():\n+    \"\"\"\n+    Generate README.md content from main index.md\n+    \"\"\"\n+    typer.echo(\"Generating README\")\n+    readme_path = Path(\"README.md\")\n+    new_content = generate_readme_content()\n+    readme_path.write_text(new_content, encoding=\"utf-8\")\n+\n+\n+@app.command()\n+def verify_readme():\n+    \"\"\"\n+    Verify README.md content from main index.md\n+    \"\"\"\n+    typer.echo(\"Verifying README\")\n+    readme_path = Path(\"README.md\")\n+    generated_content = generate_readme_content()\n+    readme_content = readme_path.read_text(\"utf-8\")\n+    if generated_content != readme_content:\n+        typer.secho(\n+            \"README.md outdated from the latest index.md\", color=typer.colors.RED\n+        )\n+        raise typer.Abort()\n+    typer.echo(\"Valid README ✅\")\n+\n+\n @app.command()\n def build_all():\n     \"\"\"\n@@ -202,24 +260,19 @@ def build_all():\n     \"\"\"\n     site_path = Path(\"site\").absolute()\n     update_languages(lang=None)\n-    en_build_path: Path = docs_path / \"en\"\n     current_dir = os.getcwd()\n-    os.chdir(en_build_path)\n-    typer.echo(f\"Building docs for: en\")\n+    os.chdir(en_docs_path)\n+    typer.echo(\"Building docs for: en\")\n     mkdocs.commands.build.build(mkdocs.config.load_config(site_dir=str(site_path)))\n     os.chdir(current_dir)\n-\n     langs = []\n     for lang in get_lang_paths():\n-        if lang == en_build_path or not lang.is_dir():\n+        if lang == en_docs_path or not lang.is_dir():\n             continue\n         langs.append(lang.name)\n     cpu_count = os.cpu_count() or 1\n     with Pool(cpu_count * 2) as p:\n         p.map(build_lang, langs)\n-    typer.echo(\"Copying en index.md to README.md\")\n-    en_index = en_build_path / \"docs\" / \"index.md\"\n-    shutil.copyfile(en_index, \"README.md\")\n \n \n def update_single_lang(lang: str):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#b299792ebf4e5b35a5b73d48015e332dd0af4cfa", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 3 | Files Changed: 2 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 2003 | Contributors (this commit): 23 | Commits (past 90d): 7 | Contributors (cumulative): 29 | DMM Complexity: None\n\nDIFF:\n@@ -3,8 +3,6 @@ from typing import Callable, List, Optional, Sequence\n from fastapi.security.base import SecurityBase\n from pydantic.fields import ModelField\n \n-param_supported_types = (str, int, float, bool)\n-\n \n class SecurityRequirement:\n     def __init__(\n\n@@ -94,7 +94,7 @@ def check_file_field(field: ModelField) -> None:\n \n             assert __version__\n             try:\n-                # parse_options_header is only available in the right multlipart\n+                # parse_options_header is only available in the right multipart\n                 from multipart.multipart import parse_options_header\n \n                 assert parse_options_header\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#4ce18167e70d3becb6f24cc1b8fc5929e02294bf", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 48 | Lines Deleted: 4 | Files Changed: 2 | Hunks: 3 | Methods Changed: 8 | Complexity Δ (Sum/Max): 6/6 | Churn Δ: 52 | Churn Cumulative: 2598 | Contributors (this commit): 21 | Commits (past 90d): 3 | Contributors (cumulative): 22 | DMM Complexity: 1.0\n\nDIFF:\n@@ -66,6 +66,10 @@ class FastAPI(Starlette):\n         self.exception_handlers = (\n             {} if exception_handlers is None else dict(exception_handlers)\n         )\n+        self.exception_handlers.setdefault(HTTPException, http_exception_handler)\n+        self.exception_handlers.setdefault(\n+            RequestValidationError, request_validation_exception_handler\n+        )\n \n         self.user_middleware = [] if middleware is None else list(middleware)\n         self.middleware_stack = self.build_middleware_stack()\n@@ -165,10 +169,6 @@ class FastAPI(Starlette):\n                 )\n \n             self.add_route(self.redoc_url, redoc_html, include_in_schema=False)\n-        self.add_exception_handler(HTTPException, http_exception_handler)\n-        self.add_exception_handler(\n-            RequestValidationError, request_validation_exception_handler\n-        )\n \n     async def __call__(self, scope: Scope, receive: Receive, send: Send) -> None:\n         if self.root_path:\n\n@@ -0,0 +1,44 @@\n+from fastapi import FastAPI, HTTPException\n+from fastapi.exceptions import RequestValidationError\n+from fastapi.testclient import TestClient\n+from starlette.responses import JSONResponse\n+\n+\n+def http_exception_handler(request, exception):\n+    return JSONResponse({\"exception\": \"http-exception\"})\n+\n+\n+def request_validation_exception_handler(request, exception):\n+    return JSONResponse({\"exception\": \"request-validation\"})\n+\n+\n+app = FastAPI(\n+    exception_handlers={\n+        HTTPException: http_exception_handler,\n+        RequestValidationError: request_validation_exception_handler,\n+    }\n+)\n+\n+client = TestClient(app)\n+\n+\n+@app.get(\"/http-exception\")\n+def route_with_http_exception():\n+    raise HTTPException(status_code=400)\n+\n+\n+@app.get(\"/request-validation/{param}/\")\n+def route_with_request_validation_exception(param: int):\n+    pass  # pragma: no cover\n+\n+\n+def test_override_http_exception():\n+    response = client.get(\"/http-exception\")\n+    assert response.status_code == 200\n+    assert response.json() == {\"exception\": \"http-exception\"}\n+\n+\n+def test_override_request_validation_exception():\n+    response = client.get(\"/request-validation/invalid\")\n+    assert response.status_code == 200\n+    assert response.json() == {\"exception\": \"request-validation\"}\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#dfcc6bc154d3d6fb0a072649234c5fc3c2b19673", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 14 | Contributors (this commit): 3 | Commits (past 90d): 1 | Contributors (cumulative): 3 | DMM Complexity: None\n\nDIFF:\n@@ -16,7 +16,7 @@ class Item(BaseModel):\n     description: Optional[str] = None\n     price: float\n     tax: Optional[float] = None\n-    tags: Set[str] = []\n+    tags: Set[str] = set()\n     images: Optional[List[Image]] = None\n \n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#c041c52d9122ce666b7b1935d5c7011b03830560", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 12 | Contributors (this commit): 3 | Commits (past 90d): 1 | Contributors (cumulative): 3 | DMM Complexity: None\n\nDIFF:\n@@ -16,7 +16,7 @@ class Item(BaseModel):\n     description: Optional[str] = None\n     price: float\n     tax: Optional[float] = None\n-    tags: Set[str] = []\n+    tags: Set[str] = set()\n     images: Optional[List[Image]] = None\n \n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#b8e6d18385fbe51a671f40b7606e8cd7faa49be0", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 1 | Methods Changed: 2 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 293 | Contributors (this commit): 9 | Commits (past 90d): 1 | Contributors (cumulative): 9 | DMM Complexity: None\n\nDIFF:\n@@ -9,8 +9,8 @@ def get_swagger_ui_html(\n     *,\n     openapi_url: str,\n     title: str,\n-    swagger_js_url: str = \"https://cdn.jsdelivr.net/npm/swagger-ui-dist@3.30.0/swagger-ui-bundle.js\",\n-    swagger_css_url: str = \"https://cdn.jsdelivr.net/npm/swagger-ui-dist@3.30.0/swagger-ui.css\",\n+    swagger_js_url: str = \"https://cdn.jsdelivr.net/npm/swagger-ui-dist@3/swagger-ui-bundle.js\",\n+    swagger_css_url: str = \"https://cdn.jsdelivr.net/npm/swagger-ui-dist@3/swagger-ui.css\",\n     swagger_favicon_url: str = \"https://fastapi.tiangolo.com/img/favicon.png\",\n     oauth2_redirect_url: Optional[str] = None,\n     init_oauth: Optional[dict] = None,\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#75c64b6e4c33bb6ea11fc3af7143ccba6169038d", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 2 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 108 | Contributors (this commit): 2 | Commits (past 90d): 2 | Contributors (cumulative): 2 | DMM Complexity: None\n\nDIFF:\n@@ -42,7 +42,7 @@ def test_incorrect_multipart_installed_multi_form(monkeypatch):\n         app = FastAPI()\n \n         @app.post(\"/\")\n-        async def root(username: str = Form(...), pasword: str = Form(...)):\n+        async def root(username: str = Form(...), password: str = Form(...)):\n             return username  # pragma: nocover\n \n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#22a5960d3640411f490ac77314315bbeedc0dec1", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 9 | Lines Deleted: 9 | Files Changed: 2 | Hunks: 9 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 18 | Churn Cumulative: 230 | Contributors (this commit): 6 | Commits (past 90d): 2 | Contributors (cumulative): 8 | DMM Complexity: None\n\nDIFF:\n@@ -12,7 +12,7 @@ class ModelName(str, Enum):\n app = FastAPI()\n \n \n-@app.get(\"/model/{model_name}\")\n+@app.get(\"/models/{model_name}\")\n async def get_model(model_name: ModelName):\n     if model_name == ModelName.alexnet:\n         return {\"model_name\": model_name, \"message\": \"Deep Learning FTW!\"}\n\n@@ -9,7 +9,7 @@ openapi_schema = {\n     \"openapi\": \"3.0.2\",\n     \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n     \"paths\": {\n-        \"/model/{model_name}\": {\n+        \"/models/{model_name}\": {\n             \"get\": {\n                 \"responses\": {\n                     \"200\": {\n@@ -28,7 +28,7 @@ openapi_schema = {\n                     },\n                 },\n                 \"summary\": \"Get Model\",\n-                \"operationId\": \"get_model_model__model_name__get\",\n+                \"operationId\": \"get_model_models__model_name__get\",\n                 \"parameters\": [\n                     {\n                         \"required\": True,\n@@ -80,10 +80,10 @@ openapi_schema2 = {\n     \"openapi\": \"3.0.2\",\n     \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n     \"paths\": {\n-        \"/model/{model_name}\": {\n+        \"/models/{model_name}\": {\n             \"get\": {\n                 \"summary\": \"Get Model\",\n-                \"operationId\": \"get_model_model__model_name__get\",\n+                \"operationId\": \"get_model_models__model_name__get\",\n                 \"parameters\": [\n                     {\n                         \"required\": True,\n@@ -160,22 +160,22 @@ def test_openapi():\n     \"url,status_code,expected\",\n     [\n         (\n-            \"/model/alexnet\",\n+            \"/models/alexnet\",\n             200,\n             {\"model_name\": \"alexnet\", \"message\": \"Deep Learning FTW!\"},\n         ),\n         (\n-            \"/model/lenet\",\n+            \"/models/lenet\",\n             200,\n             {\"model_name\": \"lenet\", \"message\": \"LeCNN all the images\"},\n         ),\n         (\n-            \"/model/resnet\",\n+            \"/models/resnet\",\n             200,\n             {\"model_name\": \"resnet\", \"message\": \"Have some residuals\"},\n         ),\n         (\n-            \"/model/foo\",\n+            \"/models/foo\",\n             422,\n             {\n                 \"detail\": [\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
