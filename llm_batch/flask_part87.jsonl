{"custom_id": "flask#57d628ca74513480908a63a6b66c1c8b1af896e8", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 5 | Lines Deleted: 57 | Files Changed: 9 | Hunks: 26 | Methods Changed: 13 | Complexity Δ (Sum/Max): -14/0 | Churn Δ: 62 | Churn Cumulative: 10594 | Contributors (this commit): 93 | Commits (past 90d): 21 | Contributors (cumulative): 143 | DMM Complexity: 0.4444444444444444\n\nDIFF:\n@@ -721,10 +721,6 @@ class CertParamType(click.ParamType):\n \n             obj = import_string(value, silent=True)\n \n-            if sys.version_info < (2, 7, 9):\n-                if obj:\n-                    return obj\n-            else:\n             if isinstance(obj, ssl.SSLContext):\n                 return obj\n \n\n@@ -221,8 +221,6 @@ class AppContext(object):\n     def push(self):\n         \"\"\"Binds the app context to the current context.\"\"\"\n         self._refcnt += 1\n-        if hasattr(sys, \"exc_clear\"):\n-            sys.exc_clear()\n         _app_ctx_stack.push(self)\n         appcontext_pushed.send(self.app)\n \n@@ -371,9 +369,6 @@ class RequestContext(object):\n         else:\n             self._implicit_app_ctx_stack.append(None)\n \n-        if hasattr(sys, \"exc_clear\"):\n-            sys.exc_clear()\n-\n         _request_ctx_stack.push(self)\n \n         # Open the session at the moment that the request context is available.\n@@ -399,9 +394,9 @@ class RequestContext(object):\n            Added the `exc` argument.\n         \"\"\"\n         app_ctx = self._implicit_app_ctx_stack.pop()\n+        clear_request = False\n \n         try:\n-            clear_request = False\n             if not self._implicit_app_ctx_stack:\n                 self.preserved = False\n                 self._preserved_exc = None\n@@ -409,13 +404,6 @@ class RequestContext(object):\n                     exc = sys.exc_info()[1]\n                 self.app.do_teardown_request(exc)\n \n-                # If this interpreter supports clearing the exception information\n-                # we do that now.  This will only go into effect on Python 2.x,\n-                # on 3.x it disappears automatically at the end of the exception\n-                # stack.\n-                if hasattr(sys, \"exc_clear\"):\n-                    sys.exc_clear()\n-\n                 request_close = getattr(self.request, \"close\", None)\n                 if request_close is not None:\n                     request_close()\n\n@@ -634,11 +634,7 @@ def send_file(\n             mtime = os.path.getmtime(filename)\n             fsize = os.path.getsize(filename)\n         elif isinstance(file, io.BytesIO):\n-            try:\n             fsize = file.getbuffer().nbytes\n-            except AttributeError:\n-                # Python 2 doesn't have getbuffer\n-                fsize = len(file.getvalue())\n         elif isinstance(file, io.TextIOBase):\n             raise ValueError(\"Files must be opened in binary mode or use BytesIO.\")\n \n@@ -799,8 +795,6 @@ def get_root_path(import_name):\n     if loader is None or import_name == \"__main__\":\n         return os.getcwd()\n \n-    # For .egg, zipimporter does not have get_filename until Python 2.7.\n-    # Some other loaders might exhibit the same behavior.\n     if hasattr(loader, \"get_filename\"):\n         filepath = loader.get_filename(import_name)\n     else:\n@@ -857,7 +851,6 @@ def _matching_loader_thinks_module_is_package(loader, mod_name):\n \n def _find_package_path(root_mod_name):\n     \"\"\"Find the path where the module's root exists in\"\"\"\n-    if sys.version_info >= (3, 4):\n     import importlib.util\n \n     try:\n@@ -888,7 +881,6 @@ def _find_package_path(root_mod_name):\n         # import name is not found, or interactive/main module\n         return os.getcwd()\n     else:\n-        # For .egg, zipimporter does not have get_filename until Python 2.7.\n         if hasattr(loader, \"get_filename\"):\n             filename = loader.get_filename(root_mod_name)\n         elif hasattr(loader, \"archive\"):\n\n@@ -91,12 +91,7 @@ def test_provide_automatic_options_kwarg(app, client):\n     assert rv.status_code == 405\n     assert sorted(rv.allow) == [\"GET\", \"HEAD\"]\n \n-    # Older versions of Werkzeug.test.Client don't have an options method\n-    if hasattr(client, \"options\"):\n-        rv = client.options(\"/\")\n-    else:\n     rv = client.open(\"/\", method=\"OPTIONS\")\n-\n     assert rv.status_code == 405\n \n     rv = client.head(\"/\")\n@@ -109,11 +104,7 @@ def test_provide_automatic_options_kwarg(app, client):\n     assert rv.status_code == 405\n     assert sorted(rv.allow) == [\"GET\", \"HEAD\", \"POST\"]\n \n-    if hasattr(client, \"options\"):\n-        rv = client.options(\"/more\")\n-    else:\n     rv = client.open(\"/more\", method=\"OPTIONS\")\n-\n     assert rv.status_code == 405\n \n \n\n@@ -589,16 +589,11 @@ def test_run_cert_import(monkeypatch):\n     with pytest.raises(click.BadParameter):\n         run_command.make_context(\"run\", [\"--cert\", \"not_here\"])\n \n-    # not an SSLContext\n-    if sys.version_info >= (2, 7, 9):\n     with pytest.raises(click.BadParameter):\n         run_command.make_context(\"run\", [\"--cert\", \"flask\"])\n \n     # SSLContext\n-    if sys.version_info < (2, 7, 9):\n-        ssl_context = object()\n-    else:\n-        ssl_context = ssl.SSLContext(ssl.PROTOCOL_SSLv23)\n+    ssl_context = ssl.SSLContext(ssl.PROTOCOL_TLS_SERVER)\n \n     monkeypatch.setitem(sys.modules, \"ssl_context\", ssl_context)\n     ctx = run_command.make_context(\"run\", [\"--cert\", \"ssl_context\"])\n\n@@ -92,7 +92,6 @@ class TestJSON(object):\n     )\n     def test_detect_encoding(self, value, encoding):\n         data = json.dumps(value).encode(encoding)\n-        assert json.detect_encoding(data) == encoding\n         assert json.loads(data) == value\n \n     @pytest.mark.parametrize(\"debug\", (True, False))\n@@ -679,8 +678,6 @@ class TestSendfile(object):\n                 \"%C3%91and%C3%BA%EF%BC%8Fping%C3%BCino.txt\",\n             ),\n             (u\"Vögel.txt\", \"Vogel.txt\", \"V%C3%B6gel.txt\"),\n-            # Native string not marked as Unicode on Python 2\n-            (\"tést.txt\", \"test.txt\", \"t%C3%A9st.txt\"),\n             # \":/\" are not safe in filename* value\n             (u\"те:/ст\", '\":/\"', \"%D1%82%D0%B5%3A%2F%D1%81%D1%82\"),\n         ),\n\n@@ -9,7 +9,7 @@\n     :license: BSD-3-Clause\n \"\"\"\n import gc\n-import sys\n+import platform\n import threading\n \n import pytest\n@@ -44,6 +44,7 @@ class assert_no_leak(object):\n         gc.enable()\n \n \n+@pytest.mark.skipif(platform.python_implementation() == \"PyPy\", reason=\"CPython only\")\n def test_memory_consumption():\n     app = flask.Flask(__name__)\n \n@@ -60,8 +61,6 @@ def test_memory_consumption():\n     # Trigger caches\n     fire()\n \n-    # This test only works on CPython 2.7.\n-    if sys.version_info >= (2, 7) and not hasattr(sys, \"pypy_translation_info\"):\n     with assert_no_leak():\n         for _x in range(10):\n             fire()\n\n@@ -285,10 +285,6 @@ def test_session_dynamic_cookie_name():\n def test_bad_environ_raises_bad_request():\n     app = flask.Flask(__name__)\n \n-    # We cannot use app.test_client() for the Unicode-rich Host header,\n-    # because werkzeug enforces latin1 on Python 2.\n-    # However it works when actually passed to the server.\n-\n     from flask.testing import EnvironBuilder\n \n     builder = EnvironBuilder(app)\n@@ -309,10 +305,6 @@ def test_environ_for_valid_idna_completes():\n     def index():\n         return \"Hello World!\"\n \n-    # We cannot use app.test_client() for the Unicode-rich Host header,\n-    # because werkzeug enforces latin1 on Python 2.\n-    # However it works when actually passed to the server.\n-\n     from flask.testing import EnvironBuilder\n \n     builder = EnvironBuilder(app)\n\n@@ -169,11 +169,9 @@ def test_redirect_keep_session(app, client, app_ctx):\n         rv = client.get(\"/\")\n         assert rv.data == b\"index\"\n         assert flask.session.get(\"data\") == \"foo\"\n+\n         rv = client.post(\"/\", data={}, follow_redirects=True)\n         assert rv.data == b\"foo\"\n-\n-        # This support requires a new Werkzeug version\n-        if not hasattr(client, \"redirect_client\"):\n         assert flask.session.get(\"data\") == \"foo\"\n \n         rv = client.get(\"/getsession\")\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#524fd0bc8cec7bfe8167c9c98cb5511b01a0f4c6", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 152 | Lines Deleted: 220 | Files Changed: 52 | Hunks: 182 | Methods Changed: 87 | Complexity Δ (Sum/Max): 17/15 | Churn Δ: 372 | Churn Cumulative: 21524 | Contributors (this commit): 149 | Commits (past 90d): 106 | Contributors (cumulative): 341 | DMM Complexity: 0.16666666666666666\n\nDIFF:\n@@ -52,14 +52,12 @@ singlehtml_sidebars = {\"index\": [\"project.html\", \"localtoc.html\"]}\n html_static_path = [\"_static\"]\n html_favicon = \"_static/flask-icon.png\"\n html_logo = \"_static/flask-icon.png\"\n-html_title = \"Flask Documentation ({})\".format(version)\n+html_title = f\"Flask Documentation ({version})\"\n html_show_sourcelink = False\n \n # LaTeX ----------------------------------------------------------------\n \n-latex_documents = [\n-    (master_doc, \"Flask-{}.tex\".format(version), html_title, author, \"manual\")\n-]\n+latex_documents = [(master_doc, f\"Flask-{version}.tex\", html_title, author, \"manual\")]\n \n # Local Extensions -----------------------------------------------------\n \n@@ -76,9 +74,9 @@ def github_link(name, rawtext, text, lineno, inliner, options=None, content=None\n         words = None\n \n     if packaging.version.parse(release).is_devrelease:\n-        url = \"{0}master/{1}\".format(base_url, text)\n+        url = f\"{base_url}master/{text}\"\n     else:\n-        url = \"{0}{1}/{2}\".format(base_url, release, text)\n+        url = f\"{base_url}{release}/{text}\"\n \n     if words is None:\n         words = url\n\n@@ -2,4 +2,4 @@ from flask import Flask\n \n app = Flask(__name__)\n \n-from js_example import views\n+from js_example import views  # noqa: F401\n\n@@ -8,7 +8,7 @@ from js_example import app\n @app.route(\"/\", defaults={\"js\": \"plain\"})\n @app.route(\"/<any(plain, jquery, fetch):js>\")\n def index(js):\n-    return render_template(\"{0}.html\".format(js), js=js)\n+    return render_template(f\"{js}.html\", js=js)\n \n \n @app.route(\"/add\", methods=[\"POST\"])\n\n@@ -1,9 +1,7 @@\n-import io\n-\n from setuptools import find_packages\n from setuptools import setup\n \n-with io.open(\"README.rst\", \"rt\", encoding=\"utf8\") as f:\n+with open(\"README.rst\", encoding=\"utf8\") as f:\n     readme = f.read()\n \n setup(\n\n@@ -64,7 +64,7 @@ def register():\n             db.execute(\"SELECT id FROM user WHERE username = ?\", (username,)).fetchone()\n             is not None\n         ):\n-            error = \"User {0} is already registered.\".format(username)\n+            error = f\"User {username} is already registered.\"\n \n         if error is None:\n             # the name is available, store it in the database and go to\n\n@@ -49,7 +49,7 @@ def get_post(id, check_author=True):\n     )\n \n     if post is None:\n-        abort(404, \"Post id {0} doesn't exist.\".format(id))\n+        abort(404, f\"Post id {id} doesn't exist.\")\n \n     if check_author and post[\"author_id\"] != g.user[\"id\"]:\n         abort(403)\n\n@@ -1,9 +1,7 @@\n-import io\n-\n from setuptools import find_packages\n from setuptools import setup\n \n-with io.open(\"README.rst\", \"rt\", encoding=\"utf8\") as f:\n+with open(\"README.rst\", encoding=\"utf8\") as f:\n     readme = f.read()\n \n setup(\n\n@@ -44,7 +44,7 @@ def runner(app):\n     return app.test_cli_runner()\n \n \n-class AuthActions(object):\n+class AuthActions:\n     def __init__(self, client):\n         self._client = client\n \n\n@@ -17,7 +17,7 @@ def test_get_close_db(app):\n \n \n def test_init_db_command(runner, monkeypatch):\n-    class Recorder(object):\n+    class Recorder:\n         called = False\n \n     def fake_init_db():\n\n@@ -1,13 +1,12 @@\n-import io\n import re\n \n from setuptools import find_packages\n from setuptools import setup\n \n-with io.open(\"README.rst\", \"rt\", encoding=\"utf8\") as f:\n+with open(\"README.rst\", encoding=\"utf8\") as f:\n     readme = f.read()\n \n-with io.open(\"src/flask/__init__.py\", \"rt\", encoding=\"utf8\") as f:\n+with open(\"src/flask/__init__.py\", encoding=\"utf8\") as f:\n     version = re.search(r'__version__ = \"(.*?)\"', f.read()).group(1)\n \n setup(\n\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n \"\"\"\n     flask\n     ~~~~~\n\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n \"\"\"\n     flask.__main__\n     ~~~~~~~~~~~~~~\n\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n \"\"\"\n     flask.app\n     ~~~~~~~~~\n@@ -1111,7 +1110,7 @@ class Flask(_PackageBoundObject):\n         endpoint=None,\n         view_func=None,\n         provide_automatic_options=None,\n-        **options\n+        **options,\n     ):\n         \"\"\"Connects a URL rule.  Works exactly like the :meth:`route`\n         decorator.  If a view_func is provided it will be registered with the\n@@ -1180,7 +1179,7 @@ class Flask(_PackageBoundObject):\n                 \"Allowed methods must be a list of strings, for\"\n                 ' example: @app.route(..., methods=[\"POST\"])'\n             )\n-        methods = set(item.upper() for item in methods)\n+        methods = {item.upper() for item in methods}\n \n         # Methods that should always be added\n         required_methods = set(getattr(view_func, \"required_methods\", ()))\n@@ -1342,7 +1341,7 @@ class Flask(_PackageBoundObject):\n         \"\"\"\n         if isinstance(code_or_exception, HTTPException):  # old broken behavior\n             raise ValueError(\n-                \"Tried to register a handler for an exception instance {0!r}.\"\n+                \"Tried to register a handler for an exception instance {!r}.\"\n                 \" Handlers can only be registered for exception classes or\"\n                 \" HTTP error codes.\".format(code_or_exception)\n             )\n@@ -1351,7 +1350,7 @@ class Flask(_PackageBoundObject):\n             exc_class, code = self._get_exc_class_and_code(code_or_exception)\n         except KeyError:\n             raise KeyError(\n-                \"'{0}' is not a recognized HTTP error code. Use a subclass of\"\n+                \"'{}' is not a recognized HTTP error code. Use a subclass of\"\n                 \" HTTPException with that code instead.\".format(code_or_exception)\n             )\n \n@@ -1811,7 +1810,7 @@ class Flask(_PackageBoundObject):\n         .. versionadded:: 0.8\n         \"\"\"\n         self.logger.error(\n-            \"Exception on %s [%s]\" % (request.path, request.method), exc_info=exc_info\n+            f\"Exception on {request.path} [{request.method}]\", exc_info=exc_info\n         )\n \n     def raise_routing_exception(self, request):\n@@ -2376,4 +2375,4 @@ class Flask(_PackageBoundObject):\n         return self.wsgi_app(environ, start_response)\n \n     def __repr__(self):\n-        return \"<%s %r>\" % (self.__class__.__name__, self.name)\n+        return f\"<{self.__class__.__name__} {self.name!r}>\"\n\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n \"\"\"\n     flask.blueprints\n     ~~~~~~~~~~~~~~~~\n@@ -18,7 +17,7 @@ from .helpers import _PackageBoundObject\n _sentinel = object()\n \n \n-class BlueprintSetupState(object):\n+class BlueprintSetupState:\n     \"\"\"Temporary holder object for registering a blueprint with the\n     application.  An instance of this class is created by the\n     :meth:`~flask.Blueprint.make_setup_state` method and later passed\n@@ -80,10 +79,10 @@ class BlueprintSetupState(object):\n             defaults = dict(defaults, **options.pop(\"defaults\"))\n         self.app.add_url_rule(\n             rule,\n-            \"%s.%s\" % (self.blueprint.name, endpoint),\n+            f\"{self.blueprint.name}.{endpoint}\",\n             view_func,\n             defaults=defaults,\n-            **options\n+            **options,\n         )\n \n \n\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n \"\"\"\n     flask.cli\n     ~~~~~~~~~\n@@ -8,8 +7,6 @@\n     :copyright: 2010 Pallets\n     :license: BSD-3-Clause\n \"\"\"\n-from __future__ import print_function\n-\n import ast\n import inspect\n import os\n@@ -167,7 +164,7 @@ def find_app_by_string(script_info, module, app_name):\n     if inspect.isfunction(attr):\n         if args:\n             try:\n-                args = ast.literal_eval(\"({args},)\".format(args=args))\n+                args = ast.literal_eval(f\"({args},)\")\n             except (ValueError, SyntaxError) as e:\n                 raise NoAppException(\n                     \"Could not parse the arguments in \"\n@@ -243,7 +240,7 @@ def locate_app(script_info, module_name, app_name, raise_if_not_found=True):\n                 \"\\n\\n{tb}\".format(name=module_name, tb=traceback.format_exc())\n             )\n         elif raise_if_not_found:\n-            raise NoAppException('Could not import \"{name}\".'.format(name=module_name))\n+            raise NoAppException(f'Could not import \"{module_name}\".')\n         else:\n             return\n \n@@ -285,7 +282,7 @@ version_option = click.Option(\n )\n \n \n-class DispatchingApp(object):\n+class DispatchingApp:\n     \"\"\"Special application that dispatches to a Flask application which\n     is imported by name in a background thread.  If an error happens\n     it is recorded and shown as part of the WSGI handling which in case\n@@ -344,7 +341,7 @@ class DispatchingApp(object):\n             return rv(environ, start_response)\n \n \n-class ScriptInfo(object):\n+class ScriptInfo:\n     \"\"\"Helper object to deal with Flask applications.  This is usually not\n     necessary to interface with as it's used internally in the dispatching\n     to click.  In future versions of Flask this object will most likely play\n@@ -491,7 +488,7 @@ class FlaskGroup(AppGroup):\n         add_version_option=True,\n         load_dotenv=True,\n         set_debug_flag=True,\n-        **extra\n+        **extra,\n     ):\n         params = list(extra.pop(\"params\", None) or ())\n \n@@ -583,7 +580,7 @@ class FlaskGroup(AppGroup):\n \n         kwargs[\"obj\"] = obj\n         kwargs.setdefault(\"auto_envvar_prefix\", \"FLASK\")\n-        return super(FlaskGroup, self).main(*args, **kwargs)\n+        return super().main(*args, **kwargs)\n \n \n def _path_is_ancestor(path, other):\n@@ -662,14 +659,14 @@ def show_server_banner(env, debug, app_import_path, eager_loading):\n         return\n \n     if app_import_path is not None:\n-        message = ' * Serving Flask app \"{0}\"'.format(app_import_path)\n+        message = f' * Serving Flask app \"{app_import_path}\"'\n \n         if not eager_loading:\n             message += \" (lazy loading)\"\n \n         click.echo(message)\n \n-    click.echo(\" * Environment: {0}\".format(env))\n+    click.echo(f\" * Environment: {env}\")\n \n     if env == \"production\":\n         click.secho(\n@@ -680,7 +677,7 @@ def show_server_banner(env, debug, app_import_path, eager_loading):\n         click.secho(\"   Use a production WSGI server instead.\", dim=True)\n \n     if debug is not None:\n-        click.echo(\" * Debug mode: {0}\".format(\"on\" if debug else \"off\"))\n+        click.echo(\" * Debug mode: {}\".format(\"on\" if debug else \"off\"))\n \n \n class CertParamType(click.ParamType):\n@@ -766,7 +763,7 @@ class SeparatedPathType(click.Path):\n \n     def convert(self, value, param, ctx):\n         items = self.split_envvar_value(value)\n-        super_convert = super(SeparatedPathType, self).convert\n+        super_convert = super().convert\n         return [super_convert(item, param, ctx) for item in items]\n \n \n@@ -866,12 +863,8 @@ def shell_command():\n     from .globals import _app_ctx_stack\n \n     app = _app_ctx_stack.top.app\n-    banner = \"Python %s on %s\\nApp: %s [%s]\\nInstance: %s\" % (\n-        sys.version,\n-        sys.platform,\n-        app.import_name,\n-        app.env,\n-        app.instance_path,\n+    banner = \"Python {} on {}\\nApp: {} [{}]\\nInstance: {}\".format(\n+        sys.version, sys.platform, app.import_name, app.env, app.instance_path,\n     )\n     ctx = {}\n \n@@ -879,7 +872,7 @@ def shell_command():\n     # is using it.\n     startup = os.environ.get(\"PYTHONSTARTUP\")\n     if startup and os.path.isfile(startup):\n-        with open(startup, \"r\") as f:\n+        with open(startup) as f:\n             eval(compile(f.read(), startup, \"exec\"), ctx)\n \n     ctx.update(app.make_shell_context())\n\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n \"\"\"\n     flask.config\n     ~~~~~~~~~~~~\n@@ -15,7 +14,7 @@ import types\n from werkzeug.utils import import_string\n \n \n-class ConfigAttribute(object):\n+class ConfigAttribute:\n     \"\"\"Makes an attribute forward to the config\"\"\"\n \n     def __init__(self, name, get_converter=None):\n@@ -126,7 +125,7 @@ class Config(dict):\n         try:\n             with open(filename, mode=\"rb\") as config_file:\n                 exec(compile(config_file.read(), filename, \"exec\"), d.__dict__)\n-        except IOError as e:\n+        except OSError as e:\n             if silent and e.errno in (errno.ENOENT, errno.EISDIR, errno.ENOTDIR):\n                 return False\n             e.strerror = \"Unable to load configuration file (%s)\" % e.strerror\n@@ -197,7 +196,7 @@ class Config(dict):\n         try:\n             with open(filename) as f:\n                 obj = load(f)\n-        except IOError as e:\n+        except OSError as e:\n             if silent and e.errno in (errno.ENOENT, errno.EISDIR):\n                 return False\n \n@@ -271,4 +270,4 @@ class Config(dict):\n         return rv\n \n     def __repr__(self):\n-        return \"<%s %s>\" % (self.__class__.__name__, dict.__repr__(self))\n+        return \"<{} {}>\".format(self.__class__.__name__, dict.__repr__(self))\n\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n \"\"\"\n     flask.ctx\n     ~~~~~~~~~\n@@ -23,7 +22,7 @@ from .signals import appcontext_pushed\n _sentinel = object()\n \n \n-class _AppCtxGlobals(object):\n+class _AppCtxGlobals:\n     \"\"\"A plain object. Used as a namespace for storing data during an\n     application context.\n \n@@ -200,7 +199,7 @@ def has_app_context():\n     return _app_ctx_stack.top is not None\n \n \n-class AppContext(object):\n+class AppContext:\n     \"\"\"The application context binds an application object implicitly\n     to the current thread or greenlet, similar to how the\n     :class:`RequestContext` binds request information.  The application\n@@ -234,7 +233,7 @@ class AppContext(object):\n                 self.app.do_teardown_appcontext(exc)\n         finally:\n             rv = _app_ctx_stack.pop()\n-        assert rv is self, \"Popped wrong app context.  (%r instead of %r)\" % (rv, self)\n+        assert rv is self, f\"Popped wrong app context.  ({rv!r} instead of {self!r})\"\n         appcontext_popped.send(self.app)\n \n     def __enter__(self):\n@@ -245,7 +244,7 @@ class AppContext(object):\n         self.pop(exc_value)\n \n \n-class RequestContext(object):\n+class RequestContext:\n     \"\"\"The request context contains all request relevant information.  It is\n     created at the beginning of the request and pushed to the\n     `_request_ctx_stack` and removed at the end of it.  It will create the\n@@ -420,10 +419,9 @@ class RequestContext(object):\n             if app_ctx is not None:\n                 app_ctx.pop(exc)\n \n-            assert rv is self, \"Popped wrong request context. (%r instead of %r)\" % (\n-                rv,\n-                self,\n-            )\n+            assert (\n+                rv is self\n+            ), f\"Popped wrong request context. ({rv!r} instead of {self!r})\"\n \n     def auto_pop(self, exc):\n         if self.request.environ.get(\"flask._preserve_context\") or (\n@@ -447,7 +445,7 @@ class RequestContext(object):\n         self.auto_pop(exc_value)\n \n     def __repr__(self):\n-        return \"<%s '%s' [%s] of %s>\" % (\n+        return \"<{} '{}' [{}] of {}>\".format(\n             self.__class__.__name__,\n             self.request.url,\n             self.request.method,\n\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n \"\"\"\n     flask.debughelpers\n     ~~~~~~~~~~~~~~~~~~\n@@ -102,7 +101,7 @@ def attach_enctype_error_multidict(request):\n \n \n def _dump_loader_info(loader):\n-    yield \"class: %s.%s\" % (type(loader).__module__, type(loader).__name__)\n+    yield \"class: {}.{}\".format(type(loader).__module__, type(loader).__name__)\n     for key, value in sorted(loader.__dict__.items()):\n         if key.startswith(\"_\"):\n             continue\n@@ -115,7 +114,7 @@ def _dump_loader_info(loader):\n             continue\n         elif not isinstance(value, (str, int, float, bool)):\n             continue\n-        yield \"%s: %r\" % (key, value)\n+        yield f\"{key}: {value!r}\"\n \n \n def explain_template_loading_attempts(app, template, attempts):\n@@ -131,7 +130,7 @@ def explain_template_loading_attempts(app, template, attempts):\n         if isinstance(srcobj, Flask):\n             src_info = 'application \"%s\"' % srcobj.import_name\n         elif isinstance(srcobj, Blueprint):\n-            src_info = 'blueprint \"%s\" (%s)' % (srcobj.name, srcobj.import_name)\n+            src_info = f'blueprint \"{srcobj.name}\" ({srcobj.import_name})'\n         else:\n             src_info = repr(srcobj)\n \n\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n \"\"\"\n     flask.globals\n     ~~~~~~~~~~~~~\n\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n \"\"\"\n     flask.helpers\n     ~~~~~~~~~~~~~\n@@ -155,8 +154,7 @@ def stream_with_context(generator_or_function):\n             # don't need that because they are closed on their destruction\n             # automatically.\n             try:\n-                for item in gen:\n-                    yield item\n+                yield from gen\n             finally:\n                 if hasattr(gen, \"close\"):\n                     gen.close()\n@@ -933,7 +931,7 @@ def find_package(import_name):\n     return None, package_path\n \n \n-class locked_cached_property(object):\n+class locked_cached_property:\n     \"\"\"A decorator that converts a function into a lazy property.  The\n     function wrapped is called the first time to retrieve the result\n     and then that calculated result is used the next time you access\n@@ -959,7 +957,7 @@ class locked_cached_property(object):\n             return value\n \n \n-class _PackageBoundObject(object):\n+class _PackageBoundObject:\n     #: The name of the package or module that this app belongs to. Do not\n     #: change this once it is set by the constructor.\n     import_name = None\n@@ -1137,7 +1135,7 @@ def is_ip(value):\n     for family in (socket.AF_INET, socket.AF_INET6):\n         try:\n             socket.inet_pton(family, value)\n-        except socket.error:\n+        except OSError:\n             pass\n         else:\n             return True\n\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n \"\"\"\n flask.json\n ~~~~~~~~~~\n@@ -286,10 +285,10 @@ def htmlsafe_dumps(obj, **kwargs):\n     \"\"\"\n     rv = (\n         dumps(obj, **kwargs)\n-        .replace(u\"<\", u\"\\\\u003c\")\n-        .replace(u\">\", u\"\\\\u003e\")\n-        .replace(u\"&\", u\"\\\\u0026\")\n-        .replace(u\"'\", u\"\\\\u0027\")\n+        .replace(\"<\", \"\\\\u003c\")\n+        .replace(\">\", \"\\\\u003e\")\n+        .replace(\"&\", \"\\\\u0026\")\n+        .replace(\"'\", \"\\\\u0027\")\n     )\n     if not _slash_escape:\n         rv = rv.replace(\"\\\\/\", \"/\")\n\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n \"\"\"\n Tagged JSON\n ~~~~~~~~~~~\n@@ -54,7 +53,7 @@ from ..json import dumps\n from ..json import loads\n \n \n-class JSONTag(object):\n+class JSONTag:\n     \"\"\"Base class for defining type tags for :class:`TaggedJSONSerializer`.\"\"\"\n \n     __slots__ = (\"serializer\",)\n@@ -122,7 +121,7 @@ class PassDict(JSONTag):\n     def to_json(self, value):\n         # JSON objects may only have string keys, so don't bother tagging the\n         # key here.\n-        return dict((k, self.serializer.tag(v)) for k, v in value.items())\n+        return {k: self.serializer.tag(v) for k, v in value.items()}\n \n     tag = to_json\n \n@@ -213,7 +212,7 @@ class TagDateTime(JSONTag):\n         return parse_date(value)\n \n \n-class TaggedJSONSerializer(object):\n+class TaggedJSONSerializer:\n     \"\"\"Serializer that uses a tag system to compactly represent objects that\n     are not JSON types. Passed as the intermediate serializer to\n     :class:`itsdangerous.Serializer`.\n@@ -269,7 +268,7 @@ class TaggedJSONSerializer(object):\n \n         if key is not None:\n             if not force and key in self.tags:\n-                raise KeyError(\"Tag '{0}' is already registered.\".format(key))\n+                raise KeyError(f\"Tag '{key}' is already registered.\")\n \n             self.tags[key] = tag\n \n\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n \"\"\"\n flask.logging\n ~~~~~~~~~~~~~\n@@ -6,8 +5,6 @@ flask.logging\n :copyright: 2010 Pallets\n :license: BSD-3-Clause\n \"\"\"\n-from __future__ import absolute_import\n-\n import logging\n import sys\n \n\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n \"\"\"\n     flask.sessions\n     ~~~~~~~~~~~~~~\n@@ -77,19 +76,19 @@ class SecureCookieSession(CallbackDict, SessionMixin):\n             self.modified = True\n             self.accessed = True\n \n-        super(SecureCookieSession, self).__init__(initial, on_update)\n+        super().__init__(initial, on_update)\n \n     def __getitem__(self, key):\n         self.accessed = True\n-        return super(SecureCookieSession, self).__getitem__(key)\n+        return super().__getitem__(key)\n \n     def get(self, key, default=None):\n         self.accessed = True\n-        return super(SecureCookieSession, self).get(key, default)\n+        return super().get(key, default)\n \n     def setdefault(self, key, default=None):\n         self.accessed = True\n-        return super(SecureCookieSession, self).setdefault(key, default)\n+        return super().setdefault(key, default)\n \n \n class NullSession(SecureCookieSession):\n@@ -109,7 +108,7 @@ class NullSession(SecureCookieSession):\n     del _fail\n \n \n-class SessionInterface(object):\n+class SessionInterface:\n     \"\"\"The basic interface you have to implement in order to replace the\n     default session interface which uses werkzeug's securecookie\n     implementation.  The only methods you have to implement are\n\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n \"\"\"\n     flask.signals\n     ~~~~~~~~~~~~~\n@@ -16,11 +15,11 @@ try:\n except ImportError:\n     signals_available = False\n \n-    class Namespace(object):\n+    class Namespace:\n         def signal(self, name, doc=None):\n             return _FakeSignal(name, doc)\n \n-    class _FakeSignal(object):\n+    class _FakeSignal:\n         \"\"\"If blinker is unavailable, create a fake class with the same\n         interface that allows sending of signals but will fail with an\n         error on anything else.  Instead of doing anything on send, it\n\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n \"\"\"\n     flask.templating\n     ~~~~~~~~~~~~~~~~\n\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n \"\"\"\n     flask.testing\n     ~~~~~~~~~~~~~\n@@ -51,7 +50,7 @@ class EnvironBuilder(werkzeug.test.EnvironBuilder):\n         subdomain=None,\n         url_scheme=None,\n         *args,\n-        **kwargs\n+        **kwargs,\n     ):\n         assert not (base_url or subdomain or url_scheme) or (\n             base_url is not None\n@@ -64,7 +63,7 @@ class EnvironBuilder(werkzeug.test.EnvironBuilder):\n             app_root = app.config[\"APPLICATION_ROOT\"]\n \n             if subdomain:\n-                http_host = \"{0}.{1}\".format(subdomain, http_host)\n+                http_host = f\"{subdomain}.{http_host}\"\n \n             if url_scheme is None:\n                 url_scheme = app.config[\"PREFERRED_URL_SCHEME\"]\n@@ -82,7 +81,7 @@ class EnvironBuilder(werkzeug.test.EnvironBuilder):\n                 path += sep + url.query\n \n         self.app = app\n-        super(EnvironBuilder, self).__init__(path, base_url, *args, **kwargs)\n+        super().__init__(path, base_url, *args, **kwargs)\n \n     def json_dumps(self, obj, **kwargs):\n         \"\"\"Serialize ``obj`` to a JSON-formatted string.\n@@ -112,7 +111,7 @@ class FlaskClient(Client):\n     preserve_context = False\n \n     def __init__(self, *args, **kwargs):\n-        super(FlaskClient, self).__init__(*args, **kwargs)\n+        super().__init__(*args, **kwargs)\n         self.environ_base = {\n             \"REMOTE_ADDR\": \"127.0.0.1\",\n             \"HTTP_USER_AGENT\": \"werkzeug/\" + werkzeug.__version__,\n@@ -239,7 +238,7 @@ class FlaskCliRunner(CliRunner):\n \n     def __init__(self, app, **kwargs):\n         self.app = app\n-        super(FlaskCliRunner, self).__init__(**kwargs)\n+        super().__init__(**kwargs)\n \n     def invoke(self, cli=None, args=None, **kwargs):\n         \"\"\"Invokes a CLI command in an isolated environment. See\n@@ -262,4 +261,4 @@ class FlaskCliRunner(CliRunner):\n         if \"obj\" not in kwargs:\n             kwargs[\"obj\"] = ScriptInfo(create_app=lambda: self.app)\n \n-        return super(FlaskCliRunner, self).invoke(cli, args, **kwargs)\n+        return super().invoke(cli, args, **kwargs)\n\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n \"\"\"\n     flask.views\n     ~~~~~~~~~~~\n@@ -16,7 +15,7 @@ http_method_funcs = frozenset(\n )\n \n \n-class View(object):\n+class View:\n     \"\"\"Alternative way to use view functions.  A subclass has to implement\n     :meth:`dispatch_request` which is called with the view arguments from\n     the URL routing system.  If :attr:`methods` is provided the methods\n@@ -113,7 +112,7 @@ class MethodViewType(type):\n     \"\"\"\n \n     def __init__(cls, name, bases, d):\n-        super(MethodViewType, cls).__init__(name, bases, d)\n+        super().__init__(name, bases, d)\n \n         if \"methods\" not in d:\n             methods = set()\n\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n \"\"\"\n     flask.wrappers\n     ~~~~~~~~~~~~~~\n@@ -22,7 +21,7 @@ class JSONMixin(_JSONMixin):\n \n     def on_json_loading_failed(self, e):\n         if current_app and current_app.debug:\n-            raise BadRequest(\"Failed to decode JSON object: {0}\".format(e))\n+            raise BadRequest(f\"Failed to decode JSON object: {e}\")\n \n         raise BadRequest()\n \n@@ -134,4 +133,4 @@ class Response(ResponseBase, JSONMixin):\n             return current_app.config[\"MAX_COOKIE_SIZE\"]\n \n         # return Werkzeug's default when not in an app context\n-        return super(Response, self).max_cookie_size\n+        return super().max_cookie_size\n\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n \"\"\"\n     tests.conftest\n     ~~~~~~~~~~~~~~\n@@ -112,7 +111,7 @@ def limit_loader(request, monkeypatch):\n     if not request.param:\n         return\n \n-    class LimitedLoader(object):\n+    class LimitedLoader:\n         def __init__(self, loader):\n             self.loader = loader\n \n@@ -172,7 +171,7 @@ def install_egg(modules_tmpdir, monkeypatch):\n             textwrap.dedent(\n                 \"\"\"\n         from setuptools import setup\n-        setup(name='{0}',\n+        setup(name='{}',\n               version='1.0',\n               packages=['site_egg'],\n               zip_safe=True)\n@@ -187,7 +186,7 @@ def install_egg(modules_tmpdir, monkeypatch):\n         subprocess.check_call(\n             [sys.executable, \"setup.py\", \"bdist_egg\"], cwd=str(modules_tmpdir)\n         )\n-        egg_path, = modules_tmpdir.join(\"dist/\").listdir()\n+        (egg_path,) = modules_tmpdir.join(\"dist/\").listdir()\n         monkeypatch.syspath_prepend(str(egg_path))\n         return egg_path\n \n\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n \"\"\"\n     tests.appctx\n     ~~~~~~~~~~~~\n@@ -163,7 +162,7 @@ def test_app_ctx_globals_methods(app, app_ctx):\n \n \n def test_custom_app_ctx_globals_class(app):\n-    class CustomRequestGlobals(object):\n+    class CustomRequestGlobals:\n         def __init__(self):\n             self.spam = \"eggs\"\n \n@@ -190,7 +189,7 @@ def test_context_refcounts(app, client):\n                 pass\n         env = flask._request_ctx_stack.top.request.environ\n         assert env[\"werkzeug.request\"] is not None\n-        return u\"\"\n+        return \"\"\n \n     res = client.get(\"/\")\n     assert res.status_code == 200\n\n@@ -1,6 +1,3 @@\n-from __future__ import absolute_import\n-from __future__ import print_function\n-\n from flask import Flask\n \n testapp = Flask(\"testapp\")\n\n@@ -1,6 +1,3 @@\n-from __future__ import absolute_import\n-from __future__ import print_function\n-\n from flask import Flask\n \n \n\n@@ -1,6 +1,3 @@\n-from __future__ import absolute_import\n-from __future__ import print_function\n-\n from flask import Flask\n \n raise ImportError()\n\n@@ -1,6 +1,3 @@\n-from __future__ import absolute_import\n-from __future__ import print_function\n-\n from flask import Flask\n \n app1 = Flask(\"app1\")\n\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n \"\"\"\n     tests.basic\n     ~~~~~~~~~~~~~~~~~~~~~\n@@ -278,7 +277,7 @@ def test_session_using_server_name_port_and_path(app, client):\n \n \n def test_session_using_application_root(app, client):\n-    class PrefixPathMiddleware(object):\n+    class PrefixPathMiddleware:\n         def __init__(self, app, prefix):\n             self.app = app\n             self.prefix = prefix\n@@ -583,18 +582,18 @@ def test_extended_flashing(app):\n \n     @app.route(\"/\")\n     def index():\n-        flask.flash(u\"Hello World\")\n-        flask.flash(u\"Hello World\", \"error\")\n-        flask.flash(flask.Markup(u\"<em>Testing</em>\"), \"warning\")\n+        flask.flash(\"Hello World\")\n+        flask.flash(\"Hello World\", \"error\")\n+        flask.flash(flask.Markup(\"<em>Testing</em>\"), \"warning\")\n         return \"\"\n \n     @app.route(\"/test/\")\n     def test():\n         messages = flask.get_flashed_messages()\n         assert list(messages) == [\n-            u\"Hello World\",\n-            u\"Hello World\",\n-            flask.Markup(u\"<em>Testing</em>\"),\n+            \"Hello World\",\n+            \"Hello World\",\n+            flask.Markup(\"<em>Testing</em>\"),\n         ]\n         return \"\"\n \n@@ -603,9 +602,9 @@ def test_extended_flashing(app):\n         messages = flask.get_flashed_messages(with_categories=True)\n         assert len(messages) == 3\n         assert list(messages) == [\n-            (\"message\", u\"Hello World\"),\n-            (\"error\", u\"Hello World\"),\n-            (\"warning\", flask.Markup(u\"<em>Testing</em>\")),\n+            (\"message\", \"Hello World\"),\n+            (\"error\", \"Hello World\"),\n+            (\"warning\", flask.Markup(\"<em>Testing</em>\")),\n         ]\n         return \"\"\n \n@@ -614,7 +613,7 @@ def test_extended_flashing(app):\n         messages = flask.get_flashed_messages(\n             category_filter=[\"message\"], with_categories=True\n         )\n-        assert list(messages) == [(\"message\", u\"Hello World\")]\n+        assert list(messages) == [(\"message\", \"Hello World\")]\n         return \"\"\n \n     @app.route(\"/test_filters/\")\n@@ -623,8 +622,8 @@ def test_extended_flashing(app):\n             category_filter=[\"message\", \"warning\"], with_categories=True\n         )\n         assert list(messages) == [\n-            (\"message\", u\"Hello World\"),\n-            (\"warning\", flask.Markup(u\"<em>Testing</em>\")),\n+            (\"message\", \"Hello World\"),\n+            (\"warning\", flask.Markup(\"<em>Testing</em>\")),\n         ]\n         return \"\"\n \n@@ -632,8 +631,8 @@ def test_extended_flashing(app):\n     def test_filters2():\n         messages = flask.get_flashed_messages(category_filter=[\"message\", \"warning\"])\n         assert len(messages) == 2\n-        assert messages[0] == u\"Hello World\"\n-        assert messages[1] == flask.Markup(u\"<em>Testing</em>\")\n+        assert messages[0] == \"Hello World\"\n+        assert messages[1] == flask.Markup(\"<em>Testing</em>\")\n         return \"\"\n \n     # Create new test client on each test to clean flashed messages.\n@@ -1102,11 +1101,11 @@ def test_enctype_debug_helper(app, client):\n def test_response_types(app, client):\n     @app.route(\"/text\")\n     def from_text():\n-        return u\"Hällo Wörld\"\n+        return \"Hällo Wörld\"\n \n     @app.route(\"/bytes\")\n     def from_bytes():\n-        return u\"Hällo Wörld\".encode(\"utf-8\")\n+        return \"Hällo Wörld\".encode()\n \n     @app.route(\"/full_tuple\")\n     def from_full_tuple():\n@@ -1143,8 +1142,8 @@ def test_response_types(app, client):\n     def from_dict():\n         return {\"foo\": \"bar\"}, 201\n \n-    assert client.get(\"/text\").data == u\"Hällo Wörld\".encode(\"utf-8\")\n-    assert client.get(\"/bytes\").data == u\"Hällo Wörld\".encode(\"utf-8\")\n+    assert client.get(\"/text\").data == \"Hällo Wörld\".encode()\n+    assert client.get(\"/bytes\").data == \"Hällo Wörld\".encode()\n \n     rv = client.get(\"/full_tuple\")\n     assert rv.data == b\"Meh\"\n@@ -1611,11 +1610,11 @@ def test_inject_blueprint_url_defaults(app):\n \n \n def test_nonascii_pathinfo(app, client):\n-    @app.route(u\"/киртест\")\n+    @app.route(\"/киртест\")\n     def index():\n         return \"Hello World!\"\n \n-    rv = client.get(u\"/киртест\")\n+    rv = client.get(\"/киртест\")\n     assert rv.data == b\"Hello World!\"\n \n \n@@ -1875,7 +1874,7 @@ def test_multi_route_rules(app, client):\n \n \n def test_multi_route_class_views(app, client):\n-    class View(object):\n+    class View:\n         def __init__(self, app):\n             app.add_url_rule(\"/\", \"index\", self.index)\n             app.add_url_rule(\"/<test>/\", \"index\", self.index)\n@@ -1907,12 +1906,12 @@ def test_run_server_port(monkeypatch, app):\n \n     # Mocks werkzeug.serving.run_simple method\n     def run_simple_mock(hostname, port, application, *args, **kwargs):\n-        rv[\"result\"] = \"running on %s:%s ...\" % (hostname, port)\n+        rv[\"result\"] = f\"running on {hostname}:{port} ...\"\n \n     monkeypatch.setattr(werkzeug.serving, \"run_simple\", run_simple_mock)\n     hostname, port = \"localhost\", 8000\n     app.run(hostname, port, debug=True)\n-    assert rv[\"result\"] == \"running on %s:%s ...\" % (hostname, port)\n+    assert rv[\"result\"] == f\"running on {hostname}:{port} ...\"\n \n \n @pytest.mark.parametrize(\n\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n \"\"\"\n     tests.blueprints\n     ~~~~~~~~~~~~~~~~\n\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n \"\"\"\n     tests.test_cli\n     ~~~~~~~~~~~~~~\n@@ -8,8 +7,6 @@\n \"\"\"\n # This file was part of Flask-CLI and was modified under the terms of\n # its Revised BSD License. Copyright © 2015 CERN.\n-from __future__ import absolute_import\n-\n import os\n import ssl\n import sys\n@@ -261,7 +258,7 @@ def test_get_version(test_apps, capsys):\n     from werkzeug import __version__ as werkzeug_version\n     from platform import python_version\n \n-    class MockCtx(object):\n+    class MockCtx:\n         resilient_parsing = False\n         color = None\n \n\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n \"\"\"\n     tests.test_config\n     ~~~~~~~~~~~~~~~~~\n@@ -65,7 +64,7 @@ def test_config_from_mapping():\n \n \n def test_config_from_class():\n-    class Base(object):\n+    class Base:\n         TEST_KEY = \"foo\"\n \n     class Test(Base):\n@@ -186,8 +185,8 @@ def test_from_pyfile_weird_encoding(tmpdir, encoding):\n     f = tmpdir.join(\"my_config.py\")\n     f.write_binary(\n         textwrap.dedent(\n-            u\"\"\"\n-    # -*- coding: {0} -*-\n+            \"\"\"\n+    # -*- coding: {} -*-\n     TEST_VALUE = \"föö\"\n     \"\"\".format(\n                 encoding\n@@ -197,4 +196,4 @@ def test_from_pyfile_weird_encoding(tmpdir, encoding):\n     app = flask.Flask(__name__)\n     app.config.from_pyfile(str(f))\n     value = app.config[\"TEST_VALUE\"]\n-    assert value == u\"föö\"\n+    assert value == \"föö\"\n\n@@ -10,7 +10,7 @@ def test_custom_converters(app, client):\n             return value.split(\",\")\n \n         def to_url(self, value):\n-            base_to_url = super(ListConverter, self).to_url\n+            base_to_url = super().to_url\n             return \",\".join(base_to_url(x) for x in value)\n \n     app.url_map.converters[\"list\"] = ListConverter\n\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n \"\"\"\n     tests.helpers\n     ~~~~~~~~~~~~~~~~~~~~~~~\n@@ -38,7 +37,7 @@ def has_encoding(name):\n         return False\n \n \n-class FakePath(object):\n+class FakePath:\n     \"\"\"Fake object to represent a ``PathLike object``.\n \n     This represents a ``pathlib.Path`` object in python 3.\n@@ -73,9 +72,9 @@ class FixedOffset(datetime.tzinfo):\n         return datetime.timedelta()\n \n \n-class TestJSON(object):\n+class TestJSON:\n     @pytest.mark.parametrize(\n-        \"value\", (1, \"t\", True, False, None, [], [1, 2, 3], {}, {\"foo\": u\"🐍\"})\n+        \"value\", (1, \"t\", True, False, None, [], [1, 2, 3], {}, {\"foo\": \"🐍\"})\n     )\n     @pytest.mark.parametrize(\n         \"encoding\",\n@@ -126,12 +125,12 @@ class TestJSON(object):\n         assert rv.data == b\"foo\"\n \n     @pytest.mark.parametrize(\n-        \"test_value,expected\", [(True, '\"\\\\u2603\"'), (False, u'\"\\u2603\"')]\n+        \"test_value,expected\", [(True, '\"\\\\u2603\"'), (False, '\"\\u2603\"')]\n     )\n     def test_json_as_unicode(self, test_value, expected, app, app_ctx):\n \n         app.config[\"JSON_AS_ASCII\"] = test_value\n-        rv = flask.json.dumps(u\"\\N{SNOWMAN}\")\n+        rv = flask.json.dumps(\"\\N{SNOWMAN}\")\n         assert rv == expected\n \n     def test_json_dump_to_file(self, app, app_ctx):\n@@ -217,7 +216,7 @@ class TestJSON(object):\n         )\n \n         for i, d in enumerate(test_dates):\n-            url = \"/datetest{0}\".format(i)\n+            url = f\"/datetest{i}\"\n             app.add_url_rule(url, str(i), lambda val=d: flask.jsonify(x=val))\n             rv = client.get(url)\n             assert rv.mimetype == \"application/json\"\n@@ -262,7 +261,7 @@ class TestJSON(object):\n     def test_template_escaping(self, app, req_ctx):\n         render = flask.render_template_string\n         rv = flask.json.htmlsafe_dumps(\"</script>\")\n-        assert rv == u'\"\\\\u003c/script\\\\u003e\"'\n+        assert rv == '\"\\\\u003c/script\\\\u003e\"'\n         assert type(rv) is str\n         rv = render('{{ \"</script>\"|tojson }}')\n         assert rv == '\"\\\\u003c/script\\\\u003e\"'\n@@ -280,7 +279,7 @@ class TestJSON(object):\n         assert rv == '<a ng-data=\\'{\"x\": [\"foo\", \"bar\", \"baz\\\\u0027\"]}\\'></a>'\n \n     def test_json_customization(self, app, client):\n-        class X(object):  # noqa: B903, for Python2 compatibility\n+        class X:  # noqa: B903, for Python2 compatibility\n             def __init__(self, val):\n                 self.val = val\n \n@@ -315,7 +314,7 @@ class TestJSON(object):\n         assert rv.data == b'\"<42>\"'\n \n     def test_blueprint_json_customization(self, app, client):\n-        class X(object):  # noqa: B903, for Python2 compatibility\n+        class X:  # noqa: B903, for Python2 compatibility\n             def __init__(self, val):\n                 self.val = val\n \n@@ -368,9 +367,9 @@ class TestJSON(object):\n         def index():\n             return flask.request.args[\"foo\"]\n \n-        rv = client.get(u\"/?foo=정상처리\".encode(\"euc-kr\"))\n+        rv = client.get(\"/?foo=정상처리\".encode(\"euc-kr\"))\n         assert rv.status_code == 200\n-        assert rv.data == u\"정상처리\".encode(\"utf-8\")\n+        assert rv.data == \"정상처리\".encode()\n \n     def test_json_key_sorting(self, app, client):\n         app.debug = True\n@@ -443,7 +442,7 @@ class TestJSON(object):\n             assert lines == sorted_by_str\n \n \n-class PyBytesIO(object):\n+class PyBytesIO:\n     def __init__(self, *args, **kwargs):\n         self._io = io.BytesIO(*args, **kwargs)\n \n@@ -451,7 +450,7 @@ class PyBytesIO(object):\n         return getattr(self._io, name)\n \n \n-class TestSendfile(object):\n+class TestSendfile:\n     def test_send_file_regular(self, app, req_ctx):\n         rv = flask.send_file(\"static/index.html\")\n         assert rv.direct_passthrough\n@@ -516,7 +515,7 @@ class TestSendfile(object):\n     @pytest.mark.parametrize(\n         \"opener\",\n         [\n-            lambda app: io.StringIO(u\"Test\"),\n+            lambda app: io.StringIO(\"Test\"),\n             lambda app: open(os.path.join(app.static_folder, \"index.html\")),\n         ],\n     )\n@@ -673,13 +672,13 @@ class TestSendfile(object):\n         (\n             (\"index.html\", \"index.html\", False),\n             (\n-                u\"Ñandú／pingüino.txt\",\n+                \"Ñandú／pingüino.txt\",\n                 '\"Nandu/pinguino.txt\"',\n                 \"%C3%91and%C3%BA%EF%BC%8Fping%C3%BCino.txt\",\n             ),\n-            (u\"Vögel.txt\", \"Vogel.txt\", \"V%C3%B6gel.txt\"),\n+            (\"Vögel.txt\", \"Vogel.txt\", \"V%C3%B6gel.txt\"),\n             # \":/\" are not safe in filename* value\n-            (u\"те:/ст\", '\":/\"', \"%D1%82%D0%B5%3A%2F%D1%81%D1%82\"),\n+            (\"те:/ст\", '\":/\"', \"%D1%82%D0%B5%3A%2F%D1%81%D1%82\"),\n         ),\n     )\n     def test_attachment_filename_encoding(self, filename, ascii, utf8):\n@@ -775,7 +774,7 @@ class TestSendfile(object):\n             flask.send_from_directory(\"static\", \"bad\\x00\")\n \n \n-class TestUrlFor(object):\n+class TestUrlFor:\n     def test_url_for_with_anchor(self, app, req_ctx):\n         @app.route(\"/\")\n         def index():\n@@ -834,7 +833,7 @@ class TestUrlFor(object):\n         assert flask.url_for(\"myview\", _method=\"POST\") == \"/myview/create\"\n \n \n-class TestNoImports(object):\n+class TestNoImports:\n     \"\"\"Test Flasks are created without import.\n \n     Avoiding ``__import__`` helps create Flask instances where there are errors\n@@ -853,7 +852,7 @@ class TestNoImports(object):\n             AssertionError(\"Flask(import_name) is importing import_name.\")\n \n \n-class TestStreaming(object):\n+class TestStreaming:\n     def test_streaming_with_context(self, app, client):\n         @app.route(\"/\")\n         def index():\n@@ -884,7 +883,7 @@ class TestStreaming(object):\n     def test_streaming_with_context_and_custom_close(self, app, client):\n         called = []\n \n-        class Wrapper(object):\n+        class Wrapper:\n             def __init__(self, gen):\n                 self._gen = gen\n \n@@ -927,7 +926,7 @@ class TestStreaming(object):\n         assert rv.data == b\"flask\"\n \n \n-class TestSafeJoin(object):\n+class TestSafeJoin:\n     def test_safe_join(self):\n         # Valid combinations of *args and expected joined paths.\n         passing = (\n@@ -968,7 +967,7 @@ class TestSafeJoin(object):\n                 print(flask.safe_join(*args))\n \n \n-class TestHelpers(object):\n+class TestHelpers:\n     @pytest.mark.parametrize(\n         \"debug, expected_flag, expected_default_flag\",\n         [\n\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n \"\"\"\n     tests.test_instance\n     ~~~~~~~~~~~~~~~~~~~\n\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n \"\"\"\n tests.test_json_tag\n ~~~~~~~~~~~~~~~~~~~\n@@ -48,7 +47,7 @@ def test_duplicate_tag():\n \n \n def test_custom_tag():\n-    class Foo(object):  # noqa: B903, for Python2 compatibility\n+    class Foo:  # noqa: B903, for Python2 compatibility\n         def __init__(self, data):\n             self.data = data\n \n\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n \"\"\"\n tests.test_logging\n ~~~~~~~~~~~~~~~~~~~\n\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n \"\"\"\n     tests.regression\n     ~~~~~~~~~~~~~~~~~~~~~~~~~~\n@@ -20,7 +19,7 @@ import flask\n _gc_lock = threading.Lock()\n \n \n-class assert_no_leak(object):\n+class assert_no_leak:\n     def __enter__(self):\n         gc.disable()\n         _gc_lock.acquire()\n\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n \"\"\"\n     tests.reqctx\n     ~~~~~~~~~~~~\n@@ -150,7 +149,7 @@ def test_manual_context_binding(app):\n \n \n @pytest.mark.skipif(greenlet is None, reason=\"greenlet not installed\")\n-class TestGreenletContextCopying(object):\n+class TestGreenletContextCopying:\n     def test_greenlet_context_copying(self, app, client):\n         greenlets = []\n \n@@ -239,7 +238,7 @@ def test_session_dynamic_cookie_name():\n             if flask.request.url.endswith(\"dynamic_cookie\"):\n                 return \"dynamic_cookie_name\"\n             else:\n-                return super(PathAwareSessionInterface, self).get_cookie_name(app)\n+                return super().get_cookie_name(app)\n \n     class CustomFlask(flask.Flask):\n         session_interface = PathAwareSessionInterface()\n@@ -291,7 +290,7 @@ def test_bad_environ_raises_bad_request():\n     environ = builder.get_environ()\n \n     # use a non-printable character in the Host - this is key to this test\n-    environ[\"HTTP_HOST\"] = u\"\\x8a\"\n+    environ[\"HTTP_HOST\"] = \"\\x8a\"\n \n     with app.request_context(environ):\n         response = app.full_dispatch_request()\n@@ -311,7 +310,7 @@ def test_environ_for_valid_idna_completes():\n     environ = builder.get_environ()\n \n     # these characters are all IDNA-compatible\n-    environ[\"HTTP_HOST\"] = u\"ąśźäüжŠßя.com\"\n+    environ[\"HTTP_HOST\"] = \"ąśźäüжŠßя.com\"\n \n     with app.request_context(environ):\n         response = app.full_dispatch_request()\n\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n \"\"\"\n     tests.signals\n     ~~~~~~~~~~~~~~~~~~~~~~~\n\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n \"\"\"\n     tests.subclassing\n     ~~~~~~~~~~~~~~~~~\n\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n \"\"\"\n     tests.templating\n     ~~~~~~~~~~~~~~~~\n@@ -417,14 +416,14 @@ def test_template_loader_debugging(test_apps, monkeypatch):\n             text = str(record.msg)\n             assert '1: trying loader of application \"blueprintapp\"' in text\n             assert (\n-                '2: trying loader of blueprint \"admin\" ' \"(blueprintapp.apps.admin)\"\n+                '2: trying loader of blueprint \"admin\" (blueprintapp.apps.admin)'\n             ) in text\n             assert (\n-                'trying loader of blueprint \"frontend\" ' \"(blueprintapp.apps.frontend)\"\n+                'trying loader of blueprint \"frontend\" (blueprintapp.apps.frontend)'\n             ) in text\n             assert \"Error: the template could not be found\" in text\n             assert (\n-                \"looked up from an endpoint that belongs to \" 'the blueprint \"frontend\"'\n+                'looked up from an endpoint that belongs to the blueprint \"frontend\"'\n             ) in text\n             assert \"See https://flask.palletsprojects.com/blueprints/#templates\" in text\n \n\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n \"\"\"\n     tests.testing\n     ~~~~~~~~~~~~~\n@@ -122,8 +121,8 @@ def test_path_is_url(app):\n def test_environbuilder_json_dumps(app):\n     \"\"\"EnvironBuilder.json_dumps() takes settings from the app.\"\"\"\n     app.config[\"JSON_AS_ASCII\"] = False\n-    eb = EnvironBuilder(app, json=u\"\\u20ac\")\n-    assert eb.input_stream.read().decode(\"utf8\") == u'\"\\u20ac\"'\n+    eb = EnvironBuilder(app, json=\"\\u20ac\")\n+    assert eb.input_stream.read().decode(\"utf8\") == '\"\\u20ac\"'\n \n \n def test_blueprint_with_subdomain():\n@@ -324,7 +323,7 @@ def test_client_json_no_app_context(app, client):\n     def hello():\n         return \"Hello, {}!\".format(flask.request.json[\"name\"])\n \n-    class Namespace(object):\n+    class Namespace:\n         count = 0\n \n         def add(self, app):\n@@ -402,7 +401,7 @@ def test_cli_invoke(app):\n \n \n def test_cli_custom_obj(app):\n-    class NS(object):\n+    class NS:\n         called = False\n \n     def create_app():\n\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n \"\"\"\n tests.test_user_error_handler\n ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n@@ -208,7 +207,7 @@ def test_default_error_handler():\n     assert c.get(\"/slash\", follow_redirects=True).data == b\"slash\"\n \n \n-class TestGenericHandlers(object):\n+class TestGenericHandlers:\n     \"\"\"Test how very generic handlers are dispatched to.\"\"\"\n \n     class Custom(Exception):\n\n@@ -1,4 +1,3 @@\n-# -*- coding: utf-8 -*-\n \"\"\"\n     tests.views\n     ~~~~~~~~~~~\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
