{"custom_id": "fastapi#a46bbc54cd4565baa1e3a6ac5cc03fa09b6e3fb3", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 31 | Lines Deleted: 15 | Files Changed: 3 | Hunks: 12 | Methods Changed: 3 | Complexity Δ (Sum/Max): 5/2 | Churn Δ: 46 | Churn Cumulative: 883 | Contributors (this commit): 4 | Commits (past 90d): 10 | Contributors (cumulative): 10 | DMM Complexity: 1.0\n\nDIFF:\n@@ -1,3 +1,4 @@\n+import importlib\n from pathlib import Path\n \n import pytest\n@@ -283,12 +284,17 @@ openapi_schema = {\n \n @pytest.fixture(scope=\"module\")\n def client():\n-    # Import while creating the client to create the DB after starting the test session\n-    from sql_databases.sql_app.main import app\n-\n     test_db = Path(\"./sql_app.db\")\n-    with TestClient(app) as c:\n+    if test_db.is_file():  # pragma: nocover\n+        test_db.unlink()\n+    # Import while creating the client to create the DB after starting the test session\n+    from sql_databases.sql_app import main\n+\n+    # Ensure import side effects are re-executed\n+    importlib.reload(main)\n+    with TestClient(main.app) as c:\n         yield c\n+    if test_db.is_file():  # pragma: nocover\n         test_db.unlink()\n \n \n\n@@ -1,3 +1,4 @@\n+import importlib\n from pathlib import Path\n \n import pytest\n@@ -283,12 +284,18 @@ openapi_schema = {\n \n @pytest.fixture(scope=\"module\")\n def client():\n-    # Import while creating the client to create the DB after starting the test session\n-    from sql_databases.sql_app.alt_main import app\n-\n     test_db = Path(\"./sql_app.db\")\n-    with TestClient(app) as c:\n+    if test_db.is_file():  # pragma: nocover\n+        test_db.unlink()\n+    # Import while creating the client to create the DB after starting the test session\n+    from sql_databases.sql_app import alt_main\n+\n+    # Ensure import side effects are re-executed\n+    importlib.reload(alt_main)\n+\n+    with TestClient(alt_main.app) as c:\n         yield c\n+    if test_db.is_file():  # pragma: nocover\n         test_db.unlink()\n \n \n\n@@ -1,13 +1,16 @@\n+import importlib\n from pathlib import Path\n \n \n def test_testing_dbs():\n-    # Import while creating the client to create the DB after starting the test session\n-    from sql_databases.sql_app.tests.test_sql_app import test_create_user\n-\n     test_db = Path(\"./test.db\")\n-    app_db = Path(\"./sql_app.db\")\n-    test_create_user()\n+    if test_db.is_file():  # pragma: nocover\n+        test_db.unlink()\n+    # Import while creating the client to create the DB after starting the test session\n+    from sql_databases.sql_app.tests import test_sql_app\n+\n+    # Ensure import side effects are re-executed\n+    importlib.reload(test_sql_app)\n+    test_sql_app.test_create_user()\n+    if test_db.is_file():  # pragma: nocover\n         test_db.unlink()\n-    if app_db.is_file():  # pragma: nocover\n-        app_db.unlink()\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#d4f3ca1c1b471a25634a7114f71a7cdd7a0ac18a", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 237 | Contributors (this commit): 1 | Commits (past 90d): 15 | Contributors (cumulative): 1 | DMM Complexity: None\n\nDIFF:\n@@ -1,6 +1,6 @@\n \"\"\"FastAPI framework, high performance, easy to learn, fast to code, ready for production\"\"\"\n \n-__version__ = \"0.54.0\"\n+__version__ = \"0.54.1\"\n \n from starlette import status\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#bd1e85a8d31d377bca57f2161f3282feb708fe63", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 2 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 2 | Churn Cumulative: 2 | Contributors (this commit): 2 | Commits (past 90d): 2 | Contributors (cumulative): 2 | DMM Complexity: None\n\nDIFF:\n@@ -1,5 +1,5 @@\n from typing import Set, Tuple\n \n \n-def process_items(items_t: Tuple[int], items_s: Set[bytes]):\n+def process_items(items_t: Tuple[int, int, str], items_s: Set[bytes]):\n     return items_t, items_s\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#e4f09478217697742163df5a61b45abf6e855853", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 6 | Lines Deleted: 3 | Files Changed: 1 | Hunks: 3 | Methods Changed: 3 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 9 | Churn Cumulative: 461 | Contributors (this commit): 2 | Commits (past 90d): 7 | Contributors (cumulative): 2 | DMM Complexity: 0.6666666666666666\n\nDIFF:\n@@ -93,7 +93,8 @@ def new_lang(lang: str = typer.Argument(..., callback=lang_callback)):\n     new_config = get_base_lang_config(lang)\n     new_config_path: Path = Path(new_path) / mkdocs_name\n     new_config_path.write_text(\n-        yaml.dump(new_config, sort_keys=False, width=200), encoding=\"utf-8\"\n+        yaml.dump(new_config, sort_keys=False, width=200, allow_unicode=True),\n+        encoding=\"utf-8\",\n     )\n     new_config_docs_path: Path = new_path / \"docs\"\n     new_config_docs_path.mkdir()\n@@ -177,7 +178,8 @@ def build_lang(\n     lang_config[\"nav\"] = export_lang_nav\n     build_lang_config_path: Path = build_lang_path / mkdocs_name\n     build_lang_config_path.write_text(\n-        yaml.dump(lang_config, sort_keys=False, width=200), encoding=\"utf-8\"\n+        yaml.dump(lang_config, sort_keys=False, width=200, allow_unicode=True),\n+        encoding=\"utf-8\",\n     )\n     current_dir = os.getcwd()\n     os.chdir(build_lang_path)\n@@ -295,7 +297,8 @@ def update_config(lang: str):\n         languages.append({name: f\"/{name}/\"})\n     config[\"nav\"][1] = {\"Languages\": languages}\n     config_path.write_text(\n-        yaml.dump(config, sort_keys=False, width=200), encoding=\"utf-8\"\n+        yaml.dump(config, sort_keys=False, width=200, allow_unicode=True),\n+        encoding=\"utf-8\",\n     )\n \n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#409264960ecdfb2e96a14f16183734f155e57aac", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 62 | Lines Deleted: 3 | Files Changed: 4 | Hunks: 3 | Methods Changed: 4 | Complexity Δ (Sum/Max): 1/2 | Churn Δ: 65 | Churn Cumulative: 2166 | Contributors (this commit): 13 | Commits (past 90d): 6 | Contributors (cumulative): 16 | DMM Complexity: 1.0\n\nDIFF:\n@@ -0,0 +1,16 @@\n+from fastapi import FastAPI\n+from pydantic import BaseSettings\n+\n+\n+class Settings(BaseSettings):\n+    openapi_url: str = \"/openapi.json\"\n+\n+\n+settings = Settings()\n+\n+app = FastAPI(openapi_url=settings.openapi_url)\n+\n+\n+@app.get(\"/\")\n+def root():\n+    return {\"message\": \"Hello World\"}\n\n@@ -81,9 +81,6 @@ class FastAPI(Starlette):\n         if self.openapi_url:\n             assert self.title, \"A title must be provided for OpenAPI, e.g.: 'My API'\"\n             assert self.version, \"A version must be provided for OpenAPI, e.g.: '2.1.0'\"\n-\n-        if self.docs_url or self.redoc_url:\n-            assert self.openapi_url, \"The openapi_url is required for the docs\"\n         self.openapi_schema: Optional[Dict[str, Any]] = None\n         self.setup()\n \n\n\n@@ -0,0 +1,46 @@\n+import importlib\n+\n+from fastapi.testclient import TestClient\n+\n+from conditional_openapi import tutorial001\n+\n+openapi_schema = {\n+    \"openapi\": \"3.0.2\",\n+    \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n+    \"paths\": {\n+        \"/\": {\n+            \"get\": {\n+                \"summary\": \"Root\",\n+                \"operationId\": \"root__get\",\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                    }\n+                },\n+            }\n+        }\n+    },\n+}\n+\n+\n+def test_default_openapi():\n+    client = TestClient(tutorial001.app)\n+    response = client.get(\"/openapi.json\")\n+    assert response.json() == openapi_schema\n+    response = client.get(\"/docs\")\n+    assert response.status_code == 200, response.text\n+    response = client.get(\"/redoc\")\n+    assert response.status_code == 200, response.text\n+\n+\n+def test_disable_openapi(monkeypatch):\n+    monkeypatch.setenv(\"OPENAPI_URL\", \"\")\n+    importlib.reload(tutorial001)\n+    client = TestClient(tutorial001.app)\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 404, response.text\n+    response = client.get(\"/docs\")\n+    assert response.status_code == 404, response.text\n+    response = client.get(\"/redoc\")\n+    assert response.status_code == 404, response.text\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#f7eea768f66780098a9be3e099201e464b84e9ff", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 239 | Contributors (this commit): 1 | Commits (past 90d): 13 | Contributors (cumulative): 1 | DMM Complexity: None\n\nDIFF:\n@@ -1,6 +1,6 @@\n \"\"\"FastAPI framework, high performance, easy to learn, fast to code, ready for production\"\"\"\n \n-__version__ = \"0.54.1\"\n+__version__ = \"0.54.2\"\n \n from starlette import status\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#d53a253c8d5f4be4854061baf8b106378313926d", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): 9/9 | Churn Δ: 2 | Churn Cumulative: 2 | Contributors (this commit): 2 | Commits (past 90d): 2 | Contributors (cumulative): 2 | DMM Complexity: None\n\nDIFF:\n@@ -13,8 +13,8 @@ app = FastAPI()\n \n # Dependency\n def get_db():\n-    try:\n     db = SessionLocal()\n+    try:\n         yield db\n     finally:\n         db.close()\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#ee335bca82bd2a336f54a8a0d0d6a1d457f92389", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 69 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 70 | Churn Cumulative: 200 | Contributors (this commit): 3 | Commits (past 90d): 3 | Contributors (cumulative): 3 | DMM Complexity: 1.0\n\nDIFF:\n@@ -76,10 +76,78 @@ openapi_schema = {\n }\n \n \n+openapi_schema2 = {\n+    \"openapi\": \"3.0.2\",\n+    \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n+    \"paths\": {\n+        \"/model/{model_name}\": {\n+            \"get\": {\n+                \"summary\": \"Get Model\",\n+                \"operationId\": \"get_model_model__model_name__get\",\n+                \"parameters\": [\n+                    {\n+                        \"required\": True,\n+                        \"schema\": {\"$ref\": \"#/definitions/ModelName\"},\n+                        \"name\": \"model_name\",\n+                        \"in\": \"path\",\n+                    }\n+                ],\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                    },\n+                    \"422\": {\n+                        \"description\": \"Validation Error\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\n+                                    \"$ref\": \"#/components/schemas/HTTPValidationError\"\n+                                }\n+                            }\n+                        },\n+                    },\n+                },\n+            }\n+        }\n+    },\n+    \"components\": {\n+        \"schemas\": {\n+            \"HTTPValidationError\": {\n+                \"title\": \"HTTPValidationError\",\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"detail\": {\n+                        \"title\": \"Detail\",\n+                        \"type\": \"array\",\n+                        \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n+                    }\n+                },\n+            },\n+            \"ValidationError\": {\n+                \"title\": \"ValidationError\",\n+                \"required\": [\"loc\", \"msg\", \"type\"],\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"loc\": {\n+                        \"title\": \"Location\",\n+                        \"type\": \"array\",\n+                        \"items\": {\"type\": \"string\"},\n+                    },\n+                    \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n+                    \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n+                },\n+            },\n+        }\n+    },\n+}\n+\n+\n def test_openapi():\n     response = client.get(\"/openapi.json\")\n     assert response.status_code == 200, response.text\n-    assert response.json() == openapi_schema\n+    data = response.json()\n+    assert data == openapi_schema or data == openapi_schema2\n \n \n @pytest.mark.parametrize(\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#98bb9f13da4932fac8bc138f77fba38c34e553ee", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 241 | Contributors (this commit): 1 | Commits (past 90d): 13 | Contributors (cumulative): 1 | DMM Complexity: None\n\nDIFF:\n@@ -1,6 +1,6 @@\n \"\"\"FastAPI framework, high performance, easy to learn, fast to code, ready for production\"\"\"\n \n-__version__ = \"0.54.2\"\n+__version__ = \"0.55.0\"\n \n from starlette import status\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#5984233223777313e95a92d534ab1db711bd606a", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 84 | Lines Deleted: 53 | Files Changed: 4 | Hunks: 27 | Methods Changed: 12 | Complexity Δ (Sum/Max): 0/7 | Churn Δ: 137 | Churn Cumulative: 3249 | Contributors (this commit): 26 | Commits (past 90d): 13 | Contributors (cumulative): 40 | DMM Complexity: 0.5\n\nDIFF:\n@@ -188,6 +188,16 @@ def get_flat_dependant(\n     return flat_dependant\n \n \n+def get_flat_params(dependant: Dependant) -> List[ModelField]:\n+    flat_dependant = get_flat_dependant(dependant, skip_repeats=True)\n+    return (\n+        flat_dependant.path_params\n+        + flat_dependant.query_params\n+        + flat_dependant.header_params\n+        + flat_dependant.cookie_params\n+    )\n+\n+\n def is_scalar_field(field: ModelField) -> bool:\n     field_info = get_field_info(field)\n     if not (\n\n@@ -1,9 +1,10 @@\n import http.client\n-from typing import Any, Dict, List, Optional, Sequence, Tuple, Type, cast\n+from enum import Enum\n+from typing import Any, Dict, List, Optional, Sequence, Set, Tuple, Type, Union, cast\n \n from fastapi import routing\n from fastapi.dependencies.models import Dependant\n-from fastapi.dependencies.utils import get_flat_dependant\n+from fastapi.dependencies.utils import get_flat_dependant, get_flat_params\n from fastapi.encoders import jsonable_encoder\n from fastapi.openapi.constants import (\n     METHODS_WITH_BODY,\n@@ -15,11 +16,14 @@ from fastapi.params import Body, Param\n from fastapi.utils import (\n     generate_operation_id_for_path,\n     get_field_info,\n-    get_flat_models_from_routes,\n     get_model_definitions,\n )\n from pydantic import BaseModel\n-from pydantic.schema import field_schema, get_model_name_map\n+from pydantic.schema import (\n+    field_schema,\n+    get_flat_models_from_fields,\n+    get_model_name_map,\n+)\n from pydantic.utils import lenient_issubclass\n from starlette.responses import JSONResponse\n from starlette.routing import BaseRoute\n@@ -64,16 +68,6 @@ status_code_ranges: Dict[str, str] = {\n }\n \n \n-def get_openapi_params(dependant: Dependant) -> List[ModelField]:\n-    flat_dependant = get_flat_dependant(dependant, skip_repeats=True)\n-    return (\n-        flat_dependant.path_params\n-        + flat_dependant.query_params\n-        + flat_dependant.header_params\n-        + flat_dependant.cookie_params\n-    )\n-\n-\n def get_openapi_security_definitions(flat_dependant: Dependant) -> Tuple[Dict, List]:\n     security_definitions = {}\n     operation_security = []\n@@ -90,17 +84,22 @@ def get_openapi_security_definitions(flat_dependant: Dependant) -> Tuple[Dict, L\n \n \n def get_openapi_operation_parameters(\n+    *,\n     all_route_params: Sequence[ModelField],\n+    model_name_map: Dict[Union[Type[BaseModel], Type[Enum]], str]\n ) -> List[Dict[str, Any]]:\n     parameters = []\n     for param in all_route_params:\n         field_info = get_field_info(param)\n         field_info = cast(Param, field_info)\n+        # ignore mypy error until enum schemas are released\n         parameter = {\n             \"name\": param.alias,\n             \"in\": field_info.in_.value,\n             \"required\": param.required,\n-            \"schema\": field_schema(param, model_name_map={})[0],\n+            \"schema\": field_schema(\n+                param, model_name_map=model_name_map, ref_prefix=REF_PREFIX  # type: ignore\n+            )[0],\n         }\n         if field_info.description:\n             parameter[\"description\"] = field_info.description\n@@ -111,13 +110,16 @@ def get_openapi_operation_parameters(\n \n \n def get_openapi_operation_request_body(\n-    *, body_field: Optional[ModelField], model_name_map: Dict[Type[BaseModel], str]\n+    *,\n+    body_field: Optional[ModelField],\n+    model_name_map: Dict[Union[Type[BaseModel], Type[Enum]], str]\n ) -> Optional[Dict]:\n     if not body_field:\n         return None\n     assert isinstance(body_field, ModelField)\n+    # ignore mypy error until enum schemas are released\n     body_schema, _, _ = field_schema(\n-        body_field, model_name_map=model_name_map, ref_prefix=REF_PREFIX\n+        body_field, model_name_map=model_name_map, ref_prefix=REF_PREFIX  # type: ignore\n     )\n     field_info = cast(Body, get_field_info(body_field))\n     request_media_type = field_info.media_type\n@@ -176,8 +178,10 @@ def get_openapi_path(\n                 operation.setdefault(\"security\", []).extend(operation_security)\n             if security_definitions:\n                 security_schemes.update(security_definitions)\n-            all_route_params = get_openapi_params(route.dependant)\n-            operation_parameters = get_openapi_operation_parameters(all_route_params)\n+            all_route_params = get_flat_params(route.dependant)\n+            operation_parameters = get_openapi_operation_parameters(\n+                all_route_params=all_route_params, model_name_map=model_name_map\n+            )\n             parameters.extend(operation_parameters)\n             if parameters:\n                 operation[\"parameters\"] = list(\n@@ -270,6 +274,38 @@ def get_openapi_path(\n     return path, security_schemes, definitions\n \n \n+def get_flat_models_from_routes(\n+    routes: Sequence[BaseRoute],\n+) -> Set[Union[Type[BaseModel], Type[Enum]]]:\n+    body_fields_from_routes: List[ModelField] = []\n+    responses_from_routes: List[ModelField] = []\n+    request_fields_from_routes: List[ModelField] = []\n+    callback_flat_models: Set[Union[Type[BaseModel], Type[Enum]]] = set()\n+    for route in routes:\n+        if getattr(route, \"include_in_schema\", None) and isinstance(\n+            route, routing.APIRoute\n+        ):\n+            if route.body_field:\n+                assert isinstance(\n+                    route.body_field, ModelField\n+                ), \"A request body must be a Pydantic Field\"\n+                body_fields_from_routes.append(route.body_field)\n+            if route.response_field:\n+                responses_from_routes.append(route.response_field)\n+            if route.response_fields:\n+                responses_from_routes.extend(route.response_fields.values())\n+            if route.callbacks:\n+                callback_flat_models |= get_flat_models_from_routes(route.callbacks)\n+            params = get_flat_params(route.dependant)\n+            request_fields_from_routes.extend(params)\n+\n+    flat_models = callback_flat_models | get_flat_models_from_fields(\n+        body_fields_from_routes + responses_from_routes + request_fields_from_routes,\n+        known_models=set(),\n+    )\n+    return flat_models\n+\n+\n def get_openapi(\n     *,\n     title: str,\n@@ -286,9 +322,11 @@ def get_openapi(\n     components: Dict[str, Dict] = {}\n     paths: Dict[str, Dict] = {}\n     flat_models = get_flat_models_from_routes(routes)\n-    model_name_map = get_model_name_map(flat_models)\n+    # ignore mypy error until enum schemas are released\n+    model_name_map = get_model_name_map(flat_models)  # type: ignore\n+    # ignore mypy error until enum schemas are released\n     definitions = get_model_definitions(\n-        flat_models=flat_models, model_name_map=model_name_map\n+        flat_models=flat_models, model_name_map=model_name_map  # type: ignore\n     )\n     for route in routes:\n         if isinstance(route, routing.APIRoute):\n\n@@ -1,17 +1,16 @@\n import functools\n import re\n from dataclasses import is_dataclass\n-from typing import Any, Dict, List, Optional, Sequence, Set, Type, Union, cast\n+from enum import Enum\n+from typing import Any, Dict, Optional, Set, Type, Union, cast\n \n import fastapi\n-from fastapi import routing\n from fastapi.logger import logger\n from fastapi.openapi.constants import REF_PREFIX\n from pydantic import BaseConfig, BaseModel, create_model\n from pydantic.class_validators import Validator\n-from pydantic.schema import get_flat_models_from_fields, model_process_schema\n+from pydantic.schema import model_process_schema\n from pydantic.utils import lenient_issubclass\n-from starlette.routing import BaseRoute\n \n try:\n     from pydantic.fields import FieldInfo, ModelField, UndefinedType\n@@ -50,38 +49,16 @@ def warning_response_model_skip_defaults_deprecated() -> None:\n     )\n \n \n-def get_flat_models_from_routes(routes: Sequence[BaseRoute]) -> Set[Type[BaseModel]]:\n-    body_fields_from_routes: List[ModelField] = []\n-    responses_from_routes: List[ModelField] = []\n-    callback_flat_models: Set[Type[BaseModel]] = set()\n-    for route in routes:\n-        if getattr(route, \"include_in_schema\", None) and isinstance(\n-            route, routing.APIRoute\n-        ):\n-            if route.body_field:\n-                assert isinstance(\n-                    route.body_field, ModelField\n-                ), \"A request body must be a Pydantic Field\"\n-                body_fields_from_routes.append(route.body_field)\n-            if route.response_field:\n-                responses_from_routes.append(route.response_field)\n-            if route.response_fields:\n-                responses_from_routes.extend(route.response_fields.values())\n-            if route.callbacks:\n-                callback_flat_models |= get_flat_models_from_routes(route.callbacks)\n-    flat_models = callback_flat_models | get_flat_models_from_fields(\n-        body_fields_from_routes + responses_from_routes, known_models=set()\n-    )\n-    return flat_models\n-\n-\n def get_model_definitions(\n-    *, flat_models: Set[Type[BaseModel]], model_name_map: Dict[Type[BaseModel], str]\n+    *,\n+    flat_models: Set[Union[Type[BaseModel], Type[Enum]]],\n+    model_name_map: Dict[Union[Type[BaseModel], Type[Enum]], str],\n ) -> Dict[str, Any]:\n     definitions: Dict[str, Dict] = {}\n     for model in flat_models:\n+        # ignore mypy error until enum schemas are released\n         m_schema, m_definitions, m_nested_models = model_process_schema(\n-            model, model_name_map=model_name_map, ref_prefix=REF_PREFIX\n+            model, model_name_map=model_name_map, ref_prefix=REF_PREFIX  # type: ignore\n         )\n         definitions.update(m_definitions)\n         model_name = model_name_map[model]\n\n@@ -87,7 +87,7 @@ openapi_schema2 = {\n                 \"parameters\": [\n                     {\n                         \"required\": True,\n-                        \"schema\": {\"$ref\": \"#/definitions/ModelName\"},\n+                        \"schema\": {\"$ref\": \"#/components/schemas/ModelName\"},\n                         \"name\": \"model_name\",\n                         \"in\": \"path\",\n                     }\n@@ -124,6 +124,12 @@ openapi_schema2 = {\n                     }\n                 },\n             },\n+            \"ModelName\": {\n+                \"title\": \"ModelName\",\n+                \"enum\": [\"alexnet\", \"resnet\", \"lenet\"],\n+                \"type\": \"string\",\n+                \"description\": \"An enumeration.\",\n+            },\n             \"ValidationError\": {\n                 \"title\": \"ValidationError\",\n                 \"required\": [\"loc\", \"msg\", \"type\"],\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#8d844bc5cff051cdcef533d811204beb5aedf2f3", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 243 | Contributors (this commit): 1 | Commits (past 90d): 14 | Contributors (cumulative): 1 | DMM Complexity: None\n\nDIFF:\n@@ -1,6 +1,6 @@\n \"\"\"FastAPI framework, high performance, easy to learn, fast to code, ready for production\"\"\"\n \n-__version__ = \"0.55.0\"\n+__version__ = \"0.55.1\"\n \n from starlette import status\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#072c2bc7f9d4900c8afe75f2775942a63325c569", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 245 | Contributors (this commit): 1 | Commits (past 90d): 9 | Contributors (cumulative): 1 | DMM Complexity: None\n\nDIFF:\n@@ -1,6 +1,6 @@\n \"\"\"FastAPI framework, high performance, easy to learn, fast to code, ready for production\"\"\"\n \n-__version__ = \"0.55.1\"\n+__version__ = \"0.56.0\"\n \n from starlette import status\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#7e2518350ad2ab529ba1166c304ee299b616f42f", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 31 | Lines Deleted: 32 | Files Changed: 31 | Hunks: 32 | Methods Changed: 62 | Complexity Δ (Sum/Max): 76/23 | Churn Δ: 63 | Churn Cumulative: 90 | Contributors (this commit): 2 | Commits (past 90d): 62 | Contributors (cumulative): 62 | DMM Complexity: 0.0\n\nDIFF:\n@@ -12,6 +12,6 @@ class Item(BaseModel):\n \n \n @app.put(\"/items/{item_id}\")\n-async def update_item(*, item_id: int, item: Item = Body(..., embed=True)):\n+async def update_item(item_id: int, item: Item = Body(..., embed=True)):\n     results = {\"item_id\": item_id, \"item\": item}\n     return results\n\n@@ -17,6 +17,6 @@ class User(BaseModel):\n \n \n @app.put(\"/items/{item_id}\")\n-async def update_item(*, item_id: int, item: Item, user: User):\n+async def update_item(item_id: int, item: Item, user: User):\n     results = {\"item_id\": item_id, \"item\": item, \"user\": user}\n     return results\n\n@@ -18,7 +18,7 @@ class User(BaseModel):\n \n @app.put(\"/items/{item_id}\")\n async def update_item(\n-    *, item_id: int, item: Item, user: User, importance: int = Body(...)\n+    item_id: int, item: Item, user: User, importance: int = Body(...)\n ):\n     results = {\"item_id\": item_id, \"item\": item, \"user\": user, \"importance\": importance}\n     return results\n\n@@ -12,6 +12,6 @@ class Item(BaseModel):\n \n \n @app.put(\"/items/{item_id}\")\n-async def update_item(*, item_id: int, item: Item = Body(..., embed=True)):\n+async def update_item(item_id: int, item: Item = Body(..., embed=True)):\n     results = {\"item_id\": item_id, \"item\": item}\n     return results\n\n@@ -13,6 +13,6 @@ class Item(BaseModel):\n \n \n @app.put(\"/items/{item_id}\")\n-async def update_item(*, item_id: int, item: Item):\n+async def update_item(item_id: int, item: Item):\n     results = {\"item_id\": item_id, \"item\": item}\n     return results\n\n@@ -15,6 +15,6 @@ class Item(BaseModel):\n \n \n @app.put(\"/items/{item_id}\")\n-async def update_item(*, item_id: int, item: Item):\n+async def update_item(item_id: int, item: Item):\n     results = {\"item_id\": item_id, \"item\": item}\n     return results\n\n@@ -15,6 +15,6 @@ class Item(BaseModel):\n \n \n @app.put(\"/items/{item_id}\")\n-async def update_item(*, item_id: int, item: Item):\n+async def update_item(item_id: int, item: Item):\n     results = {\"item_id\": item_id, \"item\": item}\n     return results\n\n@@ -21,6 +21,6 @@ class Item(BaseModel):\n \n \n @app.put(\"/items/{item_id}\")\n-async def update_item(*, item_id: int, item: Item):\n+async def update_item(item_id: int, item: Item):\n     results = {\"item_id\": item_id, \"item\": item}\n     return results\n\n@@ -21,6 +21,6 @@ class Item(BaseModel):\n \n \n @app.put(\"/items/{item_id}\")\n-async def update_item(*, item_id: int, item: Item):\n+async def update_item(item_id: int, item: Item):\n     results = {\"item_id\": item_id, \"item\": item}\n     return results\n\n@@ -21,6 +21,6 @@ class Item(BaseModel):\n \n \n @app.put(\"/items/{item_id}\")\n-async def update_item(*, item_id: int, item: Item):\n+async def update_item(item_id: int, item: Item):\n     results = {\"item_id\": item_id, \"item\": item}\n     return results\n\n@@ -28,5 +28,5 @@ class Offer(BaseModel):\n \n \n @app.post(\"/offers/\")\n-async def create_offer(*, offer: Offer):\n+async def create_offer(offer: Offer):\n     return offer\n\n@@ -12,5 +12,5 @@ class Image(BaseModel):\n \n \n @app.post(\"/images/multiple/\")\n-async def create_multiple_images(*, images: List[Image]):\n+async def create_multiple_images(images: List[Image]):\n     return images\n\n@@ -4,5 +4,5 @@ app = FastAPI()\n \n \n @app.get(\"/items/\")\n-async def read_items(*, ads_id: str = Cookie(None)):\n+async def read_items(ads_id: str = Cookie(None)):\n     return {\"ads_id\": ads_id}\n\n@@ -36,6 +36,6 @@ def fake_save_user(user_in: UserIn):\n \n \n @app.post(\"/user/\", response_model=UserOut)\n-async def create_user(*, user_in: UserIn):\n+async def create_user(user_in: UserIn):\n     user_saved = fake_save_user(user_in)\n     return user_saved\n\n@@ -34,6 +34,6 @@ def fake_save_user(user_in: UserIn):\n \n \n @app.post(\"/user/\", response_model=UserOut)\n-async def create_user(*, user_in: UserIn):\n+async def create_user(user_in: UserIn):\n     user_saved = fake_save_user(user_in)\n     return user_saved\n\n@@ -4,5 +4,5 @@ app = FastAPI()\n \n \n @app.get(\"/items/\")\n-async def read_items(*, user_agent: str = Header(None)):\n+async def read_items(user_agent: str = Header(None)):\n     return {\"User-Agent\": user_agent}\n\n@@ -4,5 +4,5 @@ app = FastAPI()\n \n \n @app.get(\"/items/\")\n-async def read_items(*, strange_header: str = Header(None, convert_underscores=False)):\n+async def read_items(strange_header: str = Header(None, convert_underscores=False)):\n     return {\"strange_header\": strange_header}\n\n@@ -15,7 +15,7 @@ class Item(BaseModel):\n \n \n @app.post(\"/items/\", response_model=Item, summary=\"Create an item\")\n-async def create_item(*, item: Item):\n+async def create_item(item: Item):\n     \"\"\"\n     Create an item with all the information:\n \n\n@@ -15,5 +15,5 @@ class Item(BaseModel):\n \n \n @app.post(\"/items/\", response_model=Item, status_code=status.HTTP_201_CREATED)\n-async def create_item(*, item: Item):\n+async def create_item(item: Item):\n     return item\n\n@@ -15,7 +15,7 @@ class Item(BaseModel):\n \n \n @app.post(\"/items/\", response_model=Item, tags=[\"items\"])\n-async def create_item(*, item: Item):\n+async def create_item(item: Item):\n     return item\n \n \n\n@@ -20,5 +20,5 @@ class Item(BaseModel):\n     summary=\"Create an item\",\n     description=\"Create an item with all the information, name, description, price, tax and a set of unique tags\",\n )\n-async def create_item(*, item: Item):\n+async def create_item(item: Item):\n     return item\n\n@@ -15,7 +15,7 @@ class Item(BaseModel):\n \n \n @app.post(\"/items/\", response_model=Item, summary=\"Create an item\")\n-async def create_item(*, item: Item):\n+async def create_item(item: Item):\n     \"\"\"\n     Create an item with all the information:\n \n\n@@ -20,7 +20,7 @@ class Item(BaseModel):\n     summary=\"Create an item\",\n     response_description=\"The created item\",\n )\n-async def create_item(*, item: Item):\n+async def create_item(item: Item):\n     \"\"\"\n     Create an item with all the information:\n \n\n@@ -4,5 +4,5 @@ app = FastAPI()\n \n \n @app.post(\"/login/\")\n-async def login(*, username: str = Form(...), password: str = Form(...)):\n+async def login(username: str = Form(...), password: str = Form(...)):\n     return {\"username\": username}\n\n@@ -13,5 +13,5 @@ class UserIn(BaseModel):\n \n # Don't do this in production!\n @app.post(\"/user/\", response_model=UserIn)\n-async def create_user(*, user: UserIn):\n+async def create_user(user: UserIn):\n     return user\n\n@@ -18,5 +18,5 @@ class UserOut(BaseModel):\n \n \n @app.post(\"/user/\", response_model=UserOut)\n-async def create_user(*, user: UserIn):\n+async def create_user(user: UserIn):\n     return user\n\n@@ -22,6 +22,6 @@ class Item(BaseModel):\n \n \n @app.put(\"/items/{item_id}\")\n-async def update_item(*, item_id: int, item: Item):\n+async def update_item(item_id: int, item: Item):\n     results = {\"item_id\": item_id, \"item\": item}\n     return results\n\n@@ -12,6 +12,6 @@ class Item(BaseModel):\n \n \n @app.put(\"/items/{item_id}\")\n-async def update_item(*, item_id: int, item: Item):\n+async def update_item(item_id: int, item: Item):\n     results = {\"item_id\": item_id, \"item\": item}\n     return results\n\n@@ -13,7 +13,6 @@ class Item(BaseModel):\n \n @app.put(\"/items/{item_id}\")\n async def update_item(\n-    *,\n     item_id: int,\n     item: Item = Body(\n         ...,\n@@ -23,7 +22,7 @@ async def update_item(\n             \"price\": 35.4,\n             \"tax\": 3.2,\n         },\n-    )\n+    ),\n ):\n     results = {\"item_id\": item_id, \"item\": item}\n     return results\n\n@@ -75,7 +75,7 @@ def authenticate_user(fake_db, username: str, password: str):\n     return user\n \n \n-def create_access_token(*, data: dict, expires_delta: timedelta = None):\n+def create_access_token(data: dict, expires_delta: timedelta = None):\n     to_encode = data.copy()\n     if expires_delta:\n         expire = datetime.utcnow() + expires_delta\n\n@@ -91,7 +91,7 @@ def authenticate_user(fake_db, username: str, password: str):\n     return user\n \n \n-def create_access_token(*, data: dict, expires_delta: timedelta = None):\n+def create_access_token(data: dict, expires_delta: timedelta = None):\n     to_encode = data.copy()\n     if expires_delta:\n         expire = datetime.utcnow() + expires_delta\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#434d32b8917b3f1e45f36a9ea72bb8b45d7266ab", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): -1/0 | Churn Δ: 2 | Churn Cumulative: 434 | Contributors (this commit): 11 | Commits (past 90d): 3 | Contributors (cumulative): 11 | DMM Complexity: None\n\nDIFF:\n@@ -67,7 +67,7 @@ def get_model_definitions(\n \n \n def get_path_param_names(path: str) -> Set[str]:\n-    return {item.strip(\"{}\") for item in re.findall(\"{[^}]*}\", path)}\n+    return set(re.findall(\"{(.*?)}\", path))\n \n \n def create_response_field(\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#d66d8379c0a03319da39b80046093131f4cc9f61", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 146 | Lines Deleted: 4 | Files Changed: 2 | Hunks: 6 | Methods Changed: 4 | Complexity Δ (Sum/Max): 3/3 | Churn Δ: 150 | Churn Cumulative: 1163 | Contributors (this commit): 16 | Commits (past 90d): 4 | Contributors (cumulative): 17 | DMM Complexity: 0.6666666666666666\n\nDIFF:\n@@ -203,27 +203,31 @@ def get_openapi_path(\n                 operation[\"callbacks\"] = callbacks\n             if route.responses:\n                 for (additional_status_code, response) in route.responses.items():\n+                    process_response = response.copy()\n                     assert isinstance(\n-                        response, dict\n+                        process_response, dict\n                     ), \"An additional response must be a dict\"\n                     field = route.response_fields.get(additional_status_code)\n                     if field:\n                         response_schema, _, _ = field_schema(\n                             field, model_name_map=model_name_map, ref_prefix=REF_PREFIX\n                         )\n-                        response.setdefault(\"content\", {}).setdefault(\n+                        process_response.setdefault(\"content\", {}).setdefault(\n                             route_response_media_type or \"application/json\", {}\n                         )[\"schema\"] = response_schema\n                     status_text: Optional[str] = status_code_ranges.get(\n                         str(additional_status_code).upper()\n                     ) or http.client.responses.get(int(additional_status_code))\n-                    response.setdefault(\n+                    process_response.setdefault(\n                         \"description\", status_text or \"Additional Response\"\n                     )\n                     status_code_key = str(additional_status_code).upper()\n                     if status_code_key == \"DEFAULT\":\n                         status_code_key = \"default\"\n-                    operation.setdefault(\"responses\", {})[status_code_key] = response\n+                    process_response.pop(\"model\", None)\n+                    operation.setdefault(\"responses\", {})[\n+                        status_code_key\n+                    ] = process_response\n             status_code = str(route.status_code)\n             operation.setdefault(\"responses\", {}).setdefault(status_code, {})[\n                 \"description\"\n\n@@ -0,0 +1,138 @@\n+from fastapi import APIRouter, FastAPI\n+from fastapi.testclient import TestClient\n+from pydantic import BaseModel, HttpUrl\n+from starlette.responses import JSONResponse\n+\n+\n+class CustomModel(BaseModel):\n+    a: int\n+\n+\n+app = FastAPI()\n+\n+callback_router = APIRouter(default_response_class=JSONResponse)\n+\n+\n+@callback_router.get(\n+    \"{$callback_url}/callback/\", responses={400: {\"model\": CustomModel}}\n+)\n+def callback_route():\n+    pass  # pragma: no cover\n+\n+\n+@app.post(\"/\", callbacks=callback_router.routes)\n+def main_route(callback_url: HttpUrl):\n+    pass  # pragma: no cover\n+\n+\n+openapi_schema = {\n+    \"openapi\": \"3.0.2\",\n+    \"info\": {\"title\": \"FastAPI\", \"version\": \"0.1.0\"},\n+    \"paths\": {\n+        \"/\": {\n+            \"post\": {\n+                \"summary\": \"Main Route\",\n+                \"operationId\": \"main_route__post\",\n+                \"parameters\": [\n+                    {\n+                        \"required\": True,\n+                        \"schema\": {\n+                            \"title\": \"Callback Url\",\n+                            \"maxLength\": 2083,\n+                            \"minLength\": 1,\n+                            \"type\": \"string\",\n+                            \"format\": \"uri\",\n+                        },\n+                        \"name\": \"callback_url\",\n+                        \"in\": \"query\",\n+                    }\n+                ],\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                    },\n+                    \"422\": {\n+                        \"description\": \"Validation Error\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\n+                                    \"$ref\": \"#/components/schemas/HTTPValidationError\"\n+                                }\n+                            }\n+                        },\n+                    },\n+                },\n+                \"callbacks\": {\n+                    \"callback_route\": {\n+                        \"{$callback_url}/callback/\": {\n+                            \"get\": {\n+                                \"summary\": \"Callback Route\",\n+                                \"operationId\": \"callback_route__callback_url__callback__get\",\n+                                \"responses\": {\n+                                    \"400\": {\n+                                        \"content\": {\n+                                            \"application/json\": {\n+                                                \"schema\": {\n+                                                    \"$ref\": \"#/components/schemas/CustomModel\"\n+                                                }\n+                                            }\n+                                        },\n+                                        \"description\": \"Bad Request\",\n+                                    },\n+                                    \"200\": {\n+                                        \"description\": \"Successful Response\",\n+                                        \"content\": {\"application/json\": {\"schema\": {}}},\n+                                    },\n+                                },\n+                            }\n+                        }\n+                    }\n+                },\n+            }\n+        }\n+    },\n+    \"components\": {\n+        \"schemas\": {\n+            \"CustomModel\": {\n+                \"title\": \"CustomModel\",\n+                \"required\": [\"a\"],\n+                \"type\": \"object\",\n+                \"properties\": {\"a\": {\"title\": \"A\", \"type\": \"integer\"}},\n+            },\n+            \"HTTPValidationError\": {\n+                \"title\": \"HTTPValidationError\",\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"detail\": {\n+                        \"title\": \"Detail\",\n+                        \"type\": \"array\",\n+                        \"items\": {\"$ref\": \"#/components/schemas/ValidationError\"},\n+                    }\n+                },\n+            },\n+            \"ValidationError\": {\n+                \"title\": \"ValidationError\",\n+                \"required\": [\"loc\", \"msg\", \"type\"],\n+                \"type\": \"object\",\n+                \"properties\": {\n+                    \"loc\": {\n+                        \"title\": \"Location\",\n+                        \"type\": \"array\",\n+                        \"items\": {\"type\": \"string\"},\n+                    },\n+                    \"msg\": {\"title\": \"Message\", \"type\": \"string\"},\n+                    \"type\": {\"title\": \"Error Type\", \"type\": \"string\"},\n+                },\n+            },\n+        }\n+    },\n+}\n+\n+client = TestClient(app)\n+\n+\n+def test_openapi_schema():\n+    response = client.get(\"/openapi.json\")\n+    assert response.status_code == 200, response.text\n+    assert response.json() == openapi_schema\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#2351fb5623b747f480d8c91af53dc7b3e9736e45", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 0 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 2 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 1 | Churn Cumulative: 3550 | Contributors (this commit): 21 | Commits (past 90d): 4 | Contributors (cumulative): 21 | DMM Complexity: 1.0\n\nDIFF:\n@@ -179,7 +179,6 @@ def get_request_handler(\n                     if body_bytes:\n                         body = await request.json()\n         except Exception as e:\n-            logger.error(f\"Error getting request body: {e}\")\n             raise HTTPException(\n                 status_code=400, detail=\"There was an error parsing the body\"\n             ) from e\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "fastapi#b90bf2da9ee5870a45591a10c4c8ac4af76d12f1", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 78 | Lines Deleted: 6 | Files Changed: 2 | Hunks: 20 | Methods Changed: 12 | Complexity Δ (Sum/Max): 13/8 | Churn Δ: 84 | Churn Cumulative: 1754 | Contributors (this commit): 14 | Commits (past 90d): 5 | Contributors (cumulative): 17 | DMM Complexity: 1.0\n\nDIFF:\n@@ -274,7 +274,7 @@ def get_dependant(\n     path_param_names = get_path_param_names(path)\n     endpoint_signature = get_typed_signature(call)\n     signature_params = endpoint_signature.parameters\n-    if inspect.isgeneratorfunction(call) or inspect.isasyncgenfunction(call):\n+    if is_gen_callable(call) or is_async_gen_callable(call):\n         check_dependency_contextmanagers()\n     dependant = Dependant(call=call, name=name, path=path, use_cache=use_cache)\n     for param_name, param in signature_params.items():\n@@ -412,19 +412,41 @@ def add_param_to_fields(*, field: ModelField, dependant: Dependant) -> None:\n \n def is_coroutine_callable(call: Callable) -> bool:\n     if inspect.isroutine(call):\n-        return asyncio.iscoroutinefunction(call)\n+        return inspect.iscoroutinefunction(call)\n     if inspect.isclass(call):\n         return False\n     call = getattr(call, \"__call__\", None)\n-    return asyncio.iscoroutinefunction(call)\n+    return inspect.iscoroutinefunction(call)\n+\n+\n+def is_async_gen_callable(call: Callable) -> bool:\n+    if inspect.isasyncgenfunction(call):\n+        return True\n+    call = getattr(call, \"__call__\", None)\n+    return inspect.isasyncgenfunction(call)\n+\n+\n+def is_gen_callable(call: Callable) -> bool:\n+    if inspect.isgeneratorfunction(call):\n+        return True\n+    call = getattr(call, \"__call__\", None)\n+    return inspect.isgeneratorfunction(call)\n \n \n async def solve_generator(\n     *, call: Callable, stack: AsyncExitStack, sub_values: Dict[str, Any]\n ) -> Any:\n-    if inspect.isgeneratorfunction(call):\n+    if is_gen_callable(call):\n         cm = contextmanager_in_threadpool(contextmanager(call)(**sub_values))\n-    elif inspect.isasyncgenfunction(call):\n+    elif is_async_gen_callable(call):\n+        if not inspect.isasyncgenfunction(call):\n+            # asynccontextmanager from the async_generator backfill pre python3.7\n+            # does not support callables that are not functions or methods.\n+            # See https://github.com/python-trio/async_generator/issues/32\n+            #\n+            # Expand the callable class into its __call__ method before decorating it.\n+            # This approach will work on newer python versions as well.\n+            call = getattr(call, \"__call__\", None)\n         cm = asynccontextmanager(call)(**sub_values)\n     return await stack.enter_async_context(cm)\n \n@@ -505,7 +527,7 @@ async def solve_dependencies(\n             continue\n         if sub_dependant.use_cache and sub_dependant.cache_key in dependency_cache:\n             solved = dependency_cache[sub_dependant.cache_key]\n-        elif inspect.isgeneratorfunction(call) or inspect.isasyncgenfunction(call):\n+        elif is_gen_callable(call) or is_async_gen_callable(call):\n             stack = request.scope.get(\"fastapi_astack\")\n             if stack is None:\n                 raise RuntimeError(\n\n@@ -1,3 +1,5 @@\n+from typing import AsyncGenerator, Generator\n+\n import pytest\n from fastapi import Depends, FastAPI\n from fastapi.testclient import TestClient\n@@ -10,11 +12,21 @@ class CallableDependency:\n         return value\n \n \n+class CallableGenDependency:\n+    def __call__(self, value: str) -> Generator[str, None, None]:\n+        yield value\n+\n+\n class AsyncCallableDependency:\n     async def __call__(self, value: str) -> str:\n         return value\n \n \n+class AsyncCallableGenDependency:\n+    async def __call__(self, value: str) -> AsyncGenerator[str, None]:\n+        yield value\n+\n+\n class MethodsDependency:\n     def synchronous(self, value: str) -> str:\n         return value\n@@ -22,9 +34,17 @@ class MethodsDependency:\n     async def asynchronous(self, value: str) -> str:\n         return value\n \n+    def synchronous_gen(self, value: str) -> Generator[str, None, None]:\n+        yield value\n+\n+    async def asynchronous_gen(self, value: str) -> AsyncGenerator[str, None]:\n+        yield value\n+\n \n callable_dependency = CallableDependency()\n+callable_gen_dependency = CallableGenDependency()\n async_callable_dependency = AsyncCallableDependency()\n+async_callable_gen_dependency = AsyncCallableGenDependency()\n methods_dependency = MethodsDependency()\n \n \n@@ -33,11 +53,23 @@ async def get_callable_dependency(value: str = Depends(callable_dependency)):\n     return value\n \n \n+@app.get(\"/callable-gen-dependency\")\n+async def get_callable_gen_dependency(value: str = Depends(callable_gen_dependency)):\n+    return value\n+\n+\n @app.get(\"/async-callable-dependency\")\n async def get_callable_dependency(value: str = Depends(async_callable_dependency)):\n     return value\n \n \n+@app.get(\"/async-callable-gen-dependency\")\n+async def get_callable_gen_dependency(\n+    value: str = Depends(async_callable_gen_dependency),\n+):\n+    return value\n+\n+\n @app.get(\"/synchronous-method-dependency\")\n async def get_synchronous_method_dependency(\n     value: str = Depends(methods_dependency.synchronous),\n@@ -45,6 +77,13 @@ async def get_synchronous_method_dependency(\n     return value\n \n \n+@app.get(\"/synchronous-method-gen-dependency\")\n+async def get_synchronous_method_gen_dependency(\n+    value: str = Depends(methods_dependency.synchronous_gen),\n+):\n+    return value\n+\n+\n @app.get(\"/asynchronous-method-dependency\")\n async def get_asynchronous_method_dependency(\n     value: str = Depends(methods_dependency.asynchronous),\n@@ -52,6 +91,13 @@ async def get_asynchronous_method_dependency(\n     return value\n \n \n+@app.get(\"/asynchronous-method-gen-dependency\")\n+async def get_asynchronous_method_gen_dependency(\n+    value: str = Depends(methods_dependency.asynchronous_gen),\n+):\n+    return value\n+\n+\n client = TestClient(app)\n \n \n@@ -59,9 +105,13 @@ client = TestClient(app)\n     \"route,value\",\n     [\n         (\"/callable-dependency\", \"callable-dependency\"),\n+        (\"/callable-gen-dependency\", \"callable-gen-dependency\"),\n         (\"/async-callable-dependency\", \"async-callable-dependency\"),\n+        (\"/async-callable-gen-dependency\", \"async-callable-gen-dependency\"),\n         (\"/synchronous-method-dependency\", \"synchronous-method-dependency\"),\n+        (\"/synchronous-method-gen-dependency\", \"synchronous-method-gen-dependency\"),\n         (\"/asynchronous-method-dependency\", \"asynchronous-method-dependency\"),\n+        (\"/asynchronous-method-gen-dependency\", \"asynchronous-method-gen-dependency\"),\n     ],\n )\n def test_class_dependency(route, value):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
