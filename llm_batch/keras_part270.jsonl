{"custom_id": "keras#79bc6998071d88ffd456c9c7a4c9a2680b9dd361", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 210 | Contributors (this commit): 5 | Commits (past 90d): 1 | Contributors (cumulative): 5 | DMM Complexity: None\n\nDIFF:\n@@ -12,7 +12,7 @@ from keras.layers import Dense, Dropout, Activation, Flatten\n from keras.layers import Conv2D, MaxPooling2D\n from keras.wrappers.scikit_learn import KerasClassifier\n from keras import backend as K\n-from sklearn.grid_search import GridSearchCV\n+from sklearn.model_selection import GridSearchCV\n \n \n num_classes = 10\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "keras#b9ee83cc227ac0719a0de937ae65392473fe007f", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 4 | Lines Deleted: 4 | Files Changed: 3 | Hunks: 4 | Methods Changed: 4 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 8 | Churn Cumulative: 2390 | Contributors (this commit): 27 | Commits (past 90d): 16 | Contributors (cumulative): 40 | DMM Complexity: None\n\nDIFF:\n@@ -34,7 +34,7 @@ def _serialize_model(model, f, include_optimizer=True):\n \n     # Arguments\n         model: Keras model instance to be serialized.\n-        f: keras.utils.hdf5.HD5Dict instance.\n+        f: keras.utils.io_utils.HD5Dict instance.\n         include_optimizer: If True, serialize optimizer's state together.\n \n     \"\"\"\n\n@@ -219,7 +219,7 @@ class H5Dict(object):\n                 dataset[()] = val\n             else:\n                 dataset[:] = val\n-        if isinstance(val, list):\n+        elif isinstance(val, list):\n             # Check that no item in `data` is larger than `HDF5_OBJECT_HEADER_LIMIT`\n             # because in that case even chunking the array would not make the saving\n             # possible.\n\n@@ -150,7 +150,7 @@ def test_h5dict_attrs():\n         f['y'] = [b'efg', b'hij', b'klmn']\n \n         # ndarray\n-        array = np.random.random((3, 4, 5))\n+        array = np.random.random((4, 5, 512))\n         f['z'] = array\n \n         f.close()\n@@ -183,7 +183,7 @@ def test_h5dict_groups():\n         group3['y'] = [b'efg', b'hij', b'klmn']\n \n         group4 = group3['group4']\n-        array = np.random.random((3, 4, 5))\n+        array = np.random.random((4, 5, 512))\n         group4['z'] = array\n \n         f.close()\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "keras#bb3193098d27a73fb098d756d5ad47394310bd68", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 347 | Contributors (this commit): 19 | Commits (past 90d): 4 | Contributors (cumulative): 19 | DMM Complexity: None\n\nDIFF:\n@@ -37,7 +37,7 @@ setup(name='Keras',\n                         'six>=1.9.0',\n                         'pyyaml',\n                         'h5py',\n-                        'keras_applications==1.0.4',\n+                        'keras_applications>=1.0.4',\n                         'keras_preprocessing==1.0.2'],\n       extras_require={\n           'visualize': ['pydot>=1.2.4'],\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "keras#6fb506979a4074e3b935ce22999311c22f6dce6a", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 141 | Lines Deleted: 28 | Files Changed: 8 | Hunks: 34 | Methods Changed: 17 | Complexity Δ (Sum/Max): 14/4 | Churn Δ: 169 | Churn Cumulative: 27439 | Contributors (this commit): 171 | Commits (past 90d): 85 | Contributors (cumulative): 315 | DMM Complexity: 0.05172413793103448\n\nDIFF:\n@@ -106,20 +106,26 @@ def softsign(x):\n     return K.softsign(x)\n \n \n-def relu(x, alpha=0., max_value=None):\n+def relu(x, alpha=0., max_value=None, threshold=0.):\n     \"\"\"Rectified Linear Unit.\n \n+    With default values, it returns element-wise `max(x, 0)`.\n+\n+    Otherwise, it follows:\n+    `f(x) = max_value` for `x >= max_value`,\n+    `f(x) = x` for `threshold <= x < max_value`,\n+    `f(x) = alpha * (x - threshold)` otherwise.\n+\n     # Arguments\n         x: Input tensor.\n-        alpha: Slope of the negative part. Defaults to zero.\n-        max_value: Maximum value for the output.\n+        alpha: float. Slope of the negative part. Defaults to zero.\n+        max_value: float. Saturation threshold.\n+        threshold: float. Threshold value for thresholded activation.\n \n     # Returns\n-        The (leaky) rectified linear unit activation: `x` if `x > 0`,\n-        `alpha * x` if `x < 0`. If `max_value` is defined, the result\n-        is truncated to this value.\n+        A tensor.\n     \"\"\"\n-    return K.relu(x, alpha=alpha, max_value=max_value)\n+    return K.relu(x, alpha=alpha, max_value=max_value, threshold=threshold)\n \n \n def tanh(x):\n\n@@ -1767,14 +1767,25 @@ def pool3d(x, pool_size, strides=(1, 1, 1), padding='valid',\n     return _postprocess_conv3d_output(x, data_format)\n \n \n-def relu(x, alpha=0., max_value=None):\n+def relu(x, alpha=0., max_value=None, threshold=0.):\n+\n     if alpha != 0.:\n+        if threshold != 0.:\n+            negative_part = C.relu(-x + threshold)\n+        else:\n             negative_part = C.relu(-x)\n+\n+    if threshold != 0.:\n+        x = x * C.greater(x, threshold)\n+    else:\n         x = C.relu(x)\n+\n     if max_value is not None:\n         x = C.clip(x, 0.0, max_value)\n+\n     if alpha != 0.:\n         x -= alpha * negative_part\n+\n     return x\n \n \n\n@@ -3148,30 +3148,55 @@ def in_test_phase(x, alt, training=None):\n \n # NN OPERATIONS\n \n-def relu(x, alpha=0., max_value=None):\n+def relu(x, alpha=0., max_value=None, threshold=0.):\n     \"\"\"Rectified linear unit.\n \n     With default values, it returns element-wise `max(x, 0)`.\n \n+    Otherwise, it follows:\n+    `f(x) = max_value` for `x >= max_value`,\n+    `f(x) = x` for `threshold <= x < max_value`,\n+    `f(x) = alpha * (x - threshold)` otherwise.\n+\n     # Arguments\n         x: A tensor or variable.\n         alpha: A scalar, slope of negative section (default=`0.`).\n-        max_value: Saturation threshold.\n+        max_value: float. Saturation threshold.\n+        threshold: float. Threshold value for thresholded activation.\n \n     # Returns\n         A tensor.\n     \"\"\"\n-    if alpha == 0 and max_value == 6:\n-        return tf.nn.relu6(x)\n \n     if alpha != 0.:\n-        x = tf.nn.leaky_relu(x, alpha)\n+        if max_value is None and threshold == 0.:\n+            return tf.nn.leaky_relu(x, alpha=alpha)\n+\n+        if threshold != 0.:\n+            negative_part = tf.nn.relu(-x + threshold)\n+        else:\n+            negative_part = tf.nn.relu(-x)\n+\n+    clip_max = max_value is not None\n+\n+    if threshold != 0:\n+        # computes x for x > threshold else 0\n+        x = x * tf.cast(tf.greater(x, threshold), floatx())\n+    elif max_value == 6:\n+        # if no threshold, then can use nn.relu6 native TF op for performance\n+        x = tf.nn.relu6(x)\n+        clip_max = False\n     else:\n         x = tf.nn.relu(x)\n \n-    if max_value is not None:\n+    if clip_max:\n         max_value = _to_tensor(max_value, x.dtype.base_dtype)\n-        x = tf.minimum(x, max_value)\n+        zero = _to_tensor(0., x.dtype.base_dtype)\n+        x = tf.clip_by_value(x, zero, max_value)\n+\n+    if alpha != 0:\n+        alpha = _to_tensor(alpha, x.dtype.base_dtype)\n+        x -= alpha * negative_part\n     return x\n \n \n\n@@ -1707,11 +1707,26 @@ def elu(x, alpha=1.0):\n     return T.nnet.elu(x, alpha)\n \n \n-def relu(x, alpha=0., max_value=None):\n+def relu(x, alpha=0., max_value=None, threshold=0.):\n     _assert_has_capability(T.nnet, 'relu')\n-    x = T.nnet.relu(x, alpha)\n+\n+    if alpha != 0.:\n+        if threshold != 0.:\n+            negative_part = T.nnet.relu(-x + threshold)\n+        else:\n+            negative_part = T.nnet.relu(-x)\n+\n+    if threshold != 0.:\n+        x = x * T.cast(T.gt(x, threshold), floatx())\n+    else:\n+        x = T.nnet.relu(x)\n+\n     if max_value is not None:\n-        x = T.minimum(x, max_value)\n+        x = T.clip(x, 0.0, max_value)\n+\n+    if alpha != 0.:\n+        x -= alpha * negative_part\n+\n     return x\n \n \n\n@@ -265,6 +265,13 @@ class Softmax(Layer):\n class ReLU(Layer):\n     \"\"\"Rectified Linear Unit activation function.\n \n+    With default values, it returns element-wise `max(x, 0)`.\n+\n+    Otherwise, it follows:\n+    `f(x) = max_value` for `x >= max_value`,\n+    `f(x) = x` for `threshold <= x < max_value`,\n+    `f(x) = negative_slope * (x - threshold)` otherwise.\n+\n     # Input shape\n         Arbitrary. Use the keyword argument `input_shape`\n         (tuple of integers, does not include the samples axis)\n@@ -274,19 +281,39 @@ class ReLU(Layer):\n         Same shape as the input.\n \n     # Arguments\n-        max_value: Float, the maximum output value.\n+        max_value: float >= 0. Maximum activation value.\n+        negative_slope: float >= 0. Negative slope coefficient.\n+        threshold: float. Threshold value for thresholded activation.\n     \"\"\"\n \n-    def __init__(self, max_value=None, **kwargs):\n+    def __init__(self, max_value=None, negative_slope=0.,\n+                 threshold=0., **kwargs):\n         super(ReLU, self).__init__(**kwargs)\n+        if max_value is not None and max_value < 0.:\n+            raise ValueError('max_value of ReLU layer '\n+                             'cannot be negative value: %s' % str(max_value))\n+        if negative_slope < 0.:\n+            raise ValueError('negative_slope of ReLU layer cannot be '\n+                             'negative value: %s' % str(negative_slope))\n         self.supports_masking = True\n+        if max_value is not None:\n+            max_value = K.cast_to_floatx(max_value)\n         self.max_value = max_value\n+        self.negative_slope = K.cast_to_floatx(negative_slope)\n+        self.threshold = K.cast_to_floatx(threshold)\n \n     def call(self, inputs):\n-        return activations.relu(inputs, max_value=self.max_value)\n+        return K.relu(inputs,\n+                      alpha=self.negative_slope,\n+                      max_value=self.max_value,\n+                      threshold=self.threshold)\n \n     def get_config(self):\n-        config = {'max_value': self.max_value}\n+        config = {\n+            'max_value': self.max_value,\n+            'negative_slope': self.negative_slope,\n+            'threshold': self.threshold\n+        }\n         base_config = super(ReLU, self).get_config()\n         return dict(list(base_config.items()) + list(config.items()))\n \n\n@@ -965,8 +965,24 @@ class TestBackend(object):\n         with pytest.raises(ValueError):\n             z = K.dropout(K.variable(val), level=-0.5)\n \n+    @pytest.mark.parametrize('alpha,max_value,threshold', [\n+        (0.0, None, 0.0),  # standard relu\n+        (0.1, None, 0.0),  # set alpha only\n+        (0.0, 5.0, 0.0),   # set max_value only\n+        (0.0, None, 0.8),  # set threshold only\n+        (0.1, 5.0, 0.0),   # set alpha and max_value\n+        (0.1, None, 0.8),  # set alpha and threshold\n+        (0.0, 5.0, 0.8),   # set max_value and threshold\n+        (0.1, 5.0, 0.8),   # set all\n+        (0.1, 0.0, 0.8),   # max_value is zero\n+        (0.1, 5.0, -2.8),  # threshold is negative\n+        (0.1, 9.0, 0.8),   # max_value > 6\n+    ])\n+    def test_relu(self, alpha, max_value, threshold):\n+        check_single_tensor_operation('relu', (4, 2), WITH_NP, alpha=alpha,\n+                                      max_value=max_value, threshold=threshold)\n+\n     def test_nn_operations(self):\n-        check_single_tensor_operation('relu', (4, 2), WITH_NP, alpha=0.1, max_value=0.5)\n         check_single_tensor_operation('softplus', (4, 10), WITH_NP)\n         check_single_tensor_operation('elu', (4, 10), WITH_NP, alpha=0.5)\n \n\n@@ -226,10 +226,11 @@ def in_test_phase(x, alt, training=None):\n     return in_train_phase(alt, x, training=training)\n \n \n-def relu(x, alpha=0., max_value=None):\n-    y = x * (x > 0) + alpha * x * (x < 0)\n+def relu(x, alpha=0., max_value=None, threshold=0.):\n+    y = x * (x >= threshold)\n     if max_value is not None:\n-        y = np.minimum(y, max_value)\n+        y = np.clip(y, 0.0, max_value)\n+    y += alpha * (x - threshold) * (x < threshold)\n     return y\n \n \n\n@@ -37,8 +37,20 @@ def test_softmax():\n \n \n def test_relu():\n-    for max_value in [None, 1., 6.]:\n-        layer_test(layers.ReLU, kwargs={'max_value': max_value},\n+    layer_test(layers.ReLU,\n+               kwargs={'max_value': 10,\n+                       'negative_slope': 0.2,\n+                       'threshold': 3.0},\n+               input_shape=(2, 3, 4))\n+\n+    # max_value of ReLU layer cannot be negative value\n+    with pytest.raises(ValueError):\n+        layer_test(layers.ReLU, kwargs={'max_value': -2.0},\n+                   input_shape=(2, 3, 4))\n+\n+    # negative_slope of ReLU layer cannot be negative value\n+    with pytest.raises(ValueError):\n+        layer_test(layers.ReLU, kwargs={'negative_slope': -2.0},\n                    input_shape=(2, 3, 4))\n \n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "keras#91f8e450917b07ebb5f7586572c076001b221868", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 22 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 3 | Methods Changed: 2 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 22 | Churn Cumulative: 100 | Contributors (this commit): 5 | Commits (past 90d): 3 | Contributors (cumulative): 5 | DMM Complexity: 1.0\n\nDIFF:\n@@ -1,6 +1,7 @@\n import pytest\n from keras.utils.test_utils import layer_test\n from keras import layers\n+from keras import backend as K\n \n \n def test_leaky_relu():\n@@ -42,6 +43,12 @@ def test_relu():\n                        'negative_slope': 0.2,\n                        'threshold': 3.0},\n                input_shape=(2, 3, 4))\n+    layer_test(layers.ReLU,\n+               kwargs={'max_value': 6},\n+               input_shape=(2, 3, 4))\n+    layer_test(layers.ReLU,\n+               kwargs={'negative_slope': 0.2},\n+               input_shape=(2, 3, 4))\n \n     # max_value of ReLU layer cannot be negative value\n     with pytest.raises(ValueError):\n@@ -54,5 +61,20 @@ def test_relu():\n                    input_shape=(2, 3, 4))\n \n \n+@pytest.mark.skipif((K.backend() != 'tensorflow'),\n+                    reason='TF-specific implementation.')\n+def test_relu_tf_ops():\n+    inputs = layers.Input((3,))\n+    # Test that `relu` op gets used.\n+    outputs = layers.ReLU()(inputs)\n+    assert outputs.op.name.lower().endswith('/relu')\n+    # Test that `leakyrelu` op gets used.\n+    outputs = layers.ReLU(negative_slope=0.2)(inputs)\n+    assert outputs.op.name.lower().endswith('/leakyrelu')\n+    # Test that `relu6` op gets used.\n+    outputs = layers.ReLU(max_value=6)(inputs)\n+    assert outputs.op.name.lower().endswith('/relu6')\n+\n+\n if __name__ == '__main__':\n     pytest.main([__file__])\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "keras#67d563c455072dd26e4612a0b050b9f8363385ca", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 25 | Lines Deleted: 4 | Files Changed: 4 | Hunks: 5 | Methods Changed: 5 | Complexity Δ (Sum/Max): 4/2 | Churn Δ: 29 | Churn Cumulative: 11923 | Contributors (this commit): 107 | Commits (past 90d): 46 | Contributors (cumulative): 142 | DMM Complexity: 1.0\n\nDIFF:\n@@ -25,7 +25,9 @@ def softmax(x, axis=-1):\n         ValueError: In case `dim(x) == 1`.\n     \"\"\"\n     ndim = K.ndim(x)\n-    if ndim == 2:\n+    if ndim == 1:\n+        raise ValueError('Cannot apply softmax to a tensor that is 1D')\n+    elif ndim == 2:\n         return K.softmax(x)\n     elif ndim > 2:\n         e = K.exp(x - K.max(x, axis=axis, keepdims=True))\n\n@@ -1731,10 +1731,11 @@ def relu(x, alpha=0., max_value=None, threshold=0.):\n \n \n def softmax(x, axis=-1):\n-    if axis == -1 or axis == x.ndim - 1:\n+    if (axis == -1 or axis == x.ndim - 1) and x.ndim == 2:\n         return T.nnet.softmax(x)\n-    return T.exp(x - x.max()) / T.exp(\n-        x - x.max()).sum(axis=axis, keepdims=True)\n+    xm = x.max(axis=axis, keepdims=True)\n+    return T.exp(x - xm) / T.exp(\n+        x - xm).sum(axis=axis, keepdims=True)\n \n \n def softplus(x):\n\n@@ -79,6 +79,23 @@ def test_softmax_invalid():\n         f = K.function([x], [activations.softmax(x)])\n \n \n+def test_softmax_3d():\n+    \"\"\"Test using a reference implementation of softmax.\n+    \"\"\"\n+    def softmax(values, axis):\n+        m = np.max(values, axis=axis, keepdims=True)\n+        e = np.exp(values - m)\n+        return e / np.sum(e, axis=axis, keepdims=True)\n+\n+    x = K.placeholder(ndim=3)\n+    f = K.function([x], [activations.softmax(x, axis=1)])\n+    test_values = get_standard_values()[:, :, np.newaxis].copy()\n+\n+    result = f([test_values])[0]\n+    expected = softmax(test_values, axis=1)\n+    assert_allclose(result, expected, rtol=1e-05)\n+\n+\n def test_time_distributed_softmax():\n     x = K.placeholder(shape=(1, 1, 5))\n     f = K.function([x], [activations.softmax(x)])\n\n@@ -991,6 +991,7 @@ class TestBackend(object):\n         check_single_tensor_operation('tanh', (4, 2), WITH_NP)\n \n         check_single_tensor_operation('softmax', (4, 10), WITH_NP)\n+        check_single_tensor_operation('softmax', (4, 5, 3), WITH_NP, axis=1)\n         check_single_tensor_operation('softmax', (4, 5, 3, 10), WITH_NP, axis=2)\n \n         check_two_tensor_operation('binary_crossentropy', (4, 2), (4, 2), WITH_NP, from_logits=True)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "keras#5001a338bae23288b3217b36f9ec2af22f64b0f6", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 5 | Lines Deleted: 5 | Files Changed: 2 | Hunks: 4 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 10 | Churn Cumulative: 509 | Contributors (this commit): 22 | Commits (past 90d): 8 | Contributors (cumulative): 23 | DMM Complexity: None\n\nDIFF:\n@@ -23,4 +23,4 @@ from .layers import Input\n from .models import Model\r\n from .models import Sequential\r\n \r\n-__version__ = '2.2.2'\r\n+__version__ = '2.2.3'\r\n\n@@ -24,21 +24,21 @@ and is distributed under the MIT license.\n '''\n \n setup(name='Keras',\n-      version='2.2.2',\n+      version='2.2.3',\n       description='Deep Learning for humans',\n       long_description=long_description,\n       author='Francois Chollet',\n       author_email='francois.chollet@gmail.com',\n       url='https://github.com/keras-team/keras',\n-      download_url='https://github.com/keras-team/keras/tarball/2.2.2',\n+      download_url='https://github.com/keras-team/keras/tarball/2.2.3',\n       license='MIT',\n       install_requires=['numpy>=1.9.1',\n                         'scipy>=0.14',\n                         'six>=1.9.0',\n                         'pyyaml',\n                         'h5py',\n-                        'keras_applications>=1.0.4',\n-                        'keras_preprocessing==1.0.2'],\n+                        'keras_applications>=1.0.6',\n+                        'keras_preprocessing>=1.0.4'],\n       extras_require={\n           'visualize': ['pydot>=1.2.4'],\n           'tests': ['pytest',\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "keras#6a1702d9262977bd6f7c2658e9f694101534b9b0", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 1 | Churn Cumulative: 1778 | Contributors (this commit): 29 | Commits (past 90d): 5 | Contributors (cumulative): 29 | DMM Complexity: None\n\nDIFF:\n@@ -91,6 +91,7 @@ if sys.version[0] == '2':\n \n EXCLUDE = {\n     'Optimizer',\n+    'TFOptimizer',\n     'Wrapper',\n     'get_session',\n     'set_session',\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "keras#dd9109d152aea0e45d414edd3f4768b872807048", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 28 | Files Changed: 3 | Hunks: 4 | Methods Changed: 1 | Complexity Δ (Sum/Max): 39/39 | Churn Δ: 29 | Churn Cumulative: 882 | Contributors (this commit): 26 | Commits (past 90d): 13 | Contributors (cumulative): 31 | DMM Complexity: 0.0\n\nDIFF:\n@@ -5,12 +5,9 @@ from __future__ import print_function\n \n import numpy as np\n from numpy.testing import assert_allclose\n-import six\n \n from .generic_utils import has_arg\n from ..engine import Model, Input\n-from ..models import Sequential\n-from ..models import model_from_json\n from .. import backend as K\n \n \n\n@@ -38,7 +38,7 @@ setup(name='Keras',\n                         'pyyaml',\n                         'h5py',\n                         'keras_applications>=1.0.6',\n-                        'keras_preprocessing>=1.0.4'],\n+                        'keras_preprocessing>=1.0.5'],\n       extras_require={\n           'visualize': ['pydot>=1.2.4'],\n           'tests': ['pytest',\n\n@@ -167,30 +167,6 @@ class TestImage(object):\n             x2, y2 = seq[0]\n             assert list(y) != list(y2)\n \n-    def test_image_data_generator_with_validation_split(self):\n-        for test_images in self.all_test_images:\n-            img_list = []\n-            for im in test_images:\n-                img_list.append(image.img_to_array(im)[None, ...])\n-\n-            images = np.vstack(img_list)\n-            generator = image.ImageDataGenerator(validation_split=0.5)\n-            seq = generator.flow(images, np.arange(images.shape[0]),\n-                                 shuffle=False, batch_size=3,\n-                                 subset='validation')\n-            x, y = seq[0]\n-            assert list(y) == [0, 1, 2]\n-            seq = generator.flow(images, np.arange(images.shape[0]),\n-                                 shuffle=False, batch_size=3,\n-                                 subset='training')\n-            x2, y2 = seq[0]\n-            assert list(y2) == [4, 5, 6]\n-\n-            with pytest.raises(ValueError):\n-                generator.flow(images, np.arange(images.shape[0]),\n-                               shuffle=False, batch_size=3,\n-                               subset='foo')\n-\n     def test_image_data_generator_with_split_value_error(self):\n         with pytest.raises(ValueError):\n             generator = image.ImageDataGenerator(validation_split=5)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "keras#3c899337c0d4c895308239a04cead2761822bee2", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 12 | Lines Deleted: 3 | Files Changed: 2 | Hunks: 3 | Methods Changed: 4 | Complexity Δ (Sum/Max): 4/4 | Churn Δ: 15 | Churn Cumulative: 5735 | Contributors (this commit): 30 | Commits (past 90d): 42 | Contributors (cumulative): 34 | DMM Complexity: 0.125\n\nDIFF:\n@@ -1071,11 +1071,12 @@ class TestBackend(object):\n         ('conv3d', (2, 5, 4, 6, 3), (2, 2, 3, 3, 4), 'valid', 'channels_last', (2, 2, 2)),\n         ('conv3d', (2, 3, 5, 4, 6), (2, 2, 3, 3, 4), 'same', 'channels_first', (2, 2, 2)),\n     ])\n-    def test_conv_dilation(self, op, input_shape, kernel_shape, padding,\n+    def test_dilated_conv(self, op, input_shape, kernel_shape, padding,\n                           data_format, dilation_rate):\n         check_two_tensor_operation(\n-            op, input_shape, kernel_shape, DILATED_CONV_BACKENDS, padding=padding,\n-            data_format=data_format, dilation_rate=dilation_rate, cntk_dynamicity=True)\n+            op, input_shape, kernel_shape, WITH_NP,\n+            padding=padding, data_format=data_format,\n+            dilation_rate=dilation_rate, cntk_dynamicity=True)\n \n     @pytest.mark.skipif((K.backend() == 'cntk' and K.dev.type() == 0),\n                         reason='cntk only supports dilated conv transpose on GPU')\n\n@@ -29,6 +29,14 @@ def normalize_conv(func):\n             if kwargs['data_format'] == 'channels_last':\n                 x = np.transpose(x, (0, 4, 1, 2, 3))\n \n+        dilation_rate = kwargs.pop('dilation_rate', 1)\n+        if isinstance(dilation_rate, int):\n+            dilation_rate = (dilation_rate,) * (x.ndim - 2)\n+        for (i, d) in enumerate(dilation_rate):\n+            if d > 1:\n+                for j in range(w.shape[2 + i] - 1):\n+                    w = np.insert(w, 2 * j + 1, 0, axis=2 + i)\n+\n         y = func(x, w, **kwargs)\n \n         if kwargs['data_format'] == 'channels_last':\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "keras#4dea0f867aa29c4e6bda2a66cdf1254adfa20400", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 5 | Lines Deleted: 0 | Files Changed: 2 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 5 | Churn Cumulative: 5740 | Contributors (this commit): 31 | Commits (past 90d): 44 | Contributors (cumulative): 36 | DMM Complexity: 1.0\n\nDIFF:\n@@ -408,6 +408,9 @@ class TestBackend(object):\n         check_single_tensor_operation('clip', (4, 2), WITH_NP, min_value=0.4,\n                                       max_value=0.6)\n \n+        check_single_tensor_operation('cos', (4, 2), WITH_NP)\n+        check_single_tensor_operation('sin', (4, 2), WITH_NP)\n+\n         # two-tensor ops\n         check_two_tensor_operation('equal', (4, 2), (4, 2), WITH_NP)\n         check_two_tensor_operation('not_equal', (4, 2), (4, 2), WITH_NP)\n\n@@ -547,3 +547,5 @@ round = np.round\n sign = np.sign\n expand_dims = np.expand_dims\n squeeze = np.squeeze\n+cos = np.cos\n+sin = np.sin\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "keras#902228e768f0ee319630e0d0edbc033c1d089a59", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 4 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 4 | Churn Cumulative: 627 | Contributors (this commit): 5 | Commits (past 90d): 15 | Contributors (cumulative): 5 | DMM Complexity: 1.0\n\nDIFF:\n@@ -509,6 +509,10 @@ def minimum(x, y):\n     return np.minimum(x, y)\n \n \n+def ndim(x):\n+    return x.ndim\n+\n+\n def random_uniform_variable(shape, low, high, dtype=None, name=None, seed=None):\n     return (high - low) * np.random.random(shape).astype(dtype) + low\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "keras#af85b95bb8b0c82aabe0df0ab24420e31fb057a2", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 32 | Lines Deleted: 4 | Files Changed: 2 | Hunks: 3 | Methods Changed: 9 | Complexity Δ (Sum/Max): 8/4 | Churn Δ: 36 | Churn Cumulative: 5780 | Contributors (this commit): 31 | Commits (past 90d): 47 | Contributors (cumulative): 36 | DMM Complexity: 1.0\n\nDIFF:\n@@ -200,6 +200,18 @@ class TestBackend(object):\n     def test_eye(self):\n         check_single_tensor_operation('eye', 3, WITH_NP, shape_or_val=False)\n \n+    def test_ones(self):\n+        check_single_tensor_operation('ones', (3, 5, 10, 8), WITH_NP, shape_or_val=False)\n+\n+    def test_zeros(self):\n+        check_single_tensor_operation('zeros', (3, 5, 10, 8), WITH_NP, shape_or_val=False)\n+\n+    def test_ones_like(self):\n+        check_single_tensor_operation('ones_like', (3, 5, 10, 8), WITH_NP, shape_or_val=True)\n+\n+    def test_zeros_like(self):\n+        check_single_tensor_operation('zeros_like', (3, 5, 10, 8), WITH_NP, shape_or_val=True)\n+\n     def test_linear_operations(self):\n         check_two_tensor_operation('dot', (4, 2), (2, 4), WITH_NP)\n         check_two_tensor_operation('dot', (4, 2), (5, 2, 3), WITH_NP)\n\n@@ -450,10 +450,6 @@ def print_tensor(x, message=''):\n     return x\n \n \n-def eye(size, dtype=None, name=None):\n-    return np.eye(size, dtype=dtype)\n-\n-\n def dot(x, y):\n     return np.dot(x, y)\n \n@@ -521,6 +517,26 @@ def random_normal_variable(shape, mean, scale, dtype=None, name=None, seed=None)\n     return scale * np.random.randn(*shape).astype(dtype) + mean\n \n \n+def zeros(shape, dtype=floatx(), name=None):\n+    return np.zeros(shape, dtype=dtype)\n+\n+\n+def zeros_like(x, dtype=floatx(), name=None):\n+    return np.zeros_like(x, dtype=dtype)\n+\n+\n+def ones(shape, dtype=floatx(), name=None):\n+    return np.ones(shape, dtype=dtype)\n+\n+\n+def ones_like(x, dtype=floatx(), name=None):\n+    return np.ones_like(x, dtype=dtype)\n+\n+\n+def eye(size, dtype=None, name=None):\n+    return np.eye(size, dtype=dtype)\n+\n+\n def resize_images(x, height_factor, width_factor, data_format):\n     if data_format == 'channels_first':\n         x = repeat_elements(x, height_factor, axis=2)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "keras#f8e80beb96a88b3ff8679ae16489502590d614b4", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 6 | Lines Deleted: 3 | Files Changed: 2 | Hunks: 2 | Methods Changed: 2 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 9 | Churn Cumulative: 3597 | Contributors (this commit): 24 | Commits (past 90d): 13 | Contributors (cumulative): 29 | DMM Complexity: 0.6666666666666666\n\nDIFF:\n@@ -1250,8 +1250,10 @@ class Network(Layer):\n         if not self.built:\n             raise ValueError(\n                 'This model has not yet been built. '\n-                'Build the model first by calling build() or calling fit() with some data. '\n-                'Or specify input_shape or batch_input_shape in the first layer for automatic build. ')\n+                'Build the model first by calling build() '\n+                'or calling fit() with some data. '\n+                'Or specify input_shape or batch_input_shape '\n+                'in the first layer for automatic build. ')\n         return print_layer_summary(self,\n                                    line_length=line_length,\n                                    positions=positions,\n\n@@ -540,7 +540,8 @@ class Bidirectional(Wrapper):\n         elif self.merge_mode is None:\n             output = [y, y_rev]\n         else:\n-            raise ValueError('Unrecognized value for argument merge_mode: %s' % (self.merge_mode))\n+            raise ValueError('Unrecognized value for argument '\n+                             'merge_mode: %s' % (self.merge_mode))\n \n         # Properly set learning phase\n         if (getattr(y, '_uses_learning_phase', False) or\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "keras#ecbf73f72b59f8f5c8746de63270aa1fb3ad7524", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 35 | Lines Deleted: 4 | Files Changed: 2 | Hunks: 8 | Methods Changed: 8 | Complexity Δ (Sum/Max): 6/6 | Churn Δ: 39 | Churn Cumulative: 5231 | Contributors (this commit): 82 | Commits (past 90d): 17 | Contributors (cumulative): 109 | DMM Complexity: 1.0\n\nDIFF:\n@@ -719,6 +719,12 @@ class TensorBoard(Callback):\n             input) or list of Numpy arrays (if the model has multiple inputs).\n             Learn [more about embeddings]\n             (https://www.tensorflow.org/programmers_guide/embedding).\n+        update_freq: `'batch'` or `'epoch'` or integer. When using `'batch'`, writes\n+            the losses and metrics to TensorBoard after each batch. The same\n+            applies for `'epoch'`. If using an integer, let's say `10000`,\n+            the callback will write the metrics and losses to TensorBoard every\n+            10000 samples. Note that writing too frequently to TensorBoard\n+            can slow down your training.\n     \"\"\"\n \n     def __init__(self, log_dir='./logs',\n@@ -730,7 +736,8 @@ class TensorBoard(Callback):\n                  embeddings_freq=0,\n                  embeddings_layer_names=None,\n                  embeddings_metadata=None,\n-                 embeddings_data=None):\n+                 embeddings_data=None,\n+                 update_freq='epoch'):\n         super(TensorBoard, self).__init__()\n         global tf, projector\n         try:\n@@ -769,6 +776,13 @@ class TensorBoard(Callback):\n         self.embeddings_metadata = embeddings_metadata or {}\n         self.batch_size = batch_size\n         self.embeddings_data = embeddings_data\n+        if update_freq == 'batch':\n+            # It is the same as writing as frequently as possible.\n+            self.update_freq = 1\n+        else:\n+            self.update_freq = update_freq\n+        self.samples_seen = 0\n+        self.samples_seen_at_last_write = 0\n \n     def set_model(self, model):\n         self.model = model\n@@ -968,6 +982,13 @@ class TensorBoard(Callback):\n \n                     i += self.batch_size\n \n+        if self.update_freq == 'epoch':\n+            index = epoch\n+        else:\n+            index = self.samples_seen\n+        self._write_logs(logs, index)\n+\n+    def _write_logs(self, logs, index):\n         for name, value in logs.items():\n             if name in ['batch', 'size']:\n                 continue\n@@ -978,12 +999,20 @@ class TensorBoard(Callback):\n             else:\n                 summary_value.simple_value = value\n             summary_value.tag = name\n-            self.writer.add_summary(summary, epoch)\n+            self.writer.add_summary(summary, index)\n         self.writer.flush()\n \n     def on_train_end(self, _):\n         self.writer.close()\n \n+    def on_batch_end(self, batch, logs=None):\n+        if self.update_freq != 'epoch':\n+            self.samples_seen += logs['size']\n+            samples_seen_since = self.samples_seen - self.samples_seen_at_last_write\n+            if samples_seen_since >= self.update_freq:\n+                self._write_logs(logs, self.samples_seen)\n+                self.samples_seen_at_last_write = self.samples_seen\n+\n \n class ReduceLROnPlateau(Callback):\n     \"\"\"Reduce learning rate when a metric has stopped improving.\n\n@@ -550,7 +550,8 @@ def test_CSVLogger(tmpdir):\n     assert not tmpdir.listdir()\n \n \n-def test_TensorBoard(tmpdir):\n+@pytest.mark.parametrize('update_freq', ['batch', 'epoch', 9])\n+def test_TensorBoard(tmpdir, update_freq):\n     np.random.seed(np.random.randint(1, 1e7))\n     filepath = str(tmpdir / 'logs')\n \n@@ -588,7 +589,8 @@ def test_TensorBoard(tmpdir):\n                                       embeddings_freq=embeddings_freq,\n                                       embeddings_layer_names=['dense_1'],\n                                       embeddings_data=X_test,\n-                                      batch_size=5)]\n+                                      batch_size=5,\n+                                      update_freq=update_freq)]\n \n     # fit without validation data\n     model.fit(X_train, y_train, batch_size=batch_size,\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "keras#2223143cb42cac7cb5ac914a943cf329a51ef312", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 1 | Churn Cumulative: 1779 | Contributors (this commit): 30 | Commits (past 90d): 6 | Contributors (cumulative): 30 | DMM Complexity: None\n\nDIFF:\n@@ -174,6 +174,7 @@ PAGES = [\n             layers.SeparableConv2D,\n             layers.Conv2DTranspose,\n             layers.Conv3D,\n+            layers.Conv3DTranspose,\n             layers.Cropping1D,\n             layers.Cropping2D,\n             layers.Cropping3D,\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "keras#b80f3bd3a227d837790395378b14150dd11e02b7", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 3 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 3 | Churn Cumulative: 2292 | Contributors (this commit): 4 | Commits (past 90d): 4 | Contributors (cumulative): 4 | DMM Complexity: 1.0\n\nDIFF:\n@@ -291,6 +291,9 @@ class Sequential(Model):\n             name = config['name']\n             build_input_shape = config.get('build_input_shape')\n             layer_configs = config['layers']\n+        else:  # legacy config file\n+            name = build_input_shape = None\n+            layer_configs = config\n         model = cls(name=name)\n         for conf in layer_configs:\n             layer = layer_module.deserialize(conf,\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "keras#2bfd1f2c950df5fc3f40b903c1966f1b0a48bee4", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 36 | Lines Deleted: 17 | Files Changed: 2 | Hunks: 6 | Methods Changed: 5 | Complexity Δ (Sum/Max): 2/6 | Churn Δ: 53 | Churn Cumulative: 5833 | Contributors (this commit): 31 | Commits (past 90d): 49 | Contributors (cumulative): 36 | DMM Complexity: 0.0\n\nDIFF:\n@@ -37,21 +37,6 @@ except ImportError:\n WITH_NP = [KTH if K.backend() == 'theano' else KC if K.backend() == 'cntk' else KTF, KNP]\n \n \n-# CNTK only supports dilated convolution on GPU\n-def get_dilated_conv_backends():\n-    backend_list = []\n-    if KTF is not None:\n-        backend_list.append(KTF)\n-    if KTH is not None:\n-        backend_list.append(KTH)\n-    if KC is not None and KC.dev.type() == 1:\n-        backend_list.append(KC)\n-    return backend_list\n-\n-\n-DILATED_CONV_BACKENDS = get_dilated_conv_backends()\n-\n-\n def check_dtype(var, dtype):\n     if K._BACKEND == 'theano':\n         assert var.dtype == dtype\n@@ -1076,6 +1061,20 @@ class TestBackend(object):\n             padding=padding, data_format=data_format,\n             cntk_dynamicity=True)\n \n+    @pytest.mark.parametrize(\n+        'op,input_shape,kernel_shape,output_shape,padding,data_format', [\n+            ('conv2d_transpose', (2, 5, 6, 3), (3, 3, 2, 3), (2, 5, 6, 2),\n+             'same', 'channels_last'),\n+            ('conv2d_transpose', (2, 3, 8, 9), (3, 3, 2, 3), (2, 2, 8, 9),\n+             'same', 'channels_first'),\n+        ])\n+    def test_conv_transpose(self, op, input_shape, kernel_shape, output_shape,\n+                            padding, data_format):\n+        check_two_tensor_operation(\n+            op, input_shape, kernel_shape, WITH_NP,\n+            output_shape=output_shape, padding=padding, data_format=data_format,\n+            cntk_dynamicity=True)\n+\n     @pytest.mark.skipif((K.backend() == 'cntk' and K.dev.type() == 0),\n                         reason='cntk only supports dilated conv on GPU')\n     @pytest.mark.parametrize('op,input_shape,kernel_shape,padding,data_format,dilation_rate', [\n@@ -1102,10 +1101,10 @@ class TestBackend(object):\n             ('conv2d_transpose', (2, 3, 8, 9), (3, 3, 2, 3), (2, 2, 8, 9),\n              'same', 'channels_first', (2, 2)),\n         ])\n-    def test_conv_transpose_dilation(self, op, input_shape, kernel_shape, output_shape,\n+    def test_dilated_conv_transpose(self, op, input_shape, kernel_shape, output_shape,\n                                     padding, data_format, dilation_rate):\n         check_two_tensor_operation(\n-            op, input_shape, kernel_shape, DILATED_CONV_BACKENDS, output_shape=output_shape,\n+            op, input_shape, kernel_shape, WITH_NP, output_shape=output_shape,\n             padding=padding, data_format=data_format, dilation_rate=dilation_rate,\n             cntk_dynamicity=True)\n \n\n@@ -87,12 +87,32 @@ def separable_conv(x, w1, w2, padding, data_format):\n     return conv(x2, w2, padding=padding, data_format=data_format)\n \n \n+def conv_transpose(x, w, output_shape, padding, data_format, dilation_rate=1):\n+    if x.ndim == 4:\n+        w = np.fliplr(np.flipud(w))\n+        w = np.transpose(w, (0, 1, 3, 2))\n+    else:\n+        w = np.flip(np.fliplr(np.flipud(w)), axis=2)\n+        w = np.transpose(w, (0, 1, 2, 4, 3))\n+\n+    if isinstance(dilation_rate, int):\n+        dilation_rate = (dilation_rate,) * (x.ndim - 2)\n+    for (i, d) in enumerate(dilation_rate):\n+        if d > 1:\n+            for j in range(w.shape[i] - 1):\n+                w = np.insert(w, 2 * j + 1, 0, axis=i)\n+\n+    return conv(x, w, padding=padding, data_format=data_format)\n+\n+\n conv1d = conv\n conv2d = conv\n conv3d = conv\n depthwise_conv2d = depthwise_conv\n separable_conv1d = separable_conv\n separable_conv2d = separable_conv\n+conv2d_transpose = conv_transpose\n+conv3d_transpose = conv_transpose\n \n \n def pool(x, pool_size, strides, padding, data_format, pool_mode):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "keras#a07253d8269e1b750f0a64767cc9a07da8a3b7ea", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 15 | Lines Deleted: 1 | Files Changed: 2 | Hunks: 2 | Methods Changed: 2 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 16 | Churn Cumulative: 2758 | Contributors (this commit): 28 | Commits (past 90d): 15 | Contributors (cumulative): 33 | DMM Complexity: 0.9166666666666666\n\nDIFF:\n@@ -124,7 +124,8 @@ def fit_generator(model,\n             elif val_gen:\n                 val_data = validation_data\n                 if isinstance(val_data, Sequence):\n-                    val_enqueuer_gen = iter_sequence_infinite(generator)\n+                    val_enqueuer_gen = iter_sequence_infinite(val_data)\n+                    validation_steps = validation_steps or len(val_data)\n                 else:\n                     val_enqueuer_gen = val_data\n             else:\n\n@@ -468,6 +468,19 @@ def test_model_methods():\n     assert trained_batches == list(range(12)) * 5\n     assert len(val_seq.logs) == 12 * 5\n \n+    # test for workers = 0\n+    trained_epochs = []\n+    trained_batches = []\n+    val_seq = RandomSequence(4)\n+    out = model.fit_generator(generator=RandomSequence(3),\n+                              epochs=5,\n+                              validation_data=val_seq,\n+                              callbacks=[tracker_cb],\n+                              workers=0)\n+    assert trained_epochs == [0, 1, 2, 3, 4]\n+    assert trained_batches == list(range(12)) * 5\n+    assert len(val_seq.logs) == 12 * 5\n+\n     # fit_generator will throw an exception\n     # if steps is unspecified for regular generator\n     with pytest.raises(ValueError):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "keras#5a24ebbb432dee986d6bf1c3442da5955a9bfb73", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 27 | Lines Deleted: 2 | Files Changed: 2 | Hunks: 4 | Methods Changed: 3 | Complexity Δ (Sum/Max): 4/2 | Churn Δ: 29 | Churn Cumulative: 1658 | Contributors (this commit): 35 | Commits (past 90d): 10 | Contributors (cumulative): 37 | DMM Complexity: 1.0\n\nDIFF:\n@@ -183,11 +183,13 @@ class H5Dict(object):\n             self.data = path\n             self._is_file = False\n         elif isinstance(path, str):\n-            self.data = h5py.File(path,)\n+            self.data = h5py.File(path, mode=mode)\n             self._is_file = True\n         elif isinstance(path, dict):\n             self.data = path\n             self._is_file = False\n+            if mode == 'w':\n+                self.data.clear()\n             # Flag to check if a dict is user defined data or a sub group:\n             self.data['_is_group'] = True\n         else:\n@@ -209,7 +211,7 @@ class H5Dict(object):\n             else:\n                 self.data[attr] = val\n             return\n-        if attr in self:\n+        if isinstance(self.data, h5py.Group) and attr in self.data:\n             raise KeyError('Cannot set attribute. '\n                            'Group with name \"{}\" exists.'.format(attr))\n         if is_np:\n\n@@ -632,6 +632,29 @@ def test_saving_recurrent_layer_without_bias():\n     os.remove(fname)\n \n \n+def test_loop_model_saving():\n+    model = Sequential()\n+    model.add(Dense(2, input_shape=(3,)))\n+    model.compile(loss=losses.MSE,\n+                  optimizer=optimizers.RMSprop(lr=0.0001),\n+                  metrics=[metrics.categorical_accuracy])\n+\n+    x = np.random.random((1, 3))\n+    y = np.random.random((1, 2))\n+    _, fname = tempfile.mkstemp('.h5')\n+\n+    for _ in range(3):\n+        model.train_on_batch(x, y)\n+        save_model(model, fname, overwrite=True)\n+        out = model.predict(x)\n+\n+    new_model = load_model(fname)\n+    os.remove(fname)\n+\n+    out2 = new_model.predict(x)\n+    assert_allclose(out, out2, atol=1e-05)\n+\n+\n def test_saving_constant_initializer_with_numpy():\n     \"\"\"Test saving and loading model of constant initializer with numpy inputs.\n     \"\"\"\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "keras#1931e2186843ad3ca2507a3b16cb09a7a3db5285", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 3 | Lines Deleted: 3 | Files Changed: 2 | Hunks: 3 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 6 | Churn Cumulative: 517 | Contributors (this commit): 22 | Commits (past 90d): 11 | Contributors (cumulative): 23 | DMM Complexity: None\n\nDIFF:\n@@ -23,4 +23,4 @@ from .layers import Input\n from .models import Model\r\n from .models import Sequential\r\n \r\n-__version__ = '2.2.3'\r\n+__version__ = '2.2.4'\r\n\n@@ -24,13 +24,13 @@ and is distributed under the MIT license.\n '''\n \n setup(name='Keras',\n-      version='2.2.3',\n+      version='2.2.4',\n       description='Deep Learning for humans',\n       long_description=long_description,\n       author='Francois Chollet',\n       author_email='francois.chollet@gmail.com',\n       url='https://github.com/keras-team/keras',\n-      download_url='https://github.com/keras-team/keras/tarball/2.2.3',\n+      download_url='https://github.com/keras-team/keras/tarball/2.2.4',\n       license='MIT',\n       install_requires=['numpy>=1.9.1',\n                         'scipy>=0.14',\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "keras#2b963e5ab64166ecde96c2828b937414fa9bf4e5", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 4 | Lines Deleted: 4 | Files Changed: 1 | Hunks: 4 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 8 | Churn Cumulative: 10129 | Contributors (this commit): 120 | Commits (past 90d): 17 | Contributors (cumulative): 120 | DMM Complexity: None\n\nDIFF:\n@@ -1905,17 +1905,17 @@ def batch_normalization(x, mean, var, beta, gamma, axis=-1, epsilon=1e-3):\n             # The mean / var / beta / gamma may be processed by broadcast\n             # so it may have extra axes with 1, it is not needed and should be removed\n             if ndim(mean) > 1:\n-                mean = tf.reshape(mean, (-1))\n+                mean = tf.reshape(mean, [-1])\n             if ndim(var) > 1:\n-                var = tf.reshape(var, (-1))\n+                var = tf.reshape(var, [-1])\n             if beta is None:\n                 beta = zeros_like(mean)\n             elif ndim(beta) > 1:\n-                beta = tf.reshape(beta, (-1))\n+                beta = tf.reshape(beta, [-1])\n             if gamma is None:\n                 gamma = ones_like(mean)\n             elif ndim(gamma) > 1:\n-                gamma = tf.reshape(gamma, (-1))\n+                gamma = tf.reshape(gamma, [-1])\n             y, _, _ = tf.nn.fused_batch_norm(\n                 x,\n                 gamma,\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
