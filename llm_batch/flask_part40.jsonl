{"custom_id": "flask#fd99abea57cfa3e72aee2116c58f962ec155a29c", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 2 | Methods Changed: 2 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 2152 | Contributors (this commit): 7 | Commits (past 90d): 20 | Contributors (cumulative): 7 | DMM Complexity: None\n\nDIFF:\n@@ -246,7 +246,7 @@ class BasicFunctionalityTestCase(FlaskTestCase):\n         rv = app.test_client().get('/', 'http://www.example.com:8080/test/')\n         cookie = rv.headers['set-cookie'].lower()\n         self.assert_in('domain=.example.com', cookie)\n-        self.assert_in('path=/;', cookie)\n+        self.assert_in('path=/', cookie)\n         self.assert_in('secure', cookie)\n         self.assert_not_in('httponly', cookie)\n \n@@ -281,7 +281,7 @@ class BasicFunctionalityTestCase(FlaskTestCase):\n         client = app.test_client()\n         rv = client.get('/')\n         self.assert_in('set-cookie', rv.headers)\n-        match = re.search(r'\\bexpires=([^;]+)', rv.headers['set-cookie'])\n+        match = re.search(r'\\bexpires=([^;]+)(?i)', rv.headers['set-cookie'])\n         expires = parse_date(match.group())\n         expected = datetime.utcnow() + app.permanent_session_lifetime\n         self.assert_equal(expires.year, expected.year)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#0676bb8ab54a575616cd65d3c2ef1cc31fb82a84", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 31 | Lines Deleted: 1 | Files Changed: 4 | Hunks: 6 | Methods Changed: 6 | Complexity Δ (Sum/Max): 5/5 | Churn Δ: 32 | Churn Cumulative: 1037 | Contributors (this commit): 12 | Commits (past 90d): 16 | Contributors (cumulative): 19 | DMM Complexity: 1.0\n\nDIFF:\n@@ -34,7 +34,8 @@ from .templating import render_template, render_template_string\n # the signals\n from .signals import signals_available, template_rendered, request_started, \\\n      request_finished, got_request_exception, request_tearing_down, \\\n-     appcontext_tearing_down, message_flashed\n+     appcontext_tearing_down, appcontext_pushed, \\\n+     appcontext_popped, message_flashed\n \n # We're not exposing the actual json module but a convenient wrapper around\n # it.\n\n@@ -18,6 +18,7 @@ from werkzeug.exceptions import HTTPException\n \n from .globals import _request_ctx_stack, _app_ctx_stack\n from .module import blueprint_is_module\n+from .signals import appcontext_pushed, appcontext_popped\n \n \n class _AppCtxGlobals(object):\n@@ -166,6 +167,7 @@ class AppContext(object):\n         \"\"\"Binds the app context to the current context.\"\"\"\n         self._refcnt += 1\n         _app_ctx_stack.push(self)\n+        appcontext_pushed.send(self.app)\n \n     def pop(self, exc=None):\n         \"\"\"Pops the app context.\"\"\"\n@@ -177,6 +179,7 @@ class AppContext(object):\n         rv = _app_ctx_stack.pop()\n         assert rv is self, 'Popped wrong app context.  (%r instead of %r)' \\\n             % (rv, self)\n+        appcontext_popped.send(self.app)\n \n     def __enter__(self):\n         self.push()\n\n@@ -50,4 +50,6 @@ request_finished = _signals.signal('request-finished')\n request_tearing_down = _signals.signal('request-tearing-down')\n got_request_exception = _signals.signal('got-request-exception')\n appcontext_tearing_down = _signals.signal('appcontext-tearing-down')\n+appcontext_pushed = _signals.signal('appcontext-pushed')\n+appcontext_popped = _signals.signal('appcontext-popped')\n message_flashed = _signals.signal('message-flashed')\n\n@@ -96,6 +96,30 @@ class SignalsTestCase(FlaskTestCase):\n         finally:\n             flask.got_request_exception.disconnect(record, app)\n \n+    def test_appcontext_signals(self):\n+        app = flask.Flask(__name__)\n+        recorded = []\n+        def record_push(sender, **kwargs):\n+            recorded.append('push')\n+        def record_pop(sender, **kwargs):\n+            recorded.append('push')\n+\n+        @app.route('/')\n+        def index():\n+            return 'Hello'\n+\n+        flask.appcontext_pushed.connect(record_push, app)\n+        flask.appcontext_popped.connect(record_pop, app)\n+        try:\n+            with app.test_client() as c:\n+                rv = c.get('/')\n+                self.assert_equal(rv.data, b'Hello')\n+                self.assert_equal(recorded, ['push'])\n+            self.assert_equal(recorded, ['push', 'pop'])\n+        finally:\n+            flask.appcontext_pushed.disconnect(record_push, app)\n+            flask.appcontext_popped.disconnect(record_pop, app)\n+\n     def test_flash_signal(self):\n         app = flask.Flask(__name__)\n         app.config['SECRET_KEY'] = 'secret'\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#93073489a0321225090bb21548521c2047219937", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 13 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 13 | Churn Cumulative: 2165 | Contributors (this commit): 7 | Commits (past 90d): 21 | Contributors (cumulative): 7 | DMM Complexity: 1.0\n\nDIFF:\n@@ -1116,6 +1116,19 @@ class BasicFunctionalityTestCase(FlaskTestCase):\n         self.assert_equal(len(errors), 3)\n         self.assert_equal(errors[1], None)\n \n+    def test_subscript_syntax_on_g(self):\n+        app = flask.Flask(__name__)\n+        app.testing = True\n+\n+        with app.app_context():\n+            self.assert_equal(flask.g['x'], None)\n+            flask.g.x = 42\n+            self.assert_equal(flask.g['x'], 42)\n+            self.assert_equal(flask.g.x, 42)\n+            flask.g['x'] = 23\n+            self.assert_equal(flask.g['x'], 23)\n+            self.assert_equal(flask.g.x, 23)\n+\n \n class SubdomainTestCase(FlaskTestCase):\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#62dbe0e1ca8b0fc4a0d5384948db6112cfaf91d2", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 10 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 3 | Methods Changed: 1 | Complexity Δ (Sum/Max): 2/2 | Churn Δ: 11 | Churn Cumulative: 3305 | Contributors (this commit): 24 | Commits (past 90d): 17 | Contributors (cumulative): 24 | DMM Complexity: 0.0\n\nDIFF:\n@@ -739,10 +739,15 @@ class Flask(_PackageBoundObject):\n            won't catch any exceptions because there won't be any to\n            catch.\n \n+        .. versionchanged:: 0.10\n+           The default port is now picked from the ``SEVER_NAME`` variable.\n+\n         :param host: the hostname to listen on. Set this to ``'0.0.0.0'`` to\n                      have the server available externally as well. Defaults to\n                      ``'127.0.0.1'``.\n-        :param port: the port of the webserver. Defaults to ``5000``.\n+        :param port: the port of the webserver. Defaults to ``5000`` or the\n+                     port defined in the ``SERVER_NAME`` config variable if\n+                     present.\n         :param debug: if given, enable or disable debug mode.\n                       See :attr:`debug`.\n         :param options: the options to be forwarded to the underlying\n@@ -754,6 +759,10 @@ class Flask(_PackageBoundObject):\n         if host is None:\n             host = '127.0.0.1'\n         if port is None:\n+            server_name = self.config['SERVER_NAME']\n+            if server_name and ':' in server_name:\n+                port = int(server_name.rsplit(':', 1)[1])\n+            else:\n                 port = 5000\n         if debug is not None:\n             self.debug = bool(debug)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#94c6ae51d70156bc23a400635d60ae3b99df3e73", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 3309 | Contributors (this commit): 24 | Commits (past 90d): 18 | Contributors (cumulative): 24 | DMM Complexity: None\n\nDIFF:\n@@ -34,7 +34,7 @@ from .templating import DispatchingJinjaLoader, Environment, \\\n      _default_template_ctx_processor\n from .signals import request_started, request_finished, got_request_exception, \\\n      request_tearing_down, appcontext_tearing_down\n-from ._compat import reraise, string_types, integer_types\n+from ._compat import reraise, string_types, text_type, integer_types\n \n # a lock used for logger initialization\n _logger_lock = Lock()\n@@ -1572,7 +1572,7 @@ class Flask(_PackageBoundObject):\n             # set the headers and status.  We do this because there can be\n             # some extra logic involved when creating these objects with\n             # specific values (like default content type selection).\n-            if isinstance(rv, string_types + (bytes, )):\n+            if isinstance(rv, (text_type, bytes, bytearray)):\n                 rv = self.response_class(rv, headers=headers, status=status)\n                 headers = status = None\n             else:\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#e17024e85a30eefa2f491f980c954224f7544867", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 19 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 3 | Complexity Δ (Sum/Max): 3/3 | Churn Δ: 19 | Churn Cumulative: 992 | Contributors (this commit): 5 | Commits (past 90d): 12 | Contributors (cumulative): 5 | DMM Complexity: 1.0\n\nDIFF:\n@@ -445,6 +445,25 @@ class BlueprintTestCase(FlaskTestCase):\n         self.assert_equal(c.get('/fe2').data.strip(), b'/fe')\n         self.assert_equal(c.get('/be').data.strip(), b'/fe')\n \n+    def test_dotted_names_from_app(self):\n+        app = flask.Flask(__name__)\n+        app.testing = True\n+        test = flask.Blueprint('test', __name__)\n+\n+        @app.route('/')\n+        def app_index():\n+            return flask.url_for('test.index')\n+\n+        @test.route('/test/')\n+        def index():\n+            return flask.url_for('app_index')\n+\n+        app.register_blueprint(test)\n+\n+        with app.test_client() as c:\n+            rv = c.get('/')\n+            self.assert_equal(rv.data, b'/test/')\n+\n     def test_empty_url_defaults(self):\n         bp = flask.Blueprint('bp', __name__)\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#5f648a8eb801e4ee6038a87cec11b416e0763a61", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 59 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 4 | Complexity Δ (Sum/Max): 7/7 | Churn Δ: 59 | Churn Cumulative: 59 | Contributors (this commit): 1 | Commits (past 90d): 1 | Contributors (cumulative): 1 | DMM Complexity: 1.0\n\nDIFF:\n@@ -0,0 +1,59 @@\n+from flask import Flask, render_template, session, request, json, abort, g\n+\n+import requests\n+\n+\n+app = Flask(__name__)\n+app.config.update(\n+    DEBUG=True,\n+    SECRET_KEY='my development key',\n+    PERSONA_JS='https://login.persona.org/include.js',\n+    PERSONA_VERIFIER='https://verifier.login.persona.org/verify',\n+)\n+app.config.from_envvar('PERSONA_SETTINGS', silent=True)\n+\n+\n+@app.before_request\n+def get_current_user():\n+    g.user = None\n+    email = session.get('email')\n+    if email is not None:\n+        g.user = email\n+\n+\n+@app.route('/')\n+def index():\n+    \"\"\"Just a generic index page to show.\"\"\"\n+    return render_template('index.html')\n+\n+\n+@app.route('/_auth/login', methods=['GET', 'POST'])\n+def login_handler():\n+    \"\"\"This is used by the persona.js file to kick off the\n+    verification securely from the server side.  If all is okay\n+    the email address is remembered on the server.\n+    \"\"\"\n+    resp = requests.post(app.config['PERSONA_VERIFIER'], data={\n+        'assertion': request.form['assertion'],\n+        'audience': request.host_url,\n+    }, verify=True)\n+    if resp.ok:\n+        verification_data = json.loads(resp.content)\n+        if verification_data['status'] == 'okay':\n+            session['email'] = verification_data['email']\n+            return 'OK'\n+\n+    abort(400)\n+\n+\n+@app.route('/_auth/logout', methods=['POST'])\n+def logout_handler():\n+    \"\"\"This is what persona.js will call to sign the user\n+    out again.\n+    \"\"\"\n+    session.clear()\n+    return 'OK'\n+\n+\n+if __name__ == '__main__':\n+    app.run()\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#efd6e468aefbf977704aa9aff52e84686c00958b", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 0 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 3311 | Contributors (this commit): 24 | Commits (past 90d): 19 | Contributors (cumulative): 24 | DMM Complexity: None\n\nDIFF:\n@@ -999,8 +999,6 @@ class Flask(_PackageBoundObject):\n         :param endpoint: the endpoint for the registered URL rule.  Flask\n                          itself assumes the name of the view function as\n                          endpoint\n-        :param view_func: the function to call when serving a request to the\n-                          provided endpoint\n         :param options: the options to be forwarded to the underlying\n                         :class:`~werkzeug.routing.Rule` object.  A change\n                         to Werkzeug is handling of method options.  methods\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#c889fbc231af08a0cd28a9694b60ffde9e1ff650", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 21 | Lines Deleted: 15 | Files Changed: 2 | Hunks: 7 | Methods Changed: 9 | Complexity Δ (Sum/Max): 0/1 | Churn Δ: 36 | Churn Cumulative: 2772 | Contributors (this commit): 12 | Commits (past 90d): 31 | Contributors (cumulative): 15 | DMM Complexity: 1.0\n\nDIFF:\n@@ -24,17 +24,14 @@ from .signals import appcontext_pushed, appcontext_popped\n class _AppCtxGlobals(object):\n     \"\"\"A plain object.\"\"\"\n \n-    def __getitem__(self, name):\n-        try:\n-            return getattr(self, name)\n-        except AttributeError:\n-            return None\n+    def get(self, name, default=None):\n+        return self.__dict__.get(name, default)\n \n-    def __setitem__(self, name, value):\n-        setattr(self, name, value)\n+    def __contains__(self, item):\n+        return item in self.__dict__\n \n-    def __delitem__(self, name, value):\n-        delattr(self, name, value)\n+    def __iter__(self):\n+        return iter(self.__dict__)\n \n     def __repr__(self):\n         top = _app_ctx_stack.top\n\n@@ -1116,18 +1116,27 @@ class BasicFunctionalityTestCase(FlaskTestCase):\n         self.assert_equal(len(errors), 3)\n         self.assert_equal(errors[1], None)\n \n-    def test_subscript_syntax_on_g(self):\n+    def test_get_method_on_g(self):\n         app = flask.Flask(__name__)\n         app.testing = True\n \n         with app.app_context():\n-            self.assert_equal(flask.g['x'], None)\n+            self.assert_equal(flask.g.get('x'), None)\n+            self.assert_equal(flask.g.get('x', 11), 11)\n             flask.g.x = 42\n-            self.assert_equal(flask.g['x'], 42)\n+            self.assert_equal(flask.g.get('x'), 42)\n             self.assert_equal(flask.g.x, 42)\n-            flask.g['x'] = 23\n-            self.assert_equal(flask.g['x'], 23)\n-            self.assert_equal(flask.g.x, 23)\n+\n+    def test_g_iteration_protocol(self):\n+        app = flask.Flask(__name__)\n+        app.testing = True\n+\n+        with app.app_context():\n+            flask.g.foo = 23\n+            flask.g.bar = 42\n+            self.assert_equal('foo' in flask.g, True)\n+            self.assert_equal('foos' in flask.g, False)\n+            self.assert_equal(sorted(flask.g), ['bar', 'foo'])\n \n \n class SubdomainTestCase(FlaskTestCase):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#6565bd848e68097fd827040af6c9e712f759d07b", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 3313 | Contributors (this commit): 25 | Commits (past 90d): 20 | Contributors (cumulative): 25 | DMM Complexity: None\n\nDIFF:\n@@ -740,7 +740,7 @@ class Flask(_PackageBoundObject):\n            catch.\n \n         .. versionchanged:: 0.10\n-           The default port is now picked from the ``SEVER_NAME`` variable.\n+           The default port is now picked from the ``SERVER_NAME`` variable.\n \n         :param host: the hostname to listen on. Set this to ``'0.0.0.0'`` to\n                      have the server available externally as well. Defaults to\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#3b9574fec988fca790ffe78b64ef30b22dd3386a", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 2 | Files Changed: 2 | Hunks: 2 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 476 | Contributors (this commit): 15 | Commits (past 90d): 10 | Contributors (cumulative): 16 | DMM Complexity: None\n\nDIFF:\n@@ -10,7 +10,7 @@\n     :license: BSD, see LICENSE for more details.\n \"\"\"\n \n-__version__ = '0.10-dev'\n+__version__ = '0.10'\n \n # utilities we import from Werkzeug and Jinja2 that are unused\n # in the module but are exported as public interface.\n\n@@ -78,7 +78,7 @@ class run_audit(Command):\n \n setup(\n     name='Flask',\n-    version='0.10-dev',\n+    version='0.10',\n     url='http://github.com/mitsuhiko/flask/',\n     license='BSD',\n     author='Armin Ronacher',\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#ac187bded7339dbf88baa2c6c7d8adddef657cac", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 2 | Files Changed: 2 | Hunks: 2 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 480 | Contributors (this commit): 15 | Commits (past 90d): 12 | Contributors (cumulative): 16 | DMM Complexity: None\n\nDIFF:\n@@ -10,7 +10,7 @@\n     :license: BSD, see LICENSE for more details.\n \"\"\"\n \n-__version__ = '0.10'\n+__version__ = '0.11-dev'\n \n # utilities we import from Werkzeug and Jinja2 that are unused\n # in the module but are exported as public interface.\n\n@@ -78,7 +78,7 @@ class run_audit(Command):\n \n setup(\n     name='Flask',\n-    version='0.10',\n+    version='0.11-dev',\n     url='http://github.com/mitsuhiko/flask/',\n     license='BSD',\n     author='Armin Ronacher',\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#41171d11ae37c4dfae79f17e1477b7bf8bdc034a", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 1 | Churn Cumulative: 255 | Contributors (this commit): 12 | Commits (past 90d): 9 | Contributors (cumulative): 12 | DMM Complexity: None\n\nDIFF:\n@@ -104,6 +104,7 @@ setup(\n         'Programming Language :: Python',\n         'Programming Language :: Python :: 2.6',\n         'Programming Language :: Python :: 2.7',\n+        'Programming Language :: Python :: 3.3',\n         'Topic :: Internet :: WWW/HTTP :: Dynamic Content',\n         'Topic :: Software Development :: Libraries :: Python Modules'\n     ],\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#5886925ff34db3d9e913a4bc44891876a7fe65d5", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 2 | Files Changed: 2 | Hunks: 2 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 485 | Contributors (this commit): 15 | Commits (past 90d): 15 | Contributors (cumulative): 16 | DMM Complexity: None\n\nDIFF:\n@@ -10,7 +10,7 @@\n     :license: BSD, see LICENSE for more details.\n \"\"\"\n \n-__version__ = '0.10'\n+__version__ = '0.10.1-dev'\n \n # utilities we import from Werkzeug and Jinja2 that are unused\n # in the module but are exported as public interface.\n\n@@ -78,7 +78,7 @@ class run_audit(Command):\n \n setup(\n     name='Flask',\n-    version='0.10',\n+    version='0.10.1-dev',\n     url='http://github.com/mitsuhiko/flask/',\n     license='BSD',\n     author='Armin Ronacher',\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#2713ea98cb0fc22952ba6ddf88209da1a2efa270", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 3 | Churn Cumulative: 260 | Contributors (this commit): 12 | Commits (past 90d): 11 | Contributors (cumulative): 12 | DMM Complexity: None\n\nDIFF:\n@@ -102,8 +102,7 @@ setup(\n         'License :: OSI Approved :: BSD License',\n         'Operating System :: OS Independent',\n         'Programming Language :: Python',\n-        'Programming Language :: Python :: 2.6',\n-        'Programming Language :: Python :: 2.7',\n+        'Programming Language :: Python :: 3',\n         'Topic :: Internet :: WWW/HTTP :: Dynamic Content',\n         'Topic :: Software Development :: Libraries :: Python Modules'\n     ],\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#c502dfbbfbee49c15ce4a57f7d417b71a73a10b6", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 23 | Lines Deleted: 2 | Files Changed: 2 | Hunks: 4 | Methods Changed: 2 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 25 | Churn Cumulative: 1266 | Contributors (this commit): 10 | Commits (past 90d): 33 | Contributors (cumulative): 13 | DMM Complexity: 1.0\n\nDIFF:\n@@ -165,14 +165,29 @@ def htmlsafe_dumps(obj, **kwargs):\n     also mark the result as safe.  Due to how this function escapes certain\n     characters this is safe even if used outside of ``<script>`` tags.\n \n+    The following characters are escaped in strings:\n+\n+    -   ``<``\n+    -   ``>``\n+    -   ``&``\n+    -   ``'``\n+\n+    This makes it safe to embed such strings in any place in HTML with the\n+    notable exception of double quoted attributes.  In that case single\n+    quote your attributes or HTML escape it in addition.\n+\n     .. versionchanged:: 0.10\n        This function's return value is now always safe for HTML usage, even\n-       if outside of script tags or if used in XHTML.\n+       if outside of script tags or if used in XHTML.  This rule does not\n+       hold true when using this function in HTML attributes that are double\n+       quoted.  Always single quote attributes if you use the ``|tojson``\n+       filter.  Alternatively use ``|tojson|forceescape``.\n     \"\"\"\n     rv = dumps(obj, **kwargs) \\\n         .replace(u'<', u'\\\\u003c') \\\n         .replace(u'>', u'\\\\u003e') \\\n-        .replace(u'&', u'\\\\u0026')\n+        .replace(u'&', u'\\\\u0026') \\\n+        .replace(u\"'\", u'\\\\u0027')\n     if not _slash_escape:\n         rv = rv.replace('\\\\/', '/')\n     return rv\n\n@@ -104,6 +104,12 @@ class JSONTestCase(FlaskTestCase):\n             self.assert_equal(rv, '\"\\\\u003c!--\\\\u003cscript\\\\u003e\"')\n             rv = render('{{ \"&\"|tojson }}')\n             self.assert_equal(rv, '\"\\\\u0026\"')\n+            rv = render('{{ \"\\'\"|tojson }}')\n+            self.assert_equal(rv, '\"\\\\u0027\"')\n+            rv = render(\"<a ng-data='{{ data|tojson }}'></a>\",\n+                data={'x': [\"foo\", \"bar\", \"baz'\"]})\n+            self.assert_equal(rv,\n+                '<a ng-data=\\'{\"x\": [\"foo\", \"bar\", \"baz\\\\u0027\"]}\\'></a>')\n \n     def test_json_customization(self):\n         class X(object):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#58ad83f37c8f643d6b573ebbedf03a1fc3677c51", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 8 | Lines Deleted: 0 | Files Changed: 2 | Hunks: 5 | Methods Changed: 6 | Complexity Δ (Sum/Max): 2/2 | Churn Δ: 8 | Churn Cumulative: 2727 | Contributors (this commit): 7 | Commits (past 90d): 29 | Contributors (cumulative): 10 | DMM Complexity: 0.42857142857142855\n\nDIFF:\n@@ -11,6 +11,7 @@\n \n import uuid\n import hashlib\n+from base64 import b64encode, b64decode\n from datetime import datetime\n from werkzeug.http import http_date, parse_date\n from werkzeug.datastructures import CallbackDict\n@@ -62,6 +63,8 @@ class TaggedJSONSerializer(object):\n                 return {' t': [_tag(x) for x in value]}\n             elif isinstance(value, uuid.UUID):\n                 return {' u': value.hex}\n+            elif isinstance(value, bytes):\n+                return {' b': b64encode(value).decode('ascii')}\n             elif callable(getattr(value, '__html__', None)):\n                 return {' m': text_type(value.__html__())}\n             elif isinstance(value, list):\n@@ -90,6 +93,8 @@ class TaggedJSONSerializer(object):\n                 return tuple(the_value)\n             elif the_key == ' u':\n                 return uuid.UUID(the_value)\n+            elif the_key == ' b':\n+                return b64decode(the_value)\n             elif the_key == ' m':\n                 return Markup(the_value)\n             elif the_key == ' d':\n\n@@ -326,6 +326,7 @@ class BasicFunctionalityTestCase(FlaskTestCase):\n             flask.session['m'] = flask.Markup('Hello!')\n             flask.session['u'] = the_uuid\n             flask.session['dt'] = now\n+            flask.session['b'] = b'\\xff'\n             flask.session['t'] = (1, 2, 3)\n             return response\n \n@@ -340,6 +341,8 @@ class BasicFunctionalityTestCase(FlaskTestCase):\n         self.assert_equal(type(rv['m']), flask.Markup)\n         self.assert_equal(rv['dt'], now)\n         self.assert_equal(rv['u'], the_uuid)\n+        self.assert_equal(rv['b'], b'\\xff')\n+        self.assert_equal(type(rv['b']), bytes)\n         self.assert_equal(rv['t'], (1, 2, 3))\n \n     def test_flashes(self):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#44e39ab0713566bd91363f19ed09921df5db0196", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 30 | Lines Deleted: 1 | Files Changed: 2 | Hunks: 2 | Methods Changed: 6 | Complexity Δ (Sum/Max): 5/5 | Churn Δ: 31 | Churn Cumulative: 5533 | Contributors (this commit): 28 | Commits (past 90d): 45 | Contributors (cumulative): 34 | DMM Complexity: 1.0\n\nDIFF:\n@@ -979,7 +979,7 @@ class Flask(_PackageBoundObject):\n         self.url_map.add(rule)\n         if view_func is not None:\n             old_func = self.view_functions.get(endpoint)\n-            if old_func is not None and old_func is not view_func:\n+            if old_func is not None and old_func != view_func:\n                 raise AssertionError('View function mapping is overwriting an '\n                                      'existing endpoint function: %s' % endpoint)\n             self.view_functions[endpoint] = view_func\n\n@@ -1217,6 +1217,35 @@ class SubdomainTestCase(FlaskTestCase):\n         rv = c.get('/outside', 'http://xtesting.localhost/')\n         self.assert_equal(rv.data, b'Outside')\n \n+    def test_multi_route_rules(self):\n+        app = flask.Flask(__name__)\n+\n+        @app.route('/')\n+        @app.route('/<test>/')\n+        def index(test='a'):\n+            return test\n+\n+        rv = app.test_client().open('/')\n+        self.assert_equal(rv.data, b'a')\n+        rv = app.test_client().open('/b/')\n+        self.assert_equal(rv.data, b'b')\n+\n+    def test_multi_route_class_views(self):\n+        class View(object):\n+            def __init__(self, app):\n+                app.add_url_rule('/', 'index', self.index)\n+                app.add_url_rule('/<test>/', 'index', self.index)\n+\n+            def index(self, test='a'):\n+                return test\n+\n+        app = flask.Flask(__name__)\n+        _ = View(app)\n+        rv = app.test_client().open('/')\n+        self.assert_equal(rv.data, b'a')\n+        rv = app.test_client().open('/b/')\n+        self.assert_equal(rv.data, b'b')\n+\n \n def suite():\n     suite = unittest.TestSuite()\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#298334fffc8288b5a9a45ef4150e3c4292e45318", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 2 | Files Changed: 2 | Hunks: 2 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 492 | Contributors (this commit): 15 | Commits (past 90d): 18 | Contributors (cumulative): 16 | DMM Complexity: None\n\nDIFF:\n@@ -10,7 +10,7 @@\n     :license: BSD, see LICENSE for more details.\n \"\"\"\n \n-__version__ = '0.11-dev'\n+__version__ = '0.10.1'\n \n # utilities we import from Werkzeug and Jinja2 that are unused\n # in the module but are exported as public interface.\n\n@@ -78,7 +78,7 @@ class run_audit(Command):\n \n setup(\n     name='Flask',\n-    version='0.11-dev',\n+    version='0.10.1',\n     url='http://github.com/mitsuhiko/flask/',\n     license='BSD',\n     author='Armin Ronacher',\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#d94b1bec24f47e5997787f5ee762d8b2566d81b4", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 2 | Files Changed: 2 | Hunks: 2 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 496 | Contributors (this commit): 15 | Commits (past 90d): 20 | Contributors (cumulative): 16 | DMM Complexity: None\n\nDIFF:\n@@ -10,7 +10,7 @@\n     :license: BSD, see LICENSE for more details.\n \"\"\"\n \n-__version__ = '0.10.1'\n+__version__ = '0.10.2-dev'\n \n # utilities we import from Werkzeug and Jinja2 that are unused\n # in the module but are exported as public interface.\n\n@@ -78,7 +78,7 @@ class run_audit(Command):\n \n setup(\n     name='Flask',\n-    version='0.10.1',\n+    version='0.10.2-dev',\n     url='http://github.com/mitsuhiko/flask/',\n     license='BSD',\n     author='Armin Ronacher',\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#977e7660accc6b31bdd002b74f0a29b2846c84ba", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 2 | Files Changed: 2 | Hunks: 2 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 500 | Contributors (this commit): 15 | Commits (past 90d): 22 | Contributors (cumulative): 16 | DMM Complexity: None\n\nDIFF:\n@@ -10,7 +10,7 @@\n     :license: BSD, see LICENSE for more details.\n \"\"\"\n \n-__version__ = '0.10.2-dev'\n+__version__ = '0.11-dev'\n \n # utilities we import from Werkzeug and Jinja2 that are unused\n # in the module but are exported as public interface.\n\n@@ -78,7 +78,7 @@ class run_audit(Command):\n \n setup(\n     name='Flask',\n-    version='0.10.2-dev',\n+    version='0.11-dev',\n     url='http://github.com/mitsuhiko/flask/',\n     license='BSD',\n     author='Armin Ronacher',\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#dfdcac22927f8027f393e66d78345106cdbbfae5", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 551 | Contributors (this commit): 6 | Commits (past 90d): 1 | Contributors (cumulative): 6 | DMM Complexity: None\n\nDIFF:\n@@ -167,7 +167,7 @@ class Blueprint(_PackageBoundObject):\n         the :func:`url_for` function is prefixed with the name of the blueprint.\n         \"\"\"\n         if endpoint:\n-            assert '.' not in endpoint, \"Blueprint endpoint's should not contain dot's\"\n+            assert '.' not in endpoint, \"Blueprint endpoints should not contain dots\"\n         self.record(lambda s:\n             s.add_url_rule(rule, endpoint, view_func, **options))\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#ec5b182f15d711aa92fe16480011fbe0fb9d3a63", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 23 | Lines Deleted: 1 | Files Changed: 3 | Hunks: 4 | Methods Changed: 3 | Complexity Δ (Sum/Max): 4/3 | Churn Δ: 24 | Churn Cumulative: 4160 | Contributors (this commit): 30 | Commits (past 90d): 39 | Contributors (cumulative): 40 | DMM Complexity: 1.0\n\nDIFF:\n@@ -175,6 +175,15 @@ class Flask(_PackageBoundObject):\n                                      _set_request_globals_class)\n     del _get_request_globals_class, _set_request_globals_class\n \n+    #: The class that is used for the ``config`` attribute of this app.\n+    #: Defaults to :class:`~flask.Config`.\n+    #:\n+    #: Example use cases for a custom class:\n+    #:\n+    #: 1. Default values for certain config options.\n+    #: 2. Access to config values through attributes in addition to keys.\n+    config_class = Config\n+\n     #: The debug flag.  Set this to `True` to enable debugging of the\n     #: application.  In debug mode the debugger will kick in when an unhandled\n     #: exception occurs and the integrated server will automatically reload\n@@ -609,7 +618,7 @@ class Flask(_PackageBoundObject):\n         root_path = self.root_path\n         if instance_relative:\n             root_path = self.instance_path\n-        return Config(root_path, self.default_config)\n+        return self.config_class(root_path, self.default_config)\n \n     def auto_find_instance_path(self):\n         \"\"\"Tries to locate the instance path if it was not provided to the\n\n@@ -157,6 +157,9 @@ class FlaskTestCase(unittest.TestCase):\n     def assert_not_in(self, x, y):\n         self.assertNotIn(x, y)\n \n+    def assert_isinstance(self, obj, cls):\n+        self.assertIsInstance(obj, cls)\n+\n     if sys.version_info[:2] == (2, 6):\n         def assertIn(self, x, y):\n             assert x in y, \"%r unexpectedly not in %r\" % (x, y)\n\n@@ -99,6 +99,16 @@ class ConfigTestCase(FlaskTestCase):\n             self.assert_true(0, 'expected config')\n         self.assert_false(app.config.from_pyfile('missing.cfg', silent=True))\n \n+    def test_custom_config_class(self):\n+        class Config(flask.Config):\n+            pass\n+        class Flask(flask.Flask):\n+            config_class = Config\n+        app = Flask(__name__)\n+        self.assert_isinstance(app.config, Config)\n+        app.config.from_object(__name__)\n+        self.common_object_test(app)\n+\n     def test_session_lifetime(self):\n         app = flask.Flask(__name__)\n         app.config['PERMANENT_SESSION_LIFETIME'] = 42\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#f88cc2d2f9d14d97e33ddd2bbaa4b1885db06e1c", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 2 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 185 | Contributors (this commit): 5 | Commits (past 90d): 6 | Contributors (cumulative): 5 | DMM Complexity: None\n\nDIFF:\n@@ -102,7 +102,7 @@ class SignalsTestCase(FlaskTestCase):\n         def record_push(sender, **kwargs):\n             recorded.append('push')\n         def record_pop(sender, **kwargs):\n-            recorded.append('push')\n+            recorded.append('pop')\n \n         @app.route('/')\n         def index():\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#b6116c1de3f3556f6ae18d87348355d2545ce314", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 0 | Lines Deleted: 5 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): -1/0 | Churn Δ: 5 | Churn Cumulative: 3331 | Contributors (this commit): 28 | Commits (past 90d): 21 | Contributors (cumulative): 28 | DMM Complexity: 1.0\n\nDIFF:\n@@ -968,11 +968,6 @@ class Flask(_PackageBoundObject):\n         # Add the required methods now.\n         methods |= required_methods\n \n-        # due to a werkzeug bug we need to make sure that the defaults are\n-        # None if they are an empty dictionary.  This should not be necessary\n-        # with Werkzeug 0.7\n-        options['defaults'] = options.get('defaults') or None\n-\n         rule = self.url_rule_class(rule, methods=methods, **options)\n         rule.provide_automatic_options = provide_automatic_options\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#d1d835c02302884b2db1cab099b3ea6a84f41d32", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 77 | Lines Deleted: 0 | Files Changed: 3 | Hunks: 5 | Methods Changed: 6 | Complexity Δ (Sum/Max): 9/4 | Churn Δ: 77 | Churn Cumulative: 6164 | Contributors (this commit): 30 | Commits (past 90d): 54 | Contributors (cumulative): 39 | DMM Complexity: 1.0\n\nDIFF:\n@@ -285,6 +285,7 @@ class Flask(_PackageBoundObject):\n         'SESSION_COOKIE_PATH':                  None,\n         'SESSION_COOKIE_HTTPONLY':              True,\n         'SESSION_COOKIE_SECURE':                False,\n+        'SESSION_REFRESH_EACH_REQUEST':         True,\n         'MAX_CONTENT_LENGTH':                   None,\n         'SEND_FILE_MAX_AGE_DEFAULT':            12 * 60 * 60, # 12 hours\n         'TRAP_BAD_REQUEST_ERRORS':              False,\n\n@@ -252,6 +252,24 @@ class SessionInterface(object):\n         if session.permanent:\n             return datetime.utcnow() + app.permanent_session_lifetime\n \n+    def should_set_cookie(self, app, session):\n+        \"\"\"Indicates weather a cookie should be set now or not.  This is\n+        used by session backends to figure out if they should emit a\n+        set-cookie header or not.  The default behavior is controlled by\n+        the ``SESSION_REFRESH_EACH_REQUEST`` config variable.  If\n+        it's set to `False` then a cookie is only set if the session is\n+        modified, if set to `True` it's always set if the session is\n+        permanent.\n+\n+        This check is usually skipped if sessions get deleted.\n+\n+        .. versionadded:: 1.0\n+        \"\"\"\n+        if session.modified:\n+            return True\n+        save_each = app.config['SESSION_REFRESH_EACH_REQUEST']\n+        return save_each and session.permanent\n+\n     def open_session(self, app, request):\n         \"\"\"This method has to be implemented and must either return `None`\n         in case the loading failed because of a configuration error or an\n@@ -315,11 +333,26 @@ class SecureCookieSessionInterface(SessionInterface):\n     def save_session(self, app, session, response):\n         domain = self.get_cookie_domain(app)\n         path = self.get_cookie_path(app)\n+\n+        # Delete case.  If there is no session we bail early.\n+        # If the session was modified to be empty we remove the\n+        # whole cookie.\n         if not session:\n             if session.modified:\n                 response.delete_cookie(app.session_cookie_name,\n                                        domain=domain, path=path)\n             return\n+\n+        # Modification case.  There are upsides and downsides to\n+        # emitting a set-cookie header each request.  The behavior\n+        # is controlled by the :meth:`should_set_cookie` method\n+        # which performs a quick check to figure out if the cookie\n+        # should be set or not.  This is controlled by the\n+        # SESSION_REFRESH_EACH_REQUEST config flag as well as\n+        # the permanent flag on the session itself.\n+        if not self.should_set_cookie(app, session):\n+            return\n+\n         httponly = self.get_cookie_httponly(app)\n         secure = self.get_cookie_secure(app)\n         expires = self.get_expiration_time(app, session)\n\n@@ -345,6 +345,49 @@ class BasicFunctionalityTestCase(FlaskTestCase):\n         self.assert_equal(type(rv['b']), bytes)\n         self.assert_equal(rv['t'], (1, 2, 3))\n \n+    def test_session_cookie_setting(self):\n+        app = flask.Flask(__name__)\n+        app.testing = True\n+        app.secret_key = 'dev key'\n+        is_permanent = True\n+\n+        @app.route('/bump')\n+        def bump():\n+            rv = flask.session['foo'] = flask.session.get('foo', 0) + 1\n+            flask.session.permanent = is_permanent\n+            return str(rv)\n+\n+        @app.route('/read')\n+        def read():\n+            return str(flask.session.get('foo', 0))\n+\n+        def run_test(expect_header):\n+            with app.test_client() as c:\n+                self.assert_equal(c.get('/bump').data, '1')\n+                self.assert_equal(c.get('/bump').data, '2')\n+                self.assert_equal(c.get('/bump').data, '3')\n+\n+                rv = c.get('/read')\n+                set_cookie = rv.headers.get('set-cookie')\n+                self.assert_equal(set_cookie is not None, expect_header)\n+                self.assert_equal(rv.data, '3')\n+\n+        is_permanent = True\n+        app.config['SESSION_REFRESH_EACH_REQUEST'] = True\n+        run_test(expect_header=True)\n+\n+        is_permanent = True\n+        app.config['SESSION_REFRESH_EACH_REQUEST'] = False\n+        run_test(expect_header=False)\n+\n+        is_permanent = False\n+        app.config['SESSION_REFRESH_EACH_REQUEST'] = True\n+        run_test(expect_header=False)\n+\n+        is_permanent = False\n+        app.config['SESSION_REFRESH_EACH_REQUEST'] = False\n+        run_test(expect_header=False)\n+\n     def test_flashes(self):\n         app = flask.Flask(__name__)\n         app.secret_key = 'testkey'\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#3e4dbf93d9ef2b64d32b291aa6f7620bdbc6576a", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 4 | Lines Deleted: 4 | Files Changed: 1 | Hunks: 2 | Methods Changed: 2 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 8 | Churn Cumulative: 2269 | Contributors (this commit): 8 | Commits (past 90d): 26 | Contributors (cumulative): 8 | DMM Complexity: None\n\nDIFF:\n@@ -363,14 +363,14 @@ class BasicFunctionalityTestCase(FlaskTestCase):\n \n         def run_test(expect_header):\n             with app.test_client() as c:\n-                self.assert_equal(c.get('/bump').data, '1')\n-                self.assert_equal(c.get('/bump').data, '2')\n-                self.assert_equal(c.get('/bump').data, '3')\n+                self.assert_equal(c.get('/bump').data, b'1')\n+                self.assert_equal(c.get('/bump').data, b'2')\n+                self.assert_equal(c.get('/bump').data, b'3')\n \n                 rv = c.get('/read')\n                 set_cookie = rv.headers.get('set-cookie')\n                 self.assert_equal(set_cookie is not None, expect_header)\n-                self.assert_equal(rv.data, '3')\n+                self.assert_equal(rv.data, b'3')\n \n         is_permanent = True\n         app.config['SESSION_REFRESH_EACH_REQUEST'] = True\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#af5a0853bfe36d547af93b904729a43fcf8cc55d", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 10 | Lines Deleted: 0 | Files Changed: 2 | Hunks: 2 | Methods Changed: 3 | Complexity Δ (Sum/Max): 2/2 | Churn Δ: 10 | Churn Cumulative: 5611 | Contributors (this commit): 30 | Commits (past 90d): 50 | Contributors (cumulative): 37 | DMM Complexity: 0.7\n\nDIFF:\n@@ -949,6 +949,9 @@ class Flask(_PackageBoundObject):\n         # a tuple of only `GET` as default.\n         if methods is None:\n             methods = getattr(view_func, 'methods', None) or ('GET',)\n+        if isinstance(methods, string_types):\n+            raise TypeError('Allowed methods have to be iterables of strings, '\n+                            'for example: @app.route(..., methods=[\"POST\"])')\n         methods = set(methods)\n \n         # Methods that should always be added\n\n@@ -85,6 +85,13 @@ class BasicFunctionalityTestCase(FlaskTestCase):\n         self.assert_equal(rv.status_code, 405)\n         self.assert_equal(sorted(rv.allow), ['GET', 'HEAD', 'OPTIONS', 'POST'])\n \n+    def test_disallow_string_for_allowed_methods(self):\n+        app = flask.Flask(__name__)\n+        with self.assert_raises(TypeError):\n+            @app.route('/', methods='GET POST')\n+            def index():\n+                return \"Hey\"\n+\n     def test_url_mapping(self):\n         app = flask.Flask(__name__)\n         def index():\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "flask#5e8dd8b2872584483e7fb7506337a7d940ea8cc0", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 32 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 3 | Methods Changed: 1 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 34 | Churn Cumulative: 989 | Contributors (this commit): 10 | Commits (past 90d): 21 | Contributors (cumulative): 10 | DMM Complexity: 1.0\n\nDIFF:\n@@ -173,7 +173,33 @@ class JSONTestCase(FlaskTestCase):\n         c = app.test_client()\n         rv = c.get('/')\n         lines = [x.strip() for x in rv.data.strip().decode('utf-8').splitlines()]\n-        self.assert_equal(lines, [\n+        sorted_by_str = [\n+            '{',\n+            '\"values\": {',\n+            '\"0\": \"foo\",',\n+            '\"1\": \"foo\",',\n+            '\"10\": \"foo\",',\n+            '\"11\": \"foo\",',\n+            '\"12\": \"foo\",',\n+            '\"13\": \"foo\",',\n+            '\"14\": \"foo\",',\n+            '\"15\": \"foo\",',\n+            '\"16\": \"foo\",',\n+            '\"17\": \"foo\",',\n+            '\"18\": \"foo\",',\n+            '\"19\": \"foo\",',\n+            '\"2\": \"foo\",',\n+            '\"3\": \"foo\",',\n+            '\"4\": \"foo\",',\n+            '\"5\": \"foo\",',\n+            '\"6\": \"foo\",',\n+            '\"7\": \"foo\",',\n+            '\"8\": \"foo\",',\n+            '\"9\": \"foo\"',\n+            '}',\n+            '}'\n+        ]\n+        sorted_by_int = [\n             '{',\n             '\"values\": {',\n             '\"0\": \"foo\",',\n@@ -198,8 +224,12 @@ class JSONTestCase(FlaskTestCase):\n             '\"19\": \"foo\"',\n             '}',\n             '}'\n-        ])\n+        ]\n \n+        try:\n+            self.assert_equal(lines, sorted_by_int)\n+        except AssertionError:\n+            self.assert_equal(lines, sorted_by_str)\n \n class SendfileTestCase(FlaskTestCase):\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
