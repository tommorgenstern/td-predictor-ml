{"custom_id": "scrapy#fde4f219a8c090b8a7a39d4c060ab643a8897f26", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 2 | Files Changed: 7 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 7 | Contributors (this commit): 2 | Commits (past 90d): 10 | Contributors (cumulative): 9 | DMM Complexity: None\n\nDIFF:\n@@ -12,8 +12,8 @@ if sys.version_info < (2,5):\n     sys.exit(1)\n \n # monkey patches to fix external library issues\n-from scrapy.patches import monkeypatches\n-monkeypatches.apply_patches()\n+from scrapy.patches import apply_patches\n+apply_patches()\n \n # optional_features is a set containing Scrapy optional features\n optional_features = set()\n\n\n\n\n\n\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "scrapy#8ec7c9e01c50c167308414e439e678186c277bc4", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 143 | Contributors (this commit): 3 | Commits (past 90d): 26 | Contributors (cumulative): 3 | DMM Complexity: None\n\nDIFF:\n@@ -200,7 +200,7 @@ TELNETCONSOLE_ENABLED = 1\n TELNETCONSOLE_PORT = 6023  # if None, uses a dynamic port\n \n WEBCONSOLE_ENABLED = True\n-WEBCONSOLE_PORT = None\n+WEBCONSOLE_PORT = 6080\n WEBCONSOLE_LOGFILE = None\n \n # this setting is used by the cluster master to pass additional settings to\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "scrapy#a86b12a8795618184a707895f78511d433cba22c", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 2 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 9 | Contributors (this commit): 2 | Commits (past 90d): 5 | Contributors (cumulative): 3 | DMM Complexity: None\n\nDIFF:\n@@ -12,7 +12,7 @@ if sys.version_info < (2,5):\n     sys.exit(1)\n \n # monkey patches to fix external library issues\n-from scrapy.patches import apply_patches\n+from scrapy.xlib.patches import apply_patches\n apply_patches()\n \n # optional_features is a set containing Scrapy optional features\n\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "scrapy#01b79e386fca52207ef3df5f014d7efc5defed13", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 14 | Lines Deleted: 5 | Files Changed: 1 | Hunks: 4 | Methods Changed: 2 | Complexity Δ (Sum/Max): 3/3 | Churn Δ: 19 | Churn Cumulative: 21 | Contributors (this commit): 2 | Commits (past 90d): 3 | Contributors (cumulative): 2 | DMM Complexity: 1.0\n\nDIFF:\n@@ -1,10 +1,16 @@\n-import pprint\n-\n from scrapy.xlib.pydispatch import dispatcher\n \n from scrapy.stats import stats\n from scrapy.management.web import banner, webconsole_discover_module\n \n+def stats_html_table(statsdict):\n+    s = \"\"\n+    s += \"<table border='1'>\\n\"\n+    for kv in statsdict.iteritems():\n+        s += \"<tr><th align='left'>%s</th><td>%s</td></tr>\\n\" % kv\n+    s += \"</table>\\n\"\n+    return s\n+\n class StatsDump(object):\n     webconsole_id = 'stats'\n     webconsole_name = 'StatsCollector dump'\n@@ -14,9 +20,11 @@ class StatsDump(object):\n \n     def webconsole_render(self, wc_request):\n         s = banner(self)\n-        s += \"<pre><code>\\n\"\n-        s += pprint.pformat(stats)\n-        s += \"</pre></code>\\n\"\n+        s += \"<h3>Global stats</h3>\\n\"\n+        s += stats_html_table(stats.get_stats())\n+        for domain in stats.list_domains():\n+            s += \"<h3>%s</h3>\\n\" % domain\n+            s += stats_html_table(stats.get_stats(domain))\n         s += \"</body>\\n\"\n         s += \"</html>\\n\"\n \n@@ -24,3 +32,4 @@ class StatsDump(object):\n \n     def webconsole_discover_module(self):\n         return self\n+\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "scrapy#4a1fc74d6906f9dd20b6d2e55bf8f651eeee6e4d", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 10 | Lines Deleted: 8 | Files Changed: 1 | Hunks: 5 | Methods Changed: 1 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 18 | Churn Cumulative: 23 | Contributors (this commit): 2 | Commits (past 90d): 4 | Contributors (cumulative): 2 | DMM Complexity: 0.0\n\nDIFF:\n@@ -49,28 +49,30 @@ class LiveStats(object):\n         sch = scrapyengine.scheduler\n         dwl = scrapyengine.downloader\n \n-        totdomains = totscraped = totcrawled = totscheduled = totactive = totpending = 0\n+        totdomains = totscraped = totcrawled = totscheduled = totactive = totpending = totdqueued = tottransf = 0\n         s = banner(self)\n         s += \"<table border='1'>\\n\"\n-        s += \"<tr><th>Domain</th><th>Items<br>Scraped</th><th>Pages<br>Crawled</th><th>Scheduler<br>Pending</th><th>Downloader<br/>Pending</th><th>Downloader<br/>Active</th><th>Start time</th><th>Finish time</th><th>Run time</th></tr>\\n\"\n+        s += \"<tr><th>Domain</th><th>Items<br>Scraped</th><th>Pages<br>Crawled</th><th>Scheduler<br>Pending</th><th>Downloader<br/>Queued</th><th>Downloader<br/>Active</th><th>Downloader<br/>Transferring</th><th>Start time</th><th>Finish time</th><th>Run time</th></tr>\\n\"\n         for d in sorted(self.domains.keys()):\n             scheduled = len(sch.pending_requests[d]) if d in sch.pending_requests else 0\n             active = len(dwl.sites[d].active) if d in dwl.sites else 0\n-            pending = len(dwl.sites[d].queue) if d in dwl.queue else 0\n+            dqueued = len(dwl.sites[d].queue) if d in dwl.sites else 0\n+            transf = len(dwl.sites[d].transferring) if d in dwl.sites else 0\n             stats = self.domains[d]\n             runtime = stats.finished - stats.started if stats.finished else datetime.now() - stats.started\n \n-            s += '<tr><td>%s</td><td align=\"right\">%d</td><td align=\"right\">%d</td><td align=\"right\">%d</td><td align=\"right\">%d</td><td align=\"right\">%d</td><td>%s</td><td>%s</td><td>%s</td></tr>\\n' % \\\n-                 (d, stats.scraped, stats.crawled, scheduled, pending, active, str(stats.started), str(stats.finished), str(runtime))\n+            s += '<tr><td>%s</td><td align=\"right\">%d</td><td align=\"right\">%d</td><td align=\"right\">%d</td><td align=\"right\">%d</td><td align=\"right\">%d</td><td align=\"right\">%d</td><td>%s</td><td>%s</td><td>%s</td></tr>\\n' % \\\n+                 (d, stats.scraped, stats.crawled, scheduled, dqueued, active, transf, str(stats.started), str(stats.finished), str(runtime))\n \n             totdomains += 1\n             totscraped += stats.scraped\n             totcrawled += stats.crawled\n             totscheduled += scheduled\n             totactive += active\n-            totpending += pending\n-        s += '<tr><td><b>%d domains</b></td><td align=\"right\"><b>%d</b></td><td align=\"right\"><b>%d</b></td><td align=\"right\"><b>%d</b></td><td align=\"right\"><b>%d</b></td><td align=\"right\"><b>%d</b></td><td/><td/></tr>\\n' % \\\n-             (totdomains, totscraped, totcrawled, totscheduled, totactive, totpending)\n+            totdqueued += dqueued\n+            tottransf += transf\n+        s += '<tr><td><b>%d domains</b></td><td align=\"right\"><b>%d</b></td><td align=\"right\"><b>%d</b></td><td align=\"right\"><b>%d</b></td><td align=\"right\"><b>%d</b></td><td align=\"right\"><b>%d</b></td><td align=\"right\"><b>%d</b></td><td/><td/></tr>\\n' % \\\n+             (totdomains, totscraped, totcrawled, totscheduled, totdqueued, totactive, tottransf)\n         s += \"</table>\\n\"\n \n         s += \"</body>\\n\"\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "scrapy#b336de7302fef6c9ed0b793240eb90ae02598cba", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 14 | Lines Deleted: 18 | Files Changed: 1 | Hunks: 14 | Methods Changed: 3 | Complexity Δ (Sum/Max): -2/0 | Churn Δ: 32 | Churn Cumulative: 40 | Contributors (this commit): 2 | Commits (past 90d): 5 | Contributors (cumulative): 2 | DMM Complexity: 0.75\n\nDIFF:\n@@ -28,7 +28,6 @@ class Spiderctl(object):\n         self.running.add(domain)\n \n     def domain_closed(self, domain, spider):\n-        if domain in self.running:\n         self.running.remove(domain)\n         self.finished.add(domain)\n \n@@ -37,20 +36,19 @@ class Spiderctl(object):\n             changes = self.webconsole_control(wc_request)\n \n         enabled_domains = spiders.asdict().keys()\n-        self.scheduled = set(scrapyengine.scheduler.pending_domains_count)\n-        self.not_scheduled = [d for d in enabled_domains if d not in self.scheduled\n+        self.scheduled = scrapyengine.domain_scheduler.pending_domains\n+        self.idle = [d for d in enabled_domains if d not in self.scheduled\n                                                         and d not in self.running\n                                                         and d not in self.finished]\n \n         s = banner(self)\n-        s += '<p><a href=\"?reloadspiders=1\">Reload spiders</a></p>\\n'\n         s += '<table border=1\">\\n'\n-        s += \"<tr><th>Running (%d/%d)</th><th>Scheduled (%d)</th><th>Finished (%d)</th><th>Not scheduled (%d)</th></tr>\\n\" % \\\n+        s += \"<tr><th>Running (%d/%d)</th><th>Scheduled (%d)</th><th>Finished (%d)</th><th>Idle (%d)</th></tr>\\n\" % \\\n                 (len(self.running),\n                  settings['CONCURRENT_DOMAINS'],\n                  len(self.scheduled),\n                  len(self.finished),\n-                 len(self.not_scheduled))\n+                 len(self.idle))\n         s += \"<tr>\\n\"\n \n         # running\n@@ -69,7 +67,7 @@ class Spiderctl(object):\n         s += \"<td valign='top'>\\n\"\n         s += '<form method=\"post\" action=\".\">\\n'\n         s += '<select name=\"remove_pending_domains\" multiple=\"multiple\">\\n'\n-        for domain in sorted(self.scheduled):\n+        for domain in self.scheduled:\n             s += \"<option>%s</option>\\n\" % domain\n         s += '</select><br>\\n'\n         s += '<br />'\n@@ -90,11 +88,11 @@ class Spiderctl(object):\n         s += '</form>\\n'\n         s += \"</td>\\n\"\n \n-        # not scheduled\n+        # idle\n         s += \"<td valign='top'>\\n\"\n         s += '<form method=\"post\" action=\".\">\\n'\n         s += '<select name=\"add_pending_domains\" multiple=\"multiple\">\\n'\n-        for domain in sorted(self.not_scheduled):\n+        for domain in sorted(self.idle):\n             s += \"<option>%s</option>\\n\" % domain\n         s += '</select><br>\\n'\n         s += '<br />'\n@@ -111,7 +109,8 @@ class Spiderctl(object):\n         s += '<form method=\"post\" action=\".\">\\n'\n         s += \"<textarea name='bulk_remove_domains' rows='10' cols='25'></textarea>\\n\"\n         s += '<br>\\n'\n-        s += '<input type=\"submit\" value=\"Bulk remove domains\">\\n'\n+        s += '<input type=\"submit\" value=\"Bulk remove domains\"><br />\\n'\n+        s += \"<span style='font-size: small'>(enter one domain per line)</span>\\n\"\n         s += '</form>\\n'\n         s += '</td>\\n'\n \n@@ -121,7 +120,8 @@ class Spiderctl(object):\n         s += '<form method=\"post\" action=\".\">\\n'\n         s += \"<textarea name='bulk_schedule_domains' rows='10' cols='25'></textarea>\\n\"\n         s += '<br>\\n'\n-        s += '<input type=\"submit\" value=\"Bulk schedule domains\">\\n'\n+        s += '<input type=\"submit\" value=\"Bulk schedule domains\"><br/>\\n'\n+        s += \"<span style='font-size: small'>(enter one domain per line)</span>\\n\"\n         s += '</form>\\n'\n         s += \"</td>\\n\"\n \n@@ -141,10 +141,6 @@ class Spiderctl(object):\n         args = wc_request.args\n         enabled_domains = spiders.asdict().keys()\n         s = \"<hr />\\n\"\n-        if \"reloadspiders\" in args:\n-            scrapymanager.reload_spiders()\n-            s += \"<p><b>Spiders reloaded</b></p>\\n\"\n-            return s\n \n         if \"stop_running_domains\" in args:\n             s += \"<p>\"\n@@ -175,7 +171,7 @@ class Spiderctl(object):\n                 s += \"</p>\"\n         if \"add_pending_domains\" in args:\n             for domain in args[\"add_pending_domains\"]:\n-                if domain not in scrapyengine.scheduler.pending_domains_count:\n+                if domain not in scrapyengine.scheduler.pending_requests:\n                     scrapymanager.crawl(domain)\n             s += \"<p>\"\n             s += \"Scheduled spiders: <ul><li>%s</li></ul>\" % \"</li><li>\".join(args[\"add_pending_domains\"])\n@@ -184,7 +180,7 @@ class Spiderctl(object):\n             to_schedule = set([d.strip() for d in args[\"bulk_schedule_domains\"][0].split(\"\\n\")])\n             scheduled = set()\n             for domain in to_schedule:\n-                if domain in enabled_domains and domain not in scrapyengine.scheduler.pending_domains_count:\n+                if domain in enabled_domains and domain not in scrapyengine.scheduler.pending_requests:\n                     scrapymanager.crawl(domain)\n                     scheduled.add(domain)\n             if scheduled:\n@@ -196,7 +192,7 @@ class Spiderctl(object):\n                 s += \"</p>\"\n         if \"rerun_finished_domains\" in args:\n             for domain in args[\"rerun_finished_domains\"]:\n-                if domain not in scrapyengine.scheduler.pending_domains_count:\n+                if domain not in scrapyengine.scheduler.pending_requests:\n                     scrapymanager.crawl(domain)\n                 self.finished.remove(domain)\n             s += \"<p>\"\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "scrapy#8ecd16b5e33a06fdbbb6bd1589f377c088d5a868", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 0 | Lines Deleted: 31 | Files Changed: 1 | Hunks: 2 | Methods Changed: 3 | Complexity Δ (Sum/Max): 6/6 | Churn Δ: 31 | Churn Cumulative: 31 | Contributors (this commit): 2 | Commits (past 90d): 2 | Contributors (cumulative): 2 | DMM Complexity: 0.6956521739130435\n\nDIFF:\n@@ -6,39 +6,8 @@ import twisted\n \n def apply_patches():\n     if twisted.__version__ < '8.0.0':\n-        patch_HTTPPageGetter_handleResponse()\n         add_missing_blockingCallFromThread()\n \n-\n-# bugfix not present in twisted 2.5 for handling empty response of HEAD requests\n-def patch_HTTPPageGetter_handleResponse():\n-    from twisted.web.client import PartialDownloadError, HTTPPageGetter\n-    from twisted.python import failure\n-    from twisted.web import error\n-\n-    def _handleResponse(self, response):\n-        if self.quietLoss:\n-            return\n-        if self.failed:\n-            self.factory.noPage(\n-                failure.Failure(\n-                    error.Error(\n-                        self.status, self.message, response)))\n-        if self.factory.method.upper() == 'HEAD':\n-            # Callback with empty string, since there is never a response\n-            # body for HEAD requests.\n-            self.factory.page('')\n-        elif self.length != None and self.length != 0:\n-            self.factory.noPage(failure.Failure(\n-                PartialDownloadError(self.status, self.message, response)))\n-        else:\n-            self.factory.page(response)\n-        # server might be stupid and not close connection. admittedly\n-        # the fact we do only one request per connection is also\n-        # stupid...\n-        self.transport.loseConnection()\n-    setattr(HTTPPageGetter, 'handleResponse', _handleResponse)\n-\n # This function comes bundled with Twisted 8.x and above\n def add_missing_blockingCallFromThread():\n     import Queue\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "scrapy#c0dcd764249fad510fc09357aa2d1a51812980fe", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 3 | Lines Deleted: 4 | Files Changed: 5 | Hunks: 4 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 7 | Churn Cumulative: 152 | Contributors (this commit): 3 | Commits (past 90d): 34 | Contributors (cumulative): 9 | DMM Complexity: None\n\nDIFF:\n@@ -126,8 +126,6 @@ MAIL_FROM = 'scrapy@localhost'\n MEMDEBUG_ENABLED = False        # enable memory debugging\n MEMDEBUG_NOTIFY = []            # send memory debugging report by mail at engine shutdown\n \n-MEMORYSTORE = 'scrapy.core.scheduler.MemoryStore'\n-\n MEMUSAGE_ENABLED = 1\n MEMUSAGE_LIMIT_MB = 0\n MEMUSAGE_NOTIFY_MAIL = []\n\n\n@@ -15,8 +15,10 @@ class HistoryMiddleware(object):\n     # How often we should process pages that have not changed (need to include depth)\n     MIN_PROCESS_UNCHANGED_DAYS = 12\n \n+    MEMORYSTORE = 'scrapy.contrib_exp.history.memorystore.MemoryStore'\n+\n     def __init__(self):\n-        historycls = load_object(settings['MEMORYSTORE'])\n+        historycls = load_object(self.MEMORYSTORE)\n         if not historycls:\n             raise NotConfigured\n         self.historydata = historycls()\n\n\n@@ -1,3 +1,2 @@\n from scrapy.core.scheduler.schedulers import Scheduler\n-from scrapy.core.scheduler.store import MemoryStore\n from scrapy.core.scheduler.middleware import SchedulerMiddlewareManager\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "scrapy#c3427e075c3bc668a134ff761945fd673ab31e79", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 6 | Lines Deleted: 5 | Files Changed: 2 | Hunks: 4 | Methods Changed: 4 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 11 | Churn Cumulative: 155 | Contributors (this commit): 2 | Commits (past 90d): 9 | Contributors (cumulative): 3 | DMM Complexity: 1.0\n\nDIFF:\n@@ -17,12 +17,12 @@ class StatsMailer(object):\n         self.recipients = settings.getlist(\"STATSMAILER_RCPTS\")\n         if not self.recipients:\n             raise NotConfigured\n-        dispatcher.connect(self.send_stats, signal=signals.stats_domain_closing)\n+        dispatcher.connect(self.stats_domain_closed, signal=signals.stats_domain_closed)\n         \n-    def send_stats(self, domain):\n+    def stats_domain_closed(self, domain, domain_stats):\n         mail = MailSender()\n         body = \"Global stats\\n\\n\"\n         body += \"\\n\".join(\"%-50s : %s\" % i for i in stats.get_stats().items())\n         body += \"\\n\\n%s stats\\n\\n\" % domain\n-        body += \"\\n\".join(\"%-50s : %s\" % i for i in stats.get_stats(domain).items())\n+        body += \"\\n\".join(\"%-50s : %s\" % i for i in domain_stats.items())\n         mail.send(self.recipients, \"Scrapy stats for: %s\" % domain, body)\n\n@@ -51,8 +51,9 @@ class StatsCollector(object):\n         if self._dump:\n             log.msg(\"Dumping stats:\\n\" + pprint.pformat(self.get_stats(domain)), \\\n                 domain=domain)\n-        del self._stats[domain]\n-        signals.send_catch_log(stats_domain_closed, domain=domain, reason=reason)\n+        stats = self._stats.pop(domain)\n+        signals.send_catch_log(stats_domain_closed, domain=domain, reason=reason, \\\n+            domain_stats=stats)\n \n     def engine_stopped(self):\n         if self._dump:\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "scrapy#02c454c26e16159013f15b652264f54b165aad6f", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 5 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 2/2 | Churn Δ: 5 | Churn Cumulative: 7 | Contributors (this commit): 2 | Commits (past 90d): 2 | Contributors (cumulative): 2 | DMM Complexity: 1.0\n\nDIFF:\n@@ -50,6 +50,11 @@ class Item(DictMixin, BaseItem):\n     def __delitem__(self, key):\n         del self._values[key]\n \n+    def __getattr__(self, name):\n+        if name in self.fields:\n+            raise AttributeError(\"Use [%r] to access item field value\" % name)\n+        raise AttributeError(name)\n+\n     def keys(self):\n         return self._values.keys()\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "scrapy#7c049d2ef53d100388da09748dda6235a5759d2f", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 2 | Methods Changed: 2 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 11 | Contributors (this commit): 2 | Commits (past 90d): 3 | Contributors (cumulative): 2 | DMM Complexity: None\n\nDIFF:\n@@ -6,7 +6,7 @@ from scrapy.newitem.fields import BaseField\n \n class _ItemMeta(type):\n \n-    def __new__(meta, class_name, bases, attrs):\n+    def __new__(mcs, class_name, bases, attrs):\n         fields = {}\n         new_attrs = {}\n         for n, v in attrs.iteritems():\n@@ -15,7 +15,7 @@ class _ItemMeta(type):\n             else:\n                 new_attrs[n] = v\n \n-        cls = type.__new__(meta, class_name, bases, new_attrs)\n+        cls = type.__new__(mcs, class_name, bases, new_attrs)\n         cls.fields = cls.fields.copy()\n         cls.fields.update(fields)\n         return cls\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "scrapy#fcb33c79886b7ea97609695b5cab22c071ee1382", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 0 | Lines Deleted: 15 | Files Changed: 1 | Hunks: 1 | Methods Changed: 2 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 15 | Churn Cumulative: 15 | Contributors (this commit): 2 | Commits (past 90d): 2 | Contributors (cumulative): 2 | DMM Complexity: 0.0\n\nDIFF:\n@@ -1,15 +0,0 @@\n-\"\"\"\n-Pipeline to print Items\n-\"\"\"\n-from scrapy import log\n-from scrapy.core.exceptions import NotConfigured\n-from scrapy.conf import settings\n-\n-class ShowItemPipeline(object):\n-    def __init__(self):\n-        if not settings['DEBUG_SHOWITEM']:\n-            raise NotConfigured\n-\n-    def process_item(self, domain, item):\n-        log.msg(\"Scraped: \\n%s\" % repr(item), log.DEBUG, domain=domain)\n-        return item\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "scrapy#d8b85ae7ad19530a1cd8876271dfe5a2829d6b70", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 11 | Lines Deleted: 13 | Files Changed: 3 | Hunks: 10 | Methods Changed: 4 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 24 | Churn Cumulative: 1102 | Contributors (this commit): 3 | Commits (past 90d): 30 | Contributors (cumulative): 8 | DMM Complexity: None\n\nDIFF:\n@@ -18,10 +18,10 @@ class BaseField(object):\n         return self._default\n \n \n-class MultiValuedField(BaseField):\n+class ListField(BaseField):\n     def __init__(self, field_type, default=None):\n         self._field = field_type()\n-        super(MultiValuedField, self).__init__(default)\n+        super(ListField, self).__init__(default)\n \n     def to_python(self, value):\n         if hasattr(value, '__iter__'):\n@@ -33,8 +33,6 @@ class MultiValuedField(BaseField):\n     def from_unicode_list(self, unicode_list):\n         return self.to_python(unicode_list)\n \n-# FIXME: temporary alias required for ItemExporters (to be removed on ListField merge)\n-ListField = MultiValuedField\n \n class BooleanField(BaseField):\n     def to_python(self, value):\n\n@@ -29,12 +29,12 @@ class InheritDefaultAdaptor(DefaultedAdaptor):\n     pass\n \n \n-class MultiValuedTestItem(Item):\n-    names = fields.MultiValuedField(fields.TextField)\n+class ListFieldTestItem(Item):\n+    names = fields.ListField(fields.TextField)\n \n \n-class MultiValuedItemAdaptor(ItemAdaptor):\n-    item_class = MultiValuedTestItem\n+class ListFieldItemAdaptor(ItemAdaptor):\n+    item_class = ListFieldTestItem\n \n     names = adaptor(lambda v: v.title())\n \n@@ -106,7 +106,7 @@ class ItemAdaptorTest(unittest.TestCase):\n #        self.assertEqual(dia.name, u'MART')\n \n     def test_multiplevaluedadaptor(self):\n-        ma = MultiValuedItemAdaptor()\n+        ma = ListFieldItemAdaptor()\n         ma.names = [u'name1', u'name2']\n         assert ma.names == [u'Name1', u'Name2']\n \n\n@@ -38,11 +38,11 @@ class NewItemTest(unittest.TestCase):\n         self.assertRaises(TypeError, TestItem, name=set())\n \n     def test_multi(self):\n-        class TestMultiItem(Item):\n+        class TestListItem(Item):\n             name = fields.TextField()\n-            names = fields.MultiValuedField(fields.TextField)\n+            names = fields.ListField(fields.TextField)\n \n-        i = TestMultiItem()\n+        i = TestListItem()\n         i['name'] = u'name'\n         i['names'] = [u'name1', u'name2']\n         self.assertEqual(i['names'], [u'name1', u'name2'])\n@@ -337,7 +337,7 @@ class NewItemFieldsTest(unittest.TestCase):\n         self.assertEqual(field.from_unicode_list([]), u'')\n         self.assertEqual(field.from_unicode_list([u'hello', u'world']), u'hello world')\n \n-        field = fields.MultiValuedField(fields.TextField)\n+        field = fields.ListField(fields.TextField)\n         self.assertEqual(field.from_unicode_list([]), [])\n         self.assertEqual(field.from_unicode_list([u'hello', u'world']), [u'hello', u'world'])\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "scrapy#cf638e682c9548ea02636cefd7b5be401575a08b", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 7 | Lines Deleted: 7 | Files Changed: 3 | Hunks: 6 | Methods Changed: 6 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 14 | Churn Cumulative: 1116 | Contributors (this commit): 3 | Commits (past 90d): 33 | Contributors (cumulative): 8 | DMM Complexity: None\n\nDIFF:\n@@ -19,13 +19,13 @@ class BaseField(object):\n \n \n class ListField(BaseField):\n-    def __init__(self, field_type, default=None):\n-        self._field = field_type()\n+    def __init__(self, field, default=None):\n+        self.field = field\n         super(ListField, self).__init__(default)\n \n     def to_python(self, value):\n         if hasattr(value, '__iter__'):\n-            return [self._field.to_python(v) for v in value]\n+            return [self.field.to_python(v) for v in value]\n         else:\n             raise TypeError(\"Cannot instatiante %s with %s\" \\\n                              % (self.__class__.__name__, type(value).__name__))\n\n@@ -30,7 +30,7 @@ class InheritDefaultAdaptor(DefaultedAdaptor):\n \n \n class ListFieldTestItem(Item):\n-    names = fields.ListField(fields.TextField)\n+    names = fields.ListField(fields.TextField())\n \n \n class ListFieldItemAdaptor(ItemAdaptor):\n\n@@ -37,10 +37,10 @@ class NewItemTest(unittest.TestCase):\n \n         self.assertRaises(TypeError, TestItem, name=set())\n \n-    def test_multi(self):\n+    def test_list(self):\n         class TestListItem(Item):\n             name = fields.TextField()\n-            names = fields.ListField(fields.TextField)\n+            names = fields.ListField(fields.TextField())\n \n         i = TestListItem()\n         i['name'] = u'name'\n@@ -337,7 +337,7 @@ class NewItemFieldsTest(unittest.TestCase):\n         self.assertEqual(field.from_unicode_list([]), u'')\n         self.assertEqual(field.from_unicode_list([u'hello', u'world']), u'hello world')\n \n-        field = fields.ListField(fields.TextField)\n+        field = fields.ListField(fields.TextField())\n         self.assertEqual(field.from_unicode_list([]), [])\n         self.assertEqual(field.from_unicode_list([u'hello', u'world']), [u'hello', u'world'])\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "scrapy#f05695d75e82f46e67ec2f88e5f8c4d1ee82215a", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 317 | Lines Deleted: 0 | Files Changed: 3 | Hunks: 3 | Methods Changed: 26 | Complexity Δ (Sum/Max): 49/31 | Churn Δ: 317 | Churn Cumulative: 317 | Contributors (this commit): 1 | Commits (past 90d): 3 | Contributors (cumulative): 3 | DMM Complexity: 0.8166666666666667\n\nDIFF:\n@@ -0,0 +1,130 @@\n+from collections import defaultdict\n+\n+from scrapy.utils.misc import arg_to_iter\n+from scrapy.utils.python import get_func_args\n+\n+\n+class BuilderField(object):\n+\n+    def __init__(self, *args, **kwargs):\n+        self.expander = self.tree_expander(*args)\n+        self.reducer = kwargs.get('reducer')\n+\n+    def tree_expander(self, *funcs, **default_expander_args):\n+        \"\"\"A pipe expander implementing tree logic\n+\n+        It takes multiples unnamed arguments used as functions of the pipe, and\n+        keywords used as expander_args to be passed to functions that supports it\n+\n+        If an expander function returns a list of values, each value is used as\n+        input for next expander function\n+\n+        Always returns a list of values\n+        \"\"\"\n+\n+        _funcs = []\n+        for func in funcs:\n+            accepts_args = 'expander_args' in get_func_args(func)\n+            _funcs.append((func, accepts_args))\n+\n+        def _expander(value, expander_args=None):\n+            values = arg_to_iter(value)\n+            aargs = default_expander_args\n+            if expander_args:\n+                aargs = aargs.copy()\n+                aargs.update(expander_args)\n+            pipe_kwargs = {'expander_args': aargs}\n+            for func, accepts_args in _funcs:\n+                next = []\n+                kwargs = pipe_kwargs if accepts_args else {}\n+                for val in values:\n+                    val = func(val, **kwargs)\n+                    if hasattr(val, '__iter__'):\n+                        next.extend(val)\n+                    elif val is not None:\n+                        next.append(val)\n+                values = next\n+            return list(values)\n+\n+        return _expander\n+\n+\n+class ItemBuilderMeta(type):\n+    def __new__(mcs, class_name, bases, attrs):\n+        cls = type.__new__(mcs, class_name, bases, attrs)\n+        cls._builder_fields = cls._builder_fields.copy()\n+    \n+        if cls.item_class:\n+            for name, field in cls.item_class.fields.iteritems():\n+                bfield = None\n+                if name in attrs:\n+                    bfield = attrs[name] \n+                else:\n+                    if name not in cls._builder_fields and cls.default_builder:\n+                        bfield = cls.default_builder\n+                        #actually add the field to the class\n+                        setattr(cls, name, bfield)\n+                if bfield:\n+                    cls._builder_fields.add(name)\n+        return cls\n+\n+\n+class ItemBuilder(object):\n+    __metaclass__ = ItemBuilderMeta\n+\n+    item_class = None\n+    default_builder = None\n+\n+    _builder_fields = set()\n+\n+    def __init__(self, response=None, item=None, **expander_args):\n+        self._response = response\n+        self._item = item if item else self.item_class()\n+\n+        self._expander_args = {'response': self._response}\n+        if expander_args:\n+            self._expander_args.update(expander_args)\n+\n+        self._values = defaultdict(list)\n+\n+    def add_value(self, field_name, value, **new_expander_args):\n+        field = self._get_builder_field(field_name)\n+        evalue = self._expand_value(field, value, **new_expander_args)\n+        self._values[field_name].extend(evalue)\n+\n+    def get_item(self):\n+        item = self._item\n+        for field in self._values:\n+            item[field] = self.get_value(field)\n+        return item\n+\n+    def get_value(self, field_name):\n+        field = self._get_builder_field(field_name)\n+        reducer = field.reducer or self._item.fields[field_name].from_unicode_list \n+        return reducer(self._values[field_name])\n+\n+    def replace_value(self, field_name, value, **new_expander_args):\n+        field = self._get_builder_field(field_name)\n+        evalue = self._expand_value(field, value, **new_expander_args)\n+        self._values[field_name] = evalue\n+\n+    def _get_builder_field(self, name):\n+        if name not in self._builder_fields:\n+            raise KeyError\n+\n+        return getattr(self, name)\n+\n+    def _expand_value(self, field, value, **new_expander_args):\n+        if new_expander_args:\n+            expander_args = self._expander_args.copy()\n+            expander_args.update(new_expander_args)\n+        else:\n+            expander_args = self._expander_args\n+\n+        evalue = field.expander(value, expander_args=expander_args)\n+\n+        if not isinstance(evalue, list):\n+            evalue = [evalue]\n+\n+        return evalue\n+\n\n@@ -0,0 +1,13 @@\n+def take_first(values):\n+    for value in values:\n+        if value is not u'':\n+            return value\n+\n+\n+def return_values(values):\n+    return values\n+\n+\n+def join_strings(values):\n+    return u' '.join(values)\n+\n\n@@ -0,0 +1,174 @@\n+import unittest\n+import string\n+from scrapy.newitem.builder import ItemBuilder, BuilderField\n+from scrapy.newitem.builder import reducers\n+from scrapy.newitem import Item, fields\n+\n+\n+class BaseItem(Item):\n+    name = fields.TextField()\n+\n+\n+class TestItem(BaseItem):\n+    url = fields.TextField()\n+    summary = fields.TextField()\n+\n+\n+class BaseItemBuilder(ItemBuilder):\n+    item_class = TestItem\n+\n+\n+class TestItemBuilder(BaseItemBuilder):\n+    name = BuilderField(lambda v: v.title())\n+\n+\n+class DefaultedItemBuilder(BaseItemBuilder):\n+    default_builder = BuilderField(lambda v: v[:-1])\n+    \n+\n+class InheritDefaultedItemBuilder(DefaultedItemBuilder):\n+    pass\n+\n+\n+class ListFieldTestItem(Item):\n+    names = fields.ListField(fields.TextField())\n+\n+\n+class ListFieldItemBuilder(ItemBuilder):\n+    item_class = ListFieldTestItem\n+\n+    names = BuilderField(lambda v: v.title())\n+\n+\n+class ItemBuilderTest(unittest.TestCase):\n+\n+    def test_basic(self):\n+        ib = TestItemBuilder()\n+\n+        ib.add_value('name', u'marta')\n+        self.assertEqual(ib.get_value('name'), u'Marta')\n+\n+        item = ib.get_item()\n+        self.assertEqual(item['name'], u'Marta')\n+\n+    def test_multiple_functions(self):\n+        class TestItemBuilder(BaseItemBuilder):\n+            name = BuilderField(lambda v: v.title(), lambda v: v[:-1])\n+\n+        ib = TestItemBuilder()\n+        \n+        ib.add_value('name', u'marta')\n+        self.assertEqual(ib.get_value('name'), u'Mart')\n+\n+        item = ib.get_item()\n+        self.assertEqual(item['name'], u'Mart')\n+\n+    def test_defaulted(self):\n+        dib = DefaultedItemBuilder()\n+        assert dib.default_builder\n+\n+        dib.add_value('name', u'marta')\n+        self.assertEqual(dib.get_value('name'), u'mart')\n+\n+    def test_inherited_default(self):\n+        dib = InheritDefaultedItemBuilder()\n+        assert dib.default_builder\n+\n+        dib.add_value('name', u'marta')\n+        self.assertEqual(dib.get_value('name'), u'mart')\n+\n+    def test_inheritance(self):\n+        class ChildItemBuilder(TestItemBuilder):\n+            url = BuilderField(lambda v: v.lower())\n+\n+        ib = ChildItemBuilder()\n+        assert 'url' in ib._builder_fields\n+        assert 'name' in ib._builder_fields\n+\n+        ib.add_value('url', u'HTTP://scrapy.ORG')\n+        self.assertEqual(ib.get_value('url'), u'http://scrapy.org')\n+\n+        ib.add_value('name', u'marta')\n+        self.assertEqual(ib.get_value('name'), u'Marta')\n+\n+        class ChildChildItemBuilder(ChildItemBuilder):\n+            url = BuilderField(lambda v: v.upper())\n+            summary = BuilderField(lambda v: v)\n+\n+        ib = ChildChildItemBuilder()\n+        assert 'url' in ib._builder_fields\n+        assert 'name' in ib._builder_fields\n+        assert 'summary' in ib._builder_fields\n+\n+        ib.add_value('url', u'http://scrapy.org')\n+        self.assertEqual(ib.get_value('url'), u'HTTP://SCRAPY.ORG')\n+\n+        ib.add_value('name', u'marta')\n+        self.assertEqual(ib.get_value('name'), u'Marta')\n+\n+    def test_multiplevaluedadaptor(self):\n+        ib = ListFieldItemBuilder()\n+\n+        ib.add_value('names',  [u'name1', u'name2'])\n+        self.assertEqual(ib.get_value('names'), [u'Name1', u'Name2'])\n+\n+    def test_identity(self):\n+        class IdentityDefaultedItemBuilder(DefaultedItemBuilder):\n+            name = BuilderField()\n+\n+        ib = IdentityDefaultedItemBuilder()\n+\n+        ib.add_value('name', u'marta')\n+        self.assertEqual(ib.get_value('name'), u'marta')\n+\n+    def test_staticmethods(self):\n+        class ChildItemBuilder(TestItemBuilder):\n+            name = BuilderField(TestItemBuilder.name.expander, string.swapcase)\n+\n+        ib = ChildItemBuilder()\n+\n+        ib.add_value('name', u'marta')\n+        self.assertEqual(ib.get_value('name'), u'mARTA')\n+\n+\n+    def test_staticdefaults(self):\n+        class ChildDefaultedItemBuilder(DefaultedItemBuilder):\n+            name = BuilderField(DefaultedItemBuilder.name.expander, string.swapcase)\n+\n+        ib = ChildDefaultedItemBuilder()\n+\n+        ib.add_value('name', u'marta')\n+        self.assertEqual(ib.get_value('name'), u'MART')\n+\n+    def test_reducer(self):\n+        ib = TestItemBuilder()\n+\n+        ib.add_value('name', [u'mar', u'ta'])\n+        self.assertEqual(ib.get_value('name'), u'Mar Ta')\n+\n+        class TakeFirstItemBuilder(TestItemBuilder):\n+            name = BuilderField(TestItemBuilder.name.expander,\n+                                reducer=reducers.take_first)\n+\n+        ib = TakeFirstItemBuilder()\n+\n+        ib.add_value('name', [u'mar', u'ta'])\n+        self.assertEqual(ib.get_value('name'), u'Mar')\n+\n+    def test_expander_args(self):\n+        def expander_with_args(value, expander_args=None):\n+            if 'val' in expander_args:\n+                return expander_args['val']\n+            return value\n+\n+        class ChildItemBuilder(TestItemBuilder):\n+            url = BuilderField(expander_with_args)\n+\n+        ib = ChildItemBuilder(val=u'val')\n+        ib.add_value('url', u'text')\n+        self.assertEqual(ib.get_value('url'), 'val')\n+\n+        ib = ChildItemBuilder()\n+        ib.add_value('url', u'text', val=u'val')\n+        self.assertEqual(ib.get_value('url'), 'val')\n+\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "scrapy#114dba2850e90012b26c8b70a3bd1ef7c34b5645", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 3 | Lines Deleted: 4 | Files Changed: 1 | Hunks: 2 | Methods Changed: 2 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 7 | Churn Cumulative: 121 | Contributors (this commit): 1 | Commits (past 90d): 2 | Contributors (cumulative): 1 | DMM Complexity: 0.0\n\nDIFF:\n@@ -50,11 +50,10 @@ def tree_expander(*functions, **default_loader_args):\n         largs = default_loader_args\n         if loader_args:\n             largs = MergeDict(loader_args, default_loader_args)\n-        for func2 in wrapped_funcs:\n+        for func in wrapped_funcs:\n             next_values = []\n-            for val in values:\n-                val = func2(loader, val, largs)\n-                next_values.extend(arg_to_iter(val))\n+            for v in values:\n+                next_values += arg_to_iter(func(loader, v, largs))\n             values = next_values\n         return list(values)\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "scrapy#ac9f4c9cc2802108c9868ae5999a83711b421db6", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 117 | Lines Deleted: 998 | Files Changed: 10 | Hunks: 42 | Methods Changed: 88 | Complexity Δ (Sum/Max): -107/19 | Churn Δ: 1115 | Churn Cumulative: 2839 | Contributors (this commit): 3 | Commits (past 90d): 50 | Contributors (cumulative): 19 | DMM Complexity: 0.21124031007751937\n\nDIFF:\n@@ -1 +1,77 @@\n-from scrapy.newitem.models import Item\n+from UserDict import DictMixin\n+\n+from scrapy.item.models import BaseItem\n+\n+class Field(dict):\n+    pass\n+\n+class _ItemMeta(type):\n+\n+    def __new__(mcs, class_name, bases, attrs):\n+        fields = {}\n+        new_attrs = {}\n+        for n, v in attrs.iteritems():\n+            if isinstance(v, Field):\n+                fields[n] = v\n+            else:\n+                new_attrs[n] = v\n+\n+        cls = type.__new__(mcs, class_name, bases, new_attrs)\n+        cls.fields = cls.fields.copy()\n+        cls.fields.update(fields)\n+        return cls\n+\n+\n+class Item(DictMixin, BaseItem):\n+\n+    __metaclass__ = _ItemMeta\n+\n+    fields = {}\n+\n+    def __init__(self, *args, **kwargs):\n+        self._values = {}\n+\n+        if args or kwargs: # don't instantiate dict for simple (most common) case\n+            for k, v in dict(*args, **kwargs).iteritems():\n+                self[k] = v\n+\n+    def __getitem__(self, key):\n+        try:\n+            return self._values[key]\n+        except KeyError:\n+            field = self.fields[key]\n+            default_factory = field.get('default_factory')\n+            if default_factory:\n+                return default_factory()\n+            else:\n+                raise KeyError(key)\n+\n+    def __setitem__(self, key, value):\n+        if key in self.fields:\n+            self._values[key] = value\n+        else:\n+            raise KeyError(\"%s does not support field: %s\" % \\\n+                (self.__class__.__name__, key))\n+\n+    def __delitem__(self, key):\n+        del self._values[key]\n+\n+    def __getattr__(self, name):\n+        if name in self.fields:\n+            raise AttributeError(\"Use [%r] to access item field value\" % name)\n+        raise AttributeError(name)\n+\n+    def keys(self):\n+        return self._values.keys()\n+\n+    def __repr__(self):\n+        \"\"\"Generate a representation of this item that can be used to\n+        reconstruct the item by evaluating it\n+        \"\"\"\n+        values = ', '.join('%s=%r' % field for field in self.iteritems())\n+        return \"%s(%s)\" % (self.__class__.__name__, values)\n+\n+    def get_id(self):\n+        \"\"\"Returns the unique id for this item.\"\"\"\n+        raise NotImplementedError\n+\n\n@@ -1,130 +0,0 @@\n-from collections import defaultdict\n-\n-from scrapy.utils.misc import arg_to_iter\n-from scrapy.utils.python import get_func_args\n-\n-\n-class BuilderField(object):\n-\n-    def __init__(self, *args, **kwargs):\n-        self.expander = self.tree_expander(*args)\n-        self.reducer = kwargs.get('reducer')\n-\n-    def tree_expander(self, *funcs, **default_expander_args):\n-        \"\"\"A pipe expander implementing tree logic\n-\n-        It takes multiples unnamed arguments used as functions of the pipe, and\n-        keywords used as expander_args to be passed to functions that supports it\n-\n-        If an expander function returns a list of values, each value is used as\n-        input for next expander function\n-\n-        Always returns a list of values\n-        \"\"\"\n-\n-        _funcs = []\n-        for func in funcs:\n-            accepts_args = 'expander_args' in get_func_args(func)\n-            _funcs.append((func, accepts_args))\n-\n-        def _expander(value, expander_args=None):\n-            values = arg_to_iter(value)\n-            aargs = default_expander_args\n-            if expander_args:\n-                aargs = aargs.copy()\n-                aargs.update(expander_args)\n-            pipe_kwargs = {'expander_args': aargs}\n-            for func, accepts_args in _funcs:\n-                next = []\n-                kwargs = pipe_kwargs if accepts_args else {}\n-                for val in values:\n-                    val = func(val, **kwargs)\n-                    if hasattr(val, '__iter__'):\n-                        next.extend(val)\n-                    elif val is not None:\n-                        next.append(val)\n-                values = next\n-            return list(values)\n-\n-        return _expander\n-\n-\n-class ItemBuilderMeta(type):\n-    def __new__(mcs, class_name, bases, attrs):\n-        cls = type.__new__(mcs, class_name, bases, attrs)\n-        cls._builder_fields = cls._builder_fields.copy()\n-    \n-        if cls.item_class:\n-            for name, field in cls.item_class.fields.iteritems():\n-                bfield = None\n-                if name in attrs:\n-                    bfield = attrs[name] \n-                else:\n-                    if name not in cls._builder_fields and cls.default_builder:\n-                        bfield = cls.default_builder\n-                        #actually add the field to the class\n-                        setattr(cls, name, bfield)\n-                if bfield:\n-                    cls._builder_fields.add(name)\n-        return cls\n-\n-\n-class ItemBuilder(object):\n-    __metaclass__ = ItemBuilderMeta\n-\n-    item_class = None\n-    default_builder = None\n-\n-    _builder_fields = set()\n-\n-    def __init__(self, response=None, item=None, **expander_args):\n-        self._response = response\n-        self._item = item if item else self.item_class()\n-\n-        self._expander_args = {'response': self._response}\n-        if expander_args:\n-            self._expander_args.update(expander_args)\n-\n-        self._values = defaultdict(list)\n-\n-    def add_value(self, field_name, value, **new_expander_args):\n-        field = self._get_builder_field(field_name)\n-        evalue = self._expand_value(field, value, **new_expander_args)\n-        self._values[field_name].extend(evalue)\n-\n-    def get_item(self):\n-        item = self._item\n-        for field in self._values:\n-            item[field] = self.get_value(field)\n-        return item\n-\n-    def get_value(self, field_name):\n-        field = self._get_builder_field(field_name)\n-        reducer = field.reducer or self._item.fields[field_name].from_unicode_list \n-        return reducer(self._values[field_name])\n-\n-    def replace_value(self, field_name, value, **new_expander_args):\n-        field = self._get_builder_field(field_name)\n-        evalue = self._expand_value(field, value, **new_expander_args)\n-        self._values[field_name] = evalue\n-\n-    def _get_builder_field(self, name):\n-        if name not in self._builder_fields:\n-            raise KeyError\n-\n-        return getattr(self, name)\n-\n-    def _expand_value(self, field, value, **new_expander_args):\n-        if new_expander_args:\n-            expander_args = self._expander_args.copy()\n-            expander_args.update(new_expander_args)\n-        else:\n-            expander_args = self._expander_args\n-\n-        evalue = field.expander(value, expander_args=expander_args)\n-\n-        if not isinstance(evalue, list):\n-            evalue = [evalue]\n-\n-        return evalue\n-\n\n@@ -1,168 +0,0 @@\n-import datetime\n-import decimal\n-import re\n-import time\n-\n-\n-class BaseField(object):\n-    def __init__(self, default=None):\n-        self._default = self.to_python(default) if default is not None else None\n-\n-    def to_python(self, value):\n-        raise NotImplementedError()\n-\n-    def from_unicode_list(self, unicode_list):\n-        return self.to_python(unicode_list[0]) if unicode_list else None\n-\n-    def get_default(self):\n-        return self._default\n-\n-\n-class ListField(BaseField):\n-    def __init__(self, field, default=None):\n-        self.field = field\n-        super(ListField, self).__init__(default)\n-\n-    def to_python(self, value):\n-        if hasattr(value, '__iter__'):\n-            return [self.field.to_python(v) for v in value]\n-        else:\n-            raise TypeError(\"Cannot instatiante %s with %s\" \\\n-                             % (self.__class__.__name__, type(value).__name__))\n-\n-    def from_unicode_list(self, unicode_list):\n-        return self.to_python(unicode_list)\n-\n-\n-class BooleanField(BaseField):\n-    def to_python(self, value):\n-        return bool(value)\n-\n-    def from_unicode_list(self, unicode_list):\n-        return self.to_python(unicode_list)\n-\n-\n-class DateField(BaseField):\n-    ansi_date_re = re.compile(r'^\\d{4}-\\d{1,2}-\\d{1,2}$')\n-\n-    def to_python(self, value):\n-        if isinstance(value, datetime.datetime):\n-            return value.date()\n-        elif isinstance(value, datetime.date):\n-            return value\n-        elif isinstance(value, basestring):\n-            if not self.ansi_date_re.search(value):\n-                raise ValueError(\"Enter a valid date in YYYY-MM-DD format.\")\n-\n-            year, month, day = map(int, value.split('-'))\n-            try:\n-                return datetime.date(year, month, day)\n-            except ValueError, e:\n-                raise ValueError(\"Invalid date: %s\" % str(e))\n-        else:\n-            raise TypeError(\"Cannot instatiante %s with %s\" \\\n-                             % (self.__class__.__name__, type(value).__name__))\n-\n-\n-class DateTimeField(BaseField):\n-    def to_python(self, value):\n-        if isinstance(value, datetime.datetime):\n-            return value\n-        elif isinstance(value, datetime.date):\n-            return datetime.datetime(value.year, value.month, value.day)\n-        elif isinstance(value, basestring):\n-            # Attempt to parse a datetime:\n-            value = str(value)\n-            # split usecs, because they are not recognized by strptime.\n-            if '.' in value:\n-                try:\n-                    value, usecs = value.split('.')\n-                    usecs = int(usecs)\n-                except ValueError:\n-                    raise ValueError('Enter a valid date/time in YYYY-MM-DD HH:MM[:ss[.uuuuuu]] format.')\n-            else:\n-                usecs = 0\n-            kwargs = {'microsecond': usecs}\n-            try: # Seconds are optional, so try converting seconds first.\n-                return datetime.datetime(*time.strptime(value, '%Y-%m-%d %H:%M:%S')[:6],\n-                                         **kwargs)\n-\n-            except ValueError:\n-                try: # Try without seconds.\n-                    return datetime.datetime(*time.strptime(value, '%Y-%m-%d %H:%M')[:5],\n-                                             **kwargs)\n-                except ValueError: # Try without hour/minutes/seconds.\n-                    try:\n-                        return datetime.datetime(*time.strptime(value, '%Y-%m-%d')[:3],\n-                                                 **kwargs)\n-                    except ValueError:\n-                        raise ValueError('Enter a valid date/time in YYYY-MM-DD HH:MM[:ss[.uuuuuu]] format.')\n-        else:\n-            raise TypeError(\"Cannot instatiante %s with %s\" \\\n-                             % (self.__class__.__name__, type(value).__name__))\n-\n-\n-\n-class DecimalField(BaseField):\n-    def to_python(self, value):\n-        return decimal.Decimal(value)\n-\n-\n-class FloatField(BaseField):\n-    def to_python(self, value):\n-        return float(value)\n-\n-\n-class IntegerField(BaseField):\n-    def to_python(self, value):\n-        return int(value)\n-\n-\n-class TextField(BaseField):\n-    def to_python(self, value):\n-        if isinstance(value, unicode):\n-            return value\n-        elif isinstance(value, (long, float)):\n-            return unicode(value)\n-        # Note: True and False are instances of int!\n-        elif isinstance(value, int) and not isinstance(value, bool): \n-            return unicode(value)\n-        else:\n-            raise TypeError(\"%s values cannot be created from '%s' objects\" % \\\n-                (self.__class__.__name__, value.__class__.__name__))\n-\n-    def from_unicode_list(self, unicode_list):\n-        return u' '.join((self.to_python(x) for x in unicode_list))\n-\n-class TimeField(BaseField):\n-    def to_python(self, value):\n-        if isinstance(value, datetime.time):\n-            return value\n-        if isinstance(value, datetime.datetime):\n-            return value.time\n-        elif isinstance(value, basestring):\n-            # Attempt to parse a datetime:\n-            value = str(value)\n-            # split usecs, because they are not recognized by strptime.\n-            if '.' in value:\n-                try:\n-                    value, usecs = value.split('.')\n-                    usecs = int(usecs)\n-                except ValueError:\n-                    raise ValueError('Enter a valid time in HH:MM[:ss[.uuuuuu]] format.')\n-            else:\n-                usecs = 0\n-            kwargs = {'microsecond': usecs}\n-\n-            try: # Seconds are optional, so try converting seconds first.\n-                return datetime.time(*time.strptime(value, '%H:%M:%S')[3:6],\n-                                     **kwargs)\n-            except ValueError:\n-                try: # Try without seconds.\n-                    return datetime.time(*time.strptime(value, '%H:%M')[3:5],\n-                                             **kwargs)\n-                except ValueError:\n-                    raise ValueError('Enter a valid time in HH:MM[:ss[.uuuuuu]] format.')\n-        else:\n-            raise TypeError(\"Cannot instatiante %s with %s\" \\\n-                             % (self.__class__.__name__, type(value).__name__))\n\n@@ -4,8 +4,8 @@ from types import UnboundMethodType\n from scrapy.utils.misc import arg_to_iter\n from scrapy.utils.python import get_func_args\n from scrapy.utils.datatypes import MergeDict\n-\n-from scrapy.newitem.models import Item\n+from scrapy.newitem import Item\n+from scrapy.newitem.reducers import take_first\n \n def tree_expander(*functions, **default_loader_args):\n     \"\"\"Create an ItemLoader expander from a list of functions using the tree\n@@ -86,16 +86,14 @@ class ItemLoader(object):\n \n     def get_value(self, field_name):\n         values = self._values[field_name]\n-        field = self._item.fields[field_name]\n         reducer = self.get_reducer(field_name)\n-        # XXX: calling different methods based on reducer is ugly\n-        if reducer:\n-            return field.to_python(reducer(values))\n-        else:\n-            return field.from_unicode_list(values)\n+        return reducer(values)\n \n     def get_reducer(self, field_name):\n-        return getattr(self, 'reduce_%s' % field_name, None)\n+        try:\n+            return getattr(self, 'reduce_%s' % field_name)\n+        except AttributeError:\n+            return self._item.fields[field_name].get('reducer', self.reduce)\n \n     def get_expander(self, field_name):\n         return getattr(self, 'expand_%s' % field_name, self.expand)\n@@ -111,3 +109,6 @@ class ItemLoader(object):\n \n     def expand(self, value, loader_args): # default expander\n         return value\n+\n+    def reduce(self, values):\n+        return take_first(values)\n\n@@ -1,71 +0,0 @@\n-from UserDict import DictMixin\n-\n-from scrapy.item.models import BaseItem\n-from scrapy.newitem.fields import BaseField\n-\n-\n-class _ItemMeta(type):\n-\n-    def __new__(mcs, class_name, bases, attrs):\n-        fields = {}\n-        new_attrs = {}\n-        for n, v in attrs.iteritems():\n-            if isinstance(v, BaseField):\n-                fields[n] = v\n-            else:\n-                new_attrs[n] = v\n-\n-        cls = type.__new__(mcs, class_name, bases, new_attrs)\n-        cls.fields = cls.fields.copy()\n-        cls.fields.update(fields)\n-        return cls\n-\n-\n-class Item(DictMixin, BaseItem):\n-\n-    __metaclass__ = _ItemMeta\n-\n-    fields = {}\n-\n-    def __init__(self, *args, **kwargs):\n-        self._values = {}\n-\n-        if args or kwargs: # don't instantiate dict for simple (most common) case\n-            for k, v in dict(*args, **kwargs).iteritems():\n-                self[k] = v\n-\n-    def __getitem__(self, key):\n-        try:\n-            return self._values[key]\n-        except KeyError:\n-            default = self.fields[key].get_default()\n-            if default is not None:\n-                return default\n-            else:\n-                raise KeyError(key)\n-\n-    def __setitem__(self, key, value):\n-        self._values[key] = self.fields[key].to_python(value)\n-\n-    def __delitem__(self, key):\n-        del self._values[key]\n-\n-    def __getattr__(self, name):\n-        if name in self.fields:\n-            raise AttributeError(\"Use [%r] to access item field value\" % name)\n-        raise AttributeError(name)\n-\n-    def keys(self):\n-        return self._values.keys()\n-\n-    def __repr__(self):\n-        \"\"\"Generate a representation of this item that can be used to\n-        reconstruct the item by evaluating it\n-        \"\"\"\n-        values = ', '.join('%s=%r' % field for field in self.iteritems())\n-        return \"%s(%s)\" % (self.__class__.__name__, values)\n-\n-    def get_id(self):\n-        \"\"\"Returns the unique id for this item.\"\"\"\n-        raise NotImplementedError\n-\n\n@@ -1,13 +1,12 @@\n+\"\"\"Some common reducers\"\"\"\n+\n def take_first(values):\n     for value in values:\n-        if value is not u'':\n+        if value:\n             return value\n \n-\n-def return_values(values):\n+def identity(values):\n     return values\n \n-\n def join_strings(values):\n     return u' '.join(values)\n-\n\n@@ -1,150 +0,0 @@\n-import unittest\n-import string\n-from scrapy.contrib_exp.newitem.adaptors import adaptor, ItemAdaptor\n-from scrapy.newitem import Item, fields\n-\n-\n-class BaseItem(Item):\n-    name = fields.TextField()\n-\n-\n-class TestItem(BaseItem):\n-    url = fields.TextField()\n-    summary = fields.TextField()\n-\n-\n-class BaseAdaptor(ItemAdaptor):\n-    item_class = TestItem\n-\n-\n-class TestAdaptor(BaseAdaptor):\n-    name = lambda v: v.title()\n-\n-\n-class DefaultedAdaptor(BaseAdaptor):\n-    default_adaptor = lambda v: v[:-1]\n-\n-\n-class InheritDefaultAdaptor(DefaultedAdaptor):\n-    pass\n-\n-\n-class ListFieldTestItem(Item):\n-    names = fields.ListField(fields.TextField())\n-\n-\n-class ListFieldItemAdaptor(ItemAdaptor):\n-    item_class = ListFieldTestItem\n-\n-    names = adaptor(lambda v: v.title())\n-\n-\n-class ItemAdaptorTest(unittest.TestCase):\n-\n-    def test_basic(self):\n-        ia = TestAdaptor()\n-        ia.name = u'marta'\n-        self.assertEqual(ia.item_instance['name'], u'Marta')\n-        self.assertEqual(ia.name, u'Marta')\n-\n-    def test_defaultadaptor(self):\n-        dta = DefaultedAdaptor()\n-        assert dta.default_adaptor\n-        dta.name = u'marta'\n-        self.assertEqual(dta.name, u'mart')\n-\n-    def test_inheritdefaultadaptor(self):\n-        ida = InheritDefaultAdaptor()\n-        ida.name = u'marta'\n-        assert ida.name == u'mart'\n-\n-    def test_inheritance(self):\n-        class ChildTestAdaptor(TestAdaptor):\n-            url = lambda v: v.lower()\n-\n-        ia = ChildTestAdaptor()\n-        assert 'url' in ia._field_adaptors\n-        assert 'name' in ia._field_adaptors\n-\n-        ia.url = u'HTTP://scrapy.ORG'\n-        self.assertEqual(ia.url, u'http://scrapy.org')\n-\n-        ia.name = u'marta'\n-        self.assertEqual(ia.name, u'Marta')\n-\n-        class ChildChildTestAdaptor(ChildTestAdaptor):\n-            url = lambda v: v.upper()\n-            summary = lambda v: v\n-\n-        ia = ChildChildTestAdaptor()\n-        assert 'url' in ia._field_adaptors\n-        assert 'name' in ia._field_adaptors\n-        assert 'summary' in ia._field_adaptors\n-\n-        ia.url = u'HTTP://scrapy.ORG'\n-        self.assertEqual(ia.url, u'HTTP://SCRAPY.ORG')\n-\n-        ia.name = u'marta'\n-        self.assertEqual(ia.name, u'Marta')\n-\n-# FIXME: deprecated tests - will be replaced by ItemBuilder tests\n-#\n-#    def test_staticmethods(self):\n-#        class ChildAdaptor(TestAdaptor):\n-#            name = adaptor(TestAdaptor.name, string.swapcase)\n-#\n-#        ia = ChildAdaptor()\n-#        ia.name = u'Marta'\n-#        self.assertEqual(ia.name, u'mARTA')\n-#\n-#    def test_staticdefaults(self):\n-#        class ChildAdaptorDefaulted(DefaultedAdaptor):\n-#            name = adaptor(DefaultedAdaptor.name, string.swapcase)\n-#\n-#        dia = ChildAdaptorDefaulted()\n-#        dia.name = u'marta'\n-#        self.assertEqual(dia.name, u'MART')\n-\n-    def test_multiplevaluedadaptor(self):\n-        ma = ListFieldItemAdaptor()\n-        ma.names = [u'name1', u'name2']\n-        assert ma.names == [u'Name1', u'Name2']\n-\n-\n-class TreeadaptTest(unittest.TestCase):\n-\n-    def test_1_passtrough(self):\n-        ad = adaptor()\n-        self.assertEqual(ad('string'), ['string'])\n-\n-    def test_2_composing(self):\n-        addone = lambda v: v+1\n-        ad = adaptor(addone)\n-        self.assertEqual(ad(0), [1])\n-\n-        addtwo = lambda v: v+2\n-        ad2 = adaptor(addone, addtwo)\n-        self.assertEqual(ad2(0), [3])\n-\n-        ad3 = adaptor(ad, ad2)\n-        self.assertEqual(ad3(0), [4])\n-\n-    def test_3_adaptor_args(self):\n-        addn = lambda v, adaptor_args: v + adaptor_args.get('add_value', 0)\n-\n-        ad = adaptor(addn)\n-        self.assertEqual(ad(0), [0])\n-        self.assertEqual(ad(0, {'add_value': 3}), [3])\n-        self.assertEqual(ad(0), [0])\n-\n-        ad = adaptor(addn, add_value=5)\n-        self.assertEqual(ad(0), [5])\n-        self.assertEqual(ad(0, {'add_value': 3}), [3])\n-        self.assertEqual(ad(0), [5])\n-\n-    def test_4_treelogic(self):\n-        split1 = lambda v: v.split('&')\n-        split2 = lambda v: v.split('=')\n-        ad = adaptor(split1, split2)\n-        self.assertEqual(ad('name=joe&job=joker'), ['name', 'joe', 'job', 'joker'])\n-\n\n@@ -1,174 +0,0 @@\n-import unittest\n-import string\n-from scrapy.newitem.builder import ItemBuilder, BuilderField\n-from scrapy.newitem.builder import reducers\n-from scrapy.newitem import Item, fields\n-\n-\n-class BaseItem(Item):\n-    name = fields.TextField()\n-\n-\n-class TestItem(BaseItem):\n-    url = fields.TextField()\n-    summary = fields.TextField()\n-\n-\n-class BaseItemBuilder(ItemBuilder):\n-    item_class = TestItem\n-\n-\n-class TestItemBuilder(BaseItemBuilder):\n-    name = BuilderField(lambda v: v.title())\n-\n-\n-class DefaultedItemBuilder(BaseItemBuilder):\n-    default_builder = BuilderField(lambda v: v[:-1])\n-    \n-\n-class InheritDefaultedItemBuilder(DefaultedItemBuilder):\n-    pass\n-\n-\n-class ListFieldTestItem(Item):\n-    names = fields.ListField(fields.TextField())\n-\n-\n-class ListFieldItemBuilder(ItemBuilder):\n-    item_class = ListFieldTestItem\n-\n-    names = BuilderField(lambda v: v.title())\n-\n-\n-class ItemBuilderTest(unittest.TestCase):\n-\n-    def test_basic(self):\n-        ib = TestItemBuilder()\n-\n-        ib.add_value('name', u'marta')\n-        self.assertEqual(ib.get_value('name'), u'Marta')\n-\n-        item = ib.get_item()\n-        self.assertEqual(item['name'], u'Marta')\n-\n-    def test_multiple_functions(self):\n-        class TestItemBuilder(BaseItemBuilder):\n-            name = BuilderField(lambda v: v.title(), lambda v: v[:-1])\n-\n-        ib = TestItemBuilder()\n-        \n-        ib.add_value('name', u'marta')\n-        self.assertEqual(ib.get_value('name'), u'Mart')\n-\n-        item = ib.get_item()\n-        self.assertEqual(item['name'], u'Mart')\n-\n-    def test_defaulted(self):\n-        dib = DefaultedItemBuilder()\n-        assert dib.default_builder\n-\n-        dib.add_value('name', u'marta')\n-        self.assertEqual(dib.get_value('name'), u'mart')\n-\n-    def test_inherited_default(self):\n-        dib = InheritDefaultedItemBuilder()\n-        assert dib.default_builder\n-\n-        dib.add_value('name', u'marta')\n-        self.assertEqual(dib.get_value('name'), u'mart')\n-\n-    def test_inheritance(self):\n-        class ChildItemBuilder(TestItemBuilder):\n-            url = BuilderField(lambda v: v.lower())\n-\n-        ib = ChildItemBuilder()\n-        assert 'url' in ib._builder_fields\n-        assert 'name' in ib._builder_fields\n-\n-        ib.add_value('url', u'HTTP://scrapy.ORG')\n-        self.assertEqual(ib.get_value('url'), u'http://scrapy.org')\n-\n-        ib.add_value('name', u'marta')\n-        self.assertEqual(ib.get_value('name'), u'Marta')\n-\n-        class ChildChildItemBuilder(ChildItemBuilder):\n-            url = BuilderField(lambda v: v.upper())\n-            summary = BuilderField(lambda v: v)\n-\n-        ib = ChildChildItemBuilder()\n-        assert 'url' in ib._builder_fields\n-        assert 'name' in ib._builder_fields\n-        assert 'summary' in ib._builder_fields\n-\n-        ib.add_value('url', u'http://scrapy.org')\n-        self.assertEqual(ib.get_value('url'), u'HTTP://SCRAPY.ORG')\n-\n-        ib.add_value('name', u'marta')\n-        self.assertEqual(ib.get_value('name'), u'Marta')\n-\n-    def test_multiplevaluedadaptor(self):\n-        ib = ListFieldItemBuilder()\n-\n-        ib.add_value('names',  [u'name1', u'name2'])\n-        self.assertEqual(ib.get_value('names'), [u'Name1', u'Name2'])\n-\n-    def test_identity(self):\n-        class IdentityDefaultedItemBuilder(DefaultedItemBuilder):\n-            name = BuilderField()\n-\n-        ib = IdentityDefaultedItemBuilder()\n-\n-        ib.add_value('name', u'marta')\n-        self.assertEqual(ib.get_value('name'), u'marta')\n-\n-    def test_staticmethods(self):\n-        class ChildItemBuilder(TestItemBuilder):\n-            name = BuilderField(TestItemBuilder.name.expander, string.swapcase)\n-\n-        ib = ChildItemBuilder()\n-\n-        ib.add_value('name', u'marta')\n-        self.assertEqual(ib.get_value('name'), u'mARTA')\n-\n-\n-    def test_staticdefaults(self):\n-        class ChildDefaultedItemBuilder(DefaultedItemBuilder):\n-            name = BuilderField(DefaultedItemBuilder.name.expander, string.swapcase)\n-\n-        ib = ChildDefaultedItemBuilder()\n-\n-        ib.add_value('name', u'marta')\n-        self.assertEqual(ib.get_value('name'), u'MART')\n-\n-    def test_reducer(self):\n-        ib = TestItemBuilder()\n-\n-        ib.add_value('name', [u'mar', u'ta'])\n-        self.assertEqual(ib.get_value('name'), u'Mar Ta')\n-\n-        class TakeFirstItemBuilder(TestItemBuilder):\n-            name = BuilderField(TestItemBuilder.name.expander,\n-                                reducer=reducers.take_first)\n-\n-        ib = TakeFirstItemBuilder()\n-\n-        ib.add_value('name', [u'mar', u'ta'])\n-        self.assertEqual(ib.get_value('name'), u'Mar')\n-\n-    def test_expander_args(self):\n-        def expander_with_args(value, expander_args=None):\n-            if 'val' in expander_args:\n-                return expander_args['val']\n-            return value\n-\n-        class ChildItemBuilder(TestItemBuilder):\n-            url = BuilderField(expander_with_args)\n-\n-        ib = ChildItemBuilder(val=u'val')\n-        ib.add_value('url', u'text')\n-        self.assertEqual(ib.get_value('url'), 'val')\n-\n-        ib = ChildItemBuilder()\n-        ib.add_value('url', u'text', val=u'val')\n-        self.assertEqual(ib.get_value('url'), 'val')\n-\n\n@@ -1,18 +1,16 @@\n import unittest\n-import string\n \n from scrapy.newitem.loader import ItemLoader, tree_expander\n-from scrapy.newitem.builder import reducers\n-from scrapy.newitem import Item, fields\n+from scrapy.newitem import Item, Field\n \n \n class BaseItem(Item):\n-    name = fields.TextField()\n+    name = Field()\n \n \n class TestItem(BaseItem):\n-    url = fields.TextField()\n-    summary = fields.TextField()\n+    url = Field()\n+    summary = Field()\n \n \n class BaseItemLoader(ItemLoader):\n@@ -30,15 +28,6 @@ class DefaultedItemLoader(BaseItemLoader):\n class InheritDefaultedItemLoader(DefaultedItemLoader):\n     pass\n \n-class ListFieldTestItem(Item):\n-    names = fields.ListField(fields.TextField())\n-\n-\n-class ListFieldItemLoader(ItemLoader):\n-    item_class = ListFieldTestItem\n-\n-    expand_names = tree_expander(lambda v: v.title())\n-\n \n class ItemLoaderTest(unittest.TestCase):\n \n@@ -99,12 +88,6 @@ class ItemLoaderTest(unittest.TestCase):\n         ib.add_value('name', u'marta')\n         self.assertEqual(ib.get_value('name'), u'Marta')\n \n-    def test_multiplevaluedadaptor(self):\n-        ib = ListFieldItemLoader()\n-\n-        ib.add_value('names',  [u'name1', u'name2'])\n-        self.assertEqual(ib.get_value('names'), [u'Name1', u'Name2'])\n-\n     def test_identity(self):\n         class IdentityDefaultedItemLoader(DefaultedItemLoader):\n             expand_name = tree_expander()\n@@ -116,7 +99,7 @@ class ItemLoaderTest(unittest.TestCase):\n \n     def test_staticmethods(self):\n         class ChildItemLoader(TestItemLoader):\n-            expand_name = tree_expander(TestItemLoader.expand_name, string.swapcase)\n+            expand_name = tree_expander(TestItemLoader.expand_name, unicode.swapcase)\n \n         ib = ChildItemLoader()\n \n@@ -126,7 +109,7 @@ class ItemLoaderTest(unittest.TestCase):\n \n     def test_staticdefaults(self):\n         class ChildDefaultedItemLoader(DefaultedItemLoader):\n-            expand_name = tree_expander(DefaultedItemLoader.expand, string.swapcase)\n+            expand_name = tree_expander(DefaultedItemLoader.expand, unicode.swapcase)\n \n         ib = ChildDefaultedItemLoader()\n \n@@ -137,15 +120,15 @@ class ItemLoaderTest(unittest.TestCase):\n         ib = TestItemLoader()\n \n         ib.add_value('name', [u'mar', u'ta'])\n-        self.assertEqual(ib.get_value('name'), u'Mar Ta')\n+        self.assertEqual(ib.get_value('name'), u'Mar')\n \n         class TakeFirstItemLoader(TestItemLoader):\n-            reduce_name = staticmethod(reducers.take_first)\n+            reduce_name = staticmethod(u\" \".join)\n \n         ib = TakeFirstItemLoader()\n \n         ib.add_value('name', [u'mar', u'ta'])\n-        self.assertEqual(ib.get_value('name'), u'Mar')\n+        self.assertEqual(ib.get_value('name'), u'Mar Ta')\n \n     def test_loader_args(self):\n         def expander_func_with_args(value, loader_args):\n\n@@ -2,15 +2,14 @@ import datetime\n import decimal\n import unittest\n \n-from scrapy.newitem import Item, fields\n-from scrapy.newitem.fields import BaseField\n+from scrapy.newitem import Item, Field\n \n \n class NewItemTest(unittest.TestCase):\n \n     def test_simple(self):\n         class TestItem(Item):\n-            name = fields.TextField()\n+            name = Field()\n \n         i = TestItem()\n         i['name'] = u'name'\n@@ -18,7 +17,7 @@ class NewItemTest(unittest.TestCase):\n \n     def test_init(self):\n         class TestItem(Item):\n-            name = fields.TextField()\n+            name = Field()\n \n         i = TestItem()\n         self.assertRaises(KeyError, i.__getitem__, 'name')\n@@ -35,18 +34,6 @@ class NewItemTest(unittest.TestCase):\n         self.assertRaises(KeyError, TestItem, {'name': u'john doe',\n                                                'other': u'foo'})\n \n-        self.assertRaises(TypeError, TestItem, name=set())\n-\n-    def test_list(self):\n-        class TestListItem(Item):\n-            name = fields.TextField()\n-            names = fields.ListField(fields.TextField())\n-\n-        i = TestListItem()\n-        i['name'] = u'name'\n-        i['names'] = [u'name1', u'name2']\n-        self.assertEqual(i['names'], [u'name1', u'name2'])\n-\n     def test_invalid_field(self):\n         class TestItem(Item):\n             pass\n@@ -57,22 +44,19 @@ class NewItemTest(unittest.TestCase):\n \n     def test_default_value(self):\n         class TestItem(Item):\n-            name = fields.TextField(default=u'John')\n+            name = Field(default_factory=lambda: u'John')\n  \n         i = TestItem()\n         self.assertEqual(i['name'], u'John')\n \n-    def test_wrong_default(self):\n-        self.assertRaises(TypeError, fields.TextField, default=set())\n-\n     def test_repr(self):\n         class TestItem(Item):\n-            name = fields.TextField()\n-            number = fields.IntegerField()\n+            name = Field()\n+            number = Field()\n \n         i = TestItem()\n         i['name'] = u'John Doe'\n-        i['number'] = '123'\n+        i['number'] = 123\n         itemrepr = repr(i)\n         self.assertEqual(itemrepr,\n                          \"TestItem(name=u'John Doe', number=123)\")\n@@ -83,7 +67,7 @@ class NewItemTest(unittest.TestCase):\n \n     def test_private_attr(self):\n         class TestItem(Item):\n-            name = fields.TextField()\n+            name = Field()\n \n         i = TestItem()\n         i._private = 'test'\n@@ -91,7 +75,7 @@ class NewItemTest(unittest.TestCase):\n \n     def test_custom_methods(self):\n         class TestItem(Item):\n-            name = fields.TextField()\n+            name = Field()\n \n             def get_name(self):\n                 return self['name']\n@@ -108,9 +92,9 @@ class NewItemTest(unittest.TestCase):\n \n     def test_metaclass(self):\n         class TestItem(Item):\n-            name = fields.TextField()\n-            keys = fields.TextField() \n-            values = fields.TextField() \n+            name = Field()\n+            keys = Field() \n+            values = Field() \n \n         i = TestItem()\n         i['name'] = u'John'\n@@ -124,12 +108,12 @@ class NewItemTest(unittest.TestCase):\n \n     def test_metaclass_inheritance(self):\n         class BaseItem(Item):\n-            name = fields.TextField()\n-            keys = fields.TextField() \n-            values = fields.TextField() \n+            name = Field()\n+            keys = Field() \n+            values = Field() \n \n         class TestItem(BaseItem):\n-            keys = fields.IntegerField()\n+            keys = Field()\n \n         i = TestItem()\n         i['keys'] = 3\n@@ -138,240 +122,9 @@ class NewItemTest(unittest.TestCase):\n \n     def test_to_dict(self):\n         class TestItem(Item):\n-            name = fields.TextField()\n+            name = Field()\n \n         i = TestItem()\n         i['name'] = u'John'\n         self.assertEqual(dict(i), {'name': u'John'})\n \n-    def test_id(self):\n-        class TestItem(Item):\n-            name = fields.TextField()\n-\n-        i = TestItem()\n-        self.assertRaises(NotImplementedError, i.get_id)\n-\n-        class IdItem(Item):\n-            id = fields.IntegerField()\n-\n-            def get_id(self):\n-                return self['id']\n-\n-        i = IdItem()\n-        i['id'] = 11\n-        self.assertEqual(i.get_id(), 11)\n-\n-\n-class NewItemFieldsTest(unittest.TestCase):\n-    \n-    def test_base_field(self):\n-        f = fields.BaseField()\n-\n-        self.assert_(f.get_default() is None)\n-        self.assertRaises(NotImplementedError, f.to_python, 1)\n-\n-    def test_boolean_field(self):\n-        class TestItem(Item):\n-            field = fields.BooleanField()\n-\n-        i = TestItem()\n-\n-        i['field'] = True\n-        self.assert_(i['field'] is True)\n-    \n-        i['field'] = 1\n-        self.assert_(i['field'] is True)\n-\n-        i['field'] = False\n-        self.assert_(i['field'] is False)\n-\n-        i['field'] = 0\n-        self.assert_(i['field'] is False)\n-\n-        i['field'] = None\n-        self.assert_(i['field'] is False)\n-\n-    def test_date_field(self):\n-        class TestItem(Item):\n-            field = fields.DateField()\n-\n-        i = TestItem()\n-\n-        d_today = datetime.date.today()\n-        i['field'] = d_today\n-        self.assertEqual(i['field'], d_today)\n-\n-        dt_today = datetime.datetime.today()\n-        i['field'] = dt_today\n-        self.assertEqual(i['field'], dt_today.date())\n- \n-        i['field'] = '2009-05-21'\n-        self.assertEqual(i['field'], datetime.date(2009, 5, 21))\n-\n-        self.assertRaises(ValueError, i.__setitem__, 'field', '21-05-2009')\n-\n-        self.assertRaises(ValueError, i.__setitem__, 'field', '2009-05-51')\n-\n-        self.assertRaises(TypeError, i.__setitem__, 'field', None)\n-\n-    def test_datetime_field(self):\n-        class TestItem(Item):\n-            field = fields.DateTimeField()\n-\n-        i = TestItem()\n-\n-        dt_today = datetime.datetime.today()\n-        i['field'] = dt_today\n-        self.assertEqual(i['field'], dt_today)\n-\n-        d_today = datetime.date.today()\n-        i['field'] = d_today\n-        self.assertEqual(i['field'], datetime.datetime(d_today.year,\n-                                                    d_today.month, d_today.day))\n-\n-        i['field'] = '2009-05-21 11:08:10.100'\n-        self.assertEqual(i['field'], datetime.datetime(2009, 5, 21, 11, 8, 10,\n-                                                    100))\n- \n-        i['field'] = '2009-05-21 11:08:10'\n-        self.assertEqual(i['field'], datetime.datetime(2009, 5, 21, 11, 8, 10))\n-\n-        i['field'] = '2009-05-21 11:08'\n-        self.assertEqual(i['field'], datetime.datetime(2009, 5, 21, 11, 8))\n-\n-        i['field'] = '2009-05-21'\n-        self.assertEqual(i['field'], datetime.datetime(2009, 5, 21))\n-\n-        self.assertRaises(ValueError, i.__setitem__, 'field', '2009-05-21 11:08:10.usecs')\n-\n-        self.assertRaises(ValueError, i.__setitem__, 'field', '21-05-2009')\n-\n-        self.assertRaises(ValueError, i.__setitem__, 'field', '2009-05-51')\n-\n-        self.assertRaises(TypeError, i.__setitem__, 'field', None)\n-\n-    def test_decimal_field(self):\n-        class TestItem(Item):\n-            field = fields.DecimalField()\n-\n-        i = TestItem()\n-\n-        i['field'] = decimal.Decimal('3.14')\n-        self.assertEqual(i['field'], decimal.Decimal('3.14'))\n-\n-        i['field'] = '3.14'\n-        self.assertEqual(i['field'], decimal.Decimal('3.14'))\n-        \n-        self.assertRaises(decimal.InvalidOperation, i.__setitem__, 'field', 'text')\n-\n-        self.assertRaises(TypeError, i.__setitem__, 'field', None)\n-\n-    def test_float_field(self):\n-        class TestItem(Item):\n-            field = fields.FloatField()\n-\n-        i = TestItem()\n-\n-        i['field'] = 3.14\n-        self.assertEqual(i['field'], 3.14)\n-\n-        i['field'] = '3.14'\n-        self.assertEqual(i['field'], 3.14)\n-        \n-        self.assertRaises(ValueError, i.__setitem__, 'field', 'text')\n-\n-        self.assertRaises(TypeError, i.__setitem__, 'field', None)\n-\n-    def test_integer_field(self):\n-        class TestItem(Item):\n-            field = fields.IntegerField()\n-\n-        i = TestItem()\n-\n-        i['field'] = 3\n-        self.assertEqual(i['field'], 3)\n-\n-        i['field'] = '3'\n-        self.assertEqual(i['field'], 3)\n-\n-        self.assertRaises(ValueError, i.__setitem__, 'field', 'text')\n-\n-        self.assertRaises(TypeError, i.__setitem__, 'field', None)\n-\n-    def test_text_field(self):\n-        class TestItem(Item):\n-            field = fields.TextField()\n-\n-        i = TestItem()\n-\n-        # valid castings\n-        i['field'] = u'hello'\n-        self.assertEqual(i['field'], u'hello')\n-        self.assert_(isinstance(i['field'], unicode))\n-\n-        i['field'] = 3\n-        self.assertEqual(i['field'], u'3')\n-        self.assert_(isinstance(i['field'], unicode))\n-\n-        i['field'] = 3.2\n-        self.assertEqual(i['field'], u'3.2')\n-        self.assert_(isinstance(i['field'], unicode))\n-\n-        i['field'] = 100L\n-        self.assertEqual(i['field'], u'100')\n-        self.assert_(isinstance(i['field'], unicode))\n-\n-        # invalid castings\n-        self.assertRaises(TypeError, i.__setitem__, 'field', [u'hello', u'world'])\n-        self.assertRaises(TypeError, i.__setitem__, 'field', 'string') # must be unicode!\n-        self.assertRaises(TypeError, i.__setitem__, 'field', set())\n-        self.assertRaises(TypeError, i.__setitem__, 'field', True)\n-        self.assertRaises(TypeError, i.__setitem__, 'field', None)\n-\n-\n-    def test_from_unicode_list(self):\n-        field = fields.BaseField()\n-        self.assertEqual(field.from_unicode_list([]), None)\n-\n-        field = fields.TextField()\n-        self.assertEqual(field.from_unicode_list([]), u'')\n-        self.assertEqual(field.from_unicode_list([u'hello', u'world']), u'hello world')\n-\n-        field = fields.ListField(fields.TextField())\n-        self.assertEqual(field.from_unicode_list([]), [])\n-        self.assertEqual(field.from_unicode_list([u'hello', u'world']), [u'hello', u'world'])\n-\n-        field = fields.IntegerField()\n-        self.assertEqual(field.from_unicode_list([u'123']), 123)\n-\n-    def test_time_field(self):\n-        class TestItem(Item):\n-            field = fields.TimeField()\n-\n-        i = TestItem()\n-\n-        dt_t = datetime.time(11, 8, 10, 100)\n-        i['field'] = dt_t\n-        self.assertEqual(i['field'], dt_t)\n-\n-        self.assertRaises(TypeError, i.__setitem__, 'field', None)\n-\n-        dt_dt = datetime.datetime.today()\n-        i['field'] = dt_dt\n-        self.assertEqual(i['field'], dt_dt.time)\n-\n-        i['field'] = '11:08:10.100'\n-        self.assertEqual(i['field'], datetime.time(11, 8, 10, 100))\n- \n-        i['field'] = '11:08:10'\n-        self.assertEqual(i['field'], datetime.time(11, 8, 10))\n-\n-        i['field'] = '11:08'\n-        self.assertEqual(i['field'], datetime.time(11, 8))\n-\n-        self.assertRaises(ValueError, i.__setitem__, 'field', '11:08:10.usecs')\n-\n-        self.assertRaises(ValueError, i.__setitem__, 'field', '25:08:10')\n-\n-        self.assertRaises(ValueError, i.__setitem__, 'field', 'string')\n-\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
