{"custom_id": "requests#80fe5dc147cf2d90128e2f4966976b3a7a7ee932", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 7 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 2/2 | Churn Δ: 7 | Churn Cumulative: 136 | Contributors (this commit): 3 | Commits (past 90d): 9 | Contributors (cumulative): 3 | DMM Complexity: 1.0\n\nDIFF:\n@@ -782,5 +782,12 @@ class RequestsTestSuite(TestSetup, unittest.TestCase):\n               get,\n               'ftp://ftp.kernel.org/pub/')\n \n+    def test_can_have_none_in_header_values(self):\n+        try:\n+            # Don't choke on headers with none in the value.\n+            requests.get(httpbin('headers'), headers={'Foo': None})\n+        except TypeError:\n+            self.fail()\n+\n if __name__ == '__main__':\n     unittest.main()\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#e0d1b09ffe01d8de3f144fa02bae7071c0b25da2", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 2 | Churn Cumulative: 4598 | Contributors (this commit): 44 | Commits (past 90d): 72 | Contributors (cumulative): 44 | DMM Complexity: None\n\nDIFF:\n@@ -779,7 +779,7 @@ class Response(object):\n         if self.error:\n             raise self.error\n \n-        if (self.status_code >= 300) and (self.status_code < 400):\n+        if (self.status_code >= 300) and (self.status_code < 400) and not self.rquest.allow_redirects:\n             raise HTTPError('%s Redirection' % self.status_code)\n \n         elif (self.status_code >= 400) and (self.status_code < 500):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#2c55d269ce87d405c1bafbbcdc797c62a401167d", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 2 | Methods Changed: 2 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 4602 | Contributors (this commit): 44 | Commits (past 90d): 73 | Contributors (cumulative): 44 | DMM Complexity: None\n\nDIFF:\n@@ -773,13 +773,13 @@ class Response(object):\n \n         return content\n \n-    def raise_for_status(self):\n+    def raise_for_status(self, allow_redirects=True):\n         \"\"\"Raises stored :class:`HTTPError` or :class:`URLError`, if one occurred.\"\"\"\n \n         if self.error:\n             raise self.error\n \n-        if (self.status_code >= 300) and (self.status_code < 400) and not self.rquest.allow_redirects:\n+        if (self.status_code >= 300) and (self.status_code < 400) and not allow_redirects:\n             raise HTTPError('%s Redirection' % self.status_code)\n \n         elif (self.status_code >= 400) and (self.status_code < 500):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#709c8bdcbf9a4b37a69e7790768c1d46ebac0035", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 3 | Files Changed: 1 | Hunks: 2 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 5 | Churn Cumulative: 297 | Contributors (this commit): 3 | Commits (past 90d): 19 | Contributors (cumulative): 3 | DMM Complexity: None\n\nDIFF:\n@@ -15,14 +15,13 @@ requests\n \"\"\"\n \n __title__ = 'requests'\n-__version__ = '0.10.2'\n-__build__ = 0x001002\n+__version__ = '0.10.3'\n+__build__ = 0x001003\n __author__ = 'Kenneth Reitz'\n __license__ = 'ISC'\n __copyright__ = 'Copyright 2012 Kenneth Reitz'\n \n \n-\n from . import utils\n from .models import Request, Response\n from .api import request, get, head, post, patch, put, delete, options\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#b355b678a9de0bd5e43bbb4d9299ab9fa8e6fd85", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 6 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 6 | Churn Cumulative: 142 | Contributors (this commit): 3 | Commits (past 90d): 10 | Contributors (cumulative): 3 | DMM Complexity: 1.0\n\nDIFF:\n@@ -789,5 +789,11 @@ class RequestsTestSuite(TestSetup, unittest.TestCase):\n         except TypeError:\n             self.fail()\n \n+    def test_danger_mode_redirects(self):\n+        s = requests.session()\n+        s.config['danger_mode'] = True\n+        s.get(httpbin('redirect', '4'))\n+\n+\n if __name__ == '__main__':\n     unittest.main()\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#709828204a7f6f23a52a5169430c52d6913a9fc2", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 758 | Contributors (this commit): 7 | Commits (past 90d): 8 | Contributors (cumulative): 7 | DMM Complexity: None\n\nDIFF:\n@@ -235,7 +235,7 @@ class Session(object):\n         :param **kwargs: Optional arguments that ``request`` takes.\n         \"\"\"\n \n-        kwargs.setdefault('allow_redirects', True)\n+        kwargs.setdefault('allow_redirects', False)\n         return self.request('head', url, **kwargs)\n \n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#6f5735274b9ce2c61345adf8d7657b01b1623320", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 993 | Contributors (this commit): 15 | Commits (past 90d): 11 | Contributors (cumulative): 15 | DMM Complexity: None\n\nDIFF:\n@@ -69,7 +69,7 @@ def head(url, **kwargs):\n     :param **kwargs: Optional arguments that ``request`` takes.\n     \"\"\"\n \n-    kwargs.setdefault('allow_redirects', True)\n+    kwargs.setdefault('allow_redirects', False)\n     return request('head', url, **kwargs)\n \n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#79bb9ee1417afe2231972c1331308500104e5dc7", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 33 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 4 | Methods Changed: 1 | Complexity Δ (Sum/Max): 8/8 | Churn Δ: 34 | Churn Cumulative: 1128 | Contributors (this commit): 15 | Commits (past 90d): 21 | Contributors (cumulative): 15 | DMM Complexity: 0.0\n\nDIFF:\n@@ -11,15 +11,47 @@ that are also useful for external consumption.\n \n import cgi\n import codecs\n+import os\n import random\n import re\n import zlib\n+from netrc import netrc, NetrcParseError\n \n from .compat import parse_http_list as _parse_list_header\n-from .compat import quote, cookielib, SimpleCookie, is_py2\n+from .compat import quote, cookielib, SimpleCookie, is_py2, urlparse\n from .compat import basestring, bytes\n \n \n+NETRC_FILES = ('.netrc', '_netrc')\n+\n+\n+def get_netrc_auth(url):\n+    \"\"\"Returns the Requests tuple auth for a given url from netrc.\"\"\"\n+\n+    locations = (os.path.expanduser('~/{0}'.format(f)) for f in NETRC_FILES)\n+    netrc_path = None\n+\n+    for loc in locations:\n+        if os.path.exists(loc) and not netrc_path:\n+            netrc_path = loc\n+\n+    # Abort early if there isn't one.\n+    if netrc_path is None:\n+        return netrc_path\n+\n+    ri = urlparse(url)\n+\n+    # Strip port numbers from netloc\n+    host = ri.netloc.split(':')[0]\n+\n+    try:\n+        _netrc = netrc(netrc_path).authenticators(host)\n+        # Return with login / password\n+        return (_netrc[0 if _netrc[0] else 1], _netrc[2])\n+    except NetrcParseError:\n+        pass\n+\n+\n def dict_from_string(s):\n     \"\"\"Returns a MultiDict with Cookies.\"\"\"\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#de0658f7e82982a398e8acef3470ed6be0e3c52e", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 5 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 6 | Churn Cumulative: 4608 | Contributors (this commit): 44 | Commits (past 90d): 74 | Contributors (cumulative): 44 | DMM Complexity: 0.0\n\nDIFF:\n@@ -27,7 +27,7 @@ from .exceptions import (\n     URLRequired, SSLError)\n from .utils import (\n     get_encoding_from_headers, stream_untransfer, guess_filename, requote_uri,\n-    dict_from_string, stream_decode_response_unicode)\n+    dict_from_string, stream_decode_response_unicode, get_netrc_auth)\n from .compat import (\n     urlparse, urlunparse, urljoin, urlsplit, urlencode, str, bytes,\n     SimpleCookie, is_py2)\n@@ -435,6 +435,10 @@ class Request(object):\n         if (content_type) and (not 'content-type' in self.headers):\n             self.headers['Content-Type'] = content_type\n \n+        # Use .netrc auth if none was provided.\n+        if not self.auth:\n+            self.auth = get_netrc_auth(url)\n+\n         if self.auth:\n             if isinstance(self.auth, tuple) and len(self.auth) == 2:\n                 # special-case basic HTTP auth\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#b0e18650735dc667f76f6aff108877f03b729c23", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 3 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 4 | Churn Cumulative: 1132 | Contributors (this commit): 15 | Commits (past 90d): 22 | Contributors (cumulative): 15 | DMM Complexity: 0.0\n\nDIFF:\n@@ -46,8 +46,10 @@ def get_netrc_auth(url):\n \n     try:\n         _netrc = netrc(netrc_path).authenticators(host)\n+        if _netrc:\n             # Return with login / password\n-        return (_netrc[0 if _netrc[0] else 1], _netrc[2])\n+            login_i = (0 if _netrc[0] else 1)\n+            return (_netrc[login_i], _netrc[2])\n     except NetrcParseError:\n         pass\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#fd7610dd7a144879481b48e3b5412753b8499776", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 1134 | Contributors (this commit): 15 | Commits (past 90d): 23 | Contributors (cumulative): 15 | DMM Complexity: None\n\nDIFF:\n@@ -183,7 +183,7 @@ def header_expand(headers):\n         headers = list(headers.items())\n     elif isinstance(headers, basestring):\n         return headers\n-    elif isinstance(headers, unicode):\n+    elif isinstance(headers, str):\n         # As discussed in https://github.com/kennethreitz/requests/issues/400\n         # latin-1 is the most conservative encoding used on the web. Anyone\n         # who needs more can encode to a byte-string before calling\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#c9b49202302085c5b121b5f56962d148f5f21962", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 301 | Contributors (this commit): 3 | Commits (past 90d): 20 | Contributors (cumulative): 3 | DMM Complexity: None\n\nDIFF:\n@@ -15,8 +15,8 @@ requests\n \"\"\"\n \n __title__ = 'requests'\n-__version__ = '0.10.3'\n-__build__ = 0x001003\n+__version__ = '0.10.4'\n+__build__ = 0x001004\n __author__ = 'Kenneth Reitz'\n __license__ = 'ISC'\n __copyright__ = 'Copyright 2012 Kenneth Reitz'\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#572c15d0494125b62ec84a670eefd3fd4615c573", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 3 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 1138 | Contributors (this commit): 16 | Commits (past 90d): 24 | Contributors (cumulative): 16 | DMM Complexity: None\n\nDIFF:\n@@ -50,7 +50,9 @@ def get_netrc_auth(url):\n             # Return with login / password\n             login_i = (0 if _netrc[0] else 1)\n             return (_netrc[login_i], _netrc[2])\n-    except NetrcParseError:\n+    except NetrcParseError, IOError:\n+        # If there was a parsing error or a permissions issue reading the file,\n+        # we'll just skip netrc auth\n         pass\n \n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#2ef0b1b51de9a0895eacd2b01c3f8b9c04f2b2f2", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 789 | Contributors (this commit): 2 | Commits (past 90d): 6 | Contributors (cumulative): 2 | DMM Complexity: None\n\nDIFF:\n@@ -253,7 +253,7 @@ class CookieError(Exception):\n #       _LegalChars       is the list of chars which don't require \"'s\n #       _Translator       hash-table for fast quoting\n #\n-_RFC2965Forbidden = \"[]:{}\"\n+_RFC2965Forbidden = \"[]:{}=\"\n _LegalChars       = ( string.ascii_letters + string.digits + \n                       \"!#$%&'*+-.^_`|~_\" + _RFC2965Forbidden )\n _Translator       = {\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#1661bf654385c51c7a33e4fe9fd01c2873244df5", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 1140 | Contributors (this commit): 17 | Commits (past 90d): 25 | Contributors (cumulative): 17 | DMM Complexity: None\n\nDIFF:\n@@ -374,7 +374,7 @@ def get_unicode_from_response(r):\n \n     # Fall back:\n     try:\n-        return str(r.content, encoding, errors='replace')\n+        return unicode(r.content, encoding, errors='replace')\n     except TypeError:\n         return r.content\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#09c0365255a639932f0d17233249f298de000d03", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 1144 | Contributors (this commit): 17 | Commits (past 90d): 26 | Contributors (cumulative): 17 | DMM Complexity: None\n\nDIFF:\n@@ -19,7 +19,7 @@ from netrc import netrc, NetrcParseError\n \n from .compat import parse_http_list as _parse_list_header\n from .compat import quote, cookielib, SimpleCookie, is_py2, urlparse\n-from .compat import basestring, bytes\n+from .compat import basestring, bytes, str\n \n \n NETRC_FILES = ('.netrc', '_netrc')\n@@ -374,7 +374,7 @@ def get_unicode_from_response(r):\n \n     # Fall back:\n     try:\n-        return unicode(r.content, encoding, errors='replace')\n+        return str(r.content, encoding, errors='replace')\n     except TypeError:\n         return r.content\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#e18e79d8202a58186d7376d491a2a922e2a9454f", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 1146 | Contributors (this commit): 17 | Commits (past 90d): 27 | Contributors (cumulative): 17 | DMM Complexity: None\n\nDIFF:\n@@ -50,7 +50,7 @@ def get_netrc_auth(url):\n             # Return with login / password\n             login_i = (0 if _netrc[0] else 1)\n             return (_netrc[login_i], _netrc[2])\n-    except NetrcParseError, IOError:\n+    except (NetrcParseError, IOError):\n         # If there was a parsing error or a permissions issue reading the file,\n         # we'll just skip netrc auth\n         pass\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#ea1d5f36480c7f9ba9d15aebd94d3df7db95dd72", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 7 | Lines Deleted: 1 | Files Changed: 2 | Hunks: 2 | Methods Changed: 2 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 8 | Churn Cumulative: 4758 | Contributors (this commit): 45 | Commits (past 90d): 86 | Contributors (cumulative): 47 | DMM Complexity: 1.0\n\nDIFF:\n@@ -739,7 +739,7 @@ class Response(object):\n                     raise RuntimeError(\n                         'The content for this response was already consumed')\n \n-                self._content = bytes().join(self.iter_content()) or None\n+                self._content = bytes().join(self.iter_content()) or bytes()\n                 # print repr(self._content)\n             except AttributeError:\n                 self._content = None\n\n@@ -795,5 +795,11 @@ class RequestsTestSuite(TestSetup, unittest.TestCase):\n         s.get(httpbin('redirect', '4'))\n \n \n+    def test_empty_response(self):\n+        r = requests.get(httpbin('status', '404'))\n+        r.text\n+\n+\n+\n if __name__ == '__main__':\n     unittest.main()\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#d974b46dbef560cce203b82c9491e7804edba7eb", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 4 | Files Changed: 1 | Hunks: 2 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 6 | Churn Cumulative: 154 | Contributors (this commit): 3 | Commits (past 90d): 12 | Contributors (cumulative): 3 | DMM Complexity: None\n\nDIFF:\n@@ -21,12 +21,10 @@ from requests import HTTPError\n from requests import get, post, head, put\n from requests.auth import HTTPBasicAuth, HTTPDigestAuth\n \n-if (sys.platform == 'win32') and ('HTTPBIN_URL' not in os.environ):\n+if 'HTTPBIN_URL' not in os.environ:\n     os.environ['HTTPBIN_URL'] = 'http://httpbin.org/'\n \n-# TODO: Detect an open port.\n-PORT = os.environ.get('HTTPBIN_PORT', '7077')\n-HTTPBIN_URL = os.environ.get('HTTPBIN_URL', 'http://0.0.0.0:%s/' % (PORT))\n+HTTPBIN_URL = os.environ.get('HTTPBIN_URL')\n \n \n def httpbin(*suffix):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#531dc351263f1630a72eb4960b13b8df1233457f", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 22 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 2 | Methods Changed: 2 | Complexity Δ (Sum/Max): 3/3 | Churn Δ: 23 | Churn Cumulative: 468 | Contributors (this commit): 10 | Commits (past 90d): 7 | Contributors (cumulative): 10 | DMM Complexity: 1.0\n\nDIFF:\n@@ -23,7 +23,7 @@ from . import api\n \n \n __all__ = (\n-    'map',\n+    'map', 'imap',\n     'get', 'options', 'head', 'post', 'put', 'patch', 'delete', 'request'\n )\n \n@@ -83,3 +83,24 @@ def map(requests, prefetch=True, size=None):\n     gevent.joinall(jobs)\n \n     return [r.response for r in requests]\n+\n+\n+def imap(requests, prefetch=True, size=2):\n+    \"\"\"Concurrently converts a generator object of Requests to\n+    a generator of Responses.\n+\n+    :param requests: a generator of Request objects.\n+    :param prefetch: If False, the content will not be downloaded immediately.\n+    :param size: Specifies the number of requests to make at a time. default is 2\n+    \"\"\"\n+\n+    pool = Pool(size)\n+\n+    def send(r):\n+        r.send(prefetch)\n+        return r.response\n+\n+    for r in pool.imap_unordered(send, requests):\n+        yield r\n+\n+    pool.join()\n\\ No newline at end of file\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#d3b7f9881490c1429b4310c97f79a432ec7d76a5", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 4 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 5 | Churn Cumulative: 4615 | Contributors (this commit): 44 | Commits (past 90d): 75 | Contributors (cumulative): 44 | DMM Complexity: 0.0\n\nDIFF:\n@@ -739,8 +739,11 @@ class Response(object):\n                     raise RuntimeError(\n                         'The content for this response was already consumed')\n \n+                if self.status_code is 0:\n+                    self._content = None\n+                else:\n                     self._content = bytes().join(self.iter_content()) or bytes()\n-                # print repr(self._content)\n+\n             except AttributeError:\n                 self._content = None\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#cfeb485434ec544f57ccfcd3204b1880d821e8ac", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 305 | Contributors (this commit): 3 | Commits (past 90d): 20 | Contributors (cumulative): 3 | DMM Complexity: None\n\nDIFF:\n@@ -15,8 +15,8 @@ requests\n \"\"\"\n \n __title__ = 'requests'\n-__version__ = '0.10.4'\n-__build__ = 0x001004\n+__version__ = '0.10.5'\n+__build__ = 0x001005\n __author__ = 'Kenneth Reitz'\n __license__ = 'ISC'\n __copyright__ = 'Copyright 2012 Kenneth Reitz'\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#7cc2d468c7e4620a32c829e2ff0117b3395cf6ab", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 70 | Lines Deleted: 27 | Files Changed: 5 | Hunks: 30 | Methods Changed: 10 | Complexity Δ (Sum/Max): 6/3 | Churn Δ: 97 | Churn Cumulative: 3023 | Contributors (this commit): 1 | Commits (past 90d): 25 | Contributors (cumulative): 5 | DMM Complexity: 0.0\n\nDIFF:\n@@ -10,7 +10,7 @@ urllib3 - Thread-safe connection pooling and re-using.\n \n __author__ = 'Andrey Petrov (andrey.petrov@shazow.net)'\n __license__ = 'MIT'\n-__version__ = '1.1'\n+__version__ = '1.2.2'\n \n \n from .connectionpool import (\n\n@@ -7,6 +7,7 @@\n import logging\n import socket\n \n+from base64 import b64encode\n from socket import error as SocketError, timeout as SocketTimeout\n \n try:\n@@ -16,33 +17,45 @@ except ImportError: # Doesn't exist on OSX and other platforms\n     poll = False\n \n try:   # Python 3\n-    from http.client import HTTPConnection, HTTPSConnection, HTTPException\n+    from http.client import HTTPConnection, HTTPException\n     from http.client import HTTP_PORT, HTTPS_PORT\n except ImportError:\n-    from httplib import HTTPConnection, HTTPSConnection, HTTPException\n+    from httplib import HTTPConnection, HTTPException\n     from httplib import HTTP_PORT, HTTPS_PORT\n \n try:   # Python 3\n-    from queue import Queue, Empty, Full\n+    from queue import LifoQueue, Empty, Full\n except ImportError:\n-    from Queue import Queue, Empty, Full\n+    from Queue import LifoQueue, Empty, Full\n+\n \n try:   # Compiled with SSL?\n+    HTTPSConnection = object\n+    BaseSSLError = None\n+    ssl = None\n+\n+    try:   # Python 3\n+        from http.client import HTTPSConnection\n+    except ImportError:\n+        from httplib import HTTPSConnection\n+\n     import ssl\n     BaseSSLError = ssl.SSLError\n+\n except ImportError:\n-    ssl = None\n-    BaseSSLError = None\n+    pass\n \n \n from .packages.ssl_match_hostname import match_hostname, CertificateError\n from .request import RequestMethods\n from .response import HTTPResponse\n-from .exceptions import (SSLError,\n-    MaxRetryError,\n-    TimeoutError,\n-    HostChangedError,\n+from .exceptions import (\n     EmptyPoolError,\n+    HostChangedError,\n+    LocationParseError,\n+    MaxRetryError,\n+    SSLError,\n+    TimeoutError,\n )\n \n from .packages.ssl_match_hostname import match_hostname, CertificateError\n@@ -103,6 +116,7 @@ class ConnectionPool(object):\n     \"\"\"\n \n     scheme = None\n+    QueueCls = LifoQueue\n \n     def __init__(self, host, port=None):\n         self.host = host\n@@ -156,11 +170,11 @@ class HTTPConnectionPool(ConnectionPool, RequestMethods):\n \n     def __init__(self, host, port=None, strict=False, timeout=None, maxsize=1,\n                  block=False, headers=None):\n-        self.host = host\n-        self.port = port\n+        super(HTTPConnectionPool, self).__init__(host, port)\n+\n         self.strict = strict\n         self.timeout = timeout\n-        self.pool = Queue(maxsize)\n+        self.pool = self.QueueCls(maxsize)\n         self.block = block\n         self.headers = headers or {}\n \n@@ -468,7 +482,11 @@ class HTTPSConnectionPool(HTTPConnectionPool):\n         log.info(\"Starting new HTTPS connection (%d): %s\"\n                  % (self.num_connections, self.host))\n \n-        if not ssl:\n+        if not ssl: # Platform-specific: Python compiled without +ssl\n+            if not HTTPSConnection or HTTPSConnection is object:\n+                raise SSLError(\"Can't connect to HTTPS URL because the SSL \"\n+                               \"module is not available.\")\n+\n             return HTTPSConnection(host=self.host, port=self.port)\n \n         connection = VerifiedHTTPSConnection(host=self.host, port=self.port)\n@@ -526,7 +544,7 @@ def make_headers(keep_alive=None, accept_encoding=None, user_agent=None,\n \n     if basic_auth:\n         headers['authorization'] = 'Basic ' + \\\n-            basic_auth.encode('base64').strip()\n+            b64encode(six.b(basic_auth)).decode('utf-8')\n \n     return headers\n \n@@ -542,10 +560,12 @@ def get_host(url):\n         >>> get_host('google.com:80')\n         ('http', 'google.com', 80)\n     \"\"\"\n+\n     # This code is actually similar to urlparse.urlsplit, but much\n     # simplified for our needs.\n     port = None\n     scheme = 'http'\n+\n     if '://' in url:\n         scheme, url = url.split('://', 1)\n     if '/' in url:\n@@ -554,7 +574,12 @@ def get_host(url):\n         _auth, url = url.split('@', 1)\n     if ':' in url:\n         url, port = url.split(':', 1)\n+\n+        if not port.isdigit():\n+            raise LocationParseError(\"Failed to parse: %s\")\n+\n         port = int(port)\n+\n     return scheme, url, port\n \n \n@@ -592,7 +617,7 @@ def is_connection_dropped(conn):\n     :param conn:\n         ``HTTPConnection`` object.\n     \"\"\"\n-    if not poll:\n+    if not poll: # Platform-specific\n         return select([conn.sock], [], [], 0.0)[0]\n \n     # This version is better on platforms that support it.\n\n@@ -4,6 +4,7 @@\n # This module is part of urllib3 and is released under\n # the MIT License: http://www.opensource.org/licenses/mit-license.php\n \n+\n ## Base Exceptions\n \n class HTTPError(Exception):\n@@ -27,18 +28,20 @@ class SSLError(HTTPError):\n \n class MaxRetryError(PoolError):\n     \"Raised when the maximum number of retries is exceeded.\"\n+\n     def __init__(self, pool, url):\n-        PoolError.__init__(self, pool,\n-                           \"Max retries exceeded with url: %s\" % url)\n+        message = \"Max retries exceeded with url: %s\" % url\n+        PoolError.__init__(self, pool, message)\n \n         self.url = url\n \n \n class HostChangedError(PoolError):\n     \"Raised when an existing pool gets a request for a foreign host.\"\n+\n     def __init__(self, pool, url, retries=3):\n-        PoolError.__init__(self, pool,\n-                           \"Tried to open a foreign host with url: %s\" % url)\n+        message = \"Tried to open a foreign host with url: %s\" % url\n+        PoolError.__init__(self, pool, message)\n \n         self.url = url\n         self.retries = retries\n@@ -52,3 +55,13 @@ class TimeoutError(PoolError):\n class EmptyPoolError(PoolError):\n     \"Raised when a pool runs out of connections and no more are allowed.\"\n     pass\n+\n+\n+class LocationParseError(ValueError, HTTPError):\n+    \"Raised when get_host or similar fails to parse the URL input.\"\n+\n+    def __init__(self, location):\n+        message = \"Failed to parse: %s\" % location\n+        super(LocationParseError, self).__init__(self, message)\n+\n+        self.location = location\n\n@@ -117,9 +117,19 @@ class ProxyManager(RequestMethods):\n     def __init__(self, proxy_pool):\n         self.proxy_pool = proxy_pool\n \n+    def _set_proxy_headers(self, headers=None):\n+        headers = headers or {}\n+\n+        # Same headers are curl passes for --proxy1.0\n+        headers['Accept'] = '*/*'\n+        headers['Proxy-Connection'] = 'Keep-Alive'\n+\n+        return headers\n+\n     def urlopen(self, method, url, **kw):\n         \"Same as HTTP(S)ConnectionPool.urlopen, ``url`` must be absolute.\"\n         kw['assert_same_host'] = False\n+        kw['headers'] = self._set_proxy_headers(kw.get('headers'))\n         return self.proxy_pool.urlopen(method, url, **kw)\n \n \n\n@@ -11,12 +11,7 @@ import zlib\n from io import BytesIO\n \n from .exceptions import HTTPError\n-\n-\n-try:\n-    basestring = basestring\n-except NameError: # Python 3\n-    basestring = (str, bytes)\n+from .packages.six import string_types as basestring\n \n \n log = logging.getLogger(__name__)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#0eb5b633aa9943b447c0033ba97c06bcb7bf0d72", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 309 | Contributors (this commit): 3 | Commits (past 90d): 21 | Contributors (cumulative): 3 | DMM Complexity: None\n\nDIFF:\n@@ -15,8 +15,8 @@ requests\n \"\"\"\n \n __title__ = 'requests'\n-__version__ = '0.10.5'\n-__build__ = 0x001005\n+__version__ = '0.10.6'\n+__build__ = 0x001006\n __author__ = 'Kenneth Reitz'\n __license__ = 'ISC'\n __copyright__ = 'Copyright 2012 Kenneth Reitz'\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#e2645826be0449842dcc812e31541c5254c69e05", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 2 | Churn Cumulative: 4617 | Contributors (this commit): 45 | Commits (past 90d): 76 | Contributors (cumulative): 45 | DMM Complexity: 0.0\n\nDIFF:\n@@ -227,6 +227,8 @@ class Request(object):\n                 # Facilitate non-RFC2616-compliant 'location' headers\n                 # (e.g. '/path/to/resource' instead of 'http://domain.tld/path/to/resource')\n                 if not urlparse(url).netloc:\n+                    if not isinstance(url, unicode):\n+                        url = url.decode('utf-8', 'ignore')\n                     url = urljoin(r.url, url)\n \n                 # http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.3.4\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#97815c9930e20d6cf378681bb39a57ebe6e3b2b8", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 4 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 4 | Methods Changed: 2 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 4 | Churn Cumulative: 762 | Contributors (this commit): 8 | Commits (past 90d): 9 | Contributors (cumulative): 8 | DMM Complexity: 0.0\n\nDIFF:\n@@ -64,6 +64,7 @@ class Session(object):\n         hooks=None,\n         params=None,\n         config=None,\n+        prefetch=False,\n         verify=True):\n \n         self.headers = headers or {}\n@@ -74,6 +75,7 @@ class Session(object):\n         self.hooks = hooks or {}\n         self.params = params or {}\n         self.config = config or {}\n+        self.prefetch = prefetch\n         self.verify = verify\n \n         for (k, v) in list(defaults.items()):\n@@ -148,6 +150,7 @@ class Session(object):\n         headers = {} if headers is None else headers\n         params = {} if params is None else params\n         hooks = {} if hooks is None else hooks\n+        prefetch = self.prefetch or prefetch\n \n         # use session's hooks as defaults\n         for key, cb in list(self.hooks.items()):\n@@ -172,6 +175,7 @@ class Session(object):\n             allow_redirects=allow_redirects,\n             proxies=proxies,\n             config=config,\n+            prefetch=prefetch,\n             verify=verify,\n             _poolmanager=self.poolmanager\n         )\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#ca45da39fae6d405ee291fd898133c9ad8740c6c", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 0 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 1 | Churn Cumulative: 763 | Contributors (this commit): 8 | Commits (past 90d): 10 | Contributors (cumulative): 8 | DMM Complexity: 1.0\n\nDIFF:\n@@ -175,7 +175,6 @@ class Session(object):\n             allow_redirects=allow_redirects,\n             proxies=proxies,\n             config=config,\n-            prefetch=prefetch,\n             verify=verify,\n             _poolmanager=self.poolmanager\n         )\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#1532effb68aaa8eda8ee6a250b72de9e72c5de22", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): -1/0 | Churn Δ: 2 | Churn Cumulative: 4619 | Contributors (this commit): 46 | Commits (past 90d): 77 | Contributors (cumulative): 46 | DMM Complexity: None\n\nDIFF:\n@@ -377,7 +377,7 @@ class Request(object):\n         return self.hooks[event].append(hook)\n \n     def send(self, anyway=False, prefetch=False):\n-        \"\"\"Sends the request. Returns True of successful, false if not.\n+        \"\"\"Sends the request. Returns True of successful, False if not.\n         If there was an HTTPError during transmission,\n         self.response.status_code will contain the HTTPError code.\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#228c5e68aedc7d5d1e4b5bcc49aa4ae4811fbecd", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 21 | Lines Deleted: 25 | Files Changed: 2 | Hunks: 10 | Methods Changed: 3 | Complexity Δ (Sum/Max): -1/0 | Churn Δ: 46 | Churn Cumulative: 4819 | Contributors (this commit): 48 | Commits (past 90d): 91 | Contributors (cumulative): 51 | DMM Complexity: 1.0\n\nDIFF:\n@@ -694,39 +694,31 @@ class Response(object):\n \n         return gen\n \n-    def iter_lines(self, chunk_size=10 * 1024, decode_unicode=None):\n+    def iter_lines(self, decode_unicode=None):\n         \"\"\"Iterates over the response data, one line at a time.  This\n         avoids reading the content at once into memory for large\n         responses.\n         \"\"\"\n \n-        #TODO: why rstrip by default\n         pending = None\n \n-        for chunk in self.iter_content(chunk_size, decode_unicode=decode_unicode):\n+        for chunk in self.iter_content(chunk_size=10 * 1024, decode_unicode=decode_unicode):\n \n             if pending is not None:\n                 chunk = pending + chunk\n-            lines = chunk.splitlines(True)\n+            lines = chunk.splitlines()\n \n-            for line in lines[:-1]:\n-                yield line.rstrip()\n-\n-            # Save the last part of the chunk for next iteration, to keep full line together\n-            # lines may be empty for the last chunk of a chunked response\n-\n-            if lines:\n-                pending = lines[-1]\n-                #if pending is a complete line, give it baack\n-                if pending[-1] == '\\n':\n-                    yield pending.rstrip()\n-                    pending = None\n+            # An incomplete line.\n+            if lines[-1].endswith(chunk[-1]):\n+                pending = lines.pop()\n             else:\n                 pending = None\n \n-        # Yield the last line\n+            for line in lines:\n+                yield line\n+\n         if pending is not None:\n-            yield pending.rstrip()\n+            yield pending\n \n     @property\n     def content(self):\n\n@@ -726,20 +726,24 @@ class RequestsTestSuite(TestSetup, unittest.TestCase):\n \n             self.assertEqual(i, len_lines)\n \n-        # Test 'dangling' fragment in responses that do not terminate in\n-        # a newline.\n+        # Tests that trailing whitespaces within lines do not get stripped.\n+        # Tests that a trailing non-terminated line does not get stripped.\n         quote = (\n-            '''Why will he not upon our fair request\\n'''\n-            '''Untent his person and share the air with us?'''\n+            '''Agamemnon  \\n'''\n+            '''\\tWhy will he not upon our fair request\\r\\n'''\n+            '''\\tUntent his person and share the air with us?'''\n         )\n \n         # Make a request and monkey-patch its contents\n         r = get(httpbin('get'))\n         r.raw = StringIO(quote)\n \n-        # Make sure iter_lines doesn't chop the trailing bit\n-        lines = '\\n'.join(r.iter_lines())\n-        self.assertEqual(lines, quote)\n+        lines = list(r.iter_lines())\n+        len_lines = len(lines)\n+        self.assertEqual(len_lines, 3)\n+\n+        joined = lines[0] + '\\n' + lines[1] + '\\r\\n' + lines[2]\n+        self.assertEqual(joined, quote)\n \n     def test_safe_mode(self):\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#09b6aef8355aa0cb3c8fe10addae01b08df9f0bc", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 1 | Churn Cumulative: 153 | Contributors (this commit): 3 | Commits (past 90d): 7 | Contributors (cumulative): 3 | DMM Complexity: None\n\nDIFF:\n@@ -40,5 +40,6 @@ defaults['max_retries'] = 0\n defaults['danger_mode'] = False\n defaults['safe_mode'] = False\n defaults['keep_alive'] = True\n+defaults['encode_urls'] = True\n \n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#54b2cb0b2744470dce8801bfe76e3041eadb336f", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 15 | Lines Deleted: 3 | Files Changed: 3 | Hunks: 5 | Methods Changed: 3 | Complexity Δ (Sum/Max): 2/1 | Churn Δ: 18 | Churn Cumulative: 4669 | Contributors (this commit): 47 | Commits (past 90d): 82 | Contributors (cumulative): 49 | DMM Complexity: 1.0\n\nDIFF:\n@@ -65,6 +65,9 @@ class Request(object):\n         verify=None,\n         session=None):\n \n+        #: Dictionary of configurations for this request.\n+        self.config = dict(config or [])\n+\n         #: Float describes the timeout of the request.\n         #  (Use socket.setdefaulttimeout() as fallback)\n         self.timeout = timeout\n@@ -112,9 +115,6 @@ class Request(object):\n         #: CookieJar to attach to :class:`Request <Request>`.\n         self.cookies = dict(cookies or [])\n \n-        #: Dictionary of configurations for this request.\n-        self.config = dict(config or [])\n-\n         #: True if Request has been sent.\n         self.sent = False\n \n@@ -320,6 +320,7 @@ class Request(object):\n         if not path:\n             path = '/'\n \n+\n         if is_py2:\n             if isinstance(scheme, str):\n                 scheme = scheme.encode('utf-8')\n\n@@ -0,0 +1,7 @@\n+import requests\n+\n+s = requests.session()\n+s.config['encode_urls'] = False\n+\n+r = s.get('http://localhost:7077/get?me=\\\"')\n+print r.text\n\n@@ -49,6 +49,10 @@ class RequestsTestSuite(unittest.TestCase):\n         requests.post('http://www.google.com/', data=utf8_string)\n \n \n+    def test_unicode_error(self):\n+        url = u'http://blip.fm/~1abvfu'\n+        requests.get(url)\n+\n if __name__ == '__main__':\n     unittest.main()\n \n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#c1a44259d6f8f44618788c712e3638b9b4d77c50", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 1 | Churn Cumulative: 4655 | Contributors (this commit): 47 | Commits (past 90d): 80 | Contributors (cumulative): 47 | DMM Complexity: 0.0\n\nDIFF:\n@@ -343,6 +343,7 @@ class Request(object):\n             else:\n                 url = '%s?%s' % (url, self._enc_params)\n \n+        if self.config.get('encode_urls'):\n             url = requote_uri(url)\n \n         return url\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#cf5ddecc4cfcbf0fa75958c2d44f68b1518a632b", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 4 | Lines Deleted: 4 | Files Changed: 3 | Hunks: 3 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 8 | Churn Cumulative: 5125 | Contributors (this commit): 48 | Commits (past 90d): 111 | Contributors (cumulative): 53 | DMM Complexity: None\n\nDIFF:\n@@ -15,8 +15,8 @@ requests\n \"\"\"\n \n __title__ = 'requests'\n-__version__ = '0.10.6'\n-__build__ = 0x001006\n+__version__ = '0.10.7'\n+__build__ = 0x001007\n __author__ = 'Kenneth Reitz'\n __license__ = 'ISC'\n __copyright__ = 'Copyright 2012 Kenneth Reitz'\n\n@@ -40,6 +40,6 @@ defaults['max_retries'] = 0\n defaults['danger_mode'] = False\n defaults['safe_mode'] = False\n defaults['keep_alive'] = True\n-defaults['encode_urls'] = True\n+defaults['encode_uri'] = True\n \n \n\n@@ -343,7 +343,7 @@ class Request(object):\n             else:\n                 url = '%s?%s' % (url, self._enc_params)\n \n-        if self.config.get('encode_urls'):\n+        if self.config.get('encode_uri'):\n             url = requote_uri(url)\n \n         return url\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#658d609e9ffcef264b172a37e2c82649e4a28ef3", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 2 | Files Changed: 2 | Hunks: 2 | Methods Changed: 2 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 4833 | Contributors (this commit): 48 | Commits (past 90d): 96 | Contributors (cumulative): 51 | DMM Complexity: None\n\nDIFF:\n@@ -343,7 +343,7 @@ class Request(object):\n             else:\n                 url = '%s?%s' % (url, self._enc_params)\n \n-        if self.config.get('encode_uri'):\n+        if self.config.get('encode_uri', True):\n             url = requote_uri(url)\n \n         return url\n\n@@ -74,7 +74,7 @@ class RequestsTestSuite(TestSetup, unittest.TestCase):\n     def test_path_is_not_double_encoded(self):\n         request = requests.Request(\"http://0.0.0.0/get/test case\")\n \n-        assert request.path_url == \"/get/test%20case\"\n+        self.assertEqual(request.path_url, \"/get/test%20case\")\n \n     def test_HTTP_200_OK_GET(self):\n         r = get(httpbin('/get'))\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#946f7ec579c7784cb5c65301eab5d5d81e562128", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 1 | Churn Cumulative: 156 | Contributors (this commit): 3 | Commits (past 90d): 9 | Contributors (cumulative): 3 | DMM Complexity: None\n\nDIFF:\n@@ -17,6 +17,7 @@ Configurations:\n :safe_mode: If true, Requests will catch all errors.\n :pool_maxsize: The maximium size of an HTTP connection pool.\n :pool_connections: The number of active HTTP connection pools to use.\n+:encode_uri: If true, URIs will automatically be percent-encoded.\n \"\"\"\n \n SCHEMAS = ['http', 'https']\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "requests#2f91d8e77337cceb37a11a3efea7107318163ef5", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 0 | Lines Deleted: 7 | Files Changed: 1 | Hunks: 1 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 7 | Churn Cumulative: 14 | Contributors (this commit): 1 | Commits (past 90d): 2 | Contributors (cumulative): 1 | DMM Complexity: None\n\nDIFF:\n@@ -1,7 +0,0 @@\n-import requests\n-\n-s = requests.session()\n-s.config['encode_urls'] = False\n-\n-r = s.get('http://localhost:7077/get?me=\\\"')\n-print r.text\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
