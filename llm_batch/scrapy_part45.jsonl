{"custom_id": "scrapy#ab3fdbdb8e16a37c34cdfb5a73b1826c20918fe2", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 1/1 | Churn Δ: 2 | Churn Cumulative: 204 | Contributors (this commit): 4 | Commits (past 90d): 13 | Contributors (cumulative): 4 | DMM Complexity: None\n\nDIFF:\n@@ -56,7 +56,7 @@ def create_factory(request, spider):\n                                 headers=request.headers,\n                                 agent=agent,\n                                 cookies=request.cookies,\n-                                timeout=getattr(spider, \"download_timeout\", default_timeout),\n+                                timeout=getattr(spider, \"download_timeout\", None) or default_timeout,\n                                 followRedirect=False)\n \n     def _create_response(body):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "scrapy#ff7c6d37829271d0112cbb76ef5485db717887d1", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 37 | Lines Deleted: 4 | Files Changed: 3 | Hunks: 9 | Methods Changed: 7 | Complexity Δ (Sum/Max): 5/4 | Churn Δ: 41 | Churn Cumulative: 609 | Contributors (this commit): 2 | Commits (past 90d): 17 | Contributors (cumulative): 5 | DMM Complexity: 1.0\n\nDIFF:\n@@ -10,6 +10,7 @@ from scrapy.http.headers import Headers\n \n from scrapy.http.request import Request\n from scrapy.http.request.form import FormRequest\n+from scrapy.http.request.rpc import XmlRpcRequest\n \n from scrapy.http.response import Response\n from scrapy.http.response.html import HtmlResponse\n\n@@ -0,0 +1,20 @@\n+\"\"\"\n+This module implements the XmlRpcRequest class which is a more covenient class\n+(that Request) to generate xml-rpc requests.\n+\n+See documentation in docs/ref/request-response.rst\n+\"\"\"\n+\n+import xmlrpclib\n+\n+from scrapy.http.request import Request\n+\n+\n+class XmlRpcRequest(Request):\n+\n+    def __init__(self, *args, **kwargs):\n+        params = kwargs.pop('params')\n+        methodname = kwargs.pop('methodname')\n+        Request.__init__(self, *args, **kwargs)\n+        self.body = xmlrpclib.dumps(params, methodname)\n+        self.headers.setdefault('Content-Type', 'text/xml')\n\n@@ -1,5 +1,5 @@\n import unittest\n-from scrapy.http import Request, FormRequest, Headers, Url\n+from scrapy.http import Request, FormRequest, XmlRpcRequest, Headers, Url\n \n class RequestTest(unittest.TestCase):\n \n@@ -155,12 +155,14 @@ class RequestTest(unittest.TestCase):\n         r1 = Request(\"http://www.example.com\", method='POST', headers={\"Content-type\": \"text/html\"}, body=\"Some body\")\n         self.assertEqual(r1.httprepr(), 'POST http://www.example.com HTTP/1.1\\r\\nHost: www.example.com\\r\\nContent-Type: text/html\\r\\n\\r\\nSome body')\n \n-    def test_form_request(self):\n \n-        # empty formdata\n+class FormRequestTest(unittest.TestCase):\n+\n+    def test_empty_formdata(self):\n         r1 = FormRequest(\"http://www.example.com\", formdata={})\n         self.assertEqual(r1.body, '')\n \n+    def test_default_encoding(self):\n         # using default encoding (utf-8)\n         data = {'one': 'two', 'price': '\\xc2\\xa3 100'}\n         r2 = FormRequest(\"http://www.example.com\", formdata=data)\n@@ -168,16 +170,26 @@ class RequestTest(unittest.TestCase):\n         self.assertEqual(r2.body, 'price=%C2%A3+100&one=two')\n         self.assertEqual(r2.headers['Content-Type'], 'application/x-www-form-urlencoded')\n \n-        # using custom encoding\n+    def test_custom_encoding(self):\n         data = {'price': u'\\xa3 100'}\n         r3 = FormRequest(\"http://www.example.com\", formdata=data, encoding='latin1')\n         self.assertEqual(r3.encoding, 'latin1')\n         self.assertEqual(r3.body, 'price=%A3+100')\n \n+    def test_multi_key_values(self):\n         # using multiples values for a single key\n         data = {'price': u'\\xa3 100', 'colours': ['red', 'blue', 'green']}\n         r3 = FormRequest(\"http://www.example.com\", formdata=data)\n         self.assertEqual(r3.body, 'colours=red&colours=blue&colours=green&price=%C2%A3+100')\n \n+\n+class XmlRpcRequestTest(unittest.TestCase):\n+\n+    def test_basic(self):\n+        r = XmlRpcRequest('http://scrapytest.org/rpc2', methodname='login', params=('username', 'password'))\n+        self.assertEqual(r.headers['Content-Type'], 'text/xml')\n+        self.assertEqual(r.body, \"<?xml version='1.0'?>\\n<methodCall>\\n<methodName>login</methodName>\\n<params>\\n<param>\\n<value><string>username</string></value>\\n</param>\\n<param>\\n<value><string>password</string></value>\\n</param>\\n</params>\\n</methodCall>\\n\")\n+\n+\n if __name__ == \"__main__\":\n     unittest.main()\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "scrapy#309bf9277e054084a75195c50a86909ff5a5330d", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 9 | Lines Deleted: 0 | Files Changed: 2 | Hunks: 2 | Methods Changed: 2 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 9 | Churn Cumulative: 596 | Contributors (this commit): 2 | Commits (past 90d): 16 | Contributors (cumulative): 3 | DMM Complexity: 1.0\n\nDIFF:\n@@ -15,6 +15,13 @@ class XmlRpcRequest(Request):\n     def __init__(self, *args, **kwargs):\n         params = kwargs.pop('params')\n         methodname = kwargs.pop('methodname')\n+\n+        # spec defines that requests must use POST method\n+        kwargs.setdefault('method', 'POST')\n+\n+        # xmlrpc query multiples times over the same url\n+        kwargs.setdefault('dont_filter', True)\n+\n         Request.__init__(self, *args, **kwargs)\n         self.body = xmlrpclib.dumps(params, methodname)\n         self.headers.setdefault('Content-Type', 'text/xml')\n\n@@ -189,6 +189,8 @@ class XmlRpcRequestTest(unittest.TestCase):\n         r = XmlRpcRequest('http://scrapytest.org/rpc2', methodname='login', params=('username', 'password'))\n         self.assertEqual(r.headers['Content-Type'], 'text/xml')\n         self.assertEqual(r.body, \"<?xml version='1.0'?>\\n<methodCall>\\n<methodName>login</methodName>\\n<params>\\n<param>\\n<value><string>username</string></value>\\n</param>\\n<param>\\n<value><string>password</string></value>\\n</param>\\n</params>\\n</methodCall>\\n\")\n+        self.assertEqual(r.method, 'POST')\n+        self.assertTrue(r.dont_filter, True)\n \n \n if __name__ == \"__main__\":\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "scrapy#2e1a170563ca8646236da7c48ce526306ac5b1a5", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 31 | Lines Deleted: 0 | Files Changed: 1 | Hunks: 2 | Methods Changed: 3 | Complexity Δ (Sum/Max): 10/10 | Churn Δ: 31 | Churn Cumulative: 213 | Contributors (this commit): 1 | Commits (past 90d): 4 | Contributors (cumulative): 1 | DMM Complexity: 1.0\n\nDIFF:\n@@ -1,5 +1,6 @@\n from HTMLParser import HTMLParser\n from lxml import etree\n+import lxml.html\n \n from scrapy.link import Link\n from scrapy.utils.python import unique as unique_list\n@@ -160,3 +161,33 @@ class LinkTarget(object):\n \n     def close(self):\n         return self.base_url, self.links\n+\n+\n+class LxmlParserLinkExtractor(object):\n+    def __init__(self, tag=\"a\", attr=\"href\", process=None, unique=False):\n+        self.scan_tag = tag if callable(tag) else lambda t: t == tag\n+        self.scan_attr = attr if callable(attr) else lambda a: a == attr\n+        self.process_attr = process if callable(process) else lambda v: v\n+        self.unique = unique\n+\n+        self.links = []\n+\n+    def _extract_links(self, response_text, response_url):\n+        html = lxml.html.fromstring(response_text)\n+        html.make_links_absolute(response_url)\n+        for e, a, l, p in html.iterlinks():\n+            if self.scan_tag(e.tag):\n+                if self.scan_attr(a):\n+                    link = Link(self.process_attr(l), text=e.text)\n+                    self.links.append(link)\n+\n+        links = unique_list(self.links, key=lambda link: link.url) \\\n+                if self.unique else self.links\n+\n+        return links\n+\n+    def extract_links(self, response):\n+        # wrapper needed to allow to work directly with text\n+        return self._extract_links(response.body, response.url)\n+\n+\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "scrapy#8724ee1674dc4fe1f391d3cfa4b90915e123c995", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 22 | Lines Deleted: 13 | Files Changed: 3 | Hunks: 10 | Methods Changed: 4 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 35 | Churn Cumulative: 647 | Contributors (this commit): 4 | Commits (past 90d): 11 | Contributors (cumulative): 9 | DMM Complexity: 1.0\n\nDIFF:\n@@ -14,6 +14,10 @@ class UtilsRequestTest(unittest.TestCase):\n         self.assertEqual(request_fingerprint(r1), request_fingerprint(r1))\n         self.assertEqual(request_fingerprint(r1), request_fingerprint(r2))\n \n+        r1 = Request('http://www.example.com/hnnoticiaj1.aspx?78132,199')\n+        r2 = Request('http://www.example.com/hnnoticiaj1.aspx?78160,199')\n+        self.assertNotEqual(request_fingerprint(r1), request_fingerprint(r2))\n+\n         # make sure caching is working\n         self.assertEqual(request_fingerprint(r1), r1.cache['fingerprint'])\n \n@@ -55,6 +59,7 @@ class UtilsRequestTest(unittest.TestCase):\n         fp2 = request_fingerprint(r2)\n         self.assertNotEqual(fp1, fp2)\n \n+\n     def test_request_authenticate(self):\n         r = Request(\"http://www.example.com\")\n         request_authenticate(r, 'someuser', 'somepass')\n\n@@ -102,15 +102,18 @@ class UrlUtilsTest(unittest.TestCase):\n                                           \"http://www.example.com/do?a=50&b=2&b=5&c=3\")\n \n         # using keep_blank_values\n+        self.assertEqual(canonicalize_url(\"http://www.example.com/do?b=&a=2\", keep_blank_values=False),\n+                                          \"http://www.example.com/do?a=2\")\n         self.assertEqual(canonicalize_url(\"http://www.example.com/do?b=&a=2\"),\n-                                          \"http://www.example.com/do?a=2\")\n-        self.assertEqual(canonicalize_url(\"http://www.example.com/do?b=&a=2\", keep_blank_values=True),\n                                           \"http://www.example.com/do?a=2&b=\")\n-        self.assertEqual(canonicalize_url(\"http://www.example.com/do?b=&c&a=2\"),\n+        self.assertEqual(canonicalize_url(\"http://www.example.com/do?b=&c&a=2\", keep_blank_values=False),\n                                           \"http://www.example.com/do?a=2\")\n-        self.assertEqual(canonicalize_url(\"http://www.example.com/do?b=&c&a=2\", keep_blank_values=True),\n+        self.assertEqual(canonicalize_url(\"http://www.example.com/do?b=&c&a=2\"),\n                                           \"http://www.example.com/do?a=2&b=&c=\")\n \n+        self.assertEqual(canonicalize_url(u'http://www.example.com/do?1750,4'),\n+                                           'http://www.example.com/do?1750%2C4=')\n+                        \n         # spaces\n         self.assertEqual(canonicalize_url(\"http://www.example.com/do?q=a space&a=1\"),\n                                           \"http://www.example.com/do?a=1&q=a+space\")\n\n@@ -127,7 +127,7 @@ def add_or_replace_parameter(url, name, new_value, sep='&'):\n                                name+'='+new_value)\n     return next_url\n \n-def canonicalize_url(url, keep_blank_values=False, keep_fragments=False):\n+def canonicalize_url(url, keep_blank_values=True, keep_fragments=False):\n     \"\"\"Canonicalize the given url by applying the following procedures:\n \n     - sort query arguments, first by key, then by value\n@@ -143,12 +143,13 @@ def canonicalize_url(url, keep_blank_values=False, keep_fragments=False):\n \n     For examples see the tests in scrapy.tests.test_utils_url\n     \"\"\"\n-    url = unicode_to_str(url)\n-    scheme, netloc, path, params, query, fragment = urlparse.urlparse(url)\n-    keyvals = cgi.parse_qsl(query, keep_blank_values)\n-    keyvals.sort()\n-    query = urllib.urlencode(keyvals)\n-    path = urllib.quote(urllib.unquote(path))\n-    fragment = '' if not keep_fragments else fragment\n-    return urlparse.urlunparse((scheme, netloc, path, params, query, fragment))\n \n+    url = unicode_to_str(url)\n+    parts = list(urlparse.urlparse(url))\n+    keyvals = cgi.parse_qsl(parts[4], keep_blank_values)\n+    keyvals.sort()\n+    parts[2] = urllib.quote(urllib.unquote(parts[2]))\n+    parts[4] = urllib.urlencode(keyvals)\n+    if not keep_fragments:\n+        parts[5] = ''\n+    return urlparse.urlunparse(parts)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "scrapy#0d47fdf6e83b2eda16254d3368366215e6c4f73a", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 6 | Lines Deleted: 7 | Files Changed: 1 | Hunks: 2 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 13 | Churn Cumulative: 356 | Contributors (this commit): 4 | Commits (past 90d): 7 | Contributors (cumulative): 4 | DMM Complexity: 0.0\n\nDIFF:\n@@ -145,11 +145,10 @@ def canonicalize_url(url, keep_blank_values=True, keep_fragments=False):\n     \"\"\"\n \n     url = unicode_to_str(url)\n-    parts = list(urlparse.urlparse(url))\n-    keyvals = cgi.parse_qsl(parts[4], keep_blank_values)\n+    scheme, netloc, path, params, query, fragment = urlparse.urlparse(url)\n+    keyvals = cgi.parse_qsl(query, keep_blank_values)\n     keyvals.sort()\n-    parts[2] = urllib.quote(urllib.unquote(parts[2]))\n-    parts[4] = urllib.urlencode(keyvals)\n-    if not keep_fragments:\n-        parts[5] = ''\n-    return urlparse.urlunparse(parts)\n+    query = urllib.urlencode(keyvals)\n+    path = urllib.quote(urllib.unquote(path))\n+    fragment = '' if not keep_fragments else fragment\n+    return urlparse.urlunparse((scheme, netloc, path, params, query, fragment))\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "scrapy#60de63943471f1ea57bc2ea643b6fb0f358a7b05", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 32 | Lines Deleted: 8 | Files Changed: 2 | Hunks: 5 | Methods Changed: 6 | Complexity Δ (Sum/Max): 3/2 | Churn Δ: 40 | Churn Cumulative: 68 | Contributors (this commit): 1 | Commits (past 90d): 9 | Contributors (cumulative): 2 | DMM Complexity: 1.0\n\nDIFF:\n@@ -0,0 +1,18 @@\n+class DeclarativeMeta(type):\n+    \"\"\"Metaclass for declarative objects\"\"\"\n+\n+    def __new__(meta, class_name, bases, attrs):\n+        cls = type.__new__(meta, class_name, bases, attrs)\n+        cls.__classinit__.im_func(cls, attrs)\n+        return cls\n+\n+\n+class Declarative(object):\n+    \"\"\"Base class for declarative objects\"\"\"\n+\n+    __metaclass__ = DeclarativeMeta\n+\n+    def __classinit__(cls, attrs): \n+        \"\"\"Override this method to initialize your class\"\"\"\n+        pass\n+\n\n@@ -1,19 +1,25 @@\n from scrapy.item import ScrapedItem\n+from scrapy.contrib_exp.newitem.declarative import Declarative\n from scrapy.contrib_exp.newitem.fields import Field\n \n \n-class Item(ScrapedItem):\n-    \"\"\"\n-    This is the base class for all scraped items.\n-    \"\"\"\n+class Item(Declarative, ScrapedItem):\n+    \"\"\" This is the base class for all scraped items. \"\"\"\n+\n+    fields = {}\n+\n+    def __classinit__(cls, attrs):\n+        cls.fields = cls.fields.copy()\n+        for n, v in attrs.items():\n+            if isinstance(v, Field):\n+                cls.fields[n] = v\n \n     def __init__(self):\n         self._values = {}\n-        self._fields = self._get_fields()\n \n-    def _get_fields(self):\n-        return dict(i for i in self.__class__.__dict__.iteritems() \\\n-                    if isinstance(i[1], Field))\n+    @property\n+    def _fields(self):\n+        return self.__class__.fields\n \n     def __setattr__(self, name, value):\n         if not name.startswith('_'):\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "scrapy#d26b968f516f8e326ab7a86a6e8ff3a0a501fb84", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 1 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 1 | Methods Changed: 1 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 2 | Churn Cumulative: 27 | Contributors (this commit): 2 | Commits (past 90d): 3 | Contributors (cumulative): 2 | DMM Complexity: None\n\nDIFF:\n@@ -12,4 +12,4 @@ class DuplicatesFilterMiddleware(object):\n     def enqueue_request(self, domain, request, priority):\n         added = dupefilter.add(domain, request)\n         if not (added or request.dont_filter):\n-            raise IgnoreRequest('Skipped (already seen request')\n+            raise IgnoreRequest('Skipped (already seen request)')\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "scrapy#e744e875170a392cb4511171ce99c653102c900a", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 8 | Lines Deleted: 5 | Files Changed: 1 | Hunks: 4 | Methods Changed: 2 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 13 | Churn Cumulative: 63 | Contributors (this commit): 1 | Commits (past 90d): 9 | Contributors (cumulative): 1 | DMM Complexity: 1.0\n\nDIFF:\n@@ -22,22 +22,25 @@ class Item(Declarative, ScrapedItem):\n         return self.__class__.fields\n \n     def __setattr__(self, name, value):\n-        if not name.startswith('_'):\n+        if name.startswith('_'):\n+            return object.__setattr__(self, name, value)\n+\n         if name in self._fields.keys():\n             self._values[name] = self._fields[name].assign(value)\n         else:\n             raise AttributeError(name)\n-        else:\n-            object.__setattr__(self, name, value)\n \n     def __getattribute__(self, name):\n-        if not name.startswith('_') and name in self._fields.keys():\n+        if name.startswith('_'):\n+            return object.__getattribute__(self, name)\n+        \n+        if name in self._fields.keys():\n             try:\n                 return self._values[name]\n             except KeyError:\n                 return self._fields[name].default\n         else:\n-            return object.__getattribute__(self, name)\n+            raise AttributeError(name)\n \n     def __repr__(self):\n         \"\"\"\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "scrapy#154dded1de6c0a1224e402315b618415bef88f16", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 7 | Lines Deleted: 10 | Files Changed: 1 | Hunks: 3 | Methods Changed: 2 | Complexity Δ (Sum/Max): -1/0 | Churn Δ: 17 | Churn Cumulative: 147 | Contributors (this commit): 2 | Commits (past 90d): 14 | Contributors (cumulative): 2 | DMM Complexity: 0.0\n\nDIFF:\n@@ -1,20 +1,17 @@\n+from scrapy.contrib_exp.newitem.declarative import Declarative\n from scrapy.utils.python import get_func_args\n \n def is_adaptor(func):\n     return callable(func) and 'adaptor_args' in get_func_args(func)\n \n \n-class ItemAdaptorMetaClass(type):\n-    def __new__(meta, name, bases, dct):\n-        # defines adaptor fields as static methods\n-        for key, func in dct.items():\n-            if not key.startswith('_') and is_adaptor(func):\n-                dct[key] = staticmethod(func)\n-        return type.__new__(meta, name, bases, dct)\n+class ItemAdaptor(Declarative):\n \n-\n-class ItemAdaptor(object):\n-    __metaclass__ = ItemAdaptorMetaClass\n+    def __classinit__(cls, attrs):\n+        # defines adaptors as staticmethods\n+        for n, v in attrs.items():\n+            if is_adaptor(v):\n+                setattr(cls, n, staticmethod(v))\n \n     def __init__(self, response=None, item=None):\n         self.item_instance = item if item else self.item_class()\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "scrapy#b5b6b0cefc6ce4cfb0bb2896ad41b8658ac59327", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 7 | Lines Deleted: 11 | Files Changed: 2 | Hunks: 7 | Methods Changed: 5 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 18 | Churn Cumulative: 228 | Contributors (this commit): 2 | Commits (past 90d): 25 | Contributors (cumulative): 3 | DMM Complexity: 0.0\n\nDIFF:\n@@ -21,7 +21,7 @@ class ItemAdaptor(Declarative):\n \n     def _get_field_adaptors(self):\n         fa = {}\n-        for field in self.item_instance._fields.keys():\n+        for field in self.item_instance.fields.keys():\n             try:\n                 fa[field] = object.__getattribute__(self, field)\n             except:\n\n@@ -17,28 +17,24 @@ class Item(Declarative, ScrapedItem):\n     def __init__(self):\n         self._values = {}\n \n-    @property\n-    def _fields(self):\n-        return self.__class__.fields\n-\n     def __setattr__(self, name, value):\n         if name.startswith('_'):\n             return object.__setattr__(self, name, value)\n \n-        if name in self._fields.keys():\n-            self._values[name] = self._fields[name].assign(value)\n+        if name in self.fields.keys():\n+            self._values[name] = self.fields[name].assign(value)\n         else:\n             raise AttributeError(name)\n \n     def __getattribute__(self, name):\n-        if name.startswith('_'):\n+        if name.startswith('_') or name == 'fields':\n             return object.__getattribute__(self, name)\n         \n-        if name in self._fields.keys():\n+        if name in self.fields.keys():\n             try:\n                 return self._values[name]\n             except KeyError:\n-                return self._fields[name].default\n+                return self.fields[name].default\n         else:\n             raise AttributeError(name)\n \n@@ -47,5 +43,5 @@ class Item(Declarative, ScrapedItem):\n         Generate the following format so that items can be deserialized\n         easily: ClassName({'attrib': value, ...})\n         \"\"\"\n-        reprdict = dict((field, getattr(self, field)) for field in self._fields)\n+        reprdict = dict((field, getattr(self, field)) for field in self.fields)\n         return \"%s(%s)\" % (self.__class__.__name__, repr(reprdict))\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "scrapy#ec22373b5ac5cade351ed3314f8e0a53fc4c172d", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 43 | Lines Deleted: 38 | Files Changed: 2 | Hunks: 17 | Methods Changed: 10 | Complexity Δ (Sum/Max): 4/3 | Churn Δ: 81 | Churn Cumulative: 339 | Contributors (this commit): 2 | Commits (past 90d): 25 | Contributors (cumulative): 4 | DMM Complexity: 0.0\n\nDIFF:\n@@ -7,45 +7,42 @@ def is_adaptor(func):\n \n class ItemAdaptor(Declarative):\n \n+    item_class = None\n+    default_adaptor = None\n+    field_adaptors = {}\n+\n     def __classinit__(cls, attrs):\n-        # defines adaptors as staticmethods\n+        cls.field_adaptors = cls.field_adaptors.copy()\n+        if cls.item_class:\n+            # set new adaptors\n             for n, v in attrs.items():\n-            if is_adaptor(v):\n-                setattr(cls, n, staticmethod(v))\n+                if n in cls.item_class.fields.keys() and is_adaptor(v):\n+                    cls.set_adaptor(n, v)\n+            \n+            # if default_adaptor is set, use it for the unadapted fields\n+            if cls.default_adaptor:\n+                for field in cls.item_class.fields.keys():\n+                    if field not in cls.field_adaptors.keys():\n+                        cls.set_adaptor(field, cls.default_adaptor.im_func)\n+\n+    @classmethod\n+    def set_adaptor(cls, name, func):\n+        cls.field_adaptors[name] = func\n+        # define adaptor as a staticmethod\n+        setattr(cls, name, staticmethod(func))\n \n     def __init__(self, response=None, item=None):\n         self.item_instance = item if item else self.item_class()\n         self._response = response\n-        self._field_adaptors = self._get_field_adaptors()\n-        self._default_adaptor = self._get_default_adaptor()\n-\n-    def _get_field_adaptors(self):\n-        fa = {}\n-        for field in self.item_instance.fields.keys():\n-            try:\n-                fa[field] = object.__getattribute__(self, field)\n-            except:\n-                pass\n-\n-        return fa\n-\n-    def _get_default_adaptor(self):\n-        try:\n-            return object.__getattribute__(self, 'default_adaptor')\n-        except:\n-            return None\n \n     def __setattr__(self, name, value):\n-        if name.startswith('_') or name == 'item_instance' \\\n-                or name == 'default_adaptor':\n+        if (name.startswith('_') or name == 'item_instance' \\\n+            or name == 'default_adaptor' or name == 'field_adaptors'):\n             return object.__setattr__(self, name, value)\n \n         try:\n-            fa = self._field_adaptors[name]\n+            fa = self.field_adaptors[name]\n         except KeyError:\n-            if self._default_adaptor:\n-                fa = self._default_adaptor\n-            else:\n             return setattr(self.item_instance, name, value)\n \n         adaptor_args = {'response': self._response, 'item': self.item_instance}\n@@ -53,7 +50,8 @@ class ItemAdaptor(Declarative):\n         setattr(self.item_instance, name, ovalue)\n \n     def __getattribute__(self, name):\n-        if name.startswith('_') or name.startswith('item_'):\n+        if (name.startswith('_') or name.startswith('item_') \\\n+            or name == 'default_adaptor' or name == 'field_adaptors'):\n             return object.__getattribute__(self, name)\n \n         return getattr(self.item_instance, name)\n\n@@ -1,4 +1,3 @@\n-\n import unittest\n import string\n from scrapy.contrib_exp.newitem.adaptors import adaptor, ItemAdaptor\n@@ -10,6 +9,7 @@ class TestItem(Item):\n     url = StringField()\n     summary = StringField()\n \n+\n class TestAdaptor(ItemAdaptor):\n     item_class = TestItem\n     name = lambda v, adaptor_args: v.title()\n@@ -29,7 +29,7 @@ class ItemAdaptorTest(unittest.TestCase):\n             default_adaptor = lambda v, adaptor_args: v.title()\n \n         dta = DefaultedTestAdaptor()\n-        assert dta._default_adaptor\n+        assert dta.default_adaptor\n         dta.name = 'marta'\n         assert dta.name == 'Marta'\n \n@@ -38,8 +38,8 @@ class ItemAdaptorTest(unittest.TestCase):\n             url = lambda v, adaptor_args: v.lower()\n \n         ia = ChildTestAdaptor()\n-        assert 'url' in ia._field_adaptors\n-        assert 'name' in ia._field_adaptors\n+        assert 'url' in ia.field_adaptors\n+        assert 'name' in ia.field_adaptors\n \n         ia.url = 'HTTP://scrapy.ORG'\n         self.assertEqual(ia.url, 'http://scrapy.org')\n@@ -47,16 +47,14 @@ class ItemAdaptorTest(unittest.TestCase):\n         ia.name = 'marta'\n         self.assertEqual(ia.name, 'Marta')\n \n-\n         class ChildChildTestAdaptor(ChildTestAdaptor):\n             url = lambda v, adaptor_args: v.upper()\n             summary = lambda v, adaptor_args: v\n \n         ia = ChildChildTestAdaptor()\n-        assert 'url' in ia._field_adaptors\n-        assert 'name' in ia._field_adaptors\n-        assert 'summary' in ia._field_adaptors\n-\n+        assert 'url' in ia.field_adaptors\n+        assert 'name' in ia.field_adaptors\n+        assert 'summary' in ia.field_adaptors\n \n         ia.url = 'HTTP://scrapy.ORG'\n         self.assertEqual(ia.url, 'HTTP://SCRAPY.ORG')\n@@ -75,7 +73,17 @@ class ItemAdaptorTest(unittest.TestCase):\n         ia.name = 'Marta'\n         self.assertEqual(ia.name, 'mARTA')\n \n+    def test_staticdefaults(self):\n+        class ParentAdaptorDefaulted(ItemAdaptor):\n+            item_class = TestItem\n+            default_adaptor = lambda v, adaptor_args: v.title()\n \n+        class ChildAdaptorDefaulted(ParentAdaptorDefaulted):\n+            name = adaptor(ParentAdaptorDefaulted.name, string.swapcase)\n+\n+        dia = ChildAdaptorDefaulted()\n+        dia.name = 'marta'\n+        self.assertEqual(dia.name, 'mARTA')\n \n \n class TreeadaptTest(unittest.TestCase):\n@@ -109,7 +117,6 @@ class TreeadaptTest(unittest.TestCase):\n         self.assertEqual(ad(0, {'add_value': 3}), [3])\n         self.assertEqual(ad(0), [5])\n \n-\n     def test_4_treelogic(self):\n         split1 = lambda v: v.split('&')\n         split2 = lambda v: v.split('=')\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "scrapy#8ad4211e26a0a47a7ad2da6c25fdee8316a54314", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 2 | Lines Deleted: 2 | Files Changed: 1 | Hunks: 2 | Methods Changed: 3 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 4 | Churn Cumulative: 207 | Contributors (this commit): 2 | Commits (past 90d): 17 | Contributors (cumulative): 2 | DMM Complexity: None\n\nDIFF:\n@@ -2,7 +2,7 @@ from scrapy.contrib_exp.newitem.declarative import Declarative\n from scrapy.utils.python import get_func_args\n \n def is_adaptor(func):\n-    return callable(func) and 'adaptor_args' in get_func_args(func)\n+    return hasattr(func, '__call__') and 'adaptor_args' in get_func_args(func)\n \n \n class ItemAdaptor(Declarative):\n@@ -77,7 +77,7 @@ def adaptor(*funcs, **adaptor_args):\n \n     def _adaptor(value, adaptor_args=None):\n         values = value if isinstance(value, (list, tuple)) else [value]\n-        aargs = dict(t for d in [pipe_adaptor_args, adaptor_args or {}] for t in d.iteritems())\n+        aargs = dict(t for d in [pipe_adaptor_args, adaptor_args or {}] for t in d.items())\n         pipe_kwargs = {'adaptor_args': aargs}\n \n         for func, takes_args in _funcs:\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "scrapy#e3c9f5951acca75cda73fbbd705968ff347b6b9b", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 105 | Lines Deleted: 5 | Files Changed: 2 | Hunks: 4 | Methods Changed: 9 | Complexity Δ (Sum/Max): 10/9 | Churn Δ: 110 | Churn Cumulative: 112 | Contributors (this commit): 2 | Commits (past 90d): 3 | Contributors (cumulative): 3 | DMM Complexity: 1.0\n\nDIFF:\n@@ -14,13 +14,14 @@ class HttpCompressionMiddleware(object):\n \n     def process_response(self, request, response, spider):\n         if isinstance(response, Response):\n-            content_encoding = response.headers.get('Content-Encoding')\n+            content_encoding = response.headers.getlist('Content-Encoding')\n             if content_encoding:\n-                encoding = content_encoding[0].lower()\n-                raw_body = response.body\n-                decoded_body = self._decode(raw_body, encoding)\n+                encoding = content_encoding.pop()\n+                decoded_body = self._decode(response.body, encoding.lower())\n                 response = response.replace(body=decoded_body)\n-                response.headers['Content-Encoding'] = content_encoding[1:]\n+                if not content_encoding:\n+                    del response.headers['Content-Encoding']\n+\n         return response\n \n     def _decode(self, body, encoding):\n\n@@ -0,0 +1,99 @@\n+from __future__ import with_statement\n+\n+from unittest import TestCase\n+from os.path import join, abspath, dirname\n+\n+from scrapy.spider import spiders\n+from scrapy.http import Response, Request\n+from scrapy.contrib.downloadermiddleware.httpcompression import HttpCompressionMiddleware\n+\n+\n+SAMPLEDIR = join(abspath(dirname(__file__)), 'sample_data/compressed')\n+\n+FORMAT = {\n+        'gzip': ('html-gzip.bin', 'gzip'),\n+        'rawdeflate': ('html-rawdeflate.bin', 'deflate'),\n+        'zlibdeflate': ('html-zlibdeflate.bin', 'deflate'),\n+        }\n+\n+class HttpCompressionTest(TestCase):\n+\n+    def setUp(self):\n+        spiders.spider_modules = ['scrapy.tests.test_spiders']\n+        spiders.reload()\n+        self.spider = spiders.fromdomain('scrapytest.org')\n+        self.mw = HttpCompressionMiddleware()\n+\n+    def _getresponse(self, coding):\n+        if coding not in FORMAT:\n+            raise ValueError()\n+\n+        samplefile, contentencoding = FORMAT[coding]\n+\n+        with open(join(SAMPLEDIR, samplefile), 'rb') as sample:\n+            body = sample.read()\n+\n+        headers = {\n+                'Server': 'Yaws/1.49 Yet Another Web Server',\n+                'Date': 'Sun, 08 Mar 2009 00:41:03 GMT',\n+                'Content-Length': len(body),\n+                'Content-Type': 'text/html',\n+                'Content-Encoding': contentencoding,\n+                }\n+\n+        response = Response('http://scrapytest.org/', body=body, headers=headers)\n+        response.request = Request('http://scrapytest.org', headers={'Accept-Encoding': 'gzip,deflate'})\n+        return response\n+\n+    def test_process_request(self):\n+        request = Request('http://scrapytest.org')\n+        assert 'Accept-Encoding' not in request.headers\n+        self.mw.process_request(request, self.spider)\n+        self.assertEqual(request.headers.get('Accept-Encoding'), 'gzip,deflate')\n+\n+    def test_process_response_gzip(self):\n+        response = self._getresponse('gzip')\n+        request = response.request\n+\n+        self.assertEqual(response.headers['Content-Encoding'], 'gzip')\n+        newresponse = self.mw.process_response(request, response, self.spider)\n+        assert newresponse is not response\n+        assert newresponse.body.startswith('<!DOCTYPE')\n+        assert 'Content-Encoding' not in newresponse.headers\n+\n+    def test_process_response_rawdeflate(self):\n+        response = self._getresponse('rawdeflate')\n+        request = response.request\n+\n+        self.assertEqual(response.headers['Content-Encoding'], 'deflate')\n+        newresponse = self.mw.process_response(request, response, self.spider)\n+        assert newresponse is not response\n+        assert newresponse.body.startswith('<!DOCTYPE')\n+        assert 'Content-Encoding' not in newresponse.headers\n+\n+    def test_process_response_zlibdelate(self):\n+        response = self._getresponse('zlibdeflate')\n+        request = response.request\n+\n+        self.assertEqual(response.headers['Content-Encoding'], 'deflate')\n+        newresponse = self.mw.process_response(request, response, self.spider)\n+        assert newresponse is not response\n+        assert newresponse.body.startswith('<!DOCTYPE')\n+        assert 'Content-Encoding' not in newresponse.headers\n+\n+    def test_process_response_plain(self):\n+        response = Response('http://scrapytest.org', body='<!DOCTYPE...')\n+        request = Request('http://scrapytest.org')\n+\n+        assert not response.headers.get('Content-Encoding')\n+        newresponse = self.mw.process_response(request, response, self.spider)\n+        assert newresponse is response\n+        assert newresponse.body.startswith('<!DOCTYPE')\n+\n+    def test_multipleencodings(self):\n+        response = self._getresponse('gzip')\n+        response.headers['Content-Encoding'] = ['uuencode', 'gzip']\n+        request = response.request\n+        newresponse = self.mw.process_response(request, response, self.spider)\n+        assert newresponse is not response\n+        self.assertEqual(newresponse.headers.getlist('Content-Encoding'), ['uuencode'])\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "scrapy#4093a4b83e51bb9d0208ddd5406f26ba0ba163ca", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 20 | Lines Deleted: 1 | Files Changed: 1 | Hunks: 2 | Methods Changed: 0 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 21 | Churn Cumulative: 22 | Contributors (this commit): 1 | Commits (past 90d): 1 | Contributors (cumulative): 1 | DMM Complexity: None\n\nDIFF:\n@@ -1 +1,20 @@\n-\"\"\" \"\"\"\n\\ No newline at end of file\n+\"\"\"\n+scrapy.tests: this package contains all Scrapy unittests\n+\n+To run all Scrapy unittests type: \n+\n+    python -m scrapy.tests\n+\n+Keep in mind that some tests may be skipped if you don't have a MySQL database\n+up and configured appropriately.\n+\"\"\"\n+\n+if __name__ == '__main__':\n+    import os\n+    from twisted.trial import runner, reporter\n+\n+    os.environ['SCRAPY_SETTINGS_DISABLED'] = '1'\n+    loader = runner.TestLoader()\n+    runner = runner.TrialRunner(reporter.TreeReporter)\n+    suite = loader.loadByNames(['scrapy'], recurse=True)\n+    runner.run(suite)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "scrapy#f9aa0a6a019041820540f997cb3bb87b7c897dc4", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 25 | Lines Deleted: 18 | Files Changed: 2 | Hunks: 10 | Methods Changed: 10 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 43 | Churn Cumulative: 386 | Contributors (this commit): 2 | Commits (past 90d): 28 | Contributors (cumulative): 4 | DMM Complexity: 0.875\n\nDIFF:\n@@ -1,8 +1,15 @@\n from scrapy.contrib_exp.newitem.declarative import Declarative\n from scrapy.utils.python import get_func_args\n \n-def is_adaptor(func):\n-    return hasattr(func, '__call__') and 'adaptor_args' in get_func_args(func)\n+\n+def adaptize(func):\n+    func_args = get_func_args(func)\n+    if 'adaptor_args' in func_args:\n+        return func\n+\n+    def _adaptor(value, adaptor_args):\n+        return func(value)\n+    return _adaptor\n \n \n class ItemAdaptor(Declarative):\n@@ -12,24 +19,24 @@ class ItemAdaptor(Declarative):\n     field_adaptors = {}\n \n     def __classinit__(cls, attrs):\n+        def set_adaptor(cls, name, func):\n+            adaptor = adaptize(func)\n+            cls.field_adaptors[name] = adaptor\n+            # define adaptor as a staticmethod\n+            setattr(cls, name, staticmethod(adaptor))\n+\n         cls.field_adaptors = cls.field_adaptors.copy()\n         if cls.item_class:\n             # set new adaptors\n             for n, v in attrs.items():\n-                if n in cls.item_class.fields.keys() and is_adaptor(v):\n-                    cls.set_adaptor(n, v)\n+                if n in cls.item_class.fields.keys():\n+                    set_adaptor(cls, n, v)\n             \n             # if default_adaptor is set, use it for the unadapted fields\n             if cls.default_adaptor:\n                 for field in cls.item_class.fields.keys():\n                     if field not in cls.field_adaptors.keys():\n-                        cls.set_adaptor(field, cls.default_adaptor.im_func)\n-\n-    @classmethod\n-    def set_adaptor(cls, name, func):\n-        cls.field_adaptors[name] = func\n-        # define adaptor as a staticmethod\n-        setattr(cls, name, staticmethod(func))\n+                        set_adaptor(cls, field, cls.default_adaptor.im_func)\n \n     def __init__(self, response=None, item=None):\n         self.item_instance = item if item else self.item_class()\n\n@@ -12,7 +12,7 @@ class TestItem(Item):\n \n class TestAdaptor(ItemAdaptor):\n     item_class = TestItem\n-    name = lambda v, adaptor_args: v.title()\n+    name = lambda v: v.title()\n \n \n class ItemAdaptorTest(unittest.TestCase):\n@@ -26,7 +26,7 @@ class ItemAdaptorTest(unittest.TestCase):\n     def test_defaultadaptor(self):\n         class DefaultedTestAdaptor(ItemAdaptor):\n             item_class = TestItem\n-            default_adaptor = lambda v, adaptor_args: v.title()\n+            default_adaptor = lambda v: v.title()\n \n         dta = DefaultedTestAdaptor()\n         assert dta.default_adaptor\n@@ -35,7 +35,7 @@ class ItemAdaptorTest(unittest.TestCase):\n \n     def test_inheritance(self):\n         class ChildTestAdaptor(TestAdaptor):\n-            url = lambda v, adaptor_args: v.lower()\n+            url = lambda v: v.lower()\n \n         ia = ChildTestAdaptor()\n         assert 'url' in ia.field_adaptors\n@@ -48,8 +48,8 @@ class ItemAdaptorTest(unittest.TestCase):\n         self.assertEqual(ia.name, 'Marta')\n \n         class ChildChildTestAdaptor(ChildTestAdaptor):\n-            url = lambda v, adaptor_args: v.upper()\n-            summary = lambda v, adaptor_args: v\n+            url = lambda v: v.upper()\n+            summary = lambda v: v\n \n         ia = ChildChildTestAdaptor()\n         assert 'url' in ia.field_adaptors\n@@ -64,7 +64,7 @@ class ItemAdaptorTest(unittest.TestCase):\n \n     def test_staticmethods(self):\n         class ParentAdaptor(TestAdaptor):\n-            name = adaptor(lambda v, adaptor_args: v)\n+            name = adaptor(lambda v: v)\n \n         class ChildAdaptor(ParentAdaptor):\n             name = adaptor(ParentAdaptor.name, string.swapcase)\n@@ -76,7 +76,7 @@ class ItemAdaptorTest(unittest.TestCase):\n     def test_staticdefaults(self):\n         class ParentAdaptorDefaulted(ItemAdaptor):\n             item_class = TestItem\n-            default_adaptor = lambda v, adaptor_args: v.title()\n+            default_adaptor = lambda v: v.title()\n \n         class ChildAdaptorDefaulted(ParentAdaptorDefaulted):\n             name = adaptor(ParentAdaptorDefaulted.name, string.swapcase)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "scrapy#8bda81c01d90b8f0d5ad082bd7240dbb6ff94d86", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 17 | Lines Deleted: 18 | Files Changed: 1 | Hunks: 8 | Methods Changed: 3 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 35 | Churn Cumulative: 185 | Contributors (this commit): 2 | Commits (past 90d): 11 | Contributors (cumulative): 2 | DMM Complexity: 0.0\n\nDIFF:\n@@ -4,17 +4,27 @@ from scrapy.contrib_exp.newitem.adaptors import adaptor, ItemAdaptor\n from scrapy.contrib_exp.newitem import Item, StringField\n \n \n-class TestItem(Item):\n+class BaseItem(Item):\n     name = StringField()\n+\n+\n+class TestItem(BaseItem):\n     url = StringField()\n     summary = StringField()\n \n \n-class TestAdaptor(ItemAdaptor):\n+class BaseAdaptor(ItemAdaptor):\n     item_class = TestItem\n+\n+\n+class TestAdaptor(BaseAdaptor):\n     name = lambda v: v.title()\n \n \n+class DefaultedAdaptor(BaseAdaptor):\n+    default_adaptor = lambda v: v.title()\n+\n+\n class ItemAdaptorTest(unittest.TestCase):\n \n     def test_basic(self):\n@@ -24,11 +34,7 @@ class ItemAdaptorTest(unittest.TestCase):\n         self.assertEqual(ia.name, 'Marta')\n \n     def test_defaultadaptor(self):\n-        class DefaultedTestAdaptor(ItemAdaptor):\n-            item_class = TestItem\n-            default_adaptor = lambda v: v.title()\n-\n-        dta = DefaultedTestAdaptor()\n+        dta = DefaultedAdaptor()\n         assert dta.default_adaptor\n         dta.name = 'marta'\n         assert dta.name == 'Marta'\n@@ -63,23 +69,16 @@ class ItemAdaptorTest(unittest.TestCase):\n         self.assertEqual(ia.name, 'Marta')\n \n     def test_staticmethods(self):\n-        class ParentAdaptor(TestAdaptor):\n-            name = adaptor(lambda v: v)\n-\n-        class ChildAdaptor(ParentAdaptor):\n-            name = adaptor(ParentAdaptor.name, string.swapcase)\n+        class ChildAdaptor(TestAdaptor):\n+            name = adaptor(TestAdaptor.name, string.swapcase)\n \n         ia = ChildAdaptor()\n         ia.name = 'Marta'\n         self.assertEqual(ia.name, 'mARTA')\n \n     def test_staticdefaults(self):\n-        class ParentAdaptorDefaulted(ItemAdaptor):\n-            item_class = TestItem\n-            default_adaptor = lambda v: v.title()\n-\n-        class ChildAdaptorDefaulted(ParentAdaptorDefaulted):\n-            name = adaptor(ParentAdaptorDefaulted.name, string.swapcase)\n+        class ChildAdaptorDefaulted(DefaultedAdaptor):\n+            name = adaptor(DefaultedAdaptor.name, string.swapcase)\n \n         dia = ChildAdaptorDefaulted()\n         dia.name = 'marta'\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "scrapy#f105359666d910fc64f0e8b66031ea54a20fb372", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 28 | Lines Deleted: 18 | Files Changed: 1 | Hunks: 6 | Methods Changed: 5 | Complexity Δ (Sum/Max): 0/0 | Churn Δ: 46 | Churn Cumulative: 282 | Contributors (this commit): 2 | Commits (past 90d): 19 | Contributors (cumulative): 2 | DMM Complexity: 1.0\n\nDIFF:\n@@ -12,31 +12,41 @@ def adaptize(func):\n     return _adaptor\n \n \n-class ItemAdaptor(Declarative):\n+class ItemAdaptorMeta(type):\n+    def __new__(meta, class_name, bases, attrs):\n+        cls = type.__new__(meta, class_name, bases, attrs)\n+        cls.__classinit__.im_func(cls, attrs)\n+        return cls\n+\n+    def __getattr__(cls, name):\n+        if name in cls.item_class.fields:\n+            return cls.default_adaptor\n+\n+        raise AttributeError\n+\n+\n+class ItemAdaptor(object):\n+    __metaclass__ = ItemAdaptorMeta\n+\n+    IDENTITY = lambda v: v\n \n     item_class = None\n-    default_adaptor = None\n+    default_adaptor = IDENTITY\n     field_adaptors = {}\n \n     def __classinit__(cls, attrs):\n-        def set_adaptor(cls, name, func):\n-            adaptor = adaptize(func)\n-            cls.field_adaptors[name] = adaptor\n-            # define adaptor as a staticmethod\n-            setattr(cls, name, staticmethod(adaptor))\n+        if 'default_adaptor' in attrs:\n+            setattr(cls, 'default_adaptor',\n+                    staticmethod(adaptize(attrs['default_adaptor'])))\n \n         cls.field_adaptors = cls.field_adaptors.copy()\n-        if cls.item_class:\n-            # set new adaptors\n-            for n, v in attrs.items():\n-                if n in cls.item_class.fields.keys():\n-                    set_adaptor(cls, n, v)\n         \n-            # if default_adaptor is set, use it for the unadapted fields\n-            if cls.default_adaptor:\n-                for field in cls.item_class.fields.keys():\n-                    if field not in cls.field_adaptors.keys():\n-                        set_adaptor(cls, field, cls.default_adaptor.im_func)\n+        if cls.item_class:\n+            for item_field in cls.item_class.fields.keys():\n+                if item_field in attrs:\n+                    adaptor = adaptize(attrs[item_field])\n+                    cls.field_adaptors[item_field] = adaptor\n+                    setattr(cls, item_field, staticmethod(adaptor))\n \n     def __init__(self, response=None, item=None):\n         self.item_instance = item if item else self.item_class()\n@@ -50,7 +60,7 @@ class ItemAdaptor(Declarative):\n         try:\n             fa = self.field_adaptors[name]\n         except KeyError:\n-            return setattr(self.item_instance, name, value)\n+            fa = self.default_adaptor\n \n         adaptor_args = {'response': self._response, 'item': self.item_instance}\n         ovalue = fa(value, adaptor_args=adaptor_args)\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
{"custom_id": "scrapy#06e049e5519ccf90674be45de88b01035a7a8c47", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-4o", "messages": [{"role": "user", "content": "You are a senior reviewer.\n\nCommit Summary:\nLines Added: 15 | Lines Deleted: 15 | Files Changed: 1 | Hunks: 3 | Methods Changed: 2 | Complexity Δ (Sum/Max): -1/0 | Churn Δ: 30 | Churn Cumulative: 312 | Contributors (this commit): 2 | Commits (past 90d): 20 | Contributors (cumulative): 2 | DMM Complexity: 0.0\n\nDIFF:\n@@ -13,9 +13,23 @@ def adaptize(func):\n \n \n class ItemAdaptorMeta(type):\n+\n     def __new__(meta, class_name, bases, attrs):\n         cls = type.__new__(meta, class_name, bases, attrs)\n-        cls.__classinit__.im_func(cls, attrs)\n+\n+        if 'default_adaptor' in attrs:\n+            default_adaptor = adaptize(attrs['default_adaptor'])\n+            cls.default_adaptor = staticmethod(default_adaptor)\n+\n+        cls.field_adaptors = cls.field_adaptors.copy()\n+    \n+        if cls.item_class:\n+            for item_field in cls.item_class.fields.keys():\n+                if item_field in attrs:\n+                    adaptor = adaptize(attrs[item_field])\n+                    cls.field_adaptors[item_field] = adaptor\n+                    setattr(cls, item_field, staticmethod(adaptor))\n+\n         return cls\n \n     def __getattr__(cls, name):\n@@ -34,20 +48,6 @@ class ItemAdaptor(object):\n     default_adaptor = IDENTITY\n     field_adaptors = {}\n \n-    def __classinit__(cls, attrs):\n-        if 'default_adaptor' in attrs:\n-            setattr(cls, 'default_adaptor',\n-                    staticmethod(adaptize(attrs['default_adaptor'])))\n-\n-        cls.field_adaptors = cls.field_adaptors.copy()\n-        \n-        if cls.item_class:\n-            for item_field in cls.item_class.fields.keys():\n-                if item_field in attrs:\n-                    adaptor = adaptize(attrs[item_field])\n-                    cls.field_adaptors[item_field] = adaptor\n-                    setattr(cls, item_field, staticmethod(adaptor))\n-\n     def __init__(self, response=None, item=None):\n         self.item_instance = item if item else self.item_class()\n         self._response = response\n\n\nQuestion: Does this commit introduce technical debt? Answer yes or no."}], "max_tokens": 1, "temperature": 0}}
